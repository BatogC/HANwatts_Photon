
d:/UNI_S5/new_particle_code/2020_photon_code/target/2.0.1/photon/2020_photon_code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00008e04  080a001c  080a001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  080a8e20  080a8e20  00018e20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  40024000  080a8e28  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000240  20000000  080a8e2c  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000428  20000240  20000240  00040240  2**3
                  ALLOC
  7 .module_info_suffix 00000028  080a906c  080a906c  0003906c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  080a9094  080a9094  00039094  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   00163034  00000000  00000000  00039098  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000189bb  00000000  00000000  0019c0cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00029667  00000000  00000000  001b4a87  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00002a48  00000000  00000000  001de0ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00006cd8  00000000  00000000  001e0b36  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0002bac8  00000000  00000000  001e780e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0003a53b  00000000  00000000  002132d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000ba8f2  00000000  00000000  0024d811  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00007e80  00000000  00000000  00308104  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <link_dynalib_end+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <link_dynalib_end+0x2c>)
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <link_dynalib_end+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f006 fda5 	bl	80a6b7c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <link_dynalib_end+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <link_dynalib_end+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f006 fdad 	bl	80a6b98 <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <link_dynalib_end+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000000 	.word	0x20000000
 80a0048:	080a8e2c 	.word	0x080a8e2c
 80a004c:	20000240 	.word	0x20000240
 80a0050:	20000240 	.word	0x20000240
 80a0054:	20000665 	.word	0x20000665
 80a0058:	20000665 	.word	0x20000665

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f004 fd33 	bl	80a4ac8 <module_user_init_hook>

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0062:	2500      	movs	r5, #0
 80a0064:	4e05      	ldr	r6, [pc, #20]	; (80a007c <module_user_init+0x20>)
 80a0066:	4c06      	ldr	r4, [pc, #24]	; (80a0080 <module_user_init+0x24>)
 80a0068:	1ba4      	subs	r4, r4, r6
 80a006a:	08a4      	lsrs	r4, r4, #2
 80a006c:	42a5      	cmp	r5, r4
 80a006e:	d100      	bne.n	80a0072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 80a0072:	f856 3b04 	ldr.w	r3, [r6], #4
 80a0076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f7      	b.n	80a006c <module_user_init+0x10>
 80a007c:	080a8e00 	.word	0x080a8e00
 80a0080:	080a8e20 	.word	0x080a8e20

080a0084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0084:	f001 ba0c 	b.w	80a14a0 <setup>

080a0088 <module_user_loop>:
}

void module_user_loop() {
 80a0088:	b508      	push	{r3, lr}
    loop();
 80a008a:	f001 f855 	bl	80a1138 <loop>
    _post_loop();
}
 80a008e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 80a0092:	f004 bcdb 	b.w	80a4a4c <_post_loop>

080a0096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 80a0096:	f003 bc5d 	b.w	80a3954 <malloc>

080a009a <_Znaj>:
 80a009a:	f003 bc5b 	b.w	80a3954 <malloc>

080a009e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
 80a009e:	f003 bc61 	b.w	80a3964 <free>

080a00a2 <_ZdaPv>:
 80a00a2:	f003 bc5f 	b.w	80a3964 <free>

080a00a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a6:	7800      	ldrb	r0, [r0, #0]
 80a00a8:	fab0 f080 	clz	r0, r0
 80a00ac:	0940      	lsrs	r0, r0, #5
 80a00ae:	4770      	bx	lr

080a00b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00b0:	2301      	movs	r3, #1
 80a00b2:	7003      	strb	r3, [r0, #0]
 80a00b4:	4770      	bx	lr

080a00b6 <_ZN10CloudClass22update_string_variableEPKc18Spark_Data_TypeDefPKvPv>:

    static const void* update_string_variable(const char* name, Spark_Data_TypeDef type, const void* var, void* reserved)
    {
        const String* s = (const String*)var;
        return s->c_str();
    }
 80a00b6:	6810      	ldr	r0, [r2, #0]
 80a00b8:	4770      	bx	lr

080a00ba <_Z11resetOlimex6String>:
    while (*pointer++) {
      out.concat(in[index++]);
      }
}

int resetOlimex(String input) {
 80a00ba:	b508      	push	{r3, lr}
    digitalWrite(RESET_OLIMEX, LOW);
 80a00bc:	2100      	movs	r1, #0
 80a00be:	2004      	movs	r0, #4
 80a00c0:	f005 f935 	bl	80a532e <digitalWrite>
    delay(500);
 80a00c4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a00c8:	f004 fc6a 	bl	80a49a0 <delay>
    digitalWrite(RESET_OLIMEX, HIGH);
 80a00cc:	2101      	movs	r1, #1
 80a00ce:	2004      	movs	r0, #4
 80a00d0:	f005 f92d 	bl	80a532e <digitalWrite>
    return 1;
}
 80a00d4:	2001      	movs	r0, #1
 80a00d6:	bd08      	pop	{r3, pc}

080a00d8 <_Z12progModeOlmx6String>:

int resetParticle(String input) {
    System.reset();
}

int progModeOlmx(String input) {
 80a00d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    digitalWrite(WAKEUP_OLIMEX, HIGH);
 80a00da:	2101      	movs	r1, #1
 80a00dc:	2002      	movs	r0, #2
 80a00de:	f005 f926 	bl	80a532e <digitalWrite>
    delay(500);
 80a00e2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a00e6:	f004 fc5b 	bl	80a49a0 <delay>
    resetOlimex("");
 80a00ea:	490b      	ldr	r1, [pc, #44]	; (80a0118 <_Z12progModeOlmx6String+0x40>)
 80a00ec:	4668      	mov	r0, sp
 80a00ee:	f004 f867 	bl	80a41c0 <_ZN6StringC1EPKc>
 80a00f2:	4668      	mov	r0, sp
 80a00f4:	f7ff ffe1 	bl	80a00ba <_Z11resetOlimex6String>
 80a00f8:	4668      	mov	r0, sp
 80a00fa:	f004 f817 	bl	80a412c <_ZN6StringD1Ev>
    delay(500);
 80a00fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a0102:	f004 fc4d 	bl	80a49a0 <delay>
    digitalWrite(WAKEUP_OLIMEX, LOW);
 80a0106:	2100      	movs	r1, #0
 80a0108:	2002      	movs	r0, #2
 80a010a:	f005 f910 	bl	80a532e <digitalWrite>
    return 1;
}
 80a010e:	2001      	movs	r0, #1
 80a0110:	b005      	add	sp, #20
 80a0112:	f85d fb04 	ldr.w	pc, [sp], #4
 80a0116:	bf00      	nop
 80a0118:	080a89a0 	.word	0x080a89a0

080a011c <_Z10WifiSignal6String>:
int WifiSignal(String input) {
 80a011c:	b500      	push	{lr}
 80a011e:	b08b      	sub	sp, #44	; 0x2c
    return WiFi.RSSI();
 80a0120:	4904      	ldr	r1, [pc, #16]	; (80a0134 <_Z10WifiSignal6String+0x18>)
 80a0122:	a801      	add	r0, sp, #4
 80a0124:	f004 fffe 	bl	80a5124 <_ZN5spark9WiFiClass4RSSIEv>
 80a0128:	a801      	add	r0, sp, #4
 80a012a:	f004 ffd9 	bl	80a50e0 <_ZNK10WiFiSignalcvaEv>
}
 80a012e:	b00b      	add	sp, #44	; 0x2c
 80a0130:	f85d fb04 	ldr.w	pc, [sp], #4
 80a0134:	200005f0 	.word	0x200005f0

080a0138 <_Z13resetParticle6String>:
int resetParticle(String input) {
 80a0138:	b508      	push	{r3, lr}
    System.reset();
 80a013a:	f003 fca8 	bl	80a3a8e <_ZN11SystemClass5resetEv>
	...

080a0140 <_Z12maxCurrentC16String>:
        maxCurrentC2("32");
        return 0;
    }
}

int maxCurrentC1(String setPointStr) {
 80a0140:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a0142:	b08f      	sub	sp, #60	; 0x3c
    unsigned int setPoint = setPointStr.toInt();
 80a0144:	f004 f983 	bl	80a444e <_ZNK6String5toIntEv>
    if (setPoint < 7)
        setPoint = 6;
    byte olimexMessage[4] = {0xFE,1,setPoint,0xFF};
 80a0148:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
 80a014c:	f8ad 3004 	strh.w	r3, [sp, #4]
 80a0150:	23ff      	movs	r3, #255	; 0xff
 80a0152:	2806      	cmp	r0, #6
 80a0154:	bf38      	it	cc
 80a0156:	2006      	movcc	r0, #6
 80a0158:	f88d 3007 	strb.w	r3, [sp, #7]
    if (!TESTCASE) {
 80a015c:	4b20      	ldr	r3, [pc, #128]	; (80a01e0 <_Z12maxCurrentC16String+0xa0>)
 80a015e:	4605      	mov	r5, r0
 80a0160:	781c      	ldrb	r4, [r3, #0]
    byte olimexMessage[4] = {0xFE,1,setPoint,0xFF};
 80a0162:	f88d 0006 	strb.w	r0, [sp, #6]
    if (!TESTCASE) {
 80a0166:	2c00      	cmp	r4, #0
 80a0168:	d137      	bne.n	80a01da <_Z12maxCurrentC16String+0x9a>
        Serial1.write(olimexMessage,4);
 80a016a:	f004 fe8b 	bl	80a4e84 <_Z22__fetch_global_Serial1v>
 80a016e:	2204      	movs	r2, #4
 80a0170:	6803      	ldr	r3, [r0, #0]
 80a0172:	eb0d 0102 	add.w	r1, sp, r2
 80a0176:	68db      	ldr	r3, [r3, #12]
 80a0178:	4798      	blx	r3
        DEBUGPORT.println("maxCurrentC"+String(CHARGEROFFSET+1)+">\tNew setpoint set at "+String(setPoint)+" Amps.");
 80a017a:	f004 fdd1 	bl	80a4d20 <_Z16_fetch_usbserialv>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a017e:	4919      	ldr	r1, [pc, #100]	; (80a01e4 <_Z12maxCurrentC16String+0xa4>)
 80a0180:	4606      	mov	r6, r0
 80a0182:	a806      	add	r0, sp, #24
 80a0184:	f004 f81c 	bl	80a41c0 <_ZN6StringC1EPKc>
 80a0188:	220a      	movs	r2, #10
 80a018a:	2101      	movs	r1, #1
 80a018c:	a802      	add	r0, sp, #8
 80a018e:	f004 f88c 	bl	80a42aa <_ZN6StringC1Eih>
 80a0192:	a902      	add	r1, sp, #8
 80a0194:	a806      	add	r0, sp, #24
 80a0196:	f004 f8fe 	bl	80a4396 <_ZplRK15StringSumHelperRK6String>
 80a019a:	4913      	ldr	r1, [pc, #76]	; (80a01e8 <_Z12maxCurrentC16String+0xa8>)
 80a019c:	f004 f907 	bl	80a43ae <_ZplRK15StringSumHelperPKc>
 80a01a0:	4607      	mov	r7, r0
 80a01a2:	220a      	movs	r2, #10
 80a01a4:	4629      	mov	r1, r5
 80a01a6:	a80a      	add	r0, sp, #40	; 0x28
 80a01a8:	f004 f892 	bl	80a42d0 <_ZN6StringC1Ejh>
 80a01ac:	a90a      	add	r1, sp, #40	; 0x28
 80a01ae:	4638      	mov	r0, r7
 80a01b0:	f004 f8f1 	bl	80a4396 <_ZplRK15StringSumHelperRK6String>
 80a01b4:	490d      	ldr	r1, [pc, #52]	; (80a01ec <_Z12maxCurrentC16String+0xac>)
 80a01b6:	f004 f8fa 	bl	80a43ae <_ZplRK15StringSumHelperPKc>
 80a01ba:	6801      	ldr	r1, [r0, #0]
 80a01bc:	4630      	mov	r0, r6
 80a01be:	f004 f984 	bl	80a44ca <_ZN5Print7printlnEPKc>
 80a01c2:	a80a      	add	r0, sp, #40	; 0x28
 80a01c4:	f003 ffb2 	bl	80a412c <_ZN6StringD1Ev>
 80a01c8:	a802      	add	r0, sp, #8
 80a01ca:	f003 ffaf 	bl	80a412c <_ZN6StringD1Ev>
class StringSumHelper : public String
 80a01ce:	a806      	add	r0, sp, #24
 80a01d0:	f003 ffac 	bl	80a412c <_ZN6StringD1Ev>
        return 0;
 80a01d4:	4620      	mov	r0, r4
    }
    return 1;
}
 80a01d6:	b00f      	add	sp, #60	; 0x3c
 80a01d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return 1;
 80a01da:	2001      	movs	r0, #1
 80a01dc:	e7fb      	b.n	80a01d6 <_Z12maxCurrentC16String+0x96>
 80a01de:	bf00      	nop
 80a01e0:	20000330 	.word	0x20000330
 80a01e4:	080a80cc 	.word	0x080a80cc
 80a01e8:	080a80d8 	.word	0x080a80d8
 80a01ec:	080a80ef 	.word	0x080a80ef

080a01f0 <_Z12maxCurrentC26String>:

int maxCurrentC2(String setPointStr) {
 80a01f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a01f2:	b08f      	sub	sp, #60	; 0x3c
    unsigned int setPoint = setPointStr.toInt();
 80a01f4:	f004 f92b 	bl	80a444e <_ZNK6String5toIntEv>
    if (setPoint < 7)
        setPoint = 6;
    byte olimexMessage[4] = {0xFE, 2, setPoint, 0xFF};
 80a01f8:	f240 23fe 	movw	r3, #766	; 0x2fe
 80a01fc:	f8ad 3004 	strh.w	r3, [sp, #4]
 80a0200:	23ff      	movs	r3, #255	; 0xff
 80a0202:	2806      	cmp	r0, #6
 80a0204:	bf38      	it	cc
 80a0206:	2006      	movcc	r0, #6
 80a0208:	f88d 3007 	strb.w	r3, [sp, #7]
    if (!TESTCASE) {
 80a020c:	4b20      	ldr	r3, [pc, #128]	; (80a0290 <_Z12maxCurrentC26String+0xa0>)
 80a020e:	4605      	mov	r5, r0
 80a0210:	781c      	ldrb	r4, [r3, #0]
    byte olimexMessage[4] = {0xFE, 2, setPoint, 0xFF};
 80a0212:	f88d 0006 	strb.w	r0, [sp, #6]
    if (!TESTCASE) {
 80a0216:	2c00      	cmp	r4, #0
 80a0218:	d137      	bne.n	80a028a <_Z12maxCurrentC26String+0x9a>
        Serial1.write(olimexMessage,4);
 80a021a:	f004 fe33 	bl	80a4e84 <_Z22__fetch_global_Serial1v>
 80a021e:	2204      	movs	r2, #4
 80a0220:	6803      	ldr	r3, [r0, #0]
 80a0222:	eb0d 0102 	add.w	r1, sp, r2
 80a0226:	68db      	ldr	r3, [r3, #12]
 80a0228:	4798      	blx	r3
        DEBUGPORT.println("maxCurrentC"+String(CHARGEROFFSET+2)+">\tNew setpoint set at "+String(setPoint)+" Amps.");
 80a022a:	f004 fd79 	bl	80a4d20 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
 80a022e:	4919      	ldr	r1, [pc, #100]	; (80a0294 <_Z12maxCurrentC26String+0xa4>)
 80a0230:	4606      	mov	r6, r0
 80a0232:	a806      	add	r0, sp, #24
 80a0234:	f003 ffc4 	bl	80a41c0 <_ZN6StringC1EPKc>
 80a0238:	220a      	movs	r2, #10
 80a023a:	2102      	movs	r1, #2
 80a023c:	a802      	add	r0, sp, #8
 80a023e:	f004 f834 	bl	80a42aa <_ZN6StringC1Eih>
 80a0242:	a902      	add	r1, sp, #8
 80a0244:	a806      	add	r0, sp, #24
 80a0246:	f004 f8a6 	bl	80a4396 <_ZplRK15StringSumHelperRK6String>
 80a024a:	4913      	ldr	r1, [pc, #76]	; (80a0298 <_Z12maxCurrentC26String+0xa8>)
 80a024c:	f004 f8af 	bl	80a43ae <_ZplRK15StringSumHelperPKc>
 80a0250:	4607      	mov	r7, r0
 80a0252:	220a      	movs	r2, #10
 80a0254:	4629      	mov	r1, r5
 80a0256:	a80a      	add	r0, sp, #40	; 0x28
 80a0258:	f004 f83a 	bl	80a42d0 <_ZN6StringC1Ejh>
 80a025c:	a90a      	add	r1, sp, #40	; 0x28
 80a025e:	4638      	mov	r0, r7
 80a0260:	f004 f899 	bl	80a4396 <_ZplRK15StringSumHelperRK6String>
 80a0264:	490d      	ldr	r1, [pc, #52]	; (80a029c <_Z12maxCurrentC26String+0xac>)
 80a0266:	f004 f8a2 	bl	80a43ae <_ZplRK15StringSumHelperPKc>
 80a026a:	6801      	ldr	r1, [r0, #0]
 80a026c:	4630      	mov	r0, r6
 80a026e:	f004 f92c 	bl	80a44ca <_ZN5Print7printlnEPKc>
 80a0272:	a80a      	add	r0, sp, #40	; 0x28
 80a0274:	f003 ff5a 	bl	80a412c <_ZN6StringD1Ev>
 80a0278:	a802      	add	r0, sp, #8
 80a027a:	f003 ff57 	bl	80a412c <_ZN6StringD1Ev>
class StringSumHelper : public String
 80a027e:	a806      	add	r0, sp, #24
 80a0280:	f003 ff54 	bl	80a412c <_ZN6StringD1Ev>
        return 0;
 80a0284:	4620      	mov	r0, r4
    }
    return 1;
}
 80a0286:	b00f      	add	sp, #60	; 0x3c
 80a0288:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return 1;
 80a028a:	2001      	movs	r0, #1
 80a028c:	e7fb      	b.n	80a0286 <_Z12maxCurrentC26String+0x96>
 80a028e:	bf00      	nop
 80a0290:	20000330 	.word	0x20000330
 80a0294:	080a80cc 	.word	0x080a80cc
 80a0298:	080a80d8 	.word	0x080a80d8
 80a029c:	080a80ef 	.word	0x080a80ef

080a02a0 <_ZN16JsonWriterStaticILj512EED1Ev>:
 * variable.
 *
 * @param BUFFER_SIZE The size of the buffer to reserve.
 */
template <size_t BUFFER_SIZE>
class JsonWriterStatic : public JsonWriter {
 80a02a0:	b510      	push	{r4, lr}
 80a02a2:	4604      	mov	r4, r0
 80a02a4:	4b02      	ldr	r3, [pc, #8]	; (80a02b0 <_ZN16JsonWriterStaticILj512EED1Ev+0x10>)
 80a02a6:	6003      	str	r3, [r0, #0]
 80a02a8:	f002 fb98 	bl	80a29dc <_ZN10JsonWriterD1Ev>
 80a02ac:	4620      	mov	r0, r4
 80a02ae:	bd10      	pop	{r4, pc}
 80a02b0:	080a8644 	.word	0x080a8644

080a02b4 <_ZN16JsonWriterStaticILj512EED0Ev>:
 80a02b4:	b510      	push	{r4, lr}
 80a02b6:	4604      	mov	r4, r0
 80a02b8:	f7ff fff2 	bl	80a02a0 <_ZN16JsonWriterStaticILj512EED1Ev>
 80a02bc:	4620      	mov	r0, r4
 80a02be:	f44f 710c 	mov.w	r1, #560	; 0x230
 80a02c2:	f005 f8be 	bl	80a5442 <_ZdlPvj>
 80a02c6:	4620      	mov	r0, r4
 80a02c8:	bd10      	pop	{r4, pc}

080a02ca <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(hal_spi_interface_t spi);
  ~SPIClass() = default;
 80a02ca:	b510      	push	{r4, lr}
 80a02cc:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a02ce:	6880      	ldr	r0, [r0, #8]
 80a02d0:	b108      	cbz	r0, 80a02d6 <_ZN8SPIClassD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
 80a02d2:	f003 f91f 	bl	80a3514 <os_mutex_recursive_destroy>
 80a02d6:	4620      	mov	r0, r4
 80a02d8:	bd10      	pop	{r4, pc}
	...

080a02dc <_Z10switchTest6String>:
int switchTest(String valueString) {
 80a02dc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 80a02de:	4913      	ldr	r1, [pc, #76]	; (80a032c <_Z10switchTest6String+0x50>)
 80a02e0:	4605      	mov	r5, r0
 80a02e2:	f004 f878 	bl	80a43d6 <_ZNK6String6equalsEPKc>
 80a02e6:	4e12      	ldr	r6, [pc, #72]	; (80a0330 <_Z10switchTest6String+0x54>)
    if (valueString == "true") {
 80a02e8:	4604      	mov	r4, r0
 80a02ea:	b118      	cbz	r0, 80a02f4 <_Z10switchTest6String+0x18>
        TESTCASE = true;
 80a02ec:	2001      	movs	r0, #1
 80a02ee:	7030      	strb	r0, [r6, #0]
}
 80a02f0:	b004      	add	sp, #16
 80a02f2:	bd70      	pop	{r4, r5, r6, pc}
 80a02f4:	490f      	ldr	r1, [pc, #60]	; (80a0334 <_Z10switchTest6String+0x58>)
 80a02f6:	4628      	mov	r0, r5
 80a02f8:	f004 f86d 	bl	80a43d6 <_ZNK6String6equalsEPKc>
        maxCurrentC1("32");
 80a02fc:	490e      	ldr	r1, [pc, #56]	; (80a0338 <_Z10switchTest6String+0x5c>)
 80a02fe:	4668      	mov	r0, sp
        TESTCASE = false;
 80a0300:	7034      	strb	r4, [r6, #0]
        maxCurrentC1("32");
 80a0302:	f003 ff5d 	bl	80a41c0 <_ZN6StringC1EPKc>
 80a0306:	4668      	mov	r0, sp
 80a0308:	f7ff ff1a 	bl	80a0140 <_Z12maxCurrentC16String>
 80a030c:	4668      	mov	r0, sp
 80a030e:	f003 ff0d 	bl	80a412c <_ZN6StringD1Ev>
        maxCurrentC2("32");
 80a0312:	4909      	ldr	r1, [pc, #36]	; (80a0338 <_Z10switchTest6String+0x5c>)
 80a0314:	4668      	mov	r0, sp
 80a0316:	f003 ff53 	bl	80a41c0 <_ZN6StringC1EPKc>
 80a031a:	4668      	mov	r0, sp
 80a031c:	f7ff ff68 	bl	80a01f0 <_Z12maxCurrentC26String>
 80a0320:	4668      	mov	r0, sp
 80a0322:	f003 ff03 	bl	80a412c <_ZN6StringD1Ev>
 80a0326:	4620      	mov	r0, r4
 80a0328:	e7e2      	b.n	80a02f0 <_Z10switchTest6String+0x14>
 80a032a:	bf00      	nop
 80a032c:	080a80f6 	.word	0x080a80f6
 80a0330:	20000330 	.word	0x20000330
 80a0334:	080a80fb 	.word	0x080a80fb
 80a0338:	080a8101 	.word	0x080a8101

080a033c <_ZN10CloudClass9_variableIcEEbPKT_PK6StringRK17CloudVariableTypeIPKcvE.isra.0>:
    static inline bool _variable(const T *varKey, const String *userVar, const CloudVariableTypeString& userVarType)
 80a033c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        spark_variable_t extra = {};
 80a033e:	2300      	movs	r3, #0
 80a0340:	9301      	str	r3, [sp, #4]
 80a0342:	9303      	str	r3, [sp, #12]
        extra.size = sizeof(extra);
 80a0344:	230c      	movs	r3, #12
 80a0346:	f8ad 3004 	strh.w	r3, [sp, #4]
        extra.update = update_string_variable;
 80a034a:	4b04      	ldr	r3, [pc, #16]	; (80a035c <_ZN10CloudClass9_variableIcEEbPKT_PK6StringRK17CloudVariableTypeIPKcvE.isra.0+0x20>)
        return spark_variable(varKey, userVar, CloudVariableTypeString::TYPE_ID, &extra);
 80a034c:	2204      	movs	r2, #4
        extra.update = update_string_variable;
 80a034e:	9302      	str	r3, [sp, #8]
        return spark_variable(varKey, userVar, CloudVariableTypeString::TYPE_ID, &extra);
 80a0350:	ab01      	add	r3, sp, #4
 80a0352:	f003 fac7 	bl	80a38e4 <spark_variable>
    }
 80a0356:	b005      	add	sp, #20
 80a0358:	f85d fb04 	ldr.w	pc, [sp], #4
 80a035c:	080a00b7 	.word	0x080a00b7

080a0360 <_Z8initRFID6String>:
			break;
		}
	}
}

int initRFID(String input) {
 80a0360:	b538      	push	{r3, r4, r5, lr}
    //additional config for debugging RFID readers
    pinMode(SS_PIN_CHARGER1, OUTPUT);
 80a0362:	2101      	movs	r1, #1
 80a0364:	200b      	movs	r0, #11
 80a0366:	f004 ffd1 	bl	80a530c <pinMode>
	digitalWrite(SS_PIN_CHARGER1, HIGH);
 80a036a:	2101      	movs	r1, #1
 80a036c:	200b      	movs	r0, #11
 80a036e:	f004 ffde 	bl	80a532e <digitalWrite>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a0372:	4d21      	ldr	r5, [pc, #132]	; (80a03f8 <_Z8initRFID6String+0x98>)
	pinMode(SS_PIN_CHARGER2, OUTPUT);
 80a0374:	2101      	movs	r1, #1
 80a0376:	200c      	movs	r0, #12
 80a0378:	f004 ffc8 	bl	80a530c <pinMode>
	digitalWrite(SS_PIN_CHARGER2, HIGH);
 80a037c:	2101      	movs	r1, #1
 80a037e:	200c      	movs	r0, #12
 80a0380:	f004 ffd5 	bl	80a532e <digitalWrite>
 80a0384:	7829      	ldrb	r1, [r5, #0]
 80a0386:	f3bf 8f5b 	dmb	ish
 80a038a:	f011 0401 	ands.w	r4, r1, #1
 80a038e:	d10f      	bne.n	80a03b0 <_Z8initRFID6String+0x50>
 80a0390:	4628      	mov	r0, r5
 80a0392:	f7ff fe88 	bl	80a00a6 <__cxa_guard_acquire>
 80a0396:	b158      	cbz	r0, 80a03b0 <_Z8initRFID6String+0x50>
 80a0398:	4621      	mov	r1, r4
 80a039a:	4818      	ldr	r0, [pc, #96]	; (80a03fc <_Z8initRFID6String+0x9c>)
 80a039c:	f003 fb35 	bl	80a3a0a <_ZN8SPIClassC1E19hal_spi_interface_t>
 80a03a0:	4628      	mov	r0, r5
 80a03a2:	f7ff fe85 	bl	80a00b0 <__cxa_guard_release>
 80a03a6:	4a16      	ldr	r2, [pc, #88]	; (80a0400 <_Z8initRFID6String+0xa0>)
 80a03a8:	4916      	ldr	r1, [pc, #88]	; (80a0404 <_Z8initRFID6String+0xa4>)
 80a03aa:	4814      	ldr	r0, [pc, #80]	; (80a03fc <_Z8initRFID6String+0x9c>)
 80a03ac:	f005 f844 	bl	80a5438 <__aeabi_atexit>
    }
    void begin() {
        instance().begin();
    }
    void begin(uint16_t ss_pin) {
        instance().begin(ss_pin);
 80a03b0:	2100      	movs	r1, #0
 80a03b2:	4812      	ldr	r0, [pc, #72]	; (80a03fc <_Z8initRFID6String+0x9c>)
 80a03b4:	f003 fb38 	bl	80a3a28 <_ZN8SPIClass5beginEt>
  
    SPI.begin(D0);      // Initiate  SPI bus
    //Particle.process();
    delay(50);
 80a03b8:	2032      	movs	r0, #50	; 0x32
 80a03ba:	f004 faf1 	bl	80a49a0 <delay>
    mfrc522_Charger1.PCD_Init();   // Initiate MFRC522
 80a03be:	4812      	ldr	r0, [pc, #72]	; (80a0408 <_Z8initRFID6String+0xa8>)
 80a03c0:	f001 fbca 	bl	80a1b58 <_ZN7MFRC5228PCD_InitEv>
    delay(500);
 80a03c4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a03c8:	f004 faea 	bl	80a49a0 <delay>
    mfrc522_Charger2.PCD_Init();   // Initiate MFRC522
 80a03cc:	480f      	ldr	r0, [pc, #60]	; (80a040c <_Z8initRFID6String+0xac>)
 80a03ce:	f001 fbc3 	bl	80a1b58 <_ZN7MFRC5228PCD_InitEv>
    ////mfrc522_Charger1.PCD_SetAntennaGain(mfrc522.RxGain_max);
    mfrc522_Charger1.PCD_SetAntennaGain(mfrc522_Charger1.RxGain_max);
 80a03d2:	2170      	movs	r1, #112	; 0x70
 80a03d4:	480c      	ldr	r0, [pc, #48]	; (80a0408 <_Z8initRFID6String+0xa8>)
 80a03d6:	f001 fbfa 	bl	80a1bce <_ZN7MFRC52218PCD_SetAntennaGainEh>
    mfrc522_Charger2.PCD_SetAntennaGain(mfrc522_Charger2.RxGain_max);
 80a03da:	2170      	movs	r1, #112	; 0x70
 80a03dc:	480b      	ldr	r0, [pc, #44]	; (80a040c <_Z8initRFID6String+0xac>)
 80a03de:	f001 fbf6 	bl	80a1bce <_ZN7MFRC52218PCD_SetAntennaGainEh>
    
    DEBUGPORT.println("Approach your card to the reader...");
 80a03e2:	f004 fc9d 	bl	80a4d20 <_Z16_fetch_usbserialv>
 80a03e6:	490a      	ldr	r1, [pc, #40]	; (80a0410 <_Z8initRFID6String+0xb0>)
 80a03e8:	f004 f86f 	bl	80a44ca <_ZN5Print7printlnEPKc>
    DEBUGPORT.println();    
 80a03ec:	f004 fc98 	bl	80a4d20 <_Z16_fetch_usbserialv>
 80a03f0:	f004 f85f 	bl	80a44b2 <_ZN5Print7printlnEv>
    return 1;
}
 80a03f4:	2001      	movs	r0, #1
 80a03f6:	bd38      	pop	{r3, r4, r5, pc}
 80a03f8:	20000244 	.word	0x20000244
 80a03fc:	20000248 	.word	0x20000248
 80a0400:	20000240 	.word	0x20000240
 80a0404:	080a02cb 	.word	0x080a02cb
 80a0408:	20000521 	.word	0x20000521
 80a040c:	2000052f 	.word	0x2000052f
 80a0410:	080a8104 	.word	0x080a8104

080a0414 <_ZN10CloudClass7processEv>:
    static void process(void) {
 80a0414:	b508      	push	{r3, lr}
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a0416:	f003 f85d 	bl	80a34d4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a041a:	4b03      	ldr	r3, [pc, #12]	; (80a0428 <_ZN10CloudClass7processEv+0x14>)
 80a041c:	6018      	str	r0, [r3, #0]
    }
 80a041e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    		spark_process();
 80a0422:	f003 ba6f 	b.w	80a3904 <spark_process>
 80a0426:	bf00      	nop
 80a0428:	20000600 	.word	0x20000600

080a042c <_Z18bytesArrToFloatArrPcjPfj>:

    return output;
}

bool bytesArrToFloatArr(char * Arr, unsigned int ArrLen, float * OutputArr, unsigned int FloatLen)
{
 80a042c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    //FloatTriplet TriOutput;
    for(int i=0; (i<FloatLen) && (4*i+3 < ArrLen); i++)
 80a042e:	2400      	movs	r4, #0
 80a0430:	0889      	lsrs	r1, r1, #2
 80a0432:	429c      	cmp	r4, r3
 80a0434:	d018      	beq.n	80a0468 <_Z18bytesArrToFloatArrPcjPfj+0x3c>
 80a0436:	428c      	cmp	r4, r1
 80a0438:	f100 0004 	add.w	r0, r0, #4
 80a043c:	d014      	beq.n	80a0468 <_Z18bytesArrToFloatArrPcjPfj+0x3c>
    {
        float output;

        *((unsigned char *)(&output) + 3) = (unsigned char) Arr[4*i+0];
 80a043e:	f810 5c04 	ldrb.w	r5, [r0, #-4]
 80a0442:	f88d 5007 	strb.w	r5, [sp, #7]
        *((unsigned char *)(&output) + 2) = Arr[4*i+1];
 80a0446:	f810 5c03 	ldrb.w	r5, [r0, #-3]
 80a044a:	f88d 5006 	strb.w	r5, [sp, #6]
        *((unsigned char *)(&output) + 1) = Arr[4*i+2];
 80a044e:	f810 5c02 	ldrb.w	r5, [r0, #-2]
 80a0452:	f88d 5005 	strb.w	r5, [sp, #5]
        *((unsigned char *)(&output) + 0) = Arr[4*i+3];
 80a0456:	f810 5c01 	ldrb.w	r5, [r0, #-1]
 80a045a:	f88d 5004 	strb.w	r5, [sp, #4]
        
        OutputArr[i] = output;
 80a045e:	9d01      	ldr	r5, [sp, #4]
 80a0460:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
    for(int i=0; (i<FloatLen) && (4*i+3 < ArrLen); i++)
 80a0464:	3401      	adds	r4, #1
 80a0466:	e7e4      	b.n	80a0432 <_Z18bytesArrToFloatArrPcjPfj+0x6>
    }

    return true;
}
 80a0468:	2001      	movs	r0, #1
 80a046a:	b003      	add	sp, #12
 80a046c:	bd30      	pop	{r4, r5, pc}
	...

080a0470 <_Z11stringParsePci>:
    }

    return TriOutput;
}
*/
int stringParse(char * buf, int buflen){
 80a0470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  String cmdValue;
  int Charger=0;
  for (int i=0; i<buflen; i++){
 80a0474:	f04f 0800 	mov.w	r8, #0
int stringParse(char * buf, int buflen){
 80a0478:	b09d      	sub	sp, #116	; 0x74
 80a047a:	4605      	mov	r5, r0
 80a047c:	460e      	mov	r6, r1
  String cmdValue;
 80a047e:	a804      	add	r0, sp, #16
 80a0480:	49c4      	ldr	r1, [pc, #784]	; (80a0794 <_Z11stringParsePci+0x324>)
 80a0482:	f003 fe9d 	bl	80a41c0 <_ZN6StringC1EPKc>
  int Charger=0;
 80a0486:	4647      	mov	r7, r8
  for (int i=0; i<buflen; i++){
 80a0488:	45b0      	cmp	r8, r6
 80a048a:	f280 81d9 	bge.w	80a0840 <_Z11stringParsePci+0x3d0>
    if(buf[i]==0x0F && i+2>=buflen) //error check?
 80a048e:	782b      	ldrb	r3, [r5, #0]
 80a0490:	2b0f      	cmp	r3, #15
 80a0492:	d108      	bne.n	80a04a6 <_Z11stringParsePci+0x36>
 80a0494:	f108 0302 	add.w	r3, r8, #2
 80a0498:	429e      	cmp	r6, r3
 80a049a:	dc04      	bgt.n	80a04a6 <_Z11stringParsePci+0x36>
    {
      DEBUGPORT.println("E");
 80a049c:	f004 fc40 	bl	80a4d20 <_Z16_fetch_usbserialv>
 80a04a0:	49bd      	ldr	r1, [pc, #756]	; (80a0798 <_Z11stringParsePci+0x328>)
 80a04a2:	f004 f812 	bl	80a44ca <_ZN5Print7printlnEPKc>
    }
    if((buf[i]==0x0F || buf[i]==0x0E) && i+2<buflen) //we detect a command-character and the next two characters exists
 80a04a6:	462c      	mov	r4, r5
 80a04a8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80a04ac:	f1a3 020e 	sub.w	r2, r3, #14
 80a04b0:	2a01      	cmp	r2, #1
 80a04b2:	f200 80f0 	bhi.w	80a0696 <_Z11stringParsePci+0x226>
 80a04b6:	f108 0202 	add.w	r2, r8, #2
 80a04ba:	42b2      	cmp	r2, r6
 80a04bc:	f280 80eb 	bge.w	80a0696 <_Z11stringParsePci+0x226>
      {
        Charger=1;  
      }
      else
      {
        Charger=2;
 80a04c0:	2b0f      	cmp	r3, #15
 80a04c2:	bf0c      	ite	eq
 80a04c4:	2701      	moveq	r7, #1
 80a04c6:	2702      	movne	r7, #2
      }
      DEBUGPORT.print("Charger "+String(Charger)+": ");
 80a04c8:	f004 fc2a 	bl	80a4d20 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
 80a04cc:	49b3      	ldr	r1, [pc, #716]	; (80a079c <_Z11stringParsePci+0x32c>)
 80a04ce:	4681      	mov	r9, r0
 80a04d0:	a818      	add	r0, sp, #96	; 0x60
 80a04d2:	f003 fe75 	bl	80a41c0 <_ZN6StringC1EPKc>
 80a04d6:	220a      	movs	r2, #10
 80a04d8:	4639      	mov	r1, r7
 80a04da:	a814      	add	r0, sp, #80	; 0x50
 80a04dc:	f003 fee5 	bl	80a42aa <_ZN6StringC1Eih>
 80a04e0:	a914      	add	r1, sp, #80	; 0x50
 80a04e2:	a818      	add	r0, sp, #96	; 0x60
 80a04e4:	f003 ff57 	bl	80a4396 <_ZplRK15StringSumHelperRK6String>
 80a04e8:	49ad      	ldr	r1, [pc, #692]	; (80a07a0 <_Z11stringParsePci+0x330>)
 80a04ea:	f003 ff60 	bl	80a43ae <_ZplRK15StringSumHelperPKc>
 80a04ee:	6801      	ldr	r1, [r0, #0]
 80a04f0:	4648      	mov	r0, r9
 80a04f2:	f003 ffd7 	bl	80a44a4 <_ZN5Print5printEPKc>
 80a04f6:	a814      	add	r0, sp, #80	; 0x50
 80a04f8:	f003 fe18 	bl	80a412c <_ZN6StringD1Ev>
class StringSumHelper : public String
 80a04fc:	a818      	add	r0, sp, #96	; 0x60
 80a04fe:	f003 fe15 	bl	80a412c <_ZN6StringD1Ev>
      String measurements;
 80a0502:	49a4      	ldr	r1, [pc, #656]	; (80a0794 <_Z11stringParsePci+0x324>)
 80a0504:	a808      	add	r0, sp, #32
 80a0506:	f003 fe5b 	bl	80a41c0 <_ZN6StringC1EPKc>
      switch (buf[i+1])
 80a050a:	7823      	ldrb	r3, [r4, #0]
 80a050c:	3b01      	subs	r3, #1
 80a050e:	2b05      	cmp	r3, #5
 80a0510:	f200 80be 	bhi.w	80a0690 <_Z11stringParsePci+0x220>
 80a0514:	e8df f013 	tbh	[pc, r3, lsl #1]
 80a0518:	00560006 	.word	0x00560006
 80a051c:	00eb00c7 	.word	0x00eb00c7
 80a0520:	01870164 	.word	0x01870164
      {
        case 1:
          //Phase Voltage
          if(buflen>4)
 80a0524:	2e04      	cmp	r6, #4
 80a0526:	dd47      	ble.n	80a05b8 <_Z11stringParsePci+0x148>
          {
              //Voltage[Charger-1] = bytesToFloat(buf[i+2], buf[i+3], buf[i+4], buf[i+5]);
              float VoltageArr[3];
              if(bytesArrToFloatArr(&buf[i+2], 12, VoltageArr,3))
 80a0528:	1ca8      	adds	r0, r5, #2
 80a052a:	2303      	movs	r3, #3
 80a052c:	210c      	movs	r1, #12
 80a052e:	aa01      	add	r2, sp, #4
 80a0530:	f7ff ff7c 	bl	80a042c <_Z18bytesArrToFloatArrPcjPfj>
 80a0534:	4d9b      	ldr	r5, [pc, #620]	; (80a07a4 <_Z11stringParsePci+0x334>)
 80a0536:	f107 39ff 	add.w	r9, r7, #4294967295
          //Line Voltage
          if(buflen>4)
          {
              //Voltage[Charger-1] = bytesToFloat(buf[i+2], buf[i+3], buf[i+4], buf[i+5]);
              float VoltageArr[3];
              if(bytesArrToFloatArr(&buf[i+2], 12, VoltageArr,3))
 80a053a:	b148      	cbz	r0, 80a0550 <_Z11stringParsePci+0xe0>
              {
                //Current[Charger-1] = (CurrentArr[0]+CurrentArr[1]+CurrentArr[2])/3;  
                for(int i=0;i<3;i++)
                {
                    LineVoltage[Charger-1][i]=VoltageArr[i];
 80a053c:	230c      	movs	r3, #12
 80a053e:	fb03 f309 	mul.w	r3, r3, r9
 80a0542:	9901      	ldr	r1, [sp, #4]
 80a0544:	18ea      	adds	r2, r5, r3
 80a0546:	50e9      	str	r1, [r5, r3]
 80a0548:	9b02      	ldr	r3, [sp, #8]
 80a054a:	6053      	str	r3, [r2, #4]
 80a054c:	9b03      	ldr	r3, [sp, #12]
 80a054e:	6093      	str	r3, [r2, #8]
                }
                //Voltage[Charger-1] = {VoltageArr[0],VoltageArr[1],VoltageArr[2]};
              }
              DEBUGPORT.print("Voltage: "+String(LineVoltage[Charger-1][0],4)+" "+String(LineVoltage[Charger-1][1],4)+" "+String(LineVoltage[Charger-1][2],4));
 80a0550:	f004 fbe6 	bl	80a4d20 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
 80a0554:	4994      	ldr	r1, [pc, #592]	; (80a07a8 <_Z11stringParsePci+0x338>)
 80a0556:	4682      	mov	sl, r0
 80a0558:	a810      	add	r0, sp, #64	; 0x40
 80a055a:	f003 fe31 	bl	80a41c0 <_ZN6StringC1EPKc>
 80a055e:	230c      	movs	r3, #12
 80a0560:	fb03 f309 	mul.w	r3, r3, r9
 80a0564:	2204      	movs	r2, #4
 80a0566:	58e9      	ldr	r1, [r5, r3]
 80a0568:	a80c      	add	r0, sp, #48	; 0x30
 80a056a:	eb05 0903 	add.w	r9, r5, r3
 80a056e:	f003 fec2 	bl	80a42f6 <_ZN6StringC1Efi>
 80a0572:	a90c      	add	r1, sp, #48	; 0x30
 80a0574:	a810      	add	r0, sp, #64	; 0x40
 80a0576:	f003 ff0e 	bl	80a4396 <_ZplRK15StringSumHelperRK6String>
 80a057a:	498c      	ldr	r1, [pc, #560]	; (80a07ac <_Z11stringParsePci+0x33c>)
 80a057c:	f003 ff17 	bl	80a43ae <_ZplRK15StringSumHelperPKc>
 80a0580:	4605      	mov	r5, r0
 80a0582:	2204      	movs	r2, #4
 80a0584:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80a0588:	a814      	add	r0, sp, #80	; 0x50
 80a058a:	f003 feb4 	bl	80a42f6 <_ZN6StringC1Efi>
 80a058e:	4628      	mov	r0, r5
 80a0590:	a914      	add	r1, sp, #80	; 0x50
 80a0592:	f003 ff00 	bl	80a4396 <_ZplRK15StringSumHelperRK6String>
 80a0596:	4985      	ldr	r1, [pc, #532]	; (80a07ac <_Z11stringParsePci+0x33c>)
 80a0598:	f003 ff09 	bl	80a43ae <_ZplRK15StringSumHelperPKc>
 80a059c:	4605      	mov	r5, r0
 80a059e:	2204      	movs	r2, #4
 80a05a0:	f8d9 1008 	ldr.w	r1, [r9, #8]
 80a05a4:	a818      	add	r0, sp, #96	; 0x60
 80a05a6:	f003 fea6 	bl	80a42f6 <_ZN6StringC1Efi>
 80a05aa:	a918      	add	r1, sp, #96	; 0x60
 80a05ac:	4628      	mov	r0, r5
 80a05ae:	f003 fef2 	bl	80a4396 <_ZplRK15StringSumHelperRK6String>
 80a05b2:	6801      	ldr	r1, [r0, #0]
 80a05b4:	4650      	mov	r0, sl
 80a05b6:	e0d9      	b.n	80a076c <_Z11stringParsePci+0x2fc>
              DEBUGPORT.print("did not receive enough voltage data");
 80a05b8:	f004 fbb2 	bl	80a4d20 <_Z16_fetch_usbserialv>
 80a05bc:	497c      	ldr	r1, [pc, #496]	; (80a07b0 <_Z11stringParsePci+0x340>)
              DEBUGPORT.print("did not receive enough energy data");
 80a05be:	f003 ff71 	bl	80a44a4 <_ZN5Print5printEPKc>
 80a05c2:	e065      	b.n	80a0690 <_Z11stringParsePci+0x220>
          if(buflen>12) //(buflen>4)
 80a05c4:	2e0c      	cmp	r6, #12
 80a05c6:	dd6a      	ble.n	80a069e <_Z11stringParsePci+0x22e>
              if(bytesArrToFloatArr(&buf[i+2], 12, Current[Charger-1],3))
 80a05c8:	210c      	movs	r1, #12
 80a05ca:	f107 3aff 	add.w	sl, r7, #4294967295
 80a05ce:	fb01 fb0a 	mul.w	fp, r1, sl
 80a05d2:	4b78      	ldr	r3, [pc, #480]	; (80a07b4 <_Z11stringParsePci+0x344>)
 80a05d4:	1ca8      	adds	r0, r5, #2
 80a05d6:	eb03 090b 	add.w	r9, r3, fp
 80a05da:	464a      	mov	r2, r9
 80a05dc:	2303      	movs	r3, #3
 80a05de:	f7ff ff25 	bl	80a042c <_Z18bytesArrToFloatArrPcjPfj>
              DEBUGPORT.print("Current: ");
 80a05e2:	f004 fb9d 	bl	80a4d20 <_Z16_fetch_usbserialv>
 80a05e6:	4974      	ldr	r1, [pc, #464]	; (80a07b8 <_Z11stringParsePci+0x348>)
 80a05e8:	f003 ff5c 	bl	80a44a4 <_ZN5Print5printEPKc>
              DEBUGPORT.print(Current[Charger-1][0],4);DEBUGPORT.print(" ");
 80a05ec:	f004 fb98 	bl	80a4d20 <_Z16_fetch_usbserialv>
 80a05f0:	4b70      	ldr	r3, [pc, #448]	; (80a07b4 <_Z11stringParsePci+0x344>)
 80a05f2:	2204      	movs	r2, #4
 80a05f4:	461d      	mov	r5, r3
 80a05f6:	f853 100b 	ldr.w	r1, [r3, fp]
 80a05fa:	f004 f84d 	bl	80a4698 <_ZN5Print5printEfi>
 80a05fe:	f004 fb8f 	bl	80a4d20 <_Z16_fetch_usbserialv>
 80a0602:	496a      	ldr	r1, [pc, #424]	; (80a07ac <_Z11stringParsePci+0x33c>)
 80a0604:	f003 ff4e 	bl	80a44a4 <_ZN5Print5printEPKc>
              DEBUGPORT.print(Current[Charger-1][1],4);DEBUGPORT.print(" ");
 80a0608:	f004 fb8a 	bl	80a4d20 <_Z16_fetch_usbserialv>
 80a060c:	2204      	movs	r2, #4
 80a060e:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80a0612:	f004 f841 	bl	80a4698 <_ZN5Print5printEfi>
 80a0616:	f004 fb83 	bl	80a4d20 <_Z16_fetch_usbserialv>
 80a061a:	4964      	ldr	r1, [pc, #400]	; (80a07ac <_Z11stringParsePci+0x33c>)
 80a061c:	f003 ff42 	bl	80a44a4 <_ZN5Print5printEPKc>
              DEBUGPORT.println(Current[Charger-1][2],4);
 80a0620:	f004 fb7e 	bl	80a4d20 <_Z16_fetch_usbserialv>
 80a0624:	2204      	movs	r2, #4
 80a0626:	f8d9 1008 	ldr.w	r1, [r9, #8]
 80a062a:	f004 f852 	bl	80a46d2 <_ZN5Print7printlnEfi>
              if((Current[Charger-1][0]+Current[Charger-1][1]+Current[Charger-1][2])<1)
 80a062e:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80a0632:	f855 000b 	ldr.w	r0, [r5, fp]
 80a0636:	f005 fcd7 	bl	80a5fe8 <__addsf3>
 80a063a:	f8d9 1008 	ldr.w	r1, [r9, #8]
 80a063e:	f005 fcd3 	bl	80a5fe8 <__addsf3>
 80a0642:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80a0646:	f005 ff75 	bl	80a6534 <__aeabi_fcmplt>
 80a064a:	4d5c      	ldr	r5, [pc, #368]	; (80a07bc <_Z11stringParsePci+0x34c>)
 80a064c:	b110      	cbz	r0, 80a0654 <_Z11stringParsePci+0x1e4>
                numberOfZeroReadings[Charger-1]++;
 80a064e:	f855 002a 	ldr.w	r0, [r5, sl, lsl #2]
 80a0652:	3001      	adds	r0, #1
 80a0654:	4b5a      	ldr	r3, [pc, #360]	; (80a07c0 <_Z11stringParsePci+0x350>)
 80a0656:	f845 002a 	str.w	r0, [r5, sl, lsl #2]
              for(int i=18;i>=0;i--)
 80a065a:	f1a3 0a4c 	sub.w	sl, r3, #76	; 0x4c
                   CurrentList[i+1]= CurrentList[i];
 80a065e:	f853 2c04 	ldr.w	r2, [r3, #-4]
 80a0662:	f843 2904 	str.w	r2, [r3], #-4
              for(int i=18;i>=0;i--)
 80a0666:	459a      	cmp	sl, r3
 80a0668:	d1f9      	bne.n	80a065e <_Z11stringParsePci+0x1ee>
              CurrentList[0]=(Current[0][0]+Current[0][1]+Current[0][2]);//numberOfZeroReadings[0];
 80a066a:	4b52      	ldr	r3, [pc, #328]	; (80a07b4 <_Z11stringParsePci+0x344>)
 80a066c:	f8d3 9008 	ldr.w	r9, [r3, #8]
 80a0670:	6859      	ldr	r1, [r3, #4]
 80a0672:	6818      	ldr	r0, [r3, #0]
 80a0674:	f005 fcb8 	bl	80a5fe8 <__addsf3>
 80a0678:	4649      	mov	r1, r9
 80a067a:	f005 fcb5 	bl	80a5fe8 <__addsf3>
 80a067e:	f8ca 0000 	str.w	r0, [sl]
              CurrentList[1]=numberOfZeroReadings[0];
 80a0682:	6828      	ldr	r0, [r5, #0]
 80a0684:	f005 fd64 	bl	80a6150 <__aeabi_i2f>
              CurrentList[2]=Current[0][2];
 80a0688:	f8ca 9008 	str.w	r9, [sl, #8]
              CurrentList[1]=numberOfZeroReadings[0];
 80a068c:	f8ca 0004 	str.w	r0, [sl, #4]
      String measurements;
 80a0690:	a808      	add	r0, sp, #32
 80a0692:	f003 fd4b 	bl	80a412c <_ZN6StringD1Ev>
  for (int i=0; i<buflen; i++){
 80a0696:	4625      	mov	r5, r4
 80a0698:	f108 0801 	add.w	r8, r8, #1
 80a069c:	e6f4      	b.n	80a0488 <_Z11stringParsePci+0x18>
              DEBUGPORT.print("did not receive enough current data");
 80a069e:	f004 fb3f 	bl	80a4d20 <_Z16_fetch_usbserialv>
 80a06a2:	4948      	ldr	r1, [pc, #288]	; (80a07c4 <_Z11stringParsePci+0x354>)
 80a06a4:	e78b      	b.n	80a05be <_Z11stringParsePci+0x14e>
          if(buflen>4)
 80a06a6:	2e04      	cmp	r6, #4
 80a06a8:	dd1d      	ble.n	80a06e6 <_Z11stringParsePci+0x276>
              Frequency[0] = bytesToFloat(buf[i+2], buf[i+3], buf[i+4], buf[i+5]);
 80a06aa:	78e2      	ldrb	r2, [r4, #3]
 80a06ac:	78a1      	ldrb	r1, [r4, #2]
 80a06ae:	7923      	ldrb	r3, [r4, #4]
    *((unsigned char *)(&output) + 3) = b0;
 80a06b0:	7860      	ldrb	r0, [r4, #1]
    *((unsigned char *)(&output) + 1) = b2;
 80a06b2:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
    *((unsigned char *)(&output) + 2) = b1;
 80a06b6:	f88d 1062 	strb.w	r1, [sp, #98]	; 0x62
    *((unsigned char *)(&output) + 3) = b0;
 80a06ba:	f88d 0063 	strb.w	r0, [sp, #99]	; 0x63
    *((unsigned char *)(&output) + 0) = b3;
 80a06be:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
    return output;
 80a06c2:	9b18      	ldr	r3, [sp, #96]	; 0x60
              Frequency[0] = bytesToFloat(buf[i+2], buf[i+3], buf[i+4], buf[i+5]);
 80a06c4:	4d40      	ldr	r5, [pc, #256]	; (80a07c8 <_Z11stringParsePci+0x358>)
 80a06c6:	602b      	str	r3, [r5, #0]
              Frequency[1]=Frequency[0];
 80a06c8:	606b      	str	r3, [r5, #4]
              DEBUGPORT.print("Frequency: ");
 80a06ca:	f004 fb29 	bl	80a4d20 <_Z16_fetch_usbserialv>
 80a06ce:	493f      	ldr	r1, [pc, #252]	; (80a07cc <_Z11stringParsePci+0x35c>)
 80a06d0:	f003 fee8 	bl	80a44a4 <_ZN5Print5printEPKc>
              DEBUGPORT.print(Frequency[Charger-1],4);
 80a06d4:	f004 fb24 	bl	80a4d20 <_Z16_fetch_usbserialv>
 80a06d8:	2204      	movs	r2, #4
 80a06da:	1e7b      	subs	r3, r7, #1
 80a06dc:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
              DEBUGPORT.print(Energy[Charger-1],4);
 80a06e0:	f003 ffda 	bl	80a4698 <_ZN5Print5printEfi>
 80a06e4:	e7d4      	b.n	80a0690 <_Z11stringParsePci+0x220>
              DEBUGPORT.print("did not receive enough frequency data");
 80a06e6:	f004 fb1b 	bl	80a4d20 <_Z16_fetch_usbserialv>
 80a06ea:	4939      	ldr	r1, [pc, #228]	; (80a07d0 <_Z11stringParsePci+0x360>)
 80a06ec:	e767      	b.n	80a05be <_Z11stringParsePci+0x14e>
          if(buflen>4)
 80a06ee:	2e04      	cmp	r6, #4
 80a06f0:	dd4b      	ble.n	80a078a <_Z11stringParsePci+0x31a>
              if(bytesArrToFloatArr(&buf[i+2], 12, Power[Charger-1],3))
 80a06f2:	210c      	movs	r1, #12
 80a06f4:	f107 3bff 	add.w	fp, r7, #4294967295
 80a06f8:	fb01 fb0b 	mul.w	fp, r1, fp
 80a06fc:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 80a07dc <_Z11stringParsePci+0x36c>
 80a0700:	2303      	movs	r3, #3
 80a0702:	eb0a 090b 	add.w	r9, sl, fp
 80a0706:	464a      	mov	r2, r9
 80a0708:	1ca8      	adds	r0, r5, #2
 80a070a:	f7ff fe8f 	bl	80a042c <_Z18bytesArrToFloatArrPcjPfj>
              DEBUGPORT.print("Power: "+String(Power[Charger-1][0],4)+" "+String(Power[Charger-1][1],4)+" "+String(Power[Charger-1][2],4));              
 80a070e:	f004 fb07 	bl	80a4d20 <_Z16_fetch_usbserialv>
 80a0712:	4930      	ldr	r1, [pc, #192]	; (80a07d4 <_Z11stringParsePci+0x364>)
 80a0714:	4605      	mov	r5, r0
 80a0716:	a810      	add	r0, sp, #64	; 0x40
 80a0718:	f003 fd52 	bl	80a41c0 <_ZN6StringC1EPKc>
 80a071c:	2204      	movs	r2, #4
 80a071e:	f85a 100b 	ldr.w	r1, [sl, fp]
 80a0722:	a80c      	add	r0, sp, #48	; 0x30
 80a0724:	f003 fde7 	bl	80a42f6 <_ZN6StringC1Efi>
 80a0728:	a90c      	add	r1, sp, #48	; 0x30
 80a072a:	a810      	add	r0, sp, #64	; 0x40
 80a072c:	f003 fe33 	bl	80a4396 <_ZplRK15StringSumHelperRK6String>
 80a0730:	491e      	ldr	r1, [pc, #120]	; (80a07ac <_Z11stringParsePci+0x33c>)
 80a0732:	f003 fe3c 	bl	80a43ae <_ZplRK15StringSumHelperPKc>
 80a0736:	4682      	mov	sl, r0
 80a0738:	2204      	movs	r2, #4
 80a073a:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80a073e:	a814      	add	r0, sp, #80	; 0x50
 80a0740:	f003 fdd9 	bl	80a42f6 <_ZN6StringC1Efi>
 80a0744:	4650      	mov	r0, sl
 80a0746:	a914      	add	r1, sp, #80	; 0x50
 80a0748:	f003 fe25 	bl	80a4396 <_ZplRK15StringSumHelperRK6String>
 80a074c:	4917      	ldr	r1, [pc, #92]	; (80a07ac <_Z11stringParsePci+0x33c>)
 80a074e:	f003 fe2e 	bl	80a43ae <_ZplRK15StringSumHelperPKc>
 80a0752:	4682      	mov	sl, r0
 80a0754:	2204      	movs	r2, #4
 80a0756:	f8d9 1008 	ldr.w	r1, [r9, #8]
 80a075a:	a818      	add	r0, sp, #96	; 0x60
 80a075c:	f003 fdcb 	bl	80a42f6 <_ZN6StringC1Efi>
 80a0760:	a918      	add	r1, sp, #96	; 0x60
 80a0762:	4650      	mov	r0, sl
 80a0764:	f003 fe17 	bl	80a4396 <_ZplRK15StringSumHelperRK6String>
 80a0768:	6801      	ldr	r1, [r0, #0]
 80a076a:	4628      	mov	r0, r5
              DEBUGPORT.print("Voltage: "+String(LineVoltage[Charger-1][0],4)+" "+String(LineVoltage[Charger-1][1],4)+" "+String(LineVoltage[Charger-1][2],4));
 80a076c:	f003 fe9a 	bl	80a44a4 <_ZN5Print5printEPKc>
 80a0770:	a818      	add	r0, sp, #96	; 0x60
 80a0772:	f003 fcdb 	bl	80a412c <_ZN6StringD1Ev>
 80a0776:	a814      	add	r0, sp, #80	; 0x50
 80a0778:	f003 fcd8 	bl	80a412c <_ZN6StringD1Ev>
 80a077c:	a80c      	add	r0, sp, #48	; 0x30
 80a077e:	f003 fcd5 	bl	80a412c <_ZN6StringD1Ev>
class StringSumHelper : public String
 80a0782:	a810      	add	r0, sp, #64	; 0x40
 80a0784:	f003 fcd2 	bl	80a412c <_ZN6StringD1Ev>
 80a0788:	e782      	b.n	80a0690 <_Z11stringParsePci+0x220>
              DEBUGPORT.print("did not receive enough power data");
 80a078a:	f004 fac9 	bl	80a4d20 <_Z16_fetch_usbserialv>
 80a078e:	4912      	ldr	r1, [pc, #72]	; (80a07d8 <_Z11stringParsePci+0x368>)
 80a0790:	e715      	b.n	80a05be <_Z11stringParsePci+0x14e>
 80a0792:	bf00      	nop
 80a0794:	080a89a0 	.word	0x080a89a0
 80a0798:	080a8128 	.word	0x080a8128
 80a079c:	080a812a 	.word	0x080a812a
 80a07a0:	080a813a 	.word	0x080a813a
 80a07a4:	200002ec 	.word	0x200002ec
 80a07a8:	080a8133 	.word	0x080a8133
 80a07ac:	080a813b 	.word	0x080a813b
 80a07b0:	080a813d 	.word	0x080a813d
 80a07b4:	20000254 	.word	0x20000254
 80a07b8:	080a8161 	.word	0x080a8161
 80a07bc:	20000540 	.word	0x20000540
 80a07c0:	200002b8 	.word	0x200002b8
 80a07c4:	080a816b 	.word	0x080a816b
 80a07c8:	200002c4 	.word	0x200002c4
 80a07cc:	080a818f 	.word	0x080a818f
 80a07d0:	080a819b 	.word	0x080a819b
 80a07d4:	080a81c1 	.word	0x080a81c1
 80a07d8:	080a81c9 	.word	0x080a81c9
 80a07dc:	20000308 	.word	0x20000308
          if(buflen>4)
 80a07e0:	2e04      	cmp	r6, #4
 80a07e2:	dd1c      	ble.n	80a081e <_Z11stringParsePci+0x3ae>
              Energy[Charger-1] = bytesToFloat(buf[i+2], buf[i+3], buf[i+4], buf[i+5]);
 80a07e4:	78e2      	ldrb	r2, [r4, #3]
 80a07e6:	78a1      	ldrb	r1, [r4, #2]
 80a07e8:	7923      	ldrb	r3, [r4, #4]
    *((unsigned char *)(&output) + 3) = b0;
 80a07ea:	7860      	ldrb	r0, [r4, #1]
    *((unsigned char *)(&output) + 1) = b2;
 80a07ec:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
    *((unsigned char *)(&output) + 2) = b1;
 80a07f0:	f88d 1062 	strb.w	r1, [sp, #98]	; 0x62
    *((unsigned char *)(&output) + 3) = b0;
 80a07f4:	f88d 0063 	strb.w	r0, [sp, #99]	; 0x63
    *((unsigned char *)(&output) + 0) = b3;
 80a07f8:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
              Energy[Charger-1] = bytesToFloat(buf[i+2], buf[i+3], buf[i+4], buf[i+5]);
 80a07fc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80a07fe:	4d14      	ldr	r5, [pc, #80]	; (80a0850 <_Z11stringParsePci+0x3e0>)
 80a0800:	f107 39ff 	add.w	r9, r7, #4294967295
 80a0804:	f845 3029 	str.w	r3, [r5, r9, lsl #2]
              DEBUGPORT.print("Energy: ");
 80a0808:	f004 fa8a 	bl	80a4d20 <_Z16_fetch_usbserialv>
 80a080c:	4911      	ldr	r1, [pc, #68]	; (80a0854 <_Z11stringParsePci+0x3e4>)
 80a080e:	f003 fe49 	bl	80a44a4 <_ZN5Print5printEPKc>
              DEBUGPORT.print(Energy[Charger-1],4);
 80a0812:	f004 fa85 	bl	80a4d20 <_Z16_fetch_usbserialv>
 80a0816:	2204      	movs	r2, #4
 80a0818:	f855 1029 	ldr.w	r1, [r5, r9, lsl #2]
 80a081c:	e760      	b.n	80a06e0 <_Z11stringParsePci+0x270>
              DEBUGPORT.print("did not receive enough energy data");
 80a081e:	f004 fa7f 	bl	80a4d20 <_Z16_fetch_usbserialv>
 80a0822:	490d      	ldr	r1, [pc, #52]	; (80a0858 <_Z11stringParsePci+0x3e8>)
 80a0824:	e6cb      	b.n	80a05be <_Z11stringParsePci+0x14e>
          if(buflen>4)
 80a0826:	2e04      	cmp	r6, #4
 80a0828:	f77f aec6 	ble.w	80a05b8 <_Z11stringParsePci+0x148>
              if(bytesArrToFloatArr(&buf[i+2], 12, VoltageArr,3))
 80a082c:	1ca8      	adds	r0, r5, #2
 80a082e:	2303      	movs	r3, #3
 80a0830:	210c      	movs	r1, #12
 80a0832:	aa01      	add	r2, sp, #4
 80a0834:	f7ff fdfa 	bl	80a042c <_Z18bytesArrToFloatArrPcjPfj>
 80a0838:	4d08      	ldr	r5, [pc, #32]	; (80a085c <_Z11stringParsePci+0x3ec>)
 80a083a:	f107 39ff 	add.w	r9, r7, #4294967295
 80a083e:	e67c      	b.n	80a053a <_Z11stringParsePci+0xca>
  String cmdValue;
 80a0840:	a804      	add	r0, sp, #16
 80a0842:	f003 fc73 	bl	80a412c <_ZN6StringD1Ev>
  }
  //Test only
  //Current[0][0] = 3.0;
  //Current[1][0] = 4.0;
  return Charger;
}
 80a0846:	4638      	mov	r0, r7
 80a0848:	b01d      	add	sp, #116	; 0x74
 80a084a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a084e:	bf00      	nop
 80a0850:	200002bc 	.word	0x200002bc
 80a0854:	080a81eb 	.word	0x080a81eb
 80a0858:	080a81f4 	.word	0x080a81f4
 80a085c:	200002d4 	.word	0x200002d4

080a0860 <_Z16readSerialOlimexv>:


int readSerialOlimex() {
 80a0860:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a0864:	2500      	movs	r5, #0
 80a0866:	270a      	movs	r7, #10
  for(int k=0;k<10;k++){
  if (Serial1.available()) {
    input = Serial1.read();
    //DEBUGPORT.print(input,HEX);
    //DEBUGPORT.print(" ");
    if (bufpos<BUFSIZE)
 80a0868:	4c1a      	ldr	r4, [pc, #104]	; (80a08d4 <_Z16readSerialOlimexv+0x74>)
    {
        bufpos=0;
        DEBUGPORT.print("loopread>\tSerial Read Error!");
    }
    if (input == '\n') { // we hebben een regel binnen, tot aan \n   //  0x0A
      Charger = stringParse(buff, bufpos);
 80a086a:	f8df 806c 	ldr.w	r8, [pc, #108]	; 80a08d8 <_Z16readSerialOlimexv+0x78>
  if (Serial1.available()) {
 80a086e:	f004 fb09 	bl	80a4e84 <_Z22__fetch_global_Serial1v>
 80a0872:	6803      	ldr	r3, [r0, #0]
 80a0874:	691b      	ldr	r3, [r3, #16]
 80a0876:	4798      	blx	r3
 80a0878:	b1f0      	cbz	r0, 80a08b8 <_Z16readSerialOlimexv+0x58>
    input = Serial1.read();
 80a087a:	f004 fb03 	bl	80a4e84 <_Z22__fetch_global_Serial1v>
 80a087e:	6803      	ldr	r3, [r0, #0]
 80a0880:	695b      	ldr	r3, [r3, #20]
 80a0882:	4798      	blx	r3
    if (bufpos<BUFSIZE)
 80a0884:	6823      	ldr	r3, [r4, #0]
    input = Serial1.read();
 80a0886:	b2c6      	uxtb	r6, r0
    if (bufpos<BUFSIZE)
 80a0888:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 80a088c:	da19      	bge.n	80a08c2 <_Z16readSerialOlimexv+0x62>
        buff[bufpos] = input;
 80a088e:	f808 6003 	strb.w	r6, [r8, r3]
        bufpos++;    
 80a0892:	3301      	adds	r3, #1
 80a0894:	6023      	str	r3, [r4, #0]
    if (input == '\n') { // we hebben een regel binnen, tot aan \n   //  0x0A
 80a0896:	2e0a      	cmp	r6, #10
 80a0898:	d10e      	bne.n	80a08b8 <_Z16readSerialOlimexv+0x58>
      Charger = stringParse(buff, bufpos);
 80a089a:	6821      	ldr	r1, [r4, #0]
 80a089c:	4640      	mov	r0, r8
 80a089e:	f7ff fde7 	bl	80a0470 <_Z11stringParsePci>
      //Maak de buffer leeg
      for (int i=0; i<BUFSIZE; i++)
 80a08a2:	2300      	movs	r3, #0
      Charger = stringParse(buff, bufpos);
 80a08a4:	4605      	mov	r5, r0
      { buff[i] = 0;}
 80a08a6:	461a      	mov	r2, r3
 80a08a8:	490b      	ldr	r1, [pc, #44]	; (80a08d8 <_Z16readSerialOlimexv+0x78>)
      for (int i=0; i<BUFSIZE; i++)
 80a08aa:	3301      	adds	r3, #1
 80a08ac:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
      { buff[i] = 0;}
 80a08b0:	f801 2b01 	strb.w	r2, [r1], #1
      for (int i=0; i<BUFSIZE; i++)
 80a08b4:	d1f9      	bne.n	80a08aa <_Z16readSerialOlimexv+0x4a>
      bufpos = 0;
 80a08b6:	6022      	str	r2, [r4, #0]
  for(int k=0;k<10;k++){
 80a08b8:	3f01      	subs	r7, #1
 80a08ba:	d1d8      	bne.n	80a086e <_Z16readSerialOlimexv+0xe>
    }
  }
}
return Charger;
 80a08bc:	4628      	mov	r0, r5
 80a08be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        bufpos=0;
 80a08c2:	2300      	movs	r3, #0
 80a08c4:	6023      	str	r3, [r4, #0]
        DEBUGPORT.print("loopread>\tSerial Read Error!");
 80a08c6:	f004 fa2b 	bl	80a4d20 <_Z16_fetch_usbserialv>
 80a08ca:	4904      	ldr	r1, [pc, #16]	; (80a08dc <_Z16readSerialOlimexv+0x7c>)
 80a08cc:	f003 fdea 	bl	80a44a4 <_ZN5Print5printEPKc>
 80a08d0:	e7e1      	b.n	80a0896 <_Z16readSerialOlimexv+0x36>
 80a08d2:	bf00      	nop
 80a08d4:	200004b4 	.word	0x200004b4
 80a08d8:	20000354 	.word	0x20000354
 80a08dc:	080a8217 	.word	0x080a8217

080a08e0 <_ZN10JsonWriter11startObjectEv>:
	bool startObject() { return startObjectOrArray('{', '}'); };
 80a08e0:	227d      	movs	r2, #125	; 0x7d
 80a08e2:	217b      	movs	r1, #123	; 0x7b
 80a08e4:	f002 bb67 	b.w	80a2fb6 <_ZN10JsonWriter18startObjectOrArrayEcc>

080a08e8 <_Z13activeChargerv>:
int activeCharger() {
 80a08e8:	b538      	push	{r3, r4, r5, lr}
        if (Current[0][i] != 0.0) {
 80a08ea:	4d13      	ldr	r5, [pc, #76]	; (80a0938 <_Z13activeChargerv+0x50>)
 80a08ec:	2100      	movs	r1, #0
 80a08ee:	6828      	ldr	r0, [r5, #0]
 80a08f0:	f005 fe16 	bl	80a6520 <__aeabi_fcmpeq>
 80a08f4:	b1e8      	cbz	r0, 80a0932 <_Z13activeChargerv+0x4a>
 80a08f6:	2100      	movs	r1, #0
 80a08f8:	6868      	ldr	r0, [r5, #4]
 80a08fa:	f005 fe11 	bl	80a6520 <__aeabi_fcmpeq>
 80a08fe:	b1c0      	cbz	r0, 80a0932 <_Z13activeChargerv+0x4a>
 80a0900:	2100      	movs	r1, #0
 80a0902:	68a8      	ldr	r0, [r5, #8]
 80a0904:	f005 fe0c 	bl	80a6520 <__aeabi_fcmpeq>
 80a0908:	fab0 f480 	clz	r4, r0
 80a090c:	0964      	lsrs	r4, r4, #5
        if (Current[1][i] != 0.0) {
 80a090e:	2100      	movs	r1, #0
 80a0910:	68e8      	ldr	r0, [r5, #12]
 80a0912:	f005 fe05 	bl	80a6520 <__aeabi_fcmpeq>
 80a0916:	b148      	cbz	r0, 80a092c <_Z13activeChargerv+0x44>
 80a0918:	2100      	movs	r1, #0
 80a091a:	6928      	ldr	r0, [r5, #16]
 80a091c:	f005 fe00 	bl	80a6520 <__aeabi_fcmpeq>
 80a0920:	b120      	cbz	r0, 80a092c <_Z13activeChargerv+0x44>
 80a0922:	2100      	movs	r1, #0
 80a0924:	6968      	ldr	r0, [r5, #20]
 80a0926:	f005 fdfb 	bl	80a6520 <__aeabi_fcmpeq>
 80a092a:	b900      	cbnz	r0, 80a092e <_Z13activeChargerv+0x46>
            number += 2;
 80a092c:	3402      	adds	r4, #2
}
 80a092e:	4620      	mov	r0, r4
 80a0930:	bd38      	pop	{r3, r4, r5, pc}
            number += 1;
 80a0932:	2401      	movs	r4, #1
 80a0934:	e7eb      	b.n	80a090e <_Z13activeChargerv+0x26>
 80a0936:	bf00      	nop
 80a0938:	20000254 	.word	0x20000254

080a093c <_Z17maxCurrentC1_testj>:
    byte olimexMessage[4] = {0xFE, 1, setPoint, 0xFF};
 80a093c:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
int maxCurrentC1_test(unsigned int setPoint) {
 80a0940:	b570      	push	{r4, r5, r6, lr}
 80a0942:	b08e      	sub	sp, #56	; 0x38
    byte olimexMessage[4] = {0xFE, 1, setPoint, 0xFF};
 80a0944:	f8ad 3004 	strh.w	r3, [sp, #4]
 80a0948:	23ff      	movs	r3, #255	; 0xff
 80a094a:	2806      	cmp	r0, #6
 80a094c:	bf38      	it	cc
 80a094e:	2006      	movcc	r0, #6
 80a0950:	f88d 3007 	strb.w	r3, [sp, #7]
    if (TESTCASE) {
 80a0954:	4b2c      	ldr	r3, [pc, #176]	; (80a0a08 <_Z17maxCurrentC1_testj+0xcc>)
 80a0956:	4604      	mov	r4, r0
 80a0958:	781b      	ldrb	r3, [r3, #0]
    byte olimexMessage[4] = {0xFE, 1, setPoint, 0xFF};
 80a095a:	f88d 0006 	strb.w	r0, [sp, #6]
    if (TESTCASE) {
 80a095e:	2b00      	cmp	r3, #0
 80a0960:	d050      	beq.n	80a0a04 <_Z17maxCurrentC1_testj+0xc8>
        Serial1.write(olimexMessage,4);
 80a0962:	f004 fa8f 	bl	80a4e84 <_Z22__fetch_global_Serial1v>
 80a0966:	2204      	movs	r2, #4
 80a0968:	6803      	ldr	r3, [r0, #0]
 80a096a:	eb0d 0102 	add.w	r1, sp, r2
 80a096e:	68db      	ldr	r3, [r3, #12]
 80a0970:	4798      	blx	r3
        DEBUGPORT.println("maxCurrentC"+String(CHARGEROFFSET+1)+">\tNew setpoint set at "+String(setPoint)+" Amps.");
 80a0972:	f004 f9d5 	bl	80a4d20 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
 80a0976:	4925      	ldr	r1, [pc, #148]	; (80a0a0c <_Z17maxCurrentC1_testj+0xd0>)
 80a0978:	4605      	mov	r5, r0
 80a097a:	a806      	add	r0, sp, #24
 80a097c:	f003 fc20 	bl	80a41c0 <_ZN6StringC1EPKc>
 80a0980:	220a      	movs	r2, #10
 80a0982:	2101      	movs	r1, #1
 80a0984:	a802      	add	r0, sp, #8
 80a0986:	f003 fc90 	bl	80a42aa <_ZN6StringC1Eih>
 80a098a:	a902      	add	r1, sp, #8
 80a098c:	a806      	add	r0, sp, #24
 80a098e:	f003 fd02 	bl	80a4396 <_ZplRK15StringSumHelperRK6String>
 80a0992:	491f      	ldr	r1, [pc, #124]	; (80a0a10 <_Z17maxCurrentC1_testj+0xd4>)
 80a0994:	f003 fd0b 	bl	80a43ae <_ZplRK15StringSumHelperPKc>
 80a0998:	4606      	mov	r6, r0
 80a099a:	220a      	movs	r2, #10
 80a099c:	4621      	mov	r1, r4
 80a099e:	a80a      	add	r0, sp, #40	; 0x28
 80a09a0:	f003 fc96 	bl	80a42d0 <_ZN6StringC1Ejh>
 80a09a4:	a90a      	add	r1, sp, #40	; 0x28
 80a09a6:	4630      	mov	r0, r6
 80a09a8:	f003 fcf5 	bl	80a4396 <_ZplRK15StringSumHelperRK6String>
 80a09ac:	4919      	ldr	r1, [pc, #100]	; (80a0a14 <_Z17maxCurrentC1_testj+0xd8>)
 80a09ae:	f003 fcfe 	bl	80a43ae <_ZplRK15StringSumHelperPKc>
 80a09b2:	6801      	ldr	r1, [r0, #0]
 80a09b4:	4628      	mov	r0, r5
 80a09b6:	f003 fd88 	bl	80a44ca <_ZN5Print7printlnEPKc>
 80a09ba:	a80a      	add	r0, sp, #40	; 0x28
 80a09bc:	f003 fbb6 	bl	80a412c <_ZN6StringD1Ev>
 80a09c0:	a802      	add	r0, sp, #8
 80a09c2:	f003 fbb3 	bl	80a412c <_ZN6StringD1Ev>
class StringSumHelper : public String
 80a09c6:	a806      	add	r0, sp, #24
 80a09c8:	f003 fbb0 	bl	80a412c <_ZN6StringD1Ev>
        String topic_str = "HANevse/photonMaxC";
 80a09cc:	4912      	ldr	r1, [pc, #72]	; (80a0a18 <_Z17maxCurrentC1_testj+0xdc>)
 80a09ce:	a806      	add	r0, sp, #24
 80a09d0:	f003 fbf6 	bl	80a41c0 <_ZN6StringC1EPKc>
        topic_str.concat(CHARGEROFFSET+1);
 80a09d4:	2101      	movs	r1, #1
 80a09d6:	a806      	add	r0, sp, #24
 80a09d8:	f003 fccc 	bl	80a4374 <_ZN6String6concatEi>
        operator const char*() const { return c_str(); }
 80a09dc:	9d06      	ldr	r5, [sp, #24]
        client.publish(topic_str, String(setPoint)); 
 80a09de:	220a      	movs	r2, #10
 80a09e0:	4621      	mov	r1, r4
 80a09e2:	a80a      	add	r0, sp, #40	; 0x28
 80a09e4:	f003 fc74 	bl	80a42d0 <_ZN6StringC1Ejh>
 80a09e8:	4629      	mov	r1, r5
 80a09ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80a09ec:	480b      	ldr	r0, [pc, #44]	; (80a0a1c <_Z17maxCurrentC1_testj+0xe0>)
 80a09ee:	f001 fe3a 	bl	80a2666 <_ZN4MQTT7publishEPKcS1_>
 80a09f2:	a80a      	add	r0, sp, #40	; 0x28
 80a09f4:	f003 fb9a 	bl	80a412c <_ZN6StringD1Ev>
        String topic_str = "HANevse/photonMaxC";
 80a09f8:	a806      	add	r0, sp, #24
 80a09fa:	f003 fb97 	bl	80a412c <_ZN6StringD1Ev>
        return 0;
 80a09fe:	2000      	movs	r0, #0
}
 80a0a00:	b00e      	add	sp, #56	; 0x38
 80a0a02:	bd70      	pop	{r4, r5, r6, pc}
    return 1;
 80a0a04:	2001      	movs	r0, #1
 80a0a06:	e7fb      	b.n	80a0a00 <_Z17maxCurrentC1_testj+0xc4>
 80a0a08:	20000330 	.word	0x20000330
 80a0a0c:	080a80cc 	.word	0x080a80cc
 80a0a10:	080a80d8 	.word	0x080a80d8
 80a0a14:	080a80ef 	.word	0x080a80ef
 80a0a18:	080a8234 	.word	0x080a8234
 80a0a1c:	200004b8 	.word	0x200004b8

080a0a20 <_Z17maxCurrentC2_testj>:
    byte olimexMessage[4] = {0xFE,2,setPoint,0xFF};
 80a0a20:	f240 23fe 	movw	r3, #766	; 0x2fe
int maxCurrentC2_test(unsigned int setPoint) {
 80a0a24:	b570      	push	{r4, r5, r6, lr}
 80a0a26:	b08e      	sub	sp, #56	; 0x38
    byte olimexMessage[4] = {0xFE,2,setPoint,0xFF};
 80a0a28:	f8ad 3004 	strh.w	r3, [sp, #4]
 80a0a2c:	23ff      	movs	r3, #255	; 0xff
 80a0a2e:	2806      	cmp	r0, #6
 80a0a30:	bf38      	it	cc
 80a0a32:	2006      	movcc	r0, #6
 80a0a34:	f88d 3007 	strb.w	r3, [sp, #7]
    if (TESTCASE) {
 80a0a38:	4b2c      	ldr	r3, [pc, #176]	; (80a0aec <_Z17maxCurrentC2_testj+0xcc>)
 80a0a3a:	4604      	mov	r4, r0
 80a0a3c:	781b      	ldrb	r3, [r3, #0]
    byte olimexMessage[4] = {0xFE,2,setPoint,0xFF};
 80a0a3e:	f88d 0006 	strb.w	r0, [sp, #6]
    if (TESTCASE) {
 80a0a42:	2b00      	cmp	r3, #0
 80a0a44:	d050      	beq.n	80a0ae8 <_Z17maxCurrentC2_testj+0xc8>
        Serial1.write(olimexMessage,4);
 80a0a46:	f004 fa1d 	bl	80a4e84 <_Z22__fetch_global_Serial1v>
 80a0a4a:	2204      	movs	r2, #4
 80a0a4c:	6803      	ldr	r3, [r0, #0]
 80a0a4e:	eb0d 0102 	add.w	r1, sp, r2
 80a0a52:	68db      	ldr	r3, [r3, #12]
 80a0a54:	4798      	blx	r3
        DEBUGPORT.println("maxCurrentC"+String(CHARGEROFFSET+2)+">\tNew setpoint set at "+String(setPoint)+" Amps.");
 80a0a56:	f004 f963 	bl	80a4d20 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
 80a0a5a:	4925      	ldr	r1, [pc, #148]	; (80a0af0 <_Z17maxCurrentC2_testj+0xd0>)
 80a0a5c:	4605      	mov	r5, r0
 80a0a5e:	a806      	add	r0, sp, #24
 80a0a60:	f003 fbae 	bl	80a41c0 <_ZN6StringC1EPKc>
 80a0a64:	220a      	movs	r2, #10
 80a0a66:	2102      	movs	r1, #2
 80a0a68:	a802      	add	r0, sp, #8
 80a0a6a:	f003 fc1e 	bl	80a42aa <_ZN6StringC1Eih>
 80a0a6e:	a902      	add	r1, sp, #8
 80a0a70:	a806      	add	r0, sp, #24
 80a0a72:	f003 fc90 	bl	80a4396 <_ZplRK15StringSumHelperRK6String>
 80a0a76:	491f      	ldr	r1, [pc, #124]	; (80a0af4 <_Z17maxCurrentC2_testj+0xd4>)
 80a0a78:	f003 fc99 	bl	80a43ae <_ZplRK15StringSumHelperPKc>
 80a0a7c:	4606      	mov	r6, r0
 80a0a7e:	220a      	movs	r2, #10
 80a0a80:	4621      	mov	r1, r4
 80a0a82:	a80a      	add	r0, sp, #40	; 0x28
 80a0a84:	f003 fc24 	bl	80a42d0 <_ZN6StringC1Ejh>
 80a0a88:	a90a      	add	r1, sp, #40	; 0x28
 80a0a8a:	4630      	mov	r0, r6
 80a0a8c:	f003 fc83 	bl	80a4396 <_ZplRK15StringSumHelperRK6String>
 80a0a90:	4919      	ldr	r1, [pc, #100]	; (80a0af8 <_Z17maxCurrentC2_testj+0xd8>)
 80a0a92:	f003 fc8c 	bl	80a43ae <_ZplRK15StringSumHelperPKc>
 80a0a96:	6801      	ldr	r1, [r0, #0]
 80a0a98:	4628      	mov	r0, r5
 80a0a9a:	f003 fd16 	bl	80a44ca <_ZN5Print7printlnEPKc>
 80a0a9e:	a80a      	add	r0, sp, #40	; 0x28
 80a0aa0:	f003 fb44 	bl	80a412c <_ZN6StringD1Ev>
 80a0aa4:	a802      	add	r0, sp, #8
 80a0aa6:	f003 fb41 	bl	80a412c <_ZN6StringD1Ev>
class StringSumHelper : public String
 80a0aaa:	a806      	add	r0, sp, #24
 80a0aac:	f003 fb3e 	bl	80a412c <_ZN6StringD1Ev>
        String topic_str = "HANevse/photonMaxC";
 80a0ab0:	4912      	ldr	r1, [pc, #72]	; (80a0afc <_Z17maxCurrentC2_testj+0xdc>)
 80a0ab2:	a806      	add	r0, sp, #24
 80a0ab4:	f003 fb84 	bl	80a41c0 <_ZN6StringC1EPKc>
        topic_str.concat(CHARGEROFFSET+2);
 80a0ab8:	2102      	movs	r1, #2
 80a0aba:	a806      	add	r0, sp, #24
 80a0abc:	f003 fc5a 	bl	80a4374 <_ZN6String6concatEi>
        operator const char*() const { return c_str(); }
 80a0ac0:	9d06      	ldr	r5, [sp, #24]
        client.publish(topic_str, String(setPoint)); 
 80a0ac2:	220a      	movs	r2, #10
 80a0ac4:	4621      	mov	r1, r4
 80a0ac6:	a80a      	add	r0, sp, #40	; 0x28
 80a0ac8:	f003 fc02 	bl	80a42d0 <_ZN6StringC1Ejh>
 80a0acc:	4629      	mov	r1, r5
 80a0ace:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80a0ad0:	480b      	ldr	r0, [pc, #44]	; (80a0b00 <_Z17maxCurrentC2_testj+0xe0>)
 80a0ad2:	f001 fdc8 	bl	80a2666 <_ZN4MQTT7publishEPKcS1_>
 80a0ad6:	a80a      	add	r0, sp, #40	; 0x28
 80a0ad8:	f003 fb28 	bl	80a412c <_ZN6StringD1Ev>
        String topic_str = "HANevse/photonMaxC";
 80a0adc:	a806      	add	r0, sp, #24
 80a0ade:	f003 fb25 	bl	80a412c <_ZN6StringD1Ev>
        return 0;
 80a0ae2:	2000      	movs	r0, #0
}
 80a0ae4:	b00e      	add	sp, #56	; 0x38
 80a0ae6:	bd70      	pop	{r4, r5, r6, pc}
    return 1;
 80a0ae8:	2001      	movs	r0, #1
 80a0aea:	e7fb      	b.n	80a0ae4 <_Z17maxCurrentC2_testj+0xc4>
 80a0aec:	20000330 	.word	0x20000330
 80a0af0:	080a80cc 	.word	0x080a80cc
 80a0af4:	080a80d8 	.word	0x080a80d8
 80a0af8:	080a80ef 	.word	0x080a80ef
 80a0afc:	080a8234 	.word	0x080a8234
 80a0b00:	200004b8 	.word	0x200004b8

080a0b04 <_Z17getUserIdAtSocketi>:
    if (socket == 1+CHARGEROFFSET)
 80a0b04:	2901      	cmp	r1, #1
String getUserIdAtSocket(int socket) {
 80a0b06:	b510      	push	{r4, lr}
 80a0b08:	4604      	mov	r4, r0
    if (socket == 1+CHARGEROFFSET)
 80a0b0a:	d104      	bne.n	80a0b16 <_Z17getUserIdAtSocketi+0x12>
        return UIDtagCharger1;
 80a0b0c:	4906      	ldr	r1, [pc, #24]	; (80a0b28 <_Z17getUserIdAtSocketi+0x24>)
        return UIDtagCharger2;
 80a0b0e:	f003 fb96 	bl	80a423e <_ZN6StringC1ERKS_>
}
 80a0b12:	4620      	mov	r0, r4
 80a0b14:	bd10      	pop	{r4, pc}
    if (socket == 2+CHARGEROFFSET)
 80a0b16:	2902      	cmp	r1, #2
 80a0b18:	d101      	bne.n	80a0b1e <_Z17getUserIdAtSocketi+0x1a>
        return UIDtagCharger2;
 80a0b1a:	4904      	ldr	r1, [pc, #16]	; (80a0b2c <_Z17getUserIdAtSocketi+0x28>)
 80a0b1c:	e7f7      	b.n	80a0b0e <_Z17getUserIdAtSocketi+0xa>
    return "00";
 80a0b1e:	4904      	ldr	r1, [pc, #16]	; (80a0b30 <_Z17getUserIdAtSocketi+0x2c>)
 80a0b20:	f003 fb4e 	bl	80a41c0 <_ZN6StringC1EPKc>
 80a0b24:	e7f5      	b.n	80a0b12 <_Z17getUserIdAtSocketi+0xe>
 80a0b26:	bf00      	nop
 80a0b28:	20000334 	.word	0x20000334
 80a0b2c:	20000344 	.word	0x20000344
 80a0b30:	080a8247 	.word	0x080a8247

080a0b34 <_Z18allowUser_callbackPhj>:
void allowUser_callback(byte* payload, unsigned int length) {
 80a0b34:	b5f0      	push	{r4, r5, r6, r7, lr}
    char payl[length+1];
 80a0b36:	f101 0308 	add.w	r3, r1, #8
void allowUser_callback(byte* payload, unsigned int length) {
 80a0b3a:	b087      	sub	sp, #28
    char payl[length+1];
 80a0b3c:	f023 0307 	bic.w	r3, r3, #7
    }
 80a0b40:	466d      	mov	r5, sp
void allowUser_callback(byte* payload, unsigned int length) {
 80a0b42:	af00      	add	r7, sp, #0
    char payl[length+1];
 80a0b44:	ebad 0d03 	sub.w	sp, sp, r3
void allowUser_callback(byte* payload, unsigned int length) {
 80a0b48:	460c      	mov	r4, r1
    memcpy(payl, payload, length);
 80a0b4a:	460a      	mov	r2, r1
 80a0b4c:	4601      	mov	r1, r0
 80a0b4e:	4668      	mov	r0, sp
 80a0b50:	f006 f814 	bl	80a6b7c <memcpy>
    payl[length] = NULL;
 80a0b54:	2300      	movs	r3, #0
    int port = (int) strtol(payl, &endchar, 10);
 80a0b56:	220a      	movs	r2, #10
    payl[length] = NULL;
 80a0b58:	f80d 3004 	strb.w	r3, [sp, r4]
    int port = (int) strtol(payl, &endchar, 10);
 80a0b5c:	1d39      	adds	r1, r7, #4
 80a0b5e:	4668      	mov	r0, sp
 80a0b60:	f006 fe62 	bl	80a7828 <strtol>
 80a0b64:	4604      	mov	r4, r0
    String topic_str = "HANevse/photonConverted/";
 80a0b66:	492d      	ldr	r1, [pc, #180]	; (80a0c1c <_Z18allowUser_callbackPhj+0xe8>)
 80a0b68:	f107 0008 	add.w	r0, r7, #8
 80a0b6c:	f003 fb28 	bl	80a41c0 <_ZN6StringC1EPKc>
    topic_str.concat(port);
 80a0b70:	4621      	mov	r1, r4
 80a0b72:	f107 0008 	add.w	r0, r7, #8
 80a0b76:	f003 fbfd 	bl	80a4374 <_ZN6String6concatEi>
    endchar = endchar + 1;
 80a0b7a:	6878      	ldr	r0, [r7, #4]
    if (port == (1 + CHARGEROFFSET))
 80a0b7c:	2c01      	cmp	r4, #1
    endchar = endchar + 1;
 80a0b7e:	f100 0001 	add.w	r0, r0, #1
 80a0b82:	6078      	str	r0, [r7, #4]
    if (port == (1 + CHARGEROFFSET))
 80a0b84:	d009      	beq.n	80a0b9a <_Z18allowUser_callbackPhj+0x66>
    else if (port == (2 + CHARGEROFFSET))
 80a0b86:	2c02      	cmp	r4, #2
 80a0b88:	d018      	beq.n	80a0bbc <_Z18allowUser_callbackPhj+0x88>
    String topic_str = "HANevse/photonConverted/";
 80a0b8a:	f107 0008 	add.w	r0, r7, #8
 80a0b8e:	f003 facd 	bl	80a412c <_ZN6StringD1Ev>
 80a0b92:	46ad      	mov	sp, r5
}
 80a0b94:	371c      	adds	r7, #28
 80a0b96:	46bd      	mov	sp, r7
 80a0b98:	bdf0      	pop	{r4, r5, r6, r7, pc}
        port = AUTHENTICATION_CAR1;
 80a0b9a:	2605      	movs	r6, #5
    int retPi = (int) strtol(endchar, &endchar, 10);
 80a0b9c:	220a      	movs	r2, #10
 80a0b9e:	1d39      	adds	r1, r7, #4
 80a0ba0:	f006 fe42 	bl	80a7828 <strtol>
    Pianswer = retPi; 
 80a0ba4:	4b1e      	ldr	r3, [pc, #120]	; (80a0c20 <_Z18allowUser_callbackPhj+0xec>)
    int socketNr = port - 1 - CHARGEROFFSET;
 80a0ba6:	3c01      	subs	r4, #1
    Pianswer = retPi; 
 80a0ba8:	8018      	strh	r0, [r3, #0]
    switch(retPi) {
 80a0baa:	3801      	subs	r0, #1
 80a0bac:	2807      	cmp	r0, #7
 80a0bae:	d832      	bhi.n	80a0c16 <_Z18allowUser_callbackPhj+0xe2>
 80a0bb0:	e8df f000 	tbb	[pc, r0]
 80a0bb4:	19171506 	.word	0x19171506
 80a0bb8:	2f2d2b29 	.word	0x2f2d2b29
        port = AUTHENTICATION_CAR2;
 80a0bbc:	2606      	movs	r6, #6
 80a0bbe:	e7ed      	b.n	80a0b9c <_Z18allowUser_callbackPhj+0x68>
            digitalWrite(port, HIGH);
 80a0bc0:	2101      	movs	r1, #1
 80a0bc2:	4630      	mov	r0, r6
 80a0bc4:	f004 fbb3 	bl	80a532e <digitalWrite>
            LatestStartTime[socketNr] = Time.now();
 80a0bc8:	f003 fecf 	bl	80a496a <_ZN9TimeClass3nowEv>
 80a0bcc:	4b15      	ldr	r3, [pc, #84]	; (80a0c24 <_Z18allowUser_callbackPhj+0xf0>)
            client.publish(topic_str, "successful start new charge");
 80a0bce:	4a16      	ldr	r2, [pc, #88]	; (80a0c28 <_Z18allowUser_callbackPhj+0xf4>)
            LatestStartTime[socketNr] = Time.now();
 80a0bd0:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
            client.publish(topic_str, "ERROR: unknown scenario");
 80a0bd4:	68b9      	ldr	r1, [r7, #8]
 80a0bd6:	4815      	ldr	r0, [pc, #84]	; (80a0c2c <_Z18allowUser_callbackPhj+0xf8>)
 80a0bd8:	f001 fd45 	bl	80a2666 <_ZN4MQTT7publishEPKcS1_>
 80a0bdc:	e7d5      	b.n	80a0b8a <_Z18allowUser_callbackPhj+0x56>
            client.publish(topic_str, "charger is free, but card was swiped in the last 20 sec");
 80a0bde:	4a14      	ldr	r2, [pc, #80]	; (80a0c30 <_Z18allowUser_callbackPhj+0xfc>)
 80a0be0:	e7f8      	b.n	80a0bd4 <_Z18allowUser_callbackPhj+0xa0>
            client.publish(topic_str, "charger is occupied by another user");
 80a0be2:	4a14      	ldr	r2, [pc, #80]	; (80a0c34 <_Z18allowUser_callbackPhj+0x100>)
 80a0be4:	e7f6      	b.n	80a0bd4 <_Z18allowUser_callbackPhj+0xa0>
            digitalWrite(port, LOW);
 80a0be6:	2100      	movs	r1, #0
 80a0be8:	4630      	mov	r0, r6
 80a0bea:	f004 fba0 	bl	80a532e <digitalWrite>
            if (socketNr == 0)
 80a0bee:	b92c      	cbnz	r4, 80a0bfc <_Z18allowUser_callbackPhj+0xc8>
                UIDtagCharger1="No ID";
 80a0bf0:	4911      	ldr	r1, [pc, #68]	; (80a0c38 <_Z18allowUser_callbackPhj+0x104>)
 80a0bf2:	4812      	ldr	r0, [pc, #72]	; (80a0c3c <_Z18allowUser_callbackPhj+0x108>)
                UIDtagCharger2="No ID";
 80a0bf4:	f003 fb36 	bl	80a4264 <_ZN6StringaSEPKc>
            client.publish(topic_str, "successful stop charge session");
 80a0bf8:	4a11      	ldr	r2, [pc, #68]	; (80a0c40 <_Z18allowUser_callbackPhj+0x10c>)
 80a0bfa:	e7eb      	b.n	80a0bd4 <_Z18allowUser_callbackPhj+0xa0>
            else if (socketNr == 1)
 80a0bfc:	2c01      	cmp	r4, #1
 80a0bfe:	d1fb      	bne.n	80a0bf8 <_Z18allowUser_callbackPhj+0xc4>
                UIDtagCharger2="No ID";
 80a0c00:	490d      	ldr	r1, [pc, #52]	; (80a0c38 <_Z18allowUser_callbackPhj+0x104>)
 80a0c02:	4810      	ldr	r0, [pc, #64]	; (80a0c44 <_Z18allowUser_callbackPhj+0x110>)
 80a0c04:	e7f6      	b.n	80a0bf4 <_Z18allowUser_callbackPhj+0xc0>
            client.publish(topic_str, "consecutive RFID swipe within 20s of new charge start");
 80a0c06:	4a10      	ldr	r2, [pc, #64]	; (80a0c48 <_Z18allowUser_callbackPhj+0x114>)
 80a0c08:	e7e4      	b.n	80a0bd4 <_Z18allowUser_callbackPhj+0xa0>
            client.publish(topic_str, "you are already charging at another charger");
 80a0c0a:	4a10      	ldr	r2, [pc, #64]	; (80a0c4c <_Z18allowUser_callbackPhj+0x118>)
 80a0c0c:	e7e2      	b.n	80a0bd4 <_Z18allowUser_callbackPhj+0xa0>
            client.publish(topic_str, "you are in the userlist, but not verified by admin");
 80a0c0e:	4a10      	ldr	r2, [pc, #64]	; (80a0c50 <_Z18allowUser_callbackPhj+0x11c>)
 80a0c10:	e7e0      	b.n	80a0bd4 <_Z18allowUser_callbackPhj+0xa0>
            client.publish(topic_str, "successful RFID read, but you are not in the userlist");
 80a0c12:	4a10      	ldr	r2, [pc, #64]	; (80a0c54 <_Z18allowUser_callbackPhj+0x120>)
 80a0c14:	e7de      	b.n	80a0bd4 <_Z18allowUser_callbackPhj+0xa0>
            client.publish(topic_str, "ERROR: unknown scenario");
 80a0c16:	4a10      	ldr	r2, [pc, #64]	; (80a0c58 <_Z18allowUser_callbackPhj+0x124>)
 80a0c18:	e7dc      	b.n	80a0bd4 <_Z18allowUser_callbackPhj+0xa0>
 80a0c1a:	bf00      	nop
 80a0c1c:	080a824a 	.word	0x080a824a
 80a0c20:	20000304 	.word	0x20000304
 80a0c24:	200002cc 	.word	0x200002cc
 80a0c28:	080a8263 	.word	0x080a8263
 80a0c2c:	200004b8 	.word	0x200004b8
 80a0c30:	080a827f 	.word	0x080a827f
 80a0c34:	080a82b7 	.word	0x080a82b7
 80a0c38:	080a82db 	.word	0x080a82db
 80a0c3c:	20000334 	.word	0x20000334
 80a0c40:	080a82e1 	.word	0x080a82e1
 80a0c44:	20000344 	.word	0x20000344
 80a0c48:	080a8300 	.word	0x080a8300
 80a0c4c:	080a8336 	.word	0x080a8336
 80a0c50:	080a8362 	.word	0x080a8362
 80a0c54:	080a8395 	.word	0x080a8395
 80a0c58:	080a83cb 	.word	0x080a83cb

080a0c5c <_Z9reconnectv>:
            //client.publish("HANevse/photonTest", "test photon responds");
        }
    }
}

void reconnect(void) {
 80a0c5c:	b570      	push	{r4, r5, r6, lr}
    while (!client.isConnected()) {
 80a0c5e:	4c22      	ldr	r4, [pc, #136]	; (80a0ce8 <_Z9reconnectv+0x8c>)
        DEBUGPORT.print("MQTT>\tConnecting to MQTT broker...");
 80a0c60:	4d22      	ldr	r5, [pc, #136]	; (80a0cec <_Z9reconnectv+0x90>)
        if (CHARGEROFFSET==0) {
            if (client.connect("EV-Photon1")) {
 80a0c62:	4e23      	ldr	r6, [pc, #140]	; (80a0cf0 <_Z9reconnectv+0x94>)
    while (!client.isConnected()) {
 80a0c64:	4820      	ldr	r0, [pc, #128]	; (80a0ce8 <_Z9reconnectv+0x8c>)
 80a0c66:	f001 fb90 	bl	80a238a <_ZN4MQTT11isConnectedEv>
 80a0c6a:	2800      	cmp	r0, #0
 80a0c6c:	d13a      	bne.n	80a0ce4 <_Z9reconnectv+0x88>
        DEBUGPORT.print("MQTT>\tConnecting to MQTT broker...");
 80a0c6e:	f004 f857 	bl	80a4d20 <_Z16_fetch_usbserialv>
 80a0c72:	4629      	mov	r1, r5
 80a0c74:	f003 fc16 	bl	80a44a4 <_ZN5Print5printEPKc>
            if (client.connect("EV-Photon1")) {
 80a0c78:	4631      	mov	r1, r6
 80a0c7a:	4620      	mov	r0, r4
 80a0c7c:	f001 fc6e 	bl	80a255c <_ZN4MQTT7connectEPKc>
 80a0c80:	b308      	cbz	r0, 80a0cc6 <_Z9reconnectv+0x6a>
                DEBUGPORT.println("MQTT>\tConnected");
 80a0c82:	f004 f84d 	bl	80a4d20 <_Z16_fetch_usbserialv>
 80a0c86:	491b      	ldr	r1, [pc, #108]	; (80a0cf4 <_Z9reconnectv+0x98>)
 80a0c88:	f003 fc1f 	bl	80a44ca <_ZN5Print7printlnEPKc>
                //client.subscribe("HANevse/#", client.QOS2);
                client.subscribe("HANevse/energyMeter"); //+
 80a0c8c:	4620      	mov	r0, r4
 80a0c8e:	491a      	ldr	r1, [pc, #104]	; (80a0cf8 <_Z9reconnectv+0x9c>)
 80a0c90:	f001 fe60 	bl	80a2954 <_ZN4MQTT9subscribeEPKc>
                client.subscribe("HANevse/allowUser");
 80a0c94:	4620      	mov	r0, r4
 80a0c96:	4919      	ldr	r1, [pc, #100]	; (80a0cfc <_Z9reconnectv+0xa0>)
 80a0c98:	f001 fe5c 	bl	80a2954 <_ZN4MQTT9subscribeEPKc>
                
                client.subscribe("HANevse/resetOlimex");
 80a0c9c:	4620      	mov	r0, r4
 80a0c9e:	4918      	ldr	r1, [pc, #96]	; (80a0d00 <_Z9reconnectv+0xa4>)
 80a0ca0:	f001 fe58 	bl	80a2954 <_ZN4MQTT9subscribeEPKc>
                client.subscribe("HANevse/resetPhoton");
 80a0ca4:	4620      	mov	r0, r4
 80a0ca6:	4917      	ldr	r1, [pc, #92]	; (80a0d04 <_Z9reconnectv+0xa8>)
 80a0ca8:	f001 fe54 	bl	80a2954 <_ZN4MQTT9subscribeEPKc>
                client.subscribe("HANevse/switchTest1");
 80a0cac:	4620      	mov	r0, r4
 80a0cae:	4916      	ldr	r1, [pc, #88]	; (80a0d08 <_Z9reconnectv+0xac>)
 80a0cb0:	f001 fe50 	bl	80a2954 <_ZN4MQTT9subscribeEPKc>
                client.subscribe("HANevse/maxC1");
 80a0cb4:	4620      	mov	r0, r4
 80a0cb6:	4915      	ldr	r1, [pc, #84]	; (80a0d0c <_Z9reconnectv+0xb0>)
 80a0cb8:	f001 fe4c 	bl	80a2954 <_ZN4MQTT9subscribeEPKc>
                client.subscribe("HANevse/maxC2");
 80a0cbc:	4620      	mov	r0, r4
 80a0cbe:	4914      	ldr	r1, [pc, #80]	; (80a0d10 <_Z9reconnectv+0xb4>)
 80a0cc0:	f001 fe48 	bl	80a2954 <_ZN4MQTT9subscribeEPKc>
 80a0cc4:	e7ce      	b.n	80a0c64 <_Z9reconnectv+0x8>
            }
            else {
                DEBUGPORT.println("MQTT>\tConnection failed");
 80a0cc6:	f004 f82b 	bl	80a4d20 <_Z16_fetch_usbserialv>
 80a0cca:	4912      	ldr	r1, [pc, #72]	; (80a0d14 <_Z9reconnectv+0xb8>)
 80a0ccc:	f003 fbfd 	bl	80a44ca <_ZN5Print7printlnEPKc>
                DEBUGPORT.println("MQTT>\tRetrying...");
 80a0cd0:	f004 f826 	bl	80a4d20 <_Z16_fetch_usbserialv>
 80a0cd4:	4910      	ldr	r1, [pc, #64]	; (80a0d18 <_Z9reconnectv+0xbc>)
 80a0cd6:	f003 fbf8 	bl	80a44ca <_ZN5Print7printlnEPKc>
                delay(10000);
 80a0cda:	f242 7010 	movw	r0, #10000	; 0x2710
 80a0cde:	f003 fe5f 	bl	80a49a0 <delay>
 80a0ce2:	e7bf      	b.n	80a0c64 <_Z9reconnectv+0x8>
                DEBUGPORT.println("MQTT>\tRetrying...");
                delay(10000);
            }
        }
    }
}
 80a0ce4:	bd70      	pop	{r4, r5, r6, pc}
 80a0ce6:	bf00      	nop
 80a0ce8:	200004b8 	.word	0x200004b8
 80a0cec:	080a83e3 	.word	0x080a83e3
 80a0cf0:	080a8406 	.word	0x080a8406
 80a0cf4:	080a8411 	.word	0x080a8411
 80a0cf8:	080a8421 	.word	0x080a8421
 80a0cfc:	080a8435 	.word	0x080a8435
 80a0d00:	080a8447 	.word	0x080a8447
 80a0d04:	080a845b 	.word	0x080a845b
 80a0d08:	080a846f 	.word	0x080a846f
 80a0d0c:	080a8483 	.word	0x080a8483
 80a0d10:	080a8491 	.word	0x080a8491
 80a0d14:	080a849f 	.word	0x080a849f
 80a0d18:	080a84b7 	.word	0x080a84b7

080a0d1c <_ZN16JsonWriterStaticILj512EEC1Ev>:
public:
	explicit JsonWriterStatic() : JsonWriter(staticBuffer, BUFFER_SIZE) {};
 80a0d1c:	b510      	push	{r4, lr}
 80a0d1e:	4604      	mov	r4, r0
 80a0d20:	f44f 7200 	mov.w	r2, #512	; 0x200
 80a0d24:	f100 0130 	add.w	r1, r0, #48	; 0x30
 80a0d28:	f002 f84a 	bl	80a2dc0 <_ZN10JsonWriterC1EPcj>
 80a0d2c:	4b01      	ldr	r3, [pc, #4]	; (80a0d34 <_ZN16JsonWriterStaticILj512EEC1Ev+0x18>)
 80a0d2e:	4620      	mov	r0, r4
 80a0d30:	6023      	str	r3, [r4, #0]
 80a0d32:	bd10      	pop	{r4, pc}
 80a0d34:	080a8644 	.word	0x080a8644

080a0d38 <_ZN10JsonWriter14insertKeyValueIfEEvPKcT_>:
	void insertKeyValue(const char *key, T value) {
 80a0d38:	b570      	push	{r4, r5, r6, lr}
 80a0d3a:	4604      	mov	r4, r0
 80a0d3c:	460e      	mov	r6, r1
 80a0d3e:	4615      	mov	r5, r2
		insertCheckSeparator();
 80a0d40:	f002 f92e 	bl	80a2fa0 <_ZN10JsonWriter20insertCheckSeparatorEv>
	void insertValue(const char *value) { insertString(value, true); }
 80a0d44:	4631      	mov	r1, r6
 80a0d46:	4620      	mov	r0, r4
 80a0d48:	2201      	movs	r2, #1
 80a0d4a:	f002 f897 	bl	80a2e7c <_ZN10JsonWriter12insertStringEPKcb>
		insertChar(':');
 80a0d4e:	4620      	mov	r0, r4
 80a0d50:	213a      	movs	r1, #58	; 0x3a
 80a0d52:	f002 f847 	bl	80a2de4 <_ZN10JsonWriter10insertCharEc>
		insertValue(value);
 80a0d56:	4629      	mov	r1, r5
 80a0d58:	4620      	mov	r0, r4
	}
 80a0d5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		insertValue(value);
 80a0d5e:	f002 b943 	b.w	80a2fe8 <_ZN10JsonWriter11insertValueEf>

080a0d62 <_ZN10JsonWriter14insertKeyValueI6StringEEvPKcT_>:
	void insertKeyValue(const char *key, T value) {
 80a0d62:	b570      	push	{r4, r5, r6, lr}
 80a0d64:	4604      	mov	r4, r0
 80a0d66:	460e      	mov	r6, r1
 80a0d68:	4615      	mov	r5, r2
		insertCheckSeparator();
 80a0d6a:	f002 f919 	bl	80a2fa0 <_ZN10JsonWriter20insertCheckSeparatorEv>
	void insertValue(const char *value) { insertString(value, true); }
 80a0d6e:	2201      	movs	r2, #1
 80a0d70:	4631      	mov	r1, r6
 80a0d72:	4620      	mov	r0, r4
 80a0d74:	f002 f882 	bl	80a2e7c <_ZN10JsonWriter12insertStringEPKcb>
		insertChar(':');
 80a0d78:	4620      	mov	r0, r4
 80a0d7a:	213a      	movs	r1, #58	; 0x3a
 80a0d7c:	f002 f832 	bl	80a2de4 <_ZN10JsonWriter10insertCharEc>
	void insertValue(const String &value) { insertString(value.c_str(), true); }
 80a0d80:	4620      	mov	r0, r4
 80a0d82:	6829      	ldr	r1, [r5, #0]
 80a0d84:	2201      	movs	r2, #1
	}
 80a0d86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	void insertValue(const String &value) { insertString(value.c_str(), true); }
 80a0d8a:	f002 b877 	b.w	80a2e7c <_ZN10JsonWriter12insertStringEPKcb>
	...

080a0d90 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>:
	void insertKeyValue(const char *key, T value) {
 80a0d90:	b570      	push	{r4, r5, r6, lr}
 80a0d92:	4604      	mov	r4, r0
 80a0d94:	460e      	mov	r6, r1
 80a0d96:	4615      	mov	r5, r2
		insertCheckSeparator();
 80a0d98:	f002 f902 	bl	80a2fa0 <_ZN10JsonWriter20insertCheckSeparatorEv>
	void insertValue(const char *value) { insertString(value, true); }
 80a0d9c:	2201      	movs	r2, #1
 80a0d9e:	4631      	mov	r1, r6
 80a0da0:	4620      	mov	r0, r4
 80a0da2:	f002 f86b 	bl	80a2e7c <_ZN10JsonWriter12insertStringEPKcb>
		insertChar(':');
 80a0da6:	4620      	mov	r0, r4
 80a0da8:	213a      	movs	r1, #58	; 0x3a
 80a0daa:	f002 f81b 	bl	80a2de4 <_ZN10JsonWriter10insertCharEc>
	void insertValue(int value) { insertsprintf("%d", value); }
 80a0dae:	462a      	mov	r2, r5
 80a0db0:	4620      	mov	r0, r4
	}
 80a0db2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	void insertValue(int value) { insertsprintf("%d", value); }
 80a0db6:	4901      	ldr	r1, [pc, #4]	; (80a0dbc <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_+0x2c>)
 80a0db8:	f002 b853 	b.w	80a2e62 <_ZN10JsonWriter13insertsprintfEPKcz>
 80a0dbc:	080a8a67 	.word	0x080a8a67

080a0dc0 <_Z15add_Measurementfffffffmi6String>:
void add_Measurement(float phaseVoltageL1, float phaseVoltageL2, float phaseVoltageL3, float currentL1, float currentL2, float currentL3, /* float Power, float Energy,*/ float Frequency, unsigned long Timestamp, int socketId=0, String userId="00") {
 80a0dc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a0dc2:	4607      	mov	r7, r0
 80a0dc4:	460e      	mov	r6, r1
 80a0dc6:	4615      	mov	r5, r2
 80a0dc8:	461c      	mov	r4, r3
 80a0dca:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
    JsonWriterStatic<512> jsonMessage;     
 80a0dce:	a804      	add	r0, sp, #16
 80a0dd0:	f7ff ffa4 	bl	80a0d1c <_ZN16JsonWriterStaticILj512EEC1Ev>
	 * @brief Start a new object
	 *
	 * @param jw The JsonWriter object to insert the object into
	 */
	JsonWriterAutoObject(JsonWriter *jw) : jw(jw) {
		jw->startObject();
 80a0dd4:	a804      	add	r0, sp, #16
 80a0dd6:	f7ff fd83 	bl	80a08e0 <_ZN10JsonWriter11startObjectEv>
        jsonMessage.insertKeyValue("V1", phaseVoltageL1);
 80a0dda:	463a      	mov	r2, r7
 80a0ddc:	492b      	ldr	r1, [pc, #172]	; (80a0e8c <_Z15add_Measurementfffffffmi6String+0xcc>)
 80a0dde:	a804      	add	r0, sp, #16
 80a0de0:	f7ff ffaa 	bl	80a0d38 <_ZN10JsonWriter14insertKeyValueIfEEvPKcT_>
        jsonMessage.insertKeyValue("V2", phaseVoltageL2);
 80a0de4:	4632      	mov	r2, r6
 80a0de6:	492a      	ldr	r1, [pc, #168]	; (80a0e90 <_Z15add_Measurementfffffffmi6String+0xd0>)
 80a0de8:	a804      	add	r0, sp, #16
 80a0dea:	f7ff ffa5 	bl	80a0d38 <_ZN10JsonWriter14insertKeyValueIfEEvPKcT_>
        jsonMessage.insertKeyValue("V3", phaseVoltageL3);
 80a0dee:	462a      	mov	r2, r5
 80a0df0:	4928      	ldr	r1, [pc, #160]	; (80a0e94 <_Z15add_Measurementfffffffmi6String+0xd4>)
 80a0df2:	a804      	add	r0, sp, #16
 80a0df4:	f7ff ffa0 	bl	80a0d38 <_ZN10JsonWriter14insertKeyValueIfEEvPKcT_>
        jsonMessage.insertKeyValue("I1", currentL1);
 80a0df8:	4622      	mov	r2, r4
 80a0dfa:	4927      	ldr	r1, [pc, #156]	; (80a0e98 <_Z15add_Measurementfffffffmi6String+0xd8>)
 80a0dfc:	a804      	add	r0, sp, #16
 80a0dfe:	f7ff ff9b 	bl	80a0d38 <_ZN10JsonWriter14insertKeyValueIfEEvPKcT_>
        jsonMessage.insertKeyValue("I2", currentL2);
 80a0e02:	9a96      	ldr	r2, [sp, #600]	; 0x258
 80a0e04:	4925      	ldr	r1, [pc, #148]	; (80a0e9c <_Z15add_Measurementfffffffmi6String+0xdc>)
 80a0e06:	a804      	add	r0, sp, #16
 80a0e08:	f7ff ff96 	bl	80a0d38 <_ZN10JsonWriter14insertKeyValueIfEEvPKcT_>
        jsonMessage.insertKeyValue("I3", currentL3);
 80a0e0c:	9a97      	ldr	r2, [sp, #604]	; 0x25c
 80a0e0e:	4924      	ldr	r1, [pc, #144]	; (80a0ea0 <_Z15add_Measurementfffffffmi6String+0xe0>)
 80a0e10:	a804      	add	r0, sp, #16
 80a0e12:	f7ff ff91 	bl	80a0d38 <_ZN10JsonWriter14insertKeyValueIfEEvPKcT_>
        jsonMessage.insertKeyValue("F", Frequency);
 80a0e16:	9a98      	ldr	r2, [sp, #608]	; 0x260
 80a0e18:	4922      	ldr	r1, [pc, #136]	; (80a0ea4 <_Z15add_Measurementfffffffmi6String+0xe4>)
 80a0e1a:	a804      	add	r0, sp, #16
 80a0e1c:	f7ff ff8c 	bl	80a0d38 <_ZN10JsonWriter14insertKeyValueIfEEvPKcT_>
		jsonMessage.insertKeyValue("UserID", userId);
 80a0e20:	999b      	ldr	r1, [sp, #620]	; 0x26c
 80a0e22:	4668      	mov	r0, sp
 80a0e24:	f003 fa0b 	bl	80a423e <_ZN6StringC1ERKS_>
 80a0e28:	466a      	mov	r2, sp
 80a0e2a:	491f      	ldr	r1, [pc, #124]	; (80a0ea8 <_Z15add_Measurementfffffffmi6String+0xe8>)
 80a0e2c:	a804      	add	r0, sp, #16
 80a0e2e:	f7ff ff98 	bl	80a0d62 <_ZN10JsonWriter14insertKeyValueI6StringEEvPKcT_>
 80a0e32:	4668      	mov	r0, sp
 80a0e34:	f003 f97a 	bl	80a412c <_ZN6StringD1Ev>
		jsonMessage.insertKeyValue("SocketID", socketId);
 80a0e38:	9a9a      	ldr	r2, [sp, #616]	; 0x268
 80a0e3a:	491c      	ldr	r1, [pc, #112]	; (80a0eac <_Z15add_Measurementfffffffmi6String+0xec>)
 80a0e3c:	a804      	add	r0, sp, #16
 80a0e3e:	f7ff ffa7 	bl	80a0d90 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
		insertCheckSeparator();
 80a0e42:	a804      	add	r0, sp, #16
 80a0e44:	f002 f8ac 	bl	80a2fa0 <_ZN10JsonWriter20insertCheckSeparatorEv>
	void insertValue(const char *value) { insertString(value, true); }
 80a0e48:	2201      	movs	r2, #1
 80a0e4a:	4919      	ldr	r1, [pc, #100]	; (80a0eb0 <_Z15add_Measurementfffffffmi6String+0xf0>)
 80a0e4c:	a804      	add	r0, sp, #16
 80a0e4e:	f002 f815 	bl	80a2e7c <_ZN10JsonWriter12insertStringEPKcb>
		insertChar(':');
 80a0e52:	213a      	movs	r1, #58	; 0x3a
 80a0e54:	a804      	add	r0, sp, #16
 80a0e56:	f001 ffc5 	bl	80a2de4 <_ZN10JsonWriter10insertCharEc>
	void insertValue(unsigned long value) { insertsprintf("%lu", value); }
 80a0e5a:	9a99      	ldr	r2, [sp, #612]	; 0x264
 80a0e5c:	4915      	ldr	r1, [pc, #84]	; (80a0eb4 <_Z15add_Measurementfffffffmi6String+0xf4>)
 80a0e5e:	a804      	add	r0, sp, #16
 80a0e60:	f001 ffff 	bl	80a2e62 <_ZN10JsonWriter13insertsprintfEPKcz>

	/**
	 * @brief End the object
	 */
	~JsonWriterAutoObject() {
		jw->finishObjectOrArray();
 80a0e64:	a804      	add	r0, sp, #16
 80a0e66:	f001 ffcc 	bl	80a2e02 <_ZN10JsonWriter19finishObjectOrArrayEv>
 80a0e6a:	2403      	movs	r4, #3
		if(client.publish("HANevse/photonMeasure", jsonMessage.getBuffer())) {
 80a0e6c:	4d12      	ldr	r5, [pc, #72]	; (80a0eb8 <_Z15add_Measurementfffffffmi6String+0xf8>)
 80a0e6e:	4e13      	ldr	r6, [pc, #76]	; (80a0ebc <_Z15add_Measurementfffffffmi6String+0xfc>)
 80a0e70:	4629      	mov	r1, r5
 80a0e72:	4630      	mov	r0, r6
 80a0e74:	9a05      	ldr	r2, [sp, #20]
 80a0e76:	f001 fbf6 	bl	80a2666 <_ZN4MQTT7publishEPKcS1_>
 80a0e7a:	b908      	cbnz	r0, 80a0e80 <_Z15add_Measurementfffffffmi6String+0xc0>
	for(int i=0; i<3; i++) {
 80a0e7c:	3c01      	subs	r4, #1
 80a0e7e:	d1f7      	bne.n	80a0e70 <_Z15add_Measurementfffffffmi6String+0xb0>
    JsonWriterStatic<512> jsonMessage;     
 80a0e80:	a804      	add	r0, sp, #16
 80a0e82:	f7ff fa0d 	bl	80a02a0 <_ZN16JsonWriterStaticILj512EED1Ev>
}
 80a0e86:	f50d 7d11 	add.w	sp, sp, #580	; 0x244
 80a0e8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a0e8c:	080a84c9 	.word	0x080a84c9
 80a0e90:	080a84cc 	.word	0x080a84cc
 80a0e94:	080a84cf 	.word	0x080a84cf
 80a0e98:	080a84d2 	.word	0x080a84d2
 80a0e9c:	080a84d5 	.word	0x080a84d5
 80a0ea0:	080a84d8 	.word	0x080a84d8
 80a0ea4:	080a84db 	.word	0x080a84db
 80a0ea8:	080a84dd 	.word	0x080a84dd
 80a0eac:	080a84e4 	.word	0x080a84e4
 80a0eb0:	080a8541 	.word	0x080a8541
 80a0eb4:	080a84ed 	.word	0x080a84ed
 80a0eb8:	080a84f1 	.word	0x080a84f1
 80a0ebc:	200004b8 	.word	0x200004b8

080a0ec0 <_ZN10JsonWriter14insertKeyValueIlEEvPKcT_>:
	void insertKeyValue(const char *key, T value) {
 80a0ec0:	b570      	push	{r4, r5, r6, lr}
 80a0ec2:	4604      	mov	r4, r0
 80a0ec4:	460e      	mov	r6, r1
 80a0ec6:	4615      	mov	r5, r2
		insertCheckSeparator();
 80a0ec8:	f002 f86a 	bl	80a2fa0 <_ZN10JsonWriter20insertCheckSeparatorEv>
	void insertValue(const char *value) { insertString(value, true); }
 80a0ecc:	2201      	movs	r2, #1
 80a0ece:	4631      	mov	r1, r6
 80a0ed0:	4620      	mov	r0, r4
 80a0ed2:	f001 ffd3 	bl	80a2e7c <_ZN10JsonWriter12insertStringEPKcb>
		insertChar(':');
 80a0ed6:	4620      	mov	r0, r4
 80a0ed8:	213a      	movs	r1, #58	; 0x3a
 80a0eda:	f001 ff83 	bl	80a2de4 <_ZN10JsonWriter10insertCharEc>
	void insertValue(long value) { insertsprintf("%ld", value); }
 80a0ede:	462a      	mov	r2, r5
 80a0ee0:	4620      	mov	r0, r4
	}
 80a0ee2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	void insertValue(long value) { insertsprintf("%ld", value); }
 80a0ee6:	4901      	ldr	r1, [pc, #4]	; (80a0eec <_ZN10JsonWriter14insertKeyValueIlEEvPKcT_+0x2c>)
 80a0ee8:	f001 bfbb 	b.w	80a2e62 <_ZN10JsonWriter13insertsprintfEPKcz>
 80a0eec:	080a8507 	.word	0x080a8507

080a0ef0 <_Z12readRFIDCardi>:
bool readRFIDCard(int Charger) {
 80a0ef0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    Pianswer = 0;
 80a0ef4:	2400      	movs	r4, #0
 80a0ef6:	4b81      	ldr	r3, [pc, #516]	; (80a10fc <_Z12readRFIDCardi+0x20c>)
    if(Charger==1+CHARGEROFFSET)
 80a0ef8:	2801      	cmp	r0, #1
bool readRFIDCard(int Charger) {
 80a0efa:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
    Pianswer = 0;
 80a0efe:	801c      	strh	r4, [r3, #0]
    if(Charger==1+CHARGEROFFSET)
 80a0f00:	f040 808d 	bne.w	80a101e <_Z12readRFIDCardi+0x12e>
        if ( ! mfrc522_Charger1.PICC_IsNewCardPresent()) 
 80a0f04:	487e      	ldr	r0, [pc, #504]	; (80a1100 <_Z12readRFIDCardi+0x210>)
 80a0f06:	f000 ffbd 	bl	80a1e84 <_ZN7MFRC52221PICC_IsNewCardPresentEv>
 80a0f0a:	4e7d      	ldr	r6, [pc, #500]	; (80a1100 <_Z12readRFIDCardi+0x210>)
 80a0f0c:	2800      	cmp	r0, #0
 80a0f0e:	f000 80f0 	beq.w	80a10f2 <_Z12readRFIDCardi+0x202>
        if ( ! mfrc522_Charger1.PICC_ReadCardSerial()) 
 80a0f12:	4630      	mov	r0, r6
 80a0f14:	f001 f914 	bl	80a2140 <_ZN7MFRC52219PICC_ReadCardSerialEv>
 80a0f18:	2800      	cmp	r0, #0
 80a0f1a:	f000 80ea 	beq.w	80a10f2 <_Z12readRFIDCardi+0x202>
        DEBUGPORT.print("readCard>\tUID tag on charger1:");
 80a0f1e:	f003 feff 	bl	80a4d20 <_Z16_fetch_usbserialv>
 80a0f22:	4978      	ldr	r1, [pc, #480]	; (80a1104 <_Z12readRFIDCardi+0x214>)
 80a0f24:	f003 fabe 	bl	80a44a4 <_ZN5Print5printEPKc>
        String content = "";        
 80a0f28:	4668      	mov	r0, sp
 80a0f2a:	4977      	ldr	r1, [pc, #476]	; (80a1108 <_Z12readRFIDCardi+0x218>)
 80a0f2c:	f003 f948 	bl	80a41c0 <_ZN6StringC1EPKc>
            DEBUGPORT.print(mfrc522_Charger1.uid.uidByte[i] < 0x10 ? " 0" : " ");
 80a0f30:	f8df 8200 	ldr.w	r8, [pc, #512]	; 80a1134 <_Z12readRFIDCardi+0x244>
 80a0f34:	4f75      	ldr	r7, [pc, #468]	; (80a110c <_Z12readRFIDCardi+0x21c>)
        for (byte i = 0; i < mfrc522_Charger1.uid.size; i++) 
 80a0f36:	7833      	ldrb	r3, [r6, #0]
 80a0f38:	b2e5      	uxtb	r5, r4
 80a0f3a:	42ab      	cmp	r3, r5
 80a0f3c:	d92c      	bls.n	80a0f98 <_Z12readRFIDCardi+0xa8>
            DEBUGPORT.print(mfrc522_Charger1.uid.uidByte[i] < 0x10 ? " 0" : " ");
 80a0f3e:	4435      	add	r5, r6
 80a0f40:	f003 feee 	bl	80a4d20 <_Z16_fetch_usbserialv>
 80a0f44:	7869      	ldrb	r1, [r5, #1]
 80a0f46:	3401      	adds	r4, #1
 80a0f48:	290f      	cmp	r1, #15
 80a0f4a:	bf94      	ite	ls
 80a0f4c:	4641      	movls	r1, r8
 80a0f4e:	4639      	movhi	r1, r7
 80a0f50:	f003 faa8 	bl	80a44a4 <_ZN5Print5printEPKc>
            DEBUGPORT.print(mfrc522_Charger1.uid.uidByte[i], HEX);
 80a0f54:	f003 fee4 	bl	80a4d20 <_Z16_fetch_usbserialv>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80a0f58:	2210      	movs	r2, #16
 80a0f5a:	7869      	ldrb	r1, [r5, #1]
 80a0f5c:	f003 fabf 	bl	80a44de <_ZN5Print11printNumberEmh>
            content.concat(String(mfrc522_Charger1.uid.uidByte[i] < 0x10 ? " 0" : " "));
 80a0f60:	7869      	ldrb	r1, [r5, #1]
 80a0f62:	a808      	add	r0, sp, #32
 80a0f64:	290f      	cmp	r1, #15
 80a0f66:	bf94      	ite	ls
 80a0f68:	4641      	movls	r1, r8
 80a0f6a:	4639      	movhi	r1, r7
 80a0f6c:	f003 f928 	bl	80a41c0 <_ZN6StringC1EPKc>
 80a0f70:	a908      	add	r1, sp, #32
 80a0f72:	4668      	mov	r0, sp
 80a0f74:	f003 f9ed 	bl	80a4352 <_ZN6String6concatERKS_>
 80a0f78:	a808      	add	r0, sp, #32
 80a0f7a:	f003 f8d7 	bl	80a412c <_ZN6StringD1Ev>
            content.concat(String(mfrc522_Charger1.uid.uidByte[i], HEX));
 80a0f7e:	2210      	movs	r2, #16
 80a0f80:	7869      	ldrb	r1, [r5, #1]
 80a0f82:	a808      	add	r0, sp, #32
 80a0f84:	f003 f97f 	bl	80a4286 <_ZN6StringC1Ehh>
 80a0f88:	a908      	add	r1, sp, #32
 80a0f8a:	4668      	mov	r0, sp
 80a0f8c:	f003 f9e1 	bl	80a4352 <_ZN6String6concatERKS_>
 80a0f90:	a808      	add	r0, sp, #32
 80a0f92:	f003 f8cb 	bl	80a412c <_ZN6StringD1Ev>
        for (byte i = 0; i < mfrc522_Charger1.uid.size; i++) 
 80a0f96:	e7ce      	b.n	80a0f36 <_Z12readRFIDCardi+0x46>
        JsonWriterStatic<512> jsonMessage;
 80a0f98:	a808      	add	r0, sp, #32
 80a0f9a:	f7ff febf 	bl	80a0d1c <_ZN16JsonWriterStaticILj512EEC1Ev>
        UIDtagCharger1=content.substring(1); //??? why does it start at 1?
 80a0f9e:	2201      	movs	r2, #1
 80a0fa0:	4669      	mov	r1, sp
 80a0fa2:	a804      	add	r0, sp, #16
 80a0fa4:	f003 fa4c 	bl	80a4440 <_ZNK6String9substringEj>
 80a0fa8:	a904      	add	r1, sp, #16
 80a0faa:	4859      	ldr	r0, [pc, #356]	; (80a1110 <_Z12readRFIDCardi+0x220>)
 80a0fac:	f003 f952 	bl	80a4254 <_ZN6StringaSEOS_>
 80a0fb0:	a804      	add	r0, sp, #16
 80a0fb2:	f003 f8bb 	bl	80a412c <_ZN6StringD1Ev>
		jw->startObject();
 80a0fb6:	a808      	add	r0, sp, #32
 80a0fb8:	f7ff fc92 	bl	80a08e0 <_ZN10JsonWriter11startObjectEv>
		jsonMessage.insertKeyValue("UserId", UIDtagCharger1);
 80a0fbc:	4954      	ldr	r1, [pc, #336]	; (80a1110 <_Z12readRFIDCardi+0x220>)
 80a0fbe:	a804      	add	r0, sp, #16
 80a0fc0:	f003 f93d 	bl	80a423e <_ZN6StringC1ERKS_>
 80a0fc4:	aa04      	add	r2, sp, #16
 80a0fc6:	4953      	ldr	r1, [pc, #332]	; (80a1114 <_Z12readRFIDCardi+0x224>)
 80a0fc8:	a808      	add	r0, sp, #32
 80a0fca:	f7ff feca 	bl	80a0d62 <_ZN10JsonWriter14insertKeyValueI6StringEEvPKcT_>
 80a0fce:	a804      	add	r0, sp, #16
 80a0fd0:	f003 f8ac 	bl	80a412c <_ZN6StringD1Ev>
        jsonMessage.insertKeyValue("Charger", Charger);
 80a0fd4:	2201      	movs	r2, #1
        jsonMessage.insertKeyValue("Charger", Charger);
 80a0fd6:	4950      	ldr	r1, [pc, #320]	; (80a1118 <_Z12readRFIDCardi+0x228>)
 80a0fd8:	a808      	add	r0, sp, #32
 80a0fda:	f7ff fed9 	bl	80a0d90 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
		jsonMessage.insertKeyValue("StartTime", Time.now());
 80a0fde:	f003 fcc4 	bl	80a496a <_ZN9TimeClass3nowEv>
 80a0fe2:	494e      	ldr	r1, [pc, #312]	; (80a111c <_Z12readRFIDCardi+0x22c>)
 80a0fe4:	4602      	mov	r2, r0
 80a0fe6:	a808      	add	r0, sp, #32
 80a0fe8:	f7ff ff6a 	bl	80a0ec0 <_ZN10JsonWriter14insertKeyValueIlEEvPKcT_>
		jw->finishObjectOrArray();
 80a0fec:	a808      	add	r0, sp, #32
 80a0fee:	f001 ff08 	bl	80a2e02 <_ZN10JsonWriter19finishObjectOrArrayEv>
        client.publish("HANevse/updateUser", jsonMessage.getBuffer());
 80a0ff2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80a0ff4:	494a      	ldr	r1, [pc, #296]	; (80a1120 <_Z12readRFIDCardi+0x230>)
 80a0ff6:	484b      	ldr	r0, [pc, #300]	; (80a1124 <_Z12readRFIDCardi+0x234>)
 80a0ff8:	f001 fb35 	bl	80a2666 <_ZN4MQTT7publishEPKcS1_>
        JsonWriterStatic<512> jsonMessage;
 80a0ffc:	a808      	add	r0, sp, #32
 80a0ffe:	f7ff f94f 	bl	80a02a0 <_ZN16JsonWriterStaticILj512EED1Ev>
        String content = "";        
 80a1002:	4668      	mov	r0, sp
 80a1004:	f003 f892 	bl	80a412c <_ZN6StringD1Ev>
    DEBUGPORT.println("");
 80a1008:	f003 fe8a 	bl	80a4d20 <_Z16_fetch_usbserialv>
 80a100c:	493e      	ldr	r1, [pc, #248]	; (80a1108 <_Z12readRFIDCardi+0x218>)
 80a100e:	f003 fa5c 	bl	80a44ca <_ZN5Print7printlnEPKc>
    delay(500);
 80a1012:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a1016:	f003 fcc3 	bl	80a49a0 <delay>
     return Authorized;
 80a101a:	2001      	movs	r0, #1
 80a101c:	e06a      	b.n	80a10f4 <_Z12readRFIDCardi+0x204>
    if(Charger==2+CHARGEROFFSET)
 80a101e:	2802      	cmp	r0, #2
 80a1020:	d1f2      	bne.n	80a1008 <_Z12readRFIDCardi+0x118>
        if ( ! mfrc522_Charger2.PICC_IsNewCardPresent()) 
 80a1022:	4841      	ldr	r0, [pc, #260]	; (80a1128 <_Z12readRFIDCardi+0x238>)
 80a1024:	f000 ff2e 	bl	80a1e84 <_ZN7MFRC52221PICC_IsNewCardPresentEv>
 80a1028:	4e3f      	ldr	r6, [pc, #252]	; (80a1128 <_Z12readRFIDCardi+0x238>)
 80a102a:	2800      	cmp	r0, #0
 80a102c:	d061      	beq.n	80a10f2 <_Z12readRFIDCardi+0x202>
        if ( ! mfrc522_Charger2.PICC_ReadCardSerial()) 
 80a102e:	4630      	mov	r0, r6
 80a1030:	f001 f886 	bl	80a2140 <_ZN7MFRC52219PICC_ReadCardSerialEv>
 80a1034:	2800      	cmp	r0, #0
 80a1036:	d05c      	beq.n	80a10f2 <_Z12readRFIDCardi+0x202>
        DEBUGPORT.print("readCard>\tUID tag on charger2:");
 80a1038:	f003 fe72 	bl	80a4d20 <_Z16_fetch_usbserialv>
 80a103c:	493b      	ldr	r1, [pc, #236]	; (80a112c <_Z12readRFIDCardi+0x23c>)
 80a103e:	f003 fa31 	bl	80a44a4 <_ZN5Print5printEPKc>
        String content = "";        
 80a1042:	4668      	mov	r0, sp
 80a1044:	4930      	ldr	r1, [pc, #192]	; (80a1108 <_Z12readRFIDCardi+0x218>)
 80a1046:	f003 f8bb 	bl	80a41c0 <_ZN6StringC1EPKc>
            DEBUGPORT.print(mfrc522_Charger2.uid.uidByte[i] < 0x10 ? " 0" : " ");
 80a104a:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 80a1134 <_Z12readRFIDCardi+0x244>
 80a104e:	4f2f      	ldr	r7, [pc, #188]	; (80a110c <_Z12readRFIDCardi+0x21c>)
        for (byte i = 0; i < mfrc522_Charger2.uid.size; i++) 
 80a1050:	7833      	ldrb	r3, [r6, #0]
 80a1052:	b2e5      	uxtb	r5, r4
 80a1054:	42ab      	cmp	r3, r5
 80a1056:	d92c      	bls.n	80a10b2 <_Z12readRFIDCardi+0x1c2>
            DEBUGPORT.print(mfrc522_Charger2.uid.uidByte[i] < 0x10 ? " 0" : " ");
 80a1058:	4435      	add	r5, r6
 80a105a:	f003 fe61 	bl	80a4d20 <_Z16_fetch_usbserialv>
 80a105e:	7869      	ldrb	r1, [r5, #1]
 80a1060:	3401      	adds	r4, #1
 80a1062:	290f      	cmp	r1, #15
 80a1064:	bf94      	ite	ls
 80a1066:	4641      	movls	r1, r8
 80a1068:	4639      	movhi	r1, r7
 80a106a:	f003 fa1b 	bl	80a44a4 <_ZN5Print5printEPKc>
            DEBUGPORT.print(mfrc522_Charger2.uid.uidByte[i], HEX);
 80a106e:	f003 fe57 	bl	80a4d20 <_Z16_fetch_usbserialv>
 80a1072:	2210      	movs	r2, #16
 80a1074:	7869      	ldrb	r1, [r5, #1]
 80a1076:	f003 fa32 	bl	80a44de <_ZN5Print11printNumberEmh>
            content.concat(String(mfrc522_Charger2.uid.uidByte[i] < 0x10 ? " 0" : " "));
 80a107a:	7869      	ldrb	r1, [r5, #1]
 80a107c:	a808      	add	r0, sp, #32
 80a107e:	290f      	cmp	r1, #15
 80a1080:	bf94      	ite	ls
 80a1082:	4641      	movls	r1, r8
 80a1084:	4639      	movhi	r1, r7
 80a1086:	f003 f89b 	bl	80a41c0 <_ZN6StringC1EPKc>
 80a108a:	a908      	add	r1, sp, #32
 80a108c:	4668      	mov	r0, sp
 80a108e:	f003 f960 	bl	80a4352 <_ZN6String6concatERKS_>
 80a1092:	a808      	add	r0, sp, #32
 80a1094:	f003 f84a 	bl	80a412c <_ZN6StringD1Ev>
            content.concat(String(mfrc522_Charger2.uid.uidByte[i], HEX));
 80a1098:	2210      	movs	r2, #16
 80a109a:	7869      	ldrb	r1, [r5, #1]
 80a109c:	a808      	add	r0, sp, #32
 80a109e:	f003 f8f2 	bl	80a4286 <_ZN6StringC1Ehh>
 80a10a2:	a908      	add	r1, sp, #32
 80a10a4:	4668      	mov	r0, sp
 80a10a6:	f003 f954 	bl	80a4352 <_ZN6String6concatERKS_>
 80a10aa:	a808      	add	r0, sp, #32
 80a10ac:	f003 f83e 	bl	80a412c <_ZN6StringD1Ev>
        for (byte i = 0; i < mfrc522_Charger2.uid.size; i++) 
 80a10b0:	e7ce      	b.n	80a1050 <_Z12readRFIDCardi+0x160>
        UIDtagCharger2=content.substring(1);
 80a10b2:	2201      	movs	r2, #1
 80a10b4:	4669      	mov	r1, sp
 80a10b6:	a808      	add	r0, sp, #32
 80a10b8:	f003 f9c2 	bl	80a4440 <_ZNK6String9substringEj>
 80a10bc:	a908      	add	r1, sp, #32
 80a10be:	481c      	ldr	r0, [pc, #112]	; (80a1130 <_Z12readRFIDCardi+0x240>)
 80a10c0:	f003 f8c8 	bl	80a4254 <_ZN6StringaSEOS_>
 80a10c4:	a808      	add	r0, sp, #32
 80a10c6:	f003 f831 	bl	80a412c <_ZN6StringD1Ev>
        JsonWriterStatic<512> jsonMessage;
 80a10ca:	a808      	add	r0, sp, #32
 80a10cc:	f7ff fe26 	bl	80a0d1c <_ZN16JsonWriterStaticILj512EEC1Ev>
		jw->startObject();
 80a10d0:	a808      	add	r0, sp, #32
 80a10d2:	f7ff fc05 	bl	80a08e0 <_ZN10JsonWriter11startObjectEv>
		jsonMessage.insertKeyValue("UserId", UIDtagCharger2);
 80a10d6:	4916      	ldr	r1, [pc, #88]	; (80a1130 <_Z12readRFIDCardi+0x240>)
 80a10d8:	a804      	add	r0, sp, #16
 80a10da:	f003 f8b0 	bl	80a423e <_ZN6StringC1ERKS_>
 80a10de:	aa04      	add	r2, sp, #16
 80a10e0:	490c      	ldr	r1, [pc, #48]	; (80a1114 <_Z12readRFIDCardi+0x224>)
 80a10e2:	a808      	add	r0, sp, #32
 80a10e4:	f7ff fe3d 	bl	80a0d62 <_ZN10JsonWriter14insertKeyValueI6StringEEvPKcT_>
 80a10e8:	a804      	add	r0, sp, #16
 80a10ea:	f003 f81f 	bl	80a412c <_ZN6StringD1Ev>
        jsonMessage.insertKeyValue("Charger", Charger);
 80a10ee:	2202      	movs	r2, #2
 80a10f0:	e771      	b.n	80a0fd6 <_Z12readRFIDCardi+0xe6>
            return false;
 80a10f2:	2000      	movs	r0, #0
}
 80a10f4:	f50d 7d14 	add.w	sp, sp, #592	; 0x250
 80a10f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a10fc:	20000304 	.word	0x20000304
 80a1100:	20000521 	.word	0x20000521
 80a1104:	080a850e 	.word	0x080a850e
 80a1108:	080a89a0 	.word	0x080a89a0
 80a110c:	080a813b 	.word	0x080a813b
 80a1110:	20000334 	.word	0x20000334
 80a1114:	080a852d 	.word	0x080a852d
 80a1118:	080a8534 	.word	0x080a8534
 80a111c:	080a853c 	.word	0x080a853c
 80a1120:	080a8546 	.word	0x080a8546
 80a1124:	200004b8 	.word	0x200004b8
 80a1128:	2000052f 	.word	0x2000052f
 80a112c:	080a8559 	.word	0x080a8559
 80a1130:	20000344 	.word	0x20000344
 80a1134:	080a850b 	.word	0x080a850b

080a1138 <loop>:
	
	//RGB.control(true);
    Time.zone(1); //Dutch time zone
}

void loop() {
 80a1138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a113c:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a1140:	f002 fbf0 	bl	80a3924 <spark_cloud_flag_connected>
    //Check the connection to the MQTT broker
    if (Particle.connected() == false) {
 80a1144:	b908      	cbnz	r0, 80a114a <loop+0x12>
        spark_cloud_flag_connect();
 80a1146:	f002 fbe5 	bl	80a3914 <spark_cloud_flag_connect>
        Particle.connect();
    }

    if (client.isConnected()) {
 80a114a:	48a6      	ldr	r0, [pc, #664]	; (80a13e4 <loop+0x2ac>)
 80a114c:	f001 f91d 	bl	80a238a <_ZN4MQTT11isConnectedEv>
 80a1150:	2800      	cmp	r0, #0
 80a1152:	f000 8102 	beq.w	80a135a <loop+0x222>
        client.loop();
 80a1156:	48a3      	ldr	r0, [pc, #652]	; (80a13e4 <loop+0x2ac>)
 80a1158:	f001 facc 	bl	80a26f4 <_ZN4MQTT4loopEv>
    }
    else reconnect();
    
    Particle.process();
 80a115c:	f7ff f95a 	bl	80a0414 <_ZN10CloudClass7processEv>
//+    currentStr = String(Current[0][0],1)+" "+String( PhaseVoltage[0][1],1)+" "+String(LineVoltage[0][2],1)+" "+String(Power[1][0],1)+" "+String( Energy[1],1)+" "+String(Current[1][2],1)+" "+String(Frequency[0],2);
    //currentStr=String(Current[1][2],1)+" "+currentStr.substring(0, max(200, currentStr.length()))
    //currentStr = String(CurrentList[0],1)+" "+String(CurrentList[1],1)+" "+String(CurrentList[2],1)+" "+String(CurrentList[3],1)+" "+String(CurrentList[4],1)+" "+String(CurrentList[5],1)+" "+String(CurrentList[6],1)+" "+String(CurrentList[7],1)+" "+String(CurrentList[8],1)+" "+String(CurrentList[9],1)+" "+String(CurrentList[10],1)+" "+String(CurrentList[11],1)+" "+String(CurrentList[12],1)+" "+String(CurrentList[13],1)+" "+String(CurrentList[14],1)+" "+String(CurrentList[15],1)+" "+String(CurrentList[16],1)+" "+String(CurrentList[17],1)+" "+String(CurrentList[18],1)+" "+String(CurrentList[19],1);
    
    //int Charger =1; //+
    int Charger = readSerialOlimex() + CHARGEROFFSET; //+
 80a1160:	f7ff fb7e 	bl	80a0860 <_Z16readSerialOlimexv>
 80a1164:	4605      	mov	r5, r0
    Particle.process();
 80a1166:	f7ff f955 	bl	80a0414 <_ZN10CloudClass7processEv>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a116a:	f002 f9b3 	bl	80a34d4 <HAL_Timer_Get_Milli_Seconds>
	// 	DEBUGPORT.println(String(Current[1][0]+ Current[1][1]+ Current[1][2]));
    // }
    // counter++;

    // store new measurement value if it is received correctly from energymeter (via the Olimex).
    if(millis()>nextTime[handledCharger] && (Charger==1+CHARGEROFFSET || Charger==2+CHARGEROFFSET)) //+ all the if{}
 80a116e:	4c9e      	ldr	r4, [pc, #632]	; (80a13e8 <loop+0x2b0>)
 80a1170:	4f9e      	ldr	r7, [pc, #632]	; (80a13ec <loop+0x2b4>)
 80a1172:	7823      	ldrb	r3, [r4, #0]
 80a1174:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 80a1178:	4283      	cmp	r3, r0
 80a117a:	d23f      	bcs.n	80a11fc <loop+0xc4>
 80a117c:	3d01      	subs	r5, #1
 80a117e:	2d01      	cmp	r5, #1
 80a1180:	d83c      	bhi.n	80a11fc <loop+0xc4>
    {
        Particle.process();
 80a1182:	f7ff f947 	bl	80a0414 <_ZN10CloudClass7processEv>
        int tempCharger = Charger;
        Charger = handledCharger + 1;
        //if(((activeCharger()==Charger) || (activeCharger() == 3)) && (getUserIdAtSocket(Charger)!="00"))
        //{
            //getUserIdAtSocket(Charger+CHARGEROFFSET);
            add_Measurement(PhaseVoltage[Charger-1][0], PhaseVoltage[Charger-1][1], PhaseVoltage[Charger-1][2], Current[Charger-1][0], Current[Charger-1][1], Current[Charger-1][2], /*Power[Charger-1][0]+Power[Charger-1][1]+Power[Charger-1][2], Energy[Charger-1],*/ Frequency[Charger-1], Time.now(), Charger+CHARGEROFFSET, getUserIdAtSocket(Charger+CHARGEROFFSET));
 80a1186:	230c      	movs	r3, #12
        Charger = handledCharger + 1;
 80a1188:	7822      	ldrb	r2, [r4, #0]
            add_Measurement(PhaseVoltage[Charger-1][0], PhaseVoltage[Charger-1][1], PhaseVoltage[Charger-1][2], Current[Charger-1][0], Current[Charger-1][1], Current[Charger-1][2], /*Power[Charger-1][0]+Power[Charger-1][1]+Power[Charger-1][2], Energy[Charger-1],*/ Frequency[Charger-1], Time.now(), Charger+CHARGEROFFSET, getUserIdAtSocket(Charger+CHARGEROFFSET));
 80a118a:	4d99      	ldr	r5, [pc, #612]	; (80a13f0 <loop+0x2b8>)
 80a118c:	4353      	muls	r3, r2
 80a118e:	18e8      	adds	r0, r5, r3
 80a1190:	f855 8003 	ldr.w	r8, [r5, r3]
 80a1194:	4d97      	ldr	r5, [pc, #604]	; (80a13f4 <loop+0x2bc>)
 80a1196:	f8d0 9004 	ldr.w	r9, [r0, #4]
 80a119a:	f8d0 a008 	ldr.w	sl, [r0, #8]
 80a119e:	18e8      	adds	r0, r5, r3
 80a11a0:	f855 b003 	ldr.w	fp, [r5, r3]
 80a11a4:	6843      	ldr	r3, [r0, #4]
        Charger = handledCharger + 1;
 80a11a6:	1c56      	adds	r6, r2, #1
            add_Measurement(PhaseVoltage[Charger-1][0], PhaseVoltage[Charger-1][1], PhaseVoltage[Charger-1][2], Current[Charger-1][0], Current[Charger-1][1], Current[Charger-1][2], /*Power[Charger-1][0]+Power[Charger-1][1]+Power[Charger-1][2], Energy[Charger-1],*/ Frequency[Charger-1], Time.now(), Charger+CHARGEROFFSET, getUserIdAtSocket(Charger+CHARGEROFFSET));
 80a11a8:	9306      	str	r3, [sp, #24]
 80a11aa:	6883      	ldr	r3, [r0, #8]
 80a11ac:	4892      	ldr	r0, [pc, #584]	; (80a13f8 <loop+0x2c0>)
 80a11ae:	9309      	str	r3, [sp, #36]	; 0x24
 80a11b0:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 80a11b4:	ad0e      	add	r5, sp, #56	; 0x38
 80a11b6:	9208      	str	r2, [sp, #32]
 80a11b8:	f003 fbd7 	bl	80a496a <_ZN9TimeClass3nowEv>
 80a11bc:	4631      	mov	r1, r6
 80a11be:	9007      	str	r0, [sp, #28]
 80a11c0:	4628      	mov	r0, r5
 80a11c2:	f7ff fc9f 	bl	80a0b04 <_Z17getUserIdAtSocketi>
 80a11c6:	9b07      	ldr	r3, [sp, #28]
 80a11c8:	9a08      	ldr	r2, [sp, #32]
 80a11ca:	9303      	str	r3, [sp, #12]
 80a11cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a11ce:	4649      	mov	r1, r9
 80a11d0:	9301      	str	r3, [sp, #4]
 80a11d2:	9b06      	ldr	r3, [sp, #24]
 80a11d4:	4640      	mov	r0, r8
 80a11d6:	9202      	str	r2, [sp, #8]
 80a11d8:	9300      	str	r3, [sp, #0]
 80a11da:	4652      	mov	r2, sl
 80a11dc:	465b      	mov	r3, fp
 80a11de:	e9cd 6504 	strd	r6, r5, [sp, #16]
 80a11e2:	f7ff fded 	bl	80a0dc0 <_Z15add_Measurementfffffffmi6String>
 80a11e6:	4628      	mov	r0, r5
 80a11e8:	f002 ffa0 	bl	80a412c <_ZN6StringD1Ev>
 80a11ec:	f002 f972 	bl	80a34d4 <HAL_Timer_Get_Milli_Seconds>
        //}
        Charger = tempCharger;
        nextTime[handledCharger] = millis() + 30000; //every 30 sec
 80a11f0:	7823      	ldrb	r3, [r4, #0]
 80a11f2:	f500 40ea 	add.w	r0, r0, #29952	; 0x7500
 80a11f6:	3030      	adds	r0, #48	; 0x30
 80a11f8:	f847 0023 	str.w	r0, [r7, r3, lsl #2]
    }
    
//     run loop very often to check new RFID cards
    Particle.process(); //+
 80a11fc:	f7ff f90a 	bl	80a0414 <_ZN10CloudClass7processEv>
    bool Authorized_Charger1=readRFIDCard(1+CHARGEROFFSET); //+
 80a1200:	2001      	movs	r0, #1
 80a1202:	f7ff fe75 	bl	80a0ef0 <_Z12readRFIDCardi>
    //DEBUGPORT.println(String(LatestStartTime[0]+60));
    //DEBUGPORT.println(String(Time.now()));
    //DEBUGPORT.println((LatestStartTime[0] + 60 < Time.now()),DEC);
    //if ((LatestStartTime[0] + 60 < Time.now()) && (Current[0][0]+ Current[0][1]+ Current[0][2]) < 1)
    //if (((numberOfZeroReadings[0]>10 && (LatestStartTime[0] + 60 < Time.now()))|| ((Time.now()<LatestStartTime[0] + 70)&&(LatestStartTime[0] + 60 < Time.now()))) && (Current[0][0]+ Current[0][1]+ Current[0][2]) < 1)
    if( ((numberOfZeroReadings[0]>10)||(LatestStartTime[0] + 70 > Time.now()) )&& (LatestStartTime[0] + 60 < Time.now()) && (Current[0][0]+ Current[0][1]+ Current[0][2]) < 1)
 80a1206:	4d7d      	ldr	r5, [pc, #500]	; (80a13fc <loop+0x2c4>)
    delay(5);
 80a1208:	2005      	movs	r0, #5
 80a120a:	f003 fbc9 	bl	80a49a0 <delay>
    bool Authorized_Charger2=readRFIDCard(2+CHARGEROFFSET); //+
 80a120e:	2002      	movs	r0, #2
 80a1210:	f7ff fe6e 	bl	80a0ef0 <_Z12readRFIDCardi>
    if( ((numberOfZeroReadings[0]>10)||(LatestStartTime[0] + 70 > Time.now()) )&& (LatestStartTime[0] + 60 < Time.now()) && (Current[0][0]+ Current[0][1]+ Current[0][2]) < 1)
 80a1214:	682b      	ldr	r3, [r5, #0]
 80a1216:	4c7a      	ldr	r4, [pc, #488]	; (80a1400 <loop+0x2c8>)
 80a1218:	2b0a      	cmp	r3, #10
 80a121a:	f340 80a1 	ble.w	80a1360 <loop+0x228>
 80a121e:	6823      	ldr	r3, [r4, #0]
 80a1220:	f103 063c 	add.w	r6, r3, #60	; 0x3c
 80a1224:	f003 fba1 	bl	80a496a <_ZN9TimeClass3nowEv>
 80a1228:	4286      	cmp	r6, r0
 80a122a:	f0c0 80a2 	bcc.w	80a1372 <loop+0x23a>
    }
    //DEBUGPORT.println(Current[1][0]+ Current[1][1]+ Current[1][2],4);
    //DEBUGPORT.println(String(LatestStartTime[1]+60));
    //DEBUGPORT.println(String(Time.now()));
    //DEBUGPORT.println((LatestStartTime[1] + 60 < Time.now()),DEC);
    if( ((numberOfZeroReadings[1]>10)||(LatestStartTime[1] + 70 > Time.now()) )&& (LatestStartTime[1] + 60 < Time.now()) && (Current[1][0]+ Current[1][1]+ Current[1][2]) < 1)
 80a122e:	686b      	ldr	r3, [r5, #4]
 80a1230:	2b0a      	cmp	r3, #10
 80a1232:	f340 80ce 	ble.w	80a13d2 <loop+0x29a>
 80a1236:	6863      	ldr	r3, [r4, #4]
 80a1238:	f103 053c 	add.w	r5, r3, #60	; 0x3c
 80a123c:	f003 fb95 	bl	80a496a <_ZN9TimeClass3nowEv>
 80a1240:	4285      	cmp	r5, r0
 80a1242:	f0c0 80f1 	bcc.w	80a1428 <loop+0x2f0>
        DEBUGPORT.println("Timeout charger"+String(CHARGEROFFSET+2));
        digitalWrite(AUTHENTICATION_CAR2,LOW);
        //digitalWrite(D7,LOW);
        LatestStartTime[1]=2147483548;
    }
    delay(100);
 80a1246:	2064      	movs	r0, #100	; 0x64
 80a1248:	f003 fbaa 	bl	80a49a0 <delay>


    /////!!!! Check how often these run 
    //Reset the UIDtag if there is no car charging and last wsipe was over 1min ago
    if ((activeCharger()!=1)&&(activeCharger()!=3)&&(UIDtagCharger1!="No ID")&& (LatestStartTime[0] + 60 < Time.now()) ){
 80a124c:	f7ff fb4c 	bl	80a08e8 <_Z13activeChargerv>
 80a1250:	f020 0002 	bic.w	r0, r0, #2
 80a1254:	2801      	cmp	r0, #1
 80a1256:	d039      	beq.n	80a12cc <loop+0x194>
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
 80a1258:	496a      	ldr	r1, [pc, #424]	; (80a1404 <loop+0x2cc>)
 80a125a:	486b      	ldr	r0, [pc, #428]	; (80a1408 <loop+0x2d0>)
 80a125c:	f003 f8bb 	bl	80a43d6 <_ZNK6String6equalsEPKc>
 80a1260:	2800      	cmp	r0, #0
 80a1262:	d133      	bne.n	80a12cc <loop+0x194>
 80a1264:	6823      	ldr	r3, [r4, #0]
 80a1266:	f103 053c 	add.w	r5, r3, #60	; 0x3c
 80a126a:	f003 fb7e 	bl	80a496a <_ZN9TimeClass3nowEv>
 80a126e:	4285      	cmp	r5, r0
 80a1270:	d22c      	bcs.n	80a12cc <loop+0x194>
        
        JsonWriterStatic<512> jsonMessage;
 80a1272:	a80e      	add	r0, sp, #56	; 0x38
 80a1274:	f7ff fd52 	bl	80a0d1c <_ZN16JsonWriterStaticILj512EEC1Ev>
 80a1278:	a80e      	add	r0, sp, #56	; 0x38
 80a127a:	f7ff fb31 	bl	80a08e0 <_ZN10JsonWriter11startObjectEv>

        {
		JsonWriterAutoObject obj(&jsonMessage);
		
		jsonMessage.insertKeyValue("UserId", UIDtagCharger1);
 80a127e:	4962      	ldr	r1, [pc, #392]	; (80a1408 <loop+0x2d0>)
 80a1280:	a80a      	add	r0, sp, #40	; 0x28
 80a1282:	f002 ffdc 	bl	80a423e <_ZN6StringC1ERKS_>
 80a1286:	4961      	ldr	r1, [pc, #388]	; (80a140c <loop+0x2d4>)
 80a1288:	aa0a      	add	r2, sp, #40	; 0x28
 80a128a:	a80e      	add	r0, sp, #56	; 0x38
 80a128c:	f7ff fd69 	bl	80a0d62 <_ZN10JsonWriter14insertKeyValueI6StringEEvPKcT_>
 80a1290:	a80a      	add	r0, sp, #40	; 0x28
 80a1292:	f002 ff4b 	bl	80a412c <_ZN6StringD1Ev>
        jsonMessage.insertKeyValue("Charger", (1 + CHARGEROFFSET));
 80a1296:	2201      	movs	r2, #1
 80a1298:	495d      	ldr	r1, [pc, #372]	; (80a1410 <loop+0x2d8>)
 80a129a:	a80e      	add	r0, sp, #56	; 0x38
 80a129c:	f7ff fd78 	bl	80a0d90 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
		jsonMessage.insertKeyValue("StartTime", Time.now());
 80a12a0:	f003 fb63 	bl	80a496a <_ZN9TimeClass3nowEv>
 80a12a4:	495b      	ldr	r1, [pc, #364]	; (80a1414 <loop+0x2dc>)
 80a12a6:	4602      	mov	r2, r0
 80a12a8:	a80e      	add	r0, sp, #56	; 0x38
 80a12aa:	f7ff fe09 	bl	80a0ec0 <_ZN10JsonWriter14insertKeyValueIlEEvPKcT_>
		jw->finishObjectOrArray();
 80a12ae:	a80e      	add	r0, sp, #56	; 0x38
 80a12b0:	f001 fda7 	bl	80a2e02 <_ZN10JsonWriter19finishObjectOrArrayEv>
	    }
        client.publish("HANevse/updateUser", jsonMessage.getBuffer());
 80a12b4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80a12b6:	4958      	ldr	r1, [pc, #352]	; (80a1418 <loop+0x2e0>)
 80a12b8:	484a      	ldr	r0, [pc, #296]	; (80a13e4 <loop+0x2ac>)
 80a12ba:	f001 f9d4 	bl	80a2666 <_ZN4MQTT7publishEPKcS1_>

        UIDtagCharger1="No ID";
 80a12be:	4951      	ldr	r1, [pc, #324]	; (80a1404 <loop+0x2cc>)
 80a12c0:	4851      	ldr	r0, [pc, #324]	; (80a1408 <loop+0x2d0>)
 80a12c2:	f002 ffcf 	bl	80a4264 <_ZN6StringaSEPKc>
        JsonWriterStatic<512> jsonMessage;
 80a12c6:	a80e      	add	r0, sp, #56	; 0x38
 80a12c8:	f7fe ffea 	bl	80a02a0 <_ZN16JsonWriterStaticILj512EED1Ev>
    }

        
    if ((activeCharger()!=2)&&(activeCharger()!=3)&&(UIDtagCharger2!="No ID")&& (LatestStartTime[1] + 60 < Time.now()) ){
 80a12cc:	f7ff fb0c 	bl	80a08e8 <_Z13activeChargerv>
 80a12d0:	3802      	subs	r0, #2
 80a12d2:	2801      	cmp	r0, #1
 80a12d4:	d938      	bls.n	80a1348 <loop+0x210>
 80a12d6:	494b      	ldr	r1, [pc, #300]	; (80a1404 <loop+0x2cc>)
 80a12d8:	4850      	ldr	r0, [pc, #320]	; (80a141c <loop+0x2e4>)
 80a12da:	f003 f87c 	bl	80a43d6 <_ZNK6String6equalsEPKc>
 80a12de:	2800      	cmp	r0, #0
 80a12e0:	d132      	bne.n	80a1348 <loop+0x210>
 80a12e2:	6864      	ldr	r4, [r4, #4]
 80a12e4:	f003 fb41 	bl	80a496a <_ZN9TimeClass3nowEv>
 80a12e8:	343c      	adds	r4, #60	; 0x3c
 80a12ea:	4284      	cmp	r4, r0
 80a12ec:	d22c      	bcs.n	80a1348 <loop+0x210>
        
        JsonWriterStatic<512> jsonMessage;
 80a12ee:	a80e      	add	r0, sp, #56	; 0x38
 80a12f0:	f7ff fd14 	bl	80a0d1c <_ZN16JsonWriterStaticILj512EEC1Ev>
		jw->startObject();
 80a12f4:	a80e      	add	r0, sp, #56	; 0x38
 80a12f6:	f7ff faf3 	bl	80a08e0 <_ZN10JsonWriter11startObjectEv>

        {
		JsonWriterAutoObject obj(&jsonMessage);
		
		jsonMessage.insertKeyValue("UserId", UIDtagCharger2);
 80a12fa:	4948      	ldr	r1, [pc, #288]	; (80a141c <loop+0x2e4>)
 80a12fc:	a80a      	add	r0, sp, #40	; 0x28
 80a12fe:	f002 ff9e 	bl	80a423e <_ZN6StringC1ERKS_>
 80a1302:	4942      	ldr	r1, [pc, #264]	; (80a140c <loop+0x2d4>)
 80a1304:	aa0a      	add	r2, sp, #40	; 0x28
 80a1306:	a80e      	add	r0, sp, #56	; 0x38
 80a1308:	f7ff fd2b 	bl	80a0d62 <_ZN10JsonWriter14insertKeyValueI6StringEEvPKcT_>
 80a130c:	a80a      	add	r0, sp, #40	; 0x28
 80a130e:	f002 ff0d 	bl	80a412c <_ZN6StringD1Ev>
        jsonMessage.insertKeyValue("Charger", (2 + CHARGEROFFSET));
 80a1312:	2202      	movs	r2, #2
 80a1314:	493e      	ldr	r1, [pc, #248]	; (80a1410 <loop+0x2d8>)
 80a1316:	a80e      	add	r0, sp, #56	; 0x38
 80a1318:	f7ff fd3a 	bl	80a0d90 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
		jsonMessage.insertKeyValue("StartTime", Time.now());
 80a131c:	f003 fb25 	bl	80a496a <_ZN9TimeClass3nowEv>
 80a1320:	493c      	ldr	r1, [pc, #240]	; (80a1414 <loop+0x2dc>)
 80a1322:	4602      	mov	r2, r0
 80a1324:	a80e      	add	r0, sp, #56	; 0x38
 80a1326:	f7ff fdcb 	bl	80a0ec0 <_ZN10JsonWriter14insertKeyValueIlEEvPKcT_>
		jw->finishObjectOrArray();
 80a132a:	a80e      	add	r0, sp, #56	; 0x38
 80a132c:	f001 fd69 	bl	80a2e02 <_ZN10JsonWriter19finishObjectOrArrayEv>
	    }
        client.publish("HANevse/updateUser", jsonMessage.getBuffer());
 80a1330:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80a1332:	4939      	ldr	r1, [pc, #228]	; (80a1418 <loop+0x2e0>)
 80a1334:	482b      	ldr	r0, [pc, #172]	; (80a13e4 <loop+0x2ac>)
 80a1336:	f001 f996 	bl	80a2666 <_ZN4MQTT7publishEPKcS1_>

        UIDtagCharger2="No ID";
 80a133a:	4932      	ldr	r1, [pc, #200]	; (80a1404 <loop+0x2cc>)
 80a133c:	4837      	ldr	r0, [pc, #220]	; (80a141c <loop+0x2e4>)
 80a133e:	f002 ff91 	bl	80a4264 <_ZN6StringaSEPKc>
        JsonWriterStatic<512> jsonMessage;
 80a1342:	a80e      	add	r0, sp, #56	; 0x38
 80a1344:	f7fe ffac 	bl	80a02a0 <_ZN16JsonWriterStaticILj512EED1Ev>
    }
            
    handledCharger = !handledCharger;
 80a1348:	4a27      	ldr	r2, [pc, #156]	; (80a13e8 <loop+0x2b0>)
 80a134a:	7813      	ldrb	r3, [r2, #0]
 80a134c:	f083 0301 	eor.w	r3, r3, #1
 80a1350:	7013      	strb	r3, [r2, #0]
 80a1352:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 80a1356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else reconnect();
 80a135a:	f7ff fc7f 	bl	80a0c5c <_Z9reconnectv>
 80a135e:	e6fd      	b.n	80a115c <loop+0x24>
    if( ((numberOfZeroReadings[0]>10)||(LatestStartTime[0] + 70 > Time.now()) )&& (LatestStartTime[0] + 60 < Time.now()) && (Current[0][0]+ Current[0][1]+ Current[0][2]) < 1)
 80a1360:	6823      	ldr	r3, [r4, #0]
 80a1362:	f103 0646 	add.w	r6, r3, #70	; 0x46
 80a1366:	f003 fb00 	bl	80a496a <_ZN9TimeClass3nowEv>
 80a136a:	4286      	cmp	r6, r0
 80a136c:	f63f af57 	bhi.w	80a121e <loop+0xe6>
 80a1370:	e75d      	b.n	80a122e <loop+0xf6>
 80a1372:	4e20      	ldr	r6, [pc, #128]	; (80a13f4 <loop+0x2bc>)
 80a1374:	6871      	ldr	r1, [r6, #4]
 80a1376:	6830      	ldr	r0, [r6, #0]
 80a1378:	f004 fe36 	bl	80a5fe8 <__addsf3>
 80a137c:	68b1      	ldr	r1, [r6, #8]
 80a137e:	f004 fe33 	bl	80a5fe8 <__addsf3>
 80a1382:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80a1386:	f005 f8d5 	bl	80a6534 <__aeabi_fcmplt>
 80a138a:	2800      	cmp	r0, #0
 80a138c:	f43f af4f 	beq.w	80a122e <loop+0xf6>
        DEBUGPORT.println("Timeout charger"+String(CHARGEROFFSET+1));
 80a1390:	f003 fcc6 	bl	80a4d20 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
 80a1394:	4922      	ldr	r1, [pc, #136]	; (80a1420 <loop+0x2e8>)
 80a1396:	4606      	mov	r6, r0
 80a1398:	a80e      	add	r0, sp, #56	; 0x38
 80a139a:	f002 ff11 	bl	80a41c0 <_ZN6StringC1EPKc>
 80a139e:	220a      	movs	r2, #10
 80a13a0:	2101      	movs	r1, #1
 80a13a2:	a80a      	add	r0, sp, #40	; 0x28
 80a13a4:	f002 ff81 	bl	80a42aa <_ZN6StringC1Eih>
 80a13a8:	a90a      	add	r1, sp, #40	; 0x28
 80a13aa:	a80e      	add	r0, sp, #56	; 0x38
 80a13ac:	f002 fff3 	bl	80a4396 <_ZplRK15StringSumHelperRK6String>
 80a13b0:	6801      	ldr	r1, [r0, #0]
 80a13b2:	4630      	mov	r0, r6
 80a13b4:	f003 f889 	bl	80a44ca <_ZN5Print7printlnEPKc>
 80a13b8:	a80a      	add	r0, sp, #40	; 0x28
 80a13ba:	f002 feb7 	bl	80a412c <_ZN6StringD1Ev>
class StringSumHelper : public String
 80a13be:	a80e      	add	r0, sp, #56	; 0x38
 80a13c0:	f002 feb4 	bl	80a412c <_ZN6StringD1Ev>
        digitalWrite(AUTHENTICATION_CAR1,LOW);
 80a13c4:	2100      	movs	r1, #0
 80a13c6:	2005      	movs	r0, #5
 80a13c8:	f003 ffb1 	bl	80a532e <digitalWrite>
        LatestStartTime[0]=2147483548;
 80a13cc:	4b15      	ldr	r3, [pc, #84]	; (80a1424 <loop+0x2ec>)
 80a13ce:	6023      	str	r3, [r4, #0]
 80a13d0:	e72d      	b.n	80a122e <loop+0xf6>
    if( ((numberOfZeroReadings[1]>10)||(LatestStartTime[1] + 70 > Time.now()) )&& (LatestStartTime[1] + 60 < Time.now()) && (Current[1][0]+ Current[1][1]+ Current[1][2]) < 1)
 80a13d2:	6863      	ldr	r3, [r4, #4]
 80a13d4:	f103 0546 	add.w	r5, r3, #70	; 0x46
 80a13d8:	f003 fac7 	bl	80a496a <_ZN9TimeClass3nowEv>
 80a13dc:	4285      	cmp	r5, r0
 80a13de:	f63f af2a 	bhi.w	80a1236 <loop+0xfe>
 80a13e2:	e730      	b.n	80a1246 <loop+0x10e>
 80a13e4:	200004b8 	.word	0x200004b8
 80a13e8:	20000520 	.word	0x20000520
 80a13ec:	20000000 	.word	0x20000000
 80a13f0:	200002ec 	.word	0x200002ec
 80a13f4:	20000254 	.word	0x20000254
 80a13f8:	200002c4 	.word	0x200002c4
 80a13fc:	20000540 	.word	0x20000540
 80a1400:	200002cc 	.word	0x200002cc
 80a1404:	080a82db 	.word	0x080a82db
 80a1408:	20000334 	.word	0x20000334
 80a140c:	080a852d 	.word	0x080a852d
 80a1410:	080a8534 	.word	0x080a8534
 80a1414:	080a853c 	.word	0x080a853c
 80a1418:	080a8546 	.word	0x080a8546
 80a141c:	20000344 	.word	0x20000344
 80a1420:	080a8578 	.word	0x080a8578
 80a1424:	7fffff9c 	.word	0x7fffff9c
 80a1428:	4d17      	ldr	r5, [pc, #92]	; (80a1488 <loop+0x350>)
 80a142a:	6929      	ldr	r1, [r5, #16]
 80a142c:	68e8      	ldr	r0, [r5, #12]
 80a142e:	f004 fddb 	bl	80a5fe8 <__addsf3>
 80a1432:	6969      	ldr	r1, [r5, #20]
 80a1434:	f004 fdd8 	bl	80a5fe8 <__addsf3>
 80a1438:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80a143c:	f005 f87a 	bl	80a6534 <__aeabi_fcmplt>
 80a1440:	2800      	cmp	r0, #0
 80a1442:	f43f af00 	beq.w	80a1246 <loop+0x10e>
        DEBUGPORT.println("Timeout charger"+String(CHARGEROFFSET+2));
 80a1446:	f003 fc6b 	bl	80a4d20 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
 80a144a:	4910      	ldr	r1, [pc, #64]	; (80a148c <loop+0x354>)
 80a144c:	4605      	mov	r5, r0
 80a144e:	a80e      	add	r0, sp, #56	; 0x38
 80a1450:	f002 feb6 	bl	80a41c0 <_ZN6StringC1EPKc>
 80a1454:	220a      	movs	r2, #10
 80a1456:	2102      	movs	r1, #2
 80a1458:	a80a      	add	r0, sp, #40	; 0x28
 80a145a:	f002 ff26 	bl	80a42aa <_ZN6StringC1Eih>
 80a145e:	a90a      	add	r1, sp, #40	; 0x28
 80a1460:	a80e      	add	r0, sp, #56	; 0x38
 80a1462:	f002 ff98 	bl	80a4396 <_ZplRK15StringSumHelperRK6String>
 80a1466:	6801      	ldr	r1, [r0, #0]
 80a1468:	4628      	mov	r0, r5
 80a146a:	f003 f82e 	bl	80a44ca <_ZN5Print7printlnEPKc>
 80a146e:	a80a      	add	r0, sp, #40	; 0x28
 80a1470:	f002 fe5c 	bl	80a412c <_ZN6StringD1Ev>
class StringSumHelper : public String
 80a1474:	a80e      	add	r0, sp, #56	; 0x38
 80a1476:	f002 fe59 	bl	80a412c <_ZN6StringD1Ev>
        digitalWrite(AUTHENTICATION_CAR2,LOW);
 80a147a:	2100      	movs	r1, #0
 80a147c:	2006      	movs	r0, #6
 80a147e:	f003 ff56 	bl	80a532e <digitalWrite>
        LatestStartTime[1]=2147483548;
 80a1482:	4b03      	ldr	r3, [pc, #12]	; (80a1490 <loop+0x358>)
 80a1484:	6063      	str	r3, [r4, #4]
 80a1486:	e6de      	b.n	80a1246 <loop+0x10e>
 80a1488:	20000254 	.word	0x20000254
 80a148c:	080a8578 	.word	0x080a8578
 80a1490:	7fffff9c 	.word	0x7fffff9c

080a1494 <_ZN10CloudClass8functionIA13_cJPFi6StringEEEEbRKT_DpT0_>:
    static inline bool function(const T &name, Types ... args)
 80a1494:	4602      	mov	r2, r0
        return register_function(call_raw_user_function, (void*)func, funcKey);
 80a1496:	4801      	ldr	r0, [pc, #4]	; (80a149c <_ZN10CloudClass8functionIA13_cJPFi6StringEEEEbRKT_DpT0_+0x8>)
 80a1498:	f003 bb5e 	b.w	80a4b58 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 80a149c:	080a4b2d 	.word	0x080a4b2d

080a14a0 <setup>:
void setup() {
 80a14a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    DEBUGPORT.begin(115200); 
 80a14a2:	f003 fc3d 	bl	80a4d20 <_Z16_fetch_usbserialv>
 80a14a6:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80a14aa:	f003 fc2d 	bl	80a4d08 <_ZN9USBSerial5beginEl>
    Serial1.begin(9600);
 80a14ae:	f003 fce9 	bl	80a4e84 <_Z22__fetch_global_Serial1v>
 80a14b2:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a14b6:	f003 fce1 	bl	80a4e7c <_ZN11USARTSerial5beginEm>
    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a14ba:	f002 fa33 	bl	80a3924 <spark_cloud_flag_connected>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80a14be:	b910      	cbnz	r0, 80a14c6 <setup+0x26>
            spark_process();
 80a14c0:	f002 fa20 	bl	80a3904 <spark_process>
        while (_while() && !_condition()) {
 80a14c4:	e7f9      	b.n	80a14ba <setup+0x1a>
 80a14c6:	f002 fa2d 	bl	80a3924 <spark_cloud_flag_connected>
    pinMode(AUTHENTICATION_CAR1, OUTPUT); //pinMode(D1, OUTPUT); //Charger1_Authorized
 80a14ca:	2101      	movs	r1, #1
 80a14cc:	2005      	movs	r0, #5
 80a14ce:	f003 ff1d 	bl	80a530c <pinMode>
    pinMode(AUTHENTICATION_CAR2, OUTPUT); //pinMode(D2, OUTPUT); //Charger2_Authorized
 80a14d2:	2101      	movs	r1, #1
 80a14d4:	2006      	movs	r0, #6
 80a14d6:	f003 ff19 	bl	80a530c <pinMode>
    pinMode(PILOT_FEEDBACK_CAR_1,INPUT);
 80a14da:	2100      	movs	r1, #0
 80a14dc:	2010      	movs	r0, #16
 80a14de:	f003 ff15 	bl	80a530c <pinMode>
    pinMode(PILOT_FEEDBACK_CAR_2,INPUT);
 80a14e2:	2100      	movs	r1, #0
 80a14e4:	2011      	movs	r0, #17
 80a14e6:	f003 ff11 	bl	80a530c <pinMode>
    pinMode(WAKEUP_OLIMEX, OUTPUT);
 80a14ea:	2101      	movs	r1, #1
 80a14ec:	2002      	movs	r0, #2
 80a14ee:	f003 ff0d 	bl	80a530c <pinMode>
    pinMode(RESET_OLIMEX, OUTPUT);
 80a14f2:	2101      	movs	r1, #1
 80a14f4:	2004      	movs	r0, #4
 80a14f6:	f003 ff09 	bl	80a530c <pinMode>
    pinMode(D7, OUTPUT);
 80a14fa:	2101      	movs	r1, #1
 80a14fc:	2007      	movs	r0, #7
 80a14fe:	f003 ff05 	bl	80a530c <pinMode>
    digitalWrite(AUTHENTICATION_CAR1, LOW); //digitalWrite(D1,LOW);
 80a1502:	2100      	movs	r1, #0
 80a1504:	2005      	movs	r0, #5
 80a1506:	f003 ff12 	bl	80a532e <digitalWrite>
    digitalWrite(AUTHENTICATION_CAR2, LOW);//digitalWrite(D2,LOW);
 80a150a:	2100      	movs	r1, #0
 80a150c:	2006      	movs	r0, #6
 80a150e:	f003 ff0e 	bl	80a532e <digitalWrite>
    digitalWrite(WAKEUP_OLIMEX, LOW);
 80a1512:	2100      	movs	r1, #0
 80a1514:	2002      	movs	r0, #2
 80a1516:	f003 ff0a 	bl	80a532e <digitalWrite>
    digitalWrite(RESET_OLIMEX, HIGH);
 80a151a:	2101      	movs	r1, #1
 80a151c:	2004      	movs	r0, #4
 80a151e:	f003 ff06 	bl	80a532e <digitalWrite>
    digitalWrite(D7, LOW);
 80a1522:	2100      	movs	r1, #0
 80a1524:	2007      	movs	r0, #7
 80a1526:	f003 ff02 	bl	80a532e <digitalWrite>
    initRFID(""); //+
 80a152a:	4921      	ldr	r1, [pc, #132]	; (80a15b0 <setup+0x110>)
 80a152c:	4668      	mov	r0, sp
 80a152e:	f002 fe47 	bl	80a41c0 <_ZN6StringC1EPKc>
 80a1532:	4668      	mov	r0, sp
 80a1534:	f7fe ff14 	bl	80a0360 <_Z8initRFID6String>
 80a1538:	4668      	mov	r0, sp
 80a153a:	f002 fdf7 	bl	80a412c <_ZN6StringD1Ev>
        return register_function(call_raw_user_function, (void*)func, funcKey);
 80a153e:	4a1d      	ldr	r2, [pc, #116]	; (80a15b4 <setup+0x114>)
 80a1540:	491d      	ldr	r1, [pc, #116]	; (80a15b8 <setup+0x118>)
 80a1542:	481e      	ldr	r0, [pc, #120]	; (80a15bc <setup+0x11c>)
 80a1544:	f003 fb08 	bl	80a4b58 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
    Particle.function("maxCurrentC1",maxCurrentC1);
 80a1548:	491d      	ldr	r1, [pc, #116]	; (80a15c0 <setup+0x120>)
 80a154a:	481e      	ldr	r0, [pc, #120]	; (80a15c4 <setup+0x124>)
 80a154c:	f7ff ffa2 	bl	80a1494 <_ZN10CloudClass8functionIA13_cJPFi6StringEEEEbRKT_DpT0_>
    Particle.function("maxCurrentC2",maxCurrentC2);
 80a1550:	491d      	ldr	r1, [pc, #116]	; (80a15c8 <setup+0x128>)
 80a1552:	481e      	ldr	r0, [pc, #120]	; (80a15cc <setup+0x12c>)
 80a1554:	f7ff ff9e 	bl	80a1494 <_ZN10CloudClass8functionIA13_cJPFi6StringEEEEbRKT_DpT0_>
 80a1558:	4a1d      	ldr	r2, [pc, #116]	; (80a15d0 <setup+0x130>)
 80a155a:	491e      	ldr	r1, [pc, #120]	; (80a15d4 <setup+0x134>)
 80a155c:	4817      	ldr	r0, [pc, #92]	; (80a15bc <setup+0x11c>)
 80a155e:	f003 fafb 	bl	80a4b58 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
    Particle.function("progModeOlmx",progModeOlmx);
 80a1562:	491d      	ldr	r1, [pc, #116]	; (80a15d8 <setup+0x138>)
 80a1564:	481d      	ldr	r0, [pc, #116]	; (80a15dc <setup+0x13c>)
 80a1566:	f7ff ff95 	bl	80a1494 <_ZN10CloudClass8functionIA13_cJPFi6StringEEEEbRKT_DpT0_>
    Particle.function("resetParticl",resetParticle);
 80a156a:	491d      	ldr	r1, [pc, #116]	; (80a15e0 <setup+0x140>)
 80a156c:	481d      	ldr	r0, [pc, #116]	; (80a15e4 <setup+0x144>)
 80a156e:	f7ff ff91 	bl	80a1494 <_ZN10CloudClass8functionIA13_cJPFi6StringEEEEbRKT_DpT0_>
 80a1572:	4a1d      	ldr	r2, [pc, #116]	; (80a15e8 <setup+0x148>)
 80a1574:	491d      	ldr	r1, [pc, #116]	; (80a15ec <setup+0x14c>)
 80a1576:	4811      	ldr	r0, [pc, #68]	; (80a15bc <setup+0x11c>)
 80a1578:	f003 faee 	bl	80a4b58 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 80a157c:	4a1c      	ldr	r2, [pc, #112]	; (80a15f0 <setup+0x150>)
 80a157e:	491d      	ldr	r1, [pc, #116]	; (80a15f4 <setup+0x154>)
 80a1580:	480e      	ldr	r0, [pc, #56]	; (80a15bc <setup+0x11c>)
 80a1582:	f003 fae9 	bl	80a4b58 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
        return _variable(varKey, &var, STRING);
 80a1586:	491c      	ldr	r1, [pc, #112]	; (80a15f8 <setup+0x158>)
 80a1588:	481c      	ldr	r0, [pc, #112]	; (80a15fc <setup+0x15c>)
 80a158a:	f7fe fed7 	bl	80a033c <_ZN10CloudClass9_variableIcEEbPKT_PK6StringRK17CloudVariableTypeIPKcvE.isra.0>
 80a158e:	491c      	ldr	r1, [pc, #112]	; (80a1600 <setup+0x160>)
 80a1590:	481c      	ldr	r0, [pc, #112]	; (80a1604 <setup+0x164>)
 80a1592:	f7fe fed3 	bl	80a033c <_ZN10CloudClass9_variableIcEEbPKT_PK6StringRK17CloudVariableTypeIPKcvE.isra.0>
 80a1596:	491c      	ldr	r1, [pc, #112]	; (80a1608 <setup+0x168>)
 80a1598:	481c      	ldr	r0, [pc, #112]	; (80a160c <setup+0x16c>)
 80a159a:	f7fe fecf 	bl	80a033c <_ZN10CloudClass9_variableIcEEbPKT_PK6StringRK17CloudVariableTypeIPKcvE.isra.0>
    Particle.process();
 80a159e:	f7fe ff39 	bl	80a0414 <_ZN10CloudClass7processEv>
    Time.zone(1); //Dutch time zone
 80a15a2:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80a15a6:	f003 f8bf 	bl	80a4728 <_ZN9TimeClass4zoneEf>
}
 80a15aa:	b005      	add	sp, #20
 80a15ac:	f85d fb04 	ldr.w	pc, [sp], #4
 80a15b0:	080a89a0 	.word	0x080a89a0
 80a15b4:	080a8588 	.word	0x080a8588
 80a15b8:	080a02dd 	.word	0x080a02dd
 80a15bc:	080a4b2d 	.word	0x080a4b2d
 80a15c0:	080a0141 	.word	0x080a0141
 80a15c4:	080a8593 	.word	0x080a8593
 80a15c8:	080a01f1 	.word	0x080a01f1
 80a15cc:	080a85a0 	.word	0x080a85a0
 80a15d0:	080a844f 	.word	0x080a844f
 80a15d4:	080a00bb 	.word	0x080a00bb
 80a15d8:	080a00d9 	.word	0x080a00d9
 80a15dc:	080a85ad 	.word	0x080a85ad
 80a15e0:	080a0139 	.word	0x080a0139
 80a15e4:	080a85ba 	.word	0x080a85ba
 80a15e8:	080a85c7 	.word	0x080a85c7
 80a15ec:	080a011d 	.word	0x080a011d
 80a15f0:	080a85d2 	.word	0x080a85d2
 80a15f4:	080a0361 	.word	0x080a0361
 80a15f8:	20000510 	.word	0x20000510
 80a15fc:	080a85db 	.word	0x080a85db
 80a1600:	20000320 	.word	0x20000320
 80a1604:	080a85e6 	.word	0x080a85e6
 80a1608:	20000548 	.word	0x20000548
 80a160c:	080a85ef 	.word	0x080a85ef

080a1610 <_GLOBAL__sub_I_readnextLine>:
 80a1610:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
String UIDtagCharger1="No ID";
 80a1612:	4f2c      	ldr	r7, [pc, #176]	; (80a16c4 <_GLOBAL__sub_I_readnextLine+0xb4>)
 80a1614:	4e2c      	ldr	r6, [pc, #176]	; (80a16c8 <_GLOBAL__sub_I_readnextLine+0xb8>)
 80a1616:	4c2d      	ldr	r4, [pc, #180]	; (80a16cc <_GLOBAL__sub_I_readnextLine+0xbc>)
 80a1618:	4d2d      	ldr	r5, [pc, #180]	; (80a16d0 <_GLOBAL__sub_I_readnextLine+0xc0>)
 80a161a:	4639      	mov	r1, r7
 80a161c:	4630      	mov	r0, r6
 80a161e:	f002 fdcf 	bl	80a41c0 <_ZN6StringC1EPKc>
 80a1622:	4630      	mov	r0, r6
String UIDtagCharger2="No ID";
 80a1624:	4e2b      	ldr	r6, [pc, #172]	; (80a16d4 <_GLOBAL__sub_I_readnextLine+0xc4>)
String UIDtagCharger1="No ID";
 80a1626:	4622      	mov	r2, r4
 80a1628:	4629      	mov	r1, r5
 80a162a:	f003 ff05 	bl	80a5438 <__aeabi_atexit>
String UIDtagCharger2="No ID";
 80a162e:	4639      	mov	r1, r7
 80a1630:	4630      	mov	r0, r6
 80a1632:	f002 fdc5 	bl	80a41c0 <_ZN6StringC1EPKc>
 80a1636:	4622      	mov	r2, r4
 80a1638:	4629      	mov	r1, r5
 80a163a:	4630      	mov	r0, r6
 80a163c:	f003 fefc 	bl	80a5438 <__aeabi_atexit>
    bool clearCredentials(void) {
        return network_clear_credentials(*this, 0, NULL, NULL);
    }

    int selectAntenna(WLanSelectAntenna_TypeDef antenna) {
        return wlan_select_antenna(antenna);
 80a1640:	2001      	movs	r0, #1
 80a1642:	f002 f8a9 	bl	80a3798 <wlan_select_antenna>
MQTT client("broker.hivemq.com", 1883, MQTT_DEFAULT_KEEPALIVE, callback, 512);
 80a1646:	f44f 7300 	mov.w	r3, #512	; 0x200
 80a164a:	4e23      	ldr	r6, [pc, #140]	; (80a16d8 <_GLOBAL__sub_I_readnextLine+0xc8>)
 80a164c:	9301      	str	r3, [sp, #4]
 80a164e:	4b23      	ldr	r3, [pc, #140]	; (80a16dc <_GLOBAL__sub_I_readnextLine+0xcc>)
 80a1650:	f240 725b 	movw	r2, #1883	; 0x75b
 80a1654:	9300      	str	r3, [sp, #0]
 80a1656:	4630      	mov	r0, r6
 80a1658:	230f      	movs	r3, #15
 80a165a:	4921      	ldr	r1, [pc, #132]	; (80a16e0 <_GLOBAL__sub_I_readnextLine+0xd0>)
 80a165c:	f000 fd9c 	bl	80a2198 <_ZN4MQTTC1EPctiPFvS0_PhjEi>
 80a1660:	4630      	mov	r0, r6
String test = "0";
 80a1662:	4e20      	ldr	r6, [pc, #128]	; (80a16e4 <_GLOBAL__sub_I_readnextLine+0xd4>)
MQTT client("broker.hivemq.com", 1883, MQTT_DEFAULT_KEEPALIVE, callback, 512);
 80a1664:	4622      	mov	r2, r4
 80a1666:	4920      	ldr	r1, [pc, #128]	; (80a16e8 <_GLOBAL__sub_I_readnextLine+0xd8>)
 80a1668:	f003 fee6 	bl	80a5438 <__aeabi_atexit>
String test = "0";
 80a166c:	4630      	mov	r0, r6
 80a166e:	491f      	ldr	r1, [pc, #124]	; (80a16ec <_GLOBAL__sub_I_readnextLine+0xdc>)
 80a1670:	f002 fda6 	bl	80a41c0 <_ZN6StringC1EPKc>
 80a1674:	4622      	mov	r2, r4
 80a1676:	4629      	mov	r1, r5
 80a1678:	4630      	mov	r0, r6
 80a167a:	f003 fedd 	bl	80a5438 <__aeabi_atexit>
String ShareVar;
 80a167e:	4f1c      	ldr	r7, [pc, #112]	; (80a16f0 <_GLOBAL__sub_I_readnextLine+0xe0>)
 80a1680:	4e1c      	ldr	r6, [pc, #112]	; (80a16f4 <_GLOBAL__sub_I_readnextLine+0xe4>)
MFRC522 mfrc522_Charger1(SS_PIN_CHARGER1, RST_PIN);   // Create MFRC522 instance.
 80a1682:	220a      	movs	r2, #10
 80a1684:	210b      	movs	r1, #11
 80a1686:	481c      	ldr	r0, [pc, #112]	; (80a16f8 <_GLOBAL__sub_I_readnextLine+0xe8>)
 80a1688:	f000 f95e 	bl	80a1948 <_ZN7MFRC522C1Ehh>
MFRC522 mfrc522_Charger2(SS_PIN_CHARGER2, RST_PIN);   // Create MFRC522 instance.
 80a168c:	220a      	movs	r2, #10
 80a168e:	210c      	movs	r1, #12
 80a1690:	481a      	ldr	r0, [pc, #104]	; (80a16fc <_GLOBAL__sub_I_readnextLine+0xec>)
 80a1692:	f000 f959 	bl	80a1948 <_ZN7MFRC522C1Ehh>
String ShareVar;
 80a1696:	4639      	mov	r1, r7
 80a1698:	4630      	mov	r0, r6
 80a169a:	f002 fd91 	bl	80a41c0 <_ZN6StringC1EPKc>
 80a169e:	4630      	mov	r0, r6
String currentStr="";
 80a16a0:	4e17      	ldr	r6, [pc, #92]	; (80a1700 <_GLOBAL__sub_I_readnextLine+0xf0>)
String ShareVar;
 80a16a2:	4622      	mov	r2, r4
 80a16a4:	4629      	mov	r1, r5
 80a16a6:	f003 fec7 	bl	80a5438 <__aeabi_atexit>
String currentStr="";
 80a16aa:	4639      	mov	r1, r7
 80a16ac:	4630      	mov	r0, r6
 80a16ae:	f002 fd87 	bl	80a41c0 <_ZN6StringC1EPKc>
 80a16b2:	4622      	mov	r2, r4
 80a16b4:	4629      	mov	r1, r5
 80a16b6:	4630      	mov	r0, r6
 80a16b8:	b003      	add	sp, #12
 80a16ba:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
String currentStr="";
 80a16be:	f003 bebb 	b.w	80a5438 <__aeabi_atexit>
 80a16c2:	bf00      	nop
 80a16c4:	080a82db 	.word	0x080a82db
 80a16c8:	20000334 	.word	0x20000334
 80a16cc:	20000240 	.word	0x20000240
 80a16d0:	080a412d 	.word	0x080a412d
 80a16d4:	20000344 	.word	0x20000344
 80a16d8:	200004b8 	.word	0x200004b8
 80a16dc:	080a176d 	.word	0x080a176d
 80a16e0:	080a85f5 	.word	0x080a85f5
 80a16e4:	20000548 	.word	0x20000548
 80a16e8:	080a295d 	.word	0x080a295d
 80a16ec:	080a850c 	.word	0x080a850c
 80a16f0:	080a89a0 	.word	0x080a89a0
 80a16f4:	20000320 	.word	0x20000320
 80a16f8:	20000521 	.word	0x20000521
 80a16fc:	2000052f 	.word	0x2000052f
 80a1700:	20000510 	.word	0x20000510

080a1704 <_Z19getMeasure_callbackPhj>:
    int setP = 0;
 80a1704:	2300      	movs	r3, #0
void getMeasure_callback(byte* payload, unsigned int length) {
 80a1706:	b530      	push	{r4, r5, lr}
 80a1708:	460d      	mov	r5, r1
 80a170a:	4604      	mov	r4, r0
 80a170c:	b08f      	sub	sp, #60	; 0x3c
    JsonParser parser1;
 80a170e:	a803      	add	r0, sp, #12
    int setP = 0;
 80a1710:	9301      	str	r3, [sp, #4]
    JsonParser parser1;
 80a1712:	f001 f9d3 	bl	80a2abc <_ZN10JsonParserC1Ev>
    parser1.clear();
 80a1716:	a803      	add	r0, sp, #12
 80a1718:	f001 f9cc 	bl	80a2ab4 <_ZN10JsonBuffer5clearEv>
    parser1.addData( (char*)(payload), length); 
 80a171c:	462a      	mov	r2, r5
 80a171e:	4621      	mov	r1, r4
 80a1720:	a803      	add	r0, sp, #12
 80a1722:	f001 f9aa 	bl	80a2a7a <_ZN10JsonBuffer7addDataEPKcj>
    parser1.parse();
 80a1726:	a803      	add	r0, sp, #12
 80a1728:	f001 fe5c 	bl	80a33e4 <_ZN10JsonParser5parseEv>
		if (getValueTokenByKey(getOuterObject(), name, value)) {
 80a172c:	a803      	add	r0, sp, #12
 80a172e:	f001 f9d3 	bl	80a2ad8 <_ZNK10JsonParser14getOuterObjectEv>
 80a1732:	4a0d      	ldr	r2, [pc, #52]	; (80a1768 <_Z19getMeasure_callbackPhj+0x64>)
 80a1734:	4601      	mov	r1, r0
 80a1736:	ab02      	add	r3, sp, #8
 80a1738:	a803      	add	r0, sp, #12
 80a173a:	f001 fb0b 	bl	80a2d54 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
 80a173e:	b120      	cbz	r0, 80a174a <_Z19getMeasure_callbackPhj+0x46>
			return getTokenValue(value, result);
 80a1740:	9902      	ldr	r1, [sp, #8]
 80a1742:	aa01      	add	r2, sp, #4
 80a1744:	a803      	add	r0, sp, #12
 80a1746:	f001 fa2b 	bl	80a2ba0 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERi>
    unsigned int setPoint = setP;
 80a174a:	9c01      	ldr	r4, [sp, #4]
      maxCurrentC1_test(setPoint); //Emeter3, I1
 80a174c:	4620      	mov	r0, r4
 80a174e:	f7ff f8f5 	bl	80a093c <_Z17maxCurrentC1_testj>
      delay(10);
 80a1752:	200a      	movs	r0, #10
 80a1754:	f003 f924 	bl	80a49a0 <delay>
      maxCurrentC2_test(setPoint); //Emeter3, I1
 80a1758:	4620      	mov	r0, r4
 80a175a:	f7ff f961 	bl	80a0a20 <_Z17maxCurrentC2_testj>
    JsonParser parser1;
 80a175e:	a803      	add	r0, sp, #12
 80a1760:	f001 f950 	bl	80a2a04 <_ZN10JsonParserD1Ev>
}
 80a1764:	b00f      	add	sp, #60	; 0x3c
 80a1766:	bd30      	pop	{r4, r5, pc}
 80a1768:	080a8607 	.word	0x080a8607

080a176c <_Z8callbackPcPhj>:
void callback(char* topic, byte* payload, unsigned int length) {
 80a176c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a1770:	b087      	sub	sp, #28
 80a1772:	4605      	mov	r5, r0
 80a1774:	af02      	add	r7, sp, #8
 80a1776:	460e      	mov	r6, r1
    test = "99";
 80a1778:	4865      	ldr	r0, [pc, #404]	; (80a1910 <_Z8callbackPcPhj+0x1a4>)
 80a177a:	4966      	ldr	r1, [pc, #408]	; (80a1914 <_Z8callbackPcPhj+0x1a8>)
void callback(char* topic, byte* payload, unsigned int length) {
 80a177c:	4614      	mov	r4, r2
    test = "99";
 80a177e:	f002 fd71 	bl	80a4264 <_ZN6StringaSEPKc>
	time_t time = Time.now();
 80a1782:	f003 f8f2 	bl	80a496a <_ZN9TimeClass3nowEv>
 80a1786:	4681      	mov	r9, r0
    DEBUGPORT.print("MQTT>\tCallback function is called at: ");
 80a1788:	f003 faca 	bl	80a4d20 <_Z16_fetch_usbserialv>
 80a178c:	4962      	ldr	r1, [pc, #392]	; (80a1918 <_Z8callbackPcPhj+0x1ac>)
 80a178e:	f002 fe89 	bl	80a44a4 <_ZN5Print5printEPKc>
    DEBUGPORT.println(Time.format(time, TIME_FORMAT_DEFAULT));
 80a1792:	f003 fac5 	bl	80a4d20 <_Z16_fetch_usbserialv>
 80a1796:	464a      	mov	r2, r9
 80a1798:	4680      	mov	r8, r0
 80a179a:	4b60      	ldr	r3, [pc, #384]	; (80a191c <_Z8callbackPcPhj+0x1b0>)
 80a179c:	4638      	mov	r0, r7
 80a179e:	681b      	ldr	r3, [r3, #0]
 80a17a0:	495f      	ldr	r1, [pc, #380]	; (80a1920 <_Z8callbackPcPhj+0x1b4>)
 80a17a2:	9300      	str	r3, [sp, #0]
 80a17a4:	17d3      	asrs	r3, r2, #31
 80a17a6:	f003 f881 	bl	80a48ac <_ZN9TimeClass6formatExPKc>
 80a17aa:	6839      	ldr	r1, [r7, #0]
 80a17ac:	4640      	mov	r0, r8
 80a17ae:	f002 fe8c 	bl	80a44ca <_ZN5Print7printlnEPKc>
 80a17b2:	4638      	mov	r0, r7
 80a17b4:	f002 fcba 	bl	80a412c <_ZN6StringD1Ev>
         if (strcmp(topic, "HANevse/allowUser")==0)
 80a17b8:	4628      	mov	r0, r5
 80a17ba:	495a      	ldr	r1, [pc, #360]	; (80a1924 <_Z8callbackPcPhj+0x1b8>)
 80a17bc:	f005 fa18 	bl	80a6bf0 <strcmp>
 80a17c0:	b938      	cbnz	r0, 80a17d2 <_Z8callbackPcPhj+0x66>
            allowUser_callback(payload, length);
 80a17c2:	4621      	mov	r1, r4
 80a17c4:	4630      	mov	r0, r6
 80a17c6:	f7ff f9b5 	bl	80a0b34 <_Z18allowUser_callbackPhj>
}
 80a17ca:	3714      	adds	r7, #20
 80a17cc:	46bd      	mov	sp, r7
 80a17ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
         if ( (strcmp(topic, "HANevse/energyMeter")==0) && TESTCASE )
 80a17d2:	4628      	mov	r0, r5
 80a17d4:	4954      	ldr	r1, [pc, #336]	; (80a1928 <_Z8callbackPcPhj+0x1bc>)
 80a17d6:	f005 fa0b 	bl	80a6bf0 <strcmp>
 80a17da:	b938      	cbnz	r0, 80a17ec <_Z8callbackPcPhj+0x80>
 80a17dc:	4b53      	ldr	r3, [pc, #332]	; (80a192c <_Z8callbackPcPhj+0x1c0>)
 80a17de:	781b      	ldrb	r3, [r3, #0]
 80a17e0:	b123      	cbz	r3, 80a17ec <_Z8callbackPcPhj+0x80>
            getMeasure_callback(payload, length);
 80a17e2:	4621      	mov	r1, r4
 80a17e4:	4630      	mov	r0, r6
 80a17e6:	f7ff ff8d 	bl	80a1704 <_Z19getMeasure_callbackPhj>
 80a17ea:	e7ee      	b.n	80a17ca <_Z8callbackPcPhj+0x5e>
         if (strcmp(topic, "HANevse/resetOlimex")==0)
 80a17ec:	4628      	mov	r0, r5
 80a17ee:	4950      	ldr	r1, [pc, #320]	; (80a1930 <_Z8callbackPcPhj+0x1c4>)
 80a17f0:	f005 f9fe 	bl	80a6bf0 <strcmp>
 80a17f4:	4680      	mov	r8, r0
 80a17f6:	b9d0      	cbnz	r0, 80a182e <_Z8callbackPcPhj+0xc2>
            char payl[length+1];
 80a17f8:	f104 0308 	add.w	r3, r4, #8
 80a17fc:	f023 0307 	bic.w	r3, r3, #7
            resetOlimex(payl);
 80a1800:	466d      	mov	r5, sp
            char payl[length+1];
 80a1802:	ebad 0d03 	sub.w	sp, sp, r3
 80a1806:	ab02      	add	r3, sp, #8
            memcpy(payl, payload, length);
 80a1808:	4622      	mov	r2, r4
 80a180a:	4631      	mov	r1, r6
 80a180c:	4618      	mov	r0, r3
 80a180e:	f005 f9b5 	bl	80a6b7c <memcpy>
            resetOlimex(payl);
 80a1812:	4601      	mov	r1, r0
            payl[length] = NULL;
 80a1814:	f800 8004 	strb.w	r8, [r0, r4]
            resetOlimex(payl);
 80a1818:	4638      	mov	r0, r7
 80a181a:	f002 fcd1 	bl	80a41c0 <_ZN6StringC1EPKc>
 80a181e:	4638      	mov	r0, r7
 80a1820:	f7fe fc4b 	bl	80a00ba <_Z11resetOlimex6String>
            switchTest(payl);
 80a1824:	4638      	mov	r0, r7
 80a1826:	f002 fc81 	bl	80a412c <_ZN6StringD1Ev>
 80a182a:	46ad      	mov	sp, r5
 80a182c:	e7cd      	b.n	80a17ca <_Z8callbackPcPhj+0x5e>
         if (strcmp(topic, "HANevse/resetPhoton")==0)
 80a182e:	4628      	mov	r0, r5
 80a1830:	4940      	ldr	r1, [pc, #256]	; (80a1934 <_Z8callbackPcPhj+0x1c8>)
 80a1832:	f005 f9dd 	bl	80a6bf0 <strcmp>
 80a1836:	b928      	cbnz	r0, 80a1844 <_Z8callbackPcPhj+0xd8>
            resetParticle("1");
 80a1838:	493f      	ldr	r1, [pc, #252]	; (80a1938 <_Z8callbackPcPhj+0x1cc>)
 80a183a:	4638      	mov	r0, r7
 80a183c:	f002 fcc0 	bl	80a41c0 <_ZN6StringC1EPKc>
    System.reset();
 80a1840:	f002 f925 	bl	80a3a8e <_ZN11SystemClass5resetEv>
         if (strcmp(topic, "HANevse/switchTest1")==0)
 80a1844:	4628      	mov	r0, r5
 80a1846:	493d      	ldr	r1, [pc, #244]	; (80a193c <_Z8callbackPcPhj+0x1d0>)
 80a1848:	f005 f9d2 	bl	80a6bf0 <strcmp>
 80a184c:	4680      	mov	r8, r0
 80a184e:	b9b0      	cbnz	r0, 80a187e <_Z8callbackPcPhj+0x112>
            char payl[length+1];
 80a1850:	f104 0308 	add.w	r3, r4, #8
 80a1854:	f023 0307 	bic.w	r3, r3, #7
            switchTest(payl);
 80a1858:	466d      	mov	r5, sp
            char payl[length+1];
 80a185a:	ebad 0d03 	sub.w	sp, sp, r3
 80a185e:	ab02      	add	r3, sp, #8
            memcpy(payl, payload, length);
 80a1860:	4622      	mov	r2, r4
 80a1862:	4631      	mov	r1, r6
 80a1864:	4618      	mov	r0, r3
 80a1866:	f005 f989 	bl	80a6b7c <memcpy>
            switchTest(payl);
 80a186a:	4601      	mov	r1, r0
            payl[length] = NULL;
 80a186c:	f800 8004 	strb.w	r8, [r0, r4]
            switchTest(payl);
 80a1870:	4638      	mov	r0, r7
 80a1872:	f002 fca5 	bl	80a41c0 <_ZN6StringC1EPKc>
 80a1876:	4638      	mov	r0, r7
 80a1878:	f7fe fd30 	bl	80a02dc <_Z10switchTest6String>
 80a187c:	e7d2      	b.n	80a1824 <_Z8callbackPcPhj+0xb8>
         if ((strcmp(topic, "HANevse/maxC1")==0)  && !TESTCASE )
 80a187e:	4628      	mov	r0, r5
 80a1880:	492f      	ldr	r1, [pc, #188]	; (80a1940 <_Z8callbackPcPhj+0x1d4>)
 80a1882:	f005 f9b5 	bl	80a6bf0 <strcmp>
 80a1886:	b9e0      	cbnz	r0, 80a18c2 <_Z8callbackPcPhj+0x156>
 80a1888:	4b28      	ldr	r3, [pc, #160]	; (80a192c <_Z8callbackPcPhj+0x1c0>)
 80a188a:	f893 8000 	ldrb.w	r8, [r3]
 80a188e:	f1b8 0f00 	cmp.w	r8, #0
 80a1892:	d116      	bne.n	80a18c2 <_Z8callbackPcPhj+0x156>
            char payl[length+1];
 80a1894:	f104 0308 	add.w	r3, r4, #8
 80a1898:	f023 0307 	bic.w	r3, r3, #7
            maxCurrentC1(payl);
 80a189c:	466d      	mov	r5, sp
            char payl[length+1];
 80a189e:	ebad 0d03 	sub.w	sp, sp, r3
 80a18a2:	ab02      	add	r3, sp, #8
            memcpy(payl, payload, length);
 80a18a4:	4622      	mov	r2, r4
 80a18a6:	4631      	mov	r1, r6
 80a18a8:	4618      	mov	r0, r3
 80a18aa:	f005 f967 	bl	80a6b7c <memcpy>
            maxCurrentC1(payl);
 80a18ae:	4601      	mov	r1, r0
            payl[length] = NULL;
 80a18b0:	f800 8004 	strb.w	r8, [r0, r4]
            maxCurrentC1(payl);
 80a18b4:	4638      	mov	r0, r7
 80a18b6:	f002 fc83 	bl	80a41c0 <_ZN6StringC1EPKc>
 80a18ba:	4638      	mov	r0, r7
 80a18bc:	f7fe fc40 	bl	80a0140 <_Z12maxCurrentC16String>
 80a18c0:	e7b0      	b.n	80a1824 <_Z8callbackPcPhj+0xb8>
         if ((strcmp(topic, "HANevse/maxC2")==0) && !TESTCASE )
 80a18c2:	4628      	mov	r0, r5
 80a18c4:	491f      	ldr	r1, [pc, #124]	; (80a1944 <_Z8callbackPcPhj+0x1d8>)
 80a18c6:	f005 f993 	bl	80a6bf0 <strcmp>
 80a18ca:	2800      	cmp	r0, #0
 80a18cc:	f47f af7d 	bne.w	80a17ca <_Z8callbackPcPhj+0x5e>
 80a18d0:	4b16      	ldr	r3, [pc, #88]	; (80a192c <_Z8callbackPcPhj+0x1c0>)
 80a18d2:	781d      	ldrb	r5, [r3, #0]
 80a18d4:	2d00      	cmp	r5, #0
 80a18d6:	f47f af78 	bne.w	80a17ca <_Z8callbackPcPhj+0x5e>
            char payl[length+1];
 80a18da:	f104 0308 	add.w	r3, r4, #8
 80a18de:	f023 0307 	bic.w	r3, r3, #7
            maxCurrentC2(payl);
 80a18e2:	46e8      	mov	r8, sp
            char payl[length+1];
 80a18e4:	ebad 0d03 	sub.w	sp, sp, r3
 80a18e8:	ab02      	add	r3, sp, #8
            memcpy(payl, payload, length);
 80a18ea:	4622      	mov	r2, r4
 80a18ec:	4618      	mov	r0, r3
 80a18ee:	4631      	mov	r1, r6
 80a18f0:	f005 f944 	bl	80a6b7c <memcpy>
            maxCurrentC2(payl);
 80a18f4:	4601      	mov	r1, r0
            payl[length] = NULL;
 80a18f6:	5505      	strb	r5, [r0, r4]
            maxCurrentC2(payl);
 80a18f8:	4638      	mov	r0, r7
 80a18fa:	f002 fc61 	bl	80a41c0 <_ZN6StringC1EPKc>
 80a18fe:	4638      	mov	r0, r7
 80a1900:	f7fe fc76 	bl	80a01f0 <_Z12maxCurrentC26String>
 80a1904:	4638      	mov	r0, r7
 80a1906:	f002 fc11 	bl	80a412c <_ZN6StringD1Ev>
 80a190a:	46c5      	mov	sp, r8
}
 80a190c:	e75d      	b.n	80a17ca <_Z8callbackPcPhj+0x5e>
 80a190e:	bf00      	nop
 80a1910:	20000548 	.word	0x20000548
 80a1914:	080a8610 	.word	0x080a8610
 80a1918:	080a8613 	.word	0x080a8613
 80a191c:	20000008 	.word	0x20000008
 80a1920:	2000056c 	.word	0x2000056c
 80a1924:	080a8435 	.word	0x080a8435
 80a1928:	080a8421 	.word	0x080a8421
 80a192c:	20000330 	.word	0x20000330
 80a1930:	080a8447 	.word	0x080a8447
 80a1934:	080a845b 	.word	0x080a845b
 80a1938:	080a859e 	.word	0x080a859e
 80a193c:	080a846f 	.word	0x080a846f
 80a1940:	080a8483 	.word	0x080a8483
 80a1944:	080a8491 	.word	0x080a8491

080a1948 <_ZN7MFRC522C1Ehh>:

/**
 * Constructor.
 * Prepares the output pins.
 */
MFRC522::MFRC522(	byte chipSelectPin,		///< Arduino pin connected to MFRC522's SPI slave select input (Pin 24, NSS, active low)
 80a1948:	b538      	push	{r3, r4, r5, lr}
 80a194a:	4604      	mov	r4, r0
 80a194c:	4615      	mov	r5, r2
 80a194e:	4608      	mov	r0, r1
					byte resetPowerDownPin	///< Arduino pin connected to MFRC522's reset and power down input (Pin 6, NRSTPD, active low)
				) {
	// Set the chipSelectPin as digital output, do not select the slave yet
	_chipSelectPin = chipSelectPin;
 80a1950:	7321      	strb	r1, [r4, #12]
	pinMode(_chipSelectPin, OUTPUT);
 80a1952:	2101      	movs	r1, #1
 80a1954:	f003 fcda 	bl	80a530c <pinMode>
	digitalWrite(_chipSelectPin, HIGH);
 80a1958:	7b20      	ldrb	r0, [r4, #12]
 80a195a:	2101      	movs	r1, #1
 80a195c:	f003 fce7 	bl	80a532e <digitalWrite>
	
	// Set the resetPowerDownPin as digital output, do not reset or power down.
	_resetPowerDownPin = resetPowerDownPin;
	pinMode(_resetPowerDownPin, OUTPUT);
 80a1960:	4628      	mov	r0, r5
 80a1962:	2101      	movs	r1, #1
	_resetPowerDownPin = resetPowerDownPin;
 80a1964:	7365      	strb	r5, [r4, #13]
	pinMode(_resetPowerDownPin, OUTPUT);
 80a1966:	f003 fcd1 	bl	80a530c <pinMode>
	digitalWrite(_resetPowerDownPin, LOW);
 80a196a:	7b60      	ldrb	r0, [r4, #13]
 80a196c:	2100      	movs	r1, #0
 80a196e:	f003 fcde 	bl	80a532e <digitalWrite>
	
	// Set SPI bus to work with MFRC522 chip.
	//setSPIConfig();
} // End constructor
 80a1972:	4620      	mov	r0, r4
 80a1974:	bd38      	pop	{r3, r4, r5, pc}
	...

080a1978 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
    static SPIClass& instance() {
 80a1978:	b538      	push	{r3, r4, r5, lr}
        static SPIClass instance(Interface);
 80a197a:	4d0c      	ldr	r5, [pc, #48]	; (80a19ac <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
 80a197c:	7829      	ldrb	r1, [r5, #0]
 80a197e:	f3bf 8f5b 	dmb	ish
 80a1982:	f011 0401 	ands.w	r4, r1, #1
 80a1986:	d10f      	bne.n	80a19a8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>
 80a1988:	4628      	mov	r0, r5
 80a198a:	f7fe fb8c 	bl	80a00a6 <__cxa_guard_acquire>
 80a198e:	b158      	cbz	r0, 80a19a8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>
 80a1990:	4621      	mov	r1, r4
 80a1992:	4807      	ldr	r0, [pc, #28]	; (80a19b0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x38>)
 80a1994:	f002 f839 	bl	80a3a0a <_ZN8SPIClassC1E19hal_spi_interface_t>
 80a1998:	4628      	mov	r0, r5
 80a199a:	f7fe fb89 	bl	80a00b0 <__cxa_guard_release>
 80a199e:	4a05      	ldr	r2, [pc, #20]	; (80a19b4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x3c>)
 80a19a0:	4905      	ldr	r1, [pc, #20]	; (80a19b8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x40>)
 80a19a2:	4803      	ldr	r0, [pc, #12]	; (80a19b0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x38>)
 80a19a4:	f003 fd48 	bl	80a5438 <__aeabi_atexit>
    }
 80a19a8:	4801      	ldr	r0, [pc, #4]	; (80a19b0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x38>)
 80a19aa:	bd38      	pop	{r3, r4, r5, pc}
 80a19ac:	20000244 	.word	0x20000244
 80a19b0:	20000248 	.word	0x20000248
 80a19b4:	20000240 	.word	0x20000240
 80a19b8:	080a02cb 	.word	0x080a02cb

080a19bc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>:
        return instance().setClockSpeed(value, scale);
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
 80a19bc:	b510      	push	{r4, lr}
 80a19be:	4604      	mov	r4, r0
        return instance().transfer(data);
 80a19c0:	f7ff ffda 	bl	80a1978 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 80a19c4:	4621      	mov	r1, r4
    }
 80a19c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return instance().transfer(data);
 80a19ca:	f002 b83b 	b.w	80a3a44 <_ZN8SPIClass8transferEh>

080a19ce <_ZN7MFRC52217PCD_WriteRegisterEhh>:
 * Writes a byte to the specified register in the MFRC522 chip.
 * The interface is described in the datasheet section 8.1.2.
 */
void MFRC522::PCD_WriteRegister(	byte reg,		///< The register to write to. One of the PCD_Register enums.
									byte value		///< The value to write.
								) {
 80a19ce:	b570      	push	{r4, r5, r6, lr}
 80a19d0:	460e      	mov	r6, r1
 80a19d2:	4615      	mov	r5, r2
 80a19d4:	4604      	mov	r4, r0
	digitalWrite(_chipSelectPin, LOW);		// Select slave
 80a19d6:	2100      	movs	r1, #0
 80a19d8:	7b00      	ldrb	r0, [r0, #12]
 80a19da:	f003 fca8 	bl	80a532e <digitalWrite>
	SPI.transfer(reg & 0x7E);					// MSB == 0 is for writing. LSB is not used in address. Datasheet section 8.1.2.3.
 80a19de:	f006 007e 	and.w	r0, r6, #126	; 0x7e
 80a19e2:	f7ff ffeb 	bl	80a19bc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
	SPI.transfer(value);
 80a19e6:	4628      	mov	r0, r5
 80a19e8:	f7ff ffe8 	bl	80a19bc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
	digitalWrite(_chipSelectPin, HIGH);		// Release slave again
 80a19ec:	7b20      	ldrb	r0, [r4, #12]
 80a19ee:	2101      	movs	r1, #1
} // End PCD_WriteRegister()
 80a19f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	digitalWrite(_chipSelectPin, HIGH);		// Release slave again
 80a19f4:	f003 bc9b 	b.w	80a532e <digitalWrite>

080a19f8 <_ZN7MFRC52217PCD_WriteRegisterEhhPh>:
 * The interface is described in the datasheet section 8.1.2.
 */
void MFRC522::PCD_WriteRegister(	byte reg,		///< The register to write to. One of the PCD_Register enums.
									byte count,		///< The number of bytes to write to the register
									byte *values	///< The values to write. Byte array.
								) {
 80a19f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a19fa:	460f      	mov	r7, r1
 80a19fc:	4606      	mov	r6, r0
	digitalWrite(_chipSelectPin, LOW);		// Select slave
 80a19fe:	2100      	movs	r1, #0
 80a1a00:	7b00      	ldrb	r0, [r0, #12]
								) {
 80a1a02:	4615      	mov	r5, r2
 80a1a04:	461c      	mov	r4, r3
	digitalWrite(_chipSelectPin, LOW);		// Select slave
 80a1a06:	f003 fc92 	bl	80a532e <digitalWrite>
	SPI.transfer(reg & 0x7E);				// MSB == 0 is for writing. LSB is not used in address. Datasheet section 8.1.2.3.
 80a1a0a:	f007 007e 	and.w	r0, r7, #126	; 0x7e
 80a1a0e:	f7ff ffd5 	bl	80a19bc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
	for (byte index = 0; index < count; index++) {
 80a1a12:	4425      	add	r5, r4
 80a1a14:	42ac      	cmp	r4, r5
 80a1a16:	d004      	beq.n	80a1a22 <_ZN7MFRC52217PCD_WriteRegisterEhhPh+0x2a>
		SPI.transfer(values[index]);
 80a1a18:	f814 0b01 	ldrb.w	r0, [r4], #1
 80a1a1c:	f7ff ffce 	bl	80a19bc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
	for (byte index = 0; index < count; index++) {
 80a1a20:	e7f8      	b.n	80a1a14 <_ZN7MFRC52217PCD_WriteRegisterEhhPh+0x1c>
	}
	digitalWrite(_chipSelectPin, HIGH);		// Release slave again
 80a1a22:	7b30      	ldrb	r0, [r6, #12]
 80a1a24:	2101      	movs	r1, #1
} // End PCD_WriteRegister()
 80a1a26:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	digitalWrite(_chipSelectPin, HIGH);		// Release slave again
 80a1a2a:	f003 bc80 	b.w	80a532e <digitalWrite>

080a1a2e <_ZN7MFRC52216PCD_ReadRegisterEh>:
/**
 * Reads a byte from the specified register in the MFRC522 chip.
 * The interface is described in the datasheet section 8.1.2.
 */
byte MFRC522::PCD_ReadRegister(	byte reg	///< The register to read from. One of the PCD_Register enums.
								) {
 80a1a2e:	b538      	push	{r3, r4, r5, lr}
 80a1a30:	460c      	mov	r4, r1
 80a1a32:	4605      	mov	r5, r0
	byte value;
	digitalWrite(_chipSelectPin, LOW);			// Select slave
 80a1a34:	2100      	movs	r1, #0
 80a1a36:	7b00      	ldrb	r0, [r0, #12]
	SPI.transfer(0x80 | (reg & 0x7E));			// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
 80a1a38:	f004 047e 	and.w	r4, r4, #126	; 0x7e
	digitalWrite(_chipSelectPin, LOW);			// Select slave
 80a1a3c:	f003 fc77 	bl	80a532e <digitalWrite>
	SPI.transfer(0x80 | (reg & 0x7E));			// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
 80a1a40:	f044 0080 	orr.w	r0, r4, #128	; 0x80
 80a1a44:	f7ff ffba 	bl	80a19bc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
	value = SPI.transfer(0);					// Read the value back. Send 0 to stop reading.
 80a1a48:	2000      	movs	r0, #0
 80a1a4a:	f7ff ffb7 	bl	80a19bc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
 80a1a4e:	4604      	mov	r4, r0
	digitalWrite(_chipSelectPin, HIGH);			// Release slave again
 80a1a50:	2101      	movs	r1, #1
 80a1a52:	7b28      	ldrb	r0, [r5, #12]
 80a1a54:	f003 fc6b 	bl	80a532e <digitalWrite>
	return value;
} // End PCD_ReadRegister()
 80a1a58:	4620      	mov	r0, r4
 80a1a5a:	bd38      	pop	{r3, r4, r5, pc}

080a1a5c <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>:
/**
 * Sets the bits given in mask in register reg.
 */
void MFRC522::PCD_SetRegisterBitMask(	byte reg,	///< The register to update. One of the PCD_Register enums.
										byte mask	///< The bits to set.
									) { 
 80a1a5c:	b570      	push	{r4, r5, r6, lr}
 80a1a5e:	4604      	mov	r4, r0
 80a1a60:	460d      	mov	r5, r1
 80a1a62:	4616      	mov	r6, r2
	byte tmp;
	tmp = PCD_ReadRegister(reg);
 80a1a64:	f7ff ffe3 	bl	80a1a2e <_ZN7MFRC52216PCD_ReadRegisterEh>
	PCD_WriteRegister(reg, tmp | mask);			// set bit mask
 80a1a68:	ea40 0206 	orr.w	r2, r0, r6
 80a1a6c:	4629      	mov	r1, r5
 80a1a6e:	4620      	mov	r0, r4
} // End PCD_SetRegisterBitMask()
 80a1a70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	PCD_WriteRegister(reg, tmp | mask);			// set bit mask
 80a1a74:	b2d2      	uxtb	r2, r2
 80a1a76:	f7ff bfaa 	b.w	80a19ce <_ZN7MFRC52217PCD_WriteRegisterEhh>

080a1a7a <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>:
/**
 * Clears the bits given in mask from register reg.
 */
void MFRC522::PCD_ClearRegisterBitMask(	byte reg,	///< The register to update. One of the PCD_Register enums.
										byte mask	///< The bits to clear.
									  ) {
 80a1a7a:	b570      	push	{r4, r5, r6, lr}
 80a1a7c:	4604      	mov	r4, r0
 80a1a7e:	460d      	mov	r5, r1
 80a1a80:	4616      	mov	r6, r2
	byte tmp;
	tmp = PCD_ReadRegister(reg);
 80a1a82:	f7ff ffd4 	bl	80a1a2e <_ZN7MFRC52216PCD_ReadRegisterEh>
	PCD_WriteRegister(reg, tmp & (~mask));		// clear bit mask
 80a1a86:	ea20 0206 	bic.w	r2, r0, r6
 80a1a8a:	4629      	mov	r1, r5
 80a1a8c:	4620      	mov	r0, r4
} // End PCD_ClearRegisterBitMask()
 80a1a8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	PCD_WriteRegister(reg, tmp & (~mask));		// clear bit mask
 80a1a92:	b2d2      	uxtb	r2, r2
 80a1a94:	f7ff bf9b 	b.w	80a19ce <_ZN7MFRC52217PCD_WriteRegisterEhh>

080a1a98 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>:
 * @return STATUS_OK on success, STATUS_??? otherwise.
 */
byte MFRC522::PCD_CalculateCRC(	byte *data,		///< In: Pointer to the data to transfer to the FIFO for CRC calculation.
								byte length,	///< In: The number of bytes to transfer.
								byte *result	///< Out: Pointer to result buffer. Result is written to result[0..1], low byte first.
					 ) {
 80a1a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1a9a:	4604      	mov	r4, r0
 80a1a9c:	4615      	mov	r5, r2
 80a1a9e:	460f      	mov	r7, r1
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop any active command.
 80a1aa0:	2200      	movs	r2, #0
 80a1aa2:	2102      	movs	r1, #2
					 ) {
 80a1aa4:	461e      	mov	r6, r3
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop any active command.
 80a1aa6:	f7ff ff92 	bl	80a19ce <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(DivIrqReg, 0x04);					// Clear the CRCIRq interrupt request bit
 80a1aaa:	2204      	movs	r2, #4
 80a1aac:	210a      	movs	r1, #10
 80a1aae:	4620      	mov	r0, r4
 80a1ab0:	f7ff ff8d 	bl	80a19ce <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_SetRegisterBitMask(FIFOLevelReg, 0x80);		// FlushBuffer = 1, FIFO initialization
 80a1ab4:	2280      	movs	r2, #128	; 0x80
 80a1ab6:	2114      	movs	r1, #20
 80a1ab8:	4620      	mov	r0, r4
 80a1aba:	f7ff ffcf 	bl	80a1a5c <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>
	PCD_WriteRegister(FIFODataReg, length, data);		// Write data to the FIFO
 80a1abe:	462a      	mov	r2, r5
 80a1ac0:	463b      	mov	r3, r7
 80a1ac2:	2112      	movs	r1, #18
 80a1ac4:	4620      	mov	r0, r4
 80a1ac6:	f7ff ff97 	bl	80a19f8 <_ZN7MFRC52217PCD_WriteRegisterEhhPh>
	PCD_WriteRegister(CommandReg, PCD_CalcCRC);		// Start the calculation
 80a1aca:	2203      	movs	r2, #3
 80a1acc:	2102      	movs	r1, #2
 80a1ace:	4620      	mov	r0, r4
 80a1ad0:	f7ff ff7d 	bl	80a19ce <_ZN7MFRC52217PCD_WriteRegisterEhh>
 80a1ad4:	f241 3588 	movw	r5, #5000	; 0x1388
	
	// Wait for the CRC calculation to complete. Each iteration of the while-loop takes 17.73�s.
	word i = 5000;
	byte n;
	while (1) {
		n = PCD_ReadRegister(DivIrqReg);	// DivIrqReg[7..0] bits are: Set2 reserved reserved MfinActIRq   reserved CRCIRq reserved reserved
 80a1ad8:	210a      	movs	r1, #10
 80a1ada:	4620      	mov	r0, r4
 80a1adc:	f7ff ffa7 	bl	80a1a2e <_ZN7MFRC52216PCD_ReadRegisterEh>
		if (n & 0x04) {						// CRCIRq bit set - calculation done
 80a1ae0:	0743      	lsls	r3, r0, #29
 80a1ae2:	d405      	bmi.n	80a1af0 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x58>
			break;
		}
		if (--i == 0) {						// The emergency break. We will eventually terminate on this one after 89ms. Communication with the MFRC522 might be down.
 80a1ae4:	3d01      	subs	r5, #1
 80a1ae6:	b2ad      	uxth	r5, r5
 80a1ae8:	2d00      	cmp	r5, #0
 80a1aea:	d1f5      	bne.n	80a1ad8 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x40>
			return STATUS_TIMEOUT;
 80a1aec:	2004      	movs	r0, #4
 80a1aee:	e00f      	b.n	80a1b10 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x78>
		}
	}
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop calculating CRC for new content in the FIFO.
 80a1af0:	2200      	movs	r2, #0
 80a1af2:	2102      	movs	r1, #2
 80a1af4:	4620      	mov	r0, r4
 80a1af6:	f7ff ff6a 	bl	80a19ce <_ZN7MFRC52217PCD_WriteRegisterEhh>
	
	// Transfer the result from the registers to the result buffer
	result[0] = PCD_ReadRegister(CRCResultRegL);
 80a1afa:	2144      	movs	r1, #68	; 0x44
 80a1afc:	4620      	mov	r0, r4
 80a1afe:	f7ff ff96 	bl	80a1a2e <_ZN7MFRC52216PCD_ReadRegisterEh>
	result[1] = PCD_ReadRegister(CRCResultRegH);
 80a1b02:	2142      	movs	r1, #66	; 0x42
	result[0] = PCD_ReadRegister(CRCResultRegL);
 80a1b04:	7030      	strb	r0, [r6, #0]
	result[1] = PCD_ReadRegister(CRCResultRegH);
 80a1b06:	4620      	mov	r0, r4
 80a1b08:	f7ff ff91 	bl	80a1a2e <_ZN7MFRC52216PCD_ReadRegisterEh>
 80a1b0c:	7070      	strb	r0, [r6, #1]
	return STATUS_OK;
 80a1b0e:	2001      	movs	r0, #1
} // End PCD_CalculateCRC()
 80a1b10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1b12 <_ZN7MFRC5229PCD_ResetEv>:
} // End PCD_Init()

/**
 * Performs a soft reset on the MFRC522 chip and waits for it to be ready again.
 */
void MFRC522::PCD_Reset() {
 80a1b12:	b510      	push	{r4, lr}
	PCD_WriteRegister(CommandReg, PCD_SoftReset);	// Issue the SoftReset command.
 80a1b14:	220f      	movs	r2, #15
 80a1b16:	2102      	movs	r1, #2
void MFRC522::PCD_Reset() {
 80a1b18:	4604      	mov	r4, r0
	PCD_WriteRegister(CommandReg, PCD_SoftReset);	// Issue the SoftReset command.
 80a1b1a:	f7ff ff58 	bl	80a19ce <_ZN7MFRC52217PCD_WriteRegisterEhh>
	// The datasheet does not mention how long the SoftRest command takes to complete.
	// But the MFRC522 might have been in soft power-down mode (triggered by bit 4 of CommandReg) 
	// Section 8.8.2 in the datasheet says the oscillator start-up time is the start up time of the crystal + 37,74�s. Let us be generous: 50ms.
	delay(50);
 80a1b1e:	2032      	movs	r0, #50	; 0x32
 80a1b20:	f002 ff3e 	bl	80a49a0 <delay>
	// Wait for the PowerDown bit in CommandReg to be cleared
	while (PCD_ReadRegister(CommandReg) & (1<<4)) {
 80a1b24:	2102      	movs	r1, #2
 80a1b26:	4620      	mov	r0, r4
 80a1b28:	f7ff ff81 	bl	80a1a2e <_ZN7MFRC52216PCD_ReadRegisterEh>
 80a1b2c:	06c3      	lsls	r3, r0, #27
 80a1b2e:	d4f9      	bmi.n	80a1b24 <_ZN7MFRC5229PCD_ResetEv+0x12>
		// PCD still restarting - unlikely after waiting 50ms, but better safe than sorry.
	}
} // End PCD_Reset()
 80a1b30:	bd10      	pop	{r4, pc}

080a1b32 <_ZN7MFRC52213PCD_AntennaOnEv>:

/**
 * Turns the antenna on by enabling pins TX1 and TX2.
 * After a reset these pins disabled.
 */
void MFRC522::PCD_AntennaOn() {
 80a1b32:	b510      	push	{r4, lr}
	byte value = PCD_ReadRegister(TxControlReg);
 80a1b34:	2128      	movs	r1, #40	; 0x28
void MFRC522::PCD_AntennaOn() {
 80a1b36:	4604      	mov	r4, r0
	byte value = PCD_ReadRegister(TxControlReg);
 80a1b38:	f7ff ff79 	bl	80a1a2e <_ZN7MFRC52216PCD_ReadRegisterEh>
	if ((value & 0x03) != 0x03) {
 80a1b3c:	f000 0303 	and.w	r3, r0, #3
 80a1b40:	2b03      	cmp	r3, #3
 80a1b42:	d008      	beq.n	80a1b56 <_ZN7MFRC52213PCD_AntennaOnEv+0x24>
		PCD_WriteRegister(TxControlReg, value | 0x03);
 80a1b44:	f040 0203 	orr.w	r2, r0, #3
 80a1b48:	2128      	movs	r1, #40	; 0x28
 80a1b4a:	4620      	mov	r0, r4
	}
} // End PCD_AntennaOn()
 80a1b4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		PCD_WriteRegister(TxControlReg, value | 0x03);
 80a1b50:	b2d2      	uxtb	r2, r2
 80a1b52:	f7ff bf3c 	b.w	80a19ce <_ZN7MFRC52217PCD_WriteRegisterEhh>
} // End PCD_AntennaOn()
 80a1b56:	bd10      	pop	{r4, pc}

080a1b58 <_ZN7MFRC5228PCD_InitEv>:
void MFRC522::PCD_Init() {
 80a1b58:	b510      	push	{r4, lr}
 80a1b5a:	4604      	mov	r4, r0
	if (digitalRead(_resetPowerDownPin) == LOW) { //The MFRC522 chip is in power down mode.
 80a1b5c:	7b40      	ldrb	r0, [r0, #13]
 80a1b5e:	f003 fbff 	bl	80a5360 <digitalRead>
 80a1b62:	bb48      	cbnz	r0, 80a1bb8 <_ZN7MFRC5228PCD_InitEv+0x60>
		digitalWrite(_resetPowerDownPin, HIGH);	// Exit power down mode. This triggers a hard reset.
 80a1b64:	7b60      	ldrb	r0, [r4, #13]
 80a1b66:	2101      	movs	r1, #1
 80a1b68:	f003 fbe1 	bl	80a532e <digitalWrite>
		delay(50);
 80a1b6c:	2032      	movs	r0, #50	; 0x32
 80a1b6e:	f002 ff17 	bl	80a49a0 <delay>
    PCD_WriteRegister(TModeReg, 0x80);			// TAuto=1; timer starts automatically at the end of the transmission in all communication modes at all speeds
 80a1b72:	4620      	mov	r0, r4
 80a1b74:	2280      	movs	r2, #128	; 0x80
 80a1b76:	2154      	movs	r1, #84	; 0x54
 80a1b78:	f7ff ff29 	bl	80a19ce <_ZN7MFRC52217PCD_WriteRegisterEhh>
    PCD_WriteRegister(TPrescalerReg, 0xA9);	// TPreScaler = TModeReg[3..0]:TPrescalerReg, ie 0x0A9 = 169 => f_timer=40kHz, ie a timer period of 25�s.
 80a1b7c:	4620      	mov	r0, r4
 80a1b7e:	22a9      	movs	r2, #169	; 0xa9
 80a1b80:	2156      	movs	r1, #86	; 0x56
 80a1b82:	f7ff ff24 	bl	80a19ce <_ZN7MFRC52217PCD_WriteRegisterEhh>
    PCD_WriteRegister(TReloadRegH, 0x03);		// Reload timer with 0x3E8 = 1000, ie 25ms before timeout.
 80a1b86:	4620      	mov	r0, r4
 80a1b88:	2203      	movs	r2, #3
 80a1b8a:	2158      	movs	r1, #88	; 0x58
 80a1b8c:	f7ff ff1f 	bl	80a19ce <_ZN7MFRC52217PCD_WriteRegisterEhh>
    PCD_WriteRegister(TReloadRegL, 0xE8);
 80a1b90:	4620      	mov	r0, r4
 80a1b92:	22e8      	movs	r2, #232	; 0xe8
 80a1b94:	215a      	movs	r1, #90	; 0x5a
 80a1b96:	f7ff ff1a 	bl	80a19ce <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(TxASKReg, 0x40);		// Default 0x00. Force a 100 % ASK modulation independent of the ModGsPReg register setting
 80a1b9a:	4620      	mov	r0, r4
 80a1b9c:	2240      	movs	r2, #64	; 0x40
 80a1b9e:	212a      	movs	r1, #42	; 0x2a
 80a1ba0:	f7ff ff15 	bl	80a19ce <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(ModeReg, 0x3D);		// Default 0x3F. Set the preset value for the CRC coprocessor for the CalcCRC command to 0x6363 (ISO 14443-3 part 6.2.4)
 80a1ba4:	4620      	mov	r0, r4
 80a1ba6:	223d      	movs	r2, #61	; 0x3d
 80a1ba8:	2122      	movs	r1, #34	; 0x22
 80a1baa:	f7ff ff10 	bl	80a19ce <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_AntennaOn();						// Enable the antenna driver pins TX1 and TX2 (they were disabled by the reset)
 80a1bae:	4620      	mov	r0, r4
} // End PCD_Init()
 80a1bb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PCD_AntennaOn();						// Enable the antenna driver pins TX1 and TX2 (they were disabled by the reset)
 80a1bb4:	f7ff bfbd 	b.w	80a1b32 <_ZN7MFRC52213PCD_AntennaOnEv>
		PCD_Reset();
 80a1bb8:	4620      	mov	r0, r4
 80a1bba:	f7ff ffaa 	bl	80a1b12 <_ZN7MFRC5229PCD_ResetEv>
 80a1bbe:	e7d8      	b.n	80a1b72 <_ZN7MFRC5228PCD_InitEv+0x1a>

080a1bc0 <_ZN7MFRC52218PCD_GetAntennaGainEv>:
 * NOTE: Return value scrubbed with (0x07<<4)=01110000b as RCFfgReg may use reserved bits.
 * 
 * @return Value of the RxGain, scrubbed to the 3 bits used.
 */
byte MFRC522::PCD_GetAntennaGain() {
	return PCD_ReadRegister(RFCfgReg) & (0x07<<4);
 80a1bc0:	214c      	movs	r1, #76	; 0x4c
byte MFRC522::PCD_GetAntennaGain() {
 80a1bc2:	b508      	push	{r3, lr}
	return PCD_ReadRegister(RFCfgReg) & (0x07<<4);
 80a1bc4:	f7ff ff33 	bl	80a1a2e <_ZN7MFRC52216PCD_ReadRegisterEh>
} // End PCD_GetAntennaGain()
 80a1bc8:	f000 0070 	and.w	r0, r0, #112	; 0x70
 80a1bcc:	bd08      	pop	{r3, pc}

080a1bce <_ZN7MFRC52218PCD_SetAntennaGainEh>:
/**
 * Set the MFRC522 Receiver Gain (RxGain) to value specified by given mask.
 * See 9.3.3.6 / table 98 in http://www.nxp.com/documents/data_sheet/MFRC522.pdf
 * NOTE: Given mask is scrubbed with (0x07<<4)=01110000b as RCFfgReg may use reserved bits.
 */
void MFRC522::PCD_SetAntennaGain(byte mask) {
 80a1bce:	b538      	push	{r3, r4, r5, lr}
 80a1bd0:	460d      	mov	r5, r1
 80a1bd2:	4604      	mov	r4, r0
	if (PCD_GetAntennaGain() != mask) {						// only bother if there is a change
 80a1bd4:	f7ff fff4 	bl	80a1bc0 <_ZN7MFRC52218PCD_GetAntennaGainEv>
 80a1bd8:	42a8      	cmp	r0, r5
 80a1bda:	d00c      	beq.n	80a1bf6 <_ZN7MFRC52218PCD_SetAntennaGainEh+0x28>
		PCD_ClearRegisterBitMask(RFCfgReg, (0x07<<4));		// clear needed to allow 000 pattern
 80a1bdc:	4620      	mov	r0, r4
 80a1bde:	2270      	movs	r2, #112	; 0x70
 80a1be0:	214c      	movs	r1, #76	; 0x4c
 80a1be2:	f7ff ff4a 	bl	80a1a7a <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>
		PCD_SetRegisterBitMask(RFCfgReg, mask & (0x07<<4));	// only set RxGain[2:0] bits
 80a1be6:	4620      	mov	r0, r4
 80a1be8:	f005 0270 	and.w	r2, r5, #112	; 0x70
 80a1bec:	214c      	movs	r1, #76	; 0x4c
	}
} // End PCD_SetAntennaGain()
 80a1bee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		PCD_SetRegisterBitMask(RFCfgReg, mask & (0x07<<4));	// only set RxGain[2:0] bits
 80a1bf2:	f7ff bf33 	b.w	80a1a5c <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>
} // End PCD_SetAntennaGain()
 80a1bf6:	bd38      	pop	{r3, r4, r5, pc}

080a1bf8 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh>:
								) {
 80a1bf8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a1bfc:	4607      	mov	r7, r0
 80a1bfe:	461e      	mov	r6, r3
	if (count == 0) {
 80a1c00:	4615      	mov	r5, r2
								) {
 80a1c02:	f89d 8030 	ldrb.w	r8, [sp, #48]	; 0x30
	if (count == 0) {
 80a1c06:	2a00      	cmp	r2, #0
 80a1c08:	d042      	beq.n	80a1c90 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x98>
	byte address = 0x80 | (reg & 0x7E);		// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
 80a1c0a:	f001 017e 	and.w	r1, r1, #126	; 0x7e
	digitalWrite(_chipSelectPin, LOW);		// Select slave
 80a1c0e:	7b00      	ldrb	r0, [r0, #12]
	byte address = 0x80 | (reg & 0x7E);		// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
 80a1c10:	f041 0980 	orr.w	r9, r1, #128	; 0x80
	digitalWrite(_chipSelectPin, LOW);		// Select slave
 80a1c14:	2100      	movs	r1, #0
 80a1c16:	f003 fb8a 	bl	80a532e <digitalWrite>
	SPI.transfer(address);					// Tell MFRC522 which address we want to read
 80a1c1a:	4648      	mov	r0, r9
 80a1c1c:	f7ff fece 	bl	80a19bc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
 80a1c20:	f04f 0b00 	mov.w	fp, #0
				mask |= (1 << i);
 80a1c24:	f04f 0a01 	mov.w	sl, #1
	count--;								// One read is performed outside of the loop
 80a1c28:	3d01      	subs	r5, #1
 80a1c2a:	b2ed      	uxtb	r5, r5
	while (index < count) {
 80a1c2c:	fa5f f48b 	uxtb.w	r4, fp
 80a1c30:	42a5      	cmp	r5, r4
 80a1c32:	d922      	bls.n	80a1c7a <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x82>
		if (index == 0 && rxAlign) { // Only update bit positions rxAlign..7 in values[0]
 80a1c34:	b9dc      	cbnz	r4, 80a1c6e <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x76>
 80a1c36:	f1b8 0f00 	cmp.w	r8, #0
 80a1c3a:	d018      	beq.n	80a1c6e <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x76>
 80a1c3c:	4642      	mov	r2, r8
			for (byte i = rxAlign; i <= 7; i++) {
 80a1c3e:	b2d3      	uxtb	r3, r2
 80a1c40:	2b07      	cmp	r3, #7
 80a1c42:	b261      	sxtb	r1, r4
 80a1c44:	d805      	bhi.n	80a1c52 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x5a>
				mask |= (1 << i);
 80a1c46:	fa0a f402 	lsl.w	r4, sl, r2
 80a1c4a:	430c      	orrs	r4, r1
 80a1c4c:	b2e4      	uxtb	r4, r4
			for (byte i = rxAlign; i <= 7; i++) {
 80a1c4e:	3201      	adds	r2, #1
 80a1c50:	e7f5      	b.n	80a1c3e <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x46>
			byte value = SPI.transfer(address);	
 80a1c52:	4648      	mov	r0, r9
 80a1c54:	9101      	str	r1, [sp, #4]
 80a1c56:	f7ff feb1 	bl	80a19bc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
			values[0] = (values[index] & ~mask) | (value & mask);
 80a1c5a:	7833      	ldrb	r3, [r6, #0]
 80a1c5c:	9901      	ldr	r1, [sp, #4]
 80a1c5e:	4004      	ands	r4, r0
 80a1c60:	ea23 0301 	bic.w	r3, r3, r1
 80a1c64:	431c      	orrs	r4, r3
 80a1c66:	7034      	strb	r4, [r6, #0]
		index++;
 80a1c68:	f10b 0b01 	add.w	fp, fp, #1
	while (index < count) {
 80a1c6c:	e7de      	b.n	80a1c2c <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x34>
			values[index] = SPI.transfer(address);	// Read value and tell that we want to read the same address again.
 80a1c6e:	4648      	mov	r0, r9
 80a1c70:	f7ff fea4 	bl	80a19bc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
 80a1c74:	f806 000b 	strb.w	r0, [r6, fp]
 80a1c78:	e7f6      	b.n	80a1c68 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x70>
	values[index] = SPI.transfer(0);			// Read the final byte. Send 0 to stop reading.
 80a1c7a:	2000      	movs	r0, #0
 80a1c7c:	f7ff fe9e 	bl	80a19bc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
	digitalWrite(_chipSelectPin, HIGH);			// Release slave again
 80a1c80:	2101      	movs	r1, #1
	values[index] = SPI.transfer(0);			// Read the final byte. Send 0 to stop reading.
 80a1c82:	5570      	strb	r0, [r6, r5]
	digitalWrite(_chipSelectPin, HIGH);			// Release slave again
 80a1c84:	7b38      	ldrb	r0, [r7, #12]
} // End PCD_ReadRegister()
 80a1c86:	b003      	add	sp, #12
 80a1c88:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	digitalWrite(_chipSelectPin, HIGH);			// Release slave again
 80a1c8c:	f003 bb4f 	b.w	80a532e <digitalWrite>
} // End PCD_ReadRegister()
 80a1c90:	b003      	add	sp, #12
 80a1c92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a1c96 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>:
										byte *backData,		///< NULL or pointer to buffer if data should be read back after executing the command.
										byte *backLen,		///< In: Max number of bytes to write to *backData. Out: The number of bytes returned.
										byte *validBits,	///< In/Out: The number of valid bits in the last byte. 0 for 8 valid bits.
										byte rxAlign,		///< In: Defines the bit position in backData[0] for the first bit received. Default 0.
										bool checkCRC		///< In: True => The last two bytes of the response is assumed to be a CRC_A that must be validated.
									 ) {
 80a1c96:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a1c9a:	b089      	sub	sp, #36	; 0x24
 80a1c9c:	9203      	str	r2, [sp, #12]
 80a1c9e:	f8dd 9054 	ldr.w	r9, [sp, #84]	; 0x54
 80a1ca2:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 80a1ca6:	4604      	mov	r4, r0
 80a1ca8:	e9dd 5613 	ldrd	r5, r6, [sp, #76]	; 0x4c
 80a1cac:	468a      	mov	sl, r1
 80a1cae:	2700      	movs	r7, #0
 80a1cb0:	f89d b058 	ldrb.w	fp, [sp, #88]	; 0x58
 80a1cb4:	9204      	str	r2, [sp, #16]
	byte n, _validBits;
	unsigned int i;

	// Prepare values for BitFramingReg
	byte txLastBits = validBits ? *validBits : 0;
 80a1cb6:	f1b9 0f00 	cmp.w	r9, #0
 80a1cba:	d03e      	beq.n	80a1d3a <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xa4>
 80a1cbc:	f899 8000 	ldrb.w	r8, [r9]
	byte bitFraming	= (rxAlign << 4) + txLastBits;		// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
	
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop any active command.
 80a1cc0:	2200      	movs	r2, #0
 80a1cc2:	2102      	movs	r1, #2
 80a1cc4:	4620      	mov	r0, r4
 80a1cc6:	9305      	str	r3, [sp, #20]
 80a1cc8:	f7ff fe81 	bl	80a19ce <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(ComIrqReg, 0x7F);					// Clear all seven interrupt request bits
 80a1ccc:	227f      	movs	r2, #127	; 0x7f
 80a1cce:	2108      	movs	r1, #8
 80a1cd0:	4620      	mov	r0, r4
 80a1cd2:	f7ff fe7c 	bl	80a19ce <_ZN7MFRC52217PCD_WriteRegisterEhh>
	byte bitFraming	= (rxAlign << 4) + txLastBits;		// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
 80a1cd6:	eb08 180b 	add.w	r8, r8, fp, lsl #4
	PCD_SetRegisterBitMask(FIFOLevelReg, 0x80);		// FlushBuffer = 1, FIFO initialization
 80a1cda:	2280      	movs	r2, #128	; 0x80
 80a1cdc:	2114      	movs	r1, #20
 80a1cde:	4620      	mov	r0, r4
 80a1ce0:	f7ff febc 	bl	80a1a5c <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>
	byte bitFraming	= (rxAlign << 4) + txLastBits;		// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
 80a1ce4:	fa5f f888 	uxtb.w	r8, r8
	PCD_WriteRegister(FIFODataReg, sendLen, sendData);	// Write sendData to the FIFO
 80a1ce8:	9b05      	ldr	r3, [sp, #20]
 80a1cea:	2112      	movs	r1, #18
 80a1cec:	4620      	mov	r0, r4
 80a1cee:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 80a1cf2:	f7ff fe81 	bl	80a19f8 <_ZN7MFRC52217PCD_WriteRegisterEhhPh>
	PCD_WriteRegister(BitFramingReg, bitFraming);		// Bit adjustments
 80a1cf6:	4642      	mov	r2, r8
 80a1cf8:	211a      	movs	r1, #26
 80a1cfa:	4620      	mov	r0, r4
 80a1cfc:	f7ff fe67 	bl	80a19ce <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(CommandReg, command);			// Execute the command
 80a1d00:	4652      	mov	r2, sl
 80a1d02:	2102      	movs	r1, #2
 80a1d04:	4620      	mov	r0, r4
 80a1d06:	f7ff fe62 	bl	80a19ce <_ZN7MFRC52217PCD_WriteRegisterEhh>
	if (command == PCD_Transceive) 	{
 80a1d0a:	f1ba 0f0c 	cmp.w	sl, #12
 80a1d0e:	d104      	bne.n	80a1d1a <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x84>
		PCD_SetRegisterBitMask(BitFramingReg, 0x80);	// StartSend=1, transmission of data starts
 80a1d10:	2280      	movs	r2, #128	; 0x80
 80a1d12:	211a      	movs	r1, #26
 80a1d14:	4620      	mov	r0, r4
 80a1d16:	f7ff fea1 	bl	80a1a5c <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>
	byte txLastBits = validBits ? *validBits : 0;
 80a1d1a:	f44f 68fa 	mov.w	r8, #2000	; 0x7d0
	// Wait for the command to complete.
	// In PCD_Init() we set the TAuto flag in TModeReg. This means the timer automatically starts when the PCD stops transmitting.
	// Each iteration of the do-while-loop takes 17.86�s.
	i = 2000;
	while (1) {
		n = PCD_ReadRegister(ComIrqReg);	// ComIrqReg[7..0] bits are: Set1 TxIRq RxIRq IdleIRq   HiAlertIRq LoAlertIRq ErrIRq TimerIRq
 80a1d1e:	2108      	movs	r1, #8
 80a1d20:	4620      	mov	r0, r4
 80a1d22:	f7ff fe84 	bl	80a1a2e <_ZN7MFRC52216PCD_ReadRegisterEh>
		if (n & waitIRq) {					// One of the interrupts that signal success has been set.
 80a1d26:	9b03      	ldr	r3, [sp, #12]
 80a1d28:	4218      	tst	r0, r3
 80a1d2a:	d108      	bne.n	80a1d3e <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xa8>
			break;
		}
		if (n & 0x01) {						// Timer interrupt - nothing received in 25ms
 80a1d2c:	07c3      	lsls	r3, r0, #31
 80a1d2e:	d402      	bmi.n	80a1d36 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xa0>
			return STATUS_TIMEOUT;
		}
		if (--i == 0) {						// The emergency break. If all other condions fail we will eventually terminate on this one after 35.7ms. Communication with the MFRC522 might be down.
 80a1d30:	f1b8 0801 	subs.w	r8, r8, #1
 80a1d34:	d1f3      	bne.n	80a1d1e <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x88>
			return STATUS_TIMEOUT;
 80a1d36:	2004      	movs	r0, #4
 80a1d38:	e04d      	b.n	80a1dd6 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
	byte txLastBits = validBits ? *validBits : 0;
 80a1d3a:	46c8      	mov	r8, r9
 80a1d3c:	e7c0      	b.n	80a1cc0 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x2a>
			return STATUS_TIMEOUT;
		}
	}
	
	// Stop now if any errors except collisions were detected.
	byte errorRegValue = PCD_ReadRegister(ErrorReg); // ErrorReg[7..0] bits are: WrErr TempErr reserved BufferOvfl   CollErr CRCErr ParityErr ProtocolErr
 80a1d3e:	210c      	movs	r1, #12
 80a1d40:	4620      	mov	r0, r4
 80a1d42:	f7ff fe74 	bl	80a1a2e <_ZN7MFRC52216PCD_ReadRegisterEh>
	if (errorRegValue & 0x13) {	 // BufferOvfl ParityErr ProtocolErr
 80a1d46:	f010 0f13 	tst.w	r0, #19
	byte errorRegValue = PCD_ReadRegister(ErrorReg); // ErrorReg[7..0] bits are: WrErr TempErr reserved BufferOvfl   CollErr CRCErr ParityErr ProtocolErr
 80a1d4a:	4680      	mov	r8, r0
	if (errorRegValue & 0x13) {	 // BufferOvfl ParityErr ProtocolErr
 80a1d4c:	d146      	bne.n	80a1ddc <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x146>
		return STATUS_ERROR;
	}	

	// If the caller wants data back, get it from the MFRC522.
	if (backData && backLen) {
 80a1d4e:	b1dd      	cbz	r5, 80a1d88 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xf2>
 80a1d50:	b1d6      	cbz	r6, 80a1d88 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xf2>
		n = PCD_ReadRegister(FIFOLevelReg);						// Number of bytes in the FIFO
 80a1d52:	2114      	movs	r1, #20
 80a1d54:	4620      	mov	r0, r4
 80a1d56:	f7ff fe6a 	bl	80a1a2e <_ZN7MFRC52216PCD_ReadRegisterEh>
		if (n > *backLen) {
 80a1d5a:	7833      	ldrb	r3, [r6, #0]
		n = PCD_ReadRegister(FIFOLevelReg);						// Number of bytes in the FIFO
 80a1d5c:	4602      	mov	r2, r0
		if (n > *backLen) {
 80a1d5e:	4283      	cmp	r3, r0
 80a1d60:	d33e      	bcc.n	80a1de0 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x14a>
			return STATUS_NO_ROOM;
		}
		*backLen = n;												// Number of bytes returned
 80a1d62:	7030      	strb	r0, [r6, #0]
		PCD_ReadRegister(FIFODataReg, n, backData, rxAlign);		// Get received data from FIFO
 80a1d64:	462b      	mov	r3, r5
 80a1d66:	2112      	movs	r1, #18
 80a1d68:	4620      	mov	r0, r4
 80a1d6a:	f8cd b000 	str.w	fp, [sp]
 80a1d6e:	f7ff ff43 	bl	80a1bf8 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh>
		_validBits = PCD_ReadRegister(ControlReg) & 0x07;	// RxLastBits[2:0] indicates the number of valid bits in the last received byte. If this value is 000b, the whole byte is valid.
 80a1d72:	2118      	movs	r1, #24
 80a1d74:	4620      	mov	r0, r4
 80a1d76:	f7ff fe5a 	bl	80a1a2e <_ZN7MFRC52216PCD_ReadRegisterEh>
 80a1d7a:	f000 0707 	and.w	r7, r0, #7
		if (validBits) {
 80a1d7e:	f1b9 0f00 	cmp.w	r9, #0
 80a1d82:	d001      	beq.n	80a1d88 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xf2>
			*validBits = _validBits;
 80a1d84:	f889 7000 	strb.w	r7, [r9]
		}
	}
	
	// Tell about collisions
	if (errorRegValue & 0x08) { // CollErr
 80a1d88:	f018 0f08 	tst.w	r8, #8
 80a1d8c:	d12a      	bne.n	80a1de4 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x14e>
		return STATUS_COLLISION;
	}
	
	// Perform CRC_A validation if requested.
	if (backData && backLen && checkCRC) {
 80a1d8e:	b35d      	cbz	r5, 80a1de8 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x152>
 80a1d90:	b356      	cbz	r6, 80a1de8 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x152>
 80a1d92:	9b04      	ldr	r3, [sp, #16]
 80a1d94:	b343      	cbz	r3, 80a1de8 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x152>
		// In this case a MIFARE Classic NAK is not OK.
		if (*backLen == 1 && _validBits == 4) {
 80a1d96:	7832      	ldrb	r2, [r6, #0]
 80a1d98:	2a01      	cmp	r2, #1
 80a1d9a:	d103      	bne.n	80a1da4 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x10e>
 80a1d9c:	2f04      	cmp	r7, #4
 80a1d9e:	d125      	bne.n	80a1dec <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x156>
			return STATUS_MIFARE_NACK;
 80a1da0:	2009      	movs	r0, #9
 80a1da2:	e018      	b.n	80a1dd6 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
		}
		// We need at least the CRC_A value and all 8 bits of the last byte must be received.
		if (*backLen < 2 || _validBits != 0) {
 80a1da4:	d922      	bls.n	80a1dec <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x156>
 80a1da6:	bb0f      	cbnz	r7, 80a1dec <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x156>
			return STATUS_CRC_WRONG;
		}
		// Verify CRC_A - do our own calculation and store the control in controlBuffer.
		byte controlBuffer[2]; 
		n = PCD_CalculateCRC(&backData[0], *backLen - 2, &controlBuffer[0]);
 80a1da8:	3a02      	subs	r2, #2
 80a1daa:	4629      	mov	r1, r5
 80a1dac:	4620      	mov	r0, r4
 80a1dae:	ab07      	add	r3, sp, #28
 80a1db0:	b2d2      	uxtb	r2, r2
 80a1db2:	f7ff fe71 	bl	80a1a98 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
		if (n != STATUS_OK) {
 80a1db6:	2801      	cmp	r0, #1
 80a1db8:	d10d      	bne.n	80a1dd6 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
			return n;
		}
		if ((backData[*backLen - 2] != controlBuffer[0]) || (backData[*backLen - 1] != controlBuffer[1])) {
 80a1dba:	7833      	ldrb	r3, [r6, #0]
 80a1dbc:	441d      	add	r5, r3
 80a1dbe:	f815 2c02 	ldrb.w	r2, [r5, #-2]
 80a1dc2:	f89d 301c 	ldrb.w	r3, [sp, #28]
 80a1dc6:	429a      	cmp	r2, r3
 80a1dc8:	d110      	bne.n	80a1dec <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x156>
 80a1dca:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80a1dce:	f89d 301d 	ldrb.w	r3, [sp, #29]
 80a1dd2:	429a      	cmp	r2, r3
 80a1dd4:	d10a      	bne.n	80a1dec <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x156>
			return STATUS_CRC_WRONG;
		}
	}
	
	return STATUS_OK;
} // End PCD_CommunicateWithPICC()
 80a1dd6:	b009      	add	sp, #36	; 0x24
 80a1dd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return STATUS_ERROR;
 80a1ddc:	2002      	movs	r0, #2
 80a1dde:	e7fa      	b.n	80a1dd6 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
			return STATUS_NO_ROOM;
 80a1de0:	2005      	movs	r0, #5
 80a1de2:	e7f8      	b.n	80a1dd6 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
		return STATUS_COLLISION;
 80a1de4:	2003      	movs	r0, #3
 80a1de6:	e7f6      	b.n	80a1dd6 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
	return STATUS_OK;
 80a1de8:	2001      	movs	r0, #1
 80a1dea:	e7f4      	b.n	80a1dd6 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
			return STATUS_CRC_WRONG;
 80a1dec:	2008      	movs	r0, #8
 80a1dee:	e7f2      	b.n	80a1dd6 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>

080a1df0 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>:
								 ) {
 80a1df0:	b510      	push	{r4, lr}
 80a1df2:	b086      	sub	sp, #24
	return PCD_CommunicateWithPICC(PCD_Transceive, waitIRq, sendData, sendLen, backData, backLen, validBits, rxAlign, checkCRC);
 80a1df4:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
 80a1df8:	9200      	str	r2, [sp, #0]
 80a1dfa:	9405      	str	r4, [sp, #20]
 80a1dfc:	f89d 4028 	ldrb.w	r4, [sp, #40]	; 0x28
 80a1e00:	2230      	movs	r2, #48	; 0x30
 80a1e02:	9404      	str	r4, [sp, #16]
 80a1e04:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80a1e06:	9403      	str	r4, [sp, #12]
 80a1e08:	9c08      	ldr	r4, [sp, #32]
 80a1e0a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80a1e0e:	460b      	mov	r3, r1
 80a1e10:	210c      	movs	r1, #12
 80a1e12:	f7ff ff40 	bl	80a1c96 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>
} // End PCD_TransceiveData()
 80a1e16:	b006      	add	sp, #24
 80a1e18:	bd10      	pop	{r4, pc}

080a1e1a <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_>:
 * @return STATUS_OK on success, STATUS_??? otherwise.
 */ 
byte MFRC522::PICC_REQA_or_WUPA(	byte command, 		///< The command to send - PICC_CMD_REQA or PICC_CMD_WUPA
									byte *bufferATQA,	///< The buffer to store the ATQA (Answer to request) in
									byte *bufferSize	///< Buffer size, at least two bytes. Also number of bytes returned if STATUS_OK.
							   ) {
 80a1e1a:	b570      	push	{r4, r5, r6, lr}
 80a1e1c:	b088      	sub	sp, #32
 80a1e1e:	4606      	mov	r6, r0
 80a1e20:	461c      	mov	r4, r3
	byte validBits;
	byte status;
	
	if (bufferATQA == NULL || *bufferSize < 2) {	// The ATQA response is 2 bytes long.
 80a1e22:	4615      	mov	r5, r2
							   ) {
 80a1e24:	f88d 1017 	strb.w	r1, [sp, #23]
	if (bufferATQA == NULL || *bufferSize < 2) {	// The ATQA response is 2 bytes long.
 80a1e28:	b31a      	cbz	r2, 80a1e72 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x58>
 80a1e2a:	781b      	ldrb	r3, [r3, #0]
 80a1e2c:	2b01      	cmp	r3, #1
 80a1e2e:	d920      	bls.n	80a1e72 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x58>
		return STATUS_NO_ROOM;
	}
	PCD_ClearRegisterBitMask(CollReg, 0x80);			// ValuesAfterColl=1 => Bits received after collision are cleared.
 80a1e30:	2280      	movs	r2, #128	; 0x80
 80a1e32:	211c      	movs	r1, #28
 80a1e34:	f7ff fe21 	bl	80a1a7a <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>
	validBits = 7;										// For REQA and WUPA we need the short frame format - transmit only 7 bits of the last (and only) byte. TxLastBits = BitFramingReg[2..0]
 80a1e38:	2307      	movs	r3, #7
 80a1e3a:	f88d 301f 	strb.w	r3, [sp, #31]
	status = PCD_TransceiveData(&command, 1, bufferATQA, bufferSize, &validBits);
 80a1e3e:	2300      	movs	r3, #0
 80a1e40:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80a1e44:	f10d 031f 	add.w	r3, sp, #31
 80a1e48:	e9cd 4300 	strd	r4, r3, [sp]
 80a1e4c:	2201      	movs	r2, #1
 80a1e4e:	462b      	mov	r3, r5
 80a1e50:	4630      	mov	r0, r6
 80a1e52:	f10d 0117 	add.w	r1, sp, #23
 80a1e56:	f7ff ffcb 	bl	80a1df0 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
	if (status != STATUS_OK) {
 80a1e5a:	2801      	cmp	r0, #1
 80a1e5c:	d107      	bne.n	80a1e6e <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x54>
		return status;
	}
	if (*bufferSize != 2 || validBits != 0) {		// ATQA must be exactly 16 bits.
 80a1e5e:	7823      	ldrb	r3, [r4, #0]
 80a1e60:	2b02      	cmp	r3, #2
 80a1e62:	d108      	bne.n	80a1e76 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x5c>
 80a1e64:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80a1e68:	2b00      	cmp	r3, #0
		return STATUS_ERROR;
 80a1e6a:	bf18      	it	ne
 80a1e6c:	2002      	movne	r0, #2
	}
	return STATUS_OK;
} // End PICC_REQA_or_WUPA()
 80a1e6e:	b008      	add	sp, #32
 80a1e70:	bd70      	pop	{r4, r5, r6, pc}
		return STATUS_NO_ROOM;
 80a1e72:	2005      	movs	r0, #5
 80a1e74:	e7fb      	b.n	80a1e6e <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x54>
		return STATUS_ERROR;
 80a1e76:	2002      	movs	r0, #2
 80a1e78:	e7f9      	b.n	80a1e6e <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x54>

080a1e7a <_ZN7MFRC52213PICC_RequestAEPhS0_>:
							) {
 80a1e7a:	4613      	mov	r3, r2
	return PICC_REQA_or_WUPA(PICC_CMD_REQA, bufferATQA, bufferSize);
 80a1e7c:	460a      	mov	r2, r1
 80a1e7e:	2126      	movs	r1, #38	; 0x26
 80a1e80:	f7ff bfcb 	b.w	80a1e1a <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_>

080a1e84 <_ZN7MFRC52221PICC_IsNewCardPresentEv>:
 * 
 * @return bool
 */
bool MFRC522::PICC_IsNewCardPresent() {
	byte bufferATQA[2];
	byte bufferSize = sizeof(bufferATQA);
 80a1e84:	2302      	movs	r3, #2
bool MFRC522::PICC_IsNewCardPresent() {
 80a1e86:	b507      	push	{r0, r1, r2, lr}
	byte result = PICC_RequestA(bufferATQA, &bufferSize);
 80a1e88:	f10d 0203 	add.w	r2, sp, #3
 80a1e8c:	a901      	add	r1, sp, #4
	byte bufferSize = sizeof(bufferATQA);
 80a1e8e:	f88d 3003 	strb.w	r3, [sp, #3]
	byte result = PICC_RequestA(bufferATQA, &bufferSize);
 80a1e92:	f7ff fff2 	bl	80a1e7a <_ZN7MFRC52213PICC_RequestAEPhS0_>
	return (result == STATUS_OK || result == STATUS_COLLISION);
 80a1e96:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
} // End PICC_IsNewCardPresent()
 80a1e9a:	1e43      	subs	r3, r0, #1
 80a1e9c:	4258      	negs	r0, r3
 80a1e9e:	4158      	adcs	r0, r3
 80a1ea0:	b003      	add	sp, #12
 80a1ea2:	f85d fb04 	ldr.w	pc, [sp], #4

080a1ea6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh>:
						 ) {
 80a1ea6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (validBits > 80) {
 80a1eaa:	2a50      	cmp	r2, #80	; 0x50
						 ) {
 80a1eac:	4682      	mov	sl, r0
 80a1eae:	460f      	mov	r7, r1
 80a1eb0:	4690      	mov	r8, r2
 80a1eb2:	b08b      	sub	sp, #44	; 0x2c
	if (validBits > 80) {
 80a1eb4:	f200 813b 	bhi.w	80a212e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x288>
	PCD_ClearRegisterBitMask(CollReg, 0x80);			// ValuesAfterColl=1 => Bits received after collision are cleared.
 80a1eb8:	2280      	movs	r2, #128	; 0x80
 80a1eba:	211c      	movs	r1, #28
 80a1ebc:	f7ff fddd 	bl	80a1a7a <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>
				buffer[0] = PICC_CMD_SEL_CL1;
 80a1ec0:	2393      	movs	r3, #147	; 0x93
 80a1ec2:	f88d 301c 	strb.w	r3, [sp, #28]
				useCascadeTag = validBits && uid->size > 4;	// When we know that the UID has more than 4 bytes
 80a1ec6:	f1b8 0f00 	cmp.w	r8, #0
 80a1eca:	f000 80b9 	beq.w	80a2040 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x19a>
 80a1ece:	783c      	ldrb	r4, [r7, #0]
 80a1ed0:	2c04      	cmp	r4, #4
 80a1ed2:	bf94      	ite	ls
 80a1ed4:	2300      	movls	r3, #0
 80a1ed6:	2301      	movhi	r3, #1
				useCascadeTag = validBits && uid->size > 7;	// When we know that the UID has more than 7 bytes
 80a1ed8:	2501      	movs	r5, #1
 80a1eda:	2600      	movs	r6, #0
 80a1edc:	e00b      	b.n	80a1ef6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x50>
				buffer[0] = PICC_CMD_SEL_CL2;
 80a1ede:	2395      	movs	r3, #149	; 0x95
 80a1ee0:	f88d 301c 	strb.w	r3, [sp, #28]
				useCascadeTag = validBits && uid->size > 7;	// When we know that the UID has more than 7 bytes
 80a1ee4:	f1b8 0f00 	cmp.w	r8, #0
 80a1ee8:	f000 80ac 	beq.w	80a2044 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x19e>
 80a1eec:	783c      	ldrb	r4, [r7, #0]
 80a1eee:	2c07      	cmp	r4, #7
 80a1ef0:	bf94      	ite	ls
 80a1ef2:	2300      	movls	r3, #0
 80a1ef4:	2301      	movhi	r3, #1
		currentLevelKnownBits = validBits - (8 * uidIndex);
 80a1ef6:	eba8 04c6 	sub.w	r4, r8, r6, lsl #3
 80a1efa:	b264      	sxtb	r4, r4
		if (currentLevelKnownBits < 0) {
 80a1efc:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
		if (useCascadeTag) {
 80a1f00:	2b00      	cmp	r3, #0
 80a1f02:	f000 80a1 	beq.w	80a2048 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1a2>
			buffer[index++] = PICC_CMD_CT;
 80a1f06:	2288      	movs	r2, #136	; 0x88
 80a1f08:	2103      	movs	r1, #3
 80a1f0a:	f88d 201e 	strb.w	r2, [sp, #30]
		byte bytesToCopy = currentLevelKnownBits / 8 + (currentLevelKnownBits % 8 ? 1 : 0); // The number of bytes needed to represent the known bits for this level.
 80a1f0e:	f014 0207 	ands.w	r2, r4, #7
 80a1f12:	bf18      	it	ne
 80a1f14:	2201      	movne	r2, #1
 80a1f16:	eb02 02e4 	add.w	r2, r2, r4, asr #3
		if (bytesToCopy) {
 80a1f1a:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
		byte bytesToCopy = currentLevelKnownBits / 8 + (currentLevelKnownBits % 8 ? 1 : 0); // The number of bytes needed to represent the known bits for this level.
 80a1f1e:	b2e0      	uxtb	r0, r4
		if (bytesToCopy) {
 80a1f20:	d01a      	beq.n	80a1f58 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xb2>
			byte maxBytes = useCascadeTag ? 3 : 4; // Max 4 bytes in each Cascade Level. Only 3 left if we use the Cascade Tag
 80a1f22:	2b00      	cmp	r3, #0
 80a1f24:	bf14      	ite	ne
 80a1f26:	f04f 0c03 	movne.w	ip, #3
 80a1f2a:	f04f 0c04 	moveq.w	ip, #4
			for (count = 0; count < bytesToCopy; count++) {
 80a1f2e:	4594      	cmp	ip, r2
 80a1f30:	bf94      	ite	ls
 80a1f32:	eb01 020c 	addls.w	r2, r1, ip
 80a1f36:	188a      	addhi	r2, r1, r2
 80a1f38:	f106 0e01 	add.w	lr, r6, #1
 80a1f3c:	44be      	add	lr, r7
 80a1f3e:	b2d2      	uxtb	r2, r2
				buffer[index++] = uid->uidByte[uidIndex + count];
 80a1f40:	468c      	mov	ip, r1
 80a1f42:	3101      	adds	r1, #1
 80a1f44:	f81e 9b01 	ldrb.w	r9, [lr], #1
 80a1f48:	b2c9      	uxtb	r1, r1
 80a1f4a:	f10d 0b28 	add.w	fp, sp, #40	; 0x28
 80a1f4e:	44dc      	add	ip, fp
			for (count = 0; count < bytesToCopy; count++) {
 80a1f50:	4291      	cmp	r1, r2
				buffer[index++] = uid->uidByte[uidIndex + count];
 80a1f52:	f80c 9c0c 	strb.w	r9, [ip, #-12]
			for (count = 0; count < bytesToCopy; count++) {
 80a1f56:	d1f3      	bne.n	80a1f40 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x9a>
		if (useCascadeTag) {
 80a1f58:	b113      	cbz	r3, 80a1f60 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xba>
			currentLevelKnownBits += 8;
 80a1f5a:	f100 0408 	add.w	r4, r0, #8
 80a1f5e:	b264      	sxtb	r4, r4
			if (currentLevelKnownBits >= 32) { // All UID bits in this Cascade Level are known. This is a SELECT.
 80a1f60:	2c1f      	cmp	r4, #31
 80a1f62:	dd73      	ble.n	80a204c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1a6>
				buffer[1] = 0x70; // NVB - Number of Valid Bits: Seven whole bytes
 80a1f64:	f04f 0370 	mov.w	r3, #112	; 0x70
				buffer[6] = buffer[2] ^ buffer[3] ^ buffer[4] ^ buffer[5];
 80a1f68:	f89d 201f 	ldrb.w	r2, [sp, #31]
				buffer[1] = 0x70; // NVB - Number of Valid Bits: Seven whole bytes
 80a1f6c:	f88d 301d 	strb.w	r3, [sp, #29]
				buffer[6] = buffer[2] ^ buffer[3] ^ buffer[4] ^ buffer[5];
 80a1f70:	f89d 301e 	ldrb.w	r3, [sp, #30]
				result = PCD_CalculateCRC(buffer, 7, &buffer[7]);
 80a1f74:	4650      	mov	r0, sl
				buffer[6] = buffer[2] ^ buffer[3] ^ buffer[4] ^ buffer[5];
 80a1f76:	4053      	eors	r3, r2
 80a1f78:	f89d 2020 	ldrb.w	r2, [sp, #32]
				result = PCD_CalculateCRC(buffer, 7, &buffer[7]);
 80a1f7c:	a907      	add	r1, sp, #28
				buffer[6] = buffer[2] ^ buffer[3] ^ buffer[4] ^ buffer[5];
 80a1f7e:	4053      	eors	r3, r2
 80a1f80:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
 80a1f84:	4053      	eors	r3, r2
 80a1f86:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
				result = PCD_CalculateCRC(buffer, 7, &buffer[7]);
 80a1f8a:	2207      	movs	r2, #7
 80a1f8c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80a1f90:	f7ff fd82 	bl	80a1a98 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
				if (result != STATUS_OK) {
 80a1f94:	2801      	cmp	r0, #1
				result = PCD_CalculateCRC(buffer, 7, &buffer[7]);
 80a1f96:	4681      	mov	r9, r0
				if (result != STATUS_OK) {
 80a1f98:	f040 80c5 	bne.w	80a2126 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x280>
				txLastBits		= 0; // 0 => All 8 bits are valid.
 80a1f9c:	2300      	movs	r3, #0
 80a1f9e:	f88d 301a 	strb.w	r3, [sp, #26]
				responseLength	= 3;
 80a1fa2:	2303      	movs	r3, #3
				bufferUsed		= 9;
 80a1fa4:	f04f 0909 	mov.w	r9, #9
				responseLength	= 3;
 80a1fa8:	f88d 301b 	strb.w	r3, [sp, #27]
 80a1fac:	9404      	str	r4, [sp, #16]
				responseBuffer	= &buffer[6];
 80a1fae:	f10d 0b22 	add.w	fp, sp, #34	; 0x22
			rxAlign = txLastBits;											// Having a seperate variable is overkill. But it makes the next line easier to read.
 80a1fb2:	f89d 301a 	ldrb.w	r3, [sp, #26]
			PCD_WriteRegister(BitFramingReg, (rxAlign << 4) + txLastBits);	// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
 80a1fb6:	211a      	movs	r1, #26
 80a1fb8:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 80a1fbc:	4650      	mov	r0, sl
 80a1fbe:	b2d2      	uxtb	r2, r2
 80a1fc0:	9305      	str	r3, [sp, #20]
 80a1fc2:	f7ff fd04 	bl	80a19ce <_ZN7MFRC52217PCD_WriteRegisterEhh>
			result = PCD_TransceiveData(buffer, bufferUsed, responseBuffer, &responseLength, &txLastBits, rxAlign);			
 80a1fc6:	2200      	movs	r2, #0
 80a1fc8:	9b05      	ldr	r3, [sp, #20]
 80a1fca:	9203      	str	r2, [sp, #12]
 80a1fcc:	9302      	str	r3, [sp, #8]
 80a1fce:	f10d 031a 	add.w	r3, sp, #26
 80a1fd2:	9301      	str	r3, [sp, #4]
 80a1fd4:	f10d 031b 	add.w	r3, sp, #27
 80a1fd8:	464a      	mov	r2, r9
 80a1fda:	9300      	str	r3, [sp, #0]
 80a1fdc:	4650      	mov	r0, sl
 80a1fde:	465b      	mov	r3, fp
 80a1fe0:	a907      	add	r1, sp, #28
 80a1fe2:	f7ff ff05 	bl	80a1df0 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
			if (result == STATUS_COLLISION) { // More than one PICC in the field => collision.
 80a1fe6:	2803      	cmp	r0, #3
			result = PCD_TransceiveData(buffer, bufferUsed, responseBuffer, &responseLength, &txLastBits, rxAlign);			
 80a1fe8:	4681      	mov	r9, r0
			if (result == STATUS_COLLISION) { // More than one PICC in the field => collision.
 80a1fea:	d14b      	bne.n	80a2084 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1de>
				result = PCD_ReadRegister(CollReg); // CollReg[7..0] bits are: ValuesAfterColl reserved CollPosNotValid CollPos[4:0]
 80a1fec:	211c      	movs	r1, #28
 80a1fee:	4650      	mov	r0, sl
 80a1ff0:	f7ff fd1d 	bl	80a1a2e <_ZN7MFRC52216PCD_ReadRegisterEh>
				if (result & 0x20) { // CollPosNotValid
 80a1ff4:	0681      	lsls	r1, r0, #26
 80a1ff6:	f100 8096 	bmi.w	80a2126 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x280>
					collisionPos = 32;
 80a1ffa:	f010 001f 	ands.w	r0, r0, #31
 80a1ffe:	bf08      	it	eq
 80a2000:	2020      	moveq	r0, #32
				if (collisionPos <= currentLevelKnownBits) { // No progress - should not happen 
 80a2002:	42a0      	cmp	r0, r4
 80a2004:	f340 8084 	ble.w	80a2110 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x26a>
				count			= (currentLevelKnownBits - 1) % 8; // The bit to modify
 80a2008:	1e43      	subs	r3, r0, #1
				index			= 1 + (currentLevelKnownBits / 8) + (count ? 1 : 0); // First byte is index 0.
 80a200a:	f003 0207 	and.w	r2, r3, #7
 80a200e:	f013 0307 	ands.w	r3, r3, #7
 80a2012:	bf18      	it	ne
 80a2014:	2301      	movne	r3, #1
				currentLevelKnownBits = collisionPos;
 80a2016:	b244      	sxtb	r4, r0
				index			= 1 + (currentLevelKnownBits / 8) + (count ? 1 : 0); // First byte is index 0.
 80a2018:	08c0      	lsrs	r0, r0, #3
 80a201a:	3001      	adds	r0, #1
				buffer[index]	|= (1 << count); 
 80a201c:	4418      	add	r0, r3
 80a201e:	ab0a      	add	r3, sp, #40	; 0x28
 80a2020:	4418      	add	r0, r3
 80a2022:	2301      	movs	r3, #1
 80a2024:	fa03 f202 	lsl.w	r2, r3, r2
 80a2028:	f810 3c0c 	ldrb.w	r3, [r0, #-12]
 80a202c:	4313      	orrs	r3, r2
 80a202e:	f800 3c0c 	strb.w	r3, [r0, #-12]
		while ( ! selectDone) {
 80a2032:	e795      	b.n	80a1f60 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xba>
				buffer[0] = PICC_CMD_SEL_CL3;
 80a2034:	2397      	movs	r3, #151	; 0x97
				uidIndex = 6;
 80a2036:	2606      	movs	r6, #6
				buffer[0] = PICC_CMD_SEL_CL3;
 80a2038:	f88d 301c 	strb.w	r3, [sp, #28]
				useCascadeTag = false;						// Never used in CL3.
 80a203c:	4623      	mov	r3, r4
				break;
 80a203e:	e75a      	b.n	80a1ef6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x50>
				useCascadeTag = validBits && uid->size > 4;	// When we know that the UID has more than 4 bytes
 80a2040:	4643      	mov	r3, r8
 80a2042:	e749      	b.n	80a1ed8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x32>
				useCascadeTag = validBits && uid->size > 7;	// When we know that the UID has more than 7 bytes
 80a2044:	4643      	mov	r3, r8
 80a2046:	e756      	b.n	80a1ef6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x50>
		index = 2; // destination index in buffer[]
 80a2048:	2102      	movs	r1, #2
 80a204a:	e760      	b.n	80a1f0e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x68>
				bufferUsed		= index + (txLastBits ? 1 : 0);
 80a204c:	f014 0907 	ands.w	r9, r4, #7
 80a2050:	bf18      	it	ne
 80a2052:	f04f 0901 	movne.w	r9, #1
				count			= currentLevelKnownBits / 8;	// Number of whole bytes in the UID part.
 80a2056:	10e3      	asrs	r3, r4, #3
				index			= 2 + count;					// Number of whole bytes: SEL + NVB + UIDs
 80a2058:	3302      	adds	r3, #2
 80a205a:	b2db      	uxtb	r3, r3
				txLastBits		= currentLevelKnownBits % 8;
 80a205c:	f004 0207 	and.w	r2, r4, #7
 80a2060:	f88d 201a 	strb.w	r2, [sp, #26]
				buffer[1]		= (index << 4) + txLastBits;	// NVB - Number of Valid Bits
 80a2064:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 80a2068:	f88d 201d 	strb.w	r2, [sp, #29]
				responseBuffer	= &buffer[index];
 80a206c:	aa07      	add	r2, sp, #28
				bufferUsed		= index + (txLastBits ? 1 : 0);
 80a206e:	4499      	add	r9, r3
				responseBuffer	= &buffer[index];
 80a2070:	eb02 0b03 	add.w	fp, r2, r3
				responseLength	= sizeof(buffer) - index;
 80a2074:	f1c3 0309 	rsb	r3, r3, #9
				bufferUsed		= index + (txLastBits ? 1 : 0);
 80a2078:	fa5f f989 	uxtb.w	r9, r9
				responseLength	= sizeof(buffer) - index;
 80a207c:	f88d 301b 	strb.w	r3, [sp, #27]
 80a2080:	9404      	str	r4, [sp, #16]
 80a2082:	e796      	b.n	80a1fb2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x10c>
			else if (result != STATUS_OK) {
 80a2084:	2801      	cmp	r0, #1
 80a2086:	d14e      	bne.n	80a2126 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x280>
				if (currentLevelKnownBits >= 32) { // This was a SELECT.
 80a2088:	9b04      	ldr	r3, [sp, #16]
					currentLevelKnownBits = 32;
 80a208a:	2420      	movs	r4, #32
				if (currentLevelKnownBits >= 32) { // This was a SELECT.
 80a208c:	2b1f      	cmp	r3, #31
 80a208e:	f77f af69 	ble.w	80a1f64 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xbe>
		index			= (buffer[2] == PICC_CMD_CT) ? 3 : 2; // source index in buffer[]
 80a2092:	f89d 301e 	ldrb.w	r3, [sp, #30]
 80a2096:	2b88      	cmp	r3, #136	; 0x88
 80a2098:	d13d      	bne.n	80a2116 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x270>
 80a209a:	2303      	movs	r3, #3
		bytesToCopy		= (buffer[2] == PICC_CMD_CT) ? 3 : 4;
 80a209c:	461a      	mov	r2, r3
		for (count = 0; count < bytesToCopy; count++) {
 80a209e:	3601      	adds	r6, #1
 80a20a0:	441a      	add	r2, r3
 80a20a2:	443e      	add	r6, r7
 80a20a4:	b2d2      	uxtb	r2, r2
			uid->uidByte[uidIndex + count] = buffer[index++];
 80a20a6:	4619      	mov	r1, r3
 80a20a8:	a80a      	add	r0, sp, #40	; 0x28
 80a20aa:	3301      	adds	r3, #1
 80a20ac:	4401      	add	r1, r0
 80a20ae:	f811 1c0c 	ldrb.w	r1, [r1, #-12]
 80a20b2:	b2db      	uxtb	r3, r3
		for (count = 0; count < bytesToCopy; count++) {
 80a20b4:	4293      	cmp	r3, r2
			uid->uidByte[uidIndex + count] = buffer[index++];
 80a20b6:	f806 1b01 	strb.w	r1, [r6], #1
		for (count = 0; count < bytesToCopy; count++) {
 80a20ba:	d1f4      	bne.n	80a20a6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x200>
		if (responseLength != 3 || txLastBits != 0) {		// SAK must be exactly 24 bits (1 byte + CRC_A).
 80a20bc:	f89d 601b 	ldrb.w	r6, [sp, #27]
 80a20c0:	2e03      	cmp	r6, #3
 80a20c2:	d137      	bne.n	80a2134 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28e>
 80a20c4:	f89d 401a 	ldrb.w	r4, [sp, #26]
 80a20c8:	bba4      	cbnz	r4, 80a2134 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28e>
		result = PCD_CalculateCRC(responseBuffer, 1, &buffer[2]);
 80a20ca:	2201      	movs	r2, #1
 80a20cc:	4659      	mov	r1, fp
 80a20ce:	4650      	mov	r0, sl
 80a20d0:	f10d 031e 	add.w	r3, sp, #30
 80a20d4:	f7ff fce0 	bl	80a1a98 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
		if (result != STATUS_OK) {
 80a20d8:	2801      	cmp	r0, #1
		result = PCD_CalculateCRC(responseBuffer, 1, &buffer[2]);
 80a20da:	4681      	mov	r9, r0
		if (result != STATUS_OK) {
 80a20dc:	d123      	bne.n	80a2126 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x280>
		if ((buffer[2] != responseBuffer[1]) || (buffer[3] != responseBuffer[2])) {
 80a20de:	f89d 201e 	ldrb.w	r2, [sp, #30]
 80a20e2:	f89b 3001 	ldrb.w	r3, [fp, #1]
 80a20e6:	429a      	cmp	r2, r3
 80a20e8:	d127      	bne.n	80a213a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x294>
 80a20ea:	f89d 201f 	ldrb.w	r2, [sp, #31]
 80a20ee:	f89b 3002 	ldrb.w	r3, [fp, #2]
 80a20f2:	429a      	cmp	r2, r3
 80a20f4:	d121      	bne.n	80a213a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x294>
		if (responseBuffer[0] & 0x04) { // Cascade bit set - UID not complete yes
 80a20f6:	f89b 3000 	ldrb.w	r3, [fp]
 80a20fa:	075a      	lsls	r2, r3, #29
 80a20fc:	d50e      	bpl.n	80a211c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x276>
			cascadeLevel++;
 80a20fe:	3501      	adds	r5, #1
 80a2100:	b2ed      	uxtb	r5, r5
		switch (cascadeLevel) {
 80a2102:	2d03      	cmp	r5, #3
 80a2104:	d096      	beq.n	80a2034 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x18e>
 80a2106:	2d04      	cmp	r5, #4
 80a2108:	d002      	beq.n	80a2110 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x26a>
 80a210a:	2d02      	cmp	r5, #2
 80a210c:	f43f aee7 	beq.w	80a1ede <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x38>
 80a2110:	f04f 0906 	mov.w	r9, #6
 80a2114:	e007      	b.n	80a2126 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x280>
		index			= (buffer[2] == PICC_CMD_CT) ? 3 : 2; // source index in buffer[]
 80a2116:	2302      	movs	r3, #2
		bytesToCopy		= (buffer[2] == PICC_CMD_CT) ? 3 : 4;
 80a2118:	2204      	movs	r2, #4
 80a211a:	e7c0      	b.n	80a209e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1f8>
	uid->size = 3 * cascadeLevel + 1;
 80a211c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80a2120:	3501      	adds	r5, #1
			uid->sak = responseBuffer[0];
 80a2122:	72fb      	strb	r3, [r7, #11]
	uid->size = 3 * cascadeLevel + 1;
 80a2124:	703d      	strb	r5, [r7, #0]
} // End PICC_Select()
 80a2126:	4648      	mov	r0, r9
 80a2128:	b00b      	add	sp, #44	; 0x2c
 80a212a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return STATUS_INVALID;
 80a212e:	f04f 0907 	mov.w	r9, #7
 80a2132:	e7f8      	b.n	80a2126 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x280>
			return STATUS_ERROR;
 80a2134:	f04f 0902 	mov.w	r9, #2
 80a2138:	e7f5      	b.n	80a2126 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x280>
			return STATUS_CRC_WRONG;
 80a213a:	f04f 0908 	mov.w	r9, #8
 80a213e:	e7f2      	b.n	80a2126 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x280>

080a2140 <_ZN7MFRC52219PICC_ReadCardSerialEv>:
 * Remember to call PICC_IsNewCardPresent(), PICC_RequestA() or PICC_WakeupA() first.
 * The read UID is available in the class variable uid.
 * 
 * @return bool
 */
bool MFRC522::PICC_ReadCardSerial() {
 80a2140:	b508      	push	{r3, lr}
 80a2142:	4601      	mov	r1, r0
	byte result = PICC_Select(&uid);
 80a2144:	2200      	movs	r2, #0
 80a2146:	f7ff feae 	bl	80a1ea6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh>
	return (result == STATUS_OK);
} // End PICC_ReadCardSerial()
 80a214a:	1e43      	subs	r3, r0, #1
 80a214c:	4258      	negs	r0, r3
 80a214e:	4158      	adcs	r0, r3
 80a2150:	bd08      	pop	{r3, pc}

080a2152 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi>:

    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(char* domain, uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
 80a2152:	b538      	push	{r3, r4, r5, lr}
 80a2154:	461d      	mov	r5, r3
    this->callback = callback;
 80a2156:	9b05      	ldr	r3, [sp, #20]
void MQTT::initialize(char* domain, uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
 80a2158:	4604      	mov	r4, r0
    this->callback = callback;
 80a215a:	6303      	str	r3, [r0, #48]	; 0x30
    this->qoscallback = NULL;
 80a215c:	2300      	movs	r3, #0
 80a215e:	6343      	str	r3, [r0, #52]	; 0x34
    if (ip != NULL)
 80a2160:	b102      	cbz	r2, 80a2164 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x12>
        this->ip = ip;
 80a2162:	6482      	str	r2, [r0, #72]	; 0x48
    if (domain != NULL)
 80a2164:	b119      	cbz	r1, 80a216e <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x1c>
        this->domain = domain;
 80a2166:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80a216a:	f002 f87b 	bl	80a4264 <_ZN6StringaSEPKc>
    this->port = port;
    this->keepalive = keepalive;
 80a216e:	9b04      	ldr	r3, [sp, #16]

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
    if (buffer != NULL)
 80a2170:	69e0      	ldr	r0, [r4, #28]
    this->keepalive = keepalive;
 80a2172:	6523      	str	r3, [r4, #80]	; 0x50
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
 80a2174:	9b06      	ldr	r3, [sp, #24]
    this->port = port;
 80a2176:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
 80a217a:	2bff      	cmp	r3, #255	; 0xff
 80a217c:	bfb8      	it	lt
 80a217e:	23ff      	movlt	r3, #255	; 0xff
 80a2180:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    if (buffer != NULL)
 80a2184:	b108      	cbz	r0, 80a218a <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x38>
      delete[] buffer;
 80a2186:	f7fd ff8c 	bl	80a00a2 <_ZdaPv>
    buffer = new uint8_t[this->maxpacketsize];
 80a218a:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
 80a218e:	f7fd ff84 	bl	80a009a <_Znaj>
 80a2192:	61e0      	str	r0, [r4, #28]
}
 80a2194:	bd38      	pop	{r3, r4, r5, pc}
	...

080a2198 <_ZN4MQTTC1EPctiPFvS0_PhjEi>:
MQTT::MQTT(char* domain, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
 80a2198:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80a219c:	4604      	mov	r4, r0
 80a219e:	2600      	movs	r6, #0
 80a21a0:	4617      	mov	r7, r2
 80a21a2:	4698      	mov	r8, r3
 80a21a4:	460d      	mov	r5, r1
 80a21a6:	f001 ff19 	bl	80a3fdc <_ZN9TCPClientC1Ev>
 80a21aa:	490b      	ldr	r1, [pc, #44]	; (80a21d8 <_ZN4MQTTC1EPctiPFvS0_PhjEi+0x40>)
 80a21ac:	61e6      	str	r6, [r4, #28]
 80a21ae:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80a21b2:	f002 f805 	bl	80a41c0 <_ZN6StringC1EPKc>
    this->initialize(domain, NULL, port, keepalive, callback, maxpacketsize);
 80a21b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80a21b8:	4620      	mov	r0, r4
 80a21ba:	9302      	str	r3, [sp, #8]
 80a21bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a21be:	4632      	mov	r2, r6
 80a21c0:	e9cd 8300 	strd	r8, r3, [sp]
 80a21c4:	4629      	mov	r1, r5
 80a21c6:	463b      	mov	r3, r7
MQTT::MQTT(char* domain, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
 80a21c8:	64a6      	str	r6, [r4, #72]	; 0x48
    this->initialize(domain, NULL, port, keepalive, callback, maxpacketsize);
 80a21ca:	f7ff ffc2 	bl	80a2152 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi>
}
 80a21ce:	4620      	mov	r0, r4
 80a21d0:	b004      	add	sp, #16
 80a21d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a21d6:	bf00      	nop
 80a21d8:	080a89a0 	.word	0x080a89a0

080a21dc <_ZN4MQTT8readByteEv>:
        _client.stop();
    }
    return false;
}

uint8_t MQTT::readByte() {
 80a21dc:	b510      	push	{r4, lr}
 80a21de:	4604      	mov	r4, r0
    while(!_client.available()) {}
 80a21e0:	4620      	mov	r0, r4
 80a21e2:	f001 fe11 	bl	80a3e08 <_ZN9TCPClient9availableEv>
 80a21e6:	2800      	cmp	r0, #0
 80a21e8:	d0fa      	beq.n	80a21e0 <_ZN4MQTT8readByteEv+0x4>
    return _client.read();
 80a21ea:	4620      	mov	r0, r4
 80a21ec:	f001 fd4f 	bl	80a3c8e <_ZN9TCPClient4readEv>
}
 80a21f0:	b2c0      	uxtb	r0, r0
 80a21f2:	bd10      	pop	{r4, pc}

080a21f4 <_ZN4MQTT10readPacketEPh>:

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
 80a21f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a21f8:	4605      	mov	r5, r0
    uint16_t len = 0;
    buffer[len++] = readByte();
 80a21fa:	69c4      	ldr	r4, [r0, #28]
uint16_t MQTT::readPacket(uint8_t* lengthLength) {
 80a21fc:	4689      	mov	r9, r1
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
    uint32_t multiplier = 1;
 80a21fe:	2701      	movs	r7, #1
    buffer[len++] = readByte();
 80a2200:	f7ff ffec 	bl	80a21dc <_ZN4MQTT8readByteEv>
    uint16_t length = 0;
 80a2204:	f04f 0800 	mov.w	r8, #0
    buffer[len++] = readByte();
 80a2208:	7020      	strb	r0, [r4, #0]
 80a220a:	463c      	mov	r4, r7
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
 80a220c:	69eb      	ldr	r3, [r5, #28]
 80a220e:	f893 a000 	ldrb.w	sl, [r3]
 80a2212:	f00a 0af0 	and.w	sl, sl, #240	; 0xf0
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
 80a2216:	4628      	mov	r0, r5
 80a2218:	f7ff ffe0 	bl	80a21dc <_ZN4MQTT8readByteEv>
        buffer[len++] = digit;
 80a221c:	4626      	mov	r6, r4
 80a221e:	69eb      	ldr	r3, [r5, #28]
 80a2220:	3401      	adds	r4, #1
 80a2222:	5598      	strb	r0, [r3, r6]
        length += (digit & 127) * multiplier;
 80a2224:	f000 037f 	and.w	r3, r0, #127	; 0x7f
 80a2228:	fb03 8807 	mla	r8, r3, r7, r8
        multiplier *= 128;
    } while ((digit & 128) != 0);
 80a222c:	0603      	lsls	r3, r0, #24
        buffer[len++] = digit;
 80a222e:	b2a4      	uxth	r4, r4
        length += (digit & 127) * multiplier;
 80a2230:	fa1f f888 	uxth.w	r8, r8
        multiplier *= 128;
 80a2234:	ea4f 17c7 	mov.w	r7, r7, lsl #7
    } while ((digit & 128) != 0);
 80a2238:	d4ed      	bmi.n	80a2216 <_ZN4MQTT10readPacketEPh+0x22>
    *lengthLength = len-1;
 80a223a:	1e63      	subs	r3, r4, #1

    if (isPublish) {
 80a223c:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
    *lengthLength = len-1;
 80a2240:	f889 3000 	strb.w	r3, [r9]
    if (isPublish) {
 80a2244:	d124      	bne.n	80a2290 <_ZN4MQTT10readPacketEPh+0x9c>
        // Read in topic length to calculate bytes to skip over for Stream writing
        buffer[len++] = readByte();
 80a2246:	4628      	mov	r0, r5
 80a2248:	69ef      	ldr	r7, [r5, #28]
 80a224a:	f7ff ffc7 	bl	80a21dc <_ZN4MQTT8readByteEv>
 80a224e:	5538      	strb	r0, [r7, r4]
        buffer[len++] = readByte();
 80a2250:	4628      	mov	r0, r5
 80a2252:	69ef      	ldr	r7, [r5, #28]
 80a2254:	f7ff ffc2 	bl	80a21dc <_ZN4MQTT8readByteEv>
 80a2258:	1cf4      	adds	r4, r6, #3
        buffer[len++] = readByte();
 80a225a:	3602      	adds	r6, #2
        buffer[len++] = readByte();
 80a225c:	b2b6      	uxth	r6, r6
 80a225e:	55b8      	strb	r0, [r7, r6]
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
        start = 2;
 80a2260:	2602      	movs	r6, #2
        buffer[len++] = readByte();
 80a2262:	b2a4      	uxth	r4, r4
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
 80a2264:	b2b6      	uxth	r6, r6
 80a2266:	46b1      	mov	r9, r6
 80a2268:	4627      	mov	r7, r4
 80a226a:	45c1      	cmp	r9, r8
 80a226c:	d212      	bcs.n	80a2294 <_ZN4MQTT10readPacketEPh+0xa0>
        digit = readByte();
 80a226e:	4628      	mov	r0, r5
 80a2270:	f7ff ffb4 	bl	80a21dc <_ZN4MQTT8readByteEv>
        if (len < this->maxpacketsize) {
 80a2274:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
    for (uint16_t i = start;i<length;i++) {
 80a2278:	f109 0901 	add.w	r9, r9, #1
        if (len < this->maxpacketsize) {
 80a227c:	42bb      	cmp	r3, r7
            buffer[len] = digit;
 80a227e:	bf88      	it	hi
 80a2280:	69eb      	ldrhi	r3, [r5, #28]
    for (uint16_t i = start;i<length;i++) {
 80a2282:	fa1f f989 	uxth.w	r9, r9
            buffer[len] = digit;
 80a2286:	bf88      	it	hi
 80a2288:	55d8      	strbhi	r0, [r3, r7]
        }
        len++;
 80a228a:	3701      	adds	r7, #1
 80a228c:	b2bf      	uxth	r7, r7
    for (uint16_t i = start;i<length;i++) {
 80a228e:	e7ec      	b.n	80a226a <_ZN4MQTT10readPacketEPh+0x76>
    uint8_t start = 0;
 80a2290:	2600      	movs	r6, #0
 80a2292:	e7e7      	b.n	80a2264 <_ZN4MQTT10readPacketEPh+0x70>
 80a2294:	eba8 0006 	sub.w	r0, r8, r6
 80a2298:	45b0      	cmp	r8, r6
 80a229a:	bf2c      	ite	cs
 80a229c:	4606      	movcs	r6, r0
 80a229e:	2600      	movcc	r6, #0
    }

    if (len > this->maxpacketsize) {
 80a22a0:	f8b5 0054 	ldrh.w	r0, [r5, #84]	; 0x54
 80a22a4:	4434      	add	r4, r6
 80a22a6:	b2a4      	uxth	r4, r4
        len = 0; // This will cause the packet to be ignored.
    }

    return len;
}
 80a22a8:	42a0      	cmp	r0, r4
 80a22aa:	bf2c      	ite	cs
 80a22ac:	4620      	movcs	r0, r4
 80a22ae:	2000      	movcc	r0, #0
 80a22b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080a22b4 <_ZN4MQTT5writeEhPht>:
        return _client.write(buffer, length);
    }
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
 80a22b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80a22b6:	468c      	mov	ip, r1
 80a22b8:	461e      	mov	r6, r3
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
 80a22ba:	461d      	mov	r5, r3
bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
 80a22bc:	4607      	mov	r7, r0
    uint8_t llen = 0;
 80a22be:	2300      	movs	r3, #0
    do {
        digit = len % 128;
 80a22c0:	46ae      	mov	lr, r5
 80a22c2:	f005 017f 	and.w	r1, r5, #127	; 0x7f
        len = len / 128;
        if (len > 0) {
 80a22c6:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
 80a22ca:	a802      	add	r0, sp, #8
            digit |= 0x80;
 80a22cc:	bf88      	it	hi
 80a22ce:	f041 0180 	orrhi.w	r1, r1, #128	; 0x80
        lenBuf[pos++] = digit;
 80a22d2:	1c5c      	adds	r4, r3, #1
        llen++;
    } while(len > 0);
 80a22d4:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        lenBuf[pos++] = digit;
 80a22d8:	4403      	add	r3, r0
        len = len / 128;
 80a22da:	ea4f 15d5 	mov.w	r5, r5, lsr #7
        lenBuf[pos++] = digit;
 80a22de:	b2e4      	uxtb	r4, r4
 80a22e0:	f803 1c04 	strb.w	r1, [r3, #-4]
    } while(len > 0);
 80a22e4:	d810      	bhi.n	80a2308 <_ZN4MQTT5writeEhPht+0x54>

    buf[4-llen] = header;
 80a22e6:	f1c4 0304 	rsb	r3, r4, #4
 80a22ea:	18d1      	adds	r1, r2, r3
 80a22ec:	f802 c003 	strb.w	ip, [r2, r3]
    for (int i = 0; i < llen; i++) {
 80a22f0:	f1c4 0305 	rsb	r3, r4, #5
 80a22f4:	4413      	add	r3, r2
 80a22f6:	a801      	add	r0, sp, #4
 80a22f8:	3205      	adds	r2, #5
 80a22fa:	4293      	cmp	r3, r2
 80a22fc:	d006      	beq.n	80a230c <_ZN4MQTT5writeEhPht+0x58>
        buf[5-llen+i] = lenBuf[i];
 80a22fe:	f810 5b01 	ldrb.w	r5, [r0], #1
 80a2302:	f803 5b01 	strb.w	r5, [r3], #1
    for (int i = 0; i < llen; i++) {
 80a2306:	e7f8      	b.n	80a22fa <_ZN4MQTT5writeEhPht+0x46>
        lenBuf[pos++] = digit;
 80a2308:	4623      	mov	r3, r4
 80a230a:	e7d9      	b.n	80a22c0 <_ZN4MQTT5writeEhPht+0xc>
    }
    rc = _client.write(buf+(4-llen), length+1+llen);
 80a230c:	1c72      	adds	r2, r6, #1
 80a230e:	4422      	add	r2, r4
 80a2310:	4638      	mov	r0, r7
 80a2312:	f001 fc3f 	bl	80a3b94 <_ZN9TCPClient5writeEPKhj>
 80a2316:	4605      	mov	r5, r0
 80a2318:	f001 f8dc 	bl	80a34d4 <HAL_Timer_Get_Milli_Seconds>

    lastOutActivity = millis();
    return (rc == 1+llen+length);
 80a231c:	3401      	adds	r4, #1
    lastOutActivity = millis();
 80a231e:	6278      	str	r0, [r7, #36]	; 0x24
    return (rc == 1+llen+length);
 80a2320:	4434      	add	r4, r6
 80a2322:	b2a8      	uxth	r0, r5
}
 80a2324:	1a23      	subs	r3, r4, r0
 80a2326:	4258      	negs	r0, r3
 80a2328:	4158      	adcs	r0, r3
 80a232a:	b003      	add	sp, #12
 80a232c:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a232e <_ZN4MQTT10disconnectEv>:
    }
    return false;
}

void MQTT::disconnect() {
    buffer[0] = MQTTDISCONNECT;
 80a232e:	22e0      	movs	r2, #224	; 0xe0
void MQTT::disconnect() {
 80a2330:	b510      	push	{r4, lr}
    buffer[0] = MQTTDISCONNECT;
 80a2332:	69c3      	ldr	r3, [r0, #28]
void MQTT::disconnect() {
 80a2334:	4604      	mov	r4, r0
    buffer[0] = MQTTDISCONNECT;
 80a2336:	701a      	strb	r2, [r3, #0]
    buffer[1] = 0;
 80a2338:	2200      	movs	r2, #0
 80a233a:	69c3      	ldr	r3, [r0, #28]
 80a233c:	705a      	strb	r2, [r3, #1]
    _client.write(buffer,2);
 80a233e:	69c1      	ldr	r1, [r0, #28]
 80a2340:	2202      	movs	r2, #2
 80a2342:	f001 fc27 	bl	80a3b94 <_ZN9TCPClient5writeEPKhj>
    _client.stop();
 80a2346:	4620      	mov	r0, r4
 80a2348:	f001 fd98 	bl	80a3e7c <_ZN9TCPClient4stopEv>
 80a234c:	f001 f8c2 	bl	80a34d4 <HAL_Timer_Get_Milli_Seconds>
    lastInActivity = lastOutActivity = millis();
 80a2350:	e9c4 0009 	strd	r0, r0, [r4, #36]	; 0x24
}
 80a2354:	bd10      	pop	{r4, pc}

080a2356 <_ZN4MQTT11writeStringEPKcPht>:

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
 80a2356:	3302      	adds	r3, #2
uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
 80a2358:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a235a:	4604      	mov	r4, r0
    pos += 2;
 80a235c:	b298      	uxth	r0, r3
 80a235e:	2300      	movs	r3, #0
    while (*idp && pos < this->maxpacketsize) {
 80a2360:	5ccd      	ldrb	r5, [r1, r3]
 80a2362:	b14d      	cbz	r5, 80a2378 <_ZN4MQTT11writeStringEPKcPht+0x22>
 80a2364:	f8b4 6054 	ldrh.w	r6, [r4, #84]	; 0x54
 80a2368:	1c5f      	adds	r7, r3, #1
 80a236a:	4286      	cmp	r6, r0
 80a236c:	d904      	bls.n	80a2378 <_ZN4MQTT11writeStringEPKcPht+0x22>
        buf[pos++] = *idp++;
 80a236e:	1c46      	adds	r6, r0, #1
 80a2370:	5415      	strb	r5, [r2, r0]
    while (*idp && pos < this->maxpacketsize) {
 80a2372:	463b      	mov	r3, r7
        buf[pos++] = *idp++;
 80a2374:	b2b0      	uxth	r0, r6
    while (*idp && pos < this->maxpacketsize) {
 80a2376:	e7f3      	b.n	80a2360 <_ZN4MQTT11writeStringEPKcPht+0xa>
        i++;
    }
    buf[pos-i-2] = (i >> 8);
 80a2378:	b299      	uxth	r1, r3
 80a237a:	1a44      	subs	r4, r0, r1
 80a237c:	4422      	add	r2, r4
 80a237e:	1209      	asrs	r1, r1, #8
 80a2380:	f802 1c02 	strb.w	r1, [r2, #-2]
    buf[pos-i-1] = (i & 0xFF);
 80a2384:	f802 3c01 	strb.w	r3, [r2, #-1]
    return pos;
}
 80a2388:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a238a <_ZN4MQTT11isConnectedEv>:


bool MQTT::isConnected() {
 80a238a:	b538      	push	{r3, r4, r5, lr}
 80a238c:	4604      	mov	r4, r0
    bool rc = (int)_client.connected();
 80a238e:	f001 fdcc 	bl	80a3f2a <_ZN9TCPClient9connectedEv>
 80a2392:	2800      	cmp	r0, #0
 80a2394:	bf14      	ite	ne
 80a2396:	2501      	movne	r5, #1
 80a2398:	2500      	moveq	r5, #0
    if (!rc) _client.stop();
 80a239a:	d102      	bne.n	80a23a2 <_ZN4MQTT11isConnectedEv+0x18>
 80a239c:	4620      	mov	r0, r4
 80a239e:	f001 fd6d 	bl	80a3e7c <_ZN9TCPClient4stopEv>
    return rc;
}
 80a23a2:	4628      	mov	r0, r5
 80a23a4:	bd38      	pop	{r3, r4, r5, pc}
	...

080a23a8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>:
bool MQTT::connect(const char *id, const char *user, const char *pass, const char* willTopic, EMQTT_QOS willQos, uint8_t willRetain, const char* willMessage, bool cleanSession, MQTT_VERSION version) {
 80a23a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a23ac:	b086      	sub	sp, #24
 80a23ae:	4604      	mov	r4, r0
 80a23b0:	4689      	mov	r9, r1
 80a23b2:	4617      	mov	r7, r2
 80a23b4:	461e      	mov	r6, r3
 80a23b6:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 80a23ba:	f89d a048 	ldrb.w	sl, [sp, #72]	; 0x48
    if (!isConnected()) {
 80a23be:	f7ff ffe4 	bl	80a238a <_ZN4MQTT11isConnectedEv>
 80a23c2:	4605      	mov	r5, r0
 80a23c4:	2800      	cmp	r0, #0
 80a23c6:	f040 80c3 	bne.w	80a2550 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1a8>
        if (ip == NULL)
 80a23ca:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80a23cc:	2900      	cmp	r1, #0
 80a23ce:	f040 8087 	bne.w	80a24e0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x138>
            result = _client.connect(this->domain.c_str(), this->port);
 80a23d2:	4603      	mov	r3, r0
 80a23d4:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
 80a23d8:	4620      	mov	r0, r4
 80a23da:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80a23dc:	f001 fe16 	bl	80a400c <_ZN9TCPClient7connectEPKctm>
        if (result) {
 80a23e0:	2800      	cmp	r0, #0
 80a23e2:	d079      	beq.n	80a24d8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x130>
            nextMsgId = 1;
 80a23e4:	2301      	movs	r3, #1
 80a23e6:	8423      	strh	r3, [r4, #32]
            if (version == MQTT_V311) {
 80a23e8:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 80a23ec:	69e2      	ldr	r2, [r4, #28]
 80a23ee:	2b04      	cmp	r3, #4
 80a23f0:	f040 8081 	bne.w	80a24f6 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x14e>
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
 80a23f4:	4b57      	ldr	r3, [pc, #348]	; (80a2554 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1ac>)
 80a23f6:	6818      	ldr	r0, [r3, #0]
 80a23f8:	8899      	ldrh	r1, [r3, #4]
 80a23fa:	799b      	ldrb	r3, [r3, #6]
 80a23fc:	f8ad 1004 	strh.w	r1, [sp, #4]
 80a2400:	f88d 3006 	strb.w	r3, [sp, #6]
 80a2404:	9000      	str	r0, [sp, #0]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
 80a2406:	f8c2 0005 	str.w	r0, [r2, #5]
 80a240a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a240e:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 80a2412:	72d3      	strb	r3, [r2, #11]
                length+=sizeof(MQTT_HEADER_V311);
 80a2414:	230c      	movs	r3, #12
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
 80a2416:	f8a2 1009 	strh.w	r1, [r2, #9]
            if (willTopic) {
 80a241a:	f1b8 0f00 	cmp.w	r8, #0
 80a241e:	d07e      	beq.n	80a251e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x176>
                v = 0x06|(willQos<<3)|(willRetain<<5);
 80a2420:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
 80a2424:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 80a2428:	0140      	lsls	r0, r0, #5
 80a242a:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 80a242e:	f040 0006 	orr.w	r0, r0, #6
 80a2432:	b2c0      	uxtb	r0, r0
            if (!cleanSession) {
 80a2434:	f1ba 0f00 	cmp.w	sl, #0
 80a2438:	d101      	bne.n	80a243e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x96>
              v = v&0xfd;
 80a243a:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
            if(user != NULL) {
 80a243e:	b11f      	cbz	r7, 80a2448 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xa0>
                if(pass != NULL) {
 80a2440:	2e00      	cmp	r6, #0
 80a2442:	d16e      	bne.n	80a2522 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x17a>
                v = v|0x80;
 80a2444:	f040 0080 	orr.w	r0, r0, #128	; 0x80
            buffer[length++] = v;
 80a2448:	69e2      	ldr	r2, [r4, #28]
 80a244a:	54d0      	strb	r0, [r2, r3]
            buffer[length++] = ((this->keepalive) >> 8);
 80a244c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80a244e:	69e1      	ldr	r1, [r4, #28]
 80a2450:	1c58      	adds	r0, r3, #1
 80a2452:	1212      	asrs	r2, r2, #8
 80a2454:	540a      	strb	r2, [r1, r0]
            buffer[length++] = ((this->keepalive) & 0xFF);
 80a2456:	69e1      	ldr	r1, [r4, #28]
 80a2458:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80a245a:	1c9a      	adds	r2, r3, #2
 80a245c:	5488      	strb	r0, [r1, r2]
            length = writeString(id, buffer, length);
 80a245e:	3303      	adds	r3, #3
 80a2460:	4649      	mov	r1, r9
 80a2462:	4620      	mov	r0, r4
 80a2464:	69e2      	ldr	r2, [r4, #28]
 80a2466:	f7ff ff76 	bl	80a2356 <_ZN4MQTT11writeStringEPKcPht>
 80a246a:	4603      	mov	r3, r0
            if (willTopic) {
 80a246c:	f1b8 0f00 	cmp.w	r8, #0
 80a2470:	d00b      	beq.n	80a248a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xe2>
                length = writeString(willTopic, buffer, length);
 80a2472:	4641      	mov	r1, r8
 80a2474:	69e2      	ldr	r2, [r4, #28]
 80a2476:	4620      	mov	r0, r4
 80a2478:	f7ff ff6d 	bl	80a2356 <_ZN4MQTT11writeStringEPKcPht>
                length = writeString(willMessage, buffer, length);
 80a247c:	69e2      	ldr	r2, [r4, #28]
                length = writeString(willTopic, buffer, length);
 80a247e:	4603      	mov	r3, r0
                length = writeString(willMessage, buffer, length);
 80a2480:	9911      	ldr	r1, [sp, #68]	; 0x44
 80a2482:	4620      	mov	r0, r4
 80a2484:	f7ff ff67 	bl	80a2356 <_ZN4MQTT11writeStringEPKcPht>
 80a2488:	4603      	mov	r3, r0
            if(user != NULL) {
 80a248a:	b167      	cbz	r7, 80a24a6 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xfe>
                length = writeString(user,buffer,length);
 80a248c:	4639      	mov	r1, r7
 80a248e:	4620      	mov	r0, r4
 80a2490:	69e2      	ldr	r2, [r4, #28]
 80a2492:	f7ff ff60 	bl	80a2356 <_ZN4MQTT11writeStringEPKcPht>
 80a2496:	4603      	mov	r3, r0
                if(pass != NULL) {
 80a2498:	b12e      	cbz	r6, 80a24a6 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xfe>
                    length = writeString(pass,buffer,length);
 80a249a:	4631      	mov	r1, r6
 80a249c:	4620      	mov	r0, r4
 80a249e:	69e2      	ldr	r2, [r4, #28]
 80a24a0:	f7ff ff59 	bl	80a2356 <_ZN4MQTT11writeStringEPKcPht>
 80a24a4:	4603      	mov	r3, r0
            write(MQTTCONNECT, buffer, length-5);
 80a24a6:	3b05      	subs	r3, #5
 80a24a8:	2110      	movs	r1, #16
 80a24aa:	69e2      	ldr	r2, [r4, #28]
 80a24ac:	b29b      	uxth	r3, r3
 80a24ae:	4620      	mov	r0, r4
 80a24b0:	f7ff ff00 	bl	80a22b4 <_ZN4MQTT5writeEhPht>
 80a24b4:	f001 f80e 	bl	80a34d4 <HAL_Timer_Get_Milli_Seconds>
                if (t-lastInActivity > this->keepalive*1000UL) {
 80a24b8:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
            lastInActivity = lastOutActivity = millis();
 80a24bc:	e9c4 0009 	strd	r0, r0, [r4, #36]	; 0x24
            while (!_client.available()) {
 80a24c0:	4620      	mov	r0, r4
 80a24c2:	f001 fca1 	bl	80a3e08 <_ZN9TCPClient9availableEv>
 80a24c6:	bb78      	cbnz	r0, 80a2528 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x180>
 80a24c8:	f001 f804 	bl	80a34d4 <HAL_Timer_Get_Milli_Seconds>
                if (t-lastInActivity > this->keepalive*1000UL) {
 80a24cc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80a24ce:	1ac0      	subs	r0, r0, r3
 80a24d0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80a24d2:	4373      	muls	r3, r6
 80a24d4:	4298      	cmp	r0, r3
 80a24d6:	d9f3      	bls.n	80a24c0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x118>
        _client.stop();
 80a24d8:	4620      	mov	r0, r4
 80a24da:	f001 fccf 	bl	80a3e7c <_ZN9TCPClient4stopEv>
 80a24de:	e033      	b.n	80a2548 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1a0>
            result = _client.connect(this->ip, this->port);
 80a24e0:	4668      	mov	r0, sp
 80a24e2:	f002 fbb7 	bl	80a4c54 <_ZN9IPAddressC1EPKh>
 80a24e6:	462b      	mov	r3, r5
 80a24e8:	4669      	mov	r1, sp
 80a24ea:	4620      	mov	r0, r4
 80a24ec:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
 80a24f0:	f001 fc1a 	bl	80a3d28 <_ZN9TCPClient7connectE9IPAddresstm>
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a24f4:	e774      	b.n	80a23e0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x38>
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
 80a24f6:	46ec      	mov	ip, sp
 80a24f8:	4b17      	ldr	r3, [pc, #92]	; (80a2558 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1b0>)
 80a24fa:	6818      	ldr	r0, [r3, #0]
 80a24fc:	6859      	ldr	r1, [r3, #4]
 80a24fe:	7a1b      	ldrb	r3, [r3, #8]
 80a2500:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 80a2504:	f88c 3000 	strb.w	r3, [ip]
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
 80a2508:	466b      	mov	r3, sp
 80a250a:	cb03      	ldmia	r3!, {r0, r1}
 80a250c:	f8c2 0005 	str.w	r0, [r2, #5]
 80a2510:	f8c2 1009 	str.w	r1, [r2, #9]
 80a2514:	f89c 3000 	ldrb.w	r3, [ip]
 80a2518:	7353      	strb	r3, [r2, #13]
                length+=sizeof(MQTT_HEADER_V31);
 80a251a:	230e      	movs	r3, #14
 80a251c:	e77d      	b.n	80a241a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x72>
                v = 0x02;
 80a251e:	2002      	movs	r0, #2
 80a2520:	e788      	b.n	80a2434 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x8c>
                    v = v|(0x80>>1);
 80a2522:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
 80a2526:	e78f      	b.n	80a2448 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xa0>
            uint16_t len = readPacket(&llen);
 80a2528:	4669      	mov	r1, sp
 80a252a:	4620      	mov	r0, r4
 80a252c:	f7ff fe62 	bl	80a21f4 <_ZN4MQTT10readPacketEPh>
            if (len == 4) {
 80a2530:	2804      	cmp	r0, #4
 80a2532:	d1d1      	bne.n	80a24d8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x130>
                if (buffer[3] == CONN_ACCEPT) {
 80a2534:	69e3      	ldr	r3, [r4, #28]
 80a2536:	78de      	ldrb	r6, [r3, #3]
 80a2538:	2e00      	cmp	r6, #0
 80a253a:	d1cd      	bne.n	80a24d8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x130>
 80a253c:	f000 ffca 	bl	80a34d4 <HAL_Timer_Get_Milli_Seconds>
                    return true;
 80a2540:	2501      	movs	r5, #1
                    lastInActivity = millis();
 80a2542:	62a0      	str	r0, [r4, #40]	; 0x28
                    pingOutstanding = false;
 80a2544:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
}
 80a2548:	4628      	mov	r0, r5
 80a254a:	b006      	add	sp, #24
 80a254c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return false;
 80a2550:	2500      	movs	r5, #0
 80a2552:	e7f9      	b.n	80a2548 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1a0>
 80a2554:	080a864c 	.word	0x080a864c
 80a2558:	080a8653 	.word	0x080a8653

080a255c <_ZN4MQTT7connectEPKc>:
bool MQTT::connect(const char *id) {
 80a255c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    return connect(id, NULL, NULL, 0, QOS0, 0, 0, true);
 80a255e:	2301      	movs	r3, #1
 80a2560:	2204      	movs	r2, #4
 80a2562:	e9cd 3204 	strd	r3, r2, [sp, #16]
 80a2566:	2300      	movs	r3, #0
 80a2568:	461a      	mov	r2, r3
 80a256a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80a256e:	e9cd 3300 	strd	r3, r3, [sp]
 80a2572:	f7ff ff19 	bl	80a23a8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>
}
 80a2576:	b007      	add	sp, #28
 80a2578:	f85d fb04 	ldr.w	pc, [sp], #4

080a257c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
 80a257c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a2580:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 80a2584:	4604      	mov	r4, r0
 80a2586:	468b      	mov	fp, r1
 80a2588:	4616      	mov	r6, r2
 80a258a:	461f      	mov	r7, r3
 80a258c:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
 80a2590:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
 80a2594:	f89d 9030 	ldrb.w	r9, [sp, #48]	; 0x30
    if (isConnected()) {
 80a2598:	f7ff fef7 	bl	80a238a <_ZN4MQTT11isConnectedEv>
 80a259c:	2800      	cmp	r0, #0
 80a259e:	d050      	beq.n	80a2642 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xc6>
        memset(buffer, 0, this->maxpacketsize);
 80a25a0:	2100      	movs	r1, #0
 80a25a2:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54
 80a25a6:	69e0      	ldr	r0, [r4, #28]
 80a25a8:	f004 faf6 	bl	80a6b98 <memset>
        length = writeString(topic, buffer, length);
 80a25ac:	2305      	movs	r3, #5
 80a25ae:	4659      	mov	r1, fp
 80a25b0:	4620      	mov	r0, r4
 80a25b2:	69e2      	ldr	r2, [r4, #28]
 80a25b4:	f7ff fecf 	bl	80a2356 <_ZN4MQTT11writeStringEPKcPht>
        if (qos == QOS2 || qos == QOS1) {
 80a25b8:	1e6b      	subs	r3, r5, #1
 80a25ba:	2b01      	cmp	r3, #1
 80a25bc:	d815      	bhi.n	80a25ea <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x6e>
            nextMsgId += 1;
 80a25be:	8c23      	ldrh	r3, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
 80a25c0:	69e2      	ldr	r2, [r4, #28]
            nextMsgId += 1;
 80a25c2:	3301      	adds	r3, #1
 80a25c4:	b29b      	uxth	r3, r3
 80a25c6:	8423      	strh	r3, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
 80a25c8:	121b      	asrs	r3, r3, #8
 80a25ca:	5413      	strb	r3, [r2, r0]
 80a25cc:	1c41      	adds	r1, r0, #1
            buffer[length++] = (nextMsgId & 0xFF);
 80a25ce:	69e3      	ldr	r3, [r4, #28]
 80a25d0:	8c22      	ldrh	r2, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
 80a25d2:	b289      	uxth	r1, r1
            buffer[length++] = (nextMsgId & 0xFF);
 80a25d4:	3002      	adds	r0, #2
 80a25d6:	b280      	uxth	r0, r0
 80a25d8:	545a      	strb	r2, [r3, r1]
            if (messageid != NULL)
 80a25da:	f1b8 0f00 	cmp.w	r8, #0
 80a25de:	d004      	beq.n	80a25ea <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x6e>
                *messageid = nextMsgId++;
 80a25e0:	8c23      	ldrh	r3, [r4, #32]
 80a25e2:	1c5a      	adds	r2, r3, #1
 80a25e4:	8422      	strh	r2, [r4, #32]
 80a25e6:	f8a8 3000 	strh.w	r3, [r8]
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
 80a25ea:	2100      	movs	r1, #0
 80a25ec:	180b      	adds	r3, r1, r0
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
 80a25ee:	428f      	cmp	r7, r1
 80a25f0:	69e2      	ldr	r2, [r4, #28]
 80a25f2:	b29b      	uxth	r3, r3
 80a25f4:	d90a      	bls.n	80a260c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x90>
 80a25f6:	f8b4 c054 	ldrh.w	ip, [r4, #84]	; 0x54
 80a25fa:	459c      	cmp	ip, r3
 80a25fc:	d906      	bls.n	80a260c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x90>
            buffer[length++] = payload[i];
 80a25fe:	f816 c001 	ldrb.w	ip, [r6, r1]
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
 80a2602:	3101      	adds	r1, #1
            buffer[length++] = payload[i];
 80a2604:	f802 c003 	strb.w	ip, [r2, r3]
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
 80a2608:	b289      	uxth	r1, r1
 80a260a:	e7ef      	b.n	80a25ec <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x70>
            header |= 1;
 80a260c:	f1ba 0f00 	cmp.w	sl, #0
 80a2610:	bf0c      	ite	eq
 80a2612:	2130      	moveq	r1, #48	; 0x30
 80a2614:	2131      	movne	r1, #49	; 0x31
        if (dup) {
 80a2616:	f1b9 0f00 	cmp.w	r9, #0
 80a261a:	d001      	beq.n	80a2620 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xa4>
            header |= DUP_FLAG_ON_MASK;
 80a261c:	f041 0108 	orr.w	r1, r1, #8
        if (qos == QOS2)
 80a2620:	2d02      	cmp	r5, #2
 80a2622:	d109      	bne.n	80a2638 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xbc>
            header |= MQTTQOS2_HEADER_MASK;
 80a2624:	f041 0104 	orr.w	r1, r1, #4
        return write(header, buffer, length-5);
 80a2628:	4620      	mov	r0, r4
 80a262a:	3b05      	subs	r3, #5
 80a262c:	b29b      	uxth	r3, r3
}
 80a262e:	b001      	add	sp, #4
 80a2630:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        return write(header, buffer, length-5);
 80a2634:	f7ff be3e 	b.w	80a22b4 <_ZN4MQTT5writeEhPht>
        else if (qos == QOS1)
 80a2638:	2d01      	cmp	r5, #1
            header |= MQTTQOS1_HEADER_MASK;
 80a263a:	bf08      	it	eq
 80a263c:	f041 0102 	orreq.w	r1, r1, #2
 80a2640:	e7f2      	b.n	80a2628 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xac>
}
 80a2642:	b001      	add	sp, #4
 80a2644:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a2648 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
 80a2648:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return publish(topic, payload, plength, retain, qos, false, messageid);
 80a264a:	9c08      	ldr	r4, [sp, #32]
 80a264c:	9403      	str	r4, [sp, #12]
 80a264e:	2400      	movs	r4, #0
 80a2650:	9402      	str	r4, [sp, #8]
 80a2652:	f89d 401c 	ldrb.w	r4, [sp, #28]
 80a2656:	9401      	str	r4, [sp, #4]
 80a2658:	f89d 4018 	ldrb.w	r4, [sp, #24]
 80a265c:	9400      	str	r4, [sp, #0]
 80a265e:	f7ff ff8d 	bl	80a257c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>
}
 80a2662:	b004      	add	sp, #16
 80a2664:	bd10      	pop	{r4, pc}

080a2666 <_ZN4MQTT7publishEPKcS1_>:
bool MQTT::publish(const char* topic, const char* payload) {
 80a2666:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80a2668:	4605      	mov	r5, r0
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
 80a266a:	4610      	mov	r0, r2
bool MQTT::publish(const char* topic, const char* payload) {
 80a266c:	4614      	mov	r4, r2
 80a266e:	460e      	mov	r6, r1
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
 80a2670:	f005 f832 	bl	80a76d8 <strlen>
 80a2674:	2200      	movs	r2, #0
 80a2676:	4603      	mov	r3, r0
 80a2678:	e9cd 2201 	strd	r2, r2, [sp, #4]
 80a267c:	9200      	str	r2, [sp, #0]
 80a267e:	4631      	mov	r1, r6
 80a2680:	4622      	mov	r2, r4
 80a2682:	4628      	mov	r0, r5
 80a2684:	f7ff ffe0 	bl	80a2648 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>
}
 80a2688:	b004      	add	sp, #16
 80a268a:	bd70      	pop	{r4, r5, r6, pc}

080a268c <_ZN4MQTT14publishReleaseEt>:
bool MQTT::publishRelease(uint16_t messageid) {
 80a268c:	b538      	push	{r3, r4, r5, lr}
 80a268e:	4604      	mov	r4, r0
 80a2690:	460d      	mov	r5, r1
    if (isConnected()) {
 80a2692:	f7ff fe7a 	bl	80a238a <_ZN4MQTT11isConnectedEv>
 80a2696:	b190      	cbz	r0, 80a26be <_ZN4MQTT14publishReleaseEt+0x32>
        buffer[length++] = MQTTPUBREL | MQTTQOS1_HEADER_MASK;
 80a2698:	2262      	movs	r2, #98	; 0x62
 80a269a:	69e3      	ldr	r3, [r4, #28]
        return _client.write(buffer, length);
 80a269c:	4620      	mov	r0, r4
        buffer[length++] = MQTTPUBREL | MQTTQOS1_HEADER_MASK;
 80a269e:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
 80a26a0:	2202      	movs	r2, #2
 80a26a2:	69e3      	ldr	r3, [r4, #28]
 80a26a4:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
 80a26a6:	69e3      	ldr	r3, [r4, #28]
 80a26a8:	122a      	asrs	r2, r5, #8
 80a26aa:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
 80a26ac:	69e3      	ldr	r3, [r4, #28]
        return _client.write(buffer, length);
 80a26ae:	2204      	movs	r2, #4
        buffer[length++] = (messageid & 0xFF);
 80a26b0:	70dd      	strb	r5, [r3, #3]
        return _client.write(buffer, length);
 80a26b2:	69e1      	ldr	r1, [r4, #28]
 80a26b4:	f001 fa6e 	bl	80a3b94 <_ZN9TCPClient5writeEPKhj>
 80a26b8:	3800      	subs	r0, #0
 80a26ba:	bf18      	it	ne
 80a26bc:	2001      	movne	r0, #1
}
 80a26be:	bd38      	pop	{r3, r4, r5, pc}

080a26c0 <_ZN4MQTT15publishCompleteEt>:
bool MQTT::publishComplete(uint16_t messageid) {
 80a26c0:	b538      	push	{r3, r4, r5, lr}
 80a26c2:	4604      	mov	r4, r0
 80a26c4:	460d      	mov	r5, r1
    if (isConnected()) {
 80a26c6:	f7ff fe60 	bl	80a238a <_ZN4MQTT11isConnectedEv>
 80a26ca:	b190      	cbz	r0, 80a26f2 <_ZN4MQTT15publishCompleteEt+0x32>
        buffer[length++] = MQTTPUBCOMP | MQTTQOS1_HEADER_MASK;
 80a26cc:	2272      	movs	r2, #114	; 0x72
 80a26ce:	69e3      	ldr	r3, [r4, #28]
        return _client.write(buffer, length);
 80a26d0:	4620      	mov	r0, r4
        buffer[length++] = MQTTPUBCOMP | MQTTQOS1_HEADER_MASK;
 80a26d2:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
 80a26d4:	2202      	movs	r2, #2
 80a26d6:	69e3      	ldr	r3, [r4, #28]
 80a26d8:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
 80a26da:	69e3      	ldr	r3, [r4, #28]
 80a26dc:	122a      	asrs	r2, r5, #8
 80a26de:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
 80a26e0:	69e3      	ldr	r3, [r4, #28]
        return _client.write(buffer, length);
 80a26e2:	2204      	movs	r2, #4
        buffer[length++] = (messageid & 0xFF);
 80a26e4:	70dd      	strb	r5, [r3, #3]
        return _client.write(buffer, length);
 80a26e6:	69e1      	ldr	r1, [r4, #28]
 80a26e8:	f001 fa54 	bl	80a3b94 <_ZN9TCPClient5writeEPKhj>
 80a26ec:	3800      	subs	r0, #0
 80a26ee:	bf18      	it	ne
 80a26f0:	2001      	movne	r0, #1
}
 80a26f2:	bd38      	pop	{r3, r4, r5, pc}

080a26f4 <_ZN4MQTT4loopEv>:
bool MQTT::loop() {
 80a26f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a26f8:	b087      	sub	sp, #28
 80a26fa:	af00      	add	r7, sp, #0
 80a26fc:	4604      	mov	r4, r0
    if (isConnected()) {
 80a26fe:	f7ff fe44 	bl	80a238a <_ZN4MQTT11isConnectedEv>
 80a2702:	4681      	mov	r9, r0
 80a2704:	b1b0      	cbz	r0, 80a2734 <_ZN4MQTT4loopEv+0x40>
 80a2706:	f000 fee5 	bl	80a34d4 <HAL_Timer_Get_Milli_Seconds>
        if ((t - lastInActivity > this->keepalive*1000UL) || (t - lastOutActivity > this->keepalive*1000UL)) {
 80a270a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a270e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80a2710:	4606      	mov	r6, r0
 80a2712:	4353      	muls	r3, r2
 80a2714:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80a2716:	1a82      	subs	r2, r0, r2
 80a2718:	429a      	cmp	r2, r3
 80a271a:	d803      	bhi.n	80a2724 <_ZN4MQTT4loopEv+0x30>
 80a271c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80a271e:	1a82      	subs	r2, r0, r2
 80a2720:	4293      	cmp	r3, r2
 80a2722:	d21b      	bcs.n	80a275c <_ZN4MQTT4loopEv+0x68>
            if (pingOutstanding) {
 80a2724:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80a2728:	b14b      	cbz	r3, 80a273e <_ZN4MQTT4loopEv+0x4a>
                _client.stop();
 80a272a:	4620      	mov	r0, r4
 80a272c:	f001 fba6 	bl	80a3e7c <_ZN9TCPClient4stopEv>
                return false;
 80a2730:	f04f 0900 	mov.w	r9, #0
}
 80a2734:	4648      	mov	r0, r9
 80a2736:	371c      	adds	r7, #28
 80a2738:	46bd      	mov	sp, r7
 80a273a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                buffer[0] = MQTTPINGREQ;
 80a273e:	21c0      	movs	r1, #192	; 0xc0
 80a2740:	69e2      	ldr	r2, [r4, #28]
                _client.write(buffer,2);
 80a2742:	4620      	mov	r0, r4
                buffer[0] = MQTTPINGREQ;
 80a2744:	7011      	strb	r1, [r2, #0]
                buffer[1] = 0;
 80a2746:	69e2      	ldr	r2, [r4, #28]
 80a2748:	7053      	strb	r3, [r2, #1]
                _client.write(buffer,2);
 80a274a:	69e1      	ldr	r1, [r4, #28]
 80a274c:	2202      	movs	r2, #2
 80a274e:	f001 fa21 	bl	80a3b94 <_ZN9TCPClient5writeEPKhj>
                pingOutstanding = true;
 80a2752:	2301      	movs	r3, #1
                lastInActivity = t;
 80a2754:	e9c4 6609 	strd	r6, r6, [r4, #36]	; 0x24
                pingOutstanding = true;
 80a2758:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
        if (_client.available()) {
 80a275c:	4620      	mov	r0, r4
 80a275e:	f001 fb53 	bl	80a3e08 <_ZN9TCPClient9availableEv>
 80a2762:	2800      	cmp	r0, #0
 80a2764:	d0e6      	beq.n	80a2734 <_ZN4MQTT4loopEv+0x40>
            uint16_t len = readPacket(&llen);
 80a2766:	4620      	mov	r0, r4
 80a2768:	f107 0117 	add.w	r1, r7, #23
 80a276c:	f7ff fd42 	bl	80a21f4 <_ZN4MQTT10readPacketEPh>
            if (len > 0) {
 80a2770:	4683      	mov	fp, r0
 80a2772:	2800      	cmp	r0, #0
 80a2774:	d0de      	beq.n	80a2734 <_ZN4MQTT4loopEv+0x40>
                uint8_t type = buffer[0]&0xF0;
 80a2776:	69e3      	ldr	r3, [r4, #28]
                lastInActivity = t;
 80a2778:	62a6      	str	r6, [r4, #40]	; 0x28
                uint8_t type = buffer[0]&0xF0;
 80a277a:	7819      	ldrb	r1, [r3, #0]
 80a277c:	f001 02f0 	and.w	r2, r1, #240	; 0xf0
                if (type == MQTTPUBLISH) {
 80a2780:	2a30      	cmp	r2, #48	; 0x30
 80a2782:	d17d      	bne.n	80a2880 <_ZN4MQTT4loopEv+0x18c>
                    if (callback) {
 80a2784:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80a2788:	f1ba 0f00 	cmp.w	sl, #0
 80a278c:	d0d2      	beq.n	80a2734 <_ZN4MQTT4loopEv+0x40>
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
 80a278e:	f897 c017 	ldrb.w	ip, [r7, #23]
                        }
 80a2792:	f8c7 d000 	str.w	sp, [r7]
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
 80a2796:	eb03 020c 	add.w	r2, r3, ip
 80a279a:	7855      	ldrb	r5, [r2, #1]
 80a279c:	7891      	ldrb	r1, [r2, #2]
 80a279e:	eb01 2105 	add.w	r1, r1, r5, lsl #8
 80a27a2:	b28d      	uxth	r5, r1
                        char topic[tl+1];
 80a27a4:	4669      	mov	r1, sp
 80a27a6:	f105 0208 	add.w	r2, r5, #8
 80a27aa:	08d2      	lsrs	r2, r2, #3
 80a27ac:	eba1 02c2 	sub.w	r2, r1, r2, lsl #3
 80a27b0:	4695      	mov	sp, r2
 80a27b2:	4668      	mov	r0, sp
                        for (uint16_t i=0;i<tl;i++) {
 80a27b4:	f10c 0203 	add.w	r2, ip, #3
 80a27b8:	60fa      	str	r2, [r7, #12]
 80a27ba:	eb03 0e02 	add.w	lr, r3, r2
 80a27be:	eb0d 0205 	add.w	r2, sp, r5
 80a27c2:	f8c7 d008 	str.w	sp, [r7, #8]
 80a27c6:	607a      	str	r2, [r7, #4]
 80a27c8:	e9d7 2101 	ldrd	r2, r1, [r7, #4]
 80a27cc:	428a      	cmp	r2, r1
 80a27ce:	d006      	beq.n	80a27de <_ZN4MQTT4loopEv+0xea>
                            topic[i] = buffer[llen+3+i];
 80a27d0:	460a      	mov	r2, r1
 80a27d2:	f81e 8b01 	ldrb.w	r8, [lr], #1
 80a27d6:	f802 8b01 	strb.w	r8, [r2], #1
 80a27da:	60ba      	str	r2, [r7, #8]
                        for (uint16_t i=0;i<tl;i++) {
 80a27dc:	e7f4      	b.n	80a27c8 <_ZN4MQTT4loopEv+0xd4>
                        topic[tl] = 0;
 80a27de:	2200      	movs	r2, #0
 80a27e0:	5542      	strb	r2, [r0, r5]
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
 80a27e2:	f893 8000 	ldrb.w	r8, [r3]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
 80a27e6:	68f9      	ldr	r1, [r7, #12]
 80a27e8:	f008 0806 	and.w	r8, r8, #6
 80a27ec:	ebab 020c 	sub.w	r2, fp, ip
 80a27f0:	3a03      	subs	r2, #3
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
 80a27f2:	f1b8 0f02 	cmp.w	r8, #2
 80a27f6:	eba2 0205 	sub.w	r2, r2, r5
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
 80a27fa:	4429      	add	r1, r5
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
 80a27fc:	d124      	bne.n	80a2848 <_ZN4MQTT4loopEv+0x154>
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
 80a27fe:	f813 e001 	ldrb.w	lr, [r3, r1]
 80a2802:	4419      	add	r1, r3
 80a2804:	f891 b001 	ldrb.w	fp, [r1, #1]
                            payload = buffer+llen+3+tl+2;
 80a2808:	f10c 0105 	add.w	r1, ip, #5
 80a280c:	4429      	add	r1, r5
                            callback(topic,payload,len-llen-3-tl-2);
 80a280e:	3a02      	subs	r2, #2
 80a2810:	4419      	add	r1, r3
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
 80a2812:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
                            callback(topic,payload,len-llen-3-tl-2);
 80a2816:	47d0      	blx	sl
                            buffer[0] = MQTTPUBACK; // respond with PUBACK
 80a2818:	2240      	movs	r2, #64	; 0x40
 80a281a:	69e3      	ldr	r3, [r4, #28]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
 80a281c:	fa1f fb8b 	uxth.w	fp, fp
                            buffer[0] = MQTTPUBACK; // respond with PUBACK
 80a2820:	701a      	strb	r2, [r3, #0]
                            buffer[1] = 2;
 80a2822:	69e3      	ldr	r3, [r4, #28]
 80a2824:	f883 8001 	strb.w	r8, [r3, #1]
                            buffer[2] = (msgId >> 8);
 80a2828:	69e3      	ldr	r3, [r4, #28]
 80a282a:	ea4f 222b 	mov.w	r2, fp, asr #8
 80a282e:	709a      	strb	r2, [r3, #2]
                            buffer[3] = (msgId & 0xFF);
 80a2830:	69e3      	ldr	r3, [r4, #28]
                            _client.write(buffer,4);
 80a2832:	2204      	movs	r2, #4
                            buffer[3] = (msgId & 0xFF);
 80a2834:	f883 b003 	strb.w	fp, [r3, #3]
                            _client.write(buffer,4);
 80a2838:	4620      	mov	r0, r4
 80a283a:	69e1      	ldr	r1, [r4, #28]
 80a283c:	f001 f9aa 	bl	80a3b94 <_ZN9TCPClient5writeEPKhj>
                            lastOutActivity = t;
 80a2840:	6266      	str	r6, [r4, #36]	; 0x24
 80a2842:	f8d7 d000 	ldr.w	sp, [r7]
 80a2846:	e775      	b.n	80a2734 <_ZN4MQTT4loopEv+0x40>
        						    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
 80a2848:	f1b8 0f04 	cmp.w	r8, #4
 80a284c:	d115      	bne.n	80a287a <_ZN4MQTT4loopEv+0x186>
							              msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
 80a284e:	f813 e001 	ldrb.w	lr, [r3, r1]
 80a2852:	4419      	add	r1, r3
 80a2854:	f891 b001 	ldrb.w	fp, [r1, #1]
							              payload = buffer + llen + 3 + tl + 2;
 80a2858:	f10c 0105 	add.w	r1, ip, #5
 80a285c:	4429      	add	r1, r5
							              callback(topic, payload, len - llen - 3 - tl - 2);
 80a285e:	3a02      	subs	r2, #2
 80a2860:	4419      	add	r1, r3
							              msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
 80a2862:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
							              callback(topic, payload, len - llen - 3 - tl - 2);
 80a2866:	47d0      	blx	sl
              							buffer[0] = MQTTPUBREC; // respond with PUBREC
 80a2868:	2250      	movs	r2, #80	; 0x50
 80a286a:	69e3      	ldr	r3, [r4, #28]
							              msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
 80a286c:	fa1f fb8b 	uxth.w	fp, fp
              							buffer[0] = MQTTPUBREC; // respond with PUBREC
 80a2870:	701a      	strb	r2, [r3, #0]
              							buffer[1] = 2;
 80a2872:	2202      	movs	r2, #2
 80a2874:	69e3      	ldr	r3, [r4, #28]
 80a2876:	705a      	strb	r2, [r3, #1]
              							buffer[2] = (msgId >> 8);
 80a2878:	e7d6      	b.n	80a2828 <_ZN4MQTT4loopEv+0x134>
                            callback(topic,payload,len-llen-3-tl);
 80a287a:	4419      	add	r1, r3
 80a287c:	47d0      	blx	sl
 80a287e:	e7e0      	b.n	80a2842 <_ZN4MQTT4loopEv+0x14e>
                } else if (type == MQTTPUBREC) {
 80a2880:	2a50      	cmp	r2, #80	; 0x50
 80a2882:	d108      	bne.n	80a2896 <_ZN4MQTT4loopEv+0x1a2>
                    msgId = (buffer[2] << 8) + buffer[3];
 80a2884:	789a      	ldrb	r2, [r3, #2]
 80a2886:	78d9      	ldrb	r1, [r3, #3]
                    this->publishRelease(msgId);
 80a2888:	4620      	mov	r0, r4
                    msgId = (buffer[2] << 8) + buffer[3];
 80a288a:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                    this->publishRelease(msgId);
 80a288e:	b289      	uxth	r1, r1
 80a2890:	f7ff fefc 	bl	80a268c <_ZN4MQTT14publishReleaseEt>
 80a2894:	e74e      	b.n	80a2734 <_ZN4MQTT4loopEv+0x40>
                } else if (type == MQTTPUBACK) {
 80a2896:	2a40      	cmp	r2, #64	; 0x40
 80a2898:	d112      	bne.n	80a28c0 <_ZN4MQTT4loopEv+0x1cc>
                  if (qoscallback) {
 80a289a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80a289c:	2a00      	cmp	r2, #0
 80a289e:	f43f af49 	beq.w	80a2734 <_ZN4MQTT4loopEv+0x40>
                      if (len == 4 && (buffer[0]&0x06) == MQTTQOS0_HEADER_MASK) {
 80a28a2:	f1bb 0f04 	cmp.w	fp, #4
 80a28a6:	f47f af45 	bne.w	80a2734 <_ZN4MQTT4loopEv+0x40>
 80a28aa:	f011 0f06 	tst.w	r1, #6
 80a28ae:	f47f af41 	bne.w	80a2734 <_ZN4MQTT4loopEv+0x40>
                          msgId = (buffer[2]<<8)+buffer[3];
 80a28b2:	7899      	ldrb	r1, [r3, #2]
 80a28b4:	78d8      	ldrb	r0, [r3, #3]
 80a28b6:	eb00 2001 	add.w	r0, r0, r1, lsl #8
                          this->qoscallback(msgId);
 80a28ba:	b280      	uxth	r0, r0
 80a28bc:	4790      	blx	r2
 80a28be:	e739      	b.n	80a2734 <_ZN4MQTT4loopEv+0x40>
                } else if (type == MQTTPUBREL) {
 80a28c0:	2a60      	cmp	r2, #96	; 0x60
 80a28c2:	d108      	bne.n	80a28d6 <_ZN4MQTT4loopEv+0x1e2>
                  msgId = (buffer[2] << 8) + buffer[3];
 80a28c4:	789a      	ldrb	r2, [r3, #2]
 80a28c6:	78d9      	ldrb	r1, [r3, #3]
                  this->publishComplete(msgId);
 80a28c8:	4620      	mov	r0, r4
                  msgId = (buffer[2] << 8) + buffer[3];
 80a28ca:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                  this->publishComplete(msgId);
 80a28ce:	b289      	uxth	r1, r1
 80a28d0:	f7ff fef6 	bl	80a26c0 <_ZN4MQTT15publishCompleteEt>
 80a28d4:	e72e      	b.n	80a2734 <_ZN4MQTT4loopEv+0x40>
                } else if (type == MQTTPUBCOMP) {
 80a28d6:	2a70      	cmp	r2, #112	; 0x70
 80a28d8:	d0df      	beq.n	80a289a <_ZN4MQTT4loopEv+0x1a6>
                } else if (type == MQTTSUBACK) {
 80a28da:	2a90      	cmp	r2, #144	; 0x90
 80a28dc:	f43f af2a 	beq.w	80a2734 <_ZN4MQTT4loopEv+0x40>
                } else if (type == MQTTPINGREQ) {
 80a28e0:	2ac0      	cmp	r2, #192	; 0xc0
 80a28e2:	d10a      	bne.n	80a28fa <_ZN4MQTT4loopEv+0x206>
                    buffer[0] = MQTTPINGRESP;
 80a28e4:	22d0      	movs	r2, #208	; 0xd0
 80a28e6:	701a      	strb	r2, [r3, #0]
                    buffer[1] = 0;
 80a28e8:	2200      	movs	r2, #0
 80a28ea:	69e3      	ldr	r3, [r4, #28]
                    _client.write(buffer,2);
 80a28ec:	4620      	mov	r0, r4
                    buffer[1] = 0;
 80a28ee:	705a      	strb	r2, [r3, #1]
                    _client.write(buffer,2);
 80a28f0:	69e1      	ldr	r1, [r4, #28]
 80a28f2:	2202      	movs	r2, #2
 80a28f4:	f001 f94e 	bl	80a3b94 <_ZN9TCPClient5writeEPKhj>
 80a28f8:	e71c      	b.n	80a2734 <_ZN4MQTT4loopEv+0x40>
                } else if (type == MQTTPINGRESP) {
 80a28fa:	2ad0      	cmp	r2, #208	; 0xd0
                    pingOutstanding = false;
 80a28fc:	bf04      	itt	eq
 80a28fe:	2300      	moveq	r3, #0
 80a2900:	f884 302c 	strbeq.w	r3, [r4, #44]	; 0x2c
 80a2904:	e716      	b.n	80a2734 <_ZN4MQTT4loopEv+0x40>

080a2906 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>:
bool MQTT::subscribe(const char* topic, EMQTT_QOS qos) {
 80a2906:	b570      	push	{r4, r5, r6, lr}
 80a2908:	4604      	mov	r4, r0
 80a290a:	460e      	mov	r6, r1
 80a290c:	4615      	mov	r5, r2
    if (isConnected()) {
 80a290e:	f7ff fd3c 	bl	80a238a <_ZN4MQTT11isConnectedEv>
 80a2912:	b1f0      	cbz	r0, 80a2952 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x4c>
        nextMsgId++;
 80a2914:	8c23      	ldrh	r3, [r4, #32]
 80a2916:	3301      	adds	r3, #1
 80a2918:	b29b      	uxth	r3, r3
        if (nextMsgId == 0) {
 80a291a:	b1c3      	cbz	r3, 80a294e <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x48>
            nextMsgId = 1;
 80a291c:	8423      	strh	r3, [r4, #32]
        buffer[length++] = (nextMsgId >> 8);
 80a291e:	8c23      	ldrh	r3, [r4, #32]
 80a2920:	69e2      	ldr	r2, [r4, #28]
 80a2922:	121b      	asrs	r3, r3, #8
 80a2924:	7153      	strb	r3, [r2, #5]
        buffer[length++] = (nextMsgId & 0xFF);
 80a2926:	69e3      	ldr	r3, [r4, #28]
 80a2928:	8c22      	ldrh	r2, [r4, #32]
        length = writeString(topic, buffer,length);
 80a292a:	4631      	mov	r1, r6
        buffer[length++] = (nextMsgId & 0xFF);
 80a292c:	719a      	strb	r2, [r3, #6]
        length = writeString(topic, buffer,length);
 80a292e:	69e2      	ldr	r2, [r4, #28]
 80a2930:	2307      	movs	r3, #7
 80a2932:	4620      	mov	r0, r4
 80a2934:	f7ff fd0f 	bl	80a2356 <_ZN4MQTT11writeStringEPKcPht>
        buffer[length++] = qos;
 80a2938:	69e3      	ldr	r3, [r4, #28]
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
 80a293a:	2182      	movs	r1, #130	; 0x82
        buffer[length++] = qos;
 80a293c:	541d      	strb	r5, [r3, r0]
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
 80a293e:	3804      	subs	r0, #4
 80a2940:	69e2      	ldr	r2, [r4, #28]
 80a2942:	b283      	uxth	r3, r0
 80a2944:	4620      	mov	r0, r4
}
 80a2946:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
 80a294a:	f7ff bcb3 	b.w	80a22b4 <_ZN4MQTT5writeEhPht>
            nextMsgId = 1;
 80a294e:	2301      	movs	r3, #1
 80a2950:	e7e4      	b.n	80a291c <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x16>
}
 80a2952:	bd70      	pop	{r4, r5, r6, pc}

080a2954 <_ZN4MQTT9subscribeEPKc>:
    return subscribe(topic, QOS0);
 80a2954:	2200      	movs	r2, #0
 80a2956:	f7ff bfd6 	b.w	80a2906 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>
	...

080a295c <_ZN4MQTTD1Ev>:
MQTT::~MQTT() {
 80a295c:	b538      	push	{r3, r4, r5, lr}
 80a295e:	4605      	mov	r5, r0
    if (isConnected()) {
 80a2960:	f7ff fd13 	bl	80a238a <_ZN4MQTT11isConnectedEv>
 80a2964:	b110      	cbz	r0, 80a296c <_ZN4MQTTD1Ev+0x10>
        disconnect();
 80a2966:	4628      	mov	r0, r5
 80a2968:	f7ff fce1 	bl	80a232e <_ZN4MQTT10disconnectEv>
    if (buffer != NULL)
 80a296c:	69e8      	ldr	r0, [r5, #28]
 80a296e:	b108      	cbz	r0, 80a2974 <_ZN4MQTTD1Ev+0x18>
      delete[] buffer;
 80a2970:	f7fd fb97 	bl	80a00a2 <_ZdaPv>
MQTT::~MQTT() {
 80a2974:	f105 0038 	add.w	r0, r5, #56	; 0x38
 80a2978:	f001 fbd8 	bl	80a412c <_ZN6StringD1Ev>
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
 80a297c:	4b0a      	ldr	r3, [pc, #40]	; (80a29a8 <_ZN4MQTTD1Ev+0x4c>)
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 80a297e:	69ac      	ldr	r4, [r5, #24]
 80a2980:	602b      	str	r3, [r5, #0]
 80a2982:	b17c      	cbz	r4, 80a29a4 <_ZN4MQTTD1Ev+0x48>
      if (--_M_use_count == 0)
 80a2984:	6863      	ldr	r3, [r4, #4]
 80a2986:	3b01      	subs	r3, #1
 80a2988:	6063      	str	r3, [r4, #4]
 80a298a:	b95b      	cbnz	r3, 80a29a4 <_ZN4MQTTD1Ev+0x48>
          _M_dispose();
 80a298c:	6823      	ldr	r3, [r4, #0]
 80a298e:	4620      	mov	r0, r4
 80a2990:	689b      	ldr	r3, [r3, #8]
 80a2992:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a2994:	68a3      	ldr	r3, [r4, #8]
 80a2996:	3b01      	subs	r3, #1
 80a2998:	60a3      	str	r3, [r4, #8]
 80a299a:	b91b      	cbnz	r3, 80a29a4 <_ZN4MQTTD1Ev+0x48>
            _M_destroy();
 80a299c:	6823      	ldr	r3, [r4, #0]
 80a299e:	4620      	mov	r0, r4
 80a29a0:	68db      	ldr	r3, [r3, #12]
 80a29a2:	4798      	blx	r3
}
 80a29a4:	4628      	mov	r0, r5
 80a29a6:	bd38      	pop	{r3, r4, r5, pc}
 80a29a8:	080a86e8 	.word	0x080a86e8

080a29ac <_ZN10JsonBufferD1Ev>:


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {

}
JsonBuffer::~JsonBuffer() {
 80a29ac:	b510      	push	{r4, lr}
 80a29ae:	4b05      	ldr	r3, [pc, #20]	; (80a29c4 <_ZN10JsonBufferD1Ev+0x18>)
 80a29b0:	4604      	mov	r4, r0
 80a29b2:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && buffer) {
 80a29b4:	7c03      	ldrb	r3, [r0, #16]
 80a29b6:	b91b      	cbnz	r3, 80a29c0 <_ZN10JsonBufferD1Ev+0x14>
 80a29b8:	6840      	ldr	r0, [r0, #4]
 80a29ba:	b108      	cbz	r0, 80a29c0 <_ZN10JsonBufferD1Ev+0x14>
		free(buffer);
 80a29bc:	f000 ffd2 	bl	80a3964 <free>
	}
}
 80a29c0:	4620      	mov	r0, r4
 80a29c2:	bd10      	pop	{r4, pc}
 80a29c4:	080a8678 	.word	0x080a8678

080a29c8 <_ZN10JsonBufferD0Ev>:
JsonBuffer::~JsonBuffer() {
 80a29c8:	b510      	push	{r4, lr}
 80a29ca:	4604      	mov	r4, r0
}
 80a29cc:	f7ff ffee 	bl	80a29ac <_ZN10JsonBufferD1Ev>
 80a29d0:	4620      	mov	r0, r4
 80a29d2:	2114      	movs	r1, #20
 80a29d4:	f002 fd35 	bl	80a5442 <_ZdlPvj>
 80a29d8:	4620      	mov	r0, r4
 80a29da:	bd10      	pop	{r4, pc}

080a29dc <_ZN10JsonWriterD1Ev>:
//
JsonWriter::JsonWriter() : JsonBuffer(), floatPlaces(-1) {
	init();
}

JsonWriter::~JsonWriter() {
 80a29dc:	b510      	push	{r4, lr}
 80a29de:	4604      	mov	r4, r0
 80a29e0:	4b02      	ldr	r3, [pc, #8]	; (80a29ec <_ZN10JsonWriterD1Ev+0x10>)
 80a29e2:	6003      	str	r3, [r0, #0]
 80a29e4:	f7ff ffe2 	bl	80a29ac <_ZN10JsonBufferD1Ev>

}
 80a29e8:	4620      	mov	r0, r4
 80a29ea:	bd10      	pop	{r4, pc}
 80a29ec:	080a8698 	.word	0x080a8698

080a29f0 <_ZN10JsonWriterD0Ev>:
JsonWriter::~JsonWriter() {
 80a29f0:	b510      	push	{r4, lr}
 80a29f2:	4604      	mov	r4, r0
}
 80a29f4:	f7ff fff2 	bl	80a29dc <_ZN10JsonWriterD1Ev>
 80a29f8:	4620      	mov	r0, r4
 80a29fa:	2130      	movs	r1, #48	; 0x30
 80a29fc:	f002 fd21 	bl	80a5442 <_ZdlPvj>
 80a2a00:	4620      	mov	r0, r4
 80a2a02:	bd10      	pop	{r4, pc}

080a2a04 <_ZN10JsonParserD1Ev>:
JsonParser::~JsonParser() {
 80a2a04:	b510      	push	{r4, lr}
 80a2a06:	4b07      	ldr	r3, [pc, #28]	; (80a2a24 <_ZN10JsonParserD1Ev+0x20>)
 80a2a08:	4604      	mov	r4, r0
 80a2a0a:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && tokens) {
 80a2a0c:	7c03      	ldrb	r3, [r0, #16]
 80a2a0e:	b91b      	cbnz	r3, 80a2a18 <_ZN10JsonParserD1Ev+0x14>
 80a2a10:	6940      	ldr	r0, [r0, #20]
 80a2a12:	b108      	cbz	r0, 80a2a18 <_ZN10JsonParserD1Ev+0x14>
		free(tokens);
 80a2a14:	f000 ffa6 	bl	80a3964 <free>
JsonParser::~JsonParser() {
 80a2a18:	4620      	mov	r0, r4
 80a2a1a:	f7ff ffc7 	bl	80a29ac <_ZN10JsonBufferD1Ev>
}
 80a2a1e:	4620      	mov	r0, r4
 80a2a20:	bd10      	pop	{r4, pc}
 80a2a22:	bf00      	nop
 80a2a24:	080a8688 	.word	0x080a8688

080a2a28 <_ZN10JsonParserD0Ev>:
JsonParser::~JsonParser() {
 80a2a28:	b510      	push	{r4, lr}
 80a2a2a:	4604      	mov	r4, r0
}
 80a2a2c:	f7ff ffea 	bl	80a2a04 <_ZN10JsonParserD1Ev>
 80a2a30:	4620      	mov	r0, r4
 80a2a32:	212c      	movs	r1, #44	; 0x2c
 80a2a34:	f002 fd05 	bl	80a5442 <_ZdlPvj>
 80a2a38:	4620      	mov	r0, r4
 80a2a3a:	bd10      	pop	{r4, pc}

080a2a3c <_ZN10JsonBufferC1Ev>:
JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {
 80a2a3c:	4a03      	ldr	r2, [pc, #12]	; (80a2a4c <_ZN10JsonBufferC1Ev+0x10>)
 80a2a3e:	6002      	str	r2, [r0, #0]
 80a2a40:	2200      	movs	r2, #0
 80a2a42:	e9c0 2201 	strd	r2, r2, [r0, #4]
 80a2a46:	60c2      	str	r2, [r0, #12]
 80a2a48:	7402      	strb	r2, [r0, #16]
}
 80a2a4a:	4770      	bx	lr
 80a2a4c:	080a8678 	.word	0x080a8678

080a2a50 <_ZN10JsonBuffer8allocateEj>:
bool JsonBuffer::allocate(size_t len) {
 80a2a50:	b538      	push	{r3, r4, r5, lr}
	if (!staticBuffers) {
 80a2a52:	7c03      	ldrb	r3, [r0, #16]
bool JsonBuffer::allocate(size_t len) {
 80a2a54:	4604      	mov	r4, r0
 80a2a56:	460d      	mov	r5, r1
	if (!staticBuffers) {
 80a2a58:	b10b      	cbz	r3, 80a2a5e <_ZN10JsonBuffer8allocateEj+0xe>
		return false;
 80a2a5a:	2000      	movs	r0, #0
}
 80a2a5c:	bd38      	pop	{r3, r4, r5, pc}
		if (buffer) {
 80a2a5e:	6840      	ldr	r0, [r0, #4]
 80a2a60:	b138      	cbz	r0, 80a2a72 <_ZN10JsonBuffer8allocateEj+0x22>
			newBuffer = (char *) realloc(buffer, len);
 80a2a62:	f000 ff87 	bl	80a3974 <realloc>
		if (newBuffer) {
 80a2a66:	2800      	cmp	r0, #0
 80a2a68:	d0f7      	beq.n	80a2a5a <_ZN10JsonBuffer8allocateEj+0xa>
			bufferLen = len;
 80a2a6a:	e9c4 0501 	strd	r0, r5, [r4, #4]
			return true;
 80a2a6e:	2001      	movs	r0, #1
 80a2a70:	e7f4      	b.n	80a2a5c <_ZN10JsonBuffer8allocateEj+0xc>
			newBuffer = (char *) malloc(len);
 80a2a72:	4608      	mov	r0, r1
 80a2a74:	f000 ff6e 	bl	80a3954 <malloc>
 80a2a78:	e7f5      	b.n	80a2a66 <_ZN10JsonBuffer8allocateEj+0x16>

080a2a7a <_ZN10JsonBuffer7addDataEPKcj>:
bool JsonBuffer::addData(const char *data, size_t dataLen) {
 80a2a7a:	b570      	push	{r4, r5, r6, lr}
 80a2a7c:	68c3      	ldr	r3, [r0, #12]
 80a2a7e:	460e      	mov	r6, r1
 80a2a80:	18d1      	adds	r1, r2, r3
	if (!buffer || (offset + dataLen) > bufferLen) {
 80a2a82:	6843      	ldr	r3, [r0, #4]
bool JsonBuffer::addData(const char *data, size_t dataLen) {
 80a2a84:	4604      	mov	r4, r0
 80a2a86:	4615      	mov	r5, r2
	if (!buffer || (offset + dataLen) > bufferLen) {
 80a2a88:	b173      	cbz	r3, 80a2aa8 <_ZN10JsonBuffer7addDataEPKcj+0x2e>
 80a2a8a:	6883      	ldr	r3, [r0, #8]
 80a2a8c:	428b      	cmp	r3, r1
 80a2a8e:	d30b      	bcc.n	80a2aa8 <_ZN10JsonBuffer7addDataEPKcj+0x2e>
	memcpy(&buffer[offset], data, dataLen);
 80a2a90:	6860      	ldr	r0, [r4, #4]
 80a2a92:	68e3      	ldr	r3, [r4, #12]
 80a2a94:	462a      	mov	r2, r5
 80a2a96:	4631      	mov	r1, r6
 80a2a98:	4418      	add	r0, r3
 80a2a9a:	f004 f86f 	bl	80a6b7c <memcpy>
	return true;
 80a2a9e:	2001      	movs	r0, #1
	offset += dataLen;
 80a2aa0:	68e2      	ldr	r2, [r4, #12]
 80a2aa2:	442a      	add	r2, r5
 80a2aa4:	60e2      	str	r2, [r4, #12]
}
 80a2aa6:	bd70      	pop	{r4, r5, r6, pc}
		if (!allocate(offset + dataLen)) {
 80a2aa8:	4620      	mov	r0, r4
 80a2aaa:	f7ff ffd1 	bl	80a2a50 <_ZN10JsonBuffer8allocateEj>
 80a2aae:	2800      	cmp	r0, #0
 80a2ab0:	d1ee      	bne.n	80a2a90 <_ZN10JsonBuffer7addDataEPKcj+0x16>
 80a2ab2:	e7f8      	b.n	80a2aa6 <_ZN10JsonBuffer7addDataEPKcj+0x2c>

080a2ab4 <_ZN10JsonBuffer5clearEv>:
	offset = 0;
 80a2ab4:	2300      	movs	r3, #0
 80a2ab6:	60c3      	str	r3, [r0, #12]
}
 80a2ab8:	4770      	bx	lr
	...

080a2abc <_ZN10JsonParserC1Ev>:
JsonParser::JsonParser() : JsonBuffer(), tokens(0), tokensEnd(0), maxTokens(0) {
 80a2abc:	b508      	push	{r3, lr}
 80a2abe:	4603      	mov	r3, r0
 80a2ac0:	f7ff ffbc 	bl	80a2a3c <_ZN10JsonBufferC1Ev>
 80a2ac4:	4a03      	ldr	r2, [pc, #12]	; (80a2ad4 <_ZN10JsonParserC1Ev+0x18>)
}
 80a2ac6:	4618      	mov	r0, r3
JsonParser::JsonParser() : JsonBuffer(), tokens(0), tokensEnd(0), maxTokens(0) {
 80a2ac8:	601a      	str	r2, [r3, #0]
 80a2aca:	2200      	movs	r2, #0
 80a2acc:	e9c3 2205 	strd	r2, r2, [r3, #20]
 80a2ad0:	61da      	str	r2, [r3, #28]
}
 80a2ad2:	bd08      	pop	{r3, pc}
 80a2ad4:	080a8688 	.word	0x080a8688

080a2ad8 <_ZNK10JsonParser14getOuterObjectEv>:
const JsonParserGeneratorRK::jsmntok_t *JsonParser::getOuterObject() const {
 80a2ad8:	4603      	mov	r3, r0
	if (tokens < tokensEnd && tokens[0].type == JsonParserGeneratorRK::JSMN_OBJECT) {
 80a2ada:	e9d3 0305 	ldrd	r0, r3, [r3, #20]
 80a2ade:	4298      	cmp	r0, r3
 80a2ae0:	d204      	bcs.n	80a2aec <_ZNK10JsonParser14getOuterObjectEv+0x14>
 80a2ae2:	7803      	ldrb	r3, [r0, #0]
 80a2ae4:	2b01      	cmp	r3, #1
		return 0;
 80a2ae6:	bf18      	it	ne
 80a2ae8:	2000      	movne	r0, #0
 80a2aea:	4770      	bx	lr
 80a2aec:	2000      	movs	r0, #0
}
 80a2aee:	4770      	bx	lr

080a2af0 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>:
bool JsonParser::skipObject(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&obj) const {
 80a2af0:	b570      	push	{r4, r5, r6, lr}
	int curObjectEnd = obj->end;
 80a2af2:	6813      	ldr	r3, [r2, #0]
 80a2af4:	689d      	ldr	r5, [r3, #8]
	while(++obj < tokensEnd && obj->end < container->end && obj->end <= curObjectEnd) {
 80a2af6:	6813      	ldr	r3, [r2, #0]
 80a2af8:	f103 0410 	add.w	r4, r3, #16
 80a2afc:	6014      	str	r4, [r2, #0]
 80a2afe:	6986      	ldr	r6, [r0, #24]
 80a2b00:	42b4      	cmp	r4, r6
 80a2b02:	d20a      	bcs.n	80a2b1a <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x2a>
 80a2b04:	699b      	ldr	r3, [r3, #24]
 80a2b06:	688c      	ldr	r4, [r1, #8]
 80a2b08:	42a3      	cmp	r3, r4
 80a2b0a:	da01      	bge.n	80a2b10 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x20>
 80a2b0c:	42ab      	cmp	r3, r5
 80a2b0e:	ddf2      	ble.n	80a2af6 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x6>
	if (obj >= tokensEnd || obj->end > container->end) {
 80a2b10:	42a3      	cmp	r3, r4
 80a2b12:	bfcc      	ite	gt
 80a2b14:	2000      	movgt	r0, #0
 80a2b16:	2001      	movle	r0, #1
 80a2b18:	e000      	b.n	80a2b1c <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x2c>
		return false;
 80a2b1a:	2000      	movs	r0, #0
}
 80a2b1c:	bd70      	pop	{r4, r5, r6, pc}

080a2b1e <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j>:
bool JsonParser::getKeyValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&key, const JsonParserGeneratorRK::jsmntok_t *&value, size_t desiredIndex) const {
 80a2b1e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80a2b22:	4605      	mov	r5, r0
 80a2b24:	4617      	mov	r7, r2
	size_t index = 0;
 80a2b26:	2600      	movs	r6, #0
bool JsonParser::getKeyValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&key, const JsonParserGeneratorRK::jsmntok_t *&value, size_t desiredIndex) const {
 80a2b28:	4698      	mov	r8, r3
 80a2b2a:	9c08      	ldr	r4, [sp, #32]
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
 80a2b2c:	f101 0310 	add.w	r3, r1, #16
 80a2b30:	9301      	str	r3, [sp, #4]
	while(token < tokensEnd && token->end < container->end) {
 80a2b32:	9801      	ldr	r0, [sp, #4]
 80a2b34:	69ab      	ldr	r3, [r5, #24]
 80a2b36:	4283      	cmp	r3, r0
 80a2b38:	d91b      	bls.n	80a2b72 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x54>
 80a2b3a:	6882      	ldr	r2, [r0, #8]
 80a2b3c:	688b      	ldr	r3, [r1, #8]
 80a2b3e:	429a      	cmp	r2, r3
 80a2b40:	da17      	bge.n	80a2b72 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x54>
		if (desiredIndex == index) {
 80a2b42:	42a6      	cmp	r6, r4
 80a2b44:	d10b      	bne.n	80a2b5e <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x40>
			key = token;
 80a2b46:	6038      	str	r0, [r7, #0]
			if (skipObject(container, token)) {
 80a2b48:	aa01      	add	r2, sp, #4
 80a2b4a:	4628      	mov	r0, r5
 80a2b4c:	f7ff ffd0 	bl	80a2af0 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
 80a2b50:	b128      	cbz	r0, 80a2b5e <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x40>
				value = token;
 80a2b52:	9b01      	ldr	r3, [sp, #4]
 80a2b54:	f8c8 3000 	str.w	r3, [r8]
}
 80a2b58:	b002      	add	sp, #8
 80a2b5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		skipObject(container, token);
 80a2b5e:	aa01      	add	r2, sp, #4
 80a2b60:	4628      	mov	r0, r5
 80a2b62:	f7ff ffc5 	bl	80a2af0 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
		skipObject(container, token);
 80a2b66:	4628      	mov	r0, r5
 80a2b68:	aa01      	add	r2, sp, #4
		index++;
 80a2b6a:	3601      	adds	r6, #1
		skipObject(container, token);
 80a2b6c:	f7ff ffc0 	bl	80a2af0 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
	while(token < tokensEnd && token->end < container->end) {
 80a2b70:	e7df      	b.n	80a2b32 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x14>
	return false;
 80a2b72:	2000      	movs	r0, #0
 80a2b74:	e7f0      	b.n	80a2b58 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x3a>

080a2b76 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj>:
void JsonParser::copyTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, char *dst, size_t dstLen) const {
 80a2b76:	b5f0      	push	{r4, r5, r6, r7, lr}
	for(ii = 0; ii < (token->end - token->start) && ii < ((int)dstLen - 1); ii++) {
 80a2b78:	2400      	movs	r4, #0
 80a2b7a:	3b01      	subs	r3, #1
 80a2b7c:	e9d1 7601 	ldrd	r7, r6, [r1, #4]
 80a2b80:	1bf6      	subs	r6, r6, r7
 80a2b82:	42a6      	cmp	r6, r4
 80a2b84:	dd08      	ble.n	80a2b98 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj+0x22>
 80a2b86:	42a3      	cmp	r3, r4
 80a2b88:	dd06      	ble.n	80a2b98 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj+0x22>
		dst[ii] = buffer[token->start + ii];
 80a2b8a:	6845      	ldr	r5, [r0, #4]
 80a2b8c:	443d      	add	r5, r7
 80a2b8e:	5d2d      	ldrb	r5, [r5, r4]
	for(ii = 0; ii < (token->end - token->start) && ii < ((int)dstLen - 1); ii++) {
 80a2b90:	3401      	adds	r4, #1
		dst[ii] = buffer[token->start + ii];
 80a2b92:	f802 5b01 	strb.w	r5, [r2], #1
	for(ii = 0; ii < (token->end - token->start) && ii < ((int)dstLen - 1); ii++) {
 80a2b96:	e7f1      	b.n	80a2b7c <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj+0x6>
	dst[ii] = 0;
 80a2b98:	2300      	movs	r3, #0
 80a2b9a:	7013      	strb	r3, [r2, #0]
}
 80a2b9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080a2ba0 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERi>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, int &result) const {
 80a2ba0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80a2ba2:	4614      	mov	r4, r2
	copyTokenValue(token, tmp, sizeof(tmp));
 80a2ba4:	2310      	movs	r3, #16
 80a2ba6:	466a      	mov	r2, sp
 80a2ba8:	f7ff ffe5 	bl	80a2b76 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj>
	if (sscanf(tmp, "%d", &result) == 1) {
 80a2bac:	4622      	mov	r2, r4
 80a2bae:	4668      	mov	r0, sp
 80a2bb0:	4903      	ldr	r1, [pc, #12]	; (80a2bc0 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERi+0x20>)
 80a2bb2:	f000 feef 	bl	80a3994 <sscanf>
}
 80a2bb6:	1e43      	subs	r3, r0, #1
 80a2bb8:	4258      	negs	r0, r3
 80a2bba:	4158      	adcs	r0, r3
 80a2bbc:	b004      	add	sp, #16
 80a2bbe:	bd10      	pop	{r4, pc}
 80a2bc0:	080a8a67 	.word	0x080a8a67

080a2bc4 <_ZN16JsonParserString6appendEc>:
void JsonParserString::append(char ch) {
 80a2bc4:	b510      	push	{r4, lr}
 80a2bc6:	4604      	mov	r4, r0
	if (str) {
 80a2bc8:	6800      	ldr	r0, [r0, #0]
void JsonParserString::append(char ch) {
 80a2bca:	460b      	mov	r3, r1
	if (str) {
 80a2bcc:	b128      	cbz	r0, 80a2bda <_ZN16JsonParserString6appendEc+0x16>
		str->concat(ch);
 80a2bce:	f001 fbc4 	bl	80a435a <_ZN6String6concatEc>
		length++;
 80a2bd2:	68e3      	ldr	r3, [r4, #12]
 80a2bd4:	3301      	adds	r3, #1
 80a2bd6:	60e3      	str	r3, [r4, #12]
}
 80a2bd8:	bd10      	pop	{r4, pc}
		if (buf && length < (bufLen - 1)) {
 80a2bda:	6860      	ldr	r0, [r4, #4]
 80a2bdc:	2800      	cmp	r0, #0
 80a2bde:	d0f8      	beq.n	80a2bd2 <_ZN16JsonParserString6appendEc+0xe>
 80a2be0:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 80a2be4:	3a01      	subs	r2, #1
 80a2be6:	428a      	cmp	r2, r1
			buf[length] = ch;
 80a2be8:	bf88      	it	hi
 80a2bea:	5443      	strbhi	r3, [r0, r1]
 80a2bec:	e7f1      	b.n	80a2bd2 <_ZN16JsonParserString6appendEc+0xe>

080a2bee <_ZN10JsonParser10appendUtf8EtR16JsonParserString>:
	if (unicode <= 0x007f) {
 80a2bee:	287f      	cmp	r0, #127	; 0x7f
void JsonParser::appendUtf8(uint16_t unicode, JsonParserString &str) {
 80a2bf0:	b570      	push	{r4, r5, r6, lr}
 80a2bf2:	460c      	mov	r4, r1
 80a2bf4:	b2c1      	uxtb	r1, r0
	if (unicode <= 0x007f) {
 80a2bf6:	d804      	bhi.n	80a2c02 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x14>
		str.append((char)value);
 80a2bf8:	4620      	mov	r0, r4
}
 80a2bfa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		str.append((char)value);
 80a2bfe:	f7ff bfe1 	b.w	80a2bc4 <_ZN16JsonParserString6appendEc>
	if (unicode <= 0x7ff) {
 80a2c02:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80a2c06:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 80a2c0a:	f340 1687 	sbfx	r6, r0, #6, #8
 80a2c0e:	f041 0580 	orr.w	r5, r1, #128	; 0x80
 80a2c12:	d207      	bcs.n	80a2c24 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x36>
		value = (0b11000000 | ((unicode >> 6) & 0b11111));
 80a2c14:	f066 013f 	orn	r1, r6, #63	; 0x3f
		str.append((char)value);
 80a2c18:	b2c9      	uxtb	r1, r1
		str.append((char)value);
 80a2c1a:	4620      	mov	r0, r4
 80a2c1c:	f7ff ffd2 	bl	80a2bc4 <_ZN16JsonParserString6appendEc>
		str.append((char)value);
 80a2c20:	4629      	mov	r1, r5
 80a2c22:	e7e9      	b.n	80a2bf8 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0xa>
		value = 0b11100000 | ((unicode >> 12) & 0b1111);
 80a2c24:	0b03      	lsrs	r3, r0, #12
		str.append((char)value);
 80a2c26:	f043 01e0 	orr.w	r1, r3, #224	; 0xe0
 80a2c2a:	4620      	mov	r0, r4
 80a2c2c:	f7ff ffca 	bl	80a2bc4 <_ZN16JsonParserString6appendEc>
		value = 0b10000000 | ((unicode >> 6) & 0b111111);
 80a2c30:	f006 013f 	and.w	r1, r6, #63	; 0x3f
		str.append((char)value);
 80a2c34:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80a2c38:	e7ef      	b.n	80a2c1a <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x2c>
	...

080a2c3c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, JsonParserString &str) const {
 80a2c3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	bool escape = false;
 80a2c40:	2400      	movs	r4, #0
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, JsonParserString &str) const {
 80a2c42:	4680      	mov	r8, r0
 80a2c44:	460f      	mov	r7, r1
 80a2c46:	4615      	mov	r5, r2
			escape = false;
 80a2c48:	46a1      	mov	r9, r4
	for(int ii = token->start; ii < token->end; ii++) {
 80a2c4a:	684e      	ldr	r6, [r1, #4]
					if (sscanf(tmp, "%04x", &unicode) == 1) {
 80a2c4c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80a2d14 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xd8>
	for(int ii = token->start; ii < token->end; ii++) {
 80a2c50:	68b8      	ldr	r0, [r7, #8]
 80a2c52:	42b0      	cmp	r0, r6
 80a2c54:	dd5a      	ble.n	80a2d0c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xd0>
		if (escape) {
 80a2c56:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80a2c5a:	5d99      	ldrb	r1, [r3, r6]
 80a2c5c:	199a      	adds	r2, r3, r6
 80a2c5e:	2c00      	cmp	r4, #0
 80a2c60:	d04b      	beq.n	80a2cfa <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xbe>
			switch(buffer[ii]) {
 80a2c62:	2975      	cmp	r1, #117	; 0x75
 80a2c64:	d805      	bhi.n	80a2c72 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
 80a2c66:	296d      	cmp	r1, #109	; 0x6d
 80a2c68:	d807      	bhi.n	80a2c7a <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x3e>
 80a2c6a:	2962      	cmp	r1, #98	; 0x62
 80a2c6c:	d01e      	beq.n	80a2cac <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x70>
 80a2c6e:	2966      	cmp	r1, #102	; 0x66
 80a2c70:	d01e      	beq.n	80a2cb0 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x74>
				str.append(buffer[ii]);
 80a2c72:	4628      	mov	r0, r5
 80a2c74:	f7ff ffa6 	bl	80a2bc4 <_ZN16JsonParserString6appendEc>
				break;
 80a2c78:	e03d      	b.n	80a2cf6 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
 80a2c7a:	f1a1 046e 	sub.w	r4, r1, #110	; 0x6e
 80a2c7e:	2c07      	cmp	r4, #7
 80a2c80:	d8f7      	bhi.n	80a2c72 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
 80a2c82:	f20f 0c08 	addw	ip, pc, #8
 80a2c86:	f85c f024 	ldr.w	pc, [ip, r4, lsl #2]
 80a2c8a:	bf00      	nop
 80a2c8c:	080a2cb5 	.word	0x080a2cb5
 80a2c90:	080a2c73 	.word	0x080a2c73
 80a2c94:	080a2c73 	.word	0x080a2c73
 80a2c98:	080a2c73 	.word	0x080a2c73
 80a2c9c:	080a2cb9 	.word	0x080a2cb9
 80a2ca0:	080a2c73 	.word	0x080a2c73
 80a2ca4:	080a2cbd 	.word	0x080a2cbd
 80a2ca8:	080a2cc1 	.word	0x080a2cc1
				str.append('\b');
 80a2cac:	2108      	movs	r1, #8
 80a2cae:	e7e0      	b.n	80a2c72 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\f');
 80a2cb0:	210c      	movs	r1, #12
 80a2cb2:	e7de      	b.n	80a2c72 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\n');
 80a2cb4:	210a      	movs	r1, #10
 80a2cb6:	e7dc      	b.n	80a2c72 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\r');
 80a2cb8:	210d      	movs	r1, #13
 80a2cba:	e7da      	b.n	80a2c72 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\t');
 80a2cbc:	2109      	movs	r1, #9
 80a2cbe:	e7d8      	b.n	80a2c72 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				if ((ii + 4) < token->end) {
 80a2cc0:	1d31      	adds	r1, r6, #4
 80a2cc2:	4288      	cmp	r0, r1
 80a2cc4:	dd17      	ble.n	80a2cf6 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
 80a2cc6:	a902      	add	r1, sp, #8
 80a2cc8:	4608      	mov	r0, r1
 80a2cca:	3304      	adds	r3, #4
 80a2ccc:	4433      	add	r3, r6
						tmp[jj] = buffer[ii + jj + 1];
 80a2cce:	f812 4f01 	ldrb.w	r4, [r2, #1]!
					for(size_t jj = 0; jj < 4; jj++) {
 80a2cd2:	429a      	cmp	r2, r3
						tmp[jj] = buffer[ii + jj + 1];
 80a2cd4:	f801 4b01 	strb.w	r4, [r1], #1
					for(size_t jj = 0; jj < 4; jj++) {
 80a2cd8:	d1f9      	bne.n	80a2cce <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x92>
					if (sscanf(tmp, "%04x", &unicode) == 1) {
 80a2cda:	4651      	mov	r1, sl
 80a2cdc:	aa01      	add	r2, sp, #4
					tmp[4] = 0;
 80a2cde:	f88d 900c 	strb.w	r9, [sp, #12]
					if (sscanf(tmp, "%04x", &unicode) == 1) {
 80a2ce2:	f000 fe57 	bl	80a3994 <sscanf>
 80a2ce6:	2801      	cmp	r0, #1
 80a2ce8:	d105      	bne.n	80a2cf6 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
						appendUtf8((uint16_t)unicode, str);
 80a2cea:	4629      	mov	r1, r5
 80a2cec:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 80a2cf0:	f7ff ff7d 	bl	80a2bee <_ZN10JsonParser10appendUtf8EtR16JsonParserString>
						ii += 5; // also increments in loop
 80a2cf4:	3605      	adds	r6, #5
			escape = false;
 80a2cf6:	2400      	movs	r4, #0
 80a2cf8:	e004      	b.n	80a2d04 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xc8>
		if (buffer[ii] == '\\') {
 80a2cfa:	295c      	cmp	r1, #92	; 0x5c
 80a2cfc:	d004      	beq.n	80a2d08 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xcc>
			str.append(buffer[ii]);
 80a2cfe:	4628      	mov	r0, r5
 80a2d00:	f7ff ff60 	bl	80a2bc4 <_ZN16JsonParserString6appendEc>
	for(int ii = token->start; ii < token->end; ii++) {
 80a2d04:	3601      	adds	r6, #1
 80a2d06:	e7a3      	b.n	80a2c50 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x14>
			escape = true;
 80a2d08:	2401      	movs	r4, #1
 80a2d0a:	e7fb      	b.n	80a2d04 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xc8>
}
 80a2d0c:	2001      	movs	r0, #1
 80a2d0e:	b004      	add	sp, #16
 80a2d10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a2d14:	080a865c 	.word	0x080a865c

080a2d18 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, String &result) const {
 80a2d18:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80a2d1a:	460c      	mov	r4, r1
 80a2d1c:	4615      	mov	r5, r2
 80a2d1e:	4606      	mov	r6, r0
	result = "";
 80a2d20:	490b      	ldr	r1, [pc, #44]	; (80a2d50 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String+0x38>)
 80a2d22:	4610      	mov	r0, r2
 80a2d24:	f001 fa9e 	bl	80a4264 <_ZN6StringaSEPKc>
	result.reserve(token->end - token->start + 1);
 80a2d28:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 80a2d2c:	1ac9      	subs	r1, r1, r3
 80a2d2e:	4628      	mov	r0, r5
 80a2d30:	3101      	adds	r1, #1
 80a2d32:	f001 fa19 	bl	80a4168 <_ZN6String7reserveEj>
JsonParserString::JsonParserString(String *str) : str(str), buf(0), bufLen(0), length(0){
 80a2d36:	2300      	movs	r3, #0
	return getTokenValue(token, strWrapper);
 80a2d38:	466a      	mov	r2, sp
 80a2d3a:	4621      	mov	r1, r4
 80a2d3c:	4630      	mov	r0, r6
JsonParserString::JsonParserString(String *str) : str(str), buf(0), bufLen(0), length(0){
 80a2d3e:	e9cd 3301 	strd	r3, r3, [sp, #4]
 80a2d42:	9500      	str	r5, [sp, #0]
 80a2d44:	9303      	str	r3, [sp, #12]
	return getTokenValue(token, strWrapper);
 80a2d46:	f7ff ff79 	bl	80a2c3c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString>
}
 80a2d4a:	b004      	add	sp, #16
 80a2d4c:	bd70      	pop	{r4, r5, r6, pc}
 80a2d4e:	bf00      	nop
 80a2d50:	080a89a0 	.word	0x080a89a0

080a2d54 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>:
bool JsonParser::getValueTokenByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, const JsonParserGeneratorRK::jsmntok_t *&value) const {
 80a2d54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a2d58:	b089      	sub	sp, #36	; 0x24
 80a2d5a:	4605      	mov	r5, r0
 80a2d5c:	4688      	mov	r8, r1
	String keyName;
 80a2d5e:	a804      	add	r0, sp, #16
 80a2d60:	4912      	ldr	r1, [pc, #72]	; (80a2dac <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x58>)
bool JsonParser::getValueTokenByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, const JsonParserGeneratorRK::jsmntok_t *&value) const {
 80a2d62:	4616      	mov	r6, r2
 80a2d64:	4699      	mov	r9, r3
	for(size_t ii = 0; getKeyValueTokenByIndex(container, key, value, ii); ii++) {
 80a2d66:	2700      	movs	r7, #0
	String keyName;
 80a2d68:	f001 fa2a 	bl	80a41c0 <_ZN6StringC1EPKc>
	for(size_t ii = 0; getKeyValueTokenByIndex(container, key, value, ii); ii++) {
 80a2d6c:	464b      	mov	r3, r9
 80a2d6e:	4641      	mov	r1, r8
 80a2d70:	4628      	mov	r0, r5
 80a2d72:	9700      	str	r7, [sp, #0]
 80a2d74:	aa03      	add	r2, sp, #12
 80a2d76:	f7ff fed2 	bl	80a2b1e <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j>
 80a2d7a:	4604      	mov	r4, r0
 80a2d7c:	b170      	cbz	r0, 80a2d9c <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x48>
		if (getTokenValue(key, keyName) && keyName == name) {
 80a2d7e:	4628      	mov	r0, r5
 80a2d80:	9903      	ldr	r1, [sp, #12]
 80a2d82:	aa04      	add	r2, sp, #16
 80a2d84:	f7ff ffc8 	bl	80a2d18 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>
 80a2d88:	4604      	mov	r4, r0
 80a2d8a:	b908      	cbnz	r0, 80a2d90 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x3c>
	for(size_t ii = 0; getKeyValueTokenByIndex(container, key, value, ii); ii++) {
 80a2d8c:	3701      	adds	r7, #1
 80a2d8e:	e7ed      	b.n	80a2d6c <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x18>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 80a2d90:	4631      	mov	r1, r6
 80a2d92:	a804      	add	r0, sp, #16
 80a2d94:	f001 fb1f 	bl	80a43d6 <_ZNK6String6equalsEPKc>
		if (getTokenValue(key, keyName) && keyName == name) {
 80a2d98:	2800      	cmp	r0, #0
 80a2d9a:	d0f7      	beq.n	80a2d8c <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x38>
	String keyName;
 80a2d9c:	a804      	add	r0, sp, #16
 80a2d9e:	f001 f9c5 	bl	80a412c <_ZN6StringD1Ev>
}
 80a2da2:	4620      	mov	r0, r4
 80a2da4:	b009      	add	sp, #36	; 0x24
 80a2da6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a2daa:	bf00      	nop
 80a2dac:	080a89a0 	.word	0x080a89a0

080a2db0 <_ZN10JsonWriter4initEv>:
	init();
}

void JsonWriter::init() {
	// Save start of insertion point for later
	offset = 0;
 80a2db0:	2300      	movs	r3, #0

	contextIndex = 0;
	context[contextIndex].isFirst = true;
 80a2db2:	2201      	movs	r2, #1
	offset = 0;
 80a2db4:	60c3      	str	r3, [r0, #12]
	contextIndex = 0;
 80a2db6:	6143      	str	r3, [r0, #20]
	context[contextIndex].isFirst = true;
 80a2db8:	8302      	strh	r2, [r0, #24]
	context[contextIndex].terminator = 0;

	truncated = false;
 80a2dba:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a

}
 80a2dbe:	4770      	bx	lr

080a2dc0 <_ZN10JsonWriterC1EPcj>:
JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
 80a2dc0:	2300      	movs	r3, #0
 80a2dc2:	60c3      	str	r3, [r0, #12]
 80a2dc4:	2301      	movs	r3, #1
 80a2dc6:	7403      	strb	r3, [r0, #16]
JsonWriter::JsonWriter(char *buffer, size_t bufferLen) : JsonBuffer(buffer, bufferLen), floatPlaces(-1) {
 80a2dc8:	4b05      	ldr	r3, [pc, #20]	; (80a2de0 <_ZN10JsonWriterC1EPcj+0x20>)
 80a2dca:	b510      	push	{r4, lr}
 80a2dcc:	6003      	str	r3, [r0, #0]
 80a2dce:	f04f 33ff 	mov.w	r3, #4294967295
JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
 80a2dd2:	e9c0 1201 	strd	r1, r2, [r0, #4]
JsonWriter::JsonWriter(char *buffer, size_t bufferLen) : JsonBuffer(buffer, bufferLen), floatPlaces(-1) {
 80a2dd6:	62c3      	str	r3, [r0, #44]	; 0x2c
	init();
 80a2dd8:	f7ff ffea 	bl	80a2db0 <_ZN10JsonWriter4initEv>
}
 80a2ddc:	bd10      	pop	{r4, pc}
 80a2dde:	bf00      	nop
 80a2de0:	080a8698 	.word	0x080a8698

080a2de4 <_ZN10JsonWriter10insertCharEc>:
	}
}


void JsonWriter::insertChar(char ch) {
	if (offset < bufferLen) {
 80a2de4:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 80a2de8:	4293      	cmp	r3, r2
		buffer[offset++] = ch;
	}
	else {
		truncated = true;
 80a2dea:	bf28      	it	cs
 80a2dec:	2301      	movcs	r3, #1
void JsonWriter::insertChar(char ch) {
 80a2dee:	b510      	push	{r4, lr}
		buffer[offset++] = ch;
 80a2df0:	bf3f      	itttt	cc
 80a2df2:	6842      	ldrcc	r2, [r0, #4]
 80a2df4:	1c5c      	addcc	r4, r3, #1
 80a2df6:	60c4      	strcc	r4, [r0, #12]
 80a2df8:	54d1      	strbcc	r1, [r2, r3]
		truncated = true;
 80a2dfa:	bf28      	it	cs
 80a2dfc:	f880 302a 	strbcs.w	r3, [r0, #42]	; 0x2a
	}
}
 80a2e00:	bd10      	pop	{r4, pc}

080a2e02 <_ZN10JsonWriter19finishObjectOrArrayEv>:
void JsonWriter::finishObjectOrArray() {
 80a2e02:	b510      	push	{r4, lr}
	if (contextIndex > 0) {
 80a2e04:	6943      	ldr	r3, [r0, #20]
void JsonWriter::finishObjectOrArray() {
 80a2e06:	4604      	mov	r4, r0
	if (contextIndex > 0) {
 80a2e08:	b143      	cbz	r3, 80a2e1c <_ZN10JsonWriter19finishObjectOrArrayEv+0x1a>
		if (context[contextIndex].terminator != 0) {
 80a2e0a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80a2e0e:	7e59      	ldrb	r1, [r3, #25]
 80a2e10:	b109      	cbz	r1, 80a2e16 <_ZN10JsonWriter19finishObjectOrArrayEv+0x14>
			insertChar(context[contextIndex].terminator);
 80a2e12:	f7ff ffe7 	bl	80a2de4 <_ZN10JsonWriter10insertCharEc>
		contextIndex--;
 80a2e16:	6963      	ldr	r3, [r4, #20]
 80a2e18:	3b01      	subs	r3, #1
 80a2e1a:	6163      	str	r3, [r4, #20]
	if (offset < bufferLen) {
 80a2e1c:	2200      	movs	r2, #0
 80a2e1e:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
 80a2e22:	6863      	ldr	r3, [r4, #4]
 80a2e24:	4288      	cmp	r0, r1
		buffer[bufferLen - 1] = 0;
 80a2e26:	bf2a      	itet	cs
 80a2e28:	185b      	addcs	r3, r3, r1
		buffer[offset] = 0;
 80a2e2a:	541a      	strbcc	r2, [r3, r0]
		buffer[bufferLen - 1] = 0;
 80a2e2c:	f803 2c01 	strbcs.w	r2, [r3, #-1]
}
 80a2e30:	bd10      	pop	{r4, pc}

080a2e32 <_ZN10JsonWriter14insertvsprintfEPKcSt9__va_list>:
	va_start(ap, fmt);
	insertvsprintf(fmt, ap);
	va_end(ap);
}

void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
 80a2e32:	b570      	push	{r4, r5, r6, lr}
 80a2e34:	4604      	mov	r4, r0
	size_t spaceAvailable = bufferLen - offset;
 80a2e36:	e9d0 5002 	ldrd	r5, r0, [r0, #8]

	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
 80a2e3a:	6866      	ldr	r6, [r4, #4]
	size_t spaceAvailable = bufferLen - offset;
 80a2e3c:	1a2d      	subs	r5, r5, r0
void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
 80a2e3e:	4613      	mov	r3, r2
	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
 80a2e40:	4430      	add	r0, r6
 80a2e42:	460a      	mov	r2, r1
 80a2e44:	4629      	mov	r1, r5
 80a2e46:	f000 fdc5 	bl	80a39d4 <vsnprintf>
	if (count <= spaceAvailable) {
 80a2e4a:	4285      	cmp	r5, r0
		offset += count;
	}
	else {
		// Truncated, no more space left
		offset = bufferLen;
 80a2e4c:	bf37      	itett	cc
 80a2e4e:	68a3      	ldrcc	r3, [r4, #8]
		offset += count;
 80a2e50:	68e3      	ldrcs	r3, [r4, #12]
		offset = bufferLen;
 80a2e52:	60e3      	strcc	r3, [r4, #12]
		truncated = true;
 80a2e54:	2301      	movcc	r3, #1
		offset += count;
 80a2e56:	bf26      	itte	cs
 80a2e58:	18c0      	addcs	r0, r0, r3
 80a2e5a:	60e0      	strcs	r0, [r4, #12]
		truncated = true;
 80a2e5c:	f884 302a 	strbcc.w	r3, [r4, #42]	; 0x2a
	}
}
 80a2e60:	bd70      	pop	{r4, r5, r6, pc}

080a2e62 <_ZN10JsonWriter13insertsprintfEPKcz>:
void JsonWriter::insertsprintf(const char *fmt, ...) {
 80a2e62:	b40e      	push	{r1, r2, r3}
 80a2e64:	b503      	push	{r0, r1, lr}
 80a2e66:	aa03      	add	r2, sp, #12
 80a2e68:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(ap, fmt);
 80a2e6c:	9201      	str	r2, [sp, #4]
	insertvsprintf(fmt, ap);
 80a2e6e:	f7ff ffe0 	bl	80a2e32 <_ZN10JsonWriter14insertvsprintfEPKcSt9__va_list>
}
 80a2e72:	b002      	add	sp, #8
 80a2e74:	f85d eb04 	ldr.w	lr, [sp], #4
 80a2e78:	b003      	add	sp, #12
 80a2e7a:	4770      	bx	lr

080a2e7c <_ZN10JsonWriter12insertStringEPKcb>:
void JsonWriter::insertString(const char *s, bool quoted) {
 80a2e7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a2e80:	4604      	mov	r4, r0
 80a2e82:	460e      	mov	r6, r1
	if (quoted) {
 80a2e84:	4617      	mov	r7, r2
 80a2e86:	b112      	cbz	r2, 80a2e8e <_ZN10JsonWriter12insertStringEPKcb+0x12>
		insertChar('"');
 80a2e88:	2122      	movs	r1, #34	; 0x22
 80a2e8a:	f7ff ffab 	bl	80a2de4 <_ZN10JsonWriter10insertCharEc>
void JsonWriter::insertString(const char *s, bool quoted) {
 80a2e8e:	2500      	movs	r5, #0
				insertsprintf("\\u%04X", utf16);
 80a2e90:	f8df 8108 	ldr.w	r8, [pc, #264]	; 80a2f9c <_ZN10JsonWriter12insertStringEPKcb+0x120>
	for(size_t ii = 0; s[ii] && offset < bufferLen; ii++) {
 80a2e94:	5d71      	ldrb	r1, [r6, r5]
 80a2e96:	eb06 0905 	add.w	r9, r6, r5
 80a2e9a:	2900      	cmp	r1, #0
 80a2e9c:	d074      	beq.n	80a2f88 <_ZN10JsonWriter12insertStringEPKcb+0x10c>
 80a2e9e:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
 80a2ea2:	429a      	cmp	r2, r3
 80a2ea4:	d270      	bcs.n	80a2f88 <_ZN10JsonWriter12insertStringEPKcb+0x10c>
		if (s[ii] & 0x80) {
 80a2ea6:	060b      	lsls	r3, r1, #24
 80a2ea8:	d534      	bpl.n	80a2f14 <_ZN10JsonWriter12insertStringEPKcb+0x98>
			if (((s[ii] & 0b11110000) == 0b11100000) && ((s[ii+1] & 0b11000000) == 0b10000000) && ((s[ii+2] & 0b11000000) == 0b10000000)) {
 80a2eaa:	f001 03f0 	and.w	r3, r1, #240	; 0xf0
 80a2eae:	2be0      	cmp	r3, #224	; 0xe0
 80a2eb0:	f105 0901 	add.w	r9, r5, #1
 80a2eb4:	d11d      	bne.n	80a2ef2 <_ZN10JsonWriter12insertStringEPKcb+0x76>
 80a2eb6:	f816 2009 	ldrb.w	r2, [r6, r9]
 80a2eba:	f002 03c0 	and.w	r3, r2, #192	; 0xc0
 80a2ebe:	2b80      	cmp	r3, #128	; 0x80
 80a2ec0:	d139      	bne.n	80a2f36 <_ZN10JsonWriter12insertStringEPKcb+0xba>
 80a2ec2:	f105 0902 	add.w	r9, r5, #2
 80a2ec6:	f816 3009 	ldrb.w	r3, [r6, r9]
 80a2eca:	f003 00c0 	and.w	r0, r3, #192	; 0xc0
 80a2ece:	2880      	cmp	r0, #128	; 0x80
 80a2ed0:	d131      	bne.n	80a2f36 <_ZN10JsonWriter12insertStringEPKcb+0xba>
				uint16_t utf16 = ((s[ii] & 0b1111) << 12) | ((s[ii+1] & 0b111111) << 6) | (s[ii+2] & 0b111111);
 80a2ed2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80a2ed6:	0192      	lsls	r2, r2, #6
 80a2ed8:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 80a2edc:	f402 627c 	and.w	r2, r2, #4032	; 0xfc0
 80a2ee0:	431a      	orrs	r2, r3
				insertsprintf("\\u%04X", utf16);
 80a2ee2:	b292      	uxth	r2, r2
				insertsprintf("\\u%04X", utf16);
 80a2ee4:	4641      	mov	r1, r8
 80a2ee6:	4620      	mov	r0, r4
 80a2ee8:	f7ff ffbb 	bl	80a2e62 <_ZN10JsonWriter13insertsprintfEPKcz>
				ii++; // plus one more in loop increment
 80a2eec:	464d      	mov	r5, r9
	for(size_t ii = 0; s[ii] && offset < bufferLen; ii++) {
 80a2eee:	3501      	adds	r5, #1
 80a2ef0:	e7d0      	b.n	80a2e94 <_ZN10JsonWriter12insertStringEPKcb+0x18>
			if (((s[ii] & 0b11100000) == 0b11000000) && ((s[ii+1] & 0b11000000) == 0b10000000)) {
 80a2ef2:	f001 03e0 	and.w	r3, r1, #224	; 0xe0
 80a2ef6:	2bc0      	cmp	r3, #192	; 0xc0
 80a2ef8:	d11d      	bne.n	80a2f36 <_ZN10JsonWriter12insertStringEPKcb+0xba>
 80a2efa:	f816 3009 	ldrb.w	r3, [r6, r9]
 80a2efe:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
 80a2f02:	2a80      	cmp	r2, #128	; 0x80
 80a2f04:	d117      	bne.n	80a2f36 <_ZN10JsonWriter12insertStringEPKcb+0xba>
				uint16_t utf16 = ((s[ii] & 0b11111) << 6) | (s[ii+1] & 0b111111);
 80a2f06:	0189      	lsls	r1, r1, #6
 80a2f08:	f401 62f8 	and.w	r2, r1, #1984	; 0x7c0
 80a2f0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
				insertsprintf("\\u%04X", utf16);
 80a2f10:	431a      	orrs	r2, r3
 80a2f12:	e7e7      	b.n	80a2ee4 <_ZN10JsonWriter12insertStringEPKcb+0x68>
			switch(s[ii]) {
 80a2f14:	290d      	cmp	r1, #13
 80a2f16:	d80a      	bhi.n	80a2f2e <_ZN10JsonWriter12insertStringEPKcb+0xb2>
 80a2f18:	2907      	cmp	r1, #7
 80a2f1a:	d90c      	bls.n	80a2f36 <_ZN10JsonWriter12insertStringEPKcb+0xba>
 80a2f1c:	f1a1 0308 	sub.w	r3, r1, #8
 80a2f20:	2b05      	cmp	r3, #5
 80a2f22:	d808      	bhi.n	80a2f36 <_ZN10JsonWriter12insertStringEPKcb+0xba>
 80a2f24:	e8df f003 	tbb	[pc, r3]
 80a2f28:	0717230b 	.word	0x0717230b
 80a2f2c:	1d11      	.short	0x1d11
 80a2f2e:	2922      	cmp	r1, #34	; 0x22
 80a2f30:	d023      	beq.n	80a2f7a <_ZN10JsonWriter12insertStringEPKcb+0xfe>
 80a2f32:	295c      	cmp	r1, #92	; 0x5c
 80a2f34:	d021      	beq.n	80a2f7a <_ZN10JsonWriter12insertStringEPKcb+0xfe>
				insertChar(s[ii]);
 80a2f36:	4620      	mov	r0, r4
 80a2f38:	f7ff ff54 	bl	80a2de4 <_ZN10JsonWriter10insertCharEc>
				break;
 80a2f3c:	e7d7      	b.n	80a2eee <_ZN10JsonWriter12insertStringEPKcb+0x72>
				insertChar('\\');
 80a2f3e:	215c      	movs	r1, #92	; 0x5c
 80a2f40:	4620      	mov	r0, r4
 80a2f42:	f7ff ff4f 	bl	80a2de4 <_ZN10JsonWriter10insertCharEc>
				insertChar('b');
 80a2f46:	2162      	movs	r1, #98	; 0x62
 80a2f48:	e7f5      	b.n	80a2f36 <_ZN10JsonWriter12insertStringEPKcb+0xba>
				insertChar('\\');
 80a2f4a:	215c      	movs	r1, #92	; 0x5c
 80a2f4c:	4620      	mov	r0, r4
 80a2f4e:	f7ff ff49 	bl	80a2de4 <_ZN10JsonWriter10insertCharEc>
				insertChar('f');
 80a2f52:	2166      	movs	r1, #102	; 0x66
 80a2f54:	e7ef      	b.n	80a2f36 <_ZN10JsonWriter12insertStringEPKcb+0xba>
				insertChar('\\');
 80a2f56:	215c      	movs	r1, #92	; 0x5c
 80a2f58:	4620      	mov	r0, r4
 80a2f5a:	f7ff ff43 	bl	80a2de4 <_ZN10JsonWriter10insertCharEc>
				insertChar('n');
 80a2f5e:	216e      	movs	r1, #110	; 0x6e
 80a2f60:	e7e9      	b.n	80a2f36 <_ZN10JsonWriter12insertStringEPKcb+0xba>
				insertChar('\\');
 80a2f62:	215c      	movs	r1, #92	; 0x5c
 80a2f64:	4620      	mov	r0, r4
 80a2f66:	f7ff ff3d 	bl	80a2de4 <_ZN10JsonWriter10insertCharEc>
				insertChar('r');
 80a2f6a:	2172      	movs	r1, #114	; 0x72
 80a2f6c:	e7e3      	b.n	80a2f36 <_ZN10JsonWriter12insertStringEPKcb+0xba>
				insertChar('\\');
 80a2f6e:	215c      	movs	r1, #92	; 0x5c
 80a2f70:	4620      	mov	r0, r4
 80a2f72:	f7ff ff37 	bl	80a2de4 <_ZN10JsonWriter10insertCharEc>
				insertChar('t');
 80a2f76:	2174      	movs	r1, #116	; 0x74
 80a2f78:	e7dd      	b.n	80a2f36 <_ZN10JsonWriter12insertStringEPKcb+0xba>
				insertChar('\\');
 80a2f7a:	215c      	movs	r1, #92	; 0x5c
 80a2f7c:	4620      	mov	r0, r4
 80a2f7e:	f7ff ff31 	bl	80a2de4 <_ZN10JsonWriter10insertCharEc>
				insertChar(s[ii]);
 80a2f82:	f899 1000 	ldrb.w	r1, [r9]
 80a2f86:	e7d6      	b.n	80a2f36 <_ZN10JsonWriter12insertStringEPKcb+0xba>
	if (quoted) {
 80a2f88:	b12f      	cbz	r7, 80a2f96 <_ZN10JsonWriter12insertStringEPKcb+0x11a>
		insertChar('"');
 80a2f8a:	4620      	mov	r0, r4
}
 80a2f8c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		insertChar('"');
 80a2f90:	2122      	movs	r1, #34	; 0x22
 80a2f92:	f7ff bf27 	b.w	80a2de4 <_ZN10JsonWriter10insertCharEc>
}
 80a2f96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a2f9a:	bf00      	nop
 80a2f9c:	080a8661 	.word	0x080a8661

080a2fa0 <_ZN10JsonWriter20insertCheckSeparatorEv>:

void JsonWriter::insertCheckSeparator() {
	if (context[contextIndex].isFirst) {
 80a2fa0:	6942      	ldr	r2, [r0, #20]
 80a2fa2:	eb00 0342 	add.w	r3, r0, r2, lsl #1
 80a2fa6:	7e1a      	ldrb	r2, [r3, #24]
 80a2fa8:	b112      	cbz	r2, 80a2fb0 <_ZN10JsonWriter20insertCheckSeparatorEv+0x10>
		context[contextIndex].isFirst = false;
 80a2faa:	2200      	movs	r2, #0
 80a2fac:	761a      	strb	r2, [r3, #24]
	}
	else {
		insertChar(',');
	}
}
 80a2fae:	4770      	bx	lr
		insertChar(',');
 80a2fb0:	212c      	movs	r1, #44	; 0x2c
 80a2fb2:	f7ff bf17 	b.w	80a2de4 <_ZN10JsonWriter10insertCharEc>

080a2fb6 <_ZN10JsonWriter18startObjectOrArrayEcc>:
bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
 80a2fb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
 80a2fb8:	6943      	ldr	r3, [r0, #20]
bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
 80a2fba:	460e      	mov	r6, r1
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
 80a2fbc:	3301      	adds	r3, #1
 80a2fbe:	2b08      	cmp	r3, #8
bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
 80a2fc0:	4617      	mov	r7, r2
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
 80a2fc2:	d80e      	bhi.n	80a2fe2 <_ZN10JsonWriter18startObjectOrArrayEcc+0x2c>
	insertCheckSeparator();
 80a2fc4:	f7ff ffec 	bl	80a2fa0 <_ZN10JsonWriter20insertCheckSeparatorEv>
	context[contextIndex].isFirst = true;
 80a2fc8:	2501      	movs	r5, #1
	contextIndex++;
 80a2fca:	6943      	ldr	r3, [r0, #20]
	insertChar(startChar);
 80a2fcc:	4631      	mov	r1, r6
	contextIndex++;
 80a2fce:	1c5a      	adds	r2, r3, #1
 80a2fd0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80a2fd4:	6142      	str	r2, [r0, #20]
	context[contextIndex].isFirst = true;
 80a2fd6:	769d      	strb	r5, [r3, #26]
	context[contextIndex].terminator = endChar;
 80a2fd8:	76df      	strb	r7, [r3, #27]
	insertChar(startChar);
 80a2fda:	f7ff ff03 	bl	80a2de4 <_ZN10JsonWriter10insertCharEc>
 80a2fde:	4628      	mov	r0, r5
}
 80a2fe0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return false;
 80a2fe2:	2000      	movs	r0, #0
 80a2fe4:	e7fc      	b.n	80a2fe0 <_ZN10JsonWriter18startObjectOrArrayEcc+0x2a>
	...

080a2fe8 <_ZN10JsonWriter11insertValueEf>:
	else {
		insertString("false");
	}
}

void JsonWriter::insertValue(float value) {
 80a2fe8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a2fea:	4604      	mov	r4, r0
	if (floatPlaces >= 0) {
 80a2fec:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 80a2fee:	4608      	mov	r0, r1
 80a2ff0:	f002 fca4 	bl	80a593c <__aeabi_f2d>
 80a2ff4:	2d00      	cmp	r5, #0
 80a2ff6:	4602      	mov	r2, r0
 80a2ff8:	460b      	mov	r3, r1
 80a2ffa:	db08      	blt.n	80a300e <_ZN10JsonWriter11insertValueEf+0x26>
		insertsprintf("%.*f", floatPlaces, value);
 80a2ffc:	e9cd 2300 	strd	r2, r3, [sp]
 80a3000:	4620      	mov	r0, r4
 80a3002:	462a      	mov	r2, r5
 80a3004:	4905      	ldr	r1, [pc, #20]	; (80a301c <_ZN10JsonWriter11insertValueEf+0x34>)
 80a3006:	f7ff ff2c 	bl	80a2e62 <_ZN10JsonWriter13insertsprintfEPKcz>
	}
	else {
		insertsprintf("%f", value);
	}
}
 80a300a:	b003      	add	sp, #12
 80a300c:	bd30      	pop	{r4, r5, pc}
		insertsprintf("%f", value);
 80a300e:	4620      	mov	r0, r4
 80a3010:	4903      	ldr	r1, [pc, #12]	; (80a3020 <_ZN10JsonWriter11insertValueEf+0x38>)
}
 80a3012:	b003      	add	sp, #12
 80a3014:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		insertsprintf("%f", value);
 80a3018:	f7ff bf23 	b.w	80a2e62 <_ZN10JsonWriter13insertsprintfEPKcz>
 80a301c:	080a8668 	.word	0x080a8668
 80a3020:	080a866d 	.word	0x080a866d

080a3024 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>:

/**
 * Parse JSON string and fill tokens.
 */
int jsmn_parse(jsmn_parser *parser, const char *js, size_t len,
		jsmntok_t *tokens, unsigned int num_tokens) {
 80a3024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a3028:	f04f 0c01 	mov.w	ip, #1
	tok->start = tok->end = -1;
 80a302c:	f04f 35ff 	mov.w	r5, #4294967295
		jsmntok_t *tokens, unsigned int num_tokens) {
 80a3030:	4604      	mov	r4, r0
	int r;
	int i;
	jsmntok_t *token;
	int count = parser->toknext;
 80a3032:	6840      	ldr	r0, [r0, #4]

	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 80a3034:	f8d4 e000 	ldr.w	lr, [r4]
 80a3038:	4596      	cmp	lr, r2
 80a303a:	f080 81be 	bcs.w	80a33ba <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x396>
 80a303e:	f811 800e 	ldrb.w	r8, [r1, lr]
 80a3042:	f1b8 0f00 	cmp.w	r8, #0
 80a3046:	f000 81b8 	beq.w	80a33ba <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x396>
		char c;
		jsmntype_t type;

		c = js[parser->pos];
		switch (c) {
 80a304a:	f1b8 0f3a 	cmp.w	r8, #58	; 0x3a
 80a304e:	f000 809b 	beq.w	80a3188 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x164>
 80a3052:	d833      	bhi.n	80a30bc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x98>
 80a3054:	f1b8 0f22 	cmp.w	r8, #34	; 0x22
 80a3058:	f000 80ad 	beq.w	80a31b6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x192>
 80a305c:	d810      	bhi.n	80a3080 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x5c>
 80a305e:	f1a8 0809 	sub.w	r8, r8, #9
 80a3062:	fa5f f888 	uxtb.w	r8, r8
 80a3066:	f1b8 0f17 	cmp.w	r8, #23
 80a306a:	d80d      	bhi.n	80a3088 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x64>
 80a306c:	4fc0      	ldr	r7, [pc, #768]	; (80a3370 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x34c>)
 80a306e:	fa0c f808 	lsl.w	r8, ip, r8
 80a3072:	ea18 0f07 	tst.w	r8, r7
 80a3076:	d007      	beq.n	80a3088 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x64>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 80a3078:	6827      	ldr	r7, [r4, #0]
 80a307a:	3701      	adds	r7, #1
 80a307c:	6027      	str	r7, [r4, #0]
 80a307e:	e7d9      	b.n	80a3034 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x10>
		switch (c) {
 80a3080:	f1b8 0f2c 	cmp.w	r8, #44	; 0x2c
 80a3084:	f000 8136 	beq.w	80a32f4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2d0>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 80a3088:	f8d4 8000 	ldr.w	r8, [r4]
 80a308c:	4542      	cmp	r2, r8
 80a308e:	d90e      	bls.n	80a30ae <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x8a>
 80a3090:	f811 7008 	ldrb.w	r7, [r1, r8]
 80a3094:	b15f      	cbz	r7, 80a30ae <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x8a>
		switch (js[parser->pos]) {
 80a3096:	2f3a      	cmp	r7, #58	; 0x3a
 80a3098:	f200 816e 	bhi.w	80a3378 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x354>
 80a309c:	2f1f      	cmp	r7, #31
 80a309e:	f200 8152 	bhi.w	80a3346 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x322>
 80a30a2:	2f0a      	cmp	r7, #10
 80a30a4:	f200 8161 	bhi.w	80a336a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x346>
 80a30a8:	2f08      	cmp	r7, #8
 80a30aa:	f240 8157 	bls.w	80a335c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x338>
	if (tokens == NULL) {
 80a30ae:	2b00      	cmp	r3, #0
 80a30b0:	f040 8167 	bne.w	80a3382 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x35e>
		parser->pos--;
 80a30b4:	f108 37ff 	add.w	r7, r8, #4294967295
	parser->pos--;
 80a30b8:	6027      	str	r7, [r4, #0]
 80a30ba:	e0ab      	b.n	80a3214 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1f0>
		switch (c) {
 80a30bc:	f1b8 0f7b 	cmp.w	r8, #123	; 0x7b
 80a30c0:	d03a      	beq.n	80a3138 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x114>
 80a30c2:	d80a      	bhi.n	80a30da <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xb6>
 80a30c4:	f1b8 0f5b 	cmp.w	r8, #91	; 0x5b
 80a30c8:	d036      	beq.n	80a3138 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x114>
 80a30ca:	f1b8 0f5d 	cmp.w	r8, #93	; 0x5d
 80a30ce:	d1db      	bne.n	80a3088 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x64>
				token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
				token->start = parser->pos;
				parser->toksuper = parser->toknext - 1;
				break;
			case '}': case ']':
				if (tokens == NULL)
 80a30d0:	2b00      	cmp	r3, #0
 80a30d2:	d0d1      	beq.n	80a3078 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x54>
					break;
				type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
 80a30d4:	f04f 0b02 	mov.w	fp, #2
 80a30d8:	e006      	b.n	80a30e8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xc4>
		switch (c) {
 80a30da:	f1b8 0f7d 	cmp.w	r8, #125	; 0x7d
 80a30de:	d1d3      	bne.n	80a3088 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x64>
				if (tokens == NULL)
 80a30e0:	2b00      	cmp	r3, #0
 80a30e2:	d0c9      	beq.n	80a3078 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x54>
				type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
 80a30e4:	f04f 0b01 	mov.w	fp, #1
						break;
					}
					token = &tokens[token->parent];
				}
#else
				for (i = parser->toknext - 1; i >= 0; i--) {
 80a30e8:	6867      	ldr	r7, [r4, #4]
 80a30ea:	f107 38ff 	add.w	r8, r7, #4294967295
 80a30ee:	eb03 1907 	add.w	r9, r3, r7, lsl #4
 80a30f2:	f1b8 0f00 	cmp.w	r8, #0
 80a30f6:	db4f      	blt.n	80a3198 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x174>
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
 80a30f8:	f859 7c0c 	ldr.w	r7, [r9, #-12]
 80a30fc:	f1a9 0a10 	sub.w	sl, r9, #16
 80a3100:	3701      	adds	r7, #1
 80a3102:	d045      	beq.n	80a3190 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x16c>
 80a3104:	f859 7c08 	ldr.w	r7, [r9, #-8]
 80a3108:	1c7e      	adds	r6, r7, #1
 80a310a:	d141      	bne.n	80a3190 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x16c>
						if (token->type != type) {
 80a310c:	f89a 9000 	ldrb.w	r9, [sl]
 80a3110:	45d9      	cmp	r9, fp
 80a3112:	d145      	bne.n	80a31a0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x17c>
							return JSMN_ERROR_INVAL;
						}
						parser->toksuper = -1;
 80a3114:	60a7      	str	r7, [r4, #8]
						token->end = parser->pos + 1;
 80a3116:	f10e 0701 	add.w	r7, lr, #1
 80a311a:	f8ca 7008 	str.w	r7, [sl, #8]
						break;
					}
				}
				/* Error if unmatched closing bracket */
				if (i == -1) return JSMN_ERROR_INVAL;
 80a311e:	eb03 1e08 	add.w	lr, r3, r8, lsl #4
				for (; i >= 0; i--) {
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
 80a3122:	f8de 7004 	ldr.w	r7, [lr, #4]
 80a3126:	3701      	adds	r7, #1
 80a3128:	d03d      	beq.n	80a31a6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x182>
 80a312a:	f8de 7008 	ldr.w	r7, [lr, #8]
 80a312e:	3701      	adds	r7, #1
 80a3130:	d139      	bne.n	80a31a6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x182>
					parser->toksuper = tokens[parser->toksuper].parent;
#else
					for (i = parser->toknext - 1; i >= 0; i--) {
						if (tokens[i].type == JSMN_ARRAY || tokens[i].type == JSMN_OBJECT) {
							if (tokens[i].start != -1 && tokens[i].end == -1) {
								parser->toksuper = i;
 80a3132:	f8c4 8008 	str.w	r8, [r4, #8]
								break;
 80a3136:	e79f      	b.n	80a3078 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x54>
				count++;
 80a3138:	3001      	adds	r0, #1
				if (tokens == NULL) {
 80a313a:	2b00      	cmp	r3, #0
 80a313c:	d09c      	beq.n	80a3078 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x54>
	if (parser->toknext >= num_tokens) {
 80a313e:	6867      	ldr	r7, [r4, #4]
 80a3140:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80a3142:	42be      	cmp	r6, r7
 80a3144:	d94e      	bls.n	80a31e4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1c0>
	tok->size = 0;
 80a3146:	2600      	movs	r6, #0
	tok = &tokens[parser->toknext++];
 80a3148:	f107 0e01 	add.w	lr, r7, #1
 80a314c:	f8c4 e004 	str.w	lr, [r4, #4]
 80a3150:	eb03 1e07 	add.w	lr, r3, r7, lsl #4
	tok->start = tok->end = -1;
 80a3154:	e9ce 5501 	strd	r5, r5, [lr, #4]
	tok->size = 0;
 80a3158:	f8ce 600c 	str.w	r6, [lr, #12]
	tok = &tokens[parser->toknext++];
 80a315c:	ea4f 1a07 	mov.w	sl, r7, lsl #4
				if (parser->toksuper != -1) {
 80a3160:	68a7      	ldr	r7, [r4, #8]
 80a3162:	1c7e      	adds	r6, r7, #1
					tokens[parser->toksuper].size++;
 80a3164:	bf1f      	itttt	ne
 80a3166:	eb03 1907 	addne.w	r9, r3, r7, lsl #4
 80a316a:	f8d9 700c 	ldrne.w	r7, [r9, #12]
 80a316e:	3701      	addne	r7, #1
 80a3170:	f8c9 700c 	strne.w	r7, [r9, #12]
				token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
 80a3174:	f1b8 0f7b 	cmp.w	r8, #123	; 0x7b
 80a3178:	bf0c      	ite	eq
 80a317a:	2701      	moveq	r7, #1
 80a317c:	2702      	movne	r7, #2
 80a317e:	f803 700a 	strb.w	r7, [r3, sl]
				token->start = parser->pos;
 80a3182:	6827      	ldr	r7, [r4, #0]
 80a3184:	f8ce 7004 	str.w	r7, [lr, #4]
				parser->toksuper = parser->toknext - 1;
 80a3188:	6867      	ldr	r7, [r4, #4]
 80a318a:	3f01      	subs	r7, #1
 80a318c:	60a7      	str	r7, [r4, #8]
				break;
 80a318e:	e773      	b.n	80a3078 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x54>
				for (i = parser->toknext - 1; i >= 0; i--) {
 80a3190:	46d1      	mov	r9, sl
 80a3192:	f108 38ff 	add.w	r8, r8, #4294967295
 80a3196:	e7ac      	b.n	80a30f2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xce>
				if (i == -1) return JSMN_ERROR_INVAL;
 80a3198:	f1b8 3fff 	cmp.w	r8, #4294967295
 80a319c:	f47f af6c 	bne.w	80a3078 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x54>
							return JSMN_ERROR_INVAL;
 80a31a0:	f06f 0001 	mvn.w	r0, #1
 80a31a4:	e020      	b.n	80a31e8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1c4>
				for (; i >= 0; i--) {
 80a31a6:	f108 38ff 	add.w	r8, r8, #4294967295
 80a31aa:	f1b8 3fff 	cmp.w	r8, #4294967295
 80a31ae:	f1ae 0e10 	sub.w	lr, lr, #16
 80a31b2:	d1b6      	bne.n	80a3122 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xfe>
 80a31b4:	e760      	b.n	80a3078 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x54>
	parser->pos++;
 80a31b6:	f10e 0901 	add.w	r9, lr, #1
 80a31ba:	f8c4 9000 	str.w	r9, [r4]
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 80a31be:	f8d4 8000 	ldr.w	r8, [r4]
 80a31c2:	4542      	cmp	r2, r8
 80a31c4:	f240 8091 	bls.w	80a32ea <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2c6>
 80a31c8:	f811 7008 	ldrb.w	r7, [r1, r8]
 80a31cc:	2f00      	cmp	r7, #0
 80a31ce:	f000 808c 	beq.w	80a32ea <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2c6>
		if (c == '\"') {
 80a31d2:	2f22      	cmp	r7, #34	; 0x22
 80a31d4:	d12e      	bne.n	80a3234 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x210>
			if (tokens == NULL) {
 80a31d6:	b1eb      	cbz	r3, 80a3214 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1f0>
	if (parser->toknext >= num_tokens) {
 80a31d8:	6867      	ldr	r7, [r4, #4]
 80a31da:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80a31dc:	42be      	cmp	r6, r7
 80a31de:	d805      	bhi.n	80a31ec <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1c8>
		parser->pos = start;
 80a31e0:	f8c4 e000 	str.w	lr, [r4]
					return JSMN_ERROR_NOMEM;
 80a31e4:	f04f 30ff 	mov.w	r0, #4294967295
			}
		}
	}

	return count;
}
 80a31e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	tok->size = 0;
 80a31ec:	2600      	movs	r6, #0
	token->type = type;
 80a31ee:	f04f 0a03 	mov.w	sl, #3
	tok = &tokens[parser->toknext++];
 80a31f2:	f107 0e01 	add.w	lr, r7, #1
 80a31f6:	ea4f 1807 	mov.w	r8, r7, lsl #4
 80a31fa:	eb03 1707 	add.w	r7, r3, r7, lsl #4
 80a31fe:	f8c4 e004 	str.w	lr, [r4, #4]
	tok->start = tok->end = -1;
 80a3202:	e9c7 5501 	strd	r5, r5, [r7, #4]
	tok->size = 0;
 80a3206:	60fe      	str	r6, [r7, #12]
			jsmn_fill_token(token, JSMN_STRING, start+1, parser->pos);
 80a3208:	f8d4 e000 	ldr.w	lr, [r4]
	token->type = type;
 80a320c:	f803 a008 	strb.w	sl, [r3, r8]
	token->end = end;
 80a3210:	e9c7 9e01 	strd	r9, lr, [r7, #4]
				if (parser->toksuper != -1 && tokens != NULL)
 80a3214:	68a7      	ldr	r7, [r4, #8]
				count++;
 80a3216:	3001      	adds	r0, #1
				if (parser->toksuper != -1 && tokens != NULL)
 80a3218:	1c7e      	adds	r6, r7, #1
 80a321a:	f43f af2d 	beq.w	80a3078 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x54>
 80a321e:	2b00      	cmp	r3, #0
 80a3220:	f43f af2a 	beq.w	80a3078 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x54>
					tokens[parser->toksuper].size++;
 80a3224:	eb03 1e07 	add.w	lr, r3, r7, lsl #4
 80a3228:	f8de 700c 	ldr.w	r7, [lr, #12]
 80a322c:	3701      	adds	r7, #1
 80a322e:	f8ce 700c 	str.w	r7, [lr, #12]
 80a3232:	e721      	b.n	80a3078 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x54>
		if (c == '\\' && parser->pos + 1 < len) {
 80a3234:	2f5c      	cmp	r7, #92	; 0x5c
 80a3236:	d111      	bne.n	80a325c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x238>
 80a3238:	f108 0701 	add.w	r7, r8, #1
 80a323c:	42ba      	cmp	r2, r7
 80a323e:	d90d      	bls.n	80a325c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x238>
			parser->pos++;
 80a3240:	6027      	str	r7, [r4, #0]
			switch (js[parser->pos]) {
 80a3242:	5dcf      	ldrb	r7, [r1, r7]
 80a3244:	2f75      	cmp	r7, #117	; 0x75
 80a3246:	d82b      	bhi.n	80a32a0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x27c>
 80a3248:	2f6d      	cmp	r7, #109	; 0x6d
 80a324a:	d80b      	bhi.n	80a3264 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x240>
 80a324c:	2f66      	cmp	r7, #102	; 0x66
 80a324e:	d827      	bhi.n	80a32a0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x27c>
 80a3250:	2f5b      	cmp	r7, #91	; 0x5b
 80a3252:	d81d      	bhi.n	80a3290 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x26c>
 80a3254:	2f22      	cmp	r7, #34	; 0x22
 80a3256:	d001      	beq.n	80a325c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x238>
 80a3258:	2f2f      	cmp	r7, #47	; 0x2f
 80a325a:	d121      	bne.n	80a32a0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x27c>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 80a325c:	6827      	ldr	r7, [r4, #0]
 80a325e:	3701      	adds	r7, #1
 80a3260:	6027      	str	r7, [r4, #0]
 80a3262:	e7ac      	b.n	80a31be <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x19a>
 80a3264:	3f6e      	subs	r7, #110	; 0x6e
 80a3266:	2f07      	cmp	r7, #7
 80a3268:	d81a      	bhi.n	80a32a0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x27c>
 80a326a:	a601      	add	r6, pc, #4	; (adr r6, 80a3270 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x24c>)
 80a326c:	f856 f027 	ldr.w	pc, [r6, r7, lsl #2]
 80a3270:	080a325d 	.word	0x080a325d
 80a3274:	080a32a1 	.word	0x080a32a1
 80a3278:	080a32a1 	.word	0x080a32a1
 80a327c:	080a32a1 	.word	0x080a32a1
 80a3280:	080a325d 	.word	0x080a325d
 80a3284:	080a32a1 	.word	0x080a32a1
 80a3288:	080a325d 	.word	0x080a325d
 80a328c:	080a32a7 	.word	0x080a32a7
 80a3290:	f240 4641 	movw	r6, #1089	; 0x441
 80a3294:	3f5c      	subs	r7, #92	; 0x5c
 80a3296:	b2ff      	uxtb	r7, r7
 80a3298:	fa0c f707 	lsl.w	r7, ip, r7
 80a329c:	4237      	tst	r7, r6
 80a329e:	d1dd      	bne.n	80a325c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x238>
			parser->pos = start;
 80a32a0:	f8c4 e000 	str.w	lr, [r4]
				if (r < 0) return r;
 80a32a4:	e77c      	b.n	80a31a0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x17c>
					parser->pos++;
 80a32a6:	f04f 0a04 	mov.w	sl, #4
 80a32aa:	f108 0702 	add.w	r7, r8, #2
 80a32ae:	6027      	str	r7, [r4, #0]
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
 80a32b0:	f8d4 8000 	ldr.w	r8, [r4]
 80a32b4:	4542      	cmp	r2, r8
 80a32b6:	d803      	bhi.n	80a32c0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x29c>
					parser->pos--;
 80a32b8:	6827      	ldr	r7, [r4, #0]
 80a32ba:	3f01      	subs	r7, #1
 80a32bc:	6027      	str	r7, [r4, #0]
					break;
 80a32be:	e7cd      	b.n	80a325c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x238>
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
 80a32c0:	f811 7008 	ldrb.w	r7, [r1, r8]
 80a32c4:	2f00      	cmp	r7, #0
 80a32c6:	d0f7      	beq.n	80a32b8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x294>
						if(!((js[parser->pos] >= 48 && js[parser->pos] <= 57) || /* 0-9 */
 80a32c8:	f1a7 0b30 	sub.w	fp, r7, #48	; 0x30
 80a32cc:	f1bb 0f09 	cmp.w	fp, #9
 80a32d0:	d904      	bls.n	80a32dc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2b8>
 80a32d2:	f027 0720 	bic.w	r7, r7, #32
 80a32d6:	3f41      	subs	r7, #65	; 0x41
 80a32d8:	2f05      	cmp	r7, #5
 80a32da:	d8e1      	bhi.n	80a32a0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x27c>
						parser->pos++;
 80a32dc:	f108 0701 	add.w	r7, r8, #1
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
 80a32e0:	f1ba 0a01 	subs.w	sl, sl, #1
						parser->pos++;
 80a32e4:	6027      	str	r7, [r4, #0]
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
 80a32e6:	d1e3      	bne.n	80a32b0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x28c>
 80a32e8:	e7e6      	b.n	80a32b8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x294>
	parser->pos = start;
 80a32ea:	f8c4 e000 	str.w	lr, [r4]
				return JSMN_ERROR_PART;
 80a32ee:	f06f 0002 	mvn.w	r0, #2
 80a32f2:	e779      	b.n	80a31e8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1c4>
				if (tokens != NULL && parser->toksuper != -1 &&
 80a32f4:	2b00      	cmp	r3, #0
 80a32f6:	f43f aebf 	beq.w	80a3078 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x54>
 80a32fa:	68a7      	ldr	r7, [r4, #8]
 80a32fc:	1c7e      	adds	r6, r7, #1
 80a32fe:	f43f aebb 	beq.w	80a3078 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x54>
						tokens[parser->toksuper].type != JSMN_ARRAY &&
 80a3302:	013f      	lsls	r7, r7, #4
 80a3304:	5ddf      	ldrb	r7, [r3, r7]
 80a3306:	3f01      	subs	r7, #1
 80a3308:	2f01      	cmp	r7, #1
 80a330a:	f67f aeb5 	bls.w	80a3078 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x54>
					for (i = parser->toknext - 1; i >= 0; i--) {
 80a330e:	6867      	ldr	r7, [r4, #4]
 80a3310:	f107 38ff 	add.w	r8, r7, #4294967295
 80a3314:	eb03 1e07 	add.w	lr, r3, r7, lsl #4
 80a3318:	f1b8 0f00 	cmp.w	r8, #0
 80a331c:	f6ff aeac 	blt.w	80a3078 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x54>
						if (tokens[i].type == JSMN_ARRAY || tokens[i].type == JSMN_OBJECT) {
 80a3320:	f81e 7c10 	ldrb.w	r7, [lr, #-16]
 80a3324:	3f01      	subs	r7, #1
 80a3326:	2f01      	cmp	r7, #1
 80a3328:	d808      	bhi.n	80a333c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x318>
							if (tokens[i].start != -1 && tokens[i].end == -1) {
 80a332a:	f85e 7c0c 	ldr.w	r7, [lr, #-12]
 80a332e:	3701      	adds	r7, #1
 80a3330:	d004      	beq.n	80a333c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x318>
 80a3332:	f85e 7c08 	ldr.w	r7, [lr, #-8]
 80a3336:	3701      	adds	r7, #1
 80a3338:	f43f aefb 	beq.w	80a3132 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x10e>
					for (i = parser->toknext - 1; i >= 0; i--) {
 80a333c:	f108 38ff 	add.w	r8, r8, #4294967295
 80a3340:	f1ae 0e10 	sub.w	lr, lr, #16
 80a3344:	e7e8      	b.n	80a3318 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2f4>
 80a3346:	f1a7 0920 	sub.w	r9, r7, #32
 80a334a:	4e0a      	ldr	r6, [pc, #40]	; (80a3374 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x350>)
 80a334c:	fa5f f989 	uxtb.w	r9, r9
 80a3350:	fa0c f909 	lsl.w	r9, ip, r9
 80a3354:	ea19 0f06 	tst.w	r9, r6
 80a3358:	f47f aea9 	bne.w	80a30ae <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x8a>
		if (js[parser->pos] < 32 || js[parser->pos] >= 127) {
 80a335c:	3f20      	subs	r7, #32
 80a335e:	2f5e      	cmp	r7, #94	; 0x5e
 80a3360:	d89e      	bhi.n	80a32a0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x27c>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 80a3362:	f108 0701 	add.w	r7, r8, #1
 80a3366:	6027      	str	r7, [r4, #0]
 80a3368:	e68e      	b.n	80a3088 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x64>
		switch (js[parser->pos]) {
 80a336a:	2f0d      	cmp	r7, #13
 80a336c:	d1f6      	bne.n	80a335c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x338>
 80a336e:	e69e      	b.n	80a30ae <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x8a>
 80a3370:	00800013 	.word	0x00800013
 80a3374:	04001001 	.word	0x04001001
 80a3378:	f007 09df 	and.w	r9, r7, #223	; 0xdf
 80a337c:	f1b9 0f5d 	cmp.w	r9, #93	; 0x5d
 80a3380:	e7f4      	b.n	80a336c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x348>
	if (parser->toknext >= num_tokens) {
 80a3382:	6867      	ldr	r7, [r4, #4]
 80a3384:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80a3386:	42be      	cmp	r6, r7
 80a3388:	f67f af2a 	bls.w	80a31e0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1bc>
	tok->size = 0;
 80a338c:	2600      	movs	r6, #0
	token->type = type;
 80a338e:	f04f 0a04 	mov.w	sl, #4
	tok = &tokens[parser->toknext++];
 80a3392:	f107 0801 	add.w	r8, r7, #1
 80a3396:	ea4f 1907 	mov.w	r9, r7, lsl #4
 80a339a:	eb03 1707 	add.w	r7, r3, r7, lsl #4
 80a339e:	f8c4 8004 	str.w	r8, [r4, #4]
	tok->start = tok->end = -1;
 80a33a2:	e9c7 5501 	strd	r5, r5, [r7, #4]
	tok->size = 0;
 80a33a6:	60fe      	str	r6, [r7, #12]
	jsmn_fill_token(token, JSMN_PRIMITIVE, start, parser->pos);
 80a33a8:	f8d4 8000 	ldr.w	r8, [r4]
	token->type = type;
 80a33ac:	f803 a009 	strb.w	sl, [r3, r9]
	token->end = end;
 80a33b0:	e9c7 e801 	strd	lr, r8, [r7, #4]
	parser->pos--;
 80a33b4:	6827      	ldr	r7, [r4, #0]
 80a33b6:	3f01      	subs	r7, #1
 80a33b8:	e67e      	b.n	80a30b8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x94>
	if (tokens != NULL) {
 80a33ba:	2b00      	cmp	r3, #0
 80a33bc:	f43f af14 	beq.w	80a31e8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1c4>
		for (i = parser->toknext - 1; i >= 0; i--) {
 80a33c0:	6862      	ldr	r2, [r4, #4]
 80a33c2:	1e51      	subs	r1, r2, #1
 80a33c4:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 80a33c8:	2900      	cmp	r1, #0
 80a33ca:	f6ff af0d 	blt.w	80a31e8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1c4>
			if (tokens[i].start != -1 && tokens[i].end == -1) {
 80a33ce:	f853 2c0c 	ldr.w	r2, [r3, #-12]
 80a33d2:	3201      	adds	r2, #1
 80a33d4:	d003      	beq.n	80a33de <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x3ba>
 80a33d6:	f853 2c08 	ldr.w	r2, [r3, #-8]
 80a33da:	3201      	adds	r2, #1
 80a33dc:	d087      	beq.n	80a32ee <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ca>
		for (i = parser->toknext - 1; i >= 0; i--) {
 80a33de:	3901      	subs	r1, #1
 80a33e0:	3b10      	subs	r3, #16
 80a33e2:	e7f1      	b.n	80a33c8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x3a4>

080a33e4 <_ZN10JsonParser5parseEv>:
bool JsonParser::parse() {
 80a33e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (offset == 0) {
 80a33e6:	68c2      	ldr	r2, [r0, #12]
bool JsonParser::parse() {
 80a33e8:	4604      	mov	r4, r0
	if (offset == 0) {
 80a33ea:	b912      	cbnz	r2, 80a33f2 <_ZN10JsonParser5parseEv+0xe>
		return false;
 80a33ec:	2000      	movs	r0, #0
}
 80a33ee:	b003      	add	sp, #12
 80a33f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (tokens) {
 80a33f2:	6943      	ldr	r3, [r0, #20]
 80a33f4:	f100 0620 	add.w	r6, r0, #32
 80a33f8:	b1ab      	cbz	r3, 80a3426 <_ZN10JsonParser5parseEv+0x42>
/**
 * Creates a new parser based over a given  buffer with an array of tokens
 * available.
 */
void jsmn_init(jsmn_parser *parser) {
	parser->pos = 0;
 80a33fa:	2100      	movs	r1, #0
	parser->toknext = 0;
 80a33fc:	e9c0 1108 	strd	r1, r1, [r0, #32]
	parser->toksuper = -1;
 80a3400:	f04f 31ff 	mov.w	r1, #4294967295
 80a3404:	6281      	str	r1, [r0, #40]	; 0x28
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
 80a3406:	69c1      	ldr	r1, [r0, #28]
 80a3408:	9100      	str	r1, [sp, #0]
 80a340a:	6841      	ldr	r1, [r0, #4]
 80a340c:	4630      	mov	r0, r6
 80a340e:	f7ff fe09 	bl	80a3024 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
		if (result == JsonParserGeneratorRK::JSMN_ERROR_NOMEM) {
 80a3412:	1c43      	adds	r3, r0, #1
 80a3414:	d12c      	bne.n	80a3470 <_ZN10JsonParser5parseEv+0x8c>
			if (staticBuffers) {
 80a3416:	7c25      	ldrb	r5, [r4, #16]
 80a3418:	2d00      	cmp	r5, #0
 80a341a:	d1e7      	bne.n	80a33ec <_ZN10JsonParser5parseEv+0x8>
			free(tokens);
 80a341c:	6960      	ldr	r0, [r4, #20]
 80a341e:	f000 faa1 	bl	80a3964 <free>
			tokens = 0;
 80a3422:	6165      	str	r5, [r4, #20]
			maxTokens = 0;
 80a3424:	61e5      	str	r5, [r4, #28]
	parser->pos = 0;
 80a3426:	2500      	movs	r5, #0
	parser->toksuper = -1;
 80a3428:	f04f 37ff 	mov.w	r7, #4294967295
	int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, 0, 0);
 80a342c:	462b      	mov	r3, r5
 80a342e:	4630      	mov	r0, r6
	parser->toknext = 0;
 80a3430:	e9c4 5508 	strd	r5, r5, [r4, #32]
	int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, 0, 0);
 80a3434:	68e2      	ldr	r2, [r4, #12]
 80a3436:	6861      	ldr	r1, [r4, #4]
	parser->toksuper = -1;
 80a3438:	62a7      	str	r7, [r4, #40]	; 0x28
	int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, 0, 0);
 80a343a:	9500      	str	r5, [sp, #0]
 80a343c:	f7ff fdf2 	bl	80a3024 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
	if (result < 0) {
 80a3440:	2800      	cmp	r0, #0
 80a3442:	dbd3      	blt.n	80a33ec <_ZN10JsonParser5parseEv+0x8>
	maxTokens = (size_t) result;
 80a3444:	61e0      	str	r0, [r4, #28]
	if (maxTokens > 0) {
 80a3446:	d01b      	beq.n	80a3480 <_ZN10JsonParser5parseEv+0x9c>
		tokens = (JsonParserGeneratorRK::jsmntok_t *)malloc(sizeof(JsonParserGeneratorRK::jsmntok_t) * maxTokens);
 80a3448:	0100      	lsls	r0, r0, #4
 80a344a:	f000 fa83 	bl	80a3954 <malloc>
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
 80a344e:	69e2      	ldr	r2, [r4, #28]
		tokens = (JsonParserGeneratorRK::jsmntok_t *)malloc(sizeof(JsonParserGeneratorRK::jsmntok_t) * maxTokens);
 80a3450:	4603      	mov	r3, r0
 80a3452:	6160      	str	r0, [r4, #20]
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
 80a3454:	9200      	str	r2, [sp, #0]
 80a3456:	4630      	mov	r0, r6
	parser->toknext = 0;
 80a3458:	e9c4 5508 	strd	r5, r5, [r4, #32]
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
 80a345c:	68e2      	ldr	r2, [r4, #12]
 80a345e:	6861      	ldr	r1, [r4, #4]
	parser->toksuper = -1;
 80a3460:	62a7      	str	r7, [r4, #40]	; 0x28
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
 80a3462:	f7ff fddf 	bl	80a3024 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
		tokensEnd = &tokens[result];
 80a3466:	6963      	ldr	r3, [r4, #20]
 80a3468:	eb03 1300 	add.w	r3, r3, r0, lsl #4
		tokensEnd = tokens;
 80a346c:	61a3      	str	r3, [r4, #24]
 80a346e:	e005      	b.n	80a347c <_ZN10JsonParser5parseEv+0x98>
		if (result < 0) {
 80a3470:	2800      	cmp	r0, #0
 80a3472:	dbbb      	blt.n	80a33ec <_ZN10JsonParser5parseEv+0x8>
			tokensEnd = &tokens[result];
 80a3474:	6963      	ldr	r3, [r4, #20]
 80a3476:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 80a347a:	61a0      	str	r0, [r4, #24]
	return true;
 80a347c:	2001      	movs	r0, #1
 80a347e:	e7b6      	b.n	80a33ee <_ZN10JsonParser5parseEv+0xa>
		tokensEnd = tokens;
 80a3480:	6963      	ldr	r3, [r4, #20]
 80a3482:	e7f3      	b.n	80a346c <_ZN10JsonParser5parseEv+0x88>

080a3484 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a3484:	b508      	push	{r3, lr}
 80a3486:	4b02      	ldr	r3, [pc, #8]	; (80a3490 <HAL_Pin_Mode+0xc>)
 80a3488:	681b      	ldr	r3, [r3, #0]
 80a348a:	689b      	ldr	r3, [r3, #8]
 80a348c:	9301      	str	r3, [sp, #4]
 80a348e:	bd08      	pop	{r3, pc}
 80a3490:	080601b0 	.word	0x080601b0

080a3494 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a3494:	b508      	push	{r3, lr}
 80a3496:	4b02      	ldr	r3, [pc, #8]	; (80a34a0 <HAL_Get_Pin_Mode+0xc>)
 80a3498:	681b      	ldr	r3, [r3, #0]
 80a349a:	68db      	ldr	r3, [r3, #12]
 80a349c:	9301      	str	r3, [sp, #4]
 80a349e:	bd08      	pop	{r3, pc}
 80a34a0:	080601b0 	.word	0x080601b0

080a34a4 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a34a4:	b508      	push	{r3, lr}
 80a34a6:	4b02      	ldr	r3, [pc, #8]	; (80a34b0 <HAL_GPIO_Write+0xc>)
 80a34a8:	681b      	ldr	r3, [r3, #0]
 80a34aa:	691b      	ldr	r3, [r3, #16]
 80a34ac:	9301      	str	r3, [sp, #4]
 80a34ae:	bd08      	pop	{r3, pc}
 80a34b0:	080601b0 	.word	0x080601b0

080a34b4 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 80a34b4:	b508      	push	{r3, lr}
 80a34b6:	4b02      	ldr	r3, [pc, #8]	; (80a34c0 <HAL_GPIO_Read+0xc>)
 80a34b8:	681b      	ldr	r3, [r3, #0]
 80a34ba:	695b      	ldr	r3, [r3, #20]
 80a34bc:	9301      	str	r3, [sp, #4]
 80a34be:	bd08      	pop	{r3, pc}
 80a34c0:	080601b0 	.word	0x080601b0

080a34c4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a34c4:	b508      	push	{r3, lr}
 80a34c6:	4b02      	ldr	r3, [pc, #8]	; (80a34d0 <HAL_RNG_GetRandomNumber+0xc>)
 80a34c8:	681b      	ldr	r3, [r3, #0]
 80a34ca:	685b      	ldr	r3, [r3, #4]
 80a34cc:	9301      	str	r3, [sp, #4]
 80a34ce:	bd08      	pop	{r3, pc}
 80a34d0:	0806019c 	.word	0x0806019c

080a34d4 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a34d4:	b508      	push	{r3, lr}
 80a34d6:	4b02      	ldr	r3, [pc, #8]	; (80a34e0 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a34d8:	681b      	ldr	r3, [r3, #0]
 80a34da:	695b      	ldr	r3, [r3, #20]
 80a34dc:	9301      	str	r3, [sp, #4]
 80a34de:	bd08      	pop	{r3, pc}
 80a34e0:	0806019c 	.word	0x0806019c

080a34e4 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
 80a34e4:	b508      	push	{r3, lr}
 80a34e6:	4b02      	ldr	r3, [pc, #8]	; (80a34f0 <hal_rtc_time_is_valid+0xc>)
 80a34e8:	681b      	ldr	r3, [r3, #0]
 80a34ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a34ec:	9301      	str	r3, [sp, #4]
 80a34ee:	bd08      	pop	{r3, pc}
 80a34f0:	0806019c 	.word	0x0806019c

080a34f4 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
 80a34f4:	b508      	push	{r3, lr}
 80a34f6:	4b02      	ldr	r3, [pc, #8]	; (80a3500 <hal_rtc_get_time+0xc>)
 80a34f8:	681b      	ldr	r3, [r3, #0]
 80a34fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a34fc:	9301      	str	r3, [sp, #4]
 80a34fe:	bd08      	pop	{r3, pc}
 80a3500:	0806019c 	.word	0x0806019c

080a3504 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80a3504:	b508      	push	{r3, lr}
 80a3506:	4b02      	ldr	r3, [pc, #8]	; (80a3510 <os_mutex_recursive_create+0xc>)
 80a3508:	681b      	ldr	r3, [r3, #0]
 80a350a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a350c:	9301      	str	r3, [sp, #4]
 80a350e:	bd08      	pop	{r3, pc}
 80a3510:	080601d0 	.word	0x080601d0

080a3514 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80a3514:	b508      	push	{r3, lr}
 80a3516:	4b02      	ldr	r3, [pc, #8]	; (80a3520 <os_mutex_recursive_destroy+0xc>)
 80a3518:	681b      	ldr	r3, [r3, #0]
 80a351a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a351c:	9301      	str	r3, [sp, #4]
 80a351e:	bd08      	pop	{r3, pc}
 80a3520:	080601d0 	.word	0x080601d0

080a3524 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
 80a3524:	b508      	push	{r3, lr}
 80a3526:	4b02      	ldr	r3, [pc, #8]	; (80a3530 <os_mutex_recursive_lock+0xc>)
 80a3528:	681b      	ldr	r3, [r3, #0]
 80a352a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a352c:	9301      	str	r3, [sp, #4]
 80a352e:	bd08      	pop	{r3, pc}
 80a3530:	080601d0 	.word	0x080601d0

080a3534 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
 80a3534:	b508      	push	{r3, lr}
 80a3536:	4b02      	ldr	r3, [pc, #8]	; (80a3540 <os_mutex_recursive_unlock+0xc>)
 80a3538:	681b      	ldr	r3, [r3, #0]
 80a353a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a353c:	9301      	str	r3, [sp, #4]
 80a353e:	bd08      	pop	{r3, pc}
 80a3540:	080601d0 	.word	0x080601d0

080a3544 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
 80a3544:	b508      	push	{r3, lr}
 80a3546:	4b02      	ldr	r3, [pc, #8]	; (80a3550 <hal_usart_init+0xc>)
 80a3548:	681b      	ldr	r3, [r3, #0]
 80a354a:	699b      	ldr	r3, [r3, #24]
 80a354c:	9301      	str	r3, [sp, #4]
 80a354e:	bd08      	pop	{r3, pc}
 80a3550:	080601c4 	.word	0x080601c4

080a3554 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 80a3554:	b508      	push	{r3, lr}
 80a3556:	4b02      	ldr	r3, [pc, #8]	; (80a3560 <hal_usart_write+0xc>)
 80a3558:	681b      	ldr	r3, [r3, #0]
 80a355a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a355c:	9301      	str	r3, [sp, #4]
 80a355e:	bd08      	pop	{r3, pc}
 80a3560:	080601c4 	.word	0x080601c4

080a3564 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 80a3564:	b508      	push	{r3, lr}
 80a3566:	4b02      	ldr	r3, [pc, #8]	; (80a3570 <hal_usart_available+0xc>)
 80a3568:	681b      	ldr	r3, [r3, #0]
 80a356a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a356c:	9301      	str	r3, [sp, #4]
 80a356e:	bd08      	pop	{r3, pc}
 80a3570:	080601c4 	.word	0x080601c4

080a3574 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 80a3574:	b508      	push	{r3, lr}
 80a3576:	4b02      	ldr	r3, [pc, #8]	; (80a3580 <hal_usart_read+0xc>)
 80a3578:	681b      	ldr	r3, [r3, #0]
 80a357a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a357c:	9301      	str	r3, [sp, #4]
 80a357e:	bd08      	pop	{r3, pc}
 80a3580:	080601c4 	.word	0x080601c4

080a3584 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 80a3584:	b508      	push	{r3, lr}
 80a3586:	4b02      	ldr	r3, [pc, #8]	; (80a3590 <hal_usart_peek+0xc>)
 80a3588:	681b      	ldr	r3, [r3, #0]
 80a358a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a358c:	9301      	str	r3, [sp, #4]
 80a358e:	bd08      	pop	{r3, pc}
 80a3590:	080601c4 	.word	0x080601c4

080a3594 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 80a3594:	b508      	push	{r3, lr}
 80a3596:	4b02      	ldr	r3, [pc, #8]	; (80a35a0 <hal_usart_flush+0xc>)
 80a3598:	681b      	ldr	r3, [r3, #0]
 80a359a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a359c:	9301      	str	r3, [sp, #4]
 80a359e:	bd08      	pop	{r3, pc}
 80a35a0:	080601c4 	.word	0x080601c4

080a35a4 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 80a35a4:	b508      	push	{r3, lr}
 80a35a6:	4b02      	ldr	r3, [pc, #8]	; (80a35b0 <hal_usart_is_enabled+0xc>)
 80a35a8:	681b      	ldr	r3, [r3, #0]
 80a35aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a35ac:	9301      	str	r3, [sp, #4]
 80a35ae:	bd08      	pop	{r3, pc}
 80a35b0:	080601c4 	.word	0x080601c4

080a35b4 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 80a35b4:	b508      	push	{r3, lr}
 80a35b6:	4b02      	ldr	r3, [pc, #8]	; (80a35c0 <hal_usart_available_data_for_write+0xc>)
 80a35b8:	681b      	ldr	r3, [r3, #0]
 80a35ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a35bc:	9301      	str	r3, [sp, #4]
 80a35be:	bd08      	pop	{r3, pc}
 80a35c0:	080601c4 	.word	0x080601c4

080a35c4 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
 80a35c4:	b508      	push	{r3, lr}
 80a35c6:	4b02      	ldr	r3, [pc, #8]	; (80a35d0 <hal_usart_begin_config+0xc>)
 80a35c8:	681b      	ldr	r3, [r3, #0]
 80a35ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a35cc:	9301      	str	r3, [sp, #4]
 80a35ce:	bd08      	pop	{r3, pc}
 80a35d0:	080601c4 	.word	0x080601c4

080a35d4 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 80a35d4:	b508      	push	{r3, lr}
 80a35d6:	4b02      	ldr	r3, [pc, #8]	; (80a35e0 <hal_i2c_write+0xc>)
 80a35d8:	681b      	ldr	r3, [r3, #0]
 80a35da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a35dc:	9301      	str	r3, [sp, #4]
 80a35de:	bd08      	pop	{r3, pc}
 80a35e0:	080601ac 	.word	0x080601ac

080a35e4 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 80a35e4:	b508      	push	{r3, lr}
 80a35e6:	4b02      	ldr	r3, [pc, #8]	; (80a35f0 <hal_i2c_available+0xc>)
 80a35e8:	681b      	ldr	r3, [r3, #0]
 80a35ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a35ec:	9301      	str	r3, [sp, #4]
 80a35ee:	bd08      	pop	{r3, pc}
 80a35f0:	080601ac 	.word	0x080601ac

080a35f4 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 80a35f4:	b508      	push	{r3, lr}
 80a35f6:	4b02      	ldr	r3, [pc, #8]	; (80a3600 <hal_i2c_read+0xc>)
 80a35f8:	681b      	ldr	r3, [r3, #0]
 80a35fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a35fc:	9301      	str	r3, [sp, #4]
 80a35fe:	bd08      	pop	{r3, pc}
 80a3600:	080601ac 	.word	0x080601ac

080a3604 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 80a3604:	b508      	push	{r3, lr}
 80a3606:	4b02      	ldr	r3, [pc, #8]	; (80a3610 <hal_i2c_peek+0xc>)
 80a3608:	681b      	ldr	r3, [r3, #0]
 80a360a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a360c:	9301      	str	r3, [sp, #4]
 80a360e:	bd08      	pop	{r3, pc}
 80a3610:	080601ac 	.word	0x080601ac

080a3614 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 80a3614:	b508      	push	{r3, lr}
 80a3616:	4b02      	ldr	r3, [pc, #8]	; (80a3620 <hal_i2c_flush+0xc>)
 80a3618:	681b      	ldr	r3, [r3, #0]
 80a361a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a361c:	9301      	str	r3, [sp, #4]
 80a361e:	bd08      	pop	{r3, pc}
 80a3620:	080601ac 	.word	0x080601ac

080a3624 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 80a3624:	b508      	push	{r3, lr}
 80a3626:	4b02      	ldr	r3, [pc, #8]	; (80a3630 <hal_i2c_is_enabled+0xc>)
 80a3628:	681b      	ldr	r3, [r3, #0]
 80a362a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a362c:	9301      	str	r3, [sp, #4]
 80a362e:	bd08      	pop	{r3, pc}
 80a3630:	080601ac 	.word	0x080601ac

080a3634 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 80a3634:	b508      	push	{r3, lr}
 80a3636:	4b03      	ldr	r3, [pc, #12]	; (80a3644 <hal_i2c_init+0x10>)
 80a3638:	681b      	ldr	r3, [r3, #0]
 80a363a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a363e:	9301      	str	r3, [sp, #4]
 80a3640:	bd08      	pop	{r3, pc}
 80a3642:	0000      	.short	0x0000
 80a3644:	080601ac 	.word	0x080601ac

080a3648 <socket_active_status>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, socket_active_status, uint8_t(sock_handle_t))
 80a3648:	b508      	push	{r3, lr}
 80a364a:	4b02      	ldr	r3, [pc, #8]	; (80a3654 <socket_active_status+0xc>)
 80a364c:	681b      	ldr	r3, [r3, #0]
 80a364e:	681b      	ldr	r3, [r3, #0]
 80a3650:	9301      	str	r3, [sp, #4]
 80a3652:	bd08      	pop	{r3, pc}
 80a3654:	080601bc 	.word	0x080601bc

080a3658 <socket_handle_valid>:
DYNALIB_FN(1, hal_socket, socket_handle_valid, uint8_t(sock_handle_t))
 80a3658:	b508      	push	{r3, lr}
 80a365a:	4b02      	ldr	r3, [pc, #8]	; (80a3664 <socket_handle_valid+0xc>)
 80a365c:	681b      	ldr	r3, [r3, #0]
 80a365e:	685b      	ldr	r3, [r3, #4]
 80a3660:	9301      	str	r3, [sp, #4]
 80a3662:	bd08      	pop	{r3, pc}
 80a3664:	080601bc 	.word	0x080601bc

080a3668 <socket_create>:
DYNALIB_FN(2, hal_socket, socket_create, sock_handle_t(uint8_t, uint8_t, uint8_t, uint16_t, network_interface_t))
 80a3668:	b508      	push	{r3, lr}
 80a366a:	4b02      	ldr	r3, [pc, #8]	; (80a3674 <socket_create+0xc>)
 80a366c:	681b      	ldr	r3, [r3, #0]
 80a366e:	689b      	ldr	r3, [r3, #8]
 80a3670:	9301      	str	r3, [sp, #4]
 80a3672:	bd08      	pop	{r3, pc}
 80a3674:	080601bc 	.word	0x080601bc

080a3678 <socket_connect>:
DYNALIB_FN(3, hal_socket, socket_connect, int32_t(sock_handle_t, const sockaddr_t*, long))
 80a3678:	b508      	push	{r3, lr}
 80a367a:	4b02      	ldr	r3, [pc, #8]	; (80a3684 <socket_connect+0xc>)
 80a367c:	681b      	ldr	r3, [r3, #0]
 80a367e:	68db      	ldr	r3, [r3, #12]
 80a3680:	9301      	str	r3, [sp, #4]
 80a3682:	bd08      	pop	{r3, pc}
 80a3684:	080601bc 	.word	0x080601bc

080a3688 <socket_receive>:
DYNALIB_FN(4, hal_socket, socket_receive, sock_result_t(sock_handle_t, void*, socklen_t, system_tick_t))
 80a3688:	b508      	push	{r3, lr}
 80a368a:	4b02      	ldr	r3, [pc, #8]	; (80a3694 <socket_receive+0xc>)
 80a368c:	681b      	ldr	r3, [r3, #0]
 80a368e:	691b      	ldr	r3, [r3, #16]
 80a3690:	9301      	str	r3, [sp, #4]
 80a3692:	bd08      	pop	{r3, pc}
 80a3694:	080601bc 	.word	0x080601bc

080a3698 <socket_close>:
DYNALIB_FN(5, hal_socket, socket_receivefrom, sock_result_t(sock_handle_t, void*, socklen_t, uint32_t, sockaddr_t*, socklen_t*))
DYNALIB_FN(6, hal_socket, socket_send, sock_result_t(sock_handle_t, const void*, socklen_t))
DYNALIB_FN(7, hal_socket, socket_sendto, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, sockaddr_t*, socklen_t))
DYNALIB_FN(8, hal_socket, socket_close, sock_result_t(sock_handle_t))
 80a3698:	b508      	push	{r3, lr}
 80a369a:	4b02      	ldr	r3, [pc, #8]	; (80a36a4 <socket_close+0xc>)
 80a369c:	681b      	ldr	r3, [r3, #0]
 80a369e:	6a1b      	ldr	r3, [r3, #32]
 80a36a0:	9301      	str	r3, [sp, #4]
 80a36a2:	bd08      	pop	{r3, pc}
 80a36a4:	080601bc 	.word	0x080601bc

080a36a8 <socket_handle_invalid>:
DYNALIB_FN(9, hal_socket, socket_reset_blocking_call, sock_result_t(void))
DYNALIB_FN(10, hal_socket, socket_create_tcp_server, sock_result_t(uint16_t, network_interface_t))
DYNALIB_FN(11, hal_socket, socket_accept, sock_result_t(sock_handle_t))
DYNALIB_FN(12, hal_socket, socket_handle_invalid, sock_handle_t(void))
 80a36a8:	b508      	push	{r3, lr}
 80a36aa:	4b02      	ldr	r3, [pc, #8]	; (80a36b4 <socket_handle_invalid+0xc>)
 80a36ac:	681b      	ldr	r3, [r3, #0]
 80a36ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a36b0:	9301      	str	r3, [sp, #4]
 80a36b2:	bd08      	pop	{r3, pc}
 80a36b4:	080601bc 	.word	0x080601bc

080a36b8 <socket_send_ex>:
DYNALIB_FN(13, hal_socket, socket_join_multicast, sock_result_t(const HAL_IPAddress*, network_interface_t, socket_multicast_info_t*))
DYNALIB_FN(14, hal_socket, socket_leave_multicast, sock_result_t(const HAL_IPAddress*, network_interface_t, socket_multicast_info_t*))
DYNALIB_FN(15, hal_socket, socket_peer, sock_result_t(sock_handle_t, sock_peer_t*, void*))
DYNALIB_FN(16, hal_socket, socket_shutdown, sock_result_t(sock_handle_t, int))
DYNALIB_FN(17, hal_socket, socket_send_ex, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, system_tick_t, void*))
 80a36b8:	b508      	push	{r3, lr}
 80a36ba:	4b02      	ldr	r3, [pc, #8]	; (80a36c4 <socket_send_ex+0xc>)
 80a36bc:	681b      	ldr	r3, [r3, #0]
 80a36be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a36c0:	9301      	str	r3, [sp, #4]
 80a36c2:	bd08      	pop	{r3, pc}
 80a36c4:	080601bc 	.word	0x080601bc

080a36c8 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
 80a36c8:	b508      	push	{r3, lr}
 80a36ca:	4b02      	ldr	r3, [pc, #8]	; (80a36d4 <hal_spi_begin+0xc>)
 80a36cc:	681b      	ldr	r3, [r3, #0]
 80a36ce:	681b      	ldr	r3, [r3, #0]
 80a36d0:	9301      	str	r3, [sp, #4]
 80a36d2:	bd08      	pop	{r3, pc}
 80a36d4:	080601b4 	.word	0x080601b4

080a36d8 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
 80a36d8:	b508      	push	{r3, lr}
 80a36da:	4b02      	ldr	r3, [pc, #8]	; (80a36e4 <hal_spi_transfer+0xc>)
 80a36dc:	681b      	ldr	r3, [r3, #0]
 80a36de:	695b      	ldr	r3, [r3, #20]
 80a36e0:	9301      	str	r3, [sp, #4]
 80a36e2:	bd08      	pop	{r3, pc}
 80a36e4:	080601b4 	.word	0x080601b4

080a36e8 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 80a36e8:	b508      	push	{r3, lr}
 80a36ea:	4b02      	ldr	r3, [pc, #8]	; (80a36f4 <hal_spi_init+0xc>)
 80a36ec:	681b      	ldr	r3, [r3, #0]
 80a36ee:	69db      	ldr	r3, [r3, #28]
 80a36f0:	9301      	str	r3, [sp, #4]
 80a36f2:	bd08      	pop	{r3, pc}
 80a36f4:	080601b4 	.word	0x080601b4

080a36f8 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 80a36f8:	b508      	push	{r3, lr}
 80a36fa:	4b02      	ldr	r3, [pc, #8]	; (80a3704 <hal_spi_is_enabled+0xc>)
 80a36fc:	681b      	ldr	r3, [r3, #0]
 80a36fe:	6a1b      	ldr	r3, [r3, #32]
 80a3700:	9301      	str	r3, [sp, #4]
 80a3702:	bd08      	pop	{r3, pc}
 80a3704:	080601b4 	.word	0x080601b4

080a3708 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a3708:	b508      	push	{r3, lr}
 80a370a:	4b02      	ldr	r3, [pc, #8]	; (80a3714 <HAL_USB_USART_Init+0xc>)
 80a370c:	681b      	ldr	r3, [r3, #0]
 80a370e:	681b      	ldr	r3, [r3, #0]
 80a3710:	9301      	str	r3, [sp, #4]
 80a3712:	bd08      	pop	{r3, pc}
 80a3714:	080601d8 	.word	0x080601d8

080a3718 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a3718:	b508      	push	{r3, lr}
 80a371a:	4b02      	ldr	r3, [pc, #8]	; (80a3724 <HAL_USB_USART_Begin+0xc>)
 80a371c:	681b      	ldr	r3, [r3, #0]
 80a371e:	685b      	ldr	r3, [r3, #4]
 80a3720:	9301      	str	r3, [sp, #4]
 80a3722:	bd08      	pop	{r3, pc}
 80a3724:	080601d8 	.word	0x080601d8

080a3728 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a3728:	b508      	push	{r3, lr}
 80a372a:	4b02      	ldr	r3, [pc, #8]	; (80a3734 <HAL_USB_USART_Available_Data+0xc>)
 80a372c:	681b      	ldr	r3, [r3, #0]
 80a372e:	691b      	ldr	r3, [r3, #16]
 80a3730:	9301      	str	r3, [sp, #4]
 80a3732:	bd08      	pop	{r3, pc}
 80a3734:	080601d8 	.word	0x080601d8

080a3738 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a3738:	b508      	push	{r3, lr}
 80a373a:	4b02      	ldr	r3, [pc, #8]	; (80a3744 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a373c:	681b      	ldr	r3, [r3, #0]
 80a373e:	695b      	ldr	r3, [r3, #20]
 80a3740:	9301      	str	r3, [sp, #4]
 80a3742:	bd08      	pop	{r3, pc}
 80a3744:	080601d8 	.word	0x080601d8

080a3748 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a3748:	b508      	push	{r3, lr}
 80a374a:	4b02      	ldr	r3, [pc, #8]	; (80a3754 <HAL_USB_USART_Receive_Data+0xc>)
 80a374c:	681b      	ldr	r3, [r3, #0]
 80a374e:	699b      	ldr	r3, [r3, #24]
 80a3750:	9301      	str	r3, [sp, #4]
 80a3752:	bd08      	pop	{r3, pc}
 80a3754:	080601d8 	.word	0x080601d8

080a3758 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a3758:	b508      	push	{r3, lr}
 80a375a:	4b02      	ldr	r3, [pc, #8]	; (80a3764 <HAL_USB_USART_Send_Data+0xc>)
 80a375c:	681b      	ldr	r3, [r3, #0]
 80a375e:	69db      	ldr	r3, [r3, #28]
 80a3760:	9301      	str	r3, [sp, #4]
 80a3762:	bd08      	pop	{r3, pc}
 80a3764:	080601d8 	.word	0x080601d8

080a3768 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a3768:	b508      	push	{r3, lr}
 80a376a:	4b02      	ldr	r3, [pc, #8]	; (80a3774 <HAL_USB_USART_Flush_Data+0xc>)
 80a376c:	681b      	ldr	r3, [r3, #0]
 80a376e:	6a1b      	ldr	r3, [r3, #32]
 80a3770:	9301      	str	r3, [sp, #4]
 80a3772:	bd08      	pop	{r3, pc}
 80a3774:	080601d8 	.word	0x080601d8

080a3778 <HAL_NET_SetNetWatchDog>:

DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
 80a3778:	b508      	push	{r3, lr}
 80a377a:	4b02      	ldr	r3, [pc, #8]	; (80a3784 <HAL_NET_SetNetWatchDog+0xc>)
 80a377c:	681b      	ldr	r3, [r3, #0]
 80a377e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a3780:	9301      	str	r3, [sp, #4]
 80a3782:	bd08      	pop	{r3, pc}
 80a3784:	080601c0 	.word	0x080601c0

080a3788 <inet_gethostbyname>:
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a3788:	b508      	push	{r3, lr}
 80a378a:	4b02      	ldr	r3, [pc, #8]	; (80a3794 <inet_gethostbyname+0xc>)
 80a378c:	681b      	ldr	r3, [r3, #0]
 80a378e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a3790:	9301      	str	r3, [sp, #4]
 80a3792:	bd08      	pop	{r3, pc}
 80a3794:	080601c0 	.word	0x080601c0

080a3798 <wlan_select_antenna>:
DYNALIB_FN(19, hal_wlan, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(20, hal_wlan, wlan_select_antenna, int(WLanSelectAntenna_TypeDef))
 80a3798:	b508      	push	{r3, lr}
 80a379a:	4b02      	ldr	r3, [pc, #8]	; (80a37a4 <wlan_select_antenna+0xc>)
 80a379c:	681b      	ldr	r3, [r3, #0]
 80a379e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80a37a0:	9301      	str	r3, [sp, #4]
 80a37a2:	bd08      	pop	{r3, pc}
 80a37a4:	080601c0 	.word	0x080601c0

080a37a8 <wlan_connected_info>:
DYNALIB_FN(24, hal_wlan, wlan_get_credentials, int(wlan_scan_result_t, void*))
DYNALIB_FN(25, hal_wlan, softap_set_application_page_handler, int(PageProvider* provider, void* reserved))
DYNALIB_FN(26, hal_wlan, wlan_restart, int(void*))
DYNALIB_FN(27, hal_wlan, wlan_set_hostname, int(const char*, void*))
DYNALIB_FN(28, hal_wlan, wlan_get_hostname, int(char*, size_t, void*))
DYNALIB_FN(29, hal_wlan, wlan_connected_info, int(void*, wlan_connected_info_t*, void*))
 80a37a8:	b508      	push	{r3, lr}
 80a37aa:	4b02      	ldr	r3, [pc, #8]	; (80a37b4 <wlan_connected_info+0xc>)
 80a37ac:	681b      	ldr	r3, [r3, #0]
 80a37ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a37b0:	9301      	str	r3, [sp, #4]
 80a37b2:	bd08      	pop	{r3, pc}
 80a37b4:	080601c0 	.word	0x080601c0

080a37b8 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
 80a37b8:	b508      	push	{r3, lr}
 80a37ba:	4b02      	ldr	r3, [pc, #8]	; (80a37c4 <log_message+0xc>)
 80a37bc:	681b      	ldr	r3, [r3, #0]
 80a37be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80a37c0:	9301      	str	r3, [sp, #4]
 80a37c2:	bd08      	pop	{r3, pc}
 80a37c4:	080201a8 	.word	0x080201a8

080a37c8 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 80a37c8:	b508      	push	{r3, lr}
 80a37ca:	4b02      	ldr	r3, [pc, #8]	; (80a37d4 <system_mode+0xc>)
 80a37cc:	681b      	ldr	r3, [r3, #0]
 80a37ce:	681b      	ldr	r3, [r3, #0]
 80a37d0:	9301      	str	r3, [sp, #4]
 80a37d2:	bd08      	pop	{r3, pc}
 80a37d4:	080601a4 	.word	0x080601a4

080a37d8 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a37d8:	b508      	push	{r3, lr}
 80a37da:	4b02      	ldr	r3, [pc, #8]	; (80a37e4 <set_system_mode+0xc>)
 80a37dc:	681b      	ldr	r3, [r3, #0]
 80a37de:	685b      	ldr	r3, [r3, #4]
 80a37e0:	9301      	str	r3, [sp, #4]
 80a37e2:	bd08      	pop	{r3, pc}
 80a37e4:	080601a4 	.word	0x080601a4

080a37e8 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a37e8:	b508      	push	{r3, lr}
 80a37ea:	4b02      	ldr	r3, [pc, #8]	; (80a37f4 <system_delay_ms+0xc>)
 80a37ec:	681b      	ldr	r3, [r3, #0]
 80a37ee:	695b      	ldr	r3, [r3, #20]
 80a37f0:	9301      	str	r3, [sp, #4]
 80a37f2:	bd08      	pop	{r3, pc}
 80a37f4:	080601a4 	.word	0x080601a4

080a37f8 <system_thread_get_state>:
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 80a37f8:	b508      	push	{r3, lr}
 80a37fa:	4b02      	ldr	r3, [pc, #8]	; (80a3804 <system_thread_get_state+0xc>)
 80a37fc:	681b      	ldr	r3, [r3, #0]
 80a37fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a3800:	9301      	str	r3, [sp, #4]
 80a3802:	bd08      	pop	{r3, pc}
 80a3804:	080601a4 	.word	0x080601a4

080a3808 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a3808:	b508      	push	{r3, lr}
 80a380a:	4b03      	ldr	r3, [pc, #12]	; (80a3818 <system_ctrl_set_app_request_handler+0x10>)
 80a380c:	681b      	ldr	r3, [r3, #0]
 80a380e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a3812:	9301      	str	r3, [sp, #4]
 80a3814:	bd08      	pop	{r3, pc}
 80a3816:	0000      	.short	0x0000
 80a3818:	080601a4 	.word	0x080601a4

080a381c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a381c:	b508      	push	{r3, lr}
 80a381e:	4b03      	ldr	r3, [pc, #12]	; (80a382c <system_ctrl_set_result+0x10>)
 80a3820:	681b      	ldr	r3, [r3, #0]
 80a3822:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a3826:	9301      	str	r3, [sp, #4]
 80a3828:	bd08      	pop	{r3, pc}
 80a382a:	0000      	.short	0x0000
 80a382c:	080601a4 	.word	0x080601a4

080a3830 <system_reset>:
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))
 80a3830:	b508      	push	{r3, lr}
 80a3832:	4b03      	ldr	r3, [pc, #12]	; (80a3840 <system_reset+0x10>)
 80a3834:	681b      	ldr	r3, [r3, #0]
 80a3836:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80a383a:	9301      	str	r3, [sp, #4]
 80a383c:	bd08      	pop	{r3, pc}
 80a383e:	0000      	.short	0x0000
 80a3840:	080601a4 	.word	0x080601a4

080a3844 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a3844:	b508      	push	{r3, lr}
 80a3846:	4b02      	ldr	r3, [pc, #8]	; (80a3850 <network_connect+0xc>)
 80a3848:	681b      	ldr	r3, [r3, #0]
 80a384a:	685b      	ldr	r3, [r3, #4]
 80a384c:	9301      	str	r3, [sp, #4]
 80a384e:	bd08      	pop	{r3, pc}
 80a3850:	080601c8 	.word	0x080601c8

080a3854 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a3854:	b508      	push	{r3, lr}
 80a3856:	4b02      	ldr	r3, [pc, #8]	; (80a3860 <network_connecting+0xc>)
 80a3858:	681b      	ldr	r3, [r3, #0]
 80a385a:	689b      	ldr	r3, [r3, #8]
 80a385c:	9301      	str	r3, [sp, #4]
 80a385e:	bd08      	pop	{r3, pc}
 80a3860:	080601c8 	.word	0x080601c8

080a3864 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a3864:	b508      	push	{r3, lr}
 80a3866:	4b02      	ldr	r3, [pc, #8]	; (80a3870 <network_disconnect+0xc>)
 80a3868:	681b      	ldr	r3, [r3, #0]
 80a386a:	68db      	ldr	r3, [r3, #12]
 80a386c:	9301      	str	r3, [sp, #4]
 80a386e:	bd08      	pop	{r3, pc}
 80a3870:	080601c8 	.word	0x080601c8

080a3874 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a3874:	b508      	push	{r3, lr}
 80a3876:	4b02      	ldr	r3, [pc, #8]	; (80a3880 <network_ready+0xc>)
 80a3878:	681b      	ldr	r3, [r3, #0]
 80a387a:	691b      	ldr	r3, [r3, #16]
 80a387c:	9301      	str	r3, [sp, #4]
 80a387e:	bd08      	pop	{r3, pc}
 80a3880:	080601c8 	.word	0x080601c8

080a3884 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a3884:	b508      	push	{r3, lr}
 80a3886:	4b02      	ldr	r3, [pc, #8]	; (80a3890 <network_on+0xc>)
 80a3888:	681b      	ldr	r3, [r3, #0]
 80a388a:	695b      	ldr	r3, [r3, #20]
 80a388c:	9301      	str	r3, [sp, #4]
 80a388e:	bd08      	pop	{r3, pc}
 80a3890:	080601c8 	.word	0x080601c8

080a3894 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a3894:	b508      	push	{r3, lr}
 80a3896:	4b02      	ldr	r3, [pc, #8]	; (80a38a0 <network_off+0xc>)
 80a3898:	681b      	ldr	r3, [r3, #0]
 80a389a:	699b      	ldr	r3, [r3, #24]
 80a389c:	9301      	str	r3, [sp, #4]
 80a389e:	bd08      	pop	{r3, pc}
 80a38a0:	080601c8 	.word	0x080601c8

080a38a4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a38a4:	b508      	push	{r3, lr}
 80a38a6:	4b02      	ldr	r3, [pc, #8]	; (80a38b0 <network_listen+0xc>)
 80a38a8:	681b      	ldr	r3, [r3, #0]
 80a38aa:	69db      	ldr	r3, [r3, #28]
 80a38ac:	9301      	str	r3, [sp, #4]
 80a38ae:	bd08      	pop	{r3, pc}
 80a38b0:	080601c8 	.word	0x080601c8

080a38b4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a38b4:	b508      	push	{r3, lr}
 80a38b6:	4b02      	ldr	r3, [pc, #8]	; (80a38c0 <network_listening+0xc>)
 80a38b8:	681b      	ldr	r3, [r3, #0]
 80a38ba:	6a1b      	ldr	r3, [r3, #32]
 80a38bc:	9301      	str	r3, [sp, #4]
 80a38be:	bd08      	pop	{r3, pc}
 80a38c0:	080601c8 	.word	0x080601c8

080a38c4 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a38c4:	b508      	push	{r3, lr}
 80a38c6:	4b02      	ldr	r3, [pc, #8]	; (80a38d0 <network_set_listen_timeout+0xc>)
 80a38c8:	681b      	ldr	r3, [r3, #0]
 80a38ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a38cc:	9301      	str	r3, [sp, #4]
 80a38ce:	bd08      	pop	{r3, pc}
 80a38d0:	080601c8 	.word	0x080601c8

080a38d4 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a38d4:	b508      	push	{r3, lr}
 80a38d6:	4b02      	ldr	r3, [pc, #8]	; (80a38e0 <network_get_listen_timeout+0xc>)
 80a38d8:	681b      	ldr	r3, [r3, #0]
 80a38da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a38dc:	9301      	str	r3, [sp, #4]
 80a38de:	bd08      	pop	{r3, pc}
 80a38e0:	080601c8 	.word	0x080601c8

080a38e4 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
 80a38e4:	b508      	push	{r3, lr}
 80a38e6:	4b02      	ldr	r3, [pc, #8]	; (80a38f0 <spark_variable+0xc>)
 80a38e8:	681b      	ldr	r3, [r3, #0]
 80a38ea:	681b      	ldr	r3, [r3, #0]
 80a38ec:	9301      	str	r3, [sp, #4]
 80a38ee:	bd08      	pop	{r3, pc}
 80a38f0:	080601cc 	.word	0x080601cc

080a38f4 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
 80a38f4:	b508      	push	{r3, lr}
 80a38f6:	4b02      	ldr	r3, [pc, #8]	; (80a3900 <spark_function+0xc>)
 80a38f8:	681b      	ldr	r3, [r3, #0]
 80a38fa:	685b      	ldr	r3, [r3, #4]
 80a38fc:	9301      	str	r3, [sp, #4]
 80a38fe:	bd08      	pop	{r3, pc}
 80a3900:	080601cc 	.word	0x080601cc

080a3904 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 80a3904:	b508      	push	{r3, lr}
 80a3906:	4b02      	ldr	r3, [pc, #8]	; (80a3910 <spark_process+0xc>)
 80a3908:	681b      	ldr	r3, [r3, #0]
 80a390a:	689b      	ldr	r3, [r3, #8]
 80a390c:	9301      	str	r3, [sp, #4]
 80a390e:	bd08      	pop	{r3, pc}
 80a3910:	080601cc 	.word	0x080601cc

080a3914 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
 80a3914:	b508      	push	{r3, lr}
 80a3916:	4b02      	ldr	r3, [pc, #8]	; (80a3920 <spark_cloud_flag_connect+0xc>)
 80a3918:	681b      	ldr	r3, [r3, #0]
 80a391a:	68db      	ldr	r3, [r3, #12]
 80a391c:	9301      	str	r3, [sp, #4]
 80a391e:	bd08      	pop	{r3, pc}
 80a3920:	080601cc 	.word	0x080601cc

080a3924 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 80a3924:	b508      	push	{r3, lr}
 80a3926:	4b02      	ldr	r3, [pc, #8]	; (80a3930 <spark_cloud_flag_connected+0xc>)
 80a3928:	681b      	ldr	r3, [r3, #0]
 80a392a:	695b      	ldr	r3, [r3, #20]
 80a392c:	9301      	str	r3, [sp, #4]
 80a392e:	bd08      	pop	{r3, pc}
 80a3930:	080601cc 	.word	0x080601cc

080a3934 <spark_sync_time_pending>:
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 80a3934:	b508      	push	{r3, lr}
 80a3936:	4b02      	ldr	r3, [pc, #8]	; (80a3940 <spark_sync_time_pending+0xc>)
 80a3938:	681b      	ldr	r3, [r3, #0]
 80a393a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a393c:	9301      	str	r3, [sp, #4]
 80a393e:	bd08      	pop	{r3, pc}
 80a3940:	080601cc 	.word	0x080601cc

080a3944 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a3944:	b508      	push	{r3, lr}
 80a3946:	4b02      	ldr	r3, [pc, #8]	; (80a3950 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a3948:	681b      	ldr	r3, [r3, #0]
 80a394a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a394c:	9301      	str	r3, [sp, #4]
 80a394e:	bd08      	pop	{r3, pc}
 80a3950:	080601cc 	.word	0x080601cc

080a3954 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a3954:	b508      	push	{r3, lr}
 80a3956:	4b02      	ldr	r3, [pc, #8]	; (80a3960 <malloc+0xc>)
 80a3958:	681b      	ldr	r3, [r3, #0]
 80a395a:	681b      	ldr	r3, [r3, #0]
 80a395c:	9301      	str	r3, [sp, #4]
 80a395e:	bd08      	pop	{r3, pc}
 80a3960:	080601a0 	.word	0x080601a0

080a3964 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a3964:	b508      	push	{r3, lr}
 80a3966:	4b02      	ldr	r3, [pc, #8]	; (80a3970 <free+0xc>)
 80a3968:	681b      	ldr	r3, [r3, #0]
 80a396a:	685b      	ldr	r3, [r3, #4]
 80a396c:	9301      	str	r3, [sp, #4]
 80a396e:	bd08      	pop	{r3, pc}
 80a3970:	080601a0 	.word	0x080601a0

080a3974 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a3974:	b508      	push	{r3, lr}
 80a3976:	4b02      	ldr	r3, [pc, #8]	; (80a3980 <realloc+0xc>)
 80a3978:	681b      	ldr	r3, [r3, #0]
 80a397a:	689b      	ldr	r3, [r3, #8]
 80a397c:	9301      	str	r3, [sp, #4]
 80a397e:	bd08      	pop	{r3, pc}
 80a3980:	080601a0 	.word	0x080601a0

080a3984 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
 80a3984:	b508      	push	{r3, lr}
 80a3986:	4b02      	ldr	r3, [pc, #8]	; (80a3990 <siprintf+0xc>)
 80a3988:	681b      	ldr	r3, [r3, #0]
 80a398a:	691b      	ldr	r3, [r3, #16]
 80a398c:	9301      	str	r3, [sp, #4]
 80a398e:	bd08      	pop	{r3, pc}
 80a3990:	080601a0 	.word	0x080601a0

080a3994 <sscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
 80a3994:	b508      	push	{r3, lr}
 80a3996:	4b02      	ldr	r3, [pc, #8]	; (80a39a0 <sscanf+0xc>)
 80a3998:	681b      	ldr	r3, [r3, #0]
 80a399a:	695b      	ldr	r3, [r3, #20]
 80a399c:	9301      	str	r3, [sp, #4]
 80a399e:	bd08      	pop	{r3, pc}
 80a39a0:	080601a0 	.word	0x080601a0

080a39a4 <siscanf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
 80a39a4:	b508      	push	{r3, lr}
 80a39a6:	4b02      	ldr	r3, [pc, #8]	; (80a39b0 <siscanf+0xc>)
 80a39a8:	681b      	ldr	r3, [r3, #0]
 80a39aa:	699b      	ldr	r3, [r3, #24]
 80a39ac:	9301      	str	r3, [sp, #4]
 80a39ae:	bd08      	pop	{r3, pc}
 80a39b0:	080601a0 	.word	0x080601a0

080a39b4 <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
 80a39b4:	b508      	push	{r3, lr}
 80a39b6:	4b02      	ldr	r3, [pc, #8]	; (80a39c0 <snprintf+0xc>)
 80a39b8:	681b      	ldr	r3, [r3, #0]
 80a39ba:	69db      	ldr	r3, [r3, #28]
 80a39bc:	9301      	str	r3, [sp, #4]
 80a39be:	bd08      	pop	{r3, pc}
 80a39c0:	080601a0 	.word	0x080601a0

080a39c4 <sniprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
 80a39c4:	b508      	push	{r3, lr}
 80a39c6:	4b02      	ldr	r3, [pc, #8]	; (80a39d0 <sniprintf+0xc>)
 80a39c8:	681b      	ldr	r3, [r3, #0]
 80a39ca:	6a1b      	ldr	r3, [r3, #32]
 80a39cc:	9301      	str	r3, [sp, #4]
 80a39ce:	bd08      	pop	{r3, pc}
 80a39d0:	080601a0 	.word	0x080601a0

080a39d4 <vsnprintf>:
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 80a39d4:	b508      	push	{r3, lr}
 80a39d6:	4b02      	ldr	r3, [pc, #8]	; (80a39e0 <vsnprintf+0xc>)
 80a39d8:	681b      	ldr	r3, [r3, #0]
 80a39da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a39dc:	9301      	str	r3, [sp, #4]
 80a39de:	bd08      	pop	{r3, pc}
 80a39e0:	080601a0 	.word	0x080601a0

080a39e4 <_malloc_r>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80a39e4:	b508      	push	{r3, lr}
 80a39e6:	4b02      	ldr	r3, [pc, #8]	; (80a39f0 <_malloc_r+0xc>)
 80a39e8:	681b      	ldr	r3, [r3, #0]
 80a39ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a39ec:	9301      	str	r3, [sp, #4]
 80a39ee:	bd08      	pop	{r3, pc}
 80a39f0:	080601a0 	.word	0x080601a0

080a39f4 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 80a39f4:	b508      	push	{r3, lr}
 80a39f6:	4b02      	ldr	r3, [pc, #8]	; (80a3a00 <newlib_impure_ptr_callback+0xc>)
 80a39f8:	681b      	ldr	r3, [r3, #0]
 80a39fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a39fc:	9301      	str	r3, [sp, #4]
 80a39fe:	bd08      	pop	{r3, pc}
 80a3a00:	080601a0 	.word	0x080601a0

080a3a04 <_ZN8SPIClass6unlockEv>:
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
 80a3a04:	6880      	ldr	r0, [r0, #8]
 80a3a06:	f7ff bd95 	b.w	80a3534 <os_mutex_recursive_unlock>

080a3a0a <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 80a3a0a:	b570      	push	{r4, r5, r6, lr}
    RecursiveMutex() : handle_(nullptr)
 80a3a0c:	2600      	movs	r6, #0
 80a3a0e:	4604      	mov	r4, r0
 80a3a10:	460d      	mov	r5, r1
 80a3a12:	f840 6f08 	str.w	r6, [r0, #8]!
        os_mutex_recursive_create(&handle_);
 80a3a16:	f7ff fd75 	bl	80a3504 <os_mutex_recursive_create>
{
    _spi = spi;
    hal_spi_init(_spi);
 80a3a1a:	4628      	mov	r0, r5
    _spi = spi;
 80a3a1c:	7025      	strb	r5, [r4, #0]
    hal_spi_init(_spi);
 80a3a1e:	f7ff fe63 	bl	80a36e8 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
}
 80a3a22:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80a3a24:	6066      	str	r6, [r4, #4]
}
 80a3a26:	bd70      	pop	{r4, r5, r6, pc}

080a3a28 <_ZN8SPIClass5beginEt>:
        unlock();
    }
}

void SPIClass::begin(uint16_t ss_pin)
{
 80a3a28:	b538      	push	{r3, r4, r5, lr}
 80a3a2a:	4604      	mov	r4, r0
 80a3a2c:	460d      	mov	r5, r1
    void lock() { os_mutex_recursive_lock(handle_); }
 80a3a2e:	6880      	ldr	r0, [r0, #8]
 80a3a30:	f7ff fd78 	bl	80a3524 <os_mutex_recursive_lock>
    if (!lock())
    {
        hal_spi_begin(_spi, ss_pin);
 80a3a34:	7820      	ldrb	r0, [r4, #0]
 80a3a36:	4629      	mov	r1, r5
 80a3a38:	f7ff fe46 	bl	80a36c8 <hal_spi_begin>
        unlock();
 80a3a3c:	4620      	mov	r0, r4
 80a3a3e:	f7ff ffe1 	bl	80a3a04 <_ZN8SPIClass6unlockEv>
    }
}
 80a3a42:	bd38      	pop	{r3, r4, r5, pc}

080a3a44 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
 80a3a44:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
 80a3a46:	7800      	ldrb	r0, [r0, #0]
 80a3a48:	f7ff fe46 	bl	80a36d8 <hal_spi_transfer>
}
 80a3a4c:	b2c0      	uxtb	r0, r0
 80a3a4e:	bd08      	pop	{r3, pc}

080a3a50 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
 80a3a50:	b510      	push	{r4, lr}
 80a3a52:	4604      	mov	r4, r0
        if (wakeupSource_) {
 80a3a54:	6800      	ldr	r0, [r0, #0]
 80a3a56:	b118      	cbz	r0, 80a3a60 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
 80a3a58:	f7ff ff84 	bl	80a3964 <free>
            wakeupSource_ = nullptr;
 80a3a5c:	2300      	movs	r3, #0
 80a3a5e:	6023      	str	r3, [r4, #0]
        }
    }
 80a3a60:	bd10      	pop	{r4, pc}

080a3a62 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80a3a62:	b510      	push	{r4, lr}
 80a3a64:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
 80a3a66:	f7ff fff3 	bl	80a3a50 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
 80a3a6a:	4620      	mov	r0, r4
 80a3a6c:	bd10      	pop	{r4, pc}

080a3a6e <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>:
{
    reset(0, flags);
}

void SystemClass::reset(uint32_t data, SystemResetFlags flags)
{
 80a3a6e:	b507      	push	{r0, r1, r2, lr}
 80a3a70:	460b      	mov	r3, r1
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
 80a3a72:	2100      	movs	r1, #0
{
 80a3a74:	4602      	mov	r2, r0
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
 80a3a76:	9100      	str	r1, [sp, #0]
 80a3a78:	2001      	movs	r0, #1
 80a3a7a:	218c      	movs	r1, #140	; 0x8c
 80a3a7c:	f7ff fed8 	bl	80a3830 <system_reset>
}
 80a3a80:	b003      	add	sp, #12
 80a3a82:	f85d fb04 	ldr.w	pc, [sp], #4

080a3a86 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>:
{
 80a3a86:	4601      	mov	r1, r0
    reset(0, flags);
 80a3a88:	2000      	movs	r0, #0
 80a3a8a:	f7ff bff0 	b.w	80a3a6e <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>

080a3a8e <_ZN11SystemClass5resetEv>:
    reset(SystemResetFlags());
 80a3a8e:	2000      	movs	r0, #0
 80a3a90:	f7ff bff9 	b.w	80a3a86 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>

080a3a94 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a3a94:	2202      	movs	r2, #2
              error_(SYSTEM_ERROR_NONE) {
 80a3a96:	2000      	movs	r0, #0
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80a3a98:	b510      	push	{r4, lr}
 80a3a9a:	4b08      	ldr	r3, [pc, #32]	; (80a3abc <_GLOBAL__sub_I_System+0x28>)
 80a3a9c:	4c08      	ldr	r4, [pc, #32]	; (80a3ac0 <_GLOBAL__sub_I_System+0x2c>)
 80a3a9e:	601a      	str	r2, [r3, #0]
    SleepResult() {}
 80a3aa0:	4b08      	ldr	r3, [pc, #32]	; (80a3ac4 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
 80a3aa2:	6020      	str	r0, [r4, #0]
 80a3aa4:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
 80a3aa6:	71a0      	strb	r0, [r4, #6]
 80a3aa8:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a3aaa:	f7ff fe95 	bl	80a37d8 <set_system_mode>
SystemClass System;
 80a3aae:	4620      	mov	r0, r4
 80a3ab0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
 80a3ab4:	4a04      	ldr	r2, [pc, #16]	; (80a3ac8 <_GLOBAL__sub_I_System+0x34>)
 80a3ab6:	4905      	ldr	r1, [pc, #20]	; (80a3acc <_GLOBAL__sub_I_System+0x38>)
 80a3ab8:	f001 bcbe 	b.w	80a5438 <__aeabi_atexit>
 80a3abc:	20000564 	.word	0x20000564
 80a3ac0:	20000558 	.word	0x20000558
 80a3ac4:	ffff0000 	.word	0xffff0000
 80a3ac8:	20000240 	.word	0x20000240
 80a3acc:	080a3a63 	.word	0x080a3a63

080a3ad0 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
 80a3ad0:	b510      	push	{r4, lr}
 80a3ad2:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
 80a3ad4:	f003 fe00 	bl	80a76d8 <strlen>
 80a3ad8:	1e43      	subs	r3, r0, #1
 80a3ada:	4620      	mov	r0, r4
 80a3adc:	4423      	add	r3, r4
	while(i<j){
 80a3ade:	4283      	cmp	r3, r0
 80a3ae0:	d906      	bls.n	80a3af0 <_Z11str_reversePc+0x20>
		c = *i;
 80a3ae2:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
 80a3ae4:	7819      	ldrb	r1, [r3, #0]
 80a3ae6:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
 80a3aea:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
 80a3aee:	e7f6      	b.n	80a3ade <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
 80a3af0:	bd10      	pop	{r4, pc}

080a3af2 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
 80a3af2:	b570      	push	{r4, r5, r6, lr}
 80a3af4:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
 80a3af6:	1e91      	subs	r1, r2, #2
 80a3af8:	2922      	cmp	r1, #34	; 0x22
 80a3afa:	d822      	bhi.n	80a3b42 <ultoa+0x50>
		return NULL;
	}
	char* ptr=buffer;
 80a3afc:	4625      	mov	r5, r4

	div_t result;
	while(a){
 80a3afe:	b168      	cbz	r0, 80a3b1c <ultoa+0x2a>
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
 80a3b00:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
 80a3b04:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
 80a3b08:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
 80a3b0a:	2809      	cmp	r0, #9
                *ptr += '0';
 80a3b0c:	bf94      	ite	ls
 80a3b0e:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
 80a3b10:	3157      	addhi	r1, #87	; 0x57
 80a3b12:	b2c9      	uxtb	r1, r1
            }
            ++ptr;
            a = result.quot;
 80a3b14:	4630      	mov	r0, r6
 80a3b16:	f805 1b01 	strb.w	r1, [r5], #1
	while(a){
 80a3b1a:	e7f0      	b.n	80a3afe <ultoa+0xc>
 80a3b1c:	462a      	mov	r2, r5
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';
 80a3b1e:	2130      	movs	r1, #48	; 0x30
        while (ptr < buffer+pad)
 80a3b20:	4423      	add	r3, r4
 80a3b22:	4293      	cmp	r3, r2
 80a3b24:	d902      	bls.n	80a3b2c <ultoa+0x3a>
            *ptr++ = '0';
 80a3b26:	f802 1b01 	strb.w	r1, [r2], #1
        while (ptr < buffer+pad)
 80a3b2a:	e7fa      	b.n	80a3b22 <ultoa+0x30>
 80a3b2c:	1b5a      	subs	r2, r3, r5
 80a3b2e:	42ab      	cmp	r3, r5
 80a3b30:	bf38      	it	cc
 80a3b32:	2200      	movcc	r2, #0

	*ptr = '\0';
 80a3b34:	2300      	movs	r3, #0
	str_reverse(buffer);
 80a3b36:	4620      	mov	r0, r4
	*ptr = '\0';
 80a3b38:	54ab      	strb	r3, [r5, r2]
	str_reverse(buffer);
 80a3b3a:	f7ff ffc9 	bl	80a3ad0 <_Z11str_reversePc>
	return buffer;
 80a3b3e:	4620      	mov	r0, r4
}
 80a3b40:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
 80a3b42:	2000      	movs	r0, #0
 80a3b44:	e7fc      	b.n	80a3b40 <ultoa+0x4e>

080a3b46 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 80a3b46:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
 80a3b48:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 80a3b4a:	460c      	mov	r4, r1
 80a3b4c:	4615      	mov	r5, r2
	if(a<0){
 80a3b4e:	da0d      	bge.n	80a3b6c <itoa+0x26>
		*buffer = '-';
 80a3b50:	222d      	movs	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
 80a3b52:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a3b56:	bf0c      	ite	eq
 80a3b58:	4618      	moveq	r0, r3
 80a3b5a:	4258      	negne	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
 80a3b5c:	2301      	movs	r3, #1
		*buffer = '-';
 80a3b5e:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
 80a3b60:	462a      	mov	r2, r5
 80a3b62:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
 80a3b64:	f7ff ffc5 	bl	80a3af2 <ultoa>
	}
	return buffer;
}
 80a3b68:	4620      	mov	r0, r4
 80a3b6a:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
 80a3b6c:	2301      	movs	r3, #1
 80a3b6e:	e7f9      	b.n	80a3b64 <itoa+0x1e>

080a3b70 <utoa>:

__attribute__((weak)) char* utoa(unsigned a, char* buffer, int radix) {
 80a3b70:	b508      	push	{r3, lr}
    return ultoa(a, buffer, radix);
 80a3b72:	2301      	movs	r3, #1
 80a3b74:	f7ff ffbd 	bl	80a3af2 <ultoa>
}
 80a3b78:	bd08      	pop	{r3, pc}

080a3b7a <_ZN9TCPClient5writeEh>:
        }
        return connected;
}

size_t TCPClient::write(uint8_t b)
{
 80a3b7a:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a3b7c:	6803      	ldr	r3, [r0, #0]
{
 80a3b7e:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a3b82:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80a3b84:	2201      	movs	r2, #1
 80a3b86:	f247 5330 	movw	r3, #30000	; 0x7530
 80a3b8a:	f10d 0107 	add.w	r1, sp, #7
 80a3b8e:	47a0      	blx	r4
}
 80a3b90:	b002      	add	sp, #8
 80a3b92:	bd10      	pop	{r4, pc}

080a3b94 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size)
{
 80a3b94:	b410      	push	{r4}
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a3b96:	6803      	ldr	r3, [r0, #0]
 80a3b98:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80a3b9a:	f247 5330 	movw	r3, #30000	; 0x7530
 80a3b9e:	46a4      	mov	ip, r4
}
 80a3ba0:	bc10      	pop	{r4}
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a3ba2:	4760      	bx	ip

080a3ba4 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout)
{
 80a3ba4:	b513      	push	{r0, r1, r4, lr}
 80a3ba6:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
 80a3ba8:	6802      	ldr	r2, [r0, #0]
{
 80a3baa:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
 80a3bae:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
 80a3bb0:	f10d 0107 	add.w	r1, sp, #7
 80a3bb4:	2201      	movs	r2, #1
 80a3bb6:	47a0      	blx	r4
}
 80a3bb8:	b002      	add	sp, #8
 80a3bba:	bd10      	pop	{r4, pc}

080a3bbc <_ZN9TCPClient5flushEv>:
  d_->total = 0;
}

void TCPClient::flush()
{
}
 80a3bbc:	4770      	bx	lr

080a3bbe <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 80a3bbe:	4770      	bx	lr

080a3bc0 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info& __ti) noexcept override
 80a3bc0:	b510      	push	{r4, lr}
 80a3bc2:	4604      	mov	r4, r0
	    ||
 80a3bc4:	4b06      	ldr	r3, [pc, #24]	; (80a3be0 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x20>)
      _M_get_deleter(const std::type_info& __ti) noexcept override
 80a3bc6:	4608      	mov	r0, r1
	    ||
 80a3bc8:	4299      	cmp	r1, r3
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
 80a3bca:	f104 040c 	add.w	r4, r4, #12
 80a3bce:	d004      	beq.n	80a3bda <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1a>
	    _Sp_make_shared_tag::_S_eq(__ti)
 80a3bd0:	f001 fc3c 	bl	80a544c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
 80a3bd4:	2800      	cmp	r0, #0
	return nullptr;
 80a3bd6:	bf08      	it	eq
 80a3bd8:	2400      	moveq	r4, #0
      }
 80a3bda:	4620      	mov	r0, r4
 80a3bdc:	bd10      	pop	{r4, pc}
 80a3bde:	bf00      	nop
 80a3be0:	080a86d8 	.word	0x080a86d8

080a3be4 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 80a3be4:	b510      	push	{r4, lr}
 80a3be6:	4604      	mov	r4, r0
 80a3be8:	21ac      	movs	r1, #172	; 0xac
 80a3bea:	f001 fc2a 	bl	80a5442 <_ZdlPvj>
 80a3bee:	4620      	mov	r0, r4
 80a3bf0:	bd10      	pop	{r4, pc}

080a3bf2 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
 80a3bf2:	f7fc ba54 	b.w	80a009e <_ZdlPv>
	...

080a3bf8 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
 80a3bf8:	b538      	push	{r3, r4, r5, lr}
 80a3bfa:	4b0b      	ldr	r3, [pc, #44]	; (80a3c28 <_ZN9TCPClientD1Ev+0x30>)
	if (_M_pi != nullptr)
 80a3bfc:	6984      	ldr	r4, [r0, #24]
 80a3bfe:	4605      	mov	r5, r0
 80a3c00:	6003      	str	r3, [r0, #0]
 80a3c02:	b17c      	cbz	r4, 80a3c24 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
 80a3c04:	6863      	ldr	r3, [r4, #4]
 80a3c06:	3b01      	subs	r3, #1
 80a3c08:	6063      	str	r3, [r4, #4]
 80a3c0a:	b95b      	cbnz	r3, 80a3c24 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
 80a3c0c:	6823      	ldr	r3, [r4, #0]
 80a3c0e:	4620      	mov	r0, r4
 80a3c10:	689b      	ldr	r3, [r3, #8]
 80a3c12:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a3c14:	68a3      	ldr	r3, [r4, #8]
 80a3c16:	3b01      	subs	r3, #1
 80a3c18:	60a3      	str	r3, [r4, #8]
 80a3c1a:	b91b      	cbnz	r3, 80a3c24 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
 80a3c1c:	6823      	ldr	r3, [r4, #0]
 80a3c1e:	4620      	mov	r0, r4
 80a3c20:	68db      	ldr	r3, [r3, #12]
 80a3c22:	4798      	blx	r3
 80a3c24:	4628      	mov	r0, r5
 80a3c26:	bd38      	pop	{r3, r4, r5, pc}
 80a3c28:	080a86e8 	.word	0x080a86e8

080a3c2c <_ZN9TCPClientD0Ev>:
 80a3c2c:	b510      	push	{r4, lr}
 80a3c2e:	4604      	mov	r4, r0
 80a3c30:	f7ff ffe2 	bl	80a3bf8 <_ZN9TCPClientD1Ev>
 80a3c34:	4620      	mov	r0, r4
 80a3c36:	211c      	movs	r1, #28
 80a3c38:	f001 fc03 	bl	80a5442 <_ZdlPvj>
 80a3c3c:	4620      	mov	r0, r4
 80a3c3e:	bd10      	pop	{r4, pc}

080a3c40 <_ZN9TCPClient8remoteIPEv>:
{
   return (status()!=0);
}

IPAddress TCPClient::remoteIP()
{
 80a3c40:	b570      	push	{r4, r5, r6, lr}

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 80a3c42:	4604      	mov	r4, r0
 80a3c44:	4606      	mov	r6, r0
      }

    private:
      element_type*
      _M_get() const noexcept
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 80a3c46:	694d      	ldr	r5, [r1, #20]
 80a3c48:	4b04      	ldr	r3, [pc, #16]	; (80a3c5c <_ZN9TCPClient8remoteIPEv+0x1c>)
 80a3c4a:	358c      	adds	r5, #140	; 0x8c
 80a3c4c:	f844 3b04 	str.w	r3, [r4], #4
 80a3c50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a3c52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a3c54:	682b      	ldr	r3, [r5, #0]
    return d_->remoteIP;
}
 80a3c56:	4630      	mov	r0, r6
 80a3c58:	7023      	strb	r3, [r4, #0]
 80a3c5a:	bd70      	pop	{r4, r5, r6, pc}
 80a3c5c:	080a876c 	.word	0x080a876c

080a3c60 <_ZN9TCPClient4peekEv>:
{
 80a3c60:	b510      	push	{r4, lr}
 80a3c62:	6943      	ldr	r3, [r0, #20]
 80a3c64:	4604      	mov	r4, r0
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
 80a3c66:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a3c6a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80a3c6e:	429a      	cmp	r2, r3
 80a3c70:	d005      	beq.n	80a3c7e <_ZN9TCPClient4peekEv+0x1e>
 80a3c72:	6963      	ldr	r3, [r4, #20]
 80a3c74:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 80a3c78:	4413      	add	r3, r2
 80a3c7a:	7918      	ldrb	r0, [r3, #4]
}
 80a3c7c:	bd10      	pop	{r4, pc}
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
 80a3c7e:	6803      	ldr	r3, [r0, #0]
 80a3c80:	691b      	ldr	r3, [r3, #16]
 80a3c82:	4798      	blx	r3
 80a3c84:	2800      	cmp	r0, #0
 80a3c86:	d1f4      	bne.n	80a3c72 <_ZN9TCPClient4peekEv+0x12>
 80a3c88:	f04f 30ff 	mov.w	r0, #4294967295
 80a3c8c:	e7f6      	b.n	80a3c7c <_ZN9TCPClient4peekEv+0x1c>

080a3c8e <_ZN9TCPClient4readEv>:
{
 80a3c8e:	b510      	push	{r4, lr}
 80a3c90:	6943      	ldr	r3, [r0, #20]
 80a3c92:	4604      	mov	r4, r0
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
 80a3c94:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a3c98:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80a3c9c:	429a      	cmp	r2, r3
 80a3c9e:	d008      	beq.n	80a3cb2 <_ZN9TCPClient4readEv+0x24>
 80a3ca0:	6963      	ldr	r3, [r4, #20]
 80a3ca2:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 80a3ca6:	1c51      	adds	r1, r2, #1
 80a3ca8:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
 80a3cac:	4413      	add	r3, r2
 80a3cae:	7918      	ldrb	r0, [r3, #4]
}
 80a3cb0:	bd10      	pop	{r4, pc}
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
 80a3cb2:	6803      	ldr	r3, [r0, #0]
 80a3cb4:	691b      	ldr	r3, [r3, #16]
 80a3cb6:	4798      	blx	r3
 80a3cb8:	2800      	cmp	r0, #0
 80a3cba:	d1f1      	bne.n	80a3ca0 <_ZN9TCPClient4readEv+0x12>
 80a3cbc:	f04f 30ff 	mov.w	r0, #4294967295
 80a3cc0:	e7f6      	b.n	80a3cb0 <_ZN9TCPClient4readEv+0x22>

080a3cc2 <_ZN9TCPClient4readEPhj>:
{
 80a3cc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a3cc4:	6943      	ldr	r3, [r0, #20]
 80a3cc6:	4617      	mov	r7, r2
        if (bufferCount() || available())
 80a3cc8:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a3ccc:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
{
 80a3cd0:	4605      	mov	r5, r0
        if (bufferCount() || available())
 80a3cd2:	429a      	cmp	r2, r3
{
 80a3cd4:	460e      	mov	r6, r1
        if (bufferCount() || available())
 80a3cd6:	d016      	beq.n	80a3d06 <_ZN9TCPClient4readEPhj+0x44>
 80a3cd8:	6969      	ldr	r1, [r5, #20]
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80a3cda:	4630      	mov	r0, r6
  return d_->total - d_->offset;
 80a3cdc:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
 80a3ce0:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
 80a3ce4:	1ae4      	subs	r4, r4, r3
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
 80a3ce6:	42bc      	cmp	r4, r7
 80a3ce8:	bf28      	it	cs
 80a3cea:	463c      	movcs	r4, r7
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80a3cec:	3304      	adds	r3, #4
 80a3cee:	4622      	mov	r2, r4
 80a3cf0:	4419      	add	r1, r3
 80a3cf2:	f002 ff43 	bl	80a6b7c <memcpy>
 80a3cf6:	696a      	ldr	r2, [r5, #20]
          d_->offset += read;
 80a3cf8:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 80a3cfc:	4423      	add	r3, r4
 80a3cfe:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
 80a3d02:	4620      	mov	r0, r4
 80a3d04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (bufferCount() || available())
 80a3d06:	6803      	ldr	r3, [r0, #0]
 80a3d08:	691b      	ldr	r3, [r3, #16]
 80a3d0a:	4798      	blx	r3
 80a3d0c:	2800      	cmp	r0, #0
 80a3d0e:	d1e3      	bne.n	80a3cd8 <_ZN9TCPClient4readEPhj+0x16>
        int read = -1;
 80a3d10:	f04f 34ff 	mov.w	r4, #4294967295
 80a3d14:	e7f5      	b.n	80a3d02 <_ZN9TCPClient4readEPhj+0x40>

080a3d16 <_ZN9TCPClient12flush_bufferEv>:
  d_->offset = 0;
 80a3d16:	2300      	movs	r3, #0
 80a3d18:	6942      	ldr	r2, [r0, #20]
 80a3d1a:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
 80a3d1e:	6942      	ldr	r2, [r0, #20]
  d_->total = 0;
 80a3d20:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
 80a3d24:	4770      	bx	lr
	...

080a3d28 <_ZN9TCPClient7connectE9IPAddresstm>:
{
 80a3d28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a3d2c:	461f      	mov	r7, r3
    stop();
 80a3d2e:	6803      	ldr	r3, [r0, #0]
{
 80a3d30:	b08b      	sub	sp, #44	; 0x2c
    stop();
 80a3d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
{
 80a3d34:	4605      	mov	r5, r0
 80a3d36:	460c      	mov	r4, r1
 80a3d38:	4616      	mov	r6, r2
    stop();
 80a3d3a:	4798      	blx	r3
        if(Network.from(nif).ready())
 80a3d3c:	4638      	mov	r0, r7
 80a3d3e:	f001 fa89 	bl	80a5254 <_ZN5spark12NetworkClass4fromEm>
 80a3d42:	6803      	ldr	r3, [r0, #0]
 80a3d44:	68db      	ldr	r3, [r3, #12]
 80a3d46:	4798      	blx	r3
 80a3d48:	2800      	cmp	r0, #0
 80a3d4a:	d054      	beq.n	80a3df6 <_ZN9TCPClient7connectE9IPAddresstm+0xce>
          d_->sock = socket_create(AF_INET, SOCK_STREAM, IPPROTO_TCP, port, nif);
 80a3d4c:	4633      	mov	r3, r6
 80a3d4e:	2206      	movs	r2, #6
 80a3d50:	2101      	movs	r1, #1
 80a3d52:	2002      	movs	r0, #2
 80a3d54:	9700      	str	r7, [sp, #0]
 80a3d56:	f8d5 8014 	ldr.w	r8, [r5, #20]
 80a3d5a:	f7ff fc85 	bl	80a3668 <socket_create>
          LOG(TRACE, "TCPClient socket=%x", d_->sock);
 80a3d5e:	2320      	movs	r3, #32
          d_->sock = socket_create(AF_INET, SOCK_STREAM, IPPROTO_TCP, port, nif);
 80a3d60:	f8c8 0000 	str.w	r0, [r8]
          LOG(TRACE, "TCPClient socket=%x", d_->sock);
 80a3d64:	f04f 0800 	mov.w	r8, #0
 80a3d68:	e9cd 3802 	strd	r3, r8, [sp, #8]
 80a3d6c:	696b      	ldr	r3, [r5, #20]
 80a3d6e:	2001      	movs	r0, #1
 80a3d70:	681b      	ldr	r3, [r3, #0]
 80a3d72:	4923      	ldr	r1, [pc, #140]	; (80a3e00 <_ZN9TCPClient7connectE9IPAddresstm+0xd8>)
 80a3d74:	9301      	str	r3, [sp, #4]
 80a3d76:	4b23      	ldr	r3, [pc, #140]	; (80a3e04 <_ZN9TCPClient7connectE9IPAddresstm+0xdc>)
 80a3d78:	aa02      	add	r2, sp, #8
 80a3d7a:	9300      	str	r3, [sp, #0]
 80a3d7c:	4643      	mov	r3, r8
 80a3d7e:	f7ff fd1b 	bl	80a37b8 <log_message>
          if (socket_handle_valid(d_->sock))
 80a3d82:	696b      	ldr	r3, [r5, #20]
 80a3d84:	6818      	ldr	r0, [r3, #0]
 80a3d86:	f7ff fc67 	bl	80a3658 <socket_handle_valid>
 80a3d8a:	2800      	cmp	r0, #0
 80a3d8c:	d033      	beq.n	80a3df6 <_ZN9TCPClient7connectE9IPAddresstm+0xce>
            flush_buffer();
 80a3d8e:	4628      	mov	r0, r5
 80a3d90:	f7ff ffc1 	bl	80a3d16 <_ZN9TCPClient12flush_bufferEv>
            tSocketAddr.sa_family = AF_INET;
 80a3d94:	2302      	movs	r3, #2
 80a3d96:	f8ad 3008 	strh.w	r3, [sp, #8]
            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 80a3d9a:	79e3      	ldrb	r3, [r4, #7]
            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80a3d9c:	ba76      	rev16	r6, r6
            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 80a3d9e:	f88d 300c 	strb.w	r3, [sp, #12]
            tSocketAddr.sa_data[3] = ip[1];
 80a3da2:	79a3      	ldrb	r3, [r4, #6]
            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a3da4:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
            tSocketAddr.sa_data[3] = ip[1];
 80a3da8:	f88d 300d 	strb.w	r3, [sp, #13]
            tSocketAddr.sa_data[4] = ip[2];
 80a3dac:	7963      	ldrb	r3, [r4, #5]
            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80a3dae:	f8ad 600a 	strh.w	r6, [sp, #10]
            tSocketAddr.sa_data[4] = ip[2];
 80a3db2:	f88d 300e 	strb.w	r3, [sp, #14]
            tSocketAddr.sa_data[5] = ip[3];
 80a3db6:	f814 3f04 	ldrb.w	r3, [r4, #4]!
 80a3dba:	f88d 300f 	strb.w	r3, [sp, #15]
            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a3dbe:	f7ff fcdb 	bl	80a3778 <HAL_NET_SetNetWatchDog>
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80a3dc2:	696b      	ldr	r3, [r5, #20]
            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a3dc4:	4606      	mov	r6, r0
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80a3dc6:	2210      	movs	r2, #16
 80a3dc8:	6818      	ldr	r0, [r3, #0]
 80a3dca:	a902      	add	r1, sp, #8
 80a3dcc:	f7ff fc54 	bl	80a3678 <socket_connect>
 80a3dd0:	4681      	mov	r9, r0
            HAL_NET_SetNetWatchDog(ot);
 80a3dd2:	4630      	mov	r0, r6
 80a3dd4:	f7ff fcd0 	bl	80a3778 <HAL_NET_SetNetWatchDog>
 80a3dd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a3dda:	696e      	ldr	r6, [r5, #20]
 80a3ddc:	368c      	adds	r6, #140	; 0x8c
 80a3dde:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80a3de0:	6823      	ldr	r3, [r4, #0]
 80a3de2:	7033      	strb	r3, [r6, #0]
            nif_ = nif;
 80a3de4:	612f      	str	r7, [r5, #16]
            if(!connected)
 80a3de6:	f1b9 0f00 	cmp.w	r9, #0
 80a3dea:	d007      	beq.n	80a3dfc <_ZN9TCPClient7connectE9IPAddresstm+0xd4>
                stop();
 80a3dec:	682b      	ldr	r3, [r5, #0]
 80a3dee:	4628      	mov	r0, r5
 80a3df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a3df2:	4798      	blx	r3
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80a3df4:	4640      	mov	r0, r8
}
 80a3df6:	b00b      	add	sp, #44	; 0x2c
 80a3df8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a3dfc:	2001      	movs	r0, #1
        return connected;
 80a3dfe:	e7fa      	b.n	80a3df6 <_ZN9TCPClient7connectE9IPAddresstm+0xce>
 80a3e00:	080a86a0 	.word	0x080a86a0
 80a3e04:	080a86a7 	.word	0x080a86a7

080a3e08 <_ZN9TCPClient9availableEv>:
{
 80a3e08:	b538      	push	{r3, r4, r5, lr}
 80a3e0a:	6942      	ldr	r2, [r0, #20]
 80a3e0c:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total))
 80a3e0e:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 80a3e12:	b12b      	cbz	r3, 80a3e20 <_ZN9TCPClient9availableEv+0x18>
 80a3e14:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
 80a3e18:	429a      	cmp	r2, r3
 80a3e1a:	d101      	bne.n	80a3e20 <_ZN9TCPClient9availableEv+0x18>
        flush_buffer();
 80a3e1c:	f7ff ff7b 	bl	80a3d16 <_ZN9TCPClient12flush_bufferEv>
    if(Network.from(nif_).ready() && isOpen(d_->sock))
 80a3e20:	6920      	ldr	r0, [r4, #16]
 80a3e22:	f001 fa17 	bl	80a5254 <_ZN5spark12NetworkClass4fromEm>
 80a3e26:	6803      	ldr	r3, [r0, #0]
 80a3e28:	68db      	ldr	r3, [r3, #12]
 80a3e2a:	4798      	blx	r3
 80a3e2c:	b1f8      	cbz	r0, 80a3e6e <_ZN9TCPClient9availableEv+0x66>
 80a3e2e:	6963      	ldr	r3, [r4, #20]
   return socket_handle_valid(sd);
 80a3e30:	6818      	ldr	r0, [r3, #0]
 80a3e32:	f7ff fc11 	bl	80a3658 <socket_handle_valid>
    if(Network.from(nif_).ready() && isOpen(d_->sock))
 80a3e36:	b1d0      	cbz	r0, 80a3e6e <_ZN9TCPClient9availableEv+0x66>
 80a3e38:	6960      	ldr	r0, [r4, #20]
        if ( d_->total < arraySize(d_->buffer))
 80a3e3a:	f8b0 1086 	ldrh.w	r1, [r0, #134]	; 0x86
 80a3e3e:	297f      	cmp	r1, #127	; 0x7f
 80a3e40:	d815      	bhi.n	80a3e6e <_ZN9TCPClient9availableEv+0x66>
            int ret = socket_receive(d_->sock, d_->buffer + d_->total , arraySize(d_->buffer)-d_->total, 0);
 80a3e42:	1d05      	adds	r5, r0, #4
 80a3e44:	f1c1 0280 	rsb	r2, r1, #128	; 0x80
 80a3e48:	2300      	movs	r3, #0
 80a3e4a:	6800      	ldr	r0, [r0, #0]
 80a3e4c:	4429      	add	r1, r5
 80a3e4e:	f7ff fc1b 	bl	80a3688 <socket_receive>
            if (ret > 0)
 80a3e52:	2800      	cmp	r0, #0
 80a3e54:	dd0b      	ble.n	80a3e6e <_ZN9TCPClient9availableEv+0x66>
 80a3e56:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) d_->offset = 0;
 80a3e58:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a3e5c:	b90a      	cbnz	r2, 80a3e62 <_ZN9TCPClient9availableEv+0x5a>
 80a3e5e:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 80a3e62:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
 80a3e64:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a3e68:	4410      	add	r0, r2
 80a3e6a:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
 80a3e6e:	6963      	ldr	r3, [r4, #20]
  return d_->total - d_->offset;
 80a3e70:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
 80a3e74:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
 80a3e78:	1ac0      	subs	r0, r0, r3
 80a3e7a:	bd38      	pop	{r3, r4, r5, pc}

080a3e7c <_ZN9TCPClient4stopEv>:
{
 80a3e7c:	b538      	push	{r3, r4, r5, lr}
  if (isOpen(d_->sock))
 80a3e7e:	6943      	ldr	r3, [r0, #20]
{
 80a3e80:	4604      	mov	r4, r0
   return socket_handle_valid(sd);
 80a3e82:	6818      	ldr	r0, [r3, #0]
 80a3e84:	f7ff fbe8 	bl	80a3658 <socket_handle_valid>
  if (isOpen(d_->sock))
 80a3e88:	b118      	cbz	r0, 80a3e92 <_ZN9TCPClient4stopEv+0x16>
      socket_close(d_->sock);
 80a3e8a:	6963      	ldr	r3, [r4, #20]
 80a3e8c:	6818      	ldr	r0, [r3, #0]
 80a3e8e:	f7ff fc03 	bl	80a3698 <socket_close>
 80a3e92:	6965      	ldr	r5, [r4, #20]
  d_->sock = socket_handle_invalid();
 80a3e94:	f7ff fc08 	bl	80a36a8 <socket_handle_invalid>
 80a3e98:	6028      	str	r0, [r5, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a3e9a:	6960      	ldr	r0, [r4, #20]
 80a3e9c:	2211      	movs	r2, #17
 80a3e9e:	2100      	movs	r1, #0
 80a3ea0:	308c      	adds	r0, #140	; 0x8c
 80a3ea2:	f002 fe79 	bl	80a6b98 <memset>
  flush_buffer();
 80a3ea6:	4620      	mov	r0, r4
}
 80a3ea8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  flush_buffer();
 80a3eac:	f7ff bf33 	b.w	80a3d16 <_ZN9TCPClient12flush_bufferEv>

080a3eb0 <_ZN9TCPClient6statusEv>:
{
 80a3eb0:	b510      	push	{r4, lr}
  return (isOpen(d_->sock) && Network.from(nif_).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80a3eb2:	6943      	ldr	r3, [r0, #20]
{
 80a3eb4:	4604      	mov	r4, r0
   return socket_handle_valid(sd);
 80a3eb6:	6818      	ldr	r0, [r3, #0]
 80a3eb8:	f7ff fbce 	bl	80a3658 <socket_handle_valid>
  return (isOpen(d_->sock) && Network.from(nif_).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80a3ebc:	b908      	cbnz	r0, 80a3ec2 <_ZN9TCPClient6statusEv+0x12>
 80a3ebe:	2000      	movs	r0, #0
}
 80a3ec0:	bd10      	pop	{r4, pc}
  return (isOpen(d_->sock) && Network.from(nif_).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80a3ec2:	6920      	ldr	r0, [r4, #16]
 80a3ec4:	f001 f9c6 	bl	80a5254 <_ZN5spark12NetworkClass4fromEm>
 80a3ec8:	6803      	ldr	r3, [r0, #0]
 80a3eca:	68db      	ldr	r3, [r3, #12]
 80a3ecc:	4798      	blx	r3
 80a3ece:	2800      	cmp	r0, #0
 80a3ed0:	d0f5      	beq.n	80a3ebe <_ZN9TCPClient6statusEv+0xe>
 80a3ed2:	6963      	ldr	r3, [r4, #20]
 80a3ed4:	6818      	ldr	r0, [r3, #0]
 80a3ed6:	f7ff fbb7 	bl	80a3648 <socket_active_status>
 80a3eda:	fab0 f080 	clz	r0, r0
 80a3ede:	0940      	lsrs	r0, r0, #5
 80a3ee0:	e7ee      	b.n	80a3ec0 <_ZN9TCPClient6statusEv+0x10>

080a3ee2 <_ZN9TCPClientcvbEv>:
{
 80a3ee2:	b508      	push	{r3, lr}
   return (status()!=0);
 80a3ee4:	f7ff ffe4 	bl	80a3eb0 <_ZN9TCPClient6statusEv>
}
 80a3ee8:	3800      	subs	r0, #0
 80a3eea:	bf18      	it	ne
 80a3eec:	2001      	movne	r0, #1
 80a3eee:	bd08      	pop	{r3, pc}

080a3ef0 <_ZN9TCPClient5writeEPKhjm>:
{
 80a3ef0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}

    size_t printNumber(unsigned long, uint8_t);
    size_t printNumber(unsigned long long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
 80a3ef4:	2700      	movs	r7, #0
 80a3ef6:	6047      	str	r7, [r0, #4]
 80a3ef8:	4604      	mov	r4, r0
 80a3efa:	460d      	mov	r5, r1
 80a3efc:	4616      	mov	r6, r2
 80a3efe:	4698      	mov	r8, r3
    int ret = status() ? socket_send_ex(d_->sock, buffer, size, 0, timeout, nullptr) : -1;
 80a3f00:	f7ff ffd6 	bl	80a3eb0 <_ZN9TCPClient6statusEv>
 80a3f04:	b170      	cbz	r0, 80a3f24 <_ZN9TCPClient5writeEPKhjm+0x34>
 80a3f06:	e9cd 8700 	strd	r8, r7, [sp]
 80a3f0a:	6960      	ldr	r0, [r4, #20]
 80a3f0c:	463b      	mov	r3, r7
 80a3f0e:	4632      	mov	r2, r6
 80a3f10:	4629      	mov	r1, r5
 80a3f12:	6800      	ldr	r0, [r0, #0]
 80a3f14:	f7ff fbd0 	bl	80a36b8 <socket_send_ex>
    if (ret < 0) {
 80a3f18:	2800      	cmp	r0, #0
 80a3f1a:	da00      	bge.n	80a3f1e <_ZN9TCPClient5writeEPKhjm+0x2e>
 80a3f1c:	6060      	str	r0, [r4, #4]
}
 80a3f1e:	b002      	add	sp, #8
 80a3f20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    int ret = status() ? socket_send_ex(d_->sock, buffer, size, 0, timeout, nullptr) : -1;
 80a3f24:	f04f 30ff 	mov.w	r0, #4294967295
 80a3f28:	e7f8      	b.n	80a3f1c <_ZN9TCPClient5writeEPKhjm+0x2c>

080a3f2a <_ZN9TCPClient9connectedEv>:
{
 80a3f2a:	b570      	push	{r4, r5, r6, lr}
 80a3f2c:	4605      	mov	r5, r0
  bool rv = (status() || bufferCount());
 80a3f2e:	f7ff ffbf 	bl	80a3eb0 <_ZN9TCPClient6statusEv>
 80a3f32:	b9e8      	cbnz	r0, 80a3f70 <_ZN9TCPClient9connectedEv+0x46>
 80a3f34:	696b      	ldr	r3, [r5, #20]
 80a3f36:	f8b3 1086 	ldrh.w	r1, [r3, #134]	; 0x86
 80a3f3a:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 80a3f3e:	4291      	cmp	r1, r2
 80a3f40:	d116      	bne.n	80a3f70 <_ZN9TCPClient9connectedEv+0x46>
   return socket_handle_valid(sd);
 80a3f42:	6818      	ldr	r0, [r3, #0]
 80a3f44:	f7ff fb88 	bl	80a3658 <socket_handle_valid>
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
 80a3f48:	b908      	cbnz	r0, 80a3f4e <_ZN9TCPClient9connectedEv+0x24>
  bool rv = (status() || bufferCount());
 80a3f4a:	2000      	movs	r0, #0
}
 80a3f4c:	bd70      	pop	{r4, r5, r6, pc}
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
 80a3f4e:	696b      	ldr	r3, [r5, #20]
 80a3f50:	6818      	ldr	r0, [r3, #0]
 80a3f52:	f7ff fb79 	bl	80a3648 <socket_active_status>
 80a3f56:	2801      	cmp	r0, #1
 80a3f58:	4604      	mov	r4, r0
 80a3f5a:	d1f6      	bne.n	80a3f4a <_ZN9TCPClient9connectedEv+0x20>
      rv = available(); // Try CC3000
 80a3f5c:	682b      	ldr	r3, [r5, #0]
 80a3f5e:	4628      	mov	r0, r5
 80a3f60:	691b      	ldr	r3, [r3, #16]
 80a3f62:	4798      	blx	r3
      if (!rv) {        // No more Data and CLOSE_WAIT
 80a3f64:	b930      	cbnz	r0, 80a3f74 <_ZN9TCPClient9connectedEv+0x4a>
          stop();       // Close our side
 80a3f66:	682b      	ldr	r3, [r5, #0]
 80a3f68:	4628      	mov	r0, r5
 80a3f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a3f6c:	4798      	blx	r3
 80a3f6e:	e7ec      	b.n	80a3f4a <_ZN9TCPClient9connectedEv+0x20>
  bool rv = (status() || bufferCount());
 80a3f70:	2001      	movs	r0, #1
 80a3f72:	e7eb      	b.n	80a3f4c <_ZN9TCPClient9connectedEv+0x22>
      rv = available(); // Try CC3000
 80a3f74:	4620      	mov	r0, r4
 80a3f76:	e7e9      	b.n	80a3f4c <_ZN9TCPClient9connectedEv+0x22>

080a3f78 <_ZN9TCPClient4DataC1Em>:

TCPClient::Data::Data(sock_handle_t sock)
        : sock(sock),
          offset(0),
          total(0) {
 80a3f78:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
 80a3f7a:	b510      	push	{r4, lr}
 80a3f7c:	4604      	mov	r4, r0
          total(0) {
 80a3f7e:	6001      	str	r1, [r0, #0]
 80a3f80:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
 80a3f84:	3088      	adds	r0, #136	; 0x88
 80a3f86:	f000 fe19 	bl	80a4bbc <_ZN9IPAddressC1Ev>
}
 80a3f8a:	4620      	mov	r0, r4
 80a3f8c:	bd10      	pop	{r4, pc}
	...

080a3f90 <_ZN9TCPClientC1Em>:
TCPClient::TCPClient(sock_handle_t sock) :
 80a3f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a3f92:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a3f96:	2300      	movs	r3, #0
 80a3f98:	e9c0 3201 	strd	r3, r2, [r0, #4]
        d_(std::make_shared<Data>(sock))
 80a3f9c:	4a0d      	ldr	r2, [pc, #52]	; (80a3fd4 <_ZN9TCPClientC1Em+0x44>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
 80a3f9e:	6103      	str	r3, [r0, #16]
 80a3fa0:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
 80a3fa2:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock) :
 80a3fa4:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80a3fa6:	20ac      	movs	r0, #172	; 0xac
 80a3fa8:	460e      	mov	r6, r1
 80a3faa:	f7fc f874 	bl	80a0096 <_Znwj>
	  auto __pi = ::new (__mem)
 80a3fae:	1e05      	subs	r5, r0, #0
 80a3fb0:	f105 070c 	add.w	r7, r5, #12
 80a3fb4:	d008      	beq.n	80a3fc8 <_ZN9TCPClientC1Em+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
 80a3fb6:	2301      	movs	r3, #1
 80a3fb8:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
 80a3fbc:	4b06      	ldr	r3, [pc, #24]	; (80a3fd8 <_ZN9TCPClientC1Em+0x48>)
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80a3fbe:	4631      	mov	r1, r6
 80a3fc0:	4638      	mov	r0, r7
 80a3fc2:	602b      	str	r3, [r5, #0]
 80a3fc4:	f7ff ffd8 	bl	80a3f78 <_ZN9TCPClient4DataC1Em>
  flush_buffer();
 80a3fc8:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
 80a3fca:	e9c4 7505 	strd	r7, r5, [r4, #20]
 80a3fce:	f7ff fea2 	bl	80a3d16 <_ZN9TCPClient12flush_bufferEv>
}
 80a3fd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a3fd4:	080a86e8 	.word	0x080a86e8
 80a3fd8:	080a86c4 	.word	0x080a86c4

080a3fdc <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
 80a3fdc:	b510      	push	{r4, lr}
 80a3fde:	4604      	mov	r4, r0
 80a3fe0:	f7ff fb62 	bl	80a36a8 <socket_handle_invalid>
 80a3fe4:	4601      	mov	r1, r0
 80a3fe6:	4620      	mov	r0, r4
 80a3fe8:	f7ff ffd2 	bl	80a3f90 <_ZN9TCPClientC1Em>
}
 80a3fec:	4620      	mov	r0, r4
 80a3fee:	bd10      	pop	{r4, pc}

080a3ff0 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
 80a3ff0:	b510      	push	{r4, lr}
 80a3ff2:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
 80a3ff4:	6800      	ldr	r0, [r0, #0]
 80a3ff6:	f7ff fb2f 	bl	80a3658 <socket_handle_valid>
 80a3ffa:	b110      	cbz	r0, 80a4002 <_ZN9TCPClient4DataD1Ev+0x12>
        socket_close(sock);
 80a3ffc:	6820      	ldr	r0, [r4, #0]
 80a3ffe:	f7ff fb4b 	bl	80a3698 <socket_close>
    }
}
 80a4002:	4620      	mov	r0, r4
 80a4004:	bd10      	pop	{r4, pc}

080a4006 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(noexcept( __p->~_Up()))
	{ __p->~_Up(); }
 80a4006:	300c      	adds	r0, #12
 80a4008:	f7ff bff2 	b.w	80a3ff0 <_ZN9TCPClient4DataD1Ev>

080a400c <_ZN9TCPClient7connectEPKctm>:
{
 80a400c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a4010:	461f      	mov	r7, r3
    stop();
 80a4012:	6803      	ldr	r3, [r0, #0]
{
 80a4014:	b08f      	sub	sp, #60	; 0x3c
    stop();
 80a4016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
{
 80a4018:	4606      	mov	r6, r0
 80a401a:	460d      	mov	r5, r1
 80a401c:	4690      	mov	r8, r2
    stop();
 80a401e:	4798      	blx	r3
    if (Network.ready())
 80a4020:	4813      	ldr	r0, [pc, #76]	; (80a4070 <_ZN9TCPClient7connectEPKctm+0x64>)
 80a4022:	f001 f8ca 	bl	80a51ba <_ZN5spark12NetworkClass5readyEv>
 80a4026:	b1f0      	cbz	r0, 80a4066 <_ZN9TCPClient7connectEPKctm+0x5a>
        IPAddress ip_addr;
 80a4028:	a802      	add	r0, sp, #8
 80a402a:	f000 fdc7 	bl	80a4bbc <_ZN9IPAddressC1Ev>
        if (inet_gethostbyname(host, strlen(host), ip_addr, nif, NULL) == 0) {
 80a402e:	4628      	mov	r0, r5
 80a4030:	f003 fb52 	bl	80a76d8 <strlen>
 80a4034:	2400      	movs	r4, #0
 80a4036:	b281      	uxth	r1, r0
 80a4038:	463b      	mov	r3, r7
 80a403a:	4628      	mov	r0, r5
 80a403c:	9400      	str	r4, [sp, #0]
 80a403e:	aa03      	add	r2, sp, #12
 80a4040:	f7ff fba2 	bl	80a3788 <inet_gethostbyname>
 80a4044:	b990      	cbnz	r0, 80a406c <_ZN9TCPClient7connectEPKctm+0x60>
            return connect(ip_addr, port, nif);
 80a4046:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
 80a4048:	ad09      	add	r5, sp, #36	; 0x24
 80a404a:	f8d3 9020 	ldr.w	r9, [r3, #32]
 80a404e:	4b09      	ldr	r3, [pc, #36]	; (80a4074 <_ZN9TCPClient7connectEPKctm+0x68>)
 80a4050:	ac03      	add	r4, sp, #12
 80a4052:	9308      	str	r3, [sp, #32]
 80a4054:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a4056:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a4058:	6823      	ldr	r3, [r4, #0]
 80a405a:	4642      	mov	r2, r8
 80a405c:	702b      	strb	r3, [r5, #0]
 80a405e:	4630      	mov	r0, r6
 80a4060:	463b      	mov	r3, r7
 80a4062:	a908      	add	r1, sp, #32
 80a4064:	47c8      	blx	r9
}
 80a4066:	b00f      	add	sp, #60	; 0x3c
 80a4068:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return 0; // error, could not connect
 80a406c:	4620      	mov	r0, r4
 80a406e:	e7fa      	b.n	80a4066 <_ZN9TCPClient7connectEPKctm+0x5a>
 80a4070:	200005f8 	.word	0x200005f8
 80a4074:	080a876c 	.word	0x080a876c

080a4078 <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
 80a4078:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a407c:	4607      	mov	r7, r0
 80a407e:	460d      	mov	r5, r1
 80a4080:	4616      	mov	r6, r2
 80a4082:	461c      	mov	r4, r3
    bool negative = val<0;
    if (negative) {
 80a4084:	2200      	movs	r2, #0
 80a4086:	2300      	movs	r3, #0
 80a4088:	4638      	mov	r0, r7
 80a408a:	4629      	mov	r1, r5
 80a408c:	f001 ff20 	bl	80a5ed0 <__aeabi_dcmplt>
 80a4090:	b120      	cbz	r0, 80a409c <_Z4dtoadhPc+0x24>
        val = -val;
        *sout++ = '-';
 80a4092:	232d      	movs	r3, #45	; 0x2d
        val = -val;
 80a4094:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
        *sout++ = '-';
 80a4098:	f804 3b01 	strb.w	r3, [r4], #1
 80a409c:	2300      	movs	r3, #0
    }
    long scale = 1;
 80a409e:	f04f 0a01 	mov.w	sl, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
 80a40a2:	220a      	movs	r2, #10
    for (uint8_t i=0; i<prec; i++)
 80a40a4:	b2d9      	uxtb	r1, r3
 80a40a6:	428e      	cmp	r6, r1
 80a40a8:	d903      	bls.n	80a40b2 <_Z4dtoadhPc+0x3a>
        scale *= 10;
 80a40aa:	fb02 fa0a 	mul.w	sl, r2, sl
    for (uint8_t i=0; i<prec; i++)
 80a40ae:	3301      	adds	r3, #1
 80a40b0:	e7f8      	b.n	80a40a4 <_Z4dtoadhPc+0x2c>
    val *= scale;   // capture all the significant digits
 80a40b2:	4650      	mov	r0, sl
 80a40b4:	f001 fc30 	bl	80a5918 <__aeabi_i2d>
 80a40b8:	463a      	mov	r2, r7
 80a40ba:	462b      	mov	r3, r5
 80a40bc:	f001 fc96 	bl	80a59ec <__aeabi_dmul>
 80a40c0:	4680      	mov	r8, r0
 80a40c2:	4689      	mov	r9, r1
    uint64_t fixed = uint64_t(val);
 80a40c4:	f002 faaa 	bl	80a661c <__aeabi_d2ulz>
 80a40c8:	4605      	mov	r5, r0
 80a40ca:	460f      	mov	r7, r1
    if ((val-fixed)>=0.5)    // round last digit
 80a40cc:	f001 fc58 	bl	80a5980 <__aeabi_ul2d>
 80a40d0:	4602      	mov	r2, r0
 80a40d2:	460b      	mov	r3, r1
 80a40d4:	4640      	mov	r0, r8
 80a40d6:	4649      	mov	r1, r9
 80a40d8:	f001 fad0 	bl	80a567c <__aeabi_dsub>
 80a40dc:	2200      	movs	r2, #0
 80a40de:	4b12      	ldr	r3, [pc, #72]	; (80a4128 <_Z4dtoadhPc+0xb0>)
 80a40e0:	f001 ff0a 	bl	80a5ef8 <__aeabi_dcmpge>
 80a40e4:	b110      	cbz	r0, 80a40ec <_Z4dtoadhPc+0x74>
        fixed++;
 80a40e6:	3501      	adds	r5, #1
 80a40e8:	f147 0700 	adc.w	r7, r7, #0

    unsigned long first = (unsigned long)(fixed / scale);
 80a40ec:	4652      	mov	r2, sl
 80a40ee:	4628      	mov	r0, r5
 80a40f0:	4639      	mov	r1, r7
 80a40f2:	17d3      	asrs	r3, r2, #31
 80a40f4:	f002 fa46 	bl	80a6584 <__aeabi_uldivmod>
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
 80a40f8:	2301      	movs	r3, #1
 80a40fa:	4615      	mov	r5, r2
 80a40fc:	4621      	mov	r1, r4
 80a40fe:	220a      	movs	r2, #10
 80a4100:	f7ff fcf7 	bl	80a3af2 <ultoa>
    if (prec) {
 80a4104:	b16e      	cbz	r6, 80a4122 <_Z4dtoadhPc+0xaa>
        sout += strlen(sout);
 80a4106:	4620      	mov	r0, r4
 80a4108:	f003 fae6 	bl	80a76d8 <strlen>
        *sout++ = '.';
 80a410c:	232e      	movs	r3, #46	; 0x2e
        sout += strlen(sout);
 80a410e:	1821      	adds	r1, r4, r0
        *sout++ = '.';
 80a4110:	5423      	strb	r3, [r4, r0]
        ultoa(second, sout, 10, prec);
 80a4112:	220a      	movs	r2, #10
 80a4114:	4633      	mov	r3, r6
 80a4116:	4628      	mov	r0, r5
    }
}
 80a4118:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        ultoa(second, sout, 10, prec);
 80a411c:	3101      	adds	r1, #1
 80a411e:	f7ff bce8 	b.w	80a3af2 <ultoa>
}
 80a4122:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a4126:	bf00      	nop
 80a4128:	3fe00000 	.word	0x3fe00000

080a412c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a412c:	b510      	push	{r4, lr}
 80a412e:	4604      	mov	r4, r0
{
	free(buffer);
 80a4130:	6800      	ldr	r0, [r0, #0]
 80a4132:	f7ff fc17 	bl	80a3964 <free>
}
 80a4136:	4620      	mov	r0, r4
 80a4138:	bd10      	pop	{r4, pc}

080a413a <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a413a:	b510      	push	{r4, lr}
 80a413c:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a413e:	6800      	ldr	r0, [r0, #0]
 80a4140:	b108      	cbz	r0, 80a4146 <_ZN6String10invalidateEv+0xc>
 80a4142:	f7ff fc0f 	bl	80a3964 <free>
	buffer = NULL;
 80a4146:	2300      	movs	r3, #0
	capacity = len = 0;
 80a4148:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
 80a414c:	6023      	str	r3, [r4, #0]
}
 80a414e:	bd10      	pop	{r4, pc}

080a4150 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a4150:	b538      	push	{r3, r4, r5, lr}
 80a4152:	4604      	mov	r4, r0
 80a4154:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a4156:	6800      	ldr	r0, [r0, #0]
 80a4158:	3101      	adds	r1, #1
 80a415a:	f7ff fc0b 	bl	80a3974 <realloc>
	if (newbuffer) {
 80a415e:	b110      	cbz	r0, 80a4166 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a4160:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
 80a4164:	2001      	movs	r0, #1
	}
	return 0;
}
 80a4166:	bd38      	pop	{r3, r4, r5, pc}

080a4168 <_ZN6String7reserveEj>:
{
 80a4168:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a416a:	6803      	ldr	r3, [r0, #0]
{
 80a416c:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a416e:	b123      	cbz	r3, 80a417a <_ZN6String7reserveEj+0x12>
 80a4170:	6843      	ldr	r3, [r0, #4]
 80a4172:	428b      	cmp	r3, r1
 80a4174:	d301      	bcc.n	80a417a <_ZN6String7reserveEj+0x12>
 80a4176:	2001      	movs	r0, #1
}
 80a4178:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
 80a417a:	4620      	mov	r0, r4
 80a417c:	f7ff ffe8 	bl	80a4150 <_ZN6String12changeBufferEj>
 80a4180:	2800      	cmp	r0, #0
 80a4182:	d0f9      	beq.n	80a4178 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
 80a4184:	68a3      	ldr	r3, [r4, #8]
 80a4186:	2b00      	cmp	r3, #0
 80a4188:	d1f5      	bne.n	80a4176 <_ZN6String7reserveEj+0xe>
 80a418a:	6822      	ldr	r2, [r4, #0]
 80a418c:	7013      	strb	r3, [r2, #0]
 80a418e:	e7f2      	b.n	80a4176 <_ZN6String7reserveEj+0xe>

080a4190 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a4190:	b570      	push	{r4, r5, r6, lr}
 80a4192:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a4194:	4611      	mov	r1, r2
{
 80a4196:	4604      	mov	r4, r0
 80a4198:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a419a:	f7ff ffe5 	bl	80a4168 <_ZN6String7reserveEj>
 80a419e:	b920      	cbnz	r0, 80a41aa <_ZN6String4copyEPKcj+0x1a>
		invalidate();
 80a41a0:	4620      	mov	r0, r4
 80a41a2:	f7ff ffca 	bl	80a413a <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
 80a41a6:	4620      	mov	r0, r4
 80a41a8:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(buffer, cstr, length);
 80a41aa:	462a      	mov	r2, r5
 80a41ac:	4631      	mov	r1, r6
 80a41ae:	6820      	ldr	r0, [r4, #0]
	len = length;
 80a41b0:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a41b2:	f002 fce3 	bl	80a6b7c <memcpy>
	buffer[len] = 0;
 80a41b6:	2100      	movs	r1, #0
 80a41b8:	6822      	ldr	r2, [r4, #0]
 80a41ba:	68a3      	ldr	r3, [r4, #8]
 80a41bc:	54d1      	strb	r1, [r2, r3]
	return *this;
 80a41be:	e7f2      	b.n	80a41a6 <_ZN6String4copyEPKcj+0x16>

080a41c0 <_ZN6StringC1EPKc>:
String::String(const char *cstr)
 80a41c0:	b538      	push	{r3, r4, r5, lr}
	buffer = NULL;
 80a41c2:	2300      	movs	r3, #0
String::String(const char *cstr)
 80a41c4:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a41c6:	460d      	mov	r5, r1
	capacity = 0;
 80a41c8:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 80a41cc:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a41ce:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
 80a41d0:	b139      	cbz	r1, 80a41e2 <_ZN6StringC1EPKc+0x22>
 80a41d2:	4608      	mov	r0, r1
 80a41d4:	f003 fa80 	bl	80a76d8 <strlen>
 80a41d8:	4629      	mov	r1, r5
 80a41da:	4602      	mov	r2, r0
 80a41dc:	4620      	mov	r0, r4
 80a41de:	f7ff ffd7 	bl	80a4190 <_ZN6String4copyEPKcj>
}
 80a41e2:	4620      	mov	r0, r4
 80a41e4:	bd38      	pop	{r3, r4, r5, pc}

080a41e6 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 80a41e6:	b538      	push	{r3, r4, r5, lr}
 80a41e8:	4605      	mov	r5, r0
	if (buffer) {
 80a41ea:	6800      	ldr	r0, [r0, #0]
{
 80a41ec:	460c      	mov	r4, r1
	if (buffer) {
 80a41ee:	b168      	cbz	r0, 80a420c <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
 80a41f0:	686a      	ldr	r2, [r5, #4]
 80a41f2:	688b      	ldr	r3, [r1, #8]
 80a41f4:	429a      	cmp	r2, r3
 80a41f6:	d307      	bcc.n	80a4208 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
 80a41f8:	6809      	ldr	r1, [r1, #0]
 80a41fa:	f002 fd03 	bl	80a6c04 <strcpy>
			len = rhs.len;
 80a41fe:	68a3      	ldr	r3, [r4, #8]
 80a4200:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
 80a4202:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
 80a4204:	60a3      	str	r3, [r4, #8]
}
 80a4206:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
 80a4208:	f7ff fbac 	bl	80a3964 <free>
	buffer = rhs.buffer;
 80a420c:	6823      	ldr	r3, [r4, #0]
 80a420e:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
 80a4210:	6863      	ldr	r3, [r4, #4]
 80a4212:	606b      	str	r3, [r5, #4]
	len = rhs.len;
 80a4214:	68a3      	ldr	r3, [r4, #8]
 80a4216:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
 80a4218:	2300      	movs	r3, #0
	rhs.capacity = 0;
 80a421a:	e9c4 3300 	strd	r3, r3, [r4]
 80a421e:	e7f1      	b.n	80a4204 <_ZN6String4moveERS_+0x1e>

080a4220 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 80a4220:	4288      	cmp	r0, r1
{
 80a4222:	b510      	push	{r4, lr}
 80a4224:	460b      	mov	r3, r1
 80a4226:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 80a4228:	d004      	beq.n	80a4234 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 80a422a:	6809      	ldr	r1, [r1, #0]
 80a422c:	b121      	cbz	r1, 80a4238 <_ZN6StringaSERKS_+0x18>
 80a422e:	689a      	ldr	r2, [r3, #8]
 80a4230:	f7ff ffae 	bl	80a4190 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 80a4234:	4620      	mov	r0, r4
 80a4236:	bd10      	pop	{r4, pc}
	else invalidate();
 80a4238:	f7ff ff7f 	bl	80a413a <_ZN6String10invalidateEv>
 80a423c:	e7fa      	b.n	80a4234 <_ZN6StringaSERKS_+0x14>

080a423e <_ZN6StringC1ERKS_>:
	buffer = NULL;
 80a423e:	2300      	movs	r3, #0
String::String(const String &value)
 80a4240:	b510      	push	{r4, lr}
 80a4242:	4604      	mov	r4, r0
	capacity = 0;
 80a4244:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 80a4248:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a424a:	7303      	strb	r3, [r0, #12]
	*this = value;
 80a424c:	f7ff ffe8 	bl	80a4220 <_ZN6StringaSERKS_>
}
 80a4250:	4620      	mov	r0, r4
 80a4252:	bd10      	pop	{r4, pc}

080a4254 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
 80a4254:	4288      	cmp	r0, r1
{
 80a4256:	b510      	push	{r4, lr}
 80a4258:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
 80a425a:	d001      	beq.n	80a4260 <_ZN6StringaSEOS_+0xc>
 80a425c:	f7ff ffc3 	bl	80a41e6 <_ZN6String4moveERS_>
	return *this;
}
 80a4260:	4620      	mov	r0, r4
 80a4262:	bd10      	pop	{r4, pc}

080a4264 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 80a4264:	b538      	push	{r3, r4, r5, lr}
 80a4266:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a4268:	460c      	mov	r4, r1
 80a426a:	b149      	cbz	r1, 80a4280 <_ZN6StringaSEPKc+0x1c>
 80a426c:	4608      	mov	r0, r1
 80a426e:	f003 fa33 	bl	80a76d8 <strlen>
 80a4272:	4621      	mov	r1, r4
 80a4274:	4602      	mov	r2, r0
 80a4276:	4628      	mov	r0, r5
 80a4278:	f7ff ff8a 	bl	80a4190 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 80a427c:	4628      	mov	r0, r5
 80a427e:	bd38      	pop	{r3, r4, r5, pc}
	else invalidate();
 80a4280:	f7ff ff5b 	bl	80a413a <_ZN6String10invalidateEv>
 80a4284:	e7fa      	b.n	80a427c <_ZN6StringaSEPKc+0x18>

080a4286 <_ZN6StringC1Ehh>:
String::String(unsigned char value, unsigned char base)
 80a4286:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80a4288:	4604      	mov	r4, r0
	buffer = NULL;
 80a428a:	2300      	movs	r3, #0
String::String(unsigned char value, unsigned char base)
 80a428c:	4608      	mov	r0, r1
	capacity = 0;
 80a428e:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
 80a4292:	60a3      	str	r3, [r4, #8]
	flags = 0;
 80a4294:	7323      	strb	r3, [r4, #12]
	utoa(value, buf, base);
 80a4296:	a901      	add	r1, sp, #4
 80a4298:	f7ff fc6a 	bl	80a3b70 <utoa>
	*this = buf;
 80a429c:	4620      	mov	r0, r4
 80a429e:	a901      	add	r1, sp, #4
 80a42a0:	f7ff ffe0 	bl	80a4264 <_ZN6StringaSEPKc>
}
 80a42a4:	4620      	mov	r0, r4
 80a42a6:	b004      	add	sp, #16
 80a42a8:	bd10      	pop	{r4, pc}

080a42aa <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
 80a42aa:	b510      	push	{r4, lr}
	buffer = NULL;
 80a42ac:	2300      	movs	r3, #0
String::String(int value, unsigned char base)
 80a42ae:	4604      	mov	r4, r0
 80a42b0:	b08a      	sub	sp, #40	; 0x28
	capacity = 0;
 80a42b2:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
 80a42b6:	60a3      	str	r3, [r4, #8]
	flags = 0;
 80a42b8:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
 80a42ba:	4608      	mov	r0, r1
	itoa(value, buf, base);
 80a42bc:	a901      	add	r1, sp, #4
 80a42be:	f7ff fc42 	bl	80a3b46 <itoa>
	*this = buf;
 80a42c2:	4620      	mov	r0, r4
 80a42c4:	a901      	add	r1, sp, #4
 80a42c6:	f7ff ffcd 	bl	80a4264 <_ZN6StringaSEPKc>
}
 80a42ca:	4620      	mov	r0, r4
 80a42cc:	b00a      	add	sp, #40	; 0x28
 80a42ce:	bd10      	pop	{r4, pc}

080a42d0 <_ZN6StringC1Ejh>:
String::String(unsigned int value, unsigned char base)
 80a42d0:	b510      	push	{r4, lr}
	buffer = NULL;
 80a42d2:	2300      	movs	r3, #0
String::String(unsigned int value, unsigned char base)
 80a42d4:	4604      	mov	r4, r0
 80a42d6:	b08a      	sub	sp, #40	; 0x28
	capacity = 0;
 80a42d8:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
 80a42dc:	60a3      	str	r3, [r4, #8]
	flags = 0;
 80a42de:	7323      	strb	r3, [r4, #12]
String::String(unsigned int value, unsigned char base)
 80a42e0:	4608      	mov	r0, r1
	utoa(value, buf, base);
 80a42e2:	a901      	add	r1, sp, #4
 80a42e4:	f7ff fc44 	bl	80a3b70 <utoa>
	*this = buf;
 80a42e8:	4620      	mov	r0, r4
 80a42ea:	a901      	add	r1, sp, #4
 80a42ec:	f7ff ffba 	bl	80a4264 <_ZN6StringaSEPKc>
}
 80a42f0:	4620      	mov	r0, r4
 80a42f2:	b00a      	add	sp, #40	; 0x28
 80a42f4:	bd10      	pop	{r4, pc}

080a42f6 <_ZN6StringC1Efi>:
	buffer = NULL;
 80a42f6:	2300      	movs	r3, #0
String::String(float value, int decimalPlaces)
 80a42f8:	b530      	push	{r4, r5, lr}
 80a42fa:	4604      	mov	r4, r0
 80a42fc:	b08b      	sub	sp, #44	; 0x2c
	capacity = 0;
 80a42fe:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 80a4302:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a4304:	7303      	strb	r3, [r0, #12]
	dtoa(value, decimalPlaces, buf);
 80a4306:	b2d5      	uxtb	r5, r2
 80a4308:	4608      	mov	r0, r1
 80a430a:	f001 fb17 	bl	80a593c <__aeabi_f2d>
 80a430e:	462a      	mov	r2, r5
 80a4310:	ab01      	add	r3, sp, #4
 80a4312:	f7ff feb1 	bl	80a4078 <_Z4dtoadhPc>
        *this = buf;
 80a4316:	4620      	mov	r0, r4
 80a4318:	a901      	add	r1, sp, #4
 80a431a:	f7ff ffa3 	bl	80a4264 <_ZN6StringaSEPKc>
}
 80a431e:	4620      	mov	r0, r4
 80a4320:	b00b      	add	sp, #44	; 0x2c
 80a4322:	bd30      	pop	{r4, r5, pc}

080a4324 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
 80a4324:	b570      	push	{r4, r5, r6, lr}
 80a4326:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
 80a4328:	460e      	mov	r6, r1
 80a432a:	b909      	cbnz	r1, 80a4330 <_ZN6String6concatEPKcj+0xc>
 80a432c:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
 80a432e:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
 80a4330:	b16a      	cbz	r2, 80a434e <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
 80a4332:	6884      	ldr	r4, [r0, #8]
 80a4334:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
 80a4336:	4621      	mov	r1, r4
 80a4338:	f7ff ff16 	bl	80a4168 <_ZN6String7reserveEj>
 80a433c:	2800      	cmp	r0, #0
 80a433e:	d0f5      	beq.n	80a432c <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
 80a4340:	6828      	ldr	r0, [r5, #0]
 80a4342:	68ab      	ldr	r3, [r5, #8]
 80a4344:	4631      	mov	r1, r6
 80a4346:	4418      	add	r0, r3
 80a4348:	f002 fc5c 	bl	80a6c04 <strcpy>
	len = newlen;
 80a434c:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
 80a434e:	2001      	movs	r0, #1
 80a4350:	e7ed      	b.n	80a432e <_ZN6String6concatEPKcj+0xa>

080a4352 <_ZN6String6concatERKS_>:
	return concat(s.buffer, s.len);
 80a4352:	688a      	ldr	r2, [r1, #8]
 80a4354:	6809      	ldr	r1, [r1, #0]
 80a4356:	f7ff bfe5 	b.w	80a4324 <_ZN6String6concatEPKcj>

080a435a <_ZN6String6concatEc>:

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
 80a435a:	2300      	movs	r3, #0
{
 80a435c:	b507      	push	{r0, r1, r2, lr}
	return concat(buf, 1);
 80a435e:	2201      	movs	r2, #1
	buf[0] = c;
 80a4360:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
 80a4364:	a901      	add	r1, sp, #4
	buf[1] = 0;
 80a4366:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
 80a436a:	f7ff ffdb 	bl	80a4324 <_ZN6String6concatEPKcj>
}
 80a436e:	b003      	add	sp, #12
 80a4370:	f85d fb04 	ldr.w	pc, [sp], #4

080a4374 <_ZN6String6concatEi>:
	itoa(num, buf, 10);
	return concat(buf, strlen(buf));
}

unsigned char String::concat(int num)
{
 80a4374:	b513      	push	{r0, r1, r4, lr}
	char buf[7];
	itoa(num, buf, 10);
 80a4376:	220a      	movs	r2, #10
{
 80a4378:	4604      	mov	r4, r0
 80a437a:	4608      	mov	r0, r1
	itoa(num, buf, 10);
 80a437c:	4669      	mov	r1, sp
 80a437e:	f7ff fbe2 	bl	80a3b46 <itoa>
	return concat(buf, strlen(buf));
 80a4382:	4668      	mov	r0, sp
 80a4384:	f003 f9a8 	bl	80a76d8 <strlen>
 80a4388:	4669      	mov	r1, sp
 80a438a:	4602      	mov	r2, r0
 80a438c:	4620      	mov	r0, r4
 80a438e:	f7ff ffc9 	bl	80a4324 <_ZN6String6concatEPKcj>
}
 80a4392:	b002      	add	sp, #8
 80a4394:	bd10      	pop	{r4, pc}

080a4396 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 80a4396:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 80a4398:	688a      	ldr	r2, [r1, #8]
 80a439a:	6809      	ldr	r1, [r1, #0]
{
 80a439c:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 80a439e:	f7ff ffc1 	bl	80a4324 <_ZN6String6concatEPKcj>
 80a43a2:	b910      	cbnz	r0, 80a43aa <_ZplRK15StringSumHelperRK6String+0x14>
 80a43a4:	4620      	mov	r0, r4
 80a43a6:	f7ff fec8 	bl	80a413a <_ZN6String10invalidateEv>
	return a;
}
 80a43aa:	4620      	mov	r0, r4
 80a43ac:	bd10      	pop	{r4, pc}

080a43ae <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
 80a43ae:	b538      	push	{r3, r4, r5, lr}
 80a43b0:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
 80a43b2:	460d      	mov	r5, r1
 80a43b4:	b921      	cbnz	r1, 80a43c0 <_ZplRK15StringSumHelperPKc+0x12>
 80a43b6:	4620      	mov	r0, r4
 80a43b8:	f7ff febf 	bl	80a413a <_ZN6String10invalidateEv>
	return a;
}
 80a43bc:	4620      	mov	r0, r4
 80a43be:	bd38      	pop	{r3, r4, r5, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
 80a43c0:	4608      	mov	r0, r1
 80a43c2:	f003 f989 	bl	80a76d8 <strlen>
 80a43c6:	4629      	mov	r1, r5
 80a43c8:	4602      	mov	r2, r0
 80a43ca:	4620      	mov	r0, r4
 80a43cc:	f7ff ffaa 	bl	80a4324 <_ZN6String6concatEPKcj>
 80a43d0:	2800      	cmp	r0, #0
 80a43d2:	d0f0      	beq.n	80a43b6 <_ZplRK15StringSumHelperPKc+0x8>
 80a43d4:	e7f2      	b.n	80a43bc <_ZplRK15StringSumHelperPKc+0xe>

080a43d6 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 80a43d6:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
 80a43d8:	6882      	ldr	r2, [r0, #8]
 80a43da:	b93a      	cbnz	r2, 80a43ec <_ZNK6String6equalsEPKc+0x16>
 80a43dc:	b121      	cbz	r1, 80a43e8 <_ZNK6String6equalsEPKc+0x12>
 80a43de:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
 80a43e0:	fab0 f080 	clz	r0, r0
 80a43e4:	0940      	lsrs	r0, r0, #5
 80a43e6:	e000      	b.n	80a43ea <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
 80a43e8:	2001      	movs	r0, #1
}
 80a43ea:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
 80a43ec:	6800      	ldr	r0, [r0, #0]
 80a43ee:	b909      	cbnz	r1, 80a43f4 <_ZNK6String6equalsEPKc+0x1e>
 80a43f0:	7800      	ldrb	r0, [r0, #0]
 80a43f2:	e7f5      	b.n	80a43e0 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
 80a43f4:	f002 fbfc 	bl	80a6bf0 <strcmp>
 80a43f8:	e7f2      	b.n	80a43e0 <_ZNK6String6equalsEPKc+0xa>
	...

080a43fc <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
 80a43fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a43fe:	461d      	mov	r5, r3
	if (left > right) {
 80a4400:	429a      	cmp	r2, r3
 80a4402:	bf88      	it	hi
 80a4404:	4613      	movhi	r3, r2
{
 80a4406:	460f      	mov	r7, r1
 80a4408:	4614      	mov	r4, r2
	if (left > right) {
 80a440a:	bf88      	it	hi
 80a440c:	462c      	movhi	r4, r5
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
 80a440e:	490b      	ldr	r1, [pc, #44]	; (80a443c <_ZNK6String9substringEjj+0x40>)
	if (left > right) {
 80a4410:	bf88      	it	hi
 80a4412:	461d      	movhi	r5, r3
{
 80a4414:	4606      	mov	r6, r0
	String out;
 80a4416:	f7ff fed3 	bl	80a41c0 <_ZN6StringC1EPKc>
	if (left > len) return out;
 80a441a:	68ba      	ldr	r2, [r7, #8]
 80a441c:	42a2      	cmp	r2, r4
 80a441e:	d30a      	bcc.n	80a4436 <_ZNK6String9substringEjj+0x3a>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
 80a4420:	6839      	ldr	r1, [r7, #0]
 80a4422:	42aa      	cmp	r2, r5
 80a4424:	bf94      	ite	ls
 80a4426:	ebc4 0202 	rsbls	r2, r4, r2
 80a442a:	ebc4 0205 	rsbhi	r2, r4, r5
 80a442e:	4630      	mov	r0, r6
 80a4430:	4421      	add	r1, r4
 80a4432:	f7ff fead 	bl	80a4190 <_ZN6String4copyEPKcj>
	return out;
}
 80a4436:	4630      	mov	r0, r6
 80a4438:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a443a:	bf00      	nop
 80a443c:	080a89a0 	.word	0x080a89a0

080a4440 <_ZNK6String9substringEj>:
{
 80a4440:	b510      	push	{r4, lr}
 80a4442:	4604      	mov	r4, r0
	return substring(left, len);
 80a4444:	688b      	ldr	r3, [r1, #8]
 80a4446:	f7ff ffd9 	bl	80a43fc <_ZNK6String9substringEjj>
}
 80a444a:	4620      	mov	r0, r4
 80a444c:	bd10      	pop	{r4, pc}

080a444e <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
 80a444e:	6800      	ldr	r0, [r0, #0]
 80a4450:	b108      	cbz	r0, 80a4456 <_ZNK6String5toIntEv+0x8>
 80a4452:	f002 ba8b 	b.w	80a696c <atol>
	return 0;
}
 80a4456:	4770      	bx	lr

080a4458 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a4458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a445a:	4606      	mov	r6, r0
 80a445c:	460d      	mov	r5, r1
  size_t n = 0;
 80a445e:	2400      	movs	r4, #0
 80a4460:	188f      	adds	r7, r1, r2
  while (size--) {
 80a4462:	42bd      	cmp	r5, r7
 80a4464:	d00c      	beq.n	80a4480 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a4466:	6833      	ldr	r3, [r6, #0]
 80a4468:	4630      	mov	r0, r6
 80a446a:	689b      	ldr	r3, [r3, #8]
 80a446c:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a4470:	4798      	blx	r3
     if (chunk>=0)
 80a4472:	1e03      	subs	r3, r0, #0
 80a4474:	db01      	blt.n	80a447a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a4476:	441c      	add	r4, r3
  while (size--) {
 80a4478:	e7f3      	b.n	80a4462 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a447a:	2c00      	cmp	r4, #0
 80a447c:	bf08      	it	eq
 80a447e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 80a4480:	4620      	mov	r0, r4
 80a4482:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a4484 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a4484:	b570      	push	{r4, r5, r6, lr}
 80a4486:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a4488:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a448a:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 80a448c:	b149      	cbz	r1, 80a44a2 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a448e:	f003 f923 	bl	80a76d8 <strlen>
 80a4492:	682b      	ldr	r3, [r5, #0]
 80a4494:	4602      	mov	r2, r0
 80a4496:	4621      	mov	r1, r4
 80a4498:	4628      	mov	r0, r5
    }
 80a449a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 80a449e:	68db      	ldr	r3, [r3, #12]
 80a44a0:	4718      	bx	r3
    }
 80a44a2:	bd70      	pop	{r4, r5, r6, pc}

080a44a4 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
 80a44a4:	b508      	push	{r3, lr}
  return write(str);
 80a44a6:	f7ff ffed 	bl	80a4484 <_ZN5Print5writeEPKc>
}
 80a44aa:	bd08      	pop	{r3, pc}

080a44ac <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
 80a44ac:	6803      	ldr	r3, [r0, #0]
 80a44ae:	689b      	ldr	r3, [r3, #8]
 80a44b0:	4718      	bx	r3

080a44b2 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a44b2:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a44b4:	210d      	movs	r1, #13
{
 80a44b6:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a44b8:	f7ff fff8 	bl	80a44ac <_ZN5Print5printEc>
  n += print('\n');
 80a44bc:	210a      	movs	r1, #10
  size_t n = print('\r');
 80a44be:	4604      	mov	r4, r0
  n += print('\n');
 80a44c0:	4628      	mov	r0, r5
 80a44c2:	f7ff fff3 	bl	80a44ac <_ZN5Print5printEc>
  return n;
}
 80a44c6:	4420      	add	r0, r4
 80a44c8:	bd38      	pop	{r3, r4, r5, pc}

080a44ca <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a44ca:	b538      	push	{r3, r4, r5, lr}
 80a44cc:	4605      	mov	r5, r0
  return write(str);
 80a44ce:	f7ff ffd9 	bl	80a4484 <_ZN5Print5writeEPKc>
 80a44d2:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
 80a44d4:	4628      	mov	r0, r5
 80a44d6:	f7ff ffec 	bl	80a44b2 <_ZN5Print7printlnEv>
  return n;
}
 80a44da:	4420      	add	r0, r4
 80a44dc:	bd38      	pop	{r3, r4, r5, pc}

080a44de <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a44de:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a44e0:	2a01      	cmp	r2, #1
 80a44e2:	bf98      	it	ls
 80a44e4:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a44e6:	b530      	push	{r4, r5, lr}
 80a44e8:	b08b      	sub	sp, #44	; 0x2c
 80a44ea:	460c      	mov	r4, r1
  *str = '\0';
 80a44ec:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 80a44f0:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 80a44f2:	4625      	mov	r5, r4
 80a44f4:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 80a44f8:	fb04 5312 	mls	r3, r4, r2, r5
 80a44fc:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a44fe:	2b09      	cmp	r3, #9
 80a4500:	bf94      	ite	ls
 80a4502:	3330      	addls	r3, #48	; 0x30
 80a4504:	3337      	addhi	r3, #55	; 0x37
 80a4506:	b2db      	uxtb	r3, r3
  } while(n);
 80a4508:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a450a:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 80a450e:	d9f0      	bls.n	80a44f2 <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 80a4510:	f7ff ffb8 	bl	80a4484 <_ZN5Print5writeEPKc>
}
 80a4514:	b00b      	add	sp, #44	; 0x2c
 80a4516:	bd30      	pop	{r4, r5, pc}

080a4518 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a4518:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a451c:	4605      	mov	r5, r0
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a451e:	4619      	mov	r1, r3
 80a4520:	4610      	mov	r0, r2
{
 80a4522:	4692      	mov	sl, r2
 80a4524:	461f      	mov	r7, r3
 80a4526:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
  if (isnan(number)) return print("nan");
 80a452a:	f001 fcf9 	bl	80a5f20 <__aeabi_dcmpun>
 80a452e:	b140      	cbz	r0, 80a4542 <_ZN5Print10printFloatEdh+0x2a>
  return write(str);
 80a4530:	4950      	ldr	r1, [pc, #320]	; (80a4674 <_ZN5Print10printFloatEdh+0x15c>)
 80a4532:	4628      	mov	r0, r5
 80a4534:	f7ff ffa6 	bl	80a4484 <_ZN5Print5writeEPKc>
 80a4538:	4604      	mov	r4, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
 80a453a:	4620      	mov	r0, r4
 80a453c:	b003      	add	sp, #12
 80a453e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
 80a4542:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
 80a4546:	f04f 32ff 	mov.w	r2, #4294967295
 80a454a:	4650      	mov	r0, sl
 80a454c:	4621      	mov	r1, r4
 80a454e:	4b4a      	ldr	r3, [pc, #296]	; (80a4678 <_ZN5Print10printFloatEdh+0x160>)
 80a4550:	f001 fce6 	bl	80a5f20 <__aeabi_dcmpun>
 80a4554:	b948      	cbnz	r0, 80a456a <_ZN5Print10printFloatEdh+0x52>
 80a4556:	f04f 32ff 	mov.w	r2, #4294967295
 80a455a:	4650      	mov	r0, sl
 80a455c:	4621      	mov	r1, r4
 80a455e:	4b46      	ldr	r3, [pc, #280]	; (80a4678 <_ZN5Print10printFloatEdh+0x160>)
 80a4560:	f001 fcc0 	bl	80a5ee4 <__aeabi_dcmple>
 80a4564:	b908      	cbnz	r0, 80a456a <_ZN5Print10printFloatEdh+0x52>
  return write(str);
 80a4566:	4945      	ldr	r1, [pc, #276]	; (80a467c <_ZN5Print10printFloatEdh+0x164>)
 80a4568:	e7e3      	b.n	80a4532 <_ZN5Print10printFloatEdh+0x1a>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
 80a456a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a456e:	4650      	mov	r0, sl
 80a4570:	4639      	mov	r1, r7
 80a4572:	4b43      	ldr	r3, [pc, #268]	; (80a4680 <_ZN5Print10printFloatEdh+0x168>)
 80a4574:	f001 fcca 	bl	80a5f0c <__aeabi_dcmpgt>
 80a4578:	b108      	cbz	r0, 80a457e <_ZN5Print10printFloatEdh+0x66>
  return write(str);
 80a457a:	4942      	ldr	r1, [pc, #264]	; (80a4684 <_ZN5Print10printFloatEdh+0x16c>)
 80a457c:	e7d9      	b.n	80a4532 <_ZN5Print10printFloatEdh+0x1a>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
 80a457e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a4582:	4650      	mov	r0, sl
 80a4584:	4639      	mov	r1, r7
 80a4586:	4b40      	ldr	r3, [pc, #256]	; (80a4688 <_ZN5Print10printFloatEdh+0x170>)
 80a4588:	f001 fca2 	bl	80a5ed0 <__aeabi_dcmplt>
 80a458c:	2800      	cmp	r0, #0
 80a458e:	d1f4      	bne.n	80a457a <_ZN5Print10printFloatEdh+0x62>
  if (number < 0.0)
 80a4590:	2200      	movs	r2, #0
 80a4592:	2300      	movs	r3, #0
 80a4594:	4650      	mov	r0, sl
 80a4596:	4639      	mov	r1, r7
 80a4598:	f001 fc9a 	bl	80a5ed0 <__aeabi_dcmplt>
 80a459c:	4604      	mov	r4, r0
 80a459e:	b130      	cbz	r0, 80a45ae <_ZN5Print10printFloatEdh+0x96>
     n += print('-');
 80a45a0:	212d      	movs	r1, #45	; 0x2d
 80a45a2:	4628      	mov	r0, r5
 80a45a4:	f7ff ff82 	bl	80a44ac <_ZN5Print5printEc>
 80a45a8:	4604      	mov	r4, r0
     number = -number;
 80a45aa:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
  size_t n = 0;
 80a45ae:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
 80a45b2:	2000      	movs	r0, #0
    rounding /= 10.0;
 80a45b4:	f04f 0800 	mov.w	r8, #0
  double rounding = 0.5;
 80a45b8:	4934      	ldr	r1, [pc, #208]	; (80a468c <_ZN5Print10printFloatEdh+0x174>)
    rounding /= 10.0;
 80a45ba:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 80a4694 <_ZN5Print10printFloatEdh+0x17c>
  for (uint8_t i=0; i<digits; ++i)
 80a45be:	fa5f f38b 	uxtb.w	r3, fp
 80a45c2:	429e      	cmp	r6, r3
 80a45c4:	d906      	bls.n	80a45d4 <_ZN5Print10printFloatEdh+0xbc>
    rounding /= 10.0;
 80a45c6:	4642      	mov	r2, r8
 80a45c8:	464b      	mov	r3, r9
 80a45ca:	f001 fb39 	bl	80a5c40 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
 80a45ce:	f10b 0b01 	add.w	fp, fp, #1
 80a45d2:	e7f4      	b.n	80a45be <_ZN5Print10printFloatEdh+0xa6>
  number += rounding;
 80a45d4:	463b      	mov	r3, r7
 80a45d6:	4652      	mov	r2, sl
 80a45d8:	f001 f852 	bl	80a5680 <__adddf3>
 80a45dc:	4689      	mov	r9, r1
 80a45de:	4680      	mov	r8, r0
  unsigned long int_part = (unsigned long)number;
 80a45e0:	f001 fcdc 	bl	80a5f9c <__aeabi_d2uiz>
 80a45e4:	4607      	mov	r7, r0
  double remainder = number - (double)int_part;
 80a45e6:	f001 f987 	bl	80a58f8 <__aeabi_ui2d>
 80a45ea:	4602      	mov	r2, r0
 80a45ec:	460b      	mov	r3, r1
 80a45ee:	4640      	mov	r0, r8
 80a45f0:	4649      	mov	r1, r9
 80a45f2:	f001 f843 	bl	80a567c <__aeabi_dsub>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80a45f6:	220a      	movs	r2, #10
 80a45f8:	4680      	mov	r8, r0
 80a45fa:	4689      	mov	r9, r1
 80a45fc:	4628      	mov	r0, r5
 80a45fe:	4639      	mov	r1, r7
 80a4600:	f7ff ff6d 	bl	80a44de <_ZN5Print11printNumberEmh>
  n += print(int_part);
 80a4604:	4404      	add	r4, r0
  if (digits > 0) {
 80a4606:	b126      	cbz	r6, 80a4612 <_ZN5Print10printFloatEdh+0xfa>
  return write(str);
 80a4608:	4628      	mov	r0, r5
 80a460a:	4921      	ldr	r1, [pc, #132]	; (80a4690 <_ZN5Print10printFloatEdh+0x178>)
 80a460c:	f7ff ff3a 	bl	80a4484 <_ZN5Print5writeEPKc>
    n += print(".");
 80a4610:	4404      	add	r4, r0
    remainder *= 10.0;
 80a4612:	f04f 0a00 	mov.w	sl, #0
 80a4616:	f8df b07c 	ldr.w	fp, [pc, #124]	; 80a4694 <_ZN5Print10printFloatEdh+0x17c>
  while (digits-- > 0)
 80a461a:	3e01      	subs	r6, #1
 80a461c:	b2f6      	uxtb	r6, r6
 80a461e:	2eff      	cmp	r6, #255	; 0xff
 80a4620:	d08b      	beq.n	80a453a <_ZN5Print10printFloatEdh+0x22>
    remainder *= 10.0;
 80a4622:	4652      	mov	r2, sl
 80a4624:	465b      	mov	r3, fp
 80a4626:	4640      	mov	r0, r8
 80a4628:	4649      	mov	r1, r9
 80a462a:	f001 f9df 	bl	80a59ec <__aeabi_dmul>
 80a462e:	4680      	mov	r8, r0
 80a4630:	4689      	mov	r9, r1
    int toPrint = int(remainder);
 80a4632:	f001 fc8b 	bl	80a5f4c <__aeabi_d2iz>
        if (n < 0 && base == 10) {
 80a4636:	1e07      	subs	r7, r0, #0
 80a4638:	da19      	bge.n	80a466e <_ZN5Print10printFloatEdh+0x156>
            t = print('-');
 80a463a:	212d      	movs	r1, #45	; 0x2d
 80a463c:	4628      	mov	r0, r5
 80a463e:	f7ff ff35 	bl	80a44ac <_ZN5Print5printEc>
 80a4642:	4603      	mov	r3, r0
            val = -n;
 80a4644:	4279      	negs	r1, r7
        return printNumber(val, base) + t;
 80a4646:	220a      	movs	r2, #10
 80a4648:	4628      	mov	r0, r5
 80a464a:	9301      	str	r3, [sp, #4]
 80a464c:	f7ff ff47 	bl	80a44de <_ZN5Print11printNumberEmh>
 80a4650:	9b01      	ldr	r3, [sp, #4]
 80a4652:	4403      	add	r3, r0
    remainder -= toPrint;
 80a4654:	4638      	mov	r0, r7
    n += print(toPrint);
 80a4656:	441c      	add	r4, r3
    remainder -= toPrint;
 80a4658:	f001 f95e 	bl	80a5918 <__aeabi_i2d>
 80a465c:	4602      	mov	r2, r0
 80a465e:	460b      	mov	r3, r1
 80a4660:	4640      	mov	r0, r8
 80a4662:	4649      	mov	r1, r9
 80a4664:	f001 f80a 	bl	80a567c <__aeabi_dsub>
 80a4668:	4680      	mov	r8, r0
 80a466a:	4689      	mov	r9, r1
  while (digits-- > 0)
 80a466c:	e7d5      	b.n	80a461a <_ZN5Print10printFloatEdh+0x102>
            val = n;
 80a466e:	4639      	mov	r1, r7
        size_t t = 0;
 80a4670:	2300      	movs	r3, #0
 80a4672:	e7e8      	b.n	80a4646 <_ZN5Print10printFloatEdh+0x12e>
 80a4674:	080a872c 	.word	0x080a872c
 80a4678:	7fefffff 	.word	0x7fefffff
 80a467c:	080a8730 	.word	0x080a8730
 80a4680:	41efffff 	.word	0x41efffff
 80a4684:	080a8734 	.word	0x080a8734
 80a4688:	c1efffff 	.word	0xc1efffff
 80a468c:	3fe00000 	.word	0x3fe00000
 80a4690:	080a84c7 	.word	0x080a84c7
 80a4694:	40240000 	.word	0x40240000

080a4698 <_ZN5Print5printEfi>:
{
 80a4698:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a469a:	4605      	mov	r5, r0
 80a469c:	4614      	mov	r4, r2
  return printFloat((double)n, digits);
 80a469e:	4608      	mov	r0, r1
 80a46a0:	f001 f94c 	bl	80a593c <__aeabi_f2d>
 80a46a4:	b2e4      	uxtb	r4, r4
 80a46a6:	4602      	mov	r2, r0
 80a46a8:	460b      	mov	r3, r1
 80a46aa:	4628      	mov	r0, r5
 80a46ac:	9400      	str	r4, [sp, #0]
 80a46ae:	f7ff ff33 	bl	80a4518 <_ZN5Print10printFloatEdh>
}
 80a46b2:	b003      	add	sp, #12
 80a46b4:	bd30      	pop	{r4, r5, pc}

080a46b6 <_ZN5Print7printlnEdi>:
{
 80a46b6:	b537      	push	{r0, r1, r2, r4, r5, lr}
  return printFloat(n, digits);
 80a46b8:	f89d 1018 	ldrb.w	r1, [sp, #24]
{
 80a46bc:	4605      	mov	r5, r0
  return printFloat(n, digits);
 80a46be:	9100      	str	r1, [sp, #0]
 80a46c0:	f7ff ff2a 	bl	80a4518 <_ZN5Print10printFloatEdh>
 80a46c4:	4604      	mov	r4, r0
  n += println();
 80a46c6:	4628      	mov	r0, r5
 80a46c8:	f7ff fef3 	bl	80a44b2 <_ZN5Print7printlnEv>
}
 80a46cc:	4420      	add	r0, r4
 80a46ce:	b003      	add	sp, #12
 80a46d0:	bd30      	pop	{r4, r5, pc}

080a46d2 <_ZN5Print7printlnEfi>:
{
 80a46d2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a46d4:	4604      	mov	r4, r0
    return println((double)num, digits);
 80a46d6:	4608      	mov	r0, r1
{
 80a46d8:	4615      	mov	r5, r2
    return println((double)num, digits);
 80a46da:	f001 f92f 	bl	80a593c <__aeabi_f2d>
 80a46de:	9500      	str	r5, [sp, #0]
 80a46e0:	4602      	mov	r2, r0
 80a46e2:	460b      	mov	r3, r1
 80a46e4:	4620      	mov	r0, r4
 80a46e6:	f7ff ffe6 	bl	80a46b6 <_ZN5Print7printlnEdi>
}
 80a46ea:	b003      	add	sp, #12
 80a46ec:	bd30      	pop	{r4, r5, pc}

080a46ee <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a46ee:	2300      	movs	r3, #0
 80a46f0:	6840      	ldr	r0, [r0, #4]
 80a46f2:	461a      	mov	r2, r3
 80a46f4:	4619      	mov	r1, r3
 80a46f6:	f7ff b8c5 	b.w	80a3884 <network_on>
	...

080a46fc <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a46fc:	4b01      	ldr	r3, [pc, #4]	; (80a4704 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a46fe:	4a02      	ldr	r2, [pc, #8]	; (80a4708 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a4700:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 80a4702:	4770      	bx	lr
 80a4704:	20000568 	.word	0x20000568
 80a4708:	080a8738 	.word	0x080a8738

080a470c <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
 80a470c:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
 80a470e:	2000      	movs	r0, #0
 80a4710:	f7ff f910 	bl	80a3934 <spark_sync_time_pending>
 80a4714:	b128      	cbz	r0, 80a4722 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a4716:	f7ff f905 	bl	80a3924 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
 80a471a:	f080 0001 	eor.w	r0, r0, #1
 80a471e:	b2c0      	uxtb	r0, r0
    }
 80a4720:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
 80a4722:	2001      	movs	r0, #1
 80a4724:	e7fc      	b.n	80a4720 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

080a4728 <_ZN9TimeClass4zoneEf>:
	return now() + time_zone_cache + dst_current_cache;
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
 80a4728:	b510      	push	{r4, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
 80a472a:	490a      	ldr	r1, [pc, #40]	; (80a4754 <_ZN9TimeClass4zoneEf+0x2c>)
{
 80a472c:	4604      	mov	r4, r0
	if(GMT_Offset < -12 || GMT_Offset > 14)
 80a472e:	f001 ff01 	bl	80a6534 <__aeabi_fcmplt>
 80a4732:	b968      	cbnz	r0, 80a4750 <_ZN9TimeClass4zoneEf+0x28>
 80a4734:	4620      	mov	r0, r4
 80a4736:	4908      	ldr	r1, [pc, #32]	; (80a4758 <_ZN9TimeClass4zoneEf+0x30>)
 80a4738:	f001 ff1a 	bl	80a6570 <__aeabi_fcmpgt>
 80a473c:	b940      	cbnz	r0, 80a4750 <_ZN9TimeClass4zoneEf+0x28>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
 80a473e:	4907      	ldr	r1, [pc, #28]	; (80a475c <_ZN9TimeClass4zoneEf+0x34>)
 80a4740:	4620      	mov	r0, r4
 80a4742:	f001 fd59 	bl	80a61f8 <__aeabi_fmul>
 80a4746:	f001 ff35 	bl	80a65b4 <__aeabi_f2lz>
 80a474a:	4b05      	ldr	r3, [pc, #20]	; (80a4760 <_ZN9TimeClass4zoneEf+0x38>)
 80a474c:	e9c3 0100 	strd	r0, r1, [r3]
}
 80a4750:	bd10      	pop	{r4, pc}
 80a4752:	bf00      	nop
 80a4754:	c1400000 	.word	0xc1400000
 80a4758:	41600000 	.word	0x41600000
 80a475c:	45610000 	.word	0x45610000
 80a4760:	20000580 	.word	0x20000580

080a4764 <_ZN9TimeClass7timeStrEx>:
    }
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 80a4764:	b530      	push	{r4, r5, lr}
 80a4766:	4604      	mov	r4, r0
    t += time_zone_cache;
 80a4768:	4818      	ldr	r0, [pc, #96]	; (80a47cc <_ZN9TimeClass7timeStrEx+0x68>)
{
 80a476a:	b093      	sub	sp, #76	; 0x4c
    t += time_zone_cache;
 80a476c:	e9d0 1000 	ldrd	r1, r0, [r0]
 80a4770:	1852      	adds	r2, r2, r1
 80a4772:	eb40 0303 	adc.w	r3, r0, r3
    t += dst_current_cache;
 80a4776:	4816      	ldr	r0, [pc, #88]	; (80a47d0 <_ZN9TimeClass7timeStrEx+0x6c>)
    struct tm calendar_time = {};
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
 80a4778:	2500      	movs	r5, #0
    t += dst_current_cache;
 80a477a:	e9d0 1000 	ldrd	r1, r0, [r0]
 80a477e:	1852      	adds	r2, r2, r1
 80a4780:	eb40 0303 	adc.w	r3, r0, r3
 80a4784:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
 80a4788:	2224      	movs	r2, #36	; 0x24
 80a478a:	2100      	movs	r1, #0
 80a478c:	eb0d 0002 	add.w	r0, sp, r2
 80a4790:	f002 fa02 	bl	80a6b98 <memset>
    localtime_r(&t, &calendar_time);
 80a4794:	a909      	add	r1, sp, #36	; 0x24
 80a4796:	4668      	mov	r0, sp
 80a4798:	f002 f8fa 	bl	80a6990 <localtime_r>
    char ascstr[26] = {};
 80a479c:	2216      	movs	r2, #22
 80a479e:	4629      	mov	r1, r5
 80a47a0:	a803      	add	r0, sp, #12
 80a47a2:	9502      	str	r5, [sp, #8]
 80a47a4:	f002 f9f8 	bl	80a6b98 <memset>
    asctime_r(&calendar_time, ascstr);
 80a47a8:	a902      	add	r1, sp, #8
 80a47aa:	a809      	add	r0, sp, #36	; 0x24
 80a47ac:	f002 f8b8 	bl	80a6920 <asctime_r>
    int len = strlen(ascstr);
 80a47b0:	a802      	add	r0, sp, #8
 80a47b2:	f002 ff91 	bl	80a76d8 <strlen>
    ascstr[len-1] = 0; // remove final newline
 80a47b6:	ab12      	add	r3, sp, #72	; 0x48
 80a47b8:	4418      	add	r0, r3
 80a47ba:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
 80a47be:	a902      	add	r1, sp, #8
 80a47c0:	4620      	mov	r0, r4
 80a47c2:	f7ff fcfd 	bl	80a41c0 <_ZN6StringC1EPKc>
}
 80a47c6:	4620      	mov	r0, r4
 80a47c8:	b013      	add	sp, #76	; 0x4c
 80a47ca:	bd30      	pop	{r4, r5, pc}
 80a47cc:	20000580 	.word	0x20000580
 80a47d0:	20000578 	.word	0x20000578

080a47d4 <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    localtime_r(&t, &calendar_time);
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 80a47d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a47d8:	b0a5      	sub	sp, #148	; 0x94
 80a47da:	4607      	mov	r7, r0
 80a47dc:	4688      	mov	r8, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 80a47de:	a814      	add	r0, sp, #80	; 0x50
{
 80a47e0:	4611      	mov	r1, r2
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 80a47e2:	223f      	movs	r2, #63	; 0x3f
{
 80a47e4:	461d      	mov	r5, r3
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 80a47e6:	f002 ff91 	bl	80a770c <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
 80a47ea:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
 80a47ec:	a814      	add	r0, sp, #80	; 0x50
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
 80a47ee:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
 80a47f2:	f002 ff71 	bl	80a76d8 <strlen>
 80a47f6:	4604      	mov	r4, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
 80a47f8:	bb5d      	cbnz	r5, 80a4852 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x7e>
        strcpy(time_zone_str, "Z");
 80a47fa:	492a      	ldr	r1, [pc, #168]	; (80a48a4 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd0>)
 80a47fc:	a803      	add	r0, sp, #12
 80a47fe:	f002 fa01 	bl	80a6c04 <strcpy>
{
 80a4802:	2500      	movs	r5, #0
 80a4804:	ae14      	add	r6, sp, #80	; 0x50
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
 80a4806:	f104 3bff 	add.w	fp, r4, #4294967295
 80a480a:	45ab      	cmp	fp, r5
 80a480c:	d936      	bls.n	80a487c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xa8>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
 80a480e:	46b1      	mov	r9, r6
 80a4810:	f819 3b01 	ldrb.w	r3, [r9], #1
 80a4814:	f105 0a01 	add.w	sl, r5, #1
 80a4818:	2b25      	cmp	r3, #37	; 0x25
 80a481a:	d117      	bne.n	80a484c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
 80a481c:	7873      	ldrb	r3, [r6, #1]
 80a481e:	2b7a      	cmp	r3, #122	; 0x7a
 80a4820:	d114      	bne.n	80a484c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
        {
            size_t tzlen = strlen(time_zone_str);
 80a4822:	a803      	add	r0, sp, #12
 80a4824:	f002 ff58 	bl	80a76d8 <strlen>
 80a4828:	4604      	mov	r4, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
 80a482a:	ab14      	add	r3, sp, #80	; 0x50
 80a482c:	1828      	adds	r0, r5, r0
 80a482e:	4418      	add	r0, r3
 80a4830:	ebab 0205 	sub.w	r2, fp, r5
 80a4834:	1cb1      	adds	r1, r6, #2
 80a4836:	f002 f9a1 	bl	80a6b7c <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
 80a483a:	4622      	mov	r2, r4
 80a483c:	a903      	add	r1, sp, #12
 80a483e:	4630      	mov	r0, r6
 80a4840:	f002 f99c 	bl	80a6b7c <memcpy>
            len = strlen(format_str);
 80a4844:	a814      	add	r0, sp, #80	; 0x50
 80a4846:	f002 ff47 	bl	80a76d8 <strlen>
 80a484a:	4604      	mov	r4, r0
    for (size_t i=0; i<len-1; i++)
 80a484c:	464e      	mov	r6, r9
 80a484e:	4655      	mov	r5, sl
 80a4850:	e7d9      	b.n	80a4806 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
 80a4852:	213c      	movs	r1, #60	; 0x3c
 80a4854:	fb95 f3f1 	sdiv	r3, r5, r1
 80a4858:	2b00      	cmp	r3, #0
 80a485a:	bfb8      	it	lt
 80a485c:	425b      	neglt	r3, r3
 80a485e:	fbb3 f2f1 	udiv	r2, r3, r1
 80a4862:	fb01 3312 	mls	r3, r1, r2, r3
 80a4866:	9300      	str	r3, [sp, #0]
 80a4868:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80a486c:	2110      	movs	r1, #16
 80a486e:	fb95 f3f3 	sdiv	r3, r5, r3
 80a4872:	4a0d      	ldr	r2, [pc, #52]	; (80a48a8 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd4>)
 80a4874:	a803      	add	r0, sp, #12
 80a4876:	f7ff f89d 	bl	80a39b4 <snprintf>
 80a487a:	e7c2      	b.n	80a4802 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2e>
        }
    }

    char buf[50] = {};
 80a487c:	2100      	movs	r1, #0
 80a487e:	222e      	movs	r2, #46	; 0x2e
 80a4880:	a808      	add	r0, sp, #32
 80a4882:	9107      	str	r1, [sp, #28]
 80a4884:	f002 f988 	bl	80a6b98 <memset>
    strftime(buf, sizeof(buf), format_str, calendar_time);
 80a4888:	4643      	mov	r3, r8
 80a488a:	aa14      	add	r2, sp, #80	; 0x50
 80a488c:	2132      	movs	r1, #50	; 0x32
 80a488e:	a807      	add	r0, sp, #28
 80a4890:	f002 ff18 	bl	80a76c4 <strftime>
    return String(buf);
 80a4894:	4638      	mov	r0, r7
 80a4896:	a907      	add	r1, sp, #28
 80a4898:	f7ff fc92 	bl	80a41c0 <_ZN6StringC1EPKc>
}
 80a489c:	4638      	mov	r0, r7
 80a489e:	b025      	add	sp, #148	; 0x94
 80a48a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a48a4:	080a8cbd 	.word	0x080a8cbd
 80a48a8:	080a873c 	.word	0x080a873c

080a48ac <_ZN9TimeClass6formatExPKc>:
{
 80a48ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a48ae:	b08d      	sub	sp, #52	; 0x34
 80a48b0:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80a48b2:	4604      	mov	r4, r0
 80a48b4:	e9cd 2300 	strd	r2, r3, [sp]
    if (format_spec == nullptr)
 80a48b8:	b915      	cbnz	r5, 80a48c0 <_ZN9TimeClass6formatExPKc+0x14>
        format_spec = this->format_spec;
 80a48ba:	4b19      	ldr	r3, [pc, #100]	; (80a4920 <_ZN9TimeClass6formatExPKc+0x74>)
 80a48bc:	681d      	ldr	r5, [r3, #0]
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
 80a48be:	b12d      	cbz	r5, 80a48cc <_ZN9TimeClass6formatExPKc+0x20>
 80a48c0:	4b18      	ldr	r3, [pc, #96]	; (80a4924 <_ZN9TimeClass6formatExPKc+0x78>)
 80a48c2:	4628      	mov	r0, r5
 80a48c4:	6819      	ldr	r1, [r3, #0]
 80a48c6:	f002 f993 	bl	80a6bf0 <strcmp>
 80a48ca:	b938      	cbnz	r0, 80a48dc <_ZN9TimeClass6formatExPKc+0x30>
        return timeStr(t);
 80a48cc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80a48d0:	4620      	mov	r0, r4
 80a48d2:	f7ff ff47 	bl	80a4764 <_ZN9TimeClass7timeStrEx>
}
 80a48d6:	4620      	mov	r0, r4
 80a48d8:	b00d      	add	sp, #52	; 0x34
 80a48da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t += time_zone_cache;
 80a48dc:	9900      	ldr	r1, [sp, #0]
 80a48de:	4e12      	ldr	r6, [pc, #72]	; (80a4928 <_ZN9TimeClass6formatExPKc+0x7c>)
    t += dst_current_cache;
 80a48e0:	4f12      	ldr	r7, [pc, #72]	; (80a492c <_ZN9TimeClass6formatExPKc+0x80>)
    t += time_zone_cache;
 80a48e2:	e9d6 3200 	ldrd	r3, r2, [r6]
 80a48e6:	185b      	adds	r3, r3, r1
 80a48e8:	9901      	ldr	r1, [sp, #4]
 80a48ea:	eb41 0202 	adc.w	r2, r1, r2
    t += dst_current_cache;
 80a48ee:	e9d7 0100 	ldrd	r0, r1, [r7]
 80a48f2:	181b      	adds	r3, r3, r0
 80a48f4:	eb41 0202 	adc.w	r2, r1, r2
 80a48f8:	e9cd 3200 	strd	r3, r2, [sp]
    struct tm calendar_time = {};
 80a48fc:	2100      	movs	r1, #0
 80a48fe:	2224      	movs	r2, #36	; 0x24
 80a4900:	a803      	add	r0, sp, #12
 80a4902:	f002 f949 	bl	80a6b98 <memset>
    localtime_r(&t, &calendar_time);
 80a4906:	a903      	add	r1, sp, #12
 80a4908:	4668      	mov	r0, sp
 80a490a:	f002 f841 	bl	80a6990 <localtime_r>
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
 80a490e:	6832      	ldr	r2, [r6, #0]
 80a4910:	683b      	ldr	r3, [r7, #0]
 80a4912:	4620      	mov	r0, r4
 80a4914:	4413      	add	r3, r2
 80a4916:	a903      	add	r1, sp, #12
 80a4918:	462a      	mov	r2, r5
 80a491a:	f7ff ff5b 	bl	80a47d4 <_ZN9TimeClass14timeFormatImplEP2tmPKci>
 80a491e:	e7da      	b.n	80a48d6 <_ZN9TimeClass6formatExPKc+0x2a>
 80a4920:	20000570 	.word	0x20000570
 80a4924:	20000008 	.word	0x20000008
 80a4928:	20000580 	.word	0x20000580
 80a492c:	20000578 	.word	0x20000578

080a4930 <_ZN9TimeClass7isValidEv>:

bool TimeClass::isValid()
{
 80a4930:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
 80a4932:	2000      	movs	r0, #0
 80a4934:	f7fe fdd6 	bl	80a34e4 <hal_rtc_time_is_valid>
    if (rtcstate)
 80a4938:	4604      	mov	r4, r0
 80a493a:	b9a0      	cbnz	r0, 80a4966 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 80a493c:	f7fe ff44 	bl	80a37c8 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 80a4940:	2801      	cmp	r0, #1
 80a4942:	d110      	bne.n	80a4966 <_ZN9TimeClass7isValidEv+0x36>
 80a4944:	4620      	mov	r0, r4
 80a4946:	f7fe ff57 	bl	80a37f8 <system_thread_get_state>
 80a494a:	b960      	cbnz	r0, 80a4966 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
 80a494c:	f7ff fede 	bl	80a470c <_ZN10CloudClass12syncTimeDoneEv.isra.0>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80a4950:	b910      	cbnz	r0, 80a4958 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
 80a4952:	f7fe ffd7 	bl	80a3904 <spark_process>
        while (_while() && !_condition()) {
 80a4956:	e7f9      	b.n	80a494c <_ZN9TimeClass7isValidEv+0x1c>
 80a4958:	f7ff fed8 	bl	80a470c <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
 80a495c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
 80a4960:	2000      	movs	r0, #0
 80a4962:	f7fe bdbf 	b.w	80a34e4 <hal_rtc_time_is_valid>
}
 80a4966:	4620      	mov	r0, r4
 80a4968:	bd10      	pop	{r4, pc}

080a496a <_ZN9TimeClass3nowEv>:
{
 80a496a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
 80a496c:	f7ff ffe0 	bl	80a4930 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
 80a4970:	2210      	movs	r2, #16
 80a4972:	2100      	movs	r1, #0
 80a4974:	4668      	mov	r0, sp
 80a4976:	f002 f90f 	bl	80a6b98 <memset>
    hal_rtc_get_time(&tv, nullptr);
 80a497a:	2100      	movs	r1, #0
 80a497c:	4668      	mov	r0, sp
 80a497e:	f7fe fdb9 	bl	80a34f4 <hal_rtc_get_time>
}
 80a4982:	9800      	ldr	r0, [sp, #0]
 80a4984:	b005      	add	sp, #20
 80a4986:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a498c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a498c:	4b02      	ldr	r3, [pc, #8]	; (80a4998 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a498e:	681a      	ldr	r2, [r3, #0]
 80a4990:	4b02      	ldr	r3, [pc, #8]	; (80a499c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a4992:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 80a4994:	4770      	bx	lr
 80a4996:	bf00      	nop
 80a4998:	20000008 	.word	0x20000008
 80a499c:	20000570 	.word	0x20000570

080a49a0 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a49a0:	2100      	movs	r1, #0
 80a49a2:	f7fe bf21 	b.w	80a37e8 <system_delay_ms>

080a49a6 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a49a6:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a49a8:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 80a49aa:	4604      	mov	r4, r0
      if (_M_manager)
 80a49ac:	b113      	cbz	r3, 80a49b4 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a49ae:	2203      	movs	r2, #3
 80a49b0:	4601      	mov	r1, r0
 80a49b2:	4798      	blx	r3
    }
 80a49b4:	4620      	mov	r0, r4
 80a49b6:	bd10      	pop	{r4, pc}

080a49b8 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a49b8:	b510      	push	{r4, lr}
 80a49ba:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a49bc:	f7ff fff3 	bl	80a49a6 <_ZNSt14_Function_baseD1Ev>
 80a49c0:	4620      	mov	r0, r4
 80a49c2:	bd10      	pop	{r4, pc}

080a49c4 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 80a49c4:	2300      	movs	r3, #0
 80a49c6:	4803      	ldr	r0, [pc, #12]	; (80a49d4 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a49c8:	4a03      	ldr	r2, [pc, #12]	; (80a49d8 <_GLOBAL__sub_I_RGB+0x14>)
 80a49ca:	4904      	ldr	r1, [pc, #16]	; (80a49dc <_GLOBAL__sub_I_RGB+0x18>)
 80a49cc:	6083      	str	r3, [r0, #8]
 80a49ce:	f000 bd33 	b.w	80a5438 <__aeabi_atexit>
 80a49d2:	bf00      	nop
 80a49d4:	20000588 	.word	0x20000588
 80a49d8:	20000240 	.word	0x20000240
 80a49dc:	080a49b9 	.word	0x080a49b9

080a49e0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 80a49e0:	4b01      	ldr	r3, [pc, #4]	; (80a49e8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 80a49e2:	6018      	str	r0, [r3, #0]
    }, nullptr);
 80a49e4:	4770      	bx	lr
 80a49e6:	bf00      	nop
 80a49e8:	2000000c 	.word	0x2000000c

080a49ec <serialEventRun>:
{
 80a49ec:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a49ee:	4b13      	ldr	r3, [pc, #76]	; (80a4a3c <serialEventRun+0x50>)
 80a49f0:	b143      	cbz	r3, 80a4a04 <serialEventRun+0x18>
 80a49f2:	f000 f995 	bl	80a4d20 <_Z16_fetch_usbserialv>
 80a49f6:	6803      	ldr	r3, [r0, #0]
 80a49f8:	691b      	ldr	r3, [r3, #16]
 80a49fa:	4798      	blx	r3
 80a49fc:	2800      	cmp	r0, #0
 80a49fe:	dd01      	ble.n	80a4a04 <serialEventRun+0x18>
        serialEvent();
 80a4a00:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
 80a4a04:	4b0e      	ldr	r3, [pc, #56]	; (80a4a40 <serialEventRun+0x54>)
 80a4a06:	b143      	cbz	r3, 80a4a1a <serialEventRun+0x2e>
 80a4a08:	f000 fa3c 	bl	80a4e84 <_Z22__fetch_global_Serial1v>
 80a4a0c:	6803      	ldr	r3, [r0, #0]
 80a4a0e:	691b      	ldr	r3, [r3, #16]
 80a4a10:	4798      	blx	r3
 80a4a12:	2800      	cmp	r0, #0
 80a4a14:	dd01      	ble.n	80a4a1a <serialEventRun+0x2e>
        serialEvent1();
 80a4a16:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 80a4a1a:	4b0a      	ldr	r3, [pc, #40]	; (80a4a44 <serialEventRun+0x58>)
 80a4a1c:	b10b      	cbz	r3, 80a4a22 <serialEventRun+0x36>
 80a4a1e:	f3af 8000 	nop.w
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a4a22:	4b09      	ldr	r3, [pc, #36]	; (80a4a48 <serialEventRun+0x5c>)
 80a4a24:	b143      	cbz	r3, 80a4a38 <serialEventRun+0x4c>
 80a4a26:	f000 f9ab 	bl	80a4d80 <_Z17_fetch_usbserial1v>
 80a4a2a:	6803      	ldr	r3, [r0, #0]
 80a4a2c:	691b      	ldr	r3, [r3, #16]
 80a4a2e:	4798      	blx	r3
 80a4a30:	2800      	cmp	r0, #0
 80a4a32:	dd01      	ble.n	80a4a38 <serialEventRun+0x4c>
        usbSerialEvent1();
 80a4a34:	f3af 8000 	nop.w
}
 80a4a38:	bd08      	pop	{r3, pc}
 80a4a3a:	bf00      	nop
	...

080a4a4c <_post_loop>:
{
 80a4a4c:	b508      	push	{r3, lr}
	serialEventRun();
 80a4a4e:	f7ff ffcd 	bl	80a49ec <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a4a52:	f7fe fd3f 	bl	80a34d4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a4a56:	4b01      	ldr	r3, [pc, #4]	; (80a4a5c <_post_loop+0x10>)
 80a4a58:	6018      	str	r0, [r3, #0]
}
 80a4a5a:	bd08      	pop	{r3, pc}
 80a4a5c:	20000600 	.word	0x20000600

080a4a60 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a4a60:	4802      	ldr	r0, [pc, #8]	; (80a4a6c <_Z33system_initialize_user_backup_ramv+0xc>)
 80a4a62:	4a03      	ldr	r2, [pc, #12]	; (80a4a70 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a4a64:	4903      	ldr	r1, [pc, #12]	; (80a4a74 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a4a66:	1a12      	subs	r2, r2, r0
 80a4a68:	f002 b888 	b.w	80a6b7c <memcpy>
 80a4a6c:	40024000 	.word	0x40024000
 80a4a70:	40024004 	.word	0x40024004
 80a4a74:	080a8e28 	.word	0x080a8e28

080a4a78 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a4a78:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a4a7a:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a4a7c:	461a      	mov	r2, r3
 80a4a7e:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a4a82:	9300      	str	r3, [sp, #0]
 80a4a84:	f7fe feca 	bl	80a381c <system_ctrl_set_result>
}
 80a4a88:	b003      	add	sp, #12
 80a4a8a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a4a90 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 80a4a90:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a4a92:	8843      	ldrh	r3, [r0, #2]
 80a4a94:	2b0a      	cmp	r3, #10
 80a4a96:	d008      	beq.n	80a4aaa <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a4a98:	2b50      	cmp	r3, #80	; 0x50
 80a4a9a:	d10b      	bne.n	80a4ab4 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 80a4a9c:	4b09      	ldr	r3, [pc, #36]	; (80a4ac4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a4a9e:	681b      	ldr	r3, [r3, #0]
 80a4aa0:	b14b      	cbz	r3, 80a4ab6 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 80a4aa2:	b003      	add	sp, #12
 80a4aa4:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 80a4aa8:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 80a4aaa:	f7ff ffe5 	bl	80a4a78 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 80a4aae:	b003      	add	sp, #12
 80a4ab0:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a4ab4:	2300      	movs	r3, #0
 80a4ab6:	461a      	mov	r2, r3
 80a4ab8:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a4abc:	9300      	str	r3, [sp, #0]
 80a4abe:	f7fe fead 	bl	80a381c <system_ctrl_set_result>
}
 80a4ac2:	e7f4      	b.n	80a4aae <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 80a4ac4:	2000059c 	.word	0x2000059c

080a4ac8 <module_user_init_hook>:
{
 80a4ac8:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a4aca:	4c12      	ldr	r4, [pc, #72]	; (80a4b14 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a4acc:	2100      	movs	r1, #0
 80a4ace:	4812      	ldr	r0, [pc, #72]	; (80a4b18 <module_user_init_hook+0x50>)
 80a4ad0:	f7fe ff90 	bl	80a39f4 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a4ad4:	4d11      	ldr	r5, [pc, #68]	; (80a4b1c <module_user_init_hook+0x54>)
 80a4ad6:	6823      	ldr	r3, [r4, #0]
 80a4ad8:	42ab      	cmp	r3, r5
 80a4ada:	bf0c      	ite	eq
 80a4adc:	2201      	moveq	r2, #1
 80a4ade:	2200      	movne	r2, #0
 80a4ae0:	4b0f      	ldr	r3, [pc, #60]	; (80a4b20 <module_user_init_hook+0x58>)
 80a4ae2:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a4ae4:	d002      	beq.n	80a4aec <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
 80a4ae6:	f7ff ffbb 	bl	80a4a60 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a4aea:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a4aec:	f7fe fcea 	bl	80a34c4 <HAL_RNG_GetRandomNumber>
 80a4af0:	4604      	mov	r4, r0
    srand(seed);
 80a4af2:	f002 f859 	bl	80a6ba8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a4af6:	4b0b      	ldr	r3, [pc, #44]	; (80a4b24 <module_user_init_hook+0x5c>)
 80a4af8:	b113      	cbz	r3, 80a4b00 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
 80a4afa:	4620      	mov	r0, r4
 80a4afc:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a4b00:	2100      	movs	r1, #0
 80a4b02:	4808      	ldr	r0, [pc, #32]	; (80a4b24 <module_user_init_hook+0x5c>)
 80a4b04:	f7fe ff1e 	bl	80a3944 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a4b08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a4b0c:	2100      	movs	r1, #0
 80a4b0e:	4806      	ldr	r0, [pc, #24]	; (80a4b28 <module_user_init_hook+0x60>)
 80a4b10:	f7fe be7a 	b.w	80a3808 <system_ctrl_set_app_request_handler>
 80a4b14:	40024000 	.word	0x40024000
 80a4b18:	080a49e1 	.word	0x080a49e1
 80a4b1c:	9a271c1e 	.word	0x9a271c1e
 80a4b20:	20000598 	.word	0x20000598
 80a4b24:	00000000 	.word	0x00000000
 80a4b28:	080a4a91 	.word	0x080a4a91

080a4b2c <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
{
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
 80a4b2c:	b510      	push	{r4, lr}
 80a4b2e:	b088      	sub	sp, #32
 80a4b30:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 80a4b32:	4668      	mov	r0, sp
 80a4b34:	f7ff fb44 	bl	80a41c0 <_ZN6StringC1EPKc>
    return (*fn)(p);
 80a4b38:	4669      	mov	r1, sp
 80a4b3a:	a804      	add	r0, sp, #16
 80a4b3c:	f7ff fb7f 	bl	80a423e <_ZN6StringC1ERKS_>
 80a4b40:	a804      	add	r0, sp, #16
 80a4b42:	47a0      	blx	r4
 80a4b44:	4604      	mov	r4, r0
 80a4b46:	a804      	add	r0, sp, #16
 80a4b48:	f7ff faf0 	bl	80a412c <_ZN6StringD1Ev>
    String p(param);
 80a4b4c:	4668      	mov	r0, sp
 80a4b4e:	f7ff faed 	bl	80a412c <_ZN6StringD1Ev>
}
 80a4b52:	4620      	mov	r0, r4
 80a4b54:	b008      	add	sp, #32
 80a4b56:	bd10      	pop	{r4, pc}

080a4b58 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
 80a4b58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
 80a4b5a:	2300      	movs	r3, #0
         size = sizeof(*this);
 80a4b5c:	2410      	movs	r4, #16
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
 80a4b5e:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
 80a4b62:	9201      	str	r2, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 80a4b64:	4669      	mov	r1, sp
 80a4b66:	461a      	mov	r2, r3
 80a4b68:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
 80a4b6a:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
 80a4b6e:	f8ad 4000 	strh.w	r4, [sp]
 80a4b72:	f7fe febf 	bl	80a38f4 <spark_function>
}
 80a4b76:	b004      	add	sp, #16
 80a4b78:	bd10      	pop	{r4, pc}

080a4b7a <_ZN9IPAddressD1Ev>:
    virtual ~IPAddress() {}
 80a4b7a:	4770      	bx	lr

080a4b7c <_ZN9IPAddressD0Ev>:
 80a4b7c:	b510      	push	{r4, lr}
 80a4b7e:	4604      	mov	r4, r0
 80a4b80:	2118      	movs	r1, #24
 80a4b82:	f000 fc5e 	bl	80a5442 <_ZdlPvj>
 80a4b86:	4620      	mov	r0, r4
 80a4b88:	bd10      	pop	{r4, pc}

080a4b8a <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a4b8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a4b8c:	460e      	mov	r6, r1
 80a4b8e:	2400      	movs	r4, #0
 80a4b90:	f100 0708 	add.w	r7, r0, #8
 80a4b94:	1d05      	adds	r5, r0, #4
        return printNumber(val, base) + t;
 80a4b96:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 80a4b9a:	220a      	movs	r2, #10
 80a4b9c:	4630      	mov	r0, r6
 80a4b9e:	f7ff fc9e 	bl	80a44de <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a4ba2:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a4ba4:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 80a4ba6:	d101      	bne.n	80a4bac <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 80a4ba8:	4620      	mov	r0, r4
 80a4baa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 80a4bac:	2c00      	cmp	r4, #0
 80a4bae:	d0f2      	beq.n	80a4b96 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a4bb0:	212e      	movs	r1, #46	; 0x2e
 80a4bb2:	4630      	mov	r0, r6
 80a4bb4:	f7ff fc7a 	bl	80a44ac <_ZN5Print5printEc>
 80a4bb8:	4404      	add	r4, r0
 80a4bba:	e7ec      	b.n	80a4b96 <_ZNK9IPAddress7printToER5Print+0xc>

080a4bbc <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 80a4bbc:	b510      	push	{r4, lr}
 80a4bbe:	4604      	mov	r4, r0
 80a4bc0:	4b04      	ldr	r3, [pc, #16]	; (80a4bd4 <_ZN9IPAddressC1Ev+0x18>)
    void clear() { memset(&address, 0, sizeof (address)); }
 80a4bc2:	2211      	movs	r2, #17
 80a4bc4:	2100      	movs	r1, #0
 80a4bc6:	f840 3b04 	str.w	r3, [r0], #4
 80a4bca:	f001 ffe5 	bl	80a6b98 <memset>
}
 80a4bce:	4620      	mov	r0, r4
 80a4bd0:	bd10      	pop	{r4, pc}
 80a4bd2:	bf00      	nop
 80a4bd4:	080a876c 	.word	0x080a876c

080a4bd8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 80a4bd8:	4603      	mov	r3, r0
 80a4bda:	4a07      	ldr	r2, [pc, #28]	; (80a4bf8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a4bdc:	b510      	push	{r4, lr}
 80a4bde:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 80a4be2:	f101 0210 	add.w	r2, r1, #16
 80a4be6:	f851 4b04 	ldr.w	r4, [r1], #4
 80a4bea:	4291      	cmp	r1, r2
 80a4bec:	f843 4b04 	str.w	r4, [r3], #4
 80a4bf0:	d1f9      	bne.n	80a4be6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a4bf2:	780a      	ldrb	r2, [r1, #0]
 80a4bf4:	701a      	strb	r2, [r3, #0]
}
 80a4bf6:	bd10      	pop	{r4, pc}
 80a4bf8:	080a876c 	.word	0x080a876c

080a4bfc <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t address)
 80a4bfc:	4a02      	ldr	r2, [pc, #8]	; (80a4c08 <_ZN9IPAddressC1Em+0xc>)
    address.ipv4 = ipv4;
 80a4bfe:	e9c0 2100 	strd	r2, r1, [r0]
        address.v = version;
 80a4c02:	2204      	movs	r2, #4
 80a4c04:	7502      	strb	r2, [r0, #20]
}
 80a4c06:	4770      	bx	lr
 80a4c08:	080a876c 	.word	0x080a876c

080a4c0c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 80a4c0c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a4c0e:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a4c12:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 80a4c16:	2304      	movs	r3, #4
 80a4c18:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80a4c1c:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 80a4c20:	6044      	str	r4, [r0, #4]
 80a4c22:	7503      	strb	r3, [r0, #20]
}
 80a4c24:	bd10      	pop	{r4, pc}
	...

080a4c28 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a4c28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a4c2a:	4d04      	ldr	r5, [pc, #16]	; (80a4c3c <_ZN9IPAddressC1Ehhhh+0x14>)
 80a4c2c:	6005      	str	r5, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a4c2e:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a4c32:	9500      	str	r5, [sp, #0]
 80a4c34:	f7ff ffea 	bl	80a4c0c <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a4c38:	b003      	add	sp, #12
 80a4c3a:	bd30      	pop	{r4, r5, pc}
 80a4c3c:	080a876c 	.word	0x080a876c

080a4c40 <_ZN9IPAddressaSEPKh>:
{
 80a4c40:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
 80a4c42:	78cb      	ldrb	r3, [r1, #3]
 80a4c44:	9300      	str	r3, [sp, #0]
 80a4c46:	788b      	ldrb	r3, [r1, #2]
 80a4c48:	784a      	ldrb	r2, [r1, #1]
 80a4c4a:	7809      	ldrb	r1, [r1, #0]
 80a4c4c:	f7ff ffde 	bl	80a4c0c <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a4c50:	b002      	add	sp, #8
 80a4c52:	bd10      	pop	{r4, pc}

080a4c54 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* address)
 80a4c54:	b510      	push	{r4, lr}
 80a4c56:	4604      	mov	r4, r0
 80a4c58:	4b02      	ldr	r3, [pc, #8]	; (80a4c64 <_ZN9IPAddressC1EPKh+0x10>)
 80a4c5a:	6003      	str	r3, [r0, #0]
    *this = address;
 80a4c5c:	f7ff fff0 	bl	80a4c40 <_ZN9IPAddressaSEPKh>
}
 80a4c60:	4620      	mov	r0, r4
 80a4c62:	bd10      	pop	{r4, pc}
 80a4c64:	080a876c 	.word	0x080a876c

080a4c68 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a4c68:	7441      	strb	r1, [r0, #17]
}
 80a4c6a:	4770      	bx	lr

080a4c6c <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a4c6c:	4770      	bx	lr

080a4c6e <_ZN9USBSerial4readEv>:
{
 80a4c6e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a4c70:	2100      	movs	r1, #0
 80a4c72:	7c00      	ldrb	r0, [r0, #16]
 80a4c74:	f7fe fd68 	bl	80a3748 <HAL_USB_USART_Receive_Data>
}
 80a4c78:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a4c7c:	bd08      	pop	{r3, pc}

080a4c7e <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
 80a4c7e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a4c80:	2101      	movs	r1, #1
 80a4c82:	7c00      	ldrb	r0, [r0, #16]
 80a4c84:	f7fe fd60 	bl	80a3748 <HAL_USB_USART_Receive_Data>
}
 80a4c88:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a4c8c:	bd08      	pop	{r3, pc}

080a4c8e <_ZN9USBSerial17availableForWriteEv>:
{
 80a4c8e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a4c90:	7c00      	ldrb	r0, [r0, #16]
 80a4c92:	f7fe fd51 	bl	80a3738 <HAL_USB_USART_Available_Data_For_Write>
}
 80a4c96:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a4c9a:	bd08      	pop	{r3, pc}

080a4c9c <_ZN9USBSerial9availableEv>:
{
 80a4c9c:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a4c9e:	7c00      	ldrb	r0, [r0, #16]
 80a4ca0:	f7fe fd42 	bl	80a3728 <HAL_USB_USART_Available_Data>
}
 80a4ca4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a4ca8:	bd08      	pop	{r3, pc}

080a4caa <_ZN9USBSerial5writeEh>:
{
 80a4caa:	b538      	push	{r3, r4, r5, lr}
 80a4cac:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a4cae:	7c00      	ldrb	r0, [r0, #16]
{
 80a4cb0:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a4cb2:	f7fe fd41 	bl	80a3738 <HAL_USB_USART_Available_Data_For_Write>
 80a4cb6:	2800      	cmp	r0, #0
 80a4cb8:	dc01      	bgt.n	80a4cbe <_ZN9USBSerial5writeEh+0x14>
 80a4cba:	7c60      	ldrb	r0, [r4, #17]
 80a4cbc:	b128      	cbz	r0, 80a4cca <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a4cbe:	4629      	mov	r1, r5
 80a4cc0:	7c20      	ldrb	r0, [r4, #16]
 80a4cc2:	f7fe fd49 	bl	80a3758 <HAL_USB_USART_Send_Data>
 80a4cc6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 80a4cca:	bd38      	pop	{r3, r4, r5, pc}

080a4ccc <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 80a4ccc:	7c00      	ldrb	r0, [r0, #16]
 80a4cce:	f7fe bd4b 	b.w	80a3768 <HAL_USB_USART_Flush_Data>

080a4cd2 <_ZN9USBSerialD0Ev>:
 80a4cd2:	b510      	push	{r4, lr}
 80a4cd4:	4604      	mov	r4, r0
 80a4cd6:	2114      	movs	r1, #20
 80a4cd8:	f000 fbb3 	bl	80a5442 <_ZdlPvj>
 80a4cdc:	4620      	mov	r0, r4
 80a4cde:	bd10      	pop	{r4, pc}

080a4ce0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a4ce0:	b510      	push	{r4, lr}
 80a4ce2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a4ce6:	4604      	mov	r4, r0
 80a4ce8:	4608      	mov	r0, r1
 80a4cea:	2100      	movs	r1, #0
 80a4cec:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a4cf0:	4b04      	ldr	r3, [pc, #16]	; (80a4d04 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 80a4cf2:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a4cf4:	6023      	str	r3, [r4, #0]
  _blocking = true;
 80a4cf6:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 80a4cf8:	4611      	mov	r1, r2
  _blocking = true;
 80a4cfa:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 80a4cfc:	f7fe fd04 	bl	80a3708 <HAL_USB_USART_Init>
}
 80a4d00:	4620      	mov	r0, r4
 80a4d02:	bd10      	pop	{r4, pc}
 80a4d04:	080a8780 	.word	0x080a8780

080a4d08 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a4d08:	2200      	movs	r2, #0
 80a4d0a:	7c00      	ldrb	r0, [r0, #16]
 80a4d0c:	f7fe bd04 	b.w	80a3718 <HAL_USB_USART_Begin>

080a4d10 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a4d10:	b510      	push	{r4, lr}
 80a4d12:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a4d14:	2214      	movs	r2, #20
 80a4d16:	2100      	movs	r1, #0
 80a4d18:	f001 ff3e 	bl	80a6b98 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a4d1c:	4620      	mov	r0, r4
 80a4d1e:	bd10      	pop	{r4, pc}

080a4d20 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a4d20:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a4d22:	4d0f      	ldr	r5, [pc, #60]	; (80a4d60 <_Z16_fetch_usbserialv+0x40>)
{
 80a4d24:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a4d26:	a801      	add	r0, sp, #4
 80a4d28:	f7ff fff2 	bl	80a4d10 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a4d2c:	7829      	ldrb	r1, [r5, #0]
 80a4d2e:	f3bf 8f5b 	dmb	ish
 80a4d32:	f011 0401 	ands.w	r4, r1, #1
 80a4d36:	d110      	bne.n	80a4d5a <_Z16_fetch_usbserialv+0x3a>
 80a4d38:	4628      	mov	r0, r5
 80a4d3a:	f7fb f9b4 	bl	80a00a6 <__cxa_guard_acquire>
 80a4d3e:	b160      	cbz	r0, 80a4d5a <_Z16_fetch_usbserialv+0x3a>
 80a4d40:	4621      	mov	r1, r4
 80a4d42:	aa01      	add	r2, sp, #4
 80a4d44:	4807      	ldr	r0, [pc, #28]	; (80a4d64 <_Z16_fetch_usbserialv+0x44>)
 80a4d46:	f7ff ffcb 	bl	80a4ce0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a4d4a:	4628      	mov	r0, r5
 80a4d4c:	f7fb f9b0 	bl	80a00b0 <__cxa_guard_release>
 80a4d50:	4a05      	ldr	r2, [pc, #20]	; (80a4d68 <_Z16_fetch_usbserialv+0x48>)
 80a4d52:	4906      	ldr	r1, [pc, #24]	; (80a4d6c <_Z16_fetch_usbserialv+0x4c>)
 80a4d54:	4803      	ldr	r0, [pc, #12]	; (80a4d64 <_Z16_fetch_usbserialv+0x44>)
 80a4d56:	f000 fb6f 	bl	80a5438 <__aeabi_atexit>
	return _usbserial;
}
 80a4d5a:	4802      	ldr	r0, [pc, #8]	; (80a4d64 <_Z16_fetch_usbserialv+0x44>)
 80a4d5c:	b007      	add	sp, #28
 80a4d5e:	bd30      	pop	{r4, r5, pc}
 80a4d60:	200005a0 	.word	0x200005a0
 80a4d64:	200005a8 	.word	0x200005a8
 80a4d68:	20000240 	.word	0x20000240
 80a4d6c:	080a4c6d 	.word	0x080a4c6d

080a4d70 <_Z23acquireUSBSerial1Bufferv>:
 80a4d70:	b510      	push	{r4, lr}
 80a4d72:	4604      	mov	r4, r0
 80a4d74:	2214      	movs	r2, #20
 80a4d76:	2100      	movs	r1, #0
 80a4d78:	f001 ff0e 	bl	80a6b98 <memset>
 80a4d7c:	4620      	mov	r0, r4
 80a4d7e:	bd10      	pop	{r4, pc}

080a4d80 <_Z17_fetch_usbserial1v>:

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a4d80:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a4d82:	4c0f      	ldr	r4, [pc, #60]	; (80a4dc0 <_Z17_fetch_usbserial1v+0x40>)
{
 80a4d84:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a4d86:	a801      	add	r0, sp, #4
 80a4d88:	f7ff fff2 	bl	80a4d70 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a4d8c:	7823      	ldrb	r3, [r4, #0]
 80a4d8e:	f3bf 8f5b 	dmb	ish
 80a4d92:	07db      	lsls	r3, r3, #31
 80a4d94:	d410      	bmi.n	80a4db8 <_Z17_fetch_usbserial1v+0x38>
 80a4d96:	4620      	mov	r0, r4
 80a4d98:	f7fb f985 	bl	80a00a6 <__cxa_guard_acquire>
 80a4d9c:	b160      	cbz	r0, 80a4db8 <_Z17_fetch_usbserial1v+0x38>
 80a4d9e:	2101      	movs	r1, #1
 80a4da0:	aa01      	add	r2, sp, #4
 80a4da2:	4808      	ldr	r0, [pc, #32]	; (80a4dc4 <_Z17_fetch_usbserial1v+0x44>)
 80a4da4:	f7ff ff9c 	bl	80a4ce0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a4da8:	4620      	mov	r0, r4
 80a4daa:	f7fb f981 	bl	80a00b0 <__cxa_guard_release>
 80a4dae:	4a06      	ldr	r2, [pc, #24]	; (80a4dc8 <_Z17_fetch_usbserial1v+0x48>)
 80a4db0:	4906      	ldr	r1, [pc, #24]	; (80a4dcc <_Z17_fetch_usbserial1v+0x4c>)
 80a4db2:	4804      	ldr	r0, [pc, #16]	; (80a4dc4 <_Z17_fetch_usbserial1v+0x44>)
 80a4db4:	f000 fb40 	bl	80a5438 <__aeabi_atexit>
  return _usbserial1;
}
 80a4db8:	4802      	ldr	r0, [pc, #8]	; (80a4dc4 <_Z17_fetch_usbserial1v+0x44>)
 80a4dba:	b006      	add	sp, #24
 80a4dbc:	bd10      	pop	{r4, pc}
 80a4dbe:	bf00      	nop
 80a4dc0:	200005a4 	.word	0x200005a4
 80a4dc4:	200005bc 	.word	0x200005bc
 80a4dc8:	20000240 	.word	0x20000240
 80a4dcc:	080a4c6d 	.word	0x080a4c6d

080a4dd0 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
 80a4dd0:	4770      	bx	lr

080a4dd2 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a4dd2:	7441      	strb	r1, [r0, #17]
}
 80a4dd4:	4770      	bx	lr

080a4dd6 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 80a4dd6:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 80a4dd8:	7c00      	ldrb	r0, [r0, #16]
 80a4dda:	f7fe fbeb 	bl	80a35b4 <hal_usart_available_data_for_write>
}
 80a4dde:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a4de2:	bd08      	pop	{r3, pc}

080a4de4 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a4de4:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 80a4de6:	7c00      	ldrb	r0, [r0, #16]
 80a4de8:	f7fe fbbc 	bl	80a3564 <hal_usart_available>
}
 80a4dec:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a4df0:	bd08      	pop	{r3, pc}

080a4df2 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a4df2:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 80a4df4:	7c00      	ldrb	r0, [r0, #16]
 80a4df6:	f7fe fbc5 	bl	80a3584 <hal_usart_peek>
}
 80a4dfa:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a4dfe:	bd08      	pop	{r3, pc}

080a4e00 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a4e00:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 80a4e02:	7c00      	ldrb	r0, [r0, #16]
 80a4e04:	f7fe fbb6 	bl	80a3574 <hal_usart_read>
}
 80a4e08:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a4e0c:	bd08      	pop	{r3, pc}

080a4e0e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 80a4e0e:	7c00      	ldrb	r0, [r0, #16]
 80a4e10:	f7fe bbc0 	b.w	80a3594 <hal_usart_flush>

080a4e14 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a4e14:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a4e16:	7c46      	ldrb	r6, [r0, #17]
{
 80a4e18:	4604      	mov	r4, r0
 80a4e1a:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a4e1c:	b12e      	cbz	r6, 80a4e2a <_ZN11USARTSerial5writeEh+0x16>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 80a4e1e:	4629      	mov	r1, r5
 80a4e20:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a4e22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 80a4e26:	f7fe bb95 	b.w	80a3554 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a4e2a:	7c00      	ldrb	r0, [r0, #16]
 80a4e2c:	f7fe fbc2 	bl	80a35b4 <hal_usart_available_data_for_write>
 80a4e30:	2800      	cmp	r0, #0
 80a4e32:	dcf4      	bgt.n	80a4e1e <_ZN11USARTSerial5writeEh+0xa>
}
 80a4e34:	4630      	mov	r0, r6
 80a4e36:	bd70      	pop	{r4, r5, r6, pc}

080a4e38 <_ZN11USARTSerialD0Ev>:
 80a4e38:	b510      	push	{r4, lr}
 80a4e3a:	4604      	mov	r4, r0
 80a4e3c:	2114      	movs	r1, #20
 80a4e3e:	f000 fb00 	bl	80a5442 <_ZdlPvj>
 80a4e42:	4620      	mov	r0, r4
 80a4e44:	bd10      	pop	{r4, pc}
	...

080a4e48 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
 80a4e48:	f04f 0c00 	mov.w	ip, #0
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a4e4c:	b510      	push	{r4, lr}
 80a4e4e:	4604      	mov	r4, r0
 80a4e50:	4608      	mov	r0, r1
 80a4e52:	4611      	mov	r1, r2
 80a4e54:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a4e58:	e9c4 c201 	strd	ip, r2, [r4, #4]
 80a4e5c:	4a04      	ldr	r2, [pc, #16]	; (80a4e70 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
  _serial = serial;
 80a4e5e:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a4e60:	6022      	str	r2, [r4, #0]
  _blocking = true;
 80a4e62:	2201      	movs	r2, #1
 80a4e64:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
 80a4e66:	461a      	mov	r2, r3
 80a4e68:	f7fe fb6c 	bl	80a3544 <hal_usart_init>
}
 80a4e6c:	4620      	mov	r0, r4
 80a4e6e:	bd10      	pop	{r4, pc}
 80a4e70:	080a87b0 	.word	0x080a87b0

080a4e74 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
 80a4e74:	2300      	movs	r3, #0
 80a4e76:	7c00      	ldrb	r0, [r0, #16]
 80a4e78:	f7fe bba4 	b.w	80a35c4 <hal_usart_begin_config>

080a4e7c <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
 80a4e7c:	2200      	movs	r2, #0
 80a4e7e:	f7ff bff9 	b.w	80a4e74 <_ZN11USARTSerial5beginEmm>
	...

080a4e84 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a4e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
#else
  if (!serial1_rx_buffer) {
 80a4e86:	4c1a      	ldr	r4, [pc, #104]	; (80a4ef0 <_Z22__fetch_global_Serial1v+0x6c>)
 80a4e88:	6826      	ldr	r6, [r4, #0]
 80a4e8a:	b94e      	cbnz	r6, 80a4ea0 <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new hal_usart_ring_buffer_t();
 80a4e8c:	2084      	movs	r0, #132	; 0x84
 80a4e8e:	f7fb f902 	bl	80a0096 <_Znwj>
 80a4e92:	4605      	mov	r5, r0
 80a4e94:	b118      	cbz	r0, 80a4e9e <_Z22__fetch_global_Serial1v+0x1a>
 80a4e96:	2284      	movs	r2, #132	; 0x84
 80a4e98:	4631      	mov	r1, r6
 80a4e9a:	f001 fe7d 	bl	80a6b98 <memset>
 80a4e9e:	6025      	str	r5, [r4, #0]
  }
  if (!serial1_tx_buffer) {
 80a4ea0:	4d14      	ldr	r5, [pc, #80]	; (80a4ef4 <_Z22__fetch_global_Serial1v+0x70>)
 80a4ea2:	682f      	ldr	r7, [r5, #0]
 80a4ea4:	b94f      	cbnz	r7, 80a4eba <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
 80a4ea6:	2084      	movs	r0, #132	; 0x84
 80a4ea8:	f7fb f8f5 	bl	80a0096 <_Znwj>
 80a4eac:	4606      	mov	r6, r0
 80a4eae:	b118      	cbz	r0, 80a4eb8 <_Z22__fetch_global_Serial1v+0x34>
 80a4eb0:	2284      	movs	r2, #132	; 0x84
 80a4eb2:	4639      	mov	r1, r7
 80a4eb4:	f001 fe70 	bl	80a6b98 <memset>
 80a4eb8:	602e      	str	r6, [r5, #0]
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
 80a4eba:	4f0f      	ldr	r7, [pc, #60]	; (80a4ef8 <_Z22__fetch_global_Serial1v+0x74>)
 80a4ebc:	7839      	ldrb	r1, [r7, #0]
 80a4ebe:	f3bf 8f5b 	dmb	ish
 80a4ec2:	f011 0601 	ands.w	r6, r1, #1
 80a4ec6:	d111      	bne.n	80a4eec <_Z22__fetch_global_Serial1v+0x68>
 80a4ec8:	4638      	mov	r0, r7
 80a4eca:	f7fb f8ec 	bl	80a00a6 <__cxa_guard_acquire>
 80a4ece:	b168      	cbz	r0, 80a4eec <_Z22__fetch_global_Serial1v+0x68>
 80a4ed0:	4631      	mov	r1, r6
 80a4ed2:	6822      	ldr	r2, [r4, #0]
 80a4ed4:	682b      	ldr	r3, [r5, #0]
 80a4ed6:	4809      	ldr	r0, [pc, #36]	; (80a4efc <_Z22__fetch_global_Serial1v+0x78>)
 80a4ed8:	f7ff ffb6 	bl	80a4e48 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
 80a4edc:	4638      	mov	r0, r7
 80a4ede:	f7fb f8e7 	bl	80a00b0 <__cxa_guard_release>
 80a4ee2:	4a07      	ldr	r2, [pc, #28]	; (80a4f00 <_Z22__fetch_global_Serial1v+0x7c>)
 80a4ee4:	4907      	ldr	r1, [pc, #28]	; (80a4f04 <_Z22__fetch_global_Serial1v+0x80>)
 80a4ee6:	4805      	ldr	r0, [pc, #20]	; (80a4efc <_Z22__fetch_global_Serial1v+0x78>)
 80a4ee8:	f000 faa6 	bl	80a5438 <__aeabi_atexit>
#endif
	return serial1;
}
 80a4eec:	4803      	ldr	r0, [pc, #12]	; (80a4efc <_Z22__fetch_global_Serial1v+0x78>)
 80a4eee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a4ef0:	200005d4 	.word	0x200005d4
 80a4ef4:	200005d8 	.word	0x200005d8
 80a4ef8:	200005d0 	.word	0x200005d0
 80a4efc:	200005dc 	.word	0x200005dc
 80a4f00:	20000240 	.word	0x20000240
 80a4f04:	080a4dd1 	.word	0x080a4dd1

080a4f08 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 80a4f08:	4770      	bx	lr

080a4f0a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a4f0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a4f0c:	4606      	mov	r6, r0
 80a4f0e:	4615      	mov	r5, r2
 80a4f10:	460c      	mov	r4, r1
 80a4f12:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a4f14:	42bc      	cmp	r4, r7
 80a4f16:	d006      	beq.n	80a4f26 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a4f18:	6833      	ldr	r3, [r6, #0]
 80a4f1a:	4630      	mov	r0, r6
 80a4f1c:	689b      	ldr	r3, [r3, #8]
 80a4f1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a4f22:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 80a4f24:	e7f6      	b.n	80a4f14 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 80a4f26:	4628      	mov	r0, r5
 80a4f28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a4f2a <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 80a4f2a:	2200      	movs	r2, #0
 80a4f2c:	7c00      	ldrb	r0, [r0, #16]
 80a4f2e:	f7fe bb51 	b.w	80a35d4 <hal_i2c_write>

080a4f32 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 80a4f32:	2100      	movs	r1, #0
 80a4f34:	7c00      	ldrb	r0, [r0, #16]
 80a4f36:	f7fe bb55 	b.w	80a35e4 <hal_i2c_available>

080a4f3a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 80a4f3a:	2100      	movs	r1, #0
 80a4f3c:	7c00      	ldrb	r0, [r0, #16]
 80a4f3e:	f7fe bb59 	b.w	80a35f4 <hal_i2c_read>

080a4f42 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 80a4f42:	2100      	movs	r1, #0
 80a4f44:	7c00      	ldrb	r0, [r0, #16]
 80a4f46:	f7fe bb5d 	b.w	80a3604 <hal_i2c_peek>

080a4f4a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 80a4f4a:	2100      	movs	r1, #0
 80a4f4c:	7c00      	ldrb	r0, [r0, #16]
 80a4f4e:	f7fe bb61 	b.w	80a3614 <hal_i2c_flush>

080a4f52 <_ZN7TwoWireD0Ev>:
 80a4f52:	b510      	push	{r4, lr}
 80a4f54:	4604      	mov	r4, r0
 80a4f56:	2114      	movs	r1, #20
 80a4f58:	f000 fa73 	bl	80a5442 <_ZdlPvj>
 80a4f5c:	4620      	mov	r0, r4
 80a4f5e:	bd10      	pop	{r4, pc}

080a4f60 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a4f60:	b510      	push	{r4, lr}
 80a4f62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a4f66:	4604      	mov	r4, r0
 80a4f68:	4608      	mov	r0, r1
 80a4f6a:	2100      	movs	r1, #0
 80a4f6c:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a4f70:	4b03      	ldr	r3, [pc, #12]	; (80a4f80 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
  hal_i2c_init(_i2c, &conf);
 80a4f72:	4611      	mov	r1, r2
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a4f74:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
 80a4f76:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
 80a4f78:	f7fe fb5c 	bl	80a3634 <hal_i2c_init>
}
 80a4f7c:	4620      	mov	r0, r4
 80a4f7e:	bd10      	pop	{r4, pc}
 80a4f80:	080a87e0 	.word	0x080a87e0

080a4f84 <_ZN10WiFiSignalD1Ev>:
    virtual ~WiFiSignal() {};
 80a4f84:	4770      	bx	lr

080a4f86 <_ZNK10WiFiSignal19getAccessTechnologyEv>:
    return true;
}

hal_net_access_tech_t WiFiSignal::getAccessTechnology() const {
    return NET_ACCESS_TECHNOLOGY_WIFI;
}
 80a4f86:	2001      	movs	r0, #1
 80a4f88:	4770      	bx	lr

080a4f8a <_ZN5spark9WiFiClass5readyEv>:
        return network_ready(*this, 0, NULL);
 80a4f8a:	2200      	movs	r2, #0
 80a4f8c:	6840      	ldr	r0, [r0, #4]
 80a4f8e:	4611      	mov	r1, r2
 80a4f90:	f7fe bc70 	b.w	80a3874 <network_ready>

080a4f94 <_ZN10WiFiSignalD0Ev>:
    virtual ~WiFiSignal() {};
 80a4f94:	b510      	push	{r4, lr}
 80a4f96:	4604      	mov	r4, r0
 80a4f98:	2124      	movs	r1, #36	; 0x24
 80a4f9a:	f000 fa52 	bl	80a5442 <_ZdlPvj>
 80a4f9e:	4620      	mov	r0, r4
 80a4fa0:	bd10      	pop	{r4, pc}

080a4fa2 <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a4fa2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a4fa4:	4615      	mov	r5, r2
 80a4fa6:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a4fa8:	2211      	movs	r2, #17
    IPAddress resolve(const char* name)
 80a4faa:	460e      	mov	r6, r1
 80a4fac:	4604      	mov	r4, r0
        HAL_IPAddress ip = {};
 80a4fae:	2100      	movs	r1, #0
 80a4fb0:	a803      	add	r0, sp, #12
 80a4fb2:	f001 fdf1 	bl	80a6b98 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a4fb6:	4628      	mov	r0, r5
 80a4fb8:	f002 fb8e 	bl	80a76d8 <strlen>
 80a4fbc:	2700      	movs	r7, #0
 80a4fbe:	b281      	uxth	r1, r0
 80a4fc0:	6873      	ldr	r3, [r6, #4]
 80a4fc2:	4628      	mov	r0, r5
 80a4fc4:	9700      	str	r7, [sp, #0]
 80a4fc6:	aa03      	add	r2, sp, #12
 80a4fc8:	f7fe fbde 	bl	80a3788 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a4fcc:	b130      	cbz	r0, 80a4fdc <_ZN5spark9WiFiClass7resolveEPKc+0x3a>
 80a4fce:	4639      	mov	r1, r7
 80a4fd0:	4620      	mov	r0, r4
 80a4fd2:	f7ff fe13 	bl	80a4bfc <_ZN9IPAddressC1Em>
    }
 80a4fd6:	4620      	mov	r0, r4
 80a4fd8:	b009      	add	sp, #36	; 0x24
 80a4fda:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a4fdc:	4620      	mov	r0, r4
 80a4fde:	a903      	add	r1, sp, #12
 80a4fe0:	f7ff fdfa 	bl	80a4bd8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 80a4fe4:	e7f7      	b.n	80a4fd6 <_ZN5spark9WiFiClass7resolveEPKc+0x34>

080a4fe6 <_ZN5spark9WiFiClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 80a4fe6:	2200      	movs	r2, #0
 80a4fe8:	6840      	ldr	r0, [r0, #4]
 80a4fea:	4611      	mov	r1, r2
 80a4fec:	f7fe bc62 	b.w	80a38b4 <network_listening>

080a4ff0 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 80a4ff0:	2200      	movs	r2, #0
 80a4ff2:	6840      	ldr	r0, [r0, #4]
 80a4ff4:	4611      	mov	r1, r2
 80a4ff6:	f7fe bc6d 	b.w	80a38d4 <network_get_listen_timeout>

080a4ffa <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 80a4ffa:	2200      	movs	r2, #0
 80a4ffc:	6840      	ldr	r0, [r0, #4]
 80a4ffe:	f7fe bc61 	b.w	80a38c4 <network_set_listen_timeout>

080a5002 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 80a5002:	2200      	movs	r2, #0
 80a5004:	6840      	ldr	r0, [r0, #4]
 80a5006:	f081 0101 	eor.w	r1, r1, #1
 80a500a:	f7fe bc4b 	b.w	80a38a4 <network_listen>

080a500e <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 80a500e:	2300      	movs	r3, #0
 80a5010:	6840      	ldr	r0, [r0, #4]
 80a5012:	461a      	mov	r2, r3
 80a5014:	4619      	mov	r1, r3
 80a5016:	f7fe bc3d 	b.w	80a3894 <network_off>

080a501a <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 80a501a:	2200      	movs	r2, #0
 80a501c:	6840      	ldr	r0, [r0, #4]
 80a501e:	4611      	mov	r1, r2
 80a5020:	f7fe bc18 	b.w	80a3854 <network_connecting>

080a5024 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a5024:	2200      	movs	r2, #0
 80a5026:	2102      	movs	r1, #2
 80a5028:	6840      	ldr	r0, [r0, #4]
 80a502a:	f7fe bc1b 	b.w	80a3864 <network_disconnect>

080a502e <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 80a502e:	2300      	movs	r3, #0
 80a5030:	6840      	ldr	r0, [r0, #4]
 80a5032:	461a      	mov	r2, r3
 80a5034:	f7fe bc06 	b.w	80a3844 <network_connect>

080a5038 <_ZNK10WiFiSignal11getStrengthEv>:

float WiFiSignal::getStrength() const {
 80a5038:	b508      	push	{r3, lr}
    if (inf_.size != 0 && inf_.strength >= 0) {
 80a503a:	8983      	ldrh	r3, [r0, #12]
 80a503c:	b15b      	cbz	r3, 80a5056 <_ZNK10WiFiSignal11getStrengthEv+0x1e>
 80a503e:	6940      	ldr	r0, [r0, #20]
 80a5040:	2800      	cmp	r0, #0
 80a5042:	db08      	blt.n	80a5056 <_ZNK10WiFiSignal11getStrengthEv+0x1e>
        return inf_.strength / 65535.0f * 100.0f;
 80a5044:	f001 f884 	bl	80a6150 <__aeabi_i2f>
 80a5048:	4904      	ldr	r1, [pc, #16]	; (80a505c <_ZNK10WiFiSignal11getStrengthEv+0x24>)
 80a504a:	f001 f989 	bl	80a6360 <__aeabi_fdiv>
 80a504e:	4904      	ldr	r1, [pc, #16]	; (80a5060 <_ZNK10WiFiSignal11getStrengthEv+0x28>)
 80a5050:	f001 f8d2 	bl	80a61f8 <__aeabi_fmul>
    }
    return -1.0f;
}
 80a5054:	bd08      	pop	{r3, pc}
    return -1.0f;
 80a5056:	4803      	ldr	r0, [pc, #12]	; (80a5064 <_ZNK10WiFiSignal11getStrengthEv+0x2c>)
 80a5058:	e7fc      	b.n	80a5054 <_ZNK10WiFiSignal11getStrengthEv+0x1c>
 80a505a:	bf00      	nop
 80a505c:	477fff00 	.word	0x477fff00
 80a5060:	42c80000 	.word	0x42c80000
 80a5064:	bf800000 	.word	0xbf800000

080a5068 <_ZNK10WiFiSignal16getStrengthValueEv>:

float WiFiSignal::getStrengthValue() const {
 80a5068:	b508      	push	{r3, lr}
    if (inf_.size != 0 && inf_.rssi != std::numeric_limits<int32_t>::min()) {
 80a506a:	8983      	ldrh	r3, [r0, #12]
 80a506c:	b14b      	cbz	r3, 80a5082 <_ZNK10WiFiSignal16getStrengthValueEv+0x1a>
 80a506e:	6900      	ldr	r0, [r0, #16]
 80a5070:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 80a5074:	d005      	beq.n	80a5082 <_ZNK10WiFiSignal16getStrengthValueEv+0x1a>
        return inf_.rssi / 100.0f;
 80a5076:	f001 f86b 	bl	80a6150 <__aeabi_i2f>
 80a507a:	4903      	ldr	r1, [pc, #12]	; (80a5088 <_ZNK10WiFiSignal16getStrengthValueEv+0x20>)
 80a507c:	f001 f970 	bl	80a6360 <__aeabi_fdiv>
    }
    return 0.0f;
}
 80a5080:	bd08      	pop	{r3, pc}
    return 0.0f;
 80a5082:	2000      	movs	r0, #0
 80a5084:	e7fc      	b.n	80a5080 <_ZNK10WiFiSignal16getStrengthValueEv+0x18>
 80a5086:	bf00      	nop
 80a5088:	42c80000 	.word	0x42c80000

080a508c <_ZNK10WiFiSignal10getQualityEv>:

float WiFiSignal::getQuality() const {
 80a508c:	b508      	push	{r3, lr}
    if (inf_.size != 0 && inf_.quality >= 0) {
 80a508e:	8983      	ldrh	r3, [r0, #12]
 80a5090:	b15b      	cbz	r3, 80a50aa <_ZNK10WiFiSignal10getQualityEv+0x1e>
 80a5092:	6a00      	ldr	r0, [r0, #32]
 80a5094:	2800      	cmp	r0, #0
 80a5096:	db08      	blt.n	80a50aa <_ZNK10WiFiSignal10getQualityEv+0x1e>
        return inf_.quality / 65535.0f * 100.0f;
 80a5098:	f001 f85a 	bl	80a6150 <__aeabi_i2f>
 80a509c:	4904      	ldr	r1, [pc, #16]	; (80a50b0 <_ZNK10WiFiSignal10getQualityEv+0x24>)
 80a509e:	f001 f95f 	bl	80a6360 <__aeabi_fdiv>
 80a50a2:	4904      	ldr	r1, [pc, #16]	; (80a50b4 <_ZNK10WiFiSignal10getQualityEv+0x28>)
 80a50a4:	f001 f8a8 	bl	80a61f8 <__aeabi_fmul>
    }
    return -1.0f;
}
 80a50a8:	bd08      	pop	{r3, pc}
    return -1.0f;
 80a50aa:	4803      	ldr	r0, [pc, #12]	; (80a50b8 <_ZNK10WiFiSignal10getQualityEv+0x2c>)
 80a50ac:	e7fc      	b.n	80a50a8 <_ZNK10WiFiSignal10getQualityEv+0x1c>
 80a50ae:	bf00      	nop
 80a50b0:	477fff00 	.word	0x477fff00
 80a50b4:	42c80000 	.word	0x42c80000
 80a50b8:	bf800000 	.word	0xbf800000

080a50bc <_ZNK10WiFiSignal15getQualityValueEv>:

float WiFiSignal::getQualityValue() const {
 80a50bc:	b508      	push	{r3, lr}
    if (inf_.size != 0 && inf_.snr != std::numeric_limits<int32_t>::min()) {
 80a50be:	8983      	ldrh	r3, [r0, #12]
 80a50c0:	b14b      	cbz	r3, 80a50d6 <_ZNK10WiFiSignal15getQualityValueEv+0x1a>
 80a50c2:	6980      	ldr	r0, [r0, #24]
 80a50c4:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 80a50c8:	d005      	beq.n	80a50d6 <_ZNK10WiFiSignal15getQualityValueEv+0x1a>
        return inf_.snr / 100.0f;
 80a50ca:	f001 f841 	bl	80a6150 <__aeabi_i2f>
 80a50ce:	4903      	ldr	r1, [pc, #12]	; (80a50dc <_ZNK10WiFiSignal15getQualityValueEv+0x20>)
 80a50d0:	f001 f946 	bl	80a6360 <__aeabi_fdiv>
    }
    return 0.0f;
}
 80a50d4:	bd08      	pop	{r3, pc}
    return 0.0f;
 80a50d6:	2000      	movs	r0, #0
 80a50d8:	e7fc      	b.n	80a50d4 <_ZNK10WiFiSignal15getQualityValueEv+0x18>
 80a50da:	bf00      	nop
 80a50dc:	42c80000 	.word	0x42c80000

080a50e0 <_ZNK10WiFiSignalcvaEv>:
}
 80a50e0:	f990 0004 	ldrsb.w	r0, [r0, #4]
 80a50e4:	4770      	bx	lr

080a50e6 <_ZN10WiFiSignal17fromConnectedInfoERK21wlan_connected_info_t>:
bool WiFiSignal::fromConnectedInfo(const wlan_connected_info_t& inf) {
 80a50e6:	b570      	push	{r4, r5, r6, lr}
    inf_ = inf;
 80a50e8:	460c      	mov	r4, r1
bool WiFiSignal::fromConnectedInfo(const wlan_connected_info_t& inf) {
 80a50ea:	4606      	mov	r6, r0
    inf_ = inf;
 80a50ec:	f100 050c 	add.w	r5, r0, #12
 80a50f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a50f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a50f4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80a50f8:	e885 0003 	stmia.w	r5, {r0, r1}
    this->rssi = inf_.rssi != std::numeric_limits<int32_t>::min() ? inf_.rssi / 100 : 2;
 80a50fc:	6933      	ldr	r3, [r6, #16]
}
 80a50fe:	2001      	movs	r0, #1
    this->rssi = inf_.rssi != std::numeric_limits<int32_t>::min() ? inf_.rssi / 100 : 2;
 80a5100:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a5104:	bf16      	itet	ne
 80a5106:	2264      	movne	r2, #100	; 0x64
 80a5108:	2302      	moveq	r3, #2
 80a510a:	fb93 f3f2 	sdivne	r3, r3, r2
 80a510e:	6073      	str	r3, [r6, #4]
    this->qual = inf_.snr != std::numeric_limits<int32_t>::min() ? inf_.snr / 100 : 0;
 80a5110:	69b3      	ldr	r3, [r6, #24]
 80a5112:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a5116:	bf16      	itet	ne
 80a5118:	2264      	movne	r2, #100	; 0x64
 80a511a:	2300      	moveq	r3, #0
 80a511c:	fb93 f3f2 	sdivne	r3, r3, r2
 80a5120:	60b3      	str	r3, [r6, #8]
}
 80a5122:	bd70      	pop	{r4, r5, r6, pc}

080a5124 <_ZN5spark9WiFiClass4RSSIEv>:
    int WiFiClass::getCredentials(WiFiAccessPoint* results, size_t result_count) {
        APList apList(results, result_count);
        return apList.start();
    }

    WiFiSignal WiFiClass::RSSI() {
 80a5124:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    WiFiSignal() {}
 80a5128:	2500      	movs	r5, #0
 80a512a:	f04f 0802 	mov.w	r8, #2
 80a512e:	2618      	movs	r6, #24
 80a5130:	460f      	mov	r7, r1
 80a5132:	4b14      	ldr	r3, [pc, #80]	; (80a5184 <_ZN5spark9WiFiClass4RSSIEv+0x60>)
 80a5134:	4632      	mov	r2, r6
 80a5136:	4629      	mov	r1, r5
 80a5138:	e9c0 8501 	strd	r8, r5, [r0, #4]
 80a513c:	b086      	sub	sp, #24
 80a513e:	6003      	str	r3, [r0, #0]
 80a5140:	4604      	mov	r4, r0
 80a5142:	300c      	adds	r0, #12
 80a5144:	f001 fd28 	bl	80a6b98 <memset>
        WiFiSignal sig;
        if (!network_ready(*this, 0, NULL)) {
 80a5148:	462a      	mov	r2, r5
 80a514a:	4629      	mov	r1, r5
 80a514c:	6878      	ldr	r0, [r7, #4]
 80a514e:	f7fe fb91 	bl	80a3874 <network_ready>
 80a5152:	b180      	cbz	r0, 80a5176 <_ZN5spark9WiFiClass4RSSIEv+0x52>
            return sig;
        }

        wlan_connected_info_t info = {0};
 80a5154:	4632      	mov	r2, r6
 80a5156:	4629      	mov	r1, r5
 80a5158:	4668      	mov	r0, sp
 80a515a:	f001 fd1d 	bl	80a6b98 <memset>
        info.size = sizeof(info);
        int r = wlan_connected_info(nullptr, &info, nullptr);
 80a515e:	462a      	mov	r2, r5
 80a5160:	4669      	mov	r1, sp
 80a5162:	4628      	mov	r0, r5
        info.size = sizeof(info);
 80a5164:	f8ad 6000 	strh.w	r6, [sp]
        int r = wlan_connected_info(nullptr, &info, nullptr);
 80a5168:	f7fe fb1e 	bl	80a37a8 <wlan_connected_info>
        if (r == 0) {
 80a516c:	b938      	cbnz	r0, 80a517e <_ZN5spark9WiFiClass4RSSIEv+0x5a>
            sig.fromConnectedInfo(info);
 80a516e:	4669      	mov	r1, sp
 80a5170:	4620      	mov	r0, r4
 80a5172:	f7ff ffb8 	bl	80a50e6 <_ZN10WiFiSignal17fromConnectedInfoERK21wlan_connected_info_t>
            return sig;
        }

        sig.rssi = 2;
        return sig;
    }
 80a5176:	4620      	mov	r0, r4
 80a5178:	b006      	add	sp, #24
 80a517a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        sig.rssi = 2;
 80a517e:	f8c4 8004 	str.w	r8, [r4, #4]
        return sig;
 80a5182:	e7f8      	b.n	80a5176 <_ZN5spark9WiFiClass4RSSIEv+0x52>
 80a5184:	080a883c 	.word	0x080a883c

080a5188 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a5188:	2204      	movs	r2, #4
 80a518a:	4b02      	ldr	r3, [pc, #8]	; (80a5194 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a518c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a518e:	4a02      	ldr	r2, [pc, #8]	; (80a5198 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a5190:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 80a5192:	4770      	bx	lr
 80a5194:	200005f0 	.word	0x200005f0
 80a5198:	080a8808 	.word	0x080a8808

080a519c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a519c:	2300      	movs	r3, #0
 80a519e:	6840      	ldr	r0, [r0, #4]
 80a51a0:	461a      	mov	r2, r3
 80a51a2:	f7fe bb4f 	b.w	80a3844 <network_connect>

080a51a6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a51a6:	2200      	movs	r2, #0
 80a51a8:	2102      	movs	r1, #2
 80a51aa:	6840      	ldr	r0, [r0, #4]
 80a51ac:	f7fe bb5a 	b.w	80a3864 <network_disconnect>

080a51b0 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a51b0:	2200      	movs	r2, #0
 80a51b2:	6840      	ldr	r0, [r0, #4]
 80a51b4:	4611      	mov	r1, r2
 80a51b6:	f7fe bb4d 	b.w	80a3854 <network_connecting>

080a51ba <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a51ba:	2200      	movs	r2, #0
 80a51bc:	6840      	ldr	r0, [r0, #4]
 80a51be:	4611      	mov	r1, r2
 80a51c0:	f7fe bb58 	b.w	80a3874 <network_ready>

080a51c4 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a51c4:	2300      	movs	r3, #0
 80a51c6:	6840      	ldr	r0, [r0, #4]
 80a51c8:	461a      	mov	r2, r3
 80a51ca:	4619      	mov	r1, r3
 80a51cc:	f7fe bb5a 	b.w	80a3884 <network_on>

080a51d0 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a51d0:	2300      	movs	r3, #0
 80a51d2:	6840      	ldr	r0, [r0, #4]
 80a51d4:	461a      	mov	r2, r3
 80a51d6:	4619      	mov	r1, r3
 80a51d8:	f7fe bb5c 	b.w	80a3894 <network_off>

080a51dc <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a51dc:	2200      	movs	r2, #0
 80a51de:	6840      	ldr	r0, [r0, #4]
 80a51e0:	f081 0101 	eor.w	r1, r1, #1
 80a51e4:	f7fe bb5e 	b.w	80a38a4 <network_listen>

080a51e8 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a51e8:	2200      	movs	r2, #0
 80a51ea:	6840      	ldr	r0, [r0, #4]
 80a51ec:	f7fe bb6a 	b.w	80a38c4 <network_set_listen_timeout>

080a51f0 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a51f0:	2200      	movs	r2, #0
 80a51f2:	6840      	ldr	r0, [r0, #4]
 80a51f4:	4611      	mov	r1, r2
 80a51f6:	f7fe bb6d 	b.w	80a38d4 <network_get_listen_timeout>

080a51fa <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a51fa:	2200      	movs	r2, #0
 80a51fc:	6840      	ldr	r0, [r0, #4]
 80a51fe:	4611      	mov	r1, r2
 80a5200:	f7fe bb58 	b.w	80a38b4 <network_listening>

080a5204 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a5204:	b570      	push	{r4, r5, r6, lr}
 80a5206:	4615      	mov	r5, r2
 80a5208:	b08e      	sub	sp, #56	; 0x38
 80a520a:	4604      	mov	r4, r0
    IPAddress addr;
 80a520c:	a808      	add	r0, sp, #32
 80a520e:	f7ff fcd5 	bl	80a4bbc <_ZN9IPAddressC1Ev>
        HAL_IPAddress ip = {};
 80a5212:	2211      	movs	r2, #17
 80a5214:	2100      	movs	r1, #0
 80a5216:	a803      	add	r0, sp, #12
 80a5218:	f001 fcbe 	bl	80a6b98 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a521c:	2600      	movs	r6, #0
 80a521e:	4628      	mov	r0, r5
 80a5220:	f002 fa5a 	bl	80a76d8 <strlen>
 80a5224:	4b0a      	ldr	r3, [pc, #40]	; (80a5250 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a5226:	9600      	str	r6, [sp, #0]
 80a5228:	b281      	uxth	r1, r0
 80a522a:	685b      	ldr	r3, [r3, #4]
 80a522c:	4628      	mov	r0, r5
 80a522e:	aa03      	add	r2, sp, #12
 80a5230:	f7fe faaa 	bl	80a3788 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a5234:	b130      	cbz	r0, 80a5244 <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 80a5236:	4631      	mov	r1, r6
 80a5238:	4620      	mov	r0, r4
 80a523a:	f7ff fcdf 	bl	80a4bfc <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a523e:	4620      	mov	r0, r4
 80a5240:	b00e      	add	sp, #56	; 0x38
 80a5242:	bd70      	pop	{r4, r5, r6, pc}
 80a5244:	4620      	mov	r0, r4
 80a5246:	a903      	add	r1, sp, #12
 80a5248:	f7ff fcc6 	bl	80a4bd8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    virtual ~IPAddress() {}
 80a524c:	e7f7      	b.n	80a523e <_ZN5spark12NetworkClass7resolveEPKc+0x3a>
 80a524e:	bf00      	nop
 80a5250:	200005f0 	.word	0x200005f0

080a5254 <_ZN5spark12NetworkClass4fromEm>:
}
 80a5254:	4a03      	ldr	r2, [pc, #12]	; (80a5264 <_ZN5spark12NetworkClass4fromEm+0x10>)
 80a5256:	4b04      	ldr	r3, [pc, #16]	; (80a5268 <_ZN5spark12NetworkClass4fromEm+0x14>)
 80a5258:	2804      	cmp	r0, #4
 80a525a:	bf14      	ite	ne
 80a525c:	4610      	movne	r0, r2
 80a525e:	4618      	moveq	r0, r3
 80a5260:	4770      	bx	lr
 80a5262:	bf00      	nop
 80a5264:	200005f8 	.word	0x200005f8
 80a5268:	200005f0 	.word	0x200005f0

080a526c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80a526c:	4b02      	ldr	r3, [pc, #8]	; (80a5278 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a526e:	4a03      	ldr	r2, [pc, #12]	; (80a527c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a5270:	601a      	str	r2, [r3, #0]
 80a5272:	2200      	movs	r2, #0
 80a5274:	605a      	str	r2, [r3, #4]

} // spark
 80a5276:	4770      	bx	lr
 80a5278:	200005f8 	.word	0x200005f8
 80a527c:	080a8860 	.word	0x080a8860

080a5280 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 80a5280:	2817      	cmp	r0, #23
bool pinAvailable(uint16_t pin) {
 80a5282:	b570      	push	{r4, r5, r6, lr}
 80a5284:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 80a5286:	d901      	bls.n	80a528c <pinAvailable+0xc>
    return false;
 80a5288:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 80a528a:	bd70      	pop	{r4, r5, r6, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a528c:	f1a0 030d 	sub.w	r3, r0, #13
 80a5290:	2b02      	cmp	r3, #2
 80a5292:	d90b      	bls.n	80a52ac <pinAvailable+0x2c>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 80a5294:	2801      	cmp	r0, #1
 80a5296:	d826      	bhi.n	80a52e6 <pinAvailable+0x66>
 80a5298:	f000 f8a6 	bl	80a53e8 <_Z19__fetch_global_Wirev>
 80a529c:	2100      	movs	r1, #0
 80a529e:	7c00      	ldrb	r0, [r0, #16]
 80a52a0:	f7fe f9c0 	bl	80a3624 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a52a4:	f080 0001 	eor.w	r0, r0, #1
 80a52a8:	b2c0      	uxtb	r0, r0
 80a52aa:	e7ee      	b.n	80a528a <pinAvailable+0xa>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a52ac:	4e13      	ldr	r6, [pc, #76]	; (80a52fc <pinAvailable+0x7c>)
 80a52ae:	7831      	ldrb	r1, [r6, #0]
 80a52b0:	f3bf 8f5b 	dmb	ish
 80a52b4:	f011 0501 	ands.w	r5, r1, #1
 80a52b8:	d10f      	bne.n	80a52da <pinAvailable+0x5a>
 80a52ba:	4630      	mov	r0, r6
 80a52bc:	f7fa fef3 	bl	80a00a6 <__cxa_guard_acquire>
 80a52c0:	b158      	cbz	r0, 80a52da <pinAvailable+0x5a>
 80a52c2:	4629      	mov	r1, r5
 80a52c4:	480e      	ldr	r0, [pc, #56]	; (80a5300 <pinAvailable+0x80>)
 80a52c6:	f7fe fba0 	bl	80a3a0a <_ZN8SPIClassC1E19hal_spi_interface_t>
 80a52ca:	4630      	mov	r0, r6
 80a52cc:	f7fa fef0 	bl	80a00b0 <__cxa_guard_release>
 80a52d0:	4a0c      	ldr	r2, [pc, #48]	; (80a5304 <pinAvailable+0x84>)
 80a52d2:	490d      	ldr	r1, [pc, #52]	; (80a5308 <pinAvailable+0x88>)
 80a52d4:	480a      	ldr	r0, [pc, #40]	; (80a5300 <pinAvailable+0x80>)
 80a52d6:	f000 f8af 	bl	80a5438 <__aeabi_atexit>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a52da:	4b09      	ldr	r3, [pc, #36]	; (80a5300 <pinAvailable+0x80>)
 80a52dc:	7818      	ldrb	r0, [r3, #0]
 80a52de:	f7fe fa0b 	bl	80a36f8 <hal_spi_is_enabled>
 80a52e2:	2800      	cmp	r0, #0
 80a52e4:	d1d0      	bne.n	80a5288 <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a52e6:	3c12      	subs	r4, #18
 80a52e8:	2c01      	cmp	r4, #1
 80a52ea:	d805      	bhi.n	80a52f8 <pinAvailable+0x78>
 80a52ec:	f7ff fdca 	bl	80a4e84 <_Z22__fetch_global_Serial1v>
 80a52f0:	7c00      	ldrb	r0, [r0, #16]
 80a52f2:	f7fe f957 	bl	80a35a4 <hal_usart_is_enabled>
 80a52f6:	e7d5      	b.n	80a52a4 <pinAvailable+0x24>
  return true; // 'pin' is available
 80a52f8:	2001      	movs	r0, #1
 80a52fa:	e7c6      	b.n	80a528a <pinAvailable+0xa>
 80a52fc:	20000244 	.word	0x20000244
 80a5300:	20000248 	.word	0x20000248
 80a5304:	20000240 	.word	0x20000240
 80a5308:	080a02cb 	.word	0x080a02cb

080a530c <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a530c:	2817      	cmp	r0, #23
{
 80a530e:	b538      	push	{r3, r4, r5, lr}
 80a5310:	4604      	mov	r4, r0
 80a5312:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a5314:	d80a      	bhi.n	80a532c <pinMode+0x20>
 80a5316:	29ff      	cmp	r1, #255	; 0xff
 80a5318:	d008      	beq.n	80a532c <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 80a531a:	f7ff ffb1 	bl	80a5280 <pinAvailable>
 80a531e:	b128      	cbz	r0, 80a532c <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
 80a5320:	4629      	mov	r1, r5
 80a5322:	4620      	mov	r0, r4
}
 80a5324:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
 80a5328:	f7fe b8ac 	b.w	80a3484 <HAL_Pin_Mode>
}
 80a532c:	bd38      	pop	{r3, r4, r5, pc}

080a532e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a532e:	b538      	push	{r3, r4, r5, lr}
 80a5330:	4604      	mov	r4, r0
 80a5332:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a5334:	f7fe f8ae 	bl	80a3494 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a5338:	28ff      	cmp	r0, #255	; 0xff
 80a533a:	d010      	beq.n	80a535e <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 80a533c:	2806      	cmp	r0, #6
 80a533e:	d804      	bhi.n	80a534a <digitalWrite+0x1c>
 80a5340:	234d      	movs	r3, #77	; 0x4d
 80a5342:	fa23 f000 	lsr.w	r0, r3, r0
 80a5346:	07c3      	lsls	r3, r0, #31
 80a5348:	d409      	bmi.n	80a535e <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a534a:	4620      	mov	r0, r4
 80a534c:	f7ff ff98 	bl	80a5280 <pinAvailable>
 80a5350:	b128      	cbz	r0, 80a535e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a5352:	4629      	mov	r1, r5
 80a5354:	4620      	mov	r0, r4
}
 80a5356:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
 80a535a:	f7fe b8a3 	b.w	80a34a4 <HAL_GPIO_Write>
}
 80a535e:	bd38      	pop	{r3, r4, r5, pc}

080a5360 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 80a5360:	b510      	push	{r4, lr}
 80a5362:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a5364:	f7fe f896 	bl	80a3494 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
 80a5368:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
 80a536a:	b2db      	uxtb	r3, r3
 80a536c:	2b01      	cmp	r3, #1
 80a536e:	d908      	bls.n	80a5382 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 80a5370:	4620      	mov	r0, r4
 80a5372:	f7ff ff85 	bl	80a5280 <pinAvailable>
 80a5376:	b120      	cbz	r0, 80a5382 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a5378:	4620      	mov	r0, r4
}
 80a537a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
 80a537e:	f7fe b899 	b.w	80a34b4 <HAL_GPIO_Read>
}
 80a5382:	2000      	movs	r0, #0
 80a5384:	bd10      	pop	{r4, pc}
	...

080a5388 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a5388:	2300      	movs	r3, #0
 80a538a:	b513      	push	{r0, r1, r4, lr}
 80a538c:	4c07      	ldr	r4, [pc, #28]	; (80a53ac <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a538e:	461a      	mov	r2, r3
 80a5390:	4619      	mov	r1, r3
 80a5392:	4620      	mov	r0, r4
 80a5394:	9300      	str	r3, [sp, #0]
 80a5396:	f7ff fc47 	bl	80a4c28 <_ZN9IPAddressC1Ehhhh>
 80a539a:	4620      	mov	r0, r4
 80a539c:	4a04      	ldr	r2, [pc, #16]	; (80a53b0 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a539e:	4905      	ldr	r1, [pc, #20]	; (80a53b4 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a53a0:	b002      	add	sp, #8
 80a53a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a53a6:	f000 b847 	b.w	80a5438 <__aeabi_atexit>
 80a53aa:	bf00      	nop
 80a53ac:	20000604 	.word	0x20000604
 80a53b0:	20000240 	.word	0x20000240
 80a53b4:	080a4b7b 	.word	0x080a4b7b

080a53b8 <_Z17acquireWireBufferv>:
#ifndef SPARK_WIRING_NO_I2C

namespace {

hal_i2c_config_t defaultWireConfig() {
	hal_i2c_config_t config = {
 80a53b8:	2300      	movs	r3, #0
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
 80a53ba:	b570      	push	{r4, r5, r6, lr}
	hal_i2c_config_t config = {
 80a53bc:	2520      	movs	r5, #32
 80a53be:	8043      	strh	r3, [r0, #2]
 80a53c0:	2314      	movs	r3, #20
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a53c2:	4e08      	ldr	r6, [pc, #32]	; (80a53e4 <_Z17acquireWireBufferv+0x2c>)
{
 80a53c4:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 80a53c6:	8003      	strh	r3, [r0, #0]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a53c8:	4631      	mov	r1, r6
	hal_i2c_config_t config = {
 80a53ca:	6085      	str	r5, [r0, #8]
 80a53cc:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a53ce:	4628      	mov	r0, r5
 80a53d0:	f000 f839 	bl	80a5446 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a53d4:	4631      	mov	r1, r6
	};
 80a53d6:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a53d8:	4628      	mov	r0, r5
 80a53da:	f000 f834 	bl	80a5446 <_ZnajRKSt9nothrow_t>
	};
 80a53de:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
 80a53e0:	4620      	mov	r0, r4
 80a53e2:	bd70      	pop	{r4, r5, r6, pc}
 80a53e4:	080a888c 	.word	0x080a888c

080a53e8 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 80a53e8:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a53ea:	4d0f      	ldr	r5, [pc, #60]	; (80a5428 <_Z19__fetch_global_Wirev+0x40>)
{
 80a53ec:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a53ee:	7829      	ldrb	r1, [r5, #0]
 80a53f0:	f3bf 8f5b 	dmb	ish
 80a53f4:	f011 0401 	ands.w	r4, r1, #1
 80a53f8:	d113      	bne.n	80a5422 <_Z19__fetch_global_Wirev+0x3a>
 80a53fa:	4628      	mov	r0, r5
 80a53fc:	f7fa fe53 	bl	80a00a6 <__cxa_guard_acquire>
 80a5400:	b178      	cbz	r0, 80a5422 <_Z19__fetch_global_Wirev+0x3a>
 80a5402:	a801      	add	r0, sp, #4
 80a5404:	f7ff ffd8 	bl	80a53b8 <_Z17acquireWireBufferv>
 80a5408:	4621      	mov	r1, r4
 80a540a:	aa01      	add	r2, sp, #4
 80a540c:	4807      	ldr	r0, [pc, #28]	; (80a542c <_Z19__fetch_global_Wirev+0x44>)
 80a540e:	f7ff fda7 	bl	80a4f60 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 80a5412:	4628      	mov	r0, r5
 80a5414:	f7fa fe4c 	bl	80a00b0 <__cxa_guard_release>
 80a5418:	4a05      	ldr	r2, [pc, #20]	; (80a5430 <_Z19__fetch_global_Wirev+0x48>)
 80a541a:	4906      	ldr	r1, [pc, #24]	; (80a5434 <_Z19__fetch_global_Wirev+0x4c>)
 80a541c:	4803      	ldr	r0, [pc, #12]	; (80a542c <_Z19__fetch_global_Wirev+0x44>)
 80a541e:	f000 f80b 	bl	80a5438 <__aeabi_atexit>
	return wire;
}
 80a5422:	4802      	ldr	r0, [pc, #8]	; (80a542c <_Z19__fetch_global_Wirev+0x44>)
 80a5424:	b007      	add	sp, #28
 80a5426:	bd30      	pop	{r4, r5, pc}
 80a5428:	2000061c 	.word	0x2000061c
 80a542c:	20000620 	.word	0x20000620
 80a5430:	20000240 	.word	0x20000240
 80a5434:	080a4f09 	.word	0x080a4f09

080a5438 <__aeabi_atexit>:
 80a5438:	460b      	mov	r3, r1
 80a543a:	4601      	mov	r1, r0
 80a543c:	4618      	mov	r0, r3
 80a543e:	f001 ba99 	b.w	80a6974 <__cxa_atexit>

080a5442 <_ZdlPvj>:
 80a5442:	f7fa be2c 	b.w	80a009e <_ZdlPv>

080a5446 <_ZnajRKSt9nothrow_t>:
 80a5446:	f7fa be28 	b.w	80a009a <_Znaj>
	...

080a544c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
 80a544c:	4901      	ldr	r1, [pc, #4]	; (80a5454 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
 80a544e:	f000 b8fb 	b.w	80a5648 <_ZNKSt9type_infoeqERKS_>
 80a5452:	bf00      	nop
 80a5454:	080a88a8 	.word	0x080a88a8

080a5458 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 80a5458:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80a545a:	2400      	movs	r4, #0
 80a545c:	2310      	movs	r3, #16
 80a545e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80a5462:	6803      	ldr	r3, [r0, #0]
 80a5464:	4615      	mov	r5, r2
 80a5466:	699e      	ldr	r6, [r3, #24]
 80a5468:	6812      	ldr	r2, [r2, #0]
 80a546a:	466b      	mov	r3, sp
 80a546c:	9400      	str	r4, [sp, #0]
 80a546e:	f88d 4004 	strb.w	r4, [sp, #4]
 80a5472:	47b0      	blx	r6
 80a5474:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80a5478:	f003 0306 	and.w	r3, r3, #6
 80a547c:	2b06      	cmp	r3, #6
 80a547e:	bf09      	itett	eq
 80a5480:	2001      	moveq	r0, #1
 80a5482:	4620      	movne	r0, r4
 80a5484:	9b00      	ldreq	r3, [sp, #0]
 80a5486:	602b      	streq	r3, [r5, #0]
 80a5488:	b004      	add	sp, #16
 80a548a:	bd70      	pop	{r4, r5, r6, pc}

080a548c <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 80a548c:	9800      	ldr	r0, [sp, #0]
 80a548e:	4290      	cmp	r0, r2
 80a5490:	bf14      	ite	ne
 80a5492:	2001      	movne	r0, #1
 80a5494:	2006      	moveq	r0, #6
 80a5496:	4770      	bx	lr

080a5498 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 80a5498:	b510      	push	{r4, lr}
 80a549a:	4604      	mov	r4, r0
 80a549c:	4b02      	ldr	r3, [pc, #8]	; (80a54a8 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 80a549e:	6003      	str	r3, [r0, #0]
 80a54a0:	f000 f8cf 	bl	80a5642 <_ZNSt9type_infoD1Ev>
 80a54a4:	4620      	mov	r0, r4
 80a54a6:	bd10      	pop	{r4, pc}
 80a54a8:	080a88e8 	.word	0x080a88e8

080a54ac <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 80a54ac:	b510      	push	{r4, lr}
 80a54ae:	4604      	mov	r4, r0
 80a54b0:	f7ff fff2 	bl	80a5498 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 80a54b4:	4620      	mov	r0, r4
 80a54b6:	2108      	movs	r1, #8
 80a54b8:	f7ff ffc3 	bl	80a5442 <_ZdlPvj>
 80a54bc:	4620      	mov	r0, r4
 80a54be:	bd10      	pop	{r4, pc}

080a54c0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 80a54c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a54c4:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80a54c8:	461f      	mov	r7, r3
 80a54ca:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 80a54ce:	4598      	cmp	r8, r3
 80a54d0:	4606      	mov	r6, r0
 80a54d2:	4615      	mov	r5, r2
 80a54d4:	d107      	bne.n	80a54e6 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 80a54d6:	9907      	ldr	r1, [sp, #28]
 80a54d8:	f000 f8b6 	bl	80a5648 <_ZNKSt9type_infoeqERKS_>
 80a54dc:	b118      	cbz	r0, 80a54e6 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 80a54de:	7165      	strb	r5, [r4, #5]
 80a54e0:	2000      	movs	r0, #0
 80a54e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a54e6:	4639      	mov	r1, r7
 80a54e8:	4630      	mov	r0, r6
 80a54ea:	f000 f8ad 	bl	80a5648 <_ZNKSt9type_infoeqERKS_>
 80a54ee:	2800      	cmp	r0, #0
 80a54f0:	d0f6      	beq.n	80a54e0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
 80a54f2:	2301      	movs	r3, #1
 80a54f4:	f8c4 8000 	str.w	r8, [r4]
 80a54f8:	7125      	strb	r5, [r4, #4]
 80a54fa:	71a3      	strb	r3, [r4, #6]
 80a54fc:	e7f0      	b.n	80a54e0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

080a54fe <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 80a54fe:	b538      	push	{r3, r4, r5, lr}
 80a5500:	4615      	mov	r5, r2
 80a5502:	461c      	mov	r4, r3
 80a5504:	f000 f8a0 	bl	80a5648 <_ZNKSt9type_infoeqERKS_>
 80a5508:	b120      	cbz	r0, 80a5514 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 80a550a:	2308      	movs	r3, #8
 80a550c:	60e3      	str	r3, [r4, #12]
 80a550e:	2306      	movs	r3, #6
 80a5510:	6025      	str	r5, [r4, #0]
 80a5512:	7123      	strb	r3, [r4, #4]
 80a5514:	bd38      	pop	{r3, r4, r5, pc}

080a5516 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 80a5516:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a551a:	4605      	mov	r5, r0
 80a551c:	460c      	mov	r4, r1
 80a551e:	4616      	mov	r6, r2
 80a5520:	461f      	mov	r7, r3
 80a5522:	f000 f891 	bl	80a5648 <_ZNKSt9type_infoeqERKS_>
 80a5526:	b948      	cbnz	r0, 80a553c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 80a5528:	2f03      	cmp	r7, #3
 80a552a:	d807      	bhi.n	80a553c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 80a552c:	6823      	ldr	r3, [r4, #0]
 80a552e:	4632      	mov	r2, r6
 80a5530:	4629      	mov	r1, r5
 80a5532:	4620      	mov	r0, r4
 80a5534:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80a5538:	695b      	ldr	r3, [r3, #20]
 80a553a:	4718      	bx	r3
 80a553c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a5540 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 80a5540:	b510      	push	{r4, lr}
 80a5542:	4604      	mov	r4, r0
 80a5544:	4b02      	ldr	r3, [pc, #8]	; (80a5550 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 80a5546:	6003      	str	r3, [r0, #0]
 80a5548:	f7ff ffa6 	bl	80a5498 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 80a554c:	4620      	mov	r0, r4
 80a554e:	bd10      	pop	{r4, pc}
 80a5550:	080a8948 	.word	0x080a8948

080a5554 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 80a5554:	b510      	push	{r4, lr}
 80a5556:	4604      	mov	r4, r0
 80a5558:	f7ff fff2 	bl	80a5540 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 80a555c:	4620      	mov	r0, r4
 80a555e:	210c      	movs	r1, #12
 80a5560:	f7ff ff6f 	bl	80a5442 <_ZdlPvj>
 80a5564:	4620      	mov	r0, r4
 80a5566:	bd10      	pop	{r4, pc}

080a5568 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 80a5568:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a556c:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80a5570:	4606      	mov	r6, r0
 80a5572:	4590      	cmp	r8, r2
 80a5574:	460f      	mov	r7, r1
 80a5576:	4615      	mov	r5, r2
 80a5578:	461c      	mov	r4, r3
 80a557a:	d00b      	beq.n	80a5594 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x2c>
 80a557c:	68b0      	ldr	r0, [r6, #8]
 80a557e:	462a      	mov	r2, r5
 80a5580:	6803      	ldr	r3, [r0, #0]
 80a5582:	f8cd 8018 	str.w	r8, [sp, #24]
 80a5586:	6a1e      	ldr	r6, [r3, #32]
 80a5588:	4639      	mov	r1, r7
 80a558a:	4623      	mov	r3, r4
 80a558c:	46b4      	mov	ip, r6
 80a558e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80a5592:	4760      	bx	ip
 80a5594:	4619      	mov	r1, r3
 80a5596:	f000 f857 	bl	80a5648 <_ZNKSt9type_infoeqERKS_>
 80a559a:	2800      	cmp	r0, #0
 80a559c:	d0ee      	beq.n	80a557c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x14>
 80a559e:	2006      	movs	r0, #6
 80a55a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a55a4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 80a55a4:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a55a8:	460d      	mov	r5, r1
 80a55aa:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
 80a55ae:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
 80a55b2:	4619      	mov	r1, r3
 80a55b4:	4681      	mov	r9, r0
 80a55b6:	4617      	mov	r7, r2
 80a55b8:	4698      	mov	r8, r3
 80a55ba:	f000 f845 	bl	80a5648 <_ZNKSt9type_infoeqERKS_>
 80a55be:	b190      	cbz	r0, 80a55e6 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 80a55c0:	2d00      	cmp	r5, #0
 80a55c2:	6034      	str	r4, [r6, #0]
 80a55c4:	7137      	strb	r7, [r6, #4]
 80a55c6:	db09      	blt.n	80a55dc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 80a55c8:	442c      	add	r4, r5
 80a55ca:	45a2      	cmp	sl, r4
 80a55cc:	bf0c      	ite	eq
 80a55ce:	2406      	moveq	r4, #6
 80a55d0:	2401      	movne	r4, #1
 80a55d2:	71b4      	strb	r4, [r6, #6]
 80a55d4:	2000      	movs	r0, #0
 80a55d6:	b001      	add	sp, #4
 80a55d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a55dc:	3502      	adds	r5, #2
 80a55de:	d1f9      	bne.n	80a55d4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 80a55e0:	2301      	movs	r3, #1
 80a55e2:	71b3      	strb	r3, [r6, #6]
 80a55e4:	e7f6      	b.n	80a55d4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 80a55e6:	4554      	cmp	r4, sl
 80a55e8:	d106      	bne.n	80a55f8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 80a55ea:	4659      	mov	r1, fp
 80a55ec:	4648      	mov	r0, r9
 80a55ee:	f000 f82b 	bl	80a5648 <_ZNKSt9type_infoeqERKS_>
 80a55f2:	b108      	cbz	r0, 80a55f8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 80a55f4:	7177      	strb	r7, [r6, #5]
 80a55f6:	e7ed      	b.n	80a55d4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 80a55f8:	f8d9 0008 	ldr.w	r0, [r9, #8]
 80a55fc:	463a      	mov	r2, r7
 80a55fe:	6803      	ldr	r3, [r0, #0]
 80a5600:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
 80a5604:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
 80a5608:	69dc      	ldr	r4, [r3, #28]
 80a560a:	4629      	mov	r1, r5
 80a560c:	4643      	mov	r3, r8
 80a560e:	46a4      	mov	ip, r4
 80a5610:	b001      	add	sp, #4
 80a5612:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a5616:	4760      	bx	ip

080a5618 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 80a5618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a561c:	4607      	mov	r7, r0
 80a561e:	460c      	mov	r4, r1
 80a5620:	4615      	mov	r5, r2
 80a5622:	461e      	mov	r6, r3
 80a5624:	f7ff ff6b 	bl	80a54fe <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 80a5628:	b948      	cbnz	r0, 80a563e <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 80a562a:	68b8      	ldr	r0, [r7, #8]
 80a562c:	462a      	mov	r2, r5
 80a562e:	6803      	ldr	r3, [r0, #0]
 80a5630:	4621      	mov	r1, r4
 80a5632:	699f      	ldr	r7, [r3, #24]
 80a5634:	4633      	mov	r3, r6
 80a5636:	46bc      	mov	ip, r7
 80a5638:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80a563c:	4760      	bx	ip
 80a563e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a5642 <_ZNSt9type_infoD1Ev>:
 80a5642:	4770      	bx	lr

080a5644 <_ZNKSt9type_info14__is_pointer_pEv>:
 80a5644:	2000      	movs	r0, #0
 80a5646:	4770      	bx	lr

080a5648 <_ZNKSt9type_infoeqERKS_>:
 80a5648:	4281      	cmp	r1, r0
 80a564a:	b508      	push	{r3, lr}
 80a564c:	d00e      	beq.n	80a566c <_ZNKSt9type_infoeqERKS_+0x24>
 80a564e:	6840      	ldr	r0, [r0, #4]
 80a5650:	7803      	ldrb	r3, [r0, #0]
 80a5652:	2b2a      	cmp	r3, #42	; 0x2a
 80a5654:	d00c      	beq.n	80a5670 <_ZNKSt9type_infoeqERKS_+0x28>
 80a5656:	6849      	ldr	r1, [r1, #4]
 80a5658:	780b      	ldrb	r3, [r1, #0]
 80a565a:	2b2a      	cmp	r3, #42	; 0x2a
 80a565c:	bf08      	it	eq
 80a565e:	3101      	addeq	r1, #1
 80a5660:	f001 fac6 	bl	80a6bf0 <strcmp>
 80a5664:	fab0 f080 	clz	r0, r0
 80a5668:	0940      	lsrs	r0, r0, #5
 80a566a:	bd08      	pop	{r3, pc}
 80a566c:	2001      	movs	r0, #1
 80a566e:	e7fc      	b.n	80a566a <_ZNKSt9type_infoeqERKS_+0x22>
 80a5670:	2000      	movs	r0, #0
 80a5672:	e7fa      	b.n	80a566a <_ZNKSt9type_infoeqERKS_+0x22>

080a5674 <__aeabi_drsub>:
 80a5674:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a5678:	e002      	b.n	80a5680 <__adddf3>
 80a567a:	bf00      	nop

080a567c <__aeabi_dsub>:
 80a567c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a5680 <__adddf3>:
 80a5680:	b530      	push	{r4, r5, lr}
 80a5682:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a5686:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a568a:	ea94 0f05 	teq	r4, r5
 80a568e:	bf08      	it	eq
 80a5690:	ea90 0f02 	teqeq	r0, r2
 80a5694:	bf1f      	itttt	ne
 80a5696:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a569a:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a569e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a56a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a56a6:	f000 80e2 	beq.w	80a586e <__adddf3+0x1ee>
 80a56aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a56ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a56b2:	bfb8      	it	lt
 80a56b4:	426d      	neglt	r5, r5
 80a56b6:	dd0c      	ble.n	80a56d2 <__adddf3+0x52>
 80a56b8:	442c      	add	r4, r5
 80a56ba:	ea80 0202 	eor.w	r2, r0, r2
 80a56be:	ea81 0303 	eor.w	r3, r1, r3
 80a56c2:	ea82 0000 	eor.w	r0, r2, r0
 80a56c6:	ea83 0101 	eor.w	r1, r3, r1
 80a56ca:	ea80 0202 	eor.w	r2, r0, r2
 80a56ce:	ea81 0303 	eor.w	r3, r1, r3
 80a56d2:	2d36      	cmp	r5, #54	; 0x36
 80a56d4:	bf88      	it	hi
 80a56d6:	bd30      	pophi	{r4, r5, pc}
 80a56d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a56dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a56e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a56e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a56e8:	d002      	beq.n	80a56f0 <__adddf3+0x70>
 80a56ea:	4240      	negs	r0, r0
 80a56ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a56f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a56f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a56f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a56fc:	d002      	beq.n	80a5704 <__adddf3+0x84>
 80a56fe:	4252      	negs	r2, r2
 80a5700:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a5704:	ea94 0f05 	teq	r4, r5
 80a5708:	f000 80a7 	beq.w	80a585a <__adddf3+0x1da>
 80a570c:	f1a4 0401 	sub.w	r4, r4, #1
 80a5710:	f1d5 0e20 	rsbs	lr, r5, #32
 80a5714:	db0d      	blt.n	80a5732 <__adddf3+0xb2>
 80a5716:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a571a:	fa22 f205 	lsr.w	r2, r2, r5
 80a571e:	1880      	adds	r0, r0, r2
 80a5720:	f141 0100 	adc.w	r1, r1, #0
 80a5724:	fa03 f20e 	lsl.w	r2, r3, lr
 80a5728:	1880      	adds	r0, r0, r2
 80a572a:	fa43 f305 	asr.w	r3, r3, r5
 80a572e:	4159      	adcs	r1, r3
 80a5730:	e00e      	b.n	80a5750 <__adddf3+0xd0>
 80a5732:	f1a5 0520 	sub.w	r5, r5, #32
 80a5736:	f10e 0e20 	add.w	lr, lr, #32
 80a573a:	2a01      	cmp	r2, #1
 80a573c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a5740:	bf28      	it	cs
 80a5742:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a5746:	fa43 f305 	asr.w	r3, r3, r5
 80a574a:	18c0      	adds	r0, r0, r3
 80a574c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a5750:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a5754:	d507      	bpl.n	80a5766 <__adddf3+0xe6>
 80a5756:	f04f 0e00 	mov.w	lr, #0
 80a575a:	f1dc 0c00 	rsbs	ip, ip, #0
 80a575e:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a5762:	eb6e 0101 	sbc.w	r1, lr, r1
 80a5766:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a576a:	d31b      	bcc.n	80a57a4 <__adddf3+0x124>
 80a576c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a5770:	d30c      	bcc.n	80a578c <__adddf3+0x10c>
 80a5772:	0849      	lsrs	r1, r1, #1
 80a5774:	ea5f 0030 	movs.w	r0, r0, rrx
 80a5778:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a577c:	f104 0401 	add.w	r4, r4, #1
 80a5780:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a5784:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a5788:	f080 809a 	bcs.w	80a58c0 <__adddf3+0x240>
 80a578c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a5790:	bf08      	it	eq
 80a5792:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a5796:	f150 0000 	adcs.w	r0, r0, #0
 80a579a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a579e:	ea41 0105 	orr.w	r1, r1, r5
 80a57a2:	bd30      	pop	{r4, r5, pc}
 80a57a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a57a8:	4140      	adcs	r0, r0
 80a57aa:	eb41 0101 	adc.w	r1, r1, r1
 80a57ae:	3c01      	subs	r4, #1
 80a57b0:	bf28      	it	cs
 80a57b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80a57b6:	d2e9      	bcs.n	80a578c <__adddf3+0x10c>
 80a57b8:	f091 0f00 	teq	r1, #0
 80a57bc:	bf04      	itt	eq
 80a57be:	4601      	moveq	r1, r0
 80a57c0:	2000      	moveq	r0, #0
 80a57c2:	fab1 f381 	clz	r3, r1
 80a57c6:	bf08      	it	eq
 80a57c8:	3320      	addeq	r3, #32
 80a57ca:	f1a3 030b 	sub.w	r3, r3, #11
 80a57ce:	f1b3 0220 	subs.w	r2, r3, #32
 80a57d2:	da0c      	bge.n	80a57ee <__adddf3+0x16e>
 80a57d4:	320c      	adds	r2, #12
 80a57d6:	dd08      	ble.n	80a57ea <__adddf3+0x16a>
 80a57d8:	f102 0c14 	add.w	ip, r2, #20
 80a57dc:	f1c2 020c 	rsb	r2, r2, #12
 80a57e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80a57e4:	fa21 f102 	lsr.w	r1, r1, r2
 80a57e8:	e00c      	b.n	80a5804 <__adddf3+0x184>
 80a57ea:	f102 0214 	add.w	r2, r2, #20
 80a57ee:	bfd8      	it	le
 80a57f0:	f1c2 0c20 	rsble	ip, r2, #32
 80a57f4:	fa01 f102 	lsl.w	r1, r1, r2
 80a57f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a57fc:	bfdc      	itt	le
 80a57fe:	ea41 010c 	orrle.w	r1, r1, ip
 80a5802:	4090      	lslle	r0, r2
 80a5804:	1ae4      	subs	r4, r4, r3
 80a5806:	bfa2      	ittt	ge
 80a5808:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a580c:	4329      	orrge	r1, r5
 80a580e:	bd30      	popge	{r4, r5, pc}
 80a5810:	ea6f 0404 	mvn.w	r4, r4
 80a5814:	3c1f      	subs	r4, #31
 80a5816:	da1c      	bge.n	80a5852 <__adddf3+0x1d2>
 80a5818:	340c      	adds	r4, #12
 80a581a:	dc0e      	bgt.n	80a583a <__adddf3+0x1ba>
 80a581c:	f104 0414 	add.w	r4, r4, #20
 80a5820:	f1c4 0220 	rsb	r2, r4, #32
 80a5824:	fa20 f004 	lsr.w	r0, r0, r4
 80a5828:	fa01 f302 	lsl.w	r3, r1, r2
 80a582c:	ea40 0003 	orr.w	r0, r0, r3
 80a5830:	fa21 f304 	lsr.w	r3, r1, r4
 80a5834:	ea45 0103 	orr.w	r1, r5, r3
 80a5838:	bd30      	pop	{r4, r5, pc}
 80a583a:	f1c4 040c 	rsb	r4, r4, #12
 80a583e:	f1c4 0220 	rsb	r2, r4, #32
 80a5842:	fa20 f002 	lsr.w	r0, r0, r2
 80a5846:	fa01 f304 	lsl.w	r3, r1, r4
 80a584a:	ea40 0003 	orr.w	r0, r0, r3
 80a584e:	4629      	mov	r1, r5
 80a5850:	bd30      	pop	{r4, r5, pc}
 80a5852:	fa21 f004 	lsr.w	r0, r1, r4
 80a5856:	4629      	mov	r1, r5
 80a5858:	bd30      	pop	{r4, r5, pc}
 80a585a:	f094 0f00 	teq	r4, #0
 80a585e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a5862:	bf06      	itte	eq
 80a5864:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a5868:	3401      	addeq	r4, #1
 80a586a:	3d01      	subne	r5, #1
 80a586c:	e74e      	b.n	80a570c <__adddf3+0x8c>
 80a586e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a5872:	bf18      	it	ne
 80a5874:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a5878:	d029      	beq.n	80a58ce <__adddf3+0x24e>
 80a587a:	ea94 0f05 	teq	r4, r5
 80a587e:	bf08      	it	eq
 80a5880:	ea90 0f02 	teqeq	r0, r2
 80a5884:	d005      	beq.n	80a5892 <__adddf3+0x212>
 80a5886:	ea54 0c00 	orrs.w	ip, r4, r0
 80a588a:	bf04      	itt	eq
 80a588c:	4619      	moveq	r1, r3
 80a588e:	4610      	moveq	r0, r2
 80a5890:	bd30      	pop	{r4, r5, pc}
 80a5892:	ea91 0f03 	teq	r1, r3
 80a5896:	bf1e      	ittt	ne
 80a5898:	2100      	movne	r1, #0
 80a589a:	2000      	movne	r0, #0
 80a589c:	bd30      	popne	{r4, r5, pc}
 80a589e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a58a2:	d105      	bne.n	80a58b0 <__adddf3+0x230>
 80a58a4:	0040      	lsls	r0, r0, #1
 80a58a6:	4149      	adcs	r1, r1
 80a58a8:	bf28      	it	cs
 80a58aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a58ae:	bd30      	pop	{r4, r5, pc}
 80a58b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a58b4:	bf3c      	itt	cc
 80a58b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a58ba:	bd30      	popcc	{r4, r5, pc}
 80a58bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a58c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a58c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a58c8:	f04f 0000 	mov.w	r0, #0
 80a58cc:	bd30      	pop	{r4, r5, pc}
 80a58ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a58d2:	bf1a      	itte	ne
 80a58d4:	4619      	movne	r1, r3
 80a58d6:	4610      	movne	r0, r2
 80a58d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a58dc:	bf1c      	itt	ne
 80a58de:	460b      	movne	r3, r1
 80a58e0:	4602      	movne	r2, r0
 80a58e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a58e6:	bf06      	itte	eq
 80a58e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a58ec:	ea91 0f03 	teqeq	r1, r3
 80a58f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a58f4:	bd30      	pop	{r4, r5, pc}
 80a58f6:	bf00      	nop

080a58f8 <__aeabi_ui2d>:
 80a58f8:	f090 0f00 	teq	r0, #0
 80a58fc:	bf04      	itt	eq
 80a58fe:	2100      	moveq	r1, #0
 80a5900:	4770      	bxeq	lr
 80a5902:	b530      	push	{r4, r5, lr}
 80a5904:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a5908:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a590c:	f04f 0500 	mov.w	r5, #0
 80a5910:	f04f 0100 	mov.w	r1, #0
 80a5914:	e750      	b.n	80a57b8 <__adddf3+0x138>
 80a5916:	bf00      	nop

080a5918 <__aeabi_i2d>:
 80a5918:	f090 0f00 	teq	r0, #0
 80a591c:	bf04      	itt	eq
 80a591e:	2100      	moveq	r1, #0
 80a5920:	4770      	bxeq	lr
 80a5922:	b530      	push	{r4, r5, lr}
 80a5924:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a5928:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a592c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a5930:	bf48      	it	mi
 80a5932:	4240      	negmi	r0, r0
 80a5934:	f04f 0100 	mov.w	r1, #0
 80a5938:	e73e      	b.n	80a57b8 <__adddf3+0x138>
 80a593a:	bf00      	nop

080a593c <__aeabi_f2d>:
 80a593c:	0042      	lsls	r2, r0, #1
 80a593e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a5942:	ea4f 0131 	mov.w	r1, r1, rrx
 80a5946:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a594a:	bf1f      	itttt	ne
 80a594c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a5950:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a5954:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a5958:	4770      	bxne	lr
 80a595a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80a595e:	bf08      	it	eq
 80a5960:	4770      	bxeq	lr
 80a5962:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80a5966:	bf04      	itt	eq
 80a5968:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80a596c:	4770      	bxeq	lr
 80a596e:	b530      	push	{r4, r5, lr}
 80a5970:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a5974:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a5978:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a597c:	e71c      	b.n	80a57b8 <__adddf3+0x138>
 80a597e:	bf00      	nop

080a5980 <__aeabi_ul2d>:
 80a5980:	ea50 0201 	orrs.w	r2, r0, r1
 80a5984:	bf08      	it	eq
 80a5986:	4770      	bxeq	lr
 80a5988:	b530      	push	{r4, r5, lr}
 80a598a:	f04f 0500 	mov.w	r5, #0
 80a598e:	e00a      	b.n	80a59a6 <__aeabi_l2d+0x16>

080a5990 <__aeabi_l2d>:
 80a5990:	ea50 0201 	orrs.w	r2, r0, r1
 80a5994:	bf08      	it	eq
 80a5996:	4770      	bxeq	lr
 80a5998:	b530      	push	{r4, r5, lr}
 80a599a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a599e:	d502      	bpl.n	80a59a6 <__aeabi_l2d+0x16>
 80a59a0:	4240      	negs	r0, r0
 80a59a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a59a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a59aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a59ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a59b2:	f43f aed8 	beq.w	80a5766 <__adddf3+0xe6>
 80a59b6:	f04f 0203 	mov.w	r2, #3
 80a59ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a59be:	bf18      	it	ne
 80a59c0:	3203      	addne	r2, #3
 80a59c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a59c6:	bf18      	it	ne
 80a59c8:	3203      	addne	r2, #3
 80a59ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a59ce:	f1c2 0320 	rsb	r3, r2, #32
 80a59d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80a59d6:	fa20 f002 	lsr.w	r0, r0, r2
 80a59da:	fa01 fe03 	lsl.w	lr, r1, r3
 80a59de:	ea40 000e 	orr.w	r0, r0, lr
 80a59e2:	fa21 f102 	lsr.w	r1, r1, r2
 80a59e6:	4414      	add	r4, r2
 80a59e8:	e6bd      	b.n	80a5766 <__adddf3+0xe6>
 80a59ea:	bf00      	nop

080a59ec <__aeabi_dmul>:
 80a59ec:	b570      	push	{r4, r5, r6, lr}
 80a59ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a59f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a59f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a59fa:	bf1d      	ittte	ne
 80a59fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a5a00:	ea94 0f0c 	teqne	r4, ip
 80a5a04:	ea95 0f0c 	teqne	r5, ip
 80a5a08:	f000 f8de 	bleq	80a5bc8 <__aeabi_dmul+0x1dc>
 80a5a0c:	442c      	add	r4, r5
 80a5a0e:	ea81 0603 	eor.w	r6, r1, r3
 80a5a12:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a5a16:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a5a1a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a5a1e:	bf18      	it	ne
 80a5a20:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a5a24:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a5a28:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a5a2c:	d038      	beq.n	80a5aa0 <__aeabi_dmul+0xb4>
 80a5a2e:	fba0 ce02 	umull	ip, lr, r0, r2
 80a5a32:	f04f 0500 	mov.w	r5, #0
 80a5a36:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a5a3a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a5a3e:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a5a42:	f04f 0600 	mov.w	r6, #0
 80a5a46:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a5a4a:	f09c 0f00 	teq	ip, #0
 80a5a4e:	bf18      	it	ne
 80a5a50:	f04e 0e01 	orrne.w	lr, lr, #1
 80a5a54:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a5a58:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a5a5c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a5a60:	d204      	bcs.n	80a5a6c <__aeabi_dmul+0x80>
 80a5a62:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a5a66:	416d      	adcs	r5, r5
 80a5a68:	eb46 0606 	adc.w	r6, r6, r6
 80a5a6c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a5a70:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a5a74:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a5a78:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a5a7c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a5a80:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a5a84:	bf88      	it	hi
 80a5a86:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a5a8a:	d81e      	bhi.n	80a5aca <__aeabi_dmul+0xde>
 80a5a8c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a5a90:	bf08      	it	eq
 80a5a92:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a5a96:	f150 0000 	adcs.w	r0, r0, #0
 80a5a9a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a5a9e:	bd70      	pop	{r4, r5, r6, pc}
 80a5aa0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a5aa4:	ea46 0101 	orr.w	r1, r6, r1
 80a5aa8:	ea40 0002 	orr.w	r0, r0, r2
 80a5aac:	ea81 0103 	eor.w	r1, r1, r3
 80a5ab0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a5ab4:	bfc2      	ittt	gt
 80a5ab6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a5aba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a5abe:	bd70      	popgt	{r4, r5, r6, pc}
 80a5ac0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a5ac4:	f04f 0e00 	mov.w	lr, #0
 80a5ac8:	3c01      	subs	r4, #1
 80a5aca:	f300 80ab 	bgt.w	80a5c24 <__aeabi_dmul+0x238>
 80a5ace:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a5ad2:	bfde      	ittt	le
 80a5ad4:	2000      	movle	r0, #0
 80a5ad6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a5ada:	bd70      	pople	{r4, r5, r6, pc}
 80a5adc:	f1c4 0400 	rsb	r4, r4, #0
 80a5ae0:	3c20      	subs	r4, #32
 80a5ae2:	da35      	bge.n	80a5b50 <__aeabi_dmul+0x164>
 80a5ae4:	340c      	adds	r4, #12
 80a5ae6:	dc1b      	bgt.n	80a5b20 <__aeabi_dmul+0x134>
 80a5ae8:	f104 0414 	add.w	r4, r4, #20
 80a5aec:	f1c4 0520 	rsb	r5, r4, #32
 80a5af0:	fa00 f305 	lsl.w	r3, r0, r5
 80a5af4:	fa20 f004 	lsr.w	r0, r0, r4
 80a5af8:	fa01 f205 	lsl.w	r2, r1, r5
 80a5afc:	ea40 0002 	orr.w	r0, r0, r2
 80a5b00:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a5b04:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a5b08:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a5b0c:	fa21 f604 	lsr.w	r6, r1, r4
 80a5b10:	eb42 0106 	adc.w	r1, r2, r6
 80a5b14:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a5b18:	bf08      	it	eq
 80a5b1a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a5b1e:	bd70      	pop	{r4, r5, r6, pc}
 80a5b20:	f1c4 040c 	rsb	r4, r4, #12
 80a5b24:	f1c4 0520 	rsb	r5, r4, #32
 80a5b28:	fa00 f304 	lsl.w	r3, r0, r4
 80a5b2c:	fa20 f005 	lsr.w	r0, r0, r5
 80a5b30:	fa01 f204 	lsl.w	r2, r1, r4
 80a5b34:	ea40 0002 	orr.w	r0, r0, r2
 80a5b38:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a5b3c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a5b40:	f141 0100 	adc.w	r1, r1, #0
 80a5b44:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a5b48:	bf08      	it	eq
 80a5b4a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a5b4e:	bd70      	pop	{r4, r5, r6, pc}
 80a5b50:	f1c4 0520 	rsb	r5, r4, #32
 80a5b54:	fa00 f205 	lsl.w	r2, r0, r5
 80a5b58:	ea4e 0e02 	orr.w	lr, lr, r2
 80a5b5c:	fa20 f304 	lsr.w	r3, r0, r4
 80a5b60:	fa01 f205 	lsl.w	r2, r1, r5
 80a5b64:	ea43 0302 	orr.w	r3, r3, r2
 80a5b68:	fa21 f004 	lsr.w	r0, r1, r4
 80a5b6c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a5b70:	fa21 f204 	lsr.w	r2, r1, r4
 80a5b74:	ea20 0002 	bic.w	r0, r0, r2
 80a5b78:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a5b7c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a5b80:	bf08      	it	eq
 80a5b82:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a5b86:	bd70      	pop	{r4, r5, r6, pc}
 80a5b88:	f094 0f00 	teq	r4, #0
 80a5b8c:	d10f      	bne.n	80a5bae <__aeabi_dmul+0x1c2>
 80a5b8e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a5b92:	0040      	lsls	r0, r0, #1
 80a5b94:	eb41 0101 	adc.w	r1, r1, r1
 80a5b98:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a5b9c:	bf08      	it	eq
 80a5b9e:	3c01      	subeq	r4, #1
 80a5ba0:	d0f7      	beq.n	80a5b92 <__aeabi_dmul+0x1a6>
 80a5ba2:	ea41 0106 	orr.w	r1, r1, r6
 80a5ba6:	f095 0f00 	teq	r5, #0
 80a5baa:	bf18      	it	ne
 80a5bac:	4770      	bxne	lr
 80a5bae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a5bb2:	0052      	lsls	r2, r2, #1
 80a5bb4:	eb43 0303 	adc.w	r3, r3, r3
 80a5bb8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a5bbc:	bf08      	it	eq
 80a5bbe:	3d01      	subeq	r5, #1
 80a5bc0:	d0f7      	beq.n	80a5bb2 <__aeabi_dmul+0x1c6>
 80a5bc2:	ea43 0306 	orr.w	r3, r3, r6
 80a5bc6:	4770      	bx	lr
 80a5bc8:	ea94 0f0c 	teq	r4, ip
 80a5bcc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a5bd0:	bf18      	it	ne
 80a5bd2:	ea95 0f0c 	teqne	r5, ip
 80a5bd6:	d00c      	beq.n	80a5bf2 <__aeabi_dmul+0x206>
 80a5bd8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a5bdc:	bf18      	it	ne
 80a5bde:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a5be2:	d1d1      	bne.n	80a5b88 <__aeabi_dmul+0x19c>
 80a5be4:	ea81 0103 	eor.w	r1, r1, r3
 80a5be8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a5bec:	f04f 0000 	mov.w	r0, #0
 80a5bf0:	bd70      	pop	{r4, r5, r6, pc}
 80a5bf2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a5bf6:	bf06      	itte	eq
 80a5bf8:	4610      	moveq	r0, r2
 80a5bfa:	4619      	moveq	r1, r3
 80a5bfc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a5c00:	d019      	beq.n	80a5c36 <__aeabi_dmul+0x24a>
 80a5c02:	ea94 0f0c 	teq	r4, ip
 80a5c06:	d102      	bne.n	80a5c0e <__aeabi_dmul+0x222>
 80a5c08:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a5c0c:	d113      	bne.n	80a5c36 <__aeabi_dmul+0x24a>
 80a5c0e:	ea95 0f0c 	teq	r5, ip
 80a5c12:	d105      	bne.n	80a5c20 <__aeabi_dmul+0x234>
 80a5c14:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a5c18:	bf1c      	itt	ne
 80a5c1a:	4610      	movne	r0, r2
 80a5c1c:	4619      	movne	r1, r3
 80a5c1e:	d10a      	bne.n	80a5c36 <__aeabi_dmul+0x24a>
 80a5c20:	ea81 0103 	eor.w	r1, r1, r3
 80a5c24:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a5c28:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a5c2c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a5c30:	f04f 0000 	mov.w	r0, #0
 80a5c34:	bd70      	pop	{r4, r5, r6, pc}
 80a5c36:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a5c3a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a5c3e:	bd70      	pop	{r4, r5, r6, pc}

080a5c40 <__aeabi_ddiv>:
 80a5c40:	b570      	push	{r4, r5, r6, lr}
 80a5c42:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a5c46:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a5c4a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a5c4e:	bf1d      	ittte	ne
 80a5c50:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a5c54:	ea94 0f0c 	teqne	r4, ip
 80a5c58:	ea95 0f0c 	teqne	r5, ip
 80a5c5c:	f000 f8a7 	bleq	80a5dae <__aeabi_ddiv+0x16e>
 80a5c60:	eba4 0405 	sub.w	r4, r4, r5
 80a5c64:	ea81 0e03 	eor.w	lr, r1, r3
 80a5c68:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a5c6c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a5c70:	f000 8088 	beq.w	80a5d84 <__aeabi_ddiv+0x144>
 80a5c74:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a5c78:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a5c7c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a5c80:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a5c84:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a5c88:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a5c8c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a5c90:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a5c94:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a5c98:	429d      	cmp	r5, r3
 80a5c9a:	bf08      	it	eq
 80a5c9c:	4296      	cmpeq	r6, r2
 80a5c9e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a5ca2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a5ca6:	d202      	bcs.n	80a5cae <__aeabi_ddiv+0x6e>
 80a5ca8:	085b      	lsrs	r3, r3, #1
 80a5caa:	ea4f 0232 	mov.w	r2, r2, rrx
 80a5cae:	1ab6      	subs	r6, r6, r2
 80a5cb0:	eb65 0503 	sbc.w	r5, r5, r3
 80a5cb4:	085b      	lsrs	r3, r3, #1
 80a5cb6:	ea4f 0232 	mov.w	r2, r2, rrx
 80a5cba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a5cbe:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a5cc2:	ebb6 0e02 	subs.w	lr, r6, r2
 80a5cc6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a5cca:	bf22      	ittt	cs
 80a5ccc:	1ab6      	subcs	r6, r6, r2
 80a5cce:	4675      	movcs	r5, lr
 80a5cd0:	ea40 000c 	orrcs.w	r0, r0, ip
 80a5cd4:	085b      	lsrs	r3, r3, #1
 80a5cd6:	ea4f 0232 	mov.w	r2, r2, rrx
 80a5cda:	ebb6 0e02 	subs.w	lr, r6, r2
 80a5cde:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a5ce2:	bf22      	ittt	cs
 80a5ce4:	1ab6      	subcs	r6, r6, r2
 80a5ce6:	4675      	movcs	r5, lr
 80a5ce8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a5cec:	085b      	lsrs	r3, r3, #1
 80a5cee:	ea4f 0232 	mov.w	r2, r2, rrx
 80a5cf2:	ebb6 0e02 	subs.w	lr, r6, r2
 80a5cf6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a5cfa:	bf22      	ittt	cs
 80a5cfc:	1ab6      	subcs	r6, r6, r2
 80a5cfe:	4675      	movcs	r5, lr
 80a5d00:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a5d04:	085b      	lsrs	r3, r3, #1
 80a5d06:	ea4f 0232 	mov.w	r2, r2, rrx
 80a5d0a:	ebb6 0e02 	subs.w	lr, r6, r2
 80a5d0e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a5d12:	bf22      	ittt	cs
 80a5d14:	1ab6      	subcs	r6, r6, r2
 80a5d16:	4675      	movcs	r5, lr
 80a5d18:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a5d1c:	ea55 0e06 	orrs.w	lr, r5, r6
 80a5d20:	d018      	beq.n	80a5d54 <__aeabi_ddiv+0x114>
 80a5d22:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a5d26:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a5d2a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a5d2e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a5d32:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a5d36:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a5d3a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a5d3e:	d1c0      	bne.n	80a5cc2 <__aeabi_ddiv+0x82>
 80a5d40:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a5d44:	d10b      	bne.n	80a5d5e <__aeabi_ddiv+0x11e>
 80a5d46:	ea41 0100 	orr.w	r1, r1, r0
 80a5d4a:	f04f 0000 	mov.w	r0, #0
 80a5d4e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a5d52:	e7b6      	b.n	80a5cc2 <__aeabi_ddiv+0x82>
 80a5d54:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a5d58:	bf04      	itt	eq
 80a5d5a:	4301      	orreq	r1, r0
 80a5d5c:	2000      	moveq	r0, #0
 80a5d5e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a5d62:	bf88      	it	hi
 80a5d64:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a5d68:	f63f aeaf 	bhi.w	80a5aca <__aeabi_dmul+0xde>
 80a5d6c:	ebb5 0c03 	subs.w	ip, r5, r3
 80a5d70:	bf04      	itt	eq
 80a5d72:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a5d76:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a5d7a:	f150 0000 	adcs.w	r0, r0, #0
 80a5d7e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a5d82:	bd70      	pop	{r4, r5, r6, pc}
 80a5d84:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a5d88:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a5d8c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a5d90:	bfc2      	ittt	gt
 80a5d92:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a5d96:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a5d9a:	bd70      	popgt	{r4, r5, r6, pc}
 80a5d9c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a5da0:	f04f 0e00 	mov.w	lr, #0
 80a5da4:	3c01      	subs	r4, #1
 80a5da6:	e690      	b.n	80a5aca <__aeabi_dmul+0xde>
 80a5da8:	ea45 0e06 	orr.w	lr, r5, r6
 80a5dac:	e68d      	b.n	80a5aca <__aeabi_dmul+0xde>
 80a5dae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a5db2:	ea94 0f0c 	teq	r4, ip
 80a5db6:	bf08      	it	eq
 80a5db8:	ea95 0f0c 	teqeq	r5, ip
 80a5dbc:	f43f af3b 	beq.w	80a5c36 <__aeabi_dmul+0x24a>
 80a5dc0:	ea94 0f0c 	teq	r4, ip
 80a5dc4:	d10a      	bne.n	80a5ddc <__aeabi_ddiv+0x19c>
 80a5dc6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a5dca:	f47f af34 	bne.w	80a5c36 <__aeabi_dmul+0x24a>
 80a5dce:	ea95 0f0c 	teq	r5, ip
 80a5dd2:	f47f af25 	bne.w	80a5c20 <__aeabi_dmul+0x234>
 80a5dd6:	4610      	mov	r0, r2
 80a5dd8:	4619      	mov	r1, r3
 80a5dda:	e72c      	b.n	80a5c36 <__aeabi_dmul+0x24a>
 80a5ddc:	ea95 0f0c 	teq	r5, ip
 80a5de0:	d106      	bne.n	80a5df0 <__aeabi_ddiv+0x1b0>
 80a5de2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a5de6:	f43f aefd 	beq.w	80a5be4 <__aeabi_dmul+0x1f8>
 80a5dea:	4610      	mov	r0, r2
 80a5dec:	4619      	mov	r1, r3
 80a5dee:	e722      	b.n	80a5c36 <__aeabi_dmul+0x24a>
 80a5df0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a5df4:	bf18      	it	ne
 80a5df6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a5dfa:	f47f aec5 	bne.w	80a5b88 <__aeabi_dmul+0x19c>
 80a5dfe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a5e02:	f47f af0d 	bne.w	80a5c20 <__aeabi_dmul+0x234>
 80a5e06:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a5e0a:	f47f aeeb 	bne.w	80a5be4 <__aeabi_dmul+0x1f8>
 80a5e0e:	e712      	b.n	80a5c36 <__aeabi_dmul+0x24a>

080a5e10 <__gedf2>:
 80a5e10:	f04f 3cff 	mov.w	ip, #4294967295
 80a5e14:	e006      	b.n	80a5e24 <__cmpdf2+0x4>
 80a5e16:	bf00      	nop

080a5e18 <__ledf2>:
 80a5e18:	f04f 0c01 	mov.w	ip, #1
 80a5e1c:	e002      	b.n	80a5e24 <__cmpdf2+0x4>
 80a5e1e:	bf00      	nop

080a5e20 <__cmpdf2>:
 80a5e20:	f04f 0c01 	mov.w	ip, #1
 80a5e24:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a5e28:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a5e2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a5e30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a5e34:	bf18      	it	ne
 80a5e36:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80a5e3a:	d01b      	beq.n	80a5e74 <__cmpdf2+0x54>
 80a5e3c:	b001      	add	sp, #4
 80a5e3e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80a5e42:	bf0c      	ite	eq
 80a5e44:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80a5e48:	ea91 0f03 	teqne	r1, r3
 80a5e4c:	bf02      	ittt	eq
 80a5e4e:	ea90 0f02 	teqeq	r0, r2
 80a5e52:	2000      	moveq	r0, #0
 80a5e54:	4770      	bxeq	lr
 80a5e56:	f110 0f00 	cmn.w	r0, #0
 80a5e5a:	ea91 0f03 	teq	r1, r3
 80a5e5e:	bf58      	it	pl
 80a5e60:	4299      	cmppl	r1, r3
 80a5e62:	bf08      	it	eq
 80a5e64:	4290      	cmpeq	r0, r2
 80a5e66:	bf2c      	ite	cs
 80a5e68:	17d8      	asrcs	r0, r3, #31
 80a5e6a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80a5e6e:	f040 0001 	orr.w	r0, r0, #1
 80a5e72:	4770      	bx	lr
 80a5e74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a5e78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a5e7c:	d102      	bne.n	80a5e84 <__cmpdf2+0x64>
 80a5e7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a5e82:	d107      	bne.n	80a5e94 <__cmpdf2+0x74>
 80a5e84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a5e88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a5e8c:	d1d6      	bne.n	80a5e3c <__cmpdf2+0x1c>
 80a5e8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a5e92:	d0d3      	beq.n	80a5e3c <__cmpdf2+0x1c>
 80a5e94:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a5e98:	4770      	bx	lr
 80a5e9a:	bf00      	nop

080a5e9c <__aeabi_cdrcmple>:
 80a5e9c:	4684      	mov	ip, r0
 80a5e9e:	4610      	mov	r0, r2
 80a5ea0:	4662      	mov	r2, ip
 80a5ea2:	468c      	mov	ip, r1
 80a5ea4:	4619      	mov	r1, r3
 80a5ea6:	4663      	mov	r3, ip
 80a5ea8:	e000      	b.n	80a5eac <__aeabi_cdcmpeq>
 80a5eaa:	bf00      	nop

080a5eac <__aeabi_cdcmpeq>:
 80a5eac:	b501      	push	{r0, lr}
 80a5eae:	f7ff ffb7 	bl	80a5e20 <__cmpdf2>
 80a5eb2:	2800      	cmp	r0, #0
 80a5eb4:	bf48      	it	mi
 80a5eb6:	f110 0f00 	cmnmi.w	r0, #0
 80a5eba:	bd01      	pop	{r0, pc}

080a5ebc <__aeabi_dcmpeq>:
 80a5ebc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a5ec0:	f7ff fff4 	bl	80a5eac <__aeabi_cdcmpeq>
 80a5ec4:	bf0c      	ite	eq
 80a5ec6:	2001      	moveq	r0, #1
 80a5ec8:	2000      	movne	r0, #0
 80a5eca:	f85d fb08 	ldr.w	pc, [sp], #8
 80a5ece:	bf00      	nop

080a5ed0 <__aeabi_dcmplt>:
 80a5ed0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a5ed4:	f7ff ffea 	bl	80a5eac <__aeabi_cdcmpeq>
 80a5ed8:	bf34      	ite	cc
 80a5eda:	2001      	movcc	r0, #1
 80a5edc:	2000      	movcs	r0, #0
 80a5ede:	f85d fb08 	ldr.w	pc, [sp], #8
 80a5ee2:	bf00      	nop

080a5ee4 <__aeabi_dcmple>:
 80a5ee4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a5ee8:	f7ff ffe0 	bl	80a5eac <__aeabi_cdcmpeq>
 80a5eec:	bf94      	ite	ls
 80a5eee:	2001      	movls	r0, #1
 80a5ef0:	2000      	movhi	r0, #0
 80a5ef2:	f85d fb08 	ldr.w	pc, [sp], #8
 80a5ef6:	bf00      	nop

080a5ef8 <__aeabi_dcmpge>:
 80a5ef8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a5efc:	f7ff ffce 	bl	80a5e9c <__aeabi_cdrcmple>
 80a5f00:	bf94      	ite	ls
 80a5f02:	2001      	movls	r0, #1
 80a5f04:	2000      	movhi	r0, #0
 80a5f06:	f85d fb08 	ldr.w	pc, [sp], #8
 80a5f0a:	bf00      	nop

080a5f0c <__aeabi_dcmpgt>:
 80a5f0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a5f10:	f7ff ffc4 	bl	80a5e9c <__aeabi_cdrcmple>
 80a5f14:	bf34      	ite	cc
 80a5f16:	2001      	movcc	r0, #1
 80a5f18:	2000      	movcs	r0, #0
 80a5f1a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a5f1e:	bf00      	nop

080a5f20 <__aeabi_dcmpun>:
 80a5f20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a5f24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a5f28:	d102      	bne.n	80a5f30 <__aeabi_dcmpun+0x10>
 80a5f2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a5f2e:	d10a      	bne.n	80a5f46 <__aeabi_dcmpun+0x26>
 80a5f30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a5f34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a5f38:	d102      	bne.n	80a5f40 <__aeabi_dcmpun+0x20>
 80a5f3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a5f3e:	d102      	bne.n	80a5f46 <__aeabi_dcmpun+0x26>
 80a5f40:	f04f 0000 	mov.w	r0, #0
 80a5f44:	4770      	bx	lr
 80a5f46:	f04f 0001 	mov.w	r0, #1
 80a5f4a:	4770      	bx	lr

080a5f4c <__aeabi_d2iz>:
 80a5f4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a5f50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a5f54:	d215      	bcs.n	80a5f82 <__aeabi_d2iz+0x36>
 80a5f56:	d511      	bpl.n	80a5f7c <__aeabi_d2iz+0x30>
 80a5f58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a5f5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a5f60:	d912      	bls.n	80a5f88 <__aeabi_d2iz+0x3c>
 80a5f62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a5f66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a5f6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a5f6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a5f72:	fa23 f002 	lsr.w	r0, r3, r2
 80a5f76:	bf18      	it	ne
 80a5f78:	4240      	negne	r0, r0
 80a5f7a:	4770      	bx	lr
 80a5f7c:	f04f 0000 	mov.w	r0, #0
 80a5f80:	4770      	bx	lr
 80a5f82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a5f86:	d105      	bne.n	80a5f94 <__aeabi_d2iz+0x48>
 80a5f88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80a5f8c:	bf08      	it	eq
 80a5f8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a5f92:	4770      	bx	lr
 80a5f94:	f04f 0000 	mov.w	r0, #0
 80a5f98:	4770      	bx	lr
 80a5f9a:	bf00      	nop

080a5f9c <__aeabi_d2uiz>:
 80a5f9c:	004a      	lsls	r2, r1, #1
 80a5f9e:	d211      	bcs.n	80a5fc4 <__aeabi_d2uiz+0x28>
 80a5fa0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a5fa4:	d211      	bcs.n	80a5fca <__aeabi_d2uiz+0x2e>
 80a5fa6:	d50d      	bpl.n	80a5fc4 <__aeabi_d2uiz+0x28>
 80a5fa8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a5fac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a5fb0:	d40e      	bmi.n	80a5fd0 <__aeabi_d2uiz+0x34>
 80a5fb2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a5fb6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a5fba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a5fbe:	fa23 f002 	lsr.w	r0, r3, r2
 80a5fc2:	4770      	bx	lr
 80a5fc4:	f04f 0000 	mov.w	r0, #0
 80a5fc8:	4770      	bx	lr
 80a5fca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a5fce:	d102      	bne.n	80a5fd6 <__aeabi_d2uiz+0x3a>
 80a5fd0:	f04f 30ff 	mov.w	r0, #4294967295
 80a5fd4:	4770      	bx	lr
 80a5fd6:	f04f 0000 	mov.w	r0, #0
 80a5fda:	4770      	bx	lr

080a5fdc <__aeabi_frsub>:
 80a5fdc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80a5fe0:	e002      	b.n	80a5fe8 <__addsf3>
 80a5fe2:	bf00      	nop

080a5fe4 <__aeabi_fsub>:
 80a5fe4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080a5fe8 <__addsf3>:
 80a5fe8:	0042      	lsls	r2, r0, #1
 80a5fea:	bf1f      	itttt	ne
 80a5fec:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80a5ff0:	ea92 0f03 	teqne	r2, r3
 80a5ff4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80a5ff8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a5ffc:	d06a      	beq.n	80a60d4 <__addsf3+0xec>
 80a5ffe:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80a6002:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80a6006:	bfc1      	itttt	gt
 80a6008:	18d2      	addgt	r2, r2, r3
 80a600a:	4041      	eorgt	r1, r0
 80a600c:	4048      	eorgt	r0, r1
 80a600e:	4041      	eorgt	r1, r0
 80a6010:	bfb8      	it	lt
 80a6012:	425b      	neglt	r3, r3
 80a6014:	2b19      	cmp	r3, #25
 80a6016:	bf88      	it	hi
 80a6018:	4770      	bxhi	lr
 80a601a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a601e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a6022:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80a6026:	bf18      	it	ne
 80a6028:	4240      	negne	r0, r0
 80a602a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a602e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80a6032:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80a6036:	bf18      	it	ne
 80a6038:	4249      	negne	r1, r1
 80a603a:	ea92 0f03 	teq	r2, r3
 80a603e:	d03f      	beq.n	80a60c0 <__addsf3+0xd8>
 80a6040:	f1a2 0201 	sub.w	r2, r2, #1
 80a6044:	fa41 fc03 	asr.w	ip, r1, r3
 80a6048:	eb10 000c 	adds.w	r0, r0, ip
 80a604c:	f1c3 0320 	rsb	r3, r3, #32
 80a6050:	fa01 f103 	lsl.w	r1, r1, r3
 80a6054:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a6058:	d502      	bpl.n	80a6060 <__addsf3+0x78>
 80a605a:	4249      	negs	r1, r1
 80a605c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80a6060:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a6064:	d313      	bcc.n	80a608e <__addsf3+0xa6>
 80a6066:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80a606a:	d306      	bcc.n	80a607a <__addsf3+0x92>
 80a606c:	0840      	lsrs	r0, r0, #1
 80a606e:	ea4f 0131 	mov.w	r1, r1, rrx
 80a6072:	f102 0201 	add.w	r2, r2, #1
 80a6076:	2afe      	cmp	r2, #254	; 0xfe
 80a6078:	d251      	bcs.n	80a611e <__addsf3+0x136>
 80a607a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80a607e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a6082:	bf08      	it	eq
 80a6084:	f020 0001 	biceq.w	r0, r0, #1
 80a6088:	ea40 0003 	orr.w	r0, r0, r3
 80a608c:	4770      	bx	lr
 80a608e:	0049      	lsls	r1, r1, #1
 80a6090:	eb40 0000 	adc.w	r0, r0, r0
 80a6094:	3a01      	subs	r2, #1
 80a6096:	bf28      	it	cs
 80a6098:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80a609c:	d2ed      	bcs.n	80a607a <__addsf3+0x92>
 80a609e:	fab0 fc80 	clz	ip, r0
 80a60a2:	f1ac 0c08 	sub.w	ip, ip, #8
 80a60a6:	ebb2 020c 	subs.w	r2, r2, ip
 80a60aa:	fa00 f00c 	lsl.w	r0, r0, ip
 80a60ae:	bfaa      	itet	ge
 80a60b0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80a60b4:	4252      	neglt	r2, r2
 80a60b6:	4318      	orrge	r0, r3
 80a60b8:	bfbc      	itt	lt
 80a60ba:	40d0      	lsrlt	r0, r2
 80a60bc:	4318      	orrlt	r0, r3
 80a60be:	4770      	bx	lr
 80a60c0:	f092 0f00 	teq	r2, #0
 80a60c4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80a60c8:	bf06      	itte	eq
 80a60ca:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80a60ce:	3201      	addeq	r2, #1
 80a60d0:	3b01      	subne	r3, #1
 80a60d2:	e7b5      	b.n	80a6040 <__addsf3+0x58>
 80a60d4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a60d8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a60dc:	bf18      	it	ne
 80a60de:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a60e2:	d021      	beq.n	80a6128 <__addsf3+0x140>
 80a60e4:	ea92 0f03 	teq	r2, r3
 80a60e8:	d004      	beq.n	80a60f4 <__addsf3+0x10c>
 80a60ea:	f092 0f00 	teq	r2, #0
 80a60ee:	bf08      	it	eq
 80a60f0:	4608      	moveq	r0, r1
 80a60f2:	4770      	bx	lr
 80a60f4:	ea90 0f01 	teq	r0, r1
 80a60f8:	bf1c      	itt	ne
 80a60fa:	2000      	movne	r0, #0
 80a60fc:	4770      	bxne	lr
 80a60fe:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80a6102:	d104      	bne.n	80a610e <__addsf3+0x126>
 80a6104:	0040      	lsls	r0, r0, #1
 80a6106:	bf28      	it	cs
 80a6108:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80a610c:	4770      	bx	lr
 80a610e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80a6112:	bf3c      	itt	cc
 80a6114:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80a6118:	4770      	bxcc	lr
 80a611a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a611e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80a6122:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a6126:	4770      	bx	lr
 80a6128:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80a612c:	bf16      	itet	ne
 80a612e:	4608      	movne	r0, r1
 80a6130:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80a6134:	4601      	movne	r1, r0
 80a6136:	0242      	lsls	r2, r0, #9
 80a6138:	bf06      	itte	eq
 80a613a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80a613e:	ea90 0f01 	teqeq	r0, r1
 80a6142:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80a6146:	4770      	bx	lr

080a6148 <__aeabi_ui2f>:
 80a6148:	f04f 0300 	mov.w	r3, #0
 80a614c:	e004      	b.n	80a6158 <__aeabi_i2f+0x8>
 80a614e:	bf00      	nop

080a6150 <__aeabi_i2f>:
 80a6150:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80a6154:	bf48      	it	mi
 80a6156:	4240      	negmi	r0, r0
 80a6158:	ea5f 0c00 	movs.w	ip, r0
 80a615c:	bf08      	it	eq
 80a615e:	4770      	bxeq	lr
 80a6160:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80a6164:	4601      	mov	r1, r0
 80a6166:	f04f 0000 	mov.w	r0, #0
 80a616a:	e01c      	b.n	80a61a6 <__aeabi_l2f+0x2a>

080a616c <__aeabi_ul2f>:
 80a616c:	ea50 0201 	orrs.w	r2, r0, r1
 80a6170:	bf08      	it	eq
 80a6172:	4770      	bxeq	lr
 80a6174:	f04f 0300 	mov.w	r3, #0
 80a6178:	e00a      	b.n	80a6190 <__aeabi_l2f+0x14>
 80a617a:	bf00      	nop

080a617c <__aeabi_l2f>:
 80a617c:	ea50 0201 	orrs.w	r2, r0, r1
 80a6180:	bf08      	it	eq
 80a6182:	4770      	bxeq	lr
 80a6184:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80a6188:	d502      	bpl.n	80a6190 <__aeabi_l2f+0x14>
 80a618a:	4240      	negs	r0, r0
 80a618c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a6190:	ea5f 0c01 	movs.w	ip, r1
 80a6194:	bf02      	ittt	eq
 80a6196:	4684      	moveq	ip, r0
 80a6198:	4601      	moveq	r1, r0
 80a619a:	2000      	moveq	r0, #0
 80a619c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80a61a0:	bf08      	it	eq
 80a61a2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80a61a6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80a61aa:	fabc f28c 	clz	r2, ip
 80a61ae:	3a08      	subs	r2, #8
 80a61b0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80a61b4:	db10      	blt.n	80a61d8 <__aeabi_l2f+0x5c>
 80a61b6:	fa01 fc02 	lsl.w	ip, r1, r2
 80a61ba:	4463      	add	r3, ip
 80a61bc:	fa00 fc02 	lsl.w	ip, r0, r2
 80a61c0:	f1c2 0220 	rsb	r2, r2, #32
 80a61c4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a61c8:	fa20 f202 	lsr.w	r2, r0, r2
 80a61cc:	eb43 0002 	adc.w	r0, r3, r2
 80a61d0:	bf08      	it	eq
 80a61d2:	f020 0001 	biceq.w	r0, r0, #1
 80a61d6:	4770      	bx	lr
 80a61d8:	f102 0220 	add.w	r2, r2, #32
 80a61dc:	fa01 fc02 	lsl.w	ip, r1, r2
 80a61e0:	f1c2 0220 	rsb	r2, r2, #32
 80a61e4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80a61e8:	fa21 f202 	lsr.w	r2, r1, r2
 80a61ec:	eb43 0002 	adc.w	r0, r3, r2
 80a61f0:	bf08      	it	eq
 80a61f2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a61f6:	4770      	bx	lr

080a61f8 <__aeabi_fmul>:
 80a61f8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a61fc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a6200:	bf1e      	ittt	ne
 80a6202:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a6206:	ea92 0f0c 	teqne	r2, ip
 80a620a:	ea93 0f0c 	teqne	r3, ip
 80a620e:	d06f      	beq.n	80a62f0 <__aeabi_fmul+0xf8>
 80a6210:	441a      	add	r2, r3
 80a6212:	ea80 0c01 	eor.w	ip, r0, r1
 80a6216:	0240      	lsls	r0, r0, #9
 80a6218:	bf18      	it	ne
 80a621a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80a621e:	d01e      	beq.n	80a625e <__aeabi_fmul+0x66>
 80a6220:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80a6224:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80a6228:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80a622c:	fba0 3101 	umull	r3, r1, r0, r1
 80a6230:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a6234:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80a6238:	bf3e      	ittt	cc
 80a623a:	0049      	lslcc	r1, r1, #1
 80a623c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80a6240:	005b      	lslcc	r3, r3, #1
 80a6242:	ea40 0001 	orr.w	r0, r0, r1
 80a6246:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80a624a:	2afd      	cmp	r2, #253	; 0xfd
 80a624c:	d81d      	bhi.n	80a628a <__aeabi_fmul+0x92>
 80a624e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a6252:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a6256:	bf08      	it	eq
 80a6258:	f020 0001 	biceq.w	r0, r0, #1
 80a625c:	4770      	bx	lr
 80a625e:	f090 0f00 	teq	r0, #0
 80a6262:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a6266:	bf08      	it	eq
 80a6268:	0249      	lsleq	r1, r1, #9
 80a626a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a626e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80a6272:	3a7f      	subs	r2, #127	; 0x7f
 80a6274:	bfc2      	ittt	gt
 80a6276:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a627a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a627e:	4770      	bxgt	lr
 80a6280:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a6284:	f04f 0300 	mov.w	r3, #0
 80a6288:	3a01      	subs	r2, #1
 80a628a:	dc5d      	bgt.n	80a6348 <__aeabi_fmul+0x150>
 80a628c:	f112 0f19 	cmn.w	r2, #25
 80a6290:	bfdc      	itt	le
 80a6292:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80a6296:	4770      	bxle	lr
 80a6298:	f1c2 0200 	rsb	r2, r2, #0
 80a629c:	0041      	lsls	r1, r0, #1
 80a629e:	fa21 f102 	lsr.w	r1, r1, r2
 80a62a2:	f1c2 0220 	rsb	r2, r2, #32
 80a62a6:	fa00 fc02 	lsl.w	ip, r0, r2
 80a62aa:	ea5f 0031 	movs.w	r0, r1, rrx
 80a62ae:	f140 0000 	adc.w	r0, r0, #0
 80a62b2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80a62b6:	bf08      	it	eq
 80a62b8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a62bc:	4770      	bx	lr
 80a62be:	f092 0f00 	teq	r2, #0
 80a62c2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a62c6:	bf02      	ittt	eq
 80a62c8:	0040      	lsleq	r0, r0, #1
 80a62ca:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a62ce:	3a01      	subeq	r2, #1
 80a62d0:	d0f9      	beq.n	80a62c6 <__aeabi_fmul+0xce>
 80a62d2:	ea40 000c 	orr.w	r0, r0, ip
 80a62d6:	f093 0f00 	teq	r3, #0
 80a62da:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a62de:	bf02      	ittt	eq
 80a62e0:	0049      	lsleq	r1, r1, #1
 80a62e2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a62e6:	3b01      	subeq	r3, #1
 80a62e8:	d0f9      	beq.n	80a62de <__aeabi_fmul+0xe6>
 80a62ea:	ea41 010c 	orr.w	r1, r1, ip
 80a62ee:	e78f      	b.n	80a6210 <__aeabi_fmul+0x18>
 80a62f0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a62f4:	ea92 0f0c 	teq	r2, ip
 80a62f8:	bf18      	it	ne
 80a62fa:	ea93 0f0c 	teqne	r3, ip
 80a62fe:	d00a      	beq.n	80a6316 <__aeabi_fmul+0x11e>
 80a6300:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a6304:	bf18      	it	ne
 80a6306:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a630a:	d1d8      	bne.n	80a62be <__aeabi_fmul+0xc6>
 80a630c:	ea80 0001 	eor.w	r0, r0, r1
 80a6310:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a6314:	4770      	bx	lr
 80a6316:	f090 0f00 	teq	r0, #0
 80a631a:	bf17      	itett	ne
 80a631c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80a6320:	4608      	moveq	r0, r1
 80a6322:	f091 0f00 	teqne	r1, #0
 80a6326:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80a632a:	d014      	beq.n	80a6356 <__aeabi_fmul+0x15e>
 80a632c:	ea92 0f0c 	teq	r2, ip
 80a6330:	d101      	bne.n	80a6336 <__aeabi_fmul+0x13e>
 80a6332:	0242      	lsls	r2, r0, #9
 80a6334:	d10f      	bne.n	80a6356 <__aeabi_fmul+0x15e>
 80a6336:	ea93 0f0c 	teq	r3, ip
 80a633a:	d103      	bne.n	80a6344 <__aeabi_fmul+0x14c>
 80a633c:	024b      	lsls	r3, r1, #9
 80a633e:	bf18      	it	ne
 80a6340:	4608      	movne	r0, r1
 80a6342:	d108      	bne.n	80a6356 <__aeabi_fmul+0x15e>
 80a6344:	ea80 0001 	eor.w	r0, r0, r1
 80a6348:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a634c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a6350:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a6354:	4770      	bx	lr
 80a6356:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a635a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80a635e:	4770      	bx	lr

080a6360 <__aeabi_fdiv>:
 80a6360:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a6364:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a6368:	bf1e      	ittt	ne
 80a636a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a636e:	ea92 0f0c 	teqne	r2, ip
 80a6372:	ea93 0f0c 	teqne	r3, ip
 80a6376:	d069      	beq.n	80a644c <__aeabi_fdiv+0xec>
 80a6378:	eba2 0203 	sub.w	r2, r2, r3
 80a637c:	ea80 0c01 	eor.w	ip, r0, r1
 80a6380:	0249      	lsls	r1, r1, #9
 80a6382:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80a6386:	d037      	beq.n	80a63f8 <__aeabi_fdiv+0x98>
 80a6388:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80a638c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80a6390:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80a6394:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a6398:	428b      	cmp	r3, r1
 80a639a:	bf38      	it	cc
 80a639c:	005b      	lslcc	r3, r3, #1
 80a639e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80a63a2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80a63a6:	428b      	cmp	r3, r1
 80a63a8:	bf24      	itt	cs
 80a63aa:	1a5b      	subcs	r3, r3, r1
 80a63ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80a63b0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80a63b4:	bf24      	itt	cs
 80a63b6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80a63ba:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a63be:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80a63c2:	bf24      	itt	cs
 80a63c4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80a63c8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a63cc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80a63d0:	bf24      	itt	cs
 80a63d2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80a63d6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a63da:	011b      	lsls	r3, r3, #4
 80a63dc:	bf18      	it	ne
 80a63de:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80a63e2:	d1e0      	bne.n	80a63a6 <__aeabi_fdiv+0x46>
 80a63e4:	2afd      	cmp	r2, #253	; 0xfd
 80a63e6:	f63f af50 	bhi.w	80a628a <__aeabi_fmul+0x92>
 80a63ea:	428b      	cmp	r3, r1
 80a63ec:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a63f0:	bf08      	it	eq
 80a63f2:	f020 0001 	biceq.w	r0, r0, #1
 80a63f6:	4770      	bx	lr
 80a63f8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a63fc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a6400:	327f      	adds	r2, #127	; 0x7f
 80a6402:	bfc2      	ittt	gt
 80a6404:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a6408:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a640c:	4770      	bxgt	lr
 80a640e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a6412:	f04f 0300 	mov.w	r3, #0
 80a6416:	3a01      	subs	r2, #1
 80a6418:	e737      	b.n	80a628a <__aeabi_fmul+0x92>
 80a641a:	f092 0f00 	teq	r2, #0
 80a641e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a6422:	bf02      	ittt	eq
 80a6424:	0040      	lsleq	r0, r0, #1
 80a6426:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a642a:	3a01      	subeq	r2, #1
 80a642c:	d0f9      	beq.n	80a6422 <__aeabi_fdiv+0xc2>
 80a642e:	ea40 000c 	orr.w	r0, r0, ip
 80a6432:	f093 0f00 	teq	r3, #0
 80a6436:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a643a:	bf02      	ittt	eq
 80a643c:	0049      	lsleq	r1, r1, #1
 80a643e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a6442:	3b01      	subeq	r3, #1
 80a6444:	d0f9      	beq.n	80a643a <__aeabi_fdiv+0xda>
 80a6446:	ea41 010c 	orr.w	r1, r1, ip
 80a644a:	e795      	b.n	80a6378 <__aeabi_fdiv+0x18>
 80a644c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a6450:	ea92 0f0c 	teq	r2, ip
 80a6454:	d108      	bne.n	80a6468 <__aeabi_fdiv+0x108>
 80a6456:	0242      	lsls	r2, r0, #9
 80a6458:	f47f af7d 	bne.w	80a6356 <__aeabi_fmul+0x15e>
 80a645c:	ea93 0f0c 	teq	r3, ip
 80a6460:	f47f af70 	bne.w	80a6344 <__aeabi_fmul+0x14c>
 80a6464:	4608      	mov	r0, r1
 80a6466:	e776      	b.n	80a6356 <__aeabi_fmul+0x15e>
 80a6468:	ea93 0f0c 	teq	r3, ip
 80a646c:	d104      	bne.n	80a6478 <__aeabi_fdiv+0x118>
 80a646e:	024b      	lsls	r3, r1, #9
 80a6470:	f43f af4c 	beq.w	80a630c <__aeabi_fmul+0x114>
 80a6474:	4608      	mov	r0, r1
 80a6476:	e76e      	b.n	80a6356 <__aeabi_fmul+0x15e>
 80a6478:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a647c:	bf18      	it	ne
 80a647e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a6482:	d1ca      	bne.n	80a641a <__aeabi_fdiv+0xba>
 80a6484:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80a6488:	f47f af5c 	bne.w	80a6344 <__aeabi_fmul+0x14c>
 80a648c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80a6490:	f47f af3c 	bne.w	80a630c <__aeabi_fmul+0x114>
 80a6494:	e75f      	b.n	80a6356 <__aeabi_fmul+0x15e>
 80a6496:	bf00      	nop

080a6498 <__gesf2>:
 80a6498:	f04f 3cff 	mov.w	ip, #4294967295
 80a649c:	e006      	b.n	80a64ac <__cmpsf2+0x4>
 80a649e:	bf00      	nop

080a64a0 <__lesf2>:
 80a64a0:	f04f 0c01 	mov.w	ip, #1
 80a64a4:	e002      	b.n	80a64ac <__cmpsf2+0x4>
 80a64a6:	bf00      	nop

080a64a8 <__cmpsf2>:
 80a64a8:	f04f 0c01 	mov.w	ip, #1
 80a64ac:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a64b0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a64b4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a64b8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a64bc:	bf18      	it	ne
 80a64be:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a64c2:	d011      	beq.n	80a64e8 <__cmpsf2+0x40>
 80a64c4:	b001      	add	sp, #4
 80a64c6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80a64ca:	bf18      	it	ne
 80a64cc:	ea90 0f01 	teqne	r0, r1
 80a64d0:	bf58      	it	pl
 80a64d2:	ebb2 0003 	subspl.w	r0, r2, r3
 80a64d6:	bf88      	it	hi
 80a64d8:	17c8      	asrhi	r0, r1, #31
 80a64da:	bf38      	it	cc
 80a64dc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80a64e0:	bf18      	it	ne
 80a64e2:	f040 0001 	orrne.w	r0, r0, #1
 80a64e6:	4770      	bx	lr
 80a64e8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a64ec:	d102      	bne.n	80a64f4 <__cmpsf2+0x4c>
 80a64ee:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80a64f2:	d105      	bne.n	80a6500 <__cmpsf2+0x58>
 80a64f4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80a64f8:	d1e4      	bne.n	80a64c4 <__cmpsf2+0x1c>
 80a64fa:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80a64fe:	d0e1      	beq.n	80a64c4 <__cmpsf2+0x1c>
 80a6500:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a6504:	4770      	bx	lr
 80a6506:	bf00      	nop

080a6508 <__aeabi_cfrcmple>:
 80a6508:	4684      	mov	ip, r0
 80a650a:	4608      	mov	r0, r1
 80a650c:	4661      	mov	r1, ip
 80a650e:	e7ff      	b.n	80a6510 <__aeabi_cfcmpeq>

080a6510 <__aeabi_cfcmpeq>:
 80a6510:	b50f      	push	{r0, r1, r2, r3, lr}
 80a6512:	f7ff ffc9 	bl	80a64a8 <__cmpsf2>
 80a6516:	2800      	cmp	r0, #0
 80a6518:	bf48      	it	mi
 80a651a:	f110 0f00 	cmnmi.w	r0, #0
 80a651e:	bd0f      	pop	{r0, r1, r2, r3, pc}

080a6520 <__aeabi_fcmpeq>:
 80a6520:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a6524:	f7ff fff4 	bl	80a6510 <__aeabi_cfcmpeq>
 80a6528:	bf0c      	ite	eq
 80a652a:	2001      	moveq	r0, #1
 80a652c:	2000      	movne	r0, #0
 80a652e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a6532:	bf00      	nop

080a6534 <__aeabi_fcmplt>:
 80a6534:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a6538:	f7ff ffea 	bl	80a6510 <__aeabi_cfcmpeq>
 80a653c:	bf34      	ite	cc
 80a653e:	2001      	movcc	r0, #1
 80a6540:	2000      	movcs	r0, #0
 80a6542:	f85d fb08 	ldr.w	pc, [sp], #8
 80a6546:	bf00      	nop

080a6548 <__aeabi_fcmple>:
 80a6548:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a654c:	f7ff ffe0 	bl	80a6510 <__aeabi_cfcmpeq>
 80a6550:	bf94      	ite	ls
 80a6552:	2001      	movls	r0, #1
 80a6554:	2000      	movhi	r0, #0
 80a6556:	f85d fb08 	ldr.w	pc, [sp], #8
 80a655a:	bf00      	nop

080a655c <__aeabi_fcmpge>:
 80a655c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a6560:	f7ff ffd2 	bl	80a6508 <__aeabi_cfrcmple>
 80a6564:	bf94      	ite	ls
 80a6566:	2001      	movls	r0, #1
 80a6568:	2000      	movhi	r0, #0
 80a656a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a656e:	bf00      	nop

080a6570 <__aeabi_fcmpgt>:
 80a6570:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a6574:	f7ff ffc8 	bl	80a6508 <__aeabi_cfrcmple>
 80a6578:	bf34      	ite	cc
 80a657a:	2001      	movcc	r0, #1
 80a657c:	2000      	movcs	r0, #0
 80a657e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a6582:	bf00      	nop

080a6584 <__aeabi_uldivmod>:
 80a6584:	b953      	cbnz	r3, 80a659c <__aeabi_uldivmod+0x18>
 80a6586:	b94a      	cbnz	r2, 80a659c <__aeabi_uldivmod+0x18>
 80a6588:	2900      	cmp	r1, #0
 80a658a:	bf08      	it	eq
 80a658c:	2800      	cmpeq	r0, #0
 80a658e:	bf1c      	itt	ne
 80a6590:	f04f 31ff 	movne.w	r1, #4294967295
 80a6594:	f04f 30ff 	movne.w	r0, #4294967295
 80a6598:	f000 b9c0 	b.w	80a691c <__aeabi_idiv0>
 80a659c:	f1ad 0c08 	sub.w	ip, sp, #8
 80a65a0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80a65a4:	f000 f858 	bl	80a6658 <__udivmoddi4>
 80a65a8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a65ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a65b0:	b004      	add	sp, #16
 80a65b2:	4770      	bx	lr

080a65b4 <__aeabi_f2lz>:
 80a65b4:	b510      	push	{r4, lr}
 80a65b6:	2100      	movs	r1, #0
 80a65b8:	4604      	mov	r4, r0
 80a65ba:	f7ff ffbb 	bl	80a6534 <__aeabi_fcmplt>
 80a65be:	b920      	cbnz	r0, 80a65ca <__aeabi_f2lz+0x16>
 80a65c0:	4620      	mov	r0, r4
 80a65c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a65c6:	f000 b809 	b.w	80a65dc <__aeabi_f2ulz>
 80a65ca:	f104 4000 	add.w	r0, r4, #2147483648	; 0x80000000
 80a65ce:	f000 f805 	bl	80a65dc <__aeabi_f2ulz>
 80a65d2:	4240      	negs	r0, r0
 80a65d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a65d8:	bd10      	pop	{r4, pc}
 80a65da:	bf00      	nop

080a65dc <__aeabi_f2ulz>:
 80a65dc:	b5d0      	push	{r4, r6, r7, lr}
 80a65de:	f7ff f9ad 	bl	80a593c <__aeabi_f2d>
 80a65e2:	2200      	movs	r2, #0
 80a65e4:	4b0b      	ldr	r3, [pc, #44]	; (80a6614 <__aeabi_f2ulz+0x38>)
 80a65e6:	4606      	mov	r6, r0
 80a65e8:	460f      	mov	r7, r1
 80a65ea:	f7ff f9ff 	bl	80a59ec <__aeabi_dmul>
 80a65ee:	f7ff fcd5 	bl	80a5f9c <__aeabi_d2uiz>
 80a65f2:	4604      	mov	r4, r0
 80a65f4:	f7ff f980 	bl	80a58f8 <__aeabi_ui2d>
 80a65f8:	2200      	movs	r2, #0
 80a65fa:	4b07      	ldr	r3, [pc, #28]	; (80a6618 <__aeabi_f2ulz+0x3c>)
 80a65fc:	f7ff f9f6 	bl	80a59ec <__aeabi_dmul>
 80a6600:	4602      	mov	r2, r0
 80a6602:	460b      	mov	r3, r1
 80a6604:	4630      	mov	r0, r6
 80a6606:	4639      	mov	r1, r7
 80a6608:	f7ff f838 	bl	80a567c <__aeabi_dsub>
 80a660c:	f7ff fcc6 	bl	80a5f9c <__aeabi_d2uiz>
 80a6610:	4621      	mov	r1, r4
 80a6612:	bdd0      	pop	{r4, r6, r7, pc}
 80a6614:	3df00000 	.word	0x3df00000
 80a6618:	41f00000 	.word	0x41f00000

080a661c <__aeabi_d2ulz>:
 80a661c:	b5d0      	push	{r4, r6, r7, lr}
 80a661e:	2200      	movs	r2, #0
 80a6620:	4b0b      	ldr	r3, [pc, #44]	; (80a6650 <__aeabi_d2ulz+0x34>)
 80a6622:	4606      	mov	r6, r0
 80a6624:	460f      	mov	r7, r1
 80a6626:	f7ff f9e1 	bl	80a59ec <__aeabi_dmul>
 80a662a:	f7ff fcb7 	bl	80a5f9c <__aeabi_d2uiz>
 80a662e:	4604      	mov	r4, r0
 80a6630:	f7ff f962 	bl	80a58f8 <__aeabi_ui2d>
 80a6634:	2200      	movs	r2, #0
 80a6636:	4b07      	ldr	r3, [pc, #28]	; (80a6654 <__aeabi_d2ulz+0x38>)
 80a6638:	f7ff f9d8 	bl	80a59ec <__aeabi_dmul>
 80a663c:	4602      	mov	r2, r0
 80a663e:	460b      	mov	r3, r1
 80a6640:	4630      	mov	r0, r6
 80a6642:	4639      	mov	r1, r7
 80a6644:	f7ff f81a 	bl	80a567c <__aeabi_dsub>
 80a6648:	f7ff fca8 	bl	80a5f9c <__aeabi_d2uiz>
 80a664c:	4621      	mov	r1, r4
 80a664e:	bdd0      	pop	{r4, r6, r7, pc}
 80a6650:	3df00000 	.word	0x3df00000
 80a6654:	41f00000 	.word	0x41f00000

080a6658 <__udivmoddi4>:
 80a6658:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a665c:	9e08      	ldr	r6, [sp, #32]
 80a665e:	460d      	mov	r5, r1
 80a6660:	4604      	mov	r4, r0
 80a6662:	468e      	mov	lr, r1
 80a6664:	2b00      	cmp	r3, #0
 80a6666:	f040 8083 	bne.w	80a6770 <__udivmoddi4+0x118>
 80a666a:	428a      	cmp	r2, r1
 80a666c:	4617      	mov	r7, r2
 80a666e:	d947      	bls.n	80a6700 <__udivmoddi4+0xa8>
 80a6670:	fab2 f382 	clz	r3, r2
 80a6674:	b14b      	cbz	r3, 80a668a <__udivmoddi4+0x32>
 80a6676:	f1c3 0120 	rsb	r1, r3, #32
 80a667a:	fa05 fe03 	lsl.w	lr, r5, r3
 80a667e:	fa20 f101 	lsr.w	r1, r0, r1
 80a6682:	409f      	lsls	r7, r3
 80a6684:	ea41 0e0e 	orr.w	lr, r1, lr
 80a6688:	409c      	lsls	r4, r3
 80a668a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80a668e:	fbbe fcf8 	udiv	ip, lr, r8
 80a6692:	fa1f f987 	uxth.w	r9, r7
 80a6696:	fb08 e21c 	mls	r2, r8, ip, lr
 80a669a:	fb0c f009 	mul.w	r0, ip, r9
 80a669e:	0c21      	lsrs	r1, r4, #16
 80a66a0:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 80a66a4:	4290      	cmp	r0, r2
 80a66a6:	d90a      	bls.n	80a66be <__udivmoddi4+0x66>
 80a66a8:	18ba      	adds	r2, r7, r2
 80a66aa:	f10c 31ff 	add.w	r1, ip, #4294967295
 80a66ae:	f080 8118 	bcs.w	80a68e2 <__udivmoddi4+0x28a>
 80a66b2:	4290      	cmp	r0, r2
 80a66b4:	f240 8115 	bls.w	80a68e2 <__udivmoddi4+0x28a>
 80a66b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80a66bc:	443a      	add	r2, r7
 80a66be:	1a12      	subs	r2, r2, r0
 80a66c0:	fbb2 f0f8 	udiv	r0, r2, r8
 80a66c4:	fb08 2210 	mls	r2, r8, r0, r2
 80a66c8:	fb00 f109 	mul.w	r1, r0, r9
 80a66cc:	b2a4      	uxth	r4, r4
 80a66ce:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80a66d2:	42a1      	cmp	r1, r4
 80a66d4:	d909      	bls.n	80a66ea <__udivmoddi4+0x92>
 80a66d6:	193c      	adds	r4, r7, r4
 80a66d8:	f100 32ff 	add.w	r2, r0, #4294967295
 80a66dc:	f080 8103 	bcs.w	80a68e6 <__udivmoddi4+0x28e>
 80a66e0:	42a1      	cmp	r1, r4
 80a66e2:	f240 8100 	bls.w	80a68e6 <__udivmoddi4+0x28e>
 80a66e6:	3802      	subs	r0, #2
 80a66e8:	443c      	add	r4, r7
 80a66ea:	1a64      	subs	r4, r4, r1
 80a66ec:	2100      	movs	r1, #0
 80a66ee:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80a66f2:	b11e      	cbz	r6, 80a66fc <__udivmoddi4+0xa4>
 80a66f4:	2200      	movs	r2, #0
 80a66f6:	40dc      	lsrs	r4, r3
 80a66f8:	e9c6 4200 	strd	r4, r2, [r6]
 80a66fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a6700:	b902      	cbnz	r2, 80a6704 <__udivmoddi4+0xac>
 80a6702:	deff      	udf	#255	; 0xff
 80a6704:	fab2 f382 	clz	r3, r2
 80a6708:	2b00      	cmp	r3, #0
 80a670a:	d14f      	bne.n	80a67ac <__udivmoddi4+0x154>
 80a670c:	1a8d      	subs	r5, r1, r2
 80a670e:	2101      	movs	r1, #1
 80a6710:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80a6714:	fa1f f882 	uxth.w	r8, r2
 80a6718:	fbb5 fcfe 	udiv	ip, r5, lr
 80a671c:	fb0e 551c 	mls	r5, lr, ip, r5
 80a6720:	fb08 f00c 	mul.w	r0, r8, ip
 80a6724:	0c22      	lsrs	r2, r4, #16
 80a6726:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 80a672a:	42a8      	cmp	r0, r5
 80a672c:	d907      	bls.n	80a673e <__udivmoddi4+0xe6>
 80a672e:	197d      	adds	r5, r7, r5
 80a6730:	f10c 32ff 	add.w	r2, ip, #4294967295
 80a6734:	d202      	bcs.n	80a673c <__udivmoddi4+0xe4>
 80a6736:	42a8      	cmp	r0, r5
 80a6738:	f200 80e9 	bhi.w	80a690e <__udivmoddi4+0x2b6>
 80a673c:	4694      	mov	ip, r2
 80a673e:	1a2d      	subs	r5, r5, r0
 80a6740:	fbb5 f0fe 	udiv	r0, r5, lr
 80a6744:	fb0e 5510 	mls	r5, lr, r0, r5
 80a6748:	fb08 f800 	mul.w	r8, r8, r0
 80a674c:	b2a4      	uxth	r4, r4
 80a674e:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80a6752:	45a0      	cmp	r8, r4
 80a6754:	d907      	bls.n	80a6766 <__udivmoddi4+0x10e>
 80a6756:	193c      	adds	r4, r7, r4
 80a6758:	f100 32ff 	add.w	r2, r0, #4294967295
 80a675c:	d202      	bcs.n	80a6764 <__udivmoddi4+0x10c>
 80a675e:	45a0      	cmp	r8, r4
 80a6760:	f200 80d9 	bhi.w	80a6916 <__udivmoddi4+0x2be>
 80a6764:	4610      	mov	r0, r2
 80a6766:	eba4 0408 	sub.w	r4, r4, r8
 80a676a:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80a676e:	e7c0      	b.n	80a66f2 <__udivmoddi4+0x9a>
 80a6770:	428b      	cmp	r3, r1
 80a6772:	d908      	bls.n	80a6786 <__udivmoddi4+0x12e>
 80a6774:	2e00      	cmp	r6, #0
 80a6776:	f000 80b1 	beq.w	80a68dc <__udivmoddi4+0x284>
 80a677a:	2100      	movs	r1, #0
 80a677c:	e9c6 0500 	strd	r0, r5, [r6]
 80a6780:	4608      	mov	r0, r1
 80a6782:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a6786:	fab3 f183 	clz	r1, r3
 80a678a:	2900      	cmp	r1, #0
 80a678c:	d14b      	bne.n	80a6826 <__udivmoddi4+0x1ce>
 80a678e:	42ab      	cmp	r3, r5
 80a6790:	d302      	bcc.n	80a6798 <__udivmoddi4+0x140>
 80a6792:	4282      	cmp	r2, r0
 80a6794:	f200 80b9 	bhi.w	80a690a <__udivmoddi4+0x2b2>
 80a6798:	1a84      	subs	r4, r0, r2
 80a679a:	eb65 0303 	sbc.w	r3, r5, r3
 80a679e:	2001      	movs	r0, #1
 80a67a0:	469e      	mov	lr, r3
 80a67a2:	2e00      	cmp	r6, #0
 80a67a4:	d0aa      	beq.n	80a66fc <__udivmoddi4+0xa4>
 80a67a6:	e9c6 4e00 	strd	r4, lr, [r6]
 80a67aa:	e7a7      	b.n	80a66fc <__udivmoddi4+0xa4>
 80a67ac:	409f      	lsls	r7, r3
 80a67ae:	f1c3 0220 	rsb	r2, r3, #32
 80a67b2:	40d1      	lsrs	r1, r2
 80a67b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80a67b8:	fbb1 f0fe 	udiv	r0, r1, lr
 80a67bc:	fa1f f887 	uxth.w	r8, r7
 80a67c0:	fb0e 1110 	mls	r1, lr, r0, r1
 80a67c4:	fa24 f202 	lsr.w	r2, r4, r2
 80a67c8:	409d      	lsls	r5, r3
 80a67ca:	fb00 fc08 	mul.w	ip, r0, r8
 80a67ce:	432a      	orrs	r2, r5
 80a67d0:	0c15      	lsrs	r5, r2, #16
 80a67d2:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 80a67d6:	45ac      	cmp	ip, r5
 80a67d8:	fa04 f403 	lsl.w	r4, r4, r3
 80a67dc:	d909      	bls.n	80a67f2 <__udivmoddi4+0x19a>
 80a67de:	197d      	adds	r5, r7, r5
 80a67e0:	f100 31ff 	add.w	r1, r0, #4294967295
 80a67e4:	f080 808f 	bcs.w	80a6906 <__udivmoddi4+0x2ae>
 80a67e8:	45ac      	cmp	ip, r5
 80a67ea:	f240 808c 	bls.w	80a6906 <__udivmoddi4+0x2ae>
 80a67ee:	3802      	subs	r0, #2
 80a67f0:	443d      	add	r5, r7
 80a67f2:	eba5 050c 	sub.w	r5, r5, ip
 80a67f6:	fbb5 f1fe 	udiv	r1, r5, lr
 80a67fa:	fb0e 5c11 	mls	ip, lr, r1, r5
 80a67fe:	fb01 f908 	mul.w	r9, r1, r8
 80a6802:	b295      	uxth	r5, r2
 80a6804:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80a6808:	45a9      	cmp	r9, r5
 80a680a:	d907      	bls.n	80a681c <__udivmoddi4+0x1c4>
 80a680c:	197d      	adds	r5, r7, r5
 80a680e:	f101 32ff 	add.w	r2, r1, #4294967295
 80a6812:	d274      	bcs.n	80a68fe <__udivmoddi4+0x2a6>
 80a6814:	45a9      	cmp	r9, r5
 80a6816:	d972      	bls.n	80a68fe <__udivmoddi4+0x2a6>
 80a6818:	3902      	subs	r1, #2
 80a681a:	443d      	add	r5, r7
 80a681c:	eba5 0509 	sub.w	r5, r5, r9
 80a6820:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80a6824:	e778      	b.n	80a6718 <__udivmoddi4+0xc0>
 80a6826:	f1c1 0720 	rsb	r7, r1, #32
 80a682a:	408b      	lsls	r3, r1
 80a682c:	fa22 fc07 	lsr.w	ip, r2, r7
 80a6830:	ea4c 0c03 	orr.w	ip, ip, r3
 80a6834:	fa25 f407 	lsr.w	r4, r5, r7
 80a6838:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80a683c:	fbb4 f9fe 	udiv	r9, r4, lr
 80a6840:	fa1f f88c 	uxth.w	r8, ip
 80a6844:	fb0e 4419 	mls	r4, lr, r9, r4
 80a6848:	fa20 f307 	lsr.w	r3, r0, r7
 80a684c:	fb09 fa08 	mul.w	sl, r9, r8
 80a6850:	408d      	lsls	r5, r1
 80a6852:	431d      	orrs	r5, r3
 80a6854:	0c2b      	lsrs	r3, r5, #16
 80a6856:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80a685a:	45a2      	cmp	sl, r4
 80a685c:	fa02 f201 	lsl.w	r2, r2, r1
 80a6860:	fa00 f301 	lsl.w	r3, r0, r1
 80a6864:	d909      	bls.n	80a687a <__udivmoddi4+0x222>
 80a6866:	eb1c 0404 	adds.w	r4, ip, r4
 80a686a:	f109 30ff 	add.w	r0, r9, #4294967295
 80a686e:	d248      	bcs.n	80a6902 <__udivmoddi4+0x2aa>
 80a6870:	45a2      	cmp	sl, r4
 80a6872:	d946      	bls.n	80a6902 <__udivmoddi4+0x2aa>
 80a6874:	f1a9 0902 	sub.w	r9, r9, #2
 80a6878:	4464      	add	r4, ip
 80a687a:	eba4 040a 	sub.w	r4, r4, sl
 80a687e:	fbb4 f0fe 	udiv	r0, r4, lr
 80a6882:	fb0e 4410 	mls	r4, lr, r0, r4
 80a6886:	fb00 fa08 	mul.w	sl, r0, r8
 80a688a:	b2ad      	uxth	r5, r5
 80a688c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80a6890:	45a2      	cmp	sl, r4
 80a6892:	d908      	bls.n	80a68a6 <__udivmoddi4+0x24e>
 80a6894:	eb1c 0404 	adds.w	r4, ip, r4
 80a6898:	f100 35ff 	add.w	r5, r0, #4294967295
 80a689c:	d22d      	bcs.n	80a68fa <__udivmoddi4+0x2a2>
 80a689e:	45a2      	cmp	sl, r4
 80a68a0:	d92b      	bls.n	80a68fa <__udivmoddi4+0x2a2>
 80a68a2:	3802      	subs	r0, #2
 80a68a4:	4464      	add	r4, ip
 80a68a6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80a68aa:	fba0 8902 	umull	r8, r9, r0, r2
 80a68ae:	eba4 040a 	sub.w	r4, r4, sl
 80a68b2:	454c      	cmp	r4, r9
 80a68b4:	46c6      	mov	lr, r8
 80a68b6:	464d      	mov	r5, r9
 80a68b8:	d319      	bcc.n	80a68ee <__udivmoddi4+0x296>
 80a68ba:	d016      	beq.n	80a68ea <__udivmoddi4+0x292>
 80a68bc:	b15e      	cbz	r6, 80a68d6 <__udivmoddi4+0x27e>
 80a68be:	ebb3 020e 	subs.w	r2, r3, lr
 80a68c2:	eb64 0405 	sbc.w	r4, r4, r5
 80a68c6:	fa04 f707 	lsl.w	r7, r4, r7
 80a68ca:	fa22 f301 	lsr.w	r3, r2, r1
 80a68ce:	431f      	orrs	r7, r3
 80a68d0:	40cc      	lsrs	r4, r1
 80a68d2:	e9c6 7400 	strd	r7, r4, [r6]
 80a68d6:	2100      	movs	r1, #0
 80a68d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a68dc:	4631      	mov	r1, r6
 80a68de:	4630      	mov	r0, r6
 80a68e0:	e70c      	b.n	80a66fc <__udivmoddi4+0xa4>
 80a68e2:	468c      	mov	ip, r1
 80a68e4:	e6eb      	b.n	80a66be <__udivmoddi4+0x66>
 80a68e6:	4610      	mov	r0, r2
 80a68e8:	e6ff      	b.n	80a66ea <__udivmoddi4+0x92>
 80a68ea:	4543      	cmp	r3, r8
 80a68ec:	d2e6      	bcs.n	80a68bc <__udivmoddi4+0x264>
 80a68ee:	ebb8 0e02 	subs.w	lr, r8, r2
 80a68f2:	eb69 050c 	sbc.w	r5, r9, ip
 80a68f6:	3801      	subs	r0, #1
 80a68f8:	e7e0      	b.n	80a68bc <__udivmoddi4+0x264>
 80a68fa:	4628      	mov	r0, r5
 80a68fc:	e7d3      	b.n	80a68a6 <__udivmoddi4+0x24e>
 80a68fe:	4611      	mov	r1, r2
 80a6900:	e78c      	b.n	80a681c <__udivmoddi4+0x1c4>
 80a6902:	4681      	mov	r9, r0
 80a6904:	e7b9      	b.n	80a687a <__udivmoddi4+0x222>
 80a6906:	4608      	mov	r0, r1
 80a6908:	e773      	b.n	80a67f2 <__udivmoddi4+0x19a>
 80a690a:	4608      	mov	r0, r1
 80a690c:	e749      	b.n	80a67a2 <__udivmoddi4+0x14a>
 80a690e:	f1ac 0c02 	sub.w	ip, ip, #2
 80a6912:	443d      	add	r5, r7
 80a6914:	e713      	b.n	80a673e <__udivmoddi4+0xe6>
 80a6916:	3802      	subs	r0, #2
 80a6918:	443c      	add	r4, r7
 80a691a:	e724      	b.n	80a6766 <__udivmoddi4+0x10e>

080a691c <__aeabi_idiv0>:
 80a691c:	4770      	bx	lr
 80a691e:	bf00      	nop

080a6920 <asctime_r>:
 80a6920:	b510      	push	{r4, lr}
 80a6922:	460c      	mov	r4, r1
 80a6924:	6941      	ldr	r1, [r0, #20]
 80a6926:	b086      	sub	sp, #24
 80a6928:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 80a692c:	6903      	ldr	r3, [r0, #16]
 80a692e:	6982      	ldr	r2, [r0, #24]
 80a6930:	9104      	str	r1, [sp, #16]
 80a6932:	6801      	ldr	r1, [r0, #0]
 80a6934:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80a6938:	9103      	str	r1, [sp, #12]
 80a693a:	6841      	ldr	r1, [r0, #4]
 80a693c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80a6940:	9102      	str	r1, [sp, #8]
 80a6942:	6881      	ldr	r1, [r0, #8]
 80a6944:	9101      	str	r1, [sp, #4]
 80a6946:	68c1      	ldr	r1, [r0, #12]
 80a6948:	4620      	mov	r0, r4
 80a694a:	9100      	str	r1, [sp, #0]
 80a694c:	4904      	ldr	r1, [pc, #16]	; (80a6960 <asctime_r+0x40>)
 80a694e:	440b      	add	r3, r1
 80a6950:	4904      	ldr	r1, [pc, #16]	; (80a6964 <asctime_r+0x44>)
 80a6952:	440a      	add	r2, r1
 80a6954:	4904      	ldr	r1, [pc, #16]	; (80a6968 <asctime_r+0x48>)
 80a6956:	f7fd f815 	bl	80a3984 <siprintf>
 80a695a:	4620      	mov	r0, r4
 80a695c:	b006      	add	sp, #24
 80a695e:	bd10      	pop	{r4, pc}
 80a6960:	080a89b6 	.word	0x080a89b6
 80a6964:	080a89a1 	.word	0x080a89a1
 80a6968:	080a8981 	.word	0x080a8981

080a696c <atol>:
 80a696c:	220a      	movs	r2, #10
 80a696e:	2100      	movs	r1, #0
 80a6970:	f000 bf5a 	b.w	80a7828 <strtol>

080a6974 <__cxa_atexit>:
 80a6974:	b510      	push	{r4, lr}
 80a6976:	4604      	mov	r4, r0
 80a6978:	4804      	ldr	r0, [pc, #16]	; (80a698c <__cxa_atexit+0x18>)
 80a697a:	4613      	mov	r3, r2
 80a697c:	b120      	cbz	r0, 80a6988 <__cxa_atexit+0x14>
 80a697e:	460a      	mov	r2, r1
 80a6980:	2002      	movs	r0, #2
 80a6982:	4621      	mov	r1, r4
 80a6984:	f3af 8000 	nop.w
 80a6988:	bd10      	pop	{r4, pc}
 80a698a:	bf00      	nop
 80a698c:	00000000 	.word	0x00000000

080a6990 <localtime_r>:
 80a6990:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a6994:	460c      	mov	r4, r1
 80a6996:	4607      	mov	r7, r0
 80a6998:	f001 fa56 	bl	80a7e48 <__gettzinfo>
 80a699c:	4621      	mov	r1, r4
 80a699e:	4680      	mov	r8, r0
 80a69a0:	4638      	mov	r0, r7
 80a69a2:	f001 fa55 	bl	80a7e50 <gmtime_r>
 80a69a6:	6943      	ldr	r3, [r0, #20]
 80a69a8:	4604      	mov	r4, r0
 80a69aa:	079a      	lsls	r2, r3, #30
 80a69ac:	f203 766c 	addw	r6, r3, #1900	; 0x76c
 80a69b0:	d105      	bne.n	80a69be <localtime_r+0x2e>
 80a69b2:	2264      	movs	r2, #100	; 0x64
 80a69b4:	fb96 f3f2 	sdiv	r3, r6, r2
 80a69b8:	fb02 6313 	mls	r3, r2, r3, r6
 80a69bc:	bb7b      	cbnz	r3, 80a6a1e <localtime_r+0x8e>
 80a69be:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80a69c2:	fb96 f5f3 	sdiv	r5, r6, r3
 80a69c6:	fb03 6515 	mls	r5, r3, r5, r6
 80a69ca:	fab5 f585 	clz	r5, r5
 80a69ce:	096d      	lsrs	r5, r5, #5
 80a69d0:	2230      	movs	r2, #48	; 0x30
 80a69d2:	4b68      	ldr	r3, [pc, #416]	; (80a6b74 <localtime_r+0x1e4>)
 80a69d4:	fb02 3505 	mla	r5, r2, r5, r3
 80a69d8:	f001 f85e 	bl	80a7a98 <__tz_lock>
 80a69dc:	f001 f868 	bl	80a7ab0 <_tzset_unlocked>
 80a69e0:	4b65      	ldr	r3, [pc, #404]	; (80a6b78 <localtime_r+0x1e8>)
 80a69e2:	681b      	ldr	r3, [r3, #0]
 80a69e4:	b353      	cbz	r3, 80a6a3c <localtime_r+0xac>
 80a69e6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80a69ea:	42b3      	cmp	r3, r6
 80a69ec:	d119      	bne.n	80a6a22 <localtime_r+0x92>
 80a69ee:	e9d7 6700 	ldrd	r6, r7, [r7]
 80a69f2:	e9d8 2308 	ldrd	r2, r3, [r8, #32]
 80a69f6:	f8d8 1000 	ldr.w	r1, [r8]
 80a69fa:	b9d1      	cbnz	r1, 80a6a32 <localtime_r+0xa2>
 80a69fc:	4296      	cmp	r6, r2
 80a69fe:	eb77 0303 	sbcs.w	r3, r7, r3
 80a6a02:	da23      	bge.n	80a6a4c <localtime_r+0xbc>
 80a6a04:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 80a6a08:	4296      	cmp	r6, r2
 80a6a0a:	eb77 0303 	sbcs.w	r3, r7, r3
 80a6a0e:	bfb4      	ite	lt
 80a6a10:	2301      	movlt	r3, #1
 80a6a12:	2300      	movge	r3, #0
 80a6a14:	6223      	str	r3, [r4, #32]
 80a6a16:	db1b      	blt.n	80a6a50 <localtime_r+0xc0>
 80a6a18:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
 80a6a1c:	e01a      	b.n	80a6a54 <localtime_r+0xc4>
 80a6a1e:	2501      	movs	r5, #1
 80a6a20:	e7d6      	b.n	80a69d0 <localtime_r+0x40>
 80a6a22:	4630      	mov	r0, r6
 80a6a24:	f000 ff90 	bl	80a7948 <__tzcalc_limits>
 80a6a28:	2800      	cmp	r0, #0
 80a6a2a:	d1e0      	bne.n	80a69ee <localtime_r+0x5e>
 80a6a2c:	f04f 33ff 	mov.w	r3, #4294967295
 80a6a30:	e004      	b.n	80a6a3c <localtime_r+0xac>
 80a6a32:	4296      	cmp	r6, r2
 80a6a34:	eb77 0303 	sbcs.w	r3, r7, r3
 80a6a38:	da02      	bge.n	80a6a40 <localtime_r+0xb0>
 80a6a3a:	2300      	movs	r3, #0
 80a6a3c:	6223      	str	r3, [r4, #32]
 80a6a3e:	e7eb      	b.n	80a6a18 <localtime_r+0x88>
 80a6a40:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 80a6a44:	4296      	cmp	r6, r2
 80a6a46:	eb77 0303 	sbcs.w	r3, r7, r3
 80a6a4a:	daf6      	bge.n	80a6a3a <localtime_r+0xaa>
 80a6a4c:	2301      	movs	r3, #1
 80a6a4e:	6223      	str	r3, [r4, #32]
 80a6a50:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
 80a6a54:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80a6a58:	fb91 f6f3 	sdiv	r6, r1, r3
 80a6a5c:	203c      	movs	r0, #60	; 0x3c
 80a6a5e:	fb03 1316 	mls	r3, r3, r6, r1
 80a6a62:	fb93 f2f0 	sdiv	r2, r3, r0
 80a6a66:	fb00 3012 	mls	r0, r0, r2, r3
 80a6a6a:	6861      	ldr	r1, [r4, #4]
 80a6a6c:	6823      	ldr	r3, [r4, #0]
 80a6a6e:	1a89      	subs	r1, r1, r2
 80a6a70:	68a2      	ldr	r2, [r4, #8]
 80a6a72:	1a1b      	subs	r3, r3, r0
 80a6a74:	1b92      	subs	r2, r2, r6
 80a6a76:	2b3b      	cmp	r3, #59	; 0x3b
 80a6a78:	6023      	str	r3, [r4, #0]
 80a6a7a:	6061      	str	r1, [r4, #4]
 80a6a7c:	60a2      	str	r2, [r4, #8]
 80a6a7e:	dd34      	ble.n	80a6aea <localtime_r+0x15a>
 80a6a80:	3101      	adds	r1, #1
 80a6a82:	6061      	str	r1, [r4, #4]
 80a6a84:	3b3c      	subs	r3, #60	; 0x3c
 80a6a86:	6023      	str	r3, [r4, #0]
 80a6a88:	6863      	ldr	r3, [r4, #4]
 80a6a8a:	2b3b      	cmp	r3, #59	; 0x3b
 80a6a8c:	dd33      	ble.n	80a6af6 <localtime_r+0x166>
 80a6a8e:	3201      	adds	r2, #1
 80a6a90:	60a2      	str	r2, [r4, #8]
 80a6a92:	3b3c      	subs	r3, #60	; 0x3c
 80a6a94:	6063      	str	r3, [r4, #4]
 80a6a96:	68a3      	ldr	r3, [r4, #8]
 80a6a98:	2b17      	cmp	r3, #23
 80a6a9a:	dd32      	ble.n	80a6b02 <localtime_r+0x172>
 80a6a9c:	69e2      	ldr	r2, [r4, #28]
 80a6a9e:	3b18      	subs	r3, #24
 80a6aa0:	3201      	adds	r2, #1
 80a6aa2:	61e2      	str	r2, [r4, #28]
 80a6aa4:	69a2      	ldr	r2, [r4, #24]
 80a6aa6:	60a3      	str	r3, [r4, #8]
 80a6aa8:	3201      	adds	r2, #1
 80a6aaa:	2a06      	cmp	r2, #6
 80a6aac:	bfc8      	it	gt
 80a6aae:	2200      	movgt	r2, #0
 80a6ab0:	61a2      	str	r2, [r4, #24]
 80a6ab2:	68e2      	ldr	r2, [r4, #12]
 80a6ab4:	6923      	ldr	r3, [r4, #16]
 80a6ab6:	3201      	adds	r2, #1
 80a6ab8:	60e2      	str	r2, [r4, #12]
 80a6aba:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 80a6abe:	428a      	cmp	r2, r1
 80a6ac0:	dd0e      	ble.n	80a6ae0 <localtime_r+0x150>
 80a6ac2:	2b0b      	cmp	r3, #11
 80a6ac4:	eba2 0201 	sub.w	r2, r2, r1
 80a6ac8:	60e2      	str	r2, [r4, #12]
 80a6aca:	f103 0201 	add.w	r2, r3, #1
 80a6ace:	bf05      	ittet	eq
 80a6ad0:	2200      	moveq	r2, #0
 80a6ad2:	6963      	ldreq	r3, [r4, #20]
 80a6ad4:	6122      	strne	r2, [r4, #16]
 80a6ad6:	3301      	addeq	r3, #1
 80a6ad8:	bf02      	ittt	eq
 80a6ada:	6122      	streq	r2, [r4, #16]
 80a6adc:	6163      	streq	r3, [r4, #20]
 80a6ade:	61e2      	streq	r2, [r4, #28]
 80a6ae0:	f000 ffe0 	bl	80a7aa4 <__tz_unlock>
 80a6ae4:	4620      	mov	r0, r4
 80a6ae6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a6aea:	2b00      	cmp	r3, #0
 80a6aec:	dacc      	bge.n	80a6a88 <localtime_r+0xf8>
 80a6aee:	3901      	subs	r1, #1
 80a6af0:	6061      	str	r1, [r4, #4]
 80a6af2:	333c      	adds	r3, #60	; 0x3c
 80a6af4:	e7c7      	b.n	80a6a86 <localtime_r+0xf6>
 80a6af6:	2b00      	cmp	r3, #0
 80a6af8:	dacd      	bge.n	80a6a96 <localtime_r+0x106>
 80a6afa:	3a01      	subs	r2, #1
 80a6afc:	60a2      	str	r2, [r4, #8]
 80a6afe:	333c      	adds	r3, #60	; 0x3c
 80a6b00:	e7c8      	b.n	80a6a94 <localtime_r+0x104>
 80a6b02:	2b00      	cmp	r3, #0
 80a6b04:	daec      	bge.n	80a6ae0 <localtime_r+0x150>
 80a6b06:	69e2      	ldr	r2, [r4, #28]
 80a6b08:	3318      	adds	r3, #24
 80a6b0a:	3a01      	subs	r2, #1
 80a6b0c:	61e2      	str	r2, [r4, #28]
 80a6b0e:	69a2      	ldr	r2, [r4, #24]
 80a6b10:	60a3      	str	r3, [r4, #8]
 80a6b12:	3a01      	subs	r2, #1
 80a6b14:	bf48      	it	mi
 80a6b16:	2206      	movmi	r2, #6
 80a6b18:	61a2      	str	r2, [r4, #24]
 80a6b1a:	68e2      	ldr	r2, [r4, #12]
 80a6b1c:	3a01      	subs	r2, #1
 80a6b1e:	60e2      	str	r2, [r4, #12]
 80a6b20:	2a00      	cmp	r2, #0
 80a6b22:	d1dd      	bne.n	80a6ae0 <localtime_r+0x150>
 80a6b24:	6923      	ldr	r3, [r4, #16]
 80a6b26:	3b01      	subs	r3, #1
 80a6b28:	d405      	bmi.n	80a6b36 <localtime_r+0x1a6>
 80a6b2a:	6123      	str	r3, [r4, #16]
 80a6b2c:	6923      	ldr	r3, [r4, #16]
 80a6b2e:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80a6b32:	60e3      	str	r3, [r4, #12]
 80a6b34:	e7d4      	b.n	80a6ae0 <localtime_r+0x150>
 80a6b36:	230b      	movs	r3, #11
 80a6b38:	6123      	str	r3, [r4, #16]
 80a6b3a:	6963      	ldr	r3, [r4, #20]
 80a6b3c:	1e5a      	subs	r2, r3, #1
 80a6b3e:	6162      	str	r2, [r4, #20]
 80a6b40:	f203 726b 	addw	r2, r3, #1899	; 0x76b
 80a6b44:	0793      	lsls	r3, r2, #30
 80a6b46:	d105      	bne.n	80a6b54 <localtime_r+0x1c4>
 80a6b48:	2164      	movs	r1, #100	; 0x64
 80a6b4a:	fb92 f3f1 	sdiv	r3, r2, r1
 80a6b4e:	fb01 2313 	mls	r3, r1, r3, r2
 80a6b52:	b963      	cbnz	r3, 80a6b6e <localtime_r+0x1de>
 80a6b54:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80a6b58:	fb92 f3f1 	sdiv	r3, r2, r1
 80a6b5c:	fb01 2313 	mls	r3, r1, r3, r2
 80a6b60:	fab3 f383 	clz	r3, r3
 80a6b64:	095b      	lsrs	r3, r3, #5
 80a6b66:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 80a6b6a:	61e3      	str	r3, [r4, #28]
 80a6b6c:	e7de      	b.n	80a6b2c <localtime_r+0x19c>
 80a6b6e:	2301      	movs	r3, #1
 80a6b70:	e7f9      	b.n	80a6b66 <localtime_r+0x1d6>
 80a6b72:	bf00      	nop
 80a6b74:	080a89dc 	.word	0x080a89dc
 80a6b78:	20000650 	.word	0x20000650

080a6b7c <memcpy>:
 80a6b7c:	440a      	add	r2, r1
 80a6b7e:	4291      	cmp	r1, r2
 80a6b80:	f100 33ff 	add.w	r3, r0, #4294967295
 80a6b84:	d100      	bne.n	80a6b88 <memcpy+0xc>
 80a6b86:	4770      	bx	lr
 80a6b88:	b510      	push	{r4, lr}
 80a6b8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a6b8e:	4291      	cmp	r1, r2
 80a6b90:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a6b94:	d1f9      	bne.n	80a6b8a <memcpy+0xe>
 80a6b96:	bd10      	pop	{r4, pc}

080a6b98 <memset>:
 80a6b98:	4603      	mov	r3, r0
 80a6b9a:	4402      	add	r2, r0
 80a6b9c:	4293      	cmp	r3, r2
 80a6b9e:	d100      	bne.n	80a6ba2 <memset+0xa>
 80a6ba0:	4770      	bx	lr
 80a6ba2:	f803 1b01 	strb.w	r1, [r3], #1
 80a6ba6:	e7f9      	b.n	80a6b9c <memset+0x4>

080a6ba8 <srand>:
 80a6ba8:	b538      	push	{r3, r4, r5, lr}
 80a6baa:	4b0d      	ldr	r3, [pc, #52]	; (80a6be0 <srand+0x38>)
 80a6bac:	4604      	mov	r4, r0
 80a6bae:	681d      	ldr	r5, [r3, #0]
 80a6bb0:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a6bb2:	b97b      	cbnz	r3, 80a6bd4 <srand+0x2c>
 80a6bb4:	2018      	movs	r0, #24
 80a6bb6:	f7fc fecd 	bl	80a3954 <malloc>
 80a6bba:	4a0a      	ldr	r2, [pc, #40]	; (80a6be4 <srand+0x3c>)
 80a6bbc:	4b0a      	ldr	r3, [pc, #40]	; (80a6be8 <srand+0x40>)
 80a6bbe:	63a8      	str	r0, [r5, #56]	; 0x38
 80a6bc0:	e9c0 2300 	strd	r2, r3, [r0]
 80a6bc4:	4b09      	ldr	r3, [pc, #36]	; (80a6bec <srand+0x44>)
 80a6bc6:	2201      	movs	r2, #1
 80a6bc8:	6083      	str	r3, [r0, #8]
 80a6bca:	230b      	movs	r3, #11
 80a6bcc:	8183      	strh	r3, [r0, #12]
 80a6bce:	2300      	movs	r3, #0
 80a6bd0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a6bd4:	2200      	movs	r2, #0
 80a6bd6:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a6bd8:	611c      	str	r4, [r3, #16]
 80a6bda:	615a      	str	r2, [r3, #20]
 80a6bdc:	bd38      	pop	{r3, r4, r5, pc}
 80a6bde:	bf00      	nop
 80a6be0:	2000000c 	.word	0x2000000c
 80a6be4:	abcd330e 	.word	0xabcd330e
 80a6be8:	e66d1234 	.word	0xe66d1234
 80a6bec:	0005deec 	.word	0x0005deec

080a6bf0 <strcmp>:
 80a6bf0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80a6bf4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80a6bf8:	2a01      	cmp	r2, #1
 80a6bfa:	bf28      	it	cs
 80a6bfc:	429a      	cmpcs	r2, r3
 80a6bfe:	d0f7      	beq.n	80a6bf0 <strcmp>
 80a6c00:	1ad0      	subs	r0, r2, r3
 80a6c02:	4770      	bx	lr

080a6c04 <strcpy>:
 80a6c04:	4603      	mov	r3, r0
 80a6c06:	f811 2b01 	ldrb.w	r2, [r1], #1
 80a6c0a:	f803 2b01 	strb.w	r2, [r3], #1
 80a6c0e:	2a00      	cmp	r2, #0
 80a6c10:	d1f9      	bne.n	80a6c06 <strcpy+0x2>
 80a6c12:	4770      	bx	lr

080a6c14 <iso_year_adjust>:
 80a6c14:	6941      	ldr	r1, [r0, #20]
 80a6c16:	f240 736c 	movw	r3, #1900	; 0x76c
 80a6c1a:	2900      	cmp	r1, #0
 80a6c1c:	bfa8      	it	ge
 80a6c1e:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 80a6c22:	18ca      	adds	r2, r1, r3
 80a6c24:	078b      	lsls	r3, r1, #30
 80a6c26:	d105      	bne.n	80a6c34 <iso_year_adjust+0x20>
 80a6c28:	2164      	movs	r1, #100	; 0x64
 80a6c2a:	fb92 f3f1 	sdiv	r3, r2, r1
 80a6c2e:	fb01 2313 	mls	r3, r1, r3, r2
 80a6c32:	b9db      	cbnz	r3, 80a6c6c <iso_year_adjust+0x58>
 80a6c34:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80a6c38:	fb92 f3f1 	sdiv	r3, r2, r1
 80a6c3c:	fb01 2313 	mls	r3, r1, r3, r2
 80a6c40:	fab3 f383 	clz	r3, r3
 80a6c44:	095b      	lsrs	r3, r3, #5
 80a6c46:	e9d0 0206 	ldrd	r0, r2, [r0, #24]
 80a6c4a:	0040      	lsls	r0, r0, #1
 80a6c4c:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 80a6c50:	4418      	add	r0, r3
 80a6c52:	f241 63a2 	movw	r3, #5794	; 0x16a2
 80a6c56:	4298      	cmp	r0, r3
 80a6c58:	d03a      	beq.n	80a6cd0 <iso_year_adjust+0xbc>
 80a6c5a:	dc21      	bgt.n	80a6ca0 <iso_year_adjust+0x8c>
 80a6c5c:	2801      	cmp	r0, #1
 80a6c5e:	dc1a      	bgt.n	80a6c96 <iso_year_adjust+0x82>
 80a6c60:	2800      	cmp	r0, #0
 80a6c62:	bfb4      	ite	lt
 80a6c64:	2000      	movlt	r0, #0
 80a6c66:	f04f 30ff 	movge.w	r0, #4294967295
 80a6c6a:	4770      	bx	lr
 80a6c6c:	2301      	movs	r3, #1
 80a6c6e:	e7ea      	b.n	80a6c46 <iso_year_adjust+0x32>
 80a6c70:	2817      	cmp	r0, #23
 80a6c72:	d813      	bhi.n	80a6c9c <iso_year_adjust+0x88>
 80a6c74:	e8df f000 	tbb	[pc, r0]
 80a6c78:	0c0c0c0c 	.word	0x0c0c0c0c
 80a6c7c:	0c0c1212 	.word	0x0c0c1212
 80a6c80:	12121212 	.word	0x12121212
 80a6c84:	12121212 	.word	0x12121212
 80a6c88:	0c0c1212 	.word	0x0c0c1212
 80a6c8c:	0c0c1212 	.word	0x0c0c1212
 80a6c90:	f04f 30ff 	mov.w	r0, #4294967295
 80a6c94:	4770      	bx	lr
 80a6c96:	380a      	subs	r0, #10
 80a6c98:	2817      	cmp	r0, #23
 80a6c9a:	d9e9      	bls.n	80a6c70 <iso_year_adjust+0x5c>
 80a6c9c:	2000      	movs	r0, #0
 80a6c9e:	4770      	bx	lr
 80a6ca0:	f241 63b4 	movw	r3, #5812	; 0x16b4
 80a6ca4:	4298      	cmp	r0, r3
 80a6ca6:	dc06      	bgt.n	80a6cb6 <iso_year_adjust+0xa2>
 80a6ca8:	f241 63b1 	movw	r3, #5809	; 0x16b1
 80a6cac:	4298      	cmp	r0, r3
 80a6cae:	bfd4      	ite	le
 80a6cb0:	2000      	movle	r0, #0
 80a6cb2:	2001      	movgt	r0, #1
 80a6cb4:	4770      	bx	lr
 80a6cb6:	f5a0 50b6 	sub.w	r0, r0, #5824	; 0x16c0
 80a6cba:	3802      	subs	r0, #2
 80a6cbc:	2815      	cmp	r0, #21
 80a6cbe:	d8ed      	bhi.n	80a6c9c <iso_year_adjust+0x88>
 80a6cc0:	2301      	movs	r3, #1
 80a6cc2:	4083      	lsls	r3, r0
 80a6cc4:	4803      	ldr	r0, [pc, #12]	; (80a6cd4 <iso_year_adjust+0xc0>)
 80a6cc6:	4018      	ands	r0, r3
 80a6cc8:	3800      	subs	r0, #0
 80a6cca:	bf18      	it	ne
 80a6ccc:	2001      	movne	r0, #1
 80a6cce:	4770      	bx	lr
 80a6cd0:	2001      	movs	r0, #1
 80a6cd2:	4770      	bx	lr
 80a6cd4:	002a001f 	.word	0x002a001f

080a6cd8 <__strftime>:
 80a6cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a6cdc:	461e      	mov	r6, r3
 80a6cde:	2300      	movs	r3, #0
 80a6ce0:	4607      	mov	r7, r0
 80a6ce2:	460d      	mov	r5, r1
 80a6ce4:	461c      	mov	r4, r3
 80a6ce6:	b091      	sub	sp, #68	; 0x44
 80a6ce8:	9304      	str	r3, [sp, #16]
 80a6cea:	7813      	ldrb	r3, [r2, #0]
 80a6cec:	2b00      	cmp	r3, #0
 80a6cee:	f000 84da 	beq.w	80a76a6 <__strftime+0x9ce>
 80a6cf2:	2b25      	cmp	r3, #37	; 0x25
 80a6cf4:	d11f      	bne.n	80a6d36 <__strftime+0x5e>
 80a6cf6:	f892 9001 	ldrb.w	r9, [r2, #1]
 80a6cfa:	f1b9 0f30 	cmp.w	r9, #48	; 0x30
 80a6cfe:	d024      	beq.n	80a6d4a <__strftime+0x72>
 80a6d00:	f1b9 0f2b 	cmp.w	r9, #43	; 0x2b
 80a6d04:	d021      	beq.n	80a6d4a <__strftime+0x72>
 80a6d06:	f04f 0900 	mov.w	r9, #0
 80a6d0a:	f102 0a01 	add.w	sl, r2, #1
 80a6d0e:	f89a 3000 	ldrb.w	r3, [sl]
 80a6d12:	3b31      	subs	r3, #49	; 0x31
 80a6d14:	2b08      	cmp	r3, #8
 80a6d16:	d81b      	bhi.n	80a6d50 <__strftime+0x78>
 80a6d18:	4650      	mov	r0, sl
 80a6d1a:	220a      	movs	r2, #10
 80a6d1c:	a908      	add	r1, sp, #32
 80a6d1e:	f000 fe09 	bl	80a7934 <strtoul>
 80a6d22:	4680      	mov	r8, r0
 80a6d24:	f8dd a020 	ldr.w	sl, [sp, #32]
 80a6d28:	f89a 3000 	ldrb.w	r3, [sl]
 80a6d2c:	2b45      	cmp	r3, #69	; 0x45
 80a6d2e:	d112      	bne.n	80a6d56 <__strftime+0x7e>
 80a6d30:	f10a 0a01 	add.w	sl, sl, #1
 80a6d34:	e011      	b.n	80a6d5a <__strftime+0x82>
 80a6d36:	1e69      	subs	r1, r5, #1
 80a6d38:	42a1      	cmp	r1, r4
 80a6d3a:	d802      	bhi.n	80a6d42 <__strftime+0x6a>
 80a6d3c:	2400      	movs	r4, #0
 80a6d3e:	f000 bcb5 	b.w	80a76ac <__strftime+0x9d4>
 80a6d42:	553b      	strb	r3, [r7, r4]
 80a6d44:	3201      	adds	r2, #1
 80a6d46:	3401      	adds	r4, #1
 80a6d48:	e7cf      	b.n	80a6cea <__strftime+0x12>
 80a6d4a:	f102 0a02 	add.w	sl, r2, #2
 80a6d4e:	e7de      	b.n	80a6d0e <__strftime+0x36>
 80a6d50:	f04f 0800 	mov.w	r8, #0
 80a6d54:	e7e8      	b.n	80a6d28 <__strftime+0x50>
 80a6d56:	2b4f      	cmp	r3, #79	; 0x4f
 80a6d58:	d0ea      	beq.n	80a6d30 <__strftime+0x58>
 80a6d5a:	f89a 0000 	ldrb.w	r0, [sl]
 80a6d5e:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
 80a6d62:	2b55      	cmp	r3, #85	; 0x55
 80a6d64:	d8ea      	bhi.n	80a6d3c <__strftime+0x64>
 80a6d66:	a201      	add	r2, pc, #4	; (adr r2, 80a6d6c <__strftime+0x94>)
 80a6d68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80a6d6c:	080a769b 	.word	0x080a769b
 80a6d70:	080a6d3d 	.word	0x080a6d3d
 80a6d74:	080a6d3d 	.word	0x080a6d3d
 80a6d78:	080a6d3d 	.word	0x080a6d3d
 80a6d7c:	080a6d3d 	.word	0x080a6d3d
 80a6d80:	080a6d3d 	.word	0x080a6d3d
 80a6d84:	080a6d3d 	.word	0x080a6d3d
 80a6d88:	080a6d3d 	.word	0x080a6d3d
 80a6d8c:	080a6d3d 	.word	0x080a6d3d
 80a6d90:	080a6d3d 	.word	0x080a6d3d
 80a6d94:	080a6d3d 	.word	0x080a6d3d
 80a6d98:	080a6d3d 	.word	0x080a6d3d
 80a6d9c:	080a6d3d 	.word	0x080a6d3d
 80a6da0:	080a6d3d 	.word	0x080a6d3d
 80a6da4:	080a6d3d 	.word	0x080a6d3d
 80a6da8:	080a6d3d 	.word	0x080a6d3d
 80a6dac:	080a6d3d 	.word	0x080a6d3d
 80a6db0:	080a6d3d 	.word	0x080a6d3d
 80a6db4:	080a6d3d 	.word	0x080a6d3d
 80a6db8:	080a6d3d 	.word	0x080a6d3d
 80a6dbc:	080a6d3d 	.word	0x080a6d3d
 80a6dc0:	080a6d3d 	.word	0x080a6d3d
 80a6dc4:	080a6d3d 	.word	0x080a6d3d
 80a6dc8:	080a6d3d 	.word	0x080a6d3d
 80a6dcc:	080a6d3d 	.word	0x080a6d3d
 80a6dd0:	080a6d3d 	.word	0x080a6d3d
 80a6dd4:	080a6d3d 	.word	0x080a6d3d
 80a6dd8:	080a6d3d 	.word	0x080a6d3d
 80a6ddc:	080a6f01 	.word	0x080a6f01
 80a6de0:	080a6f59 	.word	0x080a6f59
 80a6de4:	080a6fcb 	.word	0x080a6fcb
 80a6de8:	080a7063 	.word	0x080a7063
 80a6dec:	080a6d3d 	.word	0x080a6d3d
 80a6df0:	080a70ad 	.word	0x080a70ad
 80a6df4:	080a71a1 	.word	0x080a71a1
 80a6df8:	080a72ab 	.word	0x080a72ab
 80a6dfc:	080a72b9 	.word	0x080a72b9
 80a6e00:	080a6d3d 	.word	0x080a6d3d
 80a6e04:	080a6d3d 	.word	0x080a6d3d
 80a6e08:	080a6d3d 	.word	0x080a6d3d
 80a6e0c:	080a72e9 	.word	0x080a72e9
 80a6e10:	080a6d3d 	.word	0x080a6d3d
 80a6e14:	080a6d3d 	.word	0x080a6d3d
 80a6e18:	080a72fd 	.word	0x080a72fd
 80a6e1c:	080a6d3d 	.word	0x080a6d3d
 80a6e20:	080a734d 	.word	0x080a734d
 80a6e24:	080a7463 	.word	0x080a7463
 80a6e28:	080a7473 	.word	0x080a7473
 80a6e2c:	080a74c7 	.word	0x080a74c7
 80a6e30:	080a74d7 	.word	0x080a74d7
 80a6e34:	080a7549 	.word	0x080a7549
 80a6e38:	080a6fc3 	.word	0x080a6fc3
 80a6e3c:	080a757d 	.word	0x080a757d
 80a6e40:	080a7649 	.word	0x080a7649
 80a6e44:	080a6d3d 	.word	0x080a6d3d
 80a6e48:	080a6d3d 	.word	0x080a6d3d
 80a6e4c:	080a6d3d 	.word	0x080a6d3d
 80a6e50:	080a6d3d 	.word	0x080a6d3d
 80a6e54:	080a6d3d 	.word	0x080a6d3d
 80a6e58:	080a6d3d 	.word	0x080a6d3d
 80a6e5c:	080a6ec5 	.word	0x080a6ec5
 80a6e60:	080a6f2f 	.word	0x080a6f2f
 80a6e64:	080a6f85 	.word	0x080a6f85
 80a6e68:	080a703f 	.word	0x080a703f
 80a6e6c:	080a703f 	.word	0x080a703f
 80a6e70:	080a6d3d 	.word	0x080a6d3d
 80a6e74:	080a7103 	.word	0x080a7103
 80a6e78:	080a6f2f 	.word	0x080a6f2f
 80a6e7c:	080a6d3d 	.word	0x080a6d3d
 80a6e80:	080a72db 	.word	0x080a72db
 80a6e84:	080a72ab 	.word	0x080a72ab
 80a6e88:	080a72b9 	.word	0x080a72b9
 80a6e8c:	080a72e3 	.word	0x080a72e3
 80a6e90:	080a72ed 	.word	0x080a72ed
 80a6e94:	080a6d3d 	.word	0x080a6d3d
 80a6e98:	080a72fd 	.word	0x080a72fd
 80a6e9c:	080a6d3d 	.word	0x080a6d3d
 80a6ea0:	080a6fb3 	.word	0x080a6fb3
 80a6ea4:	080a735f 	.word	0x080a735f
 80a6ea8:	080a7467 	.word	0x080a7467
 80a6eac:	080a74ad 	.word	0x080a74ad
 80a6eb0:	080a6d3d 	.word	0x080a6d3d
 80a6eb4:	080a753b 	.word	0x080a753b
 80a6eb8:	080a6fbb 	.word	0x080a6fbb
 80a6ebc:	080a7561 	.word	0x080a7561
 80a6ec0:	080a75d9 	.word	0x080a75d9
 80a6ec4:	69b3      	ldr	r3, [r6, #24]
 80a6ec6:	4aa9      	ldr	r2, [pc, #676]	; (80a716c <__strftime+0x494>)
 80a6ec8:	3318      	adds	r3, #24
 80a6eca:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
 80a6ece:	4640      	mov	r0, r8
 80a6ed0:	f000 fc02 	bl	80a76d8 <strlen>
 80a6ed4:	f108 38ff 	add.w	r8, r8, #4294967295
 80a6ed8:	4420      	add	r0, r4
 80a6eda:	1e6b      	subs	r3, r5, #1
 80a6edc:	42a0      	cmp	r0, r4
 80a6ede:	d107      	bne.n	80a6ef0 <__strftime+0x218>
 80a6ee0:	f89a 3000 	ldrb.w	r3, [sl]
 80a6ee4:	2b00      	cmp	r3, #0
 80a6ee6:	f000 83de 	beq.w	80a76a6 <__strftime+0x9ce>
 80a6eea:	f10a 0201 	add.w	r2, sl, #1
 80a6eee:	e6fc      	b.n	80a6cea <__strftime+0x12>
 80a6ef0:	42a3      	cmp	r3, r4
 80a6ef2:	f67f af23 	bls.w	80a6d3c <__strftime+0x64>
 80a6ef6:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 80a6efa:	553a      	strb	r2, [r7, r4]
 80a6efc:	3401      	adds	r4, #1
 80a6efe:	e7ed      	b.n	80a6edc <__strftime+0x204>
 80a6f00:	69b2      	ldr	r2, [r6, #24]
 80a6f02:	4b9a      	ldr	r3, [pc, #616]	; (80a716c <__strftime+0x494>)
 80a6f04:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80a6f08:	f8d3 807c 	ldr.w	r8, [r3, #124]	; 0x7c
 80a6f0c:	4640      	mov	r0, r8
 80a6f0e:	f000 fbe3 	bl	80a76d8 <strlen>
 80a6f12:	f108 38ff 	add.w	r8, r8, #4294967295
 80a6f16:	4420      	add	r0, r4
 80a6f18:	1e6b      	subs	r3, r5, #1
 80a6f1a:	42a0      	cmp	r0, r4
 80a6f1c:	d0e0      	beq.n	80a6ee0 <__strftime+0x208>
 80a6f1e:	42a3      	cmp	r3, r4
 80a6f20:	f67f af0c 	bls.w	80a6d3c <__strftime+0x64>
 80a6f24:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 80a6f28:	553a      	strb	r2, [r7, r4]
 80a6f2a:	3401      	adds	r4, #1
 80a6f2c:	e7f5      	b.n	80a6f1a <__strftime+0x242>
 80a6f2e:	4b8f      	ldr	r3, [pc, #572]	; (80a716c <__strftime+0x494>)
 80a6f30:	6932      	ldr	r2, [r6, #16]
 80a6f32:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
 80a6f36:	4640      	mov	r0, r8
 80a6f38:	f000 fbce 	bl	80a76d8 <strlen>
 80a6f3c:	f108 38ff 	add.w	r8, r8, #4294967295
 80a6f40:	4420      	add	r0, r4
 80a6f42:	1e6b      	subs	r3, r5, #1
 80a6f44:	42a0      	cmp	r0, r4
 80a6f46:	d0cb      	beq.n	80a6ee0 <__strftime+0x208>
 80a6f48:	42a3      	cmp	r3, r4
 80a6f4a:	f67f aef7 	bls.w	80a6d3c <__strftime+0x64>
 80a6f4e:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 80a6f52:	553a      	strb	r2, [r7, r4]
 80a6f54:	3401      	adds	r4, #1
 80a6f56:	e7f5      	b.n	80a6f44 <__strftime+0x26c>
 80a6f58:	6933      	ldr	r3, [r6, #16]
 80a6f5a:	4a84      	ldr	r2, [pc, #528]	; (80a716c <__strftime+0x494>)
 80a6f5c:	330c      	adds	r3, #12
 80a6f5e:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
 80a6f62:	4640      	mov	r0, r8
 80a6f64:	f000 fbb8 	bl	80a76d8 <strlen>
 80a6f68:	f108 38ff 	add.w	r8, r8, #4294967295
 80a6f6c:	4420      	add	r0, r4
 80a6f6e:	1e6b      	subs	r3, r5, #1
 80a6f70:	42a0      	cmp	r0, r4
 80a6f72:	d0b5      	beq.n	80a6ee0 <__strftime+0x208>
 80a6f74:	42a3      	cmp	r3, r4
 80a6f76:	f67f aee1 	bls.w	80a6d3c <__strftime+0x64>
 80a6f7a:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 80a6f7e:	553a      	strb	r2, [r7, r4]
 80a6f80:	3401      	adds	r4, #1
 80a6f82:	e7f5      	b.n	80a6f70 <__strftime+0x298>
 80a6f84:	4b79      	ldr	r3, [pc, #484]	; (80a716c <__strftime+0x494>)
 80a6f86:	f8d3 80a0 	ldr.w	r8, [r3, #160]	; 0xa0
 80a6f8a:	4640      	mov	r0, r8
 80a6f8c:	f000 fba4 	bl	80a76d8 <strlen>
 80a6f90:	f898 3000 	ldrb.w	r3, [r8]
 80a6f94:	2b00      	cmp	r3, #0
 80a6f96:	d0a3      	beq.n	80a6ee0 <__strftime+0x208>
 80a6f98:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80a6f9a:	4642      	mov	r2, r8
 80a6f9c:	9300      	str	r3, [sp, #0]
 80a6f9e:	4633      	mov	r3, r6
 80a6fa0:	1b29      	subs	r1, r5, r4
 80a6fa2:	1938      	adds	r0, r7, r4
 80a6fa4:	f7ff fe98 	bl	80a6cd8 <__strftime>
 80a6fa8:	2800      	cmp	r0, #0
 80a6faa:	f77f aec7 	ble.w	80a6d3c <__strftime+0x64>
 80a6fae:	4404      	add	r4, r0
 80a6fb0:	e796      	b.n	80a6ee0 <__strftime+0x208>
 80a6fb2:	4b6e      	ldr	r3, [pc, #440]	; (80a716c <__strftime+0x494>)
 80a6fb4:	f8d3 80e4 	ldr.w	r8, [r3, #228]	; 0xe4
 80a6fb8:	e7e7      	b.n	80a6f8a <__strftime+0x2b2>
 80a6fba:	4b6c      	ldr	r3, [pc, #432]	; (80a716c <__strftime+0x494>)
 80a6fbc:	f8d3 809c 	ldr.w	r8, [r3, #156]	; 0x9c
 80a6fc0:	e7e3      	b.n	80a6f8a <__strftime+0x2b2>
 80a6fc2:	4b6a      	ldr	r3, [pc, #424]	; (80a716c <__strftime+0x494>)
 80a6fc4:	f8d3 8098 	ldr.w	r8, [r3, #152]	; 0x98
 80a6fc8:	e7df      	b.n	80a6f8a <__strftime+0x2b2>
 80a6fca:	4969      	ldr	r1, [pc, #420]	; (80a7170 <__strftime+0x498>)
 80a6fcc:	f8d6 b014 	ldr.w	fp, [r6, #20]
 80a6fd0:	458b      	cmp	fp, r1
 80a6fd2:	bfac      	ite	ge
 80a6fd4:	2100      	movge	r1, #0
 80a6fd6:	2101      	movlt	r1, #1
 80a6fd8:	f1bb 0f00 	cmp.w	fp, #0
 80a6fdc:	db10      	blt.n	80a7000 <__strftime+0x328>
 80a6fde:	2064      	movs	r0, #100	; 0x64
 80a6fe0:	fb9b f0f0 	sdiv	r0, fp, r0
 80a6fe4:	3013      	adds	r0, #19
 80a6fe6:	f1b9 0f00 	cmp.w	r9, #0
 80a6fea:	d013      	beq.n	80a7014 <__strftime+0x33c>
 80a6fec:	2863      	cmp	r0, #99	; 0x63
 80a6fee:	dd24      	ble.n	80a703a <__strftime+0x362>
 80a6ff0:	4a60      	ldr	r2, [pc, #384]	; (80a7174 <__strftime+0x49c>)
 80a6ff2:	4b61      	ldr	r3, [pc, #388]	; (80a7178 <__strftime+0x4a0>)
 80a6ff4:	f1b9 0f2b 	cmp.w	r9, #43	; 0x2b
 80a6ff8:	bf18      	it	ne
 80a6ffa:	4613      	movne	r3, r2
 80a6ffc:	4a5f      	ldr	r2, [pc, #380]	; (80a717c <__strftime+0x4a4>)
 80a6ffe:	e00b      	b.n	80a7018 <__strftime+0x340>
 80a7000:	f20b 706c 	addw	r0, fp, #1900	; 0x76c
 80a7004:	9105      	str	r1, [sp, #20]
 80a7006:	f000 fed9 	bl	80a7dbc <abs>
 80a700a:	2364      	movs	r3, #100	; 0x64
 80a700c:	9905      	ldr	r1, [sp, #20]
 80a700e:	fb90 f0f3 	sdiv	r0, r0, r3
 80a7012:	e7e8      	b.n	80a6fe6 <__strftime+0x30e>
 80a7014:	4b57      	ldr	r3, [pc, #348]	; (80a7174 <__strftime+0x49c>)
 80a7016:	4a5a      	ldr	r2, [pc, #360]	; (80a7180 <__strftime+0x4a8>)
 80a7018:	f1b8 0f02 	cmp.w	r8, #2
 80a701c:	bf2c      	ite	cs
 80a701e:	ebc1 0108 	rsbcs	r1, r1, r8
 80a7022:	f1c1 0102 	rsbcc	r1, r1, #2
 80a7026:	9001      	str	r0, [sp, #4]
 80a7028:	9100      	str	r1, [sp, #0]
 80a702a:	4851      	ldr	r0, [pc, #324]	; (80a7170 <__strftime+0x498>)
 80a702c:	4955      	ldr	r1, [pc, #340]	; (80a7184 <__strftime+0x4ac>)
 80a702e:	4583      	cmp	fp, r0
 80a7030:	bfb8      	it	lt
 80a7032:	460b      	movlt	r3, r1
 80a7034:	1b29      	subs	r1, r5, r4
 80a7036:	1938      	adds	r0, r7, r4
 80a7038:	e029      	b.n	80a708e <__strftime+0x3b6>
 80a703a:	4b4e      	ldr	r3, [pc, #312]	; (80a7174 <__strftime+0x49c>)
 80a703c:	e7de      	b.n	80a6ffc <__strftime+0x324>
 80a703e:	4952      	ldr	r1, [pc, #328]	; (80a7188 <__strftime+0x4b0>)
 80a7040:	4a52      	ldr	r2, [pc, #328]	; (80a718c <__strftime+0x4b4>)
 80a7042:	68f3      	ldr	r3, [r6, #12]
 80a7044:	2864      	cmp	r0, #100	; 0x64
 80a7046:	bf08      	it	eq
 80a7048:	460a      	moveq	r2, r1
 80a704a:	1b29      	subs	r1, r5, r4
 80a704c:	1938      	adds	r0, r7, r4
 80a704e:	f7fc fcb9 	bl	80a39c4 <sniprintf>
 80a7052:	2800      	cmp	r0, #0
 80a7054:	f6ff ae72 	blt.w	80a6d3c <__strftime+0x64>
 80a7058:	4404      	add	r4, r0
 80a705a:	42a5      	cmp	r5, r4
 80a705c:	f63f af40 	bhi.w	80a6ee0 <__strftime+0x208>
 80a7060:	e66c      	b.n	80a6d3c <__strftime+0x64>
 80a7062:	6970      	ldr	r0, [r6, #20]
 80a7064:	6933      	ldr	r3, [r6, #16]
 80a7066:	2800      	cmp	r0, #0
 80a7068:	f103 0b01 	add.w	fp, r3, #1
 80a706c:	eb07 0804 	add.w	r8, r7, r4
 80a7070:	68f3      	ldr	r3, [r6, #12]
 80a7072:	eba5 0904 	sub.w	r9, r5, r4
 80a7076:	db0d      	blt.n	80a7094 <__strftime+0x3bc>
 80a7078:	2164      	movs	r1, #100	; 0x64
 80a707a:	fb90 f2f1 	sdiv	r2, r0, r1
 80a707e:	fb01 0212 	mls	r2, r1, r2, r0
 80a7082:	e9cd 3200 	strd	r3, r2, [sp]
 80a7086:	4649      	mov	r1, r9
 80a7088:	465b      	mov	r3, fp
 80a708a:	4640      	mov	r0, r8
 80a708c:	4a40      	ldr	r2, [pc, #256]	; (80a7190 <__strftime+0x4b8>)
 80a708e:	f7fc fc99 	bl	80a39c4 <sniprintf>
 80a7092:	e7de      	b.n	80a7052 <__strftime+0x37a>
 80a7094:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80a7098:	9305      	str	r3, [sp, #20]
 80a709a:	f000 fe8f 	bl	80a7dbc <abs>
 80a709e:	2264      	movs	r2, #100	; 0x64
 80a70a0:	fb90 f1f2 	sdiv	r1, r0, r2
 80a70a4:	9b05      	ldr	r3, [sp, #20]
 80a70a6:	fb01 0212 	mls	r2, r1, r2, r0
 80a70aa:	e7ea      	b.n	80a7082 <__strftime+0x3aa>
 80a70ac:	2325      	movs	r3, #37	; 0x25
 80a70ae:	f88d 3020 	strb.w	r3, [sp, #32]
 80a70b2:	f1b9 0f00 	cmp.w	r9, #0
 80a70b6:	d013      	beq.n	80a70e0 <__strftime+0x408>
 80a70b8:	f1b8 0f06 	cmp.w	r8, #6
 80a70bc:	bf38      	it	cc
 80a70be:	f04f 0806 	movcc.w	r8, #6
 80a70c2:	f1b8 0306 	subs.w	r3, r8, #6
 80a70c6:	f88d 9021 	strb.w	r9, [sp, #33]	; 0x21
 80a70ca:	d10e      	bne.n	80a70ea <__strftime+0x412>
 80a70cc:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 80a70d0:	4930      	ldr	r1, [pc, #192]	; (80a7194 <__strftime+0x4bc>)
 80a70d2:	f7ff fd97 	bl	80a6c04 <strcpy>
 80a70d6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80a70d8:	aa08      	add	r2, sp, #32
 80a70da:	9300      	str	r3, [sp, #0]
 80a70dc:	4633      	mov	r3, r6
 80a70de:	e75f      	b.n	80a6fa0 <__strftime+0x2c8>
 80a70e0:	f04f 092b 	mov.w	r9, #43	; 0x2b
 80a70e4:	f04f 080a 	mov.w	r8, #10
 80a70e8:	e7eb      	b.n	80a70c2 <__strftime+0x3ea>
 80a70ea:	211e      	movs	r1, #30
 80a70ec:	4a2a      	ldr	r2, [pc, #168]	; (80a7198 <__strftime+0x4c0>)
 80a70ee:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 80a70f2:	f7fc fc67 	bl	80a39c4 <sniprintf>
 80a70f6:	2800      	cmp	r0, #0
 80a70f8:	dde8      	ble.n	80a70cc <__strftime+0x3f4>
 80a70fa:	f10d 0322 	add.w	r3, sp, #34	; 0x22
 80a70fe:	4418      	add	r0, r3
 80a7100:	e7e6      	b.n	80a70d0 <__strftime+0x3f8>
 80a7102:	4630      	mov	r0, r6
 80a7104:	f7ff fd86 	bl	80a6c14 <iso_year_adjust>
 80a7108:	4680      	mov	r8, r0
 80a710a:	6970      	ldr	r0, [r6, #20]
 80a710c:	2800      	cmp	r0, #0
 80a710e:	db11      	blt.n	80a7134 <__strftime+0x45c>
 80a7110:	2264      	movs	r2, #100	; 0x64
 80a7112:	fb90 f3f2 	sdiv	r3, r0, r2
 80a7116:	fb02 0313 	mls	r3, r2, r3, r0
 80a711a:	4498      	add	r8, r3
 80a711c:	2364      	movs	r3, #100	; 0x64
 80a711e:	fb98 f0f3 	sdiv	r0, r8, r3
 80a7122:	fb03 8810 	mls	r8, r3, r0, r8
 80a7126:	4498      	add	r8, r3
 80a7128:	fbb8 f2f3 	udiv	r2, r8, r3
 80a712c:	fb03 8312 	mls	r3, r3, r2, r8
 80a7130:	4a15      	ldr	r2, [pc, #84]	; (80a7188 <__strftime+0x4b0>)
 80a7132:	e78a      	b.n	80a704a <__strftime+0x372>
 80a7134:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80a7138:	f000 fe40 	bl	80a7dbc <abs>
 80a713c:	2364      	movs	r3, #100	; 0x64
 80a713e:	fb90 f2f3 	sdiv	r2, r0, r3
 80a7142:	f1b8 0f00 	cmp.w	r8, #0
 80a7146:	fb02 0313 	mls	r3, r2, r3, r0
 80a714a:	da06      	bge.n	80a715a <__strftime+0x482>
 80a714c:	6971      	ldr	r1, [r6, #20]
 80a714e:	4a13      	ldr	r2, [pc, #76]	; (80a719c <__strftime+0x4c4>)
 80a7150:	4291      	cmp	r1, r2
 80a7152:	bfb8      	it	lt
 80a7154:	f04f 0801 	movlt.w	r8, #1
 80a7158:	e7df      	b.n	80a711a <__strftime+0x442>
 80a715a:	d0de      	beq.n	80a711a <__strftime+0x442>
 80a715c:	6971      	ldr	r1, [r6, #20]
 80a715e:	4a04      	ldr	r2, [pc, #16]	; (80a7170 <__strftime+0x498>)
 80a7160:	4291      	cmp	r1, r2
 80a7162:	bfb8      	it	lt
 80a7164:	f04f 38ff 	movlt.w	r8, #4294967295
 80a7168:	e7d7      	b.n	80a711a <__strftime+0x442>
 80a716a:	bf00      	nop
 80a716c:	080a8bc0 	.word	0x080a8bc0
 80a7170:	fffff894 	.word	0xfffff894
 80a7174:	080a89a0 	.word	0x080a89a0
 80a7178:	080a8a4b 	.word	0x080a8a4b
 80a717c:	080a8a43 	.word	0x080a8a43
 80a7180:	080a8a3c 	.word	0x080a8a3c
 80a7184:	080a8a4d 	.word	0x080a8a4d
 80a7188:	080a8a5d 	.word	0x080a8a5d
 80a718c:	080a8a4f 	.word	0x080a8a4f
 80a7190:	080a8a53 	.word	0x080a8a53
 80a7194:	080a8a62 	.word	0x080a8a62
 80a7198:	080a84ed 	.word	0x080a84ed
 80a719c:	fffff895 	.word	0xfffff895
 80a71a0:	4bb7      	ldr	r3, [pc, #732]	; (80a7480 <__strftime+0x7a8>)
 80a71a2:	6971      	ldr	r1, [r6, #20]
 80a71a4:	4630      	mov	r0, r6
 80a71a6:	4299      	cmp	r1, r3
 80a71a8:	bfac      	ite	ge
 80a71aa:	2300      	movge	r3, #0
 80a71ac:	2301      	movlt	r3, #1
 80a71ae:	e9cd 3105 	strd	r3, r1, [sp, #20]
 80a71b2:	f7ff fd2f 	bl	80a6c14 <iso_year_adjust>
 80a71b6:	9906      	ldr	r1, [sp, #24]
 80a71b8:	4683      	mov	fp, r0
 80a71ba:	2900      	cmp	r1, #0
 80a71bc:	db2a      	blt.n	80a7214 <__strftime+0x53c>
 80a71be:	2264      	movs	r2, #100	; 0x64
 80a71c0:	fb91 f2f2 	sdiv	r2, r1, r2
 80a71c4:	3213      	adds	r2, #19
 80a71c6:	6970      	ldr	r0, [r6, #20]
 80a71c8:	2800      	cmp	r0, #0
 80a71ca:	db2d      	blt.n	80a7228 <__strftime+0x550>
 80a71cc:	f04f 0c64 	mov.w	ip, #100	; 0x64
 80a71d0:	fb90 fefc 	sdiv	lr, r0, ip
 80a71d4:	fb0c 001e 	mls	r0, ip, lr, r0
 80a71d8:	f1bb 0f00 	cmp.w	fp, #0
 80a71dc:	da33      	bge.n	80a7246 <__strftime+0x56e>
 80a71de:	6971      	ldr	r1, [r6, #20]
 80a71e0:	4ba8      	ldr	r3, [pc, #672]	; (80a7484 <__strftime+0x7ac>)
 80a71e2:	4299      	cmp	r1, r3
 80a71e4:	db39      	blt.n	80a725a <__strftime+0x582>
 80a71e6:	eb0b 0300 	add.w	r3, fp, r0
 80a71ea:	1c59      	adds	r1, r3, #1
 80a71ec:	d13a      	bne.n	80a7264 <__strftime+0x58c>
 80a71ee:	2363      	movs	r3, #99	; 0x63
 80a71f0:	3a01      	subs	r2, #1
 80a71f2:	2064      	movs	r0, #100	; 0x64
 80a71f4:	fb00 3202 	mla	r2, r0, r2, r3
 80a71f8:	9b05      	ldr	r3, [sp, #20]
 80a71fa:	2b00      	cmp	r3, #0
 80a71fc:	d037      	beq.n	80a726e <__strftime+0x596>
 80a71fe:	232d      	movs	r3, #45	; 0x2d
 80a7200:	f88d 3020 	strb.w	r3, [sp, #32]
 80a7204:	f1b8 0f00 	cmp.w	r8, #0
 80a7208:	d001      	beq.n	80a720e <__strftime+0x536>
 80a720a:	f108 38ff 	add.w	r8, r8, #4294967295
 80a720e:	f10d 0321 	add.w	r3, sp, #33	; 0x21
 80a7212:	e037      	b.n	80a7284 <__strftime+0x5ac>
 80a7214:	f201 706c 	addw	r0, r1, #1900	; 0x76c
 80a7218:	9106      	str	r1, [sp, #24]
 80a721a:	f000 fdcf 	bl	80a7dbc <abs>
 80a721e:	2264      	movs	r2, #100	; 0x64
 80a7220:	9906      	ldr	r1, [sp, #24]
 80a7222:	fb90 f2f2 	sdiv	r2, r0, r2
 80a7226:	e7ce      	b.n	80a71c6 <__strftime+0x4ee>
 80a7228:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80a722c:	e9cd 1206 	strd	r1, r2, [sp, #24]
 80a7230:	f000 fdc4 	bl	80a7dbc <abs>
 80a7234:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 80a7238:	f04f 0c64 	mov.w	ip, #100	; 0x64
 80a723c:	fb90 fefc 	sdiv	lr, r0, ip
 80a7240:	fb0e 001c 	mls	r0, lr, ip, r0
 80a7244:	e7c8      	b.n	80a71d8 <__strftime+0x500>
 80a7246:	d0ce      	beq.n	80a71e6 <__strftime+0x50e>
 80a7248:	4b8d      	ldr	r3, [pc, #564]	; (80a7480 <__strftime+0x7a8>)
 80a724a:	4299      	cmp	r1, r3
 80a724c:	bfb6      	itet	lt
 80a724e:	2301      	movlt	r3, #1
 80a7250:	2300      	movge	r3, #0
 80a7252:	f04f 3bff 	movlt.w	fp, #4294967295
 80a7256:	9305      	str	r3, [sp, #20]
 80a7258:	e7c5      	b.n	80a71e6 <__strftime+0x50e>
 80a725a:	f04f 0b01 	mov.w	fp, #1
 80a725e:	f8cd b014 	str.w	fp, [sp, #20]
 80a7262:	e7c0      	b.n	80a71e6 <__strftime+0x50e>
 80a7264:	2b64      	cmp	r3, #100	; 0x64
 80a7266:	bf04      	itt	eq
 80a7268:	2300      	moveq	r3, #0
 80a726a:	3201      	addeq	r2, #1
 80a726c:	e7c1      	b.n	80a71f2 <__strftime+0x51a>
 80a726e:	f1b9 0f2b 	cmp.w	r9, #43	; 0x2b
 80a7272:	d106      	bne.n	80a7282 <__strftime+0x5aa>
 80a7274:	f242 730f 	movw	r3, #9999	; 0x270f
 80a7278:	429a      	cmp	r2, r3
 80a727a:	d902      	bls.n	80a7282 <__strftime+0x5aa>
 80a727c:	f88d 9020 	strb.w	r9, [sp, #32]
 80a7280:	e7c0      	b.n	80a7204 <__strftime+0x52c>
 80a7282:	ab08      	add	r3, sp, #32
 80a7284:	2125      	movs	r1, #37	; 0x25
 80a7286:	7019      	strb	r1, [r3, #0]
 80a7288:	f1b9 0f00 	cmp.w	r9, #0
 80a728c:	d109      	bne.n	80a72a2 <__strftime+0x5ca>
 80a728e:	1c58      	adds	r0, r3, #1
 80a7290:	497d      	ldr	r1, [pc, #500]	; (80a7488 <__strftime+0x7b0>)
 80a7292:	9205      	str	r2, [sp, #20]
 80a7294:	f7ff fcb6 	bl	80a6c04 <strcpy>
 80a7298:	9a05      	ldr	r2, [sp, #20]
 80a729a:	9200      	str	r2, [sp, #0]
 80a729c:	4643      	mov	r3, r8
 80a729e:	aa08      	add	r2, sp, #32
 80a72a0:	e058      	b.n	80a7354 <__strftime+0x67c>
 80a72a2:	2130      	movs	r1, #48	; 0x30
 80a72a4:	1c98      	adds	r0, r3, #2
 80a72a6:	7059      	strb	r1, [r3, #1]
 80a72a8:	e7f2      	b.n	80a7290 <__strftime+0x5b8>
 80a72aa:	4978      	ldr	r1, [pc, #480]	; (80a748c <__strftime+0x7b4>)
 80a72ac:	4a78      	ldr	r2, [pc, #480]	; (80a7490 <__strftime+0x7b8>)
 80a72ae:	68b3      	ldr	r3, [r6, #8]
 80a72b0:	286b      	cmp	r0, #107	; 0x6b
 80a72b2:	bf08      	it	eq
 80a72b4:	460a      	moveq	r2, r1
 80a72b6:	e6c8      	b.n	80a704a <__strftime+0x372>
 80a72b8:	68b3      	ldr	r3, [r6, #8]
 80a72ba:	b163      	cbz	r3, 80a72d6 <__strftime+0x5fe>
 80a72bc:	2b0c      	cmp	r3, #12
 80a72be:	d004      	beq.n	80a72ca <__strftime+0x5f2>
 80a72c0:	210c      	movs	r1, #12
 80a72c2:	fb93 f2f1 	sdiv	r2, r3, r1
 80a72c6:	fb01 3312 	mls	r3, r1, r2, r3
 80a72ca:	4971      	ldr	r1, [pc, #452]	; (80a7490 <__strftime+0x7b8>)
 80a72cc:	4a6f      	ldr	r2, [pc, #444]	; (80a748c <__strftime+0x7b4>)
 80a72ce:	2849      	cmp	r0, #73	; 0x49
 80a72d0:	bf08      	it	eq
 80a72d2:	460a      	moveq	r2, r1
 80a72d4:	e6b9      	b.n	80a704a <__strftime+0x372>
 80a72d6:	230c      	movs	r3, #12
 80a72d8:	e7f7      	b.n	80a72ca <__strftime+0x5f2>
 80a72da:	69f3      	ldr	r3, [r6, #28]
 80a72dc:	4a6d      	ldr	r2, [pc, #436]	; (80a7494 <__strftime+0x7bc>)
 80a72de:	3301      	adds	r3, #1
 80a72e0:	e6b3      	b.n	80a704a <__strftime+0x372>
 80a72e2:	6933      	ldr	r3, [r6, #16]
 80a72e4:	3301      	adds	r3, #1
 80a72e6:	e723      	b.n	80a7130 <__strftime+0x458>
 80a72e8:	6873      	ldr	r3, [r6, #4]
 80a72ea:	e721      	b.n	80a7130 <__strftime+0x458>
 80a72ec:	1e6b      	subs	r3, r5, #1
 80a72ee:	42a3      	cmp	r3, r4
 80a72f0:	f67f ad24 	bls.w	80a6d3c <__strftime+0x64>
 80a72f4:	230a      	movs	r3, #10
 80a72f6:	553b      	strb	r3, [r7, r4]
 80a72f8:	3401      	adds	r4, #1
 80a72fa:	e5f1      	b.n	80a6ee0 <__strftime+0x208>
 80a72fc:	68b3      	ldr	r3, [r6, #8]
 80a72fe:	2b0b      	cmp	r3, #11
 80a7300:	bfcc      	ite	gt
 80a7302:	22a4      	movgt	r2, #164	; 0xa4
 80a7304:	22a0      	movle	r2, #160	; 0xa0
 80a7306:	4b64      	ldr	r3, [pc, #400]	; (80a7498 <__strftime+0x7c0>)
 80a7308:	4413      	add	r3, r2
 80a730a:	f8d3 8004 	ldr.w	r8, [r3, #4]
 80a730e:	4640      	mov	r0, r8
 80a7310:	f000 f9e2 	bl	80a76d8 <strlen>
 80a7314:	f108 32ff 	add.w	r2, r8, #4294967295
 80a7318:	4420      	add	r0, r4
 80a731a:	f105 3cff 	add.w	ip, r5, #4294967295
 80a731e:	42a0      	cmp	r0, r4
 80a7320:	f43f adde 	beq.w	80a6ee0 <__strftime+0x208>
 80a7324:	45a4      	cmp	ip, r4
 80a7326:	f67f ad09 	bls.w	80a6d3c <__strftime+0x64>
 80a732a:	f89a 1000 	ldrb.w	r1, [sl]
 80a732e:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 80a7332:	2950      	cmp	r1, #80	; 0x50
 80a7334:	d107      	bne.n	80a7346 <__strftime+0x66e>
 80a7336:	4959      	ldr	r1, [pc, #356]	; (80a749c <__strftime+0x7c4>)
 80a7338:	5cc9      	ldrb	r1, [r1, r3]
 80a733a:	f001 0103 	and.w	r1, r1, #3
 80a733e:	2901      	cmp	r1, #1
 80a7340:	bf08      	it	eq
 80a7342:	3320      	addeq	r3, #32
 80a7344:	b2db      	uxtb	r3, r3
 80a7346:	553b      	strb	r3, [r7, r4]
 80a7348:	3401      	adds	r4, #1
 80a734a:	e7e8      	b.n	80a731e <__strftime+0x646>
 80a734c:	6873      	ldr	r3, [r6, #4]
 80a734e:	4a54      	ldr	r2, [pc, #336]	; (80a74a0 <__strftime+0x7c8>)
 80a7350:	9300      	str	r3, [sp, #0]
 80a7352:	68b3      	ldr	r3, [r6, #8]
 80a7354:	1b29      	subs	r1, r5, r4
 80a7356:	1938      	adds	r0, r7, r4
 80a7358:	f7fc fb34 	bl	80a39c4 <sniprintf>
 80a735c:	e679      	b.n	80a7052 <__strftime+0x37a>
 80a735e:	6a33      	ldr	r3, [r6, #32]
 80a7360:	2b00      	cmp	r3, #0
 80a7362:	db7b      	blt.n	80a745c <__strftime+0x784>
 80a7364:	f000 fb98 	bl	80a7a98 <__tz_lock>
 80a7368:	9b04      	ldr	r3, [sp, #16]
 80a736a:	b90b      	cbnz	r3, 80a7370 <__strftime+0x698>
 80a736c:	f000 fba0 	bl	80a7ab0 <_tzset_unlocked>
 80a7370:	f000 fd6a 	bl	80a7e48 <__gettzinfo>
 80a7374:	6a33      	ldr	r3, [r6, #32]
 80a7376:	2b00      	cmp	r3, #0
 80a7378:	bfcc      	ite	gt
 80a737a:	2350      	movgt	r3, #80	; 0x50
 80a737c:	2328      	movle	r3, #40	; 0x28
 80a737e:	58c3      	ldr	r3, [r0, r3]
 80a7380:	f1c3 0900 	rsb	r9, r3, #0
 80a7384:	f000 fb8e 	bl	80a7aa4 <__tz_unlock>
 80a7388:	2301      	movs	r3, #1
 80a738a:	9304      	str	r3, [sp, #16]
 80a738c:	f8d6 c014 	ldr.w	ip, [r6, #20]
 80a7390:	eba5 0e04 	sub.w	lr, r5, r4
 80a7394:	4662      	mov	r2, ip
 80a7396:	f1bc 0145 	subs.w	r1, ip, #69	; 0x45
 80a739a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80a739e:	9102      	str	r1, [sp, #8]
 80a73a0:	f143 31ff 	adc.w	r1, r3, #4294967295
 80a73a4:	9103      	str	r1, [sp, #12]
 80a73a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a73aa:	2800      	cmp	r0, #0
 80a73ac:	f171 0100 	sbcs.w	r1, r1, #0
 80a73b0:	eb07 0804 	add.w	r8, r7, r4
 80a73b4:	da05      	bge.n	80a73c2 <__strftime+0x6ea>
 80a73b6:	f1bc 0142 	subs.w	r1, ip, #66	; 0x42
 80a73ba:	f143 33ff 	adc.w	r3, r3, #4294967295
 80a73be:	9102      	str	r1, [sp, #8]
 80a73c0:	9303      	str	r3, [sp, #12]
 80a73c2:	9b02      	ldr	r3, [sp, #8]
 80a73c4:	f10c 32ff 	add.w	r2, ip, #4294967295
 80a73c8:	0898      	lsrs	r0, r3, #2
 80a73ca:	9b03      	ldr	r3, [sp, #12]
 80a73cc:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 80a73d0:	1099      	asrs	r1, r3, #2
 80a73d2:	2364      	movs	r3, #100	; 0x64
 80a73d4:	fb92 f3f3 	sdiv	r3, r2, r3
 80a73d8:	1ac0      	subs	r0, r0, r3
 80a73da:	eb61 71e3 	sbc.w	r1, r1, r3, asr #31
 80a73de:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80a73e2:	f20c 122b 	addw	r2, ip, #299	; 0x12b
 80a73e6:	fb92 f3f3 	sdiv	r3, r2, r3
 80a73ea:	18c0      	adds	r0, r0, r3
 80a73ec:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
 80a73f0:	f240 136d 	movw	r3, #365	; 0x16d
 80a73f4:	f1ac 0c46 	sub.w	ip, ip, #70	; 0x46
 80a73f8:	fb03 fc0c 	mul.w	ip, r3, ip
 80a73fc:	eb10 000c 	adds.w	r0, r0, ip
 80a7400:	eb41 71ec 	adc.w	r1, r1, ip, asr #31
 80a7404:	f04f 0c18 	mov.w	ip, #24
 80a7408:	69f3      	ldr	r3, [r6, #28]
 80a740a:	18c0      	adds	r0, r0, r3
 80a740c:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
 80a7410:	fba0 230c 	umull	r2, r3, r0, ip
 80a7414:	fb0c 3301 	mla	r3, ip, r1, r3
 80a7418:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
 80a741c:	68b1      	ldr	r1, [r6, #8]
 80a741e:	1852      	adds	r2, r2, r1
 80a7420:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
 80a7424:	fba2 010c 	umull	r0, r1, r2, ip
 80a7428:	fb0c 1103 	mla	r1, ip, r3, r1
 80a742c:	6873      	ldr	r3, [r6, #4]
 80a742e:	18c0      	adds	r0, r0, r3
 80a7430:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
 80a7434:	fba0 230c 	umull	r2, r3, r0, ip
 80a7438:	fb0c 3301 	mla	r3, ip, r1, r3
 80a743c:	6831      	ldr	r1, [r6, #0]
 80a743e:	4640      	mov	r0, r8
 80a7440:	1852      	adds	r2, r2, r1
 80a7442:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
 80a7446:	ebb2 0209 	subs.w	r2, r2, r9
 80a744a:	eb63 73e9 	sbc.w	r3, r3, r9, asr #31
 80a744e:	e9cd 2300 	strd	r2, r3, [sp]
 80a7452:	4671      	mov	r1, lr
 80a7454:	4a13      	ldr	r2, [pc, #76]	; (80a74a4 <__strftime+0x7cc>)
 80a7456:	f7fc fab5 	bl	80a39c4 <sniprintf>
 80a745a:	e5fa      	b.n	80a7052 <__strftime+0x37a>
 80a745c:	f04f 0900 	mov.w	r9, #0
 80a7460:	e794      	b.n	80a738c <__strftime+0x6b4>
 80a7462:	6833      	ldr	r3, [r6, #0]
 80a7464:	e664      	b.n	80a7130 <__strftime+0x458>
 80a7466:	1e6b      	subs	r3, r5, #1
 80a7468:	42a3      	cmp	r3, r4
 80a746a:	f67f ac67 	bls.w	80a6d3c <__strftime+0x64>
 80a746e:	2309      	movs	r3, #9
 80a7470:	e741      	b.n	80a72f6 <__strftime+0x61e>
 80a7472:	6833      	ldr	r3, [r6, #0]
 80a7474:	4a0c      	ldr	r2, [pc, #48]	; (80a74a8 <__strftime+0x7d0>)
 80a7476:	9301      	str	r3, [sp, #4]
 80a7478:	6873      	ldr	r3, [r6, #4]
 80a747a:	9300      	str	r3, [sp, #0]
 80a747c:	68b3      	ldr	r3, [r6, #8]
 80a747e:	e5d9      	b.n	80a7034 <__strftime+0x35c>
 80a7480:	fffff894 	.word	0xfffff894
 80a7484:	fffff895 	.word	0xfffff895
 80a7488:	080a8a6a 	.word	0x080a8a6a
 80a748c:	080a8a4f 	.word	0x080a8a4f
 80a7490:	080a8a5d 	.word	0x080a8a5d
 80a7494:	080a8a6e 	.word	0x080a8a6e
 80a7498:	080a8bc0 	.word	0x080a8bc0
 80a749c:	080a8cf9 	.word	0x080a8cf9
 80a74a0:	080a8a7d 	.word	0x080a8a7d
 80a74a4:	080a8a73 	.word	0x080a8a73
 80a74a8:	080a8a78 	.word	0x080a8a78
 80a74ac:	1e6b      	subs	r3, r5, #1
 80a74ae:	42a3      	cmp	r3, r4
 80a74b0:	f67f ac44 	bls.w	80a6d3c <__strftime+0x64>
 80a74b4:	69b3      	ldr	r3, [r6, #24]
 80a74b6:	193a      	adds	r2, r7, r4
 80a74b8:	3401      	adds	r4, #1
 80a74ba:	b913      	cbnz	r3, 80a74c2 <__strftime+0x7ea>
 80a74bc:	2337      	movs	r3, #55	; 0x37
 80a74be:	7013      	strb	r3, [r2, #0]
 80a74c0:	e50e      	b.n	80a6ee0 <__strftime+0x208>
 80a74c2:	3330      	adds	r3, #48	; 0x30
 80a74c4:	e7fb      	b.n	80a74be <__strftime+0x7e6>
 80a74c6:	69f3      	ldr	r3, [r6, #28]
 80a74c8:	69b2      	ldr	r2, [r6, #24]
 80a74ca:	3307      	adds	r3, #7
 80a74cc:	1a9b      	subs	r3, r3, r2
 80a74ce:	2207      	movs	r2, #7
 80a74d0:	fb93 f3f2 	sdiv	r3, r3, r2
 80a74d4:	e62c      	b.n	80a7130 <__strftime+0x458>
 80a74d6:	4630      	mov	r0, r6
 80a74d8:	f7ff fb9c 	bl	80a6c14 <iso_year_adjust>
 80a74dc:	69b2      	ldr	r2, [r6, #24]
 80a74de:	b132      	cbz	r2, 80a74ee <__strftime+0x816>
 80a74e0:	3a01      	subs	r2, #1
 80a74e2:	2800      	cmp	r0, #0
 80a74e4:	dc27      	bgt.n	80a7536 <__strftime+0x85e>
 80a74e6:	69f3      	ldr	r3, [r6, #28]
 80a74e8:	d103      	bne.n	80a74f2 <__strftime+0x81a>
 80a74ea:	330a      	adds	r3, #10
 80a74ec:	e7ee      	b.n	80a74cc <__strftime+0x7f4>
 80a74ee:	2206      	movs	r2, #6
 80a74f0:	e7f7      	b.n	80a74e2 <__strftime+0x80a>
 80a74f2:	6970      	ldr	r0, [r6, #20]
 80a74f4:	1ad3      	subs	r3, r2, r3
 80a74f6:	2800      	cmp	r0, #0
 80a74f8:	f240 726b 	movw	r2, #1899	; 0x76b
 80a74fc:	bfa8      	it	ge
 80a74fe:	f06f 0264 	mvnge.w	r2, #100	; 0x64
 80a7502:	4410      	add	r0, r2
 80a7504:	0782      	lsls	r2, r0, #30
 80a7506:	d105      	bne.n	80a7514 <__strftime+0x83c>
 80a7508:	2264      	movs	r2, #100	; 0x64
 80a750a:	fb90 f1f2 	sdiv	r1, r0, r2
 80a750e:	fb02 0111 	mls	r1, r2, r1, r0
 80a7512:	b971      	cbnz	r1, 80a7532 <__strftime+0x85a>
 80a7514:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80a7518:	fb90 f2f1 	sdiv	r2, r0, r1
 80a751c:	fb01 0212 	mls	r2, r1, r2, r0
 80a7520:	fab2 f282 	clz	r2, r2
 80a7524:	0952      	lsrs	r2, r2, #5
 80a7526:	1a9a      	subs	r2, r3, r2
 80a7528:	2a05      	cmp	r2, #5
 80a752a:	bfb4      	ite	lt
 80a752c:	2335      	movlt	r3, #53	; 0x35
 80a752e:	2334      	movge	r3, #52	; 0x34
 80a7530:	e5fe      	b.n	80a7130 <__strftime+0x458>
 80a7532:	2201      	movs	r2, #1
 80a7534:	e7f7      	b.n	80a7526 <__strftime+0x84e>
 80a7536:	2301      	movs	r3, #1
 80a7538:	e5fa      	b.n	80a7130 <__strftime+0x458>
 80a753a:	1e6b      	subs	r3, r5, #1
 80a753c:	42a3      	cmp	r3, r4
 80a753e:	f67f abfd 	bls.w	80a6d3c <__strftime+0x64>
 80a7542:	69b3      	ldr	r3, [r6, #24]
 80a7544:	3330      	adds	r3, #48	; 0x30
 80a7546:	e6d6      	b.n	80a72f6 <__strftime+0x61e>
 80a7548:	69b3      	ldr	r3, [r6, #24]
 80a754a:	b13b      	cbz	r3, 80a755c <__strftime+0x884>
 80a754c:	3b01      	subs	r3, #1
 80a754e:	69f2      	ldr	r2, [r6, #28]
 80a7550:	3207      	adds	r2, #7
 80a7552:	1ad2      	subs	r2, r2, r3
 80a7554:	2307      	movs	r3, #7
 80a7556:	fb92 f3f3 	sdiv	r3, r2, r3
 80a755a:	e5e9      	b.n	80a7130 <__strftime+0x458>
 80a755c:	2306      	movs	r3, #6
 80a755e:	e7f6      	b.n	80a754e <__strftime+0x876>
 80a7560:	6970      	ldr	r0, [r6, #20]
 80a7562:	2800      	cmp	r0, #0
 80a7564:	db05      	blt.n	80a7572 <__strftime+0x89a>
 80a7566:	2264      	movs	r2, #100	; 0x64
 80a7568:	fb90 f3f2 	sdiv	r3, r0, r2
 80a756c:	fb03 0312 	mls	r3, r3, r2, r0
 80a7570:	e5de      	b.n	80a7130 <__strftime+0x458>
 80a7572:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80a7576:	f000 fc21 	bl	80a7dbc <abs>
 80a757a:	e7f4      	b.n	80a7566 <__strftime+0x88e>
 80a757c:	6973      	ldr	r3, [r6, #20]
 80a757e:	4a4d      	ldr	r2, [pc, #308]	; (80a76b4 <__strftime+0x9dc>)
 80a7580:	4293      	cmp	r3, r2
 80a7582:	da0c      	bge.n	80a759e <__strftime+0x8c6>
 80a7584:	212d      	movs	r1, #45	; 0x2d
 80a7586:	eba2 0b03 	sub.w	fp, r2, r3
 80a758a:	f88d 1020 	strb.w	r1, [sp, #32]
 80a758e:	f1b8 0f00 	cmp.w	r8, #0
 80a7592:	d001      	beq.n	80a7598 <__strftime+0x8c0>
 80a7594:	f108 38ff 	add.w	r8, r8, #4294967295
 80a7598:	f10d 0321 	add.w	r3, sp, #33	; 0x21
 80a759c:	e00c      	b.n	80a75b8 <__strftime+0x8e0>
 80a759e:	f1b9 0f2b 	cmp.w	r9, #43	; 0x2b
 80a75a2:	f203 7b6c 	addw	fp, r3, #1900	; 0x76c
 80a75a6:	d106      	bne.n	80a75b6 <__strftime+0x8de>
 80a75a8:	f242 730f 	movw	r3, #9999	; 0x270f
 80a75ac:	459b      	cmp	fp, r3
 80a75ae:	d902      	bls.n	80a75b6 <__strftime+0x8de>
 80a75b0:	f88d 9020 	strb.w	r9, [sp, #32]
 80a75b4:	e7eb      	b.n	80a758e <__strftime+0x8b6>
 80a75b6:	ab08      	add	r3, sp, #32
 80a75b8:	2225      	movs	r2, #37	; 0x25
 80a75ba:	701a      	strb	r2, [r3, #0]
 80a75bc:	f1b9 0f00 	cmp.w	r9, #0
 80a75c0:	d106      	bne.n	80a75d0 <__strftime+0x8f8>
 80a75c2:	1c58      	adds	r0, r3, #1
 80a75c4:	493c      	ldr	r1, [pc, #240]	; (80a76b8 <__strftime+0x9e0>)
 80a75c6:	f7ff fb1d 	bl	80a6c04 <strcpy>
 80a75ca:	f8cd b000 	str.w	fp, [sp]
 80a75ce:	e665      	b.n	80a729c <__strftime+0x5c4>
 80a75d0:	2230      	movs	r2, #48	; 0x30
 80a75d2:	1c98      	adds	r0, r3, #2
 80a75d4:	705a      	strb	r2, [r3, #1]
 80a75d6:	e7f5      	b.n	80a75c4 <__strftime+0x8ec>
 80a75d8:	6a33      	ldr	r3, [r6, #32]
 80a75da:	2b00      	cmp	r3, #0
 80a75dc:	f6ff ac80 	blt.w	80a6ee0 <__strftime+0x208>
 80a75e0:	f000 fa5a 	bl	80a7a98 <__tz_lock>
 80a75e4:	9b04      	ldr	r3, [sp, #16]
 80a75e6:	b90b      	cbnz	r3, 80a75ec <__strftime+0x914>
 80a75e8:	f000 fa62 	bl	80a7ab0 <_tzset_unlocked>
 80a75ec:	f000 fc2c 	bl	80a7e48 <__gettzinfo>
 80a75f0:	6a33      	ldr	r3, [r6, #32]
 80a75f2:	eb07 0904 	add.w	r9, r7, r4
 80a75f6:	2b00      	cmp	r3, #0
 80a75f8:	bfcc      	ite	gt
 80a75fa:	2350      	movgt	r3, #80	; 0x50
 80a75fc:	2328      	movle	r3, #40	; 0x28
 80a75fe:	58c3      	ldr	r3, [r0, r3]
 80a7600:	eba5 0b04 	sub.w	fp, r5, r4
 80a7604:	f1c3 0800 	rsb	r8, r3, #0
 80a7608:	f000 fa4c 	bl	80a7aa4 <__tz_unlock>
 80a760c:	233c      	movs	r3, #60	; 0x3c
 80a760e:	fb98 f0f3 	sdiv	r0, r8, r3
 80a7612:	f000 fccd 	bl	80a7fb0 <labs>
 80a7616:	233c      	movs	r3, #60	; 0x3c
 80a7618:	fb90 f2f3 	sdiv	r2, r0, r3
 80a761c:	fb02 0013 	mls	r0, r2, r3, r0
 80a7620:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80a7624:	9000      	str	r0, [sp, #0]
 80a7626:	fb98 f3f3 	sdiv	r3, r8, r3
 80a762a:	4659      	mov	r1, fp
 80a762c:	4648      	mov	r0, r9
 80a762e:	4a23      	ldr	r2, [pc, #140]	; (80a76bc <__strftime+0x9e4>)
 80a7630:	f7fc f9c8 	bl	80a39c4 <sniprintf>
 80a7634:	2800      	cmp	r0, #0
 80a7636:	f6ff ab81 	blt.w	80a6d3c <__strftime+0x64>
 80a763a:	4404      	add	r4, r0
 80a763c:	42a5      	cmp	r5, r4
 80a763e:	f67f ab7d 	bls.w	80a6d3c <__strftime+0x64>
 80a7642:	2301      	movs	r3, #1
 80a7644:	9304      	str	r3, [sp, #16]
 80a7646:	e44b      	b.n	80a6ee0 <__strftime+0x208>
 80a7648:	6a33      	ldr	r3, [r6, #32]
 80a764a:	2b00      	cmp	r3, #0
 80a764c:	f6ff ac48 	blt.w	80a6ee0 <__strftime+0x208>
 80a7650:	f000 fa22 	bl	80a7a98 <__tz_lock>
 80a7654:	9b04      	ldr	r3, [sp, #16]
 80a7656:	b90b      	cbnz	r3, 80a765c <__strftime+0x984>
 80a7658:	f000 fa2a 	bl	80a7ab0 <_tzset_unlocked>
 80a765c:	6a33      	ldr	r3, [r6, #32]
 80a765e:	4a18      	ldr	r2, [pc, #96]	; (80a76c0 <__strftime+0x9e8>)
 80a7660:	2b00      	cmp	r3, #0
 80a7662:	bfd4      	ite	le
 80a7664:	2300      	movle	r3, #0
 80a7666:	2301      	movgt	r3, #1
 80a7668:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
 80a766c:	4640      	mov	r0, r8
 80a766e:	f000 f833 	bl	80a76d8 <strlen>
 80a7672:	f108 38ff 	add.w	r8, r8, #4294967295
 80a7676:	4420      	add	r0, r4
 80a7678:	1e6b      	subs	r3, r5, #1
 80a767a:	42a0      	cmp	r0, r4
 80a767c:	d102      	bne.n	80a7684 <__strftime+0x9ac>
 80a767e:	f000 fa11 	bl	80a7aa4 <__tz_unlock>
 80a7682:	e7de      	b.n	80a7642 <__strftime+0x96a>
 80a7684:	42a3      	cmp	r3, r4
 80a7686:	d904      	bls.n	80a7692 <__strftime+0x9ba>
 80a7688:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 80a768c:	553a      	strb	r2, [r7, r4]
 80a768e:	3401      	adds	r4, #1
 80a7690:	e7f3      	b.n	80a767a <__strftime+0x9a2>
 80a7692:	f000 fa07 	bl	80a7aa4 <__tz_unlock>
 80a7696:	f7ff bb51 	b.w	80a6d3c <__strftime+0x64>
 80a769a:	1e6b      	subs	r3, r5, #1
 80a769c:	42a3      	cmp	r3, r4
 80a769e:	f67f ab4d 	bls.w	80a6d3c <__strftime+0x64>
 80a76a2:	2325      	movs	r3, #37	; 0x25
 80a76a4:	e627      	b.n	80a72f6 <__strftime+0x61e>
 80a76a6:	b10d      	cbz	r5, 80a76ac <__strftime+0x9d4>
 80a76a8:	2300      	movs	r3, #0
 80a76aa:	553b      	strb	r3, [r7, r4]
 80a76ac:	4620      	mov	r0, r4
 80a76ae:	b011      	add	sp, #68	; 0x44
 80a76b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a76b4:	fffff894 	.word	0xfffff894
 80a76b8:	080a8a6a 	.word	0x080a8a6a
 80a76bc:	080a8a87 	.word	0x080a8a87
 80a76c0:	20000070 	.word	0x20000070

080a76c4 <strftime>:
 80a76c4:	b513      	push	{r0, r1, r4, lr}
 80a76c6:	4c03      	ldr	r4, [pc, #12]	; (80a76d4 <strftime+0x10>)
 80a76c8:	9400      	str	r4, [sp, #0]
 80a76ca:	f7ff fb05 	bl	80a6cd8 <__strftime>
 80a76ce:	b002      	add	sp, #8
 80a76d0:	bd10      	pop	{r4, pc}
 80a76d2:	bf00      	nop
 80a76d4:	200000d0 	.word	0x200000d0

080a76d8 <strlen>:
 80a76d8:	4603      	mov	r3, r0
 80a76da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a76de:	2a00      	cmp	r2, #0
 80a76e0:	d1fb      	bne.n	80a76da <strlen+0x2>
 80a76e2:	1a18      	subs	r0, r3, r0
 80a76e4:	3801      	subs	r0, #1
 80a76e6:	4770      	bx	lr

080a76e8 <strncmp>:
 80a76e8:	b510      	push	{r4, lr}
 80a76ea:	b16a      	cbz	r2, 80a7708 <strncmp+0x20>
 80a76ec:	3901      	subs	r1, #1
 80a76ee:	1884      	adds	r4, r0, r2
 80a76f0:	f810 3b01 	ldrb.w	r3, [r0], #1
 80a76f4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80a76f8:	4293      	cmp	r3, r2
 80a76fa:	d103      	bne.n	80a7704 <strncmp+0x1c>
 80a76fc:	42a0      	cmp	r0, r4
 80a76fe:	d001      	beq.n	80a7704 <strncmp+0x1c>
 80a7700:	2b00      	cmp	r3, #0
 80a7702:	d1f5      	bne.n	80a76f0 <strncmp+0x8>
 80a7704:	1a98      	subs	r0, r3, r2
 80a7706:	bd10      	pop	{r4, pc}
 80a7708:	4610      	mov	r0, r2
 80a770a:	e7fc      	b.n	80a7706 <strncmp+0x1e>

080a770c <strncpy>:
 80a770c:	4603      	mov	r3, r0
 80a770e:	b510      	push	{r4, lr}
 80a7710:	3901      	subs	r1, #1
 80a7712:	b132      	cbz	r2, 80a7722 <strncpy+0x16>
 80a7714:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80a7718:	3a01      	subs	r2, #1
 80a771a:	f803 4b01 	strb.w	r4, [r3], #1
 80a771e:	2c00      	cmp	r4, #0
 80a7720:	d1f7      	bne.n	80a7712 <strncpy+0x6>
 80a7722:	2100      	movs	r1, #0
 80a7724:	441a      	add	r2, r3
 80a7726:	4293      	cmp	r3, r2
 80a7728:	d100      	bne.n	80a772c <strncpy+0x20>
 80a772a:	bd10      	pop	{r4, pc}
 80a772c:	f803 1b01 	strb.w	r1, [r3], #1
 80a7730:	e7f9      	b.n	80a7726 <strncpy+0x1a>
	...

080a7734 <_strtol_l.isra.0>:
 80a7734:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a7738:	468c      	mov	ip, r1
 80a773a:	4686      	mov	lr, r0
 80a773c:	4e39      	ldr	r6, [pc, #228]	; (80a7824 <_strtol_l.isra.0+0xf0>)
 80a773e:	4660      	mov	r0, ip
 80a7740:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80a7744:	5da5      	ldrb	r5, [r4, r6]
 80a7746:	f015 0508 	ands.w	r5, r5, #8
 80a774a:	d1f8      	bne.n	80a773e <_strtol_l.isra.0+0xa>
 80a774c:	2c2d      	cmp	r4, #45	; 0x2d
 80a774e:	d133      	bne.n	80a77b8 <_strtol_l.isra.0+0x84>
 80a7750:	f04f 0801 	mov.w	r8, #1
 80a7754:	f89c 4000 	ldrb.w	r4, [ip]
 80a7758:	f100 0c02 	add.w	ip, r0, #2
 80a775c:	2b00      	cmp	r3, #0
 80a775e:	d05c      	beq.n	80a781a <_strtol_l.isra.0+0xe6>
 80a7760:	2b10      	cmp	r3, #16
 80a7762:	d10c      	bne.n	80a777e <_strtol_l.isra.0+0x4a>
 80a7764:	2c30      	cmp	r4, #48	; 0x30
 80a7766:	d10a      	bne.n	80a777e <_strtol_l.isra.0+0x4a>
 80a7768:	f89c 0000 	ldrb.w	r0, [ip]
 80a776c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80a7770:	2858      	cmp	r0, #88	; 0x58
 80a7772:	d14d      	bne.n	80a7810 <_strtol_l.isra.0+0xdc>
 80a7774:	2310      	movs	r3, #16
 80a7776:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80a777a:	f10c 0c02 	add.w	ip, ip, #2
 80a777e:	2600      	movs	r6, #0
 80a7780:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 80a7784:	3f01      	subs	r7, #1
 80a7786:	fbb7 f9f3 	udiv	r9, r7, r3
 80a778a:	4630      	mov	r0, r6
 80a778c:	fb03 7a19 	mls	sl, r3, r9, r7
 80a7790:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
 80a7794:	2d09      	cmp	r5, #9
 80a7796:	d818      	bhi.n	80a77ca <_strtol_l.isra.0+0x96>
 80a7798:	462c      	mov	r4, r5
 80a779a:	42a3      	cmp	r3, r4
 80a779c:	dd24      	ble.n	80a77e8 <_strtol_l.isra.0+0xb4>
 80a779e:	1c75      	adds	r5, r6, #1
 80a77a0:	d007      	beq.n	80a77b2 <_strtol_l.isra.0+0x7e>
 80a77a2:	4581      	cmp	r9, r0
 80a77a4:	d31d      	bcc.n	80a77e2 <_strtol_l.isra.0+0xae>
 80a77a6:	d101      	bne.n	80a77ac <_strtol_l.isra.0+0x78>
 80a77a8:	45a2      	cmp	sl, r4
 80a77aa:	db1a      	blt.n	80a77e2 <_strtol_l.isra.0+0xae>
 80a77ac:	2601      	movs	r6, #1
 80a77ae:	fb00 4003 	mla	r0, r0, r3, r4
 80a77b2:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80a77b6:	e7eb      	b.n	80a7790 <_strtol_l.isra.0+0x5c>
 80a77b8:	2c2b      	cmp	r4, #43	; 0x2b
 80a77ba:	bf08      	it	eq
 80a77bc:	f89c 4000 	ldrbeq.w	r4, [ip]
 80a77c0:	46a8      	mov	r8, r5
 80a77c2:	bf08      	it	eq
 80a77c4:	f100 0c02 	addeq.w	ip, r0, #2
 80a77c8:	e7c8      	b.n	80a775c <_strtol_l.isra.0+0x28>
 80a77ca:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
 80a77ce:	2d19      	cmp	r5, #25
 80a77d0:	d801      	bhi.n	80a77d6 <_strtol_l.isra.0+0xa2>
 80a77d2:	3c37      	subs	r4, #55	; 0x37
 80a77d4:	e7e1      	b.n	80a779a <_strtol_l.isra.0+0x66>
 80a77d6:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
 80a77da:	2d19      	cmp	r5, #25
 80a77dc:	d804      	bhi.n	80a77e8 <_strtol_l.isra.0+0xb4>
 80a77de:	3c57      	subs	r4, #87	; 0x57
 80a77e0:	e7db      	b.n	80a779a <_strtol_l.isra.0+0x66>
 80a77e2:	f04f 36ff 	mov.w	r6, #4294967295
 80a77e6:	e7e4      	b.n	80a77b2 <_strtol_l.isra.0+0x7e>
 80a77e8:	1c73      	adds	r3, r6, #1
 80a77ea:	d106      	bne.n	80a77fa <_strtol_l.isra.0+0xc6>
 80a77ec:	2322      	movs	r3, #34	; 0x22
 80a77ee:	4638      	mov	r0, r7
 80a77f0:	f8ce 3000 	str.w	r3, [lr]
 80a77f4:	b942      	cbnz	r2, 80a7808 <_strtol_l.isra.0+0xd4>
 80a77f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a77fa:	f1b8 0f00 	cmp.w	r8, #0
 80a77fe:	d000      	beq.n	80a7802 <_strtol_l.isra.0+0xce>
 80a7800:	4240      	negs	r0, r0
 80a7802:	2a00      	cmp	r2, #0
 80a7804:	d0f7      	beq.n	80a77f6 <_strtol_l.isra.0+0xc2>
 80a7806:	b10e      	cbz	r6, 80a780c <_strtol_l.isra.0+0xd8>
 80a7808:	f10c 31ff 	add.w	r1, ip, #4294967295
 80a780c:	6011      	str	r1, [r2, #0]
 80a780e:	e7f2      	b.n	80a77f6 <_strtol_l.isra.0+0xc2>
 80a7810:	2430      	movs	r4, #48	; 0x30
 80a7812:	2b00      	cmp	r3, #0
 80a7814:	d1b3      	bne.n	80a777e <_strtol_l.isra.0+0x4a>
 80a7816:	2308      	movs	r3, #8
 80a7818:	e7b1      	b.n	80a777e <_strtol_l.isra.0+0x4a>
 80a781a:	2c30      	cmp	r4, #48	; 0x30
 80a781c:	d0a4      	beq.n	80a7768 <_strtol_l.isra.0+0x34>
 80a781e:	230a      	movs	r3, #10
 80a7820:	e7ad      	b.n	80a777e <_strtol_l.isra.0+0x4a>
 80a7822:	bf00      	nop
 80a7824:	080a8cf9 	.word	0x080a8cf9

080a7828 <strtol>:
 80a7828:	4613      	mov	r3, r2
 80a782a:	460a      	mov	r2, r1
 80a782c:	4601      	mov	r1, r0
 80a782e:	4802      	ldr	r0, [pc, #8]	; (80a7838 <strtol+0x10>)
 80a7830:	6800      	ldr	r0, [r0, #0]
 80a7832:	f7ff bf7f 	b.w	80a7734 <_strtol_l.isra.0>
 80a7836:	bf00      	nop
 80a7838:	2000000c 	.word	0x2000000c

080a783c <_strtoul_l.isra.0>:
 80a783c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a7840:	468c      	mov	ip, r1
 80a7842:	4686      	mov	lr, r0
 80a7844:	4e3a      	ldr	r6, [pc, #232]	; (80a7930 <_strtoul_l.isra.0+0xf4>)
 80a7846:	4660      	mov	r0, ip
 80a7848:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80a784c:	5da5      	ldrb	r5, [r4, r6]
 80a784e:	f015 0508 	ands.w	r5, r5, #8
 80a7852:	d1f8      	bne.n	80a7846 <_strtoul_l.isra.0+0xa>
 80a7854:	2c2d      	cmp	r4, #45	; 0x2d
 80a7856:	d134      	bne.n	80a78c2 <_strtoul_l.isra.0+0x86>
 80a7858:	f04f 0801 	mov.w	r8, #1
 80a785c:	f89c 4000 	ldrb.w	r4, [ip]
 80a7860:	f100 0c02 	add.w	ip, r0, #2
 80a7864:	2b00      	cmp	r3, #0
 80a7866:	d05e      	beq.n	80a7926 <_strtoul_l.isra.0+0xea>
 80a7868:	2b10      	cmp	r3, #16
 80a786a:	d10c      	bne.n	80a7886 <_strtoul_l.isra.0+0x4a>
 80a786c:	2c30      	cmp	r4, #48	; 0x30
 80a786e:	d10a      	bne.n	80a7886 <_strtoul_l.isra.0+0x4a>
 80a7870:	f89c 0000 	ldrb.w	r0, [ip]
 80a7874:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80a7878:	2858      	cmp	r0, #88	; 0x58
 80a787a:	d14f      	bne.n	80a791c <_strtoul_l.isra.0+0xe0>
 80a787c:	2310      	movs	r3, #16
 80a787e:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80a7882:	f10c 0c02 	add.w	ip, ip, #2
 80a7886:	f04f 37ff 	mov.w	r7, #4294967295
 80a788a:	fbb7 f7f3 	udiv	r7, r7, r3
 80a788e:	2500      	movs	r5, #0
 80a7890:	fb03 f907 	mul.w	r9, r3, r7
 80a7894:	4628      	mov	r0, r5
 80a7896:	ea6f 0909 	mvn.w	r9, r9
 80a789a:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 80a789e:	2e09      	cmp	r6, #9
 80a78a0:	d818      	bhi.n	80a78d4 <_strtoul_l.isra.0+0x98>
 80a78a2:	4634      	mov	r4, r6
 80a78a4:	42a3      	cmp	r3, r4
 80a78a6:	dd24      	ble.n	80a78f2 <_strtoul_l.isra.0+0xb6>
 80a78a8:	2d00      	cmp	r5, #0
 80a78aa:	db1f      	blt.n	80a78ec <_strtoul_l.isra.0+0xb0>
 80a78ac:	4287      	cmp	r7, r0
 80a78ae:	d31d      	bcc.n	80a78ec <_strtoul_l.isra.0+0xb0>
 80a78b0:	d101      	bne.n	80a78b6 <_strtoul_l.isra.0+0x7a>
 80a78b2:	45a1      	cmp	r9, r4
 80a78b4:	db1a      	blt.n	80a78ec <_strtoul_l.isra.0+0xb0>
 80a78b6:	2501      	movs	r5, #1
 80a78b8:	fb00 4003 	mla	r0, r0, r3, r4
 80a78bc:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80a78c0:	e7eb      	b.n	80a789a <_strtoul_l.isra.0+0x5e>
 80a78c2:	2c2b      	cmp	r4, #43	; 0x2b
 80a78c4:	bf08      	it	eq
 80a78c6:	f89c 4000 	ldrbeq.w	r4, [ip]
 80a78ca:	46a8      	mov	r8, r5
 80a78cc:	bf08      	it	eq
 80a78ce:	f100 0c02 	addeq.w	ip, r0, #2
 80a78d2:	e7c7      	b.n	80a7864 <_strtoul_l.isra.0+0x28>
 80a78d4:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 80a78d8:	2e19      	cmp	r6, #25
 80a78da:	d801      	bhi.n	80a78e0 <_strtoul_l.isra.0+0xa4>
 80a78dc:	3c37      	subs	r4, #55	; 0x37
 80a78de:	e7e1      	b.n	80a78a4 <_strtoul_l.isra.0+0x68>
 80a78e0:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 80a78e4:	2e19      	cmp	r6, #25
 80a78e6:	d804      	bhi.n	80a78f2 <_strtoul_l.isra.0+0xb6>
 80a78e8:	3c57      	subs	r4, #87	; 0x57
 80a78ea:	e7db      	b.n	80a78a4 <_strtoul_l.isra.0+0x68>
 80a78ec:	f04f 35ff 	mov.w	r5, #4294967295
 80a78f0:	e7e4      	b.n	80a78bc <_strtoul_l.isra.0+0x80>
 80a78f2:	2d00      	cmp	r5, #0
 80a78f4:	da07      	bge.n	80a7906 <_strtoul_l.isra.0+0xca>
 80a78f6:	2322      	movs	r3, #34	; 0x22
 80a78f8:	f04f 30ff 	mov.w	r0, #4294967295
 80a78fc:	f8ce 3000 	str.w	r3, [lr]
 80a7900:	b942      	cbnz	r2, 80a7914 <_strtoul_l.isra.0+0xd8>
 80a7902:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a7906:	f1b8 0f00 	cmp.w	r8, #0
 80a790a:	d000      	beq.n	80a790e <_strtoul_l.isra.0+0xd2>
 80a790c:	4240      	negs	r0, r0
 80a790e:	2a00      	cmp	r2, #0
 80a7910:	d0f7      	beq.n	80a7902 <_strtoul_l.isra.0+0xc6>
 80a7912:	b10d      	cbz	r5, 80a7918 <_strtoul_l.isra.0+0xdc>
 80a7914:	f10c 31ff 	add.w	r1, ip, #4294967295
 80a7918:	6011      	str	r1, [r2, #0]
 80a791a:	e7f2      	b.n	80a7902 <_strtoul_l.isra.0+0xc6>
 80a791c:	2430      	movs	r4, #48	; 0x30
 80a791e:	2b00      	cmp	r3, #0
 80a7920:	d1b1      	bne.n	80a7886 <_strtoul_l.isra.0+0x4a>
 80a7922:	2308      	movs	r3, #8
 80a7924:	e7af      	b.n	80a7886 <_strtoul_l.isra.0+0x4a>
 80a7926:	2c30      	cmp	r4, #48	; 0x30
 80a7928:	d0a2      	beq.n	80a7870 <_strtoul_l.isra.0+0x34>
 80a792a:	230a      	movs	r3, #10
 80a792c:	e7ab      	b.n	80a7886 <_strtoul_l.isra.0+0x4a>
 80a792e:	bf00      	nop
 80a7930:	080a8cf9 	.word	0x080a8cf9

080a7934 <strtoul>:
 80a7934:	4613      	mov	r3, r2
 80a7936:	460a      	mov	r2, r1
 80a7938:	4601      	mov	r1, r0
 80a793a:	4802      	ldr	r0, [pc, #8]	; (80a7944 <strtoul+0x10>)
 80a793c:	6800      	ldr	r0, [r0, #0]
 80a793e:	f7ff bf7d 	b.w	80a783c <_strtoul_l.isra.0>
 80a7942:	bf00      	nop
 80a7944:	2000000c 	.word	0x2000000c

080a7948 <__tzcalc_limits>:
 80a7948:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a794c:	4680      	mov	r8, r0
 80a794e:	f000 fa7b 	bl	80a7e48 <__gettzinfo>
 80a7952:	f240 73b1 	movw	r3, #1969	; 0x7b1
 80a7956:	4598      	cmp	r8, r3
 80a7958:	f340 8097 	ble.w	80a7a8a <__tzcalc_limits+0x142>
 80a795c:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 80a7960:	f240 126d 	movw	r2, #365	; 0x16d
 80a7964:	4443      	add	r3, r8
 80a7966:	109b      	asrs	r3, r3, #2
 80a7968:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
 80a796c:	fb02 3505 	mla	r5, r2, r5, r3
 80a7970:	f06f 0263 	mvn.w	r2, #99	; 0x63
 80a7974:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
 80a7978:	fb93 f3f2 	sdiv	r3, r3, r2
 80a797c:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 80a7980:	441d      	add	r5, r3
 80a7982:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80a7986:	4442      	add	r2, r8
 80a7988:	fbb2 f2f3 	udiv	r2, r2, r3
 80a798c:	fb98 f7f3 	sdiv	r7, r8, r3
 80a7990:	4415      	add	r5, r2
 80a7992:	2264      	movs	r2, #100	; 0x64
 80a7994:	fb03 8717 	mls	r7, r3, r7, r8
 80a7998:	fb98 f6f2 	sdiv	r6, r8, r2
 80a799c:	fab7 fc87 	clz	ip, r7
 80a79a0:	4604      	mov	r4, r0
 80a79a2:	f04f 0e07 	mov.w	lr, #7
 80a79a6:	fb02 8616 	mls	r6, r2, r6, r8
 80a79aa:	f008 0303 	and.w	r3, r8, #3
 80a79ae:	f8c0 8004 	str.w	r8, [r0, #4]
 80a79b2:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80a79b6:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 80a79ba:	9300      	str	r3, [sp, #0]
 80a79bc:	7a22      	ldrb	r2, [r4, #8]
 80a79be:	6963      	ldr	r3, [r4, #20]
 80a79c0:	2a4a      	cmp	r2, #74	; 0x4a
 80a79c2:	d128      	bne.n	80a7a16 <__tzcalc_limits+0xce>
 80a79c4:	9900      	ldr	r1, [sp, #0]
 80a79c6:	18ea      	adds	r2, r5, r3
 80a79c8:	b901      	cbnz	r1, 80a79cc <__tzcalc_limits+0x84>
 80a79ca:	b906      	cbnz	r6, 80a79ce <__tzcalc_limits+0x86>
 80a79cc:	bb0f      	cbnz	r7, 80a7a12 <__tzcalc_limits+0xca>
 80a79ce:	2b3b      	cmp	r3, #59	; 0x3b
 80a79d0:	bfd4      	ite	le
 80a79d2:	2300      	movle	r3, #0
 80a79d4:	2301      	movgt	r3, #1
 80a79d6:	4413      	add	r3, r2
 80a79d8:	1e5a      	subs	r2, r3, #1
 80a79da:	69a3      	ldr	r3, [r4, #24]
 80a79dc:	492c      	ldr	r1, [pc, #176]	; (80a7a90 <__tzcalc_limits+0x148>)
 80a79de:	3428      	adds	r4, #40	; 0x28
 80a79e0:	fb01 3202 	mla	r2, r1, r2, r3
 80a79e4:	6823      	ldr	r3, [r4, #0]
 80a79e6:	4413      	add	r3, r2
 80a79e8:	461a      	mov	r2, r3
 80a79ea:	17db      	asrs	r3, r3, #31
 80a79ec:	e944 2302 	strd	r2, r3, [r4, #-8]
 80a79f0:	45a3      	cmp	fp, r4
 80a79f2:	d1e3      	bne.n	80a79bc <__tzcalc_limits+0x74>
 80a79f4:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
 80a79f8:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
 80a79fc:	4294      	cmp	r4, r2
 80a79fe:	eb75 0303 	sbcs.w	r3, r5, r3
 80a7a02:	bfb4      	ite	lt
 80a7a04:	2301      	movlt	r3, #1
 80a7a06:	2300      	movge	r3, #0
 80a7a08:	6003      	str	r3, [r0, #0]
 80a7a0a:	2001      	movs	r0, #1
 80a7a0c:	b003      	add	sp, #12
 80a7a0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a7a12:	2300      	movs	r3, #0
 80a7a14:	e7df      	b.n	80a79d6 <__tzcalc_limits+0x8e>
 80a7a16:	2a44      	cmp	r2, #68	; 0x44
 80a7a18:	d101      	bne.n	80a7a1e <__tzcalc_limits+0xd6>
 80a7a1a:	18ea      	adds	r2, r5, r3
 80a7a1c:	e7dd      	b.n	80a79da <__tzcalc_limits+0x92>
 80a7a1e:	9a00      	ldr	r2, [sp, #0]
 80a7a20:	bb6a      	cbnz	r2, 80a7a7e <__tzcalc_limits+0x136>
 80a7a22:	2e00      	cmp	r6, #0
 80a7a24:	bf0c      	ite	eq
 80a7a26:	46e0      	moveq	r8, ip
 80a7a28:	f04f 0801 	movne.w	r8, #1
 80a7a2c:	f04f 0a30 	mov.w	sl, #48	; 0x30
 80a7a30:	68e2      	ldr	r2, [r4, #12]
 80a7a32:	f04f 0900 	mov.w	r9, #0
 80a7a36:	9201      	str	r2, [sp, #4]
 80a7a38:	462a      	mov	r2, r5
 80a7a3a:	4916      	ldr	r1, [pc, #88]	; (80a7a94 <__tzcalc_limits+0x14c>)
 80a7a3c:	fb0a 1808 	mla	r8, sl, r8, r1
 80a7a40:	f1a8 0804 	sub.w	r8, r8, #4
 80a7a44:	9901      	ldr	r1, [sp, #4]
 80a7a46:	f109 0901 	add.w	r9, r9, #1
 80a7a4a:	4549      	cmp	r1, r9
 80a7a4c:	f858 a029 	ldr.w	sl, [r8, r9, lsl #2]
 80a7a50:	dc17      	bgt.n	80a7a82 <__tzcalc_limits+0x13a>
 80a7a52:	f102 0804 	add.w	r8, r2, #4
 80a7a56:	fb98 f9fe 	sdiv	r9, r8, lr
 80a7a5a:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 80a7a5e:	eba8 0909 	sub.w	r9, r8, r9
 80a7a62:	ebb3 0909 	subs.w	r9, r3, r9
 80a7a66:	6923      	ldr	r3, [r4, #16]
 80a7a68:	bf48      	it	mi
 80a7a6a:	f109 0907 	addmi.w	r9, r9, #7
 80a7a6e:	3b01      	subs	r3, #1
 80a7a70:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a7a74:	444b      	add	r3, r9
 80a7a76:	4553      	cmp	r3, sl
 80a7a78:	da05      	bge.n	80a7a86 <__tzcalc_limits+0x13e>
 80a7a7a:	441a      	add	r2, r3
 80a7a7c:	e7ad      	b.n	80a79da <__tzcalc_limits+0x92>
 80a7a7e:	46e0      	mov	r8, ip
 80a7a80:	e7d4      	b.n	80a7a2c <__tzcalc_limits+0xe4>
 80a7a82:	4452      	add	r2, sl
 80a7a84:	e7de      	b.n	80a7a44 <__tzcalc_limits+0xfc>
 80a7a86:	3b07      	subs	r3, #7
 80a7a88:	e7f5      	b.n	80a7a76 <__tzcalc_limits+0x12e>
 80a7a8a:	2000      	movs	r0, #0
 80a7a8c:	e7be      	b.n	80a7a0c <__tzcalc_limits+0xc4>
 80a7a8e:	bf00      	nop
 80a7a90:	00015180 	.word	0x00015180
 80a7a94:	080a89dc 	.word	0x080a89dc

080a7a98 <__tz_lock>:
 80a7a98:	4801      	ldr	r0, [pc, #4]	; (80a7aa0 <__tz_lock+0x8>)
 80a7a9a:	f000 ba8d 	b.w	80a7fb8 <__retarget_lock_acquire>
 80a7a9e:	bf00      	nop
 80a7aa0:	20000663 	.word	0x20000663

080a7aa4 <__tz_unlock>:
 80a7aa4:	4801      	ldr	r0, [pc, #4]	; (80a7aac <__tz_unlock+0x8>)
 80a7aa6:	f000 ba89 	b.w	80a7fbc <__retarget_lock_release>
 80a7aaa:	bf00      	nop
 80a7aac:	20000663 	.word	0x20000663

080a7ab0 <_tzset_unlocked>:
 80a7ab0:	4b01      	ldr	r3, [pc, #4]	; (80a7ab8 <_tzset_unlocked+0x8>)
 80a7ab2:	6818      	ldr	r0, [r3, #0]
 80a7ab4:	f000 b802 	b.w	80a7abc <_tzset_unlocked_r>
 80a7ab8:	2000000c 	.word	0x2000000c

080a7abc <_tzset_unlocked_r>:
 80a7abc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a7ac0:	b08d      	sub	sp, #52	; 0x34
 80a7ac2:	4607      	mov	r7, r0
 80a7ac4:	f000 f9c0 	bl	80a7e48 <__gettzinfo>
 80a7ac8:	49b0      	ldr	r1, [pc, #704]	; (80a7d8c <_tzset_unlocked_r+0x2d0>)
 80a7aca:	4605      	mov	r5, r0
 80a7acc:	4638      	mov	r0, r7
 80a7ace:	f000 f9b3 	bl	80a7e38 <_getenv_r>
 80a7ad2:	4eaf      	ldr	r6, [pc, #700]	; (80a7d90 <_tzset_unlocked_r+0x2d4>)
 80a7ad4:	4604      	mov	r4, r0
 80a7ad6:	b970      	cbnz	r0, 80a7af6 <_tzset_unlocked_r+0x3a>
 80a7ad8:	4bae      	ldr	r3, [pc, #696]	; (80a7d94 <_tzset_unlocked_r+0x2d8>)
 80a7ada:	4aaf      	ldr	r2, [pc, #700]	; (80a7d98 <_tzset_unlocked_r+0x2dc>)
 80a7adc:	6018      	str	r0, [r3, #0]
 80a7ade:	4baf      	ldr	r3, [pc, #700]	; (80a7d9c <_tzset_unlocked_r+0x2e0>)
 80a7ae0:	6018      	str	r0, [r3, #0]
 80a7ae2:	4baf      	ldr	r3, [pc, #700]	; (80a7da0 <_tzset_unlocked_r+0x2e4>)
 80a7ae4:	6830      	ldr	r0, [r6, #0]
 80a7ae6:	e9c3 2200 	strd	r2, r2, [r3]
 80a7aea:	f7fb ff3b 	bl	80a3964 <free>
 80a7aee:	6034      	str	r4, [r6, #0]
 80a7af0:	b00d      	add	sp, #52	; 0x34
 80a7af2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a7af6:	6831      	ldr	r1, [r6, #0]
 80a7af8:	2900      	cmp	r1, #0
 80a7afa:	d15f      	bne.n	80a7bbc <_tzset_unlocked_r+0x100>
 80a7afc:	6830      	ldr	r0, [r6, #0]
 80a7afe:	f7fb ff31 	bl	80a3964 <free>
 80a7b02:	4620      	mov	r0, r4
 80a7b04:	f7ff fde8 	bl	80a76d8 <strlen>
 80a7b08:	1c41      	adds	r1, r0, #1
 80a7b0a:	4638      	mov	r0, r7
 80a7b0c:	f7fb ff6a 	bl	80a39e4 <_malloc_r>
 80a7b10:	6030      	str	r0, [r6, #0]
 80a7b12:	2800      	cmp	r0, #0
 80a7b14:	d157      	bne.n	80a7bc6 <_tzset_unlocked_r+0x10a>
 80a7b16:	7823      	ldrb	r3, [r4, #0]
 80a7b18:	ae0a      	add	r6, sp, #40	; 0x28
 80a7b1a:	2b3a      	cmp	r3, #58	; 0x3a
 80a7b1c:	bf08      	it	eq
 80a7b1e:	3401      	addeq	r4, #1
 80a7b20:	4633      	mov	r3, r6
 80a7b22:	4620      	mov	r0, r4
 80a7b24:	4a9f      	ldr	r2, [pc, #636]	; (80a7da4 <_tzset_unlocked_r+0x2e8>)
 80a7b26:	49a0      	ldr	r1, [pc, #640]	; (80a7da8 <_tzset_unlocked_r+0x2ec>)
 80a7b28:	f7fb ff3c 	bl	80a39a4 <siscanf>
 80a7b2c:	2800      	cmp	r0, #0
 80a7b2e:	dddf      	ble.n	80a7af0 <_tzset_unlocked_r+0x34>
 80a7b30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a7b32:	18e7      	adds	r7, r4, r3
 80a7b34:	5ce3      	ldrb	r3, [r4, r3]
 80a7b36:	2b2d      	cmp	r3, #45	; 0x2d
 80a7b38:	d149      	bne.n	80a7bce <_tzset_unlocked_r+0x112>
 80a7b3a:	f04f 34ff 	mov.w	r4, #4294967295
 80a7b3e:	3701      	adds	r7, #1
 80a7b40:	f04f 0800 	mov.w	r8, #0
 80a7b44:	f10d 0a20 	add.w	sl, sp, #32
 80a7b48:	f10d 0b1e 	add.w	fp, sp, #30
 80a7b4c:	4633      	mov	r3, r6
 80a7b4e:	4638      	mov	r0, r7
 80a7b50:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 80a7b54:	4995      	ldr	r1, [pc, #596]	; (80a7dac <_tzset_unlocked_r+0x2f0>)
 80a7b56:	9603      	str	r6, [sp, #12]
 80a7b58:	f8cd b000 	str.w	fp, [sp]
 80a7b5c:	aa07      	add	r2, sp, #28
 80a7b5e:	f8ad 801e 	strh.w	r8, [sp, #30]
 80a7b62:	f8ad 8020 	strh.w	r8, [sp, #32]
 80a7b66:	f7fb ff1d 	bl	80a39a4 <siscanf>
 80a7b6a:	4540      	cmp	r0, r8
 80a7b6c:	ddc0      	ble.n	80a7af0 <_tzset_unlocked_r+0x34>
 80a7b6e:	213c      	movs	r1, #60	; 0x3c
 80a7b70:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80a7b74:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80a7b78:	f8df 923c 	ldr.w	r9, [pc, #572]	; 80a7db8 <_tzset_unlocked_r+0x2fc>
 80a7b7c:	fb01 2203 	mla	r2, r1, r3, r2
 80a7b80:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a7b84:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80a7b88:	fb01 2303 	mla	r3, r1, r3, r2
 80a7b8c:	435c      	muls	r4, r3
 80a7b8e:	4b85      	ldr	r3, [pc, #532]	; (80a7da4 <_tzset_unlocked_r+0x2e8>)
 80a7b90:	62ac      	str	r4, [r5, #40]	; 0x28
 80a7b92:	4c83      	ldr	r4, [pc, #524]	; (80a7da0 <_tzset_unlocked_r+0x2e4>)
 80a7b94:	464a      	mov	r2, r9
 80a7b96:	6023      	str	r3, [r4, #0]
 80a7b98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a7b9a:	4983      	ldr	r1, [pc, #524]	; (80a7da8 <_tzset_unlocked_r+0x2ec>)
 80a7b9c:	441f      	add	r7, r3
 80a7b9e:	4638      	mov	r0, r7
 80a7ba0:	4633      	mov	r3, r6
 80a7ba2:	f7fb feff 	bl	80a39a4 <siscanf>
 80a7ba6:	4540      	cmp	r0, r8
 80a7ba8:	dc17      	bgt.n	80a7bda <_tzset_unlocked_r+0x11e>
 80a7baa:	6823      	ldr	r3, [r4, #0]
 80a7bac:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80a7bae:	6063      	str	r3, [r4, #4]
 80a7bb0:	4b78      	ldr	r3, [pc, #480]	; (80a7d94 <_tzset_unlocked_r+0x2d8>)
 80a7bb2:	601a      	str	r2, [r3, #0]
 80a7bb4:	4b79      	ldr	r3, [pc, #484]	; (80a7d9c <_tzset_unlocked_r+0x2e0>)
 80a7bb6:	f8c3 8000 	str.w	r8, [r3]
 80a7bba:	e799      	b.n	80a7af0 <_tzset_unlocked_r+0x34>
 80a7bbc:	f7ff f818 	bl	80a6bf0 <strcmp>
 80a7bc0:	2800      	cmp	r0, #0
 80a7bc2:	d19b      	bne.n	80a7afc <_tzset_unlocked_r+0x40>
 80a7bc4:	e794      	b.n	80a7af0 <_tzset_unlocked_r+0x34>
 80a7bc6:	4621      	mov	r1, r4
 80a7bc8:	f7ff f81c 	bl	80a6c04 <strcpy>
 80a7bcc:	e7a3      	b.n	80a7b16 <_tzset_unlocked_r+0x5a>
 80a7bce:	2b2b      	cmp	r3, #43	; 0x2b
 80a7bd0:	f04f 0401 	mov.w	r4, #1
 80a7bd4:	bf08      	it	eq
 80a7bd6:	3701      	addeq	r7, #1
 80a7bd8:	e7b2      	b.n	80a7b40 <_tzset_unlocked_r+0x84>
 80a7bda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a7bdc:	f8c4 9004 	str.w	r9, [r4, #4]
 80a7be0:	18fc      	adds	r4, r7, r3
 80a7be2:	5cfb      	ldrb	r3, [r7, r3]
 80a7be4:	2b2d      	cmp	r3, #45	; 0x2d
 80a7be6:	f040 808c 	bne.w	80a7d02 <_tzset_unlocked_r+0x246>
 80a7bea:	f04f 37ff 	mov.w	r7, #4294967295
 80a7bee:	3401      	adds	r4, #1
 80a7bf0:	2300      	movs	r3, #0
 80a7bf2:	4620      	mov	r0, r4
 80a7bf4:	f8ad 301c 	strh.w	r3, [sp, #28]
 80a7bf8:	f8ad 301e 	strh.w	r3, [sp, #30]
 80a7bfc:	f8ad 3020 	strh.w	r3, [sp, #32]
 80a7c00:	930a      	str	r3, [sp, #40]	; 0x28
 80a7c02:	e9cd a602 	strd	sl, r6, [sp, #8]
 80a7c06:	4633      	mov	r3, r6
 80a7c08:	e9cd b600 	strd	fp, r6, [sp]
 80a7c0c:	4967      	ldr	r1, [pc, #412]	; (80a7dac <_tzset_unlocked_r+0x2f0>)
 80a7c0e:	aa07      	add	r2, sp, #28
 80a7c10:	f7fb fec8 	bl	80a39a4 <siscanf>
 80a7c14:	2800      	cmp	r0, #0
 80a7c16:	dc7a      	bgt.n	80a7d0e <_tzset_unlocked_r+0x252>
 80a7c18:	6aaf      	ldr	r7, [r5, #40]	; 0x28
 80a7c1a:	f5a7 6761 	sub.w	r7, r7, #3600	; 0xe10
 80a7c1e:	652f      	str	r7, [r5, #80]	; 0x50
 80a7c20:	f04f 0900 	mov.w	r9, #0
 80a7c24:	462f      	mov	r7, r5
 80a7c26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a7c28:	441c      	add	r4, r3
 80a7c2a:	7823      	ldrb	r3, [r4, #0]
 80a7c2c:	2b2c      	cmp	r3, #44	; 0x2c
 80a7c2e:	bf08      	it	eq
 80a7c30:	3401      	addeq	r4, #1
 80a7c32:	f894 8000 	ldrb.w	r8, [r4]
 80a7c36:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 80a7c3a:	d17a      	bne.n	80a7d32 <_tzset_unlocked_r+0x276>
 80a7c3c:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 80a7c40:	e9cd 6301 	strd	r6, r3, [sp, #4]
 80a7c44:	ab09      	add	r3, sp, #36	; 0x24
 80a7c46:	9300      	str	r3, [sp, #0]
 80a7c48:	4620      	mov	r0, r4
 80a7c4a:	4633      	mov	r3, r6
 80a7c4c:	4958      	ldr	r1, [pc, #352]	; (80a7db0 <_tzset_unlocked_r+0x2f4>)
 80a7c4e:	9603      	str	r6, [sp, #12]
 80a7c50:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 80a7c54:	f7fb fea6 	bl	80a39a4 <siscanf>
 80a7c58:	2803      	cmp	r0, #3
 80a7c5a:	f47f af49 	bne.w	80a7af0 <_tzset_unlocked_r+0x34>
 80a7c5e:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 80a7c62:	1e4b      	subs	r3, r1, #1
 80a7c64:	2b0b      	cmp	r3, #11
 80a7c66:	f63f af43 	bhi.w	80a7af0 <_tzset_unlocked_r+0x34>
 80a7c6a:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 80a7c6e:	1e53      	subs	r3, r2, #1
 80a7c70:	2b04      	cmp	r3, #4
 80a7c72:	f63f af3d 	bhi.w	80a7af0 <_tzset_unlocked_r+0x34>
 80a7c76:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 80a7c7a:	2b06      	cmp	r3, #6
 80a7c7c:	f63f af38 	bhi.w	80a7af0 <_tzset_unlocked_r+0x34>
 80a7c80:	e9c7 1203 	strd	r1, r2, [r7, #12]
 80a7c84:	f887 8008 	strb.w	r8, [r7, #8]
 80a7c88:	617b      	str	r3, [r7, #20]
 80a7c8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a7c8c:	eb04 0803 	add.w	r8, r4, r3
 80a7c90:	2302      	movs	r3, #2
 80a7c92:	f8ad 301c 	strh.w	r3, [sp, #28]
 80a7c96:	2300      	movs	r3, #0
 80a7c98:	f8ad 301e 	strh.w	r3, [sp, #30]
 80a7c9c:	f8ad 3020 	strh.w	r3, [sp, #32]
 80a7ca0:	930a      	str	r3, [sp, #40]	; 0x28
 80a7ca2:	f898 3000 	ldrb.w	r3, [r8]
 80a7ca6:	2b2f      	cmp	r3, #47	; 0x2f
 80a7ca8:	d109      	bne.n	80a7cbe <_tzset_unlocked_r+0x202>
 80a7caa:	4633      	mov	r3, r6
 80a7cac:	4640      	mov	r0, r8
 80a7cae:	e9cd a602 	strd	sl, r6, [sp, #8]
 80a7cb2:	e9cd b600 	strd	fp, r6, [sp]
 80a7cb6:	493f      	ldr	r1, [pc, #252]	; (80a7db4 <_tzset_unlocked_r+0x2f8>)
 80a7cb8:	aa07      	add	r2, sp, #28
 80a7cba:	f7fb fe73 	bl	80a39a4 <siscanf>
 80a7cbe:	213c      	movs	r1, #60	; 0x3c
 80a7cc0:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80a7cc4:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80a7cc8:	3728      	adds	r7, #40	; 0x28
 80a7cca:	fb01 2203 	mla	r2, r1, r3, r2
 80a7cce:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a7cd2:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80a7cd6:	fb01 2303 	mla	r3, r1, r3, r2
 80a7cda:	f847 3c10 	str.w	r3, [r7, #-16]
 80a7cde:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80a7ce0:	4444      	add	r4, r8
 80a7ce2:	f1b9 0f00 	cmp.w	r9, #0
 80a7ce6:	d021      	beq.n	80a7d2c <_tzset_unlocked_r+0x270>
 80a7ce8:	6868      	ldr	r0, [r5, #4]
 80a7cea:	f7ff fe2d 	bl	80a7948 <__tzcalc_limits>
 80a7cee:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80a7cf0:	4b28      	ldr	r3, [pc, #160]	; (80a7d94 <_tzset_unlocked_r+0x2d8>)
 80a7cf2:	601a      	str	r2, [r3, #0]
 80a7cf4:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80a7cf6:	1a9b      	subs	r3, r3, r2
 80a7cf8:	bf18      	it	ne
 80a7cfa:	2301      	movne	r3, #1
 80a7cfc:	4a27      	ldr	r2, [pc, #156]	; (80a7d9c <_tzset_unlocked_r+0x2e0>)
 80a7cfe:	6013      	str	r3, [r2, #0]
 80a7d00:	e6f6      	b.n	80a7af0 <_tzset_unlocked_r+0x34>
 80a7d02:	2b2b      	cmp	r3, #43	; 0x2b
 80a7d04:	f04f 0701 	mov.w	r7, #1
 80a7d08:	bf08      	it	eq
 80a7d0a:	3401      	addeq	r4, #1
 80a7d0c:	e770      	b.n	80a7bf0 <_tzset_unlocked_r+0x134>
 80a7d0e:	213c      	movs	r1, #60	; 0x3c
 80a7d10:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80a7d14:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80a7d18:	fb01 2203 	mla	r2, r1, r3, r2
 80a7d1c:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a7d20:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80a7d24:	fb01 2303 	mla	r3, r1, r3, r2
 80a7d28:	435f      	muls	r7, r3
 80a7d2a:	e778      	b.n	80a7c1e <_tzset_unlocked_r+0x162>
 80a7d2c:	f04f 0901 	mov.w	r9, #1
 80a7d30:	e77b      	b.n	80a7c2a <_tzset_unlocked_r+0x16e>
 80a7d32:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 80a7d36:	bf0a      	itet	eq
 80a7d38:	4643      	moveq	r3, r8
 80a7d3a:	2344      	movne	r3, #68	; 0x44
 80a7d3c:	3401      	addeq	r4, #1
 80a7d3e:	220a      	movs	r2, #10
 80a7d40:	4620      	mov	r0, r4
 80a7d42:	a90b      	add	r1, sp, #44	; 0x2c
 80a7d44:	9305      	str	r3, [sp, #20]
 80a7d46:	f7ff fdf5 	bl	80a7934 <strtoul>
 80a7d4a:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 80a7d4e:	9b05      	ldr	r3, [sp, #20]
 80a7d50:	45a0      	cmp	r8, r4
 80a7d52:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 80a7d56:	d114      	bne.n	80a7d82 <_tzset_unlocked_r+0x2c6>
 80a7d58:	234d      	movs	r3, #77	; 0x4d
 80a7d5a:	f1b9 0f00 	cmp.w	r9, #0
 80a7d5e:	d107      	bne.n	80a7d70 <_tzset_unlocked_r+0x2b4>
 80a7d60:	2103      	movs	r1, #3
 80a7d62:	722b      	strb	r3, [r5, #8]
 80a7d64:	2302      	movs	r3, #2
 80a7d66:	f8c5 9014 	str.w	r9, [r5, #20]
 80a7d6a:	e9c5 1303 	strd	r1, r3, [r5, #12]
 80a7d6e:	e78f      	b.n	80a7c90 <_tzset_unlocked_r+0x1d4>
 80a7d70:	220b      	movs	r2, #11
 80a7d72:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 80a7d76:	2301      	movs	r3, #1
 80a7d78:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 80a7d7c:	2300      	movs	r3, #0
 80a7d7e:	63eb      	str	r3, [r5, #60]	; 0x3c
 80a7d80:	e786      	b.n	80a7c90 <_tzset_unlocked_r+0x1d4>
 80a7d82:	b280      	uxth	r0, r0
 80a7d84:	723b      	strb	r3, [r7, #8]
 80a7d86:	6178      	str	r0, [r7, #20]
 80a7d88:	e782      	b.n	80a7c90 <_tzset_unlocked_r+0x1d4>
 80a7d8a:	bf00      	nop
 80a7d8c:	080a8cbc 	.word	0x080a8cbc
 80a7d90:	2000064c 	.word	0x2000064c
 80a7d94:	20000654 	.word	0x20000654
 80a7d98:	080a8cbf 	.word	0x080a8cbf
 80a7d9c:	20000650 	.word	0x20000650
 80a7da0:	20000070 	.word	0x20000070
 80a7da4:	2000063f 	.word	0x2000063f
 80a7da8:	080a8cc3 	.word	0x080a8cc3
 80a7dac:	080a8ce6 	.word	0x080a8ce6
 80a7db0:	080a8cd2 	.word	0x080a8cd2
 80a7db4:	080a8ce5 	.word	0x080a8ce5
 80a7db8:	20000634 	.word	0x20000634

080a7dbc <abs>:
 80a7dbc:	2800      	cmp	r0, #0
 80a7dbe:	bfb8      	it	lt
 80a7dc0:	4240      	neglt	r0, r0
 80a7dc2:	4770      	bx	lr

080a7dc4 <_findenv_r>:
 80a7dc4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a7dc8:	4607      	mov	r7, r0
 80a7dca:	4689      	mov	r9, r1
 80a7dcc:	4616      	mov	r6, r2
 80a7dce:	f000 f917 	bl	80a8000 <__env_lock>
 80a7dd2:	4b18      	ldr	r3, [pc, #96]	; (80a7e34 <_findenv_r+0x70>)
 80a7dd4:	681c      	ldr	r4, [r3, #0]
 80a7dd6:	469a      	mov	sl, r3
 80a7dd8:	b134      	cbz	r4, 80a7de8 <_findenv_r+0x24>
 80a7dda:	464b      	mov	r3, r9
 80a7ddc:	4698      	mov	r8, r3
 80a7dde:	f813 1b01 	ldrb.w	r1, [r3], #1
 80a7de2:	b139      	cbz	r1, 80a7df4 <_findenv_r+0x30>
 80a7de4:	293d      	cmp	r1, #61	; 0x3d
 80a7de6:	d1f9      	bne.n	80a7ddc <_findenv_r+0x18>
 80a7de8:	4638      	mov	r0, r7
 80a7dea:	f000 f90f 	bl	80a800c <__env_unlock>
 80a7dee:	2000      	movs	r0, #0
 80a7df0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a7df4:	eba8 0809 	sub.w	r8, r8, r9
 80a7df8:	46a3      	mov	fp, r4
 80a7dfa:	f854 0b04 	ldr.w	r0, [r4], #4
 80a7dfe:	2800      	cmp	r0, #0
 80a7e00:	d0f2      	beq.n	80a7de8 <_findenv_r+0x24>
 80a7e02:	4642      	mov	r2, r8
 80a7e04:	4649      	mov	r1, r9
 80a7e06:	f7ff fc6f 	bl	80a76e8 <strncmp>
 80a7e0a:	2800      	cmp	r0, #0
 80a7e0c:	d1f4      	bne.n	80a7df8 <_findenv_r+0x34>
 80a7e0e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80a7e12:	eb03 0508 	add.w	r5, r3, r8
 80a7e16:	f813 3008 	ldrb.w	r3, [r3, r8]
 80a7e1a:	2b3d      	cmp	r3, #61	; 0x3d
 80a7e1c:	d1ec      	bne.n	80a7df8 <_findenv_r+0x34>
 80a7e1e:	f8da 3000 	ldr.w	r3, [sl]
 80a7e22:	4638      	mov	r0, r7
 80a7e24:	ebab 0303 	sub.w	r3, fp, r3
 80a7e28:	109b      	asrs	r3, r3, #2
 80a7e2a:	6033      	str	r3, [r6, #0]
 80a7e2c:	f000 f8ee 	bl	80a800c <__env_unlock>
 80a7e30:	1c68      	adds	r0, r5, #1
 80a7e32:	e7dd      	b.n	80a7df0 <_findenv_r+0x2c>
 80a7e34:	2000023c 	.word	0x2000023c

080a7e38 <_getenv_r>:
 80a7e38:	b507      	push	{r0, r1, r2, lr}
 80a7e3a:	aa01      	add	r2, sp, #4
 80a7e3c:	f7ff ffc2 	bl	80a7dc4 <_findenv_r>
 80a7e40:	b003      	add	sp, #12
 80a7e42:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a7e48 <__gettzinfo>:
 80a7e48:	4800      	ldr	r0, [pc, #0]	; (80a7e4c <__gettzinfo+0x4>)
 80a7e4a:	4770      	bx	lr
 80a7e4c:	20000078 	.word	0x20000078

080a7e50 <gmtime_r>:
 80a7e50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a7e54:	e9d0 6700 	ldrd	r6, r7, [r0]
 80a7e58:	460c      	mov	r4, r1
 80a7e5a:	2300      	movs	r3, #0
 80a7e5c:	4630      	mov	r0, r6
 80a7e5e:	4639      	mov	r1, r7
 80a7e60:	4a4f      	ldr	r2, [pc, #316]	; (80a7fa0 <gmtime_r+0x150>)
 80a7e62:	f000 f8d9 	bl	80a8018 <__aeabi_ldivmod>
 80a7e66:	4639      	mov	r1, r7
 80a7e68:	4605      	mov	r5, r0
 80a7e6a:	2300      	movs	r3, #0
 80a7e6c:	4630      	mov	r0, r6
 80a7e6e:	4a4c      	ldr	r2, [pc, #304]	; (80a7fa0 <gmtime_r+0x150>)
 80a7e70:	f000 f8d2 	bl	80a8018 <__aeabi_ldivmod>
 80a7e74:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a7e78:	2a00      	cmp	r2, #0
 80a7e7a:	bfbc      	itt	lt
 80a7e7c:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 80a7e80:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 80a7e84:	fbb2 f3f1 	udiv	r3, r2, r1
 80a7e88:	fb01 2213 	mls	r2, r1, r3, r2
 80a7e8c:	f04f 013c 	mov.w	r1, #60	; 0x3c
 80a7e90:	60a3      	str	r3, [r4, #8]
 80a7e92:	fbb2 f3f1 	udiv	r3, r2, r1
 80a7e96:	fb01 2213 	mls	r2, r1, r3, r2
 80a7e9a:	6022      	str	r2, [r4, #0]
 80a7e9c:	f04f 0207 	mov.w	r2, #7
 80a7ea0:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 80a7ea4:	bfac      	ite	ge
 80a7ea6:	f600 206c 	addwge	r0, r0, #2668	; 0xa6c
 80a7eaa:	f600 206b 	addwlt	r0, r0, #2667	; 0xa6b
 80a7eae:	6063      	str	r3, [r4, #4]
 80a7eb0:	1cc3      	adds	r3, r0, #3
 80a7eb2:	fb93 f2f2 	sdiv	r2, r3, r2
 80a7eb6:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a7eba:	1a9b      	subs	r3, r3, r2
 80a7ebc:	bf48      	it	mi
 80a7ebe:	3307      	addmi	r3, #7
 80a7ec0:	2800      	cmp	r0, #0
 80a7ec2:	4938      	ldr	r1, [pc, #224]	; (80a7fa4 <gmtime_r+0x154>)
 80a7ec4:	61a3      	str	r3, [r4, #24]
 80a7ec6:	bfbd      	ittte	lt
 80a7ec8:	f5a0 330e 	sublt.w	r3, r0, #145408	; 0x23800
 80a7ecc:	f5a3 732c 	sublt.w	r3, r3, #688	; 0x2b0
 80a7ed0:	fb93 f1f1 	sdivlt	r1, r3, r1
 80a7ed4:	fb90 f1f1 	sdivge	r1, r0, r1
 80a7ed8:	f648 62ac 	movw	r2, #36524	; 0x8eac
 80a7edc:	f240 5cb4 	movw	ip, #1460	; 0x5b4
 80a7ee0:	4b31      	ldr	r3, [pc, #196]	; (80a7fa8 <gmtime_r+0x158>)
 80a7ee2:	f240 176d 	movw	r7, #365	; 0x16d
 80a7ee6:	fb03 0001 	mla	r0, r3, r1, r0
 80a7eea:	fbb0 f2f2 	udiv	r2, r0, r2
 80a7eee:	fbb0 f3fc 	udiv	r3, r0, ip
 80a7ef2:	4402      	add	r2, r0
 80a7ef4:	1ad2      	subs	r2, r2, r3
 80a7ef6:	4b2d      	ldr	r3, [pc, #180]	; (80a7fac <gmtime_r+0x15c>)
 80a7ef8:	2664      	movs	r6, #100	; 0x64
 80a7efa:	fbb0 f3f3 	udiv	r3, r0, r3
 80a7efe:	1ad3      	subs	r3, r2, r3
 80a7f00:	fbb3 f5f7 	udiv	r5, r3, r7
 80a7f04:	fbb3 f3fc 	udiv	r3, r3, ip
 80a7f08:	fbb5 f2f6 	udiv	r2, r5, r6
 80a7f0c:	1ad3      	subs	r3, r2, r3
 80a7f0e:	4403      	add	r3, r0
 80a7f10:	2099      	movs	r0, #153	; 0x99
 80a7f12:	fb07 3315 	mls	r3, r7, r5, r3
 80a7f16:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 80a7f1a:	f10c 0c02 	add.w	ip, ip, #2
 80a7f1e:	fbbc f7f0 	udiv	r7, ip, r0
 80a7f22:	f04f 0805 	mov.w	r8, #5
 80a7f26:	4378      	muls	r0, r7
 80a7f28:	3002      	adds	r0, #2
 80a7f2a:	fbb0 f0f8 	udiv	r0, r0, r8
 80a7f2e:	f103 0e01 	add.w	lr, r3, #1
 80a7f32:	ebae 0000 	sub.w	r0, lr, r0
 80a7f36:	f240 5ef9 	movw	lr, #1529	; 0x5f9
 80a7f3a:	45f4      	cmp	ip, lr
 80a7f3c:	bf94      	ite	ls
 80a7f3e:	f04f 0c02 	movls.w	ip, #2
 80a7f42:	f06f 0c09 	mvnhi.w	ip, #9
 80a7f46:	4467      	add	r7, ip
 80a7f48:	f44f 7cc8 	mov.w	ip, #400	; 0x190
 80a7f4c:	fb0c 5101 	mla	r1, ip, r1, r5
 80a7f50:	2f01      	cmp	r7, #1
 80a7f52:	bf98      	it	ls
 80a7f54:	3101      	addls	r1, #1
 80a7f56:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 80a7f5a:	d30c      	bcc.n	80a7f76 <gmtime_r+0x126>
 80a7f5c:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 80a7f60:	61e3      	str	r3, [r4, #28]
 80a7f62:	2300      	movs	r3, #0
 80a7f64:	f2a1 716c 	subw	r1, r1, #1900	; 0x76c
 80a7f68:	60e0      	str	r0, [r4, #12]
 80a7f6a:	e9c4 7104 	strd	r7, r1, [r4, #16]
 80a7f6e:	4620      	mov	r0, r4
 80a7f70:	6223      	str	r3, [r4, #32]
 80a7f72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a7f76:	f015 0f03 	tst.w	r5, #3
 80a7f7a:	d102      	bne.n	80a7f82 <gmtime_r+0x132>
 80a7f7c:	fb06 5212 	mls	r2, r6, r2, r5
 80a7f80:	b95a      	cbnz	r2, 80a7f9a <gmtime_r+0x14a>
 80a7f82:	f44f 76c8 	mov.w	r6, #400	; 0x190
 80a7f86:	fbb5 f2f6 	udiv	r2, r5, r6
 80a7f8a:	fb06 5212 	mls	r2, r6, r2, r5
 80a7f8e:	fab2 f282 	clz	r2, r2
 80a7f92:	0952      	lsrs	r2, r2, #5
 80a7f94:	333b      	adds	r3, #59	; 0x3b
 80a7f96:	4413      	add	r3, r2
 80a7f98:	e7e2      	b.n	80a7f60 <gmtime_r+0x110>
 80a7f9a:	2201      	movs	r2, #1
 80a7f9c:	e7fa      	b.n	80a7f94 <gmtime_r+0x144>
 80a7f9e:	bf00      	nop
 80a7fa0:	00015180 	.word	0x00015180
 80a7fa4:	00023ab1 	.word	0x00023ab1
 80a7fa8:	fffdc54f 	.word	0xfffdc54f
 80a7fac:	00023ab0 	.word	0x00023ab0

080a7fb0 <labs>:
 80a7fb0:	2800      	cmp	r0, #0
 80a7fb2:	bfb8      	it	lt
 80a7fb4:	4240      	neglt	r0, r0
 80a7fb6:	4770      	bx	lr

080a7fb8 <__retarget_lock_acquire>:
 80a7fb8:	4770      	bx	lr

080a7fba <__retarget_lock_acquire_recursive>:
 80a7fba:	4770      	bx	lr

080a7fbc <__retarget_lock_release>:
 80a7fbc:	4770      	bx	lr

080a7fbe <__retarget_lock_release_recursive>:
 80a7fbe:	4770      	bx	lr

080a7fc0 <__ascii_mbtowc>:
 80a7fc0:	b082      	sub	sp, #8
 80a7fc2:	b901      	cbnz	r1, 80a7fc6 <__ascii_mbtowc+0x6>
 80a7fc4:	a901      	add	r1, sp, #4
 80a7fc6:	b142      	cbz	r2, 80a7fda <__ascii_mbtowc+0x1a>
 80a7fc8:	b14b      	cbz	r3, 80a7fde <__ascii_mbtowc+0x1e>
 80a7fca:	7813      	ldrb	r3, [r2, #0]
 80a7fcc:	600b      	str	r3, [r1, #0]
 80a7fce:	7812      	ldrb	r2, [r2, #0]
 80a7fd0:	1e10      	subs	r0, r2, #0
 80a7fd2:	bf18      	it	ne
 80a7fd4:	2001      	movne	r0, #1
 80a7fd6:	b002      	add	sp, #8
 80a7fd8:	4770      	bx	lr
 80a7fda:	4610      	mov	r0, r2
 80a7fdc:	e7fb      	b.n	80a7fd6 <__ascii_mbtowc+0x16>
 80a7fde:	f06f 0001 	mvn.w	r0, #1
 80a7fe2:	e7f8      	b.n	80a7fd6 <__ascii_mbtowc+0x16>

080a7fe4 <__ascii_wctomb>:
 80a7fe4:	4603      	mov	r3, r0
 80a7fe6:	4608      	mov	r0, r1
 80a7fe8:	b141      	cbz	r1, 80a7ffc <__ascii_wctomb+0x18>
 80a7fea:	2aff      	cmp	r2, #255	; 0xff
 80a7fec:	d904      	bls.n	80a7ff8 <__ascii_wctomb+0x14>
 80a7fee:	228a      	movs	r2, #138	; 0x8a
 80a7ff0:	f04f 30ff 	mov.w	r0, #4294967295
 80a7ff4:	601a      	str	r2, [r3, #0]
 80a7ff6:	4770      	bx	lr
 80a7ff8:	2001      	movs	r0, #1
 80a7ffa:	700a      	strb	r2, [r1, #0]
 80a7ffc:	4770      	bx	lr
	...

080a8000 <__env_lock>:
 80a8000:	4801      	ldr	r0, [pc, #4]	; (80a8008 <__env_lock+0x8>)
 80a8002:	f7ff bfda 	b.w	80a7fba <__retarget_lock_acquire_recursive>
 80a8006:	bf00      	nop
 80a8008:	20000662 	.word	0x20000662

080a800c <__env_unlock>:
 80a800c:	4801      	ldr	r0, [pc, #4]	; (80a8014 <__env_unlock+0x8>)
 80a800e:	f7ff bfd6 	b.w	80a7fbe <__retarget_lock_release_recursive>
 80a8012:	bf00      	nop
 80a8014:	20000662 	.word	0x20000662

080a8018 <__aeabi_ldivmod>:
 80a8018:	b97b      	cbnz	r3, 80a803a <__aeabi_ldivmod+0x22>
 80a801a:	b972      	cbnz	r2, 80a803a <__aeabi_ldivmod+0x22>
 80a801c:	2900      	cmp	r1, #0
 80a801e:	bfbe      	ittt	lt
 80a8020:	2000      	movlt	r0, #0
 80a8022:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80a8026:	e006      	blt.n	80a8036 <__aeabi_ldivmod+0x1e>
 80a8028:	bf08      	it	eq
 80a802a:	2800      	cmpeq	r0, #0
 80a802c:	bf1c      	itt	ne
 80a802e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80a8032:	f04f 30ff 	movne.w	r0, #4294967295
 80a8036:	f7fe bc71 	b.w	80a691c <__aeabi_idiv0>
 80a803a:	f1ad 0c08 	sub.w	ip, sp, #8
 80a803e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80a8042:	2900      	cmp	r1, #0
 80a8044:	db09      	blt.n	80a805a <__aeabi_ldivmod+0x42>
 80a8046:	2b00      	cmp	r3, #0
 80a8048:	db1a      	blt.n	80a8080 <__aeabi_ldivmod+0x68>
 80a804a:	f7fe fb05 	bl	80a6658 <__udivmoddi4>
 80a804e:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a8052:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a8056:	b004      	add	sp, #16
 80a8058:	4770      	bx	lr
 80a805a:	4240      	negs	r0, r0
 80a805c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a8060:	2b00      	cmp	r3, #0
 80a8062:	db1b      	blt.n	80a809c <__aeabi_ldivmod+0x84>
 80a8064:	f7fe faf8 	bl	80a6658 <__udivmoddi4>
 80a8068:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a806c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a8070:	b004      	add	sp, #16
 80a8072:	4240      	negs	r0, r0
 80a8074:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a8078:	4252      	negs	r2, r2
 80a807a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a807e:	4770      	bx	lr
 80a8080:	4252      	negs	r2, r2
 80a8082:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a8086:	f7fe fae7 	bl	80a6658 <__udivmoddi4>
 80a808a:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a808e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a8092:	b004      	add	sp, #16
 80a8094:	4240      	negs	r0, r0
 80a8096:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a809a:	4770      	bx	lr
 80a809c:	4252      	negs	r2, r2
 80a809e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a80a2:	f7fe fad9 	bl	80a6658 <__udivmoddi4>
 80a80a6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a80aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a80ae:	b004      	add	sp, #16
 80a80b0:	4252      	negs	r2, r2
 80a80b2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a80b6:	4770      	bx	lr

080a80b8 <dynalib_user>:
 80a80b8:	001d 080a 005d 080a 0085 080a 0089 080a     ....]...........
 80a80c8:	0000 0000 616d 4378 7275 6572 746e 0043     ....maxCurrentC.
 80a80d8:	093e 654e 2077 6573 7074 696f 746e 7320     >.New setpoint s
 80a80e8:	7465 6120 2074 2000 6d41 7370 002e 7274     et at . Amps..tr
 80a80f8:	6575 6600 6c61 6573 3300 0032 7041 7270     ue.false.32.Appr
 80a8108:	616f 6863 7920 756f 2072 6163 6472 7420     oach your card t
 80a8118:	206f 6874 2065 6572 6461 7265 2e2e 002e     o the reader....
 80a8128:	0045 6843 7261 6567 2072 5600 6c6f 6174     E.Charger .Volta
 80a8138:	6567 203a 6400 6469 6e20 746f 7220 6365     ge: .did not rec
 80a8148:	6965 6576 6520 6f6e 6775 2068 6f76 746c     eive enough volt
 80a8158:	6761 2065 6164 6174 4300 7275 6572 746e     age data.Current
 80a8168:	203a 6400 6469 6e20 746f 7220 6365 6965     : .did not recei
 80a8178:	6576 6520 6f6e 6775 2068 7563 7272 6e65     ve enough curren
 80a8188:	2074 6164 6174 4600 6572 7571 6e65 7963     t data.Frequency
 80a8198:	203a 6400 6469 6e20 746f 7220 6365 6965     : .did not recei
 80a81a8:	6576 6520 6f6e 6775 2068 7266 7165 6575     ve enough freque
 80a81b8:	636e 2079 6164 6174 5000 776f 7265 203a     ncy data.Power: 
 80a81c8:	6400 6469 6e20 746f 7220 6365 6965 6576     .did not receive
 80a81d8:	6520 6f6e 6775 2068 6f70 6577 2072 6164      enough power da
 80a81e8:	6174 4500 656e 6772 3a79 0020 6964 2064     ta.Energy: .did 
 80a81f8:	6f6e 2074 6572 6563 7669 2065 6e65 756f     not receive enou
 80a8208:	6867 6520 656e 6772 2079 6164 6174 6c00     gh energy data.l
 80a8218:	6f6f 7270 6165 3e64 5309 7265 6169 206c     oopread>.Serial 
 80a8228:	6552 6461 4520 7272 726f 0021 4148 654e     Read Error!.HANe
 80a8238:	7376 2f65 6870 746f 6e6f 614d 4378 3000     vse/photonMaxC.0
 80a8248:	0030 4148 654e 7376 2f65 6870 746f 6e6f     0.HANevse/photon
 80a8258:	6f43 766e 7265 6574 2f64 7300 6375 6563     Converted/.succe
 80a8268:	7373 7566 206c 7473 7261 2074 656e 2077     ssful start new 
 80a8278:	6863 7261 6567 6300 6168 6772 7265 6920     charge.charger i
 80a8288:	2073 7266 6565 202c 7562 2074 6163 6472     s free, but card
 80a8298:	7720 7361 7320 6977 6570 2064 6e69 7420      was swiped in t
 80a82a8:	6568 6c20 7361 2074 3032 7320 6365 6300     he last 20 sec.c
 80a82b8:	6168 6772 7265 6920 2073 636f 7563 6970     harger is occupi
 80a82c8:	6465 6220 2079 6e61 746f 6568 2072 7375     ed by another us
 80a82d8:	7265 4e00 206f 4449 7300 6375 6563 7373     er.No ID.success
 80a82e8:	7566 206c 7473 706f 6320 6168 6772 2065     ful stop charge 
 80a82f8:	6573 7373 6f69 006e 6f63 736e 6365 7475     session.consecut
 80a8308:	7669 2065 4652 4449 7320 6977 6570 7720     ive RFID swipe w
 80a8318:	7469 6968 206e 3032 2073 666f 6e20 7765     ithin 20s of new
 80a8328:	6320 6168 6772 2065 7473 7261 0074 6f79      charge start.yo
 80a8338:	2075 7261 2065 6c61 6572 6461 2079 6863     u are already ch
 80a8348:	7261 6967 676e 6120 2074 6e61 746f 6568     arging at anothe
 80a8358:	2072 6863 7261 6567 0072 6f79 2075 7261     r charger.you ar
 80a8368:	2065 6e69 7420 6568 7520 6573 6c72 7369     e in the userlis
 80a8378:	2c74 6220 7475 6e20 746f 7620 7265 6669     t, but not verif
 80a8388:	6569 2064 7962 6120 6d64 6e69 7300 6375     ied by admin.suc
 80a8398:	6563 7373 7566 206c 4652 4449 7220 6165     cessful RFID rea
 80a83a8:	2c64 6220 7475 7920 756f 6120 6572 6e20     d, but you are n
 80a83b8:	746f 6920 206e 6874 2065 7375 7265 696c     ot in the userli
 80a83c8:	7473 4500 5252 524f 203a 6e75 6e6b 776f     st.ERROR: unknow
 80a83d8:	206e 6373 6e65 7261 6f69 4d00 5451 3e54     n scenario.MQTT>
 80a83e8:	4309 6e6f 656e 7463 6e69 2067 6f74 4d20     .Connecting to M
 80a83f8:	5451 2054 7262 6b6f 7265 2e2e 002e 5645     QTT broker....EV
 80a8408:	502d 6f68 6f74 316e 4d00 5451 3e54 4309     -Photon1.MQTT>.C
 80a8418:	6e6f 656e 7463 6465 4800 4e41 7665 6573     onnected.HANevse
 80a8428:	652f 656e 6772 4d79 7465 7265 4800 4e41     /energyMeter.HAN
 80a8438:	7665 6573 612f 6c6c 776f 7355 7265 4800     evse/allowUser.H
 80a8448:	4e41 7665 6573 722f 7365 7465 6c4f 6d69     ANevse/resetOlim
 80a8458:	7865 4800 4e41 7665 6573 722f 7365 7465     ex.HANevse/reset
 80a8468:	6850 746f 6e6f 4800 4e41 7665 6573 732f     Photon.HANevse/s
 80a8478:	6977 6374 5468 7365 3174 4800 4e41 7665     witchTest1.HANev
 80a8488:	6573 6d2f 7861 3143 4800 4e41 7665 6573     se/maxC1.HANevse
 80a8498:	6d2f 7861 3243 4d00 5451 3e54 4309 6e6f     /maxC2.MQTT>.Con
 80a84a8:	656e 7463 6f69 206e 6166 6c69 6465 4d00     nection failed.M
 80a84b8:	5451 3e54 5209 7465 7972 6e69 2e67 2e2e     QTT>.Retrying...
 80a84c8:	5600 0031 3256 5600 0033 3149 4900 0032     .V1.V2.V3.I1.I2.
 80a84d8:	3349 4600 5500 6573 4972 0044 6f53 6b63     I3.F.UserID.Sock
 80a84e8:	7465 4449 2500 756c 4800 4e41 7665 6573     etID.%lu.HANevse
 80a84f8:	702f 6f68 6f74 4d6e 6165 7573 6572 2500     /photonMeasure.%
 80a8508:	646c 2000 0030 6572 6461 6143 6472 093e     ld. 0.readCard>.
 80a8518:	4955 2044 6174 2067 6e6f 6320 6168 6772     UID tag on charg
 80a8528:	7265 3a31 5500 6573 4972 0064 6843 7261     er1:.UserId.Char
 80a8538:	6567 0072 7453 7261 5474 6d69 0065 4148     ger.StartTime.HA
 80a8548:	654e 7376 2f65 7075 6164 6574 7355 7265     Nevse/updateUser
 80a8558:	7200 6165 4364 7261 3e64 5509 4449 7420     .readCard>.UID t
 80a8568:	6761 6f20 206e 6863 7261 6567 3272 003a     ag on charger2:.
 80a8578:	6954 656d 756f 2074 6863 7261 6567 0072     Timeout charger.
 80a8588:	7773 7469 6863 6554 7473 6d00 7861 7543     switchTest.maxCu
 80a8598:	7272 6e65 4374 0031 616d 4378 7275 6572     rrentC1.maxCurre
 80a85a8:	746e 3243 7000 6f72 4d67 646f 4f65 6d6c     ntC2.progModeOlm
 80a85b8:	0078 6572 6573 5074 7261 6974 6c63 5700     x.resetParticl.W
 80a85c8:	6669 5369 6769 616e 006c 6e69 7469 4652     ifiSignal.initRF
 80a85d8:	4449 6300 7275 6572 746e 7453 0072 6853     ID.currentStr.Sh
 80a85e8:	7261 5665 7261 5400 706f 6369 6200 6f72     areVar.Topic.bro
 80a85f8:	656b 2e72 6968 6576 716d 632e 6d6f 7300     ker.hivemq.com.s
 80a8608:	7465 6f50 6e69 0074 3939 4d00 5451 3e54     etPoint.99.MQTT>
 80a8618:	4309 6c61 626c 6361 206b 7566 636e 6974     .Callback functi
 80a8628:	6e6f 6920 2073 6163 6c6c 6465 6120 3a74     on is called at:
 80a8638:	0020 0000                                    ...

080a863c <_ZTV16JsonWriterStaticILj512EE>:
	...
 80a8644:	02a1 080a 02b5 080a 0400 514d 5454 0004     ..........MQTT..
 80a8654:	4d06 4951 6473 0370 3025 7834 5c00 2575     .MQIsdp.%04x.\u%
 80a8664:	3430 0058 2e25 662a 2500 0066               04X.%.*f.%f.

080a8670 <_ZTV10JsonBuffer>:
	...
 80a8678:	29ad 080a 29c9 080a                         .)...)..

080a8680 <_ZTV10JsonParser>:
	...
 80a8688:	2a05 080a 2a29 080a                         .*..)*..

080a8690 <_ZTV10JsonWriter>:
	...
 80a8698:	29dd 080a 29f1 080a 6977 6972 676e 5400     .)...)..wiring.T
 80a86a8:	5043 6c43 6569 746e 7320 636f 656b 3d74     CPClient socket=
 80a86b8:	7825 0000                                   %x..

080a86bc <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80a86c4:	3bbf 080a 3be5 080a 4007 080a 3bf3 080a     .;...;...@...;..
 80a86d4:	3bc1 080a                                   .;..

080a86d8 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...

080a86e0 <_ZTV9TCPClient>:
	...
 80a86e8:	3bf9 080a 3c2d 080a 3b7b 080a 3b95 080a     .;..-<..{;...;..
 80a86f8:	3e09 080a 3c8f 080a 3c61 080a 3bbd 080a     .>...<..a<...;..
 80a8708:	3d29 080a 400d 080a 3cc3 080a 3e7d 080a     )=...@...<..}>..
 80a8718:	3f2b 080a 3ee3 080a 3ba5 080a 3ef1 080a     +?...>...;...>..
 80a8728:	3c41 080a 616e 006e 6e69 0066 766f 0066     A<..nan.inf.ovf.
 80a8738:	7061 0070 2b25 3330 3a64 3025 7532 2500     app.%+03d:%02u.%
 80a8748:	2d59 6d25 252d 5464 4825 253a 3a4d 5325     Y-%m-%dT%H:%M:%S
 80a8758:	7a25 6100 6373 6974 656d 0000               %z.asctime..

080a8764 <_ZTV9IPAddress>:
	...
 80a876c:	4b8b 080a 4b7b 080a 4b7d 080a               .K..{K..}K..

080a8778 <_ZTV9USBSerial>:
	...
 80a8780:	4c6d 080a 4cd3 080a 4cab 080a 4459 080a     mL...L...L..YD..
 80a8790:	4c9d 080a 4c6f 080a 4c7f 080a 4ccd 080a     .L..oL...L...L..
 80a87a0:	4c8f 080a 4c69 080a                         .L..iL..

080a87a8 <_ZTV11USARTSerial>:
	...
 80a87b0:	4dd1 080a 4e39 080a 4e15 080a 4459 080a     .M..9N...N..YD..
 80a87c0:	4de5 080a 4e01 080a 4df3 080a 4e0f 080a     .M...N...M...N..
 80a87d0:	4dd3 080a 4dd7 080a                         .M...M..

080a87d8 <_ZTV7TwoWire>:
	...
 80a87e0:	4f09 080a 4f53 080a 4f2b 080a 4f0b 080a     .O..SO..+O...O..
 80a87f0:	4f33 080a 4f3b 080a 4f43 080a 4f4b 080a     3O..;O..CO..KO..

080a8800 <_ZTVN5spark9WiFiClassE>:
	...
 80a8808:	502f 080a 5025 080a 501b 080a 4f8b 080a     /P..%P...P...O..
 80a8818:	46ef 080a 500f 080a 5003 080a 4ffb 080a     .F...P...P...O..
 80a8828:	4ff1 080a 4fe7 080a 4fa3 080a               .O...O...O..

080a8834 <_ZTV10WiFiSignal>:
	...
 80a883c:	4f85 080a 4f95 080a 4f87 080a 5039 080a     .O...O...O..9P..
 80a884c:	5069 080a 508d 080a 50bd 080a               iP...P...P..

080a8858 <_ZTVN5spark12NetworkClassE>:
	...
 80a8860:	519d 080a 51a7 080a 51b1 080a 51bb 080a     .Q...Q...Q...Q..
 80a8870:	51c5 080a 51d1 080a 51dd 080a 51e9 080a     .Q...Q...Q...Q..
 80a8880:	51f1 080a 51fb 080a 5205 080a               .Q...Q...R..

080a888c <_ZSt7nothrow>:
	...

080a888d <_ZTSSt19_Sp_make_shared_tag>:
 80a888d:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
 80a889d:	6572 5f64 6174 0067 0000                     red_tag....

080a88a8 <_ZTISt19_Sp_make_shared_tag>:
 80a88a8:	88e8 080a 888d 080a                         ........

080a88b0 <_ZTIN10__cxxabiv117__class_type_infoE>:
 80a88b0:	8948 080a 88bc 080a 896c 080a               H.......l...

080a88bc <_ZTSN10__cxxabiv117__class_type_infoE>:
 80a88bc:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
 80a88cc:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
 80a88dc:	0045 0000                                   E...

080a88e0 <_ZTVN10__cxxabiv117__class_type_infoE>:
 80a88e0:	0000 0000 88b0 080a 5499 080a 54ad 080a     .........T...T..
 80a88f0:	5645 080a 5645 080a 5517 080a 5459 080a     EV..EV...U..YT..
 80a8900:	54ff 080a 54c1 080a 548d 080a               .T...T...T..

080a890c <_ZTIN10__cxxabiv120__si_class_type_infoE>:
 80a890c:	8948 080a 8918 080a 88b0 080a               H...........

080a8918 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
 80a8918:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
 80a8928:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
 80a8938:	666e 456f 0000 0000                         nfoE....

080a8940 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
 80a8940:	0000 0000 890c 080a 5541 080a 5555 080a     ........AU..UU..
 80a8950:	5645 080a 5645 080a 5517 080a 5459 080a     EV..EV...U..YT..
 80a8960:	5619 080a 55a5 080a 5569 080a               .V...U..iU..

080a896c <_ZTISt9type_info>:
 80a896c:	88e8 080a 8974 080a                         ....t...

080a8974 <_ZTSSt9type_info>:
 80a8974:	7453 7439 7079 5f65 6e69 6f66 2500 332e     St9type_info.%.3
 80a8984:	2073 2e25 7333 3325 2064 2e25 6432 253a     s %.3s%3d %.2d:%
 80a8994:	322e 3a64 2e25 6432 2520 0a64                .2d:%.2d %d..

080a89a1 <day_name.4782>:
 80a89a1:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
 80a89b1:	6972 6153                                    riSat

080a89b6 <mon_name.4783>:
 80a89b6:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
 80a89c6:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
 80a89d6:	4476 6365 0000                              vDec..

080a89dc <__month_lengths>:
 80a89dc:	001f 0000 001c 0000 001f 0000 001e 0000     ................
 80a89ec:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 80a89fc:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 80a8a0c:	001f 0000 001d 0000 001f 0000 001e 0000     ................
 80a8a1c:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 80a8a2c:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 80a8a3c:	7325 2e25 642a 2500 2573 2e30 642a 2b00     %s%.*d.%s%0.*d.+
 80a8a4c:	2d00 2500 6432 2500 322e 2f64 2e25 6432     .-.%2d.%.2d/%.2d
 80a8a5c:	252f 322e 0064 2d59 6d25 252d 0064 2a2e     /%.2d.Y-%m-%d..*
 80a8a6c:	0075 2e25 6433 2500 6c6c 0064 2e25 6432     u.%.3d.%lld.%.2d
 80a8a7c:	253a 322e 3a64 2e25 6432 2500 302b 6c33     :%.2d:%.2d.%+03l
 80a8a8c:	2564 322e 646c 4a00 6e61 4600 6265 4d00     d%.2ld.Jan.Feb.M
 80a8a9c:	7261 4100 7270 4d00 7961 4a00 6e75 4a00     ar.Apr.May.Jun.J
 80a8aac:	6c75 4100 6775 5300 7065 4f00 7463 4e00     ul.Aug.Sep.Oct.N
 80a8abc:	766f 4400 6365 4a00 6e61 6175 7972 4600     ov.Dec.January.F
 80a8acc:	6265 7572 7261 0079 614d 6372 0068 7041     ebruary.March.Ap
 80a8adc:	6972 006c 754a 656e 4a00 6c75 0079 7541     ril.June.July.Au
 80a8aec:	7567 7473 5300 7065 6574 626d 7265 4f00     gust.September.O
 80a8afc:	7463 626f 7265 4e00 766f 6d65 6562 0072     ctober.November.
 80a8b0c:	6544 6563 626d 7265 5300 6e75 4d00 6e6f     December.Sun.Mon
 80a8b1c:	5400 6575 5700 6465 5400 7568 4600 6972     .Tue.Wed.Thu.Fri
 80a8b2c:	5300 7461 5300 6e75 6164 0079 6f4d 646e     .Sat.Sunday.Mond
 80a8b3c:	7961 5400 6575 6473 7961 5700 6465 656e     ay.Tuesday.Wedne
 80a8b4c:	6473 7961 5400 7568 7372 6164 0079 7246     sday.Thursday.Fr
 80a8b5c:	6469 7961 5300 7461 7275 6164 0079 4825     iday.Saturday.%H
 80a8b6c:	253a 3a4d 5325 2500 2f6d 6425 252f 0079     :%M:%S.%m/%d/%y.
 80a8b7c:	6125 2520 2062 6525 2520 3a48 4d25 253a     %a %b %e %H:%M:%
 80a8b8c:	2053 5925 4100 004d 4d50 2500 2061 6225     S %Y.AM.PM.%a %b
 80a8b9c:	2520 2065 4825 253a 3a4d 5325 2520 205a      %e %H:%M:%S %Z 
 80a8bac:	5925 6d00 0064 4925 253a 3a4d 5325 2520     %Y.md.%I:%M:%S %
 80a8bbc:	0070 0000                                   p...

080a8bc0 <_C_time_locale>:
 80a8bc0:	8a93 080a 8a97 080a 8a9b 080a 8a9f 080a     ................
 80a8bd0:	8aa3 080a 8aa7 080a 8aab 080a 8aaf 080a     ................
 80a8be0:	8ab3 080a 8ab7 080a 8abb 080a 8abf 080a     ................
 80a8bf0:	8ac3 080a 8acb 080a 8ad4 080a 8ada 080a     ................
 80a8c00:	8aa3 080a 8ae0 080a 8ae5 080a 8aea 080a     ................
 80a8c10:	8af1 080a 8afb 080a 8b03 080a 8b0c 080a     ................
 80a8c20:	8b15 080a 8b19 080a 8b1d 080a 8b21 080a     ............!...
 80a8c30:	8b25 080a 8b29 080a 8b2d 080a 8b31 080a     %...)...-...1...
 80a8c40:	8b38 080a 8b3f 080a 8b47 080a 8b51 080a     8...?...G...Q...
 80a8c50:	8b5a 080a 8b61 080a 8b6a 080a 8b73 080a     Z...a...j...s...
 80a8c60:	8b7c 080a 8b91 080a 8b94 080a 8b97 080a     |...............
 80a8c70:	8ac3 080a 8acb 080a 8ad4 080a 8ada 080a     ................
 80a8c80:	8aa3 080a 8ae0 080a 8ae5 080a 8aea 080a     ................
 80a8c90:	8af1 080a 8afb 080a 8b03 080a 8b0c 080a     ................
 80a8ca0:	8baf 080a 8bb2 080a 89a0 080a 89a0 080a     ................
 80a8cb0:	89a0 080a 89a0 080a 89a0 080a 5a54 4700     ............TZ.G
 80a8cc0:	544d 2500 3031 5e5b 2d30 2c39 2d2b 255d     MT.%10[^0-9,+-]%
 80a8cd0:	006e 254d 7568 6e25 252e 7568 6e25 252e     n.M%hu%n.%hu%n.%
 80a8ce0:	7568 6e25 2f00 6825 2575 3a6e 6825 2575     hu%n./%hu%n:%hu%
 80a8cf0:	3a6e 6825 2575 006e                         n:%hu%n.

080a8cf8 <_ctype_>:
 80a8cf8:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 80a8d08:	2020 2020 2020 2020 2020 2020 2020 2020                     
 80a8d18:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 80a8d28:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 80a8d38:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 80a8d48:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 80a8d58:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 80a8d68:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 80a8d78:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
 80a8df8:	5000 534f 5849                               .POSIX.

080a8dff <link_const_variable_data_end>:
	...

080a8e00 <link_constructors_location>:
 80a8e00:	080a1611 	.word	0x080a1611
 80a8e04:	080a3a95 	.word	0x080a3a95
 80a8e08:	080a46fd 	.word	0x080a46fd
 80a8e0c:	080a498d 	.word	0x080a498d
 80a8e10:	080a49c5 	.word	0x080a49c5
 80a8e14:	080a5189 	.word	0x080a5189
 80a8e18:	080a526d 	.word	0x080a526d
 80a8e1c:	080a5389 	.word	0x080a5389
