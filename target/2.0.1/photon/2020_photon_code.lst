
d:/UNI_S5/new_particle_code/2020_photon_code/target/2.0.1/photon/2020_photon_code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00008df4  080a001c  080a001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  080a8e10  080a8e10  00018e10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  40024000  080a8e18  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000240  20000000  080a8e1c  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000448  20000240  20000240  00040240  2**3
                  ALLOC
  7 .module_info_suffix 00000028  080a905c  080a905c  0003905c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  080a9084  080a9084  00039084  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   00163264  00000000  00000000  00039088  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000189a0  00000000  00000000  0019c2ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00029706  00000000  00000000  001b4c8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00002a48  00000000  00000000  001de392  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00006d48  00000000  00000000  001e0dda  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0002bac2  00000000  00000000  001e7b22  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0003a5b9  00000000  00000000  002135e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000ba8f7  00000000  00000000  0024db9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00007e80  00000000  00000000  00308494  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <link_dynalib_end+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <link_dynalib_end+0x2c>)
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <link_dynalib_end+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f006 fd9b 	bl	80a6b68 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <link_dynalib_end+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <link_dynalib_end+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f006 fda3 	bl	80a6b84 <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <link_dynalib_end+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000000 	.word	0x20000000
 80a0048:	080a8e1c 	.word	0x080a8e1c
 80a004c:	20000240 	.word	0x20000240
 80a0050:	20000240 	.word	0x20000240
 80a0054:	20000685 	.word	0x20000685
 80a0058:	20000685 	.word	0x20000685

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f004 fd29 	bl	80a4ab4 <module_user_init_hook>

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0062:	2500      	movs	r5, #0
 80a0064:	4e05      	ldr	r6, [pc, #20]	; (80a007c <module_user_init+0x20>)
 80a0066:	4c06      	ldr	r4, [pc, #24]	; (80a0080 <module_user_init+0x24>)
 80a0068:	1ba4      	subs	r4, r4, r6
 80a006a:	08a4      	lsrs	r4, r4, #2
 80a006c:	42a5      	cmp	r5, r4
 80a006e:	d100      	bne.n	80a0072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 80a0072:	f856 3b04 	ldr.w	r3, [r6], #4
 80a0076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f7      	b.n	80a006c <module_user_init+0x10>
 80a007c:	080a8dec 	.word	0x080a8dec
 80a0080:	080a8e0c 	.word	0x080a8e0c

080a0084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0084:	f001 b9ea 	b.w	80a145c <setup>

080a0088 <module_user_loop>:
}

void module_user_loop() {
 80a0088:	b508      	push	{r3, lr}
    loop();
 80a008a:	f001 f889 	bl	80a11a0 <loop>
    _post_loop();
}
 80a008e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 80a0092:	f004 bcd1 	b.w	80a4a38 <_post_loop>

080a0096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 80a0096:	f003 bc53 	b.w	80a3940 <malloc>

080a009a <_Znaj>:
 80a009a:	f003 bc51 	b.w	80a3940 <malloc>

080a009e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
 80a009e:	f003 bc57 	b.w	80a3950 <free>

080a00a2 <_ZdaPv>:
 80a00a2:	f003 bc55 	b.w	80a3950 <free>

080a00a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a6:	7800      	ldrb	r0, [r0, #0]
 80a00a8:	fab0 f080 	clz	r0, r0
 80a00ac:	0940      	lsrs	r0, r0, #5
 80a00ae:	4770      	bx	lr

080a00b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00b0:	2301      	movs	r3, #1
 80a00b2:	7003      	strb	r3, [r0, #0]
 80a00b4:	4770      	bx	lr

080a00b6 <_ZN10CloudClass22update_string_variableEPKc18Spark_Data_TypeDefPKvPv>:

    static const void* update_string_variable(const char* name, Spark_Data_TypeDef type, const void* var, void* reserved)
    {
        const String* s = (const String*)var;
        return s->c_str();
    }
 80a00b6:	6810      	ldr	r0, [r2, #0]
 80a00b8:	4770      	bx	lr

080a00ba <_Z11resetOlimex6String>:
      out.concat(in[index++]);
      }
}

//! Sends reset signal to EV charger controller
int resetOlimex(String input) {
 80a00ba:	b508      	push	{r3, lr}
    digitalWrite(RESET_OLIMEX, LOW);
 80a00bc:	2100      	movs	r1, #0
 80a00be:	2004      	movs	r0, #4
 80a00c0:	f005 f92b 	bl	80a531a <digitalWrite>
    delay(500);
 80a00c4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a00c8:	f004 fc60 	bl	80a498c <delay>
    digitalWrite(RESET_OLIMEX, HIGH);
 80a00cc:	2101      	movs	r1, #1
 80a00ce:	2004      	movs	r0, #4
 80a00d0:	f005 f923 	bl	80a531a <digitalWrite>
    return 1;
}
 80a00d4:	2001      	movs	r0, #1
 80a00d6:	bd08      	pop	{r3, pc}

080a00d8 <_Z12progModeOlmx6String>:
int resetParticle(String input) {
    System.reset();
}

//! Sets Olimex into programming mode
int progModeOlmx(String input) {
 80a00d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    digitalWrite(WAKEUP_OLIMEX, HIGH);
 80a00da:	2101      	movs	r1, #1
 80a00dc:	2002      	movs	r0, #2
 80a00de:	f005 f91c 	bl	80a531a <digitalWrite>
    delay(500);
 80a00e2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a00e6:	f004 fc51 	bl	80a498c <delay>
    resetOlimex("");
 80a00ea:	490b      	ldr	r1, [pc, #44]	; (80a0118 <_Z12progModeOlmx6String+0x40>)
 80a00ec:	4668      	mov	r0, sp
 80a00ee:	f004 f85d 	bl	80a41ac <_ZN6StringC1EPKc>
 80a00f2:	4668      	mov	r0, sp
 80a00f4:	f7ff ffe1 	bl	80a00ba <_Z11resetOlimex6String>
 80a00f8:	4668      	mov	r0, sp
 80a00fa:	f004 f80d 	bl	80a4118 <_ZN6StringD1Ev>
    delay(500);
 80a00fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a0102:	f004 fc43 	bl	80a498c <delay>
    digitalWrite(WAKEUP_OLIMEX, LOW);
 80a0106:	2100      	movs	r1, #0
 80a0108:	2002      	movs	r0, #2
 80a010a:	f005 f906 	bl	80a531a <digitalWrite>
    return 1;
}
 80a010e:	2001      	movs	r0, #1
 80a0110:	b005      	add	sp, #20
 80a0112:	f85d fb04 	ldr.w	pc, [sp], #4
 80a0116:	bf00      	nop
 80a0118:	080a898c 	.word	0x080a898c

080a011c <_Z10WifiSignal6String>:
int WifiSignal(String input) {
 80a011c:	b500      	push	{lr}
 80a011e:	b08b      	sub	sp, #44	; 0x2c
    return WiFi.RSSI();
 80a0120:	4904      	ldr	r1, [pc, #16]	; (80a0134 <_Z10WifiSignal6String+0x18>)
 80a0122:	a801      	add	r0, sp, #4
 80a0124:	f004 fff4 	bl	80a5110 <_ZN5spark9WiFiClass4RSSIEv>
 80a0128:	a801      	add	r0, sp, #4
 80a012a:	f004 ffcf 	bl	80a50cc <_ZNK10WiFiSignalcvaEv>
}
 80a012e:	b00b      	add	sp, #44	; 0x2c
 80a0130:	f85d fb04 	ldr.w	pc, [sp], #4
 80a0134:	20000610 	.word	0x20000610

080a0138 <_Z13resetParticle6String>:
int resetParticle(String input) {
 80a0138:	b508      	push	{r3, lr}
    System.reset();
 80a013a:	f003 fc9e 	bl	80a3a7a <_ZN11SystemClass5resetEv>
	...

080a0140 <_Z12maxCurrentC16String>:
        return 0;
    }
}

//! Sets max Current output at socket 1 in manual mode
int maxCurrentC1(String setPointStr) {
 80a0140:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a0142:	b08f      	sub	sp, #60	; 0x3c
    unsigned int setPoint = setPointStr.toInt();
 80a0144:	f004 f979 	bl	80a443a <_ZNK6String5toIntEv>
    if (setPoint < 7)
        setPoint = 6;
    byte olimexMessage[4] = {0xFE,1,setPoint,0xFF};
 80a0148:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
 80a014c:	f8ad 3004 	strh.w	r3, [sp, #4]
 80a0150:	23ff      	movs	r3, #255	; 0xff
 80a0152:	2806      	cmp	r0, #6
 80a0154:	bf38      	it	cc
 80a0156:	2006      	movcc	r0, #6
 80a0158:	f88d 3007 	strb.w	r3, [sp, #7]
    if (!TESTCASE) {
 80a015c:	4b20      	ldr	r3, [pc, #128]	; (80a01e0 <_Z12maxCurrentC16String+0xa0>)
 80a015e:	4605      	mov	r5, r0
 80a0160:	781c      	ldrb	r4, [r3, #0]
    byte olimexMessage[4] = {0xFE,1,setPoint,0xFF};
 80a0162:	f88d 0006 	strb.w	r0, [sp, #6]
    if (!TESTCASE) {
 80a0166:	2c00      	cmp	r4, #0
 80a0168:	d137      	bne.n	80a01da <_Z12maxCurrentC16String+0x9a>
        Serial1.write(olimexMessage,4);
 80a016a:	f004 fe81 	bl	80a4e70 <_Z22__fetch_global_Serial1v>
 80a016e:	2204      	movs	r2, #4
 80a0170:	6803      	ldr	r3, [r0, #0]
 80a0172:	eb0d 0102 	add.w	r1, sp, r2
 80a0176:	68db      	ldr	r3, [r3, #12]
 80a0178:	4798      	blx	r3
        DEBUGPORT.println("maxCurrentC"+String(CHARGEROFFSET+1)+">\tNew setpoint set at "+String(setPoint)+" Amps.");
 80a017a:	f004 fdc7 	bl	80a4d0c <_Z16_fetch_usbserialv>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a017e:	4919      	ldr	r1, [pc, #100]	; (80a01e4 <_Z12maxCurrentC16String+0xa4>)
 80a0180:	4606      	mov	r6, r0
 80a0182:	a806      	add	r0, sp, #24
 80a0184:	f004 f812 	bl	80a41ac <_ZN6StringC1EPKc>
 80a0188:	220a      	movs	r2, #10
 80a018a:	2101      	movs	r1, #1
 80a018c:	a802      	add	r0, sp, #8
 80a018e:	f004 f882 	bl	80a4296 <_ZN6StringC1Eih>
 80a0192:	a902      	add	r1, sp, #8
 80a0194:	a806      	add	r0, sp, #24
 80a0196:	f004 f8f4 	bl	80a4382 <_ZplRK15StringSumHelperRK6String>
 80a019a:	4913      	ldr	r1, [pc, #76]	; (80a01e8 <_Z12maxCurrentC16String+0xa8>)
 80a019c:	f004 f8fd 	bl	80a439a <_ZplRK15StringSumHelperPKc>
 80a01a0:	4607      	mov	r7, r0
 80a01a2:	220a      	movs	r2, #10
 80a01a4:	4629      	mov	r1, r5
 80a01a6:	a80a      	add	r0, sp, #40	; 0x28
 80a01a8:	f004 f888 	bl	80a42bc <_ZN6StringC1Ejh>
 80a01ac:	a90a      	add	r1, sp, #40	; 0x28
 80a01ae:	4638      	mov	r0, r7
 80a01b0:	f004 f8e7 	bl	80a4382 <_ZplRK15StringSumHelperRK6String>
 80a01b4:	490d      	ldr	r1, [pc, #52]	; (80a01ec <_Z12maxCurrentC16String+0xac>)
 80a01b6:	f004 f8f0 	bl	80a439a <_ZplRK15StringSumHelperPKc>
 80a01ba:	6801      	ldr	r1, [r0, #0]
 80a01bc:	4630      	mov	r0, r6
 80a01be:	f004 f97a 	bl	80a44b6 <_ZN5Print7printlnEPKc>
 80a01c2:	a80a      	add	r0, sp, #40	; 0x28
 80a01c4:	f003 ffa8 	bl	80a4118 <_ZN6StringD1Ev>
 80a01c8:	a802      	add	r0, sp, #8
 80a01ca:	f003 ffa5 	bl	80a4118 <_ZN6StringD1Ev>
class StringSumHelper : public String
 80a01ce:	a806      	add	r0, sp, #24
 80a01d0:	f003 ffa2 	bl	80a4118 <_ZN6StringD1Ev>
        return 0;
 80a01d4:	4620      	mov	r0, r4
    }
    return 1;
}
 80a01d6:	b00f      	add	sp, #60	; 0x3c
 80a01d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return 1;
 80a01da:	2001      	movs	r0, #1
 80a01dc:	e7fb      	b.n	80a01d6 <_Z12maxCurrentC16String+0x96>
 80a01de:	bf00      	nop
 80a01e0:	20000330 	.word	0x20000330
 80a01e4:	080a80b8 	.word	0x080a80b8
 80a01e8:	080a80c4 	.word	0x080a80c4
 80a01ec:	080a80db 	.word	0x080a80db

080a01f0 <_Z12maxCurrentC26String>:

//! Sets max Current output at socket 2 in manual mode
int maxCurrentC2(String setPointStr) {
 80a01f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a01f2:	b08f      	sub	sp, #60	; 0x3c
    unsigned int setPoint = setPointStr.toInt();
 80a01f4:	f004 f921 	bl	80a443a <_ZNK6String5toIntEv>
    if (setPoint < 7)
        setPoint = 6;
    byte olimexMessage[4] = {0xFE, 2, setPoint, 0xFF};
 80a01f8:	f240 23fe 	movw	r3, #766	; 0x2fe
 80a01fc:	f8ad 3004 	strh.w	r3, [sp, #4]
 80a0200:	23ff      	movs	r3, #255	; 0xff
 80a0202:	2806      	cmp	r0, #6
 80a0204:	bf38      	it	cc
 80a0206:	2006      	movcc	r0, #6
 80a0208:	f88d 3007 	strb.w	r3, [sp, #7]
    if (!TESTCASE) {
 80a020c:	4b20      	ldr	r3, [pc, #128]	; (80a0290 <_Z12maxCurrentC26String+0xa0>)
 80a020e:	4605      	mov	r5, r0
 80a0210:	781c      	ldrb	r4, [r3, #0]
    byte olimexMessage[4] = {0xFE, 2, setPoint, 0xFF};
 80a0212:	f88d 0006 	strb.w	r0, [sp, #6]
    if (!TESTCASE) {
 80a0216:	2c00      	cmp	r4, #0
 80a0218:	d137      	bne.n	80a028a <_Z12maxCurrentC26String+0x9a>
        Serial1.write(olimexMessage,4);
 80a021a:	f004 fe29 	bl	80a4e70 <_Z22__fetch_global_Serial1v>
 80a021e:	2204      	movs	r2, #4
 80a0220:	6803      	ldr	r3, [r0, #0]
 80a0222:	eb0d 0102 	add.w	r1, sp, r2
 80a0226:	68db      	ldr	r3, [r3, #12]
 80a0228:	4798      	blx	r3
        DEBUGPORT.println("maxCurrentC"+String(CHARGEROFFSET+2)+">\tNew setpoint set at "+String(setPoint)+" Amps.");
 80a022a:	f004 fd6f 	bl	80a4d0c <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
 80a022e:	4919      	ldr	r1, [pc, #100]	; (80a0294 <_Z12maxCurrentC26String+0xa4>)
 80a0230:	4606      	mov	r6, r0
 80a0232:	a806      	add	r0, sp, #24
 80a0234:	f003 ffba 	bl	80a41ac <_ZN6StringC1EPKc>
 80a0238:	220a      	movs	r2, #10
 80a023a:	2102      	movs	r1, #2
 80a023c:	a802      	add	r0, sp, #8
 80a023e:	f004 f82a 	bl	80a4296 <_ZN6StringC1Eih>
 80a0242:	a902      	add	r1, sp, #8
 80a0244:	a806      	add	r0, sp, #24
 80a0246:	f004 f89c 	bl	80a4382 <_ZplRK15StringSumHelperRK6String>
 80a024a:	4913      	ldr	r1, [pc, #76]	; (80a0298 <_Z12maxCurrentC26String+0xa8>)
 80a024c:	f004 f8a5 	bl	80a439a <_ZplRK15StringSumHelperPKc>
 80a0250:	4607      	mov	r7, r0
 80a0252:	220a      	movs	r2, #10
 80a0254:	4629      	mov	r1, r5
 80a0256:	a80a      	add	r0, sp, #40	; 0x28
 80a0258:	f004 f830 	bl	80a42bc <_ZN6StringC1Ejh>
 80a025c:	a90a      	add	r1, sp, #40	; 0x28
 80a025e:	4638      	mov	r0, r7
 80a0260:	f004 f88f 	bl	80a4382 <_ZplRK15StringSumHelperRK6String>
 80a0264:	490d      	ldr	r1, [pc, #52]	; (80a029c <_Z12maxCurrentC26String+0xac>)
 80a0266:	f004 f898 	bl	80a439a <_ZplRK15StringSumHelperPKc>
 80a026a:	6801      	ldr	r1, [r0, #0]
 80a026c:	4630      	mov	r0, r6
 80a026e:	f004 f922 	bl	80a44b6 <_ZN5Print7printlnEPKc>
 80a0272:	a80a      	add	r0, sp, #40	; 0x28
 80a0274:	f003 ff50 	bl	80a4118 <_ZN6StringD1Ev>
 80a0278:	a802      	add	r0, sp, #8
 80a027a:	f003 ff4d 	bl	80a4118 <_ZN6StringD1Ev>
class StringSumHelper : public String
 80a027e:	a806      	add	r0, sp, #24
 80a0280:	f003 ff4a 	bl	80a4118 <_ZN6StringD1Ev>
        return 0;
 80a0284:	4620      	mov	r0, r4
    }
    return 1;
}
 80a0286:	b00f      	add	sp, #60	; 0x3c
 80a0288:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return 1;
 80a028a:	2001      	movs	r0, #1
 80a028c:	e7fb      	b.n	80a0286 <_Z12maxCurrentC26String+0x96>
 80a028e:	bf00      	nop
 80a0290:	20000330 	.word	0x20000330
 80a0294:	080a80b8 	.word	0x080a80b8
 80a0298:	080a80c4 	.word	0x080a80c4
 80a029c:	080a80db 	.word	0x080a80db

080a02a0 <_ZN16JsonWriterStaticILj512EED1Ev>:
 * variable.
 *
 * @param BUFFER_SIZE The size of the buffer to reserve.
 */
template <size_t BUFFER_SIZE>
class JsonWriterStatic : public JsonWriter {
 80a02a0:	b510      	push	{r4, lr}
 80a02a2:	4604      	mov	r4, r0
 80a02a4:	4b02      	ldr	r3, [pc, #8]	; (80a02b0 <_ZN16JsonWriterStaticILj512EED1Ev+0x10>)
 80a02a6:	6003      	str	r3, [r0, #0]
 80a02a8:	f002 fb8e 	bl	80a29c8 <_ZN10JsonWriterD1Ev>
 80a02ac:	4620      	mov	r0, r4
 80a02ae:	bd10      	pop	{r4, pc}
 80a02b0:	080a8630 	.word	0x080a8630

080a02b4 <_ZN16JsonWriterStaticILj512EED0Ev>:
 80a02b4:	b510      	push	{r4, lr}
 80a02b6:	4604      	mov	r4, r0
 80a02b8:	f7ff fff2 	bl	80a02a0 <_ZN16JsonWriterStaticILj512EED1Ev>
 80a02bc:	4620      	mov	r0, r4
 80a02be:	f44f 710c 	mov.w	r1, #560	; 0x230
 80a02c2:	f005 f8b4 	bl	80a542e <_ZdlPvj>
 80a02c6:	4620      	mov	r0, r4
 80a02c8:	bd10      	pop	{r4, pc}

080a02ca <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(hal_spi_interface_t spi);
  ~SPIClass() = default;
 80a02ca:	b510      	push	{r4, lr}
 80a02cc:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a02ce:	6880      	ldr	r0, [r0, #8]
 80a02d0:	b108      	cbz	r0, 80a02d6 <_ZN8SPIClassD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
 80a02d2:	f003 f915 	bl	80a3500 <os_mutex_recursive_destroy>
 80a02d6:	4620      	mov	r0, r4
 80a02d8:	bd10      	pop	{r4, pc}
	...

080a02dc <_Z10switchTest6String>:
int switchTest(String valueString) {
 80a02dc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 80a02de:	4913      	ldr	r1, [pc, #76]	; (80a032c <_Z10switchTest6String+0x50>)
 80a02e0:	4605      	mov	r5, r0
 80a02e2:	f004 f86e 	bl	80a43c2 <_ZNK6String6equalsEPKc>
 80a02e6:	4e12      	ldr	r6, [pc, #72]	; (80a0330 <_Z10switchTest6String+0x54>)
    if (valueString == "true") {
 80a02e8:	4604      	mov	r4, r0
 80a02ea:	b118      	cbz	r0, 80a02f4 <_Z10switchTest6String+0x18>
        TESTCASE = true;
 80a02ec:	2001      	movs	r0, #1
 80a02ee:	7030      	strb	r0, [r6, #0]
}
 80a02f0:	b004      	add	sp, #16
 80a02f2:	bd70      	pop	{r4, r5, r6, pc}
 80a02f4:	490f      	ldr	r1, [pc, #60]	; (80a0334 <_Z10switchTest6String+0x58>)
 80a02f6:	4628      	mov	r0, r5
 80a02f8:	f004 f863 	bl	80a43c2 <_ZNK6String6equalsEPKc>
        maxCurrentC1("32");
 80a02fc:	490e      	ldr	r1, [pc, #56]	; (80a0338 <_Z10switchTest6String+0x5c>)
 80a02fe:	4668      	mov	r0, sp
        TESTCASE = false;
 80a0300:	7034      	strb	r4, [r6, #0]
        maxCurrentC1("32");
 80a0302:	f003 ff53 	bl	80a41ac <_ZN6StringC1EPKc>
 80a0306:	4668      	mov	r0, sp
 80a0308:	f7ff ff1a 	bl	80a0140 <_Z12maxCurrentC16String>
 80a030c:	4668      	mov	r0, sp
 80a030e:	f003 ff03 	bl	80a4118 <_ZN6StringD1Ev>
        maxCurrentC2("32");
 80a0312:	4909      	ldr	r1, [pc, #36]	; (80a0338 <_Z10switchTest6String+0x5c>)
 80a0314:	4668      	mov	r0, sp
 80a0316:	f003 ff49 	bl	80a41ac <_ZN6StringC1EPKc>
 80a031a:	4668      	mov	r0, sp
 80a031c:	f7ff ff68 	bl	80a01f0 <_Z12maxCurrentC26String>
 80a0320:	4668      	mov	r0, sp
 80a0322:	f003 fef9 	bl	80a4118 <_ZN6StringD1Ev>
 80a0326:	4620      	mov	r0, r4
 80a0328:	e7e2      	b.n	80a02f0 <_Z10switchTest6String+0x14>
 80a032a:	bf00      	nop
 80a032c:	080a80e2 	.word	0x080a80e2
 80a0330:	20000330 	.word	0x20000330
 80a0334:	080a80e7 	.word	0x080a80e7
 80a0338:	080a80ed 	.word	0x080a80ed

080a033c <_ZN10CloudClass9_variableIcEEbPKT_PK6StringRK17CloudVariableTypeIPKcvE.isra.0>:
    static inline bool _variable(const T *varKey, const String *userVar, const CloudVariableTypeString& userVarType)
 80a033c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        spark_variable_t extra = {};
 80a033e:	2300      	movs	r3, #0
 80a0340:	9301      	str	r3, [sp, #4]
 80a0342:	9303      	str	r3, [sp, #12]
        extra.size = sizeof(extra);
 80a0344:	230c      	movs	r3, #12
 80a0346:	f8ad 3004 	strh.w	r3, [sp, #4]
        extra.update = update_string_variable;
 80a034a:	4b04      	ldr	r3, [pc, #16]	; (80a035c <_ZN10CloudClass9_variableIcEEbPKT_PK6StringRK17CloudVariableTypeIPKcvE.isra.0+0x20>)
        return spark_variable(varKey, userVar, CloudVariableTypeString::TYPE_ID, &extra);
 80a034c:	2204      	movs	r2, #4
        extra.update = update_string_variable;
 80a034e:	9302      	str	r3, [sp, #8]
        return spark_variable(varKey, userVar, CloudVariableTypeString::TYPE_ID, &extra);
 80a0350:	ab01      	add	r3, sp, #4
 80a0352:	f003 fabd 	bl	80a38d0 <spark_variable>
    }
 80a0356:	b005      	add	sp, #20
 80a0358:	f85d fb04 	ldr.w	pc, [sp], #4
 80a035c:	080a00b7 	.word	0x080a00b7

080a0360 <_Z8initRFID6String>:
		}
	}
}

//! Initialises RFID reader
int initRFID(String input) {
 80a0360:	b538      	push	{r3, r4, r5, lr}
    //additional config for debugging RFID readers
    pinMode(SS_PIN_CHARGER1, OUTPUT);
 80a0362:	2101      	movs	r1, #1
 80a0364:	200b      	movs	r0, #11
 80a0366:	f004 ffc7 	bl	80a52f8 <pinMode>
	digitalWrite(SS_PIN_CHARGER1, HIGH);
 80a036a:	2101      	movs	r1, #1
 80a036c:	200b      	movs	r0, #11
 80a036e:	f004 ffd4 	bl	80a531a <digitalWrite>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a0372:	4d21      	ldr	r5, [pc, #132]	; (80a03f8 <_Z8initRFID6String+0x98>)
	pinMode(SS_PIN_CHARGER2, OUTPUT);
 80a0374:	2101      	movs	r1, #1
 80a0376:	200c      	movs	r0, #12
 80a0378:	f004 ffbe 	bl	80a52f8 <pinMode>
	digitalWrite(SS_PIN_CHARGER2, HIGH);
 80a037c:	2101      	movs	r1, #1
 80a037e:	200c      	movs	r0, #12
 80a0380:	f004 ffcb 	bl	80a531a <digitalWrite>
 80a0384:	7829      	ldrb	r1, [r5, #0]
 80a0386:	f3bf 8f5b 	dmb	ish
 80a038a:	f011 0401 	ands.w	r4, r1, #1
 80a038e:	d10f      	bne.n	80a03b0 <_Z8initRFID6String+0x50>
 80a0390:	4628      	mov	r0, r5
 80a0392:	f7ff fe88 	bl	80a00a6 <__cxa_guard_acquire>
 80a0396:	b158      	cbz	r0, 80a03b0 <_Z8initRFID6String+0x50>
 80a0398:	4621      	mov	r1, r4
 80a039a:	4818      	ldr	r0, [pc, #96]	; (80a03fc <_Z8initRFID6String+0x9c>)
 80a039c:	f003 fb2b 	bl	80a39f6 <_ZN8SPIClassC1E19hal_spi_interface_t>
 80a03a0:	4628      	mov	r0, r5
 80a03a2:	f7ff fe85 	bl	80a00b0 <__cxa_guard_release>
 80a03a6:	4a16      	ldr	r2, [pc, #88]	; (80a0400 <_Z8initRFID6String+0xa0>)
 80a03a8:	4916      	ldr	r1, [pc, #88]	; (80a0404 <_Z8initRFID6String+0xa4>)
 80a03aa:	4814      	ldr	r0, [pc, #80]	; (80a03fc <_Z8initRFID6String+0x9c>)
 80a03ac:	f005 f83a 	bl	80a5424 <__aeabi_atexit>
    }
    void begin() {
        instance().begin();
    }
    void begin(uint16_t ss_pin) {
        instance().begin(ss_pin);
 80a03b0:	2100      	movs	r1, #0
 80a03b2:	4812      	ldr	r0, [pc, #72]	; (80a03fc <_Z8initRFID6String+0x9c>)
 80a03b4:	f003 fb2e 	bl	80a3a14 <_ZN8SPIClass5beginEt>
  
    SPI.begin(D0);      // Initiate  SPI bus
    //Particle.process();
    delay(50);
 80a03b8:	2032      	movs	r0, #50	; 0x32
 80a03ba:	f004 fae7 	bl	80a498c <delay>
    mfrc522_Charger1.PCD_Init();   // Initiate MFRC522
 80a03be:	4812      	ldr	r0, [pc, #72]	; (80a0408 <_Z8initRFID6String+0xa8>)
 80a03c0:	f001 fbc0 	bl	80a1b44 <_ZN7MFRC5228PCD_InitEv>
    delay(500);
 80a03c4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a03c8:	f004 fae0 	bl	80a498c <delay>
    mfrc522_Charger2.PCD_Init();   // Initiate MFRC522
 80a03cc:	480f      	ldr	r0, [pc, #60]	; (80a040c <_Z8initRFID6String+0xac>)
 80a03ce:	f001 fbb9 	bl	80a1b44 <_ZN7MFRC5228PCD_InitEv>
    //mfrc522_Charger1.PCD_SetAntennaGain(mfrc522.RxGain_max);
    mfrc522_Charger1.PCD_SetAntennaGain(mfrc522_Charger1.RxGain_max);
 80a03d2:	2170      	movs	r1, #112	; 0x70
 80a03d4:	480c      	ldr	r0, [pc, #48]	; (80a0408 <_Z8initRFID6String+0xa8>)
 80a03d6:	f001 fbf0 	bl	80a1bba <_ZN7MFRC52218PCD_SetAntennaGainEh>
    mfrc522_Charger2.PCD_SetAntennaGain(mfrc522_Charger2.RxGain_max);
 80a03da:	2170      	movs	r1, #112	; 0x70
 80a03dc:	480b      	ldr	r0, [pc, #44]	; (80a040c <_Z8initRFID6String+0xac>)
 80a03de:	f001 fbec 	bl	80a1bba <_ZN7MFRC52218PCD_SetAntennaGainEh>
    
    DEBUGPORT.println("Approach your card to the reader...");
 80a03e2:	f004 fc93 	bl	80a4d0c <_Z16_fetch_usbserialv>
 80a03e6:	490a      	ldr	r1, [pc, #40]	; (80a0410 <_Z8initRFID6String+0xb0>)
 80a03e8:	f004 f865 	bl	80a44b6 <_ZN5Print7printlnEPKc>
    DEBUGPORT.println();    
 80a03ec:	f004 fc8e 	bl	80a4d0c <_Z16_fetch_usbserialv>
 80a03f0:	f004 f855 	bl	80a449e <_ZN5Print7printlnEv>
    return 1;
}
 80a03f4:	2001      	movs	r0, #1
 80a03f6:	bd38      	pop	{r3, r4, r5, pc}
 80a03f8:	20000244 	.word	0x20000244
 80a03fc:	20000248 	.word	0x20000248
 80a0400:	20000240 	.word	0x20000240
 80a0404:	080a02cb 	.word	0x080a02cb
 80a0408:	20000544 	.word	0x20000544
 80a040c:	20000552 	.word	0x20000552
 80a0410:	080a80f0 	.word	0x080a80f0

080a0414 <_ZN10CloudClass7processEv>:
    static void process(void) {
 80a0414:	b508      	push	{r3, lr}
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a0416:	f003 f853 	bl	80a34c0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a041a:	4b03      	ldr	r3, [pc, #12]	; (80a0428 <_ZN10CloudClass7processEv+0x14>)
 80a041c:	6018      	str	r0, [r3, #0]
    }
 80a041e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    		spark_process();
 80a0422:	f003 ba65 	b.w	80a38f0 <spark_process>
 80a0426:	bf00      	nop
 80a0428:	20000620 	.word	0x20000620

080a042c <_Z18bytesArrToFloatArrPcjPfj>:

/*!
	Function to convert an array of Olimex 4-byte values to float variables
*/
bool bytesArrToFloatArr(char * Arr, unsigned int ArrLen, float * OutputArr, unsigned int FloatLen)
{
 80a042c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    //FloatTriplet TriOutput;
    for(int i=0; (i<FloatLen) && (4*i+3 < ArrLen); i++)
 80a042e:	2400      	movs	r4, #0
 80a0430:	0889      	lsrs	r1, r1, #2
 80a0432:	429c      	cmp	r4, r3
 80a0434:	d018      	beq.n	80a0468 <_Z18bytesArrToFloatArrPcjPfj+0x3c>
 80a0436:	428c      	cmp	r4, r1
 80a0438:	f100 0004 	add.w	r0, r0, #4
 80a043c:	d014      	beq.n	80a0468 <_Z18bytesArrToFloatArrPcjPfj+0x3c>
    {
        float output;

        *((unsigned char *)(&output) + 3) = (unsigned char) Arr[4*i+0];
 80a043e:	f810 5c04 	ldrb.w	r5, [r0, #-4]
 80a0442:	f88d 5007 	strb.w	r5, [sp, #7]
        *((unsigned char *)(&output) + 2) = Arr[4*i+1];
 80a0446:	f810 5c03 	ldrb.w	r5, [r0, #-3]
 80a044a:	f88d 5006 	strb.w	r5, [sp, #6]
        *((unsigned char *)(&output) + 1) = Arr[4*i+2];
 80a044e:	f810 5c02 	ldrb.w	r5, [r0, #-2]
 80a0452:	f88d 5005 	strb.w	r5, [sp, #5]
        *((unsigned char *)(&output) + 0) = Arr[4*i+3];
 80a0456:	f810 5c01 	ldrb.w	r5, [r0, #-1]
 80a045a:	f88d 5004 	strb.w	r5, [sp, #4]
        
        OutputArr[i] = output;
 80a045e:	9d01      	ldr	r5, [sp, #4]
 80a0460:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
    for(int i=0; (i<FloatLen) && (4*i+3 < ArrLen); i++)
 80a0464:	3401      	adds	r4, #1
 80a0466:	e7e4      	b.n	80a0432 <_Z18bytesArrToFloatArrPcjPfj+0x6>
    }

    return true;
}
 80a0468:	2001      	movs	r0, #1
 80a046a:	b003      	add	sp, #12
 80a046c:	bd30      	pop	{r4, r5, pc}
	...

080a0470 <_Z11stringParsePci>:

/*!
	Function to parse Olimex message into energy measurements
	Returns the charger socket it received data from.
*/
int stringParse(char * buf, int buflen){
 80a0470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  String cmdValue;
  int Charger=0;
  for (int i=0; i<buflen; i++){
 80a0474:	f04f 0800 	mov.w	r8, #0
int stringParse(char * buf, int buflen){
 80a0478:	b09f      	sub	sp, #124	; 0x7c
 80a047a:	4605      	mov	r5, r0
 80a047c:	460e      	mov	r6, r1
  String cmdValue;
 80a047e:	a806      	add	r0, sp, #24
 80a0480:	49a9      	ldr	r1, [pc, #676]	; (80a0728 <_Z11stringParsePci+0x2b8>)
 80a0482:	f003 fe93 	bl	80a41ac <_ZN6StringC1EPKc>
  int Charger=0;
 80a0486:	4647      	mov	r7, r8
  for (int i=0; i<buflen; i++){
 80a0488:	45b0      	cmp	r8, r6
 80a048a:	f280 821f 	bge.w	80a08cc <_Z11stringParsePci+0x45c>
    if(buf[i]==0x0F && i+2>=buflen) //error check?
 80a048e:	782b      	ldrb	r3, [r5, #0]
 80a0490:	2b0f      	cmp	r3, #15
 80a0492:	d108      	bne.n	80a04a6 <_Z11stringParsePci+0x36>
 80a0494:	f108 0302 	add.w	r3, r8, #2
 80a0498:	429e      	cmp	r6, r3
 80a049a:	dc04      	bgt.n	80a04a6 <_Z11stringParsePci+0x36>
    {
      DEBUGPORT.println("E");
 80a049c:	f004 fc36 	bl	80a4d0c <_Z16_fetch_usbserialv>
 80a04a0:	49a2      	ldr	r1, [pc, #648]	; (80a072c <_Z11stringParsePci+0x2bc>)
 80a04a2:	f004 f808 	bl	80a44b6 <_ZN5Print7printlnEPKc>
    }
    if((buf[i]==0x0F || buf[i]==0x0E) && i+2<buflen) //we detect a command-character and the next two characters exists
 80a04a6:	462c      	mov	r4, r5
 80a04a8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80a04ac:	f1a3 020e 	sub.w	r2, r3, #14
 80a04b0:	2a01      	cmp	r2, #1
 80a04b2:	f200 810d 	bhi.w	80a06d0 <_Z11stringParsePci+0x260>
 80a04b6:	f108 0202 	add.w	r2, r8, #2
 80a04ba:	4296      	cmp	r6, r2
 80a04bc:	f340 8108 	ble.w	80a06d0 <_Z11stringParsePci+0x260>
      {
        Charger=1;  
      }
      else
      {
        Charger=2;
 80a04c0:	2b0f      	cmp	r3, #15
 80a04c2:	bf0c      	ite	eq
 80a04c4:	2701      	moveq	r7, #1
 80a04c6:	2702      	movne	r7, #2
      }
      DEBUGPORT.print("Charger "+String(Charger)+": ");
 80a04c8:	f004 fc20 	bl	80a4d0c <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
 80a04cc:	4998      	ldr	r1, [pc, #608]	; (80a0730 <_Z11stringParsePci+0x2c0>)
 80a04ce:	4681      	mov	r9, r0
 80a04d0:	a81a      	add	r0, sp, #104	; 0x68
 80a04d2:	f003 fe6b 	bl	80a41ac <_ZN6StringC1EPKc>
 80a04d6:	220a      	movs	r2, #10
 80a04d8:	4639      	mov	r1, r7
 80a04da:	a816      	add	r0, sp, #88	; 0x58
 80a04dc:	f003 fedb 	bl	80a4296 <_ZN6StringC1Eih>
 80a04e0:	a916      	add	r1, sp, #88	; 0x58
 80a04e2:	a81a      	add	r0, sp, #104	; 0x68
 80a04e4:	f003 ff4d 	bl	80a4382 <_ZplRK15StringSumHelperRK6String>
 80a04e8:	4992      	ldr	r1, [pc, #584]	; (80a0734 <_Z11stringParsePci+0x2c4>)
 80a04ea:	f003 ff56 	bl	80a439a <_ZplRK15StringSumHelperPKc>
 80a04ee:	6801      	ldr	r1, [r0, #0]
 80a04f0:	4648      	mov	r0, r9
 80a04f2:	f003 ffcd 	bl	80a4490 <_ZN5Print5printEPKc>
 80a04f6:	a816      	add	r0, sp, #88	; 0x58
 80a04f8:	f003 fe0e 	bl	80a4118 <_ZN6StringD1Ev>
class StringSumHelper : public String
 80a04fc:	a81a      	add	r0, sp, #104	; 0x68
 80a04fe:	f003 fe0b 	bl	80a4118 <_ZN6StringD1Ev>
      String measurements;
 80a0502:	4989      	ldr	r1, [pc, #548]	; (80a0728 <_Z11stringParsePci+0x2b8>)
 80a0504:	a80a      	add	r0, sp, #40	; 0x28
 80a0506:	f003 fe51 	bl	80a41ac <_ZN6StringC1EPKc>
      switch (buf[i+1])
 80a050a:	7823      	ldrb	r3, [r4, #0]
 80a050c:	3b01      	subs	r3, #1
 80a050e:	2b05      	cmp	r3, #5
 80a0510:	f200 80db 	bhi.w	80a06ca <_Z11stringParsePci+0x25a>
 80a0514:	e8df f013 	tbh	[pc, r3, lsl #1]
 80a0518:	00730006 	.word	0x00730006
 80a051c:	012800e4 	.word	0x012800e4
 80a0520:	018f016c 	.word	0x018f016c
      {
        case 1:
          //Phase Voltage
          if(buflen>4)
 80a0524:	2e04      	cmp	r6, #4
 80a0526:	dd64      	ble.n	80a05f2 <_Z11stringParsePci+0x182>
          {
              //Voltage[Charger-1] = bytesToFloat(buf[i+2], buf[i+3], buf[i+4], buf[i+5]);
              float VoltageArr[3];
              if(bytesArrToFloatArr(&buf[i+2], 12, VoltageArr,3))
 80a0528:	2303      	movs	r3, #3
 80a052a:	210c      	movs	r1, #12
 80a052c:	aa03      	add	r2, sp, #12
 80a052e:	1ca8      	adds	r0, r5, #2
 80a0530:	f7ff ff7c 	bl	80a042c <_Z18bytesArrToFloatArrPcjPfj>
 80a0534:	f8df a22c 	ldr.w	sl, [pc, #556]	; 80a0764 <_Z11stringParsePci+0x2f4>
 80a0538:	2800      	cmp	r0, #0
 80a053a:	d140      	bne.n	80a05be <_Z11stringParsePci+0x14e>
                    continue;
                  PhaseVoltage[Charger-1][i]=VoltageArr[i];
                }
                //Voltage[Charger-1] = {VoltageArr[0],VoltageArr[1],VoltageArr[2]};
              }
              DEBUGPORT.print("Voltage: "+String(PhaseVoltage[Charger-1][0],4)+" "+String(PhaseVoltage[Charger-1][1],4)+" "+String(PhaseVoltage[Charger-1][2],4));
 80a053c:	f004 fbe6 	bl	80a4d0c <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
 80a0540:	497d      	ldr	r1, [pc, #500]	; (80a0738 <_Z11stringParsePci+0x2c8>)
 80a0542:	4681      	mov	r9, r0
 80a0544:	a812      	add	r0, sp, #72	; 0x48
 80a0546:	f003 fe31 	bl	80a41ac <_ZN6StringC1EPKc>
 80a054a:	230c      	movs	r3, #12
 80a054c:	1e7a      	subs	r2, r7, #1
 80a054e:	4353      	muls	r3, r2
 80a0550:	a80e      	add	r0, sp, #56	; 0x38
 80a0552:	f85a 1003 	ldr.w	r1, [sl, r3]
 80a0556:	2204      	movs	r2, #4
 80a0558:	eb0a 0503 	add.w	r5, sl, r3
 80a055c:	f003 fec1 	bl	80a42e2 <_ZN6StringC1Efi>
 80a0560:	a90e      	add	r1, sp, #56	; 0x38
 80a0562:	a812      	add	r0, sp, #72	; 0x48
 80a0564:	f003 ff0d 	bl	80a4382 <_ZplRK15StringSumHelperRK6String>
 80a0568:	4974      	ldr	r1, [pc, #464]	; (80a073c <_Z11stringParsePci+0x2cc>)
 80a056a:	f003 ff16 	bl	80a439a <_ZplRK15StringSumHelperPKc>
 80a056e:	4682      	mov	sl, r0
 80a0570:	2204      	movs	r2, #4
 80a0572:	6869      	ldr	r1, [r5, #4]
 80a0574:	a816      	add	r0, sp, #88	; 0x58
 80a0576:	f003 feb4 	bl	80a42e2 <_ZN6StringC1Efi>
 80a057a:	4650      	mov	r0, sl
 80a057c:	a916      	add	r1, sp, #88	; 0x58
 80a057e:	f003 ff00 	bl	80a4382 <_ZplRK15StringSumHelperRK6String>
 80a0582:	496e      	ldr	r1, [pc, #440]	; (80a073c <_Z11stringParsePci+0x2cc>)
 80a0584:	f003 ff09 	bl	80a439a <_ZplRK15StringSumHelperPKc>
 80a0588:	4682      	mov	sl, r0
 80a058a:	2204      	movs	r2, #4
 80a058c:	68a9      	ldr	r1, [r5, #8]
 80a058e:	a81a      	add	r0, sp, #104	; 0x68
 80a0590:	f003 fea7 	bl	80a42e2 <_ZN6StringC1Efi>
 80a0594:	a91a      	add	r1, sp, #104	; 0x68
 80a0596:	4650      	mov	r0, sl
 80a0598:	f003 fef3 	bl	80a4382 <_ZplRK15StringSumHelperRK6String>
 80a059c:	6801      	ldr	r1, [r0, #0]
 80a059e:	4648      	mov	r0, r9
                {
                    LineVoltage[Charger-1][i]=VoltageArr[i];
                }
                //Voltage[Charger-1] = {VoltageArr[0],VoltageArr[1],VoltageArr[2]};
              }
              DEBUGPORT.print("Voltage: "+String(LineVoltage[Charger-1][0],4)+" "+String(LineVoltage[Charger-1][1],4)+" "+String(LineVoltage[Charger-1][2],4));
 80a05a0:	f003 ff76 	bl	80a4490 <_ZN5Print5printEPKc>
 80a05a4:	a81a      	add	r0, sp, #104	; 0x68
 80a05a6:	f003 fdb7 	bl	80a4118 <_ZN6StringD1Ev>
 80a05aa:	a816      	add	r0, sp, #88	; 0x58
 80a05ac:	f003 fdb4 	bl	80a4118 <_ZN6StringD1Ev>
 80a05b0:	a80e      	add	r0, sp, #56	; 0x38
 80a05b2:	f003 fdb1 	bl	80a4118 <_ZN6StringD1Ev>
class StringSumHelper : public String
 80a05b6:	a812      	add	r0, sp, #72	; 0x48
 80a05b8:	f003 fdae 	bl	80a4118 <_ZN6StringD1Ev>
 80a05bc:	e085      	b.n	80a06ca <_Z11stringParsePci+0x25a>
 80a05be:	220c      	movs	r2, #12
              if(bytesArrToFloatArr(&buf[i+2], 12, VoltageArr,3))
 80a05c0:	f04f 0903 	mov.w	r9, #3
 80a05c4:	fb02 a207 	mla	r2, r2, r7, sl
 80a05c8:	ad03      	add	r5, sp, #12
                  if (VoltageArr[i] < 1.0) //sometimes one received V phase is 0.00
 80a05ca:	f855 bb04 	ldr.w	fp, [r5], #4
 80a05ce:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80a05d2:	4658      	mov	r0, fp
 80a05d4:	9201      	str	r2, [sp, #4]
 80a05d6:	f005 ffa3 	bl	80a6520 <__aeabi_fcmplt>
 80a05da:	f06f 0303 	mvn.w	r3, #3
 80a05de:	9a01      	ldr	r2, [sp, #4]
 80a05e0:	b918      	cbnz	r0, 80a05ea <_Z11stringParsePci+0x17a>
                  PhaseVoltage[Charger-1][i]=VoltageArr[i];
 80a05e2:	fb03 f109 	mul.w	r1, r3, r9
 80a05e6:	f842 b001 	str.w	fp, [r2, r1]
                for(int i=0;i<3;i++)
 80a05ea:	f1b9 0901 	subs.w	r9, r9, #1
 80a05ee:	d1ec      	bne.n	80a05ca <_Z11stringParsePci+0x15a>
 80a05f0:	e7a4      	b.n	80a053c <_Z11stringParsePci+0xcc>
              DEBUGPORT.print("did not receive enough voltage data");
 80a05f2:	f004 fb8b 	bl	80a4d0c <_Z16_fetch_usbserialv>
 80a05f6:	4952      	ldr	r1, [pc, #328]	; (80a0740 <_Z11stringParsePci+0x2d0>)
              DEBUGPORT.print("did not receive enough energy data");
 80a05f8:	f003 ff4a 	bl	80a4490 <_ZN5Print5printEPKc>
 80a05fc:	e065      	b.n	80a06ca <_Z11stringParsePci+0x25a>
          if(buflen>12) //(buflen>4)
 80a05fe:	2e0c      	cmp	r6, #12
 80a0600:	dd6a      	ble.n	80a06d8 <_Z11stringParsePci+0x268>
              if(bytesArrToFloatArr(&buf[i+2], 12, Current[Charger-1],3))
 80a0602:	210c      	movs	r1, #12
 80a0604:	f107 3aff 	add.w	sl, r7, #4294967295
 80a0608:	fb01 fb0a 	mul.w	fp, r1, sl
 80a060c:	4b4d      	ldr	r3, [pc, #308]	; (80a0744 <_Z11stringParsePci+0x2d4>)
 80a060e:	1ca8      	adds	r0, r5, #2
 80a0610:	eb03 090b 	add.w	r9, r3, fp
 80a0614:	464a      	mov	r2, r9
 80a0616:	2303      	movs	r3, #3
 80a0618:	f7ff ff08 	bl	80a042c <_Z18bytesArrToFloatArrPcjPfj>
              DEBUGPORT.print("Current: ");
 80a061c:	f004 fb76 	bl	80a4d0c <_Z16_fetch_usbserialv>
 80a0620:	4949      	ldr	r1, [pc, #292]	; (80a0748 <_Z11stringParsePci+0x2d8>)
 80a0622:	f003 ff35 	bl	80a4490 <_ZN5Print5printEPKc>
              DEBUGPORT.print(Current[Charger-1][0],4);DEBUGPORT.print(" ");
 80a0626:	f004 fb71 	bl	80a4d0c <_Z16_fetch_usbserialv>
 80a062a:	4b46      	ldr	r3, [pc, #280]	; (80a0744 <_Z11stringParsePci+0x2d4>)
 80a062c:	2204      	movs	r2, #4
 80a062e:	461d      	mov	r5, r3
 80a0630:	f853 100b 	ldr.w	r1, [r3, fp]
 80a0634:	f004 f826 	bl	80a4684 <_ZN5Print5printEfi>
 80a0638:	f004 fb68 	bl	80a4d0c <_Z16_fetch_usbserialv>
 80a063c:	493f      	ldr	r1, [pc, #252]	; (80a073c <_Z11stringParsePci+0x2cc>)
 80a063e:	f003 ff27 	bl	80a4490 <_ZN5Print5printEPKc>
              DEBUGPORT.print(Current[Charger-1][1],4);DEBUGPORT.print(" ");
 80a0642:	f004 fb63 	bl	80a4d0c <_Z16_fetch_usbserialv>
 80a0646:	2204      	movs	r2, #4
 80a0648:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80a064c:	f004 f81a 	bl	80a4684 <_ZN5Print5printEfi>
 80a0650:	f004 fb5c 	bl	80a4d0c <_Z16_fetch_usbserialv>
 80a0654:	4939      	ldr	r1, [pc, #228]	; (80a073c <_Z11stringParsePci+0x2cc>)
 80a0656:	f003 ff1b 	bl	80a4490 <_ZN5Print5printEPKc>
              DEBUGPORT.println(Current[Charger-1][2],4);
 80a065a:	f004 fb57 	bl	80a4d0c <_Z16_fetch_usbserialv>
 80a065e:	2204      	movs	r2, #4
 80a0660:	f8d9 1008 	ldr.w	r1, [r9, #8]
 80a0664:	f004 f82b 	bl	80a46be <_ZN5Print7printlnEfi>
              if((Current[Charger-1][0]+Current[Charger-1][1]+Current[Charger-1][2]) < 1.0)
 80a0668:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80a066c:	f855 000b 	ldr.w	r0, [r5, fp]
 80a0670:	f005 fcb0 	bl	80a5fd4 <__addsf3>
 80a0674:	f8d9 1008 	ldr.w	r1, [r9, #8]
 80a0678:	f005 fcac 	bl	80a5fd4 <__addsf3>
 80a067c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80a0680:	f005 ff4e 	bl	80a6520 <__aeabi_fcmplt>
 80a0684:	4d31      	ldr	r5, [pc, #196]	; (80a074c <_Z11stringParsePci+0x2dc>)
 80a0686:	b110      	cbz	r0, 80a068e <_Z11stringParsePci+0x21e>
                numberOfZeroReadings[Charger-1]++;
 80a0688:	f855 002a 	ldr.w	r0, [r5, sl, lsl #2]
 80a068c:	3001      	adds	r0, #1
 80a068e:	4b30      	ldr	r3, [pc, #192]	; (80a0750 <_Z11stringParsePci+0x2e0>)
 80a0690:	f845 002a 	str.w	r0, [r5, sl, lsl #2]
              for(int i=18;i>=0;i--)
 80a0694:	f1a3 0a4c 	sub.w	sl, r3, #76	; 0x4c
                   CurrentList[i+1]= CurrentList[i];
 80a0698:	f853 2c04 	ldr.w	r2, [r3, #-4]
 80a069c:	f843 2904 	str.w	r2, [r3], #-4
              for(int i=18;i>=0;i--)
 80a06a0:	459a      	cmp	sl, r3
 80a06a2:	d1f9      	bne.n	80a0698 <_Z11stringParsePci+0x228>
              CurrentList[0]=(Current[0][0]+Current[0][1]+Current[0][2]);//numberOfZeroReadings[0];
 80a06a4:	4b27      	ldr	r3, [pc, #156]	; (80a0744 <_Z11stringParsePci+0x2d4>)
 80a06a6:	f8d3 9008 	ldr.w	r9, [r3, #8]
 80a06aa:	6859      	ldr	r1, [r3, #4]
 80a06ac:	6818      	ldr	r0, [r3, #0]
 80a06ae:	f005 fc91 	bl	80a5fd4 <__addsf3>
 80a06b2:	4649      	mov	r1, r9
 80a06b4:	f005 fc8e 	bl	80a5fd4 <__addsf3>
 80a06b8:	f8ca 0000 	str.w	r0, [sl]
              CurrentList[1]=numberOfZeroReadings[0];
 80a06bc:	6828      	ldr	r0, [r5, #0]
 80a06be:	f005 fd3d 	bl	80a613c <__aeabi_i2f>
              CurrentList[2]=Current[0][2];
 80a06c2:	f8ca 9008 	str.w	r9, [sl, #8]
              CurrentList[1]=numberOfZeroReadings[0];
 80a06c6:	f8ca 0004 	str.w	r0, [sl, #4]
      String measurements;
 80a06ca:	a80a      	add	r0, sp, #40	; 0x28
 80a06cc:	f003 fd24 	bl	80a4118 <_ZN6StringD1Ev>
  for (int i=0; i<buflen; i++){
 80a06d0:	4625      	mov	r5, r4
 80a06d2:	f108 0801 	add.w	r8, r8, #1
 80a06d6:	e6d7      	b.n	80a0488 <_Z11stringParsePci+0x18>
              DEBUGPORT.print("did not receive enough current data");
 80a06d8:	f004 fb18 	bl	80a4d0c <_Z16_fetch_usbserialv>
 80a06dc:	491d      	ldr	r1, [pc, #116]	; (80a0754 <_Z11stringParsePci+0x2e4>)
 80a06de:	e78b      	b.n	80a05f8 <_Z11stringParsePci+0x188>
          if(buflen>4)
 80a06e0:	2e04      	cmp	r6, #4
 80a06e2:	dd1d      	ble.n	80a0720 <_Z11stringParsePci+0x2b0>
              Frequency[0] = bytesToFloat(buf[i+2], buf[i+3], buf[i+4], buf[i+5]);
 80a06e4:	78e2      	ldrb	r2, [r4, #3]
 80a06e6:	78a1      	ldrb	r1, [r4, #2]
 80a06e8:	7923      	ldrb	r3, [r4, #4]
    *((unsigned char *)(&output) + 3) = b0;
 80a06ea:	7860      	ldrb	r0, [r4, #1]
    *((unsigned char *)(&output) + 1) = b2;
 80a06ec:	f88d 2069 	strb.w	r2, [sp, #105]	; 0x69
    *((unsigned char *)(&output) + 2) = b1;
 80a06f0:	f88d 106a 	strb.w	r1, [sp, #106]	; 0x6a
    *((unsigned char *)(&output) + 3) = b0;
 80a06f4:	f88d 006b 	strb.w	r0, [sp, #107]	; 0x6b
    *((unsigned char *)(&output) + 0) = b3;
 80a06f8:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
    return output;
 80a06fc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
              Frequency[0] = bytesToFloat(buf[i+2], buf[i+3], buf[i+4], buf[i+5]);
 80a06fe:	4d16      	ldr	r5, [pc, #88]	; (80a0758 <_Z11stringParsePci+0x2e8>)
 80a0700:	602b      	str	r3, [r5, #0]
              Frequency[1]=Frequency[0];
 80a0702:	606b      	str	r3, [r5, #4]
              DEBUGPORT.print("Frequency: ");
 80a0704:	f004 fb02 	bl	80a4d0c <_Z16_fetch_usbserialv>
 80a0708:	4914      	ldr	r1, [pc, #80]	; (80a075c <_Z11stringParsePci+0x2ec>)
 80a070a:	f003 fec1 	bl	80a4490 <_ZN5Print5printEPKc>
              DEBUGPORT.print(Frequency[Charger-1],4);
 80a070e:	f004 fafd 	bl	80a4d0c <_Z16_fetch_usbserialv>
 80a0712:	2204      	movs	r2, #4
 80a0714:	1e7b      	subs	r3, r7, #1
 80a0716:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
              DEBUGPORT.print(Energy[Charger-1],4);
 80a071a:	f003 ffb3 	bl	80a4684 <_ZN5Print5printEfi>
 80a071e:	e7d4      	b.n	80a06ca <_Z11stringParsePci+0x25a>
              DEBUGPORT.print("did not receive enough frequency data");
 80a0720:	f004 faf4 	bl	80a4d0c <_Z16_fetch_usbserialv>
 80a0724:	490e      	ldr	r1, [pc, #56]	; (80a0760 <_Z11stringParsePci+0x2f0>)
 80a0726:	e767      	b.n	80a05f8 <_Z11stringParsePci+0x188>
 80a0728:	080a898c 	.word	0x080a898c
 80a072c:	080a8114 	.word	0x080a8114
 80a0730:	080a8116 	.word	0x080a8116
 80a0734:	080a8126 	.word	0x080a8126
 80a0738:	080a811f 	.word	0x080a811f
 80a073c:	080a8127 	.word	0x080a8127
 80a0740:	080a8129 	.word	0x080a8129
 80a0744:	20000254 	.word	0x20000254
 80a0748:	080a814d 	.word	0x080a814d
 80a074c:	20000560 	.word	0x20000560
 80a0750:	200002b8 	.word	0x200002b8
 80a0754:	080a8157 	.word	0x080a8157
 80a0758:	200002c4 	.word	0x200002c4
 80a075c:	080a817b 	.word	0x080a817b
 80a0760:	080a8187 	.word	0x080a8187
 80a0764:	200002ec 	.word	0x200002ec
          if(buflen>4)
 80a0768:	2e04      	cmp	r6, #4
 80a076a:	dd3d      	ble.n	80a07e8 <_Z11stringParsePci+0x378>
              if(bytesArrToFloatArr(&buf[i+2], 12, Power[Charger-1],3))
 80a076c:	210c      	movs	r1, #12
 80a076e:	f107 39ff 	add.w	r9, r7, #4294967295
 80a0772:	fb01 f909 	mul.w	r9, r1, r9
 80a0776:	f8df b184 	ldr.w	fp, [pc, #388]	; 80a08fc <_Z11stringParsePci+0x48c>
 80a077a:	2303      	movs	r3, #3
 80a077c:	eb0b 0a09 	add.w	sl, fp, r9
 80a0780:	4652      	mov	r2, sl
 80a0782:	1ca8      	adds	r0, r5, #2
 80a0784:	f7ff fe52 	bl	80a042c <_Z18bytesArrToFloatArrPcjPfj>
              DEBUGPORT.print("Power: "+String(Power[Charger-1][0],4)+" "+String(Power[Charger-1][1],4)+" "+String(Power[Charger-1][2],4));              
 80a0788:	f004 fac0 	bl	80a4d0c <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
 80a078c:	4953      	ldr	r1, [pc, #332]	; (80a08dc <_Z11stringParsePci+0x46c>)
 80a078e:	4605      	mov	r5, r0
 80a0790:	a812      	add	r0, sp, #72	; 0x48
 80a0792:	f003 fd0b 	bl	80a41ac <_ZN6StringC1EPKc>
 80a0796:	2204      	movs	r2, #4
 80a0798:	f85b 1009 	ldr.w	r1, [fp, r9]
 80a079c:	a80e      	add	r0, sp, #56	; 0x38
 80a079e:	f003 fda0 	bl	80a42e2 <_ZN6StringC1Efi>
 80a07a2:	a90e      	add	r1, sp, #56	; 0x38
 80a07a4:	a812      	add	r0, sp, #72	; 0x48
 80a07a6:	f003 fdec 	bl	80a4382 <_ZplRK15StringSumHelperRK6String>
 80a07aa:	494d      	ldr	r1, [pc, #308]	; (80a08e0 <_Z11stringParsePci+0x470>)
 80a07ac:	f003 fdf5 	bl	80a439a <_ZplRK15StringSumHelperPKc>
 80a07b0:	4681      	mov	r9, r0
 80a07b2:	2204      	movs	r2, #4
 80a07b4:	f8da 1004 	ldr.w	r1, [sl, #4]
 80a07b8:	a816      	add	r0, sp, #88	; 0x58
 80a07ba:	f003 fd92 	bl	80a42e2 <_ZN6StringC1Efi>
 80a07be:	4648      	mov	r0, r9
 80a07c0:	a916      	add	r1, sp, #88	; 0x58
 80a07c2:	f003 fdde 	bl	80a4382 <_ZplRK15StringSumHelperRK6String>
 80a07c6:	4946      	ldr	r1, [pc, #280]	; (80a08e0 <_Z11stringParsePci+0x470>)
 80a07c8:	f003 fde7 	bl	80a439a <_ZplRK15StringSumHelperPKc>
 80a07cc:	4681      	mov	r9, r0
 80a07ce:	2204      	movs	r2, #4
 80a07d0:	f8da 1008 	ldr.w	r1, [sl, #8]
 80a07d4:	a81a      	add	r0, sp, #104	; 0x68
 80a07d6:	f003 fd84 	bl	80a42e2 <_ZN6StringC1Efi>
 80a07da:	a91a      	add	r1, sp, #104	; 0x68
 80a07dc:	4648      	mov	r0, r9
 80a07de:	f003 fdd0 	bl	80a4382 <_ZplRK15StringSumHelperRK6String>
 80a07e2:	6801      	ldr	r1, [r0, #0]
 80a07e4:	4628      	mov	r0, r5
 80a07e6:	e6db      	b.n	80a05a0 <_Z11stringParsePci+0x130>
              DEBUGPORT.print("did not receive enough power data");
 80a07e8:	f004 fa90 	bl	80a4d0c <_Z16_fetch_usbserialv>
 80a07ec:	493d      	ldr	r1, [pc, #244]	; (80a08e4 <_Z11stringParsePci+0x474>)
 80a07ee:	e703      	b.n	80a05f8 <_Z11stringParsePci+0x188>
          if(buflen>4)
 80a07f0:	2e04      	cmp	r6, #4
 80a07f2:	dd1c      	ble.n	80a082e <_Z11stringParsePci+0x3be>
              Energy[Charger-1] = bytesToFloat(buf[i+2], buf[i+3], buf[i+4], buf[i+5]);
 80a07f4:	78e2      	ldrb	r2, [r4, #3]
 80a07f6:	78a1      	ldrb	r1, [r4, #2]
 80a07f8:	7923      	ldrb	r3, [r4, #4]
    *((unsigned char *)(&output) + 3) = b0;
 80a07fa:	7860      	ldrb	r0, [r4, #1]
    *((unsigned char *)(&output) + 1) = b2;
 80a07fc:	f88d 2069 	strb.w	r2, [sp, #105]	; 0x69
    *((unsigned char *)(&output) + 2) = b1;
 80a0800:	f88d 106a 	strb.w	r1, [sp, #106]	; 0x6a
    *((unsigned char *)(&output) + 3) = b0;
 80a0804:	f88d 006b 	strb.w	r0, [sp, #107]	; 0x6b
    *((unsigned char *)(&output) + 0) = b3;
 80a0808:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
              Energy[Charger-1] = bytesToFloat(buf[i+2], buf[i+3], buf[i+4], buf[i+5]);
 80a080c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80a080e:	4d36      	ldr	r5, [pc, #216]	; (80a08e8 <_Z11stringParsePci+0x478>)
 80a0810:	f107 39ff 	add.w	r9, r7, #4294967295
 80a0814:	f845 3029 	str.w	r3, [r5, r9, lsl #2]
              DEBUGPORT.print("Energy: ");
 80a0818:	f004 fa78 	bl	80a4d0c <_Z16_fetch_usbserialv>
 80a081c:	4933      	ldr	r1, [pc, #204]	; (80a08ec <_Z11stringParsePci+0x47c>)
 80a081e:	f003 fe37 	bl	80a4490 <_ZN5Print5printEPKc>
              DEBUGPORT.print(Energy[Charger-1],4);
 80a0822:	f004 fa73 	bl	80a4d0c <_Z16_fetch_usbserialv>
 80a0826:	2204      	movs	r2, #4
 80a0828:	f855 1029 	ldr.w	r1, [r5, r9, lsl #2]
 80a082c:	e775      	b.n	80a071a <_Z11stringParsePci+0x2aa>
              DEBUGPORT.print("did not receive enough energy data");
 80a082e:	f004 fa6d 	bl	80a4d0c <_Z16_fetch_usbserialv>
 80a0832:	492f      	ldr	r1, [pc, #188]	; (80a08f0 <_Z11stringParsePci+0x480>)
 80a0834:	e6e0      	b.n	80a05f8 <_Z11stringParsePci+0x188>
          if(buflen>4)
 80a0836:	2e04      	cmp	r6, #4
 80a0838:	f77f aedb 	ble.w	80a05f2 <_Z11stringParsePci+0x182>
              if(bytesArrToFloatArr(&buf[i+2], 12, VoltageArr,3))
 80a083c:	1ca8      	adds	r0, r5, #2
 80a083e:	2303      	movs	r3, #3
 80a0840:	210c      	movs	r1, #12
 80a0842:	aa03      	add	r2, sp, #12
 80a0844:	f7ff fdf2 	bl	80a042c <_Z18bytesArrToFloatArrPcjPfj>
 80a0848:	4d2a      	ldr	r5, [pc, #168]	; (80a08f4 <_Z11stringParsePci+0x484>)
 80a084a:	f107 39ff 	add.w	r9, r7, #4294967295
 80a084e:	b148      	cbz	r0, 80a0864 <_Z11stringParsePci+0x3f4>
                    LineVoltage[Charger-1][i]=VoltageArr[i];
 80a0850:	230c      	movs	r3, #12
 80a0852:	fb03 f309 	mul.w	r3, r3, r9
 80a0856:	9903      	ldr	r1, [sp, #12]
 80a0858:	18ea      	adds	r2, r5, r3
 80a085a:	50e9      	str	r1, [r5, r3]
 80a085c:	9b04      	ldr	r3, [sp, #16]
 80a085e:	6053      	str	r3, [r2, #4]
 80a0860:	9b05      	ldr	r3, [sp, #20]
 80a0862:	6093      	str	r3, [r2, #8]
              DEBUGPORT.print("Voltage: "+String(LineVoltage[Charger-1][0],4)+" "+String(LineVoltage[Charger-1][1],4)+" "+String(LineVoltage[Charger-1][2],4));
 80a0864:	f004 fa52 	bl	80a4d0c <_Z16_fetch_usbserialv>
 80a0868:	4923      	ldr	r1, [pc, #140]	; (80a08f8 <_Z11stringParsePci+0x488>)
 80a086a:	4682      	mov	sl, r0
 80a086c:	a812      	add	r0, sp, #72	; 0x48
 80a086e:	f003 fc9d 	bl	80a41ac <_ZN6StringC1EPKc>
 80a0872:	230c      	movs	r3, #12
 80a0874:	fb03 f309 	mul.w	r3, r3, r9
 80a0878:	2204      	movs	r2, #4
 80a087a:	58e9      	ldr	r1, [r5, r3]
 80a087c:	a80e      	add	r0, sp, #56	; 0x38
 80a087e:	eb05 0903 	add.w	r9, r5, r3
 80a0882:	f003 fd2e 	bl	80a42e2 <_ZN6StringC1Efi>
 80a0886:	a90e      	add	r1, sp, #56	; 0x38
 80a0888:	a812      	add	r0, sp, #72	; 0x48
 80a088a:	f003 fd7a 	bl	80a4382 <_ZplRK15StringSumHelperRK6String>
 80a088e:	4914      	ldr	r1, [pc, #80]	; (80a08e0 <_Z11stringParsePci+0x470>)
 80a0890:	f003 fd83 	bl	80a439a <_ZplRK15StringSumHelperPKc>
 80a0894:	4605      	mov	r5, r0
 80a0896:	2204      	movs	r2, #4
 80a0898:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80a089c:	a816      	add	r0, sp, #88	; 0x58
 80a089e:	f003 fd20 	bl	80a42e2 <_ZN6StringC1Efi>
 80a08a2:	4628      	mov	r0, r5
 80a08a4:	a916      	add	r1, sp, #88	; 0x58
 80a08a6:	f003 fd6c 	bl	80a4382 <_ZplRK15StringSumHelperRK6String>
 80a08aa:	490d      	ldr	r1, [pc, #52]	; (80a08e0 <_Z11stringParsePci+0x470>)
 80a08ac:	f003 fd75 	bl	80a439a <_ZplRK15StringSumHelperPKc>
 80a08b0:	4605      	mov	r5, r0
 80a08b2:	2204      	movs	r2, #4
 80a08b4:	f8d9 1008 	ldr.w	r1, [r9, #8]
 80a08b8:	a81a      	add	r0, sp, #104	; 0x68
 80a08ba:	f003 fd12 	bl	80a42e2 <_ZN6StringC1Efi>
 80a08be:	a91a      	add	r1, sp, #104	; 0x68
 80a08c0:	4628      	mov	r0, r5
 80a08c2:	f003 fd5e 	bl	80a4382 <_ZplRK15StringSumHelperRK6String>
 80a08c6:	6801      	ldr	r1, [r0, #0]
 80a08c8:	4650      	mov	r0, sl
 80a08ca:	e669      	b.n	80a05a0 <_Z11stringParsePci+0x130>
  String cmdValue;
 80a08cc:	a806      	add	r0, sp, #24
 80a08ce:	f003 fc23 	bl	80a4118 <_ZN6StringD1Ev>
  }
  //Test only
  //Current[0][0] = 3.0;
  //Current[1][0] = 4.0;
  return Charger;
}
 80a08d2:	4638      	mov	r0, r7
 80a08d4:	b01f      	add	sp, #124	; 0x7c
 80a08d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a08da:	bf00      	nop
 80a08dc:	080a81ad 	.word	0x080a81ad
 80a08e0:	080a8127 	.word	0x080a8127
 80a08e4:	080a81b5 	.word	0x080a81b5
 80a08e8:	200002bc 	.word	0x200002bc
 80a08ec:	080a81d7 	.word	0x080a81d7
 80a08f0:	080a81e0 	.word	0x080a81e0
 80a08f4:	200002d4 	.word	0x200002d4
 80a08f8:	080a811f 	.word	0x080a811f
 80a08fc:	20000308 	.word	0x20000308

080a0900 <_Z16readSerialOlimexv>:

/*!
	Function to read from Olimex serial port and run stringParse()
	Returns the last charger socket it received data from.
*/
int readSerialOlimex() {
 80a0900:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a0904:	2500      	movs	r5, #0
 80a0906:	270a      	movs	r7, #10
  for(int k=0;k<10;k++){
  if (Serial1.available()) {
    input = Serial1.read();
    //DEBUGPORT.print(input,HEX);
    //DEBUGPORT.print(" ");
    if (bufpos<BUFSIZE)
 80a0908:	4c1a      	ldr	r4, [pc, #104]	; (80a0974 <_Z16readSerialOlimexv+0x74>)
    {
        bufpos=0;
        DEBUGPORT.print("loopread>\tSerial Read Error!");
    }
    if (input == '\n') { // we hebben een regel binnen, tot aan \n   //  0x0A
      Charger = stringParse(buff, bufpos);
 80a090a:	f8df 806c 	ldr.w	r8, [pc, #108]	; 80a0978 <_Z16readSerialOlimexv+0x78>
  if (Serial1.available()) {
 80a090e:	f004 faaf 	bl	80a4e70 <_Z22__fetch_global_Serial1v>
 80a0912:	6803      	ldr	r3, [r0, #0]
 80a0914:	691b      	ldr	r3, [r3, #16]
 80a0916:	4798      	blx	r3
 80a0918:	b1f0      	cbz	r0, 80a0958 <_Z16readSerialOlimexv+0x58>
    input = Serial1.read();
 80a091a:	f004 faa9 	bl	80a4e70 <_Z22__fetch_global_Serial1v>
 80a091e:	6803      	ldr	r3, [r0, #0]
 80a0920:	695b      	ldr	r3, [r3, #20]
 80a0922:	4798      	blx	r3
    if (bufpos<BUFSIZE)
 80a0924:	6823      	ldr	r3, [r4, #0]
    input = Serial1.read();
 80a0926:	b2c6      	uxtb	r6, r0
    if (bufpos<BUFSIZE)
 80a0928:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 80a092c:	da19      	bge.n	80a0962 <_Z16readSerialOlimexv+0x62>
        buff[bufpos] = input;
 80a092e:	f808 6003 	strb.w	r6, [r8, r3]
        bufpos++;    
 80a0932:	3301      	adds	r3, #1
 80a0934:	6023      	str	r3, [r4, #0]
    if (input == '\n') { // we hebben een regel binnen, tot aan \n   //  0x0A
 80a0936:	2e0a      	cmp	r6, #10
 80a0938:	d10e      	bne.n	80a0958 <_Z16readSerialOlimexv+0x58>
      Charger = stringParse(buff, bufpos);
 80a093a:	6821      	ldr	r1, [r4, #0]
 80a093c:	4640      	mov	r0, r8
 80a093e:	f7ff fd97 	bl	80a0470 <_Z11stringParsePci>
      //Maak de buffer leeg
      for (int i=0; i<BUFSIZE; i++)
 80a0942:	2300      	movs	r3, #0
      Charger = stringParse(buff, bufpos);
 80a0944:	4605      	mov	r5, r0
      { buff[i] = 0;}
 80a0946:	461a      	mov	r2, r3
 80a0948:	490b      	ldr	r1, [pc, #44]	; (80a0978 <_Z16readSerialOlimexv+0x78>)
      for (int i=0; i<BUFSIZE; i++)
 80a094a:	3301      	adds	r3, #1
 80a094c:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
      { buff[i] = 0;}
 80a0950:	f801 2b01 	strb.w	r2, [r1], #1
      for (int i=0; i<BUFSIZE; i++)
 80a0954:	d1f9      	bne.n	80a094a <_Z16readSerialOlimexv+0x4a>
      bufpos = 0;
 80a0956:	6022      	str	r2, [r4, #0]
  for(int k=0;k<10;k++){
 80a0958:	3f01      	subs	r7, #1
 80a095a:	d1d8      	bne.n	80a090e <_Z16readSerialOlimexv+0xe>
    }
  }
}
return Charger;
}
 80a095c:	4628      	mov	r0, r5
 80a095e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        bufpos=0;
 80a0962:	2300      	movs	r3, #0
 80a0964:	6023      	str	r3, [r4, #0]
        DEBUGPORT.print("loopread>\tSerial Read Error!");
 80a0966:	f004 f9d1 	bl	80a4d0c <_Z16_fetch_usbserialv>
 80a096a:	4904      	ldr	r1, [pc, #16]	; (80a097c <_Z16readSerialOlimexv+0x7c>)
 80a096c:	f003 fd90 	bl	80a4490 <_ZN5Print5printEPKc>
 80a0970:	e7e1      	b.n	80a0936 <_Z16readSerialOlimexv+0x36>
 80a0972:	bf00      	nop
 80a0974:	200004b4 	.word	0x200004b4
 80a0978:	20000354 	.word	0x20000354
 80a097c:	080a8203 	.word	0x080a8203

080a0980 <_ZN10JsonWriter11startObjectEv>:
	bool startObject() { return startObjectOrArray('{', '}'); };
 80a0980:	227d      	movs	r2, #125	; 0x7d
 80a0982:	217b      	movs	r1, #123	; 0x7b
 80a0984:	f002 bb0d 	b.w	80a2fa2 <_ZN10JsonWriter18startObjectOrArrayEcc>

080a0988 <_Z17maxCurrentC1_testj>:
    byte olimexMessage[4] = {0xFE, 1, setPoint, 0xFF};
 80a0988:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
int maxCurrentC1_test(unsigned int setPoint) {
 80a098c:	b570      	push	{r4, r5, r6, lr}
 80a098e:	b08e      	sub	sp, #56	; 0x38
    byte olimexMessage[4] = {0xFE, 1, setPoint, 0xFF};
 80a0990:	f8ad 3004 	strh.w	r3, [sp, #4]
 80a0994:	23ff      	movs	r3, #255	; 0xff
 80a0996:	2806      	cmp	r0, #6
 80a0998:	bf38      	it	cc
 80a099a:	2006      	movcc	r0, #6
 80a099c:	f88d 3007 	strb.w	r3, [sp, #7]
    if (TESTCASE) {
 80a09a0:	4b2c      	ldr	r3, [pc, #176]	; (80a0a54 <_Z17maxCurrentC1_testj+0xcc>)
 80a09a2:	4604      	mov	r4, r0
 80a09a4:	781b      	ldrb	r3, [r3, #0]
    byte olimexMessage[4] = {0xFE, 1, setPoint, 0xFF};
 80a09a6:	f88d 0006 	strb.w	r0, [sp, #6]
    if (TESTCASE) {
 80a09aa:	2b00      	cmp	r3, #0
 80a09ac:	d050      	beq.n	80a0a50 <_Z17maxCurrentC1_testj+0xc8>
        Serial1.write(olimexMessage,4);
 80a09ae:	f004 fa5f 	bl	80a4e70 <_Z22__fetch_global_Serial1v>
 80a09b2:	2204      	movs	r2, #4
 80a09b4:	6803      	ldr	r3, [r0, #0]
 80a09b6:	eb0d 0102 	add.w	r1, sp, r2
 80a09ba:	68db      	ldr	r3, [r3, #12]
 80a09bc:	4798      	blx	r3
        DEBUGPORT.println("maxCurrentC"+String(CHARGEROFFSET+1)+">\tNew setpoint set at "+String(setPoint)+" Amps.");
 80a09be:	f004 f9a5 	bl	80a4d0c <_Z16_fetch_usbserialv>
 80a09c2:	4925      	ldr	r1, [pc, #148]	; (80a0a58 <_Z17maxCurrentC1_testj+0xd0>)
 80a09c4:	4605      	mov	r5, r0
 80a09c6:	a806      	add	r0, sp, #24
 80a09c8:	f003 fbf0 	bl	80a41ac <_ZN6StringC1EPKc>
 80a09cc:	220a      	movs	r2, #10
 80a09ce:	2101      	movs	r1, #1
 80a09d0:	a802      	add	r0, sp, #8
 80a09d2:	f003 fc60 	bl	80a4296 <_ZN6StringC1Eih>
 80a09d6:	a902      	add	r1, sp, #8
 80a09d8:	a806      	add	r0, sp, #24
 80a09da:	f003 fcd2 	bl	80a4382 <_ZplRK15StringSumHelperRK6String>
 80a09de:	491f      	ldr	r1, [pc, #124]	; (80a0a5c <_Z17maxCurrentC1_testj+0xd4>)
 80a09e0:	f003 fcdb 	bl	80a439a <_ZplRK15StringSumHelperPKc>
 80a09e4:	4606      	mov	r6, r0
 80a09e6:	220a      	movs	r2, #10
 80a09e8:	4621      	mov	r1, r4
 80a09ea:	a80a      	add	r0, sp, #40	; 0x28
 80a09ec:	f003 fc66 	bl	80a42bc <_ZN6StringC1Ejh>
 80a09f0:	a90a      	add	r1, sp, #40	; 0x28
 80a09f2:	4630      	mov	r0, r6
 80a09f4:	f003 fcc5 	bl	80a4382 <_ZplRK15StringSumHelperRK6String>
 80a09f8:	4919      	ldr	r1, [pc, #100]	; (80a0a60 <_Z17maxCurrentC1_testj+0xd8>)
 80a09fa:	f003 fcce 	bl	80a439a <_ZplRK15StringSumHelperPKc>
 80a09fe:	6801      	ldr	r1, [r0, #0]
 80a0a00:	4628      	mov	r0, r5
 80a0a02:	f003 fd58 	bl	80a44b6 <_ZN5Print7printlnEPKc>
 80a0a06:	a80a      	add	r0, sp, #40	; 0x28
 80a0a08:	f003 fb86 	bl	80a4118 <_ZN6StringD1Ev>
 80a0a0c:	a802      	add	r0, sp, #8
 80a0a0e:	f003 fb83 	bl	80a4118 <_ZN6StringD1Ev>
class StringSumHelper : public String
 80a0a12:	a806      	add	r0, sp, #24
 80a0a14:	f003 fb80 	bl	80a4118 <_ZN6StringD1Ev>
        String topic_str = "HANevse/photonMaxC";
 80a0a18:	4912      	ldr	r1, [pc, #72]	; (80a0a64 <_Z17maxCurrentC1_testj+0xdc>)
 80a0a1a:	a806      	add	r0, sp, #24
 80a0a1c:	f003 fbc6 	bl	80a41ac <_ZN6StringC1EPKc>
        topic_str.concat(CHARGEROFFSET+1);
 80a0a20:	2101      	movs	r1, #1
 80a0a22:	a806      	add	r0, sp, #24
 80a0a24:	f003 fc9c 	bl	80a4360 <_ZN6String6concatEi>
        operator const char*() const { return c_str(); }
 80a0a28:	9d06      	ldr	r5, [sp, #24]
        client.publish(topic_str, String(setPoint)); 
 80a0a2a:	220a      	movs	r2, #10
 80a0a2c:	4621      	mov	r1, r4
 80a0a2e:	a80a      	add	r0, sp, #40	; 0x28
 80a0a30:	f003 fc44 	bl	80a42bc <_ZN6StringC1Ejh>
 80a0a34:	4629      	mov	r1, r5
 80a0a36:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80a0a38:	480b      	ldr	r0, [pc, #44]	; (80a0a68 <_Z17maxCurrentC1_testj+0xe0>)
 80a0a3a:	f001 fe0a 	bl	80a2652 <_ZN4MQTT7publishEPKcS1_>
 80a0a3e:	a80a      	add	r0, sp, #40	; 0x28
 80a0a40:	f003 fb6a 	bl	80a4118 <_ZN6StringD1Ev>
        String topic_str = "HANevse/photonMaxC";
 80a0a44:	a806      	add	r0, sp, #24
 80a0a46:	f003 fb67 	bl	80a4118 <_ZN6StringD1Ev>
        return 0;
 80a0a4a:	2000      	movs	r0, #0
}
 80a0a4c:	b00e      	add	sp, #56	; 0x38
 80a0a4e:	bd70      	pop	{r4, r5, r6, pc}
    return 1;
 80a0a50:	2001      	movs	r0, #1
 80a0a52:	e7fb      	b.n	80a0a4c <_Z17maxCurrentC1_testj+0xc4>
 80a0a54:	20000330 	.word	0x20000330
 80a0a58:	080a80b8 	.word	0x080a80b8
 80a0a5c:	080a80c4 	.word	0x080a80c4
 80a0a60:	080a80db 	.word	0x080a80db
 80a0a64:	080a8220 	.word	0x080a8220
 80a0a68:	200004b8 	.word	0x200004b8

080a0a6c <_Z17maxCurrentC2_testj>:
    byte olimexMessage[4] = {0xFE,2,setPoint,0xFF};
 80a0a6c:	f240 23fe 	movw	r3, #766	; 0x2fe
int maxCurrentC2_test(unsigned int setPoint) {
 80a0a70:	b570      	push	{r4, r5, r6, lr}
 80a0a72:	b08e      	sub	sp, #56	; 0x38
    byte olimexMessage[4] = {0xFE,2,setPoint,0xFF};
 80a0a74:	f8ad 3004 	strh.w	r3, [sp, #4]
 80a0a78:	23ff      	movs	r3, #255	; 0xff
 80a0a7a:	2806      	cmp	r0, #6
 80a0a7c:	bf38      	it	cc
 80a0a7e:	2006      	movcc	r0, #6
 80a0a80:	f88d 3007 	strb.w	r3, [sp, #7]
    if (TESTCASE) {
 80a0a84:	4b2c      	ldr	r3, [pc, #176]	; (80a0b38 <_Z17maxCurrentC2_testj+0xcc>)
 80a0a86:	4604      	mov	r4, r0
 80a0a88:	781b      	ldrb	r3, [r3, #0]
    byte olimexMessage[4] = {0xFE,2,setPoint,0xFF};
 80a0a8a:	f88d 0006 	strb.w	r0, [sp, #6]
    if (TESTCASE) {
 80a0a8e:	2b00      	cmp	r3, #0
 80a0a90:	d050      	beq.n	80a0b34 <_Z17maxCurrentC2_testj+0xc8>
        Serial1.write(olimexMessage,4);
 80a0a92:	f004 f9ed 	bl	80a4e70 <_Z22__fetch_global_Serial1v>
 80a0a96:	2204      	movs	r2, #4
 80a0a98:	6803      	ldr	r3, [r0, #0]
 80a0a9a:	eb0d 0102 	add.w	r1, sp, r2
 80a0a9e:	68db      	ldr	r3, [r3, #12]
 80a0aa0:	4798      	blx	r3
        DEBUGPORT.println("maxCurrentC"+String(CHARGEROFFSET+2)+">\tNew setpoint set at "+String(setPoint)+" Amps.");
 80a0aa2:	f004 f933 	bl	80a4d0c <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
 80a0aa6:	4925      	ldr	r1, [pc, #148]	; (80a0b3c <_Z17maxCurrentC2_testj+0xd0>)
 80a0aa8:	4605      	mov	r5, r0
 80a0aaa:	a806      	add	r0, sp, #24
 80a0aac:	f003 fb7e 	bl	80a41ac <_ZN6StringC1EPKc>
 80a0ab0:	220a      	movs	r2, #10
 80a0ab2:	2102      	movs	r1, #2
 80a0ab4:	a802      	add	r0, sp, #8
 80a0ab6:	f003 fbee 	bl	80a4296 <_ZN6StringC1Eih>
 80a0aba:	a902      	add	r1, sp, #8
 80a0abc:	a806      	add	r0, sp, #24
 80a0abe:	f003 fc60 	bl	80a4382 <_ZplRK15StringSumHelperRK6String>
 80a0ac2:	491f      	ldr	r1, [pc, #124]	; (80a0b40 <_Z17maxCurrentC2_testj+0xd4>)
 80a0ac4:	f003 fc69 	bl	80a439a <_ZplRK15StringSumHelperPKc>
 80a0ac8:	4606      	mov	r6, r0
 80a0aca:	220a      	movs	r2, #10
 80a0acc:	4621      	mov	r1, r4
 80a0ace:	a80a      	add	r0, sp, #40	; 0x28
 80a0ad0:	f003 fbf4 	bl	80a42bc <_ZN6StringC1Ejh>
 80a0ad4:	a90a      	add	r1, sp, #40	; 0x28
 80a0ad6:	4630      	mov	r0, r6
 80a0ad8:	f003 fc53 	bl	80a4382 <_ZplRK15StringSumHelperRK6String>
 80a0adc:	4919      	ldr	r1, [pc, #100]	; (80a0b44 <_Z17maxCurrentC2_testj+0xd8>)
 80a0ade:	f003 fc5c 	bl	80a439a <_ZplRK15StringSumHelperPKc>
 80a0ae2:	6801      	ldr	r1, [r0, #0]
 80a0ae4:	4628      	mov	r0, r5
 80a0ae6:	f003 fce6 	bl	80a44b6 <_ZN5Print7printlnEPKc>
 80a0aea:	a80a      	add	r0, sp, #40	; 0x28
 80a0aec:	f003 fb14 	bl	80a4118 <_ZN6StringD1Ev>
 80a0af0:	a802      	add	r0, sp, #8
 80a0af2:	f003 fb11 	bl	80a4118 <_ZN6StringD1Ev>
class StringSumHelper : public String
 80a0af6:	a806      	add	r0, sp, #24
 80a0af8:	f003 fb0e 	bl	80a4118 <_ZN6StringD1Ev>
        String topic_str = "HANevse/photonMaxC";
 80a0afc:	4912      	ldr	r1, [pc, #72]	; (80a0b48 <_Z17maxCurrentC2_testj+0xdc>)
 80a0afe:	a806      	add	r0, sp, #24
 80a0b00:	f003 fb54 	bl	80a41ac <_ZN6StringC1EPKc>
        topic_str.concat(CHARGEROFFSET+2);
 80a0b04:	2102      	movs	r1, #2
 80a0b06:	a806      	add	r0, sp, #24
 80a0b08:	f003 fc2a 	bl	80a4360 <_ZN6String6concatEi>
        operator const char*() const { return c_str(); }
 80a0b0c:	9d06      	ldr	r5, [sp, #24]
        client.publish(topic_str, String(setPoint)); 
 80a0b0e:	220a      	movs	r2, #10
 80a0b10:	4621      	mov	r1, r4
 80a0b12:	a80a      	add	r0, sp, #40	; 0x28
 80a0b14:	f003 fbd2 	bl	80a42bc <_ZN6StringC1Ejh>
 80a0b18:	4629      	mov	r1, r5
 80a0b1a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80a0b1c:	480b      	ldr	r0, [pc, #44]	; (80a0b4c <_Z17maxCurrentC2_testj+0xe0>)
 80a0b1e:	f001 fd98 	bl	80a2652 <_ZN4MQTT7publishEPKcS1_>
 80a0b22:	a80a      	add	r0, sp, #40	; 0x28
 80a0b24:	f003 faf8 	bl	80a4118 <_ZN6StringD1Ev>
        String topic_str = "HANevse/photonMaxC";
 80a0b28:	a806      	add	r0, sp, #24
 80a0b2a:	f003 faf5 	bl	80a4118 <_ZN6StringD1Ev>
        return 0;
 80a0b2e:	2000      	movs	r0, #0
}
 80a0b30:	b00e      	add	sp, #56	; 0x38
 80a0b32:	bd70      	pop	{r4, r5, r6, pc}
    return 1;
 80a0b34:	2001      	movs	r0, #1
 80a0b36:	e7fb      	b.n	80a0b30 <_Z17maxCurrentC2_testj+0xc4>
 80a0b38:	20000330 	.word	0x20000330
 80a0b3c:	080a80b8 	.word	0x080a80b8
 80a0b40:	080a80c4 	.word	0x080a80c4
 80a0b44:	080a80db 	.word	0x080a80db
 80a0b48:	080a8220 	.word	0x080a8220
 80a0b4c:	200004b8 	.word	0x200004b8

080a0b50 <_Z17getUserIdAtSocketi>:
    if (socket == 1+CHARGEROFFSET)
 80a0b50:	2901      	cmp	r1, #1
String getUserIdAtSocket(int socket) {
 80a0b52:	b510      	push	{r4, lr}
 80a0b54:	4604      	mov	r4, r0
    if (socket == 1+CHARGEROFFSET)
 80a0b56:	d104      	bne.n	80a0b62 <_Z17getUserIdAtSocketi+0x12>
        return UIDtagCharger1;
 80a0b58:	4906      	ldr	r1, [pc, #24]	; (80a0b74 <_Z17getUserIdAtSocketi+0x24>)
        return UIDtagCharger2;
 80a0b5a:	f003 fb66 	bl	80a422a <_ZN6StringC1ERKS_>
}
 80a0b5e:	4620      	mov	r0, r4
 80a0b60:	bd10      	pop	{r4, pc}
    if (socket == 2+CHARGEROFFSET)
 80a0b62:	2902      	cmp	r1, #2
 80a0b64:	d101      	bne.n	80a0b6a <_Z17getUserIdAtSocketi+0x1a>
        return UIDtagCharger2;
 80a0b66:	4904      	ldr	r1, [pc, #16]	; (80a0b78 <_Z17getUserIdAtSocketi+0x28>)
 80a0b68:	e7f7      	b.n	80a0b5a <_Z17getUserIdAtSocketi+0xa>
    return "00";
 80a0b6a:	4904      	ldr	r1, [pc, #16]	; (80a0b7c <_Z17getUserIdAtSocketi+0x2c>)
 80a0b6c:	f003 fb1e 	bl	80a41ac <_ZN6StringC1EPKc>
 80a0b70:	e7f5      	b.n	80a0b5e <_Z17getUserIdAtSocketi+0xe>
 80a0b72:	bf00      	nop
 80a0b74:	20000334 	.word	0x20000334
 80a0b78:	20000344 	.word	0x20000344
 80a0b7c:	080a8233 	.word	0x080a8233

080a0b80 <_Z18allowUser_callbackPhj>:
void allowUser_callback(byte* payload, unsigned int length) {
 80a0b80:	b5f0      	push	{r4, r5, r6, r7, lr}
    char payl[length+1];
 80a0b82:	f101 0308 	add.w	r3, r1, #8
void allowUser_callback(byte* payload, unsigned int length) {
 80a0b86:	b087      	sub	sp, #28
    char payl[length+1];
 80a0b88:	f023 0307 	bic.w	r3, r3, #7
    }
 80a0b8c:	466d      	mov	r5, sp
void allowUser_callback(byte* payload, unsigned int length) {
 80a0b8e:	af00      	add	r7, sp, #0
    char payl[length+1];
 80a0b90:	ebad 0d03 	sub.w	sp, sp, r3
void allowUser_callback(byte* payload, unsigned int length) {
 80a0b94:	460c      	mov	r4, r1
    memcpy(payl, payload, length);
 80a0b96:	460a      	mov	r2, r1
 80a0b98:	4601      	mov	r1, r0
 80a0b9a:	4668      	mov	r0, sp
 80a0b9c:	f005 ffe4 	bl	80a6b68 <memcpy>
    payl[length] = NULL;
 80a0ba0:	2300      	movs	r3, #0
    int port = (int) strtol(payl, &endchar, 10);
 80a0ba2:	220a      	movs	r2, #10
    payl[length] = NULL;
 80a0ba4:	f80d 3004 	strb.w	r3, [sp, r4]
    int port = (int) strtol(payl, &endchar, 10);
 80a0ba8:	1d39      	adds	r1, r7, #4
 80a0baa:	4668      	mov	r0, sp
 80a0bac:	f006 fe32 	bl	80a7814 <strtol>
 80a0bb0:	4604      	mov	r4, r0
    String topic_str = "HANevse/photonConverted/";
 80a0bb2:	4932      	ldr	r1, [pc, #200]	; (80a0c7c <_Z18allowUser_callbackPhj+0xfc>)
 80a0bb4:	f107 0008 	add.w	r0, r7, #8
 80a0bb8:	f003 faf8 	bl	80a41ac <_ZN6StringC1EPKc>
    topic_str.concat(port);
 80a0bbc:	4621      	mov	r1, r4
 80a0bbe:	f107 0008 	add.w	r0, r7, #8
 80a0bc2:	f003 fbcd 	bl	80a4360 <_ZN6String6concatEi>
    endchar = endchar + 1;
 80a0bc6:	6878      	ldr	r0, [r7, #4]
    if (port == (1 + CHARGEROFFSET))
 80a0bc8:	2c01      	cmp	r4, #1
    endchar = endchar + 1;
 80a0bca:	f100 0001 	add.w	r0, r0, #1
 80a0bce:	6078      	str	r0, [r7, #4]
    if (port == (1 + CHARGEROFFSET))
 80a0bd0:	d009      	beq.n	80a0be6 <_Z18allowUser_callbackPhj+0x66>
    else if (port == (2 + CHARGEROFFSET))
 80a0bd2:	2c02      	cmp	r4, #2
 80a0bd4:	d018      	beq.n	80a0c08 <_Z18allowUser_callbackPhj+0x88>
    String topic_str = "HANevse/photonConverted/";
 80a0bd6:	f107 0008 	add.w	r0, r7, #8
 80a0bda:	f003 fa9d 	bl	80a4118 <_ZN6StringD1Ev>
 80a0bde:	46ad      	mov	sp, r5
}
 80a0be0:	371c      	adds	r7, #28
 80a0be2:	46bd      	mov	sp, r7
 80a0be4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        port = AUTHENTICATION_CAR1;
 80a0be6:	2605      	movs	r6, #5
    int retPi = (int) strtol(endchar, &endchar, 10);
 80a0be8:	220a      	movs	r2, #10
 80a0bea:	1d39      	adds	r1, r7, #4
 80a0bec:	f006 fe12 	bl	80a7814 <strtol>
    Pianswer = retPi; 
 80a0bf0:	4b23      	ldr	r3, [pc, #140]	; (80a0c80 <_Z18allowUser_callbackPhj+0x100>)
    int socketNr = port - 1 - CHARGEROFFSET;
 80a0bf2:	3c01      	subs	r4, #1
    Pianswer = retPi; 
 80a0bf4:	8018      	strh	r0, [r3, #0]
    switch(retPi) {
 80a0bf6:	3801      	subs	r0, #1
 80a0bf8:	2807      	cmp	r0, #7
 80a0bfa:	d83c      	bhi.n	80a0c76 <_Z18allowUser_callbackPhj+0xf6>
 80a0bfc:	e8df f000 	tbb	[pc, r0]
 80a0c00:	23211f06 	.word	0x23211f06
 80a0c04:	39373533 	.word	0x39373533
        port = AUTHENTICATION_CAR2;
 80a0c08:	2606      	movs	r6, #6
 80a0c0a:	e7ed      	b.n	80a0be8 <_Z18allowUser_callbackPhj+0x68>
            digitalWrite(port, HIGH);
 80a0c0c:	2101      	movs	r1, #1
 80a0c0e:	4630      	mov	r0, r6
 80a0c10:	f004 fb83 	bl	80a531a <digitalWrite>
            LatestStartTime[socketNr] = Time.now();
 80a0c14:	f003 fe9f 	bl	80a4956 <_ZN9TimeClass3nowEv>
 80a0c18:	4b1a      	ldr	r3, [pc, #104]	; (80a0c84 <_Z18allowUser_callbackPhj+0x104>)
 80a0c1a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
            if (socketNr == 0)
 80a0c1e:	b94c      	cbnz	r4, 80a0c34 <_Z18allowUser_callbackPhj+0xb4>
                UIDtagCharger1=latestUID1;
 80a0c20:	4919      	ldr	r1, [pc, #100]	; (80a0c88 <_Z18allowUser_callbackPhj+0x108>)
 80a0c22:	481a      	ldr	r0, [pc, #104]	; (80a0c8c <_Z18allowUser_callbackPhj+0x10c>)
                UIDtagCharger2=latestUID2;
 80a0c24:	f003 faf2 	bl	80a420c <_ZN6StringaSERKS_>
            client.publish(topic_str, "successful start new charge");
 80a0c28:	4a19      	ldr	r2, [pc, #100]	; (80a0c90 <_Z18allowUser_callbackPhj+0x110>)
            client.publish(topic_str, "ERROR: unknown scenario");
 80a0c2a:	68b9      	ldr	r1, [r7, #8]
 80a0c2c:	4819      	ldr	r0, [pc, #100]	; (80a0c94 <_Z18allowUser_callbackPhj+0x114>)
 80a0c2e:	f001 fd10 	bl	80a2652 <_ZN4MQTT7publishEPKcS1_>
 80a0c32:	e7d0      	b.n	80a0bd6 <_Z18allowUser_callbackPhj+0x56>
            else if (socketNr == 1)
 80a0c34:	2c01      	cmp	r4, #1
 80a0c36:	d1f7      	bne.n	80a0c28 <_Z18allowUser_callbackPhj+0xa8>
                UIDtagCharger2=latestUID2;
 80a0c38:	4917      	ldr	r1, [pc, #92]	; (80a0c98 <_Z18allowUser_callbackPhj+0x118>)
 80a0c3a:	4818      	ldr	r0, [pc, #96]	; (80a0c9c <_Z18allowUser_callbackPhj+0x11c>)
 80a0c3c:	e7f2      	b.n	80a0c24 <_Z18allowUser_callbackPhj+0xa4>
            client.publish(topic_str, "charger is free, but card was swiped in the last 20 sec");
 80a0c3e:	4a18      	ldr	r2, [pc, #96]	; (80a0ca0 <_Z18allowUser_callbackPhj+0x120>)
 80a0c40:	e7f3      	b.n	80a0c2a <_Z18allowUser_callbackPhj+0xaa>
            client.publish(topic_str, "charger is occupied by another user");
 80a0c42:	4a18      	ldr	r2, [pc, #96]	; (80a0ca4 <_Z18allowUser_callbackPhj+0x124>)
 80a0c44:	e7f1      	b.n	80a0c2a <_Z18allowUser_callbackPhj+0xaa>
            digitalWrite(port, LOW);
 80a0c46:	2100      	movs	r1, #0
 80a0c48:	4630      	mov	r0, r6
 80a0c4a:	f004 fb66 	bl	80a531a <digitalWrite>
            if (socketNr == 0)
 80a0c4e:	b92c      	cbnz	r4, 80a0c5c <_Z18allowUser_callbackPhj+0xdc>
                UIDtagCharger1="No ID";
 80a0c50:	4915      	ldr	r1, [pc, #84]	; (80a0ca8 <_Z18allowUser_callbackPhj+0x128>)
 80a0c52:	480e      	ldr	r0, [pc, #56]	; (80a0c8c <_Z18allowUser_callbackPhj+0x10c>)
                UIDtagCharger2="No ID";
 80a0c54:	f003 fafc 	bl	80a4250 <_ZN6StringaSEPKc>
            client.publish(topic_str, "successful stop charge session");
 80a0c58:	4a14      	ldr	r2, [pc, #80]	; (80a0cac <_Z18allowUser_callbackPhj+0x12c>)
 80a0c5a:	e7e6      	b.n	80a0c2a <_Z18allowUser_callbackPhj+0xaa>
            else if (socketNr == 1)
 80a0c5c:	2c01      	cmp	r4, #1
 80a0c5e:	d1fb      	bne.n	80a0c58 <_Z18allowUser_callbackPhj+0xd8>
                UIDtagCharger2="No ID";
 80a0c60:	4911      	ldr	r1, [pc, #68]	; (80a0ca8 <_Z18allowUser_callbackPhj+0x128>)
 80a0c62:	480e      	ldr	r0, [pc, #56]	; (80a0c9c <_Z18allowUser_callbackPhj+0x11c>)
 80a0c64:	e7f6      	b.n	80a0c54 <_Z18allowUser_callbackPhj+0xd4>
            client.publish(topic_str, "consecutive RFID swipe within 20s of new charge start");
 80a0c66:	4a12      	ldr	r2, [pc, #72]	; (80a0cb0 <_Z18allowUser_callbackPhj+0x130>)
 80a0c68:	e7df      	b.n	80a0c2a <_Z18allowUser_callbackPhj+0xaa>
            client.publish(topic_str, "you are already charging at another charger");
 80a0c6a:	4a12      	ldr	r2, [pc, #72]	; (80a0cb4 <_Z18allowUser_callbackPhj+0x134>)
 80a0c6c:	e7dd      	b.n	80a0c2a <_Z18allowUser_callbackPhj+0xaa>
            client.publish(topic_str, "you are in the userlist, but not verified by admin");
 80a0c6e:	4a12      	ldr	r2, [pc, #72]	; (80a0cb8 <_Z18allowUser_callbackPhj+0x138>)
 80a0c70:	e7db      	b.n	80a0c2a <_Z18allowUser_callbackPhj+0xaa>
            client.publish(topic_str, "successful RFID read, but you are not in the userlist");
 80a0c72:	4a12      	ldr	r2, [pc, #72]	; (80a0cbc <_Z18allowUser_callbackPhj+0x13c>)
 80a0c74:	e7d9      	b.n	80a0c2a <_Z18allowUser_callbackPhj+0xaa>
            client.publish(topic_str, "ERROR: unknown scenario");
 80a0c76:	4a12      	ldr	r2, [pc, #72]	; (80a0cc0 <_Z18allowUser_callbackPhj+0x140>)
 80a0c78:	e7d7      	b.n	80a0c2a <_Z18allowUser_callbackPhj+0xaa>
 80a0c7a:	bf00      	nop
 80a0c7c:	080a8236 	.word	0x080a8236
 80a0c80:	20000304 	.word	0x20000304
 80a0c84:	200002cc 	.word	0x200002cc
 80a0c88:	20000524 	.word	0x20000524
 80a0c8c:	20000334 	.word	0x20000334
 80a0c90:	080a824f 	.word	0x080a824f
 80a0c94:	200004b8 	.word	0x200004b8
 80a0c98:	20000534 	.word	0x20000534
 80a0c9c:	20000344 	.word	0x20000344
 80a0ca0:	080a826b 	.word	0x080a826b
 80a0ca4:	080a82a3 	.word	0x080a82a3
 80a0ca8:	080a82c7 	.word	0x080a82c7
 80a0cac:	080a82cd 	.word	0x080a82cd
 80a0cb0:	080a82ec 	.word	0x080a82ec
 80a0cb4:	080a8322 	.word	0x080a8322
 80a0cb8:	080a834e 	.word	0x080a834e
 80a0cbc:	080a8381 	.word	0x080a8381
 80a0cc0:	080a83b7 	.word	0x080a83b7

080a0cc4 <_Z9reconnectv>:
        }
    }
}

//! Function to reconnect to MQTT server if not connected and subscribe to needed topics
void reconnect(void) {
 80a0cc4:	b570      	push	{r4, r5, r6, lr}
    while (!client.isConnected()) {
 80a0cc6:	4c22      	ldr	r4, [pc, #136]	; (80a0d50 <_Z9reconnectv+0x8c>)
        DEBUGPORT.print("MQTT>\tConnecting to MQTT broker...");
 80a0cc8:	4d22      	ldr	r5, [pc, #136]	; (80a0d54 <_Z9reconnectv+0x90>)
        if (CHARGEROFFSET==0) {
            if (client.connect("EV-Photon1")) {
 80a0cca:	4e23      	ldr	r6, [pc, #140]	; (80a0d58 <_Z9reconnectv+0x94>)
    while (!client.isConnected()) {
 80a0ccc:	4820      	ldr	r0, [pc, #128]	; (80a0d50 <_Z9reconnectv+0x8c>)
 80a0cce:	f001 fb52 	bl	80a2376 <_ZN4MQTT11isConnectedEv>
 80a0cd2:	2800      	cmp	r0, #0
 80a0cd4:	d13a      	bne.n	80a0d4c <_Z9reconnectv+0x88>
        DEBUGPORT.print("MQTT>\tConnecting to MQTT broker...");
 80a0cd6:	f004 f819 	bl	80a4d0c <_Z16_fetch_usbserialv>
 80a0cda:	4629      	mov	r1, r5
 80a0cdc:	f003 fbd8 	bl	80a4490 <_ZN5Print5printEPKc>
            if (client.connect("EV-Photon1")) {
 80a0ce0:	4631      	mov	r1, r6
 80a0ce2:	4620      	mov	r0, r4
 80a0ce4:	f001 fc30 	bl	80a2548 <_ZN4MQTT7connectEPKc>
 80a0ce8:	b308      	cbz	r0, 80a0d2e <_Z9reconnectv+0x6a>
                DEBUGPORT.println("MQTT>\tConnected");
 80a0cea:	f004 f80f 	bl	80a4d0c <_Z16_fetch_usbserialv>
 80a0cee:	491b      	ldr	r1, [pc, #108]	; (80a0d5c <_Z9reconnectv+0x98>)
 80a0cf0:	f003 fbe1 	bl	80a44b6 <_ZN5Print7printlnEPKc>
                //client.subscribe("HANevse/#", client.QOS2);
                client.subscribe("HANevse/energyMeter"); //+
 80a0cf4:	4620      	mov	r0, r4
 80a0cf6:	491a      	ldr	r1, [pc, #104]	; (80a0d60 <_Z9reconnectv+0x9c>)
 80a0cf8:	f001 fe22 	bl	80a2940 <_ZN4MQTT9subscribeEPKc>
                client.subscribe("HANevse/allowUser");
 80a0cfc:	4620      	mov	r0, r4
 80a0cfe:	4919      	ldr	r1, [pc, #100]	; (80a0d64 <_Z9reconnectv+0xa0>)
 80a0d00:	f001 fe1e 	bl	80a2940 <_ZN4MQTT9subscribeEPKc>
                
                client.subscribe("HANevse/resetOlimex");
 80a0d04:	4620      	mov	r0, r4
 80a0d06:	4918      	ldr	r1, [pc, #96]	; (80a0d68 <_Z9reconnectv+0xa4>)
 80a0d08:	f001 fe1a 	bl	80a2940 <_ZN4MQTT9subscribeEPKc>
                client.subscribe("HANevse/resetPhoton");
 80a0d0c:	4620      	mov	r0, r4
 80a0d0e:	4917      	ldr	r1, [pc, #92]	; (80a0d6c <_Z9reconnectv+0xa8>)
 80a0d10:	f001 fe16 	bl	80a2940 <_ZN4MQTT9subscribeEPKc>
                client.subscribe("HANevse/switchTest1");
 80a0d14:	4620      	mov	r0, r4
 80a0d16:	4916      	ldr	r1, [pc, #88]	; (80a0d70 <_Z9reconnectv+0xac>)
 80a0d18:	f001 fe12 	bl	80a2940 <_ZN4MQTT9subscribeEPKc>
                client.subscribe("HANevse/maxC1");
 80a0d1c:	4620      	mov	r0, r4
 80a0d1e:	4915      	ldr	r1, [pc, #84]	; (80a0d74 <_Z9reconnectv+0xb0>)
 80a0d20:	f001 fe0e 	bl	80a2940 <_ZN4MQTT9subscribeEPKc>
                client.subscribe("HANevse/maxC2");
 80a0d24:	4620      	mov	r0, r4
 80a0d26:	4914      	ldr	r1, [pc, #80]	; (80a0d78 <_Z9reconnectv+0xb4>)
 80a0d28:	f001 fe0a 	bl	80a2940 <_ZN4MQTT9subscribeEPKc>
 80a0d2c:	e7ce      	b.n	80a0ccc <_Z9reconnectv+0x8>
            }
            else {
                DEBUGPORT.println("MQTT>\tConnection failed");
 80a0d2e:	f003 ffed 	bl	80a4d0c <_Z16_fetch_usbserialv>
 80a0d32:	4912      	ldr	r1, [pc, #72]	; (80a0d7c <_Z9reconnectv+0xb8>)
 80a0d34:	f003 fbbf 	bl	80a44b6 <_ZN5Print7printlnEPKc>
                DEBUGPORT.println("MQTT>\tRetrying...");
 80a0d38:	f003 ffe8 	bl	80a4d0c <_Z16_fetch_usbserialv>
 80a0d3c:	4910      	ldr	r1, [pc, #64]	; (80a0d80 <_Z9reconnectv+0xbc>)
 80a0d3e:	f003 fbba 	bl	80a44b6 <_ZN5Print7printlnEPKc>
                delay(10000);
 80a0d42:	f242 7010 	movw	r0, #10000	; 0x2710
 80a0d46:	f003 fe21 	bl	80a498c <delay>
 80a0d4a:	e7bf      	b.n	80a0ccc <_Z9reconnectv+0x8>
                DEBUGPORT.println("MQTT>\tRetrying...");
                delay(10000);
            }
        }
    }
}
 80a0d4c:	bd70      	pop	{r4, r5, r6, pc}
 80a0d4e:	bf00      	nop
 80a0d50:	200004b8 	.word	0x200004b8
 80a0d54:	080a83cf 	.word	0x080a83cf
 80a0d58:	080a83f2 	.word	0x080a83f2
 80a0d5c:	080a83fd 	.word	0x080a83fd
 80a0d60:	080a840d 	.word	0x080a840d
 80a0d64:	080a8421 	.word	0x080a8421
 80a0d68:	080a8433 	.word	0x080a8433
 80a0d6c:	080a8447 	.word	0x080a8447
 80a0d70:	080a845b 	.word	0x080a845b
 80a0d74:	080a846f 	.word	0x080a846f
 80a0d78:	080a847d 	.word	0x080a847d
 80a0d7c:	080a848b 	.word	0x080a848b
 80a0d80:	080a84a3 	.word	0x080a84a3

080a0d84 <_ZN16JsonWriterStaticILj512EEC1Ev>:
public:
	explicit JsonWriterStatic() : JsonWriter(staticBuffer, BUFFER_SIZE) {};
 80a0d84:	b510      	push	{r4, lr}
 80a0d86:	4604      	mov	r4, r0
 80a0d88:	f44f 7200 	mov.w	r2, #512	; 0x200
 80a0d8c:	f100 0130 	add.w	r1, r0, #48	; 0x30
 80a0d90:	f002 f80c 	bl	80a2dac <_ZN10JsonWriterC1EPcj>
 80a0d94:	4b01      	ldr	r3, [pc, #4]	; (80a0d9c <_ZN16JsonWriterStaticILj512EEC1Ev+0x18>)
 80a0d96:	4620      	mov	r0, r4
 80a0d98:	6023      	str	r3, [r4, #0]
 80a0d9a:	bd10      	pop	{r4, pc}
 80a0d9c:	080a8630 	.word	0x080a8630

080a0da0 <_ZN10JsonWriter14insertKeyValueIfEEvPKcT_>:
	void insertKeyValue(const char *key, T value) {
 80a0da0:	b570      	push	{r4, r5, r6, lr}
 80a0da2:	4604      	mov	r4, r0
 80a0da4:	460e      	mov	r6, r1
 80a0da6:	4615      	mov	r5, r2
		insertCheckSeparator();
 80a0da8:	f002 f8f0 	bl	80a2f8c <_ZN10JsonWriter20insertCheckSeparatorEv>
	void insertValue(const char *value) { insertString(value, true); }
 80a0dac:	4631      	mov	r1, r6
 80a0dae:	4620      	mov	r0, r4
 80a0db0:	2201      	movs	r2, #1
 80a0db2:	f002 f859 	bl	80a2e68 <_ZN10JsonWriter12insertStringEPKcb>
		insertChar(':');
 80a0db6:	4620      	mov	r0, r4
 80a0db8:	213a      	movs	r1, #58	; 0x3a
 80a0dba:	f002 f809 	bl	80a2dd0 <_ZN10JsonWriter10insertCharEc>
		insertValue(value);
 80a0dbe:	4629      	mov	r1, r5
 80a0dc0:	4620      	mov	r0, r4
	}
 80a0dc2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		insertValue(value);
 80a0dc6:	f002 b905 	b.w	80a2fd4 <_ZN10JsonWriter11insertValueEf>

080a0dca <_ZN10JsonWriter14insertKeyValueI6StringEEvPKcT_>:
	void insertKeyValue(const char *key, T value) {
 80a0dca:	b570      	push	{r4, r5, r6, lr}
 80a0dcc:	4604      	mov	r4, r0
 80a0dce:	460e      	mov	r6, r1
 80a0dd0:	4615      	mov	r5, r2
		insertCheckSeparator();
 80a0dd2:	f002 f8db 	bl	80a2f8c <_ZN10JsonWriter20insertCheckSeparatorEv>
	void insertValue(const char *value) { insertString(value, true); }
 80a0dd6:	2201      	movs	r2, #1
 80a0dd8:	4631      	mov	r1, r6
 80a0dda:	4620      	mov	r0, r4
 80a0ddc:	f002 f844 	bl	80a2e68 <_ZN10JsonWriter12insertStringEPKcb>
		insertChar(':');
 80a0de0:	4620      	mov	r0, r4
 80a0de2:	213a      	movs	r1, #58	; 0x3a
 80a0de4:	f001 fff4 	bl	80a2dd0 <_ZN10JsonWriter10insertCharEc>
	void insertValue(const String &value) { insertString(value.c_str(), true); }
 80a0de8:	4620      	mov	r0, r4
 80a0dea:	6829      	ldr	r1, [r5, #0]
 80a0dec:	2201      	movs	r2, #1
	}
 80a0dee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	void insertValue(const String &value) { insertString(value.c_str(), true); }
 80a0df2:	f002 b839 	b.w	80a2e68 <_ZN10JsonWriter12insertStringEPKcb>
	...

080a0df8 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>:
	void insertKeyValue(const char *key, T value) {
 80a0df8:	b570      	push	{r4, r5, r6, lr}
 80a0dfa:	4604      	mov	r4, r0
 80a0dfc:	460e      	mov	r6, r1
 80a0dfe:	4615      	mov	r5, r2
		insertCheckSeparator();
 80a0e00:	f002 f8c4 	bl	80a2f8c <_ZN10JsonWriter20insertCheckSeparatorEv>
	void insertValue(const char *value) { insertString(value, true); }
 80a0e04:	2201      	movs	r2, #1
 80a0e06:	4631      	mov	r1, r6
 80a0e08:	4620      	mov	r0, r4
 80a0e0a:	f002 f82d 	bl	80a2e68 <_ZN10JsonWriter12insertStringEPKcb>
		insertChar(':');
 80a0e0e:	4620      	mov	r0, r4
 80a0e10:	213a      	movs	r1, #58	; 0x3a
 80a0e12:	f001 ffdd 	bl	80a2dd0 <_ZN10JsonWriter10insertCharEc>
	void insertValue(int value) { insertsprintf("%d", value); }
 80a0e16:	462a      	mov	r2, r5
 80a0e18:	4620      	mov	r0, r4
	}
 80a0e1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	void insertValue(int value) { insertsprintf("%d", value); }
 80a0e1e:	4901      	ldr	r1, [pc, #4]	; (80a0e24 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_+0x2c>)
 80a0e20:	f002 b815 	b.w	80a2e4e <_ZN10JsonWriter13insertsprintfEPKcz>
 80a0e24:	080a8a53 	.word	0x080a8a53

080a0e28 <_Z15add_Measurementfffffffmi6String>:
void add_Measurement(float phaseVoltageL1, float phaseVoltageL2, float phaseVoltageL3, float currentL1, float currentL2, float currentL3, /* float Power, float Energy,*/ float Frequency, unsigned long Timestamp, int socketId=0, String userId="00") {
 80a0e28:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a0e2a:	4607      	mov	r7, r0
 80a0e2c:	460e      	mov	r6, r1
 80a0e2e:	4615      	mov	r5, r2
 80a0e30:	461c      	mov	r4, r3
 80a0e32:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
    JsonWriterStatic<512> jsonMessage;     
 80a0e36:	a804      	add	r0, sp, #16
 80a0e38:	f7ff ffa4 	bl	80a0d84 <_ZN16JsonWriterStaticILj512EEC1Ev>
	 * @brief Start a new object
	 *
	 * @param jw The JsonWriter object to insert the object into
	 */
	JsonWriterAutoObject(JsonWriter *jw) : jw(jw) {
		jw->startObject();
 80a0e3c:	a804      	add	r0, sp, #16
 80a0e3e:	f7ff fd9f 	bl	80a0980 <_ZN10JsonWriter11startObjectEv>
        jsonMessage.insertKeyValue("V1", phaseVoltageL1);
 80a0e42:	463a      	mov	r2, r7
 80a0e44:	492b      	ldr	r1, [pc, #172]	; (80a0ef4 <_Z15add_Measurementfffffffmi6String+0xcc>)
 80a0e46:	a804      	add	r0, sp, #16
 80a0e48:	f7ff ffaa 	bl	80a0da0 <_ZN10JsonWriter14insertKeyValueIfEEvPKcT_>
        jsonMessage.insertKeyValue("V2", phaseVoltageL2);
 80a0e4c:	4632      	mov	r2, r6
 80a0e4e:	492a      	ldr	r1, [pc, #168]	; (80a0ef8 <_Z15add_Measurementfffffffmi6String+0xd0>)
 80a0e50:	a804      	add	r0, sp, #16
 80a0e52:	f7ff ffa5 	bl	80a0da0 <_ZN10JsonWriter14insertKeyValueIfEEvPKcT_>
        jsonMessage.insertKeyValue("V3", phaseVoltageL3);
 80a0e56:	462a      	mov	r2, r5
 80a0e58:	4928      	ldr	r1, [pc, #160]	; (80a0efc <_Z15add_Measurementfffffffmi6String+0xd4>)
 80a0e5a:	a804      	add	r0, sp, #16
 80a0e5c:	f7ff ffa0 	bl	80a0da0 <_ZN10JsonWriter14insertKeyValueIfEEvPKcT_>
        jsonMessage.insertKeyValue("I1", currentL1);
 80a0e60:	4622      	mov	r2, r4
 80a0e62:	4927      	ldr	r1, [pc, #156]	; (80a0f00 <_Z15add_Measurementfffffffmi6String+0xd8>)
 80a0e64:	a804      	add	r0, sp, #16
 80a0e66:	f7ff ff9b 	bl	80a0da0 <_ZN10JsonWriter14insertKeyValueIfEEvPKcT_>
        jsonMessage.insertKeyValue("I2", currentL2);
 80a0e6a:	9a96      	ldr	r2, [sp, #600]	; 0x258
 80a0e6c:	4925      	ldr	r1, [pc, #148]	; (80a0f04 <_Z15add_Measurementfffffffmi6String+0xdc>)
 80a0e6e:	a804      	add	r0, sp, #16
 80a0e70:	f7ff ff96 	bl	80a0da0 <_ZN10JsonWriter14insertKeyValueIfEEvPKcT_>
        jsonMessage.insertKeyValue("I3", currentL3);
 80a0e74:	9a97      	ldr	r2, [sp, #604]	; 0x25c
 80a0e76:	4924      	ldr	r1, [pc, #144]	; (80a0f08 <_Z15add_Measurementfffffffmi6String+0xe0>)
 80a0e78:	a804      	add	r0, sp, #16
 80a0e7a:	f7ff ff91 	bl	80a0da0 <_ZN10JsonWriter14insertKeyValueIfEEvPKcT_>
        jsonMessage.insertKeyValue("F", Frequency);
 80a0e7e:	9a98      	ldr	r2, [sp, #608]	; 0x260
 80a0e80:	4922      	ldr	r1, [pc, #136]	; (80a0f0c <_Z15add_Measurementfffffffmi6String+0xe4>)
 80a0e82:	a804      	add	r0, sp, #16
 80a0e84:	f7ff ff8c 	bl	80a0da0 <_ZN10JsonWriter14insertKeyValueIfEEvPKcT_>
		jsonMessage.insertKeyValue("UserID", userId);
 80a0e88:	999b      	ldr	r1, [sp, #620]	; 0x26c
 80a0e8a:	4668      	mov	r0, sp
 80a0e8c:	f003 f9cd 	bl	80a422a <_ZN6StringC1ERKS_>
 80a0e90:	466a      	mov	r2, sp
 80a0e92:	491f      	ldr	r1, [pc, #124]	; (80a0f10 <_Z15add_Measurementfffffffmi6String+0xe8>)
 80a0e94:	a804      	add	r0, sp, #16
 80a0e96:	f7ff ff98 	bl	80a0dca <_ZN10JsonWriter14insertKeyValueI6StringEEvPKcT_>
 80a0e9a:	4668      	mov	r0, sp
 80a0e9c:	f003 f93c 	bl	80a4118 <_ZN6StringD1Ev>
		jsonMessage.insertKeyValue("SocketID", socketId);
 80a0ea0:	9a9a      	ldr	r2, [sp, #616]	; 0x268
 80a0ea2:	491c      	ldr	r1, [pc, #112]	; (80a0f14 <_Z15add_Measurementfffffffmi6String+0xec>)
 80a0ea4:	a804      	add	r0, sp, #16
 80a0ea6:	f7ff ffa7 	bl	80a0df8 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
		insertCheckSeparator();
 80a0eaa:	a804      	add	r0, sp, #16
 80a0eac:	f002 f86e 	bl	80a2f8c <_ZN10JsonWriter20insertCheckSeparatorEv>
	void insertValue(const char *value) { insertString(value, true); }
 80a0eb0:	2201      	movs	r2, #1
 80a0eb2:	4919      	ldr	r1, [pc, #100]	; (80a0f18 <_Z15add_Measurementfffffffmi6String+0xf0>)
 80a0eb4:	a804      	add	r0, sp, #16
 80a0eb6:	f001 ffd7 	bl	80a2e68 <_ZN10JsonWriter12insertStringEPKcb>
		insertChar(':');
 80a0eba:	213a      	movs	r1, #58	; 0x3a
 80a0ebc:	a804      	add	r0, sp, #16
 80a0ebe:	f001 ff87 	bl	80a2dd0 <_ZN10JsonWriter10insertCharEc>
	void insertValue(unsigned long value) { insertsprintf("%lu", value); }
 80a0ec2:	9a99      	ldr	r2, [sp, #612]	; 0x264
 80a0ec4:	4915      	ldr	r1, [pc, #84]	; (80a0f1c <_Z15add_Measurementfffffffmi6String+0xf4>)
 80a0ec6:	a804      	add	r0, sp, #16
 80a0ec8:	f001 ffc1 	bl	80a2e4e <_ZN10JsonWriter13insertsprintfEPKcz>

	/**
	 * @brief End the object
	 */
	~JsonWriterAutoObject() {
		jw->finishObjectOrArray();
 80a0ecc:	a804      	add	r0, sp, #16
 80a0ece:	f001 ff8e 	bl	80a2dee <_ZN10JsonWriter19finishObjectOrArrayEv>
 80a0ed2:	2403      	movs	r4, #3
		if(client.publish("HANevse/photonMeasure", jsonMessage.getBuffer())) {
 80a0ed4:	4d12      	ldr	r5, [pc, #72]	; (80a0f20 <_Z15add_Measurementfffffffmi6String+0xf8>)
 80a0ed6:	4e13      	ldr	r6, [pc, #76]	; (80a0f24 <_Z15add_Measurementfffffffmi6String+0xfc>)
 80a0ed8:	4629      	mov	r1, r5
 80a0eda:	4630      	mov	r0, r6
 80a0edc:	9a05      	ldr	r2, [sp, #20]
 80a0ede:	f001 fbb8 	bl	80a2652 <_ZN4MQTT7publishEPKcS1_>
 80a0ee2:	b908      	cbnz	r0, 80a0ee8 <_Z15add_Measurementfffffffmi6String+0xc0>
	for(int i=0; i<3; i++) {
 80a0ee4:	3c01      	subs	r4, #1
 80a0ee6:	d1f7      	bne.n	80a0ed8 <_Z15add_Measurementfffffffmi6String+0xb0>
    JsonWriterStatic<512> jsonMessage;     
 80a0ee8:	a804      	add	r0, sp, #16
 80a0eea:	f7ff f9d9 	bl	80a02a0 <_ZN16JsonWriterStaticILj512EED1Ev>
}
 80a0eee:	f50d 7d11 	add.w	sp, sp, #580	; 0x244
 80a0ef2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a0ef4:	080a84b5 	.word	0x080a84b5
 80a0ef8:	080a84b8 	.word	0x080a84b8
 80a0efc:	080a84bb 	.word	0x080a84bb
 80a0f00:	080a84be 	.word	0x080a84be
 80a0f04:	080a84c1 	.word	0x080a84c1
 80a0f08:	080a84c4 	.word	0x080a84c4
 80a0f0c:	080a84c7 	.word	0x080a84c7
 80a0f10:	080a84c9 	.word	0x080a84c9
 80a0f14:	080a84d0 	.word	0x080a84d0
 80a0f18:	080a852d 	.word	0x080a852d
 80a0f1c:	080a84d9 	.word	0x080a84d9
 80a0f20:	080a84dd 	.word	0x080a84dd
 80a0f24:	200004b8 	.word	0x200004b8

080a0f28 <_ZN10JsonWriter14insertKeyValueIlEEvPKcT_>:
	void insertKeyValue(const char *key, T value) {
 80a0f28:	b570      	push	{r4, r5, r6, lr}
 80a0f2a:	4604      	mov	r4, r0
 80a0f2c:	460e      	mov	r6, r1
 80a0f2e:	4615      	mov	r5, r2
		insertCheckSeparator();
 80a0f30:	f002 f82c 	bl	80a2f8c <_ZN10JsonWriter20insertCheckSeparatorEv>
	void insertValue(const char *value) { insertString(value, true); }
 80a0f34:	2201      	movs	r2, #1
 80a0f36:	4631      	mov	r1, r6
 80a0f38:	4620      	mov	r0, r4
 80a0f3a:	f001 ff95 	bl	80a2e68 <_ZN10JsonWriter12insertStringEPKcb>
		insertChar(':');
 80a0f3e:	4620      	mov	r0, r4
 80a0f40:	213a      	movs	r1, #58	; 0x3a
 80a0f42:	f001 ff45 	bl	80a2dd0 <_ZN10JsonWriter10insertCharEc>
	void insertValue(long value) { insertsprintf("%ld", value); }
 80a0f46:	462a      	mov	r2, r5
 80a0f48:	4620      	mov	r0, r4
	}
 80a0f4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	void insertValue(long value) { insertsprintf("%ld", value); }
 80a0f4e:	4901      	ldr	r1, [pc, #4]	; (80a0f54 <_ZN10JsonWriter14insertKeyValueIlEEvPKcT_+0x2c>)
 80a0f50:	f001 bf7d 	b.w	80a2e4e <_ZN10JsonWriter13insertsprintfEPKcz>
 80a0f54:	080a84f3 	.word	0x080a84f3

080a0f58 <_Z12readRFIDCardi>:
bool readRFIDCard(int Charger) {
 80a0f58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    Pianswer = 0;
 80a0f5c:	2400      	movs	r4, #0
 80a0f5e:	4b81      	ldr	r3, [pc, #516]	; (80a1164 <_Z12readRFIDCardi+0x20c>)
    if(Charger==1+CHARGEROFFSET)
 80a0f60:	2801      	cmp	r0, #1
bool readRFIDCard(int Charger) {
 80a0f62:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
    Pianswer = 0;
 80a0f66:	801c      	strh	r4, [r3, #0]
    if(Charger==1+CHARGEROFFSET)
 80a0f68:	f040 808d 	bne.w	80a1086 <_Z12readRFIDCardi+0x12e>
        if ( ! mfrc522_Charger1.PICC_IsNewCardPresent()) 
 80a0f6c:	487e      	ldr	r0, [pc, #504]	; (80a1168 <_Z12readRFIDCardi+0x210>)
 80a0f6e:	f000 ff7f 	bl	80a1e70 <_ZN7MFRC52221PICC_IsNewCardPresentEv>
 80a0f72:	4e7d      	ldr	r6, [pc, #500]	; (80a1168 <_Z12readRFIDCardi+0x210>)
 80a0f74:	2800      	cmp	r0, #0
 80a0f76:	f000 80f0 	beq.w	80a115a <_Z12readRFIDCardi+0x202>
        if ( ! mfrc522_Charger1.PICC_ReadCardSerial()) 
 80a0f7a:	4630      	mov	r0, r6
 80a0f7c:	f001 f8d6 	bl	80a212c <_ZN7MFRC52219PICC_ReadCardSerialEv>
 80a0f80:	2800      	cmp	r0, #0
 80a0f82:	f000 80ea 	beq.w	80a115a <_Z12readRFIDCardi+0x202>
        DEBUGPORT.print("readCard>\tUID tag on charger1:");
 80a0f86:	f003 fec1 	bl	80a4d0c <_Z16_fetch_usbserialv>
 80a0f8a:	4978      	ldr	r1, [pc, #480]	; (80a116c <_Z12readRFIDCardi+0x214>)
 80a0f8c:	f003 fa80 	bl	80a4490 <_ZN5Print5printEPKc>
        String content = "";        
 80a0f90:	4668      	mov	r0, sp
 80a0f92:	4977      	ldr	r1, [pc, #476]	; (80a1170 <_Z12readRFIDCardi+0x218>)
 80a0f94:	f003 f90a 	bl	80a41ac <_ZN6StringC1EPKc>
            DEBUGPORT.print(mfrc522_Charger1.uid.uidByte[i] < 0x10 ? " 0" : " ");
 80a0f98:	f8df 8200 	ldr.w	r8, [pc, #512]	; 80a119c <_Z12readRFIDCardi+0x244>
 80a0f9c:	4f75      	ldr	r7, [pc, #468]	; (80a1174 <_Z12readRFIDCardi+0x21c>)
        for (byte i = 0; i < mfrc522_Charger1.uid.size; i++) 
 80a0f9e:	7833      	ldrb	r3, [r6, #0]
 80a0fa0:	b2e5      	uxtb	r5, r4
 80a0fa2:	42ab      	cmp	r3, r5
 80a0fa4:	d92c      	bls.n	80a1000 <_Z12readRFIDCardi+0xa8>
            DEBUGPORT.print(mfrc522_Charger1.uid.uidByte[i] < 0x10 ? " 0" : " ");
 80a0fa6:	4435      	add	r5, r6
 80a0fa8:	f003 feb0 	bl	80a4d0c <_Z16_fetch_usbserialv>
 80a0fac:	7869      	ldrb	r1, [r5, #1]
 80a0fae:	3401      	adds	r4, #1
 80a0fb0:	290f      	cmp	r1, #15
 80a0fb2:	bf94      	ite	ls
 80a0fb4:	4641      	movls	r1, r8
 80a0fb6:	4639      	movhi	r1, r7
 80a0fb8:	f003 fa6a 	bl	80a4490 <_ZN5Print5printEPKc>
            DEBUGPORT.print(mfrc522_Charger1.uid.uidByte[i], HEX);
 80a0fbc:	f003 fea6 	bl	80a4d0c <_Z16_fetch_usbserialv>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80a0fc0:	2210      	movs	r2, #16
 80a0fc2:	7869      	ldrb	r1, [r5, #1]
 80a0fc4:	f003 fa81 	bl	80a44ca <_ZN5Print11printNumberEmh>
            content.concat(String(mfrc522_Charger1.uid.uidByte[i] < 0x10 ? " 0" : " "));
 80a0fc8:	7869      	ldrb	r1, [r5, #1]
 80a0fca:	a808      	add	r0, sp, #32
 80a0fcc:	290f      	cmp	r1, #15
 80a0fce:	bf94      	ite	ls
 80a0fd0:	4641      	movls	r1, r8
 80a0fd2:	4639      	movhi	r1, r7
 80a0fd4:	f003 f8ea 	bl	80a41ac <_ZN6StringC1EPKc>
 80a0fd8:	a908      	add	r1, sp, #32
 80a0fda:	4668      	mov	r0, sp
 80a0fdc:	f003 f9af 	bl	80a433e <_ZN6String6concatERKS_>
 80a0fe0:	a808      	add	r0, sp, #32
 80a0fe2:	f003 f899 	bl	80a4118 <_ZN6StringD1Ev>
            content.concat(String(mfrc522_Charger1.uid.uidByte[i], HEX));
 80a0fe6:	2210      	movs	r2, #16
 80a0fe8:	7869      	ldrb	r1, [r5, #1]
 80a0fea:	a808      	add	r0, sp, #32
 80a0fec:	f003 f941 	bl	80a4272 <_ZN6StringC1Ehh>
 80a0ff0:	a908      	add	r1, sp, #32
 80a0ff2:	4668      	mov	r0, sp
 80a0ff4:	f003 f9a3 	bl	80a433e <_ZN6String6concatERKS_>
 80a0ff8:	a808      	add	r0, sp, #32
 80a0ffa:	f003 f88d 	bl	80a4118 <_ZN6StringD1Ev>
        for (byte i = 0; i < mfrc522_Charger1.uid.size; i++) 
 80a0ffe:	e7ce      	b.n	80a0f9e <_Z12readRFIDCardi+0x46>
        JsonWriterStatic<512> jsonMessage;
 80a1000:	a808      	add	r0, sp, #32
 80a1002:	f7ff febf 	bl	80a0d84 <_ZN16JsonWriterStaticILj512EEC1Ev>
        latestUID1=content.substring(1);
 80a1006:	2201      	movs	r2, #1
 80a1008:	4669      	mov	r1, sp
 80a100a:	a804      	add	r0, sp, #16
 80a100c:	f003 fa0e 	bl	80a442c <_ZNK6String9substringEj>
 80a1010:	a904      	add	r1, sp, #16
 80a1012:	4859      	ldr	r0, [pc, #356]	; (80a1178 <_Z12readRFIDCardi+0x220>)
 80a1014:	f003 f914 	bl	80a4240 <_ZN6StringaSEOS_>
 80a1018:	a804      	add	r0, sp, #16
 80a101a:	f003 f87d 	bl	80a4118 <_ZN6StringD1Ev>
		jw->startObject();
 80a101e:	a808      	add	r0, sp, #32
 80a1020:	f7ff fcae 	bl	80a0980 <_ZN10JsonWriter11startObjectEv>
		jsonMessage.insertKeyValue("UserId", latestUID1);
 80a1024:	4954      	ldr	r1, [pc, #336]	; (80a1178 <_Z12readRFIDCardi+0x220>)
 80a1026:	a804      	add	r0, sp, #16
 80a1028:	f003 f8ff 	bl	80a422a <_ZN6StringC1ERKS_>
 80a102c:	aa04      	add	r2, sp, #16
 80a102e:	4953      	ldr	r1, [pc, #332]	; (80a117c <_Z12readRFIDCardi+0x224>)
 80a1030:	a808      	add	r0, sp, #32
 80a1032:	f7ff feca 	bl	80a0dca <_ZN10JsonWriter14insertKeyValueI6StringEEvPKcT_>
 80a1036:	a804      	add	r0, sp, #16
 80a1038:	f003 f86e 	bl	80a4118 <_ZN6StringD1Ev>
        jsonMessage.insertKeyValue("Charger", Charger);
 80a103c:	2201      	movs	r2, #1
        jsonMessage.insertKeyValue("Charger", Charger);
 80a103e:	4950      	ldr	r1, [pc, #320]	; (80a1180 <_Z12readRFIDCardi+0x228>)
 80a1040:	a808      	add	r0, sp, #32
 80a1042:	f7ff fed9 	bl	80a0df8 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
		jsonMessage.insertKeyValue("StartTime", Time.now());
 80a1046:	f003 fc86 	bl	80a4956 <_ZN9TimeClass3nowEv>
 80a104a:	494e      	ldr	r1, [pc, #312]	; (80a1184 <_Z12readRFIDCardi+0x22c>)
 80a104c:	4602      	mov	r2, r0
 80a104e:	a808      	add	r0, sp, #32
 80a1050:	f7ff ff6a 	bl	80a0f28 <_ZN10JsonWriter14insertKeyValueIlEEvPKcT_>
		jw->finishObjectOrArray();
 80a1054:	a808      	add	r0, sp, #32
 80a1056:	f001 feca 	bl	80a2dee <_ZN10JsonWriter19finishObjectOrArrayEv>
        client.publish("HANevse/updateUser", jsonMessage.getBuffer());
 80a105a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80a105c:	494a      	ldr	r1, [pc, #296]	; (80a1188 <_Z12readRFIDCardi+0x230>)
 80a105e:	484b      	ldr	r0, [pc, #300]	; (80a118c <_Z12readRFIDCardi+0x234>)
 80a1060:	f001 faf7 	bl	80a2652 <_ZN4MQTT7publishEPKcS1_>
        JsonWriterStatic<512> jsonMessage;
 80a1064:	a808      	add	r0, sp, #32
 80a1066:	f7ff f91b 	bl	80a02a0 <_ZN16JsonWriterStaticILj512EED1Ev>
        String content = "";        
 80a106a:	4668      	mov	r0, sp
 80a106c:	f003 f854 	bl	80a4118 <_ZN6StringD1Ev>
    DEBUGPORT.println("");
 80a1070:	f003 fe4c 	bl	80a4d0c <_Z16_fetch_usbserialv>
 80a1074:	493e      	ldr	r1, [pc, #248]	; (80a1170 <_Z12readRFIDCardi+0x218>)
 80a1076:	f003 fa1e 	bl	80a44b6 <_ZN5Print7printlnEPKc>
    delay(500);
 80a107a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a107e:	f003 fc85 	bl	80a498c <delay>
     return Authorized;
 80a1082:	2001      	movs	r0, #1
 80a1084:	e06a      	b.n	80a115c <_Z12readRFIDCardi+0x204>
    if(Charger==2+CHARGEROFFSET)
 80a1086:	2802      	cmp	r0, #2
 80a1088:	d1f2      	bne.n	80a1070 <_Z12readRFIDCardi+0x118>
        if ( ! mfrc522_Charger2.PICC_IsNewCardPresent()) 
 80a108a:	4841      	ldr	r0, [pc, #260]	; (80a1190 <_Z12readRFIDCardi+0x238>)
 80a108c:	f000 fef0 	bl	80a1e70 <_ZN7MFRC52221PICC_IsNewCardPresentEv>
 80a1090:	4e3f      	ldr	r6, [pc, #252]	; (80a1190 <_Z12readRFIDCardi+0x238>)
 80a1092:	2800      	cmp	r0, #0
 80a1094:	d061      	beq.n	80a115a <_Z12readRFIDCardi+0x202>
        if ( ! mfrc522_Charger2.PICC_ReadCardSerial()) 
 80a1096:	4630      	mov	r0, r6
 80a1098:	f001 f848 	bl	80a212c <_ZN7MFRC52219PICC_ReadCardSerialEv>
 80a109c:	2800      	cmp	r0, #0
 80a109e:	d05c      	beq.n	80a115a <_Z12readRFIDCardi+0x202>
        DEBUGPORT.print("readCard>\tUID tag on charger2:");
 80a10a0:	f003 fe34 	bl	80a4d0c <_Z16_fetch_usbserialv>
 80a10a4:	493b      	ldr	r1, [pc, #236]	; (80a1194 <_Z12readRFIDCardi+0x23c>)
 80a10a6:	f003 f9f3 	bl	80a4490 <_ZN5Print5printEPKc>
        String content = "";        
 80a10aa:	4668      	mov	r0, sp
 80a10ac:	4930      	ldr	r1, [pc, #192]	; (80a1170 <_Z12readRFIDCardi+0x218>)
 80a10ae:	f003 f87d 	bl	80a41ac <_ZN6StringC1EPKc>
            DEBUGPORT.print(mfrc522_Charger2.uid.uidByte[i] < 0x10 ? " 0" : " ");
 80a10b2:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 80a119c <_Z12readRFIDCardi+0x244>
 80a10b6:	4f2f      	ldr	r7, [pc, #188]	; (80a1174 <_Z12readRFIDCardi+0x21c>)
        for (byte i = 0; i < mfrc522_Charger2.uid.size; i++) 
 80a10b8:	7833      	ldrb	r3, [r6, #0]
 80a10ba:	b2e5      	uxtb	r5, r4
 80a10bc:	42ab      	cmp	r3, r5
 80a10be:	d92c      	bls.n	80a111a <_Z12readRFIDCardi+0x1c2>
            DEBUGPORT.print(mfrc522_Charger2.uid.uidByte[i] < 0x10 ? " 0" : " ");
 80a10c0:	4435      	add	r5, r6
 80a10c2:	f003 fe23 	bl	80a4d0c <_Z16_fetch_usbserialv>
 80a10c6:	7869      	ldrb	r1, [r5, #1]
 80a10c8:	3401      	adds	r4, #1
 80a10ca:	290f      	cmp	r1, #15
 80a10cc:	bf94      	ite	ls
 80a10ce:	4641      	movls	r1, r8
 80a10d0:	4639      	movhi	r1, r7
 80a10d2:	f003 f9dd 	bl	80a4490 <_ZN5Print5printEPKc>
            DEBUGPORT.print(mfrc522_Charger2.uid.uidByte[i], HEX);
 80a10d6:	f003 fe19 	bl	80a4d0c <_Z16_fetch_usbserialv>
 80a10da:	2210      	movs	r2, #16
 80a10dc:	7869      	ldrb	r1, [r5, #1]
 80a10de:	f003 f9f4 	bl	80a44ca <_ZN5Print11printNumberEmh>
            content.concat(String(mfrc522_Charger2.uid.uidByte[i] < 0x10 ? " 0" : " "));
 80a10e2:	7869      	ldrb	r1, [r5, #1]
 80a10e4:	a808      	add	r0, sp, #32
 80a10e6:	290f      	cmp	r1, #15
 80a10e8:	bf94      	ite	ls
 80a10ea:	4641      	movls	r1, r8
 80a10ec:	4639      	movhi	r1, r7
 80a10ee:	f003 f85d 	bl	80a41ac <_ZN6StringC1EPKc>
 80a10f2:	a908      	add	r1, sp, #32
 80a10f4:	4668      	mov	r0, sp
 80a10f6:	f003 f922 	bl	80a433e <_ZN6String6concatERKS_>
 80a10fa:	a808      	add	r0, sp, #32
 80a10fc:	f003 f80c 	bl	80a4118 <_ZN6StringD1Ev>
            content.concat(String(mfrc522_Charger2.uid.uidByte[i], HEX));
 80a1100:	2210      	movs	r2, #16
 80a1102:	7869      	ldrb	r1, [r5, #1]
 80a1104:	a808      	add	r0, sp, #32
 80a1106:	f003 f8b4 	bl	80a4272 <_ZN6StringC1Ehh>
 80a110a:	a908      	add	r1, sp, #32
 80a110c:	4668      	mov	r0, sp
 80a110e:	f003 f916 	bl	80a433e <_ZN6String6concatERKS_>
 80a1112:	a808      	add	r0, sp, #32
 80a1114:	f003 f800 	bl	80a4118 <_ZN6StringD1Ev>
        for (byte i = 0; i < mfrc522_Charger2.uid.size; i++) 
 80a1118:	e7ce      	b.n	80a10b8 <_Z12readRFIDCardi+0x160>
        latestUID2=content.substring(1);
 80a111a:	2201      	movs	r2, #1
 80a111c:	4669      	mov	r1, sp
 80a111e:	a808      	add	r0, sp, #32
 80a1120:	f003 f984 	bl	80a442c <_ZNK6String9substringEj>
 80a1124:	a908      	add	r1, sp, #32
 80a1126:	481c      	ldr	r0, [pc, #112]	; (80a1198 <_Z12readRFIDCardi+0x240>)
 80a1128:	f003 f88a 	bl	80a4240 <_ZN6StringaSEOS_>
 80a112c:	a808      	add	r0, sp, #32
 80a112e:	f002 fff3 	bl	80a4118 <_ZN6StringD1Ev>
        JsonWriterStatic<512> jsonMessage;
 80a1132:	a808      	add	r0, sp, #32
 80a1134:	f7ff fe26 	bl	80a0d84 <_ZN16JsonWriterStaticILj512EEC1Ev>
		jw->startObject();
 80a1138:	a808      	add	r0, sp, #32
 80a113a:	f7ff fc21 	bl	80a0980 <_ZN10JsonWriter11startObjectEv>
		jsonMessage.insertKeyValue("UserId", latestUID2);
 80a113e:	4916      	ldr	r1, [pc, #88]	; (80a1198 <_Z12readRFIDCardi+0x240>)
 80a1140:	a804      	add	r0, sp, #16
 80a1142:	f003 f872 	bl	80a422a <_ZN6StringC1ERKS_>
 80a1146:	aa04      	add	r2, sp, #16
 80a1148:	490c      	ldr	r1, [pc, #48]	; (80a117c <_Z12readRFIDCardi+0x224>)
 80a114a:	a808      	add	r0, sp, #32
 80a114c:	f7ff fe3d 	bl	80a0dca <_ZN10JsonWriter14insertKeyValueI6StringEEvPKcT_>
 80a1150:	a804      	add	r0, sp, #16
 80a1152:	f002 ffe1 	bl	80a4118 <_ZN6StringD1Ev>
        jsonMessage.insertKeyValue("Charger", Charger);
 80a1156:	2202      	movs	r2, #2
 80a1158:	e771      	b.n	80a103e <_Z12readRFIDCardi+0xe6>
            return false;
 80a115a:	2000      	movs	r0, #0
}
 80a115c:	f50d 7d14 	add.w	sp, sp, #592	; 0x250
 80a1160:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a1164:	20000304 	.word	0x20000304
 80a1168:	20000544 	.word	0x20000544
 80a116c:	080a84fa 	.word	0x080a84fa
 80a1170:	080a898c 	.word	0x080a898c
 80a1174:	080a8127 	.word	0x080a8127
 80a1178:	20000524 	.word	0x20000524
 80a117c:	080a8519 	.word	0x080a8519
 80a1180:	080a8520 	.word	0x080a8520
 80a1184:	080a8528 	.word	0x080a8528
 80a1188:	080a8532 	.word	0x080a8532
 80a118c:	200004b8 	.word	0x200004b8
 80a1190:	20000552 	.word	0x20000552
 80a1194:	080a8545 	.word	0x080a8545
 80a1198:	20000534 	.word	0x20000534
 80a119c:	080a84f7 	.word	0x080a84f7

080a11a0 <loop>:
	//RGB.control(true);
    Time.zone(1); //Dutch time zone
}

//! Main running function that executes all other functions; runs over 5times/second
void loop() {
 80a11a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a11a4:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a11a8:	f002 fbb2 	bl	80a3910 <spark_cloud_flag_connected>
    //Check the connection to the Particle server
    if (Particle.connected() == false) {
 80a11ac:	b908      	cbnz	r0, 80a11b2 <loop+0x12>
        spark_cloud_flag_connect();
 80a11ae:	f002 fba7 	bl	80a3900 <spark_cloud_flag_connect>
        Particle.connect();
    }
	//Check the connection to the MQTT broker and let client take care of messages in buffers
    if (client.isConnected()) {
 80a11b2:	4897      	ldr	r0, [pc, #604]	; (80a1410 <loop+0x270>)
 80a11b4:	f001 f8df 	bl	80a2376 <_ZN4MQTT11isConnectedEv>
 80a11b8:	2800      	cmp	r0, #0
 80a11ba:	f000 8125 	beq.w	80a1408 <loop+0x268>
        client.loop();
 80a11be:	4894      	ldr	r0, [pc, #592]	; (80a1410 <loop+0x270>)
 80a11c0:	f001 fa8e 	bl	80a26e0 <_ZN4MQTT4loopEv>
    }
    else reconnect();
    
    Particle.process();
 80a11c4:	f7ff f926 	bl	80a0414 <_ZN10CloudClass7processEv>
    //currentStr = String(CurrentList[0],1)+" "+String(CurrentList[1],1)+" "+String(CurrentList[2],1)+" "+String(CurrentList[3],1)+" "+String(CurrentList[4],1)+" "+String(CurrentList[5],1)+" "+String(CurrentList[6],1)+" "+String(CurrentList[7],1)+" "+String(CurrentList[8],1)+" "+String(CurrentList[9],1)+" "+String(CurrentList[10],1)+" "+String(CurrentList[11],1)+" "+String(CurrentList[12],1)+" "+String(CurrentList[13],1)+" "+String(CurrentList[14],1)+" "+String(CurrentList[15],1)+" "+String(CurrentList[16],1)+" "+String(CurrentList[17],1)+" "+String(CurrentList[18],1)+" "+String(CurrentList[19],1);
    
    //int Charger =1; //+
    
    //Read measurements from Olimex and save for which socket
    int Charger = readSerialOlimex() + CHARGEROFFSET;
 80a11c8:	f7ff fb9a 	bl	80a0900 <_Z16readSerialOlimexv>
 80a11cc:	4605      	mov	r5, r0
    Particle.process();
 80a11ce:	f7ff f921 	bl	80a0414 <_ZN10CloudClass7processEv>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a11d2:	f002 f975 	bl	80a34c0 <HAL_Timer_Get_Milli_Seconds>
	// 	DEBUGPORT.println(String(Current[1][0]+ Current[1][1]+ Current[1][2]));
    // }
    // counter++;

    // store new measurement value if it is received correctly from energymeter (via the Olimex).
    if(millis()>nextTime[handledCharger] && (Charger==1+CHARGEROFFSET || Charger==2+CHARGEROFFSET))
 80a11d6:	4c8f      	ldr	r4, [pc, #572]	; (80a1414 <loop+0x274>)
 80a11d8:	4f8f      	ldr	r7, [pc, #572]	; (80a1418 <loop+0x278>)
 80a11da:	7823      	ldrb	r3, [r4, #0]
 80a11dc:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 80a11e0:	4283      	cmp	r3, r0
 80a11e2:	d23f      	bcs.n	80a1264 <loop+0xc4>
 80a11e4:	3d01      	subs	r5, #1
 80a11e6:	2d01      	cmp	r5, #1
 80a11e8:	d83c      	bhi.n	80a1264 <loop+0xc4>
    {
        Particle.process();
 80a11ea:	f7ff f913 	bl	80a0414 <_ZN10CloudClass7processEv>
        int tempCharger = Charger;
        Charger = handledCharger + 1;
        //if(((activeCharger()==Charger) || (activeCharger() == 3)) && (getUserIdAtSocket(Charger)!="00"))
        //{
            //getUserIdAtSocket(Charger+CHARGEROFFSET);
            add_Measurement(PhaseVoltage[Charger-1][0], PhaseVoltage[Charger-1][1], PhaseVoltage[Charger-1][2], Current[Charger-1][0], Current[Charger-1][1], Current[Charger-1][2], /*Power[Charger-1][0]+Power[Charger-1][1]+Power[Charger-1][2], Energy[Charger-1],*/ Frequency[Charger-1], Time.now(), Charger+CHARGEROFFSET, getUserIdAtSocket(Charger+CHARGEROFFSET));
 80a11ee:	230c      	movs	r3, #12
        Charger = handledCharger + 1;
 80a11f0:	7822      	ldrb	r2, [r4, #0]
            add_Measurement(PhaseVoltage[Charger-1][0], PhaseVoltage[Charger-1][1], PhaseVoltage[Charger-1][2], Current[Charger-1][0], Current[Charger-1][1], Current[Charger-1][2], /*Power[Charger-1][0]+Power[Charger-1][1]+Power[Charger-1][2], Energy[Charger-1],*/ Frequency[Charger-1], Time.now(), Charger+CHARGEROFFSET, getUserIdAtSocket(Charger+CHARGEROFFSET));
 80a11f2:	4d8a      	ldr	r5, [pc, #552]	; (80a141c <loop+0x27c>)
 80a11f4:	4353      	muls	r3, r2
 80a11f6:	18e8      	adds	r0, r5, r3
 80a11f8:	f855 8003 	ldr.w	r8, [r5, r3]
 80a11fc:	4d88      	ldr	r5, [pc, #544]	; (80a1420 <loop+0x280>)
 80a11fe:	f8d0 9004 	ldr.w	r9, [r0, #4]
 80a1202:	f8d0 a008 	ldr.w	sl, [r0, #8]
 80a1206:	18e8      	adds	r0, r5, r3
 80a1208:	f855 b003 	ldr.w	fp, [r5, r3]
 80a120c:	6843      	ldr	r3, [r0, #4]
        Charger = handledCharger + 1;
 80a120e:	1c56      	adds	r6, r2, #1
            add_Measurement(PhaseVoltage[Charger-1][0], PhaseVoltage[Charger-1][1], PhaseVoltage[Charger-1][2], Current[Charger-1][0], Current[Charger-1][1], Current[Charger-1][2], /*Power[Charger-1][0]+Power[Charger-1][1]+Power[Charger-1][2], Energy[Charger-1],*/ Frequency[Charger-1], Time.now(), Charger+CHARGEROFFSET, getUserIdAtSocket(Charger+CHARGEROFFSET));
 80a1210:	9306      	str	r3, [sp, #24]
 80a1212:	6883      	ldr	r3, [r0, #8]
 80a1214:	4883      	ldr	r0, [pc, #524]	; (80a1424 <loop+0x284>)
 80a1216:	9309      	str	r3, [sp, #36]	; 0x24
 80a1218:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 80a121c:	ad0e      	add	r5, sp, #56	; 0x38
 80a121e:	9208      	str	r2, [sp, #32]
 80a1220:	f003 fb99 	bl	80a4956 <_ZN9TimeClass3nowEv>
 80a1224:	4631      	mov	r1, r6
 80a1226:	9007      	str	r0, [sp, #28]
 80a1228:	4628      	mov	r0, r5
 80a122a:	f7ff fc91 	bl	80a0b50 <_Z17getUserIdAtSocketi>
 80a122e:	9b07      	ldr	r3, [sp, #28]
 80a1230:	9a08      	ldr	r2, [sp, #32]
 80a1232:	9303      	str	r3, [sp, #12]
 80a1234:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a1236:	4649      	mov	r1, r9
 80a1238:	9301      	str	r3, [sp, #4]
 80a123a:	9b06      	ldr	r3, [sp, #24]
 80a123c:	4640      	mov	r0, r8
 80a123e:	9202      	str	r2, [sp, #8]
 80a1240:	9300      	str	r3, [sp, #0]
 80a1242:	4652      	mov	r2, sl
 80a1244:	465b      	mov	r3, fp
 80a1246:	e9cd 6504 	strd	r6, r5, [sp, #16]
 80a124a:	f7ff fded 	bl	80a0e28 <_Z15add_Measurementfffffffmi6String>
 80a124e:	4628      	mov	r0, r5
 80a1250:	f002 ff62 	bl	80a4118 <_ZN6StringD1Ev>
 80a1254:	f002 f934 	bl	80a34c0 <HAL_Timer_Get_Milli_Seconds>
        //}
        Charger = tempCharger;
        nextTime[handledCharger] = millis() + 30000; //every 30 sec
 80a1258:	7823      	ldrb	r3, [r4, #0]
 80a125a:	f500 40ea 	add.w	r0, r0, #29952	; 0x7500
 80a125e:	3030      	adds	r0, #48	; 0x30
 80a1260:	f847 0023 	str.w	r0, [r7, r3, lsl #2]
    }
    
//     run loop very often to check new RFID cards
    Particle.process(); //+
 80a1264:	f7ff f8d6 	bl	80a0414 <_ZN10CloudClass7processEv>
    bool Authorized_Charger1=readRFIDCard(1+CHARGEROFFSET); //+
 80a1268:	2001      	movs	r0, #1
 80a126a:	f7ff fe75 	bl	80a0f58 <_Z12readRFIDCardi>
    //DEBUGPORT.println((LatestStartTime[0] + 60 < Time.now()),DEC);
    //if ((LatestStartTime[0] + 60 < Time.now()) && (Current[0][0]+ Current[0][1]+ Current[0][2]) < 1)
    //if (((numberOfZeroReadings[0]>10 && (LatestStartTime[0] + 60 < Time.now()))|| ((Time.now()<LatestStartTime[0] + 70)&&(LatestStartTime[0] + 60 < Time.now()))) && (Current[0][0]+ Current[0][1]+ Current[0][2]) < 1)
    
    // if 10+ Zero current readings have been taken or last start of new charge was over 1min ago and total Current is under 1A for first socket stop charge and reset StartTIme var
    if( (numberOfZeroReadings[0]>10) && (LatestStartTime[0] + 60 < Time.now()) )
 80a126e:	4e6e      	ldr	r6, [pc, #440]	; (80a1428 <loop+0x288>)
    delay(5);
 80a1270:	2005      	movs	r0, #5
 80a1272:	f003 fb8b 	bl	80a498c <delay>
    bool Authorized_Charger2=readRFIDCard(2+CHARGEROFFSET); //+
 80a1276:	2002      	movs	r0, #2
 80a1278:	f7ff fe6e 	bl	80a0f58 <_Z12readRFIDCardi>
    if( (numberOfZeroReadings[0]>10) && (LatestStartTime[0] + 60 < Time.now()) )
 80a127c:	6832      	ldr	r2, [r6, #0]
 80a127e:	2a0a      	cmp	r2, #10
 80a1280:	dd59      	ble.n	80a1336 <loop+0x196>
 80a1282:	4d6a      	ldr	r5, [pc, #424]	; (80a142c <loop+0x28c>)
 80a1284:	682b      	ldr	r3, [r5, #0]
 80a1286:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 80a128a:	f003 fb64 	bl	80a4956 <_ZN9TimeClass3nowEv>
 80a128e:	4284      	cmp	r4, r0
 80a1290:	d251      	bcs.n	80a1336 <loop+0x196>
    {   
        //timeout with current almost zero
        DEBUGPORT.println("Timeout charger"+String(CHARGEROFFSET+1));
 80a1292:	f003 fd3b 	bl	80a4d0c <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
 80a1296:	4966      	ldr	r1, [pc, #408]	; (80a1430 <loop+0x290>)
 80a1298:	4604      	mov	r4, r0
 80a129a:	a80e      	add	r0, sp, #56	; 0x38
 80a129c:	f002 ff86 	bl	80a41ac <_ZN6StringC1EPKc>
 80a12a0:	220a      	movs	r2, #10
 80a12a2:	2101      	movs	r1, #1
 80a12a4:	a80a      	add	r0, sp, #40	; 0x28
 80a12a6:	f002 fff6 	bl	80a4296 <_ZN6StringC1Eih>
 80a12aa:	a90a      	add	r1, sp, #40	; 0x28
 80a12ac:	a80e      	add	r0, sp, #56	; 0x38
 80a12ae:	f003 f868 	bl	80a4382 <_ZplRK15StringSumHelperRK6String>
 80a12b2:	6801      	ldr	r1, [r0, #0]
 80a12b4:	4620      	mov	r0, r4
 80a12b6:	f003 f8fe 	bl	80a44b6 <_ZN5Print7printlnEPKc>
 80a12ba:	a80a      	add	r0, sp, #40	; 0x28
 80a12bc:	f002 ff2c 	bl	80a4118 <_ZN6StringD1Ev>
class StringSumHelper : public String
 80a12c0:	a80e      	add	r0, sp, #56	; 0x38
 80a12c2:	f002 ff29 	bl	80a4118 <_ZN6StringD1Ev>
        digitalWrite(AUTHENTICATION_CAR1,LOW);
 80a12c6:	2100      	movs	r1, #0
 80a12c8:	2005      	movs	r0, #5
 80a12ca:	f004 f826 	bl	80a531a <digitalWrite>
        LatestStartTime[0]=0;
 80a12ce:	2300      	movs	r3, #0
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
 80a12d0:	4958      	ldr	r1, [pc, #352]	; (80a1434 <loop+0x294>)
 80a12d2:	4859      	ldr	r0, [pc, #356]	; (80a1438 <loop+0x298>)
 80a12d4:	602b      	str	r3, [r5, #0]
 80a12d6:	f003 f874 	bl	80a43c2 <_ZNK6String6equalsEPKc>
        if (UIDtagCharger1!="No ID"){
 80a12da:	bb60      	cbnz	r0, 80a1336 <loop+0x196>
            JsonWriterStatic<512> jsonMessage;
 80a12dc:	a80e      	add	r0, sp, #56	; 0x38
 80a12de:	f7ff fd51 	bl	80a0d84 <_ZN16JsonWriterStaticILj512EEC1Ev>
 80a12e2:	a80e      	add	r0, sp, #56	; 0x38
 80a12e4:	f7ff fb4c 	bl	80a0980 <_ZN10JsonWriter11startObjectEv>
    
            {
    		JsonWriterAutoObject obj(&jsonMessage);
    		
    		jsonMessage.insertKeyValue("UserId", UIDtagCharger1);
 80a12e8:	4953      	ldr	r1, [pc, #332]	; (80a1438 <loop+0x298>)
 80a12ea:	a80a      	add	r0, sp, #40	; 0x28
 80a12ec:	f002 ff9d 	bl	80a422a <_ZN6StringC1ERKS_>
 80a12f0:	4952      	ldr	r1, [pc, #328]	; (80a143c <loop+0x29c>)
 80a12f2:	aa0a      	add	r2, sp, #40	; 0x28
 80a12f4:	a80e      	add	r0, sp, #56	; 0x38
 80a12f6:	f7ff fd68 	bl	80a0dca <_ZN10JsonWriter14insertKeyValueI6StringEEvPKcT_>
 80a12fa:	a80a      	add	r0, sp, #40	; 0x28
 80a12fc:	f002 ff0c 	bl	80a4118 <_ZN6StringD1Ev>
            jsonMessage.insertKeyValue("Charger", (1 + CHARGEROFFSET));
 80a1300:	2201      	movs	r2, #1
 80a1302:	494f      	ldr	r1, [pc, #316]	; (80a1440 <loop+0x2a0>)
 80a1304:	a80e      	add	r0, sp, #56	; 0x38
 80a1306:	f7ff fd77 	bl	80a0df8 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
    		jsonMessage.insertKeyValue("StartTime", Time.now());
 80a130a:	f003 fb24 	bl	80a4956 <_ZN9TimeClass3nowEv>
 80a130e:	494d      	ldr	r1, [pc, #308]	; (80a1444 <loop+0x2a4>)
 80a1310:	4602      	mov	r2, r0
 80a1312:	a80e      	add	r0, sp, #56	; 0x38
 80a1314:	f7ff fe08 	bl	80a0f28 <_ZN10JsonWriter14insertKeyValueIlEEvPKcT_>
		jw->finishObjectOrArray();
 80a1318:	a80e      	add	r0, sp, #56	; 0x38
 80a131a:	f001 fd68 	bl	80a2dee <_ZN10JsonWriter19finishObjectOrArrayEv>
    	    }
            client.publish("HANevse/updateUser", jsonMessage.getBuffer());
 80a131e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80a1320:	4949      	ldr	r1, [pc, #292]	; (80a1448 <loop+0x2a8>)
 80a1322:	483b      	ldr	r0, [pc, #236]	; (80a1410 <loop+0x270>)
 80a1324:	f001 f995 	bl	80a2652 <_ZN4MQTT7publishEPKcS1_>
    
            UIDtagCharger1="No ID";    
 80a1328:	4942      	ldr	r1, [pc, #264]	; (80a1434 <loop+0x294>)
 80a132a:	4843      	ldr	r0, [pc, #268]	; (80a1438 <loop+0x298>)
 80a132c:	f002 ff90 	bl	80a4250 <_ZN6StringaSEPKc>
            JsonWriterStatic<512> jsonMessage;
 80a1330:	a80e      	add	r0, sp, #56	; 0x38
 80a1332:	f7fe ffb5 	bl	80a02a0 <_ZN16JsonWriterStaticILj512EED1Ev>
    //DEBUGPORT.println(String(LatestStartTime[1]+60));
    //DEBUGPORT.println(String(Time.now()));
    //DEBUGPORT.println((LatestStartTime[1] + 60 < Time.now()),DEC);
    
    // if 10+ Zero current readings have been taken or last start of new charge was over 1min ago and total Current is under 1A for second socket stop charge and reset StartTIme var
    if( (numberOfZeroReadings[1]>10) && (LatestStartTime[1] + 60 < Time.now()) )
 80a1336:	6873      	ldr	r3, [r6, #4]
 80a1338:	2b0a      	cmp	r3, #10
 80a133a:	dd59      	ble.n	80a13f0 <loop+0x250>
 80a133c:	4d3b      	ldr	r5, [pc, #236]	; (80a142c <loop+0x28c>)
 80a133e:	686b      	ldr	r3, [r5, #4]
 80a1340:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 80a1344:	f003 fb07 	bl	80a4956 <_ZN9TimeClass3nowEv>
 80a1348:	4284      	cmp	r4, r0
 80a134a:	d251      	bcs.n	80a13f0 <loop+0x250>
    {
        //timeout with current almost zero
        DEBUGPORT.println("Timeout charger"+String(CHARGEROFFSET+2));
 80a134c:	f003 fcde 	bl	80a4d0c <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
 80a1350:	4937      	ldr	r1, [pc, #220]	; (80a1430 <loop+0x290>)
 80a1352:	4604      	mov	r4, r0
 80a1354:	a80e      	add	r0, sp, #56	; 0x38
 80a1356:	f002 ff29 	bl	80a41ac <_ZN6StringC1EPKc>
 80a135a:	220a      	movs	r2, #10
 80a135c:	2102      	movs	r1, #2
 80a135e:	a80a      	add	r0, sp, #40	; 0x28
 80a1360:	f002 ff99 	bl	80a4296 <_ZN6StringC1Eih>
 80a1364:	a90a      	add	r1, sp, #40	; 0x28
 80a1366:	a80e      	add	r0, sp, #56	; 0x38
 80a1368:	f003 f80b 	bl	80a4382 <_ZplRK15StringSumHelperRK6String>
 80a136c:	6801      	ldr	r1, [r0, #0]
 80a136e:	4620      	mov	r0, r4
 80a1370:	f003 f8a1 	bl	80a44b6 <_ZN5Print7printlnEPKc>
 80a1374:	a80a      	add	r0, sp, #40	; 0x28
 80a1376:	f002 fecf 	bl	80a4118 <_ZN6StringD1Ev>
class StringSumHelper : public String
 80a137a:	a80e      	add	r0, sp, #56	; 0x38
 80a137c:	f002 fecc 	bl	80a4118 <_ZN6StringD1Ev>
        digitalWrite(AUTHENTICATION_CAR2,LOW);
 80a1380:	2100      	movs	r1, #0
 80a1382:	2006      	movs	r0, #6
 80a1384:	f003 ffc9 	bl	80a531a <digitalWrite>
        //digitalWrite(D7,LOW);
        LatestStartTime[1]=0;
 80a1388:	2300      	movs	r3, #0
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
 80a138a:	492a      	ldr	r1, [pc, #168]	; (80a1434 <loop+0x294>)
 80a138c:	482f      	ldr	r0, [pc, #188]	; (80a144c <loop+0x2ac>)
 80a138e:	606b      	str	r3, [r5, #4]
 80a1390:	f003 f817 	bl	80a43c2 <_ZNK6String6equalsEPKc>
        if (UIDtagCharger2!="No ID"){
 80a1394:	bb60      	cbnz	r0, 80a13f0 <loop+0x250>
            JsonWriterStatic<512> jsonMessage;
 80a1396:	a80e      	add	r0, sp, #56	; 0x38
 80a1398:	f7ff fcf4 	bl	80a0d84 <_ZN16JsonWriterStaticILj512EEC1Ev>
		jw->startObject();
 80a139c:	a80e      	add	r0, sp, #56	; 0x38
 80a139e:	f7ff faef 	bl	80a0980 <_ZN10JsonWriter11startObjectEv>
    
            {
    		JsonWriterAutoObject obj(&jsonMessage);
    		
    		jsonMessage.insertKeyValue("UserId", UIDtagCharger2);
 80a13a2:	492a      	ldr	r1, [pc, #168]	; (80a144c <loop+0x2ac>)
 80a13a4:	a80a      	add	r0, sp, #40	; 0x28
 80a13a6:	f002 ff40 	bl	80a422a <_ZN6StringC1ERKS_>
 80a13aa:	4924      	ldr	r1, [pc, #144]	; (80a143c <loop+0x29c>)
 80a13ac:	aa0a      	add	r2, sp, #40	; 0x28
 80a13ae:	a80e      	add	r0, sp, #56	; 0x38
 80a13b0:	f7ff fd0b 	bl	80a0dca <_ZN10JsonWriter14insertKeyValueI6StringEEvPKcT_>
 80a13b4:	a80a      	add	r0, sp, #40	; 0x28
 80a13b6:	f002 feaf 	bl	80a4118 <_ZN6StringD1Ev>
            jsonMessage.insertKeyValue("Charger", (2 + CHARGEROFFSET));
 80a13ba:	2202      	movs	r2, #2
 80a13bc:	4920      	ldr	r1, [pc, #128]	; (80a1440 <loop+0x2a0>)
 80a13be:	a80e      	add	r0, sp, #56	; 0x38
 80a13c0:	f7ff fd1a 	bl	80a0df8 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
    		jsonMessage.insertKeyValue("StartTime", Time.now());
 80a13c4:	f003 fac7 	bl	80a4956 <_ZN9TimeClass3nowEv>
 80a13c8:	491e      	ldr	r1, [pc, #120]	; (80a1444 <loop+0x2a4>)
 80a13ca:	4602      	mov	r2, r0
 80a13cc:	a80e      	add	r0, sp, #56	; 0x38
 80a13ce:	f7ff fdab 	bl	80a0f28 <_ZN10JsonWriter14insertKeyValueIlEEvPKcT_>
		jw->finishObjectOrArray();
 80a13d2:	a80e      	add	r0, sp, #56	; 0x38
 80a13d4:	f001 fd0b 	bl	80a2dee <_ZN10JsonWriter19finishObjectOrArrayEv>
    	    }
            client.publish("HANevse/updateUser", jsonMessage.getBuffer());
 80a13d8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80a13da:	491b      	ldr	r1, [pc, #108]	; (80a1448 <loop+0x2a8>)
 80a13dc:	480c      	ldr	r0, [pc, #48]	; (80a1410 <loop+0x270>)
 80a13de:	f001 f938 	bl	80a2652 <_ZN4MQTT7publishEPKcS1_>
    
            UIDtagCharger2="No ID";
 80a13e2:	4914      	ldr	r1, [pc, #80]	; (80a1434 <loop+0x294>)
 80a13e4:	4819      	ldr	r0, [pc, #100]	; (80a144c <loop+0x2ac>)
 80a13e6:	f002 ff33 	bl	80a4250 <_ZN6StringaSEPKc>
            JsonWriterStatic<512> jsonMessage;
 80a13ea:	a80e      	add	r0, sp, #56	; 0x38
 80a13ec:	f7fe ff58 	bl	80a02a0 <_ZN16JsonWriterStaticILj512EED1Ev>
            }
        
    }
    delay(100);
 80a13f0:	2064      	movs	r0, #100	; 0x64
 80a13f2:	f003 facb 	bl	80a498c <delay>
//         client.publish("HANevse/updateUser", jsonMessage.getBuffer());

//         UIDtagCharger2="No ID";
//     }
            
    handledCharger = !handledCharger;
 80a13f6:	4a07      	ldr	r2, [pc, #28]	; (80a1414 <loop+0x274>)
 80a13f8:	7813      	ldrb	r3, [r2, #0]
 80a13fa:	f083 0301 	eor.w	r3, r3, #1
 80a13fe:	7013      	strb	r3, [r2, #0]
 80a1400:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 80a1404:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else reconnect();
 80a1408:	f7ff fc5c 	bl	80a0cc4 <_Z9reconnectv>
 80a140c:	e6da      	b.n	80a11c4 <loop+0x24>
 80a140e:	bf00      	nop
 80a1410:	200004b8 	.word	0x200004b8
 80a1414:	20000520 	.word	0x20000520
 80a1418:	20000000 	.word	0x20000000
 80a141c:	200002ec 	.word	0x200002ec
 80a1420:	20000254 	.word	0x20000254
 80a1424:	200002c4 	.word	0x200002c4
 80a1428:	20000560 	.word	0x20000560
 80a142c:	200002cc 	.word	0x200002cc
 80a1430:	080a8564 	.word	0x080a8564
 80a1434:	080a82c7 	.word	0x080a82c7
 80a1438:	20000334 	.word	0x20000334
 80a143c:	080a8519 	.word	0x080a8519
 80a1440:	080a8520 	.word	0x080a8520
 80a1444:	080a8528 	.word	0x080a8528
 80a1448:	080a8532 	.word	0x080a8532
 80a144c:	20000344 	.word	0x20000344

080a1450 <_ZN10CloudClass8functionIA13_cJPFi6StringEEEEbRKT_DpT0_>:
    static inline bool function(const T &name, Types ... args)
 80a1450:	4602      	mov	r2, r0
        return register_function(call_raw_user_function, (void*)func, funcKey);
 80a1452:	4801      	ldr	r0, [pc, #4]	; (80a1458 <_ZN10CloudClass8functionIA13_cJPFi6StringEEEEbRKT_DpT0_+0x8>)
 80a1454:	f003 bb76 	b.w	80a4b44 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 80a1458:	080a4b19 	.word	0x080a4b19

080a145c <setup>:
void setup() {
 80a145c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    DEBUGPORT.begin(115200); 
 80a145e:	f003 fc55 	bl	80a4d0c <_Z16_fetch_usbserialv>
 80a1462:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80a1466:	f003 fc45 	bl	80a4cf4 <_ZN9USBSerial5beginEl>
    Serial1.begin(9600);
 80a146a:	f003 fd01 	bl	80a4e70 <_Z22__fetch_global_Serial1v>
 80a146e:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a1472:	f003 fcf9 	bl	80a4e68 <_ZN11USARTSerial5beginEm>
    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a1476:	f002 fa4b 	bl	80a3910 <spark_cloud_flag_connected>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80a147a:	b910      	cbnz	r0, 80a1482 <setup+0x26>
            spark_process();
 80a147c:	f002 fa38 	bl	80a38f0 <spark_process>
        while (_while() && !_condition()) {
 80a1480:	e7f9      	b.n	80a1476 <setup+0x1a>
 80a1482:	f002 fa45 	bl	80a3910 <spark_cloud_flag_connected>
    pinMode(AUTHENTICATION_CAR1, OUTPUT); //pinMode(D1, OUTPUT); //Charger1_Authorized
 80a1486:	2101      	movs	r1, #1
 80a1488:	2005      	movs	r0, #5
 80a148a:	f003 ff35 	bl	80a52f8 <pinMode>
    pinMode(AUTHENTICATION_CAR2, OUTPUT); //pinMode(D2, OUTPUT); //Charger2_Authorized
 80a148e:	2101      	movs	r1, #1
 80a1490:	2006      	movs	r0, #6
 80a1492:	f003 ff31 	bl	80a52f8 <pinMode>
    pinMode(PILOT_FEEDBACK_CAR_1,INPUT);
 80a1496:	2100      	movs	r1, #0
 80a1498:	2010      	movs	r0, #16
 80a149a:	f003 ff2d 	bl	80a52f8 <pinMode>
    pinMode(PILOT_FEEDBACK_CAR_2,INPUT);
 80a149e:	2100      	movs	r1, #0
 80a14a0:	2011      	movs	r0, #17
 80a14a2:	f003 ff29 	bl	80a52f8 <pinMode>
    pinMode(WAKEUP_OLIMEX, OUTPUT);
 80a14a6:	2101      	movs	r1, #1
 80a14a8:	2002      	movs	r0, #2
 80a14aa:	f003 ff25 	bl	80a52f8 <pinMode>
    pinMode(RESET_OLIMEX, OUTPUT);
 80a14ae:	2101      	movs	r1, #1
 80a14b0:	2004      	movs	r0, #4
 80a14b2:	f003 ff21 	bl	80a52f8 <pinMode>
    pinMode(D7, OUTPUT);
 80a14b6:	2101      	movs	r1, #1
 80a14b8:	2007      	movs	r0, #7
 80a14ba:	f003 ff1d 	bl	80a52f8 <pinMode>
    digitalWrite(AUTHENTICATION_CAR1, LOW); //digitalWrite(D1,LOW);
 80a14be:	2100      	movs	r1, #0
 80a14c0:	2005      	movs	r0, #5
 80a14c2:	f003 ff2a 	bl	80a531a <digitalWrite>
    digitalWrite(AUTHENTICATION_CAR2, LOW);//digitalWrite(D2,LOW);
 80a14c6:	2100      	movs	r1, #0
 80a14c8:	2006      	movs	r0, #6
 80a14ca:	f003 ff26 	bl	80a531a <digitalWrite>
    digitalWrite(WAKEUP_OLIMEX, LOW);
 80a14ce:	2100      	movs	r1, #0
 80a14d0:	2002      	movs	r0, #2
 80a14d2:	f003 ff22 	bl	80a531a <digitalWrite>
    digitalWrite(RESET_OLIMEX, HIGH);
 80a14d6:	2101      	movs	r1, #1
 80a14d8:	2004      	movs	r0, #4
 80a14da:	f003 ff1e 	bl	80a531a <digitalWrite>
    digitalWrite(D7, LOW);
 80a14de:	2100      	movs	r1, #0
 80a14e0:	2007      	movs	r0, #7
 80a14e2:	f003 ff1a 	bl	80a531a <digitalWrite>
    initRFID(""); //+
 80a14e6:	4921      	ldr	r1, [pc, #132]	; (80a156c <setup+0x110>)
 80a14e8:	4668      	mov	r0, sp
 80a14ea:	f002 fe5f 	bl	80a41ac <_ZN6StringC1EPKc>
 80a14ee:	4668      	mov	r0, sp
 80a14f0:	f7fe ff36 	bl	80a0360 <_Z8initRFID6String>
 80a14f4:	4668      	mov	r0, sp
 80a14f6:	f002 fe0f 	bl	80a4118 <_ZN6StringD1Ev>
        return register_function(call_raw_user_function, (void*)func, funcKey);
 80a14fa:	4a1d      	ldr	r2, [pc, #116]	; (80a1570 <setup+0x114>)
 80a14fc:	491d      	ldr	r1, [pc, #116]	; (80a1574 <setup+0x118>)
 80a14fe:	481e      	ldr	r0, [pc, #120]	; (80a1578 <setup+0x11c>)
 80a1500:	f003 fb20 	bl	80a4b44 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
    Particle.function("maxCurrentC1",maxCurrentC1);
 80a1504:	491d      	ldr	r1, [pc, #116]	; (80a157c <setup+0x120>)
 80a1506:	481e      	ldr	r0, [pc, #120]	; (80a1580 <setup+0x124>)
 80a1508:	f7ff ffa2 	bl	80a1450 <_ZN10CloudClass8functionIA13_cJPFi6StringEEEEbRKT_DpT0_>
    Particle.function("maxCurrentC2",maxCurrentC2);
 80a150c:	491d      	ldr	r1, [pc, #116]	; (80a1584 <setup+0x128>)
 80a150e:	481e      	ldr	r0, [pc, #120]	; (80a1588 <setup+0x12c>)
 80a1510:	f7ff ff9e 	bl	80a1450 <_ZN10CloudClass8functionIA13_cJPFi6StringEEEEbRKT_DpT0_>
 80a1514:	4a1d      	ldr	r2, [pc, #116]	; (80a158c <setup+0x130>)
 80a1516:	491e      	ldr	r1, [pc, #120]	; (80a1590 <setup+0x134>)
 80a1518:	4817      	ldr	r0, [pc, #92]	; (80a1578 <setup+0x11c>)
 80a151a:	f003 fb13 	bl	80a4b44 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
    Particle.function("progModeOlmx",progModeOlmx);
 80a151e:	491d      	ldr	r1, [pc, #116]	; (80a1594 <setup+0x138>)
 80a1520:	481d      	ldr	r0, [pc, #116]	; (80a1598 <setup+0x13c>)
 80a1522:	f7ff ff95 	bl	80a1450 <_ZN10CloudClass8functionIA13_cJPFi6StringEEEEbRKT_DpT0_>
    Particle.function("resetParticl",resetParticle);
 80a1526:	491d      	ldr	r1, [pc, #116]	; (80a159c <setup+0x140>)
 80a1528:	481d      	ldr	r0, [pc, #116]	; (80a15a0 <setup+0x144>)
 80a152a:	f7ff ff91 	bl	80a1450 <_ZN10CloudClass8functionIA13_cJPFi6StringEEEEbRKT_DpT0_>
 80a152e:	4a1d      	ldr	r2, [pc, #116]	; (80a15a4 <setup+0x148>)
 80a1530:	491d      	ldr	r1, [pc, #116]	; (80a15a8 <setup+0x14c>)
 80a1532:	4811      	ldr	r0, [pc, #68]	; (80a1578 <setup+0x11c>)
 80a1534:	f003 fb06 	bl	80a4b44 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 80a1538:	4a1c      	ldr	r2, [pc, #112]	; (80a15ac <setup+0x150>)
 80a153a:	491d      	ldr	r1, [pc, #116]	; (80a15b0 <setup+0x154>)
 80a153c:	480e      	ldr	r0, [pc, #56]	; (80a1578 <setup+0x11c>)
 80a153e:	f003 fb01 	bl	80a4b44 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
        return _variable(varKey, &var, STRING);
 80a1542:	491c      	ldr	r1, [pc, #112]	; (80a15b4 <setup+0x158>)
 80a1544:	481c      	ldr	r0, [pc, #112]	; (80a15b8 <setup+0x15c>)
 80a1546:	f7fe fef9 	bl	80a033c <_ZN10CloudClass9_variableIcEEbPKT_PK6StringRK17CloudVariableTypeIPKcvE.isra.0>
 80a154a:	491c      	ldr	r1, [pc, #112]	; (80a15bc <setup+0x160>)
 80a154c:	481c      	ldr	r0, [pc, #112]	; (80a15c0 <setup+0x164>)
 80a154e:	f7fe fef5 	bl	80a033c <_ZN10CloudClass9_variableIcEEbPKT_PK6StringRK17CloudVariableTypeIPKcvE.isra.0>
 80a1552:	491c      	ldr	r1, [pc, #112]	; (80a15c4 <setup+0x168>)
 80a1554:	481c      	ldr	r0, [pc, #112]	; (80a15c8 <setup+0x16c>)
 80a1556:	f7fe fef1 	bl	80a033c <_ZN10CloudClass9_variableIcEEbPKT_PK6StringRK17CloudVariableTypeIPKcvE.isra.0>
    Particle.process();
 80a155a:	f7fe ff5b 	bl	80a0414 <_ZN10CloudClass7processEv>
    Time.zone(1); //Dutch time zone
 80a155e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80a1562:	f003 f8d7 	bl	80a4714 <_ZN9TimeClass4zoneEf>
}
 80a1566:	b005      	add	sp, #20
 80a1568:	f85d fb04 	ldr.w	pc, [sp], #4
 80a156c:	080a898c 	.word	0x080a898c
 80a1570:	080a8574 	.word	0x080a8574
 80a1574:	080a02dd 	.word	0x080a02dd
 80a1578:	080a4b19 	.word	0x080a4b19
 80a157c:	080a0141 	.word	0x080a0141
 80a1580:	080a857f 	.word	0x080a857f
 80a1584:	080a01f1 	.word	0x080a01f1
 80a1588:	080a858c 	.word	0x080a858c
 80a158c:	080a843b 	.word	0x080a843b
 80a1590:	080a00bb 	.word	0x080a00bb
 80a1594:	080a00d9 	.word	0x080a00d9
 80a1598:	080a8599 	.word	0x080a8599
 80a159c:	080a0139 	.word	0x080a0139
 80a15a0:	080a85a6 	.word	0x080a85a6
 80a15a4:	080a85b3 	.word	0x080a85b3
 80a15a8:	080a011d 	.word	0x080a011d
 80a15ac:	080a85be 	.word	0x080a85be
 80a15b0:	080a0361 	.word	0x080a0361
 80a15b4:	20000510 	.word	0x20000510
 80a15b8:	080a85c7 	.word	0x080a85c7
 80a15bc:	20000320 	.word	0x20000320
 80a15c0:	080a85d2 	.word	0x080a85d2
 80a15c4:	20000568 	.word	0x20000568
 80a15c8:	080a85db 	.word	0x080a85db

080a15cc <_GLOBAL__sub_I_readnextLine>:
 80a15cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
String latestUID1="No ID";
 80a15ce:	4e36      	ldr	r6, [pc, #216]	; (80a16a8 <_GLOBAL__sub_I_readnextLine+0xdc>)
 80a15d0:	4f36      	ldr	r7, [pc, #216]	; (80a16ac <_GLOBAL__sub_I_readnextLine+0xe0>)
 80a15d2:	4c37      	ldr	r4, [pc, #220]	; (80a16b0 <_GLOBAL__sub_I_readnextLine+0xe4>)
 80a15d4:	4d37      	ldr	r5, [pc, #220]	; (80a16b4 <_GLOBAL__sub_I_readnextLine+0xe8>)
 80a15d6:	4631      	mov	r1, r6
 80a15d8:	4638      	mov	r0, r7
 80a15da:	f002 fde7 	bl	80a41ac <_ZN6StringC1EPKc>
 80a15de:	4638      	mov	r0, r7
String latestUID2="No ID";
 80a15e0:	4f35      	ldr	r7, [pc, #212]	; (80a16b8 <_GLOBAL__sub_I_readnextLine+0xec>)
String latestUID1="No ID";
 80a15e2:	4622      	mov	r2, r4
 80a15e4:	4629      	mov	r1, r5
 80a15e6:	f003 ff1d 	bl	80a5424 <__aeabi_atexit>
String latestUID2="No ID";
 80a15ea:	4631      	mov	r1, r6
 80a15ec:	4638      	mov	r0, r7
 80a15ee:	f002 fddd 	bl	80a41ac <_ZN6StringC1EPKc>
 80a15f2:	4638      	mov	r0, r7
String UIDtagCharger1="No ID";
 80a15f4:	4f31      	ldr	r7, [pc, #196]	; (80a16bc <_GLOBAL__sub_I_readnextLine+0xf0>)
String latestUID2="No ID";
 80a15f6:	4622      	mov	r2, r4
 80a15f8:	4629      	mov	r1, r5
 80a15fa:	f003 ff13 	bl	80a5424 <__aeabi_atexit>
String UIDtagCharger1="No ID";
 80a15fe:	4631      	mov	r1, r6
 80a1600:	4638      	mov	r0, r7
 80a1602:	f002 fdd3 	bl	80a41ac <_ZN6StringC1EPKc>
 80a1606:	4638      	mov	r0, r7
String UIDtagCharger2="No ID";
 80a1608:	4f2d      	ldr	r7, [pc, #180]	; (80a16c0 <_GLOBAL__sub_I_readnextLine+0xf4>)
String UIDtagCharger1="No ID";
 80a160a:	4622      	mov	r2, r4
 80a160c:	4629      	mov	r1, r5
 80a160e:	f003 ff09 	bl	80a5424 <__aeabi_atexit>
String UIDtagCharger2="No ID";
 80a1612:	4631      	mov	r1, r6
 80a1614:	4638      	mov	r0, r7
 80a1616:	f002 fdc9 	bl	80a41ac <_ZN6StringC1EPKc>
 80a161a:	4622      	mov	r2, r4
 80a161c:	4629      	mov	r1, r5
 80a161e:	4638      	mov	r0, r7
 80a1620:	f003 ff00 	bl	80a5424 <__aeabi_atexit>
    bool clearCredentials(void) {
        return network_clear_credentials(*this, 0, NULL, NULL);
    }

    int selectAntenna(WLanSelectAntenna_TypeDef antenna) {
        return wlan_select_antenna(antenna);
 80a1624:	2001      	movs	r0, #1
 80a1626:	f002 f8ad 	bl	80a3784 <wlan_select_antenna>
MQTT client("broker.hivemq.com", 1883, MQTT_DEFAULT_KEEPALIVE, callback, 512);
 80a162a:	f44f 7300 	mov.w	r3, #512	; 0x200
 80a162e:	4e25      	ldr	r6, [pc, #148]	; (80a16c4 <_GLOBAL__sub_I_readnextLine+0xf8>)
 80a1630:	9301      	str	r3, [sp, #4]
 80a1632:	4b25      	ldr	r3, [pc, #148]	; (80a16c8 <_GLOBAL__sub_I_readnextLine+0xfc>)
 80a1634:	f240 725b 	movw	r2, #1883	; 0x75b
 80a1638:	9300      	str	r3, [sp, #0]
 80a163a:	4630      	mov	r0, r6
 80a163c:	230f      	movs	r3, #15
 80a163e:	4923      	ldr	r1, [pc, #140]	; (80a16cc <_GLOBAL__sub_I_readnextLine+0x100>)
 80a1640:	f000 fda0 	bl	80a2184 <_ZN4MQTTC1EPctiPFvS0_PhjEi>
 80a1644:	4630      	mov	r0, r6
String test = "0";
 80a1646:	4e22      	ldr	r6, [pc, #136]	; (80a16d0 <_GLOBAL__sub_I_readnextLine+0x104>)
MQTT client("broker.hivemq.com", 1883, MQTT_DEFAULT_KEEPALIVE, callback, 512);
 80a1648:	4622      	mov	r2, r4
 80a164a:	4922      	ldr	r1, [pc, #136]	; (80a16d4 <_GLOBAL__sub_I_readnextLine+0x108>)
 80a164c:	f003 feea 	bl	80a5424 <__aeabi_atexit>
String test = "0";
 80a1650:	4630      	mov	r0, r6
 80a1652:	4921      	ldr	r1, [pc, #132]	; (80a16d8 <_GLOBAL__sub_I_readnextLine+0x10c>)
 80a1654:	f002 fdaa 	bl	80a41ac <_ZN6StringC1EPKc>
 80a1658:	4622      	mov	r2, r4
 80a165a:	4629      	mov	r1, r5
 80a165c:	4630      	mov	r0, r6
 80a165e:	f003 fee1 	bl	80a5424 <__aeabi_atexit>
String ShareVar;
 80a1662:	4f1e      	ldr	r7, [pc, #120]	; (80a16dc <_GLOBAL__sub_I_readnextLine+0x110>)
 80a1664:	4e1e      	ldr	r6, [pc, #120]	; (80a16e0 <_GLOBAL__sub_I_readnextLine+0x114>)
MFRC522 mfrc522_Charger1(SS_PIN_CHARGER1, RST_PIN);   // Create MFRC522 instance.
 80a1666:	220a      	movs	r2, #10
 80a1668:	210b      	movs	r1, #11
 80a166a:	481e      	ldr	r0, [pc, #120]	; (80a16e4 <_GLOBAL__sub_I_readnextLine+0x118>)
 80a166c:	f000 f962 	bl	80a1934 <_ZN7MFRC522C1Ehh>
MFRC522 mfrc522_Charger2(SS_PIN_CHARGER2, RST_PIN);   // Create MFRC522 instance.
 80a1670:	220a      	movs	r2, #10
 80a1672:	210c      	movs	r1, #12
 80a1674:	481c      	ldr	r0, [pc, #112]	; (80a16e8 <_GLOBAL__sub_I_readnextLine+0x11c>)
 80a1676:	f000 f95d 	bl	80a1934 <_ZN7MFRC522C1Ehh>
String ShareVar;
 80a167a:	4639      	mov	r1, r7
 80a167c:	4630      	mov	r0, r6
 80a167e:	f002 fd95 	bl	80a41ac <_ZN6StringC1EPKc>
 80a1682:	4630      	mov	r0, r6
String currentStr="";
 80a1684:	4e19      	ldr	r6, [pc, #100]	; (80a16ec <_GLOBAL__sub_I_readnextLine+0x120>)
String ShareVar;
 80a1686:	4622      	mov	r2, r4
 80a1688:	4629      	mov	r1, r5
 80a168a:	f003 fecb 	bl	80a5424 <__aeabi_atexit>
String currentStr="";
 80a168e:	4639      	mov	r1, r7
 80a1690:	4630      	mov	r0, r6
 80a1692:	f002 fd8b 	bl	80a41ac <_ZN6StringC1EPKc>
 80a1696:	4622      	mov	r2, r4
 80a1698:	4629      	mov	r1, r5
 80a169a:	4630      	mov	r0, r6
 80a169c:	b003      	add	sp, #12
 80a169e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
String currentStr="";
 80a16a2:	f003 bebf 	b.w	80a5424 <__aeabi_atexit>
 80a16a6:	bf00      	nop
 80a16a8:	080a82c7 	.word	0x080a82c7
 80a16ac:	20000524 	.word	0x20000524
 80a16b0:	20000240 	.word	0x20000240
 80a16b4:	080a4119 	.word	0x080a4119
 80a16b8:	20000534 	.word	0x20000534
 80a16bc:	20000334 	.word	0x20000334
 80a16c0:	20000344 	.word	0x20000344
 80a16c4:	200004b8 	.word	0x200004b8
 80a16c8:	080a1759 	.word	0x080a1759
 80a16cc:	080a85e1 	.word	0x080a85e1
 80a16d0:	20000568 	.word	0x20000568
 80a16d4:	080a2949 	.word	0x080a2949
 80a16d8:	080a84f8 	.word	0x080a84f8
 80a16dc:	080a898c 	.word	0x080a898c
 80a16e0:	20000320 	.word	0x20000320
 80a16e4:	20000544 	.word	0x20000544
 80a16e8:	20000552 	.word	0x20000552
 80a16ec:	20000510 	.word	0x20000510

080a16f0 <_Z19getMeasure_callbackPhj>:
    int setP = 0;
 80a16f0:	2300      	movs	r3, #0
void getMeasure_callback(byte* payload, unsigned int length) {
 80a16f2:	b530      	push	{r4, r5, lr}
 80a16f4:	460d      	mov	r5, r1
 80a16f6:	4604      	mov	r4, r0
 80a16f8:	b08f      	sub	sp, #60	; 0x3c
    JsonParser parser1;
 80a16fa:	a803      	add	r0, sp, #12
    int setP = 0;
 80a16fc:	9301      	str	r3, [sp, #4]
    JsonParser parser1;
 80a16fe:	f001 f9d3 	bl	80a2aa8 <_ZN10JsonParserC1Ev>
    parser1.clear();
 80a1702:	a803      	add	r0, sp, #12
 80a1704:	f001 f9cc 	bl	80a2aa0 <_ZN10JsonBuffer5clearEv>
    parser1.addData( (char*)(payload), length); 
 80a1708:	462a      	mov	r2, r5
 80a170a:	4621      	mov	r1, r4
 80a170c:	a803      	add	r0, sp, #12
 80a170e:	f001 f9aa 	bl	80a2a66 <_ZN10JsonBuffer7addDataEPKcj>
    parser1.parse();
 80a1712:	a803      	add	r0, sp, #12
 80a1714:	f001 fe5c 	bl	80a33d0 <_ZN10JsonParser5parseEv>
		if (getValueTokenByKey(getOuterObject(), name, value)) {
 80a1718:	a803      	add	r0, sp, #12
 80a171a:	f001 f9d3 	bl	80a2ac4 <_ZNK10JsonParser14getOuterObjectEv>
 80a171e:	4a0d      	ldr	r2, [pc, #52]	; (80a1754 <_Z19getMeasure_callbackPhj+0x64>)
 80a1720:	4601      	mov	r1, r0
 80a1722:	ab02      	add	r3, sp, #8
 80a1724:	a803      	add	r0, sp, #12
 80a1726:	f001 fb0b 	bl	80a2d40 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
 80a172a:	b120      	cbz	r0, 80a1736 <_Z19getMeasure_callbackPhj+0x46>
			return getTokenValue(value, result);
 80a172c:	9902      	ldr	r1, [sp, #8]
 80a172e:	aa01      	add	r2, sp, #4
 80a1730:	a803      	add	r0, sp, #12
 80a1732:	f001 fa2b 	bl	80a2b8c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERi>
    unsigned int setPoint = setP;
 80a1736:	9c01      	ldr	r4, [sp, #4]
      maxCurrentC1_test(setPoint); //Emeter3, I1
 80a1738:	4620      	mov	r0, r4
 80a173a:	f7ff f925 	bl	80a0988 <_Z17maxCurrentC1_testj>
      delay(10);
 80a173e:	200a      	movs	r0, #10
 80a1740:	f003 f924 	bl	80a498c <delay>
      maxCurrentC2_test(setPoint); //Emeter3, I1
 80a1744:	4620      	mov	r0, r4
 80a1746:	f7ff f991 	bl	80a0a6c <_Z17maxCurrentC2_testj>
    JsonParser parser1;
 80a174a:	a803      	add	r0, sp, #12
 80a174c:	f001 f950 	bl	80a29f0 <_ZN10JsonParserD1Ev>
}
 80a1750:	b00f      	add	sp, #60	; 0x3c
 80a1752:	bd30      	pop	{r4, r5, pc}
 80a1754:	080a85f3 	.word	0x080a85f3

080a1758 <_Z8callbackPcPhj>:
void callback(char* topic, byte* payload, unsigned int length) {
 80a1758:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a175c:	b087      	sub	sp, #28
 80a175e:	4605      	mov	r5, r0
 80a1760:	af02      	add	r7, sp, #8
 80a1762:	460e      	mov	r6, r1
    test = "99";
 80a1764:	4865      	ldr	r0, [pc, #404]	; (80a18fc <_Z8callbackPcPhj+0x1a4>)
 80a1766:	4966      	ldr	r1, [pc, #408]	; (80a1900 <_Z8callbackPcPhj+0x1a8>)
void callback(char* topic, byte* payload, unsigned int length) {
 80a1768:	4614      	mov	r4, r2
    test = "99";
 80a176a:	f002 fd71 	bl	80a4250 <_ZN6StringaSEPKc>
	time_t time = Time.now();
 80a176e:	f003 f8f2 	bl	80a4956 <_ZN9TimeClass3nowEv>
 80a1772:	4681      	mov	r9, r0
    DEBUGPORT.print("MQTT>\tCallback function is called at: ");
 80a1774:	f003 faca 	bl	80a4d0c <_Z16_fetch_usbserialv>
 80a1778:	4962      	ldr	r1, [pc, #392]	; (80a1904 <_Z8callbackPcPhj+0x1ac>)
 80a177a:	f002 fe89 	bl	80a4490 <_ZN5Print5printEPKc>
    DEBUGPORT.println(Time.format(time, TIME_FORMAT_DEFAULT));
 80a177e:	f003 fac5 	bl	80a4d0c <_Z16_fetch_usbserialv>
 80a1782:	464a      	mov	r2, r9
 80a1784:	4680      	mov	r8, r0
 80a1786:	4b60      	ldr	r3, [pc, #384]	; (80a1908 <_Z8callbackPcPhj+0x1b0>)
 80a1788:	4638      	mov	r0, r7
 80a178a:	681b      	ldr	r3, [r3, #0]
 80a178c:	495f      	ldr	r1, [pc, #380]	; (80a190c <_Z8callbackPcPhj+0x1b4>)
 80a178e:	9300      	str	r3, [sp, #0]
 80a1790:	17d3      	asrs	r3, r2, #31
 80a1792:	f003 f881 	bl	80a4898 <_ZN9TimeClass6formatExPKc>
 80a1796:	6839      	ldr	r1, [r7, #0]
 80a1798:	4640      	mov	r0, r8
 80a179a:	f002 fe8c 	bl	80a44b6 <_ZN5Print7printlnEPKc>
 80a179e:	4638      	mov	r0, r7
 80a17a0:	f002 fcba 	bl	80a4118 <_ZN6StringD1Ev>
         if (strcmp(topic, "HANevse/allowUser")==0)
 80a17a4:	4628      	mov	r0, r5
 80a17a6:	495a      	ldr	r1, [pc, #360]	; (80a1910 <_Z8callbackPcPhj+0x1b8>)
 80a17a8:	f005 fa18 	bl	80a6bdc <strcmp>
 80a17ac:	b938      	cbnz	r0, 80a17be <_Z8callbackPcPhj+0x66>
            allowUser_callback(payload, length);
 80a17ae:	4621      	mov	r1, r4
 80a17b0:	4630      	mov	r0, r6
 80a17b2:	f7ff f9e5 	bl	80a0b80 <_Z18allowUser_callbackPhj>
}
 80a17b6:	3714      	adds	r7, #20
 80a17b8:	46bd      	mov	sp, r7
 80a17ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
         if ( (strcmp(topic, "HANevse/energyMeter")==0) && TESTCASE )
 80a17be:	4628      	mov	r0, r5
 80a17c0:	4954      	ldr	r1, [pc, #336]	; (80a1914 <_Z8callbackPcPhj+0x1bc>)
 80a17c2:	f005 fa0b 	bl	80a6bdc <strcmp>
 80a17c6:	b938      	cbnz	r0, 80a17d8 <_Z8callbackPcPhj+0x80>
 80a17c8:	4b53      	ldr	r3, [pc, #332]	; (80a1918 <_Z8callbackPcPhj+0x1c0>)
 80a17ca:	781b      	ldrb	r3, [r3, #0]
 80a17cc:	b123      	cbz	r3, 80a17d8 <_Z8callbackPcPhj+0x80>
            getMeasure_callback(payload, length);
 80a17ce:	4621      	mov	r1, r4
 80a17d0:	4630      	mov	r0, r6
 80a17d2:	f7ff ff8d 	bl	80a16f0 <_Z19getMeasure_callbackPhj>
 80a17d6:	e7ee      	b.n	80a17b6 <_Z8callbackPcPhj+0x5e>
         if (strcmp(topic, "HANevse/resetOlimex")==0)
 80a17d8:	4628      	mov	r0, r5
 80a17da:	4950      	ldr	r1, [pc, #320]	; (80a191c <_Z8callbackPcPhj+0x1c4>)
 80a17dc:	f005 f9fe 	bl	80a6bdc <strcmp>
 80a17e0:	4680      	mov	r8, r0
 80a17e2:	b9d0      	cbnz	r0, 80a181a <_Z8callbackPcPhj+0xc2>
            char payl[length+1];
 80a17e4:	f104 0308 	add.w	r3, r4, #8
 80a17e8:	f023 0307 	bic.w	r3, r3, #7
            resetOlimex(payl);
 80a17ec:	466d      	mov	r5, sp
            char payl[length+1];
 80a17ee:	ebad 0d03 	sub.w	sp, sp, r3
 80a17f2:	ab02      	add	r3, sp, #8
            memcpy(payl, payload, length);
 80a17f4:	4622      	mov	r2, r4
 80a17f6:	4631      	mov	r1, r6
 80a17f8:	4618      	mov	r0, r3
 80a17fa:	f005 f9b5 	bl	80a6b68 <memcpy>
            resetOlimex(payl);
 80a17fe:	4601      	mov	r1, r0
            payl[length] = NULL;
 80a1800:	f800 8004 	strb.w	r8, [r0, r4]
            resetOlimex(payl);
 80a1804:	4638      	mov	r0, r7
 80a1806:	f002 fcd1 	bl	80a41ac <_ZN6StringC1EPKc>
 80a180a:	4638      	mov	r0, r7
 80a180c:	f7fe fc55 	bl	80a00ba <_Z11resetOlimex6String>
            switchTest(payl);
 80a1810:	4638      	mov	r0, r7
 80a1812:	f002 fc81 	bl	80a4118 <_ZN6StringD1Ev>
 80a1816:	46ad      	mov	sp, r5
 80a1818:	e7cd      	b.n	80a17b6 <_Z8callbackPcPhj+0x5e>
         if (strcmp(topic, "HANevse/resetPhoton")==0)
 80a181a:	4628      	mov	r0, r5
 80a181c:	4940      	ldr	r1, [pc, #256]	; (80a1920 <_Z8callbackPcPhj+0x1c8>)
 80a181e:	f005 f9dd 	bl	80a6bdc <strcmp>
 80a1822:	b928      	cbnz	r0, 80a1830 <_Z8callbackPcPhj+0xd8>
            resetParticle("1");
 80a1824:	493f      	ldr	r1, [pc, #252]	; (80a1924 <_Z8callbackPcPhj+0x1cc>)
 80a1826:	4638      	mov	r0, r7
 80a1828:	f002 fcc0 	bl	80a41ac <_ZN6StringC1EPKc>
    System.reset();
 80a182c:	f002 f925 	bl	80a3a7a <_ZN11SystemClass5resetEv>
         if (strcmp(topic, "HANevse/switchTest1")==0)
 80a1830:	4628      	mov	r0, r5
 80a1832:	493d      	ldr	r1, [pc, #244]	; (80a1928 <_Z8callbackPcPhj+0x1d0>)
 80a1834:	f005 f9d2 	bl	80a6bdc <strcmp>
 80a1838:	4680      	mov	r8, r0
 80a183a:	b9b0      	cbnz	r0, 80a186a <_Z8callbackPcPhj+0x112>
            char payl[length+1];
 80a183c:	f104 0308 	add.w	r3, r4, #8
 80a1840:	f023 0307 	bic.w	r3, r3, #7
            switchTest(payl);
 80a1844:	466d      	mov	r5, sp
            char payl[length+1];
 80a1846:	ebad 0d03 	sub.w	sp, sp, r3
 80a184a:	ab02      	add	r3, sp, #8
            memcpy(payl, payload, length);
 80a184c:	4622      	mov	r2, r4
 80a184e:	4631      	mov	r1, r6
 80a1850:	4618      	mov	r0, r3
 80a1852:	f005 f989 	bl	80a6b68 <memcpy>
            switchTest(payl);
 80a1856:	4601      	mov	r1, r0
            payl[length] = NULL;
 80a1858:	f800 8004 	strb.w	r8, [r0, r4]
            switchTest(payl);
 80a185c:	4638      	mov	r0, r7
 80a185e:	f002 fca5 	bl	80a41ac <_ZN6StringC1EPKc>
 80a1862:	4638      	mov	r0, r7
 80a1864:	f7fe fd3a 	bl	80a02dc <_Z10switchTest6String>
 80a1868:	e7d2      	b.n	80a1810 <_Z8callbackPcPhj+0xb8>
         if ((strcmp(topic, "HANevse/maxC1")==0)  && !TESTCASE )
 80a186a:	4628      	mov	r0, r5
 80a186c:	492f      	ldr	r1, [pc, #188]	; (80a192c <_Z8callbackPcPhj+0x1d4>)
 80a186e:	f005 f9b5 	bl	80a6bdc <strcmp>
 80a1872:	b9e0      	cbnz	r0, 80a18ae <_Z8callbackPcPhj+0x156>
 80a1874:	4b28      	ldr	r3, [pc, #160]	; (80a1918 <_Z8callbackPcPhj+0x1c0>)
 80a1876:	f893 8000 	ldrb.w	r8, [r3]
 80a187a:	f1b8 0f00 	cmp.w	r8, #0
 80a187e:	d116      	bne.n	80a18ae <_Z8callbackPcPhj+0x156>
            char payl[length+1];
 80a1880:	f104 0308 	add.w	r3, r4, #8
 80a1884:	f023 0307 	bic.w	r3, r3, #7
            maxCurrentC1(payl);
 80a1888:	466d      	mov	r5, sp
            char payl[length+1];
 80a188a:	ebad 0d03 	sub.w	sp, sp, r3
 80a188e:	ab02      	add	r3, sp, #8
            memcpy(payl, payload, length);
 80a1890:	4622      	mov	r2, r4
 80a1892:	4631      	mov	r1, r6
 80a1894:	4618      	mov	r0, r3
 80a1896:	f005 f967 	bl	80a6b68 <memcpy>
            maxCurrentC1(payl);
 80a189a:	4601      	mov	r1, r0
            payl[length] = NULL;
 80a189c:	f800 8004 	strb.w	r8, [r0, r4]
            maxCurrentC1(payl);
 80a18a0:	4638      	mov	r0, r7
 80a18a2:	f002 fc83 	bl	80a41ac <_ZN6StringC1EPKc>
 80a18a6:	4638      	mov	r0, r7
 80a18a8:	f7fe fc4a 	bl	80a0140 <_Z12maxCurrentC16String>
 80a18ac:	e7b0      	b.n	80a1810 <_Z8callbackPcPhj+0xb8>
         if ((strcmp(topic, "HANevse/maxC2")==0) && !TESTCASE )
 80a18ae:	4628      	mov	r0, r5
 80a18b0:	491f      	ldr	r1, [pc, #124]	; (80a1930 <_Z8callbackPcPhj+0x1d8>)
 80a18b2:	f005 f993 	bl	80a6bdc <strcmp>
 80a18b6:	2800      	cmp	r0, #0
 80a18b8:	f47f af7d 	bne.w	80a17b6 <_Z8callbackPcPhj+0x5e>
 80a18bc:	4b16      	ldr	r3, [pc, #88]	; (80a1918 <_Z8callbackPcPhj+0x1c0>)
 80a18be:	781d      	ldrb	r5, [r3, #0]
 80a18c0:	2d00      	cmp	r5, #0
 80a18c2:	f47f af78 	bne.w	80a17b6 <_Z8callbackPcPhj+0x5e>
            char payl[length+1];
 80a18c6:	f104 0308 	add.w	r3, r4, #8
 80a18ca:	f023 0307 	bic.w	r3, r3, #7
            maxCurrentC2(payl);
 80a18ce:	46e8      	mov	r8, sp
            char payl[length+1];
 80a18d0:	ebad 0d03 	sub.w	sp, sp, r3
 80a18d4:	ab02      	add	r3, sp, #8
            memcpy(payl, payload, length);
 80a18d6:	4622      	mov	r2, r4
 80a18d8:	4618      	mov	r0, r3
 80a18da:	4631      	mov	r1, r6
 80a18dc:	f005 f944 	bl	80a6b68 <memcpy>
            maxCurrentC2(payl);
 80a18e0:	4601      	mov	r1, r0
            payl[length] = NULL;
 80a18e2:	5505      	strb	r5, [r0, r4]
            maxCurrentC2(payl);
 80a18e4:	4638      	mov	r0, r7
 80a18e6:	f002 fc61 	bl	80a41ac <_ZN6StringC1EPKc>
 80a18ea:	4638      	mov	r0, r7
 80a18ec:	f7fe fc80 	bl	80a01f0 <_Z12maxCurrentC26String>
 80a18f0:	4638      	mov	r0, r7
 80a18f2:	f002 fc11 	bl	80a4118 <_ZN6StringD1Ev>
 80a18f6:	46c5      	mov	sp, r8
}
 80a18f8:	e75d      	b.n	80a17b6 <_Z8callbackPcPhj+0x5e>
 80a18fa:	bf00      	nop
 80a18fc:	20000568 	.word	0x20000568
 80a1900:	080a85fc 	.word	0x080a85fc
 80a1904:	080a85ff 	.word	0x080a85ff
 80a1908:	20000008 	.word	0x20000008
 80a190c:	2000058c 	.word	0x2000058c
 80a1910:	080a8421 	.word	0x080a8421
 80a1914:	080a840d 	.word	0x080a840d
 80a1918:	20000330 	.word	0x20000330
 80a191c:	080a8433 	.word	0x080a8433
 80a1920:	080a8447 	.word	0x080a8447
 80a1924:	080a858a 	.word	0x080a858a
 80a1928:	080a845b 	.word	0x080a845b
 80a192c:	080a846f 	.word	0x080a846f
 80a1930:	080a847d 	.word	0x080a847d

080a1934 <_ZN7MFRC522C1Ehh>:

/**
 * Constructor.
 * Prepares the output pins.
 */
MFRC522::MFRC522(	byte chipSelectPin,		///< Arduino pin connected to MFRC522's SPI slave select input (Pin 24, NSS, active low)
 80a1934:	b538      	push	{r3, r4, r5, lr}
 80a1936:	4604      	mov	r4, r0
 80a1938:	4615      	mov	r5, r2
 80a193a:	4608      	mov	r0, r1
					byte resetPowerDownPin	///< Arduino pin connected to MFRC522's reset and power down input (Pin 6, NRSTPD, active low)
				) {
	// Set the chipSelectPin as digital output, do not select the slave yet
	_chipSelectPin = chipSelectPin;
 80a193c:	7321      	strb	r1, [r4, #12]
	pinMode(_chipSelectPin, OUTPUT);
 80a193e:	2101      	movs	r1, #1
 80a1940:	f003 fcda 	bl	80a52f8 <pinMode>
	digitalWrite(_chipSelectPin, HIGH);
 80a1944:	7b20      	ldrb	r0, [r4, #12]
 80a1946:	2101      	movs	r1, #1
 80a1948:	f003 fce7 	bl	80a531a <digitalWrite>
	
	// Set the resetPowerDownPin as digital output, do not reset or power down.
	_resetPowerDownPin = resetPowerDownPin;
	pinMode(_resetPowerDownPin, OUTPUT);
 80a194c:	4628      	mov	r0, r5
 80a194e:	2101      	movs	r1, #1
	_resetPowerDownPin = resetPowerDownPin;
 80a1950:	7365      	strb	r5, [r4, #13]
	pinMode(_resetPowerDownPin, OUTPUT);
 80a1952:	f003 fcd1 	bl	80a52f8 <pinMode>
	digitalWrite(_resetPowerDownPin, LOW);
 80a1956:	7b60      	ldrb	r0, [r4, #13]
 80a1958:	2100      	movs	r1, #0
 80a195a:	f003 fcde 	bl	80a531a <digitalWrite>
	
	// Set SPI bus to work with MFRC522 chip.
	//setSPIConfig();
} // End constructor
 80a195e:	4620      	mov	r0, r4
 80a1960:	bd38      	pop	{r3, r4, r5, pc}
	...

080a1964 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
    static SPIClass& instance() {
 80a1964:	b538      	push	{r3, r4, r5, lr}
        static SPIClass instance(Interface);
 80a1966:	4d0c      	ldr	r5, [pc, #48]	; (80a1998 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
 80a1968:	7829      	ldrb	r1, [r5, #0]
 80a196a:	f3bf 8f5b 	dmb	ish
 80a196e:	f011 0401 	ands.w	r4, r1, #1
 80a1972:	d10f      	bne.n	80a1994 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>
 80a1974:	4628      	mov	r0, r5
 80a1976:	f7fe fb96 	bl	80a00a6 <__cxa_guard_acquire>
 80a197a:	b158      	cbz	r0, 80a1994 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>
 80a197c:	4621      	mov	r1, r4
 80a197e:	4807      	ldr	r0, [pc, #28]	; (80a199c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x38>)
 80a1980:	f002 f839 	bl	80a39f6 <_ZN8SPIClassC1E19hal_spi_interface_t>
 80a1984:	4628      	mov	r0, r5
 80a1986:	f7fe fb93 	bl	80a00b0 <__cxa_guard_release>
 80a198a:	4a05      	ldr	r2, [pc, #20]	; (80a19a0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x3c>)
 80a198c:	4905      	ldr	r1, [pc, #20]	; (80a19a4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x40>)
 80a198e:	4803      	ldr	r0, [pc, #12]	; (80a199c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x38>)
 80a1990:	f003 fd48 	bl	80a5424 <__aeabi_atexit>
    }
 80a1994:	4801      	ldr	r0, [pc, #4]	; (80a199c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x38>)
 80a1996:	bd38      	pop	{r3, r4, r5, pc}
 80a1998:	20000244 	.word	0x20000244
 80a199c:	20000248 	.word	0x20000248
 80a19a0:	20000240 	.word	0x20000240
 80a19a4:	080a02cb 	.word	0x080a02cb

080a19a8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>:
        return instance().setClockSpeed(value, scale);
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
 80a19a8:	b510      	push	{r4, lr}
 80a19aa:	4604      	mov	r4, r0
        return instance().transfer(data);
 80a19ac:	f7ff ffda 	bl	80a1964 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 80a19b0:	4621      	mov	r1, r4
    }
 80a19b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return instance().transfer(data);
 80a19b6:	f002 b83b 	b.w	80a3a30 <_ZN8SPIClass8transferEh>

080a19ba <_ZN7MFRC52217PCD_WriteRegisterEhh>:
 * Writes a byte to the specified register in the MFRC522 chip.
 * The interface is described in the datasheet section 8.1.2.
 */
void MFRC522::PCD_WriteRegister(	byte reg,		///< The register to write to. One of the PCD_Register enums.
									byte value		///< The value to write.
								) {
 80a19ba:	b570      	push	{r4, r5, r6, lr}
 80a19bc:	460e      	mov	r6, r1
 80a19be:	4615      	mov	r5, r2
 80a19c0:	4604      	mov	r4, r0
	digitalWrite(_chipSelectPin, LOW);		// Select slave
 80a19c2:	2100      	movs	r1, #0
 80a19c4:	7b00      	ldrb	r0, [r0, #12]
 80a19c6:	f003 fca8 	bl	80a531a <digitalWrite>
	SPI.transfer(reg & 0x7E);					// MSB == 0 is for writing. LSB is not used in address. Datasheet section 8.1.2.3.
 80a19ca:	f006 007e 	and.w	r0, r6, #126	; 0x7e
 80a19ce:	f7ff ffeb 	bl	80a19a8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
	SPI.transfer(value);
 80a19d2:	4628      	mov	r0, r5
 80a19d4:	f7ff ffe8 	bl	80a19a8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
	digitalWrite(_chipSelectPin, HIGH);		// Release slave again
 80a19d8:	7b20      	ldrb	r0, [r4, #12]
 80a19da:	2101      	movs	r1, #1
} // End PCD_WriteRegister()
 80a19dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	digitalWrite(_chipSelectPin, HIGH);		// Release slave again
 80a19e0:	f003 bc9b 	b.w	80a531a <digitalWrite>

080a19e4 <_ZN7MFRC52217PCD_WriteRegisterEhhPh>:
 * The interface is described in the datasheet section 8.1.2.
 */
void MFRC522::PCD_WriteRegister(	byte reg,		///< The register to write to. One of the PCD_Register enums.
									byte count,		///< The number of bytes to write to the register
									byte *values	///< The values to write. Byte array.
								) {
 80a19e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a19e6:	460f      	mov	r7, r1
 80a19e8:	4606      	mov	r6, r0
	digitalWrite(_chipSelectPin, LOW);		// Select slave
 80a19ea:	2100      	movs	r1, #0
 80a19ec:	7b00      	ldrb	r0, [r0, #12]
								) {
 80a19ee:	4615      	mov	r5, r2
 80a19f0:	461c      	mov	r4, r3
	digitalWrite(_chipSelectPin, LOW);		// Select slave
 80a19f2:	f003 fc92 	bl	80a531a <digitalWrite>
	SPI.transfer(reg & 0x7E);				// MSB == 0 is for writing. LSB is not used in address. Datasheet section 8.1.2.3.
 80a19f6:	f007 007e 	and.w	r0, r7, #126	; 0x7e
 80a19fa:	f7ff ffd5 	bl	80a19a8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
	for (byte index = 0; index < count; index++) {
 80a19fe:	4425      	add	r5, r4
 80a1a00:	42ac      	cmp	r4, r5
 80a1a02:	d004      	beq.n	80a1a0e <_ZN7MFRC52217PCD_WriteRegisterEhhPh+0x2a>
		SPI.transfer(values[index]);
 80a1a04:	f814 0b01 	ldrb.w	r0, [r4], #1
 80a1a08:	f7ff ffce 	bl	80a19a8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
	for (byte index = 0; index < count; index++) {
 80a1a0c:	e7f8      	b.n	80a1a00 <_ZN7MFRC52217PCD_WriteRegisterEhhPh+0x1c>
	}
	digitalWrite(_chipSelectPin, HIGH);		// Release slave again
 80a1a0e:	7b30      	ldrb	r0, [r6, #12]
 80a1a10:	2101      	movs	r1, #1
} // End PCD_WriteRegister()
 80a1a12:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	digitalWrite(_chipSelectPin, HIGH);		// Release slave again
 80a1a16:	f003 bc80 	b.w	80a531a <digitalWrite>

080a1a1a <_ZN7MFRC52216PCD_ReadRegisterEh>:
/**
 * Reads a byte from the specified register in the MFRC522 chip.
 * The interface is described in the datasheet section 8.1.2.
 */
byte MFRC522::PCD_ReadRegister(	byte reg	///< The register to read from. One of the PCD_Register enums.
								) {
 80a1a1a:	b538      	push	{r3, r4, r5, lr}
 80a1a1c:	460c      	mov	r4, r1
 80a1a1e:	4605      	mov	r5, r0
	byte value;
	digitalWrite(_chipSelectPin, LOW);			// Select slave
 80a1a20:	2100      	movs	r1, #0
 80a1a22:	7b00      	ldrb	r0, [r0, #12]
	SPI.transfer(0x80 | (reg & 0x7E));			// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
 80a1a24:	f004 047e 	and.w	r4, r4, #126	; 0x7e
	digitalWrite(_chipSelectPin, LOW);			// Select slave
 80a1a28:	f003 fc77 	bl	80a531a <digitalWrite>
	SPI.transfer(0x80 | (reg & 0x7E));			// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
 80a1a2c:	f044 0080 	orr.w	r0, r4, #128	; 0x80
 80a1a30:	f7ff ffba 	bl	80a19a8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
	value = SPI.transfer(0);					// Read the value back. Send 0 to stop reading.
 80a1a34:	2000      	movs	r0, #0
 80a1a36:	f7ff ffb7 	bl	80a19a8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
 80a1a3a:	4604      	mov	r4, r0
	digitalWrite(_chipSelectPin, HIGH);			// Release slave again
 80a1a3c:	2101      	movs	r1, #1
 80a1a3e:	7b28      	ldrb	r0, [r5, #12]
 80a1a40:	f003 fc6b 	bl	80a531a <digitalWrite>
	return value;
} // End PCD_ReadRegister()
 80a1a44:	4620      	mov	r0, r4
 80a1a46:	bd38      	pop	{r3, r4, r5, pc}

080a1a48 <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>:
/**
 * Sets the bits given in mask in register reg.
 */
void MFRC522::PCD_SetRegisterBitMask(	byte reg,	///< The register to update. One of the PCD_Register enums.
										byte mask	///< The bits to set.
									) { 
 80a1a48:	b570      	push	{r4, r5, r6, lr}
 80a1a4a:	4604      	mov	r4, r0
 80a1a4c:	460d      	mov	r5, r1
 80a1a4e:	4616      	mov	r6, r2
	byte tmp;
	tmp = PCD_ReadRegister(reg);
 80a1a50:	f7ff ffe3 	bl	80a1a1a <_ZN7MFRC52216PCD_ReadRegisterEh>
	PCD_WriteRegister(reg, tmp | mask);			// set bit mask
 80a1a54:	ea40 0206 	orr.w	r2, r0, r6
 80a1a58:	4629      	mov	r1, r5
 80a1a5a:	4620      	mov	r0, r4
} // End PCD_SetRegisterBitMask()
 80a1a5c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	PCD_WriteRegister(reg, tmp | mask);			// set bit mask
 80a1a60:	b2d2      	uxtb	r2, r2
 80a1a62:	f7ff bfaa 	b.w	80a19ba <_ZN7MFRC52217PCD_WriteRegisterEhh>

080a1a66 <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>:
/**
 * Clears the bits given in mask from register reg.
 */
void MFRC522::PCD_ClearRegisterBitMask(	byte reg,	///< The register to update. One of the PCD_Register enums.
										byte mask	///< The bits to clear.
									  ) {
 80a1a66:	b570      	push	{r4, r5, r6, lr}
 80a1a68:	4604      	mov	r4, r0
 80a1a6a:	460d      	mov	r5, r1
 80a1a6c:	4616      	mov	r6, r2
	byte tmp;
	tmp = PCD_ReadRegister(reg);
 80a1a6e:	f7ff ffd4 	bl	80a1a1a <_ZN7MFRC52216PCD_ReadRegisterEh>
	PCD_WriteRegister(reg, tmp & (~mask));		// clear bit mask
 80a1a72:	ea20 0206 	bic.w	r2, r0, r6
 80a1a76:	4629      	mov	r1, r5
 80a1a78:	4620      	mov	r0, r4
} // End PCD_ClearRegisterBitMask()
 80a1a7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	PCD_WriteRegister(reg, tmp & (~mask));		// clear bit mask
 80a1a7e:	b2d2      	uxtb	r2, r2
 80a1a80:	f7ff bf9b 	b.w	80a19ba <_ZN7MFRC52217PCD_WriteRegisterEhh>

080a1a84 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>:
 * @return STATUS_OK on success, STATUS_??? otherwise.
 */
byte MFRC522::PCD_CalculateCRC(	byte *data,		///< In: Pointer to the data to transfer to the FIFO for CRC calculation.
								byte length,	///< In: The number of bytes to transfer.
								byte *result	///< Out: Pointer to result buffer. Result is written to result[0..1], low byte first.
					 ) {
 80a1a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1a86:	4604      	mov	r4, r0
 80a1a88:	4615      	mov	r5, r2
 80a1a8a:	460f      	mov	r7, r1
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop any active command.
 80a1a8c:	2200      	movs	r2, #0
 80a1a8e:	2102      	movs	r1, #2
					 ) {
 80a1a90:	461e      	mov	r6, r3
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop any active command.
 80a1a92:	f7ff ff92 	bl	80a19ba <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(DivIrqReg, 0x04);					// Clear the CRCIRq interrupt request bit
 80a1a96:	2204      	movs	r2, #4
 80a1a98:	210a      	movs	r1, #10
 80a1a9a:	4620      	mov	r0, r4
 80a1a9c:	f7ff ff8d 	bl	80a19ba <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_SetRegisterBitMask(FIFOLevelReg, 0x80);		// FlushBuffer = 1, FIFO initialization
 80a1aa0:	2280      	movs	r2, #128	; 0x80
 80a1aa2:	2114      	movs	r1, #20
 80a1aa4:	4620      	mov	r0, r4
 80a1aa6:	f7ff ffcf 	bl	80a1a48 <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>
	PCD_WriteRegister(FIFODataReg, length, data);		// Write data to the FIFO
 80a1aaa:	462a      	mov	r2, r5
 80a1aac:	463b      	mov	r3, r7
 80a1aae:	2112      	movs	r1, #18
 80a1ab0:	4620      	mov	r0, r4
 80a1ab2:	f7ff ff97 	bl	80a19e4 <_ZN7MFRC52217PCD_WriteRegisterEhhPh>
	PCD_WriteRegister(CommandReg, PCD_CalcCRC);		// Start the calculation
 80a1ab6:	2203      	movs	r2, #3
 80a1ab8:	2102      	movs	r1, #2
 80a1aba:	4620      	mov	r0, r4
 80a1abc:	f7ff ff7d 	bl	80a19ba <_ZN7MFRC52217PCD_WriteRegisterEhh>
 80a1ac0:	f241 3588 	movw	r5, #5000	; 0x1388
	
	// Wait for the CRC calculation to complete. Each iteration of the while-loop takes 17.73�s.
	word i = 5000;
	byte n;
	while (1) {
		n = PCD_ReadRegister(DivIrqReg);	// DivIrqReg[7..0] bits are: Set2 reserved reserved MfinActIRq   reserved CRCIRq reserved reserved
 80a1ac4:	210a      	movs	r1, #10
 80a1ac6:	4620      	mov	r0, r4
 80a1ac8:	f7ff ffa7 	bl	80a1a1a <_ZN7MFRC52216PCD_ReadRegisterEh>
		if (n & 0x04) {						// CRCIRq bit set - calculation done
 80a1acc:	0743      	lsls	r3, r0, #29
 80a1ace:	d405      	bmi.n	80a1adc <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x58>
			break;
		}
		if (--i == 0) {						// The emergency break. We will eventually terminate on this one after 89ms. Communication with the MFRC522 might be down.
 80a1ad0:	3d01      	subs	r5, #1
 80a1ad2:	b2ad      	uxth	r5, r5
 80a1ad4:	2d00      	cmp	r5, #0
 80a1ad6:	d1f5      	bne.n	80a1ac4 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x40>
			return STATUS_TIMEOUT;
 80a1ad8:	2004      	movs	r0, #4
 80a1ada:	e00f      	b.n	80a1afc <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x78>
		}
	}
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop calculating CRC for new content in the FIFO.
 80a1adc:	2200      	movs	r2, #0
 80a1ade:	2102      	movs	r1, #2
 80a1ae0:	4620      	mov	r0, r4
 80a1ae2:	f7ff ff6a 	bl	80a19ba <_ZN7MFRC52217PCD_WriteRegisterEhh>
	
	// Transfer the result from the registers to the result buffer
	result[0] = PCD_ReadRegister(CRCResultRegL);
 80a1ae6:	2144      	movs	r1, #68	; 0x44
 80a1ae8:	4620      	mov	r0, r4
 80a1aea:	f7ff ff96 	bl	80a1a1a <_ZN7MFRC52216PCD_ReadRegisterEh>
	result[1] = PCD_ReadRegister(CRCResultRegH);
 80a1aee:	2142      	movs	r1, #66	; 0x42
	result[0] = PCD_ReadRegister(CRCResultRegL);
 80a1af0:	7030      	strb	r0, [r6, #0]
	result[1] = PCD_ReadRegister(CRCResultRegH);
 80a1af2:	4620      	mov	r0, r4
 80a1af4:	f7ff ff91 	bl	80a1a1a <_ZN7MFRC52216PCD_ReadRegisterEh>
 80a1af8:	7070      	strb	r0, [r6, #1]
	return STATUS_OK;
 80a1afa:	2001      	movs	r0, #1
} // End PCD_CalculateCRC()
 80a1afc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1afe <_ZN7MFRC5229PCD_ResetEv>:
} // End PCD_Init()

/**
 * Performs a soft reset on the MFRC522 chip and waits for it to be ready again.
 */
void MFRC522::PCD_Reset() {
 80a1afe:	b510      	push	{r4, lr}
	PCD_WriteRegister(CommandReg, PCD_SoftReset);	// Issue the SoftReset command.
 80a1b00:	220f      	movs	r2, #15
 80a1b02:	2102      	movs	r1, #2
void MFRC522::PCD_Reset() {
 80a1b04:	4604      	mov	r4, r0
	PCD_WriteRegister(CommandReg, PCD_SoftReset);	// Issue the SoftReset command.
 80a1b06:	f7ff ff58 	bl	80a19ba <_ZN7MFRC52217PCD_WriteRegisterEhh>
	// The datasheet does not mention how long the SoftRest command takes to complete.
	// But the MFRC522 might have been in soft power-down mode (triggered by bit 4 of CommandReg) 
	// Section 8.8.2 in the datasheet says the oscillator start-up time is the start up time of the crystal + 37,74�s. Let us be generous: 50ms.
	delay(50);
 80a1b0a:	2032      	movs	r0, #50	; 0x32
 80a1b0c:	f002 ff3e 	bl	80a498c <delay>
	// Wait for the PowerDown bit in CommandReg to be cleared
	while (PCD_ReadRegister(CommandReg) & (1<<4)) {
 80a1b10:	2102      	movs	r1, #2
 80a1b12:	4620      	mov	r0, r4
 80a1b14:	f7ff ff81 	bl	80a1a1a <_ZN7MFRC52216PCD_ReadRegisterEh>
 80a1b18:	06c3      	lsls	r3, r0, #27
 80a1b1a:	d4f9      	bmi.n	80a1b10 <_ZN7MFRC5229PCD_ResetEv+0x12>
		// PCD still restarting - unlikely after waiting 50ms, but better safe than sorry.
	}
} // End PCD_Reset()
 80a1b1c:	bd10      	pop	{r4, pc}

080a1b1e <_ZN7MFRC52213PCD_AntennaOnEv>:

/**
 * Turns the antenna on by enabling pins TX1 and TX2.
 * After a reset these pins disabled.
 */
void MFRC522::PCD_AntennaOn() {
 80a1b1e:	b510      	push	{r4, lr}
	byte value = PCD_ReadRegister(TxControlReg);
 80a1b20:	2128      	movs	r1, #40	; 0x28
void MFRC522::PCD_AntennaOn() {
 80a1b22:	4604      	mov	r4, r0
	byte value = PCD_ReadRegister(TxControlReg);
 80a1b24:	f7ff ff79 	bl	80a1a1a <_ZN7MFRC52216PCD_ReadRegisterEh>
	if ((value & 0x03) != 0x03) {
 80a1b28:	f000 0303 	and.w	r3, r0, #3
 80a1b2c:	2b03      	cmp	r3, #3
 80a1b2e:	d008      	beq.n	80a1b42 <_ZN7MFRC52213PCD_AntennaOnEv+0x24>
		PCD_WriteRegister(TxControlReg, value | 0x03);
 80a1b30:	f040 0203 	orr.w	r2, r0, #3
 80a1b34:	2128      	movs	r1, #40	; 0x28
 80a1b36:	4620      	mov	r0, r4
	}
} // End PCD_AntennaOn()
 80a1b38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		PCD_WriteRegister(TxControlReg, value | 0x03);
 80a1b3c:	b2d2      	uxtb	r2, r2
 80a1b3e:	f7ff bf3c 	b.w	80a19ba <_ZN7MFRC52217PCD_WriteRegisterEhh>
} // End PCD_AntennaOn()
 80a1b42:	bd10      	pop	{r4, pc}

080a1b44 <_ZN7MFRC5228PCD_InitEv>:
void MFRC522::PCD_Init() {
 80a1b44:	b510      	push	{r4, lr}
 80a1b46:	4604      	mov	r4, r0
	if (digitalRead(_resetPowerDownPin) == LOW) { //The MFRC522 chip is in power down mode.
 80a1b48:	7b40      	ldrb	r0, [r0, #13]
 80a1b4a:	f003 fbff 	bl	80a534c <digitalRead>
 80a1b4e:	bb48      	cbnz	r0, 80a1ba4 <_ZN7MFRC5228PCD_InitEv+0x60>
		digitalWrite(_resetPowerDownPin, HIGH);	// Exit power down mode. This triggers a hard reset.
 80a1b50:	7b60      	ldrb	r0, [r4, #13]
 80a1b52:	2101      	movs	r1, #1
 80a1b54:	f003 fbe1 	bl	80a531a <digitalWrite>
		delay(50);
 80a1b58:	2032      	movs	r0, #50	; 0x32
 80a1b5a:	f002 ff17 	bl	80a498c <delay>
    PCD_WriteRegister(TModeReg, 0x80);			// TAuto=1; timer starts automatically at the end of the transmission in all communication modes at all speeds
 80a1b5e:	4620      	mov	r0, r4
 80a1b60:	2280      	movs	r2, #128	; 0x80
 80a1b62:	2154      	movs	r1, #84	; 0x54
 80a1b64:	f7ff ff29 	bl	80a19ba <_ZN7MFRC52217PCD_WriteRegisterEhh>
    PCD_WriteRegister(TPrescalerReg, 0xA9);	// TPreScaler = TModeReg[3..0]:TPrescalerReg, ie 0x0A9 = 169 => f_timer=40kHz, ie a timer period of 25�s.
 80a1b68:	4620      	mov	r0, r4
 80a1b6a:	22a9      	movs	r2, #169	; 0xa9
 80a1b6c:	2156      	movs	r1, #86	; 0x56
 80a1b6e:	f7ff ff24 	bl	80a19ba <_ZN7MFRC52217PCD_WriteRegisterEhh>
    PCD_WriteRegister(TReloadRegH, 0x03);		// Reload timer with 0x3E8 = 1000, ie 25ms before timeout.
 80a1b72:	4620      	mov	r0, r4
 80a1b74:	2203      	movs	r2, #3
 80a1b76:	2158      	movs	r1, #88	; 0x58
 80a1b78:	f7ff ff1f 	bl	80a19ba <_ZN7MFRC52217PCD_WriteRegisterEhh>
    PCD_WriteRegister(TReloadRegL, 0xE8);
 80a1b7c:	4620      	mov	r0, r4
 80a1b7e:	22e8      	movs	r2, #232	; 0xe8
 80a1b80:	215a      	movs	r1, #90	; 0x5a
 80a1b82:	f7ff ff1a 	bl	80a19ba <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(TxASKReg, 0x40);		// Default 0x00. Force a 100 % ASK modulation independent of the ModGsPReg register setting
 80a1b86:	4620      	mov	r0, r4
 80a1b88:	2240      	movs	r2, #64	; 0x40
 80a1b8a:	212a      	movs	r1, #42	; 0x2a
 80a1b8c:	f7ff ff15 	bl	80a19ba <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(ModeReg, 0x3D);		// Default 0x3F. Set the preset value for the CRC coprocessor for the CalcCRC command to 0x6363 (ISO 14443-3 part 6.2.4)
 80a1b90:	4620      	mov	r0, r4
 80a1b92:	223d      	movs	r2, #61	; 0x3d
 80a1b94:	2122      	movs	r1, #34	; 0x22
 80a1b96:	f7ff ff10 	bl	80a19ba <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_AntennaOn();						// Enable the antenna driver pins TX1 and TX2 (they were disabled by the reset)
 80a1b9a:	4620      	mov	r0, r4
} // End PCD_Init()
 80a1b9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PCD_AntennaOn();						// Enable the antenna driver pins TX1 and TX2 (they were disabled by the reset)
 80a1ba0:	f7ff bfbd 	b.w	80a1b1e <_ZN7MFRC52213PCD_AntennaOnEv>
		PCD_Reset();
 80a1ba4:	4620      	mov	r0, r4
 80a1ba6:	f7ff ffaa 	bl	80a1afe <_ZN7MFRC5229PCD_ResetEv>
 80a1baa:	e7d8      	b.n	80a1b5e <_ZN7MFRC5228PCD_InitEv+0x1a>

080a1bac <_ZN7MFRC52218PCD_GetAntennaGainEv>:
 * NOTE: Return value scrubbed with (0x07<<4)=01110000b as RCFfgReg may use reserved bits.
 * 
 * @return Value of the RxGain, scrubbed to the 3 bits used.
 */
byte MFRC522::PCD_GetAntennaGain() {
	return PCD_ReadRegister(RFCfgReg) & (0x07<<4);
 80a1bac:	214c      	movs	r1, #76	; 0x4c
byte MFRC522::PCD_GetAntennaGain() {
 80a1bae:	b508      	push	{r3, lr}
	return PCD_ReadRegister(RFCfgReg) & (0x07<<4);
 80a1bb0:	f7ff ff33 	bl	80a1a1a <_ZN7MFRC52216PCD_ReadRegisterEh>
} // End PCD_GetAntennaGain()
 80a1bb4:	f000 0070 	and.w	r0, r0, #112	; 0x70
 80a1bb8:	bd08      	pop	{r3, pc}

080a1bba <_ZN7MFRC52218PCD_SetAntennaGainEh>:
/**
 * Set the MFRC522 Receiver Gain (RxGain) to value specified by given mask.
 * See 9.3.3.6 / table 98 in http://www.nxp.com/documents/data_sheet/MFRC522.pdf
 * NOTE: Given mask is scrubbed with (0x07<<4)=01110000b as RCFfgReg may use reserved bits.
 */
void MFRC522::PCD_SetAntennaGain(byte mask) {
 80a1bba:	b538      	push	{r3, r4, r5, lr}
 80a1bbc:	460d      	mov	r5, r1
 80a1bbe:	4604      	mov	r4, r0
	if (PCD_GetAntennaGain() != mask) {						// only bother if there is a change
 80a1bc0:	f7ff fff4 	bl	80a1bac <_ZN7MFRC52218PCD_GetAntennaGainEv>
 80a1bc4:	42a8      	cmp	r0, r5
 80a1bc6:	d00c      	beq.n	80a1be2 <_ZN7MFRC52218PCD_SetAntennaGainEh+0x28>
		PCD_ClearRegisterBitMask(RFCfgReg, (0x07<<4));		// clear needed to allow 000 pattern
 80a1bc8:	4620      	mov	r0, r4
 80a1bca:	2270      	movs	r2, #112	; 0x70
 80a1bcc:	214c      	movs	r1, #76	; 0x4c
 80a1bce:	f7ff ff4a 	bl	80a1a66 <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>
		PCD_SetRegisterBitMask(RFCfgReg, mask & (0x07<<4));	// only set RxGain[2:0] bits
 80a1bd2:	4620      	mov	r0, r4
 80a1bd4:	f005 0270 	and.w	r2, r5, #112	; 0x70
 80a1bd8:	214c      	movs	r1, #76	; 0x4c
	}
} // End PCD_SetAntennaGain()
 80a1bda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		PCD_SetRegisterBitMask(RFCfgReg, mask & (0x07<<4));	// only set RxGain[2:0] bits
 80a1bde:	f7ff bf33 	b.w	80a1a48 <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>
} // End PCD_SetAntennaGain()
 80a1be2:	bd38      	pop	{r3, r4, r5, pc}

080a1be4 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh>:
								) {
 80a1be4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a1be8:	4607      	mov	r7, r0
 80a1bea:	461e      	mov	r6, r3
	if (count == 0) {
 80a1bec:	4615      	mov	r5, r2
								) {
 80a1bee:	f89d 8030 	ldrb.w	r8, [sp, #48]	; 0x30
	if (count == 0) {
 80a1bf2:	2a00      	cmp	r2, #0
 80a1bf4:	d042      	beq.n	80a1c7c <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x98>
	byte address = 0x80 | (reg & 0x7E);		// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
 80a1bf6:	f001 017e 	and.w	r1, r1, #126	; 0x7e
	digitalWrite(_chipSelectPin, LOW);		// Select slave
 80a1bfa:	7b00      	ldrb	r0, [r0, #12]
	byte address = 0x80 | (reg & 0x7E);		// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
 80a1bfc:	f041 0980 	orr.w	r9, r1, #128	; 0x80
	digitalWrite(_chipSelectPin, LOW);		// Select slave
 80a1c00:	2100      	movs	r1, #0
 80a1c02:	f003 fb8a 	bl	80a531a <digitalWrite>
	SPI.transfer(address);					// Tell MFRC522 which address we want to read
 80a1c06:	4648      	mov	r0, r9
 80a1c08:	f7ff fece 	bl	80a19a8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
 80a1c0c:	f04f 0b00 	mov.w	fp, #0
				mask |= (1 << i);
 80a1c10:	f04f 0a01 	mov.w	sl, #1
	count--;								// One read is performed outside of the loop
 80a1c14:	3d01      	subs	r5, #1
 80a1c16:	b2ed      	uxtb	r5, r5
	while (index < count) {
 80a1c18:	fa5f f48b 	uxtb.w	r4, fp
 80a1c1c:	42a5      	cmp	r5, r4
 80a1c1e:	d922      	bls.n	80a1c66 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x82>
		if (index == 0 && rxAlign) { // Only update bit positions rxAlign..7 in values[0]
 80a1c20:	b9dc      	cbnz	r4, 80a1c5a <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x76>
 80a1c22:	f1b8 0f00 	cmp.w	r8, #0
 80a1c26:	d018      	beq.n	80a1c5a <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x76>
 80a1c28:	4642      	mov	r2, r8
			for (byte i = rxAlign; i <= 7; i++) {
 80a1c2a:	b2d3      	uxtb	r3, r2
 80a1c2c:	2b07      	cmp	r3, #7
 80a1c2e:	b261      	sxtb	r1, r4
 80a1c30:	d805      	bhi.n	80a1c3e <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x5a>
				mask |= (1 << i);
 80a1c32:	fa0a f402 	lsl.w	r4, sl, r2
 80a1c36:	430c      	orrs	r4, r1
 80a1c38:	b2e4      	uxtb	r4, r4
			for (byte i = rxAlign; i <= 7; i++) {
 80a1c3a:	3201      	adds	r2, #1
 80a1c3c:	e7f5      	b.n	80a1c2a <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x46>
			byte value = SPI.transfer(address);	
 80a1c3e:	4648      	mov	r0, r9
 80a1c40:	9101      	str	r1, [sp, #4]
 80a1c42:	f7ff feb1 	bl	80a19a8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
			values[0] = (values[index] & ~mask) | (value & mask);
 80a1c46:	7833      	ldrb	r3, [r6, #0]
 80a1c48:	9901      	ldr	r1, [sp, #4]
 80a1c4a:	4004      	ands	r4, r0
 80a1c4c:	ea23 0301 	bic.w	r3, r3, r1
 80a1c50:	431c      	orrs	r4, r3
 80a1c52:	7034      	strb	r4, [r6, #0]
		index++;
 80a1c54:	f10b 0b01 	add.w	fp, fp, #1
	while (index < count) {
 80a1c58:	e7de      	b.n	80a1c18 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x34>
			values[index] = SPI.transfer(address);	// Read value and tell that we want to read the same address again.
 80a1c5a:	4648      	mov	r0, r9
 80a1c5c:	f7ff fea4 	bl	80a19a8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
 80a1c60:	f806 000b 	strb.w	r0, [r6, fp]
 80a1c64:	e7f6      	b.n	80a1c54 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x70>
	values[index] = SPI.transfer(0);			// Read the final byte. Send 0 to stop reading.
 80a1c66:	2000      	movs	r0, #0
 80a1c68:	f7ff fe9e 	bl	80a19a8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
	digitalWrite(_chipSelectPin, HIGH);			// Release slave again
 80a1c6c:	2101      	movs	r1, #1
	values[index] = SPI.transfer(0);			// Read the final byte. Send 0 to stop reading.
 80a1c6e:	5570      	strb	r0, [r6, r5]
	digitalWrite(_chipSelectPin, HIGH);			// Release slave again
 80a1c70:	7b38      	ldrb	r0, [r7, #12]
} // End PCD_ReadRegister()
 80a1c72:	b003      	add	sp, #12
 80a1c74:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	digitalWrite(_chipSelectPin, HIGH);			// Release slave again
 80a1c78:	f003 bb4f 	b.w	80a531a <digitalWrite>
} // End PCD_ReadRegister()
 80a1c7c:	b003      	add	sp, #12
 80a1c7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a1c82 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>:
										byte *backData,		///< NULL or pointer to buffer if data should be read back after executing the command.
										byte *backLen,		///< In: Max number of bytes to write to *backData. Out: The number of bytes returned.
										byte *validBits,	///< In/Out: The number of valid bits in the last byte. 0 for 8 valid bits.
										byte rxAlign,		///< In: Defines the bit position in backData[0] for the first bit received. Default 0.
										bool checkCRC		///< In: True => The last two bytes of the response is assumed to be a CRC_A that must be validated.
									 ) {
 80a1c82:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a1c86:	b089      	sub	sp, #36	; 0x24
 80a1c88:	9203      	str	r2, [sp, #12]
 80a1c8a:	f8dd 9054 	ldr.w	r9, [sp, #84]	; 0x54
 80a1c8e:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 80a1c92:	4604      	mov	r4, r0
 80a1c94:	e9dd 5613 	ldrd	r5, r6, [sp, #76]	; 0x4c
 80a1c98:	468a      	mov	sl, r1
 80a1c9a:	2700      	movs	r7, #0
 80a1c9c:	f89d b058 	ldrb.w	fp, [sp, #88]	; 0x58
 80a1ca0:	9204      	str	r2, [sp, #16]
	byte n, _validBits;
	unsigned int i;

	// Prepare values for BitFramingReg
	byte txLastBits = validBits ? *validBits : 0;
 80a1ca2:	f1b9 0f00 	cmp.w	r9, #0
 80a1ca6:	d03e      	beq.n	80a1d26 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xa4>
 80a1ca8:	f899 8000 	ldrb.w	r8, [r9]
	byte bitFraming	= (rxAlign << 4) + txLastBits;		// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
	
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop any active command.
 80a1cac:	2200      	movs	r2, #0
 80a1cae:	2102      	movs	r1, #2
 80a1cb0:	4620      	mov	r0, r4
 80a1cb2:	9305      	str	r3, [sp, #20]
 80a1cb4:	f7ff fe81 	bl	80a19ba <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(ComIrqReg, 0x7F);					// Clear all seven interrupt request bits
 80a1cb8:	227f      	movs	r2, #127	; 0x7f
 80a1cba:	2108      	movs	r1, #8
 80a1cbc:	4620      	mov	r0, r4
 80a1cbe:	f7ff fe7c 	bl	80a19ba <_ZN7MFRC52217PCD_WriteRegisterEhh>
	byte bitFraming	= (rxAlign << 4) + txLastBits;		// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
 80a1cc2:	eb08 180b 	add.w	r8, r8, fp, lsl #4
	PCD_SetRegisterBitMask(FIFOLevelReg, 0x80);		// FlushBuffer = 1, FIFO initialization
 80a1cc6:	2280      	movs	r2, #128	; 0x80
 80a1cc8:	2114      	movs	r1, #20
 80a1cca:	4620      	mov	r0, r4
 80a1ccc:	f7ff febc 	bl	80a1a48 <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>
	byte bitFraming	= (rxAlign << 4) + txLastBits;		// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
 80a1cd0:	fa5f f888 	uxtb.w	r8, r8
	PCD_WriteRegister(FIFODataReg, sendLen, sendData);	// Write sendData to the FIFO
 80a1cd4:	9b05      	ldr	r3, [sp, #20]
 80a1cd6:	2112      	movs	r1, #18
 80a1cd8:	4620      	mov	r0, r4
 80a1cda:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 80a1cde:	f7ff fe81 	bl	80a19e4 <_ZN7MFRC52217PCD_WriteRegisterEhhPh>
	PCD_WriteRegister(BitFramingReg, bitFraming);		// Bit adjustments
 80a1ce2:	4642      	mov	r2, r8
 80a1ce4:	211a      	movs	r1, #26
 80a1ce6:	4620      	mov	r0, r4
 80a1ce8:	f7ff fe67 	bl	80a19ba <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(CommandReg, command);			// Execute the command
 80a1cec:	4652      	mov	r2, sl
 80a1cee:	2102      	movs	r1, #2
 80a1cf0:	4620      	mov	r0, r4
 80a1cf2:	f7ff fe62 	bl	80a19ba <_ZN7MFRC52217PCD_WriteRegisterEhh>
	if (command == PCD_Transceive) 	{
 80a1cf6:	f1ba 0f0c 	cmp.w	sl, #12
 80a1cfa:	d104      	bne.n	80a1d06 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x84>
		PCD_SetRegisterBitMask(BitFramingReg, 0x80);	// StartSend=1, transmission of data starts
 80a1cfc:	2280      	movs	r2, #128	; 0x80
 80a1cfe:	211a      	movs	r1, #26
 80a1d00:	4620      	mov	r0, r4
 80a1d02:	f7ff fea1 	bl	80a1a48 <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>
	byte txLastBits = validBits ? *validBits : 0;
 80a1d06:	f44f 68fa 	mov.w	r8, #2000	; 0x7d0
	// Wait for the command to complete.
	// In PCD_Init() we set the TAuto flag in TModeReg. This means the timer automatically starts when the PCD stops transmitting.
	// Each iteration of the do-while-loop takes 17.86�s.
	i = 2000;
	while (1) {
		n = PCD_ReadRegister(ComIrqReg);	// ComIrqReg[7..0] bits are: Set1 TxIRq RxIRq IdleIRq   HiAlertIRq LoAlertIRq ErrIRq TimerIRq
 80a1d0a:	2108      	movs	r1, #8
 80a1d0c:	4620      	mov	r0, r4
 80a1d0e:	f7ff fe84 	bl	80a1a1a <_ZN7MFRC52216PCD_ReadRegisterEh>
		if (n & waitIRq) {					// One of the interrupts that signal success has been set.
 80a1d12:	9b03      	ldr	r3, [sp, #12]
 80a1d14:	4218      	tst	r0, r3
 80a1d16:	d108      	bne.n	80a1d2a <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xa8>
			break;
		}
		if (n & 0x01) {						// Timer interrupt - nothing received in 25ms
 80a1d18:	07c3      	lsls	r3, r0, #31
 80a1d1a:	d402      	bmi.n	80a1d22 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xa0>
			return STATUS_TIMEOUT;
		}
		if (--i == 0) {						// The emergency break. If all other condions fail we will eventually terminate on this one after 35.7ms. Communication with the MFRC522 might be down.
 80a1d1c:	f1b8 0801 	subs.w	r8, r8, #1
 80a1d20:	d1f3      	bne.n	80a1d0a <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x88>
			return STATUS_TIMEOUT;
 80a1d22:	2004      	movs	r0, #4
 80a1d24:	e04d      	b.n	80a1dc2 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
	byte txLastBits = validBits ? *validBits : 0;
 80a1d26:	46c8      	mov	r8, r9
 80a1d28:	e7c0      	b.n	80a1cac <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x2a>
			return STATUS_TIMEOUT;
		}
	}
	
	// Stop now if any errors except collisions were detected.
	byte errorRegValue = PCD_ReadRegister(ErrorReg); // ErrorReg[7..0] bits are: WrErr TempErr reserved BufferOvfl   CollErr CRCErr ParityErr ProtocolErr
 80a1d2a:	210c      	movs	r1, #12
 80a1d2c:	4620      	mov	r0, r4
 80a1d2e:	f7ff fe74 	bl	80a1a1a <_ZN7MFRC52216PCD_ReadRegisterEh>
	if (errorRegValue & 0x13) {	 // BufferOvfl ParityErr ProtocolErr
 80a1d32:	f010 0f13 	tst.w	r0, #19
	byte errorRegValue = PCD_ReadRegister(ErrorReg); // ErrorReg[7..0] bits are: WrErr TempErr reserved BufferOvfl   CollErr CRCErr ParityErr ProtocolErr
 80a1d36:	4680      	mov	r8, r0
	if (errorRegValue & 0x13) {	 // BufferOvfl ParityErr ProtocolErr
 80a1d38:	d146      	bne.n	80a1dc8 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x146>
		return STATUS_ERROR;
	}	

	// If the caller wants data back, get it from the MFRC522.
	if (backData && backLen) {
 80a1d3a:	b1dd      	cbz	r5, 80a1d74 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xf2>
 80a1d3c:	b1d6      	cbz	r6, 80a1d74 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xf2>
		n = PCD_ReadRegister(FIFOLevelReg);						// Number of bytes in the FIFO
 80a1d3e:	2114      	movs	r1, #20
 80a1d40:	4620      	mov	r0, r4
 80a1d42:	f7ff fe6a 	bl	80a1a1a <_ZN7MFRC52216PCD_ReadRegisterEh>
		if (n > *backLen) {
 80a1d46:	7833      	ldrb	r3, [r6, #0]
		n = PCD_ReadRegister(FIFOLevelReg);						// Number of bytes in the FIFO
 80a1d48:	4602      	mov	r2, r0
		if (n > *backLen) {
 80a1d4a:	4283      	cmp	r3, r0
 80a1d4c:	d33e      	bcc.n	80a1dcc <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x14a>
			return STATUS_NO_ROOM;
		}
		*backLen = n;												// Number of bytes returned
 80a1d4e:	7030      	strb	r0, [r6, #0]
		PCD_ReadRegister(FIFODataReg, n, backData, rxAlign);		// Get received data from FIFO
 80a1d50:	462b      	mov	r3, r5
 80a1d52:	2112      	movs	r1, #18
 80a1d54:	4620      	mov	r0, r4
 80a1d56:	f8cd b000 	str.w	fp, [sp]
 80a1d5a:	f7ff ff43 	bl	80a1be4 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh>
		_validBits = PCD_ReadRegister(ControlReg) & 0x07;	// RxLastBits[2:0] indicates the number of valid bits in the last received byte. If this value is 000b, the whole byte is valid.
 80a1d5e:	2118      	movs	r1, #24
 80a1d60:	4620      	mov	r0, r4
 80a1d62:	f7ff fe5a 	bl	80a1a1a <_ZN7MFRC52216PCD_ReadRegisterEh>
 80a1d66:	f000 0707 	and.w	r7, r0, #7
		if (validBits) {
 80a1d6a:	f1b9 0f00 	cmp.w	r9, #0
 80a1d6e:	d001      	beq.n	80a1d74 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xf2>
			*validBits = _validBits;
 80a1d70:	f889 7000 	strb.w	r7, [r9]
		}
	}
	
	// Tell about collisions
	if (errorRegValue & 0x08) { // CollErr
 80a1d74:	f018 0f08 	tst.w	r8, #8
 80a1d78:	d12a      	bne.n	80a1dd0 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x14e>
		return STATUS_COLLISION;
	}
	
	// Perform CRC_A validation if requested.
	if (backData && backLen && checkCRC) {
 80a1d7a:	b35d      	cbz	r5, 80a1dd4 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x152>
 80a1d7c:	b356      	cbz	r6, 80a1dd4 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x152>
 80a1d7e:	9b04      	ldr	r3, [sp, #16]
 80a1d80:	b343      	cbz	r3, 80a1dd4 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x152>
		// In this case a MIFARE Classic NAK is not OK.
		if (*backLen == 1 && _validBits == 4) {
 80a1d82:	7832      	ldrb	r2, [r6, #0]
 80a1d84:	2a01      	cmp	r2, #1
 80a1d86:	d103      	bne.n	80a1d90 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x10e>
 80a1d88:	2f04      	cmp	r7, #4
 80a1d8a:	d125      	bne.n	80a1dd8 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x156>
			return STATUS_MIFARE_NACK;
 80a1d8c:	2009      	movs	r0, #9
 80a1d8e:	e018      	b.n	80a1dc2 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
		}
		// We need at least the CRC_A value and all 8 bits of the last byte must be received.
		if (*backLen < 2 || _validBits != 0) {
 80a1d90:	d922      	bls.n	80a1dd8 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x156>
 80a1d92:	bb0f      	cbnz	r7, 80a1dd8 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x156>
			return STATUS_CRC_WRONG;
		}
		// Verify CRC_A - do our own calculation and store the control in controlBuffer.
		byte controlBuffer[2]; 
		n = PCD_CalculateCRC(&backData[0], *backLen - 2, &controlBuffer[0]);
 80a1d94:	3a02      	subs	r2, #2
 80a1d96:	4629      	mov	r1, r5
 80a1d98:	4620      	mov	r0, r4
 80a1d9a:	ab07      	add	r3, sp, #28
 80a1d9c:	b2d2      	uxtb	r2, r2
 80a1d9e:	f7ff fe71 	bl	80a1a84 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
		if (n != STATUS_OK) {
 80a1da2:	2801      	cmp	r0, #1
 80a1da4:	d10d      	bne.n	80a1dc2 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
			return n;
		}
		if ((backData[*backLen - 2] != controlBuffer[0]) || (backData[*backLen - 1] != controlBuffer[1])) {
 80a1da6:	7833      	ldrb	r3, [r6, #0]
 80a1da8:	441d      	add	r5, r3
 80a1daa:	f815 2c02 	ldrb.w	r2, [r5, #-2]
 80a1dae:	f89d 301c 	ldrb.w	r3, [sp, #28]
 80a1db2:	429a      	cmp	r2, r3
 80a1db4:	d110      	bne.n	80a1dd8 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x156>
 80a1db6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80a1dba:	f89d 301d 	ldrb.w	r3, [sp, #29]
 80a1dbe:	429a      	cmp	r2, r3
 80a1dc0:	d10a      	bne.n	80a1dd8 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x156>
			return STATUS_CRC_WRONG;
		}
	}
	
	return STATUS_OK;
} // End PCD_CommunicateWithPICC()
 80a1dc2:	b009      	add	sp, #36	; 0x24
 80a1dc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return STATUS_ERROR;
 80a1dc8:	2002      	movs	r0, #2
 80a1dca:	e7fa      	b.n	80a1dc2 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
			return STATUS_NO_ROOM;
 80a1dcc:	2005      	movs	r0, #5
 80a1dce:	e7f8      	b.n	80a1dc2 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
		return STATUS_COLLISION;
 80a1dd0:	2003      	movs	r0, #3
 80a1dd2:	e7f6      	b.n	80a1dc2 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
	return STATUS_OK;
 80a1dd4:	2001      	movs	r0, #1
 80a1dd6:	e7f4      	b.n	80a1dc2 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
			return STATUS_CRC_WRONG;
 80a1dd8:	2008      	movs	r0, #8
 80a1dda:	e7f2      	b.n	80a1dc2 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>

080a1ddc <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>:
								 ) {
 80a1ddc:	b510      	push	{r4, lr}
 80a1dde:	b086      	sub	sp, #24
	return PCD_CommunicateWithPICC(PCD_Transceive, waitIRq, sendData, sendLen, backData, backLen, validBits, rxAlign, checkCRC);
 80a1de0:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
 80a1de4:	9200      	str	r2, [sp, #0]
 80a1de6:	9405      	str	r4, [sp, #20]
 80a1de8:	f89d 4028 	ldrb.w	r4, [sp, #40]	; 0x28
 80a1dec:	2230      	movs	r2, #48	; 0x30
 80a1dee:	9404      	str	r4, [sp, #16]
 80a1df0:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80a1df2:	9403      	str	r4, [sp, #12]
 80a1df4:	9c08      	ldr	r4, [sp, #32]
 80a1df6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80a1dfa:	460b      	mov	r3, r1
 80a1dfc:	210c      	movs	r1, #12
 80a1dfe:	f7ff ff40 	bl	80a1c82 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>
} // End PCD_TransceiveData()
 80a1e02:	b006      	add	sp, #24
 80a1e04:	bd10      	pop	{r4, pc}

080a1e06 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_>:
 * @return STATUS_OK on success, STATUS_??? otherwise.
 */ 
byte MFRC522::PICC_REQA_or_WUPA(	byte command, 		///< The command to send - PICC_CMD_REQA or PICC_CMD_WUPA
									byte *bufferATQA,	///< The buffer to store the ATQA (Answer to request) in
									byte *bufferSize	///< Buffer size, at least two bytes. Also number of bytes returned if STATUS_OK.
							   ) {
 80a1e06:	b570      	push	{r4, r5, r6, lr}
 80a1e08:	b088      	sub	sp, #32
 80a1e0a:	4606      	mov	r6, r0
 80a1e0c:	461c      	mov	r4, r3
	byte validBits;
	byte status;
	
	if (bufferATQA == NULL || *bufferSize < 2) {	// The ATQA response is 2 bytes long.
 80a1e0e:	4615      	mov	r5, r2
							   ) {
 80a1e10:	f88d 1017 	strb.w	r1, [sp, #23]
	if (bufferATQA == NULL || *bufferSize < 2) {	// The ATQA response is 2 bytes long.
 80a1e14:	b31a      	cbz	r2, 80a1e5e <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x58>
 80a1e16:	781b      	ldrb	r3, [r3, #0]
 80a1e18:	2b01      	cmp	r3, #1
 80a1e1a:	d920      	bls.n	80a1e5e <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x58>
		return STATUS_NO_ROOM;
	}
	PCD_ClearRegisterBitMask(CollReg, 0x80);			// ValuesAfterColl=1 => Bits received after collision are cleared.
 80a1e1c:	2280      	movs	r2, #128	; 0x80
 80a1e1e:	211c      	movs	r1, #28
 80a1e20:	f7ff fe21 	bl	80a1a66 <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>
	validBits = 7;										// For REQA and WUPA we need the short frame format - transmit only 7 bits of the last (and only) byte. TxLastBits = BitFramingReg[2..0]
 80a1e24:	2307      	movs	r3, #7
 80a1e26:	f88d 301f 	strb.w	r3, [sp, #31]
	status = PCD_TransceiveData(&command, 1, bufferATQA, bufferSize, &validBits);
 80a1e2a:	2300      	movs	r3, #0
 80a1e2c:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80a1e30:	f10d 031f 	add.w	r3, sp, #31
 80a1e34:	e9cd 4300 	strd	r4, r3, [sp]
 80a1e38:	2201      	movs	r2, #1
 80a1e3a:	462b      	mov	r3, r5
 80a1e3c:	4630      	mov	r0, r6
 80a1e3e:	f10d 0117 	add.w	r1, sp, #23
 80a1e42:	f7ff ffcb 	bl	80a1ddc <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
	if (status != STATUS_OK) {
 80a1e46:	2801      	cmp	r0, #1
 80a1e48:	d107      	bne.n	80a1e5a <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x54>
		return status;
	}
	if (*bufferSize != 2 || validBits != 0) {		// ATQA must be exactly 16 bits.
 80a1e4a:	7823      	ldrb	r3, [r4, #0]
 80a1e4c:	2b02      	cmp	r3, #2
 80a1e4e:	d108      	bne.n	80a1e62 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x5c>
 80a1e50:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80a1e54:	2b00      	cmp	r3, #0
		return STATUS_ERROR;
 80a1e56:	bf18      	it	ne
 80a1e58:	2002      	movne	r0, #2
	}
	return STATUS_OK;
} // End PICC_REQA_or_WUPA()
 80a1e5a:	b008      	add	sp, #32
 80a1e5c:	bd70      	pop	{r4, r5, r6, pc}
		return STATUS_NO_ROOM;
 80a1e5e:	2005      	movs	r0, #5
 80a1e60:	e7fb      	b.n	80a1e5a <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x54>
		return STATUS_ERROR;
 80a1e62:	2002      	movs	r0, #2
 80a1e64:	e7f9      	b.n	80a1e5a <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x54>

080a1e66 <_ZN7MFRC52213PICC_RequestAEPhS0_>:
							) {
 80a1e66:	4613      	mov	r3, r2
	return PICC_REQA_or_WUPA(PICC_CMD_REQA, bufferATQA, bufferSize);
 80a1e68:	460a      	mov	r2, r1
 80a1e6a:	2126      	movs	r1, #38	; 0x26
 80a1e6c:	f7ff bfcb 	b.w	80a1e06 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_>

080a1e70 <_ZN7MFRC52221PICC_IsNewCardPresentEv>:
 * 
 * @return bool
 */
bool MFRC522::PICC_IsNewCardPresent() {
	byte bufferATQA[2];
	byte bufferSize = sizeof(bufferATQA);
 80a1e70:	2302      	movs	r3, #2
bool MFRC522::PICC_IsNewCardPresent() {
 80a1e72:	b507      	push	{r0, r1, r2, lr}
	byte result = PICC_RequestA(bufferATQA, &bufferSize);
 80a1e74:	f10d 0203 	add.w	r2, sp, #3
 80a1e78:	a901      	add	r1, sp, #4
	byte bufferSize = sizeof(bufferATQA);
 80a1e7a:	f88d 3003 	strb.w	r3, [sp, #3]
	byte result = PICC_RequestA(bufferATQA, &bufferSize);
 80a1e7e:	f7ff fff2 	bl	80a1e66 <_ZN7MFRC52213PICC_RequestAEPhS0_>
	return (result == STATUS_OK || result == STATUS_COLLISION);
 80a1e82:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
} // End PICC_IsNewCardPresent()
 80a1e86:	1e43      	subs	r3, r0, #1
 80a1e88:	4258      	negs	r0, r3
 80a1e8a:	4158      	adcs	r0, r3
 80a1e8c:	b003      	add	sp, #12
 80a1e8e:	f85d fb04 	ldr.w	pc, [sp], #4

080a1e92 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh>:
						 ) {
 80a1e92:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (validBits > 80) {
 80a1e96:	2a50      	cmp	r2, #80	; 0x50
						 ) {
 80a1e98:	4682      	mov	sl, r0
 80a1e9a:	460f      	mov	r7, r1
 80a1e9c:	4690      	mov	r8, r2
 80a1e9e:	b08b      	sub	sp, #44	; 0x2c
	if (validBits > 80) {
 80a1ea0:	f200 813b 	bhi.w	80a211a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x288>
	PCD_ClearRegisterBitMask(CollReg, 0x80);			// ValuesAfterColl=1 => Bits received after collision are cleared.
 80a1ea4:	2280      	movs	r2, #128	; 0x80
 80a1ea6:	211c      	movs	r1, #28
 80a1ea8:	f7ff fddd 	bl	80a1a66 <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>
				buffer[0] = PICC_CMD_SEL_CL1;
 80a1eac:	2393      	movs	r3, #147	; 0x93
 80a1eae:	f88d 301c 	strb.w	r3, [sp, #28]
				useCascadeTag = validBits && uid->size > 4;	// When we know that the UID has more than 4 bytes
 80a1eb2:	f1b8 0f00 	cmp.w	r8, #0
 80a1eb6:	f000 80b9 	beq.w	80a202c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x19a>
 80a1eba:	783c      	ldrb	r4, [r7, #0]
 80a1ebc:	2c04      	cmp	r4, #4
 80a1ebe:	bf94      	ite	ls
 80a1ec0:	2300      	movls	r3, #0
 80a1ec2:	2301      	movhi	r3, #1
				useCascadeTag = validBits && uid->size > 7;	// When we know that the UID has more than 7 bytes
 80a1ec4:	2501      	movs	r5, #1
 80a1ec6:	2600      	movs	r6, #0
 80a1ec8:	e00b      	b.n	80a1ee2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x50>
				buffer[0] = PICC_CMD_SEL_CL2;
 80a1eca:	2395      	movs	r3, #149	; 0x95
 80a1ecc:	f88d 301c 	strb.w	r3, [sp, #28]
				useCascadeTag = validBits && uid->size > 7;	// When we know that the UID has more than 7 bytes
 80a1ed0:	f1b8 0f00 	cmp.w	r8, #0
 80a1ed4:	f000 80ac 	beq.w	80a2030 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x19e>
 80a1ed8:	783c      	ldrb	r4, [r7, #0]
 80a1eda:	2c07      	cmp	r4, #7
 80a1edc:	bf94      	ite	ls
 80a1ede:	2300      	movls	r3, #0
 80a1ee0:	2301      	movhi	r3, #1
		currentLevelKnownBits = validBits - (8 * uidIndex);
 80a1ee2:	eba8 04c6 	sub.w	r4, r8, r6, lsl #3
 80a1ee6:	b264      	sxtb	r4, r4
		if (currentLevelKnownBits < 0) {
 80a1ee8:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
		if (useCascadeTag) {
 80a1eec:	2b00      	cmp	r3, #0
 80a1eee:	f000 80a1 	beq.w	80a2034 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1a2>
			buffer[index++] = PICC_CMD_CT;
 80a1ef2:	2288      	movs	r2, #136	; 0x88
 80a1ef4:	2103      	movs	r1, #3
 80a1ef6:	f88d 201e 	strb.w	r2, [sp, #30]
		byte bytesToCopy = currentLevelKnownBits / 8 + (currentLevelKnownBits % 8 ? 1 : 0); // The number of bytes needed to represent the known bits for this level.
 80a1efa:	f014 0207 	ands.w	r2, r4, #7
 80a1efe:	bf18      	it	ne
 80a1f00:	2201      	movne	r2, #1
 80a1f02:	eb02 02e4 	add.w	r2, r2, r4, asr #3
		if (bytesToCopy) {
 80a1f06:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
		byte bytesToCopy = currentLevelKnownBits / 8 + (currentLevelKnownBits % 8 ? 1 : 0); // The number of bytes needed to represent the known bits for this level.
 80a1f0a:	b2e0      	uxtb	r0, r4
		if (bytesToCopy) {
 80a1f0c:	d01a      	beq.n	80a1f44 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xb2>
			byte maxBytes = useCascadeTag ? 3 : 4; // Max 4 bytes in each Cascade Level. Only 3 left if we use the Cascade Tag
 80a1f0e:	2b00      	cmp	r3, #0
 80a1f10:	bf14      	ite	ne
 80a1f12:	f04f 0c03 	movne.w	ip, #3
 80a1f16:	f04f 0c04 	moveq.w	ip, #4
			for (count = 0; count < bytesToCopy; count++) {
 80a1f1a:	4594      	cmp	ip, r2
 80a1f1c:	bf94      	ite	ls
 80a1f1e:	eb01 020c 	addls.w	r2, r1, ip
 80a1f22:	188a      	addhi	r2, r1, r2
 80a1f24:	f106 0e01 	add.w	lr, r6, #1
 80a1f28:	44be      	add	lr, r7
 80a1f2a:	b2d2      	uxtb	r2, r2
				buffer[index++] = uid->uidByte[uidIndex + count];
 80a1f2c:	468c      	mov	ip, r1
 80a1f2e:	3101      	adds	r1, #1
 80a1f30:	f81e 9b01 	ldrb.w	r9, [lr], #1
 80a1f34:	b2c9      	uxtb	r1, r1
 80a1f36:	f10d 0b28 	add.w	fp, sp, #40	; 0x28
 80a1f3a:	44dc      	add	ip, fp
			for (count = 0; count < bytesToCopy; count++) {
 80a1f3c:	4291      	cmp	r1, r2
				buffer[index++] = uid->uidByte[uidIndex + count];
 80a1f3e:	f80c 9c0c 	strb.w	r9, [ip, #-12]
			for (count = 0; count < bytesToCopy; count++) {
 80a1f42:	d1f3      	bne.n	80a1f2c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x9a>
		if (useCascadeTag) {
 80a1f44:	b113      	cbz	r3, 80a1f4c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xba>
			currentLevelKnownBits += 8;
 80a1f46:	f100 0408 	add.w	r4, r0, #8
 80a1f4a:	b264      	sxtb	r4, r4
			if (currentLevelKnownBits >= 32) { // All UID bits in this Cascade Level are known. This is a SELECT.
 80a1f4c:	2c1f      	cmp	r4, #31
 80a1f4e:	dd73      	ble.n	80a2038 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1a6>
				buffer[1] = 0x70; // NVB - Number of Valid Bits: Seven whole bytes
 80a1f50:	f04f 0370 	mov.w	r3, #112	; 0x70
				buffer[6] = buffer[2] ^ buffer[3] ^ buffer[4] ^ buffer[5];
 80a1f54:	f89d 201f 	ldrb.w	r2, [sp, #31]
				buffer[1] = 0x70; // NVB - Number of Valid Bits: Seven whole bytes
 80a1f58:	f88d 301d 	strb.w	r3, [sp, #29]
				buffer[6] = buffer[2] ^ buffer[3] ^ buffer[4] ^ buffer[5];
 80a1f5c:	f89d 301e 	ldrb.w	r3, [sp, #30]
				result = PCD_CalculateCRC(buffer, 7, &buffer[7]);
 80a1f60:	4650      	mov	r0, sl
				buffer[6] = buffer[2] ^ buffer[3] ^ buffer[4] ^ buffer[5];
 80a1f62:	4053      	eors	r3, r2
 80a1f64:	f89d 2020 	ldrb.w	r2, [sp, #32]
				result = PCD_CalculateCRC(buffer, 7, &buffer[7]);
 80a1f68:	a907      	add	r1, sp, #28
				buffer[6] = buffer[2] ^ buffer[3] ^ buffer[4] ^ buffer[5];
 80a1f6a:	4053      	eors	r3, r2
 80a1f6c:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
 80a1f70:	4053      	eors	r3, r2
 80a1f72:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
				result = PCD_CalculateCRC(buffer, 7, &buffer[7]);
 80a1f76:	2207      	movs	r2, #7
 80a1f78:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80a1f7c:	f7ff fd82 	bl	80a1a84 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
				if (result != STATUS_OK) {
 80a1f80:	2801      	cmp	r0, #1
				result = PCD_CalculateCRC(buffer, 7, &buffer[7]);
 80a1f82:	4681      	mov	r9, r0
				if (result != STATUS_OK) {
 80a1f84:	f040 80c5 	bne.w	80a2112 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x280>
				txLastBits		= 0; // 0 => All 8 bits are valid.
 80a1f88:	2300      	movs	r3, #0
 80a1f8a:	f88d 301a 	strb.w	r3, [sp, #26]
				responseLength	= 3;
 80a1f8e:	2303      	movs	r3, #3
				bufferUsed		= 9;
 80a1f90:	f04f 0909 	mov.w	r9, #9
				responseLength	= 3;
 80a1f94:	f88d 301b 	strb.w	r3, [sp, #27]
 80a1f98:	9404      	str	r4, [sp, #16]
				responseBuffer	= &buffer[6];
 80a1f9a:	f10d 0b22 	add.w	fp, sp, #34	; 0x22
			rxAlign = txLastBits;											// Having a seperate variable is overkill. But it makes the next line easier to read.
 80a1f9e:	f89d 301a 	ldrb.w	r3, [sp, #26]
			PCD_WriteRegister(BitFramingReg, (rxAlign << 4) + txLastBits);	// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
 80a1fa2:	211a      	movs	r1, #26
 80a1fa4:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 80a1fa8:	4650      	mov	r0, sl
 80a1faa:	b2d2      	uxtb	r2, r2
 80a1fac:	9305      	str	r3, [sp, #20]
 80a1fae:	f7ff fd04 	bl	80a19ba <_ZN7MFRC52217PCD_WriteRegisterEhh>
			result = PCD_TransceiveData(buffer, bufferUsed, responseBuffer, &responseLength, &txLastBits, rxAlign);			
 80a1fb2:	2200      	movs	r2, #0
 80a1fb4:	9b05      	ldr	r3, [sp, #20]
 80a1fb6:	9203      	str	r2, [sp, #12]
 80a1fb8:	9302      	str	r3, [sp, #8]
 80a1fba:	f10d 031a 	add.w	r3, sp, #26
 80a1fbe:	9301      	str	r3, [sp, #4]
 80a1fc0:	f10d 031b 	add.w	r3, sp, #27
 80a1fc4:	464a      	mov	r2, r9
 80a1fc6:	9300      	str	r3, [sp, #0]
 80a1fc8:	4650      	mov	r0, sl
 80a1fca:	465b      	mov	r3, fp
 80a1fcc:	a907      	add	r1, sp, #28
 80a1fce:	f7ff ff05 	bl	80a1ddc <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
			if (result == STATUS_COLLISION) { // More than one PICC in the field => collision.
 80a1fd2:	2803      	cmp	r0, #3
			result = PCD_TransceiveData(buffer, bufferUsed, responseBuffer, &responseLength, &txLastBits, rxAlign);			
 80a1fd4:	4681      	mov	r9, r0
			if (result == STATUS_COLLISION) { // More than one PICC in the field => collision.
 80a1fd6:	d14b      	bne.n	80a2070 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1de>
				result = PCD_ReadRegister(CollReg); // CollReg[7..0] bits are: ValuesAfterColl reserved CollPosNotValid CollPos[4:0]
 80a1fd8:	211c      	movs	r1, #28
 80a1fda:	4650      	mov	r0, sl
 80a1fdc:	f7ff fd1d 	bl	80a1a1a <_ZN7MFRC52216PCD_ReadRegisterEh>
				if (result & 0x20) { // CollPosNotValid
 80a1fe0:	0681      	lsls	r1, r0, #26
 80a1fe2:	f100 8096 	bmi.w	80a2112 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x280>
					collisionPos = 32;
 80a1fe6:	f010 001f 	ands.w	r0, r0, #31
 80a1fea:	bf08      	it	eq
 80a1fec:	2020      	moveq	r0, #32
				if (collisionPos <= currentLevelKnownBits) { // No progress - should not happen 
 80a1fee:	42a0      	cmp	r0, r4
 80a1ff0:	f340 8084 	ble.w	80a20fc <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x26a>
				count			= (currentLevelKnownBits - 1) % 8; // The bit to modify
 80a1ff4:	1e43      	subs	r3, r0, #1
				index			= 1 + (currentLevelKnownBits / 8) + (count ? 1 : 0); // First byte is index 0.
 80a1ff6:	f003 0207 	and.w	r2, r3, #7
 80a1ffa:	f013 0307 	ands.w	r3, r3, #7
 80a1ffe:	bf18      	it	ne
 80a2000:	2301      	movne	r3, #1
				currentLevelKnownBits = collisionPos;
 80a2002:	b244      	sxtb	r4, r0
				index			= 1 + (currentLevelKnownBits / 8) + (count ? 1 : 0); // First byte is index 0.
 80a2004:	08c0      	lsrs	r0, r0, #3
 80a2006:	3001      	adds	r0, #1
				buffer[index]	|= (1 << count); 
 80a2008:	4418      	add	r0, r3
 80a200a:	ab0a      	add	r3, sp, #40	; 0x28
 80a200c:	4418      	add	r0, r3
 80a200e:	2301      	movs	r3, #1
 80a2010:	fa03 f202 	lsl.w	r2, r3, r2
 80a2014:	f810 3c0c 	ldrb.w	r3, [r0, #-12]
 80a2018:	4313      	orrs	r3, r2
 80a201a:	f800 3c0c 	strb.w	r3, [r0, #-12]
		while ( ! selectDone) {
 80a201e:	e795      	b.n	80a1f4c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xba>
				buffer[0] = PICC_CMD_SEL_CL3;
 80a2020:	2397      	movs	r3, #151	; 0x97
				uidIndex = 6;
 80a2022:	2606      	movs	r6, #6
				buffer[0] = PICC_CMD_SEL_CL3;
 80a2024:	f88d 301c 	strb.w	r3, [sp, #28]
				useCascadeTag = false;						// Never used in CL3.
 80a2028:	4623      	mov	r3, r4
				break;
 80a202a:	e75a      	b.n	80a1ee2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x50>
				useCascadeTag = validBits && uid->size > 4;	// When we know that the UID has more than 4 bytes
 80a202c:	4643      	mov	r3, r8
 80a202e:	e749      	b.n	80a1ec4 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x32>
				useCascadeTag = validBits && uid->size > 7;	// When we know that the UID has more than 7 bytes
 80a2030:	4643      	mov	r3, r8
 80a2032:	e756      	b.n	80a1ee2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x50>
		index = 2; // destination index in buffer[]
 80a2034:	2102      	movs	r1, #2
 80a2036:	e760      	b.n	80a1efa <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x68>
				bufferUsed		= index + (txLastBits ? 1 : 0);
 80a2038:	f014 0907 	ands.w	r9, r4, #7
 80a203c:	bf18      	it	ne
 80a203e:	f04f 0901 	movne.w	r9, #1
				count			= currentLevelKnownBits / 8;	// Number of whole bytes in the UID part.
 80a2042:	10e3      	asrs	r3, r4, #3
				index			= 2 + count;					// Number of whole bytes: SEL + NVB + UIDs
 80a2044:	3302      	adds	r3, #2
 80a2046:	b2db      	uxtb	r3, r3
				txLastBits		= currentLevelKnownBits % 8;
 80a2048:	f004 0207 	and.w	r2, r4, #7
 80a204c:	f88d 201a 	strb.w	r2, [sp, #26]
				buffer[1]		= (index << 4) + txLastBits;	// NVB - Number of Valid Bits
 80a2050:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 80a2054:	f88d 201d 	strb.w	r2, [sp, #29]
				responseBuffer	= &buffer[index];
 80a2058:	aa07      	add	r2, sp, #28
				bufferUsed		= index + (txLastBits ? 1 : 0);
 80a205a:	4499      	add	r9, r3
				responseBuffer	= &buffer[index];
 80a205c:	eb02 0b03 	add.w	fp, r2, r3
				responseLength	= sizeof(buffer) - index;
 80a2060:	f1c3 0309 	rsb	r3, r3, #9
				bufferUsed		= index + (txLastBits ? 1 : 0);
 80a2064:	fa5f f989 	uxtb.w	r9, r9
				responseLength	= sizeof(buffer) - index;
 80a2068:	f88d 301b 	strb.w	r3, [sp, #27]
 80a206c:	9404      	str	r4, [sp, #16]
 80a206e:	e796      	b.n	80a1f9e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x10c>
			else if (result != STATUS_OK) {
 80a2070:	2801      	cmp	r0, #1
 80a2072:	d14e      	bne.n	80a2112 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x280>
				if (currentLevelKnownBits >= 32) { // This was a SELECT.
 80a2074:	9b04      	ldr	r3, [sp, #16]
					currentLevelKnownBits = 32;
 80a2076:	2420      	movs	r4, #32
				if (currentLevelKnownBits >= 32) { // This was a SELECT.
 80a2078:	2b1f      	cmp	r3, #31
 80a207a:	f77f af69 	ble.w	80a1f50 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xbe>
		index			= (buffer[2] == PICC_CMD_CT) ? 3 : 2; // source index in buffer[]
 80a207e:	f89d 301e 	ldrb.w	r3, [sp, #30]
 80a2082:	2b88      	cmp	r3, #136	; 0x88
 80a2084:	d13d      	bne.n	80a2102 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x270>
 80a2086:	2303      	movs	r3, #3
		bytesToCopy		= (buffer[2] == PICC_CMD_CT) ? 3 : 4;
 80a2088:	461a      	mov	r2, r3
		for (count = 0; count < bytesToCopy; count++) {
 80a208a:	3601      	adds	r6, #1
 80a208c:	441a      	add	r2, r3
 80a208e:	443e      	add	r6, r7
 80a2090:	b2d2      	uxtb	r2, r2
			uid->uidByte[uidIndex + count] = buffer[index++];
 80a2092:	4619      	mov	r1, r3
 80a2094:	a80a      	add	r0, sp, #40	; 0x28
 80a2096:	3301      	adds	r3, #1
 80a2098:	4401      	add	r1, r0
 80a209a:	f811 1c0c 	ldrb.w	r1, [r1, #-12]
 80a209e:	b2db      	uxtb	r3, r3
		for (count = 0; count < bytesToCopy; count++) {
 80a20a0:	4293      	cmp	r3, r2
			uid->uidByte[uidIndex + count] = buffer[index++];
 80a20a2:	f806 1b01 	strb.w	r1, [r6], #1
		for (count = 0; count < bytesToCopy; count++) {
 80a20a6:	d1f4      	bne.n	80a2092 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x200>
		if (responseLength != 3 || txLastBits != 0) {		// SAK must be exactly 24 bits (1 byte + CRC_A).
 80a20a8:	f89d 601b 	ldrb.w	r6, [sp, #27]
 80a20ac:	2e03      	cmp	r6, #3
 80a20ae:	d137      	bne.n	80a2120 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28e>
 80a20b0:	f89d 401a 	ldrb.w	r4, [sp, #26]
 80a20b4:	bba4      	cbnz	r4, 80a2120 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28e>
		result = PCD_CalculateCRC(responseBuffer, 1, &buffer[2]);
 80a20b6:	2201      	movs	r2, #1
 80a20b8:	4659      	mov	r1, fp
 80a20ba:	4650      	mov	r0, sl
 80a20bc:	f10d 031e 	add.w	r3, sp, #30
 80a20c0:	f7ff fce0 	bl	80a1a84 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
		if (result != STATUS_OK) {
 80a20c4:	2801      	cmp	r0, #1
		result = PCD_CalculateCRC(responseBuffer, 1, &buffer[2]);
 80a20c6:	4681      	mov	r9, r0
		if (result != STATUS_OK) {
 80a20c8:	d123      	bne.n	80a2112 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x280>
		if ((buffer[2] != responseBuffer[1]) || (buffer[3] != responseBuffer[2])) {
 80a20ca:	f89d 201e 	ldrb.w	r2, [sp, #30]
 80a20ce:	f89b 3001 	ldrb.w	r3, [fp, #1]
 80a20d2:	429a      	cmp	r2, r3
 80a20d4:	d127      	bne.n	80a2126 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x294>
 80a20d6:	f89d 201f 	ldrb.w	r2, [sp, #31]
 80a20da:	f89b 3002 	ldrb.w	r3, [fp, #2]
 80a20de:	429a      	cmp	r2, r3
 80a20e0:	d121      	bne.n	80a2126 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x294>
		if (responseBuffer[0] & 0x04) { // Cascade bit set - UID not complete yes
 80a20e2:	f89b 3000 	ldrb.w	r3, [fp]
 80a20e6:	075a      	lsls	r2, r3, #29
 80a20e8:	d50e      	bpl.n	80a2108 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x276>
			cascadeLevel++;
 80a20ea:	3501      	adds	r5, #1
 80a20ec:	b2ed      	uxtb	r5, r5
		switch (cascadeLevel) {
 80a20ee:	2d03      	cmp	r5, #3
 80a20f0:	d096      	beq.n	80a2020 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x18e>
 80a20f2:	2d04      	cmp	r5, #4
 80a20f4:	d002      	beq.n	80a20fc <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x26a>
 80a20f6:	2d02      	cmp	r5, #2
 80a20f8:	f43f aee7 	beq.w	80a1eca <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x38>
 80a20fc:	f04f 0906 	mov.w	r9, #6
 80a2100:	e007      	b.n	80a2112 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x280>
		index			= (buffer[2] == PICC_CMD_CT) ? 3 : 2; // source index in buffer[]
 80a2102:	2302      	movs	r3, #2
		bytesToCopy		= (buffer[2] == PICC_CMD_CT) ? 3 : 4;
 80a2104:	2204      	movs	r2, #4
 80a2106:	e7c0      	b.n	80a208a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1f8>
	uid->size = 3 * cascadeLevel + 1;
 80a2108:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80a210c:	3501      	adds	r5, #1
			uid->sak = responseBuffer[0];
 80a210e:	72fb      	strb	r3, [r7, #11]
	uid->size = 3 * cascadeLevel + 1;
 80a2110:	703d      	strb	r5, [r7, #0]
} // End PICC_Select()
 80a2112:	4648      	mov	r0, r9
 80a2114:	b00b      	add	sp, #44	; 0x2c
 80a2116:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return STATUS_INVALID;
 80a211a:	f04f 0907 	mov.w	r9, #7
 80a211e:	e7f8      	b.n	80a2112 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x280>
			return STATUS_ERROR;
 80a2120:	f04f 0902 	mov.w	r9, #2
 80a2124:	e7f5      	b.n	80a2112 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x280>
			return STATUS_CRC_WRONG;
 80a2126:	f04f 0908 	mov.w	r9, #8
 80a212a:	e7f2      	b.n	80a2112 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x280>

080a212c <_ZN7MFRC52219PICC_ReadCardSerialEv>:
 * Remember to call PICC_IsNewCardPresent(), PICC_RequestA() or PICC_WakeupA() first.
 * The read UID is available in the class variable uid.
 * 
 * @return bool
 */
bool MFRC522::PICC_ReadCardSerial() {
 80a212c:	b508      	push	{r3, lr}
 80a212e:	4601      	mov	r1, r0
	byte result = PICC_Select(&uid);
 80a2130:	2200      	movs	r2, #0
 80a2132:	f7ff feae 	bl	80a1e92 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh>
	return (result == STATUS_OK);
} // End PICC_ReadCardSerial()
 80a2136:	1e43      	subs	r3, r0, #1
 80a2138:	4258      	negs	r0, r3
 80a213a:	4158      	adcs	r0, r3
 80a213c:	bd08      	pop	{r3, pc}

080a213e <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi>:

    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(char* domain, uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
 80a213e:	b538      	push	{r3, r4, r5, lr}
 80a2140:	461d      	mov	r5, r3
    this->callback = callback;
 80a2142:	9b05      	ldr	r3, [sp, #20]
void MQTT::initialize(char* domain, uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
 80a2144:	4604      	mov	r4, r0
    this->callback = callback;
 80a2146:	6303      	str	r3, [r0, #48]	; 0x30
    this->qoscallback = NULL;
 80a2148:	2300      	movs	r3, #0
 80a214a:	6343      	str	r3, [r0, #52]	; 0x34
    if (ip != NULL)
 80a214c:	b102      	cbz	r2, 80a2150 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x12>
        this->ip = ip;
 80a214e:	6482      	str	r2, [r0, #72]	; 0x48
    if (domain != NULL)
 80a2150:	b119      	cbz	r1, 80a215a <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x1c>
        this->domain = domain;
 80a2152:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80a2156:	f002 f87b 	bl	80a4250 <_ZN6StringaSEPKc>
    this->port = port;
    this->keepalive = keepalive;
 80a215a:	9b04      	ldr	r3, [sp, #16]

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
    if (buffer != NULL)
 80a215c:	69e0      	ldr	r0, [r4, #28]
    this->keepalive = keepalive;
 80a215e:	6523      	str	r3, [r4, #80]	; 0x50
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
 80a2160:	9b06      	ldr	r3, [sp, #24]
    this->port = port;
 80a2162:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
 80a2166:	2bff      	cmp	r3, #255	; 0xff
 80a2168:	bfb8      	it	lt
 80a216a:	23ff      	movlt	r3, #255	; 0xff
 80a216c:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    if (buffer != NULL)
 80a2170:	b108      	cbz	r0, 80a2176 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x38>
      delete[] buffer;
 80a2172:	f7fd ff96 	bl	80a00a2 <_ZdaPv>
    buffer = new uint8_t[this->maxpacketsize];
 80a2176:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
 80a217a:	f7fd ff8e 	bl	80a009a <_Znaj>
 80a217e:	61e0      	str	r0, [r4, #28]
}
 80a2180:	bd38      	pop	{r3, r4, r5, pc}
	...

080a2184 <_ZN4MQTTC1EPctiPFvS0_PhjEi>:
MQTT::MQTT(char* domain, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
 80a2184:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80a2188:	4604      	mov	r4, r0
 80a218a:	2600      	movs	r6, #0
 80a218c:	4617      	mov	r7, r2
 80a218e:	4698      	mov	r8, r3
 80a2190:	460d      	mov	r5, r1
 80a2192:	f001 ff19 	bl	80a3fc8 <_ZN9TCPClientC1Ev>
 80a2196:	490b      	ldr	r1, [pc, #44]	; (80a21c4 <_ZN4MQTTC1EPctiPFvS0_PhjEi+0x40>)
 80a2198:	61e6      	str	r6, [r4, #28]
 80a219a:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80a219e:	f002 f805 	bl	80a41ac <_ZN6StringC1EPKc>
    this->initialize(domain, NULL, port, keepalive, callback, maxpacketsize);
 80a21a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80a21a4:	4620      	mov	r0, r4
 80a21a6:	9302      	str	r3, [sp, #8]
 80a21a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a21aa:	4632      	mov	r2, r6
 80a21ac:	e9cd 8300 	strd	r8, r3, [sp]
 80a21b0:	4629      	mov	r1, r5
 80a21b2:	463b      	mov	r3, r7
MQTT::MQTT(char* domain, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
 80a21b4:	64a6      	str	r6, [r4, #72]	; 0x48
    this->initialize(domain, NULL, port, keepalive, callback, maxpacketsize);
 80a21b6:	f7ff ffc2 	bl	80a213e <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi>
}
 80a21ba:	4620      	mov	r0, r4
 80a21bc:	b004      	add	sp, #16
 80a21be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a21c2:	bf00      	nop
 80a21c4:	080a898c 	.word	0x080a898c

080a21c8 <_ZN4MQTT8readByteEv>:
        _client.stop();
    }
    return false;
}

uint8_t MQTT::readByte() {
 80a21c8:	b510      	push	{r4, lr}
 80a21ca:	4604      	mov	r4, r0
    while(!_client.available()) {}
 80a21cc:	4620      	mov	r0, r4
 80a21ce:	f001 fe11 	bl	80a3df4 <_ZN9TCPClient9availableEv>
 80a21d2:	2800      	cmp	r0, #0
 80a21d4:	d0fa      	beq.n	80a21cc <_ZN4MQTT8readByteEv+0x4>
    return _client.read();
 80a21d6:	4620      	mov	r0, r4
 80a21d8:	f001 fd4f 	bl	80a3c7a <_ZN9TCPClient4readEv>
}
 80a21dc:	b2c0      	uxtb	r0, r0
 80a21de:	bd10      	pop	{r4, pc}

080a21e0 <_ZN4MQTT10readPacketEPh>:

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
 80a21e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a21e4:	4605      	mov	r5, r0
    uint16_t len = 0;
    buffer[len++] = readByte();
 80a21e6:	69c4      	ldr	r4, [r0, #28]
uint16_t MQTT::readPacket(uint8_t* lengthLength) {
 80a21e8:	4689      	mov	r9, r1
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
    uint32_t multiplier = 1;
 80a21ea:	2701      	movs	r7, #1
    buffer[len++] = readByte();
 80a21ec:	f7ff ffec 	bl	80a21c8 <_ZN4MQTT8readByteEv>
    uint16_t length = 0;
 80a21f0:	f04f 0800 	mov.w	r8, #0
    buffer[len++] = readByte();
 80a21f4:	7020      	strb	r0, [r4, #0]
 80a21f6:	463c      	mov	r4, r7
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
 80a21f8:	69eb      	ldr	r3, [r5, #28]
 80a21fa:	f893 a000 	ldrb.w	sl, [r3]
 80a21fe:	f00a 0af0 	and.w	sl, sl, #240	; 0xf0
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
 80a2202:	4628      	mov	r0, r5
 80a2204:	f7ff ffe0 	bl	80a21c8 <_ZN4MQTT8readByteEv>
        buffer[len++] = digit;
 80a2208:	4626      	mov	r6, r4
 80a220a:	69eb      	ldr	r3, [r5, #28]
 80a220c:	3401      	adds	r4, #1
 80a220e:	5598      	strb	r0, [r3, r6]
        length += (digit & 127) * multiplier;
 80a2210:	f000 037f 	and.w	r3, r0, #127	; 0x7f
 80a2214:	fb03 8807 	mla	r8, r3, r7, r8
        multiplier *= 128;
    } while ((digit & 128) != 0);
 80a2218:	0603      	lsls	r3, r0, #24
        buffer[len++] = digit;
 80a221a:	b2a4      	uxth	r4, r4
        length += (digit & 127) * multiplier;
 80a221c:	fa1f f888 	uxth.w	r8, r8
        multiplier *= 128;
 80a2220:	ea4f 17c7 	mov.w	r7, r7, lsl #7
    } while ((digit & 128) != 0);
 80a2224:	d4ed      	bmi.n	80a2202 <_ZN4MQTT10readPacketEPh+0x22>
    *lengthLength = len-1;
 80a2226:	1e63      	subs	r3, r4, #1

    if (isPublish) {
 80a2228:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
    *lengthLength = len-1;
 80a222c:	f889 3000 	strb.w	r3, [r9]
    if (isPublish) {
 80a2230:	d124      	bne.n	80a227c <_ZN4MQTT10readPacketEPh+0x9c>
        // Read in topic length to calculate bytes to skip over for Stream writing
        buffer[len++] = readByte();
 80a2232:	4628      	mov	r0, r5
 80a2234:	69ef      	ldr	r7, [r5, #28]
 80a2236:	f7ff ffc7 	bl	80a21c8 <_ZN4MQTT8readByteEv>
 80a223a:	5538      	strb	r0, [r7, r4]
        buffer[len++] = readByte();
 80a223c:	4628      	mov	r0, r5
 80a223e:	69ef      	ldr	r7, [r5, #28]
 80a2240:	f7ff ffc2 	bl	80a21c8 <_ZN4MQTT8readByteEv>
 80a2244:	1cf4      	adds	r4, r6, #3
        buffer[len++] = readByte();
 80a2246:	3602      	adds	r6, #2
        buffer[len++] = readByte();
 80a2248:	b2b6      	uxth	r6, r6
 80a224a:	55b8      	strb	r0, [r7, r6]
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
        start = 2;
 80a224c:	2602      	movs	r6, #2
        buffer[len++] = readByte();
 80a224e:	b2a4      	uxth	r4, r4
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
 80a2250:	b2b6      	uxth	r6, r6
 80a2252:	46b1      	mov	r9, r6
 80a2254:	4627      	mov	r7, r4
 80a2256:	45c1      	cmp	r9, r8
 80a2258:	d212      	bcs.n	80a2280 <_ZN4MQTT10readPacketEPh+0xa0>
        digit = readByte();
 80a225a:	4628      	mov	r0, r5
 80a225c:	f7ff ffb4 	bl	80a21c8 <_ZN4MQTT8readByteEv>
        if (len < this->maxpacketsize) {
 80a2260:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
    for (uint16_t i = start;i<length;i++) {
 80a2264:	f109 0901 	add.w	r9, r9, #1
        if (len < this->maxpacketsize) {
 80a2268:	42bb      	cmp	r3, r7
            buffer[len] = digit;
 80a226a:	bf88      	it	hi
 80a226c:	69eb      	ldrhi	r3, [r5, #28]
    for (uint16_t i = start;i<length;i++) {
 80a226e:	fa1f f989 	uxth.w	r9, r9
            buffer[len] = digit;
 80a2272:	bf88      	it	hi
 80a2274:	55d8      	strbhi	r0, [r3, r7]
        }
        len++;
 80a2276:	3701      	adds	r7, #1
 80a2278:	b2bf      	uxth	r7, r7
    for (uint16_t i = start;i<length;i++) {
 80a227a:	e7ec      	b.n	80a2256 <_ZN4MQTT10readPacketEPh+0x76>
    uint8_t start = 0;
 80a227c:	2600      	movs	r6, #0
 80a227e:	e7e7      	b.n	80a2250 <_ZN4MQTT10readPacketEPh+0x70>
 80a2280:	eba8 0006 	sub.w	r0, r8, r6
 80a2284:	45b0      	cmp	r8, r6
 80a2286:	bf2c      	ite	cs
 80a2288:	4606      	movcs	r6, r0
 80a228a:	2600      	movcc	r6, #0
    }

    if (len > this->maxpacketsize) {
 80a228c:	f8b5 0054 	ldrh.w	r0, [r5, #84]	; 0x54
 80a2290:	4434      	add	r4, r6
 80a2292:	b2a4      	uxth	r4, r4
        len = 0; // This will cause the packet to be ignored.
    }

    return len;
}
 80a2294:	42a0      	cmp	r0, r4
 80a2296:	bf2c      	ite	cs
 80a2298:	4620      	movcs	r0, r4
 80a229a:	2000      	movcc	r0, #0
 80a229c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080a22a0 <_ZN4MQTT5writeEhPht>:
        return _client.write(buffer, length);
    }
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
 80a22a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80a22a2:	468c      	mov	ip, r1
 80a22a4:	461e      	mov	r6, r3
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
 80a22a6:	461d      	mov	r5, r3
bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
 80a22a8:	4607      	mov	r7, r0
    uint8_t llen = 0;
 80a22aa:	2300      	movs	r3, #0
    do {
        digit = len % 128;
 80a22ac:	46ae      	mov	lr, r5
 80a22ae:	f005 017f 	and.w	r1, r5, #127	; 0x7f
        len = len / 128;
        if (len > 0) {
 80a22b2:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
 80a22b6:	a802      	add	r0, sp, #8
            digit |= 0x80;
 80a22b8:	bf88      	it	hi
 80a22ba:	f041 0180 	orrhi.w	r1, r1, #128	; 0x80
        lenBuf[pos++] = digit;
 80a22be:	1c5c      	adds	r4, r3, #1
        llen++;
    } while(len > 0);
 80a22c0:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        lenBuf[pos++] = digit;
 80a22c4:	4403      	add	r3, r0
        len = len / 128;
 80a22c6:	ea4f 15d5 	mov.w	r5, r5, lsr #7
        lenBuf[pos++] = digit;
 80a22ca:	b2e4      	uxtb	r4, r4
 80a22cc:	f803 1c04 	strb.w	r1, [r3, #-4]
    } while(len > 0);
 80a22d0:	d810      	bhi.n	80a22f4 <_ZN4MQTT5writeEhPht+0x54>

    buf[4-llen] = header;
 80a22d2:	f1c4 0304 	rsb	r3, r4, #4
 80a22d6:	18d1      	adds	r1, r2, r3
 80a22d8:	f802 c003 	strb.w	ip, [r2, r3]
    for (int i = 0; i < llen; i++) {
 80a22dc:	f1c4 0305 	rsb	r3, r4, #5
 80a22e0:	4413      	add	r3, r2
 80a22e2:	a801      	add	r0, sp, #4
 80a22e4:	3205      	adds	r2, #5
 80a22e6:	4293      	cmp	r3, r2
 80a22e8:	d006      	beq.n	80a22f8 <_ZN4MQTT5writeEhPht+0x58>
        buf[5-llen+i] = lenBuf[i];
 80a22ea:	f810 5b01 	ldrb.w	r5, [r0], #1
 80a22ee:	f803 5b01 	strb.w	r5, [r3], #1
    for (int i = 0; i < llen; i++) {
 80a22f2:	e7f8      	b.n	80a22e6 <_ZN4MQTT5writeEhPht+0x46>
        lenBuf[pos++] = digit;
 80a22f4:	4623      	mov	r3, r4
 80a22f6:	e7d9      	b.n	80a22ac <_ZN4MQTT5writeEhPht+0xc>
    }
    rc = _client.write(buf+(4-llen), length+1+llen);
 80a22f8:	1c72      	adds	r2, r6, #1
 80a22fa:	4422      	add	r2, r4
 80a22fc:	4638      	mov	r0, r7
 80a22fe:	f001 fc3f 	bl	80a3b80 <_ZN9TCPClient5writeEPKhj>
 80a2302:	4605      	mov	r5, r0
 80a2304:	f001 f8dc 	bl	80a34c0 <HAL_Timer_Get_Milli_Seconds>

    lastOutActivity = millis();
    return (rc == 1+llen+length);
 80a2308:	3401      	adds	r4, #1
    lastOutActivity = millis();
 80a230a:	6278      	str	r0, [r7, #36]	; 0x24
    return (rc == 1+llen+length);
 80a230c:	4434      	add	r4, r6
 80a230e:	b2a8      	uxth	r0, r5
}
 80a2310:	1a23      	subs	r3, r4, r0
 80a2312:	4258      	negs	r0, r3
 80a2314:	4158      	adcs	r0, r3
 80a2316:	b003      	add	sp, #12
 80a2318:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a231a <_ZN4MQTT10disconnectEv>:
    }
    return false;
}

void MQTT::disconnect() {
    buffer[0] = MQTTDISCONNECT;
 80a231a:	22e0      	movs	r2, #224	; 0xe0
void MQTT::disconnect() {
 80a231c:	b510      	push	{r4, lr}
    buffer[0] = MQTTDISCONNECT;
 80a231e:	69c3      	ldr	r3, [r0, #28]
void MQTT::disconnect() {
 80a2320:	4604      	mov	r4, r0
    buffer[0] = MQTTDISCONNECT;
 80a2322:	701a      	strb	r2, [r3, #0]
    buffer[1] = 0;
 80a2324:	2200      	movs	r2, #0
 80a2326:	69c3      	ldr	r3, [r0, #28]
 80a2328:	705a      	strb	r2, [r3, #1]
    _client.write(buffer,2);
 80a232a:	69c1      	ldr	r1, [r0, #28]
 80a232c:	2202      	movs	r2, #2
 80a232e:	f001 fc27 	bl	80a3b80 <_ZN9TCPClient5writeEPKhj>
    _client.stop();
 80a2332:	4620      	mov	r0, r4
 80a2334:	f001 fd98 	bl	80a3e68 <_ZN9TCPClient4stopEv>
 80a2338:	f001 f8c2 	bl	80a34c0 <HAL_Timer_Get_Milli_Seconds>
    lastInActivity = lastOutActivity = millis();
 80a233c:	e9c4 0009 	strd	r0, r0, [r4, #36]	; 0x24
}
 80a2340:	bd10      	pop	{r4, pc}

080a2342 <_ZN4MQTT11writeStringEPKcPht>:

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
 80a2342:	3302      	adds	r3, #2
uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
 80a2344:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a2346:	4604      	mov	r4, r0
    pos += 2;
 80a2348:	b298      	uxth	r0, r3
 80a234a:	2300      	movs	r3, #0
    while (*idp && pos < this->maxpacketsize) {
 80a234c:	5ccd      	ldrb	r5, [r1, r3]
 80a234e:	b14d      	cbz	r5, 80a2364 <_ZN4MQTT11writeStringEPKcPht+0x22>
 80a2350:	f8b4 6054 	ldrh.w	r6, [r4, #84]	; 0x54
 80a2354:	1c5f      	adds	r7, r3, #1
 80a2356:	4286      	cmp	r6, r0
 80a2358:	d904      	bls.n	80a2364 <_ZN4MQTT11writeStringEPKcPht+0x22>
        buf[pos++] = *idp++;
 80a235a:	1c46      	adds	r6, r0, #1
 80a235c:	5415      	strb	r5, [r2, r0]
    while (*idp && pos < this->maxpacketsize) {
 80a235e:	463b      	mov	r3, r7
        buf[pos++] = *idp++;
 80a2360:	b2b0      	uxth	r0, r6
    while (*idp && pos < this->maxpacketsize) {
 80a2362:	e7f3      	b.n	80a234c <_ZN4MQTT11writeStringEPKcPht+0xa>
        i++;
    }
    buf[pos-i-2] = (i >> 8);
 80a2364:	b299      	uxth	r1, r3
 80a2366:	1a44      	subs	r4, r0, r1
 80a2368:	4422      	add	r2, r4
 80a236a:	1209      	asrs	r1, r1, #8
 80a236c:	f802 1c02 	strb.w	r1, [r2, #-2]
    buf[pos-i-1] = (i & 0xFF);
 80a2370:	f802 3c01 	strb.w	r3, [r2, #-1]
    return pos;
}
 80a2374:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a2376 <_ZN4MQTT11isConnectedEv>:


bool MQTT::isConnected() {
 80a2376:	b538      	push	{r3, r4, r5, lr}
 80a2378:	4604      	mov	r4, r0
    bool rc = (int)_client.connected();
 80a237a:	f001 fdcc 	bl	80a3f16 <_ZN9TCPClient9connectedEv>
 80a237e:	2800      	cmp	r0, #0
 80a2380:	bf14      	ite	ne
 80a2382:	2501      	movne	r5, #1
 80a2384:	2500      	moveq	r5, #0
    if (!rc) _client.stop();
 80a2386:	d102      	bne.n	80a238e <_ZN4MQTT11isConnectedEv+0x18>
 80a2388:	4620      	mov	r0, r4
 80a238a:	f001 fd6d 	bl	80a3e68 <_ZN9TCPClient4stopEv>
    return rc;
}
 80a238e:	4628      	mov	r0, r5
 80a2390:	bd38      	pop	{r3, r4, r5, pc}
	...

080a2394 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>:
bool MQTT::connect(const char *id, const char *user, const char *pass, const char* willTopic, EMQTT_QOS willQos, uint8_t willRetain, const char* willMessage, bool cleanSession, MQTT_VERSION version) {
 80a2394:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a2398:	b086      	sub	sp, #24
 80a239a:	4604      	mov	r4, r0
 80a239c:	4689      	mov	r9, r1
 80a239e:	4617      	mov	r7, r2
 80a23a0:	461e      	mov	r6, r3
 80a23a2:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 80a23a6:	f89d a048 	ldrb.w	sl, [sp, #72]	; 0x48
    if (!isConnected()) {
 80a23aa:	f7ff ffe4 	bl	80a2376 <_ZN4MQTT11isConnectedEv>
 80a23ae:	4605      	mov	r5, r0
 80a23b0:	2800      	cmp	r0, #0
 80a23b2:	f040 80c3 	bne.w	80a253c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1a8>
        if (ip == NULL)
 80a23b6:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80a23b8:	2900      	cmp	r1, #0
 80a23ba:	f040 8087 	bne.w	80a24cc <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x138>
            result = _client.connect(this->domain.c_str(), this->port);
 80a23be:	4603      	mov	r3, r0
 80a23c0:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
 80a23c4:	4620      	mov	r0, r4
 80a23c6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80a23c8:	f001 fe16 	bl	80a3ff8 <_ZN9TCPClient7connectEPKctm>
        if (result) {
 80a23cc:	2800      	cmp	r0, #0
 80a23ce:	d079      	beq.n	80a24c4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x130>
            nextMsgId = 1;
 80a23d0:	2301      	movs	r3, #1
 80a23d2:	8423      	strh	r3, [r4, #32]
            if (version == MQTT_V311) {
 80a23d4:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 80a23d8:	69e2      	ldr	r2, [r4, #28]
 80a23da:	2b04      	cmp	r3, #4
 80a23dc:	f040 8081 	bne.w	80a24e2 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x14e>
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
 80a23e0:	4b57      	ldr	r3, [pc, #348]	; (80a2540 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1ac>)
 80a23e2:	6818      	ldr	r0, [r3, #0]
 80a23e4:	8899      	ldrh	r1, [r3, #4]
 80a23e6:	799b      	ldrb	r3, [r3, #6]
 80a23e8:	f8ad 1004 	strh.w	r1, [sp, #4]
 80a23ec:	f88d 3006 	strb.w	r3, [sp, #6]
 80a23f0:	9000      	str	r0, [sp, #0]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
 80a23f2:	f8c2 0005 	str.w	r0, [r2, #5]
 80a23f6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a23fa:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 80a23fe:	72d3      	strb	r3, [r2, #11]
                length+=sizeof(MQTT_HEADER_V311);
 80a2400:	230c      	movs	r3, #12
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
 80a2402:	f8a2 1009 	strh.w	r1, [r2, #9]
            if (willTopic) {
 80a2406:	f1b8 0f00 	cmp.w	r8, #0
 80a240a:	d07e      	beq.n	80a250a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x176>
                v = 0x06|(willQos<<3)|(willRetain<<5);
 80a240c:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
 80a2410:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 80a2414:	0140      	lsls	r0, r0, #5
 80a2416:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 80a241a:	f040 0006 	orr.w	r0, r0, #6
 80a241e:	b2c0      	uxtb	r0, r0
            if (!cleanSession) {
 80a2420:	f1ba 0f00 	cmp.w	sl, #0
 80a2424:	d101      	bne.n	80a242a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x96>
              v = v&0xfd;
 80a2426:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
            if(user != NULL) {
 80a242a:	b11f      	cbz	r7, 80a2434 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xa0>
                if(pass != NULL) {
 80a242c:	2e00      	cmp	r6, #0
 80a242e:	d16e      	bne.n	80a250e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x17a>
                v = v|0x80;
 80a2430:	f040 0080 	orr.w	r0, r0, #128	; 0x80
            buffer[length++] = v;
 80a2434:	69e2      	ldr	r2, [r4, #28]
 80a2436:	54d0      	strb	r0, [r2, r3]
            buffer[length++] = ((this->keepalive) >> 8);
 80a2438:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80a243a:	69e1      	ldr	r1, [r4, #28]
 80a243c:	1c58      	adds	r0, r3, #1
 80a243e:	1212      	asrs	r2, r2, #8
 80a2440:	540a      	strb	r2, [r1, r0]
            buffer[length++] = ((this->keepalive) & 0xFF);
 80a2442:	69e1      	ldr	r1, [r4, #28]
 80a2444:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80a2446:	1c9a      	adds	r2, r3, #2
 80a2448:	5488      	strb	r0, [r1, r2]
            length = writeString(id, buffer, length);
 80a244a:	3303      	adds	r3, #3
 80a244c:	4649      	mov	r1, r9
 80a244e:	4620      	mov	r0, r4
 80a2450:	69e2      	ldr	r2, [r4, #28]
 80a2452:	f7ff ff76 	bl	80a2342 <_ZN4MQTT11writeStringEPKcPht>
 80a2456:	4603      	mov	r3, r0
            if (willTopic) {
 80a2458:	f1b8 0f00 	cmp.w	r8, #0
 80a245c:	d00b      	beq.n	80a2476 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xe2>
                length = writeString(willTopic, buffer, length);
 80a245e:	4641      	mov	r1, r8
 80a2460:	69e2      	ldr	r2, [r4, #28]
 80a2462:	4620      	mov	r0, r4
 80a2464:	f7ff ff6d 	bl	80a2342 <_ZN4MQTT11writeStringEPKcPht>
                length = writeString(willMessage, buffer, length);
 80a2468:	69e2      	ldr	r2, [r4, #28]
                length = writeString(willTopic, buffer, length);
 80a246a:	4603      	mov	r3, r0
                length = writeString(willMessage, buffer, length);
 80a246c:	9911      	ldr	r1, [sp, #68]	; 0x44
 80a246e:	4620      	mov	r0, r4
 80a2470:	f7ff ff67 	bl	80a2342 <_ZN4MQTT11writeStringEPKcPht>
 80a2474:	4603      	mov	r3, r0
            if(user != NULL) {
 80a2476:	b167      	cbz	r7, 80a2492 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xfe>
                length = writeString(user,buffer,length);
 80a2478:	4639      	mov	r1, r7
 80a247a:	4620      	mov	r0, r4
 80a247c:	69e2      	ldr	r2, [r4, #28]
 80a247e:	f7ff ff60 	bl	80a2342 <_ZN4MQTT11writeStringEPKcPht>
 80a2482:	4603      	mov	r3, r0
                if(pass != NULL) {
 80a2484:	b12e      	cbz	r6, 80a2492 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xfe>
                    length = writeString(pass,buffer,length);
 80a2486:	4631      	mov	r1, r6
 80a2488:	4620      	mov	r0, r4
 80a248a:	69e2      	ldr	r2, [r4, #28]
 80a248c:	f7ff ff59 	bl	80a2342 <_ZN4MQTT11writeStringEPKcPht>
 80a2490:	4603      	mov	r3, r0
            write(MQTTCONNECT, buffer, length-5);
 80a2492:	3b05      	subs	r3, #5
 80a2494:	2110      	movs	r1, #16
 80a2496:	69e2      	ldr	r2, [r4, #28]
 80a2498:	b29b      	uxth	r3, r3
 80a249a:	4620      	mov	r0, r4
 80a249c:	f7ff ff00 	bl	80a22a0 <_ZN4MQTT5writeEhPht>
 80a24a0:	f001 f80e 	bl	80a34c0 <HAL_Timer_Get_Milli_Seconds>
                if (t-lastInActivity > this->keepalive*1000UL) {
 80a24a4:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
            lastInActivity = lastOutActivity = millis();
 80a24a8:	e9c4 0009 	strd	r0, r0, [r4, #36]	; 0x24
            while (!_client.available()) {
 80a24ac:	4620      	mov	r0, r4
 80a24ae:	f001 fca1 	bl	80a3df4 <_ZN9TCPClient9availableEv>
 80a24b2:	bb78      	cbnz	r0, 80a2514 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x180>
 80a24b4:	f001 f804 	bl	80a34c0 <HAL_Timer_Get_Milli_Seconds>
                if (t-lastInActivity > this->keepalive*1000UL) {
 80a24b8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80a24ba:	1ac0      	subs	r0, r0, r3
 80a24bc:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80a24be:	4373      	muls	r3, r6
 80a24c0:	4298      	cmp	r0, r3
 80a24c2:	d9f3      	bls.n	80a24ac <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x118>
        _client.stop();
 80a24c4:	4620      	mov	r0, r4
 80a24c6:	f001 fccf 	bl	80a3e68 <_ZN9TCPClient4stopEv>
 80a24ca:	e033      	b.n	80a2534 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1a0>
            result = _client.connect(this->ip, this->port);
 80a24cc:	4668      	mov	r0, sp
 80a24ce:	f002 fbb7 	bl	80a4c40 <_ZN9IPAddressC1EPKh>
 80a24d2:	462b      	mov	r3, r5
 80a24d4:	4669      	mov	r1, sp
 80a24d6:	4620      	mov	r0, r4
 80a24d8:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
 80a24dc:	f001 fc1a 	bl	80a3d14 <_ZN9TCPClient7connectE9IPAddresstm>
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a24e0:	e774      	b.n	80a23cc <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x38>
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
 80a24e2:	46ec      	mov	ip, sp
 80a24e4:	4b17      	ldr	r3, [pc, #92]	; (80a2544 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1b0>)
 80a24e6:	6818      	ldr	r0, [r3, #0]
 80a24e8:	6859      	ldr	r1, [r3, #4]
 80a24ea:	7a1b      	ldrb	r3, [r3, #8]
 80a24ec:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 80a24f0:	f88c 3000 	strb.w	r3, [ip]
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
 80a24f4:	466b      	mov	r3, sp
 80a24f6:	cb03      	ldmia	r3!, {r0, r1}
 80a24f8:	f8c2 0005 	str.w	r0, [r2, #5]
 80a24fc:	f8c2 1009 	str.w	r1, [r2, #9]
 80a2500:	f89c 3000 	ldrb.w	r3, [ip]
 80a2504:	7353      	strb	r3, [r2, #13]
                length+=sizeof(MQTT_HEADER_V31);
 80a2506:	230e      	movs	r3, #14
 80a2508:	e77d      	b.n	80a2406 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x72>
                v = 0x02;
 80a250a:	2002      	movs	r0, #2
 80a250c:	e788      	b.n	80a2420 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x8c>
                    v = v|(0x80>>1);
 80a250e:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
 80a2512:	e78f      	b.n	80a2434 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xa0>
            uint16_t len = readPacket(&llen);
 80a2514:	4669      	mov	r1, sp
 80a2516:	4620      	mov	r0, r4
 80a2518:	f7ff fe62 	bl	80a21e0 <_ZN4MQTT10readPacketEPh>
            if (len == 4) {
 80a251c:	2804      	cmp	r0, #4
 80a251e:	d1d1      	bne.n	80a24c4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x130>
                if (buffer[3] == CONN_ACCEPT) {
 80a2520:	69e3      	ldr	r3, [r4, #28]
 80a2522:	78de      	ldrb	r6, [r3, #3]
 80a2524:	2e00      	cmp	r6, #0
 80a2526:	d1cd      	bne.n	80a24c4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x130>
 80a2528:	f000 ffca 	bl	80a34c0 <HAL_Timer_Get_Milli_Seconds>
                    return true;
 80a252c:	2501      	movs	r5, #1
                    lastInActivity = millis();
 80a252e:	62a0      	str	r0, [r4, #40]	; 0x28
                    pingOutstanding = false;
 80a2530:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
}
 80a2534:	4628      	mov	r0, r5
 80a2536:	b006      	add	sp, #24
 80a2538:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return false;
 80a253c:	2500      	movs	r5, #0
 80a253e:	e7f9      	b.n	80a2534 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1a0>
 80a2540:	080a8638 	.word	0x080a8638
 80a2544:	080a863f 	.word	0x080a863f

080a2548 <_ZN4MQTT7connectEPKc>:
bool MQTT::connect(const char *id) {
 80a2548:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    return connect(id, NULL, NULL, 0, QOS0, 0, 0, true);
 80a254a:	2301      	movs	r3, #1
 80a254c:	2204      	movs	r2, #4
 80a254e:	e9cd 3204 	strd	r3, r2, [sp, #16]
 80a2552:	2300      	movs	r3, #0
 80a2554:	461a      	mov	r2, r3
 80a2556:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80a255a:	e9cd 3300 	strd	r3, r3, [sp]
 80a255e:	f7ff ff19 	bl	80a2394 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>
}
 80a2562:	b007      	add	sp, #28
 80a2564:	f85d fb04 	ldr.w	pc, [sp], #4

080a2568 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
 80a2568:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a256c:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 80a2570:	4604      	mov	r4, r0
 80a2572:	468b      	mov	fp, r1
 80a2574:	4616      	mov	r6, r2
 80a2576:	461f      	mov	r7, r3
 80a2578:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
 80a257c:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
 80a2580:	f89d 9030 	ldrb.w	r9, [sp, #48]	; 0x30
    if (isConnected()) {
 80a2584:	f7ff fef7 	bl	80a2376 <_ZN4MQTT11isConnectedEv>
 80a2588:	2800      	cmp	r0, #0
 80a258a:	d050      	beq.n	80a262e <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xc6>
        memset(buffer, 0, this->maxpacketsize);
 80a258c:	2100      	movs	r1, #0
 80a258e:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54
 80a2592:	69e0      	ldr	r0, [r4, #28]
 80a2594:	f004 faf6 	bl	80a6b84 <memset>
        length = writeString(topic, buffer, length);
 80a2598:	2305      	movs	r3, #5
 80a259a:	4659      	mov	r1, fp
 80a259c:	4620      	mov	r0, r4
 80a259e:	69e2      	ldr	r2, [r4, #28]
 80a25a0:	f7ff fecf 	bl	80a2342 <_ZN4MQTT11writeStringEPKcPht>
        if (qos == QOS2 || qos == QOS1) {
 80a25a4:	1e6b      	subs	r3, r5, #1
 80a25a6:	2b01      	cmp	r3, #1
 80a25a8:	d815      	bhi.n	80a25d6 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x6e>
            nextMsgId += 1;
 80a25aa:	8c23      	ldrh	r3, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
 80a25ac:	69e2      	ldr	r2, [r4, #28]
            nextMsgId += 1;
 80a25ae:	3301      	adds	r3, #1
 80a25b0:	b29b      	uxth	r3, r3
 80a25b2:	8423      	strh	r3, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
 80a25b4:	121b      	asrs	r3, r3, #8
 80a25b6:	5413      	strb	r3, [r2, r0]
 80a25b8:	1c41      	adds	r1, r0, #1
            buffer[length++] = (nextMsgId & 0xFF);
 80a25ba:	69e3      	ldr	r3, [r4, #28]
 80a25bc:	8c22      	ldrh	r2, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
 80a25be:	b289      	uxth	r1, r1
            buffer[length++] = (nextMsgId & 0xFF);
 80a25c0:	3002      	adds	r0, #2
 80a25c2:	b280      	uxth	r0, r0
 80a25c4:	545a      	strb	r2, [r3, r1]
            if (messageid != NULL)
 80a25c6:	f1b8 0f00 	cmp.w	r8, #0
 80a25ca:	d004      	beq.n	80a25d6 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x6e>
                *messageid = nextMsgId++;
 80a25cc:	8c23      	ldrh	r3, [r4, #32]
 80a25ce:	1c5a      	adds	r2, r3, #1
 80a25d0:	8422      	strh	r2, [r4, #32]
 80a25d2:	f8a8 3000 	strh.w	r3, [r8]
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
 80a25d6:	2100      	movs	r1, #0
 80a25d8:	180b      	adds	r3, r1, r0
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
 80a25da:	428f      	cmp	r7, r1
 80a25dc:	69e2      	ldr	r2, [r4, #28]
 80a25de:	b29b      	uxth	r3, r3
 80a25e0:	d90a      	bls.n	80a25f8 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x90>
 80a25e2:	f8b4 c054 	ldrh.w	ip, [r4, #84]	; 0x54
 80a25e6:	459c      	cmp	ip, r3
 80a25e8:	d906      	bls.n	80a25f8 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x90>
            buffer[length++] = payload[i];
 80a25ea:	f816 c001 	ldrb.w	ip, [r6, r1]
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
 80a25ee:	3101      	adds	r1, #1
            buffer[length++] = payload[i];
 80a25f0:	f802 c003 	strb.w	ip, [r2, r3]
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
 80a25f4:	b289      	uxth	r1, r1
 80a25f6:	e7ef      	b.n	80a25d8 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x70>
            header |= 1;
 80a25f8:	f1ba 0f00 	cmp.w	sl, #0
 80a25fc:	bf0c      	ite	eq
 80a25fe:	2130      	moveq	r1, #48	; 0x30
 80a2600:	2131      	movne	r1, #49	; 0x31
        if (dup) {
 80a2602:	f1b9 0f00 	cmp.w	r9, #0
 80a2606:	d001      	beq.n	80a260c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xa4>
            header |= DUP_FLAG_ON_MASK;
 80a2608:	f041 0108 	orr.w	r1, r1, #8
        if (qos == QOS2)
 80a260c:	2d02      	cmp	r5, #2
 80a260e:	d109      	bne.n	80a2624 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xbc>
            header |= MQTTQOS2_HEADER_MASK;
 80a2610:	f041 0104 	orr.w	r1, r1, #4
        return write(header, buffer, length-5);
 80a2614:	4620      	mov	r0, r4
 80a2616:	3b05      	subs	r3, #5
 80a2618:	b29b      	uxth	r3, r3
}
 80a261a:	b001      	add	sp, #4
 80a261c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        return write(header, buffer, length-5);
 80a2620:	f7ff be3e 	b.w	80a22a0 <_ZN4MQTT5writeEhPht>
        else if (qos == QOS1)
 80a2624:	2d01      	cmp	r5, #1
            header |= MQTTQOS1_HEADER_MASK;
 80a2626:	bf08      	it	eq
 80a2628:	f041 0102 	orreq.w	r1, r1, #2
 80a262c:	e7f2      	b.n	80a2614 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xac>
}
 80a262e:	b001      	add	sp, #4
 80a2630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a2634 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
 80a2634:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return publish(topic, payload, plength, retain, qos, false, messageid);
 80a2636:	9c08      	ldr	r4, [sp, #32]
 80a2638:	9403      	str	r4, [sp, #12]
 80a263a:	2400      	movs	r4, #0
 80a263c:	9402      	str	r4, [sp, #8]
 80a263e:	f89d 401c 	ldrb.w	r4, [sp, #28]
 80a2642:	9401      	str	r4, [sp, #4]
 80a2644:	f89d 4018 	ldrb.w	r4, [sp, #24]
 80a2648:	9400      	str	r4, [sp, #0]
 80a264a:	f7ff ff8d 	bl	80a2568 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>
}
 80a264e:	b004      	add	sp, #16
 80a2650:	bd10      	pop	{r4, pc}

080a2652 <_ZN4MQTT7publishEPKcS1_>:
bool MQTT::publish(const char* topic, const char* payload) {
 80a2652:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80a2654:	4605      	mov	r5, r0
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
 80a2656:	4610      	mov	r0, r2
bool MQTT::publish(const char* topic, const char* payload) {
 80a2658:	4614      	mov	r4, r2
 80a265a:	460e      	mov	r6, r1
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
 80a265c:	f005 f832 	bl	80a76c4 <strlen>
 80a2660:	2200      	movs	r2, #0
 80a2662:	4603      	mov	r3, r0
 80a2664:	e9cd 2201 	strd	r2, r2, [sp, #4]
 80a2668:	9200      	str	r2, [sp, #0]
 80a266a:	4631      	mov	r1, r6
 80a266c:	4622      	mov	r2, r4
 80a266e:	4628      	mov	r0, r5
 80a2670:	f7ff ffe0 	bl	80a2634 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>
}
 80a2674:	b004      	add	sp, #16
 80a2676:	bd70      	pop	{r4, r5, r6, pc}

080a2678 <_ZN4MQTT14publishReleaseEt>:
bool MQTT::publishRelease(uint16_t messageid) {
 80a2678:	b538      	push	{r3, r4, r5, lr}
 80a267a:	4604      	mov	r4, r0
 80a267c:	460d      	mov	r5, r1
    if (isConnected()) {
 80a267e:	f7ff fe7a 	bl	80a2376 <_ZN4MQTT11isConnectedEv>
 80a2682:	b190      	cbz	r0, 80a26aa <_ZN4MQTT14publishReleaseEt+0x32>
        buffer[length++] = MQTTPUBREL | MQTTQOS1_HEADER_MASK;
 80a2684:	2262      	movs	r2, #98	; 0x62
 80a2686:	69e3      	ldr	r3, [r4, #28]
        return _client.write(buffer, length);
 80a2688:	4620      	mov	r0, r4
        buffer[length++] = MQTTPUBREL | MQTTQOS1_HEADER_MASK;
 80a268a:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
 80a268c:	2202      	movs	r2, #2
 80a268e:	69e3      	ldr	r3, [r4, #28]
 80a2690:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
 80a2692:	69e3      	ldr	r3, [r4, #28]
 80a2694:	122a      	asrs	r2, r5, #8
 80a2696:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
 80a2698:	69e3      	ldr	r3, [r4, #28]
        return _client.write(buffer, length);
 80a269a:	2204      	movs	r2, #4
        buffer[length++] = (messageid & 0xFF);
 80a269c:	70dd      	strb	r5, [r3, #3]
        return _client.write(buffer, length);
 80a269e:	69e1      	ldr	r1, [r4, #28]
 80a26a0:	f001 fa6e 	bl	80a3b80 <_ZN9TCPClient5writeEPKhj>
 80a26a4:	3800      	subs	r0, #0
 80a26a6:	bf18      	it	ne
 80a26a8:	2001      	movne	r0, #1
}
 80a26aa:	bd38      	pop	{r3, r4, r5, pc}

080a26ac <_ZN4MQTT15publishCompleteEt>:
bool MQTT::publishComplete(uint16_t messageid) {
 80a26ac:	b538      	push	{r3, r4, r5, lr}
 80a26ae:	4604      	mov	r4, r0
 80a26b0:	460d      	mov	r5, r1
    if (isConnected()) {
 80a26b2:	f7ff fe60 	bl	80a2376 <_ZN4MQTT11isConnectedEv>
 80a26b6:	b190      	cbz	r0, 80a26de <_ZN4MQTT15publishCompleteEt+0x32>
        buffer[length++] = MQTTPUBCOMP | MQTTQOS1_HEADER_MASK;
 80a26b8:	2272      	movs	r2, #114	; 0x72
 80a26ba:	69e3      	ldr	r3, [r4, #28]
        return _client.write(buffer, length);
 80a26bc:	4620      	mov	r0, r4
        buffer[length++] = MQTTPUBCOMP | MQTTQOS1_HEADER_MASK;
 80a26be:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
 80a26c0:	2202      	movs	r2, #2
 80a26c2:	69e3      	ldr	r3, [r4, #28]
 80a26c4:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
 80a26c6:	69e3      	ldr	r3, [r4, #28]
 80a26c8:	122a      	asrs	r2, r5, #8
 80a26ca:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
 80a26cc:	69e3      	ldr	r3, [r4, #28]
        return _client.write(buffer, length);
 80a26ce:	2204      	movs	r2, #4
        buffer[length++] = (messageid & 0xFF);
 80a26d0:	70dd      	strb	r5, [r3, #3]
        return _client.write(buffer, length);
 80a26d2:	69e1      	ldr	r1, [r4, #28]
 80a26d4:	f001 fa54 	bl	80a3b80 <_ZN9TCPClient5writeEPKhj>
 80a26d8:	3800      	subs	r0, #0
 80a26da:	bf18      	it	ne
 80a26dc:	2001      	movne	r0, #1
}
 80a26de:	bd38      	pop	{r3, r4, r5, pc}

080a26e0 <_ZN4MQTT4loopEv>:
bool MQTT::loop() {
 80a26e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a26e4:	b087      	sub	sp, #28
 80a26e6:	af00      	add	r7, sp, #0
 80a26e8:	4604      	mov	r4, r0
    if (isConnected()) {
 80a26ea:	f7ff fe44 	bl	80a2376 <_ZN4MQTT11isConnectedEv>
 80a26ee:	4681      	mov	r9, r0
 80a26f0:	b1b0      	cbz	r0, 80a2720 <_ZN4MQTT4loopEv+0x40>
 80a26f2:	f000 fee5 	bl	80a34c0 <HAL_Timer_Get_Milli_Seconds>
        if ((t - lastInActivity > this->keepalive*1000UL) || (t - lastOutActivity > this->keepalive*1000UL)) {
 80a26f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a26fa:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80a26fc:	4606      	mov	r6, r0
 80a26fe:	4353      	muls	r3, r2
 80a2700:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80a2702:	1a82      	subs	r2, r0, r2
 80a2704:	429a      	cmp	r2, r3
 80a2706:	d803      	bhi.n	80a2710 <_ZN4MQTT4loopEv+0x30>
 80a2708:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80a270a:	1a82      	subs	r2, r0, r2
 80a270c:	4293      	cmp	r3, r2
 80a270e:	d21b      	bcs.n	80a2748 <_ZN4MQTT4loopEv+0x68>
            if (pingOutstanding) {
 80a2710:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80a2714:	b14b      	cbz	r3, 80a272a <_ZN4MQTT4loopEv+0x4a>
                _client.stop();
 80a2716:	4620      	mov	r0, r4
 80a2718:	f001 fba6 	bl	80a3e68 <_ZN9TCPClient4stopEv>
                return false;
 80a271c:	f04f 0900 	mov.w	r9, #0
}
 80a2720:	4648      	mov	r0, r9
 80a2722:	371c      	adds	r7, #28
 80a2724:	46bd      	mov	sp, r7
 80a2726:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                buffer[0] = MQTTPINGREQ;
 80a272a:	21c0      	movs	r1, #192	; 0xc0
 80a272c:	69e2      	ldr	r2, [r4, #28]
                _client.write(buffer,2);
 80a272e:	4620      	mov	r0, r4
                buffer[0] = MQTTPINGREQ;
 80a2730:	7011      	strb	r1, [r2, #0]
                buffer[1] = 0;
 80a2732:	69e2      	ldr	r2, [r4, #28]
 80a2734:	7053      	strb	r3, [r2, #1]
                _client.write(buffer,2);
 80a2736:	69e1      	ldr	r1, [r4, #28]
 80a2738:	2202      	movs	r2, #2
 80a273a:	f001 fa21 	bl	80a3b80 <_ZN9TCPClient5writeEPKhj>
                pingOutstanding = true;
 80a273e:	2301      	movs	r3, #1
                lastInActivity = t;
 80a2740:	e9c4 6609 	strd	r6, r6, [r4, #36]	; 0x24
                pingOutstanding = true;
 80a2744:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
        if (_client.available()) {
 80a2748:	4620      	mov	r0, r4
 80a274a:	f001 fb53 	bl	80a3df4 <_ZN9TCPClient9availableEv>
 80a274e:	2800      	cmp	r0, #0
 80a2750:	d0e6      	beq.n	80a2720 <_ZN4MQTT4loopEv+0x40>
            uint16_t len = readPacket(&llen);
 80a2752:	4620      	mov	r0, r4
 80a2754:	f107 0117 	add.w	r1, r7, #23
 80a2758:	f7ff fd42 	bl	80a21e0 <_ZN4MQTT10readPacketEPh>
            if (len > 0) {
 80a275c:	4683      	mov	fp, r0
 80a275e:	2800      	cmp	r0, #0
 80a2760:	d0de      	beq.n	80a2720 <_ZN4MQTT4loopEv+0x40>
                uint8_t type = buffer[0]&0xF0;
 80a2762:	69e3      	ldr	r3, [r4, #28]
                lastInActivity = t;
 80a2764:	62a6      	str	r6, [r4, #40]	; 0x28
                uint8_t type = buffer[0]&0xF0;
 80a2766:	7819      	ldrb	r1, [r3, #0]
 80a2768:	f001 02f0 	and.w	r2, r1, #240	; 0xf0
                if (type == MQTTPUBLISH) {
 80a276c:	2a30      	cmp	r2, #48	; 0x30
 80a276e:	d17d      	bne.n	80a286c <_ZN4MQTT4loopEv+0x18c>
                    if (callback) {
 80a2770:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80a2774:	f1ba 0f00 	cmp.w	sl, #0
 80a2778:	d0d2      	beq.n	80a2720 <_ZN4MQTT4loopEv+0x40>
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
 80a277a:	f897 c017 	ldrb.w	ip, [r7, #23]
                        }
 80a277e:	f8c7 d000 	str.w	sp, [r7]
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
 80a2782:	eb03 020c 	add.w	r2, r3, ip
 80a2786:	7855      	ldrb	r5, [r2, #1]
 80a2788:	7891      	ldrb	r1, [r2, #2]
 80a278a:	eb01 2105 	add.w	r1, r1, r5, lsl #8
 80a278e:	b28d      	uxth	r5, r1
                        char topic[tl+1];
 80a2790:	4669      	mov	r1, sp
 80a2792:	f105 0208 	add.w	r2, r5, #8
 80a2796:	08d2      	lsrs	r2, r2, #3
 80a2798:	eba1 02c2 	sub.w	r2, r1, r2, lsl #3
 80a279c:	4695      	mov	sp, r2
 80a279e:	4668      	mov	r0, sp
                        for (uint16_t i=0;i<tl;i++) {
 80a27a0:	f10c 0203 	add.w	r2, ip, #3
 80a27a4:	60fa      	str	r2, [r7, #12]
 80a27a6:	eb03 0e02 	add.w	lr, r3, r2
 80a27aa:	eb0d 0205 	add.w	r2, sp, r5
 80a27ae:	f8c7 d008 	str.w	sp, [r7, #8]
 80a27b2:	607a      	str	r2, [r7, #4]
 80a27b4:	e9d7 2101 	ldrd	r2, r1, [r7, #4]
 80a27b8:	428a      	cmp	r2, r1
 80a27ba:	d006      	beq.n	80a27ca <_ZN4MQTT4loopEv+0xea>
                            topic[i] = buffer[llen+3+i];
 80a27bc:	460a      	mov	r2, r1
 80a27be:	f81e 8b01 	ldrb.w	r8, [lr], #1
 80a27c2:	f802 8b01 	strb.w	r8, [r2], #1
 80a27c6:	60ba      	str	r2, [r7, #8]
                        for (uint16_t i=0;i<tl;i++) {
 80a27c8:	e7f4      	b.n	80a27b4 <_ZN4MQTT4loopEv+0xd4>
                        topic[tl] = 0;
 80a27ca:	2200      	movs	r2, #0
 80a27cc:	5542      	strb	r2, [r0, r5]
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
 80a27ce:	f893 8000 	ldrb.w	r8, [r3]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
 80a27d2:	68f9      	ldr	r1, [r7, #12]
 80a27d4:	f008 0806 	and.w	r8, r8, #6
 80a27d8:	ebab 020c 	sub.w	r2, fp, ip
 80a27dc:	3a03      	subs	r2, #3
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
 80a27de:	f1b8 0f02 	cmp.w	r8, #2
 80a27e2:	eba2 0205 	sub.w	r2, r2, r5
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
 80a27e6:	4429      	add	r1, r5
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
 80a27e8:	d124      	bne.n	80a2834 <_ZN4MQTT4loopEv+0x154>
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
 80a27ea:	f813 e001 	ldrb.w	lr, [r3, r1]
 80a27ee:	4419      	add	r1, r3
 80a27f0:	f891 b001 	ldrb.w	fp, [r1, #1]
                            payload = buffer+llen+3+tl+2;
 80a27f4:	f10c 0105 	add.w	r1, ip, #5
 80a27f8:	4429      	add	r1, r5
                            callback(topic,payload,len-llen-3-tl-2);
 80a27fa:	3a02      	subs	r2, #2
 80a27fc:	4419      	add	r1, r3
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
 80a27fe:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
                            callback(topic,payload,len-llen-3-tl-2);
 80a2802:	47d0      	blx	sl
                            buffer[0] = MQTTPUBACK; // respond with PUBACK
 80a2804:	2240      	movs	r2, #64	; 0x40
 80a2806:	69e3      	ldr	r3, [r4, #28]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
 80a2808:	fa1f fb8b 	uxth.w	fp, fp
                            buffer[0] = MQTTPUBACK; // respond with PUBACK
 80a280c:	701a      	strb	r2, [r3, #0]
                            buffer[1] = 2;
 80a280e:	69e3      	ldr	r3, [r4, #28]
 80a2810:	f883 8001 	strb.w	r8, [r3, #1]
                            buffer[2] = (msgId >> 8);
 80a2814:	69e3      	ldr	r3, [r4, #28]
 80a2816:	ea4f 222b 	mov.w	r2, fp, asr #8
 80a281a:	709a      	strb	r2, [r3, #2]
                            buffer[3] = (msgId & 0xFF);
 80a281c:	69e3      	ldr	r3, [r4, #28]
                            _client.write(buffer,4);
 80a281e:	2204      	movs	r2, #4
                            buffer[3] = (msgId & 0xFF);
 80a2820:	f883 b003 	strb.w	fp, [r3, #3]
                            _client.write(buffer,4);
 80a2824:	4620      	mov	r0, r4
 80a2826:	69e1      	ldr	r1, [r4, #28]
 80a2828:	f001 f9aa 	bl	80a3b80 <_ZN9TCPClient5writeEPKhj>
                            lastOutActivity = t;
 80a282c:	6266      	str	r6, [r4, #36]	; 0x24
 80a282e:	f8d7 d000 	ldr.w	sp, [r7]
 80a2832:	e775      	b.n	80a2720 <_ZN4MQTT4loopEv+0x40>
        						    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
 80a2834:	f1b8 0f04 	cmp.w	r8, #4
 80a2838:	d115      	bne.n	80a2866 <_ZN4MQTT4loopEv+0x186>
							              msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
 80a283a:	f813 e001 	ldrb.w	lr, [r3, r1]
 80a283e:	4419      	add	r1, r3
 80a2840:	f891 b001 	ldrb.w	fp, [r1, #1]
							              payload = buffer + llen + 3 + tl + 2;
 80a2844:	f10c 0105 	add.w	r1, ip, #5
 80a2848:	4429      	add	r1, r5
							              callback(topic, payload, len - llen - 3 - tl - 2);
 80a284a:	3a02      	subs	r2, #2
 80a284c:	4419      	add	r1, r3
							              msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
 80a284e:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
							              callback(topic, payload, len - llen - 3 - tl - 2);
 80a2852:	47d0      	blx	sl
              							buffer[0] = MQTTPUBREC; // respond with PUBREC
 80a2854:	2250      	movs	r2, #80	; 0x50
 80a2856:	69e3      	ldr	r3, [r4, #28]
							              msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
 80a2858:	fa1f fb8b 	uxth.w	fp, fp
              							buffer[0] = MQTTPUBREC; // respond with PUBREC
 80a285c:	701a      	strb	r2, [r3, #0]
              							buffer[1] = 2;
 80a285e:	2202      	movs	r2, #2
 80a2860:	69e3      	ldr	r3, [r4, #28]
 80a2862:	705a      	strb	r2, [r3, #1]
              							buffer[2] = (msgId >> 8);
 80a2864:	e7d6      	b.n	80a2814 <_ZN4MQTT4loopEv+0x134>
                            callback(topic,payload,len-llen-3-tl);
 80a2866:	4419      	add	r1, r3
 80a2868:	47d0      	blx	sl
 80a286a:	e7e0      	b.n	80a282e <_ZN4MQTT4loopEv+0x14e>
                } else if (type == MQTTPUBREC) {
 80a286c:	2a50      	cmp	r2, #80	; 0x50
 80a286e:	d108      	bne.n	80a2882 <_ZN4MQTT4loopEv+0x1a2>
                    msgId = (buffer[2] << 8) + buffer[3];
 80a2870:	789a      	ldrb	r2, [r3, #2]
 80a2872:	78d9      	ldrb	r1, [r3, #3]
                    this->publishRelease(msgId);
 80a2874:	4620      	mov	r0, r4
                    msgId = (buffer[2] << 8) + buffer[3];
 80a2876:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                    this->publishRelease(msgId);
 80a287a:	b289      	uxth	r1, r1
 80a287c:	f7ff fefc 	bl	80a2678 <_ZN4MQTT14publishReleaseEt>
 80a2880:	e74e      	b.n	80a2720 <_ZN4MQTT4loopEv+0x40>
                } else if (type == MQTTPUBACK) {
 80a2882:	2a40      	cmp	r2, #64	; 0x40
 80a2884:	d112      	bne.n	80a28ac <_ZN4MQTT4loopEv+0x1cc>
                  if (qoscallback) {
 80a2886:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80a2888:	2a00      	cmp	r2, #0
 80a288a:	f43f af49 	beq.w	80a2720 <_ZN4MQTT4loopEv+0x40>
                      if (len == 4 && (buffer[0]&0x06) == MQTTQOS0_HEADER_MASK) {
 80a288e:	f1bb 0f04 	cmp.w	fp, #4
 80a2892:	f47f af45 	bne.w	80a2720 <_ZN4MQTT4loopEv+0x40>
 80a2896:	f011 0f06 	tst.w	r1, #6
 80a289a:	f47f af41 	bne.w	80a2720 <_ZN4MQTT4loopEv+0x40>
                          msgId = (buffer[2]<<8)+buffer[3];
 80a289e:	7899      	ldrb	r1, [r3, #2]
 80a28a0:	78d8      	ldrb	r0, [r3, #3]
 80a28a2:	eb00 2001 	add.w	r0, r0, r1, lsl #8
                          this->qoscallback(msgId);
 80a28a6:	b280      	uxth	r0, r0
 80a28a8:	4790      	blx	r2
 80a28aa:	e739      	b.n	80a2720 <_ZN4MQTT4loopEv+0x40>
                } else if (type == MQTTPUBREL) {
 80a28ac:	2a60      	cmp	r2, #96	; 0x60
 80a28ae:	d108      	bne.n	80a28c2 <_ZN4MQTT4loopEv+0x1e2>
                  msgId = (buffer[2] << 8) + buffer[3];
 80a28b0:	789a      	ldrb	r2, [r3, #2]
 80a28b2:	78d9      	ldrb	r1, [r3, #3]
                  this->publishComplete(msgId);
 80a28b4:	4620      	mov	r0, r4
                  msgId = (buffer[2] << 8) + buffer[3];
 80a28b6:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                  this->publishComplete(msgId);
 80a28ba:	b289      	uxth	r1, r1
 80a28bc:	f7ff fef6 	bl	80a26ac <_ZN4MQTT15publishCompleteEt>
 80a28c0:	e72e      	b.n	80a2720 <_ZN4MQTT4loopEv+0x40>
                } else if (type == MQTTPUBCOMP) {
 80a28c2:	2a70      	cmp	r2, #112	; 0x70
 80a28c4:	d0df      	beq.n	80a2886 <_ZN4MQTT4loopEv+0x1a6>
                } else if (type == MQTTSUBACK) {
 80a28c6:	2a90      	cmp	r2, #144	; 0x90
 80a28c8:	f43f af2a 	beq.w	80a2720 <_ZN4MQTT4loopEv+0x40>
                } else if (type == MQTTPINGREQ) {
 80a28cc:	2ac0      	cmp	r2, #192	; 0xc0
 80a28ce:	d10a      	bne.n	80a28e6 <_ZN4MQTT4loopEv+0x206>
                    buffer[0] = MQTTPINGRESP;
 80a28d0:	22d0      	movs	r2, #208	; 0xd0
 80a28d2:	701a      	strb	r2, [r3, #0]
                    buffer[1] = 0;
 80a28d4:	2200      	movs	r2, #0
 80a28d6:	69e3      	ldr	r3, [r4, #28]
                    _client.write(buffer,2);
 80a28d8:	4620      	mov	r0, r4
                    buffer[1] = 0;
 80a28da:	705a      	strb	r2, [r3, #1]
                    _client.write(buffer,2);
 80a28dc:	69e1      	ldr	r1, [r4, #28]
 80a28de:	2202      	movs	r2, #2
 80a28e0:	f001 f94e 	bl	80a3b80 <_ZN9TCPClient5writeEPKhj>
 80a28e4:	e71c      	b.n	80a2720 <_ZN4MQTT4loopEv+0x40>
                } else if (type == MQTTPINGRESP) {
 80a28e6:	2ad0      	cmp	r2, #208	; 0xd0
                    pingOutstanding = false;
 80a28e8:	bf04      	itt	eq
 80a28ea:	2300      	moveq	r3, #0
 80a28ec:	f884 302c 	strbeq.w	r3, [r4, #44]	; 0x2c
 80a28f0:	e716      	b.n	80a2720 <_ZN4MQTT4loopEv+0x40>

080a28f2 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>:
bool MQTT::subscribe(const char* topic, EMQTT_QOS qos) {
 80a28f2:	b570      	push	{r4, r5, r6, lr}
 80a28f4:	4604      	mov	r4, r0
 80a28f6:	460e      	mov	r6, r1
 80a28f8:	4615      	mov	r5, r2
    if (isConnected()) {
 80a28fa:	f7ff fd3c 	bl	80a2376 <_ZN4MQTT11isConnectedEv>
 80a28fe:	b1f0      	cbz	r0, 80a293e <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x4c>
        nextMsgId++;
 80a2900:	8c23      	ldrh	r3, [r4, #32]
 80a2902:	3301      	adds	r3, #1
 80a2904:	b29b      	uxth	r3, r3
        if (nextMsgId == 0) {
 80a2906:	b1c3      	cbz	r3, 80a293a <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x48>
            nextMsgId = 1;
 80a2908:	8423      	strh	r3, [r4, #32]
        buffer[length++] = (nextMsgId >> 8);
 80a290a:	8c23      	ldrh	r3, [r4, #32]
 80a290c:	69e2      	ldr	r2, [r4, #28]
 80a290e:	121b      	asrs	r3, r3, #8
 80a2910:	7153      	strb	r3, [r2, #5]
        buffer[length++] = (nextMsgId & 0xFF);
 80a2912:	69e3      	ldr	r3, [r4, #28]
 80a2914:	8c22      	ldrh	r2, [r4, #32]
        length = writeString(topic, buffer,length);
 80a2916:	4631      	mov	r1, r6
        buffer[length++] = (nextMsgId & 0xFF);
 80a2918:	719a      	strb	r2, [r3, #6]
        length = writeString(topic, buffer,length);
 80a291a:	69e2      	ldr	r2, [r4, #28]
 80a291c:	2307      	movs	r3, #7
 80a291e:	4620      	mov	r0, r4
 80a2920:	f7ff fd0f 	bl	80a2342 <_ZN4MQTT11writeStringEPKcPht>
        buffer[length++] = qos;
 80a2924:	69e3      	ldr	r3, [r4, #28]
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
 80a2926:	2182      	movs	r1, #130	; 0x82
        buffer[length++] = qos;
 80a2928:	541d      	strb	r5, [r3, r0]
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
 80a292a:	3804      	subs	r0, #4
 80a292c:	69e2      	ldr	r2, [r4, #28]
 80a292e:	b283      	uxth	r3, r0
 80a2930:	4620      	mov	r0, r4
}
 80a2932:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
 80a2936:	f7ff bcb3 	b.w	80a22a0 <_ZN4MQTT5writeEhPht>
            nextMsgId = 1;
 80a293a:	2301      	movs	r3, #1
 80a293c:	e7e4      	b.n	80a2908 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x16>
}
 80a293e:	bd70      	pop	{r4, r5, r6, pc}

080a2940 <_ZN4MQTT9subscribeEPKc>:
    return subscribe(topic, QOS0);
 80a2940:	2200      	movs	r2, #0
 80a2942:	f7ff bfd6 	b.w	80a28f2 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>
	...

080a2948 <_ZN4MQTTD1Ev>:
MQTT::~MQTT() {
 80a2948:	b538      	push	{r3, r4, r5, lr}
 80a294a:	4605      	mov	r5, r0
    if (isConnected()) {
 80a294c:	f7ff fd13 	bl	80a2376 <_ZN4MQTT11isConnectedEv>
 80a2950:	b110      	cbz	r0, 80a2958 <_ZN4MQTTD1Ev+0x10>
        disconnect();
 80a2952:	4628      	mov	r0, r5
 80a2954:	f7ff fce1 	bl	80a231a <_ZN4MQTT10disconnectEv>
    if (buffer != NULL)
 80a2958:	69e8      	ldr	r0, [r5, #28]
 80a295a:	b108      	cbz	r0, 80a2960 <_ZN4MQTTD1Ev+0x18>
      delete[] buffer;
 80a295c:	f7fd fba1 	bl	80a00a2 <_ZdaPv>
MQTT::~MQTT() {
 80a2960:	f105 0038 	add.w	r0, r5, #56	; 0x38
 80a2964:	f001 fbd8 	bl	80a4118 <_ZN6StringD1Ev>
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
 80a2968:	4b0a      	ldr	r3, [pc, #40]	; (80a2994 <_ZN4MQTTD1Ev+0x4c>)
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 80a296a:	69ac      	ldr	r4, [r5, #24]
 80a296c:	602b      	str	r3, [r5, #0]
 80a296e:	b17c      	cbz	r4, 80a2990 <_ZN4MQTTD1Ev+0x48>
      if (--_M_use_count == 0)
 80a2970:	6863      	ldr	r3, [r4, #4]
 80a2972:	3b01      	subs	r3, #1
 80a2974:	6063      	str	r3, [r4, #4]
 80a2976:	b95b      	cbnz	r3, 80a2990 <_ZN4MQTTD1Ev+0x48>
          _M_dispose();
 80a2978:	6823      	ldr	r3, [r4, #0]
 80a297a:	4620      	mov	r0, r4
 80a297c:	689b      	ldr	r3, [r3, #8]
 80a297e:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a2980:	68a3      	ldr	r3, [r4, #8]
 80a2982:	3b01      	subs	r3, #1
 80a2984:	60a3      	str	r3, [r4, #8]
 80a2986:	b91b      	cbnz	r3, 80a2990 <_ZN4MQTTD1Ev+0x48>
            _M_destroy();
 80a2988:	6823      	ldr	r3, [r4, #0]
 80a298a:	4620      	mov	r0, r4
 80a298c:	68db      	ldr	r3, [r3, #12]
 80a298e:	4798      	blx	r3
}
 80a2990:	4628      	mov	r0, r5
 80a2992:	bd38      	pop	{r3, r4, r5, pc}
 80a2994:	080a86d4 	.word	0x080a86d4

080a2998 <_ZN10JsonBufferD1Ev>:


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {

}
JsonBuffer::~JsonBuffer() {
 80a2998:	b510      	push	{r4, lr}
 80a299a:	4b05      	ldr	r3, [pc, #20]	; (80a29b0 <_ZN10JsonBufferD1Ev+0x18>)
 80a299c:	4604      	mov	r4, r0
 80a299e:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && buffer) {
 80a29a0:	7c03      	ldrb	r3, [r0, #16]
 80a29a2:	b91b      	cbnz	r3, 80a29ac <_ZN10JsonBufferD1Ev+0x14>
 80a29a4:	6840      	ldr	r0, [r0, #4]
 80a29a6:	b108      	cbz	r0, 80a29ac <_ZN10JsonBufferD1Ev+0x14>
		free(buffer);
 80a29a8:	f000 ffd2 	bl	80a3950 <free>
	}
}
 80a29ac:	4620      	mov	r0, r4
 80a29ae:	bd10      	pop	{r4, pc}
 80a29b0:	080a8664 	.word	0x080a8664

080a29b4 <_ZN10JsonBufferD0Ev>:
JsonBuffer::~JsonBuffer() {
 80a29b4:	b510      	push	{r4, lr}
 80a29b6:	4604      	mov	r4, r0
}
 80a29b8:	f7ff ffee 	bl	80a2998 <_ZN10JsonBufferD1Ev>
 80a29bc:	4620      	mov	r0, r4
 80a29be:	2114      	movs	r1, #20
 80a29c0:	f002 fd35 	bl	80a542e <_ZdlPvj>
 80a29c4:	4620      	mov	r0, r4
 80a29c6:	bd10      	pop	{r4, pc}

080a29c8 <_ZN10JsonWriterD1Ev>:
//
JsonWriter::JsonWriter() : JsonBuffer(), floatPlaces(-1) {
	init();
}

JsonWriter::~JsonWriter() {
 80a29c8:	b510      	push	{r4, lr}
 80a29ca:	4604      	mov	r4, r0
 80a29cc:	4b02      	ldr	r3, [pc, #8]	; (80a29d8 <_ZN10JsonWriterD1Ev+0x10>)
 80a29ce:	6003      	str	r3, [r0, #0]
 80a29d0:	f7ff ffe2 	bl	80a2998 <_ZN10JsonBufferD1Ev>

}
 80a29d4:	4620      	mov	r0, r4
 80a29d6:	bd10      	pop	{r4, pc}
 80a29d8:	080a8684 	.word	0x080a8684

080a29dc <_ZN10JsonWriterD0Ev>:
JsonWriter::~JsonWriter() {
 80a29dc:	b510      	push	{r4, lr}
 80a29de:	4604      	mov	r4, r0
}
 80a29e0:	f7ff fff2 	bl	80a29c8 <_ZN10JsonWriterD1Ev>
 80a29e4:	4620      	mov	r0, r4
 80a29e6:	2130      	movs	r1, #48	; 0x30
 80a29e8:	f002 fd21 	bl	80a542e <_ZdlPvj>
 80a29ec:	4620      	mov	r0, r4
 80a29ee:	bd10      	pop	{r4, pc}

080a29f0 <_ZN10JsonParserD1Ev>:
JsonParser::~JsonParser() {
 80a29f0:	b510      	push	{r4, lr}
 80a29f2:	4b07      	ldr	r3, [pc, #28]	; (80a2a10 <_ZN10JsonParserD1Ev+0x20>)
 80a29f4:	4604      	mov	r4, r0
 80a29f6:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && tokens) {
 80a29f8:	7c03      	ldrb	r3, [r0, #16]
 80a29fa:	b91b      	cbnz	r3, 80a2a04 <_ZN10JsonParserD1Ev+0x14>
 80a29fc:	6940      	ldr	r0, [r0, #20]
 80a29fe:	b108      	cbz	r0, 80a2a04 <_ZN10JsonParserD1Ev+0x14>
		free(tokens);
 80a2a00:	f000 ffa6 	bl	80a3950 <free>
JsonParser::~JsonParser() {
 80a2a04:	4620      	mov	r0, r4
 80a2a06:	f7ff ffc7 	bl	80a2998 <_ZN10JsonBufferD1Ev>
}
 80a2a0a:	4620      	mov	r0, r4
 80a2a0c:	bd10      	pop	{r4, pc}
 80a2a0e:	bf00      	nop
 80a2a10:	080a8674 	.word	0x080a8674

080a2a14 <_ZN10JsonParserD0Ev>:
JsonParser::~JsonParser() {
 80a2a14:	b510      	push	{r4, lr}
 80a2a16:	4604      	mov	r4, r0
}
 80a2a18:	f7ff ffea 	bl	80a29f0 <_ZN10JsonParserD1Ev>
 80a2a1c:	4620      	mov	r0, r4
 80a2a1e:	212c      	movs	r1, #44	; 0x2c
 80a2a20:	f002 fd05 	bl	80a542e <_ZdlPvj>
 80a2a24:	4620      	mov	r0, r4
 80a2a26:	bd10      	pop	{r4, pc}

080a2a28 <_ZN10JsonBufferC1Ev>:
JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {
 80a2a28:	4a03      	ldr	r2, [pc, #12]	; (80a2a38 <_ZN10JsonBufferC1Ev+0x10>)
 80a2a2a:	6002      	str	r2, [r0, #0]
 80a2a2c:	2200      	movs	r2, #0
 80a2a2e:	e9c0 2201 	strd	r2, r2, [r0, #4]
 80a2a32:	60c2      	str	r2, [r0, #12]
 80a2a34:	7402      	strb	r2, [r0, #16]
}
 80a2a36:	4770      	bx	lr
 80a2a38:	080a8664 	.word	0x080a8664

080a2a3c <_ZN10JsonBuffer8allocateEj>:
bool JsonBuffer::allocate(size_t len) {
 80a2a3c:	b538      	push	{r3, r4, r5, lr}
	if (!staticBuffers) {
 80a2a3e:	7c03      	ldrb	r3, [r0, #16]
bool JsonBuffer::allocate(size_t len) {
 80a2a40:	4604      	mov	r4, r0
 80a2a42:	460d      	mov	r5, r1
	if (!staticBuffers) {
 80a2a44:	b10b      	cbz	r3, 80a2a4a <_ZN10JsonBuffer8allocateEj+0xe>
		return false;
 80a2a46:	2000      	movs	r0, #0
}
 80a2a48:	bd38      	pop	{r3, r4, r5, pc}
		if (buffer) {
 80a2a4a:	6840      	ldr	r0, [r0, #4]
 80a2a4c:	b138      	cbz	r0, 80a2a5e <_ZN10JsonBuffer8allocateEj+0x22>
			newBuffer = (char *) realloc(buffer, len);
 80a2a4e:	f000 ff87 	bl	80a3960 <realloc>
		if (newBuffer) {
 80a2a52:	2800      	cmp	r0, #0
 80a2a54:	d0f7      	beq.n	80a2a46 <_ZN10JsonBuffer8allocateEj+0xa>
			bufferLen = len;
 80a2a56:	e9c4 0501 	strd	r0, r5, [r4, #4]
			return true;
 80a2a5a:	2001      	movs	r0, #1
 80a2a5c:	e7f4      	b.n	80a2a48 <_ZN10JsonBuffer8allocateEj+0xc>
			newBuffer = (char *) malloc(len);
 80a2a5e:	4608      	mov	r0, r1
 80a2a60:	f000 ff6e 	bl	80a3940 <malloc>
 80a2a64:	e7f5      	b.n	80a2a52 <_ZN10JsonBuffer8allocateEj+0x16>

080a2a66 <_ZN10JsonBuffer7addDataEPKcj>:
bool JsonBuffer::addData(const char *data, size_t dataLen) {
 80a2a66:	b570      	push	{r4, r5, r6, lr}
 80a2a68:	68c3      	ldr	r3, [r0, #12]
 80a2a6a:	460e      	mov	r6, r1
 80a2a6c:	18d1      	adds	r1, r2, r3
	if (!buffer || (offset + dataLen) > bufferLen) {
 80a2a6e:	6843      	ldr	r3, [r0, #4]
bool JsonBuffer::addData(const char *data, size_t dataLen) {
 80a2a70:	4604      	mov	r4, r0
 80a2a72:	4615      	mov	r5, r2
	if (!buffer || (offset + dataLen) > bufferLen) {
 80a2a74:	b173      	cbz	r3, 80a2a94 <_ZN10JsonBuffer7addDataEPKcj+0x2e>
 80a2a76:	6883      	ldr	r3, [r0, #8]
 80a2a78:	428b      	cmp	r3, r1
 80a2a7a:	d30b      	bcc.n	80a2a94 <_ZN10JsonBuffer7addDataEPKcj+0x2e>
	memcpy(&buffer[offset], data, dataLen);
 80a2a7c:	6860      	ldr	r0, [r4, #4]
 80a2a7e:	68e3      	ldr	r3, [r4, #12]
 80a2a80:	462a      	mov	r2, r5
 80a2a82:	4631      	mov	r1, r6
 80a2a84:	4418      	add	r0, r3
 80a2a86:	f004 f86f 	bl	80a6b68 <memcpy>
	return true;
 80a2a8a:	2001      	movs	r0, #1
	offset += dataLen;
 80a2a8c:	68e2      	ldr	r2, [r4, #12]
 80a2a8e:	442a      	add	r2, r5
 80a2a90:	60e2      	str	r2, [r4, #12]
}
 80a2a92:	bd70      	pop	{r4, r5, r6, pc}
		if (!allocate(offset + dataLen)) {
 80a2a94:	4620      	mov	r0, r4
 80a2a96:	f7ff ffd1 	bl	80a2a3c <_ZN10JsonBuffer8allocateEj>
 80a2a9a:	2800      	cmp	r0, #0
 80a2a9c:	d1ee      	bne.n	80a2a7c <_ZN10JsonBuffer7addDataEPKcj+0x16>
 80a2a9e:	e7f8      	b.n	80a2a92 <_ZN10JsonBuffer7addDataEPKcj+0x2c>

080a2aa0 <_ZN10JsonBuffer5clearEv>:
	offset = 0;
 80a2aa0:	2300      	movs	r3, #0
 80a2aa2:	60c3      	str	r3, [r0, #12]
}
 80a2aa4:	4770      	bx	lr
	...

080a2aa8 <_ZN10JsonParserC1Ev>:
JsonParser::JsonParser() : JsonBuffer(), tokens(0), tokensEnd(0), maxTokens(0) {
 80a2aa8:	b508      	push	{r3, lr}
 80a2aaa:	4603      	mov	r3, r0
 80a2aac:	f7ff ffbc 	bl	80a2a28 <_ZN10JsonBufferC1Ev>
 80a2ab0:	4a03      	ldr	r2, [pc, #12]	; (80a2ac0 <_ZN10JsonParserC1Ev+0x18>)
}
 80a2ab2:	4618      	mov	r0, r3
JsonParser::JsonParser() : JsonBuffer(), tokens(0), tokensEnd(0), maxTokens(0) {
 80a2ab4:	601a      	str	r2, [r3, #0]
 80a2ab6:	2200      	movs	r2, #0
 80a2ab8:	e9c3 2205 	strd	r2, r2, [r3, #20]
 80a2abc:	61da      	str	r2, [r3, #28]
}
 80a2abe:	bd08      	pop	{r3, pc}
 80a2ac0:	080a8674 	.word	0x080a8674

080a2ac4 <_ZNK10JsonParser14getOuterObjectEv>:
const JsonParserGeneratorRK::jsmntok_t *JsonParser::getOuterObject() const {
 80a2ac4:	4603      	mov	r3, r0
	if (tokens < tokensEnd && tokens[0].type == JsonParserGeneratorRK::JSMN_OBJECT) {
 80a2ac6:	e9d3 0305 	ldrd	r0, r3, [r3, #20]
 80a2aca:	4298      	cmp	r0, r3
 80a2acc:	d204      	bcs.n	80a2ad8 <_ZNK10JsonParser14getOuterObjectEv+0x14>
 80a2ace:	7803      	ldrb	r3, [r0, #0]
 80a2ad0:	2b01      	cmp	r3, #1
		return 0;
 80a2ad2:	bf18      	it	ne
 80a2ad4:	2000      	movne	r0, #0
 80a2ad6:	4770      	bx	lr
 80a2ad8:	2000      	movs	r0, #0
}
 80a2ada:	4770      	bx	lr

080a2adc <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>:
bool JsonParser::skipObject(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&obj) const {
 80a2adc:	b570      	push	{r4, r5, r6, lr}
	int curObjectEnd = obj->end;
 80a2ade:	6813      	ldr	r3, [r2, #0]
 80a2ae0:	689d      	ldr	r5, [r3, #8]
	while(++obj < tokensEnd && obj->end < container->end && obj->end <= curObjectEnd) {
 80a2ae2:	6813      	ldr	r3, [r2, #0]
 80a2ae4:	f103 0410 	add.w	r4, r3, #16
 80a2ae8:	6014      	str	r4, [r2, #0]
 80a2aea:	6986      	ldr	r6, [r0, #24]
 80a2aec:	42b4      	cmp	r4, r6
 80a2aee:	d20a      	bcs.n	80a2b06 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x2a>
 80a2af0:	699b      	ldr	r3, [r3, #24]
 80a2af2:	688c      	ldr	r4, [r1, #8]
 80a2af4:	42a3      	cmp	r3, r4
 80a2af6:	da01      	bge.n	80a2afc <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x20>
 80a2af8:	42ab      	cmp	r3, r5
 80a2afa:	ddf2      	ble.n	80a2ae2 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x6>
	if (obj >= tokensEnd || obj->end > container->end) {
 80a2afc:	42a3      	cmp	r3, r4
 80a2afe:	bfcc      	ite	gt
 80a2b00:	2000      	movgt	r0, #0
 80a2b02:	2001      	movle	r0, #1
 80a2b04:	e000      	b.n	80a2b08 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x2c>
		return false;
 80a2b06:	2000      	movs	r0, #0
}
 80a2b08:	bd70      	pop	{r4, r5, r6, pc}

080a2b0a <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j>:
bool JsonParser::getKeyValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&key, const JsonParserGeneratorRK::jsmntok_t *&value, size_t desiredIndex) const {
 80a2b0a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80a2b0e:	4605      	mov	r5, r0
 80a2b10:	4617      	mov	r7, r2
	size_t index = 0;
 80a2b12:	2600      	movs	r6, #0
bool JsonParser::getKeyValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&key, const JsonParserGeneratorRK::jsmntok_t *&value, size_t desiredIndex) const {
 80a2b14:	4698      	mov	r8, r3
 80a2b16:	9c08      	ldr	r4, [sp, #32]
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
 80a2b18:	f101 0310 	add.w	r3, r1, #16
 80a2b1c:	9301      	str	r3, [sp, #4]
	while(token < tokensEnd && token->end < container->end) {
 80a2b1e:	9801      	ldr	r0, [sp, #4]
 80a2b20:	69ab      	ldr	r3, [r5, #24]
 80a2b22:	4283      	cmp	r3, r0
 80a2b24:	d91b      	bls.n	80a2b5e <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x54>
 80a2b26:	6882      	ldr	r2, [r0, #8]
 80a2b28:	688b      	ldr	r3, [r1, #8]
 80a2b2a:	429a      	cmp	r2, r3
 80a2b2c:	da17      	bge.n	80a2b5e <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x54>
		if (desiredIndex == index) {
 80a2b2e:	42a6      	cmp	r6, r4
 80a2b30:	d10b      	bne.n	80a2b4a <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x40>
			key = token;
 80a2b32:	6038      	str	r0, [r7, #0]
			if (skipObject(container, token)) {
 80a2b34:	aa01      	add	r2, sp, #4
 80a2b36:	4628      	mov	r0, r5
 80a2b38:	f7ff ffd0 	bl	80a2adc <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
 80a2b3c:	b128      	cbz	r0, 80a2b4a <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x40>
				value = token;
 80a2b3e:	9b01      	ldr	r3, [sp, #4]
 80a2b40:	f8c8 3000 	str.w	r3, [r8]
}
 80a2b44:	b002      	add	sp, #8
 80a2b46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		skipObject(container, token);
 80a2b4a:	aa01      	add	r2, sp, #4
 80a2b4c:	4628      	mov	r0, r5
 80a2b4e:	f7ff ffc5 	bl	80a2adc <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
		skipObject(container, token);
 80a2b52:	4628      	mov	r0, r5
 80a2b54:	aa01      	add	r2, sp, #4
		index++;
 80a2b56:	3601      	adds	r6, #1
		skipObject(container, token);
 80a2b58:	f7ff ffc0 	bl	80a2adc <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
	while(token < tokensEnd && token->end < container->end) {
 80a2b5c:	e7df      	b.n	80a2b1e <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x14>
	return false;
 80a2b5e:	2000      	movs	r0, #0
 80a2b60:	e7f0      	b.n	80a2b44 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x3a>

080a2b62 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj>:
void JsonParser::copyTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, char *dst, size_t dstLen) const {
 80a2b62:	b5f0      	push	{r4, r5, r6, r7, lr}
	for(ii = 0; ii < (token->end - token->start) && ii < ((int)dstLen - 1); ii++) {
 80a2b64:	2400      	movs	r4, #0
 80a2b66:	3b01      	subs	r3, #1
 80a2b68:	e9d1 7601 	ldrd	r7, r6, [r1, #4]
 80a2b6c:	1bf6      	subs	r6, r6, r7
 80a2b6e:	42a6      	cmp	r6, r4
 80a2b70:	dd08      	ble.n	80a2b84 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj+0x22>
 80a2b72:	42a3      	cmp	r3, r4
 80a2b74:	dd06      	ble.n	80a2b84 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj+0x22>
		dst[ii] = buffer[token->start + ii];
 80a2b76:	6845      	ldr	r5, [r0, #4]
 80a2b78:	443d      	add	r5, r7
 80a2b7a:	5d2d      	ldrb	r5, [r5, r4]
	for(ii = 0; ii < (token->end - token->start) && ii < ((int)dstLen - 1); ii++) {
 80a2b7c:	3401      	adds	r4, #1
		dst[ii] = buffer[token->start + ii];
 80a2b7e:	f802 5b01 	strb.w	r5, [r2], #1
	for(ii = 0; ii < (token->end - token->start) && ii < ((int)dstLen - 1); ii++) {
 80a2b82:	e7f1      	b.n	80a2b68 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj+0x6>
	dst[ii] = 0;
 80a2b84:	2300      	movs	r3, #0
 80a2b86:	7013      	strb	r3, [r2, #0]
}
 80a2b88:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080a2b8c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERi>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, int &result) const {
 80a2b8c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80a2b8e:	4614      	mov	r4, r2
	copyTokenValue(token, tmp, sizeof(tmp));
 80a2b90:	2310      	movs	r3, #16
 80a2b92:	466a      	mov	r2, sp
 80a2b94:	f7ff ffe5 	bl	80a2b62 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj>
	if (sscanf(tmp, "%d", &result) == 1) {
 80a2b98:	4622      	mov	r2, r4
 80a2b9a:	4668      	mov	r0, sp
 80a2b9c:	4903      	ldr	r1, [pc, #12]	; (80a2bac <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERi+0x20>)
 80a2b9e:	f000 feef 	bl	80a3980 <sscanf>
}
 80a2ba2:	1e43      	subs	r3, r0, #1
 80a2ba4:	4258      	negs	r0, r3
 80a2ba6:	4158      	adcs	r0, r3
 80a2ba8:	b004      	add	sp, #16
 80a2baa:	bd10      	pop	{r4, pc}
 80a2bac:	080a8a53 	.word	0x080a8a53

080a2bb0 <_ZN16JsonParserString6appendEc>:
void JsonParserString::append(char ch) {
 80a2bb0:	b510      	push	{r4, lr}
 80a2bb2:	4604      	mov	r4, r0
	if (str) {
 80a2bb4:	6800      	ldr	r0, [r0, #0]
void JsonParserString::append(char ch) {
 80a2bb6:	460b      	mov	r3, r1
	if (str) {
 80a2bb8:	b128      	cbz	r0, 80a2bc6 <_ZN16JsonParserString6appendEc+0x16>
		str->concat(ch);
 80a2bba:	f001 fbc4 	bl	80a4346 <_ZN6String6concatEc>
		length++;
 80a2bbe:	68e3      	ldr	r3, [r4, #12]
 80a2bc0:	3301      	adds	r3, #1
 80a2bc2:	60e3      	str	r3, [r4, #12]
}
 80a2bc4:	bd10      	pop	{r4, pc}
		if (buf && length < (bufLen - 1)) {
 80a2bc6:	6860      	ldr	r0, [r4, #4]
 80a2bc8:	2800      	cmp	r0, #0
 80a2bca:	d0f8      	beq.n	80a2bbe <_ZN16JsonParserString6appendEc+0xe>
 80a2bcc:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 80a2bd0:	3a01      	subs	r2, #1
 80a2bd2:	428a      	cmp	r2, r1
			buf[length] = ch;
 80a2bd4:	bf88      	it	hi
 80a2bd6:	5443      	strbhi	r3, [r0, r1]
 80a2bd8:	e7f1      	b.n	80a2bbe <_ZN16JsonParserString6appendEc+0xe>

080a2bda <_ZN10JsonParser10appendUtf8EtR16JsonParserString>:
	if (unicode <= 0x007f) {
 80a2bda:	287f      	cmp	r0, #127	; 0x7f
void JsonParser::appendUtf8(uint16_t unicode, JsonParserString &str) {
 80a2bdc:	b570      	push	{r4, r5, r6, lr}
 80a2bde:	460c      	mov	r4, r1
 80a2be0:	b2c1      	uxtb	r1, r0
	if (unicode <= 0x007f) {
 80a2be2:	d804      	bhi.n	80a2bee <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x14>
		str.append((char)value);
 80a2be4:	4620      	mov	r0, r4
}
 80a2be6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		str.append((char)value);
 80a2bea:	f7ff bfe1 	b.w	80a2bb0 <_ZN16JsonParserString6appendEc>
	if (unicode <= 0x7ff) {
 80a2bee:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80a2bf2:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 80a2bf6:	f340 1687 	sbfx	r6, r0, #6, #8
 80a2bfa:	f041 0580 	orr.w	r5, r1, #128	; 0x80
 80a2bfe:	d207      	bcs.n	80a2c10 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x36>
		value = (0b11000000 | ((unicode >> 6) & 0b11111));
 80a2c00:	f066 013f 	orn	r1, r6, #63	; 0x3f
		str.append((char)value);
 80a2c04:	b2c9      	uxtb	r1, r1
		str.append((char)value);
 80a2c06:	4620      	mov	r0, r4
 80a2c08:	f7ff ffd2 	bl	80a2bb0 <_ZN16JsonParserString6appendEc>
		str.append((char)value);
 80a2c0c:	4629      	mov	r1, r5
 80a2c0e:	e7e9      	b.n	80a2be4 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0xa>
		value = 0b11100000 | ((unicode >> 12) & 0b1111);
 80a2c10:	0b03      	lsrs	r3, r0, #12
		str.append((char)value);
 80a2c12:	f043 01e0 	orr.w	r1, r3, #224	; 0xe0
 80a2c16:	4620      	mov	r0, r4
 80a2c18:	f7ff ffca 	bl	80a2bb0 <_ZN16JsonParserString6appendEc>
		value = 0b10000000 | ((unicode >> 6) & 0b111111);
 80a2c1c:	f006 013f 	and.w	r1, r6, #63	; 0x3f
		str.append((char)value);
 80a2c20:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80a2c24:	e7ef      	b.n	80a2c06 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x2c>
	...

080a2c28 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, JsonParserString &str) const {
 80a2c28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	bool escape = false;
 80a2c2c:	2400      	movs	r4, #0
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, JsonParserString &str) const {
 80a2c2e:	4680      	mov	r8, r0
 80a2c30:	460f      	mov	r7, r1
 80a2c32:	4615      	mov	r5, r2
			escape = false;
 80a2c34:	46a1      	mov	r9, r4
	for(int ii = token->start; ii < token->end; ii++) {
 80a2c36:	684e      	ldr	r6, [r1, #4]
					if (sscanf(tmp, "%04x", &unicode) == 1) {
 80a2c38:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80a2d00 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xd8>
	for(int ii = token->start; ii < token->end; ii++) {
 80a2c3c:	68b8      	ldr	r0, [r7, #8]
 80a2c3e:	42b0      	cmp	r0, r6
 80a2c40:	dd5a      	ble.n	80a2cf8 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xd0>
		if (escape) {
 80a2c42:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80a2c46:	5d99      	ldrb	r1, [r3, r6]
 80a2c48:	199a      	adds	r2, r3, r6
 80a2c4a:	2c00      	cmp	r4, #0
 80a2c4c:	d04b      	beq.n	80a2ce6 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xbe>
			switch(buffer[ii]) {
 80a2c4e:	2975      	cmp	r1, #117	; 0x75
 80a2c50:	d805      	bhi.n	80a2c5e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
 80a2c52:	296d      	cmp	r1, #109	; 0x6d
 80a2c54:	d807      	bhi.n	80a2c66 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x3e>
 80a2c56:	2962      	cmp	r1, #98	; 0x62
 80a2c58:	d01e      	beq.n	80a2c98 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x70>
 80a2c5a:	2966      	cmp	r1, #102	; 0x66
 80a2c5c:	d01e      	beq.n	80a2c9c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x74>
				str.append(buffer[ii]);
 80a2c5e:	4628      	mov	r0, r5
 80a2c60:	f7ff ffa6 	bl	80a2bb0 <_ZN16JsonParserString6appendEc>
				break;
 80a2c64:	e03d      	b.n	80a2ce2 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
 80a2c66:	f1a1 046e 	sub.w	r4, r1, #110	; 0x6e
 80a2c6a:	2c07      	cmp	r4, #7
 80a2c6c:	d8f7      	bhi.n	80a2c5e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
 80a2c6e:	f20f 0c08 	addw	ip, pc, #8
 80a2c72:	f85c f024 	ldr.w	pc, [ip, r4, lsl #2]
 80a2c76:	bf00      	nop
 80a2c78:	080a2ca1 	.word	0x080a2ca1
 80a2c7c:	080a2c5f 	.word	0x080a2c5f
 80a2c80:	080a2c5f 	.word	0x080a2c5f
 80a2c84:	080a2c5f 	.word	0x080a2c5f
 80a2c88:	080a2ca5 	.word	0x080a2ca5
 80a2c8c:	080a2c5f 	.word	0x080a2c5f
 80a2c90:	080a2ca9 	.word	0x080a2ca9
 80a2c94:	080a2cad 	.word	0x080a2cad
				str.append('\b');
 80a2c98:	2108      	movs	r1, #8
 80a2c9a:	e7e0      	b.n	80a2c5e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\f');
 80a2c9c:	210c      	movs	r1, #12
 80a2c9e:	e7de      	b.n	80a2c5e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\n');
 80a2ca0:	210a      	movs	r1, #10
 80a2ca2:	e7dc      	b.n	80a2c5e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\r');
 80a2ca4:	210d      	movs	r1, #13
 80a2ca6:	e7da      	b.n	80a2c5e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\t');
 80a2ca8:	2109      	movs	r1, #9
 80a2caa:	e7d8      	b.n	80a2c5e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				if ((ii + 4) < token->end) {
 80a2cac:	1d31      	adds	r1, r6, #4
 80a2cae:	4288      	cmp	r0, r1
 80a2cb0:	dd17      	ble.n	80a2ce2 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
 80a2cb2:	a902      	add	r1, sp, #8
 80a2cb4:	4608      	mov	r0, r1
 80a2cb6:	3304      	adds	r3, #4
 80a2cb8:	4433      	add	r3, r6
						tmp[jj] = buffer[ii + jj + 1];
 80a2cba:	f812 4f01 	ldrb.w	r4, [r2, #1]!
					for(size_t jj = 0; jj < 4; jj++) {
 80a2cbe:	429a      	cmp	r2, r3
						tmp[jj] = buffer[ii + jj + 1];
 80a2cc0:	f801 4b01 	strb.w	r4, [r1], #1
					for(size_t jj = 0; jj < 4; jj++) {
 80a2cc4:	d1f9      	bne.n	80a2cba <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x92>
					if (sscanf(tmp, "%04x", &unicode) == 1) {
 80a2cc6:	4651      	mov	r1, sl
 80a2cc8:	aa01      	add	r2, sp, #4
					tmp[4] = 0;
 80a2cca:	f88d 900c 	strb.w	r9, [sp, #12]
					if (sscanf(tmp, "%04x", &unicode) == 1) {
 80a2cce:	f000 fe57 	bl	80a3980 <sscanf>
 80a2cd2:	2801      	cmp	r0, #1
 80a2cd4:	d105      	bne.n	80a2ce2 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
						appendUtf8((uint16_t)unicode, str);
 80a2cd6:	4629      	mov	r1, r5
 80a2cd8:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 80a2cdc:	f7ff ff7d 	bl	80a2bda <_ZN10JsonParser10appendUtf8EtR16JsonParserString>
						ii += 5; // also increments in loop
 80a2ce0:	3605      	adds	r6, #5
			escape = false;
 80a2ce2:	2400      	movs	r4, #0
 80a2ce4:	e004      	b.n	80a2cf0 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xc8>
		if (buffer[ii] == '\\') {
 80a2ce6:	295c      	cmp	r1, #92	; 0x5c
 80a2ce8:	d004      	beq.n	80a2cf4 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xcc>
			str.append(buffer[ii]);
 80a2cea:	4628      	mov	r0, r5
 80a2cec:	f7ff ff60 	bl	80a2bb0 <_ZN16JsonParserString6appendEc>
	for(int ii = token->start; ii < token->end; ii++) {
 80a2cf0:	3601      	adds	r6, #1
 80a2cf2:	e7a3      	b.n	80a2c3c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x14>
			escape = true;
 80a2cf4:	2401      	movs	r4, #1
 80a2cf6:	e7fb      	b.n	80a2cf0 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xc8>
}
 80a2cf8:	2001      	movs	r0, #1
 80a2cfa:	b004      	add	sp, #16
 80a2cfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a2d00:	080a8648 	.word	0x080a8648

080a2d04 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, String &result) const {
 80a2d04:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80a2d06:	460c      	mov	r4, r1
 80a2d08:	4615      	mov	r5, r2
 80a2d0a:	4606      	mov	r6, r0
	result = "";
 80a2d0c:	490b      	ldr	r1, [pc, #44]	; (80a2d3c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String+0x38>)
 80a2d0e:	4610      	mov	r0, r2
 80a2d10:	f001 fa9e 	bl	80a4250 <_ZN6StringaSEPKc>
	result.reserve(token->end - token->start + 1);
 80a2d14:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 80a2d18:	1ac9      	subs	r1, r1, r3
 80a2d1a:	4628      	mov	r0, r5
 80a2d1c:	3101      	adds	r1, #1
 80a2d1e:	f001 fa19 	bl	80a4154 <_ZN6String7reserveEj>
JsonParserString::JsonParserString(String *str) : str(str), buf(0), bufLen(0), length(0){
 80a2d22:	2300      	movs	r3, #0
	return getTokenValue(token, strWrapper);
 80a2d24:	466a      	mov	r2, sp
 80a2d26:	4621      	mov	r1, r4
 80a2d28:	4630      	mov	r0, r6
JsonParserString::JsonParserString(String *str) : str(str), buf(0), bufLen(0), length(0){
 80a2d2a:	e9cd 3301 	strd	r3, r3, [sp, #4]
 80a2d2e:	9500      	str	r5, [sp, #0]
 80a2d30:	9303      	str	r3, [sp, #12]
	return getTokenValue(token, strWrapper);
 80a2d32:	f7ff ff79 	bl	80a2c28 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString>
}
 80a2d36:	b004      	add	sp, #16
 80a2d38:	bd70      	pop	{r4, r5, r6, pc}
 80a2d3a:	bf00      	nop
 80a2d3c:	080a898c 	.word	0x080a898c

080a2d40 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>:
bool JsonParser::getValueTokenByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, const JsonParserGeneratorRK::jsmntok_t *&value) const {
 80a2d40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a2d44:	b089      	sub	sp, #36	; 0x24
 80a2d46:	4605      	mov	r5, r0
 80a2d48:	4688      	mov	r8, r1
	String keyName;
 80a2d4a:	a804      	add	r0, sp, #16
 80a2d4c:	4912      	ldr	r1, [pc, #72]	; (80a2d98 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x58>)
bool JsonParser::getValueTokenByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, const JsonParserGeneratorRK::jsmntok_t *&value) const {
 80a2d4e:	4616      	mov	r6, r2
 80a2d50:	4699      	mov	r9, r3
	for(size_t ii = 0; getKeyValueTokenByIndex(container, key, value, ii); ii++) {
 80a2d52:	2700      	movs	r7, #0
	String keyName;
 80a2d54:	f001 fa2a 	bl	80a41ac <_ZN6StringC1EPKc>
	for(size_t ii = 0; getKeyValueTokenByIndex(container, key, value, ii); ii++) {
 80a2d58:	464b      	mov	r3, r9
 80a2d5a:	4641      	mov	r1, r8
 80a2d5c:	4628      	mov	r0, r5
 80a2d5e:	9700      	str	r7, [sp, #0]
 80a2d60:	aa03      	add	r2, sp, #12
 80a2d62:	f7ff fed2 	bl	80a2b0a <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j>
 80a2d66:	4604      	mov	r4, r0
 80a2d68:	b170      	cbz	r0, 80a2d88 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x48>
		if (getTokenValue(key, keyName) && keyName == name) {
 80a2d6a:	4628      	mov	r0, r5
 80a2d6c:	9903      	ldr	r1, [sp, #12]
 80a2d6e:	aa04      	add	r2, sp, #16
 80a2d70:	f7ff ffc8 	bl	80a2d04 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>
 80a2d74:	4604      	mov	r4, r0
 80a2d76:	b908      	cbnz	r0, 80a2d7c <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x3c>
	for(size_t ii = 0; getKeyValueTokenByIndex(container, key, value, ii); ii++) {
 80a2d78:	3701      	adds	r7, #1
 80a2d7a:	e7ed      	b.n	80a2d58 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x18>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 80a2d7c:	4631      	mov	r1, r6
 80a2d7e:	a804      	add	r0, sp, #16
 80a2d80:	f001 fb1f 	bl	80a43c2 <_ZNK6String6equalsEPKc>
		if (getTokenValue(key, keyName) && keyName == name) {
 80a2d84:	2800      	cmp	r0, #0
 80a2d86:	d0f7      	beq.n	80a2d78 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x38>
	String keyName;
 80a2d88:	a804      	add	r0, sp, #16
 80a2d8a:	f001 f9c5 	bl	80a4118 <_ZN6StringD1Ev>
}
 80a2d8e:	4620      	mov	r0, r4
 80a2d90:	b009      	add	sp, #36	; 0x24
 80a2d92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a2d96:	bf00      	nop
 80a2d98:	080a898c 	.word	0x080a898c

080a2d9c <_ZN10JsonWriter4initEv>:
	init();
}

void JsonWriter::init() {
	// Save start of insertion point for later
	offset = 0;
 80a2d9c:	2300      	movs	r3, #0

	contextIndex = 0;
	context[contextIndex].isFirst = true;
 80a2d9e:	2201      	movs	r2, #1
	offset = 0;
 80a2da0:	60c3      	str	r3, [r0, #12]
	contextIndex = 0;
 80a2da2:	6143      	str	r3, [r0, #20]
	context[contextIndex].isFirst = true;
 80a2da4:	8302      	strh	r2, [r0, #24]
	context[contextIndex].terminator = 0;

	truncated = false;
 80a2da6:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a

}
 80a2daa:	4770      	bx	lr

080a2dac <_ZN10JsonWriterC1EPcj>:
JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
 80a2dac:	2300      	movs	r3, #0
 80a2dae:	60c3      	str	r3, [r0, #12]
 80a2db0:	2301      	movs	r3, #1
 80a2db2:	7403      	strb	r3, [r0, #16]
JsonWriter::JsonWriter(char *buffer, size_t bufferLen) : JsonBuffer(buffer, bufferLen), floatPlaces(-1) {
 80a2db4:	4b05      	ldr	r3, [pc, #20]	; (80a2dcc <_ZN10JsonWriterC1EPcj+0x20>)
 80a2db6:	b510      	push	{r4, lr}
 80a2db8:	6003      	str	r3, [r0, #0]
 80a2dba:	f04f 33ff 	mov.w	r3, #4294967295
JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
 80a2dbe:	e9c0 1201 	strd	r1, r2, [r0, #4]
JsonWriter::JsonWriter(char *buffer, size_t bufferLen) : JsonBuffer(buffer, bufferLen), floatPlaces(-1) {
 80a2dc2:	62c3      	str	r3, [r0, #44]	; 0x2c
	init();
 80a2dc4:	f7ff ffea 	bl	80a2d9c <_ZN10JsonWriter4initEv>
}
 80a2dc8:	bd10      	pop	{r4, pc}
 80a2dca:	bf00      	nop
 80a2dcc:	080a8684 	.word	0x080a8684

080a2dd0 <_ZN10JsonWriter10insertCharEc>:
	}
}


void JsonWriter::insertChar(char ch) {
	if (offset < bufferLen) {
 80a2dd0:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 80a2dd4:	4293      	cmp	r3, r2
		buffer[offset++] = ch;
	}
	else {
		truncated = true;
 80a2dd6:	bf28      	it	cs
 80a2dd8:	2301      	movcs	r3, #1
void JsonWriter::insertChar(char ch) {
 80a2dda:	b510      	push	{r4, lr}
		buffer[offset++] = ch;
 80a2ddc:	bf3f      	itttt	cc
 80a2dde:	6842      	ldrcc	r2, [r0, #4]
 80a2de0:	1c5c      	addcc	r4, r3, #1
 80a2de2:	60c4      	strcc	r4, [r0, #12]
 80a2de4:	54d1      	strbcc	r1, [r2, r3]
		truncated = true;
 80a2de6:	bf28      	it	cs
 80a2de8:	f880 302a 	strbcs.w	r3, [r0, #42]	; 0x2a
	}
}
 80a2dec:	bd10      	pop	{r4, pc}

080a2dee <_ZN10JsonWriter19finishObjectOrArrayEv>:
void JsonWriter::finishObjectOrArray() {
 80a2dee:	b510      	push	{r4, lr}
	if (contextIndex > 0) {
 80a2df0:	6943      	ldr	r3, [r0, #20]
void JsonWriter::finishObjectOrArray() {
 80a2df2:	4604      	mov	r4, r0
	if (contextIndex > 0) {
 80a2df4:	b143      	cbz	r3, 80a2e08 <_ZN10JsonWriter19finishObjectOrArrayEv+0x1a>
		if (context[contextIndex].terminator != 0) {
 80a2df6:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80a2dfa:	7e59      	ldrb	r1, [r3, #25]
 80a2dfc:	b109      	cbz	r1, 80a2e02 <_ZN10JsonWriter19finishObjectOrArrayEv+0x14>
			insertChar(context[contextIndex].terminator);
 80a2dfe:	f7ff ffe7 	bl	80a2dd0 <_ZN10JsonWriter10insertCharEc>
		contextIndex--;
 80a2e02:	6963      	ldr	r3, [r4, #20]
 80a2e04:	3b01      	subs	r3, #1
 80a2e06:	6163      	str	r3, [r4, #20]
	if (offset < bufferLen) {
 80a2e08:	2200      	movs	r2, #0
 80a2e0a:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
 80a2e0e:	6863      	ldr	r3, [r4, #4]
 80a2e10:	4288      	cmp	r0, r1
		buffer[bufferLen - 1] = 0;
 80a2e12:	bf2a      	itet	cs
 80a2e14:	185b      	addcs	r3, r3, r1
		buffer[offset] = 0;
 80a2e16:	541a      	strbcc	r2, [r3, r0]
		buffer[bufferLen - 1] = 0;
 80a2e18:	f803 2c01 	strbcs.w	r2, [r3, #-1]
}
 80a2e1c:	bd10      	pop	{r4, pc}

080a2e1e <_ZN10JsonWriter14insertvsprintfEPKcSt9__va_list>:
	va_start(ap, fmt);
	insertvsprintf(fmt, ap);
	va_end(ap);
}

void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
 80a2e1e:	b570      	push	{r4, r5, r6, lr}
 80a2e20:	4604      	mov	r4, r0
	size_t spaceAvailable = bufferLen - offset;
 80a2e22:	e9d0 5002 	ldrd	r5, r0, [r0, #8]

	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
 80a2e26:	6866      	ldr	r6, [r4, #4]
	size_t spaceAvailable = bufferLen - offset;
 80a2e28:	1a2d      	subs	r5, r5, r0
void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
 80a2e2a:	4613      	mov	r3, r2
	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
 80a2e2c:	4430      	add	r0, r6
 80a2e2e:	460a      	mov	r2, r1
 80a2e30:	4629      	mov	r1, r5
 80a2e32:	f000 fdc5 	bl	80a39c0 <vsnprintf>
	if (count <= spaceAvailable) {
 80a2e36:	4285      	cmp	r5, r0
		offset += count;
	}
	else {
		// Truncated, no more space left
		offset = bufferLen;
 80a2e38:	bf37      	itett	cc
 80a2e3a:	68a3      	ldrcc	r3, [r4, #8]
		offset += count;
 80a2e3c:	68e3      	ldrcs	r3, [r4, #12]
		offset = bufferLen;
 80a2e3e:	60e3      	strcc	r3, [r4, #12]
		truncated = true;
 80a2e40:	2301      	movcc	r3, #1
		offset += count;
 80a2e42:	bf26      	itte	cs
 80a2e44:	18c0      	addcs	r0, r0, r3
 80a2e46:	60e0      	strcs	r0, [r4, #12]
		truncated = true;
 80a2e48:	f884 302a 	strbcc.w	r3, [r4, #42]	; 0x2a
	}
}
 80a2e4c:	bd70      	pop	{r4, r5, r6, pc}

080a2e4e <_ZN10JsonWriter13insertsprintfEPKcz>:
void JsonWriter::insertsprintf(const char *fmt, ...) {
 80a2e4e:	b40e      	push	{r1, r2, r3}
 80a2e50:	b503      	push	{r0, r1, lr}
 80a2e52:	aa03      	add	r2, sp, #12
 80a2e54:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(ap, fmt);
 80a2e58:	9201      	str	r2, [sp, #4]
	insertvsprintf(fmt, ap);
 80a2e5a:	f7ff ffe0 	bl	80a2e1e <_ZN10JsonWriter14insertvsprintfEPKcSt9__va_list>
}
 80a2e5e:	b002      	add	sp, #8
 80a2e60:	f85d eb04 	ldr.w	lr, [sp], #4
 80a2e64:	b003      	add	sp, #12
 80a2e66:	4770      	bx	lr

080a2e68 <_ZN10JsonWriter12insertStringEPKcb>:
void JsonWriter::insertString(const char *s, bool quoted) {
 80a2e68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a2e6c:	4604      	mov	r4, r0
 80a2e6e:	460e      	mov	r6, r1
	if (quoted) {
 80a2e70:	4617      	mov	r7, r2
 80a2e72:	b112      	cbz	r2, 80a2e7a <_ZN10JsonWriter12insertStringEPKcb+0x12>
		insertChar('"');
 80a2e74:	2122      	movs	r1, #34	; 0x22
 80a2e76:	f7ff ffab 	bl	80a2dd0 <_ZN10JsonWriter10insertCharEc>
void JsonWriter::insertString(const char *s, bool quoted) {
 80a2e7a:	2500      	movs	r5, #0
				insertsprintf("\\u%04X", utf16);
 80a2e7c:	f8df 8108 	ldr.w	r8, [pc, #264]	; 80a2f88 <_ZN10JsonWriter12insertStringEPKcb+0x120>
	for(size_t ii = 0; s[ii] && offset < bufferLen; ii++) {
 80a2e80:	5d71      	ldrb	r1, [r6, r5]
 80a2e82:	eb06 0905 	add.w	r9, r6, r5
 80a2e86:	2900      	cmp	r1, #0
 80a2e88:	d074      	beq.n	80a2f74 <_ZN10JsonWriter12insertStringEPKcb+0x10c>
 80a2e8a:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
 80a2e8e:	429a      	cmp	r2, r3
 80a2e90:	d270      	bcs.n	80a2f74 <_ZN10JsonWriter12insertStringEPKcb+0x10c>
		if (s[ii] & 0x80) {
 80a2e92:	060b      	lsls	r3, r1, #24
 80a2e94:	d534      	bpl.n	80a2f00 <_ZN10JsonWriter12insertStringEPKcb+0x98>
			if (((s[ii] & 0b11110000) == 0b11100000) && ((s[ii+1] & 0b11000000) == 0b10000000) && ((s[ii+2] & 0b11000000) == 0b10000000)) {
 80a2e96:	f001 03f0 	and.w	r3, r1, #240	; 0xf0
 80a2e9a:	2be0      	cmp	r3, #224	; 0xe0
 80a2e9c:	f105 0901 	add.w	r9, r5, #1
 80a2ea0:	d11d      	bne.n	80a2ede <_ZN10JsonWriter12insertStringEPKcb+0x76>
 80a2ea2:	f816 2009 	ldrb.w	r2, [r6, r9]
 80a2ea6:	f002 03c0 	and.w	r3, r2, #192	; 0xc0
 80a2eaa:	2b80      	cmp	r3, #128	; 0x80
 80a2eac:	d139      	bne.n	80a2f22 <_ZN10JsonWriter12insertStringEPKcb+0xba>
 80a2eae:	f105 0902 	add.w	r9, r5, #2
 80a2eb2:	f816 3009 	ldrb.w	r3, [r6, r9]
 80a2eb6:	f003 00c0 	and.w	r0, r3, #192	; 0xc0
 80a2eba:	2880      	cmp	r0, #128	; 0x80
 80a2ebc:	d131      	bne.n	80a2f22 <_ZN10JsonWriter12insertStringEPKcb+0xba>
				uint16_t utf16 = ((s[ii] & 0b1111) << 12) | ((s[ii+1] & 0b111111) << 6) | (s[ii+2] & 0b111111);
 80a2ebe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80a2ec2:	0192      	lsls	r2, r2, #6
 80a2ec4:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 80a2ec8:	f402 627c 	and.w	r2, r2, #4032	; 0xfc0
 80a2ecc:	431a      	orrs	r2, r3
				insertsprintf("\\u%04X", utf16);
 80a2ece:	b292      	uxth	r2, r2
				insertsprintf("\\u%04X", utf16);
 80a2ed0:	4641      	mov	r1, r8
 80a2ed2:	4620      	mov	r0, r4
 80a2ed4:	f7ff ffbb 	bl	80a2e4e <_ZN10JsonWriter13insertsprintfEPKcz>
				ii++; // plus one more in loop increment
 80a2ed8:	464d      	mov	r5, r9
	for(size_t ii = 0; s[ii] && offset < bufferLen; ii++) {
 80a2eda:	3501      	adds	r5, #1
 80a2edc:	e7d0      	b.n	80a2e80 <_ZN10JsonWriter12insertStringEPKcb+0x18>
			if (((s[ii] & 0b11100000) == 0b11000000) && ((s[ii+1] & 0b11000000) == 0b10000000)) {
 80a2ede:	f001 03e0 	and.w	r3, r1, #224	; 0xe0
 80a2ee2:	2bc0      	cmp	r3, #192	; 0xc0
 80a2ee4:	d11d      	bne.n	80a2f22 <_ZN10JsonWriter12insertStringEPKcb+0xba>
 80a2ee6:	f816 3009 	ldrb.w	r3, [r6, r9]
 80a2eea:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
 80a2eee:	2a80      	cmp	r2, #128	; 0x80
 80a2ef0:	d117      	bne.n	80a2f22 <_ZN10JsonWriter12insertStringEPKcb+0xba>
				uint16_t utf16 = ((s[ii] & 0b11111) << 6) | (s[ii+1] & 0b111111);
 80a2ef2:	0189      	lsls	r1, r1, #6
 80a2ef4:	f401 62f8 	and.w	r2, r1, #1984	; 0x7c0
 80a2ef8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
				insertsprintf("\\u%04X", utf16);
 80a2efc:	431a      	orrs	r2, r3
 80a2efe:	e7e7      	b.n	80a2ed0 <_ZN10JsonWriter12insertStringEPKcb+0x68>
			switch(s[ii]) {
 80a2f00:	290d      	cmp	r1, #13
 80a2f02:	d80a      	bhi.n	80a2f1a <_ZN10JsonWriter12insertStringEPKcb+0xb2>
 80a2f04:	2907      	cmp	r1, #7
 80a2f06:	d90c      	bls.n	80a2f22 <_ZN10JsonWriter12insertStringEPKcb+0xba>
 80a2f08:	f1a1 0308 	sub.w	r3, r1, #8
 80a2f0c:	2b05      	cmp	r3, #5
 80a2f0e:	d808      	bhi.n	80a2f22 <_ZN10JsonWriter12insertStringEPKcb+0xba>
 80a2f10:	e8df f003 	tbb	[pc, r3]
 80a2f14:	0717230b 	.word	0x0717230b
 80a2f18:	1d11      	.short	0x1d11
 80a2f1a:	2922      	cmp	r1, #34	; 0x22
 80a2f1c:	d023      	beq.n	80a2f66 <_ZN10JsonWriter12insertStringEPKcb+0xfe>
 80a2f1e:	295c      	cmp	r1, #92	; 0x5c
 80a2f20:	d021      	beq.n	80a2f66 <_ZN10JsonWriter12insertStringEPKcb+0xfe>
				insertChar(s[ii]);
 80a2f22:	4620      	mov	r0, r4
 80a2f24:	f7ff ff54 	bl	80a2dd0 <_ZN10JsonWriter10insertCharEc>
				break;
 80a2f28:	e7d7      	b.n	80a2eda <_ZN10JsonWriter12insertStringEPKcb+0x72>
				insertChar('\\');
 80a2f2a:	215c      	movs	r1, #92	; 0x5c
 80a2f2c:	4620      	mov	r0, r4
 80a2f2e:	f7ff ff4f 	bl	80a2dd0 <_ZN10JsonWriter10insertCharEc>
				insertChar('b');
 80a2f32:	2162      	movs	r1, #98	; 0x62
 80a2f34:	e7f5      	b.n	80a2f22 <_ZN10JsonWriter12insertStringEPKcb+0xba>
				insertChar('\\');
 80a2f36:	215c      	movs	r1, #92	; 0x5c
 80a2f38:	4620      	mov	r0, r4
 80a2f3a:	f7ff ff49 	bl	80a2dd0 <_ZN10JsonWriter10insertCharEc>
				insertChar('f');
 80a2f3e:	2166      	movs	r1, #102	; 0x66
 80a2f40:	e7ef      	b.n	80a2f22 <_ZN10JsonWriter12insertStringEPKcb+0xba>
				insertChar('\\');
 80a2f42:	215c      	movs	r1, #92	; 0x5c
 80a2f44:	4620      	mov	r0, r4
 80a2f46:	f7ff ff43 	bl	80a2dd0 <_ZN10JsonWriter10insertCharEc>
				insertChar('n');
 80a2f4a:	216e      	movs	r1, #110	; 0x6e
 80a2f4c:	e7e9      	b.n	80a2f22 <_ZN10JsonWriter12insertStringEPKcb+0xba>
				insertChar('\\');
 80a2f4e:	215c      	movs	r1, #92	; 0x5c
 80a2f50:	4620      	mov	r0, r4
 80a2f52:	f7ff ff3d 	bl	80a2dd0 <_ZN10JsonWriter10insertCharEc>
				insertChar('r');
 80a2f56:	2172      	movs	r1, #114	; 0x72
 80a2f58:	e7e3      	b.n	80a2f22 <_ZN10JsonWriter12insertStringEPKcb+0xba>
				insertChar('\\');
 80a2f5a:	215c      	movs	r1, #92	; 0x5c
 80a2f5c:	4620      	mov	r0, r4
 80a2f5e:	f7ff ff37 	bl	80a2dd0 <_ZN10JsonWriter10insertCharEc>
				insertChar('t');
 80a2f62:	2174      	movs	r1, #116	; 0x74
 80a2f64:	e7dd      	b.n	80a2f22 <_ZN10JsonWriter12insertStringEPKcb+0xba>
				insertChar('\\');
 80a2f66:	215c      	movs	r1, #92	; 0x5c
 80a2f68:	4620      	mov	r0, r4
 80a2f6a:	f7ff ff31 	bl	80a2dd0 <_ZN10JsonWriter10insertCharEc>
				insertChar(s[ii]);
 80a2f6e:	f899 1000 	ldrb.w	r1, [r9]
 80a2f72:	e7d6      	b.n	80a2f22 <_ZN10JsonWriter12insertStringEPKcb+0xba>
	if (quoted) {
 80a2f74:	b12f      	cbz	r7, 80a2f82 <_ZN10JsonWriter12insertStringEPKcb+0x11a>
		insertChar('"');
 80a2f76:	4620      	mov	r0, r4
}
 80a2f78:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		insertChar('"');
 80a2f7c:	2122      	movs	r1, #34	; 0x22
 80a2f7e:	f7ff bf27 	b.w	80a2dd0 <_ZN10JsonWriter10insertCharEc>
}
 80a2f82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a2f86:	bf00      	nop
 80a2f88:	080a864d 	.word	0x080a864d

080a2f8c <_ZN10JsonWriter20insertCheckSeparatorEv>:

void JsonWriter::insertCheckSeparator() {
	if (context[contextIndex].isFirst) {
 80a2f8c:	6942      	ldr	r2, [r0, #20]
 80a2f8e:	eb00 0342 	add.w	r3, r0, r2, lsl #1
 80a2f92:	7e1a      	ldrb	r2, [r3, #24]
 80a2f94:	b112      	cbz	r2, 80a2f9c <_ZN10JsonWriter20insertCheckSeparatorEv+0x10>
		context[contextIndex].isFirst = false;
 80a2f96:	2200      	movs	r2, #0
 80a2f98:	761a      	strb	r2, [r3, #24]
	}
	else {
		insertChar(',');
	}
}
 80a2f9a:	4770      	bx	lr
		insertChar(',');
 80a2f9c:	212c      	movs	r1, #44	; 0x2c
 80a2f9e:	f7ff bf17 	b.w	80a2dd0 <_ZN10JsonWriter10insertCharEc>

080a2fa2 <_ZN10JsonWriter18startObjectOrArrayEcc>:
bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
 80a2fa2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
 80a2fa4:	6943      	ldr	r3, [r0, #20]
bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
 80a2fa6:	460e      	mov	r6, r1
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
 80a2fa8:	3301      	adds	r3, #1
 80a2faa:	2b08      	cmp	r3, #8
bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
 80a2fac:	4617      	mov	r7, r2
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
 80a2fae:	d80e      	bhi.n	80a2fce <_ZN10JsonWriter18startObjectOrArrayEcc+0x2c>
	insertCheckSeparator();
 80a2fb0:	f7ff ffec 	bl	80a2f8c <_ZN10JsonWriter20insertCheckSeparatorEv>
	context[contextIndex].isFirst = true;
 80a2fb4:	2501      	movs	r5, #1
	contextIndex++;
 80a2fb6:	6943      	ldr	r3, [r0, #20]
	insertChar(startChar);
 80a2fb8:	4631      	mov	r1, r6
	contextIndex++;
 80a2fba:	1c5a      	adds	r2, r3, #1
 80a2fbc:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80a2fc0:	6142      	str	r2, [r0, #20]
	context[contextIndex].isFirst = true;
 80a2fc2:	769d      	strb	r5, [r3, #26]
	context[contextIndex].terminator = endChar;
 80a2fc4:	76df      	strb	r7, [r3, #27]
	insertChar(startChar);
 80a2fc6:	f7ff ff03 	bl	80a2dd0 <_ZN10JsonWriter10insertCharEc>
 80a2fca:	4628      	mov	r0, r5
}
 80a2fcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return false;
 80a2fce:	2000      	movs	r0, #0
 80a2fd0:	e7fc      	b.n	80a2fcc <_ZN10JsonWriter18startObjectOrArrayEcc+0x2a>
	...

080a2fd4 <_ZN10JsonWriter11insertValueEf>:
	else {
		insertString("false");
	}
}

void JsonWriter::insertValue(float value) {
 80a2fd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a2fd6:	4604      	mov	r4, r0
	if (floatPlaces >= 0) {
 80a2fd8:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 80a2fda:	4608      	mov	r0, r1
 80a2fdc:	f002 fca4 	bl	80a5928 <__aeabi_f2d>
 80a2fe0:	2d00      	cmp	r5, #0
 80a2fe2:	4602      	mov	r2, r0
 80a2fe4:	460b      	mov	r3, r1
 80a2fe6:	db08      	blt.n	80a2ffa <_ZN10JsonWriter11insertValueEf+0x26>
		insertsprintf("%.*f", floatPlaces, value);
 80a2fe8:	e9cd 2300 	strd	r2, r3, [sp]
 80a2fec:	4620      	mov	r0, r4
 80a2fee:	462a      	mov	r2, r5
 80a2ff0:	4905      	ldr	r1, [pc, #20]	; (80a3008 <_ZN10JsonWriter11insertValueEf+0x34>)
 80a2ff2:	f7ff ff2c 	bl	80a2e4e <_ZN10JsonWriter13insertsprintfEPKcz>
	}
	else {
		insertsprintf("%f", value);
	}
}
 80a2ff6:	b003      	add	sp, #12
 80a2ff8:	bd30      	pop	{r4, r5, pc}
		insertsprintf("%f", value);
 80a2ffa:	4620      	mov	r0, r4
 80a2ffc:	4903      	ldr	r1, [pc, #12]	; (80a300c <_ZN10JsonWriter11insertValueEf+0x38>)
}
 80a2ffe:	b003      	add	sp, #12
 80a3000:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		insertsprintf("%f", value);
 80a3004:	f7ff bf23 	b.w	80a2e4e <_ZN10JsonWriter13insertsprintfEPKcz>
 80a3008:	080a8654 	.word	0x080a8654
 80a300c:	080a8659 	.word	0x080a8659

080a3010 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>:

/**
 * Parse JSON string and fill tokens.
 */
int jsmn_parse(jsmn_parser *parser, const char *js, size_t len,
		jsmntok_t *tokens, unsigned int num_tokens) {
 80a3010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a3014:	f04f 0c01 	mov.w	ip, #1
	tok->start = tok->end = -1;
 80a3018:	f04f 35ff 	mov.w	r5, #4294967295
		jsmntok_t *tokens, unsigned int num_tokens) {
 80a301c:	4604      	mov	r4, r0
	int r;
	int i;
	jsmntok_t *token;
	int count = parser->toknext;
 80a301e:	6840      	ldr	r0, [r0, #4]

	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 80a3020:	f8d4 e000 	ldr.w	lr, [r4]
 80a3024:	4596      	cmp	lr, r2
 80a3026:	f080 81be 	bcs.w	80a33a6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x396>
 80a302a:	f811 800e 	ldrb.w	r8, [r1, lr]
 80a302e:	f1b8 0f00 	cmp.w	r8, #0
 80a3032:	f000 81b8 	beq.w	80a33a6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x396>
		char c;
		jsmntype_t type;

		c = js[parser->pos];
		switch (c) {
 80a3036:	f1b8 0f3a 	cmp.w	r8, #58	; 0x3a
 80a303a:	f000 809b 	beq.w	80a3174 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x164>
 80a303e:	d833      	bhi.n	80a30a8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x98>
 80a3040:	f1b8 0f22 	cmp.w	r8, #34	; 0x22
 80a3044:	f000 80ad 	beq.w	80a31a2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x192>
 80a3048:	d810      	bhi.n	80a306c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x5c>
 80a304a:	f1a8 0809 	sub.w	r8, r8, #9
 80a304e:	fa5f f888 	uxtb.w	r8, r8
 80a3052:	f1b8 0f17 	cmp.w	r8, #23
 80a3056:	d80d      	bhi.n	80a3074 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x64>
 80a3058:	4fc0      	ldr	r7, [pc, #768]	; (80a335c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x34c>)
 80a305a:	fa0c f808 	lsl.w	r8, ip, r8
 80a305e:	ea18 0f07 	tst.w	r8, r7
 80a3062:	d007      	beq.n	80a3074 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x64>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 80a3064:	6827      	ldr	r7, [r4, #0]
 80a3066:	3701      	adds	r7, #1
 80a3068:	6027      	str	r7, [r4, #0]
 80a306a:	e7d9      	b.n	80a3020 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x10>
		switch (c) {
 80a306c:	f1b8 0f2c 	cmp.w	r8, #44	; 0x2c
 80a3070:	f000 8136 	beq.w	80a32e0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2d0>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 80a3074:	f8d4 8000 	ldr.w	r8, [r4]
 80a3078:	4542      	cmp	r2, r8
 80a307a:	d90e      	bls.n	80a309a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x8a>
 80a307c:	f811 7008 	ldrb.w	r7, [r1, r8]
 80a3080:	b15f      	cbz	r7, 80a309a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x8a>
		switch (js[parser->pos]) {
 80a3082:	2f3a      	cmp	r7, #58	; 0x3a
 80a3084:	f200 816e 	bhi.w	80a3364 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x354>
 80a3088:	2f1f      	cmp	r7, #31
 80a308a:	f200 8152 	bhi.w	80a3332 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x322>
 80a308e:	2f0a      	cmp	r7, #10
 80a3090:	f200 8161 	bhi.w	80a3356 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x346>
 80a3094:	2f08      	cmp	r7, #8
 80a3096:	f240 8157 	bls.w	80a3348 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x338>
	if (tokens == NULL) {
 80a309a:	2b00      	cmp	r3, #0
 80a309c:	f040 8167 	bne.w	80a336e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x35e>
		parser->pos--;
 80a30a0:	f108 37ff 	add.w	r7, r8, #4294967295
	parser->pos--;
 80a30a4:	6027      	str	r7, [r4, #0]
 80a30a6:	e0ab      	b.n	80a3200 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1f0>
		switch (c) {
 80a30a8:	f1b8 0f7b 	cmp.w	r8, #123	; 0x7b
 80a30ac:	d03a      	beq.n	80a3124 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x114>
 80a30ae:	d80a      	bhi.n	80a30c6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xb6>
 80a30b0:	f1b8 0f5b 	cmp.w	r8, #91	; 0x5b
 80a30b4:	d036      	beq.n	80a3124 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x114>
 80a30b6:	f1b8 0f5d 	cmp.w	r8, #93	; 0x5d
 80a30ba:	d1db      	bne.n	80a3074 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x64>
				token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
				token->start = parser->pos;
				parser->toksuper = parser->toknext - 1;
				break;
			case '}': case ']':
				if (tokens == NULL)
 80a30bc:	2b00      	cmp	r3, #0
 80a30be:	d0d1      	beq.n	80a3064 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x54>
					break;
				type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
 80a30c0:	f04f 0b02 	mov.w	fp, #2
 80a30c4:	e006      	b.n	80a30d4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xc4>
		switch (c) {
 80a30c6:	f1b8 0f7d 	cmp.w	r8, #125	; 0x7d
 80a30ca:	d1d3      	bne.n	80a3074 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x64>
				if (tokens == NULL)
 80a30cc:	2b00      	cmp	r3, #0
 80a30ce:	d0c9      	beq.n	80a3064 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x54>
				type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
 80a30d0:	f04f 0b01 	mov.w	fp, #1
						break;
					}
					token = &tokens[token->parent];
				}
#else
				for (i = parser->toknext - 1; i >= 0; i--) {
 80a30d4:	6867      	ldr	r7, [r4, #4]
 80a30d6:	f107 38ff 	add.w	r8, r7, #4294967295
 80a30da:	eb03 1907 	add.w	r9, r3, r7, lsl #4
 80a30de:	f1b8 0f00 	cmp.w	r8, #0
 80a30e2:	db4f      	blt.n	80a3184 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x174>
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
 80a30e4:	f859 7c0c 	ldr.w	r7, [r9, #-12]
 80a30e8:	f1a9 0a10 	sub.w	sl, r9, #16
 80a30ec:	3701      	adds	r7, #1
 80a30ee:	d045      	beq.n	80a317c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x16c>
 80a30f0:	f859 7c08 	ldr.w	r7, [r9, #-8]
 80a30f4:	1c7e      	adds	r6, r7, #1
 80a30f6:	d141      	bne.n	80a317c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x16c>
						if (token->type != type) {
 80a30f8:	f89a 9000 	ldrb.w	r9, [sl]
 80a30fc:	45d9      	cmp	r9, fp
 80a30fe:	d145      	bne.n	80a318c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x17c>
							return JSMN_ERROR_INVAL;
						}
						parser->toksuper = -1;
 80a3100:	60a7      	str	r7, [r4, #8]
						token->end = parser->pos + 1;
 80a3102:	f10e 0701 	add.w	r7, lr, #1
 80a3106:	f8ca 7008 	str.w	r7, [sl, #8]
						break;
					}
				}
				/* Error if unmatched closing bracket */
				if (i == -1) return JSMN_ERROR_INVAL;
 80a310a:	eb03 1e08 	add.w	lr, r3, r8, lsl #4
				for (; i >= 0; i--) {
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
 80a310e:	f8de 7004 	ldr.w	r7, [lr, #4]
 80a3112:	3701      	adds	r7, #1
 80a3114:	d03d      	beq.n	80a3192 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x182>
 80a3116:	f8de 7008 	ldr.w	r7, [lr, #8]
 80a311a:	3701      	adds	r7, #1
 80a311c:	d139      	bne.n	80a3192 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x182>
					parser->toksuper = tokens[parser->toksuper].parent;
#else
					for (i = parser->toknext - 1; i >= 0; i--) {
						if (tokens[i].type == JSMN_ARRAY || tokens[i].type == JSMN_OBJECT) {
							if (tokens[i].start != -1 && tokens[i].end == -1) {
								parser->toksuper = i;
 80a311e:	f8c4 8008 	str.w	r8, [r4, #8]
								break;
 80a3122:	e79f      	b.n	80a3064 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x54>
				count++;
 80a3124:	3001      	adds	r0, #1
				if (tokens == NULL) {
 80a3126:	2b00      	cmp	r3, #0
 80a3128:	d09c      	beq.n	80a3064 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x54>
	if (parser->toknext >= num_tokens) {
 80a312a:	6867      	ldr	r7, [r4, #4]
 80a312c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80a312e:	42be      	cmp	r6, r7
 80a3130:	d94e      	bls.n	80a31d0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1c0>
	tok->size = 0;
 80a3132:	2600      	movs	r6, #0
	tok = &tokens[parser->toknext++];
 80a3134:	f107 0e01 	add.w	lr, r7, #1
 80a3138:	f8c4 e004 	str.w	lr, [r4, #4]
 80a313c:	eb03 1e07 	add.w	lr, r3, r7, lsl #4
	tok->start = tok->end = -1;
 80a3140:	e9ce 5501 	strd	r5, r5, [lr, #4]
	tok->size = 0;
 80a3144:	f8ce 600c 	str.w	r6, [lr, #12]
	tok = &tokens[parser->toknext++];
 80a3148:	ea4f 1a07 	mov.w	sl, r7, lsl #4
				if (parser->toksuper != -1) {
 80a314c:	68a7      	ldr	r7, [r4, #8]
 80a314e:	1c7e      	adds	r6, r7, #1
					tokens[parser->toksuper].size++;
 80a3150:	bf1f      	itttt	ne
 80a3152:	eb03 1907 	addne.w	r9, r3, r7, lsl #4
 80a3156:	f8d9 700c 	ldrne.w	r7, [r9, #12]
 80a315a:	3701      	addne	r7, #1
 80a315c:	f8c9 700c 	strne.w	r7, [r9, #12]
				token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
 80a3160:	f1b8 0f7b 	cmp.w	r8, #123	; 0x7b
 80a3164:	bf0c      	ite	eq
 80a3166:	2701      	moveq	r7, #1
 80a3168:	2702      	movne	r7, #2
 80a316a:	f803 700a 	strb.w	r7, [r3, sl]
				token->start = parser->pos;
 80a316e:	6827      	ldr	r7, [r4, #0]
 80a3170:	f8ce 7004 	str.w	r7, [lr, #4]
				parser->toksuper = parser->toknext - 1;
 80a3174:	6867      	ldr	r7, [r4, #4]
 80a3176:	3f01      	subs	r7, #1
 80a3178:	60a7      	str	r7, [r4, #8]
				break;
 80a317a:	e773      	b.n	80a3064 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x54>
				for (i = parser->toknext - 1; i >= 0; i--) {
 80a317c:	46d1      	mov	r9, sl
 80a317e:	f108 38ff 	add.w	r8, r8, #4294967295
 80a3182:	e7ac      	b.n	80a30de <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xce>
				if (i == -1) return JSMN_ERROR_INVAL;
 80a3184:	f1b8 3fff 	cmp.w	r8, #4294967295
 80a3188:	f47f af6c 	bne.w	80a3064 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x54>
							return JSMN_ERROR_INVAL;
 80a318c:	f06f 0001 	mvn.w	r0, #1
 80a3190:	e020      	b.n	80a31d4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1c4>
				for (; i >= 0; i--) {
 80a3192:	f108 38ff 	add.w	r8, r8, #4294967295
 80a3196:	f1b8 3fff 	cmp.w	r8, #4294967295
 80a319a:	f1ae 0e10 	sub.w	lr, lr, #16
 80a319e:	d1b6      	bne.n	80a310e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xfe>
 80a31a0:	e760      	b.n	80a3064 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x54>
	parser->pos++;
 80a31a2:	f10e 0901 	add.w	r9, lr, #1
 80a31a6:	f8c4 9000 	str.w	r9, [r4]
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 80a31aa:	f8d4 8000 	ldr.w	r8, [r4]
 80a31ae:	4542      	cmp	r2, r8
 80a31b0:	f240 8091 	bls.w	80a32d6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2c6>
 80a31b4:	f811 7008 	ldrb.w	r7, [r1, r8]
 80a31b8:	2f00      	cmp	r7, #0
 80a31ba:	f000 808c 	beq.w	80a32d6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2c6>
		if (c == '\"') {
 80a31be:	2f22      	cmp	r7, #34	; 0x22
 80a31c0:	d12e      	bne.n	80a3220 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x210>
			if (tokens == NULL) {
 80a31c2:	b1eb      	cbz	r3, 80a3200 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1f0>
	if (parser->toknext >= num_tokens) {
 80a31c4:	6867      	ldr	r7, [r4, #4]
 80a31c6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80a31c8:	42be      	cmp	r6, r7
 80a31ca:	d805      	bhi.n	80a31d8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1c8>
		parser->pos = start;
 80a31cc:	f8c4 e000 	str.w	lr, [r4]
					return JSMN_ERROR_NOMEM;
 80a31d0:	f04f 30ff 	mov.w	r0, #4294967295
			}
		}
	}

	return count;
}
 80a31d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	tok->size = 0;
 80a31d8:	2600      	movs	r6, #0
	token->type = type;
 80a31da:	f04f 0a03 	mov.w	sl, #3
	tok = &tokens[parser->toknext++];
 80a31de:	f107 0e01 	add.w	lr, r7, #1
 80a31e2:	ea4f 1807 	mov.w	r8, r7, lsl #4
 80a31e6:	eb03 1707 	add.w	r7, r3, r7, lsl #4
 80a31ea:	f8c4 e004 	str.w	lr, [r4, #4]
	tok->start = tok->end = -1;
 80a31ee:	e9c7 5501 	strd	r5, r5, [r7, #4]
	tok->size = 0;
 80a31f2:	60fe      	str	r6, [r7, #12]
			jsmn_fill_token(token, JSMN_STRING, start+1, parser->pos);
 80a31f4:	f8d4 e000 	ldr.w	lr, [r4]
	token->type = type;
 80a31f8:	f803 a008 	strb.w	sl, [r3, r8]
	token->end = end;
 80a31fc:	e9c7 9e01 	strd	r9, lr, [r7, #4]
				if (parser->toksuper != -1 && tokens != NULL)
 80a3200:	68a7      	ldr	r7, [r4, #8]
				count++;
 80a3202:	3001      	adds	r0, #1
				if (parser->toksuper != -1 && tokens != NULL)
 80a3204:	1c7e      	adds	r6, r7, #1
 80a3206:	f43f af2d 	beq.w	80a3064 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x54>
 80a320a:	2b00      	cmp	r3, #0
 80a320c:	f43f af2a 	beq.w	80a3064 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x54>
					tokens[parser->toksuper].size++;
 80a3210:	eb03 1e07 	add.w	lr, r3, r7, lsl #4
 80a3214:	f8de 700c 	ldr.w	r7, [lr, #12]
 80a3218:	3701      	adds	r7, #1
 80a321a:	f8ce 700c 	str.w	r7, [lr, #12]
 80a321e:	e721      	b.n	80a3064 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x54>
		if (c == '\\' && parser->pos + 1 < len) {
 80a3220:	2f5c      	cmp	r7, #92	; 0x5c
 80a3222:	d111      	bne.n	80a3248 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x238>
 80a3224:	f108 0701 	add.w	r7, r8, #1
 80a3228:	42ba      	cmp	r2, r7
 80a322a:	d90d      	bls.n	80a3248 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x238>
			parser->pos++;
 80a322c:	6027      	str	r7, [r4, #0]
			switch (js[parser->pos]) {
 80a322e:	5dcf      	ldrb	r7, [r1, r7]
 80a3230:	2f75      	cmp	r7, #117	; 0x75
 80a3232:	d82b      	bhi.n	80a328c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x27c>
 80a3234:	2f6d      	cmp	r7, #109	; 0x6d
 80a3236:	d80b      	bhi.n	80a3250 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x240>
 80a3238:	2f66      	cmp	r7, #102	; 0x66
 80a323a:	d827      	bhi.n	80a328c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x27c>
 80a323c:	2f5b      	cmp	r7, #91	; 0x5b
 80a323e:	d81d      	bhi.n	80a327c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x26c>
 80a3240:	2f22      	cmp	r7, #34	; 0x22
 80a3242:	d001      	beq.n	80a3248 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x238>
 80a3244:	2f2f      	cmp	r7, #47	; 0x2f
 80a3246:	d121      	bne.n	80a328c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x27c>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 80a3248:	6827      	ldr	r7, [r4, #0]
 80a324a:	3701      	adds	r7, #1
 80a324c:	6027      	str	r7, [r4, #0]
 80a324e:	e7ac      	b.n	80a31aa <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x19a>
 80a3250:	3f6e      	subs	r7, #110	; 0x6e
 80a3252:	2f07      	cmp	r7, #7
 80a3254:	d81a      	bhi.n	80a328c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x27c>
 80a3256:	a601      	add	r6, pc, #4	; (adr r6, 80a325c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x24c>)
 80a3258:	f856 f027 	ldr.w	pc, [r6, r7, lsl #2]
 80a325c:	080a3249 	.word	0x080a3249
 80a3260:	080a328d 	.word	0x080a328d
 80a3264:	080a328d 	.word	0x080a328d
 80a3268:	080a328d 	.word	0x080a328d
 80a326c:	080a3249 	.word	0x080a3249
 80a3270:	080a328d 	.word	0x080a328d
 80a3274:	080a3249 	.word	0x080a3249
 80a3278:	080a3293 	.word	0x080a3293
 80a327c:	f240 4641 	movw	r6, #1089	; 0x441
 80a3280:	3f5c      	subs	r7, #92	; 0x5c
 80a3282:	b2ff      	uxtb	r7, r7
 80a3284:	fa0c f707 	lsl.w	r7, ip, r7
 80a3288:	4237      	tst	r7, r6
 80a328a:	d1dd      	bne.n	80a3248 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x238>
			parser->pos = start;
 80a328c:	f8c4 e000 	str.w	lr, [r4]
				if (r < 0) return r;
 80a3290:	e77c      	b.n	80a318c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x17c>
					parser->pos++;
 80a3292:	f04f 0a04 	mov.w	sl, #4
 80a3296:	f108 0702 	add.w	r7, r8, #2
 80a329a:	6027      	str	r7, [r4, #0]
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
 80a329c:	f8d4 8000 	ldr.w	r8, [r4]
 80a32a0:	4542      	cmp	r2, r8
 80a32a2:	d803      	bhi.n	80a32ac <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x29c>
					parser->pos--;
 80a32a4:	6827      	ldr	r7, [r4, #0]
 80a32a6:	3f01      	subs	r7, #1
 80a32a8:	6027      	str	r7, [r4, #0]
					break;
 80a32aa:	e7cd      	b.n	80a3248 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x238>
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
 80a32ac:	f811 7008 	ldrb.w	r7, [r1, r8]
 80a32b0:	2f00      	cmp	r7, #0
 80a32b2:	d0f7      	beq.n	80a32a4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x294>
						if(!((js[parser->pos] >= 48 && js[parser->pos] <= 57) || /* 0-9 */
 80a32b4:	f1a7 0b30 	sub.w	fp, r7, #48	; 0x30
 80a32b8:	f1bb 0f09 	cmp.w	fp, #9
 80a32bc:	d904      	bls.n	80a32c8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2b8>
 80a32be:	f027 0720 	bic.w	r7, r7, #32
 80a32c2:	3f41      	subs	r7, #65	; 0x41
 80a32c4:	2f05      	cmp	r7, #5
 80a32c6:	d8e1      	bhi.n	80a328c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x27c>
						parser->pos++;
 80a32c8:	f108 0701 	add.w	r7, r8, #1
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
 80a32cc:	f1ba 0a01 	subs.w	sl, sl, #1
						parser->pos++;
 80a32d0:	6027      	str	r7, [r4, #0]
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
 80a32d2:	d1e3      	bne.n	80a329c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x28c>
 80a32d4:	e7e6      	b.n	80a32a4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x294>
	parser->pos = start;
 80a32d6:	f8c4 e000 	str.w	lr, [r4]
				return JSMN_ERROR_PART;
 80a32da:	f06f 0002 	mvn.w	r0, #2
 80a32de:	e779      	b.n	80a31d4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1c4>
				if (tokens != NULL && parser->toksuper != -1 &&
 80a32e0:	2b00      	cmp	r3, #0
 80a32e2:	f43f aebf 	beq.w	80a3064 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x54>
 80a32e6:	68a7      	ldr	r7, [r4, #8]
 80a32e8:	1c7e      	adds	r6, r7, #1
 80a32ea:	f43f aebb 	beq.w	80a3064 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x54>
						tokens[parser->toksuper].type != JSMN_ARRAY &&
 80a32ee:	013f      	lsls	r7, r7, #4
 80a32f0:	5ddf      	ldrb	r7, [r3, r7]
 80a32f2:	3f01      	subs	r7, #1
 80a32f4:	2f01      	cmp	r7, #1
 80a32f6:	f67f aeb5 	bls.w	80a3064 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x54>
					for (i = parser->toknext - 1; i >= 0; i--) {
 80a32fa:	6867      	ldr	r7, [r4, #4]
 80a32fc:	f107 38ff 	add.w	r8, r7, #4294967295
 80a3300:	eb03 1e07 	add.w	lr, r3, r7, lsl #4
 80a3304:	f1b8 0f00 	cmp.w	r8, #0
 80a3308:	f6ff aeac 	blt.w	80a3064 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x54>
						if (tokens[i].type == JSMN_ARRAY || tokens[i].type == JSMN_OBJECT) {
 80a330c:	f81e 7c10 	ldrb.w	r7, [lr, #-16]
 80a3310:	3f01      	subs	r7, #1
 80a3312:	2f01      	cmp	r7, #1
 80a3314:	d808      	bhi.n	80a3328 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x318>
							if (tokens[i].start != -1 && tokens[i].end == -1) {
 80a3316:	f85e 7c0c 	ldr.w	r7, [lr, #-12]
 80a331a:	3701      	adds	r7, #1
 80a331c:	d004      	beq.n	80a3328 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x318>
 80a331e:	f85e 7c08 	ldr.w	r7, [lr, #-8]
 80a3322:	3701      	adds	r7, #1
 80a3324:	f43f aefb 	beq.w	80a311e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x10e>
					for (i = parser->toknext - 1; i >= 0; i--) {
 80a3328:	f108 38ff 	add.w	r8, r8, #4294967295
 80a332c:	f1ae 0e10 	sub.w	lr, lr, #16
 80a3330:	e7e8      	b.n	80a3304 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2f4>
 80a3332:	f1a7 0920 	sub.w	r9, r7, #32
 80a3336:	4e0a      	ldr	r6, [pc, #40]	; (80a3360 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x350>)
 80a3338:	fa5f f989 	uxtb.w	r9, r9
 80a333c:	fa0c f909 	lsl.w	r9, ip, r9
 80a3340:	ea19 0f06 	tst.w	r9, r6
 80a3344:	f47f aea9 	bne.w	80a309a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x8a>
		if (js[parser->pos] < 32 || js[parser->pos] >= 127) {
 80a3348:	3f20      	subs	r7, #32
 80a334a:	2f5e      	cmp	r7, #94	; 0x5e
 80a334c:	d89e      	bhi.n	80a328c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x27c>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 80a334e:	f108 0701 	add.w	r7, r8, #1
 80a3352:	6027      	str	r7, [r4, #0]
 80a3354:	e68e      	b.n	80a3074 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x64>
		switch (js[parser->pos]) {
 80a3356:	2f0d      	cmp	r7, #13
 80a3358:	d1f6      	bne.n	80a3348 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x338>
 80a335a:	e69e      	b.n	80a309a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x8a>
 80a335c:	00800013 	.word	0x00800013
 80a3360:	04001001 	.word	0x04001001
 80a3364:	f007 09df 	and.w	r9, r7, #223	; 0xdf
 80a3368:	f1b9 0f5d 	cmp.w	r9, #93	; 0x5d
 80a336c:	e7f4      	b.n	80a3358 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x348>
	if (parser->toknext >= num_tokens) {
 80a336e:	6867      	ldr	r7, [r4, #4]
 80a3370:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80a3372:	42be      	cmp	r6, r7
 80a3374:	f67f af2a 	bls.w	80a31cc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1bc>
	tok->size = 0;
 80a3378:	2600      	movs	r6, #0
	token->type = type;
 80a337a:	f04f 0a04 	mov.w	sl, #4
	tok = &tokens[parser->toknext++];
 80a337e:	f107 0801 	add.w	r8, r7, #1
 80a3382:	ea4f 1907 	mov.w	r9, r7, lsl #4
 80a3386:	eb03 1707 	add.w	r7, r3, r7, lsl #4
 80a338a:	f8c4 8004 	str.w	r8, [r4, #4]
	tok->start = tok->end = -1;
 80a338e:	e9c7 5501 	strd	r5, r5, [r7, #4]
	tok->size = 0;
 80a3392:	60fe      	str	r6, [r7, #12]
	jsmn_fill_token(token, JSMN_PRIMITIVE, start, parser->pos);
 80a3394:	f8d4 8000 	ldr.w	r8, [r4]
	token->type = type;
 80a3398:	f803 a009 	strb.w	sl, [r3, r9]
	token->end = end;
 80a339c:	e9c7 e801 	strd	lr, r8, [r7, #4]
	parser->pos--;
 80a33a0:	6827      	ldr	r7, [r4, #0]
 80a33a2:	3f01      	subs	r7, #1
 80a33a4:	e67e      	b.n	80a30a4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x94>
	if (tokens != NULL) {
 80a33a6:	2b00      	cmp	r3, #0
 80a33a8:	f43f af14 	beq.w	80a31d4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1c4>
		for (i = parser->toknext - 1; i >= 0; i--) {
 80a33ac:	6862      	ldr	r2, [r4, #4]
 80a33ae:	1e51      	subs	r1, r2, #1
 80a33b0:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 80a33b4:	2900      	cmp	r1, #0
 80a33b6:	f6ff af0d 	blt.w	80a31d4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1c4>
			if (tokens[i].start != -1 && tokens[i].end == -1) {
 80a33ba:	f853 2c0c 	ldr.w	r2, [r3, #-12]
 80a33be:	3201      	adds	r2, #1
 80a33c0:	d003      	beq.n	80a33ca <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x3ba>
 80a33c2:	f853 2c08 	ldr.w	r2, [r3, #-8]
 80a33c6:	3201      	adds	r2, #1
 80a33c8:	d087      	beq.n	80a32da <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ca>
		for (i = parser->toknext - 1; i >= 0; i--) {
 80a33ca:	3901      	subs	r1, #1
 80a33cc:	3b10      	subs	r3, #16
 80a33ce:	e7f1      	b.n	80a33b4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x3a4>

080a33d0 <_ZN10JsonParser5parseEv>:
bool JsonParser::parse() {
 80a33d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (offset == 0) {
 80a33d2:	68c2      	ldr	r2, [r0, #12]
bool JsonParser::parse() {
 80a33d4:	4604      	mov	r4, r0
	if (offset == 0) {
 80a33d6:	b912      	cbnz	r2, 80a33de <_ZN10JsonParser5parseEv+0xe>
		return false;
 80a33d8:	2000      	movs	r0, #0
}
 80a33da:	b003      	add	sp, #12
 80a33dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (tokens) {
 80a33de:	6943      	ldr	r3, [r0, #20]
 80a33e0:	f100 0620 	add.w	r6, r0, #32
 80a33e4:	b1ab      	cbz	r3, 80a3412 <_ZN10JsonParser5parseEv+0x42>
/**
 * Creates a new parser based over a given  buffer with an array of tokens
 * available.
 */
void jsmn_init(jsmn_parser *parser) {
	parser->pos = 0;
 80a33e6:	2100      	movs	r1, #0
	parser->toknext = 0;
 80a33e8:	e9c0 1108 	strd	r1, r1, [r0, #32]
	parser->toksuper = -1;
 80a33ec:	f04f 31ff 	mov.w	r1, #4294967295
 80a33f0:	6281      	str	r1, [r0, #40]	; 0x28
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
 80a33f2:	69c1      	ldr	r1, [r0, #28]
 80a33f4:	9100      	str	r1, [sp, #0]
 80a33f6:	6841      	ldr	r1, [r0, #4]
 80a33f8:	4630      	mov	r0, r6
 80a33fa:	f7ff fe09 	bl	80a3010 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
		if (result == JsonParserGeneratorRK::JSMN_ERROR_NOMEM) {
 80a33fe:	1c43      	adds	r3, r0, #1
 80a3400:	d12c      	bne.n	80a345c <_ZN10JsonParser5parseEv+0x8c>
			if (staticBuffers) {
 80a3402:	7c25      	ldrb	r5, [r4, #16]
 80a3404:	2d00      	cmp	r5, #0
 80a3406:	d1e7      	bne.n	80a33d8 <_ZN10JsonParser5parseEv+0x8>
			free(tokens);
 80a3408:	6960      	ldr	r0, [r4, #20]
 80a340a:	f000 faa1 	bl	80a3950 <free>
			tokens = 0;
 80a340e:	6165      	str	r5, [r4, #20]
			maxTokens = 0;
 80a3410:	61e5      	str	r5, [r4, #28]
	parser->pos = 0;
 80a3412:	2500      	movs	r5, #0
	parser->toksuper = -1;
 80a3414:	f04f 37ff 	mov.w	r7, #4294967295
	int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, 0, 0);
 80a3418:	462b      	mov	r3, r5
 80a341a:	4630      	mov	r0, r6
	parser->toknext = 0;
 80a341c:	e9c4 5508 	strd	r5, r5, [r4, #32]
	int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, 0, 0);
 80a3420:	68e2      	ldr	r2, [r4, #12]
 80a3422:	6861      	ldr	r1, [r4, #4]
	parser->toksuper = -1;
 80a3424:	62a7      	str	r7, [r4, #40]	; 0x28
	int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, 0, 0);
 80a3426:	9500      	str	r5, [sp, #0]
 80a3428:	f7ff fdf2 	bl	80a3010 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
	if (result < 0) {
 80a342c:	2800      	cmp	r0, #0
 80a342e:	dbd3      	blt.n	80a33d8 <_ZN10JsonParser5parseEv+0x8>
	maxTokens = (size_t) result;
 80a3430:	61e0      	str	r0, [r4, #28]
	if (maxTokens > 0) {
 80a3432:	d01b      	beq.n	80a346c <_ZN10JsonParser5parseEv+0x9c>
		tokens = (JsonParserGeneratorRK::jsmntok_t *)malloc(sizeof(JsonParserGeneratorRK::jsmntok_t) * maxTokens);
 80a3434:	0100      	lsls	r0, r0, #4
 80a3436:	f000 fa83 	bl	80a3940 <malloc>
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
 80a343a:	69e2      	ldr	r2, [r4, #28]
		tokens = (JsonParserGeneratorRK::jsmntok_t *)malloc(sizeof(JsonParserGeneratorRK::jsmntok_t) * maxTokens);
 80a343c:	4603      	mov	r3, r0
 80a343e:	6160      	str	r0, [r4, #20]
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
 80a3440:	9200      	str	r2, [sp, #0]
 80a3442:	4630      	mov	r0, r6
	parser->toknext = 0;
 80a3444:	e9c4 5508 	strd	r5, r5, [r4, #32]
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
 80a3448:	68e2      	ldr	r2, [r4, #12]
 80a344a:	6861      	ldr	r1, [r4, #4]
	parser->toksuper = -1;
 80a344c:	62a7      	str	r7, [r4, #40]	; 0x28
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
 80a344e:	f7ff fddf 	bl	80a3010 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
		tokensEnd = &tokens[result];
 80a3452:	6963      	ldr	r3, [r4, #20]
 80a3454:	eb03 1300 	add.w	r3, r3, r0, lsl #4
		tokensEnd = tokens;
 80a3458:	61a3      	str	r3, [r4, #24]
 80a345a:	e005      	b.n	80a3468 <_ZN10JsonParser5parseEv+0x98>
		if (result < 0) {
 80a345c:	2800      	cmp	r0, #0
 80a345e:	dbbb      	blt.n	80a33d8 <_ZN10JsonParser5parseEv+0x8>
			tokensEnd = &tokens[result];
 80a3460:	6963      	ldr	r3, [r4, #20]
 80a3462:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 80a3466:	61a0      	str	r0, [r4, #24]
	return true;
 80a3468:	2001      	movs	r0, #1
 80a346a:	e7b6      	b.n	80a33da <_ZN10JsonParser5parseEv+0xa>
		tokensEnd = tokens;
 80a346c:	6963      	ldr	r3, [r4, #20]
 80a346e:	e7f3      	b.n	80a3458 <_ZN10JsonParser5parseEv+0x88>

080a3470 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a3470:	b508      	push	{r3, lr}
 80a3472:	4b02      	ldr	r3, [pc, #8]	; (80a347c <HAL_Pin_Mode+0xc>)
 80a3474:	681b      	ldr	r3, [r3, #0]
 80a3476:	689b      	ldr	r3, [r3, #8]
 80a3478:	9301      	str	r3, [sp, #4]
 80a347a:	bd08      	pop	{r3, pc}
 80a347c:	080601b0 	.word	0x080601b0

080a3480 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a3480:	b508      	push	{r3, lr}
 80a3482:	4b02      	ldr	r3, [pc, #8]	; (80a348c <HAL_Get_Pin_Mode+0xc>)
 80a3484:	681b      	ldr	r3, [r3, #0]
 80a3486:	68db      	ldr	r3, [r3, #12]
 80a3488:	9301      	str	r3, [sp, #4]
 80a348a:	bd08      	pop	{r3, pc}
 80a348c:	080601b0 	.word	0x080601b0

080a3490 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a3490:	b508      	push	{r3, lr}
 80a3492:	4b02      	ldr	r3, [pc, #8]	; (80a349c <HAL_GPIO_Write+0xc>)
 80a3494:	681b      	ldr	r3, [r3, #0]
 80a3496:	691b      	ldr	r3, [r3, #16]
 80a3498:	9301      	str	r3, [sp, #4]
 80a349a:	bd08      	pop	{r3, pc}
 80a349c:	080601b0 	.word	0x080601b0

080a34a0 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 80a34a0:	b508      	push	{r3, lr}
 80a34a2:	4b02      	ldr	r3, [pc, #8]	; (80a34ac <HAL_GPIO_Read+0xc>)
 80a34a4:	681b      	ldr	r3, [r3, #0]
 80a34a6:	695b      	ldr	r3, [r3, #20]
 80a34a8:	9301      	str	r3, [sp, #4]
 80a34aa:	bd08      	pop	{r3, pc}
 80a34ac:	080601b0 	.word	0x080601b0

080a34b0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a34b0:	b508      	push	{r3, lr}
 80a34b2:	4b02      	ldr	r3, [pc, #8]	; (80a34bc <HAL_RNG_GetRandomNumber+0xc>)
 80a34b4:	681b      	ldr	r3, [r3, #0]
 80a34b6:	685b      	ldr	r3, [r3, #4]
 80a34b8:	9301      	str	r3, [sp, #4]
 80a34ba:	bd08      	pop	{r3, pc}
 80a34bc:	0806019c 	.word	0x0806019c

080a34c0 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a34c0:	b508      	push	{r3, lr}
 80a34c2:	4b02      	ldr	r3, [pc, #8]	; (80a34cc <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a34c4:	681b      	ldr	r3, [r3, #0]
 80a34c6:	695b      	ldr	r3, [r3, #20]
 80a34c8:	9301      	str	r3, [sp, #4]
 80a34ca:	bd08      	pop	{r3, pc}
 80a34cc:	0806019c 	.word	0x0806019c

080a34d0 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
 80a34d0:	b508      	push	{r3, lr}
 80a34d2:	4b02      	ldr	r3, [pc, #8]	; (80a34dc <hal_rtc_time_is_valid+0xc>)
 80a34d4:	681b      	ldr	r3, [r3, #0]
 80a34d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a34d8:	9301      	str	r3, [sp, #4]
 80a34da:	bd08      	pop	{r3, pc}
 80a34dc:	0806019c 	.word	0x0806019c

080a34e0 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
 80a34e0:	b508      	push	{r3, lr}
 80a34e2:	4b02      	ldr	r3, [pc, #8]	; (80a34ec <hal_rtc_get_time+0xc>)
 80a34e4:	681b      	ldr	r3, [r3, #0]
 80a34e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a34e8:	9301      	str	r3, [sp, #4]
 80a34ea:	bd08      	pop	{r3, pc}
 80a34ec:	0806019c 	.word	0x0806019c

080a34f0 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80a34f0:	b508      	push	{r3, lr}
 80a34f2:	4b02      	ldr	r3, [pc, #8]	; (80a34fc <os_mutex_recursive_create+0xc>)
 80a34f4:	681b      	ldr	r3, [r3, #0]
 80a34f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a34f8:	9301      	str	r3, [sp, #4]
 80a34fa:	bd08      	pop	{r3, pc}
 80a34fc:	080601d0 	.word	0x080601d0

080a3500 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80a3500:	b508      	push	{r3, lr}
 80a3502:	4b02      	ldr	r3, [pc, #8]	; (80a350c <os_mutex_recursive_destroy+0xc>)
 80a3504:	681b      	ldr	r3, [r3, #0]
 80a3506:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a3508:	9301      	str	r3, [sp, #4]
 80a350a:	bd08      	pop	{r3, pc}
 80a350c:	080601d0 	.word	0x080601d0

080a3510 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
 80a3510:	b508      	push	{r3, lr}
 80a3512:	4b02      	ldr	r3, [pc, #8]	; (80a351c <os_mutex_recursive_lock+0xc>)
 80a3514:	681b      	ldr	r3, [r3, #0]
 80a3516:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a3518:	9301      	str	r3, [sp, #4]
 80a351a:	bd08      	pop	{r3, pc}
 80a351c:	080601d0 	.word	0x080601d0

080a3520 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
 80a3520:	b508      	push	{r3, lr}
 80a3522:	4b02      	ldr	r3, [pc, #8]	; (80a352c <os_mutex_recursive_unlock+0xc>)
 80a3524:	681b      	ldr	r3, [r3, #0]
 80a3526:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a3528:	9301      	str	r3, [sp, #4]
 80a352a:	bd08      	pop	{r3, pc}
 80a352c:	080601d0 	.word	0x080601d0

080a3530 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
 80a3530:	b508      	push	{r3, lr}
 80a3532:	4b02      	ldr	r3, [pc, #8]	; (80a353c <hal_usart_init+0xc>)
 80a3534:	681b      	ldr	r3, [r3, #0]
 80a3536:	699b      	ldr	r3, [r3, #24]
 80a3538:	9301      	str	r3, [sp, #4]
 80a353a:	bd08      	pop	{r3, pc}
 80a353c:	080601c4 	.word	0x080601c4

080a3540 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 80a3540:	b508      	push	{r3, lr}
 80a3542:	4b02      	ldr	r3, [pc, #8]	; (80a354c <hal_usart_write+0xc>)
 80a3544:	681b      	ldr	r3, [r3, #0]
 80a3546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a3548:	9301      	str	r3, [sp, #4]
 80a354a:	bd08      	pop	{r3, pc}
 80a354c:	080601c4 	.word	0x080601c4

080a3550 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 80a3550:	b508      	push	{r3, lr}
 80a3552:	4b02      	ldr	r3, [pc, #8]	; (80a355c <hal_usart_available+0xc>)
 80a3554:	681b      	ldr	r3, [r3, #0]
 80a3556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a3558:	9301      	str	r3, [sp, #4]
 80a355a:	bd08      	pop	{r3, pc}
 80a355c:	080601c4 	.word	0x080601c4

080a3560 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 80a3560:	b508      	push	{r3, lr}
 80a3562:	4b02      	ldr	r3, [pc, #8]	; (80a356c <hal_usart_read+0xc>)
 80a3564:	681b      	ldr	r3, [r3, #0]
 80a3566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a3568:	9301      	str	r3, [sp, #4]
 80a356a:	bd08      	pop	{r3, pc}
 80a356c:	080601c4 	.word	0x080601c4

080a3570 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 80a3570:	b508      	push	{r3, lr}
 80a3572:	4b02      	ldr	r3, [pc, #8]	; (80a357c <hal_usart_peek+0xc>)
 80a3574:	681b      	ldr	r3, [r3, #0]
 80a3576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a3578:	9301      	str	r3, [sp, #4]
 80a357a:	bd08      	pop	{r3, pc}
 80a357c:	080601c4 	.word	0x080601c4

080a3580 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 80a3580:	b508      	push	{r3, lr}
 80a3582:	4b02      	ldr	r3, [pc, #8]	; (80a358c <hal_usart_flush+0xc>)
 80a3584:	681b      	ldr	r3, [r3, #0]
 80a3586:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a3588:	9301      	str	r3, [sp, #4]
 80a358a:	bd08      	pop	{r3, pc}
 80a358c:	080601c4 	.word	0x080601c4

080a3590 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 80a3590:	b508      	push	{r3, lr}
 80a3592:	4b02      	ldr	r3, [pc, #8]	; (80a359c <hal_usart_is_enabled+0xc>)
 80a3594:	681b      	ldr	r3, [r3, #0]
 80a3596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a3598:	9301      	str	r3, [sp, #4]
 80a359a:	bd08      	pop	{r3, pc}
 80a359c:	080601c4 	.word	0x080601c4

080a35a0 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 80a35a0:	b508      	push	{r3, lr}
 80a35a2:	4b02      	ldr	r3, [pc, #8]	; (80a35ac <hal_usart_available_data_for_write+0xc>)
 80a35a4:	681b      	ldr	r3, [r3, #0]
 80a35a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a35a8:	9301      	str	r3, [sp, #4]
 80a35aa:	bd08      	pop	{r3, pc}
 80a35ac:	080601c4 	.word	0x080601c4

080a35b0 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
 80a35b0:	b508      	push	{r3, lr}
 80a35b2:	4b02      	ldr	r3, [pc, #8]	; (80a35bc <hal_usart_begin_config+0xc>)
 80a35b4:	681b      	ldr	r3, [r3, #0]
 80a35b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a35b8:	9301      	str	r3, [sp, #4]
 80a35ba:	bd08      	pop	{r3, pc}
 80a35bc:	080601c4 	.word	0x080601c4

080a35c0 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 80a35c0:	b508      	push	{r3, lr}
 80a35c2:	4b02      	ldr	r3, [pc, #8]	; (80a35cc <hal_i2c_write+0xc>)
 80a35c4:	681b      	ldr	r3, [r3, #0]
 80a35c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a35c8:	9301      	str	r3, [sp, #4]
 80a35ca:	bd08      	pop	{r3, pc}
 80a35cc:	080601ac 	.word	0x080601ac

080a35d0 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 80a35d0:	b508      	push	{r3, lr}
 80a35d2:	4b02      	ldr	r3, [pc, #8]	; (80a35dc <hal_i2c_available+0xc>)
 80a35d4:	681b      	ldr	r3, [r3, #0]
 80a35d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a35d8:	9301      	str	r3, [sp, #4]
 80a35da:	bd08      	pop	{r3, pc}
 80a35dc:	080601ac 	.word	0x080601ac

080a35e0 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 80a35e0:	b508      	push	{r3, lr}
 80a35e2:	4b02      	ldr	r3, [pc, #8]	; (80a35ec <hal_i2c_read+0xc>)
 80a35e4:	681b      	ldr	r3, [r3, #0]
 80a35e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a35e8:	9301      	str	r3, [sp, #4]
 80a35ea:	bd08      	pop	{r3, pc}
 80a35ec:	080601ac 	.word	0x080601ac

080a35f0 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 80a35f0:	b508      	push	{r3, lr}
 80a35f2:	4b02      	ldr	r3, [pc, #8]	; (80a35fc <hal_i2c_peek+0xc>)
 80a35f4:	681b      	ldr	r3, [r3, #0]
 80a35f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a35f8:	9301      	str	r3, [sp, #4]
 80a35fa:	bd08      	pop	{r3, pc}
 80a35fc:	080601ac 	.word	0x080601ac

080a3600 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 80a3600:	b508      	push	{r3, lr}
 80a3602:	4b02      	ldr	r3, [pc, #8]	; (80a360c <hal_i2c_flush+0xc>)
 80a3604:	681b      	ldr	r3, [r3, #0]
 80a3606:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a3608:	9301      	str	r3, [sp, #4]
 80a360a:	bd08      	pop	{r3, pc}
 80a360c:	080601ac 	.word	0x080601ac

080a3610 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 80a3610:	b508      	push	{r3, lr}
 80a3612:	4b02      	ldr	r3, [pc, #8]	; (80a361c <hal_i2c_is_enabled+0xc>)
 80a3614:	681b      	ldr	r3, [r3, #0]
 80a3616:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a3618:	9301      	str	r3, [sp, #4]
 80a361a:	bd08      	pop	{r3, pc}
 80a361c:	080601ac 	.word	0x080601ac

080a3620 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 80a3620:	b508      	push	{r3, lr}
 80a3622:	4b03      	ldr	r3, [pc, #12]	; (80a3630 <hal_i2c_init+0x10>)
 80a3624:	681b      	ldr	r3, [r3, #0]
 80a3626:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a362a:	9301      	str	r3, [sp, #4]
 80a362c:	bd08      	pop	{r3, pc}
 80a362e:	0000      	.short	0x0000
 80a3630:	080601ac 	.word	0x080601ac

080a3634 <socket_active_status>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, socket_active_status, uint8_t(sock_handle_t))
 80a3634:	b508      	push	{r3, lr}
 80a3636:	4b02      	ldr	r3, [pc, #8]	; (80a3640 <socket_active_status+0xc>)
 80a3638:	681b      	ldr	r3, [r3, #0]
 80a363a:	681b      	ldr	r3, [r3, #0]
 80a363c:	9301      	str	r3, [sp, #4]
 80a363e:	bd08      	pop	{r3, pc}
 80a3640:	080601bc 	.word	0x080601bc

080a3644 <socket_handle_valid>:
DYNALIB_FN(1, hal_socket, socket_handle_valid, uint8_t(sock_handle_t))
 80a3644:	b508      	push	{r3, lr}
 80a3646:	4b02      	ldr	r3, [pc, #8]	; (80a3650 <socket_handle_valid+0xc>)
 80a3648:	681b      	ldr	r3, [r3, #0]
 80a364a:	685b      	ldr	r3, [r3, #4]
 80a364c:	9301      	str	r3, [sp, #4]
 80a364e:	bd08      	pop	{r3, pc}
 80a3650:	080601bc 	.word	0x080601bc

080a3654 <socket_create>:
DYNALIB_FN(2, hal_socket, socket_create, sock_handle_t(uint8_t, uint8_t, uint8_t, uint16_t, network_interface_t))
 80a3654:	b508      	push	{r3, lr}
 80a3656:	4b02      	ldr	r3, [pc, #8]	; (80a3660 <socket_create+0xc>)
 80a3658:	681b      	ldr	r3, [r3, #0]
 80a365a:	689b      	ldr	r3, [r3, #8]
 80a365c:	9301      	str	r3, [sp, #4]
 80a365e:	bd08      	pop	{r3, pc}
 80a3660:	080601bc 	.word	0x080601bc

080a3664 <socket_connect>:
DYNALIB_FN(3, hal_socket, socket_connect, int32_t(sock_handle_t, const sockaddr_t*, long))
 80a3664:	b508      	push	{r3, lr}
 80a3666:	4b02      	ldr	r3, [pc, #8]	; (80a3670 <socket_connect+0xc>)
 80a3668:	681b      	ldr	r3, [r3, #0]
 80a366a:	68db      	ldr	r3, [r3, #12]
 80a366c:	9301      	str	r3, [sp, #4]
 80a366e:	bd08      	pop	{r3, pc}
 80a3670:	080601bc 	.word	0x080601bc

080a3674 <socket_receive>:
DYNALIB_FN(4, hal_socket, socket_receive, sock_result_t(sock_handle_t, void*, socklen_t, system_tick_t))
 80a3674:	b508      	push	{r3, lr}
 80a3676:	4b02      	ldr	r3, [pc, #8]	; (80a3680 <socket_receive+0xc>)
 80a3678:	681b      	ldr	r3, [r3, #0]
 80a367a:	691b      	ldr	r3, [r3, #16]
 80a367c:	9301      	str	r3, [sp, #4]
 80a367e:	bd08      	pop	{r3, pc}
 80a3680:	080601bc 	.word	0x080601bc

080a3684 <socket_close>:
DYNALIB_FN(5, hal_socket, socket_receivefrom, sock_result_t(sock_handle_t, void*, socklen_t, uint32_t, sockaddr_t*, socklen_t*))
DYNALIB_FN(6, hal_socket, socket_send, sock_result_t(sock_handle_t, const void*, socklen_t))
DYNALIB_FN(7, hal_socket, socket_sendto, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, sockaddr_t*, socklen_t))
DYNALIB_FN(8, hal_socket, socket_close, sock_result_t(sock_handle_t))
 80a3684:	b508      	push	{r3, lr}
 80a3686:	4b02      	ldr	r3, [pc, #8]	; (80a3690 <socket_close+0xc>)
 80a3688:	681b      	ldr	r3, [r3, #0]
 80a368a:	6a1b      	ldr	r3, [r3, #32]
 80a368c:	9301      	str	r3, [sp, #4]
 80a368e:	bd08      	pop	{r3, pc}
 80a3690:	080601bc 	.word	0x080601bc

080a3694 <socket_handle_invalid>:
DYNALIB_FN(9, hal_socket, socket_reset_blocking_call, sock_result_t(void))
DYNALIB_FN(10, hal_socket, socket_create_tcp_server, sock_result_t(uint16_t, network_interface_t))
DYNALIB_FN(11, hal_socket, socket_accept, sock_result_t(sock_handle_t))
DYNALIB_FN(12, hal_socket, socket_handle_invalid, sock_handle_t(void))
 80a3694:	b508      	push	{r3, lr}
 80a3696:	4b02      	ldr	r3, [pc, #8]	; (80a36a0 <socket_handle_invalid+0xc>)
 80a3698:	681b      	ldr	r3, [r3, #0]
 80a369a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a369c:	9301      	str	r3, [sp, #4]
 80a369e:	bd08      	pop	{r3, pc}
 80a36a0:	080601bc 	.word	0x080601bc

080a36a4 <socket_send_ex>:
DYNALIB_FN(13, hal_socket, socket_join_multicast, sock_result_t(const HAL_IPAddress*, network_interface_t, socket_multicast_info_t*))
DYNALIB_FN(14, hal_socket, socket_leave_multicast, sock_result_t(const HAL_IPAddress*, network_interface_t, socket_multicast_info_t*))
DYNALIB_FN(15, hal_socket, socket_peer, sock_result_t(sock_handle_t, sock_peer_t*, void*))
DYNALIB_FN(16, hal_socket, socket_shutdown, sock_result_t(sock_handle_t, int))
DYNALIB_FN(17, hal_socket, socket_send_ex, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, system_tick_t, void*))
 80a36a4:	b508      	push	{r3, lr}
 80a36a6:	4b02      	ldr	r3, [pc, #8]	; (80a36b0 <socket_send_ex+0xc>)
 80a36a8:	681b      	ldr	r3, [r3, #0]
 80a36aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a36ac:	9301      	str	r3, [sp, #4]
 80a36ae:	bd08      	pop	{r3, pc}
 80a36b0:	080601bc 	.word	0x080601bc

080a36b4 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
 80a36b4:	b508      	push	{r3, lr}
 80a36b6:	4b02      	ldr	r3, [pc, #8]	; (80a36c0 <hal_spi_begin+0xc>)
 80a36b8:	681b      	ldr	r3, [r3, #0]
 80a36ba:	681b      	ldr	r3, [r3, #0]
 80a36bc:	9301      	str	r3, [sp, #4]
 80a36be:	bd08      	pop	{r3, pc}
 80a36c0:	080601b4 	.word	0x080601b4

080a36c4 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
 80a36c4:	b508      	push	{r3, lr}
 80a36c6:	4b02      	ldr	r3, [pc, #8]	; (80a36d0 <hal_spi_transfer+0xc>)
 80a36c8:	681b      	ldr	r3, [r3, #0]
 80a36ca:	695b      	ldr	r3, [r3, #20]
 80a36cc:	9301      	str	r3, [sp, #4]
 80a36ce:	bd08      	pop	{r3, pc}
 80a36d0:	080601b4 	.word	0x080601b4

080a36d4 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 80a36d4:	b508      	push	{r3, lr}
 80a36d6:	4b02      	ldr	r3, [pc, #8]	; (80a36e0 <hal_spi_init+0xc>)
 80a36d8:	681b      	ldr	r3, [r3, #0]
 80a36da:	69db      	ldr	r3, [r3, #28]
 80a36dc:	9301      	str	r3, [sp, #4]
 80a36de:	bd08      	pop	{r3, pc}
 80a36e0:	080601b4 	.word	0x080601b4

080a36e4 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 80a36e4:	b508      	push	{r3, lr}
 80a36e6:	4b02      	ldr	r3, [pc, #8]	; (80a36f0 <hal_spi_is_enabled+0xc>)
 80a36e8:	681b      	ldr	r3, [r3, #0]
 80a36ea:	6a1b      	ldr	r3, [r3, #32]
 80a36ec:	9301      	str	r3, [sp, #4]
 80a36ee:	bd08      	pop	{r3, pc}
 80a36f0:	080601b4 	.word	0x080601b4

080a36f4 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a36f4:	b508      	push	{r3, lr}
 80a36f6:	4b02      	ldr	r3, [pc, #8]	; (80a3700 <HAL_USB_USART_Init+0xc>)
 80a36f8:	681b      	ldr	r3, [r3, #0]
 80a36fa:	681b      	ldr	r3, [r3, #0]
 80a36fc:	9301      	str	r3, [sp, #4]
 80a36fe:	bd08      	pop	{r3, pc}
 80a3700:	080601d8 	.word	0x080601d8

080a3704 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a3704:	b508      	push	{r3, lr}
 80a3706:	4b02      	ldr	r3, [pc, #8]	; (80a3710 <HAL_USB_USART_Begin+0xc>)
 80a3708:	681b      	ldr	r3, [r3, #0]
 80a370a:	685b      	ldr	r3, [r3, #4]
 80a370c:	9301      	str	r3, [sp, #4]
 80a370e:	bd08      	pop	{r3, pc}
 80a3710:	080601d8 	.word	0x080601d8

080a3714 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a3714:	b508      	push	{r3, lr}
 80a3716:	4b02      	ldr	r3, [pc, #8]	; (80a3720 <HAL_USB_USART_Available_Data+0xc>)
 80a3718:	681b      	ldr	r3, [r3, #0]
 80a371a:	691b      	ldr	r3, [r3, #16]
 80a371c:	9301      	str	r3, [sp, #4]
 80a371e:	bd08      	pop	{r3, pc}
 80a3720:	080601d8 	.word	0x080601d8

080a3724 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a3724:	b508      	push	{r3, lr}
 80a3726:	4b02      	ldr	r3, [pc, #8]	; (80a3730 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a3728:	681b      	ldr	r3, [r3, #0]
 80a372a:	695b      	ldr	r3, [r3, #20]
 80a372c:	9301      	str	r3, [sp, #4]
 80a372e:	bd08      	pop	{r3, pc}
 80a3730:	080601d8 	.word	0x080601d8

080a3734 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a3734:	b508      	push	{r3, lr}
 80a3736:	4b02      	ldr	r3, [pc, #8]	; (80a3740 <HAL_USB_USART_Receive_Data+0xc>)
 80a3738:	681b      	ldr	r3, [r3, #0]
 80a373a:	699b      	ldr	r3, [r3, #24]
 80a373c:	9301      	str	r3, [sp, #4]
 80a373e:	bd08      	pop	{r3, pc}
 80a3740:	080601d8 	.word	0x080601d8

080a3744 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a3744:	b508      	push	{r3, lr}
 80a3746:	4b02      	ldr	r3, [pc, #8]	; (80a3750 <HAL_USB_USART_Send_Data+0xc>)
 80a3748:	681b      	ldr	r3, [r3, #0]
 80a374a:	69db      	ldr	r3, [r3, #28]
 80a374c:	9301      	str	r3, [sp, #4]
 80a374e:	bd08      	pop	{r3, pc}
 80a3750:	080601d8 	.word	0x080601d8

080a3754 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a3754:	b508      	push	{r3, lr}
 80a3756:	4b02      	ldr	r3, [pc, #8]	; (80a3760 <HAL_USB_USART_Flush_Data+0xc>)
 80a3758:	681b      	ldr	r3, [r3, #0]
 80a375a:	6a1b      	ldr	r3, [r3, #32]
 80a375c:	9301      	str	r3, [sp, #4]
 80a375e:	bd08      	pop	{r3, pc}
 80a3760:	080601d8 	.word	0x080601d8

080a3764 <HAL_NET_SetNetWatchDog>:

DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
 80a3764:	b508      	push	{r3, lr}
 80a3766:	4b02      	ldr	r3, [pc, #8]	; (80a3770 <HAL_NET_SetNetWatchDog+0xc>)
 80a3768:	681b      	ldr	r3, [r3, #0]
 80a376a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a376c:	9301      	str	r3, [sp, #4]
 80a376e:	bd08      	pop	{r3, pc}
 80a3770:	080601c0 	.word	0x080601c0

080a3774 <inet_gethostbyname>:
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a3774:	b508      	push	{r3, lr}
 80a3776:	4b02      	ldr	r3, [pc, #8]	; (80a3780 <inet_gethostbyname+0xc>)
 80a3778:	681b      	ldr	r3, [r3, #0]
 80a377a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a377c:	9301      	str	r3, [sp, #4]
 80a377e:	bd08      	pop	{r3, pc}
 80a3780:	080601c0 	.word	0x080601c0

080a3784 <wlan_select_antenna>:
DYNALIB_FN(19, hal_wlan, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(20, hal_wlan, wlan_select_antenna, int(WLanSelectAntenna_TypeDef))
 80a3784:	b508      	push	{r3, lr}
 80a3786:	4b02      	ldr	r3, [pc, #8]	; (80a3790 <wlan_select_antenna+0xc>)
 80a3788:	681b      	ldr	r3, [r3, #0]
 80a378a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80a378c:	9301      	str	r3, [sp, #4]
 80a378e:	bd08      	pop	{r3, pc}
 80a3790:	080601c0 	.word	0x080601c0

080a3794 <wlan_connected_info>:
DYNALIB_FN(24, hal_wlan, wlan_get_credentials, int(wlan_scan_result_t, void*))
DYNALIB_FN(25, hal_wlan, softap_set_application_page_handler, int(PageProvider* provider, void* reserved))
DYNALIB_FN(26, hal_wlan, wlan_restart, int(void*))
DYNALIB_FN(27, hal_wlan, wlan_set_hostname, int(const char*, void*))
DYNALIB_FN(28, hal_wlan, wlan_get_hostname, int(char*, size_t, void*))
DYNALIB_FN(29, hal_wlan, wlan_connected_info, int(void*, wlan_connected_info_t*, void*))
 80a3794:	b508      	push	{r3, lr}
 80a3796:	4b02      	ldr	r3, [pc, #8]	; (80a37a0 <wlan_connected_info+0xc>)
 80a3798:	681b      	ldr	r3, [r3, #0]
 80a379a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a379c:	9301      	str	r3, [sp, #4]
 80a379e:	bd08      	pop	{r3, pc}
 80a37a0:	080601c0 	.word	0x080601c0

080a37a4 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
 80a37a4:	b508      	push	{r3, lr}
 80a37a6:	4b02      	ldr	r3, [pc, #8]	; (80a37b0 <log_message+0xc>)
 80a37a8:	681b      	ldr	r3, [r3, #0]
 80a37aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80a37ac:	9301      	str	r3, [sp, #4]
 80a37ae:	bd08      	pop	{r3, pc}
 80a37b0:	080201a8 	.word	0x080201a8

080a37b4 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 80a37b4:	b508      	push	{r3, lr}
 80a37b6:	4b02      	ldr	r3, [pc, #8]	; (80a37c0 <system_mode+0xc>)
 80a37b8:	681b      	ldr	r3, [r3, #0]
 80a37ba:	681b      	ldr	r3, [r3, #0]
 80a37bc:	9301      	str	r3, [sp, #4]
 80a37be:	bd08      	pop	{r3, pc}
 80a37c0:	080601a4 	.word	0x080601a4

080a37c4 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a37c4:	b508      	push	{r3, lr}
 80a37c6:	4b02      	ldr	r3, [pc, #8]	; (80a37d0 <set_system_mode+0xc>)
 80a37c8:	681b      	ldr	r3, [r3, #0]
 80a37ca:	685b      	ldr	r3, [r3, #4]
 80a37cc:	9301      	str	r3, [sp, #4]
 80a37ce:	bd08      	pop	{r3, pc}
 80a37d0:	080601a4 	.word	0x080601a4

080a37d4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a37d4:	b508      	push	{r3, lr}
 80a37d6:	4b02      	ldr	r3, [pc, #8]	; (80a37e0 <system_delay_ms+0xc>)
 80a37d8:	681b      	ldr	r3, [r3, #0]
 80a37da:	695b      	ldr	r3, [r3, #20]
 80a37dc:	9301      	str	r3, [sp, #4]
 80a37de:	bd08      	pop	{r3, pc}
 80a37e0:	080601a4 	.word	0x080601a4

080a37e4 <system_thread_get_state>:
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 80a37e4:	b508      	push	{r3, lr}
 80a37e6:	4b02      	ldr	r3, [pc, #8]	; (80a37f0 <system_thread_get_state+0xc>)
 80a37e8:	681b      	ldr	r3, [r3, #0]
 80a37ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a37ec:	9301      	str	r3, [sp, #4]
 80a37ee:	bd08      	pop	{r3, pc}
 80a37f0:	080601a4 	.word	0x080601a4

080a37f4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a37f4:	b508      	push	{r3, lr}
 80a37f6:	4b03      	ldr	r3, [pc, #12]	; (80a3804 <system_ctrl_set_app_request_handler+0x10>)
 80a37f8:	681b      	ldr	r3, [r3, #0]
 80a37fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a37fe:	9301      	str	r3, [sp, #4]
 80a3800:	bd08      	pop	{r3, pc}
 80a3802:	0000      	.short	0x0000
 80a3804:	080601a4 	.word	0x080601a4

080a3808 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a3808:	b508      	push	{r3, lr}
 80a380a:	4b03      	ldr	r3, [pc, #12]	; (80a3818 <system_ctrl_set_result+0x10>)
 80a380c:	681b      	ldr	r3, [r3, #0]
 80a380e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a3812:	9301      	str	r3, [sp, #4]
 80a3814:	bd08      	pop	{r3, pc}
 80a3816:	0000      	.short	0x0000
 80a3818:	080601a4 	.word	0x080601a4

080a381c <system_reset>:
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))
 80a381c:	b508      	push	{r3, lr}
 80a381e:	4b03      	ldr	r3, [pc, #12]	; (80a382c <system_reset+0x10>)
 80a3820:	681b      	ldr	r3, [r3, #0]
 80a3822:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80a3826:	9301      	str	r3, [sp, #4]
 80a3828:	bd08      	pop	{r3, pc}
 80a382a:	0000      	.short	0x0000
 80a382c:	080601a4 	.word	0x080601a4

080a3830 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a3830:	b508      	push	{r3, lr}
 80a3832:	4b02      	ldr	r3, [pc, #8]	; (80a383c <network_connect+0xc>)
 80a3834:	681b      	ldr	r3, [r3, #0]
 80a3836:	685b      	ldr	r3, [r3, #4]
 80a3838:	9301      	str	r3, [sp, #4]
 80a383a:	bd08      	pop	{r3, pc}
 80a383c:	080601c8 	.word	0x080601c8

080a3840 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a3840:	b508      	push	{r3, lr}
 80a3842:	4b02      	ldr	r3, [pc, #8]	; (80a384c <network_connecting+0xc>)
 80a3844:	681b      	ldr	r3, [r3, #0]
 80a3846:	689b      	ldr	r3, [r3, #8]
 80a3848:	9301      	str	r3, [sp, #4]
 80a384a:	bd08      	pop	{r3, pc}
 80a384c:	080601c8 	.word	0x080601c8

080a3850 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a3850:	b508      	push	{r3, lr}
 80a3852:	4b02      	ldr	r3, [pc, #8]	; (80a385c <network_disconnect+0xc>)
 80a3854:	681b      	ldr	r3, [r3, #0]
 80a3856:	68db      	ldr	r3, [r3, #12]
 80a3858:	9301      	str	r3, [sp, #4]
 80a385a:	bd08      	pop	{r3, pc}
 80a385c:	080601c8 	.word	0x080601c8

080a3860 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a3860:	b508      	push	{r3, lr}
 80a3862:	4b02      	ldr	r3, [pc, #8]	; (80a386c <network_ready+0xc>)
 80a3864:	681b      	ldr	r3, [r3, #0]
 80a3866:	691b      	ldr	r3, [r3, #16]
 80a3868:	9301      	str	r3, [sp, #4]
 80a386a:	bd08      	pop	{r3, pc}
 80a386c:	080601c8 	.word	0x080601c8

080a3870 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a3870:	b508      	push	{r3, lr}
 80a3872:	4b02      	ldr	r3, [pc, #8]	; (80a387c <network_on+0xc>)
 80a3874:	681b      	ldr	r3, [r3, #0]
 80a3876:	695b      	ldr	r3, [r3, #20]
 80a3878:	9301      	str	r3, [sp, #4]
 80a387a:	bd08      	pop	{r3, pc}
 80a387c:	080601c8 	.word	0x080601c8

080a3880 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a3880:	b508      	push	{r3, lr}
 80a3882:	4b02      	ldr	r3, [pc, #8]	; (80a388c <network_off+0xc>)
 80a3884:	681b      	ldr	r3, [r3, #0]
 80a3886:	699b      	ldr	r3, [r3, #24]
 80a3888:	9301      	str	r3, [sp, #4]
 80a388a:	bd08      	pop	{r3, pc}
 80a388c:	080601c8 	.word	0x080601c8

080a3890 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a3890:	b508      	push	{r3, lr}
 80a3892:	4b02      	ldr	r3, [pc, #8]	; (80a389c <network_listen+0xc>)
 80a3894:	681b      	ldr	r3, [r3, #0]
 80a3896:	69db      	ldr	r3, [r3, #28]
 80a3898:	9301      	str	r3, [sp, #4]
 80a389a:	bd08      	pop	{r3, pc}
 80a389c:	080601c8 	.word	0x080601c8

080a38a0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a38a0:	b508      	push	{r3, lr}
 80a38a2:	4b02      	ldr	r3, [pc, #8]	; (80a38ac <network_listening+0xc>)
 80a38a4:	681b      	ldr	r3, [r3, #0]
 80a38a6:	6a1b      	ldr	r3, [r3, #32]
 80a38a8:	9301      	str	r3, [sp, #4]
 80a38aa:	bd08      	pop	{r3, pc}
 80a38ac:	080601c8 	.word	0x080601c8

080a38b0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a38b0:	b508      	push	{r3, lr}
 80a38b2:	4b02      	ldr	r3, [pc, #8]	; (80a38bc <network_set_listen_timeout+0xc>)
 80a38b4:	681b      	ldr	r3, [r3, #0]
 80a38b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a38b8:	9301      	str	r3, [sp, #4]
 80a38ba:	bd08      	pop	{r3, pc}
 80a38bc:	080601c8 	.word	0x080601c8

080a38c0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a38c0:	b508      	push	{r3, lr}
 80a38c2:	4b02      	ldr	r3, [pc, #8]	; (80a38cc <network_get_listen_timeout+0xc>)
 80a38c4:	681b      	ldr	r3, [r3, #0]
 80a38c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a38c8:	9301      	str	r3, [sp, #4]
 80a38ca:	bd08      	pop	{r3, pc}
 80a38cc:	080601c8 	.word	0x080601c8

080a38d0 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
 80a38d0:	b508      	push	{r3, lr}
 80a38d2:	4b02      	ldr	r3, [pc, #8]	; (80a38dc <spark_variable+0xc>)
 80a38d4:	681b      	ldr	r3, [r3, #0]
 80a38d6:	681b      	ldr	r3, [r3, #0]
 80a38d8:	9301      	str	r3, [sp, #4]
 80a38da:	bd08      	pop	{r3, pc}
 80a38dc:	080601cc 	.word	0x080601cc

080a38e0 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
 80a38e0:	b508      	push	{r3, lr}
 80a38e2:	4b02      	ldr	r3, [pc, #8]	; (80a38ec <spark_function+0xc>)
 80a38e4:	681b      	ldr	r3, [r3, #0]
 80a38e6:	685b      	ldr	r3, [r3, #4]
 80a38e8:	9301      	str	r3, [sp, #4]
 80a38ea:	bd08      	pop	{r3, pc}
 80a38ec:	080601cc 	.word	0x080601cc

080a38f0 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 80a38f0:	b508      	push	{r3, lr}
 80a38f2:	4b02      	ldr	r3, [pc, #8]	; (80a38fc <spark_process+0xc>)
 80a38f4:	681b      	ldr	r3, [r3, #0]
 80a38f6:	689b      	ldr	r3, [r3, #8]
 80a38f8:	9301      	str	r3, [sp, #4]
 80a38fa:	bd08      	pop	{r3, pc}
 80a38fc:	080601cc 	.word	0x080601cc

080a3900 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
 80a3900:	b508      	push	{r3, lr}
 80a3902:	4b02      	ldr	r3, [pc, #8]	; (80a390c <spark_cloud_flag_connect+0xc>)
 80a3904:	681b      	ldr	r3, [r3, #0]
 80a3906:	68db      	ldr	r3, [r3, #12]
 80a3908:	9301      	str	r3, [sp, #4]
 80a390a:	bd08      	pop	{r3, pc}
 80a390c:	080601cc 	.word	0x080601cc

080a3910 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 80a3910:	b508      	push	{r3, lr}
 80a3912:	4b02      	ldr	r3, [pc, #8]	; (80a391c <spark_cloud_flag_connected+0xc>)
 80a3914:	681b      	ldr	r3, [r3, #0]
 80a3916:	695b      	ldr	r3, [r3, #20]
 80a3918:	9301      	str	r3, [sp, #4]
 80a391a:	bd08      	pop	{r3, pc}
 80a391c:	080601cc 	.word	0x080601cc

080a3920 <spark_sync_time_pending>:
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 80a3920:	b508      	push	{r3, lr}
 80a3922:	4b02      	ldr	r3, [pc, #8]	; (80a392c <spark_sync_time_pending+0xc>)
 80a3924:	681b      	ldr	r3, [r3, #0]
 80a3926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a3928:	9301      	str	r3, [sp, #4]
 80a392a:	bd08      	pop	{r3, pc}
 80a392c:	080601cc 	.word	0x080601cc

080a3930 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a3930:	b508      	push	{r3, lr}
 80a3932:	4b02      	ldr	r3, [pc, #8]	; (80a393c <spark_set_random_seed_from_cloud_handler+0xc>)
 80a3934:	681b      	ldr	r3, [r3, #0]
 80a3936:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a3938:	9301      	str	r3, [sp, #4]
 80a393a:	bd08      	pop	{r3, pc}
 80a393c:	080601cc 	.word	0x080601cc

080a3940 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a3940:	b508      	push	{r3, lr}
 80a3942:	4b02      	ldr	r3, [pc, #8]	; (80a394c <malloc+0xc>)
 80a3944:	681b      	ldr	r3, [r3, #0]
 80a3946:	681b      	ldr	r3, [r3, #0]
 80a3948:	9301      	str	r3, [sp, #4]
 80a394a:	bd08      	pop	{r3, pc}
 80a394c:	080601a0 	.word	0x080601a0

080a3950 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a3950:	b508      	push	{r3, lr}
 80a3952:	4b02      	ldr	r3, [pc, #8]	; (80a395c <free+0xc>)
 80a3954:	681b      	ldr	r3, [r3, #0]
 80a3956:	685b      	ldr	r3, [r3, #4]
 80a3958:	9301      	str	r3, [sp, #4]
 80a395a:	bd08      	pop	{r3, pc}
 80a395c:	080601a0 	.word	0x080601a0

080a3960 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a3960:	b508      	push	{r3, lr}
 80a3962:	4b02      	ldr	r3, [pc, #8]	; (80a396c <realloc+0xc>)
 80a3964:	681b      	ldr	r3, [r3, #0]
 80a3966:	689b      	ldr	r3, [r3, #8]
 80a3968:	9301      	str	r3, [sp, #4]
 80a396a:	bd08      	pop	{r3, pc}
 80a396c:	080601a0 	.word	0x080601a0

080a3970 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
 80a3970:	b508      	push	{r3, lr}
 80a3972:	4b02      	ldr	r3, [pc, #8]	; (80a397c <siprintf+0xc>)
 80a3974:	681b      	ldr	r3, [r3, #0]
 80a3976:	691b      	ldr	r3, [r3, #16]
 80a3978:	9301      	str	r3, [sp, #4]
 80a397a:	bd08      	pop	{r3, pc}
 80a397c:	080601a0 	.word	0x080601a0

080a3980 <sscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
 80a3980:	b508      	push	{r3, lr}
 80a3982:	4b02      	ldr	r3, [pc, #8]	; (80a398c <sscanf+0xc>)
 80a3984:	681b      	ldr	r3, [r3, #0]
 80a3986:	695b      	ldr	r3, [r3, #20]
 80a3988:	9301      	str	r3, [sp, #4]
 80a398a:	bd08      	pop	{r3, pc}
 80a398c:	080601a0 	.word	0x080601a0

080a3990 <siscanf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
 80a3990:	b508      	push	{r3, lr}
 80a3992:	4b02      	ldr	r3, [pc, #8]	; (80a399c <siscanf+0xc>)
 80a3994:	681b      	ldr	r3, [r3, #0]
 80a3996:	699b      	ldr	r3, [r3, #24]
 80a3998:	9301      	str	r3, [sp, #4]
 80a399a:	bd08      	pop	{r3, pc}
 80a399c:	080601a0 	.word	0x080601a0

080a39a0 <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
 80a39a0:	b508      	push	{r3, lr}
 80a39a2:	4b02      	ldr	r3, [pc, #8]	; (80a39ac <snprintf+0xc>)
 80a39a4:	681b      	ldr	r3, [r3, #0]
 80a39a6:	69db      	ldr	r3, [r3, #28]
 80a39a8:	9301      	str	r3, [sp, #4]
 80a39aa:	bd08      	pop	{r3, pc}
 80a39ac:	080601a0 	.word	0x080601a0

080a39b0 <sniprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
 80a39b0:	b508      	push	{r3, lr}
 80a39b2:	4b02      	ldr	r3, [pc, #8]	; (80a39bc <sniprintf+0xc>)
 80a39b4:	681b      	ldr	r3, [r3, #0]
 80a39b6:	6a1b      	ldr	r3, [r3, #32]
 80a39b8:	9301      	str	r3, [sp, #4]
 80a39ba:	bd08      	pop	{r3, pc}
 80a39bc:	080601a0 	.word	0x080601a0

080a39c0 <vsnprintf>:
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 80a39c0:	b508      	push	{r3, lr}
 80a39c2:	4b02      	ldr	r3, [pc, #8]	; (80a39cc <vsnprintf+0xc>)
 80a39c4:	681b      	ldr	r3, [r3, #0]
 80a39c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a39c8:	9301      	str	r3, [sp, #4]
 80a39ca:	bd08      	pop	{r3, pc}
 80a39cc:	080601a0 	.word	0x080601a0

080a39d0 <_malloc_r>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80a39d0:	b508      	push	{r3, lr}
 80a39d2:	4b02      	ldr	r3, [pc, #8]	; (80a39dc <_malloc_r+0xc>)
 80a39d4:	681b      	ldr	r3, [r3, #0]
 80a39d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a39d8:	9301      	str	r3, [sp, #4]
 80a39da:	bd08      	pop	{r3, pc}
 80a39dc:	080601a0 	.word	0x080601a0

080a39e0 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 80a39e0:	b508      	push	{r3, lr}
 80a39e2:	4b02      	ldr	r3, [pc, #8]	; (80a39ec <newlib_impure_ptr_callback+0xc>)
 80a39e4:	681b      	ldr	r3, [r3, #0]
 80a39e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a39e8:	9301      	str	r3, [sp, #4]
 80a39ea:	bd08      	pop	{r3, pc}
 80a39ec:	080601a0 	.word	0x080601a0

080a39f0 <_ZN8SPIClass6unlockEv>:
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
 80a39f0:	6880      	ldr	r0, [r0, #8]
 80a39f2:	f7ff bd95 	b.w	80a3520 <os_mutex_recursive_unlock>

080a39f6 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 80a39f6:	b570      	push	{r4, r5, r6, lr}
    RecursiveMutex() : handle_(nullptr)
 80a39f8:	2600      	movs	r6, #0
 80a39fa:	4604      	mov	r4, r0
 80a39fc:	460d      	mov	r5, r1
 80a39fe:	f840 6f08 	str.w	r6, [r0, #8]!
        os_mutex_recursive_create(&handle_);
 80a3a02:	f7ff fd75 	bl	80a34f0 <os_mutex_recursive_create>
{
    _spi = spi;
    hal_spi_init(_spi);
 80a3a06:	4628      	mov	r0, r5
    _spi = spi;
 80a3a08:	7025      	strb	r5, [r4, #0]
    hal_spi_init(_spi);
 80a3a0a:	f7ff fe63 	bl	80a36d4 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
}
 80a3a0e:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80a3a10:	6066      	str	r6, [r4, #4]
}
 80a3a12:	bd70      	pop	{r4, r5, r6, pc}

080a3a14 <_ZN8SPIClass5beginEt>:
        unlock();
    }
}

void SPIClass::begin(uint16_t ss_pin)
{
 80a3a14:	b538      	push	{r3, r4, r5, lr}
 80a3a16:	4604      	mov	r4, r0
 80a3a18:	460d      	mov	r5, r1
    void lock() { os_mutex_recursive_lock(handle_); }
 80a3a1a:	6880      	ldr	r0, [r0, #8]
 80a3a1c:	f7ff fd78 	bl	80a3510 <os_mutex_recursive_lock>
    if (!lock())
    {
        hal_spi_begin(_spi, ss_pin);
 80a3a20:	7820      	ldrb	r0, [r4, #0]
 80a3a22:	4629      	mov	r1, r5
 80a3a24:	f7ff fe46 	bl	80a36b4 <hal_spi_begin>
        unlock();
 80a3a28:	4620      	mov	r0, r4
 80a3a2a:	f7ff ffe1 	bl	80a39f0 <_ZN8SPIClass6unlockEv>
    }
}
 80a3a2e:	bd38      	pop	{r3, r4, r5, pc}

080a3a30 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
 80a3a30:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
 80a3a32:	7800      	ldrb	r0, [r0, #0]
 80a3a34:	f7ff fe46 	bl	80a36c4 <hal_spi_transfer>
}
 80a3a38:	b2c0      	uxtb	r0, r0
 80a3a3a:	bd08      	pop	{r3, pc}

080a3a3c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
 80a3a3c:	b510      	push	{r4, lr}
 80a3a3e:	4604      	mov	r4, r0
        if (wakeupSource_) {
 80a3a40:	6800      	ldr	r0, [r0, #0]
 80a3a42:	b118      	cbz	r0, 80a3a4c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
 80a3a44:	f7ff ff84 	bl	80a3950 <free>
            wakeupSource_ = nullptr;
 80a3a48:	2300      	movs	r3, #0
 80a3a4a:	6023      	str	r3, [r4, #0]
        }
    }
 80a3a4c:	bd10      	pop	{r4, pc}

080a3a4e <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80a3a4e:	b510      	push	{r4, lr}
 80a3a50:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
 80a3a52:	f7ff fff3 	bl	80a3a3c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
 80a3a56:	4620      	mov	r0, r4
 80a3a58:	bd10      	pop	{r4, pc}

080a3a5a <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>:
{
    reset(0, flags);
}

void SystemClass::reset(uint32_t data, SystemResetFlags flags)
{
 80a3a5a:	b507      	push	{r0, r1, r2, lr}
 80a3a5c:	460b      	mov	r3, r1
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
 80a3a5e:	2100      	movs	r1, #0
{
 80a3a60:	4602      	mov	r2, r0
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
 80a3a62:	9100      	str	r1, [sp, #0]
 80a3a64:	2001      	movs	r0, #1
 80a3a66:	218c      	movs	r1, #140	; 0x8c
 80a3a68:	f7ff fed8 	bl	80a381c <system_reset>
}
 80a3a6c:	b003      	add	sp, #12
 80a3a6e:	f85d fb04 	ldr.w	pc, [sp], #4

080a3a72 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>:
{
 80a3a72:	4601      	mov	r1, r0
    reset(0, flags);
 80a3a74:	2000      	movs	r0, #0
 80a3a76:	f7ff bff0 	b.w	80a3a5a <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>

080a3a7a <_ZN11SystemClass5resetEv>:
    reset(SystemResetFlags());
 80a3a7a:	2000      	movs	r0, #0
 80a3a7c:	f7ff bff9 	b.w	80a3a72 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>

080a3a80 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a3a80:	2202      	movs	r2, #2
              error_(SYSTEM_ERROR_NONE) {
 80a3a82:	2000      	movs	r0, #0
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80a3a84:	b510      	push	{r4, lr}
 80a3a86:	4b08      	ldr	r3, [pc, #32]	; (80a3aa8 <_GLOBAL__sub_I_System+0x28>)
 80a3a88:	4c08      	ldr	r4, [pc, #32]	; (80a3aac <_GLOBAL__sub_I_System+0x2c>)
 80a3a8a:	601a      	str	r2, [r3, #0]
    SleepResult() {}
 80a3a8c:	4b08      	ldr	r3, [pc, #32]	; (80a3ab0 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
 80a3a8e:	6020      	str	r0, [r4, #0]
 80a3a90:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
 80a3a92:	71a0      	strb	r0, [r4, #6]
 80a3a94:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a3a96:	f7ff fe95 	bl	80a37c4 <set_system_mode>
SystemClass System;
 80a3a9a:	4620      	mov	r0, r4
 80a3a9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
 80a3aa0:	4a04      	ldr	r2, [pc, #16]	; (80a3ab4 <_GLOBAL__sub_I_System+0x34>)
 80a3aa2:	4905      	ldr	r1, [pc, #20]	; (80a3ab8 <_GLOBAL__sub_I_System+0x38>)
 80a3aa4:	f001 bcbe 	b.w	80a5424 <__aeabi_atexit>
 80a3aa8:	20000584 	.word	0x20000584
 80a3aac:	20000578 	.word	0x20000578
 80a3ab0:	ffff0000 	.word	0xffff0000
 80a3ab4:	20000240 	.word	0x20000240
 80a3ab8:	080a3a4f 	.word	0x080a3a4f

080a3abc <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
 80a3abc:	b510      	push	{r4, lr}
 80a3abe:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
 80a3ac0:	f003 fe00 	bl	80a76c4 <strlen>
 80a3ac4:	1e43      	subs	r3, r0, #1
 80a3ac6:	4620      	mov	r0, r4
 80a3ac8:	4423      	add	r3, r4
	while(i<j){
 80a3aca:	4283      	cmp	r3, r0
 80a3acc:	d906      	bls.n	80a3adc <_Z11str_reversePc+0x20>
		c = *i;
 80a3ace:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
 80a3ad0:	7819      	ldrb	r1, [r3, #0]
 80a3ad2:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
 80a3ad6:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
 80a3ada:	e7f6      	b.n	80a3aca <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
 80a3adc:	bd10      	pop	{r4, pc}

080a3ade <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
 80a3ade:	b570      	push	{r4, r5, r6, lr}
 80a3ae0:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
 80a3ae2:	1e91      	subs	r1, r2, #2
 80a3ae4:	2922      	cmp	r1, #34	; 0x22
 80a3ae6:	d822      	bhi.n	80a3b2e <ultoa+0x50>
		return NULL;
	}
	char* ptr=buffer;
 80a3ae8:	4625      	mov	r5, r4

	div_t result;
	while(a){
 80a3aea:	b168      	cbz	r0, 80a3b08 <ultoa+0x2a>
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
 80a3aec:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
 80a3af0:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
 80a3af4:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
 80a3af6:	2809      	cmp	r0, #9
                *ptr += '0';
 80a3af8:	bf94      	ite	ls
 80a3afa:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
 80a3afc:	3157      	addhi	r1, #87	; 0x57
 80a3afe:	b2c9      	uxtb	r1, r1
            }
            ++ptr;
            a = result.quot;
 80a3b00:	4630      	mov	r0, r6
 80a3b02:	f805 1b01 	strb.w	r1, [r5], #1
	while(a){
 80a3b06:	e7f0      	b.n	80a3aea <ultoa+0xc>
 80a3b08:	462a      	mov	r2, r5
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';
 80a3b0a:	2130      	movs	r1, #48	; 0x30
        while (ptr < buffer+pad)
 80a3b0c:	4423      	add	r3, r4
 80a3b0e:	4293      	cmp	r3, r2
 80a3b10:	d902      	bls.n	80a3b18 <ultoa+0x3a>
            *ptr++ = '0';
 80a3b12:	f802 1b01 	strb.w	r1, [r2], #1
        while (ptr < buffer+pad)
 80a3b16:	e7fa      	b.n	80a3b0e <ultoa+0x30>
 80a3b18:	1b5a      	subs	r2, r3, r5
 80a3b1a:	42ab      	cmp	r3, r5
 80a3b1c:	bf38      	it	cc
 80a3b1e:	2200      	movcc	r2, #0

	*ptr = '\0';
 80a3b20:	2300      	movs	r3, #0
	str_reverse(buffer);
 80a3b22:	4620      	mov	r0, r4
	*ptr = '\0';
 80a3b24:	54ab      	strb	r3, [r5, r2]
	str_reverse(buffer);
 80a3b26:	f7ff ffc9 	bl	80a3abc <_Z11str_reversePc>
	return buffer;
 80a3b2a:	4620      	mov	r0, r4
}
 80a3b2c:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
 80a3b2e:	2000      	movs	r0, #0
 80a3b30:	e7fc      	b.n	80a3b2c <ultoa+0x4e>

080a3b32 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 80a3b32:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
 80a3b34:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 80a3b36:	460c      	mov	r4, r1
 80a3b38:	4615      	mov	r5, r2
	if(a<0){
 80a3b3a:	da0d      	bge.n	80a3b58 <itoa+0x26>
		*buffer = '-';
 80a3b3c:	222d      	movs	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
 80a3b3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a3b42:	bf0c      	ite	eq
 80a3b44:	4618      	moveq	r0, r3
 80a3b46:	4258      	negne	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
 80a3b48:	2301      	movs	r3, #1
		*buffer = '-';
 80a3b4a:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
 80a3b4c:	462a      	mov	r2, r5
 80a3b4e:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
 80a3b50:	f7ff ffc5 	bl	80a3ade <ultoa>
	}
	return buffer;
}
 80a3b54:	4620      	mov	r0, r4
 80a3b56:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
 80a3b58:	2301      	movs	r3, #1
 80a3b5a:	e7f9      	b.n	80a3b50 <itoa+0x1e>

080a3b5c <utoa>:

__attribute__((weak)) char* utoa(unsigned a, char* buffer, int radix) {
 80a3b5c:	b508      	push	{r3, lr}
    return ultoa(a, buffer, radix);
 80a3b5e:	2301      	movs	r3, #1
 80a3b60:	f7ff ffbd 	bl	80a3ade <ultoa>
}
 80a3b64:	bd08      	pop	{r3, pc}

080a3b66 <_ZN9TCPClient5writeEh>:
        }
        return connected;
}

size_t TCPClient::write(uint8_t b)
{
 80a3b66:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a3b68:	6803      	ldr	r3, [r0, #0]
{
 80a3b6a:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a3b6e:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80a3b70:	2201      	movs	r2, #1
 80a3b72:	f247 5330 	movw	r3, #30000	; 0x7530
 80a3b76:	f10d 0107 	add.w	r1, sp, #7
 80a3b7a:	47a0      	blx	r4
}
 80a3b7c:	b002      	add	sp, #8
 80a3b7e:	bd10      	pop	{r4, pc}

080a3b80 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size)
{
 80a3b80:	b410      	push	{r4}
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a3b82:	6803      	ldr	r3, [r0, #0]
 80a3b84:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80a3b86:	f247 5330 	movw	r3, #30000	; 0x7530
 80a3b8a:	46a4      	mov	ip, r4
}
 80a3b8c:	bc10      	pop	{r4}
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a3b8e:	4760      	bx	ip

080a3b90 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout)
{
 80a3b90:	b513      	push	{r0, r1, r4, lr}
 80a3b92:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
 80a3b94:	6802      	ldr	r2, [r0, #0]
{
 80a3b96:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
 80a3b9a:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
 80a3b9c:	f10d 0107 	add.w	r1, sp, #7
 80a3ba0:	2201      	movs	r2, #1
 80a3ba2:	47a0      	blx	r4
}
 80a3ba4:	b002      	add	sp, #8
 80a3ba6:	bd10      	pop	{r4, pc}

080a3ba8 <_ZN9TCPClient5flushEv>:
  d_->total = 0;
}

void TCPClient::flush()
{
}
 80a3ba8:	4770      	bx	lr

080a3baa <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 80a3baa:	4770      	bx	lr

080a3bac <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info& __ti) noexcept override
 80a3bac:	b510      	push	{r4, lr}
 80a3bae:	4604      	mov	r4, r0
	    ||
 80a3bb0:	4b06      	ldr	r3, [pc, #24]	; (80a3bcc <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x20>)
      _M_get_deleter(const std::type_info& __ti) noexcept override
 80a3bb2:	4608      	mov	r0, r1
	    ||
 80a3bb4:	4299      	cmp	r1, r3
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
 80a3bb6:	f104 040c 	add.w	r4, r4, #12
 80a3bba:	d004      	beq.n	80a3bc6 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1a>
	    _Sp_make_shared_tag::_S_eq(__ti)
 80a3bbc:	f001 fc3c 	bl	80a5438 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
 80a3bc0:	2800      	cmp	r0, #0
	return nullptr;
 80a3bc2:	bf08      	it	eq
 80a3bc4:	2400      	moveq	r4, #0
      }
 80a3bc6:	4620      	mov	r0, r4
 80a3bc8:	bd10      	pop	{r4, pc}
 80a3bca:	bf00      	nop
 80a3bcc:	080a86c4 	.word	0x080a86c4

080a3bd0 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 80a3bd0:	b510      	push	{r4, lr}
 80a3bd2:	4604      	mov	r4, r0
 80a3bd4:	21ac      	movs	r1, #172	; 0xac
 80a3bd6:	f001 fc2a 	bl	80a542e <_ZdlPvj>
 80a3bda:	4620      	mov	r0, r4
 80a3bdc:	bd10      	pop	{r4, pc}

080a3bde <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
 80a3bde:	f7fc ba5e 	b.w	80a009e <_ZdlPv>
	...

080a3be4 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
 80a3be4:	b538      	push	{r3, r4, r5, lr}
 80a3be6:	4b0b      	ldr	r3, [pc, #44]	; (80a3c14 <_ZN9TCPClientD1Ev+0x30>)
	if (_M_pi != nullptr)
 80a3be8:	6984      	ldr	r4, [r0, #24]
 80a3bea:	4605      	mov	r5, r0
 80a3bec:	6003      	str	r3, [r0, #0]
 80a3bee:	b17c      	cbz	r4, 80a3c10 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
 80a3bf0:	6863      	ldr	r3, [r4, #4]
 80a3bf2:	3b01      	subs	r3, #1
 80a3bf4:	6063      	str	r3, [r4, #4]
 80a3bf6:	b95b      	cbnz	r3, 80a3c10 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
 80a3bf8:	6823      	ldr	r3, [r4, #0]
 80a3bfa:	4620      	mov	r0, r4
 80a3bfc:	689b      	ldr	r3, [r3, #8]
 80a3bfe:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a3c00:	68a3      	ldr	r3, [r4, #8]
 80a3c02:	3b01      	subs	r3, #1
 80a3c04:	60a3      	str	r3, [r4, #8]
 80a3c06:	b91b      	cbnz	r3, 80a3c10 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
 80a3c08:	6823      	ldr	r3, [r4, #0]
 80a3c0a:	4620      	mov	r0, r4
 80a3c0c:	68db      	ldr	r3, [r3, #12]
 80a3c0e:	4798      	blx	r3
 80a3c10:	4628      	mov	r0, r5
 80a3c12:	bd38      	pop	{r3, r4, r5, pc}
 80a3c14:	080a86d4 	.word	0x080a86d4

080a3c18 <_ZN9TCPClientD0Ev>:
 80a3c18:	b510      	push	{r4, lr}
 80a3c1a:	4604      	mov	r4, r0
 80a3c1c:	f7ff ffe2 	bl	80a3be4 <_ZN9TCPClientD1Ev>
 80a3c20:	4620      	mov	r0, r4
 80a3c22:	211c      	movs	r1, #28
 80a3c24:	f001 fc03 	bl	80a542e <_ZdlPvj>
 80a3c28:	4620      	mov	r0, r4
 80a3c2a:	bd10      	pop	{r4, pc}

080a3c2c <_ZN9TCPClient8remoteIPEv>:
{
   return (status()!=0);
}

IPAddress TCPClient::remoteIP()
{
 80a3c2c:	b570      	push	{r4, r5, r6, lr}

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 80a3c2e:	4604      	mov	r4, r0
 80a3c30:	4606      	mov	r6, r0
      }

    private:
      element_type*
      _M_get() const noexcept
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 80a3c32:	694d      	ldr	r5, [r1, #20]
 80a3c34:	4b04      	ldr	r3, [pc, #16]	; (80a3c48 <_ZN9TCPClient8remoteIPEv+0x1c>)
 80a3c36:	358c      	adds	r5, #140	; 0x8c
 80a3c38:	f844 3b04 	str.w	r3, [r4], #4
 80a3c3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a3c3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a3c40:	682b      	ldr	r3, [r5, #0]
    return d_->remoteIP;
}
 80a3c42:	4630      	mov	r0, r6
 80a3c44:	7023      	strb	r3, [r4, #0]
 80a3c46:	bd70      	pop	{r4, r5, r6, pc}
 80a3c48:	080a8758 	.word	0x080a8758

080a3c4c <_ZN9TCPClient4peekEv>:
{
 80a3c4c:	b510      	push	{r4, lr}
 80a3c4e:	6943      	ldr	r3, [r0, #20]
 80a3c50:	4604      	mov	r4, r0
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
 80a3c52:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a3c56:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80a3c5a:	429a      	cmp	r2, r3
 80a3c5c:	d005      	beq.n	80a3c6a <_ZN9TCPClient4peekEv+0x1e>
 80a3c5e:	6963      	ldr	r3, [r4, #20]
 80a3c60:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 80a3c64:	4413      	add	r3, r2
 80a3c66:	7918      	ldrb	r0, [r3, #4]
}
 80a3c68:	bd10      	pop	{r4, pc}
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
 80a3c6a:	6803      	ldr	r3, [r0, #0]
 80a3c6c:	691b      	ldr	r3, [r3, #16]
 80a3c6e:	4798      	blx	r3
 80a3c70:	2800      	cmp	r0, #0
 80a3c72:	d1f4      	bne.n	80a3c5e <_ZN9TCPClient4peekEv+0x12>
 80a3c74:	f04f 30ff 	mov.w	r0, #4294967295
 80a3c78:	e7f6      	b.n	80a3c68 <_ZN9TCPClient4peekEv+0x1c>

080a3c7a <_ZN9TCPClient4readEv>:
{
 80a3c7a:	b510      	push	{r4, lr}
 80a3c7c:	6943      	ldr	r3, [r0, #20]
 80a3c7e:	4604      	mov	r4, r0
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
 80a3c80:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a3c84:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80a3c88:	429a      	cmp	r2, r3
 80a3c8a:	d008      	beq.n	80a3c9e <_ZN9TCPClient4readEv+0x24>
 80a3c8c:	6963      	ldr	r3, [r4, #20]
 80a3c8e:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 80a3c92:	1c51      	adds	r1, r2, #1
 80a3c94:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
 80a3c98:	4413      	add	r3, r2
 80a3c9a:	7918      	ldrb	r0, [r3, #4]
}
 80a3c9c:	bd10      	pop	{r4, pc}
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
 80a3c9e:	6803      	ldr	r3, [r0, #0]
 80a3ca0:	691b      	ldr	r3, [r3, #16]
 80a3ca2:	4798      	blx	r3
 80a3ca4:	2800      	cmp	r0, #0
 80a3ca6:	d1f1      	bne.n	80a3c8c <_ZN9TCPClient4readEv+0x12>
 80a3ca8:	f04f 30ff 	mov.w	r0, #4294967295
 80a3cac:	e7f6      	b.n	80a3c9c <_ZN9TCPClient4readEv+0x22>

080a3cae <_ZN9TCPClient4readEPhj>:
{
 80a3cae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a3cb0:	6943      	ldr	r3, [r0, #20]
 80a3cb2:	4617      	mov	r7, r2
        if (bufferCount() || available())
 80a3cb4:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a3cb8:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
{
 80a3cbc:	4605      	mov	r5, r0
        if (bufferCount() || available())
 80a3cbe:	429a      	cmp	r2, r3
{
 80a3cc0:	460e      	mov	r6, r1
        if (bufferCount() || available())
 80a3cc2:	d016      	beq.n	80a3cf2 <_ZN9TCPClient4readEPhj+0x44>
 80a3cc4:	6969      	ldr	r1, [r5, #20]
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80a3cc6:	4630      	mov	r0, r6
  return d_->total - d_->offset;
 80a3cc8:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
 80a3ccc:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
 80a3cd0:	1ae4      	subs	r4, r4, r3
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
 80a3cd2:	42bc      	cmp	r4, r7
 80a3cd4:	bf28      	it	cs
 80a3cd6:	463c      	movcs	r4, r7
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80a3cd8:	3304      	adds	r3, #4
 80a3cda:	4622      	mov	r2, r4
 80a3cdc:	4419      	add	r1, r3
 80a3cde:	f002 ff43 	bl	80a6b68 <memcpy>
 80a3ce2:	696a      	ldr	r2, [r5, #20]
          d_->offset += read;
 80a3ce4:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 80a3ce8:	4423      	add	r3, r4
 80a3cea:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
 80a3cee:	4620      	mov	r0, r4
 80a3cf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (bufferCount() || available())
 80a3cf2:	6803      	ldr	r3, [r0, #0]
 80a3cf4:	691b      	ldr	r3, [r3, #16]
 80a3cf6:	4798      	blx	r3
 80a3cf8:	2800      	cmp	r0, #0
 80a3cfa:	d1e3      	bne.n	80a3cc4 <_ZN9TCPClient4readEPhj+0x16>
        int read = -1;
 80a3cfc:	f04f 34ff 	mov.w	r4, #4294967295
 80a3d00:	e7f5      	b.n	80a3cee <_ZN9TCPClient4readEPhj+0x40>

080a3d02 <_ZN9TCPClient12flush_bufferEv>:
  d_->offset = 0;
 80a3d02:	2300      	movs	r3, #0
 80a3d04:	6942      	ldr	r2, [r0, #20]
 80a3d06:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
 80a3d0a:	6942      	ldr	r2, [r0, #20]
  d_->total = 0;
 80a3d0c:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
 80a3d10:	4770      	bx	lr
	...

080a3d14 <_ZN9TCPClient7connectE9IPAddresstm>:
{
 80a3d14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a3d18:	461f      	mov	r7, r3
    stop();
 80a3d1a:	6803      	ldr	r3, [r0, #0]
{
 80a3d1c:	b08b      	sub	sp, #44	; 0x2c
    stop();
 80a3d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
{
 80a3d20:	4605      	mov	r5, r0
 80a3d22:	460c      	mov	r4, r1
 80a3d24:	4616      	mov	r6, r2
    stop();
 80a3d26:	4798      	blx	r3
        if(Network.from(nif).ready())
 80a3d28:	4638      	mov	r0, r7
 80a3d2a:	f001 fa89 	bl	80a5240 <_ZN5spark12NetworkClass4fromEm>
 80a3d2e:	6803      	ldr	r3, [r0, #0]
 80a3d30:	68db      	ldr	r3, [r3, #12]
 80a3d32:	4798      	blx	r3
 80a3d34:	2800      	cmp	r0, #0
 80a3d36:	d054      	beq.n	80a3de2 <_ZN9TCPClient7connectE9IPAddresstm+0xce>
          d_->sock = socket_create(AF_INET, SOCK_STREAM, IPPROTO_TCP, port, nif);
 80a3d38:	4633      	mov	r3, r6
 80a3d3a:	2206      	movs	r2, #6
 80a3d3c:	2101      	movs	r1, #1
 80a3d3e:	2002      	movs	r0, #2
 80a3d40:	9700      	str	r7, [sp, #0]
 80a3d42:	f8d5 8014 	ldr.w	r8, [r5, #20]
 80a3d46:	f7ff fc85 	bl	80a3654 <socket_create>
          LOG(TRACE, "TCPClient socket=%x", d_->sock);
 80a3d4a:	2320      	movs	r3, #32
          d_->sock = socket_create(AF_INET, SOCK_STREAM, IPPROTO_TCP, port, nif);
 80a3d4c:	f8c8 0000 	str.w	r0, [r8]
          LOG(TRACE, "TCPClient socket=%x", d_->sock);
 80a3d50:	f04f 0800 	mov.w	r8, #0
 80a3d54:	e9cd 3802 	strd	r3, r8, [sp, #8]
 80a3d58:	696b      	ldr	r3, [r5, #20]
 80a3d5a:	2001      	movs	r0, #1
 80a3d5c:	681b      	ldr	r3, [r3, #0]
 80a3d5e:	4923      	ldr	r1, [pc, #140]	; (80a3dec <_ZN9TCPClient7connectE9IPAddresstm+0xd8>)
 80a3d60:	9301      	str	r3, [sp, #4]
 80a3d62:	4b23      	ldr	r3, [pc, #140]	; (80a3df0 <_ZN9TCPClient7connectE9IPAddresstm+0xdc>)
 80a3d64:	aa02      	add	r2, sp, #8
 80a3d66:	9300      	str	r3, [sp, #0]
 80a3d68:	4643      	mov	r3, r8
 80a3d6a:	f7ff fd1b 	bl	80a37a4 <log_message>
          if (socket_handle_valid(d_->sock))
 80a3d6e:	696b      	ldr	r3, [r5, #20]
 80a3d70:	6818      	ldr	r0, [r3, #0]
 80a3d72:	f7ff fc67 	bl	80a3644 <socket_handle_valid>
 80a3d76:	2800      	cmp	r0, #0
 80a3d78:	d033      	beq.n	80a3de2 <_ZN9TCPClient7connectE9IPAddresstm+0xce>
            flush_buffer();
 80a3d7a:	4628      	mov	r0, r5
 80a3d7c:	f7ff ffc1 	bl	80a3d02 <_ZN9TCPClient12flush_bufferEv>
            tSocketAddr.sa_family = AF_INET;
 80a3d80:	2302      	movs	r3, #2
 80a3d82:	f8ad 3008 	strh.w	r3, [sp, #8]
            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 80a3d86:	79e3      	ldrb	r3, [r4, #7]
            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80a3d88:	ba76      	rev16	r6, r6
            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 80a3d8a:	f88d 300c 	strb.w	r3, [sp, #12]
            tSocketAddr.sa_data[3] = ip[1];
 80a3d8e:	79a3      	ldrb	r3, [r4, #6]
            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a3d90:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
            tSocketAddr.sa_data[3] = ip[1];
 80a3d94:	f88d 300d 	strb.w	r3, [sp, #13]
            tSocketAddr.sa_data[4] = ip[2];
 80a3d98:	7963      	ldrb	r3, [r4, #5]
            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80a3d9a:	f8ad 600a 	strh.w	r6, [sp, #10]
            tSocketAddr.sa_data[4] = ip[2];
 80a3d9e:	f88d 300e 	strb.w	r3, [sp, #14]
            tSocketAddr.sa_data[5] = ip[3];
 80a3da2:	f814 3f04 	ldrb.w	r3, [r4, #4]!
 80a3da6:	f88d 300f 	strb.w	r3, [sp, #15]
            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a3daa:	f7ff fcdb 	bl	80a3764 <HAL_NET_SetNetWatchDog>
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80a3dae:	696b      	ldr	r3, [r5, #20]
            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a3db0:	4606      	mov	r6, r0
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80a3db2:	2210      	movs	r2, #16
 80a3db4:	6818      	ldr	r0, [r3, #0]
 80a3db6:	a902      	add	r1, sp, #8
 80a3db8:	f7ff fc54 	bl	80a3664 <socket_connect>
 80a3dbc:	4681      	mov	r9, r0
            HAL_NET_SetNetWatchDog(ot);
 80a3dbe:	4630      	mov	r0, r6
 80a3dc0:	f7ff fcd0 	bl	80a3764 <HAL_NET_SetNetWatchDog>
 80a3dc4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a3dc6:	696e      	ldr	r6, [r5, #20]
 80a3dc8:	368c      	adds	r6, #140	; 0x8c
 80a3dca:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80a3dcc:	6823      	ldr	r3, [r4, #0]
 80a3dce:	7033      	strb	r3, [r6, #0]
            nif_ = nif;
 80a3dd0:	612f      	str	r7, [r5, #16]
            if(!connected)
 80a3dd2:	f1b9 0f00 	cmp.w	r9, #0
 80a3dd6:	d007      	beq.n	80a3de8 <_ZN9TCPClient7connectE9IPAddresstm+0xd4>
                stop();
 80a3dd8:	682b      	ldr	r3, [r5, #0]
 80a3dda:	4628      	mov	r0, r5
 80a3ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a3dde:	4798      	blx	r3
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80a3de0:	4640      	mov	r0, r8
}
 80a3de2:	b00b      	add	sp, #44	; 0x2c
 80a3de4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a3de8:	2001      	movs	r0, #1
        return connected;
 80a3dea:	e7fa      	b.n	80a3de2 <_ZN9TCPClient7connectE9IPAddresstm+0xce>
 80a3dec:	080a868c 	.word	0x080a868c
 80a3df0:	080a8693 	.word	0x080a8693

080a3df4 <_ZN9TCPClient9availableEv>:
{
 80a3df4:	b538      	push	{r3, r4, r5, lr}
 80a3df6:	6942      	ldr	r2, [r0, #20]
 80a3df8:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total))
 80a3dfa:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 80a3dfe:	b12b      	cbz	r3, 80a3e0c <_ZN9TCPClient9availableEv+0x18>
 80a3e00:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
 80a3e04:	429a      	cmp	r2, r3
 80a3e06:	d101      	bne.n	80a3e0c <_ZN9TCPClient9availableEv+0x18>
        flush_buffer();
 80a3e08:	f7ff ff7b 	bl	80a3d02 <_ZN9TCPClient12flush_bufferEv>
    if(Network.from(nif_).ready() && isOpen(d_->sock))
 80a3e0c:	6920      	ldr	r0, [r4, #16]
 80a3e0e:	f001 fa17 	bl	80a5240 <_ZN5spark12NetworkClass4fromEm>
 80a3e12:	6803      	ldr	r3, [r0, #0]
 80a3e14:	68db      	ldr	r3, [r3, #12]
 80a3e16:	4798      	blx	r3
 80a3e18:	b1f8      	cbz	r0, 80a3e5a <_ZN9TCPClient9availableEv+0x66>
 80a3e1a:	6963      	ldr	r3, [r4, #20]
   return socket_handle_valid(sd);
 80a3e1c:	6818      	ldr	r0, [r3, #0]
 80a3e1e:	f7ff fc11 	bl	80a3644 <socket_handle_valid>
    if(Network.from(nif_).ready() && isOpen(d_->sock))
 80a3e22:	b1d0      	cbz	r0, 80a3e5a <_ZN9TCPClient9availableEv+0x66>
 80a3e24:	6960      	ldr	r0, [r4, #20]
        if ( d_->total < arraySize(d_->buffer))
 80a3e26:	f8b0 1086 	ldrh.w	r1, [r0, #134]	; 0x86
 80a3e2a:	297f      	cmp	r1, #127	; 0x7f
 80a3e2c:	d815      	bhi.n	80a3e5a <_ZN9TCPClient9availableEv+0x66>
            int ret = socket_receive(d_->sock, d_->buffer + d_->total , arraySize(d_->buffer)-d_->total, 0);
 80a3e2e:	1d05      	adds	r5, r0, #4
 80a3e30:	f1c1 0280 	rsb	r2, r1, #128	; 0x80
 80a3e34:	2300      	movs	r3, #0
 80a3e36:	6800      	ldr	r0, [r0, #0]
 80a3e38:	4429      	add	r1, r5
 80a3e3a:	f7ff fc1b 	bl	80a3674 <socket_receive>
            if (ret > 0)
 80a3e3e:	2800      	cmp	r0, #0
 80a3e40:	dd0b      	ble.n	80a3e5a <_ZN9TCPClient9availableEv+0x66>
 80a3e42:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) d_->offset = 0;
 80a3e44:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a3e48:	b90a      	cbnz	r2, 80a3e4e <_ZN9TCPClient9availableEv+0x5a>
 80a3e4a:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 80a3e4e:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
 80a3e50:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a3e54:	4410      	add	r0, r2
 80a3e56:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
 80a3e5a:	6963      	ldr	r3, [r4, #20]
  return d_->total - d_->offset;
 80a3e5c:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
 80a3e60:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
 80a3e64:	1ac0      	subs	r0, r0, r3
 80a3e66:	bd38      	pop	{r3, r4, r5, pc}

080a3e68 <_ZN9TCPClient4stopEv>:
{
 80a3e68:	b538      	push	{r3, r4, r5, lr}
  if (isOpen(d_->sock))
 80a3e6a:	6943      	ldr	r3, [r0, #20]
{
 80a3e6c:	4604      	mov	r4, r0
   return socket_handle_valid(sd);
 80a3e6e:	6818      	ldr	r0, [r3, #0]
 80a3e70:	f7ff fbe8 	bl	80a3644 <socket_handle_valid>
  if (isOpen(d_->sock))
 80a3e74:	b118      	cbz	r0, 80a3e7e <_ZN9TCPClient4stopEv+0x16>
      socket_close(d_->sock);
 80a3e76:	6963      	ldr	r3, [r4, #20]
 80a3e78:	6818      	ldr	r0, [r3, #0]
 80a3e7a:	f7ff fc03 	bl	80a3684 <socket_close>
 80a3e7e:	6965      	ldr	r5, [r4, #20]
  d_->sock = socket_handle_invalid();
 80a3e80:	f7ff fc08 	bl	80a3694 <socket_handle_invalid>
 80a3e84:	6028      	str	r0, [r5, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a3e86:	6960      	ldr	r0, [r4, #20]
 80a3e88:	2211      	movs	r2, #17
 80a3e8a:	2100      	movs	r1, #0
 80a3e8c:	308c      	adds	r0, #140	; 0x8c
 80a3e8e:	f002 fe79 	bl	80a6b84 <memset>
  flush_buffer();
 80a3e92:	4620      	mov	r0, r4
}
 80a3e94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  flush_buffer();
 80a3e98:	f7ff bf33 	b.w	80a3d02 <_ZN9TCPClient12flush_bufferEv>

080a3e9c <_ZN9TCPClient6statusEv>:
{
 80a3e9c:	b510      	push	{r4, lr}
  return (isOpen(d_->sock) && Network.from(nif_).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80a3e9e:	6943      	ldr	r3, [r0, #20]
{
 80a3ea0:	4604      	mov	r4, r0
   return socket_handle_valid(sd);
 80a3ea2:	6818      	ldr	r0, [r3, #0]
 80a3ea4:	f7ff fbce 	bl	80a3644 <socket_handle_valid>
  return (isOpen(d_->sock) && Network.from(nif_).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80a3ea8:	b908      	cbnz	r0, 80a3eae <_ZN9TCPClient6statusEv+0x12>
 80a3eaa:	2000      	movs	r0, #0
}
 80a3eac:	bd10      	pop	{r4, pc}
  return (isOpen(d_->sock) && Network.from(nif_).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80a3eae:	6920      	ldr	r0, [r4, #16]
 80a3eb0:	f001 f9c6 	bl	80a5240 <_ZN5spark12NetworkClass4fromEm>
 80a3eb4:	6803      	ldr	r3, [r0, #0]
 80a3eb6:	68db      	ldr	r3, [r3, #12]
 80a3eb8:	4798      	blx	r3
 80a3eba:	2800      	cmp	r0, #0
 80a3ebc:	d0f5      	beq.n	80a3eaa <_ZN9TCPClient6statusEv+0xe>
 80a3ebe:	6963      	ldr	r3, [r4, #20]
 80a3ec0:	6818      	ldr	r0, [r3, #0]
 80a3ec2:	f7ff fbb7 	bl	80a3634 <socket_active_status>
 80a3ec6:	fab0 f080 	clz	r0, r0
 80a3eca:	0940      	lsrs	r0, r0, #5
 80a3ecc:	e7ee      	b.n	80a3eac <_ZN9TCPClient6statusEv+0x10>

080a3ece <_ZN9TCPClientcvbEv>:
{
 80a3ece:	b508      	push	{r3, lr}
   return (status()!=0);
 80a3ed0:	f7ff ffe4 	bl	80a3e9c <_ZN9TCPClient6statusEv>
}
 80a3ed4:	3800      	subs	r0, #0
 80a3ed6:	bf18      	it	ne
 80a3ed8:	2001      	movne	r0, #1
 80a3eda:	bd08      	pop	{r3, pc}

080a3edc <_ZN9TCPClient5writeEPKhjm>:
{
 80a3edc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}

    size_t printNumber(unsigned long, uint8_t);
    size_t printNumber(unsigned long long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
 80a3ee0:	2700      	movs	r7, #0
 80a3ee2:	6047      	str	r7, [r0, #4]
 80a3ee4:	4604      	mov	r4, r0
 80a3ee6:	460d      	mov	r5, r1
 80a3ee8:	4616      	mov	r6, r2
 80a3eea:	4698      	mov	r8, r3
    int ret = status() ? socket_send_ex(d_->sock, buffer, size, 0, timeout, nullptr) : -1;
 80a3eec:	f7ff ffd6 	bl	80a3e9c <_ZN9TCPClient6statusEv>
 80a3ef0:	b170      	cbz	r0, 80a3f10 <_ZN9TCPClient5writeEPKhjm+0x34>
 80a3ef2:	e9cd 8700 	strd	r8, r7, [sp]
 80a3ef6:	6960      	ldr	r0, [r4, #20]
 80a3ef8:	463b      	mov	r3, r7
 80a3efa:	4632      	mov	r2, r6
 80a3efc:	4629      	mov	r1, r5
 80a3efe:	6800      	ldr	r0, [r0, #0]
 80a3f00:	f7ff fbd0 	bl	80a36a4 <socket_send_ex>
    if (ret < 0) {
 80a3f04:	2800      	cmp	r0, #0
 80a3f06:	da00      	bge.n	80a3f0a <_ZN9TCPClient5writeEPKhjm+0x2e>
 80a3f08:	6060      	str	r0, [r4, #4]
}
 80a3f0a:	b002      	add	sp, #8
 80a3f0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    int ret = status() ? socket_send_ex(d_->sock, buffer, size, 0, timeout, nullptr) : -1;
 80a3f10:	f04f 30ff 	mov.w	r0, #4294967295
 80a3f14:	e7f8      	b.n	80a3f08 <_ZN9TCPClient5writeEPKhjm+0x2c>

080a3f16 <_ZN9TCPClient9connectedEv>:
{
 80a3f16:	b570      	push	{r4, r5, r6, lr}
 80a3f18:	4605      	mov	r5, r0
  bool rv = (status() || bufferCount());
 80a3f1a:	f7ff ffbf 	bl	80a3e9c <_ZN9TCPClient6statusEv>
 80a3f1e:	b9e8      	cbnz	r0, 80a3f5c <_ZN9TCPClient9connectedEv+0x46>
 80a3f20:	696b      	ldr	r3, [r5, #20]
 80a3f22:	f8b3 1086 	ldrh.w	r1, [r3, #134]	; 0x86
 80a3f26:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 80a3f2a:	4291      	cmp	r1, r2
 80a3f2c:	d116      	bne.n	80a3f5c <_ZN9TCPClient9connectedEv+0x46>
   return socket_handle_valid(sd);
 80a3f2e:	6818      	ldr	r0, [r3, #0]
 80a3f30:	f7ff fb88 	bl	80a3644 <socket_handle_valid>
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
 80a3f34:	b908      	cbnz	r0, 80a3f3a <_ZN9TCPClient9connectedEv+0x24>
  bool rv = (status() || bufferCount());
 80a3f36:	2000      	movs	r0, #0
}
 80a3f38:	bd70      	pop	{r4, r5, r6, pc}
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
 80a3f3a:	696b      	ldr	r3, [r5, #20]
 80a3f3c:	6818      	ldr	r0, [r3, #0]
 80a3f3e:	f7ff fb79 	bl	80a3634 <socket_active_status>
 80a3f42:	2801      	cmp	r0, #1
 80a3f44:	4604      	mov	r4, r0
 80a3f46:	d1f6      	bne.n	80a3f36 <_ZN9TCPClient9connectedEv+0x20>
      rv = available(); // Try CC3000
 80a3f48:	682b      	ldr	r3, [r5, #0]
 80a3f4a:	4628      	mov	r0, r5
 80a3f4c:	691b      	ldr	r3, [r3, #16]
 80a3f4e:	4798      	blx	r3
      if (!rv) {        // No more Data and CLOSE_WAIT
 80a3f50:	b930      	cbnz	r0, 80a3f60 <_ZN9TCPClient9connectedEv+0x4a>
          stop();       // Close our side
 80a3f52:	682b      	ldr	r3, [r5, #0]
 80a3f54:	4628      	mov	r0, r5
 80a3f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a3f58:	4798      	blx	r3
 80a3f5a:	e7ec      	b.n	80a3f36 <_ZN9TCPClient9connectedEv+0x20>
  bool rv = (status() || bufferCount());
 80a3f5c:	2001      	movs	r0, #1
 80a3f5e:	e7eb      	b.n	80a3f38 <_ZN9TCPClient9connectedEv+0x22>
      rv = available(); // Try CC3000
 80a3f60:	4620      	mov	r0, r4
 80a3f62:	e7e9      	b.n	80a3f38 <_ZN9TCPClient9connectedEv+0x22>

080a3f64 <_ZN9TCPClient4DataC1Em>:

TCPClient::Data::Data(sock_handle_t sock)
        : sock(sock),
          offset(0),
          total(0) {
 80a3f64:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
 80a3f66:	b510      	push	{r4, lr}
 80a3f68:	4604      	mov	r4, r0
          total(0) {
 80a3f6a:	6001      	str	r1, [r0, #0]
 80a3f6c:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
 80a3f70:	3088      	adds	r0, #136	; 0x88
 80a3f72:	f000 fe19 	bl	80a4ba8 <_ZN9IPAddressC1Ev>
}
 80a3f76:	4620      	mov	r0, r4
 80a3f78:	bd10      	pop	{r4, pc}
	...

080a3f7c <_ZN9TCPClientC1Em>:
TCPClient::TCPClient(sock_handle_t sock) :
 80a3f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a3f7e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a3f82:	2300      	movs	r3, #0
 80a3f84:	e9c0 3201 	strd	r3, r2, [r0, #4]
        d_(std::make_shared<Data>(sock))
 80a3f88:	4a0d      	ldr	r2, [pc, #52]	; (80a3fc0 <_ZN9TCPClientC1Em+0x44>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
 80a3f8a:	6103      	str	r3, [r0, #16]
 80a3f8c:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
 80a3f8e:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock) :
 80a3f90:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80a3f92:	20ac      	movs	r0, #172	; 0xac
 80a3f94:	460e      	mov	r6, r1
 80a3f96:	f7fc f87e 	bl	80a0096 <_Znwj>
	  auto __pi = ::new (__mem)
 80a3f9a:	1e05      	subs	r5, r0, #0
 80a3f9c:	f105 070c 	add.w	r7, r5, #12
 80a3fa0:	d008      	beq.n	80a3fb4 <_ZN9TCPClientC1Em+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
 80a3fa2:	2301      	movs	r3, #1
 80a3fa4:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
 80a3fa8:	4b06      	ldr	r3, [pc, #24]	; (80a3fc4 <_ZN9TCPClientC1Em+0x48>)
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80a3faa:	4631      	mov	r1, r6
 80a3fac:	4638      	mov	r0, r7
 80a3fae:	602b      	str	r3, [r5, #0]
 80a3fb0:	f7ff ffd8 	bl	80a3f64 <_ZN9TCPClient4DataC1Em>
  flush_buffer();
 80a3fb4:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
 80a3fb6:	e9c4 7505 	strd	r7, r5, [r4, #20]
 80a3fba:	f7ff fea2 	bl	80a3d02 <_ZN9TCPClient12flush_bufferEv>
}
 80a3fbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a3fc0:	080a86d4 	.word	0x080a86d4
 80a3fc4:	080a86b0 	.word	0x080a86b0

080a3fc8 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
 80a3fc8:	b510      	push	{r4, lr}
 80a3fca:	4604      	mov	r4, r0
 80a3fcc:	f7ff fb62 	bl	80a3694 <socket_handle_invalid>
 80a3fd0:	4601      	mov	r1, r0
 80a3fd2:	4620      	mov	r0, r4
 80a3fd4:	f7ff ffd2 	bl	80a3f7c <_ZN9TCPClientC1Em>
}
 80a3fd8:	4620      	mov	r0, r4
 80a3fda:	bd10      	pop	{r4, pc}

080a3fdc <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
 80a3fdc:	b510      	push	{r4, lr}
 80a3fde:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
 80a3fe0:	6800      	ldr	r0, [r0, #0]
 80a3fe2:	f7ff fb2f 	bl	80a3644 <socket_handle_valid>
 80a3fe6:	b110      	cbz	r0, 80a3fee <_ZN9TCPClient4DataD1Ev+0x12>
        socket_close(sock);
 80a3fe8:	6820      	ldr	r0, [r4, #0]
 80a3fea:	f7ff fb4b 	bl	80a3684 <socket_close>
    }
}
 80a3fee:	4620      	mov	r0, r4
 80a3ff0:	bd10      	pop	{r4, pc}

080a3ff2 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(noexcept( __p->~_Up()))
	{ __p->~_Up(); }
 80a3ff2:	300c      	adds	r0, #12
 80a3ff4:	f7ff bff2 	b.w	80a3fdc <_ZN9TCPClient4DataD1Ev>

080a3ff8 <_ZN9TCPClient7connectEPKctm>:
{
 80a3ff8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a3ffc:	461f      	mov	r7, r3
    stop();
 80a3ffe:	6803      	ldr	r3, [r0, #0]
{
 80a4000:	b08f      	sub	sp, #60	; 0x3c
    stop();
 80a4002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
{
 80a4004:	4606      	mov	r6, r0
 80a4006:	460d      	mov	r5, r1
 80a4008:	4690      	mov	r8, r2
    stop();
 80a400a:	4798      	blx	r3
    if (Network.ready())
 80a400c:	4813      	ldr	r0, [pc, #76]	; (80a405c <_ZN9TCPClient7connectEPKctm+0x64>)
 80a400e:	f001 f8ca 	bl	80a51a6 <_ZN5spark12NetworkClass5readyEv>
 80a4012:	b1f0      	cbz	r0, 80a4052 <_ZN9TCPClient7connectEPKctm+0x5a>
        IPAddress ip_addr;
 80a4014:	a802      	add	r0, sp, #8
 80a4016:	f000 fdc7 	bl	80a4ba8 <_ZN9IPAddressC1Ev>
        if (inet_gethostbyname(host, strlen(host), ip_addr, nif, NULL) == 0) {
 80a401a:	4628      	mov	r0, r5
 80a401c:	f003 fb52 	bl	80a76c4 <strlen>
 80a4020:	2400      	movs	r4, #0
 80a4022:	b281      	uxth	r1, r0
 80a4024:	463b      	mov	r3, r7
 80a4026:	4628      	mov	r0, r5
 80a4028:	9400      	str	r4, [sp, #0]
 80a402a:	aa03      	add	r2, sp, #12
 80a402c:	f7ff fba2 	bl	80a3774 <inet_gethostbyname>
 80a4030:	b990      	cbnz	r0, 80a4058 <_ZN9TCPClient7connectEPKctm+0x60>
            return connect(ip_addr, port, nif);
 80a4032:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
 80a4034:	ad09      	add	r5, sp, #36	; 0x24
 80a4036:	f8d3 9020 	ldr.w	r9, [r3, #32]
 80a403a:	4b09      	ldr	r3, [pc, #36]	; (80a4060 <_ZN9TCPClient7connectEPKctm+0x68>)
 80a403c:	ac03      	add	r4, sp, #12
 80a403e:	9308      	str	r3, [sp, #32]
 80a4040:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a4042:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a4044:	6823      	ldr	r3, [r4, #0]
 80a4046:	4642      	mov	r2, r8
 80a4048:	702b      	strb	r3, [r5, #0]
 80a404a:	4630      	mov	r0, r6
 80a404c:	463b      	mov	r3, r7
 80a404e:	a908      	add	r1, sp, #32
 80a4050:	47c8      	blx	r9
}
 80a4052:	b00f      	add	sp, #60	; 0x3c
 80a4054:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return 0; // error, could not connect
 80a4058:	4620      	mov	r0, r4
 80a405a:	e7fa      	b.n	80a4052 <_ZN9TCPClient7connectEPKctm+0x5a>
 80a405c:	20000618 	.word	0x20000618
 80a4060:	080a8758 	.word	0x080a8758

080a4064 <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
 80a4064:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a4068:	4607      	mov	r7, r0
 80a406a:	460d      	mov	r5, r1
 80a406c:	4616      	mov	r6, r2
 80a406e:	461c      	mov	r4, r3
    bool negative = val<0;
    if (negative) {
 80a4070:	2200      	movs	r2, #0
 80a4072:	2300      	movs	r3, #0
 80a4074:	4638      	mov	r0, r7
 80a4076:	4629      	mov	r1, r5
 80a4078:	f001 ff20 	bl	80a5ebc <__aeabi_dcmplt>
 80a407c:	b120      	cbz	r0, 80a4088 <_Z4dtoadhPc+0x24>
        val = -val;
        *sout++ = '-';
 80a407e:	232d      	movs	r3, #45	; 0x2d
        val = -val;
 80a4080:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
        *sout++ = '-';
 80a4084:	f804 3b01 	strb.w	r3, [r4], #1
 80a4088:	2300      	movs	r3, #0
    }
    long scale = 1;
 80a408a:	f04f 0a01 	mov.w	sl, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
 80a408e:	220a      	movs	r2, #10
    for (uint8_t i=0; i<prec; i++)
 80a4090:	b2d9      	uxtb	r1, r3
 80a4092:	428e      	cmp	r6, r1
 80a4094:	d903      	bls.n	80a409e <_Z4dtoadhPc+0x3a>
        scale *= 10;
 80a4096:	fb02 fa0a 	mul.w	sl, r2, sl
    for (uint8_t i=0; i<prec; i++)
 80a409a:	3301      	adds	r3, #1
 80a409c:	e7f8      	b.n	80a4090 <_Z4dtoadhPc+0x2c>
    val *= scale;   // capture all the significant digits
 80a409e:	4650      	mov	r0, sl
 80a40a0:	f001 fc30 	bl	80a5904 <__aeabi_i2d>
 80a40a4:	463a      	mov	r2, r7
 80a40a6:	462b      	mov	r3, r5
 80a40a8:	f001 fc96 	bl	80a59d8 <__aeabi_dmul>
 80a40ac:	4680      	mov	r8, r0
 80a40ae:	4689      	mov	r9, r1
    uint64_t fixed = uint64_t(val);
 80a40b0:	f002 faaa 	bl	80a6608 <__aeabi_d2ulz>
 80a40b4:	4605      	mov	r5, r0
 80a40b6:	460f      	mov	r7, r1
    if ((val-fixed)>=0.5)    // round last digit
 80a40b8:	f001 fc58 	bl	80a596c <__aeabi_ul2d>
 80a40bc:	4602      	mov	r2, r0
 80a40be:	460b      	mov	r3, r1
 80a40c0:	4640      	mov	r0, r8
 80a40c2:	4649      	mov	r1, r9
 80a40c4:	f001 fad0 	bl	80a5668 <__aeabi_dsub>
 80a40c8:	2200      	movs	r2, #0
 80a40ca:	4b12      	ldr	r3, [pc, #72]	; (80a4114 <_Z4dtoadhPc+0xb0>)
 80a40cc:	f001 ff0a 	bl	80a5ee4 <__aeabi_dcmpge>
 80a40d0:	b110      	cbz	r0, 80a40d8 <_Z4dtoadhPc+0x74>
        fixed++;
 80a40d2:	3501      	adds	r5, #1
 80a40d4:	f147 0700 	adc.w	r7, r7, #0

    unsigned long first = (unsigned long)(fixed / scale);
 80a40d8:	4652      	mov	r2, sl
 80a40da:	4628      	mov	r0, r5
 80a40dc:	4639      	mov	r1, r7
 80a40de:	17d3      	asrs	r3, r2, #31
 80a40e0:	f002 fa46 	bl	80a6570 <__aeabi_uldivmod>
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
 80a40e4:	2301      	movs	r3, #1
 80a40e6:	4615      	mov	r5, r2
 80a40e8:	4621      	mov	r1, r4
 80a40ea:	220a      	movs	r2, #10
 80a40ec:	f7ff fcf7 	bl	80a3ade <ultoa>
    if (prec) {
 80a40f0:	b16e      	cbz	r6, 80a410e <_Z4dtoadhPc+0xaa>
        sout += strlen(sout);
 80a40f2:	4620      	mov	r0, r4
 80a40f4:	f003 fae6 	bl	80a76c4 <strlen>
        *sout++ = '.';
 80a40f8:	232e      	movs	r3, #46	; 0x2e
        sout += strlen(sout);
 80a40fa:	1821      	adds	r1, r4, r0
        *sout++ = '.';
 80a40fc:	5423      	strb	r3, [r4, r0]
        ultoa(second, sout, 10, prec);
 80a40fe:	220a      	movs	r2, #10
 80a4100:	4633      	mov	r3, r6
 80a4102:	4628      	mov	r0, r5
    }
}
 80a4104:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        ultoa(second, sout, 10, prec);
 80a4108:	3101      	adds	r1, #1
 80a410a:	f7ff bce8 	b.w	80a3ade <ultoa>
}
 80a410e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a4112:	bf00      	nop
 80a4114:	3fe00000 	.word	0x3fe00000

080a4118 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a4118:	b510      	push	{r4, lr}
 80a411a:	4604      	mov	r4, r0
{
	free(buffer);
 80a411c:	6800      	ldr	r0, [r0, #0]
 80a411e:	f7ff fc17 	bl	80a3950 <free>
}
 80a4122:	4620      	mov	r0, r4
 80a4124:	bd10      	pop	{r4, pc}

080a4126 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a4126:	b510      	push	{r4, lr}
 80a4128:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a412a:	6800      	ldr	r0, [r0, #0]
 80a412c:	b108      	cbz	r0, 80a4132 <_ZN6String10invalidateEv+0xc>
 80a412e:	f7ff fc0f 	bl	80a3950 <free>
	buffer = NULL;
 80a4132:	2300      	movs	r3, #0
	capacity = len = 0;
 80a4134:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
 80a4138:	6023      	str	r3, [r4, #0]
}
 80a413a:	bd10      	pop	{r4, pc}

080a413c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a413c:	b538      	push	{r3, r4, r5, lr}
 80a413e:	4604      	mov	r4, r0
 80a4140:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a4142:	6800      	ldr	r0, [r0, #0]
 80a4144:	3101      	adds	r1, #1
 80a4146:	f7ff fc0b 	bl	80a3960 <realloc>
	if (newbuffer) {
 80a414a:	b110      	cbz	r0, 80a4152 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a414c:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
 80a4150:	2001      	movs	r0, #1
	}
	return 0;
}
 80a4152:	bd38      	pop	{r3, r4, r5, pc}

080a4154 <_ZN6String7reserveEj>:
{
 80a4154:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a4156:	6803      	ldr	r3, [r0, #0]
{
 80a4158:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a415a:	b123      	cbz	r3, 80a4166 <_ZN6String7reserveEj+0x12>
 80a415c:	6843      	ldr	r3, [r0, #4]
 80a415e:	428b      	cmp	r3, r1
 80a4160:	d301      	bcc.n	80a4166 <_ZN6String7reserveEj+0x12>
 80a4162:	2001      	movs	r0, #1
}
 80a4164:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
 80a4166:	4620      	mov	r0, r4
 80a4168:	f7ff ffe8 	bl	80a413c <_ZN6String12changeBufferEj>
 80a416c:	2800      	cmp	r0, #0
 80a416e:	d0f9      	beq.n	80a4164 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
 80a4170:	68a3      	ldr	r3, [r4, #8]
 80a4172:	2b00      	cmp	r3, #0
 80a4174:	d1f5      	bne.n	80a4162 <_ZN6String7reserveEj+0xe>
 80a4176:	6822      	ldr	r2, [r4, #0]
 80a4178:	7013      	strb	r3, [r2, #0]
 80a417a:	e7f2      	b.n	80a4162 <_ZN6String7reserveEj+0xe>

080a417c <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a417c:	b570      	push	{r4, r5, r6, lr}
 80a417e:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a4180:	4611      	mov	r1, r2
{
 80a4182:	4604      	mov	r4, r0
 80a4184:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a4186:	f7ff ffe5 	bl	80a4154 <_ZN6String7reserveEj>
 80a418a:	b920      	cbnz	r0, 80a4196 <_ZN6String4copyEPKcj+0x1a>
		invalidate();
 80a418c:	4620      	mov	r0, r4
 80a418e:	f7ff ffca 	bl	80a4126 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
 80a4192:	4620      	mov	r0, r4
 80a4194:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(buffer, cstr, length);
 80a4196:	462a      	mov	r2, r5
 80a4198:	4631      	mov	r1, r6
 80a419a:	6820      	ldr	r0, [r4, #0]
	len = length;
 80a419c:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a419e:	f002 fce3 	bl	80a6b68 <memcpy>
	buffer[len] = 0;
 80a41a2:	2100      	movs	r1, #0
 80a41a4:	6822      	ldr	r2, [r4, #0]
 80a41a6:	68a3      	ldr	r3, [r4, #8]
 80a41a8:	54d1      	strb	r1, [r2, r3]
	return *this;
 80a41aa:	e7f2      	b.n	80a4192 <_ZN6String4copyEPKcj+0x16>

080a41ac <_ZN6StringC1EPKc>:
String::String(const char *cstr)
 80a41ac:	b538      	push	{r3, r4, r5, lr}
	buffer = NULL;
 80a41ae:	2300      	movs	r3, #0
String::String(const char *cstr)
 80a41b0:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a41b2:	460d      	mov	r5, r1
	capacity = 0;
 80a41b4:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 80a41b8:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a41ba:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
 80a41bc:	b139      	cbz	r1, 80a41ce <_ZN6StringC1EPKc+0x22>
 80a41be:	4608      	mov	r0, r1
 80a41c0:	f003 fa80 	bl	80a76c4 <strlen>
 80a41c4:	4629      	mov	r1, r5
 80a41c6:	4602      	mov	r2, r0
 80a41c8:	4620      	mov	r0, r4
 80a41ca:	f7ff ffd7 	bl	80a417c <_ZN6String4copyEPKcj>
}
 80a41ce:	4620      	mov	r0, r4
 80a41d0:	bd38      	pop	{r3, r4, r5, pc}

080a41d2 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 80a41d2:	b538      	push	{r3, r4, r5, lr}
 80a41d4:	4605      	mov	r5, r0
	if (buffer) {
 80a41d6:	6800      	ldr	r0, [r0, #0]
{
 80a41d8:	460c      	mov	r4, r1
	if (buffer) {
 80a41da:	b168      	cbz	r0, 80a41f8 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
 80a41dc:	686a      	ldr	r2, [r5, #4]
 80a41de:	688b      	ldr	r3, [r1, #8]
 80a41e0:	429a      	cmp	r2, r3
 80a41e2:	d307      	bcc.n	80a41f4 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
 80a41e4:	6809      	ldr	r1, [r1, #0]
 80a41e6:	f002 fd03 	bl	80a6bf0 <strcpy>
			len = rhs.len;
 80a41ea:	68a3      	ldr	r3, [r4, #8]
 80a41ec:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
 80a41ee:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
 80a41f0:	60a3      	str	r3, [r4, #8]
}
 80a41f2:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
 80a41f4:	f7ff fbac 	bl	80a3950 <free>
	buffer = rhs.buffer;
 80a41f8:	6823      	ldr	r3, [r4, #0]
 80a41fa:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
 80a41fc:	6863      	ldr	r3, [r4, #4]
 80a41fe:	606b      	str	r3, [r5, #4]
	len = rhs.len;
 80a4200:	68a3      	ldr	r3, [r4, #8]
 80a4202:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
 80a4204:	2300      	movs	r3, #0
	rhs.capacity = 0;
 80a4206:	e9c4 3300 	strd	r3, r3, [r4]
 80a420a:	e7f1      	b.n	80a41f0 <_ZN6String4moveERS_+0x1e>

080a420c <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 80a420c:	4288      	cmp	r0, r1
{
 80a420e:	b510      	push	{r4, lr}
 80a4210:	460b      	mov	r3, r1
 80a4212:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 80a4214:	d004      	beq.n	80a4220 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 80a4216:	6809      	ldr	r1, [r1, #0]
 80a4218:	b121      	cbz	r1, 80a4224 <_ZN6StringaSERKS_+0x18>
 80a421a:	689a      	ldr	r2, [r3, #8]
 80a421c:	f7ff ffae 	bl	80a417c <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 80a4220:	4620      	mov	r0, r4
 80a4222:	bd10      	pop	{r4, pc}
	else invalidate();
 80a4224:	f7ff ff7f 	bl	80a4126 <_ZN6String10invalidateEv>
 80a4228:	e7fa      	b.n	80a4220 <_ZN6StringaSERKS_+0x14>

080a422a <_ZN6StringC1ERKS_>:
	buffer = NULL;
 80a422a:	2300      	movs	r3, #0
String::String(const String &value)
 80a422c:	b510      	push	{r4, lr}
 80a422e:	4604      	mov	r4, r0
	capacity = 0;
 80a4230:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 80a4234:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a4236:	7303      	strb	r3, [r0, #12]
	*this = value;
 80a4238:	f7ff ffe8 	bl	80a420c <_ZN6StringaSERKS_>
}
 80a423c:	4620      	mov	r0, r4
 80a423e:	bd10      	pop	{r4, pc}

080a4240 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
 80a4240:	4288      	cmp	r0, r1
{
 80a4242:	b510      	push	{r4, lr}
 80a4244:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
 80a4246:	d001      	beq.n	80a424c <_ZN6StringaSEOS_+0xc>
 80a4248:	f7ff ffc3 	bl	80a41d2 <_ZN6String4moveERS_>
	return *this;
}
 80a424c:	4620      	mov	r0, r4
 80a424e:	bd10      	pop	{r4, pc}

080a4250 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 80a4250:	b538      	push	{r3, r4, r5, lr}
 80a4252:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a4254:	460c      	mov	r4, r1
 80a4256:	b149      	cbz	r1, 80a426c <_ZN6StringaSEPKc+0x1c>
 80a4258:	4608      	mov	r0, r1
 80a425a:	f003 fa33 	bl	80a76c4 <strlen>
 80a425e:	4621      	mov	r1, r4
 80a4260:	4602      	mov	r2, r0
 80a4262:	4628      	mov	r0, r5
 80a4264:	f7ff ff8a 	bl	80a417c <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 80a4268:	4628      	mov	r0, r5
 80a426a:	bd38      	pop	{r3, r4, r5, pc}
	else invalidate();
 80a426c:	f7ff ff5b 	bl	80a4126 <_ZN6String10invalidateEv>
 80a4270:	e7fa      	b.n	80a4268 <_ZN6StringaSEPKc+0x18>

080a4272 <_ZN6StringC1Ehh>:
String::String(unsigned char value, unsigned char base)
 80a4272:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80a4274:	4604      	mov	r4, r0
	buffer = NULL;
 80a4276:	2300      	movs	r3, #0
String::String(unsigned char value, unsigned char base)
 80a4278:	4608      	mov	r0, r1
	capacity = 0;
 80a427a:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
 80a427e:	60a3      	str	r3, [r4, #8]
	flags = 0;
 80a4280:	7323      	strb	r3, [r4, #12]
	utoa(value, buf, base);
 80a4282:	a901      	add	r1, sp, #4
 80a4284:	f7ff fc6a 	bl	80a3b5c <utoa>
	*this = buf;
 80a4288:	4620      	mov	r0, r4
 80a428a:	a901      	add	r1, sp, #4
 80a428c:	f7ff ffe0 	bl	80a4250 <_ZN6StringaSEPKc>
}
 80a4290:	4620      	mov	r0, r4
 80a4292:	b004      	add	sp, #16
 80a4294:	bd10      	pop	{r4, pc}

080a4296 <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
 80a4296:	b510      	push	{r4, lr}
	buffer = NULL;
 80a4298:	2300      	movs	r3, #0
String::String(int value, unsigned char base)
 80a429a:	4604      	mov	r4, r0
 80a429c:	b08a      	sub	sp, #40	; 0x28
	capacity = 0;
 80a429e:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
 80a42a2:	60a3      	str	r3, [r4, #8]
	flags = 0;
 80a42a4:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
 80a42a6:	4608      	mov	r0, r1
	itoa(value, buf, base);
 80a42a8:	a901      	add	r1, sp, #4
 80a42aa:	f7ff fc42 	bl	80a3b32 <itoa>
	*this = buf;
 80a42ae:	4620      	mov	r0, r4
 80a42b0:	a901      	add	r1, sp, #4
 80a42b2:	f7ff ffcd 	bl	80a4250 <_ZN6StringaSEPKc>
}
 80a42b6:	4620      	mov	r0, r4
 80a42b8:	b00a      	add	sp, #40	; 0x28
 80a42ba:	bd10      	pop	{r4, pc}

080a42bc <_ZN6StringC1Ejh>:
String::String(unsigned int value, unsigned char base)
 80a42bc:	b510      	push	{r4, lr}
	buffer = NULL;
 80a42be:	2300      	movs	r3, #0
String::String(unsigned int value, unsigned char base)
 80a42c0:	4604      	mov	r4, r0
 80a42c2:	b08a      	sub	sp, #40	; 0x28
	capacity = 0;
 80a42c4:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
 80a42c8:	60a3      	str	r3, [r4, #8]
	flags = 0;
 80a42ca:	7323      	strb	r3, [r4, #12]
String::String(unsigned int value, unsigned char base)
 80a42cc:	4608      	mov	r0, r1
	utoa(value, buf, base);
 80a42ce:	a901      	add	r1, sp, #4
 80a42d0:	f7ff fc44 	bl	80a3b5c <utoa>
	*this = buf;
 80a42d4:	4620      	mov	r0, r4
 80a42d6:	a901      	add	r1, sp, #4
 80a42d8:	f7ff ffba 	bl	80a4250 <_ZN6StringaSEPKc>
}
 80a42dc:	4620      	mov	r0, r4
 80a42de:	b00a      	add	sp, #40	; 0x28
 80a42e0:	bd10      	pop	{r4, pc}

080a42e2 <_ZN6StringC1Efi>:
	buffer = NULL;
 80a42e2:	2300      	movs	r3, #0
String::String(float value, int decimalPlaces)
 80a42e4:	b530      	push	{r4, r5, lr}
 80a42e6:	4604      	mov	r4, r0
 80a42e8:	b08b      	sub	sp, #44	; 0x2c
	capacity = 0;
 80a42ea:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 80a42ee:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a42f0:	7303      	strb	r3, [r0, #12]
	dtoa(value, decimalPlaces, buf);
 80a42f2:	b2d5      	uxtb	r5, r2
 80a42f4:	4608      	mov	r0, r1
 80a42f6:	f001 fb17 	bl	80a5928 <__aeabi_f2d>
 80a42fa:	462a      	mov	r2, r5
 80a42fc:	ab01      	add	r3, sp, #4
 80a42fe:	f7ff feb1 	bl	80a4064 <_Z4dtoadhPc>
        *this = buf;
 80a4302:	4620      	mov	r0, r4
 80a4304:	a901      	add	r1, sp, #4
 80a4306:	f7ff ffa3 	bl	80a4250 <_ZN6StringaSEPKc>
}
 80a430a:	4620      	mov	r0, r4
 80a430c:	b00b      	add	sp, #44	; 0x2c
 80a430e:	bd30      	pop	{r4, r5, pc}

080a4310 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
 80a4310:	b570      	push	{r4, r5, r6, lr}
 80a4312:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
 80a4314:	460e      	mov	r6, r1
 80a4316:	b909      	cbnz	r1, 80a431c <_ZN6String6concatEPKcj+0xc>
 80a4318:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
 80a431a:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
 80a431c:	b16a      	cbz	r2, 80a433a <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
 80a431e:	6884      	ldr	r4, [r0, #8]
 80a4320:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
 80a4322:	4621      	mov	r1, r4
 80a4324:	f7ff ff16 	bl	80a4154 <_ZN6String7reserveEj>
 80a4328:	2800      	cmp	r0, #0
 80a432a:	d0f5      	beq.n	80a4318 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
 80a432c:	6828      	ldr	r0, [r5, #0]
 80a432e:	68ab      	ldr	r3, [r5, #8]
 80a4330:	4631      	mov	r1, r6
 80a4332:	4418      	add	r0, r3
 80a4334:	f002 fc5c 	bl	80a6bf0 <strcpy>
	len = newlen;
 80a4338:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
 80a433a:	2001      	movs	r0, #1
 80a433c:	e7ed      	b.n	80a431a <_ZN6String6concatEPKcj+0xa>

080a433e <_ZN6String6concatERKS_>:
	return concat(s.buffer, s.len);
 80a433e:	688a      	ldr	r2, [r1, #8]
 80a4340:	6809      	ldr	r1, [r1, #0]
 80a4342:	f7ff bfe5 	b.w	80a4310 <_ZN6String6concatEPKcj>

080a4346 <_ZN6String6concatEc>:

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
 80a4346:	2300      	movs	r3, #0
{
 80a4348:	b507      	push	{r0, r1, r2, lr}
	return concat(buf, 1);
 80a434a:	2201      	movs	r2, #1
	buf[0] = c;
 80a434c:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
 80a4350:	a901      	add	r1, sp, #4
	buf[1] = 0;
 80a4352:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
 80a4356:	f7ff ffdb 	bl	80a4310 <_ZN6String6concatEPKcj>
}
 80a435a:	b003      	add	sp, #12
 80a435c:	f85d fb04 	ldr.w	pc, [sp], #4

080a4360 <_ZN6String6concatEi>:
	itoa(num, buf, 10);
	return concat(buf, strlen(buf));
}

unsigned char String::concat(int num)
{
 80a4360:	b513      	push	{r0, r1, r4, lr}
	char buf[7];
	itoa(num, buf, 10);
 80a4362:	220a      	movs	r2, #10
{
 80a4364:	4604      	mov	r4, r0
 80a4366:	4608      	mov	r0, r1
	itoa(num, buf, 10);
 80a4368:	4669      	mov	r1, sp
 80a436a:	f7ff fbe2 	bl	80a3b32 <itoa>
	return concat(buf, strlen(buf));
 80a436e:	4668      	mov	r0, sp
 80a4370:	f003 f9a8 	bl	80a76c4 <strlen>
 80a4374:	4669      	mov	r1, sp
 80a4376:	4602      	mov	r2, r0
 80a4378:	4620      	mov	r0, r4
 80a437a:	f7ff ffc9 	bl	80a4310 <_ZN6String6concatEPKcj>
}
 80a437e:	b002      	add	sp, #8
 80a4380:	bd10      	pop	{r4, pc}

080a4382 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 80a4382:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 80a4384:	688a      	ldr	r2, [r1, #8]
 80a4386:	6809      	ldr	r1, [r1, #0]
{
 80a4388:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 80a438a:	f7ff ffc1 	bl	80a4310 <_ZN6String6concatEPKcj>
 80a438e:	b910      	cbnz	r0, 80a4396 <_ZplRK15StringSumHelperRK6String+0x14>
 80a4390:	4620      	mov	r0, r4
 80a4392:	f7ff fec8 	bl	80a4126 <_ZN6String10invalidateEv>
	return a;
}
 80a4396:	4620      	mov	r0, r4
 80a4398:	bd10      	pop	{r4, pc}

080a439a <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
 80a439a:	b538      	push	{r3, r4, r5, lr}
 80a439c:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
 80a439e:	460d      	mov	r5, r1
 80a43a0:	b921      	cbnz	r1, 80a43ac <_ZplRK15StringSumHelperPKc+0x12>
 80a43a2:	4620      	mov	r0, r4
 80a43a4:	f7ff febf 	bl	80a4126 <_ZN6String10invalidateEv>
	return a;
}
 80a43a8:	4620      	mov	r0, r4
 80a43aa:	bd38      	pop	{r3, r4, r5, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
 80a43ac:	4608      	mov	r0, r1
 80a43ae:	f003 f989 	bl	80a76c4 <strlen>
 80a43b2:	4629      	mov	r1, r5
 80a43b4:	4602      	mov	r2, r0
 80a43b6:	4620      	mov	r0, r4
 80a43b8:	f7ff ffaa 	bl	80a4310 <_ZN6String6concatEPKcj>
 80a43bc:	2800      	cmp	r0, #0
 80a43be:	d0f0      	beq.n	80a43a2 <_ZplRK15StringSumHelperPKc+0x8>
 80a43c0:	e7f2      	b.n	80a43a8 <_ZplRK15StringSumHelperPKc+0xe>

080a43c2 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 80a43c2:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
 80a43c4:	6882      	ldr	r2, [r0, #8]
 80a43c6:	b93a      	cbnz	r2, 80a43d8 <_ZNK6String6equalsEPKc+0x16>
 80a43c8:	b121      	cbz	r1, 80a43d4 <_ZNK6String6equalsEPKc+0x12>
 80a43ca:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
 80a43cc:	fab0 f080 	clz	r0, r0
 80a43d0:	0940      	lsrs	r0, r0, #5
 80a43d2:	e000      	b.n	80a43d6 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
 80a43d4:	2001      	movs	r0, #1
}
 80a43d6:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
 80a43d8:	6800      	ldr	r0, [r0, #0]
 80a43da:	b909      	cbnz	r1, 80a43e0 <_ZNK6String6equalsEPKc+0x1e>
 80a43dc:	7800      	ldrb	r0, [r0, #0]
 80a43de:	e7f5      	b.n	80a43cc <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
 80a43e0:	f002 fbfc 	bl	80a6bdc <strcmp>
 80a43e4:	e7f2      	b.n	80a43cc <_ZNK6String6equalsEPKc+0xa>
	...

080a43e8 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
 80a43e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a43ea:	461d      	mov	r5, r3
	if (left > right) {
 80a43ec:	429a      	cmp	r2, r3
 80a43ee:	bf88      	it	hi
 80a43f0:	4613      	movhi	r3, r2
{
 80a43f2:	460f      	mov	r7, r1
 80a43f4:	4614      	mov	r4, r2
	if (left > right) {
 80a43f6:	bf88      	it	hi
 80a43f8:	462c      	movhi	r4, r5
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
 80a43fa:	490b      	ldr	r1, [pc, #44]	; (80a4428 <_ZNK6String9substringEjj+0x40>)
	if (left > right) {
 80a43fc:	bf88      	it	hi
 80a43fe:	461d      	movhi	r5, r3
{
 80a4400:	4606      	mov	r6, r0
	String out;
 80a4402:	f7ff fed3 	bl	80a41ac <_ZN6StringC1EPKc>
	if (left > len) return out;
 80a4406:	68ba      	ldr	r2, [r7, #8]
 80a4408:	42a2      	cmp	r2, r4
 80a440a:	d30a      	bcc.n	80a4422 <_ZNK6String9substringEjj+0x3a>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
 80a440c:	6839      	ldr	r1, [r7, #0]
 80a440e:	42aa      	cmp	r2, r5
 80a4410:	bf94      	ite	ls
 80a4412:	ebc4 0202 	rsbls	r2, r4, r2
 80a4416:	ebc4 0205 	rsbhi	r2, r4, r5
 80a441a:	4630      	mov	r0, r6
 80a441c:	4421      	add	r1, r4
 80a441e:	f7ff fead 	bl	80a417c <_ZN6String4copyEPKcj>
	return out;
}
 80a4422:	4630      	mov	r0, r6
 80a4424:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a4426:	bf00      	nop
 80a4428:	080a898c 	.word	0x080a898c

080a442c <_ZNK6String9substringEj>:
{
 80a442c:	b510      	push	{r4, lr}
 80a442e:	4604      	mov	r4, r0
	return substring(left, len);
 80a4430:	688b      	ldr	r3, [r1, #8]
 80a4432:	f7ff ffd9 	bl	80a43e8 <_ZNK6String9substringEjj>
}
 80a4436:	4620      	mov	r0, r4
 80a4438:	bd10      	pop	{r4, pc}

080a443a <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
 80a443a:	6800      	ldr	r0, [r0, #0]
 80a443c:	b108      	cbz	r0, 80a4442 <_ZNK6String5toIntEv+0x8>
 80a443e:	f002 ba8b 	b.w	80a6958 <atol>
	return 0;
}
 80a4442:	4770      	bx	lr

080a4444 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a4444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a4446:	4606      	mov	r6, r0
 80a4448:	460d      	mov	r5, r1
  size_t n = 0;
 80a444a:	2400      	movs	r4, #0
 80a444c:	188f      	adds	r7, r1, r2
  while (size--) {
 80a444e:	42bd      	cmp	r5, r7
 80a4450:	d00c      	beq.n	80a446c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a4452:	6833      	ldr	r3, [r6, #0]
 80a4454:	4630      	mov	r0, r6
 80a4456:	689b      	ldr	r3, [r3, #8]
 80a4458:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a445c:	4798      	blx	r3
     if (chunk>=0)
 80a445e:	1e03      	subs	r3, r0, #0
 80a4460:	db01      	blt.n	80a4466 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a4462:	441c      	add	r4, r3
  while (size--) {
 80a4464:	e7f3      	b.n	80a444e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a4466:	2c00      	cmp	r4, #0
 80a4468:	bf08      	it	eq
 80a446a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 80a446c:	4620      	mov	r0, r4
 80a446e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a4470 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a4470:	b570      	push	{r4, r5, r6, lr}
 80a4472:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a4474:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a4476:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 80a4478:	b149      	cbz	r1, 80a448e <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a447a:	f003 f923 	bl	80a76c4 <strlen>
 80a447e:	682b      	ldr	r3, [r5, #0]
 80a4480:	4602      	mov	r2, r0
 80a4482:	4621      	mov	r1, r4
 80a4484:	4628      	mov	r0, r5
    }
 80a4486:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 80a448a:	68db      	ldr	r3, [r3, #12]
 80a448c:	4718      	bx	r3
    }
 80a448e:	bd70      	pop	{r4, r5, r6, pc}

080a4490 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
 80a4490:	b508      	push	{r3, lr}
  return write(str);
 80a4492:	f7ff ffed 	bl	80a4470 <_ZN5Print5writeEPKc>
}
 80a4496:	bd08      	pop	{r3, pc}

080a4498 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
 80a4498:	6803      	ldr	r3, [r0, #0]
 80a449a:	689b      	ldr	r3, [r3, #8]
 80a449c:	4718      	bx	r3

080a449e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a449e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a44a0:	210d      	movs	r1, #13
{
 80a44a2:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a44a4:	f7ff fff8 	bl	80a4498 <_ZN5Print5printEc>
  n += print('\n');
 80a44a8:	210a      	movs	r1, #10
  size_t n = print('\r');
 80a44aa:	4604      	mov	r4, r0
  n += print('\n');
 80a44ac:	4628      	mov	r0, r5
 80a44ae:	f7ff fff3 	bl	80a4498 <_ZN5Print5printEc>
  return n;
}
 80a44b2:	4420      	add	r0, r4
 80a44b4:	bd38      	pop	{r3, r4, r5, pc}

080a44b6 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a44b6:	b538      	push	{r3, r4, r5, lr}
 80a44b8:	4605      	mov	r5, r0
  return write(str);
 80a44ba:	f7ff ffd9 	bl	80a4470 <_ZN5Print5writeEPKc>
 80a44be:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
 80a44c0:	4628      	mov	r0, r5
 80a44c2:	f7ff ffec 	bl	80a449e <_ZN5Print7printlnEv>
  return n;
}
 80a44c6:	4420      	add	r0, r4
 80a44c8:	bd38      	pop	{r3, r4, r5, pc}

080a44ca <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a44ca:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a44cc:	2a01      	cmp	r2, #1
 80a44ce:	bf98      	it	ls
 80a44d0:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a44d2:	b530      	push	{r4, r5, lr}
 80a44d4:	b08b      	sub	sp, #44	; 0x2c
 80a44d6:	460c      	mov	r4, r1
  *str = '\0';
 80a44d8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 80a44dc:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 80a44de:	4625      	mov	r5, r4
 80a44e0:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 80a44e4:	fb04 5312 	mls	r3, r4, r2, r5
 80a44e8:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a44ea:	2b09      	cmp	r3, #9
 80a44ec:	bf94      	ite	ls
 80a44ee:	3330      	addls	r3, #48	; 0x30
 80a44f0:	3337      	addhi	r3, #55	; 0x37
 80a44f2:	b2db      	uxtb	r3, r3
  } while(n);
 80a44f4:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a44f6:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 80a44fa:	d9f0      	bls.n	80a44de <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 80a44fc:	f7ff ffb8 	bl	80a4470 <_ZN5Print5writeEPKc>
}
 80a4500:	b00b      	add	sp, #44	; 0x2c
 80a4502:	bd30      	pop	{r4, r5, pc}

080a4504 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a4504:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a4508:	4605      	mov	r5, r0
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a450a:	4619      	mov	r1, r3
 80a450c:	4610      	mov	r0, r2
{
 80a450e:	4692      	mov	sl, r2
 80a4510:	461f      	mov	r7, r3
 80a4512:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
  if (isnan(number)) return print("nan");
 80a4516:	f001 fcf9 	bl	80a5f0c <__aeabi_dcmpun>
 80a451a:	b140      	cbz	r0, 80a452e <_ZN5Print10printFloatEdh+0x2a>
  return write(str);
 80a451c:	4950      	ldr	r1, [pc, #320]	; (80a4660 <_ZN5Print10printFloatEdh+0x15c>)
 80a451e:	4628      	mov	r0, r5
 80a4520:	f7ff ffa6 	bl	80a4470 <_ZN5Print5writeEPKc>
 80a4524:	4604      	mov	r4, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
 80a4526:	4620      	mov	r0, r4
 80a4528:	b003      	add	sp, #12
 80a452a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
 80a452e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
 80a4532:	f04f 32ff 	mov.w	r2, #4294967295
 80a4536:	4650      	mov	r0, sl
 80a4538:	4621      	mov	r1, r4
 80a453a:	4b4a      	ldr	r3, [pc, #296]	; (80a4664 <_ZN5Print10printFloatEdh+0x160>)
 80a453c:	f001 fce6 	bl	80a5f0c <__aeabi_dcmpun>
 80a4540:	b948      	cbnz	r0, 80a4556 <_ZN5Print10printFloatEdh+0x52>
 80a4542:	f04f 32ff 	mov.w	r2, #4294967295
 80a4546:	4650      	mov	r0, sl
 80a4548:	4621      	mov	r1, r4
 80a454a:	4b46      	ldr	r3, [pc, #280]	; (80a4664 <_ZN5Print10printFloatEdh+0x160>)
 80a454c:	f001 fcc0 	bl	80a5ed0 <__aeabi_dcmple>
 80a4550:	b908      	cbnz	r0, 80a4556 <_ZN5Print10printFloatEdh+0x52>
  return write(str);
 80a4552:	4945      	ldr	r1, [pc, #276]	; (80a4668 <_ZN5Print10printFloatEdh+0x164>)
 80a4554:	e7e3      	b.n	80a451e <_ZN5Print10printFloatEdh+0x1a>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
 80a4556:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a455a:	4650      	mov	r0, sl
 80a455c:	4639      	mov	r1, r7
 80a455e:	4b43      	ldr	r3, [pc, #268]	; (80a466c <_ZN5Print10printFloatEdh+0x168>)
 80a4560:	f001 fcca 	bl	80a5ef8 <__aeabi_dcmpgt>
 80a4564:	b108      	cbz	r0, 80a456a <_ZN5Print10printFloatEdh+0x66>
  return write(str);
 80a4566:	4942      	ldr	r1, [pc, #264]	; (80a4670 <_ZN5Print10printFloatEdh+0x16c>)
 80a4568:	e7d9      	b.n	80a451e <_ZN5Print10printFloatEdh+0x1a>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
 80a456a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a456e:	4650      	mov	r0, sl
 80a4570:	4639      	mov	r1, r7
 80a4572:	4b40      	ldr	r3, [pc, #256]	; (80a4674 <_ZN5Print10printFloatEdh+0x170>)
 80a4574:	f001 fca2 	bl	80a5ebc <__aeabi_dcmplt>
 80a4578:	2800      	cmp	r0, #0
 80a457a:	d1f4      	bne.n	80a4566 <_ZN5Print10printFloatEdh+0x62>
  if (number < 0.0)
 80a457c:	2200      	movs	r2, #0
 80a457e:	2300      	movs	r3, #0
 80a4580:	4650      	mov	r0, sl
 80a4582:	4639      	mov	r1, r7
 80a4584:	f001 fc9a 	bl	80a5ebc <__aeabi_dcmplt>
 80a4588:	4604      	mov	r4, r0
 80a458a:	b130      	cbz	r0, 80a459a <_ZN5Print10printFloatEdh+0x96>
     n += print('-');
 80a458c:	212d      	movs	r1, #45	; 0x2d
 80a458e:	4628      	mov	r0, r5
 80a4590:	f7ff ff82 	bl	80a4498 <_ZN5Print5printEc>
 80a4594:	4604      	mov	r4, r0
     number = -number;
 80a4596:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
  size_t n = 0;
 80a459a:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
 80a459e:	2000      	movs	r0, #0
    rounding /= 10.0;
 80a45a0:	f04f 0800 	mov.w	r8, #0
  double rounding = 0.5;
 80a45a4:	4934      	ldr	r1, [pc, #208]	; (80a4678 <_ZN5Print10printFloatEdh+0x174>)
    rounding /= 10.0;
 80a45a6:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 80a4680 <_ZN5Print10printFloatEdh+0x17c>
  for (uint8_t i=0; i<digits; ++i)
 80a45aa:	fa5f f38b 	uxtb.w	r3, fp
 80a45ae:	429e      	cmp	r6, r3
 80a45b0:	d906      	bls.n	80a45c0 <_ZN5Print10printFloatEdh+0xbc>
    rounding /= 10.0;
 80a45b2:	4642      	mov	r2, r8
 80a45b4:	464b      	mov	r3, r9
 80a45b6:	f001 fb39 	bl	80a5c2c <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
 80a45ba:	f10b 0b01 	add.w	fp, fp, #1
 80a45be:	e7f4      	b.n	80a45aa <_ZN5Print10printFloatEdh+0xa6>
  number += rounding;
 80a45c0:	463b      	mov	r3, r7
 80a45c2:	4652      	mov	r2, sl
 80a45c4:	f001 f852 	bl	80a566c <__adddf3>
 80a45c8:	4689      	mov	r9, r1
 80a45ca:	4680      	mov	r8, r0
  unsigned long int_part = (unsigned long)number;
 80a45cc:	f001 fcdc 	bl	80a5f88 <__aeabi_d2uiz>
 80a45d0:	4607      	mov	r7, r0
  double remainder = number - (double)int_part;
 80a45d2:	f001 f987 	bl	80a58e4 <__aeabi_ui2d>
 80a45d6:	4602      	mov	r2, r0
 80a45d8:	460b      	mov	r3, r1
 80a45da:	4640      	mov	r0, r8
 80a45dc:	4649      	mov	r1, r9
 80a45de:	f001 f843 	bl	80a5668 <__aeabi_dsub>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80a45e2:	220a      	movs	r2, #10
 80a45e4:	4680      	mov	r8, r0
 80a45e6:	4689      	mov	r9, r1
 80a45e8:	4628      	mov	r0, r5
 80a45ea:	4639      	mov	r1, r7
 80a45ec:	f7ff ff6d 	bl	80a44ca <_ZN5Print11printNumberEmh>
  n += print(int_part);
 80a45f0:	4404      	add	r4, r0
  if (digits > 0) {
 80a45f2:	b126      	cbz	r6, 80a45fe <_ZN5Print10printFloatEdh+0xfa>
  return write(str);
 80a45f4:	4628      	mov	r0, r5
 80a45f6:	4921      	ldr	r1, [pc, #132]	; (80a467c <_ZN5Print10printFloatEdh+0x178>)
 80a45f8:	f7ff ff3a 	bl	80a4470 <_ZN5Print5writeEPKc>
    n += print(".");
 80a45fc:	4404      	add	r4, r0
    remainder *= 10.0;
 80a45fe:	f04f 0a00 	mov.w	sl, #0
 80a4602:	f8df b07c 	ldr.w	fp, [pc, #124]	; 80a4680 <_ZN5Print10printFloatEdh+0x17c>
  while (digits-- > 0)
 80a4606:	3e01      	subs	r6, #1
 80a4608:	b2f6      	uxtb	r6, r6
 80a460a:	2eff      	cmp	r6, #255	; 0xff
 80a460c:	d08b      	beq.n	80a4526 <_ZN5Print10printFloatEdh+0x22>
    remainder *= 10.0;
 80a460e:	4652      	mov	r2, sl
 80a4610:	465b      	mov	r3, fp
 80a4612:	4640      	mov	r0, r8
 80a4614:	4649      	mov	r1, r9
 80a4616:	f001 f9df 	bl	80a59d8 <__aeabi_dmul>
 80a461a:	4680      	mov	r8, r0
 80a461c:	4689      	mov	r9, r1
    int toPrint = int(remainder);
 80a461e:	f001 fc8b 	bl	80a5f38 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
 80a4622:	1e07      	subs	r7, r0, #0
 80a4624:	da19      	bge.n	80a465a <_ZN5Print10printFloatEdh+0x156>
            t = print('-');
 80a4626:	212d      	movs	r1, #45	; 0x2d
 80a4628:	4628      	mov	r0, r5
 80a462a:	f7ff ff35 	bl	80a4498 <_ZN5Print5printEc>
 80a462e:	4603      	mov	r3, r0
            val = -n;
 80a4630:	4279      	negs	r1, r7
        return printNumber(val, base) + t;
 80a4632:	220a      	movs	r2, #10
 80a4634:	4628      	mov	r0, r5
 80a4636:	9301      	str	r3, [sp, #4]
 80a4638:	f7ff ff47 	bl	80a44ca <_ZN5Print11printNumberEmh>
 80a463c:	9b01      	ldr	r3, [sp, #4]
 80a463e:	4403      	add	r3, r0
    remainder -= toPrint;
 80a4640:	4638      	mov	r0, r7
    n += print(toPrint);
 80a4642:	441c      	add	r4, r3
    remainder -= toPrint;
 80a4644:	f001 f95e 	bl	80a5904 <__aeabi_i2d>
 80a4648:	4602      	mov	r2, r0
 80a464a:	460b      	mov	r3, r1
 80a464c:	4640      	mov	r0, r8
 80a464e:	4649      	mov	r1, r9
 80a4650:	f001 f80a 	bl	80a5668 <__aeabi_dsub>
 80a4654:	4680      	mov	r8, r0
 80a4656:	4689      	mov	r9, r1
  while (digits-- > 0)
 80a4658:	e7d5      	b.n	80a4606 <_ZN5Print10printFloatEdh+0x102>
            val = n;
 80a465a:	4639      	mov	r1, r7
        size_t t = 0;
 80a465c:	2300      	movs	r3, #0
 80a465e:	e7e8      	b.n	80a4632 <_ZN5Print10printFloatEdh+0x12e>
 80a4660:	080a8718 	.word	0x080a8718
 80a4664:	7fefffff 	.word	0x7fefffff
 80a4668:	080a871c 	.word	0x080a871c
 80a466c:	41efffff 	.word	0x41efffff
 80a4670:	080a8720 	.word	0x080a8720
 80a4674:	c1efffff 	.word	0xc1efffff
 80a4678:	3fe00000 	.word	0x3fe00000
 80a467c:	080a84b3 	.word	0x080a84b3
 80a4680:	40240000 	.word	0x40240000

080a4684 <_ZN5Print5printEfi>:
{
 80a4684:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a4686:	4605      	mov	r5, r0
 80a4688:	4614      	mov	r4, r2
  return printFloat((double)n, digits);
 80a468a:	4608      	mov	r0, r1
 80a468c:	f001 f94c 	bl	80a5928 <__aeabi_f2d>
 80a4690:	b2e4      	uxtb	r4, r4
 80a4692:	4602      	mov	r2, r0
 80a4694:	460b      	mov	r3, r1
 80a4696:	4628      	mov	r0, r5
 80a4698:	9400      	str	r4, [sp, #0]
 80a469a:	f7ff ff33 	bl	80a4504 <_ZN5Print10printFloatEdh>
}
 80a469e:	b003      	add	sp, #12
 80a46a0:	bd30      	pop	{r4, r5, pc}

080a46a2 <_ZN5Print7printlnEdi>:
{
 80a46a2:	b537      	push	{r0, r1, r2, r4, r5, lr}
  return printFloat(n, digits);
 80a46a4:	f89d 1018 	ldrb.w	r1, [sp, #24]
{
 80a46a8:	4605      	mov	r5, r0
  return printFloat(n, digits);
 80a46aa:	9100      	str	r1, [sp, #0]
 80a46ac:	f7ff ff2a 	bl	80a4504 <_ZN5Print10printFloatEdh>
 80a46b0:	4604      	mov	r4, r0
  n += println();
 80a46b2:	4628      	mov	r0, r5
 80a46b4:	f7ff fef3 	bl	80a449e <_ZN5Print7printlnEv>
}
 80a46b8:	4420      	add	r0, r4
 80a46ba:	b003      	add	sp, #12
 80a46bc:	bd30      	pop	{r4, r5, pc}

080a46be <_ZN5Print7printlnEfi>:
{
 80a46be:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a46c0:	4604      	mov	r4, r0
    return println((double)num, digits);
 80a46c2:	4608      	mov	r0, r1
{
 80a46c4:	4615      	mov	r5, r2
    return println((double)num, digits);
 80a46c6:	f001 f92f 	bl	80a5928 <__aeabi_f2d>
 80a46ca:	9500      	str	r5, [sp, #0]
 80a46cc:	4602      	mov	r2, r0
 80a46ce:	460b      	mov	r3, r1
 80a46d0:	4620      	mov	r0, r4
 80a46d2:	f7ff ffe6 	bl	80a46a2 <_ZN5Print7printlnEdi>
}
 80a46d6:	b003      	add	sp, #12
 80a46d8:	bd30      	pop	{r4, r5, pc}

080a46da <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a46da:	2300      	movs	r3, #0
 80a46dc:	6840      	ldr	r0, [r0, #4]
 80a46de:	461a      	mov	r2, r3
 80a46e0:	4619      	mov	r1, r3
 80a46e2:	f7ff b8c5 	b.w	80a3870 <network_on>
	...

080a46e8 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a46e8:	4b01      	ldr	r3, [pc, #4]	; (80a46f0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a46ea:	4a02      	ldr	r2, [pc, #8]	; (80a46f4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a46ec:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 80a46ee:	4770      	bx	lr
 80a46f0:	20000588 	.word	0x20000588
 80a46f4:	080a8724 	.word	0x080a8724

080a46f8 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
 80a46f8:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
 80a46fa:	2000      	movs	r0, #0
 80a46fc:	f7ff f910 	bl	80a3920 <spark_sync_time_pending>
 80a4700:	b128      	cbz	r0, 80a470e <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a4702:	f7ff f905 	bl	80a3910 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
 80a4706:	f080 0001 	eor.w	r0, r0, #1
 80a470a:	b2c0      	uxtb	r0, r0
    }
 80a470c:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
 80a470e:	2001      	movs	r0, #1
 80a4710:	e7fc      	b.n	80a470c <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

080a4714 <_ZN9TimeClass4zoneEf>:
	return now() + time_zone_cache + dst_current_cache;
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
 80a4714:	b510      	push	{r4, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
 80a4716:	490a      	ldr	r1, [pc, #40]	; (80a4740 <_ZN9TimeClass4zoneEf+0x2c>)
{
 80a4718:	4604      	mov	r4, r0
	if(GMT_Offset < -12 || GMT_Offset > 14)
 80a471a:	f001 ff01 	bl	80a6520 <__aeabi_fcmplt>
 80a471e:	b968      	cbnz	r0, 80a473c <_ZN9TimeClass4zoneEf+0x28>
 80a4720:	4620      	mov	r0, r4
 80a4722:	4908      	ldr	r1, [pc, #32]	; (80a4744 <_ZN9TimeClass4zoneEf+0x30>)
 80a4724:	f001 ff1a 	bl	80a655c <__aeabi_fcmpgt>
 80a4728:	b940      	cbnz	r0, 80a473c <_ZN9TimeClass4zoneEf+0x28>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
 80a472a:	4907      	ldr	r1, [pc, #28]	; (80a4748 <_ZN9TimeClass4zoneEf+0x34>)
 80a472c:	4620      	mov	r0, r4
 80a472e:	f001 fd59 	bl	80a61e4 <__aeabi_fmul>
 80a4732:	f001 ff35 	bl	80a65a0 <__aeabi_f2lz>
 80a4736:	4b05      	ldr	r3, [pc, #20]	; (80a474c <_ZN9TimeClass4zoneEf+0x38>)
 80a4738:	e9c3 0100 	strd	r0, r1, [r3]
}
 80a473c:	bd10      	pop	{r4, pc}
 80a473e:	bf00      	nop
 80a4740:	c1400000 	.word	0xc1400000
 80a4744:	41600000 	.word	0x41600000
 80a4748:	45610000 	.word	0x45610000
 80a474c:	200005a0 	.word	0x200005a0

080a4750 <_ZN9TimeClass7timeStrEx>:
    }
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 80a4750:	b530      	push	{r4, r5, lr}
 80a4752:	4604      	mov	r4, r0
    t += time_zone_cache;
 80a4754:	4818      	ldr	r0, [pc, #96]	; (80a47b8 <_ZN9TimeClass7timeStrEx+0x68>)
{
 80a4756:	b093      	sub	sp, #76	; 0x4c
    t += time_zone_cache;
 80a4758:	e9d0 1000 	ldrd	r1, r0, [r0]
 80a475c:	1852      	adds	r2, r2, r1
 80a475e:	eb40 0303 	adc.w	r3, r0, r3
    t += dst_current_cache;
 80a4762:	4816      	ldr	r0, [pc, #88]	; (80a47bc <_ZN9TimeClass7timeStrEx+0x6c>)
    struct tm calendar_time = {};
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
 80a4764:	2500      	movs	r5, #0
    t += dst_current_cache;
 80a4766:	e9d0 1000 	ldrd	r1, r0, [r0]
 80a476a:	1852      	adds	r2, r2, r1
 80a476c:	eb40 0303 	adc.w	r3, r0, r3
 80a4770:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
 80a4774:	2224      	movs	r2, #36	; 0x24
 80a4776:	2100      	movs	r1, #0
 80a4778:	eb0d 0002 	add.w	r0, sp, r2
 80a477c:	f002 fa02 	bl	80a6b84 <memset>
    localtime_r(&t, &calendar_time);
 80a4780:	a909      	add	r1, sp, #36	; 0x24
 80a4782:	4668      	mov	r0, sp
 80a4784:	f002 f8fa 	bl	80a697c <localtime_r>
    char ascstr[26] = {};
 80a4788:	2216      	movs	r2, #22
 80a478a:	4629      	mov	r1, r5
 80a478c:	a803      	add	r0, sp, #12
 80a478e:	9502      	str	r5, [sp, #8]
 80a4790:	f002 f9f8 	bl	80a6b84 <memset>
    asctime_r(&calendar_time, ascstr);
 80a4794:	a902      	add	r1, sp, #8
 80a4796:	a809      	add	r0, sp, #36	; 0x24
 80a4798:	f002 f8b8 	bl	80a690c <asctime_r>
    int len = strlen(ascstr);
 80a479c:	a802      	add	r0, sp, #8
 80a479e:	f002 ff91 	bl	80a76c4 <strlen>
    ascstr[len-1] = 0; // remove final newline
 80a47a2:	ab12      	add	r3, sp, #72	; 0x48
 80a47a4:	4418      	add	r0, r3
 80a47a6:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
 80a47aa:	a902      	add	r1, sp, #8
 80a47ac:	4620      	mov	r0, r4
 80a47ae:	f7ff fcfd 	bl	80a41ac <_ZN6StringC1EPKc>
}
 80a47b2:	4620      	mov	r0, r4
 80a47b4:	b013      	add	sp, #76	; 0x4c
 80a47b6:	bd30      	pop	{r4, r5, pc}
 80a47b8:	200005a0 	.word	0x200005a0
 80a47bc:	20000598 	.word	0x20000598

080a47c0 <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    localtime_r(&t, &calendar_time);
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 80a47c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a47c4:	b0a5      	sub	sp, #148	; 0x94
 80a47c6:	4607      	mov	r7, r0
 80a47c8:	4688      	mov	r8, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 80a47ca:	a814      	add	r0, sp, #80	; 0x50
{
 80a47cc:	4611      	mov	r1, r2
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 80a47ce:	223f      	movs	r2, #63	; 0x3f
{
 80a47d0:	461d      	mov	r5, r3
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 80a47d2:	f002 ff91 	bl	80a76f8 <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
 80a47d6:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
 80a47d8:	a814      	add	r0, sp, #80	; 0x50
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
 80a47da:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
 80a47de:	f002 ff71 	bl	80a76c4 <strlen>
 80a47e2:	4604      	mov	r4, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
 80a47e4:	bb5d      	cbnz	r5, 80a483e <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x7e>
        strcpy(time_zone_str, "Z");
 80a47e6:	492a      	ldr	r1, [pc, #168]	; (80a4890 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd0>)
 80a47e8:	a803      	add	r0, sp, #12
 80a47ea:	f002 fa01 	bl	80a6bf0 <strcpy>
{
 80a47ee:	2500      	movs	r5, #0
 80a47f0:	ae14      	add	r6, sp, #80	; 0x50
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
 80a47f2:	f104 3bff 	add.w	fp, r4, #4294967295
 80a47f6:	45ab      	cmp	fp, r5
 80a47f8:	d936      	bls.n	80a4868 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xa8>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
 80a47fa:	46b1      	mov	r9, r6
 80a47fc:	f819 3b01 	ldrb.w	r3, [r9], #1
 80a4800:	f105 0a01 	add.w	sl, r5, #1
 80a4804:	2b25      	cmp	r3, #37	; 0x25
 80a4806:	d117      	bne.n	80a4838 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
 80a4808:	7873      	ldrb	r3, [r6, #1]
 80a480a:	2b7a      	cmp	r3, #122	; 0x7a
 80a480c:	d114      	bne.n	80a4838 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
        {
            size_t tzlen = strlen(time_zone_str);
 80a480e:	a803      	add	r0, sp, #12
 80a4810:	f002 ff58 	bl	80a76c4 <strlen>
 80a4814:	4604      	mov	r4, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
 80a4816:	ab14      	add	r3, sp, #80	; 0x50
 80a4818:	1828      	adds	r0, r5, r0
 80a481a:	4418      	add	r0, r3
 80a481c:	ebab 0205 	sub.w	r2, fp, r5
 80a4820:	1cb1      	adds	r1, r6, #2
 80a4822:	f002 f9a1 	bl	80a6b68 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
 80a4826:	4622      	mov	r2, r4
 80a4828:	a903      	add	r1, sp, #12
 80a482a:	4630      	mov	r0, r6
 80a482c:	f002 f99c 	bl	80a6b68 <memcpy>
            len = strlen(format_str);
 80a4830:	a814      	add	r0, sp, #80	; 0x50
 80a4832:	f002 ff47 	bl	80a76c4 <strlen>
 80a4836:	4604      	mov	r4, r0
    for (size_t i=0; i<len-1; i++)
 80a4838:	464e      	mov	r6, r9
 80a483a:	4655      	mov	r5, sl
 80a483c:	e7d9      	b.n	80a47f2 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
 80a483e:	213c      	movs	r1, #60	; 0x3c
 80a4840:	fb95 f3f1 	sdiv	r3, r5, r1
 80a4844:	2b00      	cmp	r3, #0
 80a4846:	bfb8      	it	lt
 80a4848:	425b      	neglt	r3, r3
 80a484a:	fbb3 f2f1 	udiv	r2, r3, r1
 80a484e:	fb01 3312 	mls	r3, r1, r2, r3
 80a4852:	9300      	str	r3, [sp, #0]
 80a4854:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80a4858:	2110      	movs	r1, #16
 80a485a:	fb95 f3f3 	sdiv	r3, r5, r3
 80a485e:	4a0d      	ldr	r2, [pc, #52]	; (80a4894 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd4>)
 80a4860:	a803      	add	r0, sp, #12
 80a4862:	f7ff f89d 	bl	80a39a0 <snprintf>
 80a4866:	e7c2      	b.n	80a47ee <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2e>
        }
    }

    char buf[50] = {};
 80a4868:	2100      	movs	r1, #0
 80a486a:	222e      	movs	r2, #46	; 0x2e
 80a486c:	a808      	add	r0, sp, #32
 80a486e:	9107      	str	r1, [sp, #28]
 80a4870:	f002 f988 	bl	80a6b84 <memset>
    strftime(buf, sizeof(buf), format_str, calendar_time);
 80a4874:	4643      	mov	r3, r8
 80a4876:	aa14      	add	r2, sp, #80	; 0x50
 80a4878:	2132      	movs	r1, #50	; 0x32
 80a487a:	a807      	add	r0, sp, #28
 80a487c:	f002 ff18 	bl	80a76b0 <strftime>
    return String(buf);
 80a4880:	4638      	mov	r0, r7
 80a4882:	a907      	add	r1, sp, #28
 80a4884:	f7ff fc92 	bl	80a41ac <_ZN6StringC1EPKc>
}
 80a4888:	4638      	mov	r0, r7
 80a488a:	b025      	add	sp, #148	; 0x94
 80a488c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a4890:	080a8ca9 	.word	0x080a8ca9
 80a4894:	080a8728 	.word	0x080a8728

080a4898 <_ZN9TimeClass6formatExPKc>:
{
 80a4898:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a489a:	b08d      	sub	sp, #52	; 0x34
 80a489c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80a489e:	4604      	mov	r4, r0
 80a48a0:	e9cd 2300 	strd	r2, r3, [sp]
    if (format_spec == nullptr)
 80a48a4:	b915      	cbnz	r5, 80a48ac <_ZN9TimeClass6formatExPKc+0x14>
        format_spec = this->format_spec;
 80a48a6:	4b19      	ldr	r3, [pc, #100]	; (80a490c <_ZN9TimeClass6formatExPKc+0x74>)
 80a48a8:	681d      	ldr	r5, [r3, #0]
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
 80a48aa:	b12d      	cbz	r5, 80a48b8 <_ZN9TimeClass6formatExPKc+0x20>
 80a48ac:	4b18      	ldr	r3, [pc, #96]	; (80a4910 <_ZN9TimeClass6formatExPKc+0x78>)
 80a48ae:	4628      	mov	r0, r5
 80a48b0:	6819      	ldr	r1, [r3, #0]
 80a48b2:	f002 f993 	bl	80a6bdc <strcmp>
 80a48b6:	b938      	cbnz	r0, 80a48c8 <_ZN9TimeClass6formatExPKc+0x30>
        return timeStr(t);
 80a48b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80a48bc:	4620      	mov	r0, r4
 80a48be:	f7ff ff47 	bl	80a4750 <_ZN9TimeClass7timeStrEx>
}
 80a48c2:	4620      	mov	r0, r4
 80a48c4:	b00d      	add	sp, #52	; 0x34
 80a48c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t += time_zone_cache;
 80a48c8:	9900      	ldr	r1, [sp, #0]
 80a48ca:	4e12      	ldr	r6, [pc, #72]	; (80a4914 <_ZN9TimeClass6formatExPKc+0x7c>)
    t += dst_current_cache;
 80a48cc:	4f12      	ldr	r7, [pc, #72]	; (80a4918 <_ZN9TimeClass6formatExPKc+0x80>)
    t += time_zone_cache;
 80a48ce:	e9d6 3200 	ldrd	r3, r2, [r6]
 80a48d2:	185b      	adds	r3, r3, r1
 80a48d4:	9901      	ldr	r1, [sp, #4]
 80a48d6:	eb41 0202 	adc.w	r2, r1, r2
    t += dst_current_cache;
 80a48da:	e9d7 0100 	ldrd	r0, r1, [r7]
 80a48de:	181b      	adds	r3, r3, r0
 80a48e0:	eb41 0202 	adc.w	r2, r1, r2
 80a48e4:	e9cd 3200 	strd	r3, r2, [sp]
    struct tm calendar_time = {};
 80a48e8:	2100      	movs	r1, #0
 80a48ea:	2224      	movs	r2, #36	; 0x24
 80a48ec:	a803      	add	r0, sp, #12
 80a48ee:	f002 f949 	bl	80a6b84 <memset>
    localtime_r(&t, &calendar_time);
 80a48f2:	a903      	add	r1, sp, #12
 80a48f4:	4668      	mov	r0, sp
 80a48f6:	f002 f841 	bl	80a697c <localtime_r>
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
 80a48fa:	6832      	ldr	r2, [r6, #0]
 80a48fc:	683b      	ldr	r3, [r7, #0]
 80a48fe:	4620      	mov	r0, r4
 80a4900:	4413      	add	r3, r2
 80a4902:	a903      	add	r1, sp, #12
 80a4904:	462a      	mov	r2, r5
 80a4906:	f7ff ff5b 	bl	80a47c0 <_ZN9TimeClass14timeFormatImplEP2tmPKci>
 80a490a:	e7da      	b.n	80a48c2 <_ZN9TimeClass6formatExPKc+0x2a>
 80a490c:	20000590 	.word	0x20000590
 80a4910:	20000008 	.word	0x20000008
 80a4914:	200005a0 	.word	0x200005a0
 80a4918:	20000598 	.word	0x20000598

080a491c <_ZN9TimeClass7isValidEv>:

bool TimeClass::isValid()
{
 80a491c:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
 80a491e:	2000      	movs	r0, #0
 80a4920:	f7fe fdd6 	bl	80a34d0 <hal_rtc_time_is_valid>
    if (rtcstate)
 80a4924:	4604      	mov	r4, r0
 80a4926:	b9a0      	cbnz	r0, 80a4952 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 80a4928:	f7fe ff44 	bl	80a37b4 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 80a492c:	2801      	cmp	r0, #1
 80a492e:	d110      	bne.n	80a4952 <_ZN9TimeClass7isValidEv+0x36>
 80a4930:	4620      	mov	r0, r4
 80a4932:	f7fe ff57 	bl	80a37e4 <system_thread_get_state>
 80a4936:	b960      	cbnz	r0, 80a4952 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
 80a4938:	f7ff fede 	bl	80a46f8 <_ZN10CloudClass12syncTimeDoneEv.isra.0>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80a493c:	b910      	cbnz	r0, 80a4944 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
 80a493e:	f7fe ffd7 	bl	80a38f0 <spark_process>
        while (_while() && !_condition()) {
 80a4942:	e7f9      	b.n	80a4938 <_ZN9TimeClass7isValidEv+0x1c>
 80a4944:	f7ff fed8 	bl	80a46f8 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
 80a4948:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
 80a494c:	2000      	movs	r0, #0
 80a494e:	f7fe bdbf 	b.w	80a34d0 <hal_rtc_time_is_valid>
}
 80a4952:	4620      	mov	r0, r4
 80a4954:	bd10      	pop	{r4, pc}

080a4956 <_ZN9TimeClass3nowEv>:
{
 80a4956:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
 80a4958:	f7ff ffe0 	bl	80a491c <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
 80a495c:	2210      	movs	r2, #16
 80a495e:	2100      	movs	r1, #0
 80a4960:	4668      	mov	r0, sp
 80a4962:	f002 f90f 	bl	80a6b84 <memset>
    hal_rtc_get_time(&tv, nullptr);
 80a4966:	2100      	movs	r1, #0
 80a4968:	4668      	mov	r0, sp
 80a496a:	f7fe fdb9 	bl	80a34e0 <hal_rtc_get_time>
}
 80a496e:	9800      	ldr	r0, [sp, #0]
 80a4970:	b005      	add	sp, #20
 80a4972:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a4978 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a4978:	4b02      	ldr	r3, [pc, #8]	; (80a4984 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a497a:	681a      	ldr	r2, [r3, #0]
 80a497c:	4b02      	ldr	r3, [pc, #8]	; (80a4988 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a497e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 80a4980:	4770      	bx	lr
 80a4982:	bf00      	nop
 80a4984:	20000008 	.word	0x20000008
 80a4988:	20000590 	.word	0x20000590

080a498c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a498c:	2100      	movs	r1, #0
 80a498e:	f7fe bf21 	b.w	80a37d4 <system_delay_ms>

080a4992 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a4992:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a4994:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 80a4996:	4604      	mov	r4, r0
      if (_M_manager)
 80a4998:	b113      	cbz	r3, 80a49a0 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a499a:	2203      	movs	r2, #3
 80a499c:	4601      	mov	r1, r0
 80a499e:	4798      	blx	r3
    }
 80a49a0:	4620      	mov	r0, r4
 80a49a2:	bd10      	pop	{r4, pc}

080a49a4 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a49a4:	b510      	push	{r4, lr}
 80a49a6:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a49a8:	f7ff fff3 	bl	80a4992 <_ZNSt14_Function_baseD1Ev>
 80a49ac:	4620      	mov	r0, r4
 80a49ae:	bd10      	pop	{r4, pc}

080a49b0 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 80a49b0:	2300      	movs	r3, #0
 80a49b2:	4803      	ldr	r0, [pc, #12]	; (80a49c0 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a49b4:	4a03      	ldr	r2, [pc, #12]	; (80a49c4 <_GLOBAL__sub_I_RGB+0x14>)
 80a49b6:	4904      	ldr	r1, [pc, #16]	; (80a49c8 <_GLOBAL__sub_I_RGB+0x18>)
 80a49b8:	6083      	str	r3, [r0, #8]
 80a49ba:	f000 bd33 	b.w	80a5424 <__aeabi_atexit>
 80a49be:	bf00      	nop
 80a49c0:	200005a8 	.word	0x200005a8
 80a49c4:	20000240 	.word	0x20000240
 80a49c8:	080a49a5 	.word	0x080a49a5

080a49cc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 80a49cc:	4b01      	ldr	r3, [pc, #4]	; (80a49d4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 80a49ce:	6018      	str	r0, [r3, #0]
    }, nullptr);
 80a49d0:	4770      	bx	lr
 80a49d2:	bf00      	nop
 80a49d4:	2000000c 	.word	0x2000000c

080a49d8 <serialEventRun>:
{
 80a49d8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a49da:	4b13      	ldr	r3, [pc, #76]	; (80a4a28 <serialEventRun+0x50>)
 80a49dc:	b143      	cbz	r3, 80a49f0 <serialEventRun+0x18>
 80a49de:	f000 f995 	bl	80a4d0c <_Z16_fetch_usbserialv>
 80a49e2:	6803      	ldr	r3, [r0, #0]
 80a49e4:	691b      	ldr	r3, [r3, #16]
 80a49e6:	4798      	blx	r3
 80a49e8:	2800      	cmp	r0, #0
 80a49ea:	dd01      	ble.n	80a49f0 <serialEventRun+0x18>
        serialEvent();
 80a49ec:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
 80a49f0:	4b0e      	ldr	r3, [pc, #56]	; (80a4a2c <serialEventRun+0x54>)
 80a49f2:	b143      	cbz	r3, 80a4a06 <serialEventRun+0x2e>
 80a49f4:	f000 fa3c 	bl	80a4e70 <_Z22__fetch_global_Serial1v>
 80a49f8:	6803      	ldr	r3, [r0, #0]
 80a49fa:	691b      	ldr	r3, [r3, #16]
 80a49fc:	4798      	blx	r3
 80a49fe:	2800      	cmp	r0, #0
 80a4a00:	dd01      	ble.n	80a4a06 <serialEventRun+0x2e>
        serialEvent1();
 80a4a02:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 80a4a06:	4b0a      	ldr	r3, [pc, #40]	; (80a4a30 <serialEventRun+0x58>)
 80a4a08:	b10b      	cbz	r3, 80a4a0e <serialEventRun+0x36>
 80a4a0a:	f3af 8000 	nop.w
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a4a0e:	4b09      	ldr	r3, [pc, #36]	; (80a4a34 <serialEventRun+0x5c>)
 80a4a10:	b143      	cbz	r3, 80a4a24 <serialEventRun+0x4c>
 80a4a12:	f000 f9ab 	bl	80a4d6c <_Z17_fetch_usbserial1v>
 80a4a16:	6803      	ldr	r3, [r0, #0]
 80a4a18:	691b      	ldr	r3, [r3, #16]
 80a4a1a:	4798      	blx	r3
 80a4a1c:	2800      	cmp	r0, #0
 80a4a1e:	dd01      	ble.n	80a4a24 <serialEventRun+0x4c>
        usbSerialEvent1();
 80a4a20:	f3af 8000 	nop.w
}
 80a4a24:	bd08      	pop	{r3, pc}
 80a4a26:	bf00      	nop
	...

080a4a38 <_post_loop>:
{
 80a4a38:	b508      	push	{r3, lr}
	serialEventRun();
 80a4a3a:	f7ff ffcd 	bl	80a49d8 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a4a3e:	f7fe fd3f 	bl	80a34c0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a4a42:	4b01      	ldr	r3, [pc, #4]	; (80a4a48 <_post_loop+0x10>)
 80a4a44:	6018      	str	r0, [r3, #0]
}
 80a4a46:	bd08      	pop	{r3, pc}
 80a4a48:	20000620 	.word	0x20000620

080a4a4c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a4a4c:	4802      	ldr	r0, [pc, #8]	; (80a4a58 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a4a4e:	4a03      	ldr	r2, [pc, #12]	; (80a4a5c <_Z33system_initialize_user_backup_ramv+0x10>)
 80a4a50:	4903      	ldr	r1, [pc, #12]	; (80a4a60 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a4a52:	1a12      	subs	r2, r2, r0
 80a4a54:	f002 b888 	b.w	80a6b68 <memcpy>
 80a4a58:	40024000 	.word	0x40024000
 80a4a5c:	40024004 	.word	0x40024004
 80a4a60:	080a8e18 	.word	0x080a8e18

080a4a64 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a4a64:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a4a66:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a4a68:	461a      	mov	r2, r3
 80a4a6a:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a4a6e:	9300      	str	r3, [sp, #0]
 80a4a70:	f7fe feca 	bl	80a3808 <system_ctrl_set_result>
}
 80a4a74:	b003      	add	sp, #12
 80a4a76:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a4a7c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 80a4a7c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a4a7e:	8843      	ldrh	r3, [r0, #2]
 80a4a80:	2b0a      	cmp	r3, #10
 80a4a82:	d008      	beq.n	80a4a96 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a4a84:	2b50      	cmp	r3, #80	; 0x50
 80a4a86:	d10b      	bne.n	80a4aa0 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 80a4a88:	4b09      	ldr	r3, [pc, #36]	; (80a4ab0 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a4a8a:	681b      	ldr	r3, [r3, #0]
 80a4a8c:	b14b      	cbz	r3, 80a4aa2 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 80a4a8e:	b003      	add	sp, #12
 80a4a90:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 80a4a94:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 80a4a96:	f7ff ffe5 	bl	80a4a64 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 80a4a9a:	b003      	add	sp, #12
 80a4a9c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a4aa0:	2300      	movs	r3, #0
 80a4aa2:	461a      	mov	r2, r3
 80a4aa4:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a4aa8:	9300      	str	r3, [sp, #0]
 80a4aaa:	f7fe fead 	bl	80a3808 <system_ctrl_set_result>
}
 80a4aae:	e7f4      	b.n	80a4a9a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 80a4ab0:	200005bc 	.word	0x200005bc

080a4ab4 <module_user_init_hook>:
{
 80a4ab4:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a4ab6:	4c12      	ldr	r4, [pc, #72]	; (80a4b00 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a4ab8:	2100      	movs	r1, #0
 80a4aba:	4812      	ldr	r0, [pc, #72]	; (80a4b04 <module_user_init_hook+0x50>)
 80a4abc:	f7fe ff90 	bl	80a39e0 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a4ac0:	4d11      	ldr	r5, [pc, #68]	; (80a4b08 <module_user_init_hook+0x54>)
 80a4ac2:	6823      	ldr	r3, [r4, #0]
 80a4ac4:	42ab      	cmp	r3, r5
 80a4ac6:	bf0c      	ite	eq
 80a4ac8:	2201      	moveq	r2, #1
 80a4aca:	2200      	movne	r2, #0
 80a4acc:	4b0f      	ldr	r3, [pc, #60]	; (80a4b0c <module_user_init_hook+0x58>)
 80a4ace:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a4ad0:	d002      	beq.n	80a4ad8 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
 80a4ad2:	f7ff ffbb 	bl	80a4a4c <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a4ad6:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a4ad8:	f7fe fcea 	bl	80a34b0 <HAL_RNG_GetRandomNumber>
 80a4adc:	4604      	mov	r4, r0
    srand(seed);
 80a4ade:	f002 f859 	bl	80a6b94 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a4ae2:	4b0b      	ldr	r3, [pc, #44]	; (80a4b10 <module_user_init_hook+0x5c>)
 80a4ae4:	b113      	cbz	r3, 80a4aec <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
 80a4ae6:	4620      	mov	r0, r4
 80a4ae8:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a4aec:	2100      	movs	r1, #0
 80a4aee:	4808      	ldr	r0, [pc, #32]	; (80a4b10 <module_user_init_hook+0x5c>)
 80a4af0:	f7fe ff1e 	bl	80a3930 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a4af4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a4af8:	2100      	movs	r1, #0
 80a4afa:	4806      	ldr	r0, [pc, #24]	; (80a4b14 <module_user_init_hook+0x60>)
 80a4afc:	f7fe be7a 	b.w	80a37f4 <system_ctrl_set_app_request_handler>
 80a4b00:	40024000 	.word	0x40024000
 80a4b04:	080a49cd 	.word	0x080a49cd
 80a4b08:	9a271c1e 	.word	0x9a271c1e
 80a4b0c:	200005b8 	.word	0x200005b8
 80a4b10:	00000000 	.word	0x00000000
 80a4b14:	080a4a7d 	.word	0x080a4a7d

080a4b18 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
{
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
 80a4b18:	b510      	push	{r4, lr}
 80a4b1a:	b088      	sub	sp, #32
 80a4b1c:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 80a4b1e:	4668      	mov	r0, sp
 80a4b20:	f7ff fb44 	bl	80a41ac <_ZN6StringC1EPKc>
    return (*fn)(p);
 80a4b24:	4669      	mov	r1, sp
 80a4b26:	a804      	add	r0, sp, #16
 80a4b28:	f7ff fb7f 	bl	80a422a <_ZN6StringC1ERKS_>
 80a4b2c:	a804      	add	r0, sp, #16
 80a4b2e:	47a0      	blx	r4
 80a4b30:	4604      	mov	r4, r0
 80a4b32:	a804      	add	r0, sp, #16
 80a4b34:	f7ff faf0 	bl	80a4118 <_ZN6StringD1Ev>
    String p(param);
 80a4b38:	4668      	mov	r0, sp
 80a4b3a:	f7ff faed 	bl	80a4118 <_ZN6StringD1Ev>
}
 80a4b3e:	4620      	mov	r0, r4
 80a4b40:	b008      	add	sp, #32
 80a4b42:	bd10      	pop	{r4, pc}

080a4b44 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
 80a4b44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
 80a4b46:	2300      	movs	r3, #0
         size = sizeof(*this);
 80a4b48:	2410      	movs	r4, #16
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
 80a4b4a:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
 80a4b4e:	9201      	str	r2, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 80a4b50:	4669      	mov	r1, sp
 80a4b52:	461a      	mov	r2, r3
 80a4b54:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
 80a4b56:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
 80a4b5a:	f8ad 4000 	strh.w	r4, [sp]
 80a4b5e:	f7fe febf 	bl	80a38e0 <spark_function>
}
 80a4b62:	b004      	add	sp, #16
 80a4b64:	bd10      	pop	{r4, pc}

080a4b66 <_ZN9IPAddressD1Ev>:
    virtual ~IPAddress() {}
 80a4b66:	4770      	bx	lr

080a4b68 <_ZN9IPAddressD0Ev>:
 80a4b68:	b510      	push	{r4, lr}
 80a4b6a:	4604      	mov	r4, r0
 80a4b6c:	2118      	movs	r1, #24
 80a4b6e:	f000 fc5e 	bl	80a542e <_ZdlPvj>
 80a4b72:	4620      	mov	r0, r4
 80a4b74:	bd10      	pop	{r4, pc}

080a4b76 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a4b76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a4b78:	460e      	mov	r6, r1
 80a4b7a:	2400      	movs	r4, #0
 80a4b7c:	f100 0708 	add.w	r7, r0, #8
 80a4b80:	1d05      	adds	r5, r0, #4
        return printNumber(val, base) + t;
 80a4b82:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 80a4b86:	220a      	movs	r2, #10
 80a4b88:	4630      	mov	r0, r6
 80a4b8a:	f7ff fc9e 	bl	80a44ca <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a4b8e:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a4b90:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 80a4b92:	d101      	bne.n	80a4b98 <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 80a4b94:	4620      	mov	r0, r4
 80a4b96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 80a4b98:	2c00      	cmp	r4, #0
 80a4b9a:	d0f2      	beq.n	80a4b82 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a4b9c:	212e      	movs	r1, #46	; 0x2e
 80a4b9e:	4630      	mov	r0, r6
 80a4ba0:	f7ff fc7a 	bl	80a4498 <_ZN5Print5printEc>
 80a4ba4:	4404      	add	r4, r0
 80a4ba6:	e7ec      	b.n	80a4b82 <_ZNK9IPAddress7printToER5Print+0xc>

080a4ba8 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 80a4ba8:	b510      	push	{r4, lr}
 80a4baa:	4604      	mov	r4, r0
 80a4bac:	4b04      	ldr	r3, [pc, #16]	; (80a4bc0 <_ZN9IPAddressC1Ev+0x18>)
    void clear() { memset(&address, 0, sizeof (address)); }
 80a4bae:	2211      	movs	r2, #17
 80a4bb0:	2100      	movs	r1, #0
 80a4bb2:	f840 3b04 	str.w	r3, [r0], #4
 80a4bb6:	f001 ffe5 	bl	80a6b84 <memset>
}
 80a4bba:	4620      	mov	r0, r4
 80a4bbc:	bd10      	pop	{r4, pc}
 80a4bbe:	bf00      	nop
 80a4bc0:	080a8758 	.word	0x080a8758

080a4bc4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 80a4bc4:	4603      	mov	r3, r0
 80a4bc6:	4a07      	ldr	r2, [pc, #28]	; (80a4be4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a4bc8:	b510      	push	{r4, lr}
 80a4bca:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 80a4bce:	f101 0210 	add.w	r2, r1, #16
 80a4bd2:	f851 4b04 	ldr.w	r4, [r1], #4
 80a4bd6:	4291      	cmp	r1, r2
 80a4bd8:	f843 4b04 	str.w	r4, [r3], #4
 80a4bdc:	d1f9      	bne.n	80a4bd2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a4bde:	780a      	ldrb	r2, [r1, #0]
 80a4be0:	701a      	strb	r2, [r3, #0]
}
 80a4be2:	bd10      	pop	{r4, pc}
 80a4be4:	080a8758 	.word	0x080a8758

080a4be8 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t address)
 80a4be8:	4a02      	ldr	r2, [pc, #8]	; (80a4bf4 <_ZN9IPAddressC1Em+0xc>)
    address.ipv4 = ipv4;
 80a4bea:	e9c0 2100 	strd	r2, r1, [r0]
        address.v = version;
 80a4bee:	2204      	movs	r2, #4
 80a4bf0:	7502      	strb	r2, [r0, #20]
}
 80a4bf2:	4770      	bx	lr
 80a4bf4:	080a8758 	.word	0x080a8758

080a4bf8 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 80a4bf8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a4bfa:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a4bfe:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 80a4c02:	2304      	movs	r3, #4
 80a4c04:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80a4c08:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 80a4c0c:	6044      	str	r4, [r0, #4]
 80a4c0e:	7503      	strb	r3, [r0, #20]
}
 80a4c10:	bd10      	pop	{r4, pc}
	...

080a4c14 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a4c14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a4c16:	4d04      	ldr	r5, [pc, #16]	; (80a4c28 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a4c18:	6005      	str	r5, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a4c1a:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a4c1e:	9500      	str	r5, [sp, #0]
 80a4c20:	f7ff ffea 	bl	80a4bf8 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a4c24:	b003      	add	sp, #12
 80a4c26:	bd30      	pop	{r4, r5, pc}
 80a4c28:	080a8758 	.word	0x080a8758

080a4c2c <_ZN9IPAddressaSEPKh>:
{
 80a4c2c:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
 80a4c2e:	78cb      	ldrb	r3, [r1, #3]
 80a4c30:	9300      	str	r3, [sp, #0]
 80a4c32:	788b      	ldrb	r3, [r1, #2]
 80a4c34:	784a      	ldrb	r2, [r1, #1]
 80a4c36:	7809      	ldrb	r1, [r1, #0]
 80a4c38:	f7ff ffde 	bl	80a4bf8 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a4c3c:	b002      	add	sp, #8
 80a4c3e:	bd10      	pop	{r4, pc}

080a4c40 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* address)
 80a4c40:	b510      	push	{r4, lr}
 80a4c42:	4604      	mov	r4, r0
 80a4c44:	4b02      	ldr	r3, [pc, #8]	; (80a4c50 <_ZN9IPAddressC1EPKh+0x10>)
 80a4c46:	6003      	str	r3, [r0, #0]
    *this = address;
 80a4c48:	f7ff fff0 	bl	80a4c2c <_ZN9IPAddressaSEPKh>
}
 80a4c4c:	4620      	mov	r0, r4
 80a4c4e:	bd10      	pop	{r4, pc}
 80a4c50:	080a8758 	.word	0x080a8758

080a4c54 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a4c54:	7441      	strb	r1, [r0, #17]
}
 80a4c56:	4770      	bx	lr

080a4c58 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a4c58:	4770      	bx	lr

080a4c5a <_ZN9USBSerial4readEv>:
{
 80a4c5a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a4c5c:	2100      	movs	r1, #0
 80a4c5e:	7c00      	ldrb	r0, [r0, #16]
 80a4c60:	f7fe fd68 	bl	80a3734 <HAL_USB_USART_Receive_Data>
}
 80a4c64:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a4c68:	bd08      	pop	{r3, pc}

080a4c6a <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
 80a4c6a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a4c6c:	2101      	movs	r1, #1
 80a4c6e:	7c00      	ldrb	r0, [r0, #16]
 80a4c70:	f7fe fd60 	bl	80a3734 <HAL_USB_USART_Receive_Data>
}
 80a4c74:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a4c78:	bd08      	pop	{r3, pc}

080a4c7a <_ZN9USBSerial17availableForWriteEv>:
{
 80a4c7a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a4c7c:	7c00      	ldrb	r0, [r0, #16]
 80a4c7e:	f7fe fd51 	bl	80a3724 <HAL_USB_USART_Available_Data_For_Write>
}
 80a4c82:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a4c86:	bd08      	pop	{r3, pc}

080a4c88 <_ZN9USBSerial9availableEv>:
{
 80a4c88:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a4c8a:	7c00      	ldrb	r0, [r0, #16]
 80a4c8c:	f7fe fd42 	bl	80a3714 <HAL_USB_USART_Available_Data>
}
 80a4c90:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a4c94:	bd08      	pop	{r3, pc}

080a4c96 <_ZN9USBSerial5writeEh>:
{
 80a4c96:	b538      	push	{r3, r4, r5, lr}
 80a4c98:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a4c9a:	7c00      	ldrb	r0, [r0, #16]
{
 80a4c9c:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a4c9e:	f7fe fd41 	bl	80a3724 <HAL_USB_USART_Available_Data_For_Write>
 80a4ca2:	2800      	cmp	r0, #0
 80a4ca4:	dc01      	bgt.n	80a4caa <_ZN9USBSerial5writeEh+0x14>
 80a4ca6:	7c60      	ldrb	r0, [r4, #17]
 80a4ca8:	b128      	cbz	r0, 80a4cb6 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a4caa:	4629      	mov	r1, r5
 80a4cac:	7c20      	ldrb	r0, [r4, #16]
 80a4cae:	f7fe fd49 	bl	80a3744 <HAL_USB_USART_Send_Data>
 80a4cb2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 80a4cb6:	bd38      	pop	{r3, r4, r5, pc}

080a4cb8 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 80a4cb8:	7c00      	ldrb	r0, [r0, #16]
 80a4cba:	f7fe bd4b 	b.w	80a3754 <HAL_USB_USART_Flush_Data>

080a4cbe <_ZN9USBSerialD0Ev>:
 80a4cbe:	b510      	push	{r4, lr}
 80a4cc0:	4604      	mov	r4, r0
 80a4cc2:	2114      	movs	r1, #20
 80a4cc4:	f000 fbb3 	bl	80a542e <_ZdlPvj>
 80a4cc8:	4620      	mov	r0, r4
 80a4cca:	bd10      	pop	{r4, pc}

080a4ccc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a4ccc:	b510      	push	{r4, lr}
 80a4cce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a4cd2:	4604      	mov	r4, r0
 80a4cd4:	4608      	mov	r0, r1
 80a4cd6:	2100      	movs	r1, #0
 80a4cd8:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a4cdc:	4b04      	ldr	r3, [pc, #16]	; (80a4cf0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 80a4cde:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a4ce0:	6023      	str	r3, [r4, #0]
  _blocking = true;
 80a4ce2:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 80a4ce4:	4611      	mov	r1, r2
  _blocking = true;
 80a4ce6:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 80a4ce8:	f7fe fd04 	bl	80a36f4 <HAL_USB_USART_Init>
}
 80a4cec:	4620      	mov	r0, r4
 80a4cee:	bd10      	pop	{r4, pc}
 80a4cf0:	080a876c 	.word	0x080a876c

080a4cf4 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a4cf4:	2200      	movs	r2, #0
 80a4cf6:	7c00      	ldrb	r0, [r0, #16]
 80a4cf8:	f7fe bd04 	b.w	80a3704 <HAL_USB_USART_Begin>

080a4cfc <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a4cfc:	b510      	push	{r4, lr}
 80a4cfe:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a4d00:	2214      	movs	r2, #20
 80a4d02:	2100      	movs	r1, #0
 80a4d04:	f001 ff3e 	bl	80a6b84 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a4d08:	4620      	mov	r0, r4
 80a4d0a:	bd10      	pop	{r4, pc}

080a4d0c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a4d0c:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a4d0e:	4d0f      	ldr	r5, [pc, #60]	; (80a4d4c <_Z16_fetch_usbserialv+0x40>)
{
 80a4d10:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a4d12:	a801      	add	r0, sp, #4
 80a4d14:	f7ff fff2 	bl	80a4cfc <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a4d18:	7829      	ldrb	r1, [r5, #0]
 80a4d1a:	f3bf 8f5b 	dmb	ish
 80a4d1e:	f011 0401 	ands.w	r4, r1, #1
 80a4d22:	d110      	bne.n	80a4d46 <_Z16_fetch_usbserialv+0x3a>
 80a4d24:	4628      	mov	r0, r5
 80a4d26:	f7fb f9be 	bl	80a00a6 <__cxa_guard_acquire>
 80a4d2a:	b160      	cbz	r0, 80a4d46 <_Z16_fetch_usbserialv+0x3a>
 80a4d2c:	4621      	mov	r1, r4
 80a4d2e:	aa01      	add	r2, sp, #4
 80a4d30:	4807      	ldr	r0, [pc, #28]	; (80a4d50 <_Z16_fetch_usbserialv+0x44>)
 80a4d32:	f7ff ffcb 	bl	80a4ccc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a4d36:	4628      	mov	r0, r5
 80a4d38:	f7fb f9ba 	bl	80a00b0 <__cxa_guard_release>
 80a4d3c:	4a05      	ldr	r2, [pc, #20]	; (80a4d54 <_Z16_fetch_usbserialv+0x48>)
 80a4d3e:	4906      	ldr	r1, [pc, #24]	; (80a4d58 <_Z16_fetch_usbserialv+0x4c>)
 80a4d40:	4803      	ldr	r0, [pc, #12]	; (80a4d50 <_Z16_fetch_usbserialv+0x44>)
 80a4d42:	f000 fb6f 	bl	80a5424 <__aeabi_atexit>
	return _usbserial;
}
 80a4d46:	4802      	ldr	r0, [pc, #8]	; (80a4d50 <_Z16_fetch_usbserialv+0x44>)
 80a4d48:	b007      	add	sp, #28
 80a4d4a:	bd30      	pop	{r4, r5, pc}
 80a4d4c:	200005c0 	.word	0x200005c0
 80a4d50:	200005c8 	.word	0x200005c8
 80a4d54:	20000240 	.word	0x20000240
 80a4d58:	080a4c59 	.word	0x080a4c59

080a4d5c <_Z23acquireUSBSerial1Bufferv>:
 80a4d5c:	b510      	push	{r4, lr}
 80a4d5e:	4604      	mov	r4, r0
 80a4d60:	2214      	movs	r2, #20
 80a4d62:	2100      	movs	r1, #0
 80a4d64:	f001 ff0e 	bl	80a6b84 <memset>
 80a4d68:	4620      	mov	r0, r4
 80a4d6a:	bd10      	pop	{r4, pc}

080a4d6c <_Z17_fetch_usbserial1v>:

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a4d6c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a4d6e:	4c0f      	ldr	r4, [pc, #60]	; (80a4dac <_Z17_fetch_usbserial1v+0x40>)
{
 80a4d70:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a4d72:	a801      	add	r0, sp, #4
 80a4d74:	f7ff fff2 	bl	80a4d5c <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a4d78:	7823      	ldrb	r3, [r4, #0]
 80a4d7a:	f3bf 8f5b 	dmb	ish
 80a4d7e:	07db      	lsls	r3, r3, #31
 80a4d80:	d410      	bmi.n	80a4da4 <_Z17_fetch_usbserial1v+0x38>
 80a4d82:	4620      	mov	r0, r4
 80a4d84:	f7fb f98f 	bl	80a00a6 <__cxa_guard_acquire>
 80a4d88:	b160      	cbz	r0, 80a4da4 <_Z17_fetch_usbserial1v+0x38>
 80a4d8a:	2101      	movs	r1, #1
 80a4d8c:	aa01      	add	r2, sp, #4
 80a4d8e:	4808      	ldr	r0, [pc, #32]	; (80a4db0 <_Z17_fetch_usbserial1v+0x44>)
 80a4d90:	f7ff ff9c 	bl	80a4ccc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a4d94:	4620      	mov	r0, r4
 80a4d96:	f7fb f98b 	bl	80a00b0 <__cxa_guard_release>
 80a4d9a:	4a06      	ldr	r2, [pc, #24]	; (80a4db4 <_Z17_fetch_usbserial1v+0x48>)
 80a4d9c:	4906      	ldr	r1, [pc, #24]	; (80a4db8 <_Z17_fetch_usbserial1v+0x4c>)
 80a4d9e:	4804      	ldr	r0, [pc, #16]	; (80a4db0 <_Z17_fetch_usbserial1v+0x44>)
 80a4da0:	f000 fb40 	bl	80a5424 <__aeabi_atexit>
  return _usbserial1;
}
 80a4da4:	4802      	ldr	r0, [pc, #8]	; (80a4db0 <_Z17_fetch_usbserial1v+0x44>)
 80a4da6:	b006      	add	sp, #24
 80a4da8:	bd10      	pop	{r4, pc}
 80a4daa:	bf00      	nop
 80a4dac:	200005c4 	.word	0x200005c4
 80a4db0:	200005dc 	.word	0x200005dc
 80a4db4:	20000240 	.word	0x20000240
 80a4db8:	080a4c59 	.word	0x080a4c59

080a4dbc <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
 80a4dbc:	4770      	bx	lr

080a4dbe <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a4dbe:	7441      	strb	r1, [r0, #17]
}
 80a4dc0:	4770      	bx	lr

080a4dc2 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 80a4dc2:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 80a4dc4:	7c00      	ldrb	r0, [r0, #16]
 80a4dc6:	f7fe fbeb 	bl	80a35a0 <hal_usart_available_data_for_write>
}
 80a4dca:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a4dce:	bd08      	pop	{r3, pc}

080a4dd0 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a4dd0:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 80a4dd2:	7c00      	ldrb	r0, [r0, #16]
 80a4dd4:	f7fe fbbc 	bl	80a3550 <hal_usart_available>
}
 80a4dd8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a4ddc:	bd08      	pop	{r3, pc}

080a4dde <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a4dde:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 80a4de0:	7c00      	ldrb	r0, [r0, #16]
 80a4de2:	f7fe fbc5 	bl	80a3570 <hal_usart_peek>
}
 80a4de6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a4dea:	bd08      	pop	{r3, pc}

080a4dec <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a4dec:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 80a4dee:	7c00      	ldrb	r0, [r0, #16]
 80a4df0:	f7fe fbb6 	bl	80a3560 <hal_usart_read>
}
 80a4df4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a4df8:	bd08      	pop	{r3, pc}

080a4dfa <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 80a4dfa:	7c00      	ldrb	r0, [r0, #16]
 80a4dfc:	f7fe bbc0 	b.w	80a3580 <hal_usart_flush>

080a4e00 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a4e00:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a4e02:	7c46      	ldrb	r6, [r0, #17]
{
 80a4e04:	4604      	mov	r4, r0
 80a4e06:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a4e08:	b12e      	cbz	r6, 80a4e16 <_ZN11USARTSerial5writeEh+0x16>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 80a4e0a:	4629      	mov	r1, r5
 80a4e0c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a4e0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 80a4e12:	f7fe bb95 	b.w	80a3540 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a4e16:	7c00      	ldrb	r0, [r0, #16]
 80a4e18:	f7fe fbc2 	bl	80a35a0 <hal_usart_available_data_for_write>
 80a4e1c:	2800      	cmp	r0, #0
 80a4e1e:	dcf4      	bgt.n	80a4e0a <_ZN11USARTSerial5writeEh+0xa>
}
 80a4e20:	4630      	mov	r0, r6
 80a4e22:	bd70      	pop	{r4, r5, r6, pc}

080a4e24 <_ZN11USARTSerialD0Ev>:
 80a4e24:	b510      	push	{r4, lr}
 80a4e26:	4604      	mov	r4, r0
 80a4e28:	2114      	movs	r1, #20
 80a4e2a:	f000 fb00 	bl	80a542e <_ZdlPvj>
 80a4e2e:	4620      	mov	r0, r4
 80a4e30:	bd10      	pop	{r4, pc}
	...

080a4e34 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
 80a4e34:	f04f 0c00 	mov.w	ip, #0
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a4e38:	b510      	push	{r4, lr}
 80a4e3a:	4604      	mov	r4, r0
 80a4e3c:	4608      	mov	r0, r1
 80a4e3e:	4611      	mov	r1, r2
 80a4e40:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a4e44:	e9c4 c201 	strd	ip, r2, [r4, #4]
 80a4e48:	4a04      	ldr	r2, [pc, #16]	; (80a4e5c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
  _serial = serial;
 80a4e4a:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a4e4c:	6022      	str	r2, [r4, #0]
  _blocking = true;
 80a4e4e:	2201      	movs	r2, #1
 80a4e50:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
 80a4e52:	461a      	mov	r2, r3
 80a4e54:	f7fe fb6c 	bl	80a3530 <hal_usart_init>
}
 80a4e58:	4620      	mov	r0, r4
 80a4e5a:	bd10      	pop	{r4, pc}
 80a4e5c:	080a879c 	.word	0x080a879c

080a4e60 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
 80a4e60:	2300      	movs	r3, #0
 80a4e62:	7c00      	ldrb	r0, [r0, #16]
 80a4e64:	f7fe bba4 	b.w	80a35b0 <hal_usart_begin_config>

080a4e68 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
 80a4e68:	2200      	movs	r2, #0
 80a4e6a:	f7ff bff9 	b.w	80a4e60 <_ZN11USARTSerial5beginEmm>
	...

080a4e70 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a4e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
#else
  if (!serial1_rx_buffer) {
 80a4e72:	4c1a      	ldr	r4, [pc, #104]	; (80a4edc <_Z22__fetch_global_Serial1v+0x6c>)
 80a4e74:	6826      	ldr	r6, [r4, #0]
 80a4e76:	b94e      	cbnz	r6, 80a4e8c <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new hal_usart_ring_buffer_t();
 80a4e78:	2084      	movs	r0, #132	; 0x84
 80a4e7a:	f7fb f90c 	bl	80a0096 <_Znwj>
 80a4e7e:	4605      	mov	r5, r0
 80a4e80:	b118      	cbz	r0, 80a4e8a <_Z22__fetch_global_Serial1v+0x1a>
 80a4e82:	2284      	movs	r2, #132	; 0x84
 80a4e84:	4631      	mov	r1, r6
 80a4e86:	f001 fe7d 	bl	80a6b84 <memset>
 80a4e8a:	6025      	str	r5, [r4, #0]
  }
  if (!serial1_tx_buffer) {
 80a4e8c:	4d14      	ldr	r5, [pc, #80]	; (80a4ee0 <_Z22__fetch_global_Serial1v+0x70>)
 80a4e8e:	682f      	ldr	r7, [r5, #0]
 80a4e90:	b94f      	cbnz	r7, 80a4ea6 <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
 80a4e92:	2084      	movs	r0, #132	; 0x84
 80a4e94:	f7fb f8ff 	bl	80a0096 <_Znwj>
 80a4e98:	4606      	mov	r6, r0
 80a4e9a:	b118      	cbz	r0, 80a4ea4 <_Z22__fetch_global_Serial1v+0x34>
 80a4e9c:	2284      	movs	r2, #132	; 0x84
 80a4e9e:	4639      	mov	r1, r7
 80a4ea0:	f001 fe70 	bl	80a6b84 <memset>
 80a4ea4:	602e      	str	r6, [r5, #0]
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
 80a4ea6:	4f0f      	ldr	r7, [pc, #60]	; (80a4ee4 <_Z22__fetch_global_Serial1v+0x74>)
 80a4ea8:	7839      	ldrb	r1, [r7, #0]
 80a4eaa:	f3bf 8f5b 	dmb	ish
 80a4eae:	f011 0601 	ands.w	r6, r1, #1
 80a4eb2:	d111      	bne.n	80a4ed8 <_Z22__fetch_global_Serial1v+0x68>
 80a4eb4:	4638      	mov	r0, r7
 80a4eb6:	f7fb f8f6 	bl	80a00a6 <__cxa_guard_acquire>
 80a4eba:	b168      	cbz	r0, 80a4ed8 <_Z22__fetch_global_Serial1v+0x68>
 80a4ebc:	4631      	mov	r1, r6
 80a4ebe:	6822      	ldr	r2, [r4, #0]
 80a4ec0:	682b      	ldr	r3, [r5, #0]
 80a4ec2:	4809      	ldr	r0, [pc, #36]	; (80a4ee8 <_Z22__fetch_global_Serial1v+0x78>)
 80a4ec4:	f7ff ffb6 	bl	80a4e34 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
 80a4ec8:	4638      	mov	r0, r7
 80a4eca:	f7fb f8f1 	bl	80a00b0 <__cxa_guard_release>
 80a4ece:	4a07      	ldr	r2, [pc, #28]	; (80a4eec <_Z22__fetch_global_Serial1v+0x7c>)
 80a4ed0:	4907      	ldr	r1, [pc, #28]	; (80a4ef0 <_Z22__fetch_global_Serial1v+0x80>)
 80a4ed2:	4805      	ldr	r0, [pc, #20]	; (80a4ee8 <_Z22__fetch_global_Serial1v+0x78>)
 80a4ed4:	f000 faa6 	bl	80a5424 <__aeabi_atexit>
#endif
	return serial1;
}
 80a4ed8:	4803      	ldr	r0, [pc, #12]	; (80a4ee8 <_Z22__fetch_global_Serial1v+0x78>)
 80a4eda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a4edc:	200005f4 	.word	0x200005f4
 80a4ee0:	200005f8 	.word	0x200005f8
 80a4ee4:	200005f0 	.word	0x200005f0
 80a4ee8:	200005fc 	.word	0x200005fc
 80a4eec:	20000240 	.word	0x20000240
 80a4ef0:	080a4dbd 	.word	0x080a4dbd

080a4ef4 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 80a4ef4:	4770      	bx	lr

080a4ef6 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a4ef6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a4ef8:	4606      	mov	r6, r0
 80a4efa:	4615      	mov	r5, r2
 80a4efc:	460c      	mov	r4, r1
 80a4efe:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a4f00:	42bc      	cmp	r4, r7
 80a4f02:	d006      	beq.n	80a4f12 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a4f04:	6833      	ldr	r3, [r6, #0]
 80a4f06:	4630      	mov	r0, r6
 80a4f08:	689b      	ldr	r3, [r3, #8]
 80a4f0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a4f0e:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 80a4f10:	e7f6      	b.n	80a4f00 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 80a4f12:	4628      	mov	r0, r5
 80a4f14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a4f16 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 80a4f16:	2200      	movs	r2, #0
 80a4f18:	7c00      	ldrb	r0, [r0, #16]
 80a4f1a:	f7fe bb51 	b.w	80a35c0 <hal_i2c_write>

080a4f1e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 80a4f1e:	2100      	movs	r1, #0
 80a4f20:	7c00      	ldrb	r0, [r0, #16]
 80a4f22:	f7fe bb55 	b.w	80a35d0 <hal_i2c_available>

080a4f26 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 80a4f26:	2100      	movs	r1, #0
 80a4f28:	7c00      	ldrb	r0, [r0, #16]
 80a4f2a:	f7fe bb59 	b.w	80a35e0 <hal_i2c_read>

080a4f2e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 80a4f2e:	2100      	movs	r1, #0
 80a4f30:	7c00      	ldrb	r0, [r0, #16]
 80a4f32:	f7fe bb5d 	b.w	80a35f0 <hal_i2c_peek>

080a4f36 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 80a4f36:	2100      	movs	r1, #0
 80a4f38:	7c00      	ldrb	r0, [r0, #16]
 80a4f3a:	f7fe bb61 	b.w	80a3600 <hal_i2c_flush>

080a4f3e <_ZN7TwoWireD0Ev>:
 80a4f3e:	b510      	push	{r4, lr}
 80a4f40:	4604      	mov	r4, r0
 80a4f42:	2114      	movs	r1, #20
 80a4f44:	f000 fa73 	bl	80a542e <_ZdlPvj>
 80a4f48:	4620      	mov	r0, r4
 80a4f4a:	bd10      	pop	{r4, pc}

080a4f4c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a4f4c:	b510      	push	{r4, lr}
 80a4f4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a4f52:	4604      	mov	r4, r0
 80a4f54:	4608      	mov	r0, r1
 80a4f56:	2100      	movs	r1, #0
 80a4f58:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a4f5c:	4b03      	ldr	r3, [pc, #12]	; (80a4f6c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
  hal_i2c_init(_i2c, &conf);
 80a4f5e:	4611      	mov	r1, r2
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a4f60:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
 80a4f62:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
 80a4f64:	f7fe fb5c 	bl	80a3620 <hal_i2c_init>
}
 80a4f68:	4620      	mov	r0, r4
 80a4f6a:	bd10      	pop	{r4, pc}
 80a4f6c:	080a87cc 	.word	0x080a87cc

080a4f70 <_ZN10WiFiSignalD1Ev>:
    virtual ~WiFiSignal() {};
 80a4f70:	4770      	bx	lr

080a4f72 <_ZNK10WiFiSignal19getAccessTechnologyEv>:
    return true;
}

hal_net_access_tech_t WiFiSignal::getAccessTechnology() const {
    return NET_ACCESS_TECHNOLOGY_WIFI;
}
 80a4f72:	2001      	movs	r0, #1
 80a4f74:	4770      	bx	lr

080a4f76 <_ZN5spark9WiFiClass5readyEv>:
        return network_ready(*this, 0, NULL);
 80a4f76:	2200      	movs	r2, #0
 80a4f78:	6840      	ldr	r0, [r0, #4]
 80a4f7a:	4611      	mov	r1, r2
 80a4f7c:	f7fe bc70 	b.w	80a3860 <network_ready>

080a4f80 <_ZN10WiFiSignalD0Ev>:
    virtual ~WiFiSignal() {};
 80a4f80:	b510      	push	{r4, lr}
 80a4f82:	4604      	mov	r4, r0
 80a4f84:	2124      	movs	r1, #36	; 0x24
 80a4f86:	f000 fa52 	bl	80a542e <_ZdlPvj>
 80a4f8a:	4620      	mov	r0, r4
 80a4f8c:	bd10      	pop	{r4, pc}

080a4f8e <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a4f8e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a4f90:	4615      	mov	r5, r2
 80a4f92:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a4f94:	2211      	movs	r2, #17
    IPAddress resolve(const char* name)
 80a4f96:	460e      	mov	r6, r1
 80a4f98:	4604      	mov	r4, r0
        HAL_IPAddress ip = {};
 80a4f9a:	2100      	movs	r1, #0
 80a4f9c:	a803      	add	r0, sp, #12
 80a4f9e:	f001 fdf1 	bl	80a6b84 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a4fa2:	4628      	mov	r0, r5
 80a4fa4:	f002 fb8e 	bl	80a76c4 <strlen>
 80a4fa8:	2700      	movs	r7, #0
 80a4faa:	b281      	uxth	r1, r0
 80a4fac:	6873      	ldr	r3, [r6, #4]
 80a4fae:	4628      	mov	r0, r5
 80a4fb0:	9700      	str	r7, [sp, #0]
 80a4fb2:	aa03      	add	r2, sp, #12
 80a4fb4:	f7fe fbde 	bl	80a3774 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a4fb8:	b130      	cbz	r0, 80a4fc8 <_ZN5spark9WiFiClass7resolveEPKc+0x3a>
 80a4fba:	4639      	mov	r1, r7
 80a4fbc:	4620      	mov	r0, r4
 80a4fbe:	f7ff fe13 	bl	80a4be8 <_ZN9IPAddressC1Em>
    }
 80a4fc2:	4620      	mov	r0, r4
 80a4fc4:	b009      	add	sp, #36	; 0x24
 80a4fc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a4fc8:	4620      	mov	r0, r4
 80a4fca:	a903      	add	r1, sp, #12
 80a4fcc:	f7ff fdfa 	bl	80a4bc4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 80a4fd0:	e7f7      	b.n	80a4fc2 <_ZN5spark9WiFiClass7resolveEPKc+0x34>

080a4fd2 <_ZN5spark9WiFiClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 80a4fd2:	2200      	movs	r2, #0
 80a4fd4:	6840      	ldr	r0, [r0, #4]
 80a4fd6:	4611      	mov	r1, r2
 80a4fd8:	f7fe bc62 	b.w	80a38a0 <network_listening>

080a4fdc <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 80a4fdc:	2200      	movs	r2, #0
 80a4fde:	6840      	ldr	r0, [r0, #4]
 80a4fe0:	4611      	mov	r1, r2
 80a4fe2:	f7fe bc6d 	b.w	80a38c0 <network_get_listen_timeout>

080a4fe6 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 80a4fe6:	2200      	movs	r2, #0
 80a4fe8:	6840      	ldr	r0, [r0, #4]
 80a4fea:	f7fe bc61 	b.w	80a38b0 <network_set_listen_timeout>

080a4fee <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 80a4fee:	2200      	movs	r2, #0
 80a4ff0:	6840      	ldr	r0, [r0, #4]
 80a4ff2:	f081 0101 	eor.w	r1, r1, #1
 80a4ff6:	f7fe bc4b 	b.w	80a3890 <network_listen>

080a4ffa <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 80a4ffa:	2300      	movs	r3, #0
 80a4ffc:	6840      	ldr	r0, [r0, #4]
 80a4ffe:	461a      	mov	r2, r3
 80a5000:	4619      	mov	r1, r3
 80a5002:	f7fe bc3d 	b.w	80a3880 <network_off>

080a5006 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 80a5006:	2200      	movs	r2, #0
 80a5008:	6840      	ldr	r0, [r0, #4]
 80a500a:	4611      	mov	r1, r2
 80a500c:	f7fe bc18 	b.w	80a3840 <network_connecting>

080a5010 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a5010:	2200      	movs	r2, #0
 80a5012:	2102      	movs	r1, #2
 80a5014:	6840      	ldr	r0, [r0, #4]
 80a5016:	f7fe bc1b 	b.w	80a3850 <network_disconnect>

080a501a <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 80a501a:	2300      	movs	r3, #0
 80a501c:	6840      	ldr	r0, [r0, #4]
 80a501e:	461a      	mov	r2, r3
 80a5020:	f7fe bc06 	b.w	80a3830 <network_connect>

080a5024 <_ZNK10WiFiSignal11getStrengthEv>:

float WiFiSignal::getStrength() const {
 80a5024:	b508      	push	{r3, lr}
    if (inf_.size != 0 && inf_.strength >= 0) {
 80a5026:	8983      	ldrh	r3, [r0, #12]
 80a5028:	b15b      	cbz	r3, 80a5042 <_ZNK10WiFiSignal11getStrengthEv+0x1e>
 80a502a:	6940      	ldr	r0, [r0, #20]
 80a502c:	2800      	cmp	r0, #0
 80a502e:	db08      	blt.n	80a5042 <_ZNK10WiFiSignal11getStrengthEv+0x1e>
        return inf_.strength / 65535.0f * 100.0f;
 80a5030:	f001 f884 	bl	80a613c <__aeabi_i2f>
 80a5034:	4904      	ldr	r1, [pc, #16]	; (80a5048 <_ZNK10WiFiSignal11getStrengthEv+0x24>)
 80a5036:	f001 f989 	bl	80a634c <__aeabi_fdiv>
 80a503a:	4904      	ldr	r1, [pc, #16]	; (80a504c <_ZNK10WiFiSignal11getStrengthEv+0x28>)
 80a503c:	f001 f8d2 	bl	80a61e4 <__aeabi_fmul>
    }
    return -1.0f;
}
 80a5040:	bd08      	pop	{r3, pc}
    return -1.0f;
 80a5042:	4803      	ldr	r0, [pc, #12]	; (80a5050 <_ZNK10WiFiSignal11getStrengthEv+0x2c>)
 80a5044:	e7fc      	b.n	80a5040 <_ZNK10WiFiSignal11getStrengthEv+0x1c>
 80a5046:	bf00      	nop
 80a5048:	477fff00 	.word	0x477fff00
 80a504c:	42c80000 	.word	0x42c80000
 80a5050:	bf800000 	.word	0xbf800000

080a5054 <_ZNK10WiFiSignal16getStrengthValueEv>:

float WiFiSignal::getStrengthValue() const {
 80a5054:	b508      	push	{r3, lr}
    if (inf_.size != 0 && inf_.rssi != std::numeric_limits<int32_t>::min()) {
 80a5056:	8983      	ldrh	r3, [r0, #12]
 80a5058:	b14b      	cbz	r3, 80a506e <_ZNK10WiFiSignal16getStrengthValueEv+0x1a>
 80a505a:	6900      	ldr	r0, [r0, #16]
 80a505c:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 80a5060:	d005      	beq.n	80a506e <_ZNK10WiFiSignal16getStrengthValueEv+0x1a>
        return inf_.rssi / 100.0f;
 80a5062:	f001 f86b 	bl	80a613c <__aeabi_i2f>
 80a5066:	4903      	ldr	r1, [pc, #12]	; (80a5074 <_ZNK10WiFiSignal16getStrengthValueEv+0x20>)
 80a5068:	f001 f970 	bl	80a634c <__aeabi_fdiv>
    }
    return 0.0f;
}
 80a506c:	bd08      	pop	{r3, pc}
    return 0.0f;
 80a506e:	2000      	movs	r0, #0
 80a5070:	e7fc      	b.n	80a506c <_ZNK10WiFiSignal16getStrengthValueEv+0x18>
 80a5072:	bf00      	nop
 80a5074:	42c80000 	.word	0x42c80000

080a5078 <_ZNK10WiFiSignal10getQualityEv>:

float WiFiSignal::getQuality() const {
 80a5078:	b508      	push	{r3, lr}
    if (inf_.size != 0 && inf_.quality >= 0) {
 80a507a:	8983      	ldrh	r3, [r0, #12]
 80a507c:	b15b      	cbz	r3, 80a5096 <_ZNK10WiFiSignal10getQualityEv+0x1e>
 80a507e:	6a00      	ldr	r0, [r0, #32]
 80a5080:	2800      	cmp	r0, #0
 80a5082:	db08      	blt.n	80a5096 <_ZNK10WiFiSignal10getQualityEv+0x1e>
        return inf_.quality / 65535.0f * 100.0f;
 80a5084:	f001 f85a 	bl	80a613c <__aeabi_i2f>
 80a5088:	4904      	ldr	r1, [pc, #16]	; (80a509c <_ZNK10WiFiSignal10getQualityEv+0x24>)
 80a508a:	f001 f95f 	bl	80a634c <__aeabi_fdiv>
 80a508e:	4904      	ldr	r1, [pc, #16]	; (80a50a0 <_ZNK10WiFiSignal10getQualityEv+0x28>)
 80a5090:	f001 f8a8 	bl	80a61e4 <__aeabi_fmul>
    }
    return -1.0f;
}
 80a5094:	bd08      	pop	{r3, pc}
    return -1.0f;
 80a5096:	4803      	ldr	r0, [pc, #12]	; (80a50a4 <_ZNK10WiFiSignal10getQualityEv+0x2c>)
 80a5098:	e7fc      	b.n	80a5094 <_ZNK10WiFiSignal10getQualityEv+0x1c>
 80a509a:	bf00      	nop
 80a509c:	477fff00 	.word	0x477fff00
 80a50a0:	42c80000 	.word	0x42c80000
 80a50a4:	bf800000 	.word	0xbf800000

080a50a8 <_ZNK10WiFiSignal15getQualityValueEv>:

float WiFiSignal::getQualityValue() const {
 80a50a8:	b508      	push	{r3, lr}
    if (inf_.size != 0 && inf_.snr != std::numeric_limits<int32_t>::min()) {
 80a50aa:	8983      	ldrh	r3, [r0, #12]
 80a50ac:	b14b      	cbz	r3, 80a50c2 <_ZNK10WiFiSignal15getQualityValueEv+0x1a>
 80a50ae:	6980      	ldr	r0, [r0, #24]
 80a50b0:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 80a50b4:	d005      	beq.n	80a50c2 <_ZNK10WiFiSignal15getQualityValueEv+0x1a>
        return inf_.snr / 100.0f;
 80a50b6:	f001 f841 	bl	80a613c <__aeabi_i2f>
 80a50ba:	4903      	ldr	r1, [pc, #12]	; (80a50c8 <_ZNK10WiFiSignal15getQualityValueEv+0x20>)
 80a50bc:	f001 f946 	bl	80a634c <__aeabi_fdiv>
    }
    return 0.0f;
}
 80a50c0:	bd08      	pop	{r3, pc}
    return 0.0f;
 80a50c2:	2000      	movs	r0, #0
 80a50c4:	e7fc      	b.n	80a50c0 <_ZNK10WiFiSignal15getQualityValueEv+0x18>
 80a50c6:	bf00      	nop
 80a50c8:	42c80000 	.word	0x42c80000

080a50cc <_ZNK10WiFiSignalcvaEv>:
}
 80a50cc:	f990 0004 	ldrsb.w	r0, [r0, #4]
 80a50d0:	4770      	bx	lr

080a50d2 <_ZN10WiFiSignal17fromConnectedInfoERK21wlan_connected_info_t>:
bool WiFiSignal::fromConnectedInfo(const wlan_connected_info_t& inf) {
 80a50d2:	b570      	push	{r4, r5, r6, lr}
    inf_ = inf;
 80a50d4:	460c      	mov	r4, r1
bool WiFiSignal::fromConnectedInfo(const wlan_connected_info_t& inf) {
 80a50d6:	4606      	mov	r6, r0
    inf_ = inf;
 80a50d8:	f100 050c 	add.w	r5, r0, #12
 80a50dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a50de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a50e0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80a50e4:	e885 0003 	stmia.w	r5, {r0, r1}
    this->rssi = inf_.rssi != std::numeric_limits<int32_t>::min() ? inf_.rssi / 100 : 2;
 80a50e8:	6933      	ldr	r3, [r6, #16]
}
 80a50ea:	2001      	movs	r0, #1
    this->rssi = inf_.rssi != std::numeric_limits<int32_t>::min() ? inf_.rssi / 100 : 2;
 80a50ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a50f0:	bf16      	itet	ne
 80a50f2:	2264      	movne	r2, #100	; 0x64
 80a50f4:	2302      	moveq	r3, #2
 80a50f6:	fb93 f3f2 	sdivne	r3, r3, r2
 80a50fa:	6073      	str	r3, [r6, #4]
    this->qual = inf_.snr != std::numeric_limits<int32_t>::min() ? inf_.snr / 100 : 0;
 80a50fc:	69b3      	ldr	r3, [r6, #24]
 80a50fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a5102:	bf16      	itet	ne
 80a5104:	2264      	movne	r2, #100	; 0x64
 80a5106:	2300      	moveq	r3, #0
 80a5108:	fb93 f3f2 	sdivne	r3, r3, r2
 80a510c:	60b3      	str	r3, [r6, #8]
}
 80a510e:	bd70      	pop	{r4, r5, r6, pc}

080a5110 <_ZN5spark9WiFiClass4RSSIEv>:
    int WiFiClass::getCredentials(WiFiAccessPoint* results, size_t result_count) {
        APList apList(results, result_count);
        return apList.start();
    }

    WiFiSignal WiFiClass::RSSI() {
 80a5110:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    WiFiSignal() {}
 80a5114:	2500      	movs	r5, #0
 80a5116:	f04f 0802 	mov.w	r8, #2
 80a511a:	2618      	movs	r6, #24
 80a511c:	460f      	mov	r7, r1
 80a511e:	4b14      	ldr	r3, [pc, #80]	; (80a5170 <_ZN5spark9WiFiClass4RSSIEv+0x60>)
 80a5120:	4632      	mov	r2, r6
 80a5122:	4629      	mov	r1, r5
 80a5124:	e9c0 8501 	strd	r8, r5, [r0, #4]
 80a5128:	b086      	sub	sp, #24
 80a512a:	6003      	str	r3, [r0, #0]
 80a512c:	4604      	mov	r4, r0
 80a512e:	300c      	adds	r0, #12
 80a5130:	f001 fd28 	bl	80a6b84 <memset>
        WiFiSignal sig;
        if (!network_ready(*this, 0, NULL)) {
 80a5134:	462a      	mov	r2, r5
 80a5136:	4629      	mov	r1, r5
 80a5138:	6878      	ldr	r0, [r7, #4]
 80a513a:	f7fe fb91 	bl	80a3860 <network_ready>
 80a513e:	b180      	cbz	r0, 80a5162 <_ZN5spark9WiFiClass4RSSIEv+0x52>
            return sig;
        }

        wlan_connected_info_t info = {0};
 80a5140:	4632      	mov	r2, r6
 80a5142:	4629      	mov	r1, r5
 80a5144:	4668      	mov	r0, sp
 80a5146:	f001 fd1d 	bl	80a6b84 <memset>
        info.size = sizeof(info);
        int r = wlan_connected_info(nullptr, &info, nullptr);
 80a514a:	462a      	mov	r2, r5
 80a514c:	4669      	mov	r1, sp
 80a514e:	4628      	mov	r0, r5
        info.size = sizeof(info);
 80a5150:	f8ad 6000 	strh.w	r6, [sp]
        int r = wlan_connected_info(nullptr, &info, nullptr);
 80a5154:	f7fe fb1e 	bl	80a3794 <wlan_connected_info>
        if (r == 0) {
 80a5158:	b938      	cbnz	r0, 80a516a <_ZN5spark9WiFiClass4RSSIEv+0x5a>
            sig.fromConnectedInfo(info);
 80a515a:	4669      	mov	r1, sp
 80a515c:	4620      	mov	r0, r4
 80a515e:	f7ff ffb8 	bl	80a50d2 <_ZN10WiFiSignal17fromConnectedInfoERK21wlan_connected_info_t>
            return sig;
        }

        sig.rssi = 2;
        return sig;
    }
 80a5162:	4620      	mov	r0, r4
 80a5164:	b006      	add	sp, #24
 80a5166:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        sig.rssi = 2;
 80a516a:	f8c4 8004 	str.w	r8, [r4, #4]
        return sig;
 80a516e:	e7f8      	b.n	80a5162 <_ZN5spark9WiFiClass4RSSIEv+0x52>
 80a5170:	080a8828 	.word	0x080a8828

080a5174 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a5174:	2204      	movs	r2, #4
 80a5176:	4b02      	ldr	r3, [pc, #8]	; (80a5180 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a5178:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a517a:	4a02      	ldr	r2, [pc, #8]	; (80a5184 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a517c:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 80a517e:	4770      	bx	lr
 80a5180:	20000610 	.word	0x20000610
 80a5184:	080a87f4 	.word	0x080a87f4

080a5188 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a5188:	2300      	movs	r3, #0
 80a518a:	6840      	ldr	r0, [r0, #4]
 80a518c:	461a      	mov	r2, r3
 80a518e:	f7fe bb4f 	b.w	80a3830 <network_connect>

080a5192 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a5192:	2200      	movs	r2, #0
 80a5194:	2102      	movs	r1, #2
 80a5196:	6840      	ldr	r0, [r0, #4]
 80a5198:	f7fe bb5a 	b.w	80a3850 <network_disconnect>

080a519c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a519c:	2200      	movs	r2, #0
 80a519e:	6840      	ldr	r0, [r0, #4]
 80a51a0:	4611      	mov	r1, r2
 80a51a2:	f7fe bb4d 	b.w	80a3840 <network_connecting>

080a51a6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a51a6:	2200      	movs	r2, #0
 80a51a8:	6840      	ldr	r0, [r0, #4]
 80a51aa:	4611      	mov	r1, r2
 80a51ac:	f7fe bb58 	b.w	80a3860 <network_ready>

080a51b0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a51b0:	2300      	movs	r3, #0
 80a51b2:	6840      	ldr	r0, [r0, #4]
 80a51b4:	461a      	mov	r2, r3
 80a51b6:	4619      	mov	r1, r3
 80a51b8:	f7fe bb5a 	b.w	80a3870 <network_on>

080a51bc <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a51bc:	2300      	movs	r3, #0
 80a51be:	6840      	ldr	r0, [r0, #4]
 80a51c0:	461a      	mov	r2, r3
 80a51c2:	4619      	mov	r1, r3
 80a51c4:	f7fe bb5c 	b.w	80a3880 <network_off>

080a51c8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a51c8:	2200      	movs	r2, #0
 80a51ca:	6840      	ldr	r0, [r0, #4]
 80a51cc:	f081 0101 	eor.w	r1, r1, #1
 80a51d0:	f7fe bb5e 	b.w	80a3890 <network_listen>

080a51d4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a51d4:	2200      	movs	r2, #0
 80a51d6:	6840      	ldr	r0, [r0, #4]
 80a51d8:	f7fe bb6a 	b.w	80a38b0 <network_set_listen_timeout>

080a51dc <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a51dc:	2200      	movs	r2, #0
 80a51de:	6840      	ldr	r0, [r0, #4]
 80a51e0:	4611      	mov	r1, r2
 80a51e2:	f7fe bb6d 	b.w	80a38c0 <network_get_listen_timeout>

080a51e6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a51e6:	2200      	movs	r2, #0
 80a51e8:	6840      	ldr	r0, [r0, #4]
 80a51ea:	4611      	mov	r1, r2
 80a51ec:	f7fe bb58 	b.w	80a38a0 <network_listening>

080a51f0 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a51f0:	b570      	push	{r4, r5, r6, lr}
 80a51f2:	4615      	mov	r5, r2
 80a51f4:	b08e      	sub	sp, #56	; 0x38
 80a51f6:	4604      	mov	r4, r0
    IPAddress addr;
 80a51f8:	a808      	add	r0, sp, #32
 80a51fa:	f7ff fcd5 	bl	80a4ba8 <_ZN9IPAddressC1Ev>
        HAL_IPAddress ip = {};
 80a51fe:	2211      	movs	r2, #17
 80a5200:	2100      	movs	r1, #0
 80a5202:	a803      	add	r0, sp, #12
 80a5204:	f001 fcbe 	bl	80a6b84 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a5208:	2600      	movs	r6, #0
 80a520a:	4628      	mov	r0, r5
 80a520c:	f002 fa5a 	bl	80a76c4 <strlen>
 80a5210:	4b0a      	ldr	r3, [pc, #40]	; (80a523c <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a5212:	9600      	str	r6, [sp, #0]
 80a5214:	b281      	uxth	r1, r0
 80a5216:	685b      	ldr	r3, [r3, #4]
 80a5218:	4628      	mov	r0, r5
 80a521a:	aa03      	add	r2, sp, #12
 80a521c:	f7fe faaa 	bl	80a3774 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a5220:	b130      	cbz	r0, 80a5230 <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 80a5222:	4631      	mov	r1, r6
 80a5224:	4620      	mov	r0, r4
 80a5226:	f7ff fcdf 	bl	80a4be8 <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a522a:	4620      	mov	r0, r4
 80a522c:	b00e      	add	sp, #56	; 0x38
 80a522e:	bd70      	pop	{r4, r5, r6, pc}
 80a5230:	4620      	mov	r0, r4
 80a5232:	a903      	add	r1, sp, #12
 80a5234:	f7ff fcc6 	bl	80a4bc4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    virtual ~IPAddress() {}
 80a5238:	e7f7      	b.n	80a522a <_ZN5spark12NetworkClass7resolveEPKc+0x3a>
 80a523a:	bf00      	nop
 80a523c:	20000610 	.word	0x20000610

080a5240 <_ZN5spark12NetworkClass4fromEm>:
}
 80a5240:	4a03      	ldr	r2, [pc, #12]	; (80a5250 <_ZN5spark12NetworkClass4fromEm+0x10>)
 80a5242:	4b04      	ldr	r3, [pc, #16]	; (80a5254 <_ZN5spark12NetworkClass4fromEm+0x14>)
 80a5244:	2804      	cmp	r0, #4
 80a5246:	bf14      	ite	ne
 80a5248:	4610      	movne	r0, r2
 80a524a:	4618      	moveq	r0, r3
 80a524c:	4770      	bx	lr
 80a524e:	bf00      	nop
 80a5250:	20000618 	.word	0x20000618
 80a5254:	20000610 	.word	0x20000610

080a5258 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80a5258:	4b02      	ldr	r3, [pc, #8]	; (80a5264 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a525a:	4a03      	ldr	r2, [pc, #12]	; (80a5268 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a525c:	601a      	str	r2, [r3, #0]
 80a525e:	2200      	movs	r2, #0
 80a5260:	605a      	str	r2, [r3, #4]

} // spark
 80a5262:	4770      	bx	lr
 80a5264:	20000618 	.word	0x20000618
 80a5268:	080a884c 	.word	0x080a884c

080a526c <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 80a526c:	2817      	cmp	r0, #23
bool pinAvailable(uint16_t pin) {
 80a526e:	b570      	push	{r4, r5, r6, lr}
 80a5270:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 80a5272:	d901      	bls.n	80a5278 <pinAvailable+0xc>
    return false;
 80a5274:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 80a5276:	bd70      	pop	{r4, r5, r6, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a5278:	f1a0 030d 	sub.w	r3, r0, #13
 80a527c:	2b02      	cmp	r3, #2
 80a527e:	d90b      	bls.n	80a5298 <pinAvailable+0x2c>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 80a5280:	2801      	cmp	r0, #1
 80a5282:	d826      	bhi.n	80a52d2 <pinAvailable+0x66>
 80a5284:	f000 f8a6 	bl	80a53d4 <_Z19__fetch_global_Wirev>
 80a5288:	2100      	movs	r1, #0
 80a528a:	7c00      	ldrb	r0, [r0, #16]
 80a528c:	f7fe f9c0 	bl	80a3610 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a5290:	f080 0001 	eor.w	r0, r0, #1
 80a5294:	b2c0      	uxtb	r0, r0
 80a5296:	e7ee      	b.n	80a5276 <pinAvailable+0xa>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a5298:	4e13      	ldr	r6, [pc, #76]	; (80a52e8 <pinAvailable+0x7c>)
 80a529a:	7831      	ldrb	r1, [r6, #0]
 80a529c:	f3bf 8f5b 	dmb	ish
 80a52a0:	f011 0501 	ands.w	r5, r1, #1
 80a52a4:	d10f      	bne.n	80a52c6 <pinAvailable+0x5a>
 80a52a6:	4630      	mov	r0, r6
 80a52a8:	f7fa fefd 	bl	80a00a6 <__cxa_guard_acquire>
 80a52ac:	b158      	cbz	r0, 80a52c6 <pinAvailable+0x5a>
 80a52ae:	4629      	mov	r1, r5
 80a52b0:	480e      	ldr	r0, [pc, #56]	; (80a52ec <pinAvailable+0x80>)
 80a52b2:	f7fe fba0 	bl	80a39f6 <_ZN8SPIClassC1E19hal_spi_interface_t>
 80a52b6:	4630      	mov	r0, r6
 80a52b8:	f7fa fefa 	bl	80a00b0 <__cxa_guard_release>
 80a52bc:	4a0c      	ldr	r2, [pc, #48]	; (80a52f0 <pinAvailable+0x84>)
 80a52be:	490d      	ldr	r1, [pc, #52]	; (80a52f4 <pinAvailable+0x88>)
 80a52c0:	480a      	ldr	r0, [pc, #40]	; (80a52ec <pinAvailable+0x80>)
 80a52c2:	f000 f8af 	bl	80a5424 <__aeabi_atexit>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a52c6:	4b09      	ldr	r3, [pc, #36]	; (80a52ec <pinAvailable+0x80>)
 80a52c8:	7818      	ldrb	r0, [r3, #0]
 80a52ca:	f7fe fa0b 	bl	80a36e4 <hal_spi_is_enabled>
 80a52ce:	2800      	cmp	r0, #0
 80a52d0:	d1d0      	bne.n	80a5274 <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a52d2:	3c12      	subs	r4, #18
 80a52d4:	2c01      	cmp	r4, #1
 80a52d6:	d805      	bhi.n	80a52e4 <pinAvailable+0x78>
 80a52d8:	f7ff fdca 	bl	80a4e70 <_Z22__fetch_global_Serial1v>
 80a52dc:	7c00      	ldrb	r0, [r0, #16]
 80a52de:	f7fe f957 	bl	80a3590 <hal_usart_is_enabled>
 80a52e2:	e7d5      	b.n	80a5290 <pinAvailable+0x24>
  return true; // 'pin' is available
 80a52e4:	2001      	movs	r0, #1
 80a52e6:	e7c6      	b.n	80a5276 <pinAvailable+0xa>
 80a52e8:	20000244 	.word	0x20000244
 80a52ec:	20000248 	.word	0x20000248
 80a52f0:	20000240 	.word	0x20000240
 80a52f4:	080a02cb 	.word	0x080a02cb

080a52f8 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a52f8:	2817      	cmp	r0, #23
{
 80a52fa:	b538      	push	{r3, r4, r5, lr}
 80a52fc:	4604      	mov	r4, r0
 80a52fe:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a5300:	d80a      	bhi.n	80a5318 <pinMode+0x20>
 80a5302:	29ff      	cmp	r1, #255	; 0xff
 80a5304:	d008      	beq.n	80a5318 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 80a5306:	f7ff ffb1 	bl	80a526c <pinAvailable>
 80a530a:	b128      	cbz	r0, 80a5318 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
 80a530c:	4629      	mov	r1, r5
 80a530e:	4620      	mov	r0, r4
}
 80a5310:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
 80a5314:	f7fe b8ac 	b.w	80a3470 <HAL_Pin_Mode>
}
 80a5318:	bd38      	pop	{r3, r4, r5, pc}

080a531a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a531a:	b538      	push	{r3, r4, r5, lr}
 80a531c:	4604      	mov	r4, r0
 80a531e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a5320:	f7fe f8ae 	bl	80a3480 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a5324:	28ff      	cmp	r0, #255	; 0xff
 80a5326:	d010      	beq.n	80a534a <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 80a5328:	2806      	cmp	r0, #6
 80a532a:	d804      	bhi.n	80a5336 <digitalWrite+0x1c>
 80a532c:	234d      	movs	r3, #77	; 0x4d
 80a532e:	fa23 f000 	lsr.w	r0, r3, r0
 80a5332:	07c3      	lsls	r3, r0, #31
 80a5334:	d409      	bmi.n	80a534a <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a5336:	4620      	mov	r0, r4
 80a5338:	f7ff ff98 	bl	80a526c <pinAvailable>
 80a533c:	b128      	cbz	r0, 80a534a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a533e:	4629      	mov	r1, r5
 80a5340:	4620      	mov	r0, r4
}
 80a5342:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
 80a5346:	f7fe b8a3 	b.w	80a3490 <HAL_GPIO_Write>
}
 80a534a:	bd38      	pop	{r3, r4, r5, pc}

080a534c <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 80a534c:	b510      	push	{r4, lr}
 80a534e:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a5350:	f7fe f896 	bl	80a3480 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
 80a5354:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
 80a5356:	b2db      	uxtb	r3, r3
 80a5358:	2b01      	cmp	r3, #1
 80a535a:	d908      	bls.n	80a536e <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 80a535c:	4620      	mov	r0, r4
 80a535e:	f7ff ff85 	bl	80a526c <pinAvailable>
 80a5362:	b120      	cbz	r0, 80a536e <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a5364:	4620      	mov	r0, r4
}
 80a5366:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
 80a536a:	f7fe b899 	b.w	80a34a0 <HAL_GPIO_Read>
}
 80a536e:	2000      	movs	r0, #0
 80a5370:	bd10      	pop	{r4, pc}
	...

080a5374 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a5374:	2300      	movs	r3, #0
 80a5376:	b513      	push	{r0, r1, r4, lr}
 80a5378:	4c07      	ldr	r4, [pc, #28]	; (80a5398 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a537a:	461a      	mov	r2, r3
 80a537c:	4619      	mov	r1, r3
 80a537e:	4620      	mov	r0, r4
 80a5380:	9300      	str	r3, [sp, #0]
 80a5382:	f7ff fc47 	bl	80a4c14 <_ZN9IPAddressC1Ehhhh>
 80a5386:	4620      	mov	r0, r4
 80a5388:	4a04      	ldr	r2, [pc, #16]	; (80a539c <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a538a:	4905      	ldr	r1, [pc, #20]	; (80a53a0 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a538c:	b002      	add	sp, #8
 80a538e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a5392:	f000 b847 	b.w	80a5424 <__aeabi_atexit>
 80a5396:	bf00      	nop
 80a5398:	20000624 	.word	0x20000624
 80a539c:	20000240 	.word	0x20000240
 80a53a0:	080a4b67 	.word	0x080a4b67

080a53a4 <_Z17acquireWireBufferv>:
#ifndef SPARK_WIRING_NO_I2C

namespace {

hal_i2c_config_t defaultWireConfig() {
	hal_i2c_config_t config = {
 80a53a4:	2300      	movs	r3, #0
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
 80a53a6:	b570      	push	{r4, r5, r6, lr}
	hal_i2c_config_t config = {
 80a53a8:	2520      	movs	r5, #32
 80a53aa:	8043      	strh	r3, [r0, #2]
 80a53ac:	2314      	movs	r3, #20
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a53ae:	4e08      	ldr	r6, [pc, #32]	; (80a53d0 <_Z17acquireWireBufferv+0x2c>)
{
 80a53b0:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 80a53b2:	8003      	strh	r3, [r0, #0]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a53b4:	4631      	mov	r1, r6
	hal_i2c_config_t config = {
 80a53b6:	6085      	str	r5, [r0, #8]
 80a53b8:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a53ba:	4628      	mov	r0, r5
 80a53bc:	f000 f839 	bl	80a5432 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a53c0:	4631      	mov	r1, r6
	};
 80a53c2:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a53c4:	4628      	mov	r0, r5
 80a53c6:	f000 f834 	bl	80a5432 <_ZnajRKSt9nothrow_t>
	};
 80a53ca:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
 80a53cc:	4620      	mov	r0, r4
 80a53ce:	bd70      	pop	{r4, r5, r6, pc}
 80a53d0:	080a8878 	.word	0x080a8878

080a53d4 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 80a53d4:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a53d6:	4d0f      	ldr	r5, [pc, #60]	; (80a5414 <_Z19__fetch_global_Wirev+0x40>)
{
 80a53d8:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a53da:	7829      	ldrb	r1, [r5, #0]
 80a53dc:	f3bf 8f5b 	dmb	ish
 80a53e0:	f011 0401 	ands.w	r4, r1, #1
 80a53e4:	d113      	bne.n	80a540e <_Z19__fetch_global_Wirev+0x3a>
 80a53e6:	4628      	mov	r0, r5
 80a53e8:	f7fa fe5d 	bl	80a00a6 <__cxa_guard_acquire>
 80a53ec:	b178      	cbz	r0, 80a540e <_Z19__fetch_global_Wirev+0x3a>
 80a53ee:	a801      	add	r0, sp, #4
 80a53f0:	f7ff ffd8 	bl	80a53a4 <_Z17acquireWireBufferv>
 80a53f4:	4621      	mov	r1, r4
 80a53f6:	aa01      	add	r2, sp, #4
 80a53f8:	4807      	ldr	r0, [pc, #28]	; (80a5418 <_Z19__fetch_global_Wirev+0x44>)
 80a53fa:	f7ff fda7 	bl	80a4f4c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 80a53fe:	4628      	mov	r0, r5
 80a5400:	f7fa fe56 	bl	80a00b0 <__cxa_guard_release>
 80a5404:	4a05      	ldr	r2, [pc, #20]	; (80a541c <_Z19__fetch_global_Wirev+0x48>)
 80a5406:	4906      	ldr	r1, [pc, #24]	; (80a5420 <_Z19__fetch_global_Wirev+0x4c>)
 80a5408:	4803      	ldr	r0, [pc, #12]	; (80a5418 <_Z19__fetch_global_Wirev+0x44>)
 80a540a:	f000 f80b 	bl	80a5424 <__aeabi_atexit>
	return wire;
}
 80a540e:	4802      	ldr	r0, [pc, #8]	; (80a5418 <_Z19__fetch_global_Wirev+0x44>)
 80a5410:	b007      	add	sp, #28
 80a5412:	bd30      	pop	{r4, r5, pc}
 80a5414:	2000063c 	.word	0x2000063c
 80a5418:	20000640 	.word	0x20000640
 80a541c:	20000240 	.word	0x20000240
 80a5420:	080a4ef5 	.word	0x080a4ef5

080a5424 <__aeabi_atexit>:
 80a5424:	460b      	mov	r3, r1
 80a5426:	4601      	mov	r1, r0
 80a5428:	4618      	mov	r0, r3
 80a542a:	f001 ba99 	b.w	80a6960 <__cxa_atexit>

080a542e <_ZdlPvj>:
 80a542e:	f7fa be36 	b.w	80a009e <_ZdlPv>

080a5432 <_ZnajRKSt9nothrow_t>:
 80a5432:	f7fa be32 	b.w	80a009a <_Znaj>
	...

080a5438 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
 80a5438:	4901      	ldr	r1, [pc, #4]	; (80a5440 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
 80a543a:	f000 b8fb 	b.w	80a5634 <_ZNKSt9type_infoeqERKS_>
 80a543e:	bf00      	nop
 80a5440:	080a8894 	.word	0x080a8894

080a5444 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 80a5444:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80a5446:	2400      	movs	r4, #0
 80a5448:	2310      	movs	r3, #16
 80a544a:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80a544e:	6803      	ldr	r3, [r0, #0]
 80a5450:	4615      	mov	r5, r2
 80a5452:	699e      	ldr	r6, [r3, #24]
 80a5454:	6812      	ldr	r2, [r2, #0]
 80a5456:	466b      	mov	r3, sp
 80a5458:	9400      	str	r4, [sp, #0]
 80a545a:	f88d 4004 	strb.w	r4, [sp, #4]
 80a545e:	47b0      	blx	r6
 80a5460:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80a5464:	f003 0306 	and.w	r3, r3, #6
 80a5468:	2b06      	cmp	r3, #6
 80a546a:	bf09      	itett	eq
 80a546c:	2001      	moveq	r0, #1
 80a546e:	4620      	movne	r0, r4
 80a5470:	9b00      	ldreq	r3, [sp, #0]
 80a5472:	602b      	streq	r3, [r5, #0]
 80a5474:	b004      	add	sp, #16
 80a5476:	bd70      	pop	{r4, r5, r6, pc}

080a5478 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 80a5478:	9800      	ldr	r0, [sp, #0]
 80a547a:	4290      	cmp	r0, r2
 80a547c:	bf14      	ite	ne
 80a547e:	2001      	movne	r0, #1
 80a5480:	2006      	moveq	r0, #6
 80a5482:	4770      	bx	lr

080a5484 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 80a5484:	b510      	push	{r4, lr}
 80a5486:	4604      	mov	r4, r0
 80a5488:	4b02      	ldr	r3, [pc, #8]	; (80a5494 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 80a548a:	6003      	str	r3, [r0, #0]
 80a548c:	f000 f8cf 	bl	80a562e <_ZNSt9type_infoD1Ev>
 80a5490:	4620      	mov	r0, r4
 80a5492:	bd10      	pop	{r4, pc}
 80a5494:	080a88d4 	.word	0x080a88d4

080a5498 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 80a5498:	b510      	push	{r4, lr}
 80a549a:	4604      	mov	r4, r0
 80a549c:	f7ff fff2 	bl	80a5484 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 80a54a0:	4620      	mov	r0, r4
 80a54a2:	2108      	movs	r1, #8
 80a54a4:	f7ff ffc3 	bl	80a542e <_ZdlPvj>
 80a54a8:	4620      	mov	r0, r4
 80a54aa:	bd10      	pop	{r4, pc}

080a54ac <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 80a54ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a54b0:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80a54b4:	461f      	mov	r7, r3
 80a54b6:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 80a54ba:	4598      	cmp	r8, r3
 80a54bc:	4606      	mov	r6, r0
 80a54be:	4615      	mov	r5, r2
 80a54c0:	d107      	bne.n	80a54d2 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 80a54c2:	9907      	ldr	r1, [sp, #28]
 80a54c4:	f000 f8b6 	bl	80a5634 <_ZNKSt9type_infoeqERKS_>
 80a54c8:	b118      	cbz	r0, 80a54d2 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 80a54ca:	7165      	strb	r5, [r4, #5]
 80a54cc:	2000      	movs	r0, #0
 80a54ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a54d2:	4639      	mov	r1, r7
 80a54d4:	4630      	mov	r0, r6
 80a54d6:	f000 f8ad 	bl	80a5634 <_ZNKSt9type_infoeqERKS_>
 80a54da:	2800      	cmp	r0, #0
 80a54dc:	d0f6      	beq.n	80a54cc <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
 80a54de:	2301      	movs	r3, #1
 80a54e0:	f8c4 8000 	str.w	r8, [r4]
 80a54e4:	7125      	strb	r5, [r4, #4]
 80a54e6:	71a3      	strb	r3, [r4, #6]
 80a54e8:	e7f0      	b.n	80a54cc <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

080a54ea <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 80a54ea:	b538      	push	{r3, r4, r5, lr}
 80a54ec:	4615      	mov	r5, r2
 80a54ee:	461c      	mov	r4, r3
 80a54f0:	f000 f8a0 	bl	80a5634 <_ZNKSt9type_infoeqERKS_>
 80a54f4:	b120      	cbz	r0, 80a5500 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 80a54f6:	2308      	movs	r3, #8
 80a54f8:	60e3      	str	r3, [r4, #12]
 80a54fa:	2306      	movs	r3, #6
 80a54fc:	6025      	str	r5, [r4, #0]
 80a54fe:	7123      	strb	r3, [r4, #4]
 80a5500:	bd38      	pop	{r3, r4, r5, pc}

080a5502 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 80a5502:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a5506:	4605      	mov	r5, r0
 80a5508:	460c      	mov	r4, r1
 80a550a:	4616      	mov	r6, r2
 80a550c:	461f      	mov	r7, r3
 80a550e:	f000 f891 	bl	80a5634 <_ZNKSt9type_infoeqERKS_>
 80a5512:	b948      	cbnz	r0, 80a5528 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 80a5514:	2f03      	cmp	r7, #3
 80a5516:	d807      	bhi.n	80a5528 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 80a5518:	6823      	ldr	r3, [r4, #0]
 80a551a:	4632      	mov	r2, r6
 80a551c:	4629      	mov	r1, r5
 80a551e:	4620      	mov	r0, r4
 80a5520:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80a5524:	695b      	ldr	r3, [r3, #20]
 80a5526:	4718      	bx	r3
 80a5528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a552c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 80a552c:	b510      	push	{r4, lr}
 80a552e:	4604      	mov	r4, r0
 80a5530:	4b02      	ldr	r3, [pc, #8]	; (80a553c <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 80a5532:	6003      	str	r3, [r0, #0]
 80a5534:	f7ff ffa6 	bl	80a5484 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 80a5538:	4620      	mov	r0, r4
 80a553a:	bd10      	pop	{r4, pc}
 80a553c:	080a8934 	.word	0x080a8934

080a5540 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 80a5540:	b510      	push	{r4, lr}
 80a5542:	4604      	mov	r4, r0
 80a5544:	f7ff fff2 	bl	80a552c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 80a5548:	4620      	mov	r0, r4
 80a554a:	210c      	movs	r1, #12
 80a554c:	f7ff ff6f 	bl	80a542e <_ZdlPvj>
 80a5550:	4620      	mov	r0, r4
 80a5552:	bd10      	pop	{r4, pc}

080a5554 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 80a5554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a5558:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80a555c:	4606      	mov	r6, r0
 80a555e:	4590      	cmp	r8, r2
 80a5560:	460f      	mov	r7, r1
 80a5562:	4615      	mov	r5, r2
 80a5564:	461c      	mov	r4, r3
 80a5566:	d00b      	beq.n	80a5580 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x2c>
 80a5568:	68b0      	ldr	r0, [r6, #8]
 80a556a:	462a      	mov	r2, r5
 80a556c:	6803      	ldr	r3, [r0, #0]
 80a556e:	f8cd 8018 	str.w	r8, [sp, #24]
 80a5572:	6a1e      	ldr	r6, [r3, #32]
 80a5574:	4639      	mov	r1, r7
 80a5576:	4623      	mov	r3, r4
 80a5578:	46b4      	mov	ip, r6
 80a557a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80a557e:	4760      	bx	ip
 80a5580:	4619      	mov	r1, r3
 80a5582:	f000 f857 	bl	80a5634 <_ZNKSt9type_infoeqERKS_>
 80a5586:	2800      	cmp	r0, #0
 80a5588:	d0ee      	beq.n	80a5568 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x14>
 80a558a:	2006      	movs	r0, #6
 80a558c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a5590 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 80a5590:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a5594:	460d      	mov	r5, r1
 80a5596:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
 80a559a:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
 80a559e:	4619      	mov	r1, r3
 80a55a0:	4681      	mov	r9, r0
 80a55a2:	4617      	mov	r7, r2
 80a55a4:	4698      	mov	r8, r3
 80a55a6:	f000 f845 	bl	80a5634 <_ZNKSt9type_infoeqERKS_>
 80a55aa:	b190      	cbz	r0, 80a55d2 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 80a55ac:	2d00      	cmp	r5, #0
 80a55ae:	6034      	str	r4, [r6, #0]
 80a55b0:	7137      	strb	r7, [r6, #4]
 80a55b2:	db09      	blt.n	80a55c8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 80a55b4:	442c      	add	r4, r5
 80a55b6:	45a2      	cmp	sl, r4
 80a55b8:	bf0c      	ite	eq
 80a55ba:	2406      	moveq	r4, #6
 80a55bc:	2401      	movne	r4, #1
 80a55be:	71b4      	strb	r4, [r6, #6]
 80a55c0:	2000      	movs	r0, #0
 80a55c2:	b001      	add	sp, #4
 80a55c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a55c8:	3502      	adds	r5, #2
 80a55ca:	d1f9      	bne.n	80a55c0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 80a55cc:	2301      	movs	r3, #1
 80a55ce:	71b3      	strb	r3, [r6, #6]
 80a55d0:	e7f6      	b.n	80a55c0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 80a55d2:	4554      	cmp	r4, sl
 80a55d4:	d106      	bne.n	80a55e4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 80a55d6:	4659      	mov	r1, fp
 80a55d8:	4648      	mov	r0, r9
 80a55da:	f000 f82b 	bl	80a5634 <_ZNKSt9type_infoeqERKS_>
 80a55de:	b108      	cbz	r0, 80a55e4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 80a55e0:	7177      	strb	r7, [r6, #5]
 80a55e2:	e7ed      	b.n	80a55c0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 80a55e4:	f8d9 0008 	ldr.w	r0, [r9, #8]
 80a55e8:	463a      	mov	r2, r7
 80a55ea:	6803      	ldr	r3, [r0, #0]
 80a55ec:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
 80a55f0:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
 80a55f4:	69dc      	ldr	r4, [r3, #28]
 80a55f6:	4629      	mov	r1, r5
 80a55f8:	4643      	mov	r3, r8
 80a55fa:	46a4      	mov	ip, r4
 80a55fc:	b001      	add	sp, #4
 80a55fe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a5602:	4760      	bx	ip

080a5604 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 80a5604:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a5608:	4607      	mov	r7, r0
 80a560a:	460c      	mov	r4, r1
 80a560c:	4615      	mov	r5, r2
 80a560e:	461e      	mov	r6, r3
 80a5610:	f7ff ff6b 	bl	80a54ea <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 80a5614:	b948      	cbnz	r0, 80a562a <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 80a5616:	68b8      	ldr	r0, [r7, #8]
 80a5618:	462a      	mov	r2, r5
 80a561a:	6803      	ldr	r3, [r0, #0]
 80a561c:	4621      	mov	r1, r4
 80a561e:	699f      	ldr	r7, [r3, #24]
 80a5620:	4633      	mov	r3, r6
 80a5622:	46bc      	mov	ip, r7
 80a5624:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80a5628:	4760      	bx	ip
 80a562a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a562e <_ZNSt9type_infoD1Ev>:
 80a562e:	4770      	bx	lr

080a5630 <_ZNKSt9type_info14__is_pointer_pEv>:
 80a5630:	2000      	movs	r0, #0
 80a5632:	4770      	bx	lr

080a5634 <_ZNKSt9type_infoeqERKS_>:
 80a5634:	4281      	cmp	r1, r0
 80a5636:	b508      	push	{r3, lr}
 80a5638:	d00e      	beq.n	80a5658 <_ZNKSt9type_infoeqERKS_+0x24>
 80a563a:	6840      	ldr	r0, [r0, #4]
 80a563c:	7803      	ldrb	r3, [r0, #0]
 80a563e:	2b2a      	cmp	r3, #42	; 0x2a
 80a5640:	d00c      	beq.n	80a565c <_ZNKSt9type_infoeqERKS_+0x28>
 80a5642:	6849      	ldr	r1, [r1, #4]
 80a5644:	780b      	ldrb	r3, [r1, #0]
 80a5646:	2b2a      	cmp	r3, #42	; 0x2a
 80a5648:	bf08      	it	eq
 80a564a:	3101      	addeq	r1, #1
 80a564c:	f001 fac6 	bl	80a6bdc <strcmp>
 80a5650:	fab0 f080 	clz	r0, r0
 80a5654:	0940      	lsrs	r0, r0, #5
 80a5656:	bd08      	pop	{r3, pc}
 80a5658:	2001      	movs	r0, #1
 80a565a:	e7fc      	b.n	80a5656 <_ZNKSt9type_infoeqERKS_+0x22>
 80a565c:	2000      	movs	r0, #0
 80a565e:	e7fa      	b.n	80a5656 <_ZNKSt9type_infoeqERKS_+0x22>

080a5660 <__aeabi_drsub>:
 80a5660:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a5664:	e002      	b.n	80a566c <__adddf3>
 80a5666:	bf00      	nop

080a5668 <__aeabi_dsub>:
 80a5668:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a566c <__adddf3>:
 80a566c:	b530      	push	{r4, r5, lr}
 80a566e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a5672:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a5676:	ea94 0f05 	teq	r4, r5
 80a567a:	bf08      	it	eq
 80a567c:	ea90 0f02 	teqeq	r0, r2
 80a5680:	bf1f      	itttt	ne
 80a5682:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a5686:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a568a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a568e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a5692:	f000 80e2 	beq.w	80a585a <__adddf3+0x1ee>
 80a5696:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a569a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a569e:	bfb8      	it	lt
 80a56a0:	426d      	neglt	r5, r5
 80a56a2:	dd0c      	ble.n	80a56be <__adddf3+0x52>
 80a56a4:	442c      	add	r4, r5
 80a56a6:	ea80 0202 	eor.w	r2, r0, r2
 80a56aa:	ea81 0303 	eor.w	r3, r1, r3
 80a56ae:	ea82 0000 	eor.w	r0, r2, r0
 80a56b2:	ea83 0101 	eor.w	r1, r3, r1
 80a56b6:	ea80 0202 	eor.w	r2, r0, r2
 80a56ba:	ea81 0303 	eor.w	r3, r1, r3
 80a56be:	2d36      	cmp	r5, #54	; 0x36
 80a56c0:	bf88      	it	hi
 80a56c2:	bd30      	pophi	{r4, r5, pc}
 80a56c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a56c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a56cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a56d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a56d4:	d002      	beq.n	80a56dc <__adddf3+0x70>
 80a56d6:	4240      	negs	r0, r0
 80a56d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a56dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a56e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a56e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a56e8:	d002      	beq.n	80a56f0 <__adddf3+0x84>
 80a56ea:	4252      	negs	r2, r2
 80a56ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a56f0:	ea94 0f05 	teq	r4, r5
 80a56f4:	f000 80a7 	beq.w	80a5846 <__adddf3+0x1da>
 80a56f8:	f1a4 0401 	sub.w	r4, r4, #1
 80a56fc:	f1d5 0e20 	rsbs	lr, r5, #32
 80a5700:	db0d      	blt.n	80a571e <__adddf3+0xb2>
 80a5702:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a5706:	fa22 f205 	lsr.w	r2, r2, r5
 80a570a:	1880      	adds	r0, r0, r2
 80a570c:	f141 0100 	adc.w	r1, r1, #0
 80a5710:	fa03 f20e 	lsl.w	r2, r3, lr
 80a5714:	1880      	adds	r0, r0, r2
 80a5716:	fa43 f305 	asr.w	r3, r3, r5
 80a571a:	4159      	adcs	r1, r3
 80a571c:	e00e      	b.n	80a573c <__adddf3+0xd0>
 80a571e:	f1a5 0520 	sub.w	r5, r5, #32
 80a5722:	f10e 0e20 	add.w	lr, lr, #32
 80a5726:	2a01      	cmp	r2, #1
 80a5728:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a572c:	bf28      	it	cs
 80a572e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a5732:	fa43 f305 	asr.w	r3, r3, r5
 80a5736:	18c0      	adds	r0, r0, r3
 80a5738:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a573c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a5740:	d507      	bpl.n	80a5752 <__adddf3+0xe6>
 80a5742:	f04f 0e00 	mov.w	lr, #0
 80a5746:	f1dc 0c00 	rsbs	ip, ip, #0
 80a574a:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a574e:	eb6e 0101 	sbc.w	r1, lr, r1
 80a5752:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a5756:	d31b      	bcc.n	80a5790 <__adddf3+0x124>
 80a5758:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a575c:	d30c      	bcc.n	80a5778 <__adddf3+0x10c>
 80a575e:	0849      	lsrs	r1, r1, #1
 80a5760:	ea5f 0030 	movs.w	r0, r0, rrx
 80a5764:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a5768:	f104 0401 	add.w	r4, r4, #1
 80a576c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a5770:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a5774:	f080 809a 	bcs.w	80a58ac <__adddf3+0x240>
 80a5778:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a577c:	bf08      	it	eq
 80a577e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a5782:	f150 0000 	adcs.w	r0, r0, #0
 80a5786:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a578a:	ea41 0105 	orr.w	r1, r1, r5
 80a578e:	bd30      	pop	{r4, r5, pc}
 80a5790:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a5794:	4140      	adcs	r0, r0
 80a5796:	eb41 0101 	adc.w	r1, r1, r1
 80a579a:	3c01      	subs	r4, #1
 80a579c:	bf28      	it	cs
 80a579e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80a57a2:	d2e9      	bcs.n	80a5778 <__adddf3+0x10c>
 80a57a4:	f091 0f00 	teq	r1, #0
 80a57a8:	bf04      	itt	eq
 80a57aa:	4601      	moveq	r1, r0
 80a57ac:	2000      	moveq	r0, #0
 80a57ae:	fab1 f381 	clz	r3, r1
 80a57b2:	bf08      	it	eq
 80a57b4:	3320      	addeq	r3, #32
 80a57b6:	f1a3 030b 	sub.w	r3, r3, #11
 80a57ba:	f1b3 0220 	subs.w	r2, r3, #32
 80a57be:	da0c      	bge.n	80a57da <__adddf3+0x16e>
 80a57c0:	320c      	adds	r2, #12
 80a57c2:	dd08      	ble.n	80a57d6 <__adddf3+0x16a>
 80a57c4:	f102 0c14 	add.w	ip, r2, #20
 80a57c8:	f1c2 020c 	rsb	r2, r2, #12
 80a57cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80a57d0:	fa21 f102 	lsr.w	r1, r1, r2
 80a57d4:	e00c      	b.n	80a57f0 <__adddf3+0x184>
 80a57d6:	f102 0214 	add.w	r2, r2, #20
 80a57da:	bfd8      	it	le
 80a57dc:	f1c2 0c20 	rsble	ip, r2, #32
 80a57e0:	fa01 f102 	lsl.w	r1, r1, r2
 80a57e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a57e8:	bfdc      	itt	le
 80a57ea:	ea41 010c 	orrle.w	r1, r1, ip
 80a57ee:	4090      	lslle	r0, r2
 80a57f0:	1ae4      	subs	r4, r4, r3
 80a57f2:	bfa2      	ittt	ge
 80a57f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a57f8:	4329      	orrge	r1, r5
 80a57fa:	bd30      	popge	{r4, r5, pc}
 80a57fc:	ea6f 0404 	mvn.w	r4, r4
 80a5800:	3c1f      	subs	r4, #31
 80a5802:	da1c      	bge.n	80a583e <__adddf3+0x1d2>
 80a5804:	340c      	adds	r4, #12
 80a5806:	dc0e      	bgt.n	80a5826 <__adddf3+0x1ba>
 80a5808:	f104 0414 	add.w	r4, r4, #20
 80a580c:	f1c4 0220 	rsb	r2, r4, #32
 80a5810:	fa20 f004 	lsr.w	r0, r0, r4
 80a5814:	fa01 f302 	lsl.w	r3, r1, r2
 80a5818:	ea40 0003 	orr.w	r0, r0, r3
 80a581c:	fa21 f304 	lsr.w	r3, r1, r4
 80a5820:	ea45 0103 	orr.w	r1, r5, r3
 80a5824:	bd30      	pop	{r4, r5, pc}
 80a5826:	f1c4 040c 	rsb	r4, r4, #12
 80a582a:	f1c4 0220 	rsb	r2, r4, #32
 80a582e:	fa20 f002 	lsr.w	r0, r0, r2
 80a5832:	fa01 f304 	lsl.w	r3, r1, r4
 80a5836:	ea40 0003 	orr.w	r0, r0, r3
 80a583a:	4629      	mov	r1, r5
 80a583c:	bd30      	pop	{r4, r5, pc}
 80a583e:	fa21 f004 	lsr.w	r0, r1, r4
 80a5842:	4629      	mov	r1, r5
 80a5844:	bd30      	pop	{r4, r5, pc}
 80a5846:	f094 0f00 	teq	r4, #0
 80a584a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a584e:	bf06      	itte	eq
 80a5850:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a5854:	3401      	addeq	r4, #1
 80a5856:	3d01      	subne	r5, #1
 80a5858:	e74e      	b.n	80a56f8 <__adddf3+0x8c>
 80a585a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a585e:	bf18      	it	ne
 80a5860:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a5864:	d029      	beq.n	80a58ba <__adddf3+0x24e>
 80a5866:	ea94 0f05 	teq	r4, r5
 80a586a:	bf08      	it	eq
 80a586c:	ea90 0f02 	teqeq	r0, r2
 80a5870:	d005      	beq.n	80a587e <__adddf3+0x212>
 80a5872:	ea54 0c00 	orrs.w	ip, r4, r0
 80a5876:	bf04      	itt	eq
 80a5878:	4619      	moveq	r1, r3
 80a587a:	4610      	moveq	r0, r2
 80a587c:	bd30      	pop	{r4, r5, pc}
 80a587e:	ea91 0f03 	teq	r1, r3
 80a5882:	bf1e      	ittt	ne
 80a5884:	2100      	movne	r1, #0
 80a5886:	2000      	movne	r0, #0
 80a5888:	bd30      	popne	{r4, r5, pc}
 80a588a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a588e:	d105      	bne.n	80a589c <__adddf3+0x230>
 80a5890:	0040      	lsls	r0, r0, #1
 80a5892:	4149      	adcs	r1, r1
 80a5894:	bf28      	it	cs
 80a5896:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a589a:	bd30      	pop	{r4, r5, pc}
 80a589c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a58a0:	bf3c      	itt	cc
 80a58a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a58a6:	bd30      	popcc	{r4, r5, pc}
 80a58a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a58ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a58b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a58b4:	f04f 0000 	mov.w	r0, #0
 80a58b8:	bd30      	pop	{r4, r5, pc}
 80a58ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a58be:	bf1a      	itte	ne
 80a58c0:	4619      	movne	r1, r3
 80a58c2:	4610      	movne	r0, r2
 80a58c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a58c8:	bf1c      	itt	ne
 80a58ca:	460b      	movne	r3, r1
 80a58cc:	4602      	movne	r2, r0
 80a58ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a58d2:	bf06      	itte	eq
 80a58d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a58d8:	ea91 0f03 	teqeq	r1, r3
 80a58dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a58e0:	bd30      	pop	{r4, r5, pc}
 80a58e2:	bf00      	nop

080a58e4 <__aeabi_ui2d>:
 80a58e4:	f090 0f00 	teq	r0, #0
 80a58e8:	bf04      	itt	eq
 80a58ea:	2100      	moveq	r1, #0
 80a58ec:	4770      	bxeq	lr
 80a58ee:	b530      	push	{r4, r5, lr}
 80a58f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a58f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a58f8:	f04f 0500 	mov.w	r5, #0
 80a58fc:	f04f 0100 	mov.w	r1, #0
 80a5900:	e750      	b.n	80a57a4 <__adddf3+0x138>
 80a5902:	bf00      	nop

080a5904 <__aeabi_i2d>:
 80a5904:	f090 0f00 	teq	r0, #0
 80a5908:	bf04      	itt	eq
 80a590a:	2100      	moveq	r1, #0
 80a590c:	4770      	bxeq	lr
 80a590e:	b530      	push	{r4, r5, lr}
 80a5910:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a5914:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a5918:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a591c:	bf48      	it	mi
 80a591e:	4240      	negmi	r0, r0
 80a5920:	f04f 0100 	mov.w	r1, #0
 80a5924:	e73e      	b.n	80a57a4 <__adddf3+0x138>
 80a5926:	bf00      	nop

080a5928 <__aeabi_f2d>:
 80a5928:	0042      	lsls	r2, r0, #1
 80a592a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a592e:	ea4f 0131 	mov.w	r1, r1, rrx
 80a5932:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a5936:	bf1f      	itttt	ne
 80a5938:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a593c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a5940:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a5944:	4770      	bxne	lr
 80a5946:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80a594a:	bf08      	it	eq
 80a594c:	4770      	bxeq	lr
 80a594e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80a5952:	bf04      	itt	eq
 80a5954:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80a5958:	4770      	bxeq	lr
 80a595a:	b530      	push	{r4, r5, lr}
 80a595c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a5960:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a5964:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a5968:	e71c      	b.n	80a57a4 <__adddf3+0x138>
 80a596a:	bf00      	nop

080a596c <__aeabi_ul2d>:
 80a596c:	ea50 0201 	orrs.w	r2, r0, r1
 80a5970:	bf08      	it	eq
 80a5972:	4770      	bxeq	lr
 80a5974:	b530      	push	{r4, r5, lr}
 80a5976:	f04f 0500 	mov.w	r5, #0
 80a597a:	e00a      	b.n	80a5992 <__aeabi_l2d+0x16>

080a597c <__aeabi_l2d>:
 80a597c:	ea50 0201 	orrs.w	r2, r0, r1
 80a5980:	bf08      	it	eq
 80a5982:	4770      	bxeq	lr
 80a5984:	b530      	push	{r4, r5, lr}
 80a5986:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a598a:	d502      	bpl.n	80a5992 <__aeabi_l2d+0x16>
 80a598c:	4240      	negs	r0, r0
 80a598e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a5992:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a5996:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a599a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a599e:	f43f aed8 	beq.w	80a5752 <__adddf3+0xe6>
 80a59a2:	f04f 0203 	mov.w	r2, #3
 80a59a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a59aa:	bf18      	it	ne
 80a59ac:	3203      	addne	r2, #3
 80a59ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a59b2:	bf18      	it	ne
 80a59b4:	3203      	addne	r2, #3
 80a59b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a59ba:	f1c2 0320 	rsb	r3, r2, #32
 80a59be:	fa00 fc03 	lsl.w	ip, r0, r3
 80a59c2:	fa20 f002 	lsr.w	r0, r0, r2
 80a59c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80a59ca:	ea40 000e 	orr.w	r0, r0, lr
 80a59ce:	fa21 f102 	lsr.w	r1, r1, r2
 80a59d2:	4414      	add	r4, r2
 80a59d4:	e6bd      	b.n	80a5752 <__adddf3+0xe6>
 80a59d6:	bf00      	nop

080a59d8 <__aeabi_dmul>:
 80a59d8:	b570      	push	{r4, r5, r6, lr}
 80a59da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a59de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a59e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a59e6:	bf1d      	ittte	ne
 80a59e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a59ec:	ea94 0f0c 	teqne	r4, ip
 80a59f0:	ea95 0f0c 	teqne	r5, ip
 80a59f4:	f000 f8de 	bleq	80a5bb4 <__aeabi_dmul+0x1dc>
 80a59f8:	442c      	add	r4, r5
 80a59fa:	ea81 0603 	eor.w	r6, r1, r3
 80a59fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a5a02:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a5a06:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a5a0a:	bf18      	it	ne
 80a5a0c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a5a10:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a5a14:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a5a18:	d038      	beq.n	80a5a8c <__aeabi_dmul+0xb4>
 80a5a1a:	fba0 ce02 	umull	ip, lr, r0, r2
 80a5a1e:	f04f 0500 	mov.w	r5, #0
 80a5a22:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a5a26:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a5a2a:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a5a2e:	f04f 0600 	mov.w	r6, #0
 80a5a32:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a5a36:	f09c 0f00 	teq	ip, #0
 80a5a3a:	bf18      	it	ne
 80a5a3c:	f04e 0e01 	orrne.w	lr, lr, #1
 80a5a40:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a5a44:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a5a48:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a5a4c:	d204      	bcs.n	80a5a58 <__aeabi_dmul+0x80>
 80a5a4e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a5a52:	416d      	adcs	r5, r5
 80a5a54:	eb46 0606 	adc.w	r6, r6, r6
 80a5a58:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a5a5c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a5a60:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a5a64:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a5a68:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a5a6c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a5a70:	bf88      	it	hi
 80a5a72:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a5a76:	d81e      	bhi.n	80a5ab6 <__aeabi_dmul+0xde>
 80a5a78:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a5a7c:	bf08      	it	eq
 80a5a7e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a5a82:	f150 0000 	adcs.w	r0, r0, #0
 80a5a86:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a5a8a:	bd70      	pop	{r4, r5, r6, pc}
 80a5a8c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a5a90:	ea46 0101 	orr.w	r1, r6, r1
 80a5a94:	ea40 0002 	orr.w	r0, r0, r2
 80a5a98:	ea81 0103 	eor.w	r1, r1, r3
 80a5a9c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a5aa0:	bfc2      	ittt	gt
 80a5aa2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a5aa6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a5aaa:	bd70      	popgt	{r4, r5, r6, pc}
 80a5aac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a5ab0:	f04f 0e00 	mov.w	lr, #0
 80a5ab4:	3c01      	subs	r4, #1
 80a5ab6:	f300 80ab 	bgt.w	80a5c10 <__aeabi_dmul+0x238>
 80a5aba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a5abe:	bfde      	ittt	le
 80a5ac0:	2000      	movle	r0, #0
 80a5ac2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a5ac6:	bd70      	pople	{r4, r5, r6, pc}
 80a5ac8:	f1c4 0400 	rsb	r4, r4, #0
 80a5acc:	3c20      	subs	r4, #32
 80a5ace:	da35      	bge.n	80a5b3c <__aeabi_dmul+0x164>
 80a5ad0:	340c      	adds	r4, #12
 80a5ad2:	dc1b      	bgt.n	80a5b0c <__aeabi_dmul+0x134>
 80a5ad4:	f104 0414 	add.w	r4, r4, #20
 80a5ad8:	f1c4 0520 	rsb	r5, r4, #32
 80a5adc:	fa00 f305 	lsl.w	r3, r0, r5
 80a5ae0:	fa20 f004 	lsr.w	r0, r0, r4
 80a5ae4:	fa01 f205 	lsl.w	r2, r1, r5
 80a5ae8:	ea40 0002 	orr.w	r0, r0, r2
 80a5aec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a5af0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a5af4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a5af8:	fa21 f604 	lsr.w	r6, r1, r4
 80a5afc:	eb42 0106 	adc.w	r1, r2, r6
 80a5b00:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a5b04:	bf08      	it	eq
 80a5b06:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a5b0a:	bd70      	pop	{r4, r5, r6, pc}
 80a5b0c:	f1c4 040c 	rsb	r4, r4, #12
 80a5b10:	f1c4 0520 	rsb	r5, r4, #32
 80a5b14:	fa00 f304 	lsl.w	r3, r0, r4
 80a5b18:	fa20 f005 	lsr.w	r0, r0, r5
 80a5b1c:	fa01 f204 	lsl.w	r2, r1, r4
 80a5b20:	ea40 0002 	orr.w	r0, r0, r2
 80a5b24:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a5b28:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a5b2c:	f141 0100 	adc.w	r1, r1, #0
 80a5b30:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a5b34:	bf08      	it	eq
 80a5b36:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a5b3a:	bd70      	pop	{r4, r5, r6, pc}
 80a5b3c:	f1c4 0520 	rsb	r5, r4, #32
 80a5b40:	fa00 f205 	lsl.w	r2, r0, r5
 80a5b44:	ea4e 0e02 	orr.w	lr, lr, r2
 80a5b48:	fa20 f304 	lsr.w	r3, r0, r4
 80a5b4c:	fa01 f205 	lsl.w	r2, r1, r5
 80a5b50:	ea43 0302 	orr.w	r3, r3, r2
 80a5b54:	fa21 f004 	lsr.w	r0, r1, r4
 80a5b58:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a5b5c:	fa21 f204 	lsr.w	r2, r1, r4
 80a5b60:	ea20 0002 	bic.w	r0, r0, r2
 80a5b64:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a5b68:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a5b6c:	bf08      	it	eq
 80a5b6e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a5b72:	bd70      	pop	{r4, r5, r6, pc}
 80a5b74:	f094 0f00 	teq	r4, #0
 80a5b78:	d10f      	bne.n	80a5b9a <__aeabi_dmul+0x1c2>
 80a5b7a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a5b7e:	0040      	lsls	r0, r0, #1
 80a5b80:	eb41 0101 	adc.w	r1, r1, r1
 80a5b84:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a5b88:	bf08      	it	eq
 80a5b8a:	3c01      	subeq	r4, #1
 80a5b8c:	d0f7      	beq.n	80a5b7e <__aeabi_dmul+0x1a6>
 80a5b8e:	ea41 0106 	orr.w	r1, r1, r6
 80a5b92:	f095 0f00 	teq	r5, #0
 80a5b96:	bf18      	it	ne
 80a5b98:	4770      	bxne	lr
 80a5b9a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a5b9e:	0052      	lsls	r2, r2, #1
 80a5ba0:	eb43 0303 	adc.w	r3, r3, r3
 80a5ba4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a5ba8:	bf08      	it	eq
 80a5baa:	3d01      	subeq	r5, #1
 80a5bac:	d0f7      	beq.n	80a5b9e <__aeabi_dmul+0x1c6>
 80a5bae:	ea43 0306 	orr.w	r3, r3, r6
 80a5bb2:	4770      	bx	lr
 80a5bb4:	ea94 0f0c 	teq	r4, ip
 80a5bb8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a5bbc:	bf18      	it	ne
 80a5bbe:	ea95 0f0c 	teqne	r5, ip
 80a5bc2:	d00c      	beq.n	80a5bde <__aeabi_dmul+0x206>
 80a5bc4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a5bc8:	bf18      	it	ne
 80a5bca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a5bce:	d1d1      	bne.n	80a5b74 <__aeabi_dmul+0x19c>
 80a5bd0:	ea81 0103 	eor.w	r1, r1, r3
 80a5bd4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a5bd8:	f04f 0000 	mov.w	r0, #0
 80a5bdc:	bd70      	pop	{r4, r5, r6, pc}
 80a5bde:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a5be2:	bf06      	itte	eq
 80a5be4:	4610      	moveq	r0, r2
 80a5be6:	4619      	moveq	r1, r3
 80a5be8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a5bec:	d019      	beq.n	80a5c22 <__aeabi_dmul+0x24a>
 80a5bee:	ea94 0f0c 	teq	r4, ip
 80a5bf2:	d102      	bne.n	80a5bfa <__aeabi_dmul+0x222>
 80a5bf4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a5bf8:	d113      	bne.n	80a5c22 <__aeabi_dmul+0x24a>
 80a5bfa:	ea95 0f0c 	teq	r5, ip
 80a5bfe:	d105      	bne.n	80a5c0c <__aeabi_dmul+0x234>
 80a5c00:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a5c04:	bf1c      	itt	ne
 80a5c06:	4610      	movne	r0, r2
 80a5c08:	4619      	movne	r1, r3
 80a5c0a:	d10a      	bne.n	80a5c22 <__aeabi_dmul+0x24a>
 80a5c0c:	ea81 0103 	eor.w	r1, r1, r3
 80a5c10:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a5c14:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a5c18:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a5c1c:	f04f 0000 	mov.w	r0, #0
 80a5c20:	bd70      	pop	{r4, r5, r6, pc}
 80a5c22:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a5c26:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a5c2a:	bd70      	pop	{r4, r5, r6, pc}

080a5c2c <__aeabi_ddiv>:
 80a5c2c:	b570      	push	{r4, r5, r6, lr}
 80a5c2e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a5c32:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a5c36:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a5c3a:	bf1d      	ittte	ne
 80a5c3c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a5c40:	ea94 0f0c 	teqne	r4, ip
 80a5c44:	ea95 0f0c 	teqne	r5, ip
 80a5c48:	f000 f8a7 	bleq	80a5d9a <__aeabi_ddiv+0x16e>
 80a5c4c:	eba4 0405 	sub.w	r4, r4, r5
 80a5c50:	ea81 0e03 	eor.w	lr, r1, r3
 80a5c54:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a5c58:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a5c5c:	f000 8088 	beq.w	80a5d70 <__aeabi_ddiv+0x144>
 80a5c60:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a5c64:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a5c68:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a5c6c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a5c70:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a5c74:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a5c78:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a5c7c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a5c80:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a5c84:	429d      	cmp	r5, r3
 80a5c86:	bf08      	it	eq
 80a5c88:	4296      	cmpeq	r6, r2
 80a5c8a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a5c8e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a5c92:	d202      	bcs.n	80a5c9a <__aeabi_ddiv+0x6e>
 80a5c94:	085b      	lsrs	r3, r3, #1
 80a5c96:	ea4f 0232 	mov.w	r2, r2, rrx
 80a5c9a:	1ab6      	subs	r6, r6, r2
 80a5c9c:	eb65 0503 	sbc.w	r5, r5, r3
 80a5ca0:	085b      	lsrs	r3, r3, #1
 80a5ca2:	ea4f 0232 	mov.w	r2, r2, rrx
 80a5ca6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a5caa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a5cae:	ebb6 0e02 	subs.w	lr, r6, r2
 80a5cb2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a5cb6:	bf22      	ittt	cs
 80a5cb8:	1ab6      	subcs	r6, r6, r2
 80a5cba:	4675      	movcs	r5, lr
 80a5cbc:	ea40 000c 	orrcs.w	r0, r0, ip
 80a5cc0:	085b      	lsrs	r3, r3, #1
 80a5cc2:	ea4f 0232 	mov.w	r2, r2, rrx
 80a5cc6:	ebb6 0e02 	subs.w	lr, r6, r2
 80a5cca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a5cce:	bf22      	ittt	cs
 80a5cd0:	1ab6      	subcs	r6, r6, r2
 80a5cd2:	4675      	movcs	r5, lr
 80a5cd4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a5cd8:	085b      	lsrs	r3, r3, #1
 80a5cda:	ea4f 0232 	mov.w	r2, r2, rrx
 80a5cde:	ebb6 0e02 	subs.w	lr, r6, r2
 80a5ce2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a5ce6:	bf22      	ittt	cs
 80a5ce8:	1ab6      	subcs	r6, r6, r2
 80a5cea:	4675      	movcs	r5, lr
 80a5cec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a5cf0:	085b      	lsrs	r3, r3, #1
 80a5cf2:	ea4f 0232 	mov.w	r2, r2, rrx
 80a5cf6:	ebb6 0e02 	subs.w	lr, r6, r2
 80a5cfa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a5cfe:	bf22      	ittt	cs
 80a5d00:	1ab6      	subcs	r6, r6, r2
 80a5d02:	4675      	movcs	r5, lr
 80a5d04:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a5d08:	ea55 0e06 	orrs.w	lr, r5, r6
 80a5d0c:	d018      	beq.n	80a5d40 <__aeabi_ddiv+0x114>
 80a5d0e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a5d12:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a5d16:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a5d1a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a5d1e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a5d22:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a5d26:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a5d2a:	d1c0      	bne.n	80a5cae <__aeabi_ddiv+0x82>
 80a5d2c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a5d30:	d10b      	bne.n	80a5d4a <__aeabi_ddiv+0x11e>
 80a5d32:	ea41 0100 	orr.w	r1, r1, r0
 80a5d36:	f04f 0000 	mov.w	r0, #0
 80a5d3a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a5d3e:	e7b6      	b.n	80a5cae <__aeabi_ddiv+0x82>
 80a5d40:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a5d44:	bf04      	itt	eq
 80a5d46:	4301      	orreq	r1, r0
 80a5d48:	2000      	moveq	r0, #0
 80a5d4a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a5d4e:	bf88      	it	hi
 80a5d50:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a5d54:	f63f aeaf 	bhi.w	80a5ab6 <__aeabi_dmul+0xde>
 80a5d58:	ebb5 0c03 	subs.w	ip, r5, r3
 80a5d5c:	bf04      	itt	eq
 80a5d5e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a5d62:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a5d66:	f150 0000 	adcs.w	r0, r0, #0
 80a5d6a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a5d6e:	bd70      	pop	{r4, r5, r6, pc}
 80a5d70:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a5d74:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a5d78:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a5d7c:	bfc2      	ittt	gt
 80a5d7e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a5d82:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a5d86:	bd70      	popgt	{r4, r5, r6, pc}
 80a5d88:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a5d8c:	f04f 0e00 	mov.w	lr, #0
 80a5d90:	3c01      	subs	r4, #1
 80a5d92:	e690      	b.n	80a5ab6 <__aeabi_dmul+0xde>
 80a5d94:	ea45 0e06 	orr.w	lr, r5, r6
 80a5d98:	e68d      	b.n	80a5ab6 <__aeabi_dmul+0xde>
 80a5d9a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a5d9e:	ea94 0f0c 	teq	r4, ip
 80a5da2:	bf08      	it	eq
 80a5da4:	ea95 0f0c 	teqeq	r5, ip
 80a5da8:	f43f af3b 	beq.w	80a5c22 <__aeabi_dmul+0x24a>
 80a5dac:	ea94 0f0c 	teq	r4, ip
 80a5db0:	d10a      	bne.n	80a5dc8 <__aeabi_ddiv+0x19c>
 80a5db2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a5db6:	f47f af34 	bne.w	80a5c22 <__aeabi_dmul+0x24a>
 80a5dba:	ea95 0f0c 	teq	r5, ip
 80a5dbe:	f47f af25 	bne.w	80a5c0c <__aeabi_dmul+0x234>
 80a5dc2:	4610      	mov	r0, r2
 80a5dc4:	4619      	mov	r1, r3
 80a5dc6:	e72c      	b.n	80a5c22 <__aeabi_dmul+0x24a>
 80a5dc8:	ea95 0f0c 	teq	r5, ip
 80a5dcc:	d106      	bne.n	80a5ddc <__aeabi_ddiv+0x1b0>
 80a5dce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a5dd2:	f43f aefd 	beq.w	80a5bd0 <__aeabi_dmul+0x1f8>
 80a5dd6:	4610      	mov	r0, r2
 80a5dd8:	4619      	mov	r1, r3
 80a5dda:	e722      	b.n	80a5c22 <__aeabi_dmul+0x24a>
 80a5ddc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a5de0:	bf18      	it	ne
 80a5de2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a5de6:	f47f aec5 	bne.w	80a5b74 <__aeabi_dmul+0x19c>
 80a5dea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a5dee:	f47f af0d 	bne.w	80a5c0c <__aeabi_dmul+0x234>
 80a5df2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a5df6:	f47f aeeb 	bne.w	80a5bd0 <__aeabi_dmul+0x1f8>
 80a5dfa:	e712      	b.n	80a5c22 <__aeabi_dmul+0x24a>

080a5dfc <__gedf2>:
 80a5dfc:	f04f 3cff 	mov.w	ip, #4294967295
 80a5e00:	e006      	b.n	80a5e10 <__cmpdf2+0x4>
 80a5e02:	bf00      	nop

080a5e04 <__ledf2>:
 80a5e04:	f04f 0c01 	mov.w	ip, #1
 80a5e08:	e002      	b.n	80a5e10 <__cmpdf2+0x4>
 80a5e0a:	bf00      	nop

080a5e0c <__cmpdf2>:
 80a5e0c:	f04f 0c01 	mov.w	ip, #1
 80a5e10:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a5e14:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a5e18:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a5e1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a5e20:	bf18      	it	ne
 80a5e22:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80a5e26:	d01b      	beq.n	80a5e60 <__cmpdf2+0x54>
 80a5e28:	b001      	add	sp, #4
 80a5e2a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80a5e2e:	bf0c      	ite	eq
 80a5e30:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80a5e34:	ea91 0f03 	teqne	r1, r3
 80a5e38:	bf02      	ittt	eq
 80a5e3a:	ea90 0f02 	teqeq	r0, r2
 80a5e3e:	2000      	moveq	r0, #0
 80a5e40:	4770      	bxeq	lr
 80a5e42:	f110 0f00 	cmn.w	r0, #0
 80a5e46:	ea91 0f03 	teq	r1, r3
 80a5e4a:	bf58      	it	pl
 80a5e4c:	4299      	cmppl	r1, r3
 80a5e4e:	bf08      	it	eq
 80a5e50:	4290      	cmpeq	r0, r2
 80a5e52:	bf2c      	ite	cs
 80a5e54:	17d8      	asrcs	r0, r3, #31
 80a5e56:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80a5e5a:	f040 0001 	orr.w	r0, r0, #1
 80a5e5e:	4770      	bx	lr
 80a5e60:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a5e64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a5e68:	d102      	bne.n	80a5e70 <__cmpdf2+0x64>
 80a5e6a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a5e6e:	d107      	bne.n	80a5e80 <__cmpdf2+0x74>
 80a5e70:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a5e74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a5e78:	d1d6      	bne.n	80a5e28 <__cmpdf2+0x1c>
 80a5e7a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a5e7e:	d0d3      	beq.n	80a5e28 <__cmpdf2+0x1c>
 80a5e80:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a5e84:	4770      	bx	lr
 80a5e86:	bf00      	nop

080a5e88 <__aeabi_cdrcmple>:
 80a5e88:	4684      	mov	ip, r0
 80a5e8a:	4610      	mov	r0, r2
 80a5e8c:	4662      	mov	r2, ip
 80a5e8e:	468c      	mov	ip, r1
 80a5e90:	4619      	mov	r1, r3
 80a5e92:	4663      	mov	r3, ip
 80a5e94:	e000      	b.n	80a5e98 <__aeabi_cdcmpeq>
 80a5e96:	bf00      	nop

080a5e98 <__aeabi_cdcmpeq>:
 80a5e98:	b501      	push	{r0, lr}
 80a5e9a:	f7ff ffb7 	bl	80a5e0c <__cmpdf2>
 80a5e9e:	2800      	cmp	r0, #0
 80a5ea0:	bf48      	it	mi
 80a5ea2:	f110 0f00 	cmnmi.w	r0, #0
 80a5ea6:	bd01      	pop	{r0, pc}

080a5ea8 <__aeabi_dcmpeq>:
 80a5ea8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a5eac:	f7ff fff4 	bl	80a5e98 <__aeabi_cdcmpeq>
 80a5eb0:	bf0c      	ite	eq
 80a5eb2:	2001      	moveq	r0, #1
 80a5eb4:	2000      	movne	r0, #0
 80a5eb6:	f85d fb08 	ldr.w	pc, [sp], #8
 80a5eba:	bf00      	nop

080a5ebc <__aeabi_dcmplt>:
 80a5ebc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a5ec0:	f7ff ffea 	bl	80a5e98 <__aeabi_cdcmpeq>
 80a5ec4:	bf34      	ite	cc
 80a5ec6:	2001      	movcc	r0, #1
 80a5ec8:	2000      	movcs	r0, #0
 80a5eca:	f85d fb08 	ldr.w	pc, [sp], #8
 80a5ece:	bf00      	nop

080a5ed0 <__aeabi_dcmple>:
 80a5ed0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a5ed4:	f7ff ffe0 	bl	80a5e98 <__aeabi_cdcmpeq>
 80a5ed8:	bf94      	ite	ls
 80a5eda:	2001      	movls	r0, #1
 80a5edc:	2000      	movhi	r0, #0
 80a5ede:	f85d fb08 	ldr.w	pc, [sp], #8
 80a5ee2:	bf00      	nop

080a5ee4 <__aeabi_dcmpge>:
 80a5ee4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a5ee8:	f7ff ffce 	bl	80a5e88 <__aeabi_cdrcmple>
 80a5eec:	bf94      	ite	ls
 80a5eee:	2001      	movls	r0, #1
 80a5ef0:	2000      	movhi	r0, #0
 80a5ef2:	f85d fb08 	ldr.w	pc, [sp], #8
 80a5ef6:	bf00      	nop

080a5ef8 <__aeabi_dcmpgt>:
 80a5ef8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a5efc:	f7ff ffc4 	bl	80a5e88 <__aeabi_cdrcmple>
 80a5f00:	bf34      	ite	cc
 80a5f02:	2001      	movcc	r0, #1
 80a5f04:	2000      	movcs	r0, #0
 80a5f06:	f85d fb08 	ldr.w	pc, [sp], #8
 80a5f0a:	bf00      	nop

080a5f0c <__aeabi_dcmpun>:
 80a5f0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a5f10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a5f14:	d102      	bne.n	80a5f1c <__aeabi_dcmpun+0x10>
 80a5f16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a5f1a:	d10a      	bne.n	80a5f32 <__aeabi_dcmpun+0x26>
 80a5f1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a5f20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a5f24:	d102      	bne.n	80a5f2c <__aeabi_dcmpun+0x20>
 80a5f26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a5f2a:	d102      	bne.n	80a5f32 <__aeabi_dcmpun+0x26>
 80a5f2c:	f04f 0000 	mov.w	r0, #0
 80a5f30:	4770      	bx	lr
 80a5f32:	f04f 0001 	mov.w	r0, #1
 80a5f36:	4770      	bx	lr

080a5f38 <__aeabi_d2iz>:
 80a5f38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a5f3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a5f40:	d215      	bcs.n	80a5f6e <__aeabi_d2iz+0x36>
 80a5f42:	d511      	bpl.n	80a5f68 <__aeabi_d2iz+0x30>
 80a5f44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a5f48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a5f4c:	d912      	bls.n	80a5f74 <__aeabi_d2iz+0x3c>
 80a5f4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a5f52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a5f56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a5f5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a5f5e:	fa23 f002 	lsr.w	r0, r3, r2
 80a5f62:	bf18      	it	ne
 80a5f64:	4240      	negne	r0, r0
 80a5f66:	4770      	bx	lr
 80a5f68:	f04f 0000 	mov.w	r0, #0
 80a5f6c:	4770      	bx	lr
 80a5f6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a5f72:	d105      	bne.n	80a5f80 <__aeabi_d2iz+0x48>
 80a5f74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80a5f78:	bf08      	it	eq
 80a5f7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a5f7e:	4770      	bx	lr
 80a5f80:	f04f 0000 	mov.w	r0, #0
 80a5f84:	4770      	bx	lr
 80a5f86:	bf00      	nop

080a5f88 <__aeabi_d2uiz>:
 80a5f88:	004a      	lsls	r2, r1, #1
 80a5f8a:	d211      	bcs.n	80a5fb0 <__aeabi_d2uiz+0x28>
 80a5f8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a5f90:	d211      	bcs.n	80a5fb6 <__aeabi_d2uiz+0x2e>
 80a5f92:	d50d      	bpl.n	80a5fb0 <__aeabi_d2uiz+0x28>
 80a5f94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a5f98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a5f9c:	d40e      	bmi.n	80a5fbc <__aeabi_d2uiz+0x34>
 80a5f9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a5fa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a5fa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a5faa:	fa23 f002 	lsr.w	r0, r3, r2
 80a5fae:	4770      	bx	lr
 80a5fb0:	f04f 0000 	mov.w	r0, #0
 80a5fb4:	4770      	bx	lr
 80a5fb6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a5fba:	d102      	bne.n	80a5fc2 <__aeabi_d2uiz+0x3a>
 80a5fbc:	f04f 30ff 	mov.w	r0, #4294967295
 80a5fc0:	4770      	bx	lr
 80a5fc2:	f04f 0000 	mov.w	r0, #0
 80a5fc6:	4770      	bx	lr

080a5fc8 <__aeabi_frsub>:
 80a5fc8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80a5fcc:	e002      	b.n	80a5fd4 <__addsf3>
 80a5fce:	bf00      	nop

080a5fd0 <__aeabi_fsub>:
 80a5fd0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080a5fd4 <__addsf3>:
 80a5fd4:	0042      	lsls	r2, r0, #1
 80a5fd6:	bf1f      	itttt	ne
 80a5fd8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80a5fdc:	ea92 0f03 	teqne	r2, r3
 80a5fe0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80a5fe4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a5fe8:	d06a      	beq.n	80a60c0 <__addsf3+0xec>
 80a5fea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80a5fee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80a5ff2:	bfc1      	itttt	gt
 80a5ff4:	18d2      	addgt	r2, r2, r3
 80a5ff6:	4041      	eorgt	r1, r0
 80a5ff8:	4048      	eorgt	r0, r1
 80a5ffa:	4041      	eorgt	r1, r0
 80a5ffc:	bfb8      	it	lt
 80a5ffe:	425b      	neglt	r3, r3
 80a6000:	2b19      	cmp	r3, #25
 80a6002:	bf88      	it	hi
 80a6004:	4770      	bxhi	lr
 80a6006:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a600a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a600e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80a6012:	bf18      	it	ne
 80a6014:	4240      	negne	r0, r0
 80a6016:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a601a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80a601e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80a6022:	bf18      	it	ne
 80a6024:	4249      	negne	r1, r1
 80a6026:	ea92 0f03 	teq	r2, r3
 80a602a:	d03f      	beq.n	80a60ac <__addsf3+0xd8>
 80a602c:	f1a2 0201 	sub.w	r2, r2, #1
 80a6030:	fa41 fc03 	asr.w	ip, r1, r3
 80a6034:	eb10 000c 	adds.w	r0, r0, ip
 80a6038:	f1c3 0320 	rsb	r3, r3, #32
 80a603c:	fa01 f103 	lsl.w	r1, r1, r3
 80a6040:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a6044:	d502      	bpl.n	80a604c <__addsf3+0x78>
 80a6046:	4249      	negs	r1, r1
 80a6048:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80a604c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a6050:	d313      	bcc.n	80a607a <__addsf3+0xa6>
 80a6052:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80a6056:	d306      	bcc.n	80a6066 <__addsf3+0x92>
 80a6058:	0840      	lsrs	r0, r0, #1
 80a605a:	ea4f 0131 	mov.w	r1, r1, rrx
 80a605e:	f102 0201 	add.w	r2, r2, #1
 80a6062:	2afe      	cmp	r2, #254	; 0xfe
 80a6064:	d251      	bcs.n	80a610a <__addsf3+0x136>
 80a6066:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80a606a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a606e:	bf08      	it	eq
 80a6070:	f020 0001 	biceq.w	r0, r0, #1
 80a6074:	ea40 0003 	orr.w	r0, r0, r3
 80a6078:	4770      	bx	lr
 80a607a:	0049      	lsls	r1, r1, #1
 80a607c:	eb40 0000 	adc.w	r0, r0, r0
 80a6080:	3a01      	subs	r2, #1
 80a6082:	bf28      	it	cs
 80a6084:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80a6088:	d2ed      	bcs.n	80a6066 <__addsf3+0x92>
 80a608a:	fab0 fc80 	clz	ip, r0
 80a608e:	f1ac 0c08 	sub.w	ip, ip, #8
 80a6092:	ebb2 020c 	subs.w	r2, r2, ip
 80a6096:	fa00 f00c 	lsl.w	r0, r0, ip
 80a609a:	bfaa      	itet	ge
 80a609c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80a60a0:	4252      	neglt	r2, r2
 80a60a2:	4318      	orrge	r0, r3
 80a60a4:	bfbc      	itt	lt
 80a60a6:	40d0      	lsrlt	r0, r2
 80a60a8:	4318      	orrlt	r0, r3
 80a60aa:	4770      	bx	lr
 80a60ac:	f092 0f00 	teq	r2, #0
 80a60b0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80a60b4:	bf06      	itte	eq
 80a60b6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80a60ba:	3201      	addeq	r2, #1
 80a60bc:	3b01      	subne	r3, #1
 80a60be:	e7b5      	b.n	80a602c <__addsf3+0x58>
 80a60c0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a60c4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a60c8:	bf18      	it	ne
 80a60ca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a60ce:	d021      	beq.n	80a6114 <__addsf3+0x140>
 80a60d0:	ea92 0f03 	teq	r2, r3
 80a60d4:	d004      	beq.n	80a60e0 <__addsf3+0x10c>
 80a60d6:	f092 0f00 	teq	r2, #0
 80a60da:	bf08      	it	eq
 80a60dc:	4608      	moveq	r0, r1
 80a60de:	4770      	bx	lr
 80a60e0:	ea90 0f01 	teq	r0, r1
 80a60e4:	bf1c      	itt	ne
 80a60e6:	2000      	movne	r0, #0
 80a60e8:	4770      	bxne	lr
 80a60ea:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80a60ee:	d104      	bne.n	80a60fa <__addsf3+0x126>
 80a60f0:	0040      	lsls	r0, r0, #1
 80a60f2:	bf28      	it	cs
 80a60f4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80a60f8:	4770      	bx	lr
 80a60fa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80a60fe:	bf3c      	itt	cc
 80a6100:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80a6104:	4770      	bxcc	lr
 80a6106:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a610a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80a610e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a6112:	4770      	bx	lr
 80a6114:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80a6118:	bf16      	itet	ne
 80a611a:	4608      	movne	r0, r1
 80a611c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80a6120:	4601      	movne	r1, r0
 80a6122:	0242      	lsls	r2, r0, #9
 80a6124:	bf06      	itte	eq
 80a6126:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80a612a:	ea90 0f01 	teqeq	r0, r1
 80a612e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80a6132:	4770      	bx	lr

080a6134 <__aeabi_ui2f>:
 80a6134:	f04f 0300 	mov.w	r3, #0
 80a6138:	e004      	b.n	80a6144 <__aeabi_i2f+0x8>
 80a613a:	bf00      	nop

080a613c <__aeabi_i2f>:
 80a613c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80a6140:	bf48      	it	mi
 80a6142:	4240      	negmi	r0, r0
 80a6144:	ea5f 0c00 	movs.w	ip, r0
 80a6148:	bf08      	it	eq
 80a614a:	4770      	bxeq	lr
 80a614c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80a6150:	4601      	mov	r1, r0
 80a6152:	f04f 0000 	mov.w	r0, #0
 80a6156:	e01c      	b.n	80a6192 <__aeabi_l2f+0x2a>

080a6158 <__aeabi_ul2f>:
 80a6158:	ea50 0201 	orrs.w	r2, r0, r1
 80a615c:	bf08      	it	eq
 80a615e:	4770      	bxeq	lr
 80a6160:	f04f 0300 	mov.w	r3, #0
 80a6164:	e00a      	b.n	80a617c <__aeabi_l2f+0x14>
 80a6166:	bf00      	nop

080a6168 <__aeabi_l2f>:
 80a6168:	ea50 0201 	orrs.w	r2, r0, r1
 80a616c:	bf08      	it	eq
 80a616e:	4770      	bxeq	lr
 80a6170:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80a6174:	d502      	bpl.n	80a617c <__aeabi_l2f+0x14>
 80a6176:	4240      	negs	r0, r0
 80a6178:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a617c:	ea5f 0c01 	movs.w	ip, r1
 80a6180:	bf02      	ittt	eq
 80a6182:	4684      	moveq	ip, r0
 80a6184:	4601      	moveq	r1, r0
 80a6186:	2000      	moveq	r0, #0
 80a6188:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80a618c:	bf08      	it	eq
 80a618e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80a6192:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80a6196:	fabc f28c 	clz	r2, ip
 80a619a:	3a08      	subs	r2, #8
 80a619c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80a61a0:	db10      	blt.n	80a61c4 <__aeabi_l2f+0x5c>
 80a61a2:	fa01 fc02 	lsl.w	ip, r1, r2
 80a61a6:	4463      	add	r3, ip
 80a61a8:	fa00 fc02 	lsl.w	ip, r0, r2
 80a61ac:	f1c2 0220 	rsb	r2, r2, #32
 80a61b0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a61b4:	fa20 f202 	lsr.w	r2, r0, r2
 80a61b8:	eb43 0002 	adc.w	r0, r3, r2
 80a61bc:	bf08      	it	eq
 80a61be:	f020 0001 	biceq.w	r0, r0, #1
 80a61c2:	4770      	bx	lr
 80a61c4:	f102 0220 	add.w	r2, r2, #32
 80a61c8:	fa01 fc02 	lsl.w	ip, r1, r2
 80a61cc:	f1c2 0220 	rsb	r2, r2, #32
 80a61d0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80a61d4:	fa21 f202 	lsr.w	r2, r1, r2
 80a61d8:	eb43 0002 	adc.w	r0, r3, r2
 80a61dc:	bf08      	it	eq
 80a61de:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a61e2:	4770      	bx	lr

080a61e4 <__aeabi_fmul>:
 80a61e4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a61e8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a61ec:	bf1e      	ittt	ne
 80a61ee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a61f2:	ea92 0f0c 	teqne	r2, ip
 80a61f6:	ea93 0f0c 	teqne	r3, ip
 80a61fa:	d06f      	beq.n	80a62dc <__aeabi_fmul+0xf8>
 80a61fc:	441a      	add	r2, r3
 80a61fe:	ea80 0c01 	eor.w	ip, r0, r1
 80a6202:	0240      	lsls	r0, r0, #9
 80a6204:	bf18      	it	ne
 80a6206:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80a620a:	d01e      	beq.n	80a624a <__aeabi_fmul+0x66>
 80a620c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80a6210:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80a6214:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80a6218:	fba0 3101 	umull	r3, r1, r0, r1
 80a621c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a6220:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80a6224:	bf3e      	ittt	cc
 80a6226:	0049      	lslcc	r1, r1, #1
 80a6228:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80a622c:	005b      	lslcc	r3, r3, #1
 80a622e:	ea40 0001 	orr.w	r0, r0, r1
 80a6232:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80a6236:	2afd      	cmp	r2, #253	; 0xfd
 80a6238:	d81d      	bhi.n	80a6276 <__aeabi_fmul+0x92>
 80a623a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a623e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a6242:	bf08      	it	eq
 80a6244:	f020 0001 	biceq.w	r0, r0, #1
 80a6248:	4770      	bx	lr
 80a624a:	f090 0f00 	teq	r0, #0
 80a624e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a6252:	bf08      	it	eq
 80a6254:	0249      	lsleq	r1, r1, #9
 80a6256:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a625a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80a625e:	3a7f      	subs	r2, #127	; 0x7f
 80a6260:	bfc2      	ittt	gt
 80a6262:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a6266:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a626a:	4770      	bxgt	lr
 80a626c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a6270:	f04f 0300 	mov.w	r3, #0
 80a6274:	3a01      	subs	r2, #1
 80a6276:	dc5d      	bgt.n	80a6334 <__aeabi_fmul+0x150>
 80a6278:	f112 0f19 	cmn.w	r2, #25
 80a627c:	bfdc      	itt	le
 80a627e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80a6282:	4770      	bxle	lr
 80a6284:	f1c2 0200 	rsb	r2, r2, #0
 80a6288:	0041      	lsls	r1, r0, #1
 80a628a:	fa21 f102 	lsr.w	r1, r1, r2
 80a628e:	f1c2 0220 	rsb	r2, r2, #32
 80a6292:	fa00 fc02 	lsl.w	ip, r0, r2
 80a6296:	ea5f 0031 	movs.w	r0, r1, rrx
 80a629a:	f140 0000 	adc.w	r0, r0, #0
 80a629e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80a62a2:	bf08      	it	eq
 80a62a4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a62a8:	4770      	bx	lr
 80a62aa:	f092 0f00 	teq	r2, #0
 80a62ae:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a62b2:	bf02      	ittt	eq
 80a62b4:	0040      	lsleq	r0, r0, #1
 80a62b6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a62ba:	3a01      	subeq	r2, #1
 80a62bc:	d0f9      	beq.n	80a62b2 <__aeabi_fmul+0xce>
 80a62be:	ea40 000c 	orr.w	r0, r0, ip
 80a62c2:	f093 0f00 	teq	r3, #0
 80a62c6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a62ca:	bf02      	ittt	eq
 80a62cc:	0049      	lsleq	r1, r1, #1
 80a62ce:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a62d2:	3b01      	subeq	r3, #1
 80a62d4:	d0f9      	beq.n	80a62ca <__aeabi_fmul+0xe6>
 80a62d6:	ea41 010c 	orr.w	r1, r1, ip
 80a62da:	e78f      	b.n	80a61fc <__aeabi_fmul+0x18>
 80a62dc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a62e0:	ea92 0f0c 	teq	r2, ip
 80a62e4:	bf18      	it	ne
 80a62e6:	ea93 0f0c 	teqne	r3, ip
 80a62ea:	d00a      	beq.n	80a6302 <__aeabi_fmul+0x11e>
 80a62ec:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a62f0:	bf18      	it	ne
 80a62f2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a62f6:	d1d8      	bne.n	80a62aa <__aeabi_fmul+0xc6>
 80a62f8:	ea80 0001 	eor.w	r0, r0, r1
 80a62fc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a6300:	4770      	bx	lr
 80a6302:	f090 0f00 	teq	r0, #0
 80a6306:	bf17      	itett	ne
 80a6308:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80a630c:	4608      	moveq	r0, r1
 80a630e:	f091 0f00 	teqne	r1, #0
 80a6312:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80a6316:	d014      	beq.n	80a6342 <__aeabi_fmul+0x15e>
 80a6318:	ea92 0f0c 	teq	r2, ip
 80a631c:	d101      	bne.n	80a6322 <__aeabi_fmul+0x13e>
 80a631e:	0242      	lsls	r2, r0, #9
 80a6320:	d10f      	bne.n	80a6342 <__aeabi_fmul+0x15e>
 80a6322:	ea93 0f0c 	teq	r3, ip
 80a6326:	d103      	bne.n	80a6330 <__aeabi_fmul+0x14c>
 80a6328:	024b      	lsls	r3, r1, #9
 80a632a:	bf18      	it	ne
 80a632c:	4608      	movne	r0, r1
 80a632e:	d108      	bne.n	80a6342 <__aeabi_fmul+0x15e>
 80a6330:	ea80 0001 	eor.w	r0, r0, r1
 80a6334:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a6338:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a633c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a6340:	4770      	bx	lr
 80a6342:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a6346:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80a634a:	4770      	bx	lr

080a634c <__aeabi_fdiv>:
 80a634c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a6350:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a6354:	bf1e      	ittt	ne
 80a6356:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a635a:	ea92 0f0c 	teqne	r2, ip
 80a635e:	ea93 0f0c 	teqne	r3, ip
 80a6362:	d069      	beq.n	80a6438 <__aeabi_fdiv+0xec>
 80a6364:	eba2 0203 	sub.w	r2, r2, r3
 80a6368:	ea80 0c01 	eor.w	ip, r0, r1
 80a636c:	0249      	lsls	r1, r1, #9
 80a636e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80a6372:	d037      	beq.n	80a63e4 <__aeabi_fdiv+0x98>
 80a6374:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80a6378:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80a637c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80a6380:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a6384:	428b      	cmp	r3, r1
 80a6386:	bf38      	it	cc
 80a6388:	005b      	lslcc	r3, r3, #1
 80a638a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80a638e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80a6392:	428b      	cmp	r3, r1
 80a6394:	bf24      	itt	cs
 80a6396:	1a5b      	subcs	r3, r3, r1
 80a6398:	ea40 000c 	orrcs.w	r0, r0, ip
 80a639c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80a63a0:	bf24      	itt	cs
 80a63a2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80a63a6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a63aa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80a63ae:	bf24      	itt	cs
 80a63b0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80a63b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a63b8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80a63bc:	bf24      	itt	cs
 80a63be:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80a63c2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a63c6:	011b      	lsls	r3, r3, #4
 80a63c8:	bf18      	it	ne
 80a63ca:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80a63ce:	d1e0      	bne.n	80a6392 <__aeabi_fdiv+0x46>
 80a63d0:	2afd      	cmp	r2, #253	; 0xfd
 80a63d2:	f63f af50 	bhi.w	80a6276 <__aeabi_fmul+0x92>
 80a63d6:	428b      	cmp	r3, r1
 80a63d8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a63dc:	bf08      	it	eq
 80a63de:	f020 0001 	biceq.w	r0, r0, #1
 80a63e2:	4770      	bx	lr
 80a63e4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a63e8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a63ec:	327f      	adds	r2, #127	; 0x7f
 80a63ee:	bfc2      	ittt	gt
 80a63f0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a63f4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a63f8:	4770      	bxgt	lr
 80a63fa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a63fe:	f04f 0300 	mov.w	r3, #0
 80a6402:	3a01      	subs	r2, #1
 80a6404:	e737      	b.n	80a6276 <__aeabi_fmul+0x92>
 80a6406:	f092 0f00 	teq	r2, #0
 80a640a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a640e:	bf02      	ittt	eq
 80a6410:	0040      	lsleq	r0, r0, #1
 80a6412:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a6416:	3a01      	subeq	r2, #1
 80a6418:	d0f9      	beq.n	80a640e <__aeabi_fdiv+0xc2>
 80a641a:	ea40 000c 	orr.w	r0, r0, ip
 80a641e:	f093 0f00 	teq	r3, #0
 80a6422:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a6426:	bf02      	ittt	eq
 80a6428:	0049      	lsleq	r1, r1, #1
 80a642a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a642e:	3b01      	subeq	r3, #1
 80a6430:	d0f9      	beq.n	80a6426 <__aeabi_fdiv+0xda>
 80a6432:	ea41 010c 	orr.w	r1, r1, ip
 80a6436:	e795      	b.n	80a6364 <__aeabi_fdiv+0x18>
 80a6438:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a643c:	ea92 0f0c 	teq	r2, ip
 80a6440:	d108      	bne.n	80a6454 <__aeabi_fdiv+0x108>
 80a6442:	0242      	lsls	r2, r0, #9
 80a6444:	f47f af7d 	bne.w	80a6342 <__aeabi_fmul+0x15e>
 80a6448:	ea93 0f0c 	teq	r3, ip
 80a644c:	f47f af70 	bne.w	80a6330 <__aeabi_fmul+0x14c>
 80a6450:	4608      	mov	r0, r1
 80a6452:	e776      	b.n	80a6342 <__aeabi_fmul+0x15e>
 80a6454:	ea93 0f0c 	teq	r3, ip
 80a6458:	d104      	bne.n	80a6464 <__aeabi_fdiv+0x118>
 80a645a:	024b      	lsls	r3, r1, #9
 80a645c:	f43f af4c 	beq.w	80a62f8 <__aeabi_fmul+0x114>
 80a6460:	4608      	mov	r0, r1
 80a6462:	e76e      	b.n	80a6342 <__aeabi_fmul+0x15e>
 80a6464:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a6468:	bf18      	it	ne
 80a646a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a646e:	d1ca      	bne.n	80a6406 <__aeabi_fdiv+0xba>
 80a6470:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80a6474:	f47f af5c 	bne.w	80a6330 <__aeabi_fmul+0x14c>
 80a6478:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80a647c:	f47f af3c 	bne.w	80a62f8 <__aeabi_fmul+0x114>
 80a6480:	e75f      	b.n	80a6342 <__aeabi_fmul+0x15e>
 80a6482:	bf00      	nop

080a6484 <__gesf2>:
 80a6484:	f04f 3cff 	mov.w	ip, #4294967295
 80a6488:	e006      	b.n	80a6498 <__cmpsf2+0x4>
 80a648a:	bf00      	nop

080a648c <__lesf2>:
 80a648c:	f04f 0c01 	mov.w	ip, #1
 80a6490:	e002      	b.n	80a6498 <__cmpsf2+0x4>
 80a6492:	bf00      	nop

080a6494 <__cmpsf2>:
 80a6494:	f04f 0c01 	mov.w	ip, #1
 80a6498:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a649c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a64a0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a64a4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a64a8:	bf18      	it	ne
 80a64aa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a64ae:	d011      	beq.n	80a64d4 <__cmpsf2+0x40>
 80a64b0:	b001      	add	sp, #4
 80a64b2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80a64b6:	bf18      	it	ne
 80a64b8:	ea90 0f01 	teqne	r0, r1
 80a64bc:	bf58      	it	pl
 80a64be:	ebb2 0003 	subspl.w	r0, r2, r3
 80a64c2:	bf88      	it	hi
 80a64c4:	17c8      	asrhi	r0, r1, #31
 80a64c6:	bf38      	it	cc
 80a64c8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80a64cc:	bf18      	it	ne
 80a64ce:	f040 0001 	orrne.w	r0, r0, #1
 80a64d2:	4770      	bx	lr
 80a64d4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a64d8:	d102      	bne.n	80a64e0 <__cmpsf2+0x4c>
 80a64da:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80a64de:	d105      	bne.n	80a64ec <__cmpsf2+0x58>
 80a64e0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80a64e4:	d1e4      	bne.n	80a64b0 <__cmpsf2+0x1c>
 80a64e6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80a64ea:	d0e1      	beq.n	80a64b0 <__cmpsf2+0x1c>
 80a64ec:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a64f0:	4770      	bx	lr
 80a64f2:	bf00      	nop

080a64f4 <__aeabi_cfrcmple>:
 80a64f4:	4684      	mov	ip, r0
 80a64f6:	4608      	mov	r0, r1
 80a64f8:	4661      	mov	r1, ip
 80a64fa:	e7ff      	b.n	80a64fc <__aeabi_cfcmpeq>

080a64fc <__aeabi_cfcmpeq>:
 80a64fc:	b50f      	push	{r0, r1, r2, r3, lr}
 80a64fe:	f7ff ffc9 	bl	80a6494 <__cmpsf2>
 80a6502:	2800      	cmp	r0, #0
 80a6504:	bf48      	it	mi
 80a6506:	f110 0f00 	cmnmi.w	r0, #0
 80a650a:	bd0f      	pop	{r0, r1, r2, r3, pc}

080a650c <__aeabi_fcmpeq>:
 80a650c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a6510:	f7ff fff4 	bl	80a64fc <__aeabi_cfcmpeq>
 80a6514:	bf0c      	ite	eq
 80a6516:	2001      	moveq	r0, #1
 80a6518:	2000      	movne	r0, #0
 80a651a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a651e:	bf00      	nop

080a6520 <__aeabi_fcmplt>:
 80a6520:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a6524:	f7ff ffea 	bl	80a64fc <__aeabi_cfcmpeq>
 80a6528:	bf34      	ite	cc
 80a652a:	2001      	movcc	r0, #1
 80a652c:	2000      	movcs	r0, #0
 80a652e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a6532:	bf00      	nop

080a6534 <__aeabi_fcmple>:
 80a6534:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a6538:	f7ff ffe0 	bl	80a64fc <__aeabi_cfcmpeq>
 80a653c:	bf94      	ite	ls
 80a653e:	2001      	movls	r0, #1
 80a6540:	2000      	movhi	r0, #0
 80a6542:	f85d fb08 	ldr.w	pc, [sp], #8
 80a6546:	bf00      	nop

080a6548 <__aeabi_fcmpge>:
 80a6548:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a654c:	f7ff ffd2 	bl	80a64f4 <__aeabi_cfrcmple>
 80a6550:	bf94      	ite	ls
 80a6552:	2001      	movls	r0, #1
 80a6554:	2000      	movhi	r0, #0
 80a6556:	f85d fb08 	ldr.w	pc, [sp], #8
 80a655a:	bf00      	nop

080a655c <__aeabi_fcmpgt>:
 80a655c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a6560:	f7ff ffc8 	bl	80a64f4 <__aeabi_cfrcmple>
 80a6564:	bf34      	ite	cc
 80a6566:	2001      	movcc	r0, #1
 80a6568:	2000      	movcs	r0, #0
 80a656a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a656e:	bf00      	nop

080a6570 <__aeabi_uldivmod>:
 80a6570:	b953      	cbnz	r3, 80a6588 <__aeabi_uldivmod+0x18>
 80a6572:	b94a      	cbnz	r2, 80a6588 <__aeabi_uldivmod+0x18>
 80a6574:	2900      	cmp	r1, #0
 80a6576:	bf08      	it	eq
 80a6578:	2800      	cmpeq	r0, #0
 80a657a:	bf1c      	itt	ne
 80a657c:	f04f 31ff 	movne.w	r1, #4294967295
 80a6580:	f04f 30ff 	movne.w	r0, #4294967295
 80a6584:	f000 b9c0 	b.w	80a6908 <__aeabi_idiv0>
 80a6588:	f1ad 0c08 	sub.w	ip, sp, #8
 80a658c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80a6590:	f000 f858 	bl	80a6644 <__udivmoddi4>
 80a6594:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a6598:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a659c:	b004      	add	sp, #16
 80a659e:	4770      	bx	lr

080a65a0 <__aeabi_f2lz>:
 80a65a0:	b510      	push	{r4, lr}
 80a65a2:	2100      	movs	r1, #0
 80a65a4:	4604      	mov	r4, r0
 80a65a6:	f7ff ffbb 	bl	80a6520 <__aeabi_fcmplt>
 80a65aa:	b920      	cbnz	r0, 80a65b6 <__aeabi_f2lz+0x16>
 80a65ac:	4620      	mov	r0, r4
 80a65ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a65b2:	f000 b809 	b.w	80a65c8 <__aeabi_f2ulz>
 80a65b6:	f104 4000 	add.w	r0, r4, #2147483648	; 0x80000000
 80a65ba:	f000 f805 	bl	80a65c8 <__aeabi_f2ulz>
 80a65be:	4240      	negs	r0, r0
 80a65c0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a65c4:	bd10      	pop	{r4, pc}
 80a65c6:	bf00      	nop

080a65c8 <__aeabi_f2ulz>:
 80a65c8:	b5d0      	push	{r4, r6, r7, lr}
 80a65ca:	f7ff f9ad 	bl	80a5928 <__aeabi_f2d>
 80a65ce:	2200      	movs	r2, #0
 80a65d0:	4b0b      	ldr	r3, [pc, #44]	; (80a6600 <__aeabi_f2ulz+0x38>)
 80a65d2:	4606      	mov	r6, r0
 80a65d4:	460f      	mov	r7, r1
 80a65d6:	f7ff f9ff 	bl	80a59d8 <__aeabi_dmul>
 80a65da:	f7ff fcd5 	bl	80a5f88 <__aeabi_d2uiz>
 80a65de:	4604      	mov	r4, r0
 80a65e0:	f7ff f980 	bl	80a58e4 <__aeabi_ui2d>
 80a65e4:	2200      	movs	r2, #0
 80a65e6:	4b07      	ldr	r3, [pc, #28]	; (80a6604 <__aeabi_f2ulz+0x3c>)
 80a65e8:	f7ff f9f6 	bl	80a59d8 <__aeabi_dmul>
 80a65ec:	4602      	mov	r2, r0
 80a65ee:	460b      	mov	r3, r1
 80a65f0:	4630      	mov	r0, r6
 80a65f2:	4639      	mov	r1, r7
 80a65f4:	f7ff f838 	bl	80a5668 <__aeabi_dsub>
 80a65f8:	f7ff fcc6 	bl	80a5f88 <__aeabi_d2uiz>
 80a65fc:	4621      	mov	r1, r4
 80a65fe:	bdd0      	pop	{r4, r6, r7, pc}
 80a6600:	3df00000 	.word	0x3df00000
 80a6604:	41f00000 	.word	0x41f00000

080a6608 <__aeabi_d2ulz>:
 80a6608:	b5d0      	push	{r4, r6, r7, lr}
 80a660a:	2200      	movs	r2, #0
 80a660c:	4b0b      	ldr	r3, [pc, #44]	; (80a663c <__aeabi_d2ulz+0x34>)
 80a660e:	4606      	mov	r6, r0
 80a6610:	460f      	mov	r7, r1
 80a6612:	f7ff f9e1 	bl	80a59d8 <__aeabi_dmul>
 80a6616:	f7ff fcb7 	bl	80a5f88 <__aeabi_d2uiz>
 80a661a:	4604      	mov	r4, r0
 80a661c:	f7ff f962 	bl	80a58e4 <__aeabi_ui2d>
 80a6620:	2200      	movs	r2, #0
 80a6622:	4b07      	ldr	r3, [pc, #28]	; (80a6640 <__aeabi_d2ulz+0x38>)
 80a6624:	f7ff f9d8 	bl	80a59d8 <__aeabi_dmul>
 80a6628:	4602      	mov	r2, r0
 80a662a:	460b      	mov	r3, r1
 80a662c:	4630      	mov	r0, r6
 80a662e:	4639      	mov	r1, r7
 80a6630:	f7ff f81a 	bl	80a5668 <__aeabi_dsub>
 80a6634:	f7ff fca8 	bl	80a5f88 <__aeabi_d2uiz>
 80a6638:	4621      	mov	r1, r4
 80a663a:	bdd0      	pop	{r4, r6, r7, pc}
 80a663c:	3df00000 	.word	0x3df00000
 80a6640:	41f00000 	.word	0x41f00000

080a6644 <__udivmoddi4>:
 80a6644:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a6648:	9e08      	ldr	r6, [sp, #32]
 80a664a:	460d      	mov	r5, r1
 80a664c:	4604      	mov	r4, r0
 80a664e:	468e      	mov	lr, r1
 80a6650:	2b00      	cmp	r3, #0
 80a6652:	f040 8083 	bne.w	80a675c <__udivmoddi4+0x118>
 80a6656:	428a      	cmp	r2, r1
 80a6658:	4617      	mov	r7, r2
 80a665a:	d947      	bls.n	80a66ec <__udivmoddi4+0xa8>
 80a665c:	fab2 f382 	clz	r3, r2
 80a6660:	b14b      	cbz	r3, 80a6676 <__udivmoddi4+0x32>
 80a6662:	f1c3 0120 	rsb	r1, r3, #32
 80a6666:	fa05 fe03 	lsl.w	lr, r5, r3
 80a666a:	fa20 f101 	lsr.w	r1, r0, r1
 80a666e:	409f      	lsls	r7, r3
 80a6670:	ea41 0e0e 	orr.w	lr, r1, lr
 80a6674:	409c      	lsls	r4, r3
 80a6676:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80a667a:	fbbe fcf8 	udiv	ip, lr, r8
 80a667e:	fa1f f987 	uxth.w	r9, r7
 80a6682:	fb08 e21c 	mls	r2, r8, ip, lr
 80a6686:	fb0c f009 	mul.w	r0, ip, r9
 80a668a:	0c21      	lsrs	r1, r4, #16
 80a668c:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 80a6690:	4290      	cmp	r0, r2
 80a6692:	d90a      	bls.n	80a66aa <__udivmoddi4+0x66>
 80a6694:	18ba      	adds	r2, r7, r2
 80a6696:	f10c 31ff 	add.w	r1, ip, #4294967295
 80a669a:	f080 8118 	bcs.w	80a68ce <__udivmoddi4+0x28a>
 80a669e:	4290      	cmp	r0, r2
 80a66a0:	f240 8115 	bls.w	80a68ce <__udivmoddi4+0x28a>
 80a66a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80a66a8:	443a      	add	r2, r7
 80a66aa:	1a12      	subs	r2, r2, r0
 80a66ac:	fbb2 f0f8 	udiv	r0, r2, r8
 80a66b0:	fb08 2210 	mls	r2, r8, r0, r2
 80a66b4:	fb00 f109 	mul.w	r1, r0, r9
 80a66b8:	b2a4      	uxth	r4, r4
 80a66ba:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80a66be:	42a1      	cmp	r1, r4
 80a66c0:	d909      	bls.n	80a66d6 <__udivmoddi4+0x92>
 80a66c2:	193c      	adds	r4, r7, r4
 80a66c4:	f100 32ff 	add.w	r2, r0, #4294967295
 80a66c8:	f080 8103 	bcs.w	80a68d2 <__udivmoddi4+0x28e>
 80a66cc:	42a1      	cmp	r1, r4
 80a66ce:	f240 8100 	bls.w	80a68d2 <__udivmoddi4+0x28e>
 80a66d2:	3802      	subs	r0, #2
 80a66d4:	443c      	add	r4, r7
 80a66d6:	1a64      	subs	r4, r4, r1
 80a66d8:	2100      	movs	r1, #0
 80a66da:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80a66de:	b11e      	cbz	r6, 80a66e8 <__udivmoddi4+0xa4>
 80a66e0:	2200      	movs	r2, #0
 80a66e2:	40dc      	lsrs	r4, r3
 80a66e4:	e9c6 4200 	strd	r4, r2, [r6]
 80a66e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a66ec:	b902      	cbnz	r2, 80a66f0 <__udivmoddi4+0xac>
 80a66ee:	deff      	udf	#255	; 0xff
 80a66f0:	fab2 f382 	clz	r3, r2
 80a66f4:	2b00      	cmp	r3, #0
 80a66f6:	d14f      	bne.n	80a6798 <__udivmoddi4+0x154>
 80a66f8:	1a8d      	subs	r5, r1, r2
 80a66fa:	2101      	movs	r1, #1
 80a66fc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80a6700:	fa1f f882 	uxth.w	r8, r2
 80a6704:	fbb5 fcfe 	udiv	ip, r5, lr
 80a6708:	fb0e 551c 	mls	r5, lr, ip, r5
 80a670c:	fb08 f00c 	mul.w	r0, r8, ip
 80a6710:	0c22      	lsrs	r2, r4, #16
 80a6712:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 80a6716:	42a8      	cmp	r0, r5
 80a6718:	d907      	bls.n	80a672a <__udivmoddi4+0xe6>
 80a671a:	197d      	adds	r5, r7, r5
 80a671c:	f10c 32ff 	add.w	r2, ip, #4294967295
 80a6720:	d202      	bcs.n	80a6728 <__udivmoddi4+0xe4>
 80a6722:	42a8      	cmp	r0, r5
 80a6724:	f200 80e9 	bhi.w	80a68fa <__udivmoddi4+0x2b6>
 80a6728:	4694      	mov	ip, r2
 80a672a:	1a2d      	subs	r5, r5, r0
 80a672c:	fbb5 f0fe 	udiv	r0, r5, lr
 80a6730:	fb0e 5510 	mls	r5, lr, r0, r5
 80a6734:	fb08 f800 	mul.w	r8, r8, r0
 80a6738:	b2a4      	uxth	r4, r4
 80a673a:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80a673e:	45a0      	cmp	r8, r4
 80a6740:	d907      	bls.n	80a6752 <__udivmoddi4+0x10e>
 80a6742:	193c      	adds	r4, r7, r4
 80a6744:	f100 32ff 	add.w	r2, r0, #4294967295
 80a6748:	d202      	bcs.n	80a6750 <__udivmoddi4+0x10c>
 80a674a:	45a0      	cmp	r8, r4
 80a674c:	f200 80d9 	bhi.w	80a6902 <__udivmoddi4+0x2be>
 80a6750:	4610      	mov	r0, r2
 80a6752:	eba4 0408 	sub.w	r4, r4, r8
 80a6756:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80a675a:	e7c0      	b.n	80a66de <__udivmoddi4+0x9a>
 80a675c:	428b      	cmp	r3, r1
 80a675e:	d908      	bls.n	80a6772 <__udivmoddi4+0x12e>
 80a6760:	2e00      	cmp	r6, #0
 80a6762:	f000 80b1 	beq.w	80a68c8 <__udivmoddi4+0x284>
 80a6766:	2100      	movs	r1, #0
 80a6768:	e9c6 0500 	strd	r0, r5, [r6]
 80a676c:	4608      	mov	r0, r1
 80a676e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a6772:	fab3 f183 	clz	r1, r3
 80a6776:	2900      	cmp	r1, #0
 80a6778:	d14b      	bne.n	80a6812 <__udivmoddi4+0x1ce>
 80a677a:	42ab      	cmp	r3, r5
 80a677c:	d302      	bcc.n	80a6784 <__udivmoddi4+0x140>
 80a677e:	4282      	cmp	r2, r0
 80a6780:	f200 80b9 	bhi.w	80a68f6 <__udivmoddi4+0x2b2>
 80a6784:	1a84      	subs	r4, r0, r2
 80a6786:	eb65 0303 	sbc.w	r3, r5, r3
 80a678a:	2001      	movs	r0, #1
 80a678c:	469e      	mov	lr, r3
 80a678e:	2e00      	cmp	r6, #0
 80a6790:	d0aa      	beq.n	80a66e8 <__udivmoddi4+0xa4>
 80a6792:	e9c6 4e00 	strd	r4, lr, [r6]
 80a6796:	e7a7      	b.n	80a66e8 <__udivmoddi4+0xa4>
 80a6798:	409f      	lsls	r7, r3
 80a679a:	f1c3 0220 	rsb	r2, r3, #32
 80a679e:	40d1      	lsrs	r1, r2
 80a67a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80a67a4:	fbb1 f0fe 	udiv	r0, r1, lr
 80a67a8:	fa1f f887 	uxth.w	r8, r7
 80a67ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80a67b0:	fa24 f202 	lsr.w	r2, r4, r2
 80a67b4:	409d      	lsls	r5, r3
 80a67b6:	fb00 fc08 	mul.w	ip, r0, r8
 80a67ba:	432a      	orrs	r2, r5
 80a67bc:	0c15      	lsrs	r5, r2, #16
 80a67be:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 80a67c2:	45ac      	cmp	ip, r5
 80a67c4:	fa04 f403 	lsl.w	r4, r4, r3
 80a67c8:	d909      	bls.n	80a67de <__udivmoddi4+0x19a>
 80a67ca:	197d      	adds	r5, r7, r5
 80a67cc:	f100 31ff 	add.w	r1, r0, #4294967295
 80a67d0:	f080 808f 	bcs.w	80a68f2 <__udivmoddi4+0x2ae>
 80a67d4:	45ac      	cmp	ip, r5
 80a67d6:	f240 808c 	bls.w	80a68f2 <__udivmoddi4+0x2ae>
 80a67da:	3802      	subs	r0, #2
 80a67dc:	443d      	add	r5, r7
 80a67de:	eba5 050c 	sub.w	r5, r5, ip
 80a67e2:	fbb5 f1fe 	udiv	r1, r5, lr
 80a67e6:	fb0e 5c11 	mls	ip, lr, r1, r5
 80a67ea:	fb01 f908 	mul.w	r9, r1, r8
 80a67ee:	b295      	uxth	r5, r2
 80a67f0:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80a67f4:	45a9      	cmp	r9, r5
 80a67f6:	d907      	bls.n	80a6808 <__udivmoddi4+0x1c4>
 80a67f8:	197d      	adds	r5, r7, r5
 80a67fa:	f101 32ff 	add.w	r2, r1, #4294967295
 80a67fe:	d274      	bcs.n	80a68ea <__udivmoddi4+0x2a6>
 80a6800:	45a9      	cmp	r9, r5
 80a6802:	d972      	bls.n	80a68ea <__udivmoddi4+0x2a6>
 80a6804:	3902      	subs	r1, #2
 80a6806:	443d      	add	r5, r7
 80a6808:	eba5 0509 	sub.w	r5, r5, r9
 80a680c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80a6810:	e778      	b.n	80a6704 <__udivmoddi4+0xc0>
 80a6812:	f1c1 0720 	rsb	r7, r1, #32
 80a6816:	408b      	lsls	r3, r1
 80a6818:	fa22 fc07 	lsr.w	ip, r2, r7
 80a681c:	ea4c 0c03 	orr.w	ip, ip, r3
 80a6820:	fa25 f407 	lsr.w	r4, r5, r7
 80a6824:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80a6828:	fbb4 f9fe 	udiv	r9, r4, lr
 80a682c:	fa1f f88c 	uxth.w	r8, ip
 80a6830:	fb0e 4419 	mls	r4, lr, r9, r4
 80a6834:	fa20 f307 	lsr.w	r3, r0, r7
 80a6838:	fb09 fa08 	mul.w	sl, r9, r8
 80a683c:	408d      	lsls	r5, r1
 80a683e:	431d      	orrs	r5, r3
 80a6840:	0c2b      	lsrs	r3, r5, #16
 80a6842:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80a6846:	45a2      	cmp	sl, r4
 80a6848:	fa02 f201 	lsl.w	r2, r2, r1
 80a684c:	fa00 f301 	lsl.w	r3, r0, r1
 80a6850:	d909      	bls.n	80a6866 <__udivmoddi4+0x222>
 80a6852:	eb1c 0404 	adds.w	r4, ip, r4
 80a6856:	f109 30ff 	add.w	r0, r9, #4294967295
 80a685a:	d248      	bcs.n	80a68ee <__udivmoddi4+0x2aa>
 80a685c:	45a2      	cmp	sl, r4
 80a685e:	d946      	bls.n	80a68ee <__udivmoddi4+0x2aa>
 80a6860:	f1a9 0902 	sub.w	r9, r9, #2
 80a6864:	4464      	add	r4, ip
 80a6866:	eba4 040a 	sub.w	r4, r4, sl
 80a686a:	fbb4 f0fe 	udiv	r0, r4, lr
 80a686e:	fb0e 4410 	mls	r4, lr, r0, r4
 80a6872:	fb00 fa08 	mul.w	sl, r0, r8
 80a6876:	b2ad      	uxth	r5, r5
 80a6878:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80a687c:	45a2      	cmp	sl, r4
 80a687e:	d908      	bls.n	80a6892 <__udivmoddi4+0x24e>
 80a6880:	eb1c 0404 	adds.w	r4, ip, r4
 80a6884:	f100 35ff 	add.w	r5, r0, #4294967295
 80a6888:	d22d      	bcs.n	80a68e6 <__udivmoddi4+0x2a2>
 80a688a:	45a2      	cmp	sl, r4
 80a688c:	d92b      	bls.n	80a68e6 <__udivmoddi4+0x2a2>
 80a688e:	3802      	subs	r0, #2
 80a6890:	4464      	add	r4, ip
 80a6892:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80a6896:	fba0 8902 	umull	r8, r9, r0, r2
 80a689a:	eba4 040a 	sub.w	r4, r4, sl
 80a689e:	454c      	cmp	r4, r9
 80a68a0:	46c6      	mov	lr, r8
 80a68a2:	464d      	mov	r5, r9
 80a68a4:	d319      	bcc.n	80a68da <__udivmoddi4+0x296>
 80a68a6:	d016      	beq.n	80a68d6 <__udivmoddi4+0x292>
 80a68a8:	b15e      	cbz	r6, 80a68c2 <__udivmoddi4+0x27e>
 80a68aa:	ebb3 020e 	subs.w	r2, r3, lr
 80a68ae:	eb64 0405 	sbc.w	r4, r4, r5
 80a68b2:	fa04 f707 	lsl.w	r7, r4, r7
 80a68b6:	fa22 f301 	lsr.w	r3, r2, r1
 80a68ba:	431f      	orrs	r7, r3
 80a68bc:	40cc      	lsrs	r4, r1
 80a68be:	e9c6 7400 	strd	r7, r4, [r6]
 80a68c2:	2100      	movs	r1, #0
 80a68c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a68c8:	4631      	mov	r1, r6
 80a68ca:	4630      	mov	r0, r6
 80a68cc:	e70c      	b.n	80a66e8 <__udivmoddi4+0xa4>
 80a68ce:	468c      	mov	ip, r1
 80a68d0:	e6eb      	b.n	80a66aa <__udivmoddi4+0x66>
 80a68d2:	4610      	mov	r0, r2
 80a68d4:	e6ff      	b.n	80a66d6 <__udivmoddi4+0x92>
 80a68d6:	4543      	cmp	r3, r8
 80a68d8:	d2e6      	bcs.n	80a68a8 <__udivmoddi4+0x264>
 80a68da:	ebb8 0e02 	subs.w	lr, r8, r2
 80a68de:	eb69 050c 	sbc.w	r5, r9, ip
 80a68e2:	3801      	subs	r0, #1
 80a68e4:	e7e0      	b.n	80a68a8 <__udivmoddi4+0x264>
 80a68e6:	4628      	mov	r0, r5
 80a68e8:	e7d3      	b.n	80a6892 <__udivmoddi4+0x24e>
 80a68ea:	4611      	mov	r1, r2
 80a68ec:	e78c      	b.n	80a6808 <__udivmoddi4+0x1c4>
 80a68ee:	4681      	mov	r9, r0
 80a68f0:	e7b9      	b.n	80a6866 <__udivmoddi4+0x222>
 80a68f2:	4608      	mov	r0, r1
 80a68f4:	e773      	b.n	80a67de <__udivmoddi4+0x19a>
 80a68f6:	4608      	mov	r0, r1
 80a68f8:	e749      	b.n	80a678e <__udivmoddi4+0x14a>
 80a68fa:	f1ac 0c02 	sub.w	ip, ip, #2
 80a68fe:	443d      	add	r5, r7
 80a6900:	e713      	b.n	80a672a <__udivmoddi4+0xe6>
 80a6902:	3802      	subs	r0, #2
 80a6904:	443c      	add	r4, r7
 80a6906:	e724      	b.n	80a6752 <__udivmoddi4+0x10e>

080a6908 <__aeabi_idiv0>:
 80a6908:	4770      	bx	lr
 80a690a:	bf00      	nop

080a690c <asctime_r>:
 80a690c:	b510      	push	{r4, lr}
 80a690e:	460c      	mov	r4, r1
 80a6910:	6941      	ldr	r1, [r0, #20]
 80a6912:	b086      	sub	sp, #24
 80a6914:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 80a6918:	6903      	ldr	r3, [r0, #16]
 80a691a:	6982      	ldr	r2, [r0, #24]
 80a691c:	9104      	str	r1, [sp, #16]
 80a691e:	6801      	ldr	r1, [r0, #0]
 80a6920:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80a6924:	9103      	str	r1, [sp, #12]
 80a6926:	6841      	ldr	r1, [r0, #4]
 80a6928:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80a692c:	9102      	str	r1, [sp, #8]
 80a692e:	6881      	ldr	r1, [r0, #8]
 80a6930:	9101      	str	r1, [sp, #4]
 80a6932:	68c1      	ldr	r1, [r0, #12]
 80a6934:	4620      	mov	r0, r4
 80a6936:	9100      	str	r1, [sp, #0]
 80a6938:	4904      	ldr	r1, [pc, #16]	; (80a694c <asctime_r+0x40>)
 80a693a:	440b      	add	r3, r1
 80a693c:	4904      	ldr	r1, [pc, #16]	; (80a6950 <asctime_r+0x44>)
 80a693e:	440a      	add	r2, r1
 80a6940:	4904      	ldr	r1, [pc, #16]	; (80a6954 <asctime_r+0x48>)
 80a6942:	f7fd f815 	bl	80a3970 <siprintf>
 80a6946:	4620      	mov	r0, r4
 80a6948:	b006      	add	sp, #24
 80a694a:	bd10      	pop	{r4, pc}
 80a694c:	080a89a2 	.word	0x080a89a2
 80a6950:	080a898d 	.word	0x080a898d
 80a6954:	080a896d 	.word	0x080a896d

080a6958 <atol>:
 80a6958:	220a      	movs	r2, #10
 80a695a:	2100      	movs	r1, #0
 80a695c:	f000 bf5a 	b.w	80a7814 <strtol>

080a6960 <__cxa_atexit>:
 80a6960:	b510      	push	{r4, lr}
 80a6962:	4604      	mov	r4, r0
 80a6964:	4804      	ldr	r0, [pc, #16]	; (80a6978 <__cxa_atexit+0x18>)
 80a6966:	4613      	mov	r3, r2
 80a6968:	b120      	cbz	r0, 80a6974 <__cxa_atexit+0x14>
 80a696a:	460a      	mov	r2, r1
 80a696c:	2002      	movs	r0, #2
 80a696e:	4621      	mov	r1, r4
 80a6970:	f3af 8000 	nop.w
 80a6974:	bd10      	pop	{r4, pc}
 80a6976:	bf00      	nop
 80a6978:	00000000 	.word	0x00000000

080a697c <localtime_r>:
 80a697c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a6980:	460c      	mov	r4, r1
 80a6982:	4607      	mov	r7, r0
 80a6984:	f001 fa56 	bl	80a7e34 <__gettzinfo>
 80a6988:	4621      	mov	r1, r4
 80a698a:	4680      	mov	r8, r0
 80a698c:	4638      	mov	r0, r7
 80a698e:	f001 fa55 	bl	80a7e3c <gmtime_r>
 80a6992:	6943      	ldr	r3, [r0, #20]
 80a6994:	4604      	mov	r4, r0
 80a6996:	079a      	lsls	r2, r3, #30
 80a6998:	f203 766c 	addw	r6, r3, #1900	; 0x76c
 80a699c:	d105      	bne.n	80a69aa <localtime_r+0x2e>
 80a699e:	2264      	movs	r2, #100	; 0x64
 80a69a0:	fb96 f3f2 	sdiv	r3, r6, r2
 80a69a4:	fb02 6313 	mls	r3, r2, r3, r6
 80a69a8:	bb7b      	cbnz	r3, 80a6a0a <localtime_r+0x8e>
 80a69aa:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80a69ae:	fb96 f5f3 	sdiv	r5, r6, r3
 80a69b2:	fb03 6515 	mls	r5, r3, r5, r6
 80a69b6:	fab5 f585 	clz	r5, r5
 80a69ba:	096d      	lsrs	r5, r5, #5
 80a69bc:	2230      	movs	r2, #48	; 0x30
 80a69be:	4b68      	ldr	r3, [pc, #416]	; (80a6b60 <localtime_r+0x1e4>)
 80a69c0:	fb02 3505 	mla	r5, r2, r5, r3
 80a69c4:	f001 f85e 	bl	80a7a84 <__tz_lock>
 80a69c8:	f001 f868 	bl	80a7a9c <_tzset_unlocked>
 80a69cc:	4b65      	ldr	r3, [pc, #404]	; (80a6b64 <localtime_r+0x1e8>)
 80a69ce:	681b      	ldr	r3, [r3, #0]
 80a69d0:	b353      	cbz	r3, 80a6a28 <localtime_r+0xac>
 80a69d2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80a69d6:	42b3      	cmp	r3, r6
 80a69d8:	d119      	bne.n	80a6a0e <localtime_r+0x92>
 80a69da:	e9d7 6700 	ldrd	r6, r7, [r7]
 80a69de:	e9d8 2308 	ldrd	r2, r3, [r8, #32]
 80a69e2:	f8d8 1000 	ldr.w	r1, [r8]
 80a69e6:	b9d1      	cbnz	r1, 80a6a1e <localtime_r+0xa2>
 80a69e8:	4296      	cmp	r6, r2
 80a69ea:	eb77 0303 	sbcs.w	r3, r7, r3
 80a69ee:	da23      	bge.n	80a6a38 <localtime_r+0xbc>
 80a69f0:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 80a69f4:	4296      	cmp	r6, r2
 80a69f6:	eb77 0303 	sbcs.w	r3, r7, r3
 80a69fa:	bfb4      	ite	lt
 80a69fc:	2301      	movlt	r3, #1
 80a69fe:	2300      	movge	r3, #0
 80a6a00:	6223      	str	r3, [r4, #32]
 80a6a02:	db1b      	blt.n	80a6a3c <localtime_r+0xc0>
 80a6a04:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
 80a6a08:	e01a      	b.n	80a6a40 <localtime_r+0xc4>
 80a6a0a:	2501      	movs	r5, #1
 80a6a0c:	e7d6      	b.n	80a69bc <localtime_r+0x40>
 80a6a0e:	4630      	mov	r0, r6
 80a6a10:	f000 ff90 	bl	80a7934 <__tzcalc_limits>
 80a6a14:	2800      	cmp	r0, #0
 80a6a16:	d1e0      	bne.n	80a69da <localtime_r+0x5e>
 80a6a18:	f04f 33ff 	mov.w	r3, #4294967295
 80a6a1c:	e004      	b.n	80a6a28 <localtime_r+0xac>
 80a6a1e:	4296      	cmp	r6, r2
 80a6a20:	eb77 0303 	sbcs.w	r3, r7, r3
 80a6a24:	da02      	bge.n	80a6a2c <localtime_r+0xb0>
 80a6a26:	2300      	movs	r3, #0
 80a6a28:	6223      	str	r3, [r4, #32]
 80a6a2a:	e7eb      	b.n	80a6a04 <localtime_r+0x88>
 80a6a2c:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 80a6a30:	4296      	cmp	r6, r2
 80a6a32:	eb77 0303 	sbcs.w	r3, r7, r3
 80a6a36:	daf6      	bge.n	80a6a26 <localtime_r+0xaa>
 80a6a38:	2301      	movs	r3, #1
 80a6a3a:	6223      	str	r3, [r4, #32]
 80a6a3c:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
 80a6a40:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80a6a44:	fb91 f6f3 	sdiv	r6, r1, r3
 80a6a48:	203c      	movs	r0, #60	; 0x3c
 80a6a4a:	fb03 1316 	mls	r3, r3, r6, r1
 80a6a4e:	fb93 f2f0 	sdiv	r2, r3, r0
 80a6a52:	fb00 3012 	mls	r0, r0, r2, r3
 80a6a56:	6861      	ldr	r1, [r4, #4]
 80a6a58:	6823      	ldr	r3, [r4, #0]
 80a6a5a:	1a89      	subs	r1, r1, r2
 80a6a5c:	68a2      	ldr	r2, [r4, #8]
 80a6a5e:	1a1b      	subs	r3, r3, r0
 80a6a60:	1b92      	subs	r2, r2, r6
 80a6a62:	2b3b      	cmp	r3, #59	; 0x3b
 80a6a64:	6023      	str	r3, [r4, #0]
 80a6a66:	6061      	str	r1, [r4, #4]
 80a6a68:	60a2      	str	r2, [r4, #8]
 80a6a6a:	dd34      	ble.n	80a6ad6 <localtime_r+0x15a>
 80a6a6c:	3101      	adds	r1, #1
 80a6a6e:	6061      	str	r1, [r4, #4]
 80a6a70:	3b3c      	subs	r3, #60	; 0x3c
 80a6a72:	6023      	str	r3, [r4, #0]
 80a6a74:	6863      	ldr	r3, [r4, #4]
 80a6a76:	2b3b      	cmp	r3, #59	; 0x3b
 80a6a78:	dd33      	ble.n	80a6ae2 <localtime_r+0x166>
 80a6a7a:	3201      	adds	r2, #1
 80a6a7c:	60a2      	str	r2, [r4, #8]
 80a6a7e:	3b3c      	subs	r3, #60	; 0x3c
 80a6a80:	6063      	str	r3, [r4, #4]
 80a6a82:	68a3      	ldr	r3, [r4, #8]
 80a6a84:	2b17      	cmp	r3, #23
 80a6a86:	dd32      	ble.n	80a6aee <localtime_r+0x172>
 80a6a88:	69e2      	ldr	r2, [r4, #28]
 80a6a8a:	3b18      	subs	r3, #24
 80a6a8c:	3201      	adds	r2, #1
 80a6a8e:	61e2      	str	r2, [r4, #28]
 80a6a90:	69a2      	ldr	r2, [r4, #24]
 80a6a92:	60a3      	str	r3, [r4, #8]
 80a6a94:	3201      	adds	r2, #1
 80a6a96:	2a06      	cmp	r2, #6
 80a6a98:	bfc8      	it	gt
 80a6a9a:	2200      	movgt	r2, #0
 80a6a9c:	61a2      	str	r2, [r4, #24]
 80a6a9e:	68e2      	ldr	r2, [r4, #12]
 80a6aa0:	6923      	ldr	r3, [r4, #16]
 80a6aa2:	3201      	adds	r2, #1
 80a6aa4:	60e2      	str	r2, [r4, #12]
 80a6aa6:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 80a6aaa:	428a      	cmp	r2, r1
 80a6aac:	dd0e      	ble.n	80a6acc <localtime_r+0x150>
 80a6aae:	2b0b      	cmp	r3, #11
 80a6ab0:	eba2 0201 	sub.w	r2, r2, r1
 80a6ab4:	60e2      	str	r2, [r4, #12]
 80a6ab6:	f103 0201 	add.w	r2, r3, #1
 80a6aba:	bf05      	ittet	eq
 80a6abc:	2200      	moveq	r2, #0
 80a6abe:	6963      	ldreq	r3, [r4, #20]
 80a6ac0:	6122      	strne	r2, [r4, #16]
 80a6ac2:	3301      	addeq	r3, #1
 80a6ac4:	bf02      	ittt	eq
 80a6ac6:	6122      	streq	r2, [r4, #16]
 80a6ac8:	6163      	streq	r3, [r4, #20]
 80a6aca:	61e2      	streq	r2, [r4, #28]
 80a6acc:	f000 ffe0 	bl	80a7a90 <__tz_unlock>
 80a6ad0:	4620      	mov	r0, r4
 80a6ad2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a6ad6:	2b00      	cmp	r3, #0
 80a6ad8:	dacc      	bge.n	80a6a74 <localtime_r+0xf8>
 80a6ada:	3901      	subs	r1, #1
 80a6adc:	6061      	str	r1, [r4, #4]
 80a6ade:	333c      	adds	r3, #60	; 0x3c
 80a6ae0:	e7c7      	b.n	80a6a72 <localtime_r+0xf6>
 80a6ae2:	2b00      	cmp	r3, #0
 80a6ae4:	dacd      	bge.n	80a6a82 <localtime_r+0x106>
 80a6ae6:	3a01      	subs	r2, #1
 80a6ae8:	60a2      	str	r2, [r4, #8]
 80a6aea:	333c      	adds	r3, #60	; 0x3c
 80a6aec:	e7c8      	b.n	80a6a80 <localtime_r+0x104>
 80a6aee:	2b00      	cmp	r3, #0
 80a6af0:	daec      	bge.n	80a6acc <localtime_r+0x150>
 80a6af2:	69e2      	ldr	r2, [r4, #28]
 80a6af4:	3318      	adds	r3, #24
 80a6af6:	3a01      	subs	r2, #1
 80a6af8:	61e2      	str	r2, [r4, #28]
 80a6afa:	69a2      	ldr	r2, [r4, #24]
 80a6afc:	60a3      	str	r3, [r4, #8]
 80a6afe:	3a01      	subs	r2, #1
 80a6b00:	bf48      	it	mi
 80a6b02:	2206      	movmi	r2, #6
 80a6b04:	61a2      	str	r2, [r4, #24]
 80a6b06:	68e2      	ldr	r2, [r4, #12]
 80a6b08:	3a01      	subs	r2, #1
 80a6b0a:	60e2      	str	r2, [r4, #12]
 80a6b0c:	2a00      	cmp	r2, #0
 80a6b0e:	d1dd      	bne.n	80a6acc <localtime_r+0x150>
 80a6b10:	6923      	ldr	r3, [r4, #16]
 80a6b12:	3b01      	subs	r3, #1
 80a6b14:	d405      	bmi.n	80a6b22 <localtime_r+0x1a6>
 80a6b16:	6123      	str	r3, [r4, #16]
 80a6b18:	6923      	ldr	r3, [r4, #16]
 80a6b1a:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80a6b1e:	60e3      	str	r3, [r4, #12]
 80a6b20:	e7d4      	b.n	80a6acc <localtime_r+0x150>
 80a6b22:	230b      	movs	r3, #11
 80a6b24:	6123      	str	r3, [r4, #16]
 80a6b26:	6963      	ldr	r3, [r4, #20]
 80a6b28:	1e5a      	subs	r2, r3, #1
 80a6b2a:	6162      	str	r2, [r4, #20]
 80a6b2c:	f203 726b 	addw	r2, r3, #1899	; 0x76b
 80a6b30:	0793      	lsls	r3, r2, #30
 80a6b32:	d105      	bne.n	80a6b40 <localtime_r+0x1c4>
 80a6b34:	2164      	movs	r1, #100	; 0x64
 80a6b36:	fb92 f3f1 	sdiv	r3, r2, r1
 80a6b3a:	fb01 2313 	mls	r3, r1, r3, r2
 80a6b3e:	b963      	cbnz	r3, 80a6b5a <localtime_r+0x1de>
 80a6b40:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80a6b44:	fb92 f3f1 	sdiv	r3, r2, r1
 80a6b48:	fb01 2313 	mls	r3, r1, r3, r2
 80a6b4c:	fab3 f383 	clz	r3, r3
 80a6b50:	095b      	lsrs	r3, r3, #5
 80a6b52:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 80a6b56:	61e3      	str	r3, [r4, #28]
 80a6b58:	e7de      	b.n	80a6b18 <localtime_r+0x19c>
 80a6b5a:	2301      	movs	r3, #1
 80a6b5c:	e7f9      	b.n	80a6b52 <localtime_r+0x1d6>
 80a6b5e:	bf00      	nop
 80a6b60:	080a89c8 	.word	0x080a89c8
 80a6b64:	20000670 	.word	0x20000670

080a6b68 <memcpy>:
 80a6b68:	440a      	add	r2, r1
 80a6b6a:	4291      	cmp	r1, r2
 80a6b6c:	f100 33ff 	add.w	r3, r0, #4294967295
 80a6b70:	d100      	bne.n	80a6b74 <memcpy+0xc>
 80a6b72:	4770      	bx	lr
 80a6b74:	b510      	push	{r4, lr}
 80a6b76:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a6b7a:	4291      	cmp	r1, r2
 80a6b7c:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a6b80:	d1f9      	bne.n	80a6b76 <memcpy+0xe>
 80a6b82:	bd10      	pop	{r4, pc}

080a6b84 <memset>:
 80a6b84:	4603      	mov	r3, r0
 80a6b86:	4402      	add	r2, r0
 80a6b88:	4293      	cmp	r3, r2
 80a6b8a:	d100      	bne.n	80a6b8e <memset+0xa>
 80a6b8c:	4770      	bx	lr
 80a6b8e:	f803 1b01 	strb.w	r1, [r3], #1
 80a6b92:	e7f9      	b.n	80a6b88 <memset+0x4>

080a6b94 <srand>:
 80a6b94:	b538      	push	{r3, r4, r5, lr}
 80a6b96:	4b0d      	ldr	r3, [pc, #52]	; (80a6bcc <srand+0x38>)
 80a6b98:	4604      	mov	r4, r0
 80a6b9a:	681d      	ldr	r5, [r3, #0]
 80a6b9c:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a6b9e:	b97b      	cbnz	r3, 80a6bc0 <srand+0x2c>
 80a6ba0:	2018      	movs	r0, #24
 80a6ba2:	f7fc fecd 	bl	80a3940 <malloc>
 80a6ba6:	4a0a      	ldr	r2, [pc, #40]	; (80a6bd0 <srand+0x3c>)
 80a6ba8:	4b0a      	ldr	r3, [pc, #40]	; (80a6bd4 <srand+0x40>)
 80a6baa:	63a8      	str	r0, [r5, #56]	; 0x38
 80a6bac:	e9c0 2300 	strd	r2, r3, [r0]
 80a6bb0:	4b09      	ldr	r3, [pc, #36]	; (80a6bd8 <srand+0x44>)
 80a6bb2:	2201      	movs	r2, #1
 80a6bb4:	6083      	str	r3, [r0, #8]
 80a6bb6:	230b      	movs	r3, #11
 80a6bb8:	8183      	strh	r3, [r0, #12]
 80a6bba:	2300      	movs	r3, #0
 80a6bbc:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a6bc0:	2200      	movs	r2, #0
 80a6bc2:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a6bc4:	611c      	str	r4, [r3, #16]
 80a6bc6:	615a      	str	r2, [r3, #20]
 80a6bc8:	bd38      	pop	{r3, r4, r5, pc}
 80a6bca:	bf00      	nop
 80a6bcc:	2000000c 	.word	0x2000000c
 80a6bd0:	abcd330e 	.word	0xabcd330e
 80a6bd4:	e66d1234 	.word	0xe66d1234
 80a6bd8:	0005deec 	.word	0x0005deec

080a6bdc <strcmp>:
 80a6bdc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80a6be0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80a6be4:	2a01      	cmp	r2, #1
 80a6be6:	bf28      	it	cs
 80a6be8:	429a      	cmpcs	r2, r3
 80a6bea:	d0f7      	beq.n	80a6bdc <strcmp>
 80a6bec:	1ad0      	subs	r0, r2, r3
 80a6bee:	4770      	bx	lr

080a6bf0 <strcpy>:
 80a6bf0:	4603      	mov	r3, r0
 80a6bf2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80a6bf6:	f803 2b01 	strb.w	r2, [r3], #1
 80a6bfa:	2a00      	cmp	r2, #0
 80a6bfc:	d1f9      	bne.n	80a6bf2 <strcpy+0x2>
 80a6bfe:	4770      	bx	lr

080a6c00 <iso_year_adjust>:
 80a6c00:	6941      	ldr	r1, [r0, #20]
 80a6c02:	f240 736c 	movw	r3, #1900	; 0x76c
 80a6c06:	2900      	cmp	r1, #0
 80a6c08:	bfa8      	it	ge
 80a6c0a:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 80a6c0e:	18ca      	adds	r2, r1, r3
 80a6c10:	078b      	lsls	r3, r1, #30
 80a6c12:	d105      	bne.n	80a6c20 <iso_year_adjust+0x20>
 80a6c14:	2164      	movs	r1, #100	; 0x64
 80a6c16:	fb92 f3f1 	sdiv	r3, r2, r1
 80a6c1a:	fb01 2313 	mls	r3, r1, r3, r2
 80a6c1e:	b9db      	cbnz	r3, 80a6c58 <iso_year_adjust+0x58>
 80a6c20:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80a6c24:	fb92 f3f1 	sdiv	r3, r2, r1
 80a6c28:	fb01 2313 	mls	r3, r1, r3, r2
 80a6c2c:	fab3 f383 	clz	r3, r3
 80a6c30:	095b      	lsrs	r3, r3, #5
 80a6c32:	e9d0 0206 	ldrd	r0, r2, [r0, #24]
 80a6c36:	0040      	lsls	r0, r0, #1
 80a6c38:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 80a6c3c:	4418      	add	r0, r3
 80a6c3e:	f241 63a2 	movw	r3, #5794	; 0x16a2
 80a6c42:	4298      	cmp	r0, r3
 80a6c44:	d03a      	beq.n	80a6cbc <iso_year_adjust+0xbc>
 80a6c46:	dc21      	bgt.n	80a6c8c <iso_year_adjust+0x8c>
 80a6c48:	2801      	cmp	r0, #1
 80a6c4a:	dc1a      	bgt.n	80a6c82 <iso_year_adjust+0x82>
 80a6c4c:	2800      	cmp	r0, #0
 80a6c4e:	bfb4      	ite	lt
 80a6c50:	2000      	movlt	r0, #0
 80a6c52:	f04f 30ff 	movge.w	r0, #4294967295
 80a6c56:	4770      	bx	lr
 80a6c58:	2301      	movs	r3, #1
 80a6c5a:	e7ea      	b.n	80a6c32 <iso_year_adjust+0x32>
 80a6c5c:	2817      	cmp	r0, #23
 80a6c5e:	d813      	bhi.n	80a6c88 <iso_year_adjust+0x88>
 80a6c60:	e8df f000 	tbb	[pc, r0]
 80a6c64:	0c0c0c0c 	.word	0x0c0c0c0c
 80a6c68:	0c0c1212 	.word	0x0c0c1212
 80a6c6c:	12121212 	.word	0x12121212
 80a6c70:	12121212 	.word	0x12121212
 80a6c74:	0c0c1212 	.word	0x0c0c1212
 80a6c78:	0c0c1212 	.word	0x0c0c1212
 80a6c7c:	f04f 30ff 	mov.w	r0, #4294967295
 80a6c80:	4770      	bx	lr
 80a6c82:	380a      	subs	r0, #10
 80a6c84:	2817      	cmp	r0, #23
 80a6c86:	d9e9      	bls.n	80a6c5c <iso_year_adjust+0x5c>
 80a6c88:	2000      	movs	r0, #0
 80a6c8a:	4770      	bx	lr
 80a6c8c:	f241 63b4 	movw	r3, #5812	; 0x16b4
 80a6c90:	4298      	cmp	r0, r3
 80a6c92:	dc06      	bgt.n	80a6ca2 <iso_year_adjust+0xa2>
 80a6c94:	f241 63b1 	movw	r3, #5809	; 0x16b1
 80a6c98:	4298      	cmp	r0, r3
 80a6c9a:	bfd4      	ite	le
 80a6c9c:	2000      	movle	r0, #0
 80a6c9e:	2001      	movgt	r0, #1
 80a6ca0:	4770      	bx	lr
 80a6ca2:	f5a0 50b6 	sub.w	r0, r0, #5824	; 0x16c0
 80a6ca6:	3802      	subs	r0, #2
 80a6ca8:	2815      	cmp	r0, #21
 80a6caa:	d8ed      	bhi.n	80a6c88 <iso_year_adjust+0x88>
 80a6cac:	2301      	movs	r3, #1
 80a6cae:	4083      	lsls	r3, r0
 80a6cb0:	4803      	ldr	r0, [pc, #12]	; (80a6cc0 <iso_year_adjust+0xc0>)
 80a6cb2:	4018      	ands	r0, r3
 80a6cb4:	3800      	subs	r0, #0
 80a6cb6:	bf18      	it	ne
 80a6cb8:	2001      	movne	r0, #1
 80a6cba:	4770      	bx	lr
 80a6cbc:	2001      	movs	r0, #1
 80a6cbe:	4770      	bx	lr
 80a6cc0:	002a001f 	.word	0x002a001f

080a6cc4 <__strftime>:
 80a6cc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a6cc8:	461e      	mov	r6, r3
 80a6cca:	2300      	movs	r3, #0
 80a6ccc:	4607      	mov	r7, r0
 80a6cce:	460d      	mov	r5, r1
 80a6cd0:	461c      	mov	r4, r3
 80a6cd2:	b091      	sub	sp, #68	; 0x44
 80a6cd4:	9304      	str	r3, [sp, #16]
 80a6cd6:	7813      	ldrb	r3, [r2, #0]
 80a6cd8:	2b00      	cmp	r3, #0
 80a6cda:	f000 84da 	beq.w	80a7692 <__strftime+0x9ce>
 80a6cde:	2b25      	cmp	r3, #37	; 0x25
 80a6ce0:	d11f      	bne.n	80a6d22 <__strftime+0x5e>
 80a6ce2:	f892 9001 	ldrb.w	r9, [r2, #1]
 80a6ce6:	f1b9 0f30 	cmp.w	r9, #48	; 0x30
 80a6cea:	d024      	beq.n	80a6d36 <__strftime+0x72>
 80a6cec:	f1b9 0f2b 	cmp.w	r9, #43	; 0x2b
 80a6cf0:	d021      	beq.n	80a6d36 <__strftime+0x72>
 80a6cf2:	f04f 0900 	mov.w	r9, #0
 80a6cf6:	f102 0a01 	add.w	sl, r2, #1
 80a6cfa:	f89a 3000 	ldrb.w	r3, [sl]
 80a6cfe:	3b31      	subs	r3, #49	; 0x31
 80a6d00:	2b08      	cmp	r3, #8
 80a6d02:	d81b      	bhi.n	80a6d3c <__strftime+0x78>
 80a6d04:	4650      	mov	r0, sl
 80a6d06:	220a      	movs	r2, #10
 80a6d08:	a908      	add	r1, sp, #32
 80a6d0a:	f000 fe09 	bl	80a7920 <strtoul>
 80a6d0e:	4680      	mov	r8, r0
 80a6d10:	f8dd a020 	ldr.w	sl, [sp, #32]
 80a6d14:	f89a 3000 	ldrb.w	r3, [sl]
 80a6d18:	2b45      	cmp	r3, #69	; 0x45
 80a6d1a:	d112      	bne.n	80a6d42 <__strftime+0x7e>
 80a6d1c:	f10a 0a01 	add.w	sl, sl, #1
 80a6d20:	e011      	b.n	80a6d46 <__strftime+0x82>
 80a6d22:	1e69      	subs	r1, r5, #1
 80a6d24:	42a1      	cmp	r1, r4
 80a6d26:	d802      	bhi.n	80a6d2e <__strftime+0x6a>
 80a6d28:	2400      	movs	r4, #0
 80a6d2a:	f000 bcb5 	b.w	80a7698 <__strftime+0x9d4>
 80a6d2e:	553b      	strb	r3, [r7, r4]
 80a6d30:	3201      	adds	r2, #1
 80a6d32:	3401      	adds	r4, #1
 80a6d34:	e7cf      	b.n	80a6cd6 <__strftime+0x12>
 80a6d36:	f102 0a02 	add.w	sl, r2, #2
 80a6d3a:	e7de      	b.n	80a6cfa <__strftime+0x36>
 80a6d3c:	f04f 0800 	mov.w	r8, #0
 80a6d40:	e7e8      	b.n	80a6d14 <__strftime+0x50>
 80a6d42:	2b4f      	cmp	r3, #79	; 0x4f
 80a6d44:	d0ea      	beq.n	80a6d1c <__strftime+0x58>
 80a6d46:	f89a 0000 	ldrb.w	r0, [sl]
 80a6d4a:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
 80a6d4e:	2b55      	cmp	r3, #85	; 0x55
 80a6d50:	d8ea      	bhi.n	80a6d28 <__strftime+0x64>
 80a6d52:	a201      	add	r2, pc, #4	; (adr r2, 80a6d58 <__strftime+0x94>)
 80a6d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80a6d58:	080a7687 	.word	0x080a7687
 80a6d5c:	080a6d29 	.word	0x080a6d29
 80a6d60:	080a6d29 	.word	0x080a6d29
 80a6d64:	080a6d29 	.word	0x080a6d29
 80a6d68:	080a6d29 	.word	0x080a6d29
 80a6d6c:	080a6d29 	.word	0x080a6d29
 80a6d70:	080a6d29 	.word	0x080a6d29
 80a6d74:	080a6d29 	.word	0x080a6d29
 80a6d78:	080a6d29 	.word	0x080a6d29
 80a6d7c:	080a6d29 	.word	0x080a6d29
 80a6d80:	080a6d29 	.word	0x080a6d29
 80a6d84:	080a6d29 	.word	0x080a6d29
 80a6d88:	080a6d29 	.word	0x080a6d29
 80a6d8c:	080a6d29 	.word	0x080a6d29
 80a6d90:	080a6d29 	.word	0x080a6d29
 80a6d94:	080a6d29 	.word	0x080a6d29
 80a6d98:	080a6d29 	.word	0x080a6d29
 80a6d9c:	080a6d29 	.word	0x080a6d29
 80a6da0:	080a6d29 	.word	0x080a6d29
 80a6da4:	080a6d29 	.word	0x080a6d29
 80a6da8:	080a6d29 	.word	0x080a6d29
 80a6dac:	080a6d29 	.word	0x080a6d29
 80a6db0:	080a6d29 	.word	0x080a6d29
 80a6db4:	080a6d29 	.word	0x080a6d29
 80a6db8:	080a6d29 	.word	0x080a6d29
 80a6dbc:	080a6d29 	.word	0x080a6d29
 80a6dc0:	080a6d29 	.word	0x080a6d29
 80a6dc4:	080a6d29 	.word	0x080a6d29
 80a6dc8:	080a6eed 	.word	0x080a6eed
 80a6dcc:	080a6f45 	.word	0x080a6f45
 80a6dd0:	080a6fb7 	.word	0x080a6fb7
 80a6dd4:	080a704f 	.word	0x080a704f
 80a6dd8:	080a6d29 	.word	0x080a6d29
 80a6ddc:	080a7099 	.word	0x080a7099
 80a6de0:	080a718d 	.word	0x080a718d
 80a6de4:	080a7297 	.word	0x080a7297
 80a6de8:	080a72a5 	.word	0x080a72a5
 80a6dec:	080a6d29 	.word	0x080a6d29
 80a6df0:	080a6d29 	.word	0x080a6d29
 80a6df4:	080a6d29 	.word	0x080a6d29
 80a6df8:	080a72d5 	.word	0x080a72d5
 80a6dfc:	080a6d29 	.word	0x080a6d29
 80a6e00:	080a6d29 	.word	0x080a6d29
 80a6e04:	080a72e9 	.word	0x080a72e9
 80a6e08:	080a6d29 	.word	0x080a6d29
 80a6e0c:	080a7339 	.word	0x080a7339
 80a6e10:	080a744f 	.word	0x080a744f
 80a6e14:	080a745f 	.word	0x080a745f
 80a6e18:	080a74b3 	.word	0x080a74b3
 80a6e1c:	080a74c3 	.word	0x080a74c3
 80a6e20:	080a7535 	.word	0x080a7535
 80a6e24:	080a6faf 	.word	0x080a6faf
 80a6e28:	080a7569 	.word	0x080a7569
 80a6e2c:	080a7635 	.word	0x080a7635
 80a6e30:	080a6d29 	.word	0x080a6d29
 80a6e34:	080a6d29 	.word	0x080a6d29
 80a6e38:	080a6d29 	.word	0x080a6d29
 80a6e3c:	080a6d29 	.word	0x080a6d29
 80a6e40:	080a6d29 	.word	0x080a6d29
 80a6e44:	080a6d29 	.word	0x080a6d29
 80a6e48:	080a6eb1 	.word	0x080a6eb1
 80a6e4c:	080a6f1b 	.word	0x080a6f1b
 80a6e50:	080a6f71 	.word	0x080a6f71
 80a6e54:	080a702b 	.word	0x080a702b
 80a6e58:	080a702b 	.word	0x080a702b
 80a6e5c:	080a6d29 	.word	0x080a6d29
 80a6e60:	080a70ef 	.word	0x080a70ef
 80a6e64:	080a6f1b 	.word	0x080a6f1b
 80a6e68:	080a6d29 	.word	0x080a6d29
 80a6e6c:	080a72c7 	.word	0x080a72c7
 80a6e70:	080a7297 	.word	0x080a7297
 80a6e74:	080a72a5 	.word	0x080a72a5
 80a6e78:	080a72cf 	.word	0x080a72cf
 80a6e7c:	080a72d9 	.word	0x080a72d9
 80a6e80:	080a6d29 	.word	0x080a6d29
 80a6e84:	080a72e9 	.word	0x080a72e9
 80a6e88:	080a6d29 	.word	0x080a6d29
 80a6e8c:	080a6f9f 	.word	0x080a6f9f
 80a6e90:	080a734b 	.word	0x080a734b
 80a6e94:	080a7453 	.word	0x080a7453
 80a6e98:	080a7499 	.word	0x080a7499
 80a6e9c:	080a6d29 	.word	0x080a6d29
 80a6ea0:	080a7527 	.word	0x080a7527
 80a6ea4:	080a6fa7 	.word	0x080a6fa7
 80a6ea8:	080a754d 	.word	0x080a754d
 80a6eac:	080a75c5 	.word	0x080a75c5
 80a6eb0:	69b3      	ldr	r3, [r6, #24]
 80a6eb2:	4aa9      	ldr	r2, [pc, #676]	; (80a7158 <__strftime+0x494>)
 80a6eb4:	3318      	adds	r3, #24
 80a6eb6:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
 80a6eba:	4640      	mov	r0, r8
 80a6ebc:	f000 fc02 	bl	80a76c4 <strlen>
 80a6ec0:	f108 38ff 	add.w	r8, r8, #4294967295
 80a6ec4:	4420      	add	r0, r4
 80a6ec6:	1e6b      	subs	r3, r5, #1
 80a6ec8:	42a0      	cmp	r0, r4
 80a6eca:	d107      	bne.n	80a6edc <__strftime+0x218>
 80a6ecc:	f89a 3000 	ldrb.w	r3, [sl]
 80a6ed0:	2b00      	cmp	r3, #0
 80a6ed2:	f000 83de 	beq.w	80a7692 <__strftime+0x9ce>
 80a6ed6:	f10a 0201 	add.w	r2, sl, #1
 80a6eda:	e6fc      	b.n	80a6cd6 <__strftime+0x12>
 80a6edc:	42a3      	cmp	r3, r4
 80a6ede:	f67f af23 	bls.w	80a6d28 <__strftime+0x64>
 80a6ee2:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 80a6ee6:	553a      	strb	r2, [r7, r4]
 80a6ee8:	3401      	adds	r4, #1
 80a6eea:	e7ed      	b.n	80a6ec8 <__strftime+0x204>
 80a6eec:	69b2      	ldr	r2, [r6, #24]
 80a6eee:	4b9a      	ldr	r3, [pc, #616]	; (80a7158 <__strftime+0x494>)
 80a6ef0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80a6ef4:	f8d3 807c 	ldr.w	r8, [r3, #124]	; 0x7c
 80a6ef8:	4640      	mov	r0, r8
 80a6efa:	f000 fbe3 	bl	80a76c4 <strlen>
 80a6efe:	f108 38ff 	add.w	r8, r8, #4294967295
 80a6f02:	4420      	add	r0, r4
 80a6f04:	1e6b      	subs	r3, r5, #1
 80a6f06:	42a0      	cmp	r0, r4
 80a6f08:	d0e0      	beq.n	80a6ecc <__strftime+0x208>
 80a6f0a:	42a3      	cmp	r3, r4
 80a6f0c:	f67f af0c 	bls.w	80a6d28 <__strftime+0x64>
 80a6f10:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 80a6f14:	553a      	strb	r2, [r7, r4]
 80a6f16:	3401      	adds	r4, #1
 80a6f18:	e7f5      	b.n	80a6f06 <__strftime+0x242>
 80a6f1a:	4b8f      	ldr	r3, [pc, #572]	; (80a7158 <__strftime+0x494>)
 80a6f1c:	6932      	ldr	r2, [r6, #16]
 80a6f1e:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
 80a6f22:	4640      	mov	r0, r8
 80a6f24:	f000 fbce 	bl	80a76c4 <strlen>
 80a6f28:	f108 38ff 	add.w	r8, r8, #4294967295
 80a6f2c:	4420      	add	r0, r4
 80a6f2e:	1e6b      	subs	r3, r5, #1
 80a6f30:	42a0      	cmp	r0, r4
 80a6f32:	d0cb      	beq.n	80a6ecc <__strftime+0x208>
 80a6f34:	42a3      	cmp	r3, r4
 80a6f36:	f67f aef7 	bls.w	80a6d28 <__strftime+0x64>
 80a6f3a:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 80a6f3e:	553a      	strb	r2, [r7, r4]
 80a6f40:	3401      	adds	r4, #1
 80a6f42:	e7f5      	b.n	80a6f30 <__strftime+0x26c>
 80a6f44:	6933      	ldr	r3, [r6, #16]
 80a6f46:	4a84      	ldr	r2, [pc, #528]	; (80a7158 <__strftime+0x494>)
 80a6f48:	330c      	adds	r3, #12
 80a6f4a:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
 80a6f4e:	4640      	mov	r0, r8
 80a6f50:	f000 fbb8 	bl	80a76c4 <strlen>
 80a6f54:	f108 38ff 	add.w	r8, r8, #4294967295
 80a6f58:	4420      	add	r0, r4
 80a6f5a:	1e6b      	subs	r3, r5, #1
 80a6f5c:	42a0      	cmp	r0, r4
 80a6f5e:	d0b5      	beq.n	80a6ecc <__strftime+0x208>
 80a6f60:	42a3      	cmp	r3, r4
 80a6f62:	f67f aee1 	bls.w	80a6d28 <__strftime+0x64>
 80a6f66:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 80a6f6a:	553a      	strb	r2, [r7, r4]
 80a6f6c:	3401      	adds	r4, #1
 80a6f6e:	e7f5      	b.n	80a6f5c <__strftime+0x298>
 80a6f70:	4b79      	ldr	r3, [pc, #484]	; (80a7158 <__strftime+0x494>)
 80a6f72:	f8d3 80a0 	ldr.w	r8, [r3, #160]	; 0xa0
 80a6f76:	4640      	mov	r0, r8
 80a6f78:	f000 fba4 	bl	80a76c4 <strlen>
 80a6f7c:	f898 3000 	ldrb.w	r3, [r8]
 80a6f80:	2b00      	cmp	r3, #0
 80a6f82:	d0a3      	beq.n	80a6ecc <__strftime+0x208>
 80a6f84:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80a6f86:	4642      	mov	r2, r8
 80a6f88:	9300      	str	r3, [sp, #0]
 80a6f8a:	4633      	mov	r3, r6
 80a6f8c:	1b29      	subs	r1, r5, r4
 80a6f8e:	1938      	adds	r0, r7, r4
 80a6f90:	f7ff fe98 	bl	80a6cc4 <__strftime>
 80a6f94:	2800      	cmp	r0, #0
 80a6f96:	f77f aec7 	ble.w	80a6d28 <__strftime+0x64>
 80a6f9a:	4404      	add	r4, r0
 80a6f9c:	e796      	b.n	80a6ecc <__strftime+0x208>
 80a6f9e:	4b6e      	ldr	r3, [pc, #440]	; (80a7158 <__strftime+0x494>)
 80a6fa0:	f8d3 80e4 	ldr.w	r8, [r3, #228]	; 0xe4
 80a6fa4:	e7e7      	b.n	80a6f76 <__strftime+0x2b2>
 80a6fa6:	4b6c      	ldr	r3, [pc, #432]	; (80a7158 <__strftime+0x494>)
 80a6fa8:	f8d3 809c 	ldr.w	r8, [r3, #156]	; 0x9c
 80a6fac:	e7e3      	b.n	80a6f76 <__strftime+0x2b2>
 80a6fae:	4b6a      	ldr	r3, [pc, #424]	; (80a7158 <__strftime+0x494>)
 80a6fb0:	f8d3 8098 	ldr.w	r8, [r3, #152]	; 0x98
 80a6fb4:	e7df      	b.n	80a6f76 <__strftime+0x2b2>
 80a6fb6:	4969      	ldr	r1, [pc, #420]	; (80a715c <__strftime+0x498>)
 80a6fb8:	f8d6 b014 	ldr.w	fp, [r6, #20]
 80a6fbc:	458b      	cmp	fp, r1
 80a6fbe:	bfac      	ite	ge
 80a6fc0:	2100      	movge	r1, #0
 80a6fc2:	2101      	movlt	r1, #1
 80a6fc4:	f1bb 0f00 	cmp.w	fp, #0
 80a6fc8:	db10      	blt.n	80a6fec <__strftime+0x328>
 80a6fca:	2064      	movs	r0, #100	; 0x64
 80a6fcc:	fb9b f0f0 	sdiv	r0, fp, r0
 80a6fd0:	3013      	adds	r0, #19
 80a6fd2:	f1b9 0f00 	cmp.w	r9, #0
 80a6fd6:	d013      	beq.n	80a7000 <__strftime+0x33c>
 80a6fd8:	2863      	cmp	r0, #99	; 0x63
 80a6fda:	dd24      	ble.n	80a7026 <__strftime+0x362>
 80a6fdc:	4a60      	ldr	r2, [pc, #384]	; (80a7160 <__strftime+0x49c>)
 80a6fde:	4b61      	ldr	r3, [pc, #388]	; (80a7164 <__strftime+0x4a0>)
 80a6fe0:	f1b9 0f2b 	cmp.w	r9, #43	; 0x2b
 80a6fe4:	bf18      	it	ne
 80a6fe6:	4613      	movne	r3, r2
 80a6fe8:	4a5f      	ldr	r2, [pc, #380]	; (80a7168 <__strftime+0x4a4>)
 80a6fea:	e00b      	b.n	80a7004 <__strftime+0x340>
 80a6fec:	f20b 706c 	addw	r0, fp, #1900	; 0x76c
 80a6ff0:	9105      	str	r1, [sp, #20]
 80a6ff2:	f000 fed9 	bl	80a7da8 <abs>
 80a6ff6:	2364      	movs	r3, #100	; 0x64
 80a6ff8:	9905      	ldr	r1, [sp, #20]
 80a6ffa:	fb90 f0f3 	sdiv	r0, r0, r3
 80a6ffe:	e7e8      	b.n	80a6fd2 <__strftime+0x30e>
 80a7000:	4b57      	ldr	r3, [pc, #348]	; (80a7160 <__strftime+0x49c>)
 80a7002:	4a5a      	ldr	r2, [pc, #360]	; (80a716c <__strftime+0x4a8>)
 80a7004:	f1b8 0f02 	cmp.w	r8, #2
 80a7008:	bf2c      	ite	cs
 80a700a:	ebc1 0108 	rsbcs	r1, r1, r8
 80a700e:	f1c1 0102 	rsbcc	r1, r1, #2
 80a7012:	9001      	str	r0, [sp, #4]
 80a7014:	9100      	str	r1, [sp, #0]
 80a7016:	4851      	ldr	r0, [pc, #324]	; (80a715c <__strftime+0x498>)
 80a7018:	4955      	ldr	r1, [pc, #340]	; (80a7170 <__strftime+0x4ac>)
 80a701a:	4583      	cmp	fp, r0
 80a701c:	bfb8      	it	lt
 80a701e:	460b      	movlt	r3, r1
 80a7020:	1b29      	subs	r1, r5, r4
 80a7022:	1938      	adds	r0, r7, r4
 80a7024:	e029      	b.n	80a707a <__strftime+0x3b6>
 80a7026:	4b4e      	ldr	r3, [pc, #312]	; (80a7160 <__strftime+0x49c>)
 80a7028:	e7de      	b.n	80a6fe8 <__strftime+0x324>
 80a702a:	4952      	ldr	r1, [pc, #328]	; (80a7174 <__strftime+0x4b0>)
 80a702c:	4a52      	ldr	r2, [pc, #328]	; (80a7178 <__strftime+0x4b4>)
 80a702e:	68f3      	ldr	r3, [r6, #12]
 80a7030:	2864      	cmp	r0, #100	; 0x64
 80a7032:	bf08      	it	eq
 80a7034:	460a      	moveq	r2, r1
 80a7036:	1b29      	subs	r1, r5, r4
 80a7038:	1938      	adds	r0, r7, r4
 80a703a:	f7fc fcb9 	bl	80a39b0 <sniprintf>
 80a703e:	2800      	cmp	r0, #0
 80a7040:	f6ff ae72 	blt.w	80a6d28 <__strftime+0x64>
 80a7044:	4404      	add	r4, r0
 80a7046:	42a5      	cmp	r5, r4
 80a7048:	f63f af40 	bhi.w	80a6ecc <__strftime+0x208>
 80a704c:	e66c      	b.n	80a6d28 <__strftime+0x64>
 80a704e:	6970      	ldr	r0, [r6, #20]
 80a7050:	6933      	ldr	r3, [r6, #16]
 80a7052:	2800      	cmp	r0, #0
 80a7054:	f103 0b01 	add.w	fp, r3, #1
 80a7058:	eb07 0804 	add.w	r8, r7, r4
 80a705c:	68f3      	ldr	r3, [r6, #12]
 80a705e:	eba5 0904 	sub.w	r9, r5, r4
 80a7062:	db0d      	blt.n	80a7080 <__strftime+0x3bc>
 80a7064:	2164      	movs	r1, #100	; 0x64
 80a7066:	fb90 f2f1 	sdiv	r2, r0, r1
 80a706a:	fb01 0212 	mls	r2, r1, r2, r0
 80a706e:	e9cd 3200 	strd	r3, r2, [sp]
 80a7072:	4649      	mov	r1, r9
 80a7074:	465b      	mov	r3, fp
 80a7076:	4640      	mov	r0, r8
 80a7078:	4a40      	ldr	r2, [pc, #256]	; (80a717c <__strftime+0x4b8>)
 80a707a:	f7fc fc99 	bl	80a39b0 <sniprintf>
 80a707e:	e7de      	b.n	80a703e <__strftime+0x37a>
 80a7080:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80a7084:	9305      	str	r3, [sp, #20]
 80a7086:	f000 fe8f 	bl	80a7da8 <abs>
 80a708a:	2264      	movs	r2, #100	; 0x64
 80a708c:	fb90 f1f2 	sdiv	r1, r0, r2
 80a7090:	9b05      	ldr	r3, [sp, #20]
 80a7092:	fb01 0212 	mls	r2, r1, r2, r0
 80a7096:	e7ea      	b.n	80a706e <__strftime+0x3aa>
 80a7098:	2325      	movs	r3, #37	; 0x25
 80a709a:	f88d 3020 	strb.w	r3, [sp, #32]
 80a709e:	f1b9 0f00 	cmp.w	r9, #0
 80a70a2:	d013      	beq.n	80a70cc <__strftime+0x408>
 80a70a4:	f1b8 0f06 	cmp.w	r8, #6
 80a70a8:	bf38      	it	cc
 80a70aa:	f04f 0806 	movcc.w	r8, #6
 80a70ae:	f1b8 0306 	subs.w	r3, r8, #6
 80a70b2:	f88d 9021 	strb.w	r9, [sp, #33]	; 0x21
 80a70b6:	d10e      	bne.n	80a70d6 <__strftime+0x412>
 80a70b8:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 80a70bc:	4930      	ldr	r1, [pc, #192]	; (80a7180 <__strftime+0x4bc>)
 80a70be:	f7ff fd97 	bl	80a6bf0 <strcpy>
 80a70c2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80a70c4:	aa08      	add	r2, sp, #32
 80a70c6:	9300      	str	r3, [sp, #0]
 80a70c8:	4633      	mov	r3, r6
 80a70ca:	e75f      	b.n	80a6f8c <__strftime+0x2c8>
 80a70cc:	f04f 092b 	mov.w	r9, #43	; 0x2b
 80a70d0:	f04f 080a 	mov.w	r8, #10
 80a70d4:	e7eb      	b.n	80a70ae <__strftime+0x3ea>
 80a70d6:	211e      	movs	r1, #30
 80a70d8:	4a2a      	ldr	r2, [pc, #168]	; (80a7184 <__strftime+0x4c0>)
 80a70da:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 80a70de:	f7fc fc67 	bl	80a39b0 <sniprintf>
 80a70e2:	2800      	cmp	r0, #0
 80a70e4:	dde8      	ble.n	80a70b8 <__strftime+0x3f4>
 80a70e6:	f10d 0322 	add.w	r3, sp, #34	; 0x22
 80a70ea:	4418      	add	r0, r3
 80a70ec:	e7e6      	b.n	80a70bc <__strftime+0x3f8>
 80a70ee:	4630      	mov	r0, r6
 80a70f0:	f7ff fd86 	bl	80a6c00 <iso_year_adjust>
 80a70f4:	4680      	mov	r8, r0
 80a70f6:	6970      	ldr	r0, [r6, #20]
 80a70f8:	2800      	cmp	r0, #0
 80a70fa:	db11      	blt.n	80a7120 <__strftime+0x45c>
 80a70fc:	2264      	movs	r2, #100	; 0x64
 80a70fe:	fb90 f3f2 	sdiv	r3, r0, r2
 80a7102:	fb02 0313 	mls	r3, r2, r3, r0
 80a7106:	4498      	add	r8, r3
 80a7108:	2364      	movs	r3, #100	; 0x64
 80a710a:	fb98 f0f3 	sdiv	r0, r8, r3
 80a710e:	fb03 8810 	mls	r8, r3, r0, r8
 80a7112:	4498      	add	r8, r3
 80a7114:	fbb8 f2f3 	udiv	r2, r8, r3
 80a7118:	fb03 8312 	mls	r3, r3, r2, r8
 80a711c:	4a15      	ldr	r2, [pc, #84]	; (80a7174 <__strftime+0x4b0>)
 80a711e:	e78a      	b.n	80a7036 <__strftime+0x372>
 80a7120:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80a7124:	f000 fe40 	bl	80a7da8 <abs>
 80a7128:	2364      	movs	r3, #100	; 0x64
 80a712a:	fb90 f2f3 	sdiv	r2, r0, r3
 80a712e:	f1b8 0f00 	cmp.w	r8, #0
 80a7132:	fb02 0313 	mls	r3, r2, r3, r0
 80a7136:	da06      	bge.n	80a7146 <__strftime+0x482>
 80a7138:	6971      	ldr	r1, [r6, #20]
 80a713a:	4a13      	ldr	r2, [pc, #76]	; (80a7188 <__strftime+0x4c4>)
 80a713c:	4291      	cmp	r1, r2
 80a713e:	bfb8      	it	lt
 80a7140:	f04f 0801 	movlt.w	r8, #1
 80a7144:	e7df      	b.n	80a7106 <__strftime+0x442>
 80a7146:	d0de      	beq.n	80a7106 <__strftime+0x442>
 80a7148:	6971      	ldr	r1, [r6, #20]
 80a714a:	4a04      	ldr	r2, [pc, #16]	; (80a715c <__strftime+0x498>)
 80a714c:	4291      	cmp	r1, r2
 80a714e:	bfb8      	it	lt
 80a7150:	f04f 38ff 	movlt.w	r8, #4294967295
 80a7154:	e7d7      	b.n	80a7106 <__strftime+0x442>
 80a7156:	bf00      	nop
 80a7158:	080a8bac 	.word	0x080a8bac
 80a715c:	fffff894 	.word	0xfffff894
 80a7160:	080a898c 	.word	0x080a898c
 80a7164:	080a8a37 	.word	0x080a8a37
 80a7168:	080a8a2f 	.word	0x080a8a2f
 80a716c:	080a8a28 	.word	0x080a8a28
 80a7170:	080a8a39 	.word	0x080a8a39
 80a7174:	080a8a49 	.word	0x080a8a49
 80a7178:	080a8a3b 	.word	0x080a8a3b
 80a717c:	080a8a3f 	.word	0x080a8a3f
 80a7180:	080a8a4e 	.word	0x080a8a4e
 80a7184:	080a84d9 	.word	0x080a84d9
 80a7188:	fffff895 	.word	0xfffff895
 80a718c:	4bb7      	ldr	r3, [pc, #732]	; (80a746c <__strftime+0x7a8>)
 80a718e:	6971      	ldr	r1, [r6, #20]
 80a7190:	4630      	mov	r0, r6
 80a7192:	4299      	cmp	r1, r3
 80a7194:	bfac      	ite	ge
 80a7196:	2300      	movge	r3, #0
 80a7198:	2301      	movlt	r3, #1
 80a719a:	e9cd 3105 	strd	r3, r1, [sp, #20]
 80a719e:	f7ff fd2f 	bl	80a6c00 <iso_year_adjust>
 80a71a2:	9906      	ldr	r1, [sp, #24]
 80a71a4:	4683      	mov	fp, r0
 80a71a6:	2900      	cmp	r1, #0
 80a71a8:	db2a      	blt.n	80a7200 <__strftime+0x53c>
 80a71aa:	2264      	movs	r2, #100	; 0x64
 80a71ac:	fb91 f2f2 	sdiv	r2, r1, r2
 80a71b0:	3213      	adds	r2, #19
 80a71b2:	6970      	ldr	r0, [r6, #20]
 80a71b4:	2800      	cmp	r0, #0
 80a71b6:	db2d      	blt.n	80a7214 <__strftime+0x550>
 80a71b8:	f04f 0c64 	mov.w	ip, #100	; 0x64
 80a71bc:	fb90 fefc 	sdiv	lr, r0, ip
 80a71c0:	fb0c 001e 	mls	r0, ip, lr, r0
 80a71c4:	f1bb 0f00 	cmp.w	fp, #0
 80a71c8:	da33      	bge.n	80a7232 <__strftime+0x56e>
 80a71ca:	6971      	ldr	r1, [r6, #20]
 80a71cc:	4ba8      	ldr	r3, [pc, #672]	; (80a7470 <__strftime+0x7ac>)
 80a71ce:	4299      	cmp	r1, r3
 80a71d0:	db39      	blt.n	80a7246 <__strftime+0x582>
 80a71d2:	eb0b 0300 	add.w	r3, fp, r0
 80a71d6:	1c59      	adds	r1, r3, #1
 80a71d8:	d13a      	bne.n	80a7250 <__strftime+0x58c>
 80a71da:	2363      	movs	r3, #99	; 0x63
 80a71dc:	3a01      	subs	r2, #1
 80a71de:	2064      	movs	r0, #100	; 0x64
 80a71e0:	fb00 3202 	mla	r2, r0, r2, r3
 80a71e4:	9b05      	ldr	r3, [sp, #20]
 80a71e6:	2b00      	cmp	r3, #0
 80a71e8:	d037      	beq.n	80a725a <__strftime+0x596>
 80a71ea:	232d      	movs	r3, #45	; 0x2d
 80a71ec:	f88d 3020 	strb.w	r3, [sp, #32]
 80a71f0:	f1b8 0f00 	cmp.w	r8, #0
 80a71f4:	d001      	beq.n	80a71fa <__strftime+0x536>
 80a71f6:	f108 38ff 	add.w	r8, r8, #4294967295
 80a71fa:	f10d 0321 	add.w	r3, sp, #33	; 0x21
 80a71fe:	e037      	b.n	80a7270 <__strftime+0x5ac>
 80a7200:	f201 706c 	addw	r0, r1, #1900	; 0x76c
 80a7204:	9106      	str	r1, [sp, #24]
 80a7206:	f000 fdcf 	bl	80a7da8 <abs>
 80a720a:	2264      	movs	r2, #100	; 0x64
 80a720c:	9906      	ldr	r1, [sp, #24]
 80a720e:	fb90 f2f2 	sdiv	r2, r0, r2
 80a7212:	e7ce      	b.n	80a71b2 <__strftime+0x4ee>
 80a7214:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80a7218:	e9cd 1206 	strd	r1, r2, [sp, #24]
 80a721c:	f000 fdc4 	bl	80a7da8 <abs>
 80a7220:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 80a7224:	f04f 0c64 	mov.w	ip, #100	; 0x64
 80a7228:	fb90 fefc 	sdiv	lr, r0, ip
 80a722c:	fb0e 001c 	mls	r0, lr, ip, r0
 80a7230:	e7c8      	b.n	80a71c4 <__strftime+0x500>
 80a7232:	d0ce      	beq.n	80a71d2 <__strftime+0x50e>
 80a7234:	4b8d      	ldr	r3, [pc, #564]	; (80a746c <__strftime+0x7a8>)
 80a7236:	4299      	cmp	r1, r3
 80a7238:	bfb6      	itet	lt
 80a723a:	2301      	movlt	r3, #1
 80a723c:	2300      	movge	r3, #0
 80a723e:	f04f 3bff 	movlt.w	fp, #4294967295
 80a7242:	9305      	str	r3, [sp, #20]
 80a7244:	e7c5      	b.n	80a71d2 <__strftime+0x50e>
 80a7246:	f04f 0b01 	mov.w	fp, #1
 80a724a:	f8cd b014 	str.w	fp, [sp, #20]
 80a724e:	e7c0      	b.n	80a71d2 <__strftime+0x50e>
 80a7250:	2b64      	cmp	r3, #100	; 0x64
 80a7252:	bf04      	itt	eq
 80a7254:	2300      	moveq	r3, #0
 80a7256:	3201      	addeq	r2, #1
 80a7258:	e7c1      	b.n	80a71de <__strftime+0x51a>
 80a725a:	f1b9 0f2b 	cmp.w	r9, #43	; 0x2b
 80a725e:	d106      	bne.n	80a726e <__strftime+0x5aa>
 80a7260:	f242 730f 	movw	r3, #9999	; 0x270f
 80a7264:	429a      	cmp	r2, r3
 80a7266:	d902      	bls.n	80a726e <__strftime+0x5aa>
 80a7268:	f88d 9020 	strb.w	r9, [sp, #32]
 80a726c:	e7c0      	b.n	80a71f0 <__strftime+0x52c>
 80a726e:	ab08      	add	r3, sp, #32
 80a7270:	2125      	movs	r1, #37	; 0x25
 80a7272:	7019      	strb	r1, [r3, #0]
 80a7274:	f1b9 0f00 	cmp.w	r9, #0
 80a7278:	d109      	bne.n	80a728e <__strftime+0x5ca>
 80a727a:	1c58      	adds	r0, r3, #1
 80a727c:	497d      	ldr	r1, [pc, #500]	; (80a7474 <__strftime+0x7b0>)
 80a727e:	9205      	str	r2, [sp, #20]
 80a7280:	f7ff fcb6 	bl	80a6bf0 <strcpy>
 80a7284:	9a05      	ldr	r2, [sp, #20]
 80a7286:	9200      	str	r2, [sp, #0]
 80a7288:	4643      	mov	r3, r8
 80a728a:	aa08      	add	r2, sp, #32
 80a728c:	e058      	b.n	80a7340 <__strftime+0x67c>
 80a728e:	2130      	movs	r1, #48	; 0x30
 80a7290:	1c98      	adds	r0, r3, #2
 80a7292:	7059      	strb	r1, [r3, #1]
 80a7294:	e7f2      	b.n	80a727c <__strftime+0x5b8>
 80a7296:	4978      	ldr	r1, [pc, #480]	; (80a7478 <__strftime+0x7b4>)
 80a7298:	4a78      	ldr	r2, [pc, #480]	; (80a747c <__strftime+0x7b8>)
 80a729a:	68b3      	ldr	r3, [r6, #8]
 80a729c:	286b      	cmp	r0, #107	; 0x6b
 80a729e:	bf08      	it	eq
 80a72a0:	460a      	moveq	r2, r1
 80a72a2:	e6c8      	b.n	80a7036 <__strftime+0x372>
 80a72a4:	68b3      	ldr	r3, [r6, #8]
 80a72a6:	b163      	cbz	r3, 80a72c2 <__strftime+0x5fe>
 80a72a8:	2b0c      	cmp	r3, #12
 80a72aa:	d004      	beq.n	80a72b6 <__strftime+0x5f2>
 80a72ac:	210c      	movs	r1, #12
 80a72ae:	fb93 f2f1 	sdiv	r2, r3, r1
 80a72b2:	fb01 3312 	mls	r3, r1, r2, r3
 80a72b6:	4971      	ldr	r1, [pc, #452]	; (80a747c <__strftime+0x7b8>)
 80a72b8:	4a6f      	ldr	r2, [pc, #444]	; (80a7478 <__strftime+0x7b4>)
 80a72ba:	2849      	cmp	r0, #73	; 0x49
 80a72bc:	bf08      	it	eq
 80a72be:	460a      	moveq	r2, r1
 80a72c0:	e6b9      	b.n	80a7036 <__strftime+0x372>
 80a72c2:	230c      	movs	r3, #12
 80a72c4:	e7f7      	b.n	80a72b6 <__strftime+0x5f2>
 80a72c6:	69f3      	ldr	r3, [r6, #28]
 80a72c8:	4a6d      	ldr	r2, [pc, #436]	; (80a7480 <__strftime+0x7bc>)
 80a72ca:	3301      	adds	r3, #1
 80a72cc:	e6b3      	b.n	80a7036 <__strftime+0x372>
 80a72ce:	6933      	ldr	r3, [r6, #16]
 80a72d0:	3301      	adds	r3, #1
 80a72d2:	e723      	b.n	80a711c <__strftime+0x458>
 80a72d4:	6873      	ldr	r3, [r6, #4]
 80a72d6:	e721      	b.n	80a711c <__strftime+0x458>
 80a72d8:	1e6b      	subs	r3, r5, #1
 80a72da:	42a3      	cmp	r3, r4
 80a72dc:	f67f ad24 	bls.w	80a6d28 <__strftime+0x64>
 80a72e0:	230a      	movs	r3, #10
 80a72e2:	553b      	strb	r3, [r7, r4]
 80a72e4:	3401      	adds	r4, #1
 80a72e6:	e5f1      	b.n	80a6ecc <__strftime+0x208>
 80a72e8:	68b3      	ldr	r3, [r6, #8]
 80a72ea:	2b0b      	cmp	r3, #11
 80a72ec:	bfcc      	ite	gt
 80a72ee:	22a4      	movgt	r2, #164	; 0xa4
 80a72f0:	22a0      	movle	r2, #160	; 0xa0
 80a72f2:	4b64      	ldr	r3, [pc, #400]	; (80a7484 <__strftime+0x7c0>)
 80a72f4:	4413      	add	r3, r2
 80a72f6:	f8d3 8004 	ldr.w	r8, [r3, #4]
 80a72fa:	4640      	mov	r0, r8
 80a72fc:	f000 f9e2 	bl	80a76c4 <strlen>
 80a7300:	f108 32ff 	add.w	r2, r8, #4294967295
 80a7304:	4420      	add	r0, r4
 80a7306:	f105 3cff 	add.w	ip, r5, #4294967295
 80a730a:	42a0      	cmp	r0, r4
 80a730c:	f43f adde 	beq.w	80a6ecc <__strftime+0x208>
 80a7310:	45a4      	cmp	ip, r4
 80a7312:	f67f ad09 	bls.w	80a6d28 <__strftime+0x64>
 80a7316:	f89a 1000 	ldrb.w	r1, [sl]
 80a731a:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 80a731e:	2950      	cmp	r1, #80	; 0x50
 80a7320:	d107      	bne.n	80a7332 <__strftime+0x66e>
 80a7322:	4959      	ldr	r1, [pc, #356]	; (80a7488 <__strftime+0x7c4>)
 80a7324:	5cc9      	ldrb	r1, [r1, r3]
 80a7326:	f001 0103 	and.w	r1, r1, #3
 80a732a:	2901      	cmp	r1, #1
 80a732c:	bf08      	it	eq
 80a732e:	3320      	addeq	r3, #32
 80a7330:	b2db      	uxtb	r3, r3
 80a7332:	553b      	strb	r3, [r7, r4]
 80a7334:	3401      	adds	r4, #1
 80a7336:	e7e8      	b.n	80a730a <__strftime+0x646>
 80a7338:	6873      	ldr	r3, [r6, #4]
 80a733a:	4a54      	ldr	r2, [pc, #336]	; (80a748c <__strftime+0x7c8>)
 80a733c:	9300      	str	r3, [sp, #0]
 80a733e:	68b3      	ldr	r3, [r6, #8]
 80a7340:	1b29      	subs	r1, r5, r4
 80a7342:	1938      	adds	r0, r7, r4
 80a7344:	f7fc fb34 	bl	80a39b0 <sniprintf>
 80a7348:	e679      	b.n	80a703e <__strftime+0x37a>
 80a734a:	6a33      	ldr	r3, [r6, #32]
 80a734c:	2b00      	cmp	r3, #0
 80a734e:	db7b      	blt.n	80a7448 <__strftime+0x784>
 80a7350:	f000 fb98 	bl	80a7a84 <__tz_lock>
 80a7354:	9b04      	ldr	r3, [sp, #16]
 80a7356:	b90b      	cbnz	r3, 80a735c <__strftime+0x698>
 80a7358:	f000 fba0 	bl	80a7a9c <_tzset_unlocked>
 80a735c:	f000 fd6a 	bl	80a7e34 <__gettzinfo>
 80a7360:	6a33      	ldr	r3, [r6, #32]
 80a7362:	2b00      	cmp	r3, #0
 80a7364:	bfcc      	ite	gt
 80a7366:	2350      	movgt	r3, #80	; 0x50
 80a7368:	2328      	movle	r3, #40	; 0x28
 80a736a:	58c3      	ldr	r3, [r0, r3]
 80a736c:	f1c3 0900 	rsb	r9, r3, #0
 80a7370:	f000 fb8e 	bl	80a7a90 <__tz_unlock>
 80a7374:	2301      	movs	r3, #1
 80a7376:	9304      	str	r3, [sp, #16]
 80a7378:	f8d6 c014 	ldr.w	ip, [r6, #20]
 80a737c:	eba5 0e04 	sub.w	lr, r5, r4
 80a7380:	4662      	mov	r2, ip
 80a7382:	f1bc 0145 	subs.w	r1, ip, #69	; 0x45
 80a7386:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80a738a:	9102      	str	r1, [sp, #8]
 80a738c:	f143 31ff 	adc.w	r1, r3, #4294967295
 80a7390:	9103      	str	r1, [sp, #12]
 80a7392:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a7396:	2800      	cmp	r0, #0
 80a7398:	f171 0100 	sbcs.w	r1, r1, #0
 80a739c:	eb07 0804 	add.w	r8, r7, r4
 80a73a0:	da05      	bge.n	80a73ae <__strftime+0x6ea>
 80a73a2:	f1bc 0142 	subs.w	r1, ip, #66	; 0x42
 80a73a6:	f143 33ff 	adc.w	r3, r3, #4294967295
 80a73aa:	9102      	str	r1, [sp, #8]
 80a73ac:	9303      	str	r3, [sp, #12]
 80a73ae:	9b02      	ldr	r3, [sp, #8]
 80a73b0:	f10c 32ff 	add.w	r2, ip, #4294967295
 80a73b4:	0898      	lsrs	r0, r3, #2
 80a73b6:	9b03      	ldr	r3, [sp, #12]
 80a73b8:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 80a73bc:	1099      	asrs	r1, r3, #2
 80a73be:	2364      	movs	r3, #100	; 0x64
 80a73c0:	fb92 f3f3 	sdiv	r3, r2, r3
 80a73c4:	1ac0      	subs	r0, r0, r3
 80a73c6:	eb61 71e3 	sbc.w	r1, r1, r3, asr #31
 80a73ca:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80a73ce:	f20c 122b 	addw	r2, ip, #299	; 0x12b
 80a73d2:	fb92 f3f3 	sdiv	r3, r2, r3
 80a73d6:	18c0      	adds	r0, r0, r3
 80a73d8:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
 80a73dc:	f240 136d 	movw	r3, #365	; 0x16d
 80a73e0:	f1ac 0c46 	sub.w	ip, ip, #70	; 0x46
 80a73e4:	fb03 fc0c 	mul.w	ip, r3, ip
 80a73e8:	eb10 000c 	adds.w	r0, r0, ip
 80a73ec:	eb41 71ec 	adc.w	r1, r1, ip, asr #31
 80a73f0:	f04f 0c18 	mov.w	ip, #24
 80a73f4:	69f3      	ldr	r3, [r6, #28]
 80a73f6:	18c0      	adds	r0, r0, r3
 80a73f8:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
 80a73fc:	fba0 230c 	umull	r2, r3, r0, ip
 80a7400:	fb0c 3301 	mla	r3, ip, r1, r3
 80a7404:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
 80a7408:	68b1      	ldr	r1, [r6, #8]
 80a740a:	1852      	adds	r2, r2, r1
 80a740c:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
 80a7410:	fba2 010c 	umull	r0, r1, r2, ip
 80a7414:	fb0c 1103 	mla	r1, ip, r3, r1
 80a7418:	6873      	ldr	r3, [r6, #4]
 80a741a:	18c0      	adds	r0, r0, r3
 80a741c:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
 80a7420:	fba0 230c 	umull	r2, r3, r0, ip
 80a7424:	fb0c 3301 	mla	r3, ip, r1, r3
 80a7428:	6831      	ldr	r1, [r6, #0]
 80a742a:	4640      	mov	r0, r8
 80a742c:	1852      	adds	r2, r2, r1
 80a742e:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
 80a7432:	ebb2 0209 	subs.w	r2, r2, r9
 80a7436:	eb63 73e9 	sbc.w	r3, r3, r9, asr #31
 80a743a:	e9cd 2300 	strd	r2, r3, [sp]
 80a743e:	4671      	mov	r1, lr
 80a7440:	4a13      	ldr	r2, [pc, #76]	; (80a7490 <__strftime+0x7cc>)
 80a7442:	f7fc fab5 	bl	80a39b0 <sniprintf>
 80a7446:	e5fa      	b.n	80a703e <__strftime+0x37a>
 80a7448:	f04f 0900 	mov.w	r9, #0
 80a744c:	e794      	b.n	80a7378 <__strftime+0x6b4>
 80a744e:	6833      	ldr	r3, [r6, #0]
 80a7450:	e664      	b.n	80a711c <__strftime+0x458>
 80a7452:	1e6b      	subs	r3, r5, #1
 80a7454:	42a3      	cmp	r3, r4
 80a7456:	f67f ac67 	bls.w	80a6d28 <__strftime+0x64>
 80a745a:	2309      	movs	r3, #9
 80a745c:	e741      	b.n	80a72e2 <__strftime+0x61e>
 80a745e:	6833      	ldr	r3, [r6, #0]
 80a7460:	4a0c      	ldr	r2, [pc, #48]	; (80a7494 <__strftime+0x7d0>)
 80a7462:	9301      	str	r3, [sp, #4]
 80a7464:	6873      	ldr	r3, [r6, #4]
 80a7466:	9300      	str	r3, [sp, #0]
 80a7468:	68b3      	ldr	r3, [r6, #8]
 80a746a:	e5d9      	b.n	80a7020 <__strftime+0x35c>
 80a746c:	fffff894 	.word	0xfffff894
 80a7470:	fffff895 	.word	0xfffff895
 80a7474:	080a8a56 	.word	0x080a8a56
 80a7478:	080a8a3b 	.word	0x080a8a3b
 80a747c:	080a8a49 	.word	0x080a8a49
 80a7480:	080a8a5a 	.word	0x080a8a5a
 80a7484:	080a8bac 	.word	0x080a8bac
 80a7488:	080a8ce5 	.word	0x080a8ce5
 80a748c:	080a8a69 	.word	0x080a8a69
 80a7490:	080a8a5f 	.word	0x080a8a5f
 80a7494:	080a8a64 	.word	0x080a8a64
 80a7498:	1e6b      	subs	r3, r5, #1
 80a749a:	42a3      	cmp	r3, r4
 80a749c:	f67f ac44 	bls.w	80a6d28 <__strftime+0x64>
 80a74a0:	69b3      	ldr	r3, [r6, #24]
 80a74a2:	193a      	adds	r2, r7, r4
 80a74a4:	3401      	adds	r4, #1
 80a74a6:	b913      	cbnz	r3, 80a74ae <__strftime+0x7ea>
 80a74a8:	2337      	movs	r3, #55	; 0x37
 80a74aa:	7013      	strb	r3, [r2, #0]
 80a74ac:	e50e      	b.n	80a6ecc <__strftime+0x208>
 80a74ae:	3330      	adds	r3, #48	; 0x30
 80a74b0:	e7fb      	b.n	80a74aa <__strftime+0x7e6>
 80a74b2:	69f3      	ldr	r3, [r6, #28]
 80a74b4:	69b2      	ldr	r2, [r6, #24]
 80a74b6:	3307      	adds	r3, #7
 80a74b8:	1a9b      	subs	r3, r3, r2
 80a74ba:	2207      	movs	r2, #7
 80a74bc:	fb93 f3f2 	sdiv	r3, r3, r2
 80a74c0:	e62c      	b.n	80a711c <__strftime+0x458>
 80a74c2:	4630      	mov	r0, r6
 80a74c4:	f7ff fb9c 	bl	80a6c00 <iso_year_adjust>
 80a74c8:	69b2      	ldr	r2, [r6, #24]
 80a74ca:	b132      	cbz	r2, 80a74da <__strftime+0x816>
 80a74cc:	3a01      	subs	r2, #1
 80a74ce:	2800      	cmp	r0, #0
 80a74d0:	dc27      	bgt.n	80a7522 <__strftime+0x85e>
 80a74d2:	69f3      	ldr	r3, [r6, #28]
 80a74d4:	d103      	bne.n	80a74de <__strftime+0x81a>
 80a74d6:	330a      	adds	r3, #10
 80a74d8:	e7ee      	b.n	80a74b8 <__strftime+0x7f4>
 80a74da:	2206      	movs	r2, #6
 80a74dc:	e7f7      	b.n	80a74ce <__strftime+0x80a>
 80a74de:	6970      	ldr	r0, [r6, #20]
 80a74e0:	1ad3      	subs	r3, r2, r3
 80a74e2:	2800      	cmp	r0, #0
 80a74e4:	f240 726b 	movw	r2, #1899	; 0x76b
 80a74e8:	bfa8      	it	ge
 80a74ea:	f06f 0264 	mvnge.w	r2, #100	; 0x64
 80a74ee:	4410      	add	r0, r2
 80a74f0:	0782      	lsls	r2, r0, #30
 80a74f2:	d105      	bne.n	80a7500 <__strftime+0x83c>
 80a74f4:	2264      	movs	r2, #100	; 0x64
 80a74f6:	fb90 f1f2 	sdiv	r1, r0, r2
 80a74fa:	fb02 0111 	mls	r1, r2, r1, r0
 80a74fe:	b971      	cbnz	r1, 80a751e <__strftime+0x85a>
 80a7500:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80a7504:	fb90 f2f1 	sdiv	r2, r0, r1
 80a7508:	fb01 0212 	mls	r2, r1, r2, r0
 80a750c:	fab2 f282 	clz	r2, r2
 80a7510:	0952      	lsrs	r2, r2, #5
 80a7512:	1a9a      	subs	r2, r3, r2
 80a7514:	2a05      	cmp	r2, #5
 80a7516:	bfb4      	ite	lt
 80a7518:	2335      	movlt	r3, #53	; 0x35
 80a751a:	2334      	movge	r3, #52	; 0x34
 80a751c:	e5fe      	b.n	80a711c <__strftime+0x458>
 80a751e:	2201      	movs	r2, #1
 80a7520:	e7f7      	b.n	80a7512 <__strftime+0x84e>
 80a7522:	2301      	movs	r3, #1
 80a7524:	e5fa      	b.n	80a711c <__strftime+0x458>
 80a7526:	1e6b      	subs	r3, r5, #1
 80a7528:	42a3      	cmp	r3, r4
 80a752a:	f67f abfd 	bls.w	80a6d28 <__strftime+0x64>
 80a752e:	69b3      	ldr	r3, [r6, #24]
 80a7530:	3330      	adds	r3, #48	; 0x30
 80a7532:	e6d6      	b.n	80a72e2 <__strftime+0x61e>
 80a7534:	69b3      	ldr	r3, [r6, #24]
 80a7536:	b13b      	cbz	r3, 80a7548 <__strftime+0x884>
 80a7538:	3b01      	subs	r3, #1
 80a753a:	69f2      	ldr	r2, [r6, #28]
 80a753c:	3207      	adds	r2, #7
 80a753e:	1ad2      	subs	r2, r2, r3
 80a7540:	2307      	movs	r3, #7
 80a7542:	fb92 f3f3 	sdiv	r3, r2, r3
 80a7546:	e5e9      	b.n	80a711c <__strftime+0x458>
 80a7548:	2306      	movs	r3, #6
 80a754a:	e7f6      	b.n	80a753a <__strftime+0x876>
 80a754c:	6970      	ldr	r0, [r6, #20]
 80a754e:	2800      	cmp	r0, #0
 80a7550:	db05      	blt.n	80a755e <__strftime+0x89a>
 80a7552:	2264      	movs	r2, #100	; 0x64
 80a7554:	fb90 f3f2 	sdiv	r3, r0, r2
 80a7558:	fb03 0312 	mls	r3, r3, r2, r0
 80a755c:	e5de      	b.n	80a711c <__strftime+0x458>
 80a755e:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80a7562:	f000 fc21 	bl	80a7da8 <abs>
 80a7566:	e7f4      	b.n	80a7552 <__strftime+0x88e>
 80a7568:	6973      	ldr	r3, [r6, #20]
 80a756a:	4a4d      	ldr	r2, [pc, #308]	; (80a76a0 <__strftime+0x9dc>)
 80a756c:	4293      	cmp	r3, r2
 80a756e:	da0c      	bge.n	80a758a <__strftime+0x8c6>
 80a7570:	212d      	movs	r1, #45	; 0x2d
 80a7572:	eba2 0b03 	sub.w	fp, r2, r3
 80a7576:	f88d 1020 	strb.w	r1, [sp, #32]
 80a757a:	f1b8 0f00 	cmp.w	r8, #0
 80a757e:	d001      	beq.n	80a7584 <__strftime+0x8c0>
 80a7580:	f108 38ff 	add.w	r8, r8, #4294967295
 80a7584:	f10d 0321 	add.w	r3, sp, #33	; 0x21
 80a7588:	e00c      	b.n	80a75a4 <__strftime+0x8e0>
 80a758a:	f1b9 0f2b 	cmp.w	r9, #43	; 0x2b
 80a758e:	f203 7b6c 	addw	fp, r3, #1900	; 0x76c
 80a7592:	d106      	bne.n	80a75a2 <__strftime+0x8de>
 80a7594:	f242 730f 	movw	r3, #9999	; 0x270f
 80a7598:	459b      	cmp	fp, r3
 80a759a:	d902      	bls.n	80a75a2 <__strftime+0x8de>
 80a759c:	f88d 9020 	strb.w	r9, [sp, #32]
 80a75a0:	e7eb      	b.n	80a757a <__strftime+0x8b6>
 80a75a2:	ab08      	add	r3, sp, #32
 80a75a4:	2225      	movs	r2, #37	; 0x25
 80a75a6:	701a      	strb	r2, [r3, #0]
 80a75a8:	f1b9 0f00 	cmp.w	r9, #0
 80a75ac:	d106      	bne.n	80a75bc <__strftime+0x8f8>
 80a75ae:	1c58      	adds	r0, r3, #1
 80a75b0:	493c      	ldr	r1, [pc, #240]	; (80a76a4 <__strftime+0x9e0>)
 80a75b2:	f7ff fb1d 	bl	80a6bf0 <strcpy>
 80a75b6:	f8cd b000 	str.w	fp, [sp]
 80a75ba:	e665      	b.n	80a7288 <__strftime+0x5c4>
 80a75bc:	2230      	movs	r2, #48	; 0x30
 80a75be:	1c98      	adds	r0, r3, #2
 80a75c0:	705a      	strb	r2, [r3, #1]
 80a75c2:	e7f5      	b.n	80a75b0 <__strftime+0x8ec>
 80a75c4:	6a33      	ldr	r3, [r6, #32]
 80a75c6:	2b00      	cmp	r3, #0
 80a75c8:	f6ff ac80 	blt.w	80a6ecc <__strftime+0x208>
 80a75cc:	f000 fa5a 	bl	80a7a84 <__tz_lock>
 80a75d0:	9b04      	ldr	r3, [sp, #16]
 80a75d2:	b90b      	cbnz	r3, 80a75d8 <__strftime+0x914>
 80a75d4:	f000 fa62 	bl	80a7a9c <_tzset_unlocked>
 80a75d8:	f000 fc2c 	bl	80a7e34 <__gettzinfo>
 80a75dc:	6a33      	ldr	r3, [r6, #32]
 80a75de:	eb07 0904 	add.w	r9, r7, r4
 80a75e2:	2b00      	cmp	r3, #0
 80a75e4:	bfcc      	ite	gt
 80a75e6:	2350      	movgt	r3, #80	; 0x50
 80a75e8:	2328      	movle	r3, #40	; 0x28
 80a75ea:	58c3      	ldr	r3, [r0, r3]
 80a75ec:	eba5 0b04 	sub.w	fp, r5, r4
 80a75f0:	f1c3 0800 	rsb	r8, r3, #0
 80a75f4:	f000 fa4c 	bl	80a7a90 <__tz_unlock>
 80a75f8:	233c      	movs	r3, #60	; 0x3c
 80a75fa:	fb98 f0f3 	sdiv	r0, r8, r3
 80a75fe:	f000 fccd 	bl	80a7f9c <labs>
 80a7602:	233c      	movs	r3, #60	; 0x3c
 80a7604:	fb90 f2f3 	sdiv	r2, r0, r3
 80a7608:	fb02 0013 	mls	r0, r2, r3, r0
 80a760c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80a7610:	9000      	str	r0, [sp, #0]
 80a7612:	fb98 f3f3 	sdiv	r3, r8, r3
 80a7616:	4659      	mov	r1, fp
 80a7618:	4648      	mov	r0, r9
 80a761a:	4a23      	ldr	r2, [pc, #140]	; (80a76a8 <__strftime+0x9e4>)
 80a761c:	f7fc f9c8 	bl	80a39b0 <sniprintf>
 80a7620:	2800      	cmp	r0, #0
 80a7622:	f6ff ab81 	blt.w	80a6d28 <__strftime+0x64>
 80a7626:	4404      	add	r4, r0
 80a7628:	42a5      	cmp	r5, r4
 80a762a:	f67f ab7d 	bls.w	80a6d28 <__strftime+0x64>
 80a762e:	2301      	movs	r3, #1
 80a7630:	9304      	str	r3, [sp, #16]
 80a7632:	e44b      	b.n	80a6ecc <__strftime+0x208>
 80a7634:	6a33      	ldr	r3, [r6, #32]
 80a7636:	2b00      	cmp	r3, #0
 80a7638:	f6ff ac48 	blt.w	80a6ecc <__strftime+0x208>
 80a763c:	f000 fa22 	bl	80a7a84 <__tz_lock>
 80a7640:	9b04      	ldr	r3, [sp, #16]
 80a7642:	b90b      	cbnz	r3, 80a7648 <__strftime+0x984>
 80a7644:	f000 fa2a 	bl	80a7a9c <_tzset_unlocked>
 80a7648:	6a33      	ldr	r3, [r6, #32]
 80a764a:	4a18      	ldr	r2, [pc, #96]	; (80a76ac <__strftime+0x9e8>)
 80a764c:	2b00      	cmp	r3, #0
 80a764e:	bfd4      	ite	le
 80a7650:	2300      	movle	r3, #0
 80a7652:	2301      	movgt	r3, #1
 80a7654:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
 80a7658:	4640      	mov	r0, r8
 80a765a:	f000 f833 	bl	80a76c4 <strlen>
 80a765e:	f108 38ff 	add.w	r8, r8, #4294967295
 80a7662:	4420      	add	r0, r4
 80a7664:	1e6b      	subs	r3, r5, #1
 80a7666:	42a0      	cmp	r0, r4
 80a7668:	d102      	bne.n	80a7670 <__strftime+0x9ac>
 80a766a:	f000 fa11 	bl	80a7a90 <__tz_unlock>
 80a766e:	e7de      	b.n	80a762e <__strftime+0x96a>
 80a7670:	42a3      	cmp	r3, r4
 80a7672:	d904      	bls.n	80a767e <__strftime+0x9ba>
 80a7674:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 80a7678:	553a      	strb	r2, [r7, r4]
 80a767a:	3401      	adds	r4, #1
 80a767c:	e7f3      	b.n	80a7666 <__strftime+0x9a2>
 80a767e:	f000 fa07 	bl	80a7a90 <__tz_unlock>
 80a7682:	f7ff bb51 	b.w	80a6d28 <__strftime+0x64>
 80a7686:	1e6b      	subs	r3, r5, #1
 80a7688:	42a3      	cmp	r3, r4
 80a768a:	f67f ab4d 	bls.w	80a6d28 <__strftime+0x64>
 80a768e:	2325      	movs	r3, #37	; 0x25
 80a7690:	e627      	b.n	80a72e2 <__strftime+0x61e>
 80a7692:	b10d      	cbz	r5, 80a7698 <__strftime+0x9d4>
 80a7694:	2300      	movs	r3, #0
 80a7696:	553b      	strb	r3, [r7, r4]
 80a7698:	4620      	mov	r0, r4
 80a769a:	b011      	add	sp, #68	; 0x44
 80a769c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a76a0:	fffff894 	.word	0xfffff894
 80a76a4:	080a8a56 	.word	0x080a8a56
 80a76a8:	080a8a73 	.word	0x080a8a73
 80a76ac:	20000070 	.word	0x20000070

080a76b0 <strftime>:
 80a76b0:	b513      	push	{r0, r1, r4, lr}
 80a76b2:	4c03      	ldr	r4, [pc, #12]	; (80a76c0 <strftime+0x10>)
 80a76b4:	9400      	str	r4, [sp, #0]
 80a76b6:	f7ff fb05 	bl	80a6cc4 <__strftime>
 80a76ba:	b002      	add	sp, #8
 80a76bc:	bd10      	pop	{r4, pc}
 80a76be:	bf00      	nop
 80a76c0:	200000d0 	.word	0x200000d0

080a76c4 <strlen>:
 80a76c4:	4603      	mov	r3, r0
 80a76c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a76ca:	2a00      	cmp	r2, #0
 80a76cc:	d1fb      	bne.n	80a76c6 <strlen+0x2>
 80a76ce:	1a18      	subs	r0, r3, r0
 80a76d0:	3801      	subs	r0, #1
 80a76d2:	4770      	bx	lr

080a76d4 <strncmp>:
 80a76d4:	b510      	push	{r4, lr}
 80a76d6:	b16a      	cbz	r2, 80a76f4 <strncmp+0x20>
 80a76d8:	3901      	subs	r1, #1
 80a76da:	1884      	adds	r4, r0, r2
 80a76dc:	f810 3b01 	ldrb.w	r3, [r0], #1
 80a76e0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80a76e4:	4293      	cmp	r3, r2
 80a76e6:	d103      	bne.n	80a76f0 <strncmp+0x1c>
 80a76e8:	42a0      	cmp	r0, r4
 80a76ea:	d001      	beq.n	80a76f0 <strncmp+0x1c>
 80a76ec:	2b00      	cmp	r3, #0
 80a76ee:	d1f5      	bne.n	80a76dc <strncmp+0x8>
 80a76f0:	1a98      	subs	r0, r3, r2
 80a76f2:	bd10      	pop	{r4, pc}
 80a76f4:	4610      	mov	r0, r2
 80a76f6:	e7fc      	b.n	80a76f2 <strncmp+0x1e>

080a76f8 <strncpy>:
 80a76f8:	4603      	mov	r3, r0
 80a76fa:	b510      	push	{r4, lr}
 80a76fc:	3901      	subs	r1, #1
 80a76fe:	b132      	cbz	r2, 80a770e <strncpy+0x16>
 80a7700:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80a7704:	3a01      	subs	r2, #1
 80a7706:	f803 4b01 	strb.w	r4, [r3], #1
 80a770a:	2c00      	cmp	r4, #0
 80a770c:	d1f7      	bne.n	80a76fe <strncpy+0x6>
 80a770e:	2100      	movs	r1, #0
 80a7710:	441a      	add	r2, r3
 80a7712:	4293      	cmp	r3, r2
 80a7714:	d100      	bne.n	80a7718 <strncpy+0x20>
 80a7716:	bd10      	pop	{r4, pc}
 80a7718:	f803 1b01 	strb.w	r1, [r3], #1
 80a771c:	e7f9      	b.n	80a7712 <strncpy+0x1a>
	...

080a7720 <_strtol_l.isra.0>:
 80a7720:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a7724:	468c      	mov	ip, r1
 80a7726:	4686      	mov	lr, r0
 80a7728:	4e39      	ldr	r6, [pc, #228]	; (80a7810 <_strtol_l.isra.0+0xf0>)
 80a772a:	4660      	mov	r0, ip
 80a772c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80a7730:	5da5      	ldrb	r5, [r4, r6]
 80a7732:	f015 0508 	ands.w	r5, r5, #8
 80a7736:	d1f8      	bne.n	80a772a <_strtol_l.isra.0+0xa>
 80a7738:	2c2d      	cmp	r4, #45	; 0x2d
 80a773a:	d133      	bne.n	80a77a4 <_strtol_l.isra.0+0x84>
 80a773c:	f04f 0801 	mov.w	r8, #1
 80a7740:	f89c 4000 	ldrb.w	r4, [ip]
 80a7744:	f100 0c02 	add.w	ip, r0, #2
 80a7748:	2b00      	cmp	r3, #0
 80a774a:	d05c      	beq.n	80a7806 <_strtol_l.isra.0+0xe6>
 80a774c:	2b10      	cmp	r3, #16
 80a774e:	d10c      	bne.n	80a776a <_strtol_l.isra.0+0x4a>
 80a7750:	2c30      	cmp	r4, #48	; 0x30
 80a7752:	d10a      	bne.n	80a776a <_strtol_l.isra.0+0x4a>
 80a7754:	f89c 0000 	ldrb.w	r0, [ip]
 80a7758:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80a775c:	2858      	cmp	r0, #88	; 0x58
 80a775e:	d14d      	bne.n	80a77fc <_strtol_l.isra.0+0xdc>
 80a7760:	2310      	movs	r3, #16
 80a7762:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80a7766:	f10c 0c02 	add.w	ip, ip, #2
 80a776a:	2600      	movs	r6, #0
 80a776c:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 80a7770:	3f01      	subs	r7, #1
 80a7772:	fbb7 f9f3 	udiv	r9, r7, r3
 80a7776:	4630      	mov	r0, r6
 80a7778:	fb03 7a19 	mls	sl, r3, r9, r7
 80a777c:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
 80a7780:	2d09      	cmp	r5, #9
 80a7782:	d818      	bhi.n	80a77b6 <_strtol_l.isra.0+0x96>
 80a7784:	462c      	mov	r4, r5
 80a7786:	42a3      	cmp	r3, r4
 80a7788:	dd24      	ble.n	80a77d4 <_strtol_l.isra.0+0xb4>
 80a778a:	1c75      	adds	r5, r6, #1
 80a778c:	d007      	beq.n	80a779e <_strtol_l.isra.0+0x7e>
 80a778e:	4581      	cmp	r9, r0
 80a7790:	d31d      	bcc.n	80a77ce <_strtol_l.isra.0+0xae>
 80a7792:	d101      	bne.n	80a7798 <_strtol_l.isra.0+0x78>
 80a7794:	45a2      	cmp	sl, r4
 80a7796:	db1a      	blt.n	80a77ce <_strtol_l.isra.0+0xae>
 80a7798:	2601      	movs	r6, #1
 80a779a:	fb00 4003 	mla	r0, r0, r3, r4
 80a779e:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80a77a2:	e7eb      	b.n	80a777c <_strtol_l.isra.0+0x5c>
 80a77a4:	2c2b      	cmp	r4, #43	; 0x2b
 80a77a6:	bf08      	it	eq
 80a77a8:	f89c 4000 	ldrbeq.w	r4, [ip]
 80a77ac:	46a8      	mov	r8, r5
 80a77ae:	bf08      	it	eq
 80a77b0:	f100 0c02 	addeq.w	ip, r0, #2
 80a77b4:	e7c8      	b.n	80a7748 <_strtol_l.isra.0+0x28>
 80a77b6:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
 80a77ba:	2d19      	cmp	r5, #25
 80a77bc:	d801      	bhi.n	80a77c2 <_strtol_l.isra.0+0xa2>
 80a77be:	3c37      	subs	r4, #55	; 0x37
 80a77c0:	e7e1      	b.n	80a7786 <_strtol_l.isra.0+0x66>
 80a77c2:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
 80a77c6:	2d19      	cmp	r5, #25
 80a77c8:	d804      	bhi.n	80a77d4 <_strtol_l.isra.0+0xb4>
 80a77ca:	3c57      	subs	r4, #87	; 0x57
 80a77cc:	e7db      	b.n	80a7786 <_strtol_l.isra.0+0x66>
 80a77ce:	f04f 36ff 	mov.w	r6, #4294967295
 80a77d2:	e7e4      	b.n	80a779e <_strtol_l.isra.0+0x7e>
 80a77d4:	1c73      	adds	r3, r6, #1
 80a77d6:	d106      	bne.n	80a77e6 <_strtol_l.isra.0+0xc6>
 80a77d8:	2322      	movs	r3, #34	; 0x22
 80a77da:	4638      	mov	r0, r7
 80a77dc:	f8ce 3000 	str.w	r3, [lr]
 80a77e0:	b942      	cbnz	r2, 80a77f4 <_strtol_l.isra.0+0xd4>
 80a77e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a77e6:	f1b8 0f00 	cmp.w	r8, #0
 80a77ea:	d000      	beq.n	80a77ee <_strtol_l.isra.0+0xce>
 80a77ec:	4240      	negs	r0, r0
 80a77ee:	2a00      	cmp	r2, #0
 80a77f0:	d0f7      	beq.n	80a77e2 <_strtol_l.isra.0+0xc2>
 80a77f2:	b10e      	cbz	r6, 80a77f8 <_strtol_l.isra.0+0xd8>
 80a77f4:	f10c 31ff 	add.w	r1, ip, #4294967295
 80a77f8:	6011      	str	r1, [r2, #0]
 80a77fa:	e7f2      	b.n	80a77e2 <_strtol_l.isra.0+0xc2>
 80a77fc:	2430      	movs	r4, #48	; 0x30
 80a77fe:	2b00      	cmp	r3, #0
 80a7800:	d1b3      	bne.n	80a776a <_strtol_l.isra.0+0x4a>
 80a7802:	2308      	movs	r3, #8
 80a7804:	e7b1      	b.n	80a776a <_strtol_l.isra.0+0x4a>
 80a7806:	2c30      	cmp	r4, #48	; 0x30
 80a7808:	d0a4      	beq.n	80a7754 <_strtol_l.isra.0+0x34>
 80a780a:	230a      	movs	r3, #10
 80a780c:	e7ad      	b.n	80a776a <_strtol_l.isra.0+0x4a>
 80a780e:	bf00      	nop
 80a7810:	080a8ce5 	.word	0x080a8ce5

080a7814 <strtol>:
 80a7814:	4613      	mov	r3, r2
 80a7816:	460a      	mov	r2, r1
 80a7818:	4601      	mov	r1, r0
 80a781a:	4802      	ldr	r0, [pc, #8]	; (80a7824 <strtol+0x10>)
 80a781c:	6800      	ldr	r0, [r0, #0]
 80a781e:	f7ff bf7f 	b.w	80a7720 <_strtol_l.isra.0>
 80a7822:	bf00      	nop
 80a7824:	2000000c 	.word	0x2000000c

080a7828 <_strtoul_l.isra.0>:
 80a7828:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a782c:	468c      	mov	ip, r1
 80a782e:	4686      	mov	lr, r0
 80a7830:	4e3a      	ldr	r6, [pc, #232]	; (80a791c <_strtoul_l.isra.0+0xf4>)
 80a7832:	4660      	mov	r0, ip
 80a7834:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80a7838:	5da5      	ldrb	r5, [r4, r6]
 80a783a:	f015 0508 	ands.w	r5, r5, #8
 80a783e:	d1f8      	bne.n	80a7832 <_strtoul_l.isra.0+0xa>
 80a7840:	2c2d      	cmp	r4, #45	; 0x2d
 80a7842:	d134      	bne.n	80a78ae <_strtoul_l.isra.0+0x86>
 80a7844:	f04f 0801 	mov.w	r8, #1
 80a7848:	f89c 4000 	ldrb.w	r4, [ip]
 80a784c:	f100 0c02 	add.w	ip, r0, #2
 80a7850:	2b00      	cmp	r3, #0
 80a7852:	d05e      	beq.n	80a7912 <_strtoul_l.isra.0+0xea>
 80a7854:	2b10      	cmp	r3, #16
 80a7856:	d10c      	bne.n	80a7872 <_strtoul_l.isra.0+0x4a>
 80a7858:	2c30      	cmp	r4, #48	; 0x30
 80a785a:	d10a      	bne.n	80a7872 <_strtoul_l.isra.0+0x4a>
 80a785c:	f89c 0000 	ldrb.w	r0, [ip]
 80a7860:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80a7864:	2858      	cmp	r0, #88	; 0x58
 80a7866:	d14f      	bne.n	80a7908 <_strtoul_l.isra.0+0xe0>
 80a7868:	2310      	movs	r3, #16
 80a786a:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80a786e:	f10c 0c02 	add.w	ip, ip, #2
 80a7872:	f04f 37ff 	mov.w	r7, #4294967295
 80a7876:	fbb7 f7f3 	udiv	r7, r7, r3
 80a787a:	2500      	movs	r5, #0
 80a787c:	fb03 f907 	mul.w	r9, r3, r7
 80a7880:	4628      	mov	r0, r5
 80a7882:	ea6f 0909 	mvn.w	r9, r9
 80a7886:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 80a788a:	2e09      	cmp	r6, #9
 80a788c:	d818      	bhi.n	80a78c0 <_strtoul_l.isra.0+0x98>
 80a788e:	4634      	mov	r4, r6
 80a7890:	42a3      	cmp	r3, r4
 80a7892:	dd24      	ble.n	80a78de <_strtoul_l.isra.0+0xb6>
 80a7894:	2d00      	cmp	r5, #0
 80a7896:	db1f      	blt.n	80a78d8 <_strtoul_l.isra.0+0xb0>
 80a7898:	4287      	cmp	r7, r0
 80a789a:	d31d      	bcc.n	80a78d8 <_strtoul_l.isra.0+0xb0>
 80a789c:	d101      	bne.n	80a78a2 <_strtoul_l.isra.0+0x7a>
 80a789e:	45a1      	cmp	r9, r4
 80a78a0:	db1a      	blt.n	80a78d8 <_strtoul_l.isra.0+0xb0>
 80a78a2:	2501      	movs	r5, #1
 80a78a4:	fb00 4003 	mla	r0, r0, r3, r4
 80a78a8:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80a78ac:	e7eb      	b.n	80a7886 <_strtoul_l.isra.0+0x5e>
 80a78ae:	2c2b      	cmp	r4, #43	; 0x2b
 80a78b0:	bf08      	it	eq
 80a78b2:	f89c 4000 	ldrbeq.w	r4, [ip]
 80a78b6:	46a8      	mov	r8, r5
 80a78b8:	bf08      	it	eq
 80a78ba:	f100 0c02 	addeq.w	ip, r0, #2
 80a78be:	e7c7      	b.n	80a7850 <_strtoul_l.isra.0+0x28>
 80a78c0:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 80a78c4:	2e19      	cmp	r6, #25
 80a78c6:	d801      	bhi.n	80a78cc <_strtoul_l.isra.0+0xa4>
 80a78c8:	3c37      	subs	r4, #55	; 0x37
 80a78ca:	e7e1      	b.n	80a7890 <_strtoul_l.isra.0+0x68>
 80a78cc:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 80a78d0:	2e19      	cmp	r6, #25
 80a78d2:	d804      	bhi.n	80a78de <_strtoul_l.isra.0+0xb6>
 80a78d4:	3c57      	subs	r4, #87	; 0x57
 80a78d6:	e7db      	b.n	80a7890 <_strtoul_l.isra.0+0x68>
 80a78d8:	f04f 35ff 	mov.w	r5, #4294967295
 80a78dc:	e7e4      	b.n	80a78a8 <_strtoul_l.isra.0+0x80>
 80a78de:	2d00      	cmp	r5, #0
 80a78e0:	da07      	bge.n	80a78f2 <_strtoul_l.isra.0+0xca>
 80a78e2:	2322      	movs	r3, #34	; 0x22
 80a78e4:	f04f 30ff 	mov.w	r0, #4294967295
 80a78e8:	f8ce 3000 	str.w	r3, [lr]
 80a78ec:	b942      	cbnz	r2, 80a7900 <_strtoul_l.isra.0+0xd8>
 80a78ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a78f2:	f1b8 0f00 	cmp.w	r8, #0
 80a78f6:	d000      	beq.n	80a78fa <_strtoul_l.isra.0+0xd2>
 80a78f8:	4240      	negs	r0, r0
 80a78fa:	2a00      	cmp	r2, #0
 80a78fc:	d0f7      	beq.n	80a78ee <_strtoul_l.isra.0+0xc6>
 80a78fe:	b10d      	cbz	r5, 80a7904 <_strtoul_l.isra.0+0xdc>
 80a7900:	f10c 31ff 	add.w	r1, ip, #4294967295
 80a7904:	6011      	str	r1, [r2, #0]
 80a7906:	e7f2      	b.n	80a78ee <_strtoul_l.isra.0+0xc6>
 80a7908:	2430      	movs	r4, #48	; 0x30
 80a790a:	2b00      	cmp	r3, #0
 80a790c:	d1b1      	bne.n	80a7872 <_strtoul_l.isra.0+0x4a>
 80a790e:	2308      	movs	r3, #8
 80a7910:	e7af      	b.n	80a7872 <_strtoul_l.isra.0+0x4a>
 80a7912:	2c30      	cmp	r4, #48	; 0x30
 80a7914:	d0a2      	beq.n	80a785c <_strtoul_l.isra.0+0x34>
 80a7916:	230a      	movs	r3, #10
 80a7918:	e7ab      	b.n	80a7872 <_strtoul_l.isra.0+0x4a>
 80a791a:	bf00      	nop
 80a791c:	080a8ce5 	.word	0x080a8ce5

080a7920 <strtoul>:
 80a7920:	4613      	mov	r3, r2
 80a7922:	460a      	mov	r2, r1
 80a7924:	4601      	mov	r1, r0
 80a7926:	4802      	ldr	r0, [pc, #8]	; (80a7930 <strtoul+0x10>)
 80a7928:	6800      	ldr	r0, [r0, #0]
 80a792a:	f7ff bf7d 	b.w	80a7828 <_strtoul_l.isra.0>
 80a792e:	bf00      	nop
 80a7930:	2000000c 	.word	0x2000000c

080a7934 <__tzcalc_limits>:
 80a7934:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a7938:	4680      	mov	r8, r0
 80a793a:	f000 fa7b 	bl	80a7e34 <__gettzinfo>
 80a793e:	f240 73b1 	movw	r3, #1969	; 0x7b1
 80a7942:	4598      	cmp	r8, r3
 80a7944:	f340 8097 	ble.w	80a7a76 <__tzcalc_limits+0x142>
 80a7948:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 80a794c:	f240 126d 	movw	r2, #365	; 0x16d
 80a7950:	4443      	add	r3, r8
 80a7952:	109b      	asrs	r3, r3, #2
 80a7954:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
 80a7958:	fb02 3505 	mla	r5, r2, r5, r3
 80a795c:	f06f 0263 	mvn.w	r2, #99	; 0x63
 80a7960:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
 80a7964:	fb93 f3f2 	sdiv	r3, r3, r2
 80a7968:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 80a796c:	441d      	add	r5, r3
 80a796e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80a7972:	4442      	add	r2, r8
 80a7974:	fbb2 f2f3 	udiv	r2, r2, r3
 80a7978:	fb98 f7f3 	sdiv	r7, r8, r3
 80a797c:	4415      	add	r5, r2
 80a797e:	2264      	movs	r2, #100	; 0x64
 80a7980:	fb03 8717 	mls	r7, r3, r7, r8
 80a7984:	fb98 f6f2 	sdiv	r6, r8, r2
 80a7988:	fab7 fc87 	clz	ip, r7
 80a798c:	4604      	mov	r4, r0
 80a798e:	f04f 0e07 	mov.w	lr, #7
 80a7992:	fb02 8616 	mls	r6, r2, r6, r8
 80a7996:	f008 0303 	and.w	r3, r8, #3
 80a799a:	f8c0 8004 	str.w	r8, [r0, #4]
 80a799e:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80a79a2:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 80a79a6:	9300      	str	r3, [sp, #0]
 80a79a8:	7a22      	ldrb	r2, [r4, #8]
 80a79aa:	6963      	ldr	r3, [r4, #20]
 80a79ac:	2a4a      	cmp	r2, #74	; 0x4a
 80a79ae:	d128      	bne.n	80a7a02 <__tzcalc_limits+0xce>
 80a79b0:	9900      	ldr	r1, [sp, #0]
 80a79b2:	18ea      	adds	r2, r5, r3
 80a79b4:	b901      	cbnz	r1, 80a79b8 <__tzcalc_limits+0x84>
 80a79b6:	b906      	cbnz	r6, 80a79ba <__tzcalc_limits+0x86>
 80a79b8:	bb0f      	cbnz	r7, 80a79fe <__tzcalc_limits+0xca>
 80a79ba:	2b3b      	cmp	r3, #59	; 0x3b
 80a79bc:	bfd4      	ite	le
 80a79be:	2300      	movle	r3, #0
 80a79c0:	2301      	movgt	r3, #1
 80a79c2:	4413      	add	r3, r2
 80a79c4:	1e5a      	subs	r2, r3, #1
 80a79c6:	69a3      	ldr	r3, [r4, #24]
 80a79c8:	492c      	ldr	r1, [pc, #176]	; (80a7a7c <__tzcalc_limits+0x148>)
 80a79ca:	3428      	adds	r4, #40	; 0x28
 80a79cc:	fb01 3202 	mla	r2, r1, r2, r3
 80a79d0:	6823      	ldr	r3, [r4, #0]
 80a79d2:	4413      	add	r3, r2
 80a79d4:	461a      	mov	r2, r3
 80a79d6:	17db      	asrs	r3, r3, #31
 80a79d8:	e944 2302 	strd	r2, r3, [r4, #-8]
 80a79dc:	45a3      	cmp	fp, r4
 80a79de:	d1e3      	bne.n	80a79a8 <__tzcalc_limits+0x74>
 80a79e0:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
 80a79e4:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
 80a79e8:	4294      	cmp	r4, r2
 80a79ea:	eb75 0303 	sbcs.w	r3, r5, r3
 80a79ee:	bfb4      	ite	lt
 80a79f0:	2301      	movlt	r3, #1
 80a79f2:	2300      	movge	r3, #0
 80a79f4:	6003      	str	r3, [r0, #0]
 80a79f6:	2001      	movs	r0, #1
 80a79f8:	b003      	add	sp, #12
 80a79fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a79fe:	2300      	movs	r3, #0
 80a7a00:	e7df      	b.n	80a79c2 <__tzcalc_limits+0x8e>
 80a7a02:	2a44      	cmp	r2, #68	; 0x44
 80a7a04:	d101      	bne.n	80a7a0a <__tzcalc_limits+0xd6>
 80a7a06:	18ea      	adds	r2, r5, r3
 80a7a08:	e7dd      	b.n	80a79c6 <__tzcalc_limits+0x92>
 80a7a0a:	9a00      	ldr	r2, [sp, #0]
 80a7a0c:	bb6a      	cbnz	r2, 80a7a6a <__tzcalc_limits+0x136>
 80a7a0e:	2e00      	cmp	r6, #0
 80a7a10:	bf0c      	ite	eq
 80a7a12:	46e0      	moveq	r8, ip
 80a7a14:	f04f 0801 	movne.w	r8, #1
 80a7a18:	f04f 0a30 	mov.w	sl, #48	; 0x30
 80a7a1c:	68e2      	ldr	r2, [r4, #12]
 80a7a1e:	f04f 0900 	mov.w	r9, #0
 80a7a22:	9201      	str	r2, [sp, #4]
 80a7a24:	462a      	mov	r2, r5
 80a7a26:	4916      	ldr	r1, [pc, #88]	; (80a7a80 <__tzcalc_limits+0x14c>)
 80a7a28:	fb0a 1808 	mla	r8, sl, r8, r1
 80a7a2c:	f1a8 0804 	sub.w	r8, r8, #4
 80a7a30:	9901      	ldr	r1, [sp, #4]
 80a7a32:	f109 0901 	add.w	r9, r9, #1
 80a7a36:	4549      	cmp	r1, r9
 80a7a38:	f858 a029 	ldr.w	sl, [r8, r9, lsl #2]
 80a7a3c:	dc17      	bgt.n	80a7a6e <__tzcalc_limits+0x13a>
 80a7a3e:	f102 0804 	add.w	r8, r2, #4
 80a7a42:	fb98 f9fe 	sdiv	r9, r8, lr
 80a7a46:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 80a7a4a:	eba8 0909 	sub.w	r9, r8, r9
 80a7a4e:	ebb3 0909 	subs.w	r9, r3, r9
 80a7a52:	6923      	ldr	r3, [r4, #16]
 80a7a54:	bf48      	it	mi
 80a7a56:	f109 0907 	addmi.w	r9, r9, #7
 80a7a5a:	3b01      	subs	r3, #1
 80a7a5c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a7a60:	444b      	add	r3, r9
 80a7a62:	4553      	cmp	r3, sl
 80a7a64:	da05      	bge.n	80a7a72 <__tzcalc_limits+0x13e>
 80a7a66:	441a      	add	r2, r3
 80a7a68:	e7ad      	b.n	80a79c6 <__tzcalc_limits+0x92>
 80a7a6a:	46e0      	mov	r8, ip
 80a7a6c:	e7d4      	b.n	80a7a18 <__tzcalc_limits+0xe4>
 80a7a6e:	4452      	add	r2, sl
 80a7a70:	e7de      	b.n	80a7a30 <__tzcalc_limits+0xfc>
 80a7a72:	3b07      	subs	r3, #7
 80a7a74:	e7f5      	b.n	80a7a62 <__tzcalc_limits+0x12e>
 80a7a76:	2000      	movs	r0, #0
 80a7a78:	e7be      	b.n	80a79f8 <__tzcalc_limits+0xc4>
 80a7a7a:	bf00      	nop
 80a7a7c:	00015180 	.word	0x00015180
 80a7a80:	080a89c8 	.word	0x080a89c8

080a7a84 <__tz_lock>:
 80a7a84:	4801      	ldr	r0, [pc, #4]	; (80a7a8c <__tz_lock+0x8>)
 80a7a86:	f000 ba8d 	b.w	80a7fa4 <__retarget_lock_acquire>
 80a7a8a:	bf00      	nop
 80a7a8c:	20000683 	.word	0x20000683

080a7a90 <__tz_unlock>:
 80a7a90:	4801      	ldr	r0, [pc, #4]	; (80a7a98 <__tz_unlock+0x8>)
 80a7a92:	f000 ba89 	b.w	80a7fa8 <__retarget_lock_release>
 80a7a96:	bf00      	nop
 80a7a98:	20000683 	.word	0x20000683

080a7a9c <_tzset_unlocked>:
 80a7a9c:	4b01      	ldr	r3, [pc, #4]	; (80a7aa4 <_tzset_unlocked+0x8>)
 80a7a9e:	6818      	ldr	r0, [r3, #0]
 80a7aa0:	f000 b802 	b.w	80a7aa8 <_tzset_unlocked_r>
 80a7aa4:	2000000c 	.word	0x2000000c

080a7aa8 <_tzset_unlocked_r>:
 80a7aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a7aac:	b08d      	sub	sp, #52	; 0x34
 80a7aae:	4607      	mov	r7, r0
 80a7ab0:	f000 f9c0 	bl	80a7e34 <__gettzinfo>
 80a7ab4:	49b0      	ldr	r1, [pc, #704]	; (80a7d78 <_tzset_unlocked_r+0x2d0>)
 80a7ab6:	4605      	mov	r5, r0
 80a7ab8:	4638      	mov	r0, r7
 80a7aba:	f000 f9b3 	bl	80a7e24 <_getenv_r>
 80a7abe:	4eaf      	ldr	r6, [pc, #700]	; (80a7d7c <_tzset_unlocked_r+0x2d4>)
 80a7ac0:	4604      	mov	r4, r0
 80a7ac2:	b970      	cbnz	r0, 80a7ae2 <_tzset_unlocked_r+0x3a>
 80a7ac4:	4bae      	ldr	r3, [pc, #696]	; (80a7d80 <_tzset_unlocked_r+0x2d8>)
 80a7ac6:	4aaf      	ldr	r2, [pc, #700]	; (80a7d84 <_tzset_unlocked_r+0x2dc>)
 80a7ac8:	6018      	str	r0, [r3, #0]
 80a7aca:	4baf      	ldr	r3, [pc, #700]	; (80a7d88 <_tzset_unlocked_r+0x2e0>)
 80a7acc:	6018      	str	r0, [r3, #0]
 80a7ace:	4baf      	ldr	r3, [pc, #700]	; (80a7d8c <_tzset_unlocked_r+0x2e4>)
 80a7ad0:	6830      	ldr	r0, [r6, #0]
 80a7ad2:	e9c3 2200 	strd	r2, r2, [r3]
 80a7ad6:	f7fb ff3b 	bl	80a3950 <free>
 80a7ada:	6034      	str	r4, [r6, #0]
 80a7adc:	b00d      	add	sp, #52	; 0x34
 80a7ade:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a7ae2:	6831      	ldr	r1, [r6, #0]
 80a7ae4:	2900      	cmp	r1, #0
 80a7ae6:	d15f      	bne.n	80a7ba8 <_tzset_unlocked_r+0x100>
 80a7ae8:	6830      	ldr	r0, [r6, #0]
 80a7aea:	f7fb ff31 	bl	80a3950 <free>
 80a7aee:	4620      	mov	r0, r4
 80a7af0:	f7ff fde8 	bl	80a76c4 <strlen>
 80a7af4:	1c41      	adds	r1, r0, #1
 80a7af6:	4638      	mov	r0, r7
 80a7af8:	f7fb ff6a 	bl	80a39d0 <_malloc_r>
 80a7afc:	6030      	str	r0, [r6, #0]
 80a7afe:	2800      	cmp	r0, #0
 80a7b00:	d157      	bne.n	80a7bb2 <_tzset_unlocked_r+0x10a>
 80a7b02:	7823      	ldrb	r3, [r4, #0]
 80a7b04:	ae0a      	add	r6, sp, #40	; 0x28
 80a7b06:	2b3a      	cmp	r3, #58	; 0x3a
 80a7b08:	bf08      	it	eq
 80a7b0a:	3401      	addeq	r4, #1
 80a7b0c:	4633      	mov	r3, r6
 80a7b0e:	4620      	mov	r0, r4
 80a7b10:	4a9f      	ldr	r2, [pc, #636]	; (80a7d90 <_tzset_unlocked_r+0x2e8>)
 80a7b12:	49a0      	ldr	r1, [pc, #640]	; (80a7d94 <_tzset_unlocked_r+0x2ec>)
 80a7b14:	f7fb ff3c 	bl	80a3990 <siscanf>
 80a7b18:	2800      	cmp	r0, #0
 80a7b1a:	dddf      	ble.n	80a7adc <_tzset_unlocked_r+0x34>
 80a7b1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a7b1e:	18e7      	adds	r7, r4, r3
 80a7b20:	5ce3      	ldrb	r3, [r4, r3]
 80a7b22:	2b2d      	cmp	r3, #45	; 0x2d
 80a7b24:	d149      	bne.n	80a7bba <_tzset_unlocked_r+0x112>
 80a7b26:	f04f 34ff 	mov.w	r4, #4294967295
 80a7b2a:	3701      	adds	r7, #1
 80a7b2c:	f04f 0800 	mov.w	r8, #0
 80a7b30:	f10d 0a20 	add.w	sl, sp, #32
 80a7b34:	f10d 0b1e 	add.w	fp, sp, #30
 80a7b38:	4633      	mov	r3, r6
 80a7b3a:	4638      	mov	r0, r7
 80a7b3c:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 80a7b40:	4995      	ldr	r1, [pc, #596]	; (80a7d98 <_tzset_unlocked_r+0x2f0>)
 80a7b42:	9603      	str	r6, [sp, #12]
 80a7b44:	f8cd b000 	str.w	fp, [sp]
 80a7b48:	aa07      	add	r2, sp, #28
 80a7b4a:	f8ad 801e 	strh.w	r8, [sp, #30]
 80a7b4e:	f8ad 8020 	strh.w	r8, [sp, #32]
 80a7b52:	f7fb ff1d 	bl	80a3990 <siscanf>
 80a7b56:	4540      	cmp	r0, r8
 80a7b58:	ddc0      	ble.n	80a7adc <_tzset_unlocked_r+0x34>
 80a7b5a:	213c      	movs	r1, #60	; 0x3c
 80a7b5c:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80a7b60:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80a7b64:	f8df 923c 	ldr.w	r9, [pc, #572]	; 80a7da4 <_tzset_unlocked_r+0x2fc>
 80a7b68:	fb01 2203 	mla	r2, r1, r3, r2
 80a7b6c:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a7b70:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80a7b74:	fb01 2303 	mla	r3, r1, r3, r2
 80a7b78:	435c      	muls	r4, r3
 80a7b7a:	4b85      	ldr	r3, [pc, #532]	; (80a7d90 <_tzset_unlocked_r+0x2e8>)
 80a7b7c:	62ac      	str	r4, [r5, #40]	; 0x28
 80a7b7e:	4c83      	ldr	r4, [pc, #524]	; (80a7d8c <_tzset_unlocked_r+0x2e4>)
 80a7b80:	464a      	mov	r2, r9
 80a7b82:	6023      	str	r3, [r4, #0]
 80a7b84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a7b86:	4983      	ldr	r1, [pc, #524]	; (80a7d94 <_tzset_unlocked_r+0x2ec>)
 80a7b88:	441f      	add	r7, r3
 80a7b8a:	4638      	mov	r0, r7
 80a7b8c:	4633      	mov	r3, r6
 80a7b8e:	f7fb feff 	bl	80a3990 <siscanf>
 80a7b92:	4540      	cmp	r0, r8
 80a7b94:	dc17      	bgt.n	80a7bc6 <_tzset_unlocked_r+0x11e>
 80a7b96:	6823      	ldr	r3, [r4, #0]
 80a7b98:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80a7b9a:	6063      	str	r3, [r4, #4]
 80a7b9c:	4b78      	ldr	r3, [pc, #480]	; (80a7d80 <_tzset_unlocked_r+0x2d8>)
 80a7b9e:	601a      	str	r2, [r3, #0]
 80a7ba0:	4b79      	ldr	r3, [pc, #484]	; (80a7d88 <_tzset_unlocked_r+0x2e0>)
 80a7ba2:	f8c3 8000 	str.w	r8, [r3]
 80a7ba6:	e799      	b.n	80a7adc <_tzset_unlocked_r+0x34>
 80a7ba8:	f7ff f818 	bl	80a6bdc <strcmp>
 80a7bac:	2800      	cmp	r0, #0
 80a7bae:	d19b      	bne.n	80a7ae8 <_tzset_unlocked_r+0x40>
 80a7bb0:	e794      	b.n	80a7adc <_tzset_unlocked_r+0x34>
 80a7bb2:	4621      	mov	r1, r4
 80a7bb4:	f7ff f81c 	bl	80a6bf0 <strcpy>
 80a7bb8:	e7a3      	b.n	80a7b02 <_tzset_unlocked_r+0x5a>
 80a7bba:	2b2b      	cmp	r3, #43	; 0x2b
 80a7bbc:	f04f 0401 	mov.w	r4, #1
 80a7bc0:	bf08      	it	eq
 80a7bc2:	3701      	addeq	r7, #1
 80a7bc4:	e7b2      	b.n	80a7b2c <_tzset_unlocked_r+0x84>
 80a7bc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a7bc8:	f8c4 9004 	str.w	r9, [r4, #4]
 80a7bcc:	18fc      	adds	r4, r7, r3
 80a7bce:	5cfb      	ldrb	r3, [r7, r3]
 80a7bd0:	2b2d      	cmp	r3, #45	; 0x2d
 80a7bd2:	f040 808c 	bne.w	80a7cee <_tzset_unlocked_r+0x246>
 80a7bd6:	f04f 37ff 	mov.w	r7, #4294967295
 80a7bda:	3401      	adds	r4, #1
 80a7bdc:	2300      	movs	r3, #0
 80a7bde:	4620      	mov	r0, r4
 80a7be0:	f8ad 301c 	strh.w	r3, [sp, #28]
 80a7be4:	f8ad 301e 	strh.w	r3, [sp, #30]
 80a7be8:	f8ad 3020 	strh.w	r3, [sp, #32]
 80a7bec:	930a      	str	r3, [sp, #40]	; 0x28
 80a7bee:	e9cd a602 	strd	sl, r6, [sp, #8]
 80a7bf2:	4633      	mov	r3, r6
 80a7bf4:	e9cd b600 	strd	fp, r6, [sp]
 80a7bf8:	4967      	ldr	r1, [pc, #412]	; (80a7d98 <_tzset_unlocked_r+0x2f0>)
 80a7bfa:	aa07      	add	r2, sp, #28
 80a7bfc:	f7fb fec8 	bl	80a3990 <siscanf>
 80a7c00:	2800      	cmp	r0, #0
 80a7c02:	dc7a      	bgt.n	80a7cfa <_tzset_unlocked_r+0x252>
 80a7c04:	6aaf      	ldr	r7, [r5, #40]	; 0x28
 80a7c06:	f5a7 6761 	sub.w	r7, r7, #3600	; 0xe10
 80a7c0a:	652f      	str	r7, [r5, #80]	; 0x50
 80a7c0c:	f04f 0900 	mov.w	r9, #0
 80a7c10:	462f      	mov	r7, r5
 80a7c12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a7c14:	441c      	add	r4, r3
 80a7c16:	7823      	ldrb	r3, [r4, #0]
 80a7c18:	2b2c      	cmp	r3, #44	; 0x2c
 80a7c1a:	bf08      	it	eq
 80a7c1c:	3401      	addeq	r4, #1
 80a7c1e:	f894 8000 	ldrb.w	r8, [r4]
 80a7c22:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 80a7c26:	d17a      	bne.n	80a7d1e <_tzset_unlocked_r+0x276>
 80a7c28:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 80a7c2c:	e9cd 6301 	strd	r6, r3, [sp, #4]
 80a7c30:	ab09      	add	r3, sp, #36	; 0x24
 80a7c32:	9300      	str	r3, [sp, #0]
 80a7c34:	4620      	mov	r0, r4
 80a7c36:	4633      	mov	r3, r6
 80a7c38:	4958      	ldr	r1, [pc, #352]	; (80a7d9c <_tzset_unlocked_r+0x2f4>)
 80a7c3a:	9603      	str	r6, [sp, #12]
 80a7c3c:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 80a7c40:	f7fb fea6 	bl	80a3990 <siscanf>
 80a7c44:	2803      	cmp	r0, #3
 80a7c46:	f47f af49 	bne.w	80a7adc <_tzset_unlocked_r+0x34>
 80a7c4a:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 80a7c4e:	1e4b      	subs	r3, r1, #1
 80a7c50:	2b0b      	cmp	r3, #11
 80a7c52:	f63f af43 	bhi.w	80a7adc <_tzset_unlocked_r+0x34>
 80a7c56:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 80a7c5a:	1e53      	subs	r3, r2, #1
 80a7c5c:	2b04      	cmp	r3, #4
 80a7c5e:	f63f af3d 	bhi.w	80a7adc <_tzset_unlocked_r+0x34>
 80a7c62:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 80a7c66:	2b06      	cmp	r3, #6
 80a7c68:	f63f af38 	bhi.w	80a7adc <_tzset_unlocked_r+0x34>
 80a7c6c:	e9c7 1203 	strd	r1, r2, [r7, #12]
 80a7c70:	f887 8008 	strb.w	r8, [r7, #8]
 80a7c74:	617b      	str	r3, [r7, #20]
 80a7c76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a7c78:	eb04 0803 	add.w	r8, r4, r3
 80a7c7c:	2302      	movs	r3, #2
 80a7c7e:	f8ad 301c 	strh.w	r3, [sp, #28]
 80a7c82:	2300      	movs	r3, #0
 80a7c84:	f8ad 301e 	strh.w	r3, [sp, #30]
 80a7c88:	f8ad 3020 	strh.w	r3, [sp, #32]
 80a7c8c:	930a      	str	r3, [sp, #40]	; 0x28
 80a7c8e:	f898 3000 	ldrb.w	r3, [r8]
 80a7c92:	2b2f      	cmp	r3, #47	; 0x2f
 80a7c94:	d109      	bne.n	80a7caa <_tzset_unlocked_r+0x202>
 80a7c96:	4633      	mov	r3, r6
 80a7c98:	4640      	mov	r0, r8
 80a7c9a:	e9cd a602 	strd	sl, r6, [sp, #8]
 80a7c9e:	e9cd b600 	strd	fp, r6, [sp]
 80a7ca2:	493f      	ldr	r1, [pc, #252]	; (80a7da0 <_tzset_unlocked_r+0x2f8>)
 80a7ca4:	aa07      	add	r2, sp, #28
 80a7ca6:	f7fb fe73 	bl	80a3990 <siscanf>
 80a7caa:	213c      	movs	r1, #60	; 0x3c
 80a7cac:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80a7cb0:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80a7cb4:	3728      	adds	r7, #40	; 0x28
 80a7cb6:	fb01 2203 	mla	r2, r1, r3, r2
 80a7cba:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a7cbe:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80a7cc2:	fb01 2303 	mla	r3, r1, r3, r2
 80a7cc6:	f847 3c10 	str.w	r3, [r7, #-16]
 80a7cca:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80a7ccc:	4444      	add	r4, r8
 80a7cce:	f1b9 0f00 	cmp.w	r9, #0
 80a7cd2:	d021      	beq.n	80a7d18 <_tzset_unlocked_r+0x270>
 80a7cd4:	6868      	ldr	r0, [r5, #4]
 80a7cd6:	f7ff fe2d 	bl	80a7934 <__tzcalc_limits>
 80a7cda:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80a7cdc:	4b28      	ldr	r3, [pc, #160]	; (80a7d80 <_tzset_unlocked_r+0x2d8>)
 80a7cde:	601a      	str	r2, [r3, #0]
 80a7ce0:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80a7ce2:	1a9b      	subs	r3, r3, r2
 80a7ce4:	bf18      	it	ne
 80a7ce6:	2301      	movne	r3, #1
 80a7ce8:	4a27      	ldr	r2, [pc, #156]	; (80a7d88 <_tzset_unlocked_r+0x2e0>)
 80a7cea:	6013      	str	r3, [r2, #0]
 80a7cec:	e6f6      	b.n	80a7adc <_tzset_unlocked_r+0x34>
 80a7cee:	2b2b      	cmp	r3, #43	; 0x2b
 80a7cf0:	f04f 0701 	mov.w	r7, #1
 80a7cf4:	bf08      	it	eq
 80a7cf6:	3401      	addeq	r4, #1
 80a7cf8:	e770      	b.n	80a7bdc <_tzset_unlocked_r+0x134>
 80a7cfa:	213c      	movs	r1, #60	; 0x3c
 80a7cfc:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80a7d00:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80a7d04:	fb01 2203 	mla	r2, r1, r3, r2
 80a7d08:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a7d0c:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80a7d10:	fb01 2303 	mla	r3, r1, r3, r2
 80a7d14:	435f      	muls	r7, r3
 80a7d16:	e778      	b.n	80a7c0a <_tzset_unlocked_r+0x162>
 80a7d18:	f04f 0901 	mov.w	r9, #1
 80a7d1c:	e77b      	b.n	80a7c16 <_tzset_unlocked_r+0x16e>
 80a7d1e:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 80a7d22:	bf0a      	itet	eq
 80a7d24:	4643      	moveq	r3, r8
 80a7d26:	2344      	movne	r3, #68	; 0x44
 80a7d28:	3401      	addeq	r4, #1
 80a7d2a:	220a      	movs	r2, #10
 80a7d2c:	4620      	mov	r0, r4
 80a7d2e:	a90b      	add	r1, sp, #44	; 0x2c
 80a7d30:	9305      	str	r3, [sp, #20]
 80a7d32:	f7ff fdf5 	bl	80a7920 <strtoul>
 80a7d36:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 80a7d3a:	9b05      	ldr	r3, [sp, #20]
 80a7d3c:	45a0      	cmp	r8, r4
 80a7d3e:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 80a7d42:	d114      	bne.n	80a7d6e <_tzset_unlocked_r+0x2c6>
 80a7d44:	234d      	movs	r3, #77	; 0x4d
 80a7d46:	f1b9 0f00 	cmp.w	r9, #0
 80a7d4a:	d107      	bne.n	80a7d5c <_tzset_unlocked_r+0x2b4>
 80a7d4c:	2103      	movs	r1, #3
 80a7d4e:	722b      	strb	r3, [r5, #8]
 80a7d50:	2302      	movs	r3, #2
 80a7d52:	f8c5 9014 	str.w	r9, [r5, #20]
 80a7d56:	e9c5 1303 	strd	r1, r3, [r5, #12]
 80a7d5a:	e78f      	b.n	80a7c7c <_tzset_unlocked_r+0x1d4>
 80a7d5c:	220b      	movs	r2, #11
 80a7d5e:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 80a7d62:	2301      	movs	r3, #1
 80a7d64:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 80a7d68:	2300      	movs	r3, #0
 80a7d6a:	63eb      	str	r3, [r5, #60]	; 0x3c
 80a7d6c:	e786      	b.n	80a7c7c <_tzset_unlocked_r+0x1d4>
 80a7d6e:	b280      	uxth	r0, r0
 80a7d70:	723b      	strb	r3, [r7, #8]
 80a7d72:	6178      	str	r0, [r7, #20]
 80a7d74:	e782      	b.n	80a7c7c <_tzset_unlocked_r+0x1d4>
 80a7d76:	bf00      	nop
 80a7d78:	080a8ca8 	.word	0x080a8ca8
 80a7d7c:	2000066c 	.word	0x2000066c
 80a7d80:	20000674 	.word	0x20000674
 80a7d84:	080a8cab 	.word	0x080a8cab
 80a7d88:	20000670 	.word	0x20000670
 80a7d8c:	20000070 	.word	0x20000070
 80a7d90:	2000065f 	.word	0x2000065f
 80a7d94:	080a8caf 	.word	0x080a8caf
 80a7d98:	080a8cd2 	.word	0x080a8cd2
 80a7d9c:	080a8cbe 	.word	0x080a8cbe
 80a7da0:	080a8cd1 	.word	0x080a8cd1
 80a7da4:	20000654 	.word	0x20000654

080a7da8 <abs>:
 80a7da8:	2800      	cmp	r0, #0
 80a7daa:	bfb8      	it	lt
 80a7dac:	4240      	neglt	r0, r0
 80a7dae:	4770      	bx	lr

080a7db0 <_findenv_r>:
 80a7db0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a7db4:	4607      	mov	r7, r0
 80a7db6:	4689      	mov	r9, r1
 80a7db8:	4616      	mov	r6, r2
 80a7dba:	f000 f917 	bl	80a7fec <__env_lock>
 80a7dbe:	4b18      	ldr	r3, [pc, #96]	; (80a7e20 <_findenv_r+0x70>)
 80a7dc0:	681c      	ldr	r4, [r3, #0]
 80a7dc2:	469a      	mov	sl, r3
 80a7dc4:	b134      	cbz	r4, 80a7dd4 <_findenv_r+0x24>
 80a7dc6:	464b      	mov	r3, r9
 80a7dc8:	4698      	mov	r8, r3
 80a7dca:	f813 1b01 	ldrb.w	r1, [r3], #1
 80a7dce:	b139      	cbz	r1, 80a7de0 <_findenv_r+0x30>
 80a7dd0:	293d      	cmp	r1, #61	; 0x3d
 80a7dd2:	d1f9      	bne.n	80a7dc8 <_findenv_r+0x18>
 80a7dd4:	4638      	mov	r0, r7
 80a7dd6:	f000 f90f 	bl	80a7ff8 <__env_unlock>
 80a7dda:	2000      	movs	r0, #0
 80a7ddc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a7de0:	eba8 0809 	sub.w	r8, r8, r9
 80a7de4:	46a3      	mov	fp, r4
 80a7de6:	f854 0b04 	ldr.w	r0, [r4], #4
 80a7dea:	2800      	cmp	r0, #0
 80a7dec:	d0f2      	beq.n	80a7dd4 <_findenv_r+0x24>
 80a7dee:	4642      	mov	r2, r8
 80a7df0:	4649      	mov	r1, r9
 80a7df2:	f7ff fc6f 	bl	80a76d4 <strncmp>
 80a7df6:	2800      	cmp	r0, #0
 80a7df8:	d1f4      	bne.n	80a7de4 <_findenv_r+0x34>
 80a7dfa:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80a7dfe:	eb03 0508 	add.w	r5, r3, r8
 80a7e02:	f813 3008 	ldrb.w	r3, [r3, r8]
 80a7e06:	2b3d      	cmp	r3, #61	; 0x3d
 80a7e08:	d1ec      	bne.n	80a7de4 <_findenv_r+0x34>
 80a7e0a:	f8da 3000 	ldr.w	r3, [sl]
 80a7e0e:	4638      	mov	r0, r7
 80a7e10:	ebab 0303 	sub.w	r3, fp, r3
 80a7e14:	109b      	asrs	r3, r3, #2
 80a7e16:	6033      	str	r3, [r6, #0]
 80a7e18:	f000 f8ee 	bl	80a7ff8 <__env_unlock>
 80a7e1c:	1c68      	adds	r0, r5, #1
 80a7e1e:	e7dd      	b.n	80a7ddc <_findenv_r+0x2c>
 80a7e20:	2000023c 	.word	0x2000023c

080a7e24 <_getenv_r>:
 80a7e24:	b507      	push	{r0, r1, r2, lr}
 80a7e26:	aa01      	add	r2, sp, #4
 80a7e28:	f7ff ffc2 	bl	80a7db0 <_findenv_r>
 80a7e2c:	b003      	add	sp, #12
 80a7e2e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a7e34 <__gettzinfo>:
 80a7e34:	4800      	ldr	r0, [pc, #0]	; (80a7e38 <__gettzinfo+0x4>)
 80a7e36:	4770      	bx	lr
 80a7e38:	20000078 	.word	0x20000078

080a7e3c <gmtime_r>:
 80a7e3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a7e40:	e9d0 6700 	ldrd	r6, r7, [r0]
 80a7e44:	460c      	mov	r4, r1
 80a7e46:	2300      	movs	r3, #0
 80a7e48:	4630      	mov	r0, r6
 80a7e4a:	4639      	mov	r1, r7
 80a7e4c:	4a4f      	ldr	r2, [pc, #316]	; (80a7f8c <gmtime_r+0x150>)
 80a7e4e:	f000 f8d9 	bl	80a8004 <__aeabi_ldivmod>
 80a7e52:	4639      	mov	r1, r7
 80a7e54:	4605      	mov	r5, r0
 80a7e56:	2300      	movs	r3, #0
 80a7e58:	4630      	mov	r0, r6
 80a7e5a:	4a4c      	ldr	r2, [pc, #304]	; (80a7f8c <gmtime_r+0x150>)
 80a7e5c:	f000 f8d2 	bl	80a8004 <__aeabi_ldivmod>
 80a7e60:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a7e64:	2a00      	cmp	r2, #0
 80a7e66:	bfbc      	itt	lt
 80a7e68:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 80a7e6c:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 80a7e70:	fbb2 f3f1 	udiv	r3, r2, r1
 80a7e74:	fb01 2213 	mls	r2, r1, r3, r2
 80a7e78:	f04f 013c 	mov.w	r1, #60	; 0x3c
 80a7e7c:	60a3      	str	r3, [r4, #8]
 80a7e7e:	fbb2 f3f1 	udiv	r3, r2, r1
 80a7e82:	fb01 2213 	mls	r2, r1, r3, r2
 80a7e86:	6022      	str	r2, [r4, #0]
 80a7e88:	f04f 0207 	mov.w	r2, #7
 80a7e8c:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 80a7e90:	bfac      	ite	ge
 80a7e92:	f600 206c 	addwge	r0, r0, #2668	; 0xa6c
 80a7e96:	f600 206b 	addwlt	r0, r0, #2667	; 0xa6b
 80a7e9a:	6063      	str	r3, [r4, #4]
 80a7e9c:	1cc3      	adds	r3, r0, #3
 80a7e9e:	fb93 f2f2 	sdiv	r2, r3, r2
 80a7ea2:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a7ea6:	1a9b      	subs	r3, r3, r2
 80a7ea8:	bf48      	it	mi
 80a7eaa:	3307      	addmi	r3, #7
 80a7eac:	2800      	cmp	r0, #0
 80a7eae:	4938      	ldr	r1, [pc, #224]	; (80a7f90 <gmtime_r+0x154>)
 80a7eb0:	61a3      	str	r3, [r4, #24]
 80a7eb2:	bfbd      	ittte	lt
 80a7eb4:	f5a0 330e 	sublt.w	r3, r0, #145408	; 0x23800
 80a7eb8:	f5a3 732c 	sublt.w	r3, r3, #688	; 0x2b0
 80a7ebc:	fb93 f1f1 	sdivlt	r1, r3, r1
 80a7ec0:	fb90 f1f1 	sdivge	r1, r0, r1
 80a7ec4:	f648 62ac 	movw	r2, #36524	; 0x8eac
 80a7ec8:	f240 5cb4 	movw	ip, #1460	; 0x5b4
 80a7ecc:	4b31      	ldr	r3, [pc, #196]	; (80a7f94 <gmtime_r+0x158>)
 80a7ece:	f240 176d 	movw	r7, #365	; 0x16d
 80a7ed2:	fb03 0001 	mla	r0, r3, r1, r0
 80a7ed6:	fbb0 f2f2 	udiv	r2, r0, r2
 80a7eda:	fbb0 f3fc 	udiv	r3, r0, ip
 80a7ede:	4402      	add	r2, r0
 80a7ee0:	1ad2      	subs	r2, r2, r3
 80a7ee2:	4b2d      	ldr	r3, [pc, #180]	; (80a7f98 <gmtime_r+0x15c>)
 80a7ee4:	2664      	movs	r6, #100	; 0x64
 80a7ee6:	fbb0 f3f3 	udiv	r3, r0, r3
 80a7eea:	1ad3      	subs	r3, r2, r3
 80a7eec:	fbb3 f5f7 	udiv	r5, r3, r7
 80a7ef0:	fbb3 f3fc 	udiv	r3, r3, ip
 80a7ef4:	fbb5 f2f6 	udiv	r2, r5, r6
 80a7ef8:	1ad3      	subs	r3, r2, r3
 80a7efa:	4403      	add	r3, r0
 80a7efc:	2099      	movs	r0, #153	; 0x99
 80a7efe:	fb07 3315 	mls	r3, r7, r5, r3
 80a7f02:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 80a7f06:	f10c 0c02 	add.w	ip, ip, #2
 80a7f0a:	fbbc f7f0 	udiv	r7, ip, r0
 80a7f0e:	f04f 0805 	mov.w	r8, #5
 80a7f12:	4378      	muls	r0, r7
 80a7f14:	3002      	adds	r0, #2
 80a7f16:	fbb0 f0f8 	udiv	r0, r0, r8
 80a7f1a:	f103 0e01 	add.w	lr, r3, #1
 80a7f1e:	ebae 0000 	sub.w	r0, lr, r0
 80a7f22:	f240 5ef9 	movw	lr, #1529	; 0x5f9
 80a7f26:	45f4      	cmp	ip, lr
 80a7f28:	bf94      	ite	ls
 80a7f2a:	f04f 0c02 	movls.w	ip, #2
 80a7f2e:	f06f 0c09 	mvnhi.w	ip, #9
 80a7f32:	4467      	add	r7, ip
 80a7f34:	f44f 7cc8 	mov.w	ip, #400	; 0x190
 80a7f38:	fb0c 5101 	mla	r1, ip, r1, r5
 80a7f3c:	2f01      	cmp	r7, #1
 80a7f3e:	bf98      	it	ls
 80a7f40:	3101      	addls	r1, #1
 80a7f42:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 80a7f46:	d30c      	bcc.n	80a7f62 <gmtime_r+0x126>
 80a7f48:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 80a7f4c:	61e3      	str	r3, [r4, #28]
 80a7f4e:	2300      	movs	r3, #0
 80a7f50:	f2a1 716c 	subw	r1, r1, #1900	; 0x76c
 80a7f54:	60e0      	str	r0, [r4, #12]
 80a7f56:	e9c4 7104 	strd	r7, r1, [r4, #16]
 80a7f5a:	4620      	mov	r0, r4
 80a7f5c:	6223      	str	r3, [r4, #32]
 80a7f5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a7f62:	f015 0f03 	tst.w	r5, #3
 80a7f66:	d102      	bne.n	80a7f6e <gmtime_r+0x132>
 80a7f68:	fb06 5212 	mls	r2, r6, r2, r5
 80a7f6c:	b95a      	cbnz	r2, 80a7f86 <gmtime_r+0x14a>
 80a7f6e:	f44f 76c8 	mov.w	r6, #400	; 0x190
 80a7f72:	fbb5 f2f6 	udiv	r2, r5, r6
 80a7f76:	fb06 5212 	mls	r2, r6, r2, r5
 80a7f7a:	fab2 f282 	clz	r2, r2
 80a7f7e:	0952      	lsrs	r2, r2, #5
 80a7f80:	333b      	adds	r3, #59	; 0x3b
 80a7f82:	4413      	add	r3, r2
 80a7f84:	e7e2      	b.n	80a7f4c <gmtime_r+0x110>
 80a7f86:	2201      	movs	r2, #1
 80a7f88:	e7fa      	b.n	80a7f80 <gmtime_r+0x144>
 80a7f8a:	bf00      	nop
 80a7f8c:	00015180 	.word	0x00015180
 80a7f90:	00023ab1 	.word	0x00023ab1
 80a7f94:	fffdc54f 	.word	0xfffdc54f
 80a7f98:	00023ab0 	.word	0x00023ab0

080a7f9c <labs>:
 80a7f9c:	2800      	cmp	r0, #0
 80a7f9e:	bfb8      	it	lt
 80a7fa0:	4240      	neglt	r0, r0
 80a7fa2:	4770      	bx	lr

080a7fa4 <__retarget_lock_acquire>:
 80a7fa4:	4770      	bx	lr

080a7fa6 <__retarget_lock_acquire_recursive>:
 80a7fa6:	4770      	bx	lr

080a7fa8 <__retarget_lock_release>:
 80a7fa8:	4770      	bx	lr

080a7faa <__retarget_lock_release_recursive>:
 80a7faa:	4770      	bx	lr

080a7fac <__ascii_mbtowc>:
 80a7fac:	b082      	sub	sp, #8
 80a7fae:	b901      	cbnz	r1, 80a7fb2 <__ascii_mbtowc+0x6>
 80a7fb0:	a901      	add	r1, sp, #4
 80a7fb2:	b142      	cbz	r2, 80a7fc6 <__ascii_mbtowc+0x1a>
 80a7fb4:	b14b      	cbz	r3, 80a7fca <__ascii_mbtowc+0x1e>
 80a7fb6:	7813      	ldrb	r3, [r2, #0]
 80a7fb8:	600b      	str	r3, [r1, #0]
 80a7fba:	7812      	ldrb	r2, [r2, #0]
 80a7fbc:	1e10      	subs	r0, r2, #0
 80a7fbe:	bf18      	it	ne
 80a7fc0:	2001      	movne	r0, #1
 80a7fc2:	b002      	add	sp, #8
 80a7fc4:	4770      	bx	lr
 80a7fc6:	4610      	mov	r0, r2
 80a7fc8:	e7fb      	b.n	80a7fc2 <__ascii_mbtowc+0x16>
 80a7fca:	f06f 0001 	mvn.w	r0, #1
 80a7fce:	e7f8      	b.n	80a7fc2 <__ascii_mbtowc+0x16>

080a7fd0 <__ascii_wctomb>:
 80a7fd0:	4603      	mov	r3, r0
 80a7fd2:	4608      	mov	r0, r1
 80a7fd4:	b141      	cbz	r1, 80a7fe8 <__ascii_wctomb+0x18>
 80a7fd6:	2aff      	cmp	r2, #255	; 0xff
 80a7fd8:	d904      	bls.n	80a7fe4 <__ascii_wctomb+0x14>
 80a7fda:	228a      	movs	r2, #138	; 0x8a
 80a7fdc:	f04f 30ff 	mov.w	r0, #4294967295
 80a7fe0:	601a      	str	r2, [r3, #0]
 80a7fe2:	4770      	bx	lr
 80a7fe4:	2001      	movs	r0, #1
 80a7fe6:	700a      	strb	r2, [r1, #0]
 80a7fe8:	4770      	bx	lr
	...

080a7fec <__env_lock>:
 80a7fec:	4801      	ldr	r0, [pc, #4]	; (80a7ff4 <__env_lock+0x8>)
 80a7fee:	f7ff bfda 	b.w	80a7fa6 <__retarget_lock_acquire_recursive>
 80a7ff2:	bf00      	nop
 80a7ff4:	20000682 	.word	0x20000682

080a7ff8 <__env_unlock>:
 80a7ff8:	4801      	ldr	r0, [pc, #4]	; (80a8000 <__env_unlock+0x8>)
 80a7ffa:	f7ff bfd6 	b.w	80a7faa <__retarget_lock_release_recursive>
 80a7ffe:	bf00      	nop
 80a8000:	20000682 	.word	0x20000682

080a8004 <__aeabi_ldivmod>:
 80a8004:	b97b      	cbnz	r3, 80a8026 <__aeabi_ldivmod+0x22>
 80a8006:	b972      	cbnz	r2, 80a8026 <__aeabi_ldivmod+0x22>
 80a8008:	2900      	cmp	r1, #0
 80a800a:	bfbe      	ittt	lt
 80a800c:	2000      	movlt	r0, #0
 80a800e:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80a8012:	e006      	blt.n	80a8022 <__aeabi_ldivmod+0x1e>
 80a8014:	bf08      	it	eq
 80a8016:	2800      	cmpeq	r0, #0
 80a8018:	bf1c      	itt	ne
 80a801a:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80a801e:	f04f 30ff 	movne.w	r0, #4294967295
 80a8022:	f7fe bc71 	b.w	80a6908 <__aeabi_idiv0>
 80a8026:	f1ad 0c08 	sub.w	ip, sp, #8
 80a802a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80a802e:	2900      	cmp	r1, #0
 80a8030:	db09      	blt.n	80a8046 <__aeabi_ldivmod+0x42>
 80a8032:	2b00      	cmp	r3, #0
 80a8034:	db1a      	blt.n	80a806c <__aeabi_ldivmod+0x68>
 80a8036:	f7fe fb05 	bl	80a6644 <__udivmoddi4>
 80a803a:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a803e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a8042:	b004      	add	sp, #16
 80a8044:	4770      	bx	lr
 80a8046:	4240      	negs	r0, r0
 80a8048:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a804c:	2b00      	cmp	r3, #0
 80a804e:	db1b      	blt.n	80a8088 <__aeabi_ldivmod+0x84>
 80a8050:	f7fe faf8 	bl	80a6644 <__udivmoddi4>
 80a8054:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a8058:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a805c:	b004      	add	sp, #16
 80a805e:	4240      	negs	r0, r0
 80a8060:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a8064:	4252      	negs	r2, r2
 80a8066:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a806a:	4770      	bx	lr
 80a806c:	4252      	negs	r2, r2
 80a806e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a8072:	f7fe fae7 	bl	80a6644 <__udivmoddi4>
 80a8076:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a807a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a807e:	b004      	add	sp, #16
 80a8080:	4240      	negs	r0, r0
 80a8082:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a8086:	4770      	bx	lr
 80a8088:	4252      	negs	r2, r2
 80a808a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a808e:	f7fe fad9 	bl	80a6644 <__udivmoddi4>
 80a8092:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a8096:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a809a:	b004      	add	sp, #16
 80a809c:	4252      	negs	r2, r2
 80a809e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a80a2:	4770      	bx	lr

080a80a4 <dynalib_user>:
 80a80a4:	001d 080a 005d 080a 0085 080a 0089 080a     ....]...........
 80a80b4:	0000 0000 616d 4378 7275 6572 746e 0043     ....maxCurrentC.
 80a80c4:	093e 654e 2077 6573 7074 696f 746e 7320     >.New setpoint s
 80a80d4:	7465 6120 2074 2000 6d41 7370 002e 7274     et at . Amps..tr
 80a80e4:	6575 6600 6c61 6573 3300 0032 7041 7270     ue.false.32.Appr
 80a80f4:	616f 6863 7920 756f 2072 6163 6472 7420     oach your card t
 80a8104:	206f 6874 2065 6572 6461 7265 2e2e 002e     o the reader....
 80a8114:	0045 6843 7261 6567 2072 5600 6c6f 6174     E.Charger .Volta
 80a8124:	6567 203a 6400 6469 6e20 746f 7220 6365     ge: .did not rec
 80a8134:	6965 6576 6520 6f6e 6775 2068 6f76 746c     eive enough volt
 80a8144:	6761 2065 6164 6174 4300 7275 6572 746e     age data.Current
 80a8154:	203a 6400 6469 6e20 746f 7220 6365 6965     : .did not recei
 80a8164:	6576 6520 6f6e 6775 2068 7563 7272 6e65     ve enough curren
 80a8174:	2074 6164 6174 4600 6572 7571 6e65 7963     t data.Frequency
 80a8184:	203a 6400 6469 6e20 746f 7220 6365 6965     : .did not recei
 80a8194:	6576 6520 6f6e 6775 2068 7266 7165 6575     ve enough freque
 80a81a4:	636e 2079 6164 6174 5000 776f 7265 203a     ncy data.Power: 
 80a81b4:	6400 6469 6e20 746f 7220 6365 6965 6576     .did not receive
 80a81c4:	6520 6f6e 6775 2068 6f70 6577 2072 6164      enough power da
 80a81d4:	6174 4500 656e 6772 3a79 0020 6964 2064     ta.Energy: .did 
 80a81e4:	6f6e 2074 6572 6563 7669 2065 6e65 756f     not receive enou
 80a81f4:	6867 6520 656e 6772 2079 6164 6174 6c00     gh energy data.l
 80a8204:	6f6f 7270 6165 3e64 5309 7265 6169 206c     oopread>.Serial 
 80a8214:	6552 6461 4520 7272 726f 0021 4148 654e     Read Error!.HANe
 80a8224:	7376 2f65 6870 746f 6e6f 614d 4378 3000     vse/photonMaxC.0
 80a8234:	0030 4148 654e 7376 2f65 6870 746f 6e6f     0.HANevse/photon
 80a8244:	6f43 766e 7265 6574 2f64 7300 6375 6563     Converted/.succe
 80a8254:	7373 7566 206c 7473 7261 2074 656e 2077     ssful start new 
 80a8264:	6863 7261 6567 6300 6168 6772 7265 6920     charge.charger i
 80a8274:	2073 7266 6565 202c 7562 2074 6163 6472     s free, but card
 80a8284:	7720 7361 7320 6977 6570 2064 6e69 7420      was swiped in t
 80a8294:	6568 6c20 7361 2074 3032 7320 6365 6300     he last 20 sec.c
 80a82a4:	6168 6772 7265 6920 2073 636f 7563 6970     harger is occupi
 80a82b4:	6465 6220 2079 6e61 746f 6568 2072 7375     ed by another us
 80a82c4:	7265 4e00 206f 4449 7300 6375 6563 7373     er.No ID.success
 80a82d4:	7566 206c 7473 706f 6320 6168 6772 2065     ful stop charge 
 80a82e4:	6573 7373 6f69 006e 6f63 736e 6365 7475     session.consecut
 80a82f4:	7669 2065 4652 4449 7320 6977 6570 7720     ive RFID swipe w
 80a8304:	7469 6968 206e 3032 2073 666f 6e20 7765     ithin 20s of new
 80a8314:	6320 6168 6772 2065 7473 7261 0074 6f79      charge start.yo
 80a8324:	2075 7261 2065 6c61 6572 6461 2079 6863     u are already ch
 80a8334:	7261 6967 676e 6120 2074 6e61 746f 6568     arging at anothe
 80a8344:	2072 6863 7261 6567 0072 6f79 2075 7261     r charger.you ar
 80a8354:	2065 6e69 7420 6568 7520 6573 6c72 7369     e in the userlis
 80a8364:	2c74 6220 7475 6e20 746f 7620 7265 6669     t, but not verif
 80a8374:	6569 2064 7962 6120 6d64 6e69 7300 6375     ied by admin.suc
 80a8384:	6563 7373 7566 206c 4652 4449 7220 6165     cessful RFID rea
 80a8394:	2c64 6220 7475 7920 756f 6120 6572 6e20     d, but you are n
 80a83a4:	746f 6920 206e 6874 2065 7375 7265 696c     ot in the userli
 80a83b4:	7473 4500 5252 524f 203a 6e75 6e6b 776f     st.ERROR: unknow
 80a83c4:	206e 6373 6e65 7261 6f69 4d00 5451 3e54     n scenario.MQTT>
 80a83d4:	4309 6e6f 656e 7463 6e69 2067 6f74 4d20     .Connecting to M
 80a83e4:	5451 2054 7262 6b6f 7265 2e2e 002e 5645     QTT broker....EV
 80a83f4:	502d 6f68 6f74 316e 4d00 5451 3e54 4309     -Photon1.MQTT>.C
 80a8404:	6e6f 656e 7463 6465 4800 4e41 7665 6573     onnected.HANevse
 80a8414:	652f 656e 6772 4d79 7465 7265 4800 4e41     /energyMeter.HAN
 80a8424:	7665 6573 612f 6c6c 776f 7355 7265 4800     evse/allowUser.H
 80a8434:	4e41 7665 6573 722f 7365 7465 6c4f 6d69     ANevse/resetOlim
 80a8444:	7865 4800 4e41 7665 6573 722f 7365 7465     ex.HANevse/reset
 80a8454:	6850 746f 6e6f 4800 4e41 7665 6573 732f     Photon.HANevse/s
 80a8464:	6977 6374 5468 7365 3174 4800 4e41 7665     witchTest1.HANev
 80a8474:	6573 6d2f 7861 3143 4800 4e41 7665 6573     se/maxC1.HANevse
 80a8484:	6d2f 7861 3243 4d00 5451 3e54 4309 6e6f     /maxC2.MQTT>.Con
 80a8494:	656e 7463 6f69 206e 6166 6c69 6465 4d00     nection failed.M
 80a84a4:	5451 3e54 5209 7465 7972 6e69 2e67 2e2e     QTT>.Retrying...
 80a84b4:	5600 0031 3256 5600 0033 3149 4900 0032     .V1.V2.V3.I1.I2.
 80a84c4:	3349 4600 5500 6573 4972 0044 6f53 6b63     I3.F.UserID.Sock
 80a84d4:	7465 4449 2500 756c 4800 4e41 7665 6573     etID.%lu.HANevse
 80a84e4:	702f 6f68 6f74 4d6e 6165 7573 6572 2500     /photonMeasure.%
 80a84f4:	646c 2000 0030 6572 6461 6143 6472 093e     ld. 0.readCard>.
 80a8504:	4955 2044 6174 2067 6e6f 6320 6168 6772     UID tag on charg
 80a8514:	7265 3a31 5500 6573 4972 0064 6843 7261     er1:.UserId.Char
 80a8524:	6567 0072 7453 7261 5474 6d69 0065 4148     ger.StartTime.HA
 80a8534:	654e 7376 2f65 7075 6164 6574 7355 7265     Nevse/updateUser
 80a8544:	7200 6165 4364 7261 3e64 5509 4449 7420     .readCard>.UID t
 80a8554:	6761 6f20 206e 6863 7261 6567 3272 003a     ag on charger2:.
 80a8564:	6954 656d 756f 2074 6863 7261 6567 0072     Timeout charger.
 80a8574:	7773 7469 6863 6554 7473 6d00 7861 7543     switchTest.maxCu
 80a8584:	7272 6e65 4374 0031 616d 4378 7275 6572     rrentC1.maxCurre
 80a8594:	746e 3243 7000 6f72 4d67 646f 4f65 6d6c     ntC2.progModeOlm
 80a85a4:	0078 6572 6573 5074 7261 6974 6c63 5700     x.resetParticl.W
 80a85b4:	6669 5369 6769 616e 006c 6e69 7469 4652     ifiSignal.initRF
 80a85c4:	4449 6300 7275 6572 746e 7453 0072 6853     ID.currentStr.Sh
 80a85d4:	7261 5665 7261 5400 706f 6369 6200 6f72     areVar.Topic.bro
 80a85e4:	656b 2e72 6968 6576 716d 632e 6d6f 7300     ker.hivemq.com.s
 80a85f4:	7465 6f50 6e69 0074 3939 4d00 5451 3e54     etPoint.99.MQTT>
 80a8604:	4309 6c61 626c 6361 206b 7566 636e 6974     .Callback functi
 80a8614:	6e6f 6920 2073 6163 6c6c 6465 6120 3a74     on is called at:
 80a8624:	0020 0000                                    ...

080a8628 <_ZTV16JsonWriterStaticILj512EE>:
	...
 80a8630:	02a1 080a 02b5 080a 0400 514d 5454 0004     ..........MQTT..
 80a8640:	4d06 4951 6473 0370 3025 7834 5c00 2575     .MQIsdp.%04x.\u%
 80a8650:	3430 0058 2e25 662a 2500 0066               04X.%.*f.%f.

080a865c <_ZTV10JsonBuffer>:
	...
 80a8664:	2999 080a 29b5 080a                         .)...)..

080a866c <_ZTV10JsonParser>:
	...
 80a8674:	29f1 080a 2a15 080a                         .)...*..

080a867c <_ZTV10JsonWriter>:
	...
 80a8684:	29c9 080a 29dd 080a 6977 6972 676e 5400     .)...)..wiring.T
 80a8694:	5043 6c43 6569 746e 7320 636f 656b 3d74     CPClient socket=
 80a86a4:	7825 0000                                   %x..

080a86a8 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80a86b0:	3bab 080a 3bd1 080a 3ff3 080a 3bdf 080a     .;...;...?...;..
 80a86c0:	3bad 080a                                   .;..

080a86c4 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...

080a86cc <_ZTV9TCPClient>:
	...
 80a86d4:	3be5 080a 3c19 080a 3b67 080a 3b81 080a     .;...<..g;...;..
 80a86e4:	3df5 080a 3c7b 080a 3c4d 080a 3ba9 080a     .=..{<..M<...;..
 80a86f4:	3d15 080a 3ff9 080a 3caf 080a 3e69 080a     .=...?...<..i>..
 80a8704:	3f17 080a 3ecf 080a 3b91 080a 3edd 080a     .?...>...;...>..
 80a8714:	3c2d 080a 616e 006e 6e69 0066 766f 0066     -<..nan.inf.ovf.
 80a8724:	7061 0070 2b25 3330 3a64 3025 7532 2500     app.%+03d:%02u.%
 80a8734:	2d59 6d25 252d 5464 4825 253a 3a4d 5325     Y-%m-%dT%H:%M:%S
 80a8744:	7a25 6100 6373 6974 656d 0000               %z.asctime..

080a8750 <_ZTV9IPAddress>:
	...
 80a8758:	4b77 080a 4b67 080a 4b69 080a               wK..gK..iK..

080a8764 <_ZTV9USBSerial>:
	...
 80a876c:	4c59 080a 4cbf 080a 4c97 080a 4445 080a     YL...L...L..ED..
 80a877c:	4c89 080a 4c5b 080a 4c6b 080a 4cb9 080a     .L..[L..kL...L..
 80a878c:	4c7b 080a 4c55 080a                         {L..UL..

080a8794 <_ZTV11USARTSerial>:
	...
 80a879c:	4dbd 080a 4e25 080a 4e01 080a 4445 080a     .M..%N...N..ED..
 80a87ac:	4dd1 080a 4ded 080a 4ddf 080a 4dfb 080a     .M...M...M...M..
 80a87bc:	4dbf 080a 4dc3 080a                         .M...M..

080a87c4 <_ZTV7TwoWire>:
	...
 80a87cc:	4ef5 080a 4f3f 080a 4f17 080a 4ef7 080a     .N..?O...O...N..
 80a87dc:	4f1f 080a 4f27 080a 4f2f 080a 4f37 080a     .O..'O../O..7O..

080a87ec <_ZTVN5spark9WiFiClassE>:
	...
 80a87f4:	501b 080a 5011 080a 5007 080a 4f77 080a     .P...P...P..wO..
 80a8804:	46db 080a 4ffb 080a 4fef 080a 4fe7 080a     .F...O...O...O..
 80a8814:	4fdd 080a 4fd3 080a 4f8f 080a               .O...O...O..

080a8820 <_ZTV10WiFiSignal>:
	...
 80a8828:	4f71 080a 4f81 080a 4f73 080a 5025 080a     qO...O..sO..%P..
 80a8838:	5055 080a 5079 080a 50a9 080a               UP..yP...P..

080a8844 <_ZTVN5spark12NetworkClassE>:
	...
 80a884c:	5189 080a 5193 080a 519d 080a 51a7 080a     .Q...Q...Q...Q..
 80a885c:	51b1 080a 51bd 080a 51c9 080a 51d5 080a     .Q...Q...Q...Q..
 80a886c:	51dd 080a 51e7 080a 51f1 080a               .Q...Q...Q..

080a8878 <_ZSt7nothrow>:
	...

080a8879 <_ZTSSt19_Sp_make_shared_tag>:
 80a8879:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
 80a8889:	6572 5f64 6174 0067 0000                     red_tag....

080a8894 <_ZTISt19_Sp_make_shared_tag>:
 80a8894:	88d4 080a 8879 080a                         ....y...

080a889c <_ZTIN10__cxxabiv117__class_type_infoE>:
 80a889c:	8934 080a 88a8 080a 8958 080a               4.......X...

080a88a8 <_ZTSN10__cxxabiv117__class_type_infoE>:
 80a88a8:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
 80a88b8:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
 80a88c8:	0045 0000                                   E...

080a88cc <_ZTVN10__cxxabiv117__class_type_infoE>:
 80a88cc:	0000 0000 889c 080a 5485 080a 5499 080a     .........T...T..
 80a88dc:	5631 080a 5631 080a 5503 080a 5445 080a     1V..1V...U..ET..
 80a88ec:	54eb 080a 54ad 080a 5479 080a               .T...T..yT..

080a88f8 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
 80a88f8:	8934 080a 8904 080a 889c 080a               4...........

080a8904 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
 80a8904:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
 80a8914:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
 80a8924:	666e 456f 0000 0000                         nfoE....

080a892c <_ZTVN10__cxxabiv120__si_class_type_infoE>:
 80a892c:	0000 0000 88f8 080a 552d 080a 5541 080a     ........-U..AU..
 80a893c:	5631 080a 5631 080a 5503 080a 5445 080a     1V..1V...U..ET..
 80a894c:	5605 080a 5591 080a 5555 080a               .V...U..UU..

080a8958 <_ZTISt9type_info>:
 80a8958:	88d4 080a 8960 080a                         ....`...

080a8960 <_ZTSSt9type_info>:
 80a8960:	7453 7439 7079 5f65 6e69 6f66 2500 332e     St9type_info.%.3
 80a8970:	2073 2e25 7333 3325 2064 2e25 6432 253a     s %.3s%3d %.2d:%
 80a8980:	322e 3a64 2e25 6432 2520 0a64                .2d:%.2d %d..

080a898d <day_name.4782>:
 80a898d:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
 80a899d:	6972 6153                                    riSat

080a89a2 <mon_name.4783>:
 80a89a2:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
 80a89b2:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
 80a89c2:	4476 6365 0000                              vDec..

080a89c8 <__month_lengths>:
 80a89c8:	001f 0000 001c 0000 001f 0000 001e 0000     ................
 80a89d8:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 80a89e8:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 80a89f8:	001f 0000 001d 0000 001f 0000 001e 0000     ................
 80a8a08:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 80a8a18:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 80a8a28:	7325 2e25 642a 2500 2573 2e30 642a 2b00     %s%.*d.%s%0.*d.+
 80a8a38:	2d00 2500 6432 2500 322e 2f64 2e25 6432     .-.%2d.%.2d/%.2d
 80a8a48:	252f 322e 0064 2d59 6d25 252d 0064 2a2e     /%.2d.Y-%m-%d..*
 80a8a58:	0075 2e25 6433 2500 6c6c 0064 2e25 6432     u.%.3d.%lld.%.2d
 80a8a68:	253a 322e 3a64 2e25 6432 2500 302b 6c33     :%.2d:%.2d.%+03l
 80a8a78:	2564 322e 646c 4a00 6e61 4600 6265 4d00     d%.2ld.Jan.Feb.M
 80a8a88:	7261 4100 7270 4d00 7961 4a00 6e75 4a00     ar.Apr.May.Jun.J
 80a8a98:	6c75 4100 6775 5300 7065 4f00 7463 4e00     ul.Aug.Sep.Oct.N
 80a8aa8:	766f 4400 6365 4a00 6e61 6175 7972 4600     ov.Dec.January.F
 80a8ab8:	6265 7572 7261 0079 614d 6372 0068 7041     ebruary.March.Ap
 80a8ac8:	6972 006c 754a 656e 4a00 6c75 0079 7541     ril.June.July.Au
 80a8ad8:	7567 7473 5300 7065 6574 626d 7265 4f00     gust.September.O
 80a8ae8:	7463 626f 7265 4e00 766f 6d65 6562 0072     ctober.November.
 80a8af8:	6544 6563 626d 7265 5300 6e75 4d00 6e6f     December.Sun.Mon
 80a8b08:	5400 6575 5700 6465 5400 7568 4600 6972     .Tue.Wed.Thu.Fri
 80a8b18:	5300 7461 5300 6e75 6164 0079 6f4d 646e     .Sat.Sunday.Mond
 80a8b28:	7961 5400 6575 6473 7961 5700 6465 656e     ay.Tuesday.Wedne
 80a8b38:	6473 7961 5400 7568 7372 6164 0079 7246     sday.Thursday.Fr
 80a8b48:	6469 7961 5300 7461 7275 6164 0079 4825     iday.Saturday.%H
 80a8b58:	253a 3a4d 5325 2500 2f6d 6425 252f 0079     :%M:%S.%m/%d/%y.
 80a8b68:	6125 2520 2062 6525 2520 3a48 4d25 253a     %a %b %e %H:%M:%
 80a8b78:	2053 5925 4100 004d 4d50 2500 2061 6225     S %Y.AM.PM.%a %b
 80a8b88:	2520 2065 4825 253a 3a4d 5325 2520 205a      %e %H:%M:%S %Z 
 80a8b98:	5925 6d00 0064 4925 253a 3a4d 5325 2520     %Y.md.%I:%M:%S %
 80a8ba8:	0070 0000                                   p...

080a8bac <_C_time_locale>:
 80a8bac:	8a7f 080a 8a83 080a 8a87 080a 8a8b 080a     ................
 80a8bbc:	8a8f 080a 8a93 080a 8a97 080a 8a9b 080a     ................
 80a8bcc:	8a9f 080a 8aa3 080a 8aa7 080a 8aab 080a     ................
 80a8bdc:	8aaf 080a 8ab7 080a 8ac0 080a 8ac6 080a     ................
 80a8bec:	8a8f 080a 8acc 080a 8ad1 080a 8ad6 080a     ................
 80a8bfc:	8add 080a 8ae7 080a 8aef 080a 8af8 080a     ................
 80a8c0c:	8b01 080a 8b05 080a 8b09 080a 8b0d 080a     ................
 80a8c1c:	8b11 080a 8b15 080a 8b19 080a 8b1d 080a     ................
 80a8c2c:	8b24 080a 8b2b 080a 8b33 080a 8b3d 080a     $...+...3...=...
 80a8c3c:	8b46 080a 8b4d 080a 8b56 080a 8b5f 080a     F...M...V..._...
 80a8c4c:	8b68 080a 8b7d 080a 8b80 080a 8b83 080a     h...}...........
 80a8c5c:	8aaf 080a 8ab7 080a 8ac0 080a 8ac6 080a     ................
 80a8c6c:	8a8f 080a 8acc 080a 8ad1 080a 8ad6 080a     ................
 80a8c7c:	8add 080a 8ae7 080a 8aef 080a 8af8 080a     ................
 80a8c8c:	8b9b 080a 8b9e 080a 898c 080a 898c 080a     ................
 80a8c9c:	898c 080a 898c 080a 898c 080a 5a54 4700     ............TZ.G
 80a8cac:	544d 2500 3031 5e5b 2d30 2c39 2d2b 255d     MT.%10[^0-9,+-]%
 80a8cbc:	006e 254d 7568 6e25 252e 7568 6e25 252e     n.M%hu%n.%hu%n.%
 80a8ccc:	7568 6e25 2f00 6825 2575 3a6e 6825 2575     hu%n./%hu%n:%hu%
 80a8cdc:	3a6e 6825 2575 006e                         n:%hu%n.

080a8ce4 <_ctype_>:
 80a8ce4:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 80a8cf4:	2020 2020 2020 2020 2020 2020 2020 2020                     
 80a8d04:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 80a8d14:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 80a8d24:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 80a8d34:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 80a8d44:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 80a8d54:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 80a8d64:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
 80a8de4:	5000 534f 5849                               .POSIX.

080a8deb <link_const_variable_data_end>:
	...

080a8dec <link_constructors_location>:
 80a8dec:	080a15cd 	.word	0x080a15cd
 80a8df0:	080a3a81 	.word	0x080a3a81
 80a8df4:	080a46e9 	.word	0x080a46e9
 80a8df8:	080a4979 	.word	0x080a4979
 80a8dfc:	080a49b1 	.word	0x080a49b1
 80a8e00:	080a5175 	.word	0x080a5175
 80a8e04:	080a5259 	.word	0x080a5259
 80a8e08:	080a5375 	.word	0x080a5375

080a8e0c <link_constructors_end>:
 80a8e0c:	00000000 	.word	0x00000000
