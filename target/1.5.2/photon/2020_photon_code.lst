
d:/UNI_S5/new_particle_code/2020_photon_code/target/1.5.2/photon/2020_photon_code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000a380  080a0020  080a0020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  080aa3a0  080aa3a0  0001a3a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  40024000  080aa3a8  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000000fc  20000000  080aa3ac  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000006a0  200000fc  200000fc  000400fc  2**2
                  ALLOC
  7 .module_info_suffix 00000028  080aa4a8  080aa4a8  0003a4a8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  080aa4d0  080aa4d0  0003a4d0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   000e8c0d  00000000  00000000  0003a4d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00013339  00000000  00000000  001230e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0002030e  00000000  00000000  0013641a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00002b00  00000000  00000000  00156728  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00004778  00000000  00000000  00159228  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00029660  00000000  00000000  0015d9a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0002c730  00000000  00000000  00187000  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000b21f6  00000000  00000000  001b3730  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000e57c  00000000  00000000  00265928  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0020:	4809      	ldr	r0, [pc, #36]	; (80a0048 <module_user_pre_init+0x28>)
 80a0022:	490a      	ldr	r1, [pc, #40]	; (80a004c <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0024:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0026:	4288      	cmp	r0, r1
 80a0028:	d005      	beq.n	80a0036 <module_user_pre_init+0x16>
 80a002a:	4a09      	ldr	r2, [pc, #36]	; (80a0050 <module_user_pre_init+0x30>)
 80a002c:	4282      	cmp	r2, r0
 80a002e:	d002      	beq.n	80a0036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a0030:	1a12      	subs	r2, r2, r0
 80a0032:	f006 fb0d 	bl	80a6650 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0036:	4807      	ldr	r0, [pc, #28]	; (80a0054 <module_user_pre_init+0x34>)
 80a0038:	4a07      	ldr	r2, [pc, #28]	; (80a0058 <module_user_pre_init+0x38>)
 80a003a:	2100      	movs	r1, #0
 80a003c:	1a12      	subs	r2, r2, r0
 80a003e:	f006 fb12 	bl	80a6666 <memset>
    return &link_heap_start;
}
 80a0042:	4806      	ldr	r0, [pc, #24]	; (80a005c <module_user_pre_init+0x3c>)
 80a0044:	bd08      	pop	{r3, pc}
 80a0046:	bf00      	nop
 80a0048:	20000000 	.word	0x20000000
 80a004c:	080aa3ac 	.word	0x080aa3ac
 80a0050:	200000fc 	.word	0x200000fc
 80a0054:	200000fc 	.word	0x200000fc
 80a0058:	2000079c 	.word	0x2000079c
 80a005c:	2000079c 	.word	0x2000079c

080a0060 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a0060:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a0062:	f004 f9cf 	bl	80a4404 <module_user_init_hook>
 80a0066:	4b07      	ldr	r3, [pc, #28]	; (80a0084 <module_user_init+0x24>)
 80a0068:	4c07      	ldr	r4, [pc, #28]	; (80a0088 <module_user_init+0x28>)
 80a006a:	461e      	mov	r6, r3
 80a006c:	1ae4      	subs	r4, r4, r3
 80a006e:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0070:	2500      	movs	r5, #0
 80a0072:	42a5      	cmp	r5, r4
 80a0074:	d004      	beq.n	80a0080 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0076:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a007a:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a007c:	3501      	adds	r5, #1
 80a007e:	e7f8      	b.n	80a0072 <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0080:	bd70      	pop	{r4, r5, r6, pc}
 80a0082:	bf00      	nop
 80a0084:	080aa364 	.word	0x080aa364
 80a0088:	080aa3a0 	.word	0x080aa3a0

080a008c <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a008c:	f001 bbda 	b.w	80a1844 <setup>

080a0090 <module_user_loop>:
}

void module_user_loop() {
 80a0090:	b508      	push	{r3, lr}
    loop();
 80a0092:	f001 fa13 	bl	80a14bc <loop>
    _post_loop();
}
 80a0096:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a009a:	f004 b975 	b.w	80a4388 <_post_loop>

080a009e <_Znwj>:
 80a009e:	f003 b91b 	b.w	80a32d8 <malloc>

080a00a2 <_Znaj>:
	return malloc(size);
}

void *operator new[](size_t size)
{
	return malloc(size);
 80a00a2:	f003 b919 	b.w	80a32d8 <malloc>

080a00a6 <_ZdlPv>:
 80a00a6:	f003 b91f 	b.w	80a32e8 <free>

080a00aa <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
 80a00aa:	f003 b91d 	b.w	80a32e8 <free>

080a00ae <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00ae:	7800      	ldrb	r0, [r0, #0]
 80a00b0:	fab0 f080 	clz	r0, r0
 80a00b4:	0940      	lsrs	r0, r0, #5
 80a00b6:	4770      	bx	lr

080a00b8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00b8:	2301      	movs	r3, #1
 80a00ba:	7003      	strb	r3, [r0, #0]
 80a00bc:	4770      	bx	lr

080a00be <_ZN10CloudClass22update_string_variableEPKc18Spark_Data_TypeDefPKvPv>:

    static const void* update_string_variable(const char* name, Spark_Data_TypeDef type, const void* var, void* reserved)
    {
        const String* s = (const String*)var;
        return s->c_str();
    }
 80a00be:	6810      	ldr	r0, [r2, #0]
 80a00c0:	4770      	bx	lr

080a00c2 <_Z11resetOlimex6String>:
    while (*pointer++) {
      out.concat(in[index++]);
      }
}

int resetOlimex(String input) {
 80a00c2:	b508      	push	{r3, lr}
    digitalWrite(RESET_OLIMEX, LOW);
 80a00c4:	2100      	movs	r1, #0
 80a00c6:	2004      	movs	r0, #4
 80a00c8:	f004 fdd7 	bl	80a4c7a <digitalWrite>
    delay(500);
 80a00cc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a00d0:	f004 f8f8 	bl	80a42c4 <delay>
    digitalWrite(RESET_OLIMEX, HIGH);
 80a00d4:	2101      	movs	r1, #1
 80a00d6:	2004      	movs	r0, #4
 80a00d8:	f004 fdcf 	bl	80a4c7a <digitalWrite>
    return 1;
}
 80a00dc:	2001      	movs	r0, #1
 80a00de:	bd08      	pop	{r3, pc}

080a00e0 <_Z12progModeOlmx6String>:

int resetParticl(String input) {
    System.reset();
}

int progModeOlmx(String input) {
 80a00e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    digitalWrite(WAKEUP_OLIMEX, HIGH);
 80a00e2:	2101      	movs	r1, #1
 80a00e4:	2002      	movs	r0, #2
 80a00e6:	f004 fdc8 	bl	80a4c7a <digitalWrite>
    delay(500);
 80a00ea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a00ee:	f004 f8e9 	bl	80a42c4 <delay>
    resetOlimex("");
 80a00f2:	490b      	ldr	r1, [pc, #44]	; (80a0120 <_Z12progModeOlmx6String+0x40>)
 80a00f4:	4668      	mov	r0, sp
 80a00f6:	f003 fd08 	bl	80a3b0a <_ZN6StringC1EPK19__FlashStringHelper>
 80a00fa:	4668      	mov	r0, sp
 80a00fc:	f7ff ffe1 	bl	80a00c2 <_Z11resetOlimex6String>
 80a0100:	4668      	mov	r0, sp
 80a0102:	f003 fcbb 	bl	80a3a7c <_ZN6StringD1Ev>
    delay(500);
 80a0106:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a010a:	f004 f8db 	bl	80a42c4 <delay>
    digitalWrite(WAKEUP_OLIMEX, LOW);
 80a010e:	2100      	movs	r1, #0
 80a0110:	2002      	movs	r0, #2
 80a0112:	f004 fdb2 	bl	80a4c7a <digitalWrite>
    return 1;
}
 80a0116:	2001      	movs	r0, #1
 80a0118:	b005      	add	sp, #20
 80a011a:	f85d fb04 	ldr.w	pc, [sp], #4
 80a011e:	bf00      	nop
 80a0120:	080a997b 	.word	0x080a997b

080a0124 <_Z10WifiSignal6String>:
    delay(500);
    digitalWrite(RESET_OLIMEX, HIGH);
    return 1;
}

int WifiSignal(String input) {
 80a0124:	b500      	push	{lr}
 80a0126:	b08b      	sub	sp, #44	; 0x2c
    return WiFi.RSSI();
 80a0128:	4904      	ldr	r1, [pc, #16]	; (80a013c <_Z10WifiSignal6String+0x18>)
 80a012a:	a801      	add	r0, sp, #4
 80a012c:	f004 fca8 	bl	80a4a80 <_ZN5spark9WiFiClass4RSSIEv>
 80a0130:	a801      	add	r0, sp, #4
 80a0132:	f004 fc83 	bl	80a4a3c <_ZNK10WiFiSignalcvaEv>
}
 80a0136:	b00b      	add	sp, #44	; 0x2c
 80a0138:	f85d fb04 	ldr.w	pc, [sp], #4
 80a013c:	2000058c 	.word	0x2000058c

080a0140 <_Z12resetParticl6String>:

int resetParticl(String input) {
 80a0140:	b508      	push	{r3, lr}
    System.reset();
 80a0142:	f003 f953 	bl	80a33ec <_ZN11SystemClass5resetEv>
}
 80a0146:	bd08      	pop	{r3, pc}

080a0148 <_Z10switchTest6String>:
    }
    
    return number;
}

int switchTest(String valueString) {
 80a0148:	b538      	push	{r3, r4, r5, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 80a014a:	490d      	ldr	r1, [pc, #52]	; (80a0180 <_Z10switchTest6String+0x38>)
 80a014c:	4605      	mov	r5, r0
 80a014e:	f003 fdf9 	bl	80a3d44 <_ZNK6String6equalsEPKc>
    if (valueString == "true") {
 80a0152:	4604      	mov	r4, r0
 80a0154:	b130      	cbz	r0, 80a0164 <_Z10switchTest6String+0x1c>
        client.disconnect();
 80a0156:	480b      	ldr	r0, [pc, #44]	; (80a0184 <_Z10switchTest6String+0x3c>)
 80a0158:	f002 f9b3 	bl	80a24c2 <_ZN4MQTT10disconnectEv>
        TESTCASE = true;
 80a015c:	4b0a      	ldr	r3, [pc, #40]	; (80a0188 <_Z10switchTest6String+0x40>)
 80a015e:	2001      	movs	r0, #1
 80a0160:	7018      	strb	r0, [r3, #0]
        return 1;
 80a0162:	bd38      	pop	{r3, r4, r5, pc}
 80a0164:	4909      	ldr	r1, [pc, #36]	; (80a018c <_Z10switchTest6String+0x44>)
 80a0166:	4628      	mov	r0, r5
 80a0168:	f003 fdec 	bl	80a3d44 <_ZNK6String6equalsEPKc>
    }
    if (valueString == "false") {
 80a016c:	b130      	cbz	r0, 80a017c <_Z10switchTest6String+0x34>
        client.disconnect();
 80a016e:	4805      	ldr	r0, [pc, #20]	; (80a0184 <_Z10switchTest6String+0x3c>)
 80a0170:	f002 f9a7 	bl	80a24c2 <_ZN4MQTT10disconnectEv>
        TESTCASE = false;
 80a0174:	4b04      	ldr	r3, [pc, #16]	; (80a0188 <_Z10switchTest6String+0x40>)
        return 0;
 80a0176:	4620      	mov	r0, r4
        TESTCASE = true;
        return 1;
    }
    if (valueString == "false") {
        client.disconnect();
        TESTCASE = false;
 80a0178:	701c      	strb	r4, [r3, #0]
        return 0;
 80a017a:	bd38      	pop	{r3, r4, r5, pc}
    }
}
 80a017c:	bd38      	pop	{r3, r4, r5, pc}
 80a017e:	bf00      	nop
 80a0180:	080a9498 	.word	0x080a9498
 80a0184:	200002c4 	.word	0x200002c4
 80a0188:	20000478 	.word	0x20000478
 80a018c:	080a949d 	.word	0x080a949d

080a0190 <_Z12maxCurrentC16String>:

int maxCurrentC1(String setPointStr) {
 80a0190:	b570      	push	{r4, r5, r6, lr}
 80a0192:	b08a      	sub	sp, #40	; 0x28
    unsigned int setPoint = setPointStr.toInt();
 80a0194:	f003 fe1f 	bl	80a3dd6 <_ZNK6String5toIntEv>
 80a0198:	4605      	mov	r5, r0
    byte olimexMessage[4] = {0xFE,1,setPoint,0xFF};
 80a019a:	23fe      	movs	r3, #254	; 0xfe
 80a019c:	f88d 3004 	strb.w	r3, [sp, #4]
 80a01a0:	23ff      	movs	r3, #255	; 0xff
 80a01a2:	f88d 3007 	strb.w	r3, [sp, #7]
    if (!TESTCASE) {
 80a01a6:	4b18      	ldr	r3, [pc, #96]	; (80a0208 <_Z12maxCurrentC16String+0x78>)
    }
}

int maxCurrentC1(String setPointStr) {
    unsigned int setPoint = setPointStr.toInt();
    byte olimexMessage[4] = {0xFE,1,setPoint,0xFF};
 80a01a8:	2001      	movs	r0, #1
    if (!TESTCASE) {
 80a01aa:	781c      	ldrb	r4, [r3, #0]
    }
}

int maxCurrentC1(String setPointStr) {
    unsigned int setPoint = setPointStr.toInt();
    byte olimexMessage[4] = {0xFE,1,setPoint,0xFF};
 80a01ac:	f88d 0005 	strb.w	r0, [sp, #5]
 80a01b0:	f88d 5006 	strb.w	r5, [sp, #6]
    if (!TESTCASE) {
 80a01b4:	bb2c      	cbnz	r4, 80a0202 <_Z12maxCurrentC16String+0x72>
        Serial1.write(olimexMessage,4);
 80a01b6:	f004 fb0f 	bl	80a47d8 <_Z22__fetch_global_Serial1v>
 80a01ba:	6803      	ldr	r3, [r0, #0]
 80a01bc:	2204      	movs	r2, #4
 80a01be:	68db      	ldr	r3, [r3, #12]
 80a01c0:	eb0d 0102 	add.w	r1, sp, r2
 80a01c4:	4798      	blx	r3
        DEBUGPORT.println("maxCurrentC1>\tNew setpoint set at "+String(setPoint)+" Amps.");
 80a01c6:	f004 fa51 	bl	80a466c <_Z16_fetch_usbserialv>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a01ca:	4910      	ldr	r1, [pc, #64]	; (80a020c <_Z12maxCurrentC16String+0x7c>)
 80a01cc:	4606      	mov	r6, r0
 80a01ce:	a806      	add	r0, sp, #24
 80a01d0:	f003 fc9b 	bl	80a3b0a <_ZN6StringC1EPK19__FlashStringHelper>
 80a01d4:	220a      	movs	r2, #10
 80a01d6:	4629      	mov	r1, r5
 80a01d8:	a802      	add	r0, sp, #8
 80a01da:	f003 fd1e 	bl	80a3c1a <_ZN6StringC1Ejh>
 80a01de:	a902      	add	r1, sp, #8
 80a01e0:	a806      	add	r0, sp, #24
 80a01e2:	f003 fd91 	bl	80a3d08 <_ZplRK15StringSumHelperRK6String>
 80a01e6:	490a      	ldr	r1, [pc, #40]	; (80a0210 <_Z12maxCurrentC16String+0x80>)
 80a01e8:	f003 fd9a 	bl	80a3d20 <_ZplRK15StringSumHelperPKc>
 80a01ec:	6801      	ldr	r1, [r0, #0]
 80a01ee:	4630      	mov	r0, r6
 80a01f0:	f003 fe39 	bl	80a3e66 <_ZN5Print7printlnEPKc>
 80a01f4:	a802      	add	r0, sp, #8
 80a01f6:	f003 fc41 	bl	80a3a7c <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80a01fa:	a806      	add	r0, sp, #24
 80a01fc:	f003 fc3e 	bl	80a3a7c <_ZN6StringD1Ev>
        return 0;
 80a0200:	4620      	mov	r0, r4
    }
    return 1;
}
 80a0202:	b00a      	add	sp, #40	; 0x28
 80a0204:	bd70      	pop	{r4, r5, r6, pc}
 80a0206:	bf00      	nop
 80a0208:	20000478 	.word	0x20000478
 80a020c:	080a94a3 	.word	0x080a94a3
 80a0210:	080a94c6 	.word	0x080a94c6

080a0214 <_Z12maxCurrentC26String>:

int maxCurrentC2(String setPointStr) {
 80a0214:	b570      	push	{r4, r5, r6, lr}
 80a0216:	b08a      	sub	sp, #40	; 0x28
    unsigned int setPoint = setPointStr.toInt();
 80a0218:	f003 fddd 	bl	80a3dd6 <_ZNK6String5toIntEv>
    byte olimexMessage[4] = {0xFE,2,setPoint,0xFF};
 80a021c:	23fe      	movs	r3, #254	; 0xfe
 80a021e:	f88d 3004 	strb.w	r3, [sp, #4]
 80a0222:	2302      	movs	r3, #2
 80a0224:	f88d 3005 	strb.w	r3, [sp, #5]
 80a0228:	23ff      	movs	r3, #255	; 0xff
 80a022a:	f88d 3007 	strb.w	r3, [sp, #7]
    if (!TESTCASE) {
 80a022e:	4b18      	ldr	r3, [pc, #96]	; (80a0290 <_Z12maxCurrentC26String+0x7c>)
    }
    return 1;
}

int maxCurrentC2(String setPointStr) {
    unsigned int setPoint = setPointStr.toInt();
 80a0230:	4605      	mov	r5, r0
    byte olimexMessage[4] = {0xFE,2,setPoint,0xFF};
    if (!TESTCASE) {
 80a0232:	781c      	ldrb	r4, [r3, #0]
    return 1;
}

int maxCurrentC2(String setPointStr) {
    unsigned int setPoint = setPointStr.toInt();
    byte olimexMessage[4] = {0xFE,2,setPoint,0xFF};
 80a0234:	f88d 0006 	strb.w	r0, [sp, #6]
    if (!TESTCASE) {
 80a0238:	bb34      	cbnz	r4, 80a0288 <_Z12maxCurrentC26String+0x74>
        Serial1.write(olimexMessage,4);
 80a023a:	f004 facd 	bl	80a47d8 <_Z22__fetch_global_Serial1v>
 80a023e:	6803      	ldr	r3, [r0, #0]
 80a0240:	2204      	movs	r2, #4
 80a0242:	68db      	ldr	r3, [r3, #12]
 80a0244:	eb0d 0102 	add.w	r1, sp, r2
 80a0248:	4798      	blx	r3
        DEBUGPORT.println("maxCurrentC2>\tNew setpoint set at "+String(setPoint)+" Amps.");
 80a024a:	f004 fa0f 	bl	80a466c <_Z16_fetch_usbserialv>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a024e:	4911      	ldr	r1, [pc, #68]	; (80a0294 <_Z12maxCurrentC26String+0x80>)
 80a0250:	4606      	mov	r6, r0
 80a0252:	a806      	add	r0, sp, #24
 80a0254:	f003 fc59 	bl	80a3b0a <_ZN6StringC1EPK19__FlashStringHelper>
 80a0258:	220a      	movs	r2, #10
 80a025a:	4629      	mov	r1, r5
 80a025c:	a802      	add	r0, sp, #8
 80a025e:	f003 fcdc 	bl	80a3c1a <_ZN6StringC1Ejh>
 80a0262:	a902      	add	r1, sp, #8
 80a0264:	a806      	add	r0, sp, #24
 80a0266:	f003 fd4f 	bl	80a3d08 <_ZplRK15StringSumHelperRK6String>
 80a026a:	490b      	ldr	r1, [pc, #44]	; (80a0298 <_Z12maxCurrentC26String+0x84>)
 80a026c:	f003 fd58 	bl	80a3d20 <_ZplRK15StringSumHelperPKc>
 80a0270:	6801      	ldr	r1, [r0, #0]
 80a0272:	4630      	mov	r0, r6
 80a0274:	f003 fdf7 	bl	80a3e66 <_ZN5Print7printlnEPKc>
 80a0278:	a802      	add	r0, sp, #8
 80a027a:	f003 fbff 	bl	80a3a7c <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80a027e:	a806      	add	r0, sp, #24
 80a0280:	f003 fbfc 	bl	80a3a7c <_ZN6StringD1Ev>
        return 0;
 80a0284:	4620      	mov	r0, r4
 80a0286:	e000      	b.n	80a028a <_Z12maxCurrentC26String+0x76>
    }
    return 1;
 80a0288:	2001      	movs	r0, #1
}
 80a028a:	b00a      	add	sp, #40	; 0x28
 80a028c:	bd70      	pop	{r4, r5, r6, pc}
 80a028e:	bf00      	nop
 80a0290:	20000478 	.word	0x20000478
 80a0294:	080a94cd 	.word	0x080a94cd
 80a0298:	080a94c6 	.word	0x080a94c6

080a029c <_ZN16JsonWriterStaticILj512EED1Ev>:
 * variable.
 *
 * @param BUFFER_SIZE The size of the buffer to reserve.
 */
template <size_t BUFFER_SIZE>
class JsonWriterStatic : public JsonWriter {
 80a029c:	b510      	push	{r4, lr}
 80a029e:	4604      	mov	r4, r0
 80a02a0:	4b02      	ldr	r3, [pc, #8]	; (80a02ac <_ZN16JsonWriterStaticILj512EED1Ev+0x10>)
 80a02a2:	6003      	str	r3, [r0, #0]
 80a02a4:	f002 fc44 	bl	80a2b30 <_ZN10JsonWriterD1Ev>
 80a02a8:	4620      	mov	r0, r4
 80a02aa:	bd10      	pop	{r4, pc}
 80a02ac:	080a9490 	.word	0x080a9490

080a02b0 <_ZN16JsonWriterStaticILj512EED0Ev>:
 80a02b0:	b510      	push	{r4, lr}
 80a02b2:	4604      	mov	r4, r0
 80a02b4:	f7ff fff2 	bl	80a029c <_ZN16JsonWriterStaticILj512EED1Ev>
 80a02b8:	4620      	mov	r0, r4
 80a02ba:	f44f 710c 	mov.w	r1, #560	; 0x230
 80a02be:	f004 fd6f 	bl	80a4da0 <_ZdlPvj>
 80a02c2:	4620      	mov	r0, r4
 80a02c4:	bd10      	pop	{r4, pc}

080a02c6 <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  ~SPIClass() = default;
 80a02c6:	b510      	push	{r4, lr}
 80a02c8:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a02ca:	6880      	ldr	r0, [r0, #8]
 80a02cc:	b108      	cbz	r0, 80a02d2 <_ZN8SPIClassD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
 80a02ce:	f002 fdf5 	bl	80a2ebc <os_mutex_recursive_destroy>
 80a02d2:	4620      	mov	r0, r4
 80a02d4:	bd10      	pop	{r4, pc}
	...

080a02d8 <_ZN10CloudClass9_variableIcEEbPKT_PK6StringRK17CloudVariableTypeIPKcvE.isra.7>:
        static_assert(sizeof(T)==0, "\n\nUse Particle.variable(\"name\", myVar, STRING); without & in front of myVar\n\n");
        return false;
    }

    template<typename T>
    static inline bool _variable(const T *varKey, const String *userVar, const CloudVariableTypeString& userVarType)
 80a02d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    {
        spark_variable_t extra = {};
 80a02da:	2300      	movs	r3, #0
 80a02dc:	9301      	str	r3, [sp, #4]
 80a02de:	9303      	str	r3, [sp, #12]
        extra.size = sizeof(extra);
 80a02e0:	230c      	movs	r3, #12
 80a02e2:	f8ad 3004 	strh.w	r3, [sp, #4]
        extra.update = update_string_variable;
 80a02e6:	4b04      	ldr	r3, [pc, #16]	; (80a02f8 <_ZN10CloudClass9_variableIcEEbPKT_PK6StringRK17CloudVariableTypeIPKcvE.isra.7+0x20>)
        return spark_variable(varKey, userVar, CloudVariableTypeString::TYPE_ID, &extra);
 80a02e8:	2204      	movs	r2, #4
    template<typename T>
    static inline bool _variable(const T *varKey, const String *userVar, const CloudVariableTypeString& userVarType)
    {
        spark_variable_t extra = {};
        extra.size = sizeof(extra);
        extra.update = update_string_variable;
 80a02ea:	9302      	str	r3, [sp, #8]
        return spark_variable(varKey, userVar, CloudVariableTypeString::TYPE_ID, &extra);
 80a02ec:	ab01      	add	r3, sp, #4
 80a02ee:	f002 ffbb 	bl	80a3268 <spark_variable>
    }
 80a02f2:	b005      	add	sp, #20
 80a02f4:	f85d fb04 	ldr.w	pc, [sp], #4
 80a02f8:	080a00bf 	.word	0x080a00bf

080a02fc <_Z8initRFID6String>:
			break;
		}
	}
}

int initRFID(String input) {
 80a02fc:	b538      	push	{r3, r4, r5, lr}
    //additional config for debugging RFID readers
    pinMode(SS_PIN_CHARGER1, OUTPUT);
 80a02fe:	2101      	movs	r1, #1
 80a0300:	200b      	movs	r0, #11
 80a0302:	f004 fca9 	bl	80a4c58 <pinMode>
	digitalWrite(SS_PIN_CHARGER1, HIGH);
 80a0306:	2101      	movs	r1, #1
 80a0308:	200b      	movs	r0, #11
 80a030a:	f004 fcb6 	bl	80a4c7a <digitalWrite>

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a030e:	4d20      	ldr	r5, [pc, #128]	; (80a0390 <_Z8initRFID6String+0x94>)
	pinMode(SS_PIN_CHARGER2, OUTPUT);
 80a0310:	2101      	movs	r1, #1
 80a0312:	200c      	movs	r0, #12
 80a0314:	f004 fca0 	bl	80a4c58 <pinMode>
	digitalWrite(SS_PIN_CHARGER2, HIGH);
 80a0318:	2101      	movs	r1, #1
 80a031a:	200c      	movs	r0, #12
 80a031c:	f004 fcad 	bl	80a4c7a <digitalWrite>
 80a0320:	6829      	ldr	r1, [r5, #0]
 80a0322:	f011 0401 	ands.w	r4, r1, #1
 80a0326:	d10f      	bne.n	80a0348 <_Z8initRFID6String+0x4c>
 80a0328:	4628      	mov	r0, r5
 80a032a:	f7ff fec0 	bl	80a00ae <__cxa_guard_acquire>
 80a032e:	b158      	cbz	r0, 80a0348 <_Z8initRFID6String+0x4c>
 80a0330:	4621      	mov	r1, r4
 80a0332:	4818      	ldr	r0, [pc, #96]	; (80a0394 <_Z8initRFID6String+0x98>)
 80a0334:	f003 f81e 	bl	80a3374 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a0338:	4628      	mov	r0, r5
 80a033a:	f7ff febd 	bl	80a00b8 <__cxa_guard_release>
 80a033e:	4a16      	ldr	r2, [pc, #88]	; (80a0398 <_Z8initRFID6String+0x9c>)
 80a0340:	4916      	ldr	r1, [pc, #88]	; (80a039c <_Z8initRFID6String+0xa0>)
 80a0342:	4814      	ldr	r0, [pc, #80]	; (80a0394 <_Z8initRFID6String+0x98>)
 80a0344:	f004 fd1e 	bl	80a4d84 <__aeabi_atexit>

    void begin() {
        instance().begin();
    }
    void begin(uint16_t ss_pin) {
        instance().begin(ss_pin);
 80a0348:	2100      	movs	r1, #0
 80a034a:	4812      	ldr	r0, [pc, #72]	; (80a0394 <_Z8initRFID6String+0x98>)
 80a034c:	f003 f821 	bl	80a3392 <_ZN8SPIClass5beginEt>
  
    SPI.begin(D0);      // Initiate  SPI bus
    //Particle.process();
    delay(50);
 80a0350:	2032      	movs	r0, #50	; 0x32
 80a0352:	f003 ffb7 	bl	80a42c4 <delay>
    mfrc522_Charger1.PCD_Init();   // Initiate MFRC522
 80a0356:	4812      	ldr	r0, [pc, #72]	; (80a03a0 <_Z8initRFID6String+0xa4>)
 80a0358:	f001 fcba 	bl	80a1cd0 <_ZN7MFRC5228PCD_InitEv>
    delay(500);
 80a035c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a0360:	f003 ffb0 	bl	80a42c4 <delay>
    mfrc522_Charger2.PCD_Init();   // Initiate MFRC522
 80a0364:	480f      	ldr	r0, [pc, #60]	; (80a03a4 <_Z8initRFID6String+0xa8>)
 80a0366:	f001 fcb3 	bl	80a1cd0 <_ZN7MFRC5228PCD_InitEv>
    ////mfrc522_Charger1.PCD_SetAntennaGain(mfrc522.RxGain_max);
    mfrc522_Charger1.PCD_SetAntennaGain(mfrc522_Charger1.RxGain_max);
 80a036a:	2170      	movs	r1, #112	; 0x70
 80a036c:	480c      	ldr	r0, [pc, #48]	; (80a03a0 <_Z8initRFID6String+0xa4>)
 80a036e:	f001 fcea 	bl	80a1d46 <_ZN7MFRC52218PCD_SetAntennaGainEh>
    mfrc522_Charger2.PCD_SetAntennaGain(mfrc522_Charger2.RxGain_max);
 80a0372:	2170      	movs	r1, #112	; 0x70
 80a0374:	480b      	ldr	r0, [pc, #44]	; (80a03a4 <_Z8initRFID6String+0xa8>)
 80a0376:	f001 fce6 	bl	80a1d46 <_ZN7MFRC52218PCD_SetAntennaGainEh>
    
    DEBUGPORT.println("Approximate your card to the reader...");
 80a037a:	f004 f977 	bl	80a466c <_Z16_fetch_usbserialv>
 80a037e:	490a      	ldr	r1, [pc, #40]	; (80a03a8 <_Z8initRFID6String+0xac>)
 80a0380:	f003 fd71 	bl	80a3e66 <_ZN5Print7printlnEPKc>
    DEBUGPORT.println();    
 80a0384:	f004 f972 	bl	80a466c <_Z16_fetch_usbserialv>
 80a0388:	f003 fd61 	bl	80a3e4e <_ZN5Print7printlnEv>
    return 1;
}
 80a038c:	2001      	movs	r0, #1
 80a038e:	bd38      	pop	{r3, r4, r5, pc}
 80a0390:	20000100 	.word	0x20000100
 80a0394:	20000104 	.word	0x20000104
 80a0398:	200000fc 	.word	0x200000fc
 80a039c:	080a02c7 	.word	0x080a02c7
 80a03a0:	2000048c 	.word	0x2000048c
 80a03a4:	200002b4 	.word	0x200002b4
 80a03a8:	080a94f0 	.word	0x080a94f0

080a03ac <_ZN10CloudClass7processEv>:
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
 80a03ac:	b508      	push	{r3, lr}
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a03ae:	f002 fd5d 	bl	80a2e6c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a03b2:	4b03      	ldr	r3, [pc, #12]	; (80a03c0 <_ZN10CloudClass7processEv+0x14>)
 80a03b4:	6018      	str	r0, [r3, #0]
    		application_checkin();
    		spark_process();
    }
 80a03b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
 80a03ba:	f002 bf65 	b.w	80a3288 <spark_process>
 80a03be:	bf00      	nop
 80a03c0:	2000059c 	.word	0x2000059c

080a03c4 <_ZN10JsonWriter11startObjectEv>:
	void init();

	/**
	 * @brief Start a new JSON object. Make sure you finish it with finishObjectOrArray()
	 */
	bool startObject() { return startObjectOrArray('{', '}'); };
 80a03c4:	227d      	movs	r2, #125	; 0x7d
 80a03c6:	217b      	movs	r1, #123	; 0x7b
 80a03c8:	f002 bcc5 	b.w	80a2d56 <_ZN10JsonWriter18startObjectOrArrayEcc>

080a03cc <_Z18bytesArrToFloatArrPcjPfj>:

    return output;
}

bool bytesArrToFloatArr(char * Arr, unsigned int ArrLen, float * OutputArr, unsigned int FloatLen)
{
 80a03cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a03ce:	0889      	lsrs	r1, r1, #2
    //FloatTriplet TriOutput;
    for(int i=0; (i<FloatLen) && (4*i+3 < ArrLen); i++)
 80a03d0:	2400      	movs	r4, #0
 80a03d2:	429c      	cmp	r4, r3
 80a03d4:	d018      	beq.n	80a0408 <_Z18bytesArrToFloatArrPcjPfj+0x3c>
 80a03d6:	428c      	cmp	r4, r1
 80a03d8:	f100 0004 	add.w	r0, r0, #4
 80a03dc:	d014      	beq.n	80a0408 <_Z18bytesArrToFloatArrPcjPfj+0x3c>
    {
        float output;

        *((unsigned char *)(&output) + 3) = (unsigned char) Arr[4*i+0];
 80a03de:	f810 5c04 	ldrb.w	r5, [r0, #-4]
 80a03e2:	f88d 5007 	strb.w	r5, [sp, #7]
        *((unsigned char *)(&output) + 2) = Arr[4*i+1];
 80a03e6:	f810 5c03 	ldrb.w	r5, [r0, #-3]
 80a03ea:	f88d 5006 	strb.w	r5, [sp, #6]
        *((unsigned char *)(&output) + 1) = Arr[4*i+2];
 80a03ee:	f810 5c02 	ldrb.w	r5, [r0, #-2]
 80a03f2:	f88d 5005 	strb.w	r5, [sp, #5]
        *((unsigned char *)(&output) + 0) = Arr[4*i+3];
 80a03f6:	f810 5c01 	ldrb.w	r5, [r0, #-1]
 80a03fa:	f88d 5004 	strb.w	r5, [sp, #4]
        
        OutputArr[i] = output;
 80a03fe:	9d01      	ldr	r5, [sp, #4]
 80a0400:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
}

bool bytesArrToFloatArr(char * Arr, unsigned int ArrLen, float * OutputArr, unsigned int FloatLen)
{
    //FloatTriplet TriOutput;
    for(int i=0; (i<FloatLen) && (4*i+3 < ArrLen); i++)
 80a0404:	3401      	adds	r4, #1
 80a0406:	e7e4      	b.n	80a03d2 <_Z18bytesArrToFloatArrPcjPfj+0x6>
        
        OutputArr[i] = output;
    }

    return true;
}
 80a0408:	2001      	movs	r0, #1
 80a040a:	b003      	add	sp, #12
 80a040c:	bd30      	pop	{r4, r5, pc}
	...

080a0410 <_Z11stringParsePci>:
    }

    return TriOutput;
}
*/
int stringParse(char * buf, int buflen){
 80a0410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0414:	4680      	mov	r8, r0
 80a0416:	b09f      	sub	sp, #124	; 0x7c
 80a0418:	460e      	mov	r6, r1
  String cmdValue;
 80a041a:	a806      	add	r0, sp, #24
 80a041c:	49ba      	ldr	r1, [pc, #744]	; (80a0708 <_Z11stringParsePci+0x2f8>)
 80a041e:	f003 fb74 	bl	80a3b0a <_ZN6StringC1EPK19__FlashStringHelper>
 80a0422:	4647      	mov	r7, r8
 80a0424:	f108 0402 	add.w	r4, r8, #2
  int Charger=0;
 80a0428:	2500      	movs	r5, #0
  for (int i=0; i<buflen; i++){
 80a042a:	ebc8 0307 	rsb	r3, r8, r7
 80a042e:	429e      	cmp	r6, r3
 80a0430:	f340 81ea 	ble.w	80a0808 <_Z11stringParsePci+0x3f8>
    if(buf[i]==0x0F && i+2>=buflen) //error check?
 80a0434:	783b      	ldrb	r3, [r7, #0]
 80a0436:	2b0f      	cmp	r3, #15
 80a0438:	d108      	bne.n	80a044c <_Z11stringParsePci+0x3c>
 80a043a:	ebc8 0304 	rsb	r3, r8, r4
 80a043e:	429e      	cmp	r6, r3
 80a0440:	dc04      	bgt.n	80a044c <_Z11stringParsePci+0x3c>
    {
      DEBUGPORT.println("E");
 80a0442:	f004 f913 	bl	80a466c <_Z16_fetch_usbserialv>
 80a0446:	49b1      	ldr	r1, [pc, #708]	; (80a070c <_Z11stringParsePci+0x2fc>)
 80a0448:	f003 fd0d 	bl	80a3e66 <_ZN5Print7printlnEPKc>
    }
    if((buf[i]==0x0F || buf[i]==0x0E) && i+2<buflen) //we detect a command-character and the next two characters exists
 80a044c:	f817 3b01 	ldrb.w	r3, [r7], #1
 80a0450:	f1a3 020e 	sub.w	r2, r3, #14
 80a0454:	2a01      	cmp	r2, #1
 80a0456:	f200 81d5 	bhi.w	80a0804 <_Z11stringParsePci+0x3f4>
 80a045a:	ebc8 0204 	rsb	r2, r8, r4
 80a045e:	4296      	cmp	r6, r2
 80a0460:	f340 81d0 	ble.w	80a0804 <_Z11stringParsePci+0x3f4>
      {
        Charger=1;  
      }
      else
      {
        Charger=2;
 80a0464:	2b0f      	cmp	r3, #15
 80a0466:	bf0c      	ite	eq
 80a0468:	2501      	moveq	r5, #1
 80a046a:	2502      	movne	r5, #2
      }
      DEBUGPORT.print("Charger "+String(Charger)+": ");
 80a046c:	f004 f8fe 	bl	80a466c <_Z16_fetch_usbserialv>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a0470:	49a7      	ldr	r1, [pc, #668]	; (80a0710 <_Z11stringParsePci+0x300>)
 80a0472:	4681      	mov	r9, r0
 80a0474:	a81a      	add	r0, sp, #104	; 0x68
 80a0476:	f003 fb48 	bl	80a3b0a <_ZN6StringC1EPK19__FlashStringHelper>
 80a047a:	220a      	movs	r2, #10
 80a047c:	4629      	mov	r1, r5
 80a047e:	a816      	add	r0, sp, #88	; 0x58
 80a0480:	f003 fbb8 	bl	80a3bf4 <_ZN6StringC1Eih>
 80a0484:	a916      	add	r1, sp, #88	; 0x58
 80a0486:	a81a      	add	r0, sp, #104	; 0x68
 80a0488:	f003 fc3e 	bl	80a3d08 <_ZplRK15StringSumHelperRK6String>
 80a048c:	49a1      	ldr	r1, [pc, #644]	; (80a0714 <_Z11stringParsePci+0x304>)
 80a048e:	f003 fc47 	bl	80a3d20 <_ZplRK15StringSumHelperPKc>
 80a0492:	6801      	ldr	r1, [r0, #0]
 80a0494:	4648      	mov	r0, r9
 80a0496:	f003 fcd3 	bl	80a3e40 <_ZN5Print5printEPKc>
 80a049a:	a816      	add	r0, sp, #88	; 0x58
 80a049c:	f003 faee 	bl	80a3a7c <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80a04a0:	a81a      	add	r0, sp, #104	; 0x68
 80a04a2:	f003 faeb 	bl	80a3a7c <_ZN6StringD1Ev>
      String measurements;
 80a04a6:	4998      	ldr	r1, [pc, #608]	; (80a0708 <_Z11stringParsePci+0x2f8>)
 80a04a8:	a80a      	add	r0, sp, #40	; 0x28
 80a04aa:	f003 fb2e 	bl	80a3b0a <_ZN6StringC1EPK19__FlashStringHelper>
      switch (buf[i+1])
 80a04ae:	783b      	ldrb	r3, [r7, #0]
 80a04b0:	3b01      	subs	r3, #1
 80a04b2:	2b05      	cmp	r3, #5
 80a04b4:	f200 81a3 	bhi.w	80a07fe <_Z11stringParsePci+0x3ee>
 80a04b8:	e8df f013 	tbh	[pc, r3, lsl #1]
 80a04bc:	00150006 	.word	0x00150006
 80a04c0:	00ab0086 	.word	0x00ab0086
 80a04c4:	015200fe 	.word	0x015200fe
      {
        case 1:
          //Phase Voltage
          if(buflen>4)
 80a04c8:	2e04      	cmp	r6, #4
 80a04ca:	dd08      	ble.n	80a04de <_Z11stringParsePci+0xce>
          {
              //Voltage[Charger-1] = bytesToFloat(buf[i+2], buf[i+3], buf[i+4], buf[i+5]);
              float VoltageArr[3];
              if(bytesArrToFloatArr(&buf[i+2], 12, VoltageArr,3))
 80a04cc:	2303      	movs	r3, #3
 80a04ce:	aa03      	add	r2, sp, #12
 80a04d0:	210c      	movs	r1, #12
 80a04d2:	4620      	mov	r0, r4
 80a04d4:	f7ff ff7a 	bl	80a03cc <_Z18bytesArrToFloatArrPcjPfj>
 80a04d8:	f8df 926c 	ldr.w	r9, [pc, #620]	; 80a0748 <_Z11stringParsePci+0x338>
 80a04dc:	e14b      	b.n	80a0776 <_Z11stringParsePci+0x366>
              }
              DEBUGPORT.print("Voltage: "+String(PhaseVoltage[Charger-1][0],4)+" "+String(PhaseVoltage[Charger-1][1],4)+" "+String(PhaseVoltage[Charger-1][2],4));
          }
          else
          {
              DEBUGPORT.print("did not receive enough voltage data");
 80a04de:	f004 f8c5 	bl	80a466c <_Z16_fetch_usbserialv>
 80a04e2:	498d      	ldr	r1, [pc, #564]	; (80a0718 <_Z11stringParsePci+0x308>)
 80a04e4:	e10d      	b.n	80a0702 <_Z11stringParsePci+0x2f2>
          }
          break;
        case 2:
          //Current
          if(buflen>12) //(buflen>4)
 80a04e6:	2e0c      	cmp	r6, #12
 80a04e8:	dd6a      	ble.n	80a05c0 <_Z11stringParsePci+0x1b0>
          {
              //Current[Charger-1] = bytesToFloat(buf[i+2], buf[i+3], buf[i+4], buf[i+5]);
              float CurrentArr[3];
              if(bytesArrToFloatArr(&buf[i+2], 12, Current[Charger-1],3))
 80a04ea:	210c      	movs	r1, #12
 80a04ec:	f105 3aff 	add.w	sl, r5, #4294967295
 80a04f0:	fb01 fb0a 	mul.w	fp, r1, sl
 80a04f4:	4b89      	ldr	r3, [pc, #548]	; (80a071c <_Z11stringParsePci+0x30c>)
 80a04f6:	4620      	mov	r0, r4
 80a04f8:	eb03 090b 	add.w	r9, r3, fp
 80a04fc:	464a      	mov	r2, r9
 80a04fe:	2303      	movs	r3, #3
 80a0500:	f7ff ff64 	bl	80a03cc <_Z18bytesArrToFloatArrPcjPfj>
              {
                //Current[Charger-1] = (CurrentArr[0]+CurrentArr[1]+CurrentArr[2])/3;  
                //Current[Charger-1] = {CurrentArr[0],CurrentArr[1],CurrentArr[2]}
              }
              DEBUGPORT.print("Current: ");
 80a0504:	f004 f8b2 	bl	80a466c <_Z16_fetch_usbserialv>
 80a0508:	4985      	ldr	r1, [pc, #532]	; (80a0720 <_Z11stringParsePci+0x310>)
 80a050a:	f003 fc99 	bl	80a3e40 <_ZN5Print5printEPKc>
              DEBUGPORT.print(Current[Charger-1][0],4);DEBUGPORT.print(" ");
 80a050e:	f004 f8ad 	bl	80a466c <_Z16_fetch_usbserialv>
 80a0512:	4b82      	ldr	r3, [pc, #520]	; (80a071c <_Z11stringParsePci+0x30c>)
 80a0514:	2204      	movs	r2, #4
 80a0516:	f853 100b 	ldr.w	r1, [r3, fp]
 80a051a:	f003 fd87 	bl	80a402c <_ZN5Print5printEfi>
 80a051e:	f004 f8a5 	bl	80a466c <_Z16_fetch_usbserialv>
 80a0522:	4980      	ldr	r1, [pc, #512]	; (80a0724 <_Z11stringParsePci+0x314>)
 80a0524:	f003 fc8c 	bl	80a3e40 <_ZN5Print5printEPKc>
              DEBUGPORT.print(Current[Charger-1][1],4);DEBUGPORT.print(" ");
 80a0528:	f004 f8a0 	bl	80a466c <_Z16_fetch_usbserialv>
 80a052c:	2204      	movs	r2, #4
 80a052e:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80a0532:	f003 fd7b 	bl	80a402c <_ZN5Print5printEfi>
 80a0536:	f004 f899 	bl	80a466c <_Z16_fetch_usbserialv>
 80a053a:	497a      	ldr	r1, [pc, #488]	; (80a0724 <_Z11stringParsePci+0x314>)
 80a053c:	f003 fc80 	bl	80a3e40 <_ZN5Print5printEPKc>
              DEBUGPORT.println(Current[Charger-1][2],4);
 80a0540:	f004 f894 	bl	80a466c <_Z16_fetch_usbserialv>
 80a0544:	2204      	movs	r2, #4
 80a0546:	f8d9 1008 	ldr.w	r1, [r9, #8]
 80a054a:	f003 fd8c 	bl	80a4066 <_ZN5Print7printlnEfi>
              if((Current[Charger-1][0]+Current[Charger-1][1]+Current[Charger-1][2])<1)
 80a054e:	4b73      	ldr	r3, [pc, #460]	; (80a071c <_Z11stringParsePci+0x30c>)
 80a0550:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80a0554:	f853 000b 	ldr.w	r0, [r3, fp]
 80a0558:	f005 fa84 	bl	80a5a64 <__addsf3>
 80a055c:	f8d9 1008 	ldr.w	r1, [r9, #8]
 80a0560:	f005 fa80 	bl	80a5a64 <__addsf3>
 80a0564:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80a0568:	f005 fd22 	bl	80a5fb0 <__aeabi_fcmplt>
 80a056c:	f8df b1dc 	ldr.w	fp, [pc, #476]	; 80a074c <_Z11stringParsePci+0x33c>
 80a0570:	b128      	cbz	r0, 80a057e <_Z11stringParsePci+0x16e>
              {
                numberOfZeroReadings[Charger-1]++;
 80a0572:	f85b 302a 	ldr.w	r3, [fp, sl, lsl #2]
 80a0576:	3301      	adds	r3, #1
 80a0578:	f84b 302a 	str.w	r3, [fp, sl, lsl #2]
 80a057c:	e001      	b.n	80a0582 <_Z11stringParsePci+0x172>
              }
              else
              {
                  numberOfZeroReadings[Charger-1]=0;
 80a057e:	f84b 002a 	str.w	r0, [fp, sl, lsl #2]
 80a0582:	4a69      	ldr	r2, [pc, #420]	; (80a0728 <_Z11stringParsePci+0x318>)
      {
        Charger=1;  
      }
      else
      {
        Charger=2;
 80a0584:	2312      	movs	r3, #18
              {
                  numberOfZeroReadings[Charger-1]=0;
              }
              for(int i=18;i>=0;i--)
              {
                   CurrentList[i+1]= CurrentList[i];
 80a0586:	f852 1d04 	ldr.w	r1, [r2, #-4]!
              }
              else
              {
                  numberOfZeroReadings[Charger-1]=0;
              }
              for(int i=18;i>=0;i--)
 80a058a:	f113 33ff 	adds.w	r3, r3, #4294967295
              {
                   CurrentList[i+1]= CurrentList[i];
 80a058e:	6051      	str	r1, [r2, #4]
              }
              else
              {
                  numberOfZeroReadings[Charger-1]=0;
              }
              for(int i=18;i>=0;i--)
 80a0590:	d2f9      	bcs.n	80a0586 <_Z11stringParsePci+0x176>
              {
                   CurrentList[i+1]= CurrentList[i];
              }
              CurrentList[0]=(Current[0][0]+Current[0][1]+Current[0][2]);//numberOfZeroReadings[0];
 80a0592:	4b62      	ldr	r3, [pc, #392]	; (80a071c <_Z11stringParsePci+0x30c>)
 80a0594:	f8df a1b8 	ldr.w	sl, [pc, #440]	; 80a0750 <_Z11stringParsePci+0x340>
 80a0598:	f8d3 9008 	ldr.w	r9, [r3, #8]
 80a059c:	6859      	ldr	r1, [r3, #4]
 80a059e:	6818      	ldr	r0, [r3, #0]
 80a05a0:	f005 fa60 	bl	80a5a64 <__addsf3>
 80a05a4:	4649      	mov	r1, r9
 80a05a6:	f005 fa5d 	bl	80a5a64 <__addsf3>
 80a05aa:	f8ca 0000 	str.w	r0, [sl]
              CurrentList[1]=numberOfZeroReadings[0];
 80a05ae:	f8db 0000 	ldr.w	r0, [fp]
 80a05b2:	f005 fb0b 	bl	80a5bcc <__aeabi_i2f>
              CurrentList[2]=Current[0][2];
 80a05b6:	f8ca 9008 	str.w	r9, [sl, #8]
              for(int i=18;i>=0;i--)
              {
                   CurrentList[i+1]= CurrentList[i];
              }
              CurrentList[0]=(Current[0][0]+Current[0][1]+Current[0][2]);//numberOfZeroReadings[0];
              CurrentList[1]=numberOfZeroReadings[0];
 80a05ba:	f8ca 0004 	str.w	r0, [sl, #4]
 80a05be:	e11e      	b.n	80a07fe <_Z11stringParsePci+0x3ee>
              CurrentList[2]=Current[0][2];
          }
          else
          {
              DEBUGPORT.print("did not receive enough current data");
 80a05c0:	f004 f854 	bl	80a466c <_Z16_fetch_usbserialv>
 80a05c4:	4959      	ldr	r1, [pc, #356]	; (80a072c <_Z11stringParsePci+0x31c>)
 80a05c6:	e09c      	b.n	80a0702 <_Z11stringParsePci+0x2f2>
          }
          break;  
        case 3:
          //Frequency
          if(buflen>4)
 80a05c8:	2e04      	cmp	r6, #4
 80a05ca:	dd1e      	ble.n	80a060a <_Z11stringParsePci+0x1fa>
          {
              Frequency[0] = bytesToFloat(buf[i+2], buf[i+3], buf[i+4], buf[i+5]);
 80a05cc:	78a2      	ldrb	r2, [r4, #2]
 80a05ce:	7861      	ldrb	r1, [r4, #1]
 80a05d0:	78e3      	ldrb	r3, [r4, #3]

float bytesToFloat(unsigned char  b0, unsigned char  b1, unsigned char  b2, unsigned char  b3)
{
    float output;

    *((unsigned char *)(&output) + 3) = b0;
 80a05d2:	7820      	ldrb	r0, [r4, #0]
    *((unsigned char *)(&output) + 2) = b1;
    *((unsigned char *)(&output) + 1) = b2;
 80a05d4:	f88d 2069 	strb.w	r2, [sp, #105]	; 0x69
float bytesToFloat(unsigned char  b0, unsigned char  b1, unsigned char  b2, unsigned char  b3)
{
    float output;

    *((unsigned char *)(&output) + 3) = b0;
    *((unsigned char *)(&output) + 2) = b1;
 80a05d8:	f88d 106a 	strb.w	r1, [sp, #106]	; 0x6a

float bytesToFloat(unsigned char  b0, unsigned char  b1, unsigned char  b2, unsigned char  b3)
{
    float output;

    *((unsigned char *)(&output) + 3) = b0;
 80a05dc:	f88d 006b 	strb.w	r0, [sp, #107]	; 0x6b
    *((unsigned char *)(&output) + 2) = b1;
    *((unsigned char *)(&output) + 1) = b2;
    *((unsigned char *)(&output) + 0) = b3;
 80a05e0:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68

    return output;
 80a05e4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
          break;  
        case 3:
          //Frequency
          if(buflen>4)
          {
              Frequency[0] = bytesToFloat(buf[i+2], buf[i+3], buf[i+4], buf[i+5]);
 80a05e6:	f8df 916c 	ldr.w	r9, [pc, #364]	; 80a0754 <_Z11stringParsePci+0x344>
 80a05ea:	f8c9 3000 	str.w	r3, [r9]
              Frequency[1]=Frequency[0];
 80a05ee:	f8c9 3004 	str.w	r3, [r9, #4]
              DEBUGPORT.print("Frequency: ");
 80a05f2:	f004 f83b 	bl	80a466c <_Z16_fetch_usbserialv>
 80a05f6:	494e      	ldr	r1, [pc, #312]	; (80a0730 <_Z11stringParsePci+0x320>)
 80a05f8:	f003 fc22 	bl	80a3e40 <_ZN5Print5printEPKc>
              DEBUGPORT.print(Frequency[Charger-1],4);
 80a05fc:	f004 f836 	bl	80a466c <_Z16_fetch_usbserialv>
 80a0600:	1e6b      	subs	r3, r5, #1
 80a0602:	2204      	movs	r2, #4
 80a0604:	f859 1023 	ldr.w	r1, [r9, r3, lsl #2]
 80a0608:	e075      	b.n	80a06f6 <_Z11stringParsePci+0x2e6>
          }
          else
          {
              DEBUGPORT.print("did not receive enough frequency data");
 80a060a:	f004 f82f 	bl	80a466c <_Z16_fetch_usbserialv>
 80a060e:	4949      	ldr	r1, [pc, #292]	; (80a0734 <_Z11stringParsePci+0x324>)
 80a0610:	e077      	b.n	80a0702 <_Z11stringParsePci+0x2f2>
          }
          break;
        case 4:
          //Power
          if(buflen>4)
 80a0612:	2e04      	cmp	r6, #4
 80a0614:	dd4c      	ble.n	80a06b0 <_Z11stringParsePci+0x2a0>
          {
              //Power[Charger-1] = bytesToFloat(buf[i+2], buf[i+3], buf[i+4], buf[i+5]);
              float PowerArr[3];
              if(bytesArrToFloatArr(&buf[i+2], 12, Power[Charger-1],3))
 80a0616:	210c      	movs	r1, #12
 80a0618:	f105 39ff 	add.w	r9, r5, #4294967295
 80a061c:	fb01 f909 	mul.w	r9, r1, r9
 80a0620:	f8df b134 	ldr.w	fp, [pc, #308]	; 80a0758 <_Z11stringParsePci+0x348>
 80a0624:	2303      	movs	r3, #3
 80a0626:	eb0b 0a09 	add.w	sl, fp, r9
 80a062a:	4652      	mov	r2, sl
 80a062c:	4620      	mov	r0, r4
 80a062e:	f7ff fecd 	bl	80a03cc <_Z18bytesArrToFloatArrPcjPfj>
              {
                //Power[Charger-1] = {PowerArr[0],PowerArr[1],PowerArr[2]}
              }
              DEBUGPORT.print("Power: "+String(Power[Charger-1][0],4)+" "+String(Power[Charger-1][1],4)+" "+String(Power[Charger-1][2],4));              
 80a0632:	f004 f81b 	bl	80a466c <_Z16_fetch_usbserialv>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a0636:	4940      	ldr	r1, [pc, #256]	; (80a0738 <_Z11stringParsePci+0x328>)
 80a0638:	9001      	str	r0, [sp, #4]
 80a063a:	a812      	add	r0, sp, #72	; 0x48
 80a063c:	f003 fa65 	bl	80a3b0a <_ZN6StringC1EPK19__FlashStringHelper>
 80a0640:	2204      	movs	r2, #4
 80a0642:	f85b 1009 	ldr.w	r1, [fp, r9]
 80a0646:	a80e      	add	r0, sp, #56	; 0x38
 80a0648:	f003 fb0e 	bl	80a3c68 <_ZN6StringC1Efi>
 80a064c:	a90e      	add	r1, sp, #56	; 0x38
 80a064e:	a812      	add	r0, sp, #72	; 0x48
 80a0650:	f003 fb5a 	bl	80a3d08 <_ZplRK15StringSumHelperRK6String>
 80a0654:	4933      	ldr	r1, [pc, #204]	; (80a0724 <_Z11stringParsePci+0x314>)
 80a0656:	f003 fb63 	bl	80a3d20 <_ZplRK15StringSumHelperPKc>
 80a065a:	4681      	mov	r9, r0
 80a065c:	2204      	movs	r2, #4
 80a065e:	f8da 1004 	ldr.w	r1, [sl, #4]
 80a0662:	a816      	add	r0, sp, #88	; 0x58
 80a0664:	f003 fb00 	bl	80a3c68 <_ZN6StringC1Efi>
 80a0668:	a916      	add	r1, sp, #88	; 0x58
 80a066a:	4648      	mov	r0, r9
 80a066c:	f003 fb4c 	bl	80a3d08 <_ZplRK15StringSumHelperRK6String>
 80a0670:	492c      	ldr	r1, [pc, #176]	; (80a0724 <_Z11stringParsePci+0x314>)
 80a0672:	f003 fb55 	bl	80a3d20 <_ZplRK15StringSumHelperPKc>
 80a0676:	4681      	mov	r9, r0
 80a0678:	2204      	movs	r2, #4
 80a067a:	f8da 1008 	ldr.w	r1, [sl, #8]
 80a067e:	a81a      	add	r0, sp, #104	; 0x68
 80a0680:	f003 faf2 	bl	80a3c68 <_ZN6StringC1Efi>
 80a0684:	a91a      	add	r1, sp, #104	; 0x68
 80a0686:	4648      	mov	r0, r9
 80a0688:	f003 fb3e 	bl	80a3d08 <_ZplRK15StringSumHelperRK6String>
 80a068c:	9b01      	ldr	r3, [sp, #4]
 80a068e:	6801      	ldr	r1, [r0, #0]
 80a0690:	4618      	mov	r0, r3
 80a0692:	f003 fbd5 	bl	80a3e40 <_ZN5Print5printEPKc>
 80a0696:	a81a      	add	r0, sp, #104	; 0x68
 80a0698:	f003 f9f0 	bl	80a3a7c <_ZN6StringD1Ev>
 80a069c:	a816      	add	r0, sp, #88	; 0x58
 80a069e:	f003 f9ed 	bl	80a3a7c <_ZN6StringD1Ev>
 80a06a2:	a80e      	add	r0, sp, #56	; 0x38
 80a06a4:	f003 f9ea 	bl	80a3a7c <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80a06a8:	a812      	add	r0, sp, #72	; 0x48
 80a06aa:	f003 f9e7 	bl	80a3a7c <_ZN6StringD1Ev>
 80a06ae:	e0a6      	b.n	80a07fe <_Z11stringParsePci+0x3ee>
              //DEBUGPORT.print("Power: ");
              //DEBUGPORT.print(Power[Charger-1],4);
          }
          else
          {
              DEBUGPORT.print("did not receive enough power data");
 80a06b0:	f003 ffdc 	bl	80a466c <_Z16_fetch_usbserialv>
 80a06b4:	4921      	ldr	r1, [pc, #132]	; (80a073c <_Z11stringParsePci+0x32c>)
 80a06b6:	e024      	b.n	80a0702 <_Z11stringParsePci+0x2f2>
          }
          break;
        case 5:
          //Energy
          if(buflen>4)
 80a06b8:	2e04      	cmp	r6, #4
 80a06ba:	dd1f      	ble.n	80a06fc <_Z11stringParsePci+0x2ec>
          {
              Energy[Charger-1] = bytesToFloat(buf[i+2], buf[i+3], buf[i+4], buf[i+5]);
 80a06bc:	78a2      	ldrb	r2, [r4, #2]
 80a06be:	7861      	ldrb	r1, [r4, #1]
 80a06c0:	78e3      	ldrb	r3, [r4, #3]

float bytesToFloat(unsigned char  b0, unsigned char  b1, unsigned char  b2, unsigned char  b3)
{
    float output;

    *((unsigned char *)(&output) + 3) = b0;
 80a06c2:	7820      	ldrb	r0, [r4, #0]
    *((unsigned char *)(&output) + 2) = b1;
    *((unsigned char *)(&output) + 1) = b2;
 80a06c4:	f88d 2069 	strb.w	r2, [sp, #105]	; 0x69
float bytesToFloat(unsigned char  b0, unsigned char  b1, unsigned char  b2, unsigned char  b3)
{
    float output;

    *((unsigned char *)(&output) + 3) = b0;
    *((unsigned char *)(&output) + 2) = b1;
 80a06c8:	f88d 106a 	strb.w	r1, [sp, #106]	; 0x6a

float bytesToFloat(unsigned char  b0, unsigned char  b1, unsigned char  b2, unsigned char  b3)
{
    float output;

    *((unsigned char *)(&output) + 3) = b0;
 80a06cc:	f88d 006b 	strb.w	r0, [sp, #107]	; 0x6b
    *((unsigned char *)(&output) + 2) = b1;
    *((unsigned char *)(&output) + 1) = b2;
    *((unsigned char *)(&output) + 0) = b3;
 80a06d0:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
          break;
        case 5:
          //Energy
          if(buflen>4)
          {
              Energy[Charger-1] = bytesToFloat(buf[i+2], buf[i+3], buf[i+4], buf[i+5]);
 80a06d4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80a06d6:	f8df 9084 	ldr.w	r9, [pc, #132]	; 80a075c <_Z11stringParsePci+0x34c>
 80a06da:	f105 3aff 	add.w	sl, r5, #4294967295
 80a06de:	f849 302a 	str.w	r3, [r9, sl, lsl #2]
              DEBUGPORT.print("Energy: ");
 80a06e2:	f003 ffc3 	bl	80a466c <_Z16_fetch_usbserialv>
 80a06e6:	4916      	ldr	r1, [pc, #88]	; (80a0740 <_Z11stringParsePci+0x330>)
 80a06e8:	f003 fbaa 	bl	80a3e40 <_ZN5Print5printEPKc>
              DEBUGPORT.print(Energy[Charger-1],4);
 80a06ec:	f003 ffbe 	bl	80a466c <_Z16_fetch_usbserialv>
 80a06f0:	f859 102a 	ldr.w	r1, [r9, sl, lsl #2]
 80a06f4:	2204      	movs	r2, #4
 80a06f6:	f003 fc99 	bl	80a402c <_ZN5Print5printEfi>
 80a06fa:	e080      	b.n	80a07fe <_Z11stringParsePci+0x3ee>
          }
          else
          {
              DEBUGPORT.print("did not receive enough energy data");
 80a06fc:	f003 ffb6 	bl	80a466c <_Z16_fetch_usbserialv>
 80a0700:	4910      	ldr	r1, [pc, #64]	; (80a0744 <_Z11stringParsePci+0x334>)
 80a0702:	f003 fb9d 	bl	80a3e40 <_ZN5Print5printEPKc>
 80a0706:	e07a      	b.n	80a07fe <_Z11stringParsePci+0x3ee>
 80a0708:	080a997b 	.word	0x080a997b
 80a070c:	080aa006 	.word	0x080aa006
 80a0710:	080a9517 	.word	0x080a9517
 80a0714:	080a9b85 	.word	0x080a9b85
 80a0718:	080a952a 	.word	0x080a952a
 80a071c:	20000364 	.word	0x20000364
 80a0720:	080a954e 	.word	0x080a954e
 80a0724:	080a997d 	.word	0x080a997d
 80a0728:	200004fc 	.word	0x200004fc
 80a072c:	080a9558 	.word	0x080a9558
 80a0730:	080a957c 	.word	0x080a957c
 80a0734:	080a9588 	.word	0x080a9588
 80a0738:	080a95ae 	.word	0x080a95ae
 80a073c:	080a95b6 	.word	0x080a95b6
 80a0740:	080a95d8 	.word	0x080a95d8
 80a0744:	080a95e1 	.word	0x080a95e1
 80a0748:	20000284 	.word	0x20000284
 80a074c:	20000110 	.word	0x20000110
 80a0750:	200004b0 	.word	0x200004b0
 80a0754:	200002ac 	.word	0x200002ac
 80a0758:	2000037c 	.word	0x2000037c
 80a075c:	20000470 	.word	0x20000470
          }
          break;
        case 6:
          //Line Voltage
          if(buflen>4)
 80a0760:	2e04      	cmp	r6, #4
 80a0762:	f77f aebc 	ble.w	80a04de <_Z11stringParsePci+0xce>
          {
              //Voltage[Charger-1] = bytesToFloat(buf[i+2], buf[i+3], buf[i+4], buf[i+5]);
              float VoltageArr[3];
              if(bytesArrToFloatArr(&buf[i+2], 12, VoltageArr,3))
 80a0766:	2303      	movs	r3, #3
 80a0768:	aa03      	add	r2, sp, #12
 80a076a:	210c      	movs	r1, #12
 80a076c:	4620      	mov	r0, r4
 80a076e:	f7ff fe2d 	bl	80a03cc <_Z18bytesArrToFloatArrPcjPfj>
 80a0772:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 80a0820 <_Z11stringParsePci+0x410>
 80a0776:	2800      	cmp	r0, #0
 80a0778:	d134      	bne.n	80a07e4 <_Z11stringParsePci+0x3d4>
                {
                    LineVoltage[Charger-1][i]=VoltageArr[i];
                }
                //Voltage[Charger-1] = {VoltageArr[0],VoltageArr[1],VoltageArr[2]};
              }
              DEBUGPORT.print("Voltage: "+String(LineVoltage[Charger-1][0],4)+" "+String(LineVoltage[Charger-1][1],4)+" "+String(LineVoltage[Charger-1][2],4));
 80a077a:	f003 ff77 	bl	80a466c <_Z16_fetch_usbserialv>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a077e:	4926      	ldr	r1, [pc, #152]	; (80a0818 <_Z11stringParsePci+0x408>)
 80a0780:	4683      	mov	fp, r0
 80a0782:	a812      	add	r0, sp, #72	; 0x48
 80a0784:	f003 f9c1 	bl	80a3b0a <_ZN6StringC1EPK19__FlashStringHelper>
 80a0788:	1e6a      	subs	r2, r5, #1
 80a078a:	230c      	movs	r3, #12
 80a078c:	4353      	muls	r3, r2
 80a078e:	a80e      	add	r0, sp, #56	; 0x38
 80a0790:	f859 1003 	ldr.w	r1, [r9, r3]
 80a0794:	2204      	movs	r2, #4
 80a0796:	eb09 0a03 	add.w	sl, r9, r3
 80a079a:	f003 fa65 	bl	80a3c68 <_ZN6StringC1Efi>
 80a079e:	a90e      	add	r1, sp, #56	; 0x38
 80a07a0:	a812      	add	r0, sp, #72	; 0x48
 80a07a2:	f003 fab1 	bl	80a3d08 <_ZplRK15StringSumHelperRK6String>
 80a07a6:	491d      	ldr	r1, [pc, #116]	; (80a081c <_Z11stringParsePci+0x40c>)
 80a07a8:	f003 faba 	bl	80a3d20 <_ZplRK15StringSumHelperPKc>
 80a07ac:	4681      	mov	r9, r0
 80a07ae:	2204      	movs	r2, #4
 80a07b0:	f8da 1004 	ldr.w	r1, [sl, #4]
 80a07b4:	a816      	add	r0, sp, #88	; 0x58
 80a07b6:	f003 fa57 	bl	80a3c68 <_ZN6StringC1Efi>
 80a07ba:	a916      	add	r1, sp, #88	; 0x58
 80a07bc:	4648      	mov	r0, r9
 80a07be:	f003 faa3 	bl	80a3d08 <_ZplRK15StringSumHelperRK6String>
 80a07c2:	4916      	ldr	r1, [pc, #88]	; (80a081c <_Z11stringParsePci+0x40c>)
 80a07c4:	f003 faac 	bl	80a3d20 <_ZplRK15StringSumHelperPKc>
 80a07c8:	4681      	mov	r9, r0
 80a07ca:	2204      	movs	r2, #4
 80a07cc:	f8da 1008 	ldr.w	r1, [sl, #8]
 80a07d0:	a81a      	add	r0, sp, #104	; 0x68
 80a07d2:	f003 fa49 	bl	80a3c68 <_ZN6StringC1Efi>
 80a07d6:	a91a      	add	r1, sp, #104	; 0x68
 80a07d8:	4648      	mov	r0, r9
 80a07da:	f003 fa95 	bl	80a3d08 <_ZplRK15StringSumHelperRK6String>
 80a07de:	6801      	ldr	r1, [r0, #0]
 80a07e0:	4658      	mov	r0, fp
 80a07e2:	e756      	b.n	80a0692 <_Z11stringParsePci+0x282>
              if(bytesArrToFloatArr(&buf[i+2], 12, VoltageArr,3))
              {
                //Current[Charger-1] = (CurrentArr[0]+CurrentArr[1]+CurrentArr[2])/3;  
                for(int i=0;i<3;i++)
                {
                    LineVoltage[Charger-1][i]=VoltageArr[i];
 80a07e4:	1e6a      	subs	r2, r5, #1
 80a07e6:	230c      	movs	r3, #12
 80a07e8:	4353      	muls	r3, r2
 80a07ea:	9903      	ldr	r1, [sp, #12]
 80a07ec:	eb09 0203 	add.w	r2, r9, r3
 80a07f0:	f849 1003 	str.w	r1, [r9, r3]
 80a07f4:	9b04      	ldr	r3, [sp, #16]
 80a07f6:	6053      	str	r3, [r2, #4]
 80a07f8:	9b05      	ldr	r3, [sp, #20]
 80a07fa:	6093      	str	r3, [r2, #8]
 80a07fc:	e7bd      	b.n	80a077a <_Z11stringParsePci+0x36a>
      else
      {
        Charger=2;
      }
      DEBUGPORT.print("Charger "+String(Charger)+": ");
      String measurements;
 80a07fe:	a80a      	add	r0, sp, #40	; 0x28
 80a0800:	f003 f93c 	bl	80a3a7c <_ZN6StringD1Ev>
 80a0804:	3401      	adds	r4, #1
}
*/
int stringParse(char * buf, int buflen){
  String cmdValue;
  int Charger=0;
  for (int i=0; i<buflen; i++){
 80a0806:	e610      	b.n	80a042a <_Z11stringParsePci+0x1a>

    return TriOutput;
}
*/
int stringParse(char * buf, int buflen){
  String cmdValue;
 80a0808:	a806      	add	r0, sp, #24
 80a080a:	f003 f937 	bl	80a3a7c <_ZN6StringD1Ev>
  }
  //Test only
  //Current[0][0] = 3.0;
  //Current[1][0] = 4.0;
  return Charger;
}
 80a080e:	4628      	mov	r0, r5
 80a0810:	b01f      	add	sp, #124	; 0x7c
 80a0812:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a0816:	bf00      	nop
 80a0818:	080a9520 	.word	0x080a9520
 80a081c:	080a997d 	.word	0x080a997d
 80a0820:	2000034c 	.word	0x2000034c

080a0824 <_Z16readSerialOlimexv>:


int readSerialOlimex() {
 80a0824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  for(int k=0;k<10;k++){
  if (Serial1.available()) {
    input = Serial1.read();
    DEBUGPORT.print(input,HEX);
    DEBUGPORT.print(" ");
    if (bufpos<BUFSIZE)
 80a0828:	4c20      	ldr	r4, [pc, #128]	; (80a08ac <_Z16readSerialOlimexv+0x88>)

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a082a:	f002 fb1f 	bl	80a2e6c <HAL_Timer_Get_Milli_Seconds>
 80a082e:	4627      	mov	r7, r4
 80a0830:	250a      	movs	r5, #10
     char input;
  if (millis()>(lastUpload+RSTTIMEOUT)){
   // softReset();
  }
  for(int k=0;k<10;k++){
  if (Serial1.available()) {
 80a0832:	f003 ffd1 	bl	80a47d8 <_Z22__fetch_global_Serial1v>
 80a0836:	6803      	ldr	r3, [r0, #0]
 80a0838:	691b      	ldr	r3, [r3, #16]
 80a083a:	4798      	blx	r3
 80a083c:	b388      	cbz	r0, 80a08a2 <_Z16readSerialOlimexv+0x7e>
    input = Serial1.read();
 80a083e:	f003 ffcb 	bl	80a47d8 <_Z22__fetch_global_Serial1v>
 80a0842:	6803      	ldr	r3, [r0, #0]
 80a0844:	695b      	ldr	r3, [r3, #20]
 80a0846:	4798      	blx	r3
 80a0848:	b2c6      	uxtb	r6, r0
    DEBUGPORT.print(input,HEX);
 80a084a:	f003 ff0f 	bl	80a466c <_Z16_fetch_usbserialv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
 80a084e:	2210      	movs	r2, #16
 80a0850:	4631      	mov	r1, r6
 80a0852:	f003 fb12 	bl	80a3e7a <_ZN5Print11printNumberEmh>
    DEBUGPORT.print(" ");
 80a0856:	f003 ff09 	bl	80a466c <_Z16_fetch_usbserialv>
 80a085a:	4915      	ldr	r1, [pc, #84]	; (80a08b0 <_Z16readSerialOlimexv+0x8c>)
 80a085c:	f003 faf0 	bl	80a3e40 <_ZN5Print5printEPKc>
    if (bufpos<BUFSIZE)
 80a0860:	6823      	ldr	r3, [r4, #0]
 80a0862:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 80a0866:	da04      	bge.n	80a0872 <_Z16readSerialOlimexv+0x4e>
    {
        buff[bufpos] = input;
 80a0868:	4a12      	ldr	r2, [pc, #72]	; (80a08b4 <_Z16readSerialOlimexv+0x90>)
 80a086a:	54d6      	strb	r6, [r2, r3]
        bufpos++;    
 80a086c:	3301      	adds	r3, #1
 80a086e:	6023      	str	r3, [r4, #0]
 80a0870:	e006      	b.n	80a0880 <_Z16readSerialOlimexv+0x5c>
    }
    else
    {
        bufpos=0;
 80a0872:	2300      	movs	r3, #0
 80a0874:	6023      	str	r3, [r4, #0]
        DEBUGPORT.print("loopread>\tSerial Read Error!");
 80a0876:	f003 fef9 	bl	80a466c <_Z16_fetch_usbserialv>
 80a087a:	490f      	ldr	r1, [pc, #60]	; (80a08b8 <_Z16readSerialOlimexv+0x94>)
 80a087c:	f003 fae0 	bl	80a3e40 <_ZN5Print5printEPKc>
    }
    if (input == '\n') { // we hebben een regel binnen, tot aan \n   //  0x0A
 80a0880:	2e0a      	cmp	r6, #10
 80a0882:	d10e      	bne.n	80a08a2 <_Z16readSerialOlimexv+0x7e>
      Charger = stringParse(buff, bufpos);
 80a0884:	6839      	ldr	r1, [r7, #0]
 80a0886:	480b      	ldr	r0, [pc, #44]	; (80a08b4 <_Z16readSerialOlimexv+0x90>)
 80a0888:	f7ff fdc2 	bl	80a0410 <_Z11stringParsePci>
      //Maak de buffer leeg
      for (int i=0; i<BUFSIZE; i++)
 80a088c:	2300      	movs	r3, #0
    {
        bufpos=0;
        DEBUGPORT.print("loopread>\tSerial Read Error!");
    }
    if (input == '\n') { // we hebben een regel binnen, tot aan \n   //  0x0A
      Charger = stringParse(buff, bufpos);
 80a088e:	4680      	mov	r8, r0
      //Maak de buffer leeg
      for (int i=0; i<BUFSIZE; i++)
      { buff[i] = 0;}
 80a0890:	4619      	mov	r1, r3
 80a0892:	4a08      	ldr	r2, [pc, #32]	; (80a08b4 <_Z16readSerialOlimexv+0x90>)
 80a0894:	5499      	strb	r1, [r3, r2]
        DEBUGPORT.print("loopread>\tSerial Read Error!");
    }
    if (input == '\n') { // we hebben een regel binnen, tot aan \n   //  0x0A
      Charger = stringParse(buff, bufpos);
      //Maak de buffer leeg
      for (int i=0; i<BUFSIZE; i++)
 80a0896:	3301      	adds	r3, #1
 80a0898:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 80a089c:	d1fa      	bne.n	80a0894 <_Z16readSerialOlimexv+0x70>
      { buff[i] = 0;}
      bufpos = 0;
 80a089e:	2300      	movs	r3, #0
 80a08a0:	603b      	str	r3, [r7, #0]
    int Charger;
     char input;
  if (millis()>(lastUpload+RSTTIMEOUT)){
   // softReset();
  }
  for(int k=0;k<10;k++){
 80a08a2:	3d01      	subs	r5, #1
 80a08a4:	d1c5      	bne.n	80a0832 <_Z16readSerialOlimexv+0xe>
      bufpos = 0;
    }
  }
}
return Charger;
 80a08a6:	4640      	mov	r0, r8
 80a08a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a08ac:	200004ac 	.word	0x200004ac
 80a08b0:	080a997d 	.word	0x080a997d
 80a08b4:	20000118 	.word	0x20000118
 80a08b8:	080a9604 	.word	0x080a9604

080a08bc <_Z12charToStringPKcR6String>:
//EMeter EMeterData;
String EVListStr="";
String currentStr="";
unsigned int nextTime[2] = {30000,30000};    // Next time to contact the server

void charToString(const char in[], String &out) {
 80a08bc:	b570      	push	{r4, r5, r6, lr}
 80a08be:	460e      	mov	r6, r1
 80a08c0:	4604      	mov	r4, r0
    byte index = 0;
    const char *pointer = in;
    out = "";
 80a08c2:	4908      	ldr	r1, [pc, #32]	; (80a08e4 <_Z12charToStringPKcR6String+0x28>)
 80a08c4:	4630      	mov	r0, r6
 80a08c6:	f003 f972 	bl	80a3bae <_ZN6StringaSEPKc>
String currentStr="";
unsigned int nextTime[2] = {30000,30000};    // Next time to contact the server

void charToString(const char in[], String &out) {
    byte index = 0;
    const char *pointer = in;
 80a08ca:	4625      	mov	r5, r4
 80a08cc:	1b2b      	subs	r3, r5, r4
    out = "";

    while (*pointer++) {
 80a08ce:	f815 2b01 	ldrb.w	r2, [r5], #1
 80a08d2:	b2db      	uxtb	r3, r3
 80a08d4:	b122      	cbz	r2, 80a08e0 <_Z12charToStringPKcR6String+0x24>
      out.concat(in[index++]);
 80a08d6:	5ce1      	ldrb	r1, [r4, r3]
 80a08d8:	4630      	mov	r0, r6
 80a08da:	f003 f9f7 	bl	80a3ccc <_ZN6String6concatEc>
void charToString(const char in[], String &out) {
    byte index = 0;
    const char *pointer = in;
    out = "";

    while (*pointer++) {
 80a08de:	e7f5      	b.n	80a08cc <_Z12charToStringPKcR6String+0x10>
 80a08e0:	bd70      	pop	{r4, r5, r6, pc}
 80a08e2:	bf00      	nop
 80a08e4:	080a997b 	.word	0x080a997b

080a08e8 <_Z13activeChargerv>:
    delay(100);
    digitalWrite(D7,LOW);
    return;
}

int activeCharger() {
 80a08e8:	b570      	push	{r4, r5, r6, lr}
    int number = 0;
    for (int i=0; i<3; i++) {
        if (Current[0][i] != 0.0) {
 80a08ea:	4d13      	ldr	r5, [pc, #76]	; (80a0938 <_Z13activeChargerv+0x50>)
 80a08ec:	2100      	movs	r1, #0
 80a08ee:	6828      	ldr	r0, [r5, #0]
 80a08f0:	f005 fb54 	bl	80a5f9c <__aeabi_fcmpeq>
 80a08f4:	b160      	cbz	r0, 80a0910 <_Z13activeChargerv+0x28>
 80a08f6:	2100      	movs	r1, #0
 80a08f8:	6868      	ldr	r0, [r5, #4]
 80a08fa:	f005 fb4f 	bl	80a5f9c <__aeabi_fcmpeq>
 80a08fe:	b138      	cbz	r0, 80a0910 <_Z13activeChargerv+0x28>
    digitalWrite(D7,LOW);
    return;
}

int activeCharger() {
    int number = 0;
 80a0900:	2100      	movs	r1, #0
 80a0902:	68a8      	ldr	r0, [r5, #8]
 80a0904:	f005 fb4a 	bl	80a5f9c <__aeabi_fcmpeq>
 80a0908:	fab0 f480 	clz	r4, r0
 80a090c:	0964      	lsrs	r4, r4, #5
 80a090e:	e000      	b.n	80a0912 <_Z13activeChargerv+0x2a>
    for (int i=0; i<3; i++) {
        if (Current[0][i] != 0.0) {
            number += 1;
 80a0910:	2401      	movs	r4, #1
            break;
        }
    }
    
    for (int i=0; i<3; i++) {
        if (Current[1][i] != 0.0) {
 80a0912:	2100      	movs	r1, #0
 80a0914:	68e8      	ldr	r0, [r5, #12]
 80a0916:	4e08      	ldr	r6, [pc, #32]	; (80a0938 <_Z13activeChargerv+0x50>)
 80a0918:	f005 fb40 	bl	80a5f9c <__aeabi_fcmpeq>
 80a091c:	b148      	cbz	r0, 80a0932 <_Z13activeChargerv+0x4a>
 80a091e:	2100      	movs	r1, #0
 80a0920:	6930      	ldr	r0, [r6, #16]
 80a0922:	f005 fb3b 	bl	80a5f9c <__aeabi_fcmpeq>
 80a0926:	b120      	cbz	r0, 80a0932 <_Z13activeChargerv+0x4a>
 80a0928:	2100      	movs	r1, #0
 80a092a:	6970      	ldr	r0, [r6, #20]
 80a092c:	f005 fb36 	bl	80a5f9c <__aeabi_fcmpeq>
 80a0930:	b900      	cbnz	r0, 80a0934 <_Z13activeChargerv+0x4c>
            number += 2;
 80a0932:	3402      	adds	r4, #2
            break;
        }
    }
    
    return number;
}
 80a0934:	4620      	mov	r0, r4
 80a0936:	bd70      	pop	{r4, r5, r6, pc}
 80a0938:	20000364 	.word	0x20000364

080a093c <_Z17maxCurrentC1_testi>:
        return 0;
    }
    return 1;
}

int maxCurrentC1_test(int setPoint) {
 80a093c:	b530      	push	{r4, r5, lr}
 80a093e:	4604      	mov	r4, r0
 80a0940:	b08b      	sub	sp, #44	; 0x2c
    byte olimexMessage[4] = {0xFE,1,setPoint,0xFF};
 80a0942:	23fe      	movs	r3, #254	; 0xfe
 80a0944:	f88d 3004 	strb.w	r3, [sp, #4]
 80a0948:	23ff      	movs	r3, #255	; 0xff
 80a094a:	f88d 3007 	strb.w	r3, [sp, #7]
    if (TESTCASE) {
 80a094e:	4b18      	ldr	r3, [pc, #96]	; (80a09b0 <_Z17maxCurrentC1_testi+0x74>)
    }
    return 1;
}

int maxCurrentC1_test(int setPoint) {
    byte olimexMessage[4] = {0xFE,1,setPoint,0xFF};
 80a0950:	2001      	movs	r0, #1
    if (TESTCASE) {
 80a0952:	781b      	ldrb	r3, [r3, #0]
    }
    return 1;
}

int maxCurrentC1_test(int setPoint) {
    byte olimexMessage[4] = {0xFE,1,setPoint,0xFF};
 80a0954:	f88d 0005 	strb.w	r0, [sp, #5]
 80a0958:	f88d 4006 	strb.w	r4, [sp, #6]
    if (TESTCASE) {
 80a095c:	b32b      	cbz	r3, 80a09aa <_Z17maxCurrentC1_testi+0x6e>
        Serial1.write(olimexMessage,4);
 80a095e:	f003 ff3b 	bl	80a47d8 <_Z22__fetch_global_Serial1v>
 80a0962:	6803      	ldr	r3, [r0, #0]
 80a0964:	2204      	movs	r2, #4
 80a0966:	68db      	ldr	r3, [r3, #12]
 80a0968:	eb0d 0102 	add.w	r1, sp, r2
 80a096c:	4798      	blx	r3
        DEBUGPORT.println("maxCurrentC1>\tNew setpoint set at "+String(setPoint)+" Amps.");
 80a096e:	f003 fe7d 	bl	80a466c <_Z16_fetch_usbserialv>
 80a0972:	4910      	ldr	r1, [pc, #64]	; (80a09b4 <_Z17maxCurrentC1_testi+0x78>)
 80a0974:	4605      	mov	r5, r0
 80a0976:	a806      	add	r0, sp, #24
 80a0978:	f003 f8c7 	bl	80a3b0a <_ZN6StringC1EPK19__FlashStringHelper>
 80a097c:	220a      	movs	r2, #10
 80a097e:	4621      	mov	r1, r4
 80a0980:	a802      	add	r0, sp, #8
 80a0982:	f003 f937 	bl	80a3bf4 <_ZN6StringC1Eih>
 80a0986:	a902      	add	r1, sp, #8
 80a0988:	a806      	add	r0, sp, #24
 80a098a:	f003 f9bd 	bl	80a3d08 <_ZplRK15StringSumHelperRK6String>
 80a098e:	490a      	ldr	r1, [pc, #40]	; (80a09b8 <_Z17maxCurrentC1_testi+0x7c>)
 80a0990:	f003 f9c6 	bl	80a3d20 <_ZplRK15StringSumHelperPKc>
 80a0994:	6801      	ldr	r1, [r0, #0]
 80a0996:	4628      	mov	r0, r5
 80a0998:	f003 fa65 	bl	80a3e66 <_ZN5Print7printlnEPKc>
 80a099c:	a802      	add	r0, sp, #8
 80a099e:	f003 f86d 	bl	80a3a7c <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80a09a2:	a806      	add	r0, sp, #24
 80a09a4:	f003 f86a 	bl	80a3a7c <_ZN6StringD1Ev>
        return 0;
 80a09a8:	2000      	movs	r0, #0
    }
    return 1;
}
 80a09aa:	b00b      	add	sp, #44	; 0x2c
 80a09ac:	bd30      	pop	{r4, r5, pc}
 80a09ae:	bf00      	nop
 80a09b0:	20000478 	.word	0x20000478
 80a09b4:	080a94a3 	.word	0x080a94a3
 80a09b8:	080a94c6 	.word	0x080a94c6

080a09bc <_Z17maxCurrentC2_testi>:

int maxCurrentC2_test(int setPoint) {
 80a09bc:	b530      	push	{r4, r5, lr}
    byte olimexMessage[4] = {0xFE,2,setPoint,0xFF};
 80a09be:	23fe      	movs	r3, #254	; 0xfe
        return 0;
    }
    return 1;
}

int maxCurrentC2_test(int setPoint) {
 80a09c0:	b08b      	sub	sp, #44	; 0x2c
    byte olimexMessage[4] = {0xFE,2,setPoint,0xFF};
 80a09c2:	f88d 3004 	strb.w	r3, [sp, #4]
 80a09c6:	2302      	movs	r3, #2
 80a09c8:	f88d 3005 	strb.w	r3, [sp, #5]
 80a09cc:	23ff      	movs	r3, #255	; 0xff
 80a09ce:	f88d 3007 	strb.w	r3, [sp, #7]
    if (TESTCASE) {
 80a09d2:	4b18      	ldr	r3, [pc, #96]	; (80a0a34 <_Z17maxCurrentC2_testi+0x78>)
        return 0;
    }
    return 1;
}

int maxCurrentC2_test(int setPoint) {
 80a09d4:	4604      	mov	r4, r0
    byte olimexMessage[4] = {0xFE,2,setPoint,0xFF};
    if (TESTCASE) {
 80a09d6:	781b      	ldrb	r3, [r3, #0]
    }
    return 1;
}

int maxCurrentC2_test(int setPoint) {
    byte olimexMessage[4] = {0xFE,2,setPoint,0xFF};
 80a09d8:	f88d 0006 	strb.w	r0, [sp, #6]
    if (TESTCASE) {
 80a09dc:	b333      	cbz	r3, 80a0a2c <_Z17maxCurrentC2_testi+0x70>
        Serial1.write(olimexMessage,4);
 80a09de:	f003 fefb 	bl	80a47d8 <_Z22__fetch_global_Serial1v>
 80a09e2:	6803      	ldr	r3, [r0, #0]
 80a09e4:	2204      	movs	r2, #4
 80a09e6:	68db      	ldr	r3, [r3, #12]
 80a09e8:	eb0d 0102 	add.w	r1, sp, r2
 80a09ec:	4798      	blx	r3
        DEBUGPORT.println("maxCurrentC1>\tNew setpoint set at "+String(setPoint)+" Amps.");
 80a09ee:	f003 fe3d 	bl	80a466c <_Z16_fetch_usbserialv>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a09f2:	4911      	ldr	r1, [pc, #68]	; (80a0a38 <_Z17maxCurrentC2_testi+0x7c>)
 80a09f4:	4605      	mov	r5, r0
 80a09f6:	a806      	add	r0, sp, #24
 80a09f8:	f003 f887 	bl	80a3b0a <_ZN6StringC1EPK19__FlashStringHelper>
 80a09fc:	220a      	movs	r2, #10
 80a09fe:	4621      	mov	r1, r4
 80a0a00:	a802      	add	r0, sp, #8
 80a0a02:	f003 f8f7 	bl	80a3bf4 <_ZN6StringC1Eih>
 80a0a06:	a902      	add	r1, sp, #8
 80a0a08:	a806      	add	r0, sp, #24
 80a0a0a:	f003 f97d 	bl	80a3d08 <_ZplRK15StringSumHelperRK6String>
 80a0a0e:	490b      	ldr	r1, [pc, #44]	; (80a0a3c <_Z17maxCurrentC2_testi+0x80>)
 80a0a10:	f003 f986 	bl	80a3d20 <_ZplRK15StringSumHelperPKc>
 80a0a14:	6801      	ldr	r1, [r0, #0]
 80a0a16:	4628      	mov	r0, r5
 80a0a18:	f003 fa25 	bl	80a3e66 <_ZN5Print7printlnEPKc>
 80a0a1c:	a802      	add	r0, sp, #8
 80a0a1e:	f003 f82d 	bl	80a3a7c <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80a0a22:	a806      	add	r0, sp, #24
 80a0a24:	f003 f82a 	bl	80a3a7c <_ZN6StringD1Ev>
        return 0;
 80a0a28:	2000      	movs	r0, #0
 80a0a2a:	e000      	b.n	80a0a2e <_Z17maxCurrentC2_testi+0x72>
    }
    return 1;
 80a0a2c:	2001      	movs	r0, #1
}
 80a0a2e:	b00b      	add	sp, #44	; 0x2c
 80a0a30:	bd30      	pop	{r4, r5, pc}
 80a0a32:	bf00      	nop
 80a0a34:	20000478 	.word	0x20000478
 80a0a38:	080a94a3 	.word	0x080a94a3
 80a0a3c:	080a94c6 	.word	0x080a94c6

080a0a40 <_Z17getUserIdAtSocketi>:
    delay(10000);
    return 1;
}*/

String getUserIdAtSocket(int socket) {
    if (socket == 1+CHARGEROFFSET)
 80a0a40:	2901      	cmp	r1, #1
    //digitalWrite(D7,LOW);
    delay(10000);
    return 1;
}*/

String getUserIdAtSocket(int socket) {
 80a0a42:	b510      	push	{r4, lr}
 80a0a44:	4604      	mov	r4, r0
    if (socket == 1+CHARGEROFFSET)
 80a0a46:	d101      	bne.n	80a0a4c <_Z17getUserIdAtSocketi+0xc>
        return UIDtagCharger1;
 80a0a48:	4906      	ldr	r1, [pc, #24]	; (80a0a64 <_Z17getUserIdAtSocketi+0x24>)
 80a0a4a:	e002      	b.n	80a0a52 <_Z17getUserIdAtSocketi+0x12>
    if (socket == 2+CHARGEROFFSET)
 80a0a4c:	2902      	cmp	r1, #2
 80a0a4e:	d103      	bne.n	80a0a58 <_Z17getUserIdAtSocketi+0x18>
        return UIDtagCharger2;
 80a0a50:	4905      	ldr	r1, [pc, #20]	; (80a0a68 <_Z17getUserIdAtSocketi+0x28>)
 80a0a52:	f003 f899 	bl	80a3b88 <_ZN6StringC1ERKS_>
 80a0a56:	e002      	b.n	80a0a5e <_Z17getUserIdAtSocketi+0x1e>
    return "00";
 80a0a58:	4904      	ldr	r1, [pc, #16]	; (80a0a6c <_Z17getUserIdAtSocketi+0x2c>)
 80a0a5a:	f003 f856 	bl	80a3b0a <_ZN6StringC1EPK19__FlashStringHelper>
}
 80a0a5e:	4620      	mov	r0, r4
 80a0a60:	bd10      	pop	{r4, pc}
 80a0a62:	bf00      	nop
 80a0a64:	2000031c 	.word	0x2000031c
 80a0a68:	2000032c 	.word	0x2000032c
 80a0a6c:	080a9621 	.word	0x080a9621

080a0a70 <_Z19getMeasure_callbackPhj>:
        maxCurrentC2_test((int)((EMeterData[2].PhaseCurrent[0]+EMeterData[2].PhaseCurrent[1]+EMeterData[2].PhaseCurrent[2])/2)); //Emeter3, I1
    }
}
*/

void getMeasure_callback(byte* payload, unsigned int length) {
 80a0a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0a74:	460d      	mov	r5, r1
 80a0a76:	4604      	mov	r4, r0
 80a0a78:	b089      	sub	sp, #36	; 0x24
 80a0a7a:	af00      	add	r7, sp, #0
    String data;
 80a0a7c:	4989      	ldr	r1, [pc, #548]	; (80a0ca4 <_Z19getMeasure_callbackPhj+0x234>)
 80a0a7e:	4638      	mov	r0, r7
 80a0a80:	f003 f843 	bl	80a3b0a <_ZN6StringC1EPK19__FlashStringHelper>
    unsigned int from = 0;
    unsigned int to = 0;
    
    char p[length + 1];
 80a0a84:	f105 0308 	add.w	r3, r5, #8
 80a0a88:	f023 0307 	bic.w	r3, r3, #7
 80a0a8c:	ebad 0d03 	sub.w	sp, sp, r3
    memcpy(p, payload, length);
 80a0a90:	4621      	mov	r1, r4
 80a0a92:	462a      	mov	r2, r5
 80a0a94:	4668      	mov	r0, sp
 80a0a96:	f005 fddb 	bl	80a6650 <memcpy>
    
    p[length] = NULL;
 80a0a9a:	2400      	movs	r4, #0
    charToString(p, data);
 80a0a9c:	4639      	mov	r1, r7
 80a0a9e:	4668      	mov	r0, sp
    unsigned int to = 0;
    
    char p[length + 1];
    memcpy(p, payload, length);
    
    p[length] = NULL;
 80a0aa0:	f80d 4005 	strb.w	r4, [sp, r5]
    charToString(p, data);
 80a0aa4:	f7ff ff0a 	bl	80a08bc <_Z12charToStringPKcR6String>
 80a0aa8:	4e7f      	ldr	r6, [pc, #508]	; (80a0ca8 <_Z19getMeasure_callbackPhj+0x238>)
 80a0aaa:	f106 08dc 	add.w	r8, r6, #220	; 0xdc
}
*/

void getMeasure_callback(byte* payload, unsigned int length) {
    String data;
    unsigned int from = 0;
 80a0aae:	2500      	movs	r5, #0
 80a0ab0:	46a1      	mov	r9, r4
    p[length] = NULL;
    charToString(p, data);
    for(int i=0; i<NUMBEROFMETERS; i++) {
        //Read Phase Voltage
        for(int j=0; j<3; j++) {
            while (data[to]!='%') {
 80a0ab2:	4649      	mov	r1, r9
 80a0ab4:	4638      	mov	r0, r7
 80a0ab6:	f003 f957 	bl	80a3d68 <_ZN6StringixEj>
 80a0aba:	7803      	ldrb	r3, [r0, #0]
 80a0abc:	f109 0a01 	add.w	sl, r9, #1
 80a0ac0:	2b25      	cmp	r3, #37	; 0x25
 80a0ac2:	d001      	beq.n	80a0ac8 <_Z19getMeasure_callbackPhj+0x58>
                to++;
 80a0ac4:	46d1      	mov	r9, sl
    p[length] = NULL;
    charToString(p, data);
    for(int i=0; i<NUMBEROFMETERS; i++) {
        //Read Phase Voltage
        for(int j=0; j<3; j++) {
            while (data[to]!='%') {
 80a0ac6:	e7f4      	b.n	80a0ab2 <_Z19getMeasure_callbackPhj+0x42>
                to++;
            }
            EMeterData[i].PhaseVoltage[j] = (data.substring(from, to)).toFloat();
 80a0ac8:	4622      	mov	r2, r4
 80a0aca:	464b      	mov	r3, r9
 80a0acc:	4639      	mov	r1, r7
 80a0ace:	f107 0010 	add.w	r0, r7, #16
 80a0ad2:	f003 f957 	bl	80a3d84 <_ZNK6String9substringEjj>
 80a0ad6:	f107 0010 	add.w	r0, r7, #16
 80a0ada:	f003 f981 	bl	80a3de0 <_ZNK6String7toFloatEv>
 80a0ade:	f1a6 0314 	sub.w	r3, r6, #20
 80a0ae2:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 80a0ae6:	f107 0010 	add.w	r0, r7, #16
    
    p[length] = NULL;
    charToString(p, data);
    for(int i=0; i<NUMBEROFMETERS; i++) {
        //Read Phase Voltage
        for(int j=0; j<3; j++) {
 80a0aea:	3501      	adds	r5, #1
            while (data[to]!='%') {
                to++;
            }
            EMeterData[i].PhaseVoltage[j] = (data.substring(from, to)).toFloat();
 80a0aec:	f002 ffc6 	bl	80a3a7c <_ZN6StringD1Ev>
    
    p[length] = NULL;
    charToString(p, data);
    for(int i=0; i<NUMBEROFMETERS; i++) {
        //Read Phase Voltage
        for(int j=0; j<3; j++) {
 80a0af0:	2d03      	cmp	r5, #3
            while (data[to]!='%') {
                to++;
            }
            EMeterData[i].PhaseVoltage[j] = (data.substring(from, to)).toFloat();
            to++;
 80a0af2:	4654      	mov	r4, sl
    
    p[length] = NULL;
    charToString(p, data);
    for(int i=0; i<NUMBEROFMETERS; i++) {
        //Read Phase Voltage
        for(int j=0; j<3; j++) {
 80a0af4:	d1dc      	bne.n	80a0ab0 <_Z19getMeasure_callbackPhj+0x40>
 80a0af6:	f1a6 090c 	sub.w	r9, r6, #12
}
*/

void getMeasure_callback(byte* payload, unsigned int length) {
    String data;
    unsigned int from = 0;
 80a0afa:	4625      	mov	r5, r4
            to++;
            from = to;
        }
        //Read Phase Current
        for(int j=0; j<3; j++) {
            while (data[to]!='%') {
 80a0afc:	4629      	mov	r1, r5
 80a0afe:	4638      	mov	r0, r7
 80a0b00:	f003 f932 	bl	80a3d68 <_ZN6StringixEj>
 80a0b04:	7803      	ldrb	r3, [r0, #0]
 80a0b06:	f105 0a01 	add.w	sl, r5, #1
 80a0b0a:	2b25      	cmp	r3, #37	; 0x25
 80a0b0c:	d001      	beq.n	80a0b12 <_Z19getMeasure_callbackPhj+0xa2>
                to++;
 80a0b0e:	4655      	mov	r5, sl
            to++;
            from = to;
        }
        //Read Phase Current
        for(int j=0; j<3; j++) {
            while (data[to]!='%') {
 80a0b10:	e7f4      	b.n	80a0afc <_Z19getMeasure_callbackPhj+0x8c>
                to++;
            }
            EMeterData[i].PhaseCurrent[j] = (data.substring(from, to)).toFloat();
 80a0b12:	4622      	mov	r2, r4
 80a0b14:	462b      	mov	r3, r5
 80a0b16:	4639      	mov	r1, r7
 80a0b18:	f107 0010 	add.w	r0, r7, #16
 80a0b1c:	f003 f932 	bl	80a3d84 <_ZNK6String9substringEjj>
 80a0b20:	f107 0010 	add.w	r0, r7, #16
 80a0b24:	f003 f95c 	bl	80a3de0 <_ZNK6String7toFloatEv>
 80a0b28:	f849 0f04 	str.w	r0, [r9, #4]!
 80a0b2c:	f107 0010 	add.w	r0, r7, #16
 80a0b30:	f002 ffa4 	bl	80a3a7c <_ZN6StringD1Ev>
            EMeterData[i].PhaseVoltage[j] = (data.substring(from, to)).toFloat();
            to++;
            from = to;
        }
        //Read Phase Current
        for(int j=0; j<3; j++) {
 80a0b34:	454e      	cmp	r6, r9
            while (data[to]!='%') {
                to++;
            }
            EMeterData[i].PhaseCurrent[j] = (data.substring(from, to)).toFloat();
            to++;
 80a0b36:	4654      	mov	r4, sl
            EMeterData[i].PhaseVoltage[j] = (data.substring(from, to)).toFloat();
            to++;
            from = to;
        }
        //Read Phase Current
        for(int j=0; j<3; j++) {
 80a0b38:	d1df      	bne.n	80a0afa <_Z19getMeasure_callbackPhj+0x8a>
 80a0b3a:	46b1      	mov	r9, r6
 80a0b3c:	f106 0b0c 	add.w	fp, r6, #12
 80a0b40:	4625      	mov	r5, r4
            to++;
            from = to;
        }
        //Read Phase Power
        for(int j=0; j<3; j++) {
            while (data[to]!='%') {
 80a0b42:	4629      	mov	r1, r5
 80a0b44:	4638      	mov	r0, r7
 80a0b46:	f003 f90f 	bl	80a3d68 <_ZN6StringixEj>
 80a0b4a:	7803      	ldrb	r3, [r0, #0]
 80a0b4c:	f105 0a01 	add.w	sl, r5, #1
 80a0b50:	2b25      	cmp	r3, #37	; 0x25
 80a0b52:	d001      	beq.n	80a0b58 <_Z19getMeasure_callbackPhj+0xe8>
                to++;
 80a0b54:	4655      	mov	r5, sl
            to++;
            from = to;
        }
        //Read Phase Power
        for(int j=0; j<3; j++) {
            while (data[to]!='%') {
 80a0b56:	e7f4      	b.n	80a0b42 <_Z19getMeasure_callbackPhj+0xd2>
                to++;
            }
            EMeterData[i].PhasePower[j] = (data.substring(from, to)).toFloat();
 80a0b58:	4622      	mov	r2, r4
 80a0b5a:	462b      	mov	r3, r5
 80a0b5c:	4639      	mov	r1, r7
 80a0b5e:	f107 0010 	add.w	r0, r7, #16
 80a0b62:	f003 f90f 	bl	80a3d84 <_ZNK6String9substringEjj>
 80a0b66:	f107 0010 	add.w	r0, r7, #16
 80a0b6a:	f003 f939 	bl	80a3de0 <_ZNK6String7toFloatEv>
 80a0b6e:	f849 0f04 	str.w	r0, [r9, #4]!
 80a0b72:	f107 0010 	add.w	r0, r7, #16
 80a0b76:	f002 ff81 	bl	80a3a7c <_ZN6StringD1Ev>
            EMeterData[i].PhaseCurrent[j] = (data.substring(from, to)).toFloat();
            to++;
            from = to;
        }
        //Read Phase Power
        for(int j=0; j<3; j++) {
 80a0b7a:	45d9      	cmp	r9, fp
            while (data[to]!='%') {
                to++;
            }
            EMeterData[i].PhasePower[j] = (data.substring(from, to)).toFloat();
            to++;
 80a0b7c:	4654      	mov	r4, sl
            EMeterData[i].PhaseCurrent[j] = (data.substring(from, to)).toFloat();
            to++;
            from = to;
        }
        //Read Phase Power
        for(int j=0; j<3; j++) {
 80a0b7e:	d1df      	bne.n	80a0b40 <_Z19getMeasure_callbackPhj+0xd0>
            EMeterData[i].PhasePower[j] = (data.substring(from, to)).toFloat();
            to++;
            from = to;
        }
        //Read Frequency
        while (data[to]!='%') {
 80a0b80:	4621      	mov	r1, r4
 80a0b82:	4638      	mov	r0, r7
 80a0b84:	f003 f8f0 	bl	80a3d68 <_ZN6StringixEj>
 80a0b88:	7803      	ldrb	r3, [r0, #0]
 80a0b8a:	f104 0901 	add.w	r9, r4, #1
 80a0b8e:	2b25      	cmp	r3, #37	; 0x25
 80a0b90:	d001      	beq.n	80a0b96 <_Z19getMeasure_callbackPhj+0x126>
            to++;
 80a0b92:	464c      	mov	r4, r9
            EMeterData[i].PhasePower[j] = (data.substring(from, to)).toFloat();
            to++;
            from = to;
        }
        //Read Frequency
        while (data[to]!='%') {
 80a0b94:	e7f4      	b.n	80a0b80 <_Z19getMeasure_callbackPhj+0x110>
            to++;
        }
        EMeterData[i].Frequency = (data.substring(from, to)).toFloat();
 80a0b96:	4623      	mov	r3, r4
 80a0b98:	4652      	mov	r2, sl
 80a0b9a:	4639      	mov	r1, r7
 80a0b9c:	f107 0010 	add.w	r0, r7, #16
 80a0ba0:	f003 f8f0 	bl	80a3d84 <_ZNK6String9substringEjj>
 80a0ba4:	f107 0010 	add.w	r0, r7, #16
 80a0ba8:	f003 f91a 	bl	80a3de0 <_ZNK6String7toFloatEv>
 80a0bac:	6130      	str	r0, [r6, #16]
 80a0bae:	f107 0010 	add.w	r0, r7, #16
 80a0bb2:	f002 ff63 	bl	80a3a7c <_ZN6StringD1Ev>
        to++;
 80a0bb6:	464d      	mov	r5, r9
        from = to;
        //Read StartTime
        while (data[to]!='%') {
 80a0bb8:	4629      	mov	r1, r5
 80a0bba:	4638      	mov	r0, r7
 80a0bbc:	f003 f8d4 	bl	80a3d68 <_ZN6StringixEj>
 80a0bc0:	7803      	ldrb	r3, [r0, #0]
 80a0bc2:	1c6c      	adds	r4, r5, #1
 80a0bc4:	2b25      	cmp	r3, #37	; 0x25
 80a0bc6:	d001      	beq.n	80a0bcc <_Z19getMeasure_callbackPhj+0x15c>
            to++;
 80a0bc8:	4625      	mov	r5, r4
        }
        EMeterData[i].Frequency = (data.substring(from, to)).toFloat();
        to++;
        from = to;
        //Read StartTime
        while (data[to]!='%') {
 80a0bca:	e7f5      	b.n	80a0bb8 <_Z19getMeasure_callbackPhj+0x148>
            to++;
        }
        EMeterData[i].Time = atol((data.substring(from, to)).c_str());
 80a0bcc:	462b      	mov	r3, r5
 80a0bce:	464a      	mov	r2, r9
 80a0bd0:	4639      	mov	r1, r7
 80a0bd2:	f107 0010 	add.w	r0, r7, #16
 80a0bd6:	f003 f8d5 	bl	80a3d84 <_ZNK6String9substringEjj>
 80a0bda:	6938      	ldr	r0, [r7, #16]
 80a0bdc:	f005 fc29 	bl	80a6432 <atol>
 80a0be0:	362c      	adds	r6, #44	; 0x2c
 80a0be2:	f846 0c18 	str.w	r0, [r6, #-24]
 80a0be6:	f107 0010 	add.w	r0, r7, #16
 80a0bea:	f002 ff47 	bl	80a3a7c <_ZN6StringD1Ev>
    char p[length + 1];
    memcpy(p, payload, length);
    
    p[length] = NULL;
    charToString(p, data);
    for(int i=0; i<NUMBEROFMETERS; i++) {
 80a0bee:	4546      	cmp	r6, r8
 80a0bf0:	f47f af5d 	bne.w	80a0aae <_Z19getMeasure_callbackPhj+0x3e>
        }
        EMeterData[i].Time = atol((data.substring(from, to)).c_str());
        to++;
        from = to;
    }
    time_t time = Time.now();
 80a0bf4:	f003 fb55 	bl	80a42a2 <_ZN9TimeClass3nowEv>
 80a0bf8:	4605      	mov	r5, r0
    //DEBUGPORT.println(time);
    DEBUGPORT.print("MQTT>\tReceive energy meter data from broker at: ");
 80a0bfa:	f003 fd37 	bl	80a466c <_Z16_fetch_usbserialv>
 80a0bfe:	492b      	ldr	r1, [pc, #172]	; (80a0cac <_Z19getMeasure_callbackPhj+0x23c>)
 80a0c00:	f003 f91e 	bl	80a3e40 <_ZN5Print5printEPKc>
    DEBUGPORT.println(Time.format(time, TIME_FORMAT_DEFAULT));
 80a0c04:	f003 fd32 	bl	80a466c <_Z16_fetch_usbserialv>
 80a0c08:	4604      	mov	r4, r0
 80a0c0a:	4b29      	ldr	r3, [pc, #164]	; (80a0cb0 <_Z19getMeasure_callbackPhj+0x240>)
 80a0c0c:	462a      	mov	r2, r5
 80a0c0e:	681b      	ldr	r3, [r3, #0]
 80a0c10:	4928      	ldr	r1, [pc, #160]	; (80a0cb4 <_Z19getMeasure_callbackPhj+0x244>)
 80a0c12:	f107 0010 	add.w	r0, r7, #16
 80a0c16:	f003 faf1 	bl	80a41fc <_ZN9TimeClass6formatElPKc>
 80a0c1a:	6939      	ldr	r1, [r7, #16]
 80a0c1c:	4620      	mov	r0, r4
 80a0c1e:	f003 f922 	bl	80a3e66 <_ZN5Print7printlnEPKc>
 80a0c22:	f107 0010 	add.w	r0, r7, #16
 80a0c26:	f002 ff29 	bl	80a3a7c <_ZN6StringD1Ev>
        if (AUTHENTICATION_CAR2) {
            maxCurrentC2_test((int)(EMeterData[2].PhaseCurrent[0])); //Emeter3, I1
        }
    }
    */
    if (activeCharger()==1) {
 80a0c2a:	f7ff fe5d 	bl	80a08e8 <_Z13activeChargerv>
 80a0c2e:	4c22      	ldr	r4, [pc, #136]	; (80a0cb8 <_Z19getMeasure_callbackPhj+0x248>)
 80a0c30:	2801      	cmp	r0, #1
        maxCurrentC1_test((int)(EMeterData[2].PhaseCurrent[0]+EMeterData[2].PhaseCurrent[1]+EMeterData[2].PhaseCurrent[2])); //Emeter3, I1
 80a0c32:	6ea1      	ldr	r1, [r4, #104]	; 0x68
        if (AUTHENTICATION_CAR2) {
            maxCurrentC2_test((int)(EMeterData[2].PhaseCurrent[0])); //Emeter3, I1
        }
    }
    */
    if (activeCharger()==1) {
 80a0c34:	d10a      	bne.n	80a0c4c <_Z19getMeasure_callbackPhj+0x1dc>
        maxCurrentC1_test((int)(EMeterData[2].PhaseCurrent[0]+EMeterData[2].PhaseCurrent[1]+EMeterData[2].PhaseCurrent[2])); //Emeter3, I1
 80a0c36:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80a0c38:	f004 ff14 	bl	80a5a64 <__addsf3>
 80a0c3c:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 80a0c3e:	f004 ff11 	bl	80a5a64 <__addsf3>
 80a0c42:	f005 f9dd 	bl	80a6000 <__aeabi_f2iz>
 80a0c46:	f7ff fe79 	bl	80a093c <_Z17maxCurrentC1_testi>
 80a0c4a:	e024      	b.n	80a0c96 <_Z19getMeasure_callbackPhj+0x226>
    }
    else if (activeCharger()==2) {
 80a0c4c:	2802      	cmp	r0, #2
        maxCurrentC2_test((int)(EMeterData[2].PhaseCurrent[0]+EMeterData[2].PhaseCurrent[1]+EMeterData[2].PhaseCurrent[2])); //Emeter3, I1
 80a0c4e:	6e60      	ldr	r0, [r4, #100]	; 0x64
    }
    */
    if (activeCharger()==1) {
        maxCurrentC1_test((int)(EMeterData[2].PhaseCurrent[0]+EMeterData[2].PhaseCurrent[1]+EMeterData[2].PhaseCurrent[2])); //Emeter3, I1
    }
    else if (activeCharger()==2) {
 80a0c50:	d105      	bne.n	80a0c5e <_Z19getMeasure_callbackPhj+0x1ee>
        maxCurrentC2_test((int)(EMeterData[2].PhaseCurrent[0]+EMeterData[2].PhaseCurrent[1]+EMeterData[2].PhaseCurrent[2])); //Emeter3, I1
 80a0c52:	f004 ff07 	bl	80a5a64 <__addsf3>
 80a0c56:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 80a0c58:	f004 ff04 	bl	80a5a64 <__addsf3>
 80a0c5c:	e017      	b.n	80a0c8e <_Z19getMeasure_callbackPhj+0x21e>
    }
    else {
        maxCurrentC1_test((int)((EMeterData[2].PhaseCurrent[0]+EMeterData[2].PhaseCurrent[1]+EMeterData[2].PhaseCurrent[2])/2)); //Emeter3, I1
 80a0c5e:	f004 ff01 	bl	80a5a64 <__addsf3>
 80a0c62:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 80a0c64:	f004 fefe 	bl	80a5a64 <__addsf3>
 80a0c68:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80a0c6c:	f005 f802 	bl	80a5c74 <__aeabi_fmul>
 80a0c70:	f005 f9c6 	bl	80a6000 <__aeabi_f2iz>
 80a0c74:	f7ff fe62 	bl	80a093c <_Z17maxCurrentC1_testi>
        maxCurrentC2_test((int)((EMeterData[2].PhaseCurrent[0]+EMeterData[2].PhaseCurrent[1]+EMeterData[2].PhaseCurrent[2])/2)); //Emeter3, I1
 80a0c78:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 80a0c7a:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80a0c7c:	f004 fef2 	bl	80a5a64 <__addsf3>
 80a0c80:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 80a0c82:	f004 feef 	bl	80a5a64 <__addsf3>
 80a0c86:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80a0c8a:	f004 fff3 	bl	80a5c74 <__aeabi_fmul>
 80a0c8e:	f005 f9b7 	bl	80a6000 <__aeabi_f2iz>
 80a0c92:	f7ff fe93 	bl	80a09bc <_Z17maxCurrentC2_testi>
    }
}
*/

void getMeasure_callback(byte* payload, unsigned int length) {
    String data;
 80a0c96:	4638      	mov	r0, r7
 80a0c98:	f002 fef0 	bl	80a3a7c <_ZN6StringD1Ev>
    }
    else {
        maxCurrentC1_test((int)((EMeterData[2].PhaseCurrent[0]+EMeterData[2].PhaseCurrent[1]+EMeterData[2].PhaseCurrent[2])/2)); //Emeter3, I1
        maxCurrentC2_test((int)((EMeterData[2].PhaseCurrent[0]+EMeterData[2].PhaseCurrent[1]+EMeterData[2].PhaseCurrent[2])/2)); //Emeter3, I1
    }
}
 80a0c9c:	3724      	adds	r7, #36	; 0x24
 80a0c9e:	46bd      	mov	sp, r7
 80a0ca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a0ca4:	080a997b 	.word	0x080a997b
 80a0ca8:	200003a8 	.word	0x200003a8
 80a0cac:	080a9624 	.word	0x080a9624
 80a0cb0:	2000000c 	.word	0x2000000c
 80a0cb4:	20000520 	.word	0x20000520
 80a0cb8:	20000394 	.word	0x20000394

080a0cbc <_Z18allowUser_callbackPhj>:

void allowUser_callback(byte* payload, unsigned int length) {
 80a0cbc:	b5b0      	push	{r4, r5, r7, lr}
 80a0cbe:	460c      	mov	r4, r1
    char payl[length+1];
 80a0cc0:	f101 0308 	add.w	r3, r1, #8
        maxCurrentC1_test((int)((EMeterData[2].PhaseCurrent[0]+EMeterData[2].PhaseCurrent[1]+EMeterData[2].PhaseCurrent[2])/2)); //Emeter3, I1
        maxCurrentC2_test((int)((EMeterData[2].PhaseCurrent[0]+EMeterData[2].PhaseCurrent[1]+EMeterData[2].PhaseCurrent[2])/2)); //Emeter3, I1
    }
}

void allowUser_callback(byte* payload, unsigned int length) {
 80a0cc4:	b086      	sub	sp, #24
    char payl[length+1];
 80a0cc6:	f023 0307 	bic.w	r3, r3, #7
            client.publish("HANevse/photonConverted", "successful RFID read, but you are not in the userlist");
            break;
        default:
            client.publish("HANevse/photonConverted", "ERROR: unknown scenario");
        
    }
 80a0cca:	466d      	mov	r5, sp
        maxCurrentC1_test((int)((EMeterData[2].PhaseCurrent[0]+EMeterData[2].PhaseCurrent[1]+EMeterData[2].PhaseCurrent[2])/2)); //Emeter3, I1
        maxCurrentC2_test((int)((EMeterData[2].PhaseCurrent[0]+EMeterData[2].PhaseCurrent[1]+EMeterData[2].PhaseCurrent[2])/2)); //Emeter3, I1
    }
}

void allowUser_callback(byte* payload, unsigned int length) {
 80a0ccc:	af00      	add	r7, sp, #0
    char payl[length+1];
 80a0cce:	ebad 0d03 	sub.w	sp, sp, r3
    char *endchar;
        
    memcpy(payl, payload, length);
 80a0cd2:	460a      	mov	r2, r1
 80a0cd4:	4601      	mov	r1, r0
 80a0cd6:	4668      	mov	r0, sp
 80a0cd8:	f005 fcba 	bl	80a6650 <memcpy>
    payl[length] = NULL;
 80a0cdc:	2300      	movs	r3, #0
 80a0cde:	f80d 3004 	strb.w	r3, [sp, r4]
    int port = (int) strtol(payl, &endchar, 10);
 80a0ce2:	220a      	movs	r2, #10
 80a0ce4:	1d39      	adds	r1, r7, #4
 80a0ce6:	4668      	mov	r0, sp
 80a0ce8:	f007 f8f4 	bl	80a7ed4 <strtol>
 80a0cec:	4604      	mov	r4, r0
    //action=4  succesful stop of charge session
    //action=5  you just started a charge at this charger, but had another consecutive RFID swipe within 20 seconds
    //action=6  you are already charging at another charger
    //action=7  succesful RFID read, but you are not in the userlist
    
    String topic_str = "HANevse/photonConverted/";
 80a0cee:	4924      	ldr	r1, [pc, #144]	; (80a0d80 <_Z18allowUser_callbackPhj+0xc4>)
 80a0cf0:	f107 0008 	add.w	r0, r7, #8
 80a0cf4:	f002 ff09 	bl	80a3b0a <_ZN6StringC1EPK19__FlashStringHelper>
    topic_str.concat(port);
 80a0cf8:	4621      	mov	r1, r4
 80a0cfa:	f107 0008 	add.w	r0, r7, #8
 80a0cfe:	f002 fff2 	bl	80a3ce6 <_ZN6String6concatEi>

    endchar = endchar + 1;
 80a0d02:	6878      	ldr	r0, [r7, #4]
    if (port == 1 + CHARGEROFFSET) 
 80a0d04:	2c01      	cmp	r4, #1
    //action=7  succesful RFID read, but you are not in the userlist
    
    String topic_str = "HANevse/photonConverted/";
    topic_str.concat(port);

    endchar = endchar + 1;
 80a0d06:	f100 0001 	add.w	r0, r0, #1
 80a0d0a:	6078      	str	r0, [r7, #4]
    if (port == 1 + CHARGEROFFSET) 
 80a0d0c:	d003      	beq.n	80a0d16 <_Z18allowUser_callbackPhj+0x5a>
        port = AUTHENTICATION_CAR1;
    else if (port == 2 + CHARGEROFFSET)
 80a0d0e:	2c02      	cmp	r4, #2
 80a0d10:	d12d      	bne.n	80a0d6e <_Z18allowUser_callbackPhj+0xb2>
        port = AUTHENTICATION_CAR2;
 80a0d12:	2406      	movs	r4, #6
 80a0d14:	e000      	b.n	80a0d18 <_Z18allowUser_callbackPhj+0x5c>
    String topic_str = "HANevse/photonConverted/";
    topic_str.concat(port);

    endchar = endchar + 1;
    if (port == 1 + CHARGEROFFSET) 
        port = AUTHENTICATION_CAR1;
 80a0d16:	2405      	movs	r4, #5
    else if (port == 2 + CHARGEROFFSET)
        port = AUTHENTICATION_CAR2;
    else return; //port = EXTRA;
    int retPi = (int) strtol(endchar, &endchar, 10);
 80a0d18:	220a      	movs	r2, #10
 80a0d1a:	1d39      	adds	r1, r7, #4
 80a0d1c:	f007 f8da 	bl	80a7ed4 <strtol>
    Pianswer = retPi; 
 80a0d20:	4b18      	ldr	r3, [pc, #96]	; (80a0d84 <_Z18allowUser_callbackPhj+0xc8>)
 80a0d22:	8018      	strh	r0, [r3, #0]
    // if (Pianswer == 0)
        // Pianswer = 9;

    switch(retPi) {
 80a0d24:	3801      	subs	r0, #1
 80a0d26:	2806      	cmp	r0, #6
 80a0d28:	d81c      	bhi.n	80a0d64 <_Z18allowUser_callbackPhj+0xa8>
 80a0d2a:	e8df f000 	tbb	[pc, r0]
 80a0d2e:	0b04      	.short	0x0b04
 80a0d30:	17150f0d 	.word	0x17150f0d
 80a0d34:	19          	.byte	0x19
 80a0d35:	00          	.byte	0x00
        case 1:
            digitalWrite(port, HIGH);
 80a0d36:	2101      	movs	r1, #1
 80a0d38:	4620      	mov	r0, r4
 80a0d3a:	f003 ff9e 	bl	80a4c7a <digitalWrite>
            client.publish(topic_str, "successful start new charge");
 80a0d3e:	4a12      	ldr	r2, [pc, #72]	; (80a0d88 <_Z18allowUser_callbackPhj+0xcc>)
 80a0d40:	68b9      	ldr	r1, [r7, #8]
 80a0d42:	e011      	b.n	80a0d68 <_Z18allowUser_callbackPhj+0xac>
            break;
        case 2:
            client.publish("HANevse/photonConverted", "charger is free, but you already swiped the card in the last 20 sec");
 80a0d44:	4a11      	ldr	r2, [pc, #68]	; (80a0d8c <_Z18allowUser_callbackPhj+0xd0>)
 80a0d46:	e00e      	b.n	80a0d66 <_Z18allowUser_callbackPhj+0xaa>
            break;
        case 3:
            client.publish("HANevse/photonConverted", "charger is occupied by another user");
 80a0d48:	4a11      	ldr	r2, [pc, #68]	; (80a0d90 <_Z18allowUser_callbackPhj+0xd4>)
 80a0d4a:	e00c      	b.n	80a0d66 <_Z18allowUser_callbackPhj+0xaa>
            break;
        case 4:
            digitalWrite(port, LOW);
 80a0d4c:	2100      	movs	r1, #0
 80a0d4e:	4620      	mov	r0, r4
 80a0d50:	f003 ff93 	bl	80a4c7a <digitalWrite>
            client.publish("HANevse/photonConverted", "successful stop charge session");
 80a0d54:	4a0f      	ldr	r2, [pc, #60]	; (80a0d94 <_Z18allowUser_callbackPhj+0xd8>)
 80a0d56:	e006      	b.n	80a0d66 <_Z18allowUser_callbackPhj+0xaa>
            break;
        case 5:
            client.publish("HANevse/photonConverted", "you just started a charge at this charger, but had another consecutive RFID swipe within 20 sec");
 80a0d58:	4a0f      	ldr	r2, [pc, #60]	; (80a0d98 <_Z18allowUser_callbackPhj+0xdc>)
 80a0d5a:	e004      	b.n	80a0d66 <_Z18allowUser_callbackPhj+0xaa>
            break;
        case 6:
            client.publish("HANevse/photonConverted", "you are already charging at another charger");
 80a0d5c:	4a0f      	ldr	r2, [pc, #60]	; (80a0d9c <_Z18allowUser_callbackPhj+0xe0>)
 80a0d5e:	e002      	b.n	80a0d66 <_Z18allowUser_callbackPhj+0xaa>
            break;
        case 7:
            client.publish("HANevse/photonConverted", "successful RFID read, but you are not in the userlist");
 80a0d60:	4a0f      	ldr	r2, [pc, #60]	; (80a0da0 <_Z18allowUser_callbackPhj+0xe4>)
 80a0d62:	e000      	b.n	80a0d66 <_Z18allowUser_callbackPhj+0xaa>
            break;
        default:
            client.publish("HANevse/photonConverted", "ERROR: unknown scenario");
 80a0d64:	4a0f      	ldr	r2, [pc, #60]	; (80a0da4 <_Z18allowUser_callbackPhj+0xe8>)
 80a0d66:	4910      	ldr	r1, [pc, #64]	; (80a0da8 <_Z18allowUser_callbackPhj+0xec>)
 80a0d68:	4810      	ldr	r0, [pc, #64]	; (80a0dac <_Z18allowUser_callbackPhj+0xf0>)
 80a0d6a:	f001 fd3c 	bl	80a27e6 <_ZN4MQTT7publishEPKcS1_>
    endchar = endchar + 1;
    if (port == 1 + CHARGEROFFSET) 
        port = AUTHENTICATION_CAR1;
    else if (port == 2 + CHARGEROFFSET)
        port = AUTHENTICATION_CAR2;
    else return; //port = EXTRA;
 80a0d6e:	f107 0008 	add.w	r0, r7, #8
 80a0d72:	f002 fe83 	bl	80a3a7c <_ZN6StringD1Ev>
 80a0d76:	46ad      	mov	sp, r5
        default:
            client.publish("HANevse/photonConverted", "ERROR: unknown scenario");
        
    }
    
}
 80a0d78:	3718      	adds	r7, #24
 80a0d7a:	46bd      	mov	sp, r7
 80a0d7c:	bdb0      	pop	{r4, r5, r7, pc}
 80a0d7e:	bf00      	nop
 80a0d80:	080a9655 	.word	0x080a9655
 80a0d84:	20000280 	.word	0x20000280
 80a0d88:	080a966e 	.word	0x080a966e
 80a0d8c:	080a968a 	.word	0x080a968a
 80a0d90:	080a96e6 	.word	0x080a96e6
 80a0d94:	080a970a 	.word	0x080a970a
 80a0d98:	080a9729 	.word	0x080a9729
 80a0d9c:	080a9789 	.word	0x080a9789
 80a0da0:	080a97b5 	.word	0x080a97b5
 80a0da4:	080a97eb 	.word	0x080a97eb
 80a0da8:	080a96ce 	.word	0x080a96ce
 80a0dac:	200002c4 	.word	0x200002c4

080a0db0 <_Z8callbackPcPhj>:

void callback(char* topic, byte* payload, unsigned int length) {
 80a0db0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80a0db2:	4606      	mov	r6, r0
 80a0db4:	460c      	mov	r4, r1
    test = "99";
 80a0db6:	481b      	ldr	r0, [pc, #108]	; (80a0e24 <_Z8callbackPcPhj+0x74>)
 80a0db8:	491b      	ldr	r1, [pc, #108]	; (80a0e28 <_Z8callbackPcPhj+0x78>)
        
    }
    
}

void callback(char* topic, byte* payload, unsigned int length) {
 80a0dba:	4615      	mov	r5, r2
    test = "99";
 80a0dbc:	f002 fef7 	bl	80a3bae <_ZN6StringaSEPKc>

	if (strcmp(topic, "HANevse/EnergyMeter")==0) {
 80a0dc0:	491a      	ldr	r1, [pc, #104]	; (80a0e2c <_Z8callbackPcPhj+0x7c>)
 80a0dc2:	4630      	mov	r0, r6
 80a0dc4:	f005 fc80 	bl	80a66c8 <strcmp>
 80a0dc8:	b940      	cbnz	r0, 80a0ddc <_Z8callbackPcPhj+0x2c>
	   test = "1";
 80a0dca:	4919      	ldr	r1, [pc, #100]	; (80a0e30 <_Z8callbackPcPhj+0x80>)
 80a0dcc:	4815      	ldr	r0, [pc, #84]	; (80a0e24 <_Z8callbackPcPhj+0x74>)
 80a0dce:	f002 feee 	bl	80a3bae <_ZN6StringaSEPKc>
	   getMeasure_callback(payload, length);
 80a0dd2:	4629      	mov	r1, r5
 80a0dd4:	4620      	mov	r0, r4
 80a0dd6:	f7ff fe4b 	bl	80a0a70 <_Z19getMeasure_callbackPhj>
 80a0dda:	e008      	b.n	80a0dee <_Z8callbackPcPhj+0x3e>
	}
    else
     if (strcmp(topic, "HANevse/allowUser")==0)
 80a0ddc:	4915      	ldr	r1, [pc, #84]	; (80a0e34 <_Z8callbackPcPhj+0x84>)
 80a0dde:	4630      	mov	r0, r6
 80a0de0:	f005 fc72 	bl	80a66c8 <strcmp>
 80a0de4:	b918      	cbnz	r0, 80a0dee <_Z8callbackPcPhj+0x3e>
    {
        allowUser_callback(payload, length);
 80a0de6:	4629      	mov	r1, r5
 80a0de8:	4620      	mov	r0, r4
 80a0dea:	f7ff ff67 	bl	80a0cbc <_Z18allowUser_callbackPhj>
        //client.publish("HANevse/photonConverted", "test photon responds");
    }
    
	time_t time = Time.now();
 80a0dee:	f003 fa58 	bl	80a42a2 <_ZN9TimeClass3nowEv>
 80a0df2:	4605      	mov	r5, r0
    //DEBUGPORT.println(time);
    DEBUGPORT.print("MQTT>\tCallback function is called at: ");
 80a0df4:	f003 fc3a 	bl	80a466c <_Z16_fetch_usbserialv>
 80a0df8:	490f      	ldr	r1, [pc, #60]	; (80a0e38 <_Z8callbackPcPhj+0x88>)
 80a0dfa:	f003 f821 	bl	80a3e40 <_ZN5Print5printEPKc>
    DEBUGPORT.println(Time.format(time, TIME_FORMAT_DEFAULT));
 80a0dfe:	f003 fc35 	bl	80a466c <_Z16_fetch_usbserialv>
 80a0e02:	4604      	mov	r4, r0
 80a0e04:	4b0d      	ldr	r3, [pc, #52]	; (80a0e3c <_Z8callbackPcPhj+0x8c>)
 80a0e06:	462a      	mov	r2, r5
 80a0e08:	681b      	ldr	r3, [r3, #0]
 80a0e0a:	4668      	mov	r0, sp
 80a0e0c:	490c      	ldr	r1, [pc, #48]	; (80a0e40 <_Z8callbackPcPhj+0x90>)
 80a0e0e:	f003 f9f5 	bl	80a41fc <_ZN9TimeClass6formatElPKc>
 80a0e12:	9900      	ldr	r1, [sp, #0]
 80a0e14:	4620      	mov	r0, r4
 80a0e16:	f003 f826 	bl	80a3e66 <_ZN5Print7printlnEPKc>
 80a0e1a:	4668      	mov	r0, sp
 80a0e1c:	f002 fe2e 	bl	80a3a7c <_ZN6StringD1Ev>
}
 80a0e20:	b004      	add	sp, #16
 80a0e22:	bd70      	pop	{r4, r5, r6, pc}
 80a0e24:	2000049c 	.word	0x2000049c
 80a0e28:	080a9803 	.word	0x080a9803
 80a0e2c:	080a9806 	.word	0x080a9806
 80a0e30:	080a99ab 	.word	0x080a99ab
 80a0e34:	080a981a 	.word	0x080a981a
 80a0e38:	080a982c 	.word	0x080a982c
 80a0e3c:	2000000c 	.word	0x2000000c
 80a0e40:	20000520 	.word	0x20000520

080a0e44 <_Z9reconnectv>:
    // This whole function is not interrupted by callback() so Pianswer can't be changed in the meantime
    //client.publish("HANevse/checkupdateUser", String(Pianswer));  
     return Authorized;
}

void reconnect(void) {
 80a0e44:	b508      	push	{r3, lr}
    while (!client.isConnected()) {
 80a0e46:	4817      	ldr	r0, [pc, #92]	; (80a0ea4 <_Z9reconnectv+0x60>)
 80a0e48:	f001 fb69 	bl	80a251e <_ZN4MQTT11isConnectedEv>
 80a0e4c:	bb48      	cbnz	r0, 80a0ea2 <_Z9reconnectv+0x5e>
        DEBUGPORT.print("MQTT>\tConnecting to MQTT broker...");
 80a0e4e:	f003 fc0d 	bl	80a466c <_Z16_fetch_usbserialv>
 80a0e52:	4915      	ldr	r1, [pc, #84]	; (80a0ea8 <_Z9reconnectv+0x64>)
 80a0e54:	f002 fff4 	bl	80a3e40 <_ZN5Print5printEPKc>
        if (client.connect("EV-Photon1")) {
 80a0e58:	4914      	ldr	r1, [pc, #80]	; (80a0eac <_Z9reconnectv+0x68>)
 80a0e5a:	4812      	ldr	r0, [pc, #72]	; (80a0ea4 <_Z9reconnectv+0x60>)
 80a0e5c:	f001 fc44 	bl	80a26e8 <_ZN4MQTT7connectEPKc>
 80a0e60:	b180      	cbz	r0, 80a0e84 <_Z9reconnectv+0x40>
            DEBUGPORT.println("MQTT>\tConnected");
 80a0e62:	f003 fc03 	bl	80a466c <_Z16_fetch_usbserialv>
 80a0e66:	4912      	ldr	r1, [pc, #72]	; (80a0eb0 <_Z9reconnectv+0x6c>)
 80a0e68:	f002 fffd 	bl	80a3e66 <_ZN5Print7printlnEPKc>
            //client.subscribe("HANevse/#", client.QOS2);
            if (TESTCASE){
 80a0e6c:	4b11      	ldr	r3, [pc, #68]	; (80a0eb4 <_Z9reconnectv+0x70>)
 80a0e6e:	781b      	ldrb	r3, [r3, #0]
 80a0e70:	b11b      	cbz	r3, 80a0e7a <_Z9reconnectv+0x36>
            client.subscribe("HANevse/EnergyMeter"); //+
 80a0e72:	4911      	ldr	r1, [pc, #68]	; (80a0eb8 <_Z9reconnectv+0x74>)
 80a0e74:	480b      	ldr	r0, [pc, #44]	; (80a0ea4 <_Z9reconnectv+0x60>)
 80a0e76:	f001 fe29 	bl	80a2acc <_ZN4MQTT9subscribeEPKc>
            }
            client.subscribe("HANevse/allowUser");
 80a0e7a:	4910      	ldr	r1, [pc, #64]	; (80a0ebc <_Z9reconnectv+0x78>)
 80a0e7c:	4809      	ldr	r0, [pc, #36]	; (80a0ea4 <_Z9reconnectv+0x60>)
 80a0e7e:	f001 fe25 	bl	80a2acc <_ZN4MQTT9subscribeEPKc>
 80a0e82:	e7e0      	b.n	80a0e46 <_Z9reconnectv+0x2>
        }
        else {
            DEBUGPORT.println("MQTT>\tConnection failed");
 80a0e84:	f003 fbf2 	bl	80a466c <_Z16_fetch_usbserialv>
 80a0e88:	490d      	ldr	r1, [pc, #52]	; (80a0ec0 <_Z9reconnectv+0x7c>)
 80a0e8a:	f002 ffec 	bl	80a3e66 <_ZN5Print7printlnEPKc>
            DEBUGPORT.println("MQTT>\tRetrying...");
 80a0e8e:	f003 fbed 	bl	80a466c <_Z16_fetch_usbserialv>
 80a0e92:	490c      	ldr	r1, [pc, #48]	; (80a0ec4 <_Z9reconnectv+0x80>)
 80a0e94:	f002 ffe7 	bl	80a3e66 <_ZN5Print7printlnEPKc>
            delay(5000);
 80a0e98:	f241 3088 	movw	r0, #5000	; 0x1388
 80a0e9c:	f003 fa12 	bl	80a42c4 <delay>
 80a0ea0:	e7d1      	b.n	80a0e46 <_Z9reconnectv+0x2>
 80a0ea2:	bd08      	pop	{r3, pc}
 80a0ea4:	200002c4 	.word	0x200002c4
 80a0ea8:	080a9853 	.word	0x080a9853
 80a0eac:	080a9876 	.word	0x080a9876
 80a0eb0:	080a9881 	.word	0x080a9881
 80a0eb4:	20000478 	.word	0x20000478
 80a0eb8:	080a9806 	.word	0x080a9806
 80a0ebc:	080a981a 	.word	0x080a981a
 80a0ec0:	080a9891 	.word	0x080a9891
 80a0ec4:	080a98a9 	.word	0x080a98a9

080a0ec8 <_ZN16JsonWriterStaticILj512EEC1Ev>:
 * @param BUFFER_SIZE The size of the buffer to reserve.
 */
template <size_t BUFFER_SIZE>
class JsonWriterStatic : public JsonWriter {
public:
	explicit JsonWriterStatic() : JsonWriter(staticBuffer, BUFFER_SIZE) {};
 80a0ec8:	b510      	push	{r4, lr}
 80a0eca:	4604      	mov	r4, r0
 80a0ecc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80a0ed0:	f100 0130 	add.w	r1, r0, #48	; 0x30
 80a0ed4:	f001 fe4a 	bl	80a2b6c <_ZN10JsonWriterC1EPcj>
 80a0ed8:	4b01      	ldr	r3, [pc, #4]	; (80a0ee0 <_ZN16JsonWriterStaticILj512EEC1Ev+0x18>)
 80a0eda:	4620      	mov	r0, r4
 80a0edc:	6023      	str	r3, [r4, #0]
 80a0ede:	bd10      	pop	{r4, pc}
 80a0ee0:	080a9490 	.word	0x080a9490

080a0ee4 <_ZN10JsonWriter14insertKeyValueIfEEvPKcT_>:
	 *
	 * Uses templates so you can pass any type object that's supported by insertValue() overloads,
	 * for example: bool, int, float, double, const char *.
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
 80a0ee4:	b570      	push	{r4, r5, r6, lr}
 80a0ee6:	4604      	mov	r4, r0
 80a0ee8:	460e      	mov	r6, r1
 80a0eea:	4615      	mov	r5, r2
		insertCheckSeparator();
 80a0eec:	f001 ff28 	bl	80a2d40 <_ZN10JsonWriter20insertCheckSeparatorEv>
	 * @brief Inserts a quoted string value. This escapes special characters and encodes utf-8.
	 *
	 * You would normally use insertKeyValue() or insertArrayValue() instead of calling this directly
	 * as those functions take care of inserting the separtators between items.
	 */
	void insertValue(const char *value) { insertString(value, true); }
 80a0ef0:	4631      	mov	r1, r6
 80a0ef2:	4620      	mov	r0, r4
 80a0ef4:	2201      	movs	r2, #1
 80a0ef6:	f001 fe97 	bl	80a2c28 <_ZN10JsonWriter12insertStringEPKcb>
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
		insertValue(key);
		insertChar(':');
 80a0efa:	4620      	mov	r0, r4
 80a0efc:	213a      	movs	r1, #58	; 0x3a
 80a0efe:	f001 fe47 	bl	80a2b90 <_ZN10JsonWriter10insertCharEc>
		insertValue(value);
 80a0f02:	4629      	mov	r1, r5
 80a0f04:	4620      	mov	r0, r4
	}
 80a0f06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	template<class T>
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
		insertValue(key);
		insertChar(':');
		insertValue(value);
 80a0f0a:	f001 bf3d 	b.w	80a2d88 <_ZN10JsonWriter11insertValueEf>

080a0f0e <_ZN10JsonWriter14insertKeyValueI6StringEEvPKcT_>:
	 *
	 * Uses templates so you can pass any type object that's supported by insertValue() overloads,
	 * for example: bool, int, float, double, const char *.
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
 80a0f0e:	b570      	push	{r4, r5, r6, lr}
 80a0f10:	4604      	mov	r4, r0
 80a0f12:	460e      	mov	r6, r1
 80a0f14:	4615      	mov	r5, r2
		insertCheckSeparator();
 80a0f16:	f001 ff13 	bl	80a2d40 <_ZN10JsonWriter20insertCheckSeparatorEv>
	 * @brief Inserts a quoted string value. This escapes special characters and encodes utf-8.
	 *
	 * You would normally use insertKeyValue() or insertArrayValue() instead of calling this directly
	 * as those functions take care of inserting the separtators between items.
	 */
	void insertValue(const char *value) { insertString(value, true); }
 80a0f1a:	2201      	movs	r2, #1
 80a0f1c:	4631      	mov	r1, r6
 80a0f1e:	4620      	mov	r0, r4
 80a0f20:	f001 fe82 	bl	80a2c28 <_ZN10JsonWriter12insertStringEPKcb>
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
		insertValue(key);
		insertChar(':');
 80a0f24:	4620      	mov	r0, r4
 80a0f26:	213a      	movs	r1, #58	; 0x3a
 80a0f28:	f001 fe32 	bl	80a2b90 <_ZN10JsonWriter10insertCharEc>
	 * See also the version that takes a plain const char *.
	 *
	 * You would normally use insertKeyValue() or insertArrayValue() instead of calling this directly
	 * as those functions take care of inserting the separtators between items.
	 */
	void insertValue(const String &value) { insertString(value.c_str(), true); }
 80a0f2c:	6829      	ldr	r1, [r5, #0]
 80a0f2e:	4620      	mov	r0, r4
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
		insertValue(key);
		insertChar(':');
		insertValue(value);
	}
 80a0f30:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	 * See also the version that takes a plain const char *.
	 *
	 * You would normally use insertKeyValue() or insertArrayValue() instead of calling this directly
	 * as those functions take care of inserting the separtators between items.
	 */
	void insertValue(const String &value) { insertString(value.c_str(), true); }
 80a0f34:	2201      	movs	r2, #1
 80a0f36:	f001 be77 	b.w	80a2c28 <_ZN10JsonWriter12insertStringEPKcb>
	...

080a0f3c <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>:
	 *
	 * Uses templates so you can pass any type object that's supported by insertValue() overloads,
	 * for example: bool, int, float, double, const char *.
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
 80a0f3c:	b570      	push	{r4, r5, r6, lr}
 80a0f3e:	4604      	mov	r4, r0
 80a0f40:	460e      	mov	r6, r1
 80a0f42:	4615      	mov	r5, r2
		insertCheckSeparator();
 80a0f44:	f001 fefc 	bl	80a2d40 <_ZN10JsonWriter20insertCheckSeparatorEv>
	 * @brief Inserts a quoted string value. This escapes special characters and encodes utf-8.
	 *
	 * You would normally use insertKeyValue() or insertArrayValue() instead of calling this directly
	 * as those functions take care of inserting the separtators between items.
	 */
	void insertValue(const char *value) { insertString(value, true); }
 80a0f48:	2201      	movs	r2, #1
 80a0f4a:	4631      	mov	r1, r6
 80a0f4c:	4620      	mov	r0, r4
 80a0f4e:	f001 fe6b 	bl	80a2c28 <_ZN10JsonWriter12insertStringEPKcb>
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
		insertValue(key);
		insertChar(':');
 80a0f52:	4620      	mov	r0, r4
 80a0f54:	213a      	movs	r1, #58	; 0x3a
 80a0f56:	f001 fe1b 	bl	80a2b90 <_ZN10JsonWriter10insertCharEc>
	 * @brief Inserts an integer value.
	 *
	 * You would normally use insertKeyValue() or insertArrayValue() instead of calling this directly
	 * as those functions take care of inserting the separators between items.
	 */
	void insertValue(int value) { insertsprintf("%d", value); }
 80a0f5a:	462a      	mov	r2, r5
 80a0f5c:	4620      	mov	r0, r4
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
		insertValue(key);
		insertChar(':');
		insertValue(value);
	}
 80a0f5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	 * @brief Inserts an integer value.
	 *
	 * You would normally use insertKeyValue() or insertArrayValue() instead of calling this directly
	 * as those functions take care of inserting the separators between items.
	 */
	void insertValue(int value) { insertsprintf("%d", value); }
 80a0f62:	4901      	ldr	r1, [pc, #4]	; (80a0f68 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_+0x2c>)
 80a0f64:	f001 be53 	b.w	80a2c0e <_ZN10JsonWriter13insertsprintfEPKcz>
 80a0f68:	080a9f7b 	.word	0x080a9f7b

080a0f6c <_Z15add_Measurementfffffffffmi6String.part.9>:
    //DEBUGPORT.println(time);
    DEBUGPORT.print("MQTT>\tCallback function is called at: ");
    DEBUGPORT.println(Time.format(time, TIME_FORMAT_DEFAULT));
}

void add_Measurement(float phaseVoltageL1, float phaseVoltageL2, float phaseVoltageL3, float currentL1, float currentL2, float currentL3,  float Power, float Energy, float Frequency, unsigned long Timestamp, int socketId=0, String userId="00") {
 80a0f6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a0f70:	460f      	mov	r7, r1
 80a0f72:	f5ad 7d10 	sub.w	sp, sp, #576	; 0x240
    if (((currentL1 < 0.1)&&(currentL2 < 0.1)&&(currentL3 < 0.1))&&((Power > phaseVoltageL1)&&(Power > phaseVoltageL2)&&(Power > phaseVoltageL3) )  )
        return;

    //This rounds floats to 3 decimal places
    /// float newvar = (float)(((int)(oldvar * 1000 + .5)) / 1000); 
    phaseVoltageL1 = (float)(((int)(phaseVoltageL1 * 1000 + .5)) / 1000);
 80a0f76:	496c      	ldr	r1, [pc, #432]	; (80a1128 <_Z15add_Measurementfffffffffmi6String.part.9+0x1bc>)
    //DEBUGPORT.println(time);
    DEBUGPORT.print("MQTT>\tCallback function is called at: ");
    DEBUGPORT.println(Time.format(time, TIME_FORMAT_DEFAULT));
}

void add_Measurement(float phaseVoltageL1, float phaseVoltageL2, float phaseVoltageL3, float currentL1, float currentL2, float currentL3,  float Power, float Energy, float Frequency, unsigned long Timestamp, int socketId=0, String userId="00") {
 80a0f78:	4616      	mov	r6, r2
 80a0f7a:	461d      	mov	r5, r3
    if (((currentL1 < 0.1)&&(currentL2 < 0.1)&&(currentL3 < 0.1))&&((Power > phaseVoltageL1)&&(Power > phaseVoltageL2)&&(Power > phaseVoltageL3) )  )
        return;

    //This rounds floats to 3 decimal places
    /// float newvar = (float)(((int)(oldvar * 1000 + .5)) / 1000); 
    phaseVoltageL1 = (float)(((int)(phaseVoltageL1 * 1000 + .5)) / 1000);
 80a0f7c:	f004 fe7a 	bl	80a5c74 <__aeabi_fmul>
 80a0f80:	f004 f9ce 	bl	80a5320 <__aeabi_f2d>
 80a0f84:	2200      	movs	r2, #0
 80a0f86:	4b69      	ldr	r3, [pc, #420]	; (80a112c <_Z15add_Measurementfffffffffmi6String.part.9+0x1c0>)
 80a0f88:	f004 f86c 	bl	80a5064 <__adddf3>
 80a0f8c:	f004 fccc 	bl	80a5928 <__aeabi_d2iz>
 80a0f90:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 80a0f94:	fb90 faf4 	sdiv	sl, r0, r4
    phaseVoltageL2 = (float)(((int)(phaseVoltageL2 * 1000 + .5)) / 1000);
 80a0f98:	4963      	ldr	r1, [pc, #396]	; (80a1128 <_Z15add_Measurementfffffffffmi6String.part.9+0x1bc>)
 80a0f9a:	4638      	mov	r0, r7
 80a0f9c:	f004 fe6a 	bl	80a5c74 <__aeabi_fmul>
 80a0fa0:	f004 f9be 	bl	80a5320 <__aeabi_f2d>
 80a0fa4:	2200      	movs	r2, #0
 80a0fa6:	4b61      	ldr	r3, [pc, #388]	; (80a112c <_Z15add_Measurementfffffffffmi6String.part.9+0x1c0>)
 80a0fa8:	f004 f85c 	bl	80a5064 <__adddf3>
 80a0fac:	f004 fcbc 	bl	80a5928 <__aeabi_d2iz>
    phaseVoltageL3 = (float)(((int)(phaseVoltageL3 * 1000 + .5)) / 1000);
 80a0fb0:	495d      	ldr	r1, [pc, #372]	; (80a1128 <_Z15add_Measurementfffffffffmi6String.part.9+0x1bc>)
        return;

    //This rounds floats to 3 decimal places
    /// float newvar = (float)(((int)(oldvar * 1000 + .5)) / 1000); 
    phaseVoltageL1 = (float)(((int)(phaseVoltageL1 * 1000 + .5)) / 1000);
    phaseVoltageL2 = (float)(((int)(phaseVoltageL2 * 1000 + .5)) / 1000);
 80a0fb2:	fb90 f9f4 	sdiv	r9, r0, r4
    phaseVoltageL3 = (float)(((int)(phaseVoltageL3 * 1000 + .5)) / 1000);
 80a0fb6:	4630      	mov	r0, r6
 80a0fb8:	f004 fe5c 	bl	80a5c74 <__aeabi_fmul>
 80a0fbc:	f004 f9b0 	bl	80a5320 <__aeabi_f2d>
 80a0fc0:	2200      	movs	r2, #0
 80a0fc2:	4b5a      	ldr	r3, [pc, #360]	; (80a112c <_Z15add_Measurementfffffffffmi6String.part.9+0x1c0>)
 80a0fc4:	f004 f84e 	bl	80a5064 <__adddf3>
 80a0fc8:	f004 fcae 	bl	80a5928 <__aeabi_d2iz>
    currentL1 = (float)(((int)(currentL1 * 1000 + .5)) / 1000);
 80a0fcc:	4956      	ldr	r1, [pc, #344]	; (80a1128 <_Z15add_Measurementfffffffffmi6String.part.9+0x1bc>)

    //This rounds floats to 3 decimal places
    /// float newvar = (float)(((int)(oldvar * 1000 + .5)) / 1000); 
    phaseVoltageL1 = (float)(((int)(phaseVoltageL1 * 1000 + .5)) / 1000);
    phaseVoltageL2 = (float)(((int)(phaseVoltageL2 * 1000 + .5)) / 1000);
    phaseVoltageL3 = (float)(((int)(phaseVoltageL3 * 1000 + .5)) / 1000);
 80a0fce:	fb90 f8f4 	sdiv	r8, r0, r4
    currentL1 = (float)(((int)(currentL1 * 1000 + .5)) / 1000);
 80a0fd2:	4628      	mov	r0, r5
 80a0fd4:	f004 fe4e 	bl	80a5c74 <__aeabi_fmul>
 80a0fd8:	f004 f9a2 	bl	80a5320 <__aeabi_f2d>
 80a0fdc:	2200      	movs	r2, #0
 80a0fde:	4b53      	ldr	r3, [pc, #332]	; (80a112c <_Z15add_Measurementfffffffffmi6String.part.9+0x1c0>)
 80a0fe0:	f004 f840 	bl	80a5064 <__adddf3>
 80a0fe4:	f004 fca0 	bl	80a5928 <__aeabi_d2iz>
    currentL2 = (float)(((int)(currentL2 * 1000 + .5)) / 1000);
 80a0fe8:	494f      	ldr	r1, [pc, #316]	; (80a1128 <_Z15add_Measurementfffffffffmi6String.part.9+0x1bc>)
    //This rounds floats to 3 decimal places
    /// float newvar = (float)(((int)(oldvar * 1000 + .5)) / 1000); 
    phaseVoltageL1 = (float)(((int)(phaseVoltageL1 * 1000 + .5)) / 1000);
    phaseVoltageL2 = (float)(((int)(phaseVoltageL2 * 1000 + .5)) / 1000);
    phaseVoltageL3 = (float)(((int)(phaseVoltageL3 * 1000 + .5)) / 1000);
    currentL1 = (float)(((int)(currentL1 * 1000 + .5)) / 1000);
 80a0fea:	fb90 f7f4 	sdiv	r7, r0, r4
    currentL2 = (float)(((int)(currentL2 * 1000 + .5)) / 1000);
 80a0fee:	9898      	ldr	r0, [sp, #608]	; 0x260
 80a0ff0:	f004 fe40 	bl	80a5c74 <__aeabi_fmul>
 80a0ff4:	f004 f994 	bl	80a5320 <__aeabi_f2d>
 80a0ff8:	2200      	movs	r2, #0
 80a0ffa:	4b4c      	ldr	r3, [pc, #304]	; (80a112c <_Z15add_Measurementfffffffffmi6String.part.9+0x1c0>)
 80a0ffc:	f004 f832 	bl	80a5064 <__adddf3>
 80a1000:	f004 fc92 	bl	80a5928 <__aeabi_d2iz>
    currentL3 = (float)(((int)(currentL3 * 1000 + .5)) / 1000);
 80a1004:	4948      	ldr	r1, [pc, #288]	; (80a1128 <_Z15add_Measurementfffffffffmi6String.part.9+0x1bc>)
    /// float newvar = (float)(((int)(oldvar * 1000 + .5)) / 1000); 
    phaseVoltageL1 = (float)(((int)(phaseVoltageL1 * 1000 + .5)) / 1000);
    phaseVoltageL2 = (float)(((int)(phaseVoltageL2 * 1000 + .5)) / 1000);
    phaseVoltageL3 = (float)(((int)(phaseVoltageL3 * 1000 + .5)) / 1000);
    currentL1 = (float)(((int)(currentL1 * 1000 + .5)) / 1000);
    currentL2 = (float)(((int)(currentL2 * 1000 + .5)) / 1000);
 80a1006:	fb90 f6f4 	sdiv	r6, r0, r4
    currentL3 = (float)(((int)(currentL3 * 1000 + .5)) / 1000);
 80a100a:	9899      	ldr	r0, [sp, #612]	; 0x264
 80a100c:	f004 fe32 	bl	80a5c74 <__aeabi_fmul>
 80a1010:	f004 f986 	bl	80a5320 <__aeabi_f2d>
 80a1014:	2200      	movs	r2, #0
 80a1016:	4b45      	ldr	r3, [pc, #276]	; (80a112c <_Z15add_Measurementfffffffffmi6String.part.9+0x1c0>)
 80a1018:	f004 f824 	bl	80a5064 <__adddf3>
 80a101c:	f004 fc84 	bl	80a5928 <__aeabi_d2iz>
    Frequency = (float)(((int)(Frequency * 1000 + .5)) / 1000);
 80a1020:	4941      	ldr	r1, [pc, #260]	; (80a1128 <_Z15add_Measurementfffffffffmi6String.part.9+0x1bc>)
    phaseVoltageL1 = (float)(((int)(phaseVoltageL1 * 1000 + .5)) / 1000);
    phaseVoltageL2 = (float)(((int)(phaseVoltageL2 * 1000 + .5)) / 1000);
    phaseVoltageL3 = (float)(((int)(phaseVoltageL3 * 1000 + .5)) / 1000);
    currentL1 = (float)(((int)(currentL1 * 1000 + .5)) / 1000);
    currentL2 = (float)(((int)(currentL2 * 1000 + .5)) / 1000);
    currentL3 = (float)(((int)(currentL3 * 1000 + .5)) / 1000);
 80a1022:	fb90 f5f4 	sdiv	r5, r0, r4
    Frequency = (float)(((int)(Frequency * 1000 + .5)) / 1000);
 80a1026:	989a      	ldr	r0, [sp, #616]	; 0x268
 80a1028:	f004 fe24 	bl	80a5c74 <__aeabi_fmul>
 80a102c:	f004 f978 	bl	80a5320 <__aeabi_f2d>
 80a1030:	4b3e      	ldr	r3, [pc, #248]	; (80a112c <_Z15add_Measurementfffffffffmi6String.part.9+0x1c0>)
 80a1032:	2200      	movs	r2, #0
 80a1034:	f004 f816 	bl	80a5064 <__adddf3>
 80a1038:	f004 fc76 	bl	80a5928 <__aeabi_d2iz>
 80a103c:	fb90 f4f4 	sdiv	r4, r0, r4


    JsonWriterStatic<512> jsonMessage;     
 80a1040:	a804      	add	r0, sp, #16
 80a1042:	f7ff ff41 	bl	80a0ec8 <_ZN16JsonWriterStaticILj512EEC1Ev>
	 * @brief Start a new object
	 *
	 * @param jw The JsonWriter object to insert the object into
	 */
	JsonWriterAutoObject(JsonWriter *jw) : jw(jw) {
		jw->startObject();
 80a1046:	a804      	add	r0, sp, #16
 80a1048:	f7ff f9bc 	bl	80a03c4 <_ZN10JsonWriter11startObjectEv>
        {
		JsonWriterAutoObject obj(&jsonMessage);

		// Add various types of data        
        jsonMessage.insertKeyValue("V1", phaseVoltageL1);
 80a104c:	4650      	mov	r0, sl
 80a104e:	f004 fdbd 	bl	80a5bcc <__aeabi_i2f>
 80a1052:	4937      	ldr	r1, [pc, #220]	; (80a1130 <_Z15add_Measurementfffffffffmi6String.part.9+0x1c4>)
 80a1054:	4602      	mov	r2, r0
 80a1056:	a804      	add	r0, sp, #16
 80a1058:	f7ff ff44 	bl	80a0ee4 <_ZN10JsonWriter14insertKeyValueIfEEvPKcT_>
        jsonMessage.insertKeyValue("V2", phaseVoltageL2);
 80a105c:	4648      	mov	r0, r9
 80a105e:	f004 fdb5 	bl	80a5bcc <__aeabi_i2f>
 80a1062:	4934      	ldr	r1, [pc, #208]	; (80a1134 <_Z15add_Measurementfffffffffmi6String.part.9+0x1c8>)
 80a1064:	4602      	mov	r2, r0
 80a1066:	a804      	add	r0, sp, #16
 80a1068:	f7ff ff3c 	bl	80a0ee4 <_ZN10JsonWriter14insertKeyValueIfEEvPKcT_>
        jsonMessage.insertKeyValue("V3", phaseVoltageL3);
 80a106c:	4640      	mov	r0, r8
 80a106e:	f004 fdad 	bl	80a5bcc <__aeabi_i2f>
 80a1072:	4931      	ldr	r1, [pc, #196]	; (80a1138 <_Z15add_Measurementfffffffffmi6String.part.9+0x1cc>)
 80a1074:	4602      	mov	r2, r0
 80a1076:	a804      	add	r0, sp, #16
 80a1078:	f7ff ff34 	bl	80a0ee4 <_ZN10JsonWriter14insertKeyValueIfEEvPKcT_>
        jsonMessage.insertKeyValue("I1", currentL1);
 80a107c:	4638      	mov	r0, r7
 80a107e:	f004 fda5 	bl	80a5bcc <__aeabi_i2f>
 80a1082:	492e      	ldr	r1, [pc, #184]	; (80a113c <_Z15add_Measurementfffffffffmi6String.part.9+0x1d0>)
 80a1084:	4602      	mov	r2, r0
 80a1086:	a804      	add	r0, sp, #16
 80a1088:	f7ff ff2c 	bl	80a0ee4 <_ZN10JsonWriter14insertKeyValueIfEEvPKcT_>
        jsonMessage.insertKeyValue("I2", currentL2);
 80a108c:	4630      	mov	r0, r6
 80a108e:	f004 fd9d 	bl	80a5bcc <__aeabi_i2f>
 80a1092:	492b      	ldr	r1, [pc, #172]	; (80a1140 <_Z15add_Measurementfffffffffmi6String.part.9+0x1d4>)
 80a1094:	4602      	mov	r2, r0
 80a1096:	a804      	add	r0, sp, #16
 80a1098:	f7ff ff24 	bl	80a0ee4 <_ZN10JsonWriter14insertKeyValueIfEEvPKcT_>
        jsonMessage.insertKeyValue("I3", currentL3);
 80a109c:	4628      	mov	r0, r5
 80a109e:	f004 fd95 	bl	80a5bcc <__aeabi_i2f>
 80a10a2:	4928      	ldr	r1, [pc, #160]	; (80a1144 <_Z15add_Measurementfffffffffmi6String.part.9+0x1d8>)
 80a10a4:	4602      	mov	r2, r0
 80a10a6:	a804      	add	r0, sp, #16
 80a10a8:	f7ff ff1c 	bl	80a0ee4 <_ZN10JsonWriter14insertKeyValueIfEEvPKcT_>
        //jsonMessage.insertKeyValue("P", Power);
        //jsonMessage.insertKeyValue("E", Energy);
        jsonMessage.insertKeyValue("F", Frequency);
 80a10ac:	4620      	mov	r0, r4
 80a10ae:	f004 fd8d 	bl	80a5bcc <__aeabi_i2f>
 80a10b2:	4925      	ldr	r1, [pc, #148]	; (80a1148 <_Z15add_Measurementfffffffffmi6String.part.9+0x1dc>)
 80a10b4:	4602      	mov	r2, r0
 80a10b6:	a804      	add	r0, sp, #16
 80a10b8:	f7ff ff14 	bl	80a0ee4 <_ZN10JsonWriter14insertKeyValueIfEEvPKcT_>
          
		jsonMessage.insertKeyValue("UserID", userId);
 80a10bc:	999d      	ldr	r1, [sp, #628]	; 0x274
 80a10be:	4668      	mov	r0, sp
 80a10c0:	f002 fd62 	bl	80a3b88 <_ZN6StringC1ERKS_>
 80a10c4:	466a      	mov	r2, sp
 80a10c6:	4921      	ldr	r1, [pc, #132]	; (80a114c <_Z15add_Measurementfffffffffmi6String.part.9+0x1e0>)
 80a10c8:	a804      	add	r0, sp, #16
 80a10ca:	f7ff ff20 	bl	80a0f0e <_ZN10JsonWriter14insertKeyValueI6StringEEvPKcT_>
 80a10ce:	4668      	mov	r0, sp
 80a10d0:	f002 fcd4 	bl	80a3a7c <_ZN6StringD1Ev>
		jsonMessage.insertKeyValue("SocketID", socketId);
 80a10d4:	9a9c      	ldr	r2, [sp, #624]	; 0x270
 80a10d6:	491e      	ldr	r1, [pc, #120]	; (80a1150 <_Z15add_Measurementfffffffffmi6String.part.9+0x1e4>)
 80a10d8:	a804      	add	r0, sp, #16
 80a10da:	f7ff ff2f 	bl	80a0f3c <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
	 * Uses templates so you can pass any type object that's supported by insertValue() overloads,
	 * for example: bool, int, float, double, const char *.
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
 80a10de:	a804      	add	r0, sp, #16
 80a10e0:	f001 fe2e 	bl	80a2d40 <_ZN10JsonWriter20insertCheckSeparatorEv>
	 * @brief Inserts a quoted string value. This escapes special characters and encodes utf-8.
	 *
	 * You would normally use insertKeyValue() or insertArrayValue() instead of calling this directly
	 * as those functions take care of inserting the separtators between items.
	 */
	void insertValue(const char *value) { insertString(value, true); }
 80a10e4:	2201      	movs	r2, #1
 80a10e6:	491b      	ldr	r1, [pc, #108]	; (80a1154 <_Z15add_Measurementfffffffffmi6String.part.9+0x1e8>)
 80a10e8:	a804      	add	r0, sp, #16
 80a10ea:	f001 fd9d 	bl	80a2c28 <_ZN10JsonWriter12insertStringEPKcb>
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
		insertValue(key);
		insertChar(':');
 80a10ee:	213a      	movs	r1, #58	; 0x3a
 80a10f0:	a804      	add	r0, sp, #16
 80a10f2:	f001 fd4d 	bl	80a2b90 <_ZN10JsonWriter10insertCharEc>
	 * @brief Inserts an unsigned long integer value.
	 *
	 * You would normally use insertKeyValue() or insertArrayValue() instead of calling this directly
	 * as those functions take care of inserting the separators between items.
	 */
	void insertValue(unsigned long value) { insertsprintf("%lu", value); }
 80a10f6:	9a9b      	ldr	r2, [sp, #620]	; 0x26c
 80a10f8:	4917      	ldr	r1, [pc, #92]	; (80a1158 <_Z15add_Measurementfffffffffmi6String.part.9+0x1ec>)
 80a10fa:	a804      	add	r0, sp, #16
 80a10fc:	f001 fd87 	bl	80a2c0e <_ZN10JsonWriter13insertsprintfEPKcz>

	/**
	 * @brief End the object
	 */
	~JsonWriterAutoObject() {
		jw->finishObjectOrArray();
 80a1100:	a804      	add	r0, sp, #16
 80a1102:	f001 fd53 	bl	80a2bac <_ZN10JsonWriter19finishObjectOrArrayEv>
 80a1106:	2403      	movs	r4, #3
		jsonMessage.insertKeyValue("Time", Timestamp);
	    }


	for(int i=0; i<3; i++) {
		if(client.publish("HANevse/photonMeasure", jsonMessage.getBuffer())) {
 80a1108:	9a05      	ldr	r2, [sp, #20]
 80a110a:	4914      	ldr	r1, [pc, #80]	; (80a115c <_Z15add_Measurementfffffffffmi6String.part.9+0x1f0>)
 80a110c:	4814      	ldr	r0, [pc, #80]	; (80a1160 <_Z15add_Measurementfffffffffmi6String.part.9+0x1f4>)
 80a110e:	f001 fb6a 	bl	80a27e6 <_ZN4MQTT7publishEPKcS1_>
 80a1112:	b908      	cbnz	r0, 80a1118 <_Z15add_Measurementfffffffffmi6String.part.9+0x1ac>
		jsonMessage.insertKeyValue("SocketID", socketId);
		jsonMessage.insertKeyValue("Time", Timestamp);
	    }


	for(int i=0; i<3; i++) {
 80a1114:	3c01      	subs	r4, #1
 80a1116:	d1f7      	bne.n	80a1108 <_Z15add_Measurementfffffffffmi6String.part.9+0x19c>
    currentL2 = (float)(((int)(currentL2 * 1000 + .5)) / 1000);
    currentL3 = (float)(((int)(currentL3 * 1000 + .5)) / 1000);
    Frequency = (float)(((int)(Frequency * 1000 + .5)) / 1000);


    JsonWriterStatic<512> jsonMessage;     
 80a1118:	a804      	add	r0, sp, #16
 80a111a:	f7ff f8bf 	bl	80a029c <_ZN16JsonWriterStaticILj512EED1Ev>
	for(int i=0; i<3; i++) {
		if(client.publish("HANevse/photonMeasure", jsonMessage.getBuffer())) {
			break;
		}
	}
}
 80a111e:	f50d 7d10 	add.w	sp, sp, #576	; 0x240
 80a1122:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a1126:	bf00      	nop
 80a1128:	447a0000 	.word	0x447a0000
 80a112c:	3fe00000 	.word	0x3fe00000
 80a1130:	080a98bb 	.word	0x080a98bb
 80a1134:	080a98be 	.word	0x080a98be
 80a1138:	080a98c1 	.word	0x080a98c1
 80a113c:	080a98c4 	.word	0x080a98c4
 80a1140:	080a98c7 	.word	0x080a98c7
 80a1144:	080a98ca 	.word	0x080a98ca
 80a1148:	080a98cd 	.word	0x080a98cd
 80a114c:	080a98cf 	.word	0x080a98cf
 80a1150:	080a98d6 	.word	0x080a98d6
 80a1154:	080a9933 	.word	0x080a9933
 80a1158:	080a98df 	.word	0x080a98df
 80a115c:	080a98e3 	.word	0x080a98e3
 80a1160:	200002c4 	.word	0x200002c4
 80a1164:	00000000 	.word	0x00000000

080a1168 <_Z15add_Measurementfffffffffmi6String>:
    //DEBUGPORT.println(time);
    DEBUGPORT.print("MQTT>\tCallback function is called at: ");
    DEBUGPORT.println(Time.format(time, TIME_FORMAT_DEFAULT));
}

void add_Measurement(float phaseVoltageL1, float phaseVoltageL2, float phaseVoltageL3, float currentL1, float currentL2, float currentL3,  float Power, float Energy, float Frequency, unsigned long Timestamp, int socketId=0, String userId="00") {
 80a1168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a116c:	461c      	mov	r4, r3
 80a116e:	b085      	sub	sp, #20
 80a1170:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80a1172:	4680      	mov	r8, r0
 80a1174:	9301      	str	r3, [sp, #4]
 80a1176:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80a1178:	4689      	mov	r9, r1
 80a117a:	9302      	str	r3, [sp, #8]
 80a117c:	9b15      	ldr	r3, [sp, #84]	; 0x54
	// if(userId != "00") {
	// 	userStr = "%" + userId;
	// }
	// String Body = String(phaseVoltageL1, 2) + "%" + String(phaseVoltageL2, 2) + "%" + String(phaseVoltageL3, 2) + "%"  + String(currentL1, 2) + "%" + String(currentL2, 2) + "%" + String(currentL3, 2) + "%" + String(Power, 2) + "%" + String(Energy, 2) + "%" + String(Frequency, 2) + "%" + String(Timestamp) + socketStr + userStr + "%";
	
    if ((currentL1 > 50.0)||(currentL2 > 50.0)||(currentL3 > 50.0))
 80a117e:	492e      	ldr	r1, [pc, #184]	; (80a1238 <_Z15add_Measurementfffffffffmi6String+0xd0>)
 80a1180:	4620      	mov	r0, r4
    //DEBUGPORT.println(time);
    DEBUGPORT.print("MQTT>\tCallback function is called at: ");
    DEBUGPORT.println(Time.format(time, TIME_FORMAT_DEFAULT));
}

void add_Measurement(float phaseVoltageL1, float phaseVoltageL2, float phaseVoltageL3, float currentL1, float currentL2, float currentL3,  float Power, float Energy, float Frequency, unsigned long Timestamp, int socketId=0, String userId="00") {
 80a1182:	4692      	mov	sl, r2
 80a1184:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80a1186:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80a1188:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80a118a:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
 80a118e:	9303      	str	r3, [sp, #12]
	// if(userId != "00") {
	// 	userStr = "%" + userId;
	// }
	// String Body = String(phaseVoltageL1, 2) + "%" + String(phaseVoltageL2, 2) + "%" + String(phaseVoltageL3, 2) + "%"  + String(currentL1, 2) + "%" + String(currentL2, 2) + "%" + String(currentL3, 2) + "%" + String(Power, 2) + "%" + String(Energy, 2) + "%" + String(Frequency, 2) + "%" + String(Timestamp) + socketStr + userStr + "%";
	
    if ((currentL1 > 50.0)||(currentL2 > 50.0)||(currentL3 > 50.0))
 80a1190:	f004 ff2c 	bl	80a5fec <__aeabi_fcmpgt>
 80a1194:	2800      	cmp	r0, #0
 80a1196:	d148      	bne.n	80a122a <_Z15add_Measurementfffffffffmi6String+0xc2>
 80a1198:	4927      	ldr	r1, [pc, #156]	; (80a1238 <_Z15add_Measurementfffffffffmi6String+0xd0>)
 80a119a:	4628      	mov	r0, r5
 80a119c:	f004 ff26 	bl	80a5fec <__aeabi_fcmpgt>
 80a11a0:	2800      	cmp	r0, #0
 80a11a2:	d142      	bne.n	80a122a <_Z15add_Measurementfffffffffmi6String+0xc2>
 80a11a4:	4924      	ldr	r1, [pc, #144]	; (80a1238 <_Z15add_Measurementfffffffffmi6String+0xd0>)
 80a11a6:	4630      	mov	r0, r6
 80a11a8:	f004 ff20 	bl	80a5fec <__aeabi_fcmpgt>
 80a11ac:	2800      	cmp	r0, #0
 80a11ae:	d13c      	bne.n	80a122a <_Z15add_Measurementfffffffffmi6String+0xc2>
        return;
    if (((currentL1 < 0.1)&&(currentL2 < 0.1)&&(currentL3 < 0.1))&&((Power > phaseVoltageL1)&&(Power > phaseVoltageL2)&&(Power > phaseVoltageL3) )  )
 80a11b0:	4620      	mov	r0, r4
 80a11b2:	f004 f8b5 	bl	80a5320 <__aeabi_f2d>
 80a11b6:	a31e      	add	r3, pc, #120	; (adr r3, 80a1230 <_Z15add_Measurementfffffffffmi6String+0xc8>)
 80a11b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a11bc:	f004 fb76 	bl	80a58ac <__aeabi_dcmplt>
 80a11c0:	b300      	cbz	r0, 80a1204 <_Z15add_Measurementfffffffffmi6String+0x9c>
 80a11c2:	4628      	mov	r0, r5
 80a11c4:	f004 f8ac 	bl	80a5320 <__aeabi_f2d>
 80a11c8:	a319      	add	r3, pc, #100	; (adr r3, 80a1230 <_Z15add_Measurementfffffffffmi6String+0xc8>)
 80a11ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a11ce:	f004 fb6d 	bl	80a58ac <__aeabi_dcmplt>
 80a11d2:	b1b8      	cbz	r0, 80a1204 <_Z15add_Measurementfffffffffmi6String+0x9c>
 80a11d4:	4630      	mov	r0, r6
 80a11d6:	f004 f8a3 	bl	80a5320 <__aeabi_f2d>
 80a11da:	a315      	add	r3, pc, #84	; (adr r3, 80a1230 <_Z15add_Measurementfffffffffmi6String+0xc8>)
 80a11dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a11e0:	f004 fb64 	bl	80a58ac <__aeabi_dcmplt>
 80a11e4:	b170      	cbz	r0, 80a1204 <_Z15add_Measurementfffffffffmi6String+0x9c>
 80a11e6:	4641      	mov	r1, r8
 80a11e8:	4638      	mov	r0, r7
 80a11ea:	f004 feff 	bl	80a5fec <__aeabi_fcmpgt>
 80a11ee:	b148      	cbz	r0, 80a1204 <_Z15add_Measurementfffffffffmi6String+0x9c>
 80a11f0:	4649      	mov	r1, r9
 80a11f2:	4638      	mov	r0, r7
 80a11f4:	f004 fefa 	bl	80a5fec <__aeabi_fcmpgt>
 80a11f8:	b120      	cbz	r0, 80a1204 <_Z15add_Measurementfffffffffmi6String+0x9c>
 80a11fa:	4651      	mov	r1, sl
 80a11fc:	4638      	mov	r0, r7
 80a11fe:	f004 fef5 	bl	80a5fec <__aeabi_fcmpgt>
 80a1202:	b990      	cbnz	r0, 80a122a <_Z15add_Measurementfffffffffmi6String+0xc2>
 80a1204:	9b03      	ldr	r3, [sp, #12]
 80a1206:	4652      	mov	r2, sl
 80a1208:	9313      	str	r3, [sp, #76]	; 0x4c
 80a120a:	9b02      	ldr	r3, [sp, #8]
 80a120c:	4649      	mov	r1, r9
 80a120e:	9312      	str	r3, [sp, #72]	; 0x48
 80a1210:	9b01      	ldr	r3, [sp, #4]
 80a1212:	4640      	mov	r0, r8
 80a1214:	9311      	str	r3, [sp, #68]	; 0x44
 80a1216:	4623      	mov	r3, r4
 80a1218:	f8cd b040 	str.w	fp, [sp, #64]	; 0x40
 80a121c:	960f      	str	r6, [sp, #60]	; 0x3c
 80a121e:	950e      	str	r5, [sp, #56]	; 0x38
	for(int i=0; i<3; i++) {
		if(client.publish("HANevse/photonMeasure", jsonMessage.getBuffer())) {
			break;
		}
	}
}
 80a1220:	b005      	add	sp, #20
 80a1222:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a1226:	f7ff bea1 	b.w	80a0f6c <_Z15add_Measurementfffffffffmi6String.part.9>
 80a122a:	b005      	add	sp, #20
 80a122c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a1230:	9999999a 	.word	0x9999999a
 80a1234:	3fb99999 	.word	0x3fb99999
 80a1238:	42480000 	.word	0x42480000

080a123c <_ZN10JsonWriter14insertKeyValueIlEEvPKcT_>:
	 *
	 * Uses templates so you can pass any type object that's supported by insertValue() overloads,
	 * for example: bool, int, float, double, const char *.
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
 80a123c:	b570      	push	{r4, r5, r6, lr}
 80a123e:	4604      	mov	r4, r0
 80a1240:	460e      	mov	r6, r1
 80a1242:	4615      	mov	r5, r2
		insertCheckSeparator();
 80a1244:	f001 fd7c 	bl	80a2d40 <_ZN10JsonWriter20insertCheckSeparatorEv>
	 * @brief Inserts a quoted string value. This escapes special characters and encodes utf-8.
	 *
	 * You would normally use insertKeyValue() or insertArrayValue() instead of calling this directly
	 * as those functions take care of inserting the separtators between items.
	 */
	void insertValue(const char *value) { insertString(value, true); }
 80a1248:	2201      	movs	r2, #1
 80a124a:	4631      	mov	r1, r6
 80a124c:	4620      	mov	r0, r4
 80a124e:	f001 fceb 	bl	80a2c28 <_ZN10JsonWriter12insertStringEPKcb>
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
		insertValue(key);
		insertChar(':');
 80a1252:	4620      	mov	r0, r4
 80a1254:	213a      	movs	r1, #58	; 0x3a
 80a1256:	f001 fc9b 	bl	80a2b90 <_ZN10JsonWriter10insertCharEc>
	 * @brief Inserts a long integer value.
	 *
	 * You would normally use insertKeyValue() or insertArrayValue() instead of calling this directly
	 * as those functions take care of inserting the separators between items.
	 */
	void insertValue(long value) { insertsprintf("%ld", value); }
 80a125a:	462a      	mov	r2, r5
 80a125c:	4620      	mov	r0, r4
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
		insertValue(key);
		insertChar(':');
		insertValue(value);
	}
 80a125e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	 * @brief Inserts a long integer value.
	 *
	 * You would normally use insertKeyValue() or insertArrayValue() instead of calling this directly
	 * as those functions take care of inserting the separators between items.
	 */
	void insertValue(long value) { insertsprintf("%ld", value); }
 80a1262:	4901      	ldr	r1, [pc, #4]	; (80a1268 <_ZN10JsonWriter14insertKeyValueIlEEvPKcT_+0x2c>)
 80a1264:	f001 bcd3 	b.w	80a2c0e <_ZN10JsonWriter13insertsprintfEPKcz>
 80a1268:	080a98f9 	.word	0x080a98f9

080a126c <_Z12readRFIDCardi>:
    DEBUGPORT.println("Approximate your card to the reader...");
    DEBUGPORT.println();    
    return 1;
}

bool readRFIDCard(int Charger) {
 80a126c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   // DEBUGPORT.print("readCard>\t");
    bool Authorized = true;
    Pianswer = 0;
 80a1270:	4b83      	ldr	r3, [pc, #524]	; (80a1480 <_Z12readRFIDCardi+0x214>)
 80a1272:	2400      	movs	r4, #0
    if(Charger==1+CHARGEROFFSET)
 80a1274:	2801      	cmp	r0, #1
    DEBUGPORT.println("Approximate your card to the reader...");
    DEBUGPORT.println();    
    return 1;
}

bool readRFIDCard(int Charger) {
 80a1276:	f5ad 7d15 	sub.w	sp, sp, #596	; 0x254
   // DEBUGPORT.print("readCard>\t");
    bool Authorized = true;
    Pianswer = 0;
 80a127a:	801c      	strh	r4, [r3, #0]
    if(Charger==1+CHARGEROFFSET)
 80a127c:	d16a      	bne.n	80a1354 <_Z12readRFIDCardi+0xe8>
    {
      // Look for new cards
        if ( ! mfrc522_Charger1.PICC_IsNewCardPresent()) 
 80a127e:	4881      	ldr	r0, [pc, #516]	; (80a1484 <_Z12readRFIDCardi+0x218>)
 80a1280:	f000 feb5 	bl	80a1fee <_ZN7MFRC52221PICC_IsNewCardPresentEv>
 80a1284:	4e7f      	ldr	r6, [pc, #508]	; (80a1484 <_Z12readRFIDCardi+0x218>)
 80a1286:	2800      	cmp	r0, #0
 80a1288:	f000 80ea 	beq.w	80a1460 <_Z12readRFIDCardi+0x1f4>
        {
            return false;
        }
        // Select one of the cards
        if ( ! mfrc522_Charger1.PICC_ReadCardSerial()) 
 80a128c:	4630      	mov	r0, r6
 80a128e:	f001 f80d 	bl	80a22ac <_ZN7MFRC52219PICC_ReadCardSerialEv>
 80a1292:	2800      	cmp	r0, #0
 80a1294:	f000 80e4 	beq.w	80a1460 <_Z12readRFIDCardi+0x1f4>
        {
            return false;
        }
  
        //Show UID on serial monitor
        DEBUGPORT.print("readCard>\tUID tag on charger1:");
 80a1298:	f003 f9e8 	bl	80a466c <_Z16_fetch_usbserialv>
 80a129c:	497a      	ldr	r1, [pc, #488]	; (80a1488 <_Z12readRFIDCardi+0x21c>)
 80a129e:	f002 fdcf 	bl	80a3e40 <_ZN5Print5printEPKc>
        String content = "";        
 80a12a2:	497a      	ldr	r1, [pc, #488]	; (80a148c <_Z12readRFIDCardi+0x220>)
 80a12a4:	4668      	mov	r0, sp
 80a12a6:	f002 fc30 	bl	80a3b0a <_ZN6StringC1EPK19__FlashStringHelper>
        //byte letter;
        for (byte i = 0; i < mfrc522_Charger1.uid.size; i++) 
 80a12aa:	46b1      	mov	r9, r6
        {
            DEBUGPORT.print(mfrc522_Charger1.uid.uidByte[i] < 0x10 ? " 0" : " ");
 80a12ac:	f8df 8208 	ldr.w	r8, [pc, #520]	; 80a14b8 <_Z12readRFIDCardi+0x24c>
 80a12b0:	4f77      	ldr	r7, [pc, #476]	; (80a1490 <_Z12readRFIDCardi+0x224>)
  
        //Show UID on serial monitor
        DEBUGPORT.print("readCard>\tUID tag on charger1:");
        String content = "";        
        //byte letter;
        for (byte i = 0; i < mfrc522_Charger1.uid.size; i++) 
 80a12b2:	7833      	ldrb	r3, [r6, #0]
 80a12b4:	b2e5      	uxtb	r5, r4
 80a12b6:	42ab      	cmp	r3, r5
 80a12b8:	d92c      	bls.n	80a1314 <_Z12readRFIDCardi+0xa8>
        {
            DEBUGPORT.print(mfrc522_Charger1.uid.uidByte[i] < 0x10 ? " 0" : " ");
 80a12ba:	444d      	add	r5, r9
 80a12bc:	f003 f9d6 	bl	80a466c <_Z16_fetch_usbserialv>
 80a12c0:	7869      	ldrb	r1, [r5, #1]
 80a12c2:	3401      	adds	r4, #1
 80a12c4:	290f      	cmp	r1, #15
 80a12c6:	bf94      	ite	ls
 80a12c8:	4641      	movls	r1, r8
 80a12ca:	4639      	movhi	r1, r7
 80a12cc:	f002 fdb8 	bl	80a3e40 <_ZN5Print5printEPKc>
            DEBUGPORT.print(mfrc522_Charger1.uid.uidByte[i], HEX);
 80a12d0:	f003 f9cc 	bl	80a466c <_Z16_fetch_usbserialv>
 80a12d4:	2210      	movs	r2, #16
 80a12d6:	7869      	ldrb	r1, [r5, #1]
 80a12d8:	f002 fdcf 	bl	80a3e7a <_ZN5Print11printNumberEmh>
            content.concat(String(mfrc522_Charger1.uid.uidByte[i] < 0x10 ? " 0" : " "));
 80a12dc:	7869      	ldrb	r1, [r5, #1]
 80a12de:	a808      	add	r0, sp, #32
 80a12e0:	290f      	cmp	r1, #15
 80a12e2:	bf94      	ite	ls
 80a12e4:	4641      	movls	r1, r8
 80a12e6:	4639      	movhi	r1, r7
 80a12e8:	f002 fc0f 	bl	80a3b0a <_ZN6StringC1EPK19__FlashStringHelper>
 80a12ec:	a908      	add	r1, sp, #32
 80a12ee:	4668      	mov	r0, sp
 80a12f0:	f002 fce8 	bl	80a3cc4 <_ZN6String6concatERKS_>
 80a12f4:	a808      	add	r0, sp, #32
 80a12f6:	f002 fbc1 	bl	80a3a7c <_ZN6StringD1Ev>
            content.concat(String(mfrc522_Charger1.uid.uidByte[i], HEX));
 80a12fa:	2210      	movs	r2, #16
 80a12fc:	7869      	ldrb	r1, [r5, #1]
 80a12fe:	a808      	add	r0, sp, #32
 80a1300:	f002 fc66 	bl	80a3bd0 <_ZN6StringC1Ehh>
 80a1304:	a908      	add	r1, sp, #32
 80a1306:	4668      	mov	r0, sp
 80a1308:	f002 fcdc 	bl	80a3cc4 <_ZN6String6concatERKS_>
 80a130c:	a808      	add	r0, sp, #32
 80a130e:	f002 fbb5 	bl	80a3a7c <_ZN6StringD1Ev>
  
        //Show UID on serial monitor
        DEBUGPORT.print("readCard>\tUID tag on charger1:");
        String content = "";        
        //byte letter;
        for (byte i = 0; i < mfrc522_Charger1.uid.size; i++) 
 80a1312:	e7ce      	b.n	80a12b2 <_Z12readRFIDCardi+0x46>
            DEBUGPORT.print(mfrc522_Charger1.uid.uidByte[i] < 0x10 ? " 0" : " ");
            DEBUGPORT.print(mfrc522_Charger1.uid.uidByte[i], HEX);
            content.concat(String(mfrc522_Charger1.uid.uidByte[i] < 0x10 ? " 0" : " "));
            content.concat(String(mfrc522_Charger1.uid.uidByte[i], HEX));
        }
        JsonWriterStatic<512> jsonMessage;
 80a1314:	a808      	add	r0, sp, #32
 80a1316:	f7ff fdd7 	bl	80a0ec8 <_ZN16JsonWriterStaticILj512EEC1Ev>

        //Authorized=testUser(content,Charger);
        UIDtagCharger1=content.substring(1); //?????? why does it start at 1?
 80a131a:	2201      	movs	r2, #1
 80a131c:	4669      	mov	r1, sp
 80a131e:	a804      	add	r0, sp, #16
 80a1320:	f002 fd52 	bl	80a3dc8 <_ZNK6String9substringEj>
 80a1324:	a904      	add	r1, sp, #16
 80a1326:	485b      	ldr	r0, [pc, #364]	; (80a1494 <_Z12readRFIDCardi+0x228>)
 80a1328:	f002 fc39 	bl	80a3b9e <_ZN6StringaSEOS_>
 80a132c:	a804      	add	r0, sp, #16
 80a132e:	f002 fba5 	bl	80a3a7c <_ZN6StringD1Ev>
	 * @brief Start a new object
	 *
	 * @param jw The JsonWriter object to insert the object into
	 */
	JsonWriterAutoObject(JsonWriter *jw) : jw(jw) {
		jw->startObject();
 80a1332:	a808      	add	r0, sp, #32
 80a1334:	f7ff f846 	bl	80a03c4 <_ZN10JsonWriter11startObjectEv>

        {
		JsonWriterAutoObject obj(&jsonMessage);

		jsonMessage.insertKeyValue("UserId", UIDtagCharger1);
 80a1338:	4956      	ldr	r1, [pc, #344]	; (80a1494 <_Z12readRFIDCardi+0x228>)
 80a133a:	a804      	add	r0, sp, #16
 80a133c:	f002 fc24 	bl	80a3b88 <_ZN6StringC1ERKS_>
 80a1340:	aa04      	add	r2, sp, #16
 80a1342:	4955      	ldr	r1, [pc, #340]	; (80a1498 <_Z12readRFIDCardi+0x22c>)
 80a1344:	a808      	add	r0, sp, #32
 80a1346:	f7ff fde2 	bl	80a0f0e <_ZN10JsonWriter14insertKeyValueI6StringEEvPKcT_>
 80a134a:	a804      	add	r0, sp, #16
 80a134c:	f002 fb96 	bl	80a3a7c <_ZN6StringD1Ev>
        jsonMessage.insertKeyValue("Charger", Charger);
 80a1350:	2201      	movs	r2, #1
 80a1352:	e06b      	b.n	80a142c <_Z12readRFIDCardi+0x1c0>
		jsonMessage.insertKeyValue("StartTime", Time.now());
	    }
        client.publish("HANevse/updateUser", jsonMessage.getBuffer());
    }
    if(Charger==2+CHARGEROFFSET)
 80a1354:	2802      	cmp	r0, #2
 80a1356:	f040 8085 	bne.w	80a1464 <_Z12readRFIDCardi+0x1f8>
    {
    
        // Look for new cards
        if ( ! mfrc522_Charger2.PICC_IsNewCardPresent()) 
 80a135a:	4850      	ldr	r0, [pc, #320]	; (80a149c <_Z12readRFIDCardi+0x230>)
 80a135c:	f000 fe47 	bl	80a1fee <_ZN7MFRC52221PICC_IsNewCardPresentEv>
 80a1360:	4e4e      	ldr	r6, [pc, #312]	; (80a149c <_Z12readRFIDCardi+0x230>)
 80a1362:	2800      	cmp	r0, #0
 80a1364:	d07c      	beq.n	80a1460 <_Z12readRFIDCardi+0x1f4>
        {
            return false;
        }
        // Select one of the cards
        if ( ! mfrc522_Charger2.PICC_ReadCardSerial()) 
 80a1366:	4630      	mov	r0, r6
 80a1368:	f000 ffa0 	bl	80a22ac <_ZN7MFRC52219PICC_ReadCardSerialEv>
 80a136c:	2800      	cmp	r0, #0
 80a136e:	d077      	beq.n	80a1460 <_Z12readRFIDCardi+0x1f4>
        {
            return false;
        }
        //DEBUGPORT.println("Read something on charger2");
        //Show UID on serial monitor
        DEBUGPORT.print("readCard>\tUID tag on charger2:");
 80a1370:	f003 f97c 	bl	80a466c <_Z16_fetch_usbserialv>
 80a1374:	494a      	ldr	r1, [pc, #296]	; (80a14a0 <_Z12readRFIDCardi+0x234>)
 80a1376:	f002 fd63 	bl	80a3e40 <_ZN5Print5printEPKc>
        String content = "";        
 80a137a:	4944      	ldr	r1, [pc, #272]	; (80a148c <_Z12readRFIDCardi+0x220>)
 80a137c:	4668      	mov	r0, sp
 80a137e:	f002 fbc4 	bl	80a3b0a <_ZN6StringC1EPK19__FlashStringHelper>
 80a1382:	4625      	mov	r5, r4
        //byte letter;
        for (byte i = 0; i < mfrc522_Charger2.uid.size; i++) 
 80a1384:	46b1      	mov	r9, r6
        {
            DEBUGPORT.print(mfrc522_Charger2.uid.uidByte[i] < 0x10 ? " 0" : " ");
 80a1386:	f8df 8130 	ldr.w	r8, [pc, #304]	; 80a14b8 <_Z12readRFIDCardi+0x24c>
 80a138a:	4f41      	ldr	r7, [pc, #260]	; (80a1490 <_Z12readRFIDCardi+0x224>)
        //DEBUGPORT.println("Read something on charger2");
        //Show UID on serial monitor
        DEBUGPORT.print("readCard>\tUID tag on charger2:");
        String content = "";        
        //byte letter;
        for (byte i = 0; i < mfrc522_Charger2.uid.size; i++) 
 80a138c:	7833      	ldrb	r3, [r6, #0]
 80a138e:	b2ec      	uxtb	r4, r5
 80a1390:	42a3      	cmp	r3, r4
 80a1392:	d92c      	bls.n	80a13ee <_Z12readRFIDCardi+0x182>
        {
            DEBUGPORT.print(mfrc522_Charger2.uid.uidByte[i] < 0x10 ? " 0" : " ");
 80a1394:	444c      	add	r4, r9
 80a1396:	f003 f969 	bl	80a466c <_Z16_fetch_usbserialv>
 80a139a:	7861      	ldrb	r1, [r4, #1]
 80a139c:	3501      	adds	r5, #1
 80a139e:	290f      	cmp	r1, #15
 80a13a0:	bf94      	ite	ls
 80a13a2:	4641      	movls	r1, r8
 80a13a4:	4639      	movhi	r1, r7
 80a13a6:	f002 fd4b 	bl	80a3e40 <_ZN5Print5printEPKc>
            DEBUGPORT.print(mfrc522_Charger2.uid.uidByte[i], HEX);
 80a13aa:	f003 f95f 	bl	80a466c <_Z16_fetch_usbserialv>
 80a13ae:	2210      	movs	r2, #16
 80a13b0:	7861      	ldrb	r1, [r4, #1]
 80a13b2:	f002 fd62 	bl	80a3e7a <_ZN5Print11printNumberEmh>
            content.concat(String(mfrc522_Charger2.uid.uidByte[i] < 0x10 ? " 0" : " "));
 80a13b6:	7861      	ldrb	r1, [r4, #1]
 80a13b8:	a808      	add	r0, sp, #32
 80a13ba:	290f      	cmp	r1, #15
 80a13bc:	bf94      	ite	ls
 80a13be:	4641      	movls	r1, r8
 80a13c0:	4639      	movhi	r1, r7
 80a13c2:	f002 fba2 	bl	80a3b0a <_ZN6StringC1EPK19__FlashStringHelper>
 80a13c6:	a908      	add	r1, sp, #32
 80a13c8:	4668      	mov	r0, sp
 80a13ca:	f002 fc7b 	bl	80a3cc4 <_ZN6String6concatERKS_>
 80a13ce:	a808      	add	r0, sp, #32
 80a13d0:	f002 fb54 	bl	80a3a7c <_ZN6StringD1Ev>
            content.concat(String(mfrc522_Charger2.uid.uidByte[i], HEX));
 80a13d4:	2210      	movs	r2, #16
 80a13d6:	7861      	ldrb	r1, [r4, #1]
 80a13d8:	a808      	add	r0, sp, #32
 80a13da:	f002 fbf9 	bl	80a3bd0 <_ZN6StringC1Ehh>
 80a13de:	a908      	add	r1, sp, #32
 80a13e0:	4668      	mov	r0, sp
 80a13e2:	f002 fc6f 	bl	80a3cc4 <_ZN6String6concatERKS_>
 80a13e6:	a808      	add	r0, sp, #32
 80a13e8:	f002 fb48 	bl	80a3a7c <_ZN6StringD1Ev>
        //DEBUGPORT.println("Read something on charger2");
        //Show UID on serial monitor
        DEBUGPORT.print("readCard>\tUID tag on charger2:");
        String content = "";        
        //byte letter;
        for (byte i = 0; i < mfrc522_Charger2.uid.size; i++) 
 80a13ec:	e7ce      	b.n	80a138c <_Z12readRFIDCardi+0x120>
            DEBUGPORT.print(mfrc522_Charger2.uid.uidByte[i], HEX);
            content.concat(String(mfrc522_Charger2.uid.uidByte[i] < 0x10 ? " 0" : " "));
            content.concat(String(mfrc522_Charger2.uid.uidByte[i], HEX));
        }
        //Authorized=testUser(content,Charger);
        UIDtagCharger2=content.substring(1);
 80a13ee:	2201      	movs	r2, #1
 80a13f0:	4669      	mov	r1, sp
 80a13f2:	a808      	add	r0, sp, #32
 80a13f4:	f002 fce8 	bl	80a3dc8 <_ZNK6String9substringEj>
 80a13f8:	a908      	add	r1, sp, #32
 80a13fa:	482a      	ldr	r0, [pc, #168]	; (80a14a4 <_Z12readRFIDCardi+0x238>)
 80a13fc:	f002 fbcf 	bl	80a3b9e <_ZN6StringaSEOS_>
 80a1400:	a808      	add	r0, sp, #32
 80a1402:	f002 fb3b 	bl	80a3a7c <_ZN6StringD1Ev>
        JsonWriterStatic<512> jsonMessage;
 80a1406:	a808      	add	r0, sp, #32
 80a1408:	f7ff fd5e 	bl	80a0ec8 <_ZN16JsonWriterStaticILj512EEC1Ev>
 80a140c:	a808      	add	r0, sp, #32
 80a140e:	f7fe ffd9 	bl	80a03c4 <_ZN10JsonWriter11startObjectEv>

        {
		JsonWriterAutoObject obj(&jsonMessage);
		
		jsonMessage.insertKeyValue("UserId", UIDtagCharger2);
 80a1412:	4924      	ldr	r1, [pc, #144]	; (80a14a4 <_Z12readRFIDCardi+0x238>)
 80a1414:	a804      	add	r0, sp, #16
 80a1416:	f002 fbb7 	bl	80a3b88 <_ZN6StringC1ERKS_>
 80a141a:	aa04      	add	r2, sp, #16
 80a141c:	491e      	ldr	r1, [pc, #120]	; (80a1498 <_Z12readRFIDCardi+0x22c>)
 80a141e:	a808      	add	r0, sp, #32
 80a1420:	f7ff fd75 	bl	80a0f0e <_ZN10JsonWriter14insertKeyValueI6StringEEvPKcT_>
 80a1424:	a804      	add	r0, sp, #16
 80a1426:	f002 fb29 	bl	80a3a7c <_ZN6StringD1Ev>
        jsonMessage.insertKeyValue("Charger", Charger);
 80a142a:	2202      	movs	r2, #2
 80a142c:	491e      	ldr	r1, [pc, #120]	; (80a14a8 <_Z12readRFIDCardi+0x23c>)
 80a142e:	a808      	add	r0, sp, #32
 80a1430:	f7ff fd84 	bl	80a0f3c <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
		jsonMessage.insertKeyValue("StartTime", Time.now());
 80a1434:	f002 ff35 	bl	80a42a2 <_ZN9TimeClass3nowEv>
 80a1438:	491c      	ldr	r1, [pc, #112]	; (80a14ac <_Z12readRFIDCardi+0x240>)
 80a143a:	4602      	mov	r2, r0
 80a143c:	a808      	add	r0, sp, #32
 80a143e:	f7ff fefd 	bl	80a123c <_ZN10JsonWriter14insertKeyValueIlEEvPKcT_>

	/**
	 * @brief End the object
	 */
	~JsonWriterAutoObject() {
		jw->finishObjectOrArray();
 80a1442:	a808      	add	r0, sp, #32
 80a1444:	f001 fbb2 	bl	80a2bac <_ZN10JsonWriter19finishObjectOrArrayEv>
	    }
        client.publish("HANevse/updateUser", jsonMessage.getBuffer());
 80a1448:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80a144a:	4919      	ldr	r1, [pc, #100]	; (80a14b0 <_Z12readRFIDCardi+0x244>)
 80a144c:	4819      	ldr	r0, [pc, #100]	; (80a14b4 <_Z12readRFIDCardi+0x248>)
 80a144e:	f001 f9ca 	bl	80a27e6 <_ZN4MQTT7publishEPKcS1_>
            content.concat(String(mfrc522_Charger2.uid.uidByte[i] < 0x10 ? " 0" : " "));
            content.concat(String(mfrc522_Charger2.uid.uidByte[i], HEX));
        }
        //Authorized=testUser(content,Charger);
        UIDtagCharger2=content.substring(1);
        JsonWriterStatic<512> jsonMessage;
 80a1452:	a808      	add	r0, sp, #32
 80a1454:	f7fe ff22 	bl	80a029c <_ZN16JsonWriterStaticILj512EED1Ev>
            return false;
        }
        //DEBUGPORT.println("Read something on charger2");
        //Show UID on serial monitor
        DEBUGPORT.print("readCard>\tUID tag on charger2:");
        String content = "";        
 80a1458:	4668      	mov	r0, sp
 80a145a:	f002 fb0f 	bl	80a3a7c <_ZN6StringD1Ev>
 80a145e:	e001      	b.n	80a1464 <_Z12readRFIDCardi+0x1f8>
    {
    
        // Look for new cards
        if ( ! mfrc522_Charger2.PICC_IsNewCardPresent()) 
        {
            return false;
 80a1460:	2000      	movs	r0, #0
 80a1462:	e009      	b.n	80a1478 <_Z12readRFIDCardi+0x20c>
		jsonMessage.insertKeyValue("StartTime", Time.now());
	    }
        client.publish("HANevse/updateUser", jsonMessage.getBuffer());
        
    }
    DEBUGPORT.println("");
 80a1464:	f003 f902 	bl	80a466c <_Z16_fetch_usbserialv>
 80a1468:	4908      	ldr	r1, [pc, #32]	; (80a148c <_Z12readRFIDCardi+0x220>)
 80a146a:	f002 fcfc 	bl	80a3e66 <_ZN5Print7printlnEPKc>
       
    delay(500);
 80a146e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a1472:	f002 ff27 	bl	80a42c4 <delay>
    // This whole function is not interrupted by callback() so Pianswer can't be changed in the meantime
    //client.publish("HANevse/checkupdateUser", String(Pianswer));  
     return Authorized;
 80a1476:	2001      	movs	r0, #1
}
 80a1478:	f50d 7d15 	add.w	sp, sp, #596	; 0x254
 80a147c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a1480:	20000280 	.word	0x20000280
 80a1484:	2000048c 	.word	0x2000048c
 80a1488:	080a9900 	.word	0x080a9900
 80a148c:	080a997b 	.word	0x080a997b
 80a1490:	080a997d 	.word	0x080a997d
 80a1494:	2000031c 	.word	0x2000031c
 80a1498:	080a991f 	.word	0x080a991f
 80a149c:	200002b4 	.word	0x200002b4
 80a14a0:	080a994b 	.word	0x080a994b
 80a14a4:	2000032c 	.word	0x2000032c
 80a14a8:	080a9926 	.word	0x080a9926
 80a14ac:	080a992e 	.word	0x080a992e
 80a14b0:	080a9938 	.word	0x080a9938
 80a14b4:	200002c4 	.word	0x200002c4
 80a14b8:	080a98fd 	.word	0x080a98fd

080a14bc <loop>:
	
	RGB.control(true);
    Time.zone(1); //Dutch time zone
}

void loop() {
 80a14bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    //Check the connection to the MQTT broker
    if (client.isConnected()) {
 80a14c0:	48b1      	ldr	r0, [pc, #708]	; (80a1788 <loop+0x2cc>)
	
	RGB.control(true);
    Time.zone(1); //Dutch time zone
}

void loop() {
 80a14c2:	b099      	sub	sp, #100	; 0x64
    //Check the connection to the MQTT broker
    if (client.isConnected()) {
 80a14c4:	f001 f82b 	bl	80a251e <_ZN4MQTT11isConnectedEv>
 80a14c8:	b118      	cbz	r0, 80a14d2 <loop+0x16>
        client.loop();
 80a14ca:	48af      	ldr	r0, [pc, #700]	; (80a1788 <loop+0x2cc>)
 80a14cc:	f001 f9d2 	bl	80a2874 <_ZN4MQTT4loopEv>
 80a14d0:	e001      	b.n	80a14d6 <loop+0x1a>
    }
    else reconnect();
 80a14d2:	f7ff fcb7 	bl	80a0e44 <_Z9reconnectv>
    
    Particle.process();
 80a14d6:	f7fe ff69 	bl	80a03ac <_ZN10CloudClass7processEv>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a14da:	f001 fee5 	bl	80a32a8 <spark_cloud_flag_connected>
    //currentStr = String(Current[0][0],1)+" "+String( Current[0][1],1)+" "+String(Current[0][2],1)+" "+String(Current[1][0],1)+" "+String( Current[1][1],1)+" "+String(Current[1][2],1)+" "+String(Frequency[0],2);
//+    currentStr = String(Current[0][0],1)+" "+String( PhaseVoltage[0][1],1)+" "+String(LineVoltage[0][2],1)+" "+String(Power[1][0],1)+" "+String( Energy[1],1)+" "+String(Current[1][2],1)+" "+String(Frequency[0],2);
    //currentStr=String(Current[1][2],1)+" "+currentStr.substring(0, max(200, currentStr.length()))
    //currentStr = String(CurrentList[0],1)+" "+String(CurrentList[1],1)+" "+String(CurrentList[2],1)+" "+String(CurrentList[3],1)+" "+String(CurrentList[4],1)+" "+String(CurrentList[5],1)+" "+String(CurrentList[6],1)+" "+String(CurrentList[7],1)+" "+String(CurrentList[8],1)+" "+String(CurrentList[9],1)+" "+String(CurrentList[10],1)+" "+String(CurrentList[11],1)+" "+String(CurrentList[12],1)+" "+String(CurrentList[13],1)+" "+String(CurrentList[14],1)+" "+String(CurrentList[15],1)+" "+String(CurrentList[16],1)+" "+String(CurrentList[17],1)+" "+String(CurrentList[18],1)+" "+String(CurrentList[19],1);
    if (Particle.connected() == false) {
 80a14de:	b908      	cbnz	r0, 80a14e4 <loop+0x28>
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
 80a14e0:	f001 feda 	bl	80a3298 <spark_cloud_flag_connect>
        Particle.connect();
    }
    //int Charger =1; //+
    int Charger = readSerialOlimex()+CHARGEROFFSET; //+
 80a14e4:	f7ff f99e 	bl	80a0824 <_Z16readSerialOlimexv>
    Particle.process();
    if(counter>10){
 80a14e8:	4ca8      	ldr	r4, [pc, #672]	; (80a178c <loop+0x2d0>)
    //currentStr = String(CurrentList[0],1)+" "+String(CurrentList[1],1)+" "+String(CurrentList[2],1)+" "+String(CurrentList[3],1)+" "+String(CurrentList[4],1)+" "+String(CurrentList[5],1)+" "+String(CurrentList[6],1)+" "+String(CurrentList[7],1)+" "+String(CurrentList[8],1)+" "+String(CurrentList[9],1)+" "+String(CurrentList[10],1)+" "+String(CurrentList[11],1)+" "+String(CurrentList[12],1)+" "+String(CurrentList[13],1)+" "+String(CurrentList[14],1)+" "+String(CurrentList[15],1)+" "+String(CurrentList[16],1)+" "+String(CurrentList[17],1)+" "+String(CurrentList[18],1)+" "+String(CurrentList[19],1);
    if (Particle.connected() == false) {
        Particle.connect();
    }
    //int Charger =1; //+
    int Charger = readSerialOlimex()+CHARGEROFFSET; //+
 80a14ea:	4606      	mov	r6, r0
    Particle.process();
 80a14ec:	f7fe ff5e 	bl	80a03ac <_ZN10CloudClass7processEv>
    if(counter>10){
 80a14f0:	6823      	ldr	r3, [r4, #0]
 80a14f2:	2b0a      	cmp	r3, #10
 80a14f4:	dd43      	ble.n	80a157e <loop+0xc2>
		counter = 0;
 80a14f6:	2300      	movs	r3, #0
 80a14f8:	6023      	str	r3, [r4, #0]
		DEBUGPORT.println("LatestStartTime>\t"+String(LatestStartTime[0])+", "+String(LatestStartTime[1]));
 80a14fa:	f003 f8b7 	bl	80a466c <_Z16_fetch_usbserialv>
 80a14fe:	4da4      	ldr	r5, [pc, #656]	; (80a1790 <loop+0x2d4>)
 80a1500:	4607      	mov	r7, r0
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a1502:	49a4      	ldr	r1, [pc, #656]	; (80a1794 <loop+0x2d8>)
 80a1504:	a810      	add	r0, sp, #64	; 0x40
 80a1506:	f002 fb00 	bl	80a3b0a <_ZN6StringC1EPK19__FlashStringHelper>
 80a150a:	220a      	movs	r2, #10
 80a150c:	6829      	ldr	r1, [r5, #0]
 80a150e:	a80c      	add	r0, sp, #48	; 0x30
 80a1510:	f002 fb96 	bl	80a3c40 <_ZN6StringC1Emh>
 80a1514:	a90c      	add	r1, sp, #48	; 0x30
 80a1516:	a810      	add	r0, sp, #64	; 0x40
 80a1518:	f002 fbf6 	bl	80a3d08 <_ZplRK15StringSumHelperRK6String>
 80a151c:	499e      	ldr	r1, [pc, #632]	; (80a1798 <loop+0x2dc>)
 80a151e:	f002 fbff 	bl	80a3d20 <_ZplRK15StringSumHelperPKc>
 80a1522:	4680      	mov	r8, r0
 80a1524:	220a      	movs	r2, #10
 80a1526:	6869      	ldr	r1, [r5, #4]
 80a1528:	a814      	add	r0, sp, #80	; 0x50
 80a152a:	f002 fb89 	bl	80a3c40 <_ZN6StringC1Emh>
 80a152e:	a914      	add	r1, sp, #80	; 0x50
 80a1530:	4640      	mov	r0, r8
 80a1532:	f002 fbe9 	bl	80a3d08 <_ZplRK15StringSumHelperRK6String>
 80a1536:	6801      	ldr	r1, [r0, #0]
 80a1538:	4638      	mov	r0, r7
 80a153a:	f002 fc94 	bl	80a3e66 <_ZN5Print7printlnEPKc>
 80a153e:	a814      	add	r0, sp, #80	; 0x50
 80a1540:	f002 fa9c 	bl	80a3a7c <_ZN6StringD1Ev>
 80a1544:	a80c      	add	r0, sp, #48	; 0x30
 80a1546:	f002 fa99 	bl	80a3a7c <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80a154a:	a810      	add	r0, sp, #64	; 0x40
 80a154c:	f002 fa96 	bl	80a3a7c <_ZN6StringD1Ev>
		DEBUGPORT.println(String(Current[1][0]+ Current[1][1]+ Current[1][2]));
 80a1550:	f003 f88c 	bl	80a466c <_Z16_fetch_usbserialv>
 80a1554:	4d91      	ldr	r5, [pc, #580]	; (80a179c <loop+0x2e0>)
 80a1556:	4607      	mov	r7, r0
 80a1558:	6929      	ldr	r1, [r5, #16]
 80a155a:	68e8      	ldr	r0, [r5, #12]
 80a155c:	f004 fa82 	bl	80a5a64 <__addsf3>
 80a1560:	6969      	ldr	r1, [r5, #20]
 80a1562:	f004 fa7f 	bl	80a5a64 <__addsf3>
 80a1566:	2206      	movs	r2, #6
 80a1568:	4601      	mov	r1, r0
 80a156a:	a814      	add	r0, sp, #80	; 0x50
 80a156c:	f002 fb7c 	bl	80a3c68 <_ZN6StringC1Efi>
 80a1570:	9914      	ldr	r1, [sp, #80]	; 0x50
 80a1572:	4638      	mov	r0, r7
 80a1574:	f002 fc77 	bl	80a3e66 <_ZN5Print7printlnEPKc>
 80a1578:	a814      	add	r0, sp, #80	; 0x50
 80a157a:	f002 fa7f 	bl	80a3a7c <_ZN6StringD1Ev>
    }
    counter++;
 80a157e:	6823      	ldr	r3, [r4, #0]
 80a1580:	3301      	adds	r3, #1
 80a1582:	6023      	str	r3, [r4, #0]
 80a1584:	f001 fc72 	bl	80a2e6c <HAL_Timer_Get_Milli_Seconds>
		
    // store new measurement value if it is received correctly from energymeter (via the Olimex).
    if(millis()>nextTime[handledCharger] && (Charger==1+CHARGEROFFSET || Charger==2+CHARGEROFFSET)) //+ all the if{}
 80a1588:	4c85      	ldr	r4, [pc, #532]	; (80a17a0 <loop+0x2e4>)
 80a158a:	4b86      	ldr	r3, [pc, #536]	; (80a17a4 <loop+0x2e8>)
 80a158c:	7822      	ldrb	r2, [r4, #0]
 80a158e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80a1592:	4298      	cmp	r0, r3
 80a1594:	d916      	bls.n	80a15c4 <loop+0x108>
 80a1596:	1e70      	subs	r0, r6, #1
 80a1598:	2801      	cmp	r0, #1
 80a159a:	d813      	bhi.n	80a15c4 <loop+0x108>
    {
        Particle.process();
 80a159c:	f7fe ff06 	bl	80a03ac <_ZN10CloudClass7processEv>
        //getUserIdAtSocket(Charger)
        int tempCharger = Charger;
        Charger = handledCharger + 1;
        if(((activeCharger()==Charger) || (activeCharger() == 3)) && (getUserIdAtSocket(Charger)!="00"))
 80a15a0:	f7ff f9a2 	bl	80a08e8 <_Z13activeChargerv>
    if(millis()>nextTime[handledCharger] && (Charger==1+CHARGEROFFSET || Charger==2+CHARGEROFFSET)) //+ all the if{}
    {
        Particle.process();
        //getUserIdAtSocket(Charger)
        int tempCharger = Charger;
        Charger = handledCharger + 1;
 80a15a4:	7825      	ldrb	r5, [r4, #0]
 80a15a6:	1c6e      	adds	r6, r5, #1
        if(((activeCharger()==Charger) || (activeCharger() == 3)) && (getUserIdAtSocket(Charger)!="00"))
 80a15a8:	4286      	cmp	r6, r0
 80a15aa:	d077      	beq.n	80a169c <loop+0x1e0>
 80a15ac:	2803      	cmp	r0, #3
 80a15ae:	d075      	beq.n	80a169c <loop+0x1e0>
        {
            //getUserIdAtSocket(Charger+CHARGEROFFSET);
            add_Measurement(PhaseVoltage[Charger-1][0], PhaseVoltage[Charger-1][1], PhaseVoltage[Charger-1][2], Current[Charger-1][0], Current[Charger-1][1], Current[Charger-1][2], Power[Charger-1][0]+Power[Charger-1][1]+Power[Charger-1][2], Energy[Charger-1], Frequency[Charger-1], Time.now(), Charger+CHARGEROFFSET, getUserIdAtSocket(Charger+CHARGEROFFSET));
        }
        Charger = tempCharger;
        nextTime[handledCharger] = millis() + 30000; //every 30 sec
 80a15b0:	4b7b      	ldr	r3, [pc, #492]	; (80a17a0 <loop+0x2e4>)
 80a15b2:	781c      	ldrb	r4, [r3, #0]
 80a15b4:	f001 fc5a 	bl	80a2e6c <HAL_Timer_Get_Milli_Seconds>
 80a15b8:	4b7a      	ldr	r3, [pc, #488]	; (80a17a4 <loop+0x2e8>)
 80a15ba:	f500 40ea 	add.w	r0, r0, #29952	; 0x7500
 80a15be:	3030      	adds	r0, #48	; 0x30
 80a15c0:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
    }
    
//     run loop very often to check new RFID cards
    Particle.process(); //+
 80a15c4:	f7fe fef2 	bl	80a03ac <_ZN10CloudClass7processEv>
    bool Authorized_Charger1=readRFIDCard(1+CHARGEROFFSET); //+
 80a15c8:	2001      	movs	r0, #1
 80a15ca:	f7ff fe4f 	bl	80a126c <_Z12readRFIDCardi>
    delay(5);
 80a15ce:	2005      	movs	r0, #5
 80a15d0:	f002 fe78 	bl	80a42c4 <delay>
    if (Pianswer == 1 || Pianswer ==4 )    
        Authorized_Charger1 = TRUE;
    bool Authorized_Charger2=readRFIDCard(2+CHARGEROFFSET); //+
 80a15d4:	2002      	movs	r0, #2
 80a15d6:	f7ff fe49 	bl	80a126c <_Z12readRFIDCardi>
    delay(5);
 80a15da:	2005      	movs	r0, #5
 80a15dc:	f002 fe72 	bl	80a42c4 <delay>
    //DEBUGPORT.println(String(LatestStartTime[0]+60));
    //DEBUGPORT.println(String(Time.now()));
    //DEBUGPORT.println((LatestStartTime[0] + 60 < Time.now()),DEC);
    //if ((LatestStartTime[0] + 60 < Time.now()) && (Current[0][0]+ Current[0][1]+ Current[0][2]) < 1)
    //if (((numberOfZeroReadings[0]>10 && (LatestStartTime[0] + 60 < Time.now()))|| ((Time.now()<LatestStartTime[0] + 70)&&(LatestStartTime[0] + 60 < Time.now()))) && (Current[0][0]+ Current[0][1]+ Current[0][2]) < 1)
    if( ((numberOfZeroReadings[0]>10)||(LatestStartTime[0] + 70 > Time.now()) )&& (LatestStartTime[0] + 60 < Time.now()) && (Current[0][0]+ Current[0][1]+ Current[0][2]) < 1)
 80a15e0:	4b71      	ldr	r3, [pc, #452]	; (80a17a8 <loop+0x2ec>)
 80a15e2:	4c6b      	ldr	r4, [pc, #428]	; (80a1790 <loop+0x2d4>)
 80a15e4:	681a      	ldr	r2, [r3, #0]
 80a15e6:	461e      	mov	r6, r3
 80a15e8:	2a0a      	cmp	r2, #10
 80a15ea:	dd07      	ble.n	80a15fc <loop+0x140>
 80a15ec:	6823      	ldr	r3, [r4, #0]
 80a15ee:	f103 053c 	add.w	r5, r3, #60	; 0x3c
 80a15f2:	f002 fe56 	bl	80a42a2 <_ZN9TimeClass3nowEv>
 80a15f6:	4285      	cmp	r5, r0
 80a15f8:	d308      	bcc.n	80a160c <loop+0x150>
 80a15fa:	e016      	b.n	80a162a <loop+0x16e>
 80a15fc:	6823      	ldr	r3, [r4, #0]
 80a15fe:	f103 0546 	add.w	r5, r3, #70	; 0x46
 80a1602:	f002 fe4e 	bl	80a42a2 <_ZN9TimeClass3nowEv>
 80a1606:	4285      	cmp	r5, r0
 80a1608:	d8f0      	bhi.n	80a15ec <loop+0x130>
 80a160a:	e00e      	b.n	80a162a <loop+0x16e>
 80a160c:	4d63      	ldr	r5, [pc, #396]	; (80a179c <loop+0x2e0>)
 80a160e:	6869      	ldr	r1, [r5, #4]
 80a1610:	6828      	ldr	r0, [r5, #0]
 80a1612:	f004 fa27 	bl	80a5a64 <__addsf3>
 80a1616:	68a9      	ldr	r1, [r5, #8]
 80a1618:	f004 fa24 	bl	80a5a64 <__addsf3>
 80a161c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80a1620:	f004 fcc6 	bl	80a5fb0 <__aeabi_fcmplt>
 80a1624:	2800      	cmp	r0, #0
 80a1626:	f040 808c 	bne.w	80a1742 <loop+0x286>
    }
    //DEBUGPORT.println(Current[1][0]+ Current[1][1]+ Current[1][2],4);
    //DEBUGPORT.println(String(LatestStartTime[1]+60));
    //DEBUGPORT.println(String(Time.now()));
    //DEBUGPORT.println((LatestStartTime[1] + 60 < Time.now()),DEC);
    if( ((numberOfZeroReadings[1]>10)||(LatestStartTime[1] + 70 > Time.now()) )&& (LatestStartTime[1] + 60 < Time.now()) && (Current[1][0]+ Current[1][1]+ Current[1][2]) < 1)
 80a162a:	6873      	ldr	r3, [r6, #4]
 80a162c:	2b0a      	cmp	r3, #10
 80a162e:	dd06      	ble.n	80a163e <loop+0x182>
 80a1630:	6864      	ldr	r4, [r4, #4]
 80a1632:	f002 fe36 	bl	80a42a2 <_ZN9TimeClass3nowEv>
 80a1636:	343c      	adds	r4, #60	; 0x3c
 80a1638:	4284      	cmp	r4, r0
 80a163a:	d308      	bcc.n	80a164e <loop+0x192>
 80a163c:	e016      	b.n	80a166c <loop+0x1b0>
 80a163e:	6863      	ldr	r3, [r4, #4]
 80a1640:	f103 0546 	add.w	r5, r3, #70	; 0x46
 80a1644:	f002 fe2d 	bl	80a42a2 <_ZN9TimeClass3nowEv>
 80a1648:	4285      	cmp	r5, r0
 80a164a:	d8f1      	bhi.n	80a1630 <loop+0x174>
 80a164c:	e00e      	b.n	80a166c <loop+0x1b0>
 80a164e:	4c53      	ldr	r4, [pc, #332]	; (80a179c <loop+0x2e0>)
 80a1650:	6921      	ldr	r1, [r4, #16]
 80a1652:	68e0      	ldr	r0, [r4, #12]
 80a1654:	f004 fa06 	bl	80a5a64 <__addsf3>
 80a1658:	6961      	ldr	r1, [r4, #20]
 80a165a:	f004 fa03 	bl	80a5a64 <__addsf3>
 80a165e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80a1662:	f004 fca5 	bl	80a5fb0 <__aeabi_fcmplt>
 80a1666:	2800      	cmp	r0, #0
 80a1668:	f040 80ae 	bne.w	80a17c8 <loop+0x30c>
        digitalWrite(AUTHENTICATION_CAR2,LOW);
        //digitalWrite(D7,LOW);
        LatestStartTime[1]=2147483548;
        //DEBUGPORT.println("Timeout charger2");
    }
    delay(100);
 80a166c:	2064      	movs	r0, #100	; 0x64
 80a166e:	f002 fe29 	bl	80a42c4 <delay>
     delay(100);
    }
    */

    //Reset the UIDtag if there is no car charging
    if ((activeCharger()!=1)&&(activeCharger()!=3))
 80a1672:	f7ff f939 	bl	80a08e8 <_Z13activeChargerv>
 80a1676:	f020 0002 	bic.w	r0, r0, #2
 80a167a:	2801      	cmp	r0, #1
 80a167c:	f040 80c6 	bne.w	80a180c <loop+0x350>
        UIDtagCharger1="No ID";
    if ((activeCharger()!=2)&&(activeCharger()!=3))
 80a1680:	f7ff f932 	bl	80a08e8 <_Z13activeChargerv>
 80a1684:	3802      	subs	r0, #2
 80a1686:	2801      	cmp	r0, #1
 80a1688:	f200 80c5 	bhi.w	80a1816 <loop+0x35a>
        UIDtagCharger2="No ID";
            
    handledCharger = !handledCharger;
 80a168c:	4a44      	ldr	r2, [pc, #272]	; (80a17a0 <loop+0x2e4>)
 80a168e:	7813      	ldrb	r3, [r2, #0]
 80a1690:	f083 0301 	eor.w	r3, r3, #1
 80a1694:	7013      	strb	r3, [r2, #0]
 80a1696:	b019      	add	sp, #100	; 0x64
 80a1698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    {
        Particle.process();
        //getUserIdAtSocket(Charger)
        int tempCharger = Charger;
        Charger = handledCharger + 1;
        if(((activeCharger()==Charger) || (activeCharger() == 3)) && (getUserIdAtSocket(Charger)!="00"))
 80a169c:	ac14      	add	r4, sp, #80	; 0x50
 80a169e:	4631      	mov	r1, r6
 80a16a0:	4620      	mov	r0, r4
 80a16a2:	f7ff f9cd 	bl	80a0a40 <_Z17getUserIdAtSocketi>
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
 80a16a6:	4941      	ldr	r1, [pc, #260]	; (80a17ac <loop+0x2f0>)
 80a16a8:	4620      	mov	r0, r4
 80a16aa:	f002 fb4b 	bl	80a3d44 <_ZNK6String6equalsEPKc>
 80a16ae:	4607      	mov	r7, r0
 80a16b0:	4620      	mov	r0, r4
 80a16b2:	f002 f9e3 	bl	80a3a7c <_ZN6StringD1Ev>
 80a16b6:	2f00      	cmp	r7, #0
 80a16b8:	f47f af7a 	bne.w	80a15b0 <loop+0xf4>
        {
            //getUserIdAtSocket(Charger+CHARGEROFFSET);
            add_Measurement(PhaseVoltage[Charger-1][0], PhaseVoltage[Charger-1][1], PhaseVoltage[Charger-1][2], Current[Charger-1][0], Current[Charger-1][1], Current[Charger-1][2], Power[Charger-1][0]+Power[Charger-1][1]+Power[Charger-1][2], Energy[Charger-1], Frequency[Charger-1], Time.now(), Charger+CHARGEROFFSET, getUserIdAtSocket(Charger+CHARGEROFFSET));
 80a16bc:	230c      	movs	r3, #12
 80a16be:	436b      	muls	r3, r5
 80a16c0:	493b      	ldr	r1, [pc, #236]	; (80a17b0 <loop+0x2f4>)
 80a16c2:	18ca      	adds	r2, r1, r3
 80a16c4:	58cf      	ldr	r7, [r1, r3]
 80a16c6:	f8d2 8004 	ldr.w	r8, [r2, #4]
 80a16ca:	4934      	ldr	r1, [pc, #208]	; (80a179c <loop+0x2e0>)
 80a16cc:	6892      	ldr	r2, [r2, #8]
 80a16ce:	9208      	str	r2, [sp, #32]
 80a16d0:	18ca      	adds	r2, r1, r3
 80a16d2:	f8d2 9004 	ldr.w	r9, [r2, #4]
 80a16d6:	f8d2 a008 	ldr.w	sl, [r2, #8]
 80a16da:	4a36      	ldr	r2, [pc, #216]	; (80a17b4 <loop+0x2f8>)
 80a16dc:	58c9      	ldr	r1, [r1, r3]
 80a16de:	eb02 0b03 	add.w	fp, r2, r3
 80a16e2:	58d0      	ldr	r0, [r2, r3]
 80a16e4:	9109      	str	r1, [sp, #36]	; 0x24
 80a16e6:	f8db 1004 	ldr.w	r1, [fp, #4]
 80a16ea:	f004 f9bb 	bl	80a5a64 <__addsf3>
 80a16ee:	f8db 1008 	ldr.w	r1, [fp, #8]
 80a16f2:	f004 f9b7 	bl	80a5a64 <__addsf3>
 80a16f6:	4b30      	ldr	r3, [pc, #192]	; (80a17b8 <loop+0x2fc>)
 80a16f8:	4a30      	ldr	r2, [pc, #192]	; (80a17bc <loop+0x300>)
 80a16fa:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80a16fe:	4683      	mov	fp, r0
 80a1700:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
 80a1704:	930b      	str	r3, [sp, #44]	; 0x2c
 80a1706:	f002 fdcc 	bl	80a42a2 <_ZN9TimeClass3nowEv>
 80a170a:	4631      	mov	r1, r6
 80a170c:	900a      	str	r0, [sp, #40]	; 0x28
 80a170e:	4620      	mov	r0, r4
 80a1710:	f7ff f996 	bl	80a0a40 <_Z17getUserIdAtSocketi>
 80a1714:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80a1716:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80a1718:	9205      	str	r2, [sp, #20]
 80a171a:	9303      	str	r3, [sp, #12]
 80a171c:	4638      	mov	r0, r7
 80a171e:	9407      	str	r4, [sp, #28]
 80a1720:	9606      	str	r6, [sp, #24]
 80a1722:	9504      	str	r5, [sp, #16]
 80a1724:	f8cd b008 	str.w	fp, [sp, #8]
 80a1728:	f8cd a004 	str.w	sl, [sp, #4]
 80a172c:	f8cd 9000 	str.w	r9, [sp]
 80a1730:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a1732:	9a08      	ldr	r2, [sp, #32]
 80a1734:	4641      	mov	r1, r8
 80a1736:	f7ff fd17 	bl	80a1168 <_Z15add_Measurementfffffffffmi6String>
 80a173a:	4620      	mov	r0, r4
 80a173c:	f002 f99e 	bl	80a3a7c <_ZN6StringD1Ev>
 80a1740:	e736      	b.n	80a15b0 <loop+0xf4>
    //if ((LatestStartTime[0] + 60 < Time.now()) && (Current[0][0]+ Current[0][1]+ Current[0][2]) < 1)
    //if (((numberOfZeroReadings[0]>10 && (LatestStartTime[0] + 60 < Time.now()))|| ((Time.now()<LatestStartTime[0] + 70)&&(LatestStartTime[0] + 60 < Time.now()))) && (Current[0][0]+ Current[0][1]+ Current[0][2]) < 1)
    if( ((numberOfZeroReadings[0]>10)||(LatestStartTime[0] + 70 > Time.now()) )&& (LatestStartTime[0] + 60 < Time.now()) && (Current[0][0]+ Current[0][1]+ Current[0][2]) < 1)
    {   
        //timeout with current almost zero
        DEBUGPORT.println("Timeout charger"+String(CHARGEROFFSET+1));
 80a1742:	f002 ff93 	bl	80a466c <_Z16_fetch_usbserialv>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a1746:	491e      	ldr	r1, [pc, #120]	; (80a17c0 <loop+0x304>)
 80a1748:	4605      	mov	r5, r0
 80a174a:	a814      	add	r0, sp, #80	; 0x50
 80a174c:	f002 f9dd 	bl	80a3b0a <_ZN6StringC1EPK19__FlashStringHelper>
 80a1750:	220a      	movs	r2, #10
 80a1752:	2101      	movs	r1, #1
 80a1754:	a810      	add	r0, sp, #64	; 0x40
 80a1756:	f002 fa4d 	bl	80a3bf4 <_ZN6StringC1Eih>
 80a175a:	a910      	add	r1, sp, #64	; 0x40
 80a175c:	a814      	add	r0, sp, #80	; 0x50
 80a175e:	f002 fad3 	bl	80a3d08 <_ZplRK15StringSumHelperRK6String>
 80a1762:	6801      	ldr	r1, [r0, #0]
 80a1764:	4628      	mov	r0, r5
 80a1766:	f002 fb7e 	bl	80a3e66 <_ZN5Print7printlnEPKc>
 80a176a:	a810      	add	r0, sp, #64	; 0x40
 80a176c:	f002 f986 	bl	80a3a7c <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80a1770:	a814      	add	r0, sp, #80	; 0x50
 80a1772:	f002 f983 	bl	80a3a7c <_ZN6StringD1Ev>
        digitalWrite(AUTHENTICATION_CAR1,LOW);
 80a1776:	2100      	movs	r1, #0
 80a1778:	2005      	movs	r0, #5
 80a177a:	f003 fa7e 	bl	80a4c7a <digitalWrite>
        LatestStartTime[0]=2147483548;
 80a177e:	4a11      	ldr	r2, [pc, #68]	; (80a17c4 <loop+0x308>)
 80a1780:	4b03      	ldr	r3, [pc, #12]	; (80a1790 <loop+0x2d4>)
 80a1782:	601a      	str	r2, [r3, #0]
 80a1784:	e751      	b.n	80a162a <loop+0x16e>
 80a1786:	bf00      	nop
 80a1788:	200002c4 	.word	0x200002c4
 80a178c:	20000008 	.word	0x20000008
 80a1790:	20000278 	.word	0x20000278
 80a1794:	080a996a 	.word	0x080a996a
 80a1798:	080a997c 	.word	0x080a997c
 80a179c:	20000364 	.word	0x20000364
 80a17a0:	20000282 	.word	0x20000282
 80a17a4:	20000000 	.word	0x20000000
 80a17a8:	20000110 	.word	0x20000110
 80a17ac:	080a9621 	.word	0x080a9621
 80a17b0:	20000284 	.word	0x20000284
 80a17b4:	2000037c 	.word	0x2000037c
 80a17b8:	20000470 	.word	0x20000470
 80a17bc:	200002ac 	.word	0x200002ac
 80a17c0:	080a997f 	.word	0x080a997f
 80a17c4:	7fffff9c 	.word	0x7fffff9c
    //DEBUGPORT.println(String(Time.now()));
    //DEBUGPORT.println((LatestStartTime[1] + 60 < Time.now()),DEC);
    if( ((numberOfZeroReadings[1]>10)||(LatestStartTime[1] + 70 > Time.now()) )&& (LatestStartTime[1] + 60 < Time.now()) && (Current[1][0]+ Current[1][1]+ Current[1][2]) < 1)
    {
        //timeout with current almost zero
        DEBUGPORT.println("Timeout charger"+String(CHARGEROFFSET+2));
 80a17c8:	f002 ff50 	bl	80a466c <_Z16_fetch_usbserialv>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a17cc:	4914      	ldr	r1, [pc, #80]	; (80a1820 <loop+0x364>)
 80a17ce:	4604      	mov	r4, r0
 80a17d0:	a814      	add	r0, sp, #80	; 0x50
 80a17d2:	f002 f99a 	bl	80a3b0a <_ZN6StringC1EPK19__FlashStringHelper>
 80a17d6:	220a      	movs	r2, #10
 80a17d8:	2102      	movs	r1, #2
 80a17da:	a810      	add	r0, sp, #64	; 0x40
 80a17dc:	f002 fa0a 	bl	80a3bf4 <_ZN6StringC1Eih>
 80a17e0:	a910      	add	r1, sp, #64	; 0x40
 80a17e2:	a814      	add	r0, sp, #80	; 0x50
 80a17e4:	f002 fa90 	bl	80a3d08 <_ZplRK15StringSumHelperRK6String>
 80a17e8:	6801      	ldr	r1, [r0, #0]
 80a17ea:	4620      	mov	r0, r4
 80a17ec:	f002 fb3b 	bl	80a3e66 <_ZN5Print7printlnEPKc>
 80a17f0:	a810      	add	r0, sp, #64	; 0x40
 80a17f2:	f002 f943 	bl	80a3a7c <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80a17f6:	a814      	add	r0, sp, #80	; 0x50
 80a17f8:	f002 f940 	bl	80a3a7c <_ZN6StringD1Ev>
        digitalWrite(AUTHENTICATION_CAR2,LOW);
 80a17fc:	2100      	movs	r1, #0
 80a17fe:	2006      	movs	r0, #6
 80a1800:	f003 fa3b 	bl	80a4c7a <digitalWrite>
        //digitalWrite(D7,LOW);
        LatestStartTime[1]=2147483548;
 80a1804:	4a07      	ldr	r2, [pc, #28]	; (80a1824 <loop+0x368>)
 80a1806:	4b08      	ldr	r3, [pc, #32]	; (80a1828 <loop+0x36c>)
 80a1808:	605a      	str	r2, [r3, #4]
 80a180a:	e72f      	b.n	80a166c <loop+0x1b0>
    }
    */

    //Reset the UIDtag if there is no car charging
    if ((activeCharger()!=1)&&(activeCharger()!=3))
        UIDtagCharger1="No ID";
 80a180c:	4907      	ldr	r1, [pc, #28]	; (80a182c <loop+0x370>)
 80a180e:	4808      	ldr	r0, [pc, #32]	; (80a1830 <loop+0x374>)
 80a1810:	f002 f9cd 	bl	80a3bae <_ZN6StringaSEPKc>
 80a1814:	e734      	b.n	80a1680 <loop+0x1c4>
    if ((activeCharger()!=2)&&(activeCharger()!=3))
        UIDtagCharger2="No ID";
 80a1816:	4905      	ldr	r1, [pc, #20]	; (80a182c <loop+0x370>)
 80a1818:	4806      	ldr	r0, [pc, #24]	; (80a1834 <loop+0x378>)
 80a181a:	f002 f9c8 	bl	80a3bae <_ZN6StringaSEPKc>
 80a181e:	e735      	b.n	80a168c <loop+0x1d0>
 80a1820:	080a997f 	.word	0x080a997f
 80a1824:	7fffff9c 	.word	0x7fffff9c
 80a1828:	20000278 	.word	0x20000278
 80a182c:	080a998f 	.word	0x080a998f
 80a1830:	2000031c 	.word	0x2000031c
 80a1834:	2000032c 	.word	0x2000032c

080a1838 <_ZN10CloudClass8functionIA9_cIPFi6StringEEEEbRKT_DpT0_>:
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return register_function(call_raw_user_function, (void*)func, funcKey);
 80a1838:	4602      	mov	r2, r0
 80a183a:	4801      	ldr	r0, [pc, #4]	; (80a1840 <_ZN10CloudClass8functionIA9_cIPFi6StringEEEEbRKT_DpT0_+0x8>)
 80a183c:	f002 be24 	b.w	80a4488 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 80a1840:	080a445d 	.word	0x080a445d

080a1844 <setup>:
            delay(5000);
        }
    }
}

void setup() {
 80a1844:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    DEBUGPORT.begin(115200); 
 80a1846:	f002 ff11 	bl	80a466c <_Z16_fetch_usbserialv>
 80a184a:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80a184e:	f002 ff01 	bl	80a4654 <_ZN9USBSerial5beginEl>
    Serial1.begin(9600);
 80a1852:	f002 ffc1 	bl	80a47d8 <_Z22__fetch_global_Serial1v>
 80a1856:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a185a:	f002 ffb7 	bl	80a47cc <_ZN11USARTSerial5beginEm>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a185e:	f001 fd23 	bl	80a32a8 <spark_cloud_flag_connected>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80a1862:	2800      	cmp	r0, #0
 80a1864:	d073      	beq.n	80a194e <setup+0x10a>
 80a1866:	f001 fd1f 	bl	80a32a8 <spark_cloud_flag_connected>
    //DEBUGPORT.println(Voltage,5);
    //DEBUGPORT.println(String(Voltage,5));
    
    waitUntil(Particle.connected);
    
    pinMode(AUTHENTICATION_CAR1, OUTPUT); //pinMode(D1, OUTPUT); //Charger1_Authorized
 80a186a:	2101      	movs	r1, #1
 80a186c:	2005      	movs	r0, #5
 80a186e:	f003 f9f3 	bl	80a4c58 <pinMode>
    pinMode(AUTHENTICATION_CAR2, OUTPUT); //pinMode(D2, OUTPUT); //Charger2_Authorized
 80a1872:	2101      	movs	r1, #1
 80a1874:	2006      	movs	r0, #6
 80a1876:	f003 f9ef 	bl	80a4c58 <pinMode>
    pinMode(PILOT_FEEDBACK_CAR_1,INPUT);
 80a187a:	2100      	movs	r1, #0
 80a187c:	2010      	movs	r0, #16
 80a187e:	f003 f9eb 	bl	80a4c58 <pinMode>
    pinMode(PILOT_FEEDBACK_CAR_2,INPUT);
 80a1882:	2100      	movs	r1, #0
 80a1884:	2011      	movs	r0, #17
 80a1886:	f003 f9e7 	bl	80a4c58 <pinMode>
    pinMode(WAKEUP_OLIMEX, OUTPUT);
 80a188a:	2101      	movs	r1, #1
 80a188c:	2002      	movs	r0, #2
 80a188e:	f003 f9e3 	bl	80a4c58 <pinMode>
    pinMode(RESET_OLIMEX, OUTPUT);
 80a1892:	2101      	movs	r1, #1
 80a1894:	2004      	movs	r0, #4
 80a1896:	f003 f9df 	bl	80a4c58 <pinMode>
    pinMode(D7, OUTPUT);
 80a189a:	2101      	movs	r1, #1
 80a189c:	2007      	movs	r0, #7
 80a189e:	f003 f9db 	bl	80a4c58 <pinMode>
    
    digitalWrite(AUTHENTICATION_CAR1, LOW); //digitalWrite(D1,LOW);
 80a18a2:	2100      	movs	r1, #0
 80a18a4:	2005      	movs	r0, #5
 80a18a6:	f003 f9e8 	bl	80a4c7a <digitalWrite>
    digitalWrite(AUTHENTICATION_CAR2, LOW);//digitalWrite(D2,LOW);
 80a18aa:	2100      	movs	r1, #0
 80a18ac:	2006      	movs	r0, #6
 80a18ae:	f003 f9e4 	bl	80a4c7a <digitalWrite>
    digitalWrite(WAKEUP_OLIMEX, LOW);
 80a18b2:	2100      	movs	r1, #0
 80a18b4:	2002      	movs	r0, #2
 80a18b6:	f003 f9e0 	bl	80a4c7a <digitalWrite>
    digitalWrite(RESET_OLIMEX, HIGH);
 80a18ba:	2101      	movs	r1, #1
 80a18bc:	2004      	movs	r0, #4
 80a18be:	f003 f9dc 	bl	80a4c7a <digitalWrite>
    digitalWrite(D7, LOW);
 80a18c2:	2100      	movs	r1, #0
 80a18c4:	2007      	movs	r0, #7
 80a18c6:	f003 f9d8 	bl	80a4c7a <digitalWrite>
    
    initRFID(""); //+
 80a18ca:	4922      	ldr	r1, [pc, #136]	; (80a1954 <setup+0x110>)
 80a18cc:	4668      	mov	r0, sp
 80a18ce:	f002 f91c 	bl	80a3b0a <_ZN6StringC1EPK19__FlashStringHelper>
 80a18d2:	4668      	mov	r0, sp
 80a18d4:	f7fe fd12 	bl	80a02fc <_Z8initRFID6String>
 80a18d8:	4668      	mov	r0, sp
 80a18da:	f002 f8cf 	bl	80a3a7c <_ZN6StringD1Ev>
    
    //Particle.process();  
    //resetOlimex("");  
    //Particle.process(); 

	Particle.function("switchTest",switchTest);
 80a18de:	491e      	ldr	r1, [pc, #120]	; (80a1958 <setup+0x114>)
 80a18e0:	481e      	ldr	r0, [pc, #120]	; (80a195c <setup+0x118>)
 80a18e2:	f7ff ffa9 	bl	80a1838 <_ZN10CloudClass8functionIA9_cIPFi6StringEEEEbRKT_DpT0_>
    Particle.function("maxCurrentC1",maxCurrentC1);
 80a18e6:	491e      	ldr	r1, [pc, #120]	; (80a1960 <setup+0x11c>)
 80a18e8:	481e      	ldr	r0, [pc, #120]	; (80a1964 <setup+0x120>)
 80a18ea:	f7ff ffa5 	bl	80a1838 <_ZN10CloudClass8functionIA9_cIPFi6StringEEEEbRKT_DpT0_>
    Particle.function("maxCurrentC2",maxCurrentC2);
 80a18ee:	491e      	ldr	r1, [pc, #120]	; (80a1968 <setup+0x124>)
 80a18f0:	481e      	ldr	r0, [pc, #120]	; (80a196c <setup+0x128>)
 80a18f2:	f7ff ffa1 	bl	80a1838 <_ZN10CloudClass8functionIA9_cIPFi6StringEEEEbRKT_DpT0_>
    Particle.function("resetOlimex",resetOlimex);
 80a18f6:	491e      	ldr	r1, [pc, #120]	; (80a1970 <setup+0x12c>)
 80a18f8:	481e      	ldr	r0, [pc, #120]	; (80a1974 <setup+0x130>)
 80a18fa:	f7ff ff9d 	bl	80a1838 <_ZN10CloudClass8functionIA9_cIPFi6StringEEEEbRKT_DpT0_>
    Particle.function("progModeOlmx",progModeOlmx);
 80a18fe:	491e      	ldr	r1, [pc, #120]	; (80a1978 <setup+0x134>)
 80a1900:	481e      	ldr	r0, [pc, #120]	; (80a197c <setup+0x138>)
 80a1902:	f7ff ff99 	bl	80a1838 <_ZN10CloudClass8functionIA9_cIPFi6StringEEEEbRKT_DpT0_>
    Particle.function("resetParticl",resetParticl);
 80a1906:	491e      	ldr	r1, [pc, #120]	; (80a1980 <setup+0x13c>)
 80a1908:	481e      	ldr	r0, [pc, #120]	; (80a1984 <setup+0x140>)
 80a190a:	f7ff ff95 	bl	80a1838 <_ZN10CloudClass8functionIA9_cIPFi6StringEEEEbRKT_DpT0_>
    //Particle.function("AuthPinsHigh",AuthPinsHigh);
    //Particle.function("AuthPinsLow",AuthPinsLow);
    Particle.function("WifiSignal",WifiSignal);
 80a190e:	491e      	ldr	r1, [pc, #120]	; (80a1988 <setup+0x144>)
 80a1910:	481e      	ldr	r0, [pc, #120]	; (80a198c <setup+0x148>)
 80a1912:	f7ff ff91 	bl	80a1838 <_ZN10CloudClass8functionIA9_cIPFi6StringEEEEbRKT_DpT0_>
    Particle.function("initRFID",initRFID);
 80a1916:	491e      	ldr	r1, [pc, #120]	; (80a1990 <setup+0x14c>)
 80a1918:	481e      	ldr	r0, [pc, #120]	; (80a1994 <setup+0x150>)
 80a191a:	f7ff ff8d 	bl	80a1838 <_ZN10CloudClass8functionIA9_cIPFi6StringEEEEbRKT_DpT0_>
        return _variable(varKey, &var, DOUBLE);
    }

    static inline bool _variable(const char* varKey, const String& var)
    {
        return _variable(varKey, &var, STRING);
 80a191e:	491e      	ldr	r1, [pc, #120]	; (80a1998 <setup+0x154>)
 80a1920:	481e      	ldr	r0, [pc, #120]	; (80a199c <setup+0x158>)
 80a1922:	f7fe fcd9 	bl	80a02d8 <_ZN10CloudClass9_variableIcEEbPKT_PK6StringRK17CloudVariableTypeIPKcvE.isra.7>
 80a1926:	491e      	ldr	r1, [pc, #120]	; (80a19a0 <setup+0x15c>)
 80a1928:	481e      	ldr	r0, [pc, #120]	; (80a19a4 <setup+0x160>)
 80a192a:	f7fe fcd5 	bl	80a02d8 <_ZN10CloudClass9_variableIcEEbPKT_PK6StringRK17CloudVariableTypeIPKcvE.isra.7>
 80a192e:	491e      	ldr	r1, [pc, #120]	; (80a19a8 <setup+0x164>)
 80a1930:	481e      	ldr	r0, [pc, #120]	; (80a19ac <setup+0x168>)
 80a1932:	f7fe fcd1 	bl	80a02d8 <_ZN10CloudClass9_variableIcEEbPKT_PK6StringRK17CloudVariableTypeIPKcvE.isra.7>
    Particle.variable("currentStr",currentStr);
    Particle.variable("ShareVar",ShareVar);
    //Particle.variable("Current", Current_Str);
    Particle.variable("Topic", test);
    Particle.process();
 80a1936:	f7fe fd39 	bl	80a03ac <_ZN10CloudClass7processEv>
	
	RGB.control(true);
 80a193a:	2001      	movs	r0, #1
 80a193c:	f002 fcd4 	bl	80a42e8 <_ZN8RGBClass7controlEb>
    Time.zone(1); //Dutch time zone
 80a1940:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80a1944:	f002 fbba 	bl	80a40bc <_ZN9TimeClass4zoneEf>
}
 80a1948:	b005      	add	sp, #20
 80a194a:	f85d fb04 	ldr.w	pc, [sp], #4
            spark_process();
 80a194e:	f001 fc9b 	bl	80a3288 <spark_process>
 80a1952:	e784      	b.n	80a185e <setup+0x1a>
 80a1954:	080a997b 	.word	0x080a997b
 80a1958:	080a0149 	.word	0x080a0149
 80a195c:	080a9995 	.word	0x080a9995
 80a1960:	080a0191 	.word	0x080a0191
 80a1964:	080a99a0 	.word	0x080a99a0
 80a1968:	080a0215 	.word	0x080a0215
 80a196c:	080a99ad 	.word	0x080a99ad
 80a1970:	080a00c3 	.word	0x080a00c3
 80a1974:	080a99ba 	.word	0x080a99ba
 80a1978:	080a00e1 	.word	0x080a00e1
 80a197c:	080a99c6 	.word	0x080a99c6
 80a1980:	080a0141 	.word	0x080a0141
 80a1984:	080a99d3 	.word	0x080a99d3
 80a1988:	080a0125 	.word	0x080a0125
 80a198c:	080a99e0 	.word	0x080a99e0
 80a1990:	080a02fd 	.word	0x080a02fd
 80a1994:	080a99eb 	.word	0x080a99eb
 80a1998:	2000047c 	.word	0x2000047c
 80a199c:	080a99f4 	.word	0x080a99f4
 80a19a0:	2000033c 	.word	0x2000033c
 80a19a4:	080a99ff 	.word	0x080a99ff
 80a19a8:	2000049c 	.word	0x2000049c
 80a19ac:	080a9a08 	.word	0x080a9a08

080a19b0 <_GLOBAL__sub_I_readnextLine>:
        UIDtagCharger1="No ID";
    if ((activeCharger()!=2)&&(activeCharger()!=3))
        UIDtagCharger2="No ID";
            
    handledCharger = !handledCharger;
 80a19b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
void reconnect(void);
void callback(char* topic, byte* payload, unsigned int length);
void charToString(const char in[], String &out);
void getMeasure_callback(byte* payload, unsigned int length);

String UIDtagCharger1="No ID";
 80a19b2:	4f32      	ldr	r7, [pc, #200]	; (80a1a7c <_GLOBAL__sub_I_readnextLine+0xcc>)
 80a19b4:	4e32      	ldr	r6, [pc, #200]	; (80a1a80 <_GLOBAL__sub_I_readnextLine+0xd0>)
 80a19b6:	4c33      	ldr	r4, [pc, #204]	; (80a1a84 <_GLOBAL__sub_I_readnextLine+0xd4>)
 80a19b8:	4d33      	ldr	r5, [pc, #204]	; (80a1a88 <_GLOBAL__sub_I_readnextLine+0xd8>)
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a19ba:	f001 fa07 	bl	80a2dcc <HAL_Pin_Map>
 80a19be:	4639      	mov	r1, r7
 80a19c0:	4630      	mov	r0, r6
 80a19c2:	f002 f8a2 	bl	80a3b0a <_ZN6StringC1EPK19__FlashStringHelper>
 80a19c6:	4630      	mov	r0, r6
String UIDtagCharger2="No ID";
 80a19c8:	4e30      	ldr	r6, [pc, #192]	; (80a1a8c <_GLOBAL__sub_I_readnextLine+0xdc>)
void reconnect(void);
void callback(char* topic, byte* payload, unsigned int length);
void charToString(const char in[], String &out);
void getMeasure_callback(byte* payload, unsigned int length);

String UIDtagCharger1="No ID";
 80a19ca:	4622      	mov	r2, r4
 80a19cc:	4629      	mov	r1, r5
 80a19ce:	f003 f9d9 	bl	80a4d84 <__aeabi_atexit>
String UIDtagCharger2="No ID";
 80a19d2:	4639      	mov	r1, r7
 80a19d4:	4630      	mov	r0, r6
 80a19d6:	f002 f898 	bl	80a3b0a <_ZN6StringC1EPK19__FlashStringHelper>
 80a19da:	4622      	mov	r2, r4
 80a19dc:	4629      	mov	r1, r5
 80a19de:	4630      	mov	r0, r6
 80a19e0:	f003 f9d0 	bl	80a4d84 <__aeabi_atexit>
    bool clearCredentials(void) {
        return network_clear_credentials(*this, 0, NULL, NULL);
    }

    int selectAntenna(WLanSelectAntenna_TypeDef antenna) {
        return wlan_select_antenna(antenna);
 80a19e4:	2001      	movs	r0, #1
 80a19e6:	f001 fb8b 	bl	80a3100 <wlan_select_antenna>
//SYSTEM_THREAD(ENABLED);

//MQTT setting
//byte server[] = {192,168,43,249};
//MQTT client(server, 1883, callback);
MQTT client("broker.hivemq.com", 1883, MQTT_DEFAULT_KEEPALIVE, callback, 512);
 80a19ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80a19ee:	4e28      	ldr	r6, [pc, #160]	; (80a1a90 <_GLOBAL__sub_I_readnextLine+0xe0>)
 80a19f0:	9301      	str	r3, [sp, #4]
 80a19f2:	4b28      	ldr	r3, [pc, #160]	; (80a1a94 <_GLOBAL__sub_I_readnextLine+0xe4>)
 80a19f4:	f240 725b 	movw	r2, #1883	; 0x75b
 80a19f8:	9300      	str	r3, [sp, #0]
 80a19fa:	4927      	ldr	r1, [pc, #156]	; (80a1a98 <_GLOBAL__sub_I_readnextLine+0xe8>)
 80a19fc:	230f      	movs	r3, #15
 80a19fe:	4630      	mov	r0, r6
 80a1a00:	f000 fca6 	bl	80a2350 <_ZN4MQTTC1EPctiPFvS0_PhjEi>
 80a1a04:	4630      	mov	r0, r6
//char ID[] = "11111";

String test = "0";
 80a1a06:	4e25      	ldr	r6, [pc, #148]	; (80a1a9c <_GLOBAL__sub_I_readnextLine+0xec>)
//SYSTEM_THREAD(ENABLED);

//MQTT setting
//byte server[] = {192,168,43,249};
//MQTT client(server, 1883, callback);
MQTT client("broker.hivemq.com", 1883, MQTT_DEFAULT_KEEPALIVE, callback, 512);
 80a1a08:	4622      	mov	r2, r4
 80a1a0a:	4925      	ldr	r1, [pc, #148]	; (80a1aa0 <_GLOBAL__sub_I_readnextLine+0xf0>)
 80a1a0c:	f003 f9ba 	bl	80a4d84 <__aeabi_atexit>
//char ID[] = "11111";

String test = "0";
 80a1a10:	4924      	ldr	r1, [pc, #144]	; (80a1aa4 <_GLOBAL__sub_I_readnextLine+0xf4>)
 80a1a12:	4630      	mov	r0, r6
 80a1a14:	f002 f879 	bl	80a3b0a <_ZN6StringC1EPK19__FlashStringHelper>
 80a1a18:	4622      	mov	r2, r4
 80a1a1a:	4629      	mov	r1, r5
 80a1a1c:	4630      	mov	r0, r6
 80a1a1e:	f003 f9b1 	bl	80a4d84 <__aeabi_atexit>
int counter=11;
MFRC522 mfrc522_Charger1(SS_PIN_CHARGER1, RST_PIN);   // Create MFRC522 instance.
MFRC522 mfrc522_Charger2(SS_PIN_CHARGER2, RST_PIN);   // Create MFRC522 instance.
unsigned long LatestStartTime[2]={0,0};
bool handledCharger=0;
String ShareVar;
 80a1a22:	4e21      	ldr	r6, [pc, #132]	; (80a1aa8 <_GLOBAL__sub_I_readnextLine+0xf8>)
 80a1a24:	4f21      	ldr	r7, [pc, #132]	; (80a1aac <_GLOBAL__sub_I_readnextLine+0xfc>)

String test = "0";


int counter=11;
MFRC522 mfrc522_Charger1(SS_PIN_CHARGER1, RST_PIN);   // Create MFRC522 instance.
 80a1a26:	220a      	movs	r2, #10
 80a1a28:	210b      	movs	r1, #11
 80a1a2a:	4821      	ldr	r0, [pc, #132]	; (80a1ab0 <_GLOBAL__sub_I_readnextLine+0x100>)
 80a1a2c:	f000 f848 	bl	80a1ac0 <_ZN7MFRC522C1Ehh>
MFRC522 mfrc522_Charger2(SS_PIN_CHARGER2, RST_PIN);   // Create MFRC522 instance.
 80a1a30:	220a      	movs	r2, #10
 80a1a32:	210c      	movs	r1, #12
 80a1a34:	481f      	ldr	r0, [pc, #124]	; (80a1ab4 <_GLOBAL__sub_I_readnextLine+0x104>)
 80a1a36:	f000 f843 	bl	80a1ac0 <_ZN7MFRC522C1Ehh>
unsigned long LatestStartTime[2]={0,0};
bool handledCharger=0;
String ShareVar;
 80a1a3a:	4631      	mov	r1, r6
 80a1a3c:	4638      	mov	r0, r7
 80a1a3e:	f002 f864 	bl	80a3b0a <_ZN6StringC1EPK19__FlashStringHelper>
 80a1a42:	4638      	mov	r0, r7
//     unsigned long StartTime;
// };

EMeter EMeterData[NUMBEROFMETERS];
//EMeter EMeterData;
String EVListStr="";
 80a1a44:	4f1c      	ldr	r7, [pc, #112]	; (80a1ab8 <_GLOBAL__sub_I_readnextLine+0x108>)
int counter=11;
MFRC522 mfrc522_Charger1(SS_PIN_CHARGER1, RST_PIN);   // Create MFRC522 instance.
MFRC522 mfrc522_Charger2(SS_PIN_CHARGER2, RST_PIN);   // Create MFRC522 instance.
unsigned long LatestStartTime[2]={0,0};
bool handledCharger=0;
String ShareVar;
 80a1a46:	4622      	mov	r2, r4
 80a1a48:	4629      	mov	r1, r5
 80a1a4a:	f003 f99b 	bl	80a4d84 <__aeabi_atexit>
//     unsigned long StartTime;
// };

EMeter EMeterData[NUMBEROFMETERS];
//EMeter EMeterData;
String EVListStr="";
 80a1a4e:	4631      	mov	r1, r6
 80a1a50:	4638      	mov	r0, r7
 80a1a52:	f002 f85a 	bl	80a3b0a <_ZN6StringC1EPK19__FlashStringHelper>
 80a1a56:	4638      	mov	r0, r7
String currentStr="";
 80a1a58:	4f18      	ldr	r7, [pc, #96]	; (80a1abc <_GLOBAL__sub_I_readnextLine+0x10c>)
//     unsigned long StartTime;
// };

EMeter EMeterData[NUMBEROFMETERS];
//EMeter EMeterData;
String EVListStr="";
 80a1a5a:	4622      	mov	r2, r4
 80a1a5c:	4629      	mov	r1, r5
 80a1a5e:	f003 f991 	bl	80a4d84 <__aeabi_atexit>
String currentStr="";
 80a1a62:	4631      	mov	r1, r6
 80a1a64:	4638      	mov	r0, r7
 80a1a66:	f002 f850 	bl	80a3b0a <_ZN6StringC1EPK19__FlashStringHelper>
 80a1a6a:	4622      	mov	r2, r4
 80a1a6c:	4629      	mov	r1, r5
 80a1a6e:	4638      	mov	r0, r7
        UIDtagCharger1="No ID";
    if ((activeCharger()!=2)&&(activeCharger()!=3))
        UIDtagCharger2="No ID";
            
    handledCharger = !handledCharger;
 80a1a70:	b003      	add	sp, #12
 80a1a72:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
// };

EMeter EMeterData[NUMBEROFMETERS];
//EMeter EMeterData;
String EVListStr="";
String currentStr="";
 80a1a76:	f003 b985 	b.w	80a4d84 <__aeabi_atexit>
 80a1a7a:	bf00      	nop
 80a1a7c:	080a998f 	.word	0x080a998f
 80a1a80:	2000031c 	.word	0x2000031c
 80a1a84:	200000fc 	.word	0x200000fc
 80a1a88:	080a3a7d 	.word	0x080a3a7d
 80a1a8c:	2000032c 	.word	0x2000032c
 80a1a90:	200002c4 	.word	0x200002c4
 80a1a94:	080a0db1 	.word	0x080a0db1
 80a1a98:	080a9a0e 	.word	0x080a9a0e
 80a1a9c:	2000049c 	.word	0x2000049c
 80a1aa0:	080a2ad3 	.word	0x080a2ad3
 80a1aa4:	080a98fe 	.word	0x080a98fe
 80a1aa8:	080a997b 	.word	0x080a997b
 80a1aac:	2000033c 	.word	0x2000033c
 80a1ab0:	2000048c 	.word	0x2000048c
 80a1ab4:	200002b4 	.word	0x200002b4
 80a1ab8:	2000029c 	.word	0x2000029c
 80a1abc:	2000047c 	.word	0x2000047c

080a1ac0 <_ZN7MFRC522C1Ehh>:

/**
 * Constructor.
 * Prepares the output pins.
 */
MFRC522::MFRC522(	byte chipSelectPin,		///< Arduino pin connected to MFRC522's SPI slave select input (Pin 24, NSS, active low)
 80a1ac0:	b538      	push	{r3, r4, r5, lr}
 80a1ac2:	4604      	mov	r4, r0
 80a1ac4:	4615      	mov	r5, r2
 80a1ac6:	4608      	mov	r0, r1
					byte resetPowerDownPin	///< Arduino pin connected to MFRC522's reset and power down input (Pin 6, NRSTPD, active low)
				) {
	// Set the chipSelectPin as digital output, do not select the slave yet
	_chipSelectPin = chipSelectPin;
 80a1ac8:	7321      	strb	r1, [r4, #12]
	pinMode(_chipSelectPin, OUTPUT);
 80a1aca:	2101      	movs	r1, #1
 80a1acc:	f003 f8c4 	bl	80a4c58 <pinMode>
	digitalWrite(_chipSelectPin, HIGH);
 80a1ad0:	7b20      	ldrb	r0, [r4, #12]
 80a1ad2:	2101      	movs	r1, #1
 80a1ad4:	f003 f8d1 	bl	80a4c7a <digitalWrite>
	
	// Set the resetPowerDownPin as digital output, do not reset or power down.
	_resetPowerDownPin = resetPowerDownPin;
	pinMode(_resetPowerDownPin, OUTPUT);
 80a1ad8:	4628      	mov	r0, r5
	_chipSelectPin = chipSelectPin;
	pinMode(_chipSelectPin, OUTPUT);
	digitalWrite(_chipSelectPin, HIGH);
	
	// Set the resetPowerDownPin as digital output, do not reset or power down.
	_resetPowerDownPin = resetPowerDownPin;
 80a1ada:	7365      	strb	r5, [r4, #13]
	pinMode(_resetPowerDownPin, OUTPUT);
 80a1adc:	2101      	movs	r1, #1
 80a1ade:	f003 f8bb 	bl	80a4c58 <pinMode>
	digitalWrite(_resetPowerDownPin, LOW);
 80a1ae2:	7b60      	ldrb	r0, [r4, #13]
 80a1ae4:	2100      	movs	r1, #0
 80a1ae6:	f003 f8c8 	bl	80a4c7a <digitalWrite>
	
	// Set SPI bus to work with MFRC522 chip.
	//setSPIConfig();
} // End constructor
 80a1aea:	4620      	mov	r0, r4
 80a1aec:	bd38      	pop	{r3, r4, r5, pc}
	...

080a1af0 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>:
namespace particle {

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
 80a1af0:	b538      	push	{r3, r4, r5, lr}
        static SPIClass instance(Interface);
 80a1af2:	4d0b      	ldr	r5, [pc, #44]	; (80a1b20 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x30>)
 80a1af4:	6829      	ldr	r1, [r5, #0]
 80a1af6:	f011 0401 	ands.w	r4, r1, #1
 80a1afa:	d10f      	bne.n	80a1b1c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x2c>
 80a1afc:	4628      	mov	r0, r5
 80a1afe:	f7fe fad6 	bl	80a00ae <__cxa_guard_acquire>
 80a1b02:	b158      	cbz	r0, 80a1b1c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x2c>
 80a1b04:	4621      	mov	r1, r4
 80a1b06:	4807      	ldr	r0, [pc, #28]	; (80a1b24 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x34>)
 80a1b08:	f001 fc34 	bl	80a3374 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a1b0c:	4628      	mov	r0, r5
 80a1b0e:	f7fe fad3 	bl	80a00b8 <__cxa_guard_release>
 80a1b12:	4a05      	ldr	r2, [pc, #20]	; (80a1b28 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x38>)
 80a1b14:	4905      	ldr	r1, [pc, #20]	; (80a1b2c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x3c>)
 80a1b16:	4803      	ldr	r0, [pc, #12]	; (80a1b24 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x34>)
 80a1b18:	f003 f934 	bl	80a4d84 <__aeabi_atexit>
        return instance;
    }
 80a1b1c:	4801      	ldr	r0, [pc, #4]	; (80a1b24 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x34>)
 80a1b1e:	bd38      	pop	{r3, r4, r5, pc}
 80a1b20:	20000100 	.word	0x20000100
 80a1b24:	20000104 	.word	0x20000104
 80a1b28:	200000fc 	.word	0x200000fc
 80a1b2c:	080a02c7 	.word	0x080a02c7

080a1b30 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8transferEh.isra.9>:
        return instance().setClockSpeed(value, scale);
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
 80a1b30:	b510      	push	{r4, lr}
 80a1b32:	4604      	mov	r4, r0
        return instance().transfer(data);
 80a1b34:	f7ff ffdc 	bl	80a1af0 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
 80a1b38:	4621      	mov	r1, r4
    }
 80a1b3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
 80a1b3e:	f001 bc38 	b.w	80a33b2 <_ZN8SPIClass8transferEh>

080a1b42 <_ZN7MFRC52217PCD_WriteRegisterEhh>:
 * Writes a byte to the specified register in the MFRC522 chip.
 * The interface is described in the datasheet section 8.1.2.
 */
void MFRC522::PCD_WriteRegister(	byte reg,		///< The register to write to. One of the PCD_Register enums.
									byte value		///< The value to write.
								) {
 80a1b42:	b570      	push	{r4, r5, r6, lr}
 80a1b44:	460e      	mov	r6, r1
 80a1b46:	4615      	mov	r5, r2
 80a1b48:	4604      	mov	r4, r0
	digitalWrite(_chipSelectPin, LOW);		// Select slave
 80a1b4a:	2100      	movs	r1, #0
 80a1b4c:	7b00      	ldrb	r0, [r0, #12]
 80a1b4e:	f003 f894 	bl	80a4c7a <digitalWrite>
	SPI.transfer(reg & 0x7E);					// MSB == 0 is for writing. LSB is not used in address. Datasheet section 8.1.2.3.
 80a1b52:	f006 007e 	and.w	r0, r6, #126	; 0x7e
 80a1b56:	f7ff ffeb 	bl	80a1b30 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8transferEh.isra.9>
	SPI.transfer(value);
 80a1b5a:	4628      	mov	r0, r5
 80a1b5c:	f7ff ffe8 	bl	80a1b30 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8transferEh.isra.9>
	digitalWrite(_chipSelectPin, HIGH);		// Release slave again
 80a1b60:	7b20      	ldrb	r0, [r4, #12]
 80a1b62:	2101      	movs	r1, #1
} // End PCD_WriteRegister()
 80a1b64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
									byte value		///< The value to write.
								) {
	digitalWrite(_chipSelectPin, LOW);		// Select slave
	SPI.transfer(reg & 0x7E);					// MSB == 0 is for writing. LSB is not used in address. Datasheet section 8.1.2.3.
	SPI.transfer(value);
	digitalWrite(_chipSelectPin, HIGH);		// Release slave again
 80a1b68:	f003 b887 	b.w	80a4c7a <digitalWrite>

080a1b6c <_ZN7MFRC52217PCD_WriteRegisterEhhPh>:
 * The interface is described in the datasheet section 8.1.2.
 */
void MFRC522::PCD_WriteRegister(	byte reg,		///< The register to write to. One of the PCD_Register enums.
									byte count,		///< The number of bytes to write to the register
									byte *values	///< The values to write. Byte array.
								) {
 80a1b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1b6e:	460d      	mov	r5, r1
 80a1b70:	4614      	mov	r4, r2
	digitalWrite(_chipSelectPin, LOW);		// Select slave
 80a1b72:	2100      	movs	r1, #0
 * The interface is described in the datasheet section 8.1.2.
 */
void MFRC522::PCD_WriteRegister(	byte reg,		///< The register to write to. One of the PCD_Register enums.
									byte count,		///< The number of bytes to write to the register
									byte *values	///< The values to write. Byte array.
								) {
 80a1b74:	4606      	mov	r6, r0
	digitalWrite(_chipSelectPin, LOW);		// Select slave
 80a1b76:	7b00      	ldrb	r0, [r0, #12]
 * The interface is described in the datasheet section 8.1.2.
 */
void MFRC522::PCD_WriteRegister(	byte reg,		///< The register to write to. One of the PCD_Register enums.
									byte count,		///< The number of bytes to write to the register
									byte *values	///< The values to write. Byte array.
								) {
 80a1b78:	461f      	mov	r7, r3
	digitalWrite(_chipSelectPin, LOW);		// Select slave
 80a1b7a:	f003 f87e 	bl	80a4c7a <digitalWrite>
	SPI.transfer(reg & 0x7E);				// MSB == 0 is for writing. LSB is not used in address. Datasheet section 8.1.2.3.
 80a1b7e:	f005 007e 	and.w	r0, r5, #126	; 0x7e
 80a1b82:	f7ff ffd5 	bl	80a1b30 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8transferEh.isra.9>
 80a1b86:	3c01      	subs	r4, #1
 80a1b88:	1e7d      	subs	r5, r7, #1
 80a1b8a:	443c      	add	r4, r7
	for (byte index = 0; index < count; index++) {
 80a1b8c:	42a5      	cmp	r5, r4
 80a1b8e:	d004      	beq.n	80a1b9a <_ZN7MFRC52217PCD_WriteRegisterEhhPh+0x2e>
		SPI.transfer(values[index]);
 80a1b90:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 80a1b94:	f7ff ffcc 	bl	80a1b30 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8transferEh.isra.9>
									byte count,		///< The number of bytes to write to the register
									byte *values	///< The values to write. Byte array.
								) {
	digitalWrite(_chipSelectPin, LOW);		// Select slave
	SPI.transfer(reg & 0x7E);				// MSB == 0 is for writing. LSB is not used in address. Datasheet section 8.1.2.3.
	for (byte index = 0; index < count; index++) {
 80a1b98:	e7f8      	b.n	80a1b8c <_ZN7MFRC52217PCD_WriteRegisterEhhPh+0x20>
		SPI.transfer(values[index]);
	}
	digitalWrite(_chipSelectPin, HIGH);		// Release slave again
 80a1b9a:	7b30      	ldrb	r0, [r6, #12]
 80a1b9c:	2101      	movs	r1, #1
} // End PCD_WriteRegister()
 80a1b9e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	digitalWrite(_chipSelectPin, LOW);		// Select slave
	SPI.transfer(reg & 0x7E);				// MSB == 0 is for writing. LSB is not used in address. Datasheet section 8.1.2.3.
	for (byte index = 0; index < count; index++) {
		SPI.transfer(values[index]);
	}
	digitalWrite(_chipSelectPin, HIGH);		// Release slave again
 80a1ba2:	f003 b86a 	b.w	80a4c7a <digitalWrite>

080a1ba6 <_ZN7MFRC52216PCD_ReadRegisterEh>:
/**
 * Reads a byte from the specified register in the MFRC522 chip.
 * The interface is described in the datasheet section 8.1.2.
 */
byte MFRC522::PCD_ReadRegister(	byte reg	///< The register to read from. One of the PCD_Register enums.
								) {
 80a1ba6:	b538      	push	{r3, r4, r5, lr}
 80a1ba8:	460c      	mov	r4, r1
 80a1baa:	4605      	mov	r5, r0
	byte value;
	digitalWrite(_chipSelectPin, LOW);			// Select slave
 80a1bac:	2100      	movs	r1, #0
 80a1bae:	7b00      	ldrb	r0, [r0, #12]
 80a1bb0:	f003 f863 	bl	80a4c7a <digitalWrite>
	SPI.transfer(0x80 | (reg & 0x7E));			// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
 80a1bb4:	f004 007e 	and.w	r0, r4, #126	; 0x7e
 80a1bb8:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 80a1bbc:	f7ff ffb8 	bl	80a1b30 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8transferEh.isra.9>
	value = SPI.transfer(0);					// Read the value back. Send 0 to stop reading.
 80a1bc0:	2000      	movs	r0, #0
 80a1bc2:	f7ff ffb5 	bl	80a1b30 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8transferEh.isra.9>
 80a1bc6:	4604      	mov	r4, r0
	digitalWrite(_chipSelectPin, HIGH);			// Release slave again
 80a1bc8:	2101      	movs	r1, #1
 80a1bca:	7b28      	ldrb	r0, [r5, #12]
 80a1bcc:	f003 f855 	bl	80a4c7a <digitalWrite>
	return value;
} // End PCD_ReadRegister()
 80a1bd0:	4620      	mov	r0, r4
 80a1bd2:	bd38      	pop	{r3, r4, r5, pc}

080a1bd4 <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>:
/**
 * Sets the bits given in mask in register reg.
 */
void MFRC522::PCD_SetRegisterBitMask(	byte reg,	///< The register to update. One of the PCD_Register enums.
										byte mask	///< The bits to set.
									) { 
 80a1bd4:	b570      	push	{r4, r5, r6, lr}
 80a1bd6:	4605      	mov	r5, r0
 80a1bd8:	460e      	mov	r6, r1
 80a1bda:	4614      	mov	r4, r2
	byte tmp;
	tmp = PCD_ReadRegister(reg);
 80a1bdc:	f7ff ffe3 	bl	80a1ba6 <_ZN7MFRC52216PCD_ReadRegisterEh>
	PCD_WriteRegister(reg, tmp | mask);			// set bit mask
 80a1be0:	ea40 0204 	orr.w	r2, r0, r4
 80a1be4:	4631      	mov	r1, r6
 80a1be6:	4628      	mov	r0, r5
} // End PCD_SetRegisterBitMask()
 80a1be8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
void MFRC522::PCD_SetRegisterBitMask(	byte reg,	///< The register to update. One of the PCD_Register enums.
										byte mask	///< The bits to set.
									) { 
	byte tmp;
	tmp = PCD_ReadRegister(reg);
	PCD_WriteRegister(reg, tmp | mask);			// set bit mask
 80a1bec:	b2d2      	uxtb	r2, r2
 80a1bee:	f7ff bfa8 	b.w	80a1b42 <_ZN7MFRC52217PCD_WriteRegisterEhh>

080a1bf2 <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>:
/**
 * Clears the bits given in mask from register reg.
 */
void MFRC522::PCD_ClearRegisterBitMask(	byte reg,	///< The register to update. One of the PCD_Register enums.
										byte mask	///< The bits to clear.
									  ) {
 80a1bf2:	b570      	push	{r4, r5, r6, lr}
 80a1bf4:	4605      	mov	r5, r0
 80a1bf6:	460e      	mov	r6, r1
 80a1bf8:	4614      	mov	r4, r2
	byte tmp;
	tmp = PCD_ReadRegister(reg);
 80a1bfa:	f7ff ffd4 	bl	80a1ba6 <_ZN7MFRC52216PCD_ReadRegisterEh>
	PCD_WriteRegister(reg, tmp & (~mask));		// clear bit mask
 80a1bfe:	ea20 0204 	bic.w	r2, r0, r4
 80a1c02:	4631      	mov	r1, r6
 80a1c04:	4628      	mov	r0, r5
} // End PCD_ClearRegisterBitMask()
 80a1c06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
void MFRC522::PCD_ClearRegisterBitMask(	byte reg,	///< The register to update. One of the PCD_Register enums.
										byte mask	///< The bits to clear.
									  ) {
	byte tmp;
	tmp = PCD_ReadRegister(reg);
	PCD_WriteRegister(reg, tmp & (~mask));		// clear bit mask
 80a1c0a:	b2d2      	uxtb	r2, r2
 80a1c0c:	f7ff bf99 	b.w	80a1b42 <_ZN7MFRC52217PCD_WriteRegisterEhh>

080a1c10 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>:
 * @return STATUS_OK on success, STATUS_??? otherwise.
 */
byte MFRC522::PCD_CalculateCRC(	byte *data,		///< In: Pointer to the data to transfer to the FIFO for CRC calculation.
								byte length,	///< In: The number of bytes to transfer.
								byte *result	///< Out: Pointer to result buffer. Result is written to result[0..1], low byte first.
					 ) {
 80a1c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1c12:	4604      	mov	r4, r0
 80a1c14:	4615      	mov	r5, r2
 80a1c16:	460f      	mov	r7, r1
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop any active command.
 80a1c18:	2200      	movs	r2, #0
 80a1c1a:	2102      	movs	r1, #2
 * @return STATUS_OK on success, STATUS_??? otherwise.
 */
byte MFRC522::PCD_CalculateCRC(	byte *data,		///< In: Pointer to the data to transfer to the FIFO for CRC calculation.
								byte length,	///< In: The number of bytes to transfer.
								byte *result	///< Out: Pointer to result buffer. Result is written to result[0..1], low byte first.
					 ) {
 80a1c1c:	461e      	mov	r6, r3
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop any active command.
 80a1c1e:	f7ff ff90 	bl	80a1b42 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(DivIrqReg, 0x04);					// Clear the CRCIRq interrupt request bit
 80a1c22:	2204      	movs	r2, #4
 80a1c24:	210a      	movs	r1, #10
 80a1c26:	4620      	mov	r0, r4
 80a1c28:	f7ff ff8b 	bl	80a1b42 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_SetRegisterBitMask(FIFOLevelReg, 0x80);		// FlushBuffer = 1, FIFO initialization
 80a1c2c:	2280      	movs	r2, #128	; 0x80
 80a1c2e:	2114      	movs	r1, #20
 80a1c30:	4620      	mov	r0, r4
 80a1c32:	f7ff ffcf 	bl	80a1bd4 <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>
	PCD_WriteRegister(FIFODataReg, length, data);		// Write data to the FIFO
 80a1c36:	462a      	mov	r2, r5
 80a1c38:	463b      	mov	r3, r7
 80a1c3a:	2112      	movs	r1, #18
 80a1c3c:	4620      	mov	r0, r4
 80a1c3e:	f7ff ff95 	bl	80a1b6c <_ZN7MFRC52217PCD_WriteRegisterEhhPh>
	PCD_WriteRegister(CommandReg, PCD_CalcCRC);		// Start the calculation
 80a1c42:	2203      	movs	r2, #3
 80a1c44:	2102      	movs	r1, #2
 80a1c46:	4620      	mov	r0, r4
 80a1c48:	f7ff ff7b 	bl	80a1b42 <_ZN7MFRC52217PCD_WriteRegisterEhh>
 80a1c4c:	f241 3588 	movw	r5, #5000	; 0x1388
	
	// Wait for the CRC calculation to complete. Each iteration of the while-loop takes 17.73�s.
	word i = 5000;
	byte n;
	while (1) {
		n = PCD_ReadRegister(DivIrqReg);	// DivIrqReg[7..0] bits are: Set2 reserved reserved MfinActIRq   reserved CRCIRq reserved reserved
 80a1c50:	210a      	movs	r1, #10
 80a1c52:	4620      	mov	r0, r4
 80a1c54:	f7ff ffa7 	bl	80a1ba6 <_ZN7MFRC52216PCD_ReadRegisterEh>
		if (n & 0x04) {						// CRCIRq bit set - calculation done
 80a1c58:	0743      	lsls	r3, r0, #29
 80a1c5a:	d405      	bmi.n	80a1c68 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x58>
 80a1c5c:	3d01      	subs	r5, #1
 80a1c5e:	b2ad      	uxth	r5, r5
			break;
		}
		if (--i == 0) {						// The emergency break. We will eventually terminate on this one after 89ms. Communication with the MFRC522 might be down.
 80a1c60:	2d00      	cmp	r5, #0
 80a1c62:	d1f5      	bne.n	80a1c50 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x40>
			return STATUS_TIMEOUT;
 80a1c64:	2004      	movs	r0, #4
	
	// Transfer the result from the registers to the result buffer
	result[0] = PCD_ReadRegister(CRCResultRegL);
	result[1] = PCD_ReadRegister(CRCResultRegH);
	return STATUS_OK;
} // End PCD_CalculateCRC()
 80a1c66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
		if (--i == 0) {						// The emergency break. We will eventually terminate on this one after 89ms. Communication with the MFRC522 might be down.
			return STATUS_TIMEOUT;
		}
	}
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop calculating CRC for new content in the FIFO.
 80a1c68:	2200      	movs	r2, #0
 80a1c6a:	4620      	mov	r0, r4
 80a1c6c:	2102      	movs	r1, #2
 80a1c6e:	f7ff ff68 	bl	80a1b42 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	
	// Transfer the result from the registers to the result buffer
	result[0] = PCD_ReadRegister(CRCResultRegL);
 80a1c72:	2144      	movs	r1, #68	; 0x44
 80a1c74:	4620      	mov	r0, r4
 80a1c76:	f7ff ff96 	bl	80a1ba6 <_ZN7MFRC52216PCD_ReadRegisterEh>
	result[1] = PCD_ReadRegister(CRCResultRegH);
 80a1c7a:	2142      	movs	r1, #66	; 0x42
		}
	}
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop calculating CRC for new content in the FIFO.
	
	// Transfer the result from the registers to the result buffer
	result[0] = PCD_ReadRegister(CRCResultRegL);
 80a1c7c:	7030      	strb	r0, [r6, #0]
	result[1] = PCD_ReadRegister(CRCResultRegH);
 80a1c7e:	4620      	mov	r0, r4
 80a1c80:	f7ff ff91 	bl	80a1ba6 <_ZN7MFRC52216PCD_ReadRegisterEh>
 80a1c84:	7070      	strb	r0, [r6, #1]
	return STATUS_OK;
 80a1c86:	2001      	movs	r0, #1
 80a1c88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1c8a <_ZN7MFRC5229PCD_ResetEv>:
} // End PCD_Init()

/**
 * Performs a soft reset on the MFRC522 chip and waits for it to be ready again.
 */
void MFRC522::PCD_Reset() {
 80a1c8a:	b510      	push	{r4, lr}
	PCD_WriteRegister(CommandReg, PCD_SoftReset);	// Issue the SoftReset command.
 80a1c8c:	220f      	movs	r2, #15
 80a1c8e:	2102      	movs	r1, #2
} // End PCD_Init()

/**
 * Performs a soft reset on the MFRC522 chip and waits for it to be ready again.
 */
void MFRC522::PCD_Reset() {
 80a1c90:	4604      	mov	r4, r0
	PCD_WriteRegister(CommandReg, PCD_SoftReset);	// Issue the SoftReset command.
 80a1c92:	f7ff ff56 	bl	80a1b42 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	// The datasheet does not mention how long the SoftRest command takes to complete.
	// But the MFRC522 might have been in soft power-down mode (triggered by bit 4 of CommandReg) 
	// Section 8.8.2 in the datasheet says the oscillator start-up time is the start up time of the crystal + 37,74�s. Let us be generous: 50ms.
	delay(50);
 80a1c96:	2032      	movs	r0, #50	; 0x32
 80a1c98:	f002 fb14 	bl	80a42c4 <delay>
	// Wait for the PowerDown bit in CommandReg to be cleared
	while (PCD_ReadRegister(CommandReg) & (1<<4)) {
 80a1c9c:	2102      	movs	r1, #2
 80a1c9e:	4620      	mov	r0, r4
 80a1ca0:	f7ff ff81 	bl	80a1ba6 <_ZN7MFRC52216PCD_ReadRegisterEh>
 80a1ca4:	06c3      	lsls	r3, r0, #27
 80a1ca6:	d4f9      	bmi.n	80a1c9c <_ZN7MFRC5229PCD_ResetEv+0x12>
		// PCD still restarting - unlikely after waiting 50ms, but better safe than sorry.
	}
} // End PCD_Reset()
 80a1ca8:	bd10      	pop	{r4, pc}

080a1caa <_ZN7MFRC52213PCD_AntennaOnEv>:

/**
 * Turns the antenna on by enabling pins TX1 and TX2.
 * After a reset these pins disabled.
 */
void MFRC522::PCD_AntennaOn() {
 80a1caa:	b510      	push	{r4, lr}
	byte value = PCD_ReadRegister(TxControlReg);
 80a1cac:	2128      	movs	r1, #40	; 0x28

/**
 * Turns the antenna on by enabling pins TX1 and TX2.
 * After a reset these pins disabled.
 */
void MFRC522::PCD_AntennaOn() {
 80a1cae:	4604      	mov	r4, r0
	byte value = PCD_ReadRegister(TxControlReg);
 80a1cb0:	f7ff ff79 	bl	80a1ba6 <_ZN7MFRC52216PCD_ReadRegisterEh>
	if ((value & 0x03) != 0x03) {
 80a1cb4:	f000 0303 	and.w	r3, r0, #3
 80a1cb8:	2b03      	cmp	r3, #3
 80a1cba:	d008      	beq.n	80a1cce <_ZN7MFRC52213PCD_AntennaOnEv+0x24>
		PCD_WriteRegister(TxControlReg, value | 0x03);
 80a1cbc:	f040 0203 	orr.w	r2, r0, #3
 80a1cc0:	b2d2      	uxtb	r2, r2
 80a1cc2:	4620      	mov	r0, r4
	}
} // End PCD_AntennaOn()
 80a1cc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 * After a reset these pins disabled.
 */
void MFRC522::PCD_AntennaOn() {
	byte value = PCD_ReadRegister(TxControlReg);
	if ((value & 0x03) != 0x03) {
		PCD_WriteRegister(TxControlReg, value | 0x03);
 80a1cc8:	2128      	movs	r1, #40	; 0x28
 80a1cca:	f7ff bf3a 	b.w	80a1b42 <_ZN7MFRC52217PCD_WriteRegisterEhh>
 80a1cce:	bd10      	pop	{r4, pc}

080a1cd0 <_ZN7MFRC5228PCD_InitEv>:
/////////////////////////////////////////////////////////////////////////////////////

/**
 * Initializes the MFRC522 chip.
 */
void MFRC522::PCD_Init() {
 80a1cd0:	b510      	push	{r4, lr}
 80a1cd2:	4604      	mov	r4, r0
	if (digitalRead(_resetPowerDownPin) == LOW) { //The MFRC522 chip is in power down mode.
 80a1cd4:	7b40      	ldrb	r0, [r0, #13]
 80a1cd6:	f002 ffe9 	bl	80a4cac <digitalRead>
 80a1cda:	b938      	cbnz	r0, 80a1cec <_ZN7MFRC5228PCD_InitEv+0x1c>
		digitalWrite(_resetPowerDownPin, HIGH);	// Exit power down mode. This triggers a hard reset.
 80a1cdc:	7b60      	ldrb	r0, [r4, #13]
 80a1cde:	2101      	movs	r1, #1
 80a1ce0:	f002 ffcb 	bl	80a4c7a <digitalWrite>
		// Section 8.8.2 in the datasheet says the oscillator start-up time is the start up time of the crystal + 37,74�s. Let us be generous: 50ms.
		delay(50);
 80a1ce4:	2032      	movs	r0, #50	; 0x32
 80a1ce6:	f002 faed 	bl	80a42c4 <delay>
 80a1cea:	e002      	b.n	80a1cf2 <_ZN7MFRC5228PCD_InitEv+0x22>
	}
	else { // Perform a soft reset
		PCD_Reset();
 80a1cec:	4620      	mov	r0, r4
 80a1cee:	f7ff ffcc 	bl	80a1c8a <_ZN7MFRC5229PCD_ResetEv>
	}
	
	// When communicating with a PICC we need a timeout if something goes wrong.
	// f_timer = 13.56 MHz / (2*TPreScaler+1) where TPreScaler = [TPrescaler_Hi:TPrescaler_Lo].
	// TPrescaler_Hi are the four low bits in TModeReg. TPrescaler_Lo is TPrescalerReg.
    PCD_WriteRegister(TModeReg, 0x80);			// TAuto=1; timer starts automatically at the end of the transmission in all communication modes at all speeds
 80a1cf2:	4620      	mov	r0, r4
 80a1cf4:	2280      	movs	r2, #128	; 0x80
 80a1cf6:	2154      	movs	r1, #84	; 0x54
 80a1cf8:	f7ff ff23 	bl	80a1b42 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    PCD_WriteRegister(TPrescalerReg, 0xA9);	// TPreScaler = TModeReg[3..0]:TPrescalerReg, ie 0x0A9 = 169 => f_timer=40kHz, ie a timer period of 25�s.
 80a1cfc:	4620      	mov	r0, r4
 80a1cfe:	22a9      	movs	r2, #169	; 0xa9
 80a1d00:	2156      	movs	r1, #86	; 0x56
 80a1d02:	f7ff ff1e 	bl	80a1b42 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    PCD_WriteRegister(TReloadRegH, 0x03);		// Reload timer with 0x3E8 = 1000, ie 25ms before timeout.
 80a1d06:	4620      	mov	r0, r4
 80a1d08:	2203      	movs	r2, #3
 80a1d0a:	2158      	movs	r1, #88	; 0x58
 80a1d0c:	f7ff ff19 	bl	80a1b42 <_ZN7MFRC52217PCD_WriteRegisterEhh>
    PCD_WriteRegister(TReloadRegL, 0xE8);
 80a1d10:	4620      	mov	r0, r4
 80a1d12:	22e8      	movs	r2, #232	; 0xe8
 80a1d14:	215a      	movs	r1, #90	; 0x5a
 80a1d16:	f7ff ff14 	bl	80a1b42 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	
	PCD_WriteRegister(TxASKReg, 0x40);		// Default 0x00. Force a 100 % ASK modulation independent of the ModGsPReg register setting
 80a1d1a:	4620      	mov	r0, r4
 80a1d1c:	2240      	movs	r2, #64	; 0x40
 80a1d1e:	212a      	movs	r1, #42	; 0x2a
 80a1d20:	f7ff ff0f 	bl	80a1b42 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(ModeReg, 0x3D);		// Default 0x3F. Set the preset value for the CRC coprocessor for the CalcCRC command to 0x6363 (ISO 14443-3 part 6.2.4)
 80a1d24:	4620      	mov	r0, r4
 80a1d26:	223d      	movs	r2, #61	; 0x3d
 80a1d28:	2122      	movs	r1, #34	; 0x22
 80a1d2a:	f7ff ff0a 	bl	80a1b42 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_AntennaOn();						// Enable the antenna driver pins TX1 and TX2 (they were disabled by the reset)
 80a1d2e:	4620      	mov	r0, r4
} // End PCD_Init()
 80a1d30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    PCD_WriteRegister(TReloadRegH, 0x03);		// Reload timer with 0x3E8 = 1000, ie 25ms before timeout.
    PCD_WriteRegister(TReloadRegL, 0xE8);
	
	PCD_WriteRegister(TxASKReg, 0x40);		// Default 0x00. Force a 100 % ASK modulation independent of the ModGsPReg register setting
	PCD_WriteRegister(ModeReg, 0x3D);		// Default 0x3F. Set the preset value for the CRC coprocessor for the CalcCRC command to 0x6363 (ISO 14443-3 part 6.2.4)
	PCD_AntennaOn();						// Enable the antenna driver pins TX1 and TX2 (they were disabled by the reset)
 80a1d34:	f7ff bfb9 	b.w	80a1caa <_ZN7MFRC52213PCD_AntennaOnEv>

080a1d38 <_ZN7MFRC52218PCD_GetAntennaGainEv>:
 * See 9.3.3.6 / table 98 in http://www.nxp.com/documents/data_sheet/MFRC522.pdf
 * NOTE: Return value scrubbed with (0x07<<4)=01110000b as RCFfgReg may use reserved bits.
 * 
 * @return Value of the RxGain, scrubbed to the 3 bits used.
 */
byte MFRC522::PCD_GetAntennaGain() {
 80a1d38:	b508      	push	{r3, lr}
	return PCD_ReadRegister(RFCfgReg) & (0x07<<4);
 80a1d3a:	214c      	movs	r1, #76	; 0x4c
 80a1d3c:	f7ff ff33 	bl	80a1ba6 <_ZN7MFRC52216PCD_ReadRegisterEh>
} // End PCD_GetAntennaGain()
 80a1d40:	f000 0070 	and.w	r0, r0, #112	; 0x70
 80a1d44:	bd08      	pop	{r3, pc}

080a1d46 <_ZN7MFRC52218PCD_SetAntennaGainEh>:
/**
 * Set the MFRC522 Receiver Gain (RxGain) to value specified by given mask.
 * See 9.3.3.6 / table 98 in http://www.nxp.com/documents/data_sheet/MFRC522.pdf
 * NOTE: Given mask is scrubbed with (0x07<<4)=01110000b as RCFfgReg may use reserved bits.
 */
void MFRC522::PCD_SetAntennaGain(byte mask) {
 80a1d46:	b538      	push	{r3, r4, r5, lr}
 80a1d48:	460d      	mov	r5, r1
 80a1d4a:	4604      	mov	r4, r0
	if (PCD_GetAntennaGain() != mask) {						// only bother if there is a change
 80a1d4c:	f7ff fff4 	bl	80a1d38 <_ZN7MFRC52218PCD_GetAntennaGainEv>
 80a1d50:	42a8      	cmp	r0, r5
 80a1d52:	d00c      	beq.n	80a1d6e <_ZN7MFRC52218PCD_SetAntennaGainEh+0x28>
		PCD_ClearRegisterBitMask(RFCfgReg, (0x07<<4));		// clear needed to allow 000 pattern
 80a1d54:	4620      	mov	r0, r4
 80a1d56:	2270      	movs	r2, #112	; 0x70
 80a1d58:	214c      	movs	r1, #76	; 0x4c
 80a1d5a:	f7ff ff4a 	bl	80a1bf2 <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>
		PCD_SetRegisterBitMask(RFCfgReg, mask & (0x07<<4));	// only set RxGain[2:0] bits
 80a1d5e:	f005 0270 	and.w	r2, r5, #112	; 0x70
 80a1d62:	4620      	mov	r0, r4
	}
} // End PCD_SetAntennaGain()
 80a1d64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 * NOTE: Given mask is scrubbed with (0x07<<4)=01110000b as RCFfgReg may use reserved bits.
 */
void MFRC522::PCD_SetAntennaGain(byte mask) {
	if (PCD_GetAntennaGain() != mask) {						// only bother if there is a change
		PCD_ClearRegisterBitMask(RFCfgReg, (0x07<<4));		// clear needed to allow 000 pattern
		PCD_SetRegisterBitMask(RFCfgReg, mask & (0x07<<4));	// only set RxGain[2:0] bits
 80a1d68:	214c      	movs	r1, #76	; 0x4c
 80a1d6a:	f7ff bf33 	b.w	80a1bd4 <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>
 80a1d6e:	bd38      	pop	{r3, r4, r5, pc}

080a1d70 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh>:
 */
void MFRC522::PCD_ReadRegister(	byte reg,		///< The register to read from. One of the PCD_Register enums.
								byte count,		///< The number of bytes to read
								byte *values,	///< Byte array to store the values in.
								byte rxAlign	///< Only bit positions rxAlign..7 in values[0] are updated.
								) {
 80a1d70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a1d74:	4680      	mov	r8, r0
 80a1d76:	461f      	mov	r7, r3
 80a1d78:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
	if (count == 0) {
 80a1d7c:	4615      	mov	r5, r2
 80a1d7e:	2a00      	cmp	r2, #0
 80a1d80:	d03f      	beq.n	80a1e02 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x92>
		return;
	}
	//Serial.print("Reading "); 	Serial.print(count); Serial.println(" bytes from register.");
	byte address = 0x80 | (reg & 0x7E);		// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
 80a1d82:	f001 017e 	and.w	r1, r1, #126	; 0x7e
 80a1d86:	f041 0680 	orr.w	r6, r1, #128	; 0x80
	byte index = 0;							// Index in values array.
	digitalWrite(_chipSelectPin, LOW);		// Select slave
 80a1d8a:	7b00      	ldrb	r0, [r0, #12]
 80a1d8c:	2100      	movs	r1, #0
 80a1d8e:	f002 ff74 	bl	80a4c7a <digitalWrite>
	count--;								// One read is performed outside of the loop
	SPI.transfer(address);					// Tell MFRC522 which address we want to read
 80a1d92:	4630      	mov	r0, r6
 80a1d94:	f7ff fecc 	bl	80a1b30 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8transferEh.isra.9>
	}
	//Serial.print("Reading "); 	Serial.print(count); Serial.println(" bytes from register.");
	byte address = 0x80 | (reg & 0x7E);		// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
	byte index = 0;							// Index in values array.
	digitalWrite(_chipSelectPin, LOW);		// Select slave
	count--;								// One read is performed outside of the loop
 80a1d98:	3d01      	subs	r5, #1
 80a1d9a:	b2ed      	uxtb	r5, r5
	SPI.transfer(address);					// Tell MFRC522 which address we want to read
 80a1d9c:	f04f 0b00 	mov.w	fp, #0
	while (index < count) {
		if (index == 0 && rxAlign) { // Only update bit positions rxAlign..7 in values[0]
			// Create bit mask for bit positions rxAlign..7
			byte mask = 0;
			for (byte i = rxAlign; i <= 7; i++) {
				mask |= (1 << i);
 80a1da0:	f04f 0a01 	mov.w	sl, #1
 80a1da4:	fa5f f48b 	uxtb.w	r4, fp
	byte address = 0x80 | (reg & 0x7E);		// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
	byte index = 0;							// Index in values array.
	digitalWrite(_chipSelectPin, LOW);		// Select slave
	count--;								// One read is performed outside of the loop
	SPI.transfer(address);					// Tell MFRC522 which address we want to read
	while (index < count) {
 80a1da8:	42a5      	cmp	r5, r4
 80a1daa:	d91f      	bls.n	80a1dec <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x7c>
		if (index == 0 && rxAlign) { // Only update bit positions rxAlign..7 in values[0]
 80a1dac:	b9b4      	cbnz	r4, 80a1ddc <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x6c>
 80a1dae:	f1b9 0f00 	cmp.w	r9, #0
 80a1db2:	d013      	beq.n	80a1ddc <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x6c>
 80a1db4:	464b      	mov	r3, r9
			// Create bit mask for bit positions rxAlign..7
			byte mask = 0;
			for (byte i = rxAlign; i <= 7; i++) {
 80a1db6:	2b07      	cmp	r3, #7
 80a1db8:	d806      	bhi.n	80a1dc8 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x58>
				mask |= (1 << i);
 80a1dba:	fa0a f003 	lsl.w	r0, sl, r3
 80a1dbe:	4304      	orrs	r4, r0
	SPI.transfer(address);					// Tell MFRC522 which address we want to read
	while (index < count) {
		if (index == 0 && rxAlign) { // Only update bit positions rxAlign..7 in values[0]
			// Create bit mask for bit positions rxAlign..7
			byte mask = 0;
			for (byte i = rxAlign; i <= 7; i++) {
 80a1dc0:	3301      	adds	r3, #1
				mask |= (1 << i);
 80a1dc2:	b2e4      	uxtb	r4, r4
	SPI.transfer(address);					// Tell MFRC522 which address we want to read
	while (index < count) {
		if (index == 0 && rxAlign) { // Only update bit positions rxAlign..7 in values[0]
			// Create bit mask for bit positions rxAlign..7
			byte mask = 0;
			for (byte i = rxAlign; i <= 7; i++) {
 80a1dc4:	b2db      	uxtb	r3, r3
 80a1dc6:	e7f6      	b.n	80a1db6 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x46>
				mask |= (1 << i);
			}
			// Read value and tell that we want to read the same address again.
			byte value = SPI.transfer(address);	
 80a1dc8:	4630      	mov	r0, r6
 80a1dca:	f7ff feb1 	bl	80a1b30 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8transferEh.isra.9>
			// Apply mask to both current value of values[0] and the new data in value.
			values[0] = (values[index] & ~mask) | (value & mask);
 80a1dce:	783b      	ldrb	r3, [r7, #0]
 80a1dd0:	4020      	ands	r0, r4
 80a1dd2:	ea23 0304 	bic.w	r3, r3, r4
 80a1dd6:	4318      	orrs	r0, r3
 80a1dd8:	7038      	strb	r0, [r7, #0]
 80a1dda:	e004      	b.n	80a1de6 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x76>
		}
		else { // Normal case
			values[index] = SPI.transfer(address);	// Read value and tell that we want to read the same address again.
 80a1ddc:	4630      	mov	r0, r6
 80a1dde:	f7ff fea7 	bl	80a1b30 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8transferEh.isra.9>
 80a1de2:	f807 000b 	strb.w	r0, [r7, fp]
 80a1de6:	f10b 0b01 	add.w	fp, fp, #1
 80a1dea:	e7db      	b.n	80a1da4 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x34>
		}
		index++;
	}
	values[index] = SPI.transfer(0);			// Read the final byte. Send 0 to stop reading.
 80a1dec:	2000      	movs	r0, #0
 80a1dee:	f7ff fe9f 	bl	80a1b30 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8transferEh.isra.9>
 80a1df2:	5578      	strb	r0, [r7, r5]
	digitalWrite(_chipSelectPin, HIGH);			// Release slave again
 80a1df4:	f898 000c 	ldrb.w	r0, [r8, #12]
 80a1df8:	2101      	movs	r1, #1
} // End PCD_ReadRegister()
 80a1dfa:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			values[index] = SPI.transfer(address);	// Read value and tell that we want to read the same address again.
		}
		index++;
	}
	values[index] = SPI.transfer(0);			// Read the final byte. Send 0 to stop reading.
	digitalWrite(_chipSelectPin, HIGH);			// Release slave again
 80a1dfe:	f002 bf3c 	b.w	80a4c7a <digitalWrite>
 80a1e02:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a1e06 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>:
										byte *backData,		///< NULL or pointer to buffer if data should be read back after executing the command.
										byte *backLen,		///< In: Max number of bytes to write to *backData. Out: The number of bytes returned.
										byte *validBits,	///< In/Out: The number of valid bits in the last byte. 0 for 8 valid bits.
										byte rxAlign,		///< In: Defines the bit position in backData[0] for the first bit received. Default 0.
										bool checkCRC		///< In: True => The last two bytes of the response is assumed to be a CRC_A that must be validated.
									 ) {
 80a1e06:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a1e0a:	b087      	sub	sp, #28
 80a1e0c:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
 80a1e10:	4604      	mov	r4, r0
 80a1e12:	468b      	mov	fp, r1
 80a1e14:	9202      	str	r2, [sp, #8]
 80a1e16:	9f11      	ldr	r7, [sp, #68]	; 0x44
 80a1e18:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80a1e1a:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
	byte n, _validBits;
	unsigned int i;

	// Prepare values for BitFramingReg
	byte txLastBits = validBits ? *validBits : 0;
 80a1e1e:	f1b8 0f00 	cmp.w	r8, #0
 80a1e22:	d002      	beq.n	80a1e2a <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x24>
 80a1e24:	f898 6000 	ldrb.w	r6, [r8]
 80a1e28:	e000      	b.n	80a1e2c <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x26>
 80a1e2a:	4646      	mov	r6, r8
	byte bitFraming	= (rxAlign << 4) + txLastBits;		// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
	
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop any active command.
 80a1e2c:	2200      	movs	r2, #0
 80a1e2e:	2102      	movs	r1, #2
 80a1e30:	4620      	mov	r0, r4
 80a1e32:	9303      	str	r3, [sp, #12]
 80a1e34:	f7ff fe85 	bl	80a1b42 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(ComIrqReg, 0x7F);					// Clear all seven interrupt request bits
 80a1e38:	227f      	movs	r2, #127	; 0x7f
 80a1e3a:	2108      	movs	r1, #8
 80a1e3c:	4620      	mov	r0, r4
 80a1e3e:	f7ff fe80 	bl	80a1b42 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	byte n, _validBits;
	unsigned int i;

	// Prepare values for BitFramingReg
	byte txLastBits = validBits ? *validBits : 0;
	byte bitFraming	= (rxAlign << 4) + txLastBits;		// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
 80a1e42:	eb06 160a 	add.w	r6, r6, sl, lsl #4
	
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop any active command.
	PCD_WriteRegister(ComIrqReg, 0x7F);					// Clear all seven interrupt request bits
	PCD_SetRegisterBitMask(FIFOLevelReg, 0x80);		// FlushBuffer = 1, FIFO initialization
 80a1e46:	2280      	movs	r2, #128	; 0x80
 80a1e48:	2114      	movs	r1, #20
 80a1e4a:	4620      	mov	r0, r4
 80a1e4c:	f7ff fec2 	bl	80a1bd4 <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>
	byte n, _validBits;
	unsigned int i;

	// Prepare values for BitFramingReg
	byte txLastBits = validBits ? *validBits : 0;
	byte bitFraming	= (rxAlign << 4) + txLastBits;		// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
 80a1e50:	b2f6      	uxtb	r6, r6
	
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop any active command.
	PCD_WriteRegister(ComIrqReg, 0x7F);					// Clear all seven interrupt request bits
	PCD_SetRegisterBitMask(FIFOLevelReg, 0x80);		// FlushBuffer = 1, FIFO initialization
	PCD_WriteRegister(FIFODataReg, sendLen, sendData);	// Write sendData to the FIFO
 80a1e52:	9b03      	ldr	r3, [sp, #12]
 80a1e54:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 80a1e58:	2112      	movs	r1, #18
 80a1e5a:	4620      	mov	r0, r4
 80a1e5c:	f7ff fe86 	bl	80a1b6c <_ZN7MFRC52217PCD_WriteRegisterEhhPh>
	PCD_WriteRegister(BitFramingReg, bitFraming);		// Bit adjustments
 80a1e60:	4632      	mov	r2, r6
 80a1e62:	211a      	movs	r1, #26
 80a1e64:	4620      	mov	r0, r4
 80a1e66:	f7ff fe6c 	bl	80a1b42 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(CommandReg, command);			// Execute the command
 80a1e6a:	465a      	mov	r2, fp
 80a1e6c:	2102      	movs	r1, #2
 80a1e6e:	4620      	mov	r0, r4
 80a1e70:	f7ff fe67 	bl	80a1b42 <_ZN7MFRC52217PCD_WriteRegisterEhh>
	if (command == PCD_Transceive) 	{
 80a1e74:	f1bb 0f0c 	cmp.w	fp, #12
 80a1e78:	d104      	bne.n	80a1e84 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x7e>
		PCD_SetRegisterBitMask(BitFramingReg, 0x80);	// StartSend=1, transmission of data starts
 80a1e7a:	2280      	movs	r2, #128	; 0x80
 80a1e7c:	211a      	movs	r1, #26
 80a1e7e:	4620      	mov	r0, r4
 80a1e80:	f7ff fea8 	bl	80a1bd4 <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>
									 ) {
	byte n, _validBits;
	unsigned int i;

	// Prepare values for BitFramingReg
	byte txLastBits = validBits ? *validBits : 0;
 80a1e84:	f44f 66fa 	mov.w	r6, #2000	; 0x7d0
	// Wait for the command to complete.
	// In PCD_Init() we set the TAuto flag in TModeReg. This means the timer automatically starts when the PCD stops transmitting.
	// Each iteration of the do-while-loop takes 17.86�s.
	i = 2000;
	while (1) {
		n = PCD_ReadRegister(ComIrqReg);	// ComIrqReg[7..0] bits are: Set1 TxIRq RxIRq IdleIRq   HiAlertIRq LoAlertIRq ErrIRq TimerIRq
 80a1e88:	2108      	movs	r1, #8
 80a1e8a:	4620      	mov	r0, r4
 80a1e8c:	f7ff fe8b 	bl	80a1ba6 <_ZN7MFRC52216PCD_ReadRegisterEh>
		if (n & waitIRq) {					// One of the interrupts that signal success has been set.
 80a1e90:	9b02      	ldr	r3, [sp, #8]
 80a1e92:	4218      	tst	r0, r3
 80a1e94:	d104      	bne.n	80a1ea0 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x9a>
			break;
		}
		if (n & 0x01) {						// Timer interrupt - nothing received in 25ms
 80a1e96:	07c2      	lsls	r2, r0, #31
 80a1e98:	d452      	bmi.n	80a1f40 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x13a>
			return STATUS_TIMEOUT;
		}
		if (--i == 0) {						// The emergency break. If all other condions fail we will eventually terminate on this one after 35.7ms. Communication with the MFRC522 might be down.
 80a1e9a:	3e01      	subs	r6, #1
 80a1e9c:	d1f4      	bne.n	80a1e88 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x82>
 80a1e9e:	e04f      	b.n	80a1f40 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x13a>
			return STATUS_TIMEOUT;
		}
	}
	
	// Stop now if any errors except collisions were detected.
	byte errorRegValue = PCD_ReadRegister(ErrorReg); // ErrorReg[7..0] bits are: WrErr TempErr reserved BufferOvfl   CollErr CRCErr ParityErr ProtocolErr
 80a1ea0:	210c      	movs	r1, #12
 80a1ea2:	4620      	mov	r0, r4
 80a1ea4:	f7ff fe7f 	bl	80a1ba6 <_ZN7MFRC52216PCD_ReadRegisterEh>
	if (errorRegValue & 0x13) {	 // BufferOvfl ParityErr ProtocolErr
 80a1ea8:	f010 0f13 	tst.w	r0, #19
			return STATUS_TIMEOUT;
		}
	}
	
	// Stop now if any errors except collisions were detected.
	byte errorRegValue = PCD_ReadRegister(ErrorReg); // ErrorReg[7..0] bits are: WrErr TempErr reserved BufferOvfl   CollErr CRCErr ParityErr ProtocolErr
 80a1eac:	4606      	mov	r6, r0
	if (errorRegValue & 0x13) {	 // BufferOvfl ParityErr ProtocolErr
 80a1eae:	d149      	bne.n	80a1f44 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x13e>
		return STATUS_ERROR;
	}	

	// If the caller wants data back, get it from the MFRC522.
	if (backData && backLen) {
 80a1eb0:	b1df      	cbz	r7, 80a1eea <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xe4>
 80a1eb2:	b1d5      	cbz	r5, 80a1eea <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xe4>
		n = PCD_ReadRegister(FIFOLevelReg);						// Number of bytes in the FIFO
 80a1eb4:	2114      	movs	r1, #20
 80a1eb6:	4620      	mov	r0, r4
 80a1eb8:	f7ff fe75 	bl	80a1ba6 <_ZN7MFRC52216PCD_ReadRegisterEh>
		if (n > *backLen) {
 80a1ebc:	782b      	ldrb	r3, [r5, #0]
		return STATUS_ERROR;
	}	

	// If the caller wants data back, get it from the MFRC522.
	if (backData && backLen) {
		n = PCD_ReadRegister(FIFOLevelReg);						// Number of bytes in the FIFO
 80a1ebe:	4602      	mov	r2, r0
		if (n > *backLen) {
 80a1ec0:	4283      	cmp	r3, r0
 80a1ec2:	d341      	bcc.n	80a1f48 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x142>
			return STATUS_NO_ROOM;
		}
		*backLen = n;												// Number of bytes returned
 80a1ec4:	7028      	strb	r0, [r5, #0]
		PCD_ReadRegister(FIFODataReg, n, backData, rxAlign);		// Get received data from FIFO
 80a1ec6:	463b      	mov	r3, r7
 80a1ec8:	2112      	movs	r1, #18
 80a1eca:	4620      	mov	r0, r4
 80a1ecc:	f8cd a000 	str.w	sl, [sp]
 80a1ed0:	f7ff ff4e 	bl	80a1d70 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh>
		_validBits = PCD_ReadRegister(ControlReg) & 0x07;	// RxLastBits[2:0] indicates the number of valid bits in the last received byte. If this value is 000b, the whole byte is valid.
 80a1ed4:	2118      	movs	r1, #24
 80a1ed6:	4620      	mov	r0, r4
 80a1ed8:	f7ff fe65 	bl	80a1ba6 <_ZN7MFRC52216PCD_ReadRegisterEh>
 80a1edc:	f000 0907 	and.w	r9, r0, #7
		if (validBits) {
 80a1ee0:	f1b8 0f00 	cmp.w	r8, #0
 80a1ee4:	d001      	beq.n	80a1eea <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xe4>
			*validBits = _validBits;
 80a1ee6:	f888 9000 	strb.w	r9, [r8]
		}
	}
	
	// Tell about collisions
	if (errorRegValue & 0x08) { // CollErr
 80a1eea:	0733      	lsls	r3, r6, #28
 80a1eec:	d42e      	bmi.n	80a1f4c <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x146>
		return STATUS_COLLISION;
	}
	
	// Perform CRC_A validation if requested.
	if (backData && backLen && checkCRC) {
 80a1eee:	b37f      	cbz	r7, 80a1f50 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x14a>
 80a1ef0:	b375      	cbz	r5, 80a1f50 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x14a>
 80a1ef2:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 80a1ef6:	b35b      	cbz	r3, 80a1f50 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x14a>
		// In this case a MIFARE Classic NAK is not OK.
		if (*backLen == 1 && _validBits == 4) {
 80a1ef8:	782a      	ldrb	r2, [r5, #0]
 80a1efa:	2a01      	cmp	r2, #1
 80a1efc:	d104      	bne.n	80a1f08 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x102>
 80a1efe:	f1b9 0f04 	cmp.w	r9, #4
 80a1f02:	d127      	bne.n	80a1f54 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x14e>
			return STATUS_MIFARE_NACK;
 80a1f04:	2009      	movs	r0, #9
 80a1f06:	e026      	b.n	80a1f56 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x150>
		}
		// We need at least the CRC_A value and all 8 bits of the last byte must be received.
		if (*backLen < 2 || _validBits != 0) {
 80a1f08:	d924      	bls.n	80a1f54 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x14e>
 80a1f0a:	f1b9 0f00 	cmp.w	r9, #0
 80a1f0e:	d121      	bne.n	80a1f54 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x14e>
			return STATUS_CRC_WRONG;
		}
		// Verify CRC_A - do our own calculation and store the control in controlBuffer.
		byte controlBuffer[2]; 
		n = PCD_CalculateCRC(&backData[0], *backLen - 2, &controlBuffer[0]);
 80a1f10:	3a02      	subs	r2, #2
 80a1f12:	ab05      	add	r3, sp, #20
 80a1f14:	b2d2      	uxtb	r2, r2
 80a1f16:	4639      	mov	r1, r7
 80a1f18:	4620      	mov	r0, r4
 80a1f1a:	f7ff fe79 	bl	80a1c10 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
		if (n != STATUS_OK) {
 80a1f1e:	2801      	cmp	r0, #1
 80a1f20:	d119      	bne.n	80a1f56 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x150>
			return n;
		}
		if ((backData[*backLen - 2] != controlBuffer[0]) || (backData[*backLen - 1] != controlBuffer[1])) {
 80a1f22:	782b      	ldrb	r3, [r5, #0]
 80a1f24:	441f      	add	r7, r3
 80a1f26:	f817 2c02 	ldrb.w	r2, [r7, #-2]
 80a1f2a:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80a1f2e:	429a      	cmp	r2, r3
 80a1f30:	d110      	bne.n	80a1f54 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x14e>
 80a1f32:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80a1f36:	f89d 3015 	ldrb.w	r3, [sp, #21]
 80a1f3a:	429a      	cmp	r2, r3
 80a1f3c:	d10a      	bne.n	80a1f54 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x14e>
 80a1f3e:	e00a      	b.n	80a1f56 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x150>
		n = PCD_ReadRegister(ComIrqReg);	// ComIrqReg[7..0] bits are: Set1 TxIRq RxIRq IdleIRq   HiAlertIRq LoAlertIRq ErrIRq TimerIRq
		if (n & waitIRq) {					// One of the interrupts that signal success has been set.
			break;
		}
		if (n & 0x01) {						// Timer interrupt - nothing received in 25ms
			return STATUS_TIMEOUT;
 80a1f40:	2004      	movs	r0, #4
 80a1f42:	e008      	b.n	80a1f56 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x150>
	}
	
	// Stop now if any errors except collisions were detected.
	byte errorRegValue = PCD_ReadRegister(ErrorReg); // ErrorReg[7..0] bits are: WrErr TempErr reserved BufferOvfl   CollErr CRCErr ParityErr ProtocolErr
	if (errorRegValue & 0x13) {	 // BufferOvfl ParityErr ProtocolErr
		return STATUS_ERROR;
 80a1f44:	2002      	movs	r0, #2
 80a1f46:	e006      	b.n	80a1f56 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x150>

	// If the caller wants data back, get it from the MFRC522.
	if (backData && backLen) {
		n = PCD_ReadRegister(FIFOLevelReg);						// Number of bytes in the FIFO
		if (n > *backLen) {
			return STATUS_NO_ROOM;
 80a1f48:	2005      	movs	r0, #5
 80a1f4a:	e004      	b.n	80a1f56 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x150>
		}
	}
	
	// Tell about collisions
	if (errorRegValue & 0x08) { // CollErr
		return STATUS_COLLISION;
 80a1f4c:	2003      	movs	r0, #3
 80a1f4e:	e002      	b.n	80a1f56 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x150>
		if ((backData[*backLen - 2] != controlBuffer[0]) || (backData[*backLen - 1] != controlBuffer[1])) {
			return STATUS_CRC_WRONG;
		}
	}
	
	return STATUS_OK;
 80a1f50:	2001      	movs	r0, #1
 80a1f52:	e000      	b.n	80a1f56 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x150>
		if (*backLen == 1 && _validBits == 4) {
			return STATUS_MIFARE_NACK;
		}
		// We need at least the CRC_A value and all 8 bits of the last byte must be received.
		if (*backLen < 2 || _validBits != 0) {
			return STATUS_CRC_WRONG;
 80a1f54:	2008      	movs	r0, #8
			return STATUS_CRC_WRONG;
		}
	}
	
	return STATUS_OK;
} // End PCD_CommunicateWithPICC()
 80a1f56:	b007      	add	sp, #28
 80a1f58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a1f5c <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>:
									byte *backData,		///< NULL or pointer to buffer if data should be read back after executing the command.
									byte *backLen,		///< In: Max number of bytes to write to *backData. Out: The number of bytes returned.
									byte *validBits,	///< In/Out: The number of valid bits in the last byte. 0 for 8 valid bits. Default NULL.
									byte rxAlign,		///< In: Defines the bit position in backData[0] for the first bit received. Default 0.
									bool checkCRC		///< In: True => The last two bytes of the response is assumed to be a CRC_A that must be validated.
								 ) {
 80a1f5c:	b510      	push	{r4, lr}
 80a1f5e:	b086      	sub	sp, #24
	byte waitIRq = 0x30;		// RxIRq and IdleIRq
	return PCD_CommunicateWithPICC(PCD_Transceive, waitIRq, sendData, sendLen, backData, backLen, validBits, rxAlign, checkCRC);
 80a1f60:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
 80a1f64:	9405      	str	r4, [sp, #20]
 80a1f66:	f89d 4028 	ldrb.w	r4, [sp, #40]	; 0x28
 80a1f6a:	9404      	str	r4, [sp, #16]
 80a1f6c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80a1f6e:	9403      	str	r4, [sp, #12]
 80a1f70:	9c08      	ldr	r4, [sp, #32]
 80a1f72:	e88d 001c 	stmia.w	sp, {r2, r3, r4}
 80a1f76:	460b      	mov	r3, r1
 80a1f78:	2230      	movs	r2, #48	; 0x30
 80a1f7a:	210c      	movs	r1, #12
 80a1f7c:	f7ff ff43 	bl	80a1e06 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>
} // End PCD_TransceiveData()
 80a1f80:	b006      	add	sp, #24
 80a1f82:	bd10      	pop	{r4, pc}

080a1f84 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_>:
 * @return STATUS_OK on success, STATUS_??? otherwise.
 */ 
byte MFRC522::PICC_REQA_or_WUPA(	byte command, 		///< The command to send - PICC_CMD_REQA or PICC_CMD_WUPA
									byte *bufferATQA,	///< The buffer to store the ATQA (Answer to request) in
									byte *bufferSize	///< Buffer size, at least two bytes. Also number of bytes returned if STATUS_OK.
							   ) {
 80a1f84:	b570      	push	{r4, r5, r6, lr}
 80a1f86:	b088      	sub	sp, #32
 80a1f88:	4606      	mov	r6, r0
 80a1f8a:	461c      	mov	r4, r3
 80a1f8c:	f88d 1017 	strb.w	r1, [sp, #23]
	byte validBits;
	byte status;
	
	if (bufferATQA == NULL || *bufferSize < 2) {	// The ATQA response is 2 bytes long.
 80a1f90:	4615      	mov	r5, r2
 80a1f92:	b312      	cbz	r2, 80a1fda <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x56>
 80a1f94:	781b      	ldrb	r3, [r3, #0]
 80a1f96:	2b01      	cmp	r3, #1
 80a1f98:	d91f      	bls.n	80a1fda <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x56>
		return STATUS_NO_ROOM;
	}
	PCD_ClearRegisterBitMask(CollReg, 0x80);			// ValuesAfterColl=1 => Bits received after collision are cleared.
 80a1f9a:	2280      	movs	r2, #128	; 0x80
 80a1f9c:	211c      	movs	r1, #28
 80a1f9e:	f7ff fe28 	bl	80a1bf2 <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>
	validBits = 7;										// For REQA and WUPA we need the short frame format - transmit only 7 bits of the last (and only) byte. TxLastBits = BitFramingReg[2..0]
 80a1fa2:	2307      	movs	r3, #7
 80a1fa4:	f88d 301f 	strb.w	r3, [sp, #31]
	status = PCD_TransceiveData(&command, 1, bufferATQA, bufferSize, &validBits);
 80a1fa8:	2300      	movs	r3, #0
 80a1faa:	9303      	str	r3, [sp, #12]
 80a1fac:	9302      	str	r3, [sp, #8]
 80a1fae:	f10d 031f 	add.w	r3, sp, #31
 80a1fb2:	9301      	str	r3, [sp, #4]
 80a1fb4:	9400      	str	r4, [sp, #0]
 80a1fb6:	462b      	mov	r3, r5
 80a1fb8:	2201      	movs	r2, #1
 80a1fba:	f10d 0117 	add.w	r1, sp, #23
 80a1fbe:	4630      	mov	r0, r6
 80a1fc0:	f7ff ffcc 	bl	80a1f5c <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
	if (status != STATUS_OK) {
 80a1fc4:	2801      	cmp	r0, #1
 80a1fc6:	d10b      	bne.n	80a1fe0 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x5c>
		return status;
	}
	if (*bufferSize != 2 || validBits != 0) {		// ATQA must be exactly 16 bits.
 80a1fc8:	7820      	ldrb	r0, [r4, #0]
 80a1fca:	2802      	cmp	r0, #2
 80a1fcc:	d107      	bne.n	80a1fde <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x5a>
 80a1fce:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80a1fd2:	2b00      	cmp	r3, #0
		return STATUS_ERROR;
	}
	return STATUS_OK;
 80a1fd4:	bf08      	it	eq
 80a1fd6:	2001      	moveq	r0, #1
 80a1fd8:	e002      	b.n	80a1fe0 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x5c>
							   ) {
	byte validBits;
	byte status;
	
	if (bufferATQA == NULL || *bufferSize < 2) {	// The ATQA response is 2 bytes long.
		return STATUS_NO_ROOM;
 80a1fda:	2005      	movs	r0, #5
 80a1fdc:	e000      	b.n	80a1fe0 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x5c>
	status = PCD_TransceiveData(&command, 1, bufferATQA, bufferSize, &validBits);
	if (status != STATUS_OK) {
		return status;
	}
	if (*bufferSize != 2 || validBits != 0) {		// ATQA must be exactly 16 bits.
		return STATUS_ERROR;
 80a1fde:	2002      	movs	r0, #2
	}
	return STATUS_OK;
} // End PICC_REQA_or_WUPA()
 80a1fe0:	b008      	add	sp, #32
 80a1fe2:	bd70      	pop	{r4, r5, r6, pc}

080a1fe4 <_ZN7MFRC52213PICC_RequestAEPhS0_>:
 * @return STATUS_OK on success, STATUS_??? otherwise.
 */
byte MFRC522::PICC_RequestA(byte *bufferATQA,	///< The buffer to store the ATQA (Answer to request) in
							byte *bufferSize	///< Buffer size, at least two bytes. Also number of bytes returned if STATUS_OK.
							) {
	return PICC_REQA_or_WUPA(PICC_CMD_REQA, bufferATQA, bufferSize);
 80a1fe4:	4613      	mov	r3, r2
 80a1fe6:	460a      	mov	r2, r1
 80a1fe8:	2126      	movs	r1, #38	; 0x26
 80a1fea:	f7ff bfcb 	b.w	80a1f84 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_>

080a1fee <_ZN7MFRC52221PICC_IsNewCardPresentEv>:
 * Returns true if a PICC responds to PICC_CMD_REQA.
 * Only "new" cards in state IDLE are invited. Sleeping cards in state HALT are ignored.
 * 
 * @return bool
 */
bool MFRC522::PICC_IsNewCardPresent() {
 80a1fee:	b507      	push	{r0, r1, r2, lr}
	byte bufferATQA[2];
	byte bufferSize = sizeof(bufferATQA);
 80a1ff0:	2302      	movs	r3, #2
 80a1ff2:	aa02      	add	r2, sp, #8
 80a1ff4:	f802 3d05 	strb.w	r3, [r2, #-5]!
	byte result = PICC_RequestA(bufferATQA, &bufferSize);
 80a1ff8:	a901      	add	r1, sp, #4
 80a1ffa:	f7ff fff3 	bl	80a1fe4 <_ZN7MFRC52213PICC_RequestAEPhS0_>
	return (result == STATUS_OK || result == STATUS_COLLISION);
 80a1ffe:	2801      	cmp	r0, #1
 80a2000:	d002      	beq.n	80a2008 <_ZN7MFRC52221PICC_IsNewCardPresentEv+0x1a>
 80a2002:	1ec3      	subs	r3, r0, #3
 80a2004:	4258      	negs	r0, r3
 80a2006:	4158      	adcs	r0, r3
} // End PICC_IsNewCardPresent()
 80a2008:	b003      	add	sp, #12
 80a200a:	f85d fb04 	ldr.w	pc, [sp], #4

080a200e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh>:
 * 
 * @return STATUS_OK on success, STATUS_??? otherwise.
 */
byte MFRC522::PICC_Select(	Uid *uid,			///< Pointer to Uid struct. Normally output, but can also be used to supply a known UID.
							byte validBits		///< The number of known UID bits supplied in *uid. Normally 0. If set you must also supply uid->size.
						 ) {
 80a200e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//		10 bytes		1			CT		uid0	uid1	uid2
	//						2			CT		uid3	uid4	uid5
	//						3			uid6	uid7	uid8	uid9
	
	// Sanity checks
	if (validBits > 80) {
 80a2012:	2a50      	cmp	r2, #80	; 0x50
 * 
 * @return STATUS_OK on success, STATUS_??? otherwise.
 */
byte MFRC522::PICC_Select(	Uid *uid,			///< Pointer to Uid struct. Normally output, but can also be used to supply a known UID.
							byte validBits		///< The number of known UID bits supplied in *uid. Normally 0. If set you must also supply uid->size.
						 ) {
 80a2014:	b08b      	sub	sp, #44	; 0x2c
 80a2016:	4683      	mov	fp, r0
 80a2018:	468a      	mov	sl, r1
 80a201a:	4617      	mov	r7, r2
	//		10 bytes		1			CT		uid0	uid1	uid2
	//						2			CT		uid3	uid4	uid5
	//						3			uid6	uid7	uid8	uid9
	
	// Sanity checks
	if (validBits > 80) {
 80a201c:	f200 80f6 	bhi.w	80a220c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1fe>
		return STATUS_INVALID;
	}

	// Prepare MFRC522
	PCD_ClearRegisterBitMask(CollReg, 0x80);			// ValuesAfterColl=1 => Bits received after collision are cleared.
 80a2020:	2280      	movs	r2, #128	; 0x80
 80a2022:	211c      	movs	r1, #28
 80a2024:	f7ff fde5 	bl	80a1bf2 <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>
							byte validBits		///< The number of known UID bits supplied in *uid. Normally 0. If set you must also supply uid->size.
						 ) {
	bool uidComplete;
	bool selectDone;
	bool useCascadeTag;
	byte cascadeLevel	= 1; 
 80a2028:	2501      	movs	r5, #1

	// Repeat Cascade Level loop until we have a complete UID.
	uidComplete = false;
	while ( ! uidComplete) {
		// Set the Cascade Level in the SEL byte, find out if we need to use the Cascade Tag in byte 2.
		switch (cascadeLevel) {
 80a202a:	2d02      	cmp	r5, #2
 80a202c:	d010      	beq.n	80a2050 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x42>
 80a202e:	2d03      	cmp	r5, #3
 80a2030:	d01b      	beq.n	80a206a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x5c>
 80a2032:	2d01      	cmp	r5, #1
 80a2034:	f040 80ec 	bne.w	80a2210 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x202>
			case 1:
				buffer[0] = PICC_CMD_SEL_CL1;
 80a2038:	2393      	movs	r3, #147	; 0x93
 80a203a:	f88d 301c 	strb.w	r3, [sp, #28]
				uidIndex = 0;
				useCascadeTag = validBits && uid->size > 4;	// When we know that the UID has more than 4 bytes
 80a203e:	b1d7      	cbz	r7, 80a2076 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x68>
 80a2040:	f89a 3000 	ldrb.w	r3, [sl]
	while ( ! uidComplete) {
		// Set the Cascade Level in the SEL byte, find out if we need to use the Cascade Tag in byte 2.
		switch (cascadeLevel) {
			case 1:
				buffer[0] = PICC_CMD_SEL_CL1;
				uidIndex = 0;
 80a2044:	2600      	movs	r6, #0
				useCascadeTag = validBits && uid->size > 4;	// When we know that the UID has more than 4 bytes
 80a2046:	2b04      	cmp	r3, #4
 80a2048:	bf94      	ite	ls
 80a204a:	2300      	movls	r3, #0
 80a204c:	2301      	movhi	r3, #1
 80a204e:	e016      	b.n	80a207e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x70>
				break;
			
			case 2:
				buffer[0] = PICC_CMD_SEL_CL2;
 80a2050:	f06f 036a 	mvn.w	r3, #106	; 0x6a
 80a2054:	f88d 301c 	strb.w	r3, [sp, #28]
				uidIndex = 3;
				useCascadeTag = validBits && uid->size > 7;	// When we know that the UID has more than 7 bytes
 80a2058:	b17f      	cbz	r7, 80a207a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x6c>
 80a205a:	f89a 3000 	ldrb.w	r3, [sl]
				useCascadeTag = validBits && uid->size > 4;	// When we know that the UID has more than 4 bytes
				break;
			
			case 2:
				buffer[0] = PICC_CMD_SEL_CL2;
				uidIndex = 3;
 80a205e:	2603      	movs	r6, #3
				useCascadeTag = validBits && uid->size > 7;	// When we know that the UID has more than 7 bytes
 80a2060:	2b07      	cmp	r3, #7
 80a2062:	bf94      	ite	ls
 80a2064:	2300      	movls	r3, #0
 80a2066:	2301      	movhi	r3, #1
 80a2068:	e009      	b.n	80a207e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x70>
				break;
			
			case 3:
				buffer[0] = PICC_CMD_SEL_CL3;
 80a206a:	2397      	movs	r3, #151	; 0x97
 80a206c:	f88d 301c 	strb.w	r3, [sp, #28]
				uidIndex = 6;
 80a2070:	2606      	movs	r6, #6
				useCascadeTag = false;						// Never used in CL3.
 80a2072:	2300      	movs	r3, #0
				break;
 80a2074:	e003      	b.n	80a207e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x70>
	while ( ! uidComplete) {
		// Set the Cascade Level in the SEL byte, find out if we need to use the Cascade Tag in byte 2.
		switch (cascadeLevel) {
			case 1:
				buffer[0] = PICC_CMD_SEL_CL1;
				uidIndex = 0;
 80a2076:	463e      	mov	r6, r7
 80a2078:	e000      	b.n	80a207c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x6e>
				useCascadeTag = validBits && uid->size > 4;	// When we know that the UID has more than 4 bytes
				break;
			
			case 2:
				buffer[0] = PICC_CMD_SEL_CL2;
				uidIndex = 3;
 80a207a:	2603      	movs	r6, #3
				useCascadeTag = validBits && uid->size > 7;	// When we know that the UID has more than 7 bytes
 80a207c:	463b      	mov	r3, r7
				return STATUS_INTERNAL_ERROR;
				break;
		}
		
		// How many UID bits are known in this Cascade Level?
		currentLevelKnownBits = validBits - (8 * uidIndex);
 80a207e:	eba7 04c6 	sub.w	r4, r7, r6, lsl #3
 80a2082:	b264      	sxtb	r4, r4
 80a2084:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
		if (currentLevelKnownBits < 0) {
			currentLevelKnownBits = 0;
		}
		// Copy the known bits from uid->uidByte[] to buffer[]
		index = 2; // destination index in buffer[]
		if (useCascadeTag) {
 80a2088:	b12b      	cbz	r3, 80a2096 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x88>
			buffer[index++] = PICC_CMD_CT;
 80a208a:	2288      	movs	r2, #136	; 0x88
 80a208c:	f88d 201e 	strb.w	r2, [sp, #30]
 80a2090:	f04f 0803 	mov.w	r8, #3
 80a2094:	e001      	b.n	80a209a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x8c>
		currentLevelKnownBits = validBits - (8 * uidIndex);
		if (currentLevelKnownBits < 0) {
			currentLevelKnownBits = 0;
		}
		// Copy the known bits from uid->uidByte[] to buffer[]
		index = 2; // destination index in buffer[]
 80a2096:	f04f 0802 	mov.w	r8, #2
		if (useCascadeTag) {
			buffer[index++] = PICC_CMD_CT;
		}
		byte bytesToCopy = currentLevelKnownBits / 8 + (currentLevelKnownBits % 8 ? 1 : 0); // The number of bytes needed to represent the known bits for this level.
 80a209a:	b2e1      	uxtb	r1, r4
 80a209c:	f011 0207 	ands.w	r2, r1, #7
 80a20a0:	bf18      	it	ne
 80a20a2:	2201      	movne	r2, #1
 80a20a4:	eb02 02e4 	add.w	r2, r2, r4, asr #3
		if (bytesToCopy) {
 80a20a8:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 80a20ac:	d106      	bne.n	80a20bc <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xae>
			for (count = 0; count < bytesToCopy; count++) {
				buffer[index++] = uid->uidByte[uidIndex + count];
			}
		}
		// Now that the data has been copied we need to include the 8 bits in CT in currentLevelKnownBits
		if (useCascadeTag) {
 80a20ae:	2b00      	cmp	r3, #0
 80a20b0:	f000 808c 	beq.w	80a21cc <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1be>
			currentLevelKnownBits += 8;
 80a20b4:	f101 0408 	add.w	r4, r1, #8
 80a20b8:	b264      	sxtb	r4, r4
 80a20ba:	e087      	b.n	80a21cc <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1be>
		if (useCascadeTag) {
			buffer[index++] = PICC_CMD_CT;
		}
		byte bytesToCopy = currentLevelKnownBits / 8 + (currentLevelKnownBits % 8 ? 1 : 0); // The number of bytes needed to represent the known bits for this level.
		if (bytesToCopy) {
			byte maxBytes = useCascadeTag ? 3 : 4; // Max 4 bytes in each Cascade Level. Only 3 left if we use the Cascade Tag
 80a20bc:	2b00      	cmp	r3, #0
 80a20be:	bf14      	ite	ne
 80a20c0:	2003      	movne	r0, #3
 80a20c2:	2004      	moveq	r0, #4
 80a20c4:	4282      	cmp	r2, r0
 80a20c6:	bf28      	it	cs
 80a20c8:	4602      	movcs	r2, r0
 80a20ca:	2000      	movs	r0, #0
			if (bytesToCopy > maxBytes) { 
				bytesToCopy = maxBytes;
			}
			for (count = 0; count < bytesToCopy; count++) {
				buffer[index++] = uid->uidByte[uidIndex + count];
 80a20cc:	eb08 0e00 	add.w	lr, r8, r0
 80a20d0:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 80a20d4:	fa5f fe8e 	uxtb.w	lr, lr
 80a20d8:	44e6      	add	lr, ip
 80a20da:	eb06 0c00 	add.w	ip, r6, r0
 80a20de:	44d4      	add	ip, sl
 80a20e0:	f89c c001 	ldrb.w	ip, [ip, #1]
 80a20e4:	3001      	adds	r0, #1
 80a20e6:	f80e cc0c 	strb.w	ip, [lr, #-12]
		if (bytesToCopy) {
			byte maxBytes = useCascadeTag ? 3 : 4; // Max 4 bytes in each Cascade Level. Only 3 left if we use the Cascade Tag
			if (bytesToCopy > maxBytes) { 
				bytesToCopy = maxBytes;
			}
			for (count = 0; count < bytesToCopy; count++) {
 80a20ea:	fa5f fe80 	uxtb.w	lr, r0
 80a20ee:	4596      	cmp	lr, r2
 80a20f0:	d3ec      	bcc.n	80a20cc <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xbe>
 80a20f2:	e7dc      	b.n	80a20ae <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xa0>
				currentLevelKnownBits = collisionPos;
				count			= (currentLevelKnownBits - 1) % 8; // The bit to modify
				index			= 1 + (currentLevelKnownBits / 8) + (count ? 1 : 0); // First byte is index 0.
				buffer[index]	|= (1 << count); 
			}
			else if (result != STATUS_OK) {
 80a20f4:	2801      	cmp	r0, #1
 80a20f6:	f040 808d 	bne.w	80a2214 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x206>
				return result;
			}
			else { // STATUS_OK
				if (currentLevelKnownBits >= 32) { // This was a SELECT.
 80a20fa:	2c1f      	cmp	r4, #31
 80a20fc:	f300 808c 	bgt.w	80a2218 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x20a>
					selectDone = true; // No more anticollision 
					// We continue below outside the while.
				}
				else { // This was an ANTICOLLISION.
					// We now have all 32 bits of the UID in this Cascade Level
					currentLevelKnownBits = 32;
 80a2100:	2420      	movs	r4, #32
		selectDone = false;
		while ( ! selectDone) {
			// Find out how many bits and bytes to send and receive.
			if (currentLevelKnownBits >= 32) { // All UID bits in this Cascade Level are known. This is a SELECT.
				//Serial.print("SELECT: currentLevelKnownBits="); Serial.println(currentLevelKnownBits, DEC);
				buffer[1] = 0x70; // NVB - Number of Valid Bits: Seven whole bytes
 80a2102:	f04f 0370 	mov.w	r3, #112	; 0x70
				// Calulate BCC - Block Check Character
				buffer[6] = buffer[2] ^ buffer[3] ^ buffer[4] ^ buffer[5];
 80a2106:	f89d 201e 	ldrb.w	r2, [sp, #30]
		selectDone = false;
		while ( ! selectDone) {
			// Find out how many bits and bytes to send and receive.
			if (currentLevelKnownBits >= 32) { // All UID bits in this Cascade Level are known. This is a SELECT.
				//Serial.print("SELECT: currentLevelKnownBits="); Serial.println(currentLevelKnownBits, DEC);
				buffer[1] = 0x70; // NVB - Number of Valid Bits: Seven whole bytes
 80a210a:	f88d 301d 	strb.w	r3, [sp, #29]
				// Calulate BCC - Block Check Character
				buffer[6] = buffer[2] ^ buffer[3] ^ buffer[4] ^ buffer[5];
 80a210e:	f89d 301f 	ldrb.w	r3, [sp, #31]
				// Calculate CRC_A
				result = PCD_CalculateCRC(buffer, 7, &buffer[7]);
 80a2112:	a907      	add	r1, sp, #28
			// Find out how many bits and bytes to send and receive.
			if (currentLevelKnownBits >= 32) { // All UID bits in this Cascade Level are known. This is a SELECT.
				//Serial.print("SELECT: currentLevelKnownBits="); Serial.println(currentLevelKnownBits, DEC);
				buffer[1] = 0x70; // NVB - Number of Valid Bits: Seven whole bytes
				// Calulate BCC - Block Check Character
				buffer[6] = buffer[2] ^ buffer[3] ^ buffer[4] ^ buffer[5];
 80a2114:	4053      	eors	r3, r2
 80a2116:	f89d 2020 	ldrb.w	r2, [sp, #32]
				// Calculate CRC_A
				result = PCD_CalculateCRC(buffer, 7, &buffer[7]);
 80a211a:	4658      	mov	r0, fp
			// Find out how many bits and bytes to send and receive.
			if (currentLevelKnownBits >= 32) { // All UID bits in this Cascade Level are known. This is a SELECT.
				//Serial.print("SELECT: currentLevelKnownBits="); Serial.println(currentLevelKnownBits, DEC);
				buffer[1] = 0x70; // NVB - Number of Valid Bits: Seven whole bytes
				// Calulate BCC - Block Check Character
				buffer[6] = buffer[2] ^ buffer[3] ^ buffer[4] ^ buffer[5];
 80a211c:	405a      	eors	r2, r3
 80a211e:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
 80a2122:	4053      	eors	r3, r2
 80a2124:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
				// Calculate CRC_A
				result = PCD_CalculateCRC(buffer, 7, &buffer[7]);
 80a2128:	2207      	movs	r2, #7
 80a212a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80a212e:	f7ff fd6f 	bl	80a1c10 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
				if (result != STATUS_OK) {
 80a2132:	2801      	cmp	r0, #1
 80a2134:	f040 80b7 	bne.w	80a22a6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x298>
					return result;
				}
				txLastBits		= 0; // 0 => All 8 bits are valid.
 80a2138:	f04f 0300 	mov.w	r3, #0
 80a213c:	f88d 301a 	strb.w	r3, [sp, #26]
				bufferUsed		= 9;
				// Store response in the last 3 bytes of buffer (BCC and CRC_A - not needed after tx)
				responseBuffer	= &buffer[6];
				responseLength	= 3;
 80a2140:	2303      	movs	r3, #3
 80a2142:	f88d 301b 	strb.w	r3, [sp, #27]
				result = PCD_CalculateCRC(buffer, 7, &buffer[7]);
				if (result != STATUS_OK) {
					return result;
				}
				txLastBits		= 0; // 0 => All 8 bits are valid.
				bufferUsed		= 9;
 80a2146:	2309      	movs	r3, #9
				// Store response in the last 3 bytes of buffer (BCC and CRC_A - not needed after tx)
				responseBuffer	= &buffer[6];
 80a2148:	f10d 0922 	add.w	r9, sp, #34	; 0x22
				result = PCD_CalculateCRC(buffer, 7, &buffer[7]);
				if (result != STATUS_OK) {
					return result;
				}
				txLastBits		= 0; // 0 => All 8 bits are valid.
				bufferUsed		= 9;
 80a214c:	9304      	str	r3, [sp, #16]
				responseBuffer	= &buffer[index];
				responseLength	= sizeof(buffer) - index;
			}

			// Set bit adjustments
			rxAlign = txLastBits;											// Having a seperate variable is overkill. But it makes the next line easier to read.
 80a214e:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 80a2152:	f818 3d0e 	ldrb.w	r3, [r8, #-14]!
			PCD_WriteRegister(BitFramingReg, (rxAlign << 4) + txLastBits);	// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
 80a2156:	211a      	movs	r1, #26
 80a2158:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 80a215c:	b2d2      	uxtb	r2, r2
 80a215e:	4658      	mov	r0, fp
 80a2160:	9305      	str	r3, [sp, #20]
 80a2162:	f7ff fcee 	bl	80a1b42 <_ZN7MFRC52217PCD_WriteRegisterEhh>

			// Transmit the buffer and receive the response.
			result = PCD_TransceiveData(buffer, bufferUsed, responseBuffer, &responseLength, &txLastBits, rxAlign);			
 80a2166:	2300      	movs	r3, #0
 80a2168:	9303      	str	r3, [sp, #12]
 80a216a:	9b05      	ldr	r3, [sp, #20]
 80a216c:	f8cd 8004 	str.w	r8, [sp, #4]
 80a2170:	9302      	str	r3, [sp, #8]
 80a2172:	f10d 031b 	add.w	r3, sp, #27
 80a2176:	9300      	str	r3, [sp, #0]
 80a2178:	9a04      	ldr	r2, [sp, #16]
 80a217a:	464b      	mov	r3, r9
 80a217c:	a907      	add	r1, sp, #28
 80a217e:	4658      	mov	r0, fp
 80a2180:	f7ff feec 	bl	80a1f5c <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
			if (result == STATUS_COLLISION) { // More than one PICC in the field => collision.
 80a2184:	2803      	cmp	r0, #3
			// Set bit adjustments
			rxAlign = txLastBits;											// Having a seperate variable is overkill. But it makes the next line easier to read.
			PCD_WriteRegister(BitFramingReg, (rxAlign << 4) + txLastBits);	// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]

			// Transmit the buffer and receive the response.
			result = PCD_TransceiveData(buffer, bufferUsed, responseBuffer, &responseLength, &txLastBits, rxAlign);			
 80a2186:	4680      	mov	r8, r0
			if (result == STATUS_COLLISION) { // More than one PICC in the field => collision.
 80a2188:	d1b4      	bne.n	80a20f4 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xe6>
				result = PCD_ReadRegister(CollReg); // CollReg[7..0] bits are: ValuesAfterColl reserved CollPosNotValid CollPos[4:0]
 80a218a:	211c      	movs	r1, #28
 80a218c:	4658      	mov	r0, fp
 80a218e:	f7ff fd0a 	bl	80a1ba6 <_ZN7MFRC52216PCD_ReadRegisterEh>
				if (result & 0x20) { // CollPosNotValid
 80a2192:	0681      	lsls	r1, r0, #26
 80a2194:	d43e      	bmi.n	80a2214 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x206>
					return STATUS_COLLISION; // Without a valid collision position we cannot continue
				}
				byte collisionPos = result & 0x1F; // Values 0-31, 0 means bit 32.
				if (collisionPos == 0) {
					collisionPos = 32;
 80a2196:	f010 001f 	ands.w	r0, r0, #31
 80a219a:	bf08      	it	eq
 80a219c:	2020      	moveq	r0, #32
				}
				if (collisionPos <= currentLevelKnownBits) { // No progress - should not happen 
 80a219e:	42a0      	cmp	r0, r4
 80a21a0:	dd36      	ble.n	80a2210 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x202>
					return STATUS_INTERNAL_ERROR;
				}
				// Choose the PICC with the bit set.
				currentLevelKnownBits = collisionPos;
 80a21a2:	b244      	sxtb	r4, r0
				count			= (currentLevelKnownBits - 1) % 8; // The bit to modify
 80a21a4:	3801      	subs	r0, #1
				index			= 1 + (currentLevelKnownBits / 8) + (count ? 1 : 0); // First byte is index 0.
				buffer[index]	|= (1 << count); 
 80a21a6:	f000 0307 	and.w	r3, r0, #7
 80a21aa:	f010 0007 	ands.w	r0, r0, #7
 80a21ae:	bf18      	it	ne
 80a21b0:	2001      	movne	r0, #1
 80a21b2:	eb00 00e4 	add.w	r0, r0, r4, asr #3
 80a21b6:	aa0a      	add	r2, sp, #40	; 0x28
 80a21b8:	3001      	adds	r0, #1
 80a21ba:	4410      	add	r0, r2
 80a21bc:	2201      	movs	r2, #1
 80a21be:	fa02 f303 	lsl.w	r3, r2, r3
 80a21c2:	f810 2c0c 	ldrb.w	r2, [r0, #-12]
 80a21c6:	4313      	orrs	r3, r2
 80a21c8:	f800 3c0c 	strb.w	r3, [r0, #-12]
		
		// Repeat anti collision loop until we can transmit all UID bits + BCC and receive a SAK - max 32 iterations.
		selectDone = false;
		while ( ! selectDone) {
			// Find out how many bits and bytes to send and receive.
			if (currentLevelKnownBits >= 32) { // All UID bits in this Cascade Level are known. This is a SELECT.
 80a21cc:	2c1f      	cmp	r4, #31
 80a21ce:	dc98      	bgt.n	80a2102 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xf4>
			}
			else { // This is an ANTICOLLISION.
				//Serial.print("ANTICOLLISION: currentLevelKnownBits="); Serial.println(currentLevelKnownBits, DEC);
				txLastBits		= currentLevelKnownBits % 8;
				count			= currentLevelKnownBits / 8;	// Number of whole bytes in the UID part.
				index			= 2 + count;					// Number of whole bytes: SEL + NVB + UIDs
 80a21d0:	10e3      	asrs	r3, r4, #3
 80a21d2:	3302      	adds	r3, #2
 80a21d4:	b2db      	uxtb	r3, r3
				responseBuffer	= &buffer[6];
				responseLength	= 3;
			}
			else { // This is an ANTICOLLISION.
				//Serial.print("ANTICOLLISION: currentLevelKnownBits="); Serial.println(currentLevelKnownBits, DEC);
				txLastBits		= currentLevelKnownBits % 8;
 80a21d6:	f004 0807 	and.w	r8, r4, #7
 80a21da:	fa5f f288 	uxtb.w	r2, r8
				count			= currentLevelKnownBits / 8;	// Number of whole bytes in the UID part.
				index			= 2 + count;					// Number of whole bytes: SEL + NVB + UIDs
				buffer[1]		= (index << 4) + txLastBits;	// NVB - Number of Valid Bits
				bufferUsed		= index + (txLastBits ? 1 : 0);
 80a21de:	f1b8 0f00 	cmp.w	r8, #0
 80a21e2:	bf0c      	ite	eq
 80a21e4:	4698      	moveq	r8, r3
 80a21e6:	f103 0801 	addne.w	r8, r3, #1
				responseBuffer	= &buffer[6];
				responseLength	= 3;
			}
			else { // This is an ANTICOLLISION.
				//Serial.print("ANTICOLLISION: currentLevelKnownBits="); Serial.println(currentLevelKnownBits, DEC);
				txLastBits		= currentLevelKnownBits % 8;
 80a21ea:	f88d 201a 	strb.w	r2, [sp, #26]
				count			= currentLevelKnownBits / 8;	// Number of whole bytes in the UID part.
				index			= 2 + count;					// Number of whole bytes: SEL + NVB + UIDs
				buffer[1]		= (index << 4) + txLastBits;	// NVB - Number of Valid Bits
 80a21ee:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 80a21f2:	f88d 201d 	strb.w	r2, [sp, #29]
				bufferUsed		= index + (txLastBits ? 1 : 0);
 80a21f6:	fa5f f288 	uxtb.w	r2, r8
 80a21fa:	9204      	str	r2, [sp, #16]
				// Store response in the unused part of buffer
				responseBuffer	= &buffer[index];
 80a21fc:	aa07      	add	r2, sp, #28
 80a21fe:	eb02 0903 	add.w	r9, r2, r3
				responseLength	= sizeof(buffer) - index;
 80a2202:	f1c3 0309 	rsb	r3, r3, #9
 80a2206:	f88d 301b 	strb.w	r3, [sp, #27]
 80a220a:	e7a0      	b.n	80a214e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x140>
	//						2			CT		uid3	uid4	uid5
	//						3			uid6	uid7	uid8	uid9
	
	// Sanity checks
	if (validBits > 80) {
		return STATUS_INVALID;
 80a220c:	2007      	movs	r0, #7
 80a220e:	e04a      	b.n	80a22a6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x298>
				byte collisionPos = result & 0x1F; // Values 0-31, 0 means bit 32.
				if (collisionPos == 0) {
					collisionPos = 32;
				}
				if (collisionPos <= currentLevelKnownBits) { // No progress - should not happen 
					return STATUS_INTERNAL_ERROR;
 80a2210:	2006      	movs	r0, #6
 80a2212:	e048      	b.n	80a22a6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x298>
			// Set bit adjustments
			rxAlign = txLastBits;											// Having a seperate variable is overkill. But it makes the next line easier to read.
			PCD_WriteRegister(BitFramingReg, (rxAlign << 4) + txLastBits);	// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]

			// Transmit the buffer and receive the response.
			result = PCD_TransceiveData(buffer, bufferUsed, responseBuffer, &responseLength, &txLastBits, rxAlign);			
 80a2214:	4640      	mov	r0, r8
 80a2216:	e046      	b.n	80a22a6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x298>
		} // End of while ( ! selectDone)

		// We do not check the CBB - it was constructed by us above.
		
		// Copy the found UID bytes from buffer[] to uid->uidByte[]
		index			= (buffer[2] == PICC_CMD_CT) ? 3 : 2; // source index in buffer[]
 80a2218:	f89d 301e 	ldrb.w	r3, [sp, #30]
 80a221c:	2b88      	cmp	r3, #136	; 0x88
 80a221e:	d03f      	beq.n	80a22a0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x292>
 80a2220:	2102      	movs	r1, #2
		bytesToCopy		= (buffer[2] == PICC_CMD_CT) ? 3 : 4;
 80a2222:	2404      	movs	r4, #4
 80a2224:	2300      	movs	r3, #0
		for (count = 0; count < bytesToCopy; count++) {
			uid->uidByte[uidIndex + count] = buffer[index++];
 80a2226:	18ca      	adds	r2, r1, r3
 80a2228:	b2d2      	uxtb	r2, r2
 80a222a:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 80a222e:	4472      	add	r2, lr
 80a2230:	18f0      	adds	r0, r6, r3
 80a2232:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80a2236:	4450      	add	r0, sl
 80a2238:	3301      	adds	r3, #1
 80a223a:	7042      	strb	r2, [r0, #1]
		// We do not check the CBB - it was constructed by us above.
		
		// Copy the found UID bytes from buffer[] to uid->uidByte[]
		index			= (buffer[2] == PICC_CMD_CT) ? 3 : 2; // source index in buffer[]
		bytesToCopy		= (buffer[2] == PICC_CMD_CT) ? 3 : 4;
		for (count = 0; count < bytesToCopy; count++) {
 80a223c:	b2da      	uxtb	r2, r3
 80a223e:	4294      	cmp	r4, r2
 80a2240:	d8f1      	bhi.n	80a2226 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x218>
			uid->uidByte[uidIndex + count] = buffer[index++];
		}
		
		// Check response SAK (Select Acknowledge)
		if (responseLength != 3 || txLastBits != 0) {		// SAK must be exactly 24 bits (1 byte + CRC_A).
 80a2242:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80a2246:	2b03      	cmp	r3, #3
 80a2248:	d126      	bne.n	80a2298 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
 80a224a:	f89d 301a 	ldrb.w	r3, [sp, #26]
 80a224e:	bb1b      	cbnz	r3, 80a2298 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
			return STATUS_ERROR;
		}
		// Verify CRC_A - do our own calculation and store the control in buffer[2..3] - those bytes are not needed anymore.
		result = PCD_CalculateCRC(responseBuffer, 1, &buffer[2]);
 80a2250:	f10d 031e 	add.w	r3, sp, #30
 80a2254:	2201      	movs	r2, #1
 80a2256:	4649      	mov	r1, r9
 80a2258:	4658      	mov	r0, fp
 80a225a:	f7ff fcd9 	bl	80a1c10 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
		if (result != STATUS_OK) {
 80a225e:	2801      	cmp	r0, #1
 80a2260:	d121      	bne.n	80a22a6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x298>
			return result;
		}
		if ((buffer[2] != responseBuffer[1]) || (buffer[3] != responseBuffer[2])) {
 80a2262:	f89d 201e 	ldrb.w	r2, [sp, #30]
 80a2266:	f899 3001 	ldrb.w	r3, [r9, #1]
 80a226a:	429a      	cmp	r2, r3
 80a226c:	d116      	bne.n	80a229c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28e>
 80a226e:	f89d 201f 	ldrb.w	r2, [sp, #31]
 80a2272:	f899 3002 	ldrb.w	r3, [r9, #2]
 80a2276:	429a      	cmp	r2, r3
 80a2278:	d110      	bne.n	80a229c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28e>
			return STATUS_CRC_WRONG;
		}
		if (responseBuffer[0] & 0x04) { // Cascade bit set - UID not complete yes
 80a227a:	f899 3000 	ldrb.w	r3, [r9]
 80a227e:	075a      	lsls	r2, r3, #29
 80a2280:	d502      	bpl.n	80a2288 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x27a>
			cascadeLevel++;
 80a2282:	3501      	adds	r5, #1
 80a2284:	b2ed      	uxtb	r5, r5
 80a2286:	e6d0      	b.n	80a202a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1c>
			uid->sak = responseBuffer[0];
		}
	} // End of while ( ! uidComplete)
	
	// Set correct uid->size
	uid->size = 3 * cascadeLevel + 1;
 80a2288:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80a228c:	3501      	adds	r5, #1
		if (responseBuffer[0] & 0x04) { // Cascade bit set - UID not complete yes
			cascadeLevel++;
		}
		else {
			uidComplete = true;
			uid->sak = responseBuffer[0];
 80a228e:	f88a 300b 	strb.w	r3, [sl, #11]
		}
	} // End of while ( ! uidComplete)
	
	// Set correct uid->size
	uid->size = 3 * cascadeLevel + 1;
 80a2292:	f88a 5000 	strb.w	r5, [sl]

	return STATUS_OK;
 80a2296:	e006      	b.n	80a22a6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x298>
			uid->uidByte[uidIndex + count] = buffer[index++];
		}
		
		// Check response SAK (Select Acknowledge)
		if (responseLength != 3 || txLastBits != 0) {		// SAK must be exactly 24 bits (1 byte + CRC_A).
			return STATUS_ERROR;
 80a2298:	2002      	movs	r0, #2
 80a229a:	e004      	b.n	80a22a6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x298>
		result = PCD_CalculateCRC(responseBuffer, 1, &buffer[2]);
		if (result != STATUS_OK) {
			return result;
		}
		if ((buffer[2] != responseBuffer[1]) || (buffer[3] != responseBuffer[2])) {
			return STATUS_CRC_WRONG;
 80a229c:	2008      	movs	r0, #8
 80a229e:	e002      	b.n	80a22a6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x298>
		} // End of while ( ! selectDone)

		// We do not check the CBB - it was constructed by us above.
		
		// Copy the found UID bytes from buffer[] to uid->uidByte[]
		index			= (buffer[2] == PICC_CMD_CT) ? 3 : 2; // source index in buffer[]
 80a22a0:	2103      	movs	r1, #3
		bytesToCopy		= (buffer[2] == PICC_CMD_CT) ? 3 : 4;
 80a22a2:	460c      	mov	r4, r1
 80a22a4:	e7be      	b.n	80a2224 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x216>
	
	// Set correct uid->size
	uid->size = 3 * cascadeLevel + 1;

	return STATUS_OK;
} // End PICC_Select()
 80a22a6:	b00b      	add	sp, #44	; 0x2c
 80a22a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a22ac <_ZN7MFRC52219PICC_ReadCardSerialEv>:
 * Remember to call PICC_IsNewCardPresent(), PICC_RequestA() or PICC_WakeupA() first.
 * The read UID is available in the class variable uid.
 * 
 * @return bool
 */
bool MFRC522::PICC_ReadCardSerial() {
 80a22ac:	b508      	push	{r3, lr}
	byte result = PICC_Select(&uid);
 80a22ae:	2200      	movs	r2, #0
 80a22b0:	4601      	mov	r1, r0
 80a22b2:	f7ff feac 	bl	80a200e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh>
	return (result == STATUS_OK);
} // End PICC_ReadCardSerial()
 80a22b6:	1e43      	subs	r3, r0, #1
 80a22b8:	4258      	negs	r0, r3
 80a22ba:	4158      	adcs	r0, r3
 80a22bc:	bd08      	pop	{r3, pc}

080a22be <_GLOBAL__sub_I__ZN7MFRC522C2Ehh>:
 80a22be:	f000 bd85 	b.w	80a2dcc <HAL_Pin_Map>
	...

080a22c4 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
 80a22c4:	b538      	push	{r3, r4, r5, lr}
 80a22c6:	4b0b      	ldr	r3, [pc, #44]	; (80a22f4 <_ZN9TCPClientD1Ev+0x30>)
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 80a22c8:	6984      	ldr	r4, [r0, #24]
 80a22ca:	4605      	mov	r5, r0
 80a22cc:	6003      	str	r3, [r0, #0]
 80a22ce:	b17c      	cbz	r4, 80a22f0 <_ZN9TCPClientD1Ev+0x2c>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a22d0:	6863      	ldr	r3, [r4, #4]
 80a22d2:	3b01      	subs	r3, #1
 80a22d4:	6063      	str	r3, [r4, #4]
 80a22d6:	b95b      	cbnz	r3, 80a22f0 <_ZN9TCPClientD1Ev+0x2c>
        {
          _M_dispose();
 80a22d8:	6823      	ldr	r3, [r4, #0]
 80a22da:	4620      	mov	r0, r4
 80a22dc:	689b      	ldr	r3, [r3, #8]
 80a22de:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a22e0:	68a3      	ldr	r3, [r4, #8]
 80a22e2:	3b01      	subs	r3, #1
 80a22e4:	60a3      	str	r3, [r4, #8]
 80a22e6:	b91b      	cbnz	r3, 80a22f0 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
 80a22e8:	6823      	ldr	r3, [r4, #0]
 80a22ea:	4620      	mov	r0, r4
 80a22ec:	68db      	ldr	r3, [r3, #12]
 80a22ee:	4798      	blx	r3
 80a22f0:	4628      	mov	r0, r5
 80a22f2:	bd38      	pop	{r3, r4, r5, pc}
 80a22f4:	080a9a94 	.word	0x080a9a94

080a22f8 <_ZN9TCPClientD0Ev>:
 80a22f8:	b510      	push	{r4, lr}
 80a22fa:	4604      	mov	r4, r0
 80a22fc:	f7ff ffe2 	bl	80a22c4 <_ZN9TCPClientD1Ev>
 80a2300:	4620      	mov	r0, r4
 80a2302:	211c      	movs	r1, #28
 80a2304:	f002 fd4c 	bl	80a4da0 <_ZdlPvj>
 80a2308:	4620      	mov	r0, r4
 80a230a:	bd10      	pop	{r4, pc}

080a230c <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi>:

    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(char* domain, uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
 80a230c:	b538      	push	{r3, r4, r5, lr}
 80a230e:	461d      	mov	r5, r3
    this->callback = callback;
 80a2310:	9b05      	ldr	r3, [sp, #20]

    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(char* domain, uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
 80a2312:	4604      	mov	r4, r0
    this->callback = callback;
 80a2314:	6303      	str	r3, [r0, #48]	; 0x30
    this->qoscallback = NULL;
 80a2316:	2300      	movs	r3, #0
 80a2318:	6343      	str	r3, [r0, #52]	; 0x34
    if (ip != NULL)
 80a231a:	b102      	cbz	r2, 80a231e <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x12>
        this->ip = ip;
 80a231c:	6482      	str	r2, [r0, #72]	; 0x48
    if (domain != NULL)
 80a231e:	b119      	cbz	r1, 80a2328 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x1c>
        this->domain = domain;
 80a2320:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80a2324:	f001 fc43 	bl	80a3bae <_ZN6StringaSEPKc>
    this->port = port;
    this->keepalive = keepalive;
 80a2328:	9b04      	ldr	r3, [sp, #16]

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
    if (buffer != NULL)
 80a232a:	69e0      	ldr	r0, [r4, #28]
    if (ip != NULL)
        this->ip = ip;
    if (domain != NULL)
        this->domain = domain;
    this->port = port;
    this->keepalive = keepalive;
 80a232c:	6523      	str	r3, [r4, #80]	; 0x50

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
 80a232e:	9b06      	ldr	r3, [sp, #24]
    this->qoscallback = NULL;
    if (ip != NULL)
        this->ip = ip;
    if (domain != NULL)
        this->domain = domain;
    this->port = port;
 80a2330:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
    this->keepalive = keepalive;

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
 80a2334:	2bff      	cmp	r3, #255	; 0xff
 80a2336:	bfb8      	it	lt
 80a2338:	23ff      	movlt	r3, #255	; 0xff
 80a233a:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    if (buffer != NULL)
 80a233e:	b108      	cbz	r0, 80a2344 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x38>
      delete[] buffer;
 80a2340:	f7fd feb3 	bl	80a00aa <_ZdaPv>
    buffer = new uint8_t[this->maxpacketsize];
 80a2344:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
 80a2348:	f7fd feab 	bl	80a00a2 <_Znaj>
 80a234c:	61e0      	str	r0, [r4, #28]
 80a234e:	bd38      	pop	{r3, r4, r5, pc}

080a2350 <_ZN4MQTTC1EPctiPFvS0_PhjEi>:

MQTT::MQTT(char* domain, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int)) {
    this->initialize(domain, NULL, port, keepalive, callback, MQTT_MAX_PACKET_SIZE);
}

MQTT::MQTT(char* domain, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
 80a2350:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80a2354:	4604      	mov	r4, r0
 80a2356:	4617      	mov	r7, r2
 80a2358:	4698      	mov	r8, r3
 80a235a:	460e      	mov	r6, r1
 80a235c:	2500      	movs	r5, #0
 80a235e:	f001 fad3 	bl	80a3908 <_ZN9TCPClientC1Ev>
 80a2362:	61e5      	str	r5, [r4, #28]
 80a2364:	490a      	ldr	r1, [pc, #40]	; (80a2390 <_ZN4MQTTC1EPctiPFvS0_PhjEi+0x40>)
 80a2366:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80a236a:	f001 fbce 	bl	80a3b0a <_ZN6StringC1EPK19__FlashStringHelper>
    this->initialize(domain, NULL, port, keepalive, callback, maxpacketsize);
 80a236e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80a2370:	4620      	mov	r0, r4
 80a2372:	9302      	str	r3, [sp, #8]
 80a2374:	9b0a      	ldr	r3, [sp, #40]	; 0x28

MQTT::MQTT(char* domain, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int)) {
    this->initialize(domain, NULL, port, keepalive, callback, MQTT_MAX_PACKET_SIZE);
}

MQTT::MQTT(char* domain, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
 80a2376:	64a5      	str	r5, [r4, #72]	; 0x48
    this->initialize(domain, NULL, port, keepalive, callback, maxpacketsize);
 80a2378:	9301      	str	r3, [sp, #4]
 80a237a:	f8cd 8000 	str.w	r8, [sp]
 80a237e:	463b      	mov	r3, r7
 80a2380:	462a      	mov	r2, r5
 80a2382:	4631      	mov	r1, r6
 80a2384:	f7ff ffc2 	bl	80a230c <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi>
}
 80a2388:	4620      	mov	r0, r4
 80a238a:	b004      	add	sp, #16
 80a238c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a2390:	080a997b 	.word	0x080a997b

080a2394 <_ZN4MQTT8readByteEv>:
        _client.stop();
    }
    return false;
}

uint8_t MQTT::readByte() {
 80a2394:	b510      	push	{r4, lr}
 80a2396:	4604      	mov	r4, r0
    while(!_client.available()) {}
 80a2398:	4620      	mov	r0, r4
 80a239a:	f001 f949 	bl	80a3630 <_ZN9TCPClient9availableEv>
 80a239e:	2800      	cmp	r0, #0
 80a23a0:	d0fa      	beq.n	80a2398 <_ZN4MQTT8readByteEv+0x4>
    return _client.read();
 80a23a2:	4620      	mov	r0, r4
 80a23a4:	f001 f8f9 	bl	80a359a <_ZN9TCPClient4readEv>
}
 80a23a8:	b2c0      	uxtb	r0, r0
 80a23aa:	bd10      	pop	{r4, pc}

080a23ac <_ZN4MQTT10readPacketEPh>:

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
 80a23ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a23b0:	4605      	mov	r5, r0
    uint16_t len = 0;
    buffer[len++] = readByte();
 80a23b2:	69c4      	ldr	r4, [r0, #28]
uint8_t MQTT::readByte() {
    while(!_client.available()) {}
    return _client.read();
}

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
 80a23b4:	468a      	mov	sl, r1
    uint16_t len = 0;
    buffer[len++] = readByte();
 80a23b6:	f7ff ffed 	bl	80a2394 <_ZN4MQTT8readByteEv>
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
    uint32_t multiplier = 1;
 80a23ba:	f04f 0801 	mov.w	r8, #1
    return _client.read();
}

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
    uint16_t len = 0;
    buffer[len++] = readByte();
 80a23be:	4646      	mov	r6, r8
 80a23c0:	7020      	strb	r0, [r4, #0]
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
 80a23c2:	69eb      	ldr	r3, [r5, #28]
    uint32_t multiplier = 1;
    uint16_t length = 0;
 80a23c4:	2700      	movs	r7, #0
 80a23c6:	f893 9000 	ldrb.w	r9, [r3]
 80a23ca:	f009 09f0 	and.w	r9, r9, #240	; 0xf0
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
 80a23ce:	4628      	mov	r0, r5
 80a23d0:	f7ff ffe0 	bl	80a2394 <_ZN4MQTT8readByteEv>
        buffer[len++] = digit;
 80a23d4:	69eb      	ldr	r3, [r5, #28]
 80a23d6:	1c74      	adds	r4, r6, #1
 80a23d8:	5598      	strb	r0, [r3, r6]
        length += (digit & 127) * multiplier;
 80a23da:	f000 037f 	and.w	r3, r0, #127	; 0x7f
 80a23de:	fb03 7708 	mla	r7, r3, r8, r7
        multiplier *= 128;
    } while ((digit & 128) != 0);
 80a23e2:	0603      	lsls	r3, r0, #24
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
        buffer[len++] = digit;
 80a23e4:	b2a4      	uxth	r4, r4
        length += (digit & 127) * multiplier;
 80a23e6:	b2bf      	uxth	r7, r7
        multiplier *= 128;
 80a23e8:	ea4f 18c8 	mov.w	r8, r8, lsl #7
    } while ((digit & 128) != 0);
 80a23ec:	d501      	bpl.n	80a23f2 <_ZN4MQTT10readPacketEPh+0x46>
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
        buffer[len++] = digit;
 80a23ee:	4626      	mov	r6, r4
 80a23f0:	e7ed      	b.n	80a23ce <_ZN4MQTT10readPacketEPh+0x22>
        length += (digit & 127) * multiplier;
        multiplier *= 128;
    } while ((digit & 128) != 0);
    *lengthLength = len-1;
 80a23f2:	1e63      	subs	r3, r4, #1

    if (isPublish) {
 80a23f4:	f1b9 0f30 	cmp.w	r9, #48	; 0x30
        digit = readByte();
        buffer[len++] = digit;
        length += (digit & 127) * multiplier;
        multiplier *= 128;
    } while ((digit & 128) != 0);
    *lengthLength = len-1;
 80a23f8:	f88a 3000 	strb.w	r3, [sl]

    if (isPublish) {
 80a23fc:	d113      	bne.n	80a2426 <_ZN4MQTT10readPacketEPh+0x7a>
        // Read in topic length to calculate bytes to skip over for Stream writing
        buffer[len++] = readByte();
 80a23fe:	4628      	mov	r0, r5
 80a2400:	f8d5 801c 	ldr.w	r8, [r5, #28]
 80a2404:	f7ff ffc6 	bl	80a2394 <_ZN4MQTT8readByteEv>
 80a2408:	f808 0004 	strb.w	r0, [r8, r4]
        buffer[len++] = readByte();
 80a240c:	4628      	mov	r0, r5
 80a240e:	f8d5 801c 	ldr.w	r8, [r5, #28]
 80a2412:	f7ff ffbf 	bl	80a2394 <_ZN4MQTT8readByteEv>
 80a2416:	1cf4      	adds	r4, r6, #3
 80a2418:	3602      	adds	r6, #2
 80a241a:	b2b6      	uxth	r6, r6
 80a241c:	b2a4      	uxth	r4, r4
 80a241e:	f808 0006 	strb.w	r0, [r8, r6]
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
        start = 2;
 80a2422:	2302      	movs	r3, #2
 80a2424:	e000      	b.n	80a2428 <_ZN4MQTT10readPacketEPh+0x7c>
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
    uint32_t multiplier = 1;
    uint16_t length = 0;
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;
 80a2426:	2300      	movs	r3, #0
 80a2428:	1b1b      	subs	r3, r3, r4
 80a242a:	b29e      	uxth	r6, r3
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
 80a242c:	19a3      	adds	r3, r4, r6
 80a242e:	b29b      	uxth	r3, r3
 80a2430:	429f      	cmp	r7, r3
 80a2432:	d90b      	bls.n	80a244c <_ZN4MQTT10readPacketEPh+0xa0>
        digit = readByte();
 80a2434:	4628      	mov	r0, r5
 80a2436:	f7ff ffad 	bl	80a2394 <_ZN4MQTT8readByteEv>
        if (len < this->maxpacketsize) {
 80a243a:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
 80a243e:	42a3      	cmp	r3, r4
            buffer[len] = digit;
 80a2440:	bf84      	itt	hi
 80a2442:	69eb      	ldrhi	r3, [r5, #28]
 80a2444:	5518      	strbhi	r0, [r3, r4]
        }
        len++;
 80a2446:	3401      	adds	r4, #1
 80a2448:	b2a4      	uxth	r4, r4
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
 80a244a:	e7ef      	b.n	80a242c <_ZN4MQTT10readPacketEPh+0x80>
            buffer[len] = digit;
        }
        len++;
    }

    if (len > this->maxpacketsize) {
 80a244c:	f8b5 0054 	ldrh.w	r0, [r5, #84]	; 0x54
        len = 0; // This will cause the packet to be ignored.
    }

    return len;
}
 80a2450:	42a0      	cmp	r0, r4
 80a2452:	bf2c      	ite	cs
 80a2454:	4620      	movcs	r0, r4
 80a2456:	2000      	movcc	r0, #0
 80a2458:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080a245c <_ZN4MQTT5writeEhPht>:
        return _client.write(buffer, length);
    }
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
 80a245c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80a245e:	4607      	mov	r7, r0
 80a2460:	468e      	mov	lr, r1
 80a2462:	461e      	mov	r6, r3
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
 80a2464:	461d      	mov	r5, r3
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
    uint8_t lenBuf[4];
    uint8_t llen = 0;
 80a2466:	2400      	movs	r4, #0
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
    do {
        digit = len % 128;
 80a2468:	f005 037f 	and.w	r3, r5, #127	; 0x7f
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
 80a246c:	a902      	add	r1, sp, #8
    uint16_t rc;
    uint16_t len = length;
    do {
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
 80a246e:	09ed      	lsrs	r5, r5, #7
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
 80a2470:	4421      	add	r1, r4
    uint16_t len = length;
    do {
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
 80a2472:	bf18      	it	ne
 80a2474:	f043 0380 	orrne.w	r3, r3, #128	; 0x80
        }
        lenBuf[pos++] = digit;
        llen++;
 80a2478:	3401      	adds	r4, #1
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
 80a247a:	f801 3c04 	strb.w	r3, [r1, #-4]
        llen++;
 80a247e:	b2e4      	uxtb	r4, r4
    } while(len > 0);
 80a2480:	2d00      	cmp	r5, #0
 80a2482:	d1f1      	bne.n	80a2468 <_ZN4MQTT5writeEhPht+0xc>

    buf[4-llen] = header;
 80a2484:	f1c4 0304 	rsb	r3, r4, #4
 80a2488:	18d1      	adds	r1, r2, r3
 80a248a:	f802 e003 	strb.w	lr, [r2, r3]
    for (int i = 0; i < llen; i++) {
 80a248e:	42a5      	cmp	r5, r4
 80a2490:	da06      	bge.n	80a24a0 <_ZN4MQTT5writeEhPht+0x44>
        buf[5-llen+i] = lenBuf[i];
 80a2492:	a801      	add	r0, sp, #4
 80a2494:	1b2b      	subs	r3, r5, r4
 80a2496:	5c28      	ldrb	r0, [r5, r0]
 80a2498:	4413      	add	r3, r2
 80a249a:	7158      	strb	r0, [r3, #5]
        lenBuf[pos++] = digit;
        llen++;
    } while(len > 0);

    buf[4-llen] = header;
    for (int i = 0; i < llen; i++) {
 80a249c:	3501      	adds	r5, #1
 80a249e:	e7f6      	b.n	80a248e <_ZN4MQTT5writeEhPht+0x32>
        buf[5-llen+i] = lenBuf[i];
    }
    rc = _client.write(buf+(4-llen), length+1+llen);
 80a24a0:	1c72      	adds	r2, r6, #1
 80a24a2:	4422      	add	r2, r4
 80a24a4:	4638      	mov	r0, r7
 80a24a6:	f001 f820 	bl	80a34ea <_ZN9TCPClient5writeEPKhj>
 80a24aa:	4605      	mov	r5, r0
 80a24ac:	f000 fcde 	bl	80a2e6c <HAL_Timer_Get_Milli_Seconds>

    lastOutActivity = millis();
    return (rc == 1+llen+length);
 80a24b0:	3401      	adds	r4, #1
    for (int i = 0; i < llen; i++) {
        buf[5-llen+i] = lenBuf[i];
    }
    rc = _client.write(buf+(4-llen), length+1+llen);

    lastOutActivity = millis();
 80a24b2:	6278      	str	r0, [r7, #36]	; 0x24
    return (rc == 1+llen+length);
 80a24b4:	4434      	add	r4, r6
 80a24b6:	b2a8      	uxth	r0, r5
}
 80a24b8:	1a23      	subs	r3, r4, r0
 80a24ba:	4258      	negs	r0, r3
 80a24bc:	4158      	adcs	r0, r3
 80a24be:	b003      	add	sp, #12
 80a24c0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a24c2 <_ZN4MQTT10disconnectEv>:
        return write(MQTTUNSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
    }
    return false;
}

void MQTT::disconnect() {
 80a24c2:	b510      	push	{r4, lr}
 80a24c4:	4604      	mov	r4, r0
    buffer[0] = MQTTDISCONNECT;
 80a24c6:	69c3      	ldr	r3, [r0, #28]
 80a24c8:	22e0      	movs	r2, #224	; 0xe0
 80a24ca:	701a      	strb	r2, [r3, #0]
    buffer[1] = 0;
 80a24cc:	69c3      	ldr	r3, [r0, #28]
 80a24ce:	2200      	movs	r2, #0
 80a24d0:	705a      	strb	r2, [r3, #1]
    _client.write(buffer,2);
 80a24d2:	69c1      	ldr	r1, [r0, #28]
 80a24d4:	2202      	movs	r2, #2
 80a24d6:	f001 f808 	bl	80a34ea <_ZN9TCPClient5writeEPKhj>
    _client.stop();
 80a24da:	4620      	mov	r0, r4
 80a24dc:	f001 f8e4 	bl	80a36a8 <_ZN9TCPClient4stopEv>
 80a24e0:	f000 fcc4 	bl	80a2e6c <HAL_Timer_Get_Milli_Seconds>
    lastInActivity = lastOutActivity = millis();
 80a24e4:	6260      	str	r0, [r4, #36]	; 0x24
 80a24e6:	62a0      	str	r0, [r4, #40]	; 0x28
 80a24e8:	bd10      	pop	{r4, pc}

080a24ea <_ZN4MQTT11writeStringEPKcPht>:
}

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
 80a24ea:	b5f0      	push	{r4, r5, r6, r7, lr}
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
 80a24ec:	460d      	mov	r5, r1
 80a24ee:	3302      	adds	r3, #2
 80a24f0:	b29b      	uxth	r3, r3
 80a24f2:	1a6c      	subs	r4, r5, r1
    while (*idp && pos < this->maxpacketsize) {
 80a24f4:	f815 6b01 	ldrb.w	r6, [r5], #1
 80a24f8:	b2a4      	uxth	r4, r4
 80a24fa:	b13e      	cbz	r6, 80a250c <_ZN4MQTT11writeStringEPKcPht+0x22>
 80a24fc:	f8b0 7054 	ldrh.w	r7, [r0, #84]	; 0x54
 80a2500:	429f      	cmp	r7, r3
 80a2502:	d903      	bls.n	80a250c <_ZN4MQTT11writeStringEPKcPht+0x22>
        buf[pos++] = *idp++;
 80a2504:	1c5c      	adds	r4, r3, #1
 80a2506:	54d6      	strb	r6, [r2, r3]
 80a2508:	b2a3      	uxth	r3, r4

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
    while (*idp && pos < this->maxpacketsize) {
 80a250a:	e7f2      	b.n	80a24f2 <_ZN4MQTT11writeStringEPKcPht+0x8>
        buf[pos++] = *idp++;
        i++;
    }
    buf[pos-i-2] = (i >> 8);
 80a250c:	1b19      	subs	r1, r3, r4
 80a250e:	440a      	add	r2, r1
 80a2510:	1221      	asrs	r1, r4, #8
 80a2512:	f802 1c02 	strb.w	r1, [r2, #-2]
    buf[pos-i-1] = (i & 0xFF);
 80a2516:	f802 4c01 	strb.w	r4, [r2, #-1]
    return pos;
}
 80a251a:	4618      	mov	r0, r3
 80a251c:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a251e <_ZN4MQTT11isConnectedEv>:


bool MQTT::isConnected() {
 80a251e:	b538      	push	{r3, r4, r5, lr}
 80a2520:	4605      	mov	r5, r0
    bool rc = (int)_client.connected();
 80a2522:	f001 f982 	bl	80a382a <_ZN9TCPClient9connectedEv>
 80a2526:	2800      	cmp	r0, #0
 80a2528:	bf14      	ite	ne
 80a252a:	2401      	movne	r4, #1
 80a252c:	2400      	moveq	r4, #0
    if (!rc) _client.stop();
 80a252e:	d102      	bne.n	80a2536 <_ZN4MQTT11isConnectedEv+0x18>
 80a2530:	4628      	mov	r0, r5
 80a2532:	f001 f8b9 	bl	80a36a8 <_ZN9TCPClient4stopEv>
    return rc;
}
 80a2536:	4620      	mov	r0, r4
 80a2538:	bd38      	pop	{r3, r4, r5, pc}
	...

080a253c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>:

bool MQTT::connect(const char *id, const char *user, const char *pass) {
    return connect(id, user, pass, 0, QOS0, 0, 0, true);
}

bool MQTT::connect(const char *id, const char *user, const char *pass, const char* willTopic, EMQTT_QOS willQos, uint8_t willRetain, const char* willMessage, bool cleanSession, MQTT_VERSION version) {
 80a253c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a2540:	b087      	sub	sp, #28
 80a2542:	4604      	mov	r4, r0
 80a2544:	4689      	mov	r9, r1
 80a2546:	4617      	mov	r7, r2
 80a2548:	461e      	mov	r6, r3
 80a254a:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
    if (!isConnected()) {
 80a254e:	f7ff ffe6 	bl	80a251e <_ZN4MQTT11isConnectedEv>
 80a2552:	4605      	mov	r5, r0
 80a2554:	2800      	cmp	r0, #0
 80a2556:	f040 80bd 	bne.w	80a26d4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x198>
        int result = 0;
        if (ip == NULL)
 80a255a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80a255c:	b939      	cbnz	r1, 80a256e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x32>
            result = _client.connect(this->domain.c_str(), this->port);
 80a255e:	4603      	mov	r3, r0
 80a2560:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
 80a2564:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80a2566:	4620      	mov	r0, r4
 80a2568:	f001 f9f0 	bl	80a394c <_ZN9TCPClient7connectEPKctm>
 80a256c:	e009      	b.n	80a2582 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x46>
        else
            result = _client.connect(this->ip, this->port);
 80a256e:	4668      	mov	r0, sp
 80a2570:	f002 f810 	bl	80a4594 <_ZN9IPAddressC1EPKh>
 80a2574:	462b      	mov	r3, r5
 80a2576:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
 80a257a:	4669      	mov	r1, sp
 80a257c:	4620      	mov	r0, r4
 80a257e:	f001 f8ad 	bl	80a36dc <_ZN9TCPClient7connectE9IPAddresstm>

        if (result) {
 80a2582:	2800      	cmp	r0, #0
 80a2584:	f000 80a2 	beq.w	80a26cc <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x190>
            nextMsgId = 1;
 80a2588:	2301      	movs	r3, #1
 80a258a:	8423      	strh	r3, [r4, #32]
            uint16_t length = 5;

            if (version == MQTT_V311) {
 80a258c:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 80a2590:	2b04      	cmp	r3, #4
 80a2592:	d115      	bne.n	80a25c0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x84>
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
 80a2594:	4b52      	ldr	r3, [pc, #328]	; (80a26e0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1a4>)
 80a2596:	6818      	ldr	r0, [r3, #0]
 80a2598:	889a      	ldrh	r2, [r3, #4]
 80a259a:	9000      	str	r0, [sp, #0]
 80a259c:	f8ad 2004 	strh.w	r2, [sp, #4]
 80a25a0:	799b      	ldrb	r3, [r3, #6]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
 80a25a2:	69e2      	ldr	r2, [r4, #28]
 80a25a4:	9800      	ldr	r0, [sp, #0]
        if (result) {
            nextMsgId = 1;
            uint16_t length = 5;

            if (version == MQTT_V311) {
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
 80a25a6:	f88d 3006 	strb.w	r3, [sp, #6]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
 80a25aa:	f8c2 0005 	str.w	r0, [r2, #5]
 80a25ae:	1d53      	adds	r3, r2, #5
 80a25b0:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 80a25b4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80a25b8:	8099      	strh	r1, [r3, #4]
 80a25ba:	719a      	strb	r2, [r3, #6]
                length+=sizeof(MQTT_HEADER_V311);
 80a25bc:	230c      	movs	r3, #12
 80a25be:	e012      	b.n	80a25e6 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
            } else {
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
 80a25c0:	466a      	mov	r2, sp
 80a25c2:	4b48      	ldr	r3, [pc, #288]	; (80a26e4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1a8>)
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
 80a25c4:	f8d4 c01c 	ldr.w	ip, [r4, #28]
            if (version == MQTT_V311) {
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
                length+=sizeof(MQTT_HEADER_V311);
            } else {
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
 80a25c8:	6818      	ldr	r0, [r3, #0]
 80a25ca:	6859      	ldr	r1, [r3, #4]
 80a25cc:	7a1b      	ldrb	r3, [r3, #8]
 80a25ce:	c203      	stmia	r2!, {r0, r1}
 80a25d0:	7013      	strb	r3, [r2, #0]
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
 80a25d2:	466b      	mov	r3, sp
 80a25d4:	cb03      	ldmia	r3!, {r0, r1}
 80a25d6:	f8cc 0005 	str.w	r0, [ip, #5]
 80a25da:	f8cc 1009 	str.w	r1, [ip, #9]
 80a25de:	7813      	ldrb	r3, [r2, #0]
 80a25e0:	f88c 300d 	strb.w	r3, [ip, #13]
                length+=sizeof(MQTT_HEADER_V31);
 80a25e4:	230e      	movs	r3, #14
            }

            uint8_t v = 0;
            if (willTopic) {
 80a25e6:	f1b8 0f00 	cmp.w	r8, #0
 80a25ea:	d00a      	beq.n	80a2602 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xc6>
                v = 0x06|(willQos<<3)|(willRetain<<5);
 80a25ec:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 80a25f0:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
 80a25f4:	0152      	lsls	r2, r2, #5
 80a25f6:	f042 0206 	orr.w	r2, r2, #6
 80a25fa:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80a25fe:	b2d2      	uxtb	r2, r2
 80a2600:	e000      	b.n	80a2604 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xc8>
            } else {
                v = 0x02;
 80a2602:	2202      	movs	r2, #2
            }

            if (!cleanSession) {
 80a2604:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
 80a2608:	b909      	cbnz	r1, 80a260e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xd2>
              v = v&0xfd;
 80a260a:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
            }

            if(user != NULL) {
 80a260e:	b12f      	cbz	r7, 80a261c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xe0>
                v = v|0x80;

                if(pass != NULL) {
 80a2610:	b916      	cbnz	r6, 80a2618 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xdc>
            if (!cleanSession) {
              v = v&0xfd;
            }

            if(user != NULL) {
                v = v|0x80;
 80a2612:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80a2616:	e001      	b.n	80a261c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xe0>

                if(pass != NULL) {
                    v = v|(0x80>>1);
 80a2618:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
                }
            }

            buffer[length++] = v;
 80a261c:	69e1      	ldr	r1, [r4, #28]

            buffer[length++] = ((this->keepalive) >> 8);
 80a261e:	1c58      	adds	r0, r3, #1
                if(pass != NULL) {
                    v = v|(0x80>>1);
                }
            }

            buffer[length++] = v;
 80a2620:	54ca      	strb	r2, [r1, r3]

            buffer[length++] = ((this->keepalive) >> 8);
 80a2622:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80a2624:	69e1      	ldr	r1, [r4, #28]
 80a2626:	1212      	asrs	r2, r2, #8
 80a2628:	540a      	strb	r2, [r1, r0]
            buffer[length++] = ((this->keepalive) & 0xFF);
 80a262a:	69e1      	ldr	r1, [r4, #28]
 80a262c:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80a262e:	1c9a      	adds	r2, r3, #2
 80a2630:	5488      	strb	r0, [r1, r2]
            length = writeString(id, buffer, length);
 80a2632:	3303      	adds	r3, #3
 80a2634:	69e2      	ldr	r2, [r4, #28]
 80a2636:	4649      	mov	r1, r9
 80a2638:	4620      	mov	r0, r4
 80a263a:	f7ff ff56 	bl	80a24ea <_ZN4MQTT11writeStringEPKcPht>
            if (willTopic) {
 80a263e:	f1b8 0f00 	cmp.w	r8, #0
 80a2642:	d00b      	beq.n	80a265c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x120>
                length = writeString(willTopic, buffer, length);
 80a2644:	4603      	mov	r3, r0
 80a2646:	69e2      	ldr	r2, [r4, #28]
 80a2648:	4641      	mov	r1, r8
 80a264a:	4620      	mov	r0, r4
 80a264c:	f7ff ff4d 	bl	80a24ea <_ZN4MQTT11writeStringEPKcPht>
                length = writeString(willMessage, buffer, length);
 80a2650:	69e2      	ldr	r2, [r4, #28]
 80a2652:	4603      	mov	r3, r0
 80a2654:	9911      	ldr	r1, [sp, #68]	; 0x44
 80a2656:	4620      	mov	r0, r4
 80a2658:	f7ff ff47 	bl	80a24ea <_ZN4MQTT11writeStringEPKcPht>
            }

            if(user != NULL) {
 80a265c:	b167      	cbz	r7, 80a2678 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13c>
                length = writeString(user,buffer,length);
 80a265e:	4603      	mov	r3, r0
 80a2660:	69e2      	ldr	r2, [r4, #28]
 80a2662:	4639      	mov	r1, r7
 80a2664:	4620      	mov	r0, r4
 80a2666:	f7ff ff40 	bl	80a24ea <_ZN4MQTT11writeStringEPKcPht>
                if(pass != NULL) {
 80a266a:	b12e      	cbz	r6, 80a2678 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13c>
                    length = writeString(pass,buffer,length);
 80a266c:	4603      	mov	r3, r0
 80a266e:	69e2      	ldr	r2, [r4, #28]
 80a2670:	4631      	mov	r1, r6
 80a2672:	4620      	mov	r0, r4
 80a2674:	f7ff ff39 	bl	80a24ea <_ZN4MQTT11writeStringEPKcPht>
                }
            }

            write(MQTTCONNECT, buffer, length-5);
 80a2678:	1f43      	subs	r3, r0, #5
 80a267a:	b29b      	uxth	r3, r3
 80a267c:	69e2      	ldr	r2, [r4, #28]
 80a267e:	2110      	movs	r1, #16
 80a2680:	4620      	mov	r0, r4
 80a2682:	f7ff feeb 	bl	80a245c <_ZN4MQTT5writeEhPht>
 80a2686:	f000 fbf1 	bl	80a2e6c <HAL_Timer_Get_Milli_Seconds>
            lastInActivity = lastOutActivity = millis();

            while (!_client.available()) {
                unsigned long t = millis();
                if (t-lastInActivity > this->keepalive*1000UL) {
 80a268a:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
                    length = writeString(pass,buffer,length);
                }
            }

            write(MQTTCONNECT, buffer, length-5);
            lastInActivity = lastOutActivity = millis();
 80a268e:	6260      	str	r0, [r4, #36]	; 0x24
 80a2690:	62a0      	str	r0, [r4, #40]	; 0x28

            while (!_client.available()) {
 80a2692:	4620      	mov	r0, r4
 80a2694:	f000 ffcc 	bl	80a3630 <_ZN9TCPClient9availableEv>
 80a2698:	b940      	cbnz	r0, 80a26ac <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x170>
 80a269a:	f000 fbe7 	bl	80a2e6c <HAL_Timer_Get_Milli_Seconds>
                unsigned long t = millis();
                if (t-lastInActivity > this->keepalive*1000UL) {
 80a269e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80a26a0:	1ac0      	subs	r0, r0, r3
 80a26a2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80a26a4:	4373      	muls	r3, r6
 80a26a6:	4298      	cmp	r0, r3
 80a26a8:	d9f3      	bls.n	80a2692 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x156>
 80a26aa:	e00f      	b.n	80a26cc <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x190>
                    _client.stop();
                    return false;
                }
            }
            uint8_t llen;
            uint16_t len = readPacket(&llen);
 80a26ac:	4669      	mov	r1, sp
 80a26ae:	4620      	mov	r0, r4
 80a26b0:	f7ff fe7c 	bl	80a23ac <_ZN4MQTT10readPacketEPh>

            if (len == 4) {
 80a26b4:	2804      	cmp	r0, #4
 80a26b6:	d109      	bne.n	80a26cc <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x190>
                if (buffer[3] == CONN_ACCEPT) {
 80a26b8:	69e3      	ldr	r3, [r4, #28]
 80a26ba:	78de      	ldrb	r6, [r3, #3]
 80a26bc:	b936      	cbnz	r6, 80a26cc <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x190>
 80a26be:	f000 fbd5 	bl	80a2e6c <HAL_Timer_Get_Milli_Seconds>
                    lastInActivity = millis();
                    pingOutstanding = false;
                    debug_print(" Connect success\n");
                    return true;
 80a26c2:	2501      	movs	r5, #1
            uint8_t llen;
            uint16_t len = readPacket(&llen);

            if (len == 4) {
                if (buffer[3] == CONN_ACCEPT) {
                    lastInActivity = millis();
 80a26c4:	62a0      	str	r0, [r4, #40]	; 0x28
                    pingOutstanding = false;
 80a26c6:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
 80a26ca:	e004      	b.n	80a26d6 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x19a>
                    // check EMQTT_CONNACK_RESPONSE code.
                    debug_print(" Connect fail. code = [%d]\n", buffer[3]);
                }
            }
        }
        _client.stop();
 80a26cc:	4620      	mov	r0, r4
 80a26ce:	f000 ffeb 	bl	80a36a8 <_ZN9TCPClient4stopEv>
 80a26d2:	e000      	b.n	80a26d6 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x19a>
    }
    return false;
 80a26d4:	2500      	movs	r5, #0
}
 80a26d6:	4628      	mov	r0, r5
 80a26d8:	b007      	add	sp, #28
 80a26da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a26de:	bf00      	nop
 80a26e0:	080a9a20 	.word	0x080a9a20
 80a26e4:	080a9a27 	.word	0x080a9a27

080a26e8 <_ZN4MQTT7connectEPKc>:
void MQTT::addQosCallback(void (*qoscallback)(unsigned int)) {
    this->qoscallback = qoscallback;
}


bool MQTT::connect(const char *id) {
 80a26e8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    return connect(id, NULL, NULL, 0, QOS0, 0, 0, true);
 80a26ea:	2304      	movs	r3, #4
 80a26ec:	9305      	str	r3, [sp, #20]
 80a26ee:	2301      	movs	r3, #1
 80a26f0:	9304      	str	r3, [sp, #16]
 80a26f2:	2300      	movs	r3, #0
 80a26f4:	9303      	str	r3, [sp, #12]
 80a26f6:	9302      	str	r3, [sp, #8]
 80a26f8:	9301      	str	r3, [sp, #4]
 80a26fa:	9300      	str	r3, [sp, #0]
 80a26fc:	461a      	mov	r2, r3
 80a26fe:	f7ff ff1d 	bl	80a253c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>
}
 80a2702:	b007      	add	sp, #28
 80a2704:	f85d fb04 	ldr.w	pc, [sp], #4

080a2708 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>:

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
    return publish(topic, payload, plength, retain, qos, false, messageid);
}

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
 80a2708:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a270c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80a270e:	4604      	mov	r4, r0
 80a2710:	468b      	mov	fp, r1
 80a2712:	4691      	mov	r9, r2
 80a2714:	469a      	mov	sl, r3
 80a2716:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
 80a271a:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
 80a271e:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
    if (isConnected()) {
 80a2722:	f7ff fefc 	bl	80a251e <_ZN4MQTT11isConnectedEv>
 80a2726:	2800      	cmp	r0, #0
 80a2728:	d04b      	beq.n	80a27c2 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xba>
        // Leave room in the buffer for header and variable length field
        uint16_t length = 5;
        memset(buffer, 0, this->maxpacketsize);
 80a272a:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54
 80a272e:	2100      	movs	r1, #0
 80a2730:	69e0      	ldr	r0, [r4, #28]
 80a2732:	f003 ff98 	bl	80a6666 <memset>

        length = writeString(topic, buffer, length);
 80a2736:	2305      	movs	r3, #5
 80a2738:	69e2      	ldr	r2, [r4, #28]
 80a273a:	4659      	mov	r1, fp
 80a273c:	4620      	mov	r0, r4
 80a273e:	f7ff fed4 	bl	80a24ea <_ZN4MQTT11writeStringEPKcPht>

        if (qos == QOS2 || qos == QOS1) {
 80a2742:	1e6b      	subs	r3, r5, #1
 80a2744:	2b01      	cmp	r3, #1
 80a2746:	d812      	bhi.n	80a276e <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x66>
            nextMsgId += 1;
 80a2748:	8c23      	ldrh	r3, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
 80a274a:	69e2      	ldr	r2, [r4, #28]
        memset(buffer, 0, this->maxpacketsize);

        length = writeString(topic, buffer, length);

        if (qos == QOS2 || qos == QOS1) {
            nextMsgId += 1;
 80a274c:	3301      	adds	r3, #1
 80a274e:	b29b      	uxth	r3, r3
 80a2750:	8423      	strh	r3, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
 80a2752:	121b      	asrs	r3, r3, #8
 80a2754:	5413      	strb	r3, [r2, r0]
 80a2756:	1c41      	adds	r1, r0, #1
            buffer[length++] = (nextMsgId & 0xFF);
 80a2758:	69e3      	ldr	r3, [r4, #28]
 80a275a:	8c22      	ldrh	r2, [r4, #32]

        length = writeString(topic, buffer, length);

        if (qos == QOS2 || qos == QOS1) {
            nextMsgId += 1;
            buffer[length++] = (nextMsgId >> 8);
 80a275c:	b289      	uxth	r1, r1
            buffer[length++] = (nextMsgId & 0xFF);
 80a275e:	3002      	adds	r0, #2
 80a2760:	b280      	uxth	r0, r0
 80a2762:	545a      	strb	r2, [r3, r1]
            if (messageid != NULL)
 80a2764:	b11e      	cbz	r6, 80a276e <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x66>
                *messageid = nextMsgId++;
 80a2766:	8c23      	ldrh	r3, [r4, #32]
 80a2768:	1c5a      	adds	r2, r3, #1
 80a276a:	8422      	strh	r2, [r4, #32]
 80a276c:	8033      	strh	r3, [r6, #0]

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
    return publish(topic, payload, plength, retain, qos, false, messageid);
}

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
 80a276e:	2200      	movs	r2, #0
            buffer[length++] = (nextMsgId & 0xFF);
            if (messageid != NULL)
                *messageid = nextMsgId++;
        }

        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
 80a2770:	b291      	uxth	r1, r2
 80a2772:	1883      	adds	r3, r0, r2
 80a2774:	458a      	cmp	sl, r1
 80a2776:	b29b      	uxth	r3, r3
 80a2778:	d909      	bls.n	80a278e <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x86>
 80a277a:	f8b4 6054 	ldrh.w	r6, [r4, #84]	; 0x54
 80a277e:	3201      	adds	r2, #1
 80a2780:	429e      	cmp	r6, r3
 80a2782:	d904      	bls.n	80a278e <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x86>
            buffer[length++] = payload[i];
 80a2784:	f819 6001 	ldrb.w	r6, [r9, r1]
 80a2788:	69e1      	ldr	r1, [r4, #28]
 80a278a:	54ce      	strb	r6, [r1, r3]
 80a278c:	e7f0      	b.n	80a2770 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x68>
        }

        uint8_t header = MQTTPUBLISH;
        if (retain) {
            header |= 1;
 80a278e:	f1b8 0f00 	cmp.w	r8, #0
 80a2792:	bf0c      	ite	eq
 80a2794:	2130      	moveq	r1, #48	; 0x30
 80a2796:	2131      	movne	r1, #49	; 0x31
        }

        if (dup) {
 80a2798:	b10f      	cbz	r7, 80a279e <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
            header |= DUP_FLAG_ON_MASK;
 80a279a:	f041 0108 	orr.w	r1, r1, #8
        }

        if (qos == QOS2)
 80a279e:	2d02      	cmp	r5, #2
 80a27a0:	d102      	bne.n	80a27a8 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xa0>
            header |= MQTTQOS2_HEADER_MASK;
 80a27a2:	f041 0104 	orr.w	r1, r1, #4
 80a27a6:	e003      	b.n	80a27b0 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xa8>
        else if (qos == QOS1)
 80a27a8:	2d01      	cmp	r5, #1
            header |= MQTTQOS1_HEADER_MASK;
 80a27aa:	bf08      	it	eq
 80a27ac:	f041 0102 	orreq.w	r1, r1, #2
        else
            header |= MQTTQOS0_HEADER_MASK;

        return write(header, buffer, length-5);
 80a27b0:	4620      	mov	r0, r4
 80a27b2:	3b05      	subs	r3, #5
 80a27b4:	69e2      	ldr	r2, [r4, #28]
 80a27b6:	b29b      	uxth	r3, r3
    }
    return false;
}
 80a27b8:	b001      	add	sp, #4
 80a27ba:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        else if (qos == QOS1)
            header |= MQTTQOS1_HEADER_MASK;
        else
            header |= MQTTQOS0_HEADER_MASK;

        return write(header, buffer, length-5);
 80a27be:	f7ff be4d 	b.w	80a245c <_ZN4MQTT5writeEhPht>
    }
    return false;
}
 80a27c2:	b001      	add	sp, #4
 80a27c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a27c8 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>:

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain) {
    return publish(topic, payload, plength, retain, QOS0, NULL);
}

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
 80a27c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return publish(topic, payload, plength, retain, qos, false, messageid);
 80a27ca:	9c08      	ldr	r4, [sp, #32]
 80a27cc:	9403      	str	r4, [sp, #12]
 80a27ce:	2400      	movs	r4, #0
 80a27d0:	9402      	str	r4, [sp, #8]
 80a27d2:	f89d 401c 	ldrb.w	r4, [sp, #28]
 80a27d6:	9401      	str	r4, [sp, #4]
 80a27d8:	f89d 4018 	ldrb.w	r4, [sp, #24]
 80a27dc:	9400      	str	r4, [sp, #0]
 80a27de:	f7ff ff93 	bl	80a2708 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>
}
 80a27e2:	b004      	add	sp, #16
 80a27e4:	bd10      	pop	{r4, pc}

080a27e6 <_ZN4MQTT7publishEPKcS1_>:
        return true;
    }
    return false;
}

bool MQTT::publish(const char* topic, const char* payload) {
 80a27e6:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80a27e8:	4605      	mov	r5, r0
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
 80a27ea:	4610      	mov	r0, r2
        return true;
    }
    return false;
}

bool MQTT::publish(const char* topic, const char* payload) {
 80a27ec:	460e      	mov	r6, r1
 80a27ee:	4614      	mov	r4, r2
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
 80a27f0:	f004 fc90 	bl	80a7114 <strlen>
 80a27f4:	2300      	movs	r3, #0
 80a27f6:	9302      	str	r3, [sp, #8]
 80a27f8:	9301      	str	r3, [sp, #4]
 80a27fa:	9300      	str	r3, [sp, #0]
 80a27fc:	4622      	mov	r2, r4
 80a27fe:	4603      	mov	r3, r0
 80a2800:	4631      	mov	r1, r6
 80a2802:	4628      	mov	r0, r5
 80a2804:	f7ff ffe0 	bl	80a27c8 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>
}
 80a2808:	b004      	add	sp, #16
 80a280a:	bd70      	pop	{r4, r5, r6, pc}

080a280c <_ZN4MQTT14publishReleaseEt>:
        return write(header, buffer, length-5);
    }
    return false;
}

bool MQTT::publishRelease(uint16_t messageid) {
 80a280c:	b538      	push	{r3, r4, r5, lr}
 80a280e:	4604      	mov	r4, r0
 80a2810:	460d      	mov	r5, r1
    if (isConnected()) {
 80a2812:	f7ff fe84 	bl	80a251e <_ZN4MQTT11isConnectedEv>
 80a2816:	b190      	cbz	r0, 80a283e <_ZN4MQTT14publishReleaseEt+0x32>
        uint16_t length = 0;
        // reserved bits in MQTT v3.1.1
        buffer[length++] = MQTTPUBREL | MQTTQOS1_HEADER_MASK;
 80a2818:	69e3      	ldr	r3, [r4, #28]
 80a281a:	2262      	movs	r2, #98	; 0x62
 80a281c:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
 80a281e:	69e3      	ldr	r3, [r4, #28]
 80a2820:	2202      	movs	r2, #2
 80a2822:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
 80a2824:	69e3      	ldr	r3, [r4, #28]
 80a2826:	122a      	asrs	r2, r5, #8
 80a2828:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
 80a282a:	69e3      	ldr	r3, [r4, #28]
        return _client.write(buffer, length);
 80a282c:	2204      	movs	r2, #4
        uint16_t length = 0;
        // reserved bits in MQTT v3.1.1
        buffer[length++] = MQTTPUBREL | MQTTQOS1_HEADER_MASK;
        buffer[length++] = 2;
        buffer[length++] = (messageid >> 8);
        buffer[length++] = (messageid & 0xFF);
 80a282e:	70dd      	strb	r5, [r3, #3]
        return _client.write(buffer, length);
 80a2830:	69e1      	ldr	r1, [r4, #28]
 80a2832:	4620      	mov	r0, r4
 80a2834:	f000 fe59 	bl	80a34ea <_ZN9TCPClient5writeEPKhj>
 80a2838:	3000      	adds	r0, #0
 80a283a:	bf18      	it	ne
 80a283c:	2001      	movne	r0, #1
    }
    return false;
}
 80a283e:	bd38      	pop	{r3, r4, r5, pc}

080a2840 <_ZN4MQTT15publishCompleteEt>:

bool MQTT::publishComplete(uint16_t messageid) {
 80a2840:	b538      	push	{r3, r4, r5, lr}
 80a2842:	4604      	mov	r4, r0
 80a2844:	460d      	mov	r5, r1
    if (isConnected()) {
 80a2846:	f7ff fe6a 	bl	80a251e <_ZN4MQTT11isConnectedEv>
 80a284a:	b190      	cbz	r0, 80a2872 <_ZN4MQTT15publishCompleteEt+0x32>
        uint16_t length = 0;
        // reserved bits in MQTT v3.1.1
        buffer[length++] = MQTTPUBCOMP | MQTTQOS1_HEADER_MASK;
 80a284c:	69e3      	ldr	r3, [r4, #28]
 80a284e:	2272      	movs	r2, #114	; 0x72
 80a2850:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
 80a2852:	69e3      	ldr	r3, [r4, #28]
 80a2854:	2202      	movs	r2, #2
 80a2856:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
 80a2858:	69e3      	ldr	r3, [r4, #28]
 80a285a:	122a      	asrs	r2, r5, #8
 80a285c:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
 80a285e:	69e3      	ldr	r3, [r4, #28]
        return _client.write(buffer, length);
 80a2860:	2204      	movs	r2, #4
        uint16_t length = 0;
        // reserved bits in MQTT v3.1.1
        buffer[length++] = MQTTPUBCOMP | MQTTQOS1_HEADER_MASK;
        buffer[length++] = 2;
        buffer[length++] = (messageid >> 8);
        buffer[length++] = (messageid & 0xFF);
 80a2862:	70dd      	strb	r5, [r3, #3]
        return _client.write(buffer, length);
 80a2864:	69e1      	ldr	r1, [r4, #28]
 80a2866:	4620      	mov	r0, r4
 80a2868:	f000 fe3f 	bl	80a34ea <_ZN9TCPClient5writeEPKhj>
 80a286c:	3000      	adds	r0, #0
 80a286e:	bf18      	it	ne
 80a2870:	2001      	movne	r0, #1
    }
    return false;
}
 80a2872:	bd38      	pop	{r3, r4, r5, pc}

080a2874 <_ZN4MQTT4loopEv>:
    }

    return len;
}

bool MQTT::loop() {
 80a2874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a2878:	b083      	sub	sp, #12
 80a287a:	af00      	add	r7, sp, #0
 80a287c:	4604      	mov	r4, r0
    if (isConnected()) {
 80a287e:	f7ff fe4e 	bl	80a251e <_ZN4MQTT11isConnectedEv>
 80a2882:	4681      	mov	r9, r0
 80a2884:	2800      	cmp	r0, #0
 80a2886:	f000 80f6 	beq.w	80a2a76 <_ZN4MQTT4loopEv+0x202>
 80a288a:	f000 faef 	bl	80a2e6c <HAL_Timer_Get_Milli_Seconds>
        unsigned long t = millis();
        if ((t - lastInActivity > this->keepalive*1000UL) || (t - lastOutActivity > this->keepalive*1000UL)) {
 80a288e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80a2890:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a2894:	4353      	muls	r3, r2
 80a2896:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80a2898:	4605      	mov	r5, r0
 80a289a:	1a82      	subs	r2, r0, r2
 80a289c:	429a      	cmp	r2, r3
 80a289e:	d803      	bhi.n	80a28a8 <_ZN4MQTT4loopEv+0x34>
 80a28a0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80a28a2:	1a82      	subs	r2, r0, r2
 80a28a4:	4293      	cmp	r3, r2
 80a28a6:	d217      	bcs.n	80a28d8 <_ZN4MQTT4loopEv+0x64>
            if (pingOutstanding) {
 80a28a8:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80a28ac:	b12b      	cbz	r3, 80a28ba <_ZN4MQTT4loopEv+0x46>
                _client.stop();
 80a28ae:	4620      	mov	r0, r4
 80a28b0:	f000 fefa 	bl	80a36a8 <_ZN9TCPClient4stopEv>
                return false;
 80a28b4:	f04f 0900 	mov.w	r9, #0
 80a28b8:	e0dd      	b.n	80a2a76 <_ZN4MQTT4loopEv+0x202>
            } else {
                buffer[0] = MQTTPINGREQ;
 80a28ba:	69e2      	ldr	r2, [r4, #28]
 80a28bc:	21c0      	movs	r1, #192	; 0xc0
 80a28be:	7011      	strb	r1, [r2, #0]
                buffer[1] = 0;
 80a28c0:	69e2      	ldr	r2, [r4, #28]
                _client.write(buffer,2);
 80a28c2:	4620      	mov	r0, r4
            if (pingOutstanding) {
                _client.stop();
                return false;
            } else {
                buffer[0] = MQTTPINGREQ;
                buffer[1] = 0;
 80a28c4:	7053      	strb	r3, [r2, #1]
                _client.write(buffer,2);
 80a28c6:	69e1      	ldr	r1, [r4, #28]
 80a28c8:	2202      	movs	r2, #2
 80a28ca:	f000 fe0e 	bl	80a34ea <_ZN9TCPClient5writeEPKhj>
                lastOutActivity = t;
                lastInActivity = t;
                pingOutstanding = true;
 80a28ce:	2301      	movs	r3, #1
                return false;
            } else {
                buffer[0] = MQTTPINGREQ;
                buffer[1] = 0;
                _client.write(buffer,2);
                lastOutActivity = t;
 80a28d0:	6265      	str	r5, [r4, #36]	; 0x24
                lastInActivity = t;
 80a28d2:	62a5      	str	r5, [r4, #40]	; 0x28
                pingOutstanding = true;
 80a28d4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
            }
        }
        if (_client.available()) {
 80a28d8:	4620      	mov	r0, r4
 80a28da:	f000 fea9 	bl	80a3630 <_ZN9TCPClient9availableEv>
 80a28de:	2800      	cmp	r0, #0
 80a28e0:	f000 80c9 	beq.w	80a2a76 <_ZN4MQTT4loopEv+0x202>
            uint8_t llen;
            uint16_t len = readPacket(&llen);
 80a28e4:	1df9      	adds	r1, r7, #7
 80a28e6:	4620      	mov	r0, r4
 80a28e8:	f7ff fd60 	bl	80a23ac <_ZN4MQTT10readPacketEPh>
            uint16_t msgId = 0;
            uint8_t *payload;
            if (len > 0) {
 80a28ec:	4602      	mov	r2, r0
 80a28ee:	2800      	cmp	r0, #0
 80a28f0:	f000 80c1 	beq.w	80a2a76 <_ZN4MQTT4loopEv+0x202>
                lastInActivity = t;
                uint8_t type = buffer[0]&0xF0;
 80a28f4:	69e3      	ldr	r3, [r4, #28]
            uint8_t llen;
            uint16_t len = readPacket(&llen);
            uint16_t msgId = 0;
            uint8_t *payload;
            if (len > 0) {
                lastInActivity = t;
 80a28f6:	62a5      	str	r5, [r4, #40]	; 0x28
                uint8_t type = buffer[0]&0xF0;
 80a28f8:	7818      	ldrb	r0, [r3, #0]
 80a28fa:	f000 01f0 	and.w	r1, r0, #240	; 0xf0
                if (type == MQTTPUBLISH) {
 80a28fe:	2930      	cmp	r1, #48	; 0x30
 80a2900:	d17d      	bne.n	80a29fe <_ZN4MQTT4loopEv+0x18a>
                    if (callback) {
 80a2902:	f8d4 b030 	ldr.w	fp, [r4, #48]	; 0x30
 80a2906:	f1bb 0f00 	cmp.w	fp, #0
 80a290a:	f000 80b4 	beq.w	80a2a76 <_ZN4MQTT4loopEv+0x202>
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
 80a290e:	f897 c007 	ldrb.w	ip, [r7, #7]
              							_client.write(buffer, 4);
              							lastOutActivity = t;
            						} else {
                            payload = buffer+llen+3+tl;
                            callback(topic,payload,len-llen-3-tl);
                        }
 80a2912:	46ea      	mov	sl, sp
            if (len > 0) {
                lastInActivity = t;
                uint8_t type = buffer[0]&0xF0;
                if (type == MQTTPUBLISH) {
                    if (callback) {
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
 80a2914:	eb03 000c 	add.w	r0, r3, ip
 80a2918:	7881      	ldrb	r1, [r0, #2]
 80a291a:	f890 e001 	ldrb.w	lr, [r0, #1]
 80a291e:	eb01 2e0e 	add.w	lr, r1, lr, lsl #8
 80a2922:	fa1f fe8e 	uxth.w	lr, lr
                        char topic[tl+1];
 80a2926:	f10e 0108 	add.w	r1, lr, #8
 80a292a:	f021 0107 	bic.w	r1, r1, #7
 80a292e:	ebad 0d01 	sub.w	sp, sp, r1
 80a2932:	4668      	mov	r0, sp
 80a2934:	2100      	movs	r1, #0
                        for (uint16_t i=0;i<tl;i++) {
 80a2936:	b28e      	uxth	r6, r1
 80a2938:	45b6      	cmp	lr, r6
 80a293a:	d906      	bls.n	80a294a <_ZN4MQTT4loopEv+0xd6>
                            topic[i] = buffer[llen+3+i];
 80a293c:	eb0c 0601 	add.w	r6, ip, r1
 80a2940:	441e      	add	r6, r3
 80a2942:	78f6      	ldrb	r6, [r6, #3]
 80a2944:	5446      	strb	r6, [r0, r1]
 80a2946:	3101      	adds	r1, #1
                uint8_t type = buffer[0]&0xF0;
                if (type == MQTTPUBLISH) {
                    if (callback) {
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
                        char topic[tl+1];
                        for (uint16_t i=0;i<tl;i++) {
 80a2948:	e7f5      	b.n	80a2936 <_ZN4MQTT4loopEv+0xc2>
                            topic[i] = buffer[llen+3+i];
                        }
                        topic[tl] = 0;
 80a294a:	2100      	movs	r1, #0
 80a294c:	f800 100e 	strb.w	r1, [r0, lr]
 80a2950:	781e      	ldrb	r6, [r3, #0]
 80a2952:	f10c 0103 	add.w	r1, ip, #3
 80a2956:	f006 0606 	and.w	r6, r6, #6
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
 80a295a:	2e02      	cmp	r6, #2
 80a295c:	ebcc 0202 	rsb	r2, ip, r2
 80a2960:	d11e      	bne.n	80a29a0 <_ZN4MQTT4loopEv+0x12c>
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
 80a2962:	4471      	add	r1, lr
 80a2964:	f813 8001 	ldrb.w	r8, [r3, r1]
 80a2968:	4419      	add	r1, r3
 80a296a:	7849      	ldrb	r1, [r1, #1]
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);
 80a296c:	ebce 0202 	rsb	r2, lr, r2
                            topic[i] = buffer[llen+3+i];
                        }
                        topic[tl] = 0;
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
 80a2970:	eb01 2808 	add.w	r8, r1, r8, lsl #8
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);
 80a2974:	f10c 0105 	add.w	r1, ip, #5
 80a2978:	4471      	add	r1, lr
 80a297a:	3a05      	subs	r2, #5
 80a297c:	4419      	add	r1, r3
 80a297e:	47d8      	blx	fp

                            buffer[0] = MQTTPUBACK; // respond with PUBACK
 80a2980:	69e3      	ldr	r3, [r4, #28]
 80a2982:	2240      	movs	r2, #64	; 0x40
 80a2984:	701a      	strb	r2, [r3, #0]
                            buffer[1] = 2;
 80a2986:	69e3      	ldr	r3, [r4, #28]
                            topic[i] = buffer[llen+3+i];
                        }
                        topic[tl] = 0;
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
 80a2988:	fa1f f888 	uxth.w	r8, r8
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);

                            buffer[0] = MQTTPUBACK; // respond with PUBACK
                            buffer[1] = 2;
 80a298c:	705e      	strb	r6, [r3, #1]
                            buffer[2] = (msgId >> 8);
 80a298e:	69e3      	ldr	r3, [r4, #28]
 80a2990:	ea4f 2228 	mov.w	r2, r8, asr #8
 80a2994:	709a      	strb	r2, [r3, #2]
                            buffer[3] = (msgId & 0xFF);
 80a2996:	69e3      	ldr	r3, [r4, #28]
                            _client.write(buffer,4);
 80a2998:	2204      	movs	r2, #4
                            callback(topic,payload,len-llen-3-tl-2);

                            buffer[0] = MQTTPUBACK; // respond with PUBACK
                            buffer[1] = 2;
                            buffer[2] = (msgId >> 8);
                            buffer[3] = (msgId & 0xFF);
 80a299a:	f883 8003 	strb.w	r8, [r3, #3]
 80a299e:	e020      	b.n	80a29e2 <_ZN4MQTT4loopEv+0x16e>
                            _client.write(buffer,4);
                            lastOutActivity = t;
        						    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
 80a29a0:	2e04      	cmp	r6, #4
 80a29a2:	d124      	bne.n	80a29ee <_ZN4MQTT4loopEv+0x17a>
							              msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
 80a29a4:	4471      	add	r1, lr
 80a29a6:	f813 8001 	ldrb.w	r8, [r3, r1]
 80a29aa:	4419      	add	r1, r3
 80a29ac:	7849      	ldrb	r1, [r1, #1]
							              payload = buffer + llen + 3 + tl + 2;
							              callback(topic, payload, len - llen - 3 - tl - 2);
 80a29ae:	ebce 0202 	rsb	r2, lr, r2
                            buffer[2] = (msgId >> 8);
                            buffer[3] = (msgId & 0xFF);
                            _client.write(buffer,4);
                            lastOutActivity = t;
        						    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
							              msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
 80a29b2:	eb01 2808 	add.w	r8, r1, r8, lsl #8
							              payload = buffer + llen + 3 + tl + 2;
							              callback(topic, payload, len - llen - 3 - tl - 2);
 80a29b6:	f10c 0105 	add.w	r1, ip, #5
 80a29ba:	4471      	add	r1, lr
 80a29bc:	3a05      	subs	r2, #5
 80a29be:	4419      	add	r1, r3
 80a29c0:	47d8      	blx	fp

              							buffer[0] = MQTTPUBREC; // respond with PUBREC
 80a29c2:	69e3      	ldr	r3, [r4, #28]
 80a29c4:	2250      	movs	r2, #80	; 0x50
 80a29c6:	701a      	strb	r2, [r3, #0]
              							buffer[1] = 2;
 80a29c8:	69e3      	ldr	r3, [r4, #28]
 80a29ca:	2202      	movs	r2, #2
 80a29cc:	705a      	strb	r2, [r3, #1]
              							buffer[2] = (msgId >> 8);
 80a29ce:	69e3      	ldr	r3, [r4, #28]
                            buffer[2] = (msgId >> 8);
                            buffer[3] = (msgId & 0xFF);
                            _client.write(buffer,4);
                            lastOutActivity = t;
        						    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
							              msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
 80a29d0:	fa1f f888 	uxth.w	r8, r8
							              payload = buffer + llen + 3 + tl + 2;
							              callback(topic, payload, len - llen - 3 - tl - 2);

              							buffer[0] = MQTTPUBREC; // respond with PUBREC
              							buffer[1] = 2;
              							buffer[2] = (msgId >> 8);
 80a29d4:	ea4f 2228 	mov.w	r2, r8, asr #8
 80a29d8:	709a      	strb	r2, [r3, #2]
              							buffer[3] = (msgId & 0xFF);
              							_client.write(buffer, 4);
 80a29da:	4632      	mov	r2, r6
							              callback(topic, payload, len - llen - 3 - tl - 2);

              							buffer[0] = MQTTPUBREC; // respond with PUBREC
              							buffer[1] = 2;
              							buffer[2] = (msgId >> 8);
              							buffer[3] = (msgId & 0xFF);
 80a29dc:	69e3      	ldr	r3, [r4, #28]
 80a29de:	f883 8003 	strb.w	r8, [r3, #3]
              							_client.write(buffer, 4);
 80a29e2:	69e1      	ldr	r1, [r4, #28]
 80a29e4:	4620      	mov	r0, r4
 80a29e6:	f000 fd80 	bl	80a34ea <_ZN9TCPClient5writeEPKhj>
              							lastOutActivity = t;
 80a29ea:	6265      	str	r5, [r4, #36]	; 0x24
 80a29ec:	e005      	b.n	80a29fa <_ZN4MQTT4loopEv+0x186>
            						} else {
                            payload = buffer+llen+3+tl;
                            callback(topic,payload,len-llen-3-tl);
 80a29ee:	3a03      	subs	r2, #3
 80a29f0:	4471      	add	r1, lr
 80a29f2:	ebce 0202 	rsb	r2, lr, r2
 80a29f6:	4419      	add	r1, r3
 80a29f8:	47d8      	blx	fp
 80a29fa:	46d5      	mov	sp, sl
 80a29fc:	e03b      	b.n	80a2a76 <_ZN4MQTT4loopEv+0x202>
                        }
                    }
                } else if (type == MQTTPUBREC) {
 80a29fe:	2950      	cmp	r1, #80	; 0x50
 80a2a00:	d108      	bne.n	80a2a14 <_ZN4MQTT4loopEv+0x1a0>
                    // check for the situation that QoS2 receive PUBREC, should return PUBREL
                    msgId = (buffer[2] << 8) + buffer[3];
                    this->publishRelease(msgId);
 80a2a02:	7899      	ldrb	r1, [r3, #2]
 80a2a04:	78db      	ldrb	r3, [r3, #3]
 80a2a06:	4620      	mov	r0, r4
 80a2a08:	eb03 2101 	add.w	r1, r3, r1, lsl #8
 80a2a0c:	b289      	uxth	r1, r1
 80a2a0e:	f7ff fefd 	bl	80a280c <_ZN4MQTT14publishReleaseEt>
 80a2a12:	e030      	b.n	80a2a76 <_ZN4MQTT4loopEv+0x202>
                } else if (type == MQTTPUBACK) {
 80a2a14:	2940      	cmp	r1, #64	; 0x40
 80a2a16:	d00c      	beq.n	80a2a32 <_ZN4MQTT4loopEv+0x1be>
                        if (len == 4 && (buffer[0]&0x06) == MQTTQOS0_HEADER_MASK) {
                            msgId = (buffer[2]<<8)+buffer[3];
                            this->qoscallback(msgId);
                        }
                    }
                } else if (type == MQTTPUBREL) {
 80a2a18:	2960      	cmp	r1, #96	; 0x60
 80a2a1a:	d108      	bne.n	80a2a2e <_ZN4MQTT4loopEv+0x1ba>
                  msgId = (buffer[2] << 8) + buffer[3];
                  this->publishComplete(msgId);
 80a2a1c:	7899      	ldrb	r1, [r3, #2]
 80a2a1e:	78db      	ldrb	r3, [r3, #3]
 80a2a20:	4620      	mov	r0, r4
 80a2a22:	eb03 2101 	add.w	r1, r3, r1, lsl #8
 80a2a26:	b289      	uxth	r1, r1
 80a2a28:	f7ff ff0a 	bl	80a2840 <_ZN4MQTT15publishCompleteEt>
 80a2a2c:	e023      	b.n	80a2a76 <_ZN4MQTT4loopEv+0x202>
                } else if (type == MQTTPUBCOMP) {
 80a2a2e:	2970      	cmp	r1, #112	; 0x70
 80a2a30:	d10d      	bne.n	80a2a4e <_ZN4MQTT4loopEv+0x1da>
                  if (qoscallback) {
 80a2a32:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80a2a34:	b1f9      	cbz	r1, 80a2a76 <_ZN4MQTT4loopEv+0x202>
                      // msgId only present for QOS==0
                      if (len == 4 && (buffer[0]&0x06) == MQTTQOS0_HEADER_MASK) {
 80a2a36:	2a04      	cmp	r2, #4
 80a2a38:	d11d      	bne.n	80a2a76 <_ZN4MQTT4loopEv+0x202>
 80a2a3a:	f010 0f06 	tst.w	r0, #6
 80a2a3e:	d11a      	bne.n	80a2a76 <_ZN4MQTT4loopEv+0x202>
                          msgId = (buffer[2]<<8)+buffer[3];
                          this->qoscallback(msgId);
 80a2a40:	7898      	ldrb	r0, [r3, #2]
 80a2a42:	78db      	ldrb	r3, [r3, #3]
 80a2a44:	eb03 2000 	add.w	r0, r3, r0, lsl #8
 80a2a48:	b280      	uxth	r0, r0
 80a2a4a:	4788      	blx	r1
 80a2a4c:	e013      	b.n	80a2a76 <_ZN4MQTT4loopEv+0x202>
                      }
                  }
                } else if (type == MQTTSUBACK) {
 80a2a4e:	2990      	cmp	r1, #144	; 0x90
 80a2a50:	d011      	beq.n	80a2a76 <_ZN4MQTT4loopEv+0x202>
                    // if something...
                } else if (type == MQTTPINGREQ) {
 80a2a52:	29c0      	cmp	r1, #192	; 0xc0
 80a2a54:	d10a      	bne.n	80a2a6c <_ZN4MQTT4loopEv+0x1f8>
                    buffer[0] = MQTTPINGRESP;
 80a2a56:	22d0      	movs	r2, #208	; 0xd0
 80a2a58:	701a      	strb	r2, [r3, #0]
                    buffer[1] = 0;
 80a2a5a:	69e3      	ldr	r3, [r4, #28]
 80a2a5c:	2200      	movs	r2, #0
 80a2a5e:	705a      	strb	r2, [r3, #1]
                    _client.write(buffer,2);
 80a2a60:	69e1      	ldr	r1, [r4, #28]
 80a2a62:	2202      	movs	r2, #2
 80a2a64:	4620      	mov	r0, r4
 80a2a66:	f000 fd40 	bl	80a34ea <_ZN9TCPClient5writeEPKhj>
 80a2a6a:	e004      	b.n	80a2a76 <_ZN4MQTT4loopEv+0x202>
                } else if (type == MQTTPINGRESP) {
 80a2a6c:	29d0      	cmp	r1, #208	; 0xd0
                    pingOutstanding = false;
 80a2a6e:	bf04      	itt	eq
 80a2a70:	2300      	moveq	r3, #0
 80a2a72:	f884 302c 	strbeq.w	r3, [r4, #44]	; 0x2c
            }
        }
        return true;
    }
    return false;
}
 80a2a76:	4648      	mov	r0, r9
 80a2a78:	370c      	adds	r7, #12
 80a2a7a:	46bd      	mov	sp, r7
 80a2a7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a2a80 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>:

bool MQTT::subscribe(const char* topic) {
    return subscribe(topic, QOS0);
}

bool MQTT::subscribe(const char* topic, EMQTT_QOS qos) {
 80a2a80:	b570      	push	{r4, r5, r6, lr}
 80a2a82:	4604      	mov	r4, r0
 80a2a84:	460e      	mov	r6, r1
 80a2a86:	4615      	mov	r5, r2

    if (isConnected()) {
 80a2a88:	f7ff fd49 	bl	80a251e <_ZN4MQTT11isConnectedEv>
 80a2a8c:	b1e8      	cbz	r0, 80a2aca <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x4a>
        // Leave room in the buffer for header and variable length field
        uint16_t length = 5;
        nextMsgId++;
 80a2a8e:	8c23      	ldrh	r3, [r4, #32]
 80a2a90:	3301      	adds	r3, #1
 80a2a92:	b29b      	uxth	r3, r3
        if (nextMsgId == 0) {
 80a2a94:	b903      	cbnz	r3, 80a2a98 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x18>
            nextMsgId = 1;
 80a2a96:	2301      	movs	r3, #1
 80a2a98:	8423      	strh	r3, [r4, #32]
        }
        buffer[length++] = (nextMsgId >> 8);
 80a2a9a:	8c23      	ldrh	r3, [r4, #32]
 80a2a9c:	69e2      	ldr	r2, [r4, #28]
 80a2a9e:	121b      	asrs	r3, r3, #8
 80a2aa0:	7153      	strb	r3, [r2, #5]
        buffer[length++] = (nextMsgId & 0xFF);
 80a2aa2:	69e3      	ldr	r3, [r4, #28]
 80a2aa4:	8c22      	ldrh	r2, [r4, #32]
        length = writeString(topic, buffer,length);
 80a2aa6:	4631      	mov	r1, r6
        nextMsgId++;
        if (nextMsgId == 0) {
            nextMsgId = 1;
        }
        buffer[length++] = (nextMsgId >> 8);
        buffer[length++] = (nextMsgId & 0xFF);
 80a2aa8:	719a      	strb	r2, [r3, #6]
        length = writeString(topic, buffer,length);
 80a2aaa:	69e2      	ldr	r2, [r4, #28]
 80a2aac:	2307      	movs	r3, #7
 80a2aae:	4620      	mov	r0, r4
 80a2ab0:	f7ff fd1b 	bl	80a24ea <_ZN4MQTT11writeStringEPKcPht>
        buffer[length++] = qos;
 80a2ab4:	69e3      	ldr	r3, [r4, #28]
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
 80a2ab6:	2182      	movs	r1, #130	; 0x82
            nextMsgId = 1;
        }
        buffer[length++] = (nextMsgId >> 8);
        buffer[length++] = (nextMsgId & 0xFF);
        length = writeString(topic, buffer,length);
        buffer[length++] = qos;
 80a2ab8:	541d      	strb	r5, [r3, r0]
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
 80a2aba:	1f03      	subs	r3, r0, #4
 80a2abc:	69e2      	ldr	r2, [r4, #28]
 80a2abe:	4620      	mov	r0, r4
    }
    return false;
}
 80a2ac0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        }
        buffer[length++] = (nextMsgId >> 8);
        buffer[length++] = (nextMsgId & 0xFF);
        length = writeString(topic, buffer,length);
        buffer[length++] = qos;
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
 80a2ac4:	b29b      	uxth	r3, r3
 80a2ac6:	f7ff bcc9 	b.w	80a245c <_ZN4MQTT5writeEhPht>
    }
    return false;
}
 80a2aca:	bd70      	pop	{r4, r5, r6, pc}

080a2acc <_ZN4MQTT9subscribeEPKc>:
    lastOutActivity = millis();
    return (rc == 1+llen+length);
}

bool MQTT::subscribe(const char* topic) {
    return subscribe(topic, QOS0);
 80a2acc:	2200      	movs	r2, #0
 80a2ace:	f7ff bfd7 	b.w	80a2a80 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>

080a2ad2 <_ZN4MQTTD1Ev>:

MQTT::MQTT(uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
    this->initialize(NULL, ip, port, keepalive, callback, maxpacketsize);
}

MQTT::~MQTT() {
 80a2ad2:	b510      	push	{r4, lr}
 80a2ad4:	4604      	mov	r4, r0
    if (isConnected()) {
 80a2ad6:	f7ff fd22 	bl	80a251e <_ZN4MQTT11isConnectedEv>
 80a2ada:	b110      	cbz	r0, 80a2ae2 <_ZN4MQTTD1Ev+0x10>
        disconnect();
 80a2adc:	4620      	mov	r0, r4
 80a2ade:	f7ff fcf0 	bl	80a24c2 <_ZN4MQTT10disconnectEv>
    }

    if (buffer != NULL)
 80a2ae2:	69e0      	ldr	r0, [r4, #28]
 80a2ae4:	b108      	cbz	r0, 80a2aea <_ZN4MQTTD1Ev+0x18>
      delete[] buffer;
 80a2ae6:	f7fd fae0 	bl	80a00aa <_ZdaPv>

MQTT::MQTT(uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
    this->initialize(NULL, ip, port, keepalive, callback, maxpacketsize);
}

MQTT::~MQTT() {
 80a2aea:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80a2aee:	f000 ffc5 	bl	80a3a7c <_ZN6StringD1Ev>
 80a2af2:	4620      	mov	r0, r4
 80a2af4:	f7ff fbe6 	bl	80a22c4 <_ZN9TCPClientD1Ev>
        disconnect();
    }

    if (buffer != NULL)
      delete[] buffer;
}
 80a2af8:	4620      	mov	r0, r4
 80a2afa:	bd10      	pop	{r4, pc}

080a2afc <_GLOBAL__sub_I__ZN4MQTTC2EPctPFvS0_PhjE>:
 80a2afc:	f000 b966 	b.w	80a2dcc <HAL_Pin_Map>

080a2b00 <_ZN10JsonBufferD1Ev>:


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {

}
JsonBuffer::~JsonBuffer() {
 80a2b00:	b510      	push	{r4, lr}
 80a2b02:	4b05      	ldr	r3, [pc, #20]	; (80a2b18 <_ZN10JsonBufferD1Ev+0x18>)
 80a2b04:	4604      	mov	r4, r0
 80a2b06:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && buffer) {
 80a2b08:	7c03      	ldrb	r3, [r0, #16]
 80a2b0a:	b91b      	cbnz	r3, 80a2b14 <_ZN10JsonBufferD1Ev+0x14>
 80a2b0c:	6840      	ldr	r0, [r0, #4]
 80a2b0e:	b108      	cbz	r0, 80a2b14 <_ZN10JsonBufferD1Ev+0x14>
		free(buffer);
 80a2b10:	f000 fbea 	bl	80a32e8 <free>
	}
}
 80a2b14:	4620      	mov	r0, r4
 80a2b16:	bd10      	pop	{r4, pc}
 80a2b18:	080a9a38 	.word	0x080a9a38

080a2b1c <_ZN10JsonBufferD0Ev>:


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {

}
JsonBuffer::~JsonBuffer() {
 80a2b1c:	b510      	push	{r4, lr}
 80a2b1e:	4604      	mov	r4, r0
	if (!staticBuffers && buffer) {
		free(buffer);
	}
}
 80a2b20:	f7ff ffee 	bl	80a2b00 <_ZN10JsonBufferD1Ev>
 80a2b24:	4620      	mov	r0, r4
 80a2b26:	2114      	movs	r1, #20
 80a2b28:	f002 f93a 	bl	80a4da0 <_ZdlPvj>
 80a2b2c:	4620      	mov	r0, r4
 80a2b2e:	bd10      	pop	{r4, pc}

080a2b30 <_ZN10JsonWriterD1Ev>:
//
JsonWriter::JsonWriter() : JsonBuffer(), floatPlaces(-1) {
	init();
}

JsonWriter::~JsonWriter() {
 80a2b30:	b510      	push	{r4, lr}
 80a2b32:	4604      	mov	r4, r0
 80a2b34:	4b02      	ldr	r3, [pc, #8]	; (80a2b40 <_ZN10JsonWriterD1Ev+0x10>)
 80a2b36:	6003      	str	r3, [r0, #0]
 80a2b38:	f7ff ffe2 	bl	80a2b00 <_ZN10JsonBufferD1Ev>

}
 80a2b3c:	4620      	mov	r0, r4
 80a2b3e:	bd10      	pop	{r4, pc}
 80a2b40:	080a9a48 	.word	0x080a9a48

080a2b44 <_ZN10JsonWriterD0Ev>:
//
JsonWriter::JsonWriter() : JsonBuffer(), floatPlaces(-1) {
	init();
}

JsonWriter::~JsonWriter() {
 80a2b44:	b510      	push	{r4, lr}
 80a2b46:	4604      	mov	r4, r0

}
 80a2b48:	f7ff fff2 	bl	80a2b30 <_ZN10JsonWriterD1Ev>
 80a2b4c:	4620      	mov	r0, r4
 80a2b4e:	2130      	movs	r1, #48	; 0x30
 80a2b50:	f002 f926 	bl	80a4da0 <_ZdlPvj>
 80a2b54:	4620      	mov	r0, r4
 80a2b56:	bd10      	pop	{r4, pc}

080a2b58 <_ZN10JsonWriter4initEv>:
	init();
}

void JsonWriter::init() {
	// Save start of insertion point for later
	offset = 0;
 80a2b58:	2300      	movs	r3, #0

	contextIndex = 0;
	context[contextIndex].isFirst = true;
 80a2b5a:	2201      	movs	r2, #1
	init();
}

void JsonWriter::init() {
	// Save start of insertion point for later
	offset = 0;
 80a2b5c:	60c3      	str	r3, [r0, #12]

	contextIndex = 0;
 80a2b5e:	6143      	str	r3, [r0, #20]
	context[contextIndex].isFirst = true;
 80a2b60:	7602      	strb	r2, [r0, #24]
	context[contextIndex].terminator = 0;
 80a2b62:	7643      	strb	r3, [r0, #25]

	truncated = false;
 80a2b64:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
 80a2b68:	4770      	bx	lr
	...

080a2b6c <_ZN10JsonWriterC1EPcj>:
	if (!staticBuffers && buffer) {
		free(buffer);
	}
}

JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
 80a2b6c:	2300      	movs	r3, #0
 80a2b6e:	60c3      	str	r3, [r0, #12]

JsonWriter::~JsonWriter() {

}

JsonWriter::JsonWriter(char *buffer, size_t bufferLen) : JsonBuffer(buffer, bufferLen), floatPlaces(-1) {
 80a2b70:	b510      	push	{r4, lr}
	if (!staticBuffers && buffer) {
		free(buffer);
	}
}

JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
 80a2b72:	2301      	movs	r3, #1
 80a2b74:	7403      	strb	r3, [r0, #16]

JsonWriter::~JsonWriter() {

}

JsonWriter::JsonWriter(char *buffer, size_t bufferLen) : JsonBuffer(buffer, bufferLen), floatPlaces(-1) {
 80a2b76:	4b05      	ldr	r3, [pc, #20]	; (80a2b8c <_ZN10JsonWriterC1EPcj+0x20>)
	if (!staticBuffers && buffer) {
		free(buffer);
	}
}

JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
 80a2b78:	6041      	str	r1, [r0, #4]

JsonWriter::~JsonWriter() {

}

JsonWriter::JsonWriter(char *buffer, size_t bufferLen) : JsonBuffer(buffer, bufferLen), floatPlaces(-1) {
 80a2b7a:	6003      	str	r3, [r0, #0]
 80a2b7c:	f04f 33ff 	mov.w	r3, #4294967295
	if (!staticBuffers && buffer) {
		free(buffer);
	}
}

JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
 80a2b80:	6082      	str	r2, [r0, #8]

JsonWriter::~JsonWriter() {

}

JsonWriter::JsonWriter(char *buffer, size_t bufferLen) : JsonBuffer(buffer, bufferLen), floatPlaces(-1) {
 80a2b82:	62c3      	str	r3, [r0, #44]	; 0x2c
	init();
 80a2b84:	f7ff ffe8 	bl	80a2b58 <_ZN10JsonWriter4initEv>
}
 80a2b88:	bd10      	pop	{r4, pc}
 80a2b8a:	bf00      	nop
 80a2b8c:	080a9a48 	.word	0x080a9a48

080a2b90 <_ZN10JsonWriter10insertCharEc>:
	}
}


void JsonWriter::insertChar(char ch) {
	if (offset < bufferLen) {
 80a2b90:	68c3      	ldr	r3, [r0, #12]
 80a2b92:	6882      	ldr	r2, [r0, #8]
		buffer[bufferLen - 1] = 0;
	}
}


void JsonWriter::insertChar(char ch) {
 80a2b94:	b510      	push	{r4, lr}
	if (offset < bufferLen) {
 80a2b96:	4293      	cmp	r3, r2
		buffer[offset++] = ch;
 80a2b98:	bf3d      	ittte	cc
 80a2b9a:	6842      	ldrcc	r2, [r0, #4]
 80a2b9c:	1c5c      	addcc	r4, r3, #1
 80a2b9e:	60c4      	strcc	r4, [r0, #12]
	}
	else {
		truncated = true;
 80a2ba0:	2301      	movcs	r3, #1
}


void JsonWriter::insertChar(char ch) {
	if (offset < bufferLen) {
		buffer[offset++] = ch;
 80a2ba2:	bf34      	ite	cc
 80a2ba4:	54d1      	strbcc	r1, [r2, r3]
	}
	else {
		truncated = true;
 80a2ba6:	f880 302a 	strbcs.w	r3, [r0, #42]	; 0x2a
 80a2baa:	bd10      	pop	{r4, pc}

080a2bac <_ZN10JsonWriter19finishObjectOrArrayEv>:
	insertChar(startChar);
	return true;
}


void JsonWriter::finishObjectOrArray() {
 80a2bac:	b510      	push	{r4, lr}
	if (contextIndex > 0) {
 80a2bae:	6943      	ldr	r3, [r0, #20]
	insertChar(startChar);
	return true;
}


void JsonWriter::finishObjectOrArray() {
 80a2bb0:	4604      	mov	r4, r0
	if (contextIndex > 0) {
 80a2bb2:	b143      	cbz	r3, 80a2bc6 <_ZN10JsonWriter19finishObjectOrArrayEv+0x1a>
		if (context[contextIndex].terminator != 0) {
 80a2bb4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80a2bb8:	7e59      	ldrb	r1, [r3, #25]
 80a2bba:	b109      	cbz	r1, 80a2bc0 <_ZN10JsonWriter19finishObjectOrArrayEv+0x14>
			insertChar(context[contextIndex].terminator);
 80a2bbc:	f7ff ffe8 	bl	80a2b90 <_ZN10JsonWriter10insertCharEc>
		}
		contextIndex--;
 80a2bc0:	6963      	ldr	r3, [r4, #20]
 80a2bc2:	3b01      	subs	r3, #1
 80a2bc4:	6163      	str	r3, [r4, #20]
	}
	// Make sure buffer is null terminated
	if (offset < bufferLen) {
 80a2bc6:	68a3      	ldr	r3, [r4, #8]
 80a2bc8:	68e0      	ldr	r0, [r4, #12]
 80a2bca:	6861      	ldr	r1, [r4, #4]
 80a2bcc:	4298      	cmp	r0, r3
 80a2bce:	f04f 0200 	mov.w	r2, #0
		buffer[offset] = 0;
	}
	else {
		buffer[bufferLen - 1] = 0;
 80a2bd2:	bf2a      	itet	cs
 80a2bd4:	185b      	addcs	r3, r3, r1
		}
		contextIndex--;
	}
	// Make sure buffer is null terminated
	if (offset < bufferLen) {
		buffer[offset] = 0;
 80a2bd6:	540a      	strbcc	r2, [r1, r0]
	}
	else {
		buffer[bufferLen - 1] = 0;
 80a2bd8:	f803 2c01 	strbcs.w	r2, [r3, #-1]
 80a2bdc:	bd10      	pop	{r4, pc}

080a2bde <_ZN10JsonWriter14insertvsprintfEPKcSt9__va_list>:
	va_start(ap, fmt);
	insertvsprintf(fmt, ap);
	va_end(ap);
}

void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
 80a2bde:	b570      	push	{r4, r5, r6, lr}
 80a2be0:	4604      	mov	r4, r0
	size_t spaceAvailable = bufferLen - offset;
 80a2be2:	68c0      	ldr	r0, [r0, #12]
 80a2be4:	68a5      	ldr	r5, [r4, #8]

	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
 80a2be6:	6866      	ldr	r6, [r4, #4]
	insertvsprintf(fmt, ap);
	va_end(ap);
}

void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
	size_t spaceAvailable = bufferLen - offset;
 80a2be8:	1a2d      	subs	r5, r5, r0

	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
 80a2bea:	4613      	mov	r3, r2
 80a2bec:	4430      	add	r0, r6
 80a2bee:	460a      	mov	r2, r1
 80a2bf0:	4629      	mov	r1, r5
 80a2bf2:	f000 fba9 	bl	80a3348 <vsnprintf>
	if (count <= spaceAvailable) {
 80a2bf6:	4285      	cmp	r5, r0
		offset += count;
	}
	else {
		// Truncated, no more space left
		offset = bufferLen;
 80a2bf8:	bf35      	itete	cc
 80a2bfa:	68a3      	ldrcc	r3, [r4, #8]
void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
	size_t spaceAvailable = bufferLen - offset;

	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
	if (count <= spaceAvailable) {
		offset += count;
 80a2bfc:	68e3      	ldrcs	r3, [r4, #12]
	}
	else {
		// Truncated, no more space left
		offset = bufferLen;
 80a2bfe:	60e3      	strcc	r3, [r4, #12]
void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
	size_t spaceAvailable = bufferLen - offset;

	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
	if (count <= spaceAvailable) {
		offset += count;
 80a2c00:	18c0      	addcs	r0, r0, r3
	}
	else {
		// Truncated, no more space left
		offset = bufferLen;
		truncated = true;
 80a2c02:	bf36      	itet	cc
 80a2c04:	2301      	movcc	r3, #1
void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
	size_t spaceAvailable = bufferLen - offset;

	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
	if (count <= spaceAvailable) {
		offset += count;
 80a2c06:	60e0      	strcs	r0, [r4, #12]
	}
	else {
		// Truncated, no more space left
		offset = bufferLen;
		truncated = true;
 80a2c08:	f884 302a 	strbcc.w	r3, [r4, #42]	; 0x2a
 80a2c0c:	bd70      	pop	{r4, r5, r6, pc}

080a2c0e <_ZN10JsonWriter13insertsprintfEPKcz>:

}



void JsonWriter::insertsprintf(const char *fmt, ...) {
 80a2c0e:	b40e      	push	{r1, r2, r3}
 80a2c10:	b503      	push	{r0, r1, lr}
 80a2c12:	aa03      	add	r2, sp, #12
 80a2c14:	f852 1b04 	ldr.w	r1, [r2], #4
	va_list ap;
	va_start(ap, fmt);
 80a2c18:	9201      	str	r2, [sp, #4]
	insertvsprintf(fmt, ap);
 80a2c1a:	f7ff ffe0 	bl	80a2bde <_ZN10JsonWriter14insertvsprintfEPKcSt9__va_list>
	va_end(ap);
}
 80a2c1e:	b002      	add	sp, #8
 80a2c20:	f85d eb04 	ldr.w	lr, [sp], #4
 80a2c24:	b003      	add	sp, #12
 80a2c26:	4770      	bx	lr

080a2c28 <_ZN10JsonWriter12insertStringEPKcb>:
	else {
		truncated = true;
	}
}

void JsonWriter::insertString(const char *s, bool quoted) {
 80a2c28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a2c2c:	4604      	mov	r4, r0
 80a2c2e:	460e      	mov	r6, r1
	// 110xxxxx 10xxxxxx

	// 0x00000800 - 0x0000FFFF:
	// 1110xxxx 10xxxxxx 10xxxxxx

	if (quoted) {
 80a2c30:	4617      	mov	r7, r2
 80a2c32:	b112      	cbz	r2, 80a2c3a <_ZN10JsonWriter12insertStringEPKcb+0x12>
		insertChar('"');
 80a2c34:	2122      	movs	r1, #34	; 0x22
 80a2c36:	f7ff ffab 	bl	80a2b90 <_ZN10JsonWriter10insertCharEc>
	else {
		truncated = true;
	}
}

void JsonWriter::insertString(const char *s, bool quoted) {
 80a2c3a:	2500      	movs	r5, #0

	if (quoted) {
		insertChar('"');
	}

	for(size_t ii = 0; s[ii] && offset < bufferLen; ii++) {
 80a2c3c:	5d71      	ldrb	r1, [r6, r5]
 80a2c3e:	eb06 0805 	add.w	r8, r6, r5
 80a2c42:	2900      	cmp	r1, #0
 80a2c44:	d071      	beq.n	80a2d2a <_ZN10JsonWriter12insertStringEPKcb+0x102>
 80a2c46:	68e2      	ldr	r2, [r4, #12]
 80a2c48:	68a3      	ldr	r3, [r4, #8]
 80a2c4a:	429a      	cmp	r2, r3
 80a2c4c:	d26d      	bcs.n	80a2d2a <_ZN10JsonWriter12insertStringEPKcb+0x102>
		if (s[ii] & 0x80) {
 80a2c4e:	060b      	lsls	r3, r1, #24
 80a2c50:	d533      	bpl.n	80a2cba <_ZN10JsonWriter12insertStringEPKcb+0x92>
			// High bit set: convert UTF-8 to JSON Unicode escape
			if (((s[ii] & 0b11110000) == 0b11100000) && ((s[ii+1] & 0b11000000) == 0b10000000) && ((s[ii+2] & 0b11000000) == 0b10000000)) {
 80a2c52:	f001 03f0 	and.w	r3, r1, #240	; 0xf0
 80a2c56:	2be0      	cmp	r3, #224	; 0xe0
 80a2c58:	d117      	bne.n	80a2c8a <_ZN10JsonWriter12insertStringEPKcb+0x62>
 80a2c5a:	f898 3001 	ldrb.w	r3, [r8, #1]
 80a2c5e:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
 80a2c62:	2a80      	cmp	r2, #128	; 0x80
 80a2c64:	d111      	bne.n	80a2c8a <_ZN10JsonWriter12insertStringEPKcb+0x62>
 80a2c66:	f105 0802 	add.w	r8, r5, #2
 80a2c6a:	f816 2008 	ldrb.w	r2, [r6, r8]
 80a2c6e:	f002 00c0 	and.w	r0, r2, #192	; 0xc0
 80a2c72:	2880      	cmp	r0, #128	; 0x80
 80a2c74:	d109      	bne.n	80a2c8a <_ZN10JsonWriter12insertStringEPKcb+0x62>
				// 3-byte
				uint16_t utf16 = ((s[ii] & 0b1111) << 12) | ((s[ii+1] & 0b111111) << 6) | (s[ii+2] & 0b111111);
				insertsprintf("\\u%04X", utf16);
 80a2c76:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80a2c7a:	019b      	lsls	r3, r3, #6
 80a2c7c:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
 80a2c80:	f403 637c 	and.w	r3, r3, #4032	; 0xfc0
 80a2c84:	431a      	orrs	r2, r3
 80a2c86:	b292      	uxth	r2, r2
 80a2c88:	e011      	b.n	80a2cae <_ZN10JsonWriter12insertStringEPKcb+0x86>
				ii += 2; // plus one more in loop increment
			}
			else
			if (((s[ii] & 0b11100000) == 0b11000000) && ((s[ii+1] & 0b11000000) == 0b10000000)) {
 80a2c8a:	f001 03e0 	and.w	r3, r1, #224	; 0xe0
 80a2c8e:	2bc0      	cmp	r3, #192	; 0xc0
 80a2c90:	d146      	bne.n	80a2d20 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
 80a2c92:	f105 0801 	add.w	r8, r5, #1
 80a2c96:	f816 3008 	ldrb.w	r3, [r6, r8]
 80a2c9a:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
 80a2c9e:	2a80      	cmp	r2, #128	; 0x80
 80a2ca0:	d13e      	bne.n	80a2d20 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				// 2-byte
				uint16_t utf16 = ((s[ii] & 0b11111) << 6) | (s[ii+1] & 0b111111);
				insertsprintf("\\u%04X", utf16);
 80a2ca2:	0189      	lsls	r1, r1, #6
 80a2ca4:	f401 62f8 	and.w	r2, r1, #1984	; 0x7c0
 80a2ca8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80a2cac:	431a      	orrs	r2, r3
 80a2cae:	4923      	ldr	r1, [pc, #140]	; (80a2d3c <_ZN10JsonWriter12insertStringEPKcb+0x114>)
 80a2cb0:	4620      	mov	r0, r4
 80a2cb2:	f7ff ffac 	bl	80a2c0e <_ZN10JsonWriter13insertsprintfEPKcz>
				ii++; // plus one more in loop increment
 80a2cb6:	4645      	mov	r5, r8
 80a2cb8:	e035      	b.n	80a2d26 <_ZN10JsonWriter12insertStringEPKcb+0xfe>
				// Not valid unicode, just pass characters through
				insertChar(s[ii]);
			}
		}
		else {
			switch(s[ii]) {
 80a2cba:	290c      	cmp	r1, #12
 80a2cbc:	d018      	beq.n	80a2cf0 <_ZN10JsonWriter12insertStringEPKcb+0xc8>
 80a2cbe:	d80b      	bhi.n	80a2cd8 <_ZN10JsonWriter12insertStringEPKcb+0xb0>
 80a2cc0:	2909      	cmp	r1, #9
 80a2cc2:	d021      	beq.n	80a2d08 <_ZN10JsonWriter12insertStringEPKcb+0xe0>
 80a2cc4:	290a      	cmp	r1, #10
 80a2cc6:	d019      	beq.n	80a2cfc <_ZN10JsonWriter12insertStringEPKcb+0xd4>
 80a2cc8:	2908      	cmp	r1, #8
 80a2cca:	d129      	bne.n	80a2d20 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
			case '\b':
				insertChar('\\');
 80a2ccc:	215c      	movs	r1, #92	; 0x5c
 80a2cce:	4620      	mov	r0, r4
 80a2cd0:	f7ff ff5e 	bl	80a2b90 <_ZN10JsonWriter10insertCharEc>
				insertChar('b');
 80a2cd4:	2162      	movs	r1, #98	; 0x62
 80a2cd6:	e023      	b.n	80a2d20 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				// Not valid unicode, just pass characters through
				insertChar(s[ii]);
			}
		}
		else {
			switch(s[ii]) {
 80a2cd8:	2922      	cmp	r1, #34	; 0x22
 80a2cda:	d01b      	beq.n	80a2d14 <_ZN10JsonWriter12insertStringEPKcb+0xec>
 80a2cdc:	295c      	cmp	r1, #92	; 0x5c
 80a2cde:	d019      	beq.n	80a2d14 <_ZN10JsonWriter12insertStringEPKcb+0xec>
 80a2ce0:	290d      	cmp	r1, #13
 80a2ce2:	d11d      	bne.n	80a2d20 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				insertChar('\\');
				insertChar('n');
				break;

			case '\r':
				insertChar('\\');
 80a2ce4:	215c      	movs	r1, #92	; 0x5c
 80a2ce6:	4620      	mov	r0, r4
 80a2ce8:	f7ff ff52 	bl	80a2b90 <_ZN10JsonWriter10insertCharEc>
				insertChar('r');
 80a2cec:	2172      	movs	r1, #114	; 0x72
 80a2cee:	e017      	b.n	80a2d20 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				insertChar('\\');
				insertChar('b');
				break;

			case '\f':
				insertChar('\\');
 80a2cf0:	215c      	movs	r1, #92	; 0x5c
 80a2cf2:	4620      	mov	r0, r4
 80a2cf4:	f7ff ff4c 	bl	80a2b90 <_ZN10JsonWriter10insertCharEc>
				insertChar('f');
 80a2cf8:	2166      	movs	r1, #102	; 0x66
 80a2cfa:	e011      	b.n	80a2d20 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				break;

			case '\n':
				insertChar('\\');
 80a2cfc:	215c      	movs	r1, #92	; 0x5c
 80a2cfe:	4620      	mov	r0, r4
 80a2d00:	f7ff ff46 	bl	80a2b90 <_ZN10JsonWriter10insertCharEc>
				insertChar('n');
 80a2d04:	216e      	movs	r1, #110	; 0x6e
 80a2d06:	e00b      	b.n	80a2d20 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				insertChar('\\');
				insertChar('r');
				break;

			case '\t':
				insertChar('\\');
 80a2d08:	215c      	movs	r1, #92	; 0x5c
 80a2d0a:	4620      	mov	r0, r4
 80a2d0c:	f7ff ff40 	bl	80a2b90 <_ZN10JsonWriter10insertCharEc>
				insertChar('t');
 80a2d10:	2174      	movs	r1, #116	; 0x74
 80a2d12:	e005      	b.n	80a2d20 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				break;

			case '"':
			case '\\':
				insertChar('\\');
 80a2d14:	215c      	movs	r1, #92	; 0x5c
 80a2d16:	4620      	mov	r0, r4
 80a2d18:	f7ff ff3a 	bl	80a2b90 <_ZN10JsonWriter10insertCharEc>
				insertChar(s[ii]);
 80a2d1c:	f898 1000 	ldrb.w	r1, [r8]
				break;

			default:
				insertChar(s[ii]);
 80a2d20:	4620      	mov	r0, r4
 80a2d22:	f7ff ff35 	bl	80a2b90 <_ZN10JsonWriter10insertCharEc>

	if (quoted) {
		insertChar('"');
	}

	for(size_t ii = 0; s[ii] && offset < bufferLen; ii++) {
 80a2d26:	3501      	adds	r5, #1
 80a2d28:	e788      	b.n	80a2c3c <_ZN10JsonWriter12insertStringEPKcb+0x14>
				insertChar(s[ii]);
				break;
			}
		}
	}
	if (quoted) {
 80a2d2a:	b12f      	cbz	r7, 80a2d38 <_ZN10JsonWriter12insertStringEPKcb+0x110>
		insertChar('"');
 80a2d2c:	4620      	mov	r0, r4
	}

}
 80a2d2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				break;
			}
		}
	}
	if (quoted) {
		insertChar('"');
 80a2d32:	2122      	movs	r1, #34	; 0x22
 80a2d34:	f7ff bf2c 	b.w	80a2b90 <_ZN10JsonWriter10insertCharEc>
 80a2d38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a2d3c:	080a9a55 	.word	0x080a9a55

080a2d40 <_ZN10JsonWriter20insertCheckSeparatorEv>:
		offset = bufferLen;
		truncated = true;
	}
}

void JsonWriter::insertCheckSeparator() {
 80a2d40:	6942      	ldr	r2, [r0, #20]
 80a2d42:	eb00 0342 	add.w	r3, r0, r2, lsl #1
	if (context[contextIndex].isFirst) {
 80a2d46:	7e1a      	ldrb	r2, [r3, #24]
 80a2d48:	b112      	cbz	r2, 80a2d50 <_ZN10JsonWriter20insertCheckSeparatorEv+0x10>
		context[contextIndex].isFirst = false;
 80a2d4a:	2200      	movs	r2, #0
 80a2d4c:	761a      	strb	r2, [r3, #24]
 80a2d4e:	4770      	bx	lr
	}
	else {
		insertChar(',');
 80a2d50:	212c      	movs	r1, #44	; 0x2c
 80a2d52:	f7ff bf1d 	b.w	80a2b90 <_ZN10JsonWriter10insertCharEc>

080a2d56 <_ZN10JsonWriter18startObjectOrArrayEcc>:

	truncated = false;

}

bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
 80a2d56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
 80a2d58:	6943      	ldr	r3, [r0, #20]

	truncated = false;

}

bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
 80a2d5a:	460e      	mov	r6, r1
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
 80a2d5c:	3301      	adds	r3, #1
 80a2d5e:	2b08      	cmp	r3, #8

	truncated = false;

}

bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
 80a2d60:	4617      	mov	r7, r2
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
 80a2d62:	d80e      	bhi.n	80a2d82 <_ZN10JsonWriter18startObjectOrArrayEcc+0x2c>
		return false;
	}
	insertCheckSeparator();
 80a2d64:	f7ff ffec 	bl	80a2d40 <_ZN10JsonWriter20insertCheckSeparatorEv>

	contextIndex++;
 80a2d68:	6943      	ldr	r3, [r0, #20]

	context[contextIndex].isFirst = true;
 80a2d6a:	2401      	movs	r4, #1
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
		return false;
	}
	insertCheckSeparator();

	contextIndex++;
 80a2d6c:	1c5a      	adds	r2, r3, #1
 80a2d6e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80a2d72:	6142      	str	r2, [r0, #20]

	context[contextIndex].isFirst = true;
	context[contextIndex].terminator = endChar;

	insertChar(startChar);
 80a2d74:	4631      	mov	r1, r6
	}
	insertCheckSeparator();

	contextIndex++;

	context[contextIndex].isFirst = true;
 80a2d76:	769c      	strb	r4, [r3, #26]
	context[contextIndex].terminator = endChar;
 80a2d78:	76df      	strb	r7, [r3, #27]

	insertChar(startChar);
 80a2d7a:	f7ff ff09 	bl	80a2b90 <_ZN10JsonWriter10insertCharEc>
 80a2d7e:	4620      	mov	r0, r4
 80a2d80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

}

bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
		return false;
 80a2d82:	2000      	movs	r0, #0
	context[contextIndex].isFirst = true;
	context[contextIndex].terminator = endChar;

	insertChar(startChar);
	return true;
}
 80a2d84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080a2d88 <_ZN10JsonWriter11insertValueEf>:
	else {
		insertString("false");
	}
}

void JsonWriter::insertValue(float value) {
 80a2d88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a2d8a:	4604      	mov	r4, r0
	if (floatPlaces >= 0) {
 80a2d8c:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
	else {
		insertString("false");
	}
}

void JsonWriter::insertValue(float value) {
 80a2d8e:	4608      	mov	r0, r1
	if (floatPlaces >= 0) {
 80a2d90:	2d00      	cmp	r5, #0
 80a2d92:	db0a      	blt.n	80a2daa <_ZN10JsonWriter11insertValueEf+0x22>
		insertsprintf("%.*f", floatPlaces, value);
 80a2d94:	f002 fac4 	bl	80a5320 <__aeabi_f2d>
 80a2d98:	462a      	mov	r2, r5
 80a2d9a:	e9cd 0100 	strd	r0, r1, [sp]
 80a2d9e:	4908      	ldr	r1, [pc, #32]	; (80a2dc0 <_ZN10JsonWriter11insertValueEf+0x38>)
 80a2da0:	4620      	mov	r0, r4
 80a2da2:	f7ff ff34 	bl	80a2c0e <_ZN10JsonWriter13insertsprintfEPKcz>
	}
	else {
		insertsprintf("%f", value);
	}
}
 80a2da6:	b003      	add	sp, #12
 80a2da8:	bd30      	pop	{r4, r5, pc}
void JsonWriter::insertValue(float value) {
	if (floatPlaces >= 0) {
		insertsprintf("%.*f", floatPlaces, value);
	}
	else {
		insertsprintf("%f", value);
 80a2daa:	f002 fab9 	bl	80a5320 <__aeabi_f2d>
 80a2dae:	4602      	mov	r2, r0
 80a2db0:	460b      	mov	r3, r1
 80a2db2:	4620      	mov	r0, r4
 80a2db4:	4903      	ldr	r1, [pc, #12]	; (80a2dc4 <_ZN10JsonWriter11insertValueEf+0x3c>)
	}
}
 80a2db6:	b003      	add	sp, #12
 80a2db8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
void JsonWriter::insertValue(float value) {
	if (floatPlaces >= 0) {
		insertsprintf("%.*f", floatPlaces, value);
	}
	else {
		insertsprintf("%f", value);
 80a2dbc:	f7ff bf27 	b.w	80a2c0e <_ZN10JsonWriter13insertsprintfEPKcz>
 80a2dc0:	080a9a5c 	.word	0x080a9a5c
 80a2dc4:	080a9a61 	.word	0x080a9a61

080a2dc8 <_GLOBAL__sub_I__ZN10JsonBufferC2Ev>:
 80a2dc8:	f000 b800 	b.w	80a2dcc <HAL_Pin_Map>

080a2dcc <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a2dcc:	b508      	push	{r3, lr}
 80a2dce:	4b02      	ldr	r3, [pc, #8]	; (80a2dd8 <HAL_Pin_Map+0xc>)
 80a2dd0:	681b      	ldr	r3, [r3, #0]
 80a2dd2:	681b      	ldr	r3, [r3, #0]
 80a2dd4:	9301      	str	r3, [sp, #4]
 80a2dd6:	bd08      	pop	{r3, pc}
 80a2dd8:	080601b0 	.word	0x080601b0

080a2ddc <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a2ddc:	b508      	push	{r3, lr}
 80a2dde:	4b02      	ldr	r3, [pc, #8]	; (80a2de8 <HAL_Pin_Mode+0xc>)
 80a2de0:	681b      	ldr	r3, [r3, #0]
 80a2de2:	689b      	ldr	r3, [r3, #8]
 80a2de4:	9301      	str	r3, [sp, #4]
 80a2de6:	bd08      	pop	{r3, pc}
 80a2de8:	080601b0 	.word	0x080601b0

080a2dec <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a2dec:	b508      	push	{r3, lr}
 80a2dee:	4b02      	ldr	r3, [pc, #8]	; (80a2df8 <HAL_Get_Pin_Mode+0xc>)
 80a2df0:	681b      	ldr	r3, [r3, #0]
 80a2df2:	68db      	ldr	r3, [r3, #12]
 80a2df4:	9301      	str	r3, [sp, #4]
 80a2df6:	bd08      	pop	{r3, pc}
 80a2df8:	080601b0 	.word	0x080601b0

080a2dfc <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a2dfc:	b508      	push	{r3, lr}
 80a2dfe:	4b02      	ldr	r3, [pc, #8]	; (80a2e08 <HAL_GPIO_Write+0xc>)
 80a2e00:	681b      	ldr	r3, [r3, #0]
 80a2e02:	691b      	ldr	r3, [r3, #16]
 80a2e04:	9301      	str	r3, [sp, #4]
 80a2e06:	bd08      	pop	{r3, pc}
 80a2e08:	080601b0 	.word	0x080601b0

080a2e0c <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 80a2e0c:	b508      	push	{r3, lr}
 80a2e0e:	4b02      	ldr	r3, [pc, #8]	; (80a2e18 <HAL_GPIO_Read+0xc>)
 80a2e10:	681b      	ldr	r3, [r3, #0]
 80a2e12:	695b      	ldr	r3, [r3, #20]
 80a2e14:	9301      	str	r3, [sp, #4]
 80a2e16:	bd08      	pop	{r3, pc}
 80a2e18:	080601b0 	.word	0x080601b0

080a2e1c <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
 80a2e1c:	b508      	push	{r3, lr}
 80a2e1e:	4b02      	ldr	r3, [pc, #8]	; (80a2e28 <HAL_SPI_Begin+0xc>)
 80a2e20:	681b      	ldr	r3, [r3, #0]
 80a2e22:	681b      	ldr	r3, [r3, #0]
 80a2e24:	9301      	str	r3, [sp, #4]
 80a2e26:	bd08      	pop	{r3, pc}
 80a2e28:	080601b4 	.word	0x080601b4

080a2e2c <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
 80a2e2c:	b508      	push	{r3, lr}
 80a2e2e:	4b02      	ldr	r3, [pc, #8]	; (80a2e38 <HAL_SPI_Send_Receive_Data+0xc>)
 80a2e30:	681b      	ldr	r3, [r3, #0]
 80a2e32:	695b      	ldr	r3, [r3, #20]
 80a2e34:	9301      	str	r3, [sp, #4]
 80a2e36:	bd08      	pop	{r3, pc}
 80a2e38:	080601b4 	.word	0x080601b4

080a2e3c <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a2e3c:	b508      	push	{r3, lr}
 80a2e3e:	4b02      	ldr	r3, [pc, #8]	; (80a2e48 <HAL_SPI_Init+0xc>)
 80a2e40:	681b      	ldr	r3, [r3, #0]
 80a2e42:	69db      	ldr	r3, [r3, #28]
 80a2e44:	9301      	str	r3, [sp, #4]
 80a2e46:	bd08      	pop	{r3, pc}
 80a2e48:	080601b4 	.word	0x080601b4

080a2e4c <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a2e4c:	b508      	push	{r3, lr}
 80a2e4e:	4b02      	ldr	r3, [pc, #8]	; (80a2e58 <HAL_SPI_Is_Enabled+0xc>)
 80a2e50:	681b      	ldr	r3, [r3, #0]
 80a2e52:	6a1b      	ldr	r3, [r3, #32]
 80a2e54:	9301      	str	r3, [sp, #4]
 80a2e56:	bd08      	pop	{r3, pc}
 80a2e58:	080601b4 	.word	0x080601b4

080a2e5c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a2e5c:	b508      	push	{r3, lr}
 80a2e5e:	4b02      	ldr	r3, [pc, #8]	; (80a2e68 <HAL_RNG_GetRandomNumber+0xc>)
 80a2e60:	681b      	ldr	r3, [r3, #0]
 80a2e62:	685b      	ldr	r3, [r3, #4]
 80a2e64:	9301      	str	r3, [sp, #4]
 80a2e66:	bd08      	pop	{r3, pc}
 80a2e68:	0806019c 	.word	0x0806019c

080a2e6c <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a2e6c:	b508      	push	{r3, lr}
 80a2e6e:	4b02      	ldr	r3, [pc, #8]	; (80a2e78 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a2e70:	681b      	ldr	r3, [r3, #0]
 80a2e72:	695b      	ldr	r3, [r3, #20]
 80a2e74:	9301      	str	r3, [sp, #4]
 80a2e76:	bd08      	pop	{r3, pc}
 80a2e78:	0806019c 	.word	0x0806019c

080a2e7c <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
 80a2e7c:	b508      	push	{r3, lr}
 80a2e7e:	4b02      	ldr	r3, [pc, #8]	; (80a2e88 <HAL_RTC_Get_UnixTime+0xc>)
 80a2e80:	681b      	ldr	r3, [r3, #0]
 80a2e82:	69db      	ldr	r3, [r3, #28]
 80a2e84:	9301      	str	r3, [sp, #4]
 80a2e86:	bd08      	pop	{r3, pc}
 80a2e88:	0806019c 	.word	0x0806019c

080a2e8c <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
 80a2e8c:	b508      	push	{r3, lr}
 80a2e8e:	4b02      	ldr	r3, [pc, #8]	; (80a2e98 <HAL_RTC_Time_Is_Valid+0xc>)
 80a2e90:	681b      	ldr	r3, [r3, #0]
 80a2e92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a2e94:	9301      	str	r3, [sp, #4]
 80a2e96:	bd08      	pop	{r3, pc}
 80a2e98:	0806019c 	.word	0x0806019c

080a2e9c <HAL_Core_System_Reset_Ex>:
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
 80a2e9c:	b508      	push	{r3, lr}
 80a2e9e:	4b02      	ldr	r3, [pc, #8]	; (80a2ea8 <HAL_Core_System_Reset_Ex+0xc>)
 80a2ea0:	681b      	ldr	r3, [r3, #0]
 80a2ea2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a2ea4:	9301      	str	r3, [sp, #4]
 80a2ea6:	bd08      	pop	{r3, pc}
 80a2ea8:	080601b8 	.word	0x080601b8

080a2eac <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80a2eac:	b508      	push	{r3, lr}
 80a2eae:	4b02      	ldr	r3, [pc, #8]	; (80a2eb8 <os_mutex_recursive_create+0xc>)
 80a2eb0:	681b      	ldr	r3, [r3, #0]
 80a2eb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a2eb4:	9301      	str	r3, [sp, #4]
 80a2eb6:	bd08      	pop	{r3, pc}
 80a2eb8:	080601d0 	.word	0x080601d0

080a2ebc <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80a2ebc:	b508      	push	{r3, lr}
 80a2ebe:	4b02      	ldr	r3, [pc, #8]	; (80a2ec8 <os_mutex_recursive_destroy+0xc>)
 80a2ec0:	681b      	ldr	r3, [r3, #0]
 80a2ec2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a2ec4:	9301      	str	r3, [sp, #4]
 80a2ec6:	bd08      	pop	{r3, pc}
 80a2ec8:	080601d0 	.word	0x080601d0

080a2ecc <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
 80a2ecc:	b508      	push	{r3, lr}
 80a2ece:	4b02      	ldr	r3, [pc, #8]	; (80a2ed8 <os_mutex_recursive_lock+0xc>)
 80a2ed0:	681b      	ldr	r3, [r3, #0]
 80a2ed2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a2ed4:	9301      	str	r3, [sp, #4]
 80a2ed6:	bd08      	pop	{r3, pc}
 80a2ed8:	080601d0 	.word	0x080601d0

080a2edc <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
 80a2edc:	b508      	push	{r3, lr}
 80a2ede:	4b02      	ldr	r3, [pc, #8]	; (80a2ee8 <os_mutex_recursive_unlock+0xc>)
 80a2ee0:	681b      	ldr	r3, [r3, #0]
 80a2ee2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a2ee4:	9301      	str	r3, [sp, #4]
 80a2ee6:	bd08      	pop	{r3, pc}
 80a2ee8:	080601d0 	.word	0x080601d0

080a2eec <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a2eec:	b508      	push	{r3, lr}
 80a2eee:	4b02      	ldr	r3, [pc, #8]	; (80a2ef8 <HAL_USART_Init+0xc>)
 80a2ef0:	681b      	ldr	r3, [r3, #0]
 80a2ef2:	699b      	ldr	r3, [r3, #24]
 80a2ef4:	9301      	str	r3, [sp, #4]
 80a2ef6:	bd08      	pop	{r3, pc}
 80a2ef8:	080601c4 	.word	0x080601c4

080a2efc <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a2efc:	b508      	push	{r3, lr}
 80a2efe:	4b02      	ldr	r3, [pc, #8]	; (80a2f08 <HAL_USART_Write_Data+0xc>)
 80a2f00:	681b      	ldr	r3, [r3, #0]
 80a2f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a2f04:	9301      	str	r3, [sp, #4]
 80a2f06:	bd08      	pop	{r3, pc}
 80a2f08:	080601c4 	.word	0x080601c4

080a2f0c <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a2f0c:	b508      	push	{r3, lr}
 80a2f0e:	4b02      	ldr	r3, [pc, #8]	; (80a2f18 <HAL_USART_Available_Data+0xc>)
 80a2f10:	681b      	ldr	r3, [r3, #0]
 80a2f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a2f14:	9301      	str	r3, [sp, #4]
 80a2f16:	bd08      	pop	{r3, pc}
 80a2f18:	080601c4 	.word	0x080601c4

080a2f1c <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a2f1c:	b508      	push	{r3, lr}
 80a2f1e:	4b02      	ldr	r3, [pc, #8]	; (80a2f28 <HAL_USART_Read_Data+0xc>)
 80a2f20:	681b      	ldr	r3, [r3, #0]
 80a2f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a2f24:	9301      	str	r3, [sp, #4]
 80a2f26:	bd08      	pop	{r3, pc}
 80a2f28:	080601c4 	.word	0x080601c4

080a2f2c <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a2f2c:	b508      	push	{r3, lr}
 80a2f2e:	4b02      	ldr	r3, [pc, #8]	; (80a2f38 <HAL_USART_Peek_Data+0xc>)
 80a2f30:	681b      	ldr	r3, [r3, #0]
 80a2f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a2f34:	9301      	str	r3, [sp, #4]
 80a2f36:	bd08      	pop	{r3, pc}
 80a2f38:	080601c4 	.word	0x080601c4

080a2f3c <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a2f3c:	b508      	push	{r3, lr}
 80a2f3e:	4b02      	ldr	r3, [pc, #8]	; (80a2f48 <HAL_USART_Flush_Data+0xc>)
 80a2f40:	681b      	ldr	r3, [r3, #0]
 80a2f42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a2f44:	9301      	str	r3, [sp, #4]
 80a2f46:	bd08      	pop	{r3, pc}
 80a2f48:	080601c4 	.word	0x080601c4

080a2f4c <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a2f4c:	b508      	push	{r3, lr}
 80a2f4e:	4b02      	ldr	r3, [pc, #8]	; (80a2f58 <HAL_USART_Is_Enabled+0xc>)
 80a2f50:	681b      	ldr	r3, [r3, #0]
 80a2f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a2f54:	9301      	str	r3, [sp, #4]
 80a2f56:	bd08      	pop	{r3, pc}
 80a2f58:	080601c4 	.word	0x080601c4

080a2f5c <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a2f5c:	b508      	push	{r3, lr}
 80a2f5e:	4b02      	ldr	r3, [pc, #8]	; (80a2f68 <HAL_USART_Available_Data_For_Write+0xc>)
 80a2f60:	681b      	ldr	r3, [r3, #0]
 80a2f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a2f64:	9301      	str	r3, [sp, #4]
 80a2f66:	bd08      	pop	{r3, pc}
 80a2f68:	080601c4 	.word	0x080601c4

080a2f6c <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
 80a2f6c:	b508      	push	{r3, lr}
 80a2f6e:	4b02      	ldr	r3, [pc, #8]	; (80a2f78 <HAL_USART_BeginConfig+0xc>)
 80a2f70:	681b      	ldr	r3, [r3, #0]
 80a2f72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a2f74:	9301      	str	r3, [sp, #4]
 80a2f76:	bd08      	pop	{r3, pc}
 80a2f78:	080601c4 	.word	0x080601c4

080a2f7c <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a2f7c:	b508      	push	{r3, lr}
 80a2f7e:	4b02      	ldr	r3, [pc, #8]	; (80a2f88 <HAL_I2C_Write_Data+0xc>)
 80a2f80:	681b      	ldr	r3, [r3, #0]
 80a2f82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a2f84:	9301      	str	r3, [sp, #4]
 80a2f86:	bd08      	pop	{r3, pc}
 80a2f88:	080601ac 	.word	0x080601ac

080a2f8c <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a2f8c:	b508      	push	{r3, lr}
 80a2f8e:	4b02      	ldr	r3, [pc, #8]	; (80a2f98 <HAL_I2C_Available_Data+0xc>)
 80a2f90:	681b      	ldr	r3, [r3, #0]
 80a2f92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a2f94:	9301      	str	r3, [sp, #4]
 80a2f96:	bd08      	pop	{r3, pc}
 80a2f98:	080601ac 	.word	0x080601ac

080a2f9c <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a2f9c:	b508      	push	{r3, lr}
 80a2f9e:	4b02      	ldr	r3, [pc, #8]	; (80a2fa8 <HAL_I2C_Read_Data+0xc>)
 80a2fa0:	681b      	ldr	r3, [r3, #0]
 80a2fa2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a2fa4:	9301      	str	r3, [sp, #4]
 80a2fa6:	bd08      	pop	{r3, pc}
 80a2fa8:	080601ac 	.word	0x080601ac

080a2fac <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a2fac:	b508      	push	{r3, lr}
 80a2fae:	4b02      	ldr	r3, [pc, #8]	; (80a2fb8 <HAL_I2C_Peek_Data+0xc>)
 80a2fb0:	681b      	ldr	r3, [r3, #0]
 80a2fb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a2fb4:	9301      	str	r3, [sp, #4]
 80a2fb6:	bd08      	pop	{r3, pc}
 80a2fb8:	080601ac 	.word	0x080601ac

080a2fbc <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a2fbc:	b508      	push	{r3, lr}
 80a2fbe:	4b02      	ldr	r3, [pc, #8]	; (80a2fc8 <HAL_I2C_Flush_Data+0xc>)
 80a2fc0:	681b      	ldr	r3, [r3, #0]
 80a2fc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a2fc4:	9301      	str	r3, [sp, #4]
 80a2fc6:	bd08      	pop	{r3, pc}
 80a2fc8:	080601ac 	.word	0x080601ac

080a2fcc <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a2fcc:	b508      	push	{r3, lr}
 80a2fce:	4b02      	ldr	r3, [pc, #8]	; (80a2fd8 <HAL_I2C_Is_Enabled+0xc>)
 80a2fd0:	681b      	ldr	r3, [r3, #0]
 80a2fd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a2fd4:	9301      	str	r3, [sp, #4]
 80a2fd6:	bd08      	pop	{r3, pc}
 80a2fd8:	080601ac 	.word	0x080601ac

080a2fdc <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
 80a2fdc:	b508      	push	{r3, lr}
 80a2fde:	4b03      	ldr	r3, [pc, #12]	; (80a2fec <HAL_I2C_Init+0x10>)
 80a2fe0:	681b      	ldr	r3, [r3, #0]
 80a2fe2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a2fe6:	9301      	str	r3, [sp, #4]
 80a2fe8:	bd08      	pop	{r3, pc}
 80a2fea:	0000      	.short	0x0000
 80a2fec:	080601ac 	.word	0x080601ac

080a2ff0 <socket_active_status>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, socket_active_status, uint8_t(sock_handle_t))
 80a2ff0:	b508      	push	{r3, lr}
 80a2ff2:	4b02      	ldr	r3, [pc, #8]	; (80a2ffc <socket_active_status+0xc>)
 80a2ff4:	681b      	ldr	r3, [r3, #0]
 80a2ff6:	681b      	ldr	r3, [r3, #0]
 80a2ff8:	9301      	str	r3, [sp, #4]
 80a2ffa:	bd08      	pop	{r3, pc}
 80a2ffc:	080601bc 	.word	0x080601bc

080a3000 <socket_handle_valid>:
DYNALIB_FN(1, hal_socket, socket_handle_valid, uint8_t(sock_handle_t))
 80a3000:	b508      	push	{r3, lr}
 80a3002:	4b02      	ldr	r3, [pc, #8]	; (80a300c <socket_handle_valid+0xc>)
 80a3004:	681b      	ldr	r3, [r3, #0]
 80a3006:	685b      	ldr	r3, [r3, #4]
 80a3008:	9301      	str	r3, [sp, #4]
 80a300a:	bd08      	pop	{r3, pc}
 80a300c:	080601bc 	.word	0x080601bc

080a3010 <socket_create>:
DYNALIB_FN(2, hal_socket, socket_create, sock_handle_t(uint8_t, uint8_t, uint8_t, uint16_t, network_interface_t))
 80a3010:	b508      	push	{r3, lr}
 80a3012:	4b02      	ldr	r3, [pc, #8]	; (80a301c <socket_create+0xc>)
 80a3014:	681b      	ldr	r3, [r3, #0]
 80a3016:	689b      	ldr	r3, [r3, #8]
 80a3018:	9301      	str	r3, [sp, #4]
 80a301a:	bd08      	pop	{r3, pc}
 80a301c:	080601bc 	.word	0x080601bc

080a3020 <socket_connect>:
DYNALIB_FN(3, hal_socket, socket_connect, int32_t(sock_handle_t, const sockaddr_t*, long))
 80a3020:	b508      	push	{r3, lr}
 80a3022:	4b02      	ldr	r3, [pc, #8]	; (80a302c <socket_connect+0xc>)
 80a3024:	681b      	ldr	r3, [r3, #0]
 80a3026:	68db      	ldr	r3, [r3, #12]
 80a3028:	9301      	str	r3, [sp, #4]
 80a302a:	bd08      	pop	{r3, pc}
 80a302c:	080601bc 	.word	0x080601bc

080a3030 <socket_receive>:
DYNALIB_FN(4, hal_socket, socket_receive, sock_result_t(sock_handle_t, void*, socklen_t, system_tick_t))
 80a3030:	b508      	push	{r3, lr}
 80a3032:	4b02      	ldr	r3, [pc, #8]	; (80a303c <socket_receive+0xc>)
 80a3034:	681b      	ldr	r3, [r3, #0]
 80a3036:	691b      	ldr	r3, [r3, #16]
 80a3038:	9301      	str	r3, [sp, #4]
 80a303a:	bd08      	pop	{r3, pc}
 80a303c:	080601bc 	.word	0x080601bc

080a3040 <socket_close>:
DYNALIB_FN(5, hal_socket, socket_receivefrom, sock_result_t(sock_handle_t, void*, socklen_t, uint32_t, sockaddr_t*, socklen_t*))
DYNALIB_FN(6, hal_socket, socket_send, sock_result_t(sock_handle_t, const void*, socklen_t))
DYNALIB_FN(7, hal_socket, socket_sendto, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, sockaddr_t*, socklen_t))
DYNALIB_FN(8, hal_socket, socket_close, sock_result_t(sock_handle_t))
 80a3040:	b508      	push	{r3, lr}
 80a3042:	4b02      	ldr	r3, [pc, #8]	; (80a304c <socket_close+0xc>)
 80a3044:	681b      	ldr	r3, [r3, #0]
 80a3046:	6a1b      	ldr	r3, [r3, #32]
 80a3048:	9301      	str	r3, [sp, #4]
 80a304a:	bd08      	pop	{r3, pc}
 80a304c:	080601bc 	.word	0x080601bc

080a3050 <socket_handle_invalid>:
DYNALIB_FN(9, hal_socket, socket_reset_blocking_call, sock_result_t(void))
DYNALIB_FN(10, hal_socket, socket_create_tcp_server, sock_result_t(uint16_t, network_interface_t))
DYNALIB_FN(11, hal_socket, socket_accept, sock_result_t(sock_handle_t))
DYNALIB_FN(12, hal_socket, socket_handle_invalid, sock_handle_t(void))
 80a3050:	b508      	push	{r3, lr}
 80a3052:	4b02      	ldr	r3, [pc, #8]	; (80a305c <socket_handle_invalid+0xc>)
 80a3054:	681b      	ldr	r3, [r3, #0]
 80a3056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a3058:	9301      	str	r3, [sp, #4]
 80a305a:	bd08      	pop	{r3, pc}
 80a305c:	080601bc 	.word	0x080601bc

080a3060 <socket_send_ex>:
DYNALIB_FN(13, hal_socket, socket_join_multicast, sock_result_t(const HAL_IPAddress*, network_interface_t, socket_multicast_info_t*))
DYNALIB_FN(14, hal_socket, socket_leave_multicast, sock_result_t(const HAL_IPAddress*, network_interface_t, socket_multicast_info_t*))
DYNALIB_FN(15, hal_socket, socket_peer, sock_result_t(sock_handle_t, sock_peer_t*, void*))
DYNALIB_FN(16, hal_socket, socket_shutdown, sock_result_t(sock_handle_t, int))
DYNALIB_FN(17, hal_socket, socket_send_ex, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, system_tick_t, void*))
 80a3060:	b508      	push	{r3, lr}
 80a3062:	4b02      	ldr	r3, [pc, #8]	; (80a306c <socket_send_ex+0xc>)
 80a3064:	681b      	ldr	r3, [r3, #0]
 80a3066:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a3068:	9301      	str	r3, [sp, #4]
 80a306a:	bd08      	pop	{r3, pc}
 80a306c:	080601bc 	.word	0x080601bc

080a3070 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a3070:	b508      	push	{r3, lr}
 80a3072:	4b02      	ldr	r3, [pc, #8]	; (80a307c <HAL_USB_USART_Init+0xc>)
 80a3074:	681b      	ldr	r3, [r3, #0]
 80a3076:	681b      	ldr	r3, [r3, #0]
 80a3078:	9301      	str	r3, [sp, #4]
 80a307a:	bd08      	pop	{r3, pc}
 80a307c:	080601d8 	.word	0x080601d8

080a3080 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a3080:	b508      	push	{r3, lr}
 80a3082:	4b02      	ldr	r3, [pc, #8]	; (80a308c <HAL_USB_USART_Begin+0xc>)
 80a3084:	681b      	ldr	r3, [r3, #0]
 80a3086:	685b      	ldr	r3, [r3, #4]
 80a3088:	9301      	str	r3, [sp, #4]
 80a308a:	bd08      	pop	{r3, pc}
 80a308c:	080601d8 	.word	0x080601d8

080a3090 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a3090:	b508      	push	{r3, lr}
 80a3092:	4b02      	ldr	r3, [pc, #8]	; (80a309c <HAL_USB_USART_Available_Data+0xc>)
 80a3094:	681b      	ldr	r3, [r3, #0]
 80a3096:	691b      	ldr	r3, [r3, #16]
 80a3098:	9301      	str	r3, [sp, #4]
 80a309a:	bd08      	pop	{r3, pc}
 80a309c:	080601d8 	.word	0x080601d8

080a30a0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a30a0:	b508      	push	{r3, lr}
 80a30a2:	4b02      	ldr	r3, [pc, #8]	; (80a30ac <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a30a4:	681b      	ldr	r3, [r3, #0]
 80a30a6:	695b      	ldr	r3, [r3, #20]
 80a30a8:	9301      	str	r3, [sp, #4]
 80a30aa:	bd08      	pop	{r3, pc}
 80a30ac:	080601d8 	.word	0x080601d8

080a30b0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a30b0:	b508      	push	{r3, lr}
 80a30b2:	4b02      	ldr	r3, [pc, #8]	; (80a30bc <HAL_USB_USART_Receive_Data+0xc>)
 80a30b4:	681b      	ldr	r3, [r3, #0]
 80a30b6:	699b      	ldr	r3, [r3, #24]
 80a30b8:	9301      	str	r3, [sp, #4]
 80a30ba:	bd08      	pop	{r3, pc}
 80a30bc:	080601d8 	.word	0x080601d8

080a30c0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a30c0:	b508      	push	{r3, lr}
 80a30c2:	4b02      	ldr	r3, [pc, #8]	; (80a30cc <HAL_USB_USART_Send_Data+0xc>)
 80a30c4:	681b      	ldr	r3, [r3, #0]
 80a30c6:	69db      	ldr	r3, [r3, #28]
 80a30c8:	9301      	str	r3, [sp, #4]
 80a30ca:	bd08      	pop	{r3, pc}
 80a30cc:	080601d8 	.word	0x080601d8

080a30d0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a30d0:	b508      	push	{r3, lr}
 80a30d2:	4b02      	ldr	r3, [pc, #8]	; (80a30dc <HAL_USB_USART_Flush_Data+0xc>)
 80a30d4:	681b      	ldr	r3, [r3, #0]
 80a30d6:	6a1b      	ldr	r3, [r3, #32]
 80a30d8:	9301      	str	r3, [sp, #4]
 80a30da:	bd08      	pop	{r3, pc}
 80a30dc:	080601d8 	.word	0x080601d8

080a30e0 <HAL_NET_SetNetWatchDog>:

DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
 80a30e0:	b508      	push	{r3, lr}
 80a30e2:	4b02      	ldr	r3, [pc, #8]	; (80a30ec <HAL_NET_SetNetWatchDog+0xc>)
 80a30e4:	681b      	ldr	r3, [r3, #0]
 80a30e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a30e8:	9301      	str	r3, [sp, #4]
 80a30ea:	bd08      	pop	{r3, pc}
 80a30ec:	080601c0 	.word	0x080601c0

080a30f0 <inet_gethostbyname>:
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a30f0:	b508      	push	{r3, lr}
 80a30f2:	4b02      	ldr	r3, [pc, #8]	; (80a30fc <inet_gethostbyname+0xc>)
 80a30f4:	681b      	ldr	r3, [r3, #0]
 80a30f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a30f8:	9301      	str	r3, [sp, #4]
 80a30fa:	bd08      	pop	{r3, pc}
 80a30fc:	080601c0 	.word	0x080601c0

080a3100 <wlan_select_antenna>:
DYNALIB_FN(19, hal_wlan, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(20, hal_wlan, wlan_select_antenna, int(WLanSelectAntenna_TypeDef))
 80a3100:	b508      	push	{r3, lr}
 80a3102:	4b02      	ldr	r3, [pc, #8]	; (80a310c <wlan_select_antenna+0xc>)
 80a3104:	681b      	ldr	r3, [r3, #0]
 80a3106:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80a3108:	9301      	str	r3, [sp, #4]
 80a310a:	bd08      	pop	{r3, pc}
 80a310c:	080601c0 	.word	0x080601c0

080a3110 <wlan_connected_info>:
DYNALIB_FN(24, hal_wlan, wlan_get_credentials, int(wlan_scan_result_t, void*))
DYNALIB_FN(25, hal_wlan, softap_set_application_page_handler, int(PageProvider* provider, void* reserved))
DYNALIB_FN(26, hal_wlan, wlan_restart, int(void*))
DYNALIB_FN(27, hal_wlan, wlan_set_hostname, int(const char*, void*))
DYNALIB_FN(28, hal_wlan, wlan_get_hostname, int(char*, size_t, void*))
DYNALIB_FN(29, hal_wlan, wlan_connected_info, int(void*, wlan_connected_info_t*, void*))
 80a3110:	b508      	push	{r3, lr}
 80a3112:	4b02      	ldr	r3, [pc, #8]	; (80a311c <wlan_connected_info+0xc>)
 80a3114:	681b      	ldr	r3, [r3, #0]
 80a3116:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a3118:	9301      	str	r3, [sp, #4]
 80a311a:	bd08      	pop	{r3, pc}
 80a311c:	080601c0 	.word	0x080601c0

080a3120 <LED_Signaling_Start>:

DYNALIB_BEGIN(services)

DYNALIB_FN(0, services, LED_SetRGBColor, void(uint32_t))
DYNALIB_FN(1, services, LED_SetSignalingColor, void(uint32_t))
DYNALIB_FN(2, services, LED_Signaling_Start, void(void))
 80a3120:	b508      	push	{r3, lr}
 80a3122:	4b02      	ldr	r3, [pc, #8]	; (80a312c <LED_Signaling_Start+0xc>)
 80a3124:	681b      	ldr	r3, [r3, #0]
 80a3126:	689b      	ldr	r3, [r3, #8]
 80a3128:	9301      	str	r3, [sp, #4]
 80a312a:	bd08      	pop	{r3, pc}
 80a312c:	080201a8 	.word	0x080201a8

080a3130 <LED_Signaling_Stop>:
DYNALIB_FN(3, services, LED_Signaling_Stop, void(void))
 80a3130:	b508      	push	{r3, lr}
 80a3132:	4b02      	ldr	r3, [pc, #8]	; (80a313c <LED_Signaling_Stop+0xc>)
 80a3134:	681b      	ldr	r3, [r3, #0]
 80a3136:	68db      	ldr	r3, [r3, #12]
 80a3138:	9301      	str	r3, [sp, #4]
 80a313a:	bd08      	pop	{r3, pc}
 80a313c:	080201a8 	.word	0x080201a8

080a3140 <LED_RGB_IsOverRidden>:
DYNALIB_FN(4, services, LED_SetBrightness, void(uint8_t))
DYNALIB_FN(5, services, LED_RGB_Get, void(uint8_t*))
DYNALIB_FN(6, services, LED_RGB_IsOverRidden, bool(void))
 80a3140:	b508      	push	{r3, lr}
 80a3142:	4b02      	ldr	r3, [pc, #8]	; (80a314c <LED_RGB_IsOverRidden+0xc>)
 80a3144:	681b      	ldr	r3, [r3, #0]
 80a3146:	699b      	ldr	r3, [r3, #24]
 80a3148:	9301      	str	r3, [sp, #4]
 80a314a:	bd08      	pop	{r3, pc}
 80a314c:	080201a8 	.word	0x080201a8

080a3150 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
 80a3150:	b508      	push	{r3, lr}
 80a3152:	4b02      	ldr	r3, [pc, #8]	; (80a315c <log_message+0xc>)
 80a3154:	681b      	ldr	r3, [r3, #0]
 80a3156:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80a3158:	9301      	str	r3, [sp, #4]
 80a315a:	bd08      	pop	{r3, pc}
 80a315c:	080201a8 	.word	0x080201a8

080a3160 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 80a3160:	b508      	push	{r3, lr}
 80a3162:	4b02      	ldr	r3, [pc, #8]	; (80a316c <system_mode+0xc>)
 80a3164:	681b      	ldr	r3, [r3, #0]
 80a3166:	681b      	ldr	r3, [r3, #0]
 80a3168:	9301      	str	r3, [sp, #4]
 80a316a:	bd08      	pop	{r3, pc}
 80a316c:	080601a4 	.word	0x080601a4

080a3170 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a3170:	b508      	push	{r3, lr}
 80a3172:	4b02      	ldr	r3, [pc, #8]	; (80a317c <set_system_mode+0xc>)
 80a3174:	681b      	ldr	r3, [r3, #0]
 80a3176:	685b      	ldr	r3, [r3, #4]
 80a3178:	9301      	str	r3, [sp, #4]
 80a317a:	bd08      	pop	{r3, pc}
 80a317c:	080601a4 	.word	0x080601a4

080a3180 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a3180:	b508      	push	{r3, lr}
 80a3182:	4b02      	ldr	r3, [pc, #8]	; (80a318c <system_delay_ms+0xc>)
 80a3184:	681b      	ldr	r3, [r3, #0]
 80a3186:	695b      	ldr	r3, [r3, #20]
 80a3188:	9301      	str	r3, [sp, #4]
 80a318a:	bd08      	pop	{r3, pc}
 80a318c:	080601a4 	.word	0x080601a4

080a3190 <system_thread_get_state>:
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 80a3190:	b508      	push	{r3, lr}
 80a3192:	4b02      	ldr	r3, [pc, #8]	; (80a319c <system_thread_get_state+0xc>)
 80a3194:	681b      	ldr	r3, [r3, #0]
 80a3196:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a3198:	9301      	str	r3, [sp, #4]
 80a319a:	bd08      	pop	{r3, pc}
 80a319c:	080601a4 	.word	0x080601a4

080a31a0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a31a0:	b508      	push	{r3, lr}
 80a31a2:	4b03      	ldr	r3, [pc, #12]	; (80a31b0 <system_ctrl_set_app_request_handler+0x10>)
 80a31a4:	681b      	ldr	r3, [r3, #0]
 80a31a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a31aa:	9301      	str	r3, [sp, #4]
 80a31ac:	bd08      	pop	{r3, pc}
 80a31ae:	0000      	.short	0x0000
 80a31b0:	080601a4 	.word	0x080601a4

080a31b4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a31b4:	b508      	push	{r3, lr}
 80a31b6:	4b03      	ldr	r3, [pc, #12]	; (80a31c4 <system_ctrl_set_result+0x10>)
 80a31b8:	681b      	ldr	r3, [r3, #0]
 80a31ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a31be:	9301      	str	r3, [sp, #4]
 80a31c0:	bd08      	pop	{r3, pc}
 80a31c2:	0000      	.short	0x0000
 80a31c4:	080601a4 	.word	0x080601a4

080a31c8 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a31c8:	b508      	push	{r3, lr}
 80a31ca:	4b02      	ldr	r3, [pc, #8]	; (80a31d4 <network_connect+0xc>)
 80a31cc:	681b      	ldr	r3, [r3, #0]
 80a31ce:	685b      	ldr	r3, [r3, #4]
 80a31d0:	9301      	str	r3, [sp, #4]
 80a31d2:	bd08      	pop	{r3, pc}
 80a31d4:	080601c8 	.word	0x080601c8

080a31d8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a31d8:	b508      	push	{r3, lr}
 80a31da:	4b02      	ldr	r3, [pc, #8]	; (80a31e4 <network_connecting+0xc>)
 80a31dc:	681b      	ldr	r3, [r3, #0]
 80a31de:	689b      	ldr	r3, [r3, #8]
 80a31e0:	9301      	str	r3, [sp, #4]
 80a31e2:	bd08      	pop	{r3, pc}
 80a31e4:	080601c8 	.word	0x080601c8

080a31e8 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a31e8:	b508      	push	{r3, lr}
 80a31ea:	4b02      	ldr	r3, [pc, #8]	; (80a31f4 <network_disconnect+0xc>)
 80a31ec:	681b      	ldr	r3, [r3, #0]
 80a31ee:	68db      	ldr	r3, [r3, #12]
 80a31f0:	9301      	str	r3, [sp, #4]
 80a31f2:	bd08      	pop	{r3, pc}
 80a31f4:	080601c8 	.word	0x080601c8

080a31f8 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a31f8:	b508      	push	{r3, lr}
 80a31fa:	4b02      	ldr	r3, [pc, #8]	; (80a3204 <network_ready+0xc>)
 80a31fc:	681b      	ldr	r3, [r3, #0]
 80a31fe:	691b      	ldr	r3, [r3, #16]
 80a3200:	9301      	str	r3, [sp, #4]
 80a3202:	bd08      	pop	{r3, pc}
 80a3204:	080601c8 	.word	0x080601c8

080a3208 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a3208:	b508      	push	{r3, lr}
 80a320a:	4b02      	ldr	r3, [pc, #8]	; (80a3214 <network_on+0xc>)
 80a320c:	681b      	ldr	r3, [r3, #0]
 80a320e:	695b      	ldr	r3, [r3, #20]
 80a3210:	9301      	str	r3, [sp, #4]
 80a3212:	bd08      	pop	{r3, pc}
 80a3214:	080601c8 	.word	0x080601c8

080a3218 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a3218:	b508      	push	{r3, lr}
 80a321a:	4b02      	ldr	r3, [pc, #8]	; (80a3224 <network_off+0xc>)
 80a321c:	681b      	ldr	r3, [r3, #0]
 80a321e:	699b      	ldr	r3, [r3, #24]
 80a3220:	9301      	str	r3, [sp, #4]
 80a3222:	bd08      	pop	{r3, pc}
 80a3224:	080601c8 	.word	0x080601c8

080a3228 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a3228:	b508      	push	{r3, lr}
 80a322a:	4b02      	ldr	r3, [pc, #8]	; (80a3234 <network_listen+0xc>)
 80a322c:	681b      	ldr	r3, [r3, #0]
 80a322e:	69db      	ldr	r3, [r3, #28]
 80a3230:	9301      	str	r3, [sp, #4]
 80a3232:	bd08      	pop	{r3, pc}
 80a3234:	080601c8 	.word	0x080601c8

080a3238 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a3238:	b508      	push	{r3, lr}
 80a323a:	4b02      	ldr	r3, [pc, #8]	; (80a3244 <network_listening+0xc>)
 80a323c:	681b      	ldr	r3, [r3, #0]
 80a323e:	6a1b      	ldr	r3, [r3, #32]
 80a3240:	9301      	str	r3, [sp, #4]
 80a3242:	bd08      	pop	{r3, pc}
 80a3244:	080601c8 	.word	0x080601c8

080a3248 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a3248:	b508      	push	{r3, lr}
 80a324a:	4b02      	ldr	r3, [pc, #8]	; (80a3254 <network_set_listen_timeout+0xc>)
 80a324c:	681b      	ldr	r3, [r3, #0]
 80a324e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a3250:	9301      	str	r3, [sp, #4]
 80a3252:	bd08      	pop	{r3, pc}
 80a3254:	080601c8 	.word	0x080601c8

080a3258 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a3258:	b508      	push	{r3, lr}
 80a325a:	4b02      	ldr	r3, [pc, #8]	; (80a3264 <network_get_listen_timeout+0xc>)
 80a325c:	681b      	ldr	r3, [r3, #0]
 80a325e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a3260:	9301      	str	r3, [sp, #4]
 80a3262:	bd08      	pop	{r3, pc}
 80a3264:	080601c8 	.word	0x080601c8

080a3268 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
 80a3268:	b508      	push	{r3, lr}
 80a326a:	4b02      	ldr	r3, [pc, #8]	; (80a3274 <spark_variable+0xc>)
 80a326c:	681b      	ldr	r3, [r3, #0]
 80a326e:	681b      	ldr	r3, [r3, #0]
 80a3270:	9301      	str	r3, [sp, #4]
 80a3272:	bd08      	pop	{r3, pc}
 80a3274:	080601cc 	.word	0x080601cc

080a3278 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
 80a3278:	b508      	push	{r3, lr}
 80a327a:	4b02      	ldr	r3, [pc, #8]	; (80a3284 <spark_function+0xc>)
 80a327c:	681b      	ldr	r3, [r3, #0]
 80a327e:	685b      	ldr	r3, [r3, #4]
 80a3280:	9301      	str	r3, [sp, #4]
 80a3282:	bd08      	pop	{r3, pc}
 80a3284:	080601cc 	.word	0x080601cc

080a3288 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 80a3288:	b508      	push	{r3, lr}
 80a328a:	4b02      	ldr	r3, [pc, #8]	; (80a3294 <spark_process+0xc>)
 80a328c:	681b      	ldr	r3, [r3, #0]
 80a328e:	689b      	ldr	r3, [r3, #8]
 80a3290:	9301      	str	r3, [sp, #4]
 80a3292:	bd08      	pop	{r3, pc}
 80a3294:	080601cc 	.word	0x080601cc

080a3298 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
 80a3298:	b508      	push	{r3, lr}
 80a329a:	4b02      	ldr	r3, [pc, #8]	; (80a32a4 <spark_cloud_flag_connect+0xc>)
 80a329c:	681b      	ldr	r3, [r3, #0]
 80a329e:	68db      	ldr	r3, [r3, #12]
 80a32a0:	9301      	str	r3, [sp, #4]
 80a32a2:	bd08      	pop	{r3, pc}
 80a32a4:	080601cc 	.word	0x080601cc

080a32a8 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 80a32a8:	b508      	push	{r3, lr}
 80a32aa:	4b02      	ldr	r3, [pc, #8]	; (80a32b4 <spark_cloud_flag_connected+0xc>)
 80a32ac:	681b      	ldr	r3, [r3, #0]
 80a32ae:	695b      	ldr	r3, [r3, #20]
 80a32b0:	9301      	str	r3, [sp, #4]
 80a32b2:	bd08      	pop	{r3, pc}
 80a32b4:	080601cc 	.word	0x080601cc

080a32b8 <spark_sync_time_pending>:
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 80a32b8:	b508      	push	{r3, lr}
 80a32ba:	4b02      	ldr	r3, [pc, #8]	; (80a32c4 <spark_sync_time_pending+0xc>)
 80a32bc:	681b      	ldr	r3, [r3, #0]
 80a32be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a32c0:	9301      	str	r3, [sp, #4]
 80a32c2:	bd08      	pop	{r3, pc}
 80a32c4:	080601cc 	.word	0x080601cc

080a32c8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a32c8:	b508      	push	{r3, lr}
 80a32ca:	4b02      	ldr	r3, [pc, #8]	; (80a32d4 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a32cc:	681b      	ldr	r3, [r3, #0]
 80a32ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a32d0:	9301      	str	r3, [sp, #4]
 80a32d2:	bd08      	pop	{r3, pc}
 80a32d4:	080601cc 	.word	0x080601cc

080a32d8 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a32d8:	b508      	push	{r3, lr}
 80a32da:	4b02      	ldr	r3, [pc, #8]	; (80a32e4 <malloc+0xc>)
 80a32dc:	681b      	ldr	r3, [r3, #0]
 80a32de:	681b      	ldr	r3, [r3, #0]
 80a32e0:	9301      	str	r3, [sp, #4]
 80a32e2:	bd08      	pop	{r3, pc}
 80a32e4:	080601a0 	.word	0x080601a0

080a32e8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a32e8:	b508      	push	{r3, lr}
 80a32ea:	4b02      	ldr	r3, [pc, #8]	; (80a32f4 <free+0xc>)
 80a32ec:	681b      	ldr	r3, [r3, #0]
 80a32ee:	685b      	ldr	r3, [r3, #4]
 80a32f0:	9301      	str	r3, [sp, #4]
 80a32f2:	bd08      	pop	{r3, pc}
 80a32f4:	080601a0 	.word	0x080601a0

080a32f8 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a32f8:	b508      	push	{r3, lr}
 80a32fa:	4b02      	ldr	r3, [pc, #8]	; (80a3304 <realloc+0xc>)
 80a32fc:	681b      	ldr	r3, [r3, #0]
 80a32fe:	689b      	ldr	r3, [r3, #8]
 80a3300:	9301      	str	r3, [sp, #4]
 80a3302:	bd08      	pop	{r3, pc}
 80a3304:	080601a0 	.word	0x080601a0

080a3308 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
 80a3308:	b508      	push	{r3, lr}
 80a330a:	4b02      	ldr	r3, [pc, #8]	; (80a3314 <siprintf+0xc>)
 80a330c:	681b      	ldr	r3, [r3, #0]
 80a330e:	691b      	ldr	r3, [r3, #16]
 80a3310:	9301      	str	r3, [sp, #4]
 80a3312:	bd08      	pop	{r3, pc}
 80a3314:	080601a0 	.word	0x080601a0

080a3318 <siscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
 80a3318:	b508      	push	{r3, lr}
 80a331a:	4b02      	ldr	r3, [pc, #8]	; (80a3324 <siscanf+0xc>)
 80a331c:	681b      	ldr	r3, [r3, #0]
 80a331e:	699b      	ldr	r3, [r3, #24]
 80a3320:	9301      	str	r3, [sp, #4]
 80a3322:	bd08      	pop	{r3, pc}
 80a3324:	080601a0 	.word	0x080601a0

080a3328 <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
 80a3328:	b508      	push	{r3, lr}
 80a332a:	4b02      	ldr	r3, [pc, #8]	; (80a3334 <snprintf+0xc>)
 80a332c:	681b      	ldr	r3, [r3, #0]
 80a332e:	69db      	ldr	r3, [r3, #28]
 80a3330:	9301      	str	r3, [sp, #4]
 80a3332:	bd08      	pop	{r3, pc}
 80a3334:	080601a0 	.word	0x080601a0

080a3338 <sniprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
 80a3338:	b508      	push	{r3, lr}
 80a333a:	4b02      	ldr	r3, [pc, #8]	; (80a3344 <sniprintf+0xc>)
 80a333c:	681b      	ldr	r3, [r3, #0]
 80a333e:	6a1b      	ldr	r3, [r3, #32]
 80a3340:	9301      	str	r3, [sp, #4]
 80a3342:	bd08      	pop	{r3, pc}
 80a3344:	080601a0 	.word	0x080601a0

080a3348 <vsnprintf>:
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 80a3348:	b508      	push	{r3, lr}
 80a334a:	4b02      	ldr	r3, [pc, #8]	; (80a3354 <vsnprintf+0xc>)
 80a334c:	681b      	ldr	r3, [r3, #0]
 80a334e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a3350:	9301      	str	r3, [sp, #4]
 80a3352:	bd08      	pop	{r3, pc}
 80a3354:	080601a0 	.word	0x080601a0

080a3358 <_malloc_r>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80a3358:	b508      	push	{r3, lr}
 80a335a:	4b02      	ldr	r3, [pc, #8]	; (80a3364 <_malloc_r+0xc>)
 80a335c:	681b      	ldr	r3, [r3, #0]
 80a335e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a3360:	9301      	str	r3, [sp, #4]
 80a3362:	bd08      	pop	{r3, pc}
 80a3364:	080601a0 	.word	0x080601a0

080a3368 <_ZN14RecursiveMutex4lockEv>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
 80a3368:	6800      	ldr	r0, [r0, #0]
 80a336a:	f7ff bdaf 	b.w	80a2ecc <os_mutex_recursive_lock>

080a336e <_ZN14RecursiveMutex6unlockEv>:
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
 80a336e:	6800      	ldr	r0, [r0, #0]
 80a3370:	f7ff bdb4 	b.w	80a2edc <os_mutex_recursive_unlock>

080a3374 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a3374:	b570      	push	{r4, r5, r6, lr}
 80a3376:	4604      	mov	r4, r0
 80a3378:	460e      	mov	r6, r1
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 80a337a:	2500      	movs	r5, #0
 80a337c:	f840 5f08 	str.w	r5, [r0, #8]!
    {
        os_mutex_recursive_create(&handle_);
 80a3380:	f7ff fd94 	bl	80a2eac <os_mutex_recursive_create>
{
    _spi = spi;
    HAL_SPI_Init(_spi);
 80a3384:	4630      	mov	r0, r6
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
    _spi = spi;
 80a3386:	7026      	strb	r6, [r4, #0]
    HAL_SPI_Init(_spi);
 80a3388:	f7ff fd58 	bl	80a2e3c <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80a338c:	6065      	str	r5, [r4, #4]
}
 80a338e:	4620      	mov	r0, r4
 80a3390:	bd70      	pop	{r4, r5, r6, pc}

080a3392 <_ZN8SPIClass5beginEt>:
        unlock();
    }
}

void SPIClass::begin(uint16_t ss_pin)
{
 80a3392:	b570      	push	{r4, r5, r6, lr}
 80a3394:	4605      	mov	r5, r0
 80a3396:	460e      	mov	r6, r1
  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
#elif PLATFORM_THREADING
    _mutex.lock();
 80a3398:	f100 0408 	add.w	r4, r0, #8
 80a339c:	4620      	mov	r0, r4
 80a339e:	f7ff ffe3 	bl	80a3368 <_ZN14RecursiveMutex4lockEv>
    if (!lock())
    {
        HAL_SPI_Begin(_spi, ss_pin);
 80a33a2:	7828      	ldrb	r0, [r5, #0]
 80a33a4:	4631      	mov	r1, r6
 80a33a6:	f7ff fd39 	bl	80a2e1c <HAL_SPI_Begin>
  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
#elif PLATFORM_THREADING
    _mutex.unlock();
 80a33aa:	4620      	mov	r0, r4
 80a33ac:	f7ff ffdf 	bl	80a336e <_ZN14RecursiveMutex6unlockEv>
 80a33b0:	bd70      	pop	{r4, r5, r6, pc}

080a33b2 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
 80a33b2:	b508      	push	{r3, lr}
    return static_cast<byte>(HAL_SPI_Send_Receive_Data(_spi, _data));
 80a33b4:	7800      	ldrb	r0, [r0, #0]
 80a33b6:	f7ff fd39 	bl	80a2e2c <HAL_SPI_Send_Receive_Data>
}
 80a33ba:	b2c0      	uxtb	r0, r0
 80a33bc:	bd08      	pop	{r3, pc}

080a33be <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
 80a33be:	7800      	ldrb	r0, [r0, #0]
 80a33c0:	f7ff bd44 	b.w	80a2e4c <HAL_SPI_Is_Enabled>

080a33c4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
 80a33c4:	b510      	push	{r4, lr}
 80a33c6:	4604      	mov	r4, r0
        if (wakeupSource_) {
 80a33c8:	6800      	ldr	r0, [r0, #0]
 80a33ca:	b118      	cbz	r0, 80a33d4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
 80a33cc:	f7ff ff8c 	bl	80a32e8 <free>
            wakeupSource_ = nullptr;
 80a33d0:	2300      	movs	r3, #0
 80a33d2:	6023      	str	r3, [r4, #0]
 80a33d4:	bd10      	pop	{r4, pc}

080a33d6 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80a33d6:	b510      	push	{r4, lr}
 80a33d8:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
 80a33da:	f7ff fff3 	bl	80a33c4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80a33de:	4620      	mov	r0, r4
 80a33e0:	bd10      	pop	{r4, pc}

080a33e2 <_ZN11SystemClass5resetEm>:
    reset(0);
}

void SystemClass::reset(uint32_t data)
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
 80a33e2:	4601      	mov	r1, r0
 80a33e4:	2200      	movs	r2, #0
 80a33e6:	208c      	movs	r0, #140	; 0x8c
 80a33e8:	f7ff bd58 	b.w	80a2e9c <HAL_Core_System_Reset_Ex>

080a33ec <_ZN11SystemClass5resetEv>:
    HAL_Core_Enter_Bootloader(persist);
}

void SystemClass::reset(void)
{
    reset(0);
 80a33ec:	2000      	movs	r0, #0
 80a33ee:	f7ff bff8 	b.w	80a33e2 <_ZN11SystemClass5resetEm>
	...

080a33f4 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 80a33f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80a33f8:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 80a33fa:	4c08      	ldr	r4, [pc, #32]	; (80a341c <_GLOBAL__sub_I_System+0x28>)
 80a33fc:	2000      	movs	r0, #0
 80a33fe:	6020      	str	r0, [r4, #0]
 80a3400:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 80a3402:	71a0      	strb	r0, [r4, #6]
 80a3404:	8120      	strh	r0, [r4, #8]
 80a3406:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a3408:	f7ff feb2 	bl	80a3170 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
 80a340c:	4620      	mov	r0, r4
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80a340e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
 80a3412:	4a03      	ldr	r2, [pc, #12]	; (80a3420 <_GLOBAL__sub_I_System+0x2c>)
 80a3414:	4903      	ldr	r1, [pc, #12]	; (80a3424 <_GLOBAL__sub_I_System+0x30>)
 80a3416:	f001 bcb5 	b.w	80a4d84 <__aeabi_atexit>
 80a341a:	bf00      	nop
 80a341c:	20000500 	.word	0x20000500
 80a3420:	200000fc 	.word	0x200000fc
 80a3424:	080a33d7 	.word	0x080a33d7

080a3428 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
 80a3428:	b510      	push	{r4, lr}
 80a342a:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
 80a342c:	f003 fe72 	bl	80a7114 <strlen>
 80a3430:	3801      	subs	r0, #1
 80a3432:	1823      	adds	r3, r4, r0
 80a3434:	4620      	mov	r0, r4
	while(i<j){
 80a3436:	4298      	cmp	r0, r3
 80a3438:	d206      	bcs.n	80a3448 <_Z11str_reversePc+0x20>
		c = *i;
 80a343a:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
 80a343c:	7819      	ldrb	r1, [r3, #0]
 80a343e:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
 80a3442:	f803 2901 	strb.w	r2, [r3], #-1
__attribute__((weak)) void str_reverse(char* buffer){
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
	while(i<j){
 80a3446:	e7f6      	b.n	80a3436 <_Z11str_reversePc+0xe>
 80a3448:	bd10      	pop	{r4, pc}

080a344a <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
 80a344a:	b570      	push	{r4, r5, r6, lr}
 80a344c:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
 80a344e:	1e91      	subs	r1, r2, #2
 80a3450:	2922      	cmp	r1, #34	; 0x22
 80a3452:	d820      	bhi.n	80a3496 <ultoa+0x4c>
 80a3454:	4625      	mov	r5, r4
 80a3456:	4629      	mov	r1, r5
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
 80a3458:	b910      	cbnz	r0, 80a3460 <ultoa+0x16>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 80a345a:	4423      	add	r3, r4
            *ptr++ = '0';
 80a345c:	2230      	movs	r2, #48	; 0x30
 80a345e:	e00e      	b.n	80a347e <ultoa+0x34>
	div_t result;
	while(a){
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
 80a3460:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
 80a3464:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
 80a3468:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
 80a346a:	2809      	cmp	r0, #9
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
            result.rem = a%radix;
            *ptr = result.rem;
 80a346c:	f805 1b01 	strb.w	r1, [r5], #1
            if(result.rem<10){
                *ptr += '0';
 80a3470:	bf94      	ite	ls
 80a3472:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
 80a3474:	3157      	addhi	r1, #87	; 0x57
 80a3476:	f805 1c01 	strb.w	r1, [r5, #-1]
            }
            ++ptr;
            a = result.quot;
 80a347a:	4630      	mov	r0, r6
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
 80a347c:	e7eb      	b.n	80a3456 <ultoa+0xc>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 80a347e:	4299      	cmp	r1, r3
 80a3480:	d202      	bcs.n	80a3488 <ultoa+0x3e>
            *ptr++ = '0';
 80a3482:	f801 2b01 	strb.w	r2, [r1], #1
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 80a3486:	e7fa      	b.n	80a347e <ultoa+0x34>
            *ptr++ = '0';

	*ptr = '\0';
 80a3488:	2300      	movs	r3, #0
	str_reverse(buffer);
 80a348a:	4620      	mov	r0, r4
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';

	*ptr = '\0';
 80a348c:	700b      	strb	r3, [r1, #0]
	str_reverse(buffer);
 80a348e:	f7ff ffcb 	bl	80a3428 <_Z11str_reversePc>
	return buffer;
 80a3492:	4620      	mov	r0, r4
 80a3494:	bd70      	pop	{r4, r5, r6, pc}
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
	if(radix<2 || radix>36){
		return NULL;
 80a3496:	2000      	movs	r0, #0
            *ptr++ = '0';

	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}
 80a3498:	bd70      	pop	{r4, r5, r6, pc}

080a349a <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 80a349a:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
 80a349c:	1e03      	subs	r3, r0, #0
	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 80a349e:	460c      	mov	r4, r1
 80a34a0:	4615      	mov	r5, r2
	if(a<0){
 80a34a2:	da0b      	bge.n	80a34bc <itoa+0x22>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
 80a34a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
 80a34a8:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
 80a34ac:	bf14      	ite	ne
 80a34ae:	4258      	negne	r0, r3
 80a34b0:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
 80a34b2:	2301      	movs	r3, #1
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
 80a34b4:	700a      	strb	r2, [r1, #0]
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
		ultoa((unsigned)v, buffer + 1, radix);
 80a34b6:	462a      	mov	r2, r5
 80a34b8:	4419      	add	r1, r3
 80a34ba:	e000      	b.n	80a34be <itoa+0x24>
	}else{
		ultoa(a, buffer, radix);
 80a34bc:	2301      	movs	r3, #1
 80a34be:	f7ff ffc4 	bl	80a344a <ultoa>
	}
	return buffer;
}
 80a34c2:	4620      	mov	r0, r4
 80a34c4:	bd38      	pop	{r3, r4, r5, pc}

080a34c6 <utoa>:

__attribute__((weak)) char* utoa(unsigned a, char* buffer, int radix) {
 80a34c6:	b508      	push	{r3, lr}
    return ultoa(a, buffer, radix);
 80a34c8:	2301      	movs	r3, #1
 80a34ca:	f7ff ffbe 	bl	80a344a <ultoa>
}
 80a34ce:	bd08      	pop	{r3, pc}

080a34d0 <_ZN9TCPClient5writeEh>:
        }
        return connected;
}

size_t TCPClient::write(uint8_t b)
{
 80a34d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a34d2:	ac02      	add	r4, sp, #8
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a34d4:	6803      	ldr	r3, [r0, #0]
        }
        return connected;
}

size_t TCPClient::write(uint8_t b)
{
 80a34d6:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a34da:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 80a34dc:	2201      	movs	r2, #1
 80a34de:	f247 5330 	movw	r3, #30000	; 0x7530
 80a34e2:	4621      	mov	r1, r4
 80a34e4:	47a8      	blx	r5
}
 80a34e6:	b003      	add	sp, #12
 80a34e8:	bd30      	pop	{r4, r5, pc}

080a34ea <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size)
{
 80a34ea:	b410      	push	{r4}
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a34ec:	6803      	ldr	r3, [r0, #0]
 80a34ee:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80a34f0:	f247 5330 	movw	r3, #30000	; 0x7530
 80a34f4:	46a4      	mov	ip, r4
}
 80a34f6:	bc10      	pop	{r4}
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size)
{
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a34f8:	4760      	bx	ip

080a34fa <_ZN9TCPClient5writeEhm>:
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout)
{
 80a34fa:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a34fc:	ac02      	add	r4, sp, #8
    return write(&b, 1, timeout);
 80a34fe:	6803      	ldr	r3, [r0, #0]
{
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout)
{
 80a3500:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, timeout);
 80a3504:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 80a3506:	4621      	mov	r1, r4
 80a3508:	4613      	mov	r3, r2
 80a350a:	2201      	movs	r2, #1
 80a350c:	47a8      	blx	r5
}
 80a350e:	b003      	add	sp, #12
 80a3510:	bd30      	pop	{r4, r5, pc}

080a3512 <_ZN9TCPClient5flushEv>:
  d_->offset = 0;
  d_->total = 0;
}

void TCPClient::flush()
{
 80a3512:	4770      	bx	lr

080a3514 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
 80a3514:	4770      	bx	lr

080a3516 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
 80a3516:	2000      	movs	r0, #0
 80a3518:	4770      	bx	lr

080a351a <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
 80a351a:	b510      	push	{r4, lr}
 80a351c:	4604      	mov	r4, r0
 80a351e:	2114      	movs	r1, #20
 80a3520:	f001 fc3e 	bl	80a4da0 <_ZdlPvj>
 80a3524:	4620      	mov	r0, r4
 80a3526:	bd10      	pop	{r4, pc}

080a3528 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
 80a3528:	f7fc bdbd 	b.w	80a00a6 <_ZdlPv>

080a352c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.2.constprop.28>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
 80a352c:	b510      	push	{r4, lr}
 80a352e:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
 80a3530:	6803      	ldr	r3, [r0, #0]
 80a3532:	689b      	ldr	r3, [r3, #8]
 80a3534:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a3536:	68a3      	ldr	r3, [r4, #8]
 80a3538:	3b01      	subs	r3, #1
 80a353a:	60a3      	str	r3, [r4, #8]
 80a353c:	b92b      	cbnz	r3, 80a354a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.2.constprop.28+0x1e>
            _M_destroy();
 80a353e:	6823      	ldr	r3, [r4, #0]
 80a3540:	4620      	mov	r0, r4
        }
    }
 80a3542:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
 80a3546:	68db      	ldr	r3, [r3, #12]
 80a3548:	4718      	bx	r3
 80a354a:	bd10      	pop	{r4, pc}

080a354c <_ZN9TCPClient8remoteIPEv>:
{
   return (status()!=0);
}

IPAddress TCPClient::remoteIP()
{
 80a354c:	b570      	push	{r4, r5, r6, lr}

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 80a354e:	4604      	mov	r4, r0
 80a3550:	4606      	mov	r6, r0
 80a3552:	694d      	ldr	r5, [r1, #20]
 80a3554:	4b04      	ldr	r3, [pc, #16]	; (80a3568 <_ZN9TCPClient8remoteIPEv+0x1c>)
 80a3556:	358c      	adds	r5, #140	; 0x8c
 80a3558:	f844 3b04 	str.w	r3, [r4], #4
 80a355c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a355e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a3560:	682b      	ldr	r3, [r5, #0]
    return d_->remoteIP;
}
 80a3562:	4630      	mov	r0, r6
 80a3564:	7023      	strb	r3, [r4, #0]
 80a3566:	bd70      	pop	{r4, r5, r6, pc}
 80a3568:	080a9c0c 	.word	0x080a9c0c

080a356c <_ZN9TCPClient4peekEv>:
        }
        return read;
}

int TCPClient::peek()
{
 80a356c:	b510      	push	{r4, lr}
 80a356e:	6943      	ldr	r3, [r0, #20]
 80a3570:	4604      	mov	r4, r0
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
 80a3572:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a3576:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80a357a:	429a      	cmp	r2, r3
 80a357c:	d005      	beq.n	80a358a <_ZN9TCPClient4peekEv+0x1e>
 80a357e:	6962      	ldr	r2, [r4, #20]
 80a3580:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 80a3584:	4413      	add	r3, r2
 80a3586:	7918      	ldrb	r0, [r3, #4]
 80a3588:	bd10      	pop	{r4, pc}
 80a358a:	6803      	ldr	r3, [r0, #0]
 80a358c:	691b      	ldr	r3, [r3, #16]
 80a358e:	4798      	blx	r3
 80a3590:	2800      	cmp	r0, #0
 80a3592:	d1f4      	bne.n	80a357e <_ZN9TCPClient4peekEv+0x12>
 80a3594:	f04f 30ff 	mov.w	r0, #4294967295
}
 80a3598:	bd10      	pop	{r4, pc}

080a359a <_ZN9TCPClient4readEv>:
    avail = bufferCount();
    return avail;
}

int TCPClient::read()
{
 80a359a:	b510      	push	{r4, lr}
 80a359c:	6943      	ldr	r3, [r0, #20]
 80a359e:	4604      	mov	r4, r0
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
 80a35a0:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a35a4:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80a35a8:	429a      	cmp	r2, r3
 80a35aa:	d008      	beq.n	80a35be <_ZN9TCPClient4readEv+0x24>
 80a35ac:	6962      	ldr	r2, [r4, #20]
 80a35ae:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 80a35b2:	1c59      	adds	r1, r3, #1
 80a35b4:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
 80a35b8:	4413      	add	r3, r2
 80a35ba:	7918      	ldrb	r0, [r3, #4]
 80a35bc:	bd10      	pop	{r4, pc}
 80a35be:	6803      	ldr	r3, [r0, #0]
 80a35c0:	691b      	ldr	r3, [r3, #16]
 80a35c2:	4798      	blx	r3
 80a35c4:	2800      	cmp	r0, #0
 80a35c6:	d1f1      	bne.n	80a35ac <_ZN9TCPClient4readEv+0x12>
 80a35c8:	f04f 30ff 	mov.w	r0, #4294967295
}
 80a35cc:	bd10      	pop	{r4, pc}

080a35ce <_ZN9TCPClient4readEPhj>:

int TCPClient::read(uint8_t *buffer, size_t size)
{
 80a35ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a35d0:	6943      	ldr	r3, [r0, #20]
 80a35d2:	4617      	mov	r7, r2
        int read = -1;
        if (bufferCount() || available())
 80a35d4:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a35d8:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
{
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size)
{
 80a35dc:	4605      	mov	r5, r0
        int read = -1;
        if (bufferCount() || available())
 80a35de:	429a      	cmp	r2, r3
{
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size)
{
 80a35e0:	460e      	mov	r6, r1
        int read = -1;
        if (bufferCount() || available())
 80a35e2:	d106      	bne.n	80a35f2 <_ZN9TCPClient4readEPhj+0x24>
 80a35e4:	6803      	ldr	r3, [r0, #0]
 80a35e6:	691b      	ldr	r3, [r3, #16]
 80a35e8:	4798      	blx	r3
 80a35ea:	b910      	cbnz	r0, 80a35f2 <_ZN9TCPClient4readEPhj+0x24>
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size)
{
        int read = -1;
 80a35ec:	f04f 34ff 	mov.w	r4, #4294967295
 80a35f0:	e014      	b.n	80a361c <_ZN9TCPClient4readEPhj+0x4e>
 80a35f2:	6969      	ldr	r1, [r5, #20]
        if (bufferCount() || available())
        {
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80a35f4:	4630      	mov	r0, r6
    return ret;
}

int TCPClient::bufferCount()
{
  return d_->total - d_->offset;
 80a35f6:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
 80a35fa:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
{
        int read = -1;
        if (bufferCount() || available())
        {
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80a35fe:	4419      	add	r1, r3
    return ret;
}

int TCPClient::bufferCount()
{
  return d_->total - d_->offset;
 80a3600:	1ae4      	subs	r4, r4, r3
int TCPClient::read(uint8_t *buffer, size_t size)
{
        int read = -1;
        if (bufferCount() || available())
        {
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
 80a3602:	42bc      	cmp	r4, r7
 80a3604:	bf28      	it	cs
 80a3606:	463c      	movcs	r4, r7
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80a3608:	3104      	adds	r1, #4
 80a360a:	4622      	mov	r2, r4
 80a360c:	f003 f820 	bl	80a6650 <memcpy>
 80a3610:	696a      	ldr	r2, [r5, #20]
          d_->offset += read;
 80a3612:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 80a3616:	4423      	add	r3, r4
 80a3618:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
        }
        return read;
}
 80a361c:	4620      	mov	r0, r4
 80a361e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a3620 <_ZN9TCPClient12flush_bufferEv>:
{
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
}

void TCPClient::flush_buffer()
{
 80a3620:	6942      	ldr	r2, [r0, #20]
  d_->offset = 0;
 80a3622:	2300      	movs	r3, #0
 80a3624:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
 80a3628:	6942      	ldr	r2, [r0, #20]
  d_->total = 0;
 80a362a:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
 80a362e:	4770      	bx	lr

080a3630 <_ZN9TCPClient9availableEv>:
{
  return d_->total - d_->offset;
}

int TCPClient::available()
{
 80a3630:	b538      	push	{r3, r4, r5, lr}
 80a3632:	6942      	ldr	r2, [r0, #20]
 80a3634:	4604      	mov	r4, r0
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total))
 80a3636:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 80a363a:	b11b      	cbz	r3, 80a3644 <_ZN9TCPClient9availableEv+0x14>
 80a363c:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
 80a3640:	429a      	cmp	r2, r3
 80a3642:	d00c      	beq.n	80a365e <_ZN9TCPClient9availableEv+0x2e>
    {
        flush_buffer();
    }

    if(Network.from(nif).ready() && isOpen(d_->sock))
 80a3644:	6920      	ldr	r0, [r4, #16]
 80a3646:	f001 fab3 	bl	80a4bb0 <_ZN5spark12NetworkClass4fromEm>
 80a364a:	6803      	ldr	r3, [r0, #0]
 80a364c:	68db      	ldr	r3, [r3, #12]
 80a364e:	4798      	blx	r3
 80a3650:	b318      	cbz	r0, 80a369a <_ZN9TCPClient9availableEv+0x6a>
 80a3652:	6963      	ldr	r3, [r4, #20]

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 80a3654:	6818      	ldr	r0, [r3, #0]
 80a3656:	f7ff fcd3 	bl	80a3000 <socket_handle_valid>
    if (d_->total && (d_->offset == d_->total))
    {
        flush_buffer();
    }

    if(Network.from(nif).ready() && isOpen(d_->sock))
 80a365a:	b918      	cbnz	r0, 80a3664 <_ZN9TCPClient9availableEv+0x34>
 80a365c:	e01d      	b.n	80a369a <_ZN9TCPClient9availableEv+0x6a>
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total))
    {
        flush_buffer();
 80a365e:	f7ff ffdf 	bl	80a3620 <_ZN9TCPClient12flush_bufferEv>
 80a3662:	e7ef      	b.n	80a3644 <_ZN9TCPClient9availableEv+0x14>
 80a3664:	6960      	ldr	r0, [r4, #20]
    }

    if(Network.from(nif).ready() && isOpen(d_->sock))
    {
        // Have room
        if ( d_->total < arraySize(d_->buffer))
 80a3666:	f8b0 1086 	ldrh.w	r1, [r0, #134]	; 0x86
 80a366a:	297f      	cmp	r1, #127	; 0x7f
 80a366c:	d815      	bhi.n	80a369a <_ZN9TCPClient9availableEv+0x6a>
        {
            int ret = socket_receive(d_->sock, d_->buffer + d_->total , arraySize(d_->buffer)-d_->total, 0);
 80a366e:	1d05      	adds	r5, r0, #4
 80a3670:	f1c1 0280 	rsb	r2, r1, #128	; 0x80
 80a3674:	2300      	movs	r3, #0
 80a3676:	4429      	add	r1, r5
 80a3678:	6800      	ldr	r0, [r0, #0]
 80a367a:	f7ff fcd9 	bl	80a3030 <socket_receive>
            if (ret > 0)
 80a367e:	2800      	cmp	r0, #0
 80a3680:	dd0b      	ble.n	80a369a <_ZN9TCPClient9availableEv+0x6a>
 80a3682:	6963      	ldr	r3, [r4, #20]
            {
                DEBUG("recv(=%d)",ret);
                if (d_->total == 0) d_->offset = 0;
 80a3684:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a3688:	b90a      	cbnz	r2, 80a368e <_ZN9TCPClient9availableEv+0x5e>
 80a368a:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 80a368e:	6962      	ldr	r2, [r4, #20]
                d_->total += ret;
 80a3690:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 80a3694:	4418      	add	r0, r3
 80a3696:	f8a2 0086 	strh.w	r0, [r2, #134]	; 0x86
 80a369a:	6962      	ldr	r2, [r4, #20]
            }
        } // Have Space
    } // WiFi.ready() && isOpen(d_->sock)
    avail = bufferCount();
    return avail;
 80a369c:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 80a36a0:	f8b2 0084 	ldrh.w	r0, [r2, #132]	; 0x84
 80a36a4:	1a18      	subs	r0, r3, r0
}
 80a36a6:	bd38      	pop	{r3, r4, r5, pc}

080a36a8 <_ZN9TCPClient4stopEv>:
{
}


void TCPClient::stop()
{
 80a36a8:	b538      	push	{r3, r4, r5, lr}
  // This log line pollutes the log too much
  // DEBUG("sock %d closesocket", d_->sock);

  if (isOpen(d_->sock))
 80a36aa:	6943      	ldr	r3, [r0, #20]
{
}


void TCPClient::stop()
{
 80a36ac:	4604      	mov	r4, r0

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 80a36ae:	6818      	ldr	r0, [r3, #0]
 80a36b0:	f7ff fca6 	bl	80a3000 <socket_handle_valid>
void TCPClient::stop()
{
  // This log line pollutes the log too much
  // DEBUG("sock %d closesocket", d_->sock);

  if (isOpen(d_->sock))
 80a36b4:	b118      	cbz	r0, 80a36be <_ZN9TCPClient4stopEv+0x16>
      socket_close(d_->sock);
 80a36b6:	6963      	ldr	r3, [r4, #20]
 80a36b8:	6818      	ldr	r0, [r3, #0]
 80a36ba:	f7ff fcc1 	bl	80a3040 <socket_close>
 80a36be:	6965      	ldr	r5, [r4, #20]
  d_->sock = socket_handle_invalid();
 80a36c0:	f7ff fcc6 	bl	80a3050 <socket_handle_invalid>
 80a36c4:	6028      	str	r0, [r5, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a36c6:	6960      	ldr	r0, [r4, #20]
 80a36c8:	2211      	movs	r2, #17
 80a36ca:	2100      	movs	r1, #0
 80a36cc:	308c      	adds	r0, #140	; 0x8c
 80a36ce:	f002 ffca 	bl	80a6666 <memset>
  d_->remoteIP.clear();
  flush_buffer();
 80a36d2:	4620      	mov	r0, r4
}
 80a36d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

  if (isOpen(d_->sock))
      socket_close(d_->sock);
  d_->sock = socket_handle_invalid();
  d_->remoteIP.clear();
  flush_buffer();
 80a36d8:	f7ff bfa2 	b.w	80a3620 <_ZN9TCPClient12flush_bufferEv>

080a36dc <_ZN9TCPClient7connectE9IPAddresstm>:
    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif)
{
 80a36dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a36e0:	461f      	mov	r7, r3
    stop();
 80a36e2:	6803      	ldr	r3, [r0, #0]
    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif)
{
 80a36e4:	b08a      	sub	sp, #40	; 0x28
    stop();
 80a36e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif)
{
 80a36e8:	4606      	mov	r6, r0
 80a36ea:	460c      	mov	r4, r1
 80a36ec:	4615      	mov	r5, r2
    stop();
 80a36ee:	4798      	blx	r3
        int connected = 0;
        if(Network.from(nif).ready())
 80a36f0:	4638      	mov	r0, r7
 80a36f2:	f001 fa5d 	bl	80a4bb0 <_ZN5spark12NetworkClass4fromEm>
 80a36f6:	6803      	ldr	r3, [r0, #0]
 80a36f8:	68db      	ldr	r3, [r3, #12]
 80a36fa:	4798      	blx	r3
 80a36fc:	2800      	cmp	r0, #0
 80a36fe:	d056      	beq.n	80a37ae <_ZN9TCPClient7connectE9IPAddresstm+0xd2>
        {
          sockaddr_t tSocketAddr;
          d_->sock = socket_create(AF_INET, SOCK_STREAM, IPPROTO_TCP, port, nif);
 80a3700:	9700      	str	r7, [sp, #0]
 80a3702:	462b      	mov	r3, r5
 80a3704:	2206      	movs	r2, #6
 80a3706:	2101      	movs	r1, #1
 80a3708:	2002      	movs	r0, #2
 80a370a:	f8d6 8014 	ldr.w	r8, [r6, #20]
 80a370e:	f7ff fc7f 	bl	80a3010 <socket_create>
          LOG(TRACE, "TCPClient socket=%x", d_->sock);
 80a3712:	2320      	movs	r3, #32
    stop();
        int connected = 0;
        if(Network.from(nif).ready())
        {
          sockaddr_t tSocketAddr;
          d_->sock = socket_create(AF_INET, SOCK_STREAM, IPPROTO_TCP, port, nif);
 80a3714:	f8c8 0000 	str.w	r0, [r8]
          LOG(TRACE, "TCPClient socket=%x", d_->sock);
 80a3718:	2700      	movs	r7, #0
 80a371a:	9302      	str	r3, [sp, #8]
 80a371c:	6973      	ldr	r3, [r6, #20]
 80a371e:	9703      	str	r7, [sp, #12]
 80a3720:	681b      	ldr	r3, [r3, #0]
 80a3722:	2001      	movs	r0, #1
 80a3724:	9301      	str	r3, [sp, #4]
 80a3726:	4b23      	ldr	r3, [pc, #140]	; (80a37b4 <_ZN9TCPClient7connectE9IPAddresstm+0xd8>)
 80a3728:	aa02      	add	r2, sp, #8
 80a372a:	9300      	str	r3, [sp, #0]
 80a372c:	4922      	ldr	r1, [pc, #136]	; (80a37b8 <_ZN9TCPClient7connectE9IPAddresstm+0xdc>)
 80a372e:	463b      	mov	r3, r7
 80a3730:	f7ff fd0e 	bl	80a3150 <log_message>

          if (socket_handle_valid(d_->sock))
 80a3734:	6973      	ldr	r3, [r6, #20]
 80a3736:	6818      	ldr	r0, [r3, #0]
 80a3738:	f7ff fc62 	bl	80a3000 <socket_handle_valid>
 80a373c:	2800      	cmp	r0, #0
 80a373e:	d036      	beq.n	80a37ae <_ZN9TCPClient7connectE9IPAddresstm+0xd2>
          {
            flush_buffer();
 80a3740:	4630      	mov	r0, r6
 80a3742:	f7ff ff6d 	bl	80a3620 <_ZN9TCPClient12flush_bufferEv>

            tSocketAddr.sa_family = AF_INET;
 80a3746:	2302      	movs	r3, #2
 80a3748:	f8ad 3008 	strh.w	r3, [sp, #8]

            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80a374c:	0a2b      	lsrs	r3, r5, #8
 80a374e:	f88d 300a 	strb.w	r3, [sp, #10]
            tSocketAddr.sa_data[1] = (port & 0x00FF);

            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 80a3752:	79e3      	ldrb	r3, [r4, #7]
            tSocketAddr.sa_data[3] = ip[1];
            tSocketAddr.sa_data[4] = ip[2];
            tSocketAddr.sa_data[5] = ip[3];


            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a3754:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
            tSocketAddr.sa_family = AF_INET;

            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
            tSocketAddr.sa_data[1] = (port & 0x00FF);

            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 80a3758:	f88d 300c 	strb.w	r3, [sp, #12]
            tSocketAddr.sa_data[3] = ip[1];
 80a375c:	79a3      	ldrb	r3, [r4, #6]
            flush_buffer();

            tSocketAddr.sa_family = AF_INET;

            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
            tSocketAddr.sa_data[1] = (port & 0x00FF);
 80a375e:	f88d 500b 	strb.w	r5, [sp, #11]

            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
            tSocketAddr.sa_data[3] = ip[1];
 80a3762:	f88d 300d 	strb.w	r3, [sp, #13]
            tSocketAddr.sa_data[4] = ip[2];
 80a3766:	7963      	ldrb	r3, [r4, #5]
 80a3768:	f88d 300e 	strb.w	r3, [sp, #14]
            tSocketAddr.sa_data[5] = ip[3];
 80a376c:	f814 3f04 	ldrb.w	r3, [r4, #4]!
 80a3770:	f88d 300f 	strb.w	r3, [sp, #15]


            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a3774:	f7ff fcb4 	bl	80a30e0 <HAL_NET_SetNetWatchDog>
            DEBUG("sock %d connect",d_->sock);
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80a3778:	6973      	ldr	r3, [r6, #20]
            tSocketAddr.sa_data[3] = ip[1];
            tSocketAddr.sa_data[4] = ip[2];
            tSocketAddr.sa_data[5] = ip[3];


            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a377a:	4605      	mov	r5, r0
            DEBUG("sock %d connect",d_->sock);
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80a377c:	2210      	movs	r2, #16
 80a377e:	a902      	add	r1, sp, #8
 80a3780:	6818      	ldr	r0, [r3, #0]
 80a3782:	f7ff fc4d 	bl	80a3020 <socket_connect>
 80a3786:	4680      	mov	r8, r0
            DEBUG("sock %d connected=%d",d_->sock, connected);
            HAL_NET_SetNetWatchDog(ot);
 80a3788:	4628      	mov	r0, r5
 80a378a:	f7ff fca9 	bl	80a30e0 <HAL_NET_SetNetWatchDog>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 80a378e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a3790:	6975      	ldr	r5, [r6, #20]
 80a3792:	358c      	adds	r5, #140	; 0x8c
 80a3794:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a3796:	6823      	ldr	r3, [r4, #0]
 80a3798:	702b      	strb	r3, [r5, #0]
            d_->remoteIP = ip;
            if(!connected)
 80a379a:	f1b8 0f00 	cmp.w	r8, #0
 80a379e:	d005      	beq.n	80a37ac <_ZN9TCPClient7connectE9IPAddresstm+0xd0>
            {
                stop();
 80a37a0:	6833      	ldr	r3, [r6, #0]
 80a37a2:	4630      	mov	r0, r6
 80a37a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a37a6:	4798      	blx	r3
 80a37a8:	4638      	mov	r0, r7
 80a37aa:	e000      	b.n	80a37ae <_ZN9TCPClient7connectE9IPAddresstm+0xd2>
            DEBUG("sock %d connect",d_->sock);
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
            DEBUG("sock %d connected=%d",d_->sock, connected);
            HAL_NET_SetNetWatchDog(ot);
            d_->remoteIP = ip;
            if(!connected)
 80a37ac:	2001      	movs	r0, #1
                stop();
            }
          }
        }
        return connected;
}
 80a37ae:	b00a      	add	sp, #40	; 0x28
 80a37b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a37b4:	080a9adf 	.word	0x080a9adf
 80a37b8:	080a9ad8 	.word	0x080a9ad8

080a37bc <_ZN9TCPClient6statusEv>:
  }
  return rv;
}

uint8_t TCPClient::status()
{
 80a37bc:	b510      	push	{r4, lr}
  return (isOpen(d_->sock) && Network.from(nif).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80a37be:	6943      	ldr	r3, [r0, #20]
  }
  return rv;
}

uint8_t TCPClient::status()
{
 80a37c0:	4604      	mov	r4, r0

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 80a37c2:	6818      	ldr	r0, [r3, #0]
 80a37c4:	f7ff fc1c 	bl	80a3000 <socket_handle_valid>
  return rv;
}

uint8_t TCPClient::status()
{
  return (isOpen(d_->sock) && Network.from(nif).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80a37c8:	b908      	cbnz	r0, 80a37ce <_ZN9TCPClient6statusEv+0x12>
 80a37ca:	2000      	movs	r0, #0
 80a37cc:	bd10      	pop	{r4, pc}
 80a37ce:	6920      	ldr	r0, [r4, #16]
 80a37d0:	f001 f9ee 	bl	80a4bb0 <_ZN5spark12NetworkClass4fromEm>
 80a37d4:	6803      	ldr	r3, [r0, #0]
 80a37d6:	68db      	ldr	r3, [r3, #12]
 80a37d8:	4798      	blx	r3
 80a37da:	2800      	cmp	r0, #0
 80a37dc:	d0f5      	beq.n	80a37ca <_ZN9TCPClient6statusEv+0xe>
 80a37de:	6963      	ldr	r3, [r4, #20]
 80a37e0:	6818      	ldr	r0, [r3, #0]
 80a37e2:	f7ff fc05 	bl	80a2ff0 <socket_active_status>
 80a37e6:	fab0 f080 	clz	r0, r0
 80a37ea:	0940      	lsrs	r0, r0, #5
}
 80a37ec:	bd10      	pop	{r4, pc}

080a37ee <_ZN9TCPClient5writeEPKhjm>:
{
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout)
{
 80a37ee:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}

    size_t printNumber(unsigned long, uint8_t);
    size_t printNumber(unsigned long long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
 80a37f2:	2500      	movs	r5, #0
 80a37f4:	6045      	str	r5, [r0, #4]
 80a37f6:	4604      	mov	r4, r0
 80a37f8:	460e      	mov	r6, r1
 80a37fa:	4617      	mov	r7, r2
 80a37fc:	4698      	mov	r8, r3
    clearWriteError();
    int ret = status() ? socket_send_ex(d_->sock, buffer, size, 0, timeout, nullptr) : -1;
 80a37fe:	f7ff ffdd 	bl	80a37bc <_ZN9TCPClient6statusEv>
 80a3802:	b160      	cbz	r0, 80a381e <_ZN9TCPClient5writeEPKhjm+0x30>
 80a3804:	6960      	ldr	r0, [r4, #20]
 80a3806:	9501      	str	r5, [sp, #4]
 80a3808:	f8cd 8000 	str.w	r8, [sp]
 80a380c:	462b      	mov	r3, r5
 80a380e:	463a      	mov	r2, r7
 80a3810:	4631      	mov	r1, r6
 80a3812:	6800      	ldr	r0, [r0, #0]
 80a3814:	f7ff fc24 	bl	80a3060 <socket_send_ex>
    if (ret < 0) {
 80a3818:	2800      	cmp	r0, #0
 80a381a:	da03      	bge.n	80a3824 <_ZN9TCPClient5writeEPKhjm+0x36>
 80a381c:	e001      	b.n	80a3822 <_ZN9TCPClient5writeEPKhjm+0x34>
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout)
{
    clearWriteError();
    int ret = status() ? socket_send_ex(d_->sock, buffer, size, 0, timeout, nullptr) : -1;
 80a381e:	f04f 30ff 	mov.w	r0, #4294967295
 80a3822:	6060      	str	r0, [r4, #4]

    /*
     * FIXME: We should not be returning negative numbers here
     */
    return ret;
}
 80a3824:	b002      	add	sp, #8
 80a3826:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a382a <_ZN9TCPClient9connectedEv>:
  d_->remoteIP.clear();
  flush_buffer();
}

uint8_t TCPClient::connected()
{
 80a382a:	b538      	push	{r3, r4, r5, lr}
 80a382c:	4604      	mov	r4, r0
  // Wlan up, open and not in CLOSE_WAIT or data still in the local buffer
  bool rv = (status() || bufferCount());
 80a382e:	f7ff ffc5 	bl	80a37bc <_ZN9TCPClient6statusEv>
 80a3832:	bb00      	cbnz	r0, 80a3876 <_ZN9TCPClient9connectedEv+0x4c>
 80a3834:	6963      	ldr	r3, [r4, #20]
 80a3836:	f8b3 1086 	ldrh.w	r1, [r3, #134]	; 0x86
 80a383a:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 80a383e:	4291      	cmp	r1, r2
 80a3840:	d119      	bne.n	80a3876 <_ZN9TCPClient9connectedEv+0x4c>

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 80a3842:	6818      	ldr	r0, [r3, #0]
 80a3844:	f7ff fbdc 	bl	80a3000 <socket_handle_valid>
uint8_t TCPClient::connected()
{
  // Wlan up, open and not in CLOSE_WAIT or data still in the local buffer
  bool rv = (status() || bufferCount());
  // no data in the local buffer, Socket open but my be in CLOSE_WAIT yet the CC3000 may have data in its buffer
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
 80a3848:	b128      	cbz	r0, 80a3856 <_ZN9TCPClient9connectedEv+0x2c>
 80a384a:	6963      	ldr	r3, [r4, #20]
 80a384c:	6818      	ldr	r0, [r3, #0]
 80a384e:	f7ff fbcf 	bl	80a2ff0 <socket_active_status>
 80a3852:	2801      	cmp	r0, #1
 80a3854:	d001      	beq.n	80a385a <_ZN9TCPClient9connectedEv+0x30>
}

uint8_t TCPClient::connected()
{
  // Wlan up, open and not in CLOSE_WAIT or data still in the local buffer
  bool rv = (status() || bufferCount());
 80a3856:	2500      	movs	r5, #0
 80a3858:	e00e      	b.n	80a3878 <_ZN9TCPClient9connectedEv+0x4e>
  // no data in the local buffer, Socket open but my be in CLOSE_WAIT yet the CC3000 may have data in its buffer
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
    {
      rv = available(); // Try CC3000
 80a385a:	6823      	ldr	r3, [r4, #0]
 80a385c:	4620      	mov	r0, r4
 80a385e:	691b      	ldr	r3, [r3, #16]
 80a3860:	4798      	blx	r3
 80a3862:	2800      	cmp	r0, #0
 80a3864:	bf14      	ite	ne
 80a3866:	2501      	movne	r5, #1
 80a3868:	2500      	moveq	r5, #0
      if (!rv) {        // No more Data and CLOSE_WAIT
 80a386a:	d105      	bne.n	80a3878 <_ZN9TCPClient9connectedEv+0x4e>
          DEBUG("calling .stop(), no more data, in CLOSE_WAIT");
          stop();       // Close our side
 80a386c:	6823      	ldr	r3, [r4, #0]
 80a386e:	4620      	mov	r0, r4
 80a3870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a3872:	4798      	blx	r3
 80a3874:	e000      	b.n	80a3878 <_ZN9TCPClient9connectedEv+0x4e>
 80a3876:	2501      	movs	r5, #1
      }
  }
  return rv;
}
 80a3878:	4628      	mov	r0, r5
 80a387a:	bd38      	pop	{r3, r4, r5, pc}

080a387c <_ZN9TCPClientcvbEv>:
{
  return (isOpen(d_->sock) && Network.from(nif).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
}

TCPClient::operator bool()
{
 80a387c:	b508      	push	{r3, lr}
   return (status()!=0);
 80a387e:	f7ff ff9d 	bl	80a37bc <_ZN9TCPClient6statusEv>
}
 80a3882:	3000      	adds	r0, #0
 80a3884:	bf18      	it	ne
 80a3886:	2001      	movne	r0, #1
 80a3888:	bd08      	pop	{r3, pc}

080a388a <_ZN9TCPClient4DataC1Em>:
IPAddress TCPClient::remoteIP()
{
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
 80a388a:	b510      	push	{r4, lr}
 80a388c:	4604      	mov	r4, r0
        : sock(sock),
          offset(0),
          total(0) {
 80a388e:	2300      	movs	r3, #0
 80a3890:	6001      	str	r1, [r0, #0]
 80a3892:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 80a3896:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
 80a389a:	3088      	adds	r0, #136	; 0x88
 80a389c:	f000 fe2c 	bl	80a44f8 <_ZN9IPAddressC1Ev>
}
 80a38a0:	4620      	mov	r0, r4
 80a38a2:	bd10      	pop	{r4, pc}

080a38a4 <_ZN9TCPClientC1Em>:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a38a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
{
}

TCPClient::TCPClient(sock_handle_t sock) :
 80a38a8:	b570      	push	{r4, r5, r6, lr}
 80a38aa:	6082      	str	r2, [r0, #8]
        d_(std::make_shared<Data>(sock))
 80a38ac:	4a14      	ldr	r2, [pc, #80]	; (80a3900 <_ZN9TCPClientC1Em+0x5c>)
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a38ae:	2300      	movs	r3, #0
 80a38b0:	6043      	str	r3, [r0, #4]
 80a38b2:	6002      	str	r2, [r0, #0]
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
 80a38b4:	6143      	str	r3, [r0, #20]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
 80a38b6:	6183      	str	r3, [r0, #24]

TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
{
}

TCPClient::TCPClient(sock_handle_t sock) :
 80a38b8:	4604      	mov	r4, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80a38ba:	20a0      	movs	r0, #160	; 0xa0
 80a38bc:	460e      	mov	r6, r1
 80a38be:	f7fc fbee 	bl	80a009e <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80a38c2:	4605      	mov	r5, r0
 80a38c4:	b110      	cbz	r0, 80a38cc <_ZN9TCPClientC1Em+0x28>
 80a38c6:	4631      	mov	r1, r6
 80a38c8:	f7ff ffdf 	bl	80a388a <_ZN9TCPClient4DataC1Em>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80a38cc:	2014      	movs	r0, #20
 80a38ce:	f7fc fbe6 	bl	80a009e <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
 80a38d2:	4603      	mov	r3, r0
 80a38d4:	b128      	cbz	r0, 80a38e2 <_ZN9TCPClientC1Em+0x3e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 80a38d6:	2201      	movs	r2, #1
 80a38d8:	6042      	str	r2, [r0, #4]
 80a38da:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
 80a38dc:	4a09      	ldr	r2, [pc, #36]	; (80a3904 <_ZN9TCPClientC1Em+0x60>)
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
 80a38de:	6105      	str	r5, [r0, #16]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
 80a38e0:	6002      	str	r2, [r0, #0]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 80a38e2:	69a0      	ldr	r0, [r4, #24]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
 80a38e4:	6165      	str	r5, [r4, #20]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 80a38e6:	61a3      	str	r3, [r4, #24]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 80a38e8:	b128      	cbz	r0, 80a38f6 <_ZN9TCPClientC1Em+0x52>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a38ea:	6843      	ldr	r3, [r0, #4]
 80a38ec:	3b01      	subs	r3, #1
 80a38ee:	6043      	str	r3, [r0, #4]
 80a38f0:	b90b      	cbnz	r3, 80a38f6 <_ZN9TCPClientC1Em+0x52>
 80a38f2:	f7ff fe1b 	bl	80a352c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.2.constprop.28>
        d_(std::make_shared<Data>(sock))
{
  flush_buffer();
 80a38f6:	4620      	mov	r0, r4
 80a38f8:	f7ff fe92 	bl	80a3620 <_ZN9TCPClient12flush_bufferEv>
}
 80a38fc:	4620      	mov	r0, r4
 80a38fe:	bd70      	pop	{r4, r5, r6, pc}
 80a3900:	080a9a94 	.word	0x080a9a94
 80a3904:	080a9a78 	.word	0x080a9a78

080a3908 <_ZN9TCPClientC1Ev>:
static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
}

TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
 80a3908:	b510      	push	{r4, lr}
 80a390a:	4604      	mov	r4, r0
 80a390c:	f7ff fba0 	bl	80a3050 <socket_handle_invalid>
 80a3910:	4601      	mov	r1, r0
 80a3912:	4620      	mov	r0, r4
 80a3914:	f7ff ffc6 	bl	80a38a4 <_ZN9TCPClientC1Em>
{
}
 80a3918:	4620      	mov	r0, r4
 80a391a:	bd10      	pop	{r4, pc}

080a391c <_ZN9TCPClient4DataD1Ev>:
        : sock(sock),
          offset(0),
          total(0) {
}

TCPClient::Data::~Data() {
 80a391c:	b510      	push	{r4, lr}
 80a391e:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
 80a3920:	6800      	ldr	r0, [r0, #0]
 80a3922:	f7ff fb6d 	bl	80a3000 <socket_handle_valid>
 80a3926:	b110      	cbz	r0, 80a392e <_ZN9TCPClient4DataD1Ev+0x12>
        socket_close(sock);
 80a3928:	6820      	ldr	r0, [r4, #0]
 80a392a:	f7ff fb89 	bl	80a3040 <socket_close>
    }
}
 80a392e:	4620      	mov	r0, r4
 80a3930:	bd10      	pop	{r4, pc}

080a3932 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
 80a3932:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
 80a3934:	6904      	ldr	r4, [r0, #16]
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
        void 
        destroy(_Up* __p) { __p->~_Up(); }
 80a3936:	4620      	mov	r0, r4
 80a3938:	f7ff fff0 	bl	80a391c <_ZN9TCPClient4DataD1Ev>
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
      {
	if (_M_ptr != nullptr)
 80a393c:	b124      	cbz	r4, 80a3948 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x16>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
 80a393e:	4620      	mov	r0, r4
 80a3940:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a3944:	f7fc bbaf 	b.w	80a00a6 <_ZdlPv>
 80a3948:	bd10      	pop	{r4, pc}
	...

080a394c <_ZN9TCPClient7connectEPKctm>:
  flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif)
{
 80a394c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a3950:	461f      	mov	r7, r3
    stop();
 80a3952:	6803      	ldr	r3, [r0, #0]
  flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif)
{
 80a3954:	b08f      	sub	sp, #60	; 0x3c
    stop();
 80a3956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif)
{
 80a3958:	4606      	mov	r6, r0
 80a395a:	460d      	mov	r5, r1
 80a395c:	4690      	mov	r8, r2
    stop();
 80a395e:	4798      	blx	r3
    if (Network.ready())
 80a3960:	4813      	ldr	r0, [pc, #76]	; (80a39b0 <_ZN9TCPClient7connectEPKctm+0x64>)
 80a3962:	f001 f8d8 	bl	80a4b16 <_ZN5spark12NetworkClass5readyEv>
 80a3966:	b300      	cbz	r0, 80a39aa <_ZN9TCPClient7connectEPKctm+0x5e>
    {
        IPAddress ip_addr;
 80a3968:	a802      	add	r0, sp, #8
 80a396a:	f000 fdc5 	bl	80a44f8 <_ZN9IPAddressC1Ev>
        if (inet_gethostbyname(host, strlen(host), ip_addr, nif, NULL) == 0) {
 80a396e:	4628      	mov	r0, r5
 80a3970:	f003 fbd0 	bl	80a7114 <strlen>
 80a3974:	2400      	movs	r4, #0
 80a3976:	b281      	uxth	r1, r0
 80a3978:	9400      	str	r4, [sp, #0]
 80a397a:	463b      	mov	r3, r7
 80a397c:	aa03      	add	r2, sp, #12
 80a397e:	4628      	mov	r0, r5
 80a3980:	f7ff fbb6 	bl	80a30f0 <inet_gethostbyname>
 80a3984:	b980      	cbnz	r0, 80a39a8 <_ZN9TCPClient7connectEPKctm+0x5c>
            return connect(ip_addr, port, nif);
 80a3986:	6833      	ldr	r3, [r6, #0]
 80a3988:	ad09      	add	r5, sp, #36	; 0x24
 80a398a:	f8d3 9020 	ldr.w	r9, [r3, #32]
 80a398e:	4b09      	ldr	r3, [pc, #36]	; (80a39b4 <_ZN9TCPClient7connectEPKctm+0x68>)
 80a3990:	ac03      	add	r4, sp, #12
 80a3992:	9308      	str	r3, [sp, #32]
 80a3994:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a3996:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a3998:	6823      	ldr	r3, [r4, #0]
 80a399a:	4642      	mov	r2, r8
 80a399c:	702b      	strb	r3, [r5, #0]
 80a399e:	a908      	add	r1, sp, #32
 80a39a0:	463b      	mov	r3, r7
 80a39a2:	4630      	mov	r0, r6
 80a39a4:	47c8      	blx	r9
 80a39a6:	e000      	b.n	80a39aa <_ZN9TCPClient7connectEPKctm+0x5e>
        } else {
            DEBUG("unable to get IP for hostname");
        }
    }

    return 0; // error, could not connect
 80a39a8:	4620      	mov	r0, r4
}
 80a39aa:	b00f      	add	sp, #60	; 0x3c
 80a39ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a39b0:	20000594 	.word	0x20000594
 80a39b4:	080a9c0c 	.word	0x080a9c0c

080a39b8 <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
 80a39b8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a39bc:	4680      	mov	r8, r0
 80a39be:	460d      	mov	r5, r1
 80a39c0:	4617      	mov	r7, r2
 80a39c2:	461e      	mov	r6, r3
    bool negative = val<0;
    if (negative) {
 80a39c4:	2200      	movs	r2, #0
 80a39c6:	2300      	movs	r3, #0
 80a39c8:	4640      	mov	r0, r8
 80a39ca:	4629      	mov	r1, r5
 80a39cc:	f001 ff6e 	bl	80a58ac <__aeabi_dcmplt>
 80a39d0:	b120      	cbz	r0, 80a39dc <_Z4dtoadhPc+0x24>
        val = -val;
        *sout++ = '-';
 80a39d2:	232d      	movs	r3, #45	; 0x2d
 80a39d4:	7033      	strb	r3, [r6, #0]
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
    bool negative = val<0;
    if (negative) {
        val = -val;
 80a39d6:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
        *sout++ = '-';
 80a39da:	3601      	adds	r6, #1
 80a39dc:	2300      	movs	r3, #0
    }
    long scale = 1;
 80a39de:	2401      	movs	r4, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
 80a39e0:	220a      	movs	r2, #10
    if (negative) {
        val = -val;
        *sout++ = '-';
    }
    long scale = 1;
    for (uint8_t i=0; i<prec; i++)
 80a39e2:	b2d9      	uxtb	r1, r3
 80a39e4:	428f      	cmp	r7, r1
 80a39e6:	d902      	bls.n	80a39ee <_Z4dtoadhPc+0x36>
        scale *= 10;
 80a39e8:	4354      	muls	r4, r2
 80a39ea:	3301      	adds	r3, #1
    if (negative) {
        val = -val;
        *sout++ = '-';
    }
    long scale = 1;
    for (uint8_t i=0; i<prec; i++)
 80a39ec:	e7f9      	b.n	80a39e2 <_Z4dtoadhPc+0x2a>
        scale *= 10;
    val *= scale;   // capture all the significant digits
 80a39ee:	4620      	mov	r0, r4
 80a39f0:	f001 fc84 	bl	80a52fc <__aeabi_i2d>
 80a39f4:	4642      	mov	r2, r8
 80a39f6:	462b      	mov	r3, r5
 80a39f8:	f001 fce6 	bl	80a53c8 <__aeabi_dmul>
 80a39fc:	4682      	mov	sl, r0
 80a39fe:	468b      	mov	fp, r1
    uint64_t fixed = uint64_t(val);
 80a3a00:	f002 fb3c 	bl	80a607c <__aeabi_d2ulz>
 80a3a04:	4680      	mov	r8, r0
 80a3a06:	4689      	mov	r9, r1
    if ((val-fixed)>=0.5)    // round last digit
 80a3a08:	f001 fca8 	bl	80a535c <__aeabi_ul2d>
 80a3a0c:	4602      	mov	r2, r0
 80a3a0e:	460b      	mov	r3, r1
 80a3a10:	4650      	mov	r0, sl
 80a3a12:	4659      	mov	r1, fp
 80a3a14:	f001 fb24 	bl	80a5060 <__aeabi_dsub>
 80a3a18:	2200      	movs	r2, #0
 80a3a1a:	4b17      	ldr	r3, [pc, #92]	; (80a3a78 <_Z4dtoadhPc+0xc0>)
 80a3a1c:	f001 ff5a 	bl	80a58d4 <__aeabi_dcmpge>
 80a3a20:	b118      	cbz	r0, 80a3a2a <_Z4dtoadhPc+0x72>
        fixed++;
 80a3a22:	f118 0801 	adds.w	r8, r8, #1
 80a3a26:	f149 0900 	adc.w	r9, r9, #0

    unsigned long first = (unsigned long)(fixed / scale);
 80a3a2a:	17e5      	asrs	r5, r4, #31
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
 80a3a2c:	4622      	mov	r2, r4
 80a3a2e:	462b      	mov	r3, r5
 80a3a30:	4640      	mov	r0, r8
 80a3a32:	4649      	mov	r1, r9
 80a3a34:	f002 fb0a 	bl	80a604c <__aeabi_uldivmod>
 80a3a38:	2301      	movs	r3, #1
 80a3a3a:	220a      	movs	r2, #10
 80a3a3c:	4631      	mov	r1, r6
 80a3a3e:	f7ff fd04 	bl	80a344a <ultoa>
    if (prec) {
 80a3a42:	b1af      	cbz	r7, 80a3a70 <_Z4dtoadhPc+0xb8>
        sout += strlen(sout);
 80a3a44:	4630      	mov	r0, r6
 80a3a46:	f003 fb65 	bl	80a7114 <strlen>
        *sout++ = '.';
 80a3a4a:	232e      	movs	r3, #46	; 0x2e
 80a3a4c:	5433      	strb	r3, [r6, r0]
        ultoa(second, sout, 10, prec);
 80a3a4e:	3001      	adds	r0, #1
 80a3a50:	4406      	add	r6, r0
 80a3a52:	4622      	mov	r2, r4
 80a3a54:	462b      	mov	r3, r5
 80a3a56:	4640      	mov	r0, r8
 80a3a58:	4649      	mov	r1, r9
 80a3a5a:	f002 faf7 	bl	80a604c <__aeabi_uldivmod>
 80a3a5e:	463b      	mov	r3, r7
 80a3a60:	4610      	mov	r0, r2
 80a3a62:	4631      	mov	r1, r6
 80a3a64:	220a      	movs	r2, #10
    }
}
 80a3a66:	b001      	add	sp, #4
 80a3a68:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    ultoa(first, sout, 10, 1);
    if (prec) {
        sout += strlen(sout);
        *sout++ = '.';
        ultoa(second, sout, 10, prec);
 80a3a6c:	f7ff bced 	b.w	80a344a <ultoa>
    }
}
 80a3a70:	b001      	add	sp, #4
 80a3a72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a3a76:	bf00      	nop
 80a3a78:	3fe00000 	.word	0x3fe00000

080a3a7c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a3a7c:	b510      	push	{r4, lr}
 80a3a7e:	4604      	mov	r4, r0
{
	free(buffer);
 80a3a80:	6800      	ldr	r0, [r0, #0]
 80a3a82:	f7ff fc31 	bl	80a32e8 <free>
}
 80a3a86:	4620      	mov	r0, r4
 80a3a88:	bd10      	pop	{r4, pc}

080a3a8a <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a3a8a:	b510      	push	{r4, lr}
 80a3a8c:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a3a8e:	6800      	ldr	r0, [r0, #0]
 80a3a90:	b108      	cbz	r0, 80a3a96 <_ZN6String10invalidateEv+0xc>
 80a3a92:	f7ff fc29 	bl	80a32e8 <free>
	buffer = NULL;
 80a3a96:	2300      	movs	r3, #0
 80a3a98:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 80a3a9a:	60a3      	str	r3, [r4, #8]
 80a3a9c:	6063      	str	r3, [r4, #4]
 80a3a9e:	bd10      	pop	{r4, pc}

080a3aa0 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a3aa0:	b538      	push	{r3, r4, r5, lr}
 80a3aa2:	4604      	mov	r4, r0
 80a3aa4:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a3aa6:	6800      	ldr	r0, [r0, #0]
 80a3aa8:	3101      	adds	r1, #1
 80a3aaa:	f7ff fc25 	bl	80a32f8 <realloc>
	if (newbuffer) {
 80a3aae:	b110      	cbz	r0, 80a3ab6 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a3ab0:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 80a3ab4:	2001      	movs	r0, #1
	}
	return 0;
}
 80a3ab6:	bd38      	pop	{r3, r4, r5, pc}

080a3ab8 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a3ab8:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a3aba:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a3abc:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a3abe:	b113      	cbz	r3, 80a3ac6 <_ZN6String7reserveEj+0xe>
 80a3ac0:	6843      	ldr	r3, [r0, #4]
 80a3ac2:	428b      	cmp	r3, r1
 80a3ac4:	d207      	bcs.n	80a3ad6 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 80a3ac6:	4620      	mov	r0, r4
 80a3ac8:	f7ff ffea 	bl	80a3aa0 <_ZN6String12changeBufferEj>
 80a3acc:	b120      	cbz	r0, 80a3ad8 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 80a3ace:	68a3      	ldr	r3, [r4, #8]
 80a3ad0:	b90b      	cbnz	r3, 80a3ad6 <_ZN6String7reserveEj+0x1e>
 80a3ad2:	6822      	ldr	r2, [r4, #0]
 80a3ad4:	7013      	strb	r3, [r2, #0]
 80a3ad6:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 80a3ad8:	bd10      	pop	{r4, pc}

080a3ada <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a3ada:	b570      	push	{r4, r5, r6, lr}
 80a3adc:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a3ade:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a3ae0:	4604      	mov	r4, r0
 80a3ae2:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a3ae4:	f7ff ffe8 	bl	80a3ab8 <_ZN6String7reserveEj>
 80a3ae8:	b918      	cbnz	r0, 80a3af2 <_ZN6String4copyEPKcj+0x18>
		invalidate();
 80a3aea:	4620      	mov	r0, r4
 80a3aec:	f7ff ffcd 	bl	80a3a8a <_ZN6String10invalidateEv>
		return *this;
 80a3af0:	e009      	b.n	80a3b06 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 80a3af2:	462a      	mov	r2, r5
 80a3af4:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 80a3af6:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a3af8:	6820      	ldr	r0, [r4, #0]
 80a3afa:	f002 fda9 	bl	80a6650 <memcpy>
	buffer[len] = 0;
 80a3afe:	6822      	ldr	r2, [r4, #0]
 80a3b00:	68a3      	ldr	r3, [r4, #8]
 80a3b02:	2100      	movs	r1, #0
 80a3b04:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 80a3b06:	4620      	mov	r0, r4
 80a3b08:	bd70      	pop	{r4, r5, r6, pc}

080a3b0a <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a3b0a:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a3b0c:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a3b0e:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a3b10:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a3b12:	6043      	str	r3, [r0, #4]
	len = 0;
 80a3b14:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a3b16:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 80a3b18:	460d      	mov	r5, r1
 80a3b1a:	b139      	cbz	r1, 80a3b2c <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 80a3b1c:	4608      	mov	r0, r1
 80a3b1e:	f003 faf9 	bl	80a7114 <strlen>
 80a3b22:	4629      	mov	r1, r5
 80a3b24:	4602      	mov	r2, r0
 80a3b26:	4620      	mov	r0, r4
 80a3b28:	f7ff ffd7 	bl	80a3ada <_ZN6String4copyEPKcj>
}
 80a3b2c:	4620      	mov	r0, r4
 80a3b2e:	bd38      	pop	{r3, r4, r5, pc}

080a3b30 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 80a3b30:	b538      	push	{r3, r4, r5, lr}
 80a3b32:	4605      	mov	r5, r0
	if (buffer) {
 80a3b34:	6800      	ldr	r0, [r0, #0]
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 80a3b36:	460c      	mov	r4, r1
	if (buffer) {
 80a3b38:	b160      	cbz	r0, 80a3b54 <_ZN6String4moveERS_+0x24>
		if (capacity >= rhs.len) {
 80a3b3a:	686a      	ldr	r2, [r5, #4]
 80a3b3c:	688b      	ldr	r3, [r1, #8]
 80a3b3e:	429a      	cmp	r2, r3
 80a3b40:	d306      	bcc.n	80a3b50 <_ZN6String4moveERS_+0x20>
			strcpy(buffer, rhs.buffer);
 80a3b42:	6809      	ldr	r1, [r1, #0]
 80a3b44:	f002 fdca 	bl	80a66dc <strcpy>
			len = rhs.len;
 80a3b48:	68a3      	ldr	r3, [r4, #8]
 80a3b4a:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
 80a3b4c:	2300      	movs	r3, #0
 80a3b4e:	e00a      	b.n	80a3b66 <_ZN6String4moveERS_+0x36>
			return;
		} else {
			free(buffer);
 80a3b50:	f7ff fbca 	bl	80a32e8 <free>
		}
	}
	buffer = rhs.buffer;
 80a3b54:	6823      	ldr	r3, [r4, #0]
 80a3b56:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
 80a3b58:	6863      	ldr	r3, [r4, #4]
 80a3b5a:	606b      	str	r3, [r5, #4]
	len = rhs.len;
 80a3b5c:	68a3      	ldr	r3, [r4, #8]
 80a3b5e:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
 80a3b60:	2300      	movs	r3, #0
 80a3b62:	6023      	str	r3, [r4, #0]
	rhs.capacity = 0;
 80a3b64:	6063      	str	r3, [r4, #4]
	rhs.len = 0;
 80a3b66:	60a3      	str	r3, [r4, #8]
 80a3b68:	bd38      	pop	{r3, r4, r5, pc}

080a3b6a <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 80a3b6a:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
 80a3b6c:	b510      	push	{r4, lr}
 80a3b6e:	460b      	mov	r3, r1
 80a3b70:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 80a3b72:	d007      	beq.n	80a3b84 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 80a3b74:	6809      	ldr	r1, [r1, #0]
 80a3b76:	b119      	cbz	r1, 80a3b80 <_ZN6StringaSERKS_+0x16>
 80a3b78:	689a      	ldr	r2, [r3, #8]
 80a3b7a:	f7ff ffae 	bl	80a3ada <_ZN6String4copyEPKcj>
 80a3b7e:	e001      	b.n	80a3b84 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
 80a3b80:	f7ff ff83 	bl	80a3a8a <_ZN6String10invalidateEv>

	return *this;
}
 80a3b84:	4620      	mov	r0, r4
 80a3b86:	bd10      	pop	{r4, pc}

080a3b88 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
 80a3b88:	b510      	push	{r4, lr}
 80a3b8a:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a3b8c:	2300      	movs	r3, #0
 80a3b8e:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a3b90:	6043      	str	r3, [r0, #4]
	len = 0;
 80a3b92:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a3b94:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
 80a3b96:	f7ff ffe8 	bl	80a3b6a <_ZN6StringaSERKS_>
}
 80a3b9a:	4620      	mov	r0, r4
 80a3b9c:	bd10      	pop	{r4, pc}

080a3b9e <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
 80a3b9e:	4288      	cmp	r0, r1
    return *this;
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
 80a3ba0:	b510      	push	{r4, lr}
 80a3ba2:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
 80a3ba4:	d001      	beq.n	80a3baa <_ZN6StringaSEOS_+0xc>
 80a3ba6:	f7ff ffc3 	bl	80a3b30 <_ZN6String4moveERS_>
	return *this;
}
 80a3baa:	4620      	mov	r0, r4
 80a3bac:	bd10      	pop	{r4, pc}

080a3bae <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 80a3bae:	b538      	push	{r3, r4, r5, lr}
 80a3bb0:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a3bb2:	460c      	mov	r4, r1
 80a3bb4:	b141      	cbz	r1, 80a3bc8 <_ZN6StringaSEPKc+0x1a>
 80a3bb6:	4608      	mov	r0, r1
 80a3bb8:	f003 faac 	bl	80a7114 <strlen>
 80a3bbc:	4621      	mov	r1, r4
 80a3bbe:	4602      	mov	r2, r0
 80a3bc0:	4628      	mov	r0, r5
 80a3bc2:	f7ff ff8a 	bl	80a3ada <_ZN6String4copyEPKcj>
 80a3bc6:	e001      	b.n	80a3bcc <_ZN6StringaSEPKc+0x1e>
	else invalidate();
 80a3bc8:	f7ff ff5f 	bl	80a3a8a <_ZN6String10invalidateEv>

	return *this;
}
 80a3bcc:	4628      	mov	r0, r5
 80a3bce:	bd38      	pop	{r3, r4, r5, pc}

080a3bd0 <_ZN6StringC1Ehh>:
	buf[0] = c;
	buf[1] = 0;
	*this = buf;
}

String::String(unsigned char value, unsigned char base)
 80a3bd0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80a3bd2:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a3bd4:	2300      	movs	r3, #0
 80a3bd6:	6023      	str	r3, [r4, #0]
	capacity = 0;
 80a3bd8:	6063      	str	r3, [r4, #4]
	len = 0;
 80a3bda:	60a3      	str	r3, [r4, #8]
	flags = 0;
 80a3bdc:	7323      	strb	r3, [r4, #12]
	buf[0] = c;
	buf[1] = 0;
	*this = buf;
}

String::String(unsigned char value, unsigned char base)
 80a3bde:	4608      	mov	r0, r1
{
	init();
	char buf[9];
	utoa(value, buf, base);
 80a3be0:	a901      	add	r1, sp, #4
 80a3be2:	f7ff fc70 	bl	80a34c6 <utoa>
	*this = buf;
 80a3be6:	a901      	add	r1, sp, #4
 80a3be8:	4620      	mov	r0, r4
 80a3bea:	f7ff ffe0 	bl	80a3bae <_ZN6StringaSEPKc>
}
 80a3bee:	4620      	mov	r0, r4
 80a3bf0:	b004      	add	sp, #16
 80a3bf2:	bd10      	pop	{r4, pc}

080a3bf4 <_ZN6StringC1Eih>:

String::String(int value, unsigned char base)
 80a3bf4:	b510      	push	{r4, lr}
 80a3bf6:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a3bf8:	2300      	movs	r3, #0
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
 80a3bfa:	b08a      	sub	sp, #40	; 0x28
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a3bfc:	6023      	str	r3, [r4, #0]
	capacity = 0;
 80a3bfe:	6063      	str	r3, [r4, #4]
	len = 0;
 80a3c00:	60a3      	str	r3, [r4, #8]
	flags = 0;
 80a3c02:	7323      	strb	r3, [r4, #12]
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
 80a3c04:	4608      	mov	r0, r1
{
	init();
	char buf[34];
	itoa(value, buf, base);
 80a3c06:	a901      	add	r1, sp, #4
 80a3c08:	f7ff fc47 	bl	80a349a <itoa>
	*this = buf;
 80a3c0c:	a901      	add	r1, sp, #4
 80a3c0e:	4620      	mov	r0, r4
 80a3c10:	f7ff ffcd 	bl	80a3bae <_ZN6StringaSEPKc>
}
 80a3c14:	4620      	mov	r0, r4
 80a3c16:	b00a      	add	sp, #40	; 0x28
 80a3c18:	bd10      	pop	{r4, pc}

080a3c1a <_ZN6StringC1Ejh>:

String::String(unsigned int value, unsigned char base)
 80a3c1a:	b510      	push	{r4, lr}
 80a3c1c:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a3c1e:	2300      	movs	r3, #0
	char buf[34];
	itoa(value, buf, base);
	*this = buf;
}

String::String(unsigned int value, unsigned char base)
 80a3c20:	b08a      	sub	sp, #40	; 0x28
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a3c22:	6023      	str	r3, [r4, #0]
	capacity = 0;
 80a3c24:	6063      	str	r3, [r4, #4]
	len = 0;
 80a3c26:	60a3      	str	r3, [r4, #8]
	flags = 0;
 80a3c28:	7323      	strb	r3, [r4, #12]
	char buf[34];
	itoa(value, buf, base);
	*this = buf;
}

String::String(unsigned int value, unsigned char base)
 80a3c2a:	4608      	mov	r0, r1
{
	init();
	char buf[33];
	utoa(value, buf, base);
 80a3c2c:	a901      	add	r1, sp, #4
 80a3c2e:	f7ff fc4a 	bl	80a34c6 <utoa>
	*this = buf;
 80a3c32:	a901      	add	r1, sp, #4
 80a3c34:	4620      	mov	r0, r4
 80a3c36:	f7ff ffba 	bl	80a3bae <_ZN6StringaSEPKc>
}
 80a3c3a:	4620      	mov	r0, r4
 80a3c3c:	b00a      	add	sp, #40	; 0x28
 80a3c3e:	bd10      	pop	{r4, pc}

080a3c40 <_ZN6StringC1Emh>:
	char buf[34];
	ltoa(value, buf, base);
	*this = buf;
}

String::String(unsigned long value, unsigned char base)
 80a3c40:	b510      	push	{r4, lr}
 80a3c42:	4604      	mov	r4, r0
 80a3c44:	b08a      	sub	sp, #40	; 0x28
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a3c46:	2300      	movs	r3, #0
 80a3c48:	6023      	str	r3, [r4, #0]
	capacity = 0;
 80a3c4a:	6063      	str	r3, [r4, #4]
	len = 0;
 80a3c4c:	60a3      	str	r3, [r4, #8]
	flags = 0;
 80a3c4e:	7323      	strb	r3, [r4, #12]
	char buf[34];
	ltoa(value, buf, base);
	*this = buf;
}

String::String(unsigned long value, unsigned char base)
 80a3c50:	4608      	mov	r0, r1
{
	init();
	char buf[33];
	ultoa(value, buf, base);
 80a3c52:	2301      	movs	r3, #1
 80a3c54:	a901      	add	r1, sp, #4
 80a3c56:	f7ff fbf8 	bl	80a344a <ultoa>
	*this = buf;
 80a3c5a:	a901      	add	r1, sp, #4
 80a3c5c:	4620      	mov	r0, r4
 80a3c5e:	f7ff ffa6 	bl	80a3bae <_ZN6StringaSEPKc>
}
 80a3c62:	4620      	mov	r0, r4
 80a3c64:	b00a      	add	sp, #40	; 0x28
 80a3c66:	bd10      	pop	{r4, pc}

080a3c68 <_ZN6StringC1Efi>:

String::String(float value, int decimalPlaces)
 80a3c68:	b530      	push	{r4, r5, lr}
 80a3c6a:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a3c6c:	2300      	movs	r3, #0
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::String(float value, int decimalPlaces)
 80a3c6e:	b08b      	sub	sp, #44	; 0x2c
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a3c70:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a3c72:	6043      	str	r3, [r0, #4]
	len = 0;
 80a3c74:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a3c76:	7303      	strb	r3, [r0, #12]

String::String(float value, int decimalPlaces)
{
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
 80a3c78:	b2d5      	uxtb	r5, r2
 80a3c7a:	4608      	mov	r0, r1
 80a3c7c:	f001 fb50 	bl	80a5320 <__aeabi_f2d>
 80a3c80:	ab01      	add	r3, sp, #4
 80a3c82:	462a      	mov	r2, r5
 80a3c84:	f7ff fe98 	bl	80a39b8 <_Z4dtoadhPc>
        *this = buf;
 80a3c88:	a901      	add	r1, sp, #4
 80a3c8a:	4620      	mov	r0, r4
 80a3c8c:	f7ff ff8f 	bl	80a3bae <_ZN6StringaSEPKc>
}
 80a3c90:	4620      	mov	r0, r4
 80a3c92:	b00b      	add	sp, #44	; 0x2c
 80a3c94:	bd30      	pop	{r4, r5, pc}

080a3c96 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
 80a3c96:	b570      	push	{r4, r5, r6, lr}
 80a3c98:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
 80a3c9a:	460e      	mov	r6, r1
 80a3c9c:	b909      	cbnz	r1, 80a3ca2 <_ZN6String6concatEPKcj+0xc>
 80a3c9e:	2000      	movs	r0, #0
 80a3ca0:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
 80a3ca2:	b16a      	cbz	r2, 80a3cc0 <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
 80a3ca4:	6883      	ldr	r3, [r0, #8]
 80a3ca6:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
 80a3ca8:	4629      	mov	r1, r5
 80a3caa:	f7ff ff05 	bl	80a3ab8 <_ZN6String7reserveEj>
 80a3cae:	2800      	cmp	r0, #0
 80a3cb0:	d0f5      	beq.n	80a3c9e <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
 80a3cb2:	6820      	ldr	r0, [r4, #0]
 80a3cb4:	68a3      	ldr	r3, [r4, #8]
 80a3cb6:	4631      	mov	r1, r6
 80a3cb8:	4418      	add	r0, r3
 80a3cba:	f002 fd0f 	bl	80a66dc <strcpy>
	len = newlen;
 80a3cbe:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
 80a3cc0:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
 80a3cc2:	bd70      	pop	{r4, r5, r6, pc}

080a3cc4 <_ZN6String6concatERKS_>:
/*  concat                                   */
/*********************************************/

unsigned char String::concat(const String &s)
{
	return concat(s.buffer, s.len);
 80a3cc4:	688a      	ldr	r2, [r1, #8]
 80a3cc6:	6809      	ldr	r1, [r1, #0]
 80a3cc8:	f7ff bfe5 	b.w	80a3c96 <_ZN6String6concatEPKcj>

080a3ccc <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
 80a3ccc:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
 80a3cce:	2300      	movs	r3, #0
}

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
 80a3cd0:	f88d 1004 	strb.w	r1, [sp, #4]
	buf[1] = 0;
	return concat(buf, 1);
 80a3cd4:	2201      	movs	r2, #1
 80a3cd6:	a901      	add	r1, sp, #4

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
 80a3cd8:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
 80a3cdc:	f7ff ffdb 	bl	80a3c96 <_ZN6String6concatEPKcj>
}
 80a3ce0:	b003      	add	sp, #12
 80a3ce2:	f85d fb04 	ldr.w	pc, [sp], #4

080a3ce6 <_ZN6String6concatEi>:
	itoa(num, buf, 10);
	return concat(buf, strlen(buf));
}

unsigned char String::concat(int num)
{
 80a3ce6:	b513      	push	{r0, r1, r4, lr}
	char buf[7];
	itoa(num, buf, 10);
 80a3ce8:	220a      	movs	r2, #10
	itoa(num, buf, 10);
	return concat(buf, strlen(buf));
}

unsigned char String::concat(int num)
{
 80a3cea:	4604      	mov	r4, r0
 80a3cec:	4608      	mov	r0, r1
	char buf[7];
	itoa(num, buf, 10);
 80a3cee:	4669      	mov	r1, sp
 80a3cf0:	f7ff fbd3 	bl	80a349a <itoa>
	return concat(buf, strlen(buf));
 80a3cf4:	4668      	mov	r0, sp
 80a3cf6:	f003 fa0d 	bl	80a7114 <strlen>
 80a3cfa:	4669      	mov	r1, sp
 80a3cfc:	4602      	mov	r2, r0
 80a3cfe:	4620      	mov	r0, r4
 80a3d00:	f7ff ffc9 	bl	80a3c96 <_ZN6String6concatEPKcj>
}
 80a3d04:	b002      	add	sp, #8
 80a3d06:	bd10      	pop	{r4, pc}

080a3d08 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 80a3d08:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 80a3d0a:	688a      	ldr	r2, [r1, #8]
 80a3d0c:	6809      	ldr	r1, [r1, #0]
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 80a3d0e:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 80a3d10:	f7ff ffc1 	bl	80a3c96 <_ZN6String6concatEPKcj>
 80a3d14:	b910      	cbnz	r0, 80a3d1c <_ZplRK15StringSumHelperRK6String+0x14>
 80a3d16:	4620      	mov	r0, r4
 80a3d18:	f7ff feb7 	bl	80a3a8a <_ZN6String10invalidateEv>
	return a;
}
 80a3d1c:	4620      	mov	r0, r4
 80a3d1e:	bd10      	pop	{r4, pc}

080a3d20 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
 80a3d20:	b538      	push	{r3, r4, r5, lr}
 80a3d22:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
 80a3d24:	460d      	mov	r5, r1
 80a3d26:	b141      	cbz	r1, 80a3d3a <_ZplRK15StringSumHelperPKc+0x1a>
 80a3d28:	4608      	mov	r0, r1
 80a3d2a:	f003 f9f3 	bl	80a7114 <strlen>
 80a3d2e:	4629      	mov	r1, r5
 80a3d30:	4602      	mov	r2, r0
 80a3d32:	4620      	mov	r0, r4
 80a3d34:	f7ff ffaf 	bl	80a3c96 <_ZN6String6concatEPKcj>
 80a3d38:	b910      	cbnz	r0, 80a3d40 <_ZplRK15StringSumHelperPKc+0x20>
 80a3d3a:	4620      	mov	r0, r4
 80a3d3c:	f7ff fea5 	bl	80a3a8a <_ZN6String10invalidateEv>
	return a;
}
 80a3d40:	4620      	mov	r0, r4
 80a3d42:	bd38      	pop	{r3, r4, r5, pc}

080a3d44 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 80a3d44:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
 80a3d46:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 80a3d48:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
 80a3d4a:	b912      	cbnz	r2, 80a3d52 <_ZNK6String6equalsEPKc+0xe>
 80a3d4c:	b919      	cbnz	r1, 80a3d56 <_ZNK6String6equalsEPKc+0x12>
 80a3d4e:	2001      	movs	r0, #1
 80a3d50:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
 80a3d52:	b911      	cbnz	r1, 80a3d5a <_ZNK6String6equalsEPKc+0x16>
 80a3d54:	6803      	ldr	r3, [r0, #0]
 80a3d56:	7818      	ldrb	r0, [r3, #0]
 80a3d58:	e002      	b.n	80a3d60 <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
 80a3d5a:	6800      	ldr	r0, [r0, #0]
 80a3d5c:	f002 fcb4 	bl	80a66c8 <strcmp>
 80a3d60:	fab0 f080 	clz	r0, r0
 80a3d64:	0940      	lsrs	r0, r0, #5
}
 80a3d66:	bd08      	pop	{r3, pc}

080a3d68 <_ZN6StringixEj>:
}

char & String::operator[](unsigned int index)
{
	static char dummy_writable_char;
	if (index >= len || !buffer) {
 80a3d68:	6883      	ldr	r3, [r0, #8]
 80a3d6a:	428b      	cmp	r3, r1
 80a3d6c:	d901      	bls.n	80a3d72 <_ZN6StringixEj+0xa>
 80a3d6e:	6800      	ldr	r0, [r0, #0]
 80a3d70:	b918      	cbnz	r0, 80a3d7a <_ZN6StringixEj+0x12>
		dummy_writable_char = 0;
 80a3d72:	4803      	ldr	r0, [pc, #12]	; (80a3d80 <_ZN6StringixEj+0x18>)
 80a3d74:	2300      	movs	r3, #0
 80a3d76:	7003      	strb	r3, [r0, #0]
		return dummy_writable_char;
 80a3d78:	4770      	bx	lr
	}
	return buffer[index];
 80a3d7a:	4408      	add	r0, r1
}
 80a3d7c:	4770      	bx	lr
 80a3d7e:	bf00      	nop
 80a3d80:	2000050c 	.word	0x2000050c

080a3d84 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
 80a3d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a3d86:	461d      	mov	r5, r3
	if (left > right) {
 80a3d88:	429a      	cmp	r2, r3
 80a3d8a:	bf88      	it	hi
 80a3d8c:	4613      	movhi	r3, r2
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
 80a3d8e:	460f      	mov	r7, r1
 80a3d90:	4614      	mov	r4, r2
	if (left > right) {
 80a3d92:	bf88      	it	hi
 80a3d94:	462c      	movhi	r4, r5
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
 80a3d96:	490b      	ldr	r1, [pc, #44]	; (80a3dc4 <_ZNK6String9substringEjj+0x40>)
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
	if (left > right) {
 80a3d98:	bf88      	it	hi
 80a3d9a:	461d      	movhi	r5, r3
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
 80a3d9c:	4606      	mov	r6, r0
	if (left > right) {
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
 80a3d9e:	f7ff feb4 	bl	80a3b0a <_ZN6StringC1EPK19__FlashStringHelper>
	if (left > len) return out;
 80a3da2:	68ba      	ldr	r2, [r7, #8]
 80a3da4:	4294      	cmp	r4, r2
 80a3da6:	d80a      	bhi.n	80a3dbe <_ZNK6String9substringEjj+0x3a>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
 80a3da8:	6839      	ldr	r1, [r7, #0]
 80a3daa:	4295      	cmp	r5, r2
 80a3dac:	bf94      	ite	ls
 80a3dae:	ebc4 0205 	rsbls	r2, r4, r5
 80a3db2:	ebc4 0202 	rsbhi	r2, r4, r2
 80a3db6:	4421      	add	r1, r4
 80a3db8:	4630      	mov	r0, r6
 80a3dba:	f7ff fe8e 	bl	80a3ada <_ZN6String4copyEPKcj>
	return out;
}
 80a3dbe:	4630      	mov	r0, r6
 80a3dc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a3dc2:	bf00      	nop
 80a3dc4:	080a997b 	.word	0x080a997b

080a3dc8 <_ZNK6String9substringEj>:
	}
	return found;
}

String String::substring( unsigned int left ) const
{
 80a3dc8:	b510      	push	{r4, lr}
 80a3dca:	4604      	mov	r4, r0
	return substring(left, len);
 80a3dcc:	688b      	ldr	r3, [r1, #8]
 80a3dce:	f7ff ffd9 	bl	80a3d84 <_ZNK6String9substringEjj>
}
 80a3dd2:	4620      	mov	r0, r4
 80a3dd4:	bd10      	pop	{r4, pc}

080a3dd6 <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
 80a3dd6:	6800      	ldr	r0, [r0, #0]
 80a3dd8:	b108      	cbz	r0, 80a3dde <_ZNK6String5toIntEv+0x8>
 80a3dda:	f002 bb2a 	b.w	80a6432 <atol>
	return 0;
}
 80a3dde:	4770      	bx	lr

080a3de0 <_ZNK6String7toFloatEv>:


float String::toFloat(void) const
{
 80a3de0:	b508      	push	{r3, lr}
	if (buffer) return float(atof(buffer));
 80a3de2:	6800      	ldr	r0, [r0, #0]
 80a3de4:	b120      	cbz	r0, 80a3df0 <_ZNK6String7toFloatEv+0x10>
 80a3de6:	f002 fb21 	bl	80a642c <atof>
 80a3dea:	f001 fde5 	bl	80a59b8 <__aeabi_d2f>
 80a3dee:	bd08      	pop	{r3, pc}
	return 0;
 80a3df0:	2000      	movs	r0, #0
}
 80a3df2:	bd08      	pop	{r3, pc}

080a3df4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a3df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a3df6:	4606      	mov	r6, r0
 80a3df8:	460d      	mov	r5, r1
 80a3dfa:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a3dfc:	2400      	movs	r4, #0
  while (size--) {
 80a3dfe:	42bd      	cmp	r5, r7
 80a3e00:	d00c      	beq.n	80a3e1c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a3e02:	6833      	ldr	r3, [r6, #0]
 80a3e04:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a3e08:	689b      	ldr	r3, [r3, #8]
 80a3e0a:	4630      	mov	r0, r6
 80a3e0c:	4798      	blx	r3
     if (chunk>=0)
 80a3e0e:	2800      	cmp	r0, #0
 80a3e10:	db01      	blt.n	80a3e16 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a3e12:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a3e14:	e7f3      	b.n	80a3dfe <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a3e16:	2c00      	cmp	r4, #0
 80a3e18:	bf08      	it	eq
 80a3e1a:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a3e1c:	4620      	mov	r0, r4
 80a3e1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a3e20 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a3e20:	b570      	push	{r4, r5, r6, lr}
 80a3e22:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a3e24:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a3e26:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a3e28:	b149      	cbz	r1, 80a3e3e <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a3e2a:	f003 f973 	bl	80a7114 <strlen>
 80a3e2e:	682b      	ldr	r3, [r5, #0]
 80a3e30:	4602      	mov	r2, r0
 80a3e32:	4621      	mov	r1, r4
 80a3e34:	4628      	mov	r0, r5
    }
 80a3e36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a3e3a:	68db      	ldr	r3, [r3, #12]
 80a3e3c:	4718      	bx	r3
    }
 80a3e3e:	bd70      	pop	{r4, r5, r6, pc}

080a3e40 <_ZN5Print5printEPKc>:
 80a3e40:	b508      	push	{r3, lr}
 80a3e42:	f7ff ffed 	bl	80a3e20 <_ZN5Print5writeEPKc>
 80a3e46:	bd08      	pop	{r3, pc}

080a3e48 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a3e48:	6803      	ldr	r3, [r0, #0]
 80a3e4a:	689b      	ldr	r3, [r3, #8]
 80a3e4c:	4718      	bx	r3

080a3e4e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a3e4e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a3e50:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a3e52:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a3e54:	f7ff fff8 	bl	80a3e48 <_ZN5Print5printEc>
  n += print('\n');
 80a3e58:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80a3e5a:	4604      	mov	r4, r0
  n += print('\n');
 80a3e5c:	4628      	mov	r0, r5
 80a3e5e:	f7ff fff3 	bl	80a3e48 <_ZN5Print5printEc>
  return n;
}
 80a3e62:	4420      	add	r0, r4
 80a3e64:	bd38      	pop	{r3, r4, r5, pc}

080a3e66 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a3e66:	b538      	push	{r3, r4, r5, lr}
 80a3e68:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a3e6a:	f7ff ffd9 	bl	80a3e20 <_ZN5Print5writeEPKc>
 80a3e6e:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 80a3e70:	4628      	mov	r0, r5
 80a3e72:	f7ff ffec 	bl	80a3e4e <_ZN5Print7printlnEv>
  return n;
}
 80a3e76:	4420      	add	r0, r4
 80a3e78:	bd38      	pop	{r3, r4, r5, pc}

080a3e7a <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a3e7a:	2a01      	cmp	r2, #1
 80a3e7c:	bf98      	it	ls
 80a3e7e:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a3e80:	b530      	push	{r4, r5, lr}
 80a3e82:	460b      	mov	r3, r1
 80a3e84:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a3e86:	2100      	movs	r1, #0
 80a3e88:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a3e8c:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   decltype(n) m = n;
   n /= base;
 80a3e90:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
 80a3e94:	fb05 3312 	mls	r3, r5, r2, r3
 80a3e98:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a3e9a:	2b09      	cmp	r3, #9
 80a3e9c:	bf94      	ite	ls
 80a3e9e:	3330      	addls	r3, #48	; 0x30
 80a3ea0:	3337      	addhi	r3, #55	; 0x37
 80a3ea2:	b2db      	uxtb	r3, r3
 80a3ea4:	4621      	mov	r1, r4
 80a3ea6:	f804 3901 	strb.w	r3, [r4], #-1
 80a3eaa:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a3eac:	2d00      	cmp	r5, #0
 80a3eae:	d1ef      	bne.n	80a3e90 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a3eb0:	f7ff ffb6 	bl	80a3e20 <_ZN5Print5writeEPKc>
}
 80a3eb4:	b00b      	add	sp, #44	; 0x2c
 80a3eb6:	bd30      	pop	{r4, r5, pc}

080a3eb8 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a3eb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a3ebc:	4619      	mov	r1, r3

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a3ebe:	4680      	mov	r8, r0
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a3ec0:	4610      	mov	r0, r2

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a3ec2:	4617      	mov	r7, r2
 80a3ec4:	461e      	mov	r6, r3
 80a3ec6:	f89d 5020 	ldrb.w	r5, [sp, #32]
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a3eca:	f001 fd17 	bl	80a58fc <__aeabi_dcmpun>
 80a3ece:	b108      	cbz	r0, 80a3ed4 <_ZN5Print10printFloatEdh+0x1c>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a3ed0:	494d      	ldr	r1, [pc, #308]	; (80a4008 <_ZN5Print10printFloatEdh+0x150>)
 80a3ed2:	e012      	b.n	80a3efa <_ZN5Print10printFloatEdh+0x42>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
 80a3ed4:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 80a3ed8:	f04f 32ff 	mov.w	r2, #4294967295
 80a3edc:	4b4b      	ldr	r3, [pc, #300]	; (80a400c <_ZN5Print10printFloatEdh+0x154>)
 80a3ede:	4638      	mov	r0, r7
 80a3ee0:	4621      	mov	r1, r4
 80a3ee2:	f001 fd0b 	bl	80a58fc <__aeabi_dcmpun>
 80a3ee6:	b968      	cbnz	r0, 80a3f04 <_ZN5Print10printFloatEdh+0x4c>
 80a3ee8:	f04f 32ff 	mov.w	r2, #4294967295
 80a3eec:	4b47      	ldr	r3, [pc, #284]	; (80a400c <_ZN5Print10printFloatEdh+0x154>)
 80a3eee:	4638      	mov	r0, r7
 80a3ef0:	4621      	mov	r1, r4
 80a3ef2:	f001 fce5 	bl	80a58c0 <__aeabi_dcmple>
 80a3ef6:	b928      	cbnz	r0, 80a3f04 <_ZN5Print10printFloatEdh+0x4c>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a3ef8:	4945      	ldr	r1, [pc, #276]	; (80a4010 <_ZN5Print10printFloatEdh+0x158>)
 80a3efa:	4640      	mov	r0, r8
 80a3efc:	f7ff ff90 	bl	80a3e20 <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
 80a3f00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
 80a3f04:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a3f08:	4b42      	ldr	r3, [pc, #264]	; (80a4014 <_ZN5Print10printFloatEdh+0x15c>)
 80a3f0a:	4638      	mov	r0, r7
 80a3f0c:	4631      	mov	r1, r6
 80a3f0e:	f001 fceb 	bl	80a58e8 <__aeabi_dcmpgt>
 80a3f12:	b108      	cbz	r0, 80a3f18 <_ZN5Print10printFloatEdh+0x60>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a3f14:	4940      	ldr	r1, [pc, #256]	; (80a4018 <_ZN5Print10printFloatEdh+0x160>)
 80a3f16:	e7f0      	b.n	80a3efa <_ZN5Print10printFloatEdh+0x42>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
 80a3f18:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a3f1c:	4b3f      	ldr	r3, [pc, #252]	; (80a401c <_ZN5Print10printFloatEdh+0x164>)
 80a3f1e:	4638      	mov	r0, r7
 80a3f20:	4631      	mov	r1, r6
 80a3f22:	f001 fcc3 	bl	80a58ac <__aeabi_dcmplt>
 80a3f26:	2800      	cmp	r0, #0
 80a3f28:	d1f4      	bne.n	80a3f14 <_ZN5Print10printFloatEdh+0x5c>

  // Handle negative numbers
  if (number < 0.0)
 80a3f2a:	2200      	movs	r2, #0
 80a3f2c:	2300      	movs	r3, #0
 80a3f2e:	4638      	mov	r0, r7
 80a3f30:	4631      	mov	r1, r6
 80a3f32:	f001 fcbb 	bl	80a58ac <__aeabi_dcmplt>
 80a3f36:	b138      	cbz	r0, 80a3f48 <_ZN5Print10printFloatEdh+0x90>
  {
     n += print('-');
 80a3f38:	212d      	movs	r1, #45	; 0x2d
 80a3f3a:	4640      	mov	r0, r8
 80a3f3c:	f7ff ff84 	bl	80a3e48 <_ZN5Print5printEc>
     number = -number;
 80a3f40:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
 80a3f44:	4604      	mov	r4, r0
 80a3f46:	e000      	b.n	80a3f4a <_ZN5Print10printFloatEdh+0x92>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
 80a3f48:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 80a3f4a:	4935      	ldr	r1, [pc, #212]	; (80a4020 <_ZN5Print10printFloatEdh+0x168>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
 80a3f4c:	f04f 0900 	mov.w	r9, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 80a3f50:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
 80a3f52:	fa5f f389 	uxtb.w	r3, r9
 80a3f56:	429d      	cmp	r5, r3
 80a3f58:	d906      	bls.n	80a3f68 <_ZN5Print10printFloatEdh+0xb0>
    rounding /= 10.0;
 80a3f5a:	2200      	movs	r2, #0
 80a3f5c:	4b31      	ldr	r3, [pc, #196]	; (80a4024 <_ZN5Print10printFloatEdh+0x16c>)
 80a3f5e:	f001 fb5d 	bl	80a561c <__aeabi_ddiv>
 80a3f62:	f109 0901 	add.w	r9, r9, #1
 80a3f66:	e7f4      	b.n	80a3f52 <_ZN5Print10printFloatEdh+0x9a>

  number += rounding;
 80a3f68:	463a      	mov	r2, r7
 80a3f6a:	4633      	mov	r3, r6
 80a3f6c:	f001 f87a 	bl	80a5064 <__adddf3>
 80a3f70:	460f      	mov	r7, r1
 80a3f72:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
 80a3f74:	f001 fd00 	bl	80a5978 <__aeabi_d2uiz>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
 80a3f78:	220a      	movs	r2, #10
 80a3f7a:	4601      	mov	r1, r0
 80a3f7c:	4681      	mov	r9, r0
 80a3f7e:	4640      	mov	r0, r8
 80a3f80:	f7ff ff7b 	bl	80a3e7a <_ZN5Print11printNumberEmh>
  double remainder = number - (double)int_part;
  n += print(int_part);
 80a3f84:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
 80a3f86:	b3e5      	cbz	r5, 80a4002 <_ZN5Print10printFloatEdh+0x14a>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
 80a3f88:	4648      	mov	r0, r9
 80a3f8a:	f001 f9a7 	bl	80a52dc <__aeabi_ui2d>
 80a3f8e:	4602      	mov	r2, r0
 80a3f90:	460b      	mov	r3, r1
 80a3f92:	4630      	mov	r0, r6
 80a3f94:	4639      	mov	r1, r7
 80a3f96:	f001 f863 	bl	80a5060 <__aeabi_dsub>
 80a3f9a:	4606      	mov	r6, r0
 80a3f9c:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a3f9e:	4640      	mov	r0, r8
 80a3fa0:	4921      	ldr	r1, [pc, #132]	; (80a4028 <_ZN5Print10printFloatEdh+0x170>)
 80a3fa2:	f7ff ff3d 	bl	80a3e20 <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
 80a3fa6:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
 80a3fa8:	2200      	movs	r2, #0
 80a3faa:	4b1e      	ldr	r3, [pc, #120]	; (80a4024 <_ZN5Print10printFloatEdh+0x16c>)
 80a3fac:	4630      	mov	r0, r6
 80a3fae:	4639      	mov	r1, r7
 80a3fb0:	f001 fa0a 	bl	80a53c8 <__aeabi_dmul>
 80a3fb4:	4606      	mov	r6, r0
 80a3fb6:	460f      	mov	r7, r1
    int toPrint = int(remainder);
 80a3fb8:	f001 fcb6 	bl	80a5928 <__aeabi_d2iz>
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
 80a3fbc:	f1b0 0a00 	subs.w	sl, r0, #0
 80a3fc0:	da07      	bge.n	80a3fd2 <_ZN5Print10printFloatEdh+0x11a>
            t = print('-');
 80a3fc2:	212d      	movs	r1, #45	; 0x2d
 80a3fc4:	4640      	mov	r0, r8
 80a3fc6:	f7ff ff3f 	bl	80a3e48 <_ZN5Print5printEc>
            val = -n;
 80a3fca:	f1ca 0100 	rsb	r1, sl, #0
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
            t = print('-');
 80a3fce:	4681      	mov	r9, r0
 80a3fd0:	e002      	b.n	80a3fd8 <_ZN5Print10printFloatEdh+0x120>
            val = -n;
        } else {
            val = n;
 80a3fd2:	4651      	mov	r1, sl
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
    } else {
        size_t t = 0;
 80a3fd4:	f04f 0900 	mov.w	r9, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
 80a3fd8:	220a      	movs	r2, #10
 80a3fda:	4640      	mov	r0, r8
 80a3fdc:	f7ff ff4d 	bl	80a3e7a <_ZN5Print11printNumberEmh>
    n += print(toPrint);
 80a3fe0:	4448      	add	r0, r9
 80a3fe2:	4404      	add	r4, r0
    remainder -= toPrint;
 80a3fe4:	4650      	mov	r0, sl
 80a3fe6:	f001 f989 	bl	80a52fc <__aeabi_i2d>
 80a3fea:	4602      	mov	r2, r0
 80a3fec:	460b      	mov	r3, r1
 80a3fee:	4630      	mov	r0, r6
 80a3ff0:	4639      	mov	r1, r7
 80a3ff2:	f001 f835 	bl	80a5060 <__aeabi_dsub>
 80a3ff6:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 80a3ff8:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
 80a3ffc:	4606      	mov	r6, r0
 80a3ffe:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 80a4000:	d1d2      	bne.n	80a3fa8 <_ZN5Print10printFloatEdh+0xf0>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
 80a4002:	4620      	mov	r0, r4
 80a4004:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a4008:	080a9af3 	.word	0x080a9af3
 80a400c:	7fefffff 	.word	0x7fefffff
 80a4010:	080a9afb 	.word	0x080a9afb
 80a4014:	41efffff 	.word	0x41efffff
 80a4018:	080a9af7 	.word	0x080a9af7
 80a401c:	c1efffff 	.word	0xc1efffff
 80a4020:	3fe00000 	.word	0x3fe00000
 80a4024:	40240000 	.word	0x40240000
 80a4028:	080a98b9 	.word	0x080a98b9

080a402c <_ZN5Print5printEfi>:
{
  return write(c);
}

size_t Print::print(float n, int digits)
{
 80a402c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a402e:	4605      	mov	r5, r0
 80a4030:	4614      	mov	r4, r2
  return printFloat((double)n, digits);
 80a4032:	4608      	mov	r0, r1
 80a4034:	f001 f974 	bl	80a5320 <__aeabi_f2d>
 80a4038:	b2e4      	uxtb	r4, r4
 80a403a:	4602      	mov	r2, r0
 80a403c:	9400      	str	r4, [sp, #0]
 80a403e:	460b      	mov	r3, r1
 80a4040:	4628      	mov	r0, r5
 80a4042:	f7ff ff39 	bl	80a3eb8 <_ZN5Print10printFloatEdh>
}
 80a4046:	b003      	add	sp, #12
 80a4048:	bd30      	pop	{r4, r5, pc}

080a404a <_ZN5Print7printlnEdi>:
{
    return println((double)num, digits);
}

size_t Print::println(double num, int digits)
{
 80a404a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  return printFloat((double)n, digits);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
 80a404c:	f89d 1018 	ldrb.w	r1, [sp, #24]
{
    return println((double)num, digits);
}

size_t Print::println(double num, int digits)
{
 80a4050:	4605      	mov	r5, r0
  return printFloat((double)n, digits);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
 80a4052:	9100      	str	r1, [sp, #0]
 80a4054:	f7ff ff30 	bl	80a3eb8 <_ZN5Print10printFloatEdh>
 80a4058:	4604      	mov	r4, r0
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
 80a405a:	4628      	mov	r0, r5
 80a405c:	f7ff fef7 	bl	80a3e4e <_ZN5Print7printlnEv>
  return n;
}
 80a4060:	4420      	add	r0, r4
 80a4062:	b003      	add	sp, #12
 80a4064:	bd30      	pop	{r4, r5, pc}

080a4066 <_ZN5Print7printlnEfi>:
  n += println();
  return n;
}

size_t Print::println(float num, int digits)
{
 80a4066:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a4068:	4604      	mov	r4, r0
    return println((double)num, digits);
 80a406a:	4608      	mov	r0, r1
  n += println();
  return n;
}

size_t Print::println(float num, int digits)
{
 80a406c:	4615      	mov	r5, r2
    return println((double)num, digits);
 80a406e:	f001 f957 	bl	80a5320 <__aeabi_f2d>
 80a4072:	9500      	str	r5, [sp, #0]
 80a4074:	4602      	mov	r2, r0
 80a4076:	460b      	mov	r3, r1
 80a4078:	4620      	mov	r0, r4
 80a407a:	f7ff ffe6 	bl	80a404a <_ZN5Print7printlnEdi>
}
 80a407e:	b003      	add	sp, #12
 80a4080:	bd30      	pop	{r4, r5, pc}

080a4082 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a4082:	2300      	movs	r3, #0
 80a4084:	461a      	mov	r2, r3
 80a4086:	4619      	mov	r1, r3
 80a4088:	6840      	ldr	r0, [r0, #4]
 80a408a:	f7ff b8bd 	b.w	80a3208 <network_on>
	...

080a4090 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a4090:	4a01      	ldr	r2, [pc, #4]	; (80a4098 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a4092:	4b02      	ldr	r3, [pc, #8]	; (80a409c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a4094:	601a      	str	r2, [r3, #0]
 80a4096:	4770      	bx	lr
 80a4098:	080a9b75 	.word	0x080a9b75
 80a409c:	20000510 	.word	0x20000510

080a40a0 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
 80a40a0:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
 80a40a2:	2000      	movs	r0, #0
 80a40a4:	f7ff f908 	bl	80a32b8 <spark_sync_time_pending>
 80a40a8:	b128      	cbz	r0, 80a40b6 <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a40aa:	f7ff f8fd 	bl	80a32a8 <spark_cloud_flag_connected>
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
 80a40ae:	f080 0001 	eor.w	r0, r0, #1
 80a40b2:	b2c0      	uxtb	r0, r0
 80a40b4:	bd08      	pop	{r3, pc}
 80a40b6:	2001      	movs	r0, #1
    }
 80a40b8:	bd08      	pop	{r3, pc}
	...

080a40bc <_ZN9TimeClass4zoneEf>:
	return HAL_RTC_Get_UnixTime()+time_zone_cache+dst_current_cache;
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
 80a40bc:	b510      	push	{r4, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
 80a40be:	4909      	ldr	r1, [pc, #36]	; (80a40e4 <_ZN9TimeClass4zoneEf+0x28>)
	return HAL_RTC_Get_UnixTime()+time_zone_cache+dst_current_cache;
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
 80a40c0:	4604      	mov	r4, r0
	if(GMT_Offset < -12 || GMT_Offset > 14)
 80a40c2:	f001 ff75 	bl	80a5fb0 <__aeabi_fcmplt>
 80a40c6:	b960      	cbnz	r0, 80a40e2 <_ZN9TimeClass4zoneEf+0x26>
 80a40c8:	4907      	ldr	r1, [pc, #28]	; (80a40e8 <_ZN9TimeClass4zoneEf+0x2c>)
 80a40ca:	4620      	mov	r0, r4
 80a40cc:	f001 ff8e 	bl	80a5fec <__aeabi_fcmpgt>
 80a40d0:	b938      	cbnz	r0, 80a40e2 <_ZN9TimeClass4zoneEf+0x26>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
 80a40d2:	4906      	ldr	r1, [pc, #24]	; (80a40ec <_ZN9TimeClass4zoneEf+0x30>)
 80a40d4:	4620      	mov	r0, r4
 80a40d6:	f001 fdcd 	bl	80a5c74 <__aeabi_fmul>
 80a40da:	f001 ff91 	bl	80a6000 <__aeabi_f2iz>
 80a40de:	4b04      	ldr	r3, [pc, #16]	; (80a40f0 <_ZN9TimeClass4zoneEf+0x34>)
 80a40e0:	6018      	str	r0, [r3, #0]
 80a40e2:	bd10      	pop	{r4, pc}
 80a40e4:	c1400000 	.word	0xc1400000
 80a40e8:	41600000 	.word	0x41600000
 80a40ec:	45610000 	.word	0x45610000
 80a40f0:	2000051c 	.word	0x2000051c

080a40f4 <_ZN9TimeClass7timeStrEl>:
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 80a40f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	t += time_zone_cache;
    t += dst_current_cache;
 80a40f6:	4b0e      	ldr	r3, [pc, #56]	; (80a4130 <_ZN9TimeClass7timeStrEl+0x3c>)
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 80a40f8:	4604      	mov	r4, r0
	t += time_zone_cache;
    t += dst_current_cache;
 80a40fa:	681b      	ldr	r3, [r3, #0]
 80a40fc:	a802      	add	r0, sp, #8
 80a40fe:	4419      	add	r1, r3
 80a4100:	4b0c      	ldr	r3, [pc, #48]	; (80a4134 <_ZN9TimeClass7timeStrEl+0x40>)
 80a4102:	681b      	ldr	r3, [r3, #0]
 80a4104:	4419      	add	r1, r3
 80a4106:	f840 1d04 	str.w	r1, [r0, #-4]!
	tm* calendar_time = localtime(&t);
 80a410a:	f002 f9a5 	bl	80a6458 <localtime>
        char* ascstr = asctime(calendar_time);
 80a410e:	f002 f951 	bl	80a63b4 <asctime>
 80a4112:	4605      	mov	r5, r0
        int len = strlen(ascstr);
 80a4114:	f002 fffe 	bl	80a7114 <strlen>
        ascstr[len-1] = 0; // remove final newline
 80a4118:	2300      	movs	r3, #0
 80a411a:	4428      	add	r0, r5
 80a411c:	f800 3c01 	strb.w	r3, [r0, #-1]
	return String(ascstr);
 80a4120:	4629      	mov	r1, r5
 80a4122:	4620      	mov	r0, r4
 80a4124:	f7ff fcf1 	bl	80a3b0a <_ZN6StringC1EPK19__FlashStringHelper>
}
 80a4128:	4620      	mov	r0, r4
 80a412a:	b003      	add	sp, #12
 80a412c:	bd30      	pop	{r4, r5, pc}
 80a412e:	bf00      	nop
 80a4130:	2000051c 	.word	0x2000051c
 80a4134:	20000518 	.word	0x20000518

080a4138 <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 80a4138:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a413c:	b0a4      	sub	sp, #144	; 0x90
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 80a413e:	ac14      	add	r4, sp, #80	; 0x50
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 80a4140:	4607      	mov	r7, r0
 80a4142:	4689      	mov	r9, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 80a4144:	4620      	mov	r0, r4
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 80a4146:	4611      	mov	r1, r2
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 80a4148:	223f      	movs	r2, #63	; 0x3f
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 80a414a:	461d      	mov	r5, r3
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 80a414c:	f002 ffff 	bl	80a714e <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
 80a4150:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
 80a4152:	4620      	mov	r0, r4
String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
 80a4154:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
 80a4158:	f002 ffdc 	bl	80a7114 <strlen>
 80a415c:	4680      	mov	r8, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
 80a415e:	b925      	cbnz	r5, 80a416a <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        strcpy(time_zone_str, "Z");
 80a4160:	4924      	ldr	r1, [pc, #144]	; (80a41f4 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xbc>)
 80a4162:	a803      	add	r0, sp, #12
 80a4164:	f002 faba 	bl	80a66dc <strcpy>
 80a4168:	e013      	b.n	80a4192 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x5a>
    }
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
 80a416a:	213c      	movs	r1, #60	; 0x3c
 80a416c:	fb95 f2f1 	sdiv	r2, r5, r1
 80a4170:	2a00      	cmp	r2, #0
 80a4172:	bfb8      	it	lt
 80a4174:	4252      	neglt	r2, r2
 80a4176:	fb92 f3f1 	sdiv	r3, r2, r1
 80a417a:	fb01 2213 	mls	r2, r1, r3, r2
 80a417e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80a4182:	9200      	str	r2, [sp, #0]
 80a4184:	fb95 f3f3 	sdiv	r3, r5, r3
 80a4188:	4a1b      	ldr	r2, [pc, #108]	; (80a41f8 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xc0>)
 80a418a:	2110      	movs	r1, #16
 80a418c:	a803      	add	r0, sp, #12
 80a418e:	f7ff f8cb 	bl	80a3328 <snprintf>
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 80a4192:	4625      	mov	r5, r4
 80a4194:	1b2e      	subs	r6, r5, r4
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
 80a4196:	f108 3aff 	add.w	sl, r8, #4294967295
 80a419a:	45b2      	cmp	sl, r6
 80a419c:	d91b      	bls.n	80a41d6 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x9e>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
 80a419e:	782b      	ldrb	r3, [r5, #0]
 80a41a0:	2b25      	cmp	r3, #37	; 0x25
 80a41a2:	d116      	bne.n	80a41d2 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x9a>
 80a41a4:	786b      	ldrb	r3, [r5, #1]
 80a41a6:	2b7a      	cmp	r3, #122	; 0x7a
 80a41a8:	d113      	bne.n	80a41d2 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x9a>
        {
            size_t tzlen = strlen(time_zone_str);
 80a41aa:	a803      	add	r0, sp, #12
 80a41ac:	f002 ffb2 	bl	80a7114 <strlen>
 80a41b0:	4680      	mov	r8, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
 80a41b2:	4430      	add	r0, r6
 80a41b4:	ebc6 020a 	rsb	r2, r6, sl
 80a41b8:	1ca9      	adds	r1, r5, #2
 80a41ba:	4420      	add	r0, r4
 80a41bc:	f002 fa48 	bl	80a6650 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
 80a41c0:	4642      	mov	r2, r8
 80a41c2:	a903      	add	r1, sp, #12
 80a41c4:	4628      	mov	r0, r5
 80a41c6:	f002 fa43 	bl	80a6650 <memcpy>
            len = strlen(format_str);
 80a41ca:	4620      	mov	r0, r4
 80a41cc:	f002 ffa2 	bl	80a7114 <strlen>
 80a41d0:	4680      	mov	r8, r0
 80a41d2:	3501      	adds	r5, #1
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
 80a41d4:	e7de      	b.n	80a4194 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x5c>
            len = strlen(format_str);
        }
    }

    char buf[50];
    strftime(buf, 50, format_str, calendar_time);
 80a41d6:	464b      	mov	r3, r9
 80a41d8:	4622      	mov	r2, r4
 80a41da:	2132      	movs	r1, #50	; 0x32
 80a41dc:	a807      	add	r0, sp, #28
 80a41de:	f002 fae5 	bl	80a67ac <strftime>
    return String(buf);
 80a41e2:	a907      	add	r1, sp, #28
 80a41e4:	4638      	mov	r0, r7
 80a41e6:	f7ff fc90 	bl	80a3b0a <_ZN6StringC1EPK19__FlashStringHelper>
}
 80a41ea:	4638      	mov	r0, r7
 80a41ec:	b024      	add	sp, #144	; 0x90
 80a41ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a41f2:	bf00      	nop
 80a41f4:	080aa22d 	.word	0x080aa22d
 80a41f8:	080a9bdb 	.word	0x080a9bdb

080a41fc <_ZN9TimeClass6formatElPKc>:
        ascstr[len-1] = 0; // remove final newline
	return String(ascstr);
}

String TimeClass::format(time_t t, const char* format_spec)
{
 80a41fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80a41fe:	4605      	mov	r5, r0
 80a4200:	9201      	str	r2, [sp, #4]
    if (format_spec==NULL)
 80a4202:	461c      	mov	r4, r3
 80a4204:	b913      	cbnz	r3, 80a420c <_ZN9TimeClass6formatElPKc+0x10>
        format_spec = this->format_spec;
 80a4206:	4b12      	ldr	r3, [pc, #72]	; (80a4250 <_ZN9TimeClass6formatElPKc+0x54>)
 80a4208:	681c      	ldr	r4, [r3, #0]

    if (!format_spec || !strcmp(format_spec,TIME_FORMAT_DEFAULT)) {
 80a420a:	b12c      	cbz	r4, 80a4218 <_ZN9TimeClass6formatElPKc+0x1c>
 80a420c:	4b11      	ldr	r3, [pc, #68]	; (80a4254 <_ZN9TimeClass6formatElPKc+0x58>)
 80a420e:	4620      	mov	r0, r4
 80a4210:	6819      	ldr	r1, [r3, #0]
 80a4212:	f002 fa59 	bl	80a66c8 <strcmp>
 80a4216:	b920      	cbnz	r0, 80a4222 <_ZN9TimeClass6formatElPKc+0x26>
        return timeStr(t);
 80a4218:	9901      	ldr	r1, [sp, #4]
 80a421a:	4628      	mov	r0, r5
 80a421c:	f7ff ff6a 	bl	80a40f4 <_ZN9TimeClass7timeStrEl>
 80a4220:	e013      	b.n	80a424a <_ZN9TimeClass6formatElPKc+0x4e>
    }
    t += time_zone_cache;
 80a4222:	4f0d      	ldr	r7, [pc, #52]	; (80a4258 <_ZN9TimeClass6formatElPKc+0x5c>)
    t += dst_current_cache;
 80a4224:	9a01      	ldr	r2, [sp, #4]
 80a4226:	683b      	ldr	r3, [r7, #0]
 80a4228:	4e0c      	ldr	r6, [pc, #48]	; (80a425c <_ZN9TimeClass6formatElPKc+0x60>)
 80a422a:	441a      	add	r2, r3
 80a422c:	6833      	ldr	r3, [r6, #0]
 80a422e:	a802      	add	r0, sp, #8
 80a4230:	4413      	add	r3, r2
 80a4232:	f840 3d04 	str.w	r3, [r0, #-4]!
    tm* calendar_time = localtime(&t);
 80a4236:	f002 f90f 	bl	80a6458 <localtime>
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
 80a423a:	683a      	ldr	r2, [r7, #0]
 80a423c:	6833      	ldr	r3, [r6, #0]
 80a423e:	4601      	mov	r1, r0
 80a4240:	4413      	add	r3, r2
 80a4242:	4628      	mov	r0, r5
 80a4244:	4622      	mov	r2, r4
 80a4246:	f7ff ff77 	bl	80a4138 <_ZN9TimeClass14timeFormatImplEP2tmPKci>
}
 80a424a:	4628      	mov	r0, r5
 80a424c:	b003      	add	sp, #12
 80a424e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a4250:	20000514 	.word	0x20000514
 80a4254:	2000000c 	.word	0x2000000c
 80a4258:	2000051c 	.word	0x2000051c
 80a425c:	20000518 	.word	0x20000518

080a4260 <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
 80a4260:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
 80a4262:	2000      	movs	r0, #0
 80a4264:	f7fe fe12 	bl	80a2e8c <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
 80a4268:	4604      	mov	r4, r0
 80a426a:	b968      	cbnz	r0, 80a4288 <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 80a426c:	f7fe ff78 	bl	80a3160 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 80a4270:	2801      	cmp	r0, #1
 80a4272:	d10b      	bne.n	80a428c <_ZN9TimeClass7isValidEv+0x2c>
 80a4274:	4620      	mov	r0, r4
 80a4276:	f7fe ff8b 	bl	80a3190 <system_thread_get_state>
 80a427a:	b938      	cbnz	r0, 80a428c <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
 80a427c:	f7ff ff10 	bl	80a40a0 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80a4280:	b930      	cbnz	r0, 80a4290 <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
 80a4282:	f7ff f801 	bl	80a3288 <spark_process>
 80a4286:	e7f9      	b.n	80a427c <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
 80a4288:	2001      	movs	r0, #1
 80a428a:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
 80a428c:	2000      	movs	r0, #0
 80a428e:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
 80a4290:	f7ff ff06 	bl	80a40a0 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
 80a4294:	2000      	movs	r0, #0
 80a4296:	f7fe fdf9 	bl	80a2e8c <HAL_RTC_Time_Is_Valid>
 80a429a:	3000      	adds	r0, #0
 80a429c:	bf18      	it	ne
 80a429e:	2001      	movne	r0, #1
    }
    return rtcstate;
}
 80a42a0:	bd10      	pop	{r4, pc}

080a42a2 <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
 80a42a2:	b508      	push	{r3, lr}
    (void)isValid();
 80a42a4:	f7ff ffdc 	bl	80a4260 <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
 80a42a8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
 80a42ac:	f7fe bde6 	b.w	80a2e7c <HAL_RTC_Get_UnixTime>

080a42b0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a42b0:	4b02      	ldr	r3, [pc, #8]	; (80a42bc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a42b2:	681a      	ldr	r2, [r3, #0]
 80a42b4:	4b02      	ldr	r3, [pc, #8]	; (80a42c0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a42b6:	601a      	str	r2, [r3, #0]
 80a42b8:	4770      	bx	lr
 80a42ba:	bf00      	nop
 80a42bc:	2000000c 	.word	0x2000000c
 80a42c0:	20000514 	.word	0x20000514

080a42c4 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a42c4:	2100      	movs	r1, #0
 80a42c6:	f7fe bf5b 	b.w	80a3180 <system_delay_ms>

080a42ca <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a42ca:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a42cc:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a42ce:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a42d0:	b113      	cbz	r3, 80a42d8 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a42d2:	2203      	movs	r2, #3
 80a42d4:	4601      	mov	r1, r0
 80a42d6:	4798      	blx	r3
    }
 80a42d8:	4620      	mov	r0, r4
 80a42da:	bd10      	pop	{r4, pc}

080a42dc <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a42dc:	b510      	push	{r4, lr}
 80a42de:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a42e0:	f7ff fff3 	bl	80a42ca <_ZNSt14_Function_baseD1Ev>
 80a42e4:	4620      	mov	r0, r4
 80a42e6:	bd10      	pop	{r4, pc}

080a42e8 <_ZN8RGBClass7controlEb>:
{
    return LED_RGB_IsOverRidden();
}

void RGBClass::control(bool override)
{
 80a42e8:	b510      	push	{r4, lr}
 80a42ea:	4604      	mov	r4, r0

RGBClass RGB;

bool RGBClass::controlled(void)
{
    return LED_RGB_IsOverRidden();
 80a42ec:	f7fe ff28 	bl	80a3140 <LED_RGB_IsOverRidden>
}

void RGBClass::control(bool override)
{
    if (override == controlled()) {
 80a42f0:	4284      	cmp	r4, r0
 80a42f2:	d008      	beq.n	80a4306 <_ZN8RGBClass7controlEb+0x1e>
        return;
    } else if (override) {
 80a42f4:	b11c      	cbz	r4, 80a42fe <_ZN8RGBClass7controlEb+0x16>
        LED_Signaling_Start();
    } else {
        LED_Signaling_Stop();
    }
}
 80a42f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void RGBClass::control(bool override)
{
    if (override == controlled()) {
        return;
    } else if (override) {
        LED_Signaling_Start();
 80a42fa:	f7fe bf11 	b.w	80a3120 <LED_Signaling_Start>
    } else {
        LED_Signaling_Stop();
    }
}
 80a42fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (override == controlled()) {
        return;
    } else if (override) {
        LED_Signaling_Start();
    } else {
        LED_Signaling_Stop();
 80a4302:	f7fe bf15 	b.w	80a3130 <LED_Signaling_Stop>
 80a4306:	bd10      	pop	{r4, pc}

080a4308 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a4308:	4803      	ldr	r0, [pc, #12]	; (80a4318 <_GLOBAL__sub_I_RGB+0x10>)
 80a430a:	2300      	movs	r3, #0
 80a430c:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a430e:	4a03      	ldr	r2, [pc, #12]	; (80a431c <_GLOBAL__sub_I_RGB+0x14>)
 80a4310:	4903      	ldr	r1, [pc, #12]	; (80a4320 <_GLOBAL__sub_I_RGB+0x18>)
 80a4312:	f000 bd37 	b.w	80a4d84 <__aeabi_atexit>
 80a4316:	bf00      	nop
 80a4318:	20000524 	.word	0x20000524
 80a431c:	200000fc 	.word	0x200000fc
 80a4320:	080a42dd 	.word	0x080a42dd

080a4324 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a4324:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a4326:	4b14      	ldr	r3, [pc, #80]	; (80a4378 <serialEventRun+0x54>)
 80a4328:	b133      	cbz	r3, 80a4338 <serialEventRun+0x14>
 80a432a:	f000 f99f 	bl	80a466c <_Z16_fetch_usbserialv>
 80a432e:	6803      	ldr	r3, [r0, #0]
 80a4330:	691b      	ldr	r3, [r3, #16]
 80a4332:	4798      	blx	r3
 80a4334:	2800      	cmp	r0, #0
 80a4336:	dc16      	bgt.n	80a4366 <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a4338:	4b10      	ldr	r3, [pc, #64]	; (80a437c <serialEventRun+0x58>)
 80a433a:	b133      	cbz	r3, 80a434a <serialEventRun+0x26>
 80a433c:	f000 fa4c 	bl	80a47d8 <_Z22__fetch_global_Serial1v>
 80a4340:	6803      	ldr	r3, [r0, #0]
 80a4342:	691b      	ldr	r3, [r3, #16]
 80a4344:	4798      	blx	r3
 80a4346:	2800      	cmp	r0, #0
 80a4348:	dc10      	bgt.n	80a436c <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a434a:	4b0d      	ldr	r3, [pc, #52]	; (80a4380 <serialEventRun+0x5c>)
 80a434c:	b10b      	cbz	r3, 80a4352 <serialEventRun+0x2e>
 80a434e:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a4352:	4b0c      	ldr	r3, [pc, #48]	; (80a4384 <serialEventRun+0x60>)
 80a4354:	b17b      	cbz	r3, 80a4376 <serialEventRun+0x52>
 80a4356:	f000 f9b7 	bl	80a46c8 <_Z17_fetch_usbserial1v>
 80a435a:	6803      	ldr	r3, [r0, #0]
 80a435c:	691b      	ldr	r3, [r3, #16]
 80a435e:	4798      	blx	r3
 80a4360:	2800      	cmp	r0, #0
 80a4362:	dc06      	bgt.n	80a4372 <serialEventRun+0x4e>
 80a4364:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a4366:	f3af 8000 	nop.w
 80a436a:	e7e5      	b.n	80a4338 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a436c:	f3af 8000 	nop.w
 80a4370:	e7eb      	b.n	80a434a <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a4372:	f3af 8000 	nop.w
 80a4376:	bd08      	pop	{r3, pc}
	...

080a4388 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a4388:	b508      	push	{r3, lr}
	serialEventRun();
 80a438a:	f7ff ffcb 	bl	80a4324 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a438e:	f7fe fd6d 	bl	80a2e6c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a4392:	4b01      	ldr	r3, [pc, #4]	; (80a4398 <_post_loop+0x10>)
 80a4394:	6018      	str	r0, [r3, #0]
 80a4396:	bd08      	pop	{r3, pc}
 80a4398:	2000059c 	.word	0x2000059c

080a439c <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a439c:	4802      	ldr	r0, [pc, #8]	; (80a43a8 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a439e:	4a03      	ldr	r2, [pc, #12]	; (80a43ac <_Z33system_initialize_user_backup_ramv+0x10>)
 80a43a0:	4903      	ldr	r1, [pc, #12]	; (80a43b0 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a43a2:	1a12      	subs	r2, r2, r0
 80a43a4:	f002 b954 	b.w	80a6650 <memcpy>
 80a43a8:	40024000 	.word	0x40024000
 80a43ac:	40024004 	.word	0x40024004
 80a43b0:	080aa3a8 	.word	0x080aa3a8

080a43b4 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a43b4:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a43b6:	2300      	movs	r3, #0
 80a43b8:	9300      	str	r3, [sp, #0]
 80a43ba:	461a      	mov	r2, r3
 80a43bc:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a43c0:	f7fe fef8 	bl	80a31b4 <system_ctrl_set_result>
}
 80a43c4:	b003      	add	sp, #12
 80a43c6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a43cc <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a43cc:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a43ce:	8843      	ldrh	r3, [r0, #2]
 80a43d0:	2b0a      	cmp	r3, #10
 80a43d2:	d008      	beq.n	80a43e6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a43d4:	2b50      	cmp	r3, #80	; 0x50
 80a43d6:	d109      	bne.n	80a43ec <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a43d8:	4b09      	ldr	r3, [pc, #36]	; (80a4400 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a43da:	681b      	ldr	r3, [r3, #0]
 80a43dc:	b13b      	cbz	r3, 80a43ee <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a43de:	b003      	add	sp, #12
 80a43e0:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a43e4:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a43e6:	f7ff ffe5 	bl	80a43b4 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a43ea:	e006      	b.n	80a43fa <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a43ec:	2300      	movs	r3, #0
 80a43ee:	9300      	str	r3, [sp, #0]
 80a43f0:	461a      	mov	r2, r3
 80a43f2:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a43f6:	f7fe fedd 	bl	80a31b4 <system_ctrl_set_result>
        break;
    }
}
 80a43fa:	b003      	add	sp, #12
 80a43fc:	f85d fb04 	ldr.w	pc, [sp], #4
 80a4400:	20000534 	.word	0x20000534

080a4404 <module_user_init_hook>:

void module_user_init_hook()
{
 80a4404:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a4406:	4c10      	ldr	r4, [pc, #64]	; (80a4448 <module_user_init_hook+0x44>)
 80a4408:	4d10      	ldr	r5, [pc, #64]	; (80a444c <module_user_init_hook+0x48>)
 80a440a:	6823      	ldr	r3, [r4, #0]
 80a440c:	42ab      	cmp	r3, r5
 80a440e:	4b10      	ldr	r3, [pc, #64]	; (80a4450 <module_user_init_hook+0x4c>)
 80a4410:	bf0c      	ite	eq
 80a4412:	2201      	moveq	r2, #1
 80a4414:	2200      	movne	r2, #0
 80a4416:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a4418:	d002      	beq.n	80a4420 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a441a:	f7ff ffbf 	bl	80a439c <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a441e:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a4420:	f7fe fd1c 	bl	80a2e5c <HAL_RNG_GetRandomNumber>
 80a4424:	4604      	mov	r4, r0
    srand(seed);
 80a4426:	f002 f927 	bl	80a6678 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a442a:	4b0a      	ldr	r3, [pc, #40]	; (80a4454 <module_user_init_hook+0x50>)
 80a442c:	b113      	cbz	r3, 80a4434 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a442e:	4620      	mov	r0, r4
 80a4430:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a4434:	2100      	movs	r1, #0
 80a4436:	4807      	ldr	r0, [pc, #28]	; (80a4454 <module_user_init_hook+0x50>)
 80a4438:	f7fe ff46 	bl	80a32c8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a443c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a4440:	2100      	movs	r1, #0
 80a4442:	4805      	ldr	r0, [pc, #20]	; (80a4458 <module_user_init_hook+0x54>)
 80a4444:	f7fe beac 	b.w	80a31a0 <system_ctrl_set_app_request_handler>
 80a4448:	40024000 	.word	0x40024000
 80a444c:	9a271c1e 	.word	0x9a271c1e
 80a4450:	20000538 	.word	0x20000538
 80a4454:	00000000 	.word	0x00000000
 80a4458:	080a43cd 	.word	0x080a43cd

080a445c <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
}

} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
 80a445c:	b510      	push	{r4, lr}
 80a445e:	b088      	sub	sp, #32
 80a4460:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 80a4462:	4668      	mov	r0, sp
 80a4464:	f7ff fb51 	bl	80a3b0a <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
 80a4468:	4669      	mov	r1, sp
 80a446a:	a804      	add	r0, sp, #16
 80a446c:	f7ff fb8c 	bl	80a3b88 <_ZN6StringC1ERKS_>
 80a4470:	a804      	add	r0, sp, #16
 80a4472:	47a0      	blx	r4
 80a4474:	4604      	mov	r4, r0
 80a4476:	a804      	add	r0, sp, #16
 80a4478:	f7ff fb00 	bl	80a3a7c <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 80a447c:	4668      	mov	r0, sp
 80a447e:	f7ff fafd 	bl	80a3a7c <_ZN6StringD1Ev>
    return (*fn)(p);
}
 80a4482:	4620      	mov	r0, r4
 80a4484:	b008      	add	sp, #32
 80a4486:	bd10      	pop	{r4, pc}

080a4488 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
 80a4488:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a448a:	4607      	mov	r7, r0
 80a448c:	460e      	mov	r6, r1
 80a448e:	4615      	mov	r5, r2
 80a4490:	b085      	sub	sp, #20
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
 80a4492:	2410      	movs	r4, #16
 80a4494:	4622      	mov	r2, r4
 80a4496:	2100      	movs	r1, #0
 80a4498:	4668      	mov	r0, sp
 80a449a:	f002 f8e4 	bl	80a6666 <memset>
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 80a449e:	2200      	movs	r2, #0
 80a44a0:	4669      	mov	r1, sp
 80a44a2:	4610      	mov	r0, r2
         size = sizeof(*this);
 80a44a4:	f8ad 4000 	strh.w	r4, [sp]

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
 80a44a8:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
 80a44aa:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
 80a44ac:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 80a44ae:	f7fe fee3 	bl	80a3278 <spark_function>
}
 80a44b2:	b005      	add	sp, #20
 80a44b4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a44b6 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a44b6:	4770      	bx	lr

080a44b8 <_ZN9IPAddressD0Ev>:
 80a44b8:	b510      	push	{r4, lr}
 80a44ba:	4604      	mov	r4, r0
 80a44bc:	2118      	movs	r1, #24
 80a44be:	f000 fc6f 	bl	80a4da0 <_ZdlPvj>
 80a44c2:	4620      	mov	r0, r4
 80a44c4:	bd10      	pop	{r4, pc}

080a44c6 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a44c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a44c8:	460f      	mov	r7, r1
 80a44ca:	f100 0608 	add.w	r6, r0, #8
 80a44ce:	1d05      	adds	r5, r0, #4
 80a44d0:	2400      	movs	r4, #0
 80a44d2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a44d6:	220a      	movs	r2, #10
 80a44d8:	4638      	mov	r0, r7
 80a44da:	f7ff fcce 	bl	80a3e7a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a44de:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a44e0:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a44e2:	d007      	beq.n	80a44f4 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a44e4:	2c00      	cmp	r4, #0
 80a44e6:	d0f4      	beq.n	80a44d2 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a44e8:	212e      	movs	r1, #46	; 0x2e
 80a44ea:	4638      	mov	r0, r7
 80a44ec:	f7ff fcac 	bl	80a3e48 <_ZN5Print5printEc>
 80a44f0:	4404      	add	r4, r0
 80a44f2:	e7ee      	b.n	80a44d2 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a44f4:	4620      	mov	r0, r4
 80a44f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a44f8 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a44f8:	b510      	push	{r4, lr}
 80a44fa:	4604      	mov	r4, r0
 80a44fc:	4b04      	ldr	r3, [pc, #16]	; (80a4510 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a44fe:	2211      	movs	r2, #17
 80a4500:	f840 3b04 	str.w	r3, [r0], #4
 80a4504:	2100      	movs	r1, #0
 80a4506:	f002 f8ae 	bl	80a6666 <memset>
{
    clear();
}
 80a450a:	4620      	mov	r0, r4
 80a450c:	bd10      	pop	{r4, pc}
 80a450e:	bf00      	nop
 80a4510:	080a9c0c 	.word	0x080a9c0c

080a4514 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a4514:	4603      	mov	r3, r0
 80a4516:	4a07      	ldr	r2, [pc, #28]	; (80a4534 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a4518:	b510      	push	{r4, lr}
 80a451a:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a451e:	f101 0210 	add.w	r2, r1, #16
 80a4522:	f851 4b04 	ldr.w	r4, [r1], #4
 80a4526:	4291      	cmp	r1, r2
 80a4528:	f843 4b04 	str.w	r4, [r3], #4
 80a452c:	d1f9      	bne.n	80a4522 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a452e:	780a      	ldrb	r2, [r1, #0]
 80a4530:	701a      	strb	r2, [r3, #0]
}
 80a4532:	bd10      	pop	{r4, pc}
 80a4534:	080a9c0c 	.word	0x080a9c0c

080a4538 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a4538:	4a02      	ldr	r2, [pc, #8]	; (80a4544 <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a453a:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a453c:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a453e:	2204      	movs	r2, #4
 80a4540:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a4542:	4770      	bx	lr
 80a4544:	080a9c0c 	.word	0x080a9c0c

080a4548 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a4548:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a454a:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a454e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a4552:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a4556:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a455a:	2304      	movs	r3, #4
 80a455c:	6041      	str	r1, [r0, #4]
 80a455e:	7503      	strb	r3, [r0, #20]
 80a4560:	bd10      	pop	{r4, pc}
	...

080a4564 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a4564:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a4566:	4d04      	ldr	r5, [pc, #16]	; (80a4578 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a4568:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a456a:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a456e:	9500      	str	r5, [sp, #0]
 80a4570:	f7ff ffea 	bl	80a4548 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a4574:	b003      	add	sp, #12
 80a4576:	bd30      	pop	{r4, r5, pc}
 80a4578:	080a9c0c 	.word	0x080a9c0c

080a457c <_ZN9IPAddressaSEPKh>:
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
 80a457c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
 80a457e:	780d      	ldrb	r5, [r1, #0]
 80a4580:	788b      	ldrb	r3, [r1, #2]
 80a4582:	784a      	ldrb	r2, [r1, #1]
 80a4584:	78c9      	ldrb	r1, [r1, #3]
 80a4586:	9100      	str	r1, [sp, #0]
 80a4588:	4629      	mov	r1, r5
 80a458a:	f7ff ffdd 	bl	80a4548 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
 80a458e:	b003      	add	sp, #12
 80a4590:	bd30      	pop	{r4, r5, pc}
	...

080a4594 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(uint32_t address)
{
    *this = address;
}

IPAddress::IPAddress(const uint8_t* address)
 80a4594:	b510      	push	{r4, lr}
 80a4596:	4604      	mov	r4, r0
 80a4598:	4b02      	ldr	r3, [pc, #8]	; (80a45a4 <_ZN9IPAddressC1EPKh+0x10>)
 80a459a:	6003      	str	r3, [r0, #0]
{
    *this = address;
 80a459c:	f7ff ffee 	bl	80a457c <_ZN9IPAddressaSEPKh>
}
 80a45a0:	4620      	mov	r0, r4
 80a45a2:	bd10      	pop	{r4, pc}
 80a45a4:	080a9c0c 	.word	0x080a9c0c

080a45a8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a45a8:	7441      	strb	r1, [r0, #17]
 80a45aa:	4770      	bx	lr

080a45ac <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a45ac:	4770      	bx	lr

080a45ae <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80a45ae:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a45b0:	2100      	movs	r1, #0
 80a45b2:	7c00      	ldrb	r0, [r0, #16]
 80a45b4:	f7fe fd7c 	bl	80a30b0 <HAL_USB_USART_Receive_Data>
}
 80a45b8:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a45bc:	bf28      	it	cs
 80a45be:	f04f 30ff 	movcs.w	r0, #4294967295
 80a45c2:	bd08      	pop	{r3, pc}

080a45c4 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80a45c4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a45c6:	2101      	movs	r1, #1
 80a45c8:	7c00      	ldrb	r0, [r0, #16]
 80a45ca:	f7fe fd71 	bl	80a30b0 <HAL_USB_USART_Receive_Data>
}
 80a45ce:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a45d2:	bf28      	it	cs
 80a45d4:	f04f 30ff 	movcs.w	r0, #4294967295
 80a45d8:	bd08      	pop	{r3, pc}

080a45da <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80a45da:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a45dc:	7c00      	ldrb	r0, [r0, #16]
 80a45de:	f7fe fd5f 	bl	80a30a0 <HAL_USB_USART_Available_Data_For_Write>
}
 80a45e2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a45e6:	bd08      	pop	{r3, pc}

080a45e8 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80a45e8:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a45ea:	7c00      	ldrb	r0, [r0, #16]
 80a45ec:	f7fe fd50 	bl	80a3090 <HAL_USB_USART_Available_Data>
}
 80a45f0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a45f4:	bd08      	pop	{r3, pc}

080a45f6 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a45f6:	7c00      	ldrb	r0, [r0, #16]
 80a45f8:	f7fe bd6a 	b.w	80a30d0 <HAL_USB_USART_Flush_Data>

080a45fc <_ZN9USBSerialD0Ev>:
 80a45fc:	b510      	push	{r4, lr}
 80a45fe:	4604      	mov	r4, r0
 80a4600:	2114      	movs	r1, #20
 80a4602:	f000 fbcd 	bl	80a4da0 <_ZdlPvj>
 80a4606:	4620      	mov	r0, r4
 80a4608:	bd10      	pop	{r4, pc}

080a460a <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a460a:	b538      	push	{r3, r4, r5, lr}
 80a460c:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a460e:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a4610:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a4612:	f7fe fd45 	bl	80a30a0 <HAL_USB_USART_Available_Data_For_Write>
 80a4616:	2800      	cmp	r0, #0
 80a4618:	dc01      	bgt.n	80a461e <_ZN9USBSerial5writeEh+0x14>
 80a461a:	7c60      	ldrb	r0, [r4, #17]
 80a461c:	b128      	cbz	r0, 80a462a <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a461e:	4629      	mov	r1, r5
 80a4620:	7c20      	ldrb	r0, [r4, #16]
 80a4622:	f7fe fd4d 	bl	80a30c0 <HAL_USB_USART_Send_Data>
 80a4626:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 80a462a:	bd38      	pop	{r3, r4, r5, pc}

080a462c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a462c:	b510      	push	{r4, lr}
 80a462e:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a4630:	2300      	movs	r3, #0
 80a4632:	6063      	str	r3, [r4, #4]
 80a4634:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a4638:	60a3      	str	r3, [r4, #8]
 80a463a:	4b05      	ldr	r3, [pc, #20]	; (80a4650 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a463c:	4608      	mov	r0, r1
 80a463e:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a4640:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a4642:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a4644:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a4646:	4611      	mov	r1, r2
 80a4648:	f7fe fd12 	bl	80a3070 <HAL_USB_USART_Init>
}
 80a464c:	4620      	mov	r0, r4
 80a464e:	bd10      	pop	{r4, pc}
 80a4650:	080a9c20 	.word	0x080a9c20

080a4654 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a4654:	2200      	movs	r2, #0
 80a4656:	7c00      	ldrb	r0, [r0, #16]
 80a4658:	f7fe bd12 	b.w	80a3080 <HAL_USB_USART_Begin>

080a465c <_Z19acquireSerialBufferv>:
 80a465c:	b510      	push	{r4, lr}
 80a465e:	4604      	mov	r4, r0
 80a4660:	2214      	movs	r2, #20
 80a4662:	2100      	movs	r1, #0
 80a4664:	f001 ffff 	bl	80a6666 <memset>
 80a4668:	4620      	mov	r0, r4
 80a466a:	bd10      	pop	{r4, pc}

080a466c <_Z16_fetch_usbserialv>:

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a466c:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a466e:	4d0e      	ldr	r5, [pc, #56]	; (80a46a8 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a4670:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a4672:	a801      	add	r0, sp, #4
 80a4674:	f7ff fff2 	bl	80a465c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a4678:	6829      	ldr	r1, [r5, #0]
 80a467a:	f011 0401 	ands.w	r4, r1, #1
 80a467e:	d110      	bne.n	80a46a2 <_Z16_fetch_usbserialv+0x36>
 80a4680:	4628      	mov	r0, r5
 80a4682:	f7fb fd14 	bl	80a00ae <__cxa_guard_acquire>
 80a4686:	b160      	cbz	r0, 80a46a2 <_Z16_fetch_usbserialv+0x36>
 80a4688:	aa01      	add	r2, sp, #4
 80a468a:	4621      	mov	r1, r4
 80a468c:	4807      	ldr	r0, [pc, #28]	; (80a46ac <_Z16_fetch_usbserialv+0x40>)
 80a468e:	f7ff ffcd 	bl	80a462c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a4692:	4628      	mov	r0, r5
 80a4694:	f7fb fd10 	bl	80a00b8 <__cxa_guard_release>
 80a4698:	4a05      	ldr	r2, [pc, #20]	; (80a46b0 <_Z16_fetch_usbserialv+0x44>)
 80a469a:	4906      	ldr	r1, [pc, #24]	; (80a46b4 <_Z16_fetch_usbserialv+0x48>)
 80a469c:	4803      	ldr	r0, [pc, #12]	; (80a46ac <_Z16_fetch_usbserialv+0x40>)
 80a469e:	f000 fb71 	bl	80a4d84 <__aeabi_atexit>
	return _usbserial;
}
 80a46a2:	4802      	ldr	r0, [pc, #8]	; (80a46ac <_Z16_fetch_usbserialv+0x40>)
 80a46a4:	b007      	add	sp, #28
 80a46a6:	bd30      	pop	{r4, r5, pc}
 80a46a8:	2000053c 	.word	0x2000053c
 80a46ac:	20000544 	.word	0x20000544
 80a46b0:	200000fc 	.word	0x200000fc
 80a46b4:	080a45ad 	.word	0x080a45ad

080a46b8 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a46b8:	b510      	push	{r4, lr}
 80a46ba:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a46bc:	2214      	movs	r2, #20
 80a46be:	2100      	movs	r1, #0
 80a46c0:	f001 ffd1 	bl	80a6666 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a46c4:	4620      	mov	r0, r4
 80a46c6:	bd10      	pop	{r4, pc}

080a46c8 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a46c8:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a46ca:	4c0e      	ldr	r4, [pc, #56]	; (80a4704 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a46cc:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a46ce:	a801      	add	r0, sp, #4
 80a46d0:	f7ff fff2 	bl	80a46b8 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a46d4:	6823      	ldr	r3, [r4, #0]
 80a46d6:	07db      	lsls	r3, r3, #31
 80a46d8:	d410      	bmi.n	80a46fc <_Z17_fetch_usbserial1v+0x34>
 80a46da:	4620      	mov	r0, r4
 80a46dc:	f7fb fce7 	bl	80a00ae <__cxa_guard_acquire>
 80a46e0:	b160      	cbz	r0, 80a46fc <_Z17_fetch_usbserial1v+0x34>
 80a46e2:	aa01      	add	r2, sp, #4
 80a46e4:	2101      	movs	r1, #1
 80a46e6:	4808      	ldr	r0, [pc, #32]	; (80a4708 <_Z17_fetch_usbserial1v+0x40>)
 80a46e8:	f7ff ffa0 	bl	80a462c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a46ec:	4620      	mov	r0, r4
 80a46ee:	f7fb fce3 	bl	80a00b8 <__cxa_guard_release>
 80a46f2:	4a06      	ldr	r2, [pc, #24]	; (80a470c <_Z17_fetch_usbserial1v+0x44>)
 80a46f4:	4906      	ldr	r1, [pc, #24]	; (80a4710 <_Z17_fetch_usbserial1v+0x48>)
 80a46f6:	4804      	ldr	r0, [pc, #16]	; (80a4708 <_Z17_fetch_usbserial1v+0x40>)
 80a46f8:	f000 fb44 	bl	80a4d84 <__aeabi_atexit>
  return _usbserial1;
}
 80a46fc:	4802      	ldr	r0, [pc, #8]	; (80a4708 <_Z17_fetch_usbserial1v+0x40>)
 80a46fe:	b006      	add	sp, #24
 80a4700:	bd10      	pop	{r4, pc}
 80a4702:	bf00      	nop
 80a4704:	20000540 	.word	0x20000540
 80a4708:	20000558 	.word	0x20000558
 80a470c:	200000fc 	.word	0x200000fc
 80a4710:	080a45ad 	.word	0x080a45ad

080a4714 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a4714:	4770      	bx	lr

080a4716 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a4716:	7441      	strb	r1, [r0, #17]
 80a4718:	4770      	bx	lr

080a471a <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80a471a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80a471c:	7c00      	ldrb	r0, [r0, #16]
 80a471e:	f7fe fc1d 	bl	80a2f5c <HAL_USART_Available_Data_For_Write>
}
 80a4722:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a4726:	bd08      	pop	{r3, pc}

080a4728 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a4728:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80a472a:	7c00      	ldrb	r0, [r0, #16]
 80a472c:	f7fe fbee 	bl	80a2f0c <HAL_USART_Available_Data>
}
 80a4730:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a4734:	bd08      	pop	{r3, pc}

080a4736 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a4736:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80a4738:	7c00      	ldrb	r0, [r0, #16]
 80a473a:	f7fe fbf7 	bl	80a2f2c <HAL_USART_Peek_Data>
}
 80a473e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a4742:	bf28      	it	cs
 80a4744:	f04f 30ff 	movcs.w	r0, #4294967295
 80a4748:	bd08      	pop	{r3, pc}

080a474a <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a474a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80a474c:	7c00      	ldrb	r0, [r0, #16]
 80a474e:	f7fe fbe5 	bl	80a2f1c <HAL_USART_Read_Data>
}
 80a4752:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a4756:	bf28      	it	cs
 80a4758:	f04f 30ff 	movcs.w	r0, #4294967295
 80a475c:	bd08      	pop	{r3, pc}

080a475e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a475e:	7c00      	ldrb	r0, [r0, #16]
 80a4760:	f7fe bbec 	b.w	80a2f3c <HAL_USART_Flush_Data>

080a4764 <_ZN11USARTSerialD0Ev>:
 80a4764:	b510      	push	{r4, lr}
 80a4766:	4604      	mov	r4, r0
 80a4768:	2114      	movs	r1, #20
 80a476a:	f000 fb19 	bl	80a4da0 <_ZdlPvj>
 80a476e:	4620      	mov	r0, r4
 80a4770:	bd10      	pop	{r4, pc}

080a4772 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a4772:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a4774:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a4776:	4604      	mov	r4, r0
 80a4778:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a477a:	b925      	cbnz	r5, 80a4786 <_ZN11USARTSerial5writeEh+0x14>
 80a477c:	7c00      	ldrb	r0, [r0, #16]
 80a477e:	f7fe fbed 	bl	80a2f5c <HAL_USART_Available_Data_For_Write>
 80a4782:	2800      	cmp	r0, #0
 80a4784:	dd05      	ble.n	80a4792 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a4786:	4631      	mov	r1, r6
 80a4788:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a478a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a478e:	f7fe bbb5 	b.w	80a2efc <HAL_USART_Write_Data>
  }
  return 0;
}
 80a4792:	4628      	mov	r0, r5
 80a4794:	bd70      	pop	{r4, r5, r6, pc}
	...

080a4798 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a4798:	b510      	push	{r4, lr}
 80a479a:	4604      	mov	r4, r0
 80a479c:	4608      	mov	r0, r1
 80a479e:	4611      	mov	r1, r2
 80a47a0:	2200      	movs	r2, #0
 80a47a2:	6062      	str	r2, [r4, #4]
 80a47a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a47a8:	60a2      	str	r2, [r4, #8]
 80a47aa:	4a05      	ldr	r2, [pc, #20]	; (80a47c0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a47ac:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a47ae:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a47b0:	2201      	movs	r2, #1
 80a47b2:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a47b4:	461a      	mov	r2, r3
 80a47b6:	f7fe fb99 	bl	80a2eec <HAL_USART_Init>
}
 80a47ba:	4620      	mov	r0, r4
 80a47bc:	bd10      	pop	{r4, pc}
 80a47be:	bf00      	nop
 80a47c0:	080a9c50 	.word	0x080a9c50

080a47c4 <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
 80a47c4:	2300      	movs	r3, #0
 80a47c6:	7c00      	ldrb	r0, [r0, #16]
 80a47c8:	f7fe bbd0 	b.w	80a2f6c <HAL_USART_BeginConfig>

080a47cc <_ZN11USARTSerial5beginEm>:
}
// Public Methods //////////////////////////////////////////////////////////////

void USARTSerial::begin(unsigned long baud)
{
  begin(baud, SERIAL_8N1);
 80a47cc:	2200      	movs	r2, #0
 80a47ce:	f7ff bff9 	b.w	80a47c4 <_ZN11USARTSerial5beginEmm>

080a47d2 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a47d2:	7c00      	ldrb	r0, [r0, #16]
 80a47d4:	f7fe bbba 	b.w	80a2f4c <HAL_USART_Is_Enabled>

080a47d8 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a47d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
#else
  if (!serial1_rx_buffer) {
 80a47da:	4c19      	ldr	r4, [pc, #100]	; (80a4840 <_Z22__fetch_global_Serial1v+0x68>)
 80a47dc:	6825      	ldr	r5, [r4, #0]
 80a47de:	b94d      	cbnz	r5, 80a47f4 <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new Ring_Buffer();
 80a47e0:	2084      	movs	r0, #132	; 0x84
 80a47e2:	f7fb fc5c 	bl	80a009e <_Znwj>
 80a47e6:	4606      	mov	r6, r0
 80a47e8:	b118      	cbz	r0, 80a47f2 <_Z22__fetch_global_Serial1v+0x1a>
 80a47ea:	2284      	movs	r2, #132	; 0x84
 80a47ec:	4629      	mov	r1, r5
 80a47ee:	f001 ff3a 	bl	80a6666 <memset>
 80a47f2:	6026      	str	r6, [r4, #0]
  }
  if (!serial1_tx_buffer) {
 80a47f4:	4d13      	ldr	r5, [pc, #76]	; (80a4844 <_Z22__fetch_global_Serial1v+0x6c>)
 80a47f6:	682e      	ldr	r6, [r5, #0]
 80a47f8:	b94e      	cbnz	r6, 80a480e <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new Ring_Buffer();
 80a47fa:	2084      	movs	r0, #132	; 0x84
 80a47fc:	f7fb fc4f 	bl	80a009e <_Znwj>
 80a4800:	4607      	mov	r7, r0
 80a4802:	b118      	cbz	r0, 80a480c <_Z22__fetch_global_Serial1v+0x34>
 80a4804:	2284      	movs	r2, #132	; 0x84
 80a4806:	4631      	mov	r1, r6
 80a4808:	f001 ff2d 	bl	80a6666 <memset>
 80a480c:	602f      	str	r7, [r5, #0]
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
 80a480e:	4f0e      	ldr	r7, [pc, #56]	; (80a4848 <_Z22__fetch_global_Serial1v+0x70>)
 80a4810:	6839      	ldr	r1, [r7, #0]
 80a4812:	f011 0601 	ands.w	r6, r1, #1
 80a4816:	d111      	bne.n	80a483c <_Z22__fetch_global_Serial1v+0x64>
 80a4818:	4638      	mov	r0, r7
 80a481a:	f7fb fc48 	bl	80a00ae <__cxa_guard_acquire>
 80a481e:	b168      	cbz	r0, 80a483c <_Z22__fetch_global_Serial1v+0x64>
 80a4820:	6822      	ldr	r2, [r4, #0]
 80a4822:	4631      	mov	r1, r6
 80a4824:	682b      	ldr	r3, [r5, #0]
 80a4826:	4809      	ldr	r0, [pc, #36]	; (80a484c <_Z22__fetch_global_Serial1v+0x74>)
 80a4828:	f7ff ffb6 	bl	80a4798 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a482c:	4638      	mov	r0, r7
 80a482e:	f7fb fc43 	bl	80a00b8 <__cxa_guard_release>
 80a4832:	4a07      	ldr	r2, [pc, #28]	; (80a4850 <_Z22__fetch_global_Serial1v+0x78>)
 80a4834:	4907      	ldr	r1, [pc, #28]	; (80a4854 <_Z22__fetch_global_Serial1v+0x7c>)
 80a4836:	4805      	ldr	r0, [pc, #20]	; (80a484c <_Z22__fetch_global_Serial1v+0x74>)
 80a4838:	f000 faa4 	bl	80a4d84 <__aeabi_atexit>
#endif
	return serial1;
}
 80a483c:	4803      	ldr	r0, [pc, #12]	; (80a484c <_Z22__fetch_global_Serial1v+0x74>)
 80a483e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a4840:	20000588 	.word	0x20000588
 80a4844:	20000580 	.word	0x20000580
 80a4848:	20000584 	.word	0x20000584
 80a484c:	2000056c 	.word	0x2000056c
 80a4850:	200000fc 	.word	0x200000fc
 80a4854:	080a4715 	.word	0x080a4715

080a4858 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
 80a4858:	4770      	bx	lr

080a485a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a485a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a485c:	4606      	mov	r6, r0
 80a485e:	4615      	mov	r5, r2
 80a4860:	460c      	mov	r4, r1
 80a4862:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a4864:	42bc      	cmp	r4, r7
 80a4866:	d006      	beq.n	80a4876 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a4868:	6833      	ldr	r3, [r6, #0]
 80a486a:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a486e:	689b      	ldr	r3, [r3, #8]
 80a4870:	4630      	mov	r0, r6
 80a4872:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a4874:	e7f6      	b.n	80a4864 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a4876:	4628      	mov	r0, r5
 80a4878:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a487a <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a487a:	2200      	movs	r2, #0
 80a487c:	7c00      	ldrb	r0, [r0, #16]
 80a487e:	f7fe bb7d 	b.w	80a2f7c <HAL_I2C_Write_Data>

080a4882 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a4882:	2100      	movs	r1, #0
 80a4884:	7c00      	ldrb	r0, [r0, #16]
 80a4886:	f7fe bb81 	b.w	80a2f8c <HAL_I2C_Available_Data>

080a488a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a488a:	2100      	movs	r1, #0
 80a488c:	7c00      	ldrb	r0, [r0, #16]
 80a488e:	f7fe bb85 	b.w	80a2f9c <HAL_I2C_Read_Data>

080a4892 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a4892:	2100      	movs	r1, #0
 80a4894:	7c00      	ldrb	r0, [r0, #16]
 80a4896:	f7fe bb89 	b.w	80a2fac <HAL_I2C_Peek_Data>

080a489a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a489a:	2100      	movs	r1, #0
 80a489c:	7c00      	ldrb	r0, [r0, #16]
 80a489e:	f7fe bb8d 	b.w	80a2fbc <HAL_I2C_Flush_Data>

080a48a2 <_ZN7TwoWireD0Ev>:
 80a48a2:	b510      	push	{r4, lr}
 80a48a4:	4604      	mov	r4, r0
 80a48a6:	2114      	movs	r1, #20
 80a48a8:	f000 fa7a 	bl	80a4da0 <_ZdlPvj>
 80a48ac:	4620      	mov	r0, r4
 80a48ae:	bd10      	pop	{r4, pc}

080a48b0 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
 80a48b0:	b510      	push	{r4, lr}
 80a48b2:	4604      	mov	r4, r0
 80a48b4:	2300      	movs	r3, #0
 80a48b6:	6063      	str	r3, [r4, #4]
 80a48b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a48bc:	60a3      	str	r3, [r4, #8]
 80a48be:	4b04      	ldr	r3, [pc, #16]	; (80a48d0 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
 80a48c0:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
 80a48c2:	4608      	mov	r0, r1
 80a48c4:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
 80a48c6:	4611      	mov	r1, r2
 80a48c8:	f7fe fb88 	bl	80a2fdc <HAL_I2C_Init>
}
 80a48cc:	4620      	mov	r0, r4
 80a48ce:	bd10      	pop	{r4, pc}
 80a48d0:	080a9c80 	.word	0x080a9c80

080a48d4 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a48d4:	2100      	movs	r1, #0
 80a48d6:	7c00      	ldrb	r0, [r0, #16]
 80a48d8:	f7fe bb78 	b.w	80a2fcc <HAL_I2C_Is_Enabled>

080a48dc <_ZN10WiFiSignalD1Ev>:
    int rssi = 2;
    int qual = 0;

    WiFiSignal() {}
    WiFiSignal(const wlan_connected_info_t& inf);
    virtual ~WiFiSignal() {};
 80a48dc:	4770      	bx	lr

080a48de <_ZNK10WiFiSignal19getAccessTechnologyEv>:
    return true;
}

hal_net_access_tech_t WiFiSignal::getAccessTechnology() const {
    return NET_ACCESS_TECHNOLOGY_WIFI;
}
 80a48de:	2001      	movs	r0, #1
 80a48e0:	4770      	bx	lr
	...

080a48e4 <_ZNK10WiFiSignal16getStrengthValueEv>:
        return inf_.strength / 65535.0f * 100.0f;
    }
    return -1.0f;
}

float WiFiSignal::getStrengthValue() const {
 80a48e4:	b508      	push	{r3, lr}
    if (inf_.size != 0 && inf_.rssi != std::numeric_limits<int32_t>::min()) {
 80a48e6:	8983      	ldrh	r3, [r0, #12]
 80a48e8:	b11b      	cbz	r3, 80a48f2 <_ZNK10WiFiSignal16getStrengthValueEv+0xe>
 80a48ea:	6900      	ldr	r0, [r0, #16]
 80a48ec:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 80a48f0:	d101      	bne.n	80a48f6 <_ZNK10WiFiSignal16getStrengthValueEv+0x12>
        return inf_.rssi / 100.0f;
    }
    return 0.0f;
 80a48f2:	2000      	movs	r0, #0
 80a48f4:	bd08      	pop	{r3, pc}
    return -1.0f;
}

float WiFiSignal::getStrengthValue() const {
    if (inf_.size != 0 && inf_.rssi != std::numeric_limits<int32_t>::min()) {
        return inf_.rssi / 100.0f;
 80a48f6:	f001 f969 	bl	80a5bcc <__aeabi_i2f>
 80a48fa:	4902      	ldr	r1, [pc, #8]	; (80a4904 <_ZNK10WiFiSignal16getStrengthValueEv+0x20>)
 80a48fc:	f001 fa6e 	bl	80a5ddc <__aeabi_fdiv>
    }
    return 0.0f;
}
 80a4900:	bd08      	pop	{r3, pc}
 80a4902:	bf00      	nop
 80a4904:	42c80000 	.word	0x42c80000

080a4908 <_ZNK10WiFiSignal15getQualityValueEv>:
        return inf_.quality / 65535.0f * 100.0f;
    }
    return -1.0f;
}

float WiFiSignal::getQualityValue() const {
 80a4908:	b508      	push	{r3, lr}
    if (inf_.size != 0 && inf_.snr != std::numeric_limits<int32_t>::min()) {
 80a490a:	8983      	ldrh	r3, [r0, #12]
 80a490c:	b11b      	cbz	r3, 80a4916 <_ZNK10WiFiSignal15getQualityValueEv+0xe>
 80a490e:	6980      	ldr	r0, [r0, #24]
 80a4910:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 80a4914:	d101      	bne.n	80a491a <_ZNK10WiFiSignal15getQualityValueEv+0x12>
        return inf_.snr / 100.0f;
    }
    return 0.0f;
 80a4916:	2000      	movs	r0, #0
 80a4918:	bd08      	pop	{r3, pc}
    return -1.0f;
}

float WiFiSignal::getQualityValue() const {
    if (inf_.size != 0 && inf_.snr != std::numeric_limits<int32_t>::min()) {
        return inf_.snr / 100.0f;
 80a491a:	f001 f957 	bl	80a5bcc <__aeabi_i2f>
 80a491e:	4902      	ldr	r1, [pc, #8]	; (80a4928 <_ZNK10WiFiSignal15getQualityValueEv+0x20>)
 80a4920:	f001 fa5c 	bl	80a5ddc <__aeabi_fdiv>
    }
    return 0.0f;
}
 80a4924:	bd08      	pop	{r3, pc}
 80a4926:	bf00      	nop
 80a4928:	42c80000 	.word	0x42c80000

080a492c <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a492c:	2200      	movs	r2, #0
 80a492e:	4611      	mov	r1, r2
 80a4930:	6840      	ldr	r0, [r0, #4]
 80a4932:	f7fe bc61 	b.w	80a31f8 <network_ready>

080a4936 <_ZN10WiFiSignalD0Ev>:
    int rssi = 2;
    int qual = 0;

    WiFiSignal() {}
    WiFiSignal(const wlan_connected_info_t& inf);
    virtual ~WiFiSignal() {};
 80a4936:	b510      	push	{r4, lr}
 80a4938:	4604      	mov	r4, r0
 80a493a:	2124      	movs	r1, #36	; 0x24
 80a493c:	f000 fa30 	bl	80a4da0 <_ZdlPvj>
 80a4940:	4620      	mov	r0, r4
 80a4942:	bd10      	pop	{r4, pc}

080a4944 <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a4944:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a4946:	4616      	mov	r6, r2
 80a4948:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a494a:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a494c:	460f      	mov	r7, r1
 80a494e:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a4950:	2100      	movs	r1, #0
 80a4952:	a803      	add	r0, sp, #12
 80a4954:	f001 fe87 	bl	80a6666 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a4958:	4630      	mov	r0, r6
 80a495a:	f002 fbdb 	bl	80a7114 <strlen>
 80a495e:	2500      	movs	r5, #0
 80a4960:	9500      	str	r5, [sp, #0]
 80a4962:	b281      	uxth	r1, r0
 80a4964:	687b      	ldr	r3, [r7, #4]
 80a4966:	aa03      	add	r2, sp, #12
 80a4968:	4630      	mov	r0, r6
 80a496a:	f7fe fbc1 	bl	80a30f0 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a496e:	b120      	cbz	r0, 80a497a <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a4970:	4629      	mov	r1, r5
 80a4972:	4620      	mov	r0, r4
 80a4974:	f7ff fde0 	bl	80a4538 <_ZN9IPAddressC1Em>
 80a4978:	e003      	b.n	80a4982 <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a497a:	a903      	add	r1, sp, #12
 80a497c:	4620      	mov	r0, r4
 80a497e:	f7ff fdc9 	bl	80a4514 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a4982:	4620      	mov	r0, r4
 80a4984:	b009      	add	sp, #36	; 0x24
 80a4986:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a4988 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a4988:	2200      	movs	r2, #0
 80a498a:	4611      	mov	r1, r2
 80a498c:	6840      	ldr	r0, [r0, #4]
 80a498e:	f7fe bc53 	b.w	80a3238 <network_listening>

080a4992 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a4992:	2200      	movs	r2, #0
 80a4994:	4611      	mov	r1, r2
 80a4996:	6840      	ldr	r0, [r0, #4]
 80a4998:	f7fe bc5e 	b.w	80a3258 <network_get_listen_timeout>

080a499c <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a499c:	2200      	movs	r2, #0
 80a499e:	6840      	ldr	r0, [r0, #4]
 80a49a0:	f7fe bc52 	b.w	80a3248 <network_set_listen_timeout>

080a49a4 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a49a4:	2200      	movs	r2, #0
 80a49a6:	f081 0101 	eor.w	r1, r1, #1
 80a49aa:	6840      	ldr	r0, [r0, #4]
 80a49ac:	f7fe bc3c 	b.w	80a3228 <network_listen>

080a49b0 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a49b0:	2300      	movs	r3, #0
 80a49b2:	461a      	mov	r2, r3
 80a49b4:	4619      	mov	r1, r3
 80a49b6:	6840      	ldr	r0, [r0, #4]
 80a49b8:	f7fe bc2e 	b.w	80a3218 <network_off>

080a49bc <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a49bc:	2200      	movs	r2, #0
 80a49be:	4611      	mov	r1, r2
 80a49c0:	6840      	ldr	r0, [r0, #4]
 80a49c2:	f7fe bc09 	b.w	80a31d8 <network_connecting>

080a49c6 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a49c6:	2200      	movs	r2, #0
 80a49c8:	2102      	movs	r1, #2
 80a49ca:	6840      	ldr	r0, [r0, #4]
 80a49cc:	f7fe bc0c 	b.w	80a31e8 <network_disconnect>

080a49d0 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a49d0:	2300      	movs	r3, #0
 80a49d2:	461a      	mov	r2, r3
 80a49d4:	6840      	ldr	r0, [r0, #4]
 80a49d6:	f7fe bbf7 	b.w	80a31c8 <network_connect>
	...

080a49dc <_ZNK10WiFiSignal10getQualityEv>:
        return inf_.rssi / 100.0f;
    }
    return 0.0f;
}

float WiFiSignal::getQuality() const {
 80a49dc:	b508      	push	{r3, lr}
    if (inf_.size != 0 && inf_.quality >= 0) {
 80a49de:	8983      	ldrh	r3, [r0, #12]
 80a49e0:	b15b      	cbz	r3, 80a49fa <_ZNK10WiFiSignal10getQualityEv+0x1e>
 80a49e2:	6a00      	ldr	r0, [r0, #32]
 80a49e4:	2800      	cmp	r0, #0
 80a49e6:	db08      	blt.n	80a49fa <_ZNK10WiFiSignal10getQualityEv+0x1e>
        return inf_.quality / 65535.0f * 100.0f;
 80a49e8:	f001 f8f0 	bl	80a5bcc <__aeabi_i2f>
 80a49ec:	4904      	ldr	r1, [pc, #16]	; (80a4a00 <_ZNK10WiFiSignal10getQualityEv+0x24>)
 80a49ee:	f001 f9f5 	bl	80a5ddc <__aeabi_fdiv>
 80a49f2:	4904      	ldr	r1, [pc, #16]	; (80a4a04 <_ZNK10WiFiSignal10getQualityEv+0x28>)
 80a49f4:	f001 f93e 	bl	80a5c74 <__aeabi_fmul>
 80a49f8:	bd08      	pop	{r3, pc}
    }
    return -1.0f;
 80a49fa:	4803      	ldr	r0, [pc, #12]	; (80a4a08 <_ZNK10WiFiSignal10getQualityEv+0x2c>)
}
 80a49fc:	bd08      	pop	{r3, pc}
 80a49fe:	bf00      	nop
 80a4a00:	477fff00 	.word	0x477fff00
 80a4a04:	42c80000 	.word	0x42c80000
 80a4a08:	bf800000 	.word	0xbf800000

080a4a0c <_ZNK10WiFiSignal11getStrengthEv>:

hal_net_access_tech_t WiFiSignal::getAccessTechnology() const {
    return NET_ACCESS_TECHNOLOGY_WIFI;
}

float WiFiSignal::getStrength() const {
 80a4a0c:	b508      	push	{r3, lr}
    if (inf_.size != 0 && inf_.strength >= 0) {
 80a4a0e:	8983      	ldrh	r3, [r0, #12]
 80a4a10:	b15b      	cbz	r3, 80a4a2a <_ZNK10WiFiSignal11getStrengthEv+0x1e>
 80a4a12:	6940      	ldr	r0, [r0, #20]
 80a4a14:	2800      	cmp	r0, #0
 80a4a16:	db08      	blt.n	80a4a2a <_ZNK10WiFiSignal11getStrengthEv+0x1e>
        return inf_.strength / 65535.0f * 100.0f;
 80a4a18:	f001 f8d8 	bl	80a5bcc <__aeabi_i2f>
 80a4a1c:	4904      	ldr	r1, [pc, #16]	; (80a4a30 <_ZNK10WiFiSignal11getStrengthEv+0x24>)
 80a4a1e:	f001 f9dd 	bl	80a5ddc <__aeabi_fdiv>
 80a4a22:	4904      	ldr	r1, [pc, #16]	; (80a4a34 <_ZNK10WiFiSignal11getStrengthEv+0x28>)
 80a4a24:	f001 f926 	bl	80a5c74 <__aeabi_fmul>
 80a4a28:	bd08      	pop	{r3, pc}
    }
    return -1.0f;
 80a4a2a:	4803      	ldr	r0, [pc, #12]	; (80a4a38 <_ZNK10WiFiSignal11getStrengthEv+0x2c>)
}
 80a4a2c:	bd08      	pop	{r3, pc}
 80a4a2e:	bf00      	nop
 80a4a30:	477fff00 	.word	0x477fff00
 80a4a34:	42c80000 	.word	0x42c80000
 80a4a38:	bf800000 	.word	0xbf800000

080a4a3c <_ZNK10WiFiSignalcvaEv>:
    : inf_(inf) {
}

WiFiSignal::operator int8_t() const {
    return this->rssi;
}
 80a4a3c:	f990 0004 	ldrsb.w	r0, [r0, #4]
 80a4a40:	4770      	bx	lr

080a4a42 <_ZN10WiFiSignal17fromConnectedInfoERK21wlan_connected_info_t>:

bool WiFiSignal::fromConnectedInfo(const wlan_connected_info_t& inf) {
 80a4a42:	b570      	push	{r4, r5, r6, lr}
    inf_ = inf;
 80a4a44:	460d      	mov	r5, r1

WiFiSignal::operator int8_t() const {
    return this->rssi;
}

bool WiFiSignal::fromConnectedInfo(const wlan_connected_info_t& inf) {
 80a4a46:	4606      	mov	r6, r0
    inf_ = inf;
 80a4a48:	f100 040c 	add.w	r4, r0, #12
 80a4a4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a4a4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a4a50:	e895 0003 	ldmia.w	r5, {r0, r1}
 80a4a54:	e884 0003 	stmia.w	r4, {r0, r1}
    this->rssi = inf_.rssi != std::numeric_limits<int32_t>::min() ? inf_.rssi / 100 : 2;
 80a4a58:	6933      	ldr	r3, [r6, #16]
    this->qual = inf_.snr != std::numeric_limits<int32_t>::min() ? inf_.snr / 100 : 0;
    return true;
}
 80a4a5a:	2001      	movs	r0, #1
    return this->rssi;
}

bool WiFiSignal::fromConnectedInfo(const wlan_connected_info_t& inf) {
    inf_ = inf;
    this->rssi = inf_.rssi != std::numeric_limits<int32_t>::min() ? inf_.rssi / 100 : 2;
 80a4a5c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a4a60:	bf1a      	itte	ne
 80a4a62:	2264      	movne	r2, #100	; 0x64
 80a4a64:	fb93 f3f2 	sdivne	r3, r3, r2
 80a4a68:	2302      	moveq	r3, #2
 80a4a6a:	6073      	str	r3, [r6, #4]
    this->qual = inf_.snr != std::numeric_limits<int32_t>::min() ? inf_.snr / 100 : 0;
 80a4a6c:	69b3      	ldr	r3, [r6, #24]
 80a4a6e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a4a72:	bf1a      	itte	ne
 80a4a74:	2264      	movne	r2, #100	; 0x64
 80a4a76:	fb93 f3f2 	sdivne	r3, r3, r2
 80a4a7a:	2300      	moveq	r3, #0
 80a4a7c:	60b3      	str	r3, [r6, #8]
    return true;
}
 80a4a7e:	bd70      	pop	{r4, r5, r6, pc}

080a4a80 <_ZN5spark9WiFiClass4RSSIEv>:
    int WiFiClass::getCredentials(WiFiAccessPoint* results, size_t result_count) {
        APList apList(results, result_count);
        return apList.start();
    }

    WiFiSignal WiFiClass::RSSI() {
 80a4a80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a4a84:	4688      	mov	r8, r1
public:
    // In order to be compatible with CellularSignal
    int rssi = 2;
    int qual = 0;

    WiFiSignal() {}
 80a4a86:	4b16      	ldr	r3, [pc, #88]	; (80a4ae0 <_ZN5spark9WiFiClass4RSSIEv+0x60>)
 80a4a88:	2500      	movs	r5, #0
 80a4a8a:	2702      	movs	r7, #2
 80a4a8c:	2618      	movs	r6, #24
 80a4a8e:	b086      	sub	sp, #24
 80a4a90:	6003      	str	r3, [r0, #0]
 80a4a92:	6047      	str	r7, [r0, #4]
 80a4a94:	6085      	str	r5, [r0, #8]
 80a4a96:	4632      	mov	r2, r6
 80a4a98:	4629      	mov	r1, r5
 80a4a9a:	4604      	mov	r4, r0
 80a4a9c:	300c      	adds	r0, #12
 80a4a9e:	f001 fde2 	bl	80a6666 <memset>
        WiFiSignal sig;
        if (!network_ready(*this, 0, NULL)) {
 80a4aa2:	462a      	mov	r2, r5
 80a4aa4:	4629      	mov	r1, r5
 80a4aa6:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80a4aaa:	f7fe fba5 	bl	80a31f8 <network_ready>
 80a4aae:	b190      	cbz	r0, 80a4ad6 <_ZN5spark9WiFiClass4RSSIEv+0x56>
            return sig;
        }

        wlan_connected_info_t info = {0};
 80a4ab0:	4632      	mov	r2, r6
 80a4ab2:	4629      	mov	r1, r5
 80a4ab4:	4668      	mov	r0, sp
 80a4ab6:	f001 fdd6 	bl	80a6666 <memset>
        info.size = sizeof(info);
        int r = wlan_connected_info(nullptr, &info, nullptr);
 80a4aba:	462a      	mov	r2, r5
 80a4abc:	4669      	mov	r1, sp
 80a4abe:	4628      	mov	r0, r5
        if (!network_ready(*this, 0, NULL)) {
            return sig;
        }

        wlan_connected_info_t info = {0};
        info.size = sizeof(info);
 80a4ac0:	f8ad 6000 	strh.w	r6, [sp]
        int r = wlan_connected_info(nullptr, &info, nullptr);
 80a4ac4:	f7fe fb24 	bl	80a3110 <wlan_connected_info>
        if (r == 0) {
 80a4ac8:	b920      	cbnz	r0, 80a4ad4 <_ZN5spark9WiFiClass4RSSIEv+0x54>
            sig.fromConnectedInfo(info);
 80a4aca:	4669      	mov	r1, sp
 80a4acc:	4620      	mov	r0, r4
 80a4ace:	f7ff ffb8 	bl	80a4a42 <_ZN10WiFiSignal17fromConnectedInfoERK21wlan_connected_info_t>
            return sig;
 80a4ad2:	e000      	b.n	80a4ad6 <_ZN5spark9WiFiClass4RSSIEv+0x56>
        }

        sig.rssi = 2;
 80a4ad4:	6067      	str	r7, [r4, #4]
        return sig;
    }
 80a4ad6:	4620      	mov	r0, r4
 80a4ad8:	b006      	add	sp, #24
 80a4ada:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a4ade:	bf00      	nop
 80a4ae0:	080a9cdc 	.word	0x080a9cdc

080a4ae4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a4ae4:	4b02      	ldr	r3, [pc, #8]	; (80a4af0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a4ae6:	2204      	movs	r2, #4
 80a4ae8:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a4aea:	4a02      	ldr	r2, [pc, #8]	; (80a4af4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a4aec:	601a      	str	r2, [r3, #0]
 80a4aee:	4770      	bx	lr
 80a4af0:	2000058c 	.word	0x2000058c
 80a4af4:	080a9ca8 	.word	0x080a9ca8

080a4af8 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a4af8:	2300      	movs	r3, #0
 80a4afa:	461a      	mov	r2, r3
 80a4afc:	6840      	ldr	r0, [r0, #4]
 80a4afe:	f7fe bb63 	b.w	80a31c8 <network_connect>

080a4b02 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a4b02:	2200      	movs	r2, #0
 80a4b04:	2102      	movs	r1, #2
 80a4b06:	6840      	ldr	r0, [r0, #4]
 80a4b08:	f7fe bb6e 	b.w	80a31e8 <network_disconnect>

080a4b0c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a4b0c:	2200      	movs	r2, #0
 80a4b0e:	4611      	mov	r1, r2
 80a4b10:	6840      	ldr	r0, [r0, #4]
 80a4b12:	f7fe bb61 	b.w	80a31d8 <network_connecting>

080a4b16 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a4b16:	2200      	movs	r2, #0
 80a4b18:	4611      	mov	r1, r2
 80a4b1a:	6840      	ldr	r0, [r0, #4]
 80a4b1c:	f7fe bb6c 	b.w	80a31f8 <network_ready>

080a4b20 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a4b20:	2300      	movs	r3, #0
 80a4b22:	461a      	mov	r2, r3
 80a4b24:	4619      	mov	r1, r3
 80a4b26:	6840      	ldr	r0, [r0, #4]
 80a4b28:	f7fe bb6e 	b.w	80a3208 <network_on>

080a4b2c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a4b2c:	2300      	movs	r3, #0
 80a4b2e:	461a      	mov	r2, r3
 80a4b30:	4619      	mov	r1, r3
 80a4b32:	6840      	ldr	r0, [r0, #4]
 80a4b34:	f7fe bb70 	b.w	80a3218 <network_off>

080a4b38 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a4b38:	2200      	movs	r2, #0
 80a4b3a:	f081 0101 	eor.w	r1, r1, #1
 80a4b3e:	6840      	ldr	r0, [r0, #4]
 80a4b40:	f7fe bb72 	b.w	80a3228 <network_listen>

080a4b44 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a4b44:	2200      	movs	r2, #0
 80a4b46:	6840      	ldr	r0, [r0, #4]
 80a4b48:	f7fe bb7e 	b.w	80a3248 <network_set_listen_timeout>

080a4b4c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a4b4c:	2200      	movs	r2, #0
 80a4b4e:	4611      	mov	r1, r2
 80a4b50:	6840      	ldr	r0, [r0, #4]
 80a4b52:	f7fe bb81 	b.w	80a3258 <network_get_listen_timeout>

080a4b56 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a4b56:	2200      	movs	r2, #0
 80a4b58:	4611      	mov	r1, r2
 80a4b5a:	6840      	ldr	r0, [r0, #4]
 80a4b5c:	f7fe bb6c 	b.w	80a3238 <network_listening>

080a4b60 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a4b60:	b570      	push	{r4, r5, r6, lr}
 80a4b62:	4616      	mov	r6, r2
 80a4b64:	b08e      	sub	sp, #56	; 0x38
 80a4b66:	4604      	mov	r4, r0
    IPAddress addr;
 80a4b68:	a808      	add	r0, sp, #32
 80a4b6a:	f7ff fcc5 	bl	80a44f8 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a4b6e:	2211      	movs	r2, #17
 80a4b70:	2100      	movs	r1, #0
 80a4b72:	a803      	add	r0, sp, #12
 80a4b74:	f001 fd77 	bl	80a6666 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a4b78:	4630      	mov	r0, r6
 80a4b7a:	f002 facb 	bl	80a7114 <strlen>
 80a4b7e:	2500      	movs	r5, #0
 80a4b80:	4b0a      	ldr	r3, [pc, #40]	; (80a4bac <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a4b82:	9500      	str	r5, [sp, #0]
 80a4b84:	b281      	uxth	r1, r0
 80a4b86:	685b      	ldr	r3, [r3, #4]
 80a4b88:	aa03      	add	r2, sp, #12
 80a4b8a:	4630      	mov	r0, r6
 80a4b8c:	f7fe fab0 	bl	80a30f0 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a4b90:	b120      	cbz	r0, 80a4b9c <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a4b92:	4629      	mov	r1, r5
 80a4b94:	4620      	mov	r0, r4
 80a4b96:	f7ff fccf 	bl	80a4538 <_ZN9IPAddressC1Em>
 80a4b9a:	e003      	b.n	80a4ba4 <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a4b9c:	a903      	add	r1, sp, #12
 80a4b9e:	4620      	mov	r0, r4
 80a4ba0:	f7ff fcb8 	bl	80a4514 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a4ba4:	4620      	mov	r0, r4
 80a4ba6:	b00e      	add	sp, #56	; 0x38
 80a4ba8:	bd70      	pop	{r4, r5, r6, pc}
 80a4baa:	bf00      	nop
 80a4bac:	2000058c 	.word	0x2000058c

080a4bb0 <_ZN5spark12NetworkClass4fromEm>:
        return Cellular;
#endif
    default:
        return Network;
    }
}
 80a4bb0:	4b03      	ldr	r3, [pc, #12]	; (80a4bc0 <_ZN5spark12NetworkClass4fromEm+0x10>)
 80a4bb2:	4a04      	ldr	r2, [pc, #16]	; (80a4bc4 <_ZN5spark12NetworkClass4fromEm+0x14>)
 80a4bb4:	2804      	cmp	r0, #4
 80a4bb6:	bf0c      	ite	eq
 80a4bb8:	4610      	moveq	r0, r2
 80a4bba:	4618      	movne	r0, r3
 80a4bbc:	4770      	bx	lr
 80a4bbe:	bf00      	nop
 80a4bc0:	20000594 	.word	0x20000594
 80a4bc4:	2000058c 	.word	0x2000058c

080a4bc8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80a4bc8:	4b02      	ldr	r3, [pc, #8]	; (80a4bd4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a4bca:	4a03      	ldr	r2, [pc, #12]	; (80a4bd8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a4bcc:	601a      	str	r2, [r3, #0]
 80a4bce:	2200      	movs	r2, #0
 80a4bd0:	605a      	str	r2, [r3, #4]
 80a4bd2:	4770      	bx	lr
 80a4bd4:	20000594 	.word	0x20000594
 80a4bd8:	080a9d00 	.word	0x080a9d00

080a4bdc <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a4bdc:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a4bde:	4e1a      	ldr	r6, [pc, #104]	; (80a4c48 <pinAvailable+0x6c>)
 80a4be0:	4604      	mov	r4, r0
 80a4be2:	6831      	ldr	r1, [r6, #0]
 80a4be4:	f011 0501 	ands.w	r5, r1, #1
 80a4be8:	d10f      	bne.n	80a4c0a <pinAvailable+0x2e>
 80a4bea:	4630      	mov	r0, r6
 80a4bec:	f7fb fa5f 	bl	80a00ae <__cxa_guard_acquire>
 80a4bf0:	b158      	cbz	r0, 80a4c0a <pinAvailable+0x2e>
 80a4bf2:	4629      	mov	r1, r5
 80a4bf4:	4815      	ldr	r0, [pc, #84]	; (80a4c4c <pinAvailable+0x70>)
 80a4bf6:	f7fe fbbd 	bl	80a3374 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a4bfa:	4630      	mov	r0, r6
 80a4bfc:	f7fb fa5c 	bl	80a00b8 <__cxa_guard_release>
 80a4c00:	4a13      	ldr	r2, [pc, #76]	; (80a4c50 <pinAvailable+0x74>)
 80a4c02:	4914      	ldr	r1, [pc, #80]	; (80a4c54 <pinAvailable+0x78>)
 80a4c04:	4811      	ldr	r0, [pc, #68]	; (80a4c4c <pinAvailable+0x70>)
 80a4c06:	f000 f8bd 	bl	80a4d84 <__aeabi_atexit>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
 80a4c0a:	4810      	ldr	r0, [pc, #64]	; (80a4c4c <pinAvailable+0x70>)
 80a4c0c:	f7fe fbd7 	bl	80a33be <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a4c10:	b128      	cbz	r0, 80a4c1e <pinAvailable+0x42>
 80a4c12:	f1a4 030d 	sub.w	r3, r4, #13
 80a4c16:	2b02      	cmp	r3, #2
 80a4c18:	d801      	bhi.n	80a4c1e <pinAvailable+0x42>
  {
    return 0; // 'pin' is used
 80a4c1a:	2000      	movs	r0, #0
 80a4c1c:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a4c1e:	f000 f88b 	bl	80a4d38 <_Z19__fetch_global_Wirev>
 80a4c22:	f7ff fe57 	bl	80a48d4 <_ZN7TwoWire9isEnabledEv>
 80a4c26:	b108      	cbz	r0, 80a4c2c <pinAvailable+0x50>
 80a4c28:	2c01      	cmp	r4, #1
 80a4c2a:	d9f6      	bls.n	80a4c1a <pinAvailable+0x3e>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a4c2c:	f7ff fdd4 	bl	80a47d8 <_Z22__fetch_global_Serial1v>
 80a4c30:	f7ff fdcf 	bl	80a47d2 <_ZN11USARTSerial9isEnabledEv>
 80a4c34:	b118      	cbz	r0, 80a4c3e <pinAvailable+0x62>
 80a4c36:	f1a4 0312 	sub.w	r3, r4, #18
 80a4c3a:	2b01      	cmp	r3, #1
 80a4c3c:	d9ed      	bls.n	80a4c1a <pinAvailable+0x3e>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a4c3e:	2c17      	cmp	r4, #23
 80a4c40:	bf8c      	ite	hi
 80a4c42:	2000      	movhi	r0, #0
 80a4c44:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a4c46:	bd70      	pop	{r4, r5, r6, pc}
 80a4c48:	20000100 	.word	0x20000100
 80a4c4c:	20000104 	.word	0x20000104
 80a4c50:	200000fc 	.word	0x200000fc
 80a4c54:	080a02c7 	.word	0x080a02c7

080a4c58 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a4c58:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a4c5a:	b538      	push	{r3, r4, r5, lr}
 80a4c5c:	4604      	mov	r4, r0
 80a4c5e:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a4c60:	d80a      	bhi.n	80a4c78 <pinMode+0x20>
 80a4c62:	29ff      	cmp	r1, #255	; 0xff
 80a4c64:	d008      	beq.n	80a4c78 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a4c66:	f7ff ffb9 	bl	80a4bdc <pinAvailable>
 80a4c6a:	b128      	cbz	r0, 80a4c78 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a4c6c:	4629      	mov	r1, r5
 80a4c6e:	4620      	mov	r0, r4
}
 80a4c70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a4c74:	f7fe b8b2 	b.w	80a2ddc <HAL_Pin_Mode>
 80a4c78:	bd38      	pop	{r3, r4, r5, pc}

080a4c7a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a4c7a:	b538      	push	{r3, r4, r5, lr}
 80a4c7c:	4604      	mov	r4, r0
 80a4c7e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a4c80:	f7fe f8b4 	bl	80a2dec <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a4c84:	28ff      	cmp	r0, #255	; 0xff
 80a4c86:	d010      	beq.n	80a4caa <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80a4c88:	2806      	cmp	r0, #6
 80a4c8a:	d804      	bhi.n	80a4c96 <digitalWrite+0x1c>
 80a4c8c:	234d      	movs	r3, #77	; 0x4d
 80a4c8e:	fa23 f000 	lsr.w	r0, r3, r0
 80a4c92:	07c3      	lsls	r3, r0, #31
 80a4c94:	d409      	bmi.n	80a4caa <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a4c96:	4620      	mov	r0, r4
 80a4c98:	f7ff ffa0 	bl	80a4bdc <pinAvailable>
 80a4c9c:	b128      	cbz	r0, 80a4caa <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a4c9e:	4629      	mov	r1, r5
 80a4ca0:	4620      	mov	r0, r4
}
 80a4ca2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a4ca6:	f7fe b8a9 	b.w	80a2dfc <HAL_GPIO_Write>
 80a4caa:	bd38      	pop	{r3, r4, r5, pc}

080a4cac <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 80a4cac:	b510      	push	{r4, lr}
 80a4cae:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a4cb0:	f7fe f89c 	bl	80a2dec <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
 80a4cb4:	3804      	subs	r0, #4
 80a4cb6:	b2c0      	uxtb	r0, r0
 80a4cb8:	2801      	cmp	r0, #1
 80a4cba:	d908      	bls.n	80a4cce <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 80a4cbc:	4620      	mov	r0, r4
 80a4cbe:	f7ff ff8d 	bl	80a4bdc <pinAvailable>
 80a4cc2:	b120      	cbz	r0, 80a4cce <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a4cc4:	4620      	mov	r0, r4
}
 80a4cc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a4cca:	f7fe b89f 	b.w	80a2e0c <HAL_GPIO_Read>
}
 80a4cce:	2000      	movs	r0, #0
 80a4cd0:	bd10      	pop	{r4, pc}
	...

080a4cd4 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a4cd4:	b513      	push	{r0, r1, r4, lr}
 80a4cd6:	4c08      	ldr	r4, [pc, #32]	; (80a4cf8 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a4cd8:	2300      	movs	r3, #0
 80a4cda:	461a      	mov	r2, r3
 80a4cdc:	4619      	mov	r1, r3
 80a4cde:	9300      	str	r3, [sp, #0]
 80a4ce0:	4620      	mov	r0, r4
 80a4ce2:	f7ff fc3f 	bl	80a4564 <_ZN9IPAddressC1Ehhhh>
 80a4ce6:	4620      	mov	r0, r4
 80a4ce8:	4a04      	ldr	r2, [pc, #16]	; (80a4cfc <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a4cea:	4905      	ldr	r1, [pc, #20]	; (80a4d00 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a4cec:	b002      	add	sp, #8
 80a4cee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a4cf2:	f000 b847 	b.w	80a4d84 <__aeabi_atexit>
 80a4cf6:	bf00      	nop
 80a4cf8:	200005a0 	.word	0x200005a0
 80a4cfc:	200000fc 	.word	0x200000fc
 80a4d00:	080a44b7 	.word	0x080a44b7

080a4d04 <_Z17acquireWireBufferv>:
}

} // anonymous

HAL_I2C_Config __attribute__((weak)) acquireWireBuffer()
{
 80a4d04:	b570      	push	{r4, r5, r6, lr}
 80a4d06:	4604      	mov	r4, r0
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a4d08:	2514      	movs	r5, #20
 80a4d0a:	462a      	mov	r2, r5

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a4d0c:	4e09      	ldr	r6, [pc, #36]	; (80a4d34 <_Z17acquireWireBufferv+0x30>)
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a4d0e:	2100      	movs	r1, #0
 80a4d10:	f001 fca9 	bl	80a6666 <memset>
 80a4d14:	8025      	strh	r5, [r4, #0]
 80a4d16:	2520      	movs	r5, #32

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a4d18:	4631      	mov	r1, r6
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a4d1a:	60a5      	str	r5, [r4, #8]
 80a4d1c:	6125      	str	r5, [r4, #16]

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a4d1e:	4628      	mov	r0, r5
 80a4d20:	f000 f840 	bl	80a4da4 <_ZnajRKSt9nothrow_t>
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a4d24:	4631      	mov	r1, r6
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a4d26:	6060      	str	r0, [r4, #4]
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a4d28:	4628      	mov	r0, r5
 80a4d2a:	f000 f83b 	bl	80a4da4 <_ZnajRKSt9nothrow_t>
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a4d2e:	60e0      	str	r0, [r4, #12]
} // anonymous

HAL_I2C_Config __attribute__((weak)) acquireWireBuffer()
{
	return defaultWireConfig();
}
 80a4d30:	4620      	mov	r0, r4
 80a4d32:	bd70      	pop	{r4, r5, r6, pc}
 80a4d34:	080a9d2c 	.word	0x080a9d2c

080a4d38 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 80a4d38:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a4d3a:	4d0e      	ldr	r5, [pc, #56]	; (80a4d74 <_Z19__fetch_global_Wirev+0x3c>)
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 80a4d3c:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a4d3e:	6829      	ldr	r1, [r5, #0]
 80a4d40:	f011 0401 	ands.w	r4, r1, #1
 80a4d44:	d113      	bne.n	80a4d6e <_Z19__fetch_global_Wirev+0x36>
 80a4d46:	4628      	mov	r0, r5
 80a4d48:	f7fb f9b1 	bl	80a00ae <__cxa_guard_acquire>
 80a4d4c:	b178      	cbz	r0, 80a4d6e <_Z19__fetch_global_Wirev+0x36>
 80a4d4e:	a801      	add	r0, sp, #4
 80a4d50:	f7ff ffd8 	bl	80a4d04 <_Z17acquireWireBufferv>
 80a4d54:	aa01      	add	r2, sp, #4
 80a4d56:	4621      	mov	r1, r4
 80a4d58:	4807      	ldr	r0, [pc, #28]	; (80a4d78 <_Z19__fetch_global_Wirev+0x40>)
 80a4d5a:	f7ff fda9 	bl	80a48b0 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
 80a4d5e:	4628      	mov	r0, r5
 80a4d60:	f7fb f9aa 	bl	80a00b8 <__cxa_guard_release>
 80a4d64:	4a05      	ldr	r2, [pc, #20]	; (80a4d7c <_Z19__fetch_global_Wirev+0x44>)
 80a4d66:	4906      	ldr	r1, [pc, #24]	; (80a4d80 <_Z19__fetch_global_Wirev+0x48>)
 80a4d68:	4803      	ldr	r0, [pc, #12]	; (80a4d78 <_Z19__fetch_global_Wirev+0x40>)
 80a4d6a:	f000 f80b 	bl	80a4d84 <__aeabi_atexit>
	return wire;
}
 80a4d6e:	4802      	ldr	r0, [pc, #8]	; (80a4d78 <_Z19__fetch_global_Wirev+0x40>)
 80a4d70:	b007      	add	sp, #28
 80a4d72:	bd30      	pop	{r4, r5, pc}
 80a4d74:	200005b8 	.word	0x200005b8
 80a4d78:	200005bc 	.word	0x200005bc
 80a4d7c:	200000fc 	.word	0x200000fc
 80a4d80:	080a4859 	.word	0x080a4859

080a4d84 <__aeabi_atexit>:
 80a4d84:	460b      	mov	r3, r1
 80a4d86:	4601      	mov	r1, r0
 80a4d88:	4618      	mov	r0, r3
 80a4d8a:	f001 bb57 	b.w	80a643c <__cxa_atexit>
	...

080a4d90 <_ZSt15get_new_handlerv>:
 80a4d90:	4b02      	ldr	r3, [pc, #8]	; (80a4d9c <_ZSt15get_new_handlerv+0xc>)
 80a4d92:	6818      	ldr	r0, [r3, #0]
 80a4d94:	f3bf 8f5f 	dmb	sy
 80a4d98:	4770      	bx	lr
 80a4d9a:	bf00      	nop
 80a4d9c:	200005d0 	.word	0x200005d0

080a4da0 <_ZdlPvj>:
 80a4da0:	f7fb b981 	b.w	80a00a6 <_ZdlPv>

080a4da4 <_ZnajRKSt9nothrow_t>:
 80a4da4:	f000 b800 	b.w	80a4da8 <_ZnwjRKSt9nothrow_t>

080a4da8 <_ZnwjRKSt9nothrow_t>:
 80a4da8:	b510      	push	{r4, lr}
 80a4daa:	2800      	cmp	r0, #0
 80a4dac:	bf14      	ite	ne
 80a4dae:	4604      	movne	r4, r0
 80a4db0:	2401      	moveq	r4, #1
 80a4db2:	4620      	mov	r0, r4
 80a4db4:	f7fe fa90 	bl	80a32d8 <malloc>
 80a4db8:	b920      	cbnz	r0, 80a4dc4 <_ZnwjRKSt9nothrow_t+0x1c>
 80a4dba:	f7ff ffe9 	bl	80a4d90 <_ZSt15get_new_handlerv>
 80a4dbe:	b108      	cbz	r0, 80a4dc4 <_ZnwjRKSt9nothrow_t+0x1c>
 80a4dc0:	4780      	blx	r0
 80a4dc2:	e7f6      	b.n	80a4db2 <_ZnwjRKSt9nothrow_t+0xa>
 80a4dc4:	bd10      	pop	{r4, pc}
	...

080a4dc8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a4dc8:	4b18      	ldr	r3, [pc, #96]	; (80a4e2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a4dca:	681a      	ldr	r2, [r3, #0]
 80a4dcc:	07d1      	lsls	r1, r2, #31
 80a4dce:	bf5c      	itt	pl
 80a4dd0:	2201      	movpl	r2, #1
 80a4dd2:	601a      	strpl	r2, [r3, #0]
 80a4dd4:	4b16      	ldr	r3, [pc, #88]	; (80a4e30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a4dd6:	681a      	ldr	r2, [r3, #0]
 80a4dd8:	07d2      	lsls	r2, r2, #31
 80a4dda:	bf5c      	itt	pl
 80a4ddc:	2201      	movpl	r2, #1
 80a4dde:	601a      	strpl	r2, [r3, #0]
 80a4de0:	4b14      	ldr	r3, [pc, #80]	; (80a4e34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a4de2:	681a      	ldr	r2, [r3, #0]
 80a4de4:	07d0      	lsls	r0, r2, #31
 80a4de6:	bf5c      	itt	pl
 80a4de8:	2201      	movpl	r2, #1
 80a4dea:	601a      	strpl	r2, [r3, #0]
 80a4dec:	4b12      	ldr	r3, [pc, #72]	; (80a4e38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a4dee:	681a      	ldr	r2, [r3, #0]
 80a4df0:	07d1      	lsls	r1, r2, #31
 80a4df2:	bf5c      	itt	pl
 80a4df4:	2201      	movpl	r2, #1
 80a4df6:	601a      	strpl	r2, [r3, #0]
 80a4df8:	4b10      	ldr	r3, [pc, #64]	; (80a4e3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a4dfa:	681a      	ldr	r2, [r3, #0]
 80a4dfc:	07d2      	lsls	r2, r2, #31
 80a4dfe:	bf5c      	itt	pl
 80a4e00:	2201      	movpl	r2, #1
 80a4e02:	601a      	strpl	r2, [r3, #0]
 80a4e04:	4b0e      	ldr	r3, [pc, #56]	; (80a4e40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a4e06:	681a      	ldr	r2, [r3, #0]
 80a4e08:	07d0      	lsls	r0, r2, #31
 80a4e0a:	bf5c      	itt	pl
 80a4e0c:	2201      	movpl	r2, #1
 80a4e0e:	601a      	strpl	r2, [r3, #0]
 80a4e10:	4b0c      	ldr	r3, [pc, #48]	; (80a4e44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a4e12:	681a      	ldr	r2, [r3, #0]
 80a4e14:	07d1      	lsls	r1, r2, #31
 80a4e16:	bf5c      	itt	pl
 80a4e18:	2201      	movpl	r2, #1
 80a4e1a:	601a      	strpl	r2, [r3, #0]
 80a4e1c:	4b0a      	ldr	r3, [pc, #40]	; (80a4e48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a4e1e:	681a      	ldr	r2, [r3, #0]
 80a4e20:	07d2      	lsls	r2, r2, #31
 80a4e22:	bf5c      	itt	pl
 80a4e24:	2201      	movpl	r2, #1
 80a4e26:	601a      	strpl	r2, [r3, #0]
 80a4e28:	4770      	bx	lr
 80a4e2a:	bf00      	nop
 80a4e2c:	200005f0 	.word	0x200005f0
 80a4e30:	200005ec 	.word	0x200005ec
 80a4e34:	200005e8 	.word	0x200005e8
 80a4e38:	200005e4 	.word	0x200005e4
 80a4e3c:	200005e0 	.word	0x200005e0
 80a4e40:	200005dc 	.word	0x200005dc
 80a4e44:	200005d8 	.word	0x200005d8
 80a4e48:	200005d4 	.word	0x200005d4

080a4e4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a4e4c:	4b24      	ldr	r3, [pc, #144]	; (80a4ee0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a4e4e:	681a      	ldr	r2, [r3, #0]
 80a4e50:	07d0      	lsls	r0, r2, #31
 80a4e52:	bf5c      	itt	pl
 80a4e54:	2201      	movpl	r2, #1
 80a4e56:	601a      	strpl	r2, [r3, #0]
 80a4e58:	4b22      	ldr	r3, [pc, #136]	; (80a4ee4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a4e5a:	681a      	ldr	r2, [r3, #0]
 80a4e5c:	07d1      	lsls	r1, r2, #31
 80a4e5e:	bf5c      	itt	pl
 80a4e60:	2201      	movpl	r2, #1
 80a4e62:	601a      	strpl	r2, [r3, #0]
 80a4e64:	4b20      	ldr	r3, [pc, #128]	; (80a4ee8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a4e66:	681a      	ldr	r2, [r3, #0]
 80a4e68:	07d2      	lsls	r2, r2, #31
 80a4e6a:	bf5c      	itt	pl
 80a4e6c:	2201      	movpl	r2, #1
 80a4e6e:	601a      	strpl	r2, [r3, #0]
 80a4e70:	4b1e      	ldr	r3, [pc, #120]	; (80a4eec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a4e72:	681a      	ldr	r2, [r3, #0]
 80a4e74:	07d0      	lsls	r0, r2, #31
 80a4e76:	bf5c      	itt	pl
 80a4e78:	2201      	movpl	r2, #1
 80a4e7a:	601a      	strpl	r2, [r3, #0]
 80a4e7c:	4b1c      	ldr	r3, [pc, #112]	; (80a4ef0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a4e7e:	681a      	ldr	r2, [r3, #0]
 80a4e80:	07d1      	lsls	r1, r2, #31
 80a4e82:	bf5c      	itt	pl
 80a4e84:	2201      	movpl	r2, #1
 80a4e86:	601a      	strpl	r2, [r3, #0]
 80a4e88:	4b1a      	ldr	r3, [pc, #104]	; (80a4ef4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a4e8a:	681a      	ldr	r2, [r3, #0]
 80a4e8c:	07d2      	lsls	r2, r2, #31
 80a4e8e:	bf5c      	itt	pl
 80a4e90:	2201      	movpl	r2, #1
 80a4e92:	601a      	strpl	r2, [r3, #0]
 80a4e94:	4b18      	ldr	r3, [pc, #96]	; (80a4ef8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a4e96:	681a      	ldr	r2, [r3, #0]
 80a4e98:	07d0      	lsls	r0, r2, #31
 80a4e9a:	bf5c      	itt	pl
 80a4e9c:	2201      	movpl	r2, #1
 80a4e9e:	601a      	strpl	r2, [r3, #0]
 80a4ea0:	4b16      	ldr	r3, [pc, #88]	; (80a4efc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a4ea2:	681a      	ldr	r2, [r3, #0]
 80a4ea4:	07d1      	lsls	r1, r2, #31
 80a4ea6:	bf5c      	itt	pl
 80a4ea8:	2201      	movpl	r2, #1
 80a4eaa:	601a      	strpl	r2, [r3, #0]
 80a4eac:	4b14      	ldr	r3, [pc, #80]	; (80a4f00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a4eae:	681a      	ldr	r2, [r3, #0]
 80a4eb0:	07d2      	lsls	r2, r2, #31
 80a4eb2:	bf5c      	itt	pl
 80a4eb4:	2201      	movpl	r2, #1
 80a4eb6:	601a      	strpl	r2, [r3, #0]
 80a4eb8:	4b12      	ldr	r3, [pc, #72]	; (80a4f04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a4eba:	681a      	ldr	r2, [r3, #0]
 80a4ebc:	07d0      	lsls	r0, r2, #31
 80a4ebe:	bf5c      	itt	pl
 80a4ec0:	2201      	movpl	r2, #1
 80a4ec2:	601a      	strpl	r2, [r3, #0]
 80a4ec4:	4b10      	ldr	r3, [pc, #64]	; (80a4f08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a4ec6:	681a      	ldr	r2, [r3, #0]
 80a4ec8:	07d1      	lsls	r1, r2, #31
 80a4eca:	bf5c      	itt	pl
 80a4ecc:	2201      	movpl	r2, #1
 80a4ece:	601a      	strpl	r2, [r3, #0]
 80a4ed0:	4b0e      	ldr	r3, [pc, #56]	; (80a4f0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a4ed2:	681a      	ldr	r2, [r3, #0]
 80a4ed4:	07d2      	lsls	r2, r2, #31
 80a4ed6:	bf5c      	itt	pl
 80a4ed8:	2201      	movpl	r2, #1
 80a4eda:	601a      	strpl	r2, [r3, #0]
 80a4edc:	4770      	bx	lr
 80a4ede:	bf00      	nop
 80a4ee0:	20000620 	.word	0x20000620
 80a4ee4:	2000061c 	.word	0x2000061c
 80a4ee8:	20000618 	.word	0x20000618
 80a4eec:	20000614 	.word	0x20000614
 80a4ef0:	20000610 	.word	0x20000610
 80a4ef4:	2000060c 	.word	0x2000060c
 80a4ef8:	20000608 	.word	0x20000608
 80a4efc:	20000604 	.word	0x20000604
 80a4f00:	20000600 	.word	0x20000600
 80a4f04:	200005fc 	.word	0x200005fc
 80a4f08:	200005f8 	.word	0x200005f8
 80a4f0c:	200005f4 	.word	0x200005f4

080a4f10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a4f10:	4b24      	ldr	r3, [pc, #144]	; (80a4fa4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a4f12:	681a      	ldr	r2, [r3, #0]
 80a4f14:	07d0      	lsls	r0, r2, #31
 80a4f16:	bf5c      	itt	pl
 80a4f18:	2201      	movpl	r2, #1
 80a4f1a:	601a      	strpl	r2, [r3, #0]
 80a4f1c:	4b22      	ldr	r3, [pc, #136]	; (80a4fa8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a4f1e:	681a      	ldr	r2, [r3, #0]
 80a4f20:	07d1      	lsls	r1, r2, #31
 80a4f22:	bf5c      	itt	pl
 80a4f24:	2201      	movpl	r2, #1
 80a4f26:	601a      	strpl	r2, [r3, #0]
 80a4f28:	4b20      	ldr	r3, [pc, #128]	; (80a4fac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a4f2a:	681a      	ldr	r2, [r3, #0]
 80a4f2c:	07d2      	lsls	r2, r2, #31
 80a4f2e:	bf5c      	itt	pl
 80a4f30:	2201      	movpl	r2, #1
 80a4f32:	601a      	strpl	r2, [r3, #0]
 80a4f34:	4b1e      	ldr	r3, [pc, #120]	; (80a4fb0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a4f36:	681a      	ldr	r2, [r3, #0]
 80a4f38:	07d0      	lsls	r0, r2, #31
 80a4f3a:	bf5c      	itt	pl
 80a4f3c:	2201      	movpl	r2, #1
 80a4f3e:	601a      	strpl	r2, [r3, #0]
 80a4f40:	4b1c      	ldr	r3, [pc, #112]	; (80a4fb4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a4f42:	681a      	ldr	r2, [r3, #0]
 80a4f44:	07d1      	lsls	r1, r2, #31
 80a4f46:	bf5c      	itt	pl
 80a4f48:	2201      	movpl	r2, #1
 80a4f4a:	601a      	strpl	r2, [r3, #0]
 80a4f4c:	4b1a      	ldr	r3, [pc, #104]	; (80a4fb8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a4f4e:	681a      	ldr	r2, [r3, #0]
 80a4f50:	07d2      	lsls	r2, r2, #31
 80a4f52:	bf5c      	itt	pl
 80a4f54:	2201      	movpl	r2, #1
 80a4f56:	601a      	strpl	r2, [r3, #0]
 80a4f58:	4b18      	ldr	r3, [pc, #96]	; (80a4fbc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a4f5a:	681a      	ldr	r2, [r3, #0]
 80a4f5c:	07d0      	lsls	r0, r2, #31
 80a4f5e:	bf5c      	itt	pl
 80a4f60:	2201      	movpl	r2, #1
 80a4f62:	601a      	strpl	r2, [r3, #0]
 80a4f64:	4b16      	ldr	r3, [pc, #88]	; (80a4fc0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a4f66:	681a      	ldr	r2, [r3, #0]
 80a4f68:	07d1      	lsls	r1, r2, #31
 80a4f6a:	bf5c      	itt	pl
 80a4f6c:	2201      	movpl	r2, #1
 80a4f6e:	601a      	strpl	r2, [r3, #0]
 80a4f70:	4b14      	ldr	r3, [pc, #80]	; (80a4fc4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a4f72:	681a      	ldr	r2, [r3, #0]
 80a4f74:	07d2      	lsls	r2, r2, #31
 80a4f76:	bf5c      	itt	pl
 80a4f78:	2201      	movpl	r2, #1
 80a4f7a:	601a      	strpl	r2, [r3, #0]
 80a4f7c:	4b12      	ldr	r3, [pc, #72]	; (80a4fc8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a4f7e:	681a      	ldr	r2, [r3, #0]
 80a4f80:	07d0      	lsls	r0, r2, #31
 80a4f82:	bf5c      	itt	pl
 80a4f84:	2201      	movpl	r2, #1
 80a4f86:	601a      	strpl	r2, [r3, #0]
 80a4f88:	4b10      	ldr	r3, [pc, #64]	; (80a4fcc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a4f8a:	681a      	ldr	r2, [r3, #0]
 80a4f8c:	07d1      	lsls	r1, r2, #31
 80a4f8e:	bf5c      	itt	pl
 80a4f90:	2201      	movpl	r2, #1
 80a4f92:	601a      	strpl	r2, [r3, #0]
 80a4f94:	4b0e      	ldr	r3, [pc, #56]	; (80a4fd0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a4f96:	681a      	ldr	r2, [r3, #0]
 80a4f98:	07d2      	lsls	r2, r2, #31
 80a4f9a:	bf5c      	itt	pl
 80a4f9c:	2201      	movpl	r2, #1
 80a4f9e:	601a      	strpl	r2, [r3, #0]
 80a4fa0:	4770      	bx	lr
 80a4fa2:	bf00      	nop
 80a4fa4:	20000650 	.word	0x20000650
 80a4fa8:	2000064c 	.word	0x2000064c
 80a4fac:	20000648 	.word	0x20000648
 80a4fb0:	20000644 	.word	0x20000644
 80a4fb4:	20000640 	.word	0x20000640
 80a4fb8:	2000063c 	.word	0x2000063c
 80a4fbc:	20000638 	.word	0x20000638
 80a4fc0:	20000634 	.word	0x20000634
 80a4fc4:	20000630 	.word	0x20000630
 80a4fc8:	2000062c 	.word	0x2000062c
 80a4fcc:	20000628 	.word	0x20000628
 80a4fd0:	20000624 	.word	0x20000624

080a4fd4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a4fd4:	4b18      	ldr	r3, [pc, #96]	; (80a5038 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a4fd6:	681a      	ldr	r2, [r3, #0]
 80a4fd8:	07d1      	lsls	r1, r2, #31
 80a4fda:	bf5c      	itt	pl
 80a4fdc:	2201      	movpl	r2, #1
 80a4fde:	601a      	strpl	r2, [r3, #0]
 80a4fe0:	4b16      	ldr	r3, [pc, #88]	; (80a503c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a4fe2:	681a      	ldr	r2, [r3, #0]
 80a4fe4:	07d2      	lsls	r2, r2, #31
 80a4fe6:	bf5c      	itt	pl
 80a4fe8:	2201      	movpl	r2, #1
 80a4fea:	601a      	strpl	r2, [r3, #0]
 80a4fec:	4b14      	ldr	r3, [pc, #80]	; (80a5040 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a4fee:	681a      	ldr	r2, [r3, #0]
 80a4ff0:	07d0      	lsls	r0, r2, #31
 80a4ff2:	bf5c      	itt	pl
 80a4ff4:	2201      	movpl	r2, #1
 80a4ff6:	601a      	strpl	r2, [r3, #0]
 80a4ff8:	4b12      	ldr	r3, [pc, #72]	; (80a5044 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a4ffa:	681a      	ldr	r2, [r3, #0]
 80a4ffc:	07d1      	lsls	r1, r2, #31
 80a4ffe:	bf5c      	itt	pl
 80a5000:	2201      	movpl	r2, #1
 80a5002:	601a      	strpl	r2, [r3, #0]
 80a5004:	4b10      	ldr	r3, [pc, #64]	; (80a5048 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a5006:	681a      	ldr	r2, [r3, #0]
 80a5008:	07d2      	lsls	r2, r2, #31
 80a500a:	bf5c      	itt	pl
 80a500c:	2201      	movpl	r2, #1
 80a500e:	601a      	strpl	r2, [r3, #0]
 80a5010:	4b0e      	ldr	r3, [pc, #56]	; (80a504c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a5012:	681a      	ldr	r2, [r3, #0]
 80a5014:	07d0      	lsls	r0, r2, #31
 80a5016:	bf5c      	itt	pl
 80a5018:	2201      	movpl	r2, #1
 80a501a:	601a      	strpl	r2, [r3, #0]
 80a501c:	4b0c      	ldr	r3, [pc, #48]	; (80a5050 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a501e:	681a      	ldr	r2, [r3, #0]
 80a5020:	07d1      	lsls	r1, r2, #31
 80a5022:	bf5c      	itt	pl
 80a5024:	2201      	movpl	r2, #1
 80a5026:	601a      	strpl	r2, [r3, #0]
 80a5028:	4b0a      	ldr	r3, [pc, #40]	; (80a5054 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a502a:	681a      	ldr	r2, [r3, #0]
 80a502c:	07d2      	lsls	r2, r2, #31
 80a502e:	bf5c      	itt	pl
 80a5030:	2201      	movpl	r2, #1
 80a5032:	601a      	strpl	r2, [r3, #0]
 80a5034:	4770      	bx	lr
 80a5036:	bf00      	nop
 80a5038:	20000670 	.word	0x20000670
 80a503c:	2000066c 	.word	0x2000066c
 80a5040:	20000668 	.word	0x20000668
 80a5044:	20000664 	.word	0x20000664
 80a5048:	20000660 	.word	0x20000660
 80a504c:	2000065c 	.word	0x2000065c
 80a5050:	20000658 	.word	0x20000658
 80a5054:	20000654 	.word	0x20000654

080a5058 <__aeabi_drsub>:
 80a5058:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a505c:	e002      	b.n	80a5064 <__adddf3>
 80a505e:	bf00      	nop

080a5060 <__aeabi_dsub>:
 80a5060:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a5064 <__adddf3>:
 80a5064:	b530      	push	{r4, r5, lr}
 80a5066:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a506a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a506e:	ea94 0f05 	teq	r4, r5
 80a5072:	bf08      	it	eq
 80a5074:	ea90 0f02 	teqeq	r0, r2
 80a5078:	bf1f      	itttt	ne
 80a507a:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a507e:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a5082:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a5086:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a508a:	f000 80e2 	beq.w	80a5252 <__adddf3+0x1ee>
 80a508e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a5092:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a5096:	bfb8      	it	lt
 80a5098:	426d      	neglt	r5, r5
 80a509a:	dd0c      	ble.n	80a50b6 <__adddf3+0x52>
 80a509c:	442c      	add	r4, r5
 80a509e:	ea80 0202 	eor.w	r2, r0, r2
 80a50a2:	ea81 0303 	eor.w	r3, r1, r3
 80a50a6:	ea82 0000 	eor.w	r0, r2, r0
 80a50aa:	ea83 0101 	eor.w	r1, r3, r1
 80a50ae:	ea80 0202 	eor.w	r2, r0, r2
 80a50b2:	ea81 0303 	eor.w	r3, r1, r3
 80a50b6:	2d36      	cmp	r5, #54	; 0x36
 80a50b8:	bf88      	it	hi
 80a50ba:	bd30      	pophi	{r4, r5, pc}
 80a50bc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a50c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a50c4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a50c8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a50cc:	d002      	beq.n	80a50d4 <__adddf3+0x70>
 80a50ce:	4240      	negs	r0, r0
 80a50d0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a50d4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a50d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a50dc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a50e0:	d002      	beq.n	80a50e8 <__adddf3+0x84>
 80a50e2:	4252      	negs	r2, r2
 80a50e4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a50e8:	ea94 0f05 	teq	r4, r5
 80a50ec:	f000 80a7 	beq.w	80a523e <__adddf3+0x1da>
 80a50f0:	f1a4 0401 	sub.w	r4, r4, #1
 80a50f4:	f1d5 0e20 	rsbs	lr, r5, #32
 80a50f8:	db0d      	blt.n	80a5116 <__adddf3+0xb2>
 80a50fa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a50fe:	fa22 f205 	lsr.w	r2, r2, r5
 80a5102:	1880      	adds	r0, r0, r2
 80a5104:	f141 0100 	adc.w	r1, r1, #0
 80a5108:	fa03 f20e 	lsl.w	r2, r3, lr
 80a510c:	1880      	adds	r0, r0, r2
 80a510e:	fa43 f305 	asr.w	r3, r3, r5
 80a5112:	4159      	adcs	r1, r3
 80a5114:	e00e      	b.n	80a5134 <__adddf3+0xd0>
 80a5116:	f1a5 0520 	sub.w	r5, r5, #32
 80a511a:	f10e 0e20 	add.w	lr, lr, #32
 80a511e:	2a01      	cmp	r2, #1
 80a5120:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a5124:	bf28      	it	cs
 80a5126:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a512a:	fa43 f305 	asr.w	r3, r3, r5
 80a512e:	18c0      	adds	r0, r0, r3
 80a5130:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a5134:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a5138:	d507      	bpl.n	80a514a <__adddf3+0xe6>
 80a513a:	f04f 0e00 	mov.w	lr, #0
 80a513e:	f1dc 0c00 	rsbs	ip, ip, #0
 80a5142:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a5146:	eb6e 0101 	sbc.w	r1, lr, r1
 80a514a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a514e:	d31b      	bcc.n	80a5188 <__adddf3+0x124>
 80a5150:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a5154:	d30c      	bcc.n	80a5170 <__adddf3+0x10c>
 80a5156:	0849      	lsrs	r1, r1, #1
 80a5158:	ea5f 0030 	movs.w	r0, r0, rrx
 80a515c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a5160:	f104 0401 	add.w	r4, r4, #1
 80a5164:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a5168:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a516c:	f080 809a 	bcs.w	80a52a4 <__adddf3+0x240>
 80a5170:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a5174:	bf08      	it	eq
 80a5176:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a517a:	f150 0000 	adcs.w	r0, r0, #0
 80a517e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a5182:	ea41 0105 	orr.w	r1, r1, r5
 80a5186:	bd30      	pop	{r4, r5, pc}
 80a5188:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a518c:	4140      	adcs	r0, r0
 80a518e:	eb41 0101 	adc.w	r1, r1, r1
 80a5192:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a5196:	f1a4 0401 	sub.w	r4, r4, #1
 80a519a:	d1e9      	bne.n	80a5170 <__adddf3+0x10c>
 80a519c:	f091 0f00 	teq	r1, #0
 80a51a0:	bf04      	itt	eq
 80a51a2:	4601      	moveq	r1, r0
 80a51a4:	2000      	moveq	r0, #0
 80a51a6:	fab1 f381 	clz	r3, r1
 80a51aa:	bf08      	it	eq
 80a51ac:	3320      	addeq	r3, #32
 80a51ae:	f1a3 030b 	sub.w	r3, r3, #11
 80a51b2:	f1b3 0220 	subs.w	r2, r3, #32
 80a51b6:	da0c      	bge.n	80a51d2 <__adddf3+0x16e>
 80a51b8:	320c      	adds	r2, #12
 80a51ba:	dd08      	ble.n	80a51ce <__adddf3+0x16a>
 80a51bc:	f102 0c14 	add.w	ip, r2, #20
 80a51c0:	f1c2 020c 	rsb	r2, r2, #12
 80a51c4:	fa01 f00c 	lsl.w	r0, r1, ip
 80a51c8:	fa21 f102 	lsr.w	r1, r1, r2
 80a51cc:	e00c      	b.n	80a51e8 <__adddf3+0x184>
 80a51ce:	f102 0214 	add.w	r2, r2, #20
 80a51d2:	bfd8      	it	le
 80a51d4:	f1c2 0c20 	rsble	ip, r2, #32
 80a51d8:	fa01 f102 	lsl.w	r1, r1, r2
 80a51dc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a51e0:	bfdc      	itt	le
 80a51e2:	ea41 010c 	orrle.w	r1, r1, ip
 80a51e6:	4090      	lslle	r0, r2
 80a51e8:	1ae4      	subs	r4, r4, r3
 80a51ea:	bfa2      	ittt	ge
 80a51ec:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a51f0:	4329      	orrge	r1, r5
 80a51f2:	bd30      	popge	{r4, r5, pc}
 80a51f4:	ea6f 0404 	mvn.w	r4, r4
 80a51f8:	3c1f      	subs	r4, #31
 80a51fa:	da1c      	bge.n	80a5236 <__adddf3+0x1d2>
 80a51fc:	340c      	adds	r4, #12
 80a51fe:	dc0e      	bgt.n	80a521e <__adddf3+0x1ba>
 80a5200:	f104 0414 	add.w	r4, r4, #20
 80a5204:	f1c4 0220 	rsb	r2, r4, #32
 80a5208:	fa20 f004 	lsr.w	r0, r0, r4
 80a520c:	fa01 f302 	lsl.w	r3, r1, r2
 80a5210:	ea40 0003 	orr.w	r0, r0, r3
 80a5214:	fa21 f304 	lsr.w	r3, r1, r4
 80a5218:	ea45 0103 	orr.w	r1, r5, r3
 80a521c:	bd30      	pop	{r4, r5, pc}
 80a521e:	f1c4 040c 	rsb	r4, r4, #12
 80a5222:	f1c4 0220 	rsb	r2, r4, #32
 80a5226:	fa20 f002 	lsr.w	r0, r0, r2
 80a522a:	fa01 f304 	lsl.w	r3, r1, r4
 80a522e:	ea40 0003 	orr.w	r0, r0, r3
 80a5232:	4629      	mov	r1, r5
 80a5234:	bd30      	pop	{r4, r5, pc}
 80a5236:	fa21 f004 	lsr.w	r0, r1, r4
 80a523a:	4629      	mov	r1, r5
 80a523c:	bd30      	pop	{r4, r5, pc}
 80a523e:	f094 0f00 	teq	r4, #0
 80a5242:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a5246:	bf06      	itte	eq
 80a5248:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a524c:	3401      	addeq	r4, #1
 80a524e:	3d01      	subne	r5, #1
 80a5250:	e74e      	b.n	80a50f0 <__adddf3+0x8c>
 80a5252:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a5256:	bf18      	it	ne
 80a5258:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a525c:	d029      	beq.n	80a52b2 <__adddf3+0x24e>
 80a525e:	ea94 0f05 	teq	r4, r5
 80a5262:	bf08      	it	eq
 80a5264:	ea90 0f02 	teqeq	r0, r2
 80a5268:	d005      	beq.n	80a5276 <__adddf3+0x212>
 80a526a:	ea54 0c00 	orrs.w	ip, r4, r0
 80a526e:	bf04      	itt	eq
 80a5270:	4619      	moveq	r1, r3
 80a5272:	4610      	moveq	r0, r2
 80a5274:	bd30      	pop	{r4, r5, pc}
 80a5276:	ea91 0f03 	teq	r1, r3
 80a527a:	bf1e      	ittt	ne
 80a527c:	2100      	movne	r1, #0
 80a527e:	2000      	movne	r0, #0
 80a5280:	bd30      	popne	{r4, r5, pc}
 80a5282:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a5286:	d105      	bne.n	80a5294 <__adddf3+0x230>
 80a5288:	0040      	lsls	r0, r0, #1
 80a528a:	4149      	adcs	r1, r1
 80a528c:	bf28      	it	cs
 80a528e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a5292:	bd30      	pop	{r4, r5, pc}
 80a5294:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a5298:	bf3c      	itt	cc
 80a529a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a529e:	bd30      	popcc	{r4, r5, pc}
 80a52a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a52a4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a52a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a52ac:	f04f 0000 	mov.w	r0, #0
 80a52b0:	bd30      	pop	{r4, r5, pc}
 80a52b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a52b6:	bf1a      	itte	ne
 80a52b8:	4619      	movne	r1, r3
 80a52ba:	4610      	movne	r0, r2
 80a52bc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a52c0:	bf1c      	itt	ne
 80a52c2:	460b      	movne	r3, r1
 80a52c4:	4602      	movne	r2, r0
 80a52c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a52ca:	bf06      	itte	eq
 80a52cc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a52d0:	ea91 0f03 	teqeq	r1, r3
 80a52d4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a52d8:	bd30      	pop	{r4, r5, pc}
 80a52da:	bf00      	nop

080a52dc <__aeabi_ui2d>:
 80a52dc:	f090 0f00 	teq	r0, #0
 80a52e0:	bf04      	itt	eq
 80a52e2:	2100      	moveq	r1, #0
 80a52e4:	4770      	bxeq	lr
 80a52e6:	b530      	push	{r4, r5, lr}
 80a52e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a52ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a52f0:	f04f 0500 	mov.w	r5, #0
 80a52f4:	f04f 0100 	mov.w	r1, #0
 80a52f8:	e750      	b.n	80a519c <__adddf3+0x138>
 80a52fa:	bf00      	nop

080a52fc <__aeabi_i2d>:
 80a52fc:	f090 0f00 	teq	r0, #0
 80a5300:	bf04      	itt	eq
 80a5302:	2100      	moveq	r1, #0
 80a5304:	4770      	bxeq	lr
 80a5306:	b530      	push	{r4, r5, lr}
 80a5308:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a530c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a5310:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a5314:	bf48      	it	mi
 80a5316:	4240      	negmi	r0, r0
 80a5318:	f04f 0100 	mov.w	r1, #0
 80a531c:	e73e      	b.n	80a519c <__adddf3+0x138>
 80a531e:	bf00      	nop

080a5320 <__aeabi_f2d>:
 80a5320:	0042      	lsls	r2, r0, #1
 80a5322:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a5326:	ea4f 0131 	mov.w	r1, r1, rrx
 80a532a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a532e:	bf1f      	itttt	ne
 80a5330:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a5334:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a5338:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a533c:	4770      	bxne	lr
 80a533e:	f092 0f00 	teq	r2, #0
 80a5342:	bf14      	ite	ne
 80a5344:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a5348:	4770      	bxeq	lr
 80a534a:	b530      	push	{r4, r5, lr}
 80a534c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a5350:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a5354:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a5358:	e720      	b.n	80a519c <__adddf3+0x138>
 80a535a:	bf00      	nop

080a535c <__aeabi_ul2d>:
 80a535c:	ea50 0201 	orrs.w	r2, r0, r1
 80a5360:	bf08      	it	eq
 80a5362:	4770      	bxeq	lr
 80a5364:	b530      	push	{r4, r5, lr}
 80a5366:	f04f 0500 	mov.w	r5, #0
 80a536a:	e00a      	b.n	80a5382 <__aeabi_l2d+0x16>

080a536c <__aeabi_l2d>:
 80a536c:	ea50 0201 	orrs.w	r2, r0, r1
 80a5370:	bf08      	it	eq
 80a5372:	4770      	bxeq	lr
 80a5374:	b530      	push	{r4, r5, lr}
 80a5376:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a537a:	d502      	bpl.n	80a5382 <__aeabi_l2d+0x16>
 80a537c:	4240      	negs	r0, r0
 80a537e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a5382:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a5386:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a538a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a538e:	f43f aedc 	beq.w	80a514a <__adddf3+0xe6>
 80a5392:	f04f 0203 	mov.w	r2, #3
 80a5396:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a539a:	bf18      	it	ne
 80a539c:	3203      	addne	r2, #3
 80a539e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a53a2:	bf18      	it	ne
 80a53a4:	3203      	addne	r2, #3
 80a53a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a53aa:	f1c2 0320 	rsb	r3, r2, #32
 80a53ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80a53b2:	fa20 f002 	lsr.w	r0, r0, r2
 80a53b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80a53ba:	ea40 000e 	orr.w	r0, r0, lr
 80a53be:	fa21 f102 	lsr.w	r1, r1, r2
 80a53c2:	4414      	add	r4, r2
 80a53c4:	e6c1      	b.n	80a514a <__adddf3+0xe6>
 80a53c6:	bf00      	nop

080a53c8 <__aeabi_dmul>:
 80a53c8:	b570      	push	{r4, r5, r6, lr}
 80a53ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a53ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a53d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a53d6:	bf1d      	ittte	ne
 80a53d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a53dc:	ea94 0f0c 	teqne	r4, ip
 80a53e0:	ea95 0f0c 	teqne	r5, ip
 80a53e4:	f000 f8de 	bleq	80a55a4 <__aeabi_dmul+0x1dc>
 80a53e8:	442c      	add	r4, r5
 80a53ea:	ea81 0603 	eor.w	r6, r1, r3
 80a53ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a53f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a53f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a53fa:	bf18      	it	ne
 80a53fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a5400:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a5404:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a5408:	d038      	beq.n	80a547c <__aeabi_dmul+0xb4>
 80a540a:	fba0 ce02 	umull	ip, lr, r0, r2
 80a540e:	f04f 0500 	mov.w	r5, #0
 80a5412:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a5416:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a541a:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a541e:	f04f 0600 	mov.w	r6, #0
 80a5422:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a5426:	f09c 0f00 	teq	ip, #0
 80a542a:	bf18      	it	ne
 80a542c:	f04e 0e01 	orrne.w	lr, lr, #1
 80a5430:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a5434:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a5438:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a543c:	d204      	bcs.n	80a5448 <__aeabi_dmul+0x80>
 80a543e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a5442:	416d      	adcs	r5, r5
 80a5444:	eb46 0606 	adc.w	r6, r6, r6
 80a5448:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a544c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a5450:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a5454:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a5458:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a545c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a5460:	bf88      	it	hi
 80a5462:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a5466:	d81e      	bhi.n	80a54a6 <__aeabi_dmul+0xde>
 80a5468:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a546c:	bf08      	it	eq
 80a546e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a5472:	f150 0000 	adcs.w	r0, r0, #0
 80a5476:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a547a:	bd70      	pop	{r4, r5, r6, pc}
 80a547c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a5480:	ea46 0101 	orr.w	r1, r6, r1
 80a5484:	ea40 0002 	orr.w	r0, r0, r2
 80a5488:	ea81 0103 	eor.w	r1, r1, r3
 80a548c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a5490:	bfc2      	ittt	gt
 80a5492:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a5496:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a549a:	bd70      	popgt	{r4, r5, r6, pc}
 80a549c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a54a0:	f04f 0e00 	mov.w	lr, #0
 80a54a4:	3c01      	subs	r4, #1
 80a54a6:	f300 80ab 	bgt.w	80a5600 <__aeabi_dmul+0x238>
 80a54aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a54ae:	bfde      	ittt	le
 80a54b0:	2000      	movle	r0, #0
 80a54b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a54b6:	bd70      	pople	{r4, r5, r6, pc}
 80a54b8:	f1c4 0400 	rsb	r4, r4, #0
 80a54bc:	3c20      	subs	r4, #32
 80a54be:	da35      	bge.n	80a552c <__aeabi_dmul+0x164>
 80a54c0:	340c      	adds	r4, #12
 80a54c2:	dc1b      	bgt.n	80a54fc <__aeabi_dmul+0x134>
 80a54c4:	f104 0414 	add.w	r4, r4, #20
 80a54c8:	f1c4 0520 	rsb	r5, r4, #32
 80a54cc:	fa00 f305 	lsl.w	r3, r0, r5
 80a54d0:	fa20 f004 	lsr.w	r0, r0, r4
 80a54d4:	fa01 f205 	lsl.w	r2, r1, r5
 80a54d8:	ea40 0002 	orr.w	r0, r0, r2
 80a54dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a54e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a54e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a54e8:	fa21 f604 	lsr.w	r6, r1, r4
 80a54ec:	eb42 0106 	adc.w	r1, r2, r6
 80a54f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a54f4:	bf08      	it	eq
 80a54f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a54fa:	bd70      	pop	{r4, r5, r6, pc}
 80a54fc:	f1c4 040c 	rsb	r4, r4, #12
 80a5500:	f1c4 0520 	rsb	r5, r4, #32
 80a5504:	fa00 f304 	lsl.w	r3, r0, r4
 80a5508:	fa20 f005 	lsr.w	r0, r0, r5
 80a550c:	fa01 f204 	lsl.w	r2, r1, r4
 80a5510:	ea40 0002 	orr.w	r0, r0, r2
 80a5514:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a5518:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a551c:	f141 0100 	adc.w	r1, r1, #0
 80a5520:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a5524:	bf08      	it	eq
 80a5526:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a552a:	bd70      	pop	{r4, r5, r6, pc}
 80a552c:	f1c4 0520 	rsb	r5, r4, #32
 80a5530:	fa00 f205 	lsl.w	r2, r0, r5
 80a5534:	ea4e 0e02 	orr.w	lr, lr, r2
 80a5538:	fa20 f304 	lsr.w	r3, r0, r4
 80a553c:	fa01 f205 	lsl.w	r2, r1, r5
 80a5540:	ea43 0302 	orr.w	r3, r3, r2
 80a5544:	fa21 f004 	lsr.w	r0, r1, r4
 80a5548:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a554c:	fa21 f204 	lsr.w	r2, r1, r4
 80a5550:	ea20 0002 	bic.w	r0, r0, r2
 80a5554:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a5558:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a555c:	bf08      	it	eq
 80a555e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a5562:	bd70      	pop	{r4, r5, r6, pc}
 80a5564:	f094 0f00 	teq	r4, #0
 80a5568:	d10f      	bne.n	80a558a <__aeabi_dmul+0x1c2>
 80a556a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a556e:	0040      	lsls	r0, r0, #1
 80a5570:	eb41 0101 	adc.w	r1, r1, r1
 80a5574:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a5578:	bf08      	it	eq
 80a557a:	3c01      	subeq	r4, #1
 80a557c:	d0f7      	beq.n	80a556e <__aeabi_dmul+0x1a6>
 80a557e:	ea41 0106 	orr.w	r1, r1, r6
 80a5582:	f095 0f00 	teq	r5, #0
 80a5586:	bf18      	it	ne
 80a5588:	4770      	bxne	lr
 80a558a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a558e:	0052      	lsls	r2, r2, #1
 80a5590:	eb43 0303 	adc.w	r3, r3, r3
 80a5594:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a5598:	bf08      	it	eq
 80a559a:	3d01      	subeq	r5, #1
 80a559c:	d0f7      	beq.n	80a558e <__aeabi_dmul+0x1c6>
 80a559e:	ea43 0306 	orr.w	r3, r3, r6
 80a55a2:	4770      	bx	lr
 80a55a4:	ea94 0f0c 	teq	r4, ip
 80a55a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a55ac:	bf18      	it	ne
 80a55ae:	ea95 0f0c 	teqne	r5, ip
 80a55b2:	d00c      	beq.n	80a55ce <__aeabi_dmul+0x206>
 80a55b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a55b8:	bf18      	it	ne
 80a55ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a55be:	d1d1      	bne.n	80a5564 <__aeabi_dmul+0x19c>
 80a55c0:	ea81 0103 	eor.w	r1, r1, r3
 80a55c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a55c8:	f04f 0000 	mov.w	r0, #0
 80a55cc:	bd70      	pop	{r4, r5, r6, pc}
 80a55ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a55d2:	bf06      	itte	eq
 80a55d4:	4610      	moveq	r0, r2
 80a55d6:	4619      	moveq	r1, r3
 80a55d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a55dc:	d019      	beq.n	80a5612 <__aeabi_dmul+0x24a>
 80a55de:	ea94 0f0c 	teq	r4, ip
 80a55e2:	d102      	bne.n	80a55ea <__aeabi_dmul+0x222>
 80a55e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a55e8:	d113      	bne.n	80a5612 <__aeabi_dmul+0x24a>
 80a55ea:	ea95 0f0c 	teq	r5, ip
 80a55ee:	d105      	bne.n	80a55fc <__aeabi_dmul+0x234>
 80a55f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a55f4:	bf1c      	itt	ne
 80a55f6:	4610      	movne	r0, r2
 80a55f8:	4619      	movne	r1, r3
 80a55fa:	d10a      	bne.n	80a5612 <__aeabi_dmul+0x24a>
 80a55fc:	ea81 0103 	eor.w	r1, r1, r3
 80a5600:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a5604:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a5608:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a560c:	f04f 0000 	mov.w	r0, #0
 80a5610:	bd70      	pop	{r4, r5, r6, pc}
 80a5612:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a5616:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a561a:	bd70      	pop	{r4, r5, r6, pc}

080a561c <__aeabi_ddiv>:
 80a561c:	b570      	push	{r4, r5, r6, lr}
 80a561e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a5622:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a5626:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a562a:	bf1d      	ittte	ne
 80a562c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a5630:	ea94 0f0c 	teqne	r4, ip
 80a5634:	ea95 0f0c 	teqne	r5, ip
 80a5638:	f000 f8a7 	bleq	80a578a <__aeabi_ddiv+0x16e>
 80a563c:	eba4 0405 	sub.w	r4, r4, r5
 80a5640:	ea81 0e03 	eor.w	lr, r1, r3
 80a5644:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a5648:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a564c:	f000 8088 	beq.w	80a5760 <__aeabi_ddiv+0x144>
 80a5650:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a5654:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a5658:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a565c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a5660:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a5664:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a5668:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a566c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a5670:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a5674:	429d      	cmp	r5, r3
 80a5676:	bf08      	it	eq
 80a5678:	4296      	cmpeq	r6, r2
 80a567a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a567e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a5682:	d202      	bcs.n	80a568a <__aeabi_ddiv+0x6e>
 80a5684:	085b      	lsrs	r3, r3, #1
 80a5686:	ea4f 0232 	mov.w	r2, r2, rrx
 80a568a:	1ab6      	subs	r6, r6, r2
 80a568c:	eb65 0503 	sbc.w	r5, r5, r3
 80a5690:	085b      	lsrs	r3, r3, #1
 80a5692:	ea4f 0232 	mov.w	r2, r2, rrx
 80a5696:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a569a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a569e:	ebb6 0e02 	subs.w	lr, r6, r2
 80a56a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a56a6:	bf22      	ittt	cs
 80a56a8:	1ab6      	subcs	r6, r6, r2
 80a56aa:	4675      	movcs	r5, lr
 80a56ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80a56b0:	085b      	lsrs	r3, r3, #1
 80a56b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80a56b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80a56ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a56be:	bf22      	ittt	cs
 80a56c0:	1ab6      	subcs	r6, r6, r2
 80a56c2:	4675      	movcs	r5, lr
 80a56c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a56c8:	085b      	lsrs	r3, r3, #1
 80a56ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80a56ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80a56d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a56d6:	bf22      	ittt	cs
 80a56d8:	1ab6      	subcs	r6, r6, r2
 80a56da:	4675      	movcs	r5, lr
 80a56dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a56e0:	085b      	lsrs	r3, r3, #1
 80a56e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80a56e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80a56ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a56ee:	bf22      	ittt	cs
 80a56f0:	1ab6      	subcs	r6, r6, r2
 80a56f2:	4675      	movcs	r5, lr
 80a56f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a56f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80a56fc:	d018      	beq.n	80a5730 <__aeabi_ddiv+0x114>
 80a56fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a5702:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a5706:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a570a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a570e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a5712:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a5716:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a571a:	d1c0      	bne.n	80a569e <__aeabi_ddiv+0x82>
 80a571c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a5720:	d10b      	bne.n	80a573a <__aeabi_ddiv+0x11e>
 80a5722:	ea41 0100 	orr.w	r1, r1, r0
 80a5726:	f04f 0000 	mov.w	r0, #0
 80a572a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a572e:	e7b6      	b.n	80a569e <__aeabi_ddiv+0x82>
 80a5730:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a5734:	bf04      	itt	eq
 80a5736:	4301      	orreq	r1, r0
 80a5738:	2000      	moveq	r0, #0
 80a573a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a573e:	bf88      	it	hi
 80a5740:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a5744:	f63f aeaf 	bhi.w	80a54a6 <__aeabi_dmul+0xde>
 80a5748:	ebb5 0c03 	subs.w	ip, r5, r3
 80a574c:	bf04      	itt	eq
 80a574e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a5752:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a5756:	f150 0000 	adcs.w	r0, r0, #0
 80a575a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a575e:	bd70      	pop	{r4, r5, r6, pc}
 80a5760:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a5764:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a5768:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a576c:	bfc2      	ittt	gt
 80a576e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a5772:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a5776:	bd70      	popgt	{r4, r5, r6, pc}
 80a5778:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a577c:	f04f 0e00 	mov.w	lr, #0
 80a5780:	3c01      	subs	r4, #1
 80a5782:	e690      	b.n	80a54a6 <__aeabi_dmul+0xde>
 80a5784:	ea45 0e06 	orr.w	lr, r5, r6
 80a5788:	e68d      	b.n	80a54a6 <__aeabi_dmul+0xde>
 80a578a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a578e:	ea94 0f0c 	teq	r4, ip
 80a5792:	bf08      	it	eq
 80a5794:	ea95 0f0c 	teqeq	r5, ip
 80a5798:	f43f af3b 	beq.w	80a5612 <__aeabi_dmul+0x24a>
 80a579c:	ea94 0f0c 	teq	r4, ip
 80a57a0:	d10a      	bne.n	80a57b8 <__aeabi_ddiv+0x19c>
 80a57a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a57a6:	f47f af34 	bne.w	80a5612 <__aeabi_dmul+0x24a>
 80a57aa:	ea95 0f0c 	teq	r5, ip
 80a57ae:	f47f af25 	bne.w	80a55fc <__aeabi_dmul+0x234>
 80a57b2:	4610      	mov	r0, r2
 80a57b4:	4619      	mov	r1, r3
 80a57b6:	e72c      	b.n	80a5612 <__aeabi_dmul+0x24a>
 80a57b8:	ea95 0f0c 	teq	r5, ip
 80a57bc:	d106      	bne.n	80a57cc <__aeabi_ddiv+0x1b0>
 80a57be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a57c2:	f43f aefd 	beq.w	80a55c0 <__aeabi_dmul+0x1f8>
 80a57c6:	4610      	mov	r0, r2
 80a57c8:	4619      	mov	r1, r3
 80a57ca:	e722      	b.n	80a5612 <__aeabi_dmul+0x24a>
 80a57cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a57d0:	bf18      	it	ne
 80a57d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a57d6:	f47f aec5 	bne.w	80a5564 <__aeabi_dmul+0x19c>
 80a57da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a57de:	f47f af0d 	bne.w	80a55fc <__aeabi_dmul+0x234>
 80a57e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a57e6:	f47f aeeb 	bne.w	80a55c0 <__aeabi_dmul+0x1f8>
 80a57ea:	e712      	b.n	80a5612 <__aeabi_dmul+0x24a>

080a57ec <__gedf2>:
 80a57ec:	f04f 3cff 	mov.w	ip, #4294967295
 80a57f0:	e006      	b.n	80a5800 <__cmpdf2+0x4>
 80a57f2:	bf00      	nop

080a57f4 <__ledf2>:
 80a57f4:	f04f 0c01 	mov.w	ip, #1
 80a57f8:	e002      	b.n	80a5800 <__cmpdf2+0x4>
 80a57fa:	bf00      	nop

080a57fc <__cmpdf2>:
 80a57fc:	f04f 0c01 	mov.w	ip, #1
 80a5800:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a5804:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a5808:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a580c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a5810:	bf18      	it	ne
 80a5812:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80a5816:	d01b      	beq.n	80a5850 <__cmpdf2+0x54>
 80a5818:	b001      	add	sp, #4
 80a581a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80a581e:	bf0c      	ite	eq
 80a5820:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80a5824:	ea91 0f03 	teqne	r1, r3
 80a5828:	bf02      	ittt	eq
 80a582a:	ea90 0f02 	teqeq	r0, r2
 80a582e:	2000      	moveq	r0, #0
 80a5830:	4770      	bxeq	lr
 80a5832:	f110 0f00 	cmn.w	r0, #0
 80a5836:	ea91 0f03 	teq	r1, r3
 80a583a:	bf58      	it	pl
 80a583c:	4299      	cmppl	r1, r3
 80a583e:	bf08      	it	eq
 80a5840:	4290      	cmpeq	r0, r2
 80a5842:	bf2c      	ite	cs
 80a5844:	17d8      	asrcs	r0, r3, #31
 80a5846:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80a584a:	f040 0001 	orr.w	r0, r0, #1
 80a584e:	4770      	bx	lr
 80a5850:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a5854:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a5858:	d102      	bne.n	80a5860 <__cmpdf2+0x64>
 80a585a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a585e:	d107      	bne.n	80a5870 <__cmpdf2+0x74>
 80a5860:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a5864:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a5868:	d1d6      	bne.n	80a5818 <__cmpdf2+0x1c>
 80a586a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a586e:	d0d3      	beq.n	80a5818 <__cmpdf2+0x1c>
 80a5870:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a5874:	4770      	bx	lr
 80a5876:	bf00      	nop

080a5878 <__aeabi_cdrcmple>:
 80a5878:	4684      	mov	ip, r0
 80a587a:	4610      	mov	r0, r2
 80a587c:	4662      	mov	r2, ip
 80a587e:	468c      	mov	ip, r1
 80a5880:	4619      	mov	r1, r3
 80a5882:	4663      	mov	r3, ip
 80a5884:	e000      	b.n	80a5888 <__aeabi_cdcmpeq>
 80a5886:	bf00      	nop

080a5888 <__aeabi_cdcmpeq>:
 80a5888:	b501      	push	{r0, lr}
 80a588a:	f7ff ffb7 	bl	80a57fc <__cmpdf2>
 80a588e:	2800      	cmp	r0, #0
 80a5890:	bf48      	it	mi
 80a5892:	f110 0f00 	cmnmi.w	r0, #0
 80a5896:	bd01      	pop	{r0, pc}

080a5898 <__aeabi_dcmpeq>:
 80a5898:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a589c:	f7ff fff4 	bl	80a5888 <__aeabi_cdcmpeq>
 80a58a0:	bf0c      	ite	eq
 80a58a2:	2001      	moveq	r0, #1
 80a58a4:	2000      	movne	r0, #0
 80a58a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80a58aa:	bf00      	nop

080a58ac <__aeabi_dcmplt>:
 80a58ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a58b0:	f7ff ffea 	bl	80a5888 <__aeabi_cdcmpeq>
 80a58b4:	bf34      	ite	cc
 80a58b6:	2001      	movcc	r0, #1
 80a58b8:	2000      	movcs	r0, #0
 80a58ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80a58be:	bf00      	nop

080a58c0 <__aeabi_dcmple>:
 80a58c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a58c4:	f7ff ffe0 	bl	80a5888 <__aeabi_cdcmpeq>
 80a58c8:	bf94      	ite	ls
 80a58ca:	2001      	movls	r0, #1
 80a58cc:	2000      	movhi	r0, #0
 80a58ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80a58d2:	bf00      	nop

080a58d4 <__aeabi_dcmpge>:
 80a58d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a58d8:	f7ff ffce 	bl	80a5878 <__aeabi_cdrcmple>
 80a58dc:	bf94      	ite	ls
 80a58de:	2001      	movls	r0, #1
 80a58e0:	2000      	movhi	r0, #0
 80a58e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80a58e6:	bf00      	nop

080a58e8 <__aeabi_dcmpgt>:
 80a58e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a58ec:	f7ff ffc4 	bl	80a5878 <__aeabi_cdrcmple>
 80a58f0:	bf34      	ite	cc
 80a58f2:	2001      	movcc	r0, #1
 80a58f4:	2000      	movcs	r0, #0
 80a58f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80a58fa:	bf00      	nop

080a58fc <__aeabi_dcmpun>:
 80a58fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a5900:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a5904:	d102      	bne.n	80a590c <__aeabi_dcmpun+0x10>
 80a5906:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a590a:	d10a      	bne.n	80a5922 <__aeabi_dcmpun+0x26>
 80a590c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a5910:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a5914:	d102      	bne.n	80a591c <__aeabi_dcmpun+0x20>
 80a5916:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a591a:	d102      	bne.n	80a5922 <__aeabi_dcmpun+0x26>
 80a591c:	f04f 0000 	mov.w	r0, #0
 80a5920:	4770      	bx	lr
 80a5922:	f04f 0001 	mov.w	r0, #1
 80a5926:	4770      	bx	lr

080a5928 <__aeabi_d2iz>:
 80a5928:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a592c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a5930:	d215      	bcs.n	80a595e <__aeabi_d2iz+0x36>
 80a5932:	d511      	bpl.n	80a5958 <__aeabi_d2iz+0x30>
 80a5934:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a5938:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a593c:	d912      	bls.n	80a5964 <__aeabi_d2iz+0x3c>
 80a593e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a5942:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a5946:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a594a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a594e:	fa23 f002 	lsr.w	r0, r3, r2
 80a5952:	bf18      	it	ne
 80a5954:	4240      	negne	r0, r0
 80a5956:	4770      	bx	lr
 80a5958:	f04f 0000 	mov.w	r0, #0
 80a595c:	4770      	bx	lr
 80a595e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a5962:	d105      	bne.n	80a5970 <__aeabi_d2iz+0x48>
 80a5964:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80a5968:	bf08      	it	eq
 80a596a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a596e:	4770      	bx	lr
 80a5970:	f04f 0000 	mov.w	r0, #0
 80a5974:	4770      	bx	lr
 80a5976:	bf00      	nop

080a5978 <__aeabi_d2uiz>:
 80a5978:	004a      	lsls	r2, r1, #1
 80a597a:	d211      	bcs.n	80a59a0 <__aeabi_d2uiz+0x28>
 80a597c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a5980:	d211      	bcs.n	80a59a6 <__aeabi_d2uiz+0x2e>
 80a5982:	d50d      	bpl.n	80a59a0 <__aeabi_d2uiz+0x28>
 80a5984:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a5988:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a598c:	d40e      	bmi.n	80a59ac <__aeabi_d2uiz+0x34>
 80a598e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a5992:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a5996:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a599a:	fa23 f002 	lsr.w	r0, r3, r2
 80a599e:	4770      	bx	lr
 80a59a0:	f04f 0000 	mov.w	r0, #0
 80a59a4:	4770      	bx	lr
 80a59a6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a59aa:	d102      	bne.n	80a59b2 <__aeabi_d2uiz+0x3a>
 80a59ac:	f04f 30ff 	mov.w	r0, #4294967295
 80a59b0:	4770      	bx	lr
 80a59b2:	f04f 0000 	mov.w	r0, #0
 80a59b6:	4770      	bx	lr

080a59b8 <__aeabi_d2f>:
 80a59b8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a59bc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80a59c0:	bf24      	itt	cs
 80a59c2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80a59c6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80a59ca:	d90d      	bls.n	80a59e8 <__aeabi_d2f+0x30>
 80a59cc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a59d0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80a59d4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80a59d8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80a59dc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80a59e0:	bf08      	it	eq
 80a59e2:	f020 0001 	biceq.w	r0, r0, #1
 80a59e6:	4770      	bx	lr
 80a59e8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80a59ec:	d121      	bne.n	80a5a32 <__aeabi_d2f+0x7a>
 80a59ee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80a59f2:	bfbc      	itt	lt
 80a59f4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80a59f8:	4770      	bxlt	lr
 80a59fa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a59fe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80a5a02:	f1c2 0218 	rsb	r2, r2, #24
 80a5a06:	f1c2 0c20 	rsb	ip, r2, #32
 80a5a0a:	fa10 f30c 	lsls.w	r3, r0, ip
 80a5a0e:	fa20 f002 	lsr.w	r0, r0, r2
 80a5a12:	bf18      	it	ne
 80a5a14:	f040 0001 	orrne.w	r0, r0, #1
 80a5a18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a5a1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80a5a20:	fa03 fc0c 	lsl.w	ip, r3, ip
 80a5a24:	ea40 000c 	orr.w	r0, r0, ip
 80a5a28:	fa23 f302 	lsr.w	r3, r3, r2
 80a5a2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80a5a30:	e7cc      	b.n	80a59cc <__aeabi_d2f+0x14>
 80a5a32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80a5a36:	d107      	bne.n	80a5a48 <__aeabi_d2f+0x90>
 80a5a38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80a5a3c:	bf1e      	ittt	ne
 80a5a3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80a5a42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80a5a46:	4770      	bxne	lr
 80a5a48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80a5a4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a5a50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a5a54:	4770      	bx	lr
 80a5a56:	bf00      	nop

080a5a58 <__aeabi_frsub>:
 80a5a58:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80a5a5c:	e002      	b.n	80a5a64 <__addsf3>
 80a5a5e:	bf00      	nop

080a5a60 <__aeabi_fsub>:
 80a5a60:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080a5a64 <__addsf3>:
 80a5a64:	0042      	lsls	r2, r0, #1
 80a5a66:	bf1f      	itttt	ne
 80a5a68:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80a5a6c:	ea92 0f03 	teqne	r2, r3
 80a5a70:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80a5a74:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a5a78:	d06a      	beq.n	80a5b50 <__addsf3+0xec>
 80a5a7a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80a5a7e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80a5a82:	bfc1      	itttt	gt
 80a5a84:	18d2      	addgt	r2, r2, r3
 80a5a86:	4041      	eorgt	r1, r0
 80a5a88:	4048      	eorgt	r0, r1
 80a5a8a:	4041      	eorgt	r1, r0
 80a5a8c:	bfb8      	it	lt
 80a5a8e:	425b      	neglt	r3, r3
 80a5a90:	2b19      	cmp	r3, #25
 80a5a92:	bf88      	it	hi
 80a5a94:	4770      	bxhi	lr
 80a5a96:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a5a9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a5a9e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80a5aa2:	bf18      	it	ne
 80a5aa4:	4240      	negne	r0, r0
 80a5aa6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a5aaa:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80a5aae:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80a5ab2:	bf18      	it	ne
 80a5ab4:	4249      	negne	r1, r1
 80a5ab6:	ea92 0f03 	teq	r2, r3
 80a5aba:	d03f      	beq.n	80a5b3c <__addsf3+0xd8>
 80a5abc:	f1a2 0201 	sub.w	r2, r2, #1
 80a5ac0:	fa41 fc03 	asr.w	ip, r1, r3
 80a5ac4:	eb10 000c 	adds.w	r0, r0, ip
 80a5ac8:	f1c3 0320 	rsb	r3, r3, #32
 80a5acc:	fa01 f103 	lsl.w	r1, r1, r3
 80a5ad0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a5ad4:	d502      	bpl.n	80a5adc <__addsf3+0x78>
 80a5ad6:	4249      	negs	r1, r1
 80a5ad8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80a5adc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a5ae0:	d313      	bcc.n	80a5b0a <__addsf3+0xa6>
 80a5ae2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80a5ae6:	d306      	bcc.n	80a5af6 <__addsf3+0x92>
 80a5ae8:	0840      	lsrs	r0, r0, #1
 80a5aea:	ea4f 0131 	mov.w	r1, r1, rrx
 80a5aee:	f102 0201 	add.w	r2, r2, #1
 80a5af2:	2afe      	cmp	r2, #254	; 0xfe
 80a5af4:	d251      	bcs.n	80a5b9a <__addsf3+0x136>
 80a5af6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80a5afa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a5afe:	bf08      	it	eq
 80a5b00:	f020 0001 	biceq.w	r0, r0, #1
 80a5b04:	ea40 0003 	orr.w	r0, r0, r3
 80a5b08:	4770      	bx	lr
 80a5b0a:	0049      	lsls	r1, r1, #1
 80a5b0c:	eb40 0000 	adc.w	r0, r0, r0
 80a5b10:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80a5b14:	f1a2 0201 	sub.w	r2, r2, #1
 80a5b18:	d1ed      	bne.n	80a5af6 <__addsf3+0x92>
 80a5b1a:	fab0 fc80 	clz	ip, r0
 80a5b1e:	f1ac 0c08 	sub.w	ip, ip, #8
 80a5b22:	ebb2 020c 	subs.w	r2, r2, ip
 80a5b26:	fa00 f00c 	lsl.w	r0, r0, ip
 80a5b2a:	bfaa      	itet	ge
 80a5b2c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80a5b30:	4252      	neglt	r2, r2
 80a5b32:	4318      	orrge	r0, r3
 80a5b34:	bfbc      	itt	lt
 80a5b36:	40d0      	lsrlt	r0, r2
 80a5b38:	4318      	orrlt	r0, r3
 80a5b3a:	4770      	bx	lr
 80a5b3c:	f092 0f00 	teq	r2, #0
 80a5b40:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80a5b44:	bf06      	itte	eq
 80a5b46:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80a5b4a:	3201      	addeq	r2, #1
 80a5b4c:	3b01      	subne	r3, #1
 80a5b4e:	e7b5      	b.n	80a5abc <__addsf3+0x58>
 80a5b50:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a5b54:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a5b58:	bf18      	it	ne
 80a5b5a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a5b5e:	d021      	beq.n	80a5ba4 <__addsf3+0x140>
 80a5b60:	ea92 0f03 	teq	r2, r3
 80a5b64:	d004      	beq.n	80a5b70 <__addsf3+0x10c>
 80a5b66:	f092 0f00 	teq	r2, #0
 80a5b6a:	bf08      	it	eq
 80a5b6c:	4608      	moveq	r0, r1
 80a5b6e:	4770      	bx	lr
 80a5b70:	ea90 0f01 	teq	r0, r1
 80a5b74:	bf1c      	itt	ne
 80a5b76:	2000      	movne	r0, #0
 80a5b78:	4770      	bxne	lr
 80a5b7a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80a5b7e:	d104      	bne.n	80a5b8a <__addsf3+0x126>
 80a5b80:	0040      	lsls	r0, r0, #1
 80a5b82:	bf28      	it	cs
 80a5b84:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80a5b88:	4770      	bx	lr
 80a5b8a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80a5b8e:	bf3c      	itt	cc
 80a5b90:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80a5b94:	4770      	bxcc	lr
 80a5b96:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a5b9a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80a5b9e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a5ba2:	4770      	bx	lr
 80a5ba4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80a5ba8:	bf16      	itet	ne
 80a5baa:	4608      	movne	r0, r1
 80a5bac:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80a5bb0:	4601      	movne	r1, r0
 80a5bb2:	0242      	lsls	r2, r0, #9
 80a5bb4:	bf06      	itte	eq
 80a5bb6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80a5bba:	ea90 0f01 	teqeq	r0, r1
 80a5bbe:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80a5bc2:	4770      	bx	lr

080a5bc4 <__aeabi_ui2f>:
 80a5bc4:	f04f 0300 	mov.w	r3, #0
 80a5bc8:	e004      	b.n	80a5bd4 <__aeabi_i2f+0x8>
 80a5bca:	bf00      	nop

080a5bcc <__aeabi_i2f>:
 80a5bcc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80a5bd0:	bf48      	it	mi
 80a5bd2:	4240      	negmi	r0, r0
 80a5bd4:	ea5f 0c00 	movs.w	ip, r0
 80a5bd8:	bf08      	it	eq
 80a5bda:	4770      	bxeq	lr
 80a5bdc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80a5be0:	4601      	mov	r1, r0
 80a5be2:	f04f 0000 	mov.w	r0, #0
 80a5be6:	e01c      	b.n	80a5c22 <__aeabi_l2f+0x2a>

080a5be8 <__aeabi_ul2f>:
 80a5be8:	ea50 0201 	orrs.w	r2, r0, r1
 80a5bec:	bf08      	it	eq
 80a5bee:	4770      	bxeq	lr
 80a5bf0:	f04f 0300 	mov.w	r3, #0
 80a5bf4:	e00a      	b.n	80a5c0c <__aeabi_l2f+0x14>
 80a5bf6:	bf00      	nop

080a5bf8 <__aeabi_l2f>:
 80a5bf8:	ea50 0201 	orrs.w	r2, r0, r1
 80a5bfc:	bf08      	it	eq
 80a5bfe:	4770      	bxeq	lr
 80a5c00:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80a5c04:	d502      	bpl.n	80a5c0c <__aeabi_l2f+0x14>
 80a5c06:	4240      	negs	r0, r0
 80a5c08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a5c0c:	ea5f 0c01 	movs.w	ip, r1
 80a5c10:	bf02      	ittt	eq
 80a5c12:	4684      	moveq	ip, r0
 80a5c14:	4601      	moveq	r1, r0
 80a5c16:	2000      	moveq	r0, #0
 80a5c18:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80a5c1c:	bf08      	it	eq
 80a5c1e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80a5c22:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80a5c26:	fabc f28c 	clz	r2, ip
 80a5c2a:	3a08      	subs	r2, #8
 80a5c2c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80a5c30:	db10      	blt.n	80a5c54 <__aeabi_l2f+0x5c>
 80a5c32:	fa01 fc02 	lsl.w	ip, r1, r2
 80a5c36:	4463      	add	r3, ip
 80a5c38:	fa00 fc02 	lsl.w	ip, r0, r2
 80a5c3c:	f1c2 0220 	rsb	r2, r2, #32
 80a5c40:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a5c44:	fa20 f202 	lsr.w	r2, r0, r2
 80a5c48:	eb43 0002 	adc.w	r0, r3, r2
 80a5c4c:	bf08      	it	eq
 80a5c4e:	f020 0001 	biceq.w	r0, r0, #1
 80a5c52:	4770      	bx	lr
 80a5c54:	f102 0220 	add.w	r2, r2, #32
 80a5c58:	fa01 fc02 	lsl.w	ip, r1, r2
 80a5c5c:	f1c2 0220 	rsb	r2, r2, #32
 80a5c60:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80a5c64:	fa21 f202 	lsr.w	r2, r1, r2
 80a5c68:	eb43 0002 	adc.w	r0, r3, r2
 80a5c6c:	bf08      	it	eq
 80a5c6e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a5c72:	4770      	bx	lr

080a5c74 <__aeabi_fmul>:
 80a5c74:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a5c78:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a5c7c:	bf1e      	ittt	ne
 80a5c7e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a5c82:	ea92 0f0c 	teqne	r2, ip
 80a5c86:	ea93 0f0c 	teqne	r3, ip
 80a5c8a:	d06f      	beq.n	80a5d6c <__aeabi_fmul+0xf8>
 80a5c8c:	441a      	add	r2, r3
 80a5c8e:	ea80 0c01 	eor.w	ip, r0, r1
 80a5c92:	0240      	lsls	r0, r0, #9
 80a5c94:	bf18      	it	ne
 80a5c96:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80a5c9a:	d01e      	beq.n	80a5cda <__aeabi_fmul+0x66>
 80a5c9c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80a5ca0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80a5ca4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80a5ca8:	fba0 3101 	umull	r3, r1, r0, r1
 80a5cac:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a5cb0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80a5cb4:	bf3e      	ittt	cc
 80a5cb6:	0049      	lslcc	r1, r1, #1
 80a5cb8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80a5cbc:	005b      	lslcc	r3, r3, #1
 80a5cbe:	ea40 0001 	orr.w	r0, r0, r1
 80a5cc2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80a5cc6:	2afd      	cmp	r2, #253	; 0xfd
 80a5cc8:	d81d      	bhi.n	80a5d06 <__aeabi_fmul+0x92>
 80a5cca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a5cce:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a5cd2:	bf08      	it	eq
 80a5cd4:	f020 0001 	biceq.w	r0, r0, #1
 80a5cd8:	4770      	bx	lr
 80a5cda:	f090 0f00 	teq	r0, #0
 80a5cde:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a5ce2:	bf08      	it	eq
 80a5ce4:	0249      	lsleq	r1, r1, #9
 80a5ce6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a5cea:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80a5cee:	3a7f      	subs	r2, #127	; 0x7f
 80a5cf0:	bfc2      	ittt	gt
 80a5cf2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a5cf6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a5cfa:	4770      	bxgt	lr
 80a5cfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a5d00:	f04f 0300 	mov.w	r3, #0
 80a5d04:	3a01      	subs	r2, #1
 80a5d06:	dc5d      	bgt.n	80a5dc4 <__aeabi_fmul+0x150>
 80a5d08:	f112 0f19 	cmn.w	r2, #25
 80a5d0c:	bfdc      	itt	le
 80a5d0e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80a5d12:	4770      	bxle	lr
 80a5d14:	f1c2 0200 	rsb	r2, r2, #0
 80a5d18:	0041      	lsls	r1, r0, #1
 80a5d1a:	fa21 f102 	lsr.w	r1, r1, r2
 80a5d1e:	f1c2 0220 	rsb	r2, r2, #32
 80a5d22:	fa00 fc02 	lsl.w	ip, r0, r2
 80a5d26:	ea5f 0031 	movs.w	r0, r1, rrx
 80a5d2a:	f140 0000 	adc.w	r0, r0, #0
 80a5d2e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80a5d32:	bf08      	it	eq
 80a5d34:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a5d38:	4770      	bx	lr
 80a5d3a:	f092 0f00 	teq	r2, #0
 80a5d3e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a5d42:	bf02      	ittt	eq
 80a5d44:	0040      	lsleq	r0, r0, #1
 80a5d46:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a5d4a:	3a01      	subeq	r2, #1
 80a5d4c:	d0f9      	beq.n	80a5d42 <__aeabi_fmul+0xce>
 80a5d4e:	ea40 000c 	orr.w	r0, r0, ip
 80a5d52:	f093 0f00 	teq	r3, #0
 80a5d56:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a5d5a:	bf02      	ittt	eq
 80a5d5c:	0049      	lsleq	r1, r1, #1
 80a5d5e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a5d62:	3b01      	subeq	r3, #1
 80a5d64:	d0f9      	beq.n	80a5d5a <__aeabi_fmul+0xe6>
 80a5d66:	ea41 010c 	orr.w	r1, r1, ip
 80a5d6a:	e78f      	b.n	80a5c8c <__aeabi_fmul+0x18>
 80a5d6c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a5d70:	ea92 0f0c 	teq	r2, ip
 80a5d74:	bf18      	it	ne
 80a5d76:	ea93 0f0c 	teqne	r3, ip
 80a5d7a:	d00a      	beq.n	80a5d92 <__aeabi_fmul+0x11e>
 80a5d7c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a5d80:	bf18      	it	ne
 80a5d82:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a5d86:	d1d8      	bne.n	80a5d3a <__aeabi_fmul+0xc6>
 80a5d88:	ea80 0001 	eor.w	r0, r0, r1
 80a5d8c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a5d90:	4770      	bx	lr
 80a5d92:	f090 0f00 	teq	r0, #0
 80a5d96:	bf17      	itett	ne
 80a5d98:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80a5d9c:	4608      	moveq	r0, r1
 80a5d9e:	f091 0f00 	teqne	r1, #0
 80a5da2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80a5da6:	d014      	beq.n	80a5dd2 <__aeabi_fmul+0x15e>
 80a5da8:	ea92 0f0c 	teq	r2, ip
 80a5dac:	d101      	bne.n	80a5db2 <__aeabi_fmul+0x13e>
 80a5dae:	0242      	lsls	r2, r0, #9
 80a5db0:	d10f      	bne.n	80a5dd2 <__aeabi_fmul+0x15e>
 80a5db2:	ea93 0f0c 	teq	r3, ip
 80a5db6:	d103      	bne.n	80a5dc0 <__aeabi_fmul+0x14c>
 80a5db8:	024b      	lsls	r3, r1, #9
 80a5dba:	bf18      	it	ne
 80a5dbc:	4608      	movne	r0, r1
 80a5dbe:	d108      	bne.n	80a5dd2 <__aeabi_fmul+0x15e>
 80a5dc0:	ea80 0001 	eor.w	r0, r0, r1
 80a5dc4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a5dc8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a5dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a5dd0:	4770      	bx	lr
 80a5dd2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a5dd6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80a5dda:	4770      	bx	lr

080a5ddc <__aeabi_fdiv>:
 80a5ddc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a5de0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a5de4:	bf1e      	ittt	ne
 80a5de6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a5dea:	ea92 0f0c 	teqne	r2, ip
 80a5dee:	ea93 0f0c 	teqne	r3, ip
 80a5df2:	d069      	beq.n	80a5ec8 <__aeabi_fdiv+0xec>
 80a5df4:	eba2 0203 	sub.w	r2, r2, r3
 80a5df8:	ea80 0c01 	eor.w	ip, r0, r1
 80a5dfc:	0249      	lsls	r1, r1, #9
 80a5dfe:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80a5e02:	d037      	beq.n	80a5e74 <__aeabi_fdiv+0x98>
 80a5e04:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80a5e08:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80a5e0c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80a5e10:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a5e14:	428b      	cmp	r3, r1
 80a5e16:	bf38      	it	cc
 80a5e18:	005b      	lslcc	r3, r3, #1
 80a5e1a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80a5e1e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80a5e22:	428b      	cmp	r3, r1
 80a5e24:	bf24      	itt	cs
 80a5e26:	1a5b      	subcs	r3, r3, r1
 80a5e28:	ea40 000c 	orrcs.w	r0, r0, ip
 80a5e2c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80a5e30:	bf24      	itt	cs
 80a5e32:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80a5e36:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a5e3a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80a5e3e:	bf24      	itt	cs
 80a5e40:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80a5e44:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a5e48:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80a5e4c:	bf24      	itt	cs
 80a5e4e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80a5e52:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a5e56:	011b      	lsls	r3, r3, #4
 80a5e58:	bf18      	it	ne
 80a5e5a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80a5e5e:	d1e0      	bne.n	80a5e22 <__aeabi_fdiv+0x46>
 80a5e60:	2afd      	cmp	r2, #253	; 0xfd
 80a5e62:	f63f af50 	bhi.w	80a5d06 <__aeabi_fmul+0x92>
 80a5e66:	428b      	cmp	r3, r1
 80a5e68:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a5e6c:	bf08      	it	eq
 80a5e6e:	f020 0001 	biceq.w	r0, r0, #1
 80a5e72:	4770      	bx	lr
 80a5e74:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a5e78:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a5e7c:	327f      	adds	r2, #127	; 0x7f
 80a5e7e:	bfc2      	ittt	gt
 80a5e80:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a5e84:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a5e88:	4770      	bxgt	lr
 80a5e8a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a5e8e:	f04f 0300 	mov.w	r3, #0
 80a5e92:	3a01      	subs	r2, #1
 80a5e94:	e737      	b.n	80a5d06 <__aeabi_fmul+0x92>
 80a5e96:	f092 0f00 	teq	r2, #0
 80a5e9a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a5e9e:	bf02      	ittt	eq
 80a5ea0:	0040      	lsleq	r0, r0, #1
 80a5ea2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a5ea6:	3a01      	subeq	r2, #1
 80a5ea8:	d0f9      	beq.n	80a5e9e <__aeabi_fdiv+0xc2>
 80a5eaa:	ea40 000c 	orr.w	r0, r0, ip
 80a5eae:	f093 0f00 	teq	r3, #0
 80a5eb2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a5eb6:	bf02      	ittt	eq
 80a5eb8:	0049      	lsleq	r1, r1, #1
 80a5eba:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a5ebe:	3b01      	subeq	r3, #1
 80a5ec0:	d0f9      	beq.n	80a5eb6 <__aeabi_fdiv+0xda>
 80a5ec2:	ea41 010c 	orr.w	r1, r1, ip
 80a5ec6:	e795      	b.n	80a5df4 <__aeabi_fdiv+0x18>
 80a5ec8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a5ecc:	ea92 0f0c 	teq	r2, ip
 80a5ed0:	d108      	bne.n	80a5ee4 <__aeabi_fdiv+0x108>
 80a5ed2:	0242      	lsls	r2, r0, #9
 80a5ed4:	f47f af7d 	bne.w	80a5dd2 <__aeabi_fmul+0x15e>
 80a5ed8:	ea93 0f0c 	teq	r3, ip
 80a5edc:	f47f af70 	bne.w	80a5dc0 <__aeabi_fmul+0x14c>
 80a5ee0:	4608      	mov	r0, r1
 80a5ee2:	e776      	b.n	80a5dd2 <__aeabi_fmul+0x15e>
 80a5ee4:	ea93 0f0c 	teq	r3, ip
 80a5ee8:	d104      	bne.n	80a5ef4 <__aeabi_fdiv+0x118>
 80a5eea:	024b      	lsls	r3, r1, #9
 80a5eec:	f43f af4c 	beq.w	80a5d88 <__aeabi_fmul+0x114>
 80a5ef0:	4608      	mov	r0, r1
 80a5ef2:	e76e      	b.n	80a5dd2 <__aeabi_fmul+0x15e>
 80a5ef4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a5ef8:	bf18      	it	ne
 80a5efa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a5efe:	d1ca      	bne.n	80a5e96 <__aeabi_fdiv+0xba>
 80a5f00:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80a5f04:	f47f af5c 	bne.w	80a5dc0 <__aeabi_fmul+0x14c>
 80a5f08:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80a5f0c:	f47f af3c 	bne.w	80a5d88 <__aeabi_fmul+0x114>
 80a5f10:	e75f      	b.n	80a5dd2 <__aeabi_fmul+0x15e>
 80a5f12:	bf00      	nop

080a5f14 <__gesf2>:
 80a5f14:	f04f 3cff 	mov.w	ip, #4294967295
 80a5f18:	e006      	b.n	80a5f28 <__cmpsf2+0x4>
 80a5f1a:	bf00      	nop

080a5f1c <__lesf2>:
 80a5f1c:	f04f 0c01 	mov.w	ip, #1
 80a5f20:	e002      	b.n	80a5f28 <__cmpsf2+0x4>
 80a5f22:	bf00      	nop

080a5f24 <__cmpsf2>:
 80a5f24:	f04f 0c01 	mov.w	ip, #1
 80a5f28:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a5f2c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a5f30:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a5f34:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a5f38:	bf18      	it	ne
 80a5f3a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a5f3e:	d011      	beq.n	80a5f64 <__cmpsf2+0x40>
 80a5f40:	b001      	add	sp, #4
 80a5f42:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80a5f46:	bf18      	it	ne
 80a5f48:	ea90 0f01 	teqne	r0, r1
 80a5f4c:	bf58      	it	pl
 80a5f4e:	ebb2 0003 	subspl.w	r0, r2, r3
 80a5f52:	bf88      	it	hi
 80a5f54:	17c8      	asrhi	r0, r1, #31
 80a5f56:	bf38      	it	cc
 80a5f58:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80a5f5c:	bf18      	it	ne
 80a5f5e:	f040 0001 	orrne.w	r0, r0, #1
 80a5f62:	4770      	bx	lr
 80a5f64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a5f68:	d102      	bne.n	80a5f70 <__cmpsf2+0x4c>
 80a5f6a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80a5f6e:	d105      	bne.n	80a5f7c <__cmpsf2+0x58>
 80a5f70:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80a5f74:	d1e4      	bne.n	80a5f40 <__cmpsf2+0x1c>
 80a5f76:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80a5f7a:	d0e1      	beq.n	80a5f40 <__cmpsf2+0x1c>
 80a5f7c:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a5f80:	4770      	bx	lr
 80a5f82:	bf00      	nop

080a5f84 <__aeabi_cfrcmple>:
 80a5f84:	4684      	mov	ip, r0
 80a5f86:	4608      	mov	r0, r1
 80a5f88:	4661      	mov	r1, ip
 80a5f8a:	e7ff      	b.n	80a5f8c <__aeabi_cfcmpeq>

080a5f8c <__aeabi_cfcmpeq>:
 80a5f8c:	b50f      	push	{r0, r1, r2, r3, lr}
 80a5f8e:	f7ff ffc9 	bl	80a5f24 <__cmpsf2>
 80a5f92:	2800      	cmp	r0, #0
 80a5f94:	bf48      	it	mi
 80a5f96:	f110 0f00 	cmnmi.w	r0, #0
 80a5f9a:	bd0f      	pop	{r0, r1, r2, r3, pc}

080a5f9c <__aeabi_fcmpeq>:
 80a5f9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a5fa0:	f7ff fff4 	bl	80a5f8c <__aeabi_cfcmpeq>
 80a5fa4:	bf0c      	ite	eq
 80a5fa6:	2001      	moveq	r0, #1
 80a5fa8:	2000      	movne	r0, #0
 80a5faa:	f85d fb08 	ldr.w	pc, [sp], #8
 80a5fae:	bf00      	nop

080a5fb0 <__aeabi_fcmplt>:
 80a5fb0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a5fb4:	f7ff ffea 	bl	80a5f8c <__aeabi_cfcmpeq>
 80a5fb8:	bf34      	ite	cc
 80a5fba:	2001      	movcc	r0, #1
 80a5fbc:	2000      	movcs	r0, #0
 80a5fbe:	f85d fb08 	ldr.w	pc, [sp], #8
 80a5fc2:	bf00      	nop

080a5fc4 <__aeabi_fcmple>:
 80a5fc4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a5fc8:	f7ff ffe0 	bl	80a5f8c <__aeabi_cfcmpeq>
 80a5fcc:	bf94      	ite	ls
 80a5fce:	2001      	movls	r0, #1
 80a5fd0:	2000      	movhi	r0, #0
 80a5fd2:	f85d fb08 	ldr.w	pc, [sp], #8
 80a5fd6:	bf00      	nop

080a5fd8 <__aeabi_fcmpge>:
 80a5fd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a5fdc:	f7ff ffd2 	bl	80a5f84 <__aeabi_cfrcmple>
 80a5fe0:	bf94      	ite	ls
 80a5fe2:	2001      	movls	r0, #1
 80a5fe4:	2000      	movhi	r0, #0
 80a5fe6:	f85d fb08 	ldr.w	pc, [sp], #8
 80a5fea:	bf00      	nop

080a5fec <__aeabi_fcmpgt>:
 80a5fec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a5ff0:	f7ff ffc8 	bl	80a5f84 <__aeabi_cfrcmple>
 80a5ff4:	bf34      	ite	cc
 80a5ff6:	2001      	movcc	r0, #1
 80a5ff8:	2000      	movcs	r0, #0
 80a5ffa:	f85d fb08 	ldr.w	pc, [sp], #8
 80a5ffe:	bf00      	nop

080a6000 <__aeabi_f2iz>:
 80a6000:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a6004:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80a6008:	d30f      	bcc.n	80a602a <__aeabi_f2iz+0x2a>
 80a600a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80a600e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80a6012:	d90d      	bls.n	80a6030 <__aeabi_f2iz+0x30>
 80a6014:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80a6018:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a601c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a6020:	fa23 f002 	lsr.w	r0, r3, r2
 80a6024:	bf18      	it	ne
 80a6026:	4240      	negne	r0, r0
 80a6028:	4770      	bx	lr
 80a602a:	f04f 0000 	mov.w	r0, #0
 80a602e:	4770      	bx	lr
 80a6030:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80a6034:	d101      	bne.n	80a603a <__aeabi_f2iz+0x3a>
 80a6036:	0242      	lsls	r2, r0, #9
 80a6038:	d105      	bne.n	80a6046 <__aeabi_f2iz+0x46>
 80a603a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80a603e:	bf08      	it	eq
 80a6040:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a6044:	4770      	bx	lr
 80a6046:	f04f 0000 	mov.w	r0, #0
 80a604a:	4770      	bx	lr

080a604c <__aeabi_uldivmod>:
 80a604c:	b953      	cbnz	r3, 80a6064 <__aeabi_uldivmod+0x18>
 80a604e:	b94a      	cbnz	r2, 80a6064 <__aeabi_uldivmod+0x18>
 80a6050:	2900      	cmp	r1, #0
 80a6052:	bf08      	it	eq
 80a6054:	2800      	cmpeq	r0, #0
 80a6056:	bf1c      	itt	ne
 80a6058:	f04f 31ff 	movne.w	r1, #4294967295
 80a605c:	f04f 30ff 	movne.w	r0, #4294967295
 80a6060:	f000 b9a6 	b.w	80a63b0 <__aeabi_idiv0>
 80a6064:	f1ad 0c08 	sub.w	ip, sp, #8
 80a6068:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80a606c:	f000 f82a 	bl	80a60c4 <__udivmoddi4>
 80a6070:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a6074:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a6078:	b004      	add	sp, #16
 80a607a:	4770      	bx	lr

080a607c <__aeabi_d2ulz>:
 80a607c:	b5d0      	push	{r4, r6, r7, lr}
 80a607e:	2200      	movs	r2, #0
 80a6080:	4b0e      	ldr	r3, [pc, #56]	; (80a60bc <__aeabi_d2ulz+0x40>)
 80a6082:	4606      	mov	r6, r0
 80a6084:	460f      	mov	r7, r1
 80a6086:	f7ff f99f 	bl	80a53c8 <__aeabi_dmul>
 80a608a:	f7ff fc75 	bl	80a5978 <__aeabi_d2uiz>
 80a608e:	4604      	mov	r4, r0
 80a6090:	f7ff f924 	bl	80a52dc <__aeabi_ui2d>
 80a6094:	2200      	movs	r2, #0
 80a6096:	4b0a      	ldr	r3, [pc, #40]	; (80a60c0 <__aeabi_d2ulz+0x44>)
 80a6098:	f7ff f996 	bl	80a53c8 <__aeabi_dmul>
 80a609c:	4602      	mov	r2, r0
 80a609e:	460b      	mov	r3, r1
 80a60a0:	4630      	mov	r0, r6
 80a60a2:	4639      	mov	r1, r7
 80a60a4:	f7fe ffdc 	bl	80a5060 <__aeabi_dsub>
 80a60a8:	f7ff fc66 	bl	80a5978 <__aeabi_d2uiz>
 80a60ac:	4623      	mov	r3, r4
 80a60ae:	2200      	movs	r2, #0
 80a60b0:	ea42 0200 	orr.w	r2, r2, r0
 80a60b4:	4610      	mov	r0, r2
 80a60b6:	4619      	mov	r1, r3
 80a60b8:	bdd0      	pop	{r4, r6, r7, pc}
 80a60ba:	bf00      	nop
 80a60bc:	3df00000 	.word	0x3df00000
 80a60c0:	41f00000 	.word	0x41f00000

080a60c4 <__udivmoddi4>:
 80a60c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a60c8:	468c      	mov	ip, r1
 80a60ca:	460c      	mov	r4, r1
 80a60cc:	4605      	mov	r5, r0
 80a60ce:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80a60d0:	2b00      	cmp	r3, #0
 80a60d2:	d14f      	bne.n	80a6174 <__udivmoddi4+0xb0>
 80a60d4:	428a      	cmp	r2, r1
 80a60d6:	4617      	mov	r7, r2
 80a60d8:	d96b      	bls.n	80a61b2 <__udivmoddi4+0xee>
 80a60da:	fab2 fe82 	clz	lr, r2
 80a60de:	f1be 0f00 	cmp.w	lr, #0
 80a60e2:	d00b      	beq.n	80a60fc <__udivmoddi4+0x38>
 80a60e4:	f1ce 0520 	rsb	r5, lr, #32
 80a60e8:	fa20 f505 	lsr.w	r5, r0, r5
 80a60ec:	fa01 f30e 	lsl.w	r3, r1, lr
 80a60f0:	ea45 0c03 	orr.w	ip, r5, r3
 80a60f4:	fa02 f70e 	lsl.w	r7, r2, lr
 80a60f8:	fa00 f50e 	lsl.w	r5, r0, lr
 80a60fc:	0c39      	lsrs	r1, r7, #16
 80a60fe:	fbbc f0f1 	udiv	r0, ip, r1
 80a6102:	b2ba      	uxth	r2, r7
 80a6104:	fb01 c310 	mls	r3, r1, r0, ip
 80a6108:	fb00 f802 	mul.w	r8, r0, r2
 80a610c:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 80a6110:	ea4c 4403 	orr.w	r4, ip, r3, lsl #16
 80a6114:	45a0      	cmp	r8, r4
 80a6116:	d909      	bls.n	80a612c <__udivmoddi4+0x68>
 80a6118:	19e4      	adds	r4, r4, r7
 80a611a:	f100 33ff 	add.w	r3, r0, #4294967295
 80a611e:	f080 8128 	bcs.w	80a6372 <__udivmoddi4+0x2ae>
 80a6122:	45a0      	cmp	r8, r4
 80a6124:	f240 8125 	bls.w	80a6372 <__udivmoddi4+0x2ae>
 80a6128:	3802      	subs	r0, #2
 80a612a:	443c      	add	r4, r7
 80a612c:	ebc8 0404 	rsb	r4, r8, r4
 80a6130:	fbb4 f3f1 	udiv	r3, r4, r1
 80a6134:	fb01 4c13 	mls	ip, r1, r3, r4
 80a6138:	fb03 f202 	mul.w	r2, r3, r2
 80a613c:	b2ac      	uxth	r4, r5
 80a613e:	ea44 410c 	orr.w	r1, r4, ip, lsl #16
 80a6142:	428a      	cmp	r2, r1
 80a6144:	d909      	bls.n	80a615a <__udivmoddi4+0x96>
 80a6146:	19c9      	adds	r1, r1, r7
 80a6148:	f103 34ff 	add.w	r4, r3, #4294967295
 80a614c:	f080 810f 	bcs.w	80a636e <__udivmoddi4+0x2aa>
 80a6150:	428a      	cmp	r2, r1
 80a6152:	f240 810c 	bls.w	80a636e <__udivmoddi4+0x2aa>
 80a6156:	3b02      	subs	r3, #2
 80a6158:	4439      	add	r1, r7
 80a615a:	1a8a      	subs	r2, r1, r2
 80a615c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80a6160:	2100      	movs	r1, #0
 80a6162:	2e00      	cmp	r6, #0
 80a6164:	d063      	beq.n	80a622e <__udivmoddi4+0x16a>
 80a6166:	fa22 f20e 	lsr.w	r2, r2, lr
 80a616a:	2300      	movs	r3, #0
 80a616c:	e886 000c 	stmia.w	r6, {r2, r3}
 80a6170:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a6174:	428b      	cmp	r3, r1
 80a6176:	d907      	bls.n	80a6188 <__udivmoddi4+0xc4>
 80a6178:	2e00      	cmp	r6, #0
 80a617a:	d056      	beq.n	80a622a <__udivmoddi4+0x166>
 80a617c:	2100      	movs	r1, #0
 80a617e:	e886 0011 	stmia.w	r6, {r0, r4}
 80a6182:	4608      	mov	r0, r1
 80a6184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a6188:	fab3 f183 	clz	r1, r3
 80a618c:	2900      	cmp	r1, #0
 80a618e:	f040 8093 	bne.w	80a62b8 <__udivmoddi4+0x1f4>
 80a6192:	42a3      	cmp	r3, r4
 80a6194:	d302      	bcc.n	80a619c <__udivmoddi4+0xd8>
 80a6196:	4282      	cmp	r2, r0
 80a6198:	f200 80fe 	bhi.w	80a6398 <__udivmoddi4+0x2d4>
 80a619c:	1a85      	subs	r5, r0, r2
 80a619e:	eb64 0303 	sbc.w	r3, r4, r3
 80a61a2:	469c      	mov	ip, r3
 80a61a4:	2001      	movs	r0, #1
 80a61a6:	2e00      	cmp	r6, #0
 80a61a8:	d041      	beq.n	80a622e <__udivmoddi4+0x16a>
 80a61aa:	e886 1020 	stmia.w	r6, {r5, ip}
 80a61ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a61b2:	b912      	cbnz	r2, 80a61ba <__udivmoddi4+0xf6>
 80a61b4:	2701      	movs	r7, #1
 80a61b6:	fbb7 f7f2 	udiv	r7, r7, r2
 80a61ba:	fab7 fe87 	clz	lr, r7
 80a61be:	f1be 0f00 	cmp.w	lr, #0
 80a61c2:	d136      	bne.n	80a6232 <__udivmoddi4+0x16e>
 80a61c4:	1be4      	subs	r4, r4, r7
 80a61c6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80a61ca:	fa1f f987 	uxth.w	r9, r7
 80a61ce:	2101      	movs	r1, #1
 80a61d0:	fbb4 f3f8 	udiv	r3, r4, r8
 80a61d4:	fb08 4413 	mls	r4, r8, r3, r4
 80a61d8:	fb09 f203 	mul.w	r2, r9, r3
 80a61dc:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 80a61e0:	ea4c 4404 	orr.w	r4, ip, r4, lsl #16
 80a61e4:	42a2      	cmp	r2, r4
 80a61e6:	d907      	bls.n	80a61f8 <__udivmoddi4+0x134>
 80a61e8:	19e4      	adds	r4, r4, r7
 80a61ea:	f103 30ff 	add.w	r0, r3, #4294967295
 80a61ee:	d202      	bcs.n	80a61f6 <__udivmoddi4+0x132>
 80a61f0:	42a2      	cmp	r2, r4
 80a61f2:	f200 80d3 	bhi.w	80a639c <__udivmoddi4+0x2d8>
 80a61f6:	4603      	mov	r3, r0
 80a61f8:	1aa4      	subs	r4, r4, r2
 80a61fa:	fbb4 f0f8 	udiv	r0, r4, r8
 80a61fe:	fb08 4810 	mls	r8, r8, r0, r4
 80a6202:	fb09 f900 	mul.w	r9, r9, r0
 80a6206:	b2ac      	uxth	r4, r5
 80a6208:	ea44 4208 	orr.w	r2, r4, r8, lsl #16
 80a620c:	4591      	cmp	r9, r2
 80a620e:	d907      	bls.n	80a6220 <__udivmoddi4+0x15c>
 80a6210:	19d2      	adds	r2, r2, r7
 80a6212:	f100 34ff 	add.w	r4, r0, #4294967295
 80a6216:	d202      	bcs.n	80a621e <__udivmoddi4+0x15a>
 80a6218:	4591      	cmp	r9, r2
 80a621a:	f200 80ba 	bhi.w	80a6392 <__udivmoddi4+0x2ce>
 80a621e:	4620      	mov	r0, r4
 80a6220:	ebc9 0202 	rsb	r2, r9, r2
 80a6224:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80a6228:	e79b      	b.n	80a6162 <__udivmoddi4+0x9e>
 80a622a:	4631      	mov	r1, r6
 80a622c:	4630      	mov	r0, r6
 80a622e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a6232:	fa07 f70e 	lsl.w	r7, r7, lr
 80a6236:	f1ce 0c20 	rsb	ip, lr, #32
 80a623a:	fa24 f30c 	lsr.w	r3, r4, ip
 80a623e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80a6242:	fbb3 faf8 	udiv	sl, r3, r8
 80a6246:	fa1f f987 	uxth.w	r9, r7
 80a624a:	fb08 351a 	mls	r5, r8, sl, r3
 80a624e:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a6252:	fa04 f40e 	lsl.w	r4, r4, lr
 80a6256:	fb0a fb09 	mul.w	fp, sl, r9
 80a625a:	ea4c 0c04 	orr.w	ip, ip, r4
 80a625e:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80a6262:	ea42 4305 	orr.w	r3, r2, r5, lsl #16
 80a6266:	459b      	cmp	fp, r3
 80a6268:	fa00 f50e 	lsl.w	r5, r0, lr
 80a626c:	d90a      	bls.n	80a6284 <__udivmoddi4+0x1c0>
 80a626e:	19db      	adds	r3, r3, r7
 80a6270:	f10a 32ff 	add.w	r2, sl, #4294967295
 80a6274:	f080 808b 	bcs.w	80a638e <__udivmoddi4+0x2ca>
 80a6278:	459b      	cmp	fp, r3
 80a627a:	f240 8088 	bls.w	80a638e <__udivmoddi4+0x2ca>
 80a627e:	f1aa 0a02 	sub.w	sl, sl, #2
 80a6282:	443b      	add	r3, r7
 80a6284:	ebcb 0303 	rsb	r3, fp, r3
 80a6288:	fbb3 f0f8 	udiv	r0, r3, r8
 80a628c:	fb08 3310 	mls	r3, r8, r0, r3
 80a6290:	fb00 f409 	mul.w	r4, r0, r9
 80a6294:	fa1f fc8c 	uxth.w	ip, ip
 80a6298:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
 80a629c:	429c      	cmp	r4, r3
 80a629e:	d907      	bls.n	80a62b0 <__udivmoddi4+0x1ec>
 80a62a0:	19db      	adds	r3, r3, r7
 80a62a2:	f100 32ff 	add.w	r2, r0, #4294967295
 80a62a6:	d26e      	bcs.n	80a6386 <__udivmoddi4+0x2c2>
 80a62a8:	429c      	cmp	r4, r3
 80a62aa:	d96c      	bls.n	80a6386 <__udivmoddi4+0x2c2>
 80a62ac:	3802      	subs	r0, #2
 80a62ae:	443b      	add	r3, r7
 80a62b0:	1b1c      	subs	r4, r3, r4
 80a62b2:	ea40 410a 	orr.w	r1, r0, sl, lsl #16
 80a62b6:	e78b      	b.n	80a61d0 <__udivmoddi4+0x10c>
 80a62b8:	f1c1 0e20 	rsb	lr, r1, #32
 80a62bc:	408b      	lsls	r3, r1
 80a62be:	fa22 fc0e 	lsr.w	ip, r2, lr
 80a62c2:	ea4c 0c03 	orr.w	ip, ip, r3
 80a62c6:	fa24 f70e 	lsr.w	r7, r4, lr
 80a62ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80a62ce:	fbb7 faf9 	udiv	sl, r7, r9
 80a62d2:	fa1f f38c 	uxth.w	r3, ip
 80a62d6:	fb09 771a 	mls	r7, r9, sl, r7
 80a62da:	fa20 f80e 	lsr.w	r8, r0, lr
 80a62de:	408c      	lsls	r4, r1
 80a62e0:	fb0a f503 	mul.w	r5, sl, r3
 80a62e4:	ea48 0404 	orr.w	r4, r8, r4
 80a62e8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80a62ec:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
 80a62f0:	42bd      	cmp	r5, r7
 80a62f2:	fa02 f201 	lsl.w	r2, r2, r1
 80a62f6:	fa00 fb01 	lsl.w	fp, r0, r1
 80a62fa:	d909      	bls.n	80a6310 <__udivmoddi4+0x24c>
 80a62fc:	eb17 070c 	adds.w	r7, r7, ip
 80a6300:	f10a 30ff 	add.w	r0, sl, #4294967295
 80a6304:	d241      	bcs.n	80a638a <__udivmoddi4+0x2c6>
 80a6306:	42bd      	cmp	r5, r7
 80a6308:	d93f      	bls.n	80a638a <__udivmoddi4+0x2c6>
 80a630a:	f1aa 0a02 	sub.w	sl, sl, #2
 80a630e:	4467      	add	r7, ip
 80a6310:	1b7f      	subs	r7, r7, r5
 80a6312:	fbb7 f5f9 	udiv	r5, r7, r9
 80a6316:	fb09 7715 	mls	r7, r9, r5, r7
 80a631a:	fb05 f303 	mul.w	r3, r5, r3
 80a631e:	b2a4      	uxth	r4, r4
 80a6320:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 80a6324:	42bb      	cmp	r3, r7
 80a6326:	d908      	bls.n	80a633a <__udivmoddi4+0x276>
 80a6328:	eb17 070c 	adds.w	r7, r7, ip
 80a632c:	f105 30ff 	add.w	r0, r5, #4294967295
 80a6330:	d227      	bcs.n	80a6382 <__udivmoddi4+0x2be>
 80a6332:	42bb      	cmp	r3, r7
 80a6334:	d925      	bls.n	80a6382 <__udivmoddi4+0x2be>
 80a6336:	3d02      	subs	r5, #2
 80a6338:	4467      	add	r7, ip
 80a633a:	ea45 400a 	orr.w	r0, r5, sl, lsl #16
 80a633e:	fba0 8902 	umull	r8, r9, r0, r2
 80a6342:	1aff      	subs	r7, r7, r3
 80a6344:	454f      	cmp	r7, r9
 80a6346:	4645      	mov	r5, r8
 80a6348:	464c      	mov	r4, r9
 80a634a:	d314      	bcc.n	80a6376 <__udivmoddi4+0x2b2>
 80a634c:	d029      	beq.n	80a63a2 <__udivmoddi4+0x2de>
 80a634e:	b366      	cbz	r6, 80a63aa <__udivmoddi4+0x2e6>
 80a6350:	ebbb 0305 	subs.w	r3, fp, r5
 80a6354:	eb67 0704 	sbc.w	r7, r7, r4
 80a6358:	fa07 fe0e 	lsl.w	lr, r7, lr
 80a635c:	40cb      	lsrs	r3, r1
 80a635e:	40cf      	lsrs	r7, r1
 80a6360:	ea4e 0303 	orr.w	r3, lr, r3
 80a6364:	e886 0088 	stmia.w	r6, {r3, r7}
 80a6368:	2100      	movs	r1, #0
 80a636a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a636e:	4623      	mov	r3, r4
 80a6370:	e6f3      	b.n	80a615a <__udivmoddi4+0x96>
 80a6372:	4618      	mov	r0, r3
 80a6374:	e6da      	b.n	80a612c <__udivmoddi4+0x68>
 80a6376:	ebb8 0502 	subs.w	r5, r8, r2
 80a637a:	eb69 040c 	sbc.w	r4, r9, ip
 80a637e:	3801      	subs	r0, #1
 80a6380:	e7e5      	b.n	80a634e <__udivmoddi4+0x28a>
 80a6382:	4605      	mov	r5, r0
 80a6384:	e7d9      	b.n	80a633a <__udivmoddi4+0x276>
 80a6386:	4610      	mov	r0, r2
 80a6388:	e792      	b.n	80a62b0 <__udivmoddi4+0x1ec>
 80a638a:	4682      	mov	sl, r0
 80a638c:	e7c0      	b.n	80a6310 <__udivmoddi4+0x24c>
 80a638e:	4692      	mov	sl, r2
 80a6390:	e778      	b.n	80a6284 <__udivmoddi4+0x1c0>
 80a6392:	3802      	subs	r0, #2
 80a6394:	443a      	add	r2, r7
 80a6396:	e743      	b.n	80a6220 <__udivmoddi4+0x15c>
 80a6398:	4608      	mov	r0, r1
 80a639a:	e704      	b.n	80a61a6 <__udivmoddi4+0xe2>
 80a639c:	3b02      	subs	r3, #2
 80a639e:	443c      	add	r4, r7
 80a63a0:	e72a      	b.n	80a61f8 <__udivmoddi4+0x134>
 80a63a2:	45c3      	cmp	fp, r8
 80a63a4:	d3e7      	bcc.n	80a6376 <__udivmoddi4+0x2b2>
 80a63a6:	463c      	mov	r4, r7
 80a63a8:	e7d1      	b.n	80a634e <__udivmoddi4+0x28a>
 80a63aa:	4631      	mov	r1, r6
 80a63ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a63b0 <__aeabi_idiv0>:
 80a63b0:	4770      	bx	lr
 80a63b2:	bf00      	nop

080a63b4 <asctime>:
 80a63b4:	4b09      	ldr	r3, [pc, #36]	; (80a63dc <asctime+0x28>)
 80a63b6:	b570      	push	{r4, r5, r6, lr}
 80a63b8:	681c      	ldr	r4, [r3, #0]
 80a63ba:	4606      	mov	r6, r0
 80a63bc:	6c25      	ldr	r5, [r4, #64]	; 0x40
 80a63be:	b93d      	cbnz	r5, 80a63d0 <asctime+0x1c>
 80a63c0:	201a      	movs	r0, #26
 80a63c2:	f7fc ff89 	bl	80a32d8 <malloc>
 80a63c6:	221a      	movs	r2, #26
 80a63c8:	6420      	str	r0, [r4, #64]	; 0x40
 80a63ca:	4629      	mov	r1, r5
 80a63cc:	f000 f94b 	bl	80a6666 <memset>
 80a63d0:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80a63d2:	4630      	mov	r0, r6
 80a63d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a63d8:	f000 b802 	b.w	80a63e0 <asctime_r>
 80a63dc:	20000074 	.word	0x20000074

080a63e0 <asctime_r>:
 80a63e0:	b510      	push	{r4, lr}
 80a63e2:	460c      	mov	r4, r1
 80a63e4:	6941      	ldr	r1, [r0, #20]
 80a63e6:	b086      	sub	sp, #24
 80a63e8:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 80a63ec:	6903      	ldr	r3, [r0, #16]
 80a63ee:	6982      	ldr	r2, [r0, #24]
 80a63f0:	9104      	str	r1, [sp, #16]
 80a63f2:	6801      	ldr	r1, [r0, #0]
 80a63f4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80a63f8:	9103      	str	r1, [sp, #12]
 80a63fa:	6841      	ldr	r1, [r0, #4]
 80a63fc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80a6400:	9102      	str	r1, [sp, #8]
 80a6402:	6881      	ldr	r1, [r0, #8]
 80a6404:	9101      	str	r1, [sp, #4]
 80a6406:	68c1      	ldr	r1, [r0, #12]
 80a6408:	4620      	mov	r0, r4
 80a640a:	9100      	str	r1, [sp, #0]
 80a640c:	4904      	ldr	r1, [pc, #16]	; (80a6420 <asctime_r+0x40>)
 80a640e:	440b      	add	r3, r1
 80a6410:	4904      	ldr	r1, [pc, #16]	; (80a6424 <asctime_r+0x44>)
 80a6412:	440a      	add	r2, r1
 80a6414:	4904      	ldr	r1, [pc, #16]	; (80a6428 <asctime_r+0x48>)
 80a6416:	f7fc ff77 	bl	80a3308 <siprintf>
 80a641a:	4620      	mov	r0, r4
 80a641c:	b006      	add	sp, #24
 80a641e:	bd10      	pop	{r4, pc}
 80a6420:	080a9d42 	.word	0x080a9d42
 80a6424:	080a9d2d 	.word	0x080a9d2d
 80a6428:	080a9d66 	.word	0x080a9d66

080a642c <atof>:
 80a642c:	2100      	movs	r1, #0
 80a642e:	f001 bcc3 	b.w	80a7db8 <strtod>

080a6432 <atol>:
 80a6432:	220a      	movs	r2, #10
 80a6434:	2100      	movs	r1, #0
 80a6436:	f001 bd4d 	b.w	80a7ed4 <strtol>
	...

080a643c <__cxa_atexit>:
 80a643c:	b510      	push	{r4, lr}
 80a643e:	4c05      	ldr	r4, [pc, #20]	; (80a6454 <__cxa_atexit+0x18>)
 80a6440:	4613      	mov	r3, r2
 80a6442:	b12c      	cbz	r4, 80a6450 <__cxa_atexit+0x14>
 80a6444:	460a      	mov	r2, r1
 80a6446:	4601      	mov	r1, r0
 80a6448:	2002      	movs	r0, #2
 80a644a:	f3af 8000 	nop.w
 80a644e:	bd10      	pop	{r4, pc}
 80a6450:	4620      	mov	r0, r4
 80a6452:	bd10      	pop	{r4, pc}
 80a6454:	00000000 	.word	0x00000000

080a6458 <localtime>:
 80a6458:	b538      	push	{r3, r4, r5, lr}
 80a645a:	4b07      	ldr	r3, [pc, #28]	; (80a6478 <localtime+0x20>)
 80a645c:	4605      	mov	r5, r0
 80a645e:	681c      	ldr	r4, [r3, #0]
 80a6460:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80a6462:	b91b      	cbnz	r3, 80a646c <localtime+0x14>
 80a6464:	2024      	movs	r0, #36	; 0x24
 80a6466:	f7fc ff37 	bl	80a32d8 <malloc>
 80a646a:	63e0      	str	r0, [r4, #60]	; 0x3c
 80a646c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80a646e:	4628      	mov	r0, r5
 80a6470:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a6474:	f000 b802 	b.w	80a647c <localtime_r>
 80a6478:	20000074 	.word	0x20000074

080a647c <localtime_r>:
 80a647c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a6480:	460c      	mov	r4, r1
 80a6482:	4680      	mov	r8, r0
 80a6484:	f002 fb5e 	bl	80a8b44 <__gettzinfo>
 80a6488:	4621      	mov	r1, r4
 80a648a:	4607      	mov	r7, r0
 80a648c:	4640      	mov	r0, r8
 80a648e:	f002 fb5d 	bl	80a8b4c <gmtime_r>
 80a6492:	6946      	ldr	r6, [r0, #20]
 80a6494:	4604      	mov	r4, r0
 80a6496:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 80a649a:	07b3      	lsls	r3, r6, #30
 80a649c:	d105      	bne.n	80a64aa <localtime_r+0x2e>
 80a649e:	2264      	movs	r2, #100	; 0x64
 80a64a0:	fb96 f3f2 	sdiv	r3, r6, r2
 80a64a4:	fb02 6313 	mls	r3, r2, r3, r6
 80a64a8:	b94b      	cbnz	r3, 80a64be <localtime_r+0x42>
 80a64aa:	f44f 75c8 	mov.w	r5, #400	; 0x190
 80a64ae:	fb96 f3f5 	sdiv	r3, r6, r5
 80a64b2:	fb05 6513 	mls	r5, r5, r3, r6
 80a64b6:	fab5 f385 	clz	r3, r5
 80a64ba:	095b      	lsrs	r3, r3, #5
 80a64bc:	e000      	b.n	80a64c0 <localtime_r+0x44>
 80a64be:	2301      	movs	r3, #1
 80a64c0:	4a5f      	ldr	r2, [pc, #380]	; (80a6640 <localtime_r+0x1c4>)
 80a64c2:	2530      	movs	r5, #48	; 0x30
 80a64c4:	fb05 2503 	mla	r5, r5, r3, r2
 80a64c8:	f001 fe4e 	bl	80a8168 <__tz_lock>
 80a64cc:	f001 fe4e 	bl	80a816c <_tzset_unlocked>
 80a64d0:	4b5c      	ldr	r3, [pc, #368]	; (80a6644 <localtime_r+0x1c8>)
 80a64d2:	681b      	ldr	r3, [r3, #0]
 80a64d4:	b1f3      	cbz	r3, 80a6514 <localtime_r+0x98>
 80a64d6:	687b      	ldr	r3, [r7, #4]
 80a64d8:	429e      	cmp	r6, r3
 80a64da:	d105      	bne.n	80a64e8 <localtime_r+0x6c>
 80a64dc:	6839      	ldr	r1, [r7, #0]
 80a64de:	f8d8 3000 	ldr.w	r3, [r8]
 80a64e2:	69fa      	ldr	r2, [r7, #28]
 80a64e4:	b941      	cbnz	r1, 80a64f8 <localtime_r+0x7c>
 80a64e6:	e00a      	b.n	80a64fe <localtime_r+0x82>
 80a64e8:	4630      	mov	r0, r6
 80a64ea:	f001 fd95 	bl	80a8018 <__tzcalc_limits>
 80a64ee:	2800      	cmp	r0, #0
 80a64f0:	d1f4      	bne.n	80a64dc <localtime_r+0x60>
 80a64f2:	f04f 33ff 	mov.w	r3, #4294967295
 80a64f6:	e00d      	b.n	80a6514 <localtime_r+0x98>
 80a64f8:	4293      	cmp	r3, r2
 80a64fa:	db08      	blt.n	80a650e <localtime_r+0x92>
 80a64fc:	e001      	b.n	80a6502 <localtime_r+0x86>
 80a64fe:	4293      	cmp	r3, r2
 80a6500:	da07      	bge.n	80a6512 <localtime_r+0x96>
 80a6502:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80a6504:	4293      	cmp	r3, r2
 80a6506:	bfac      	ite	ge
 80a6508:	2300      	movge	r3, #0
 80a650a:	2301      	movlt	r3, #1
 80a650c:	e002      	b.n	80a6514 <localtime_r+0x98>
 80a650e:	2300      	movs	r3, #0
 80a6510:	e000      	b.n	80a6514 <localtime_r+0x98>
 80a6512:	2301      	movs	r3, #1
 80a6514:	6223      	str	r3, [r4, #32]
 80a6516:	6a23      	ldr	r3, [r4, #32]
 80a6518:	203c      	movs	r0, #60	; 0x3c
 80a651a:	2b01      	cmp	r3, #1
 80a651c:	bf0c      	ite	eq
 80a651e:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
 80a6520:	6a39      	ldrne	r1, [r7, #32]
 80a6522:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80a6526:	fb91 f6f3 	sdiv	r6, r1, r3
 80a652a:	fb03 1316 	mls	r3, r3, r6, r1
 80a652e:	fb93 f2f0 	sdiv	r2, r3, r0
 80a6532:	fb00 3012 	mls	r0, r0, r2, r3
 80a6536:	6861      	ldr	r1, [r4, #4]
 80a6538:	6823      	ldr	r3, [r4, #0]
 80a653a:	1a89      	subs	r1, r1, r2
 80a653c:	68a2      	ldr	r2, [r4, #8]
 80a653e:	1a1b      	subs	r3, r3, r0
 80a6540:	1b92      	subs	r2, r2, r6
 80a6542:	2b3b      	cmp	r3, #59	; 0x3b
 80a6544:	6023      	str	r3, [r4, #0]
 80a6546:	6061      	str	r1, [r4, #4]
 80a6548:	60a2      	str	r2, [r4, #8]
 80a654a:	dd03      	ble.n	80a6554 <localtime_r+0xd8>
 80a654c:	3101      	adds	r1, #1
 80a654e:	6061      	str	r1, [r4, #4]
 80a6550:	3b3c      	subs	r3, #60	; 0x3c
 80a6552:	e004      	b.n	80a655e <localtime_r+0xe2>
 80a6554:	2b00      	cmp	r3, #0
 80a6556:	da03      	bge.n	80a6560 <localtime_r+0xe4>
 80a6558:	3901      	subs	r1, #1
 80a655a:	6061      	str	r1, [r4, #4]
 80a655c:	333c      	adds	r3, #60	; 0x3c
 80a655e:	6023      	str	r3, [r4, #0]
 80a6560:	6863      	ldr	r3, [r4, #4]
 80a6562:	2b3b      	cmp	r3, #59	; 0x3b
 80a6564:	dd03      	ble.n	80a656e <localtime_r+0xf2>
 80a6566:	3201      	adds	r2, #1
 80a6568:	60a2      	str	r2, [r4, #8]
 80a656a:	3b3c      	subs	r3, #60	; 0x3c
 80a656c:	e004      	b.n	80a6578 <localtime_r+0xfc>
 80a656e:	2b00      	cmp	r3, #0
 80a6570:	da03      	bge.n	80a657a <localtime_r+0xfe>
 80a6572:	3a01      	subs	r2, #1
 80a6574:	60a2      	str	r2, [r4, #8]
 80a6576:	333c      	adds	r3, #60	; 0x3c
 80a6578:	6063      	str	r3, [r4, #4]
 80a657a:	68a3      	ldr	r3, [r4, #8]
 80a657c:	2b17      	cmp	r3, #23
 80a657e:	dd22      	ble.n	80a65c6 <localtime_r+0x14a>
 80a6580:	69e2      	ldr	r2, [r4, #28]
 80a6582:	3b18      	subs	r3, #24
 80a6584:	3201      	adds	r2, #1
 80a6586:	61e2      	str	r2, [r4, #28]
 80a6588:	69a2      	ldr	r2, [r4, #24]
 80a658a:	60a3      	str	r3, [r4, #8]
 80a658c:	3201      	adds	r2, #1
 80a658e:	2a06      	cmp	r2, #6
 80a6590:	bfc8      	it	gt
 80a6592:	2200      	movgt	r2, #0
 80a6594:	61a2      	str	r2, [r4, #24]
 80a6596:	68e2      	ldr	r2, [r4, #12]
 80a6598:	6923      	ldr	r3, [r4, #16]
 80a659a:	3201      	adds	r2, #1
 80a659c:	60e2      	str	r2, [r4, #12]
 80a659e:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 80a65a2:	428a      	cmp	r2, r1
 80a65a4:	dd46      	ble.n	80a6634 <localtime_r+0x1b8>
 80a65a6:	3301      	adds	r3, #1
 80a65a8:	2b0c      	cmp	r3, #12
 80a65aa:	bf08      	it	eq
 80a65ac:	6963      	ldreq	r3, [r4, #20]
 80a65ae:	eba2 0201 	sub.w	r2, r2, r1
 80a65b2:	60e2      	str	r2, [r4, #12]
 80a65b4:	bf05      	ittet	eq
 80a65b6:	3301      	addeq	r3, #1
 80a65b8:	2200      	moveq	r2, #0
 80a65ba:	6123      	strne	r3, [r4, #16]
 80a65bc:	6122      	streq	r2, [r4, #16]
 80a65be:	bf04      	itt	eq
 80a65c0:	6163      	streq	r3, [r4, #20]
 80a65c2:	61e2      	streq	r2, [r4, #28]
 80a65c4:	e036      	b.n	80a6634 <localtime_r+0x1b8>
 80a65c6:	2b00      	cmp	r3, #0
 80a65c8:	da34      	bge.n	80a6634 <localtime_r+0x1b8>
 80a65ca:	69e2      	ldr	r2, [r4, #28]
 80a65cc:	3318      	adds	r3, #24
 80a65ce:	3a01      	subs	r2, #1
 80a65d0:	61e2      	str	r2, [r4, #28]
 80a65d2:	69a2      	ldr	r2, [r4, #24]
 80a65d4:	60a3      	str	r3, [r4, #8]
 80a65d6:	3a01      	subs	r2, #1
 80a65d8:	bf48      	it	mi
 80a65da:	2206      	movmi	r2, #6
 80a65dc:	61a2      	str	r2, [r4, #24]
 80a65de:	68e2      	ldr	r2, [r4, #12]
 80a65e0:	3a01      	subs	r2, #1
 80a65e2:	60e2      	str	r2, [r4, #12]
 80a65e4:	bb32      	cbnz	r2, 80a6634 <localtime_r+0x1b8>
 80a65e6:	6923      	ldr	r3, [r4, #16]
 80a65e8:	3b01      	subs	r3, #1
 80a65ea:	d401      	bmi.n	80a65f0 <localtime_r+0x174>
 80a65ec:	6123      	str	r3, [r4, #16]
 80a65ee:	e01d      	b.n	80a662c <localtime_r+0x1b0>
 80a65f0:	230b      	movs	r3, #11
 80a65f2:	6123      	str	r3, [r4, #16]
 80a65f4:	6963      	ldr	r3, [r4, #20]
 80a65f6:	1e5a      	subs	r2, r3, #1
 80a65f8:	f012 0f03 	tst.w	r2, #3
 80a65fc:	6162      	str	r2, [r4, #20]
 80a65fe:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 80a6602:	d105      	bne.n	80a6610 <localtime_r+0x194>
 80a6604:	2164      	movs	r1, #100	; 0x64
 80a6606:	fb93 f2f1 	sdiv	r2, r3, r1
 80a660a:	fb01 3212 	mls	r2, r1, r2, r3
 80a660e:	b94a      	cbnz	r2, 80a6624 <localtime_r+0x1a8>
 80a6610:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80a6614:	fb93 f2f1 	sdiv	r2, r3, r1
 80a6618:	fb01 3312 	mls	r3, r1, r2, r3
 80a661c:	fab3 f383 	clz	r3, r3
 80a6620:	095b      	lsrs	r3, r3, #5
 80a6622:	e000      	b.n	80a6626 <localtime_r+0x1aa>
 80a6624:	2301      	movs	r3, #1
 80a6626:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 80a662a:	61e3      	str	r3, [r4, #28]
 80a662c:	6923      	ldr	r3, [r4, #16]
 80a662e:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80a6632:	60e3      	str	r3, [r4, #12]
 80a6634:	f001 fd99 	bl	80a816a <__tz_unlock>
 80a6638:	4620      	mov	r0, r4
 80a663a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a663e:	bf00      	nop
 80a6640:	080a9ef0 	.word	0x080a9ef0
 80a6644:	20000790 	.word	0x20000790

080a6648 <_localeconv_r>:
 80a6648:	4800      	ldr	r0, [pc, #0]	; (80a664c <_localeconv_r+0x4>)
 80a664a:	4770      	bx	lr
 80a664c:	20000078 	.word	0x20000078

080a6650 <memcpy>:
 80a6650:	b510      	push	{r4, lr}
 80a6652:	1e43      	subs	r3, r0, #1
 80a6654:	440a      	add	r2, r1
 80a6656:	4291      	cmp	r1, r2
 80a6658:	d004      	beq.n	80a6664 <memcpy+0x14>
 80a665a:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a665e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a6662:	e7f8      	b.n	80a6656 <memcpy+0x6>
 80a6664:	bd10      	pop	{r4, pc}

080a6666 <memset>:
 80a6666:	4603      	mov	r3, r0
 80a6668:	4402      	add	r2, r0
 80a666a:	4293      	cmp	r3, r2
 80a666c:	d002      	beq.n	80a6674 <memset+0xe>
 80a666e:	f803 1b01 	strb.w	r1, [r3], #1
 80a6672:	e7fa      	b.n	80a666a <memset+0x4>
 80a6674:	4770      	bx	lr
	...

080a6678 <srand>:
 80a6678:	b538      	push	{r3, r4, r5, lr}
 80a667a:	4b12      	ldr	r3, [pc, #72]	; (80a66c4 <srand+0x4c>)
 80a667c:	4605      	mov	r5, r0
 80a667e:	681c      	ldr	r4, [r3, #0]
 80a6680:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a6682:	b9d3      	cbnz	r3, 80a66ba <srand+0x42>
 80a6684:	2018      	movs	r0, #24
 80a6686:	f7fc fe27 	bl	80a32d8 <malloc>
 80a668a:	f243 330e 	movw	r3, #13070	; 0x330e
 80a668e:	63a0      	str	r0, [r4, #56]	; 0x38
 80a6690:	8003      	strh	r3, [r0, #0]
 80a6692:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a6696:	8043      	strh	r3, [r0, #2]
 80a6698:	f241 2334 	movw	r3, #4660	; 0x1234
 80a669c:	8083      	strh	r3, [r0, #4]
 80a669e:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a66a2:	80c3      	strh	r3, [r0, #6]
 80a66a4:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a66a8:	8103      	strh	r3, [r0, #8]
 80a66aa:	2305      	movs	r3, #5
 80a66ac:	8143      	strh	r3, [r0, #10]
 80a66ae:	230b      	movs	r3, #11
 80a66b0:	8183      	strh	r3, [r0, #12]
 80a66b2:	2201      	movs	r2, #1
 80a66b4:	2300      	movs	r3, #0
 80a66b6:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a66ba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a66bc:	2200      	movs	r2, #0
 80a66be:	611d      	str	r5, [r3, #16]
 80a66c0:	615a      	str	r2, [r3, #20]
 80a66c2:	bd38      	pop	{r3, r4, r5, pc}
 80a66c4:	20000074 	.word	0x20000074

080a66c8 <strcmp>:
 80a66c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80a66cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80a66d0:	2a01      	cmp	r2, #1
 80a66d2:	bf28      	it	cs
 80a66d4:	429a      	cmpcs	r2, r3
 80a66d6:	d0f7      	beq.n	80a66c8 <strcmp>
 80a66d8:	1ad0      	subs	r0, r2, r3
 80a66da:	4770      	bx	lr

080a66dc <strcpy>:
 80a66dc:	4603      	mov	r3, r0
 80a66de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80a66e2:	f803 2b01 	strb.w	r2, [r3], #1
 80a66e6:	2a00      	cmp	r2, #0
 80a66e8:	d1f9      	bne.n	80a66de <strcpy+0x2>
 80a66ea:	4770      	bx	lr

080a66ec <iso_year_adjust>:
 80a66ec:	6941      	ldr	r1, [r0, #20]
 80a66ee:	b510      	push	{r4, lr}
 80a66f0:	078b      	lsls	r3, r1, #30
 80a66f2:	d10c      	bne.n	80a670e <iso_year_adjust+0x22>
 80a66f4:	f240 736c 	movw	r3, #1900	; 0x76c
 80a66f8:	2900      	cmp	r1, #0
 80a66fa:	bfa8      	it	ge
 80a66fc:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 80a6700:	440b      	add	r3, r1
 80a6702:	2464      	movs	r4, #100	; 0x64
 80a6704:	fb93 f2f4 	sdiv	r2, r3, r4
 80a6708:	fb04 3312 	mls	r3, r4, r2, r3
 80a670c:	b983      	cbnz	r3, 80a6730 <iso_year_adjust+0x44>
 80a670e:	f240 736c 	movw	r3, #1900	; 0x76c
 80a6712:	2900      	cmp	r1, #0
 80a6714:	bfa8      	it	ge
 80a6716:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 80a671a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80a671e:	440b      	add	r3, r1
 80a6720:	fb93 f1f2 	sdiv	r1, r3, r2
 80a6724:	fb02 3311 	mls	r3, r2, r1, r3
 80a6728:	fab3 f283 	clz	r2, r3
 80a672c:	0952      	lsrs	r2, r2, #5
 80a672e:	e000      	b.n	80a6732 <iso_year_adjust+0x46>
 80a6730:	2201      	movs	r2, #1
 80a6732:	6983      	ldr	r3, [r0, #24]
 80a6734:	69c1      	ldr	r1, [r0, #28]
 80a6736:	005b      	lsls	r3, r3, #1
 80a6738:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 80a673c:	4413      	add	r3, r2
 80a673e:	2b21      	cmp	r3, #33	; 0x21
 80a6740:	dc0e      	bgt.n	80a6760 <iso_year_adjust+0x74>
 80a6742:	2b20      	cmp	r3, #32
 80a6744:	da2f      	bge.n	80a67a6 <iso_year_adjust+0xba>
 80a6746:	2b0d      	cmp	r3, #13
 80a6748:	dc02      	bgt.n	80a6750 <iso_year_adjust+0x64>
 80a674a:	2b0a      	cmp	r3, #10
 80a674c:	db05      	blt.n	80a675a <iso_year_adjust+0x6e>
 80a674e:	e02a      	b.n	80a67a6 <iso_year_adjust+0xba>
 80a6750:	2b10      	cmp	r3, #16
 80a6752:	db26      	blt.n	80a67a2 <iso_year_adjust+0xb6>
 80a6754:	2b11      	cmp	r3, #17
 80a6756:	dd26      	ble.n	80a67a6 <iso_year_adjust+0xba>
 80a6758:	3b1c      	subs	r3, #28
 80a675a:	2b01      	cmp	r3, #1
 80a675c:	d923      	bls.n	80a67a6 <iso_year_adjust+0xba>
 80a675e:	e020      	b.n	80a67a2 <iso_year_adjust+0xb6>
 80a6760:	f241 62c6 	movw	r2, #5830	; 0x16c6
 80a6764:	4293      	cmp	r3, r2
 80a6766:	dc0e      	bgt.n	80a6786 <iso_year_adjust+0x9a>
 80a6768:	f241 62c2 	movw	r2, #5826	; 0x16c2
 80a676c:	4293      	cmp	r3, r2
 80a676e:	da16      	bge.n	80a679e <iso_year_adjust+0xb2>
 80a6770:	f241 62a2 	movw	r2, #5794	; 0x16a2
 80a6774:	4293      	cmp	r3, r2
 80a6776:	d012      	beq.n	80a679e <iso_year_adjust+0xb2>
 80a6778:	db13      	blt.n	80a67a2 <iso_year_adjust+0xb6>
 80a677a:	f5a3 53b5 	sub.w	r3, r3, #5792	; 0x16a0
 80a677e:	3b12      	subs	r3, #18
 80a6780:	2b02      	cmp	r3, #2
 80a6782:	d90c      	bls.n	80a679e <iso_year_adjust+0xb2>
 80a6784:	e00d      	b.n	80a67a2 <iso_year_adjust+0xb6>
 80a6786:	f241 62d5 	movw	r2, #5845	; 0x16d5
 80a678a:	4293      	cmp	r3, r2
 80a678c:	d007      	beq.n	80a679e <iso_year_adjust+0xb2>
 80a678e:	f241 62d7 	movw	r2, #5847	; 0x16d7
 80a6792:	4293      	cmp	r3, r2
 80a6794:	d003      	beq.n	80a679e <iso_year_adjust+0xb2>
 80a6796:	f241 62d3 	movw	r2, #5843	; 0x16d3
 80a679a:	4293      	cmp	r3, r2
 80a679c:	d101      	bne.n	80a67a2 <iso_year_adjust+0xb6>
 80a679e:	2001      	movs	r0, #1
 80a67a0:	bd10      	pop	{r4, pc}
 80a67a2:	2000      	movs	r0, #0
 80a67a4:	bd10      	pop	{r4, pc}
 80a67a6:	f04f 30ff 	mov.w	r0, #4294967295
 80a67aa:	bd10      	pop	{r4, pc}

080a67ac <strftime>:
 80a67ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a67b0:	460e      	mov	r6, r1
 80a67b2:	b093      	sub	sp, #76	; 0x4c
 80a67b4:	461d      	mov	r5, r3
 80a67b6:	4607      	mov	r7, r0
 80a67b8:	4691      	mov	r9, r2
 80a67ba:	f001 fc1d 	bl	80a7ff8 <__get_current_time_locale>
 80a67be:	2300      	movs	r3, #0
 80a67c0:	9306      	str	r3, [sp, #24]
 80a67c2:	461c      	mov	r4, r3
 80a67c4:	1e73      	subs	r3, r6, #1
 80a67c6:	9003      	str	r0, [sp, #12]
 80a67c8:	9302      	str	r3, [sp, #8]
 80a67ca:	f899 3000 	ldrb.w	r3, [r9]
 80a67ce:	2b00      	cmp	r3, #0
 80a67d0:	f000 8492 	beq.w	80a70f8 <strftime+0x94c>
 80a67d4:	2b25      	cmp	r3, #37	; 0x25
 80a67d6:	d008      	beq.n	80a67ea <strftime+0x3e>
 80a67d8:	9a02      	ldr	r2, [sp, #8]
 80a67da:	4294      	cmp	r4, r2
 80a67dc:	f080 8490 	bcs.w	80a7100 <strftime+0x954>
 80a67e0:	553b      	strb	r3, [r7, r4]
 80a67e2:	f109 0901 	add.w	r9, r9, #1
 80a67e6:	3401      	adds	r4, #1
 80a67e8:	e7ef      	b.n	80a67ca <strftime+0x1e>
 80a67ea:	f899 a001 	ldrb.w	sl, [r9, #1]
 80a67ee:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
 80a67f2:	d007      	beq.n	80a6804 <strftime+0x58>
 80a67f4:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 80a67f8:	d004      	beq.n	80a6804 <strftime+0x58>
 80a67fa:	f109 0901 	add.w	r9, r9, #1
 80a67fe:	f04f 0a00 	mov.w	sl, #0
 80a6802:	e001      	b.n	80a6808 <strftime+0x5c>
 80a6804:	f109 0902 	add.w	r9, r9, #2
 80a6808:	f899 3000 	ldrb.w	r3, [r9]
 80a680c:	3b31      	subs	r3, #49	; 0x31
 80a680e:	2b08      	cmp	r3, #8
 80a6810:	d808      	bhi.n	80a6824 <strftime+0x78>
 80a6812:	4648      	mov	r0, r9
 80a6814:	220a      	movs	r2, #10
 80a6816:	a90a      	add	r1, sp, #40	; 0x28
 80a6818:	f001 fbe4 	bl	80a7fe4 <strtoul>
 80a681c:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 80a6820:	4680      	mov	r8, r0
 80a6822:	e001      	b.n	80a6828 <strftime+0x7c>
 80a6824:	f04f 0800 	mov.w	r8, #0
 80a6828:	f899 3000 	ldrb.w	r3, [r9]
 80a682c:	2b45      	cmp	r3, #69	; 0x45
 80a682e:	d001      	beq.n	80a6834 <strftime+0x88>
 80a6830:	2b4f      	cmp	r3, #79	; 0x4f
 80a6832:	d101      	bne.n	80a6838 <strftime+0x8c>
 80a6834:	f109 0901 	add.w	r9, r9, #1
 80a6838:	f899 0000 	ldrb.w	r0, [r9]
 80a683c:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
 80a6840:	2b55      	cmp	r3, #85	; 0x55
 80a6842:	f200 845d 	bhi.w	80a7100 <strftime+0x954>
 80a6846:	e8df f013 	tbh	[pc, r3, lsl #1]
 80a684a:	044a      	.short	0x044a
 80a684c:	045b045b 	.word	0x045b045b
 80a6850:	045b045b 	.word	0x045b045b
 80a6854:	045b045b 	.word	0x045b045b
 80a6858:	045b045b 	.word	0x045b045b
 80a685c:	045b045b 	.word	0x045b045b
 80a6860:	045b045b 	.word	0x045b045b
 80a6864:	045b045b 	.word	0x045b045b
 80a6868:	045b045b 	.word	0x045b045b
 80a686c:	045b045b 	.word	0x045b045b
 80a6870:	045b045b 	.word	0x045b045b
 80a6874:	045b045b 	.word	0x045b045b
 80a6878:	045b045b 	.word	0x045b045b
 80a687c:	045b045b 	.word	0x045b045b
 80a6880:	006f045b 	.word	0x006f045b
 80a6884:	00d400a1 	.word	0x00d400a1
 80a6888:	045b011a 	.word	0x045b011a
 80a688c:	01a0013f 	.word	0x01a0013f
 80a6890:	022d0226 	.word	0x022d0226
 80a6894:	045b045b 	.word	0x045b045b
 80a6898:	0260045b 	.word	0x0260045b
 80a689c:	045b045b 	.word	0x045b045b
 80a68a0:	045b0268 	.word	0x045b0268
 80a68a4:	031c0296 	.word	0x031c0296
 80a68a8:	033a0324 	.word	0x033a0324
 80a68ac:	03850342 	.word	0x03850342
 80a68b0:	039f00c6 	.word	0x039f00c6
 80a68b4:	045b041f 	.word	0x045b041f
 80a68b8:	045b045b 	.word	0x045b045b
 80a68bc:	045b045b 	.word	0x045b045b
 80a68c0:	0056045b 	.word	0x0056045b
 80a68c4:	00ba0089 	.word	0x00ba0089
 80a68c8:	010c010c 	.word	0x010c010c
 80a68cc:	0171045b 	.word	0x0171045b
 80a68d0:	045b0089 	.word	0x045b0089
 80a68d4:	0226023d 	.word	0x0226023d
 80a68d8:	025d022d 	.word	0x025d022d
 80a68dc:	045b0262 	.word	0x045b0262
 80a68e0:	045b0268 	.word	0x045b0268
 80a68e4:	029b00be 	.word	0x029b00be
 80a68e8:	032d031e 	.word	0x032d031e
 80a68ec:	037e045b 	.word	0x037e045b
 80a68f0:	039100c2 	.word	0x039100c2
 80a68f4:	03e7      	.short	0x03e7
 80a68f6:	69ab      	ldr	r3, [r5, #24]
 80a68f8:	9a03      	ldr	r2, [sp, #12]
 80a68fa:	3318      	adds	r3, #24
 80a68fc:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
 80a6900:	4640      	mov	r0, r8
 80a6902:	f000 fc07 	bl	80a7114 <strlen>
 80a6906:	f108 38ff 	add.w	r8, r8, #4294967295
 80a690a:	193b      	adds	r3, r7, r4
 80a690c:	4420      	add	r0, r4
 80a690e:	4284      	cmp	r4, r0
 80a6910:	f000 83eb 	beq.w	80a70ea <strftime+0x93e>
 80a6914:	9a02      	ldr	r2, [sp, #8]
 80a6916:	4294      	cmp	r4, r2
 80a6918:	f080 83f2 	bcs.w	80a7100 <strftime+0x954>
 80a691c:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 80a6920:	3401      	adds	r4, #1
 80a6922:	f803 2b01 	strb.w	r2, [r3], #1
 80a6926:	e7f2      	b.n	80a690e <strftime+0x162>
 80a6928:	69ab      	ldr	r3, [r5, #24]
 80a692a:	9a03      	ldr	r2, [sp, #12]
 80a692c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80a6930:	f8d3 807c 	ldr.w	r8, [r3, #124]	; 0x7c
 80a6934:	4640      	mov	r0, r8
 80a6936:	f000 fbed 	bl	80a7114 <strlen>
 80a693a:	f108 38ff 	add.w	r8, r8, #4294967295
 80a693e:	193b      	adds	r3, r7, r4
 80a6940:	4420      	add	r0, r4
 80a6942:	4284      	cmp	r4, r0
 80a6944:	f000 83d1 	beq.w	80a70ea <strftime+0x93e>
 80a6948:	9a02      	ldr	r2, [sp, #8]
 80a694a:	4294      	cmp	r4, r2
 80a694c:	f080 83d8 	bcs.w	80a7100 <strftime+0x954>
 80a6950:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 80a6954:	3401      	adds	r4, #1
 80a6956:	f803 2b01 	strb.w	r2, [r3], #1
 80a695a:	e7f2      	b.n	80a6942 <strftime+0x196>
 80a695c:	692b      	ldr	r3, [r5, #16]
 80a695e:	9a03      	ldr	r2, [sp, #12]
 80a6960:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
 80a6964:	4640      	mov	r0, r8
 80a6966:	f000 fbd5 	bl	80a7114 <strlen>
 80a696a:	f108 38ff 	add.w	r8, r8, #4294967295
 80a696e:	193b      	adds	r3, r7, r4
 80a6970:	4420      	add	r0, r4
 80a6972:	4284      	cmp	r4, r0
 80a6974:	f000 83b9 	beq.w	80a70ea <strftime+0x93e>
 80a6978:	9a02      	ldr	r2, [sp, #8]
 80a697a:	4294      	cmp	r4, r2
 80a697c:	f080 83c0 	bcs.w	80a7100 <strftime+0x954>
 80a6980:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 80a6984:	3401      	adds	r4, #1
 80a6986:	f803 2b01 	strb.w	r2, [r3], #1
 80a698a:	e7f2      	b.n	80a6972 <strftime+0x1c6>
 80a698c:	692b      	ldr	r3, [r5, #16]
 80a698e:	9a03      	ldr	r2, [sp, #12]
 80a6990:	330c      	adds	r3, #12
 80a6992:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
 80a6996:	4640      	mov	r0, r8
 80a6998:	f000 fbbc 	bl	80a7114 <strlen>
 80a699c:	f108 38ff 	add.w	r8, r8, #4294967295
 80a69a0:	193b      	adds	r3, r7, r4
 80a69a2:	4420      	add	r0, r4
 80a69a4:	4284      	cmp	r4, r0
 80a69a6:	f000 83a0 	beq.w	80a70ea <strftime+0x93e>
 80a69aa:	9a02      	ldr	r2, [sp, #8]
 80a69ac:	4294      	cmp	r4, r2
 80a69ae:	f080 83a7 	bcs.w	80a7100 <strftime+0x954>
 80a69b2:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 80a69b6:	3401      	adds	r4, #1
 80a69b8:	f803 2b01 	strb.w	r2, [r3], #1
 80a69bc:	e7f2      	b.n	80a69a4 <strftime+0x1f8>
 80a69be:	9b03      	ldr	r3, [sp, #12]
 80a69c0:	f8d3 80a0 	ldr.w	r8, [r3, #160]	; 0xa0
 80a69c4:	e00a      	b.n	80a69dc <strftime+0x230>
 80a69c6:	9b03      	ldr	r3, [sp, #12]
 80a69c8:	f8d3 80e4 	ldr.w	r8, [r3, #228]	; 0xe4
 80a69cc:	e006      	b.n	80a69dc <strftime+0x230>
 80a69ce:	9b03      	ldr	r3, [sp, #12]
 80a69d0:	f8d3 809c 	ldr.w	r8, [r3, #156]	; 0x9c
 80a69d4:	e002      	b.n	80a69dc <strftime+0x230>
 80a69d6:	9b03      	ldr	r3, [sp, #12]
 80a69d8:	f8d3 8098 	ldr.w	r8, [r3, #152]	; 0x98
 80a69dc:	4640      	mov	r0, r8
 80a69de:	f000 fb99 	bl	80a7114 <strlen>
 80a69e2:	f898 3000 	ldrb.w	r3, [r8]
 80a69e6:	2b00      	cmp	r3, #0
 80a69e8:	f000 837f 	beq.w	80a70ea <strftime+0x93e>
 80a69ec:	462b      	mov	r3, r5
 80a69ee:	4642      	mov	r2, r8
 80a69f0:	e093      	b.n	80a6b1a <strftime+0x36e>
 80a69f2:	49b6      	ldr	r1, [pc, #728]	; (80a6ccc <strftime+0x520>)
 80a69f4:	f8d5 b014 	ldr.w	fp, [r5, #20]
 80a69f8:	458b      	cmp	fp, r1
 80a69fa:	bfac      	ite	ge
 80a69fc:	2100      	movge	r1, #0
 80a69fe:	2101      	movlt	r1, #1
 80a6a00:	f1bb 0f00 	cmp.w	fp, #0
 80a6a04:	db04      	blt.n	80a6a10 <strftime+0x264>
 80a6a06:	2064      	movs	r0, #100	; 0x64
 80a6a08:	fb9b f0f0 	sdiv	r0, fp, r0
 80a6a0c:	3013      	adds	r0, #19
 80a6a0e:	e008      	b.n	80a6a22 <strftime+0x276>
 80a6a10:	f20b 706c 	addw	r0, fp, #1900	; 0x76c
 80a6a14:	9107      	str	r1, [sp, #28]
 80a6a16:	f001 fd2f 	bl	80a8478 <abs>
 80a6a1a:	2364      	movs	r3, #100	; 0x64
 80a6a1c:	fb90 f0f3 	sdiv	r0, r0, r3
 80a6a20:	9907      	ldr	r1, [sp, #28]
 80a6a22:	f1ba 0f00 	cmp.w	sl, #0
 80a6a26:	d008      	beq.n	80a6a3a <strftime+0x28e>
 80a6a28:	2863      	cmp	r0, #99	; 0x63
 80a6a2a:	dd09      	ble.n	80a6a40 <strftime+0x294>
 80a6a2c:	4ba8      	ldr	r3, [pc, #672]	; (80a6cd0 <strftime+0x524>)
 80a6a2e:	4aa9      	ldr	r2, [pc, #676]	; (80a6cd4 <strftime+0x528>)
 80a6a30:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 80a6a34:	bf18      	it	ne
 80a6a36:	4613      	movne	r3, r2
 80a6a38:	e003      	b.n	80a6a42 <strftime+0x296>
 80a6a3a:	4ba6      	ldr	r3, [pc, #664]	; (80a6cd4 <strftime+0x528>)
 80a6a3c:	4aa6      	ldr	r2, [pc, #664]	; (80a6cd8 <strftime+0x52c>)
 80a6a3e:	e001      	b.n	80a6a44 <strftime+0x298>
 80a6a40:	4ba4      	ldr	r3, [pc, #656]	; (80a6cd4 <strftime+0x528>)
 80a6a42:	4aa6      	ldr	r2, [pc, #664]	; (80a6cdc <strftime+0x530>)
 80a6a44:	f1b8 0f01 	cmp.w	r8, #1
 80a6a48:	bf98      	it	ls
 80a6a4a:	f04f 0802 	movls.w	r8, #2
 80a6a4e:	ebc1 0108 	rsb	r1, r1, r8
 80a6a52:	9001      	str	r0, [sp, #4]
 80a6a54:	9100      	str	r1, [sp, #0]
 80a6a56:	489d      	ldr	r0, [pc, #628]	; (80a6ccc <strftime+0x520>)
 80a6a58:	49a1      	ldr	r1, [pc, #644]	; (80a6ce0 <strftime+0x534>)
 80a6a5a:	4583      	cmp	fp, r0
 80a6a5c:	bfb8      	it	lt
 80a6a5e:	460b      	movlt	r3, r1
 80a6a60:	e21d      	b.n	80a6e9e <strftime+0x6f2>
 80a6a62:	4aa0      	ldr	r2, [pc, #640]	; (80a6ce4 <strftime+0x538>)
 80a6a64:	49a0      	ldr	r1, [pc, #640]	; (80a6ce8 <strftime+0x53c>)
 80a6a66:	68eb      	ldr	r3, [r5, #12]
 80a6a68:	2864      	cmp	r0, #100	; 0x64
 80a6a6a:	bf08      	it	eq
 80a6a6c:	460a      	moveq	r2, r1
 80a6a6e:	1b31      	subs	r1, r6, r4
 80a6a70:	1938      	adds	r0, r7, r4
 80a6a72:	f7fc fc61 	bl	80a3338 <sniprintf>
 80a6a76:	2800      	cmp	r0, #0
 80a6a78:	f280 8302 	bge.w	80a7080 <strftime+0x8d4>
 80a6a7c:	e340      	b.n	80a7100 <strftime+0x954>
 80a6a7e:	6968      	ldr	r0, [r5, #20]
 80a6a80:	692b      	ldr	r3, [r5, #16]
 80a6a82:	2800      	cmp	r0, #0
 80a6a84:	f103 0b01 	add.w	fp, r3, #1
 80a6a88:	eb07 0804 	add.w	r8, r7, r4
 80a6a8c:	ebc4 0a06 	rsb	sl, r4, r6
 80a6a90:	68eb      	ldr	r3, [r5, #12]
 80a6a92:	db05      	blt.n	80a6aa0 <strftime+0x2f4>
 80a6a94:	2264      	movs	r2, #100	; 0x64
 80a6a96:	fb90 f1f2 	sdiv	r1, r0, r2
 80a6a9a:	fb02 0011 	mls	r0, r2, r1, r0
 80a6a9e:	e00a      	b.n	80a6ab6 <strftime+0x30a>
 80a6aa0:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80a6aa4:	9307      	str	r3, [sp, #28]
 80a6aa6:	f001 fce7 	bl	80a8478 <abs>
 80a6aaa:	2264      	movs	r2, #100	; 0x64
 80a6aac:	fb90 f1f2 	sdiv	r1, r0, r2
 80a6ab0:	fb01 0012 	mls	r0, r1, r2, r0
 80a6ab4:	9b07      	ldr	r3, [sp, #28]
 80a6ab6:	9001      	str	r0, [sp, #4]
 80a6ab8:	9300      	str	r3, [sp, #0]
 80a6aba:	4651      	mov	r1, sl
 80a6abc:	465b      	mov	r3, fp
 80a6abe:	4640      	mov	r0, r8
 80a6ac0:	4a8a      	ldr	r2, [pc, #552]	; (80a6cec <strftime+0x540>)
 80a6ac2:	f7fc fc39 	bl	80a3338 <sniprintf>
 80a6ac6:	e7d6      	b.n	80a6a76 <strftime+0x2ca>
 80a6ac8:	2325      	movs	r3, #37	; 0x25
 80a6aca:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 80a6ace:	f1ba 0f00 	cmp.w	sl, #0
 80a6ad2:	d007      	beq.n	80a6ae4 <strftime+0x338>
 80a6ad4:	f1b8 0f05 	cmp.w	r8, #5
 80a6ad8:	f88d a029 	strb.w	sl, [sp, #41]	; 0x29
 80a6adc:	bf98      	it	ls
 80a6ade:	f04f 0806 	movls.w	r8, #6
 80a6ae2:	e004      	b.n	80a6aee <strftime+0x342>
 80a6ae4:	232b      	movs	r3, #43	; 0x2b
 80a6ae6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80a6aea:	f04f 080a 	mov.w	r8, #10
 80a6aee:	f1b8 0306 	subs.w	r3, r8, #6
 80a6af2:	d102      	bne.n	80a6afa <strftime+0x34e>
 80a6af4:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
 80a6af8:	e00a      	b.n	80a6b10 <strftime+0x364>
 80a6afa:	4a7d      	ldr	r2, [pc, #500]	; (80a6cf0 <strftime+0x544>)
 80a6afc:	211e      	movs	r1, #30
 80a6afe:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
 80a6b02:	f7fc fc19 	bl	80a3338 <sniprintf>
 80a6b06:	2800      	cmp	r0, #0
 80a6b08:	ddf4      	ble.n	80a6af4 <strftime+0x348>
 80a6b0a:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
 80a6b0e:	4418      	add	r0, r3
 80a6b10:	4978      	ldr	r1, [pc, #480]	; (80a6cf4 <strftime+0x548>)
 80a6b12:	f7ff fde3 	bl	80a66dc <strcpy>
 80a6b16:	462b      	mov	r3, r5
 80a6b18:	aa0a      	add	r2, sp, #40	; 0x28
 80a6b1a:	1b31      	subs	r1, r6, r4
 80a6b1c:	1938      	adds	r0, r7, r4
 80a6b1e:	f7ff fe45 	bl	80a67ac <strftime>
 80a6b22:	2800      	cmp	r0, #0
 80a6b24:	f340 82ec 	ble.w	80a7100 <strftime+0x954>
 80a6b28:	4404      	add	r4, r0
 80a6b2a:	e2de      	b.n	80a70ea <strftime+0x93e>
 80a6b2c:	4628      	mov	r0, r5
 80a6b2e:	f7ff fddd 	bl	80a66ec <iso_year_adjust>
 80a6b32:	4680      	mov	r8, r0
 80a6b34:	6968      	ldr	r0, [r5, #20]
 80a6b36:	2800      	cmp	r0, #0
 80a6b38:	db05      	blt.n	80a6b46 <strftime+0x39a>
 80a6b3a:	2264      	movs	r2, #100	; 0x64
 80a6b3c:	fb90 f1f2 	sdiv	r1, r0, r2
 80a6b40:	fb02 0011 	mls	r0, r2, r1, r0
 80a6b44:	e008      	b.n	80a6b58 <strftime+0x3ac>
 80a6b46:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80a6b4a:	f001 fc95 	bl	80a8478 <abs>
 80a6b4e:	2264      	movs	r2, #100	; 0x64
 80a6b50:	fb90 f3f2 	sdiv	r3, r0, r2
 80a6b54:	fb03 0012 	mls	r0, r3, r2, r0
 80a6b58:	f1b8 0f00 	cmp.w	r8, #0
 80a6b5c:	da06      	bge.n	80a6b6c <strftime+0x3c0>
 80a6b5e:	696a      	ldr	r2, [r5, #20]
 80a6b60:	4b65      	ldr	r3, [pc, #404]	; (80a6cf8 <strftime+0x54c>)
 80a6b62:	429a      	cmp	r2, r3
 80a6b64:	bfb8      	it	lt
 80a6b66:	f04f 0801 	movlt.w	r8, #1
 80a6b6a:	e006      	b.n	80a6b7a <strftime+0x3ce>
 80a6b6c:	d005      	beq.n	80a6b7a <strftime+0x3ce>
 80a6b6e:	696a      	ldr	r2, [r5, #20]
 80a6b70:	4b56      	ldr	r3, [pc, #344]	; (80a6ccc <strftime+0x520>)
 80a6b72:	429a      	cmp	r2, r3
 80a6b74:	bfb8      	it	lt
 80a6b76:	f04f 38ff 	movlt.w	r8, #4294967295
 80a6b7a:	2364      	movs	r3, #100	; 0x64
 80a6b7c:	4440      	add	r0, r8
 80a6b7e:	fb90 f2f3 	sdiv	r2, r0, r3
 80a6b82:	fb03 0012 	mls	r0, r3, r2, r0
 80a6b86:	4418      	add	r0, r3
 80a6b88:	e1f8      	b.n	80a6f7c <strftime+0x7d0>
 80a6b8a:	4b50      	ldr	r3, [pc, #320]	; (80a6ccc <strftime+0x520>)
 80a6b8c:	6969      	ldr	r1, [r5, #20]
 80a6b8e:	4628      	mov	r0, r5
 80a6b90:	4299      	cmp	r1, r3
 80a6b92:	bfac      	ite	ge
 80a6b94:	2300      	movge	r3, #0
 80a6b96:	2301      	movlt	r3, #1
 80a6b98:	9108      	str	r1, [sp, #32]
 80a6b9a:	9307      	str	r3, [sp, #28]
 80a6b9c:	f7ff fda6 	bl	80a66ec <iso_year_adjust>
 80a6ba0:	9908      	ldr	r1, [sp, #32]
 80a6ba2:	4683      	mov	fp, r0
 80a6ba4:	2900      	cmp	r1, #0
 80a6ba6:	db04      	blt.n	80a6bb2 <strftime+0x406>
 80a6ba8:	2364      	movs	r3, #100	; 0x64
 80a6baa:	fb91 f3f3 	sdiv	r3, r1, r3
 80a6bae:	3313      	adds	r3, #19
 80a6bb0:	e008      	b.n	80a6bc4 <strftime+0x418>
 80a6bb2:	f201 706c 	addw	r0, r1, #1900	; 0x76c
 80a6bb6:	9108      	str	r1, [sp, #32]
 80a6bb8:	f001 fc5e 	bl	80a8478 <abs>
 80a6bbc:	2364      	movs	r3, #100	; 0x64
 80a6bbe:	fb90 f3f3 	sdiv	r3, r0, r3
 80a6bc2:	9908      	ldr	r1, [sp, #32]
 80a6bc4:	6968      	ldr	r0, [r5, #20]
 80a6bc6:	2800      	cmp	r0, #0
 80a6bc8:	db06      	blt.n	80a6bd8 <strftime+0x42c>
 80a6bca:	f04f 0e64 	mov.w	lr, #100	; 0x64
 80a6bce:	fb90 fcfe 	sdiv	ip, r0, lr
 80a6bd2:	fb0e 001c 	mls	r0, lr, ip, r0
 80a6bd6:	e00d      	b.n	80a6bf4 <strftime+0x448>
 80a6bd8:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80a6bdc:	9109      	str	r1, [sp, #36]	; 0x24
 80a6bde:	9308      	str	r3, [sp, #32]
 80a6be0:	f001 fc4a 	bl	80a8478 <abs>
 80a6be4:	f04f 0e64 	mov.w	lr, #100	; 0x64
 80a6be8:	fb90 fcfe 	sdiv	ip, r0, lr
 80a6bec:	fb0c 001e 	mls	r0, ip, lr, r0
 80a6bf0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a6bf2:	9b08      	ldr	r3, [sp, #32]
 80a6bf4:	f1bb 0f00 	cmp.w	fp, #0
 80a6bf8:	da08      	bge.n	80a6c0c <strftime+0x460>
 80a6bfa:	6969      	ldr	r1, [r5, #20]
 80a6bfc:	4a3e      	ldr	r2, [pc, #248]	; (80a6cf8 <strftime+0x54c>)
 80a6bfe:	4291      	cmp	r1, r2
 80a6c00:	da0a      	bge.n	80a6c18 <strftime+0x46c>
 80a6c02:	f04f 0b01 	mov.w	fp, #1
 80a6c06:	f8cd b01c 	str.w	fp, [sp, #28]
 80a6c0a:	e005      	b.n	80a6c18 <strftime+0x46c>
 80a6c0c:	d004      	beq.n	80a6c18 <strftime+0x46c>
 80a6c0e:	4a2f      	ldr	r2, [pc, #188]	; (80a6ccc <strftime+0x520>)
 80a6c10:	4291      	cmp	r1, r2
 80a6c12:	bfb8      	it	lt
 80a6c14:	f04f 3bff 	movlt.w	fp, #4294967295
 80a6c18:	eb0b 0200 	add.w	r2, fp, r0
 80a6c1c:	1c50      	adds	r0, r2, #1
 80a6c1e:	d102      	bne.n	80a6c26 <strftime+0x47a>
 80a6c20:	3b01      	subs	r3, #1
 80a6c22:	2263      	movs	r2, #99	; 0x63
 80a6c24:	e003      	b.n	80a6c2e <strftime+0x482>
 80a6c26:	2a64      	cmp	r2, #100	; 0x64
 80a6c28:	bf04      	itt	eq
 80a6c2a:	3301      	addeq	r3, #1
 80a6c2c:	2200      	moveq	r2, #0
 80a6c2e:	2064      	movs	r0, #100	; 0x64
 80a6c30:	fb00 2303 	mla	r3, r0, r3, r2
 80a6c34:	9a07      	ldr	r2, [sp, #28]
 80a6c36:	b142      	cbz	r2, 80a6c4a <strftime+0x49e>
 80a6c38:	222d      	movs	r2, #45	; 0x2d
 80a6c3a:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
 80a6c3e:	f1b8 0f00 	cmp.w	r8, #0
 80a6c42:	d013      	beq.n	80a6c6c <strftime+0x4c0>
 80a6c44:	f108 38ff 	add.w	r8, r8, #4294967295
 80a6c48:	e010      	b.n	80a6c6c <strftime+0x4c0>
 80a6c4a:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 80a6c4e:	d110      	bne.n	80a6c72 <strftime+0x4c6>
 80a6c50:	f242 720f 	movw	r2, #9999	; 0x270f
 80a6c54:	4293      	cmp	r3, r2
 80a6c56:	d90c      	bls.n	80a6c72 <strftime+0x4c6>
 80a6c58:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
 80a6c5c:	f1b8 0f00 	cmp.w	r8, #0
 80a6c60:	d1f0      	bne.n	80a6c44 <strftime+0x498>
 80a6c62:	aa12      	add	r2, sp, #72	; 0x48
 80a6c64:	2125      	movs	r1, #37	; 0x25
 80a6c66:	f802 1d1f 	strb.w	r1, [r2, #-31]!
 80a6c6a:	e00a      	b.n	80a6c82 <strftime+0x4d6>
 80a6c6c:	f10d 0229 	add.w	r2, sp, #41	; 0x29
 80a6c70:	e000      	b.n	80a6c74 <strftime+0x4c8>
 80a6c72:	aa0a      	add	r2, sp, #40	; 0x28
 80a6c74:	2125      	movs	r1, #37	; 0x25
 80a6c76:	7011      	strb	r1, [r2, #0]
 80a6c78:	f1ba 0f00 	cmp.w	sl, #0
 80a6c7c:	d101      	bne.n	80a6c82 <strftime+0x4d6>
 80a6c7e:	1c50      	adds	r0, r2, #1
 80a6c80:	e002      	b.n	80a6c88 <strftime+0x4dc>
 80a6c82:	2130      	movs	r1, #48	; 0x30
 80a6c84:	1c90      	adds	r0, r2, #2
 80a6c86:	7051      	strb	r1, [r2, #1]
 80a6c88:	491c      	ldr	r1, [pc, #112]	; (80a6cfc <strftime+0x550>)
 80a6c8a:	9307      	str	r3, [sp, #28]
 80a6c8c:	f7ff fd26 	bl	80a66dc <strcpy>
 80a6c90:	9b07      	ldr	r3, [sp, #28]
 80a6c92:	9300      	str	r3, [sp, #0]
 80a6c94:	e1ac      	b.n	80a6ff0 <strftime+0x844>
 80a6c96:	4a14      	ldr	r2, [pc, #80]	; (80a6ce8 <strftime+0x53c>)
 80a6c98:	4912      	ldr	r1, [pc, #72]	; (80a6ce4 <strftime+0x538>)
 80a6c9a:	68ab      	ldr	r3, [r5, #8]
 80a6c9c:	286b      	cmp	r0, #107	; 0x6b
 80a6c9e:	bf08      	it	eq
 80a6ca0:	460a      	moveq	r2, r1
 80a6ca2:	e6e4      	b.n	80a6a6e <strftime+0x2c2>
 80a6ca4:	68a9      	ldr	r1, [r5, #8]
 80a6ca6:	230c      	movs	r3, #12
 80a6ca8:	b131      	cbz	r1, 80a6cb8 <strftime+0x50c>
 80a6caa:	4299      	cmp	r1, r3
 80a6cac:	bf16      	itet	ne
 80a6cae:	fb91 f2f3 	sdivne	r2, r1, r3
 80a6cb2:	460b      	moveq	r3, r1
 80a6cb4:	fb03 1312 	mlsne	r3, r3, r2, r1
 80a6cb8:	4a0a      	ldr	r2, [pc, #40]	; (80a6ce4 <strftime+0x538>)
 80a6cba:	490b      	ldr	r1, [pc, #44]	; (80a6ce8 <strftime+0x53c>)
 80a6cbc:	2849      	cmp	r0, #73	; 0x49
 80a6cbe:	bf08      	it	eq
 80a6cc0:	460a      	moveq	r2, r1
 80a6cc2:	e6d4      	b.n	80a6a6e <strftime+0x2c2>
 80a6cc4:	69eb      	ldr	r3, [r5, #28]
 80a6cc6:	4a0e      	ldr	r2, [pc, #56]	; (80a6d00 <strftime+0x554>)
 80a6cc8:	3301      	adds	r3, #1
 80a6cca:	e6d0      	b.n	80a6a6e <strftime+0x2c2>
 80a6ccc:	fffff894 	.word	0xfffff894
 80a6cd0:	080a9f5f 	.word	0x080a9f5f
 80a6cd4:	080a997b 	.word	0x080a997b
 80a6cd8:	080a9f50 	.word	0x080a9f50
 80a6cdc:	080a9f57 	.word	0x080a9f57
 80a6ce0:	080a9f61 	.word	0x080a9f61
 80a6ce4:	080a9f63 	.word	0x080a9f63
 80a6ce8:	080a9f71 	.word	0x080a9f71
 80a6cec:	080a9f67 	.word	0x080a9f67
 80a6cf0:	080a98df 	.word	0x080a98df
 80a6cf4:	080a9f76 	.word	0x080a9f76
 80a6cf8:	fffff895 	.word	0xfffff895
 80a6cfc:	080a9f7e 	.word	0x080a9f7e
 80a6d00:	080a9f82 	.word	0x080a9f82
 80a6d04:	692b      	ldr	r3, [r5, #16]
 80a6d06:	3301      	adds	r3, #1
 80a6d08:	e13c      	b.n	80a6f84 <strftime+0x7d8>
 80a6d0a:	686b      	ldr	r3, [r5, #4]
 80a6d0c:	e13a      	b.n	80a6f84 <strftime+0x7d8>
 80a6d0e:	9b02      	ldr	r3, [sp, #8]
 80a6d10:	429c      	cmp	r4, r3
 80a6d12:	f080 81f5 	bcs.w	80a7100 <strftime+0x954>
 80a6d16:	230a      	movs	r3, #10
 80a6d18:	e1e5      	b.n	80a70e6 <strftime+0x93a>
 80a6d1a:	68ab      	ldr	r3, [r5, #8]
 80a6d1c:	9a03      	ldr	r2, [sp, #12]
 80a6d1e:	2b0b      	cmp	r3, #11
 80a6d20:	bfcc      	ite	gt
 80a6d22:	23a4      	movgt	r3, #164	; 0xa4
 80a6d24:	23a0      	movle	r3, #160	; 0xa0
 80a6d26:	4413      	add	r3, r2
 80a6d28:	f8d3 8004 	ldr.w	r8, [r3, #4]
 80a6d2c:	4640      	mov	r0, r8
 80a6d2e:	f000 f9f1 	bl	80a7114 <strlen>
 80a6d32:	4642      	mov	r2, r8
 80a6d34:	4bb1      	ldr	r3, [pc, #708]	; (80a6ffc <strftime+0x850>)
 80a6d36:	1939      	adds	r1, r7, r4
 80a6d38:	f8d3 e000 	ldr.w	lr, [r3]
 80a6d3c:	4420      	add	r0, r4
 80a6d3e:	4284      	cmp	r4, r0
 80a6d40:	f000 81d3 	beq.w	80a70ea <strftime+0x93e>
 80a6d44:	9b02      	ldr	r3, [sp, #8]
 80a6d46:	429c      	cmp	r4, r3
 80a6d48:	f080 81da 	bcs.w	80a7100 <strftime+0x954>
 80a6d4c:	f899 3000 	ldrb.w	r3, [r9]
 80a6d50:	3401      	adds	r4, #1
 80a6d52:	2b50      	cmp	r3, #80	; 0x50
 80a6d54:	7813      	ldrb	r3, [r2, #0]
 80a6d56:	d10a      	bne.n	80a6d6e <strftime+0x5c2>
 80a6d58:	eb0e 0c03 	add.w	ip, lr, r3
 80a6d5c:	f89c c001 	ldrb.w	ip, [ip, #1]
 80a6d60:	f00c 0c03 	and.w	ip, ip, #3
 80a6d64:	f1bc 0f01 	cmp.w	ip, #1
 80a6d68:	bf08      	it	eq
 80a6d6a:	3320      	addeq	r3, #32
 80a6d6c:	b2db      	uxtb	r3, r3
 80a6d6e:	f801 3b01 	strb.w	r3, [r1], #1
 80a6d72:	3201      	adds	r2, #1
 80a6d74:	e7e3      	b.n	80a6d3e <strftime+0x592>
 80a6d76:	686b      	ldr	r3, [r5, #4]
 80a6d78:	4aa1      	ldr	r2, [pc, #644]	; (80a7000 <strftime+0x854>)
 80a6d7a:	9300      	str	r3, [sp, #0]
 80a6d7c:	68ab      	ldr	r3, [r5, #8]
 80a6d7e:	e139      	b.n	80a6ff4 <strftime+0x848>
 80a6d80:	6a2b      	ldr	r3, [r5, #32]
 80a6d82:	2b00      	cmp	r3, #0
 80a6d84:	db17      	blt.n	80a6db6 <strftime+0x60a>
 80a6d86:	f001 f9ef 	bl	80a8168 <__tz_lock>
 80a6d8a:	9b06      	ldr	r3, [sp, #24]
 80a6d8c:	b91b      	cbnz	r3, 80a6d96 <strftime+0x5ea>
 80a6d8e:	f001 f9ed 	bl	80a816c <_tzset_unlocked>
 80a6d92:	2301      	movs	r3, #1
 80a6d94:	9306      	str	r3, [sp, #24]
 80a6d96:	f001 fed5 	bl	80a8b44 <__gettzinfo>
 80a6d9a:	6a2b      	ldr	r3, [r5, #32]
 80a6d9c:	221c      	movs	r2, #28
 80a6d9e:	2b00      	cmp	r3, #0
 80a6da0:	bfd4      	ite	le
 80a6da2:	2300      	movle	r3, #0
 80a6da4:	2301      	movgt	r3, #1
 80a6da6:	fb02 0003 	mla	r0, r2, r3, r0
 80a6daa:	6a03      	ldr	r3, [r0, #32]
 80a6dac:	f1c3 0800 	rsb	r8, r3, #0
 80a6db0:	f001 f9db 	bl	80a816a <__tz_unlock>
 80a6db4:	e001      	b.n	80a6dba <strftime+0x60e>
 80a6db6:	f04f 0800 	mov.w	r8, #0
 80a6dba:	f8d5 e014 	ldr.w	lr, [r5, #20]
 80a6dbe:	ebc4 0c06 	rsb	ip, r4, r6
 80a6dc2:	4670      	mov	r0, lr
 80a6dc4:	f1be 0245 	subs.w	r2, lr, #69	; 0x45
 80a6dc8:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80a6dcc:	f141 33ff 	adc.w	r3, r1, #4294967295
 80a6dd0:	2a00      	cmp	r2, #0
 80a6dd2:	f173 0b00 	sbcs.w	fp, r3, #0
 80a6dd6:	eb07 0a04 	add.w	sl, r7, r4
 80a6dda:	da03      	bge.n	80a6de4 <strftime+0x638>
 80a6ddc:	f1be 0242 	subs.w	r2, lr, #66	; 0x42
 80a6de0:	f141 33ff 	adc.w	r3, r1, #4294967295
 80a6de4:	0891      	lsrs	r1, r2, #2
 80a6de6:	ea41 7183 	orr.w	r1, r1, r3, lsl #30
 80a6dea:	109b      	asrs	r3, r3, #2
 80a6dec:	9104      	str	r1, [sp, #16]
 80a6dee:	9305      	str	r3, [sp, #20]
 80a6df0:	f10e 31ff 	add.w	r1, lr, #4294967295
 80a6df4:	2364      	movs	r3, #100	; 0x64
 80a6df6:	fb91 f1f3 	sdiv	r1, r1, r3
 80a6dfa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80a6dfe:	1a52      	subs	r2, r2, r1
 80a6e00:	eb63 73e1 	sbc.w	r3, r3, r1, asr #31
 80a6e04:	f20e 102b 	addw	r0, lr, #299	; 0x12b
 80a6e08:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80a6e0c:	fb90 f1f1 	sdiv	r1, r0, r1
 80a6e10:	1852      	adds	r2, r2, r1
 80a6e12:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
 80a6e16:	f240 116d 	movw	r1, #365	; 0x16d
 80a6e1a:	f1ae 0e46 	sub.w	lr, lr, #70	; 0x46
 80a6e1e:	fb01 fe0e 	mul.w	lr, r1, lr
 80a6e22:	69e9      	ldr	r1, [r5, #28]
 80a6e24:	eb12 020e 	adds.w	r2, r2, lr
 80a6e28:	eb43 73ee 	adc.w	r3, r3, lr, asr #31
 80a6e2c:	1852      	adds	r2, r2, r1
 80a6e2e:	f04f 0e18 	mov.w	lr, #24
 80a6e32:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
 80a6e36:	fba2 010e 	umull	r0, r1, r2, lr
 80a6e3a:	fb0e 1103 	mla	r1, lr, r3, r1
 80a6e3e:	68ab      	ldr	r3, [r5, #8]
 80a6e40:	f04f 0e3c 	mov.w	lr, #60	; 0x3c
 80a6e44:	18c0      	adds	r0, r0, r3
 80a6e46:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
 80a6e4a:	fba0 230e 	umull	r2, r3, r0, lr
 80a6e4e:	fb0e 3301 	mla	r3, lr, r1, r3
 80a6e52:	6869      	ldr	r1, [r5, #4]
 80a6e54:	1852      	adds	r2, r2, r1
 80a6e56:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
 80a6e5a:	fba2 010e 	umull	r0, r1, r2, lr
 80a6e5e:	fb0e 1103 	mla	r1, lr, r3, r1
 80a6e62:	682b      	ldr	r3, [r5, #0]
 80a6e64:	4a67      	ldr	r2, [pc, #412]	; (80a7004 <strftime+0x858>)
 80a6e66:	18c0      	adds	r0, r0, r3
 80a6e68:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
 80a6e6c:	ebb0 0008 	subs.w	r0, r0, r8
 80a6e70:	eb61 71e8 	sbc.w	r1, r1, r8, asr #31
 80a6e74:	e9cd 0100 	strd	r0, r1, [sp]
 80a6e78:	4661      	mov	r1, ip
 80a6e7a:	4650      	mov	r0, sl
 80a6e7c:	f7fc fa5c 	bl	80a3338 <sniprintf>
 80a6e80:	e5f9      	b.n	80a6a76 <strftime+0x2ca>
 80a6e82:	682b      	ldr	r3, [r5, #0]
 80a6e84:	e07e      	b.n	80a6f84 <strftime+0x7d8>
 80a6e86:	9b02      	ldr	r3, [sp, #8]
 80a6e88:	429c      	cmp	r4, r3
 80a6e8a:	f080 8139 	bcs.w	80a7100 <strftime+0x954>
 80a6e8e:	2309      	movs	r3, #9
 80a6e90:	e129      	b.n	80a70e6 <strftime+0x93a>
 80a6e92:	682b      	ldr	r3, [r5, #0]
 80a6e94:	4a5c      	ldr	r2, [pc, #368]	; (80a7008 <strftime+0x85c>)
 80a6e96:	9301      	str	r3, [sp, #4]
 80a6e98:	686b      	ldr	r3, [r5, #4]
 80a6e9a:	9300      	str	r3, [sp, #0]
 80a6e9c:	68ab      	ldr	r3, [r5, #8]
 80a6e9e:	1b31      	subs	r1, r6, r4
 80a6ea0:	1938      	adds	r0, r7, r4
 80a6ea2:	e60e      	b.n	80a6ac2 <strftime+0x316>
 80a6ea4:	9b02      	ldr	r3, [sp, #8]
 80a6ea6:	429c      	cmp	r4, r3
 80a6ea8:	f080 812a 	bcs.w	80a7100 <strftime+0x954>
 80a6eac:	69ab      	ldr	r3, [r5, #24]
 80a6eae:	1c62      	adds	r2, r4, #1
 80a6eb0:	b90b      	cbnz	r3, 80a6eb6 <strftime+0x70a>
 80a6eb2:	2337      	movs	r3, #55	; 0x37
 80a6eb4:	e000      	b.n	80a6eb8 <strftime+0x70c>
 80a6eb6:	3330      	adds	r3, #48	; 0x30
 80a6eb8:	553b      	strb	r3, [r7, r4]
 80a6eba:	4614      	mov	r4, r2
 80a6ebc:	e115      	b.n	80a70ea <strftime+0x93e>
 80a6ebe:	69eb      	ldr	r3, [r5, #28]
 80a6ec0:	69aa      	ldr	r2, [r5, #24]
 80a6ec2:	3307      	adds	r3, #7
 80a6ec4:	1a9b      	subs	r3, r3, r2
 80a6ec6:	2207      	movs	r2, #7
 80a6ec8:	fb93 f3f2 	sdiv	r3, r3, r2
 80a6ecc:	e05a      	b.n	80a6f84 <strftime+0x7d8>
 80a6ece:	4628      	mov	r0, r5
 80a6ed0:	f7ff fc0c 	bl	80a66ec <iso_year_adjust>
 80a6ed4:	69aa      	ldr	r2, [r5, #24]
 80a6ed6:	b10a      	cbz	r2, 80a6edc <strftime+0x730>
 80a6ed8:	1e53      	subs	r3, r2, #1
 80a6eda:	e000      	b.n	80a6ede <strftime+0x732>
 80a6edc:	2306      	movs	r3, #6
 80a6ede:	2800      	cmp	r0, #0
 80a6ee0:	dc2f      	bgt.n	80a6f42 <strftime+0x796>
 80a6ee2:	69ea      	ldr	r2, [r5, #28]
 80a6ee4:	d101      	bne.n	80a6eea <strftime+0x73e>
 80a6ee6:	320a      	adds	r2, #10
 80a6ee8:	e03b      	b.n	80a6f62 <strftime+0x7b6>
 80a6eea:	f240 716b 	movw	r1, #1899	; 0x76b
 80a6eee:	1a9a      	subs	r2, r3, r2
 80a6ef0:	696b      	ldr	r3, [r5, #20]
 80a6ef2:	2b00      	cmp	r3, #0
 80a6ef4:	bfb4      	ite	lt
 80a6ef6:	4608      	movlt	r0, r1
 80a6ef8:	f06f 0064 	mvnge.w	r0, #100	; 0x64
 80a6efc:	4418      	add	r0, r3
 80a6efe:	0781      	lsls	r1, r0, #30
 80a6f00:	d107      	bne.n	80a6f12 <strftime+0x766>
 80a6f02:	f04f 0e64 	mov.w	lr, #100	; 0x64
 80a6f06:	4601      	mov	r1, r0
 80a6f08:	fb90 f0fe 	sdiv	r0, r0, lr
 80a6f0c:	fb0e 1110 	mls	r1, lr, r0, r1
 80a6f10:	b981      	cbnz	r1, 80a6f34 <strftime+0x788>
 80a6f12:	f240 716b 	movw	r1, #1899	; 0x76b
 80a6f16:	2b00      	cmp	r3, #0
 80a6f18:	bfa8      	it	ge
 80a6f1a:	f06f 0164 	mvnge.w	r1, #100	; 0x64
 80a6f1e:	4419      	add	r1, r3
 80a6f20:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80a6f24:	fb91 f0f3 	sdiv	r0, r1, r3
 80a6f28:	fb03 1110 	mls	r1, r3, r0, r1
 80a6f2c:	fab1 f181 	clz	r1, r1
 80a6f30:	0949      	lsrs	r1, r1, #5
 80a6f32:	e000      	b.n	80a6f36 <strftime+0x78a>
 80a6f34:	2101      	movs	r1, #1
 80a6f36:	1a52      	subs	r2, r2, r1
 80a6f38:	2a05      	cmp	r2, #5
 80a6f3a:	bfb4      	ite	lt
 80a6f3c:	2335      	movlt	r3, #53	; 0x35
 80a6f3e:	2334      	movge	r3, #52	; 0x34
 80a6f40:	e020      	b.n	80a6f84 <strftime+0x7d8>
 80a6f42:	2301      	movs	r3, #1
 80a6f44:	e01e      	b.n	80a6f84 <strftime+0x7d8>
 80a6f46:	9b02      	ldr	r3, [sp, #8]
 80a6f48:	429c      	cmp	r4, r3
 80a6f4a:	f080 80d9 	bcs.w	80a7100 <strftime+0x954>
 80a6f4e:	69ab      	ldr	r3, [r5, #24]
 80a6f50:	3330      	adds	r3, #48	; 0x30
 80a6f52:	e0c8      	b.n	80a70e6 <strftime+0x93a>
 80a6f54:	69aa      	ldr	r2, [r5, #24]
 80a6f56:	b10a      	cbz	r2, 80a6f5c <strftime+0x7b0>
 80a6f58:	1e53      	subs	r3, r2, #1
 80a6f5a:	e000      	b.n	80a6f5e <strftime+0x7b2>
 80a6f5c:	2306      	movs	r3, #6
 80a6f5e:	69ea      	ldr	r2, [r5, #28]
 80a6f60:	3207      	adds	r2, #7
 80a6f62:	1ad2      	subs	r2, r2, r3
 80a6f64:	2307      	movs	r3, #7
 80a6f66:	fb92 f3f3 	sdiv	r3, r2, r3
 80a6f6a:	e00b      	b.n	80a6f84 <strftime+0x7d8>
 80a6f6c:	6968      	ldr	r0, [r5, #20]
 80a6f6e:	2800      	cmp	r0, #0
 80a6f70:	da03      	bge.n	80a6f7a <strftime+0x7ce>
 80a6f72:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80a6f76:	f001 fa7f 	bl	80a8478 <abs>
 80a6f7a:	2364      	movs	r3, #100	; 0x64
 80a6f7c:	fb90 f2f3 	sdiv	r2, r0, r3
 80a6f80:	fb02 0313 	mls	r3, r2, r3, r0
 80a6f84:	4a21      	ldr	r2, [pc, #132]	; (80a700c <strftime+0x860>)
 80a6f86:	e572      	b.n	80a6a6e <strftime+0x2c2>
 80a6f88:	696b      	ldr	r3, [r5, #20]
 80a6f8a:	4a21      	ldr	r2, [pc, #132]	; (80a7010 <strftime+0x864>)
 80a6f8c:	f203 7b6c 	addw	fp, r3, #1900	; 0x76c
 80a6f90:	4293      	cmp	r3, r2
 80a6f92:	da05      	bge.n	80a6fa0 <strftime+0x7f4>
 80a6f94:	232d      	movs	r3, #45	; 0x2d
 80a6f96:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 80a6f9a:	f1cb 0b00 	rsb	fp, fp, #0
 80a6f9e:	e008      	b.n	80a6fb2 <strftime+0x806>
 80a6fa0:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 80a6fa4:	d10d      	bne.n	80a6fc2 <strftime+0x816>
 80a6fa6:	f242 730f 	movw	r3, #9999	; 0x270f
 80a6faa:	459b      	cmp	fp, r3
 80a6fac:	d911      	bls.n	80a6fd2 <strftime+0x826>
 80a6fae:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
 80a6fb2:	f1b8 0f00 	cmp.w	r8, #0
 80a6fb6:	d001      	beq.n	80a6fbc <strftime+0x810>
 80a6fb8:	f108 38ff 	add.w	r8, r8, #4294967295
 80a6fbc:	f10d 0329 	add.w	r3, sp, #41	; 0x29
 80a6fc0:	e000      	b.n	80a6fc4 <strftime+0x818>
 80a6fc2:	ab0a      	add	r3, sp, #40	; 0x28
 80a6fc4:	2225      	movs	r2, #37	; 0x25
 80a6fc6:	701a      	strb	r2, [r3, #0]
 80a6fc8:	f1ba 0f00 	cmp.w	sl, #0
 80a6fcc:	d108      	bne.n	80a6fe0 <strftime+0x834>
 80a6fce:	1c58      	adds	r0, r3, #1
 80a6fd0:	e009      	b.n	80a6fe6 <strftime+0x83a>
 80a6fd2:	f1b8 0f00 	cmp.w	r8, #0
 80a6fd6:	d1f4      	bne.n	80a6fc2 <strftime+0x816>
 80a6fd8:	2325      	movs	r3, #37	; 0x25
 80a6fda:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 80a6fde:	ab0a      	add	r3, sp, #40	; 0x28
 80a6fe0:	2230      	movs	r2, #48	; 0x30
 80a6fe2:	1c98      	adds	r0, r3, #2
 80a6fe4:	705a      	strb	r2, [r3, #1]
 80a6fe6:	490b      	ldr	r1, [pc, #44]	; (80a7014 <strftime+0x868>)
 80a6fe8:	f7ff fb78 	bl	80a66dc <strcpy>
 80a6fec:	f8cd b000 	str.w	fp, [sp]
 80a6ff0:	4643      	mov	r3, r8
 80a6ff2:	aa0a      	add	r2, sp, #40	; 0x28
 80a6ff4:	1b31      	subs	r1, r6, r4
 80a6ff6:	1938      	adds	r0, r7, r4
 80a6ff8:	e03f      	b.n	80a707a <strftime+0x8ce>
 80a6ffa:	bf00      	nop
 80a6ffc:	20000010 	.word	0x20000010
 80a7000:	080a9f91 	.word	0x080a9f91
 80a7004:	080a9f87 	.word	0x080a9f87
 80a7008:	080a9f8c 	.word	0x080a9f8c
 80a700c:	080a9f71 	.word	0x080a9f71
 80a7010:	fffff894 	.word	0xfffff894
 80a7014:	080a9f7e 	.word	0x080a9f7e
 80a7018:	6a2b      	ldr	r3, [r5, #32]
 80a701a:	2b00      	cmp	r3, #0
 80a701c:	db65      	blt.n	80a70ea <strftime+0x93e>
 80a701e:	f001 f8a3 	bl	80a8168 <__tz_lock>
 80a7022:	9b06      	ldr	r3, [sp, #24]
 80a7024:	b91b      	cbnz	r3, 80a702e <strftime+0x882>
 80a7026:	f001 f8a1 	bl	80a816c <_tzset_unlocked>
 80a702a:	2301      	movs	r3, #1
 80a702c:	9306      	str	r3, [sp, #24]
 80a702e:	f001 fd89 	bl	80a8b44 <__gettzinfo>
 80a7032:	6a2b      	ldr	r3, [r5, #32]
 80a7034:	221c      	movs	r2, #28
 80a7036:	2b00      	cmp	r3, #0
 80a7038:	bfd4      	ite	le
 80a703a:	2300      	movle	r3, #0
 80a703c:	2301      	movgt	r3, #1
 80a703e:	fb02 0003 	mla	r0, r2, r3, r0
 80a7042:	6a03      	ldr	r3, [r0, #32]
 80a7044:	eb07 0a04 	add.w	sl, r7, r4
 80a7048:	f1c3 0800 	rsb	r8, r3, #0
 80a704c:	f001 f88d 	bl	80a816a <__tz_unlock>
 80a7050:	233c      	movs	r3, #60	; 0x3c
 80a7052:	fb98 f0f3 	sdiv	r0, r8, r3
 80a7056:	9307      	str	r3, [sp, #28]
 80a7058:	f001 fe0e 	bl	80a8c78 <labs>
 80a705c:	9b07      	ldr	r3, [sp, #28]
 80a705e:	ebc4 0b06 	rsb	fp, r4, r6
 80a7062:	fb90 f2f3 	sdiv	r2, r0, r3
 80a7066:	fb02 0013 	mls	r0, r2, r3, r0
 80a706a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80a706e:	9000      	str	r0, [sp, #0]
 80a7070:	fb98 f3f3 	sdiv	r3, r8, r3
 80a7074:	4659      	mov	r1, fp
 80a7076:	4650      	mov	r0, sl
 80a7078:	4a24      	ldr	r2, [pc, #144]	; (80a710c <strftime+0x960>)
 80a707a:	f7fc f95d 	bl	80a3338 <sniprintf>
 80a707e:	e4fa      	b.n	80a6a76 <strftime+0x2ca>
 80a7080:	4404      	add	r4, r0
 80a7082:	42a6      	cmp	r6, r4
 80a7084:	d831      	bhi.n	80a70ea <strftime+0x93e>
 80a7086:	e03b      	b.n	80a7100 <strftime+0x954>
 80a7088:	6a2b      	ldr	r3, [r5, #32]
 80a708a:	2b00      	cmp	r3, #0
 80a708c:	db2d      	blt.n	80a70ea <strftime+0x93e>
 80a708e:	f001 f86b 	bl	80a8168 <__tz_lock>
 80a7092:	9b06      	ldr	r3, [sp, #24]
 80a7094:	b91b      	cbnz	r3, 80a709e <strftime+0x8f2>
 80a7096:	f001 f869 	bl	80a816c <_tzset_unlocked>
 80a709a:	2301      	movs	r3, #1
 80a709c:	9306      	str	r3, [sp, #24]
 80a709e:	6a2b      	ldr	r3, [r5, #32]
 80a70a0:	4a1b      	ldr	r2, [pc, #108]	; (80a7110 <strftime+0x964>)
 80a70a2:	2b00      	cmp	r3, #0
 80a70a4:	bfd4      	ite	le
 80a70a6:	2300      	movle	r3, #0
 80a70a8:	2301      	movgt	r3, #1
 80a70aa:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
 80a70ae:	4640      	mov	r0, r8
 80a70b0:	f000 f830 	bl	80a7114 <strlen>
 80a70b4:	f108 38ff 	add.w	r8, r8, #4294967295
 80a70b8:	193b      	adds	r3, r7, r4
 80a70ba:	4420      	add	r0, r4
 80a70bc:	4284      	cmp	r4, r0
 80a70be:	d00b      	beq.n	80a70d8 <strftime+0x92c>
 80a70c0:	9a02      	ldr	r2, [sp, #8]
 80a70c2:	4294      	cmp	r4, r2
 80a70c4:	d205      	bcs.n	80a70d2 <strftime+0x926>
 80a70c6:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 80a70ca:	3401      	adds	r4, #1
 80a70cc:	f803 2b01 	strb.w	r2, [r3], #1
 80a70d0:	e7f4      	b.n	80a70bc <strftime+0x910>
 80a70d2:	f001 f84a 	bl	80a816a <__tz_unlock>
 80a70d6:	e013      	b.n	80a7100 <strftime+0x954>
 80a70d8:	f001 f847 	bl	80a816a <__tz_unlock>
 80a70dc:	e005      	b.n	80a70ea <strftime+0x93e>
 80a70de:	9b02      	ldr	r3, [sp, #8]
 80a70e0:	429c      	cmp	r4, r3
 80a70e2:	d20d      	bcs.n	80a7100 <strftime+0x954>
 80a70e4:	2325      	movs	r3, #37	; 0x25
 80a70e6:	553b      	strb	r3, [r7, r4]
 80a70e8:	3401      	adds	r4, #1
 80a70ea:	f899 3000 	ldrb.w	r3, [r9]
 80a70ee:	b11b      	cbz	r3, 80a70f8 <strftime+0x94c>
 80a70f0:	f109 0901 	add.w	r9, r9, #1
 80a70f4:	f7ff bb69 	b.w	80a67ca <strftime+0x1e>
 80a70f8:	b126      	cbz	r6, 80a7104 <strftime+0x958>
 80a70fa:	2300      	movs	r3, #0
 80a70fc:	553b      	strb	r3, [r7, r4]
 80a70fe:	e001      	b.n	80a7104 <strftime+0x958>
 80a7100:	2000      	movs	r0, #0
 80a7102:	e000      	b.n	80a7106 <strftime+0x95a>
 80a7104:	4620      	mov	r0, r4
 80a7106:	b013      	add	sp, #76	; 0x4c
 80a7108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a710c:	080a9f9b 	.word	0x080a9f9b
 80a7110:	200000b0 	.word	0x200000b0

080a7114 <strlen>:
 80a7114:	4603      	mov	r3, r0
 80a7116:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a711a:	2a00      	cmp	r2, #0
 80a711c:	d1fb      	bne.n	80a7116 <strlen+0x2>
 80a711e:	1a18      	subs	r0, r3, r0
 80a7120:	3801      	subs	r0, #1
 80a7122:	4770      	bx	lr

080a7124 <strncmp>:
 80a7124:	b530      	push	{r4, r5, lr}
 80a7126:	b182      	cbz	r2, 80a714a <strncmp+0x26>
 80a7128:	1e45      	subs	r5, r0, #1
 80a712a:	3901      	subs	r1, #1
 80a712c:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80a7130:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80a7134:	42a3      	cmp	r3, r4
 80a7136:	d106      	bne.n	80a7146 <strncmp+0x22>
 80a7138:	43ec      	mvns	r4, r5
 80a713a:	4414      	add	r4, r2
 80a713c:	42e0      	cmn	r0, r4
 80a713e:	d001      	beq.n	80a7144 <strncmp+0x20>
 80a7140:	2b00      	cmp	r3, #0
 80a7142:	d1f3      	bne.n	80a712c <strncmp+0x8>
 80a7144:	461c      	mov	r4, r3
 80a7146:	1b18      	subs	r0, r3, r4
 80a7148:	bd30      	pop	{r4, r5, pc}
 80a714a:	4610      	mov	r0, r2
 80a714c:	bd30      	pop	{r4, r5, pc}

080a714e <strncpy>:
 80a714e:	4603      	mov	r3, r0
 80a7150:	b510      	push	{r4, lr}
 80a7152:	b142      	cbz	r2, 80a7166 <strncpy+0x18>
 80a7154:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a7158:	3a01      	subs	r2, #1
 80a715a:	f803 4b01 	strb.w	r4, [r3], #1
 80a715e:	2c00      	cmp	r4, #0
 80a7160:	d1f7      	bne.n	80a7152 <strncpy+0x4>
 80a7162:	441a      	add	r2, r3
 80a7164:	e000      	b.n	80a7168 <strncpy+0x1a>
 80a7166:	bd10      	pop	{r4, pc}
 80a7168:	4293      	cmp	r3, r2
 80a716a:	d002      	beq.n	80a7172 <strncpy+0x24>
 80a716c:	f803 4b01 	strb.w	r4, [r3], #1
 80a7170:	e7fa      	b.n	80a7168 <strncpy+0x1a>
 80a7172:	bd10      	pop	{r4, pc}

080a7174 <sulp>:
 80a7174:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a7178:	460f      	mov	r7, r1
 80a717a:	4690      	mov	r8, r2
 80a717c:	f002 f846 	bl	80a920c <__ulp>
 80a7180:	4604      	mov	r4, r0
 80a7182:	460d      	mov	r5, r1
 80a7184:	f1b8 0f00 	cmp.w	r8, #0
 80a7188:	d011      	beq.n	80a71ae <sulp+0x3a>
 80a718a:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80a718e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80a7192:	2b00      	cmp	r3, #0
 80a7194:	dd0b      	ble.n	80a71ae <sulp+0x3a>
 80a7196:	051b      	lsls	r3, r3, #20
 80a7198:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80a719c:	2400      	movs	r4, #0
 80a719e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80a71a2:	4622      	mov	r2, r4
 80a71a4:	462b      	mov	r3, r5
 80a71a6:	f7fe f90f 	bl	80a53c8 <__aeabi_dmul>
 80a71aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a71ae:	4620      	mov	r0, r4
 80a71b0:	4629      	mov	r1, r5
 80a71b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080a71b8 <_strtod_r>:
 80a71b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a71bc:	4682      	mov	sl, r0
 80a71be:	460c      	mov	r4, r1
 80a71c0:	b09d      	sub	sp, #116	; 0x74
 80a71c2:	2300      	movs	r3, #0
 80a71c4:	9213      	str	r2, [sp, #76]	; 0x4c
 80a71c6:	9318      	str	r3, [sp, #96]	; 0x60
 80a71c8:	f04f 0800 	mov.w	r8, #0
 80a71cc:	f04f 0900 	mov.w	r9, #0
 80a71d0:	9117      	str	r1, [sp, #92]	; 0x5c
 80a71d2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a71d4:	781a      	ldrb	r2, [r3, #0]
 80a71d6:	2a0d      	cmp	r2, #13
 80a71d8:	d805      	bhi.n	80a71e6 <_strtod_r+0x2e>
 80a71da:	2a09      	cmp	r2, #9
 80a71dc:	d213      	bcs.n	80a7206 <_strtod_r+0x4e>
 80a71de:	2a00      	cmp	r2, #0
 80a71e0:	f000 81ad 	beq.w	80a753e <_strtod_r+0x386>
 80a71e4:	e012      	b.n	80a720c <_strtod_r+0x54>
 80a71e6:	2a2b      	cmp	r2, #43	; 0x2b
 80a71e8:	d004      	beq.n	80a71f4 <_strtod_r+0x3c>
 80a71ea:	2a2d      	cmp	r2, #45	; 0x2d
 80a71ec:	d004      	beq.n	80a71f8 <_strtod_r+0x40>
 80a71ee:	2a20      	cmp	r2, #32
 80a71f0:	d10c      	bne.n	80a720c <_strtod_r+0x54>
 80a71f2:	e008      	b.n	80a7206 <_strtod_r+0x4e>
 80a71f4:	2200      	movs	r2, #0
 80a71f6:	e000      	b.n	80a71fa <_strtod_r+0x42>
 80a71f8:	2201      	movs	r2, #1
 80a71fa:	920c      	str	r2, [sp, #48]	; 0x30
 80a71fc:	1c5a      	adds	r2, r3, #1
 80a71fe:	9217      	str	r2, [sp, #92]	; 0x5c
 80a7200:	785b      	ldrb	r3, [r3, #1]
 80a7202:	b92b      	cbnz	r3, 80a7210 <_strtod_r+0x58>
 80a7204:	e19b      	b.n	80a753e <_strtod_r+0x386>
 80a7206:	3301      	adds	r3, #1
 80a7208:	9317      	str	r3, [sp, #92]	; 0x5c
 80a720a:	e7e2      	b.n	80a71d2 <_strtod_r+0x1a>
 80a720c:	2300      	movs	r3, #0
 80a720e:	930c      	str	r3, [sp, #48]	; 0x30
 80a7210:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 80a7212:	782b      	ldrb	r3, [r5, #0]
 80a7214:	2b30      	cmp	r3, #48	; 0x30
 80a7216:	d15c      	bne.n	80a72d2 <_strtod_r+0x11a>
 80a7218:	786b      	ldrb	r3, [r5, #1]
 80a721a:	2b58      	cmp	r3, #88	; 0x58
 80a721c:	d001      	beq.n	80a7222 <_strtod_r+0x6a>
 80a721e:	2b78      	cmp	r3, #120	; 0x78
 80a7220:	d14c      	bne.n	80a72bc <_strtod_r+0x104>
 80a7222:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80a7224:	4aa8      	ldr	r2, [pc, #672]	; (80a74c8 <_strtod_r+0x310>)
 80a7226:	9301      	str	r3, [sp, #4]
 80a7228:	ab18      	add	r3, sp, #96	; 0x60
 80a722a:	9300      	str	r3, [sp, #0]
 80a722c:	a917      	add	r1, sp, #92	; 0x5c
 80a722e:	ab19      	add	r3, sp, #100	; 0x64
 80a7230:	4650      	mov	r0, sl
 80a7232:	f001 f970 	bl	80a8516 <__gethex>
 80a7236:	f010 0607 	ands.w	r6, r0, #7
 80a723a:	4604      	mov	r4, r0
 80a723c:	f000 8585 	beq.w	80a7d4a <_strtod_r+0xb92>
 80a7240:	2e06      	cmp	r6, #6
 80a7242:	d105      	bne.n	80a7250 <_strtod_r+0x98>
 80a7244:	3501      	adds	r5, #1
 80a7246:	2300      	movs	r3, #0
 80a7248:	9517      	str	r5, [sp, #92]	; 0x5c
 80a724a:	930c      	str	r3, [sp, #48]	; 0x30
 80a724c:	f000 bd7d 	b.w	80a7d4a <_strtod_r+0xb92>
 80a7250:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80a7252:	b13a      	cbz	r2, 80a7264 <_strtod_r+0xac>
 80a7254:	2135      	movs	r1, #53	; 0x35
 80a7256:	a81a      	add	r0, sp, #104	; 0x68
 80a7258:	f002 f8bf 	bl	80a93da <__copybits>
 80a725c:	9918      	ldr	r1, [sp, #96]	; 0x60
 80a725e:	4650      	mov	r0, sl
 80a7260:	f001 fd43 	bl	80a8cea <_Bfree>
 80a7264:	2e06      	cmp	r6, #6
 80a7266:	d822      	bhi.n	80a72ae <_strtod_r+0xf6>
 80a7268:	e8df f006 	tbb	[pc, r6]
 80a726c:	18080d04 	.word	0x18080d04
 80a7270:	0d1d      	.short	0x0d1d
 80a7272:	04          	.byte	0x04
 80a7273:	00          	.byte	0x00
 80a7274:	f04f 0900 	mov.w	r9, #0
 80a7278:	46c8      	mov	r8, r9
 80a727a:	e018      	b.n	80a72ae <_strtod_r+0xf6>
 80a727c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80a7280:	f8dd 906c 	ldr.w	r9, [sp, #108]	; 0x6c
 80a7284:	e013      	b.n	80a72ae <_strtod_r+0xf6>
 80a7286:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80a7288:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80a728a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80a728e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80a7292:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80a7296:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80a729a:	e008      	b.n	80a72ae <_strtod_r+0xf6>
 80a729c:	f8df 922c 	ldr.w	r9, [pc, #556]	; 80a74cc <_strtod_r+0x314>
 80a72a0:	f04f 0800 	mov.w	r8, #0
 80a72a4:	e003      	b.n	80a72ae <_strtod_r+0xf6>
 80a72a6:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80a72aa:	f04f 38ff 	mov.w	r8, #4294967295
 80a72ae:	0721      	lsls	r1, r4, #28
 80a72b0:	f140 854b 	bpl.w	80a7d4a <_strtod_r+0xb92>
 80a72b4:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 80a72b8:	f000 bd47 	b.w	80a7d4a <_strtod_r+0xb92>
 80a72bc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a72be:	1c5a      	adds	r2, r3, #1
 80a72c0:	9217      	str	r2, [sp, #92]	; 0x5c
 80a72c2:	785b      	ldrb	r3, [r3, #1]
 80a72c4:	2b30      	cmp	r3, #48	; 0x30
 80a72c6:	d0f9      	beq.n	80a72bc <_strtod_r+0x104>
 80a72c8:	2b00      	cmp	r3, #0
 80a72ca:	f000 853e 	beq.w	80a7d4a <_strtod_r+0xb92>
 80a72ce:	2301      	movs	r3, #1
 80a72d0:	e000      	b.n	80a72d4 <_strtod_r+0x11c>
 80a72d2:	2300      	movs	r3, #0
 80a72d4:	9305      	str	r3, [sp, #20]
 80a72d6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a72d8:	220a      	movs	r2, #10
 80a72da:	9306      	str	r3, [sp, #24]
 80a72dc:	2300      	movs	r3, #0
 80a72de:	469b      	mov	fp, r3
 80a72e0:	9302      	str	r3, [sp, #8]
 80a72e2:	9304      	str	r3, [sp, #16]
 80a72e4:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 80a72e6:	782e      	ldrb	r6, [r5, #0]
 80a72e8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80a72ec:	b2d9      	uxtb	r1, r3
 80a72ee:	2909      	cmp	r1, #9
 80a72f0:	d811      	bhi.n	80a7316 <_strtod_r+0x15e>
 80a72f2:	f1bb 0f08 	cmp.w	fp, #8
 80a72f6:	bfd5      	itete	le
 80a72f8:	9904      	ldrle	r1, [sp, #16]
 80a72fa:	9902      	ldrgt	r1, [sp, #8]
 80a72fc:	fb02 3301 	mlale	r3, r2, r1, r3
 80a7300:	fb02 3301 	mlagt	r3, r2, r1, r3
 80a7304:	f105 0501 	add.w	r5, r5, #1
 80a7308:	bfd4      	ite	le
 80a730a:	9304      	strle	r3, [sp, #16]
 80a730c:	9302      	strgt	r3, [sp, #8]
 80a730e:	f10b 0b01 	add.w	fp, fp, #1
 80a7312:	9517      	str	r5, [sp, #92]	; 0x5c
 80a7314:	e7e6      	b.n	80a72e4 <_strtod_r+0x12c>
 80a7316:	4650      	mov	r0, sl
 80a7318:	f7ff f996 	bl	80a6648 <_localeconv_r>
 80a731c:	6807      	ldr	r7, [r0, #0]
 80a731e:	4650      	mov	r0, sl
 80a7320:	f7ff f992 	bl	80a6648 <_localeconv_r>
 80a7324:	6800      	ldr	r0, [r0, #0]
 80a7326:	f7ff fef5 	bl	80a7114 <strlen>
 80a732a:	4639      	mov	r1, r7
 80a732c:	4602      	mov	r2, r0
 80a732e:	4628      	mov	r0, r5
 80a7330:	f7ff fef8 	bl	80a7124 <strncmp>
 80a7334:	4607      	mov	r7, r0
 80a7336:	b128      	cbz	r0, 80a7344 <_strtod_r+0x18c>
 80a7338:	2000      	movs	r0, #0
 80a733a:	4633      	mov	r3, r6
 80a733c:	465d      	mov	r5, fp
 80a733e:	4602      	mov	r2, r0
 80a7340:	4601      	mov	r1, r0
 80a7342:	e05a      	b.n	80a73fa <_strtod_r+0x242>
 80a7344:	4650      	mov	r0, sl
 80a7346:	f7ff f97f 	bl	80a6648 <_localeconv_r>
 80a734a:	6800      	ldr	r0, [r0, #0]
 80a734c:	f7ff fee2 	bl	80a7114 <strlen>
 80a7350:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a7352:	181a      	adds	r2, r3, r0
 80a7354:	9217      	str	r2, [sp, #92]	; 0x5c
 80a7356:	5c1b      	ldrb	r3, [r3, r0]
 80a7358:	f1bb 0f00 	cmp.w	fp, #0
 80a735c:	d145      	bne.n	80a73ea <_strtod_r+0x232>
 80a735e:	4658      	mov	r0, fp
 80a7360:	2b30      	cmp	r3, #48	; 0x30
 80a7362:	d105      	bne.n	80a7370 <_strtod_r+0x1b8>
 80a7364:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a7366:	3001      	adds	r0, #1
 80a7368:	1c5a      	adds	r2, r3, #1
 80a736a:	9217      	str	r2, [sp, #92]	; 0x5c
 80a736c:	785b      	ldrb	r3, [r3, #1]
 80a736e:	e7f7      	b.n	80a7360 <_strtod_r+0x1a8>
 80a7370:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80a7374:	2a08      	cmp	r2, #8
 80a7376:	d846      	bhi.n	80a7406 <_strtod_r+0x24e>
 80a7378:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80a737a:	9206      	str	r2, [sp, #24]
 80a737c:	4602      	mov	r2, r0
 80a737e:	2000      	movs	r0, #0
 80a7380:	4605      	mov	r5, r0
 80a7382:	3b30      	subs	r3, #48	; 0x30
 80a7384:	f100 0101 	add.w	r1, r0, #1
 80a7388:	d029      	beq.n	80a73de <_strtod_r+0x226>
 80a738a:	440a      	add	r2, r1
 80a738c:	4629      	mov	r1, r5
 80a738e:	eb05 0c00 	add.w	ip, r5, r0
 80a7392:	260a      	movs	r6, #10
 80a7394:	4561      	cmp	r1, ip
 80a7396:	d00f      	beq.n	80a73b8 <_strtod_r+0x200>
 80a7398:	3101      	adds	r1, #1
 80a739a:	f101 3eff 	add.w	lr, r1, #4294967295
 80a739e:	f1be 0f08 	cmp.w	lr, #8
 80a73a2:	dc03      	bgt.n	80a73ac <_strtod_r+0x1f4>
 80a73a4:	9f04      	ldr	r7, [sp, #16]
 80a73a6:	4377      	muls	r7, r6
 80a73a8:	9704      	str	r7, [sp, #16]
 80a73aa:	e7f3      	b.n	80a7394 <_strtod_r+0x1dc>
 80a73ac:	2910      	cmp	r1, #16
 80a73ae:	bfde      	ittt	le
 80a73b0:	9f02      	ldrle	r7, [sp, #8]
 80a73b2:	4377      	mulle	r7, r6
 80a73b4:	9702      	strle	r7, [sp, #8]
 80a73b6:	e7ed      	b.n	80a7394 <_strtod_r+0x1dc>
 80a73b8:	4428      	add	r0, r5
 80a73ba:	2808      	cmp	r0, #8
 80a73bc:	f100 0501 	add.w	r5, r0, #1
 80a73c0:	dc05      	bgt.n	80a73ce <_strtod_r+0x216>
 80a73c2:	9804      	ldr	r0, [sp, #16]
 80a73c4:	210a      	movs	r1, #10
 80a73c6:	fb01 3300 	mla	r3, r1, r0, r3
 80a73ca:	9304      	str	r3, [sp, #16]
 80a73cc:	e006      	b.n	80a73dc <_strtod_r+0x224>
 80a73ce:	2d10      	cmp	r5, #16
 80a73d0:	bfdf      	itttt	le
 80a73d2:	9802      	ldrle	r0, [sp, #8]
 80a73d4:	210a      	movle	r1, #10
 80a73d6:	fb01 3300 	mlale	r3, r1, r0, r3
 80a73da:	9302      	strle	r3, [sp, #8]
 80a73dc:	2100      	movs	r1, #0
 80a73de:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a73e0:	1c58      	adds	r0, r3, #1
 80a73e2:	9017      	str	r0, [sp, #92]	; 0x5c
 80a73e4:	785b      	ldrb	r3, [r3, #1]
 80a73e6:	4608      	mov	r0, r1
 80a73e8:	e002      	b.n	80a73f0 <_strtod_r+0x238>
 80a73ea:	465d      	mov	r5, fp
 80a73ec:	4638      	mov	r0, r7
 80a73ee:	463a      	mov	r2, r7
 80a73f0:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80a73f4:	2909      	cmp	r1, #9
 80a73f6:	d9c4      	bls.n	80a7382 <_strtod_r+0x1ca>
 80a73f8:	2101      	movs	r1, #1
 80a73fa:	2b65      	cmp	r3, #101	; 0x65
 80a73fc:	d001      	beq.n	80a7402 <_strtod_r+0x24a>
 80a73fe:	2b45      	cmp	r3, #69	; 0x45
 80a7400:	d14f      	bne.n	80a74a2 <_strtod_r+0x2ea>
 80a7402:	b96d      	cbnz	r5, 80a7420 <_strtod_r+0x268>
 80a7404:	e004      	b.n	80a7410 <_strtod_r+0x258>
 80a7406:	2b65      	cmp	r3, #101	; 0x65
 80a7408:	f040 84ad 	bne.w	80a7d66 <_strtod_r+0xbae>
 80a740c:	2200      	movs	r2, #0
 80a740e:	2101      	movs	r1, #1
 80a7410:	b928      	cbnz	r0, 80a741e <_strtod_r+0x266>
 80a7412:	9b05      	ldr	r3, [sp, #20]
 80a7414:	2b00      	cmp	r3, #0
 80a7416:	f000 8092 	beq.w	80a753e <_strtod_r+0x386>
 80a741a:	4605      	mov	r5, r0
 80a741c:	e000      	b.n	80a7420 <_strtod_r+0x268>
 80a741e:	2500      	movs	r5, #0
 80a7420:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80a7422:	1c63      	adds	r3, r4, #1
 80a7424:	9317      	str	r3, [sp, #92]	; 0x5c
 80a7426:	7863      	ldrb	r3, [r4, #1]
 80a7428:	2b2b      	cmp	r3, #43	; 0x2b
 80a742a:	d006      	beq.n	80a743a <_strtod_r+0x282>
 80a742c:	2b2d      	cmp	r3, #45	; 0x2d
 80a742e:	d002      	beq.n	80a7436 <_strtod_r+0x27e>
 80a7430:	2600      	movs	r6, #0
 80a7432:	9603      	str	r6, [sp, #12]
 80a7434:	e006      	b.n	80a7444 <_strtod_r+0x28c>
 80a7436:	2301      	movs	r3, #1
 80a7438:	e000      	b.n	80a743c <_strtod_r+0x284>
 80a743a:	2300      	movs	r3, #0
 80a743c:	9303      	str	r3, [sp, #12]
 80a743e:	1ca3      	adds	r3, r4, #2
 80a7440:	9317      	str	r3, [sp, #92]	; 0x5c
 80a7442:	78a3      	ldrb	r3, [r4, #2]
 80a7444:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 80a7448:	2e09      	cmp	r6, #9
 80a744a:	d829      	bhi.n	80a74a0 <_strtod_r+0x2e8>
 80a744c:	2b30      	cmp	r3, #48	; 0x30
 80a744e:	d104      	bne.n	80a745a <_strtod_r+0x2a2>
 80a7450:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a7452:	1c5e      	adds	r6, r3, #1
 80a7454:	9617      	str	r6, [sp, #92]	; 0x5c
 80a7456:	785b      	ldrb	r3, [r3, #1]
 80a7458:	e7f8      	b.n	80a744c <_strtod_r+0x294>
 80a745a:	f1a3 0631 	sub.w	r6, r3, #49	; 0x31
 80a745e:	2e08      	cmp	r6, #8
 80a7460:	d81f      	bhi.n	80a74a2 <_strtod_r+0x2ea>
 80a7462:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80a7466:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a7468:	461f      	mov	r7, r3
 80a746a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a746c:	1c5e      	adds	r6, r3, #1
 80a746e:	9617      	str	r6, [sp, #92]	; 0x5c
 80a7470:	785b      	ldrb	r3, [r3, #1]
 80a7472:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 80a7476:	f1bc 0f09 	cmp.w	ip, #9
 80a747a:	d805      	bhi.n	80a7488 <_strtod_r+0x2d0>
 80a747c:	260a      	movs	r6, #10
 80a747e:	fb06 3e0e 	mla	lr, r6, lr, r3
 80a7482:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80a7486:	e7f0      	b.n	80a746a <_strtod_r+0x2b2>
 80a7488:	1bf6      	subs	r6, r6, r7
 80a748a:	2e08      	cmp	r6, #8
 80a748c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80a7490:	dc02      	bgt.n	80a7498 <_strtod_r+0x2e0>
 80a7492:	4576      	cmp	r6, lr
 80a7494:	bfa8      	it	ge
 80a7496:	4676      	movge	r6, lr
 80a7498:	9f03      	ldr	r7, [sp, #12]
 80a749a:	b11f      	cbz	r7, 80a74a4 <_strtod_r+0x2ec>
 80a749c:	4276      	negs	r6, r6
 80a749e:	e001      	b.n	80a74a4 <_strtod_r+0x2ec>
 80a74a0:	9417      	str	r4, [sp, #92]	; 0x5c
 80a74a2:	2600      	movs	r6, #0
 80a74a4:	2d00      	cmp	r5, #0
 80a74a6:	d152      	bne.n	80a754e <_strtod_r+0x396>
 80a74a8:	2800      	cmp	r0, #0
 80a74aa:	f040 844e 	bne.w	80a7d4a <_strtod_r+0xb92>
 80a74ae:	9a05      	ldr	r2, [sp, #20]
 80a74b0:	2a00      	cmp	r2, #0
 80a74b2:	f040 844a 	bne.w	80a7d4a <_strtod_r+0xb92>
 80a74b6:	2900      	cmp	r1, #0
 80a74b8:	d141      	bne.n	80a753e <_strtod_r+0x386>
 80a74ba:	2b4e      	cmp	r3, #78	; 0x4e
 80a74bc:	d020      	beq.n	80a7500 <_strtod_r+0x348>
 80a74be:	dc07      	bgt.n	80a74d0 <_strtod_r+0x318>
 80a74c0:	2b49      	cmp	r3, #73	; 0x49
 80a74c2:	d00a      	beq.n	80a74da <_strtod_r+0x322>
 80a74c4:	e03b      	b.n	80a753e <_strtod_r+0x386>
 80a74c6:	bf00      	nop
 80a74c8:	080a9fa8 	.word	0x080a9fa8
 80a74cc:	7ff00000 	.word	0x7ff00000
 80a74d0:	2b69      	cmp	r3, #105	; 0x69
 80a74d2:	d002      	beq.n	80a74da <_strtod_r+0x322>
 80a74d4:	2b6e      	cmp	r3, #110	; 0x6e
 80a74d6:	d013      	beq.n	80a7500 <_strtod_r+0x348>
 80a74d8:	e031      	b.n	80a753e <_strtod_r+0x386>
 80a74da:	49aa      	ldr	r1, [pc, #680]	; (80a7784 <_strtod_r+0x5cc>)
 80a74dc:	a817      	add	r0, sp, #92	; 0x5c
 80a74de:	f001 fa4b 	bl	80a8978 <__match>
 80a74e2:	b360      	cbz	r0, 80a753e <_strtod_r+0x386>
 80a74e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a74e6:	49a8      	ldr	r1, [pc, #672]	; (80a7788 <_strtod_r+0x5d0>)
 80a74e8:	3b01      	subs	r3, #1
 80a74ea:	a817      	add	r0, sp, #92	; 0x5c
 80a74ec:	9317      	str	r3, [sp, #92]	; 0x5c
 80a74ee:	f001 fa43 	bl	80a8978 <__match>
 80a74f2:	b910      	cbnz	r0, 80a74fa <_strtod_r+0x342>
 80a74f4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a74f6:	3301      	adds	r3, #1
 80a74f8:	9317      	str	r3, [sp, #92]	; 0x5c
 80a74fa:	f8df 92a8 	ldr.w	r9, [pc, #680]	; 80a77a4 <_strtod_r+0x5ec>
 80a74fe:	e01a      	b.n	80a7536 <_strtod_r+0x37e>
 80a7500:	49a2      	ldr	r1, [pc, #648]	; (80a778c <_strtod_r+0x5d4>)
 80a7502:	a817      	add	r0, sp, #92	; 0x5c
 80a7504:	f001 fa38 	bl	80a8978 <__match>
 80a7508:	b1c8      	cbz	r0, 80a753e <_strtod_r+0x386>
 80a750a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a750c:	781b      	ldrb	r3, [r3, #0]
 80a750e:	2b28      	cmp	r3, #40	; 0x28
 80a7510:	d10f      	bne.n	80a7532 <_strtod_r+0x37a>
 80a7512:	aa1a      	add	r2, sp, #104	; 0x68
 80a7514:	499e      	ldr	r1, [pc, #632]	; (80a7790 <_strtod_r+0x5d8>)
 80a7516:	a817      	add	r0, sp, #92	; 0x5c
 80a7518:	f001 fa41 	bl	80a899e <__hexnan>
 80a751c:	2805      	cmp	r0, #5
 80a751e:	d108      	bne.n	80a7532 <_strtod_r+0x37a>
 80a7520:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80a7522:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80a7526:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80a752a:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80a752e:	f000 bc0c 	b.w	80a7d4a <_strtod_r+0xb92>
 80a7532:	f8df 9274 	ldr.w	r9, [pc, #628]	; 80a77a8 <_strtod_r+0x5f0>
 80a7536:	f04f 0800 	mov.w	r8, #0
 80a753a:	f000 bc06 	b.w	80a7d4a <_strtod_r+0xb92>
 80a753e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80a7540:	9417      	str	r4, [sp, #92]	; 0x5c
 80a7542:	2b00      	cmp	r3, #0
 80a7544:	f000 840c 	beq.w	80a7d60 <_strtod_r+0xba8>
 80a7548:	2300      	movs	r3, #0
 80a754a:	930c      	str	r3, [sp, #48]	; 0x30
 80a754c:	e3ff      	b.n	80a7d4e <_strtod_r+0xb96>
 80a754e:	462c      	mov	r4, r5
 80a7550:	f1bb 0f00 	cmp.w	fp, #0
 80a7554:	bf08      	it	eq
 80a7556:	46ab      	moveq	fp, r5
 80a7558:	9804      	ldr	r0, [sp, #16]
 80a755a:	2d10      	cmp	r5, #16
 80a755c:	bfa8      	it	ge
 80a755e:	2410      	movge	r4, #16
 80a7560:	1ab7      	subs	r7, r6, r2
 80a7562:	f7fd febb 	bl	80a52dc <__aeabi_ui2d>
 80a7566:	2c09      	cmp	r4, #9
 80a7568:	4680      	mov	r8, r0
 80a756a:	4689      	mov	r9, r1
 80a756c:	dd13      	ble.n	80a7596 <_strtod_r+0x3de>
 80a756e:	4b89      	ldr	r3, [pc, #548]	; (80a7794 <_strtod_r+0x5dc>)
 80a7570:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80a7574:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80a7578:	f7fd ff26 	bl	80a53c8 <__aeabi_dmul>
 80a757c:	4680      	mov	r8, r0
 80a757e:	9802      	ldr	r0, [sp, #8]
 80a7580:	4689      	mov	r9, r1
 80a7582:	f7fd feab 	bl	80a52dc <__aeabi_ui2d>
 80a7586:	4602      	mov	r2, r0
 80a7588:	460b      	mov	r3, r1
 80a758a:	4640      	mov	r0, r8
 80a758c:	4649      	mov	r1, r9
 80a758e:	f7fd fd69 	bl	80a5064 <__adddf3>
 80a7592:	4680      	mov	r8, r0
 80a7594:	4689      	mov	r9, r1
 80a7596:	2d0f      	cmp	r5, #15
 80a7598:	dc33      	bgt.n	80a7602 <_strtod_r+0x44a>
 80a759a:	2f00      	cmp	r7, #0
 80a759c:	f000 83d5 	beq.w	80a7d4a <_strtod_r+0xb92>
 80a75a0:	dd22      	ble.n	80a75e8 <_strtod_r+0x430>
 80a75a2:	2f16      	cmp	r7, #22
 80a75a4:	dc07      	bgt.n	80a75b6 <_strtod_r+0x3fe>
 80a75a6:	4d7b      	ldr	r5, [pc, #492]	; (80a7794 <_strtod_r+0x5dc>)
 80a75a8:	4642      	mov	r2, r8
 80a75aa:	eb05 01c7 	add.w	r1, r5, r7, lsl #3
 80a75ae:	464b      	mov	r3, r9
 80a75b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a75b4:	e013      	b.n	80a75de <_strtod_r+0x426>
 80a75b6:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80a75ba:	429f      	cmp	r7, r3
 80a75bc:	dc21      	bgt.n	80a7602 <_strtod_r+0x44a>
 80a75be:	4c75      	ldr	r4, [pc, #468]	; (80a7794 <_strtod_r+0x5dc>)
 80a75c0:	f1c5 050f 	rsb	r5, r5, #15
 80a75c4:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80a75c8:	1b7d      	subs	r5, r7, r5
 80a75ca:	4642      	mov	r2, r8
 80a75cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a75d0:	464b      	mov	r3, r9
 80a75d2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80a75d6:	f7fd fef7 	bl	80a53c8 <__aeabi_dmul>
 80a75da:	e9d4 2300 	ldrd	r2, r3, [r4]
 80a75de:	f7fd fef3 	bl	80a53c8 <__aeabi_dmul>
 80a75e2:	4680      	mov	r8, r0
 80a75e4:	4689      	mov	r9, r1
 80a75e6:	e3b0      	b.n	80a7d4a <_strtod_r+0xb92>
 80a75e8:	f117 0f16 	cmn.w	r7, #22
 80a75ec:	db09      	blt.n	80a7602 <_strtod_r+0x44a>
 80a75ee:	4d69      	ldr	r5, [pc, #420]	; (80a7794 <_strtod_r+0x5dc>)
 80a75f0:	4640      	mov	r0, r8
 80a75f2:	eba5 03c7 	sub.w	r3, r5, r7, lsl #3
 80a75f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a75fa:	4649      	mov	r1, r9
 80a75fc:	f7fe f80e 	bl	80a561c <__aeabi_ddiv>
 80a7600:	e7ef      	b.n	80a75e2 <_strtod_r+0x42a>
 80a7602:	1b2c      	subs	r4, r5, r4
 80a7604:	443c      	add	r4, r7
 80a7606:	2c00      	cmp	r4, #0
 80a7608:	dd5d      	ble.n	80a76c6 <_strtod_r+0x50e>
 80a760a:	f014 010f 	ands.w	r1, r4, #15
 80a760e:	d00a      	beq.n	80a7626 <_strtod_r+0x46e>
 80a7610:	4b60      	ldr	r3, [pc, #384]	; (80a7794 <_strtod_r+0x5dc>)
 80a7612:	4642      	mov	r2, r8
 80a7614:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80a7618:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a761c:	464b      	mov	r3, r9
 80a761e:	f7fd fed3 	bl	80a53c8 <__aeabi_dmul>
 80a7622:	4680      	mov	r8, r0
 80a7624:	4689      	mov	r9, r1
 80a7626:	f034 040f 	bics.w	r4, r4, #15
 80a762a:	f000 80c1 	beq.w	80a77b0 <_strtod_r+0x5f8>
 80a762e:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
 80a7632:	dd0f      	ble.n	80a7654 <_strtod_r+0x49c>
 80a7634:	f04f 0b00 	mov.w	fp, #0
 80a7638:	f8cd b008 	str.w	fp, [sp, #8]
 80a763c:	f8cd b014 	str.w	fp, [sp, #20]
 80a7640:	f8cd b010 	str.w	fp, [sp, #16]
 80a7644:	2322      	movs	r3, #34	; 0x22
 80a7646:	f8ca 3000 	str.w	r3, [sl]
 80a764a:	f8df 9158 	ldr.w	r9, [pc, #344]	; 80a77a4 <_strtod_r+0x5ec>
 80a764e:	f04f 0800 	mov.w	r8, #0
 80a7652:	e189      	b.n	80a7968 <_strtod_r+0x7b0>
 80a7654:	4640      	mov	r0, r8
 80a7656:	4649      	mov	r1, r9
 80a7658:	2300      	movs	r3, #0
 80a765a:	4e4f      	ldr	r6, [pc, #316]	; (80a7798 <_strtod_r+0x5e0>)
 80a765c:	1124      	asrs	r4, r4, #4
 80a765e:	9302      	str	r3, [sp, #8]
 80a7660:	2c01      	cmp	r4, #1
 80a7662:	dd0c      	ble.n	80a767e <_strtod_r+0x4c6>
 80a7664:	07e2      	lsls	r2, r4, #31
 80a7666:	d504      	bpl.n	80a7672 <_strtod_r+0x4ba>
 80a7668:	e9d6 2300 	ldrd	r2, r3, [r6]
 80a766c:	f7fd feac 	bl	80a53c8 <__aeabi_dmul>
 80a7670:	2301      	movs	r3, #1
 80a7672:	9a02      	ldr	r2, [sp, #8]
 80a7674:	1064      	asrs	r4, r4, #1
 80a7676:	3201      	adds	r2, #1
 80a7678:	9202      	str	r2, [sp, #8]
 80a767a:	3608      	adds	r6, #8
 80a767c:	e7f0      	b.n	80a7660 <_strtod_r+0x4a8>
 80a767e:	b10b      	cbz	r3, 80a7684 <_strtod_r+0x4cc>
 80a7680:	4680      	mov	r8, r0
 80a7682:	4689      	mov	r9, r1
 80a7684:	4b44      	ldr	r3, [pc, #272]	; (80a7798 <_strtod_r+0x5e0>)
 80a7686:	9a02      	ldr	r2, [sp, #8]
 80a7688:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80a768c:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 80a7690:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a7694:	4642      	mov	r2, r8
 80a7696:	464b      	mov	r3, r9
 80a7698:	f7fd fe96 	bl	80a53c8 <__aeabi_dmul>
 80a769c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80a76a0:	4689      	mov	r9, r1
 80a76a2:	460a      	mov	r2, r1
 80a76a4:	0d1b      	lsrs	r3, r3, #20
 80a76a6:	493d      	ldr	r1, [pc, #244]	; (80a779c <_strtod_r+0x5e4>)
 80a76a8:	051b      	lsls	r3, r3, #20
 80a76aa:	428b      	cmp	r3, r1
 80a76ac:	4680      	mov	r8, r0
 80a76ae:	d8c1      	bhi.n	80a7634 <_strtod_r+0x47c>
 80a76b0:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80a76b4:	428b      	cmp	r3, r1
 80a76b6:	bf86      	itte	hi
 80a76b8:	f8df 90f0 	ldrhi.w	r9, [pc, #240]	; 80a77ac <_strtod_r+0x5f4>
 80a76bc:	f04f 38ff 	movhi.w	r8, #4294967295
 80a76c0:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80a76c4:	e074      	b.n	80a77b0 <_strtod_r+0x5f8>
 80a76c6:	d073      	beq.n	80a77b0 <_strtod_r+0x5f8>
 80a76c8:	4264      	negs	r4, r4
 80a76ca:	f014 020f 	ands.w	r2, r4, #15
 80a76ce:	d00a      	beq.n	80a76e6 <_strtod_r+0x52e>
 80a76d0:	4b30      	ldr	r3, [pc, #192]	; (80a7794 <_strtod_r+0x5dc>)
 80a76d2:	4640      	mov	r0, r8
 80a76d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80a76d8:	4649      	mov	r1, r9
 80a76da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a76de:	f7fd ff9d 	bl	80a561c <__aeabi_ddiv>
 80a76e2:	4680      	mov	r8, r0
 80a76e4:	4689      	mov	r9, r1
 80a76e6:	1124      	asrs	r4, r4, #4
 80a76e8:	d062      	beq.n	80a77b0 <_strtod_r+0x5f8>
 80a76ea:	2c1f      	cmp	r4, #31
 80a76ec:	dd08      	ble.n	80a7700 <_strtod_r+0x548>
 80a76ee:	f04f 0b00 	mov.w	fp, #0
 80a76f2:	f8cd b008 	str.w	fp, [sp, #8]
 80a76f6:	f8cd b014 	str.w	fp, [sp, #20]
 80a76fa:	f8cd b010 	str.w	fp, [sp, #16]
 80a76fe:	e12c      	b.n	80a795a <_strtod_r+0x7a2>
 80a7700:	4640      	mov	r0, r8
 80a7702:	4649      	mov	r1, r9
 80a7704:	f014 0f10 	tst.w	r4, #16
 80a7708:	bf0c      	ite	eq
 80a770a:	2300      	moveq	r3, #0
 80a770c:	236a      	movne	r3, #106	; 0x6a
 80a770e:	4e24      	ldr	r6, [pc, #144]	; (80a77a0 <_strtod_r+0x5e8>)
 80a7710:	9303      	str	r3, [sp, #12]
 80a7712:	2300      	movs	r3, #0
 80a7714:	2c00      	cmp	r4, #0
 80a7716:	dd09      	ble.n	80a772c <_strtod_r+0x574>
 80a7718:	07e2      	lsls	r2, r4, #31
 80a771a:	d504      	bpl.n	80a7726 <_strtod_r+0x56e>
 80a771c:	e9d6 2300 	ldrd	r2, r3, [r6]
 80a7720:	f7fd fe52 	bl	80a53c8 <__aeabi_dmul>
 80a7724:	2301      	movs	r3, #1
 80a7726:	1064      	asrs	r4, r4, #1
 80a7728:	3608      	adds	r6, #8
 80a772a:	e7f3      	b.n	80a7714 <_strtod_r+0x55c>
 80a772c:	b10b      	cbz	r3, 80a7732 <_strtod_r+0x57a>
 80a772e:	4680      	mov	r8, r0
 80a7730:	4689      	mov	r9, r1
 80a7732:	9b03      	ldr	r3, [sp, #12]
 80a7734:	b1eb      	cbz	r3, 80a7772 <_strtod_r+0x5ba>
 80a7736:	f3c9 530a 	ubfx	r3, r9, #20, #11
 80a773a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80a773e:	2b00      	cmp	r3, #0
 80a7740:	4649      	mov	r1, r9
 80a7742:	dd16      	ble.n	80a7772 <_strtod_r+0x5ba>
 80a7744:	2b1f      	cmp	r3, #31
 80a7746:	dd0e      	ble.n	80a7766 <_strtod_r+0x5ae>
 80a7748:	2b34      	cmp	r3, #52	; 0x34
 80a774a:	bfde      	ittt	le
 80a774c:	3b20      	suble	r3, #32
 80a774e:	f04f 32ff 	movle.w	r2, #4294967295
 80a7752:	fa02 f303 	lslle.w	r3, r2, r3
 80a7756:	f04f 0800 	mov.w	r8, #0
 80a775a:	bfcc      	ite	gt
 80a775c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80a7760:	ea03 0901 	andle.w	r9, r3, r1
 80a7764:	e005      	b.n	80a7772 <_strtod_r+0x5ba>
 80a7766:	f04f 32ff 	mov.w	r2, #4294967295
 80a776a:	fa02 f303 	lsl.w	r3, r2, r3
 80a776e:	ea03 0808 	and.w	r8, r3, r8
 80a7772:	2200      	movs	r2, #0
 80a7774:	2300      	movs	r3, #0
 80a7776:	4640      	mov	r0, r8
 80a7778:	4649      	mov	r1, r9
 80a777a:	f7fe f88d 	bl	80a5898 <__aeabi_dcmpeq>
 80a777e:	2800      	cmp	r0, #0
 80a7780:	d1b5      	bne.n	80a76ee <_strtod_r+0x536>
 80a7782:	e017      	b.n	80a77b4 <_strtod_r+0x5fc>
 80a7784:	080a9afc 	.word	0x080a9afc
 80a7788:	080a9fbc 	.word	0x080a9fbc
 80a778c:	080aa009 	.word	0x080aa009
 80a7790:	080a9fc4 	.word	0x080a9fc4
 80a7794:	080aa268 	.word	0x080aa268
 80a7798:	080aa330 	.word	0x080aa330
 80a779c:	7ca00000 	.word	0x7ca00000
 80a77a0:	080a9fd8 	.word	0x080a9fd8
 80a77a4:	7ff00000 	.word	0x7ff00000
 80a77a8:	fff80000 	.word	0xfff80000
 80a77ac:	7fefffff 	.word	0x7fefffff
 80a77b0:	2300      	movs	r3, #0
 80a77b2:	9303      	str	r3, [sp, #12]
 80a77b4:	9b04      	ldr	r3, [sp, #16]
 80a77b6:	465a      	mov	r2, fp
 80a77b8:	9300      	str	r3, [sp, #0]
 80a77ba:	9906      	ldr	r1, [sp, #24]
 80a77bc:	462b      	mov	r3, r5
 80a77be:	4650      	mov	r0, sl
 80a77c0:	f001 fae5 	bl	80a8d8e <__s2b>
 80a77c4:	9005      	str	r0, [sp, #20]
 80a77c6:	2800      	cmp	r0, #0
 80a77c8:	f43f af34 	beq.w	80a7634 <_strtod_r+0x47c>
 80a77cc:	2f00      	cmp	r7, #0
 80a77ce:	f1c7 0300 	rsb	r3, r7, #0
 80a77d2:	bfa8      	it	ge
 80a77d4:	2300      	movge	r3, #0
 80a77d6:	930d      	str	r3, [sp, #52]	; 0x34
 80a77d8:	f04f 0b00 	mov.w	fp, #0
 80a77dc:	ea27 73e7 	bic.w	r3, r7, r7, asr #31
 80a77e0:	9312      	str	r3, [sp, #72]	; 0x48
 80a77e2:	f8cd b008 	str.w	fp, [sp, #8]
 80a77e6:	9b05      	ldr	r3, [sp, #20]
 80a77e8:	4650      	mov	r0, sl
 80a77ea:	6859      	ldr	r1, [r3, #4]
 80a77ec:	f001 fa48 	bl	80a8c80 <_Balloc>
 80a77f0:	9004      	str	r0, [sp, #16]
 80a77f2:	2800      	cmp	r0, #0
 80a77f4:	f43f af26 	beq.w	80a7644 <_strtod_r+0x48c>
 80a77f8:	9b05      	ldr	r3, [sp, #20]
 80a77fa:	300c      	adds	r0, #12
 80a77fc:	691a      	ldr	r2, [r3, #16]
 80a77fe:	f103 010c 	add.w	r1, r3, #12
 80a7802:	3202      	adds	r2, #2
 80a7804:	0092      	lsls	r2, r2, #2
 80a7806:	f7fe ff23 	bl	80a6650 <memcpy>
 80a780a:	ab1a      	add	r3, sp, #104	; 0x68
 80a780c:	9301      	str	r3, [sp, #4]
 80a780e:	ab19      	add	r3, sp, #100	; 0x64
 80a7810:	9300      	str	r3, [sp, #0]
 80a7812:	4642      	mov	r2, r8
 80a7814:	464b      	mov	r3, r9
 80a7816:	4650      	mov	r0, sl
 80a7818:	e9cd 8908 	strd	r8, r9, [sp, #32]
 80a781c:	f001 fd67 	bl	80a92ee <__d2b>
 80a7820:	9018      	str	r0, [sp, #96]	; 0x60
 80a7822:	2800      	cmp	r0, #0
 80a7824:	f43f af0e 	beq.w	80a7644 <_strtod_r+0x48c>
 80a7828:	2101      	movs	r1, #1
 80a782a:	4650      	mov	r0, sl
 80a782c:	f001 fb3a 	bl	80a8ea4 <__i2b>
 80a7830:	9002      	str	r0, [sp, #8]
 80a7832:	2800      	cmp	r0, #0
 80a7834:	f43f af06 	beq.w	80a7644 <_strtod_r+0x48c>
 80a7838:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80a783a:	9903      	ldr	r1, [sp, #12]
 80a783c:	2b00      	cmp	r3, #0
 80a783e:	bfac      	ite	ge
 80a7840:	9a0d      	ldrge	r2, [sp, #52]	; 0x34
 80a7842:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80a7844:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 80a7846:	bfac      	ite	ge
 80a7848:	18d6      	addge	r6, r2, r3
 80a784a:	1ad2      	sublt	r2, r2, r3
 80a784c:	eba3 0301 	sub.w	r3, r3, r1
 80a7850:	4423      	add	r3, r4
 80a7852:	49b1      	ldr	r1, [pc, #708]	; (80a7b18 <_strtod_r+0x960>)
 80a7854:	f103 33ff 	add.w	r3, r3, #4294967295
 80a7858:	bfac      	ite	ge
 80a785a:	9a12      	ldrge	r2, [sp, #72]	; 0x48
 80a785c:	9e0d      	ldrlt	r6, [sp, #52]	; 0x34
 80a785e:	428b      	cmp	r3, r1
 80a7860:	f1c4 0436 	rsb	r4, r4, #54	; 0x36
 80a7864:	f280 8085 	bge.w	80a7972 <_strtod_r+0x7ba>
 80a7868:	1ac9      	subs	r1, r1, r3
 80a786a:	291f      	cmp	r1, #31
 80a786c:	bfc8      	it	gt
 80a786e:	4dab      	ldrgt	r5, [pc, #684]	; (80a7b1c <_strtod_r+0x964>)
 80a7870:	f04f 0701 	mov.w	r7, #1
 80a7874:	bfd4      	ite	le
 80a7876:	fa07 f301 	lslle.w	r3, r7, r1
 80a787a:	1aed      	subgt	r5, r5, r3
 80a787c:	eba4 0401 	sub.w	r4, r4, r1
 80a7880:	bfd9      	ittee	le
 80a7882:	9307      	strle	r3, [sp, #28]
 80a7884:	2500      	movle	r5, #0
 80a7886:	fa07 f505 	lslgt.w	r5, r7, r5
 80a788a:	9707      	strgt	r7, [sp, #28]
 80a788c:	1937      	adds	r7, r6, r4
 80a788e:	9b03      	ldr	r3, [sp, #12]
 80a7890:	42be      	cmp	r6, r7
 80a7892:	4414      	add	r4, r2
 80a7894:	441c      	add	r4, r3
 80a7896:	4633      	mov	r3, r6
 80a7898:	bfa8      	it	ge
 80a789a:	463b      	movge	r3, r7
 80a789c:	42a3      	cmp	r3, r4
 80a789e:	bfa8      	it	ge
 80a78a0:	4623      	movge	r3, r4
 80a78a2:	2b00      	cmp	r3, #0
 80a78a4:	bfc2      	ittt	gt
 80a78a6:	1aff      	subgt	r7, r7, r3
 80a78a8:	1ae4      	subgt	r4, r4, r3
 80a78aa:	1af6      	subgt	r6, r6, r3
 80a78ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80a78ae:	2b00      	cmp	r3, #0
 80a78b0:	d163      	bne.n	80a797a <_strtod_r+0x7c2>
 80a78b2:	2f00      	cmp	r7, #0
 80a78b4:	dc7a      	bgt.n	80a79ac <_strtod_r+0x7f4>
 80a78b6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80a78b8:	2b00      	cmp	r3, #0
 80a78ba:	f040 8081 	bne.w	80a79c0 <_strtod_r+0x808>
 80a78be:	2c00      	cmp	r4, #0
 80a78c0:	f300 8088 	bgt.w	80a79d4 <_strtod_r+0x81c>
 80a78c4:	2e00      	cmp	r6, #0
 80a78c6:	f300 808f 	bgt.w	80a79e8 <_strtod_r+0x830>
 80a78ca:	9a04      	ldr	r2, [sp, #16]
 80a78cc:	9918      	ldr	r1, [sp, #96]	; 0x60
 80a78ce:	4650      	mov	r0, sl
 80a78d0:	f001 fc3d 	bl	80a914e <__mdiff>
 80a78d4:	4683      	mov	fp, r0
 80a78d6:	2800      	cmp	r0, #0
 80a78d8:	f43f aeb4 	beq.w	80a7644 <_strtod_r+0x48c>
 80a78dc:	68c3      	ldr	r3, [r0, #12]
 80a78de:	2400      	movs	r4, #0
 80a78e0:	60c4      	str	r4, [r0, #12]
 80a78e2:	9902      	ldr	r1, [sp, #8]
 80a78e4:	9306      	str	r3, [sp, #24]
 80a78e6:	f001 fc16 	bl	80a9116 <__mcmp>
 80a78ea:	42a0      	cmp	r0, r4
 80a78ec:	f280 808b 	bge.w	80a7a06 <_strtod_r+0x84e>
 80a78f0:	9b06      	ldr	r3, [sp, #24]
 80a78f2:	2b00      	cmp	r3, #0
 80a78f4:	f040 8202 	bne.w	80a7cfc <_strtod_r+0xb44>
 80a78f8:	f1b8 0f00 	cmp.w	r8, #0
 80a78fc:	f040 81fe 	bne.w	80a7cfc <_strtod_r+0xb44>
 80a7900:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80a7904:	2b00      	cmp	r3, #0
 80a7906:	f040 81f9 	bne.w	80a7cfc <_strtod_r+0xb44>
 80a790a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80a790e:	0d1b      	lsrs	r3, r3, #20
 80a7910:	051b      	lsls	r3, r3, #20
 80a7912:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80a7916:	f240 81f1 	bls.w	80a7cfc <_strtod_r+0xb44>
 80a791a:	f8db 3014 	ldr.w	r3, [fp, #20]
 80a791e:	2b00      	cmp	r3, #0
 80a7920:	d06c      	beq.n	80a79fc <_strtod_r+0x844>
 80a7922:	4659      	mov	r1, fp
 80a7924:	2201      	movs	r2, #1
 80a7926:	4650      	mov	r0, sl
 80a7928:	f001 fba4 	bl	80a9074 <__lshift>
 80a792c:	9902      	ldr	r1, [sp, #8]
 80a792e:	4683      	mov	fp, r0
 80a7930:	f001 fbf1 	bl	80a9116 <__mcmp>
 80a7934:	2800      	cmp	r0, #0
 80a7936:	f340 81e1 	ble.w	80a7cfc <_strtod_r+0xb44>
 80a793a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80a793e:	9a03      	ldr	r2, [sp, #12]
 80a7940:	0d1b      	lsrs	r3, r3, #20
 80a7942:	051b      	lsls	r3, r3, #20
 80a7944:	2a00      	cmp	r2, #0
 80a7946:	f000 808d 	beq.w	80a7a64 <_strtod_r+0x8ac>
 80a794a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80a794e:	f300 8089 	bgt.w	80a7a64 <_strtod_r+0x8ac>
 80a7952:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
 80a7956:	f300 81d3 	bgt.w	80a7d00 <_strtod_r+0xb48>
 80a795a:	2322      	movs	r3, #34	; 0x22
 80a795c:	f04f 0800 	mov.w	r8, #0
 80a7960:	f04f 0900 	mov.w	r9, #0
 80a7964:	f8ca 3000 	str.w	r3, [sl]
 80a7968:	9b05      	ldr	r3, [sp, #20]
 80a796a:	2b00      	cmp	r3, #0
 80a796c:	f040 81d9 	bne.w	80a7d22 <_strtod_r+0xb6a>
 80a7970:	e1eb      	b.n	80a7d4a <_strtod_r+0xb92>
 80a7972:	2301      	movs	r3, #1
 80a7974:	2500      	movs	r5, #0
 80a7976:	9307      	str	r3, [sp, #28]
 80a7978:	e788      	b.n	80a788c <_strtod_r+0x6d4>
 80a797a:	461a      	mov	r2, r3
 80a797c:	9902      	ldr	r1, [sp, #8]
 80a797e:	4650      	mov	r0, sl
 80a7980:	f001 fb2a 	bl	80a8fd8 <__pow5mult>
 80a7984:	9002      	str	r0, [sp, #8]
 80a7986:	2800      	cmp	r0, #0
 80a7988:	f43f ae5c 	beq.w	80a7644 <_strtod_r+0x48c>
 80a798c:	4601      	mov	r1, r0
 80a798e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80a7990:	4650      	mov	r0, sl
 80a7992:	f001 fa90 	bl	80a8eb6 <__multiply>
 80a7996:	9006      	str	r0, [sp, #24]
 80a7998:	2800      	cmp	r0, #0
 80a799a:	f43f ae53 	beq.w	80a7644 <_strtod_r+0x48c>
 80a799e:	9918      	ldr	r1, [sp, #96]	; 0x60
 80a79a0:	4650      	mov	r0, sl
 80a79a2:	f001 f9a2 	bl	80a8cea <_Bfree>
 80a79a6:	9b06      	ldr	r3, [sp, #24]
 80a79a8:	9318      	str	r3, [sp, #96]	; 0x60
 80a79aa:	e782      	b.n	80a78b2 <_strtod_r+0x6fa>
 80a79ac:	463a      	mov	r2, r7
 80a79ae:	9918      	ldr	r1, [sp, #96]	; 0x60
 80a79b0:	4650      	mov	r0, sl
 80a79b2:	f001 fb5f 	bl	80a9074 <__lshift>
 80a79b6:	9018      	str	r0, [sp, #96]	; 0x60
 80a79b8:	2800      	cmp	r0, #0
 80a79ba:	f47f af7c 	bne.w	80a78b6 <_strtod_r+0x6fe>
 80a79be:	e641      	b.n	80a7644 <_strtod_r+0x48c>
 80a79c0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80a79c2:	9904      	ldr	r1, [sp, #16]
 80a79c4:	4650      	mov	r0, sl
 80a79c6:	f001 fb07 	bl	80a8fd8 <__pow5mult>
 80a79ca:	9004      	str	r0, [sp, #16]
 80a79cc:	2800      	cmp	r0, #0
 80a79ce:	f47f af76 	bne.w	80a78be <_strtod_r+0x706>
 80a79d2:	e637      	b.n	80a7644 <_strtod_r+0x48c>
 80a79d4:	4622      	mov	r2, r4
 80a79d6:	9904      	ldr	r1, [sp, #16]
 80a79d8:	4650      	mov	r0, sl
 80a79da:	f001 fb4b 	bl	80a9074 <__lshift>
 80a79de:	9004      	str	r0, [sp, #16]
 80a79e0:	2800      	cmp	r0, #0
 80a79e2:	f47f af6f 	bne.w	80a78c4 <_strtod_r+0x70c>
 80a79e6:	e62d      	b.n	80a7644 <_strtod_r+0x48c>
 80a79e8:	4632      	mov	r2, r6
 80a79ea:	9902      	ldr	r1, [sp, #8]
 80a79ec:	4650      	mov	r0, sl
 80a79ee:	f001 fb41 	bl	80a9074 <__lshift>
 80a79f2:	9002      	str	r0, [sp, #8]
 80a79f4:	2800      	cmp	r0, #0
 80a79f6:	f47f af68 	bne.w	80a78ca <_strtod_r+0x712>
 80a79fa:	e623      	b.n	80a7644 <_strtod_r+0x48c>
 80a79fc:	f8db 3010 	ldr.w	r3, [fp, #16]
 80a7a00:	2b01      	cmp	r3, #1
 80a7a02:	dc8e      	bgt.n	80a7922 <_strtod_r+0x76a>
 80a7a04:	e17a      	b.n	80a7cfc <_strtod_r+0xb44>
 80a7a06:	d161      	bne.n	80a7acc <_strtod_r+0x914>
 80a7a08:	9a06      	ldr	r2, [sp, #24]
 80a7a0a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80a7a0e:	b322      	cbz	r2, 80a7a5a <_strtod_r+0x8a2>
 80a7a10:	4943      	ldr	r1, [pc, #268]	; (80a7b20 <_strtod_r+0x968>)
 80a7a12:	464a      	mov	r2, r9
 80a7a14:	428b      	cmp	r3, r1
 80a7a16:	d12e      	bne.n	80a7a76 <_strtod_r+0x8be>
 80a7a18:	9b03      	ldr	r3, [sp, #12]
 80a7a1a:	4641      	mov	r1, r8
 80a7a1c:	b163      	cbz	r3, 80a7a38 <_strtod_r+0x880>
 80a7a1e:	4b41      	ldr	r3, [pc, #260]	; (80a7b24 <_strtod_r+0x96c>)
 80a7a20:	4013      	ands	r3, r2
 80a7a22:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80a7a26:	d807      	bhi.n	80a7a38 <_strtod_r+0x880>
 80a7a28:	0d1b      	lsrs	r3, r3, #20
 80a7a2a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80a7a2e:	f04f 30ff 	mov.w	r0, #4294967295
 80a7a32:	fa00 f303 	lsl.w	r3, r0, r3
 80a7a36:	e001      	b.n	80a7a3c <_strtod_r+0x884>
 80a7a38:	f04f 33ff 	mov.w	r3, #4294967295
 80a7a3c:	428b      	cmp	r3, r1
 80a7a3e:	d11a      	bne.n	80a7a76 <_strtod_r+0x8be>
 80a7a40:	4939      	ldr	r1, [pc, #228]	; (80a7b28 <_strtod_r+0x970>)
 80a7a42:	428a      	cmp	r2, r1
 80a7a44:	d102      	bne.n	80a7a4c <_strtod_r+0x894>
 80a7a46:	3301      	adds	r3, #1
 80a7a48:	f43f adfc 	beq.w	80a7644 <_strtod_r+0x48c>
 80a7a4c:	4b35      	ldr	r3, [pc, #212]	; (80a7b24 <_strtod_r+0x96c>)
 80a7a4e:	f04f 0800 	mov.w	r8, #0
 80a7a52:	4013      	ands	r3, r2
 80a7a54:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80a7a58:	e150      	b.n	80a7cfc <_strtod_r+0xb44>
 80a7a5a:	b963      	cbnz	r3, 80a7a76 <_strtod_r+0x8be>
 80a7a5c:	f1b8 0f00 	cmp.w	r8, #0
 80a7a60:	d109      	bne.n	80a7a76 <_strtod_r+0x8be>
 80a7a62:	e76a      	b.n	80a793a <_strtod_r+0x782>
 80a7a64:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80a7a68:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80a7a6c:	f04f 38ff 	mov.w	r8, #4294967295
 80a7a70:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80a7a74:	e142      	b.n	80a7cfc <_strtod_r+0xb44>
 80a7a76:	b115      	cbz	r5, 80a7a7e <_strtod_r+0x8c6>
 80a7a78:	ea15 0f09 	tst.w	r5, r9
 80a7a7c:	e002      	b.n	80a7a84 <_strtod_r+0x8cc>
 80a7a7e:	9b07      	ldr	r3, [sp, #28]
 80a7a80:	ea13 0f08 	tst.w	r3, r8
 80a7a84:	f000 813a 	beq.w	80a7cfc <_strtod_r+0xb44>
 80a7a88:	9b06      	ldr	r3, [sp, #24]
 80a7a8a:	9a03      	ldr	r2, [sp, #12]
 80a7a8c:	4640      	mov	r0, r8
 80a7a8e:	4649      	mov	r1, r9
 80a7a90:	b153      	cbz	r3, 80a7aa8 <_strtod_r+0x8f0>
 80a7a92:	f7ff fb6f 	bl	80a7174 <sulp>
 80a7a96:	4602      	mov	r2, r0
 80a7a98:	460b      	mov	r3, r1
 80a7a9a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80a7a9e:	f7fd fae1 	bl	80a5064 <__adddf3>
 80a7aa2:	4680      	mov	r8, r0
 80a7aa4:	4689      	mov	r9, r1
 80a7aa6:	e129      	b.n	80a7cfc <_strtod_r+0xb44>
 80a7aa8:	f7ff fb64 	bl	80a7174 <sulp>
 80a7aac:	4602      	mov	r2, r0
 80a7aae:	460b      	mov	r3, r1
 80a7ab0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80a7ab4:	f7fd fad4 	bl	80a5060 <__aeabi_dsub>
 80a7ab8:	2200      	movs	r2, #0
 80a7aba:	2300      	movs	r3, #0
 80a7abc:	4680      	mov	r8, r0
 80a7abe:	4689      	mov	r9, r1
 80a7ac0:	f7fd feea 	bl	80a5898 <__aeabi_dcmpeq>
 80a7ac4:	2800      	cmp	r0, #0
 80a7ac6:	f47f af48 	bne.w	80a795a <_strtod_r+0x7a2>
 80a7aca:	e117      	b.n	80a7cfc <_strtod_r+0xb44>
 80a7acc:	9902      	ldr	r1, [sp, #8]
 80a7ace:	4658      	mov	r0, fp
 80a7ad0:	f001 fc5b 	bl	80a938a <__ratio>
 80a7ad4:	2200      	movs	r2, #0
 80a7ad6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80a7ada:	4606      	mov	r6, r0
 80a7adc:	460f      	mov	r7, r1
 80a7ade:	f7fd feef 	bl	80a58c0 <__aeabi_dcmple>
 80a7ae2:	2800      	cmp	r0, #0
 80a7ae4:	d03f      	beq.n	80a7b66 <_strtod_r+0x9ae>
 80a7ae6:	9b06      	ldr	r3, [sp, #24]
 80a7ae8:	b113      	cbz	r3, 80a7af0 <_strtod_r+0x938>
 80a7aea:	2600      	movs	r6, #0
 80a7aec:	4f0f      	ldr	r7, [pc, #60]	; (80a7b2c <_strtod_r+0x974>)
 80a7aee:	e010      	b.n	80a7b12 <_strtod_r+0x95a>
 80a7af0:	f1b8 0f00 	cmp.w	r8, #0
 80a7af4:	d103      	bne.n	80a7afe <_strtod_r+0x946>
 80a7af6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80a7afa:	b93b      	cbnz	r3, 80a7b0c <_strtod_r+0x954>
 80a7afc:	e01a      	b.n	80a7b34 <_strtod_r+0x97c>
 80a7afe:	f1b8 0f01 	cmp.w	r8, #1
 80a7b02:	d103      	bne.n	80a7b0c <_strtod_r+0x954>
 80a7b04:	f1b9 0f00 	cmp.w	r9, #0
 80a7b08:	f43f af27 	beq.w	80a795a <_strtod_r+0x7a2>
 80a7b0c:	4f08      	ldr	r7, [pc, #32]	; (80a7b30 <_strtod_r+0x978>)
 80a7b0e:	2600      	movs	r6, #0
 80a7b10:	2400      	movs	r4, #0
 80a7b12:	4d06      	ldr	r5, [pc, #24]	; (80a7b2c <_strtod_r+0x974>)
 80a7b14:	e03c      	b.n	80a7b90 <_strtod_r+0x9d8>
 80a7b16:	bf00      	nop
 80a7b18:	fffffc02 	.word	0xfffffc02
 80a7b1c:	fffffbe2 	.word	0xfffffbe2
 80a7b20:	000fffff 	.word	0x000fffff
 80a7b24:	7ff00000 	.word	0x7ff00000
 80a7b28:	7fefffff 	.word	0x7fefffff
 80a7b2c:	3ff00000 	.word	0x3ff00000
 80a7b30:	bff00000 	.word	0xbff00000
 80a7b34:	2200      	movs	r2, #0
 80a7b36:	4b9a      	ldr	r3, [pc, #616]	; (80a7da0 <_strtod_r+0xbe8>)
 80a7b38:	4630      	mov	r0, r6
 80a7b3a:	4639      	mov	r1, r7
 80a7b3c:	f7fd feb6 	bl	80a58ac <__aeabi_dcmplt>
 80a7b40:	b940      	cbnz	r0, 80a7b54 <_strtod_r+0x99c>
 80a7b42:	2200      	movs	r2, #0
 80a7b44:	4b97      	ldr	r3, [pc, #604]	; (80a7da4 <_strtod_r+0xbec>)
 80a7b46:	4630      	mov	r0, r6
 80a7b48:	4639      	mov	r1, r7
 80a7b4a:	f7fd fc3d 	bl	80a53c8 <__aeabi_dmul>
 80a7b4e:	4604      	mov	r4, r0
 80a7b50:	460d      	mov	r5, r1
 80a7b52:	e001      	b.n	80a7b58 <_strtod_r+0x9a0>
 80a7b54:	9c06      	ldr	r4, [sp, #24]
 80a7b56:	4d93      	ldr	r5, [pc, #588]	; (80a7da4 <_strtod_r+0xbec>)
 80a7b58:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80a7b5c:	9414      	str	r4, [sp, #80]	; 0x50
 80a7b5e:	9315      	str	r3, [sp, #84]	; 0x54
 80a7b60:	e9dd 6714 	ldrd	r6, r7, [sp, #80]	; 0x50
 80a7b64:	e014      	b.n	80a7b90 <_strtod_r+0x9d8>
 80a7b66:	4b8f      	ldr	r3, [pc, #572]	; (80a7da4 <_strtod_r+0xbec>)
 80a7b68:	2200      	movs	r2, #0
 80a7b6a:	4630      	mov	r0, r6
 80a7b6c:	4639      	mov	r1, r7
 80a7b6e:	f7fd fc2b 	bl	80a53c8 <__aeabi_dmul>
 80a7b72:	9b06      	ldr	r3, [sp, #24]
 80a7b74:	4604      	mov	r4, r0
 80a7b76:	460d      	mov	r5, r1
 80a7b78:	b923      	cbnz	r3, 80a7b84 <_strtod_r+0x9cc>
 80a7b7a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80a7b7e:	900e      	str	r0, [sp, #56]	; 0x38
 80a7b80:	930f      	str	r3, [sp, #60]	; 0x3c
 80a7b82:	e003      	b.n	80a7b8c <_strtod_r+0x9d4>
 80a7b84:	4602      	mov	r2, r0
 80a7b86:	460b      	mov	r3, r1
 80a7b88:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80a7b8c:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
 80a7b90:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80a7b94:	0d1b      	lsrs	r3, r3, #20
 80a7b96:	051b      	lsls	r3, r3, #20
 80a7b98:	9307      	str	r3, [sp, #28]
 80a7b9a:	9a07      	ldr	r2, [sp, #28]
 80a7b9c:	4b82      	ldr	r3, [pc, #520]	; (80a7da8 <_strtod_r+0xbf0>)
 80a7b9e:	429a      	cmp	r2, r3
 80a7ba0:	d12b      	bne.n	80a7bfa <_strtod_r+0xa42>
 80a7ba2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80a7ba6:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80a7baa:	4640      	mov	r0, r8
 80a7bac:	4649      	mov	r1, r9
 80a7bae:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80a7bb2:	f001 fb2b 	bl	80a920c <__ulp>
 80a7bb6:	4602      	mov	r2, r0
 80a7bb8:	460b      	mov	r3, r1
 80a7bba:	4630      	mov	r0, r6
 80a7bbc:	4639      	mov	r1, r7
 80a7bbe:	f7fd fc03 	bl	80a53c8 <__aeabi_dmul>
 80a7bc2:	4642      	mov	r2, r8
 80a7bc4:	464b      	mov	r3, r9
 80a7bc6:	f7fd fa4d 	bl	80a5064 <__adddf3>
 80a7bca:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80a7bce:	0d1b      	lsrs	r3, r3, #20
 80a7bd0:	4a76      	ldr	r2, [pc, #472]	; (80a7dac <_strtod_r+0xbf4>)
 80a7bd2:	051b      	lsls	r3, r3, #20
 80a7bd4:	4293      	cmp	r3, r2
 80a7bd6:	4680      	mov	r8, r0
 80a7bd8:	d90c      	bls.n	80a7bf4 <_strtod_r+0xa3c>
 80a7bda:	4b75      	ldr	r3, [pc, #468]	; (80a7db0 <_strtod_r+0xbf8>)
 80a7bdc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80a7bde:	429a      	cmp	r2, r3
 80a7be0:	d103      	bne.n	80a7bea <_strtod_r+0xa32>
 80a7be2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a7be4:	3301      	adds	r3, #1
 80a7be6:	f43f ad2d 	beq.w	80a7644 <_strtod_r+0x48c>
 80a7bea:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 80a7db0 <_strtod_r+0xbf8>
 80a7bee:	f04f 38ff 	mov.w	r8, #4294967295
 80a7bf2:	e072      	b.n	80a7cda <_strtod_r+0xb22>
 80a7bf4:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 80a7bf8:	e039      	b.n	80a7c6e <_strtod_r+0xab6>
 80a7bfa:	9b03      	ldr	r3, [sp, #12]
 80a7bfc:	b33b      	cbz	r3, 80a7c4e <_strtod_r+0xa96>
 80a7bfe:	9b07      	ldr	r3, [sp, #28]
 80a7c00:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80a7c04:	d823      	bhi.n	80a7c4e <_strtod_r+0xa96>
 80a7c06:	a35e      	add	r3, pc, #376	; (adr r3, 80a7d80 <_strtod_r+0xbc8>)
 80a7c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a7c0c:	4620      	mov	r0, r4
 80a7c0e:	4629      	mov	r1, r5
 80a7c10:	f7fd fe56 	bl	80a58c0 <__aeabi_dcmple>
 80a7c14:	b1b8      	cbz	r0, 80a7c46 <_strtod_r+0xa8e>
 80a7c16:	4629      	mov	r1, r5
 80a7c18:	4620      	mov	r0, r4
 80a7c1a:	f7fd fead 	bl	80a5978 <__aeabi_d2uiz>
 80a7c1e:	2800      	cmp	r0, #0
 80a7c20:	bf08      	it	eq
 80a7c22:	2001      	moveq	r0, #1
 80a7c24:	f7fd fb5a 	bl	80a52dc <__aeabi_ui2d>
 80a7c28:	9b06      	ldr	r3, [sp, #24]
 80a7c2a:	4604      	mov	r4, r0
 80a7c2c:	460d      	mov	r5, r1
 80a7c2e:	b923      	cbnz	r3, 80a7c3a <_strtod_r+0xa82>
 80a7c30:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80a7c34:	9010      	str	r0, [sp, #64]	; 0x40
 80a7c36:	9311      	str	r3, [sp, #68]	; 0x44
 80a7c38:	e003      	b.n	80a7c42 <_strtod_r+0xa8a>
 80a7c3a:	4602      	mov	r2, r0
 80a7c3c:	460b      	mov	r3, r1
 80a7c3e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80a7c42:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80a7c46:	9a07      	ldr	r2, [sp, #28]
 80a7c48:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 80a7c4c:	1a9f      	subs	r7, r3, r2
 80a7c4e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80a7c52:	f001 fadb 	bl	80a920c <__ulp>
 80a7c56:	4602      	mov	r2, r0
 80a7c58:	460b      	mov	r3, r1
 80a7c5a:	4630      	mov	r0, r6
 80a7c5c:	4639      	mov	r1, r7
 80a7c5e:	f7fd fbb3 	bl	80a53c8 <__aeabi_dmul>
 80a7c62:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80a7c66:	f7fd f9fd 	bl	80a5064 <__adddf3>
 80a7c6a:	4680      	mov	r8, r0
 80a7c6c:	4689      	mov	r9, r1
 80a7c6e:	9b03      	ldr	r3, [sp, #12]
 80a7c70:	bb9b      	cbnz	r3, 80a7cda <_strtod_r+0xb22>
 80a7c72:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80a7c76:	0d1b      	lsrs	r3, r3, #20
 80a7c78:	9a07      	ldr	r2, [sp, #28]
 80a7c7a:	051b      	lsls	r3, r3, #20
 80a7c7c:	429a      	cmp	r2, r3
 80a7c7e:	464e      	mov	r6, r9
 80a7c80:	d12b      	bne.n	80a7cda <_strtod_r+0xb22>
 80a7c82:	4629      	mov	r1, r5
 80a7c84:	4620      	mov	r0, r4
 80a7c86:	f7fd fe4f 	bl	80a5928 <__aeabi_d2iz>
 80a7c8a:	f7fd fb37 	bl	80a52fc <__aeabi_i2d>
 80a7c8e:	460b      	mov	r3, r1
 80a7c90:	4602      	mov	r2, r0
 80a7c92:	4629      	mov	r1, r5
 80a7c94:	4620      	mov	r0, r4
 80a7c96:	f7fd f9e3 	bl	80a5060 <__aeabi_dsub>
 80a7c9a:	9b06      	ldr	r3, [sp, #24]
 80a7c9c:	4604      	mov	r4, r0
 80a7c9e:	460d      	mov	r5, r1
 80a7ca0:	b92b      	cbnz	r3, 80a7cae <_strtod_r+0xaf6>
 80a7ca2:	f1b8 0f00 	cmp.w	r8, #0
 80a7ca6:	d102      	bne.n	80a7cae <_strtod_r+0xaf6>
 80a7ca8:	f3c9 0613 	ubfx	r6, r9, #0, #20
 80a7cac:	b17e      	cbz	r6, 80a7cce <_strtod_r+0xb16>
 80a7cae:	a336      	add	r3, pc, #216	; (adr r3, 80a7d88 <_strtod_r+0xbd0>)
 80a7cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a7cb4:	4620      	mov	r0, r4
 80a7cb6:	4629      	mov	r1, r5
 80a7cb8:	f7fd fdf8 	bl	80a58ac <__aeabi_dcmplt>
 80a7cbc:	bb88      	cbnz	r0, 80a7d22 <_strtod_r+0xb6a>
 80a7cbe:	a334      	add	r3, pc, #208	; (adr r3, 80a7d90 <_strtod_r+0xbd8>)
 80a7cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a7cc4:	4620      	mov	r0, r4
 80a7cc6:	4629      	mov	r1, r5
 80a7cc8:	f7fd fe0e 	bl	80a58e8 <__aeabi_dcmpgt>
 80a7ccc:	e004      	b.n	80a7cd8 <_strtod_r+0xb20>
 80a7cce:	a332      	add	r3, pc, #200	; (adr r3, 80a7d98 <_strtod_r+0xbe0>)
 80a7cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a7cd4:	f7fd fdea 	bl	80a58ac <__aeabi_dcmplt>
 80a7cd8:	bb18      	cbnz	r0, 80a7d22 <_strtod_r+0xb6a>
 80a7cda:	9918      	ldr	r1, [sp, #96]	; 0x60
 80a7cdc:	4650      	mov	r0, sl
 80a7cde:	f001 f804 	bl	80a8cea <_Bfree>
 80a7ce2:	9904      	ldr	r1, [sp, #16]
 80a7ce4:	4650      	mov	r0, sl
 80a7ce6:	f001 f800 	bl	80a8cea <_Bfree>
 80a7cea:	9902      	ldr	r1, [sp, #8]
 80a7cec:	4650      	mov	r0, sl
 80a7cee:	f000 fffc 	bl	80a8cea <_Bfree>
 80a7cf2:	4659      	mov	r1, fp
 80a7cf4:	4650      	mov	r0, sl
 80a7cf6:	f000 fff8 	bl	80a8cea <_Bfree>
 80a7cfa:	e574      	b.n	80a77e6 <_strtod_r+0x62e>
 80a7cfc:	9b03      	ldr	r3, [sp, #12]
 80a7cfe:	b183      	cbz	r3, 80a7d22 <_strtod_r+0xb6a>
 80a7d00:	4b2c      	ldr	r3, [pc, #176]	; (80a7db4 <_strtod_r+0xbfc>)
 80a7d02:	4640      	mov	r0, r8
 80a7d04:	930b      	str	r3, [sp, #44]	; 0x2c
 80a7d06:	2300      	movs	r3, #0
 80a7d08:	930a      	str	r3, [sp, #40]	; 0x28
 80a7d0a:	4649      	mov	r1, r9
 80a7d0c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80a7d10:	f7fd fb5a 	bl	80a53c8 <__aeabi_dmul>
 80a7d14:	4680      	mov	r8, r0
 80a7d16:	4689      	mov	r9, r1
 80a7d18:	b919      	cbnz	r1, 80a7d22 <_strtod_r+0xb6a>
 80a7d1a:	b910      	cbnz	r0, 80a7d22 <_strtod_r+0xb6a>
 80a7d1c:	2322      	movs	r3, #34	; 0x22
 80a7d1e:	f8ca 3000 	str.w	r3, [sl]
 80a7d22:	9918      	ldr	r1, [sp, #96]	; 0x60
 80a7d24:	4650      	mov	r0, sl
 80a7d26:	f000 ffe0 	bl	80a8cea <_Bfree>
 80a7d2a:	9904      	ldr	r1, [sp, #16]
 80a7d2c:	4650      	mov	r0, sl
 80a7d2e:	f000 ffdc 	bl	80a8cea <_Bfree>
 80a7d32:	9902      	ldr	r1, [sp, #8]
 80a7d34:	4650      	mov	r0, sl
 80a7d36:	f000 ffd8 	bl	80a8cea <_Bfree>
 80a7d3a:	9905      	ldr	r1, [sp, #20]
 80a7d3c:	4650      	mov	r0, sl
 80a7d3e:	f000 ffd4 	bl	80a8cea <_Bfree>
 80a7d42:	4659      	mov	r1, fp
 80a7d44:	4650      	mov	r0, sl
 80a7d46:	f000 ffd0 	bl	80a8cea <_Bfree>
 80a7d4a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80a7d4c:	b113      	cbz	r3, 80a7d54 <_strtod_r+0xb9c>
 80a7d4e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a7d50:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80a7d52:	6013      	str	r3, [r2, #0]
 80a7d54:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80a7d56:	b11b      	cbz	r3, 80a7d60 <_strtod_r+0xba8>
 80a7d58:	4642      	mov	r2, r8
 80a7d5a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80a7d5e:	e007      	b.n	80a7d70 <_strtod_r+0xbb8>
 80a7d60:	4642      	mov	r2, r8
 80a7d62:	464b      	mov	r3, r9
 80a7d64:	e004      	b.n	80a7d70 <_strtod_r+0xbb8>
 80a7d66:	2500      	movs	r5, #0
 80a7d68:	462a      	mov	r2, r5
 80a7d6a:	2101      	movs	r1, #1
 80a7d6c:	f7ff bb47 	b.w	80a73fe <_strtod_r+0x246>
 80a7d70:	4610      	mov	r0, r2
 80a7d72:	4619      	mov	r1, r3
 80a7d74:	b01d      	add	sp, #116	; 0x74
 80a7d76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a7d7a:	bf00      	nop
 80a7d7c:	f3af 8000 	nop.w
 80a7d80:	ffc00000 	.word	0xffc00000
 80a7d84:	41dfffff 	.word	0x41dfffff
 80a7d88:	94a03595 	.word	0x94a03595
 80a7d8c:	3fdfffff 	.word	0x3fdfffff
 80a7d90:	35afe535 	.word	0x35afe535
 80a7d94:	3fe00000 	.word	0x3fe00000
 80a7d98:	94a03595 	.word	0x94a03595
 80a7d9c:	3fcfffff 	.word	0x3fcfffff
 80a7da0:	3ff00000 	.word	0x3ff00000
 80a7da4:	3fe00000 	.word	0x3fe00000
 80a7da8:	7fe00000 	.word	0x7fe00000
 80a7dac:	7c9fffff 	.word	0x7c9fffff
 80a7db0:	7fefffff 	.word	0x7fefffff
 80a7db4:	39500000 	.word	0x39500000

080a7db8 <strtod>:
 80a7db8:	4b02      	ldr	r3, [pc, #8]	; (80a7dc4 <strtod+0xc>)
 80a7dba:	460a      	mov	r2, r1
 80a7dbc:	4601      	mov	r1, r0
 80a7dbe:	6818      	ldr	r0, [r3, #0]
 80a7dc0:	f7ff b9fa 	b.w	80a71b8 <_strtod_r>
 80a7dc4:	20000074 	.word	0x20000074

080a7dc8 <_strtol_r>:
 80a7dc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a7dcc:	460f      	mov	r7, r1
 80a7dce:	4680      	mov	r8, r0
 80a7dd0:	483f      	ldr	r0, [pc, #252]	; (80a7ed0 <_strtol_r+0x108>)
 80a7dd2:	f8d0 9000 	ldr.w	r9, [r0]
 80a7dd6:	463d      	mov	r5, r7
 80a7dd8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a7ddc:	eb09 0004 	add.w	r0, r9, r4
 80a7de0:	7840      	ldrb	r0, [r0, #1]
 80a7de2:	f000 0008 	and.w	r0, r0, #8
 80a7de6:	f000 06ff 	and.w	r6, r0, #255	; 0xff
 80a7dea:	b108      	cbz	r0, 80a7df0 <_strtol_r+0x28>
 80a7dec:	462f      	mov	r7, r5
 80a7dee:	e7f2      	b.n	80a7dd6 <_strtol_r+0xe>
 80a7df0:	2c2d      	cmp	r4, #45	; 0x2d
 80a7df2:	d103      	bne.n	80a7dfc <_strtol_r+0x34>
 80a7df4:	1cbd      	adds	r5, r7, #2
 80a7df6:	787c      	ldrb	r4, [r7, #1]
 80a7df8:	2601      	movs	r6, #1
 80a7dfa:	e003      	b.n	80a7e04 <_strtol_r+0x3c>
 80a7dfc:	2c2b      	cmp	r4, #43	; 0x2b
 80a7dfe:	bf04      	itt	eq
 80a7e00:	787c      	ldrbeq	r4, [r7, #1]
 80a7e02:	1cbd      	addeq	r5, r7, #2
 80a7e04:	b113      	cbz	r3, 80a7e0c <_strtol_r+0x44>
 80a7e06:	2b10      	cmp	r3, #16
 80a7e08:	d10a      	bne.n	80a7e20 <_strtol_r+0x58>
 80a7e0a:	e05b      	b.n	80a7ec4 <_strtol_r+0xfc>
 80a7e0c:	2c30      	cmp	r4, #48	; 0x30
 80a7e0e:	d157      	bne.n	80a7ec0 <_strtol_r+0xf8>
 80a7e10:	7828      	ldrb	r0, [r5, #0]
 80a7e12:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80a7e16:	2858      	cmp	r0, #88	; 0x58
 80a7e18:	d14d      	bne.n	80a7eb6 <_strtol_r+0xee>
 80a7e1a:	786c      	ldrb	r4, [r5, #1]
 80a7e1c:	2310      	movs	r3, #16
 80a7e1e:	3502      	adds	r5, #2
 80a7e20:	2e00      	cmp	r6, #0
 80a7e22:	bf14      	ite	ne
 80a7e24:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
 80a7e28:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
 80a7e2c:	fbbc faf3 	udiv	sl, ip, r3
 80a7e30:	2700      	movs	r7, #0
 80a7e32:	4638      	mov	r0, r7
 80a7e34:	fb03 cc1a 	mls	ip, r3, sl, ip
 80a7e38:	eb09 0e04 	add.w	lr, r9, r4
 80a7e3c:	f89e e001 	ldrb.w	lr, [lr, #1]
 80a7e40:	f01e 0f04 	tst.w	lr, #4
 80a7e44:	d001      	beq.n	80a7e4a <_strtol_r+0x82>
 80a7e46:	3c30      	subs	r4, #48	; 0x30
 80a7e48:	e00b      	b.n	80a7e62 <_strtol_r+0x9a>
 80a7e4a:	f01e 0e03 	ands.w	lr, lr, #3
 80a7e4e:	d01b      	beq.n	80a7e88 <_strtol_r+0xc0>
 80a7e50:	f1be 0f01 	cmp.w	lr, #1
 80a7e54:	bf0c      	ite	eq
 80a7e56:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 80a7e5a:	f04f 0e57 	movne.w	lr, #87	; 0x57
 80a7e5e:	ebce 0404 	rsb	r4, lr, r4
 80a7e62:	42a3      	cmp	r3, r4
 80a7e64:	dd10      	ble.n	80a7e88 <_strtol_r+0xc0>
 80a7e66:	f1b7 3fff 	cmp.w	r7, #4294967295
 80a7e6a:	d00a      	beq.n	80a7e82 <_strtol_r+0xba>
 80a7e6c:	4550      	cmp	r0, sl
 80a7e6e:	d806      	bhi.n	80a7e7e <_strtol_r+0xb6>
 80a7e70:	d101      	bne.n	80a7e76 <_strtol_r+0xae>
 80a7e72:	4564      	cmp	r4, ip
 80a7e74:	dc03      	bgt.n	80a7e7e <_strtol_r+0xb6>
 80a7e76:	fb03 4000 	mla	r0, r3, r0, r4
 80a7e7a:	2701      	movs	r7, #1
 80a7e7c:	e001      	b.n	80a7e82 <_strtol_r+0xba>
 80a7e7e:	f04f 37ff 	mov.w	r7, #4294967295
 80a7e82:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a7e86:	e7d7      	b.n	80a7e38 <_strtol_r+0x70>
 80a7e88:	1c7b      	adds	r3, r7, #1
 80a7e8a:	d10c      	bne.n	80a7ea6 <_strtol_r+0xde>
 80a7e8c:	2e00      	cmp	r6, #0
 80a7e8e:	f04f 0322 	mov.w	r3, #34	; 0x22
 80a7e92:	bf14      	ite	ne
 80a7e94:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 80a7e98:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a7e9c:	f8c8 3000 	str.w	r3, [r8]
 80a7ea0:	b92a      	cbnz	r2, 80a7eae <_strtol_r+0xe6>
 80a7ea2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a7ea6:	b106      	cbz	r6, 80a7eaa <_strtol_r+0xe2>
 80a7ea8:	4240      	negs	r0, r0
 80a7eaa:	b172      	cbz	r2, 80a7eca <_strtol_r+0x102>
 80a7eac:	b107      	cbz	r7, 80a7eb0 <_strtol_r+0xe8>
 80a7eae:	1e69      	subs	r1, r5, #1
 80a7eb0:	6011      	str	r1, [r2, #0]
 80a7eb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a7eb6:	2430      	movs	r4, #48	; 0x30
 80a7eb8:	2b00      	cmp	r3, #0
 80a7eba:	d1b1      	bne.n	80a7e20 <_strtol_r+0x58>
 80a7ebc:	2308      	movs	r3, #8
 80a7ebe:	e7af      	b.n	80a7e20 <_strtol_r+0x58>
 80a7ec0:	230a      	movs	r3, #10
 80a7ec2:	e7ad      	b.n	80a7e20 <_strtol_r+0x58>
 80a7ec4:	2c30      	cmp	r4, #48	; 0x30
 80a7ec6:	d0a3      	beq.n	80a7e10 <_strtol_r+0x48>
 80a7ec8:	e7aa      	b.n	80a7e20 <_strtol_r+0x58>
 80a7eca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a7ece:	bf00      	nop
 80a7ed0:	20000010 	.word	0x20000010

080a7ed4 <strtol>:
 80a7ed4:	4613      	mov	r3, r2
 80a7ed6:	460a      	mov	r2, r1
 80a7ed8:	4601      	mov	r1, r0
 80a7eda:	4802      	ldr	r0, [pc, #8]	; (80a7ee4 <strtol+0x10>)
 80a7edc:	6800      	ldr	r0, [r0, #0]
 80a7ede:	f7ff bf73 	b.w	80a7dc8 <_strtol_r>
 80a7ee2:	bf00      	nop
 80a7ee4:	20000074 	.word	0x20000074

080a7ee8 <_strtoul_r>:
 80a7ee8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a7eec:	460e      	mov	r6, r1
 80a7eee:	4680      	mov	r8, r0
 80a7ef0:	483b      	ldr	r0, [pc, #236]	; (80a7fe0 <_strtoul_r+0xf8>)
 80a7ef2:	f8d0 9000 	ldr.w	r9, [r0]
 80a7ef6:	4635      	mov	r5, r6
 80a7ef8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a7efc:	eb09 0004 	add.w	r0, r9, r4
 80a7f00:	7840      	ldrb	r0, [r0, #1]
 80a7f02:	f000 0008 	and.w	r0, r0, #8
 80a7f06:	f000 07ff 	and.w	r7, r0, #255	; 0xff
 80a7f0a:	b108      	cbz	r0, 80a7f10 <_strtoul_r+0x28>
 80a7f0c:	462e      	mov	r6, r5
 80a7f0e:	e7f2      	b.n	80a7ef6 <_strtoul_r+0xe>
 80a7f10:	2c2d      	cmp	r4, #45	; 0x2d
 80a7f12:	d103      	bne.n	80a7f1c <_strtoul_r+0x34>
 80a7f14:	1cb5      	adds	r5, r6, #2
 80a7f16:	7874      	ldrb	r4, [r6, #1]
 80a7f18:	2701      	movs	r7, #1
 80a7f1a:	e003      	b.n	80a7f24 <_strtoul_r+0x3c>
 80a7f1c:	2c2b      	cmp	r4, #43	; 0x2b
 80a7f1e:	bf04      	itt	eq
 80a7f20:	7874      	ldrbeq	r4, [r6, #1]
 80a7f22:	1cb5      	addeq	r5, r6, #2
 80a7f24:	b113      	cbz	r3, 80a7f2c <_strtoul_r+0x44>
 80a7f26:	2b10      	cmp	r3, #16
 80a7f28:	d10a      	bne.n	80a7f40 <_strtoul_r+0x58>
 80a7f2a:	e053      	b.n	80a7fd4 <_strtoul_r+0xec>
 80a7f2c:	2c30      	cmp	r4, #48	; 0x30
 80a7f2e:	d14f      	bne.n	80a7fd0 <_strtoul_r+0xe8>
 80a7f30:	7828      	ldrb	r0, [r5, #0]
 80a7f32:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80a7f36:	2858      	cmp	r0, #88	; 0x58
 80a7f38:	d145      	bne.n	80a7fc6 <_strtoul_r+0xde>
 80a7f3a:	786c      	ldrb	r4, [r5, #1]
 80a7f3c:	2310      	movs	r3, #16
 80a7f3e:	3502      	adds	r5, #2
 80a7f40:	f04f 3cff 	mov.w	ip, #4294967295
 80a7f44:	fbbc fcf3 	udiv	ip, ip, r3
 80a7f48:	fb03 fa0c 	mul.w	sl, r3, ip
 80a7f4c:	2600      	movs	r6, #0
 80a7f4e:	ea6f 0a0a 	mvn.w	sl, sl
 80a7f52:	4630      	mov	r0, r6
 80a7f54:	eb09 0e04 	add.w	lr, r9, r4
 80a7f58:	f89e e001 	ldrb.w	lr, [lr, #1]
 80a7f5c:	f01e 0f04 	tst.w	lr, #4
 80a7f60:	d001      	beq.n	80a7f66 <_strtoul_r+0x7e>
 80a7f62:	3c30      	subs	r4, #48	; 0x30
 80a7f64:	e00b      	b.n	80a7f7e <_strtoul_r+0x96>
 80a7f66:	f01e 0e03 	ands.w	lr, lr, #3
 80a7f6a:	d01a      	beq.n	80a7fa2 <_strtoul_r+0xba>
 80a7f6c:	f1be 0f01 	cmp.w	lr, #1
 80a7f70:	bf0c      	ite	eq
 80a7f72:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 80a7f76:	f04f 0e57 	movne.w	lr, #87	; 0x57
 80a7f7a:	ebce 0404 	rsb	r4, lr, r4
 80a7f7e:	42a3      	cmp	r3, r4
 80a7f80:	dd0f      	ble.n	80a7fa2 <_strtoul_r+0xba>
 80a7f82:	2e00      	cmp	r6, #0
 80a7f84:	db08      	blt.n	80a7f98 <_strtoul_r+0xb0>
 80a7f86:	4560      	cmp	r0, ip
 80a7f88:	d806      	bhi.n	80a7f98 <_strtoul_r+0xb0>
 80a7f8a:	d101      	bne.n	80a7f90 <_strtoul_r+0xa8>
 80a7f8c:	4554      	cmp	r4, sl
 80a7f8e:	dc03      	bgt.n	80a7f98 <_strtoul_r+0xb0>
 80a7f90:	fb03 4000 	mla	r0, r3, r0, r4
 80a7f94:	2601      	movs	r6, #1
 80a7f96:	e001      	b.n	80a7f9c <_strtoul_r+0xb4>
 80a7f98:	f04f 36ff 	mov.w	r6, #4294967295
 80a7f9c:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a7fa0:	e7d8      	b.n	80a7f54 <_strtoul_r+0x6c>
 80a7fa2:	2e00      	cmp	r6, #0
 80a7fa4:	da07      	bge.n	80a7fb6 <_strtoul_r+0xce>
 80a7fa6:	2322      	movs	r3, #34	; 0x22
 80a7fa8:	f8c8 3000 	str.w	r3, [r8]
 80a7fac:	f04f 30ff 	mov.w	r0, #4294967295
 80a7fb0:	b92a      	cbnz	r2, 80a7fbe <_strtoul_r+0xd6>
 80a7fb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a7fb6:	b107      	cbz	r7, 80a7fba <_strtoul_r+0xd2>
 80a7fb8:	4240      	negs	r0, r0
 80a7fba:	b172      	cbz	r2, 80a7fda <_strtoul_r+0xf2>
 80a7fbc:	b106      	cbz	r6, 80a7fc0 <_strtoul_r+0xd8>
 80a7fbe:	1e69      	subs	r1, r5, #1
 80a7fc0:	6011      	str	r1, [r2, #0]
 80a7fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a7fc6:	2430      	movs	r4, #48	; 0x30
 80a7fc8:	2b00      	cmp	r3, #0
 80a7fca:	d1b9      	bne.n	80a7f40 <_strtoul_r+0x58>
 80a7fcc:	2308      	movs	r3, #8
 80a7fce:	e7b7      	b.n	80a7f40 <_strtoul_r+0x58>
 80a7fd0:	230a      	movs	r3, #10
 80a7fd2:	e7b5      	b.n	80a7f40 <_strtoul_r+0x58>
 80a7fd4:	2c30      	cmp	r4, #48	; 0x30
 80a7fd6:	d0ab      	beq.n	80a7f30 <_strtoul_r+0x48>
 80a7fd8:	e7b2      	b.n	80a7f40 <_strtoul_r+0x58>
 80a7fda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a7fde:	bf00      	nop
 80a7fe0:	20000010 	.word	0x20000010

080a7fe4 <strtoul>:
 80a7fe4:	4613      	mov	r3, r2
 80a7fe6:	460a      	mov	r2, r1
 80a7fe8:	4601      	mov	r1, r0
 80a7fea:	4802      	ldr	r0, [pc, #8]	; (80a7ff4 <strtoul+0x10>)
 80a7fec:	6800      	ldr	r0, [r0, #0]
 80a7fee:	f7ff bf7b 	b.w	80a7ee8 <_strtoul_r>
 80a7ff2:	bf00      	nop
 80a7ff4:	20000074 	.word	0x20000074

080a7ff8 <__get_current_time_locale>:
 80a7ff8:	4b04      	ldr	r3, [pc, #16]	; (80a800c <__get_current_time_locale+0x14>)
 80a7ffa:	4a05      	ldr	r2, [pc, #20]	; (80a8010 <__get_current_time_locale+0x18>)
 80a7ffc:	6818      	ldr	r0, [r3, #0]
 80a7ffe:	4b05      	ldr	r3, [pc, #20]	; (80a8014 <__get_current_time_locale+0x1c>)
 80a8000:	2800      	cmp	r0, #0
 80a8002:	bf14      	ite	ne
 80a8004:	4610      	movne	r0, r2
 80a8006:	4618      	moveq	r0, r3
 80a8008:	4770      	bx	lr
 80a800a:	bf00      	nop
 80a800c:	20000674 	.word	0x20000674
 80a8010:	20000678 	.word	0x20000678
 80a8014:	080aa130 	.word	0x080aa130

080a8018 <__tzcalc_limits>:
 80a8018:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a801c:	4604      	mov	r4, r0
 80a801e:	f000 fd91 	bl	80a8b44 <__gettzinfo>
 80a8022:	f240 73b1 	movw	r3, #1969	; 0x7b1
 80a8026:	429c      	cmp	r4, r3
 80a8028:	f340 8096 	ble.w	80a8158 <__tzcalc_limits+0x140>
 80a802c:	f240 156d 	movw	r5, #365	; 0x16d
 80a8030:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 80a8034:	18e3      	adds	r3, r4, r3
 80a8036:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
 80a803a:	109b      	asrs	r3, r3, #2
 80a803c:	fb05 3502 	mla	r5, r5, r2, r3
 80a8040:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
 80a8044:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80a8048:	fb92 f3f3 	sdiv	r3, r2, r3
 80a804c:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 80a8050:	442b      	add	r3, r5
 80a8052:	18a5      	adds	r5, r4, r2
 80a8054:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80a8058:	fb94 f7f2 	sdiv	r7, r4, r2
 80a805c:	fb95 f5f2 	sdiv	r5, r5, r2
 80a8060:	fb02 4717 	mls	r7, r2, r7, r4
 80a8064:	441d      	add	r5, r3
 80a8066:	2364      	movs	r3, #100	; 0x64
 80a8068:	fb94 f6f3 	sdiv	r6, r4, r3
 80a806c:	fab7 fe87 	clz	lr, r7
 80a8070:	4601      	mov	r1, r0
 80a8072:	fb03 4616 	mls	r6, r3, r6, r4
 80a8076:	f100 0338 	add.w	r3, r0, #56	; 0x38
 80a807a:	9301      	str	r3, [sp, #4]
 80a807c:	f004 0303 	and.w	r3, r4, #3
 80a8080:	6044      	str	r4, [r0, #4]
 80a8082:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80a8086:	9300      	str	r3, [sp, #0]
 80a8088:	f04f 0c07 	mov.w	ip, #7
 80a808c:	7a0b      	ldrb	r3, [r1, #8]
 80a808e:	2b4a      	cmp	r3, #74	; 0x4a
 80a8090:	d10e      	bne.n	80a80b0 <__tzcalc_limits+0x98>
 80a8092:	694b      	ldr	r3, [r1, #20]
 80a8094:	9a00      	ldr	r2, [sp, #0]
 80a8096:	18ec      	adds	r4, r5, r3
 80a8098:	b902      	cbnz	r2, 80a809c <__tzcalc_limits+0x84>
 80a809a:	b906      	cbnz	r6, 80a809e <__tzcalc_limits+0x86>
 80a809c:	b927      	cbnz	r7, 80a80a8 <__tzcalc_limits+0x90>
 80a809e:	2b3b      	cmp	r3, #59	; 0x3b
 80a80a0:	bfd4      	ite	le
 80a80a2:	2300      	movle	r3, #0
 80a80a4:	2301      	movgt	r3, #1
 80a80a6:	e000      	b.n	80a80aa <__tzcalc_limits+0x92>
 80a80a8:	2300      	movs	r3, #0
 80a80aa:	4423      	add	r3, r4
 80a80ac:	3b01      	subs	r3, #1
 80a80ae:	e03f      	b.n	80a8130 <__tzcalc_limits+0x118>
 80a80b0:	2b44      	cmp	r3, #68	; 0x44
 80a80b2:	d102      	bne.n	80a80ba <__tzcalc_limits+0xa2>
 80a80b4:	694b      	ldr	r3, [r1, #20]
 80a80b6:	442b      	add	r3, r5
 80a80b8:	e03a      	b.n	80a8130 <__tzcalc_limits+0x118>
 80a80ba:	9b00      	ldr	r3, [sp, #0]
 80a80bc:	b92b      	cbnz	r3, 80a80ca <__tzcalc_limits+0xb2>
 80a80be:	2e00      	cmp	r6, #0
 80a80c0:	bf0c      	ite	eq
 80a80c2:	46f0      	moveq	r8, lr
 80a80c4:	f04f 0801 	movne.w	r8, #1
 80a80c8:	e000      	b.n	80a80cc <__tzcalc_limits+0xb4>
 80a80ca:	46f0      	mov	r8, lr
 80a80cc:	46a9      	mov	r9, r5
 80a80ce:	4b24      	ldr	r3, [pc, #144]	; (80a8160 <__tzcalc_limits+0x148>)
 80a80d0:	2230      	movs	r2, #48	; 0x30
 80a80d2:	fb02 3808 	mla	r8, r2, r8, r3
 80a80d6:	68cc      	ldr	r4, [r1, #12]
 80a80d8:	f1a8 0a04 	sub.w	sl, r8, #4
 80a80dc:	2301      	movs	r3, #1
 80a80de:	42a3      	cmp	r3, r4
 80a80e0:	da04      	bge.n	80a80ec <__tzcalc_limits+0xd4>
 80a80e2:	f85a bf04 	ldr.w	fp, [sl, #4]!
 80a80e6:	3301      	adds	r3, #1
 80a80e8:	44d9      	add	r9, fp
 80a80ea:	e7f8      	b.n	80a80de <__tzcalc_limits+0xc6>
 80a80ec:	f109 0304 	add.w	r3, r9, #4
 80a80f0:	fb93 fbfc 	sdiv	fp, r3, ip
 80a80f4:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
 80a80f8:	ebca 0a03 	rsb	sl, sl, r3
 80a80fc:	694b      	ldr	r3, [r1, #20]
 80a80fe:	2c01      	cmp	r4, #1
 80a8100:	bfb8      	it	lt
 80a8102:	2401      	movlt	r4, #1
 80a8104:	ebb3 0a0a 	subs.w	sl, r3, sl
 80a8108:	690b      	ldr	r3, [r1, #16]
 80a810a:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 80a810e:	f103 33ff 	add.w	r3, r3, #4294967295
 80a8112:	f104 34ff 	add.w	r4, r4, #4294967295
 80a8116:	bf48      	it	mi
 80a8118:	f10a 0a07 	addmi.w	sl, sl, #7
 80a811c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a8120:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 80a8124:	4453      	add	r3, sl
 80a8126:	42a3      	cmp	r3, r4
 80a8128:	db01      	blt.n	80a812e <__tzcalc_limits+0x116>
 80a812a:	3b07      	subs	r3, #7
 80a812c:	e7fb      	b.n	80a8126 <__tzcalc_limits+0x10e>
 80a812e:	444b      	add	r3, r9
 80a8130:	698c      	ldr	r4, [r1, #24]
 80a8132:	4a0c      	ldr	r2, [pc, #48]	; (80a8164 <__tzcalc_limits+0x14c>)
 80a8134:	fb02 4303 	mla	r3, r2, r3, r4
 80a8138:	6a0c      	ldr	r4, [r1, #32]
 80a813a:	4423      	add	r3, r4
 80a813c:	f841 3f1c 	str.w	r3, [r1, #28]!
 80a8140:	9b01      	ldr	r3, [sp, #4]
 80a8142:	4299      	cmp	r1, r3
 80a8144:	d1a2      	bne.n	80a808c <__tzcalc_limits+0x74>
 80a8146:	69c3      	ldr	r3, [r0, #28]
 80a8148:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80a814a:	4293      	cmp	r3, r2
 80a814c:	bfac      	ite	ge
 80a814e:	2300      	movge	r3, #0
 80a8150:	2301      	movlt	r3, #1
 80a8152:	6003      	str	r3, [r0, #0]
 80a8154:	2001      	movs	r0, #1
 80a8156:	e000      	b.n	80a815a <__tzcalc_limits+0x142>
 80a8158:	2000      	movs	r0, #0
 80a815a:	b003      	add	sp, #12
 80a815c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a8160:	080a9ef0 	.word	0x080a9ef0
 80a8164:	00015180 	.word	0x00015180

080a8168 <__tz_lock>:
 80a8168:	4770      	bx	lr

080a816a <__tz_unlock>:
 80a816a:	4770      	bx	lr

080a816c <_tzset_unlocked>:
 80a816c:	4b01      	ldr	r3, [pc, #4]	; (80a8174 <_tzset_unlocked+0x8>)
 80a816e:	6818      	ldr	r0, [r3, #0]
 80a8170:	f000 b802 	b.w	80a8178 <_tzset_unlocked_r>
 80a8174:	20000074 	.word	0x20000074

080a8178 <_tzset_unlocked_r>:
 80a8178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a817c:	b08d      	sub	sp, #52	; 0x34
 80a817e:	4607      	mov	r7, r0
 80a8180:	f000 fce0 	bl	80a8b44 <__gettzinfo>
 80a8184:	49b0      	ldr	r1, [pc, #704]	; (80a8448 <_tzset_unlocked_r+0x2d0>)
 80a8186:	4604      	mov	r4, r0
 80a8188:	4638      	mov	r0, r7
 80a818a:	f000 fcd3 	bl	80a8b34 <_getenv_r>
 80a818e:	4eaf      	ldr	r6, [pc, #700]	; (80a844c <_tzset_unlocked_r+0x2d4>)
 80a8190:	4605      	mov	r5, r0
 80a8192:	b960      	cbnz	r0, 80a81ae <_tzset_unlocked_r+0x36>
 80a8194:	4bae      	ldr	r3, [pc, #696]	; (80a8450 <_tzset_unlocked_r+0x2d8>)
 80a8196:	4aaf      	ldr	r2, [pc, #700]	; (80a8454 <_tzset_unlocked_r+0x2dc>)
 80a8198:	6018      	str	r0, [r3, #0]
 80a819a:	4baf      	ldr	r3, [pc, #700]	; (80a8458 <_tzset_unlocked_r+0x2e0>)
 80a819c:	6018      	str	r0, [r3, #0]
 80a819e:	4baf      	ldr	r3, [pc, #700]	; (80a845c <_tzset_unlocked_r+0x2e4>)
 80a81a0:	6830      	ldr	r0, [r6, #0]
 80a81a2:	601a      	str	r2, [r3, #0]
 80a81a4:	605a      	str	r2, [r3, #4]
 80a81a6:	f7fb f89f 	bl	80a32e8 <free>
 80a81aa:	6035      	str	r5, [r6, #0]
 80a81ac:	e148      	b.n	80a8440 <_tzset_unlocked_r+0x2c8>
 80a81ae:	6831      	ldr	r1, [r6, #0]
 80a81b0:	b979      	cbnz	r1, 80a81d2 <_tzset_unlocked_r+0x5a>
 80a81b2:	6830      	ldr	r0, [r6, #0]
 80a81b4:	f7fb f898 	bl	80a32e8 <free>
 80a81b8:	4628      	mov	r0, r5
 80a81ba:	f7fe ffab 	bl	80a7114 <strlen>
 80a81be:	1c41      	adds	r1, r0, #1
 80a81c0:	4638      	mov	r0, r7
 80a81c2:	f7fb f8c9 	bl	80a3358 <_malloc_r>
 80a81c6:	6030      	str	r0, [r6, #0]
 80a81c8:	b148      	cbz	r0, 80a81de <_tzset_unlocked_r+0x66>
 80a81ca:	4629      	mov	r1, r5
 80a81cc:	f7fe fa86 	bl	80a66dc <strcpy>
 80a81d0:	e005      	b.n	80a81de <_tzset_unlocked_r+0x66>
 80a81d2:	f7fe fa79 	bl	80a66c8 <strcmp>
 80a81d6:	2800      	cmp	r0, #0
 80a81d8:	f000 8132 	beq.w	80a8440 <_tzset_unlocked_r+0x2c8>
 80a81dc:	e7e9      	b.n	80a81b2 <_tzset_unlocked_r+0x3a>
 80a81de:	782b      	ldrb	r3, [r5, #0]
 80a81e0:	ae0a      	add	r6, sp, #40	; 0x28
 80a81e2:	2b3a      	cmp	r3, #58	; 0x3a
 80a81e4:	bf08      	it	eq
 80a81e6:	3501      	addeq	r5, #1
 80a81e8:	4633      	mov	r3, r6
 80a81ea:	4a9d      	ldr	r2, [pc, #628]	; (80a8460 <_tzset_unlocked_r+0x2e8>)
 80a81ec:	499d      	ldr	r1, [pc, #628]	; (80a8464 <_tzset_unlocked_r+0x2ec>)
 80a81ee:	4628      	mov	r0, r5
 80a81f0:	f7fb f892 	bl	80a3318 <siscanf>
 80a81f4:	2800      	cmp	r0, #0
 80a81f6:	f340 8123 	ble.w	80a8440 <_tzset_unlocked_r+0x2c8>
 80a81fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a81fc:	18ef      	adds	r7, r5, r3
 80a81fe:	5ceb      	ldrb	r3, [r5, r3]
 80a8200:	2b2d      	cmp	r3, #45	; 0x2d
 80a8202:	d103      	bne.n	80a820c <_tzset_unlocked_r+0x94>
 80a8204:	3701      	adds	r7, #1
 80a8206:	f04f 35ff 	mov.w	r5, #4294967295
 80a820a:	e003      	b.n	80a8214 <_tzset_unlocked_r+0x9c>
 80a820c:	2b2b      	cmp	r3, #43	; 0x2b
 80a820e:	bf08      	it	eq
 80a8210:	3701      	addeq	r7, #1
 80a8212:	2501      	movs	r5, #1
 80a8214:	f10d 0a20 	add.w	sl, sp, #32
 80a8218:	f10d 0b1e 	add.w	fp, sp, #30
 80a821c:	f04f 0800 	mov.w	r8, #0
 80a8220:	9603      	str	r6, [sp, #12]
 80a8222:	f8cd a008 	str.w	sl, [sp, #8]
 80a8226:	9601      	str	r6, [sp, #4]
 80a8228:	f8cd b000 	str.w	fp, [sp]
 80a822c:	4633      	mov	r3, r6
 80a822e:	aa07      	add	r2, sp, #28
 80a8230:	498d      	ldr	r1, [pc, #564]	; (80a8468 <_tzset_unlocked_r+0x2f0>)
 80a8232:	4638      	mov	r0, r7
 80a8234:	f8ad 801e 	strh.w	r8, [sp, #30]
 80a8238:	f8ad 8020 	strh.w	r8, [sp, #32]
 80a823c:	f7fb f86c 	bl	80a3318 <siscanf>
 80a8240:	4540      	cmp	r0, r8
 80a8242:	f340 80fd 	ble.w	80a8440 <_tzset_unlocked_r+0x2c8>
 80a8246:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80a824a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80a824e:	213c      	movs	r1, #60	; 0x3c
 80a8250:	fb01 3302 	mla	r3, r1, r2, r3
 80a8254:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80a8258:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a825c:	fb01 3302 	mla	r3, r1, r2, r3
 80a8260:	435d      	muls	r5, r3
 80a8262:	4b7f      	ldr	r3, [pc, #508]	; (80a8460 <_tzset_unlocked_r+0x2e8>)
 80a8264:	6225      	str	r5, [r4, #32]
 80a8266:	4d7d      	ldr	r5, [pc, #500]	; (80a845c <_tzset_unlocked_r+0x2e4>)
 80a8268:	f8df 9208 	ldr.w	r9, [pc, #520]	; 80a8474 <_tzset_unlocked_r+0x2fc>
 80a826c:	602b      	str	r3, [r5, #0]
 80a826e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a8270:	464a      	mov	r2, r9
 80a8272:	441f      	add	r7, r3
 80a8274:	497b      	ldr	r1, [pc, #492]	; (80a8464 <_tzset_unlocked_r+0x2ec>)
 80a8276:	4633      	mov	r3, r6
 80a8278:	4638      	mov	r0, r7
 80a827a:	f7fb f84d 	bl	80a3318 <siscanf>
 80a827e:	4540      	cmp	r0, r8
 80a8280:	dc08      	bgt.n	80a8294 <_tzset_unlocked_r+0x11c>
 80a8282:	682b      	ldr	r3, [r5, #0]
 80a8284:	6a22      	ldr	r2, [r4, #32]
 80a8286:	606b      	str	r3, [r5, #4]
 80a8288:	4b71      	ldr	r3, [pc, #452]	; (80a8450 <_tzset_unlocked_r+0x2d8>)
 80a828a:	601a      	str	r2, [r3, #0]
 80a828c:	4b72      	ldr	r3, [pc, #456]	; (80a8458 <_tzset_unlocked_r+0x2e0>)
 80a828e:	f8c3 8000 	str.w	r8, [r3]
 80a8292:	e0d5      	b.n	80a8440 <_tzset_unlocked_r+0x2c8>
 80a8294:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a8296:	f8c5 9004 	str.w	r9, [r5, #4]
 80a829a:	18fd      	adds	r5, r7, r3
 80a829c:	5cfb      	ldrb	r3, [r7, r3]
 80a829e:	2b2d      	cmp	r3, #45	; 0x2d
 80a82a0:	d103      	bne.n	80a82aa <_tzset_unlocked_r+0x132>
 80a82a2:	3501      	adds	r5, #1
 80a82a4:	f04f 37ff 	mov.w	r7, #4294967295
 80a82a8:	e003      	b.n	80a82b2 <_tzset_unlocked_r+0x13a>
 80a82aa:	2b2b      	cmp	r3, #43	; 0x2b
 80a82ac:	bf08      	it	eq
 80a82ae:	3501      	addeq	r5, #1
 80a82b0:	2701      	movs	r7, #1
 80a82b2:	2300      	movs	r3, #0
 80a82b4:	f8ad 301c 	strh.w	r3, [sp, #28]
 80a82b8:	f8ad 301e 	strh.w	r3, [sp, #30]
 80a82bc:	f8ad 3020 	strh.w	r3, [sp, #32]
 80a82c0:	930a      	str	r3, [sp, #40]	; 0x28
 80a82c2:	9603      	str	r6, [sp, #12]
 80a82c4:	f8cd a008 	str.w	sl, [sp, #8]
 80a82c8:	9601      	str	r6, [sp, #4]
 80a82ca:	f8cd b000 	str.w	fp, [sp]
 80a82ce:	4633      	mov	r3, r6
 80a82d0:	aa07      	add	r2, sp, #28
 80a82d2:	4965      	ldr	r1, [pc, #404]	; (80a8468 <_tzset_unlocked_r+0x2f0>)
 80a82d4:	4628      	mov	r0, r5
 80a82d6:	f7fb f81f 	bl	80a3318 <siscanf>
 80a82da:	2800      	cmp	r0, #0
 80a82dc:	dc04      	bgt.n	80a82e8 <_tzset_unlocked_r+0x170>
 80a82de:	6a23      	ldr	r3, [r4, #32]
 80a82e0:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 80a82e4:	63e3      	str	r3, [r4, #60]	; 0x3c
 80a82e6:	e00e      	b.n	80a8306 <_tzset_unlocked_r+0x18e>
 80a82e8:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80a82ec:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80a82f0:	213c      	movs	r1, #60	; 0x3c
 80a82f2:	fb01 3302 	mla	r3, r1, r2, r3
 80a82f6:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80a82fa:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a82fe:	fb01 3302 	mla	r3, r1, r2, r3
 80a8302:	435f      	muls	r7, r3
 80a8304:	63e7      	str	r7, [r4, #60]	; 0x3c
 80a8306:	4627      	mov	r7, r4
 80a8308:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a830a:	f04f 0900 	mov.w	r9, #0
 80a830e:	441d      	add	r5, r3
 80a8310:	782b      	ldrb	r3, [r5, #0]
 80a8312:	2b2c      	cmp	r3, #44	; 0x2c
 80a8314:	bf08      	it	eq
 80a8316:	3501      	addeq	r5, #1
 80a8318:	f895 8000 	ldrb.w	r8, [r5]
 80a831c:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 80a8320:	d126      	bne.n	80a8370 <_tzset_unlocked_r+0x1f8>
 80a8322:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 80a8326:	9302      	str	r3, [sp, #8]
 80a8328:	ab09      	add	r3, sp, #36	; 0x24
 80a832a:	9300      	str	r3, [sp, #0]
 80a832c:	9603      	str	r6, [sp, #12]
 80a832e:	9601      	str	r6, [sp, #4]
 80a8330:	4633      	mov	r3, r6
 80a8332:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 80a8336:	494d      	ldr	r1, [pc, #308]	; (80a846c <_tzset_unlocked_r+0x2f4>)
 80a8338:	4628      	mov	r0, r5
 80a833a:	f7fa ffed 	bl	80a3318 <siscanf>
 80a833e:	2803      	cmp	r0, #3
 80a8340:	d17e      	bne.n	80a8440 <_tzset_unlocked_r+0x2c8>
 80a8342:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 80a8346:	1e4b      	subs	r3, r1, #1
 80a8348:	2b0b      	cmp	r3, #11
 80a834a:	d879      	bhi.n	80a8440 <_tzset_unlocked_r+0x2c8>
 80a834c:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 80a8350:	1e53      	subs	r3, r2, #1
 80a8352:	2b04      	cmp	r3, #4
 80a8354:	d874      	bhi.n	80a8440 <_tzset_unlocked_r+0x2c8>
 80a8356:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 80a835a:	2b06      	cmp	r3, #6
 80a835c:	d870      	bhi.n	80a8440 <_tzset_unlocked_r+0x2c8>
 80a835e:	f887 8008 	strb.w	r8, [r7, #8]
 80a8362:	60f9      	str	r1, [r7, #12]
 80a8364:	613a      	str	r2, [r7, #16]
 80a8366:	617b      	str	r3, [r7, #20]
 80a8368:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a836a:	eb05 0803 	add.w	r8, r5, r3
 80a836e:	e02a      	b.n	80a83c6 <_tzset_unlocked_r+0x24e>
 80a8370:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 80a8374:	bf06      	itte	eq
 80a8376:	4643      	moveq	r3, r8
 80a8378:	3501      	addeq	r5, #1
 80a837a:	2344      	movne	r3, #68	; 0x44
 80a837c:	220a      	movs	r2, #10
 80a837e:	a90b      	add	r1, sp, #44	; 0x2c
 80a8380:	4628      	mov	r0, r5
 80a8382:	9305      	str	r3, [sp, #20]
 80a8384:	f7ff fe2e 	bl	80a7fe4 <strtoul>
 80a8388:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 80a838c:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 80a8390:	4545      	cmp	r5, r8
 80a8392:	9b05      	ldr	r3, [sp, #20]
 80a8394:	d114      	bne.n	80a83c0 <_tzset_unlocked_r+0x248>
 80a8396:	234d      	movs	r3, #77	; 0x4d
 80a8398:	f1b9 0f00 	cmp.w	r9, #0
 80a839c:	d107      	bne.n	80a83ae <_tzset_unlocked_r+0x236>
 80a839e:	7223      	strb	r3, [r4, #8]
 80a83a0:	2303      	movs	r3, #3
 80a83a2:	60e3      	str	r3, [r4, #12]
 80a83a4:	2302      	movs	r3, #2
 80a83a6:	6123      	str	r3, [r4, #16]
 80a83a8:	f8c4 9014 	str.w	r9, [r4, #20]
 80a83ac:	e00b      	b.n	80a83c6 <_tzset_unlocked_r+0x24e>
 80a83ae:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 80a83b2:	230b      	movs	r3, #11
 80a83b4:	62a3      	str	r3, [r4, #40]	; 0x28
 80a83b6:	2301      	movs	r3, #1
 80a83b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80a83ba:	2300      	movs	r3, #0
 80a83bc:	6323      	str	r3, [r4, #48]	; 0x30
 80a83be:	e002      	b.n	80a83c6 <_tzset_unlocked_r+0x24e>
 80a83c0:	b280      	uxth	r0, r0
 80a83c2:	723b      	strb	r3, [r7, #8]
 80a83c4:	6178      	str	r0, [r7, #20]
 80a83c6:	2302      	movs	r3, #2
 80a83c8:	f8ad 301c 	strh.w	r3, [sp, #28]
 80a83cc:	2300      	movs	r3, #0
 80a83ce:	f8ad 301e 	strh.w	r3, [sp, #30]
 80a83d2:	f8ad 3020 	strh.w	r3, [sp, #32]
 80a83d6:	930a      	str	r3, [sp, #40]	; 0x28
 80a83d8:	f898 3000 	ldrb.w	r3, [r8]
 80a83dc:	2b2f      	cmp	r3, #47	; 0x2f
 80a83de:	d10b      	bne.n	80a83f8 <_tzset_unlocked_r+0x280>
 80a83e0:	9603      	str	r6, [sp, #12]
 80a83e2:	f8cd a008 	str.w	sl, [sp, #8]
 80a83e6:	9601      	str	r6, [sp, #4]
 80a83e8:	f8cd b000 	str.w	fp, [sp]
 80a83ec:	4633      	mov	r3, r6
 80a83ee:	aa07      	add	r2, sp, #28
 80a83f0:	491f      	ldr	r1, [pc, #124]	; (80a8470 <_tzset_unlocked_r+0x2f8>)
 80a83f2:	4640      	mov	r0, r8
 80a83f4:	f7fa ff90 	bl	80a3318 <siscanf>
 80a83f8:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80a83fc:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80a8400:	213c      	movs	r1, #60	; 0x3c
 80a8402:	fb01 3302 	mla	r3, r1, r2, r3
 80a8406:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80a840a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a840e:	fb01 3302 	mla	r3, r1, r2, r3
 80a8412:	61bb      	str	r3, [r7, #24]
 80a8414:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80a8416:	f109 0901 	add.w	r9, r9, #1
 80a841a:	f1b9 0f02 	cmp.w	r9, #2
 80a841e:	4445      	add	r5, r8
 80a8420:	f107 071c 	add.w	r7, r7, #28
 80a8424:	f47f af74 	bne.w	80a8310 <_tzset_unlocked_r+0x198>
 80a8428:	6860      	ldr	r0, [r4, #4]
 80a842a:	f7ff fdf5 	bl	80a8018 <__tzcalc_limits>
 80a842e:	6a22      	ldr	r2, [r4, #32]
 80a8430:	4b07      	ldr	r3, [pc, #28]	; (80a8450 <_tzset_unlocked_r+0x2d8>)
 80a8432:	601a      	str	r2, [r3, #0]
 80a8434:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80a8436:	1a9b      	subs	r3, r3, r2
 80a8438:	4a07      	ldr	r2, [pc, #28]	; (80a8458 <_tzset_unlocked_r+0x2e0>)
 80a843a:	bf18      	it	ne
 80a843c:	2301      	movne	r3, #1
 80a843e:	6013      	str	r3, [r2, #0]
 80a8440:	b00d      	add	sp, #52	; 0x34
 80a8442:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a8446:	bf00      	nop
 80a8448:	080aa22c 	.word	0x080aa22c
 80a844c:	2000078c 	.word	0x2000078c
 80a8450:	20000794 	.word	0x20000794
 80a8454:	080aa22f 	.word	0x080aa22f
 80a8458:	20000790 	.word	0x20000790
 80a845c:	200000b0 	.word	0x200000b0
 80a8460:	2000077f 	.word	0x2000077f
 80a8464:	080aa233 	.word	0x080aa233
 80a8468:	080aa256 	.word	0x080aa256
 80a846c:	080aa242 	.word	0x080aa242
 80a8470:	080aa255 	.word	0x080aa255
 80a8474:	20000774 	.word	0x20000774

080a8478 <abs>:
 80a8478:	2800      	cmp	r0, #0
 80a847a:	bfb8      	it	lt
 80a847c:	4240      	neglt	r0, r0
 80a847e:	4770      	bx	lr

080a8480 <rshift>:
 80a8480:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a8482:	6906      	ldr	r6, [r0, #16]
 80a8484:	114b      	asrs	r3, r1, #5
 80a8486:	42b3      	cmp	r3, r6
 80a8488:	f100 0514 	add.w	r5, r0, #20
 80a848c:	da27      	bge.n	80a84de <rshift+0x5e>
 80a848e:	f011 011f 	ands.w	r1, r1, #31
 80a8492:	eb05 0686 	add.w	r6, r5, r6, lsl #2
 80a8496:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 80a849a:	d101      	bne.n	80a84a0 <rshift+0x20>
 80a849c:	4629      	mov	r1, r5
 80a849e:	e016      	b.n	80a84ce <rshift+0x4e>
 80a84a0:	1d14      	adds	r4, r2, #4
 80a84a2:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
 80a84a6:	462b      	mov	r3, r5
 80a84a8:	f1c1 0e20 	rsb	lr, r1, #32
 80a84ac:	40ca      	lsrs	r2, r1
 80a84ae:	42b4      	cmp	r4, r6
 80a84b0:	d209      	bcs.n	80a84c6 <rshift+0x46>
 80a84b2:	6827      	ldr	r7, [r4, #0]
 80a84b4:	fa07 f70e 	lsl.w	r7, r7, lr
 80a84b8:	433a      	orrs	r2, r7
 80a84ba:	f843 2b04 	str.w	r2, [r3], #4
 80a84be:	f854 2b04 	ldr.w	r2, [r4], #4
 80a84c2:	40ca      	lsrs	r2, r1
 80a84c4:	e7f3      	b.n	80a84ae <rshift+0x2e>
 80a84c6:	601a      	str	r2, [r3, #0]
 80a84c8:	b152      	cbz	r2, 80a84e0 <rshift+0x60>
 80a84ca:	3304      	adds	r3, #4
 80a84cc:	e008      	b.n	80a84e0 <rshift+0x60>
 80a84ce:	42b2      	cmp	r2, r6
 80a84d0:	460b      	mov	r3, r1
 80a84d2:	d205      	bcs.n	80a84e0 <rshift+0x60>
 80a84d4:	f852 3b04 	ldr.w	r3, [r2], #4
 80a84d8:	f841 3b04 	str.w	r3, [r1], #4
 80a84dc:	e7f7      	b.n	80a84ce <rshift+0x4e>
 80a84de:	462b      	mov	r3, r5
 80a84e0:	1b5b      	subs	r3, r3, r5
 80a84e2:	109b      	asrs	r3, r3, #2
 80a84e4:	6103      	str	r3, [r0, #16]
 80a84e6:	b903      	cbnz	r3, 80a84ea <rshift+0x6a>
 80a84e8:	6143      	str	r3, [r0, #20]
 80a84ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a84ec <__hexdig_fun>:
 80a84ec:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80a84f0:	2b09      	cmp	r3, #9
 80a84f2:	d801      	bhi.n	80a84f8 <__hexdig_fun+0xc>
 80a84f4:	3820      	subs	r0, #32
 80a84f6:	e00a      	b.n	80a850e <__hexdig_fun+0x22>
 80a84f8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80a84fc:	2b05      	cmp	r3, #5
 80a84fe:	d801      	bhi.n	80a8504 <__hexdig_fun+0x18>
 80a8500:	3847      	subs	r0, #71	; 0x47
 80a8502:	e004      	b.n	80a850e <__hexdig_fun+0x22>
 80a8504:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80a8508:	2b05      	cmp	r3, #5
 80a850a:	d802      	bhi.n	80a8512 <__hexdig_fun+0x26>
 80a850c:	3827      	subs	r0, #39	; 0x27
 80a850e:	b2c0      	uxtb	r0, r0
 80a8510:	4770      	bx	lr
 80a8512:	2000      	movs	r0, #0
 80a8514:	4770      	bx	lr

080a8516 <__gethex>:
 80a8516:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a851a:	b08b      	sub	sp, #44	; 0x2c
 80a851c:	468a      	mov	sl, r1
 80a851e:	4690      	mov	r8, r2
 80a8520:	9306      	str	r3, [sp, #24]
 80a8522:	9002      	str	r0, [sp, #8]
 80a8524:	f7fe f890 	bl	80a6648 <_localeconv_r>
 80a8528:	6803      	ldr	r3, [r0, #0]
 80a852a:	f04f 0b00 	mov.w	fp, #0
 80a852e:	4618      	mov	r0, r3
 80a8530:	9303      	str	r3, [sp, #12]
 80a8532:	f7fe fdef 	bl	80a7114 <strlen>
 80a8536:	9b03      	ldr	r3, [sp, #12]
 80a8538:	9001      	str	r0, [sp, #4]
 80a853a:	4403      	add	r3, r0
 80a853c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80a8540:	9307      	str	r3, [sp, #28]
 80a8542:	f8da 3000 	ldr.w	r3, [sl]
 80a8546:	3302      	adds	r3, #2
 80a8548:	461f      	mov	r7, r3
 80a854a:	f813 0b01 	ldrb.w	r0, [r3], #1
 80a854e:	2830      	cmp	r0, #48	; 0x30
 80a8550:	d102      	bne.n	80a8558 <__gethex+0x42>
 80a8552:	f10b 0b01 	add.w	fp, fp, #1
 80a8556:	e7f7      	b.n	80a8548 <__gethex+0x32>
 80a8558:	f7ff ffc8 	bl	80a84ec <__hexdig_fun>
 80a855c:	4604      	mov	r4, r0
 80a855e:	b9e0      	cbnz	r0, 80a859a <__gethex+0x84>
 80a8560:	9a01      	ldr	r2, [sp, #4]
 80a8562:	9903      	ldr	r1, [sp, #12]
 80a8564:	4638      	mov	r0, r7
 80a8566:	f7fe fddd 	bl	80a7124 <strncmp>
 80a856a:	2800      	cmp	r0, #0
 80a856c:	d134      	bne.n	80a85d8 <__gethex+0xc2>
 80a856e:	9b01      	ldr	r3, [sp, #4]
 80a8570:	5cf8      	ldrb	r0, [r7, r3]
 80a8572:	18fe      	adds	r6, r7, r3
 80a8574:	f7ff ffba 	bl	80a84ec <__hexdig_fun>
 80a8578:	b380      	cbz	r0, 80a85dc <__gethex+0xc6>
 80a857a:	4633      	mov	r3, r6
 80a857c:	7818      	ldrb	r0, [r3, #0]
 80a857e:	461f      	mov	r7, r3
 80a8580:	2830      	cmp	r0, #48	; 0x30
 80a8582:	f103 0301 	add.w	r3, r3, #1
 80a8586:	d0f9      	beq.n	80a857c <__gethex+0x66>
 80a8588:	f7ff ffb0 	bl	80a84ec <__hexdig_fun>
 80a858c:	fab0 f580 	clz	r5, r0
 80a8590:	4634      	mov	r4, r6
 80a8592:	096d      	lsrs	r5, r5, #5
 80a8594:	f04f 0b01 	mov.w	fp, #1
 80a8598:	e001      	b.n	80a859e <__gethex+0x88>
 80a859a:	2500      	movs	r5, #0
 80a859c:	462c      	mov	r4, r5
 80a859e:	463a      	mov	r2, r7
 80a85a0:	4616      	mov	r6, r2
 80a85a2:	7830      	ldrb	r0, [r6, #0]
 80a85a4:	3201      	adds	r2, #1
 80a85a6:	f7ff ffa1 	bl	80a84ec <__hexdig_fun>
 80a85aa:	2800      	cmp	r0, #0
 80a85ac:	d1f8      	bne.n	80a85a0 <__gethex+0x8a>
 80a85ae:	9a01      	ldr	r2, [sp, #4]
 80a85b0:	9903      	ldr	r1, [sp, #12]
 80a85b2:	4630      	mov	r0, r6
 80a85b4:	f7fe fdb6 	bl	80a7124 <strncmp>
 80a85b8:	b950      	cbnz	r0, 80a85d0 <__gethex+0xba>
 80a85ba:	b954      	cbnz	r4, 80a85d2 <__gethex+0xbc>
 80a85bc:	9b01      	ldr	r3, [sp, #4]
 80a85be:	18f4      	adds	r4, r6, r3
 80a85c0:	4622      	mov	r2, r4
 80a85c2:	4616      	mov	r6, r2
 80a85c4:	7830      	ldrb	r0, [r6, #0]
 80a85c6:	3201      	adds	r2, #1
 80a85c8:	f7ff ff90 	bl	80a84ec <__hexdig_fun>
 80a85cc:	2800      	cmp	r0, #0
 80a85ce:	d1f8      	bne.n	80a85c2 <__gethex+0xac>
 80a85d0:	b134      	cbz	r4, 80a85e0 <__gethex+0xca>
 80a85d2:	1ba4      	subs	r4, r4, r6
 80a85d4:	00a4      	lsls	r4, r4, #2
 80a85d6:	e003      	b.n	80a85e0 <__gethex+0xca>
 80a85d8:	463e      	mov	r6, r7
 80a85da:	e000      	b.n	80a85de <__gethex+0xc8>
 80a85dc:	4604      	mov	r4, r0
 80a85de:	2501      	movs	r5, #1
 80a85e0:	7833      	ldrb	r3, [r6, #0]
 80a85e2:	2b50      	cmp	r3, #80	; 0x50
 80a85e4:	d001      	beq.n	80a85ea <__gethex+0xd4>
 80a85e6:	2b70      	cmp	r3, #112	; 0x70
 80a85e8:	d12a      	bne.n	80a8640 <__gethex+0x12a>
 80a85ea:	7873      	ldrb	r3, [r6, #1]
 80a85ec:	2b2b      	cmp	r3, #43	; 0x2b
 80a85ee:	d008      	beq.n	80a8602 <__gethex+0xec>
 80a85f0:	2b2d      	cmp	r3, #45	; 0x2d
 80a85f2:	d003      	beq.n	80a85fc <__gethex+0xe6>
 80a85f4:	1c71      	adds	r1, r6, #1
 80a85f6:	f04f 0900 	mov.w	r9, #0
 80a85fa:	e005      	b.n	80a8608 <__gethex+0xf2>
 80a85fc:	f04f 0901 	mov.w	r9, #1
 80a8600:	e001      	b.n	80a8606 <__gethex+0xf0>
 80a8602:	f04f 0900 	mov.w	r9, #0
 80a8606:	1cb1      	adds	r1, r6, #2
 80a8608:	7808      	ldrb	r0, [r1, #0]
 80a860a:	f7ff ff6f 	bl	80a84ec <__hexdig_fun>
 80a860e:	1e43      	subs	r3, r0, #1
 80a8610:	b2db      	uxtb	r3, r3
 80a8612:	2b18      	cmp	r3, #24
 80a8614:	d814      	bhi.n	80a8640 <__gethex+0x12a>
 80a8616:	f1a0 0210 	sub.w	r2, r0, #16
 80a861a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80a861e:	f7ff ff65 	bl	80a84ec <__hexdig_fun>
 80a8622:	1e43      	subs	r3, r0, #1
 80a8624:	b2db      	uxtb	r3, r3
 80a8626:	2b18      	cmp	r3, #24
 80a8628:	d804      	bhi.n	80a8634 <__gethex+0x11e>
 80a862a:	230a      	movs	r3, #10
 80a862c:	fb03 0202 	mla	r2, r3, r2, r0
 80a8630:	3a10      	subs	r2, #16
 80a8632:	e7f2      	b.n	80a861a <__gethex+0x104>
 80a8634:	f1b9 0f00 	cmp.w	r9, #0
 80a8638:	d000      	beq.n	80a863c <__gethex+0x126>
 80a863a:	4252      	negs	r2, r2
 80a863c:	4414      	add	r4, r2
 80a863e:	e000      	b.n	80a8642 <__gethex+0x12c>
 80a8640:	4631      	mov	r1, r6
 80a8642:	f8ca 1000 	str.w	r1, [sl]
 80a8646:	b12d      	cbz	r5, 80a8654 <__gethex+0x13e>
 80a8648:	f1bb 0f00 	cmp.w	fp, #0
 80a864c:	bf14      	ite	ne
 80a864e:	2000      	movne	r0, #0
 80a8650:	2006      	moveq	r0, #6
 80a8652:	e17c      	b.n	80a894e <__gethex+0x438>
 80a8654:	4629      	mov	r1, r5
 80a8656:	1bf3      	subs	r3, r6, r7
 80a8658:	3b01      	subs	r3, #1
 80a865a:	2b07      	cmp	r3, #7
 80a865c:	dd02      	ble.n	80a8664 <__gethex+0x14e>
 80a865e:	3101      	adds	r1, #1
 80a8660:	105b      	asrs	r3, r3, #1
 80a8662:	e7fa      	b.n	80a865a <__gethex+0x144>
 80a8664:	9802      	ldr	r0, [sp, #8]
 80a8666:	f000 fb0b 	bl	80a8c80 <_Balloc>
 80a866a:	f04f 0900 	mov.w	r9, #0
 80a866e:	4605      	mov	r5, r0
 80a8670:	46cb      	mov	fp, r9
 80a8672:	9b01      	ldr	r3, [sp, #4]
 80a8674:	f100 0a14 	add.w	sl, r0, #20
 80a8678:	f1c3 0301 	rsb	r3, r3, #1
 80a867c:	f8cd a010 	str.w	sl, [sp, #16]
 80a8680:	9308      	str	r3, [sp, #32]
 80a8682:	42b7      	cmp	r7, r6
 80a8684:	d22f      	bcs.n	80a86e6 <__gethex+0x1d0>
 80a8686:	1e73      	subs	r3, r6, #1
 80a8688:	9305      	str	r3, [sp, #20]
 80a868a:	9a07      	ldr	r2, [sp, #28]
 80a868c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80a8690:	4293      	cmp	r3, r2
 80a8692:	d00b      	beq.n	80a86ac <__gethex+0x196>
 80a8694:	f1bb 0f20 	cmp.w	fp, #32
 80a8698:	d116      	bne.n	80a86c8 <__gethex+0x1b2>
 80a869a:	9b04      	ldr	r3, [sp, #16]
 80a869c:	f8c3 9000 	str.w	r9, [r3]
 80a86a0:	3304      	adds	r3, #4
 80a86a2:	f04f 0900 	mov.w	r9, #0
 80a86a6:	9304      	str	r3, [sp, #16]
 80a86a8:	46cb      	mov	fp, r9
 80a86aa:	e00d      	b.n	80a86c8 <__gethex+0x1b2>
 80a86ac:	9b05      	ldr	r3, [sp, #20]
 80a86ae:	9a08      	ldr	r2, [sp, #32]
 80a86b0:	4413      	add	r3, r2
 80a86b2:	429f      	cmp	r7, r3
 80a86b4:	d8ee      	bhi.n	80a8694 <__gethex+0x17e>
 80a86b6:	4618      	mov	r0, r3
 80a86b8:	9a01      	ldr	r2, [sp, #4]
 80a86ba:	9903      	ldr	r1, [sp, #12]
 80a86bc:	9309      	str	r3, [sp, #36]	; 0x24
 80a86be:	f7fe fd31 	bl	80a7124 <strncmp>
 80a86c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a86c4:	b168      	cbz	r0, 80a86e2 <__gethex+0x1cc>
 80a86c6:	e7e5      	b.n	80a8694 <__gethex+0x17e>
 80a86c8:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80a86cc:	f7ff ff0e 	bl	80a84ec <__hexdig_fun>
 80a86d0:	f000 000f 	and.w	r0, r0, #15
 80a86d4:	fa00 f00b 	lsl.w	r0, r0, fp
 80a86d8:	9b05      	ldr	r3, [sp, #20]
 80a86da:	ea49 0900 	orr.w	r9, r9, r0
 80a86de:	f10b 0b04 	add.w	fp, fp, #4
 80a86e2:	461e      	mov	r6, r3
 80a86e4:	e7cd      	b.n	80a8682 <__gethex+0x16c>
 80a86e6:	9804      	ldr	r0, [sp, #16]
 80a86e8:	f840 9b04 	str.w	r9, [r0], #4
 80a86ec:	ebca 0000 	rsb	r0, sl, r0
 80a86f0:	1080      	asrs	r0, r0, #2
 80a86f2:	6128      	str	r0, [r5, #16]
 80a86f4:	0147      	lsls	r7, r0, #5
 80a86f6:	4648      	mov	r0, r9
 80a86f8:	f000 fb87 	bl	80a8e0a <__hi0bits>
 80a86fc:	f8d8 6000 	ldr.w	r6, [r8]
 80a8700:	1a38      	subs	r0, r7, r0
 80a8702:	42b0      	cmp	r0, r6
 80a8704:	dd26      	ble.n	80a8754 <__gethex+0x23e>
 80a8706:	1b87      	subs	r7, r0, r6
 80a8708:	4639      	mov	r1, r7
 80a870a:	4628      	mov	r0, r5
 80a870c:	f000 fe7f 	bl	80a940e <__any_on>
 80a8710:	b1c8      	cbz	r0, 80a8746 <__gethex+0x230>
 80a8712:	1e7b      	subs	r3, r7, #1
 80a8714:	1159      	asrs	r1, r3, #5
 80a8716:	f003 021f 	and.w	r2, r3, #31
 80a871a:	f04f 0901 	mov.w	r9, #1
 80a871e:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80a8722:	fa09 f202 	lsl.w	r2, r9, r2
 80a8726:	420a      	tst	r2, r1
 80a8728:	d00e      	beq.n	80a8748 <__gethex+0x232>
 80a872a:	454b      	cmp	r3, r9
 80a872c:	dc02      	bgt.n	80a8734 <__gethex+0x21e>
 80a872e:	f04f 0902 	mov.w	r9, #2
 80a8732:	e009      	b.n	80a8748 <__gethex+0x232>
 80a8734:	1eb9      	subs	r1, r7, #2
 80a8736:	4628      	mov	r0, r5
 80a8738:	f000 fe69 	bl	80a940e <__any_on>
 80a873c:	2800      	cmp	r0, #0
 80a873e:	d0f6      	beq.n	80a872e <__gethex+0x218>
 80a8740:	f04f 0903 	mov.w	r9, #3
 80a8744:	e000      	b.n	80a8748 <__gethex+0x232>
 80a8746:	4681      	mov	r9, r0
 80a8748:	4639      	mov	r1, r7
 80a874a:	4628      	mov	r0, r5
 80a874c:	f7ff fe98 	bl	80a8480 <rshift>
 80a8750:	443c      	add	r4, r7
 80a8752:	e00c      	b.n	80a876e <__gethex+0x258>
 80a8754:	da09      	bge.n	80a876a <__gethex+0x254>
 80a8756:	1a37      	subs	r7, r6, r0
 80a8758:	4629      	mov	r1, r5
 80a875a:	463a      	mov	r2, r7
 80a875c:	9802      	ldr	r0, [sp, #8]
 80a875e:	f000 fc89 	bl	80a9074 <__lshift>
 80a8762:	4605      	mov	r5, r0
 80a8764:	1be4      	subs	r4, r4, r7
 80a8766:	f100 0a14 	add.w	sl, r0, #20
 80a876a:	f04f 0900 	mov.w	r9, #0
 80a876e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80a8772:	429c      	cmp	r4, r3
 80a8774:	dd08      	ble.n	80a8788 <__gethex+0x272>
 80a8776:	9802      	ldr	r0, [sp, #8]
 80a8778:	4629      	mov	r1, r5
 80a877a:	f000 fab6 	bl	80a8cea <_Bfree>
 80a877e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80a8780:	2300      	movs	r3, #0
 80a8782:	6013      	str	r3, [r2, #0]
 80a8784:	20a3      	movs	r0, #163	; 0xa3
 80a8786:	e0e2      	b.n	80a894e <__gethex+0x438>
 80a8788:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80a878c:	4284      	cmp	r4, r0
 80a878e:	da53      	bge.n	80a8838 <__gethex+0x322>
 80a8790:	1b04      	subs	r4, r0, r4
 80a8792:	42a6      	cmp	r6, r4
 80a8794:	dc2e      	bgt.n	80a87f4 <__gethex+0x2de>
 80a8796:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80a879a:	2b02      	cmp	r3, #2
 80a879c:	d01a      	beq.n	80a87d4 <__gethex+0x2be>
 80a879e:	2b03      	cmp	r3, #3
 80a87a0:	d01c      	beq.n	80a87dc <__gethex+0x2c6>
 80a87a2:	2b01      	cmp	r3, #1
 80a87a4:	d11d      	bne.n	80a87e2 <__gethex+0x2cc>
 80a87a6:	42a6      	cmp	r6, r4
 80a87a8:	d11b      	bne.n	80a87e2 <__gethex+0x2cc>
 80a87aa:	2e01      	cmp	r6, #1
 80a87ac:	dc0b      	bgt.n	80a87c6 <__gethex+0x2b0>
 80a87ae:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80a87b2:	9a06      	ldr	r2, [sp, #24]
 80a87b4:	2062      	movs	r0, #98	; 0x62
 80a87b6:	6013      	str	r3, [r2, #0]
 80a87b8:	2301      	movs	r3, #1
 80a87ba:	612b      	str	r3, [r5, #16]
 80a87bc:	f8ca 3000 	str.w	r3, [sl]
 80a87c0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80a87c2:	601d      	str	r5, [r3, #0]
 80a87c4:	e0c3      	b.n	80a894e <__gethex+0x438>
 80a87c6:	1e71      	subs	r1, r6, #1
 80a87c8:	4628      	mov	r0, r5
 80a87ca:	f000 fe20 	bl	80a940e <__any_on>
 80a87ce:	2800      	cmp	r0, #0
 80a87d0:	d1ed      	bne.n	80a87ae <__gethex+0x298>
 80a87d2:	e006      	b.n	80a87e2 <__gethex+0x2cc>
 80a87d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80a87d6:	2b00      	cmp	r3, #0
 80a87d8:	d0e9      	beq.n	80a87ae <__gethex+0x298>
 80a87da:	e002      	b.n	80a87e2 <__gethex+0x2cc>
 80a87dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80a87de:	2b00      	cmp	r3, #0
 80a87e0:	d1e5      	bne.n	80a87ae <__gethex+0x298>
 80a87e2:	9802      	ldr	r0, [sp, #8]
 80a87e4:	4629      	mov	r1, r5
 80a87e6:	f000 fa80 	bl	80a8cea <_Bfree>
 80a87ea:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80a87ec:	2300      	movs	r3, #0
 80a87ee:	6013      	str	r3, [r2, #0]
 80a87f0:	2050      	movs	r0, #80	; 0x50
 80a87f2:	e0ac      	b.n	80a894e <__gethex+0x438>
 80a87f4:	1e67      	subs	r7, r4, #1
 80a87f6:	f1b9 0f00 	cmp.w	r9, #0
 80a87fa:	d106      	bne.n	80a880a <__gethex+0x2f4>
 80a87fc:	b13f      	cbz	r7, 80a880e <__gethex+0x2f8>
 80a87fe:	4639      	mov	r1, r7
 80a8800:	4628      	mov	r0, r5
 80a8802:	f000 fe04 	bl	80a940e <__any_on>
 80a8806:	4681      	mov	r9, r0
 80a8808:	e001      	b.n	80a880e <__gethex+0x2f8>
 80a880a:	f04f 0901 	mov.w	r9, #1
 80a880e:	117a      	asrs	r2, r7, #5
 80a8810:	2301      	movs	r3, #1
 80a8812:	f007 071f 	and.w	r7, r7, #31
 80a8816:	fa03 f707 	lsl.w	r7, r3, r7
 80a881a:	f85a 3022 	ldr.w	r3, [sl, r2, lsl #2]
 80a881e:	4621      	mov	r1, r4
 80a8820:	421f      	tst	r7, r3
 80a8822:	4628      	mov	r0, r5
 80a8824:	bf18      	it	ne
 80a8826:	f049 0902 	orrne.w	r9, r9, #2
 80a882a:	1b36      	subs	r6, r6, r4
 80a882c:	f7ff fe28 	bl	80a8480 <rshift>
 80a8830:	2702      	movs	r7, #2
 80a8832:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80a8836:	e000      	b.n	80a883a <__gethex+0x324>
 80a8838:	2701      	movs	r7, #1
 80a883a:	f1b9 0f00 	cmp.w	r9, #0
 80a883e:	f000 8081 	beq.w	80a8944 <__gethex+0x42e>
 80a8842:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80a8846:	2b02      	cmp	r3, #2
 80a8848:	d00e      	beq.n	80a8868 <__gethex+0x352>
 80a884a:	2b03      	cmp	r3, #3
 80a884c:	d010      	beq.n	80a8870 <__gethex+0x35a>
 80a884e:	2b01      	cmp	r3, #1
 80a8850:	d176      	bne.n	80a8940 <__gethex+0x42a>
 80a8852:	f019 0f02 	tst.w	r9, #2
 80a8856:	d073      	beq.n	80a8940 <__gethex+0x42a>
 80a8858:	f8da 0000 	ldr.w	r0, [sl]
 80a885c:	ea49 0900 	orr.w	r9, r9, r0
 80a8860:	f019 0f01 	tst.w	r9, #1
 80a8864:	d107      	bne.n	80a8876 <__gethex+0x360>
 80a8866:	e06b      	b.n	80a8940 <__gethex+0x42a>
 80a8868:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80a886a:	f1c3 0301 	rsb	r3, r3, #1
 80a886e:	9315      	str	r3, [sp, #84]	; 0x54
 80a8870:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80a8872:	2b00      	cmp	r3, #0
 80a8874:	d064      	beq.n	80a8940 <__gethex+0x42a>
 80a8876:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80a887a:	f105 0314 	add.w	r3, r5, #20
 80a887e:	ea4f 098a 	mov.w	r9, sl, lsl #2
 80a8882:	eb03 0109 	add.w	r1, r3, r9
 80a8886:	2000      	movs	r0, #0
 80a8888:	681a      	ldr	r2, [r3, #0]
 80a888a:	f1b2 3fff 	cmp.w	r2, #4294967295
 80a888e:	d002      	beq.n	80a8896 <__gethex+0x380>
 80a8890:	3201      	adds	r2, #1
 80a8892:	601a      	str	r2, [r3, #0]
 80a8894:	e020      	b.n	80a88d8 <__gethex+0x3c2>
 80a8896:	f843 0b04 	str.w	r0, [r3], #4
 80a889a:	4299      	cmp	r1, r3
 80a889c:	d8f4      	bhi.n	80a8888 <__gethex+0x372>
 80a889e:	68ab      	ldr	r3, [r5, #8]
 80a88a0:	459a      	cmp	sl, r3
 80a88a2:	db12      	blt.n	80a88ca <__gethex+0x3b4>
 80a88a4:	6869      	ldr	r1, [r5, #4]
 80a88a6:	9802      	ldr	r0, [sp, #8]
 80a88a8:	3101      	adds	r1, #1
 80a88aa:	f000 f9e9 	bl	80a8c80 <_Balloc>
 80a88ae:	4683      	mov	fp, r0
 80a88b0:	692a      	ldr	r2, [r5, #16]
 80a88b2:	f105 010c 	add.w	r1, r5, #12
 80a88b6:	3202      	adds	r2, #2
 80a88b8:	0092      	lsls	r2, r2, #2
 80a88ba:	300c      	adds	r0, #12
 80a88bc:	f7fd fec8 	bl	80a6650 <memcpy>
 80a88c0:	4629      	mov	r1, r5
 80a88c2:	9802      	ldr	r0, [sp, #8]
 80a88c4:	f000 fa11 	bl	80a8cea <_Bfree>
 80a88c8:	465d      	mov	r5, fp
 80a88ca:	692b      	ldr	r3, [r5, #16]
 80a88cc:	1c5a      	adds	r2, r3, #1
 80a88ce:	612a      	str	r2, [r5, #16]
 80a88d0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80a88d4:	2201      	movs	r2, #1
 80a88d6:	615a      	str	r2, [r3, #20]
 80a88d8:	2f02      	cmp	r7, #2
 80a88da:	f105 0214 	add.w	r2, r5, #20
 80a88de:	d111      	bne.n	80a8904 <__gethex+0x3ee>
 80a88e0:	f8d8 3000 	ldr.w	r3, [r8]
 80a88e4:	3b01      	subs	r3, #1
 80a88e6:	429e      	cmp	r6, r3
 80a88e8:	d127      	bne.n	80a893a <__gethex+0x424>
 80a88ea:	1171      	asrs	r1, r6, #5
 80a88ec:	2301      	movs	r3, #1
 80a88ee:	f006 061f 	and.w	r6, r6, #31
 80a88f2:	fa03 f606 	lsl.w	r6, r3, r6
 80a88f6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80a88fa:	421e      	tst	r6, r3
 80a88fc:	bf0c      	ite	eq
 80a88fe:	2702      	moveq	r7, #2
 80a8900:	2701      	movne	r7, #1
 80a8902:	e01a      	b.n	80a893a <__gethex+0x424>
 80a8904:	692b      	ldr	r3, [r5, #16]
 80a8906:	459a      	cmp	sl, r3
 80a8908:	da0a      	bge.n	80a8920 <__gethex+0x40a>
 80a890a:	2101      	movs	r1, #1
 80a890c:	4628      	mov	r0, r5
 80a890e:	f7ff fdb7 	bl	80a8480 <rshift>
 80a8912:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80a8916:	3401      	adds	r4, #1
 80a8918:	429c      	cmp	r4, r3
 80a891a:	f73f af2c 	bgt.w	80a8776 <__gethex+0x260>
 80a891e:	e00b      	b.n	80a8938 <__gethex+0x422>
 80a8920:	f016 061f 	ands.w	r6, r6, #31
 80a8924:	d008      	beq.n	80a8938 <__gethex+0x422>
 80a8926:	4491      	add	r9, r2
 80a8928:	f859 0c04 	ldr.w	r0, [r9, #-4]
 80a892c:	f000 fa6d 	bl	80a8e0a <__hi0bits>
 80a8930:	f1c6 0620 	rsb	r6, r6, #32
 80a8934:	42b0      	cmp	r0, r6
 80a8936:	dbe8      	blt.n	80a890a <__gethex+0x3f4>
 80a8938:	2701      	movs	r7, #1
 80a893a:	f047 0720 	orr.w	r7, r7, #32
 80a893e:	e001      	b.n	80a8944 <__gethex+0x42e>
 80a8940:	f047 0710 	orr.w	r7, r7, #16
 80a8944:	4638      	mov	r0, r7
 80a8946:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80a8948:	601d      	str	r5, [r3, #0]
 80a894a:	9b06      	ldr	r3, [sp, #24]
 80a894c:	601c      	str	r4, [r3, #0]
 80a894e:	b00b      	add	sp, #44	; 0x2c
 80a8950:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a8954 <L_shift>:
 80a8954:	f1c2 0208 	rsb	r2, r2, #8
 80a8958:	0092      	lsls	r2, r2, #2
 80a895a:	b570      	push	{r4, r5, r6, lr}
 80a895c:	f1c2 0620 	rsb	r6, r2, #32
 80a8960:	6843      	ldr	r3, [r0, #4]
 80a8962:	6805      	ldr	r5, [r0, #0]
 80a8964:	fa03 f406 	lsl.w	r4, r3, r6
 80a8968:	432c      	orrs	r4, r5
 80a896a:	40d3      	lsrs	r3, r2
 80a896c:	6004      	str	r4, [r0, #0]
 80a896e:	f840 3f04 	str.w	r3, [r0, #4]!
 80a8972:	4288      	cmp	r0, r1
 80a8974:	d3f4      	bcc.n	80a8960 <L_shift+0xc>
 80a8976:	bd70      	pop	{r4, r5, r6, pc}

080a8978 <__match>:
 80a8978:	b530      	push	{r4, r5, lr}
 80a897a:	6803      	ldr	r3, [r0, #0]
 80a897c:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a8980:	3301      	adds	r3, #1
 80a8982:	b14c      	cbz	r4, 80a8998 <__match+0x20>
 80a8984:	781a      	ldrb	r2, [r3, #0]
 80a8986:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80a898a:	2d19      	cmp	r5, #25
 80a898c:	bf98      	it	ls
 80a898e:	3220      	addls	r2, #32
 80a8990:	42a2      	cmp	r2, r4
 80a8992:	d0f3      	beq.n	80a897c <__match+0x4>
 80a8994:	2000      	movs	r0, #0
 80a8996:	bd30      	pop	{r4, r5, pc}
 80a8998:	6003      	str	r3, [r0, #0]
 80a899a:	2001      	movs	r0, #1
 80a899c:	bd30      	pop	{r4, r5, pc}

080a899e <__hexnan>:
 80a899e:	680b      	ldr	r3, [r1, #0]
 80a89a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a89a4:	115e      	asrs	r6, r3, #5
 80a89a6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80a89aa:	f013 031f 	ands.w	r3, r3, #31
 80a89ae:	bf18      	it	ne
 80a89b0:	3604      	addne	r6, #4
 80a89b2:	1f35      	subs	r5, r6, #4
 80a89b4:	4617      	mov	r7, r2
 80a89b6:	2200      	movs	r2, #0
 80a89b8:	4682      	mov	sl, r0
 80a89ba:	46a8      	mov	r8, r5
 80a89bc:	462c      	mov	r4, r5
 80a89be:	4691      	mov	r9, r2
 80a89c0:	b085      	sub	sp, #20
 80a89c2:	f8d0 b000 	ldr.w	fp, [r0]
 80a89c6:	9301      	str	r3, [sp, #4]
 80a89c8:	f846 2c04 	str.w	r2, [r6, #-4]
 80a89cc:	9200      	str	r2, [sp, #0]
 80a89ce:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
 80a89d2:	2900      	cmp	r1, #0
 80a89d4:	d03c      	beq.n	80a8a50 <__hexnan+0xb2>
 80a89d6:	4608      	mov	r0, r1
 80a89d8:	9203      	str	r2, [sp, #12]
 80a89da:	9102      	str	r1, [sp, #8]
 80a89dc:	f7ff fd86 	bl	80a84ec <__hexdig_fun>
 80a89e0:	9a03      	ldr	r2, [sp, #12]
 80a89e2:	bb00      	cbnz	r0, 80a8a26 <__hexnan+0x88>
 80a89e4:	9902      	ldr	r1, [sp, #8]
 80a89e6:	2920      	cmp	r1, #32
 80a89e8:	d816      	bhi.n	80a8a18 <__hexnan+0x7a>
 80a89ea:	9b00      	ldr	r3, [sp, #0]
 80a89ec:	4599      	cmp	r9, r3
 80a89ee:	ddee      	ble.n	80a89ce <__hexnan+0x30>
 80a89f0:	4544      	cmp	r4, r8
 80a89f2:	d205      	bcs.n	80a8a00 <__hexnan+0x62>
 80a89f4:	2a07      	cmp	r2, #7
 80a89f6:	dc03      	bgt.n	80a8a00 <__hexnan+0x62>
 80a89f8:	4641      	mov	r1, r8
 80a89fa:	4620      	mov	r0, r4
 80a89fc:	f7ff ffaa 	bl	80a8954 <L_shift>
 80a8a00:	42bc      	cmp	r4, r7
 80a8a02:	d923      	bls.n	80a8a4c <__hexnan+0xae>
 80a8a04:	2300      	movs	r3, #0
 80a8a06:	f1a4 0804 	sub.w	r8, r4, #4
 80a8a0a:	f844 3c04 	str.w	r3, [r4, #-4]
 80a8a0e:	f8cd 9000 	str.w	r9, [sp]
 80a8a12:	4644      	mov	r4, r8
 80a8a14:	461a      	mov	r2, r3
 80a8a16:	e7da      	b.n	80a89ce <__hexnan+0x30>
 80a8a18:	2929      	cmp	r1, #41	; 0x29
 80a8a1a:	d148      	bne.n	80a8aae <__hexnan+0x110>
 80a8a1c:	f10b 0301 	add.w	r3, fp, #1
 80a8a20:	f8ca 3000 	str.w	r3, [sl]
 80a8a24:	e014      	b.n	80a8a50 <__hexnan+0xb2>
 80a8a26:	3201      	adds	r2, #1
 80a8a28:	2a08      	cmp	r2, #8
 80a8a2a:	f109 0901 	add.w	r9, r9, #1
 80a8a2e:	dd06      	ble.n	80a8a3e <__hexnan+0xa0>
 80a8a30:	42bc      	cmp	r4, r7
 80a8a32:	d9cc      	bls.n	80a89ce <__hexnan+0x30>
 80a8a34:	2300      	movs	r3, #0
 80a8a36:	f844 3c04 	str.w	r3, [r4, #-4]
 80a8a3a:	2201      	movs	r2, #1
 80a8a3c:	3c04      	subs	r4, #4
 80a8a3e:	6821      	ldr	r1, [r4, #0]
 80a8a40:	f000 000f 	and.w	r0, r0, #15
 80a8a44:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
 80a8a48:	6020      	str	r0, [r4, #0]
 80a8a4a:	e7c0      	b.n	80a89ce <__hexnan+0x30>
 80a8a4c:	2208      	movs	r2, #8
 80a8a4e:	e7be      	b.n	80a89ce <__hexnan+0x30>
 80a8a50:	f1b9 0f00 	cmp.w	r9, #0
 80a8a54:	d02b      	beq.n	80a8aae <__hexnan+0x110>
 80a8a56:	4544      	cmp	r4, r8
 80a8a58:	d205      	bcs.n	80a8a66 <__hexnan+0xc8>
 80a8a5a:	2a07      	cmp	r2, #7
 80a8a5c:	dc03      	bgt.n	80a8a66 <__hexnan+0xc8>
 80a8a5e:	4641      	mov	r1, r8
 80a8a60:	4620      	mov	r0, r4
 80a8a62:	f7ff ff77 	bl	80a8954 <L_shift>
 80a8a66:	42bc      	cmp	r4, r7
 80a8a68:	d90c      	bls.n	80a8a84 <__hexnan+0xe6>
 80a8a6a:	463b      	mov	r3, r7
 80a8a6c:	f854 2b04 	ldr.w	r2, [r4], #4
 80a8a70:	42a5      	cmp	r5, r4
 80a8a72:	f843 2b04 	str.w	r2, [r3], #4
 80a8a76:	d2f9      	bcs.n	80a8a6c <__hexnan+0xce>
 80a8a78:	2200      	movs	r2, #0
 80a8a7a:	f843 2b04 	str.w	r2, [r3], #4
 80a8a7e:	429d      	cmp	r5, r3
 80a8a80:	d2fb      	bcs.n	80a8a7a <__hexnan+0xdc>
 80a8a82:	e00b      	b.n	80a8a9c <__hexnan+0xfe>
 80a8a84:	9b01      	ldr	r3, [sp, #4]
 80a8a86:	b14b      	cbz	r3, 80a8a9c <__hexnan+0xfe>
 80a8a88:	f1c3 0220 	rsb	r2, r3, #32
 80a8a8c:	f04f 33ff 	mov.w	r3, #4294967295
 80a8a90:	40d3      	lsrs	r3, r2
 80a8a92:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80a8a96:	4013      	ands	r3, r2
 80a8a98:	f846 3c04 	str.w	r3, [r6, #-4]
 80a8a9c:	682b      	ldr	r3, [r5, #0]
 80a8a9e:	b943      	cbnz	r3, 80a8ab2 <__hexnan+0x114>
 80a8aa0:	42bd      	cmp	r5, r7
 80a8aa2:	d102      	bne.n	80a8aaa <__hexnan+0x10c>
 80a8aa4:	2301      	movs	r3, #1
 80a8aa6:	602b      	str	r3, [r5, #0]
 80a8aa8:	e003      	b.n	80a8ab2 <__hexnan+0x114>
 80a8aaa:	3d04      	subs	r5, #4
 80a8aac:	e7f6      	b.n	80a8a9c <__hexnan+0xfe>
 80a8aae:	2004      	movs	r0, #4
 80a8ab0:	e000      	b.n	80a8ab4 <__hexnan+0x116>
 80a8ab2:	2005      	movs	r0, #5
 80a8ab4:	b005      	add	sp, #20
 80a8ab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080a8abc <_findenv_r>:
 80a8abc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a8ac0:	4607      	mov	r7, r0
 80a8ac2:	468b      	mov	fp, r1
 80a8ac4:	4690      	mov	r8, r2
 80a8ac6:	f000 fcd2 	bl	80a946e <__env_lock>
 80a8aca:	4b19      	ldr	r3, [pc, #100]	; (80a8b30 <_findenv_r+0x74>)
 80a8acc:	681d      	ldr	r5, [r3, #0]
 80a8ace:	469a      	mov	sl, r3
 80a8ad0:	b13d      	cbz	r5, 80a8ae2 <_findenv_r+0x26>
 80a8ad2:	465c      	mov	r4, fp
 80a8ad4:	4623      	mov	r3, r4
 80a8ad6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a8ada:	b142      	cbz	r2, 80a8aee <_findenv_r+0x32>
 80a8adc:	2a3d      	cmp	r2, #61	; 0x3d
 80a8ade:	461c      	mov	r4, r3
 80a8ae0:	d1f8      	bne.n	80a8ad4 <_findenv_r+0x18>
 80a8ae2:	4638      	mov	r0, r7
 80a8ae4:	f000 fcc4 	bl	80a9470 <__env_unlock>
 80a8ae8:	2000      	movs	r0, #0
 80a8aea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a8aee:	ebcb 0404 	rsb	r4, fp, r4
 80a8af2:	46a9      	mov	r9, r5
 80a8af4:	f859 0b04 	ldr.w	r0, [r9], #4
 80a8af8:	2800      	cmp	r0, #0
 80a8afa:	d0f2      	beq.n	80a8ae2 <_findenv_r+0x26>
 80a8afc:	4622      	mov	r2, r4
 80a8afe:	4659      	mov	r1, fp
 80a8b00:	f7fe fb10 	bl	80a7124 <strncmp>
 80a8b04:	b988      	cbnz	r0, 80a8b2a <_findenv_r+0x6e>
 80a8b06:	f859 3c04 	ldr.w	r3, [r9, #-4]
 80a8b0a:	191e      	adds	r6, r3, r4
 80a8b0c:	5d1b      	ldrb	r3, [r3, r4]
 80a8b0e:	2b3d      	cmp	r3, #61	; 0x3d
 80a8b10:	d10b      	bne.n	80a8b2a <_findenv_r+0x6e>
 80a8b12:	f8da 3000 	ldr.w	r3, [sl]
 80a8b16:	4638      	mov	r0, r7
 80a8b18:	1aed      	subs	r5, r5, r3
 80a8b1a:	10ad      	asrs	r5, r5, #2
 80a8b1c:	f8c8 5000 	str.w	r5, [r8]
 80a8b20:	f000 fca6 	bl	80a9470 <__env_unlock>
 80a8b24:	1c70      	adds	r0, r6, #1
 80a8b26:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a8b2a:	464d      	mov	r5, r9
 80a8b2c:	e7e1      	b.n	80a8af2 <_findenv_r+0x36>
 80a8b2e:	bf00      	nop
 80a8b30:	200000f8 	.word	0x200000f8

080a8b34 <_getenv_r>:
 80a8b34:	b507      	push	{r0, r1, r2, lr}
 80a8b36:	aa01      	add	r2, sp, #4
 80a8b38:	f7ff ffc0 	bl	80a8abc <_findenv_r>
 80a8b3c:	b003      	add	sp, #12
 80a8b3e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a8b44 <__gettzinfo>:
 80a8b44:	4800      	ldr	r0, [pc, #0]	; (80a8b48 <__gettzinfo+0x4>)
 80a8b46:	4770      	bx	lr
 80a8b48:	200000b8 	.word	0x200000b8

080a8b4c <gmtime_r>:
 80a8b4c:	6802      	ldr	r2, [r0, #0]
 80a8b4e:	4b46      	ldr	r3, [pc, #280]	; (80a8c68 <gmtime_r+0x11c>)
 80a8b50:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a8b52:	fb92 f4f3 	sdiv	r4, r2, r3
 80a8b56:	fb03 2214 	mls	r2, r3, r4, r2
 80a8b5a:	2a00      	cmp	r2, #0
 80a8b5c:	bfbc      	itt	lt
 80a8b5e:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 80a8b62:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 80a8b66:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 80a8b6a:	fb92 f3f0 	sdiv	r3, r2, r0
 80a8b6e:	fb00 2213 	mls	r2, r0, r3, r2
 80a8b72:	f04f 003c 	mov.w	r0, #60	; 0x3c
 80a8b76:	608b      	str	r3, [r1, #8]
 80a8b78:	fb92 f3f0 	sdiv	r3, r2, r0
 80a8b7c:	fb00 2213 	mls	r2, r0, r3, r2
 80a8b80:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
 80a8b84:	bfac      	ite	ge
 80a8b86:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
 80a8b8a:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
 80a8b8e:	604b      	str	r3, [r1, #4]
 80a8b90:	600a      	str	r2, [r1, #0]
 80a8b92:	2307      	movs	r3, #7
 80a8b94:	1ce2      	adds	r2, r4, #3
 80a8b96:	fb92 f3f3 	sdiv	r3, r2, r3
 80a8b9a:	4d34      	ldr	r5, [pc, #208]	; (80a8c6c <gmtime_r+0x120>)
 80a8b9c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a8ba0:	fb94 f5f5 	sdiv	r5, r4, r5
 80a8ba4:	1ad3      	subs	r3, r2, r3
 80a8ba6:	f648 62ac 	movw	r2, #36524	; 0x8eac
 80a8baa:	f240 57b4 	movw	r7, #1460	; 0x5b4
 80a8bae:	618b      	str	r3, [r1, #24]
 80a8bb0:	4b2f      	ldr	r3, [pc, #188]	; (80a8c70 <gmtime_r+0x124>)
 80a8bb2:	4830      	ldr	r0, [pc, #192]	; (80a8c74 <gmtime_r+0x128>)
 80a8bb4:	fb03 4405 	mla	r4, r3, r5, r4
 80a8bb8:	fbb4 f2f2 	udiv	r2, r4, r2
 80a8bbc:	fbb4 f3f7 	udiv	r3, r4, r7
 80a8bc0:	fbb4 f0f0 	udiv	r0, r4, r0
 80a8bc4:	4422      	add	r2, r4
 80a8bc6:	1ad2      	subs	r2, r2, r3
 80a8bc8:	f648 6694 	movw	r6, #36500	; 0x8e94
 80a8bcc:	1a13      	subs	r3, r2, r0
 80a8bce:	f240 126d 	movw	r2, #365	; 0x16d
 80a8bd2:	fbb3 f6f6 	udiv	r6, r3, r6
 80a8bd6:	fbb3 f0f2 	udiv	r0, r3, r2
 80a8bda:	fbb3 f3f7 	udiv	r3, r3, r7
 80a8bde:	4434      	add	r4, r6
 80a8be0:	1ae3      	subs	r3, r4, r3
 80a8be2:	fb02 3310 	mls	r3, r2, r0, r3
 80a8be6:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80a8bea:	2499      	movs	r4, #153	; 0x99
 80a8bec:	3202      	adds	r2, #2
 80a8bee:	fbb2 f2f4 	udiv	r2, r2, r4
 80a8bf2:	4354      	muls	r4, r2
 80a8bf4:	1ca6      	adds	r6, r4, #2
 80a8bf6:	2405      	movs	r4, #5
 80a8bf8:	fbb6 f4f4 	udiv	r4, r6, r4
 80a8bfc:	2a0a      	cmp	r2, #10
 80a8bfe:	bf34      	ite	cc
 80a8c00:	2602      	movcc	r6, #2
 80a8c02:	f06f 0609 	mvncs.w	r6, #9
 80a8c06:	4416      	add	r6, r2
 80a8c08:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80a8c0c:	fb02 0505 	mla	r5, r2, r5, r0
 80a8c10:	1c5f      	adds	r7, r3, #1
 80a8c12:	2e01      	cmp	r6, #1
 80a8c14:	bf98      	it	ls
 80a8c16:	3501      	addls	r5, #1
 80a8c18:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 80a8c1c:	eba7 0704 	sub.w	r7, r7, r4
 80a8c20:	d302      	bcc.n	80a8c28 <gmtime_r+0xdc>
 80a8c22:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
 80a8c26:	e014      	b.n	80a8c52 <gmtime_r+0x106>
 80a8c28:	0782      	lsls	r2, r0, #30
 80a8c2a:	d105      	bne.n	80a8c38 <gmtime_r+0xec>
 80a8c2c:	2464      	movs	r4, #100	; 0x64
 80a8c2e:	fbb0 f2f4 	udiv	r2, r0, r4
 80a8c32:	fb04 0212 	mls	r2, r4, r2, r0
 80a8c36:	b94a      	cbnz	r2, 80a8c4c <gmtime_r+0x100>
 80a8c38:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80a8c3c:	fbb0 f4f2 	udiv	r4, r0, r2
 80a8c40:	fb02 0014 	mls	r0, r2, r4, r0
 80a8c44:	fab0 f280 	clz	r2, r0
 80a8c48:	0952      	lsrs	r2, r2, #5
 80a8c4a:	e000      	b.n	80a8c4e <gmtime_r+0x102>
 80a8c4c:	2201      	movs	r2, #1
 80a8c4e:	333b      	adds	r3, #59	; 0x3b
 80a8c50:	441a      	add	r2, r3
 80a8c52:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 80a8c56:	2300      	movs	r3, #0
 80a8c58:	61ca      	str	r2, [r1, #28]
 80a8c5a:	614d      	str	r5, [r1, #20]
 80a8c5c:	610e      	str	r6, [r1, #16]
 80a8c5e:	60cf      	str	r7, [r1, #12]
 80a8c60:	620b      	str	r3, [r1, #32]
 80a8c62:	4608      	mov	r0, r1
 80a8c64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a8c66:	bf00      	nop
 80a8c68:	00015180 	.word	0x00015180
 80a8c6c:	00023ab1 	.word	0x00023ab1
 80a8c70:	fffdc54f 	.word	0xfffdc54f
 80a8c74:	00023ab0 	.word	0x00023ab0

080a8c78 <labs>:
 80a8c78:	2800      	cmp	r0, #0
 80a8c7a:	bfb8      	it	lt
 80a8c7c:	4240      	neglt	r0, r0
 80a8c7e:	4770      	bx	lr

080a8c80 <_Balloc>:
 80a8c80:	b570      	push	{r4, r5, r6, lr}
 80a8c82:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80a8c84:	4604      	mov	r4, r0
 80a8c86:	460e      	mov	r6, r1
 80a8c88:	b93d      	cbnz	r5, 80a8c9a <_Balloc+0x1a>
 80a8c8a:	2010      	movs	r0, #16
 80a8c8c:	f7fa fb24 	bl	80a32d8 <malloc>
 80a8c90:	6260      	str	r0, [r4, #36]	; 0x24
 80a8c92:	6045      	str	r5, [r0, #4]
 80a8c94:	6085      	str	r5, [r0, #8]
 80a8c96:	6005      	str	r5, [r0, #0]
 80a8c98:	60c5      	str	r5, [r0, #12]
 80a8c9a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80a8c9c:	68eb      	ldr	r3, [r5, #12]
 80a8c9e:	b143      	cbz	r3, 80a8cb2 <_Balloc+0x32>
 80a8ca0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80a8ca2:	68db      	ldr	r3, [r3, #12]
 80a8ca4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80a8ca8:	b178      	cbz	r0, 80a8cca <_Balloc+0x4a>
 80a8caa:	6802      	ldr	r2, [r0, #0]
 80a8cac:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80a8cb0:	e017      	b.n	80a8ce2 <_Balloc+0x62>
 80a8cb2:	2221      	movs	r2, #33	; 0x21
 80a8cb4:	2104      	movs	r1, #4
 80a8cb6:	4620      	mov	r0, r4
 80a8cb8:	f000 fbcb 	bl	80a9452 <_calloc_r>
 80a8cbc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80a8cbe:	60e8      	str	r0, [r5, #12]
 80a8cc0:	68db      	ldr	r3, [r3, #12]
 80a8cc2:	2b00      	cmp	r3, #0
 80a8cc4:	d1ec      	bne.n	80a8ca0 <_Balloc+0x20>
 80a8cc6:	2000      	movs	r0, #0
 80a8cc8:	bd70      	pop	{r4, r5, r6, pc}
 80a8cca:	2101      	movs	r1, #1
 80a8ccc:	fa01 f506 	lsl.w	r5, r1, r6
 80a8cd0:	1d6a      	adds	r2, r5, #5
 80a8cd2:	0092      	lsls	r2, r2, #2
 80a8cd4:	4620      	mov	r0, r4
 80a8cd6:	f000 fbbc 	bl	80a9452 <_calloc_r>
 80a8cda:	2800      	cmp	r0, #0
 80a8cdc:	d0f3      	beq.n	80a8cc6 <_Balloc+0x46>
 80a8cde:	6046      	str	r6, [r0, #4]
 80a8ce0:	6085      	str	r5, [r0, #8]
 80a8ce2:	2300      	movs	r3, #0
 80a8ce4:	6103      	str	r3, [r0, #16]
 80a8ce6:	60c3      	str	r3, [r0, #12]
 80a8ce8:	bd70      	pop	{r4, r5, r6, pc}

080a8cea <_Bfree>:
 80a8cea:	b570      	push	{r4, r5, r6, lr}
 80a8cec:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80a8cee:	4606      	mov	r6, r0
 80a8cf0:	460d      	mov	r5, r1
 80a8cf2:	b93c      	cbnz	r4, 80a8d04 <_Bfree+0x1a>
 80a8cf4:	2010      	movs	r0, #16
 80a8cf6:	f7fa faef 	bl	80a32d8 <malloc>
 80a8cfa:	6270      	str	r0, [r6, #36]	; 0x24
 80a8cfc:	6044      	str	r4, [r0, #4]
 80a8cfe:	6084      	str	r4, [r0, #8]
 80a8d00:	6004      	str	r4, [r0, #0]
 80a8d02:	60c4      	str	r4, [r0, #12]
 80a8d04:	b13d      	cbz	r5, 80a8d16 <_Bfree+0x2c>
 80a8d06:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80a8d08:	686a      	ldr	r2, [r5, #4]
 80a8d0a:	68db      	ldr	r3, [r3, #12]
 80a8d0c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80a8d10:	6029      	str	r1, [r5, #0]
 80a8d12:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80a8d16:	bd70      	pop	{r4, r5, r6, pc}

080a8d18 <__multadd>:
 80a8d18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a8d1c:	4606      	mov	r6, r0
 80a8d1e:	460c      	mov	r4, r1
 80a8d20:	690d      	ldr	r5, [r1, #16]
 80a8d22:	461f      	mov	r7, r3
 80a8d24:	f101 0e14 	add.w	lr, r1, #20
 80a8d28:	2300      	movs	r3, #0
 80a8d2a:	f8de 0000 	ldr.w	r0, [lr]
 80a8d2e:	3301      	adds	r3, #1
 80a8d30:	b281      	uxth	r1, r0
 80a8d32:	fb02 7101 	mla	r1, r2, r1, r7
 80a8d36:	0c00      	lsrs	r0, r0, #16
 80a8d38:	0c0f      	lsrs	r7, r1, #16
 80a8d3a:	fb02 7000 	mla	r0, r2, r0, r7
 80a8d3e:	b289      	uxth	r1, r1
 80a8d40:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80a8d44:	429d      	cmp	r5, r3
 80a8d46:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80a8d4a:	f84e 1b04 	str.w	r1, [lr], #4
 80a8d4e:	dcec      	bgt.n	80a8d2a <__multadd+0x12>
 80a8d50:	b1d7      	cbz	r7, 80a8d88 <__multadd+0x70>
 80a8d52:	68a3      	ldr	r3, [r4, #8]
 80a8d54:	429d      	cmp	r5, r3
 80a8d56:	db12      	blt.n	80a8d7e <__multadd+0x66>
 80a8d58:	6861      	ldr	r1, [r4, #4]
 80a8d5a:	4630      	mov	r0, r6
 80a8d5c:	3101      	adds	r1, #1
 80a8d5e:	f7ff ff8f 	bl	80a8c80 <_Balloc>
 80a8d62:	4680      	mov	r8, r0
 80a8d64:	6922      	ldr	r2, [r4, #16]
 80a8d66:	f104 010c 	add.w	r1, r4, #12
 80a8d6a:	3202      	adds	r2, #2
 80a8d6c:	0092      	lsls	r2, r2, #2
 80a8d6e:	300c      	adds	r0, #12
 80a8d70:	f7fd fc6e 	bl	80a6650 <memcpy>
 80a8d74:	4621      	mov	r1, r4
 80a8d76:	4630      	mov	r0, r6
 80a8d78:	f7ff ffb7 	bl	80a8cea <_Bfree>
 80a8d7c:	4644      	mov	r4, r8
 80a8d7e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80a8d82:	3501      	adds	r5, #1
 80a8d84:	615f      	str	r7, [r3, #20]
 80a8d86:	6125      	str	r5, [r4, #16]
 80a8d88:	4620      	mov	r0, r4
 80a8d8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a8d8e <__s2b>:
 80a8d8e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a8d92:	4606      	mov	r6, r0
 80a8d94:	4615      	mov	r5, r2
 80a8d96:	461f      	mov	r7, r3
 80a8d98:	2209      	movs	r2, #9
 80a8d9a:	3308      	adds	r3, #8
 80a8d9c:	460c      	mov	r4, r1
 80a8d9e:	fb93 f3f2 	sdiv	r3, r3, r2
 80a8da2:	2100      	movs	r1, #0
 80a8da4:	2201      	movs	r2, #1
 80a8da6:	429a      	cmp	r2, r3
 80a8da8:	da02      	bge.n	80a8db0 <__s2b+0x22>
 80a8daa:	0052      	lsls	r2, r2, #1
 80a8dac:	3101      	adds	r1, #1
 80a8dae:	e7fa      	b.n	80a8da6 <__s2b+0x18>
 80a8db0:	4630      	mov	r0, r6
 80a8db2:	f7ff ff65 	bl	80a8c80 <_Balloc>
 80a8db6:	9b08      	ldr	r3, [sp, #32]
 80a8db8:	2d09      	cmp	r5, #9
 80a8dba:	6143      	str	r3, [r0, #20]
 80a8dbc:	f04f 0301 	mov.w	r3, #1
 80a8dc0:	6103      	str	r3, [r0, #16]
 80a8dc2:	dd11      	ble.n	80a8de8 <__s2b+0x5a>
 80a8dc4:	f104 0809 	add.w	r8, r4, #9
 80a8dc8:	46c1      	mov	r9, r8
 80a8dca:	442c      	add	r4, r5
 80a8dcc:	f819 3b01 	ldrb.w	r3, [r9], #1
 80a8dd0:	4601      	mov	r1, r0
 80a8dd2:	3b30      	subs	r3, #48	; 0x30
 80a8dd4:	220a      	movs	r2, #10
 80a8dd6:	4630      	mov	r0, r6
 80a8dd8:	f7ff ff9e 	bl	80a8d18 <__multadd>
 80a8ddc:	45a1      	cmp	r9, r4
 80a8dde:	d1f5      	bne.n	80a8dcc <__s2b+0x3e>
 80a8de0:	eb08 0405 	add.w	r4, r8, r5
 80a8de4:	3c08      	subs	r4, #8
 80a8de6:	e001      	b.n	80a8dec <__s2b+0x5e>
 80a8de8:	340a      	adds	r4, #10
 80a8dea:	2509      	movs	r5, #9
 80a8dec:	1b2d      	subs	r5, r5, r4
 80a8dee:	1963      	adds	r3, r4, r5
 80a8df0:	429f      	cmp	r7, r3
 80a8df2:	dd08      	ble.n	80a8e06 <__s2b+0x78>
 80a8df4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80a8df8:	4601      	mov	r1, r0
 80a8dfa:	3b30      	subs	r3, #48	; 0x30
 80a8dfc:	220a      	movs	r2, #10
 80a8dfe:	4630      	mov	r0, r6
 80a8e00:	f7ff ff8a 	bl	80a8d18 <__multadd>
 80a8e04:	e7f3      	b.n	80a8dee <__s2b+0x60>
 80a8e06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080a8e0a <__hi0bits>:
 80a8e0a:	0c03      	lsrs	r3, r0, #16
 80a8e0c:	041b      	lsls	r3, r3, #16
 80a8e0e:	b913      	cbnz	r3, 80a8e16 <__hi0bits+0xc>
 80a8e10:	0400      	lsls	r0, r0, #16
 80a8e12:	2310      	movs	r3, #16
 80a8e14:	e000      	b.n	80a8e18 <__hi0bits+0xe>
 80a8e16:	2300      	movs	r3, #0
 80a8e18:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80a8e1c:	bf04      	itt	eq
 80a8e1e:	0200      	lsleq	r0, r0, #8
 80a8e20:	3308      	addeq	r3, #8
 80a8e22:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80a8e26:	bf04      	itt	eq
 80a8e28:	0100      	lsleq	r0, r0, #4
 80a8e2a:	3304      	addeq	r3, #4
 80a8e2c:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80a8e30:	bf04      	itt	eq
 80a8e32:	0080      	lsleq	r0, r0, #2
 80a8e34:	3302      	addeq	r3, #2
 80a8e36:	2800      	cmp	r0, #0
 80a8e38:	db03      	blt.n	80a8e42 <__hi0bits+0x38>
 80a8e3a:	0042      	lsls	r2, r0, #1
 80a8e3c:	d503      	bpl.n	80a8e46 <__hi0bits+0x3c>
 80a8e3e:	1c58      	adds	r0, r3, #1
 80a8e40:	4770      	bx	lr
 80a8e42:	4618      	mov	r0, r3
 80a8e44:	4770      	bx	lr
 80a8e46:	2020      	movs	r0, #32
 80a8e48:	4770      	bx	lr

080a8e4a <__lo0bits>:
 80a8e4a:	6803      	ldr	r3, [r0, #0]
 80a8e4c:	f013 0207 	ands.w	r2, r3, #7
 80a8e50:	d00b      	beq.n	80a8e6a <__lo0bits+0x20>
 80a8e52:	07d9      	lsls	r1, r3, #31
 80a8e54:	d422      	bmi.n	80a8e9c <__lo0bits+0x52>
 80a8e56:	079a      	lsls	r2, r3, #30
 80a8e58:	bf4b      	itete	mi
 80a8e5a:	085b      	lsrmi	r3, r3, #1
 80a8e5c:	089b      	lsrpl	r3, r3, #2
 80a8e5e:	6003      	strmi	r3, [r0, #0]
 80a8e60:	6003      	strpl	r3, [r0, #0]
 80a8e62:	bf4c      	ite	mi
 80a8e64:	2001      	movmi	r0, #1
 80a8e66:	2002      	movpl	r0, #2
 80a8e68:	4770      	bx	lr
 80a8e6a:	b299      	uxth	r1, r3
 80a8e6c:	b909      	cbnz	r1, 80a8e72 <__lo0bits+0x28>
 80a8e6e:	0c1b      	lsrs	r3, r3, #16
 80a8e70:	2210      	movs	r2, #16
 80a8e72:	f013 0fff 	tst.w	r3, #255	; 0xff
 80a8e76:	bf04      	itt	eq
 80a8e78:	0a1b      	lsreq	r3, r3, #8
 80a8e7a:	3208      	addeq	r2, #8
 80a8e7c:	0719      	lsls	r1, r3, #28
 80a8e7e:	bf04      	itt	eq
 80a8e80:	091b      	lsreq	r3, r3, #4
 80a8e82:	3204      	addeq	r2, #4
 80a8e84:	0799      	lsls	r1, r3, #30
 80a8e86:	bf04      	itt	eq
 80a8e88:	089b      	lsreq	r3, r3, #2
 80a8e8a:	3202      	addeq	r2, #2
 80a8e8c:	07d9      	lsls	r1, r3, #31
 80a8e8e:	d402      	bmi.n	80a8e96 <__lo0bits+0x4c>
 80a8e90:	085b      	lsrs	r3, r3, #1
 80a8e92:	d005      	beq.n	80a8ea0 <__lo0bits+0x56>
 80a8e94:	3201      	adds	r2, #1
 80a8e96:	6003      	str	r3, [r0, #0]
 80a8e98:	4610      	mov	r0, r2
 80a8e9a:	4770      	bx	lr
 80a8e9c:	2000      	movs	r0, #0
 80a8e9e:	4770      	bx	lr
 80a8ea0:	2020      	movs	r0, #32
 80a8ea2:	4770      	bx	lr

080a8ea4 <__i2b>:
 80a8ea4:	b510      	push	{r4, lr}
 80a8ea6:	460c      	mov	r4, r1
 80a8ea8:	2101      	movs	r1, #1
 80a8eaa:	f7ff fee9 	bl	80a8c80 <_Balloc>
 80a8eae:	2201      	movs	r2, #1
 80a8eb0:	6144      	str	r4, [r0, #20]
 80a8eb2:	6102      	str	r2, [r0, #16]
 80a8eb4:	bd10      	pop	{r4, pc}

080a8eb6 <__multiply>:
 80a8eb6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a8eba:	4614      	mov	r4, r2
 80a8ebc:	690a      	ldr	r2, [r1, #16]
 80a8ebe:	6923      	ldr	r3, [r4, #16]
 80a8ec0:	4688      	mov	r8, r1
 80a8ec2:	429a      	cmp	r2, r3
 80a8ec4:	bfbe      	ittt	lt
 80a8ec6:	460b      	movlt	r3, r1
 80a8ec8:	46a0      	movlt	r8, r4
 80a8eca:	461c      	movlt	r4, r3
 80a8ecc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80a8ed0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80a8ed4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80a8ed8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80a8edc:	eb07 0609 	add.w	r6, r7, r9
 80a8ee0:	429e      	cmp	r6, r3
 80a8ee2:	bfc8      	it	gt
 80a8ee4:	3101      	addgt	r1, #1
 80a8ee6:	f7ff fecb 	bl	80a8c80 <_Balloc>
 80a8eea:	f100 0514 	add.w	r5, r0, #20
 80a8eee:	462b      	mov	r3, r5
 80a8ef0:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
 80a8ef4:	2200      	movs	r2, #0
 80a8ef6:	4563      	cmp	r3, ip
 80a8ef8:	d202      	bcs.n	80a8f00 <__multiply+0x4a>
 80a8efa:	f843 2b04 	str.w	r2, [r3], #4
 80a8efe:	e7fa      	b.n	80a8ef6 <__multiply+0x40>
 80a8f00:	f104 0214 	add.w	r2, r4, #20
 80a8f04:	f108 0114 	add.w	r1, r8, #20
 80a8f08:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80a8f0c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80a8f10:	9300      	str	r3, [sp, #0]
 80a8f12:	9b00      	ldr	r3, [sp, #0]
 80a8f14:	9201      	str	r2, [sp, #4]
 80a8f16:	4293      	cmp	r3, r2
 80a8f18:	d957      	bls.n	80a8fca <__multiply+0x114>
 80a8f1a:	f8b2 b000 	ldrh.w	fp, [r2]
 80a8f1e:	f1bb 0f00 	cmp.w	fp, #0
 80a8f22:	d023      	beq.n	80a8f6c <__multiply+0xb6>
 80a8f24:	4689      	mov	r9, r1
 80a8f26:	46ae      	mov	lr, r5
 80a8f28:	f04f 0800 	mov.w	r8, #0
 80a8f2c:	f859 4b04 	ldr.w	r4, [r9], #4
 80a8f30:	f8be a000 	ldrh.w	sl, [lr]
 80a8f34:	b2a3      	uxth	r3, r4
 80a8f36:	fb0b a303 	mla	r3, fp, r3, sl
 80a8f3a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80a8f3e:	f8de 4000 	ldr.w	r4, [lr]
 80a8f42:	4443      	add	r3, r8
 80a8f44:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80a8f48:	fb0b 840a 	mla	r4, fp, sl, r8
 80a8f4c:	46f2      	mov	sl, lr
 80a8f4e:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80a8f52:	b29b      	uxth	r3, r3
 80a8f54:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80a8f58:	454f      	cmp	r7, r9
 80a8f5a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80a8f5e:	f84a 3b04 	str.w	r3, [sl], #4
 80a8f62:	d901      	bls.n	80a8f68 <__multiply+0xb2>
 80a8f64:	46d6      	mov	lr, sl
 80a8f66:	e7e1      	b.n	80a8f2c <__multiply+0x76>
 80a8f68:	f8ce 8004 	str.w	r8, [lr, #4]
 80a8f6c:	9b01      	ldr	r3, [sp, #4]
 80a8f6e:	3204      	adds	r2, #4
 80a8f70:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80a8f74:	f1ba 0f00 	cmp.w	sl, #0
 80a8f78:	d021      	beq.n	80a8fbe <__multiply+0x108>
 80a8f7a:	462c      	mov	r4, r5
 80a8f7c:	4689      	mov	r9, r1
 80a8f7e:	682b      	ldr	r3, [r5, #0]
 80a8f80:	f04f 0800 	mov.w	r8, #0
 80a8f84:	f8b9 e000 	ldrh.w	lr, [r9]
 80a8f88:	f8b4 b002 	ldrh.w	fp, [r4, #2]
 80a8f8c:	b29b      	uxth	r3, r3
 80a8f8e:	fb0a be0e 	mla	lr, sl, lr, fp
 80a8f92:	46a3      	mov	fp, r4
 80a8f94:	44f0      	add	r8, lr
 80a8f96:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80a8f9a:	f84b 3b04 	str.w	r3, [fp], #4
 80a8f9e:	f859 3b04 	ldr.w	r3, [r9], #4
 80a8fa2:	f8b4 e004 	ldrh.w	lr, [r4, #4]
 80a8fa6:	0c1b      	lsrs	r3, r3, #16
 80a8fa8:	fb0a e303 	mla	r3, sl, r3, lr
 80a8fac:	454f      	cmp	r7, r9
 80a8fae:	eb03 4318 	add.w	r3, r3, r8, lsr #16
 80a8fb2:	ea4f 4813 	mov.w	r8, r3, lsr #16
 80a8fb6:	d901      	bls.n	80a8fbc <__multiply+0x106>
 80a8fb8:	465c      	mov	r4, fp
 80a8fba:	e7e3      	b.n	80a8f84 <__multiply+0xce>
 80a8fbc:	6063      	str	r3, [r4, #4]
 80a8fbe:	3504      	adds	r5, #4
 80a8fc0:	e7a7      	b.n	80a8f12 <__multiply+0x5c>
 80a8fc2:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
 80a8fc6:	b913      	cbnz	r3, 80a8fce <__multiply+0x118>
 80a8fc8:	3e01      	subs	r6, #1
 80a8fca:	2e00      	cmp	r6, #0
 80a8fcc:	dcf9      	bgt.n	80a8fc2 <__multiply+0x10c>
 80a8fce:	6106      	str	r6, [r0, #16]
 80a8fd0:	b003      	add	sp, #12
 80a8fd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080a8fd8 <__pow5mult>:
 80a8fd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a8fdc:	4615      	mov	r5, r2
 80a8fde:	f012 0203 	ands.w	r2, r2, #3
 80a8fe2:	4606      	mov	r6, r0
 80a8fe4:	460f      	mov	r7, r1
 80a8fe6:	d007      	beq.n	80a8ff8 <__pow5mult+0x20>
 80a8fe8:	4c21      	ldr	r4, [pc, #132]	; (80a9070 <__pow5mult+0x98>)
 80a8fea:	3a01      	subs	r2, #1
 80a8fec:	2300      	movs	r3, #0
 80a8fee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80a8ff2:	f7ff fe91 	bl	80a8d18 <__multadd>
 80a8ff6:	4607      	mov	r7, r0
 80a8ff8:	10ad      	asrs	r5, r5, #2
 80a8ffa:	d036      	beq.n	80a906a <__pow5mult+0x92>
 80a8ffc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80a8ffe:	b93c      	cbnz	r4, 80a9010 <__pow5mult+0x38>
 80a9000:	2010      	movs	r0, #16
 80a9002:	f7fa f969 	bl	80a32d8 <malloc>
 80a9006:	6270      	str	r0, [r6, #36]	; 0x24
 80a9008:	6044      	str	r4, [r0, #4]
 80a900a:	6084      	str	r4, [r0, #8]
 80a900c:	6004      	str	r4, [r0, #0]
 80a900e:	60c4      	str	r4, [r0, #12]
 80a9010:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80a9014:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80a9018:	b94c      	cbnz	r4, 80a902e <__pow5mult+0x56>
 80a901a:	f240 2171 	movw	r1, #625	; 0x271
 80a901e:	4630      	mov	r0, r6
 80a9020:	f7ff ff40 	bl	80a8ea4 <__i2b>
 80a9024:	4604      	mov	r4, r0
 80a9026:	2300      	movs	r3, #0
 80a9028:	f8c8 0008 	str.w	r0, [r8, #8]
 80a902c:	6003      	str	r3, [r0, #0]
 80a902e:	f04f 0800 	mov.w	r8, #0
 80a9032:	07eb      	lsls	r3, r5, #31
 80a9034:	d50a      	bpl.n	80a904c <__pow5mult+0x74>
 80a9036:	4639      	mov	r1, r7
 80a9038:	4622      	mov	r2, r4
 80a903a:	4630      	mov	r0, r6
 80a903c:	f7ff ff3b 	bl	80a8eb6 <__multiply>
 80a9040:	4681      	mov	r9, r0
 80a9042:	4639      	mov	r1, r7
 80a9044:	4630      	mov	r0, r6
 80a9046:	f7ff fe50 	bl	80a8cea <_Bfree>
 80a904a:	464f      	mov	r7, r9
 80a904c:	106d      	asrs	r5, r5, #1
 80a904e:	d00c      	beq.n	80a906a <__pow5mult+0x92>
 80a9050:	6820      	ldr	r0, [r4, #0]
 80a9052:	b108      	cbz	r0, 80a9058 <__pow5mult+0x80>
 80a9054:	4604      	mov	r4, r0
 80a9056:	e7ec      	b.n	80a9032 <__pow5mult+0x5a>
 80a9058:	4622      	mov	r2, r4
 80a905a:	4621      	mov	r1, r4
 80a905c:	4630      	mov	r0, r6
 80a905e:	f7ff ff2a 	bl	80a8eb6 <__multiply>
 80a9062:	6020      	str	r0, [r4, #0]
 80a9064:	f8c0 8000 	str.w	r8, [r0]
 80a9068:	e7f4      	b.n	80a9054 <__pow5mult+0x7c>
 80a906a:	4638      	mov	r0, r7
 80a906c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a9070:	080aa358 	.word	0x080aa358

080a9074 <__lshift>:
 80a9074:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a9078:	460c      	mov	r4, r1
 80a907a:	4607      	mov	r7, r0
 80a907c:	4691      	mov	r9, r2
 80a907e:	6926      	ldr	r6, [r4, #16]
 80a9080:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80a9084:	4456      	add	r6, sl
 80a9086:	6849      	ldr	r1, [r1, #4]
 80a9088:	68a3      	ldr	r3, [r4, #8]
 80a908a:	1c75      	adds	r5, r6, #1
 80a908c:	42ab      	cmp	r3, r5
 80a908e:	da02      	bge.n	80a9096 <__lshift+0x22>
 80a9090:	3101      	adds	r1, #1
 80a9092:	005b      	lsls	r3, r3, #1
 80a9094:	e7fa      	b.n	80a908c <__lshift+0x18>
 80a9096:	4638      	mov	r0, r7
 80a9098:	f7ff fdf2 	bl	80a8c80 <_Balloc>
 80a909c:	2300      	movs	r3, #0
 80a909e:	4680      	mov	r8, r0
 80a90a0:	461a      	mov	r2, r3
 80a90a2:	f100 0114 	add.w	r1, r0, #20
 80a90a6:	4553      	cmp	r3, sl
 80a90a8:	da03      	bge.n	80a90b2 <__lshift+0x3e>
 80a90aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80a90ae:	3301      	adds	r3, #1
 80a90b0:	e7f9      	b.n	80a90a6 <__lshift+0x32>
 80a90b2:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
 80a90b6:	6920      	ldr	r0, [r4, #16]
 80a90b8:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80a90bc:	f019 091f 	ands.w	r9, r9, #31
 80a90c0:	f104 0114 	add.w	r1, r4, #20
 80a90c4:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 80a90c8:	d014      	beq.n	80a90f4 <__lshift+0x80>
 80a90ca:	f1c9 0c20 	rsb	ip, r9, #32
 80a90ce:	2200      	movs	r2, #0
 80a90d0:	6808      	ldr	r0, [r1, #0]
 80a90d2:	469a      	mov	sl, r3
 80a90d4:	fa00 f009 	lsl.w	r0, r0, r9
 80a90d8:	4302      	orrs	r2, r0
 80a90da:	f843 2b04 	str.w	r2, [r3], #4
 80a90de:	f851 2b04 	ldr.w	r2, [r1], #4
 80a90e2:	458e      	cmp	lr, r1
 80a90e4:	fa22 f20c 	lsr.w	r2, r2, ip
 80a90e8:	d8f2      	bhi.n	80a90d0 <__lshift+0x5c>
 80a90ea:	f8ca 2004 	str.w	r2, [sl, #4]
 80a90ee:	b142      	cbz	r2, 80a9102 <__lshift+0x8e>
 80a90f0:	1cb5      	adds	r5, r6, #2
 80a90f2:	e006      	b.n	80a9102 <__lshift+0x8e>
 80a90f4:	3b04      	subs	r3, #4
 80a90f6:	f851 2b04 	ldr.w	r2, [r1], #4
 80a90fa:	458e      	cmp	lr, r1
 80a90fc:	f843 2f04 	str.w	r2, [r3, #4]!
 80a9100:	d8f9      	bhi.n	80a90f6 <__lshift+0x82>
 80a9102:	3d01      	subs	r5, #1
 80a9104:	4638      	mov	r0, r7
 80a9106:	f8c8 5010 	str.w	r5, [r8, #16]
 80a910a:	4621      	mov	r1, r4
 80a910c:	f7ff fded 	bl	80a8cea <_Bfree>
 80a9110:	4640      	mov	r0, r8
 80a9112:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080a9116 <__mcmp>:
 80a9116:	6903      	ldr	r3, [r0, #16]
 80a9118:	690a      	ldr	r2, [r1, #16]
 80a911a:	b510      	push	{r4, lr}
 80a911c:	1a9b      	subs	r3, r3, r2
 80a911e:	d111      	bne.n	80a9144 <__mcmp+0x2e>
 80a9120:	0092      	lsls	r2, r2, #2
 80a9122:	3014      	adds	r0, #20
 80a9124:	3114      	adds	r1, #20
 80a9126:	1883      	adds	r3, r0, r2
 80a9128:	440a      	add	r2, r1
 80a912a:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 80a912e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80a9132:	428c      	cmp	r4, r1
 80a9134:	d002      	beq.n	80a913c <__mcmp+0x26>
 80a9136:	d307      	bcc.n	80a9148 <__mcmp+0x32>
 80a9138:	2001      	movs	r0, #1
 80a913a:	bd10      	pop	{r4, pc}
 80a913c:	4298      	cmp	r0, r3
 80a913e:	d3f4      	bcc.n	80a912a <__mcmp+0x14>
 80a9140:	2000      	movs	r0, #0
 80a9142:	bd10      	pop	{r4, pc}
 80a9144:	4618      	mov	r0, r3
 80a9146:	bd10      	pop	{r4, pc}
 80a9148:	f04f 30ff 	mov.w	r0, #4294967295
 80a914c:	bd10      	pop	{r4, pc}

080a914e <__mdiff>:
 80a914e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a9152:	460c      	mov	r4, r1
 80a9154:	4607      	mov	r7, r0
 80a9156:	4611      	mov	r1, r2
 80a9158:	4620      	mov	r0, r4
 80a915a:	4615      	mov	r5, r2
 80a915c:	f7ff ffdb 	bl	80a9116 <__mcmp>
 80a9160:	1e06      	subs	r6, r0, #0
 80a9162:	d108      	bne.n	80a9176 <__mdiff+0x28>
 80a9164:	4631      	mov	r1, r6
 80a9166:	4638      	mov	r0, r7
 80a9168:	f7ff fd8a 	bl	80a8c80 <_Balloc>
 80a916c:	2301      	movs	r3, #1
 80a916e:	6103      	str	r3, [r0, #16]
 80a9170:	6146      	str	r6, [r0, #20]
 80a9172:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a9176:	bfbc      	itt	lt
 80a9178:	4623      	movlt	r3, r4
 80a917a:	462c      	movlt	r4, r5
 80a917c:	4638      	mov	r0, r7
 80a917e:	6861      	ldr	r1, [r4, #4]
 80a9180:	bfba      	itte	lt
 80a9182:	461d      	movlt	r5, r3
 80a9184:	2601      	movlt	r6, #1
 80a9186:	2600      	movge	r6, #0
 80a9188:	f7ff fd7a 	bl	80a8c80 <_Balloc>
 80a918c:	692b      	ldr	r3, [r5, #16]
 80a918e:	60c6      	str	r6, [r0, #12]
 80a9190:	6926      	ldr	r6, [r4, #16]
 80a9192:	f105 0914 	add.w	r9, r5, #20
 80a9196:	f104 0114 	add.w	r1, r4, #20
 80a919a:	eb01 0786 	add.w	r7, r1, r6, lsl #2
 80a919e:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80a91a2:	f100 0514 	add.w	r5, r0, #20
 80a91a6:	f04f 0c00 	mov.w	ip, #0
 80a91aa:	f851 2b04 	ldr.w	r2, [r1], #4
 80a91ae:	f859 4b04 	ldr.w	r4, [r9], #4
 80a91b2:	b293      	uxth	r3, r2
 80a91b4:	449c      	add	ip, r3
 80a91b6:	b2a3      	uxth	r3, r4
 80a91b8:	0c24      	lsrs	r4, r4, #16
 80a91ba:	ebc3 030c 	rsb	r3, r3, ip
 80a91be:	ebc4 4212 	rsb	r2, r4, r2, lsr #16
 80a91c2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80a91c6:	b29b      	uxth	r3, r3
 80a91c8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80a91cc:	45c8      	cmp	r8, r9
 80a91ce:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a91d2:	468e      	mov	lr, r1
 80a91d4:	f845 2b04 	str.w	r2, [r5], #4
 80a91d8:	d8e7      	bhi.n	80a91aa <__mdiff+0x5c>
 80a91da:	45be      	cmp	lr, r7
 80a91dc:	d20e      	bcs.n	80a91fc <__mdiff+0xae>
 80a91de:	f85e 1b04 	ldr.w	r1, [lr], #4
 80a91e2:	b28a      	uxth	r2, r1
 80a91e4:	4462      	add	r2, ip
 80a91e6:	1413      	asrs	r3, r2, #16
 80a91e8:	eb03 4311 	add.w	r3, r3, r1, lsr #16
 80a91ec:	b292      	uxth	r2, r2
 80a91ee:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80a91f2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80a91f6:	f845 2b04 	str.w	r2, [r5], #4
 80a91fa:	e7ee      	b.n	80a91da <__mdiff+0x8c>
 80a91fc:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80a9200:	b90b      	cbnz	r3, 80a9206 <__mdiff+0xb8>
 80a9202:	3e01      	subs	r6, #1
 80a9204:	e7fa      	b.n	80a91fc <__mdiff+0xae>
 80a9206:	6106      	str	r6, [r0, #16]
 80a9208:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080a920c <__ulp>:
 80a920c:	4b10      	ldr	r3, [pc, #64]	; (80a9250 <__ulp+0x44>)
 80a920e:	400b      	ands	r3, r1
 80a9210:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80a9214:	2b00      	cmp	r3, #0
 80a9216:	dd02      	ble.n	80a921e <__ulp+0x12>
 80a9218:	2000      	movs	r0, #0
 80a921a:	4619      	mov	r1, r3
 80a921c:	4770      	bx	lr
 80a921e:	425b      	negs	r3, r3
 80a9220:	151b      	asrs	r3, r3, #20
 80a9222:	2b13      	cmp	r3, #19
 80a9224:	f04f 0000 	mov.w	r0, #0
 80a9228:	f04f 0100 	mov.w	r1, #0
 80a922c:	dc04      	bgt.n	80a9238 <__ulp+0x2c>
 80a922e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80a9232:	fa42 f103 	asr.w	r1, r2, r3
 80a9236:	4770      	bx	lr
 80a9238:	3b14      	subs	r3, #20
 80a923a:	2b1e      	cmp	r3, #30
 80a923c:	f04f 0201 	mov.w	r2, #1
 80a9240:	bfce      	itee	gt
 80a9242:	4613      	movgt	r3, r2
 80a9244:	f1c3 031f 	rsble	r3, r3, #31
 80a9248:	fa02 f303 	lslle.w	r3, r2, r3
 80a924c:	4618      	mov	r0, r3
 80a924e:	4770      	bx	lr
 80a9250:	7ff00000 	.word	0x7ff00000

080a9254 <__b2d>:
 80a9254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a9256:	6905      	ldr	r5, [r0, #16]
 80a9258:	f100 0614 	add.w	r6, r0, #20
 80a925c:	eb06 0585 	add.w	r5, r6, r5, lsl #2
 80a9260:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80a9264:	1f2f      	subs	r7, r5, #4
 80a9266:	4620      	mov	r0, r4
 80a9268:	f7ff fdcf 	bl	80a8e0a <__hi0bits>
 80a926c:	f1c0 0320 	rsb	r3, r0, #32
 80a9270:	280a      	cmp	r0, #10
 80a9272:	600b      	str	r3, [r1, #0]
 80a9274:	dc14      	bgt.n	80a92a0 <__b2d+0x4c>
 80a9276:	f1c0 0e0b 	rsb	lr, r0, #11
 80a927a:	fa24 f10e 	lsr.w	r1, r4, lr
 80a927e:	42be      	cmp	r6, r7
 80a9280:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
 80a9284:	bf34      	ite	cc
 80a9286:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80a928a:	2100      	movcs	r1, #0
 80a928c:	3015      	adds	r0, #21
 80a928e:	fa04 f000 	lsl.w	r0, r4, r0
 80a9292:	fa21 f10e 	lsr.w	r1, r1, lr
 80a9296:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80a929a:	ea40 0201 	orr.w	r2, r0, r1
 80a929e:	e023      	b.n	80a92e8 <__b2d+0x94>
 80a92a0:	42be      	cmp	r6, r7
 80a92a2:	bf3a      	itte	cc
 80a92a4:	f1a5 0708 	subcc.w	r7, r5, #8
 80a92a8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80a92ac:	2100      	movcs	r1, #0
 80a92ae:	380b      	subs	r0, #11
 80a92b0:	d015      	beq.n	80a92de <__b2d+0x8a>
 80a92b2:	4084      	lsls	r4, r0
 80a92b4:	f1c0 0520 	rsb	r5, r0, #32
 80a92b8:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 80a92bc:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 80a92c0:	42b7      	cmp	r7, r6
 80a92c2:	fa21 fe05 	lsr.w	lr, r1, r5
 80a92c6:	ea44 030e 	orr.w	r3, r4, lr
 80a92ca:	bf8c      	ite	hi
 80a92cc:	f857 4c04 	ldrhi.w	r4, [r7, #-4]
 80a92d0:	2400      	movls	r4, #0
 80a92d2:	fa01 f000 	lsl.w	r0, r1, r0
 80a92d6:	40ec      	lsrs	r4, r5
 80a92d8:	ea40 0204 	orr.w	r2, r0, r4
 80a92dc:	e004      	b.n	80a92e8 <__b2d+0x94>
 80a92de:	460a      	mov	r2, r1
 80a92e0:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 80a92e4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80a92e8:	4610      	mov	r0, r2
 80a92ea:	4619      	mov	r1, r3
 80a92ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a92ee <__d2b>:
 80a92ee:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80a92f2:	461c      	mov	r4, r3
 80a92f4:	2101      	movs	r1, #1
 80a92f6:	4690      	mov	r8, r2
 80a92f8:	9e08      	ldr	r6, [sp, #32]
 80a92fa:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80a92fc:	f7ff fcc0 	bl	80a8c80 <_Balloc>
 80a9300:	f3c4 0213 	ubfx	r2, r4, #0, #20
 80a9304:	f3c4 540a 	ubfx	r4, r4, #20, #11
 80a9308:	4607      	mov	r7, r0
 80a930a:	b10c      	cbz	r4, 80a9310 <__d2b+0x22>
 80a930c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80a9310:	9201      	str	r2, [sp, #4]
 80a9312:	f1b8 0f00 	cmp.w	r8, #0
 80a9316:	d019      	beq.n	80a934c <__d2b+0x5e>
 80a9318:	a802      	add	r0, sp, #8
 80a931a:	f840 8d08 	str.w	r8, [r0, #-8]!
 80a931e:	f7ff fd94 	bl	80a8e4a <__lo0bits>
 80a9322:	9b00      	ldr	r3, [sp, #0]
 80a9324:	b148      	cbz	r0, 80a933a <__d2b+0x4c>
 80a9326:	9a01      	ldr	r2, [sp, #4]
 80a9328:	f1c0 0120 	rsb	r1, r0, #32
 80a932c:	fa02 f101 	lsl.w	r1, r2, r1
 80a9330:	430b      	orrs	r3, r1
 80a9332:	40c2      	lsrs	r2, r0
 80a9334:	617b      	str	r3, [r7, #20]
 80a9336:	9201      	str	r2, [sp, #4]
 80a9338:	e000      	b.n	80a933c <__d2b+0x4e>
 80a933a:	617b      	str	r3, [r7, #20]
 80a933c:	9b01      	ldr	r3, [sp, #4]
 80a933e:	2b00      	cmp	r3, #0
 80a9340:	bf14      	ite	ne
 80a9342:	2102      	movne	r1, #2
 80a9344:	2101      	moveq	r1, #1
 80a9346:	61bb      	str	r3, [r7, #24]
 80a9348:	6139      	str	r1, [r7, #16]
 80a934a:	e007      	b.n	80a935c <__d2b+0x6e>
 80a934c:	a801      	add	r0, sp, #4
 80a934e:	f7ff fd7c 	bl	80a8e4a <__lo0bits>
 80a9352:	9b01      	ldr	r3, [sp, #4]
 80a9354:	2101      	movs	r1, #1
 80a9356:	617b      	str	r3, [r7, #20]
 80a9358:	6139      	str	r1, [r7, #16]
 80a935a:	3020      	adds	r0, #32
 80a935c:	b134      	cbz	r4, 80a936c <__d2b+0x7e>
 80a935e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80a9362:	4404      	add	r4, r0
 80a9364:	6034      	str	r4, [r6, #0]
 80a9366:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80a936a:	e009      	b.n	80a9380 <__d2b+0x92>
 80a936c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80a9370:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80a9374:	6030      	str	r0, [r6, #0]
 80a9376:	6918      	ldr	r0, [r3, #16]
 80a9378:	f7ff fd47 	bl	80a8e0a <__hi0bits>
 80a937c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80a9380:	6028      	str	r0, [r5, #0]
 80a9382:	4638      	mov	r0, r7
 80a9384:	b002      	add	sp, #8
 80a9386:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a938a <__ratio>:
 80a938a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80a938e:	4688      	mov	r8, r1
 80a9390:	4669      	mov	r1, sp
 80a9392:	4681      	mov	r9, r0
 80a9394:	f7ff ff5e 	bl	80a9254 <__b2d>
 80a9398:	460d      	mov	r5, r1
 80a939a:	4604      	mov	r4, r0
 80a939c:	a901      	add	r1, sp, #4
 80a939e:	4640      	mov	r0, r8
 80a93a0:	f7ff ff58 	bl	80a9254 <__b2d>
 80a93a4:	460f      	mov	r7, r1
 80a93a6:	4606      	mov	r6, r0
 80a93a8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80a93ac:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80a93b0:	4620      	mov	r0, r4
 80a93b2:	1a9a      	subs	r2, r3, r2
 80a93b4:	e89d 000a 	ldmia.w	sp, {r1, r3}
 80a93b8:	1ac9      	subs	r1, r1, r3
 80a93ba:	eb01 1342 	add.w	r3, r1, r2, lsl #5
 80a93be:	2b00      	cmp	r3, #0
 80a93c0:	bfcc      	ite	gt
 80a93c2:	eb05 5503 	addgt.w	r5, r5, r3, lsl #20
 80a93c6:	eba7 5703 	suble.w	r7, r7, r3, lsl #20
 80a93ca:	4632      	mov	r2, r6
 80a93cc:	463b      	mov	r3, r7
 80a93ce:	4629      	mov	r1, r5
 80a93d0:	f7fc f924 	bl	80a561c <__aeabi_ddiv>
 80a93d4:	b003      	add	sp, #12
 80a93d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080a93da <__copybits>:
 80a93da:	3901      	subs	r1, #1
 80a93dc:	b510      	push	{r4, lr}
 80a93de:	1149      	asrs	r1, r1, #5
 80a93e0:	6914      	ldr	r4, [r2, #16]
 80a93e2:	3101      	adds	r1, #1
 80a93e4:	f102 0314 	add.w	r3, r2, #20
 80a93e8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80a93ec:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80a93f0:	42a3      	cmp	r3, r4
 80a93f2:	4602      	mov	r2, r0
 80a93f4:	d204      	bcs.n	80a9400 <__copybits+0x26>
 80a93f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80a93fa:	f840 2b04 	str.w	r2, [r0], #4
 80a93fe:	e7f7      	b.n	80a93f0 <__copybits+0x16>
 80a9400:	2300      	movs	r3, #0
 80a9402:	428a      	cmp	r2, r1
 80a9404:	d202      	bcs.n	80a940c <__copybits+0x32>
 80a9406:	f842 3b04 	str.w	r3, [r2], #4
 80a940a:	e7fa      	b.n	80a9402 <__copybits+0x28>
 80a940c:	bd10      	pop	{r4, pc}

080a940e <__any_on>:
 80a940e:	f100 0214 	add.w	r2, r0, #20
 80a9412:	6900      	ldr	r0, [r0, #16]
 80a9414:	114b      	asrs	r3, r1, #5
 80a9416:	4298      	cmp	r0, r3
 80a9418:	b510      	push	{r4, lr}
 80a941a:	db0c      	blt.n	80a9436 <__any_on+0x28>
 80a941c:	dd0c      	ble.n	80a9438 <__any_on+0x2a>
 80a941e:	f011 011f 	ands.w	r1, r1, #31
 80a9422:	d009      	beq.n	80a9438 <__any_on+0x2a>
 80a9424:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80a9428:	fa24 f001 	lsr.w	r0, r4, r1
 80a942c:	fa00 f101 	lsl.w	r1, r0, r1
 80a9430:	428c      	cmp	r4, r1
 80a9432:	d10c      	bne.n	80a944e <__any_on+0x40>
 80a9434:	e000      	b.n	80a9438 <__any_on+0x2a>
 80a9436:	4603      	mov	r3, r0
 80a9438:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80a943c:	4293      	cmp	r3, r2
 80a943e:	d904      	bls.n	80a944a <__any_on+0x3c>
 80a9440:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80a9444:	2900      	cmp	r1, #0
 80a9446:	d0f9      	beq.n	80a943c <__any_on+0x2e>
 80a9448:	e001      	b.n	80a944e <__any_on+0x40>
 80a944a:	2000      	movs	r0, #0
 80a944c:	bd10      	pop	{r4, pc}
 80a944e:	2001      	movs	r0, #1
 80a9450:	bd10      	pop	{r4, pc}

080a9452 <_calloc_r>:
 80a9452:	b538      	push	{r3, r4, r5, lr}
 80a9454:	fb02 f401 	mul.w	r4, r2, r1
 80a9458:	4621      	mov	r1, r4
 80a945a:	f7f9 ff7d 	bl	80a3358 <_malloc_r>
 80a945e:	4605      	mov	r5, r0
 80a9460:	b118      	cbz	r0, 80a946a <_calloc_r+0x18>
 80a9462:	4622      	mov	r2, r4
 80a9464:	2100      	movs	r1, #0
 80a9466:	f7fd f8fe 	bl	80a6666 <memset>
 80a946a:	4628      	mov	r0, r5
 80a946c:	bd38      	pop	{r3, r4, r5, pc}

080a946e <__env_lock>:
 80a946e:	4770      	bx	lr

080a9470 <__env_unlock>:
 80a9470:	4770      	bx	lr

080a9472 <link_code_end>:
	...

080a9474 <dynalib_user>:
 80a9474:	0021 080a 0061 080a 008d 080a 0091 080a     !...a...........
 80a9484:	0000 0000                                   ....

080a9488 <_ZTV16JsonWriterStaticILj512EE>:
	...
 80a9490:	029d 080a 02b1 080a 7274 6575 6600 6c61     ........true.fal
 80a94a0:	6573 6d00 7861 7543 7272 6e65 4374 3e31     se.maxCurrentC1>
 80a94b0:	4e09 7765 7320 7465 6f70 6e69 2074 6573     .New setpoint se
 80a94c0:	2074 7461 0020 4120 706d 2e73 6d00 7861     t at . Amps..max
 80a94d0:	7543 7272 6e65 4374 3e32 4e09 7765 7320     CurrentC2>.New s
 80a94e0:	7465 6f70 6e69 2074 6573 2074 7461 0020     etpoint set at .
 80a94f0:	7041 7270 786f 6d69 7461 2065 6f79 7275     Approximate your
 80a9500:	6320 7261 2064 6f74 7420 6568 7220 6165      card to the rea
 80a9510:	6564 2e72 2e2e 4300 6168 6772 7265 0020     der....Charger .
 80a9520:	6f56 746c 6761 3a65 0020 6964 2064 6f6e     Voltage: .did no
 80a9530:	2074 6572 6563 7669 2065 6e65 756f 6867     t receive enough
 80a9540:	7620 6c6f 6174 6567 6420 7461 0061 7543      voltage data.Cu
 80a9550:	7272 6e65 3a74 0020 6964 2064 6f6e 2074     rrent: .did not 
 80a9560:	6572 6563 7669 2065 6e65 756f 6867 6320     receive enough c
 80a9570:	7275 6572 746e 6420 7461 0061 7246 7165     urrent data.Freq
 80a9580:	6575 636e 3a79 0020 6964 2064 6f6e 2074     uency: .did not 
 80a9590:	6572 6563 7669 2065 6e65 756f 6867 6620     receive enough f
 80a95a0:	6572 7571 6e65 7963 6420 7461 0061 6f50     requency data.Po
 80a95b0:	6577 3a72 0020 6964 2064 6f6e 2074 6572     wer: .did not re
 80a95c0:	6563 7669 2065 6e65 756f 6867 7020 776f     ceive enough pow
 80a95d0:	7265 6420 7461 0061 6e45 7265 7967 203a     er data.Energy: 
 80a95e0:	6400 6469 6e20 746f 7220 6365 6965 6576     .did not receive
 80a95f0:	6520 6f6e 6775 2068 6e65 7265 7967 6420      enough energy d
 80a9600:	7461 0061 6f6c 706f 6572 6461 093e 6553     ata.loopread>.Se
 80a9610:	6972 6c61 5220 6165 2064 7245 6f72 2172     rial Read Error!
 80a9620:	3000 0030 514d 5454 093e 6552 6563 7669     .00.MQTT>.Receiv
 80a9630:	2065 6e65 7265 7967 6d20 7465 7265 6420     e energy meter d
 80a9640:	7461 2061 7266 6d6f 6220 6f72 656b 2072     ata from broker 
 80a9650:	7461 203a 4800 4e41 7665 6573 702f 6f68     at: .HANevse/pho
 80a9660:	6f74 436e 6e6f 6576 7472 6465 002f 7573     tonConverted/.su
 80a9670:	6363 7365 6673 6c75 7320 6174 7472 6e20     ccessful start n
 80a9680:	7765 6320 6168 6772 0065 6863 7261 6567     ew charge.charge
 80a9690:	2072 7369 6620 6572 2c65 6220 7475 7920     r is free, but y
 80a96a0:	756f 6120 726c 6165 7964 7320 6977 6570     ou already swipe
 80a96b0:	2064 6874 2065 6163 6472 6920 206e 6874     d the card in th
 80a96c0:	2065 616c 7473 3220 2030 6573 0063 4148     e last 20 sec.HA
 80a96d0:	654e 7376 2f65 6870 746f 6e6f 6f43 766e     Nevse/photonConv
 80a96e0:	7265 6574 0064 6863 7261 6567 2072 7369     erted.charger is
 80a96f0:	6f20 6363 7075 6569 2064 7962 6120 6f6e      occupied by ano
 80a9700:	6874 7265 7520 6573 0072 7573 6363 7365     ther user.succes
 80a9710:	6673 6c75 7320 6f74 2070 6863 7261 6567     sful stop charge
 80a9720:	7320 7365 6973 6e6f 7900 756f 6a20 7375      session.you jus
 80a9730:	2074 7473 7261 6574 2064 2061 6863 7261     t started a char
 80a9740:	6567 6120 2074 6874 7369 6320 6168 6772     ge at this charg
 80a9750:	7265 202c 7562 2074 6168 2064 6e61 746f     er, but had anot
 80a9760:	6568 2072 6f63 736e 6365 7475 7669 2065     her consecutive 
 80a9770:	4652 4449 7320 6977 6570 7720 7469 6968     RFID swipe withi
 80a9780:	206e 3032 7320 6365 7900 756f 6120 6572     n 20 sec.you are
 80a9790:	6120 726c 6165 7964 6320 6168 6772 6e69      already chargin
 80a97a0:	2067 7461 6120 6f6e 6874 7265 6320 6168     g at another cha
 80a97b0:	6772 7265 7300 6375 6563 7373 7566 206c     rger.successful 
 80a97c0:	4652 4449 7220 6165 2c64 6220 7475 7920     RFID read, but y
 80a97d0:	756f 6120 6572 6e20 746f 6920 206e 6874     ou are not in th
 80a97e0:	2065 7375 7265 696c 7473 4500 5252 524f     e userlist.ERROR
 80a97f0:	203a 6e75 6e6b 776f 206e 6373 6e65 7261     : unknown scenar
 80a9800:	6f69 3900 0039 4148 654e 7376 2f65 6e45     io.99.HANevse/En
 80a9810:	7265 7967 654d 6574 0072 4148 654e 7376     ergyMeter.HANevs
 80a9820:	2f65 6c61 6f6c 5577 6573 0072 514d 5454     e/allowUser.MQTT
 80a9830:	093e 6143 6c6c 6162 6b63 6620 6e75 7463     >.Callback funct
 80a9840:	6f69 206e 7369 6320 6c61 656c 2064 7461     ion is called at
 80a9850:	203a 4d00 5451 3e54 4309 6e6f 656e 7463     : .MQTT>.Connect
 80a9860:	6e69 2067 6f74 4d20 5451 2054 7262 6b6f     ing to MQTT brok
 80a9870:	7265 2e2e 002e 5645 502d 6f68 6f74 316e     er....EV-Photon1
 80a9880:	4d00 5451 3e54 4309 6e6f 656e 7463 6465     .MQTT>.Connected
 80a9890:	4d00 5451 3e54 4309 6e6f 656e 7463 6f69     .MQTT>.Connectio
 80a98a0:	206e 6166 6c69 6465 4d00 5451 3e54 5209     n failed.MQTT>.R
 80a98b0:	7465 7972 6e69 2e67 2e2e 5600 0031 3256     etrying....V1.V2
 80a98c0:	5600 0033 3149 4900 0032 3349 4600 5500     .V3.I1.I2.I3.F.U
 80a98d0:	6573 4972 0044 6f53 6b63 7465 4449 2500     serID.SocketID.%
 80a98e0:	756c 4800 4e41 7665 6573 702f 6f68 6f74     lu.HANevse/photo
 80a98f0:	4d6e 6165 7573 6572 2500 646c 2000 0030     nMeasure.%ld. 0.
 80a9900:	6572 6461 6143 6472 093e 4955 2044 6174     readCard>.UID ta
 80a9910:	2067 6e6f 6320 6168 6772 7265 3a31 5500     g on charger1:.U
 80a9920:	6573 4972 0064 6843 7261 6567 0072 7453     serId.Charger.St
 80a9930:	7261 5474 6d69 0065 4148 654e 7376 2f65     artTime.HANevse/
 80a9940:	7075 6164 6574 7355 7265 7200 6165 4364     updateUser.readC
 80a9950:	7261 3e64 5509 4449 7420 6761 6f20 206e     ard>.UID tag on 
 80a9960:	6863 7261 6567 3272 003a 614c 6574 7473     charger2:.Latest
 80a9970:	7453 7261 5474 6d69 3e65 0009 202c 5400     StartTime>.., .T
 80a9980:	6d69 6f65 7475 6320 6168 6772 7265 4e00     imeout charger.N
 80a9990:	206f 4449 7300 6977 6374 5468 7365 0074     o ID.switchTest.
 80a99a0:	616d 4378 7275 6572 746e 3143 6d00 7861     maxCurrentC1.max
 80a99b0:	7543 7272 6e65 4374 0032 6572 6573 4f74     CurrentC2.resetO
 80a99c0:	696c 656d 0078 7270 676f 6f4d 6564 6c4f     limex.progModeOl
 80a99d0:	786d 7200 7365 7465 6150 7472 6369 006c     mx.resetParticl.
 80a99e0:	6957 6966 6953 6e67 6c61 6900 696e 5274     WifiSignal.initR
 80a99f0:	4946 0044 7563 7272 6e65 5374 7274 5300     FID.currentStr.S
 80a9a00:	6168 6572 6156 0072 6f54 6970 0063 7262     hareVar.Topic.br
 80a9a10:	6b6f 7265 682e 7669 6d65 2e71 6f63 006d     oker.hivemq.com.
 80a9a20:	0400 514d 5454 0004 4d06 4951 6473 0370     ..MQTT...MQIsdp.

080a9a30 <_ZTV10JsonBuffer>:
	...
 80a9a38:	2b01 080a 2b1d 080a                         .+...+..

080a9a40 <_ZTV10JsonWriter>:
	...
 80a9a48:	2b31 080a 2b45 080a 3025 7834 5c00 2575     1+..E+..%04x.\u%
 80a9a58:	3430 0058 2e25 662a 2500 0066 2e25 6c2a     04X.%.*f.%f.%.*l
 80a9a68:	0066 6c25 0066 0000                         f.%lf...

080a9a70 <_ZTVSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
 80a9a78:	3515 080a 351b 080a 3933 080a 3529 080a     .5...5..39..)5..
 80a9a88:	3517 080a                                   .5..

080a9a8c <_ZTV9TCPClient>:
	...
 80a9a94:	22c5 080a 22f9 080a 34d1 080a 34eb 080a     ."..."...4...4..
 80a9aa4:	3631 080a 359b 080a 356d 080a 3513 080a     16...5..m5...5..
 80a9ab4:	36dd 080a 394d 080a 35cf 080a 36a9 080a     .6..M9...5...6..
 80a9ac4:	382b 080a 387d 080a 34fb 080a 37ef 080a     +8..}8...4...7..
 80a9ad4:	354d 080a 6977 6972 676e 5400 5043 6c43     M5..wiring.TCPCl
 80a9ae4:	6569 746e 7320 636f 656b 3d74 7825 6e00     ient socket=%x.n
 80a9af4:	6e61 6f00 6676 6900 666e 6200 7561 0064     an.ovf.inf.baud.
 80a9b04:	6553 6972 6c61 5500 4253 6553 6972 6c61     Serial.USBSerial
 80a9b14:	0031 7974 6570 7000 7261 6d61 6300 646d     1.type.param.cmd
 80a9b24:	6900 0064 6e68 0064 7473 6d72 6600 6c69     .id.hnd.strm.fil
 80a9b34:	0074 766c 006c 6461 4864 6e61 6c64 7265     t.lvl.addHandler
 80a9b44:	7200 6d65 766f 4865 6e61 6c64 7265 6500     .removeHandler.e
 80a9b54:	756e 486d 6e61 6c64 7265 0073 534a 4e4f     numHandlers.JSON
 80a9b64:	7453 6572 6d61 6f4c 4867 6e61 6c64 7265     StreamLogHandler
 80a9b74:	6100 7070 2500 3130 7530 0020 205d 2800     .app.%010u .] .(
 80a9b84:	3a29 0020 5b20 6300 646f 2065 203d 2500     ): . [.code = .%
 80a9b94:	0069 6564 6174 6c69 2073 203d 0d00 000a     i.details = ....
 80a9ba4:	6e6c 6600 006e 6f63 6564 6400 7465 6961     ln.fn.code.detai
 80a9bb4:	006c 6f6e 656e 7400 6172 6563 6900 666e     l.none.trace.inf
 80a9bc4:	006f 6177 6e72 6500 7272 726f 7000 6e61     o.warn.error.pan
 80a9bd4:	6369 6100 6c6c 2500 302b 6433 253a 3230     ic.all.%+03d:%02
 80a9be4:	0075 5925 252d 2d6d 6425 2554 3a48 4d25     u.%Y-%m-%dT%H:%M
 80a9bf4:	253a 2553 007a 7361 7463 6d69 0065 0000     :%S%z.asctime...

080a9c04 <_ZTV9IPAddress>:
	...
 80a9c0c:	44c7 080a 44b7 080a 44b9 080a               .D...D...D..

080a9c18 <_ZTV9USBSerial>:
	...
 80a9c20:	45ad 080a 45fd 080a 460b 080a 3df5 080a     .E...E...F...=..
 80a9c30:	45e9 080a 45af 080a 45c5 080a 45f7 080a     .E...E...E...E..
 80a9c40:	45db 080a 45a9 080a                         .E...E..

080a9c48 <_ZTV11USARTSerial>:
	...
 80a9c50:	4715 080a 4765 080a 4773 080a 3df5 080a     .G..eG..sG...=..
 80a9c60:	4729 080a 474b 080a 4737 080a 475f 080a     )G..KG..7G.._G..
 80a9c70:	4717 080a 471b 080a                         .G...G..

080a9c78 <_ZTV7TwoWire>:
	...
 80a9c80:	4859 080a 48a3 080a 487b 080a 485b 080a     YH...H..{H..[H..
 80a9c90:	4883 080a 488b 080a 4893 080a 489b 080a     .H...H...H...H..

080a9ca0 <_ZTVN5spark9WiFiClassE>:
	...
 80a9ca8:	49d1 080a 49c7 080a 49bd 080a 492d 080a     .I...I...I..-I..
 80a9cb8:	4083 080a 49b1 080a 49a5 080a 499d 080a     .@...I...I...I..
 80a9cc8:	4993 080a 4989 080a 4945 080a               .I...I..EI..

080a9cd4 <_ZTV10WiFiSignal>:
	...
 80a9cdc:	48dd 080a 4937 080a 48df 080a 4a0d 080a     .H..7I...H...J..
 80a9cec:	48e5 080a 49dd 080a 4909 080a               .H...I...I..

080a9cf8 <_ZTVN5spark12NetworkClassE>:
	...
 80a9d00:	4af9 080a 4b03 080a 4b0d 080a 4b17 080a     .J...K...K...K..
 80a9d10:	4b21 080a 4b2d 080a 4b39 080a 4b45 080a     !K..-K..9K..EK..
 80a9d20:	4b4d 080a 4b57 080a 4b61 080a               MK..WK..aK..

080a9d2c <_ZSt7nothrow>:
	...

080a9d2d <day_name.4723>:
 80a9d2d:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
 80a9d3d:	6972 6153 4a74                                   riSat

080a9d42 <mon_name.4724>:
 80a9d42:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
 80a9d52:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
 80a9d62:	4476 6365 2e25 7333 2520 332e 2573 6433     vDec%.3s %.3s%3d
 80a9d72:	2520 322e 3a64 2e25 6432 253a 322e 2064      %.2d:%.2d:%.2d 
 80a9d82:	6425 000a                                   %d..

080a9d86 <_ctype_>:
 80a9d86:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 80a9d96:	2020 2020 2020 2020 2020 2020 2020 2020                     
 80a9da6:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 80a9db6:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 80a9dc6:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 80a9dd6:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 80a9de6:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 80a9df6:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 80a9e06:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

080a9e88 <__sf_fake_stdin>:
	...

080a9ea8 <__sf_fake_stdout>:
	...

080a9ec8 <__sf_fake_stderr>:
	...
 80a9ee8:	0043 4f50 4953 0058                         C.POSIX.

080a9ef0 <__month_lengths>:
 80a9ef0:	001f 0000 001c 0000 001f 0000 001e 0000     ................
 80a9f00:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 80a9f10:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 80a9f20:	001f 0000 001d 0000 001f 0000 001e 0000     ................
 80a9f30:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 80a9f40:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 80a9f50:	7325 2e25 642a 2500 2573 2e30 642a 2b00     %s%.*d.%s%0.*d.+
 80a9f60:	2d00 2500 6432 2500 322e 2f64 2e25 6432     .-.%2d.%.2d/%.2d
 80a9f70:	252f 322e 0064 2d59 6d25 252d 0064 2a2e     /%.2d.Y-%m-%d..*
 80a9f80:	0075 2e25 6433 2500 6c6c 0064 2e25 6432     u.%.3d.%lld.%.2d
 80a9f90:	253a 322e 3a64 2e25 6432 2500 302b 6c33     :%.2d:%.2d.%+03l
 80a9fa0:	2564 322e 646c 0000                         d%.2ld..

080a9fa8 <fpi.5342>:
 80a9fa8:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
 80a9fb8:	0000 0000 6e69 7469 0079 0000               ....inity...

080a9fc4 <fpinan.5378>:
 80a9fc4:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
 80a9fd4:	0000 0000                                   ....

080a9fd8 <tinytens>:
 80a9fd8:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
 80a9fe8:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
 80a9ff8:	6f43 64ac 0628 1168 434c 545f 4d49 0045     Co.d(.h.LC_TIME.
 80aa008:	614a 006e 6546 0062 614d 0072 7041 0072     Jan.Feb.Mar.Apr.
 80aa018:	614d 0079 754a 006e 754a 006c 7541 0067     May.Jun.Jul.Aug.
 80aa028:	6553 0070 634f 0074 6f4e 0076 6544 0063     Sep.Oct.Nov.Dec.
 80aa038:	614a 756e 7261 0079 6546 7262 6175 7972     January.February
 80aa048:	4d00 7261 6863 4100 7270 6c69 4a00 6e75     .March.April.Jun
 80aa058:	0065 754a 796c 4100 6775 7375 0074 6553     e.July.August.Se
 80aa068:	7470 6d65 6562 0072 634f 6f74 6562 0072     ptember.October.
 80aa078:	6f4e 6576 626d 7265 4400 6365 6d65 6562     November.Decembe
 80aa088:	0072 7553 006e 6f4d 006e 7554 0065 6557     r.Sun.Mon.Tue.We
 80aa098:	0064 6854 0075 7246 0069 6153 0074 7553     d.Thu.Fri.Sat.Su
 80aa0a8:	646e 7961 4d00 6e6f 6164 0079 7554 7365     nday.Monday.Tues
 80aa0b8:	6164 0079 6557 6e64 7365 6164 0079 6854     day.Wednesday.Th
 80aa0c8:	7275 6473 7961 4600 6972 6164 0079 6153     ursday.Friday.Sa
 80aa0d8:	7574 6472 7961 2500 3a48 4d25 253a 0053     turday.%H:%M:%S.
 80aa0e8:	6d25 252f 2f64 7925 2500 2061 6225 2520     %m/%d/%y.%a %b %
 80aa0f8:	2065 4825 253a 3a4d 5325 2520 0059 4d41     e %H:%M:%S %Y.AM
 80aa108:	5000 004d 6125 2520 2062 6525 2520 3a48     .PM.%a %b %e %H:
 80aa118:	4d25 253a 2053 5a25 2520 0059 4925 253a     %M:%S %Z %Y.%I:%
 80aa128:	3a4d 5325 2520 0070                         M:%S %p.

080aa130 <_C_time_locale>:
 80aa130:	a008 080a a00c 080a a010 080a a014 080a     ................
 80aa140:	a018 080a a01c 080a a020 080a a024 080a     ........ ...$...
 80aa150:	a028 080a a02c 080a a030 080a a034 080a     (...,...0...4...
 80aa160:	a038 080a a040 080a a049 080a a04f 080a     8...@...I...O...
 80aa170:	a018 080a a055 080a a05a 080a a05f 080a     ....U...Z..._...
 80aa180:	a066 080a a070 080a a078 080a a081 080a     f...p...x.......
 80aa190:	a08a 080a a08e 080a a092 080a a096 080a     ................
 80aa1a0:	a09a 080a a09e 080a a0a2 080a a0a6 080a     ................
 80aa1b0:	a0ad 080a a0b4 080a a0bc 080a a0c6 080a     ................
 80aa1c0:	a0cf 080a a0d6 080a a0df 080a a0e8 080a     ................
 80aa1d0:	a0f1 080a a106 080a a109 080a a10c 080a     ................
 80aa1e0:	a038 080a a040 080a a049 080a a04f 080a     8...@...I...O...
 80aa1f0:	a018 080a a055 080a a05a 080a a05f 080a     ....U...Z..._...
 80aa200:	a066 080a a070 080a a078 080a a081 080a     f...p...x.......
 80aa210:	9b22 080a a124 080a 997b 080a 997b 080a     "...$...{...{...
 80aa220:	997b 080a 997b 080a 997b 080a 5a54 4700     {...{...{...TZ.G
 80aa230:	544d 2500 3031 5e5b 2d30 2c39 2d2b 255d     MT.%10[^0-9,+-]%
 80aa240:	006e 254d 7568 6e25 252e 7568 6e25 252e     n.M%hu%n.%hu%n.%
 80aa250:	7568 6e25 2f00 6825 2575 3a6e 6825 2575     hu%n./%hu%n:%hu%
 80aa260:	3a6e 6825 2575 006e                         n:%hu%n.

080aa268 <__mprec_tens>:
 80aa268:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
 80aa278:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
 80aa288:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
 80aa298:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
 80aa2a8:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
 80aa2b8:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
 80aa2c8:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
 80aa2d8:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
 80aa2e8:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
 80aa2f8:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
 80aa308:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
 80aa318:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
 80aa328:	9db4 79d9 7843 44ea                         ...yCx.D

080aa330 <__mprec_bigtens>:
 80aa330:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
 80aa340:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
 80aa350:	bf3c 7f73 4fdd 7515                         <.s..O.u

080aa358 <p05.5385>:
 80aa358:	0005 0000 0019 0000 007d 0000               ........}...

080aa364 <link_const_variable_data_end>:
 80aa364:	080a19b1 	.word	0x080a19b1
 80aa368:	080a22bf 	.word	0x080a22bf
 80aa36c:	080a2afd 	.word	0x080a2afd
 80aa370:	080a2dc9 	.word	0x080a2dc9
 80aa374:	080a33f5 	.word	0x080a33f5
 80aa378:	080a4091 	.word	0x080a4091
 80aa37c:	080a42b1 	.word	0x080a42b1
 80aa380:	080a4309 	.word	0x080a4309
 80aa384:	080a4ae5 	.word	0x080a4ae5
 80aa388:	080a4bc9 	.word	0x080a4bc9
 80aa38c:	080a4cd5 	.word	0x080a4cd5
 80aa390:	080a4dc9 	.word	0x080a4dc9
 80aa394:	080a4e4d 	.word	0x080a4e4d
 80aa398:	080a4f11 	.word	0x080a4f11
 80aa39c:	080a4fd5 	.word	0x080a4fd5
