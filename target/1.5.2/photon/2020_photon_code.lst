
d:/UNI_S5/new_particle_code/2020_photon_code/target/1.5.2/photon/2020_photon_code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00006ab4  080a001c  080a001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  080a6ad0  080a6ad0  00016ad0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  40024000  080a6ad8  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000000bc  20000000  080a6adc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000040c  200000bc  200000bc  000400bc  2**2
                  ALLOC
  7 .module_info_suffix 00000028  080a6b98  080a6b98  00036b98  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  080a6bc0  080a6bc0  00036bc0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   000e89e8  00000000  00000000  00036bc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000132e5  00000000  00000000  0011f5ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0001fffb  00000000  00000000  00132891  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00002af8  00000000  00000000  0015288c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00004770  00000000  00000000  00155384  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00029660  00000000  00000000  00159af4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0002c6a9  00000000  00000000  00183154  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000b219e  00000000  00000000  001af7fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000e0a4  00000000  00000000  0026199c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <link_dynalib_end+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <link_dynalib_end+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <link_dynalib_end+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f004 fcc7 	bl	80a49c0 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <link_dynalib_end+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <link_dynalib_end+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f004 fccc 	bl	80a49d6 <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <link_dynalib_end+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000000 	.word	0x20000000
 80a0048:	080a6adc 	.word	0x080a6adc
 80a004c:	200000bc 	.word	0x200000bc
 80a0050:	200000bc 	.word	0x200000bc
 80a0054:	200004c8 	.word	0x200004c8
 80a0058:	200004c8 	.word	0x200004c8

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f002 fc1f 	bl	80a28a0 <module_user_init_hook>
 80a0062:	4b07      	ldr	r3, [pc, #28]	; (80a0080 <module_user_init+0x24>)
 80a0064:	4c07      	ldr	r4, [pc, #28]	; (80a0084 <module_user_init+0x28>)
 80a0066:	461e      	mov	r6, r3
 80a0068:	1ae4      	subs	r4, r4, r3
 80a006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a006c:	2500      	movs	r5, #0
 80a006e:	42a5      	cmp	r5, r4
 80a0070:	d004      	beq.n	80a007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a0076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f8      	b.n	80a006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a007c:	bd70      	pop	{r4, r5, r6, pc}
 80a007e:	bf00      	nop
 80a0080:	080a6a94 	.word	0x080a6a94
 80a0084:	080a6ad0 	.word	0x080a6ad0

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 bc32 	b.w	80a08f0 <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 fa81 	bl	80a0594 <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a0096:	f002 bbc5 	b.w	80a2824 <_post_loop>

080a009a <_Znwj>:
 80a009a:	f001 bcf3 	b.w	80a1a84 <malloc>

080a009e <_Znaj>:
	return malloc(size);
}

void *operator new[](size_t size)
{
	return malloc(size);
 80a009e:	f001 bcf1 	b.w	80a1a84 <malloc>

080a00a2 <_ZdlPv>:
 80a00a2:	f001 bcf7 	b.w	80a1a94 <free>

080a00a6 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
 80a00a6:	f001 bcf5 	b.w	80a1a94 <free>

080a00aa <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00aa:	7800      	ldrb	r0, [r0, #0]
 80a00ac:	fab0 f080 	clz	r0, r0
 80a00b0:	0940      	lsrs	r0, r0, #5
 80a00b2:	4770      	bx	lr

080a00b4 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00b4:	2301      	movs	r3, #1
 80a00b6:	7003      	strb	r3, [r0, #0]
 80a00b8:	4770      	bx	lr

080a00ba <_ZN10CloudClass22update_string_variableEPKc18Spark_Data_TypeDefPKvPv>:

    static const void* update_string_variable(const char* name, Spark_Data_TypeDef type, const void* var, void* reserved)
    {
        const String* s = (const String*)var;
        return s->c_str();
    }
 80a00ba:	6810      	ldr	r0, [r2, #0]
 80a00bc:	4770      	bx	lr

080a00be <_Z11resetOlimex6String>:
    while (*pointer++) {
      out.concat(in[index++]);
      }
}

int resetOlimex(String input) {
 80a00be:	b508      	push	{r3, lr}
    digitalWrite(RESET_OLIMEX, LOW);
 80a00c0:	2100      	movs	r1, #0
 80a00c2:	2004      	movs	r0, #4
 80a00c4:	f003 f827 	bl	80a3116 <digitalWrite>
    delay(500);
 80a00c8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a00cc:	f002 fb48 	bl	80a2760 <delay>
    digitalWrite(RESET_OLIMEX, HIGH);
 80a00d0:	2101      	movs	r1, #1
 80a00d2:	2004      	movs	r0, #4
 80a00d4:	f003 f81f 	bl	80a3116 <digitalWrite>
    return 1;
}
 80a00d8:	2001      	movs	r0, #1
 80a00da:	bd08      	pop	{r3, pc}

080a00dc <_Z12progModeOlmx6String>:

int resetParticl(String input) {
    System.reset();
}

int progModeOlmx(String input) {
 80a00dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    digitalWrite(WAKEUP_OLIMEX, HIGH);
 80a00de:	2101      	movs	r1, #1
 80a00e0:	2002      	movs	r0, #2
 80a00e2:	f003 f818 	bl	80a3116 <digitalWrite>
    delay(500);
 80a00e6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a00ea:	f002 fb39 	bl	80a2760 <delay>
    resetOlimex("");
 80a00ee:	490b      	ldr	r1, [pc, #44]	; (80a011c <_Z12progModeOlmx6String+0x40>)
 80a00f0:	4668      	mov	r0, sp
 80a00f2:	f002 f8d8 	bl	80a22a6 <_ZN6StringC1EPK19__FlashStringHelper>
 80a00f6:	4668      	mov	r0, sp
 80a00f8:	f7ff ffe1 	bl	80a00be <_Z11resetOlimex6String>
 80a00fc:	4668      	mov	r0, sp
 80a00fe:	f002 f88b 	bl	80a2218 <_ZN6StringD1Ev>
    delay(500);
 80a0102:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a0106:	f002 fb2b 	bl	80a2760 <delay>
    digitalWrite(WAKEUP_OLIMEX, LOW);
 80a010a:	2100      	movs	r1, #0
 80a010c:	2002      	movs	r0, #2
 80a010e:	f003 f802 	bl	80a3116 <digitalWrite>
    return 1;
}
 80a0112:	2001      	movs	r0, #1
 80a0114:	b005      	add	sp, #20
 80a0116:	f85d fb04 	ldr.w	pc, [sp], #4
 80a011a:	bf00      	nop
 80a011c:	080a619e 	.word	0x080a619e

080a0120 <_Z10WifiSignal6String>:
    delay(500);
    digitalWrite(RESET_OLIMEX, HIGH);
    return 1;
}

int WifiSignal(String input) {
 80a0120:	b500      	push	{lr}
 80a0122:	b08b      	sub	sp, #44	; 0x2c
    return WiFi.RSSI();
 80a0124:	4904      	ldr	r1, [pc, #16]	; (80a0138 <_Z10WifiSignal6String+0x18>)
 80a0126:	a801      	add	r0, sp, #4
 80a0128:	f002 fef8 	bl	80a2f1c <_ZN5spark9WiFiClass4RSSIEv>
 80a012c:	a801      	add	r0, sp, #4
 80a012e:	f002 fed3 	bl	80a2ed8 <_ZNK10WiFiSignalcvaEv>
}
 80a0132:	b00b      	add	sp, #44	; 0x2c
 80a0134:	f85d fb04 	ldr.w	pc, [sp], #4
 80a0138:	200002b8 	.word	0x200002b8

080a013c <_Z12resetParticl6String>:

int resetParticl(String input) {
 80a013c:	b508      	push	{r3, lr}
    System.reset();
 80a013e:	f001 fd23 	bl	80a1b88 <_ZN11SystemClass5resetEv>
}
 80a0142:	bd08      	pop	{r3, pc}

080a0144 <_Z10switchTest6String>:
    }
    
    return number;
}

int switchTest(String valueString) {
 80a0144:	b538      	push	{r3, r4, r5, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 80a0146:	490a      	ldr	r1, [pc, #40]	; (80a0170 <_Z10switchTest6String+0x2c>)
 80a0148:	4605      	mov	r5, r0
 80a014a:	f002 f970 	bl	80a242e <_ZNK6String6equalsEPKc>
    if (valueString == "true") {
 80a014e:	4604      	mov	r4, r0
 80a0150:	b118      	cbz	r0, 80a015a <_Z10switchTest6String+0x16>
        TESTCASE = true;
 80a0152:	4b08      	ldr	r3, [pc, #32]	; (80a0174 <_Z10switchTest6String+0x30>)
 80a0154:	2001      	movs	r0, #1
 80a0156:	7018      	strb	r0, [r3, #0]
        return 1;
 80a0158:	bd38      	pop	{r3, r4, r5, pc}
 80a015a:	4907      	ldr	r1, [pc, #28]	; (80a0178 <_Z10switchTest6String+0x34>)
 80a015c:	4628      	mov	r0, r5
 80a015e:	f002 f966 	bl	80a242e <_ZNK6String6equalsEPKc>
    }
    if (valueString == "false") {
 80a0162:	b118      	cbz	r0, 80a016c <_Z10switchTest6String+0x28>
        TESTCASE = false;
 80a0164:	4b03      	ldr	r3, [pc, #12]	; (80a0174 <_Z10switchTest6String+0x30>)
        return 0;
 80a0166:	4620      	mov	r0, r4
    if (valueString == "true") {
        TESTCASE = true;
        return 1;
    }
    if (valueString == "false") {
        TESTCASE = false;
 80a0168:	701c      	strb	r4, [r3, #0]
        return 0;
 80a016a:	bd38      	pop	{r3, r4, r5, pc}
    }
}
 80a016c:	bd38      	pop	{r3, r4, r5, pc}
 80a016e:	bf00      	nop
 80a0170:	080a5d78 	.word	0x080a5d78
 80a0174:	200001fc 	.word	0x200001fc
 80a0178:	080a5d7d 	.word	0x080a5d7d

080a017c <_Z12maxCurrentC16String>:

int maxCurrentC1(String setPointStr) {
 80a017c:	b570      	push	{r4, r5, r6, lr}
 80a017e:	b08a      	sub	sp, #40	; 0x28
    unsigned int setPoint = setPointStr.toInt();
 80a0180:	f002 f967 	bl	80a2452 <_ZNK6String5toIntEv>
 80a0184:	4605      	mov	r5, r0
    byte olimexMessage[4] = {0xFE,1,setPoint,0xFF};
 80a0186:	23fe      	movs	r3, #254	; 0xfe
 80a0188:	f88d 3004 	strb.w	r3, [sp, #4]
 80a018c:	23ff      	movs	r3, #255	; 0xff
 80a018e:	f88d 3007 	strb.w	r3, [sp, #7]
    if (!TESTCASE) {
 80a0192:	4b18      	ldr	r3, [pc, #96]	; (80a01f4 <_Z12maxCurrentC16String+0x78>)
    }
}

int maxCurrentC1(String setPointStr) {
    unsigned int setPoint = setPointStr.toInt();
    byte olimexMessage[4] = {0xFE,1,setPoint,0xFF};
 80a0194:	2001      	movs	r0, #1
    if (!TESTCASE) {
 80a0196:	781c      	ldrb	r4, [r3, #0]
    }
}

int maxCurrentC1(String setPointStr) {
    unsigned int setPoint = setPointStr.toInt();
    byte olimexMessage[4] = {0xFE,1,setPoint,0xFF};
 80a0198:	f88d 0005 	strb.w	r0, [sp, #5]
 80a019c:	f88d 5006 	strb.w	r5, [sp, #6]
    if (!TESTCASE) {
 80a01a0:	bb2c      	cbnz	r4, 80a01ee <_Z12maxCurrentC16String+0x72>
        Serial1.write(olimexMessage,4);
 80a01a2:	f002 fd67 	bl	80a2c74 <_Z22__fetch_global_Serial1v>
 80a01a6:	6803      	ldr	r3, [r0, #0]
 80a01a8:	2204      	movs	r2, #4
 80a01aa:	68db      	ldr	r3, [r3, #12]
 80a01ac:	eb0d 0102 	add.w	r1, sp, r2
 80a01b0:	4798      	blx	r3
        DEBUGPORT.println("maxCurrentC1>\tNew setpoint set at "+String(setPoint)+" Amps.");
 80a01b2:	f002 fca9 	bl	80a2b08 <_Z16_fetch_usbserialv>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a01b6:	4910      	ldr	r1, [pc, #64]	; (80a01f8 <_Z12maxCurrentC16String+0x7c>)
 80a01b8:	4606      	mov	r6, r0
 80a01ba:	a806      	add	r0, sp, #24
 80a01bc:	f002 f873 	bl	80a22a6 <_ZN6StringC1EPK19__FlashStringHelper>
 80a01c0:	220a      	movs	r2, #10
 80a01c2:	4629      	mov	r1, r5
 80a01c4:	a802      	add	r0, sp, #8
 80a01c6:	f002 f8bf 	bl	80a2348 <_ZN6StringC1Ejh>
 80a01ca:	a902      	add	r1, sp, #8
 80a01cc:	a806      	add	r0, sp, #24
 80a01ce:	f002 f910 	bl	80a23f2 <_ZplRK15StringSumHelperRK6String>
 80a01d2:	490a      	ldr	r1, [pc, #40]	; (80a01fc <_Z12maxCurrentC16String+0x80>)
 80a01d4:	f002 f919 	bl	80a240a <_ZplRK15StringSumHelperPKc>
 80a01d8:	6801      	ldr	r1, [r0, #0]
 80a01da:	4630      	mov	r0, r6
 80a01dc:	f002 f977 	bl	80a24ce <_ZN5Print7printlnEPKc>
 80a01e0:	a802      	add	r0, sp, #8
 80a01e2:	f002 f819 	bl	80a2218 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80a01e6:	a806      	add	r0, sp, #24
 80a01e8:	f002 f816 	bl	80a2218 <_ZN6StringD1Ev>
        return 0;
 80a01ec:	4620      	mov	r0, r4
    }
    return 1;
}
 80a01ee:	b00a      	add	sp, #40	; 0x28
 80a01f0:	bd70      	pop	{r4, r5, r6, pc}
 80a01f2:	bf00      	nop
 80a01f4:	200001fc 	.word	0x200001fc
 80a01f8:	080a5d83 	.word	0x080a5d83
 80a01fc:	080a5da6 	.word	0x080a5da6

080a0200 <_Z12maxCurrentC26String>:

int maxCurrentC2(String setPointStr) {
 80a0200:	b570      	push	{r4, r5, r6, lr}
 80a0202:	b08a      	sub	sp, #40	; 0x28
    unsigned int setPoint = setPointStr.toInt();
 80a0204:	f002 f925 	bl	80a2452 <_ZNK6String5toIntEv>
    byte olimexMessage[4] = {0xFE,2,setPoint,0xFF};
 80a0208:	23fe      	movs	r3, #254	; 0xfe
 80a020a:	f88d 3004 	strb.w	r3, [sp, #4]
 80a020e:	2302      	movs	r3, #2
 80a0210:	f88d 3005 	strb.w	r3, [sp, #5]
 80a0214:	23ff      	movs	r3, #255	; 0xff
 80a0216:	f88d 3007 	strb.w	r3, [sp, #7]
    if (!TESTCASE) {
 80a021a:	4b18      	ldr	r3, [pc, #96]	; (80a027c <_Z12maxCurrentC26String+0x7c>)
    }
    return 1;
}

int maxCurrentC2(String setPointStr) {
    unsigned int setPoint = setPointStr.toInt();
 80a021c:	4605      	mov	r5, r0
    byte olimexMessage[4] = {0xFE,2,setPoint,0xFF};
    if (!TESTCASE) {
 80a021e:	781c      	ldrb	r4, [r3, #0]
    return 1;
}

int maxCurrentC2(String setPointStr) {
    unsigned int setPoint = setPointStr.toInt();
    byte olimexMessage[4] = {0xFE,2,setPoint,0xFF};
 80a0220:	f88d 0006 	strb.w	r0, [sp, #6]
    if (!TESTCASE) {
 80a0224:	bb34      	cbnz	r4, 80a0274 <_Z12maxCurrentC26String+0x74>
        Serial1.write(olimexMessage,4);
 80a0226:	f002 fd25 	bl	80a2c74 <_Z22__fetch_global_Serial1v>
 80a022a:	6803      	ldr	r3, [r0, #0]
 80a022c:	2204      	movs	r2, #4
 80a022e:	68db      	ldr	r3, [r3, #12]
 80a0230:	eb0d 0102 	add.w	r1, sp, r2
 80a0234:	4798      	blx	r3
        DEBUGPORT.println("maxCurrentC2>\tNew setpoint set at "+String(setPoint)+" Amps.");
 80a0236:	f002 fc67 	bl	80a2b08 <_Z16_fetch_usbserialv>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a023a:	4911      	ldr	r1, [pc, #68]	; (80a0280 <_Z12maxCurrentC26String+0x80>)
 80a023c:	4606      	mov	r6, r0
 80a023e:	a806      	add	r0, sp, #24
 80a0240:	f002 f831 	bl	80a22a6 <_ZN6StringC1EPK19__FlashStringHelper>
 80a0244:	220a      	movs	r2, #10
 80a0246:	4629      	mov	r1, r5
 80a0248:	a802      	add	r0, sp, #8
 80a024a:	f002 f87d 	bl	80a2348 <_ZN6StringC1Ejh>
 80a024e:	a902      	add	r1, sp, #8
 80a0250:	a806      	add	r0, sp, #24
 80a0252:	f002 f8ce 	bl	80a23f2 <_ZplRK15StringSumHelperRK6String>
 80a0256:	490b      	ldr	r1, [pc, #44]	; (80a0284 <_Z12maxCurrentC26String+0x84>)
 80a0258:	f002 f8d7 	bl	80a240a <_ZplRK15StringSumHelperPKc>
 80a025c:	6801      	ldr	r1, [r0, #0]
 80a025e:	4630      	mov	r0, r6
 80a0260:	f002 f935 	bl	80a24ce <_ZN5Print7printlnEPKc>
 80a0264:	a802      	add	r0, sp, #8
 80a0266:	f001 ffd7 	bl	80a2218 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80a026a:	a806      	add	r0, sp, #24
 80a026c:	f001 ffd4 	bl	80a2218 <_ZN6StringD1Ev>
        return 0;
 80a0270:	4620      	mov	r0, r4
 80a0272:	e000      	b.n	80a0276 <_Z12maxCurrentC26String+0x76>
    }
    return 1;
 80a0274:	2001      	movs	r0, #1
}
 80a0276:	b00a      	add	sp, #40	; 0x28
 80a0278:	bd70      	pop	{r4, r5, r6, pc}
 80a027a:	bf00      	nop
 80a027c:	200001fc 	.word	0x200001fc
 80a0280:	080a5dad 	.word	0x080a5dad
 80a0284:	080a5da6 	.word	0x080a5da6

080a0288 <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  ~SPIClass() = default;
 80a0288:	b510      	push	{r4, lr}
 80a028a:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a028c:	6880      	ldr	r0, [r0, #8]
 80a028e:	b108      	cbz	r0, 80a0294 <_ZN8SPIClassD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
 80a0290:	f001 f9f2 	bl	80a1678 <os_mutex_recursive_destroy>
 80a0294:	4620      	mov	r0, r4
 80a0296:	bd10      	pop	{r4, pc}

080a0298 <_ZN10CloudClass9_variableIcEEbPKT_PK6StringRK17CloudVariableTypeIPKcvE.isra.6>:
        static_assert(sizeof(T)==0, "\n\nUse Particle.variable(\"name\", myVar, STRING); without & in front of myVar\n\n");
        return false;
    }

    template<typename T>
    static inline bool _variable(const T *varKey, const String *userVar, const CloudVariableTypeString& userVarType)
 80a0298:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    {
        spark_variable_t extra = {};
 80a029a:	2300      	movs	r3, #0
 80a029c:	9301      	str	r3, [sp, #4]
 80a029e:	9303      	str	r3, [sp, #12]
        extra.size = sizeof(extra);
 80a02a0:	230c      	movs	r3, #12
 80a02a2:	f8ad 3004 	strh.w	r3, [sp, #4]
        extra.update = update_string_variable;
 80a02a6:	4b04      	ldr	r3, [pc, #16]	; (80a02b8 <_ZN10CloudClass9_variableIcEEbPKT_PK6StringRK17CloudVariableTypeIPKcvE.isra.6+0x20>)
        return spark_variable(varKey, userVar, CloudVariableTypeString::TYPE_ID, &extra);
 80a02a8:	2204      	movs	r2, #4
    template<typename T>
    static inline bool _variable(const T *varKey, const String *userVar, const CloudVariableTypeString& userVarType)
    {
        spark_variable_t extra = {};
        extra.size = sizeof(extra);
        extra.update = update_string_variable;
 80a02aa:	9302      	str	r3, [sp, #8]
        return spark_variable(varKey, userVar, CloudVariableTypeString::TYPE_ID, &extra);
 80a02ac:	ab01      	add	r3, sp, #4
 80a02ae:	f001 fbb1 	bl	80a1a14 <spark_variable>
    }
 80a02b2:	b005      	add	sp, #20
 80a02b4:	f85d fb04 	ldr.w	pc, [sp], #4
 80a02b8:	080a00bb 	.word	0x080a00bb

080a02bc <_Z8initRFID6String>:
			break;
		}
	}
}

int initRFID(String input) {
 80a02bc:	b538      	push	{r3, r4, r5, lr}
    //additional config for debugging RFID readers
    pinMode(SS_PIN_CHARGER1, OUTPUT);
 80a02be:	2101      	movs	r1, #1
 80a02c0:	200b      	movs	r0, #11
 80a02c2:	f002 ff17 	bl	80a30f4 <pinMode>
	digitalWrite(SS_PIN_CHARGER1, HIGH);
 80a02c6:	2101      	movs	r1, #1
 80a02c8:	200b      	movs	r0, #11
 80a02ca:	f002 ff24 	bl	80a3116 <digitalWrite>

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a02ce:	4d20      	ldr	r5, [pc, #128]	; (80a0350 <_Z8initRFID6String+0x94>)
	pinMode(SS_PIN_CHARGER2, OUTPUT);
 80a02d0:	2101      	movs	r1, #1
 80a02d2:	200c      	movs	r0, #12
 80a02d4:	f002 ff0e 	bl	80a30f4 <pinMode>
	digitalWrite(SS_PIN_CHARGER2, HIGH);
 80a02d8:	2101      	movs	r1, #1
 80a02da:	200c      	movs	r0, #12
 80a02dc:	f002 ff1b 	bl	80a3116 <digitalWrite>
 80a02e0:	6829      	ldr	r1, [r5, #0]
 80a02e2:	f011 0401 	ands.w	r4, r1, #1
 80a02e6:	d10f      	bne.n	80a0308 <_Z8initRFID6String+0x4c>
 80a02e8:	4628      	mov	r0, r5
 80a02ea:	f7ff fede 	bl	80a00aa <__cxa_guard_acquire>
 80a02ee:	b158      	cbz	r0, 80a0308 <_Z8initRFID6String+0x4c>
 80a02f0:	4621      	mov	r1, r4
 80a02f2:	4818      	ldr	r0, [pc, #96]	; (80a0354 <_Z8initRFID6String+0x98>)
 80a02f4:	f001 fc0c 	bl	80a1b10 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a02f8:	4628      	mov	r0, r5
 80a02fa:	f7ff fedb 	bl	80a00b4 <__cxa_guard_release>
 80a02fe:	4a16      	ldr	r2, [pc, #88]	; (80a0358 <_Z8initRFID6String+0x9c>)
 80a0300:	4916      	ldr	r1, [pc, #88]	; (80a035c <_Z8initRFID6String+0xa0>)
 80a0302:	4814      	ldr	r0, [pc, #80]	; (80a0354 <_Z8initRFID6String+0x98>)
 80a0304:	f002 ff8c 	bl	80a3220 <__aeabi_atexit>

    void begin() {
        instance().begin();
    }
    void begin(uint16_t ss_pin) {
        instance().begin(ss_pin);
 80a0308:	2100      	movs	r1, #0
 80a030a:	4812      	ldr	r0, [pc, #72]	; (80a0354 <_Z8initRFID6String+0x98>)
 80a030c:	f001 fc0f 	bl	80a1b2e <_ZN8SPIClass5beginEt>
  
    SPI.begin(D0);      // Initiate  SPI bus
    //Particle.process();
    delay(50);
 80a0310:	2032      	movs	r0, #50	; 0x32
 80a0312:	f002 fa25 	bl	80a2760 <delay>
    mfrc522_Charger1.PCD_Init();   // Initiate MFRC522
 80a0316:	4812      	ldr	r0, [pc, #72]	; (80a0360 <_Z8initRFID6String+0xa4>)
 80a0318:	f000 fcc6 	bl	80a0ca8 <_ZN7MFRC5228PCD_InitEv>
    delay(500);
 80a031c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a0320:	f002 fa1e 	bl	80a2760 <delay>
    mfrc522_Charger2.PCD_Init();   // Initiate MFRC522
 80a0324:	480f      	ldr	r0, [pc, #60]	; (80a0364 <_Z8initRFID6String+0xa8>)
 80a0326:	f000 fcbf 	bl	80a0ca8 <_ZN7MFRC5228PCD_InitEv>
    ////mfrc522_Charger1.PCD_SetAntennaGain(mfrc522.RxGain_max);
    mfrc522_Charger1.PCD_SetAntennaGain(mfrc522_Charger1.RxGain_max);
 80a032a:	2170      	movs	r1, #112	; 0x70
 80a032c:	480c      	ldr	r0, [pc, #48]	; (80a0360 <_Z8initRFID6String+0xa4>)
 80a032e:	f000 fcf6 	bl	80a0d1e <_ZN7MFRC52218PCD_SetAntennaGainEh>
    mfrc522_Charger2.PCD_SetAntennaGain(mfrc522_Charger2.RxGain_max);
 80a0332:	2170      	movs	r1, #112	; 0x70
 80a0334:	480b      	ldr	r0, [pc, #44]	; (80a0364 <_Z8initRFID6String+0xa8>)
 80a0336:	f000 fcf2 	bl	80a0d1e <_ZN7MFRC52218PCD_SetAntennaGainEh>
    
    DEBUGPORT.println("Approximate your card to the reader...");
 80a033a:	f002 fbe5 	bl	80a2b08 <_Z16_fetch_usbserialv>
 80a033e:	490a      	ldr	r1, [pc, #40]	; (80a0368 <_Z8initRFID6String+0xac>)
 80a0340:	f002 f8c5 	bl	80a24ce <_ZN5Print7printlnEPKc>
    DEBUGPORT.println();    
 80a0344:	f002 fbe0 	bl	80a2b08 <_Z16_fetch_usbserialv>
 80a0348:	f002 f8b5 	bl	80a24b6 <_ZN5Print7printlnEv>
    return 1;
}
 80a034c:	2001      	movs	r0, #1
 80a034e:	bd38      	pop	{r3, r4, r5, pc}
 80a0350:	200000c0 	.word	0x200000c0
 80a0354:	200000c4 	.word	0x200000c4
 80a0358:	200000bc 	.word	0x200000bc
 80a035c:	080a0289 	.word	0x080a0289
 80a0360:	20000210 	.word	0x20000210
 80a0364:	20000114 	.word	0x20000114
 80a0368:	080a5dd0 	.word	0x080a5dd0

080a036c <_ZN10CloudClass7processEv>:
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
 80a036c:	b508      	push	{r3, lr}
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a036e:	f001 f95b 	bl	80a1628 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a0372:	4b03      	ldr	r3, [pc, #12]	; (80a0380 <_ZN10CloudClass7processEv+0x14>)
 80a0374:	6018      	str	r0, [r3, #0]
    		application_checkin();
    		spark_process();
    }
 80a0376:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
 80a037a:	f001 bb5b 	b.w	80a1a34 <spark_process>
 80a037e:	bf00      	nop
 80a0380:	200002c8 	.word	0x200002c8

080a0384 <_Z13activeChargerv>:
    delay(100);
    digitalWrite(D7,LOW);
    return;
}

int activeCharger() {
 80a0384:	b570      	push	{r4, r5, r6, lr}
    int number = 0;
    for (int i=0; i<3; i++) {
        if (Current[0][i] != 0.0) {
 80a0386:	4d13      	ldr	r5, [pc, #76]	; (80a03d4 <_Z13activeChargerv+0x50>)
 80a0388:	2100      	movs	r1, #0
 80a038a:	6828      	ldr	r0, [r5, #0]
 80a038c:	f003 ffc6 	bl	80a431c <__aeabi_fcmpeq>
 80a0390:	b160      	cbz	r0, 80a03ac <_Z13activeChargerv+0x28>
 80a0392:	2100      	movs	r1, #0
 80a0394:	6868      	ldr	r0, [r5, #4]
 80a0396:	f003 ffc1 	bl	80a431c <__aeabi_fcmpeq>
 80a039a:	b138      	cbz	r0, 80a03ac <_Z13activeChargerv+0x28>
    digitalWrite(D7,LOW);
    return;
}

int activeCharger() {
    int number = 0;
 80a039c:	2100      	movs	r1, #0
 80a039e:	68a8      	ldr	r0, [r5, #8]
 80a03a0:	f003 ffbc 	bl	80a431c <__aeabi_fcmpeq>
 80a03a4:	fab0 f480 	clz	r4, r0
 80a03a8:	0964      	lsrs	r4, r4, #5
 80a03aa:	e000      	b.n	80a03ae <_Z13activeChargerv+0x2a>
    for (int i=0; i<3; i++) {
        if (Current[0][i] != 0.0) {
            number += 1;
 80a03ac:	2401      	movs	r4, #1
            break;
        }
    }
    
    for (int i=0; i<3; i++) {
        if (Current[1][i] != 0.0) {
 80a03ae:	2100      	movs	r1, #0
 80a03b0:	68e8      	ldr	r0, [r5, #12]
 80a03b2:	4e08      	ldr	r6, [pc, #32]	; (80a03d4 <_Z13activeChargerv+0x50>)
 80a03b4:	f003 ffb2 	bl	80a431c <__aeabi_fcmpeq>
 80a03b8:	b148      	cbz	r0, 80a03ce <_Z13activeChargerv+0x4a>
 80a03ba:	2100      	movs	r1, #0
 80a03bc:	6930      	ldr	r0, [r6, #16]
 80a03be:	f003 ffad 	bl	80a431c <__aeabi_fcmpeq>
 80a03c2:	b120      	cbz	r0, 80a03ce <_Z13activeChargerv+0x4a>
 80a03c4:	2100      	movs	r1, #0
 80a03c6:	6970      	ldr	r0, [r6, #20]
 80a03c8:	f003 ffa8 	bl	80a431c <__aeabi_fcmpeq>
 80a03cc:	b900      	cbnz	r0, 80a03d0 <_Z13activeChargerv+0x4c>
            number += 2;
 80a03ce:	3402      	adds	r4, #2
            break;
        }
    }
    
    return number;
}
 80a03d0:	4620      	mov	r0, r4
 80a03d2:	bd70      	pop	{r4, r5, r6, pc}
 80a03d4:	200001c4 	.word	0x200001c4

080a03d8 <_Z18allowUser_callbackPhj>:
        maxCurrentC1_test((int)((EMeterData[2].PhaseCurrent[0]+EMeterData[2].PhaseCurrent[1]+EMeterData[2].PhaseCurrent[2])/2)); //Emeter3, I1
        maxCurrentC2_test((int)((EMeterData[2].PhaseCurrent[0]+EMeterData[2].PhaseCurrent[1]+EMeterData[2].PhaseCurrent[2])/2)); //Emeter3, I1
    }
}

void allowUser_callback(byte* payload, unsigned int length) {
 80a03d8:	b5b0      	push	{r4, r5, r7, lr}
 80a03da:	460c      	mov	r4, r1
    char payl[length+1];
 80a03dc:	f101 0308 	add.w	r3, r1, #8
        maxCurrentC1_test((int)((EMeterData[2].PhaseCurrent[0]+EMeterData[2].PhaseCurrent[1]+EMeterData[2].PhaseCurrent[2])/2)); //Emeter3, I1
        maxCurrentC2_test((int)((EMeterData[2].PhaseCurrent[0]+EMeterData[2].PhaseCurrent[1]+EMeterData[2].PhaseCurrent[2])/2)); //Emeter3, I1
    }
}

void allowUser_callback(byte* payload, unsigned int length) {
 80a03e0:	b082      	sub	sp, #8
    char payl[length+1];
 80a03e2:	f023 0307 	bic.w	r3, r3, #7
            client.publish("HANevse/photonConverted", "successful RFID read, but you are not in the userlist");
            break;
        default:
            client.publish("HANevse/photonConverted", "ERROR: unknown scenario");
        
    }
 80a03e6:	466d      	mov	r5, sp
        maxCurrentC1_test((int)((EMeterData[2].PhaseCurrent[0]+EMeterData[2].PhaseCurrent[1]+EMeterData[2].PhaseCurrent[2])/2)); //Emeter3, I1
        maxCurrentC2_test((int)((EMeterData[2].PhaseCurrent[0]+EMeterData[2].PhaseCurrent[1]+EMeterData[2].PhaseCurrent[2])/2)); //Emeter3, I1
    }
}

void allowUser_callback(byte* payload, unsigned int length) {
 80a03e8:	af00      	add	r7, sp, #0
    char payl[length+1];
 80a03ea:	ebad 0d03 	sub.w	sp, sp, r3
    char *endchar;
        
    memcpy(payl, payload, length);
 80a03ee:	460a      	mov	r2, r1
 80a03f0:	4601      	mov	r1, r0
 80a03f2:	4668      	mov	r0, sp
 80a03f4:	f004 fae4 	bl	80a49c0 <memcpy>
    payl[length] = NULL;
 80a03f8:	2300      	movs	r3, #0
 80a03fa:	f80d 3004 	strb.w	r3, [sp, r4]
    //char* ch = "and";
    //strncat(Body, ch, 3);
    //client.publish("HANevse/photonConverted", p);
    int port = (int) strtol(payl, &endchar, 10);
 80a03fe:	220a      	movs	r2, #10
 80a0400:	1d39      	adds	r1, r7, #4
 80a0402:	4668      	mov	r0, sp
 80a0404:	f005 f8f4 	bl	80a55f0 <strtol>
    //action=3  charger is occupied by another user
    //action=4  succesful stop of charge session
    //action=5  you just started a charge at this charger, but had another consecutive RFID swipe within 20 seconds
    //action=6  you are already charging at another charger
    //action=7  succesful RFID read, but you are not in the userlist
    endchar = endchar + 1;
 80a0408:	687b      	ldr	r3, [r7, #4]
    if (port == 1 + CHARGEROFFSET) 
 80a040a:	2801      	cmp	r0, #1
    //action=3  charger is occupied by another user
    //action=4  succesful stop of charge session
    //action=5  you just started a charge at this charger, but had another consecutive RFID swipe within 20 seconds
    //action=6  you are already charging at another charger
    //action=7  succesful RFID read, but you are not in the userlist
    endchar = endchar + 1;
 80a040c:	f103 0301 	add.w	r3, r3, #1
 80a0410:	607b      	str	r3, [r7, #4]
    if (port == 1 + CHARGEROFFSET) 
 80a0412:	d003      	beq.n	80a041c <_Z18allowUser_callbackPhj+0x44>
        port = AUTHENTICATION_CAR1;
    else if (port == 2 + CHARGEROFFSET)
 80a0414:	2802      	cmp	r0, #2
 80a0416:	d131      	bne.n	80a047c <_Z18allowUser_callbackPhj+0xa4>
        port = AUTHENTICATION_CAR2;
 80a0418:	2406      	movs	r4, #6
 80a041a:	e000      	b.n	80a041e <_Z18allowUser_callbackPhj+0x46>
    //action=5  you just started a charge at this charger, but had another consecutive RFID swipe within 20 seconds
    //action=6  you are already charging at another charger
    //action=7  succesful RFID read, but you are not in the userlist
    endchar = endchar + 1;
    if (port == 1 + CHARGEROFFSET) 
        port = AUTHENTICATION_CAR1;
 80a041c:	2405      	movs	r4, #5
    else if (port == 2 + CHARGEROFFSET)
        port = AUTHENTICATION_CAR2;
    else return; //port = EXTRA;
    int retPi = (int) strtol(endchar, &endchar, 10);
 80a041e:	220a      	movs	r2, #10
 80a0420:	4618      	mov	r0, r3
 80a0422:	1d39      	adds	r1, r7, #4
 80a0424:	f005 f8e4 	bl	80a55f0 <strtol>
    Pianswer = retPi; 
 80a0428:	b282      	uxth	r2, r0
 80a042a:	4b16      	ldr	r3, [pc, #88]	; (80a0484 <_Z18allowUser_callbackPhj+0xac>)
    if (Pianswer == 0)
 80a042c:	b902      	cbnz	r2, 80a0430 <_Z18allowUser_callbackPhj+0x58>
        Pianswer = 9;
 80a042e:	2209      	movs	r2, #9
    switch(retPi) {
 80a0430:	3801      	subs	r0, #1
        port = AUTHENTICATION_CAR2;
    else return; //port = EXTRA;
    int retPi = (int) strtol(endchar, &endchar, 10);
    Pianswer = retPi; 
    if (Pianswer == 0)
        Pianswer = 9;
 80a0432:	801a      	strh	r2, [r3, #0]
    switch(retPi) {
 80a0434:	2806      	cmp	r0, #6
 80a0436:	d81c      	bhi.n	80a0472 <_Z18allowUser_callbackPhj+0x9a>
 80a0438:	e8df f000 	tbb	[pc, r0]
 80a043c:	0e0c0a04 	.word	0x0e0c0a04
 80a0440:	1715      	.short	0x1715
 80a0442:	19          	.byte	0x19
 80a0443:	00          	.byte	0x00
        case 1:
            digitalWrite(port, HIGH);
 80a0444:	2101      	movs	r1, #1
 80a0446:	4620      	mov	r0, r4
 80a0448:	f002 fe65 	bl	80a3116 <digitalWrite>
            client.publish("HANevse1/photonConverted", "successful start new charge");
 80a044c:	4a0e      	ldr	r2, [pc, #56]	; (80a0488 <_Z18allowUser_callbackPhj+0xb0>)
 80a044e:	e008      	b.n	80a0462 <_Z18allowUser_callbackPhj+0x8a>
            break;
        case 2:
            client.publish("HANevse/photonConverted", "charger is free, but you already swiped the card in the last 20 sec");
 80a0450:	4a0e      	ldr	r2, [pc, #56]	; (80a048c <_Z18allowUser_callbackPhj+0xb4>)
 80a0452:	e00f      	b.n	80a0474 <_Z18allowUser_callbackPhj+0x9c>
            break;
        case 3:
            client.publish("HANevse1/photonConverted", "charger is occupied by another user");
 80a0454:	4a0e      	ldr	r2, [pc, #56]	; (80a0490 <_Z18allowUser_callbackPhj+0xb8>)
 80a0456:	e004      	b.n	80a0462 <_Z18allowUser_callbackPhj+0x8a>
            break;
        case 4:
            digitalWrite(port, LOW);
 80a0458:	2100      	movs	r1, #0
 80a045a:	4620      	mov	r0, r4
 80a045c:	f002 fe5b 	bl	80a3116 <digitalWrite>
            client.publish("HANevse1/photonConverted", "successful stop charge session");
 80a0460:	4a0c      	ldr	r2, [pc, #48]	; (80a0494 <_Z18allowUser_callbackPhj+0xbc>)
 80a0462:	490d      	ldr	r1, [pc, #52]	; (80a0498 <_Z18allowUser_callbackPhj+0xc0>)
 80a0464:	e007      	b.n	80a0476 <_Z18allowUser_callbackPhj+0x9e>
            break;
        case 5:
            client.publish("HANevse/photonConverted", "you just started a charge at this charger, but had another consecutive RFID swipe within 20 sec");
 80a0466:	4a0d      	ldr	r2, [pc, #52]	; (80a049c <_Z18allowUser_callbackPhj+0xc4>)
 80a0468:	e004      	b.n	80a0474 <_Z18allowUser_callbackPhj+0x9c>
            break;
        case 6:
            client.publish("HANevse/photonConverted", "you are already charging at another charger");
 80a046a:	4a0d      	ldr	r2, [pc, #52]	; (80a04a0 <_Z18allowUser_callbackPhj+0xc8>)
 80a046c:	e002      	b.n	80a0474 <_Z18allowUser_callbackPhj+0x9c>
            break;
        case 7:
            client.publish("HANevse/photonConverted", "successful RFID read, but you are not in the userlist");
 80a046e:	4a0d      	ldr	r2, [pc, #52]	; (80a04a4 <_Z18allowUser_callbackPhj+0xcc>)
 80a0470:	e000      	b.n	80a0474 <_Z18allowUser_callbackPhj+0x9c>
            break;
        default:
            client.publish("HANevse/photonConverted", "ERROR: unknown scenario");
 80a0472:	4a0d      	ldr	r2, [pc, #52]	; (80a04a8 <_Z18allowUser_callbackPhj+0xd0>)
 80a0474:	490d      	ldr	r1, [pc, #52]	; (80a04ac <_Z18allowUser_callbackPhj+0xd4>)
 80a0476:	480e      	ldr	r0, [pc, #56]	; (80a04b0 <_Z18allowUser_callbackPhj+0xd8>)
 80a0478:	f000 fef9 	bl	80a126e <_ZN4MQTT7publishEPKcS1_>
    endchar = endchar + 1;
    if (port == 1 + CHARGEROFFSET) 
        port = AUTHENTICATION_CAR1;
    else if (port == 2 + CHARGEROFFSET)
        port = AUTHENTICATION_CAR2;
    else return; //port = EXTRA;
 80a047c:	46ad      	mov	sp, r5
        default:
            client.publish("HANevse/photonConverted", "ERROR: unknown scenario");
        
    }
    
}
 80a047e:	3708      	adds	r7, #8
 80a0480:	46bd      	mov	sp, r7
 80a0482:	bdb0      	pop	{r4, r5, r7, pc}
 80a0484:	200000e0 	.word	0x200000e0
 80a0488:	080a5f35 	.word	0x080a5f35
 80a048c:	080a5f6a 	.word	0x080a5f6a
 80a0490:	080a5fc6 	.word	0x080a5fc6
 80a0494:	080a5fea 	.word	0x080a5fea
 80a0498:	080a5f51 	.word	0x080a5f51
 80a049c:	080a6009 	.word	0x080a6009
 80a04a0:	080a6069 	.word	0x080a6069
 80a04a4:	080a6095 	.word	0x080a6095
 80a04a8:	080a60cb 	.word	0x080a60cb
 80a04ac:	080a5fae 	.word	0x080a5fae
 80a04b0:	20000124 	.word	0x20000124

080a04b4 <_Z8callbackPcPhj>:

void callback(char* topic, byte* payload, unsigned int length) {
 80a04b4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80a04b6:	4606      	mov	r6, r0
 80a04b8:	460c      	mov	r4, r1
    test = "99";
 80a04ba:	4814      	ldr	r0, [pc, #80]	; (80a050c <_Z8callbackPcPhj+0x58>)
 80a04bc:	4914      	ldr	r1, [pc, #80]	; (80a0510 <_Z8callbackPcPhj+0x5c>)
        
    }
    
}

void callback(char* topic, byte* payload, unsigned int length) {
 80a04be:	4615      	mov	r5, r2
    test = "99";
 80a04c0:	f001 ff1e 	bl	80a2300 <_ZN6StringaSEPKc>
	//if (strcmp(topic, "HANevse/EnergyMeter")==0) {
	//    test = "1";
	//    getMeasure_callback(payload, length);
	//}
    //else
     if (strcmp(topic, "HANevse1/allowUser")==0)
 80a04c4:	4913      	ldr	r1, [pc, #76]	; (80a0514 <_Z8callbackPcPhj+0x60>)
 80a04c6:	4630      	mov	r0, r6
 80a04c8:	f004 fab6 	bl	80a4a38 <strcmp>
 80a04cc:	b918      	cbnz	r0, 80a04d6 <_Z8callbackPcPhj+0x22>
    {
        allowUser_callback(payload, length);
 80a04ce:	4629      	mov	r1, r5
 80a04d0:	4620      	mov	r0, r4
 80a04d2:	f7ff ff81 	bl	80a03d8 <_Z18allowUser_callbackPhj>
        //client.publish("HANevse1/photonConverted", "test photon responds");
    }
    
	time_t time = Time.now();
 80a04d6:	f002 f932 	bl	80a273e <_ZN9TimeClass3nowEv>
 80a04da:	4605      	mov	r5, r0
    //DEBUGPORT.println(time);
    DEBUGPORT.print("MQTT>\tCallback function is called at: ");
 80a04dc:	f002 fb14 	bl	80a2b08 <_Z16_fetch_usbserialv>
 80a04e0:	490d      	ldr	r1, [pc, #52]	; (80a0518 <_Z8callbackPcPhj+0x64>)
 80a04e2:	f001 ffe1 	bl	80a24a8 <_ZN5Print5printEPKc>
    DEBUGPORT.println(Time.format(time, TIME_FORMAT_DEFAULT));
 80a04e6:	f002 fb0f 	bl	80a2b08 <_Z16_fetch_usbserialv>
 80a04ea:	4604      	mov	r4, r0
 80a04ec:	4b0b      	ldr	r3, [pc, #44]	; (80a051c <_Z8callbackPcPhj+0x68>)
 80a04ee:	462a      	mov	r2, r5
 80a04f0:	681b      	ldr	r3, [r3, #0]
 80a04f2:	4668      	mov	r0, sp
 80a04f4:	490a      	ldr	r1, [pc, #40]	; (80a0520 <_Z8callbackPcPhj+0x6c>)
 80a04f6:	f002 f8cf 	bl	80a2698 <_ZN9TimeClass6formatElPKc>
 80a04fa:	9900      	ldr	r1, [sp, #0]
 80a04fc:	4620      	mov	r0, r4
 80a04fe:	f001 ffe6 	bl	80a24ce <_ZN5Print7printlnEPKc>
 80a0502:	4668      	mov	r0, sp
 80a0504:	f001 fe88 	bl	80a2218 <_ZN6StringD1Ev>
}
 80a0508:	b004      	add	sp, #16
 80a050a:	bd70      	pop	{r4, r5, r6, pc}
 80a050c:	20000220 	.word	0x20000220
 80a0510:	080a60e3 	.word	0x080a60e3
 80a0514:	080a60e6 	.word	0x080a60e6
 80a0518:	080a60f9 	.word	0x080a60f9
 80a051c:	20000004 	.word	0x20000004
 80a0520:	2000024c 	.word	0x2000024c

080a0524 <_Z9reconnectv>:
     return Authorized;
    else 
     return false;
}

void reconnect(void) {
 80a0524:	b508      	push	{r3, lr}
    while (!client.isConnected()) {
 80a0526:	4814      	ldr	r0, [pc, #80]	; (80a0578 <_Z9reconnectv+0x54>)
 80a0528:	f000 fd3d 	bl	80a0fa6 <_ZN4MQTT11isConnectedEv>
 80a052c:	bb18      	cbnz	r0, 80a0576 <_Z9reconnectv+0x52>
        DEBUGPORT.print("MQTT>\tConnecting to MQTT broker...");
 80a052e:	f002 faeb 	bl	80a2b08 <_Z16_fetch_usbserialv>
 80a0532:	4912      	ldr	r1, [pc, #72]	; (80a057c <_Z9reconnectv+0x58>)
 80a0534:	f001 ffb8 	bl	80a24a8 <_ZN5Print5printEPKc>
        if (client.connect("EV-Photon-test1")) {
 80a0538:	4911      	ldr	r1, [pc, #68]	; (80a0580 <_Z9reconnectv+0x5c>)
 80a053a:	480f      	ldr	r0, [pc, #60]	; (80a0578 <_Z9reconnectv+0x54>)
 80a053c:	f000 fe18 	bl	80a1170 <_ZN4MQTT7connectEPKc>
 80a0540:	b150      	cbz	r0, 80a0558 <_Z9reconnectv+0x34>
            DEBUGPORT.println("MQTT>\tConnected");
 80a0542:	f002 fae1 	bl	80a2b08 <_Z16_fetch_usbserialv>
 80a0546:	490f      	ldr	r1, [pc, #60]	; (80a0584 <_Z9reconnectv+0x60>)
 80a0548:	f001 ffc1 	bl	80a24ce <_ZN5Print7printlnEPKc>
            //client.subscribe("HANevse/#", client.QOS2);
            //client.subscribe("HANevse/EnergyMeter", client.QOS2);
            client.subscribe("HANevse1/allowUser", client.QOS2);
 80a054c:	2202      	movs	r2, #2
 80a054e:	490e      	ldr	r1, [pc, #56]	; (80a0588 <_Z9reconnectv+0x64>)
 80a0550:	4809      	ldr	r0, [pc, #36]	; (80a0578 <_Z9reconnectv+0x54>)
 80a0552:	f000 ffd9 	bl	80a1508 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>
 80a0556:	e7e6      	b.n	80a0526 <_Z9reconnectv+0x2>
        }
        else {
            DEBUGPORT.println("MQTT>\tConnection failed");
 80a0558:	f002 fad6 	bl	80a2b08 <_Z16_fetch_usbserialv>
 80a055c:	490b      	ldr	r1, [pc, #44]	; (80a058c <_Z9reconnectv+0x68>)
 80a055e:	f001 ffb6 	bl	80a24ce <_ZN5Print7printlnEPKc>
            DEBUGPORT.println("MQTT>\tRetrying...");
 80a0562:	f002 fad1 	bl	80a2b08 <_Z16_fetch_usbserialv>
 80a0566:	490a      	ldr	r1, [pc, #40]	; (80a0590 <_Z9reconnectv+0x6c>)
 80a0568:	f001 ffb1 	bl	80a24ce <_ZN5Print7printlnEPKc>
            delay(5000);
 80a056c:	f241 3088 	movw	r0, #5000	; 0x1388
 80a0570:	f002 f8f6 	bl	80a2760 <delay>
 80a0574:	e7d7      	b.n	80a0526 <_Z9reconnectv+0x2>
 80a0576:	bd08      	pop	{r3, pc}
 80a0578:	20000124 	.word	0x20000124
 80a057c:	080a6120 	.word	0x080a6120
 80a0580:	080a6143 	.word	0x080a6143
 80a0584:	080a6153 	.word	0x080a6153
 80a0588:	080a60e6 	.word	0x080a60e6
 80a058c:	080a6163 	.word	0x080a6163
 80a0590:	080a617b 	.word	0x080a617b

080a0594 <loop>:
	
	RGB.control(true);
    Time.zone(1); //Dutch time zone
}

void loop() {
 80a0594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    //Check the connection to the MQTT broker
    if (client.isConnected()) {
 80a0598:	48b9      	ldr	r0, [pc, #740]	; (80a0880 <loop+0x2ec>)
	
	RGB.control(true);
    Time.zone(1); //Dutch time zone
}

void loop() {
 80a059a:	b0a0      	sub	sp, #128	; 0x80
    //Check the connection to the MQTT broker
    if (client.isConnected()) {
 80a059c:	f000 fd03 	bl	80a0fa6 <_ZN4MQTT11isConnectedEv>
 80a05a0:	b118      	cbz	r0, 80a05aa <loop+0x16>
        client.loop();
 80a05a2:	48b7      	ldr	r0, [pc, #732]	; (80a0880 <loop+0x2ec>)
 80a05a4:	f000 feaa 	bl	80a12fc <_ZN4MQTT4loopEv>
 80a05a8:	e001      	b.n	80a05ae <loop+0x1a>
    }
    else reconnect();
 80a05aa:	f7ff ffbb 	bl	80a0524 <_Z9reconnectv>
    
    Particle.process();
    //currentStr = String(Current[0][0],1)+" "+String( Current[0][1],1)+" "+String(Current[0][2],1)+" "+String(Current[1][0],1)+" "+String( Current[1][1],1)+" "+String(Current[1][2],1)+" "+String(Frequency[0],2);
    currentStr = String(Current[0][0],1)+" "+String( PhaseVoltage[0][1],1)+" "+String(LineVoltage[0][2],1)+" "+String(Power[1][0],1)+" "+String( Energy[1],1)+" "+String(Current[1][2],1)+" "+String(Frequency[0],2);
 80a05ae:	4cb5      	ldr	r4, [pc, #724]	; (80a0884 <loop+0x2f0>)
    if (client.isConnected()) {
        client.loop();
    }
    else reconnect();
    
    Particle.process();
 80a05b0:	f7ff fedc 	bl	80a036c <_ZN10CloudClass7processEv>
    //currentStr = String(Current[0][0],1)+" "+String( Current[0][1],1)+" "+String(Current[0][2],1)+" "+String(Current[1][0],1)+" "+String( Current[1][1],1)+" "+String(Current[1][2],1)+" "+String(Frequency[0],2);
    currentStr = String(Current[0][0],1)+" "+String( PhaseVoltage[0][1],1)+" "+String(LineVoltage[0][2],1)+" "+String(Power[1][0],1)+" "+String( Energy[1],1)+" "+String(Current[1][2],1)+" "+String(Frequency[0],2);
 80a05b4:	2201      	movs	r2, #1
 80a05b6:	6821      	ldr	r1, [r4, #0]
 80a05b8:	4668      	mov	r0, sp
 80a05ba:	f001 feec 	bl	80a2396 <_ZN6StringC1Efi>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 80a05be:	4669      	mov	r1, sp
 80a05c0:	a804      	add	r0, sp, #16
 80a05c2:	f001 fe92 	bl	80a22ea <_ZN6StringC1ERKS_>
 80a05c6:	49b0      	ldr	r1, [pc, #704]	; (80a0888 <loop+0x2f4>)
 80a05c8:	a804      	add	r0, sp, #16
 80a05ca:	f001 ff1e 	bl	80a240a <_ZplRK15StringSumHelperPKc>
 80a05ce:	4605      	mov	r5, r0
 80a05d0:	4bae      	ldr	r3, [pc, #696]	; (80a088c <loop+0x2f8>)
 80a05d2:	2201      	movs	r2, #1
 80a05d4:	6859      	ldr	r1, [r3, #4]
 80a05d6:	a808      	add	r0, sp, #32
 80a05d8:	f001 fedd 	bl	80a2396 <_ZN6StringC1Efi>
 80a05dc:	a908      	add	r1, sp, #32
 80a05de:	4628      	mov	r0, r5
 80a05e0:	f001 ff07 	bl	80a23f2 <_ZplRK15StringSumHelperRK6String>
 80a05e4:	49a8      	ldr	r1, [pc, #672]	; (80a0888 <loop+0x2f4>)
 80a05e6:	f001 ff10 	bl	80a240a <_ZplRK15StringSumHelperPKc>
 80a05ea:	4605      	mov	r5, r0
 80a05ec:	4ba8      	ldr	r3, [pc, #672]	; (80a0890 <loop+0x2fc>)
 80a05ee:	2201      	movs	r2, #1
 80a05f0:	6899      	ldr	r1, [r3, #8]
 80a05f2:	a80c      	add	r0, sp, #48	; 0x30
 80a05f4:	f001 fecf 	bl	80a2396 <_ZN6StringC1Efi>
 80a05f8:	a90c      	add	r1, sp, #48	; 0x30
 80a05fa:	4628      	mov	r0, r5
 80a05fc:	f001 fef9 	bl	80a23f2 <_ZplRK15StringSumHelperRK6String>
 80a0600:	49a1      	ldr	r1, [pc, #644]	; (80a0888 <loop+0x2f4>)
 80a0602:	f001 ff02 	bl	80a240a <_ZplRK15StringSumHelperPKc>
 80a0606:	4605      	mov	r5, r0
 80a0608:	4ba2      	ldr	r3, [pc, #648]	; (80a0894 <loop+0x300>)
 80a060a:	2201      	movs	r2, #1
 80a060c:	68d9      	ldr	r1, [r3, #12]
 80a060e:	a810      	add	r0, sp, #64	; 0x40
 80a0610:	f001 fec1 	bl	80a2396 <_ZN6StringC1Efi>
 80a0614:	a910      	add	r1, sp, #64	; 0x40
 80a0616:	4628      	mov	r0, r5
 80a0618:	f001 feeb 	bl	80a23f2 <_ZplRK15StringSumHelperRK6String>
 80a061c:	499a      	ldr	r1, [pc, #616]	; (80a0888 <loop+0x2f4>)
 80a061e:	f001 fef4 	bl	80a240a <_ZplRK15StringSumHelperPKc>
 80a0622:	4605      	mov	r5, r0
 80a0624:	4b9c      	ldr	r3, [pc, #624]	; (80a0898 <loop+0x304>)
 80a0626:	2201      	movs	r2, #1
 80a0628:	6859      	ldr	r1, [r3, #4]
 80a062a:	a814      	add	r0, sp, #80	; 0x50
 80a062c:	f001 feb3 	bl	80a2396 <_ZN6StringC1Efi>
 80a0630:	a914      	add	r1, sp, #80	; 0x50
 80a0632:	4628      	mov	r0, r5
 80a0634:	f001 fedd 	bl	80a23f2 <_ZplRK15StringSumHelperRK6String>
 80a0638:	4993      	ldr	r1, [pc, #588]	; (80a0888 <loop+0x2f4>)
 80a063a:	f001 fee6 	bl	80a240a <_ZplRK15StringSumHelperPKc>
 80a063e:	4605      	mov	r5, r0
 80a0640:	2201      	movs	r2, #1
 80a0642:	6961      	ldr	r1, [r4, #20]
 80a0644:	a818      	add	r0, sp, #96	; 0x60
 80a0646:	f001 fea6 	bl	80a2396 <_ZN6StringC1Efi>
 80a064a:	a918      	add	r1, sp, #96	; 0x60
 80a064c:	4628      	mov	r0, r5
 80a064e:	f001 fed0 	bl	80a23f2 <_ZplRK15StringSumHelperRK6String>
 80a0652:	498d      	ldr	r1, [pc, #564]	; (80a0888 <loop+0x2f4>)
 80a0654:	f001 fed9 	bl	80a240a <_ZplRK15StringSumHelperPKc>
 80a0658:	4605      	mov	r5, r0
 80a065a:	4b90      	ldr	r3, [pc, #576]	; (80a089c <loop+0x308>)
 80a065c:	2202      	movs	r2, #2
 80a065e:	6819      	ldr	r1, [r3, #0]
 80a0660:	a81c      	add	r0, sp, #112	; 0x70
 80a0662:	f001 fe98 	bl	80a2396 <_ZN6StringC1Efi>
 80a0666:	a91c      	add	r1, sp, #112	; 0x70
 80a0668:	4628      	mov	r0, r5
 80a066a:	f001 fec2 	bl	80a23f2 <_ZplRK15StringSumHelperRK6String>
 80a066e:	4601      	mov	r1, r0
 80a0670:	488b      	ldr	r0, [pc, #556]	; (80a08a0 <loop+0x30c>)
 80a0672:	f001 fe2b 	bl	80a22cc <_ZN6StringaSERKS_>
 80a0676:	a81c      	add	r0, sp, #112	; 0x70
 80a0678:	f001 fdce 	bl	80a2218 <_ZN6StringD1Ev>
 80a067c:	a818      	add	r0, sp, #96	; 0x60
 80a067e:	f001 fdcb 	bl	80a2218 <_ZN6StringD1Ev>
 80a0682:	a814      	add	r0, sp, #80	; 0x50
 80a0684:	f001 fdc8 	bl	80a2218 <_ZN6StringD1Ev>
 80a0688:	a810      	add	r0, sp, #64	; 0x40
 80a068a:	f001 fdc5 	bl	80a2218 <_ZN6StringD1Ev>
 80a068e:	a80c      	add	r0, sp, #48	; 0x30
 80a0690:	f001 fdc2 	bl	80a2218 <_ZN6StringD1Ev>
 80a0694:	a808      	add	r0, sp, #32
 80a0696:	f001 fdbf 	bl	80a2218 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80a069a:	a804      	add	r0, sp, #16
 80a069c:	f001 fdbc 	bl	80a2218 <_ZN6StringD1Ev>
 80a06a0:	4668      	mov	r0, sp
 80a06a2:	f001 fdb9 	bl	80a2218 <_ZN6StringD1Ev>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a06a6:	f001 f9d5 	bl	80a1a54 <spark_cloud_flag_connected>
    //currentStr=String(Current[1][2],1)+" "+currentStr.substring(0, max(200, currentStr.length()))
    //currentStr = String(CurrentList[0],1)+" "+String(CurrentList[1],1)+" "+String(CurrentList[2],1)+" "+String(CurrentList[3],1)+" "+String(CurrentList[4],1)+" "+String(CurrentList[5],1)+" "+String(CurrentList[6],1)+" "+String(CurrentList[7],1)+" "+String(CurrentList[8],1)+" "+String(CurrentList[9],1)+" "+String(CurrentList[10],1)+" "+String(CurrentList[11],1)+" "+String(CurrentList[12],1)+" "+String(CurrentList[13],1)+" "+String(CurrentList[14],1)+" "+String(CurrentList[15],1)+" "+String(CurrentList[16],1)+" "+String(CurrentList[17],1)+" "+String(CurrentList[18],1)+" "+String(CurrentList[19],1);
    if (Particle.connected() == false) {
 80a06aa:	b908      	cbnz	r0, 80a06b0 <loop+0x11c>
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
 80a06ac:	f001 f9ca 	bl	80a1a44 <spark_cloud_flag_connect>
        Particle.connect();
    }
    //int Charger =1; 
    //int Charger = readSerialOlimex()+CHARGEROFFSET;
    Particle.process();
    if(counter>10){
 80a06b0:	4e7c      	ldr	r6, [pc, #496]	; (80a08a4 <loop+0x310>)
    if (Particle.connected() == false) {
        Particle.connect();
    }
    //int Charger =1; 
    //int Charger = readSerialOlimex()+CHARGEROFFSET;
    Particle.process();
 80a06b2:	f7ff fe5b 	bl	80a036c <_ZN10CloudClass7processEv>
    if(counter>10){
 80a06b6:	6833      	ldr	r3, [r6, #0]
 80a06b8:	4d7b      	ldr	r5, [pc, #492]	; (80a08a8 <loop+0x314>)
 80a06ba:	2b0a      	cmp	r3, #10
 80a06bc:	dd41      	ble.n	80a0742 <loop+0x1ae>
		counter = 0;
 80a06be:	2300      	movs	r3, #0
 80a06c0:	6033      	str	r3, [r6, #0]
		DEBUGPORT.println("LatestStartTime>\t"+String(LatestStartTime[0])+", "+String(LatestStartTime[1]));
 80a06c2:	f002 fa21 	bl	80a2b08 <_Z16_fetch_usbserialv>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a06c6:	4979      	ldr	r1, [pc, #484]	; (80a08ac <loop+0x318>)
 80a06c8:	4607      	mov	r7, r0
 80a06ca:	a818      	add	r0, sp, #96	; 0x60
 80a06cc:	f001 fdeb 	bl	80a22a6 <_ZN6StringC1EPK19__FlashStringHelper>
 80a06d0:	220a      	movs	r2, #10
 80a06d2:	6829      	ldr	r1, [r5, #0]
 80a06d4:	a814      	add	r0, sp, #80	; 0x50
 80a06d6:	f001 fe4a 	bl	80a236e <_ZN6StringC1Emh>
 80a06da:	a914      	add	r1, sp, #80	; 0x50
 80a06dc:	a818      	add	r0, sp, #96	; 0x60
 80a06de:	f001 fe88 	bl	80a23f2 <_ZplRK15StringSumHelperRK6String>
 80a06e2:	4973      	ldr	r1, [pc, #460]	; (80a08b0 <loop+0x31c>)
 80a06e4:	f001 fe91 	bl	80a240a <_ZplRK15StringSumHelperPKc>
 80a06e8:	4680      	mov	r8, r0
 80a06ea:	220a      	movs	r2, #10
 80a06ec:	6869      	ldr	r1, [r5, #4]
 80a06ee:	a81c      	add	r0, sp, #112	; 0x70
 80a06f0:	f001 fe3d 	bl	80a236e <_ZN6StringC1Emh>
 80a06f4:	a91c      	add	r1, sp, #112	; 0x70
 80a06f6:	4640      	mov	r0, r8
 80a06f8:	f001 fe7b 	bl	80a23f2 <_ZplRK15StringSumHelperRK6String>
 80a06fc:	6801      	ldr	r1, [r0, #0]
 80a06fe:	4638      	mov	r0, r7
 80a0700:	f001 fee5 	bl	80a24ce <_ZN5Print7printlnEPKc>
 80a0704:	a81c      	add	r0, sp, #112	; 0x70
 80a0706:	f001 fd87 	bl	80a2218 <_ZN6StringD1Ev>
 80a070a:	a814      	add	r0, sp, #80	; 0x50
 80a070c:	f001 fd84 	bl	80a2218 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80a0710:	a818      	add	r0, sp, #96	; 0x60
 80a0712:	f001 fd81 	bl	80a2218 <_ZN6StringD1Ev>
		DEBUGPORT.println(String(Current[1][0]+ Current[1][1]+ Current[1][2]));
 80a0716:	f002 f9f7 	bl	80a2b08 <_Z16_fetch_usbserialv>
 80a071a:	6921      	ldr	r1, [r4, #16]
 80a071c:	4607      	mov	r7, r0
 80a071e:	68e0      	ldr	r0, [r4, #12]
 80a0720:	f003 fb60 	bl	80a3de4 <__addsf3>
 80a0724:	6961      	ldr	r1, [r4, #20]
 80a0726:	f003 fb5d 	bl	80a3de4 <__addsf3>
 80a072a:	2206      	movs	r2, #6
 80a072c:	4601      	mov	r1, r0
 80a072e:	a81c      	add	r0, sp, #112	; 0x70
 80a0730:	f001 fe31 	bl	80a2396 <_ZN6StringC1Efi>
 80a0734:	991c      	ldr	r1, [sp, #112]	; 0x70
 80a0736:	4638      	mov	r0, r7
 80a0738:	f001 fec9 	bl	80a24ce <_ZN5Print7printlnEPKc>
 80a073c:	a81c      	add	r0, sp, #112	; 0x70
 80a073e:	f001 fd6b 	bl	80a2218 <_ZN6StringD1Ev>
    }
    counter++;
 80a0742:	6833      	ldr	r3, [r6, #0]
 80a0744:	3301      	adds	r3, #1
 80a0746:	6033      	str	r3, [r6, #0]
    //DEBUGPORT.println(String(LatestStartTime[0]+60));
    //DEBUGPORT.println(String(Time.now()));
    //DEBUGPORT.println((LatestStartTime[0] + 60 < Time.now()),DEC);
    //if ((LatestStartTime[0] + 60 < Time.now()) && (Current[0][0]+ Current[0][1]+ Current[0][2]) < 1)
    //if (((numberOfZeroReadings[0]>10 && (LatestStartTime[0] + 60 < Time.now()))|| ((Time.now()<LatestStartTime[0] + 70)&&(LatestStartTime[0] + 60 < Time.now()))) && (Current[0][0]+ Current[0][1]+ Current[0][2]) < 1)
    if( ((numberOfZeroReadings[0]>10)||(LatestStartTime[0] + 70 > Time.now()) )&& (LatestStartTime[0] + 60 < Time.now()) && (Current[0][0]+ Current[0][1]+ Current[0][2]) < 1)
 80a0748:	4b5a      	ldr	r3, [pc, #360]	; (80a08b4 <loop+0x320>)
 80a074a:	681a      	ldr	r2, [r3, #0]
 80a074c:	461f      	mov	r7, r3
 80a074e:	2a0a      	cmp	r2, #10
 80a0750:	dd07      	ble.n	80a0762 <loop+0x1ce>
 80a0752:	682b      	ldr	r3, [r5, #0]
 80a0754:	f103 063c 	add.w	r6, r3, #60	; 0x3c
 80a0758:	f001 fff1 	bl	80a273e <_ZN9TimeClass3nowEv>
 80a075c:	4286      	cmp	r6, r0
 80a075e:	d308      	bcc.n	80a0772 <loop+0x1de>
 80a0760:	e014      	b.n	80a078c <loop+0x1f8>
 80a0762:	682b      	ldr	r3, [r5, #0]
 80a0764:	f103 0646 	add.w	r6, r3, #70	; 0x46
 80a0768:	f001 ffe9 	bl	80a273e <_ZN9TimeClass3nowEv>
 80a076c:	4286      	cmp	r6, r0
 80a076e:	d8f0      	bhi.n	80a0752 <loop+0x1be>
 80a0770:	e00c      	b.n	80a078c <loop+0x1f8>
 80a0772:	6861      	ldr	r1, [r4, #4]
 80a0774:	6820      	ldr	r0, [r4, #0]
 80a0776:	f003 fb35 	bl	80a3de4 <__addsf3>
 80a077a:	68a1      	ldr	r1, [r4, #8]
 80a077c:	f003 fb32 	bl	80a3de4 <__addsf3>
 80a0780:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80a0784:	f003 fdd4 	bl	80a4330 <__aeabi_fcmplt>
 80a0788:	2800      	cmp	r0, #0
 80a078a:	d134      	bne.n	80a07f6 <loop+0x262>
    }
    //DEBUGPORT.println(Current[1][0]+ Current[1][1]+ Current[1][2],4);
    //DEBUGPORT.println(String(LatestStartTime[1]+60));
    //DEBUGPORT.println(String(Time.now()));
    //DEBUGPORT.println((LatestStartTime[1] + 60 < Time.now()),DEC);
    if( ((numberOfZeroReadings[1]>10)||(LatestStartTime[1] + 70 > Time.now()) )&& (LatestStartTime[1] + 60 < Time.now()) && (Current[1][0]+ Current[1][1]+ Current[1][2]) < 1)
 80a078c:	687b      	ldr	r3, [r7, #4]
 80a078e:	2b0a      	cmp	r3, #10
 80a0790:	dd06      	ble.n	80a07a0 <loop+0x20c>
 80a0792:	686d      	ldr	r5, [r5, #4]
 80a0794:	f001 ffd3 	bl	80a273e <_ZN9TimeClass3nowEv>
 80a0798:	353c      	adds	r5, #60	; 0x3c
 80a079a:	4285      	cmp	r5, r0
 80a079c:	d308      	bcc.n	80a07b0 <loop+0x21c>
 80a079e:	e014      	b.n	80a07ca <loop+0x236>
 80a07a0:	686b      	ldr	r3, [r5, #4]
 80a07a2:	f103 0646 	add.w	r6, r3, #70	; 0x46
 80a07a6:	f001 ffca 	bl	80a273e <_ZN9TimeClass3nowEv>
 80a07aa:	4286      	cmp	r6, r0
 80a07ac:	d8f1      	bhi.n	80a0792 <loop+0x1fe>
 80a07ae:	e00c      	b.n	80a07ca <loop+0x236>
 80a07b0:	6921      	ldr	r1, [r4, #16]
 80a07b2:	68e0      	ldr	r0, [r4, #12]
 80a07b4:	f003 fb16 	bl	80a3de4 <__addsf3>
 80a07b8:	6961      	ldr	r1, [r4, #20]
 80a07ba:	f003 fb13 	bl	80a3de4 <__addsf3>
 80a07be:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80a07c2:	f003 fdb5 	bl	80a4330 <__aeabi_fcmplt>
 80a07c6:	2800      	cmp	r0, #0
 80a07c8:	d137      	bne.n	80a083a <loop+0x2a6>
        digitalWrite(AUTHENTICATION_CAR2,LOW);
        //digitalWrite(D7,LOW);
        LatestStartTime[1]=2147483548;
        //DEBUGPORT.println("Timeout charger2");
    }
    delay(100);
 80a07ca:	2064      	movs	r0, #100	; 0x64
 80a07cc:	f001 ffc8 	bl	80a2760 <delay>
     delay(100);
    }
    */

    //Reset the UIDtag if there is no car charging
    if ((activeCharger()!=1)&&(activeCharger()!=3))
 80a07d0:	f7ff fdd8 	bl	80a0384 <_Z13activeChargerv>
 80a07d4:	f020 0002 	bic.w	r0, r0, #2
 80a07d8:	2801      	cmp	r0, #1
 80a07da:	d173      	bne.n	80a08c4 <loop+0x330>
        UIDtagCharger1="No ID";
    if ((activeCharger()!=2)&&(activeCharger()!=3))
 80a07dc:	f7ff fdd2 	bl	80a0384 <_Z13activeChargerv>
 80a07e0:	3802      	subs	r0, #2
 80a07e2:	2801      	cmp	r0, #1
 80a07e4:	d873      	bhi.n	80a08ce <loop+0x33a>
        UIDtagCharger2="No ID";
            
    handledCharger = !handledCharger;
 80a07e6:	4a34      	ldr	r2, [pc, #208]	; (80a08b8 <loop+0x324>)
 80a07e8:	7813      	ldrb	r3, [r2, #0]
 80a07ea:	f083 0301 	eor.w	r3, r3, #1
 80a07ee:	7013      	strb	r3, [r2, #0]
 80a07f0:	b020      	add	sp, #128	; 0x80
 80a07f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    //if ((LatestStartTime[0] + 60 < Time.now()) && (Current[0][0]+ Current[0][1]+ Current[0][2]) < 1)
    //if (((numberOfZeroReadings[0]>10 && (LatestStartTime[0] + 60 < Time.now()))|| ((Time.now()<LatestStartTime[0] + 70)&&(LatestStartTime[0] + 60 < Time.now()))) && (Current[0][0]+ Current[0][1]+ Current[0][2]) < 1)
    if( ((numberOfZeroReadings[0]>10)||(LatestStartTime[0] + 70 > Time.now()) )&& (LatestStartTime[0] + 60 < Time.now()) && (Current[0][0]+ Current[0][1]+ Current[0][2]) < 1)
    {   
        //timeout with current almost zero
        DEBUGPORT.println("Timeout charger"+String(CHARGEROFFSET+1));
 80a07f6:	f002 f987 	bl	80a2b08 <_Z16_fetch_usbserialv>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a07fa:	4930      	ldr	r1, [pc, #192]	; (80a08bc <loop+0x328>)
 80a07fc:	4606      	mov	r6, r0
 80a07fe:	a81c      	add	r0, sp, #112	; 0x70
 80a0800:	f001 fd51 	bl	80a22a6 <_ZN6StringC1EPK19__FlashStringHelper>
 80a0804:	220a      	movs	r2, #10
 80a0806:	2101      	movs	r1, #1
 80a0808:	a818      	add	r0, sp, #96	; 0x60
 80a080a:	f001 fd8a 	bl	80a2322 <_ZN6StringC1Eih>
 80a080e:	a918      	add	r1, sp, #96	; 0x60
 80a0810:	a81c      	add	r0, sp, #112	; 0x70
 80a0812:	f001 fdee 	bl	80a23f2 <_ZplRK15StringSumHelperRK6String>
 80a0816:	6801      	ldr	r1, [r0, #0]
 80a0818:	4630      	mov	r0, r6
 80a081a:	f001 fe58 	bl	80a24ce <_ZN5Print7printlnEPKc>
 80a081e:	a818      	add	r0, sp, #96	; 0x60
 80a0820:	f001 fcfa 	bl	80a2218 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80a0824:	a81c      	add	r0, sp, #112	; 0x70
 80a0826:	f001 fcf7 	bl	80a2218 <_ZN6StringD1Ev>
        digitalWrite(AUTHENTICATION_CAR1,LOW);
 80a082a:	2100      	movs	r1, #0
 80a082c:	2005      	movs	r0, #5
 80a082e:	f002 fc72 	bl	80a3116 <digitalWrite>
        LatestStartTime[0]=2147483548;
 80a0832:	4a23      	ldr	r2, [pc, #140]	; (80a08c0 <loop+0x32c>)
 80a0834:	4b1c      	ldr	r3, [pc, #112]	; (80a08a8 <loop+0x314>)
 80a0836:	601a      	str	r2, [r3, #0]
 80a0838:	e7a8      	b.n	80a078c <loop+0x1f8>
    //DEBUGPORT.println(String(Time.now()));
    //DEBUGPORT.println((LatestStartTime[1] + 60 < Time.now()),DEC);
    if( ((numberOfZeroReadings[1]>10)||(LatestStartTime[1] + 70 > Time.now()) )&& (LatestStartTime[1] + 60 < Time.now()) && (Current[1][0]+ Current[1][1]+ Current[1][2]) < 1)
    {
        //timeout with current almost zero
        DEBUGPORT.println("Timeout charger"+String(CHARGEROFFSET+2));
 80a083a:	f002 f965 	bl	80a2b08 <_Z16_fetch_usbserialv>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a083e:	491f      	ldr	r1, [pc, #124]	; (80a08bc <loop+0x328>)
 80a0840:	4604      	mov	r4, r0
 80a0842:	a81c      	add	r0, sp, #112	; 0x70
 80a0844:	f001 fd2f 	bl	80a22a6 <_ZN6StringC1EPK19__FlashStringHelper>
 80a0848:	220a      	movs	r2, #10
 80a084a:	2102      	movs	r1, #2
 80a084c:	a818      	add	r0, sp, #96	; 0x60
 80a084e:	f001 fd68 	bl	80a2322 <_ZN6StringC1Eih>
 80a0852:	a918      	add	r1, sp, #96	; 0x60
 80a0854:	a81c      	add	r0, sp, #112	; 0x70
 80a0856:	f001 fdcc 	bl	80a23f2 <_ZplRK15StringSumHelperRK6String>
 80a085a:	6801      	ldr	r1, [r0, #0]
 80a085c:	4620      	mov	r0, r4
 80a085e:	f001 fe36 	bl	80a24ce <_ZN5Print7printlnEPKc>
 80a0862:	a818      	add	r0, sp, #96	; 0x60
 80a0864:	f001 fcd8 	bl	80a2218 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80a0868:	a81c      	add	r0, sp, #112	; 0x70
 80a086a:	f001 fcd5 	bl	80a2218 <_ZN6StringD1Ev>
        digitalWrite(AUTHENTICATION_CAR2,LOW);
 80a086e:	2100      	movs	r1, #0
 80a0870:	2006      	movs	r0, #6
 80a0872:	f002 fc50 	bl	80a3116 <digitalWrite>
        //digitalWrite(D7,LOW);
        LatestStartTime[1]=2147483548;
 80a0876:	4a12      	ldr	r2, [pc, #72]	; (80a08c0 <loop+0x32c>)
 80a0878:	4b0b      	ldr	r3, [pc, #44]	; (80a08a8 <loop+0x314>)
 80a087a:	605a      	str	r2, [r3, #4]
 80a087c:	e7a5      	b.n	80a07ca <loop+0x236>
 80a087e:	bf00      	nop
 80a0880:	20000124 	.word	0x20000124
 80a0884:	200001c4 	.word	0x200001c4
 80a0888:	080a61a0 	.word	0x080a61a0
 80a088c:	200000e4 	.word	0x200000e4
 80a0890:	200001ac 	.word	0x200001ac
 80a0894:	200001dc 	.word	0x200001dc
 80a0898:	200001f4 	.word	0x200001f4
 80a089c:	2000010c 	.word	0x2000010c
 80a08a0:	20000200 	.word	0x20000200
 80a08a4:	20000000 	.word	0x20000000
 80a08a8:	200000d8 	.word	0x200000d8
 80a08ac:	080a618d 	.word	0x080a618d
 80a08b0:	080a619f 	.word	0x080a619f
 80a08b4:	200000d0 	.word	0x200000d0
 80a08b8:	200000e2 	.word	0x200000e2
 80a08bc:	080a61a2 	.word	0x080a61a2
 80a08c0:	7fffff9c 	.word	0x7fffff9c
    }
    */

    //Reset the UIDtag if there is no car charging
    if ((activeCharger()!=1)&&(activeCharger()!=3))
        UIDtagCharger1="No ID";
 80a08c4:	4904      	ldr	r1, [pc, #16]	; (80a08d8 <loop+0x344>)
 80a08c6:	4805      	ldr	r0, [pc, #20]	; (80a08dc <loop+0x348>)
 80a08c8:	f001 fd1a 	bl	80a2300 <_ZN6StringaSEPKc>
 80a08cc:	e786      	b.n	80a07dc <loop+0x248>
    if ((activeCharger()!=2)&&(activeCharger()!=3))
        UIDtagCharger2="No ID";
 80a08ce:	4902      	ldr	r1, [pc, #8]	; (80a08d8 <loop+0x344>)
 80a08d0:	4803      	ldr	r0, [pc, #12]	; (80a08e0 <loop+0x34c>)
 80a08d2:	f001 fd15 	bl	80a2300 <_ZN6StringaSEPKc>
 80a08d6:	e786      	b.n	80a07e6 <loop+0x252>
 80a08d8:	080a61b2 	.word	0x080a61b2
 80a08dc:	2000017c 	.word	0x2000017c
 80a08e0:	2000018c 	.word	0x2000018c

080a08e4 <_ZN10CloudClass8functionIA9_cIPFi6StringEEEEbRKT_DpT0_>:
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return register_function(call_raw_user_function, (void*)func, funcKey);
 80a08e4:	4602      	mov	r2, r0
 80a08e6:	4801      	ldr	r0, [pc, #4]	; (80a08ec <_ZN10CloudClass8functionIA9_cIPFi6StringEEEEbRKT_DpT0_+0x8>)
 80a08e8:	f002 b81c 	b.w	80a2924 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 80a08ec:	080a28f9 	.word	0x080a28f9

080a08f0 <setup>:
            delay(5000);
        }
    }
}

void setup() {
 80a08f0:	b508      	push	{r3, lr}
    DEBUGPORT.begin(115200); 
 80a08f2:	f002 f909 	bl	80a2b08 <_Z16_fetch_usbserialv>
 80a08f6:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80a08fa:	f002 f8f9 	bl	80a2af0 <_ZN9USBSerial5beginEl>
    Serial1.begin(9600);
 80a08fe:	f002 f9b9 	bl	80a2c74 <_Z22__fetch_global_Serial1v>
 80a0902:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a0906:	f002 f9af 	bl	80a2c68 <_ZN11USARTSerial5beginEm>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a090a:	f001 f8a3 	bl	80a1a54 <spark_cloud_flag_connected>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80a090e:	2800      	cmp	r0, #0
 80a0910:	d068      	beq.n	80a09e4 <setup+0xf4>
 80a0912:	f001 f89f 	bl	80a1a54 <spark_cloud_flag_connected>
    //DEBUGPORT.println(Voltage,5);
    //DEBUGPORT.println(String(Voltage,5));
    
    waitUntil(Particle.connected);
    
    pinMode(AUTHENTICATION_CAR1, OUTPUT); //pinMode(D1, OUTPUT); //Charger1_Authorized
 80a0916:	2101      	movs	r1, #1
 80a0918:	2005      	movs	r0, #5
 80a091a:	f002 fbeb 	bl	80a30f4 <pinMode>
    pinMode(AUTHENTICATION_CAR2, OUTPUT); //pinMode(D2, OUTPUT); //Charger2_Authorized
 80a091e:	2101      	movs	r1, #1
 80a0920:	2006      	movs	r0, #6
 80a0922:	f002 fbe7 	bl	80a30f4 <pinMode>
    pinMode(PILOT_FEEDBACK_CAR_1,INPUT);
 80a0926:	2100      	movs	r1, #0
 80a0928:	2010      	movs	r0, #16
 80a092a:	f002 fbe3 	bl	80a30f4 <pinMode>
    pinMode(PILOT_FEEDBACK_CAR_2,INPUT);
 80a092e:	2100      	movs	r1, #0
 80a0930:	2011      	movs	r0, #17
 80a0932:	f002 fbdf 	bl	80a30f4 <pinMode>
    pinMode(WAKEUP_OLIMEX, OUTPUT);
 80a0936:	2101      	movs	r1, #1
 80a0938:	2002      	movs	r0, #2
 80a093a:	f002 fbdb 	bl	80a30f4 <pinMode>
    pinMode(RESET_OLIMEX, OUTPUT);
 80a093e:	2101      	movs	r1, #1
 80a0940:	2004      	movs	r0, #4
 80a0942:	f002 fbd7 	bl	80a30f4 <pinMode>
    pinMode(D7, OUTPUT);
 80a0946:	2101      	movs	r1, #1
 80a0948:	2007      	movs	r0, #7
 80a094a:	f002 fbd3 	bl	80a30f4 <pinMode>
    
    digitalWrite(AUTHENTICATION_CAR1, LOW); //digitalWrite(D1,LOW);
 80a094e:	2100      	movs	r1, #0
 80a0950:	2005      	movs	r0, #5
 80a0952:	f002 fbe0 	bl	80a3116 <digitalWrite>
    digitalWrite(AUTHENTICATION_CAR2, LOW);//digitalWrite(D2,LOW);
 80a0956:	2100      	movs	r1, #0
 80a0958:	2006      	movs	r0, #6
 80a095a:	f002 fbdc 	bl	80a3116 <digitalWrite>
    digitalWrite(WAKEUP_OLIMEX, LOW);
 80a095e:	2100      	movs	r1, #0
 80a0960:	2002      	movs	r0, #2
 80a0962:	f002 fbd8 	bl	80a3116 <digitalWrite>
    digitalWrite(RESET_OLIMEX, HIGH);
 80a0966:	2101      	movs	r1, #1
 80a0968:	2004      	movs	r0, #4
 80a096a:	f002 fbd4 	bl	80a3116 <digitalWrite>
    digitalWrite(D7, LOW);
 80a096e:	2100      	movs	r1, #0
 80a0970:	2007      	movs	r0, #7
 80a0972:	f002 fbd0 	bl	80a3116 <digitalWrite>
    
    //Particle.process();
    //resetOlimex("");
    //Particle.process();

	Particle.function("switchTest",switchTest);
 80a0976:	491d      	ldr	r1, [pc, #116]	; (80a09ec <setup+0xfc>)
 80a0978:	481d      	ldr	r0, [pc, #116]	; (80a09f0 <setup+0x100>)
 80a097a:	f7ff ffb3 	bl	80a08e4 <_ZN10CloudClass8functionIA9_cIPFi6StringEEEEbRKT_DpT0_>
    Particle.function("maxCurrentC1",maxCurrentC1);
 80a097e:	491d      	ldr	r1, [pc, #116]	; (80a09f4 <setup+0x104>)
 80a0980:	481d      	ldr	r0, [pc, #116]	; (80a09f8 <setup+0x108>)
 80a0982:	f7ff ffaf 	bl	80a08e4 <_ZN10CloudClass8functionIA9_cIPFi6StringEEEEbRKT_DpT0_>
    Particle.function("maxCurrentC2",maxCurrentC2);
 80a0986:	491d      	ldr	r1, [pc, #116]	; (80a09fc <setup+0x10c>)
 80a0988:	481d      	ldr	r0, [pc, #116]	; (80a0a00 <setup+0x110>)
 80a098a:	f7ff ffab 	bl	80a08e4 <_ZN10CloudClass8functionIA9_cIPFi6StringEEEEbRKT_DpT0_>
    Particle.function("resetOlimex",resetOlimex);
 80a098e:	491d      	ldr	r1, [pc, #116]	; (80a0a04 <setup+0x114>)
 80a0990:	481d      	ldr	r0, [pc, #116]	; (80a0a08 <setup+0x118>)
 80a0992:	f7ff ffa7 	bl	80a08e4 <_ZN10CloudClass8functionIA9_cIPFi6StringEEEEbRKT_DpT0_>
    Particle.function("progModeOlmx",progModeOlmx);
 80a0996:	491d      	ldr	r1, [pc, #116]	; (80a0a0c <setup+0x11c>)
 80a0998:	481d      	ldr	r0, [pc, #116]	; (80a0a10 <setup+0x120>)
 80a099a:	f7ff ffa3 	bl	80a08e4 <_ZN10CloudClass8functionIA9_cIPFi6StringEEEEbRKT_DpT0_>
    Particle.function("resetParticl",resetParticl);
 80a099e:	491d      	ldr	r1, [pc, #116]	; (80a0a14 <setup+0x124>)
 80a09a0:	481d      	ldr	r0, [pc, #116]	; (80a0a18 <setup+0x128>)
 80a09a2:	f7ff ff9f 	bl	80a08e4 <_ZN10CloudClass8functionIA9_cIPFi6StringEEEEbRKT_DpT0_>
    //Particle.function("AuthPinsHigh",AuthPinsHigh);
    //Particle.function("AuthPinsLow",AuthPinsLow);
    Particle.function("WifiSignal",WifiSignal);
 80a09a6:	491d      	ldr	r1, [pc, #116]	; (80a0a1c <setup+0x12c>)
 80a09a8:	481d      	ldr	r0, [pc, #116]	; (80a0a20 <setup+0x130>)
 80a09aa:	f7ff ff9b 	bl	80a08e4 <_ZN10CloudClass8functionIA9_cIPFi6StringEEEEbRKT_DpT0_>
    Particle.function("initRFID",initRFID);
 80a09ae:	491d      	ldr	r1, [pc, #116]	; (80a0a24 <setup+0x134>)
 80a09b0:	481d      	ldr	r0, [pc, #116]	; (80a0a28 <setup+0x138>)
 80a09b2:	f7ff ff97 	bl	80a08e4 <_ZN10CloudClass8functionIA9_cIPFi6StringEEEEbRKT_DpT0_>
        return _variable(varKey, &var, DOUBLE);
    }

    static inline bool _variable(const char* varKey, const String& var)
    {
        return _variable(varKey, &var, STRING);
 80a09b6:	491d      	ldr	r1, [pc, #116]	; (80a0a2c <setup+0x13c>)
 80a09b8:	481d      	ldr	r0, [pc, #116]	; (80a0a30 <setup+0x140>)
 80a09ba:	f7ff fc6d 	bl	80a0298 <_ZN10CloudClass9_variableIcEEbPKT_PK6StringRK17CloudVariableTypeIPKcvE.isra.6>
 80a09be:	491d      	ldr	r1, [pc, #116]	; (80a0a34 <setup+0x144>)
 80a09c0:	481d      	ldr	r0, [pc, #116]	; (80a0a38 <setup+0x148>)
 80a09c2:	f7ff fc69 	bl	80a0298 <_ZN10CloudClass9_variableIcEEbPKT_PK6StringRK17CloudVariableTypeIPKcvE.isra.6>
 80a09c6:	491d      	ldr	r1, [pc, #116]	; (80a0a3c <setup+0x14c>)
 80a09c8:	481d      	ldr	r0, [pc, #116]	; (80a0a40 <setup+0x150>)
 80a09ca:	f7ff fc65 	bl	80a0298 <_ZN10CloudClass9_variableIcEEbPKT_PK6StringRK17CloudVariableTypeIPKcvE.isra.6>
    Particle.variable("currentStr",currentStr);
    Particle.variable("ShareVar",ShareVar);
    //Particle.variable("Current", Current_Str);
    Particle.variable("Topic", test);
    Particle.process();
 80a09ce:	f7ff fccd 	bl	80a036c <_ZN10CloudClass7processEv>
	
	RGB.control(true);
 80a09d2:	2001      	movs	r0, #1
 80a09d4:	f001 fed6 	bl	80a2784 <_ZN8RGBClass7controlEb>
    Time.zone(1); //Dutch time zone
}
 80a09d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    //Particle.variable("Current", Current_Str);
    Particle.variable("Topic", test);
    Particle.process();
	
	RGB.control(true);
    Time.zone(1); //Dutch time zone
 80a09dc:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80a09e0:	f001 bdba 	b.w	80a2558 <_ZN9TimeClass4zoneEf>
            spark_process();
 80a09e4:	f001 f826 	bl	80a1a34 <spark_process>
 80a09e8:	e78f      	b.n	80a090a <setup+0x1a>
 80a09ea:	bf00      	nop
 80a09ec:	080a0145 	.word	0x080a0145
 80a09f0:	080a6269 	.word	0x080a6269
 80a09f4:	080a017d 	.word	0x080a017d
 80a09f8:	080a6274 	.word	0x080a6274
 80a09fc:	080a0201 	.word	0x080a0201
 80a0a00:	080a6281 	.word	0x080a6281
 80a0a04:	080a00bf 	.word	0x080a00bf
 80a0a08:	080a628e 	.word	0x080a628e
 80a0a0c:	080a00dd 	.word	0x080a00dd
 80a0a10:	080a629a 	.word	0x080a629a
 80a0a14:	080a013d 	.word	0x080a013d
 80a0a18:	080a62a7 	.word	0x080a62a7
 80a0a1c:	080a0121 	.word	0x080a0121
 80a0a20:	080a62b4 	.word	0x080a62b4
 80a0a24:	080a02bd 	.word	0x080a02bd
 80a0a28:	080a62bf 	.word	0x080a62bf
 80a0a2c:	20000200 	.word	0x20000200
 80a0a30:	080a62c8 	.word	0x080a62c8
 80a0a34:	2000019c 	.word	0x2000019c
 80a0a38:	080a62d3 	.word	0x080a62d3
 80a0a3c:	20000220 	.word	0x20000220
 80a0a40:	080a62dc 	.word	0x080a62dc

080a0a44 <_GLOBAL__sub_I_readnextLine>:
        UIDtagCharger1="No ID";
    if ((activeCharger()!=2)&&(activeCharger()!=3))
        UIDtagCharger2="No ID";
            
    handledCharger = !handledCharger;
 80a0a44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
void reconnect(void);
void callback(char* topic, byte* payload, unsigned int length);
void charToString(const char in[], String &out);
void getMeasure_callback(byte* payload, unsigned int length);

String UIDtagCharger1="No ID";
 80a0a46:	4f30      	ldr	r7, [pc, #192]	; (80a0b08 <_GLOBAL__sub_I_readnextLine+0xc4>)
 80a0a48:	4e30      	ldr	r6, [pc, #192]	; (80a0b0c <_GLOBAL__sub_I_readnextLine+0xc8>)
 80a0a4a:	4c31      	ldr	r4, [pc, #196]	; (80a0b10 <_GLOBAL__sub_I_readnextLine+0xcc>)
 80a0a4c:	4d31      	ldr	r5, [pc, #196]	; (80a0b14 <_GLOBAL__sub_I_readnextLine+0xd0>)
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a0a4e:	f000 fd9b 	bl	80a1588 <HAL_Pin_Map>
 80a0a52:	4639      	mov	r1, r7
 80a0a54:	4630      	mov	r0, r6
 80a0a56:	f001 fc26 	bl	80a22a6 <_ZN6StringC1EPK19__FlashStringHelper>
 80a0a5a:	4630      	mov	r0, r6
String UIDtagCharger2="No ID";
 80a0a5c:	4e2e      	ldr	r6, [pc, #184]	; (80a0b18 <_GLOBAL__sub_I_readnextLine+0xd4>)
void reconnect(void);
void callback(char* topic, byte* payload, unsigned int length);
void charToString(const char in[], String &out);
void getMeasure_callback(byte* payload, unsigned int length);

String UIDtagCharger1="No ID";
 80a0a5e:	4622      	mov	r2, r4
 80a0a60:	4629      	mov	r1, r5
 80a0a62:	f002 fbdd 	bl	80a3220 <__aeabi_atexit>
String UIDtagCharger2="No ID";
 80a0a66:	4639      	mov	r1, r7
 80a0a68:	4630      	mov	r0, r6
 80a0a6a:	f001 fc1c 	bl	80a22a6 <_ZN6StringC1EPK19__FlashStringHelper>
 80a0a6e:	4622      	mov	r2, r4
 80a0a70:	4629      	mov	r1, r5
 80a0a72:	4630      	mov	r0, r6
 80a0a74:	f002 fbd4 	bl	80a3220 <__aeabi_atexit>
//SYSTEM_THREAD(ENABLED);

//MQTT setting
//byte server[] = {192,168,43,249};
//MQTT client(server, 1883, callback);
MQTT client("broker.hivemq.com", 1883, MQTT_DEFAULT_KEEPALIVE, callback, 512);
 80a0a78:	f44f 7300 	mov.w	r3, #512	; 0x200
 80a0a7c:	4e27      	ldr	r6, [pc, #156]	; (80a0b1c <_GLOBAL__sub_I_readnextLine+0xd8>)
 80a0a7e:	9301      	str	r3, [sp, #4]
 80a0a80:	4b27      	ldr	r3, [pc, #156]	; (80a0b20 <_GLOBAL__sub_I_readnextLine+0xdc>)
 80a0a82:	f240 725b 	movw	r2, #1883	; 0x75b
 80a0a86:	9300      	str	r3, [sp, #0]
 80a0a88:	4926      	ldr	r1, [pc, #152]	; (80a0b24 <_GLOBAL__sub_I_readnextLine+0xe0>)
 80a0a8a:	230f      	movs	r3, #15
 80a0a8c:	4630      	mov	r0, r6
 80a0a8e:	f000 f9a3 	bl	80a0dd8 <_ZN4MQTTC1EPctiPFvS0_PhjEi>
 80a0a92:	4630      	mov	r0, r6
//char ID[] = "11111";

String test = "0";
 80a0a94:	4e24      	ldr	r6, [pc, #144]	; (80a0b28 <_GLOBAL__sub_I_readnextLine+0xe4>)
//SYSTEM_THREAD(ENABLED);

//MQTT setting
//byte server[] = {192,168,43,249};
//MQTT client(server, 1883, callback);
MQTT client("broker.hivemq.com", 1883, MQTT_DEFAULT_KEEPALIVE, callback, 512);
 80a0a96:	4622      	mov	r2, r4
 80a0a98:	4924      	ldr	r1, [pc, #144]	; (80a0b2c <_GLOBAL__sub_I_readnextLine+0xe8>)
 80a0a9a:	f002 fbc1 	bl	80a3220 <__aeabi_atexit>
//char ID[] = "11111";

String test = "0";
 80a0a9e:	4924      	ldr	r1, [pc, #144]	; (80a0b30 <_GLOBAL__sub_I_readnextLine+0xec>)
 80a0aa0:	4630      	mov	r0, r6
 80a0aa2:	f001 fc00 	bl	80a22a6 <_ZN6StringC1EPK19__FlashStringHelper>
 80a0aa6:	4622      	mov	r2, r4
 80a0aa8:	4629      	mov	r1, r5
 80a0aaa:	4630      	mov	r0, r6
 80a0aac:	f002 fbb8 	bl	80a3220 <__aeabi_atexit>
int counter=11;
MFRC522 mfrc522_Charger1(SS_PIN_CHARGER1, RST_PIN);   // Create MFRC522 instance.
MFRC522 mfrc522_Charger2(SS_PIN_CHARGER2, RST_PIN);   // Create MFRC522 instance.
unsigned long LatestStartTime[2]={0,0};
bool handledCharger=0;
String ShareVar;
 80a0ab0:	4e20      	ldr	r6, [pc, #128]	; (80a0b34 <_GLOBAL__sub_I_readnextLine+0xf0>)
 80a0ab2:	4f21      	ldr	r7, [pc, #132]	; (80a0b38 <_GLOBAL__sub_I_readnextLine+0xf4>)

String test = "0";


int counter=11;
MFRC522 mfrc522_Charger1(SS_PIN_CHARGER1, RST_PIN);   // Create MFRC522 instance.
 80a0ab4:	220a      	movs	r2, #10
 80a0ab6:	210b      	movs	r1, #11
 80a0ab8:	4820      	ldr	r0, [pc, #128]	; (80a0b3c <_GLOBAL__sub_I_readnextLine+0xf8>)
 80a0aba:	f000 f847 	bl	80a0b4c <_ZN7MFRC522C1Ehh>
MFRC522 mfrc522_Charger2(SS_PIN_CHARGER2, RST_PIN);   // Create MFRC522 instance.
 80a0abe:	220a      	movs	r2, #10
 80a0ac0:	210c      	movs	r1, #12
 80a0ac2:	481f      	ldr	r0, [pc, #124]	; (80a0b40 <_GLOBAL__sub_I_readnextLine+0xfc>)
 80a0ac4:	f000 f842 	bl	80a0b4c <_ZN7MFRC522C1Ehh>
unsigned long LatestStartTime[2]={0,0};
bool handledCharger=0;
String ShareVar;
 80a0ac8:	4631      	mov	r1, r6
 80a0aca:	4638      	mov	r0, r7
 80a0acc:	f001 fbeb 	bl	80a22a6 <_ZN6StringC1EPK19__FlashStringHelper>
 80a0ad0:	4638      	mov	r0, r7
//     int PendingCharger;
//     unsigned long StartTime;
// };

EMeter EMeterData[NUMBEROFMETERS];
String EVListStr="";
 80a0ad2:	4f1c      	ldr	r7, [pc, #112]	; (80a0b44 <_GLOBAL__sub_I_readnextLine+0x100>)
int counter=11;
MFRC522 mfrc522_Charger1(SS_PIN_CHARGER1, RST_PIN);   // Create MFRC522 instance.
MFRC522 mfrc522_Charger2(SS_PIN_CHARGER2, RST_PIN);   // Create MFRC522 instance.
unsigned long LatestStartTime[2]={0,0};
bool handledCharger=0;
String ShareVar;
 80a0ad4:	4622      	mov	r2, r4
 80a0ad6:	4629      	mov	r1, r5
 80a0ad8:	f002 fba2 	bl	80a3220 <__aeabi_atexit>
//     int PendingCharger;
//     unsigned long StartTime;
// };

EMeter EMeterData[NUMBEROFMETERS];
String EVListStr="";
 80a0adc:	4631      	mov	r1, r6
 80a0ade:	4638      	mov	r0, r7
 80a0ae0:	f001 fbe1 	bl	80a22a6 <_ZN6StringC1EPK19__FlashStringHelper>
 80a0ae4:	4638      	mov	r0, r7
String currentStr="";
 80a0ae6:	4f18      	ldr	r7, [pc, #96]	; (80a0b48 <_GLOBAL__sub_I_readnextLine+0x104>)
//     int PendingCharger;
//     unsigned long StartTime;
// };

EMeter EMeterData[NUMBEROFMETERS];
String EVListStr="";
 80a0ae8:	4622      	mov	r2, r4
 80a0aea:	4629      	mov	r1, r5
 80a0aec:	f002 fb98 	bl	80a3220 <__aeabi_atexit>
String currentStr="";
 80a0af0:	4631      	mov	r1, r6
 80a0af2:	4638      	mov	r0, r7
 80a0af4:	f001 fbd7 	bl	80a22a6 <_ZN6StringC1EPK19__FlashStringHelper>
 80a0af8:	4622      	mov	r2, r4
 80a0afa:	4629      	mov	r1, r5
 80a0afc:	4638      	mov	r0, r7
        UIDtagCharger1="No ID";
    if ((activeCharger()!=2)&&(activeCharger()!=3))
        UIDtagCharger2="No ID";
            
    handledCharger = !handledCharger;
 80a0afe:	b003      	add	sp, #12
 80a0b00:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
//     unsigned long StartTime;
// };

EMeter EMeterData[NUMBEROFMETERS];
String EVListStr="";
String currentStr="";
 80a0b04:	f002 bb8c 	b.w	80a3220 <__aeabi_atexit>
 80a0b08:	080a61b2 	.word	0x080a61b2
 80a0b0c:	2000017c 	.word	0x2000017c
 80a0b10:	200000bc 	.word	0x200000bc
 80a0b14:	080a2219 	.word	0x080a2219
 80a0b18:	2000018c 	.word	0x2000018c
 80a0b1c:	20000124 	.word	0x20000124
 80a0b20:	080a04b5 	.word	0x080a04b5
 80a0b24:	080a62e2 	.word	0x080a62e2
 80a0b28:	20000220 	.word	0x20000220
 80a0b2c:	080a1555 	.word	0x080a1555
 80a0b30:	080a61fd 	.word	0x080a61fd
 80a0b34:	080a619e 	.word	0x080a619e
 80a0b38:	2000019c 	.word	0x2000019c
 80a0b3c:	20000210 	.word	0x20000210
 80a0b40:	20000114 	.word	0x20000114
 80a0b44:	200000fc 	.word	0x200000fc
 80a0b48:	20000200 	.word	0x20000200

080a0b4c <_ZN7MFRC522C1Ehh>:

/**
 * Constructor.
 * Prepares the output pins.
 */
MFRC522::MFRC522(	byte chipSelectPin,		///< Arduino pin connected to MFRC522's SPI slave select input (Pin 24, NSS, active low)
 80a0b4c:	b538      	push	{r3, r4, r5, lr}
 80a0b4e:	4604      	mov	r4, r0
 80a0b50:	4615      	mov	r5, r2
 80a0b52:	4608      	mov	r0, r1
					byte resetPowerDownPin	///< Arduino pin connected to MFRC522's reset and power down input (Pin 6, NRSTPD, active low)
				) {
	// Set the chipSelectPin as digital output, do not select the slave yet
	_chipSelectPin = chipSelectPin;
 80a0b54:	7321      	strb	r1, [r4, #12]
	pinMode(_chipSelectPin, OUTPUT);
 80a0b56:	2101      	movs	r1, #1
 80a0b58:	f002 facc 	bl	80a30f4 <pinMode>
	digitalWrite(_chipSelectPin, HIGH);
 80a0b5c:	7b20      	ldrb	r0, [r4, #12]
 80a0b5e:	2101      	movs	r1, #1
 80a0b60:	f002 fad9 	bl	80a3116 <digitalWrite>
	
	// Set the resetPowerDownPin as digital output, do not reset or power down.
	_resetPowerDownPin = resetPowerDownPin;
	pinMode(_resetPowerDownPin, OUTPUT);
 80a0b64:	4628      	mov	r0, r5
	_chipSelectPin = chipSelectPin;
	pinMode(_chipSelectPin, OUTPUT);
	digitalWrite(_chipSelectPin, HIGH);
	
	// Set the resetPowerDownPin as digital output, do not reset or power down.
	_resetPowerDownPin = resetPowerDownPin;
 80a0b66:	7365      	strb	r5, [r4, #13]
	pinMode(_resetPowerDownPin, OUTPUT);
 80a0b68:	2101      	movs	r1, #1
 80a0b6a:	f002 fac3 	bl	80a30f4 <pinMode>
	digitalWrite(_resetPowerDownPin, LOW);
 80a0b6e:	7b60      	ldrb	r0, [r4, #13]
 80a0b70:	2100      	movs	r1, #0
 80a0b72:	f002 fad0 	bl	80a3116 <digitalWrite>
	
	// Set SPI bus to work with MFRC522 chip.
	//setSPIConfig();
} // End constructor
 80a0b76:	4620      	mov	r0, r4
 80a0b78:	bd38      	pop	{r3, r4, r5, pc}
	...

080a0b7c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>:
namespace particle {

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
 80a0b7c:	b538      	push	{r3, r4, r5, lr}
        static SPIClass instance(Interface);
 80a0b7e:	4d0b      	ldr	r5, [pc, #44]	; (80a0bac <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x30>)
 80a0b80:	6829      	ldr	r1, [r5, #0]
 80a0b82:	f011 0401 	ands.w	r4, r1, #1
 80a0b86:	d10f      	bne.n	80a0ba8 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x2c>
 80a0b88:	4628      	mov	r0, r5
 80a0b8a:	f7ff fa8e 	bl	80a00aa <__cxa_guard_acquire>
 80a0b8e:	b158      	cbz	r0, 80a0ba8 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x2c>
 80a0b90:	4621      	mov	r1, r4
 80a0b92:	4807      	ldr	r0, [pc, #28]	; (80a0bb0 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x34>)
 80a0b94:	f000 ffbc 	bl	80a1b10 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a0b98:	4628      	mov	r0, r5
 80a0b9a:	f7ff fa8b 	bl	80a00b4 <__cxa_guard_release>
 80a0b9e:	4a05      	ldr	r2, [pc, #20]	; (80a0bb4 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x38>)
 80a0ba0:	4905      	ldr	r1, [pc, #20]	; (80a0bb8 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x3c>)
 80a0ba2:	4803      	ldr	r0, [pc, #12]	; (80a0bb0 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x34>)
 80a0ba4:	f002 fb3c 	bl	80a3220 <__aeabi_atexit>
        return instance;
    }
 80a0ba8:	4801      	ldr	r0, [pc, #4]	; (80a0bb0 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x34>)
 80a0baa:	bd38      	pop	{r3, r4, r5, pc}
 80a0bac:	200000c0 	.word	0x200000c0
 80a0bb0:	200000c4 	.word	0x200000c4
 80a0bb4:	200000bc 	.word	0x200000bc
 80a0bb8:	080a0289 	.word	0x080a0289

080a0bbc <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8transferEh.isra.9>:
        return instance().setClockSpeed(value, scale);
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
 80a0bbc:	b510      	push	{r4, lr}
 80a0bbe:	4604      	mov	r4, r0
        return instance().transfer(data);
 80a0bc0:	f7ff ffdc 	bl	80a0b7c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
 80a0bc4:	4621      	mov	r1, r4
    }
 80a0bc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
 80a0bca:	f000 bfc0 	b.w	80a1b4e <_ZN8SPIClass8transferEh>

080a0bce <_ZN7MFRC52217PCD_WriteRegisterEhh>:
 * Writes a byte to the specified register in the MFRC522 chip.
 * The interface is described in the datasheet section 8.1.2.
 */
void MFRC522::PCD_WriteRegister(	byte reg,		///< The register to write to. One of the PCD_Register enums.
									byte value		///< The value to write.
								) {
 80a0bce:	b570      	push	{r4, r5, r6, lr}
 80a0bd0:	460e      	mov	r6, r1
 80a0bd2:	4615      	mov	r5, r2
 80a0bd4:	4604      	mov	r4, r0
	digitalWrite(_chipSelectPin, LOW);		// Select slave
 80a0bd6:	2100      	movs	r1, #0
 80a0bd8:	7b00      	ldrb	r0, [r0, #12]
 80a0bda:	f002 fa9c 	bl	80a3116 <digitalWrite>
	SPI.transfer(reg & 0x7E);					// MSB == 0 is for writing. LSB is not used in address. Datasheet section 8.1.2.3.
 80a0bde:	f006 007e 	and.w	r0, r6, #126	; 0x7e
 80a0be2:	f7ff ffeb 	bl	80a0bbc <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8transferEh.isra.9>
	SPI.transfer(value);
 80a0be6:	4628      	mov	r0, r5
 80a0be8:	f7ff ffe8 	bl	80a0bbc <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8transferEh.isra.9>
	digitalWrite(_chipSelectPin, HIGH);		// Release slave again
 80a0bec:	7b20      	ldrb	r0, [r4, #12]
 80a0bee:	2101      	movs	r1, #1
} // End PCD_WriteRegister()
 80a0bf0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
									byte value		///< The value to write.
								) {
	digitalWrite(_chipSelectPin, LOW);		// Select slave
	SPI.transfer(reg & 0x7E);					// MSB == 0 is for writing. LSB is not used in address. Datasheet section 8.1.2.3.
	SPI.transfer(value);
	digitalWrite(_chipSelectPin, HIGH);		// Release slave again
 80a0bf4:	f002 ba8f 	b.w	80a3116 <digitalWrite>

080a0bf8 <_ZN7MFRC52216PCD_ReadRegisterEh>:
/**
 * Reads a byte from the specified register in the MFRC522 chip.
 * The interface is described in the datasheet section 8.1.2.
 */
byte MFRC522::PCD_ReadRegister(	byte reg	///< The register to read from. One of the PCD_Register enums.
								) {
 80a0bf8:	b538      	push	{r3, r4, r5, lr}
 80a0bfa:	460c      	mov	r4, r1
 80a0bfc:	4605      	mov	r5, r0
	byte value;
	digitalWrite(_chipSelectPin, LOW);			// Select slave
 80a0bfe:	2100      	movs	r1, #0
 80a0c00:	7b00      	ldrb	r0, [r0, #12]
 80a0c02:	f002 fa88 	bl	80a3116 <digitalWrite>
	SPI.transfer(0x80 | (reg & 0x7E));			// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
 80a0c06:	f004 007e 	and.w	r0, r4, #126	; 0x7e
 80a0c0a:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 80a0c0e:	f7ff ffd5 	bl	80a0bbc <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8transferEh.isra.9>
	value = SPI.transfer(0);					// Read the value back. Send 0 to stop reading.
 80a0c12:	2000      	movs	r0, #0
 80a0c14:	f7ff ffd2 	bl	80a0bbc <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8transferEh.isra.9>
 80a0c18:	4604      	mov	r4, r0
	digitalWrite(_chipSelectPin, HIGH);			// Release slave again
 80a0c1a:	2101      	movs	r1, #1
 80a0c1c:	7b28      	ldrb	r0, [r5, #12]
 80a0c1e:	f002 fa7a 	bl	80a3116 <digitalWrite>
	return value;
} // End PCD_ReadRegister()
 80a0c22:	4620      	mov	r0, r4
 80a0c24:	bd38      	pop	{r3, r4, r5, pc}

080a0c26 <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>:
/**
 * Sets the bits given in mask in register reg.
 */
void MFRC522::PCD_SetRegisterBitMask(	byte reg,	///< The register to update. One of the PCD_Register enums.
										byte mask	///< The bits to set.
									) { 
 80a0c26:	b570      	push	{r4, r5, r6, lr}
 80a0c28:	4605      	mov	r5, r0
 80a0c2a:	460e      	mov	r6, r1
 80a0c2c:	4614      	mov	r4, r2
	byte tmp;
	tmp = PCD_ReadRegister(reg);
 80a0c2e:	f7ff ffe3 	bl	80a0bf8 <_ZN7MFRC52216PCD_ReadRegisterEh>
	PCD_WriteRegister(reg, tmp | mask);			// set bit mask
 80a0c32:	ea40 0204 	orr.w	r2, r0, r4
 80a0c36:	4631      	mov	r1, r6
 80a0c38:	4628      	mov	r0, r5
} // End PCD_SetRegisterBitMask()
 80a0c3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
void MFRC522::PCD_SetRegisterBitMask(	byte reg,	///< The register to update. One of the PCD_Register enums.
										byte mask	///< The bits to set.
									) { 
	byte tmp;
	tmp = PCD_ReadRegister(reg);
	PCD_WriteRegister(reg, tmp | mask);			// set bit mask
 80a0c3e:	b2d2      	uxtb	r2, r2
 80a0c40:	f7ff bfc5 	b.w	80a0bce <_ZN7MFRC52217PCD_WriteRegisterEhh>

080a0c44 <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>:
/**
 * Clears the bits given in mask from register reg.
 */
void MFRC522::PCD_ClearRegisterBitMask(	byte reg,	///< The register to update. One of the PCD_Register enums.
										byte mask	///< The bits to clear.
									  ) {
 80a0c44:	b570      	push	{r4, r5, r6, lr}
 80a0c46:	4605      	mov	r5, r0
 80a0c48:	460e      	mov	r6, r1
 80a0c4a:	4614      	mov	r4, r2
	byte tmp;
	tmp = PCD_ReadRegister(reg);
 80a0c4c:	f7ff ffd4 	bl	80a0bf8 <_ZN7MFRC52216PCD_ReadRegisterEh>
	PCD_WriteRegister(reg, tmp & (~mask));		// clear bit mask
 80a0c50:	ea20 0204 	bic.w	r2, r0, r4
 80a0c54:	4631      	mov	r1, r6
 80a0c56:	4628      	mov	r0, r5
} // End PCD_ClearRegisterBitMask()
 80a0c58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
void MFRC522::PCD_ClearRegisterBitMask(	byte reg,	///< The register to update. One of the PCD_Register enums.
										byte mask	///< The bits to clear.
									  ) {
	byte tmp;
	tmp = PCD_ReadRegister(reg);
	PCD_WriteRegister(reg, tmp & (~mask));		// clear bit mask
 80a0c5c:	b2d2      	uxtb	r2, r2
 80a0c5e:	f7ff bfb6 	b.w	80a0bce <_ZN7MFRC52217PCD_WriteRegisterEhh>

080a0c62 <_ZN7MFRC5229PCD_ResetEv>:
} // End PCD_Init()

/**
 * Performs a soft reset on the MFRC522 chip and waits for it to be ready again.
 */
void MFRC522::PCD_Reset() {
 80a0c62:	b510      	push	{r4, lr}
	PCD_WriteRegister(CommandReg, PCD_SoftReset);	// Issue the SoftReset command.
 80a0c64:	220f      	movs	r2, #15
 80a0c66:	2102      	movs	r1, #2
} // End PCD_Init()

/**
 * Performs a soft reset on the MFRC522 chip and waits for it to be ready again.
 */
void MFRC522::PCD_Reset() {
 80a0c68:	4604      	mov	r4, r0
	PCD_WriteRegister(CommandReg, PCD_SoftReset);	// Issue the SoftReset command.
 80a0c6a:	f7ff ffb0 	bl	80a0bce <_ZN7MFRC52217PCD_WriteRegisterEhh>
	// The datasheet does not mention how long the SoftRest command takes to complete.
	// But the MFRC522 might have been in soft power-down mode (triggered by bit 4 of CommandReg) 
	// Section 8.8.2 in the datasheet says the oscillator start-up time is the start up time of the crystal + 37,74�s. Let us be generous: 50ms.
	delay(50);
 80a0c6e:	2032      	movs	r0, #50	; 0x32
 80a0c70:	f001 fd76 	bl	80a2760 <delay>
	// Wait for the PowerDown bit in CommandReg to be cleared
	while (PCD_ReadRegister(CommandReg) & (1<<4)) {
 80a0c74:	2102      	movs	r1, #2
 80a0c76:	4620      	mov	r0, r4
 80a0c78:	f7ff ffbe 	bl	80a0bf8 <_ZN7MFRC52216PCD_ReadRegisterEh>
 80a0c7c:	06c3      	lsls	r3, r0, #27
 80a0c7e:	d4f9      	bmi.n	80a0c74 <_ZN7MFRC5229PCD_ResetEv+0x12>
		// PCD still restarting - unlikely after waiting 50ms, but better safe than sorry.
	}
} // End PCD_Reset()
 80a0c80:	bd10      	pop	{r4, pc}

080a0c82 <_ZN7MFRC52213PCD_AntennaOnEv>:

/**
 * Turns the antenna on by enabling pins TX1 and TX2.
 * After a reset these pins disabled.
 */
void MFRC522::PCD_AntennaOn() {
 80a0c82:	b510      	push	{r4, lr}
	byte value = PCD_ReadRegister(TxControlReg);
 80a0c84:	2128      	movs	r1, #40	; 0x28

/**
 * Turns the antenna on by enabling pins TX1 and TX2.
 * After a reset these pins disabled.
 */
void MFRC522::PCD_AntennaOn() {
 80a0c86:	4604      	mov	r4, r0
	byte value = PCD_ReadRegister(TxControlReg);
 80a0c88:	f7ff ffb6 	bl	80a0bf8 <_ZN7MFRC52216PCD_ReadRegisterEh>
	if ((value & 0x03) != 0x03) {
 80a0c8c:	f000 0303 	and.w	r3, r0, #3
 80a0c90:	2b03      	cmp	r3, #3
 80a0c92:	d008      	beq.n	80a0ca6 <_ZN7MFRC52213PCD_AntennaOnEv+0x24>
		PCD_WriteRegister(TxControlReg, value | 0x03);
 80a0c94:	f040 0203 	orr.w	r2, r0, #3
 80a0c98:	b2d2      	uxtb	r2, r2
 80a0c9a:	4620      	mov	r0, r4
	}
} // End PCD_AntennaOn()
 80a0c9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 * After a reset these pins disabled.
 */
void MFRC522::PCD_AntennaOn() {
	byte value = PCD_ReadRegister(TxControlReg);
	if ((value & 0x03) != 0x03) {
		PCD_WriteRegister(TxControlReg, value | 0x03);
 80a0ca0:	2128      	movs	r1, #40	; 0x28
 80a0ca2:	f7ff bf94 	b.w	80a0bce <_ZN7MFRC52217PCD_WriteRegisterEhh>
 80a0ca6:	bd10      	pop	{r4, pc}

080a0ca8 <_ZN7MFRC5228PCD_InitEv>:
/////////////////////////////////////////////////////////////////////////////////////

/**
 * Initializes the MFRC522 chip.
 */
void MFRC522::PCD_Init() {
 80a0ca8:	b510      	push	{r4, lr}
 80a0caa:	4604      	mov	r4, r0
	if (digitalRead(_resetPowerDownPin) == LOW) { //The MFRC522 chip is in power down mode.
 80a0cac:	7b40      	ldrb	r0, [r0, #13]
 80a0cae:	f002 fa4b 	bl	80a3148 <digitalRead>
 80a0cb2:	b938      	cbnz	r0, 80a0cc4 <_ZN7MFRC5228PCD_InitEv+0x1c>
		digitalWrite(_resetPowerDownPin, HIGH);	// Exit power down mode. This triggers a hard reset.
 80a0cb4:	7b60      	ldrb	r0, [r4, #13]
 80a0cb6:	2101      	movs	r1, #1
 80a0cb8:	f002 fa2d 	bl	80a3116 <digitalWrite>
		// Section 8.8.2 in the datasheet says the oscillator start-up time is the start up time of the crystal + 37,74�s. Let us be generous: 50ms.
		delay(50);
 80a0cbc:	2032      	movs	r0, #50	; 0x32
 80a0cbe:	f001 fd4f 	bl	80a2760 <delay>
 80a0cc2:	e002      	b.n	80a0cca <_ZN7MFRC5228PCD_InitEv+0x22>
	}
	else { // Perform a soft reset
		PCD_Reset();
 80a0cc4:	4620      	mov	r0, r4
 80a0cc6:	f7ff ffcc 	bl	80a0c62 <_ZN7MFRC5229PCD_ResetEv>
	}
	
	// When communicating with a PICC we need a timeout if something goes wrong.
	// f_timer = 13.56 MHz / (2*TPreScaler+1) where TPreScaler = [TPrescaler_Hi:TPrescaler_Lo].
	// TPrescaler_Hi are the four low bits in TModeReg. TPrescaler_Lo is TPrescalerReg.
    PCD_WriteRegister(TModeReg, 0x80);			// TAuto=1; timer starts automatically at the end of the transmission in all communication modes at all speeds
 80a0cca:	4620      	mov	r0, r4
 80a0ccc:	2280      	movs	r2, #128	; 0x80
 80a0cce:	2154      	movs	r1, #84	; 0x54
 80a0cd0:	f7ff ff7d 	bl	80a0bce <_ZN7MFRC52217PCD_WriteRegisterEhh>
    PCD_WriteRegister(TPrescalerReg, 0xA9);	// TPreScaler = TModeReg[3..0]:TPrescalerReg, ie 0x0A9 = 169 => f_timer=40kHz, ie a timer period of 25�s.
 80a0cd4:	4620      	mov	r0, r4
 80a0cd6:	22a9      	movs	r2, #169	; 0xa9
 80a0cd8:	2156      	movs	r1, #86	; 0x56
 80a0cda:	f7ff ff78 	bl	80a0bce <_ZN7MFRC52217PCD_WriteRegisterEhh>
    PCD_WriteRegister(TReloadRegH, 0x03);		// Reload timer with 0x3E8 = 1000, ie 25ms before timeout.
 80a0cde:	4620      	mov	r0, r4
 80a0ce0:	2203      	movs	r2, #3
 80a0ce2:	2158      	movs	r1, #88	; 0x58
 80a0ce4:	f7ff ff73 	bl	80a0bce <_ZN7MFRC52217PCD_WriteRegisterEhh>
    PCD_WriteRegister(TReloadRegL, 0xE8);
 80a0ce8:	4620      	mov	r0, r4
 80a0cea:	22e8      	movs	r2, #232	; 0xe8
 80a0cec:	215a      	movs	r1, #90	; 0x5a
 80a0cee:	f7ff ff6e 	bl	80a0bce <_ZN7MFRC52217PCD_WriteRegisterEhh>
	
	PCD_WriteRegister(TxASKReg, 0x40);		// Default 0x00. Force a 100 % ASK modulation independent of the ModGsPReg register setting
 80a0cf2:	4620      	mov	r0, r4
 80a0cf4:	2240      	movs	r2, #64	; 0x40
 80a0cf6:	212a      	movs	r1, #42	; 0x2a
 80a0cf8:	f7ff ff69 	bl	80a0bce <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(ModeReg, 0x3D);		// Default 0x3F. Set the preset value for the CRC coprocessor for the CalcCRC command to 0x6363 (ISO 14443-3 part 6.2.4)
 80a0cfc:	4620      	mov	r0, r4
 80a0cfe:	223d      	movs	r2, #61	; 0x3d
 80a0d00:	2122      	movs	r1, #34	; 0x22
 80a0d02:	f7ff ff64 	bl	80a0bce <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_AntennaOn();						// Enable the antenna driver pins TX1 and TX2 (they were disabled by the reset)
 80a0d06:	4620      	mov	r0, r4
} // End PCD_Init()
 80a0d08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    PCD_WriteRegister(TReloadRegH, 0x03);		// Reload timer with 0x3E8 = 1000, ie 25ms before timeout.
    PCD_WriteRegister(TReloadRegL, 0xE8);
	
	PCD_WriteRegister(TxASKReg, 0x40);		// Default 0x00. Force a 100 % ASK modulation independent of the ModGsPReg register setting
	PCD_WriteRegister(ModeReg, 0x3D);		// Default 0x3F. Set the preset value for the CRC coprocessor for the CalcCRC command to 0x6363 (ISO 14443-3 part 6.2.4)
	PCD_AntennaOn();						// Enable the antenna driver pins TX1 and TX2 (they were disabled by the reset)
 80a0d0c:	f7ff bfb9 	b.w	80a0c82 <_ZN7MFRC52213PCD_AntennaOnEv>

080a0d10 <_ZN7MFRC52218PCD_GetAntennaGainEv>:
 * See 9.3.3.6 / table 98 in http://www.nxp.com/documents/data_sheet/MFRC522.pdf
 * NOTE: Return value scrubbed with (0x07<<4)=01110000b as RCFfgReg may use reserved bits.
 * 
 * @return Value of the RxGain, scrubbed to the 3 bits used.
 */
byte MFRC522::PCD_GetAntennaGain() {
 80a0d10:	b508      	push	{r3, lr}
	return PCD_ReadRegister(RFCfgReg) & (0x07<<4);
 80a0d12:	214c      	movs	r1, #76	; 0x4c
 80a0d14:	f7ff ff70 	bl	80a0bf8 <_ZN7MFRC52216PCD_ReadRegisterEh>
} // End PCD_GetAntennaGain()
 80a0d18:	f000 0070 	and.w	r0, r0, #112	; 0x70
 80a0d1c:	bd08      	pop	{r3, pc}

080a0d1e <_ZN7MFRC52218PCD_SetAntennaGainEh>:
/**
 * Set the MFRC522 Receiver Gain (RxGain) to value specified by given mask.
 * See 9.3.3.6 / table 98 in http://www.nxp.com/documents/data_sheet/MFRC522.pdf
 * NOTE: Given mask is scrubbed with (0x07<<4)=01110000b as RCFfgReg may use reserved bits.
 */
void MFRC522::PCD_SetAntennaGain(byte mask) {
 80a0d1e:	b538      	push	{r3, r4, r5, lr}
 80a0d20:	460d      	mov	r5, r1
 80a0d22:	4604      	mov	r4, r0
	if (PCD_GetAntennaGain() != mask) {						// only bother if there is a change
 80a0d24:	f7ff fff4 	bl	80a0d10 <_ZN7MFRC52218PCD_GetAntennaGainEv>
 80a0d28:	42a8      	cmp	r0, r5
 80a0d2a:	d00c      	beq.n	80a0d46 <_ZN7MFRC52218PCD_SetAntennaGainEh+0x28>
		PCD_ClearRegisterBitMask(RFCfgReg, (0x07<<4));		// clear needed to allow 000 pattern
 80a0d2c:	4620      	mov	r0, r4
 80a0d2e:	2270      	movs	r2, #112	; 0x70
 80a0d30:	214c      	movs	r1, #76	; 0x4c
 80a0d32:	f7ff ff87 	bl	80a0c44 <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>
		PCD_SetRegisterBitMask(RFCfgReg, mask & (0x07<<4));	// only set RxGain[2:0] bits
 80a0d36:	f005 0270 	and.w	r2, r5, #112	; 0x70
 80a0d3a:	4620      	mov	r0, r4
	}
} // End PCD_SetAntennaGain()
 80a0d3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 * NOTE: Given mask is scrubbed with (0x07<<4)=01110000b as RCFfgReg may use reserved bits.
 */
void MFRC522::PCD_SetAntennaGain(byte mask) {
	if (PCD_GetAntennaGain() != mask) {						// only bother if there is a change
		PCD_ClearRegisterBitMask(RFCfgReg, (0x07<<4));		// clear needed to allow 000 pattern
		PCD_SetRegisterBitMask(RFCfgReg, mask & (0x07<<4));	// only set RxGain[2:0] bits
 80a0d40:	214c      	movs	r1, #76	; 0x4c
 80a0d42:	f7ff bf70 	b.w	80a0c26 <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>
 80a0d46:	bd38      	pop	{r3, r4, r5, pc}

080a0d48 <_GLOBAL__sub_I__ZN7MFRC522C2Ehh>:
 80a0d48:	f000 bc1e 	b.w	80a1588 <HAL_Pin_Map>

080a0d4c <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
 80a0d4c:	b538      	push	{r3, r4, r5, lr}
 80a0d4e:	4b0b      	ldr	r3, [pc, #44]	; (80a0d7c <_ZN9TCPClientD1Ev+0x30>)
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 80a0d50:	6984      	ldr	r4, [r0, #24]
 80a0d52:	4605      	mov	r5, r0
 80a0d54:	6003      	str	r3, [r0, #0]
 80a0d56:	b17c      	cbz	r4, 80a0d78 <_ZN9TCPClientD1Ev+0x2c>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a0d58:	6863      	ldr	r3, [r4, #4]
 80a0d5a:	3b01      	subs	r3, #1
 80a0d5c:	6063      	str	r3, [r4, #4]
 80a0d5e:	b95b      	cbnz	r3, 80a0d78 <_ZN9TCPClientD1Ev+0x2c>
        {
          _M_dispose();
 80a0d60:	6823      	ldr	r3, [r4, #0]
 80a0d62:	4620      	mov	r0, r4
 80a0d64:	689b      	ldr	r3, [r3, #8]
 80a0d66:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a0d68:	68a3      	ldr	r3, [r4, #8]
 80a0d6a:	3b01      	subs	r3, #1
 80a0d6c:	60a3      	str	r3, [r4, #8]
 80a0d6e:	b91b      	cbnz	r3, 80a0d78 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
 80a0d70:	6823      	ldr	r3, [r4, #0]
 80a0d72:	4620      	mov	r0, r4
 80a0d74:	68db      	ldr	r3, [r3, #12]
 80a0d76:	4798      	blx	r3
 80a0d78:	4628      	mov	r0, r5
 80a0d7a:	bd38      	pop	{r3, r4, r5, pc}
 80a0d7c:	080a6328 	.word	0x080a6328

080a0d80 <_ZN9TCPClientD0Ev>:
 80a0d80:	b510      	push	{r4, lr}
 80a0d82:	4604      	mov	r4, r0
 80a0d84:	f7ff ffe2 	bl	80a0d4c <_ZN9TCPClientD1Ev>
 80a0d88:	4620      	mov	r0, r4
 80a0d8a:	211c      	movs	r1, #28
 80a0d8c:	f002 fa56 	bl	80a323c <_ZdlPvj>
 80a0d90:	4620      	mov	r0, r4
 80a0d92:	bd10      	pop	{r4, pc}

080a0d94 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi>:

    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(char* domain, uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
 80a0d94:	b538      	push	{r3, r4, r5, lr}
 80a0d96:	461d      	mov	r5, r3
    this->callback = callback;
 80a0d98:	9b05      	ldr	r3, [sp, #20]

    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(char* domain, uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
 80a0d9a:	4604      	mov	r4, r0
    this->callback = callback;
 80a0d9c:	6303      	str	r3, [r0, #48]	; 0x30
    this->qoscallback = NULL;
 80a0d9e:	2300      	movs	r3, #0
 80a0da0:	6343      	str	r3, [r0, #52]	; 0x34
    if (ip != NULL)
 80a0da2:	b102      	cbz	r2, 80a0da6 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x12>
        this->ip = ip;
 80a0da4:	6482      	str	r2, [r0, #72]	; 0x48
    if (domain != NULL)
 80a0da6:	b119      	cbz	r1, 80a0db0 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x1c>
        this->domain = domain;
 80a0da8:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80a0dac:	f001 faa8 	bl	80a2300 <_ZN6StringaSEPKc>
    this->port = port;
    this->keepalive = keepalive;
 80a0db0:	9b04      	ldr	r3, [sp, #16]

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
    if (buffer != NULL)
 80a0db2:	69e0      	ldr	r0, [r4, #28]
    if (ip != NULL)
        this->ip = ip;
    if (domain != NULL)
        this->domain = domain;
    this->port = port;
    this->keepalive = keepalive;
 80a0db4:	6523      	str	r3, [r4, #80]	; 0x50

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
 80a0db6:	9b06      	ldr	r3, [sp, #24]
    this->qoscallback = NULL;
    if (ip != NULL)
        this->ip = ip;
    if (domain != NULL)
        this->domain = domain;
    this->port = port;
 80a0db8:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
    this->keepalive = keepalive;

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
 80a0dbc:	2bff      	cmp	r3, #255	; 0xff
 80a0dbe:	bfb8      	it	lt
 80a0dc0:	23ff      	movlt	r3, #255	; 0xff
 80a0dc2:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    if (buffer != NULL)
 80a0dc6:	b108      	cbz	r0, 80a0dcc <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x38>
      delete[] buffer;
 80a0dc8:	f7ff f96d 	bl	80a00a6 <_ZdaPv>
    buffer = new uint8_t[this->maxpacketsize];
 80a0dcc:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
 80a0dd0:	f7ff f965 	bl	80a009e <_Znaj>
 80a0dd4:	61e0      	str	r0, [r4, #28]
 80a0dd6:	bd38      	pop	{r3, r4, r5, pc}

080a0dd8 <_ZN4MQTTC1EPctiPFvS0_PhjEi>:

MQTT::MQTT(char* domain, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int)) {
    this->initialize(domain, NULL, port, keepalive, callback, MQTT_MAX_PACKET_SIZE);
}

MQTT::MQTT(char* domain, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
 80a0dd8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80a0ddc:	4604      	mov	r4, r0
 80a0dde:	4617      	mov	r7, r2
 80a0de0:	4698      	mov	r8, r3
 80a0de2:	460e      	mov	r6, r1
 80a0de4:	2500      	movs	r5, #0
 80a0de6:	f001 f95d 	bl	80a20a4 <_ZN9TCPClientC1Ev>
 80a0dea:	61e5      	str	r5, [r4, #28]
 80a0dec:	490a      	ldr	r1, [pc, #40]	; (80a0e18 <_ZN4MQTTC1EPctiPFvS0_PhjEi+0x40>)
 80a0dee:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80a0df2:	f001 fa58 	bl	80a22a6 <_ZN6StringC1EPK19__FlashStringHelper>
    this->initialize(domain, NULL, port, keepalive, callback, maxpacketsize);
 80a0df6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80a0df8:	4620      	mov	r0, r4
 80a0dfa:	9302      	str	r3, [sp, #8]
 80a0dfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28

MQTT::MQTT(char* domain, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int)) {
    this->initialize(domain, NULL, port, keepalive, callback, MQTT_MAX_PACKET_SIZE);
}

MQTT::MQTT(char* domain, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
 80a0dfe:	64a5      	str	r5, [r4, #72]	; 0x48
    this->initialize(domain, NULL, port, keepalive, callback, maxpacketsize);
 80a0e00:	9301      	str	r3, [sp, #4]
 80a0e02:	f8cd 8000 	str.w	r8, [sp]
 80a0e06:	463b      	mov	r3, r7
 80a0e08:	462a      	mov	r2, r5
 80a0e0a:	4631      	mov	r1, r6
 80a0e0c:	f7ff ffc2 	bl	80a0d94 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi>
}
 80a0e10:	4620      	mov	r0, r4
 80a0e12:	b004      	add	sp, #16
 80a0e14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a0e18:	080a619e 	.word	0x080a619e

080a0e1c <_ZN4MQTT8readByteEv>:
        _client.stop();
    }
    return false;
}

uint8_t MQTT::readByte() {
 80a0e1c:	b510      	push	{r4, lr}
 80a0e1e:	4604      	mov	r4, r0
    while(!_client.available()) {}
 80a0e20:	4620      	mov	r0, r4
 80a0e22:	f000 ffd3 	bl	80a1dcc <_ZN9TCPClient9availableEv>
 80a0e26:	2800      	cmp	r0, #0
 80a0e28:	d0fa      	beq.n	80a0e20 <_ZN4MQTT8readByteEv+0x4>
    return _client.read();
 80a0e2a:	4620      	mov	r0, r4
 80a0e2c:	f000 ff83 	bl	80a1d36 <_ZN9TCPClient4readEv>
}
 80a0e30:	b2c0      	uxtb	r0, r0
 80a0e32:	bd10      	pop	{r4, pc}

080a0e34 <_ZN4MQTT10readPacketEPh>:

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
 80a0e34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a0e38:	4605      	mov	r5, r0
    uint16_t len = 0;
    buffer[len++] = readByte();
 80a0e3a:	69c4      	ldr	r4, [r0, #28]
uint8_t MQTT::readByte() {
    while(!_client.available()) {}
    return _client.read();
}

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
 80a0e3c:	468a      	mov	sl, r1
    uint16_t len = 0;
    buffer[len++] = readByte();
 80a0e3e:	f7ff ffed 	bl	80a0e1c <_ZN4MQTT8readByteEv>
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
    uint32_t multiplier = 1;
 80a0e42:	f04f 0801 	mov.w	r8, #1
    return _client.read();
}

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
    uint16_t len = 0;
    buffer[len++] = readByte();
 80a0e46:	4646      	mov	r6, r8
 80a0e48:	7020      	strb	r0, [r4, #0]
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
 80a0e4a:	69eb      	ldr	r3, [r5, #28]
    uint32_t multiplier = 1;
    uint16_t length = 0;
 80a0e4c:	2700      	movs	r7, #0
 80a0e4e:	f893 9000 	ldrb.w	r9, [r3]
 80a0e52:	f009 09f0 	and.w	r9, r9, #240	; 0xf0
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
 80a0e56:	4628      	mov	r0, r5
 80a0e58:	f7ff ffe0 	bl	80a0e1c <_ZN4MQTT8readByteEv>
        buffer[len++] = digit;
 80a0e5c:	69eb      	ldr	r3, [r5, #28]
 80a0e5e:	1c74      	adds	r4, r6, #1
 80a0e60:	5598      	strb	r0, [r3, r6]
        length += (digit & 127) * multiplier;
 80a0e62:	f000 037f 	and.w	r3, r0, #127	; 0x7f
 80a0e66:	fb03 7708 	mla	r7, r3, r8, r7
        multiplier *= 128;
    } while ((digit & 128) != 0);
 80a0e6a:	0603      	lsls	r3, r0, #24
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
        buffer[len++] = digit;
 80a0e6c:	b2a4      	uxth	r4, r4
        length += (digit & 127) * multiplier;
 80a0e6e:	b2bf      	uxth	r7, r7
        multiplier *= 128;
 80a0e70:	ea4f 18c8 	mov.w	r8, r8, lsl #7
    } while ((digit & 128) != 0);
 80a0e74:	d501      	bpl.n	80a0e7a <_ZN4MQTT10readPacketEPh+0x46>
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
        buffer[len++] = digit;
 80a0e76:	4626      	mov	r6, r4
 80a0e78:	e7ed      	b.n	80a0e56 <_ZN4MQTT10readPacketEPh+0x22>
        length += (digit & 127) * multiplier;
        multiplier *= 128;
    } while ((digit & 128) != 0);
    *lengthLength = len-1;
 80a0e7a:	1e63      	subs	r3, r4, #1

    if (isPublish) {
 80a0e7c:	f1b9 0f30 	cmp.w	r9, #48	; 0x30
        digit = readByte();
        buffer[len++] = digit;
        length += (digit & 127) * multiplier;
        multiplier *= 128;
    } while ((digit & 128) != 0);
    *lengthLength = len-1;
 80a0e80:	f88a 3000 	strb.w	r3, [sl]

    if (isPublish) {
 80a0e84:	d113      	bne.n	80a0eae <_ZN4MQTT10readPacketEPh+0x7a>
        // Read in topic length to calculate bytes to skip over for Stream writing
        buffer[len++] = readByte();
 80a0e86:	4628      	mov	r0, r5
 80a0e88:	f8d5 801c 	ldr.w	r8, [r5, #28]
 80a0e8c:	f7ff ffc6 	bl	80a0e1c <_ZN4MQTT8readByteEv>
 80a0e90:	f808 0004 	strb.w	r0, [r8, r4]
        buffer[len++] = readByte();
 80a0e94:	4628      	mov	r0, r5
 80a0e96:	f8d5 801c 	ldr.w	r8, [r5, #28]
 80a0e9a:	f7ff ffbf 	bl	80a0e1c <_ZN4MQTT8readByteEv>
 80a0e9e:	1cf4      	adds	r4, r6, #3
 80a0ea0:	3602      	adds	r6, #2
 80a0ea2:	b2b6      	uxth	r6, r6
 80a0ea4:	b2a4      	uxth	r4, r4
 80a0ea6:	f808 0006 	strb.w	r0, [r8, r6]
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
        start = 2;
 80a0eaa:	2302      	movs	r3, #2
 80a0eac:	e000      	b.n	80a0eb0 <_ZN4MQTT10readPacketEPh+0x7c>
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
    uint32_t multiplier = 1;
    uint16_t length = 0;
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;
 80a0eae:	2300      	movs	r3, #0
 80a0eb0:	1b1b      	subs	r3, r3, r4
 80a0eb2:	b29e      	uxth	r6, r3
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
 80a0eb4:	19a3      	adds	r3, r4, r6
 80a0eb6:	b29b      	uxth	r3, r3
 80a0eb8:	429f      	cmp	r7, r3
 80a0eba:	d90b      	bls.n	80a0ed4 <_ZN4MQTT10readPacketEPh+0xa0>
        digit = readByte();
 80a0ebc:	4628      	mov	r0, r5
 80a0ebe:	f7ff ffad 	bl	80a0e1c <_ZN4MQTT8readByteEv>
        if (len < this->maxpacketsize) {
 80a0ec2:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
 80a0ec6:	42a3      	cmp	r3, r4
            buffer[len] = digit;
 80a0ec8:	bf84      	itt	hi
 80a0eca:	69eb      	ldrhi	r3, [r5, #28]
 80a0ecc:	5518      	strbhi	r0, [r3, r4]
        }
        len++;
 80a0ece:	3401      	adds	r4, #1
 80a0ed0:	b2a4      	uxth	r4, r4
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
 80a0ed2:	e7ef      	b.n	80a0eb4 <_ZN4MQTT10readPacketEPh+0x80>
            buffer[len] = digit;
        }
        len++;
    }

    if (len > this->maxpacketsize) {
 80a0ed4:	f8b5 0054 	ldrh.w	r0, [r5, #84]	; 0x54
        len = 0; // This will cause the packet to be ignored.
    }

    return len;
}
 80a0ed8:	42a0      	cmp	r0, r4
 80a0eda:	bf2c      	ite	cs
 80a0edc:	4620      	movcs	r0, r4
 80a0ede:	2000      	movcc	r0, #0
 80a0ee0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080a0ee4 <_ZN4MQTT5writeEhPht>:
        return _client.write(buffer, length);
    }
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
 80a0ee4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80a0ee6:	4607      	mov	r7, r0
 80a0ee8:	468e      	mov	lr, r1
 80a0eea:	461e      	mov	r6, r3
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
 80a0eec:	461d      	mov	r5, r3
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
    uint8_t lenBuf[4];
    uint8_t llen = 0;
 80a0eee:	2400      	movs	r4, #0
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
    do {
        digit = len % 128;
 80a0ef0:	f005 037f 	and.w	r3, r5, #127	; 0x7f
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
 80a0ef4:	a902      	add	r1, sp, #8
    uint16_t rc;
    uint16_t len = length;
    do {
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
 80a0ef6:	09ed      	lsrs	r5, r5, #7
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
 80a0ef8:	4421      	add	r1, r4
    uint16_t len = length;
    do {
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
 80a0efa:	bf18      	it	ne
 80a0efc:	f043 0380 	orrne.w	r3, r3, #128	; 0x80
        }
        lenBuf[pos++] = digit;
        llen++;
 80a0f00:	3401      	adds	r4, #1
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
 80a0f02:	f801 3c04 	strb.w	r3, [r1, #-4]
        llen++;
 80a0f06:	b2e4      	uxtb	r4, r4
    } while(len > 0);
 80a0f08:	2d00      	cmp	r5, #0
 80a0f0a:	d1f1      	bne.n	80a0ef0 <_ZN4MQTT5writeEhPht+0xc>

    buf[4-llen] = header;
 80a0f0c:	f1c4 0304 	rsb	r3, r4, #4
 80a0f10:	18d1      	adds	r1, r2, r3
 80a0f12:	f802 e003 	strb.w	lr, [r2, r3]
    for (int i = 0; i < llen; i++) {
 80a0f16:	42a5      	cmp	r5, r4
 80a0f18:	da06      	bge.n	80a0f28 <_ZN4MQTT5writeEhPht+0x44>
        buf[5-llen+i] = lenBuf[i];
 80a0f1a:	a801      	add	r0, sp, #4
 80a0f1c:	1b2b      	subs	r3, r5, r4
 80a0f1e:	5c28      	ldrb	r0, [r5, r0]
 80a0f20:	4413      	add	r3, r2
 80a0f22:	7158      	strb	r0, [r3, #5]
        lenBuf[pos++] = digit;
        llen++;
    } while(len > 0);

    buf[4-llen] = header;
    for (int i = 0; i < llen; i++) {
 80a0f24:	3501      	adds	r5, #1
 80a0f26:	e7f6      	b.n	80a0f16 <_ZN4MQTT5writeEhPht+0x32>
        buf[5-llen+i] = lenBuf[i];
    }
    rc = _client.write(buf+(4-llen), length+1+llen);
 80a0f28:	1c72      	adds	r2, r6, #1
 80a0f2a:	4422      	add	r2, r4
 80a0f2c:	4638      	mov	r0, r7
 80a0f2e:	f000 feaa 	bl	80a1c86 <_ZN9TCPClient5writeEPKhj>
 80a0f32:	4605      	mov	r5, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a0f34:	f000 fb78 	bl	80a1628 <HAL_Timer_Get_Milli_Seconds>

    lastOutActivity = millis();
    return (rc == 1+llen+length);
 80a0f38:	3401      	adds	r4, #1
    for (int i = 0; i < llen; i++) {
        buf[5-llen+i] = lenBuf[i];
    }
    rc = _client.write(buf+(4-llen), length+1+llen);

    lastOutActivity = millis();
 80a0f3a:	6278      	str	r0, [r7, #36]	; 0x24
    return (rc == 1+llen+length);
 80a0f3c:	4434      	add	r4, r6
 80a0f3e:	b2a8      	uxth	r0, r5
}
 80a0f40:	1a23      	subs	r3, r4, r0
 80a0f42:	4258      	negs	r0, r3
 80a0f44:	4158      	adcs	r0, r3
 80a0f46:	b003      	add	sp, #12
 80a0f48:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a0f4a <_ZN4MQTT10disconnectEv>:
        return write(MQTTUNSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
    }
    return false;
}

void MQTT::disconnect() {
 80a0f4a:	b510      	push	{r4, lr}
 80a0f4c:	4604      	mov	r4, r0
    buffer[0] = MQTTDISCONNECT;
 80a0f4e:	69c3      	ldr	r3, [r0, #28]
 80a0f50:	22e0      	movs	r2, #224	; 0xe0
 80a0f52:	701a      	strb	r2, [r3, #0]
    buffer[1] = 0;
 80a0f54:	69c3      	ldr	r3, [r0, #28]
 80a0f56:	2200      	movs	r2, #0
 80a0f58:	705a      	strb	r2, [r3, #1]
    _client.write(buffer,2);
 80a0f5a:	69c1      	ldr	r1, [r0, #28]
 80a0f5c:	2202      	movs	r2, #2
 80a0f5e:	f000 fe92 	bl	80a1c86 <_ZN9TCPClient5writeEPKhj>
    _client.stop();
 80a0f62:	4620      	mov	r0, r4
 80a0f64:	f000 ff6e 	bl	80a1e44 <_ZN9TCPClient4stopEv>
 80a0f68:	f000 fb5e 	bl	80a1628 <HAL_Timer_Get_Milli_Seconds>
    lastInActivity = lastOutActivity = millis();
 80a0f6c:	6260      	str	r0, [r4, #36]	; 0x24
 80a0f6e:	62a0      	str	r0, [r4, #40]	; 0x28
 80a0f70:	bd10      	pop	{r4, pc}

080a0f72 <_ZN4MQTT11writeStringEPKcPht>:
}

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
 80a0f72:	b5f0      	push	{r4, r5, r6, r7, lr}
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
 80a0f74:	460d      	mov	r5, r1
 80a0f76:	3302      	adds	r3, #2
 80a0f78:	b29b      	uxth	r3, r3
 80a0f7a:	1a6c      	subs	r4, r5, r1
    while (*idp && pos < this->maxpacketsize) {
 80a0f7c:	f815 6b01 	ldrb.w	r6, [r5], #1
 80a0f80:	b2a4      	uxth	r4, r4
 80a0f82:	b13e      	cbz	r6, 80a0f94 <_ZN4MQTT11writeStringEPKcPht+0x22>
 80a0f84:	f8b0 7054 	ldrh.w	r7, [r0, #84]	; 0x54
 80a0f88:	429f      	cmp	r7, r3
 80a0f8a:	d903      	bls.n	80a0f94 <_ZN4MQTT11writeStringEPKcPht+0x22>
        buf[pos++] = *idp++;
 80a0f8c:	1c5c      	adds	r4, r3, #1
 80a0f8e:	54d6      	strb	r6, [r2, r3]
 80a0f90:	b2a3      	uxth	r3, r4

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
    while (*idp && pos < this->maxpacketsize) {
 80a0f92:	e7f2      	b.n	80a0f7a <_ZN4MQTT11writeStringEPKcPht+0x8>
        buf[pos++] = *idp++;
        i++;
    }
    buf[pos-i-2] = (i >> 8);
 80a0f94:	1b19      	subs	r1, r3, r4
 80a0f96:	440a      	add	r2, r1
 80a0f98:	1221      	asrs	r1, r4, #8
 80a0f9a:	f802 1c02 	strb.w	r1, [r2, #-2]
    buf[pos-i-1] = (i & 0xFF);
 80a0f9e:	f802 4c01 	strb.w	r4, [r2, #-1]
    return pos;
}
 80a0fa2:	4618      	mov	r0, r3
 80a0fa4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a0fa6 <_ZN4MQTT11isConnectedEv>:


bool MQTT::isConnected() {
 80a0fa6:	b538      	push	{r3, r4, r5, lr}
 80a0fa8:	4605      	mov	r5, r0
    bool rc = (int)_client.connected();
 80a0faa:	f001 f80c 	bl	80a1fc6 <_ZN9TCPClient9connectedEv>
 80a0fae:	2800      	cmp	r0, #0
 80a0fb0:	bf14      	ite	ne
 80a0fb2:	2401      	movne	r4, #1
 80a0fb4:	2400      	moveq	r4, #0
    if (!rc) _client.stop();
 80a0fb6:	d102      	bne.n	80a0fbe <_ZN4MQTT11isConnectedEv+0x18>
 80a0fb8:	4628      	mov	r0, r5
 80a0fba:	f000 ff43 	bl	80a1e44 <_ZN9TCPClient4stopEv>
    return rc;
}
 80a0fbe:	4620      	mov	r0, r4
 80a0fc0:	bd38      	pop	{r3, r4, r5, pc}
	...

080a0fc4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>:

bool MQTT::connect(const char *id, const char *user, const char *pass) {
    return connect(id, user, pass, 0, QOS0, 0, 0, true);
}

bool MQTT::connect(const char *id, const char *user, const char *pass, const char* willTopic, EMQTT_QOS willQos, uint8_t willRetain, const char* willMessage, bool cleanSession, MQTT_VERSION version) {
 80a0fc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a0fc8:	b087      	sub	sp, #28
 80a0fca:	4604      	mov	r4, r0
 80a0fcc:	4689      	mov	r9, r1
 80a0fce:	4617      	mov	r7, r2
 80a0fd0:	461e      	mov	r6, r3
 80a0fd2:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
    if (!isConnected()) {
 80a0fd6:	f7ff ffe6 	bl	80a0fa6 <_ZN4MQTT11isConnectedEv>
 80a0fda:	4605      	mov	r5, r0
 80a0fdc:	2800      	cmp	r0, #0
 80a0fde:	f040 80bd 	bne.w	80a115c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x198>
        int result = 0;
        if (ip == NULL)
 80a0fe2:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80a0fe4:	b939      	cbnz	r1, 80a0ff6 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x32>
            result = _client.connect(this->domain.c_str(), this->port);
 80a0fe6:	4603      	mov	r3, r0
 80a0fe8:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
 80a0fec:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80a0fee:	4620      	mov	r0, r4
 80a0ff0:	f001 f87a 	bl	80a20e8 <_ZN9TCPClient7connectEPKctm>
 80a0ff4:	e009      	b.n	80a100a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x46>
        else
            result = _client.connect(this->ip, this->port);
 80a0ff6:	4668      	mov	r0, sp
 80a0ff8:	f001 fd1a 	bl	80a2a30 <_ZN9IPAddressC1EPKh>
 80a0ffc:	462b      	mov	r3, r5
 80a0ffe:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
 80a1002:	4669      	mov	r1, sp
 80a1004:	4620      	mov	r0, r4
 80a1006:	f000 ff37 	bl	80a1e78 <_ZN9TCPClient7connectE9IPAddresstm>

        if (result) {
 80a100a:	2800      	cmp	r0, #0
 80a100c:	f000 80a2 	beq.w	80a1154 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x190>
            nextMsgId = 1;
 80a1010:	2301      	movs	r3, #1
 80a1012:	8423      	strh	r3, [r4, #32]
            uint16_t length = 5;

            if (version == MQTT_V311) {
 80a1014:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 80a1018:	2b04      	cmp	r3, #4
 80a101a:	d115      	bne.n	80a1048 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x84>
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
 80a101c:	4b52      	ldr	r3, [pc, #328]	; (80a1168 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1a4>)
 80a101e:	6818      	ldr	r0, [r3, #0]
 80a1020:	889a      	ldrh	r2, [r3, #4]
 80a1022:	9000      	str	r0, [sp, #0]
 80a1024:	f8ad 2004 	strh.w	r2, [sp, #4]
 80a1028:	799b      	ldrb	r3, [r3, #6]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
 80a102a:	69e2      	ldr	r2, [r4, #28]
 80a102c:	9800      	ldr	r0, [sp, #0]
        if (result) {
            nextMsgId = 1;
            uint16_t length = 5;

            if (version == MQTT_V311) {
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
 80a102e:	f88d 3006 	strb.w	r3, [sp, #6]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
 80a1032:	f8c2 0005 	str.w	r0, [r2, #5]
 80a1036:	1d53      	adds	r3, r2, #5
 80a1038:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 80a103c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80a1040:	8099      	strh	r1, [r3, #4]
 80a1042:	719a      	strb	r2, [r3, #6]
                length+=sizeof(MQTT_HEADER_V311);
 80a1044:	230c      	movs	r3, #12
 80a1046:	e012      	b.n	80a106e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
            } else {
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
 80a1048:	466a      	mov	r2, sp
 80a104a:	4b48      	ldr	r3, [pc, #288]	; (80a116c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1a8>)
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
 80a104c:	f8d4 c01c 	ldr.w	ip, [r4, #28]
            if (version == MQTT_V311) {
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
                length+=sizeof(MQTT_HEADER_V311);
            } else {
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
 80a1050:	6818      	ldr	r0, [r3, #0]
 80a1052:	6859      	ldr	r1, [r3, #4]
 80a1054:	7a1b      	ldrb	r3, [r3, #8]
 80a1056:	c203      	stmia	r2!, {r0, r1}
 80a1058:	7013      	strb	r3, [r2, #0]
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
 80a105a:	466b      	mov	r3, sp
 80a105c:	cb03      	ldmia	r3!, {r0, r1}
 80a105e:	f8cc 0005 	str.w	r0, [ip, #5]
 80a1062:	f8cc 1009 	str.w	r1, [ip, #9]
 80a1066:	7813      	ldrb	r3, [r2, #0]
 80a1068:	f88c 300d 	strb.w	r3, [ip, #13]
                length+=sizeof(MQTT_HEADER_V31);
 80a106c:	230e      	movs	r3, #14
            }

            uint8_t v = 0;
            if (willTopic) {
 80a106e:	f1b8 0f00 	cmp.w	r8, #0
 80a1072:	d00a      	beq.n	80a108a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xc6>
                v = 0x06|(willQos<<3)|(willRetain<<5);
 80a1074:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 80a1078:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
 80a107c:	0152      	lsls	r2, r2, #5
 80a107e:	f042 0206 	orr.w	r2, r2, #6
 80a1082:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80a1086:	b2d2      	uxtb	r2, r2
 80a1088:	e000      	b.n	80a108c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xc8>
            } else {
                v = 0x02;
 80a108a:	2202      	movs	r2, #2
            }

            if (!cleanSession) {
 80a108c:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
 80a1090:	b909      	cbnz	r1, 80a1096 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xd2>
              v = v&0xfd;
 80a1092:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
            }

            if(user != NULL) {
 80a1096:	b12f      	cbz	r7, 80a10a4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xe0>
                v = v|0x80;

                if(pass != NULL) {
 80a1098:	b916      	cbnz	r6, 80a10a0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xdc>
            if (!cleanSession) {
              v = v&0xfd;
            }

            if(user != NULL) {
                v = v|0x80;
 80a109a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80a109e:	e001      	b.n	80a10a4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xe0>

                if(pass != NULL) {
                    v = v|(0x80>>1);
 80a10a0:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
                }
            }

            buffer[length++] = v;
 80a10a4:	69e1      	ldr	r1, [r4, #28]

            buffer[length++] = ((this->keepalive) >> 8);
 80a10a6:	1c58      	adds	r0, r3, #1
                if(pass != NULL) {
                    v = v|(0x80>>1);
                }
            }

            buffer[length++] = v;
 80a10a8:	54ca      	strb	r2, [r1, r3]

            buffer[length++] = ((this->keepalive) >> 8);
 80a10aa:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80a10ac:	69e1      	ldr	r1, [r4, #28]
 80a10ae:	1212      	asrs	r2, r2, #8
 80a10b0:	540a      	strb	r2, [r1, r0]
            buffer[length++] = ((this->keepalive) & 0xFF);
 80a10b2:	69e1      	ldr	r1, [r4, #28]
 80a10b4:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80a10b6:	1c9a      	adds	r2, r3, #2
 80a10b8:	5488      	strb	r0, [r1, r2]
            length = writeString(id, buffer, length);
 80a10ba:	3303      	adds	r3, #3
 80a10bc:	69e2      	ldr	r2, [r4, #28]
 80a10be:	4649      	mov	r1, r9
 80a10c0:	4620      	mov	r0, r4
 80a10c2:	f7ff ff56 	bl	80a0f72 <_ZN4MQTT11writeStringEPKcPht>
            if (willTopic) {
 80a10c6:	f1b8 0f00 	cmp.w	r8, #0
 80a10ca:	d00b      	beq.n	80a10e4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x120>
                length = writeString(willTopic, buffer, length);
 80a10cc:	4603      	mov	r3, r0
 80a10ce:	69e2      	ldr	r2, [r4, #28]
 80a10d0:	4641      	mov	r1, r8
 80a10d2:	4620      	mov	r0, r4
 80a10d4:	f7ff ff4d 	bl	80a0f72 <_ZN4MQTT11writeStringEPKcPht>
                length = writeString(willMessage, buffer, length);
 80a10d8:	69e2      	ldr	r2, [r4, #28]
 80a10da:	4603      	mov	r3, r0
 80a10dc:	9911      	ldr	r1, [sp, #68]	; 0x44
 80a10de:	4620      	mov	r0, r4
 80a10e0:	f7ff ff47 	bl	80a0f72 <_ZN4MQTT11writeStringEPKcPht>
            }

            if(user != NULL) {
 80a10e4:	b167      	cbz	r7, 80a1100 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13c>
                length = writeString(user,buffer,length);
 80a10e6:	4603      	mov	r3, r0
 80a10e8:	69e2      	ldr	r2, [r4, #28]
 80a10ea:	4639      	mov	r1, r7
 80a10ec:	4620      	mov	r0, r4
 80a10ee:	f7ff ff40 	bl	80a0f72 <_ZN4MQTT11writeStringEPKcPht>
                if(pass != NULL) {
 80a10f2:	b12e      	cbz	r6, 80a1100 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13c>
                    length = writeString(pass,buffer,length);
 80a10f4:	4603      	mov	r3, r0
 80a10f6:	69e2      	ldr	r2, [r4, #28]
 80a10f8:	4631      	mov	r1, r6
 80a10fa:	4620      	mov	r0, r4
 80a10fc:	f7ff ff39 	bl	80a0f72 <_ZN4MQTT11writeStringEPKcPht>
                }
            }

            write(MQTTCONNECT, buffer, length-5);
 80a1100:	1f43      	subs	r3, r0, #5
 80a1102:	b29b      	uxth	r3, r3
 80a1104:	69e2      	ldr	r2, [r4, #28]
 80a1106:	2110      	movs	r1, #16
 80a1108:	4620      	mov	r0, r4
 80a110a:	f7ff feeb 	bl	80a0ee4 <_ZN4MQTT5writeEhPht>
 80a110e:	f000 fa8b 	bl	80a1628 <HAL_Timer_Get_Milli_Seconds>
            lastInActivity = lastOutActivity = millis();

            while (!_client.available()) {
                unsigned long t = millis();
                if (t-lastInActivity > this->keepalive*1000UL) {
 80a1112:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
                    length = writeString(pass,buffer,length);
                }
            }

            write(MQTTCONNECT, buffer, length-5);
            lastInActivity = lastOutActivity = millis();
 80a1116:	6260      	str	r0, [r4, #36]	; 0x24
 80a1118:	62a0      	str	r0, [r4, #40]	; 0x28

            while (!_client.available()) {
 80a111a:	4620      	mov	r0, r4
 80a111c:	f000 fe56 	bl	80a1dcc <_ZN9TCPClient9availableEv>
 80a1120:	b940      	cbnz	r0, 80a1134 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x170>
 80a1122:	f000 fa81 	bl	80a1628 <HAL_Timer_Get_Milli_Seconds>
                unsigned long t = millis();
                if (t-lastInActivity > this->keepalive*1000UL) {
 80a1126:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80a1128:	1ac0      	subs	r0, r0, r3
 80a112a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80a112c:	4373      	muls	r3, r6
 80a112e:	4298      	cmp	r0, r3
 80a1130:	d9f3      	bls.n	80a111a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x156>
 80a1132:	e00f      	b.n	80a1154 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x190>
                    _client.stop();
                    return false;
                }
            }
            uint8_t llen;
            uint16_t len = readPacket(&llen);
 80a1134:	4669      	mov	r1, sp
 80a1136:	4620      	mov	r0, r4
 80a1138:	f7ff fe7c 	bl	80a0e34 <_ZN4MQTT10readPacketEPh>

            if (len == 4) {
 80a113c:	2804      	cmp	r0, #4
 80a113e:	d109      	bne.n	80a1154 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x190>
                if (buffer[3] == CONN_ACCEPT) {
 80a1140:	69e3      	ldr	r3, [r4, #28]
 80a1142:	78de      	ldrb	r6, [r3, #3]
 80a1144:	b936      	cbnz	r6, 80a1154 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x190>
 80a1146:	f000 fa6f 	bl	80a1628 <HAL_Timer_Get_Milli_Seconds>
                    lastInActivity = millis();
                    pingOutstanding = false;
                    debug_print(" Connect success\n");
                    return true;
 80a114a:	2501      	movs	r5, #1
            uint8_t llen;
            uint16_t len = readPacket(&llen);

            if (len == 4) {
                if (buffer[3] == CONN_ACCEPT) {
                    lastInActivity = millis();
 80a114c:	62a0      	str	r0, [r4, #40]	; 0x28
                    pingOutstanding = false;
 80a114e:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
 80a1152:	e004      	b.n	80a115e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x19a>
                    // check EMQTT_CONNACK_RESPONSE code.
                    debug_print(" Connect fail. code = [%d]\n", buffer[3]);
                }
            }
        }
        _client.stop();
 80a1154:	4620      	mov	r0, r4
 80a1156:	f000 fe75 	bl	80a1e44 <_ZN9TCPClient4stopEv>
 80a115a:	e000      	b.n	80a115e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x19a>
    }
    return false;
 80a115c:	2500      	movs	r5, #0
}
 80a115e:	4628      	mov	r0, r5
 80a1160:	b007      	add	sp, #28
 80a1162:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a1166:	bf00      	nop
 80a1168:	080a62f4 	.word	0x080a62f4
 80a116c:	080a62fb 	.word	0x080a62fb

080a1170 <_ZN4MQTT7connectEPKc>:
void MQTT::addQosCallback(void (*qoscallback)(unsigned int)) {
    this->qoscallback = qoscallback;
}


bool MQTT::connect(const char *id) {
 80a1170:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    return connect(id, NULL, NULL, 0, QOS0, 0, 0, true);
 80a1172:	2304      	movs	r3, #4
 80a1174:	9305      	str	r3, [sp, #20]
 80a1176:	2301      	movs	r3, #1
 80a1178:	9304      	str	r3, [sp, #16]
 80a117a:	2300      	movs	r3, #0
 80a117c:	9303      	str	r3, [sp, #12]
 80a117e:	9302      	str	r3, [sp, #8]
 80a1180:	9301      	str	r3, [sp, #4]
 80a1182:	9300      	str	r3, [sp, #0]
 80a1184:	461a      	mov	r2, r3
 80a1186:	f7ff ff1d 	bl	80a0fc4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>
}
 80a118a:	b007      	add	sp, #28
 80a118c:	f85d fb04 	ldr.w	pc, [sp], #4

080a1190 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>:

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
    return publish(topic, payload, plength, retain, qos, false, messageid);
}

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
 80a1190:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a1194:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80a1196:	4604      	mov	r4, r0
 80a1198:	468b      	mov	fp, r1
 80a119a:	4691      	mov	r9, r2
 80a119c:	469a      	mov	sl, r3
 80a119e:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
 80a11a2:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
 80a11a6:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
    if (isConnected()) {
 80a11aa:	f7ff fefc 	bl	80a0fa6 <_ZN4MQTT11isConnectedEv>
 80a11ae:	2800      	cmp	r0, #0
 80a11b0:	d04b      	beq.n	80a124a <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xba>
        // Leave room in the buffer for header and variable length field
        uint16_t length = 5;
        memset(buffer, 0, this->maxpacketsize);
 80a11b2:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54
 80a11b6:	2100      	movs	r1, #0
 80a11b8:	69e0      	ldr	r0, [r4, #28]
 80a11ba:	f003 fc0c 	bl	80a49d6 <memset>

        length = writeString(topic, buffer, length);
 80a11be:	2305      	movs	r3, #5
 80a11c0:	69e2      	ldr	r2, [r4, #28]
 80a11c2:	4659      	mov	r1, fp
 80a11c4:	4620      	mov	r0, r4
 80a11c6:	f7ff fed4 	bl	80a0f72 <_ZN4MQTT11writeStringEPKcPht>

        if (qos == QOS2 || qos == QOS1) {
 80a11ca:	1e6b      	subs	r3, r5, #1
 80a11cc:	2b01      	cmp	r3, #1
 80a11ce:	d812      	bhi.n	80a11f6 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x66>
            nextMsgId += 1;
 80a11d0:	8c23      	ldrh	r3, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
 80a11d2:	69e2      	ldr	r2, [r4, #28]
        memset(buffer, 0, this->maxpacketsize);

        length = writeString(topic, buffer, length);

        if (qos == QOS2 || qos == QOS1) {
            nextMsgId += 1;
 80a11d4:	3301      	adds	r3, #1
 80a11d6:	b29b      	uxth	r3, r3
 80a11d8:	8423      	strh	r3, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
 80a11da:	121b      	asrs	r3, r3, #8
 80a11dc:	5413      	strb	r3, [r2, r0]
 80a11de:	1c41      	adds	r1, r0, #1
            buffer[length++] = (nextMsgId & 0xFF);
 80a11e0:	69e3      	ldr	r3, [r4, #28]
 80a11e2:	8c22      	ldrh	r2, [r4, #32]

        length = writeString(topic, buffer, length);

        if (qos == QOS2 || qos == QOS1) {
            nextMsgId += 1;
            buffer[length++] = (nextMsgId >> 8);
 80a11e4:	b289      	uxth	r1, r1
            buffer[length++] = (nextMsgId & 0xFF);
 80a11e6:	3002      	adds	r0, #2
 80a11e8:	b280      	uxth	r0, r0
 80a11ea:	545a      	strb	r2, [r3, r1]
            if (messageid != NULL)
 80a11ec:	b11e      	cbz	r6, 80a11f6 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x66>
                *messageid = nextMsgId++;
 80a11ee:	8c23      	ldrh	r3, [r4, #32]
 80a11f0:	1c5a      	adds	r2, r3, #1
 80a11f2:	8422      	strh	r2, [r4, #32]
 80a11f4:	8033      	strh	r3, [r6, #0]

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
    return publish(topic, payload, plength, retain, qos, false, messageid);
}

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
 80a11f6:	2200      	movs	r2, #0
            buffer[length++] = (nextMsgId & 0xFF);
            if (messageid != NULL)
                *messageid = nextMsgId++;
        }

        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
 80a11f8:	b291      	uxth	r1, r2
 80a11fa:	1883      	adds	r3, r0, r2
 80a11fc:	458a      	cmp	sl, r1
 80a11fe:	b29b      	uxth	r3, r3
 80a1200:	d909      	bls.n	80a1216 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x86>
 80a1202:	f8b4 6054 	ldrh.w	r6, [r4, #84]	; 0x54
 80a1206:	3201      	adds	r2, #1
 80a1208:	429e      	cmp	r6, r3
 80a120a:	d904      	bls.n	80a1216 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x86>
            buffer[length++] = payload[i];
 80a120c:	f819 6001 	ldrb.w	r6, [r9, r1]
 80a1210:	69e1      	ldr	r1, [r4, #28]
 80a1212:	54ce      	strb	r6, [r1, r3]
 80a1214:	e7f0      	b.n	80a11f8 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x68>
        }

        uint8_t header = MQTTPUBLISH;
        if (retain) {
            header |= 1;
 80a1216:	f1b8 0f00 	cmp.w	r8, #0
 80a121a:	bf0c      	ite	eq
 80a121c:	2130      	moveq	r1, #48	; 0x30
 80a121e:	2131      	movne	r1, #49	; 0x31
        }

        if (dup) {
 80a1220:	b10f      	cbz	r7, 80a1226 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
            header |= DUP_FLAG_ON_MASK;
 80a1222:	f041 0108 	orr.w	r1, r1, #8
        }

        if (qos == QOS2)
 80a1226:	2d02      	cmp	r5, #2
 80a1228:	d102      	bne.n	80a1230 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xa0>
            header |= MQTTQOS2_HEADER_MASK;
 80a122a:	f041 0104 	orr.w	r1, r1, #4
 80a122e:	e003      	b.n	80a1238 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xa8>
        else if (qos == QOS1)
 80a1230:	2d01      	cmp	r5, #1
            header |= MQTTQOS1_HEADER_MASK;
 80a1232:	bf08      	it	eq
 80a1234:	f041 0102 	orreq.w	r1, r1, #2
        else
            header |= MQTTQOS0_HEADER_MASK;

        return write(header, buffer, length-5);
 80a1238:	4620      	mov	r0, r4
 80a123a:	3b05      	subs	r3, #5
 80a123c:	69e2      	ldr	r2, [r4, #28]
 80a123e:	b29b      	uxth	r3, r3
    }
    return false;
}
 80a1240:	b001      	add	sp, #4
 80a1242:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        else if (qos == QOS1)
            header |= MQTTQOS1_HEADER_MASK;
        else
            header |= MQTTQOS0_HEADER_MASK;

        return write(header, buffer, length-5);
 80a1246:	f7ff be4d 	b.w	80a0ee4 <_ZN4MQTT5writeEhPht>
    }
    return false;
}
 80a124a:	b001      	add	sp, #4
 80a124c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a1250 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>:

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain) {
    return publish(topic, payload, plength, retain, QOS0, NULL);
}

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
 80a1250:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return publish(topic, payload, plength, retain, qos, false, messageid);
 80a1252:	9c08      	ldr	r4, [sp, #32]
 80a1254:	9403      	str	r4, [sp, #12]
 80a1256:	2400      	movs	r4, #0
 80a1258:	9402      	str	r4, [sp, #8]
 80a125a:	f89d 401c 	ldrb.w	r4, [sp, #28]
 80a125e:	9401      	str	r4, [sp, #4]
 80a1260:	f89d 4018 	ldrb.w	r4, [sp, #24]
 80a1264:	9400      	str	r4, [sp, #0]
 80a1266:	f7ff ff93 	bl	80a1190 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>
}
 80a126a:	b004      	add	sp, #16
 80a126c:	bd10      	pop	{r4, pc}

080a126e <_ZN4MQTT7publishEPKcS1_>:
        return true;
    }
    return false;
}

bool MQTT::publish(const char* topic, const char* payload) {
 80a126e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80a1270:	4605      	mov	r5, r0
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
 80a1272:	4610      	mov	r0, r2
        return true;
    }
    return false;
}

bool MQTT::publish(const char* topic, const char* payload) {
 80a1274:	460e      	mov	r6, r1
 80a1276:	4614      	mov	r4, r2
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
 80a1278:	f004 f904 	bl	80a5484 <strlen>
 80a127c:	2300      	movs	r3, #0
 80a127e:	9302      	str	r3, [sp, #8]
 80a1280:	9301      	str	r3, [sp, #4]
 80a1282:	9300      	str	r3, [sp, #0]
 80a1284:	4622      	mov	r2, r4
 80a1286:	4603      	mov	r3, r0
 80a1288:	4631      	mov	r1, r6
 80a128a:	4628      	mov	r0, r5
 80a128c:	f7ff ffe0 	bl	80a1250 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>
}
 80a1290:	b004      	add	sp, #16
 80a1292:	bd70      	pop	{r4, r5, r6, pc}

080a1294 <_ZN4MQTT14publishReleaseEt>:
        return write(header, buffer, length-5);
    }
    return false;
}

bool MQTT::publishRelease(uint16_t messageid) {
 80a1294:	b538      	push	{r3, r4, r5, lr}
 80a1296:	4604      	mov	r4, r0
 80a1298:	460d      	mov	r5, r1
    if (isConnected()) {
 80a129a:	f7ff fe84 	bl	80a0fa6 <_ZN4MQTT11isConnectedEv>
 80a129e:	b190      	cbz	r0, 80a12c6 <_ZN4MQTT14publishReleaseEt+0x32>
        uint16_t length = 0;
        // reserved bits in MQTT v3.1.1
        buffer[length++] = MQTTPUBREL | MQTTQOS1_HEADER_MASK;
 80a12a0:	69e3      	ldr	r3, [r4, #28]
 80a12a2:	2262      	movs	r2, #98	; 0x62
 80a12a4:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
 80a12a6:	69e3      	ldr	r3, [r4, #28]
 80a12a8:	2202      	movs	r2, #2
 80a12aa:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
 80a12ac:	69e3      	ldr	r3, [r4, #28]
 80a12ae:	122a      	asrs	r2, r5, #8
 80a12b0:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
 80a12b2:	69e3      	ldr	r3, [r4, #28]
        return _client.write(buffer, length);
 80a12b4:	2204      	movs	r2, #4
        uint16_t length = 0;
        // reserved bits in MQTT v3.1.1
        buffer[length++] = MQTTPUBREL | MQTTQOS1_HEADER_MASK;
        buffer[length++] = 2;
        buffer[length++] = (messageid >> 8);
        buffer[length++] = (messageid & 0xFF);
 80a12b6:	70dd      	strb	r5, [r3, #3]
        return _client.write(buffer, length);
 80a12b8:	69e1      	ldr	r1, [r4, #28]
 80a12ba:	4620      	mov	r0, r4
 80a12bc:	f000 fce3 	bl	80a1c86 <_ZN9TCPClient5writeEPKhj>
 80a12c0:	3000      	adds	r0, #0
 80a12c2:	bf18      	it	ne
 80a12c4:	2001      	movne	r0, #1
    }
    return false;
}
 80a12c6:	bd38      	pop	{r3, r4, r5, pc}

080a12c8 <_ZN4MQTT15publishCompleteEt>:

bool MQTT::publishComplete(uint16_t messageid) {
 80a12c8:	b538      	push	{r3, r4, r5, lr}
 80a12ca:	4604      	mov	r4, r0
 80a12cc:	460d      	mov	r5, r1
    if (isConnected()) {
 80a12ce:	f7ff fe6a 	bl	80a0fa6 <_ZN4MQTT11isConnectedEv>
 80a12d2:	b190      	cbz	r0, 80a12fa <_ZN4MQTT15publishCompleteEt+0x32>
        uint16_t length = 0;
        // reserved bits in MQTT v3.1.1
        buffer[length++] = MQTTPUBCOMP | MQTTQOS1_HEADER_MASK;
 80a12d4:	69e3      	ldr	r3, [r4, #28]
 80a12d6:	2272      	movs	r2, #114	; 0x72
 80a12d8:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
 80a12da:	69e3      	ldr	r3, [r4, #28]
 80a12dc:	2202      	movs	r2, #2
 80a12de:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
 80a12e0:	69e3      	ldr	r3, [r4, #28]
 80a12e2:	122a      	asrs	r2, r5, #8
 80a12e4:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
 80a12e6:	69e3      	ldr	r3, [r4, #28]
        return _client.write(buffer, length);
 80a12e8:	2204      	movs	r2, #4
        uint16_t length = 0;
        // reserved bits in MQTT v3.1.1
        buffer[length++] = MQTTPUBCOMP | MQTTQOS1_HEADER_MASK;
        buffer[length++] = 2;
        buffer[length++] = (messageid >> 8);
        buffer[length++] = (messageid & 0xFF);
 80a12ea:	70dd      	strb	r5, [r3, #3]
        return _client.write(buffer, length);
 80a12ec:	69e1      	ldr	r1, [r4, #28]
 80a12ee:	4620      	mov	r0, r4
 80a12f0:	f000 fcc9 	bl	80a1c86 <_ZN9TCPClient5writeEPKhj>
 80a12f4:	3000      	adds	r0, #0
 80a12f6:	bf18      	it	ne
 80a12f8:	2001      	movne	r0, #1
    }
    return false;
}
 80a12fa:	bd38      	pop	{r3, r4, r5, pc}

080a12fc <_ZN4MQTT4loopEv>:
    }

    return len;
}

bool MQTT::loop() {
 80a12fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a1300:	b083      	sub	sp, #12
 80a1302:	af00      	add	r7, sp, #0
 80a1304:	4604      	mov	r4, r0
    if (isConnected()) {
 80a1306:	f7ff fe4e 	bl	80a0fa6 <_ZN4MQTT11isConnectedEv>
 80a130a:	4681      	mov	r9, r0
 80a130c:	2800      	cmp	r0, #0
 80a130e:	f000 80f6 	beq.w	80a14fe <_ZN4MQTT4loopEv+0x202>
 80a1312:	f000 f989 	bl	80a1628 <HAL_Timer_Get_Milli_Seconds>
        unsigned long t = millis();
        if ((t - lastInActivity > this->keepalive*1000UL) || (t - lastOutActivity > this->keepalive*1000UL)) {
 80a1316:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80a1318:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a131c:	4353      	muls	r3, r2
 80a131e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80a1320:	4605      	mov	r5, r0
 80a1322:	1a82      	subs	r2, r0, r2
 80a1324:	429a      	cmp	r2, r3
 80a1326:	d803      	bhi.n	80a1330 <_ZN4MQTT4loopEv+0x34>
 80a1328:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80a132a:	1a82      	subs	r2, r0, r2
 80a132c:	4293      	cmp	r3, r2
 80a132e:	d217      	bcs.n	80a1360 <_ZN4MQTT4loopEv+0x64>
            if (pingOutstanding) {
 80a1330:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80a1334:	b12b      	cbz	r3, 80a1342 <_ZN4MQTT4loopEv+0x46>
                _client.stop();
 80a1336:	4620      	mov	r0, r4
 80a1338:	f000 fd84 	bl	80a1e44 <_ZN9TCPClient4stopEv>
                return false;
 80a133c:	f04f 0900 	mov.w	r9, #0
 80a1340:	e0dd      	b.n	80a14fe <_ZN4MQTT4loopEv+0x202>
            } else {
                buffer[0] = MQTTPINGREQ;
 80a1342:	69e2      	ldr	r2, [r4, #28]
 80a1344:	21c0      	movs	r1, #192	; 0xc0
 80a1346:	7011      	strb	r1, [r2, #0]
                buffer[1] = 0;
 80a1348:	69e2      	ldr	r2, [r4, #28]
                _client.write(buffer,2);
 80a134a:	4620      	mov	r0, r4
            if (pingOutstanding) {
                _client.stop();
                return false;
            } else {
                buffer[0] = MQTTPINGREQ;
                buffer[1] = 0;
 80a134c:	7053      	strb	r3, [r2, #1]
                _client.write(buffer,2);
 80a134e:	69e1      	ldr	r1, [r4, #28]
 80a1350:	2202      	movs	r2, #2
 80a1352:	f000 fc98 	bl	80a1c86 <_ZN9TCPClient5writeEPKhj>
                lastOutActivity = t;
                lastInActivity = t;
                pingOutstanding = true;
 80a1356:	2301      	movs	r3, #1
                return false;
            } else {
                buffer[0] = MQTTPINGREQ;
                buffer[1] = 0;
                _client.write(buffer,2);
                lastOutActivity = t;
 80a1358:	6265      	str	r5, [r4, #36]	; 0x24
                lastInActivity = t;
 80a135a:	62a5      	str	r5, [r4, #40]	; 0x28
                pingOutstanding = true;
 80a135c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
            }
        }
        if (_client.available()) {
 80a1360:	4620      	mov	r0, r4
 80a1362:	f000 fd33 	bl	80a1dcc <_ZN9TCPClient9availableEv>
 80a1366:	2800      	cmp	r0, #0
 80a1368:	f000 80c9 	beq.w	80a14fe <_ZN4MQTT4loopEv+0x202>
            uint8_t llen;
            uint16_t len = readPacket(&llen);
 80a136c:	1df9      	adds	r1, r7, #7
 80a136e:	4620      	mov	r0, r4
 80a1370:	f7ff fd60 	bl	80a0e34 <_ZN4MQTT10readPacketEPh>
            uint16_t msgId = 0;
            uint8_t *payload;
            if (len > 0) {
 80a1374:	4602      	mov	r2, r0
 80a1376:	2800      	cmp	r0, #0
 80a1378:	f000 80c1 	beq.w	80a14fe <_ZN4MQTT4loopEv+0x202>
                lastInActivity = t;
                uint8_t type = buffer[0]&0xF0;
 80a137c:	69e3      	ldr	r3, [r4, #28]
            uint8_t llen;
            uint16_t len = readPacket(&llen);
            uint16_t msgId = 0;
            uint8_t *payload;
            if (len > 0) {
                lastInActivity = t;
 80a137e:	62a5      	str	r5, [r4, #40]	; 0x28
                uint8_t type = buffer[0]&0xF0;
 80a1380:	7818      	ldrb	r0, [r3, #0]
 80a1382:	f000 01f0 	and.w	r1, r0, #240	; 0xf0
                if (type == MQTTPUBLISH) {
 80a1386:	2930      	cmp	r1, #48	; 0x30
 80a1388:	d17d      	bne.n	80a1486 <_ZN4MQTT4loopEv+0x18a>
                    if (callback) {
 80a138a:	f8d4 b030 	ldr.w	fp, [r4, #48]	; 0x30
 80a138e:	f1bb 0f00 	cmp.w	fp, #0
 80a1392:	f000 80b4 	beq.w	80a14fe <_ZN4MQTT4loopEv+0x202>
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
 80a1396:	f897 c007 	ldrb.w	ip, [r7, #7]
              							_client.write(buffer, 4);
              							lastOutActivity = t;
            						} else {
                            payload = buffer+llen+3+tl;
                            callback(topic,payload,len-llen-3-tl);
                        }
 80a139a:	46ea      	mov	sl, sp
            if (len > 0) {
                lastInActivity = t;
                uint8_t type = buffer[0]&0xF0;
                if (type == MQTTPUBLISH) {
                    if (callback) {
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
 80a139c:	eb03 000c 	add.w	r0, r3, ip
 80a13a0:	7881      	ldrb	r1, [r0, #2]
 80a13a2:	f890 e001 	ldrb.w	lr, [r0, #1]
 80a13a6:	eb01 2e0e 	add.w	lr, r1, lr, lsl #8
 80a13aa:	fa1f fe8e 	uxth.w	lr, lr
                        char topic[tl+1];
 80a13ae:	f10e 0108 	add.w	r1, lr, #8
 80a13b2:	f021 0107 	bic.w	r1, r1, #7
 80a13b6:	ebad 0d01 	sub.w	sp, sp, r1
 80a13ba:	4668      	mov	r0, sp
 80a13bc:	2100      	movs	r1, #0
                        for (uint16_t i=0;i<tl;i++) {
 80a13be:	b28e      	uxth	r6, r1
 80a13c0:	45b6      	cmp	lr, r6
 80a13c2:	d906      	bls.n	80a13d2 <_ZN4MQTT4loopEv+0xd6>
                            topic[i] = buffer[llen+3+i];
 80a13c4:	eb0c 0601 	add.w	r6, ip, r1
 80a13c8:	441e      	add	r6, r3
 80a13ca:	78f6      	ldrb	r6, [r6, #3]
 80a13cc:	5446      	strb	r6, [r0, r1]
 80a13ce:	3101      	adds	r1, #1
                uint8_t type = buffer[0]&0xF0;
                if (type == MQTTPUBLISH) {
                    if (callback) {
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
                        char topic[tl+1];
                        for (uint16_t i=0;i<tl;i++) {
 80a13d0:	e7f5      	b.n	80a13be <_ZN4MQTT4loopEv+0xc2>
                            topic[i] = buffer[llen+3+i];
                        }
                        topic[tl] = 0;
 80a13d2:	2100      	movs	r1, #0
 80a13d4:	f800 100e 	strb.w	r1, [r0, lr]
 80a13d8:	781e      	ldrb	r6, [r3, #0]
 80a13da:	f10c 0103 	add.w	r1, ip, #3
 80a13de:	f006 0606 	and.w	r6, r6, #6
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
 80a13e2:	2e02      	cmp	r6, #2
 80a13e4:	ebcc 0202 	rsb	r2, ip, r2
 80a13e8:	d11e      	bne.n	80a1428 <_ZN4MQTT4loopEv+0x12c>
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
 80a13ea:	4471      	add	r1, lr
 80a13ec:	f813 8001 	ldrb.w	r8, [r3, r1]
 80a13f0:	4419      	add	r1, r3
 80a13f2:	7849      	ldrb	r1, [r1, #1]
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);
 80a13f4:	ebce 0202 	rsb	r2, lr, r2
                            topic[i] = buffer[llen+3+i];
                        }
                        topic[tl] = 0;
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
 80a13f8:	eb01 2808 	add.w	r8, r1, r8, lsl #8
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);
 80a13fc:	f10c 0105 	add.w	r1, ip, #5
 80a1400:	4471      	add	r1, lr
 80a1402:	3a05      	subs	r2, #5
 80a1404:	4419      	add	r1, r3
 80a1406:	47d8      	blx	fp

                            buffer[0] = MQTTPUBACK; // respond with PUBACK
 80a1408:	69e3      	ldr	r3, [r4, #28]
 80a140a:	2240      	movs	r2, #64	; 0x40
 80a140c:	701a      	strb	r2, [r3, #0]
                            buffer[1] = 2;
 80a140e:	69e3      	ldr	r3, [r4, #28]
                            topic[i] = buffer[llen+3+i];
                        }
                        topic[tl] = 0;
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
 80a1410:	fa1f f888 	uxth.w	r8, r8
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);

                            buffer[0] = MQTTPUBACK; // respond with PUBACK
                            buffer[1] = 2;
 80a1414:	705e      	strb	r6, [r3, #1]
                            buffer[2] = (msgId >> 8);
 80a1416:	69e3      	ldr	r3, [r4, #28]
 80a1418:	ea4f 2228 	mov.w	r2, r8, asr #8
 80a141c:	709a      	strb	r2, [r3, #2]
                            buffer[3] = (msgId & 0xFF);
 80a141e:	69e3      	ldr	r3, [r4, #28]
                            _client.write(buffer,4);
 80a1420:	2204      	movs	r2, #4
                            callback(topic,payload,len-llen-3-tl-2);

                            buffer[0] = MQTTPUBACK; // respond with PUBACK
                            buffer[1] = 2;
                            buffer[2] = (msgId >> 8);
                            buffer[3] = (msgId & 0xFF);
 80a1422:	f883 8003 	strb.w	r8, [r3, #3]
 80a1426:	e020      	b.n	80a146a <_ZN4MQTT4loopEv+0x16e>
                            _client.write(buffer,4);
                            lastOutActivity = t;
        						    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
 80a1428:	2e04      	cmp	r6, #4
 80a142a:	d124      	bne.n	80a1476 <_ZN4MQTT4loopEv+0x17a>
							              msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
 80a142c:	4471      	add	r1, lr
 80a142e:	f813 8001 	ldrb.w	r8, [r3, r1]
 80a1432:	4419      	add	r1, r3
 80a1434:	7849      	ldrb	r1, [r1, #1]
							              payload = buffer + llen + 3 + tl + 2;
							              callback(topic, payload, len - llen - 3 - tl - 2);
 80a1436:	ebce 0202 	rsb	r2, lr, r2
                            buffer[2] = (msgId >> 8);
                            buffer[3] = (msgId & 0xFF);
                            _client.write(buffer,4);
                            lastOutActivity = t;
        						    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
							              msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
 80a143a:	eb01 2808 	add.w	r8, r1, r8, lsl #8
							              payload = buffer + llen + 3 + tl + 2;
							              callback(topic, payload, len - llen - 3 - tl - 2);
 80a143e:	f10c 0105 	add.w	r1, ip, #5
 80a1442:	4471      	add	r1, lr
 80a1444:	3a05      	subs	r2, #5
 80a1446:	4419      	add	r1, r3
 80a1448:	47d8      	blx	fp

              							buffer[0] = MQTTPUBREC; // respond with PUBREC
 80a144a:	69e3      	ldr	r3, [r4, #28]
 80a144c:	2250      	movs	r2, #80	; 0x50
 80a144e:	701a      	strb	r2, [r3, #0]
              							buffer[1] = 2;
 80a1450:	69e3      	ldr	r3, [r4, #28]
 80a1452:	2202      	movs	r2, #2
 80a1454:	705a      	strb	r2, [r3, #1]
              							buffer[2] = (msgId >> 8);
 80a1456:	69e3      	ldr	r3, [r4, #28]
                            buffer[2] = (msgId >> 8);
                            buffer[3] = (msgId & 0xFF);
                            _client.write(buffer,4);
                            lastOutActivity = t;
        						    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
							              msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
 80a1458:	fa1f f888 	uxth.w	r8, r8
							              payload = buffer + llen + 3 + tl + 2;
							              callback(topic, payload, len - llen - 3 - tl - 2);

              							buffer[0] = MQTTPUBREC; // respond with PUBREC
              							buffer[1] = 2;
              							buffer[2] = (msgId >> 8);
 80a145c:	ea4f 2228 	mov.w	r2, r8, asr #8
 80a1460:	709a      	strb	r2, [r3, #2]
              							buffer[3] = (msgId & 0xFF);
              							_client.write(buffer, 4);
 80a1462:	4632      	mov	r2, r6
							              callback(topic, payload, len - llen - 3 - tl - 2);

              							buffer[0] = MQTTPUBREC; // respond with PUBREC
              							buffer[1] = 2;
              							buffer[2] = (msgId >> 8);
              							buffer[3] = (msgId & 0xFF);
 80a1464:	69e3      	ldr	r3, [r4, #28]
 80a1466:	f883 8003 	strb.w	r8, [r3, #3]
              							_client.write(buffer, 4);
 80a146a:	69e1      	ldr	r1, [r4, #28]
 80a146c:	4620      	mov	r0, r4
 80a146e:	f000 fc0a 	bl	80a1c86 <_ZN9TCPClient5writeEPKhj>
              							lastOutActivity = t;
 80a1472:	6265      	str	r5, [r4, #36]	; 0x24
 80a1474:	e005      	b.n	80a1482 <_ZN4MQTT4loopEv+0x186>
            						} else {
                            payload = buffer+llen+3+tl;
                            callback(topic,payload,len-llen-3-tl);
 80a1476:	3a03      	subs	r2, #3
 80a1478:	4471      	add	r1, lr
 80a147a:	ebce 0202 	rsb	r2, lr, r2
 80a147e:	4419      	add	r1, r3
 80a1480:	47d8      	blx	fp
 80a1482:	46d5      	mov	sp, sl
 80a1484:	e03b      	b.n	80a14fe <_ZN4MQTT4loopEv+0x202>
                        }
                    }
                } else if (type == MQTTPUBREC) {
 80a1486:	2950      	cmp	r1, #80	; 0x50
 80a1488:	d108      	bne.n	80a149c <_ZN4MQTT4loopEv+0x1a0>
                    // check for the situation that QoS2 receive PUBREC, should return PUBREL
                    msgId = (buffer[2] << 8) + buffer[3];
                    this->publishRelease(msgId);
 80a148a:	7899      	ldrb	r1, [r3, #2]
 80a148c:	78db      	ldrb	r3, [r3, #3]
 80a148e:	4620      	mov	r0, r4
 80a1490:	eb03 2101 	add.w	r1, r3, r1, lsl #8
 80a1494:	b289      	uxth	r1, r1
 80a1496:	f7ff fefd 	bl	80a1294 <_ZN4MQTT14publishReleaseEt>
 80a149a:	e030      	b.n	80a14fe <_ZN4MQTT4loopEv+0x202>
                } else if (type == MQTTPUBACK) {
 80a149c:	2940      	cmp	r1, #64	; 0x40
 80a149e:	d00c      	beq.n	80a14ba <_ZN4MQTT4loopEv+0x1be>
                        if (len == 4 && (buffer[0]&0x06) == MQTTQOS0_HEADER_MASK) {
                            msgId = (buffer[2]<<8)+buffer[3];
                            this->qoscallback(msgId);
                        }
                    }
                } else if (type == MQTTPUBREL) {
 80a14a0:	2960      	cmp	r1, #96	; 0x60
 80a14a2:	d108      	bne.n	80a14b6 <_ZN4MQTT4loopEv+0x1ba>
                  msgId = (buffer[2] << 8) + buffer[3];
                  this->publishComplete(msgId);
 80a14a4:	7899      	ldrb	r1, [r3, #2]
 80a14a6:	78db      	ldrb	r3, [r3, #3]
 80a14a8:	4620      	mov	r0, r4
 80a14aa:	eb03 2101 	add.w	r1, r3, r1, lsl #8
 80a14ae:	b289      	uxth	r1, r1
 80a14b0:	f7ff ff0a 	bl	80a12c8 <_ZN4MQTT15publishCompleteEt>
 80a14b4:	e023      	b.n	80a14fe <_ZN4MQTT4loopEv+0x202>
                } else if (type == MQTTPUBCOMP) {
 80a14b6:	2970      	cmp	r1, #112	; 0x70
 80a14b8:	d10d      	bne.n	80a14d6 <_ZN4MQTT4loopEv+0x1da>
                  if (qoscallback) {
 80a14ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80a14bc:	b1f9      	cbz	r1, 80a14fe <_ZN4MQTT4loopEv+0x202>
                      // msgId only present for QOS==0
                      if (len == 4 && (buffer[0]&0x06) == MQTTQOS0_HEADER_MASK) {
 80a14be:	2a04      	cmp	r2, #4
 80a14c0:	d11d      	bne.n	80a14fe <_ZN4MQTT4loopEv+0x202>
 80a14c2:	f010 0f06 	tst.w	r0, #6
 80a14c6:	d11a      	bne.n	80a14fe <_ZN4MQTT4loopEv+0x202>
                          msgId = (buffer[2]<<8)+buffer[3];
                          this->qoscallback(msgId);
 80a14c8:	7898      	ldrb	r0, [r3, #2]
 80a14ca:	78db      	ldrb	r3, [r3, #3]
 80a14cc:	eb03 2000 	add.w	r0, r3, r0, lsl #8
 80a14d0:	b280      	uxth	r0, r0
 80a14d2:	4788      	blx	r1
 80a14d4:	e013      	b.n	80a14fe <_ZN4MQTT4loopEv+0x202>
                      }
                  }
                } else if (type == MQTTSUBACK) {
 80a14d6:	2990      	cmp	r1, #144	; 0x90
 80a14d8:	d011      	beq.n	80a14fe <_ZN4MQTT4loopEv+0x202>
                    // if something...
                } else if (type == MQTTPINGREQ) {
 80a14da:	29c0      	cmp	r1, #192	; 0xc0
 80a14dc:	d10a      	bne.n	80a14f4 <_ZN4MQTT4loopEv+0x1f8>
                    buffer[0] = MQTTPINGRESP;
 80a14de:	22d0      	movs	r2, #208	; 0xd0
 80a14e0:	701a      	strb	r2, [r3, #0]
                    buffer[1] = 0;
 80a14e2:	69e3      	ldr	r3, [r4, #28]
 80a14e4:	2200      	movs	r2, #0
 80a14e6:	705a      	strb	r2, [r3, #1]
                    _client.write(buffer,2);
 80a14e8:	69e1      	ldr	r1, [r4, #28]
 80a14ea:	2202      	movs	r2, #2
 80a14ec:	4620      	mov	r0, r4
 80a14ee:	f000 fbca 	bl	80a1c86 <_ZN9TCPClient5writeEPKhj>
 80a14f2:	e004      	b.n	80a14fe <_ZN4MQTT4loopEv+0x202>
                } else if (type == MQTTPINGRESP) {
 80a14f4:	29d0      	cmp	r1, #208	; 0xd0
                    pingOutstanding = false;
 80a14f6:	bf04      	itt	eq
 80a14f8:	2300      	moveq	r3, #0
 80a14fa:	f884 302c 	strbeq.w	r3, [r4, #44]	; 0x2c
            }
        }
        return true;
    }
    return false;
}
 80a14fe:	4648      	mov	r0, r9
 80a1500:	370c      	adds	r7, #12
 80a1502:	46bd      	mov	sp, r7
 80a1504:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a1508 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>:

bool MQTT::subscribe(const char* topic) {
    return subscribe(topic, QOS0);
}

bool MQTT::subscribe(const char* topic, EMQTT_QOS qos) {
 80a1508:	b570      	push	{r4, r5, r6, lr}
 80a150a:	4604      	mov	r4, r0
 80a150c:	460e      	mov	r6, r1
 80a150e:	4615      	mov	r5, r2

    if (isConnected()) {
 80a1510:	f7ff fd49 	bl	80a0fa6 <_ZN4MQTT11isConnectedEv>
 80a1514:	b1e8      	cbz	r0, 80a1552 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x4a>
        // Leave room in the buffer for header and variable length field
        uint16_t length = 5;
        nextMsgId++;
 80a1516:	8c23      	ldrh	r3, [r4, #32]
 80a1518:	3301      	adds	r3, #1
 80a151a:	b29b      	uxth	r3, r3
        if (nextMsgId == 0) {
 80a151c:	b903      	cbnz	r3, 80a1520 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x18>
            nextMsgId = 1;
 80a151e:	2301      	movs	r3, #1
 80a1520:	8423      	strh	r3, [r4, #32]
        }
        buffer[length++] = (nextMsgId >> 8);
 80a1522:	8c23      	ldrh	r3, [r4, #32]
 80a1524:	69e2      	ldr	r2, [r4, #28]
 80a1526:	121b      	asrs	r3, r3, #8
 80a1528:	7153      	strb	r3, [r2, #5]
        buffer[length++] = (nextMsgId & 0xFF);
 80a152a:	69e3      	ldr	r3, [r4, #28]
 80a152c:	8c22      	ldrh	r2, [r4, #32]
        length = writeString(topic, buffer,length);
 80a152e:	4631      	mov	r1, r6
        nextMsgId++;
        if (nextMsgId == 0) {
            nextMsgId = 1;
        }
        buffer[length++] = (nextMsgId >> 8);
        buffer[length++] = (nextMsgId & 0xFF);
 80a1530:	719a      	strb	r2, [r3, #6]
        length = writeString(topic, buffer,length);
 80a1532:	69e2      	ldr	r2, [r4, #28]
 80a1534:	2307      	movs	r3, #7
 80a1536:	4620      	mov	r0, r4
 80a1538:	f7ff fd1b 	bl	80a0f72 <_ZN4MQTT11writeStringEPKcPht>
        buffer[length++] = qos;
 80a153c:	69e3      	ldr	r3, [r4, #28]
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
 80a153e:	2182      	movs	r1, #130	; 0x82
            nextMsgId = 1;
        }
        buffer[length++] = (nextMsgId >> 8);
        buffer[length++] = (nextMsgId & 0xFF);
        length = writeString(topic, buffer,length);
        buffer[length++] = qos;
 80a1540:	541d      	strb	r5, [r3, r0]
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
 80a1542:	1f03      	subs	r3, r0, #4
 80a1544:	69e2      	ldr	r2, [r4, #28]
 80a1546:	4620      	mov	r0, r4
    }
    return false;
}
 80a1548:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        }
        buffer[length++] = (nextMsgId >> 8);
        buffer[length++] = (nextMsgId & 0xFF);
        length = writeString(topic, buffer,length);
        buffer[length++] = qos;
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
 80a154c:	b29b      	uxth	r3, r3
 80a154e:	f7ff bcc9 	b.w	80a0ee4 <_ZN4MQTT5writeEhPht>
    }
    return false;
}
 80a1552:	bd70      	pop	{r4, r5, r6, pc}

080a1554 <_ZN4MQTTD1Ev>:

MQTT::MQTT(uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
    this->initialize(NULL, ip, port, keepalive, callback, maxpacketsize);
}

MQTT::~MQTT() {
 80a1554:	b510      	push	{r4, lr}
 80a1556:	4604      	mov	r4, r0
    if (isConnected()) {
 80a1558:	f7ff fd25 	bl	80a0fa6 <_ZN4MQTT11isConnectedEv>
 80a155c:	b110      	cbz	r0, 80a1564 <_ZN4MQTTD1Ev+0x10>
        disconnect();
 80a155e:	4620      	mov	r0, r4
 80a1560:	f7ff fcf3 	bl	80a0f4a <_ZN4MQTT10disconnectEv>
    }

    if (buffer != NULL)
 80a1564:	69e0      	ldr	r0, [r4, #28]
 80a1566:	b108      	cbz	r0, 80a156c <_ZN4MQTTD1Ev+0x18>
      delete[] buffer;
 80a1568:	f7fe fd9d 	bl	80a00a6 <_ZdaPv>

MQTT::MQTT(uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
    this->initialize(NULL, ip, port, keepalive, callback, maxpacketsize);
}

MQTT::~MQTT() {
 80a156c:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80a1570:	f000 fe52 	bl	80a2218 <_ZN6StringD1Ev>
 80a1574:	4620      	mov	r0, r4
 80a1576:	f7ff fbe9 	bl	80a0d4c <_ZN9TCPClientD1Ev>
        disconnect();
    }

    if (buffer != NULL)
      delete[] buffer;
}
 80a157a:	4620      	mov	r0, r4
 80a157c:	bd10      	pop	{r4, pc}

080a157e <_GLOBAL__sub_I__ZN4MQTTC2EPctPFvS0_PhjE>:
 80a157e:	f000 b803 	b.w	80a1588 <HAL_Pin_Map>

080a1582 <_GLOBAL__sub_I__ZN10JsonBufferC2Ev>:
 80a1582:	f000 b801 	b.w	80a1588 <HAL_Pin_Map>
	...

080a1588 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a1588:	b508      	push	{r3, lr}
 80a158a:	4b02      	ldr	r3, [pc, #8]	; (80a1594 <HAL_Pin_Map+0xc>)
 80a158c:	681b      	ldr	r3, [r3, #0]
 80a158e:	681b      	ldr	r3, [r3, #0]
 80a1590:	9301      	str	r3, [sp, #4]
 80a1592:	bd08      	pop	{r3, pc}
 80a1594:	080601b0 	.word	0x080601b0

080a1598 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a1598:	b508      	push	{r3, lr}
 80a159a:	4b02      	ldr	r3, [pc, #8]	; (80a15a4 <HAL_Pin_Mode+0xc>)
 80a159c:	681b      	ldr	r3, [r3, #0]
 80a159e:	689b      	ldr	r3, [r3, #8]
 80a15a0:	9301      	str	r3, [sp, #4]
 80a15a2:	bd08      	pop	{r3, pc}
 80a15a4:	080601b0 	.word	0x080601b0

080a15a8 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a15a8:	b508      	push	{r3, lr}
 80a15aa:	4b02      	ldr	r3, [pc, #8]	; (80a15b4 <HAL_Get_Pin_Mode+0xc>)
 80a15ac:	681b      	ldr	r3, [r3, #0]
 80a15ae:	68db      	ldr	r3, [r3, #12]
 80a15b0:	9301      	str	r3, [sp, #4]
 80a15b2:	bd08      	pop	{r3, pc}
 80a15b4:	080601b0 	.word	0x080601b0

080a15b8 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a15b8:	b508      	push	{r3, lr}
 80a15ba:	4b02      	ldr	r3, [pc, #8]	; (80a15c4 <HAL_GPIO_Write+0xc>)
 80a15bc:	681b      	ldr	r3, [r3, #0]
 80a15be:	691b      	ldr	r3, [r3, #16]
 80a15c0:	9301      	str	r3, [sp, #4]
 80a15c2:	bd08      	pop	{r3, pc}
 80a15c4:	080601b0 	.word	0x080601b0

080a15c8 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 80a15c8:	b508      	push	{r3, lr}
 80a15ca:	4b02      	ldr	r3, [pc, #8]	; (80a15d4 <HAL_GPIO_Read+0xc>)
 80a15cc:	681b      	ldr	r3, [r3, #0]
 80a15ce:	695b      	ldr	r3, [r3, #20]
 80a15d0:	9301      	str	r3, [sp, #4]
 80a15d2:	bd08      	pop	{r3, pc}
 80a15d4:	080601b0 	.word	0x080601b0

080a15d8 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
 80a15d8:	b508      	push	{r3, lr}
 80a15da:	4b02      	ldr	r3, [pc, #8]	; (80a15e4 <HAL_SPI_Begin+0xc>)
 80a15dc:	681b      	ldr	r3, [r3, #0]
 80a15de:	681b      	ldr	r3, [r3, #0]
 80a15e0:	9301      	str	r3, [sp, #4]
 80a15e2:	bd08      	pop	{r3, pc}
 80a15e4:	080601b4 	.word	0x080601b4

080a15e8 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
 80a15e8:	b508      	push	{r3, lr}
 80a15ea:	4b02      	ldr	r3, [pc, #8]	; (80a15f4 <HAL_SPI_Send_Receive_Data+0xc>)
 80a15ec:	681b      	ldr	r3, [r3, #0]
 80a15ee:	695b      	ldr	r3, [r3, #20]
 80a15f0:	9301      	str	r3, [sp, #4]
 80a15f2:	bd08      	pop	{r3, pc}
 80a15f4:	080601b4 	.word	0x080601b4

080a15f8 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a15f8:	b508      	push	{r3, lr}
 80a15fa:	4b02      	ldr	r3, [pc, #8]	; (80a1604 <HAL_SPI_Init+0xc>)
 80a15fc:	681b      	ldr	r3, [r3, #0]
 80a15fe:	69db      	ldr	r3, [r3, #28]
 80a1600:	9301      	str	r3, [sp, #4]
 80a1602:	bd08      	pop	{r3, pc}
 80a1604:	080601b4 	.word	0x080601b4

080a1608 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a1608:	b508      	push	{r3, lr}
 80a160a:	4b02      	ldr	r3, [pc, #8]	; (80a1614 <HAL_SPI_Is_Enabled+0xc>)
 80a160c:	681b      	ldr	r3, [r3, #0]
 80a160e:	6a1b      	ldr	r3, [r3, #32]
 80a1610:	9301      	str	r3, [sp, #4]
 80a1612:	bd08      	pop	{r3, pc}
 80a1614:	080601b4 	.word	0x080601b4

080a1618 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a1618:	b508      	push	{r3, lr}
 80a161a:	4b02      	ldr	r3, [pc, #8]	; (80a1624 <HAL_RNG_GetRandomNumber+0xc>)
 80a161c:	681b      	ldr	r3, [r3, #0]
 80a161e:	685b      	ldr	r3, [r3, #4]
 80a1620:	9301      	str	r3, [sp, #4]
 80a1622:	bd08      	pop	{r3, pc}
 80a1624:	0806019c 	.word	0x0806019c

080a1628 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a1628:	b508      	push	{r3, lr}
 80a162a:	4b02      	ldr	r3, [pc, #8]	; (80a1634 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a162c:	681b      	ldr	r3, [r3, #0]
 80a162e:	695b      	ldr	r3, [r3, #20]
 80a1630:	9301      	str	r3, [sp, #4]
 80a1632:	bd08      	pop	{r3, pc}
 80a1634:	0806019c 	.word	0x0806019c

080a1638 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
 80a1638:	b508      	push	{r3, lr}
 80a163a:	4b02      	ldr	r3, [pc, #8]	; (80a1644 <HAL_RTC_Get_UnixTime+0xc>)
 80a163c:	681b      	ldr	r3, [r3, #0]
 80a163e:	69db      	ldr	r3, [r3, #28]
 80a1640:	9301      	str	r3, [sp, #4]
 80a1642:	bd08      	pop	{r3, pc}
 80a1644:	0806019c 	.word	0x0806019c

080a1648 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
 80a1648:	b508      	push	{r3, lr}
 80a164a:	4b02      	ldr	r3, [pc, #8]	; (80a1654 <HAL_RTC_Time_Is_Valid+0xc>)
 80a164c:	681b      	ldr	r3, [r3, #0]
 80a164e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a1650:	9301      	str	r3, [sp, #4]
 80a1652:	bd08      	pop	{r3, pc}
 80a1654:	0806019c 	.word	0x0806019c

080a1658 <HAL_Core_System_Reset_Ex>:
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
 80a1658:	b508      	push	{r3, lr}
 80a165a:	4b02      	ldr	r3, [pc, #8]	; (80a1664 <HAL_Core_System_Reset_Ex+0xc>)
 80a165c:	681b      	ldr	r3, [r3, #0]
 80a165e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a1660:	9301      	str	r3, [sp, #4]
 80a1662:	bd08      	pop	{r3, pc}
 80a1664:	080601b8 	.word	0x080601b8

080a1668 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80a1668:	b508      	push	{r3, lr}
 80a166a:	4b02      	ldr	r3, [pc, #8]	; (80a1674 <os_mutex_recursive_create+0xc>)
 80a166c:	681b      	ldr	r3, [r3, #0]
 80a166e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a1670:	9301      	str	r3, [sp, #4]
 80a1672:	bd08      	pop	{r3, pc}
 80a1674:	080601d0 	.word	0x080601d0

080a1678 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80a1678:	b508      	push	{r3, lr}
 80a167a:	4b02      	ldr	r3, [pc, #8]	; (80a1684 <os_mutex_recursive_destroy+0xc>)
 80a167c:	681b      	ldr	r3, [r3, #0]
 80a167e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a1680:	9301      	str	r3, [sp, #4]
 80a1682:	bd08      	pop	{r3, pc}
 80a1684:	080601d0 	.word	0x080601d0

080a1688 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
 80a1688:	b508      	push	{r3, lr}
 80a168a:	4b02      	ldr	r3, [pc, #8]	; (80a1694 <os_mutex_recursive_lock+0xc>)
 80a168c:	681b      	ldr	r3, [r3, #0]
 80a168e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a1690:	9301      	str	r3, [sp, #4]
 80a1692:	bd08      	pop	{r3, pc}
 80a1694:	080601d0 	.word	0x080601d0

080a1698 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
 80a1698:	b508      	push	{r3, lr}
 80a169a:	4b02      	ldr	r3, [pc, #8]	; (80a16a4 <os_mutex_recursive_unlock+0xc>)
 80a169c:	681b      	ldr	r3, [r3, #0]
 80a169e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a16a0:	9301      	str	r3, [sp, #4]
 80a16a2:	bd08      	pop	{r3, pc}
 80a16a4:	080601d0 	.word	0x080601d0

080a16a8 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a16a8:	b508      	push	{r3, lr}
 80a16aa:	4b02      	ldr	r3, [pc, #8]	; (80a16b4 <HAL_USART_Init+0xc>)
 80a16ac:	681b      	ldr	r3, [r3, #0]
 80a16ae:	699b      	ldr	r3, [r3, #24]
 80a16b0:	9301      	str	r3, [sp, #4]
 80a16b2:	bd08      	pop	{r3, pc}
 80a16b4:	080601c4 	.word	0x080601c4

080a16b8 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a16b8:	b508      	push	{r3, lr}
 80a16ba:	4b02      	ldr	r3, [pc, #8]	; (80a16c4 <HAL_USART_Write_Data+0xc>)
 80a16bc:	681b      	ldr	r3, [r3, #0]
 80a16be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a16c0:	9301      	str	r3, [sp, #4]
 80a16c2:	bd08      	pop	{r3, pc}
 80a16c4:	080601c4 	.word	0x080601c4

080a16c8 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a16c8:	b508      	push	{r3, lr}
 80a16ca:	4b02      	ldr	r3, [pc, #8]	; (80a16d4 <HAL_USART_Available_Data+0xc>)
 80a16cc:	681b      	ldr	r3, [r3, #0]
 80a16ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a16d0:	9301      	str	r3, [sp, #4]
 80a16d2:	bd08      	pop	{r3, pc}
 80a16d4:	080601c4 	.word	0x080601c4

080a16d8 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a16d8:	b508      	push	{r3, lr}
 80a16da:	4b02      	ldr	r3, [pc, #8]	; (80a16e4 <HAL_USART_Read_Data+0xc>)
 80a16dc:	681b      	ldr	r3, [r3, #0]
 80a16de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a16e0:	9301      	str	r3, [sp, #4]
 80a16e2:	bd08      	pop	{r3, pc}
 80a16e4:	080601c4 	.word	0x080601c4

080a16e8 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a16e8:	b508      	push	{r3, lr}
 80a16ea:	4b02      	ldr	r3, [pc, #8]	; (80a16f4 <HAL_USART_Peek_Data+0xc>)
 80a16ec:	681b      	ldr	r3, [r3, #0]
 80a16ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a16f0:	9301      	str	r3, [sp, #4]
 80a16f2:	bd08      	pop	{r3, pc}
 80a16f4:	080601c4 	.word	0x080601c4

080a16f8 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a16f8:	b508      	push	{r3, lr}
 80a16fa:	4b02      	ldr	r3, [pc, #8]	; (80a1704 <HAL_USART_Flush_Data+0xc>)
 80a16fc:	681b      	ldr	r3, [r3, #0]
 80a16fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a1700:	9301      	str	r3, [sp, #4]
 80a1702:	bd08      	pop	{r3, pc}
 80a1704:	080601c4 	.word	0x080601c4

080a1708 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a1708:	b508      	push	{r3, lr}
 80a170a:	4b02      	ldr	r3, [pc, #8]	; (80a1714 <HAL_USART_Is_Enabled+0xc>)
 80a170c:	681b      	ldr	r3, [r3, #0]
 80a170e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a1710:	9301      	str	r3, [sp, #4]
 80a1712:	bd08      	pop	{r3, pc}
 80a1714:	080601c4 	.word	0x080601c4

080a1718 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a1718:	b508      	push	{r3, lr}
 80a171a:	4b02      	ldr	r3, [pc, #8]	; (80a1724 <HAL_USART_Available_Data_For_Write+0xc>)
 80a171c:	681b      	ldr	r3, [r3, #0]
 80a171e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a1720:	9301      	str	r3, [sp, #4]
 80a1722:	bd08      	pop	{r3, pc}
 80a1724:	080601c4 	.word	0x080601c4

080a1728 <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
 80a1728:	b508      	push	{r3, lr}
 80a172a:	4b02      	ldr	r3, [pc, #8]	; (80a1734 <HAL_USART_BeginConfig+0xc>)
 80a172c:	681b      	ldr	r3, [r3, #0]
 80a172e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a1730:	9301      	str	r3, [sp, #4]
 80a1732:	bd08      	pop	{r3, pc}
 80a1734:	080601c4 	.word	0x080601c4

080a1738 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a1738:	b508      	push	{r3, lr}
 80a173a:	4b02      	ldr	r3, [pc, #8]	; (80a1744 <HAL_I2C_Write_Data+0xc>)
 80a173c:	681b      	ldr	r3, [r3, #0]
 80a173e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a1740:	9301      	str	r3, [sp, #4]
 80a1742:	bd08      	pop	{r3, pc}
 80a1744:	080601ac 	.word	0x080601ac

080a1748 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a1748:	b508      	push	{r3, lr}
 80a174a:	4b02      	ldr	r3, [pc, #8]	; (80a1754 <HAL_I2C_Available_Data+0xc>)
 80a174c:	681b      	ldr	r3, [r3, #0]
 80a174e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a1750:	9301      	str	r3, [sp, #4]
 80a1752:	bd08      	pop	{r3, pc}
 80a1754:	080601ac 	.word	0x080601ac

080a1758 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a1758:	b508      	push	{r3, lr}
 80a175a:	4b02      	ldr	r3, [pc, #8]	; (80a1764 <HAL_I2C_Read_Data+0xc>)
 80a175c:	681b      	ldr	r3, [r3, #0]
 80a175e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a1760:	9301      	str	r3, [sp, #4]
 80a1762:	bd08      	pop	{r3, pc}
 80a1764:	080601ac 	.word	0x080601ac

080a1768 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a1768:	b508      	push	{r3, lr}
 80a176a:	4b02      	ldr	r3, [pc, #8]	; (80a1774 <HAL_I2C_Peek_Data+0xc>)
 80a176c:	681b      	ldr	r3, [r3, #0]
 80a176e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a1770:	9301      	str	r3, [sp, #4]
 80a1772:	bd08      	pop	{r3, pc}
 80a1774:	080601ac 	.word	0x080601ac

080a1778 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a1778:	b508      	push	{r3, lr}
 80a177a:	4b02      	ldr	r3, [pc, #8]	; (80a1784 <HAL_I2C_Flush_Data+0xc>)
 80a177c:	681b      	ldr	r3, [r3, #0]
 80a177e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a1780:	9301      	str	r3, [sp, #4]
 80a1782:	bd08      	pop	{r3, pc}
 80a1784:	080601ac 	.word	0x080601ac

080a1788 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a1788:	b508      	push	{r3, lr}
 80a178a:	4b02      	ldr	r3, [pc, #8]	; (80a1794 <HAL_I2C_Is_Enabled+0xc>)
 80a178c:	681b      	ldr	r3, [r3, #0]
 80a178e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a1790:	9301      	str	r3, [sp, #4]
 80a1792:	bd08      	pop	{r3, pc}
 80a1794:	080601ac 	.word	0x080601ac

080a1798 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
 80a1798:	b508      	push	{r3, lr}
 80a179a:	4b03      	ldr	r3, [pc, #12]	; (80a17a8 <HAL_I2C_Init+0x10>)
 80a179c:	681b      	ldr	r3, [r3, #0]
 80a179e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a17a2:	9301      	str	r3, [sp, #4]
 80a17a4:	bd08      	pop	{r3, pc}
 80a17a6:	0000      	.short	0x0000
 80a17a8:	080601ac 	.word	0x080601ac

080a17ac <socket_active_status>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, socket_active_status, uint8_t(sock_handle_t))
 80a17ac:	b508      	push	{r3, lr}
 80a17ae:	4b02      	ldr	r3, [pc, #8]	; (80a17b8 <socket_active_status+0xc>)
 80a17b0:	681b      	ldr	r3, [r3, #0]
 80a17b2:	681b      	ldr	r3, [r3, #0]
 80a17b4:	9301      	str	r3, [sp, #4]
 80a17b6:	bd08      	pop	{r3, pc}
 80a17b8:	080601bc 	.word	0x080601bc

080a17bc <socket_handle_valid>:
DYNALIB_FN(1, hal_socket, socket_handle_valid, uint8_t(sock_handle_t))
 80a17bc:	b508      	push	{r3, lr}
 80a17be:	4b02      	ldr	r3, [pc, #8]	; (80a17c8 <socket_handle_valid+0xc>)
 80a17c0:	681b      	ldr	r3, [r3, #0]
 80a17c2:	685b      	ldr	r3, [r3, #4]
 80a17c4:	9301      	str	r3, [sp, #4]
 80a17c6:	bd08      	pop	{r3, pc}
 80a17c8:	080601bc 	.word	0x080601bc

080a17cc <socket_create>:
DYNALIB_FN(2, hal_socket, socket_create, sock_handle_t(uint8_t, uint8_t, uint8_t, uint16_t, network_interface_t))
 80a17cc:	b508      	push	{r3, lr}
 80a17ce:	4b02      	ldr	r3, [pc, #8]	; (80a17d8 <socket_create+0xc>)
 80a17d0:	681b      	ldr	r3, [r3, #0]
 80a17d2:	689b      	ldr	r3, [r3, #8]
 80a17d4:	9301      	str	r3, [sp, #4]
 80a17d6:	bd08      	pop	{r3, pc}
 80a17d8:	080601bc 	.word	0x080601bc

080a17dc <socket_connect>:
DYNALIB_FN(3, hal_socket, socket_connect, int32_t(sock_handle_t, const sockaddr_t*, long))
 80a17dc:	b508      	push	{r3, lr}
 80a17de:	4b02      	ldr	r3, [pc, #8]	; (80a17e8 <socket_connect+0xc>)
 80a17e0:	681b      	ldr	r3, [r3, #0]
 80a17e2:	68db      	ldr	r3, [r3, #12]
 80a17e4:	9301      	str	r3, [sp, #4]
 80a17e6:	bd08      	pop	{r3, pc}
 80a17e8:	080601bc 	.word	0x080601bc

080a17ec <socket_receive>:
DYNALIB_FN(4, hal_socket, socket_receive, sock_result_t(sock_handle_t, void*, socklen_t, system_tick_t))
 80a17ec:	b508      	push	{r3, lr}
 80a17ee:	4b02      	ldr	r3, [pc, #8]	; (80a17f8 <socket_receive+0xc>)
 80a17f0:	681b      	ldr	r3, [r3, #0]
 80a17f2:	691b      	ldr	r3, [r3, #16]
 80a17f4:	9301      	str	r3, [sp, #4]
 80a17f6:	bd08      	pop	{r3, pc}
 80a17f8:	080601bc 	.word	0x080601bc

080a17fc <socket_close>:
DYNALIB_FN(5, hal_socket, socket_receivefrom, sock_result_t(sock_handle_t, void*, socklen_t, uint32_t, sockaddr_t*, socklen_t*))
DYNALIB_FN(6, hal_socket, socket_send, sock_result_t(sock_handle_t, const void*, socklen_t))
DYNALIB_FN(7, hal_socket, socket_sendto, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, sockaddr_t*, socklen_t))
DYNALIB_FN(8, hal_socket, socket_close, sock_result_t(sock_handle_t))
 80a17fc:	b508      	push	{r3, lr}
 80a17fe:	4b02      	ldr	r3, [pc, #8]	; (80a1808 <socket_close+0xc>)
 80a1800:	681b      	ldr	r3, [r3, #0]
 80a1802:	6a1b      	ldr	r3, [r3, #32]
 80a1804:	9301      	str	r3, [sp, #4]
 80a1806:	bd08      	pop	{r3, pc}
 80a1808:	080601bc 	.word	0x080601bc

080a180c <socket_handle_invalid>:
DYNALIB_FN(9, hal_socket, socket_reset_blocking_call, sock_result_t(void))
DYNALIB_FN(10, hal_socket, socket_create_tcp_server, sock_result_t(uint16_t, network_interface_t))
DYNALIB_FN(11, hal_socket, socket_accept, sock_result_t(sock_handle_t))
DYNALIB_FN(12, hal_socket, socket_handle_invalid, sock_handle_t(void))
 80a180c:	b508      	push	{r3, lr}
 80a180e:	4b02      	ldr	r3, [pc, #8]	; (80a1818 <socket_handle_invalid+0xc>)
 80a1810:	681b      	ldr	r3, [r3, #0]
 80a1812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1814:	9301      	str	r3, [sp, #4]
 80a1816:	bd08      	pop	{r3, pc}
 80a1818:	080601bc 	.word	0x080601bc

080a181c <socket_send_ex>:
DYNALIB_FN(13, hal_socket, socket_join_multicast, sock_result_t(const HAL_IPAddress*, network_interface_t, socket_multicast_info_t*))
DYNALIB_FN(14, hal_socket, socket_leave_multicast, sock_result_t(const HAL_IPAddress*, network_interface_t, socket_multicast_info_t*))
DYNALIB_FN(15, hal_socket, socket_peer, sock_result_t(sock_handle_t, sock_peer_t*, void*))
DYNALIB_FN(16, hal_socket, socket_shutdown, sock_result_t(sock_handle_t, int))
DYNALIB_FN(17, hal_socket, socket_send_ex, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, system_tick_t, void*))
 80a181c:	b508      	push	{r3, lr}
 80a181e:	4b02      	ldr	r3, [pc, #8]	; (80a1828 <socket_send_ex+0xc>)
 80a1820:	681b      	ldr	r3, [r3, #0]
 80a1822:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a1824:	9301      	str	r3, [sp, #4]
 80a1826:	bd08      	pop	{r3, pc}
 80a1828:	080601bc 	.word	0x080601bc

080a182c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a182c:	b508      	push	{r3, lr}
 80a182e:	4b02      	ldr	r3, [pc, #8]	; (80a1838 <HAL_USB_USART_Init+0xc>)
 80a1830:	681b      	ldr	r3, [r3, #0]
 80a1832:	681b      	ldr	r3, [r3, #0]
 80a1834:	9301      	str	r3, [sp, #4]
 80a1836:	bd08      	pop	{r3, pc}
 80a1838:	080601d8 	.word	0x080601d8

080a183c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a183c:	b508      	push	{r3, lr}
 80a183e:	4b02      	ldr	r3, [pc, #8]	; (80a1848 <HAL_USB_USART_Begin+0xc>)
 80a1840:	681b      	ldr	r3, [r3, #0]
 80a1842:	685b      	ldr	r3, [r3, #4]
 80a1844:	9301      	str	r3, [sp, #4]
 80a1846:	bd08      	pop	{r3, pc}
 80a1848:	080601d8 	.word	0x080601d8

080a184c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a184c:	b508      	push	{r3, lr}
 80a184e:	4b02      	ldr	r3, [pc, #8]	; (80a1858 <HAL_USB_USART_Available_Data+0xc>)
 80a1850:	681b      	ldr	r3, [r3, #0]
 80a1852:	691b      	ldr	r3, [r3, #16]
 80a1854:	9301      	str	r3, [sp, #4]
 80a1856:	bd08      	pop	{r3, pc}
 80a1858:	080601d8 	.word	0x080601d8

080a185c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a185c:	b508      	push	{r3, lr}
 80a185e:	4b02      	ldr	r3, [pc, #8]	; (80a1868 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a1860:	681b      	ldr	r3, [r3, #0]
 80a1862:	695b      	ldr	r3, [r3, #20]
 80a1864:	9301      	str	r3, [sp, #4]
 80a1866:	bd08      	pop	{r3, pc}
 80a1868:	080601d8 	.word	0x080601d8

080a186c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a186c:	b508      	push	{r3, lr}
 80a186e:	4b02      	ldr	r3, [pc, #8]	; (80a1878 <HAL_USB_USART_Receive_Data+0xc>)
 80a1870:	681b      	ldr	r3, [r3, #0]
 80a1872:	699b      	ldr	r3, [r3, #24]
 80a1874:	9301      	str	r3, [sp, #4]
 80a1876:	bd08      	pop	{r3, pc}
 80a1878:	080601d8 	.word	0x080601d8

080a187c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a187c:	b508      	push	{r3, lr}
 80a187e:	4b02      	ldr	r3, [pc, #8]	; (80a1888 <HAL_USB_USART_Send_Data+0xc>)
 80a1880:	681b      	ldr	r3, [r3, #0]
 80a1882:	69db      	ldr	r3, [r3, #28]
 80a1884:	9301      	str	r3, [sp, #4]
 80a1886:	bd08      	pop	{r3, pc}
 80a1888:	080601d8 	.word	0x080601d8

080a188c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a188c:	b508      	push	{r3, lr}
 80a188e:	4b02      	ldr	r3, [pc, #8]	; (80a1898 <HAL_USB_USART_Flush_Data+0xc>)
 80a1890:	681b      	ldr	r3, [r3, #0]
 80a1892:	6a1b      	ldr	r3, [r3, #32]
 80a1894:	9301      	str	r3, [sp, #4]
 80a1896:	bd08      	pop	{r3, pc}
 80a1898:	080601d8 	.word	0x080601d8

080a189c <HAL_NET_SetNetWatchDog>:

DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
 80a189c:	b508      	push	{r3, lr}
 80a189e:	4b02      	ldr	r3, [pc, #8]	; (80a18a8 <HAL_NET_SetNetWatchDog+0xc>)
 80a18a0:	681b      	ldr	r3, [r3, #0]
 80a18a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a18a4:	9301      	str	r3, [sp, #4]
 80a18a6:	bd08      	pop	{r3, pc}
 80a18a8:	080601c0 	.word	0x080601c0

080a18ac <inet_gethostbyname>:
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a18ac:	b508      	push	{r3, lr}
 80a18ae:	4b02      	ldr	r3, [pc, #8]	; (80a18b8 <inet_gethostbyname+0xc>)
 80a18b0:	681b      	ldr	r3, [r3, #0]
 80a18b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a18b4:	9301      	str	r3, [sp, #4]
 80a18b6:	bd08      	pop	{r3, pc}
 80a18b8:	080601c0 	.word	0x080601c0

080a18bc <wlan_connected_info>:
DYNALIB_FN(24, hal_wlan, wlan_get_credentials, int(wlan_scan_result_t, void*))
DYNALIB_FN(25, hal_wlan, softap_set_application_page_handler, int(PageProvider* provider, void* reserved))
DYNALIB_FN(26, hal_wlan, wlan_restart, int(void*))
DYNALIB_FN(27, hal_wlan, wlan_set_hostname, int(const char*, void*))
DYNALIB_FN(28, hal_wlan, wlan_get_hostname, int(char*, size_t, void*))
DYNALIB_FN(29, hal_wlan, wlan_connected_info, int(void*, wlan_connected_info_t*, void*))
 80a18bc:	b508      	push	{r3, lr}
 80a18be:	4b02      	ldr	r3, [pc, #8]	; (80a18c8 <wlan_connected_info+0xc>)
 80a18c0:	681b      	ldr	r3, [r3, #0]
 80a18c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a18c4:	9301      	str	r3, [sp, #4]
 80a18c6:	bd08      	pop	{r3, pc}
 80a18c8:	080601c0 	.word	0x080601c0

080a18cc <LED_Signaling_Start>:

DYNALIB_BEGIN(services)

DYNALIB_FN(0, services, LED_SetRGBColor, void(uint32_t))
DYNALIB_FN(1, services, LED_SetSignalingColor, void(uint32_t))
DYNALIB_FN(2, services, LED_Signaling_Start, void(void))
 80a18cc:	b508      	push	{r3, lr}
 80a18ce:	4b02      	ldr	r3, [pc, #8]	; (80a18d8 <LED_Signaling_Start+0xc>)
 80a18d0:	681b      	ldr	r3, [r3, #0]
 80a18d2:	689b      	ldr	r3, [r3, #8]
 80a18d4:	9301      	str	r3, [sp, #4]
 80a18d6:	bd08      	pop	{r3, pc}
 80a18d8:	080201a8 	.word	0x080201a8

080a18dc <LED_Signaling_Stop>:
DYNALIB_FN(3, services, LED_Signaling_Stop, void(void))
 80a18dc:	b508      	push	{r3, lr}
 80a18de:	4b02      	ldr	r3, [pc, #8]	; (80a18e8 <LED_Signaling_Stop+0xc>)
 80a18e0:	681b      	ldr	r3, [r3, #0]
 80a18e2:	68db      	ldr	r3, [r3, #12]
 80a18e4:	9301      	str	r3, [sp, #4]
 80a18e6:	bd08      	pop	{r3, pc}
 80a18e8:	080201a8 	.word	0x080201a8

080a18ec <LED_RGB_IsOverRidden>:
DYNALIB_FN(4, services, LED_SetBrightness, void(uint8_t))
DYNALIB_FN(5, services, LED_RGB_Get, void(uint8_t*))
DYNALIB_FN(6, services, LED_RGB_IsOverRidden, bool(void))
 80a18ec:	b508      	push	{r3, lr}
 80a18ee:	4b02      	ldr	r3, [pc, #8]	; (80a18f8 <LED_RGB_IsOverRidden+0xc>)
 80a18f0:	681b      	ldr	r3, [r3, #0]
 80a18f2:	699b      	ldr	r3, [r3, #24]
 80a18f4:	9301      	str	r3, [sp, #4]
 80a18f6:	bd08      	pop	{r3, pc}
 80a18f8:	080201a8 	.word	0x080201a8

080a18fc <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
 80a18fc:	b508      	push	{r3, lr}
 80a18fe:	4b02      	ldr	r3, [pc, #8]	; (80a1908 <log_message+0xc>)
 80a1900:	681b      	ldr	r3, [r3, #0]
 80a1902:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80a1904:	9301      	str	r3, [sp, #4]
 80a1906:	bd08      	pop	{r3, pc}
 80a1908:	080201a8 	.word	0x080201a8

080a190c <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 80a190c:	b508      	push	{r3, lr}
 80a190e:	4b02      	ldr	r3, [pc, #8]	; (80a1918 <system_mode+0xc>)
 80a1910:	681b      	ldr	r3, [r3, #0]
 80a1912:	681b      	ldr	r3, [r3, #0]
 80a1914:	9301      	str	r3, [sp, #4]
 80a1916:	bd08      	pop	{r3, pc}
 80a1918:	080601a4 	.word	0x080601a4

080a191c <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a191c:	b508      	push	{r3, lr}
 80a191e:	4b02      	ldr	r3, [pc, #8]	; (80a1928 <set_system_mode+0xc>)
 80a1920:	681b      	ldr	r3, [r3, #0]
 80a1922:	685b      	ldr	r3, [r3, #4]
 80a1924:	9301      	str	r3, [sp, #4]
 80a1926:	bd08      	pop	{r3, pc}
 80a1928:	080601a4 	.word	0x080601a4

080a192c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a192c:	b508      	push	{r3, lr}
 80a192e:	4b02      	ldr	r3, [pc, #8]	; (80a1938 <system_delay_ms+0xc>)
 80a1930:	681b      	ldr	r3, [r3, #0]
 80a1932:	695b      	ldr	r3, [r3, #20]
 80a1934:	9301      	str	r3, [sp, #4]
 80a1936:	bd08      	pop	{r3, pc}
 80a1938:	080601a4 	.word	0x080601a4

080a193c <system_thread_get_state>:
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 80a193c:	b508      	push	{r3, lr}
 80a193e:	4b02      	ldr	r3, [pc, #8]	; (80a1948 <system_thread_get_state+0xc>)
 80a1940:	681b      	ldr	r3, [r3, #0]
 80a1942:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a1944:	9301      	str	r3, [sp, #4]
 80a1946:	bd08      	pop	{r3, pc}
 80a1948:	080601a4 	.word	0x080601a4

080a194c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a194c:	b508      	push	{r3, lr}
 80a194e:	4b03      	ldr	r3, [pc, #12]	; (80a195c <system_ctrl_set_app_request_handler+0x10>)
 80a1950:	681b      	ldr	r3, [r3, #0]
 80a1952:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a1956:	9301      	str	r3, [sp, #4]
 80a1958:	bd08      	pop	{r3, pc}
 80a195a:	0000      	.short	0x0000
 80a195c:	080601a4 	.word	0x080601a4

080a1960 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a1960:	b508      	push	{r3, lr}
 80a1962:	4b03      	ldr	r3, [pc, #12]	; (80a1970 <system_ctrl_set_result+0x10>)
 80a1964:	681b      	ldr	r3, [r3, #0]
 80a1966:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a196a:	9301      	str	r3, [sp, #4]
 80a196c:	bd08      	pop	{r3, pc}
 80a196e:	0000      	.short	0x0000
 80a1970:	080601a4 	.word	0x080601a4

080a1974 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1974:	b508      	push	{r3, lr}
 80a1976:	4b02      	ldr	r3, [pc, #8]	; (80a1980 <network_connect+0xc>)
 80a1978:	681b      	ldr	r3, [r3, #0]
 80a197a:	685b      	ldr	r3, [r3, #4]
 80a197c:	9301      	str	r3, [sp, #4]
 80a197e:	bd08      	pop	{r3, pc}
 80a1980:	080601c8 	.word	0x080601c8

080a1984 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a1984:	b508      	push	{r3, lr}
 80a1986:	4b02      	ldr	r3, [pc, #8]	; (80a1990 <network_connecting+0xc>)
 80a1988:	681b      	ldr	r3, [r3, #0]
 80a198a:	689b      	ldr	r3, [r3, #8]
 80a198c:	9301      	str	r3, [sp, #4]
 80a198e:	bd08      	pop	{r3, pc}
 80a1990:	080601c8 	.word	0x080601c8

080a1994 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a1994:	b508      	push	{r3, lr}
 80a1996:	4b02      	ldr	r3, [pc, #8]	; (80a19a0 <network_disconnect+0xc>)
 80a1998:	681b      	ldr	r3, [r3, #0]
 80a199a:	68db      	ldr	r3, [r3, #12]
 80a199c:	9301      	str	r3, [sp, #4]
 80a199e:	bd08      	pop	{r3, pc}
 80a19a0:	080601c8 	.word	0x080601c8

080a19a4 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a19a4:	b508      	push	{r3, lr}
 80a19a6:	4b02      	ldr	r3, [pc, #8]	; (80a19b0 <network_ready+0xc>)
 80a19a8:	681b      	ldr	r3, [r3, #0]
 80a19aa:	691b      	ldr	r3, [r3, #16]
 80a19ac:	9301      	str	r3, [sp, #4]
 80a19ae:	bd08      	pop	{r3, pc}
 80a19b0:	080601c8 	.word	0x080601c8

080a19b4 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a19b4:	b508      	push	{r3, lr}
 80a19b6:	4b02      	ldr	r3, [pc, #8]	; (80a19c0 <network_on+0xc>)
 80a19b8:	681b      	ldr	r3, [r3, #0]
 80a19ba:	695b      	ldr	r3, [r3, #20]
 80a19bc:	9301      	str	r3, [sp, #4]
 80a19be:	bd08      	pop	{r3, pc}
 80a19c0:	080601c8 	.word	0x080601c8

080a19c4 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a19c4:	b508      	push	{r3, lr}
 80a19c6:	4b02      	ldr	r3, [pc, #8]	; (80a19d0 <network_off+0xc>)
 80a19c8:	681b      	ldr	r3, [r3, #0]
 80a19ca:	699b      	ldr	r3, [r3, #24]
 80a19cc:	9301      	str	r3, [sp, #4]
 80a19ce:	bd08      	pop	{r3, pc}
 80a19d0:	080601c8 	.word	0x080601c8

080a19d4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a19d4:	b508      	push	{r3, lr}
 80a19d6:	4b02      	ldr	r3, [pc, #8]	; (80a19e0 <network_listen+0xc>)
 80a19d8:	681b      	ldr	r3, [r3, #0]
 80a19da:	69db      	ldr	r3, [r3, #28]
 80a19dc:	9301      	str	r3, [sp, #4]
 80a19de:	bd08      	pop	{r3, pc}
 80a19e0:	080601c8 	.word	0x080601c8

080a19e4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a19e4:	b508      	push	{r3, lr}
 80a19e6:	4b02      	ldr	r3, [pc, #8]	; (80a19f0 <network_listening+0xc>)
 80a19e8:	681b      	ldr	r3, [r3, #0]
 80a19ea:	6a1b      	ldr	r3, [r3, #32]
 80a19ec:	9301      	str	r3, [sp, #4]
 80a19ee:	bd08      	pop	{r3, pc}
 80a19f0:	080601c8 	.word	0x080601c8

080a19f4 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a19f4:	b508      	push	{r3, lr}
 80a19f6:	4b02      	ldr	r3, [pc, #8]	; (80a1a00 <network_set_listen_timeout+0xc>)
 80a19f8:	681b      	ldr	r3, [r3, #0]
 80a19fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a19fc:	9301      	str	r3, [sp, #4]
 80a19fe:	bd08      	pop	{r3, pc}
 80a1a00:	080601c8 	.word	0x080601c8

080a1a04 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a1a04:	b508      	push	{r3, lr}
 80a1a06:	4b02      	ldr	r3, [pc, #8]	; (80a1a10 <network_get_listen_timeout+0xc>)
 80a1a08:	681b      	ldr	r3, [r3, #0]
 80a1a0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a1a0c:	9301      	str	r3, [sp, #4]
 80a1a0e:	bd08      	pop	{r3, pc}
 80a1a10:	080601c8 	.word	0x080601c8

080a1a14 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
 80a1a14:	b508      	push	{r3, lr}
 80a1a16:	4b02      	ldr	r3, [pc, #8]	; (80a1a20 <spark_variable+0xc>)
 80a1a18:	681b      	ldr	r3, [r3, #0]
 80a1a1a:	681b      	ldr	r3, [r3, #0]
 80a1a1c:	9301      	str	r3, [sp, #4]
 80a1a1e:	bd08      	pop	{r3, pc}
 80a1a20:	080601cc 	.word	0x080601cc

080a1a24 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
 80a1a24:	b508      	push	{r3, lr}
 80a1a26:	4b02      	ldr	r3, [pc, #8]	; (80a1a30 <spark_function+0xc>)
 80a1a28:	681b      	ldr	r3, [r3, #0]
 80a1a2a:	685b      	ldr	r3, [r3, #4]
 80a1a2c:	9301      	str	r3, [sp, #4]
 80a1a2e:	bd08      	pop	{r3, pc}
 80a1a30:	080601cc 	.word	0x080601cc

080a1a34 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 80a1a34:	b508      	push	{r3, lr}
 80a1a36:	4b02      	ldr	r3, [pc, #8]	; (80a1a40 <spark_process+0xc>)
 80a1a38:	681b      	ldr	r3, [r3, #0]
 80a1a3a:	689b      	ldr	r3, [r3, #8]
 80a1a3c:	9301      	str	r3, [sp, #4]
 80a1a3e:	bd08      	pop	{r3, pc}
 80a1a40:	080601cc 	.word	0x080601cc

080a1a44 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
 80a1a44:	b508      	push	{r3, lr}
 80a1a46:	4b02      	ldr	r3, [pc, #8]	; (80a1a50 <spark_cloud_flag_connect+0xc>)
 80a1a48:	681b      	ldr	r3, [r3, #0]
 80a1a4a:	68db      	ldr	r3, [r3, #12]
 80a1a4c:	9301      	str	r3, [sp, #4]
 80a1a4e:	bd08      	pop	{r3, pc}
 80a1a50:	080601cc 	.word	0x080601cc

080a1a54 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 80a1a54:	b508      	push	{r3, lr}
 80a1a56:	4b02      	ldr	r3, [pc, #8]	; (80a1a60 <spark_cloud_flag_connected+0xc>)
 80a1a58:	681b      	ldr	r3, [r3, #0]
 80a1a5a:	695b      	ldr	r3, [r3, #20]
 80a1a5c:	9301      	str	r3, [sp, #4]
 80a1a5e:	bd08      	pop	{r3, pc}
 80a1a60:	080601cc 	.word	0x080601cc

080a1a64 <spark_sync_time_pending>:
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 80a1a64:	b508      	push	{r3, lr}
 80a1a66:	4b02      	ldr	r3, [pc, #8]	; (80a1a70 <spark_sync_time_pending+0xc>)
 80a1a68:	681b      	ldr	r3, [r3, #0]
 80a1a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1a6c:	9301      	str	r3, [sp, #4]
 80a1a6e:	bd08      	pop	{r3, pc}
 80a1a70:	080601cc 	.word	0x080601cc

080a1a74 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a1a74:	b508      	push	{r3, lr}
 80a1a76:	4b02      	ldr	r3, [pc, #8]	; (80a1a80 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a1a78:	681b      	ldr	r3, [r3, #0]
 80a1a7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a1a7c:	9301      	str	r3, [sp, #4]
 80a1a7e:	bd08      	pop	{r3, pc}
 80a1a80:	080601cc 	.word	0x080601cc

080a1a84 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a1a84:	b508      	push	{r3, lr}
 80a1a86:	4b02      	ldr	r3, [pc, #8]	; (80a1a90 <malloc+0xc>)
 80a1a88:	681b      	ldr	r3, [r3, #0]
 80a1a8a:	681b      	ldr	r3, [r3, #0]
 80a1a8c:	9301      	str	r3, [sp, #4]
 80a1a8e:	bd08      	pop	{r3, pc}
 80a1a90:	080601a0 	.word	0x080601a0

080a1a94 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a1a94:	b508      	push	{r3, lr}
 80a1a96:	4b02      	ldr	r3, [pc, #8]	; (80a1aa0 <free+0xc>)
 80a1a98:	681b      	ldr	r3, [r3, #0]
 80a1a9a:	685b      	ldr	r3, [r3, #4]
 80a1a9c:	9301      	str	r3, [sp, #4]
 80a1a9e:	bd08      	pop	{r3, pc}
 80a1aa0:	080601a0 	.word	0x080601a0

080a1aa4 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a1aa4:	b508      	push	{r3, lr}
 80a1aa6:	4b02      	ldr	r3, [pc, #8]	; (80a1ab0 <realloc+0xc>)
 80a1aa8:	681b      	ldr	r3, [r3, #0]
 80a1aaa:	689b      	ldr	r3, [r3, #8]
 80a1aac:	9301      	str	r3, [sp, #4]
 80a1aae:	bd08      	pop	{r3, pc}
 80a1ab0:	080601a0 	.word	0x080601a0

080a1ab4 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
 80a1ab4:	b508      	push	{r3, lr}
 80a1ab6:	4b02      	ldr	r3, [pc, #8]	; (80a1ac0 <siprintf+0xc>)
 80a1ab8:	681b      	ldr	r3, [r3, #0]
 80a1aba:	691b      	ldr	r3, [r3, #16]
 80a1abc:	9301      	str	r3, [sp, #4]
 80a1abe:	bd08      	pop	{r3, pc}
 80a1ac0:	080601a0 	.word	0x080601a0

080a1ac4 <siscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
 80a1ac4:	b508      	push	{r3, lr}
 80a1ac6:	4b02      	ldr	r3, [pc, #8]	; (80a1ad0 <siscanf+0xc>)
 80a1ac8:	681b      	ldr	r3, [r3, #0]
 80a1aca:	699b      	ldr	r3, [r3, #24]
 80a1acc:	9301      	str	r3, [sp, #4]
 80a1ace:	bd08      	pop	{r3, pc}
 80a1ad0:	080601a0 	.word	0x080601a0

080a1ad4 <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
 80a1ad4:	b508      	push	{r3, lr}
 80a1ad6:	4b02      	ldr	r3, [pc, #8]	; (80a1ae0 <snprintf+0xc>)
 80a1ad8:	681b      	ldr	r3, [r3, #0]
 80a1ada:	69db      	ldr	r3, [r3, #28]
 80a1adc:	9301      	str	r3, [sp, #4]
 80a1ade:	bd08      	pop	{r3, pc}
 80a1ae0:	080601a0 	.word	0x080601a0

080a1ae4 <sniprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
 80a1ae4:	b508      	push	{r3, lr}
 80a1ae6:	4b02      	ldr	r3, [pc, #8]	; (80a1af0 <sniprintf+0xc>)
 80a1ae8:	681b      	ldr	r3, [r3, #0]
 80a1aea:	6a1b      	ldr	r3, [r3, #32]
 80a1aec:	9301      	str	r3, [sp, #4]
 80a1aee:	bd08      	pop	{r3, pc}
 80a1af0:	080601a0 	.word	0x080601a0

080a1af4 <_malloc_r>:
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80a1af4:	b508      	push	{r3, lr}
 80a1af6:	4b02      	ldr	r3, [pc, #8]	; (80a1b00 <_malloc_r+0xc>)
 80a1af8:	681b      	ldr	r3, [r3, #0]
 80a1afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1afc:	9301      	str	r3, [sp, #4]
 80a1afe:	bd08      	pop	{r3, pc}
 80a1b00:	080601a0 	.word	0x080601a0

080a1b04 <_ZN14RecursiveMutex4lockEv>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
 80a1b04:	6800      	ldr	r0, [r0, #0]
 80a1b06:	f7ff bdbf 	b.w	80a1688 <os_mutex_recursive_lock>

080a1b0a <_ZN14RecursiveMutex6unlockEv>:
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
 80a1b0a:	6800      	ldr	r0, [r0, #0]
 80a1b0c:	f7ff bdc4 	b.w	80a1698 <os_mutex_recursive_unlock>

080a1b10 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a1b10:	b570      	push	{r4, r5, r6, lr}
 80a1b12:	4604      	mov	r4, r0
 80a1b14:	460e      	mov	r6, r1
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 80a1b16:	2500      	movs	r5, #0
 80a1b18:	f840 5f08 	str.w	r5, [r0, #8]!
    {
        os_mutex_recursive_create(&handle_);
 80a1b1c:	f7ff fda4 	bl	80a1668 <os_mutex_recursive_create>
{
    _spi = spi;
    HAL_SPI_Init(_spi);
 80a1b20:	4630      	mov	r0, r6
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
    _spi = spi;
 80a1b22:	7026      	strb	r6, [r4, #0]
    HAL_SPI_Init(_spi);
 80a1b24:	f7ff fd68 	bl	80a15f8 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80a1b28:	6065      	str	r5, [r4, #4]
}
 80a1b2a:	4620      	mov	r0, r4
 80a1b2c:	bd70      	pop	{r4, r5, r6, pc}

080a1b2e <_ZN8SPIClass5beginEt>:
        unlock();
    }
}

void SPIClass::begin(uint16_t ss_pin)
{
 80a1b2e:	b570      	push	{r4, r5, r6, lr}
 80a1b30:	4605      	mov	r5, r0
 80a1b32:	460e      	mov	r6, r1
  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
#elif PLATFORM_THREADING
    _mutex.lock();
 80a1b34:	f100 0408 	add.w	r4, r0, #8
 80a1b38:	4620      	mov	r0, r4
 80a1b3a:	f7ff ffe3 	bl	80a1b04 <_ZN14RecursiveMutex4lockEv>
    if (!lock())
    {
        HAL_SPI_Begin(_spi, ss_pin);
 80a1b3e:	7828      	ldrb	r0, [r5, #0]
 80a1b40:	4631      	mov	r1, r6
 80a1b42:	f7ff fd49 	bl	80a15d8 <HAL_SPI_Begin>
  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
#elif PLATFORM_THREADING
    _mutex.unlock();
 80a1b46:	4620      	mov	r0, r4
 80a1b48:	f7ff ffdf 	bl	80a1b0a <_ZN14RecursiveMutex6unlockEv>
 80a1b4c:	bd70      	pop	{r4, r5, r6, pc}

080a1b4e <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
 80a1b4e:	b508      	push	{r3, lr}
    return static_cast<byte>(HAL_SPI_Send_Receive_Data(_spi, _data));
 80a1b50:	7800      	ldrb	r0, [r0, #0]
 80a1b52:	f7ff fd49 	bl	80a15e8 <HAL_SPI_Send_Receive_Data>
}
 80a1b56:	b2c0      	uxtb	r0, r0
 80a1b58:	bd08      	pop	{r3, pc}

080a1b5a <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
 80a1b5a:	7800      	ldrb	r0, [r0, #0]
 80a1b5c:	f7ff bd54 	b.w	80a1608 <HAL_SPI_Is_Enabled>

080a1b60 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
 80a1b60:	b510      	push	{r4, lr}
 80a1b62:	4604      	mov	r4, r0
        if (wakeupSource_) {
 80a1b64:	6800      	ldr	r0, [r0, #0]
 80a1b66:	b118      	cbz	r0, 80a1b70 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
 80a1b68:	f7ff ff94 	bl	80a1a94 <free>
            wakeupSource_ = nullptr;
 80a1b6c:	2300      	movs	r3, #0
 80a1b6e:	6023      	str	r3, [r4, #0]
 80a1b70:	bd10      	pop	{r4, pc}

080a1b72 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80a1b72:	b510      	push	{r4, lr}
 80a1b74:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
 80a1b76:	f7ff fff3 	bl	80a1b60 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80a1b7a:	4620      	mov	r0, r4
 80a1b7c:	bd10      	pop	{r4, pc}

080a1b7e <_ZN11SystemClass5resetEm>:
    reset(0);
}

void SystemClass::reset(uint32_t data)
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
 80a1b7e:	4601      	mov	r1, r0
 80a1b80:	2200      	movs	r2, #0
 80a1b82:	208c      	movs	r0, #140	; 0x8c
 80a1b84:	f7ff bd68 	b.w	80a1658 <HAL_Core_System_Reset_Ex>

080a1b88 <_ZN11SystemClass5resetEv>:
    HAL_Core_Enter_Bootloader(persist);
}

void SystemClass::reset(void)
{
    reset(0);
 80a1b88:	2000      	movs	r0, #0
 80a1b8a:	f7ff bff8 	b.w	80a1b7e <_ZN11SystemClass5resetEm>
	...

080a1b90 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 80a1b90:	f64f 73ff 	movw	r3, #65535	; 0xffff
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80a1b94:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 80a1b96:	4c08      	ldr	r4, [pc, #32]	; (80a1bb8 <_GLOBAL__sub_I_System+0x28>)
 80a1b98:	2000      	movs	r0, #0
 80a1b9a:	6020      	str	r0, [r4, #0]
 80a1b9c:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 80a1b9e:	71a0      	strb	r0, [r4, #6]
 80a1ba0:	8120      	strh	r0, [r4, #8]
 80a1ba2:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a1ba4:	f7ff feba 	bl	80a191c <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
 80a1ba8:	4620      	mov	r0, r4
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80a1baa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
 80a1bae:	4a03      	ldr	r2, [pc, #12]	; (80a1bbc <_GLOBAL__sub_I_System+0x2c>)
 80a1bb0:	4903      	ldr	r1, [pc, #12]	; (80a1bc0 <_GLOBAL__sub_I_System+0x30>)
 80a1bb2:	f001 bb35 	b.w	80a3220 <__aeabi_atexit>
 80a1bb6:	bf00      	nop
 80a1bb8:	20000230 	.word	0x20000230
 80a1bbc:	200000bc 	.word	0x200000bc
 80a1bc0:	080a1b73 	.word	0x080a1b73

080a1bc4 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
 80a1bc4:	b510      	push	{r4, lr}
 80a1bc6:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
 80a1bc8:	f003 fc5c 	bl	80a5484 <strlen>
 80a1bcc:	3801      	subs	r0, #1
 80a1bce:	1823      	adds	r3, r4, r0
 80a1bd0:	4620      	mov	r0, r4
	while(i<j){
 80a1bd2:	4298      	cmp	r0, r3
 80a1bd4:	d206      	bcs.n	80a1be4 <_Z11str_reversePc+0x20>
		c = *i;
 80a1bd6:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
 80a1bd8:	7819      	ldrb	r1, [r3, #0]
 80a1bda:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
 80a1bde:	f803 2901 	strb.w	r2, [r3], #-1
__attribute__((weak)) void str_reverse(char* buffer){
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
	while(i<j){
 80a1be2:	e7f6      	b.n	80a1bd2 <_Z11str_reversePc+0xe>
 80a1be4:	bd10      	pop	{r4, pc}

080a1be6 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
 80a1be6:	b570      	push	{r4, r5, r6, lr}
 80a1be8:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
 80a1bea:	1e91      	subs	r1, r2, #2
 80a1bec:	2922      	cmp	r1, #34	; 0x22
 80a1bee:	d820      	bhi.n	80a1c32 <ultoa+0x4c>
 80a1bf0:	4625      	mov	r5, r4
 80a1bf2:	4629      	mov	r1, r5
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
 80a1bf4:	b910      	cbnz	r0, 80a1bfc <ultoa+0x16>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 80a1bf6:	4423      	add	r3, r4
            *ptr++ = '0';
 80a1bf8:	2230      	movs	r2, #48	; 0x30
 80a1bfa:	e00e      	b.n	80a1c1a <ultoa+0x34>
	div_t result;
	while(a){
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
 80a1bfc:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
 80a1c00:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
 80a1c04:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
 80a1c06:	2809      	cmp	r0, #9
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
            result.rem = a%radix;
            *ptr = result.rem;
 80a1c08:	f805 1b01 	strb.w	r1, [r5], #1
            if(result.rem<10){
                *ptr += '0';
 80a1c0c:	bf94      	ite	ls
 80a1c0e:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
 80a1c10:	3157      	addhi	r1, #87	; 0x57
 80a1c12:	f805 1c01 	strb.w	r1, [r5, #-1]
            }
            ++ptr;
            a = result.quot;
 80a1c16:	4630      	mov	r0, r6
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
 80a1c18:	e7eb      	b.n	80a1bf2 <ultoa+0xc>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 80a1c1a:	4299      	cmp	r1, r3
 80a1c1c:	d202      	bcs.n	80a1c24 <ultoa+0x3e>
            *ptr++ = '0';
 80a1c1e:	f801 2b01 	strb.w	r2, [r1], #1
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 80a1c22:	e7fa      	b.n	80a1c1a <ultoa+0x34>
            *ptr++ = '0';

	*ptr = '\0';
 80a1c24:	2300      	movs	r3, #0
	str_reverse(buffer);
 80a1c26:	4620      	mov	r0, r4
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';

	*ptr = '\0';
 80a1c28:	700b      	strb	r3, [r1, #0]
	str_reverse(buffer);
 80a1c2a:	f7ff ffcb 	bl	80a1bc4 <_Z11str_reversePc>
	return buffer;
 80a1c2e:	4620      	mov	r0, r4
 80a1c30:	bd70      	pop	{r4, r5, r6, pc}
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
	if(radix<2 || radix>36){
		return NULL;
 80a1c32:	2000      	movs	r0, #0
            *ptr++ = '0';

	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}
 80a1c34:	bd70      	pop	{r4, r5, r6, pc}

080a1c36 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 80a1c36:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
 80a1c38:	1e03      	subs	r3, r0, #0
	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 80a1c3a:	460c      	mov	r4, r1
 80a1c3c:	4615      	mov	r5, r2
	if(a<0){
 80a1c3e:	da0b      	bge.n	80a1c58 <itoa+0x22>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
 80a1c40:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
 80a1c44:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
 80a1c48:	bf14      	ite	ne
 80a1c4a:	4258      	negne	r0, r3
 80a1c4c:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
 80a1c4e:	2301      	movs	r3, #1
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
 80a1c50:	700a      	strb	r2, [r1, #0]
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
		ultoa((unsigned)v, buffer + 1, radix);
 80a1c52:	462a      	mov	r2, r5
 80a1c54:	4419      	add	r1, r3
 80a1c56:	e000      	b.n	80a1c5a <itoa+0x24>
	}else{
		ultoa(a, buffer, radix);
 80a1c58:	2301      	movs	r3, #1
 80a1c5a:	f7ff ffc4 	bl	80a1be6 <ultoa>
	}
	return buffer;
}
 80a1c5e:	4620      	mov	r0, r4
 80a1c60:	bd38      	pop	{r3, r4, r5, pc}

080a1c62 <utoa>:

__attribute__((weak)) char* utoa(unsigned a, char* buffer, int radix) {
 80a1c62:	b508      	push	{r3, lr}
    return ultoa(a, buffer, radix);
 80a1c64:	2301      	movs	r3, #1
 80a1c66:	f7ff ffbe 	bl	80a1be6 <ultoa>
}
 80a1c6a:	bd08      	pop	{r3, pc}

080a1c6c <_ZN9TCPClient5writeEh>:
        }
        return connected;
}

size_t TCPClient::write(uint8_t b)
{
 80a1c6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a1c6e:	ac02      	add	r4, sp, #8
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a1c70:	6803      	ldr	r3, [r0, #0]
        }
        return connected;
}

size_t TCPClient::write(uint8_t b)
{
 80a1c72:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a1c76:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 80a1c78:	2201      	movs	r2, #1
 80a1c7a:	f247 5330 	movw	r3, #30000	; 0x7530
 80a1c7e:	4621      	mov	r1, r4
 80a1c80:	47a8      	blx	r5
}
 80a1c82:	b003      	add	sp, #12
 80a1c84:	bd30      	pop	{r4, r5, pc}

080a1c86 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size)
{
 80a1c86:	b410      	push	{r4}
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a1c88:	6803      	ldr	r3, [r0, #0]
 80a1c8a:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80a1c8c:	f247 5330 	movw	r3, #30000	; 0x7530
 80a1c90:	46a4      	mov	ip, r4
}
 80a1c92:	bc10      	pop	{r4}
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size)
{
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a1c94:	4760      	bx	ip

080a1c96 <_ZN9TCPClient5writeEhm>:
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout)
{
 80a1c96:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a1c98:	ac02      	add	r4, sp, #8
    return write(&b, 1, timeout);
 80a1c9a:	6803      	ldr	r3, [r0, #0]
{
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout)
{
 80a1c9c:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, timeout);
 80a1ca0:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 80a1ca2:	4621      	mov	r1, r4
 80a1ca4:	4613      	mov	r3, r2
 80a1ca6:	2201      	movs	r2, #1
 80a1ca8:	47a8      	blx	r5
}
 80a1caa:	b003      	add	sp, #12
 80a1cac:	bd30      	pop	{r4, r5, pc}

080a1cae <_ZN9TCPClient5flushEv>:
  d_->offset = 0;
  d_->total = 0;
}

void TCPClient::flush()
{
 80a1cae:	4770      	bx	lr

080a1cb0 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
 80a1cb0:	4770      	bx	lr

080a1cb2 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
 80a1cb2:	2000      	movs	r0, #0
 80a1cb4:	4770      	bx	lr

080a1cb6 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
 80a1cb6:	b510      	push	{r4, lr}
 80a1cb8:	4604      	mov	r4, r0
 80a1cba:	2114      	movs	r1, #20
 80a1cbc:	f001 fabe 	bl	80a323c <_ZdlPvj>
 80a1cc0:	4620      	mov	r0, r4
 80a1cc2:	bd10      	pop	{r4, pc}

080a1cc4 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
 80a1cc4:	f7fe b9ed 	b.w	80a00a2 <_ZdlPv>

080a1cc8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.2.constprop.28>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
 80a1cc8:	b510      	push	{r4, lr}
 80a1cca:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
 80a1ccc:	6803      	ldr	r3, [r0, #0]
 80a1cce:	689b      	ldr	r3, [r3, #8]
 80a1cd0:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a1cd2:	68a3      	ldr	r3, [r4, #8]
 80a1cd4:	3b01      	subs	r3, #1
 80a1cd6:	60a3      	str	r3, [r4, #8]
 80a1cd8:	b92b      	cbnz	r3, 80a1ce6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.2.constprop.28+0x1e>
            _M_destroy();
 80a1cda:	6823      	ldr	r3, [r4, #0]
 80a1cdc:	4620      	mov	r0, r4
        }
    }
 80a1cde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
 80a1ce2:	68db      	ldr	r3, [r3, #12]
 80a1ce4:	4718      	bx	r3
 80a1ce6:	bd10      	pop	{r4, pc}

080a1ce8 <_ZN9TCPClient8remoteIPEv>:
{
   return (status()!=0);
}

IPAddress TCPClient::remoteIP()
{
 80a1ce8:	b570      	push	{r4, r5, r6, lr}

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 80a1cea:	4604      	mov	r4, r0
 80a1cec:	4606      	mov	r6, r0
 80a1cee:	694d      	ldr	r5, [r1, #20]
 80a1cf0:	4b04      	ldr	r3, [pc, #16]	; (80a1d04 <_ZN9TCPClient8remoteIPEv+0x1c>)
 80a1cf2:	358c      	adds	r5, #140	; 0x8c
 80a1cf4:	f844 3b04 	str.w	r3, [r4], #4
 80a1cf8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a1cfa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a1cfc:	682b      	ldr	r3, [r5, #0]
    return d_->remoteIP;
}
 80a1cfe:	4630      	mov	r0, r6
 80a1d00:	7023      	strb	r3, [r4, #0]
 80a1d02:	bd70      	pop	{r4, r5, r6, pc}
 80a1d04:	080a6494 	.word	0x080a6494

080a1d08 <_ZN9TCPClient4peekEv>:
        }
        return read;
}

int TCPClient::peek()
{
 80a1d08:	b510      	push	{r4, lr}
 80a1d0a:	6943      	ldr	r3, [r0, #20]
 80a1d0c:	4604      	mov	r4, r0
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
 80a1d0e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a1d12:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80a1d16:	429a      	cmp	r2, r3
 80a1d18:	d005      	beq.n	80a1d26 <_ZN9TCPClient4peekEv+0x1e>
 80a1d1a:	6962      	ldr	r2, [r4, #20]
 80a1d1c:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 80a1d20:	4413      	add	r3, r2
 80a1d22:	7918      	ldrb	r0, [r3, #4]
 80a1d24:	bd10      	pop	{r4, pc}
 80a1d26:	6803      	ldr	r3, [r0, #0]
 80a1d28:	691b      	ldr	r3, [r3, #16]
 80a1d2a:	4798      	blx	r3
 80a1d2c:	2800      	cmp	r0, #0
 80a1d2e:	d1f4      	bne.n	80a1d1a <_ZN9TCPClient4peekEv+0x12>
 80a1d30:	f04f 30ff 	mov.w	r0, #4294967295
}
 80a1d34:	bd10      	pop	{r4, pc}

080a1d36 <_ZN9TCPClient4readEv>:
    avail = bufferCount();
    return avail;
}

int TCPClient::read()
{
 80a1d36:	b510      	push	{r4, lr}
 80a1d38:	6943      	ldr	r3, [r0, #20]
 80a1d3a:	4604      	mov	r4, r0
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
 80a1d3c:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a1d40:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80a1d44:	429a      	cmp	r2, r3
 80a1d46:	d008      	beq.n	80a1d5a <_ZN9TCPClient4readEv+0x24>
 80a1d48:	6962      	ldr	r2, [r4, #20]
 80a1d4a:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 80a1d4e:	1c59      	adds	r1, r3, #1
 80a1d50:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
 80a1d54:	4413      	add	r3, r2
 80a1d56:	7918      	ldrb	r0, [r3, #4]
 80a1d58:	bd10      	pop	{r4, pc}
 80a1d5a:	6803      	ldr	r3, [r0, #0]
 80a1d5c:	691b      	ldr	r3, [r3, #16]
 80a1d5e:	4798      	blx	r3
 80a1d60:	2800      	cmp	r0, #0
 80a1d62:	d1f1      	bne.n	80a1d48 <_ZN9TCPClient4readEv+0x12>
 80a1d64:	f04f 30ff 	mov.w	r0, #4294967295
}
 80a1d68:	bd10      	pop	{r4, pc}

080a1d6a <_ZN9TCPClient4readEPhj>:

int TCPClient::read(uint8_t *buffer, size_t size)
{
 80a1d6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1d6c:	6943      	ldr	r3, [r0, #20]
 80a1d6e:	4617      	mov	r7, r2
        int read = -1;
        if (bufferCount() || available())
 80a1d70:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a1d74:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
{
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size)
{
 80a1d78:	4605      	mov	r5, r0
        int read = -1;
        if (bufferCount() || available())
 80a1d7a:	429a      	cmp	r2, r3
{
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size)
{
 80a1d7c:	460e      	mov	r6, r1
        int read = -1;
        if (bufferCount() || available())
 80a1d7e:	d106      	bne.n	80a1d8e <_ZN9TCPClient4readEPhj+0x24>
 80a1d80:	6803      	ldr	r3, [r0, #0]
 80a1d82:	691b      	ldr	r3, [r3, #16]
 80a1d84:	4798      	blx	r3
 80a1d86:	b910      	cbnz	r0, 80a1d8e <_ZN9TCPClient4readEPhj+0x24>
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size)
{
        int read = -1;
 80a1d88:	f04f 34ff 	mov.w	r4, #4294967295
 80a1d8c:	e014      	b.n	80a1db8 <_ZN9TCPClient4readEPhj+0x4e>
 80a1d8e:	6969      	ldr	r1, [r5, #20]
        if (bufferCount() || available())
        {
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80a1d90:	4630      	mov	r0, r6
    return ret;
}

int TCPClient::bufferCount()
{
  return d_->total - d_->offset;
 80a1d92:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
 80a1d96:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
{
        int read = -1;
        if (bufferCount() || available())
        {
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80a1d9a:	4419      	add	r1, r3
    return ret;
}

int TCPClient::bufferCount()
{
  return d_->total - d_->offset;
 80a1d9c:	1ae4      	subs	r4, r4, r3
int TCPClient::read(uint8_t *buffer, size_t size)
{
        int read = -1;
        if (bufferCount() || available())
        {
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
 80a1d9e:	42bc      	cmp	r4, r7
 80a1da0:	bf28      	it	cs
 80a1da2:	463c      	movcs	r4, r7
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80a1da4:	3104      	adds	r1, #4
 80a1da6:	4622      	mov	r2, r4
 80a1da8:	f002 fe0a 	bl	80a49c0 <memcpy>
 80a1dac:	696a      	ldr	r2, [r5, #20]
          d_->offset += read;
 80a1dae:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 80a1db2:	4423      	add	r3, r4
 80a1db4:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
        }
        return read;
}
 80a1db8:	4620      	mov	r0, r4
 80a1dba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1dbc <_ZN9TCPClient12flush_bufferEv>:
{
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
}

void TCPClient::flush_buffer()
{
 80a1dbc:	6942      	ldr	r2, [r0, #20]
  d_->offset = 0;
 80a1dbe:	2300      	movs	r3, #0
 80a1dc0:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
 80a1dc4:	6942      	ldr	r2, [r0, #20]
  d_->total = 0;
 80a1dc6:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
 80a1dca:	4770      	bx	lr

080a1dcc <_ZN9TCPClient9availableEv>:
{
  return d_->total - d_->offset;
}

int TCPClient::available()
{
 80a1dcc:	b538      	push	{r3, r4, r5, lr}
 80a1dce:	6942      	ldr	r2, [r0, #20]
 80a1dd0:	4604      	mov	r4, r0
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total))
 80a1dd2:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 80a1dd6:	b11b      	cbz	r3, 80a1de0 <_ZN9TCPClient9availableEv+0x14>
 80a1dd8:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
 80a1ddc:	429a      	cmp	r2, r3
 80a1dde:	d00c      	beq.n	80a1dfa <_ZN9TCPClient9availableEv+0x2e>
    {
        flush_buffer();
    }

    if(Network.from(nif).ready() && isOpen(d_->sock))
 80a1de0:	6920      	ldr	r0, [r4, #16]
 80a1de2:	f001 f933 	bl	80a304c <_ZN5spark12NetworkClass4fromEm>
 80a1de6:	6803      	ldr	r3, [r0, #0]
 80a1de8:	68db      	ldr	r3, [r3, #12]
 80a1dea:	4798      	blx	r3
 80a1dec:	b318      	cbz	r0, 80a1e36 <_ZN9TCPClient9availableEv+0x6a>
 80a1dee:	6963      	ldr	r3, [r4, #20]

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 80a1df0:	6818      	ldr	r0, [r3, #0]
 80a1df2:	f7ff fce3 	bl	80a17bc <socket_handle_valid>
    if (d_->total && (d_->offset == d_->total))
    {
        flush_buffer();
    }

    if(Network.from(nif).ready() && isOpen(d_->sock))
 80a1df6:	b918      	cbnz	r0, 80a1e00 <_ZN9TCPClient9availableEv+0x34>
 80a1df8:	e01d      	b.n	80a1e36 <_ZN9TCPClient9availableEv+0x6a>
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total))
    {
        flush_buffer();
 80a1dfa:	f7ff ffdf 	bl	80a1dbc <_ZN9TCPClient12flush_bufferEv>
 80a1dfe:	e7ef      	b.n	80a1de0 <_ZN9TCPClient9availableEv+0x14>
 80a1e00:	6960      	ldr	r0, [r4, #20]
    }

    if(Network.from(nif).ready() && isOpen(d_->sock))
    {
        // Have room
        if ( d_->total < arraySize(d_->buffer))
 80a1e02:	f8b0 1086 	ldrh.w	r1, [r0, #134]	; 0x86
 80a1e06:	297f      	cmp	r1, #127	; 0x7f
 80a1e08:	d815      	bhi.n	80a1e36 <_ZN9TCPClient9availableEv+0x6a>
        {
            int ret = socket_receive(d_->sock, d_->buffer + d_->total , arraySize(d_->buffer)-d_->total, 0);
 80a1e0a:	1d05      	adds	r5, r0, #4
 80a1e0c:	f1c1 0280 	rsb	r2, r1, #128	; 0x80
 80a1e10:	2300      	movs	r3, #0
 80a1e12:	4429      	add	r1, r5
 80a1e14:	6800      	ldr	r0, [r0, #0]
 80a1e16:	f7ff fce9 	bl	80a17ec <socket_receive>
            if (ret > 0)
 80a1e1a:	2800      	cmp	r0, #0
 80a1e1c:	dd0b      	ble.n	80a1e36 <_ZN9TCPClient9availableEv+0x6a>
 80a1e1e:	6963      	ldr	r3, [r4, #20]
            {
                DEBUG("recv(=%d)",ret);
                if (d_->total == 0) d_->offset = 0;
 80a1e20:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a1e24:	b90a      	cbnz	r2, 80a1e2a <_ZN9TCPClient9availableEv+0x5e>
 80a1e26:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 80a1e2a:	6962      	ldr	r2, [r4, #20]
                d_->total += ret;
 80a1e2c:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 80a1e30:	4418      	add	r0, r3
 80a1e32:	f8a2 0086 	strh.w	r0, [r2, #134]	; 0x86
 80a1e36:	6962      	ldr	r2, [r4, #20]
            }
        } // Have Space
    } // WiFi.ready() && isOpen(d_->sock)
    avail = bufferCount();
    return avail;
 80a1e38:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 80a1e3c:	f8b2 0084 	ldrh.w	r0, [r2, #132]	; 0x84
 80a1e40:	1a18      	subs	r0, r3, r0
}
 80a1e42:	bd38      	pop	{r3, r4, r5, pc}

080a1e44 <_ZN9TCPClient4stopEv>:
{
}


void TCPClient::stop()
{
 80a1e44:	b538      	push	{r3, r4, r5, lr}
  // This log line pollutes the log too much
  // DEBUG("sock %d closesocket", d_->sock);

  if (isOpen(d_->sock))
 80a1e46:	6943      	ldr	r3, [r0, #20]
{
}


void TCPClient::stop()
{
 80a1e48:	4604      	mov	r4, r0

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 80a1e4a:	6818      	ldr	r0, [r3, #0]
 80a1e4c:	f7ff fcb6 	bl	80a17bc <socket_handle_valid>
void TCPClient::stop()
{
  // This log line pollutes the log too much
  // DEBUG("sock %d closesocket", d_->sock);

  if (isOpen(d_->sock))
 80a1e50:	b118      	cbz	r0, 80a1e5a <_ZN9TCPClient4stopEv+0x16>
      socket_close(d_->sock);
 80a1e52:	6963      	ldr	r3, [r4, #20]
 80a1e54:	6818      	ldr	r0, [r3, #0]
 80a1e56:	f7ff fcd1 	bl	80a17fc <socket_close>
 80a1e5a:	6965      	ldr	r5, [r4, #20]
  d_->sock = socket_handle_invalid();
 80a1e5c:	f7ff fcd6 	bl	80a180c <socket_handle_invalid>
 80a1e60:	6028      	str	r0, [r5, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a1e62:	6960      	ldr	r0, [r4, #20]
 80a1e64:	2211      	movs	r2, #17
 80a1e66:	2100      	movs	r1, #0
 80a1e68:	308c      	adds	r0, #140	; 0x8c
 80a1e6a:	f002 fdb4 	bl	80a49d6 <memset>
  d_->remoteIP.clear();
  flush_buffer();
 80a1e6e:	4620      	mov	r0, r4
}
 80a1e70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

  if (isOpen(d_->sock))
      socket_close(d_->sock);
  d_->sock = socket_handle_invalid();
  d_->remoteIP.clear();
  flush_buffer();
 80a1e74:	f7ff bfa2 	b.w	80a1dbc <_ZN9TCPClient12flush_bufferEv>

080a1e78 <_ZN9TCPClient7connectE9IPAddresstm>:
    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif)
{
 80a1e78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a1e7c:	461f      	mov	r7, r3
    stop();
 80a1e7e:	6803      	ldr	r3, [r0, #0]
    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif)
{
 80a1e80:	b08a      	sub	sp, #40	; 0x28
    stop();
 80a1e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif)
{
 80a1e84:	4606      	mov	r6, r0
 80a1e86:	460c      	mov	r4, r1
 80a1e88:	4615      	mov	r5, r2
    stop();
 80a1e8a:	4798      	blx	r3
        int connected = 0;
        if(Network.from(nif).ready())
 80a1e8c:	4638      	mov	r0, r7
 80a1e8e:	f001 f8dd 	bl	80a304c <_ZN5spark12NetworkClass4fromEm>
 80a1e92:	6803      	ldr	r3, [r0, #0]
 80a1e94:	68db      	ldr	r3, [r3, #12]
 80a1e96:	4798      	blx	r3
 80a1e98:	2800      	cmp	r0, #0
 80a1e9a:	d056      	beq.n	80a1f4a <_ZN9TCPClient7connectE9IPAddresstm+0xd2>
        {
          sockaddr_t tSocketAddr;
          d_->sock = socket_create(AF_INET, SOCK_STREAM, IPPROTO_TCP, port, nif);
 80a1e9c:	9700      	str	r7, [sp, #0]
 80a1e9e:	462b      	mov	r3, r5
 80a1ea0:	2206      	movs	r2, #6
 80a1ea2:	2101      	movs	r1, #1
 80a1ea4:	2002      	movs	r0, #2
 80a1ea6:	f8d6 8014 	ldr.w	r8, [r6, #20]
 80a1eaa:	f7ff fc8f 	bl	80a17cc <socket_create>
          LOG(TRACE, "TCPClient socket=%x", d_->sock);
 80a1eae:	2320      	movs	r3, #32
    stop();
        int connected = 0;
        if(Network.from(nif).ready())
        {
          sockaddr_t tSocketAddr;
          d_->sock = socket_create(AF_INET, SOCK_STREAM, IPPROTO_TCP, port, nif);
 80a1eb0:	f8c8 0000 	str.w	r0, [r8]
          LOG(TRACE, "TCPClient socket=%x", d_->sock);
 80a1eb4:	2700      	movs	r7, #0
 80a1eb6:	9302      	str	r3, [sp, #8]
 80a1eb8:	6973      	ldr	r3, [r6, #20]
 80a1eba:	9703      	str	r7, [sp, #12]
 80a1ebc:	681b      	ldr	r3, [r3, #0]
 80a1ebe:	2001      	movs	r0, #1
 80a1ec0:	9301      	str	r3, [sp, #4]
 80a1ec2:	4b23      	ldr	r3, [pc, #140]	; (80a1f50 <_ZN9TCPClient7connectE9IPAddresstm+0xd8>)
 80a1ec4:	aa02      	add	r2, sp, #8
 80a1ec6:	9300      	str	r3, [sp, #0]
 80a1ec8:	4922      	ldr	r1, [pc, #136]	; (80a1f54 <_ZN9TCPClient7connectE9IPAddresstm+0xdc>)
 80a1eca:	463b      	mov	r3, r7
 80a1ecc:	f7ff fd16 	bl	80a18fc <log_message>

          if (socket_handle_valid(d_->sock))
 80a1ed0:	6973      	ldr	r3, [r6, #20]
 80a1ed2:	6818      	ldr	r0, [r3, #0]
 80a1ed4:	f7ff fc72 	bl	80a17bc <socket_handle_valid>
 80a1ed8:	2800      	cmp	r0, #0
 80a1eda:	d036      	beq.n	80a1f4a <_ZN9TCPClient7connectE9IPAddresstm+0xd2>
          {
            flush_buffer();
 80a1edc:	4630      	mov	r0, r6
 80a1ede:	f7ff ff6d 	bl	80a1dbc <_ZN9TCPClient12flush_bufferEv>

            tSocketAddr.sa_family = AF_INET;
 80a1ee2:	2302      	movs	r3, #2
 80a1ee4:	f8ad 3008 	strh.w	r3, [sp, #8]

            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80a1ee8:	0a2b      	lsrs	r3, r5, #8
 80a1eea:	f88d 300a 	strb.w	r3, [sp, #10]
            tSocketAddr.sa_data[1] = (port & 0x00FF);

            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 80a1eee:	79e3      	ldrb	r3, [r4, #7]
            tSocketAddr.sa_data[3] = ip[1];
            tSocketAddr.sa_data[4] = ip[2];
            tSocketAddr.sa_data[5] = ip[3];


            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a1ef0:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
            tSocketAddr.sa_family = AF_INET;

            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
            tSocketAddr.sa_data[1] = (port & 0x00FF);

            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 80a1ef4:	f88d 300c 	strb.w	r3, [sp, #12]
            tSocketAddr.sa_data[3] = ip[1];
 80a1ef8:	79a3      	ldrb	r3, [r4, #6]
            flush_buffer();

            tSocketAddr.sa_family = AF_INET;

            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
            tSocketAddr.sa_data[1] = (port & 0x00FF);
 80a1efa:	f88d 500b 	strb.w	r5, [sp, #11]

            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
            tSocketAddr.sa_data[3] = ip[1];
 80a1efe:	f88d 300d 	strb.w	r3, [sp, #13]
            tSocketAddr.sa_data[4] = ip[2];
 80a1f02:	7963      	ldrb	r3, [r4, #5]
 80a1f04:	f88d 300e 	strb.w	r3, [sp, #14]
            tSocketAddr.sa_data[5] = ip[3];
 80a1f08:	f814 3f04 	ldrb.w	r3, [r4, #4]!
 80a1f0c:	f88d 300f 	strb.w	r3, [sp, #15]


            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a1f10:	f7ff fcc4 	bl	80a189c <HAL_NET_SetNetWatchDog>
            DEBUG("sock %d connect",d_->sock);
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80a1f14:	6973      	ldr	r3, [r6, #20]
            tSocketAddr.sa_data[3] = ip[1];
            tSocketAddr.sa_data[4] = ip[2];
            tSocketAddr.sa_data[5] = ip[3];


            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a1f16:	4605      	mov	r5, r0
            DEBUG("sock %d connect",d_->sock);
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80a1f18:	2210      	movs	r2, #16
 80a1f1a:	a902      	add	r1, sp, #8
 80a1f1c:	6818      	ldr	r0, [r3, #0]
 80a1f1e:	f7ff fc5d 	bl	80a17dc <socket_connect>
 80a1f22:	4680      	mov	r8, r0
            DEBUG("sock %d connected=%d",d_->sock, connected);
            HAL_NET_SetNetWatchDog(ot);
 80a1f24:	4628      	mov	r0, r5
 80a1f26:	f7ff fcb9 	bl	80a189c <HAL_NET_SetNetWatchDog>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 80a1f2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a1f2c:	6975      	ldr	r5, [r6, #20]
 80a1f2e:	358c      	adds	r5, #140	; 0x8c
 80a1f30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a1f32:	6823      	ldr	r3, [r4, #0]
 80a1f34:	702b      	strb	r3, [r5, #0]
            d_->remoteIP = ip;
            if(!connected)
 80a1f36:	f1b8 0f00 	cmp.w	r8, #0
 80a1f3a:	d005      	beq.n	80a1f48 <_ZN9TCPClient7connectE9IPAddresstm+0xd0>
            {
                stop();
 80a1f3c:	6833      	ldr	r3, [r6, #0]
 80a1f3e:	4630      	mov	r0, r6
 80a1f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1f42:	4798      	blx	r3
 80a1f44:	4638      	mov	r0, r7
 80a1f46:	e000      	b.n	80a1f4a <_ZN9TCPClient7connectE9IPAddresstm+0xd2>
            DEBUG("sock %d connect",d_->sock);
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
            DEBUG("sock %d connected=%d",d_->sock, connected);
            HAL_NET_SetNetWatchDog(ot);
            d_->remoteIP = ip;
            if(!connected)
 80a1f48:	2001      	movs	r0, #1
                stop();
            }
          }
        }
        return connected;
}
 80a1f4a:	b00a      	add	sp, #40	; 0x28
 80a1f4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a1f50:	080a6373 	.word	0x080a6373
 80a1f54:	080a636c 	.word	0x080a636c

080a1f58 <_ZN9TCPClient6statusEv>:
  }
  return rv;
}

uint8_t TCPClient::status()
{
 80a1f58:	b510      	push	{r4, lr}
  return (isOpen(d_->sock) && Network.from(nif).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80a1f5a:	6943      	ldr	r3, [r0, #20]
  }
  return rv;
}

uint8_t TCPClient::status()
{
 80a1f5c:	4604      	mov	r4, r0

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 80a1f5e:	6818      	ldr	r0, [r3, #0]
 80a1f60:	f7ff fc2c 	bl	80a17bc <socket_handle_valid>
  return rv;
}

uint8_t TCPClient::status()
{
  return (isOpen(d_->sock) && Network.from(nif).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80a1f64:	b908      	cbnz	r0, 80a1f6a <_ZN9TCPClient6statusEv+0x12>
 80a1f66:	2000      	movs	r0, #0
 80a1f68:	bd10      	pop	{r4, pc}
 80a1f6a:	6920      	ldr	r0, [r4, #16]
 80a1f6c:	f001 f86e 	bl	80a304c <_ZN5spark12NetworkClass4fromEm>
 80a1f70:	6803      	ldr	r3, [r0, #0]
 80a1f72:	68db      	ldr	r3, [r3, #12]
 80a1f74:	4798      	blx	r3
 80a1f76:	2800      	cmp	r0, #0
 80a1f78:	d0f5      	beq.n	80a1f66 <_ZN9TCPClient6statusEv+0xe>
 80a1f7a:	6963      	ldr	r3, [r4, #20]
 80a1f7c:	6818      	ldr	r0, [r3, #0]
 80a1f7e:	f7ff fc15 	bl	80a17ac <socket_active_status>
 80a1f82:	fab0 f080 	clz	r0, r0
 80a1f86:	0940      	lsrs	r0, r0, #5
}
 80a1f88:	bd10      	pop	{r4, pc}

080a1f8a <_ZN9TCPClient5writeEPKhjm>:
{
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout)
{
 80a1f8a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}

    size_t printNumber(unsigned long, uint8_t);
    size_t printNumber(unsigned long long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
 80a1f8e:	2500      	movs	r5, #0
 80a1f90:	6045      	str	r5, [r0, #4]
 80a1f92:	4604      	mov	r4, r0
 80a1f94:	460e      	mov	r6, r1
 80a1f96:	4617      	mov	r7, r2
 80a1f98:	4698      	mov	r8, r3
    clearWriteError();
    int ret = status() ? socket_send_ex(d_->sock, buffer, size, 0, timeout, nullptr) : -1;
 80a1f9a:	f7ff ffdd 	bl	80a1f58 <_ZN9TCPClient6statusEv>
 80a1f9e:	b160      	cbz	r0, 80a1fba <_ZN9TCPClient5writeEPKhjm+0x30>
 80a1fa0:	6960      	ldr	r0, [r4, #20]
 80a1fa2:	9501      	str	r5, [sp, #4]
 80a1fa4:	f8cd 8000 	str.w	r8, [sp]
 80a1fa8:	462b      	mov	r3, r5
 80a1faa:	463a      	mov	r2, r7
 80a1fac:	4631      	mov	r1, r6
 80a1fae:	6800      	ldr	r0, [r0, #0]
 80a1fb0:	f7ff fc34 	bl	80a181c <socket_send_ex>
    if (ret < 0) {
 80a1fb4:	2800      	cmp	r0, #0
 80a1fb6:	da03      	bge.n	80a1fc0 <_ZN9TCPClient5writeEPKhjm+0x36>
 80a1fb8:	e001      	b.n	80a1fbe <_ZN9TCPClient5writeEPKhjm+0x34>
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout)
{
    clearWriteError();
    int ret = status() ? socket_send_ex(d_->sock, buffer, size, 0, timeout, nullptr) : -1;
 80a1fba:	f04f 30ff 	mov.w	r0, #4294967295
 80a1fbe:	6060      	str	r0, [r4, #4]

    /*
     * FIXME: We should not be returning negative numbers here
     */
    return ret;
}
 80a1fc0:	b002      	add	sp, #8
 80a1fc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a1fc6 <_ZN9TCPClient9connectedEv>:
  d_->remoteIP.clear();
  flush_buffer();
}

uint8_t TCPClient::connected()
{
 80a1fc6:	b538      	push	{r3, r4, r5, lr}
 80a1fc8:	4604      	mov	r4, r0
  // Wlan up, open and not in CLOSE_WAIT or data still in the local buffer
  bool rv = (status() || bufferCount());
 80a1fca:	f7ff ffc5 	bl	80a1f58 <_ZN9TCPClient6statusEv>
 80a1fce:	bb00      	cbnz	r0, 80a2012 <_ZN9TCPClient9connectedEv+0x4c>
 80a1fd0:	6963      	ldr	r3, [r4, #20]
 80a1fd2:	f8b3 1086 	ldrh.w	r1, [r3, #134]	; 0x86
 80a1fd6:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 80a1fda:	4291      	cmp	r1, r2
 80a1fdc:	d119      	bne.n	80a2012 <_ZN9TCPClient9connectedEv+0x4c>

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 80a1fde:	6818      	ldr	r0, [r3, #0]
 80a1fe0:	f7ff fbec 	bl	80a17bc <socket_handle_valid>
uint8_t TCPClient::connected()
{
  // Wlan up, open and not in CLOSE_WAIT or data still in the local buffer
  bool rv = (status() || bufferCount());
  // no data in the local buffer, Socket open but my be in CLOSE_WAIT yet the CC3000 may have data in its buffer
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
 80a1fe4:	b128      	cbz	r0, 80a1ff2 <_ZN9TCPClient9connectedEv+0x2c>
 80a1fe6:	6963      	ldr	r3, [r4, #20]
 80a1fe8:	6818      	ldr	r0, [r3, #0]
 80a1fea:	f7ff fbdf 	bl	80a17ac <socket_active_status>
 80a1fee:	2801      	cmp	r0, #1
 80a1ff0:	d001      	beq.n	80a1ff6 <_ZN9TCPClient9connectedEv+0x30>
}

uint8_t TCPClient::connected()
{
  // Wlan up, open and not in CLOSE_WAIT or data still in the local buffer
  bool rv = (status() || bufferCount());
 80a1ff2:	2500      	movs	r5, #0
 80a1ff4:	e00e      	b.n	80a2014 <_ZN9TCPClient9connectedEv+0x4e>
  // no data in the local buffer, Socket open but my be in CLOSE_WAIT yet the CC3000 may have data in its buffer
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
    {
      rv = available(); // Try CC3000
 80a1ff6:	6823      	ldr	r3, [r4, #0]
 80a1ff8:	4620      	mov	r0, r4
 80a1ffa:	691b      	ldr	r3, [r3, #16]
 80a1ffc:	4798      	blx	r3
 80a1ffe:	2800      	cmp	r0, #0
 80a2000:	bf14      	ite	ne
 80a2002:	2501      	movne	r5, #1
 80a2004:	2500      	moveq	r5, #0
      if (!rv) {        // No more Data and CLOSE_WAIT
 80a2006:	d105      	bne.n	80a2014 <_ZN9TCPClient9connectedEv+0x4e>
          DEBUG("calling .stop(), no more data, in CLOSE_WAIT");
          stop();       // Close our side
 80a2008:	6823      	ldr	r3, [r4, #0]
 80a200a:	4620      	mov	r0, r4
 80a200c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a200e:	4798      	blx	r3
 80a2010:	e000      	b.n	80a2014 <_ZN9TCPClient9connectedEv+0x4e>
 80a2012:	2501      	movs	r5, #1
      }
  }
  return rv;
}
 80a2014:	4628      	mov	r0, r5
 80a2016:	bd38      	pop	{r3, r4, r5, pc}

080a2018 <_ZN9TCPClientcvbEv>:
{
  return (isOpen(d_->sock) && Network.from(nif).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
}

TCPClient::operator bool()
{
 80a2018:	b508      	push	{r3, lr}
   return (status()!=0);
 80a201a:	f7ff ff9d 	bl	80a1f58 <_ZN9TCPClient6statusEv>
}
 80a201e:	3000      	adds	r0, #0
 80a2020:	bf18      	it	ne
 80a2022:	2001      	movne	r0, #1
 80a2024:	bd08      	pop	{r3, pc}

080a2026 <_ZN9TCPClient4DataC1Em>:
IPAddress TCPClient::remoteIP()
{
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
 80a2026:	b510      	push	{r4, lr}
 80a2028:	4604      	mov	r4, r0
        : sock(sock),
          offset(0),
          total(0) {
 80a202a:	2300      	movs	r3, #0
 80a202c:	6001      	str	r1, [r0, #0]
 80a202e:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 80a2032:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
 80a2036:	3088      	adds	r0, #136	; 0x88
 80a2038:	f000 fcac 	bl	80a2994 <_ZN9IPAddressC1Ev>
}
 80a203c:	4620      	mov	r0, r4
 80a203e:	bd10      	pop	{r4, pc}

080a2040 <_ZN9TCPClientC1Em>:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a2040:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
{
}

TCPClient::TCPClient(sock_handle_t sock) :
 80a2044:	b570      	push	{r4, r5, r6, lr}
 80a2046:	6082      	str	r2, [r0, #8]
        d_(std::make_shared<Data>(sock))
 80a2048:	4a14      	ldr	r2, [pc, #80]	; (80a209c <_ZN9TCPClientC1Em+0x5c>)
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a204a:	2300      	movs	r3, #0
 80a204c:	6043      	str	r3, [r0, #4]
 80a204e:	6002      	str	r2, [r0, #0]
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
 80a2050:	6143      	str	r3, [r0, #20]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
 80a2052:	6183      	str	r3, [r0, #24]

TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
{
}

TCPClient::TCPClient(sock_handle_t sock) :
 80a2054:	4604      	mov	r4, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80a2056:	20a0      	movs	r0, #160	; 0xa0
 80a2058:	460e      	mov	r6, r1
 80a205a:	f7fe f81e 	bl	80a009a <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80a205e:	4605      	mov	r5, r0
 80a2060:	b110      	cbz	r0, 80a2068 <_ZN9TCPClientC1Em+0x28>
 80a2062:	4631      	mov	r1, r6
 80a2064:	f7ff ffdf 	bl	80a2026 <_ZN9TCPClient4DataC1Em>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80a2068:	2014      	movs	r0, #20
 80a206a:	f7fe f816 	bl	80a009a <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
 80a206e:	4603      	mov	r3, r0
 80a2070:	b128      	cbz	r0, 80a207e <_ZN9TCPClientC1Em+0x3e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 80a2072:	2201      	movs	r2, #1
 80a2074:	6042      	str	r2, [r0, #4]
 80a2076:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
 80a2078:	4a09      	ldr	r2, [pc, #36]	; (80a20a0 <_ZN9TCPClientC1Em+0x60>)
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
 80a207a:	6105      	str	r5, [r0, #16]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
 80a207c:	6002      	str	r2, [r0, #0]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 80a207e:	69a0      	ldr	r0, [r4, #24]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
 80a2080:	6165      	str	r5, [r4, #20]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 80a2082:	61a3      	str	r3, [r4, #24]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 80a2084:	b128      	cbz	r0, 80a2092 <_ZN9TCPClientC1Em+0x52>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a2086:	6843      	ldr	r3, [r0, #4]
 80a2088:	3b01      	subs	r3, #1
 80a208a:	6043      	str	r3, [r0, #4]
 80a208c:	b90b      	cbnz	r3, 80a2092 <_ZN9TCPClientC1Em+0x52>
 80a208e:	f7ff fe1b 	bl	80a1cc8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.2.constprop.28>
        d_(std::make_shared<Data>(sock))
{
  flush_buffer();
 80a2092:	4620      	mov	r0, r4
 80a2094:	f7ff fe92 	bl	80a1dbc <_ZN9TCPClient12flush_bufferEv>
}
 80a2098:	4620      	mov	r0, r4
 80a209a:	bd70      	pop	{r4, r5, r6, pc}
 80a209c:	080a6328 	.word	0x080a6328
 80a20a0:	080a630c 	.word	0x080a630c

080a20a4 <_ZN9TCPClientC1Ev>:
static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
}

TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
 80a20a4:	b510      	push	{r4, lr}
 80a20a6:	4604      	mov	r4, r0
 80a20a8:	f7ff fbb0 	bl	80a180c <socket_handle_invalid>
 80a20ac:	4601      	mov	r1, r0
 80a20ae:	4620      	mov	r0, r4
 80a20b0:	f7ff ffc6 	bl	80a2040 <_ZN9TCPClientC1Em>
{
}
 80a20b4:	4620      	mov	r0, r4
 80a20b6:	bd10      	pop	{r4, pc}

080a20b8 <_ZN9TCPClient4DataD1Ev>:
        : sock(sock),
          offset(0),
          total(0) {
}

TCPClient::Data::~Data() {
 80a20b8:	b510      	push	{r4, lr}
 80a20ba:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
 80a20bc:	6800      	ldr	r0, [r0, #0]
 80a20be:	f7ff fb7d 	bl	80a17bc <socket_handle_valid>
 80a20c2:	b110      	cbz	r0, 80a20ca <_ZN9TCPClient4DataD1Ev+0x12>
        socket_close(sock);
 80a20c4:	6820      	ldr	r0, [r4, #0]
 80a20c6:	f7ff fb99 	bl	80a17fc <socket_close>
    }
}
 80a20ca:	4620      	mov	r0, r4
 80a20cc:	bd10      	pop	{r4, pc}

080a20ce <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
 80a20ce:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
 80a20d0:	6904      	ldr	r4, [r0, #16]
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
        void 
        destroy(_Up* __p) { __p->~_Up(); }
 80a20d2:	4620      	mov	r0, r4
 80a20d4:	f7ff fff0 	bl	80a20b8 <_ZN9TCPClient4DataD1Ev>
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
      {
	if (_M_ptr != nullptr)
 80a20d8:	b124      	cbz	r4, 80a20e4 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x16>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
 80a20da:	4620      	mov	r0, r4
 80a20dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a20e0:	f7fd bfdf 	b.w	80a00a2 <_ZdlPv>
 80a20e4:	bd10      	pop	{r4, pc}
	...

080a20e8 <_ZN9TCPClient7connectEPKctm>:
  flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif)
{
 80a20e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a20ec:	461f      	mov	r7, r3
    stop();
 80a20ee:	6803      	ldr	r3, [r0, #0]
  flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif)
{
 80a20f0:	b08f      	sub	sp, #60	; 0x3c
    stop();
 80a20f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif)
{
 80a20f4:	4606      	mov	r6, r0
 80a20f6:	460d      	mov	r5, r1
 80a20f8:	4690      	mov	r8, r2
    stop();
 80a20fa:	4798      	blx	r3
    if (Network.ready())
 80a20fc:	4813      	ldr	r0, [pc, #76]	; (80a214c <_ZN9TCPClient7connectEPKctm+0x64>)
 80a20fe:	f000 ff58 	bl	80a2fb2 <_ZN5spark12NetworkClass5readyEv>
 80a2102:	b300      	cbz	r0, 80a2146 <_ZN9TCPClient7connectEPKctm+0x5e>
    {
        IPAddress ip_addr;
 80a2104:	a802      	add	r0, sp, #8
 80a2106:	f000 fc45 	bl	80a2994 <_ZN9IPAddressC1Ev>
        if (inet_gethostbyname(host, strlen(host), ip_addr, nif, NULL) == 0) {
 80a210a:	4628      	mov	r0, r5
 80a210c:	f003 f9ba 	bl	80a5484 <strlen>
 80a2110:	2400      	movs	r4, #0
 80a2112:	b281      	uxth	r1, r0
 80a2114:	9400      	str	r4, [sp, #0]
 80a2116:	463b      	mov	r3, r7
 80a2118:	aa03      	add	r2, sp, #12
 80a211a:	4628      	mov	r0, r5
 80a211c:	f7ff fbc6 	bl	80a18ac <inet_gethostbyname>
 80a2120:	b980      	cbnz	r0, 80a2144 <_ZN9TCPClient7connectEPKctm+0x5c>
            return connect(ip_addr, port, nif);
 80a2122:	6833      	ldr	r3, [r6, #0]
 80a2124:	ad09      	add	r5, sp, #36	; 0x24
 80a2126:	f8d3 9020 	ldr.w	r9, [r3, #32]
 80a212a:	4b09      	ldr	r3, [pc, #36]	; (80a2150 <_ZN9TCPClient7connectEPKctm+0x68>)
 80a212c:	ac03      	add	r4, sp, #12
 80a212e:	9308      	str	r3, [sp, #32]
 80a2130:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a2132:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a2134:	6823      	ldr	r3, [r4, #0]
 80a2136:	4642      	mov	r2, r8
 80a2138:	702b      	strb	r3, [r5, #0]
 80a213a:	a908      	add	r1, sp, #32
 80a213c:	463b      	mov	r3, r7
 80a213e:	4630      	mov	r0, r6
 80a2140:	47c8      	blx	r9
 80a2142:	e000      	b.n	80a2146 <_ZN9TCPClient7connectEPKctm+0x5e>
        } else {
            DEBUG("unable to get IP for hostname");
        }
    }

    return 0; // error, could not connect
 80a2144:	4620      	mov	r0, r4
}
 80a2146:	b00f      	add	sp, #60	; 0x3c
 80a2148:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a214c:	200002c0 	.word	0x200002c0
 80a2150:	080a6494 	.word	0x080a6494

080a2154 <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
 80a2154:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a2158:	4680      	mov	r8, r0
 80a215a:	460d      	mov	r5, r1
 80a215c:	4617      	mov	r7, r2
 80a215e:	461e      	mov	r6, r3
    bool negative = val<0;
    if (negative) {
 80a2160:	2200      	movs	r2, #0
 80a2162:	2300      	movs	r3, #0
 80a2164:	4640      	mov	r0, r8
 80a2166:	4629      	mov	r1, r5
 80a2168:	f001 fdee 	bl	80a3d48 <__aeabi_dcmplt>
 80a216c:	b120      	cbz	r0, 80a2178 <_Z4dtoadhPc+0x24>
        val = -val;
        *sout++ = '-';
 80a216e:	232d      	movs	r3, #45	; 0x2d
 80a2170:	7033      	strb	r3, [r6, #0]
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
    bool negative = val<0;
    if (negative) {
        val = -val;
 80a2172:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
        *sout++ = '-';
 80a2176:	3601      	adds	r6, #1
 80a2178:	2300      	movs	r3, #0
    }
    long scale = 1;
 80a217a:	2401      	movs	r4, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
 80a217c:	220a      	movs	r2, #10
    if (negative) {
        val = -val;
        *sout++ = '-';
    }
    long scale = 1;
    for (uint8_t i=0; i<prec; i++)
 80a217e:	b2d9      	uxtb	r1, r3
 80a2180:	428f      	cmp	r7, r1
 80a2182:	d902      	bls.n	80a218a <_Z4dtoadhPc+0x36>
        scale *= 10;
 80a2184:	4354      	muls	r4, r2
 80a2186:	3301      	adds	r3, #1
    if (negative) {
        val = -val;
        *sout++ = '-';
    }
    long scale = 1;
    for (uint8_t i=0; i<prec; i++)
 80a2188:	e7f9      	b.n	80a217e <_Z4dtoadhPc+0x2a>
        scale *= 10;
    val *= scale;   // capture all the significant digits
 80a218a:	4620      	mov	r0, r4
 80a218c:	f001 fb04 	bl	80a3798 <__aeabi_i2d>
 80a2190:	4642      	mov	r2, r8
 80a2192:	462b      	mov	r3, r5
 80a2194:	f001 fb66 	bl	80a3864 <__aeabi_dmul>
 80a2198:	4682      	mov	sl, r0
 80a219a:	468b      	mov	fp, r1
    uint64_t fixed = uint64_t(val);
 80a219c:	f002 f92e 	bl	80a43fc <__aeabi_d2ulz>
 80a21a0:	4680      	mov	r8, r0
 80a21a2:	4689      	mov	r9, r1
    if ((val-fixed)>=0.5)    // round last digit
 80a21a4:	f001 fb28 	bl	80a37f8 <__aeabi_ul2d>
 80a21a8:	4602      	mov	r2, r0
 80a21aa:	460b      	mov	r3, r1
 80a21ac:	4650      	mov	r0, sl
 80a21ae:	4659      	mov	r1, fp
 80a21b0:	f001 f9a4 	bl	80a34fc <__aeabi_dsub>
 80a21b4:	2200      	movs	r2, #0
 80a21b6:	4b17      	ldr	r3, [pc, #92]	; (80a2214 <_Z4dtoadhPc+0xc0>)
 80a21b8:	f001 fdda 	bl	80a3d70 <__aeabi_dcmpge>
 80a21bc:	b118      	cbz	r0, 80a21c6 <_Z4dtoadhPc+0x72>
        fixed++;
 80a21be:	f118 0801 	adds.w	r8, r8, #1
 80a21c2:	f149 0900 	adc.w	r9, r9, #0

    unsigned long first = (unsigned long)(fixed / scale);
 80a21c6:	17e5      	asrs	r5, r4, #31
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
 80a21c8:	4622      	mov	r2, r4
 80a21ca:	462b      	mov	r3, r5
 80a21cc:	4640      	mov	r0, r8
 80a21ce:	4649      	mov	r1, r9
 80a21d0:	f002 f8fc 	bl	80a43cc <__aeabi_uldivmod>
 80a21d4:	2301      	movs	r3, #1
 80a21d6:	220a      	movs	r2, #10
 80a21d8:	4631      	mov	r1, r6
 80a21da:	f7ff fd04 	bl	80a1be6 <ultoa>
    if (prec) {
 80a21de:	b1af      	cbz	r7, 80a220c <_Z4dtoadhPc+0xb8>
        sout += strlen(sout);
 80a21e0:	4630      	mov	r0, r6
 80a21e2:	f003 f94f 	bl	80a5484 <strlen>
        *sout++ = '.';
 80a21e6:	232e      	movs	r3, #46	; 0x2e
 80a21e8:	5433      	strb	r3, [r6, r0]
        ultoa(second, sout, 10, prec);
 80a21ea:	3001      	adds	r0, #1
 80a21ec:	4406      	add	r6, r0
 80a21ee:	4622      	mov	r2, r4
 80a21f0:	462b      	mov	r3, r5
 80a21f2:	4640      	mov	r0, r8
 80a21f4:	4649      	mov	r1, r9
 80a21f6:	f002 f8e9 	bl	80a43cc <__aeabi_uldivmod>
 80a21fa:	463b      	mov	r3, r7
 80a21fc:	4610      	mov	r0, r2
 80a21fe:	4631      	mov	r1, r6
 80a2200:	220a      	movs	r2, #10
    }
}
 80a2202:	b001      	add	sp, #4
 80a2204:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    ultoa(first, sout, 10, 1);
    if (prec) {
        sout += strlen(sout);
        *sout++ = '.';
        ultoa(second, sout, 10, prec);
 80a2208:	f7ff bced 	b.w	80a1be6 <ultoa>
    }
}
 80a220c:	b001      	add	sp, #4
 80a220e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a2212:	bf00      	nop
 80a2214:	3fe00000 	.word	0x3fe00000

080a2218 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a2218:	b510      	push	{r4, lr}
 80a221a:	4604      	mov	r4, r0
{
	free(buffer);
 80a221c:	6800      	ldr	r0, [r0, #0]
 80a221e:	f7ff fc39 	bl	80a1a94 <free>
}
 80a2222:	4620      	mov	r0, r4
 80a2224:	bd10      	pop	{r4, pc}

080a2226 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a2226:	b510      	push	{r4, lr}
 80a2228:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a222a:	6800      	ldr	r0, [r0, #0]
 80a222c:	b108      	cbz	r0, 80a2232 <_ZN6String10invalidateEv+0xc>
 80a222e:	f7ff fc31 	bl	80a1a94 <free>
	buffer = NULL;
 80a2232:	2300      	movs	r3, #0
 80a2234:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 80a2236:	60a3      	str	r3, [r4, #8]
 80a2238:	6063      	str	r3, [r4, #4]
 80a223a:	bd10      	pop	{r4, pc}

080a223c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a223c:	b538      	push	{r3, r4, r5, lr}
 80a223e:	4604      	mov	r4, r0
 80a2240:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a2242:	6800      	ldr	r0, [r0, #0]
 80a2244:	3101      	adds	r1, #1
 80a2246:	f7ff fc2d 	bl	80a1aa4 <realloc>
	if (newbuffer) {
 80a224a:	b110      	cbz	r0, 80a2252 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a224c:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 80a2250:	2001      	movs	r0, #1
	}
	return 0;
}
 80a2252:	bd38      	pop	{r3, r4, r5, pc}

080a2254 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a2254:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a2256:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a2258:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a225a:	b113      	cbz	r3, 80a2262 <_ZN6String7reserveEj+0xe>
 80a225c:	6843      	ldr	r3, [r0, #4]
 80a225e:	428b      	cmp	r3, r1
 80a2260:	d207      	bcs.n	80a2272 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 80a2262:	4620      	mov	r0, r4
 80a2264:	f7ff ffea 	bl	80a223c <_ZN6String12changeBufferEj>
 80a2268:	b120      	cbz	r0, 80a2274 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 80a226a:	68a3      	ldr	r3, [r4, #8]
 80a226c:	b90b      	cbnz	r3, 80a2272 <_ZN6String7reserveEj+0x1e>
 80a226e:	6822      	ldr	r2, [r4, #0]
 80a2270:	7013      	strb	r3, [r2, #0]
 80a2272:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 80a2274:	bd10      	pop	{r4, pc}

080a2276 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a2276:	b570      	push	{r4, r5, r6, lr}
 80a2278:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a227a:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a227c:	4604      	mov	r4, r0
 80a227e:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a2280:	f7ff ffe8 	bl	80a2254 <_ZN6String7reserveEj>
 80a2284:	b918      	cbnz	r0, 80a228e <_ZN6String4copyEPKcj+0x18>
		invalidate();
 80a2286:	4620      	mov	r0, r4
 80a2288:	f7ff ffcd 	bl	80a2226 <_ZN6String10invalidateEv>
		return *this;
 80a228c:	e009      	b.n	80a22a2 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 80a228e:	462a      	mov	r2, r5
 80a2290:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 80a2292:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a2294:	6820      	ldr	r0, [r4, #0]
 80a2296:	f002 fb93 	bl	80a49c0 <memcpy>
	buffer[len] = 0;
 80a229a:	6822      	ldr	r2, [r4, #0]
 80a229c:	68a3      	ldr	r3, [r4, #8]
 80a229e:	2100      	movs	r1, #0
 80a22a0:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 80a22a2:	4620      	mov	r0, r4
 80a22a4:	bd70      	pop	{r4, r5, r6, pc}

080a22a6 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a22a6:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a22a8:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a22aa:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a22ac:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a22ae:	6043      	str	r3, [r0, #4]
	len = 0;
 80a22b0:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a22b2:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 80a22b4:	460d      	mov	r5, r1
 80a22b6:	b139      	cbz	r1, 80a22c8 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 80a22b8:	4608      	mov	r0, r1
 80a22ba:	f003 f8e3 	bl	80a5484 <strlen>
 80a22be:	4629      	mov	r1, r5
 80a22c0:	4602      	mov	r2, r0
 80a22c2:	4620      	mov	r0, r4
 80a22c4:	f7ff ffd7 	bl	80a2276 <_ZN6String4copyEPKcj>
}
 80a22c8:	4620      	mov	r0, r4
 80a22ca:	bd38      	pop	{r3, r4, r5, pc}

080a22cc <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 80a22cc:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
 80a22ce:	b510      	push	{r4, lr}
 80a22d0:	460b      	mov	r3, r1
 80a22d2:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 80a22d4:	d007      	beq.n	80a22e6 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 80a22d6:	6809      	ldr	r1, [r1, #0]
 80a22d8:	b119      	cbz	r1, 80a22e2 <_ZN6StringaSERKS_+0x16>
 80a22da:	689a      	ldr	r2, [r3, #8]
 80a22dc:	f7ff ffcb 	bl	80a2276 <_ZN6String4copyEPKcj>
 80a22e0:	e001      	b.n	80a22e6 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
 80a22e2:	f7ff ffa0 	bl	80a2226 <_ZN6String10invalidateEv>

	return *this;
}
 80a22e6:	4620      	mov	r0, r4
 80a22e8:	bd10      	pop	{r4, pc}

080a22ea <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
 80a22ea:	b510      	push	{r4, lr}
 80a22ec:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a22ee:	2300      	movs	r3, #0
 80a22f0:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a22f2:	6043      	str	r3, [r0, #4]
	len = 0;
 80a22f4:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a22f6:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
 80a22f8:	f7ff ffe8 	bl	80a22cc <_ZN6StringaSERKS_>
}
 80a22fc:	4620      	mov	r0, r4
 80a22fe:	bd10      	pop	{r4, pc}

080a2300 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 80a2300:	b538      	push	{r3, r4, r5, lr}
 80a2302:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a2304:	460c      	mov	r4, r1
 80a2306:	b141      	cbz	r1, 80a231a <_ZN6StringaSEPKc+0x1a>
 80a2308:	4608      	mov	r0, r1
 80a230a:	f003 f8bb 	bl	80a5484 <strlen>
 80a230e:	4621      	mov	r1, r4
 80a2310:	4602      	mov	r2, r0
 80a2312:	4628      	mov	r0, r5
 80a2314:	f7ff ffaf 	bl	80a2276 <_ZN6String4copyEPKcj>
 80a2318:	e001      	b.n	80a231e <_ZN6StringaSEPKc+0x1e>
	else invalidate();
 80a231a:	f7ff ff84 	bl	80a2226 <_ZN6String10invalidateEv>

	return *this;
}
 80a231e:	4628      	mov	r0, r5
 80a2320:	bd38      	pop	{r3, r4, r5, pc}

080a2322 <_ZN6StringC1Eih>:
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
 80a2322:	b510      	push	{r4, lr}
 80a2324:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a2326:	2300      	movs	r3, #0
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
 80a2328:	b08a      	sub	sp, #40	; 0x28
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a232a:	6023      	str	r3, [r4, #0]
	capacity = 0;
 80a232c:	6063      	str	r3, [r4, #4]
	len = 0;
 80a232e:	60a3      	str	r3, [r4, #8]
	flags = 0;
 80a2330:	7323      	strb	r3, [r4, #12]
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
 80a2332:	4608      	mov	r0, r1
{
	init();
	char buf[34];
	itoa(value, buf, base);
 80a2334:	a901      	add	r1, sp, #4
 80a2336:	f7ff fc7e 	bl	80a1c36 <itoa>
	*this = buf;
 80a233a:	a901      	add	r1, sp, #4
 80a233c:	4620      	mov	r0, r4
 80a233e:	f7ff ffdf 	bl	80a2300 <_ZN6StringaSEPKc>
}
 80a2342:	4620      	mov	r0, r4
 80a2344:	b00a      	add	sp, #40	; 0x28
 80a2346:	bd10      	pop	{r4, pc}

080a2348 <_ZN6StringC1Ejh>:

String::String(unsigned int value, unsigned char base)
 80a2348:	b510      	push	{r4, lr}
 80a234a:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a234c:	2300      	movs	r3, #0
	char buf[34];
	itoa(value, buf, base);
	*this = buf;
}

String::String(unsigned int value, unsigned char base)
 80a234e:	b08a      	sub	sp, #40	; 0x28
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a2350:	6023      	str	r3, [r4, #0]
	capacity = 0;
 80a2352:	6063      	str	r3, [r4, #4]
	len = 0;
 80a2354:	60a3      	str	r3, [r4, #8]
	flags = 0;
 80a2356:	7323      	strb	r3, [r4, #12]
	char buf[34];
	itoa(value, buf, base);
	*this = buf;
}

String::String(unsigned int value, unsigned char base)
 80a2358:	4608      	mov	r0, r1
{
	init();
	char buf[33];
	utoa(value, buf, base);
 80a235a:	a901      	add	r1, sp, #4
 80a235c:	f7ff fc81 	bl	80a1c62 <utoa>
	*this = buf;
 80a2360:	a901      	add	r1, sp, #4
 80a2362:	4620      	mov	r0, r4
 80a2364:	f7ff ffcc 	bl	80a2300 <_ZN6StringaSEPKc>
}
 80a2368:	4620      	mov	r0, r4
 80a236a:	b00a      	add	sp, #40	; 0x28
 80a236c:	bd10      	pop	{r4, pc}

080a236e <_ZN6StringC1Emh>:
	char buf[34];
	ltoa(value, buf, base);
	*this = buf;
}

String::String(unsigned long value, unsigned char base)
 80a236e:	b510      	push	{r4, lr}
 80a2370:	4604      	mov	r4, r0
 80a2372:	b08a      	sub	sp, #40	; 0x28
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a2374:	2300      	movs	r3, #0
 80a2376:	6023      	str	r3, [r4, #0]
	capacity = 0;
 80a2378:	6063      	str	r3, [r4, #4]
	len = 0;
 80a237a:	60a3      	str	r3, [r4, #8]
	flags = 0;
 80a237c:	7323      	strb	r3, [r4, #12]
	char buf[34];
	ltoa(value, buf, base);
	*this = buf;
}

String::String(unsigned long value, unsigned char base)
 80a237e:	4608      	mov	r0, r1
{
	init();
	char buf[33];
	ultoa(value, buf, base);
 80a2380:	2301      	movs	r3, #1
 80a2382:	a901      	add	r1, sp, #4
 80a2384:	f7ff fc2f 	bl	80a1be6 <ultoa>
	*this = buf;
 80a2388:	a901      	add	r1, sp, #4
 80a238a:	4620      	mov	r0, r4
 80a238c:	f7ff ffb8 	bl	80a2300 <_ZN6StringaSEPKc>
}
 80a2390:	4620      	mov	r0, r4
 80a2392:	b00a      	add	sp, #40	; 0x28
 80a2394:	bd10      	pop	{r4, pc}

080a2396 <_ZN6StringC1Efi>:

String::String(float value, int decimalPlaces)
 80a2396:	b530      	push	{r4, r5, lr}
 80a2398:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a239a:	2300      	movs	r3, #0
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::String(float value, int decimalPlaces)
 80a239c:	b08b      	sub	sp, #44	; 0x2c
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a239e:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a23a0:	6043      	str	r3, [r0, #4]
	len = 0;
 80a23a2:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a23a4:	7303      	strb	r3, [r0, #12]

String::String(float value, int decimalPlaces)
{
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
 80a23a6:	b2d5      	uxtb	r5, r2
 80a23a8:	4608      	mov	r0, r1
 80a23aa:	f001 fa07 	bl	80a37bc <__aeabi_f2d>
 80a23ae:	ab01      	add	r3, sp, #4
 80a23b0:	462a      	mov	r2, r5
 80a23b2:	f7ff fecf 	bl	80a2154 <_Z4dtoadhPc>
        *this = buf;
 80a23b6:	a901      	add	r1, sp, #4
 80a23b8:	4620      	mov	r0, r4
 80a23ba:	f7ff ffa1 	bl	80a2300 <_ZN6StringaSEPKc>
}
 80a23be:	4620      	mov	r0, r4
 80a23c0:	b00b      	add	sp, #44	; 0x2c
 80a23c2:	bd30      	pop	{r4, r5, pc}

080a23c4 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
 80a23c4:	b570      	push	{r4, r5, r6, lr}
 80a23c6:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
 80a23c8:	460e      	mov	r6, r1
 80a23ca:	b909      	cbnz	r1, 80a23d0 <_ZN6String6concatEPKcj+0xc>
 80a23cc:	2000      	movs	r0, #0
 80a23ce:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
 80a23d0:	b16a      	cbz	r2, 80a23ee <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
 80a23d2:	6883      	ldr	r3, [r0, #8]
 80a23d4:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
 80a23d6:	4629      	mov	r1, r5
 80a23d8:	f7ff ff3c 	bl	80a2254 <_ZN6String7reserveEj>
 80a23dc:	2800      	cmp	r0, #0
 80a23de:	d0f5      	beq.n	80a23cc <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
 80a23e0:	6820      	ldr	r0, [r4, #0]
 80a23e2:	68a3      	ldr	r3, [r4, #8]
 80a23e4:	4631      	mov	r1, r6
 80a23e6:	4418      	add	r0, r3
 80a23e8:	f002 fb30 	bl	80a4a4c <strcpy>
	len = newlen;
 80a23ec:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
 80a23ee:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
 80a23f0:	bd70      	pop	{r4, r5, r6, pc}

080a23f2 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 80a23f2:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 80a23f4:	688a      	ldr	r2, [r1, #8]
 80a23f6:	6809      	ldr	r1, [r1, #0]
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 80a23f8:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 80a23fa:	f7ff ffe3 	bl	80a23c4 <_ZN6String6concatEPKcj>
 80a23fe:	b910      	cbnz	r0, 80a2406 <_ZplRK15StringSumHelperRK6String+0x14>
 80a2400:	4620      	mov	r0, r4
 80a2402:	f7ff ff10 	bl	80a2226 <_ZN6String10invalidateEv>
	return a;
}
 80a2406:	4620      	mov	r0, r4
 80a2408:	bd10      	pop	{r4, pc}

080a240a <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
 80a240a:	b538      	push	{r3, r4, r5, lr}
 80a240c:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
 80a240e:	460d      	mov	r5, r1
 80a2410:	b141      	cbz	r1, 80a2424 <_ZplRK15StringSumHelperPKc+0x1a>
 80a2412:	4608      	mov	r0, r1
 80a2414:	f003 f836 	bl	80a5484 <strlen>
 80a2418:	4629      	mov	r1, r5
 80a241a:	4602      	mov	r2, r0
 80a241c:	4620      	mov	r0, r4
 80a241e:	f7ff ffd1 	bl	80a23c4 <_ZN6String6concatEPKcj>
 80a2422:	b910      	cbnz	r0, 80a242a <_ZplRK15StringSumHelperPKc+0x20>
 80a2424:	4620      	mov	r0, r4
 80a2426:	f7ff fefe 	bl	80a2226 <_ZN6String10invalidateEv>
	return a;
}
 80a242a:	4620      	mov	r0, r4
 80a242c:	bd38      	pop	{r3, r4, r5, pc}

080a242e <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 80a242e:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
 80a2430:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 80a2432:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
 80a2434:	b912      	cbnz	r2, 80a243c <_ZNK6String6equalsEPKc+0xe>
 80a2436:	b919      	cbnz	r1, 80a2440 <_ZNK6String6equalsEPKc+0x12>
 80a2438:	2001      	movs	r0, #1
 80a243a:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
 80a243c:	b911      	cbnz	r1, 80a2444 <_ZNK6String6equalsEPKc+0x16>
 80a243e:	6803      	ldr	r3, [r0, #0]
 80a2440:	7818      	ldrb	r0, [r3, #0]
 80a2442:	e002      	b.n	80a244a <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
 80a2444:	6800      	ldr	r0, [r0, #0]
 80a2446:	f002 faf7 	bl	80a4a38 <strcmp>
 80a244a:	fab0 f080 	clz	r0, r0
 80a244e:	0940      	lsrs	r0, r0, #5
}
 80a2450:	bd08      	pop	{r3, pc}

080a2452 <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
 80a2452:	6800      	ldr	r0, [r0, #0]
 80a2454:	b108      	cbz	r0, 80a245a <_ZNK6String5toIntEv+0x8>
 80a2456:	f002 b9a9 	b.w	80a47ac <atol>
	return 0;
}
 80a245a:	4770      	bx	lr

080a245c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a245c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a245e:	4606      	mov	r6, r0
 80a2460:	460d      	mov	r5, r1
 80a2462:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a2464:	2400      	movs	r4, #0
  while (size--) {
 80a2466:	42bd      	cmp	r5, r7
 80a2468:	d00c      	beq.n	80a2484 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a246a:	6833      	ldr	r3, [r6, #0]
 80a246c:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a2470:	689b      	ldr	r3, [r3, #8]
 80a2472:	4630      	mov	r0, r6
 80a2474:	4798      	blx	r3
     if (chunk>=0)
 80a2476:	2800      	cmp	r0, #0
 80a2478:	db01      	blt.n	80a247e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a247a:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a247c:	e7f3      	b.n	80a2466 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a247e:	2c00      	cmp	r4, #0
 80a2480:	bf08      	it	eq
 80a2482:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a2484:	4620      	mov	r0, r4
 80a2486:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a2488 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a2488:	b570      	push	{r4, r5, r6, lr}
 80a248a:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a248c:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a248e:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a2490:	b149      	cbz	r1, 80a24a6 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a2492:	f002 fff7 	bl	80a5484 <strlen>
 80a2496:	682b      	ldr	r3, [r5, #0]
 80a2498:	4602      	mov	r2, r0
 80a249a:	4621      	mov	r1, r4
 80a249c:	4628      	mov	r0, r5
    }
 80a249e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a24a2:	68db      	ldr	r3, [r3, #12]
 80a24a4:	4718      	bx	r3
    }
 80a24a6:	bd70      	pop	{r4, r5, r6, pc}

080a24a8 <_ZN5Print5printEPKc>:
 80a24a8:	b508      	push	{r3, lr}
 80a24aa:	f7ff ffed 	bl	80a2488 <_ZN5Print5writeEPKc>
 80a24ae:	bd08      	pop	{r3, pc}

080a24b0 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a24b0:	6803      	ldr	r3, [r0, #0]
 80a24b2:	689b      	ldr	r3, [r3, #8]
 80a24b4:	4718      	bx	r3

080a24b6 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a24b6:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a24b8:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a24ba:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a24bc:	f7ff fff8 	bl	80a24b0 <_ZN5Print5printEc>
  n += print('\n');
 80a24c0:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80a24c2:	4604      	mov	r4, r0
  n += print('\n');
 80a24c4:	4628      	mov	r0, r5
 80a24c6:	f7ff fff3 	bl	80a24b0 <_ZN5Print5printEc>
  return n;
}
 80a24ca:	4420      	add	r0, r4
 80a24cc:	bd38      	pop	{r3, r4, r5, pc}

080a24ce <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a24ce:	b538      	push	{r3, r4, r5, lr}
 80a24d0:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a24d2:	f7ff ffd9 	bl	80a2488 <_ZN5Print5writeEPKc>
 80a24d6:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 80a24d8:	4628      	mov	r0, r5
 80a24da:	f7ff ffec 	bl	80a24b6 <_ZN5Print7printlnEv>
  return n;
}
 80a24de:	4420      	add	r0, r4
 80a24e0:	bd38      	pop	{r3, r4, r5, pc}

080a24e2 <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a24e2:	2a01      	cmp	r2, #1
 80a24e4:	bf98      	it	ls
 80a24e6:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a24e8:	b530      	push	{r4, r5, lr}
 80a24ea:	460b      	mov	r3, r1
 80a24ec:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a24ee:	2100      	movs	r1, #0
 80a24f0:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a24f4:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   decltype(n) m = n;
   n /= base;
 80a24f8:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
 80a24fc:	fb05 3312 	mls	r3, r5, r2, r3
 80a2500:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a2502:	2b09      	cmp	r3, #9
 80a2504:	bf94      	ite	ls
 80a2506:	3330      	addls	r3, #48	; 0x30
 80a2508:	3337      	addhi	r3, #55	; 0x37
 80a250a:	b2db      	uxtb	r3, r3
 80a250c:	4621      	mov	r1, r4
 80a250e:	f804 3901 	strb.w	r3, [r4], #-1
 80a2512:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a2514:	2d00      	cmp	r5, #0
 80a2516:	d1ef      	bne.n	80a24f8 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a2518:	f7ff ffb6 	bl	80a2488 <_ZN5Print5writeEPKc>
}
 80a251c:	b00b      	add	sp, #44	; 0x2c
 80a251e:	bd30      	pop	{r4, r5, pc}

080a2520 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a2520:	2300      	movs	r3, #0
 80a2522:	461a      	mov	r2, r3
 80a2524:	4619      	mov	r1, r3
 80a2526:	6840      	ldr	r0, [r0, #4]
 80a2528:	f7ff ba44 	b.w	80a19b4 <network_on>

080a252c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a252c:	4a01      	ldr	r2, [pc, #4]	; (80a2534 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a252e:	4b02      	ldr	r3, [pc, #8]	; (80a2538 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a2530:	601a      	str	r2, [r3, #0]
 80a2532:	4770      	bx	lr
 80a2534:	080a63fd 	.word	0x080a63fd
 80a2538:	2000023c 	.word	0x2000023c

080a253c <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
 80a253c:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
 80a253e:	2000      	movs	r0, #0
 80a2540:	f7ff fa90 	bl	80a1a64 <spark_sync_time_pending>
 80a2544:	b128      	cbz	r0, 80a2552 <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a2546:	f7ff fa85 	bl	80a1a54 <spark_cloud_flag_connected>
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
 80a254a:	f080 0001 	eor.w	r0, r0, #1
 80a254e:	b2c0      	uxtb	r0, r0
 80a2550:	bd08      	pop	{r3, pc}
 80a2552:	2001      	movs	r0, #1
    }
 80a2554:	bd08      	pop	{r3, pc}
	...

080a2558 <_ZN9TimeClass4zoneEf>:
	return HAL_RTC_Get_UnixTime()+time_zone_cache+dst_current_cache;
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
 80a2558:	b510      	push	{r4, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
 80a255a:	4909      	ldr	r1, [pc, #36]	; (80a2580 <_ZN9TimeClass4zoneEf+0x28>)
	return HAL_RTC_Get_UnixTime()+time_zone_cache+dst_current_cache;
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
 80a255c:	4604      	mov	r4, r0
	if(GMT_Offset < -12 || GMT_Offset > 14)
 80a255e:	f001 fee7 	bl	80a4330 <__aeabi_fcmplt>
 80a2562:	b960      	cbnz	r0, 80a257e <_ZN9TimeClass4zoneEf+0x26>
 80a2564:	4907      	ldr	r1, [pc, #28]	; (80a2584 <_ZN9TimeClass4zoneEf+0x2c>)
 80a2566:	4620      	mov	r0, r4
 80a2568:	f001 ff00 	bl	80a436c <__aeabi_fcmpgt>
 80a256c:	b938      	cbnz	r0, 80a257e <_ZN9TimeClass4zoneEf+0x26>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
 80a256e:	4906      	ldr	r1, [pc, #24]	; (80a2588 <_ZN9TimeClass4zoneEf+0x30>)
 80a2570:	4620      	mov	r0, r4
 80a2572:	f001 fd3f 	bl	80a3ff4 <__aeabi_fmul>
 80a2576:	f001 ff03 	bl	80a4380 <__aeabi_f2iz>
 80a257a:	4b04      	ldr	r3, [pc, #16]	; (80a258c <_ZN9TimeClass4zoneEf+0x34>)
 80a257c:	6018      	str	r0, [r3, #0]
 80a257e:	bd10      	pop	{r4, pc}
 80a2580:	c1400000 	.word	0xc1400000
 80a2584:	41600000 	.word	0x41600000
 80a2588:	45610000 	.word	0x45610000
 80a258c:	20000248 	.word	0x20000248

080a2590 <_ZN9TimeClass7timeStrEl>:
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 80a2590:	b537      	push	{r0, r1, r2, r4, r5, lr}
	t += time_zone_cache;
    t += dst_current_cache;
 80a2592:	4b0e      	ldr	r3, [pc, #56]	; (80a25cc <_ZN9TimeClass7timeStrEl+0x3c>)
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 80a2594:	4604      	mov	r4, r0
	t += time_zone_cache;
    t += dst_current_cache;
 80a2596:	681b      	ldr	r3, [r3, #0]
 80a2598:	a802      	add	r0, sp, #8
 80a259a:	4419      	add	r1, r3
 80a259c:	4b0c      	ldr	r3, [pc, #48]	; (80a25d0 <_ZN9TimeClass7timeStrEl+0x40>)
 80a259e:	681b      	ldr	r3, [r3, #0]
 80a25a0:	4419      	add	r1, r3
 80a25a2:	f840 1d04 	str.w	r1, [r0, #-4]!
	tm* calendar_time = localtime(&t);
 80a25a6:	f002 f913 	bl	80a47d0 <localtime>
        char* ascstr = asctime(calendar_time);
 80a25aa:	f002 f8c3 	bl	80a4734 <asctime>
 80a25ae:	4605      	mov	r5, r0
        int len = strlen(ascstr);
 80a25b0:	f002 ff68 	bl	80a5484 <strlen>
        ascstr[len-1] = 0; // remove final newline
 80a25b4:	2300      	movs	r3, #0
 80a25b6:	4428      	add	r0, r5
 80a25b8:	f800 3c01 	strb.w	r3, [r0, #-1]
	return String(ascstr);
 80a25bc:	4629      	mov	r1, r5
 80a25be:	4620      	mov	r0, r4
 80a25c0:	f7ff fe71 	bl	80a22a6 <_ZN6StringC1EPK19__FlashStringHelper>
}
 80a25c4:	4620      	mov	r0, r4
 80a25c6:	b003      	add	sp, #12
 80a25c8:	bd30      	pop	{r4, r5, pc}
 80a25ca:	bf00      	nop
 80a25cc:	20000248 	.word	0x20000248
 80a25d0:	20000244 	.word	0x20000244

080a25d4 <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 80a25d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a25d8:	b0a4      	sub	sp, #144	; 0x90
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 80a25da:	ac14      	add	r4, sp, #80	; 0x50
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 80a25dc:	4607      	mov	r7, r0
 80a25de:	4689      	mov	r9, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 80a25e0:	4620      	mov	r0, r4
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 80a25e2:	4611      	mov	r1, r2
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 80a25e4:	223f      	movs	r2, #63	; 0x3f
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 80a25e6:	461d      	mov	r5, r3
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 80a25e8:	f002 ff69 	bl	80a54be <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
 80a25ec:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
 80a25ee:	4620      	mov	r0, r4
String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
 80a25f0:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
 80a25f4:	f002 ff46 	bl	80a5484 <strlen>
 80a25f8:	4680      	mov	r8, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
 80a25fa:	b925      	cbnz	r5, 80a2606 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        strcpy(time_zone_str, "Z");
 80a25fc:	4924      	ldr	r1, [pc, #144]	; (80a2690 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xbc>)
 80a25fe:	a803      	add	r0, sp, #12
 80a2600:	f002 fa24 	bl	80a4a4c <strcpy>
 80a2604:	e013      	b.n	80a262e <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x5a>
    }
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
 80a2606:	213c      	movs	r1, #60	; 0x3c
 80a2608:	fb95 f2f1 	sdiv	r2, r5, r1
 80a260c:	2a00      	cmp	r2, #0
 80a260e:	bfb8      	it	lt
 80a2610:	4252      	neglt	r2, r2
 80a2612:	fb92 f3f1 	sdiv	r3, r2, r1
 80a2616:	fb01 2213 	mls	r2, r1, r3, r2
 80a261a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80a261e:	9200      	str	r2, [sp, #0]
 80a2620:	fb95 f3f3 	sdiv	r3, r5, r3
 80a2624:	4a1b      	ldr	r2, [pc, #108]	; (80a2694 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xc0>)
 80a2626:	2110      	movs	r1, #16
 80a2628:	a803      	add	r0, sp, #12
 80a262a:	f7ff fa53 	bl	80a1ad4 <snprintf>
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 80a262e:	4625      	mov	r5, r4
 80a2630:	1b2e      	subs	r6, r5, r4
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
 80a2632:	f108 3aff 	add.w	sl, r8, #4294967295
 80a2636:	45b2      	cmp	sl, r6
 80a2638:	d91b      	bls.n	80a2672 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x9e>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
 80a263a:	782b      	ldrb	r3, [r5, #0]
 80a263c:	2b25      	cmp	r3, #37	; 0x25
 80a263e:	d116      	bne.n	80a266e <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x9a>
 80a2640:	786b      	ldrb	r3, [r5, #1]
 80a2642:	2b7a      	cmp	r3, #122	; 0x7a
 80a2644:	d113      	bne.n	80a266e <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x9a>
        {
            size_t tzlen = strlen(time_zone_str);
 80a2646:	a803      	add	r0, sp, #12
 80a2648:	f002 ff1c 	bl	80a5484 <strlen>
 80a264c:	4680      	mov	r8, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
 80a264e:	4430      	add	r0, r6
 80a2650:	ebc6 020a 	rsb	r2, r6, sl
 80a2654:	1ca9      	adds	r1, r5, #2
 80a2656:	4420      	add	r0, r4
 80a2658:	f002 f9b2 	bl	80a49c0 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
 80a265c:	4642      	mov	r2, r8
 80a265e:	a903      	add	r1, sp, #12
 80a2660:	4628      	mov	r0, r5
 80a2662:	f002 f9ad 	bl	80a49c0 <memcpy>
            len = strlen(format_str);
 80a2666:	4620      	mov	r0, r4
 80a2668:	f002 ff0c 	bl	80a5484 <strlen>
 80a266c:	4680      	mov	r8, r0
 80a266e:	3501      	adds	r5, #1
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
 80a2670:	e7de      	b.n	80a2630 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x5c>
            len = strlen(format_str);
        }
    }

    char buf[50];
    strftime(buf, 50, format_str, calendar_time);
 80a2672:	464b      	mov	r3, r9
 80a2674:	4622      	mov	r2, r4
 80a2676:	2132      	movs	r1, #50	; 0x32
 80a2678:	a807      	add	r0, sp, #28
 80a267a:	f002 fa4f 	bl	80a4b1c <strftime>
    return String(buf);
 80a267e:	a907      	add	r1, sp, #28
 80a2680:	4638      	mov	r0, r7
 80a2682:	f7ff fe10 	bl	80a22a6 <_ZN6StringC1EPK19__FlashStringHelper>
}
 80a2686:	4638      	mov	r0, r7
 80a2688:	b024      	add	sp, #144	; 0x90
 80a268a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a268e:	bf00      	nop
 80a2690:	080a6a59 	.word	0x080a6a59
 80a2694:	080a6465 	.word	0x080a6465

080a2698 <_ZN9TimeClass6formatElPKc>:
        ascstr[len-1] = 0; // remove final newline
	return String(ascstr);
}

String TimeClass::format(time_t t, const char* format_spec)
{
 80a2698:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80a269a:	4605      	mov	r5, r0
 80a269c:	9201      	str	r2, [sp, #4]
    if (format_spec==NULL)
 80a269e:	461c      	mov	r4, r3
 80a26a0:	b913      	cbnz	r3, 80a26a8 <_ZN9TimeClass6formatElPKc+0x10>
        format_spec = this->format_spec;
 80a26a2:	4b12      	ldr	r3, [pc, #72]	; (80a26ec <_ZN9TimeClass6formatElPKc+0x54>)
 80a26a4:	681c      	ldr	r4, [r3, #0]

    if (!format_spec || !strcmp(format_spec,TIME_FORMAT_DEFAULT)) {
 80a26a6:	b12c      	cbz	r4, 80a26b4 <_ZN9TimeClass6formatElPKc+0x1c>
 80a26a8:	4b11      	ldr	r3, [pc, #68]	; (80a26f0 <_ZN9TimeClass6formatElPKc+0x58>)
 80a26aa:	4620      	mov	r0, r4
 80a26ac:	6819      	ldr	r1, [r3, #0]
 80a26ae:	f002 f9c3 	bl	80a4a38 <strcmp>
 80a26b2:	b920      	cbnz	r0, 80a26be <_ZN9TimeClass6formatElPKc+0x26>
        return timeStr(t);
 80a26b4:	9901      	ldr	r1, [sp, #4]
 80a26b6:	4628      	mov	r0, r5
 80a26b8:	f7ff ff6a 	bl	80a2590 <_ZN9TimeClass7timeStrEl>
 80a26bc:	e013      	b.n	80a26e6 <_ZN9TimeClass6formatElPKc+0x4e>
    }
    t += time_zone_cache;
 80a26be:	4f0d      	ldr	r7, [pc, #52]	; (80a26f4 <_ZN9TimeClass6formatElPKc+0x5c>)
    t += dst_current_cache;
 80a26c0:	9a01      	ldr	r2, [sp, #4]
 80a26c2:	683b      	ldr	r3, [r7, #0]
 80a26c4:	4e0c      	ldr	r6, [pc, #48]	; (80a26f8 <_ZN9TimeClass6formatElPKc+0x60>)
 80a26c6:	441a      	add	r2, r3
 80a26c8:	6833      	ldr	r3, [r6, #0]
 80a26ca:	a802      	add	r0, sp, #8
 80a26cc:	4413      	add	r3, r2
 80a26ce:	f840 3d04 	str.w	r3, [r0, #-4]!
    tm* calendar_time = localtime(&t);
 80a26d2:	f002 f87d 	bl	80a47d0 <localtime>
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
 80a26d6:	683a      	ldr	r2, [r7, #0]
 80a26d8:	6833      	ldr	r3, [r6, #0]
 80a26da:	4601      	mov	r1, r0
 80a26dc:	4413      	add	r3, r2
 80a26de:	4628      	mov	r0, r5
 80a26e0:	4622      	mov	r2, r4
 80a26e2:	f7ff ff77 	bl	80a25d4 <_ZN9TimeClass14timeFormatImplEP2tmPKci>
}
 80a26e6:	4628      	mov	r0, r5
 80a26e8:	b003      	add	sp, #12
 80a26ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a26ec:	20000240 	.word	0x20000240
 80a26f0:	20000004 	.word	0x20000004
 80a26f4:	20000248 	.word	0x20000248
 80a26f8:	20000244 	.word	0x20000244

080a26fc <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
 80a26fc:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
 80a26fe:	2000      	movs	r0, #0
 80a2700:	f7fe ffa2 	bl	80a1648 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
 80a2704:	4604      	mov	r4, r0
 80a2706:	b968      	cbnz	r0, 80a2724 <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 80a2708:	f7ff f900 	bl	80a190c <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 80a270c:	2801      	cmp	r0, #1
 80a270e:	d10b      	bne.n	80a2728 <_ZN9TimeClass7isValidEv+0x2c>
 80a2710:	4620      	mov	r0, r4
 80a2712:	f7ff f913 	bl	80a193c <system_thread_get_state>
 80a2716:	b938      	cbnz	r0, 80a2728 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
 80a2718:	f7ff ff10 	bl	80a253c <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80a271c:	b930      	cbnz	r0, 80a272c <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
 80a271e:	f7ff f989 	bl	80a1a34 <spark_process>
 80a2722:	e7f9      	b.n	80a2718 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
 80a2724:	2001      	movs	r0, #1
 80a2726:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
 80a2728:	2000      	movs	r0, #0
 80a272a:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
 80a272c:	f7ff ff06 	bl	80a253c <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
 80a2730:	2000      	movs	r0, #0
 80a2732:	f7fe ff89 	bl	80a1648 <HAL_RTC_Time_Is_Valid>
 80a2736:	3000      	adds	r0, #0
 80a2738:	bf18      	it	ne
 80a273a:	2001      	movne	r0, #1
    }
    return rtcstate;
}
 80a273c:	bd10      	pop	{r4, pc}

080a273e <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
 80a273e:	b508      	push	{r3, lr}
    (void)isValid();
 80a2740:	f7ff ffdc 	bl	80a26fc <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
 80a2744:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
 80a2748:	f7fe bf76 	b.w	80a1638 <HAL_RTC_Get_UnixTime>

080a274c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a274c:	4b02      	ldr	r3, [pc, #8]	; (80a2758 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a274e:	681a      	ldr	r2, [r3, #0]
 80a2750:	4b02      	ldr	r3, [pc, #8]	; (80a275c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a2752:	601a      	str	r2, [r3, #0]
 80a2754:	4770      	bx	lr
 80a2756:	bf00      	nop
 80a2758:	20000004 	.word	0x20000004
 80a275c:	20000240 	.word	0x20000240

080a2760 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a2760:	2100      	movs	r1, #0
 80a2762:	f7ff b8e3 	b.w	80a192c <system_delay_ms>

080a2766 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a2766:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a2768:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a276a:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a276c:	b113      	cbz	r3, 80a2774 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a276e:	2203      	movs	r2, #3
 80a2770:	4601      	mov	r1, r0
 80a2772:	4798      	blx	r3
    }
 80a2774:	4620      	mov	r0, r4
 80a2776:	bd10      	pop	{r4, pc}

080a2778 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a2778:	b510      	push	{r4, lr}
 80a277a:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a277c:	f7ff fff3 	bl	80a2766 <_ZNSt14_Function_baseD1Ev>
 80a2780:	4620      	mov	r0, r4
 80a2782:	bd10      	pop	{r4, pc}

080a2784 <_ZN8RGBClass7controlEb>:
{
    return LED_RGB_IsOverRidden();
}

void RGBClass::control(bool override)
{
 80a2784:	b510      	push	{r4, lr}
 80a2786:	4604      	mov	r4, r0

RGBClass RGB;

bool RGBClass::controlled(void)
{
    return LED_RGB_IsOverRidden();
 80a2788:	f7ff f8b0 	bl	80a18ec <LED_RGB_IsOverRidden>
}

void RGBClass::control(bool override)
{
    if (override == controlled()) {
 80a278c:	4284      	cmp	r4, r0
 80a278e:	d008      	beq.n	80a27a2 <_ZN8RGBClass7controlEb+0x1e>
        return;
    } else if (override) {
 80a2790:	b11c      	cbz	r4, 80a279a <_ZN8RGBClass7controlEb+0x16>
        LED_Signaling_Start();
    } else {
        LED_Signaling_Stop();
    }
}
 80a2792:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void RGBClass::control(bool override)
{
    if (override == controlled()) {
        return;
    } else if (override) {
        LED_Signaling_Start();
 80a2796:	f7ff b899 	b.w	80a18cc <LED_Signaling_Start>
    } else {
        LED_Signaling_Stop();
    }
}
 80a279a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (override == controlled()) {
        return;
    } else if (override) {
        LED_Signaling_Start();
    } else {
        LED_Signaling_Stop();
 80a279e:	f7ff b89d 	b.w	80a18dc <LED_Signaling_Stop>
 80a27a2:	bd10      	pop	{r4, pc}

080a27a4 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a27a4:	4803      	ldr	r0, [pc, #12]	; (80a27b4 <_GLOBAL__sub_I_RGB+0x10>)
 80a27a6:	2300      	movs	r3, #0
 80a27a8:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a27aa:	4a03      	ldr	r2, [pc, #12]	; (80a27b8 <_GLOBAL__sub_I_RGB+0x14>)
 80a27ac:	4903      	ldr	r1, [pc, #12]	; (80a27bc <_GLOBAL__sub_I_RGB+0x18>)
 80a27ae:	f000 bd37 	b.w	80a3220 <__aeabi_atexit>
 80a27b2:	bf00      	nop
 80a27b4:	20000250 	.word	0x20000250
 80a27b8:	200000bc 	.word	0x200000bc
 80a27bc:	080a2779 	.word	0x080a2779

080a27c0 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a27c0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a27c2:	4b14      	ldr	r3, [pc, #80]	; (80a2814 <serialEventRun+0x54>)
 80a27c4:	b133      	cbz	r3, 80a27d4 <serialEventRun+0x14>
 80a27c6:	f000 f99f 	bl	80a2b08 <_Z16_fetch_usbserialv>
 80a27ca:	6803      	ldr	r3, [r0, #0]
 80a27cc:	691b      	ldr	r3, [r3, #16]
 80a27ce:	4798      	blx	r3
 80a27d0:	2800      	cmp	r0, #0
 80a27d2:	dc16      	bgt.n	80a2802 <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a27d4:	4b10      	ldr	r3, [pc, #64]	; (80a2818 <serialEventRun+0x58>)
 80a27d6:	b133      	cbz	r3, 80a27e6 <serialEventRun+0x26>
 80a27d8:	f000 fa4c 	bl	80a2c74 <_Z22__fetch_global_Serial1v>
 80a27dc:	6803      	ldr	r3, [r0, #0]
 80a27de:	691b      	ldr	r3, [r3, #16]
 80a27e0:	4798      	blx	r3
 80a27e2:	2800      	cmp	r0, #0
 80a27e4:	dc10      	bgt.n	80a2808 <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a27e6:	4b0d      	ldr	r3, [pc, #52]	; (80a281c <serialEventRun+0x5c>)
 80a27e8:	b10b      	cbz	r3, 80a27ee <serialEventRun+0x2e>
 80a27ea:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a27ee:	4b0c      	ldr	r3, [pc, #48]	; (80a2820 <serialEventRun+0x60>)
 80a27f0:	b17b      	cbz	r3, 80a2812 <serialEventRun+0x52>
 80a27f2:	f000 f9b7 	bl	80a2b64 <_Z17_fetch_usbserial1v>
 80a27f6:	6803      	ldr	r3, [r0, #0]
 80a27f8:	691b      	ldr	r3, [r3, #16]
 80a27fa:	4798      	blx	r3
 80a27fc:	2800      	cmp	r0, #0
 80a27fe:	dc06      	bgt.n	80a280e <serialEventRun+0x4e>
 80a2800:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a2802:	f3af 8000 	nop.w
 80a2806:	e7e5      	b.n	80a27d4 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a2808:	f3af 8000 	nop.w
 80a280c:	e7eb      	b.n	80a27e6 <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a280e:	f3af 8000 	nop.w
 80a2812:	bd08      	pop	{r3, pc}
	...

080a2824 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a2824:	b508      	push	{r3, lr}
	serialEventRun();
 80a2826:	f7ff ffcb 	bl	80a27c0 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a282a:	f7fe fefd 	bl	80a1628 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a282e:	4b01      	ldr	r3, [pc, #4]	; (80a2834 <_post_loop+0x10>)
 80a2830:	6018      	str	r0, [r3, #0]
 80a2832:	bd08      	pop	{r3, pc}
 80a2834:	200002c8 	.word	0x200002c8

080a2838 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a2838:	4802      	ldr	r0, [pc, #8]	; (80a2844 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a283a:	4a03      	ldr	r2, [pc, #12]	; (80a2848 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a283c:	4903      	ldr	r1, [pc, #12]	; (80a284c <_Z33system_initialize_user_backup_ramv+0x14>)
 80a283e:	1a12      	subs	r2, r2, r0
 80a2840:	f002 b8be 	b.w	80a49c0 <memcpy>
 80a2844:	40024000 	.word	0x40024000
 80a2848:	40024004 	.word	0x40024004
 80a284c:	080a6ad8 	.word	0x080a6ad8

080a2850 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a2850:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a2852:	2300      	movs	r3, #0
 80a2854:	9300      	str	r3, [sp, #0]
 80a2856:	461a      	mov	r2, r3
 80a2858:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a285c:	f7ff f880 	bl	80a1960 <system_ctrl_set_result>
}
 80a2860:	b003      	add	sp, #12
 80a2862:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a2868 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a2868:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a286a:	8843      	ldrh	r3, [r0, #2]
 80a286c:	2b0a      	cmp	r3, #10
 80a286e:	d008      	beq.n	80a2882 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a2870:	2b50      	cmp	r3, #80	; 0x50
 80a2872:	d109      	bne.n	80a2888 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a2874:	4b09      	ldr	r3, [pc, #36]	; (80a289c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a2876:	681b      	ldr	r3, [r3, #0]
 80a2878:	b13b      	cbz	r3, 80a288a <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a287a:	b003      	add	sp, #12
 80a287c:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a2880:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a2882:	f7ff ffe5 	bl	80a2850 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a2886:	e006      	b.n	80a2896 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a2888:	2300      	movs	r3, #0
 80a288a:	9300      	str	r3, [sp, #0]
 80a288c:	461a      	mov	r2, r3
 80a288e:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a2892:	f7ff f865 	bl	80a1960 <system_ctrl_set_result>
        break;
    }
}
 80a2896:	b003      	add	sp, #12
 80a2898:	f85d fb04 	ldr.w	pc, [sp], #4
 80a289c:	20000260 	.word	0x20000260

080a28a0 <module_user_init_hook>:

void module_user_init_hook()
{
 80a28a0:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a28a2:	4c10      	ldr	r4, [pc, #64]	; (80a28e4 <module_user_init_hook+0x44>)
 80a28a4:	4d10      	ldr	r5, [pc, #64]	; (80a28e8 <module_user_init_hook+0x48>)
 80a28a6:	6823      	ldr	r3, [r4, #0]
 80a28a8:	42ab      	cmp	r3, r5
 80a28aa:	4b10      	ldr	r3, [pc, #64]	; (80a28ec <module_user_init_hook+0x4c>)
 80a28ac:	bf0c      	ite	eq
 80a28ae:	2201      	moveq	r2, #1
 80a28b0:	2200      	movne	r2, #0
 80a28b2:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a28b4:	d002      	beq.n	80a28bc <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a28b6:	f7ff ffbf 	bl	80a2838 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a28ba:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a28bc:	f7fe feac 	bl	80a1618 <HAL_RNG_GetRandomNumber>
 80a28c0:	4604      	mov	r4, r0
    srand(seed);
 80a28c2:	f002 f891 	bl	80a49e8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a28c6:	4b0a      	ldr	r3, [pc, #40]	; (80a28f0 <module_user_init_hook+0x50>)
 80a28c8:	b113      	cbz	r3, 80a28d0 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a28ca:	4620      	mov	r0, r4
 80a28cc:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a28d0:	2100      	movs	r1, #0
 80a28d2:	4807      	ldr	r0, [pc, #28]	; (80a28f0 <module_user_init_hook+0x50>)
 80a28d4:	f7ff f8ce 	bl	80a1a74 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a28d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a28dc:	2100      	movs	r1, #0
 80a28de:	4805      	ldr	r0, [pc, #20]	; (80a28f4 <module_user_init_hook+0x54>)
 80a28e0:	f7ff b834 	b.w	80a194c <system_ctrl_set_app_request_handler>
 80a28e4:	40024000 	.word	0x40024000
 80a28e8:	9a271c1e 	.word	0x9a271c1e
 80a28ec:	20000264 	.word	0x20000264
 80a28f0:	00000000 	.word	0x00000000
 80a28f4:	080a2869 	.word	0x080a2869

080a28f8 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
}

} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
 80a28f8:	b510      	push	{r4, lr}
 80a28fa:	b088      	sub	sp, #32
 80a28fc:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 80a28fe:	4668      	mov	r0, sp
 80a2900:	f7ff fcd1 	bl	80a22a6 <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
 80a2904:	4669      	mov	r1, sp
 80a2906:	a804      	add	r0, sp, #16
 80a2908:	f7ff fcef 	bl	80a22ea <_ZN6StringC1ERKS_>
 80a290c:	a804      	add	r0, sp, #16
 80a290e:	47a0      	blx	r4
 80a2910:	4604      	mov	r4, r0
 80a2912:	a804      	add	r0, sp, #16
 80a2914:	f7ff fc80 	bl	80a2218 <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 80a2918:	4668      	mov	r0, sp
 80a291a:	f7ff fc7d 	bl	80a2218 <_ZN6StringD1Ev>
    return (*fn)(p);
}
 80a291e:	4620      	mov	r0, r4
 80a2920:	b008      	add	sp, #32
 80a2922:	bd10      	pop	{r4, pc}

080a2924 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
 80a2924:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a2926:	4607      	mov	r7, r0
 80a2928:	460e      	mov	r6, r1
 80a292a:	4615      	mov	r5, r2
 80a292c:	b085      	sub	sp, #20
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
 80a292e:	2410      	movs	r4, #16
 80a2930:	4622      	mov	r2, r4
 80a2932:	2100      	movs	r1, #0
 80a2934:	4668      	mov	r0, sp
 80a2936:	f002 f84e 	bl	80a49d6 <memset>
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 80a293a:	2200      	movs	r2, #0
 80a293c:	4669      	mov	r1, sp
 80a293e:	4610      	mov	r0, r2
         size = sizeof(*this);
 80a2940:	f8ad 4000 	strh.w	r4, [sp]

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
 80a2944:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
 80a2946:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
 80a2948:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 80a294a:	f7ff f86b 	bl	80a1a24 <spark_function>
}
 80a294e:	b005      	add	sp, #20
 80a2950:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a2952 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a2952:	4770      	bx	lr

080a2954 <_ZN9IPAddressD0Ev>:
 80a2954:	b510      	push	{r4, lr}
 80a2956:	4604      	mov	r4, r0
 80a2958:	2118      	movs	r1, #24
 80a295a:	f000 fc6f 	bl	80a323c <_ZdlPvj>
 80a295e:	4620      	mov	r0, r4
 80a2960:	bd10      	pop	{r4, pc}

080a2962 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a2962:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2964:	460f      	mov	r7, r1
 80a2966:	f100 0608 	add.w	r6, r0, #8
 80a296a:	1d05      	adds	r5, r0, #4
 80a296c:	2400      	movs	r4, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
 80a296e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a2972:	220a      	movs	r2, #10
 80a2974:	4638      	mov	r0, r7
 80a2976:	f7ff fdb4 	bl	80a24e2 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a297a:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a297c:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a297e:	d007      	beq.n	80a2990 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a2980:	2c00      	cmp	r4, #0
 80a2982:	d0f4      	beq.n	80a296e <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a2984:	212e      	movs	r1, #46	; 0x2e
 80a2986:	4638      	mov	r0, r7
 80a2988:	f7ff fd92 	bl	80a24b0 <_ZN5Print5printEc>
 80a298c:	4404      	add	r4, r0
 80a298e:	e7ee      	b.n	80a296e <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a2990:	4620      	mov	r0, r4
 80a2992:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a2994 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a2994:	b510      	push	{r4, lr}
 80a2996:	4604      	mov	r4, r0
 80a2998:	4b04      	ldr	r3, [pc, #16]	; (80a29ac <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a299a:	2211      	movs	r2, #17
 80a299c:	f840 3b04 	str.w	r3, [r0], #4
 80a29a0:	2100      	movs	r1, #0
 80a29a2:	f002 f818 	bl	80a49d6 <memset>
{
    clear();
}
 80a29a6:	4620      	mov	r0, r4
 80a29a8:	bd10      	pop	{r4, pc}
 80a29aa:	bf00      	nop
 80a29ac:	080a6494 	.word	0x080a6494

080a29b0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a29b0:	4603      	mov	r3, r0
 80a29b2:	4a07      	ldr	r2, [pc, #28]	; (80a29d0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a29b4:	b510      	push	{r4, lr}
 80a29b6:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a29ba:	f101 0210 	add.w	r2, r1, #16
 80a29be:	f851 4b04 	ldr.w	r4, [r1], #4
 80a29c2:	4291      	cmp	r1, r2
 80a29c4:	f843 4b04 	str.w	r4, [r3], #4
 80a29c8:	d1f9      	bne.n	80a29be <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a29ca:	780a      	ldrb	r2, [r1, #0]
 80a29cc:	701a      	strb	r2, [r3, #0]
}
 80a29ce:	bd10      	pop	{r4, pc}
 80a29d0:	080a6494 	.word	0x080a6494

080a29d4 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a29d4:	4a02      	ldr	r2, [pc, #8]	; (80a29e0 <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a29d6:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a29d8:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a29da:	2204      	movs	r2, #4
 80a29dc:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a29de:	4770      	bx	lr
 80a29e0:	080a6494 	.word	0x080a6494

080a29e4 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a29e4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a29e6:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a29ea:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a29ee:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a29f2:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a29f6:	2304      	movs	r3, #4
 80a29f8:	6041      	str	r1, [r0, #4]
 80a29fa:	7503      	strb	r3, [r0, #20]
 80a29fc:	bd10      	pop	{r4, pc}
	...

080a2a00 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a2a00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a2a02:	4d04      	ldr	r5, [pc, #16]	; (80a2a14 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a2a04:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a2a06:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a2a0a:	9500      	str	r5, [sp, #0]
 80a2a0c:	f7ff ffea 	bl	80a29e4 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a2a10:	b003      	add	sp, #12
 80a2a12:	bd30      	pop	{r4, r5, pc}
 80a2a14:	080a6494 	.word	0x080a6494

080a2a18 <_ZN9IPAddressaSEPKh>:
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
 80a2a18:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
 80a2a1a:	780d      	ldrb	r5, [r1, #0]
 80a2a1c:	788b      	ldrb	r3, [r1, #2]
 80a2a1e:	784a      	ldrb	r2, [r1, #1]
 80a2a20:	78c9      	ldrb	r1, [r1, #3]
 80a2a22:	9100      	str	r1, [sp, #0]
 80a2a24:	4629      	mov	r1, r5
 80a2a26:	f7ff ffdd 	bl	80a29e4 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
 80a2a2a:	b003      	add	sp, #12
 80a2a2c:	bd30      	pop	{r4, r5, pc}
	...

080a2a30 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(uint32_t address)
{
    *this = address;
}

IPAddress::IPAddress(const uint8_t* address)
 80a2a30:	b510      	push	{r4, lr}
 80a2a32:	4604      	mov	r4, r0
 80a2a34:	4b02      	ldr	r3, [pc, #8]	; (80a2a40 <_ZN9IPAddressC1EPKh+0x10>)
 80a2a36:	6003      	str	r3, [r0, #0]
{
    *this = address;
 80a2a38:	f7ff ffee 	bl	80a2a18 <_ZN9IPAddressaSEPKh>
}
 80a2a3c:	4620      	mov	r0, r4
 80a2a3e:	bd10      	pop	{r4, pc}
 80a2a40:	080a6494 	.word	0x080a6494

080a2a44 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a2a44:	7441      	strb	r1, [r0, #17]
 80a2a46:	4770      	bx	lr

080a2a48 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a2a48:	4770      	bx	lr

080a2a4a <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80a2a4a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a2a4c:	2100      	movs	r1, #0
 80a2a4e:	7c00      	ldrb	r0, [r0, #16]
 80a2a50:	f7fe ff0c 	bl	80a186c <HAL_USB_USART_Receive_Data>
}
 80a2a54:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a2a58:	bf28      	it	cs
 80a2a5a:	f04f 30ff 	movcs.w	r0, #4294967295
 80a2a5e:	bd08      	pop	{r3, pc}

080a2a60 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80a2a60:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a2a62:	2101      	movs	r1, #1
 80a2a64:	7c00      	ldrb	r0, [r0, #16]
 80a2a66:	f7fe ff01 	bl	80a186c <HAL_USB_USART_Receive_Data>
}
 80a2a6a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a2a6e:	bf28      	it	cs
 80a2a70:	f04f 30ff 	movcs.w	r0, #4294967295
 80a2a74:	bd08      	pop	{r3, pc}

080a2a76 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80a2a76:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a2a78:	7c00      	ldrb	r0, [r0, #16]
 80a2a7a:	f7fe feef 	bl	80a185c <HAL_USB_USART_Available_Data_For_Write>
}
 80a2a7e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2a82:	bd08      	pop	{r3, pc}

080a2a84 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80a2a84:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a2a86:	7c00      	ldrb	r0, [r0, #16]
 80a2a88:	f7fe fee0 	bl	80a184c <HAL_USB_USART_Available_Data>
}
 80a2a8c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2a90:	bd08      	pop	{r3, pc}

080a2a92 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a2a92:	7c00      	ldrb	r0, [r0, #16]
 80a2a94:	f7fe befa 	b.w	80a188c <HAL_USB_USART_Flush_Data>

080a2a98 <_ZN9USBSerialD0Ev>:
 80a2a98:	b510      	push	{r4, lr}
 80a2a9a:	4604      	mov	r4, r0
 80a2a9c:	2114      	movs	r1, #20
 80a2a9e:	f000 fbcd 	bl	80a323c <_ZdlPvj>
 80a2aa2:	4620      	mov	r0, r4
 80a2aa4:	bd10      	pop	{r4, pc}

080a2aa6 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a2aa6:	b538      	push	{r3, r4, r5, lr}
 80a2aa8:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a2aaa:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a2aac:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a2aae:	f7fe fed5 	bl	80a185c <HAL_USB_USART_Available_Data_For_Write>
 80a2ab2:	2800      	cmp	r0, #0
 80a2ab4:	dc01      	bgt.n	80a2aba <_ZN9USBSerial5writeEh+0x14>
 80a2ab6:	7c60      	ldrb	r0, [r4, #17]
 80a2ab8:	b128      	cbz	r0, 80a2ac6 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a2aba:	4629      	mov	r1, r5
 80a2abc:	7c20      	ldrb	r0, [r4, #16]
 80a2abe:	f7fe fedd 	bl	80a187c <HAL_USB_USART_Send_Data>
 80a2ac2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 80a2ac6:	bd38      	pop	{r3, r4, r5, pc}

080a2ac8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a2ac8:	b510      	push	{r4, lr}
 80a2aca:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a2acc:	2300      	movs	r3, #0
 80a2ace:	6063      	str	r3, [r4, #4]
 80a2ad0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a2ad4:	60a3      	str	r3, [r4, #8]
 80a2ad6:	4b05      	ldr	r3, [pc, #20]	; (80a2aec <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a2ad8:	4608      	mov	r0, r1
 80a2ada:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a2adc:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a2ade:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a2ae0:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a2ae2:	4611      	mov	r1, r2
 80a2ae4:	f7fe fea2 	bl	80a182c <HAL_USB_USART_Init>
}
 80a2ae8:	4620      	mov	r0, r4
 80a2aea:	bd10      	pop	{r4, pc}
 80a2aec:	080a64a8 	.word	0x080a64a8

080a2af0 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a2af0:	2200      	movs	r2, #0
 80a2af2:	7c00      	ldrb	r0, [r0, #16]
 80a2af4:	f7fe bea2 	b.w	80a183c <HAL_USB_USART_Begin>

080a2af8 <_Z19acquireSerialBufferv>:
 80a2af8:	b510      	push	{r4, lr}
 80a2afa:	4604      	mov	r4, r0
 80a2afc:	2214      	movs	r2, #20
 80a2afe:	2100      	movs	r1, #0
 80a2b00:	f001 ff69 	bl	80a49d6 <memset>
 80a2b04:	4620      	mov	r0, r4
 80a2b06:	bd10      	pop	{r4, pc}

080a2b08 <_Z16_fetch_usbserialv>:

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a2b08:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a2b0a:	4d0e      	ldr	r5, [pc, #56]	; (80a2b44 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a2b0c:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a2b0e:	a801      	add	r0, sp, #4
 80a2b10:	f7ff fff2 	bl	80a2af8 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a2b14:	6829      	ldr	r1, [r5, #0]
 80a2b16:	f011 0401 	ands.w	r4, r1, #1
 80a2b1a:	d110      	bne.n	80a2b3e <_Z16_fetch_usbserialv+0x36>
 80a2b1c:	4628      	mov	r0, r5
 80a2b1e:	f7fd fac4 	bl	80a00aa <__cxa_guard_acquire>
 80a2b22:	b160      	cbz	r0, 80a2b3e <_Z16_fetch_usbserialv+0x36>
 80a2b24:	aa01      	add	r2, sp, #4
 80a2b26:	4621      	mov	r1, r4
 80a2b28:	4807      	ldr	r0, [pc, #28]	; (80a2b48 <_Z16_fetch_usbserialv+0x40>)
 80a2b2a:	f7ff ffcd 	bl	80a2ac8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a2b2e:	4628      	mov	r0, r5
 80a2b30:	f7fd fac0 	bl	80a00b4 <__cxa_guard_release>
 80a2b34:	4a05      	ldr	r2, [pc, #20]	; (80a2b4c <_Z16_fetch_usbserialv+0x44>)
 80a2b36:	4906      	ldr	r1, [pc, #24]	; (80a2b50 <_Z16_fetch_usbserialv+0x48>)
 80a2b38:	4803      	ldr	r0, [pc, #12]	; (80a2b48 <_Z16_fetch_usbserialv+0x40>)
 80a2b3a:	f000 fb71 	bl	80a3220 <__aeabi_atexit>
	return _usbserial;
}
 80a2b3e:	4802      	ldr	r0, [pc, #8]	; (80a2b48 <_Z16_fetch_usbserialv+0x40>)
 80a2b40:	b007      	add	sp, #28
 80a2b42:	bd30      	pop	{r4, r5, pc}
 80a2b44:	20000268 	.word	0x20000268
 80a2b48:	20000270 	.word	0x20000270
 80a2b4c:	200000bc 	.word	0x200000bc
 80a2b50:	080a2a49 	.word	0x080a2a49

080a2b54 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a2b54:	b510      	push	{r4, lr}
 80a2b56:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a2b58:	2214      	movs	r2, #20
 80a2b5a:	2100      	movs	r1, #0
 80a2b5c:	f001 ff3b 	bl	80a49d6 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a2b60:	4620      	mov	r0, r4
 80a2b62:	bd10      	pop	{r4, pc}

080a2b64 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a2b64:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a2b66:	4c0e      	ldr	r4, [pc, #56]	; (80a2ba0 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a2b68:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a2b6a:	a801      	add	r0, sp, #4
 80a2b6c:	f7ff fff2 	bl	80a2b54 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a2b70:	6823      	ldr	r3, [r4, #0]
 80a2b72:	07db      	lsls	r3, r3, #31
 80a2b74:	d410      	bmi.n	80a2b98 <_Z17_fetch_usbserial1v+0x34>
 80a2b76:	4620      	mov	r0, r4
 80a2b78:	f7fd fa97 	bl	80a00aa <__cxa_guard_acquire>
 80a2b7c:	b160      	cbz	r0, 80a2b98 <_Z17_fetch_usbserial1v+0x34>
 80a2b7e:	aa01      	add	r2, sp, #4
 80a2b80:	2101      	movs	r1, #1
 80a2b82:	4808      	ldr	r0, [pc, #32]	; (80a2ba4 <_Z17_fetch_usbserial1v+0x40>)
 80a2b84:	f7ff ffa0 	bl	80a2ac8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a2b88:	4620      	mov	r0, r4
 80a2b8a:	f7fd fa93 	bl	80a00b4 <__cxa_guard_release>
 80a2b8e:	4a06      	ldr	r2, [pc, #24]	; (80a2ba8 <_Z17_fetch_usbserial1v+0x44>)
 80a2b90:	4906      	ldr	r1, [pc, #24]	; (80a2bac <_Z17_fetch_usbserial1v+0x48>)
 80a2b92:	4804      	ldr	r0, [pc, #16]	; (80a2ba4 <_Z17_fetch_usbserial1v+0x40>)
 80a2b94:	f000 fb44 	bl	80a3220 <__aeabi_atexit>
  return _usbserial1;
}
 80a2b98:	4802      	ldr	r0, [pc, #8]	; (80a2ba4 <_Z17_fetch_usbserial1v+0x40>)
 80a2b9a:	b006      	add	sp, #24
 80a2b9c:	bd10      	pop	{r4, pc}
 80a2b9e:	bf00      	nop
 80a2ba0:	2000026c 	.word	0x2000026c
 80a2ba4:	20000284 	.word	0x20000284
 80a2ba8:	200000bc 	.word	0x200000bc
 80a2bac:	080a2a49 	.word	0x080a2a49

080a2bb0 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a2bb0:	4770      	bx	lr

080a2bb2 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a2bb2:	7441      	strb	r1, [r0, #17]
 80a2bb4:	4770      	bx	lr

080a2bb6 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80a2bb6:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80a2bb8:	7c00      	ldrb	r0, [r0, #16]
 80a2bba:	f7fe fdad 	bl	80a1718 <HAL_USART_Available_Data_For_Write>
}
 80a2bbe:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2bc2:	bd08      	pop	{r3, pc}

080a2bc4 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a2bc4:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80a2bc6:	7c00      	ldrb	r0, [r0, #16]
 80a2bc8:	f7fe fd7e 	bl	80a16c8 <HAL_USART_Available_Data>
}
 80a2bcc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2bd0:	bd08      	pop	{r3, pc}

080a2bd2 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a2bd2:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80a2bd4:	7c00      	ldrb	r0, [r0, #16]
 80a2bd6:	f7fe fd87 	bl	80a16e8 <HAL_USART_Peek_Data>
}
 80a2bda:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a2bde:	bf28      	it	cs
 80a2be0:	f04f 30ff 	movcs.w	r0, #4294967295
 80a2be4:	bd08      	pop	{r3, pc}

080a2be6 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a2be6:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80a2be8:	7c00      	ldrb	r0, [r0, #16]
 80a2bea:	f7fe fd75 	bl	80a16d8 <HAL_USART_Read_Data>
}
 80a2bee:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a2bf2:	bf28      	it	cs
 80a2bf4:	f04f 30ff 	movcs.w	r0, #4294967295
 80a2bf8:	bd08      	pop	{r3, pc}

080a2bfa <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a2bfa:	7c00      	ldrb	r0, [r0, #16]
 80a2bfc:	f7fe bd7c 	b.w	80a16f8 <HAL_USART_Flush_Data>

080a2c00 <_ZN11USARTSerialD0Ev>:
 80a2c00:	b510      	push	{r4, lr}
 80a2c02:	4604      	mov	r4, r0
 80a2c04:	2114      	movs	r1, #20
 80a2c06:	f000 fb19 	bl	80a323c <_ZdlPvj>
 80a2c0a:	4620      	mov	r0, r4
 80a2c0c:	bd10      	pop	{r4, pc}

080a2c0e <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a2c0e:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a2c10:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a2c12:	4604      	mov	r4, r0
 80a2c14:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a2c16:	b925      	cbnz	r5, 80a2c22 <_ZN11USARTSerial5writeEh+0x14>
 80a2c18:	7c00      	ldrb	r0, [r0, #16]
 80a2c1a:	f7fe fd7d 	bl	80a1718 <HAL_USART_Available_Data_For_Write>
 80a2c1e:	2800      	cmp	r0, #0
 80a2c20:	dd05      	ble.n	80a2c2e <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a2c22:	4631      	mov	r1, r6
 80a2c24:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a2c26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a2c2a:	f7fe bd45 	b.w	80a16b8 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a2c2e:	4628      	mov	r0, r5
 80a2c30:	bd70      	pop	{r4, r5, r6, pc}
	...

080a2c34 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a2c34:	b510      	push	{r4, lr}
 80a2c36:	4604      	mov	r4, r0
 80a2c38:	4608      	mov	r0, r1
 80a2c3a:	4611      	mov	r1, r2
 80a2c3c:	2200      	movs	r2, #0
 80a2c3e:	6062      	str	r2, [r4, #4]
 80a2c40:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a2c44:	60a2      	str	r2, [r4, #8]
 80a2c46:	4a05      	ldr	r2, [pc, #20]	; (80a2c5c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a2c48:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a2c4a:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a2c4c:	2201      	movs	r2, #1
 80a2c4e:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a2c50:	461a      	mov	r2, r3
 80a2c52:	f7fe fd29 	bl	80a16a8 <HAL_USART_Init>
}
 80a2c56:	4620      	mov	r0, r4
 80a2c58:	bd10      	pop	{r4, pc}
 80a2c5a:	bf00      	nop
 80a2c5c:	080a64d8 	.word	0x080a64d8

080a2c60 <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
 80a2c60:	2300      	movs	r3, #0
 80a2c62:	7c00      	ldrb	r0, [r0, #16]
 80a2c64:	f7fe bd60 	b.w	80a1728 <HAL_USART_BeginConfig>

080a2c68 <_ZN11USARTSerial5beginEm>:
}
// Public Methods //////////////////////////////////////////////////////////////

void USARTSerial::begin(unsigned long baud)
{
  begin(baud, SERIAL_8N1);
 80a2c68:	2200      	movs	r2, #0
 80a2c6a:	f7ff bff9 	b.w	80a2c60 <_ZN11USARTSerial5beginEmm>

080a2c6e <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a2c6e:	7c00      	ldrb	r0, [r0, #16]
 80a2c70:	f7fe bd4a 	b.w	80a1708 <HAL_USART_Is_Enabled>

080a2c74 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a2c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
#else
  if (!serial1_rx_buffer) {
 80a2c76:	4c19      	ldr	r4, [pc, #100]	; (80a2cdc <_Z22__fetch_global_Serial1v+0x68>)
 80a2c78:	6825      	ldr	r5, [r4, #0]
 80a2c7a:	b94d      	cbnz	r5, 80a2c90 <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new Ring_Buffer();
 80a2c7c:	2084      	movs	r0, #132	; 0x84
 80a2c7e:	f7fd fa0c 	bl	80a009a <_Znwj>
 80a2c82:	4606      	mov	r6, r0
 80a2c84:	b118      	cbz	r0, 80a2c8e <_Z22__fetch_global_Serial1v+0x1a>
 80a2c86:	2284      	movs	r2, #132	; 0x84
 80a2c88:	4629      	mov	r1, r5
 80a2c8a:	f001 fea4 	bl	80a49d6 <memset>
 80a2c8e:	6026      	str	r6, [r4, #0]
  }
  if (!serial1_tx_buffer) {
 80a2c90:	4d13      	ldr	r5, [pc, #76]	; (80a2ce0 <_Z22__fetch_global_Serial1v+0x6c>)
 80a2c92:	682e      	ldr	r6, [r5, #0]
 80a2c94:	b94e      	cbnz	r6, 80a2caa <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new Ring_Buffer();
 80a2c96:	2084      	movs	r0, #132	; 0x84
 80a2c98:	f7fd f9ff 	bl	80a009a <_Znwj>
 80a2c9c:	4607      	mov	r7, r0
 80a2c9e:	b118      	cbz	r0, 80a2ca8 <_Z22__fetch_global_Serial1v+0x34>
 80a2ca0:	2284      	movs	r2, #132	; 0x84
 80a2ca2:	4631      	mov	r1, r6
 80a2ca4:	f001 fe97 	bl	80a49d6 <memset>
 80a2ca8:	602f      	str	r7, [r5, #0]
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
 80a2caa:	4f0e      	ldr	r7, [pc, #56]	; (80a2ce4 <_Z22__fetch_global_Serial1v+0x70>)
 80a2cac:	6839      	ldr	r1, [r7, #0]
 80a2cae:	f011 0601 	ands.w	r6, r1, #1
 80a2cb2:	d111      	bne.n	80a2cd8 <_Z22__fetch_global_Serial1v+0x64>
 80a2cb4:	4638      	mov	r0, r7
 80a2cb6:	f7fd f9f8 	bl	80a00aa <__cxa_guard_acquire>
 80a2cba:	b168      	cbz	r0, 80a2cd8 <_Z22__fetch_global_Serial1v+0x64>
 80a2cbc:	6822      	ldr	r2, [r4, #0]
 80a2cbe:	4631      	mov	r1, r6
 80a2cc0:	682b      	ldr	r3, [r5, #0]
 80a2cc2:	4809      	ldr	r0, [pc, #36]	; (80a2ce8 <_Z22__fetch_global_Serial1v+0x74>)
 80a2cc4:	f7ff ffb6 	bl	80a2c34 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a2cc8:	4638      	mov	r0, r7
 80a2cca:	f7fd f9f3 	bl	80a00b4 <__cxa_guard_release>
 80a2cce:	4a07      	ldr	r2, [pc, #28]	; (80a2cec <_Z22__fetch_global_Serial1v+0x78>)
 80a2cd0:	4907      	ldr	r1, [pc, #28]	; (80a2cf0 <_Z22__fetch_global_Serial1v+0x7c>)
 80a2cd2:	4805      	ldr	r0, [pc, #20]	; (80a2ce8 <_Z22__fetch_global_Serial1v+0x74>)
 80a2cd4:	f000 faa4 	bl	80a3220 <__aeabi_atexit>
#endif
	return serial1;
}
 80a2cd8:	4803      	ldr	r0, [pc, #12]	; (80a2ce8 <_Z22__fetch_global_Serial1v+0x74>)
 80a2cda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a2cdc:	200002b4 	.word	0x200002b4
 80a2ce0:	200002ac 	.word	0x200002ac
 80a2ce4:	200002b0 	.word	0x200002b0
 80a2ce8:	20000298 	.word	0x20000298
 80a2cec:	200000bc 	.word	0x200000bc
 80a2cf0:	080a2bb1 	.word	0x080a2bb1

080a2cf4 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
 80a2cf4:	4770      	bx	lr

080a2cf6 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a2cf6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2cf8:	4606      	mov	r6, r0
 80a2cfa:	4615      	mov	r5, r2
 80a2cfc:	460c      	mov	r4, r1
 80a2cfe:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a2d00:	42bc      	cmp	r4, r7
 80a2d02:	d006      	beq.n	80a2d12 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a2d04:	6833      	ldr	r3, [r6, #0]
 80a2d06:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a2d0a:	689b      	ldr	r3, [r3, #8]
 80a2d0c:	4630      	mov	r0, r6
 80a2d0e:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a2d10:	e7f6      	b.n	80a2d00 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a2d12:	4628      	mov	r0, r5
 80a2d14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a2d16 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a2d16:	2200      	movs	r2, #0
 80a2d18:	7c00      	ldrb	r0, [r0, #16]
 80a2d1a:	f7fe bd0d 	b.w	80a1738 <HAL_I2C_Write_Data>

080a2d1e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a2d1e:	2100      	movs	r1, #0
 80a2d20:	7c00      	ldrb	r0, [r0, #16]
 80a2d22:	f7fe bd11 	b.w	80a1748 <HAL_I2C_Available_Data>

080a2d26 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a2d26:	2100      	movs	r1, #0
 80a2d28:	7c00      	ldrb	r0, [r0, #16]
 80a2d2a:	f7fe bd15 	b.w	80a1758 <HAL_I2C_Read_Data>

080a2d2e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a2d2e:	2100      	movs	r1, #0
 80a2d30:	7c00      	ldrb	r0, [r0, #16]
 80a2d32:	f7fe bd19 	b.w	80a1768 <HAL_I2C_Peek_Data>

080a2d36 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a2d36:	2100      	movs	r1, #0
 80a2d38:	7c00      	ldrb	r0, [r0, #16]
 80a2d3a:	f7fe bd1d 	b.w	80a1778 <HAL_I2C_Flush_Data>

080a2d3e <_ZN7TwoWireD0Ev>:
 80a2d3e:	b510      	push	{r4, lr}
 80a2d40:	4604      	mov	r4, r0
 80a2d42:	2114      	movs	r1, #20
 80a2d44:	f000 fa7a 	bl	80a323c <_ZdlPvj>
 80a2d48:	4620      	mov	r0, r4
 80a2d4a:	bd10      	pop	{r4, pc}

080a2d4c <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
 80a2d4c:	b510      	push	{r4, lr}
 80a2d4e:	4604      	mov	r4, r0
 80a2d50:	2300      	movs	r3, #0
 80a2d52:	6063      	str	r3, [r4, #4]
 80a2d54:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a2d58:	60a3      	str	r3, [r4, #8]
 80a2d5a:	4b04      	ldr	r3, [pc, #16]	; (80a2d6c <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
 80a2d5c:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
 80a2d5e:	4608      	mov	r0, r1
 80a2d60:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
 80a2d62:	4611      	mov	r1, r2
 80a2d64:	f7fe fd18 	bl	80a1798 <HAL_I2C_Init>
}
 80a2d68:	4620      	mov	r0, r4
 80a2d6a:	bd10      	pop	{r4, pc}
 80a2d6c:	080a6508 	.word	0x080a6508

080a2d70 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a2d70:	2100      	movs	r1, #0
 80a2d72:	7c00      	ldrb	r0, [r0, #16]
 80a2d74:	f7fe bd08 	b.w	80a1788 <HAL_I2C_Is_Enabled>

080a2d78 <_ZN10WiFiSignalD1Ev>:
    int rssi = 2;
    int qual = 0;

    WiFiSignal() {}
    WiFiSignal(const wlan_connected_info_t& inf);
    virtual ~WiFiSignal() {};
 80a2d78:	4770      	bx	lr

080a2d7a <_ZNK10WiFiSignal19getAccessTechnologyEv>:
    return true;
}

hal_net_access_tech_t WiFiSignal::getAccessTechnology() const {
    return NET_ACCESS_TECHNOLOGY_WIFI;
}
 80a2d7a:	2001      	movs	r0, #1
 80a2d7c:	4770      	bx	lr
	...

080a2d80 <_ZNK10WiFiSignal16getStrengthValueEv>:
        return inf_.strength / 65535.0f * 100.0f;
    }
    return -1.0f;
}

float WiFiSignal::getStrengthValue() const {
 80a2d80:	b508      	push	{r3, lr}
    if (inf_.size != 0 && inf_.rssi != std::numeric_limits<int32_t>::min()) {
 80a2d82:	8983      	ldrh	r3, [r0, #12]
 80a2d84:	b11b      	cbz	r3, 80a2d8e <_ZNK10WiFiSignal16getStrengthValueEv+0xe>
 80a2d86:	6900      	ldr	r0, [r0, #16]
 80a2d88:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 80a2d8c:	d101      	bne.n	80a2d92 <_ZNK10WiFiSignal16getStrengthValueEv+0x12>
        return inf_.rssi / 100.0f;
    }
    return 0.0f;
 80a2d8e:	2000      	movs	r0, #0
 80a2d90:	bd08      	pop	{r3, pc}
    return -1.0f;
}

float WiFiSignal::getStrengthValue() const {
    if (inf_.size != 0 && inf_.rssi != std::numeric_limits<int32_t>::min()) {
        return inf_.rssi / 100.0f;
 80a2d92:	f001 f8db 	bl	80a3f4c <__aeabi_i2f>
 80a2d96:	4902      	ldr	r1, [pc, #8]	; (80a2da0 <_ZNK10WiFiSignal16getStrengthValueEv+0x20>)
 80a2d98:	f001 f9e0 	bl	80a415c <__aeabi_fdiv>
    }
    return 0.0f;
}
 80a2d9c:	bd08      	pop	{r3, pc}
 80a2d9e:	bf00      	nop
 80a2da0:	42c80000 	.word	0x42c80000

080a2da4 <_ZNK10WiFiSignal15getQualityValueEv>:
        return inf_.quality / 65535.0f * 100.0f;
    }
    return -1.0f;
}

float WiFiSignal::getQualityValue() const {
 80a2da4:	b508      	push	{r3, lr}
    if (inf_.size != 0 && inf_.snr != std::numeric_limits<int32_t>::min()) {
 80a2da6:	8983      	ldrh	r3, [r0, #12]
 80a2da8:	b11b      	cbz	r3, 80a2db2 <_ZNK10WiFiSignal15getQualityValueEv+0xe>
 80a2daa:	6980      	ldr	r0, [r0, #24]
 80a2dac:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 80a2db0:	d101      	bne.n	80a2db6 <_ZNK10WiFiSignal15getQualityValueEv+0x12>
        return inf_.snr / 100.0f;
    }
    return 0.0f;
 80a2db2:	2000      	movs	r0, #0
 80a2db4:	bd08      	pop	{r3, pc}
    return -1.0f;
}

float WiFiSignal::getQualityValue() const {
    if (inf_.size != 0 && inf_.snr != std::numeric_limits<int32_t>::min()) {
        return inf_.snr / 100.0f;
 80a2db6:	f001 f8c9 	bl	80a3f4c <__aeabi_i2f>
 80a2dba:	4902      	ldr	r1, [pc, #8]	; (80a2dc4 <_ZNK10WiFiSignal15getQualityValueEv+0x20>)
 80a2dbc:	f001 f9ce 	bl	80a415c <__aeabi_fdiv>
    }
    return 0.0f;
}
 80a2dc0:	bd08      	pop	{r3, pc}
 80a2dc2:	bf00      	nop
 80a2dc4:	42c80000 	.word	0x42c80000

080a2dc8 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a2dc8:	2200      	movs	r2, #0
 80a2dca:	4611      	mov	r1, r2
 80a2dcc:	6840      	ldr	r0, [r0, #4]
 80a2dce:	f7fe bde9 	b.w	80a19a4 <network_ready>

080a2dd2 <_ZN10WiFiSignalD0Ev>:
    int rssi = 2;
    int qual = 0;

    WiFiSignal() {}
    WiFiSignal(const wlan_connected_info_t& inf);
    virtual ~WiFiSignal() {};
 80a2dd2:	b510      	push	{r4, lr}
 80a2dd4:	4604      	mov	r4, r0
 80a2dd6:	2124      	movs	r1, #36	; 0x24
 80a2dd8:	f000 fa30 	bl	80a323c <_ZdlPvj>
 80a2ddc:	4620      	mov	r0, r4
 80a2dde:	bd10      	pop	{r4, pc}

080a2de0 <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a2de0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a2de2:	4616      	mov	r6, r2
 80a2de4:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a2de6:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a2de8:	460f      	mov	r7, r1
 80a2dea:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a2dec:	2100      	movs	r1, #0
 80a2dee:	a803      	add	r0, sp, #12
 80a2df0:	f001 fdf1 	bl	80a49d6 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a2df4:	4630      	mov	r0, r6
 80a2df6:	f002 fb45 	bl	80a5484 <strlen>
 80a2dfa:	2500      	movs	r5, #0
 80a2dfc:	9500      	str	r5, [sp, #0]
 80a2dfe:	b281      	uxth	r1, r0
 80a2e00:	687b      	ldr	r3, [r7, #4]
 80a2e02:	aa03      	add	r2, sp, #12
 80a2e04:	4630      	mov	r0, r6
 80a2e06:	f7fe fd51 	bl	80a18ac <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a2e0a:	b120      	cbz	r0, 80a2e16 <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a2e0c:	4629      	mov	r1, r5
 80a2e0e:	4620      	mov	r0, r4
 80a2e10:	f7ff fde0 	bl	80a29d4 <_ZN9IPAddressC1Em>
 80a2e14:	e003      	b.n	80a2e1e <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a2e16:	a903      	add	r1, sp, #12
 80a2e18:	4620      	mov	r0, r4
 80a2e1a:	f7ff fdc9 	bl	80a29b0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a2e1e:	4620      	mov	r0, r4
 80a2e20:	b009      	add	sp, #36	; 0x24
 80a2e22:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a2e24 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a2e24:	2200      	movs	r2, #0
 80a2e26:	4611      	mov	r1, r2
 80a2e28:	6840      	ldr	r0, [r0, #4]
 80a2e2a:	f7fe bddb 	b.w	80a19e4 <network_listening>

080a2e2e <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a2e2e:	2200      	movs	r2, #0
 80a2e30:	4611      	mov	r1, r2
 80a2e32:	6840      	ldr	r0, [r0, #4]
 80a2e34:	f7fe bde6 	b.w	80a1a04 <network_get_listen_timeout>

080a2e38 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a2e38:	2200      	movs	r2, #0
 80a2e3a:	6840      	ldr	r0, [r0, #4]
 80a2e3c:	f7fe bdda 	b.w	80a19f4 <network_set_listen_timeout>

080a2e40 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a2e40:	2200      	movs	r2, #0
 80a2e42:	f081 0101 	eor.w	r1, r1, #1
 80a2e46:	6840      	ldr	r0, [r0, #4]
 80a2e48:	f7fe bdc4 	b.w	80a19d4 <network_listen>

080a2e4c <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a2e4c:	2300      	movs	r3, #0
 80a2e4e:	461a      	mov	r2, r3
 80a2e50:	4619      	mov	r1, r3
 80a2e52:	6840      	ldr	r0, [r0, #4]
 80a2e54:	f7fe bdb6 	b.w	80a19c4 <network_off>

080a2e58 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a2e58:	2200      	movs	r2, #0
 80a2e5a:	4611      	mov	r1, r2
 80a2e5c:	6840      	ldr	r0, [r0, #4]
 80a2e5e:	f7fe bd91 	b.w	80a1984 <network_connecting>

080a2e62 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a2e62:	2200      	movs	r2, #0
 80a2e64:	2102      	movs	r1, #2
 80a2e66:	6840      	ldr	r0, [r0, #4]
 80a2e68:	f7fe bd94 	b.w	80a1994 <network_disconnect>

080a2e6c <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a2e6c:	2300      	movs	r3, #0
 80a2e6e:	461a      	mov	r2, r3
 80a2e70:	6840      	ldr	r0, [r0, #4]
 80a2e72:	f7fe bd7f 	b.w	80a1974 <network_connect>
	...

080a2e78 <_ZNK10WiFiSignal10getQualityEv>:
        return inf_.rssi / 100.0f;
    }
    return 0.0f;
}

float WiFiSignal::getQuality() const {
 80a2e78:	b508      	push	{r3, lr}
    if (inf_.size != 0 && inf_.quality >= 0) {
 80a2e7a:	8983      	ldrh	r3, [r0, #12]
 80a2e7c:	b15b      	cbz	r3, 80a2e96 <_ZNK10WiFiSignal10getQualityEv+0x1e>
 80a2e7e:	6a00      	ldr	r0, [r0, #32]
 80a2e80:	2800      	cmp	r0, #0
 80a2e82:	db08      	blt.n	80a2e96 <_ZNK10WiFiSignal10getQualityEv+0x1e>
        return inf_.quality / 65535.0f * 100.0f;
 80a2e84:	f001 f862 	bl	80a3f4c <__aeabi_i2f>
 80a2e88:	4904      	ldr	r1, [pc, #16]	; (80a2e9c <_ZNK10WiFiSignal10getQualityEv+0x24>)
 80a2e8a:	f001 f967 	bl	80a415c <__aeabi_fdiv>
 80a2e8e:	4904      	ldr	r1, [pc, #16]	; (80a2ea0 <_ZNK10WiFiSignal10getQualityEv+0x28>)
 80a2e90:	f001 f8b0 	bl	80a3ff4 <__aeabi_fmul>
 80a2e94:	bd08      	pop	{r3, pc}
    }
    return -1.0f;
 80a2e96:	4803      	ldr	r0, [pc, #12]	; (80a2ea4 <_ZNK10WiFiSignal10getQualityEv+0x2c>)
}
 80a2e98:	bd08      	pop	{r3, pc}
 80a2e9a:	bf00      	nop
 80a2e9c:	477fff00 	.word	0x477fff00
 80a2ea0:	42c80000 	.word	0x42c80000
 80a2ea4:	bf800000 	.word	0xbf800000

080a2ea8 <_ZNK10WiFiSignal11getStrengthEv>:

hal_net_access_tech_t WiFiSignal::getAccessTechnology() const {
    return NET_ACCESS_TECHNOLOGY_WIFI;
}

float WiFiSignal::getStrength() const {
 80a2ea8:	b508      	push	{r3, lr}
    if (inf_.size != 0 && inf_.strength >= 0) {
 80a2eaa:	8983      	ldrh	r3, [r0, #12]
 80a2eac:	b15b      	cbz	r3, 80a2ec6 <_ZNK10WiFiSignal11getStrengthEv+0x1e>
 80a2eae:	6940      	ldr	r0, [r0, #20]
 80a2eb0:	2800      	cmp	r0, #0
 80a2eb2:	db08      	blt.n	80a2ec6 <_ZNK10WiFiSignal11getStrengthEv+0x1e>
        return inf_.strength / 65535.0f * 100.0f;
 80a2eb4:	f001 f84a 	bl	80a3f4c <__aeabi_i2f>
 80a2eb8:	4904      	ldr	r1, [pc, #16]	; (80a2ecc <_ZNK10WiFiSignal11getStrengthEv+0x24>)
 80a2eba:	f001 f94f 	bl	80a415c <__aeabi_fdiv>
 80a2ebe:	4904      	ldr	r1, [pc, #16]	; (80a2ed0 <_ZNK10WiFiSignal11getStrengthEv+0x28>)
 80a2ec0:	f001 f898 	bl	80a3ff4 <__aeabi_fmul>
 80a2ec4:	bd08      	pop	{r3, pc}
    }
    return -1.0f;
 80a2ec6:	4803      	ldr	r0, [pc, #12]	; (80a2ed4 <_ZNK10WiFiSignal11getStrengthEv+0x2c>)
}
 80a2ec8:	bd08      	pop	{r3, pc}
 80a2eca:	bf00      	nop
 80a2ecc:	477fff00 	.word	0x477fff00
 80a2ed0:	42c80000 	.word	0x42c80000
 80a2ed4:	bf800000 	.word	0xbf800000

080a2ed8 <_ZNK10WiFiSignalcvaEv>:
    : inf_(inf) {
}

WiFiSignal::operator int8_t() const {
    return this->rssi;
}
 80a2ed8:	f990 0004 	ldrsb.w	r0, [r0, #4]
 80a2edc:	4770      	bx	lr

080a2ede <_ZN10WiFiSignal17fromConnectedInfoERK21wlan_connected_info_t>:

bool WiFiSignal::fromConnectedInfo(const wlan_connected_info_t& inf) {
 80a2ede:	b570      	push	{r4, r5, r6, lr}
    inf_ = inf;
 80a2ee0:	460d      	mov	r5, r1

WiFiSignal::operator int8_t() const {
    return this->rssi;
}

bool WiFiSignal::fromConnectedInfo(const wlan_connected_info_t& inf) {
 80a2ee2:	4606      	mov	r6, r0
    inf_ = inf;
 80a2ee4:	f100 040c 	add.w	r4, r0, #12
 80a2ee8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a2eea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a2eec:	e895 0003 	ldmia.w	r5, {r0, r1}
 80a2ef0:	e884 0003 	stmia.w	r4, {r0, r1}
    this->rssi = inf_.rssi != std::numeric_limits<int32_t>::min() ? inf_.rssi / 100 : 2;
 80a2ef4:	6933      	ldr	r3, [r6, #16]
    this->qual = inf_.snr != std::numeric_limits<int32_t>::min() ? inf_.snr / 100 : 0;
    return true;
}
 80a2ef6:	2001      	movs	r0, #1
    return this->rssi;
}

bool WiFiSignal::fromConnectedInfo(const wlan_connected_info_t& inf) {
    inf_ = inf;
    this->rssi = inf_.rssi != std::numeric_limits<int32_t>::min() ? inf_.rssi / 100 : 2;
 80a2ef8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a2efc:	bf1a      	itte	ne
 80a2efe:	2264      	movne	r2, #100	; 0x64
 80a2f00:	fb93 f3f2 	sdivne	r3, r3, r2
 80a2f04:	2302      	moveq	r3, #2
 80a2f06:	6073      	str	r3, [r6, #4]
    this->qual = inf_.snr != std::numeric_limits<int32_t>::min() ? inf_.snr / 100 : 0;
 80a2f08:	69b3      	ldr	r3, [r6, #24]
 80a2f0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a2f0e:	bf1a      	itte	ne
 80a2f10:	2264      	movne	r2, #100	; 0x64
 80a2f12:	fb93 f3f2 	sdivne	r3, r3, r2
 80a2f16:	2300      	moveq	r3, #0
 80a2f18:	60b3      	str	r3, [r6, #8]
    return true;
}
 80a2f1a:	bd70      	pop	{r4, r5, r6, pc}

080a2f1c <_ZN5spark9WiFiClass4RSSIEv>:
    int WiFiClass::getCredentials(WiFiAccessPoint* results, size_t result_count) {
        APList apList(results, result_count);
        return apList.start();
    }

    WiFiSignal WiFiClass::RSSI() {
 80a2f1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a2f20:	4688      	mov	r8, r1
public:
    // In order to be compatible with CellularSignal
    int rssi = 2;
    int qual = 0;

    WiFiSignal() {}
 80a2f22:	4b16      	ldr	r3, [pc, #88]	; (80a2f7c <_ZN5spark9WiFiClass4RSSIEv+0x60>)
 80a2f24:	2500      	movs	r5, #0
 80a2f26:	2702      	movs	r7, #2
 80a2f28:	2618      	movs	r6, #24
 80a2f2a:	b086      	sub	sp, #24
 80a2f2c:	6003      	str	r3, [r0, #0]
 80a2f2e:	6047      	str	r7, [r0, #4]
 80a2f30:	6085      	str	r5, [r0, #8]
 80a2f32:	4632      	mov	r2, r6
 80a2f34:	4629      	mov	r1, r5
 80a2f36:	4604      	mov	r4, r0
 80a2f38:	300c      	adds	r0, #12
 80a2f3a:	f001 fd4c 	bl	80a49d6 <memset>
        WiFiSignal sig;
        if (!network_ready(*this, 0, NULL)) {
 80a2f3e:	462a      	mov	r2, r5
 80a2f40:	4629      	mov	r1, r5
 80a2f42:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80a2f46:	f7fe fd2d 	bl	80a19a4 <network_ready>
 80a2f4a:	b190      	cbz	r0, 80a2f72 <_ZN5spark9WiFiClass4RSSIEv+0x56>
            return sig;
        }

        wlan_connected_info_t info = {0};
 80a2f4c:	4632      	mov	r2, r6
 80a2f4e:	4629      	mov	r1, r5
 80a2f50:	4668      	mov	r0, sp
 80a2f52:	f001 fd40 	bl	80a49d6 <memset>
        info.size = sizeof(info);
        int r = wlan_connected_info(nullptr, &info, nullptr);
 80a2f56:	462a      	mov	r2, r5
 80a2f58:	4669      	mov	r1, sp
 80a2f5a:	4628      	mov	r0, r5
        if (!network_ready(*this, 0, NULL)) {
            return sig;
        }

        wlan_connected_info_t info = {0};
        info.size = sizeof(info);
 80a2f5c:	f8ad 6000 	strh.w	r6, [sp]
        int r = wlan_connected_info(nullptr, &info, nullptr);
 80a2f60:	f7fe fcac 	bl	80a18bc <wlan_connected_info>
        if (r == 0) {
 80a2f64:	b920      	cbnz	r0, 80a2f70 <_ZN5spark9WiFiClass4RSSIEv+0x54>
            sig.fromConnectedInfo(info);
 80a2f66:	4669      	mov	r1, sp
 80a2f68:	4620      	mov	r0, r4
 80a2f6a:	f7ff ffb8 	bl	80a2ede <_ZN10WiFiSignal17fromConnectedInfoERK21wlan_connected_info_t>
            return sig;
 80a2f6e:	e000      	b.n	80a2f72 <_ZN5spark9WiFiClass4RSSIEv+0x56>
        }

        sig.rssi = 2;
 80a2f70:	6067      	str	r7, [r4, #4]
        return sig;
    }
 80a2f72:	4620      	mov	r0, r4
 80a2f74:	b006      	add	sp, #24
 80a2f76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a2f7a:	bf00      	nop
 80a2f7c:	080a6564 	.word	0x080a6564

080a2f80 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a2f80:	4b02      	ldr	r3, [pc, #8]	; (80a2f8c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a2f82:	2204      	movs	r2, #4
 80a2f84:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a2f86:	4a02      	ldr	r2, [pc, #8]	; (80a2f90 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a2f88:	601a      	str	r2, [r3, #0]
 80a2f8a:	4770      	bx	lr
 80a2f8c:	200002b8 	.word	0x200002b8
 80a2f90:	080a6530 	.word	0x080a6530

080a2f94 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a2f94:	2300      	movs	r3, #0
 80a2f96:	461a      	mov	r2, r3
 80a2f98:	6840      	ldr	r0, [r0, #4]
 80a2f9a:	f7fe bceb 	b.w	80a1974 <network_connect>

080a2f9e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a2f9e:	2200      	movs	r2, #0
 80a2fa0:	2102      	movs	r1, #2
 80a2fa2:	6840      	ldr	r0, [r0, #4]
 80a2fa4:	f7fe bcf6 	b.w	80a1994 <network_disconnect>

080a2fa8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a2fa8:	2200      	movs	r2, #0
 80a2faa:	4611      	mov	r1, r2
 80a2fac:	6840      	ldr	r0, [r0, #4]
 80a2fae:	f7fe bce9 	b.w	80a1984 <network_connecting>

080a2fb2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a2fb2:	2200      	movs	r2, #0
 80a2fb4:	4611      	mov	r1, r2
 80a2fb6:	6840      	ldr	r0, [r0, #4]
 80a2fb8:	f7fe bcf4 	b.w	80a19a4 <network_ready>

080a2fbc <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a2fbc:	2300      	movs	r3, #0
 80a2fbe:	461a      	mov	r2, r3
 80a2fc0:	4619      	mov	r1, r3
 80a2fc2:	6840      	ldr	r0, [r0, #4]
 80a2fc4:	f7fe bcf6 	b.w	80a19b4 <network_on>

080a2fc8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a2fc8:	2300      	movs	r3, #0
 80a2fca:	461a      	mov	r2, r3
 80a2fcc:	4619      	mov	r1, r3
 80a2fce:	6840      	ldr	r0, [r0, #4]
 80a2fd0:	f7fe bcf8 	b.w	80a19c4 <network_off>

080a2fd4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a2fd4:	2200      	movs	r2, #0
 80a2fd6:	f081 0101 	eor.w	r1, r1, #1
 80a2fda:	6840      	ldr	r0, [r0, #4]
 80a2fdc:	f7fe bcfa 	b.w	80a19d4 <network_listen>

080a2fe0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a2fe0:	2200      	movs	r2, #0
 80a2fe2:	6840      	ldr	r0, [r0, #4]
 80a2fe4:	f7fe bd06 	b.w	80a19f4 <network_set_listen_timeout>

080a2fe8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a2fe8:	2200      	movs	r2, #0
 80a2fea:	4611      	mov	r1, r2
 80a2fec:	6840      	ldr	r0, [r0, #4]
 80a2fee:	f7fe bd09 	b.w	80a1a04 <network_get_listen_timeout>

080a2ff2 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a2ff2:	2200      	movs	r2, #0
 80a2ff4:	4611      	mov	r1, r2
 80a2ff6:	6840      	ldr	r0, [r0, #4]
 80a2ff8:	f7fe bcf4 	b.w	80a19e4 <network_listening>

080a2ffc <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a2ffc:	b570      	push	{r4, r5, r6, lr}
 80a2ffe:	4616      	mov	r6, r2
 80a3000:	b08e      	sub	sp, #56	; 0x38
 80a3002:	4604      	mov	r4, r0
    IPAddress addr;
 80a3004:	a808      	add	r0, sp, #32
 80a3006:	f7ff fcc5 	bl	80a2994 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a300a:	2211      	movs	r2, #17
 80a300c:	2100      	movs	r1, #0
 80a300e:	a803      	add	r0, sp, #12
 80a3010:	f001 fce1 	bl	80a49d6 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a3014:	4630      	mov	r0, r6
 80a3016:	f002 fa35 	bl	80a5484 <strlen>
 80a301a:	2500      	movs	r5, #0
 80a301c:	4b0a      	ldr	r3, [pc, #40]	; (80a3048 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a301e:	9500      	str	r5, [sp, #0]
 80a3020:	b281      	uxth	r1, r0
 80a3022:	685b      	ldr	r3, [r3, #4]
 80a3024:	aa03      	add	r2, sp, #12
 80a3026:	4630      	mov	r0, r6
 80a3028:	f7fe fc40 	bl	80a18ac <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a302c:	b120      	cbz	r0, 80a3038 <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a302e:	4629      	mov	r1, r5
 80a3030:	4620      	mov	r0, r4
 80a3032:	f7ff fccf 	bl	80a29d4 <_ZN9IPAddressC1Em>
 80a3036:	e003      	b.n	80a3040 <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a3038:	a903      	add	r1, sp, #12
 80a303a:	4620      	mov	r0, r4
 80a303c:	f7ff fcb8 	bl	80a29b0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a3040:	4620      	mov	r0, r4
 80a3042:	b00e      	add	sp, #56	; 0x38
 80a3044:	bd70      	pop	{r4, r5, r6, pc}
 80a3046:	bf00      	nop
 80a3048:	200002b8 	.word	0x200002b8

080a304c <_ZN5spark12NetworkClass4fromEm>:
        return Cellular;
#endif
    default:
        return Network;
    }
}
 80a304c:	4b03      	ldr	r3, [pc, #12]	; (80a305c <_ZN5spark12NetworkClass4fromEm+0x10>)
 80a304e:	4a04      	ldr	r2, [pc, #16]	; (80a3060 <_ZN5spark12NetworkClass4fromEm+0x14>)
 80a3050:	2804      	cmp	r0, #4
 80a3052:	bf0c      	ite	eq
 80a3054:	4610      	moveq	r0, r2
 80a3056:	4618      	movne	r0, r3
 80a3058:	4770      	bx	lr
 80a305a:	bf00      	nop
 80a305c:	200002c0 	.word	0x200002c0
 80a3060:	200002b8 	.word	0x200002b8

080a3064 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80a3064:	4b02      	ldr	r3, [pc, #8]	; (80a3070 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a3066:	4a03      	ldr	r2, [pc, #12]	; (80a3074 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a3068:	601a      	str	r2, [r3, #0]
 80a306a:	2200      	movs	r2, #0
 80a306c:	605a      	str	r2, [r3, #4]
 80a306e:	4770      	bx	lr
 80a3070:	200002c0 	.word	0x200002c0
 80a3074:	080a6588 	.word	0x080a6588

080a3078 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a3078:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a307a:	4e1a      	ldr	r6, [pc, #104]	; (80a30e4 <pinAvailable+0x6c>)
 80a307c:	4604      	mov	r4, r0
 80a307e:	6831      	ldr	r1, [r6, #0]
 80a3080:	f011 0501 	ands.w	r5, r1, #1
 80a3084:	d10f      	bne.n	80a30a6 <pinAvailable+0x2e>
 80a3086:	4630      	mov	r0, r6
 80a3088:	f7fd f80f 	bl	80a00aa <__cxa_guard_acquire>
 80a308c:	b158      	cbz	r0, 80a30a6 <pinAvailable+0x2e>
 80a308e:	4629      	mov	r1, r5
 80a3090:	4815      	ldr	r0, [pc, #84]	; (80a30e8 <pinAvailable+0x70>)
 80a3092:	f7fe fd3d 	bl	80a1b10 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a3096:	4630      	mov	r0, r6
 80a3098:	f7fd f80c 	bl	80a00b4 <__cxa_guard_release>
 80a309c:	4a13      	ldr	r2, [pc, #76]	; (80a30ec <pinAvailable+0x74>)
 80a309e:	4914      	ldr	r1, [pc, #80]	; (80a30f0 <pinAvailable+0x78>)
 80a30a0:	4811      	ldr	r0, [pc, #68]	; (80a30e8 <pinAvailable+0x70>)
 80a30a2:	f000 f8bd 	bl	80a3220 <__aeabi_atexit>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
 80a30a6:	4810      	ldr	r0, [pc, #64]	; (80a30e8 <pinAvailable+0x70>)
 80a30a8:	f7fe fd57 	bl	80a1b5a <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a30ac:	b128      	cbz	r0, 80a30ba <pinAvailable+0x42>
 80a30ae:	f1a4 030d 	sub.w	r3, r4, #13
 80a30b2:	2b02      	cmp	r3, #2
 80a30b4:	d801      	bhi.n	80a30ba <pinAvailable+0x42>
  {
    return 0; // 'pin' is used
 80a30b6:	2000      	movs	r0, #0
 80a30b8:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a30ba:	f000 f88b 	bl	80a31d4 <_Z19__fetch_global_Wirev>
 80a30be:	f7ff fe57 	bl	80a2d70 <_ZN7TwoWire9isEnabledEv>
 80a30c2:	b108      	cbz	r0, 80a30c8 <pinAvailable+0x50>
 80a30c4:	2c01      	cmp	r4, #1
 80a30c6:	d9f6      	bls.n	80a30b6 <pinAvailable+0x3e>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a30c8:	f7ff fdd4 	bl	80a2c74 <_Z22__fetch_global_Serial1v>
 80a30cc:	f7ff fdcf 	bl	80a2c6e <_ZN11USARTSerial9isEnabledEv>
 80a30d0:	b118      	cbz	r0, 80a30da <pinAvailable+0x62>
 80a30d2:	f1a4 0312 	sub.w	r3, r4, #18
 80a30d6:	2b01      	cmp	r3, #1
 80a30d8:	d9ed      	bls.n	80a30b6 <pinAvailable+0x3e>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a30da:	2c17      	cmp	r4, #23
 80a30dc:	bf8c      	ite	hi
 80a30de:	2000      	movhi	r0, #0
 80a30e0:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a30e2:	bd70      	pop	{r4, r5, r6, pc}
 80a30e4:	200000c0 	.word	0x200000c0
 80a30e8:	200000c4 	.word	0x200000c4
 80a30ec:	200000bc 	.word	0x200000bc
 80a30f0:	080a0289 	.word	0x080a0289

080a30f4 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a30f4:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a30f6:	b538      	push	{r3, r4, r5, lr}
 80a30f8:	4604      	mov	r4, r0
 80a30fa:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a30fc:	d80a      	bhi.n	80a3114 <pinMode+0x20>
 80a30fe:	29ff      	cmp	r1, #255	; 0xff
 80a3100:	d008      	beq.n	80a3114 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a3102:	f7ff ffb9 	bl	80a3078 <pinAvailable>
 80a3106:	b128      	cbz	r0, 80a3114 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a3108:	4629      	mov	r1, r5
 80a310a:	4620      	mov	r0, r4
}
 80a310c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a3110:	f7fe ba42 	b.w	80a1598 <HAL_Pin_Mode>
 80a3114:	bd38      	pop	{r3, r4, r5, pc}

080a3116 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a3116:	b538      	push	{r3, r4, r5, lr}
 80a3118:	4604      	mov	r4, r0
 80a311a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a311c:	f7fe fa44 	bl	80a15a8 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a3120:	28ff      	cmp	r0, #255	; 0xff
 80a3122:	d010      	beq.n	80a3146 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80a3124:	2806      	cmp	r0, #6
 80a3126:	d804      	bhi.n	80a3132 <digitalWrite+0x1c>
 80a3128:	234d      	movs	r3, #77	; 0x4d
 80a312a:	fa23 f000 	lsr.w	r0, r3, r0
 80a312e:	07c3      	lsls	r3, r0, #31
 80a3130:	d409      	bmi.n	80a3146 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a3132:	4620      	mov	r0, r4
 80a3134:	f7ff ffa0 	bl	80a3078 <pinAvailable>
 80a3138:	b128      	cbz	r0, 80a3146 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a313a:	4629      	mov	r1, r5
 80a313c:	4620      	mov	r0, r4
}
 80a313e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a3142:	f7fe ba39 	b.w	80a15b8 <HAL_GPIO_Write>
 80a3146:	bd38      	pop	{r3, r4, r5, pc}

080a3148 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 80a3148:	b510      	push	{r4, lr}
 80a314a:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a314c:	f7fe fa2c 	bl	80a15a8 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
 80a3150:	3804      	subs	r0, #4
 80a3152:	b2c0      	uxtb	r0, r0
 80a3154:	2801      	cmp	r0, #1
 80a3156:	d908      	bls.n	80a316a <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 80a3158:	4620      	mov	r0, r4
 80a315a:	f7ff ff8d 	bl	80a3078 <pinAvailable>
 80a315e:	b120      	cbz	r0, 80a316a <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a3160:	4620      	mov	r0, r4
}
 80a3162:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a3166:	f7fe ba2f 	b.w	80a15c8 <HAL_GPIO_Read>
}
 80a316a:	2000      	movs	r0, #0
 80a316c:	bd10      	pop	{r4, pc}
	...

080a3170 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a3170:	b513      	push	{r0, r1, r4, lr}
 80a3172:	4c08      	ldr	r4, [pc, #32]	; (80a3194 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a3174:	2300      	movs	r3, #0
 80a3176:	461a      	mov	r2, r3
 80a3178:	4619      	mov	r1, r3
 80a317a:	9300      	str	r3, [sp, #0]
 80a317c:	4620      	mov	r0, r4
 80a317e:	f7ff fc3f 	bl	80a2a00 <_ZN9IPAddressC1Ehhhh>
 80a3182:	4620      	mov	r0, r4
 80a3184:	4a04      	ldr	r2, [pc, #16]	; (80a3198 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a3186:	4905      	ldr	r1, [pc, #20]	; (80a319c <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a3188:	b002      	add	sp, #8
 80a318a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a318e:	f000 b847 	b.w	80a3220 <__aeabi_atexit>
 80a3192:	bf00      	nop
 80a3194:	200002cc 	.word	0x200002cc
 80a3198:	200000bc 	.word	0x200000bc
 80a319c:	080a2953 	.word	0x080a2953

080a31a0 <_Z17acquireWireBufferv>:
}

} // anonymous

HAL_I2C_Config __attribute__((weak)) acquireWireBuffer()
{
 80a31a0:	b570      	push	{r4, r5, r6, lr}
 80a31a2:	4604      	mov	r4, r0
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a31a4:	2514      	movs	r5, #20
 80a31a6:	462a      	mov	r2, r5

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a31a8:	4e09      	ldr	r6, [pc, #36]	; (80a31d0 <_Z17acquireWireBufferv+0x30>)
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a31aa:	2100      	movs	r1, #0
 80a31ac:	f001 fc13 	bl	80a49d6 <memset>
 80a31b0:	8025      	strh	r5, [r4, #0]
 80a31b2:	2520      	movs	r5, #32

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a31b4:	4631      	mov	r1, r6
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a31b6:	60a5      	str	r5, [r4, #8]
 80a31b8:	6125      	str	r5, [r4, #16]

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a31ba:	4628      	mov	r0, r5
 80a31bc:	f000 f840 	bl	80a3240 <_ZnajRKSt9nothrow_t>
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a31c0:	4631      	mov	r1, r6
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a31c2:	6060      	str	r0, [r4, #4]
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a31c4:	4628      	mov	r0, r5
 80a31c6:	f000 f83b 	bl	80a3240 <_ZnajRKSt9nothrow_t>
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a31ca:	60e0      	str	r0, [r4, #12]
} // anonymous

HAL_I2C_Config __attribute__((weak)) acquireWireBuffer()
{
	return defaultWireConfig();
}
 80a31cc:	4620      	mov	r0, r4
 80a31ce:	bd70      	pop	{r4, r5, r6, pc}
 80a31d0:	080a65b4 	.word	0x080a65b4

080a31d4 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 80a31d4:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a31d6:	4d0e      	ldr	r5, [pc, #56]	; (80a3210 <_Z19__fetch_global_Wirev+0x3c>)
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 80a31d8:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a31da:	6829      	ldr	r1, [r5, #0]
 80a31dc:	f011 0401 	ands.w	r4, r1, #1
 80a31e0:	d113      	bne.n	80a320a <_Z19__fetch_global_Wirev+0x36>
 80a31e2:	4628      	mov	r0, r5
 80a31e4:	f7fc ff61 	bl	80a00aa <__cxa_guard_acquire>
 80a31e8:	b178      	cbz	r0, 80a320a <_Z19__fetch_global_Wirev+0x36>
 80a31ea:	a801      	add	r0, sp, #4
 80a31ec:	f7ff ffd8 	bl	80a31a0 <_Z17acquireWireBufferv>
 80a31f0:	aa01      	add	r2, sp, #4
 80a31f2:	4621      	mov	r1, r4
 80a31f4:	4807      	ldr	r0, [pc, #28]	; (80a3214 <_Z19__fetch_global_Wirev+0x40>)
 80a31f6:	f7ff fda9 	bl	80a2d4c <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
 80a31fa:	4628      	mov	r0, r5
 80a31fc:	f7fc ff5a 	bl	80a00b4 <__cxa_guard_release>
 80a3200:	4a05      	ldr	r2, [pc, #20]	; (80a3218 <_Z19__fetch_global_Wirev+0x44>)
 80a3202:	4906      	ldr	r1, [pc, #24]	; (80a321c <_Z19__fetch_global_Wirev+0x48>)
 80a3204:	4803      	ldr	r0, [pc, #12]	; (80a3214 <_Z19__fetch_global_Wirev+0x40>)
 80a3206:	f000 f80b 	bl	80a3220 <__aeabi_atexit>
	return wire;
}
 80a320a:	4802      	ldr	r0, [pc, #8]	; (80a3214 <_Z19__fetch_global_Wirev+0x40>)
 80a320c:	b007      	add	sp, #28
 80a320e:	bd30      	pop	{r4, r5, pc}
 80a3210:	200002e4 	.word	0x200002e4
 80a3214:	200002e8 	.word	0x200002e8
 80a3218:	200000bc 	.word	0x200000bc
 80a321c:	080a2cf5 	.word	0x080a2cf5

080a3220 <__aeabi_atexit>:
 80a3220:	460b      	mov	r3, r1
 80a3222:	4601      	mov	r1, r0
 80a3224:	4618      	mov	r0, r3
 80a3226:	f001 bac5 	b.w	80a47b4 <__cxa_atexit>
	...

080a322c <_ZSt15get_new_handlerv>:
 80a322c:	4b02      	ldr	r3, [pc, #8]	; (80a3238 <_ZSt15get_new_handlerv+0xc>)
 80a322e:	6818      	ldr	r0, [r3, #0]
 80a3230:	f3bf 8f5f 	dmb	sy
 80a3234:	4770      	bx	lr
 80a3236:	bf00      	nop
 80a3238:	200002fc 	.word	0x200002fc

080a323c <_ZdlPvj>:
 80a323c:	f7fc bf31 	b.w	80a00a2 <_ZdlPv>

080a3240 <_ZnajRKSt9nothrow_t>:
 80a3240:	f000 b800 	b.w	80a3244 <_ZnwjRKSt9nothrow_t>

080a3244 <_ZnwjRKSt9nothrow_t>:
 80a3244:	b510      	push	{r4, lr}
 80a3246:	2800      	cmp	r0, #0
 80a3248:	bf14      	ite	ne
 80a324a:	4604      	movne	r4, r0
 80a324c:	2401      	moveq	r4, #1
 80a324e:	4620      	mov	r0, r4
 80a3250:	f7fe fc18 	bl	80a1a84 <malloc>
 80a3254:	b920      	cbnz	r0, 80a3260 <_ZnwjRKSt9nothrow_t+0x1c>
 80a3256:	f7ff ffe9 	bl	80a322c <_ZSt15get_new_handlerv>
 80a325a:	b108      	cbz	r0, 80a3260 <_ZnwjRKSt9nothrow_t+0x1c>
 80a325c:	4780      	blx	r0
 80a325e:	e7f6      	b.n	80a324e <_ZnwjRKSt9nothrow_t+0xa>
 80a3260:	bd10      	pop	{r4, pc}
	...

080a3264 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a3264:	4b18      	ldr	r3, [pc, #96]	; (80a32c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a3266:	681a      	ldr	r2, [r3, #0]
 80a3268:	07d1      	lsls	r1, r2, #31
 80a326a:	bf5c      	itt	pl
 80a326c:	2201      	movpl	r2, #1
 80a326e:	601a      	strpl	r2, [r3, #0]
 80a3270:	4b16      	ldr	r3, [pc, #88]	; (80a32cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a3272:	681a      	ldr	r2, [r3, #0]
 80a3274:	07d2      	lsls	r2, r2, #31
 80a3276:	bf5c      	itt	pl
 80a3278:	2201      	movpl	r2, #1
 80a327a:	601a      	strpl	r2, [r3, #0]
 80a327c:	4b14      	ldr	r3, [pc, #80]	; (80a32d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a327e:	681a      	ldr	r2, [r3, #0]
 80a3280:	07d0      	lsls	r0, r2, #31
 80a3282:	bf5c      	itt	pl
 80a3284:	2201      	movpl	r2, #1
 80a3286:	601a      	strpl	r2, [r3, #0]
 80a3288:	4b12      	ldr	r3, [pc, #72]	; (80a32d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a328a:	681a      	ldr	r2, [r3, #0]
 80a328c:	07d1      	lsls	r1, r2, #31
 80a328e:	bf5c      	itt	pl
 80a3290:	2201      	movpl	r2, #1
 80a3292:	601a      	strpl	r2, [r3, #0]
 80a3294:	4b10      	ldr	r3, [pc, #64]	; (80a32d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a3296:	681a      	ldr	r2, [r3, #0]
 80a3298:	07d2      	lsls	r2, r2, #31
 80a329a:	bf5c      	itt	pl
 80a329c:	2201      	movpl	r2, #1
 80a329e:	601a      	strpl	r2, [r3, #0]
 80a32a0:	4b0e      	ldr	r3, [pc, #56]	; (80a32dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a32a2:	681a      	ldr	r2, [r3, #0]
 80a32a4:	07d0      	lsls	r0, r2, #31
 80a32a6:	bf5c      	itt	pl
 80a32a8:	2201      	movpl	r2, #1
 80a32aa:	601a      	strpl	r2, [r3, #0]
 80a32ac:	4b0c      	ldr	r3, [pc, #48]	; (80a32e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a32ae:	681a      	ldr	r2, [r3, #0]
 80a32b0:	07d1      	lsls	r1, r2, #31
 80a32b2:	bf5c      	itt	pl
 80a32b4:	2201      	movpl	r2, #1
 80a32b6:	601a      	strpl	r2, [r3, #0]
 80a32b8:	4b0a      	ldr	r3, [pc, #40]	; (80a32e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a32ba:	681a      	ldr	r2, [r3, #0]
 80a32bc:	07d2      	lsls	r2, r2, #31
 80a32be:	bf5c      	itt	pl
 80a32c0:	2201      	movpl	r2, #1
 80a32c2:	601a      	strpl	r2, [r3, #0]
 80a32c4:	4770      	bx	lr
 80a32c6:	bf00      	nop
 80a32c8:	2000031c 	.word	0x2000031c
 80a32cc:	20000318 	.word	0x20000318
 80a32d0:	20000314 	.word	0x20000314
 80a32d4:	20000310 	.word	0x20000310
 80a32d8:	2000030c 	.word	0x2000030c
 80a32dc:	20000308 	.word	0x20000308
 80a32e0:	20000304 	.word	0x20000304
 80a32e4:	20000300 	.word	0x20000300

080a32e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a32e8:	4b24      	ldr	r3, [pc, #144]	; (80a337c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a32ea:	681a      	ldr	r2, [r3, #0]
 80a32ec:	07d0      	lsls	r0, r2, #31
 80a32ee:	bf5c      	itt	pl
 80a32f0:	2201      	movpl	r2, #1
 80a32f2:	601a      	strpl	r2, [r3, #0]
 80a32f4:	4b22      	ldr	r3, [pc, #136]	; (80a3380 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a32f6:	681a      	ldr	r2, [r3, #0]
 80a32f8:	07d1      	lsls	r1, r2, #31
 80a32fa:	bf5c      	itt	pl
 80a32fc:	2201      	movpl	r2, #1
 80a32fe:	601a      	strpl	r2, [r3, #0]
 80a3300:	4b20      	ldr	r3, [pc, #128]	; (80a3384 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a3302:	681a      	ldr	r2, [r3, #0]
 80a3304:	07d2      	lsls	r2, r2, #31
 80a3306:	bf5c      	itt	pl
 80a3308:	2201      	movpl	r2, #1
 80a330a:	601a      	strpl	r2, [r3, #0]
 80a330c:	4b1e      	ldr	r3, [pc, #120]	; (80a3388 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a330e:	681a      	ldr	r2, [r3, #0]
 80a3310:	07d0      	lsls	r0, r2, #31
 80a3312:	bf5c      	itt	pl
 80a3314:	2201      	movpl	r2, #1
 80a3316:	601a      	strpl	r2, [r3, #0]
 80a3318:	4b1c      	ldr	r3, [pc, #112]	; (80a338c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a331a:	681a      	ldr	r2, [r3, #0]
 80a331c:	07d1      	lsls	r1, r2, #31
 80a331e:	bf5c      	itt	pl
 80a3320:	2201      	movpl	r2, #1
 80a3322:	601a      	strpl	r2, [r3, #0]
 80a3324:	4b1a      	ldr	r3, [pc, #104]	; (80a3390 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a3326:	681a      	ldr	r2, [r3, #0]
 80a3328:	07d2      	lsls	r2, r2, #31
 80a332a:	bf5c      	itt	pl
 80a332c:	2201      	movpl	r2, #1
 80a332e:	601a      	strpl	r2, [r3, #0]
 80a3330:	4b18      	ldr	r3, [pc, #96]	; (80a3394 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a3332:	681a      	ldr	r2, [r3, #0]
 80a3334:	07d0      	lsls	r0, r2, #31
 80a3336:	bf5c      	itt	pl
 80a3338:	2201      	movpl	r2, #1
 80a333a:	601a      	strpl	r2, [r3, #0]
 80a333c:	4b16      	ldr	r3, [pc, #88]	; (80a3398 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a333e:	681a      	ldr	r2, [r3, #0]
 80a3340:	07d1      	lsls	r1, r2, #31
 80a3342:	bf5c      	itt	pl
 80a3344:	2201      	movpl	r2, #1
 80a3346:	601a      	strpl	r2, [r3, #0]
 80a3348:	4b14      	ldr	r3, [pc, #80]	; (80a339c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a334a:	681a      	ldr	r2, [r3, #0]
 80a334c:	07d2      	lsls	r2, r2, #31
 80a334e:	bf5c      	itt	pl
 80a3350:	2201      	movpl	r2, #1
 80a3352:	601a      	strpl	r2, [r3, #0]
 80a3354:	4b12      	ldr	r3, [pc, #72]	; (80a33a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a3356:	681a      	ldr	r2, [r3, #0]
 80a3358:	07d0      	lsls	r0, r2, #31
 80a335a:	bf5c      	itt	pl
 80a335c:	2201      	movpl	r2, #1
 80a335e:	601a      	strpl	r2, [r3, #0]
 80a3360:	4b10      	ldr	r3, [pc, #64]	; (80a33a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a3362:	681a      	ldr	r2, [r3, #0]
 80a3364:	07d1      	lsls	r1, r2, #31
 80a3366:	bf5c      	itt	pl
 80a3368:	2201      	movpl	r2, #1
 80a336a:	601a      	strpl	r2, [r3, #0]
 80a336c:	4b0e      	ldr	r3, [pc, #56]	; (80a33a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a336e:	681a      	ldr	r2, [r3, #0]
 80a3370:	07d2      	lsls	r2, r2, #31
 80a3372:	bf5c      	itt	pl
 80a3374:	2201      	movpl	r2, #1
 80a3376:	601a      	strpl	r2, [r3, #0]
 80a3378:	4770      	bx	lr
 80a337a:	bf00      	nop
 80a337c:	2000034c 	.word	0x2000034c
 80a3380:	20000348 	.word	0x20000348
 80a3384:	20000344 	.word	0x20000344
 80a3388:	20000340 	.word	0x20000340
 80a338c:	2000033c 	.word	0x2000033c
 80a3390:	20000338 	.word	0x20000338
 80a3394:	20000334 	.word	0x20000334
 80a3398:	20000330 	.word	0x20000330
 80a339c:	2000032c 	.word	0x2000032c
 80a33a0:	20000328 	.word	0x20000328
 80a33a4:	20000324 	.word	0x20000324
 80a33a8:	20000320 	.word	0x20000320

080a33ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a33ac:	4b24      	ldr	r3, [pc, #144]	; (80a3440 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a33ae:	681a      	ldr	r2, [r3, #0]
 80a33b0:	07d0      	lsls	r0, r2, #31
 80a33b2:	bf5c      	itt	pl
 80a33b4:	2201      	movpl	r2, #1
 80a33b6:	601a      	strpl	r2, [r3, #0]
 80a33b8:	4b22      	ldr	r3, [pc, #136]	; (80a3444 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a33ba:	681a      	ldr	r2, [r3, #0]
 80a33bc:	07d1      	lsls	r1, r2, #31
 80a33be:	bf5c      	itt	pl
 80a33c0:	2201      	movpl	r2, #1
 80a33c2:	601a      	strpl	r2, [r3, #0]
 80a33c4:	4b20      	ldr	r3, [pc, #128]	; (80a3448 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a33c6:	681a      	ldr	r2, [r3, #0]
 80a33c8:	07d2      	lsls	r2, r2, #31
 80a33ca:	bf5c      	itt	pl
 80a33cc:	2201      	movpl	r2, #1
 80a33ce:	601a      	strpl	r2, [r3, #0]
 80a33d0:	4b1e      	ldr	r3, [pc, #120]	; (80a344c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a33d2:	681a      	ldr	r2, [r3, #0]
 80a33d4:	07d0      	lsls	r0, r2, #31
 80a33d6:	bf5c      	itt	pl
 80a33d8:	2201      	movpl	r2, #1
 80a33da:	601a      	strpl	r2, [r3, #0]
 80a33dc:	4b1c      	ldr	r3, [pc, #112]	; (80a3450 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a33de:	681a      	ldr	r2, [r3, #0]
 80a33e0:	07d1      	lsls	r1, r2, #31
 80a33e2:	bf5c      	itt	pl
 80a33e4:	2201      	movpl	r2, #1
 80a33e6:	601a      	strpl	r2, [r3, #0]
 80a33e8:	4b1a      	ldr	r3, [pc, #104]	; (80a3454 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a33ea:	681a      	ldr	r2, [r3, #0]
 80a33ec:	07d2      	lsls	r2, r2, #31
 80a33ee:	bf5c      	itt	pl
 80a33f0:	2201      	movpl	r2, #1
 80a33f2:	601a      	strpl	r2, [r3, #0]
 80a33f4:	4b18      	ldr	r3, [pc, #96]	; (80a3458 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a33f6:	681a      	ldr	r2, [r3, #0]
 80a33f8:	07d0      	lsls	r0, r2, #31
 80a33fa:	bf5c      	itt	pl
 80a33fc:	2201      	movpl	r2, #1
 80a33fe:	601a      	strpl	r2, [r3, #0]
 80a3400:	4b16      	ldr	r3, [pc, #88]	; (80a345c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a3402:	681a      	ldr	r2, [r3, #0]
 80a3404:	07d1      	lsls	r1, r2, #31
 80a3406:	bf5c      	itt	pl
 80a3408:	2201      	movpl	r2, #1
 80a340a:	601a      	strpl	r2, [r3, #0]
 80a340c:	4b14      	ldr	r3, [pc, #80]	; (80a3460 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a340e:	681a      	ldr	r2, [r3, #0]
 80a3410:	07d2      	lsls	r2, r2, #31
 80a3412:	bf5c      	itt	pl
 80a3414:	2201      	movpl	r2, #1
 80a3416:	601a      	strpl	r2, [r3, #0]
 80a3418:	4b12      	ldr	r3, [pc, #72]	; (80a3464 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a341a:	681a      	ldr	r2, [r3, #0]
 80a341c:	07d0      	lsls	r0, r2, #31
 80a341e:	bf5c      	itt	pl
 80a3420:	2201      	movpl	r2, #1
 80a3422:	601a      	strpl	r2, [r3, #0]
 80a3424:	4b10      	ldr	r3, [pc, #64]	; (80a3468 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a3426:	681a      	ldr	r2, [r3, #0]
 80a3428:	07d1      	lsls	r1, r2, #31
 80a342a:	bf5c      	itt	pl
 80a342c:	2201      	movpl	r2, #1
 80a342e:	601a      	strpl	r2, [r3, #0]
 80a3430:	4b0e      	ldr	r3, [pc, #56]	; (80a346c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a3432:	681a      	ldr	r2, [r3, #0]
 80a3434:	07d2      	lsls	r2, r2, #31
 80a3436:	bf5c      	itt	pl
 80a3438:	2201      	movpl	r2, #1
 80a343a:	601a      	strpl	r2, [r3, #0]
 80a343c:	4770      	bx	lr
 80a343e:	bf00      	nop
 80a3440:	2000037c 	.word	0x2000037c
 80a3444:	20000378 	.word	0x20000378
 80a3448:	20000374 	.word	0x20000374
 80a344c:	20000370 	.word	0x20000370
 80a3450:	2000036c 	.word	0x2000036c
 80a3454:	20000368 	.word	0x20000368
 80a3458:	20000364 	.word	0x20000364
 80a345c:	20000360 	.word	0x20000360
 80a3460:	2000035c 	.word	0x2000035c
 80a3464:	20000358 	.word	0x20000358
 80a3468:	20000354 	.word	0x20000354
 80a346c:	20000350 	.word	0x20000350

080a3470 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a3470:	4b18      	ldr	r3, [pc, #96]	; (80a34d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a3472:	681a      	ldr	r2, [r3, #0]
 80a3474:	07d1      	lsls	r1, r2, #31
 80a3476:	bf5c      	itt	pl
 80a3478:	2201      	movpl	r2, #1
 80a347a:	601a      	strpl	r2, [r3, #0]
 80a347c:	4b16      	ldr	r3, [pc, #88]	; (80a34d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a347e:	681a      	ldr	r2, [r3, #0]
 80a3480:	07d2      	lsls	r2, r2, #31
 80a3482:	bf5c      	itt	pl
 80a3484:	2201      	movpl	r2, #1
 80a3486:	601a      	strpl	r2, [r3, #0]
 80a3488:	4b14      	ldr	r3, [pc, #80]	; (80a34dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a348a:	681a      	ldr	r2, [r3, #0]
 80a348c:	07d0      	lsls	r0, r2, #31
 80a348e:	bf5c      	itt	pl
 80a3490:	2201      	movpl	r2, #1
 80a3492:	601a      	strpl	r2, [r3, #0]
 80a3494:	4b12      	ldr	r3, [pc, #72]	; (80a34e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a3496:	681a      	ldr	r2, [r3, #0]
 80a3498:	07d1      	lsls	r1, r2, #31
 80a349a:	bf5c      	itt	pl
 80a349c:	2201      	movpl	r2, #1
 80a349e:	601a      	strpl	r2, [r3, #0]
 80a34a0:	4b10      	ldr	r3, [pc, #64]	; (80a34e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a34a2:	681a      	ldr	r2, [r3, #0]
 80a34a4:	07d2      	lsls	r2, r2, #31
 80a34a6:	bf5c      	itt	pl
 80a34a8:	2201      	movpl	r2, #1
 80a34aa:	601a      	strpl	r2, [r3, #0]
 80a34ac:	4b0e      	ldr	r3, [pc, #56]	; (80a34e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a34ae:	681a      	ldr	r2, [r3, #0]
 80a34b0:	07d0      	lsls	r0, r2, #31
 80a34b2:	bf5c      	itt	pl
 80a34b4:	2201      	movpl	r2, #1
 80a34b6:	601a      	strpl	r2, [r3, #0]
 80a34b8:	4b0c      	ldr	r3, [pc, #48]	; (80a34ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a34ba:	681a      	ldr	r2, [r3, #0]
 80a34bc:	07d1      	lsls	r1, r2, #31
 80a34be:	bf5c      	itt	pl
 80a34c0:	2201      	movpl	r2, #1
 80a34c2:	601a      	strpl	r2, [r3, #0]
 80a34c4:	4b0a      	ldr	r3, [pc, #40]	; (80a34f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a34c6:	681a      	ldr	r2, [r3, #0]
 80a34c8:	07d2      	lsls	r2, r2, #31
 80a34ca:	bf5c      	itt	pl
 80a34cc:	2201      	movpl	r2, #1
 80a34ce:	601a      	strpl	r2, [r3, #0]
 80a34d0:	4770      	bx	lr
 80a34d2:	bf00      	nop
 80a34d4:	2000039c 	.word	0x2000039c
 80a34d8:	20000398 	.word	0x20000398
 80a34dc:	20000394 	.word	0x20000394
 80a34e0:	20000390 	.word	0x20000390
 80a34e4:	2000038c 	.word	0x2000038c
 80a34e8:	20000388 	.word	0x20000388
 80a34ec:	20000384 	.word	0x20000384
 80a34f0:	20000380 	.word	0x20000380

080a34f4 <__aeabi_drsub>:
 80a34f4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a34f8:	e002      	b.n	80a3500 <__adddf3>
 80a34fa:	bf00      	nop

080a34fc <__aeabi_dsub>:
 80a34fc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a3500 <__adddf3>:
 80a3500:	b530      	push	{r4, r5, lr}
 80a3502:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a3506:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a350a:	ea94 0f05 	teq	r4, r5
 80a350e:	bf08      	it	eq
 80a3510:	ea90 0f02 	teqeq	r0, r2
 80a3514:	bf1f      	itttt	ne
 80a3516:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a351a:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a351e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a3522:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a3526:	f000 80e2 	beq.w	80a36ee <__adddf3+0x1ee>
 80a352a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a352e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a3532:	bfb8      	it	lt
 80a3534:	426d      	neglt	r5, r5
 80a3536:	dd0c      	ble.n	80a3552 <__adddf3+0x52>
 80a3538:	442c      	add	r4, r5
 80a353a:	ea80 0202 	eor.w	r2, r0, r2
 80a353e:	ea81 0303 	eor.w	r3, r1, r3
 80a3542:	ea82 0000 	eor.w	r0, r2, r0
 80a3546:	ea83 0101 	eor.w	r1, r3, r1
 80a354a:	ea80 0202 	eor.w	r2, r0, r2
 80a354e:	ea81 0303 	eor.w	r3, r1, r3
 80a3552:	2d36      	cmp	r5, #54	; 0x36
 80a3554:	bf88      	it	hi
 80a3556:	bd30      	pophi	{r4, r5, pc}
 80a3558:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a355c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a3560:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a3564:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a3568:	d002      	beq.n	80a3570 <__adddf3+0x70>
 80a356a:	4240      	negs	r0, r0
 80a356c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a3570:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a3574:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a3578:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a357c:	d002      	beq.n	80a3584 <__adddf3+0x84>
 80a357e:	4252      	negs	r2, r2
 80a3580:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a3584:	ea94 0f05 	teq	r4, r5
 80a3588:	f000 80a7 	beq.w	80a36da <__adddf3+0x1da>
 80a358c:	f1a4 0401 	sub.w	r4, r4, #1
 80a3590:	f1d5 0e20 	rsbs	lr, r5, #32
 80a3594:	db0d      	blt.n	80a35b2 <__adddf3+0xb2>
 80a3596:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a359a:	fa22 f205 	lsr.w	r2, r2, r5
 80a359e:	1880      	adds	r0, r0, r2
 80a35a0:	f141 0100 	adc.w	r1, r1, #0
 80a35a4:	fa03 f20e 	lsl.w	r2, r3, lr
 80a35a8:	1880      	adds	r0, r0, r2
 80a35aa:	fa43 f305 	asr.w	r3, r3, r5
 80a35ae:	4159      	adcs	r1, r3
 80a35b0:	e00e      	b.n	80a35d0 <__adddf3+0xd0>
 80a35b2:	f1a5 0520 	sub.w	r5, r5, #32
 80a35b6:	f10e 0e20 	add.w	lr, lr, #32
 80a35ba:	2a01      	cmp	r2, #1
 80a35bc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a35c0:	bf28      	it	cs
 80a35c2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a35c6:	fa43 f305 	asr.w	r3, r3, r5
 80a35ca:	18c0      	adds	r0, r0, r3
 80a35cc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a35d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a35d4:	d507      	bpl.n	80a35e6 <__adddf3+0xe6>
 80a35d6:	f04f 0e00 	mov.w	lr, #0
 80a35da:	f1dc 0c00 	rsbs	ip, ip, #0
 80a35de:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a35e2:	eb6e 0101 	sbc.w	r1, lr, r1
 80a35e6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a35ea:	d31b      	bcc.n	80a3624 <__adddf3+0x124>
 80a35ec:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a35f0:	d30c      	bcc.n	80a360c <__adddf3+0x10c>
 80a35f2:	0849      	lsrs	r1, r1, #1
 80a35f4:	ea5f 0030 	movs.w	r0, r0, rrx
 80a35f8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a35fc:	f104 0401 	add.w	r4, r4, #1
 80a3600:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a3604:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a3608:	f080 809a 	bcs.w	80a3740 <__adddf3+0x240>
 80a360c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a3610:	bf08      	it	eq
 80a3612:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a3616:	f150 0000 	adcs.w	r0, r0, #0
 80a361a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a361e:	ea41 0105 	orr.w	r1, r1, r5
 80a3622:	bd30      	pop	{r4, r5, pc}
 80a3624:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a3628:	4140      	adcs	r0, r0
 80a362a:	eb41 0101 	adc.w	r1, r1, r1
 80a362e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a3632:	f1a4 0401 	sub.w	r4, r4, #1
 80a3636:	d1e9      	bne.n	80a360c <__adddf3+0x10c>
 80a3638:	f091 0f00 	teq	r1, #0
 80a363c:	bf04      	itt	eq
 80a363e:	4601      	moveq	r1, r0
 80a3640:	2000      	moveq	r0, #0
 80a3642:	fab1 f381 	clz	r3, r1
 80a3646:	bf08      	it	eq
 80a3648:	3320      	addeq	r3, #32
 80a364a:	f1a3 030b 	sub.w	r3, r3, #11
 80a364e:	f1b3 0220 	subs.w	r2, r3, #32
 80a3652:	da0c      	bge.n	80a366e <__adddf3+0x16e>
 80a3654:	320c      	adds	r2, #12
 80a3656:	dd08      	ble.n	80a366a <__adddf3+0x16a>
 80a3658:	f102 0c14 	add.w	ip, r2, #20
 80a365c:	f1c2 020c 	rsb	r2, r2, #12
 80a3660:	fa01 f00c 	lsl.w	r0, r1, ip
 80a3664:	fa21 f102 	lsr.w	r1, r1, r2
 80a3668:	e00c      	b.n	80a3684 <__adddf3+0x184>
 80a366a:	f102 0214 	add.w	r2, r2, #20
 80a366e:	bfd8      	it	le
 80a3670:	f1c2 0c20 	rsble	ip, r2, #32
 80a3674:	fa01 f102 	lsl.w	r1, r1, r2
 80a3678:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a367c:	bfdc      	itt	le
 80a367e:	ea41 010c 	orrle.w	r1, r1, ip
 80a3682:	4090      	lslle	r0, r2
 80a3684:	1ae4      	subs	r4, r4, r3
 80a3686:	bfa2      	ittt	ge
 80a3688:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a368c:	4329      	orrge	r1, r5
 80a368e:	bd30      	popge	{r4, r5, pc}
 80a3690:	ea6f 0404 	mvn.w	r4, r4
 80a3694:	3c1f      	subs	r4, #31
 80a3696:	da1c      	bge.n	80a36d2 <__adddf3+0x1d2>
 80a3698:	340c      	adds	r4, #12
 80a369a:	dc0e      	bgt.n	80a36ba <__adddf3+0x1ba>
 80a369c:	f104 0414 	add.w	r4, r4, #20
 80a36a0:	f1c4 0220 	rsb	r2, r4, #32
 80a36a4:	fa20 f004 	lsr.w	r0, r0, r4
 80a36a8:	fa01 f302 	lsl.w	r3, r1, r2
 80a36ac:	ea40 0003 	orr.w	r0, r0, r3
 80a36b0:	fa21 f304 	lsr.w	r3, r1, r4
 80a36b4:	ea45 0103 	orr.w	r1, r5, r3
 80a36b8:	bd30      	pop	{r4, r5, pc}
 80a36ba:	f1c4 040c 	rsb	r4, r4, #12
 80a36be:	f1c4 0220 	rsb	r2, r4, #32
 80a36c2:	fa20 f002 	lsr.w	r0, r0, r2
 80a36c6:	fa01 f304 	lsl.w	r3, r1, r4
 80a36ca:	ea40 0003 	orr.w	r0, r0, r3
 80a36ce:	4629      	mov	r1, r5
 80a36d0:	bd30      	pop	{r4, r5, pc}
 80a36d2:	fa21 f004 	lsr.w	r0, r1, r4
 80a36d6:	4629      	mov	r1, r5
 80a36d8:	bd30      	pop	{r4, r5, pc}
 80a36da:	f094 0f00 	teq	r4, #0
 80a36de:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a36e2:	bf06      	itte	eq
 80a36e4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a36e8:	3401      	addeq	r4, #1
 80a36ea:	3d01      	subne	r5, #1
 80a36ec:	e74e      	b.n	80a358c <__adddf3+0x8c>
 80a36ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a36f2:	bf18      	it	ne
 80a36f4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a36f8:	d029      	beq.n	80a374e <__adddf3+0x24e>
 80a36fa:	ea94 0f05 	teq	r4, r5
 80a36fe:	bf08      	it	eq
 80a3700:	ea90 0f02 	teqeq	r0, r2
 80a3704:	d005      	beq.n	80a3712 <__adddf3+0x212>
 80a3706:	ea54 0c00 	orrs.w	ip, r4, r0
 80a370a:	bf04      	itt	eq
 80a370c:	4619      	moveq	r1, r3
 80a370e:	4610      	moveq	r0, r2
 80a3710:	bd30      	pop	{r4, r5, pc}
 80a3712:	ea91 0f03 	teq	r1, r3
 80a3716:	bf1e      	ittt	ne
 80a3718:	2100      	movne	r1, #0
 80a371a:	2000      	movne	r0, #0
 80a371c:	bd30      	popne	{r4, r5, pc}
 80a371e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a3722:	d105      	bne.n	80a3730 <__adddf3+0x230>
 80a3724:	0040      	lsls	r0, r0, #1
 80a3726:	4149      	adcs	r1, r1
 80a3728:	bf28      	it	cs
 80a372a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a372e:	bd30      	pop	{r4, r5, pc}
 80a3730:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a3734:	bf3c      	itt	cc
 80a3736:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a373a:	bd30      	popcc	{r4, r5, pc}
 80a373c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a3740:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a3744:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a3748:	f04f 0000 	mov.w	r0, #0
 80a374c:	bd30      	pop	{r4, r5, pc}
 80a374e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a3752:	bf1a      	itte	ne
 80a3754:	4619      	movne	r1, r3
 80a3756:	4610      	movne	r0, r2
 80a3758:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a375c:	bf1c      	itt	ne
 80a375e:	460b      	movne	r3, r1
 80a3760:	4602      	movne	r2, r0
 80a3762:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a3766:	bf06      	itte	eq
 80a3768:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a376c:	ea91 0f03 	teqeq	r1, r3
 80a3770:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a3774:	bd30      	pop	{r4, r5, pc}
 80a3776:	bf00      	nop

080a3778 <__aeabi_ui2d>:
 80a3778:	f090 0f00 	teq	r0, #0
 80a377c:	bf04      	itt	eq
 80a377e:	2100      	moveq	r1, #0
 80a3780:	4770      	bxeq	lr
 80a3782:	b530      	push	{r4, r5, lr}
 80a3784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a3788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a378c:	f04f 0500 	mov.w	r5, #0
 80a3790:	f04f 0100 	mov.w	r1, #0
 80a3794:	e750      	b.n	80a3638 <__adddf3+0x138>
 80a3796:	bf00      	nop

080a3798 <__aeabi_i2d>:
 80a3798:	f090 0f00 	teq	r0, #0
 80a379c:	bf04      	itt	eq
 80a379e:	2100      	moveq	r1, #0
 80a37a0:	4770      	bxeq	lr
 80a37a2:	b530      	push	{r4, r5, lr}
 80a37a4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a37a8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a37ac:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a37b0:	bf48      	it	mi
 80a37b2:	4240      	negmi	r0, r0
 80a37b4:	f04f 0100 	mov.w	r1, #0
 80a37b8:	e73e      	b.n	80a3638 <__adddf3+0x138>
 80a37ba:	bf00      	nop

080a37bc <__aeabi_f2d>:
 80a37bc:	0042      	lsls	r2, r0, #1
 80a37be:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a37c2:	ea4f 0131 	mov.w	r1, r1, rrx
 80a37c6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a37ca:	bf1f      	itttt	ne
 80a37cc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a37d0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a37d4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a37d8:	4770      	bxne	lr
 80a37da:	f092 0f00 	teq	r2, #0
 80a37de:	bf14      	ite	ne
 80a37e0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a37e4:	4770      	bxeq	lr
 80a37e6:	b530      	push	{r4, r5, lr}
 80a37e8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a37ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a37f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a37f4:	e720      	b.n	80a3638 <__adddf3+0x138>
 80a37f6:	bf00      	nop

080a37f8 <__aeabi_ul2d>:
 80a37f8:	ea50 0201 	orrs.w	r2, r0, r1
 80a37fc:	bf08      	it	eq
 80a37fe:	4770      	bxeq	lr
 80a3800:	b530      	push	{r4, r5, lr}
 80a3802:	f04f 0500 	mov.w	r5, #0
 80a3806:	e00a      	b.n	80a381e <__aeabi_l2d+0x16>

080a3808 <__aeabi_l2d>:
 80a3808:	ea50 0201 	orrs.w	r2, r0, r1
 80a380c:	bf08      	it	eq
 80a380e:	4770      	bxeq	lr
 80a3810:	b530      	push	{r4, r5, lr}
 80a3812:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a3816:	d502      	bpl.n	80a381e <__aeabi_l2d+0x16>
 80a3818:	4240      	negs	r0, r0
 80a381a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a381e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a3822:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a3826:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a382a:	f43f aedc 	beq.w	80a35e6 <__adddf3+0xe6>
 80a382e:	f04f 0203 	mov.w	r2, #3
 80a3832:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a3836:	bf18      	it	ne
 80a3838:	3203      	addne	r2, #3
 80a383a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a383e:	bf18      	it	ne
 80a3840:	3203      	addne	r2, #3
 80a3842:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a3846:	f1c2 0320 	rsb	r3, r2, #32
 80a384a:	fa00 fc03 	lsl.w	ip, r0, r3
 80a384e:	fa20 f002 	lsr.w	r0, r0, r2
 80a3852:	fa01 fe03 	lsl.w	lr, r1, r3
 80a3856:	ea40 000e 	orr.w	r0, r0, lr
 80a385a:	fa21 f102 	lsr.w	r1, r1, r2
 80a385e:	4414      	add	r4, r2
 80a3860:	e6c1      	b.n	80a35e6 <__adddf3+0xe6>
 80a3862:	bf00      	nop

080a3864 <__aeabi_dmul>:
 80a3864:	b570      	push	{r4, r5, r6, lr}
 80a3866:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a386a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a386e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a3872:	bf1d      	ittte	ne
 80a3874:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a3878:	ea94 0f0c 	teqne	r4, ip
 80a387c:	ea95 0f0c 	teqne	r5, ip
 80a3880:	f000 f8de 	bleq	80a3a40 <__aeabi_dmul+0x1dc>
 80a3884:	442c      	add	r4, r5
 80a3886:	ea81 0603 	eor.w	r6, r1, r3
 80a388a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a388e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a3892:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a3896:	bf18      	it	ne
 80a3898:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a389c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a38a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a38a4:	d038      	beq.n	80a3918 <__aeabi_dmul+0xb4>
 80a38a6:	fba0 ce02 	umull	ip, lr, r0, r2
 80a38aa:	f04f 0500 	mov.w	r5, #0
 80a38ae:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a38b2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a38b6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a38ba:	f04f 0600 	mov.w	r6, #0
 80a38be:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a38c2:	f09c 0f00 	teq	ip, #0
 80a38c6:	bf18      	it	ne
 80a38c8:	f04e 0e01 	orrne.w	lr, lr, #1
 80a38cc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a38d0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a38d4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a38d8:	d204      	bcs.n	80a38e4 <__aeabi_dmul+0x80>
 80a38da:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a38de:	416d      	adcs	r5, r5
 80a38e0:	eb46 0606 	adc.w	r6, r6, r6
 80a38e4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a38e8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a38ec:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a38f0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a38f4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a38f8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a38fc:	bf88      	it	hi
 80a38fe:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a3902:	d81e      	bhi.n	80a3942 <__aeabi_dmul+0xde>
 80a3904:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a3908:	bf08      	it	eq
 80a390a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a390e:	f150 0000 	adcs.w	r0, r0, #0
 80a3912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a3916:	bd70      	pop	{r4, r5, r6, pc}
 80a3918:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a391c:	ea46 0101 	orr.w	r1, r6, r1
 80a3920:	ea40 0002 	orr.w	r0, r0, r2
 80a3924:	ea81 0103 	eor.w	r1, r1, r3
 80a3928:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a392c:	bfc2      	ittt	gt
 80a392e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a3932:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a3936:	bd70      	popgt	{r4, r5, r6, pc}
 80a3938:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a393c:	f04f 0e00 	mov.w	lr, #0
 80a3940:	3c01      	subs	r4, #1
 80a3942:	f300 80ab 	bgt.w	80a3a9c <__aeabi_dmul+0x238>
 80a3946:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a394a:	bfde      	ittt	le
 80a394c:	2000      	movle	r0, #0
 80a394e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a3952:	bd70      	pople	{r4, r5, r6, pc}
 80a3954:	f1c4 0400 	rsb	r4, r4, #0
 80a3958:	3c20      	subs	r4, #32
 80a395a:	da35      	bge.n	80a39c8 <__aeabi_dmul+0x164>
 80a395c:	340c      	adds	r4, #12
 80a395e:	dc1b      	bgt.n	80a3998 <__aeabi_dmul+0x134>
 80a3960:	f104 0414 	add.w	r4, r4, #20
 80a3964:	f1c4 0520 	rsb	r5, r4, #32
 80a3968:	fa00 f305 	lsl.w	r3, r0, r5
 80a396c:	fa20 f004 	lsr.w	r0, r0, r4
 80a3970:	fa01 f205 	lsl.w	r2, r1, r5
 80a3974:	ea40 0002 	orr.w	r0, r0, r2
 80a3978:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a397c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a3980:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a3984:	fa21 f604 	lsr.w	r6, r1, r4
 80a3988:	eb42 0106 	adc.w	r1, r2, r6
 80a398c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a3990:	bf08      	it	eq
 80a3992:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a3996:	bd70      	pop	{r4, r5, r6, pc}
 80a3998:	f1c4 040c 	rsb	r4, r4, #12
 80a399c:	f1c4 0520 	rsb	r5, r4, #32
 80a39a0:	fa00 f304 	lsl.w	r3, r0, r4
 80a39a4:	fa20 f005 	lsr.w	r0, r0, r5
 80a39a8:	fa01 f204 	lsl.w	r2, r1, r4
 80a39ac:	ea40 0002 	orr.w	r0, r0, r2
 80a39b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a39b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a39b8:	f141 0100 	adc.w	r1, r1, #0
 80a39bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a39c0:	bf08      	it	eq
 80a39c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a39c6:	bd70      	pop	{r4, r5, r6, pc}
 80a39c8:	f1c4 0520 	rsb	r5, r4, #32
 80a39cc:	fa00 f205 	lsl.w	r2, r0, r5
 80a39d0:	ea4e 0e02 	orr.w	lr, lr, r2
 80a39d4:	fa20 f304 	lsr.w	r3, r0, r4
 80a39d8:	fa01 f205 	lsl.w	r2, r1, r5
 80a39dc:	ea43 0302 	orr.w	r3, r3, r2
 80a39e0:	fa21 f004 	lsr.w	r0, r1, r4
 80a39e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a39e8:	fa21 f204 	lsr.w	r2, r1, r4
 80a39ec:	ea20 0002 	bic.w	r0, r0, r2
 80a39f0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a39f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a39f8:	bf08      	it	eq
 80a39fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a39fe:	bd70      	pop	{r4, r5, r6, pc}
 80a3a00:	f094 0f00 	teq	r4, #0
 80a3a04:	d10f      	bne.n	80a3a26 <__aeabi_dmul+0x1c2>
 80a3a06:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a3a0a:	0040      	lsls	r0, r0, #1
 80a3a0c:	eb41 0101 	adc.w	r1, r1, r1
 80a3a10:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a3a14:	bf08      	it	eq
 80a3a16:	3c01      	subeq	r4, #1
 80a3a18:	d0f7      	beq.n	80a3a0a <__aeabi_dmul+0x1a6>
 80a3a1a:	ea41 0106 	orr.w	r1, r1, r6
 80a3a1e:	f095 0f00 	teq	r5, #0
 80a3a22:	bf18      	it	ne
 80a3a24:	4770      	bxne	lr
 80a3a26:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a3a2a:	0052      	lsls	r2, r2, #1
 80a3a2c:	eb43 0303 	adc.w	r3, r3, r3
 80a3a30:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a3a34:	bf08      	it	eq
 80a3a36:	3d01      	subeq	r5, #1
 80a3a38:	d0f7      	beq.n	80a3a2a <__aeabi_dmul+0x1c6>
 80a3a3a:	ea43 0306 	orr.w	r3, r3, r6
 80a3a3e:	4770      	bx	lr
 80a3a40:	ea94 0f0c 	teq	r4, ip
 80a3a44:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a3a48:	bf18      	it	ne
 80a3a4a:	ea95 0f0c 	teqne	r5, ip
 80a3a4e:	d00c      	beq.n	80a3a6a <__aeabi_dmul+0x206>
 80a3a50:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a3a54:	bf18      	it	ne
 80a3a56:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a3a5a:	d1d1      	bne.n	80a3a00 <__aeabi_dmul+0x19c>
 80a3a5c:	ea81 0103 	eor.w	r1, r1, r3
 80a3a60:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a3a64:	f04f 0000 	mov.w	r0, #0
 80a3a68:	bd70      	pop	{r4, r5, r6, pc}
 80a3a6a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a3a6e:	bf06      	itte	eq
 80a3a70:	4610      	moveq	r0, r2
 80a3a72:	4619      	moveq	r1, r3
 80a3a74:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a3a78:	d019      	beq.n	80a3aae <__aeabi_dmul+0x24a>
 80a3a7a:	ea94 0f0c 	teq	r4, ip
 80a3a7e:	d102      	bne.n	80a3a86 <__aeabi_dmul+0x222>
 80a3a80:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a3a84:	d113      	bne.n	80a3aae <__aeabi_dmul+0x24a>
 80a3a86:	ea95 0f0c 	teq	r5, ip
 80a3a8a:	d105      	bne.n	80a3a98 <__aeabi_dmul+0x234>
 80a3a8c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a3a90:	bf1c      	itt	ne
 80a3a92:	4610      	movne	r0, r2
 80a3a94:	4619      	movne	r1, r3
 80a3a96:	d10a      	bne.n	80a3aae <__aeabi_dmul+0x24a>
 80a3a98:	ea81 0103 	eor.w	r1, r1, r3
 80a3a9c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a3aa0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a3aa4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a3aa8:	f04f 0000 	mov.w	r0, #0
 80a3aac:	bd70      	pop	{r4, r5, r6, pc}
 80a3aae:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a3ab2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a3ab6:	bd70      	pop	{r4, r5, r6, pc}

080a3ab8 <__aeabi_ddiv>:
 80a3ab8:	b570      	push	{r4, r5, r6, lr}
 80a3aba:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a3abe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a3ac2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a3ac6:	bf1d      	ittte	ne
 80a3ac8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a3acc:	ea94 0f0c 	teqne	r4, ip
 80a3ad0:	ea95 0f0c 	teqne	r5, ip
 80a3ad4:	f000 f8a7 	bleq	80a3c26 <__aeabi_ddiv+0x16e>
 80a3ad8:	eba4 0405 	sub.w	r4, r4, r5
 80a3adc:	ea81 0e03 	eor.w	lr, r1, r3
 80a3ae0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a3ae4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a3ae8:	f000 8088 	beq.w	80a3bfc <__aeabi_ddiv+0x144>
 80a3aec:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a3af0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a3af4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a3af8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a3afc:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a3b00:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a3b04:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a3b08:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a3b0c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a3b10:	429d      	cmp	r5, r3
 80a3b12:	bf08      	it	eq
 80a3b14:	4296      	cmpeq	r6, r2
 80a3b16:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a3b1a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a3b1e:	d202      	bcs.n	80a3b26 <__aeabi_ddiv+0x6e>
 80a3b20:	085b      	lsrs	r3, r3, #1
 80a3b22:	ea4f 0232 	mov.w	r2, r2, rrx
 80a3b26:	1ab6      	subs	r6, r6, r2
 80a3b28:	eb65 0503 	sbc.w	r5, r5, r3
 80a3b2c:	085b      	lsrs	r3, r3, #1
 80a3b2e:	ea4f 0232 	mov.w	r2, r2, rrx
 80a3b32:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a3b36:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a3b3a:	ebb6 0e02 	subs.w	lr, r6, r2
 80a3b3e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a3b42:	bf22      	ittt	cs
 80a3b44:	1ab6      	subcs	r6, r6, r2
 80a3b46:	4675      	movcs	r5, lr
 80a3b48:	ea40 000c 	orrcs.w	r0, r0, ip
 80a3b4c:	085b      	lsrs	r3, r3, #1
 80a3b4e:	ea4f 0232 	mov.w	r2, r2, rrx
 80a3b52:	ebb6 0e02 	subs.w	lr, r6, r2
 80a3b56:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a3b5a:	bf22      	ittt	cs
 80a3b5c:	1ab6      	subcs	r6, r6, r2
 80a3b5e:	4675      	movcs	r5, lr
 80a3b60:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a3b64:	085b      	lsrs	r3, r3, #1
 80a3b66:	ea4f 0232 	mov.w	r2, r2, rrx
 80a3b6a:	ebb6 0e02 	subs.w	lr, r6, r2
 80a3b6e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a3b72:	bf22      	ittt	cs
 80a3b74:	1ab6      	subcs	r6, r6, r2
 80a3b76:	4675      	movcs	r5, lr
 80a3b78:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a3b7c:	085b      	lsrs	r3, r3, #1
 80a3b7e:	ea4f 0232 	mov.w	r2, r2, rrx
 80a3b82:	ebb6 0e02 	subs.w	lr, r6, r2
 80a3b86:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a3b8a:	bf22      	ittt	cs
 80a3b8c:	1ab6      	subcs	r6, r6, r2
 80a3b8e:	4675      	movcs	r5, lr
 80a3b90:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a3b94:	ea55 0e06 	orrs.w	lr, r5, r6
 80a3b98:	d018      	beq.n	80a3bcc <__aeabi_ddiv+0x114>
 80a3b9a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a3b9e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a3ba2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a3ba6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a3baa:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a3bae:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a3bb2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a3bb6:	d1c0      	bne.n	80a3b3a <__aeabi_ddiv+0x82>
 80a3bb8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a3bbc:	d10b      	bne.n	80a3bd6 <__aeabi_ddiv+0x11e>
 80a3bbe:	ea41 0100 	orr.w	r1, r1, r0
 80a3bc2:	f04f 0000 	mov.w	r0, #0
 80a3bc6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a3bca:	e7b6      	b.n	80a3b3a <__aeabi_ddiv+0x82>
 80a3bcc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a3bd0:	bf04      	itt	eq
 80a3bd2:	4301      	orreq	r1, r0
 80a3bd4:	2000      	moveq	r0, #0
 80a3bd6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a3bda:	bf88      	it	hi
 80a3bdc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a3be0:	f63f aeaf 	bhi.w	80a3942 <__aeabi_dmul+0xde>
 80a3be4:	ebb5 0c03 	subs.w	ip, r5, r3
 80a3be8:	bf04      	itt	eq
 80a3bea:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a3bee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a3bf2:	f150 0000 	adcs.w	r0, r0, #0
 80a3bf6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a3bfa:	bd70      	pop	{r4, r5, r6, pc}
 80a3bfc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a3c00:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a3c04:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a3c08:	bfc2      	ittt	gt
 80a3c0a:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a3c0e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a3c12:	bd70      	popgt	{r4, r5, r6, pc}
 80a3c14:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a3c18:	f04f 0e00 	mov.w	lr, #0
 80a3c1c:	3c01      	subs	r4, #1
 80a3c1e:	e690      	b.n	80a3942 <__aeabi_dmul+0xde>
 80a3c20:	ea45 0e06 	orr.w	lr, r5, r6
 80a3c24:	e68d      	b.n	80a3942 <__aeabi_dmul+0xde>
 80a3c26:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a3c2a:	ea94 0f0c 	teq	r4, ip
 80a3c2e:	bf08      	it	eq
 80a3c30:	ea95 0f0c 	teqeq	r5, ip
 80a3c34:	f43f af3b 	beq.w	80a3aae <__aeabi_dmul+0x24a>
 80a3c38:	ea94 0f0c 	teq	r4, ip
 80a3c3c:	d10a      	bne.n	80a3c54 <__aeabi_ddiv+0x19c>
 80a3c3e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a3c42:	f47f af34 	bne.w	80a3aae <__aeabi_dmul+0x24a>
 80a3c46:	ea95 0f0c 	teq	r5, ip
 80a3c4a:	f47f af25 	bne.w	80a3a98 <__aeabi_dmul+0x234>
 80a3c4e:	4610      	mov	r0, r2
 80a3c50:	4619      	mov	r1, r3
 80a3c52:	e72c      	b.n	80a3aae <__aeabi_dmul+0x24a>
 80a3c54:	ea95 0f0c 	teq	r5, ip
 80a3c58:	d106      	bne.n	80a3c68 <__aeabi_ddiv+0x1b0>
 80a3c5a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a3c5e:	f43f aefd 	beq.w	80a3a5c <__aeabi_dmul+0x1f8>
 80a3c62:	4610      	mov	r0, r2
 80a3c64:	4619      	mov	r1, r3
 80a3c66:	e722      	b.n	80a3aae <__aeabi_dmul+0x24a>
 80a3c68:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a3c6c:	bf18      	it	ne
 80a3c6e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a3c72:	f47f aec5 	bne.w	80a3a00 <__aeabi_dmul+0x19c>
 80a3c76:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a3c7a:	f47f af0d 	bne.w	80a3a98 <__aeabi_dmul+0x234>
 80a3c7e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a3c82:	f47f aeeb 	bne.w	80a3a5c <__aeabi_dmul+0x1f8>
 80a3c86:	e712      	b.n	80a3aae <__aeabi_dmul+0x24a>

080a3c88 <__gedf2>:
 80a3c88:	f04f 3cff 	mov.w	ip, #4294967295
 80a3c8c:	e006      	b.n	80a3c9c <__cmpdf2+0x4>
 80a3c8e:	bf00      	nop

080a3c90 <__ledf2>:
 80a3c90:	f04f 0c01 	mov.w	ip, #1
 80a3c94:	e002      	b.n	80a3c9c <__cmpdf2+0x4>
 80a3c96:	bf00      	nop

080a3c98 <__cmpdf2>:
 80a3c98:	f04f 0c01 	mov.w	ip, #1
 80a3c9c:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a3ca0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a3ca4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a3ca8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a3cac:	bf18      	it	ne
 80a3cae:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80a3cb2:	d01b      	beq.n	80a3cec <__cmpdf2+0x54>
 80a3cb4:	b001      	add	sp, #4
 80a3cb6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80a3cba:	bf0c      	ite	eq
 80a3cbc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80a3cc0:	ea91 0f03 	teqne	r1, r3
 80a3cc4:	bf02      	ittt	eq
 80a3cc6:	ea90 0f02 	teqeq	r0, r2
 80a3cca:	2000      	moveq	r0, #0
 80a3ccc:	4770      	bxeq	lr
 80a3cce:	f110 0f00 	cmn.w	r0, #0
 80a3cd2:	ea91 0f03 	teq	r1, r3
 80a3cd6:	bf58      	it	pl
 80a3cd8:	4299      	cmppl	r1, r3
 80a3cda:	bf08      	it	eq
 80a3cdc:	4290      	cmpeq	r0, r2
 80a3cde:	bf2c      	ite	cs
 80a3ce0:	17d8      	asrcs	r0, r3, #31
 80a3ce2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80a3ce6:	f040 0001 	orr.w	r0, r0, #1
 80a3cea:	4770      	bx	lr
 80a3cec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a3cf0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a3cf4:	d102      	bne.n	80a3cfc <__cmpdf2+0x64>
 80a3cf6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a3cfa:	d107      	bne.n	80a3d0c <__cmpdf2+0x74>
 80a3cfc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a3d00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a3d04:	d1d6      	bne.n	80a3cb4 <__cmpdf2+0x1c>
 80a3d06:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a3d0a:	d0d3      	beq.n	80a3cb4 <__cmpdf2+0x1c>
 80a3d0c:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a3d10:	4770      	bx	lr
 80a3d12:	bf00      	nop

080a3d14 <__aeabi_cdrcmple>:
 80a3d14:	4684      	mov	ip, r0
 80a3d16:	4610      	mov	r0, r2
 80a3d18:	4662      	mov	r2, ip
 80a3d1a:	468c      	mov	ip, r1
 80a3d1c:	4619      	mov	r1, r3
 80a3d1e:	4663      	mov	r3, ip
 80a3d20:	e000      	b.n	80a3d24 <__aeabi_cdcmpeq>
 80a3d22:	bf00      	nop

080a3d24 <__aeabi_cdcmpeq>:
 80a3d24:	b501      	push	{r0, lr}
 80a3d26:	f7ff ffb7 	bl	80a3c98 <__cmpdf2>
 80a3d2a:	2800      	cmp	r0, #0
 80a3d2c:	bf48      	it	mi
 80a3d2e:	f110 0f00 	cmnmi.w	r0, #0
 80a3d32:	bd01      	pop	{r0, pc}

080a3d34 <__aeabi_dcmpeq>:
 80a3d34:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3d38:	f7ff fff4 	bl	80a3d24 <__aeabi_cdcmpeq>
 80a3d3c:	bf0c      	ite	eq
 80a3d3e:	2001      	moveq	r0, #1
 80a3d40:	2000      	movne	r0, #0
 80a3d42:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3d46:	bf00      	nop

080a3d48 <__aeabi_dcmplt>:
 80a3d48:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3d4c:	f7ff ffea 	bl	80a3d24 <__aeabi_cdcmpeq>
 80a3d50:	bf34      	ite	cc
 80a3d52:	2001      	movcc	r0, #1
 80a3d54:	2000      	movcs	r0, #0
 80a3d56:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3d5a:	bf00      	nop

080a3d5c <__aeabi_dcmple>:
 80a3d5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3d60:	f7ff ffe0 	bl	80a3d24 <__aeabi_cdcmpeq>
 80a3d64:	bf94      	ite	ls
 80a3d66:	2001      	movls	r0, #1
 80a3d68:	2000      	movhi	r0, #0
 80a3d6a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3d6e:	bf00      	nop

080a3d70 <__aeabi_dcmpge>:
 80a3d70:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3d74:	f7ff ffce 	bl	80a3d14 <__aeabi_cdrcmple>
 80a3d78:	bf94      	ite	ls
 80a3d7a:	2001      	movls	r0, #1
 80a3d7c:	2000      	movhi	r0, #0
 80a3d7e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3d82:	bf00      	nop

080a3d84 <__aeabi_dcmpgt>:
 80a3d84:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3d88:	f7ff ffc4 	bl	80a3d14 <__aeabi_cdrcmple>
 80a3d8c:	bf34      	ite	cc
 80a3d8e:	2001      	movcc	r0, #1
 80a3d90:	2000      	movcs	r0, #0
 80a3d92:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3d96:	bf00      	nop

080a3d98 <__aeabi_d2uiz>:
 80a3d98:	004a      	lsls	r2, r1, #1
 80a3d9a:	d211      	bcs.n	80a3dc0 <__aeabi_d2uiz+0x28>
 80a3d9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a3da0:	d211      	bcs.n	80a3dc6 <__aeabi_d2uiz+0x2e>
 80a3da2:	d50d      	bpl.n	80a3dc0 <__aeabi_d2uiz+0x28>
 80a3da4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a3da8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a3dac:	d40e      	bmi.n	80a3dcc <__aeabi_d2uiz+0x34>
 80a3dae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a3db2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a3db6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a3dba:	fa23 f002 	lsr.w	r0, r3, r2
 80a3dbe:	4770      	bx	lr
 80a3dc0:	f04f 0000 	mov.w	r0, #0
 80a3dc4:	4770      	bx	lr
 80a3dc6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a3dca:	d102      	bne.n	80a3dd2 <__aeabi_d2uiz+0x3a>
 80a3dcc:	f04f 30ff 	mov.w	r0, #4294967295
 80a3dd0:	4770      	bx	lr
 80a3dd2:	f04f 0000 	mov.w	r0, #0
 80a3dd6:	4770      	bx	lr

080a3dd8 <__aeabi_frsub>:
 80a3dd8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80a3ddc:	e002      	b.n	80a3de4 <__addsf3>
 80a3dde:	bf00      	nop

080a3de0 <__aeabi_fsub>:
 80a3de0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080a3de4 <__addsf3>:
 80a3de4:	0042      	lsls	r2, r0, #1
 80a3de6:	bf1f      	itttt	ne
 80a3de8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80a3dec:	ea92 0f03 	teqne	r2, r3
 80a3df0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80a3df4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a3df8:	d06a      	beq.n	80a3ed0 <__addsf3+0xec>
 80a3dfa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80a3dfe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80a3e02:	bfc1      	itttt	gt
 80a3e04:	18d2      	addgt	r2, r2, r3
 80a3e06:	4041      	eorgt	r1, r0
 80a3e08:	4048      	eorgt	r0, r1
 80a3e0a:	4041      	eorgt	r1, r0
 80a3e0c:	bfb8      	it	lt
 80a3e0e:	425b      	neglt	r3, r3
 80a3e10:	2b19      	cmp	r3, #25
 80a3e12:	bf88      	it	hi
 80a3e14:	4770      	bxhi	lr
 80a3e16:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a3e1a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a3e1e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80a3e22:	bf18      	it	ne
 80a3e24:	4240      	negne	r0, r0
 80a3e26:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a3e2a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80a3e2e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80a3e32:	bf18      	it	ne
 80a3e34:	4249      	negne	r1, r1
 80a3e36:	ea92 0f03 	teq	r2, r3
 80a3e3a:	d03f      	beq.n	80a3ebc <__addsf3+0xd8>
 80a3e3c:	f1a2 0201 	sub.w	r2, r2, #1
 80a3e40:	fa41 fc03 	asr.w	ip, r1, r3
 80a3e44:	eb10 000c 	adds.w	r0, r0, ip
 80a3e48:	f1c3 0320 	rsb	r3, r3, #32
 80a3e4c:	fa01 f103 	lsl.w	r1, r1, r3
 80a3e50:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a3e54:	d502      	bpl.n	80a3e5c <__addsf3+0x78>
 80a3e56:	4249      	negs	r1, r1
 80a3e58:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80a3e5c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a3e60:	d313      	bcc.n	80a3e8a <__addsf3+0xa6>
 80a3e62:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80a3e66:	d306      	bcc.n	80a3e76 <__addsf3+0x92>
 80a3e68:	0840      	lsrs	r0, r0, #1
 80a3e6a:	ea4f 0131 	mov.w	r1, r1, rrx
 80a3e6e:	f102 0201 	add.w	r2, r2, #1
 80a3e72:	2afe      	cmp	r2, #254	; 0xfe
 80a3e74:	d251      	bcs.n	80a3f1a <__addsf3+0x136>
 80a3e76:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80a3e7a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a3e7e:	bf08      	it	eq
 80a3e80:	f020 0001 	biceq.w	r0, r0, #1
 80a3e84:	ea40 0003 	orr.w	r0, r0, r3
 80a3e88:	4770      	bx	lr
 80a3e8a:	0049      	lsls	r1, r1, #1
 80a3e8c:	eb40 0000 	adc.w	r0, r0, r0
 80a3e90:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80a3e94:	f1a2 0201 	sub.w	r2, r2, #1
 80a3e98:	d1ed      	bne.n	80a3e76 <__addsf3+0x92>
 80a3e9a:	fab0 fc80 	clz	ip, r0
 80a3e9e:	f1ac 0c08 	sub.w	ip, ip, #8
 80a3ea2:	ebb2 020c 	subs.w	r2, r2, ip
 80a3ea6:	fa00 f00c 	lsl.w	r0, r0, ip
 80a3eaa:	bfaa      	itet	ge
 80a3eac:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80a3eb0:	4252      	neglt	r2, r2
 80a3eb2:	4318      	orrge	r0, r3
 80a3eb4:	bfbc      	itt	lt
 80a3eb6:	40d0      	lsrlt	r0, r2
 80a3eb8:	4318      	orrlt	r0, r3
 80a3eba:	4770      	bx	lr
 80a3ebc:	f092 0f00 	teq	r2, #0
 80a3ec0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80a3ec4:	bf06      	itte	eq
 80a3ec6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80a3eca:	3201      	addeq	r2, #1
 80a3ecc:	3b01      	subne	r3, #1
 80a3ece:	e7b5      	b.n	80a3e3c <__addsf3+0x58>
 80a3ed0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a3ed4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a3ed8:	bf18      	it	ne
 80a3eda:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a3ede:	d021      	beq.n	80a3f24 <__addsf3+0x140>
 80a3ee0:	ea92 0f03 	teq	r2, r3
 80a3ee4:	d004      	beq.n	80a3ef0 <__addsf3+0x10c>
 80a3ee6:	f092 0f00 	teq	r2, #0
 80a3eea:	bf08      	it	eq
 80a3eec:	4608      	moveq	r0, r1
 80a3eee:	4770      	bx	lr
 80a3ef0:	ea90 0f01 	teq	r0, r1
 80a3ef4:	bf1c      	itt	ne
 80a3ef6:	2000      	movne	r0, #0
 80a3ef8:	4770      	bxne	lr
 80a3efa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80a3efe:	d104      	bne.n	80a3f0a <__addsf3+0x126>
 80a3f00:	0040      	lsls	r0, r0, #1
 80a3f02:	bf28      	it	cs
 80a3f04:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80a3f08:	4770      	bx	lr
 80a3f0a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80a3f0e:	bf3c      	itt	cc
 80a3f10:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80a3f14:	4770      	bxcc	lr
 80a3f16:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a3f1a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80a3f1e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a3f22:	4770      	bx	lr
 80a3f24:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80a3f28:	bf16      	itet	ne
 80a3f2a:	4608      	movne	r0, r1
 80a3f2c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80a3f30:	4601      	movne	r1, r0
 80a3f32:	0242      	lsls	r2, r0, #9
 80a3f34:	bf06      	itte	eq
 80a3f36:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80a3f3a:	ea90 0f01 	teqeq	r0, r1
 80a3f3e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80a3f42:	4770      	bx	lr

080a3f44 <__aeabi_ui2f>:
 80a3f44:	f04f 0300 	mov.w	r3, #0
 80a3f48:	e004      	b.n	80a3f54 <__aeabi_i2f+0x8>
 80a3f4a:	bf00      	nop

080a3f4c <__aeabi_i2f>:
 80a3f4c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80a3f50:	bf48      	it	mi
 80a3f52:	4240      	negmi	r0, r0
 80a3f54:	ea5f 0c00 	movs.w	ip, r0
 80a3f58:	bf08      	it	eq
 80a3f5a:	4770      	bxeq	lr
 80a3f5c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80a3f60:	4601      	mov	r1, r0
 80a3f62:	f04f 0000 	mov.w	r0, #0
 80a3f66:	e01c      	b.n	80a3fa2 <__aeabi_l2f+0x2a>

080a3f68 <__aeabi_ul2f>:
 80a3f68:	ea50 0201 	orrs.w	r2, r0, r1
 80a3f6c:	bf08      	it	eq
 80a3f6e:	4770      	bxeq	lr
 80a3f70:	f04f 0300 	mov.w	r3, #0
 80a3f74:	e00a      	b.n	80a3f8c <__aeabi_l2f+0x14>
 80a3f76:	bf00      	nop

080a3f78 <__aeabi_l2f>:
 80a3f78:	ea50 0201 	orrs.w	r2, r0, r1
 80a3f7c:	bf08      	it	eq
 80a3f7e:	4770      	bxeq	lr
 80a3f80:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80a3f84:	d502      	bpl.n	80a3f8c <__aeabi_l2f+0x14>
 80a3f86:	4240      	negs	r0, r0
 80a3f88:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a3f8c:	ea5f 0c01 	movs.w	ip, r1
 80a3f90:	bf02      	ittt	eq
 80a3f92:	4684      	moveq	ip, r0
 80a3f94:	4601      	moveq	r1, r0
 80a3f96:	2000      	moveq	r0, #0
 80a3f98:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80a3f9c:	bf08      	it	eq
 80a3f9e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80a3fa2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80a3fa6:	fabc f28c 	clz	r2, ip
 80a3faa:	3a08      	subs	r2, #8
 80a3fac:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80a3fb0:	db10      	blt.n	80a3fd4 <__aeabi_l2f+0x5c>
 80a3fb2:	fa01 fc02 	lsl.w	ip, r1, r2
 80a3fb6:	4463      	add	r3, ip
 80a3fb8:	fa00 fc02 	lsl.w	ip, r0, r2
 80a3fbc:	f1c2 0220 	rsb	r2, r2, #32
 80a3fc0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a3fc4:	fa20 f202 	lsr.w	r2, r0, r2
 80a3fc8:	eb43 0002 	adc.w	r0, r3, r2
 80a3fcc:	bf08      	it	eq
 80a3fce:	f020 0001 	biceq.w	r0, r0, #1
 80a3fd2:	4770      	bx	lr
 80a3fd4:	f102 0220 	add.w	r2, r2, #32
 80a3fd8:	fa01 fc02 	lsl.w	ip, r1, r2
 80a3fdc:	f1c2 0220 	rsb	r2, r2, #32
 80a3fe0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80a3fe4:	fa21 f202 	lsr.w	r2, r1, r2
 80a3fe8:	eb43 0002 	adc.w	r0, r3, r2
 80a3fec:	bf08      	it	eq
 80a3fee:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a3ff2:	4770      	bx	lr

080a3ff4 <__aeabi_fmul>:
 80a3ff4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a3ff8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a3ffc:	bf1e      	ittt	ne
 80a3ffe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a4002:	ea92 0f0c 	teqne	r2, ip
 80a4006:	ea93 0f0c 	teqne	r3, ip
 80a400a:	d06f      	beq.n	80a40ec <__aeabi_fmul+0xf8>
 80a400c:	441a      	add	r2, r3
 80a400e:	ea80 0c01 	eor.w	ip, r0, r1
 80a4012:	0240      	lsls	r0, r0, #9
 80a4014:	bf18      	it	ne
 80a4016:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80a401a:	d01e      	beq.n	80a405a <__aeabi_fmul+0x66>
 80a401c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80a4020:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80a4024:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80a4028:	fba0 3101 	umull	r3, r1, r0, r1
 80a402c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a4030:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80a4034:	bf3e      	ittt	cc
 80a4036:	0049      	lslcc	r1, r1, #1
 80a4038:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80a403c:	005b      	lslcc	r3, r3, #1
 80a403e:	ea40 0001 	orr.w	r0, r0, r1
 80a4042:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80a4046:	2afd      	cmp	r2, #253	; 0xfd
 80a4048:	d81d      	bhi.n	80a4086 <__aeabi_fmul+0x92>
 80a404a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a404e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a4052:	bf08      	it	eq
 80a4054:	f020 0001 	biceq.w	r0, r0, #1
 80a4058:	4770      	bx	lr
 80a405a:	f090 0f00 	teq	r0, #0
 80a405e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a4062:	bf08      	it	eq
 80a4064:	0249      	lsleq	r1, r1, #9
 80a4066:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a406a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80a406e:	3a7f      	subs	r2, #127	; 0x7f
 80a4070:	bfc2      	ittt	gt
 80a4072:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a4076:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a407a:	4770      	bxgt	lr
 80a407c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a4080:	f04f 0300 	mov.w	r3, #0
 80a4084:	3a01      	subs	r2, #1
 80a4086:	dc5d      	bgt.n	80a4144 <__aeabi_fmul+0x150>
 80a4088:	f112 0f19 	cmn.w	r2, #25
 80a408c:	bfdc      	itt	le
 80a408e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80a4092:	4770      	bxle	lr
 80a4094:	f1c2 0200 	rsb	r2, r2, #0
 80a4098:	0041      	lsls	r1, r0, #1
 80a409a:	fa21 f102 	lsr.w	r1, r1, r2
 80a409e:	f1c2 0220 	rsb	r2, r2, #32
 80a40a2:	fa00 fc02 	lsl.w	ip, r0, r2
 80a40a6:	ea5f 0031 	movs.w	r0, r1, rrx
 80a40aa:	f140 0000 	adc.w	r0, r0, #0
 80a40ae:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80a40b2:	bf08      	it	eq
 80a40b4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a40b8:	4770      	bx	lr
 80a40ba:	f092 0f00 	teq	r2, #0
 80a40be:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a40c2:	bf02      	ittt	eq
 80a40c4:	0040      	lsleq	r0, r0, #1
 80a40c6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a40ca:	3a01      	subeq	r2, #1
 80a40cc:	d0f9      	beq.n	80a40c2 <__aeabi_fmul+0xce>
 80a40ce:	ea40 000c 	orr.w	r0, r0, ip
 80a40d2:	f093 0f00 	teq	r3, #0
 80a40d6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a40da:	bf02      	ittt	eq
 80a40dc:	0049      	lsleq	r1, r1, #1
 80a40de:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a40e2:	3b01      	subeq	r3, #1
 80a40e4:	d0f9      	beq.n	80a40da <__aeabi_fmul+0xe6>
 80a40e6:	ea41 010c 	orr.w	r1, r1, ip
 80a40ea:	e78f      	b.n	80a400c <__aeabi_fmul+0x18>
 80a40ec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a40f0:	ea92 0f0c 	teq	r2, ip
 80a40f4:	bf18      	it	ne
 80a40f6:	ea93 0f0c 	teqne	r3, ip
 80a40fa:	d00a      	beq.n	80a4112 <__aeabi_fmul+0x11e>
 80a40fc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a4100:	bf18      	it	ne
 80a4102:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a4106:	d1d8      	bne.n	80a40ba <__aeabi_fmul+0xc6>
 80a4108:	ea80 0001 	eor.w	r0, r0, r1
 80a410c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a4110:	4770      	bx	lr
 80a4112:	f090 0f00 	teq	r0, #0
 80a4116:	bf17      	itett	ne
 80a4118:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80a411c:	4608      	moveq	r0, r1
 80a411e:	f091 0f00 	teqne	r1, #0
 80a4122:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80a4126:	d014      	beq.n	80a4152 <__aeabi_fmul+0x15e>
 80a4128:	ea92 0f0c 	teq	r2, ip
 80a412c:	d101      	bne.n	80a4132 <__aeabi_fmul+0x13e>
 80a412e:	0242      	lsls	r2, r0, #9
 80a4130:	d10f      	bne.n	80a4152 <__aeabi_fmul+0x15e>
 80a4132:	ea93 0f0c 	teq	r3, ip
 80a4136:	d103      	bne.n	80a4140 <__aeabi_fmul+0x14c>
 80a4138:	024b      	lsls	r3, r1, #9
 80a413a:	bf18      	it	ne
 80a413c:	4608      	movne	r0, r1
 80a413e:	d108      	bne.n	80a4152 <__aeabi_fmul+0x15e>
 80a4140:	ea80 0001 	eor.w	r0, r0, r1
 80a4144:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a4148:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a414c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a4150:	4770      	bx	lr
 80a4152:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a4156:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80a415a:	4770      	bx	lr

080a415c <__aeabi_fdiv>:
 80a415c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a4160:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a4164:	bf1e      	ittt	ne
 80a4166:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a416a:	ea92 0f0c 	teqne	r2, ip
 80a416e:	ea93 0f0c 	teqne	r3, ip
 80a4172:	d069      	beq.n	80a4248 <__aeabi_fdiv+0xec>
 80a4174:	eba2 0203 	sub.w	r2, r2, r3
 80a4178:	ea80 0c01 	eor.w	ip, r0, r1
 80a417c:	0249      	lsls	r1, r1, #9
 80a417e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80a4182:	d037      	beq.n	80a41f4 <__aeabi_fdiv+0x98>
 80a4184:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80a4188:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80a418c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80a4190:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a4194:	428b      	cmp	r3, r1
 80a4196:	bf38      	it	cc
 80a4198:	005b      	lslcc	r3, r3, #1
 80a419a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80a419e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80a41a2:	428b      	cmp	r3, r1
 80a41a4:	bf24      	itt	cs
 80a41a6:	1a5b      	subcs	r3, r3, r1
 80a41a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80a41ac:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80a41b0:	bf24      	itt	cs
 80a41b2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80a41b6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a41ba:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80a41be:	bf24      	itt	cs
 80a41c0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80a41c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a41c8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80a41cc:	bf24      	itt	cs
 80a41ce:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80a41d2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a41d6:	011b      	lsls	r3, r3, #4
 80a41d8:	bf18      	it	ne
 80a41da:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80a41de:	d1e0      	bne.n	80a41a2 <__aeabi_fdiv+0x46>
 80a41e0:	2afd      	cmp	r2, #253	; 0xfd
 80a41e2:	f63f af50 	bhi.w	80a4086 <__aeabi_fmul+0x92>
 80a41e6:	428b      	cmp	r3, r1
 80a41e8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a41ec:	bf08      	it	eq
 80a41ee:	f020 0001 	biceq.w	r0, r0, #1
 80a41f2:	4770      	bx	lr
 80a41f4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a41f8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a41fc:	327f      	adds	r2, #127	; 0x7f
 80a41fe:	bfc2      	ittt	gt
 80a4200:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a4204:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a4208:	4770      	bxgt	lr
 80a420a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a420e:	f04f 0300 	mov.w	r3, #0
 80a4212:	3a01      	subs	r2, #1
 80a4214:	e737      	b.n	80a4086 <__aeabi_fmul+0x92>
 80a4216:	f092 0f00 	teq	r2, #0
 80a421a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a421e:	bf02      	ittt	eq
 80a4220:	0040      	lsleq	r0, r0, #1
 80a4222:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a4226:	3a01      	subeq	r2, #1
 80a4228:	d0f9      	beq.n	80a421e <__aeabi_fdiv+0xc2>
 80a422a:	ea40 000c 	orr.w	r0, r0, ip
 80a422e:	f093 0f00 	teq	r3, #0
 80a4232:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a4236:	bf02      	ittt	eq
 80a4238:	0049      	lsleq	r1, r1, #1
 80a423a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a423e:	3b01      	subeq	r3, #1
 80a4240:	d0f9      	beq.n	80a4236 <__aeabi_fdiv+0xda>
 80a4242:	ea41 010c 	orr.w	r1, r1, ip
 80a4246:	e795      	b.n	80a4174 <__aeabi_fdiv+0x18>
 80a4248:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a424c:	ea92 0f0c 	teq	r2, ip
 80a4250:	d108      	bne.n	80a4264 <__aeabi_fdiv+0x108>
 80a4252:	0242      	lsls	r2, r0, #9
 80a4254:	f47f af7d 	bne.w	80a4152 <__aeabi_fmul+0x15e>
 80a4258:	ea93 0f0c 	teq	r3, ip
 80a425c:	f47f af70 	bne.w	80a4140 <__aeabi_fmul+0x14c>
 80a4260:	4608      	mov	r0, r1
 80a4262:	e776      	b.n	80a4152 <__aeabi_fmul+0x15e>
 80a4264:	ea93 0f0c 	teq	r3, ip
 80a4268:	d104      	bne.n	80a4274 <__aeabi_fdiv+0x118>
 80a426a:	024b      	lsls	r3, r1, #9
 80a426c:	f43f af4c 	beq.w	80a4108 <__aeabi_fmul+0x114>
 80a4270:	4608      	mov	r0, r1
 80a4272:	e76e      	b.n	80a4152 <__aeabi_fmul+0x15e>
 80a4274:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a4278:	bf18      	it	ne
 80a427a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a427e:	d1ca      	bne.n	80a4216 <__aeabi_fdiv+0xba>
 80a4280:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80a4284:	f47f af5c 	bne.w	80a4140 <__aeabi_fmul+0x14c>
 80a4288:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80a428c:	f47f af3c 	bne.w	80a4108 <__aeabi_fmul+0x114>
 80a4290:	e75f      	b.n	80a4152 <__aeabi_fmul+0x15e>
 80a4292:	bf00      	nop

080a4294 <__gesf2>:
 80a4294:	f04f 3cff 	mov.w	ip, #4294967295
 80a4298:	e006      	b.n	80a42a8 <__cmpsf2+0x4>
 80a429a:	bf00      	nop

080a429c <__lesf2>:
 80a429c:	f04f 0c01 	mov.w	ip, #1
 80a42a0:	e002      	b.n	80a42a8 <__cmpsf2+0x4>
 80a42a2:	bf00      	nop

080a42a4 <__cmpsf2>:
 80a42a4:	f04f 0c01 	mov.w	ip, #1
 80a42a8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a42ac:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a42b0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a42b4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a42b8:	bf18      	it	ne
 80a42ba:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a42be:	d011      	beq.n	80a42e4 <__cmpsf2+0x40>
 80a42c0:	b001      	add	sp, #4
 80a42c2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80a42c6:	bf18      	it	ne
 80a42c8:	ea90 0f01 	teqne	r0, r1
 80a42cc:	bf58      	it	pl
 80a42ce:	ebb2 0003 	subspl.w	r0, r2, r3
 80a42d2:	bf88      	it	hi
 80a42d4:	17c8      	asrhi	r0, r1, #31
 80a42d6:	bf38      	it	cc
 80a42d8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80a42dc:	bf18      	it	ne
 80a42de:	f040 0001 	orrne.w	r0, r0, #1
 80a42e2:	4770      	bx	lr
 80a42e4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a42e8:	d102      	bne.n	80a42f0 <__cmpsf2+0x4c>
 80a42ea:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80a42ee:	d105      	bne.n	80a42fc <__cmpsf2+0x58>
 80a42f0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80a42f4:	d1e4      	bne.n	80a42c0 <__cmpsf2+0x1c>
 80a42f6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80a42fa:	d0e1      	beq.n	80a42c0 <__cmpsf2+0x1c>
 80a42fc:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a4300:	4770      	bx	lr
 80a4302:	bf00      	nop

080a4304 <__aeabi_cfrcmple>:
 80a4304:	4684      	mov	ip, r0
 80a4306:	4608      	mov	r0, r1
 80a4308:	4661      	mov	r1, ip
 80a430a:	e7ff      	b.n	80a430c <__aeabi_cfcmpeq>

080a430c <__aeabi_cfcmpeq>:
 80a430c:	b50f      	push	{r0, r1, r2, r3, lr}
 80a430e:	f7ff ffc9 	bl	80a42a4 <__cmpsf2>
 80a4312:	2800      	cmp	r0, #0
 80a4314:	bf48      	it	mi
 80a4316:	f110 0f00 	cmnmi.w	r0, #0
 80a431a:	bd0f      	pop	{r0, r1, r2, r3, pc}

080a431c <__aeabi_fcmpeq>:
 80a431c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a4320:	f7ff fff4 	bl	80a430c <__aeabi_cfcmpeq>
 80a4324:	bf0c      	ite	eq
 80a4326:	2001      	moveq	r0, #1
 80a4328:	2000      	movne	r0, #0
 80a432a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a432e:	bf00      	nop

080a4330 <__aeabi_fcmplt>:
 80a4330:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a4334:	f7ff ffea 	bl	80a430c <__aeabi_cfcmpeq>
 80a4338:	bf34      	ite	cc
 80a433a:	2001      	movcc	r0, #1
 80a433c:	2000      	movcs	r0, #0
 80a433e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a4342:	bf00      	nop

080a4344 <__aeabi_fcmple>:
 80a4344:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a4348:	f7ff ffe0 	bl	80a430c <__aeabi_cfcmpeq>
 80a434c:	bf94      	ite	ls
 80a434e:	2001      	movls	r0, #1
 80a4350:	2000      	movhi	r0, #0
 80a4352:	f85d fb08 	ldr.w	pc, [sp], #8
 80a4356:	bf00      	nop

080a4358 <__aeabi_fcmpge>:
 80a4358:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a435c:	f7ff ffd2 	bl	80a4304 <__aeabi_cfrcmple>
 80a4360:	bf94      	ite	ls
 80a4362:	2001      	movls	r0, #1
 80a4364:	2000      	movhi	r0, #0
 80a4366:	f85d fb08 	ldr.w	pc, [sp], #8
 80a436a:	bf00      	nop

080a436c <__aeabi_fcmpgt>:
 80a436c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a4370:	f7ff ffc8 	bl	80a4304 <__aeabi_cfrcmple>
 80a4374:	bf34      	ite	cc
 80a4376:	2001      	movcc	r0, #1
 80a4378:	2000      	movcs	r0, #0
 80a437a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a437e:	bf00      	nop

080a4380 <__aeabi_f2iz>:
 80a4380:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a4384:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80a4388:	d30f      	bcc.n	80a43aa <__aeabi_f2iz+0x2a>
 80a438a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80a438e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80a4392:	d90d      	bls.n	80a43b0 <__aeabi_f2iz+0x30>
 80a4394:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80a4398:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a439c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a43a0:	fa23 f002 	lsr.w	r0, r3, r2
 80a43a4:	bf18      	it	ne
 80a43a6:	4240      	negne	r0, r0
 80a43a8:	4770      	bx	lr
 80a43aa:	f04f 0000 	mov.w	r0, #0
 80a43ae:	4770      	bx	lr
 80a43b0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80a43b4:	d101      	bne.n	80a43ba <__aeabi_f2iz+0x3a>
 80a43b6:	0242      	lsls	r2, r0, #9
 80a43b8:	d105      	bne.n	80a43c6 <__aeabi_f2iz+0x46>
 80a43ba:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80a43be:	bf08      	it	eq
 80a43c0:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a43c4:	4770      	bx	lr
 80a43c6:	f04f 0000 	mov.w	r0, #0
 80a43ca:	4770      	bx	lr

080a43cc <__aeabi_uldivmod>:
 80a43cc:	b953      	cbnz	r3, 80a43e4 <__aeabi_uldivmod+0x18>
 80a43ce:	b94a      	cbnz	r2, 80a43e4 <__aeabi_uldivmod+0x18>
 80a43d0:	2900      	cmp	r1, #0
 80a43d2:	bf08      	it	eq
 80a43d4:	2800      	cmpeq	r0, #0
 80a43d6:	bf1c      	itt	ne
 80a43d8:	f04f 31ff 	movne.w	r1, #4294967295
 80a43dc:	f04f 30ff 	movne.w	r0, #4294967295
 80a43e0:	f000 b9a6 	b.w	80a4730 <__aeabi_idiv0>
 80a43e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80a43e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80a43ec:	f000 f82a 	bl	80a4444 <__udivmoddi4>
 80a43f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a43f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a43f8:	b004      	add	sp, #16
 80a43fa:	4770      	bx	lr

080a43fc <__aeabi_d2ulz>:
 80a43fc:	b5d0      	push	{r4, r6, r7, lr}
 80a43fe:	2200      	movs	r2, #0
 80a4400:	4b0e      	ldr	r3, [pc, #56]	; (80a443c <__aeabi_d2ulz+0x40>)
 80a4402:	4606      	mov	r6, r0
 80a4404:	460f      	mov	r7, r1
 80a4406:	f7ff fa2d 	bl	80a3864 <__aeabi_dmul>
 80a440a:	f7ff fcc5 	bl	80a3d98 <__aeabi_d2uiz>
 80a440e:	4604      	mov	r4, r0
 80a4410:	f7ff f9b2 	bl	80a3778 <__aeabi_ui2d>
 80a4414:	2200      	movs	r2, #0
 80a4416:	4b0a      	ldr	r3, [pc, #40]	; (80a4440 <__aeabi_d2ulz+0x44>)
 80a4418:	f7ff fa24 	bl	80a3864 <__aeabi_dmul>
 80a441c:	4602      	mov	r2, r0
 80a441e:	460b      	mov	r3, r1
 80a4420:	4630      	mov	r0, r6
 80a4422:	4639      	mov	r1, r7
 80a4424:	f7ff f86a 	bl	80a34fc <__aeabi_dsub>
 80a4428:	f7ff fcb6 	bl	80a3d98 <__aeabi_d2uiz>
 80a442c:	4623      	mov	r3, r4
 80a442e:	2200      	movs	r2, #0
 80a4430:	ea42 0200 	orr.w	r2, r2, r0
 80a4434:	4610      	mov	r0, r2
 80a4436:	4619      	mov	r1, r3
 80a4438:	bdd0      	pop	{r4, r6, r7, pc}
 80a443a:	bf00      	nop
 80a443c:	3df00000 	.word	0x3df00000
 80a4440:	41f00000 	.word	0x41f00000

080a4444 <__udivmoddi4>:
 80a4444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a4448:	468c      	mov	ip, r1
 80a444a:	460c      	mov	r4, r1
 80a444c:	4605      	mov	r5, r0
 80a444e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80a4450:	2b00      	cmp	r3, #0
 80a4452:	d14f      	bne.n	80a44f4 <__udivmoddi4+0xb0>
 80a4454:	428a      	cmp	r2, r1
 80a4456:	4617      	mov	r7, r2
 80a4458:	d96b      	bls.n	80a4532 <__udivmoddi4+0xee>
 80a445a:	fab2 fe82 	clz	lr, r2
 80a445e:	f1be 0f00 	cmp.w	lr, #0
 80a4462:	d00b      	beq.n	80a447c <__udivmoddi4+0x38>
 80a4464:	f1ce 0520 	rsb	r5, lr, #32
 80a4468:	fa20 f505 	lsr.w	r5, r0, r5
 80a446c:	fa01 f30e 	lsl.w	r3, r1, lr
 80a4470:	ea45 0c03 	orr.w	ip, r5, r3
 80a4474:	fa02 f70e 	lsl.w	r7, r2, lr
 80a4478:	fa00 f50e 	lsl.w	r5, r0, lr
 80a447c:	0c39      	lsrs	r1, r7, #16
 80a447e:	fbbc f0f1 	udiv	r0, ip, r1
 80a4482:	b2ba      	uxth	r2, r7
 80a4484:	fb01 c310 	mls	r3, r1, r0, ip
 80a4488:	fb00 f802 	mul.w	r8, r0, r2
 80a448c:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 80a4490:	ea4c 4403 	orr.w	r4, ip, r3, lsl #16
 80a4494:	45a0      	cmp	r8, r4
 80a4496:	d909      	bls.n	80a44ac <__udivmoddi4+0x68>
 80a4498:	19e4      	adds	r4, r4, r7
 80a449a:	f100 33ff 	add.w	r3, r0, #4294967295
 80a449e:	f080 8128 	bcs.w	80a46f2 <__udivmoddi4+0x2ae>
 80a44a2:	45a0      	cmp	r8, r4
 80a44a4:	f240 8125 	bls.w	80a46f2 <__udivmoddi4+0x2ae>
 80a44a8:	3802      	subs	r0, #2
 80a44aa:	443c      	add	r4, r7
 80a44ac:	ebc8 0404 	rsb	r4, r8, r4
 80a44b0:	fbb4 f3f1 	udiv	r3, r4, r1
 80a44b4:	fb01 4c13 	mls	ip, r1, r3, r4
 80a44b8:	fb03 f202 	mul.w	r2, r3, r2
 80a44bc:	b2ac      	uxth	r4, r5
 80a44be:	ea44 410c 	orr.w	r1, r4, ip, lsl #16
 80a44c2:	428a      	cmp	r2, r1
 80a44c4:	d909      	bls.n	80a44da <__udivmoddi4+0x96>
 80a44c6:	19c9      	adds	r1, r1, r7
 80a44c8:	f103 34ff 	add.w	r4, r3, #4294967295
 80a44cc:	f080 810f 	bcs.w	80a46ee <__udivmoddi4+0x2aa>
 80a44d0:	428a      	cmp	r2, r1
 80a44d2:	f240 810c 	bls.w	80a46ee <__udivmoddi4+0x2aa>
 80a44d6:	3b02      	subs	r3, #2
 80a44d8:	4439      	add	r1, r7
 80a44da:	1a8a      	subs	r2, r1, r2
 80a44dc:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80a44e0:	2100      	movs	r1, #0
 80a44e2:	2e00      	cmp	r6, #0
 80a44e4:	d063      	beq.n	80a45ae <__udivmoddi4+0x16a>
 80a44e6:	fa22 f20e 	lsr.w	r2, r2, lr
 80a44ea:	2300      	movs	r3, #0
 80a44ec:	e886 000c 	stmia.w	r6, {r2, r3}
 80a44f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a44f4:	428b      	cmp	r3, r1
 80a44f6:	d907      	bls.n	80a4508 <__udivmoddi4+0xc4>
 80a44f8:	2e00      	cmp	r6, #0
 80a44fa:	d056      	beq.n	80a45aa <__udivmoddi4+0x166>
 80a44fc:	2100      	movs	r1, #0
 80a44fe:	e886 0011 	stmia.w	r6, {r0, r4}
 80a4502:	4608      	mov	r0, r1
 80a4504:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a4508:	fab3 f183 	clz	r1, r3
 80a450c:	2900      	cmp	r1, #0
 80a450e:	f040 8093 	bne.w	80a4638 <__udivmoddi4+0x1f4>
 80a4512:	42a3      	cmp	r3, r4
 80a4514:	d302      	bcc.n	80a451c <__udivmoddi4+0xd8>
 80a4516:	4282      	cmp	r2, r0
 80a4518:	f200 80fe 	bhi.w	80a4718 <__udivmoddi4+0x2d4>
 80a451c:	1a85      	subs	r5, r0, r2
 80a451e:	eb64 0303 	sbc.w	r3, r4, r3
 80a4522:	469c      	mov	ip, r3
 80a4524:	2001      	movs	r0, #1
 80a4526:	2e00      	cmp	r6, #0
 80a4528:	d041      	beq.n	80a45ae <__udivmoddi4+0x16a>
 80a452a:	e886 1020 	stmia.w	r6, {r5, ip}
 80a452e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a4532:	b912      	cbnz	r2, 80a453a <__udivmoddi4+0xf6>
 80a4534:	2701      	movs	r7, #1
 80a4536:	fbb7 f7f2 	udiv	r7, r7, r2
 80a453a:	fab7 fe87 	clz	lr, r7
 80a453e:	f1be 0f00 	cmp.w	lr, #0
 80a4542:	d136      	bne.n	80a45b2 <__udivmoddi4+0x16e>
 80a4544:	1be4      	subs	r4, r4, r7
 80a4546:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80a454a:	fa1f f987 	uxth.w	r9, r7
 80a454e:	2101      	movs	r1, #1
 80a4550:	fbb4 f3f8 	udiv	r3, r4, r8
 80a4554:	fb08 4413 	mls	r4, r8, r3, r4
 80a4558:	fb09 f203 	mul.w	r2, r9, r3
 80a455c:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 80a4560:	ea4c 4404 	orr.w	r4, ip, r4, lsl #16
 80a4564:	42a2      	cmp	r2, r4
 80a4566:	d907      	bls.n	80a4578 <__udivmoddi4+0x134>
 80a4568:	19e4      	adds	r4, r4, r7
 80a456a:	f103 30ff 	add.w	r0, r3, #4294967295
 80a456e:	d202      	bcs.n	80a4576 <__udivmoddi4+0x132>
 80a4570:	42a2      	cmp	r2, r4
 80a4572:	f200 80d3 	bhi.w	80a471c <__udivmoddi4+0x2d8>
 80a4576:	4603      	mov	r3, r0
 80a4578:	1aa4      	subs	r4, r4, r2
 80a457a:	fbb4 f0f8 	udiv	r0, r4, r8
 80a457e:	fb08 4810 	mls	r8, r8, r0, r4
 80a4582:	fb09 f900 	mul.w	r9, r9, r0
 80a4586:	b2ac      	uxth	r4, r5
 80a4588:	ea44 4208 	orr.w	r2, r4, r8, lsl #16
 80a458c:	4591      	cmp	r9, r2
 80a458e:	d907      	bls.n	80a45a0 <__udivmoddi4+0x15c>
 80a4590:	19d2      	adds	r2, r2, r7
 80a4592:	f100 34ff 	add.w	r4, r0, #4294967295
 80a4596:	d202      	bcs.n	80a459e <__udivmoddi4+0x15a>
 80a4598:	4591      	cmp	r9, r2
 80a459a:	f200 80ba 	bhi.w	80a4712 <__udivmoddi4+0x2ce>
 80a459e:	4620      	mov	r0, r4
 80a45a0:	ebc9 0202 	rsb	r2, r9, r2
 80a45a4:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80a45a8:	e79b      	b.n	80a44e2 <__udivmoddi4+0x9e>
 80a45aa:	4631      	mov	r1, r6
 80a45ac:	4630      	mov	r0, r6
 80a45ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a45b2:	fa07 f70e 	lsl.w	r7, r7, lr
 80a45b6:	f1ce 0c20 	rsb	ip, lr, #32
 80a45ba:	fa24 f30c 	lsr.w	r3, r4, ip
 80a45be:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80a45c2:	fbb3 faf8 	udiv	sl, r3, r8
 80a45c6:	fa1f f987 	uxth.w	r9, r7
 80a45ca:	fb08 351a 	mls	r5, r8, sl, r3
 80a45ce:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a45d2:	fa04 f40e 	lsl.w	r4, r4, lr
 80a45d6:	fb0a fb09 	mul.w	fp, sl, r9
 80a45da:	ea4c 0c04 	orr.w	ip, ip, r4
 80a45de:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80a45e2:	ea42 4305 	orr.w	r3, r2, r5, lsl #16
 80a45e6:	459b      	cmp	fp, r3
 80a45e8:	fa00 f50e 	lsl.w	r5, r0, lr
 80a45ec:	d90a      	bls.n	80a4604 <__udivmoddi4+0x1c0>
 80a45ee:	19db      	adds	r3, r3, r7
 80a45f0:	f10a 32ff 	add.w	r2, sl, #4294967295
 80a45f4:	f080 808b 	bcs.w	80a470e <__udivmoddi4+0x2ca>
 80a45f8:	459b      	cmp	fp, r3
 80a45fa:	f240 8088 	bls.w	80a470e <__udivmoddi4+0x2ca>
 80a45fe:	f1aa 0a02 	sub.w	sl, sl, #2
 80a4602:	443b      	add	r3, r7
 80a4604:	ebcb 0303 	rsb	r3, fp, r3
 80a4608:	fbb3 f0f8 	udiv	r0, r3, r8
 80a460c:	fb08 3310 	mls	r3, r8, r0, r3
 80a4610:	fb00 f409 	mul.w	r4, r0, r9
 80a4614:	fa1f fc8c 	uxth.w	ip, ip
 80a4618:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
 80a461c:	429c      	cmp	r4, r3
 80a461e:	d907      	bls.n	80a4630 <__udivmoddi4+0x1ec>
 80a4620:	19db      	adds	r3, r3, r7
 80a4622:	f100 32ff 	add.w	r2, r0, #4294967295
 80a4626:	d26e      	bcs.n	80a4706 <__udivmoddi4+0x2c2>
 80a4628:	429c      	cmp	r4, r3
 80a462a:	d96c      	bls.n	80a4706 <__udivmoddi4+0x2c2>
 80a462c:	3802      	subs	r0, #2
 80a462e:	443b      	add	r3, r7
 80a4630:	1b1c      	subs	r4, r3, r4
 80a4632:	ea40 410a 	orr.w	r1, r0, sl, lsl #16
 80a4636:	e78b      	b.n	80a4550 <__udivmoddi4+0x10c>
 80a4638:	f1c1 0e20 	rsb	lr, r1, #32
 80a463c:	408b      	lsls	r3, r1
 80a463e:	fa22 fc0e 	lsr.w	ip, r2, lr
 80a4642:	ea4c 0c03 	orr.w	ip, ip, r3
 80a4646:	fa24 f70e 	lsr.w	r7, r4, lr
 80a464a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80a464e:	fbb7 faf9 	udiv	sl, r7, r9
 80a4652:	fa1f f38c 	uxth.w	r3, ip
 80a4656:	fb09 771a 	mls	r7, r9, sl, r7
 80a465a:	fa20 f80e 	lsr.w	r8, r0, lr
 80a465e:	408c      	lsls	r4, r1
 80a4660:	fb0a f503 	mul.w	r5, sl, r3
 80a4664:	ea48 0404 	orr.w	r4, r8, r4
 80a4668:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80a466c:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
 80a4670:	42bd      	cmp	r5, r7
 80a4672:	fa02 f201 	lsl.w	r2, r2, r1
 80a4676:	fa00 fb01 	lsl.w	fp, r0, r1
 80a467a:	d909      	bls.n	80a4690 <__udivmoddi4+0x24c>
 80a467c:	eb17 070c 	adds.w	r7, r7, ip
 80a4680:	f10a 30ff 	add.w	r0, sl, #4294967295
 80a4684:	d241      	bcs.n	80a470a <__udivmoddi4+0x2c6>
 80a4686:	42bd      	cmp	r5, r7
 80a4688:	d93f      	bls.n	80a470a <__udivmoddi4+0x2c6>
 80a468a:	f1aa 0a02 	sub.w	sl, sl, #2
 80a468e:	4467      	add	r7, ip
 80a4690:	1b7f      	subs	r7, r7, r5
 80a4692:	fbb7 f5f9 	udiv	r5, r7, r9
 80a4696:	fb09 7715 	mls	r7, r9, r5, r7
 80a469a:	fb05 f303 	mul.w	r3, r5, r3
 80a469e:	b2a4      	uxth	r4, r4
 80a46a0:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 80a46a4:	42bb      	cmp	r3, r7
 80a46a6:	d908      	bls.n	80a46ba <__udivmoddi4+0x276>
 80a46a8:	eb17 070c 	adds.w	r7, r7, ip
 80a46ac:	f105 30ff 	add.w	r0, r5, #4294967295
 80a46b0:	d227      	bcs.n	80a4702 <__udivmoddi4+0x2be>
 80a46b2:	42bb      	cmp	r3, r7
 80a46b4:	d925      	bls.n	80a4702 <__udivmoddi4+0x2be>
 80a46b6:	3d02      	subs	r5, #2
 80a46b8:	4467      	add	r7, ip
 80a46ba:	ea45 400a 	orr.w	r0, r5, sl, lsl #16
 80a46be:	fba0 8902 	umull	r8, r9, r0, r2
 80a46c2:	1aff      	subs	r7, r7, r3
 80a46c4:	454f      	cmp	r7, r9
 80a46c6:	4645      	mov	r5, r8
 80a46c8:	464c      	mov	r4, r9
 80a46ca:	d314      	bcc.n	80a46f6 <__udivmoddi4+0x2b2>
 80a46cc:	d029      	beq.n	80a4722 <__udivmoddi4+0x2de>
 80a46ce:	b366      	cbz	r6, 80a472a <__udivmoddi4+0x2e6>
 80a46d0:	ebbb 0305 	subs.w	r3, fp, r5
 80a46d4:	eb67 0704 	sbc.w	r7, r7, r4
 80a46d8:	fa07 fe0e 	lsl.w	lr, r7, lr
 80a46dc:	40cb      	lsrs	r3, r1
 80a46de:	40cf      	lsrs	r7, r1
 80a46e0:	ea4e 0303 	orr.w	r3, lr, r3
 80a46e4:	e886 0088 	stmia.w	r6, {r3, r7}
 80a46e8:	2100      	movs	r1, #0
 80a46ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a46ee:	4623      	mov	r3, r4
 80a46f0:	e6f3      	b.n	80a44da <__udivmoddi4+0x96>
 80a46f2:	4618      	mov	r0, r3
 80a46f4:	e6da      	b.n	80a44ac <__udivmoddi4+0x68>
 80a46f6:	ebb8 0502 	subs.w	r5, r8, r2
 80a46fa:	eb69 040c 	sbc.w	r4, r9, ip
 80a46fe:	3801      	subs	r0, #1
 80a4700:	e7e5      	b.n	80a46ce <__udivmoddi4+0x28a>
 80a4702:	4605      	mov	r5, r0
 80a4704:	e7d9      	b.n	80a46ba <__udivmoddi4+0x276>
 80a4706:	4610      	mov	r0, r2
 80a4708:	e792      	b.n	80a4630 <__udivmoddi4+0x1ec>
 80a470a:	4682      	mov	sl, r0
 80a470c:	e7c0      	b.n	80a4690 <__udivmoddi4+0x24c>
 80a470e:	4692      	mov	sl, r2
 80a4710:	e778      	b.n	80a4604 <__udivmoddi4+0x1c0>
 80a4712:	3802      	subs	r0, #2
 80a4714:	443a      	add	r2, r7
 80a4716:	e743      	b.n	80a45a0 <__udivmoddi4+0x15c>
 80a4718:	4608      	mov	r0, r1
 80a471a:	e704      	b.n	80a4526 <__udivmoddi4+0xe2>
 80a471c:	3b02      	subs	r3, #2
 80a471e:	443c      	add	r4, r7
 80a4720:	e72a      	b.n	80a4578 <__udivmoddi4+0x134>
 80a4722:	45c3      	cmp	fp, r8
 80a4724:	d3e7      	bcc.n	80a46f6 <__udivmoddi4+0x2b2>
 80a4726:	463c      	mov	r4, r7
 80a4728:	e7d1      	b.n	80a46ce <__udivmoddi4+0x28a>
 80a472a:	4631      	mov	r1, r6
 80a472c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a4730 <__aeabi_idiv0>:
 80a4730:	4770      	bx	lr
 80a4732:	bf00      	nop

080a4734 <asctime>:
 80a4734:	4b09      	ldr	r3, [pc, #36]	; (80a475c <asctime+0x28>)
 80a4736:	b570      	push	{r4, r5, r6, lr}
 80a4738:	681c      	ldr	r4, [r3, #0]
 80a473a:	4606      	mov	r6, r0
 80a473c:	6c25      	ldr	r5, [r4, #64]	; 0x40
 80a473e:	b93d      	cbnz	r5, 80a4750 <asctime+0x1c>
 80a4740:	201a      	movs	r0, #26
 80a4742:	f7fd f99f 	bl	80a1a84 <malloc>
 80a4746:	221a      	movs	r2, #26
 80a4748:	6420      	str	r0, [r4, #64]	; 0x40
 80a474a:	4629      	mov	r1, r5
 80a474c:	f000 f943 	bl	80a49d6 <memset>
 80a4750:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80a4752:	4630      	mov	r0, r6
 80a4754:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a4758:	f000 b802 	b.w	80a4760 <asctime_r>
 80a475c:	2000006c 	.word	0x2000006c

080a4760 <asctime_r>:
 80a4760:	b510      	push	{r4, lr}
 80a4762:	460c      	mov	r4, r1
 80a4764:	6941      	ldr	r1, [r0, #20]
 80a4766:	b086      	sub	sp, #24
 80a4768:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 80a476c:	6903      	ldr	r3, [r0, #16]
 80a476e:	6982      	ldr	r2, [r0, #24]
 80a4770:	9104      	str	r1, [sp, #16]
 80a4772:	6801      	ldr	r1, [r0, #0]
 80a4774:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80a4778:	9103      	str	r1, [sp, #12]
 80a477a:	6841      	ldr	r1, [r0, #4]
 80a477c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80a4780:	9102      	str	r1, [sp, #8]
 80a4782:	6881      	ldr	r1, [r0, #8]
 80a4784:	9101      	str	r1, [sp, #4]
 80a4786:	68c1      	ldr	r1, [r0, #12]
 80a4788:	4620      	mov	r0, r4
 80a478a:	9100      	str	r1, [sp, #0]
 80a478c:	4904      	ldr	r1, [pc, #16]	; (80a47a0 <asctime_r+0x40>)
 80a478e:	440b      	add	r3, r1
 80a4790:	4904      	ldr	r1, [pc, #16]	; (80a47a4 <asctime_r+0x44>)
 80a4792:	440a      	add	r2, r1
 80a4794:	4904      	ldr	r1, [pc, #16]	; (80a47a8 <asctime_r+0x48>)
 80a4796:	f7fd f98d 	bl	80a1ab4 <siprintf>
 80a479a:	4620      	mov	r0, r4
 80a479c:	b006      	add	sp, #24
 80a479e:	bd10      	pop	{r4, pc}
 80a47a0:	080a65ca 	.word	0x080a65ca
 80a47a4:	080a65b5 	.word	0x080a65b5
 80a47a8:	080a65ee 	.word	0x080a65ee

080a47ac <atol>:
 80a47ac:	220a      	movs	r2, #10
 80a47ae:	2100      	movs	r1, #0
 80a47b0:	f000 bf1e 	b.w	80a55f0 <strtol>

080a47b4 <__cxa_atexit>:
 80a47b4:	b510      	push	{r4, lr}
 80a47b6:	4c05      	ldr	r4, [pc, #20]	; (80a47cc <__cxa_atexit+0x18>)
 80a47b8:	4613      	mov	r3, r2
 80a47ba:	b12c      	cbz	r4, 80a47c8 <__cxa_atexit+0x14>
 80a47bc:	460a      	mov	r2, r1
 80a47be:	4601      	mov	r1, r0
 80a47c0:	2002      	movs	r0, #2
 80a47c2:	f3af 8000 	nop.w
 80a47c6:	bd10      	pop	{r4, pc}
 80a47c8:	4620      	mov	r0, r4
 80a47ca:	bd10      	pop	{r4, pc}
 80a47cc:	00000000 	.word	0x00000000

080a47d0 <localtime>:
 80a47d0:	b538      	push	{r3, r4, r5, lr}
 80a47d2:	4b07      	ldr	r3, [pc, #28]	; (80a47f0 <localtime+0x20>)
 80a47d4:	4605      	mov	r5, r0
 80a47d6:	681c      	ldr	r4, [r3, #0]
 80a47d8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80a47da:	b91b      	cbnz	r3, 80a47e4 <localtime+0x14>
 80a47dc:	2024      	movs	r0, #36	; 0x24
 80a47de:	f7fd f951 	bl	80a1a84 <malloc>
 80a47e2:	63e0      	str	r0, [r4, #60]	; 0x3c
 80a47e4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80a47e6:	4628      	mov	r0, r5
 80a47e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a47ec:	f000 b802 	b.w	80a47f4 <localtime_r>
 80a47f0:	2000006c 	.word	0x2000006c

080a47f4 <localtime_r>:
 80a47f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a47f8:	460c      	mov	r4, r1
 80a47fa:	4680      	mov	r8, r0
 80a47fc:	f001 fa12 	bl	80a5c24 <__gettzinfo>
 80a4800:	4621      	mov	r1, r4
 80a4802:	4607      	mov	r7, r0
 80a4804:	4640      	mov	r0, r8
 80a4806:	f001 fa11 	bl	80a5c2c <gmtime_r>
 80a480a:	6946      	ldr	r6, [r0, #20]
 80a480c:	4604      	mov	r4, r0
 80a480e:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 80a4812:	07b3      	lsls	r3, r6, #30
 80a4814:	d105      	bne.n	80a4822 <localtime_r+0x2e>
 80a4816:	2264      	movs	r2, #100	; 0x64
 80a4818:	fb96 f3f2 	sdiv	r3, r6, r2
 80a481c:	fb02 6313 	mls	r3, r2, r3, r6
 80a4820:	b94b      	cbnz	r3, 80a4836 <localtime_r+0x42>
 80a4822:	f44f 75c8 	mov.w	r5, #400	; 0x190
 80a4826:	fb96 f3f5 	sdiv	r3, r6, r5
 80a482a:	fb05 6513 	mls	r5, r5, r3, r6
 80a482e:	fab5 f385 	clz	r3, r5
 80a4832:	095b      	lsrs	r3, r3, #5
 80a4834:	e000      	b.n	80a4838 <localtime_r+0x44>
 80a4836:	2301      	movs	r3, #1
 80a4838:	4a5f      	ldr	r2, [pc, #380]	; (80a49b8 <localtime_r+0x1c4>)
 80a483a:	2530      	movs	r5, #48	; 0x30
 80a483c:	fb05 2503 	mla	r5, r5, r3, r2
 80a4840:	f001 f820 	bl	80a5884 <__tz_lock>
 80a4844:	f001 f820 	bl	80a5888 <_tzset_unlocked>
 80a4848:	4b5c      	ldr	r3, [pc, #368]	; (80a49bc <localtime_r+0x1c8>)
 80a484a:	681b      	ldr	r3, [r3, #0]
 80a484c:	b1f3      	cbz	r3, 80a488c <localtime_r+0x98>
 80a484e:	687b      	ldr	r3, [r7, #4]
 80a4850:	429e      	cmp	r6, r3
 80a4852:	d105      	bne.n	80a4860 <localtime_r+0x6c>
 80a4854:	6839      	ldr	r1, [r7, #0]
 80a4856:	f8d8 3000 	ldr.w	r3, [r8]
 80a485a:	69fa      	ldr	r2, [r7, #28]
 80a485c:	b941      	cbnz	r1, 80a4870 <localtime_r+0x7c>
 80a485e:	e00a      	b.n	80a4876 <localtime_r+0x82>
 80a4860:	4630      	mov	r0, r6
 80a4862:	f000 ff67 	bl	80a5734 <__tzcalc_limits>
 80a4866:	2800      	cmp	r0, #0
 80a4868:	d1f4      	bne.n	80a4854 <localtime_r+0x60>
 80a486a:	f04f 33ff 	mov.w	r3, #4294967295
 80a486e:	e00d      	b.n	80a488c <localtime_r+0x98>
 80a4870:	4293      	cmp	r3, r2
 80a4872:	db08      	blt.n	80a4886 <localtime_r+0x92>
 80a4874:	e001      	b.n	80a487a <localtime_r+0x86>
 80a4876:	4293      	cmp	r3, r2
 80a4878:	da07      	bge.n	80a488a <localtime_r+0x96>
 80a487a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80a487c:	4293      	cmp	r3, r2
 80a487e:	bfac      	ite	ge
 80a4880:	2300      	movge	r3, #0
 80a4882:	2301      	movlt	r3, #1
 80a4884:	e002      	b.n	80a488c <localtime_r+0x98>
 80a4886:	2300      	movs	r3, #0
 80a4888:	e000      	b.n	80a488c <localtime_r+0x98>
 80a488a:	2301      	movs	r3, #1
 80a488c:	6223      	str	r3, [r4, #32]
 80a488e:	6a23      	ldr	r3, [r4, #32]
 80a4890:	203c      	movs	r0, #60	; 0x3c
 80a4892:	2b01      	cmp	r3, #1
 80a4894:	bf0c      	ite	eq
 80a4896:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
 80a4898:	6a39      	ldrne	r1, [r7, #32]
 80a489a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80a489e:	fb91 f6f3 	sdiv	r6, r1, r3
 80a48a2:	fb03 1316 	mls	r3, r3, r6, r1
 80a48a6:	fb93 f2f0 	sdiv	r2, r3, r0
 80a48aa:	fb00 3012 	mls	r0, r0, r2, r3
 80a48ae:	6861      	ldr	r1, [r4, #4]
 80a48b0:	6823      	ldr	r3, [r4, #0]
 80a48b2:	1a89      	subs	r1, r1, r2
 80a48b4:	68a2      	ldr	r2, [r4, #8]
 80a48b6:	1a1b      	subs	r3, r3, r0
 80a48b8:	1b92      	subs	r2, r2, r6
 80a48ba:	2b3b      	cmp	r3, #59	; 0x3b
 80a48bc:	6023      	str	r3, [r4, #0]
 80a48be:	6061      	str	r1, [r4, #4]
 80a48c0:	60a2      	str	r2, [r4, #8]
 80a48c2:	dd03      	ble.n	80a48cc <localtime_r+0xd8>
 80a48c4:	3101      	adds	r1, #1
 80a48c6:	6061      	str	r1, [r4, #4]
 80a48c8:	3b3c      	subs	r3, #60	; 0x3c
 80a48ca:	e004      	b.n	80a48d6 <localtime_r+0xe2>
 80a48cc:	2b00      	cmp	r3, #0
 80a48ce:	da03      	bge.n	80a48d8 <localtime_r+0xe4>
 80a48d0:	3901      	subs	r1, #1
 80a48d2:	6061      	str	r1, [r4, #4]
 80a48d4:	333c      	adds	r3, #60	; 0x3c
 80a48d6:	6023      	str	r3, [r4, #0]
 80a48d8:	6863      	ldr	r3, [r4, #4]
 80a48da:	2b3b      	cmp	r3, #59	; 0x3b
 80a48dc:	dd03      	ble.n	80a48e6 <localtime_r+0xf2>
 80a48de:	3201      	adds	r2, #1
 80a48e0:	60a2      	str	r2, [r4, #8]
 80a48e2:	3b3c      	subs	r3, #60	; 0x3c
 80a48e4:	e004      	b.n	80a48f0 <localtime_r+0xfc>
 80a48e6:	2b00      	cmp	r3, #0
 80a48e8:	da03      	bge.n	80a48f2 <localtime_r+0xfe>
 80a48ea:	3a01      	subs	r2, #1
 80a48ec:	60a2      	str	r2, [r4, #8]
 80a48ee:	333c      	adds	r3, #60	; 0x3c
 80a48f0:	6063      	str	r3, [r4, #4]
 80a48f2:	68a3      	ldr	r3, [r4, #8]
 80a48f4:	2b17      	cmp	r3, #23
 80a48f6:	dd22      	ble.n	80a493e <localtime_r+0x14a>
 80a48f8:	69e2      	ldr	r2, [r4, #28]
 80a48fa:	3b18      	subs	r3, #24
 80a48fc:	3201      	adds	r2, #1
 80a48fe:	61e2      	str	r2, [r4, #28]
 80a4900:	69a2      	ldr	r2, [r4, #24]
 80a4902:	60a3      	str	r3, [r4, #8]
 80a4904:	3201      	adds	r2, #1
 80a4906:	2a06      	cmp	r2, #6
 80a4908:	bfc8      	it	gt
 80a490a:	2200      	movgt	r2, #0
 80a490c:	61a2      	str	r2, [r4, #24]
 80a490e:	68e2      	ldr	r2, [r4, #12]
 80a4910:	6923      	ldr	r3, [r4, #16]
 80a4912:	3201      	adds	r2, #1
 80a4914:	60e2      	str	r2, [r4, #12]
 80a4916:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 80a491a:	428a      	cmp	r2, r1
 80a491c:	dd46      	ble.n	80a49ac <localtime_r+0x1b8>
 80a491e:	3301      	adds	r3, #1
 80a4920:	2b0c      	cmp	r3, #12
 80a4922:	bf08      	it	eq
 80a4924:	6963      	ldreq	r3, [r4, #20]
 80a4926:	eba2 0201 	sub.w	r2, r2, r1
 80a492a:	60e2      	str	r2, [r4, #12]
 80a492c:	bf05      	ittet	eq
 80a492e:	3301      	addeq	r3, #1
 80a4930:	2200      	moveq	r2, #0
 80a4932:	6123      	strne	r3, [r4, #16]
 80a4934:	6122      	streq	r2, [r4, #16]
 80a4936:	bf04      	itt	eq
 80a4938:	6163      	streq	r3, [r4, #20]
 80a493a:	61e2      	streq	r2, [r4, #28]
 80a493c:	e036      	b.n	80a49ac <localtime_r+0x1b8>
 80a493e:	2b00      	cmp	r3, #0
 80a4940:	da34      	bge.n	80a49ac <localtime_r+0x1b8>
 80a4942:	69e2      	ldr	r2, [r4, #28]
 80a4944:	3318      	adds	r3, #24
 80a4946:	3a01      	subs	r2, #1
 80a4948:	61e2      	str	r2, [r4, #28]
 80a494a:	69a2      	ldr	r2, [r4, #24]
 80a494c:	60a3      	str	r3, [r4, #8]
 80a494e:	3a01      	subs	r2, #1
 80a4950:	bf48      	it	mi
 80a4952:	2206      	movmi	r2, #6
 80a4954:	61a2      	str	r2, [r4, #24]
 80a4956:	68e2      	ldr	r2, [r4, #12]
 80a4958:	3a01      	subs	r2, #1
 80a495a:	60e2      	str	r2, [r4, #12]
 80a495c:	bb32      	cbnz	r2, 80a49ac <localtime_r+0x1b8>
 80a495e:	6923      	ldr	r3, [r4, #16]
 80a4960:	3b01      	subs	r3, #1
 80a4962:	d401      	bmi.n	80a4968 <localtime_r+0x174>
 80a4964:	6123      	str	r3, [r4, #16]
 80a4966:	e01d      	b.n	80a49a4 <localtime_r+0x1b0>
 80a4968:	230b      	movs	r3, #11
 80a496a:	6123      	str	r3, [r4, #16]
 80a496c:	6963      	ldr	r3, [r4, #20]
 80a496e:	1e5a      	subs	r2, r3, #1
 80a4970:	f012 0f03 	tst.w	r2, #3
 80a4974:	6162      	str	r2, [r4, #20]
 80a4976:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 80a497a:	d105      	bne.n	80a4988 <localtime_r+0x194>
 80a497c:	2164      	movs	r1, #100	; 0x64
 80a497e:	fb93 f2f1 	sdiv	r2, r3, r1
 80a4982:	fb01 3212 	mls	r2, r1, r2, r3
 80a4986:	b94a      	cbnz	r2, 80a499c <localtime_r+0x1a8>
 80a4988:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80a498c:	fb93 f2f1 	sdiv	r2, r3, r1
 80a4990:	fb01 3312 	mls	r3, r1, r2, r3
 80a4994:	fab3 f383 	clz	r3, r3
 80a4998:	095b      	lsrs	r3, r3, #5
 80a499a:	e000      	b.n	80a499e <localtime_r+0x1aa>
 80a499c:	2301      	movs	r3, #1
 80a499e:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 80a49a2:	61e3      	str	r3, [r4, #28]
 80a49a4:	6923      	ldr	r3, [r4, #16]
 80a49a6:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80a49aa:	60e3      	str	r3, [r4, #12]
 80a49ac:	f000 ff6b 	bl	80a5886 <__tz_unlock>
 80a49b0:	4620      	mov	r0, r4
 80a49b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a49b6:	bf00      	nop
 80a49b8:	080a6774 	.word	0x080a6774
 80a49bc:	200004bc 	.word	0x200004bc

080a49c0 <memcpy>:
 80a49c0:	b510      	push	{r4, lr}
 80a49c2:	1e43      	subs	r3, r0, #1
 80a49c4:	440a      	add	r2, r1
 80a49c6:	4291      	cmp	r1, r2
 80a49c8:	d004      	beq.n	80a49d4 <memcpy+0x14>
 80a49ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a49ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a49d2:	e7f8      	b.n	80a49c6 <memcpy+0x6>
 80a49d4:	bd10      	pop	{r4, pc}

080a49d6 <memset>:
 80a49d6:	4603      	mov	r3, r0
 80a49d8:	4402      	add	r2, r0
 80a49da:	4293      	cmp	r3, r2
 80a49dc:	d002      	beq.n	80a49e4 <memset+0xe>
 80a49de:	f803 1b01 	strb.w	r1, [r3], #1
 80a49e2:	e7fa      	b.n	80a49da <memset+0x4>
 80a49e4:	4770      	bx	lr
	...

080a49e8 <srand>:
 80a49e8:	b538      	push	{r3, r4, r5, lr}
 80a49ea:	4b12      	ldr	r3, [pc, #72]	; (80a4a34 <srand+0x4c>)
 80a49ec:	4605      	mov	r5, r0
 80a49ee:	681c      	ldr	r4, [r3, #0]
 80a49f0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a49f2:	b9d3      	cbnz	r3, 80a4a2a <srand+0x42>
 80a49f4:	2018      	movs	r0, #24
 80a49f6:	f7fd f845 	bl	80a1a84 <malloc>
 80a49fa:	f243 330e 	movw	r3, #13070	; 0x330e
 80a49fe:	63a0      	str	r0, [r4, #56]	; 0x38
 80a4a00:	8003      	strh	r3, [r0, #0]
 80a4a02:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a4a06:	8043      	strh	r3, [r0, #2]
 80a4a08:	f241 2334 	movw	r3, #4660	; 0x1234
 80a4a0c:	8083      	strh	r3, [r0, #4]
 80a4a0e:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a4a12:	80c3      	strh	r3, [r0, #6]
 80a4a14:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a4a18:	8103      	strh	r3, [r0, #8]
 80a4a1a:	2305      	movs	r3, #5
 80a4a1c:	8143      	strh	r3, [r0, #10]
 80a4a1e:	230b      	movs	r3, #11
 80a4a20:	8183      	strh	r3, [r0, #12]
 80a4a22:	2201      	movs	r2, #1
 80a4a24:	2300      	movs	r3, #0
 80a4a26:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a4a2a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a4a2c:	2200      	movs	r2, #0
 80a4a2e:	611d      	str	r5, [r3, #16]
 80a4a30:	615a      	str	r2, [r3, #20]
 80a4a32:	bd38      	pop	{r3, r4, r5, pc}
 80a4a34:	2000006c 	.word	0x2000006c

080a4a38 <strcmp>:
 80a4a38:	f810 2b01 	ldrb.w	r2, [r0], #1
 80a4a3c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80a4a40:	2a01      	cmp	r2, #1
 80a4a42:	bf28      	it	cs
 80a4a44:	429a      	cmpcs	r2, r3
 80a4a46:	d0f7      	beq.n	80a4a38 <strcmp>
 80a4a48:	1ad0      	subs	r0, r2, r3
 80a4a4a:	4770      	bx	lr

080a4a4c <strcpy>:
 80a4a4c:	4603      	mov	r3, r0
 80a4a4e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80a4a52:	f803 2b01 	strb.w	r2, [r3], #1
 80a4a56:	2a00      	cmp	r2, #0
 80a4a58:	d1f9      	bne.n	80a4a4e <strcpy+0x2>
 80a4a5a:	4770      	bx	lr

080a4a5c <iso_year_adjust>:
 80a4a5c:	6941      	ldr	r1, [r0, #20]
 80a4a5e:	b510      	push	{r4, lr}
 80a4a60:	078b      	lsls	r3, r1, #30
 80a4a62:	d10c      	bne.n	80a4a7e <iso_year_adjust+0x22>
 80a4a64:	f240 736c 	movw	r3, #1900	; 0x76c
 80a4a68:	2900      	cmp	r1, #0
 80a4a6a:	bfa8      	it	ge
 80a4a6c:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 80a4a70:	440b      	add	r3, r1
 80a4a72:	2464      	movs	r4, #100	; 0x64
 80a4a74:	fb93 f2f4 	sdiv	r2, r3, r4
 80a4a78:	fb04 3312 	mls	r3, r4, r2, r3
 80a4a7c:	b983      	cbnz	r3, 80a4aa0 <iso_year_adjust+0x44>
 80a4a7e:	f240 736c 	movw	r3, #1900	; 0x76c
 80a4a82:	2900      	cmp	r1, #0
 80a4a84:	bfa8      	it	ge
 80a4a86:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 80a4a8a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80a4a8e:	440b      	add	r3, r1
 80a4a90:	fb93 f1f2 	sdiv	r1, r3, r2
 80a4a94:	fb02 3311 	mls	r3, r2, r1, r3
 80a4a98:	fab3 f283 	clz	r2, r3
 80a4a9c:	0952      	lsrs	r2, r2, #5
 80a4a9e:	e000      	b.n	80a4aa2 <iso_year_adjust+0x46>
 80a4aa0:	2201      	movs	r2, #1
 80a4aa2:	6983      	ldr	r3, [r0, #24]
 80a4aa4:	69c1      	ldr	r1, [r0, #28]
 80a4aa6:	005b      	lsls	r3, r3, #1
 80a4aa8:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 80a4aac:	4413      	add	r3, r2
 80a4aae:	2b21      	cmp	r3, #33	; 0x21
 80a4ab0:	dc0e      	bgt.n	80a4ad0 <iso_year_adjust+0x74>
 80a4ab2:	2b20      	cmp	r3, #32
 80a4ab4:	da2f      	bge.n	80a4b16 <iso_year_adjust+0xba>
 80a4ab6:	2b0d      	cmp	r3, #13
 80a4ab8:	dc02      	bgt.n	80a4ac0 <iso_year_adjust+0x64>
 80a4aba:	2b0a      	cmp	r3, #10
 80a4abc:	db05      	blt.n	80a4aca <iso_year_adjust+0x6e>
 80a4abe:	e02a      	b.n	80a4b16 <iso_year_adjust+0xba>
 80a4ac0:	2b10      	cmp	r3, #16
 80a4ac2:	db26      	blt.n	80a4b12 <iso_year_adjust+0xb6>
 80a4ac4:	2b11      	cmp	r3, #17
 80a4ac6:	dd26      	ble.n	80a4b16 <iso_year_adjust+0xba>
 80a4ac8:	3b1c      	subs	r3, #28
 80a4aca:	2b01      	cmp	r3, #1
 80a4acc:	d923      	bls.n	80a4b16 <iso_year_adjust+0xba>
 80a4ace:	e020      	b.n	80a4b12 <iso_year_adjust+0xb6>
 80a4ad0:	f241 62c6 	movw	r2, #5830	; 0x16c6
 80a4ad4:	4293      	cmp	r3, r2
 80a4ad6:	dc0e      	bgt.n	80a4af6 <iso_year_adjust+0x9a>
 80a4ad8:	f241 62c2 	movw	r2, #5826	; 0x16c2
 80a4adc:	4293      	cmp	r3, r2
 80a4ade:	da16      	bge.n	80a4b0e <iso_year_adjust+0xb2>
 80a4ae0:	f241 62a2 	movw	r2, #5794	; 0x16a2
 80a4ae4:	4293      	cmp	r3, r2
 80a4ae6:	d012      	beq.n	80a4b0e <iso_year_adjust+0xb2>
 80a4ae8:	db13      	blt.n	80a4b12 <iso_year_adjust+0xb6>
 80a4aea:	f5a3 53b5 	sub.w	r3, r3, #5792	; 0x16a0
 80a4aee:	3b12      	subs	r3, #18
 80a4af0:	2b02      	cmp	r3, #2
 80a4af2:	d90c      	bls.n	80a4b0e <iso_year_adjust+0xb2>
 80a4af4:	e00d      	b.n	80a4b12 <iso_year_adjust+0xb6>
 80a4af6:	f241 62d5 	movw	r2, #5845	; 0x16d5
 80a4afa:	4293      	cmp	r3, r2
 80a4afc:	d007      	beq.n	80a4b0e <iso_year_adjust+0xb2>
 80a4afe:	f241 62d7 	movw	r2, #5847	; 0x16d7
 80a4b02:	4293      	cmp	r3, r2
 80a4b04:	d003      	beq.n	80a4b0e <iso_year_adjust+0xb2>
 80a4b06:	f241 62d3 	movw	r2, #5843	; 0x16d3
 80a4b0a:	4293      	cmp	r3, r2
 80a4b0c:	d101      	bne.n	80a4b12 <iso_year_adjust+0xb6>
 80a4b0e:	2001      	movs	r0, #1
 80a4b10:	bd10      	pop	{r4, pc}
 80a4b12:	2000      	movs	r0, #0
 80a4b14:	bd10      	pop	{r4, pc}
 80a4b16:	f04f 30ff 	mov.w	r0, #4294967295
 80a4b1a:	bd10      	pop	{r4, pc}

080a4b1c <strftime>:
 80a4b1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a4b20:	460e      	mov	r6, r1
 80a4b22:	b093      	sub	sp, #76	; 0x4c
 80a4b24:	461d      	mov	r5, r3
 80a4b26:	4607      	mov	r7, r0
 80a4b28:	4691      	mov	r9, r2
 80a4b2a:	f000 fdf3 	bl	80a5714 <__get_current_time_locale>
 80a4b2e:	2300      	movs	r3, #0
 80a4b30:	9306      	str	r3, [sp, #24]
 80a4b32:	461c      	mov	r4, r3
 80a4b34:	1e73      	subs	r3, r6, #1
 80a4b36:	9003      	str	r0, [sp, #12]
 80a4b38:	9302      	str	r3, [sp, #8]
 80a4b3a:	f899 3000 	ldrb.w	r3, [r9]
 80a4b3e:	2b00      	cmp	r3, #0
 80a4b40:	f000 8492 	beq.w	80a5468 <strftime+0x94c>
 80a4b44:	2b25      	cmp	r3, #37	; 0x25
 80a4b46:	d008      	beq.n	80a4b5a <strftime+0x3e>
 80a4b48:	9a02      	ldr	r2, [sp, #8]
 80a4b4a:	4294      	cmp	r4, r2
 80a4b4c:	f080 8490 	bcs.w	80a5470 <strftime+0x954>
 80a4b50:	553b      	strb	r3, [r7, r4]
 80a4b52:	f109 0901 	add.w	r9, r9, #1
 80a4b56:	3401      	adds	r4, #1
 80a4b58:	e7ef      	b.n	80a4b3a <strftime+0x1e>
 80a4b5a:	f899 a001 	ldrb.w	sl, [r9, #1]
 80a4b5e:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
 80a4b62:	d007      	beq.n	80a4b74 <strftime+0x58>
 80a4b64:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 80a4b68:	d004      	beq.n	80a4b74 <strftime+0x58>
 80a4b6a:	f109 0901 	add.w	r9, r9, #1
 80a4b6e:	f04f 0a00 	mov.w	sl, #0
 80a4b72:	e001      	b.n	80a4b78 <strftime+0x5c>
 80a4b74:	f109 0902 	add.w	r9, r9, #2
 80a4b78:	f899 3000 	ldrb.w	r3, [r9]
 80a4b7c:	3b31      	subs	r3, #49	; 0x31
 80a4b7e:	2b08      	cmp	r3, #8
 80a4b80:	d808      	bhi.n	80a4b94 <strftime+0x78>
 80a4b82:	4648      	mov	r0, r9
 80a4b84:	220a      	movs	r2, #10
 80a4b86:	a90a      	add	r1, sp, #40	; 0x28
 80a4b88:	f000 fdba 	bl	80a5700 <strtoul>
 80a4b8c:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 80a4b90:	4680      	mov	r8, r0
 80a4b92:	e001      	b.n	80a4b98 <strftime+0x7c>
 80a4b94:	f04f 0800 	mov.w	r8, #0
 80a4b98:	f899 3000 	ldrb.w	r3, [r9]
 80a4b9c:	2b45      	cmp	r3, #69	; 0x45
 80a4b9e:	d001      	beq.n	80a4ba4 <strftime+0x88>
 80a4ba0:	2b4f      	cmp	r3, #79	; 0x4f
 80a4ba2:	d101      	bne.n	80a4ba8 <strftime+0x8c>
 80a4ba4:	f109 0901 	add.w	r9, r9, #1
 80a4ba8:	f899 0000 	ldrb.w	r0, [r9]
 80a4bac:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
 80a4bb0:	2b55      	cmp	r3, #85	; 0x55
 80a4bb2:	f200 845d 	bhi.w	80a5470 <strftime+0x954>
 80a4bb6:	e8df f013 	tbh	[pc, r3, lsl #1]
 80a4bba:	044a      	.short	0x044a
 80a4bbc:	045b045b 	.word	0x045b045b
 80a4bc0:	045b045b 	.word	0x045b045b
 80a4bc4:	045b045b 	.word	0x045b045b
 80a4bc8:	045b045b 	.word	0x045b045b
 80a4bcc:	045b045b 	.word	0x045b045b
 80a4bd0:	045b045b 	.word	0x045b045b
 80a4bd4:	045b045b 	.word	0x045b045b
 80a4bd8:	045b045b 	.word	0x045b045b
 80a4bdc:	045b045b 	.word	0x045b045b
 80a4be0:	045b045b 	.word	0x045b045b
 80a4be4:	045b045b 	.word	0x045b045b
 80a4be8:	045b045b 	.word	0x045b045b
 80a4bec:	045b045b 	.word	0x045b045b
 80a4bf0:	006f045b 	.word	0x006f045b
 80a4bf4:	00d400a1 	.word	0x00d400a1
 80a4bf8:	045b011a 	.word	0x045b011a
 80a4bfc:	01a0013f 	.word	0x01a0013f
 80a4c00:	022d0226 	.word	0x022d0226
 80a4c04:	045b045b 	.word	0x045b045b
 80a4c08:	0260045b 	.word	0x0260045b
 80a4c0c:	045b045b 	.word	0x045b045b
 80a4c10:	045b0268 	.word	0x045b0268
 80a4c14:	031c0296 	.word	0x031c0296
 80a4c18:	033a0324 	.word	0x033a0324
 80a4c1c:	03850342 	.word	0x03850342
 80a4c20:	039f00c6 	.word	0x039f00c6
 80a4c24:	045b041f 	.word	0x045b041f
 80a4c28:	045b045b 	.word	0x045b045b
 80a4c2c:	045b045b 	.word	0x045b045b
 80a4c30:	0056045b 	.word	0x0056045b
 80a4c34:	00ba0089 	.word	0x00ba0089
 80a4c38:	010c010c 	.word	0x010c010c
 80a4c3c:	0171045b 	.word	0x0171045b
 80a4c40:	045b0089 	.word	0x045b0089
 80a4c44:	0226023d 	.word	0x0226023d
 80a4c48:	025d022d 	.word	0x025d022d
 80a4c4c:	045b0262 	.word	0x045b0262
 80a4c50:	045b0268 	.word	0x045b0268
 80a4c54:	029b00be 	.word	0x029b00be
 80a4c58:	032d031e 	.word	0x032d031e
 80a4c5c:	037e045b 	.word	0x037e045b
 80a4c60:	039100c2 	.word	0x039100c2
 80a4c64:	03e7      	.short	0x03e7
 80a4c66:	69ab      	ldr	r3, [r5, #24]
 80a4c68:	9a03      	ldr	r2, [sp, #12]
 80a4c6a:	3318      	adds	r3, #24
 80a4c6c:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
 80a4c70:	4640      	mov	r0, r8
 80a4c72:	f000 fc07 	bl	80a5484 <strlen>
 80a4c76:	f108 38ff 	add.w	r8, r8, #4294967295
 80a4c7a:	193b      	adds	r3, r7, r4
 80a4c7c:	4420      	add	r0, r4
 80a4c7e:	4284      	cmp	r4, r0
 80a4c80:	f000 83eb 	beq.w	80a545a <strftime+0x93e>
 80a4c84:	9a02      	ldr	r2, [sp, #8]
 80a4c86:	4294      	cmp	r4, r2
 80a4c88:	f080 83f2 	bcs.w	80a5470 <strftime+0x954>
 80a4c8c:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 80a4c90:	3401      	adds	r4, #1
 80a4c92:	f803 2b01 	strb.w	r2, [r3], #1
 80a4c96:	e7f2      	b.n	80a4c7e <strftime+0x162>
 80a4c98:	69ab      	ldr	r3, [r5, #24]
 80a4c9a:	9a03      	ldr	r2, [sp, #12]
 80a4c9c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80a4ca0:	f8d3 807c 	ldr.w	r8, [r3, #124]	; 0x7c
 80a4ca4:	4640      	mov	r0, r8
 80a4ca6:	f000 fbed 	bl	80a5484 <strlen>
 80a4caa:	f108 38ff 	add.w	r8, r8, #4294967295
 80a4cae:	193b      	adds	r3, r7, r4
 80a4cb0:	4420      	add	r0, r4
 80a4cb2:	4284      	cmp	r4, r0
 80a4cb4:	f000 83d1 	beq.w	80a545a <strftime+0x93e>
 80a4cb8:	9a02      	ldr	r2, [sp, #8]
 80a4cba:	4294      	cmp	r4, r2
 80a4cbc:	f080 83d8 	bcs.w	80a5470 <strftime+0x954>
 80a4cc0:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 80a4cc4:	3401      	adds	r4, #1
 80a4cc6:	f803 2b01 	strb.w	r2, [r3], #1
 80a4cca:	e7f2      	b.n	80a4cb2 <strftime+0x196>
 80a4ccc:	692b      	ldr	r3, [r5, #16]
 80a4cce:	9a03      	ldr	r2, [sp, #12]
 80a4cd0:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
 80a4cd4:	4640      	mov	r0, r8
 80a4cd6:	f000 fbd5 	bl	80a5484 <strlen>
 80a4cda:	f108 38ff 	add.w	r8, r8, #4294967295
 80a4cde:	193b      	adds	r3, r7, r4
 80a4ce0:	4420      	add	r0, r4
 80a4ce2:	4284      	cmp	r4, r0
 80a4ce4:	f000 83b9 	beq.w	80a545a <strftime+0x93e>
 80a4ce8:	9a02      	ldr	r2, [sp, #8]
 80a4cea:	4294      	cmp	r4, r2
 80a4cec:	f080 83c0 	bcs.w	80a5470 <strftime+0x954>
 80a4cf0:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 80a4cf4:	3401      	adds	r4, #1
 80a4cf6:	f803 2b01 	strb.w	r2, [r3], #1
 80a4cfa:	e7f2      	b.n	80a4ce2 <strftime+0x1c6>
 80a4cfc:	692b      	ldr	r3, [r5, #16]
 80a4cfe:	9a03      	ldr	r2, [sp, #12]
 80a4d00:	330c      	adds	r3, #12
 80a4d02:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
 80a4d06:	4640      	mov	r0, r8
 80a4d08:	f000 fbbc 	bl	80a5484 <strlen>
 80a4d0c:	f108 38ff 	add.w	r8, r8, #4294967295
 80a4d10:	193b      	adds	r3, r7, r4
 80a4d12:	4420      	add	r0, r4
 80a4d14:	4284      	cmp	r4, r0
 80a4d16:	f000 83a0 	beq.w	80a545a <strftime+0x93e>
 80a4d1a:	9a02      	ldr	r2, [sp, #8]
 80a4d1c:	4294      	cmp	r4, r2
 80a4d1e:	f080 83a7 	bcs.w	80a5470 <strftime+0x954>
 80a4d22:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 80a4d26:	3401      	adds	r4, #1
 80a4d28:	f803 2b01 	strb.w	r2, [r3], #1
 80a4d2c:	e7f2      	b.n	80a4d14 <strftime+0x1f8>
 80a4d2e:	9b03      	ldr	r3, [sp, #12]
 80a4d30:	f8d3 80a0 	ldr.w	r8, [r3, #160]	; 0xa0
 80a4d34:	e00a      	b.n	80a4d4c <strftime+0x230>
 80a4d36:	9b03      	ldr	r3, [sp, #12]
 80a4d38:	f8d3 80e4 	ldr.w	r8, [r3, #228]	; 0xe4
 80a4d3c:	e006      	b.n	80a4d4c <strftime+0x230>
 80a4d3e:	9b03      	ldr	r3, [sp, #12]
 80a4d40:	f8d3 809c 	ldr.w	r8, [r3, #156]	; 0x9c
 80a4d44:	e002      	b.n	80a4d4c <strftime+0x230>
 80a4d46:	9b03      	ldr	r3, [sp, #12]
 80a4d48:	f8d3 8098 	ldr.w	r8, [r3, #152]	; 0x98
 80a4d4c:	4640      	mov	r0, r8
 80a4d4e:	f000 fb99 	bl	80a5484 <strlen>
 80a4d52:	f898 3000 	ldrb.w	r3, [r8]
 80a4d56:	2b00      	cmp	r3, #0
 80a4d58:	f000 837f 	beq.w	80a545a <strftime+0x93e>
 80a4d5c:	462b      	mov	r3, r5
 80a4d5e:	4642      	mov	r2, r8
 80a4d60:	e093      	b.n	80a4e8a <strftime+0x36e>
 80a4d62:	49b6      	ldr	r1, [pc, #728]	; (80a503c <strftime+0x520>)
 80a4d64:	f8d5 b014 	ldr.w	fp, [r5, #20]
 80a4d68:	458b      	cmp	fp, r1
 80a4d6a:	bfac      	ite	ge
 80a4d6c:	2100      	movge	r1, #0
 80a4d6e:	2101      	movlt	r1, #1
 80a4d70:	f1bb 0f00 	cmp.w	fp, #0
 80a4d74:	db04      	blt.n	80a4d80 <strftime+0x264>
 80a4d76:	2064      	movs	r0, #100	; 0x64
 80a4d78:	fb9b f0f0 	sdiv	r0, fp, r0
 80a4d7c:	3013      	adds	r0, #19
 80a4d7e:	e008      	b.n	80a4d92 <strftime+0x276>
 80a4d80:	f20b 706c 	addw	r0, fp, #1900	; 0x76c
 80a4d84:	9107      	str	r1, [sp, #28]
 80a4d86:	f000 ff05 	bl	80a5b94 <abs>
 80a4d8a:	2364      	movs	r3, #100	; 0x64
 80a4d8c:	fb90 f0f3 	sdiv	r0, r0, r3
 80a4d90:	9907      	ldr	r1, [sp, #28]
 80a4d92:	f1ba 0f00 	cmp.w	sl, #0
 80a4d96:	d008      	beq.n	80a4daa <strftime+0x28e>
 80a4d98:	2863      	cmp	r0, #99	; 0x63
 80a4d9a:	dd09      	ble.n	80a4db0 <strftime+0x294>
 80a4d9c:	4ba8      	ldr	r3, [pc, #672]	; (80a5040 <strftime+0x524>)
 80a4d9e:	4aa9      	ldr	r2, [pc, #676]	; (80a5044 <strftime+0x528>)
 80a4da0:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 80a4da4:	bf18      	it	ne
 80a4da6:	4613      	movne	r3, r2
 80a4da8:	e003      	b.n	80a4db2 <strftime+0x296>
 80a4daa:	4ba6      	ldr	r3, [pc, #664]	; (80a5044 <strftime+0x528>)
 80a4dac:	4aa6      	ldr	r2, [pc, #664]	; (80a5048 <strftime+0x52c>)
 80a4dae:	e001      	b.n	80a4db4 <strftime+0x298>
 80a4db0:	4ba4      	ldr	r3, [pc, #656]	; (80a5044 <strftime+0x528>)
 80a4db2:	4aa6      	ldr	r2, [pc, #664]	; (80a504c <strftime+0x530>)
 80a4db4:	f1b8 0f01 	cmp.w	r8, #1
 80a4db8:	bf98      	it	ls
 80a4dba:	f04f 0802 	movls.w	r8, #2
 80a4dbe:	ebc1 0108 	rsb	r1, r1, r8
 80a4dc2:	9001      	str	r0, [sp, #4]
 80a4dc4:	9100      	str	r1, [sp, #0]
 80a4dc6:	489d      	ldr	r0, [pc, #628]	; (80a503c <strftime+0x520>)
 80a4dc8:	49a1      	ldr	r1, [pc, #644]	; (80a5050 <strftime+0x534>)
 80a4dca:	4583      	cmp	fp, r0
 80a4dcc:	bfb8      	it	lt
 80a4dce:	460b      	movlt	r3, r1
 80a4dd0:	e21d      	b.n	80a520e <strftime+0x6f2>
 80a4dd2:	4aa0      	ldr	r2, [pc, #640]	; (80a5054 <strftime+0x538>)
 80a4dd4:	49a0      	ldr	r1, [pc, #640]	; (80a5058 <strftime+0x53c>)
 80a4dd6:	68eb      	ldr	r3, [r5, #12]
 80a4dd8:	2864      	cmp	r0, #100	; 0x64
 80a4dda:	bf08      	it	eq
 80a4ddc:	460a      	moveq	r2, r1
 80a4dde:	1b31      	subs	r1, r6, r4
 80a4de0:	1938      	adds	r0, r7, r4
 80a4de2:	f7fc fe7f 	bl	80a1ae4 <sniprintf>
 80a4de6:	2800      	cmp	r0, #0
 80a4de8:	f280 8302 	bge.w	80a53f0 <strftime+0x8d4>
 80a4dec:	e340      	b.n	80a5470 <strftime+0x954>
 80a4dee:	6968      	ldr	r0, [r5, #20]
 80a4df0:	692b      	ldr	r3, [r5, #16]
 80a4df2:	2800      	cmp	r0, #0
 80a4df4:	f103 0b01 	add.w	fp, r3, #1
 80a4df8:	eb07 0804 	add.w	r8, r7, r4
 80a4dfc:	ebc4 0a06 	rsb	sl, r4, r6
 80a4e00:	68eb      	ldr	r3, [r5, #12]
 80a4e02:	db05      	blt.n	80a4e10 <strftime+0x2f4>
 80a4e04:	2264      	movs	r2, #100	; 0x64
 80a4e06:	fb90 f1f2 	sdiv	r1, r0, r2
 80a4e0a:	fb02 0011 	mls	r0, r2, r1, r0
 80a4e0e:	e00a      	b.n	80a4e26 <strftime+0x30a>
 80a4e10:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80a4e14:	9307      	str	r3, [sp, #28]
 80a4e16:	f000 febd 	bl	80a5b94 <abs>
 80a4e1a:	2264      	movs	r2, #100	; 0x64
 80a4e1c:	fb90 f1f2 	sdiv	r1, r0, r2
 80a4e20:	fb01 0012 	mls	r0, r1, r2, r0
 80a4e24:	9b07      	ldr	r3, [sp, #28]
 80a4e26:	9001      	str	r0, [sp, #4]
 80a4e28:	9300      	str	r3, [sp, #0]
 80a4e2a:	4651      	mov	r1, sl
 80a4e2c:	465b      	mov	r3, fp
 80a4e2e:	4640      	mov	r0, r8
 80a4e30:	4a8a      	ldr	r2, [pc, #552]	; (80a505c <strftime+0x540>)
 80a4e32:	f7fc fe57 	bl	80a1ae4 <sniprintf>
 80a4e36:	e7d6      	b.n	80a4de6 <strftime+0x2ca>
 80a4e38:	2325      	movs	r3, #37	; 0x25
 80a4e3a:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 80a4e3e:	f1ba 0f00 	cmp.w	sl, #0
 80a4e42:	d007      	beq.n	80a4e54 <strftime+0x338>
 80a4e44:	f1b8 0f05 	cmp.w	r8, #5
 80a4e48:	f88d a029 	strb.w	sl, [sp, #41]	; 0x29
 80a4e4c:	bf98      	it	ls
 80a4e4e:	f04f 0806 	movls.w	r8, #6
 80a4e52:	e004      	b.n	80a4e5e <strftime+0x342>
 80a4e54:	232b      	movs	r3, #43	; 0x2b
 80a4e56:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80a4e5a:	f04f 080a 	mov.w	r8, #10
 80a4e5e:	f1b8 0306 	subs.w	r3, r8, #6
 80a4e62:	d102      	bne.n	80a4e6a <strftime+0x34e>
 80a4e64:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
 80a4e68:	e00a      	b.n	80a4e80 <strftime+0x364>
 80a4e6a:	4a7d      	ldr	r2, [pc, #500]	; (80a5060 <strftime+0x544>)
 80a4e6c:	211e      	movs	r1, #30
 80a4e6e:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
 80a4e72:	f7fc fe37 	bl	80a1ae4 <sniprintf>
 80a4e76:	2800      	cmp	r0, #0
 80a4e78:	ddf4      	ble.n	80a4e64 <strftime+0x348>
 80a4e7a:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
 80a4e7e:	4418      	add	r0, r3
 80a4e80:	4978      	ldr	r1, [pc, #480]	; (80a5064 <strftime+0x548>)
 80a4e82:	f7ff fde3 	bl	80a4a4c <strcpy>
 80a4e86:	462b      	mov	r3, r5
 80a4e88:	aa0a      	add	r2, sp, #40	; 0x28
 80a4e8a:	1b31      	subs	r1, r6, r4
 80a4e8c:	1938      	adds	r0, r7, r4
 80a4e8e:	f7ff fe45 	bl	80a4b1c <strftime>
 80a4e92:	2800      	cmp	r0, #0
 80a4e94:	f340 82ec 	ble.w	80a5470 <strftime+0x954>
 80a4e98:	4404      	add	r4, r0
 80a4e9a:	e2de      	b.n	80a545a <strftime+0x93e>
 80a4e9c:	4628      	mov	r0, r5
 80a4e9e:	f7ff fddd 	bl	80a4a5c <iso_year_adjust>
 80a4ea2:	4680      	mov	r8, r0
 80a4ea4:	6968      	ldr	r0, [r5, #20]
 80a4ea6:	2800      	cmp	r0, #0
 80a4ea8:	db05      	blt.n	80a4eb6 <strftime+0x39a>
 80a4eaa:	2264      	movs	r2, #100	; 0x64
 80a4eac:	fb90 f1f2 	sdiv	r1, r0, r2
 80a4eb0:	fb02 0011 	mls	r0, r2, r1, r0
 80a4eb4:	e008      	b.n	80a4ec8 <strftime+0x3ac>
 80a4eb6:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80a4eba:	f000 fe6b 	bl	80a5b94 <abs>
 80a4ebe:	2264      	movs	r2, #100	; 0x64
 80a4ec0:	fb90 f3f2 	sdiv	r3, r0, r2
 80a4ec4:	fb03 0012 	mls	r0, r3, r2, r0
 80a4ec8:	f1b8 0f00 	cmp.w	r8, #0
 80a4ecc:	da06      	bge.n	80a4edc <strftime+0x3c0>
 80a4ece:	696a      	ldr	r2, [r5, #20]
 80a4ed0:	4b65      	ldr	r3, [pc, #404]	; (80a5068 <strftime+0x54c>)
 80a4ed2:	429a      	cmp	r2, r3
 80a4ed4:	bfb8      	it	lt
 80a4ed6:	f04f 0801 	movlt.w	r8, #1
 80a4eda:	e006      	b.n	80a4eea <strftime+0x3ce>
 80a4edc:	d005      	beq.n	80a4eea <strftime+0x3ce>
 80a4ede:	696a      	ldr	r2, [r5, #20]
 80a4ee0:	4b56      	ldr	r3, [pc, #344]	; (80a503c <strftime+0x520>)
 80a4ee2:	429a      	cmp	r2, r3
 80a4ee4:	bfb8      	it	lt
 80a4ee6:	f04f 38ff 	movlt.w	r8, #4294967295
 80a4eea:	2364      	movs	r3, #100	; 0x64
 80a4eec:	4440      	add	r0, r8
 80a4eee:	fb90 f2f3 	sdiv	r2, r0, r3
 80a4ef2:	fb03 0012 	mls	r0, r3, r2, r0
 80a4ef6:	4418      	add	r0, r3
 80a4ef8:	e1f8      	b.n	80a52ec <strftime+0x7d0>
 80a4efa:	4b50      	ldr	r3, [pc, #320]	; (80a503c <strftime+0x520>)
 80a4efc:	6969      	ldr	r1, [r5, #20]
 80a4efe:	4628      	mov	r0, r5
 80a4f00:	4299      	cmp	r1, r3
 80a4f02:	bfac      	ite	ge
 80a4f04:	2300      	movge	r3, #0
 80a4f06:	2301      	movlt	r3, #1
 80a4f08:	9108      	str	r1, [sp, #32]
 80a4f0a:	9307      	str	r3, [sp, #28]
 80a4f0c:	f7ff fda6 	bl	80a4a5c <iso_year_adjust>
 80a4f10:	9908      	ldr	r1, [sp, #32]
 80a4f12:	4683      	mov	fp, r0
 80a4f14:	2900      	cmp	r1, #0
 80a4f16:	db04      	blt.n	80a4f22 <strftime+0x406>
 80a4f18:	2364      	movs	r3, #100	; 0x64
 80a4f1a:	fb91 f3f3 	sdiv	r3, r1, r3
 80a4f1e:	3313      	adds	r3, #19
 80a4f20:	e008      	b.n	80a4f34 <strftime+0x418>
 80a4f22:	f201 706c 	addw	r0, r1, #1900	; 0x76c
 80a4f26:	9108      	str	r1, [sp, #32]
 80a4f28:	f000 fe34 	bl	80a5b94 <abs>
 80a4f2c:	2364      	movs	r3, #100	; 0x64
 80a4f2e:	fb90 f3f3 	sdiv	r3, r0, r3
 80a4f32:	9908      	ldr	r1, [sp, #32]
 80a4f34:	6968      	ldr	r0, [r5, #20]
 80a4f36:	2800      	cmp	r0, #0
 80a4f38:	db06      	blt.n	80a4f48 <strftime+0x42c>
 80a4f3a:	f04f 0e64 	mov.w	lr, #100	; 0x64
 80a4f3e:	fb90 fcfe 	sdiv	ip, r0, lr
 80a4f42:	fb0e 001c 	mls	r0, lr, ip, r0
 80a4f46:	e00d      	b.n	80a4f64 <strftime+0x448>
 80a4f48:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80a4f4c:	9109      	str	r1, [sp, #36]	; 0x24
 80a4f4e:	9308      	str	r3, [sp, #32]
 80a4f50:	f000 fe20 	bl	80a5b94 <abs>
 80a4f54:	f04f 0e64 	mov.w	lr, #100	; 0x64
 80a4f58:	fb90 fcfe 	sdiv	ip, r0, lr
 80a4f5c:	fb0c 001e 	mls	r0, ip, lr, r0
 80a4f60:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a4f62:	9b08      	ldr	r3, [sp, #32]
 80a4f64:	f1bb 0f00 	cmp.w	fp, #0
 80a4f68:	da08      	bge.n	80a4f7c <strftime+0x460>
 80a4f6a:	6969      	ldr	r1, [r5, #20]
 80a4f6c:	4a3e      	ldr	r2, [pc, #248]	; (80a5068 <strftime+0x54c>)
 80a4f6e:	4291      	cmp	r1, r2
 80a4f70:	da0a      	bge.n	80a4f88 <strftime+0x46c>
 80a4f72:	f04f 0b01 	mov.w	fp, #1
 80a4f76:	f8cd b01c 	str.w	fp, [sp, #28]
 80a4f7a:	e005      	b.n	80a4f88 <strftime+0x46c>
 80a4f7c:	d004      	beq.n	80a4f88 <strftime+0x46c>
 80a4f7e:	4a2f      	ldr	r2, [pc, #188]	; (80a503c <strftime+0x520>)
 80a4f80:	4291      	cmp	r1, r2
 80a4f82:	bfb8      	it	lt
 80a4f84:	f04f 3bff 	movlt.w	fp, #4294967295
 80a4f88:	eb0b 0200 	add.w	r2, fp, r0
 80a4f8c:	1c50      	adds	r0, r2, #1
 80a4f8e:	d102      	bne.n	80a4f96 <strftime+0x47a>
 80a4f90:	3b01      	subs	r3, #1
 80a4f92:	2263      	movs	r2, #99	; 0x63
 80a4f94:	e003      	b.n	80a4f9e <strftime+0x482>
 80a4f96:	2a64      	cmp	r2, #100	; 0x64
 80a4f98:	bf04      	itt	eq
 80a4f9a:	3301      	addeq	r3, #1
 80a4f9c:	2200      	moveq	r2, #0
 80a4f9e:	2064      	movs	r0, #100	; 0x64
 80a4fa0:	fb00 2303 	mla	r3, r0, r3, r2
 80a4fa4:	9a07      	ldr	r2, [sp, #28]
 80a4fa6:	b142      	cbz	r2, 80a4fba <strftime+0x49e>
 80a4fa8:	222d      	movs	r2, #45	; 0x2d
 80a4faa:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
 80a4fae:	f1b8 0f00 	cmp.w	r8, #0
 80a4fb2:	d013      	beq.n	80a4fdc <strftime+0x4c0>
 80a4fb4:	f108 38ff 	add.w	r8, r8, #4294967295
 80a4fb8:	e010      	b.n	80a4fdc <strftime+0x4c0>
 80a4fba:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 80a4fbe:	d110      	bne.n	80a4fe2 <strftime+0x4c6>
 80a4fc0:	f242 720f 	movw	r2, #9999	; 0x270f
 80a4fc4:	4293      	cmp	r3, r2
 80a4fc6:	d90c      	bls.n	80a4fe2 <strftime+0x4c6>
 80a4fc8:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
 80a4fcc:	f1b8 0f00 	cmp.w	r8, #0
 80a4fd0:	d1f0      	bne.n	80a4fb4 <strftime+0x498>
 80a4fd2:	aa12      	add	r2, sp, #72	; 0x48
 80a4fd4:	2125      	movs	r1, #37	; 0x25
 80a4fd6:	f802 1d1f 	strb.w	r1, [r2, #-31]!
 80a4fda:	e00a      	b.n	80a4ff2 <strftime+0x4d6>
 80a4fdc:	f10d 0229 	add.w	r2, sp, #41	; 0x29
 80a4fe0:	e000      	b.n	80a4fe4 <strftime+0x4c8>
 80a4fe2:	aa0a      	add	r2, sp, #40	; 0x28
 80a4fe4:	2125      	movs	r1, #37	; 0x25
 80a4fe6:	7011      	strb	r1, [r2, #0]
 80a4fe8:	f1ba 0f00 	cmp.w	sl, #0
 80a4fec:	d101      	bne.n	80a4ff2 <strftime+0x4d6>
 80a4fee:	1c50      	adds	r0, r2, #1
 80a4ff0:	e002      	b.n	80a4ff8 <strftime+0x4dc>
 80a4ff2:	2130      	movs	r1, #48	; 0x30
 80a4ff4:	1c90      	adds	r0, r2, #2
 80a4ff6:	7051      	strb	r1, [r2, #1]
 80a4ff8:	491c      	ldr	r1, [pc, #112]	; (80a506c <strftime+0x550>)
 80a4ffa:	9307      	str	r3, [sp, #28]
 80a4ffc:	f7ff fd26 	bl	80a4a4c <strcpy>
 80a5000:	9b07      	ldr	r3, [sp, #28]
 80a5002:	9300      	str	r3, [sp, #0]
 80a5004:	e1ac      	b.n	80a5360 <strftime+0x844>
 80a5006:	4a14      	ldr	r2, [pc, #80]	; (80a5058 <strftime+0x53c>)
 80a5008:	4912      	ldr	r1, [pc, #72]	; (80a5054 <strftime+0x538>)
 80a500a:	68ab      	ldr	r3, [r5, #8]
 80a500c:	286b      	cmp	r0, #107	; 0x6b
 80a500e:	bf08      	it	eq
 80a5010:	460a      	moveq	r2, r1
 80a5012:	e6e4      	b.n	80a4dde <strftime+0x2c2>
 80a5014:	68a9      	ldr	r1, [r5, #8]
 80a5016:	230c      	movs	r3, #12
 80a5018:	b131      	cbz	r1, 80a5028 <strftime+0x50c>
 80a501a:	4299      	cmp	r1, r3
 80a501c:	bf16      	itet	ne
 80a501e:	fb91 f2f3 	sdivne	r2, r1, r3
 80a5022:	460b      	moveq	r3, r1
 80a5024:	fb03 1312 	mlsne	r3, r3, r2, r1
 80a5028:	4a0a      	ldr	r2, [pc, #40]	; (80a5054 <strftime+0x538>)
 80a502a:	490b      	ldr	r1, [pc, #44]	; (80a5058 <strftime+0x53c>)
 80a502c:	2849      	cmp	r0, #73	; 0x49
 80a502e:	bf08      	it	eq
 80a5030:	460a      	moveq	r2, r1
 80a5032:	e6d4      	b.n	80a4dde <strftime+0x2c2>
 80a5034:	69eb      	ldr	r3, [r5, #28]
 80a5036:	4a0e      	ldr	r2, [pc, #56]	; (80a5070 <strftime+0x554>)
 80a5038:	3301      	adds	r3, #1
 80a503a:	e6d0      	b.n	80a4dde <strftime+0x2c2>
 80a503c:	fffff894 	.word	0xfffff894
 80a5040:	080a67e3 	.word	0x080a67e3
 80a5044:	080a619e 	.word	0x080a619e
 80a5048:	080a67d4 	.word	0x080a67d4
 80a504c:	080a67db 	.word	0x080a67db
 80a5050:	080a67e5 	.word	0x080a67e5
 80a5054:	080a67e7 	.word	0x080a67e7
 80a5058:	080a67f5 	.word	0x080a67f5
 80a505c:	080a67eb 	.word	0x080a67eb
 80a5060:	080a61de 	.word	0x080a61de
 80a5064:	080a67fa 	.word	0x080a67fa
 80a5068:	fffff895 	.word	0xfffff895
 80a506c:	080a6802 	.word	0x080a6802
 80a5070:	080a6806 	.word	0x080a6806
 80a5074:	692b      	ldr	r3, [r5, #16]
 80a5076:	3301      	adds	r3, #1
 80a5078:	e13c      	b.n	80a52f4 <strftime+0x7d8>
 80a507a:	686b      	ldr	r3, [r5, #4]
 80a507c:	e13a      	b.n	80a52f4 <strftime+0x7d8>
 80a507e:	9b02      	ldr	r3, [sp, #8]
 80a5080:	429c      	cmp	r4, r3
 80a5082:	f080 81f5 	bcs.w	80a5470 <strftime+0x954>
 80a5086:	230a      	movs	r3, #10
 80a5088:	e1e5      	b.n	80a5456 <strftime+0x93a>
 80a508a:	68ab      	ldr	r3, [r5, #8]
 80a508c:	9a03      	ldr	r2, [sp, #12]
 80a508e:	2b0b      	cmp	r3, #11
 80a5090:	bfcc      	ite	gt
 80a5092:	23a4      	movgt	r3, #164	; 0xa4
 80a5094:	23a0      	movle	r3, #160	; 0xa0
 80a5096:	4413      	add	r3, r2
 80a5098:	f8d3 8004 	ldr.w	r8, [r3, #4]
 80a509c:	4640      	mov	r0, r8
 80a509e:	f000 f9f1 	bl	80a5484 <strlen>
 80a50a2:	4642      	mov	r2, r8
 80a50a4:	4bb1      	ldr	r3, [pc, #708]	; (80a536c <strftime+0x850>)
 80a50a6:	1939      	adds	r1, r7, r4
 80a50a8:	f8d3 e000 	ldr.w	lr, [r3]
 80a50ac:	4420      	add	r0, r4
 80a50ae:	4284      	cmp	r4, r0
 80a50b0:	f000 81d3 	beq.w	80a545a <strftime+0x93e>
 80a50b4:	9b02      	ldr	r3, [sp, #8]
 80a50b6:	429c      	cmp	r4, r3
 80a50b8:	f080 81da 	bcs.w	80a5470 <strftime+0x954>
 80a50bc:	f899 3000 	ldrb.w	r3, [r9]
 80a50c0:	3401      	adds	r4, #1
 80a50c2:	2b50      	cmp	r3, #80	; 0x50
 80a50c4:	7813      	ldrb	r3, [r2, #0]
 80a50c6:	d10a      	bne.n	80a50de <strftime+0x5c2>
 80a50c8:	eb0e 0c03 	add.w	ip, lr, r3
 80a50cc:	f89c c001 	ldrb.w	ip, [ip, #1]
 80a50d0:	f00c 0c03 	and.w	ip, ip, #3
 80a50d4:	f1bc 0f01 	cmp.w	ip, #1
 80a50d8:	bf08      	it	eq
 80a50da:	3320      	addeq	r3, #32
 80a50dc:	b2db      	uxtb	r3, r3
 80a50de:	f801 3b01 	strb.w	r3, [r1], #1
 80a50e2:	3201      	adds	r2, #1
 80a50e4:	e7e3      	b.n	80a50ae <strftime+0x592>
 80a50e6:	686b      	ldr	r3, [r5, #4]
 80a50e8:	4aa1      	ldr	r2, [pc, #644]	; (80a5370 <strftime+0x854>)
 80a50ea:	9300      	str	r3, [sp, #0]
 80a50ec:	68ab      	ldr	r3, [r5, #8]
 80a50ee:	e139      	b.n	80a5364 <strftime+0x848>
 80a50f0:	6a2b      	ldr	r3, [r5, #32]
 80a50f2:	2b00      	cmp	r3, #0
 80a50f4:	db17      	blt.n	80a5126 <strftime+0x60a>
 80a50f6:	f000 fbc5 	bl	80a5884 <__tz_lock>
 80a50fa:	9b06      	ldr	r3, [sp, #24]
 80a50fc:	b91b      	cbnz	r3, 80a5106 <strftime+0x5ea>
 80a50fe:	f000 fbc3 	bl	80a5888 <_tzset_unlocked>
 80a5102:	2301      	movs	r3, #1
 80a5104:	9306      	str	r3, [sp, #24]
 80a5106:	f000 fd8d 	bl	80a5c24 <__gettzinfo>
 80a510a:	6a2b      	ldr	r3, [r5, #32]
 80a510c:	221c      	movs	r2, #28
 80a510e:	2b00      	cmp	r3, #0
 80a5110:	bfd4      	ite	le
 80a5112:	2300      	movle	r3, #0
 80a5114:	2301      	movgt	r3, #1
 80a5116:	fb02 0003 	mla	r0, r2, r3, r0
 80a511a:	6a03      	ldr	r3, [r0, #32]
 80a511c:	f1c3 0800 	rsb	r8, r3, #0
 80a5120:	f000 fbb1 	bl	80a5886 <__tz_unlock>
 80a5124:	e001      	b.n	80a512a <strftime+0x60e>
 80a5126:	f04f 0800 	mov.w	r8, #0
 80a512a:	f8d5 e014 	ldr.w	lr, [r5, #20]
 80a512e:	ebc4 0c06 	rsb	ip, r4, r6
 80a5132:	4670      	mov	r0, lr
 80a5134:	f1be 0245 	subs.w	r2, lr, #69	; 0x45
 80a5138:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80a513c:	f141 33ff 	adc.w	r3, r1, #4294967295
 80a5140:	2a00      	cmp	r2, #0
 80a5142:	f173 0b00 	sbcs.w	fp, r3, #0
 80a5146:	eb07 0a04 	add.w	sl, r7, r4
 80a514a:	da03      	bge.n	80a5154 <strftime+0x638>
 80a514c:	f1be 0242 	subs.w	r2, lr, #66	; 0x42
 80a5150:	f141 33ff 	adc.w	r3, r1, #4294967295
 80a5154:	0891      	lsrs	r1, r2, #2
 80a5156:	ea41 7183 	orr.w	r1, r1, r3, lsl #30
 80a515a:	109b      	asrs	r3, r3, #2
 80a515c:	9104      	str	r1, [sp, #16]
 80a515e:	9305      	str	r3, [sp, #20]
 80a5160:	f10e 31ff 	add.w	r1, lr, #4294967295
 80a5164:	2364      	movs	r3, #100	; 0x64
 80a5166:	fb91 f1f3 	sdiv	r1, r1, r3
 80a516a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80a516e:	1a52      	subs	r2, r2, r1
 80a5170:	eb63 73e1 	sbc.w	r3, r3, r1, asr #31
 80a5174:	f20e 102b 	addw	r0, lr, #299	; 0x12b
 80a5178:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80a517c:	fb90 f1f1 	sdiv	r1, r0, r1
 80a5180:	1852      	adds	r2, r2, r1
 80a5182:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
 80a5186:	f240 116d 	movw	r1, #365	; 0x16d
 80a518a:	f1ae 0e46 	sub.w	lr, lr, #70	; 0x46
 80a518e:	fb01 fe0e 	mul.w	lr, r1, lr
 80a5192:	69e9      	ldr	r1, [r5, #28]
 80a5194:	eb12 020e 	adds.w	r2, r2, lr
 80a5198:	eb43 73ee 	adc.w	r3, r3, lr, asr #31
 80a519c:	1852      	adds	r2, r2, r1
 80a519e:	f04f 0e18 	mov.w	lr, #24
 80a51a2:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
 80a51a6:	fba2 010e 	umull	r0, r1, r2, lr
 80a51aa:	fb0e 1103 	mla	r1, lr, r3, r1
 80a51ae:	68ab      	ldr	r3, [r5, #8]
 80a51b0:	f04f 0e3c 	mov.w	lr, #60	; 0x3c
 80a51b4:	18c0      	adds	r0, r0, r3
 80a51b6:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
 80a51ba:	fba0 230e 	umull	r2, r3, r0, lr
 80a51be:	fb0e 3301 	mla	r3, lr, r1, r3
 80a51c2:	6869      	ldr	r1, [r5, #4]
 80a51c4:	1852      	adds	r2, r2, r1
 80a51c6:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
 80a51ca:	fba2 010e 	umull	r0, r1, r2, lr
 80a51ce:	fb0e 1103 	mla	r1, lr, r3, r1
 80a51d2:	682b      	ldr	r3, [r5, #0]
 80a51d4:	4a67      	ldr	r2, [pc, #412]	; (80a5374 <strftime+0x858>)
 80a51d6:	18c0      	adds	r0, r0, r3
 80a51d8:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
 80a51dc:	ebb0 0008 	subs.w	r0, r0, r8
 80a51e0:	eb61 71e8 	sbc.w	r1, r1, r8, asr #31
 80a51e4:	e9cd 0100 	strd	r0, r1, [sp]
 80a51e8:	4661      	mov	r1, ip
 80a51ea:	4650      	mov	r0, sl
 80a51ec:	f7fc fc7a 	bl	80a1ae4 <sniprintf>
 80a51f0:	e5f9      	b.n	80a4de6 <strftime+0x2ca>
 80a51f2:	682b      	ldr	r3, [r5, #0]
 80a51f4:	e07e      	b.n	80a52f4 <strftime+0x7d8>
 80a51f6:	9b02      	ldr	r3, [sp, #8]
 80a51f8:	429c      	cmp	r4, r3
 80a51fa:	f080 8139 	bcs.w	80a5470 <strftime+0x954>
 80a51fe:	2309      	movs	r3, #9
 80a5200:	e129      	b.n	80a5456 <strftime+0x93a>
 80a5202:	682b      	ldr	r3, [r5, #0]
 80a5204:	4a5c      	ldr	r2, [pc, #368]	; (80a5378 <strftime+0x85c>)
 80a5206:	9301      	str	r3, [sp, #4]
 80a5208:	686b      	ldr	r3, [r5, #4]
 80a520a:	9300      	str	r3, [sp, #0]
 80a520c:	68ab      	ldr	r3, [r5, #8]
 80a520e:	1b31      	subs	r1, r6, r4
 80a5210:	1938      	adds	r0, r7, r4
 80a5212:	e60e      	b.n	80a4e32 <strftime+0x316>
 80a5214:	9b02      	ldr	r3, [sp, #8]
 80a5216:	429c      	cmp	r4, r3
 80a5218:	f080 812a 	bcs.w	80a5470 <strftime+0x954>
 80a521c:	69ab      	ldr	r3, [r5, #24]
 80a521e:	1c62      	adds	r2, r4, #1
 80a5220:	b90b      	cbnz	r3, 80a5226 <strftime+0x70a>
 80a5222:	2337      	movs	r3, #55	; 0x37
 80a5224:	e000      	b.n	80a5228 <strftime+0x70c>
 80a5226:	3330      	adds	r3, #48	; 0x30
 80a5228:	553b      	strb	r3, [r7, r4]
 80a522a:	4614      	mov	r4, r2
 80a522c:	e115      	b.n	80a545a <strftime+0x93e>
 80a522e:	69eb      	ldr	r3, [r5, #28]
 80a5230:	69aa      	ldr	r2, [r5, #24]
 80a5232:	3307      	adds	r3, #7
 80a5234:	1a9b      	subs	r3, r3, r2
 80a5236:	2207      	movs	r2, #7
 80a5238:	fb93 f3f2 	sdiv	r3, r3, r2
 80a523c:	e05a      	b.n	80a52f4 <strftime+0x7d8>
 80a523e:	4628      	mov	r0, r5
 80a5240:	f7ff fc0c 	bl	80a4a5c <iso_year_adjust>
 80a5244:	69aa      	ldr	r2, [r5, #24]
 80a5246:	b10a      	cbz	r2, 80a524c <strftime+0x730>
 80a5248:	1e53      	subs	r3, r2, #1
 80a524a:	e000      	b.n	80a524e <strftime+0x732>
 80a524c:	2306      	movs	r3, #6
 80a524e:	2800      	cmp	r0, #0
 80a5250:	dc2f      	bgt.n	80a52b2 <strftime+0x796>
 80a5252:	69ea      	ldr	r2, [r5, #28]
 80a5254:	d101      	bne.n	80a525a <strftime+0x73e>
 80a5256:	320a      	adds	r2, #10
 80a5258:	e03b      	b.n	80a52d2 <strftime+0x7b6>
 80a525a:	f240 716b 	movw	r1, #1899	; 0x76b
 80a525e:	1a9a      	subs	r2, r3, r2
 80a5260:	696b      	ldr	r3, [r5, #20]
 80a5262:	2b00      	cmp	r3, #0
 80a5264:	bfb4      	ite	lt
 80a5266:	4608      	movlt	r0, r1
 80a5268:	f06f 0064 	mvnge.w	r0, #100	; 0x64
 80a526c:	4418      	add	r0, r3
 80a526e:	0781      	lsls	r1, r0, #30
 80a5270:	d107      	bne.n	80a5282 <strftime+0x766>
 80a5272:	f04f 0e64 	mov.w	lr, #100	; 0x64
 80a5276:	4601      	mov	r1, r0
 80a5278:	fb90 f0fe 	sdiv	r0, r0, lr
 80a527c:	fb0e 1110 	mls	r1, lr, r0, r1
 80a5280:	b981      	cbnz	r1, 80a52a4 <strftime+0x788>
 80a5282:	f240 716b 	movw	r1, #1899	; 0x76b
 80a5286:	2b00      	cmp	r3, #0
 80a5288:	bfa8      	it	ge
 80a528a:	f06f 0164 	mvnge.w	r1, #100	; 0x64
 80a528e:	4419      	add	r1, r3
 80a5290:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80a5294:	fb91 f0f3 	sdiv	r0, r1, r3
 80a5298:	fb03 1110 	mls	r1, r3, r0, r1
 80a529c:	fab1 f181 	clz	r1, r1
 80a52a0:	0949      	lsrs	r1, r1, #5
 80a52a2:	e000      	b.n	80a52a6 <strftime+0x78a>
 80a52a4:	2101      	movs	r1, #1
 80a52a6:	1a52      	subs	r2, r2, r1
 80a52a8:	2a05      	cmp	r2, #5
 80a52aa:	bfb4      	ite	lt
 80a52ac:	2335      	movlt	r3, #53	; 0x35
 80a52ae:	2334      	movge	r3, #52	; 0x34
 80a52b0:	e020      	b.n	80a52f4 <strftime+0x7d8>
 80a52b2:	2301      	movs	r3, #1
 80a52b4:	e01e      	b.n	80a52f4 <strftime+0x7d8>
 80a52b6:	9b02      	ldr	r3, [sp, #8]
 80a52b8:	429c      	cmp	r4, r3
 80a52ba:	f080 80d9 	bcs.w	80a5470 <strftime+0x954>
 80a52be:	69ab      	ldr	r3, [r5, #24]
 80a52c0:	3330      	adds	r3, #48	; 0x30
 80a52c2:	e0c8      	b.n	80a5456 <strftime+0x93a>
 80a52c4:	69aa      	ldr	r2, [r5, #24]
 80a52c6:	b10a      	cbz	r2, 80a52cc <strftime+0x7b0>
 80a52c8:	1e53      	subs	r3, r2, #1
 80a52ca:	e000      	b.n	80a52ce <strftime+0x7b2>
 80a52cc:	2306      	movs	r3, #6
 80a52ce:	69ea      	ldr	r2, [r5, #28]
 80a52d0:	3207      	adds	r2, #7
 80a52d2:	1ad2      	subs	r2, r2, r3
 80a52d4:	2307      	movs	r3, #7
 80a52d6:	fb92 f3f3 	sdiv	r3, r2, r3
 80a52da:	e00b      	b.n	80a52f4 <strftime+0x7d8>
 80a52dc:	6968      	ldr	r0, [r5, #20]
 80a52de:	2800      	cmp	r0, #0
 80a52e0:	da03      	bge.n	80a52ea <strftime+0x7ce>
 80a52e2:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80a52e6:	f000 fc55 	bl	80a5b94 <abs>
 80a52ea:	2364      	movs	r3, #100	; 0x64
 80a52ec:	fb90 f2f3 	sdiv	r2, r0, r3
 80a52f0:	fb02 0313 	mls	r3, r2, r3, r0
 80a52f4:	4a21      	ldr	r2, [pc, #132]	; (80a537c <strftime+0x860>)
 80a52f6:	e572      	b.n	80a4dde <strftime+0x2c2>
 80a52f8:	696b      	ldr	r3, [r5, #20]
 80a52fa:	4a21      	ldr	r2, [pc, #132]	; (80a5380 <strftime+0x864>)
 80a52fc:	f203 7b6c 	addw	fp, r3, #1900	; 0x76c
 80a5300:	4293      	cmp	r3, r2
 80a5302:	da05      	bge.n	80a5310 <strftime+0x7f4>
 80a5304:	232d      	movs	r3, #45	; 0x2d
 80a5306:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 80a530a:	f1cb 0b00 	rsb	fp, fp, #0
 80a530e:	e008      	b.n	80a5322 <strftime+0x806>
 80a5310:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 80a5314:	d10d      	bne.n	80a5332 <strftime+0x816>
 80a5316:	f242 730f 	movw	r3, #9999	; 0x270f
 80a531a:	459b      	cmp	fp, r3
 80a531c:	d911      	bls.n	80a5342 <strftime+0x826>
 80a531e:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
 80a5322:	f1b8 0f00 	cmp.w	r8, #0
 80a5326:	d001      	beq.n	80a532c <strftime+0x810>
 80a5328:	f108 38ff 	add.w	r8, r8, #4294967295
 80a532c:	f10d 0329 	add.w	r3, sp, #41	; 0x29
 80a5330:	e000      	b.n	80a5334 <strftime+0x818>
 80a5332:	ab0a      	add	r3, sp, #40	; 0x28
 80a5334:	2225      	movs	r2, #37	; 0x25
 80a5336:	701a      	strb	r2, [r3, #0]
 80a5338:	f1ba 0f00 	cmp.w	sl, #0
 80a533c:	d108      	bne.n	80a5350 <strftime+0x834>
 80a533e:	1c58      	adds	r0, r3, #1
 80a5340:	e009      	b.n	80a5356 <strftime+0x83a>
 80a5342:	f1b8 0f00 	cmp.w	r8, #0
 80a5346:	d1f4      	bne.n	80a5332 <strftime+0x816>
 80a5348:	2325      	movs	r3, #37	; 0x25
 80a534a:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 80a534e:	ab0a      	add	r3, sp, #40	; 0x28
 80a5350:	2230      	movs	r2, #48	; 0x30
 80a5352:	1c98      	adds	r0, r3, #2
 80a5354:	705a      	strb	r2, [r3, #1]
 80a5356:	490b      	ldr	r1, [pc, #44]	; (80a5384 <strftime+0x868>)
 80a5358:	f7ff fb78 	bl	80a4a4c <strcpy>
 80a535c:	f8cd b000 	str.w	fp, [sp]
 80a5360:	4643      	mov	r3, r8
 80a5362:	aa0a      	add	r2, sp, #40	; 0x28
 80a5364:	1b31      	subs	r1, r6, r4
 80a5366:	1938      	adds	r0, r7, r4
 80a5368:	e03f      	b.n	80a53ea <strftime+0x8ce>
 80a536a:	bf00      	nop
 80a536c:	20000008 	.word	0x20000008
 80a5370:	080a6815 	.word	0x080a6815
 80a5374:	080a680b 	.word	0x080a680b
 80a5378:	080a6810 	.word	0x080a6810
 80a537c:	080a67f5 	.word	0x080a67f5
 80a5380:	fffff894 	.word	0xfffff894
 80a5384:	080a6802 	.word	0x080a6802
 80a5388:	6a2b      	ldr	r3, [r5, #32]
 80a538a:	2b00      	cmp	r3, #0
 80a538c:	db65      	blt.n	80a545a <strftime+0x93e>
 80a538e:	f000 fa79 	bl	80a5884 <__tz_lock>
 80a5392:	9b06      	ldr	r3, [sp, #24]
 80a5394:	b91b      	cbnz	r3, 80a539e <strftime+0x882>
 80a5396:	f000 fa77 	bl	80a5888 <_tzset_unlocked>
 80a539a:	2301      	movs	r3, #1
 80a539c:	9306      	str	r3, [sp, #24]
 80a539e:	f000 fc41 	bl	80a5c24 <__gettzinfo>
 80a53a2:	6a2b      	ldr	r3, [r5, #32]
 80a53a4:	221c      	movs	r2, #28
 80a53a6:	2b00      	cmp	r3, #0
 80a53a8:	bfd4      	ite	le
 80a53aa:	2300      	movle	r3, #0
 80a53ac:	2301      	movgt	r3, #1
 80a53ae:	fb02 0003 	mla	r0, r2, r3, r0
 80a53b2:	6a03      	ldr	r3, [r0, #32]
 80a53b4:	eb07 0a04 	add.w	sl, r7, r4
 80a53b8:	f1c3 0800 	rsb	r8, r3, #0
 80a53bc:	f000 fa63 	bl	80a5886 <__tz_unlock>
 80a53c0:	233c      	movs	r3, #60	; 0x3c
 80a53c2:	fb98 f0f3 	sdiv	r0, r8, r3
 80a53c6:	9307      	str	r3, [sp, #28]
 80a53c8:	f000 fcc6 	bl	80a5d58 <labs>
 80a53cc:	9b07      	ldr	r3, [sp, #28]
 80a53ce:	ebc4 0b06 	rsb	fp, r4, r6
 80a53d2:	fb90 f2f3 	sdiv	r2, r0, r3
 80a53d6:	fb02 0013 	mls	r0, r2, r3, r0
 80a53da:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80a53de:	9000      	str	r0, [sp, #0]
 80a53e0:	fb98 f3f3 	sdiv	r3, r8, r3
 80a53e4:	4659      	mov	r1, fp
 80a53e6:	4650      	mov	r0, sl
 80a53e8:	4a24      	ldr	r2, [pc, #144]	; (80a547c <strftime+0x960>)
 80a53ea:	f7fc fb7b 	bl	80a1ae4 <sniprintf>
 80a53ee:	e4fa      	b.n	80a4de6 <strftime+0x2ca>
 80a53f0:	4404      	add	r4, r0
 80a53f2:	42a6      	cmp	r6, r4
 80a53f4:	d831      	bhi.n	80a545a <strftime+0x93e>
 80a53f6:	e03b      	b.n	80a5470 <strftime+0x954>
 80a53f8:	6a2b      	ldr	r3, [r5, #32]
 80a53fa:	2b00      	cmp	r3, #0
 80a53fc:	db2d      	blt.n	80a545a <strftime+0x93e>
 80a53fe:	f000 fa41 	bl	80a5884 <__tz_lock>
 80a5402:	9b06      	ldr	r3, [sp, #24]
 80a5404:	b91b      	cbnz	r3, 80a540e <strftime+0x8f2>
 80a5406:	f000 fa3f 	bl	80a5888 <_tzset_unlocked>
 80a540a:	2301      	movs	r3, #1
 80a540c:	9306      	str	r3, [sp, #24]
 80a540e:	6a2b      	ldr	r3, [r5, #32]
 80a5410:	4a1b      	ldr	r2, [pc, #108]	; (80a5480 <strftime+0x964>)
 80a5412:	2b00      	cmp	r3, #0
 80a5414:	bfd4      	ite	le
 80a5416:	2300      	movle	r3, #0
 80a5418:	2301      	movgt	r3, #1
 80a541a:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
 80a541e:	4640      	mov	r0, r8
 80a5420:	f000 f830 	bl	80a5484 <strlen>
 80a5424:	f108 38ff 	add.w	r8, r8, #4294967295
 80a5428:	193b      	adds	r3, r7, r4
 80a542a:	4420      	add	r0, r4
 80a542c:	4284      	cmp	r4, r0
 80a542e:	d00b      	beq.n	80a5448 <strftime+0x92c>
 80a5430:	9a02      	ldr	r2, [sp, #8]
 80a5432:	4294      	cmp	r4, r2
 80a5434:	d205      	bcs.n	80a5442 <strftime+0x926>
 80a5436:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 80a543a:	3401      	adds	r4, #1
 80a543c:	f803 2b01 	strb.w	r2, [r3], #1
 80a5440:	e7f4      	b.n	80a542c <strftime+0x910>
 80a5442:	f000 fa20 	bl	80a5886 <__tz_unlock>
 80a5446:	e013      	b.n	80a5470 <strftime+0x954>
 80a5448:	f000 fa1d 	bl	80a5886 <__tz_unlock>
 80a544c:	e005      	b.n	80a545a <strftime+0x93e>
 80a544e:	9b02      	ldr	r3, [sp, #8]
 80a5450:	429c      	cmp	r4, r3
 80a5452:	d20d      	bcs.n	80a5470 <strftime+0x954>
 80a5454:	2325      	movs	r3, #37	; 0x25
 80a5456:	553b      	strb	r3, [r7, r4]
 80a5458:	3401      	adds	r4, #1
 80a545a:	f899 3000 	ldrb.w	r3, [r9]
 80a545e:	b11b      	cbz	r3, 80a5468 <strftime+0x94c>
 80a5460:	f109 0901 	add.w	r9, r9, #1
 80a5464:	f7ff bb69 	b.w	80a4b3a <strftime+0x1e>
 80a5468:	b126      	cbz	r6, 80a5474 <strftime+0x958>
 80a546a:	2300      	movs	r3, #0
 80a546c:	553b      	strb	r3, [r7, r4]
 80a546e:	e001      	b.n	80a5474 <strftime+0x958>
 80a5470:	2000      	movs	r0, #0
 80a5472:	e000      	b.n	80a5476 <strftime+0x95a>
 80a5474:	4620      	mov	r0, r4
 80a5476:	b013      	add	sp, #76	; 0x4c
 80a5478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a547c:	080a681f 	.word	0x080a681f
 80a5480:	20000070 	.word	0x20000070

080a5484 <strlen>:
 80a5484:	4603      	mov	r3, r0
 80a5486:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a548a:	2a00      	cmp	r2, #0
 80a548c:	d1fb      	bne.n	80a5486 <strlen+0x2>
 80a548e:	1a18      	subs	r0, r3, r0
 80a5490:	3801      	subs	r0, #1
 80a5492:	4770      	bx	lr

080a5494 <strncmp>:
 80a5494:	b530      	push	{r4, r5, lr}
 80a5496:	b182      	cbz	r2, 80a54ba <strncmp+0x26>
 80a5498:	1e45      	subs	r5, r0, #1
 80a549a:	3901      	subs	r1, #1
 80a549c:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80a54a0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80a54a4:	42a3      	cmp	r3, r4
 80a54a6:	d106      	bne.n	80a54b6 <strncmp+0x22>
 80a54a8:	43ec      	mvns	r4, r5
 80a54aa:	4414      	add	r4, r2
 80a54ac:	42e0      	cmn	r0, r4
 80a54ae:	d001      	beq.n	80a54b4 <strncmp+0x20>
 80a54b0:	2b00      	cmp	r3, #0
 80a54b2:	d1f3      	bne.n	80a549c <strncmp+0x8>
 80a54b4:	461c      	mov	r4, r3
 80a54b6:	1b18      	subs	r0, r3, r4
 80a54b8:	bd30      	pop	{r4, r5, pc}
 80a54ba:	4610      	mov	r0, r2
 80a54bc:	bd30      	pop	{r4, r5, pc}

080a54be <strncpy>:
 80a54be:	4603      	mov	r3, r0
 80a54c0:	b510      	push	{r4, lr}
 80a54c2:	b142      	cbz	r2, 80a54d6 <strncpy+0x18>
 80a54c4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a54c8:	3a01      	subs	r2, #1
 80a54ca:	f803 4b01 	strb.w	r4, [r3], #1
 80a54ce:	2c00      	cmp	r4, #0
 80a54d0:	d1f7      	bne.n	80a54c2 <strncpy+0x4>
 80a54d2:	441a      	add	r2, r3
 80a54d4:	e000      	b.n	80a54d8 <strncpy+0x1a>
 80a54d6:	bd10      	pop	{r4, pc}
 80a54d8:	4293      	cmp	r3, r2
 80a54da:	d002      	beq.n	80a54e2 <strncpy+0x24>
 80a54dc:	f803 4b01 	strb.w	r4, [r3], #1
 80a54e0:	e7fa      	b.n	80a54d8 <strncpy+0x1a>
 80a54e2:	bd10      	pop	{r4, pc}

080a54e4 <_strtol_r>:
 80a54e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a54e8:	460f      	mov	r7, r1
 80a54ea:	4680      	mov	r8, r0
 80a54ec:	483f      	ldr	r0, [pc, #252]	; (80a55ec <_strtol_r+0x108>)
 80a54ee:	f8d0 9000 	ldr.w	r9, [r0]
 80a54f2:	463d      	mov	r5, r7
 80a54f4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a54f8:	eb09 0004 	add.w	r0, r9, r4
 80a54fc:	7840      	ldrb	r0, [r0, #1]
 80a54fe:	f000 0008 	and.w	r0, r0, #8
 80a5502:	f000 06ff 	and.w	r6, r0, #255	; 0xff
 80a5506:	b108      	cbz	r0, 80a550c <_strtol_r+0x28>
 80a5508:	462f      	mov	r7, r5
 80a550a:	e7f2      	b.n	80a54f2 <_strtol_r+0xe>
 80a550c:	2c2d      	cmp	r4, #45	; 0x2d
 80a550e:	d103      	bne.n	80a5518 <_strtol_r+0x34>
 80a5510:	1cbd      	adds	r5, r7, #2
 80a5512:	787c      	ldrb	r4, [r7, #1]
 80a5514:	2601      	movs	r6, #1
 80a5516:	e003      	b.n	80a5520 <_strtol_r+0x3c>
 80a5518:	2c2b      	cmp	r4, #43	; 0x2b
 80a551a:	bf04      	itt	eq
 80a551c:	787c      	ldrbeq	r4, [r7, #1]
 80a551e:	1cbd      	addeq	r5, r7, #2
 80a5520:	b113      	cbz	r3, 80a5528 <_strtol_r+0x44>
 80a5522:	2b10      	cmp	r3, #16
 80a5524:	d10a      	bne.n	80a553c <_strtol_r+0x58>
 80a5526:	e05b      	b.n	80a55e0 <_strtol_r+0xfc>
 80a5528:	2c30      	cmp	r4, #48	; 0x30
 80a552a:	d157      	bne.n	80a55dc <_strtol_r+0xf8>
 80a552c:	7828      	ldrb	r0, [r5, #0]
 80a552e:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80a5532:	2858      	cmp	r0, #88	; 0x58
 80a5534:	d14d      	bne.n	80a55d2 <_strtol_r+0xee>
 80a5536:	786c      	ldrb	r4, [r5, #1]
 80a5538:	2310      	movs	r3, #16
 80a553a:	3502      	adds	r5, #2
 80a553c:	2e00      	cmp	r6, #0
 80a553e:	bf14      	ite	ne
 80a5540:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
 80a5544:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
 80a5548:	fbbc faf3 	udiv	sl, ip, r3
 80a554c:	2700      	movs	r7, #0
 80a554e:	4638      	mov	r0, r7
 80a5550:	fb03 cc1a 	mls	ip, r3, sl, ip
 80a5554:	eb09 0e04 	add.w	lr, r9, r4
 80a5558:	f89e e001 	ldrb.w	lr, [lr, #1]
 80a555c:	f01e 0f04 	tst.w	lr, #4
 80a5560:	d001      	beq.n	80a5566 <_strtol_r+0x82>
 80a5562:	3c30      	subs	r4, #48	; 0x30
 80a5564:	e00b      	b.n	80a557e <_strtol_r+0x9a>
 80a5566:	f01e 0e03 	ands.w	lr, lr, #3
 80a556a:	d01b      	beq.n	80a55a4 <_strtol_r+0xc0>
 80a556c:	f1be 0f01 	cmp.w	lr, #1
 80a5570:	bf0c      	ite	eq
 80a5572:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 80a5576:	f04f 0e57 	movne.w	lr, #87	; 0x57
 80a557a:	ebce 0404 	rsb	r4, lr, r4
 80a557e:	42a3      	cmp	r3, r4
 80a5580:	dd10      	ble.n	80a55a4 <_strtol_r+0xc0>
 80a5582:	f1b7 3fff 	cmp.w	r7, #4294967295
 80a5586:	d00a      	beq.n	80a559e <_strtol_r+0xba>
 80a5588:	4550      	cmp	r0, sl
 80a558a:	d806      	bhi.n	80a559a <_strtol_r+0xb6>
 80a558c:	d101      	bne.n	80a5592 <_strtol_r+0xae>
 80a558e:	4564      	cmp	r4, ip
 80a5590:	dc03      	bgt.n	80a559a <_strtol_r+0xb6>
 80a5592:	fb03 4000 	mla	r0, r3, r0, r4
 80a5596:	2701      	movs	r7, #1
 80a5598:	e001      	b.n	80a559e <_strtol_r+0xba>
 80a559a:	f04f 37ff 	mov.w	r7, #4294967295
 80a559e:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a55a2:	e7d7      	b.n	80a5554 <_strtol_r+0x70>
 80a55a4:	1c7b      	adds	r3, r7, #1
 80a55a6:	d10c      	bne.n	80a55c2 <_strtol_r+0xde>
 80a55a8:	2e00      	cmp	r6, #0
 80a55aa:	f04f 0322 	mov.w	r3, #34	; 0x22
 80a55ae:	bf14      	ite	ne
 80a55b0:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 80a55b4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a55b8:	f8c8 3000 	str.w	r3, [r8]
 80a55bc:	b92a      	cbnz	r2, 80a55ca <_strtol_r+0xe6>
 80a55be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a55c2:	b106      	cbz	r6, 80a55c6 <_strtol_r+0xe2>
 80a55c4:	4240      	negs	r0, r0
 80a55c6:	b172      	cbz	r2, 80a55e6 <_strtol_r+0x102>
 80a55c8:	b107      	cbz	r7, 80a55cc <_strtol_r+0xe8>
 80a55ca:	1e69      	subs	r1, r5, #1
 80a55cc:	6011      	str	r1, [r2, #0]
 80a55ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a55d2:	2430      	movs	r4, #48	; 0x30
 80a55d4:	2b00      	cmp	r3, #0
 80a55d6:	d1b1      	bne.n	80a553c <_strtol_r+0x58>
 80a55d8:	2308      	movs	r3, #8
 80a55da:	e7af      	b.n	80a553c <_strtol_r+0x58>
 80a55dc:	230a      	movs	r3, #10
 80a55de:	e7ad      	b.n	80a553c <_strtol_r+0x58>
 80a55e0:	2c30      	cmp	r4, #48	; 0x30
 80a55e2:	d0a3      	beq.n	80a552c <_strtol_r+0x48>
 80a55e4:	e7aa      	b.n	80a553c <_strtol_r+0x58>
 80a55e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a55ea:	bf00      	nop
 80a55ec:	20000008 	.word	0x20000008

080a55f0 <strtol>:
 80a55f0:	4613      	mov	r3, r2
 80a55f2:	460a      	mov	r2, r1
 80a55f4:	4601      	mov	r1, r0
 80a55f6:	4802      	ldr	r0, [pc, #8]	; (80a5600 <strtol+0x10>)
 80a55f8:	6800      	ldr	r0, [r0, #0]
 80a55fa:	f7ff bf73 	b.w	80a54e4 <_strtol_r>
 80a55fe:	bf00      	nop
 80a5600:	2000006c 	.word	0x2000006c

080a5604 <_strtoul_r>:
 80a5604:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a5608:	460e      	mov	r6, r1
 80a560a:	4680      	mov	r8, r0
 80a560c:	483b      	ldr	r0, [pc, #236]	; (80a56fc <_strtoul_r+0xf8>)
 80a560e:	f8d0 9000 	ldr.w	r9, [r0]
 80a5612:	4635      	mov	r5, r6
 80a5614:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a5618:	eb09 0004 	add.w	r0, r9, r4
 80a561c:	7840      	ldrb	r0, [r0, #1]
 80a561e:	f000 0008 	and.w	r0, r0, #8
 80a5622:	f000 07ff 	and.w	r7, r0, #255	; 0xff
 80a5626:	b108      	cbz	r0, 80a562c <_strtoul_r+0x28>
 80a5628:	462e      	mov	r6, r5
 80a562a:	e7f2      	b.n	80a5612 <_strtoul_r+0xe>
 80a562c:	2c2d      	cmp	r4, #45	; 0x2d
 80a562e:	d103      	bne.n	80a5638 <_strtoul_r+0x34>
 80a5630:	1cb5      	adds	r5, r6, #2
 80a5632:	7874      	ldrb	r4, [r6, #1]
 80a5634:	2701      	movs	r7, #1
 80a5636:	e003      	b.n	80a5640 <_strtoul_r+0x3c>
 80a5638:	2c2b      	cmp	r4, #43	; 0x2b
 80a563a:	bf04      	itt	eq
 80a563c:	7874      	ldrbeq	r4, [r6, #1]
 80a563e:	1cb5      	addeq	r5, r6, #2
 80a5640:	b113      	cbz	r3, 80a5648 <_strtoul_r+0x44>
 80a5642:	2b10      	cmp	r3, #16
 80a5644:	d10a      	bne.n	80a565c <_strtoul_r+0x58>
 80a5646:	e053      	b.n	80a56f0 <_strtoul_r+0xec>
 80a5648:	2c30      	cmp	r4, #48	; 0x30
 80a564a:	d14f      	bne.n	80a56ec <_strtoul_r+0xe8>
 80a564c:	7828      	ldrb	r0, [r5, #0]
 80a564e:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80a5652:	2858      	cmp	r0, #88	; 0x58
 80a5654:	d145      	bne.n	80a56e2 <_strtoul_r+0xde>
 80a5656:	786c      	ldrb	r4, [r5, #1]
 80a5658:	2310      	movs	r3, #16
 80a565a:	3502      	adds	r5, #2
 80a565c:	f04f 3cff 	mov.w	ip, #4294967295
 80a5660:	fbbc fcf3 	udiv	ip, ip, r3
 80a5664:	fb03 fa0c 	mul.w	sl, r3, ip
 80a5668:	2600      	movs	r6, #0
 80a566a:	ea6f 0a0a 	mvn.w	sl, sl
 80a566e:	4630      	mov	r0, r6
 80a5670:	eb09 0e04 	add.w	lr, r9, r4
 80a5674:	f89e e001 	ldrb.w	lr, [lr, #1]
 80a5678:	f01e 0f04 	tst.w	lr, #4
 80a567c:	d001      	beq.n	80a5682 <_strtoul_r+0x7e>
 80a567e:	3c30      	subs	r4, #48	; 0x30
 80a5680:	e00b      	b.n	80a569a <_strtoul_r+0x96>
 80a5682:	f01e 0e03 	ands.w	lr, lr, #3
 80a5686:	d01a      	beq.n	80a56be <_strtoul_r+0xba>
 80a5688:	f1be 0f01 	cmp.w	lr, #1
 80a568c:	bf0c      	ite	eq
 80a568e:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 80a5692:	f04f 0e57 	movne.w	lr, #87	; 0x57
 80a5696:	ebce 0404 	rsb	r4, lr, r4
 80a569a:	42a3      	cmp	r3, r4
 80a569c:	dd0f      	ble.n	80a56be <_strtoul_r+0xba>
 80a569e:	2e00      	cmp	r6, #0
 80a56a0:	db08      	blt.n	80a56b4 <_strtoul_r+0xb0>
 80a56a2:	4560      	cmp	r0, ip
 80a56a4:	d806      	bhi.n	80a56b4 <_strtoul_r+0xb0>
 80a56a6:	d101      	bne.n	80a56ac <_strtoul_r+0xa8>
 80a56a8:	4554      	cmp	r4, sl
 80a56aa:	dc03      	bgt.n	80a56b4 <_strtoul_r+0xb0>
 80a56ac:	fb03 4000 	mla	r0, r3, r0, r4
 80a56b0:	2601      	movs	r6, #1
 80a56b2:	e001      	b.n	80a56b8 <_strtoul_r+0xb4>
 80a56b4:	f04f 36ff 	mov.w	r6, #4294967295
 80a56b8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a56bc:	e7d8      	b.n	80a5670 <_strtoul_r+0x6c>
 80a56be:	2e00      	cmp	r6, #0
 80a56c0:	da07      	bge.n	80a56d2 <_strtoul_r+0xce>
 80a56c2:	2322      	movs	r3, #34	; 0x22
 80a56c4:	f8c8 3000 	str.w	r3, [r8]
 80a56c8:	f04f 30ff 	mov.w	r0, #4294967295
 80a56cc:	b92a      	cbnz	r2, 80a56da <_strtoul_r+0xd6>
 80a56ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a56d2:	b107      	cbz	r7, 80a56d6 <_strtoul_r+0xd2>
 80a56d4:	4240      	negs	r0, r0
 80a56d6:	b172      	cbz	r2, 80a56f6 <_strtoul_r+0xf2>
 80a56d8:	b106      	cbz	r6, 80a56dc <_strtoul_r+0xd8>
 80a56da:	1e69      	subs	r1, r5, #1
 80a56dc:	6011      	str	r1, [r2, #0]
 80a56de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a56e2:	2430      	movs	r4, #48	; 0x30
 80a56e4:	2b00      	cmp	r3, #0
 80a56e6:	d1b9      	bne.n	80a565c <_strtoul_r+0x58>
 80a56e8:	2308      	movs	r3, #8
 80a56ea:	e7b7      	b.n	80a565c <_strtoul_r+0x58>
 80a56ec:	230a      	movs	r3, #10
 80a56ee:	e7b5      	b.n	80a565c <_strtoul_r+0x58>
 80a56f0:	2c30      	cmp	r4, #48	; 0x30
 80a56f2:	d0ab      	beq.n	80a564c <_strtoul_r+0x48>
 80a56f4:	e7b2      	b.n	80a565c <_strtoul_r+0x58>
 80a56f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a56fa:	bf00      	nop
 80a56fc:	20000008 	.word	0x20000008

080a5700 <strtoul>:
 80a5700:	4613      	mov	r3, r2
 80a5702:	460a      	mov	r2, r1
 80a5704:	4601      	mov	r1, r0
 80a5706:	4802      	ldr	r0, [pc, #8]	; (80a5710 <strtoul+0x10>)
 80a5708:	6800      	ldr	r0, [r0, #0]
 80a570a:	f7ff bf7b 	b.w	80a5604 <_strtoul_r>
 80a570e:	bf00      	nop
 80a5710:	2000006c 	.word	0x2000006c

080a5714 <__get_current_time_locale>:
 80a5714:	4b04      	ldr	r3, [pc, #16]	; (80a5728 <__get_current_time_locale+0x14>)
 80a5716:	4a05      	ldr	r2, [pc, #20]	; (80a572c <__get_current_time_locale+0x18>)
 80a5718:	6818      	ldr	r0, [r3, #0]
 80a571a:	4b05      	ldr	r3, [pc, #20]	; (80a5730 <__get_current_time_locale+0x1c>)
 80a571c:	2800      	cmp	r0, #0
 80a571e:	bf14      	ite	ne
 80a5720:	4610      	movne	r0, r2
 80a5722:	4618      	moveq	r0, r3
 80a5724:	4770      	bx	lr
 80a5726:	bf00      	nop
 80a5728:	200003a0 	.word	0x200003a0
 80a572c:	200003a4 	.word	0x200003a4
 80a5730:	080a695c 	.word	0x080a695c

080a5734 <__tzcalc_limits>:
 80a5734:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a5738:	4604      	mov	r4, r0
 80a573a:	f000 fa73 	bl	80a5c24 <__gettzinfo>
 80a573e:	f240 73b1 	movw	r3, #1969	; 0x7b1
 80a5742:	429c      	cmp	r4, r3
 80a5744:	f340 8096 	ble.w	80a5874 <__tzcalc_limits+0x140>
 80a5748:	f240 156d 	movw	r5, #365	; 0x16d
 80a574c:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 80a5750:	18e3      	adds	r3, r4, r3
 80a5752:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
 80a5756:	109b      	asrs	r3, r3, #2
 80a5758:	fb05 3502 	mla	r5, r5, r2, r3
 80a575c:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
 80a5760:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80a5764:	fb92 f3f3 	sdiv	r3, r2, r3
 80a5768:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 80a576c:	442b      	add	r3, r5
 80a576e:	18a5      	adds	r5, r4, r2
 80a5770:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80a5774:	fb94 f7f2 	sdiv	r7, r4, r2
 80a5778:	fb95 f5f2 	sdiv	r5, r5, r2
 80a577c:	fb02 4717 	mls	r7, r2, r7, r4
 80a5780:	441d      	add	r5, r3
 80a5782:	2364      	movs	r3, #100	; 0x64
 80a5784:	fb94 f6f3 	sdiv	r6, r4, r3
 80a5788:	fab7 fe87 	clz	lr, r7
 80a578c:	4601      	mov	r1, r0
 80a578e:	fb03 4616 	mls	r6, r3, r6, r4
 80a5792:	f100 0338 	add.w	r3, r0, #56	; 0x38
 80a5796:	9301      	str	r3, [sp, #4]
 80a5798:	f004 0303 	and.w	r3, r4, #3
 80a579c:	6044      	str	r4, [r0, #4]
 80a579e:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80a57a2:	9300      	str	r3, [sp, #0]
 80a57a4:	f04f 0c07 	mov.w	ip, #7
 80a57a8:	7a0b      	ldrb	r3, [r1, #8]
 80a57aa:	2b4a      	cmp	r3, #74	; 0x4a
 80a57ac:	d10e      	bne.n	80a57cc <__tzcalc_limits+0x98>
 80a57ae:	694b      	ldr	r3, [r1, #20]
 80a57b0:	9a00      	ldr	r2, [sp, #0]
 80a57b2:	18ec      	adds	r4, r5, r3
 80a57b4:	b902      	cbnz	r2, 80a57b8 <__tzcalc_limits+0x84>
 80a57b6:	b906      	cbnz	r6, 80a57ba <__tzcalc_limits+0x86>
 80a57b8:	b927      	cbnz	r7, 80a57c4 <__tzcalc_limits+0x90>
 80a57ba:	2b3b      	cmp	r3, #59	; 0x3b
 80a57bc:	bfd4      	ite	le
 80a57be:	2300      	movle	r3, #0
 80a57c0:	2301      	movgt	r3, #1
 80a57c2:	e000      	b.n	80a57c6 <__tzcalc_limits+0x92>
 80a57c4:	2300      	movs	r3, #0
 80a57c6:	4423      	add	r3, r4
 80a57c8:	3b01      	subs	r3, #1
 80a57ca:	e03f      	b.n	80a584c <__tzcalc_limits+0x118>
 80a57cc:	2b44      	cmp	r3, #68	; 0x44
 80a57ce:	d102      	bne.n	80a57d6 <__tzcalc_limits+0xa2>
 80a57d0:	694b      	ldr	r3, [r1, #20]
 80a57d2:	442b      	add	r3, r5
 80a57d4:	e03a      	b.n	80a584c <__tzcalc_limits+0x118>
 80a57d6:	9b00      	ldr	r3, [sp, #0]
 80a57d8:	b92b      	cbnz	r3, 80a57e6 <__tzcalc_limits+0xb2>
 80a57da:	2e00      	cmp	r6, #0
 80a57dc:	bf0c      	ite	eq
 80a57de:	46f0      	moveq	r8, lr
 80a57e0:	f04f 0801 	movne.w	r8, #1
 80a57e4:	e000      	b.n	80a57e8 <__tzcalc_limits+0xb4>
 80a57e6:	46f0      	mov	r8, lr
 80a57e8:	46a9      	mov	r9, r5
 80a57ea:	4b24      	ldr	r3, [pc, #144]	; (80a587c <__tzcalc_limits+0x148>)
 80a57ec:	2230      	movs	r2, #48	; 0x30
 80a57ee:	fb02 3808 	mla	r8, r2, r8, r3
 80a57f2:	68cc      	ldr	r4, [r1, #12]
 80a57f4:	f1a8 0a04 	sub.w	sl, r8, #4
 80a57f8:	2301      	movs	r3, #1
 80a57fa:	42a3      	cmp	r3, r4
 80a57fc:	da04      	bge.n	80a5808 <__tzcalc_limits+0xd4>
 80a57fe:	f85a bf04 	ldr.w	fp, [sl, #4]!
 80a5802:	3301      	adds	r3, #1
 80a5804:	44d9      	add	r9, fp
 80a5806:	e7f8      	b.n	80a57fa <__tzcalc_limits+0xc6>
 80a5808:	f109 0304 	add.w	r3, r9, #4
 80a580c:	fb93 fbfc 	sdiv	fp, r3, ip
 80a5810:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
 80a5814:	ebca 0a03 	rsb	sl, sl, r3
 80a5818:	694b      	ldr	r3, [r1, #20]
 80a581a:	2c01      	cmp	r4, #1
 80a581c:	bfb8      	it	lt
 80a581e:	2401      	movlt	r4, #1
 80a5820:	ebb3 0a0a 	subs.w	sl, r3, sl
 80a5824:	690b      	ldr	r3, [r1, #16]
 80a5826:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 80a582a:	f103 33ff 	add.w	r3, r3, #4294967295
 80a582e:	f104 34ff 	add.w	r4, r4, #4294967295
 80a5832:	bf48      	it	mi
 80a5834:	f10a 0a07 	addmi.w	sl, sl, #7
 80a5838:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a583c:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 80a5840:	4453      	add	r3, sl
 80a5842:	42a3      	cmp	r3, r4
 80a5844:	db01      	blt.n	80a584a <__tzcalc_limits+0x116>
 80a5846:	3b07      	subs	r3, #7
 80a5848:	e7fb      	b.n	80a5842 <__tzcalc_limits+0x10e>
 80a584a:	444b      	add	r3, r9
 80a584c:	698c      	ldr	r4, [r1, #24]
 80a584e:	4a0c      	ldr	r2, [pc, #48]	; (80a5880 <__tzcalc_limits+0x14c>)
 80a5850:	fb02 4303 	mla	r3, r2, r3, r4
 80a5854:	6a0c      	ldr	r4, [r1, #32]
 80a5856:	4423      	add	r3, r4
 80a5858:	f841 3f1c 	str.w	r3, [r1, #28]!
 80a585c:	9b01      	ldr	r3, [sp, #4]
 80a585e:	4299      	cmp	r1, r3
 80a5860:	d1a2      	bne.n	80a57a8 <__tzcalc_limits+0x74>
 80a5862:	69c3      	ldr	r3, [r0, #28]
 80a5864:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80a5866:	4293      	cmp	r3, r2
 80a5868:	bfac      	ite	ge
 80a586a:	2300      	movge	r3, #0
 80a586c:	2301      	movlt	r3, #1
 80a586e:	6003      	str	r3, [r0, #0]
 80a5870:	2001      	movs	r0, #1
 80a5872:	e000      	b.n	80a5876 <__tzcalc_limits+0x142>
 80a5874:	2000      	movs	r0, #0
 80a5876:	b003      	add	sp, #12
 80a5878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a587c:	080a6774 	.word	0x080a6774
 80a5880:	00015180 	.word	0x00015180

080a5884 <__tz_lock>:
 80a5884:	4770      	bx	lr

080a5886 <__tz_unlock>:
 80a5886:	4770      	bx	lr

080a5888 <_tzset_unlocked>:
 80a5888:	4b01      	ldr	r3, [pc, #4]	; (80a5890 <_tzset_unlocked+0x8>)
 80a588a:	6818      	ldr	r0, [r3, #0]
 80a588c:	f000 b802 	b.w	80a5894 <_tzset_unlocked_r>
 80a5890:	2000006c 	.word	0x2000006c

080a5894 <_tzset_unlocked_r>:
 80a5894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a5898:	b08d      	sub	sp, #52	; 0x34
 80a589a:	4607      	mov	r7, r0
 80a589c:	f000 f9c2 	bl	80a5c24 <__gettzinfo>
 80a58a0:	49b0      	ldr	r1, [pc, #704]	; (80a5b64 <_tzset_unlocked_r+0x2d0>)
 80a58a2:	4604      	mov	r4, r0
 80a58a4:	4638      	mov	r0, r7
 80a58a6:	f000 f9b5 	bl	80a5c14 <_getenv_r>
 80a58aa:	4eaf      	ldr	r6, [pc, #700]	; (80a5b68 <_tzset_unlocked_r+0x2d4>)
 80a58ac:	4605      	mov	r5, r0
 80a58ae:	b960      	cbnz	r0, 80a58ca <_tzset_unlocked_r+0x36>
 80a58b0:	4bae      	ldr	r3, [pc, #696]	; (80a5b6c <_tzset_unlocked_r+0x2d8>)
 80a58b2:	4aaf      	ldr	r2, [pc, #700]	; (80a5b70 <_tzset_unlocked_r+0x2dc>)
 80a58b4:	6018      	str	r0, [r3, #0]
 80a58b6:	4baf      	ldr	r3, [pc, #700]	; (80a5b74 <_tzset_unlocked_r+0x2e0>)
 80a58b8:	6018      	str	r0, [r3, #0]
 80a58ba:	4baf      	ldr	r3, [pc, #700]	; (80a5b78 <_tzset_unlocked_r+0x2e4>)
 80a58bc:	6830      	ldr	r0, [r6, #0]
 80a58be:	601a      	str	r2, [r3, #0]
 80a58c0:	605a      	str	r2, [r3, #4]
 80a58c2:	f7fc f8e7 	bl	80a1a94 <free>
 80a58c6:	6035      	str	r5, [r6, #0]
 80a58c8:	e148      	b.n	80a5b5c <_tzset_unlocked_r+0x2c8>
 80a58ca:	6831      	ldr	r1, [r6, #0]
 80a58cc:	b979      	cbnz	r1, 80a58ee <_tzset_unlocked_r+0x5a>
 80a58ce:	6830      	ldr	r0, [r6, #0]
 80a58d0:	f7fc f8e0 	bl	80a1a94 <free>
 80a58d4:	4628      	mov	r0, r5
 80a58d6:	f7ff fdd5 	bl	80a5484 <strlen>
 80a58da:	1c41      	adds	r1, r0, #1
 80a58dc:	4638      	mov	r0, r7
 80a58de:	f7fc f909 	bl	80a1af4 <_malloc_r>
 80a58e2:	6030      	str	r0, [r6, #0]
 80a58e4:	b148      	cbz	r0, 80a58fa <_tzset_unlocked_r+0x66>
 80a58e6:	4629      	mov	r1, r5
 80a58e8:	f7ff f8b0 	bl	80a4a4c <strcpy>
 80a58ec:	e005      	b.n	80a58fa <_tzset_unlocked_r+0x66>
 80a58ee:	f7ff f8a3 	bl	80a4a38 <strcmp>
 80a58f2:	2800      	cmp	r0, #0
 80a58f4:	f000 8132 	beq.w	80a5b5c <_tzset_unlocked_r+0x2c8>
 80a58f8:	e7e9      	b.n	80a58ce <_tzset_unlocked_r+0x3a>
 80a58fa:	782b      	ldrb	r3, [r5, #0]
 80a58fc:	ae0a      	add	r6, sp, #40	; 0x28
 80a58fe:	2b3a      	cmp	r3, #58	; 0x3a
 80a5900:	bf08      	it	eq
 80a5902:	3501      	addeq	r5, #1
 80a5904:	4633      	mov	r3, r6
 80a5906:	4a9d      	ldr	r2, [pc, #628]	; (80a5b7c <_tzset_unlocked_r+0x2e8>)
 80a5908:	499d      	ldr	r1, [pc, #628]	; (80a5b80 <_tzset_unlocked_r+0x2ec>)
 80a590a:	4628      	mov	r0, r5
 80a590c:	f7fc f8da 	bl	80a1ac4 <siscanf>
 80a5910:	2800      	cmp	r0, #0
 80a5912:	f340 8123 	ble.w	80a5b5c <_tzset_unlocked_r+0x2c8>
 80a5916:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a5918:	18ef      	adds	r7, r5, r3
 80a591a:	5ceb      	ldrb	r3, [r5, r3]
 80a591c:	2b2d      	cmp	r3, #45	; 0x2d
 80a591e:	d103      	bne.n	80a5928 <_tzset_unlocked_r+0x94>
 80a5920:	3701      	adds	r7, #1
 80a5922:	f04f 35ff 	mov.w	r5, #4294967295
 80a5926:	e003      	b.n	80a5930 <_tzset_unlocked_r+0x9c>
 80a5928:	2b2b      	cmp	r3, #43	; 0x2b
 80a592a:	bf08      	it	eq
 80a592c:	3701      	addeq	r7, #1
 80a592e:	2501      	movs	r5, #1
 80a5930:	f10d 0a20 	add.w	sl, sp, #32
 80a5934:	f10d 0b1e 	add.w	fp, sp, #30
 80a5938:	f04f 0800 	mov.w	r8, #0
 80a593c:	9603      	str	r6, [sp, #12]
 80a593e:	f8cd a008 	str.w	sl, [sp, #8]
 80a5942:	9601      	str	r6, [sp, #4]
 80a5944:	f8cd b000 	str.w	fp, [sp]
 80a5948:	4633      	mov	r3, r6
 80a594a:	aa07      	add	r2, sp, #28
 80a594c:	498d      	ldr	r1, [pc, #564]	; (80a5b84 <_tzset_unlocked_r+0x2f0>)
 80a594e:	4638      	mov	r0, r7
 80a5950:	f8ad 801e 	strh.w	r8, [sp, #30]
 80a5954:	f8ad 8020 	strh.w	r8, [sp, #32]
 80a5958:	f7fc f8b4 	bl	80a1ac4 <siscanf>
 80a595c:	4540      	cmp	r0, r8
 80a595e:	f340 80fd 	ble.w	80a5b5c <_tzset_unlocked_r+0x2c8>
 80a5962:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80a5966:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80a596a:	213c      	movs	r1, #60	; 0x3c
 80a596c:	fb01 3302 	mla	r3, r1, r2, r3
 80a5970:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80a5974:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a5978:	fb01 3302 	mla	r3, r1, r2, r3
 80a597c:	435d      	muls	r5, r3
 80a597e:	4b7f      	ldr	r3, [pc, #508]	; (80a5b7c <_tzset_unlocked_r+0x2e8>)
 80a5980:	6225      	str	r5, [r4, #32]
 80a5982:	4d7d      	ldr	r5, [pc, #500]	; (80a5b78 <_tzset_unlocked_r+0x2e4>)
 80a5984:	f8df 9208 	ldr.w	r9, [pc, #520]	; 80a5b90 <_tzset_unlocked_r+0x2fc>
 80a5988:	602b      	str	r3, [r5, #0]
 80a598a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a598c:	464a      	mov	r2, r9
 80a598e:	441f      	add	r7, r3
 80a5990:	497b      	ldr	r1, [pc, #492]	; (80a5b80 <_tzset_unlocked_r+0x2ec>)
 80a5992:	4633      	mov	r3, r6
 80a5994:	4638      	mov	r0, r7
 80a5996:	f7fc f895 	bl	80a1ac4 <siscanf>
 80a599a:	4540      	cmp	r0, r8
 80a599c:	dc08      	bgt.n	80a59b0 <_tzset_unlocked_r+0x11c>
 80a599e:	682b      	ldr	r3, [r5, #0]
 80a59a0:	6a22      	ldr	r2, [r4, #32]
 80a59a2:	606b      	str	r3, [r5, #4]
 80a59a4:	4b71      	ldr	r3, [pc, #452]	; (80a5b6c <_tzset_unlocked_r+0x2d8>)
 80a59a6:	601a      	str	r2, [r3, #0]
 80a59a8:	4b72      	ldr	r3, [pc, #456]	; (80a5b74 <_tzset_unlocked_r+0x2e0>)
 80a59aa:	f8c3 8000 	str.w	r8, [r3]
 80a59ae:	e0d5      	b.n	80a5b5c <_tzset_unlocked_r+0x2c8>
 80a59b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a59b2:	f8c5 9004 	str.w	r9, [r5, #4]
 80a59b6:	18fd      	adds	r5, r7, r3
 80a59b8:	5cfb      	ldrb	r3, [r7, r3]
 80a59ba:	2b2d      	cmp	r3, #45	; 0x2d
 80a59bc:	d103      	bne.n	80a59c6 <_tzset_unlocked_r+0x132>
 80a59be:	3501      	adds	r5, #1
 80a59c0:	f04f 37ff 	mov.w	r7, #4294967295
 80a59c4:	e003      	b.n	80a59ce <_tzset_unlocked_r+0x13a>
 80a59c6:	2b2b      	cmp	r3, #43	; 0x2b
 80a59c8:	bf08      	it	eq
 80a59ca:	3501      	addeq	r5, #1
 80a59cc:	2701      	movs	r7, #1
 80a59ce:	2300      	movs	r3, #0
 80a59d0:	f8ad 301c 	strh.w	r3, [sp, #28]
 80a59d4:	f8ad 301e 	strh.w	r3, [sp, #30]
 80a59d8:	f8ad 3020 	strh.w	r3, [sp, #32]
 80a59dc:	930a      	str	r3, [sp, #40]	; 0x28
 80a59de:	9603      	str	r6, [sp, #12]
 80a59e0:	f8cd a008 	str.w	sl, [sp, #8]
 80a59e4:	9601      	str	r6, [sp, #4]
 80a59e6:	f8cd b000 	str.w	fp, [sp]
 80a59ea:	4633      	mov	r3, r6
 80a59ec:	aa07      	add	r2, sp, #28
 80a59ee:	4965      	ldr	r1, [pc, #404]	; (80a5b84 <_tzset_unlocked_r+0x2f0>)
 80a59f0:	4628      	mov	r0, r5
 80a59f2:	f7fc f867 	bl	80a1ac4 <siscanf>
 80a59f6:	2800      	cmp	r0, #0
 80a59f8:	dc04      	bgt.n	80a5a04 <_tzset_unlocked_r+0x170>
 80a59fa:	6a23      	ldr	r3, [r4, #32]
 80a59fc:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 80a5a00:	63e3      	str	r3, [r4, #60]	; 0x3c
 80a5a02:	e00e      	b.n	80a5a22 <_tzset_unlocked_r+0x18e>
 80a5a04:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80a5a08:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80a5a0c:	213c      	movs	r1, #60	; 0x3c
 80a5a0e:	fb01 3302 	mla	r3, r1, r2, r3
 80a5a12:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80a5a16:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a5a1a:	fb01 3302 	mla	r3, r1, r2, r3
 80a5a1e:	435f      	muls	r7, r3
 80a5a20:	63e7      	str	r7, [r4, #60]	; 0x3c
 80a5a22:	4627      	mov	r7, r4
 80a5a24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a5a26:	f04f 0900 	mov.w	r9, #0
 80a5a2a:	441d      	add	r5, r3
 80a5a2c:	782b      	ldrb	r3, [r5, #0]
 80a5a2e:	2b2c      	cmp	r3, #44	; 0x2c
 80a5a30:	bf08      	it	eq
 80a5a32:	3501      	addeq	r5, #1
 80a5a34:	f895 8000 	ldrb.w	r8, [r5]
 80a5a38:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 80a5a3c:	d126      	bne.n	80a5a8c <_tzset_unlocked_r+0x1f8>
 80a5a3e:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 80a5a42:	9302      	str	r3, [sp, #8]
 80a5a44:	ab09      	add	r3, sp, #36	; 0x24
 80a5a46:	9300      	str	r3, [sp, #0]
 80a5a48:	9603      	str	r6, [sp, #12]
 80a5a4a:	9601      	str	r6, [sp, #4]
 80a5a4c:	4633      	mov	r3, r6
 80a5a4e:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 80a5a52:	494d      	ldr	r1, [pc, #308]	; (80a5b88 <_tzset_unlocked_r+0x2f4>)
 80a5a54:	4628      	mov	r0, r5
 80a5a56:	f7fc f835 	bl	80a1ac4 <siscanf>
 80a5a5a:	2803      	cmp	r0, #3
 80a5a5c:	d17e      	bne.n	80a5b5c <_tzset_unlocked_r+0x2c8>
 80a5a5e:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 80a5a62:	1e4b      	subs	r3, r1, #1
 80a5a64:	2b0b      	cmp	r3, #11
 80a5a66:	d879      	bhi.n	80a5b5c <_tzset_unlocked_r+0x2c8>
 80a5a68:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 80a5a6c:	1e53      	subs	r3, r2, #1
 80a5a6e:	2b04      	cmp	r3, #4
 80a5a70:	d874      	bhi.n	80a5b5c <_tzset_unlocked_r+0x2c8>
 80a5a72:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 80a5a76:	2b06      	cmp	r3, #6
 80a5a78:	d870      	bhi.n	80a5b5c <_tzset_unlocked_r+0x2c8>
 80a5a7a:	f887 8008 	strb.w	r8, [r7, #8]
 80a5a7e:	60f9      	str	r1, [r7, #12]
 80a5a80:	613a      	str	r2, [r7, #16]
 80a5a82:	617b      	str	r3, [r7, #20]
 80a5a84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a5a86:	eb05 0803 	add.w	r8, r5, r3
 80a5a8a:	e02a      	b.n	80a5ae2 <_tzset_unlocked_r+0x24e>
 80a5a8c:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 80a5a90:	bf06      	itte	eq
 80a5a92:	4643      	moveq	r3, r8
 80a5a94:	3501      	addeq	r5, #1
 80a5a96:	2344      	movne	r3, #68	; 0x44
 80a5a98:	220a      	movs	r2, #10
 80a5a9a:	a90b      	add	r1, sp, #44	; 0x2c
 80a5a9c:	4628      	mov	r0, r5
 80a5a9e:	9305      	str	r3, [sp, #20]
 80a5aa0:	f7ff fe2e 	bl	80a5700 <strtoul>
 80a5aa4:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 80a5aa8:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 80a5aac:	4545      	cmp	r5, r8
 80a5aae:	9b05      	ldr	r3, [sp, #20]
 80a5ab0:	d114      	bne.n	80a5adc <_tzset_unlocked_r+0x248>
 80a5ab2:	234d      	movs	r3, #77	; 0x4d
 80a5ab4:	f1b9 0f00 	cmp.w	r9, #0
 80a5ab8:	d107      	bne.n	80a5aca <_tzset_unlocked_r+0x236>
 80a5aba:	7223      	strb	r3, [r4, #8]
 80a5abc:	2303      	movs	r3, #3
 80a5abe:	60e3      	str	r3, [r4, #12]
 80a5ac0:	2302      	movs	r3, #2
 80a5ac2:	6123      	str	r3, [r4, #16]
 80a5ac4:	f8c4 9014 	str.w	r9, [r4, #20]
 80a5ac8:	e00b      	b.n	80a5ae2 <_tzset_unlocked_r+0x24e>
 80a5aca:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 80a5ace:	230b      	movs	r3, #11
 80a5ad0:	62a3      	str	r3, [r4, #40]	; 0x28
 80a5ad2:	2301      	movs	r3, #1
 80a5ad4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80a5ad6:	2300      	movs	r3, #0
 80a5ad8:	6323      	str	r3, [r4, #48]	; 0x30
 80a5ada:	e002      	b.n	80a5ae2 <_tzset_unlocked_r+0x24e>
 80a5adc:	b280      	uxth	r0, r0
 80a5ade:	723b      	strb	r3, [r7, #8]
 80a5ae0:	6178      	str	r0, [r7, #20]
 80a5ae2:	2302      	movs	r3, #2
 80a5ae4:	f8ad 301c 	strh.w	r3, [sp, #28]
 80a5ae8:	2300      	movs	r3, #0
 80a5aea:	f8ad 301e 	strh.w	r3, [sp, #30]
 80a5aee:	f8ad 3020 	strh.w	r3, [sp, #32]
 80a5af2:	930a      	str	r3, [sp, #40]	; 0x28
 80a5af4:	f898 3000 	ldrb.w	r3, [r8]
 80a5af8:	2b2f      	cmp	r3, #47	; 0x2f
 80a5afa:	d10b      	bne.n	80a5b14 <_tzset_unlocked_r+0x280>
 80a5afc:	9603      	str	r6, [sp, #12]
 80a5afe:	f8cd a008 	str.w	sl, [sp, #8]
 80a5b02:	9601      	str	r6, [sp, #4]
 80a5b04:	f8cd b000 	str.w	fp, [sp]
 80a5b08:	4633      	mov	r3, r6
 80a5b0a:	aa07      	add	r2, sp, #28
 80a5b0c:	491f      	ldr	r1, [pc, #124]	; (80a5b8c <_tzset_unlocked_r+0x2f8>)
 80a5b0e:	4640      	mov	r0, r8
 80a5b10:	f7fb ffd8 	bl	80a1ac4 <siscanf>
 80a5b14:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80a5b18:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80a5b1c:	213c      	movs	r1, #60	; 0x3c
 80a5b1e:	fb01 3302 	mla	r3, r1, r2, r3
 80a5b22:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80a5b26:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a5b2a:	fb01 3302 	mla	r3, r1, r2, r3
 80a5b2e:	61bb      	str	r3, [r7, #24]
 80a5b30:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80a5b32:	f109 0901 	add.w	r9, r9, #1
 80a5b36:	f1b9 0f02 	cmp.w	r9, #2
 80a5b3a:	4445      	add	r5, r8
 80a5b3c:	f107 071c 	add.w	r7, r7, #28
 80a5b40:	f47f af74 	bne.w	80a5a2c <_tzset_unlocked_r+0x198>
 80a5b44:	6860      	ldr	r0, [r4, #4]
 80a5b46:	f7ff fdf5 	bl	80a5734 <__tzcalc_limits>
 80a5b4a:	6a22      	ldr	r2, [r4, #32]
 80a5b4c:	4b07      	ldr	r3, [pc, #28]	; (80a5b6c <_tzset_unlocked_r+0x2d8>)
 80a5b4e:	601a      	str	r2, [r3, #0]
 80a5b50:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80a5b52:	1a9b      	subs	r3, r3, r2
 80a5b54:	4a07      	ldr	r2, [pc, #28]	; (80a5b74 <_tzset_unlocked_r+0x2e0>)
 80a5b56:	bf18      	it	ne
 80a5b58:	2301      	movne	r3, #1
 80a5b5a:	6013      	str	r3, [r2, #0]
 80a5b5c:	b00d      	add	sp, #52	; 0x34
 80a5b5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a5b62:	bf00      	nop
 80a5b64:	080a6a58 	.word	0x080a6a58
 80a5b68:	200004b8 	.word	0x200004b8
 80a5b6c:	200004c0 	.word	0x200004c0
 80a5b70:	080a6a5b 	.word	0x080a6a5b
 80a5b74:	200004bc 	.word	0x200004bc
 80a5b78:	20000070 	.word	0x20000070
 80a5b7c:	200004ab 	.word	0x200004ab
 80a5b80:	080a6a5f 	.word	0x080a6a5f
 80a5b84:	080a6a82 	.word	0x080a6a82
 80a5b88:	080a6a6e 	.word	0x080a6a6e
 80a5b8c:	080a6a81 	.word	0x080a6a81
 80a5b90:	200004a0 	.word	0x200004a0

080a5b94 <abs>:
 80a5b94:	2800      	cmp	r0, #0
 80a5b96:	bfb8      	it	lt
 80a5b98:	4240      	neglt	r0, r0
 80a5b9a:	4770      	bx	lr

080a5b9c <_findenv_r>:
 80a5b9c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a5ba0:	4607      	mov	r7, r0
 80a5ba2:	468b      	mov	fp, r1
 80a5ba4:	4690      	mov	r8, r2
 80a5ba6:	f000 f8db 	bl	80a5d60 <__env_lock>
 80a5baa:	4b19      	ldr	r3, [pc, #100]	; (80a5c10 <_findenv_r+0x74>)
 80a5bac:	681d      	ldr	r5, [r3, #0]
 80a5bae:	469a      	mov	sl, r3
 80a5bb0:	b13d      	cbz	r5, 80a5bc2 <_findenv_r+0x26>
 80a5bb2:	465c      	mov	r4, fp
 80a5bb4:	4623      	mov	r3, r4
 80a5bb6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a5bba:	b142      	cbz	r2, 80a5bce <_findenv_r+0x32>
 80a5bbc:	2a3d      	cmp	r2, #61	; 0x3d
 80a5bbe:	461c      	mov	r4, r3
 80a5bc0:	d1f8      	bne.n	80a5bb4 <_findenv_r+0x18>
 80a5bc2:	4638      	mov	r0, r7
 80a5bc4:	f000 f8cd 	bl	80a5d62 <__env_unlock>
 80a5bc8:	2000      	movs	r0, #0
 80a5bca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a5bce:	ebcb 0404 	rsb	r4, fp, r4
 80a5bd2:	46a9      	mov	r9, r5
 80a5bd4:	f859 0b04 	ldr.w	r0, [r9], #4
 80a5bd8:	2800      	cmp	r0, #0
 80a5bda:	d0f2      	beq.n	80a5bc2 <_findenv_r+0x26>
 80a5bdc:	4622      	mov	r2, r4
 80a5bde:	4659      	mov	r1, fp
 80a5be0:	f7ff fc58 	bl	80a5494 <strncmp>
 80a5be4:	b988      	cbnz	r0, 80a5c0a <_findenv_r+0x6e>
 80a5be6:	f859 3c04 	ldr.w	r3, [r9, #-4]
 80a5bea:	191e      	adds	r6, r3, r4
 80a5bec:	5d1b      	ldrb	r3, [r3, r4]
 80a5bee:	2b3d      	cmp	r3, #61	; 0x3d
 80a5bf0:	d10b      	bne.n	80a5c0a <_findenv_r+0x6e>
 80a5bf2:	f8da 3000 	ldr.w	r3, [sl]
 80a5bf6:	4638      	mov	r0, r7
 80a5bf8:	1aed      	subs	r5, r5, r3
 80a5bfa:	10ad      	asrs	r5, r5, #2
 80a5bfc:	f8c8 5000 	str.w	r5, [r8]
 80a5c00:	f000 f8af 	bl	80a5d62 <__env_unlock>
 80a5c04:	1c70      	adds	r0, r6, #1
 80a5c06:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a5c0a:	464d      	mov	r5, r9
 80a5c0c:	e7e1      	b.n	80a5bd2 <_findenv_r+0x36>
 80a5c0e:	bf00      	nop
 80a5c10:	200000b8 	.word	0x200000b8

080a5c14 <_getenv_r>:
 80a5c14:	b507      	push	{r0, r1, r2, lr}
 80a5c16:	aa01      	add	r2, sp, #4
 80a5c18:	f7ff ffc0 	bl	80a5b9c <_findenv_r>
 80a5c1c:	b003      	add	sp, #12
 80a5c1e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a5c24 <__gettzinfo>:
 80a5c24:	4800      	ldr	r0, [pc, #0]	; (80a5c28 <__gettzinfo+0x4>)
 80a5c26:	4770      	bx	lr
 80a5c28:	20000078 	.word	0x20000078

080a5c2c <gmtime_r>:
 80a5c2c:	6802      	ldr	r2, [r0, #0]
 80a5c2e:	4b46      	ldr	r3, [pc, #280]	; (80a5d48 <gmtime_r+0x11c>)
 80a5c30:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a5c32:	fb92 f4f3 	sdiv	r4, r2, r3
 80a5c36:	fb03 2214 	mls	r2, r3, r4, r2
 80a5c3a:	2a00      	cmp	r2, #0
 80a5c3c:	bfbc      	itt	lt
 80a5c3e:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 80a5c42:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 80a5c46:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 80a5c4a:	fb92 f3f0 	sdiv	r3, r2, r0
 80a5c4e:	fb00 2213 	mls	r2, r0, r3, r2
 80a5c52:	f04f 003c 	mov.w	r0, #60	; 0x3c
 80a5c56:	608b      	str	r3, [r1, #8]
 80a5c58:	fb92 f3f0 	sdiv	r3, r2, r0
 80a5c5c:	fb00 2213 	mls	r2, r0, r3, r2
 80a5c60:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
 80a5c64:	bfac      	ite	ge
 80a5c66:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
 80a5c6a:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
 80a5c6e:	604b      	str	r3, [r1, #4]
 80a5c70:	600a      	str	r2, [r1, #0]
 80a5c72:	2307      	movs	r3, #7
 80a5c74:	1ce2      	adds	r2, r4, #3
 80a5c76:	fb92 f3f3 	sdiv	r3, r2, r3
 80a5c7a:	4d34      	ldr	r5, [pc, #208]	; (80a5d4c <gmtime_r+0x120>)
 80a5c7c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a5c80:	fb94 f5f5 	sdiv	r5, r4, r5
 80a5c84:	1ad3      	subs	r3, r2, r3
 80a5c86:	f648 62ac 	movw	r2, #36524	; 0x8eac
 80a5c8a:	f240 57b4 	movw	r7, #1460	; 0x5b4
 80a5c8e:	618b      	str	r3, [r1, #24]
 80a5c90:	4b2f      	ldr	r3, [pc, #188]	; (80a5d50 <gmtime_r+0x124>)
 80a5c92:	4830      	ldr	r0, [pc, #192]	; (80a5d54 <gmtime_r+0x128>)
 80a5c94:	fb03 4405 	mla	r4, r3, r5, r4
 80a5c98:	fbb4 f2f2 	udiv	r2, r4, r2
 80a5c9c:	fbb4 f3f7 	udiv	r3, r4, r7
 80a5ca0:	fbb4 f0f0 	udiv	r0, r4, r0
 80a5ca4:	4422      	add	r2, r4
 80a5ca6:	1ad2      	subs	r2, r2, r3
 80a5ca8:	f648 6694 	movw	r6, #36500	; 0x8e94
 80a5cac:	1a13      	subs	r3, r2, r0
 80a5cae:	f240 126d 	movw	r2, #365	; 0x16d
 80a5cb2:	fbb3 f6f6 	udiv	r6, r3, r6
 80a5cb6:	fbb3 f0f2 	udiv	r0, r3, r2
 80a5cba:	fbb3 f3f7 	udiv	r3, r3, r7
 80a5cbe:	4434      	add	r4, r6
 80a5cc0:	1ae3      	subs	r3, r4, r3
 80a5cc2:	fb02 3310 	mls	r3, r2, r0, r3
 80a5cc6:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80a5cca:	2499      	movs	r4, #153	; 0x99
 80a5ccc:	3202      	adds	r2, #2
 80a5cce:	fbb2 f2f4 	udiv	r2, r2, r4
 80a5cd2:	4354      	muls	r4, r2
 80a5cd4:	1ca6      	adds	r6, r4, #2
 80a5cd6:	2405      	movs	r4, #5
 80a5cd8:	fbb6 f4f4 	udiv	r4, r6, r4
 80a5cdc:	2a0a      	cmp	r2, #10
 80a5cde:	bf34      	ite	cc
 80a5ce0:	2602      	movcc	r6, #2
 80a5ce2:	f06f 0609 	mvncs.w	r6, #9
 80a5ce6:	4416      	add	r6, r2
 80a5ce8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80a5cec:	fb02 0505 	mla	r5, r2, r5, r0
 80a5cf0:	1c5f      	adds	r7, r3, #1
 80a5cf2:	2e01      	cmp	r6, #1
 80a5cf4:	bf98      	it	ls
 80a5cf6:	3501      	addls	r5, #1
 80a5cf8:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 80a5cfc:	eba7 0704 	sub.w	r7, r7, r4
 80a5d00:	d302      	bcc.n	80a5d08 <gmtime_r+0xdc>
 80a5d02:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
 80a5d06:	e014      	b.n	80a5d32 <gmtime_r+0x106>
 80a5d08:	0782      	lsls	r2, r0, #30
 80a5d0a:	d105      	bne.n	80a5d18 <gmtime_r+0xec>
 80a5d0c:	2464      	movs	r4, #100	; 0x64
 80a5d0e:	fbb0 f2f4 	udiv	r2, r0, r4
 80a5d12:	fb04 0212 	mls	r2, r4, r2, r0
 80a5d16:	b94a      	cbnz	r2, 80a5d2c <gmtime_r+0x100>
 80a5d18:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80a5d1c:	fbb0 f4f2 	udiv	r4, r0, r2
 80a5d20:	fb02 0014 	mls	r0, r2, r4, r0
 80a5d24:	fab0 f280 	clz	r2, r0
 80a5d28:	0952      	lsrs	r2, r2, #5
 80a5d2a:	e000      	b.n	80a5d2e <gmtime_r+0x102>
 80a5d2c:	2201      	movs	r2, #1
 80a5d2e:	333b      	adds	r3, #59	; 0x3b
 80a5d30:	441a      	add	r2, r3
 80a5d32:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 80a5d36:	2300      	movs	r3, #0
 80a5d38:	61ca      	str	r2, [r1, #28]
 80a5d3a:	614d      	str	r5, [r1, #20]
 80a5d3c:	610e      	str	r6, [r1, #16]
 80a5d3e:	60cf      	str	r7, [r1, #12]
 80a5d40:	620b      	str	r3, [r1, #32]
 80a5d42:	4608      	mov	r0, r1
 80a5d44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a5d46:	bf00      	nop
 80a5d48:	00015180 	.word	0x00015180
 80a5d4c:	00023ab1 	.word	0x00023ab1
 80a5d50:	fffdc54f 	.word	0xfffdc54f
 80a5d54:	00023ab0 	.word	0x00023ab0

080a5d58 <labs>:
 80a5d58:	2800      	cmp	r0, #0
 80a5d5a:	bfb8      	it	lt
 80a5d5c:	4240      	neglt	r0, r0
 80a5d5e:	4770      	bx	lr

080a5d60 <__env_lock>:
 80a5d60:	4770      	bx	lr

080a5d62 <__env_unlock>:
 80a5d62:	4770      	bx	lr

080a5d64 <dynalib_user>:
 80a5d64:	001d 080a 005d 080a 0089 080a 008d 080a     ....]...........
 80a5d74:	0000 0000 7274 6575 6600 6c61 6573 6d00     ....true.false.m
 80a5d84:	7861 7543 7272 6e65 4374 3e31 4e09 7765     axCurrentC1>.New
 80a5d94:	7320 7465 6f70 6e69 2074 6573 2074 7461      setpoint set at
 80a5da4:	0020 4120 706d 2e73 6d00 7861 7543 7272      . Amps..maxCurr
 80a5db4:	6e65 4374 3e32 4e09 7765 7320 7465 6f70     entC2>.New setpo
 80a5dc4:	6e69 2074 6573 2074 7461 0020 7041 7270     int set at .Appr
 80a5dd4:	786f 6d69 7461 2065 6f79 7275 6320 7261     oximate your car
 80a5de4:	2064 6f74 7420 6568 7220 6165 6564 2e72     d to the reader.
 80a5df4:	2e2e 4300 6168 6772 7265 0020 6f56 746c     ...Charger .Volt
 80a5e04:	6761 3a65 0020 6964 2064 6f6e 2074 6572     age: .did not re
 80a5e14:	6563 7669 2065 6e65 756f 6867 7620 6c6f     ceive enough vol
 80a5e24:	6174 6567 6420 7461 0061 7543 7272 6e65     tage data.Curren
 80a5e34:	3a74 0020 6964 2064 6f6e 2074 6572 6563     t: .did not rece
 80a5e44:	7669 2065 6e65 756f 6867 6320 7275 6572     ive enough curre
 80a5e54:	746e 6420 7461 0061 7246 7165 6575 636e     nt data.Frequenc
 80a5e64:	3a79 0020 6964 2064 6f6e 2074 6572 6563     y: .did not rece
 80a5e74:	7669 2065 6e65 756f 6867 6620 6572 7571     ive enough frequ
 80a5e84:	6e65 7963 6420 7461 0061 6f50 6577 3a72     ency data.Power:
 80a5e94:	0020 6964 2064 6f6e 2074 6572 6563 7669      .did not receiv
 80a5ea4:	2065 6e65 756f 6867 7020 776f 7265 6420     e enough power d
 80a5eb4:	7461 0061 6e45 7265 7967 203a 6400 6469     ata.Energy: .did
 80a5ec4:	6e20 746f 7220 6365 6965 6576 6520 6f6e      not receive eno
 80a5ed4:	6775 2068 6e65 7265 7967 6420 7461 0061     ugh energy data.
 80a5ee4:	6f6c 706f 6572 6461 093e 6553 6972 6c61     loopread>.Serial
 80a5ef4:	5220 6165 2064 7245 6f72 2172 3000 0030      Read Error!.00.
 80a5f04:	514d 5454 093e 6552 6563 7669 2065 6e65     MQTT>.Receive en
 80a5f14:	7265 7967 6d20 7465 7265 6420 7461 2061     ergy meter data 
 80a5f24:	7266 6d6f 6220 6f72 656b 2072 7461 203a     from broker at: 
 80a5f34:	7300 6375 6563 7373 7566 206c 7473 7261     .successful star
 80a5f44:	2074 656e 2077 6863 7261 6567 4800 4e41     t new charge.HAN
 80a5f54:	7665 6573 2f31 6870 746f 6e6f 6f43 766e     evse1/photonConv
 80a5f64:	7265 6574 0064 6863 7261 6567 2072 7369     erted.charger is
 80a5f74:	6620 6572 2c65 6220 7475 7920 756f 6120      free, but you a
 80a5f84:	726c 6165 7964 7320 6977 6570 2064 6874     lready swiped th
 80a5f94:	2065 6163 6472 6920 206e 6874 2065 616c     e card in the la
 80a5fa4:	7473 3220 2030 6573 0063 4148 654e 7376     st 20 sec.HANevs
 80a5fb4:	2f65 6870 746f 6e6f 6f43 766e 7265 6574     e/photonConverte
 80a5fc4:	0064 6863 7261 6567 2072 7369 6f20 6363     d.charger is occ
 80a5fd4:	7075 6569 2064 7962 6120 6f6e 6874 7265     upied by another
 80a5fe4:	7520 6573 0072 7573 6363 7365 6673 6c75      user.successful
 80a5ff4:	7320 6f74 2070 6863 7261 6567 7320 7365      stop charge ses
 80a6004:	6973 6e6f 7900 756f 6a20 7375 2074 7473     sion.you just st
 80a6014:	7261 6574 2064 2061 6863 7261 6567 6120     arted a charge a
 80a6024:	2074 6874 7369 6320 6168 6772 7265 202c     t this charger, 
 80a6034:	7562 2074 6168 2064 6e61 746f 6568 2072     but had another 
 80a6044:	6f63 736e 6365 7475 7669 2065 4652 4449     consecutive RFID
 80a6054:	7320 6977 6570 7720 7469 6968 206e 3032      swipe within 20
 80a6064:	7320 6365 7900 756f 6120 6572 6120 726c      sec.you are alr
 80a6074:	6165 7964 6320 6168 6772 6e69 2067 7461     eady charging at
 80a6084:	6120 6f6e 6874 7265 6320 6168 6772 7265      another charger
 80a6094:	7300 6375 6563 7373 7566 206c 4652 4449     .successful RFID
 80a60a4:	7220 6165 2c64 6220 7475 7920 756f 6120      read, but you a
 80a60b4:	6572 6e20 746f 6920 206e 6874 2065 7375     re not in the us
 80a60c4:	7265 696c 7473 4500 5252 524f 203a 6e75     erlist.ERROR: un
 80a60d4:	6e6b 776f 206e 6373 6e65 7261 6f69 3900     known scenario.9
 80a60e4:	0039 4148 654e 7376 3165 612f 6c6c 776f     9.HANevse1/allow
 80a60f4:	7355 7265 4d00 5451 3e54 4309 6c61 626c     User.MQTT>.Callb
 80a6104:	6361 206b 7566 636e 6974 6e6f 6920 2073     ack function is 
 80a6114:	6163 6c6c 6465 6120 3a74 0020 514d 5454     called at: .MQTT
 80a6124:	093e 6f43 6e6e 6365 6974 676e 7420 206f     >.Connecting to 
 80a6134:	514d 5454 6220 6f72 656b 2e72 2e2e 4500     MQTT broker....E
 80a6144:	2d56 6850 746f 6e6f 742d 7365 3174 4d00     V-Photon-test1.M
 80a6154:	5451 3e54 4309 6e6f 656e 7463 6465 4d00     QTT>.Connected.M
 80a6164:	5451 3e54 4309 6e6f 656e 7463 6f69 206e     QTT>.Connection 
 80a6174:	6166 6c69 6465 4d00 5451 3e54 5209 7465     failed.MQTT>.Ret
 80a6184:	7972 6e69 2e67 2e2e 4c00 7461 7365 5374     rying....LatestS
 80a6194:	6174 7472 6954 656d 093e 2c00 0020 6954     tartTime>.., .Ti
 80a61a4:	656d 756f 2074 6863 7261 6567 0072 6f4e     meout charger.No
 80a61b4:	4920 0044 3156 5600 0032 3356 4900 0031      ID.V1.V2.V3.I1.
 80a61c4:	3249 4900 0033 0050 0046 7355 7265 4449     I2.I3.P.F.UserID
 80a61d4:	5300 636f 656b 4974 0044 6c25 0075 4148     .SocketID.%lu.HA
 80a61e4:	654e 7376 2f65 6870 746f 6e6f 654d 7361     Nevse/photonMeas
 80a61f4:	7275 0065 6c25 0064 3020 7200 6165 4364     ure.%ld. 0.readC
 80a6204:	7261 3e64 5509 4449 7420 6761 6f20 206e     ard>.UID tag on 
 80a6214:	6863 7261 6567 3172 003a 6843 7261 6567     charger1:.Charge
 80a6224:	0072 7355 7265 6449 5300 6174 7472 6954     r.UserId.StartTi
 80a6234:	656d 4800 4e41 7665 6573 752f 6470 7461     me.HANevse/updat
 80a6244:	5565 6573 0072 6572 6461 6143 6472 093e     eUser.readCard>.
 80a6254:	4955 2044 6174 2067 6e6f 6320 6168 6772     UID tag on charg
 80a6264:	7265 3a32 7300 6977 6374 5468 7365 0074     er2:.switchTest.
 80a6274:	616d 4378 7275 6572 746e 3143 6d00 7861     maxCurrentC1.max
 80a6284:	7543 7272 6e65 4374 0032 6572 6573 4f74     CurrentC2.resetO
 80a6294:	696c 656d 0078 7270 676f 6f4d 6564 6c4f     limex.progModeOl
 80a62a4:	786d 7200 7365 7465 6150 7472 6369 006c     mx.resetParticl.
 80a62b4:	6957 6966 6953 6e67 6c61 6900 696e 5274     WifiSignal.initR
 80a62c4:	4946 0044 7563 7272 6e65 5374 7274 5300     FID.currentStr.S
 80a62d4:	6168 6572 6156 0072 6f54 6970 0063 7262     hareVar.Topic.br
 80a62e4:	6b6f 7265 682e 7669 6d65 2e71 6f63 006d     oker.hivemq.com.
 80a62f4:	0400 514d 5454 0004 4d06 4951 6473 0370     ..MQTT...MQIsdp.

080a6304 <_ZTVSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
 80a630c:	1cb1 080a 1cb7 080a 20cf 080a 1cc5 080a     ......... ......
 80a631c:	1cb3 080a                                   ....

080a6320 <_ZTV9TCPClient>:
	...
 80a6328:	0d4d 080a 0d81 080a 1c6d 080a 1c87 080a     M.......m.......
 80a6338:	1dcd 080a 1d37 080a 1d09 080a 1caf 080a     ....7...........
 80a6348:	1e79 080a 20e9 080a 1d6b 080a 1e45 080a     y.... ..k...E...
 80a6358:	1fc7 080a 2019 080a 1c97 080a 1f8b 080a     ..... ..........
 80a6368:	1ce9 080a 6977 6972 676e 5400 5043 6c43     ....wiring.TCPCl
 80a6378:	6569 746e 7320 636f 656b 3d74 7825 6200     ient socket=%x.b
 80a6388:	7561 0064 6553 6972 6c61 5500 4253 6553     aud.Serial.USBSe
 80a6398:	6972 6c61 0031 7974 6570 7000 7261 6d61     rial1.type.param
 80a63a8:	6300 646d 6900 0064 6e68 0064 7473 6d72     .cmd.id.hnd.strm
 80a63b8:	6600 6c69 0074 766c 006c 6461 4864 6e61     .filt.lvl.addHan
 80a63c8:	6c64 7265 7200 6d65 766f 4865 6e61 6c64     dler.removeHandl
 80a63d8:	7265 6500 756e 486d 6e61 6c64 7265 0073     er.enumHandlers.
 80a63e8:	534a 4e4f 7453 6572 6d61 6f4c 4867 6e61     JSONStreamLogHan
 80a63f8:	6c64 7265 6100 7070 2500 3130 7530 0020     dler.app.%010u .
 80a6408:	205d 2800 3a29 0020 5b20 6300 646f 2065     ] .(): . [.code 
 80a6418:	203d 2500 0069 6564 6174 6c69 2073 203d     = .%i.details = 
 80a6428:	0d00 000a 0066 6e6c 6600 006e 6f63 6564     ....f.ln.fn.code
 80a6438:	6400 7465 6961 006c 6f6e 656e 7400 6172     .detail.none.tra
 80a6448:	6563 6900 666e 006f 6177 6e72 6500 7272     ce.info.warn.err
 80a6458:	726f 7000 6e61 6369 6100 6c6c 2500 302b     or.panic.all.%+0
 80a6468:	6433 253a 3230 0075 5925 252d 2d6d 6425     3d:%02u.%Y-%m-%d
 80a6478:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
 80a6488:	6d69 0065                                   ime.

080a648c <_ZTV9IPAddress>:
	...
 80a6494:	2963 080a 2953 080a 2955 080a               c)..S)..U)..

080a64a0 <_ZTV9USBSerial>:
	...
 80a64a8:	2a49 080a 2a99 080a 2aa7 080a 245d 080a     I*...*...*..]$..
 80a64b8:	2a85 080a 2a4b 080a 2a61 080a 2a93 080a     .*..K*..a*...*..
 80a64c8:	2a77 080a 2a45 080a                         w*..E*..

080a64d0 <_ZTV11USARTSerial>:
	...
 80a64d8:	2bb1 080a 2c01 080a 2c0f 080a 245d 080a     .+...,...,..]$..
 80a64e8:	2bc5 080a 2be7 080a 2bd3 080a 2bfb 080a     .+...+...+...+..
 80a64f8:	2bb3 080a 2bb7 080a                         .+...+..

080a6500 <_ZTV7TwoWire>:
	...
 80a6508:	2cf5 080a 2d3f 080a 2d17 080a 2cf7 080a     .,..?-...-...,..
 80a6518:	2d1f 080a 2d27 080a 2d2f 080a 2d37 080a     .-..'-../-..7-..

080a6528 <_ZTVN5spark9WiFiClassE>:
	...
 80a6530:	2e6d 080a 2e63 080a 2e59 080a 2dc9 080a     m...c...Y....-..
 80a6540:	2521 080a 2e4d 080a 2e41 080a 2e39 080a     !%..M...A...9...
 80a6550:	2e2f 080a 2e25 080a 2de1 080a               /...%....-..

080a655c <_ZTV10WiFiSignal>:
	...
 80a6564:	2d79 080a 2dd3 080a 2d7b 080a 2ea9 080a     y-...-..{-......
 80a6574:	2d81 080a 2e79 080a 2da5 080a               .-..y....-..

080a6580 <_ZTVN5spark12NetworkClassE>:
	...
 80a6588:	2f95 080a 2f9f 080a 2fa9 080a 2fb3 080a     ./.../.../.../..
 80a6598:	2fbd 080a 2fc9 080a 2fd5 080a 2fe1 080a     ./.../.../.../..
 80a65a8:	2fe9 080a 2ff3 080a 2ffd 080a               ./.../.../..

080a65b4 <_ZSt7nothrow>:
	...

080a65b5 <day_name.4723>:
 80a65b5:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
 80a65c5:	6972 6153 4a74                                   riSat

080a65ca <mon_name.4724>:
 80a65ca:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
 80a65da:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
 80a65ea:	4476 6365 2e25 7333 2520 332e 2573 6433     vDec%.3s %.3s%3d
 80a65fa:	2520 322e 3a64 2e25 6432 253a 322e 2064      %.2d:%.2d:%.2d 
 80a660a:	6425 000a                                   %d..

080a660e <_ctype_>:
 80a660e:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 80a661e:	2020 2020 2020 2020 2020 2020 2020 2020                     
 80a662e:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 80a663e:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 80a664e:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 80a665e:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 80a666e:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 80a667e:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 80a668e:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

080a6710 <__sf_fake_stdin>:
	...

080a6730 <__sf_fake_stdout>:
	...

080a6750 <__sf_fake_stderr>:
	...
 80a6770:	0043 0000                                   C...

080a6774 <__month_lengths>:
 80a6774:	001f 0000 001c 0000 001f 0000 001e 0000     ................
 80a6784:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 80a6794:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 80a67a4:	001f 0000 001d 0000 001f 0000 001e 0000     ................
 80a67b4:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 80a67c4:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 80a67d4:	7325 2e25 642a 2500 2573 2e30 642a 2b00     %s%.*d.%s%0.*d.+
 80a67e4:	2d00 2500 6432 2500 322e 2f64 2e25 6432     .-.%2d.%.2d/%.2d
 80a67f4:	252f 322e 0064 2d59 6d25 252d 0064 2a2e     /%.2d.Y-%m-%d..*
 80a6804:	0075 2e25 6433 2500 6c6c 0064 2e25 6432     u.%.3d.%lld.%.2d
 80a6814:	253a 322e 3a64 2e25 6432 2500 302b 6c33     :%.2d:%.2d.%+03l
 80a6824:	2564 322e 646c 4c00 5f43 4954 454d 4a00     d%.2ld.LC_TIME.J
 80a6834:	6e61 4600 6265 4d00 7261 4100 7270 4d00     an.Feb.Mar.Apr.M
 80a6844:	7961 4a00 6e75 4a00 6c75 4100 6775 5300     ay.Jun.Jul.Aug.S
 80a6854:	7065 4f00 7463 4e00 766f 4400 6365 4a00     ep.Oct.Nov.Dec.J
 80a6864:	6e61 6175 7972 4600 6265 7572 7261 0079     anuary.February.
 80a6874:	614d 6372 0068 7041 6972 006c 754a 656e     March.April.June
 80a6884:	4a00 6c75 0079 7541 7567 7473 5300 7065     .July.August.Sep
 80a6894:	6574 626d 7265 4f00 7463 626f 7265 4e00     tember.October.N
 80a68a4:	766f 6d65 6562 0072 6544 6563 626d 7265     ovember.December
 80a68b4:	5300 6e75 4d00 6e6f 5400 6575 5700 6465     .Sun.Mon.Tue.Wed
 80a68c4:	5400 7568 4600 6972 5300 7461 5300 6e75     .Thu.Fri.Sat.Sun
 80a68d4:	6164 0079 6f4d 646e 7961 5400 6575 6473     day.Monday.Tuesd
 80a68e4:	7961 5700 6465 656e 6473 7961 5400 7568     ay.Wednesday.Thu
 80a68f4:	7372 6164 0079 7246 6469 7961 5300 7461     rsday.Friday.Sat
 80a6904:	7275 6164 0079 4825 253a 3a4d 5325 2500     urday.%H:%M:%S.%
 80a6914:	2f6d 6425 252f 0079 6125 2520 2062 6525     m/%d/%y.%a %b %e
 80a6924:	2520 3a48 4d25 253a 2053 5925 4100 004d      %H:%M:%S %Y.AM.
 80a6934:	4d50 2500 2061 6225 2520 2065 4825 253a     PM.%a %b %e %H:%
 80a6944:	3a4d 5325 2520 205a 5925 2500 3a49 4d25     M:%S %Z %Y.%I:%M
 80a6954:	253a 2053 7025 0000                         :%S %p..

080a695c <_C_time_locale>:
 80a695c:	6833 080a 6837 080a 683b 080a 683f 080a     3h..7h..;h..?h..
 80a696c:	6843 080a 6847 080a 684b 080a 684f 080a     Ch..Gh..Kh..Oh..
 80a697c:	6853 080a 6857 080a 685b 080a 685f 080a     Sh..Wh..[h.._h..
 80a698c:	6863 080a 686b 080a 6874 080a 687a 080a     ch..kh..th..zh..
 80a699c:	6843 080a 6880 080a 6885 080a 688a 080a     Ch...h...h...h..
 80a69ac:	6891 080a 689b 080a 68a3 080a 68ac 080a     .h...h...h...h..
 80a69bc:	68b5 080a 68b9 080a 68bd 080a 68c1 080a     .h...h...h...h..
 80a69cc:	68c5 080a 68c9 080a 68cd 080a 68d1 080a     .h...h...h...h..
 80a69dc:	68d8 080a 68df 080a 68e7 080a 68f1 080a     .h...h...h...h..
 80a69ec:	68fa 080a 6901 080a 690a 080a 6913 080a     .h...i...i...i..
 80a69fc:	691c 080a 6931 080a 6934 080a 6937 080a     .i..1i..4i..7i..
 80a6a0c:	6863 080a 686b 080a 6874 080a 687a 080a     ch..kh..th..zh..
 80a6a1c:	6843 080a 6880 080a 6885 080a 688a 080a     Ch...h...h...h..
 80a6a2c:	6891 080a 689b 080a 68a3 080a 68ac 080a     .h...h...h...h..
 80a6a3c:	63aa 080a 694f 080a 619e 080a 619e 080a     .c..Oi...a...a..
 80a6a4c:	619e 080a 619e 080a 619e 080a 5a54 4700     .a...a...a..TZ.G
 80a6a5c:	544d 2500 3031 5e5b 2d30 2c39 2d2b 255d     MT.%10[^0-9,+-]%
 80a6a6c:	006e 254d 7568 6e25 252e 7568 6e25 252e     n.M%hu%n.%hu%n.%
 80a6a7c:	7568 6e25 2f00 6825 2575 3a6e 6825 2575     hu%n./%hu%n:%hu%
 80a6a8c:	3a6e 6825 2575 006e                         n:%hu%n.

080a6a94 <link_const_variable_data_end>:
 80a6a94:	080a0a45 	.word	0x080a0a45
 80a6a98:	080a0d49 	.word	0x080a0d49
 80a6a9c:	080a157f 	.word	0x080a157f
 80a6aa0:	080a1583 	.word	0x080a1583
 80a6aa4:	080a1b91 	.word	0x080a1b91
 80a6aa8:	080a252d 	.word	0x080a252d
 80a6aac:	080a274d 	.word	0x080a274d
 80a6ab0:	080a27a5 	.word	0x080a27a5
 80a6ab4:	080a2f81 	.word	0x080a2f81
 80a6ab8:	080a3065 	.word	0x080a3065
 80a6abc:	080a3171 	.word	0x080a3171
 80a6ac0:	080a3265 	.word	0x080a3265
 80a6ac4:	080a32e9 	.word	0x080a32e9
 80a6ac8:	080a33ad 	.word	0x080a33ad
 80a6acc:	080a3471 	.word	0x080a3471
