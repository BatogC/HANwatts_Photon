
d:/UNI_S5/new_particle_code/2020_photon_code/target/1.5.2/photon/2020_photon_code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000a9a0  080a0020  080a0020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  080aa9c0  080aa9c0  0001a9c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  40024000  080aa9c8  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000100  20000000  080aa9cc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000005e4  20000100  20000100  00040100  2**2
                  ALLOC
  7 .module_info_suffix 00000028  080aaacc  080aaacc  0003aacc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  080aaaf4  080aaaf4  0003aaf4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   000e88a2  00000000  00000000  0003aaf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00013327  00000000  00000000  0012339a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00020244  00000000  00000000  001366c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00002b08  00000000  00000000  00156905  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00004768  00000000  00000000  0015940d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00029660  00000000  00000000  0015db75  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0002c6d2  00000000  00000000  001871d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000b2298  00000000  00000000  001b38a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000e588  00000000  00000000  00265b40  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0020:	4809      	ldr	r0, [pc, #36]	; (80a0048 <module_user_pre_init+0x28>)
 80a0022:	490a      	ldr	r1, [pc, #40]	; (80a004c <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0024:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0026:	4288      	cmp	r0, r1
 80a0028:	d005      	beq.n	80a0036 <module_user_pre_init+0x16>
 80a002a:	4a09      	ldr	r2, [pc, #36]	; (80a0050 <module_user_pre_init+0x30>)
 80a002c:	4282      	cmp	r2, r0
 80a002e:	d002      	beq.n	80a0036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a0030:	1a12      	subs	r2, r2, r0
 80a0032:	f006 fe0d 	bl	80a6c50 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0036:	4807      	ldr	r0, [pc, #28]	; (80a0054 <module_user_pre_init+0x34>)
 80a0038:	4a07      	ldr	r2, [pc, #28]	; (80a0058 <module_user_pre_init+0x38>)
 80a003a:	2100      	movs	r1, #0
 80a003c:	1a12      	subs	r2, r2, r0
 80a003e:	f006 fe12 	bl	80a6c66 <memset>
    return &link_heap_start;
}
 80a0042:	4806      	ldr	r0, [pc, #24]	; (80a005c <module_user_pre_init+0x3c>)
 80a0044:	bd08      	pop	{r3, pc}
 80a0046:	bf00      	nop
 80a0048:	20000000 	.word	0x20000000
 80a004c:	080aa9cc 	.word	0x080aa9cc
 80a0050:	20000100 	.word	0x20000100
 80a0054:	20000100 	.word	0x20000100
 80a0058:	200006e4 	.word	0x200006e4
 80a005c:	200006e4 	.word	0x200006e4

080a0060 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a0060:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a0062:	f004 fcd3 	bl	80a4a0c <module_user_init_hook>
 80a0066:	4b07      	ldr	r3, [pc, #28]	; (80a0084 <module_user_init+0x24>)
 80a0068:	4c07      	ldr	r4, [pc, #28]	; (80a0088 <module_user_init+0x28>)
 80a006a:	461e      	mov	r6, r3
 80a006c:	1ae4      	subs	r4, r4, r3
 80a006e:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0070:	2500      	movs	r5, #0
 80a0072:	42a5      	cmp	r5, r4
 80a0074:	d004      	beq.n	80a0080 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0076:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a007a:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a007c:	3501      	adds	r5, #1
 80a007e:	e7f8      	b.n	80a0072 <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0080:	bd70      	pop	{r4, r5, r6, pc}
 80a0082:	bf00      	nop
 80a0084:	080aa984 	.word	0x080aa984
 80a0088:	080aa9c0 	.word	0x080aa9c0

080a008c <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a008c:	f001 ba66 	b.w	80a155c <setup>

080a0090 <module_user_loop>:
}

void module_user_loop() {
 80a0090:	b508      	push	{r3, lr}
    loop();
 80a0092:	f001 f89f 	bl	80a11d4 <loop>
    _post_loop();
}
 80a0096:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a009a:	f004 bc79 	b.w	80a4990 <_post_loop>

080a009e <_Znwj>:
 80a009e:	f003 bc3f 	b.w	80a3920 <malloc>

080a00a2 <_Znaj>:
	return malloc(size);
}

void *operator new[](size_t size)
{
	return malloc(size);
 80a00a2:	f003 bc3d 	b.w	80a3920 <malloc>

080a00a6 <_ZdlPv>:
 80a00a6:	f003 bc43 	b.w	80a3930 <free>

080a00aa <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
 80a00aa:	f003 bc41 	b.w	80a3930 <free>

080a00ae <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00ae:	7800      	ldrb	r0, [r0, #0]
 80a00b0:	fab0 f080 	clz	r0, r0
 80a00b4:	0940      	lsrs	r0, r0, #5
 80a00b6:	4770      	bx	lr

080a00b8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00b8:	2301      	movs	r3, #1
 80a00ba:	7003      	strb	r3, [r0, #0]
 80a00bc:	4770      	bx	lr

080a00be <_ZN10CloudClass22update_string_variableEPKc18Spark_Data_TypeDefPKvPv>:

    static const void* update_string_variable(const char* name, Spark_Data_TypeDef type, const void* var, void* reserved)
    {
        const String* s = (const String*)var;
        return s->c_str();
    }
 80a00be:	6810      	ldr	r0, [r2, #0]
 80a00c0:	4770      	bx	lr

080a00c2 <_Z11resetOlimex6String>:
    while (*pointer++) {
      out.concat(in[index++]);
      }
}

int resetOlimex(String input) {
 80a00c2:	b508      	push	{r3, lr}
    digitalWrite(RESET_OLIMEX, LOW);
 80a00c4:	2100      	movs	r1, #0
 80a00c6:	2004      	movs	r0, #4
 80a00c8:	f005 f8db 	bl	80a5282 <digitalWrite>
    delay(500);
 80a00cc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a00d0:	f004 fc0c 	bl	80a48ec <delay>
    digitalWrite(RESET_OLIMEX, HIGH);
 80a00d4:	2101      	movs	r1, #1
 80a00d6:	2004      	movs	r0, #4
 80a00d8:	f005 f8d3 	bl	80a5282 <digitalWrite>
    return 1;
}
 80a00dc:	2001      	movs	r0, #1
 80a00de:	bd08      	pop	{r3, pc}

080a00e0 <_Z12progModeOlmx6String>:

int resetParticl(String input) {
    System.reset();
}

int progModeOlmx(String input) {
 80a00e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    digitalWrite(WAKEUP_OLIMEX, HIGH);
 80a00e2:	2101      	movs	r1, #1
 80a00e4:	2002      	movs	r0, #2
 80a00e6:	f005 f8cc 	bl	80a5282 <digitalWrite>
    delay(500);
 80a00ea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a00ee:	f004 fbfd 	bl	80a48ec <delay>
    resetOlimex("");
 80a00f2:	490b      	ldr	r1, [pc, #44]	; (80a0120 <_Z12progModeOlmx6String+0x40>)
 80a00f4:	4668      	mov	r0, sp
 80a00f6:	f004 f834 	bl	80a4162 <_ZN6StringC1EPK19__FlashStringHelper>
 80a00fa:	4668      	mov	r0, sp
 80a00fc:	f7ff ffe1 	bl	80a00c2 <_Z11resetOlimex6String>
 80a0100:	4668      	mov	r0, sp
 80a0102:	f003 ffe7 	bl	80a40d4 <_ZN6StringD1Ev>
    delay(500);
 80a0106:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a010a:	f004 fbef 	bl	80a48ec <delay>
    digitalWrite(WAKEUP_OLIMEX, LOW);
 80a010e:	2100      	movs	r1, #0
 80a0110:	2002      	movs	r0, #2
 80a0112:	f005 f8b6 	bl	80a5282 <digitalWrite>
    return 1;
}
 80a0116:	2001      	movs	r0, #1
 80a0118:	b005      	add	sp, #20
 80a011a:	f85d fb04 	ldr.w	pc, [sp], #4
 80a011e:	bf00      	nop
 80a0120:	080a9f53 	.word	0x080a9f53

080a0124 <_Z10WifiSignal6String>:
    delay(500);
    digitalWrite(RESET_OLIMEX, HIGH);
    return 1;
}

int WifiSignal(String input) {
 80a0124:	b500      	push	{lr}
 80a0126:	b08b      	sub	sp, #44	; 0x2c
    return WiFi.RSSI();
 80a0128:	4904      	ldr	r1, [pc, #16]	; (80a013c <_Z10WifiSignal6String+0x18>)
 80a012a:	a801      	add	r0, sp, #4
 80a012c:	f004 ffac 	bl	80a5088 <_ZN5spark9WiFiClass4RSSIEv>
 80a0130:	a801      	add	r0, sp, #4
 80a0132:	f004 ff87 	bl	80a5044 <_ZNK10WiFiSignalcvaEv>
}
 80a0136:	b00b      	add	sp, #44	; 0x2c
 80a0138:	f85d fb04 	ldr.w	pc, [sp], #4
 80a013c:	200004d4 	.word	0x200004d4

080a0140 <_Z12resetParticl6String>:

int resetParticl(String input) {
 80a0140:	b508      	push	{r3, lr}
    System.reset();
 80a0142:	f003 fc7f 	bl	80a3a44 <_ZN11SystemClass5resetEv>
}
 80a0146:	bd08      	pop	{r3, pc}

080a0148 <_Z10switchTest6String>:
    }
    
    return number;
}

int switchTest(String valueString) {
 80a0148:	b538      	push	{r3, r4, r5, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 80a014a:	490d      	ldr	r1, [pc, #52]	; (80a0180 <_Z10switchTest6String+0x38>)
 80a014c:	4605      	mov	r5, r0
 80a014e:	f004 f925 	bl	80a439c <_ZNK6String6equalsEPKc>
    if (valueString == "true") {
 80a0152:	4604      	mov	r4, r0
 80a0154:	b130      	cbz	r0, 80a0164 <_Z10switchTest6String+0x1c>
        client.disconnect();
 80a0156:	480b      	ldr	r0, [pc, #44]	; (80a0184 <_Z10switchTest6String+0x3c>)
 80a0158:	f002 f901 	bl	80a235e <_ZN4MQTT10disconnectEv>
        TESTCASE = true;
 80a015c:	4b0a      	ldr	r3, [pc, #40]	; (80a0188 <_Z10switchTest6String+0x40>)
 80a015e:	2001      	movs	r0, #1
 80a0160:	7018      	strb	r0, [r3, #0]
        return 1;
 80a0162:	bd38      	pop	{r3, r4, r5, pc}
 80a0164:	4909      	ldr	r1, [pc, #36]	; (80a018c <_Z10switchTest6String+0x44>)
 80a0166:	4628      	mov	r0, r5
 80a0168:	f004 f918 	bl	80a439c <_ZNK6String6equalsEPKc>
    }
    if (valueString == "false") {
 80a016c:	b130      	cbz	r0, 80a017c <_Z10switchTest6String+0x34>
        client.disconnect();
 80a016e:	4805      	ldr	r0, [pc, #20]	; (80a0184 <_Z10switchTest6String+0x3c>)
 80a0170:	f002 f8f5 	bl	80a235e <_ZN4MQTT10disconnectEv>
        TESTCASE = false;
 80a0174:	4b04      	ldr	r3, [pc, #16]	; (80a0188 <_Z10switchTest6String+0x40>)
        return 0;
 80a0176:	4620      	mov	r0, r4
        TESTCASE = true;
        return 1;
    }
    if (valueString == "false") {
        client.disconnect();
        TESTCASE = false;
 80a0178:	701c      	strb	r4, [r3, #0]
        return 0;
 80a017a:	bd38      	pop	{r3, r4, r5, pc}
    }
}
 80a017c:	bd38      	pop	{r3, r4, r5, pc}
 80a017e:	bf00      	nop
 80a0180:	080a9ac4 	.word	0x080a9ac4
 80a0184:	200002d0 	.word	0x200002d0
 80a0188:	2000000c 	.word	0x2000000c
 80a018c:	080a9ac9 	.word	0x080a9ac9

080a0190 <_Z12maxCurrentC16String>:

int maxCurrentC1(String setPointStr) {
 80a0190:	b570      	push	{r4, r5, r6, lr}
 80a0192:	b08a      	sub	sp, #40	; 0x28
    unsigned int setPoint = setPointStr.toInt();
 80a0194:	f004 f93d 	bl	80a4412 <_ZNK6String5toIntEv>
 80a0198:	4605      	mov	r5, r0
    byte olimexMessage[4] = {0xFE,1,setPoint,0xFF};
 80a019a:	23fe      	movs	r3, #254	; 0xfe
 80a019c:	f88d 3004 	strb.w	r3, [sp, #4]
 80a01a0:	23ff      	movs	r3, #255	; 0xff
 80a01a2:	f88d 3007 	strb.w	r3, [sp, #7]
    if (!TESTCASE) {
 80a01a6:	4b18      	ldr	r3, [pc, #96]	; (80a0208 <_Z12maxCurrentC16String+0x78>)
    }
}

int maxCurrentC1(String setPointStr) {
    unsigned int setPoint = setPointStr.toInt();
    byte olimexMessage[4] = {0xFE,1,setPoint,0xFF};
 80a01a8:	2001      	movs	r0, #1
    if (!TESTCASE) {
 80a01aa:	781c      	ldrb	r4, [r3, #0]
    }
}

int maxCurrentC1(String setPointStr) {
    unsigned int setPoint = setPointStr.toInt();
    byte olimexMessage[4] = {0xFE,1,setPoint,0xFF};
 80a01ac:	f88d 0005 	strb.w	r0, [sp, #5]
 80a01b0:	f88d 5006 	strb.w	r5, [sp, #6]
    if (!TESTCASE) {
 80a01b4:	bb2c      	cbnz	r4, 80a0202 <_Z12maxCurrentC16String+0x72>
        Serial1.write(olimexMessage,4);
 80a01b6:	f004 fe13 	bl	80a4de0 <_Z22__fetch_global_Serial1v>
 80a01ba:	6803      	ldr	r3, [r0, #0]
 80a01bc:	2204      	movs	r2, #4
 80a01be:	68db      	ldr	r3, [r3, #12]
 80a01c0:	eb0d 0102 	add.w	r1, sp, r2
 80a01c4:	4798      	blx	r3
        DEBUGPORT.println("maxCurrentC1>\tNew setpoint set at "+String(setPoint)+" Amps.");
 80a01c6:	f004 fd55 	bl	80a4c74 <_Z16_fetch_usbserialv>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a01ca:	4910      	ldr	r1, [pc, #64]	; (80a020c <_Z12maxCurrentC16String+0x7c>)
 80a01cc:	4606      	mov	r6, r0
 80a01ce:	a806      	add	r0, sp, #24
 80a01d0:	f003 ffc7 	bl	80a4162 <_ZN6StringC1EPK19__FlashStringHelper>
 80a01d4:	220a      	movs	r2, #10
 80a01d6:	4629      	mov	r1, r5
 80a01d8:	a802      	add	r0, sp, #8
 80a01da:	f004 f84a 	bl	80a4272 <_ZN6StringC1Ejh>
 80a01de:	a902      	add	r1, sp, #8
 80a01e0:	a806      	add	r0, sp, #24
 80a01e2:	f004 f8bd 	bl	80a4360 <_ZplRK15StringSumHelperRK6String>
 80a01e6:	490a      	ldr	r1, [pc, #40]	; (80a0210 <_Z12maxCurrentC16String+0x80>)
 80a01e8:	f004 f8c6 	bl	80a4378 <_ZplRK15StringSumHelperPKc>
 80a01ec:	6801      	ldr	r1, [r0, #0]
 80a01ee:	4630      	mov	r0, r6
 80a01f0:	f004 f94d 	bl	80a448e <_ZN5Print7printlnEPKc>
 80a01f4:	a802      	add	r0, sp, #8
 80a01f6:	f003 ff6d 	bl	80a40d4 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80a01fa:	a806      	add	r0, sp, #24
 80a01fc:	f003 ff6a 	bl	80a40d4 <_ZN6StringD1Ev>
        return 0;
 80a0200:	4620      	mov	r0, r4
    }
    return 1;
}
 80a0202:	b00a      	add	sp, #40	; 0x28
 80a0204:	bd70      	pop	{r4, r5, r6, pc}
 80a0206:	bf00      	nop
 80a0208:	2000000c 	.word	0x2000000c
 80a020c:	080a9acf 	.word	0x080a9acf
 80a0210:	080a9af2 	.word	0x080a9af2

080a0214 <_Z12maxCurrentC26String>:

int maxCurrentC2(String setPointStr) {
 80a0214:	b570      	push	{r4, r5, r6, lr}
 80a0216:	b08a      	sub	sp, #40	; 0x28
    unsigned int setPoint = setPointStr.toInt();
 80a0218:	f004 f8fb 	bl	80a4412 <_ZNK6String5toIntEv>
    byte olimexMessage[4] = {0xFE,2,setPoint,0xFF};
 80a021c:	23fe      	movs	r3, #254	; 0xfe
 80a021e:	f88d 3004 	strb.w	r3, [sp, #4]
 80a0222:	2302      	movs	r3, #2
 80a0224:	f88d 3005 	strb.w	r3, [sp, #5]
 80a0228:	23ff      	movs	r3, #255	; 0xff
 80a022a:	f88d 3007 	strb.w	r3, [sp, #7]
    if (!TESTCASE) {
 80a022e:	4b18      	ldr	r3, [pc, #96]	; (80a0290 <_Z12maxCurrentC26String+0x7c>)
    }
    return 1;
}

int maxCurrentC2(String setPointStr) {
    unsigned int setPoint = setPointStr.toInt();
 80a0230:	4605      	mov	r5, r0
    byte olimexMessage[4] = {0xFE,2,setPoint,0xFF};
    if (!TESTCASE) {
 80a0232:	781c      	ldrb	r4, [r3, #0]
    return 1;
}

int maxCurrentC2(String setPointStr) {
    unsigned int setPoint = setPointStr.toInt();
    byte olimexMessage[4] = {0xFE,2,setPoint,0xFF};
 80a0234:	f88d 0006 	strb.w	r0, [sp, #6]
    if (!TESTCASE) {
 80a0238:	bb34      	cbnz	r4, 80a0288 <_Z12maxCurrentC26String+0x74>
        Serial1.write(olimexMessage,4);
 80a023a:	f004 fdd1 	bl	80a4de0 <_Z22__fetch_global_Serial1v>
 80a023e:	6803      	ldr	r3, [r0, #0]
 80a0240:	2204      	movs	r2, #4
 80a0242:	68db      	ldr	r3, [r3, #12]
 80a0244:	eb0d 0102 	add.w	r1, sp, r2
 80a0248:	4798      	blx	r3
        DEBUGPORT.println("maxCurrentC2>\tNew setpoint set at "+String(setPoint)+" Amps.");
 80a024a:	f004 fd13 	bl	80a4c74 <_Z16_fetch_usbserialv>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a024e:	4911      	ldr	r1, [pc, #68]	; (80a0294 <_Z12maxCurrentC26String+0x80>)
 80a0250:	4606      	mov	r6, r0
 80a0252:	a806      	add	r0, sp, #24
 80a0254:	f003 ff85 	bl	80a4162 <_ZN6StringC1EPK19__FlashStringHelper>
 80a0258:	220a      	movs	r2, #10
 80a025a:	4629      	mov	r1, r5
 80a025c:	a802      	add	r0, sp, #8
 80a025e:	f004 f808 	bl	80a4272 <_ZN6StringC1Ejh>
 80a0262:	a902      	add	r1, sp, #8
 80a0264:	a806      	add	r0, sp, #24
 80a0266:	f004 f87b 	bl	80a4360 <_ZplRK15StringSumHelperRK6String>
 80a026a:	490b      	ldr	r1, [pc, #44]	; (80a0298 <_Z12maxCurrentC26String+0x84>)
 80a026c:	f004 f884 	bl	80a4378 <_ZplRK15StringSumHelperPKc>
 80a0270:	6801      	ldr	r1, [r0, #0]
 80a0272:	4630      	mov	r0, r6
 80a0274:	f004 f90b 	bl	80a448e <_ZN5Print7printlnEPKc>
 80a0278:	a802      	add	r0, sp, #8
 80a027a:	f003 ff2b 	bl	80a40d4 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80a027e:	a806      	add	r0, sp, #24
 80a0280:	f003 ff28 	bl	80a40d4 <_ZN6StringD1Ev>
        return 0;
 80a0284:	4620      	mov	r0, r4
 80a0286:	e000      	b.n	80a028a <_Z12maxCurrentC26String+0x76>
    }
    return 1;
 80a0288:	2001      	movs	r0, #1
}
 80a028a:	b00a      	add	sp, #40	; 0x28
 80a028c:	bd70      	pop	{r4, r5, r6, pc}
 80a028e:	bf00      	nop
 80a0290:	2000000c 	.word	0x2000000c
 80a0294:	080a9af9 	.word	0x080a9af9
 80a0298:	080a9af2 	.word	0x080a9af2

080a029c <_ZN16JsonWriterStaticILj512EED1Ev>:
 * variable.
 *
 * @param BUFFER_SIZE The size of the buffer to reserve.
 */
template <size_t BUFFER_SIZE>
class JsonWriterStatic : public JsonWriter {
 80a029c:	b510      	push	{r4, lr}
 80a029e:	4604      	mov	r4, r0
 80a02a0:	4b02      	ldr	r3, [pc, #8]	; (80a02ac <_ZN16JsonWriterStaticILj512EED1Ev+0x10>)
 80a02a2:	6003      	str	r3, [r0, #0]
 80a02a4:	f002 fbae 	bl	80a2a04 <_ZN10JsonWriterD1Ev>
 80a02a8:	4620      	mov	r0, r4
 80a02aa:	bd10      	pop	{r4, pc}
 80a02ac:	080a9abc 	.word	0x080a9abc

080a02b0 <_ZN16JsonWriterStaticILj512EED0Ev>:
 80a02b0:	b510      	push	{r4, lr}
 80a02b2:	4604      	mov	r4, r0
 80a02b4:	f7ff fff2 	bl	80a029c <_ZN16JsonWriterStaticILj512EED1Ev>
 80a02b8:	4620      	mov	r0, r4
 80a02ba:	f44f 710c 	mov.w	r1, #560	; 0x230
 80a02be:	f005 f873 	bl	80a53a8 <_ZdlPvj>
 80a02c2:	4620      	mov	r0, r4
 80a02c4:	bd10      	pop	{r4, pc}

080a02c6 <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  ~SPIClass() = default;
 80a02c6:	b510      	push	{r4, lr}
 80a02c8:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a02ca:	6880      	ldr	r0, [r0, #8]
 80a02cc:	b108      	cbz	r0, 80a02d2 <_ZN8SPIClassD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
 80a02ce:	f003 f931 	bl	80a3534 <os_mutex_recursive_destroy>
 80a02d2:	4620      	mov	r0, r4
 80a02d4:	bd10      	pop	{r4, pc}
	...

080a02d8 <_ZN10CloudClass9_variableIcEEbPKT_PK6StringRK17CloudVariableTypeIPKcvE.isra.7>:
        static_assert(sizeof(T)==0, "\n\nUse Particle.variable(\"name\", myVar, STRING); without & in front of myVar\n\n");
        return false;
    }

    template<typename T>
    static inline bool _variable(const T *varKey, const String *userVar, const CloudVariableTypeString& userVarType)
 80a02d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    {
        spark_variable_t extra = {};
 80a02da:	2300      	movs	r3, #0
 80a02dc:	9301      	str	r3, [sp, #4]
 80a02de:	9303      	str	r3, [sp, #12]
        extra.size = sizeof(extra);
 80a02e0:	230c      	movs	r3, #12
 80a02e2:	f8ad 3004 	strh.w	r3, [sp, #4]
        extra.update = update_string_variable;
 80a02e6:	4b04      	ldr	r3, [pc, #16]	; (80a02f8 <_ZN10CloudClass9_variableIcEEbPKT_PK6StringRK17CloudVariableTypeIPKcvE.isra.7+0x20>)
        return spark_variable(varKey, userVar, CloudVariableTypeString::TYPE_ID, &extra);
 80a02e8:	2204      	movs	r2, #4
    template<typename T>
    static inline bool _variable(const T *varKey, const String *userVar, const CloudVariableTypeString& userVarType)
    {
        spark_variable_t extra = {};
        extra.size = sizeof(extra);
        extra.update = update_string_variable;
 80a02ea:	9302      	str	r3, [sp, #8]
        return spark_variable(varKey, userVar, CloudVariableTypeString::TYPE_ID, &extra);
 80a02ec:	ab01      	add	r3, sp, #4
 80a02ee:	f003 fadf 	bl	80a38b0 <spark_variable>
    }
 80a02f2:	b005      	add	sp, #20
 80a02f4:	f85d fb04 	ldr.w	pc, [sp], #4
 80a02f8:	080a00bf 	.word	0x080a00bf

080a02fc <_Z8initRFID6String>:
			break;
		}
	}
}

int initRFID(String input) {
 80a02fc:	b538      	push	{r3, r4, r5, lr}
    //additional config for debugging RFID readers
    pinMode(SS_PIN_CHARGER1, OUTPUT);
 80a02fe:	2101      	movs	r1, #1
 80a0300:	200b      	movs	r0, #11
 80a0302:	f004 ffad 	bl	80a5260 <pinMode>
	digitalWrite(SS_PIN_CHARGER1, HIGH);
 80a0306:	2101      	movs	r1, #1
 80a0308:	200b      	movs	r0, #11
 80a030a:	f004 ffba 	bl	80a5282 <digitalWrite>

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a030e:	4d20      	ldr	r5, [pc, #128]	; (80a0390 <_Z8initRFID6String+0x94>)
	pinMode(SS_PIN_CHARGER2, OUTPUT);
 80a0310:	2101      	movs	r1, #1
 80a0312:	200c      	movs	r0, #12
 80a0314:	f004 ffa4 	bl	80a5260 <pinMode>
	digitalWrite(SS_PIN_CHARGER2, HIGH);
 80a0318:	2101      	movs	r1, #1
 80a031a:	200c      	movs	r0, #12
 80a031c:	f004 ffb1 	bl	80a5282 <digitalWrite>
 80a0320:	6829      	ldr	r1, [r5, #0]
 80a0322:	f011 0401 	ands.w	r4, r1, #1
 80a0326:	d10f      	bne.n	80a0348 <_Z8initRFID6String+0x4c>
 80a0328:	4628      	mov	r0, r5
 80a032a:	f7ff fec0 	bl	80a00ae <__cxa_guard_acquire>
 80a032e:	b158      	cbz	r0, 80a0348 <_Z8initRFID6String+0x4c>
 80a0330:	4621      	mov	r1, r4
 80a0332:	4818      	ldr	r0, [pc, #96]	; (80a0394 <_Z8initRFID6String+0x98>)
 80a0334:	f003 fb4a 	bl	80a39cc <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a0338:	4628      	mov	r0, r5
 80a033a:	f7ff febd 	bl	80a00b8 <__cxa_guard_release>
 80a033e:	4a16      	ldr	r2, [pc, #88]	; (80a0398 <_Z8initRFID6String+0x9c>)
 80a0340:	4916      	ldr	r1, [pc, #88]	; (80a039c <_Z8initRFID6String+0xa0>)
 80a0342:	4814      	ldr	r0, [pc, #80]	; (80a0394 <_Z8initRFID6String+0x98>)
 80a0344:	f005 f822 	bl	80a538c <__aeabi_atexit>

    void begin() {
        instance().begin();
    }
    void begin(uint16_t ss_pin) {
        instance().begin(ss_pin);
 80a0348:	2100      	movs	r1, #0
 80a034a:	4812      	ldr	r0, [pc, #72]	; (80a0394 <_Z8initRFID6String+0x98>)
 80a034c:	f003 fb4d 	bl	80a39ea <_ZN8SPIClass5beginEt>
  
    SPI.begin(D0);      // Initiate  SPI bus
    //Particle.process();
    delay(50);
 80a0350:	2032      	movs	r0, #50	; 0x32
 80a0352:	f004 facb 	bl	80a48ec <delay>
    mfrc522_Charger1.PCD_Init();   // Initiate MFRC522
 80a0356:	4812      	ldr	r0, [pc, #72]	; (80a03a0 <_Z8initRFID6String+0xa4>)
 80a0358:	f001 fc08 	bl	80a1b6c <_ZN7MFRC5228PCD_InitEv>
    delay(500);
 80a035c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a0360:	f004 fac4 	bl	80a48ec <delay>
    mfrc522_Charger2.PCD_Init();   // Initiate MFRC522
 80a0364:	480f      	ldr	r0, [pc, #60]	; (80a03a4 <_Z8initRFID6String+0xa8>)
 80a0366:	f001 fc01 	bl	80a1b6c <_ZN7MFRC5228PCD_InitEv>
    ////mfrc522_Charger1.PCD_SetAntennaGain(mfrc522.RxGain_max);
    mfrc522_Charger1.PCD_SetAntennaGain(mfrc522_Charger1.RxGain_max);
 80a036a:	2170      	movs	r1, #112	; 0x70
 80a036c:	480c      	ldr	r0, [pc, #48]	; (80a03a0 <_Z8initRFID6String+0xa4>)
 80a036e:	f001 fc38 	bl	80a1be2 <_ZN7MFRC52218PCD_SetAntennaGainEh>
    mfrc522_Charger2.PCD_SetAntennaGain(mfrc522_Charger2.RxGain_max);
 80a0372:	2170      	movs	r1, #112	; 0x70
 80a0374:	480b      	ldr	r0, [pc, #44]	; (80a03a4 <_Z8initRFID6String+0xa8>)
 80a0376:	f001 fc34 	bl	80a1be2 <_ZN7MFRC52218PCD_SetAntennaGainEh>
    
    DEBUGPORT.println("Approximate your card to the reader...");
 80a037a:	f004 fc7b 	bl	80a4c74 <_Z16_fetch_usbserialv>
 80a037e:	490a      	ldr	r1, [pc, #40]	; (80a03a8 <_Z8initRFID6String+0xac>)
 80a0380:	f004 f885 	bl	80a448e <_ZN5Print7printlnEPKc>
    DEBUGPORT.println();    
 80a0384:	f004 fc76 	bl	80a4c74 <_Z16_fetch_usbserialv>
 80a0388:	f004 f875 	bl	80a4476 <_ZN5Print7printlnEv>
    return 1;
}
 80a038c:	2001      	movs	r0, #1
 80a038e:	bd38      	pop	{r3, r4, r5, pc}
 80a0390:	20000104 	.word	0x20000104
 80a0394:	20000108 	.word	0x20000108
 80a0398:	20000100 	.word	0x20000100
 80a039c:	080a02c7 	.word	0x080a02c7
 80a03a0:	200003b0 	.word	0x200003b0
 80a03a4:	200003be 	.word	0x200003be
 80a03a8:	080a9b1c 	.word	0x080a9b1c

080a03ac <_ZN10CloudClass7processEv>:
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
 80a03ac:	b508      	push	{r3, lr}
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a03ae:	f003 f899 	bl	80a34e4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a03b2:	4b03      	ldr	r3, [pc, #12]	; (80a03c0 <_ZN10CloudClass7processEv+0x14>)
 80a03b4:	6018      	str	r0, [r3, #0]
    		application_checkin();
    		spark_process();
    }
 80a03b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
 80a03ba:	f003 ba89 	b.w	80a38d0 <spark_process>
 80a03be:	bf00      	nop
 80a03c0:	200004e4 	.word	0x200004e4

080a03c4 <_ZN10JsonWriter11startObjectEv>:
	void init();

	/**
	 * @brief Start a new JSON object. Make sure you finish it with finishObjectOrArray()
	 */
	bool startObject() { return startObjectOrArray('{', '}'); };
 80a03c4:	227d      	movs	r2, #125	; 0x7d
 80a03c6:	217b      	movs	r1, #123	; 0x7b
 80a03c8:	f002 bde3 	b.w	80a2f92 <_ZN10JsonWriter18startObjectOrArrayEcc>

080a03cc <_Z18bytesArrToFloatArrPcjPfj>:

    return output;
}

bool bytesArrToFloatArr(char * Arr, unsigned int ArrLen, float * OutputArr, unsigned int FloatLen)
{
 80a03cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a03ce:	0889      	lsrs	r1, r1, #2
    //FloatTriplet TriOutput;
    for(int i=0; (i<FloatLen) && (4*i+3 < ArrLen); i++)
 80a03d0:	2400      	movs	r4, #0
 80a03d2:	429c      	cmp	r4, r3
 80a03d4:	d018      	beq.n	80a0408 <_Z18bytesArrToFloatArrPcjPfj+0x3c>
 80a03d6:	428c      	cmp	r4, r1
 80a03d8:	f100 0004 	add.w	r0, r0, #4
 80a03dc:	d014      	beq.n	80a0408 <_Z18bytesArrToFloatArrPcjPfj+0x3c>
    {
        float output;

        *((unsigned char *)(&output) + 3) = (unsigned char) Arr[4*i+0];
 80a03de:	f810 5c04 	ldrb.w	r5, [r0, #-4]
 80a03e2:	f88d 5007 	strb.w	r5, [sp, #7]
        *((unsigned char *)(&output) + 2) = Arr[4*i+1];
 80a03e6:	f810 5c03 	ldrb.w	r5, [r0, #-3]
 80a03ea:	f88d 5006 	strb.w	r5, [sp, #6]
        *((unsigned char *)(&output) + 1) = Arr[4*i+2];
 80a03ee:	f810 5c02 	ldrb.w	r5, [r0, #-2]
 80a03f2:	f88d 5005 	strb.w	r5, [sp, #5]
        *((unsigned char *)(&output) + 0) = Arr[4*i+3];
 80a03f6:	f810 5c01 	ldrb.w	r5, [r0, #-1]
 80a03fa:	f88d 5004 	strb.w	r5, [sp, #4]
        
        OutputArr[i] = output;
 80a03fe:	9d01      	ldr	r5, [sp, #4]
 80a0400:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
}

bool bytesArrToFloatArr(char * Arr, unsigned int ArrLen, float * OutputArr, unsigned int FloatLen)
{
    //FloatTriplet TriOutput;
    for(int i=0; (i<FloatLen) && (4*i+3 < ArrLen); i++)
 80a0404:	3401      	adds	r4, #1
 80a0406:	e7e4      	b.n	80a03d2 <_Z18bytesArrToFloatArrPcjPfj+0x6>
        
        OutputArr[i] = output;
    }

    return true;
}
 80a0408:	2001      	movs	r0, #1
 80a040a:	b003      	add	sp, #12
 80a040c:	bd30      	pop	{r4, r5, pc}
	...

080a0410 <_Z11stringParsePci>:
    }

    return TriOutput;
}
*/
int stringParse(char * buf, int buflen){
 80a0410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0414:	4680      	mov	r8, r0
 80a0416:	b09f      	sub	sp, #124	; 0x7c
 80a0418:	460e      	mov	r6, r1
  String cmdValue;
 80a041a:	a806      	add	r0, sp, #24
 80a041c:	49ba      	ldr	r1, [pc, #744]	; (80a0708 <_Z11stringParsePci+0x2f8>)
 80a041e:	f003 fea0 	bl	80a4162 <_ZN6StringC1EPK19__FlashStringHelper>
 80a0422:	4647      	mov	r7, r8
 80a0424:	f108 0402 	add.w	r4, r8, #2
  int Charger=0;
 80a0428:	2500      	movs	r5, #0
  for (int i=0; i<buflen; i++){
 80a042a:	ebc8 0307 	rsb	r3, r8, r7
 80a042e:	429e      	cmp	r6, r3
 80a0430:	f340 81ea 	ble.w	80a0808 <_Z11stringParsePci+0x3f8>
    if(buf[i]==0x0F && i+2>=buflen) //error check?
 80a0434:	783b      	ldrb	r3, [r7, #0]
 80a0436:	2b0f      	cmp	r3, #15
 80a0438:	d108      	bne.n	80a044c <_Z11stringParsePci+0x3c>
 80a043a:	ebc8 0304 	rsb	r3, r8, r4
 80a043e:	429e      	cmp	r6, r3
 80a0440:	dc04      	bgt.n	80a044c <_Z11stringParsePci+0x3c>
    {
      DEBUGPORT.println("E");
 80a0442:	f004 fc17 	bl	80a4c74 <_Z16_fetch_usbserialv>
 80a0446:	49b1      	ldr	r1, [pc, #708]	; (80a070c <_Z11stringParsePci+0x2fc>)
 80a0448:	f004 f821 	bl	80a448e <_ZN5Print7printlnEPKc>
    }
    if((buf[i]==0x0F || buf[i]==0x0E) && i+2<buflen) //we detect a command-character and the next two characters exists
 80a044c:	f817 3b01 	ldrb.w	r3, [r7], #1
 80a0450:	f1a3 020e 	sub.w	r2, r3, #14
 80a0454:	2a01      	cmp	r2, #1
 80a0456:	f200 81d5 	bhi.w	80a0804 <_Z11stringParsePci+0x3f4>
 80a045a:	ebc8 0204 	rsb	r2, r8, r4
 80a045e:	4296      	cmp	r6, r2
 80a0460:	f340 81d0 	ble.w	80a0804 <_Z11stringParsePci+0x3f4>
      {
        Charger=1;  
      }
      else
      {
        Charger=2;
 80a0464:	2b0f      	cmp	r3, #15
 80a0466:	bf0c      	ite	eq
 80a0468:	2501      	moveq	r5, #1
 80a046a:	2502      	movne	r5, #2
      }
      DEBUGPORT.print("Charger "+String(Charger)+": ");
 80a046c:	f004 fc02 	bl	80a4c74 <_Z16_fetch_usbserialv>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a0470:	49a7      	ldr	r1, [pc, #668]	; (80a0710 <_Z11stringParsePci+0x300>)
 80a0472:	4681      	mov	r9, r0
 80a0474:	a81a      	add	r0, sp, #104	; 0x68
 80a0476:	f003 fe74 	bl	80a4162 <_ZN6StringC1EPK19__FlashStringHelper>
 80a047a:	220a      	movs	r2, #10
 80a047c:	4629      	mov	r1, r5
 80a047e:	a816      	add	r0, sp, #88	; 0x58
 80a0480:	f003 fee4 	bl	80a424c <_ZN6StringC1Eih>
 80a0484:	a916      	add	r1, sp, #88	; 0x58
 80a0486:	a81a      	add	r0, sp, #104	; 0x68
 80a0488:	f003 ff6a 	bl	80a4360 <_ZplRK15StringSumHelperRK6String>
 80a048c:	49a1      	ldr	r1, [pc, #644]	; (80a0714 <_Z11stringParsePci+0x304>)
 80a048e:	f003 ff73 	bl	80a4378 <_ZplRK15StringSumHelperPKc>
 80a0492:	6801      	ldr	r1, [r0, #0]
 80a0494:	4648      	mov	r0, r9
 80a0496:	f003 ffe7 	bl	80a4468 <_ZN5Print5printEPKc>
 80a049a:	a816      	add	r0, sp, #88	; 0x58
 80a049c:	f003 fe1a 	bl	80a40d4 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80a04a0:	a81a      	add	r0, sp, #104	; 0x68
 80a04a2:	f003 fe17 	bl	80a40d4 <_ZN6StringD1Ev>
      String measurements;
 80a04a6:	4998      	ldr	r1, [pc, #608]	; (80a0708 <_Z11stringParsePci+0x2f8>)
 80a04a8:	a80a      	add	r0, sp, #40	; 0x28
 80a04aa:	f003 fe5a 	bl	80a4162 <_ZN6StringC1EPK19__FlashStringHelper>
      switch (buf[i+1])
 80a04ae:	783b      	ldrb	r3, [r7, #0]
 80a04b0:	3b01      	subs	r3, #1
 80a04b2:	2b05      	cmp	r3, #5
 80a04b4:	f200 81a3 	bhi.w	80a07fe <_Z11stringParsePci+0x3ee>
 80a04b8:	e8df f013 	tbh	[pc, r3, lsl #1]
 80a04bc:	00150006 	.word	0x00150006
 80a04c0:	00ab0086 	.word	0x00ab0086
 80a04c4:	015200fe 	.word	0x015200fe
      {
        case 1:
          //Phase Voltage
          if(buflen>4)
 80a04c8:	2e04      	cmp	r6, #4
 80a04ca:	dd08      	ble.n	80a04de <_Z11stringParsePci+0xce>
          {
              //Voltage[Charger-1] = bytesToFloat(buf[i+2], buf[i+3], buf[i+4], buf[i+5]);
              float VoltageArr[3];
              if(bytesArrToFloatArr(&buf[i+2], 12, VoltageArr,3))
 80a04cc:	2303      	movs	r3, #3
 80a04ce:	aa03      	add	r2, sp, #12
 80a04d0:	210c      	movs	r1, #12
 80a04d2:	4620      	mov	r0, r4
 80a04d4:	f7ff ff7a 	bl	80a03cc <_Z18bytesArrToFloatArrPcjPfj>
 80a04d8:	f8df 926c 	ldr.w	r9, [pc, #620]	; 80a0748 <_Z11stringParsePci+0x338>
 80a04dc:	e14b      	b.n	80a0776 <_Z11stringParsePci+0x366>
              }
              DEBUGPORT.print("Voltage: "+String(PhaseVoltage[Charger-1][0],4)+" "+String(PhaseVoltage[Charger-1][1],4)+" "+String(PhaseVoltage[Charger-1][2],4));
          }
          else
          {
              DEBUGPORT.print("did not receive enough voltage data");
 80a04de:	f004 fbc9 	bl	80a4c74 <_Z16_fetch_usbserialv>
 80a04e2:	498d      	ldr	r1, [pc, #564]	; (80a0718 <_Z11stringParsePci+0x308>)
 80a04e4:	e10d      	b.n	80a0702 <_Z11stringParsePci+0x2f2>
          }
          break;
        case 2:
          //Current
          if(buflen>12) //(buflen>4)
 80a04e6:	2e0c      	cmp	r6, #12
 80a04e8:	dd6a      	ble.n	80a05c0 <_Z11stringParsePci+0x1b0>
          {
              //Current[Charger-1] = bytesToFloat(buf[i+2], buf[i+3], buf[i+4], buf[i+5]);
              float CurrentArr[3];
              if(bytesArrToFloatArr(&buf[i+2], 12, Current[Charger-1],3))
 80a04ea:	210c      	movs	r1, #12
 80a04ec:	f105 3aff 	add.w	sl, r5, #4294967295
 80a04f0:	fb01 fb0a 	mul.w	fp, r1, sl
 80a04f4:	4b89      	ldr	r3, [pc, #548]	; (80a071c <_Z11stringParsePci+0x30c>)
 80a04f6:	4620      	mov	r0, r4
 80a04f8:	eb03 090b 	add.w	r9, r3, fp
 80a04fc:	464a      	mov	r2, r9
 80a04fe:	2303      	movs	r3, #3
 80a0500:	f7ff ff64 	bl	80a03cc <_Z18bytesArrToFloatArrPcjPfj>
              {
                //Current[Charger-1] = (CurrentArr[0]+CurrentArr[1]+CurrentArr[2])/3;  
                //Current[Charger-1] = {CurrentArr[0],CurrentArr[1],CurrentArr[2]}
              }
              DEBUGPORT.print("Current: ");
 80a0504:	f004 fbb6 	bl	80a4c74 <_Z16_fetch_usbserialv>
 80a0508:	4985      	ldr	r1, [pc, #532]	; (80a0720 <_Z11stringParsePci+0x310>)
 80a050a:	f003 ffad 	bl	80a4468 <_ZN5Print5printEPKc>
              DEBUGPORT.print(Current[Charger-1][0],4);DEBUGPORT.print(" ");
 80a050e:	f004 fbb1 	bl	80a4c74 <_Z16_fetch_usbserialv>
 80a0512:	4b82      	ldr	r3, [pc, #520]	; (80a071c <_Z11stringParsePci+0x30c>)
 80a0514:	2204      	movs	r2, #4
 80a0516:	f853 100b 	ldr.w	r1, [r3, fp]
 80a051a:	f004 f89b 	bl	80a4654 <_ZN5Print5printEfi>
 80a051e:	f004 fba9 	bl	80a4c74 <_Z16_fetch_usbserialv>
 80a0522:	4980      	ldr	r1, [pc, #512]	; (80a0724 <_Z11stringParsePci+0x314>)
 80a0524:	f003 ffa0 	bl	80a4468 <_ZN5Print5printEPKc>
              DEBUGPORT.print(Current[Charger-1][1],4);DEBUGPORT.print(" ");
 80a0528:	f004 fba4 	bl	80a4c74 <_Z16_fetch_usbserialv>
 80a052c:	2204      	movs	r2, #4
 80a052e:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80a0532:	f004 f88f 	bl	80a4654 <_ZN5Print5printEfi>
 80a0536:	f004 fb9d 	bl	80a4c74 <_Z16_fetch_usbserialv>
 80a053a:	497a      	ldr	r1, [pc, #488]	; (80a0724 <_Z11stringParsePci+0x314>)
 80a053c:	f003 ff94 	bl	80a4468 <_ZN5Print5printEPKc>
              DEBUGPORT.println(Current[Charger-1][2],4);
 80a0540:	f004 fb98 	bl	80a4c74 <_Z16_fetch_usbserialv>
 80a0544:	2204      	movs	r2, #4
 80a0546:	f8d9 1008 	ldr.w	r1, [r9, #8]
 80a054a:	f004 f8a0 	bl	80a468e <_ZN5Print7printlnEfi>
              if((Current[Charger-1][0]+Current[Charger-1][1]+Current[Charger-1][2])<1)
 80a054e:	4b73      	ldr	r3, [pc, #460]	; (80a071c <_Z11stringParsePci+0x30c>)
 80a0550:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80a0554:	f853 000b 	ldr.w	r0, [r3, fp]
 80a0558:	f005 fd88 	bl	80a606c <__addsf3>
 80a055c:	f8d9 1008 	ldr.w	r1, [r9, #8]
 80a0560:	f005 fd84 	bl	80a606c <__addsf3>
 80a0564:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80a0568:	f006 f826 	bl	80a65b8 <__aeabi_fcmplt>
 80a056c:	f8df b1dc 	ldr.w	fp, [pc, #476]	; 80a074c <_Z11stringParsePci+0x33c>
 80a0570:	b128      	cbz	r0, 80a057e <_Z11stringParsePci+0x16e>
              {
                numberOfZeroReadings[Charger-1]++;
 80a0572:	f85b 302a 	ldr.w	r3, [fp, sl, lsl #2]
 80a0576:	3301      	adds	r3, #1
 80a0578:	f84b 302a 	str.w	r3, [fp, sl, lsl #2]
 80a057c:	e001      	b.n	80a0582 <_Z11stringParsePci+0x172>
              }
              else
              {
                  numberOfZeroReadings[Charger-1]=0;
 80a057e:	f84b 002a 	str.w	r0, [fp, sl, lsl #2]
 80a0582:	4a69      	ldr	r2, [pc, #420]	; (80a0728 <_Z11stringParsePci+0x318>)
      {
        Charger=1;  
      }
      else
      {
        Charger=2;
 80a0584:	2312      	movs	r3, #18
              {
                  numberOfZeroReadings[Charger-1]=0;
              }
              for(int i=18;i>=0;i--)
              {
                   CurrentList[i+1]= CurrentList[i];
 80a0586:	f852 1d04 	ldr.w	r1, [r2, #-4]!
              }
              else
              {
                  numberOfZeroReadings[Charger-1]=0;
              }
              for(int i=18;i>=0;i--)
 80a058a:	f113 33ff 	adds.w	r3, r3, #4294967295
              {
                   CurrentList[i+1]= CurrentList[i];
 80a058e:	6051      	str	r1, [r2, #4]
              }
              else
              {
                  numberOfZeroReadings[Charger-1]=0;
              }
              for(int i=18;i>=0;i--)
 80a0590:	d2f9      	bcs.n	80a0586 <_Z11stringParsePci+0x176>
              {
                   CurrentList[i+1]= CurrentList[i];
              }
              CurrentList[0]=(Current[0][0]+Current[0][1]+Current[0][2]);//numberOfZeroReadings[0];
 80a0592:	4b62      	ldr	r3, [pc, #392]	; (80a071c <_Z11stringParsePci+0x30c>)
 80a0594:	f8df a1b8 	ldr.w	sl, [pc, #440]	; 80a0750 <_Z11stringParsePci+0x340>
 80a0598:	f8d3 9008 	ldr.w	r9, [r3, #8]
 80a059c:	6859      	ldr	r1, [r3, #4]
 80a059e:	6818      	ldr	r0, [r3, #0]
 80a05a0:	f005 fd64 	bl	80a606c <__addsf3>
 80a05a4:	4649      	mov	r1, r9
 80a05a6:	f005 fd61 	bl	80a606c <__addsf3>
 80a05aa:	f8ca 0000 	str.w	r0, [sl]
              CurrentList[1]=numberOfZeroReadings[0];
 80a05ae:	f8db 0000 	ldr.w	r0, [fp]
 80a05b2:	f005 fe0f 	bl	80a61d4 <__aeabi_i2f>
              CurrentList[2]=Current[0][2];
 80a05b6:	f8ca 9008 	str.w	r9, [sl, #8]
              for(int i=18;i>=0;i--)
              {
                   CurrentList[i+1]= CurrentList[i];
              }
              CurrentList[0]=(Current[0][0]+Current[0][1]+Current[0][2]);//numberOfZeroReadings[0];
              CurrentList[1]=numberOfZeroReadings[0];
 80a05ba:	f8ca 0004 	str.w	r0, [sl, #4]
 80a05be:	e11e      	b.n	80a07fe <_Z11stringParsePci+0x3ee>
              CurrentList[2]=Current[0][2];
          }
          else
          {
              DEBUGPORT.print("did not receive enough current data");
 80a05c0:	f004 fb58 	bl	80a4c74 <_Z16_fetch_usbserialv>
 80a05c4:	4959      	ldr	r1, [pc, #356]	; (80a072c <_Z11stringParsePci+0x31c>)
 80a05c6:	e09c      	b.n	80a0702 <_Z11stringParsePci+0x2f2>
          }
          break;  
        case 3:
          //Frequency
          if(buflen>4)
 80a05c8:	2e04      	cmp	r6, #4
 80a05ca:	dd1e      	ble.n	80a060a <_Z11stringParsePci+0x1fa>
          {
              Frequency[0] = bytesToFloat(buf[i+2], buf[i+3], buf[i+4], buf[i+5]);
 80a05cc:	78a2      	ldrb	r2, [r4, #2]
 80a05ce:	7861      	ldrb	r1, [r4, #1]
 80a05d0:	78e3      	ldrb	r3, [r4, #3]

float bytesToFloat(unsigned char  b0, unsigned char  b1, unsigned char  b2, unsigned char  b3)
{
    float output;

    *((unsigned char *)(&output) + 3) = b0;
 80a05d2:	7820      	ldrb	r0, [r4, #0]
    *((unsigned char *)(&output) + 2) = b1;
    *((unsigned char *)(&output) + 1) = b2;
 80a05d4:	f88d 2069 	strb.w	r2, [sp, #105]	; 0x69
float bytesToFloat(unsigned char  b0, unsigned char  b1, unsigned char  b2, unsigned char  b3)
{
    float output;

    *((unsigned char *)(&output) + 3) = b0;
    *((unsigned char *)(&output) + 2) = b1;
 80a05d8:	f88d 106a 	strb.w	r1, [sp, #106]	; 0x6a

float bytesToFloat(unsigned char  b0, unsigned char  b1, unsigned char  b2, unsigned char  b3)
{
    float output;

    *((unsigned char *)(&output) + 3) = b0;
 80a05dc:	f88d 006b 	strb.w	r0, [sp, #107]	; 0x6b
    *((unsigned char *)(&output) + 2) = b1;
    *((unsigned char *)(&output) + 1) = b2;
    *((unsigned char *)(&output) + 0) = b3;
 80a05e0:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68

    return output;
 80a05e4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
          break;  
        case 3:
          //Frequency
          if(buflen>4)
          {
              Frequency[0] = bytesToFloat(buf[i+2], buf[i+3], buf[i+4], buf[i+5]);
 80a05e6:	f8df 916c 	ldr.w	r9, [pc, #364]	; 80a0754 <_Z11stringParsePci+0x344>
 80a05ea:	f8c9 3000 	str.w	r3, [r9]
              Frequency[1]=Frequency[0];
 80a05ee:	f8c9 3004 	str.w	r3, [r9, #4]
              DEBUGPORT.print("Frequency: ");
 80a05f2:	f004 fb3f 	bl	80a4c74 <_Z16_fetch_usbserialv>
 80a05f6:	494e      	ldr	r1, [pc, #312]	; (80a0730 <_Z11stringParsePci+0x320>)
 80a05f8:	f003 ff36 	bl	80a4468 <_ZN5Print5printEPKc>
              DEBUGPORT.print(Frequency[Charger-1],4);
 80a05fc:	f004 fb3a 	bl	80a4c74 <_Z16_fetch_usbserialv>
 80a0600:	1e6b      	subs	r3, r5, #1
 80a0602:	2204      	movs	r2, #4
 80a0604:	f859 1023 	ldr.w	r1, [r9, r3, lsl #2]
 80a0608:	e075      	b.n	80a06f6 <_Z11stringParsePci+0x2e6>
          }
          else
          {
              DEBUGPORT.print("did not receive enough frequency data");
 80a060a:	f004 fb33 	bl	80a4c74 <_Z16_fetch_usbserialv>
 80a060e:	4949      	ldr	r1, [pc, #292]	; (80a0734 <_Z11stringParsePci+0x324>)
 80a0610:	e077      	b.n	80a0702 <_Z11stringParsePci+0x2f2>
          }
          break;
        case 4:
          //Power
          if(buflen>4)
 80a0612:	2e04      	cmp	r6, #4
 80a0614:	dd4c      	ble.n	80a06b0 <_Z11stringParsePci+0x2a0>
          {
              //Power[Charger-1] = bytesToFloat(buf[i+2], buf[i+3], buf[i+4], buf[i+5]);
              float PowerArr[3];
              if(bytesArrToFloatArr(&buf[i+2], 12, Power[Charger-1],3))
 80a0616:	210c      	movs	r1, #12
 80a0618:	f105 39ff 	add.w	r9, r5, #4294967295
 80a061c:	fb01 f909 	mul.w	r9, r1, r9
 80a0620:	f8df b134 	ldr.w	fp, [pc, #308]	; 80a0758 <_Z11stringParsePci+0x348>
 80a0624:	2303      	movs	r3, #3
 80a0626:	eb0b 0a09 	add.w	sl, fp, r9
 80a062a:	4652      	mov	r2, sl
 80a062c:	4620      	mov	r0, r4
 80a062e:	f7ff fecd 	bl	80a03cc <_Z18bytesArrToFloatArrPcjPfj>
              {
                //Power[Charger-1] = {PowerArr[0],PowerArr[1],PowerArr[2]}
              }
              DEBUGPORT.print("Power: "+String(Power[Charger-1][0],4)+" "+String(Power[Charger-1][1],4)+" "+String(Power[Charger-1][2],4));              
 80a0632:	f004 fb1f 	bl	80a4c74 <_Z16_fetch_usbserialv>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a0636:	4940      	ldr	r1, [pc, #256]	; (80a0738 <_Z11stringParsePci+0x328>)
 80a0638:	9001      	str	r0, [sp, #4]
 80a063a:	a812      	add	r0, sp, #72	; 0x48
 80a063c:	f003 fd91 	bl	80a4162 <_ZN6StringC1EPK19__FlashStringHelper>
 80a0640:	2204      	movs	r2, #4
 80a0642:	f85b 1009 	ldr.w	r1, [fp, r9]
 80a0646:	a80e      	add	r0, sp, #56	; 0x38
 80a0648:	f003 fe3a 	bl	80a42c0 <_ZN6StringC1Efi>
 80a064c:	a90e      	add	r1, sp, #56	; 0x38
 80a064e:	a812      	add	r0, sp, #72	; 0x48
 80a0650:	f003 fe86 	bl	80a4360 <_ZplRK15StringSumHelperRK6String>
 80a0654:	4933      	ldr	r1, [pc, #204]	; (80a0724 <_Z11stringParsePci+0x314>)
 80a0656:	f003 fe8f 	bl	80a4378 <_ZplRK15StringSumHelperPKc>
 80a065a:	4681      	mov	r9, r0
 80a065c:	2204      	movs	r2, #4
 80a065e:	f8da 1004 	ldr.w	r1, [sl, #4]
 80a0662:	a816      	add	r0, sp, #88	; 0x58
 80a0664:	f003 fe2c 	bl	80a42c0 <_ZN6StringC1Efi>
 80a0668:	a916      	add	r1, sp, #88	; 0x58
 80a066a:	4648      	mov	r0, r9
 80a066c:	f003 fe78 	bl	80a4360 <_ZplRK15StringSumHelperRK6String>
 80a0670:	492c      	ldr	r1, [pc, #176]	; (80a0724 <_Z11stringParsePci+0x314>)
 80a0672:	f003 fe81 	bl	80a4378 <_ZplRK15StringSumHelperPKc>
 80a0676:	4681      	mov	r9, r0
 80a0678:	2204      	movs	r2, #4
 80a067a:	f8da 1008 	ldr.w	r1, [sl, #8]
 80a067e:	a81a      	add	r0, sp, #104	; 0x68
 80a0680:	f003 fe1e 	bl	80a42c0 <_ZN6StringC1Efi>
 80a0684:	a91a      	add	r1, sp, #104	; 0x68
 80a0686:	4648      	mov	r0, r9
 80a0688:	f003 fe6a 	bl	80a4360 <_ZplRK15StringSumHelperRK6String>
 80a068c:	9b01      	ldr	r3, [sp, #4]
 80a068e:	6801      	ldr	r1, [r0, #0]
 80a0690:	4618      	mov	r0, r3
 80a0692:	f003 fee9 	bl	80a4468 <_ZN5Print5printEPKc>
 80a0696:	a81a      	add	r0, sp, #104	; 0x68
 80a0698:	f003 fd1c 	bl	80a40d4 <_ZN6StringD1Ev>
 80a069c:	a816      	add	r0, sp, #88	; 0x58
 80a069e:	f003 fd19 	bl	80a40d4 <_ZN6StringD1Ev>
 80a06a2:	a80e      	add	r0, sp, #56	; 0x38
 80a06a4:	f003 fd16 	bl	80a40d4 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80a06a8:	a812      	add	r0, sp, #72	; 0x48
 80a06aa:	f003 fd13 	bl	80a40d4 <_ZN6StringD1Ev>
 80a06ae:	e0a6      	b.n	80a07fe <_Z11stringParsePci+0x3ee>
              //DEBUGPORT.print("Power: ");
              //DEBUGPORT.print(Power[Charger-1],4);
          }
          else
          {
              DEBUGPORT.print("did not receive enough power data");
 80a06b0:	f004 fae0 	bl	80a4c74 <_Z16_fetch_usbserialv>
 80a06b4:	4921      	ldr	r1, [pc, #132]	; (80a073c <_Z11stringParsePci+0x32c>)
 80a06b6:	e024      	b.n	80a0702 <_Z11stringParsePci+0x2f2>
          }
          break;
        case 5:
          //Energy
          if(buflen>4)
 80a06b8:	2e04      	cmp	r6, #4
 80a06ba:	dd1f      	ble.n	80a06fc <_Z11stringParsePci+0x2ec>
          {
              Energy[Charger-1] = bytesToFloat(buf[i+2], buf[i+3], buf[i+4], buf[i+5]);
 80a06bc:	78a2      	ldrb	r2, [r4, #2]
 80a06be:	7861      	ldrb	r1, [r4, #1]
 80a06c0:	78e3      	ldrb	r3, [r4, #3]

float bytesToFloat(unsigned char  b0, unsigned char  b1, unsigned char  b2, unsigned char  b3)
{
    float output;

    *((unsigned char *)(&output) + 3) = b0;
 80a06c2:	7820      	ldrb	r0, [r4, #0]
    *((unsigned char *)(&output) + 2) = b1;
    *((unsigned char *)(&output) + 1) = b2;
 80a06c4:	f88d 2069 	strb.w	r2, [sp, #105]	; 0x69
float bytesToFloat(unsigned char  b0, unsigned char  b1, unsigned char  b2, unsigned char  b3)
{
    float output;

    *((unsigned char *)(&output) + 3) = b0;
    *((unsigned char *)(&output) + 2) = b1;
 80a06c8:	f88d 106a 	strb.w	r1, [sp, #106]	; 0x6a

float bytesToFloat(unsigned char  b0, unsigned char  b1, unsigned char  b2, unsigned char  b3)
{
    float output;

    *((unsigned char *)(&output) + 3) = b0;
 80a06cc:	f88d 006b 	strb.w	r0, [sp, #107]	; 0x6b
    *((unsigned char *)(&output) + 2) = b1;
    *((unsigned char *)(&output) + 1) = b2;
    *((unsigned char *)(&output) + 0) = b3;
 80a06d0:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
          break;
        case 5:
          //Energy
          if(buflen>4)
          {
              Energy[Charger-1] = bytesToFloat(buf[i+2], buf[i+3], buf[i+4], buf[i+5]);
 80a06d4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80a06d6:	f8df 9084 	ldr.w	r9, [pc, #132]	; 80a075c <_Z11stringParsePci+0x34c>
 80a06da:	f105 3aff 	add.w	sl, r5, #4294967295
 80a06de:	f849 302a 	str.w	r3, [r9, sl, lsl #2]
              DEBUGPORT.print("Energy: ");
 80a06e2:	f004 fac7 	bl	80a4c74 <_Z16_fetch_usbserialv>
 80a06e6:	4916      	ldr	r1, [pc, #88]	; (80a0740 <_Z11stringParsePci+0x330>)
 80a06e8:	f003 febe 	bl	80a4468 <_ZN5Print5printEPKc>
              DEBUGPORT.print(Energy[Charger-1],4);
 80a06ec:	f004 fac2 	bl	80a4c74 <_Z16_fetch_usbserialv>
 80a06f0:	f859 102a 	ldr.w	r1, [r9, sl, lsl #2]
 80a06f4:	2204      	movs	r2, #4
 80a06f6:	f003 ffad 	bl	80a4654 <_ZN5Print5printEfi>
 80a06fa:	e080      	b.n	80a07fe <_Z11stringParsePci+0x3ee>
          }
          else
          {
              DEBUGPORT.print("did not receive enough energy data");
 80a06fc:	f004 faba 	bl	80a4c74 <_Z16_fetch_usbserialv>
 80a0700:	4910      	ldr	r1, [pc, #64]	; (80a0744 <_Z11stringParsePci+0x334>)
 80a0702:	f003 feb1 	bl	80a4468 <_ZN5Print5printEPKc>
 80a0706:	e07a      	b.n	80a07fe <_Z11stringParsePci+0x3ee>
 80a0708:	080a9f53 	.word	0x080a9f53
 80a070c:	080aa626 	.word	0x080aa626
 80a0710:	080a9b43 	.word	0x080a9b43
 80a0714:	080aa1a5 	.word	0x080aa1a5
 80a0718:	080a9b56 	.word	0x080a9b56
 80a071c:	20000368 	.word	0x20000368
 80a0720:	080a9b7a 	.word	0x080a9b7a
 80a0724:	080a9f55 	.word	0x080a9f55
 80a0728:	2000041c 	.word	0x2000041c
 80a072c:	080a9b84 	.word	0x080a9b84
 80a0730:	080a9ba8 	.word	0x080a9ba8
 80a0734:	080a9bb4 	.word	0x080a9bb4
 80a0738:	080a9bda 	.word	0x080a9bda
 80a073c:	080a9be2 	.word	0x080a9be2
 80a0740:	080a9c04 	.word	0x080a9c04
 80a0744:	080a9c0d 	.word	0x080a9c0d
 80a0748:	20000288 	.word	0x20000288
 80a074c:	20000114 	.word	0x20000114
 80a0750:	200003d0 	.word	0x200003d0
 80a0754:	200002b0 	.word	0x200002b0
 80a0758:	20000380 	.word	0x20000380
 80a075c:	20000398 	.word	0x20000398
          }
          break;
        case 6:
          //Line Voltage
          if(buflen>4)
 80a0760:	2e04      	cmp	r6, #4
 80a0762:	f77f aebc 	ble.w	80a04de <_Z11stringParsePci+0xce>
          {
              //Voltage[Charger-1] = bytesToFloat(buf[i+2], buf[i+3], buf[i+4], buf[i+5]);
              float VoltageArr[3];
              if(bytesArrToFloatArr(&buf[i+2], 12, VoltageArr,3))
 80a0766:	2303      	movs	r3, #3
 80a0768:	aa03      	add	r2, sp, #12
 80a076a:	210c      	movs	r1, #12
 80a076c:	4620      	mov	r0, r4
 80a076e:	f7ff fe2d 	bl	80a03cc <_Z18bytesArrToFloatArrPcjPfj>
 80a0772:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 80a0820 <_Z11stringParsePci+0x410>
 80a0776:	2800      	cmp	r0, #0
 80a0778:	d134      	bne.n	80a07e4 <_Z11stringParsePci+0x3d4>
                {
                    LineVoltage[Charger-1][i]=VoltageArr[i];
                }
                //Voltage[Charger-1] = {VoltageArr[0],VoltageArr[1],VoltageArr[2]};
              }
              DEBUGPORT.print("Voltage: "+String(LineVoltage[Charger-1][0],4)+" "+String(LineVoltage[Charger-1][1],4)+" "+String(LineVoltage[Charger-1][2],4));
 80a077a:	f004 fa7b 	bl	80a4c74 <_Z16_fetch_usbserialv>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a077e:	4926      	ldr	r1, [pc, #152]	; (80a0818 <_Z11stringParsePci+0x408>)
 80a0780:	4683      	mov	fp, r0
 80a0782:	a812      	add	r0, sp, #72	; 0x48
 80a0784:	f003 fced 	bl	80a4162 <_ZN6StringC1EPK19__FlashStringHelper>
 80a0788:	1e6a      	subs	r2, r5, #1
 80a078a:	230c      	movs	r3, #12
 80a078c:	4353      	muls	r3, r2
 80a078e:	a80e      	add	r0, sp, #56	; 0x38
 80a0790:	f859 1003 	ldr.w	r1, [r9, r3]
 80a0794:	2204      	movs	r2, #4
 80a0796:	eb09 0a03 	add.w	sl, r9, r3
 80a079a:	f003 fd91 	bl	80a42c0 <_ZN6StringC1Efi>
 80a079e:	a90e      	add	r1, sp, #56	; 0x38
 80a07a0:	a812      	add	r0, sp, #72	; 0x48
 80a07a2:	f003 fddd 	bl	80a4360 <_ZplRK15StringSumHelperRK6String>
 80a07a6:	491d      	ldr	r1, [pc, #116]	; (80a081c <_Z11stringParsePci+0x40c>)
 80a07a8:	f003 fde6 	bl	80a4378 <_ZplRK15StringSumHelperPKc>
 80a07ac:	4681      	mov	r9, r0
 80a07ae:	2204      	movs	r2, #4
 80a07b0:	f8da 1004 	ldr.w	r1, [sl, #4]
 80a07b4:	a816      	add	r0, sp, #88	; 0x58
 80a07b6:	f003 fd83 	bl	80a42c0 <_ZN6StringC1Efi>
 80a07ba:	a916      	add	r1, sp, #88	; 0x58
 80a07bc:	4648      	mov	r0, r9
 80a07be:	f003 fdcf 	bl	80a4360 <_ZplRK15StringSumHelperRK6String>
 80a07c2:	4916      	ldr	r1, [pc, #88]	; (80a081c <_Z11stringParsePci+0x40c>)
 80a07c4:	f003 fdd8 	bl	80a4378 <_ZplRK15StringSumHelperPKc>
 80a07c8:	4681      	mov	r9, r0
 80a07ca:	2204      	movs	r2, #4
 80a07cc:	f8da 1008 	ldr.w	r1, [sl, #8]
 80a07d0:	a81a      	add	r0, sp, #104	; 0x68
 80a07d2:	f003 fd75 	bl	80a42c0 <_ZN6StringC1Efi>
 80a07d6:	a91a      	add	r1, sp, #104	; 0x68
 80a07d8:	4648      	mov	r0, r9
 80a07da:	f003 fdc1 	bl	80a4360 <_ZplRK15StringSumHelperRK6String>
 80a07de:	6801      	ldr	r1, [r0, #0]
 80a07e0:	4658      	mov	r0, fp
 80a07e2:	e756      	b.n	80a0692 <_Z11stringParsePci+0x282>
              if(bytesArrToFloatArr(&buf[i+2], 12, VoltageArr,3))
              {
                //Current[Charger-1] = (CurrentArr[0]+CurrentArr[1]+CurrentArr[2])/3;  
                for(int i=0;i<3;i++)
                {
                    LineVoltage[Charger-1][i]=VoltageArr[i];
 80a07e4:	1e6a      	subs	r2, r5, #1
 80a07e6:	230c      	movs	r3, #12
 80a07e8:	4353      	muls	r3, r2
 80a07ea:	9903      	ldr	r1, [sp, #12]
 80a07ec:	eb09 0203 	add.w	r2, r9, r3
 80a07f0:	f849 1003 	str.w	r1, [r9, r3]
 80a07f4:	9b04      	ldr	r3, [sp, #16]
 80a07f6:	6053      	str	r3, [r2, #4]
 80a07f8:	9b05      	ldr	r3, [sp, #20]
 80a07fa:	6093      	str	r3, [r2, #8]
 80a07fc:	e7bd      	b.n	80a077a <_Z11stringParsePci+0x36a>
      else
      {
        Charger=2;
      }
      DEBUGPORT.print("Charger "+String(Charger)+": ");
      String measurements;
 80a07fe:	a80a      	add	r0, sp, #40	; 0x28
 80a0800:	f003 fc68 	bl	80a40d4 <_ZN6StringD1Ev>
 80a0804:	3401      	adds	r4, #1
}
*/
int stringParse(char * buf, int buflen){
  String cmdValue;
  int Charger=0;
  for (int i=0; i<buflen; i++){
 80a0806:	e610      	b.n	80a042a <_Z11stringParsePci+0x1a>

    return TriOutput;
}
*/
int stringParse(char * buf, int buflen){
  String cmdValue;
 80a0808:	a806      	add	r0, sp, #24
 80a080a:	f003 fc63 	bl	80a40d4 <_ZN6StringD1Ev>
  }
  //Test only
  //Current[0][0] = 3.0;
  //Current[1][0] = 4.0;
  return Charger;
}
 80a080e:	4628      	mov	r0, r5
 80a0810:	b01f      	add	sp, #124	; 0x7c
 80a0812:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a0816:	bf00      	nop
 80a0818:	080a9b4c 	.word	0x080a9b4c
 80a081c:	080a9f55 	.word	0x080a9f55
 80a0820:	200002b8 	.word	0x200002b8

080a0824 <_Z16readSerialOlimexv>:


int readSerialOlimex() {
 80a0824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  for(int k=0;k<10;k++){
  if (Serial1.available()) {
    input = Serial1.read();
    DEBUGPORT.print(input,HEX);
    DEBUGPORT.print(" ");
    if (bufpos<BUFSIZE)
 80a0828:	4c20      	ldr	r4, [pc, #128]	; (80a08ac <_Z16readSerialOlimexv+0x88>)

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a082a:	f002 fe5b 	bl	80a34e4 <HAL_Timer_Get_Milli_Seconds>
 80a082e:	4627      	mov	r7, r4
 80a0830:	250a      	movs	r5, #10
     char input;
  if (millis()>(lastUpload+RSTTIMEOUT)){
   // softReset();
  }
  for(int k=0;k<10;k++){
  if (Serial1.available()) {
 80a0832:	f004 fad5 	bl	80a4de0 <_Z22__fetch_global_Serial1v>
 80a0836:	6803      	ldr	r3, [r0, #0]
 80a0838:	691b      	ldr	r3, [r3, #16]
 80a083a:	4798      	blx	r3
 80a083c:	b388      	cbz	r0, 80a08a2 <_Z16readSerialOlimexv+0x7e>
    input = Serial1.read();
 80a083e:	f004 facf 	bl	80a4de0 <_Z22__fetch_global_Serial1v>
 80a0842:	6803      	ldr	r3, [r0, #0]
 80a0844:	695b      	ldr	r3, [r3, #20]
 80a0846:	4798      	blx	r3
 80a0848:	b2c6      	uxtb	r6, r0
    DEBUGPORT.print(input,HEX);
 80a084a:	f004 fa13 	bl	80a4c74 <_Z16_fetch_usbserialv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
 80a084e:	2210      	movs	r2, #16
 80a0850:	4631      	mov	r1, r6
 80a0852:	f003 fe26 	bl	80a44a2 <_ZN5Print11printNumberEmh>
    DEBUGPORT.print(" ");
 80a0856:	f004 fa0d 	bl	80a4c74 <_Z16_fetch_usbserialv>
 80a085a:	4915      	ldr	r1, [pc, #84]	; (80a08b0 <_Z16readSerialOlimexv+0x8c>)
 80a085c:	f003 fe04 	bl	80a4468 <_ZN5Print5printEPKc>
    if (bufpos<BUFSIZE)
 80a0860:	6823      	ldr	r3, [r4, #0]
 80a0862:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 80a0866:	da04      	bge.n	80a0872 <_Z16readSerialOlimexv+0x4e>
    {
        buff[bufpos] = input;
 80a0868:	4a12      	ldr	r2, [pc, #72]	; (80a08b4 <_Z16readSerialOlimexv+0x90>)
 80a086a:	54d6      	strb	r6, [r2, r3]
        bufpos++;    
 80a086c:	3301      	adds	r3, #1
 80a086e:	6023      	str	r3, [r4, #0]
 80a0870:	e006      	b.n	80a0880 <_Z16readSerialOlimexv+0x5c>
    }
    else
    {
        bufpos=0;
 80a0872:	2300      	movs	r3, #0
 80a0874:	6023      	str	r3, [r4, #0]
        DEBUGPORT.print("loopread>\tSerial Read Error!");
 80a0876:	f004 f9fd 	bl	80a4c74 <_Z16_fetch_usbserialv>
 80a087a:	490f      	ldr	r1, [pc, #60]	; (80a08b8 <_Z16readSerialOlimexv+0x94>)
 80a087c:	f003 fdf4 	bl	80a4468 <_ZN5Print5printEPKc>
    }
    if (input == '\n') { // we hebben een regel binnen, tot aan \n   //  0x0A
 80a0880:	2e0a      	cmp	r6, #10
 80a0882:	d10e      	bne.n	80a08a2 <_Z16readSerialOlimexv+0x7e>
      Charger = stringParse(buff, bufpos);
 80a0884:	6839      	ldr	r1, [r7, #0]
 80a0886:	480b      	ldr	r0, [pc, #44]	; (80a08b4 <_Z16readSerialOlimexv+0x90>)
 80a0888:	f7ff fdc2 	bl	80a0410 <_Z11stringParsePci>
      //Maak de buffer leeg
      for (int i=0; i<BUFSIZE; i++)
 80a088c:	2300      	movs	r3, #0
    {
        bufpos=0;
        DEBUGPORT.print("loopread>\tSerial Read Error!");
    }
    if (input == '\n') { // we hebben een regel binnen, tot aan \n   //  0x0A
      Charger = stringParse(buff, bufpos);
 80a088e:	4680      	mov	r8, r0
      //Maak de buffer leeg
      for (int i=0; i<BUFSIZE; i++)
      { buff[i] = 0;}
 80a0890:	4619      	mov	r1, r3
 80a0892:	4a08      	ldr	r2, [pc, #32]	; (80a08b4 <_Z16readSerialOlimexv+0x90>)
 80a0894:	5499      	strb	r1, [r3, r2]
        DEBUGPORT.print("loopread>\tSerial Read Error!");
    }
    if (input == '\n') { // we hebben een regel binnen, tot aan \n   //  0x0A
      Charger = stringParse(buff, bufpos);
      //Maak de buffer leeg
      for (int i=0; i<BUFSIZE; i++)
 80a0896:	3301      	adds	r3, #1
 80a0898:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 80a089c:	d1fa      	bne.n	80a0894 <_Z16readSerialOlimexv+0x70>
      { buff[i] = 0;}
      bufpos = 0;
 80a089e:	2300      	movs	r3, #0
 80a08a0:	603b      	str	r3, [r7, #0]
    int Charger;
     char input;
  if (millis()>(lastUpload+RSTTIMEOUT)){
   // softReset();
  }
  for(int k=0;k<10;k++){
 80a08a2:	3d01      	subs	r5, #1
 80a08a4:	d1c5      	bne.n	80a0832 <_Z16readSerialOlimexv+0xe>
      bufpos = 0;
    }
  }
}
return Charger;
 80a08a6:	4640      	mov	r0, r8
 80a08a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a08ac:	200003cc 	.word	0x200003cc
 80a08b0:	080a9f55 	.word	0x080a9f55
 80a08b4:	2000011c 	.word	0x2000011c
 80a08b8:	080a9c30 	.word	0x080a9c30

080a08bc <_Z13activeChargerv>:
    delay(100);
    digitalWrite(D7,LOW);
    return;
}

int activeCharger() {
 80a08bc:	b570      	push	{r4, r5, r6, lr}
    int number = 0;
    for (int i=0; i<3; i++) {
        if (Current[0][i] != 0.0) {
 80a08be:	4d13      	ldr	r5, [pc, #76]	; (80a090c <_Z13activeChargerv+0x50>)
 80a08c0:	2100      	movs	r1, #0
 80a08c2:	6828      	ldr	r0, [r5, #0]
 80a08c4:	f005 fe6e 	bl	80a65a4 <__aeabi_fcmpeq>
 80a08c8:	b160      	cbz	r0, 80a08e4 <_Z13activeChargerv+0x28>
 80a08ca:	2100      	movs	r1, #0
 80a08cc:	6868      	ldr	r0, [r5, #4]
 80a08ce:	f005 fe69 	bl	80a65a4 <__aeabi_fcmpeq>
 80a08d2:	b138      	cbz	r0, 80a08e4 <_Z13activeChargerv+0x28>
    digitalWrite(D7,LOW);
    return;
}

int activeCharger() {
    int number = 0;
 80a08d4:	2100      	movs	r1, #0
 80a08d6:	68a8      	ldr	r0, [r5, #8]
 80a08d8:	f005 fe64 	bl	80a65a4 <__aeabi_fcmpeq>
 80a08dc:	fab0 f480 	clz	r4, r0
 80a08e0:	0964      	lsrs	r4, r4, #5
 80a08e2:	e000      	b.n	80a08e6 <_Z13activeChargerv+0x2a>
    for (int i=0; i<3; i++) {
        if (Current[0][i] != 0.0) {
            number += 1;
 80a08e4:	2401      	movs	r4, #1
            break;
        }
    }
    
    for (int i=0; i<3; i++) {
        if (Current[1][i] != 0.0) {
 80a08e6:	2100      	movs	r1, #0
 80a08e8:	68e8      	ldr	r0, [r5, #12]
 80a08ea:	4e08      	ldr	r6, [pc, #32]	; (80a090c <_Z13activeChargerv+0x50>)
 80a08ec:	f005 fe5a 	bl	80a65a4 <__aeabi_fcmpeq>
 80a08f0:	b148      	cbz	r0, 80a0906 <_Z13activeChargerv+0x4a>
 80a08f2:	2100      	movs	r1, #0
 80a08f4:	6930      	ldr	r0, [r6, #16]
 80a08f6:	f005 fe55 	bl	80a65a4 <__aeabi_fcmpeq>
 80a08fa:	b120      	cbz	r0, 80a0906 <_Z13activeChargerv+0x4a>
 80a08fc:	2100      	movs	r1, #0
 80a08fe:	6970      	ldr	r0, [r6, #20]
 80a0900:	f005 fe50 	bl	80a65a4 <__aeabi_fcmpeq>
 80a0904:	b900      	cbnz	r0, 80a0908 <_Z13activeChargerv+0x4c>
            number += 2;
 80a0906:	3402      	adds	r4, #2
            break;
        }
    }
    
    return number;
}
 80a0908:	4620      	mov	r0, r4
 80a090a:	bd70      	pop	{r4, r5, r6, pc}
 80a090c:	20000368 	.word	0x20000368

080a0910 <_Z17maxCurrentC1_testi>:
        return 0;
    }
    return 1;
}

int maxCurrentC1_test(int setPoint) {
 80a0910:	b530      	push	{r4, r5, lr}
 80a0912:	4604      	mov	r4, r0
 80a0914:	b08b      	sub	sp, #44	; 0x2c
    byte olimexMessage[4] = {0xFE,1,setPoint,0xFF};
 80a0916:	23fe      	movs	r3, #254	; 0xfe
 80a0918:	f88d 3004 	strb.w	r3, [sp, #4]
 80a091c:	23ff      	movs	r3, #255	; 0xff
 80a091e:	f88d 3007 	strb.w	r3, [sp, #7]
    if (TESTCASE) {
 80a0922:	4b18      	ldr	r3, [pc, #96]	; (80a0984 <_Z17maxCurrentC1_testi+0x74>)
    }
    return 1;
}

int maxCurrentC1_test(int setPoint) {
    byte olimexMessage[4] = {0xFE,1,setPoint,0xFF};
 80a0924:	2001      	movs	r0, #1
    if (TESTCASE) {
 80a0926:	781b      	ldrb	r3, [r3, #0]
    }
    return 1;
}

int maxCurrentC1_test(int setPoint) {
    byte olimexMessage[4] = {0xFE,1,setPoint,0xFF};
 80a0928:	f88d 0005 	strb.w	r0, [sp, #5]
 80a092c:	f88d 4006 	strb.w	r4, [sp, #6]
    if (TESTCASE) {
 80a0930:	b32b      	cbz	r3, 80a097e <_Z17maxCurrentC1_testi+0x6e>
        Serial1.write(olimexMessage,4);
 80a0932:	f004 fa55 	bl	80a4de0 <_Z22__fetch_global_Serial1v>
 80a0936:	6803      	ldr	r3, [r0, #0]
 80a0938:	2204      	movs	r2, #4
 80a093a:	68db      	ldr	r3, [r3, #12]
 80a093c:	eb0d 0102 	add.w	r1, sp, r2
 80a0940:	4798      	blx	r3
        DEBUGPORT.println("maxCurrentC1>\tNew setpoint set at "+String(setPoint)+" Amps.");
 80a0942:	f004 f997 	bl	80a4c74 <_Z16_fetch_usbserialv>
 80a0946:	4910      	ldr	r1, [pc, #64]	; (80a0988 <_Z17maxCurrentC1_testi+0x78>)
 80a0948:	4605      	mov	r5, r0
 80a094a:	a806      	add	r0, sp, #24
 80a094c:	f003 fc09 	bl	80a4162 <_ZN6StringC1EPK19__FlashStringHelper>
 80a0950:	220a      	movs	r2, #10
 80a0952:	4621      	mov	r1, r4
 80a0954:	a802      	add	r0, sp, #8
 80a0956:	f003 fc79 	bl	80a424c <_ZN6StringC1Eih>
 80a095a:	a902      	add	r1, sp, #8
 80a095c:	a806      	add	r0, sp, #24
 80a095e:	f003 fcff 	bl	80a4360 <_ZplRK15StringSumHelperRK6String>
 80a0962:	490a      	ldr	r1, [pc, #40]	; (80a098c <_Z17maxCurrentC1_testi+0x7c>)
 80a0964:	f003 fd08 	bl	80a4378 <_ZplRK15StringSumHelperPKc>
 80a0968:	6801      	ldr	r1, [r0, #0]
 80a096a:	4628      	mov	r0, r5
 80a096c:	f003 fd8f 	bl	80a448e <_ZN5Print7printlnEPKc>
 80a0970:	a802      	add	r0, sp, #8
 80a0972:	f003 fbaf 	bl	80a40d4 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80a0976:	a806      	add	r0, sp, #24
 80a0978:	f003 fbac 	bl	80a40d4 <_ZN6StringD1Ev>
        return 0;
 80a097c:	2000      	movs	r0, #0
    }
    return 1;
}
 80a097e:	b00b      	add	sp, #44	; 0x2c
 80a0980:	bd30      	pop	{r4, r5, pc}
 80a0982:	bf00      	nop
 80a0984:	2000000c 	.word	0x2000000c
 80a0988:	080a9acf 	.word	0x080a9acf
 80a098c:	080a9af2 	.word	0x080a9af2

080a0990 <_Z17maxCurrentC2_testi>:

int maxCurrentC2_test(int setPoint) {
 80a0990:	b530      	push	{r4, r5, lr}
    byte olimexMessage[4] = {0xFE,2,setPoint,0xFF};
 80a0992:	23fe      	movs	r3, #254	; 0xfe
        return 0;
    }
    return 1;
}

int maxCurrentC2_test(int setPoint) {
 80a0994:	b08b      	sub	sp, #44	; 0x2c
    byte olimexMessage[4] = {0xFE,2,setPoint,0xFF};
 80a0996:	f88d 3004 	strb.w	r3, [sp, #4]
 80a099a:	2302      	movs	r3, #2
 80a099c:	f88d 3005 	strb.w	r3, [sp, #5]
 80a09a0:	23ff      	movs	r3, #255	; 0xff
 80a09a2:	f88d 3007 	strb.w	r3, [sp, #7]
    if (TESTCASE) {
 80a09a6:	4b18      	ldr	r3, [pc, #96]	; (80a0a08 <_Z17maxCurrentC2_testi+0x78>)
        return 0;
    }
    return 1;
}

int maxCurrentC2_test(int setPoint) {
 80a09a8:	4604      	mov	r4, r0
    byte olimexMessage[4] = {0xFE,2,setPoint,0xFF};
    if (TESTCASE) {
 80a09aa:	781b      	ldrb	r3, [r3, #0]
    }
    return 1;
}

int maxCurrentC2_test(int setPoint) {
    byte olimexMessage[4] = {0xFE,2,setPoint,0xFF};
 80a09ac:	f88d 0006 	strb.w	r0, [sp, #6]
    if (TESTCASE) {
 80a09b0:	b333      	cbz	r3, 80a0a00 <_Z17maxCurrentC2_testi+0x70>
        Serial1.write(olimexMessage,4);
 80a09b2:	f004 fa15 	bl	80a4de0 <_Z22__fetch_global_Serial1v>
 80a09b6:	6803      	ldr	r3, [r0, #0]
 80a09b8:	2204      	movs	r2, #4
 80a09ba:	68db      	ldr	r3, [r3, #12]
 80a09bc:	eb0d 0102 	add.w	r1, sp, r2
 80a09c0:	4798      	blx	r3
        DEBUGPORT.println("maxCurrentC1>\tNew setpoint set at "+String(setPoint)+" Amps.");
 80a09c2:	f004 f957 	bl	80a4c74 <_Z16_fetch_usbserialv>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a09c6:	4911      	ldr	r1, [pc, #68]	; (80a0a0c <_Z17maxCurrentC2_testi+0x7c>)
 80a09c8:	4605      	mov	r5, r0
 80a09ca:	a806      	add	r0, sp, #24
 80a09cc:	f003 fbc9 	bl	80a4162 <_ZN6StringC1EPK19__FlashStringHelper>
 80a09d0:	220a      	movs	r2, #10
 80a09d2:	4621      	mov	r1, r4
 80a09d4:	a802      	add	r0, sp, #8
 80a09d6:	f003 fc39 	bl	80a424c <_ZN6StringC1Eih>
 80a09da:	a902      	add	r1, sp, #8
 80a09dc:	a806      	add	r0, sp, #24
 80a09de:	f003 fcbf 	bl	80a4360 <_ZplRK15StringSumHelperRK6String>
 80a09e2:	490b      	ldr	r1, [pc, #44]	; (80a0a10 <_Z17maxCurrentC2_testi+0x80>)
 80a09e4:	f003 fcc8 	bl	80a4378 <_ZplRK15StringSumHelperPKc>
 80a09e8:	6801      	ldr	r1, [r0, #0]
 80a09ea:	4628      	mov	r0, r5
 80a09ec:	f003 fd4f 	bl	80a448e <_ZN5Print7printlnEPKc>
 80a09f0:	a802      	add	r0, sp, #8
 80a09f2:	f003 fb6f 	bl	80a40d4 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80a09f6:	a806      	add	r0, sp, #24
 80a09f8:	f003 fb6c 	bl	80a40d4 <_ZN6StringD1Ev>
        return 0;
 80a09fc:	2000      	movs	r0, #0
 80a09fe:	e000      	b.n	80a0a02 <_Z17maxCurrentC2_testi+0x72>
    }
    return 1;
 80a0a00:	2001      	movs	r0, #1
}
 80a0a02:	b00b      	add	sp, #44	; 0x2c
 80a0a04:	bd30      	pop	{r4, r5, pc}
 80a0a06:	bf00      	nop
 80a0a08:	2000000c 	.word	0x2000000c
 80a0a0c:	080a9acf 	.word	0x080a9acf
 80a0a10:	080a9af2 	.word	0x080a9af2

080a0a14 <_Z17getUserIdAtSocketi>:
    delay(10000);
    return 1;
}*/

String getUserIdAtSocket(int socket) {
    if (socket == 1+CHARGEROFFSET)
 80a0a14:	2901      	cmp	r1, #1
    //digitalWrite(D7,LOW);
    delay(10000);
    return 1;
}*/

String getUserIdAtSocket(int socket) {
 80a0a16:	b510      	push	{r4, lr}
 80a0a18:	4604      	mov	r4, r0
    if (socket == 1+CHARGEROFFSET)
 80a0a1a:	d101      	bne.n	80a0a20 <_Z17getUserIdAtSocketi+0xc>
        return UIDtagCharger1;
 80a0a1c:	4906      	ldr	r1, [pc, #24]	; (80a0a38 <_Z17getUserIdAtSocketi+0x24>)
 80a0a1e:	e002      	b.n	80a0a26 <_Z17getUserIdAtSocketi+0x12>
    if (socket == 2+CHARGEROFFSET)
 80a0a20:	2902      	cmp	r1, #2
 80a0a22:	d103      	bne.n	80a0a2c <_Z17getUserIdAtSocketi+0x18>
        return UIDtagCharger2;
 80a0a24:	4905      	ldr	r1, [pc, #20]	; (80a0a3c <_Z17getUserIdAtSocketi+0x28>)
 80a0a26:	f003 fbdb 	bl	80a41e0 <_ZN6StringC1ERKS_>
 80a0a2a:	e002      	b.n	80a0a32 <_Z17getUserIdAtSocketi+0x1e>
    return "00";
 80a0a2c:	4904      	ldr	r1, [pc, #16]	; (80a0a40 <_Z17getUserIdAtSocketi+0x2c>)
 80a0a2e:	f003 fb98 	bl	80a4162 <_ZN6StringC1EPK19__FlashStringHelper>
}
 80a0a32:	4620      	mov	r0, r4
 80a0a34:	bd10      	pop	{r4, pc}
 80a0a36:	bf00      	nop
 80a0a38:	20000328 	.word	0x20000328
 80a0a3c:	20000338 	.word	0x20000338
 80a0a40:	080a9c4d 	.word	0x080a9c4d

080a0a44 <_Z18allowUser_callbackPhj>:
//         maxCurrentC2_test((int)((EMeterData[2].PhaseCurrent[0]+EMeterData[2].PhaseCurrent[1]+EMeterData[2].PhaseCurrent[2])/2)); //Emeter3, I1
//     }
// }


void allowUser_callback(byte* payload, unsigned int length) {
 80a0a44:	b5b0      	push	{r4, r5, r7, lr}
 80a0a46:	460c      	mov	r4, r1
    char payl[length+1];
 80a0a48:	f101 0308 	add.w	r3, r1, #8
//         maxCurrentC2_test((int)((EMeterData[2].PhaseCurrent[0]+EMeterData[2].PhaseCurrent[1]+EMeterData[2].PhaseCurrent[2])/2)); //Emeter3, I1
//     }
// }


void allowUser_callback(byte* payload, unsigned int length) {
 80a0a4c:	b086      	sub	sp, #24
    char payl[length+1];
 80a0a4e:	f023 0307 	bic.w	r3, r3, #7
            client.publish("HANevse/photonConverted", "successful RFID read, but you are not in the userlist");
            break;
        default:
            client.publish("HANevse/photonConverted", "ERROR: unknown scenario");
        
    }
 80a0a52:	466d      	mov	r5, sp
//         maxCurrentC2_test((int)((EMeterData[2].PhaseCurrent[0]+EMeterData[2].PhaseCurrent[1]+EMeterData[2].PhaseCurrent[2])/2)); //Emeter3, I1
//     }
// }


void allowUser_callback(byte* payload, unsigned int length) {
 80a0a54:	af00      	add	r7, sp, #0
    char payl[length+1];
 80a0a56:	ebad 0d03 	sub.w	sp, sp, r3
    char *endchar;
        
    memcpy(payl, payload, length);
 80a0a5a:	460a      	mov	r2, r1
 80a0a5c:	4601      	mov	r1, r0
 80a0a5e:	4668      	mov	r0, sp
 80a0a60:	f006 f8f6 	bl	80a6c50 <memcpy>
    payl[length] = NULL;
 80a0a64:	2300      	movs	r3, #0
 80a0a66:	f80d 3004 	strb.w	r3, [sp, r4]
    int port = (int) strtol(payl, &endchar, 10);
 80a0a6a:	220a      	movs	r2, #10
 80a0a6c:	1d39      	adds	r1, r7, #4
 80a0a6e:	4668      	mov	r0, sp
 80a0a70:	f007 fd42 	bl	80a84f8 <strtol>
 80a0a74:	4604      	mov	r4, r0
    //action=4  succesful stop of charge session
    //action=5  you just started a charge at this charger, but had another consecutive RFID swipe within 20 seconds
    //action=6  you are already charging at another charger
    //action=7  succesful RFID read, but you are not in the userlist
    
    String topic_str = "HANevse/photonConverted/";
 80a0a76:	4924      	ldr	r1, [pc, #144]	; (80a0b08 <_Z18allowUser_callbackPhj+0xc4>)
 80a0a78:	f107 0008 	add.w	r0, r7, #8
 80a0a7c:	f003 fb71 	bl	80a4162 <_ZN6StringC1EPK19__FlashStringHelper>
    topic_str.concat(port);
 80a0a80:	4621      	mov	r1, r4
 80a0a82:	f107 0008 	add.w	r0, r7, #8
 80a0a86:	f003 fc5a 	bl	80a433e <_ZN6String6concatEi>

    endchar = endchar + 1;
 80a0a8a:	6878      	ldr	r0, [r7, #4]
    if (port == 1 + CHARGEROFFSET) 
 80a0a8c:	2c01      	cmp	r4, #1
    //action=7  succesful RFID read, but you are not in the userlist
    
    String topic_str = "HANevse/photonConverted/";
    topic_str.concat(port);

    endchar = endchar + 1;
 80a0a8e:	f100 0001 	add.w	r0, r0, #1
 80a0a92:	6078      	str	r0, [r7, #4]
    if (port == 1 + CHARGEROFFSET) 
 80a0a94:	d003      	beq.n	80a0a9e <_Z18allowUser_callbackPhj+0x5a>
        port = AUTHENTICATION_CAR1;
    else if (port == 2 + CHARGEROFFSET)
 80a0a96:	2c02      	cmp	r4, #2
 80a0a98:	d12d      	bne.n	80a0af6 <_Z18allowUser_callbackPhj+0xb2>
        port = AUTHENTICATION_CAR2;
 80a0a9a:	2406      	movs	r4, #6
 80a0a9c:	e000      	b.n	80a0aa0 <_Z18allowUser_callbackPhj+0x5c>
    String topic_str = "HANevse/photonConverted/";
    topic_str.concat(port);

    endchar = endchar + 1;
    if (port == 1 + CHARGEROFFSET) 
        port = AUTHENTICATION_CAR1;
 80a0a9e:	2405      	movs	r4, #5
    else if (port == 2 + CHARGEROFFSET)
        port = AUTHENTICATION_CAR2;
    else return; //port = EXTRA;
    int retPi = (int) strtol(endchar, &endchar, 10);
 80a0aa0:	220a      	movs	r2, #10
 80a0aa2:	1d39      	adds	r1, r7, #4
 80a0aa4:	f007 fd28 	bl	80a84f8 <strtol>
    Pianswer = retPi; 
 80a0aa8:	4b18      	ldr	r3, [pc, #96]	; (80a0b0c <_Z18allowUser_callbackPhj+0xc8>)
 80a0aaa:	8018      	strh	r0, [r3, #0]
    // if (Pianswer == 0)
        // Pianswer = 9;

    switch(retPi) {
 80a0aac:	3801      	subs	r0, #1
 80a0aae:	2806      	cmp	r0, #6
 80a0ab0:	d81c      	bhi.n	80a0aec <_Z18allowUser_callbackPhj+0xa8>
 80a0ab2:	e8df f000 	tbb	[pc, r0]
 80a0ab6:	0b04      	.short	0x0b04
 80a0ab8:	17150f0d 	.word	0x17150f0d
 80a0abc:	19          	.byte	0x19
 80a0abd:	00          	.byte	0x00
        case 1:
            digitalWrite(port, HIGH);
 80a0abe:	2101      	movs	r1, #1
 80a0ac0:	4620      	mov	r0, r4
 80a0ac2:	f004 fbde 	bl	80a5282 <digitalWrite>
            client.publish(topic_str, "successful start new charge");
 80a0ac6:	4a12      	ldr	r2, [pc, #72]	; (80a0b10 <_Z18allowUser_callbackPhj+0xcc>)
 80a0ac8:	68b9      	ldr	r1, [r7, #8]
 80a0aca:	e011      	b.n	80a0af0 <_Z18allowUser_callbackPhj+0xac>
            break;
        case 2:
            client.publish("HANevse/photonConverted", "charger is free, but you already swiped the card in the last 20 sec");
 80a0acc:	4a11      	ldr	r2, [pc, #68]	; (80a0b14 <_Z18allowUser_callbackPhj+0xd0>)
 80a0ace:	e00e      	b.n	80a0aee <_Z18allowUser_callbackPhj+0xaa>
            break;
        case 3:
            client.publish("HANevse/photonConverted", "charger is occupied by another user");
 80a0ad0:	4a11      	ldr	r2, [pc, #68]	; (80a0b18 <_Z18allowUser_callbackPhj+0xd4>)
 80a0ad2:	e00c      	b.n	80a0aee <_Z18allowUser_callbackPhj+0xaa>
            break;
        case 4:
            digitalWrite(port, LOW);
 80a0ad4:	2100      	movs	r1, #0
 80a0ad6:	4620      	mov	r0, r4
 80a0ad8:	f004 fbd3 	bl	80a5282 <digitalWrite>
            client.publish("HANevse/photonConverted", "successful stop charge session");
 80a0adc:	4a0f      	ldr	r2, [pc, #60]	; (80a0b1c <_Z18allowUser_callbackPhj+0xd8>)
 80a0ade:	e006      	b.n	80a0aee <_Z18allowUser_callbackPhj+0xaa>
            break;
        case 5:
            client.publish("HANevse/photonConverted", "you just started a charge at this charger, but had another consecutive RFID swipe within 20 sec");
 80a0ae0:	4a0f      	ldr	r2, [pc, #60]	; (80a0b20 <_Z18allowUser_callbackPhj+0xdc>)
 80a0ae2:	e004      	b.n	80a0aee <_Z18allowUser_callbackPhj+0xaa>
            break;
        case 6:
            client.publish("HANevse/photonConverted", "you are already charging at another charger");
 80a0ae4:	4a0f      	ldr	r2, [pc, #60]	; (80a0b24 <_Z18allowUser_callbackPhj+0xe0>)
 80a0ae6:	e002      	b.n	80a0aee <_Z18allowUser_callbackPhj+0xaa>
            break;
        case 7:
            client.publish("HANevse/photonConverted", "successful RFID read, but you are not in the userlist");
 80a0ae8:	4a0f      	ldr	r2, [pc, #60]	; (80a0b28 <_Z18allowUser_callbackPhj+0xe4>)
 80a0aea:	e000      	b.n	80a0aee <_Z18allowUser_callbackPhj+0xaa>
            break;
        default:
            client.publish("HANevse/photonConverted", "ERROR: unknown scenario");
 80a0aec:	4a0f      	ldr	r2, [pc, #60]	; (80a0b2c <_Z18allowUser_callbackPhj+0xe8>)
 80a0aee:	4910      	ldr	r1, [pc, #64]	; (80a0b30 <_Z18allowUser_callbackPhj+0xec>)
 80a0af0:	4810      	ldr	r0, [pc, #64]	; (80a0b34 <_Z18allowUser_callbackPhj+0xf0>)
 80a0af2:	f001 fdc6 	bl	80a2682 <_ZN4MQTT7publishEPKcS1_>
    endchar = endchar + 1;
    if (port == 1 + CHARGEROFFSET) 
        port = AUTHENTICATION_CAR1;
    else if (port == 2 + CHARGEROFFSET)
        port = AUTHENTICATION_CAR2;
    else return; //port = EXTRA;
 80a0af6:	f107 0008 	add.w	r0, r7, #8
 80a0afa:	f003 faeb 	bl	80a40d4 <_ZN6StringD1Ev>
 80a0afe:	46ad      	mov	sp, r5
        default:
            client.publish("HANevse/photonConverted", "ERROR: unknown scenario");
        
    }
    
}
 80a0b00:	3718      	adds	r7, #24
 80a0b02:	46bd      	mov	sp, r7
 80a0b04:	bdb0      	pop	{r4, r5, r7, pc}
 80a0b06:	bf00      	nop
 80a0b08:	080a9c50 	.word	0x080a9c50
 80a0b0c:	20000284 	.word	0x20000284
 80a0b10:	080a9c69 	.word	0x080a9c69
 80a0b14:	080a9c85 	.word	0x080a9c85
 80a0b18:	080a9ce1 	.word	0x080a9ce1
 80a0b1c:	080a9d05 	.word	0x080a9d05
 80a0b20:	080a9d24 	.word	0x080a9d24
 80a0b24:	080a9d84 	.word	0x080a9d84
 80a0b28:	080a9db0 	.word	0x080a9db0
 80a0b2c:	080a9de6 	.word	0x080a9de6
 80a0b30:	080a9cc9 	.word	0x080a9cc9
 80a0b34:	200002d0 	.word	0x200002d0

080a0b38 <_Z9reconnectv>:
    // This whole function is not interrupted by callback() so Pianswer can't be changed in the meantime
    //client.publish("HANevse/checkupdateUser", String(Pianswer));  
     return Authorized;
}

void reconnect(void) {
 80a0b38:	b508      	push	{r3, lr}
    while (!client.isConnected()) {
 80a0b3a:	4817      	ldr	r0, [pc, #92]	; (80a0b98 <_Z9reconnectv+0x60>)
 80a0b3c:	f001 fc3d 	bl	80a23ba <_ZN4MQTT11isConnectedEv>
 80a0b40:	bb48      	cbnz	r0, 80a0b96 <_Z9reconnectv+0x5e>
        DEBUGPORT.print("MQTT>\tConnecting to MQTT broker...");
 80a0b42:	f004 f897 	bl	80a4c74 <_Z16_fetch_usbserialv>
 80a0b46:	4915      	ldr	r1, [pc, #84]	; (80a0b9c <_Z9reconnectv+0x64>)
 80a0b48:	f003 fc8e 	bl	80a4468 <_ZN5Print5printEPKc>
        if (client.connect("EV-Photon-test1")) {
 80a0b4c:	4914      	ldr	r1, [pc, #80]	; (80a0ba0 <_Z9reconnectv+0x68>)
 80a0b4e:	4812      	ldr	r0, [pc, #72]	; (80a0b98 <_Z9reconnectv+0x60>)
 80a0b50:	f001 fd18 	bl	80a2584 <_ZN4MQTT7connectEPKc>
 80a0b54:	b180      	cbz	r0, 80a0b78 <_Z9reconnectv+0x40>
            DEBUGPORT.println("MQTT>\tConnected");
 80a0b56:	f004 f88d 	bl	80a4c74 <_Z16_fetch_usbserialv>
 80a0b5a:	4912      	ldr	r1, [pc, #72]	; (80a0ba4 <_Z9reconnectv+0x6c>)
 80a0b5c:	f003 fc97 	bl	80a448e <_ZN5Print7printlnEPKc>
            //client.subscribe("HANevse/#", client.QOS2);
            if (TESTCASE){
 80a0b60:	4b11      	ldr	r3, [pc, #68]	; (80a0ba8 <_Z9reconnectv+0x70>)
 80a0b62:	781b      	ldrb	r3, [r3, #0]
 80a0b64:	b11b      	cbz	r3, 80a0b6e <_Z9reconnectv+0x36>
            client.subscribe("HANevse1/EnergyMeter"); //+
 80a0b66:	4911      	ldr	r1, [pc, #68]	; (80a0bac <_Z9reconnectv+0x74>)
 80a0b68:	480b      	ldr	r0, [pc, #44]	; (80a0b98 <_Z9reconnectv+0x60>)
 80a0b6a:	f001 fefd 	bl	80a2968 <_ZN4MQTT9subscribeEPKc>
            }
            client.subscribe("HANevse1/allowUser");
 80a0b6e:	4910      	ldr	r1, [pc, #64]	; (80a0bb0 <_Z9reconnectv+0x78>)
 80a0b70:	4809      	ldr	r0, [pc, #36]	; (80a0b98 <_Z9reconnectv+0x60>)
 80a0b72:	f001 fef9 	bl	80a2968 <_ZN4MQTT9subscribeEPKc>
 80a0b76:	e7e0      	b.n	80a0b3a <_Z9reconnectv+0x2>
        }
        else {
            DEBUGPORT.println("MQTT>\tConnection failed");
 80a0b78:	f004 f87c 	bl	80a4c74 <_Z16_fetch_usbserialv>
 80a0b7c:	490d      	ldr	r1, [pc, #52]	; (80a0bb4 <_Z9reconnectv+0x7c>)
 80a0b7e:	f003 fc86 	bl	80a448e <_ZN5Print7printlnEPKc>
            DEBUGPORT.println("MQTT>\tRetrying...");
 80a0b82:	f004 f877 	bl	80a4c74 <_Z16_fetch_usbserialv>
 80a0b86:	490c      	ldr	r1, [pc, #48]	; (80a0bb8 <_Z9reconnectv+0x80>)
 80a0b88:	f003 fc81 	bl	80a448e <_ZN5Print7printlnEPKc>
            delay(5000);
 80a0b8c:	f241 3088 	movw	r0, #5000	; 0x1388
 80a0b90:	f003 feac 	bl	80a48ec <delay>
 80a0b94:	e7d1      	b.n	80a0b3a <_Z9reconnectv+0x2>
 80a0b96:	bd08      	pop	{r3, pc}
 80a0b98:	200002d0 	.word	0x200002d0
 80a0b9c:	080a9dfe 	.word	0x080a9dfe
 80a0ba0:	080a9e21 	.word	0x080a9e21
 80a0ba4:	080a9e31 	.word	0x080a9e31
 80a0ba8:	2000000c 	.word	0x2000000c
 80a0bac:	080a9e41 	.word	0x080a9e41
 80a0bb0:	080a9e56 	.word	0x080a9e56
 80a0bb4:	080a9e69 	.word	0x080a9e69
 80a0bb8:	080a9e81 	.word	0x080a9e81

080a0bbc <_ZNK10JsonParser18getOuterValueByKeyIfEEbPKcRT_>:
	 *
	 * This should only be used for things like string, numbers, booleans, etc.. If you want to get a JSON array
	 * or object within an object, use getValueTokenByKey() instead.
	 */
	template<class T>
	bool getOuterValueByKey(const char *name, T &result) const {
 80a0bbc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80a0bbe:	460e      	mov	r6, r1
 80a0bc0:	4604      	mov	r4, r0
 80a0bc2:	4615      	mov	r5, r2
		const JsonParserGeneratorRK::jsmntok_t *value;

		if (getValueTokenByKey(getOuterObject(), name, value)) {
 80a0bc4:	f001 ff80 	bl	80a2ac8 <_ZNK10JsonParser14getOuterObjectEv>
 80a0bc8:	ab01      	add	r3, sp, #4
 80a0bca:	4601      	mov	r1, r0
 80a0bcc:	4632      	mov	r2, r6
 80a0bce:	4620      	mov	r0, r4
 80a0bd0:	f002 f8b4 	bl	80a2d3c <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
 80a0bd4:	b120      	cbz	r0, 80a0be0 <_ZNK10JsonParser18getOuterValueByKeyIfEEbPKcRT_+0x24>
			return getTokenValue(value, result);
 80a0bd6:	462a      	mov	r2, r5
 80a0bd8:	9901      	ldr	r1, [sp, #4]
 80a0bda:	4620      	mov	r0, r4
 80a0bdc:	f001 fff2 	bl	80a2bc4 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERf>
		}
		else {
			return false;
		}
	}
 80a0be0:	b002      	add	sp, #8
 80a0be2:	bd70      	pop	{r4, r5, r6, pc}

080a0be4 <_ZN16JsonWriterStaticILj512EEC1Ev>:
 * @param BUFFER_SIZE The size of the buffer to reserve.
 */
template <size_t BUFFER_SIZE>
class JsonWriterStatic : public JsonWriter {
public:
	explicit JsonWriterStatic() : JsonWriter(staticBuffer, BUFFER_SIZE) {};
 80a0be4:	b510      	push	{r4, lr}
 80a0be6:	4604      	mov	r4, r0
 80a0be8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80a0bec:	f100 0130 	add.w	r1, r0, #48	; 0x30
 80a0bf0:	f002 f8da 	bl	80a2da8 <_ZN10JsonWriterC1EPcj>
 80a0bf4:	4b01      	ldr	r3, [pc, #4]	; (80a0bfc <_ZN16JsonWriterStaticILj512EEC1Ev+0x18>)
 80a0bf6:	4620      	mov	r0, r4
 80a0bf8:	6023      	str	r3, [r4, #0]
 80a0bfa:	bd10      	pop	{r4, pc}
 80a0bfc:	080a9abc 	.word	0x080a9abc

080a0c00 <_ZN10JsonWriter14insertKeyValueIfEEvPKcT_>:
	 *
	 * Uses templates so you can pass any type object that's supported by insertValue() overloads,
	 * for example: bool, int, float, double, const char *.
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
 80a0c00:	b570      	push	{r4, r5, r6, lr}
 80a0c02:	4604      	mov	r4, r0
 80a0c04:	460e      	mov	r6, r1
 80a0c06:	4615      	mov	r5, r2
		insertCheckSeparator();
 80a0c08:	f002 f9b8 	bl	80a2f7c <_ZN10JsonWriter20insertCheckSeparatorEv>
	 * @brief Inserts a quoted string value. This escapes special characters and encodes utf-8.
	 *
	 * You would normally use insertKeyValue() or insertArrayValue() instead of calling this directly
	 * as those functions take care of inserting the separtators between items.
	 */
	void insertValue(const char *value) { insertString(value, true); }
 80a0c0c:	4631      	mov	r1, r6
 80a0c0e:	4620      	mov	r0, r4
 80a0c10:	2201      	movs	r2, #1
 80a0c12:	f002 f927 	bl	80a2e64 <_ZN10JsonWriter12insertStringEPKcb>
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
		insertValue(key);
		insertChar(':');
 80a0c16:	4620      	mov	r0, r4
 80a0c18:	213a      	movs	r1, #58	; 0x3a
 80a0c1a:	f002 f8d7 	bl	80a2dcc <_ZN10JsonWriter10insertCharEc>
		insertValue(value);
 80a0c1e:	4629      	mov	r1, r5
 80a0c20:	4620      	mov	r0, r4
	}
 80a0c22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	template<class T>
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
		insertValue(key);
		insertChar(':');
		insertValue(value);
 80a0c26:	f002 b9cd 	b.w	80a2fc4 <_ZN10JsonWriter11insertValueEf>

080a0c2a <_ZN10JsonWriter14insertKeyValueI6StringEEvPKcT_>:
	 *
	 * Uses templates so you can pass any type object that's supported by insertValue() overloads,
	 * for example: bool, int, float, double, const char *.
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
 80a0c2a:	b570      	push	{r4, r5, r6, lr}
 80a0c2c:	4604      	mov	r4, r0
 80a0c2e:	460e      	mov	r6, r1
 80a0c30:	4615      	mov	r5, r2
		insertCheckSeparator();
 80a0c32:	f002 f9a3 	bl	80a2f7c <_ZN10JsonWriter20insertCheckSeparatorEv>
	 * @brief Inserts a quoted string value. This escapes special characters and encodes utf-8.
	 *
	 * You would normally use insertKeyValue() or insertArrayValue() instead of calling this directly
	 * as those functions take care of inserting the separtators between items.
	 */
	void insertValue(const char *value) { insertString(value, true); }
 80a0c36:	2201      	movs	r2, #1
 80a0c38:	4631      	mov	r1, r6
 80a0c3a:	4620      	mov	r0, r4
 80a0c3c:	f002 f912 	bl	80a2e64 <_ZN10JsonWriter12insertStringEPKcb>
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
		insertValue(key);
		insertChar(':');
 80a0c40:	4620      	mov	r0, r4
 80a0c42:	213a      	movs	r1, #58	; 0x3a
 80a0c44:	f002 f8c2 	bl	80a2dcc <_ZN10JsonWriter10insertCharEc>
	 * See also the version that takes a plain const char *.
	 *
	 * You would normally use insertKeyValue() or insertArrayValue() instead of calling this directly
	 * as those functions take care of inserting the separtators between items.
	 */
	void insertValue(const String &value) { insertString(value.c_str(), true); }
 80a0c48:	6829      	ldr	r1, [r5, #0]
 80a0c4a:	4620      	mov	r0, r4
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
		insertValue(key);
		insertChar(':');
		insertValue(value);
	}
 80a0c4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	 * See also the version that takes a plain const char *.
	 *
	 * You would normally use insertKeyValue() or insertArrayValue() instead of calling this directly
	 * as those functions take care of inserting the separtators between items.
	 */
	void insertValue(const String &value) { insertString(value.c_str(), true); }
 80a0c50:	2201      	movs	r2, #1
 80a0c52:	f002 b907 	b.w	80a2e64 <_ZN10JsonWriter12insertStringEPKcb>
	...

080a0c58 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>:
	 *
	 * Uses templates so you can pass any type object that's supported by insertValue() overloads,
	 * for example: bool, int, float, double, const char *.
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
 80a0c58:	b570      	push	{r4, r5, r6, lr}
 80a0c5a:	4604      	mov	r4, r0
 80a0c5c:	460e      	mov	r6, r1
 80a0c5e:	4615      	mov	r5, r2
		insertCheckSeparator();
 80a0c60:	f002 f98c 	bl	80a2f7c <_ZN10JsonWriter20insertCheckSeparatorEv>
	 * @brief Inserts a quoted string value. This escapes special characters and encodes utf-8.
	 *
	 * You would normally use insertKeyValue() or insertArrayValue() instead of calling this directly
	 * as those functions take care of inserting the separtators between items.
	 */
	void insertValue(const char *value) { insertString(value, true); }
 80a0c64:	2201      	movs	r2, #1
 80a0c66:	4631      	mov	r1, r6
 80a0c68:	4620      	mov	r0, r4
 80a0c6a:	f002 f8fb 	bl	80a2e64 <_ZN10JsonWriter12insertStringEPKcb>
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
		insertValue(key);
		insertChar(':');
 80a0c6e:	4620      	mov	r0, r4
 80a0c70:	213a      	movs	r1, #58	; 0x3a
 80a0c72:	f002 f8ab 	bl	80a2dcc <_ZN10JsonWriter10insertCharEc>
	 * @brief Inserts an integer value.
	 *
	 * You would normally use insertKeyValue() or insertArrayValue() instead of calling this directly
	 * as those functions take care of inserting the separators between items.
	 */
	void insertValue(int value) { insertsprintf("%d", value); }
 80a0c76:	462a      	mov	r2, r5
 80a0c78:	4620      	mov	r0, r4
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
		insertValue(key);
		insertChar(':');
		insertValue(value);
	}
 80a0c7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	 * @brief Inserts an integer value.
	 *
	 * You would normally use insertKeyValue() or insertArrayValue() instead of calling this directly
	 * as those functions take care of inserting the separators between items.
	 */
	void insertValue(int value) { insertsprintf("%d", value); }
 80a0c7e:	4901      	ldr	r1, [pc, #4]	; (80a0c84 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_+0x2c>)
 80a0c80:	f002 b8e3 	b.w	80a2e4a <_ZN10JsonWriter13insertsprintfEPKcz>
 80a0c84:	080aa59b 	.word	0x080aa59b

080a0c88 <_Z15add_Measurementfffffffffmi6String.part.9>:
    //DEBUGPORT.println(time);
    DEBUGPORT.print("MQTT>\tCallback function is called at: ");
    DEBUGPORT.println(Time.format(time, TIME_FORMAT_DEFAULT));
}

void add_Measurement(float phaseVoltageL1, float phaseVoltageL2, float phaseVoltageL3, float currentL1, float currentL2, float currentL3,  float Power, float Energy, float Frequency, unsigned long Timestamp, int socketId=0, String userId="00") {
 80a0c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a0c8c:	460f      	mov	r7, r1
 80a0c8e:	f5ad 7d10 	sub.w	sp, sp, #576	; 0x240
    if (((currentL1 < 0.1)&&(currentL2 < 0.1)&&(currentL3 < 0.1))&&((Power > phaseVoltageL1)&&(Power > phaseVoltageL2)&&(Power > phaseVoltageL3) )  )
        return;

    //This rounds floats to 3 decimal places
    /// float newvar = (float)(((int)(oldvar * 1000 + .5)) / 1000); 
    phaseVoltageL1 = (float)(((int)(phaseVoltageL1 * 1000 + .5)) / 1000);
 80a0c92:	496c      	ldr	r1, [pc, #432]	; (80a0e44 <_Z15add_Measurementfffffffffmi6String.part.9+0x1bc>)
    //DEBUGPORT.println(time);
    DEBUGPORT.print("MQTT>\tCallback function is called at: ");
    DEBUGPORT.println(Time.format(time, TIME_FORMAT_DEFAULT));
}

void add_Measurement(float phaseVoltageL1, float phaseVoltageL2, float phaseVoltageL3, float currentL1, float currentL2, float currentL3,  float Power, float Energy, float Frequency, unsigned long Timestamp, int socketId=0, String userId="00") {
 80a0c94:	4616      	mov	r6, r2
 80a0c96:	461d      	mov	r5, r3
    if (((currentL1 < 0.1)&&(currentL2 < 0.1)&&(currentL3 < 0.1))&&((Power > phaseVoltageL1)&&(Power > phaseVoltageL2)&&(Power > phaseVoltageL3) )  )
        return;

    //This rounds floats to 3 decimal places
    /// float newvar = (float)(((int)(oldvar * 1000 + .5)) / 1000); 
    phaseVoltageL1 = (float)(((int)(phaseVoltageL1 * 1000 + .5)) / 1000);
 80a0c98:	f005 faf0 	bl	80a627c <__aeabi_fmul>
 80a0c9c:	f004 fe44 	bl	80a5928 <__aeabi_f2d>
 80a0ca0:	2200      	movs	r2, #0
 80a0ca2:	4b69      	ldr	r3, [pc, #420]	; (80a0e48 <_Z15add_Measurementfffffffffmi6String.part.9+0x1c0>)
 80a0ca4:	f004 fce2 	bl	80a566c <__adddf3>
 80a0ca8:	f005 f942 	bl	80a5f30 <__aeabi_d2iz>
 80a0cac:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 80a0cb0:	fb90 faf4 	sdiv	sl, r0, r4
    phaseVoltageL2 = (float)(((int)(phaseVoltageL2 * 1000 + .5)) / 1000);
 80a0cb4:	4963      	ldr	r1, [pc, #396]	; (80a0e44 <_Z15add_Measurementfffffffffmi6String.part.9+0x1bc>)
 80a0cb6:	4638      	mov	r0, r7
 80a0cb8:	f005 fae0 	bl	80a627c <__aeabi_fmul>
 80a0cbc:	f004 fe34 	bl	80a5928 <__aeabi_f2d>
 80a0cc0:	2200      	movs	r2, #0
 80a0cc2:	4b61      	ldr	r3, [pc, #388]	; (80a0e48 <_Z15add_Measurementfffffffffmi6String.part.9+0x1c0>)
 80a0cc4:	f004 fcd2 	bl	80a566c <__adddf3>
 80a0cc8:	f005 f932 	bl	80a5f30 <__aeabi_d2iz>
    phaseVoltageL3 = (float)(((int)(phaseVoltageL3 * 1000 + .5)) / 1000);
 80a0ccc:	495d      	ldr	r1, [pc, #372]	; (80a0e44 <_Z15add_Measurementfffffffffmi6String.part.9+0x1bc>)
        return;

    //This rounds floats to 3 decimal places
    /// float newvar = (float)(((int)(oldvar * 1000 + .5)) / 1000); 
    phaseVoltageL1 = (float)(((int)(phaseVoltageL1 * 1000 + .5)) / 1000);
    phaseVoltageL2 = (float)(((int)(phaseVoltageL2 * 1000 + .5)) / 1000);
 80a0cce:	fb90 f9f4 	sdiv	r9, r0, r4
    phaseVoltageL3 = (float)(((int)(phaseVoltageL3 * 1000 + .5)) / 1000);
 80a0cd2:	4630      	mov	r0, r6
 80a0cd4:	f005 fad2 	bl	80a627c <__aeabi_fmul>
 80a0cd8:	f004 fe26 	bl	80a5928 <__aeabi_f2d>
 80a0cdc:	2200      	movs	r2, #0
 80a0cde:	4b5a      	ldr	r3, [pc, #360]	; (80a0e48 <_Z15add_Measurementfffffffffmi6String.part.9+0x1c0>)
 80a0ce0:	f004 fcc4 	bl	80a566c <__adddf3>
 80a0ce4:	f005 f924 	bl	80a5f30 <__aeabi_d2iz>
    currentL1 = (float)(((int)(currentL1 * 1000 + .5)) / 1000);
 80a0ce8:	4956      	ldr	r1, [pc, #344]	; (80a0e44 <_Z15add_Measurementfffffffffmi6String.part.9+0x1bc>)

    //This rounds floats to 3 decimal places
    /// float newvar = (float)(((int)(oldvar * 1000 + .5)) / 1000); 
    phaseVoltageL1 = (float)(((int)(phaseVoltageL1 * 1000 + .5)) / 1000);
    phaseVoltageL2 = (float)(((int)(phaseVoltageL2 * 1000 + .5)) / 1000);
    phaseVoltageL3 = (float)(((int)(phaseVoltageL3 * 1000 + .5)) / 1000);
 80a0cea:	fb90 f8f4 	sdiv	r8, r0, r4
    currentL1 = (float)(((int)(currentL1 * 1000 + .5)) / 1000);
 80a0cee:	4628      	mov	r0, r5
 80a0cf0:	f005 fac4 	bl	80a627c <__aeabi_fmul>
 80a0cf4:	f004 fe18 	bl	80a5928 <__aeabi_f2d>
 80a0cf8:	2200      	movs	r2, #0
 80a0cfa:	4b53      	ldr	r3, [pc, #332]	; (80a0e48 <_Z15add_Measurementfffffffffmi6String.part.9+0x1c0>)
 80a0cfc:	f004 fcb6 	bl	80a566c <__adddf3>
 80a0d00:	f005 f916 	bl	80a5f30 <__aeabi_d2iz>
    currentL2 = (float)(((int)(currentL2 * 1000 + .5)) / 1000);
 80a0d04:	494f      	ldr	r1, [pc, #316]	; (80a0e44 <_Z15add_Measurementfffffffffmi6String.part.9+0x1bc>)
    //This rounds floats to 3 decimal places
    /// float newvar = (float)(((int)(oldvar * 1000 + .5)) / 1000); 
    phaseVoltageL1 = (float)(((int)(phaseVoltageL1 * 1000 + .5)) / 1000);
    phaseVoltageL2 = (float)(((int)(phaseVoltageL2 * 1000 + .5)) / 1000);
    phaseVoltageL3 = (float)(((int)(phaseVoltageL3 * 1000 + .5)) / 1000);
    currentL1 = (float)(((int)(currentL1 * 1000 + .5)) / 1000);
 80a0d06:	fb90 f7f4 	sdiv	r7, r0, r4
    currentL2 = (float)(((int)(currentL2 * 1000 + .5)) / 1000);
 80a0d0a:	9898      	ldr	r0, [sp, #608]	; 0x260
 80a0d0c:	f005 fab6 	bl	80a627c <__aeabi_fmul>
 80a0d10:	f004 fe0a 	bl	80a5928 <__aeabi_f2d>
 80a0d14:	2200      	movs	r2, #0
 80a0d16:	4b4c      	ldr	r3, [pc, #304]	; (80a0e48 <_Z15add_Measurementfffffffffmi6String.part.9+0x1c0>)
 80a0d18:	f004 fca8 	bl	80a566c <__adddf3>
 80a0d1c:	f005 f908 	bl	80a5f30 <__aeabi_d2iz>
    currentL3 = (float)(((int)(currentL3 * 1000 + .5)) / 1000);
 80a0d20:	4948      	ldr	r1, [pc, #288]	; (80a0e44 <_Z15add_Measurementfffffffffmi6String.part.9+0x1bc>)
    /// float newvar = (float)(((int)(oldvar * 1000 + .5)) / 1000); 
    phaseVoltageL1 = (float)(((int)(phaseVoltageL1 * 1000 + .5)) / 1000);
    phaseVoltageL2 = (float)(((int)(phaseVoltageL2 * 1000 + .5)) / 1000);
    phaseVoltageL3 = (float)(((int)(phaseVoltageL3 * 1000 + .5)) / 1000);
    currentL1 = (float)(((int)(currentL1 * 1000 + .5)) / 1000);
    currentL2 = (float)(((int)(currentL2 * 1000 + .5)) / 1000);
 80a0d22:	fb90 f6f4 	sdiv	r6, r0, r4
    currentL3 = (float)(((int)(currentL3 * 1000 + .5)) / 1000);
 80a0d26:	9899      	ldr	r0, [sp, #612]	; 0x264
 80a0d28:	f005 faa8 	bl	80a627c <__aeabi_fmul>
 80a0d2c:	f004 fdfc 	bl	80a5928 <__aeabi_f2d>
 80a0d30:	2200      	movs	r2, #0
 80a0d32:	4b45      	ldr	r3, [pc, #276]	; (80a0e48 <_Z15add_Measurementfffffffffmi6String.part.9+0x1c0>)
 80a0d34:	f004 fc9a 	bl	80a566c <__adddf3>
 80a0d38:	f005 f8fa 	bl	80a5f30 <__aeabi_d2iz>
    Frequency = (float)(((int)(Frequency * 1000 + .5)) / 1000);
 80a0d3c:	4941      	ldr	r1, [pc, #260]	; (80a0e44 <_Z15add_Measurementfffffffffmi6String.part.9+0x1bc>)
    phaseVoltageL1 = (float)(((int)(phaseVoltageL1 * 1000 + .5)) / 1000);
    phaseVoltageL2 = (float)(((int)(phaseVoltageL2 * 1000 + .5)) / 1000);
    phaseVoltageL3 = (float)(((int)(phaseVoltageL3 * 1000 + .5)) / 1000);
    currentL1 = (float)(((int)(currentL1 * 1000 + .5)) / 1000);
    currentL2 = (float)(((int)(currentL2 * 1000 + .5)) / 1000);
    currentL3 = (float)(((int)(currentL3 * 1000 + .5)) / 1000);
 80a0d3e:	fb90 f5f4 	sdiv	r5, r0, r4
    Frequency = (float)(((int)(Frequency * 1000 + .5)) / 1000);
 80a0d42:	989a      	ldr	r0, [sp, #616]	; 0x268
 80a0d44:	f005 fa9a 	bl	80a627c <__aeabi_fmul>
 80a0d48:	f004 fdee 	bl	80a5928 <__aeabi_f2d>
 80a0d4c:	4b3e      	ldr	r3, [pc, #248]	; (80a0e48 <_Z15add_Measurementfffffffffmi6String.part.9+0x1c0>)
 80a0d4e:	2200      	movs	r2, #0
 80a0d50:	f004 fc8c 	bl	80a566c <__adddf3>
 80a0d54:	f005 f8ec 	bl	80a5f30 <__aeabi_d2iz>
 80a0d58:	fb90 f4f4 	sdiv	r4, r0, r4


    JsonWriterStatic<512> jsonMessage;     
 80a0d5c:	a804      	add	r0, sp, #16
 80a0d5e:	f7ff ff41 	bl	80a0be4 <_ZN16JsonWriterStaticILj512EEC1Ev>
	 * @brief Start a new object
	 *
	 * @param jw The JsonWriter object to insert the object into
	 */
	JsonWriterAutoObject(JsonWriter *jw) : jw(jw) {
		jw->startObject();
 80a0d62:	a804      	add	r0, sp, #16
 80a0d64:	f7ff fb2e 	bl	80a03c4 <_ZN10JsonWriter11startObjectEv>
        {
		JsonWriterAutoObject obj(&jsonMessage);

		// Add various types of data        
        jsonMessage.insertKeyValue("V1", phaseVoltageL1);
 80a0d68:	4650      	mov	r0, sl
 80a0d6a:	f005 fa33 	bl	80a61d4 <__aeabi_i2f>
 80a0d6e:	4937      	ldr	r1, [pc, #220]	; (80a0e4c <_Z15add_Measurementfffffffffmi6String.part.9+0x1c4>)
 80a0d70:	4602      	mov	r2, r0
 80a0d72:	a804      	add	r0, sp, #16
 80a0d74:	f7ff ff44 	bl	80a0c00 <_ZN10JsonWriter14insertKeyValueIfEEvPKcT_>
        jsonMessage.insertKeyValue("V2", phaseVoltageL2);
 80a0d78:	4648      	mov	r0, r9
 80a0d7a:	f005 fa2b 	bl	80a61d4 <__aeabi_i2f>
 80a0d7e:	4934      	ldr	r1, [pc, #208]	; (80a0e50 <_Z15add_Measurementfffffffffmi6String.part.9+0x1c8>)
 80a0d80:	4602      	mov	r2, r0
 80a0d82:	a804      	add	r0, sp, #16
 80a0d84:	f7ff ff3c 	bl	80a0c00 <_ZN10JsonWriter14insertKeyValueIfEEvPKcT_>
        jsonMessage.insertKeyValue("V3", phaseVoltageL3);
 80a0d88:	4640      	mov	r0, r8
 80a0d8a:	f005 fa23 	bl	80a61d4 <__aeabi_i2f>
 80a0d8e:	4931      	ldr	r1, [pc, #196]	; (80a0e54 <_Z15add_Measurementfffffffffmi6String.part.9+0x1cc>)
 80a0d90:	4602      	mov	r2, r0
 80a0d92:	a804      	add	r0, sp, #16
 80a0d94:	f7ff ff34 	bl	80a0c00 <_ZN10JsonWriter14insertKeyValueIfEEvPKcT_>
        jsonMessage.insertKeyValue("I1", currentL1);
 80a0d98:	4638      	mov	r0, r7
 80a0d9a:	f005 fa1b 	bl	80a61d4 <__aeabi_i2f>
 80a0d9e:	492e      	ldr	r1, [pc, #184]	; (80a0e58 <_Z15add_Measurementfffffffffmi6String.part.9+0x1d0>)
 80a0da0:	4602      	mov	r2, r0
 80a0da2:	a804      	add	r0, sp, #16
 80a0da4:	f7ff ff2c 	bl	80a0c00 <_ZN10JsonWriter14insertKeyValueIfEEvPKcT_>
        jsonMessage.insertKeyValue("I2", currentL2);
 80a0da8:	4630      	mov	r0, r6
 80a0daa:	f005 fa13 	bl	80a61d4 <__aeabi_i2f>
 80a0dae:	492b      	ldr	r1, [pc, #172]	; (80a0e5c <_Z15add_Measurementfffffffffmi6String.part.9+0x1d4>)
 80a0db0:	4602      	mov	r2, r0
 80a0db2:	a804      	add	r0, sp, #16
 80a0db4:	f7ff ff24 	bl	80a0c00 <_ZN10JsonWriter14insertKeyValueIfEEvPKcT_>
        jsonMessage.insertKeyValue("I3", currentL3);
 80a0db8:	4628      	mov	r0, r5
 80a0dba:	f005 fa0b 	bl	80a61d4 <__aeabi_i2f>
 80a0dbe:	4928      	ldr	r1, [pc, #160]	; (80a0e60 <_Z15add_Measurementfffffffffmi6String.part.9+0x1d8>)
 80a0dc0:	4602      	mov	r2, r0
 80a0dc2:	a804      	add	r0, sp, #16
 80a0dc4:	f7ff ff1c 	bl	80a0c00 <_ZN10JsonWriter14insertKeyValueIfEEvPKcT_>
        //jsonMessage.insertKeyValue("P", Power);
        //jsonMessage.insertKeyValue("E", Energy);
        jsonMessage.insertKeyValue("F", Frequency);
 80a0dc8:	4620      	mov	r0, r4
 80a0dca:	f005 fa03 	bl	80a61d4 <__aeabi_i2f>
 80a0dce:	4925      	ldr	r1, [pc, #148]	; (80a0e64 <_Z15add_Measurementfffffffffmi6String.part.9+0x1dc>)
 80a0dd0:	4602      	mov	r2, r0
 80a0dd2:	a804      	add	r0, sp, #16
 80a0dd4:	f7ff ff14 	bl	80a0c00 <_ZN10JsonWriter14insertKeyValueIfEEvPKcT_>
          
		jsonMessage.insertKeyValue("UserID", userId);
 80a0dd8:	999d      	ldr	r1, [sp, #628]	; 0x274
 80a0dda:	4668      	mov	r0, sp
 80a0ddc:	f003 fa00 	bl	80a41e0 <_ZN6StringC1ERKS_>
 80a0de0:	466a      	mov	r2, sp
 80a0de2:	4921      	ldr	r1, [pc, #132]	; (80a0e68 <_Z15add_Measurementfffffffffmi6String.part.9+0x1e0>)
 80a0de4:	a804      	add	r0, sp, #16
 80a0de6:	f7ff ff20 	bl	80a0c2a <_ZN10JsonWriter14insertKeyValueI6StringEEvPKcT_>
 80a0dea:	4668      	mov	r0, sp
 80a0dec:	f003 f972 	bl	80a40d4 <_ZN6StringD1Ev>
		jsonMessage.insertKeyValue("SocketID", socketId);
 80a0df0:	9a9c      	ldr	r2, [sp, #624]	; 0x270
 80a0df2:	491e      	ldr	r1, [pc, #120]	; (80a0e6c <_Z15add_Measurementfffffffffmi6String.part.9+0x1e4>)
 80a0df4:	a804      	add	r0, sp, #16
 80a0df6:	f7ff ff2f 	bl	80a0c58 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
	 * Uses templates so you can pass any type object that's supported by insertValue() overloads,
	 * for example: bool, int, float, double, const char *.
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
 80a0dfa:	a804      	add	r0, sp, #16
 80a0dfc:	f002 f8be 	bl	80a2f7c <_ZN10JsonWriter20insertCheckSeparatorEv>
	 * @brief Inserts a quoted string value. This escapes special characters and encodes utf-8.
	 *
	 * You would normally use insertKeyValue() or insertArrayValue() instead of calling this directly
	 * as those functions take care of inserting the separtators between items.
	 */
	void insertValue(const char *value) { insertString(value, true); }
 80a0e00:	2201      	movs	r2, #1
 80a0e02:	491b      	ldr	r1, [pc, #108]	; (80a0e70 <_Z15add_Measurementfffffffffmi6String.part.9+0x1e8>)
 80a0e04:	a804      	add	r0, sp, #16
 80a0e06:	f002 f82d 	bl	80a2e64 <_ZN10JsonWriter12insertStringEPKcb>
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
		insertValue(key);
		insertChar(':');
 80a0e0a:	213a      	movs	r1, #58	; 0x3a
 80a0e0c:	a804      	add	r0, sp, #16
 80a0e0e:	f001 ffdd 	bl	80a2dcc <_ZN10JsonWriter10insertCharEc>
	 * @brief Inserts an unsigned long integer value.
	 *
	 * You would normally use insertKeyValue() or insertArrayValue() instead of calling this directly
	 * as those functions take care of inserting the separators between items.
	 */
	void insertValue(unsigned long value) { insertsprintf("%lu", value); }
 80a0e12:	9a9b      	ldr	r2, [sp, #620]	; 0x26c
 80a0e14:	4917      	ldr	r1, [pc, #92]	; (80a0e74 <_Z15add_Measurementfffffffffmi6String.part.9+0x1ec>)
 80a0e16:	a804      	add	r0, sp, #16
 80a0e18:	f002 f817 	bl	80a2e4a <_ZN10JsonWriter13insertsprintfEPKcz>

	/**
	 * @brief End the object
	 */
	~JsonWriterAutoObject() {
		jw->finishObjectOrArray();
 80a0e1c:	a804      	add	r0, sp, #16
 80a0e1e:	f001 ffe3 	bl	80a2de8 <_ZN10JsonWriter19finishObjectOrArrayEv>
 80a0e22:	2403      	movs	r4, #3
		jsonMessage.insertKeyValue("Time", Timestamp);
	    }


	for(int i=0; i<3; i++) {
		if(client.publish("HANevse/photonMeasure", jsonMessage.getBuffer())) {
 80a0e24:	9a05      	ldr	r2, [sp, #20]
 80a0e26:	4914      	ldr	r1, [pc, #80]	; (80a0e78 <_Z15add_Measurementfffffffffmi6String.part.9+0x1f0>)
 80a0e28:	4814      	ldr	r0, [pc, #80]	; (80a0e7c <_Z15add_Measurementfffffffffmi6String.part.9+0x1f4>)
 80a0e2a:	f001 fc2a 	bl	80a2682 <_ZN4MQTT7publishEPKcS1_>
 80a0e2e:	b908      	cbnz	r0, 80a0e34 <_Z15add_Measurementfffffffffmi6String.part.9+0x1ac>
		jsonMessage.insertKeyValue("SocketID", socketId);
		jsonMessage.insertKeyValue("Time", Timestamp);
	    }


	for(int i=0; i<3; i++) {
 80a0e30:	3c01      	subs	r4, #1
 80a0e32:	d1f7      	bne.n	80a0e24 <_Z15add_Measurementfffffffffmi6String.part.9+0x19c>
    currentL2 = (float)(((int)(currentL2 * 1000 + .5)) / 1000);
    currentL3 = (float)(((int)(currentL3 * 1000 + .5)) / 1000);
    Frequency = (float)(((int)(Frequency * 1000 + .5)) / 1000);


    JsonWriterStatic<512> jsonMessage;     
 80a0e34:	a804      	add	r0, sp, #16
 80a0e36:	f7ff fa31 	bl	80a029c <_ZN16JsonWriterStaticILj512EED1Ev>
	for(int i=0; i<3; i++) {
		if(client.publish("HANevse/photonMeasure", jsonMessage.getBuffer())) {
			break;
		}
	}
}
 80a0e3a:	f50d 7d10 	add.w	sp, sp, #576	; 0x240
 80a0e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a0e42:	bf00      	nop
 80a0e44:	447a0000 	.word	0x447a0000
 80a0e48:	3fe00000 	.word	0x3fe00000
 80a0e4c:	080a9e93 	.word	0x080a9e93
 80a0e50:	080a9e96 	.word	0x080a9e96
 80a0e54:	080a9e99 	.word	0x080a9e99
 80a0e58:	080a9e9c 	.word	0x080a9e9c
 80a0e5c:	080a9e9f 	.word	0x080a9e9f
 80a0e60:	080a9ea2 	.word	0x080a9ea2
 80a0e64:	080a9ea5 	.word	0x080a9ea5
 80a0e68:	080a9ea7 	.word	0x080a9ea7
 80a0e6c:	080a9eae 	.word	0x080a9eae
 80a0e70:	080a9f0b 	.word	0x080a9f0b
 80a0e74:	080a9eb7 	.word	0x080a9eb7
 80a0e78:	080a9ebb 	.word	0x080a9ebb
 80a0e7c:	200002d0 	.word	0x200002d0

080a0e80 <_Z15add_Measurementfffffffffmi6String>:
    //DEBUGPORT.println(time);
    DEBUGPORT.print("MQTT>\tCallback function is called at: ");
    DEBUGPORT.println(Time.format(time, TIME_FORMAT_DEFAULT));
}

void add_Measurement(float phaseVoltageL1, float phaseVoltageL2, float phaseVoltageL3, float currentL1, float currentL2, float currentL3,  float Power, float Energy, float Frequency, unsigned long Timestamp, int socketId=0, String userId="00") {
 80a0e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0e84:	461c      	mov	r4, r3
 80a0e86:	b085      	sub	sp, #20
 80a0e88:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80a0e8a:	4680      	mov	r8, r0
 80a0e8c:	9301      	str	r3, [sp, #4]
 80a0e8e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80a0e90:	4689      	mov	r9, r1
 80a0e92:	9302      	str	r3, [sp, #8]
 80a0e94:	9b15      	ldr	r3, [sp, #84]	; 0x54
	// if(userId != "00") {
	// 	userStr = "%" + userId;
	// }
	// String Body = String(phaseVoltageL1, 2) + "%" + String(phaseVoltageL2, 2) + "%" + String(phaseVoltageL3, 2) + "%"  + String(currentL1, 2) + "%" + String(currentL2, 2) + "%" + String(currentL3, 2) + "%" + String(Power, 2) + "%" + String(Energy, 2) + "%" + String(Frequency, 2) + "%" + String(Timestamp) + socketStr + userStr + "%";
	
    if ((currentL1 > 50.0)||(currentL2 > 50.0)||(currentL3 > 50.0))
 80a0e96:	492e      	ldr	r1, [pc, #184]	; (80a0f50 <_Z15add_Measurementfffffffffmi6String+0xd0>)
 80a0e98:	4620      	mov	r0, r4
    //DEBUGPORT.println(time);
    DEBUGPORT.print("MQTT>\tCallback function is called at: ");
    DEBUGPORT.println(Time.format(time, TIME_FORMAT_DEFAULT));
}

void add_Measurement(float phaseVoltageL1, float phaseVoltageL2, float phaseVoltageL3, float currentL1, float currentL2, float currentL3,  float Power, float Energy, float Frequency, unsigned long Timestamp, int socketId=0, String userId="00") {
 80a0e9a:	4692      	mov	sl, r2
 80a0e9c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80a0e9e:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80a0ea0:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80a0ea2:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
 80a0ea6:	9303      	str	r3, [sp, #12]
	// if(userId != "00") {
	// 	userStr = "%" + userId;
	// }
	// String Body = String(phaseVoltageL1, 2) + "%" + String(phaseVoltageL2, 2) + "%" + String(phaseVoltageL3, 2) + "%"  + String(currentL1, 2) + "%" + String(currentL2, 2) + "%" + String(currentL3, 2) + "%" + String(Power, 2) + "%" + String(Energy, 2) + "%" + String(Frequency, 2) + "%" + String(Timestamp) + socketStr + userStr + "%";
	
    if ((currentL1 > 50.0)||(currentL2 > 50.0)||(currentL3 > 50.0))
 80a0ea8:	f005 fba4 	bl	80a65f4 <__aeabi_fcmpgt>
 80a0eac:	2800      	cmp	r0, #0
 80a0eae:	d148      	bne.n	80a0f42 <_Z15add_Measurementfffffffffmi6String+0xc2>
 80a0eb0:	4927      	ldr	r1, [pc, #156]	; (80a0f50 <_Z15add_Measurementfffffffffmi6String+0xd0>)
 80a0eb2:	4628      	mov	r0, r5
 80a0eb4:	f005 fb9e 	bl	80a65f4 <__aeabi_fcmpgt>
 80a0eb8:	2800      	cmp	r0, #0
 80a0eba:	d142      	bne.n	80a0f42 <_Z15add_Measurementfffffffffmi6String+0xc2>
 80a0ebc:	4924      	ldr	r1, [pc, #144]	; (80a0f50 <_Z15add_Measurementfffffffffmi6String+0xd0>)
 80a0ebe:	4630      	mov	r0, r6
 80a0ec0:	f005 fb98 	bl	80a65f4 <__aeabi_fcmpgt>
 80a0ec4:	2800      	cmp	r0, #0
 80a0ec6:	d13c      	bne.n	80a0f42 <_Z15add_Measurementfffffffffmi6String+0xc2>
        return;
    if (((currentL1 < 0.1)&&(currentL2 < 0.1)&&(currentL3 < 0.1))&&((Power > phaseVoltageL1)&&(Power > phaseVoltageL2)&&(Power > phaseVoltageL3) )  )
 80a0ec8:	4620      	mov	r0, r4
 80a0eca:	f004 fd2d 	bl	80a5928 <__aeabi_f2d>
 80a0ece:	a31e      	add	r3, pc, #120	; (adr r3, 80a0f48 <_Z15add_Measurementfffffffffmi6String+0xc8>)
 80a0ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0ed4:	f004 ffee 	bl	80a5eb4 <__aeabi_dcmplt>
 80a0ed8:	b300      	cbz	r0, 80a0f1c <_Z15add_Measurementfffffffffmi6String+0x9c>
 80a0eda:	4628      	mov	r0, r5
 80a0edc:	f004 fd24 	bl	80a5928 <__aeabi_f2d>
 80a0ee0:	a319      	add	r3, pc, #100	; (adr r3, 80a0f48 <_Z15add_Measurementfffffffffmi6String+0xc8>)
 80a0ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0ee6:	f004 ffe5 	bl	80a5eb4 <__aeabi_dcmplt>
 80a0eea:	b1b8      	cbz	r0, 80a0f1c <_Z15add_Measurementfffffffffmi6String+0x9c>
 80a0eec:	4630      	mov	r0, r6
 80a0eee:	f004 fd1b 	bl	80a5928 <__aeabi_f2d>
 80a0ef2:	a315      	add	r3, pc, #84	; (adr r3, 80a0f48 <_Z15add_Measurementfffffffffmi6String+0xc8>)
 80a0ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0ef8:	f004 ffdc 	bl	80a5eb4 <__aeabi_dcmplt>
 80a0efc:	b170      	cbz	r0, 80a0f1c <_Z15add_Measurementfffffffffmi6String+0x9c>
 80a0efe:	4641      	mov	r1, r8
 80a0f00:	4638      	mov	r0, r7
 80a0f02:	f005 fb77 	bl	80a65f4 <__aeabi_fcmpgt>
 80a0f06:	b148      	cbz	r0, 80a0f1c <_Z15add_Measurementfffffffffmi6String+0x9c>
 80a0f08:	4649      	mov	r1, r9
 80a0f0a:	4638      	mov	r0, r7
 80a0f0c:	f005 fb72 	bl	80a65f4 <__aeabi_fcmpgt>
 80a0f10:	b120      	cbz	r0, 80a0f1c <_Z15add_Measurementfffffffffmi6String+0x9c>
 80a0f12:	4651      	mov	r1, sl
 80a0f14:	4638      	mov	r0, r7
 80a0f16:	f005 fb6d 	bl	80a65f4 <__aeabi_fcmpgt>
 80a0f1a:	b990      	cbnz	r0, 80a0f42 <_Z15add_Measurementfffffffffmi6String+0xc2>
 80a0f1c:	9b03      	ldr	r3, [sp, #12]
 80a0f1e:	4652      	mov	r2, sl
 80a0f20:	9313      	str	r3, [sp, #76]	; 0x4c
 80a0f22:	9b02      	ldr	r3, [sp, #8]
 80a0f24:	4649      	mov	r1, r9
 80a0f26:	9312      	str	r3, [sp, #72]	; 0x48
 80a0f28:	9b01      	ldr	r3, [sp, #4]
 80a0f2a:	4640      	mov	r0, r8
 80a0f2c:	9311      	str	r3, [sp, #68]	; 0x44
 80a0f2e:	4623      	mov	r3, r4
 80a0f30:	f8cd b040 	str.w	fp, [sp, #64]	; 0x40
 80a0f34:	960f      	str	r6, [sp, #60]	; 0x3c
 80a0f36:	950e      	str	r5, [sp, #56]	; 0x38
	for(int i=0; i<3; i++) {
		if(client.publish("HANevse/photonMeasure", jsonMessage.getBuffer())) {
			break;
		}
	}
}
 80a0f38:	b005      	add	sp, #20
 80a0f3a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0f3e:	f7ff bea3 	b.w	80a0c88 <_Z15add_Measurementfffffffffmi6String.part.9>
 80a0f42:	b005      	add	sp, #20
 80a0f44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a0f48:	9999999a 	.word	0x9999999a
 80a0f4c:	3fb99999 	.word	0x3fb99999
 80a0f50:	42480000 	.word	0x42480000

080a0f54 <_ZN10JsonWriter14insertKeyValueIlEEvPKcT_>:
	 *
	 * Uses templates so you can pass any type object that's supported by insertValue() overloads,
	 * for example: bool, int, float, double, const char *.
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
 80a0f54:	b570      	push	{r4, r5, r6, lr}
 80a0f56:	4604      	mov	r4, r0
 80a0f58:	460e      	mov	r6, r1
 80a0f5a:	4615      	mov	r5, r2
		insertCheckSeparator();
 80a0f5c:	f002 f80e 	bl	80a2f7c <_ZN10JsonWriter20insertCheckSeparatorEv>
	 * @brief Inserts a quoted string value. This escapes special characters and encodes utf-8.
	 *
	 * You would normally use insertKeyValue() or insertArrayValue() instead of calling this directly
	 * as those functions take care of inserting the separtators between items.
	 */
	void insertValue(const char *value) { insertString(value, true); }
 80a0f60:	2201      	movs	r2, #1
 80a0f62:	4631      	mov	r1, r6
 80a0f64:	4620      	mov	r0, r4
 80a0f66:	f001 ff7d 	bl	80a2e64 <_ZN10JsonWriter12insertStringEPKcb>
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
		insertValue(key);
		insertChar(':');
 80a0f6a:	4620      	mov	r0, r4
 80a0f6c:	213a      	movs	r1, #58	; 0x3a
 80a0f6e:	f001 ff2d 	bl	80a2dcc <_ZN10JsonWriter10insertCharEc>
	 * @brief Inserts a long integer value.
	 *
	 * You would normally use insertKeyValue() or insertArrayValue() instead of calling this directly
	 * as those functions take care of inserting the separators between items.
	 */
	void insertValue(long value) { insertsprintf("%ld", value); }
 80a0f72:	462a      	mov	r2, r5
 80a0f74:	4620      	mov	r0, r4
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
		insertValue(key);
		insertChar(':');
		insertValue(value);
	}
 80a0f76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	 * @brief Inserts a long integer value.
	 *
	 * You would normally use insertKeyValue() or insertArrayValue() instead of calling this directly
	 * as those functions take care of inserting the separators between items.
	 */
	void insertValue(long value) { insertsprintf("%ld", value); }
 80a0f7a:	4901      	ldr	r1, [pc, #4]	; (80a0f80 <_ZN10JsonWriter14insertKeyValueIlEEvPKcT_+0x2c>)
 80a0f7c:	f001 bf65 	b.w	80a2e4a <_ZN10JsonWriter13insertsprintfEPKcz>
 80a0f80:	080a9ed1 	.word	0x080a9ed1

080a0f84 <_Z12readRFIDCardi>:
    DEBUGPORT.println("Approximate your card to the reader...");
    DEBUGPORT.println();    
    return 1;
}

bool readRFIDCard(int Charger) {
 80a0f84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   // DEBUGPORT.print("readCard>\t");
    bool Authorized = true;
    Pianswer = 0;
 80a0f88:	4b83      	ldr	r3, [pc, #524]	; (80a1198 <_Z12readRFIDCardi+0x214>)
 80a0f8a:	2400      	movs	r4, #0
    if(Charger==1+CHARGEROFFSET)
 80a0f8c:	2801      	cmp	r0, #1
    DEBUGPORT.println("Approximate your card to the reader...");
    DEBUGPORT.println();    
    return 1;
}

bool readRFIDCard(int Charger) {
 80a0f8e:	f5ad 7d15 	sub.w	sp, sp, #596	; 0x254
   // DEBUGPORT.print("readCard>\t");
    bool Authorized = true;
    Pianswer = 0;
 80a0f92:	801c      	strh	r4, [r3, #0]
    if(Charger==1+CHARGEROFFSET)
 80a0f94:	d16a      	bne.n	80a106c <_Z12readRFIDCardi+0xe8>
    {
      // Look for new cards
        if ( ! mfrc522_Charger1.PICC_IsNewCardPresent()) 
 80a0f96:	4881      	ldr	r0, [pc, #516]	; (80a119c <_Z12readRFIDCardi+0x218>)
 80a0f98:	f000 ff77 	bl	80a1e8a <_ZN7MFRC52221PICC_IsNewCardPresentEv>
 80a0f9c:	4e7f      	ldr	r6, [pc, #508]	; (80a119c <_Z12readRFIDCardi+0x218>)
 80a0f9e:	2800      	cmp	r0, #0
 80a0fa0:	f000 80ea 	beq.w	80a1178 <_Z12readRFIDCardi+0x1f4>
        {
            return false;
        }
        // Select one of the cards
        if ( ! mfrc522_Charger1.PICC_ReadCardSerial()) 
 80a0fa4:	4630      	mov	r0, r6
 80a0fa6:	f001 f8cf 	bl	80a2148 <_ZN7MFRC52219PICC_ReadCardSerialEv>
 80a0faa:	2800      	cmp	r0, #0
 80a0fac:	f000 80e4 	beq.w	80a1178 <_Z12readRFIDCardi+0x1f4>
        {
            return false;
        }
  
        //Show UID on serial monitor
        DEBUGPORT.print("readCard>\tUID tag on charger1:");
 80a0fb0:	f003 fe60 	bl	80a4c74 <_Z16_fetch_usbserialv>
 80a0fb4:	497a      	ldr	r1, [pc, #488]	; (80a11a0 <_Z12readRFIDCardi+0x21c>)
 80a0fb6:	f003 fa57 	bl	80a4468 <_ZN5Print5printEPKc>
        String content = "";        
 80a0fba:	497a      	ldr	r1, [pc, #488]	; (80a11a4 <_Z12readRFIDCardi+0x220>)
 80a0fbc:	4668      	mov	r0, sp
 80a0fbe:	f003 f8d0 	bl	80a4162 <_ZN6StringC1EPK19__FlashStringHelper>
        //byte letter;
        for (byte i = 0; i < mfrc522_Charger1.uid.size; i++) 
 80a0fc2:	46b1      	mov	r9, r6
        {
            DEBUGPORT.print(mfrc522_Charger1.uid.uidByte[i] < 0x10 ? " 0" : " ");
 80a0fc4:	f8df 8208 	ldr.w	r8, [pc, #520]	; 80a11d0 <_Z12readRFIDCardi+0x24c>
 80a0fc8:	4f77      	ldr	r7, [pc, #476]	; (80a11a8 <_Z12readRFIDCardi+0x224>)
  
        //Show UID on serial monitor
        DEBUGPORT.print("readCard>\tUID tag on charger1:");
        String content = "";        
        //byte letter;
        for (byte i = 0; i < mfrc522_Charger1.uid.size; i++) 
 80a0fca:	7833      	ldrb	r3, [r6, #0]
 80a0fcc:	b2e5      	uxtb	r5, r4
 80a0fce:	42ab      	cmp	r3, r5
 80a0fd0:	d92c      	bls.n	80a102c <_Z12readRFIDCardi+0xa8>
        {
            DEBUGPORT.print(mfrc522_Charger1.uid.uidByte[i] < 0x10 ? " 0" : " ");
 80a0fd2:	444d      	add	r5, r9
 80a0fd4:	f003 fe4e 	bl	80a4c74 <_Z16_fetch_usbserialv>
 80a0fd8:	7869      	ldrb	r1, [r5, #1]
 80a0fda:	3401      	adds	r4, #1
 80a0fdc:	290f      	cmp	r1, #15
 80a0fde:	bf94      	ite	ls
 80a0fe0:	4641      	movls	r1, r8
 80a0fe2:	4639      	movhi	r1, r7
 80a0fe4:	f003 fa40 	bl	80a4468 <_ZN5Print5printEPKc>
            DEBUGPORT.print(mfrc522_Charger1.uid.uidByte[i], HEX);
 80a0fe8:	f003 fe44 	bl	80a4c74 <_Z16_fetch_usbserialv>
 80a0fec:	2210      	movs	r2, #16
 80a0fee:	7869      	ldrb	r1, [r5, #1]
 80a0ff0:	f003 fa57 	bl	80a44a2 <_ZN5Print11printNumberEmh>
            content.concat(String(mfrc522_Charger1.uid.uidByte[i] < 0x10 ? " 0" : " "));
 80a0ff4:	7869      	ldrb	r1, [r5, #1]
 80a0ff6:	a808      	add	r0, sp, #32
 80a0ff8:	290f      	cmp	r1, #15
 80a0ffa:	bf94      	ite	ls
 80a0ffc:	4641      	movls	r1, r8
 80a0ffe:	4639      	movhi	r1, r7
 80a1000:	f003 f8af 	bl	80a4162 <_ZN6StringC1EPK19__FlashStringHelper>
 80a1004:	a908      	add	r1, sp, #32
 80a1006:	4668      	mov	r0, sp
 80a1008:	f003 f988 	bl	80a431c <_ZN6String6concatERKS_>
 80a100c:	a808      	add	r0, sp, #32
 80a100e:	f003 f861 	bl	80a40d4 <_ZN6StringD1Ev>
            content.concat(String(mfrc522_Charger1.uid.uidByte[i], HEX));
 80a1012:	2210      	movs	r2, #16
 80a1014:	7869      	ldrb	r1, [r5, #1]
 80a1016:	a808      	add	r0, sp, #32
 80a1018:	f003 f906 	bl	80a4228 <_ZN6StringC1Ehh>
 80a101c:	a908      	add	r1, sp, #32
 80a101e:	4668      	mov	r0, sp
 80a1020:	f003 f97c 	bl	80a431c <_ZN6String6concatERKS_>
 80a1024:	a808      	add	r0, sp, #32
 80a1026:	f003 f855 	bl	80a40d4 <_ZN6StringD1Ev>
  
        //Show UID on serial monitor
        DEBUGPORT.print("readCard>\tUID tag on charger1:");
        String content = "";        
        //byte letter;
        for (byte i = 0; i < mfrc522_Charger1.uid.size; i++) 
 80a102a:	e7ce      	b.n	80a0fca <_Z12readRFIDCardi+0x46>
            DEBUGPORT.print(mfrc522_Charger1.uid.uidByte[i] < 0x10 ? " 0" : " ");
            DEBUGPORT.print(mfrc522_Charger1.uid.uidByte[i], HEX);
            content.concat(String(mfrc522_Charger1.uid.uidByte[i] < 0x10 ? " 0" : " "));
            content.concat(String(mfrc522_Charger1.uid.uidByte[i], HEX));
        }
        JsonWriterStatic<512> jsonMessage;
 80a102c:	a808      	add	r0, sp, #32
 80a102e:	f7ff fdd9 	bl	80a0be4 <_ZN16JsonWriterStaticILj512EEC1Ev>

        //Authorized=testUser(content,Charger);
        UIDtagCharger1=content.substring(1); //?????? why does it start at 1?
 80a1032:	2201      	movs	r2, #1
 80a1034:	4669      	mov	r1, sp
 80a1036:	a804      	add	r0, sp, #16
 80a1038:	f003 f9e4 	bl	80a4404 <_ZNK6String9substringEj>
 80a103c:	a904      	add	r1, sp, #16
 80a103e:	485b      	ldr	r0, [pc, #364]	; (80a11ac <_Z12readRFIDCardi+0x228>)
 80a1040:	f003 f8d9 	bl	80a41f6 <_ZN6StringaSEOS_>
 80a1044:	a804      	add	r0, sp, #16
 80a1046:	f003 f845 	bl	80a40d4 <_ZN6StringD1Ev>
	 * @brief Start a new object
	 *
	 * @param jw The JsonWriter object to insert the object into
	 */
	JsonWriterAutoObject(JsonWriter *jw) : jw(jw) {
		jw->startObject();
 80a104a:	a808      	add	r0, sp, #32
 80a104c:	f7ff f9ba 	bl	80a03c4 <_ZN10JsonWriter11startObjectEv>

        {
		JsonWriterAutoObject obj(&jsonMessage);

		jsonMessage.insertKeyValue("UserId", UIDtagCharger1);
 80a1050:	4956      	ldr	r1, [pc, #344]	; (80a11ac <_Z12readRFIDCardi+0x228>)
 80a1052:	a804      	add	r0, sp, #16
 80a1054:	f003 f8c4 	bl	80a41e0 <_ZN6StringC1ERKS_>
 80a1058:	aa04      	add	r2, sp, #16
 80a105a:	4955      	ldr	r1, [pc, #340]	; (80a11b0 <_Z12readRFIDCardi+0x22c>)
 80a105c:	a808      	add	r0, sp, #32
 80a105e:	f7ff fde4 	bl	80a0c2a <_ZN10JsonWriter14insertKeyValueI6StringEEvPKcT_>
 80a1062:	a804      	add	r0, sp, #16
 80a1064:	f003 f836 	bl	80a40d4 <_ZN6StringD1Ev>
        jsonMessage.insertKeyValue("Charger", Charger);
 80a1068:	2201      	movs	r2, #1
 80a106a:	e06b      	b.n	80a1144 <_Z12readRFIDCardi+0x1c0>
		jsonMessage.insertKeyValue("StartTime", Time.now());
	    }
        client.publish("HANevse/updateUser", jsonMessage.getBuffer());
    }
    if(Charger==2+CHARGEROFFSET)
 80a106c:	2802      	cmp	r0, #2
 80a106e:	f040 8085 	bne.w	80a117c <_Z12readRFIDCardi+0x1f8>
    {
    
        // Look for new cards
        if ( ! mfrc522_Charger2.PICC_IsNewCardPresent()) 
 80a1072:	4850      	ldr	r0, [pc, #320]	; (80a11b4 <_Z12readRFIDCardi+0x230>)
 80a1074:	f000 ff09 	bl	80a1e8a <_ZN7MFRC52221PICC_IsNewCardPresentEv>
 80a1078:	4e4e      	ldr	r6, [pc, #312]	; (80a11b4 <_Z12readRFIDCardi+0x230>)
 80a107a:	2800      	cmp	r0, #0
 80a107c:	d07c      	beq.n	80a1178 <_Z12readRFIDCardi+0x1f4>
        {
            return false;
        }
        // Select one of the cards
        if ( ! mfrc522_Charger2.PICC_ReadCardSerial()) 
 80a107e:	4630      	mov	r0, r6
 80a1080:	f001 f862 	bl	80a2148 <_ZN7MFRC52219PICC_ReadCardSerialEv>
 80a1084:	2800      	cmp	r0, #0
 80a1086:	d077      	beq.n	80a1178 <_Z12readRFIDCardi+0x1f4>
        {
            return false;
        }
        //DEBUGPORT.println("Read something on charger2");
        //Show UID on serial monitor
        DEBUGPORT.print("readCard>\tUID tag on charger2:");
 80a1088:	f003 fdf4 	bl	80a4c74 <_Z16_fetch_usbserialv>
 80a108c:	494a      	ldr	r1, [pc, #296]	; (80a11b8 <_Z12readRFIDCardi+0x234>)
 80a108e:	f003 f9eb 	bl	80a4468 <_ZN5Print5printEPKc>
        String content = "";        
 80a1092:	4944      	ldr	r1, [pc, #272]	; (80a11a4 <_Z12readRFIDCardi+0x220>)
 80a1094:	4668      	mov	r0, sp
 80a1096:	f003 f864 	bl	80a4162 <_ZN6StringC1EPK19__FlashStringHelper>
 80a109a:	4625      	mov	r5, r4
        //byte letter;
        for (byte i = 0; i < mfrc522_Charger2.uid.size; i++) 
 80a109c:	46b1      	mov	r9, r6
        {
            DEBUGPORT.print(mfrc522_Charger2.uid.uidByte[i] < 0x10 ? " 0" : " ");
 80a109e:	f8df 8130 	ldr.w	r8, [pc, #304]	; 80a11d0 <_Z12readRFIDCardi+0x24c>
 80a10a2:	4f41      	ldr	r7, [pc, #260]	; (80a11a8 <_Z12readRFIDCardi+0x224>)
        //DEBUGPORT.println("Read something on charger2");
        //Show UID on serial monitor
        DEBUGPORT.print("readCard>\tUID tag on charger2:");
        String content = "";        
        //byte letter;
        for (byte i = 0; i < mfrc522_Charger2.uid.size; i++) 
 80a10a4:	7833      	ldrb	r3, [r6, #0]
 80a10a6:	b2ec      	uxtb	r4, r5
 80a10a8:	42a3      	cmp	r3, r4
 80a10aa:	d92c      	bls.n	80a1106 <_Z12readRFIDCardi+0x182>
        {
            DEBUGPORT.print(mfrc522_Charger2.uid.uidByte[i] < 0x10 ? " 0" : " ");
 80a10ac:	444c      	add	r4, r9
 80a10ae:	f003 fde1 	bl	80a4c74 <_Z16_fetch_usbserialv>
 80a10b2:	7861      	ldrb	r1, [r4, #1]
 80a10b4:	3501      	adds	r5, #1
 80a10b6:	290f      	cmp	r1, #15
 80a10b8:	bf94      	ite	ls
 80a10ba:	4641      	movls	r1, r8
 80a10bc:	4639      	movhi	r1, r7
 80a10be:	f003 f9d3 	bl	80a4468 <_ZN5Print5printEPKc>
            DEBUGPORT.print(mfrc522_Charger2.uid.uidByte[i], HEX);
 80a10c2:	f003 fdd7 	bl	80a4c74 <_Z16_fetch_usbserialv>
 80a10c6:	2210      	movs	r2, #16
 80a10c8:	7861      	ldrb	r1, [r4, #1]
 80a10ca:	f003 f9ea 	bl	80a44a2 <_ZN5Print11printNumberEmh>
            content.concat(String(mfrc522_Charger2.uid.uidByte[i] < 0x10 ? " 0" : " "));
 80a10ce:	7861      	ldrb	r1, [r4, #1]
 80a10d0:	a808      	add	r0, sp, #32
 80a10d2:	290f      	cmp	r1, #15
 80a10d4:	bf94      	ite	ls
 80a10d6:	4641      	movls	r1, r8
 80a10d8:	4639      	movhi	r1, r7
 80a10da:	f003 f842 	bl	80a4162 <_ZN6StringC1EPK19__FlashStringHelper>
 80a10de:	a908      	add	r1, sp, #32
 80a10e0:	4668      	mov	r0, sp
 80a10e2:	f003 f91b 	bl	80a431c <_ZN6String6concatERKS_>
 80a10e6:	a808      	add	r0, sp, #32
 80a10e8:	f002 fff4 	bl	80a40d4 <_ZN6StringD1Ev>
            content.concat(String(mfrc522_Charger2.uid.uidByte[i], HEX));
 80a10ec:	2210      	movs	r2, #16
 80a10ee:	7861      	ldrb	r1, [r4, #1]
 80a10f0:	a808      	add	r0, sp, #32
 80a10f2:	f003 f899 	bl	80a4228 <_ZN6StringC1Ehh>
 80a10f6:	a908      	add	r1, sp, #32
 80a10f8:	4668      	mov	r0, sp
 80a10fa:	f003 f90f 	bl	80a431c <_ZN6String6concatERKS_>
 80a10fe:	a808      	add	r0, sp, #32
 80a1100:	f002 ffe8 	bl	80a40d4 <_ZN6StringD1Ev>
        //DEBUGPORT.println("Read something on charger2");
        //Show UID on serial monitor
        DEBUGPORT.print("readCard>\tUID tag on charger2:");
        String content = "";        
        //byte letter;
        for (byte i = 0; i < mfrc522_Charger2.uid.size; i++) 
 80a1104:	e7ce      	b.n	80a10a4 <_Z12readRFIDCardi+0x120>
            DEBUGPORT.print(mfrc522_Charger2.uid.uidByte[i], HEX);
            content.concat(String(mfrc522_Charger2.uid.uidByte[i] < 0x10 ? " 0" : " "));
            content.concat(String(mfrc522_Charger2.uid.uidByte[i], HEX));
        }
        //Authorized=testUser(content,Charger);
        UIDtagCharger2=content.substring(1);
 80a1106:	2201      	movs	r2, #1
 80a1108:	4669      	mov	r1, sp
 80a110a:	a808      	add	r0, sp, #32
 80a110c:	f003 f97a 	bl	80a4404 <_ZNK6String9substringEj>
 80a1110:	a908      	add	r1, sp, #32
 80a1112:	482a      	ldr	r0, [pc, #168]	; (80a11bc <_Z12readRFIDCardi+0x238>)
 80a1114:	f003 f86f 	bl	80a41f6 <_ZN6StringaSEOS_>
 80a1118:	a808      	add	r0, sp, #32
 80a111a:	f002 ffdb 	bl	80a40d4 <_ZN6StringD1Ev>
        JsonWriterStatic<512> jsonMessage;
 80a111e:	a808      	add	r0, sp, #32
 80a1120:	f7ff fd60 	bl	80a0be4 <_ZN16JsonWriterStaticILj512EEC1Ev>
 80a1124:	a808      	add	r0, sp, #32
 80a1126:	f7ff f94d 	bl	80a03c4 <_ZN10JsonWriter11startObjectEv>

        {
		JsonWriterAutoObject obj(&jsonMessage);
		
		jsonMessage.insertKeyValue("UserId", UIDtagCharger2);
 80a112a:	4924      	ldr	r1, [pc, #144]	; (80a11bc <_Z12readRFIDCardi+0x238>)
 80a112c:	a804      	add	r0, sp, #16
 80a112e:	f003 f857 	bl	80a41e0 <_ZN6StringC1ERKS_>
 80a1132:	aa04      	add	r2, sp, #16
 80a1134:	491e      	ldr	r1, [pc, #120]	; (80a11b0 <_Z12readRFIDCardi+0x22c>)
 80a1136:	a808      	add	r0, sp, #32
 80a1138:	f7ff fd77 	bl	80a0c2a <_ZN10JsonWriter14insertKeyValueI6StringEEvPKcT_>
 80a113c:	a804      	add	r0, sp, #16
 80a113e:	f002 ffc9 	bl	80a40d4 <_ZN6StringD1Ev>
        jsonMessage.insertKeyValue("Charger", Charger);
 80a1142:	2202      	movs	r2, #2
 80a1144:	491e      	ldr	r1, [pc, #120]	; (80a11c0 <_Z12readRFIDCardi+0x23c>)
 80a1146:	a808      	add	r0, sp, #32
 80a1148:	f7ff fd86 	bl	80a0c58 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
		jsonMessage.insertKeyValue("StartTime", Time.now());
 80a114c:	f003 fbbd 	bl	80a48ca <_ZN9TimeClass3nowEv>
 80a1150:	491c      	ldr	r1, [pc, #112]	; (80a11c4 <_Z12readRFIDCardi+0x240>)
 80a1152:	4602      	mov	r2, r0
 80a1154:	a808      	add	r0, sp, #32
 80a1156:	f7ff fefd 	bl	80a0f54 <_ZN10JsonWriter14insertKeyValueIlEEvPKcT_>

	/**
	 * @brief End the object
	 */
	~JsonWriterAutoObject() {
		jw->finishObjectOrArray();
 80a115a:	a808      	add	r0, sp, #32
 80a115c:	f001 fe44 	bl	80a2de8 <_ZN10JsonWriter19finishObjectOrArrayEv>
	    }
        client.publish("HANevse/updateUser", jsonMessage.getBuffer());
 80a1160:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80a1162:	4919      	ldr	r1, [pc, #100]	; (80a11c8 <_Z12readRFIDCardi+0x244>)
 80a1164:	4819      	ldr	r0, [pc, #100]	; (80a11cc <_Z12readRFIDCardi+0x248>)
 80a1166:	f001 fa8c 	bl	80a2682 <_ZN4MQTT7publishEPKcS1_>
            content.concat(String(mfrc522_Charger2.uid.uidByte[i] < 0x10 ? " 0" : " "));
            content.concat(String(mfrc522_Charger2.uid.uidByte[i], HEX));
        }
        //Authorized=testUser(content,Charger);
        UIDtagCharger2=content.substring(1);
        JsonWriterStatic<512> jsonMessage;
 80a116a:	a808      	add	r0, sp, #32
 80a116c:	f7ff f896 	bl	80a029c <_ZN16JsonWriterStaticILj512EED1Ev>
            return false;
        }
        //DEBUGPORT.println("Read something on charger2");
        //Show UID on serial monitor
        DEBUGPORT.print("readCard>\tUID tag on charger2:");
        String content = "";        
 80a1170:	4668      	mov	r0, sp
 80a1172:	f002 ffaf 	bl	80a40d4 <_ZN6StringD1Ev>
 80a1176:	e001      	b.n	80a117c <_Z12readRFIDCardi+0x1f8>
    {
    
        // Look for new cards
        if ( ! mfrc522_Charger2.PICC_IsNewCardPresent()) 
        {
            return false;
 80a1178:	2000      	movs	r0, #0
 80a117a:	e009      	b.n	80a1190 <_Z12readRFIDCardi+0x20c>
		jsonMessage.insertKeyValue("StartTime", Time.now());
	    }
        client.publish("HANevse/updateUser", jsonMessage.getBuffer());
        
    }
    DEBUGPORT.println("");
 80a117c:	f003 fd7a 	bl	80a4c74 <_Z16_fetch_usbserialv>
 80a1180:	4908      	ldr	r1, [pc, #32]	; (80a11a4 <_Z12readRFIDCardi+0x220>)
 80a1182:	f003 f984 	bl	80a448e <_ZN5Print7printlnEPKc>
       
    delay(500);
 80a1186:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a118a:	f003 fbaf 	bl	80a48ec <delay>
    // This whole function is not interrupted by callback() so Pianswer can't be changed in the meantime
    //client.publish("HANevse/checkupdateUser", String(Pianswer));  
     return Authorized;
 80a118e:	2001      	movs	r0, #1
}
 80a1190:	f50d 7d15 	add.w	sp, sp, #596	; 0x254
 80a1194:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a1198:	20000284 	.word	0x20000284
 80a119c:	200003b0 	.word	0x200003b0
 80a11a0:	080a9ed8 	.word	0x080a9ed8
 80a11a4:	080a9f53 	.word	0x080a9f53
 80a11a8:	080a9f55 	.word	0x080a9f55
 80a11ac:	20000328 	.word	0x20000328
 80a11b0:	080a9ef7 	.word	0x080a9ef7
 80a11b4:	200003be 	.word	0x200003be
 80a11b8:	080a9f23 	.word	0x080a9f23
 80a11bc:	20000338 	.word	0x20000338
 80a11c0:	080a9efe 	.word	0x080a9efe
 80a11c4:	080a9f06 	.word	0x080a9f06
 80a11c8:	080a9f10 	.word	0x080a9f10
 80a11cc:	200002d0 	.word	0x200002d0
 80a11d0:	080a9ed5 	.word	0x080a9ed5

080a11d4 <loop>:
	
	//RGB.control(true);
    Time.zone(1); //Dutch time zone
}

void loop() {
 80a11d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    //Check the connection to the MQTT broker
    if (client.isConnected()) {
 80a11d8:	48b1      	ldr	r0, [pc, #708]	; (80a14a0 <loop+0x2cc>)
	
	//RGB.control(true);
    Time.zone(1); //Dutch time zone
}

void loop() {
 80a11da:	b099      	sub	sp, #100	; 0x64
    //Check the connection to the MQTT broker
    if (client.isConnected()) {
 80a11dc:	f001 f8ed 	bl	80a23ba <_ZN4MQTT11isConnectedEv>
 80a11e0:	b118      	cbz	r0, 80a11ea <loop+0x16>
        client.loop();
 80a11e2:	48af      	ldr	r0, [pc, #700]	; (80a14a0 <loop+0x2cc>)
 80a11e4:	f001 fa94 	bl	80a2710 <_ZN4MQTT4loopEv>
 80a11e8:	e001      	b.n	80a11ee <loop+0x1a>
    }
    else reconnect();
 80a11ea:	f7ff fca5 	bl	80a0b38 <_Z9reconnectv>
    
    Particle.process();
 80a11ee:	f7ff f8dd 	bl	80a03ac <_ZN10CloudClass7processEv>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a11f2:	f002 fb7d 	bl	80a38f0 <spark_cloud_flag_connected>
    //currentStr = String(Current[0][0],1)+" "+String( Current[0][1],1)+" "+String(Current[0][2],1)+" "+String(Current[1][0],1)+" "+String( Current[1][1],1)+" "+String(Current[1][2],1)+" "+String(Frequency[0],2);
//+    currentStr = String(Current[0][0],1)+" "+String( PhaseVoltage[0][1],1)+" "+String(LineVoltage[0][2],1)+" "+String(Power[1][0],1)+" "+String( Energy[1],1)+" "+String(Current[1][2],1)+" "+String(Frequency[0],2);
    //currentStr=String(Current[1][2],1)+" "+currentStr.substring(0, max(200, currentStr.length()))
    //currentStr = String(CurrentList[0],1)+" "+String(CurrentList[1],1)+" "+String(CurrentList[2],1)+" "+String(CurrentList[3],1)+" "+String(CurrentList[4],1)+" "+String(CurrentList[5],1)+" "+String(CurrentList[6],1)+" "+String(CurrentList[7],1)+" "+String(CurrentList[8],1)+" "+String(CurrentList[9],1)+" "+String(CurrentList[10],1)+" "+String(CurrentList[11],1)+" "+String(CurrentList[12],1)+" "+String(CurrentList[13],1)+" "+String(CurrentList[14],1)+" "+String(CurrentList[15],1)+" "+String(CurrentList[16],1)+" "+String(CurrentList[17],1)+" "+String(CurrentList[18],1)+" "+String(CurrentList[19],1);
    if (Particle.connected() == false) {
 80a11f6:	b908      	cbnz	r0, 80a11fc <loop+0x28>
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
 80a11f8:	f002 fb72 	bl	80a38e0 <spark_cloud_flag_connect>
        Particle.connect();
    }
    //int Charger =1; //+
    int Charger = readSerialOlimex()+CHARGEROFFSET; //+
 80a11fc:	f7ff fb12 	bl	80a0824 <_Z16readSerialOlimexv>
    Particle.process();
    if(counter>10){
 80a1200:	4ca8      	ldr	r4, [pc, #672]	; (80a14a4 <loop+0x2d0>)
    //currentStr = String(CurrentList[0],1)+" "+String(CurrentList[1],1)+" "+String(CurrentList[2],1)+" "+String(CurrentList[3],1)+" "+String(CurrentList[4],1)+" "+String(CurrentList[5],1)+" "+String(CurrentList[6],1)+" "+String(CurrentList[7],1)+" "+String(CurrentList[8],1)+" "+String(CurrentList[9],1)+" "+String(CurrentList[10],1)+" "+String(CurrentList[11],1)+" "+String(CurrentList[12],1)+" "+String(CurrentList[13],1)+" "+String(CurrentList[14],1)+" "+String(CurrentList[15],1)+" "+String(CurrentList[16],1)+" "+String(CurrentList[17],1)+" "+String(CurrentList[18],1)+" "+String(CurrentList[19],1);
    if (Particle.connected() == false) {
        Particle.connect();
    }
    //int Charger =1; //+
    int Charger = readSerialOlimex()+CHARGEROFFSET; //+
 80a1202:	4606      	mov	r6, r0
    Particle.process();
 80a1204:	f7ff f8d2 	bl	80a03ac <_ZN10CloudClass7processEv>
    if(counter>10){
 80a1208:	6823      	ldr	r3, [r4, #0]
 80a120a:	2b0a      	cmp	r3, #10
 80a120c:	dd43      	ble.n	80a1296 <loop+0xc2>
		counter = 0;
 80a120e:	2300      	movs	r3, #0
 80a1210:	6023      	str	r3, [r4, #0]
		DEBUGPORT.println("LatestStartTime>\t"+String(LatestStartTime[0])+", "+String(LatestStartTime[1]));
 80a1212:	f003 fd2f 	bl	80a4c74 <_Z16_fetch_usbserialv>
 80a1216:	4da4      	ldr	r5, [pc, #656]	; (80a14a8 <loop+0x2d4>)
 80a1218:	4607      	mov	r7, r0
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a121a:	49a4      	ldr	r1, [pc, #656]	; (80a14ac <loop+0x2d8>)
 80a121c:	a810      	add	r0, sp, #64	; 0x40
 80a121e:	f002 ffa0 	bl	80a4162 <_ZN6StringC1EPK19__FlashStringHelper>
 80a1222:	220a      	movs	r2, #10
 80a1224:	6829      	ldr	r1, [r5, #0]
 80a1226:	a80c      	add	r0, sp, #48	; 0x30
 80a1228:	f003 f836 	bl	80a4298 <_ZN6StringC1Emh>
 80a122c:	a90c      	add	r1, sp, #48	; 0x30
 80a122e:	a810      	add	r0, sp, #64	; 0x40
 80a1230:	f003 f896 	bl	80a4360 <_ZplRK15StringSumHelperRK6String>
 80a1234:	499e      	ldr	r1, [pc, #632]	; (80a14b0 <loop+0x2dc>)
 80a1236:	f003 f89f 	bl	80a4378 <_ZplRK15StringSumHelperPKc>
 80a123a:	4680      	mov	r8, r0
 80a123c:	220a      	movs	r2, #10
 80a123e:	6869      	ldr	r1, [r5, #4]
 80a1240:	a814      	add	r0, sp, #80	; 0x50
 80a1242:	f003 f829 	bl	80a4298 <_ZN6StringC1Emh>
 80a1246:	a914      	add	r1, sp, #80	; 0x50
 80a1248:	4640      	mov	r0, r8
 80a124a:	f003 f889 	bl	80a4360 <_ZplRK15StringSumHelperRK6String>
 80a124e:	6801      	ldr	r1, [r0, #0]
 80a1250:	4638      	mov	r0, r7
 80a1252:	f003 f91c 	bl	80a448e <_ZN5Print7printlnEPKc>
 80a1256:	a814      	add	r0, sp, #80	; 0x50
 80a1258:	f002 ff3c 	bl	80a40d4 <_ZN6StringD1Ev>
 80a125c:	a80c      	add	r0, sp, #48	; 0x30
 80a125e:	f002 ff39 	bl	80a40d4 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80a1262:	a810      	add	r0, sp, #64	; 0x40
 80a1264:	f002 ff36 	bl	80a40d4 <_ZN6StringD1Ev>
		DEBUGPORT.println(String(Current[1][0]+ Current[1][1]+ Current[1][2]));
 80a1268:	f003 fd04 	bl	80a4c74 <_Z16_fetch_usbserialv>
 80a126c:	4d91      	ldr	r5, [pc, #580]	; (80a14b4 <loop+0x2e0>)
 80a126e:	4607      	mov	r7, r0
 80a1270:	6929      	ldr	r1, [r5, #16]
 80a1272:	68e8      	ldr	r0, [r5, #12]
 80a1274:	f004 fefa 	bl	80a606c <__addsf3>
 80a1278:	6969      	ldr	r1, [r5, #20]
 80a127a:	f004 fef7 	bl	80a606c <__addsf3>
 80a127e:	2206      	movs	r2, #6
 80a1280:	4601      	mov	r1, r0
 80a1282:	a814      	add	r0, sp, #80	; 0x50
 80a1284:	f003 f81c 	bl	80a42c0 <_ZN6StringC1Efi>
 80a1288:	9914      	ldr	r1, [sp, #80]	; 0x50
 80a128a:	4638      	mov	r0, r7
 80a128c:	f003 f8ff 	bl	80a448e <_ZN5Print7printlnEPKc>
 80a1290:	a814      	add	r0, sp, #80	; 0x50
 80a1292:	f002 ff1f 	bl	80a40d4 <_ZN6StringD1Ev>
    }
    counter++;
 80a1296:	6823      	ldr	r3, [r4, #0]
 80a1298:	3301      	adds	r3, #1
 80a129a:	6023      	str	r3, [r4, #0]
 80a129c:	f002 f922 	bl	80a34e4 <HAL_Timer_Get_Milli_Seconds>
		
    // store new measurement value if it is received correctly from energymeter (via the Olimex).
    if(millis()>nextTime[handledCharger] && (Charger==1+CHARGEROFFSET || Charger==2+CHARGEROFFSET)) //+ all the if{}
 80a12a0:	4c85      	ldr	r4, [pc, #532]	; (80a14b8 <loop+0x2e4>)
 80a12a2:	4b86      	ldr	r3, [pc, #536]	; (80a14bc <loop+0x2e8>)
 80a12a4:	7822      	ldrb	r2, [r4, #0]
 80a12a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80a12aa:	4298      	cmp	r0, r3
 80a12ac:	d916      	bls.n	80a12dc <loop+0x108>
 80a12ae:	1e70      	subs	r0, r6, #1
 80a12b0:	2801      	cmp	r0, #1
 80a12b2:	d813      	bhi.n	80a12dc <loop+0x108>
    {
        Particle.process();
 80a12b4:	f7ff f87a 	bl	80a03ac <_ZN10CloudClass7processEv>
        //getUserIdAtSocket(Charger)
        int tempCharger = Charger;
        Charger = handledCharger + 1;
        if(((activeCharger()==Charger) || (activeCharger() == 3)) && (getUserIdAtSocket(Charger)!="00"))
 80a12b8:	f7ff fb00 	bl	80a08bc <_Z13activeChargerv>
    if(millis()>nextTime[handledCharger] && (Charger==1+CHARGEROFFSET || Charger==2+CHARGEROFFSET)) //+ all the if{}
    {
        Particle.process();
        //getUserIdAtSocket(Charger)
        int tempCharger = Charger;
        Charger = handledCharger + 1;
 80a12bc:	7825      	ldrb	r5, [r4, #0]
 80a12be:	1c6e      	adds	r6, r5, #1
        if(((activeCharger()==Charger) || (activeCharger() == 3)) && (getUserIdAtSocket(Charger)!="00"))
 80a12c0:	4286      	cmp	r6, r0
 80a12c2:	d077      	beq.n	80a13b4 <loop+0x1e0>
 80a12c4:	2803      	cmp	r0, #3
 80a12c6:	d075      	beq.n	80a13b4 <loop+0x1e0>
        {
            //getUserIdAtSocket(Charger+CHARGEROFFSET);
            add_Measurement(PhaseVoltage[Charger-1][0], PhaseVoltage[Charger-1][1], PhaseVoltage[Charger-1][2], Current[Charger-1][0], Current[Charger-1][1], Current[Charger-1][2], Power[Charger-1][0]+Power[Charger-1][1]+Power[Charger-1][2], Energy[Charger-1], Frequency[Charger-1], Time.now(), Charger+CHARGEROFFSET, getUserIdAtSocket(Charger+CHARGEROFFSET));
        }
        Charger = tempCharger;
        nextTime[handledCharger] = millis() + 30000; //every 30 sec
 80a12c8:	4b7b      	ldr	r3, [pc, #492]	; (80a14b8 <loop+0x2e4>)
 80a12ca:	781c      	ldrb	r4, [r3, #0]
 80a12cc:	f002 f90a 	bl	80a34e4 <HAL_Timer_Get_Milli_Seconds>
 80a12d0:	4b7a      	ldr	r3, [pc, #488]	; (80a14bc <loop+0x2e8>)
 80a12d2:	f500 40ea 	add.w	r0, r0, #29952	; 0x7500
 80a12d6:	3030      	adds	r0, #48	; 0x30
 80a12d8:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
    }
    
//     run loop very often to check new RFID cards
    Particle.process(); //+
 80a12dc:	f7ff f866 	bl	80a03ac <_ZN10CloudClass7processEv>
    bool Authorized_Charger1=readRFIDCard(1+CHARGEROFFSET); //+
 80a12e0:	2001      	movs	r0, #1
 80a12e2:	f7ff fe4f 	bl	80a0f84 <_Z12readRFIDCardi>
    delay(5);
 80a12e6:	2005      	movs	r0, #5
 80a12e8:	f003 fb00 	bl	80a48ec <delay>
    if (Pianswer == 1 || Pianswer ==4 )    
        Authorized_Charger1 = TRUE;
    bool Authorized_Charger2=readRFIDCard(2+CHARGEROFFSET); //+
 80a12ec:	2002      	movs	r0, #2
 80a12ee:	f7ff fe49 	bl	80a0f84 <_Z12readRFIDCardi>
    delay(5);
 80a12f2:	2005      	movs	r0, #5
 80a12f4:	f003 fafa 	bl	80a48ec <delay>
    //DEBUGPORT.println(String(LatestStartTime[0]+60));
    //DEBUGPORT.println(String(Time.now()));
    //DEBUGPORT.println((LatestStartTime[0] + 60 < Time.now()),DEC);
    //if ((LatestStartTime[0] + 60 < Time.now()) && (Current[0][0]+ Current[0][1]+ Current[0][2]) < 1)
    //if (((numberOfZeroReadings[0]>10 && (LatestStartTime[0] + 60 < Time.now()))|| ((Time.now()<LatestStartTime[0] + 70)&&(LatestStartTime[0] + 60 < Time.now()))) && (Current[0][0]+ Current[0][1]+ Current[0][2]) < 1)
    if( ((numberOfZeroReadings[0]>10)||(LatestStartTime[0] + 70 > Time.now()) )&& (LatestStartTime[0] + 60 < Time.now()) && (Current[0][0]+ Current[0][1]+ Current[0][2]) < 1)
 80a12f8:	4b71      	ldr	r3, [pc, #452]	; (80a14c0 <loop+0x2ec>)
 80a12fa:	4c6b      	ldr	r4, [pc, #428]	; (80a14a8 <loop+0x2d4>)
 80a12fc:	681a      	ldr	r2, [r3, #0]
 80a12fe:	461e      	mov	r6, r3
 80a1300:	2a0a      	cmp	r2, #10
 80a1302:	dd07      	ble.n	80a1314 <loop+0x140>
 80a1304:	6823      	ldr	r3, [r4, #0]
 80a1306:	f103 053c 	add.w	r5, r3, #60	; 0x3c
 80a130a:	f003 fade 	bl	80a48ca <_ZN9TimeClass3nowEv>
 80a130e:	4285      	cmp	r5, r0
 80a1310:	d308      	bcc.n	80a1324 <loop+0x150>
 80a1312:	e016      	b.n	80a1342 <loop+0x16e>
 80a1314:	6823      	ldr	r3, [r4, #0]
 80a1316:	f103 0546 	add.w	r5, r3, #70	; 0x46
 80a131a:	f003 fad6 	bl	80a48ca <_ZN9TimeClass3nowEv>
 80a131e:	4285      	cmp	r5, r0
 80a1320:	d8f0      	bhi.n	80a1304 <loop+0x130>
 80a1322:	e00e      	b.n	80a1342 <loop+0x16e>
 80a1324:	4d63      	ldr	r5, [pc, #396]	; (80a14b4 <loop+0x2e0>)
 80a1326:	6869      	ldr	r1, [r5, #4]
 80a1328:	6828      	ldr	r0, [r5, #0]
 80a132a:	f004 fe9f 	bl	80a606c <__addsf3>
 80a132e:	68a9      	ldr	r1, [r5, #8]
 80a1330:	f004 fe9c 	bl	80a606c <__addsf3>
 80a1334:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80a1338:	f005 f93e 	bl	80a65b8 <__aeabi_fcmplt>
 80a133c:	2800      	cmp	r0, #0
 80a133e:	f040 808c 	bne.w	80a145a <loop+0x286>
    }
    //DEBUGPORT.println(Current[1][0]+ Current[1][1]+ Current[1][2],4);
    //DEBUGPORT.println(String(LatestStartTime[1]+60));
    //DEBUGPORT.println(String(Time.now()));
    //DEBUGPORT.println((LatestStartTime[1] + 60 < Time.now()),DEC);
    if( ((numberOfZeroReadings[1]>10)||(LatestStartTime[1] + 70 > Time.now()) )&& (LatestStartTime[1] + 60 < Time.now()) && (Current[1][0]+ Current[1][1]+ Current[1][2]) < 1)
 80a1342:	6873      	ldr	r3, [r6, #4]
 80a1344:	2b0a      	cmp	r3, #10
 80a1346:	dd06      	ble.n	80a1356 <loop+0x182>
 80a1348:	6864      	ldr	r4, [r4, #4]
 80a134a:	f003 fabe 	bl	80a48ca <_ZN9TimeClass3nowEv>
 80a134e:	343c      	adds	r4, #60	; 0x3c
 80a1350:	4284      	cmp	r4, r0
 80a1352:	d308      	bcc.n	80a1366 <loop+0x192>
 80a1354:	e016      	b.n	80a1384 <loop+0x1b0>
 80a1356:	6863      	ldr	r3, [r4, #4]
 80a1358:	f103 0546 	add.w	r5, r3, #70	; 0x46
 80a135c:	f003 fab5 	bl	80a48ca <_ZN9TimeClass3nowEv>
 80a1360:	4285      	cmp	r5, r0
 80a1362:	d8f1      	bhi.n	80a1348 <loop+0x174>
 80a1364:	e00e      	b.n	80a1384 <loop+0x1b0>
 80a1366:	4c53      	ldr	r4, [pc, #332]	; (80a14b4 <loop+0x2e0>)
 80a1368:	6921      	ldr	r1, [r4, #16]
 80a136a:	68e0      	ldr	r0, [r4, #12]
 80a136c:	f004 fe7e 	bl	80a606c <__addsf3>
 80a1370:	6961      	ldr	r1, [r4, #20]
 80a1372:	f004 fe7b 	bl	80a606c <__addsf3>
 80a1376:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80a137a:	f005 f91d 	bl	80a65b8 <__aeabi_fcmplt>
 80a137e:	2800      	cmp	r0, #0
 80a1380:	f040 80ae 	bne.w	80a14e0 <loop+0x30c>
        digitalWrite(AUTHENTICATION_CAR2,LOW);
        //digitalWrite(D7,LOW);
        LatestStartTime[1]=2147483548;
        //DEBUGPORT.println("Timeout charger2");
    }
    delay(100);
 80a1384:	2064      	movs	r0, #100	; 0x64
 80a1386:	f003 fab1 	bl	80a48ec <delay>
     delay(100);
    }
    */

    //Reset the UIDtag if there is no car charging
    if ((activeCharger()!=1)&&(activeCharger()!=3))
 80a138a:	f7ff fa97 	bl	80a08bc <_Z13activeChargerv>
 80a138e:	f020 0002 	bic.w	r0, r0, #2
 80a1392:	2801      	cmp	r0, #1
 80a1394:	f040 80c6 	bne.w	80a1524 <loop+0x350>
        UIDtagCharger1="No ID";
    if ((activeCharger()!=2)&&(activeCharger()!=3))
 80a1398:	f7ff fa90 	bl	80a08bc <_Z13activeChargerv>
 80a139c:	3802      	subs	r0, #2
 80a139e:	2801      	cmp	r0, #1
 80a13a0:	f200 80c5 	bhi.w	80a152e <loop+0x35a>
        UIDtagCharger2="No ID";
            
    handledCharger = !handledCharger;
 80a13a4:	4a44      	ldr	r2, [pc, #272]	; (80a14b8 <loop+0x2e4>)
 80a13a6:	7813      	ldrb	r3, [r2, #0]
 80a13a8:	f083 0301 	eor.w	r3, r3, #1
 80a13ac:	7013      	strb	r3, [r2, #0]
 80a13ae:	b019      	add	sp, #100	; 0x64
 80a13b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    {
        Particle.process();
        //getUserIdAtSocket(Charger)
        int tempCharger = Charger;
        Charger = handledCharger + 1;
        if(((activeCharger()==Charger) || (activeCharger() == 3)) && (getUserIdAtSocket(Charger)!="00"))
 80a13b4:	ac14      	add	r4, sp, #80	; 0x50
 80a13b6:	4631      	mov	r1, r6
 80a13b8:	4620      	mov	r0, r4
 80a13ba:	f7ff fb2b 	bl	80a0a14 <_Z17getUserIdAtSocketi>
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
 80a13be:	4941      	ldr	r1, [pc, #260]	; (80a14c4 <loop+0x2f0>)
 80a13c0:	4620      	mov	r0, r4
 80a13c2:	f002 ffeb 	bl	80a439c <_ZNK6String6equalsEPKc>
 80a13c6:	4607      	mov	r7, r0
 80a13c8:	4620      	mov	r0, r4
 80a13ca:	f002 fe83 	bl	80a40d4 <_ZN6StringD1Ev>
 80a13ce:	2f00      	cmp	r7, #0
 80a13d0:	f47f af7a 	bne.w	80a12c8 <loop+0xf4>
        {
            //getUserIdAtSocket(Charger+CHARGEROFFSET);
            add_Measurement(PhaseVoltage[Charger-1][0], PhaseVoltage[Charger-1][1], PhaseVoltage[Charger-1][2], Current[Charger-1][0], Current[Charger-1][1], Current[Charger-1][2], Power[Charger-1][0]+Power[Charger-1][1]+Power[Charger-1][2], Energy[Charger-1], Frequency[Charger-1], Time.now(), Charger+CHARGEROFFSET, getUserIdAtSocket(Charger+CHARGEROFFSET));
 80a13d4:	230c      	movs	r3, #12
 80a13d6:	436b      	muls	r3, r5
 80a13d8:	493b      	ldr	r1, [pc, #236]	; (80a14c8 <loop+0x2f4>)
 80a13da:	18ca      	adds	r2, r1, r3
 80a13dc:	58cf      	ldr	r7, [r1, r3]
 80a13de:	f8d2 8004 	ldr.w	r8, [r2, #4]
 80a13e2:	4934      	ldr	r1, [pc, #208]	; (80a14b4 <loop+0x2e0>)
 80a13e4:	6892      	ldr	r2, [r2, #8]
 80a13e6:	9208      	str	r2, [sp, #32]
 80a13e8:	18ca      	adds	r2, r1, r3
 80a13ea:	f8d2 9004 	ldr.w	r9, [r2, #4]
 80a13ee:	f8d2 a008 	ldr.w	sl, [r2, #8]
 80a13f2:	4a36      	ldr	r2, [pc, #216]	; (80a14cc <loop+0x2f8>)
 80a13f4:	58c9      	ldr	r1, [r1, r3]
 80a13f6:	eb02 0b03 	add.w	fp, r2, r3
 80a13fa:	58d0      	ldr	r0, [r2, r3]
 80a13fc:	9109      	str	r1, [sp, #36]	; 0x24
 80a13fe:	f8db 1004 	ldr.w	r1, [fp, #4]
 80a1402:	f004 fe33 	bl	80a606c <__addsf3>
 80a1406:	f8db 1008 	ldr.w	r1, [fp, #8]
 80a140a:	f004 fe2f 	bl	80a606c <__addsf3>
 80a140e:	4b30      	ldr	r3, [pc, #192]	; (80a14d0 <loop+0x2fc>)
 80a1410:	4a30      	ldr	r2, [pc, #192]	; (80a14d4 <loop+0x300>)
 80a1412:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80a1416:	4683      	mov	fp, r0
 80a1418:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
 80a141c:	930b      	str	r3, [sp, #44]	; 0x2c
 80a141e:	f003 fa54 	bl	80a48ca <_ZN9TimeClass3nowEv>
 80a1422:	4631      	mov	r1, r6
 80a1424:	900a      	str	r0, [sp, #40]	; 0x28
 80a1426:	4620      	mov	r0, r4
 80a1428:	f7ff faf4 	bl	80a0a14 <_Z17getUserIdAtSocketi>
 80a142c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80a142e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80a1430:	9205      	str	r2, [sp, #20]
 80a1432:	9303      	str	r3, [sp, #12]
 80a1434:	4638      	mov	r0, r7
 80a1436:	9407      	str	r4, [sp, #28]
 80a1438:	9606      	str	r6, [sp, #24]
 80a143a:	9504      	str	r5, [sp, #16]
 80a143c:	f8cd b008 	str.w	fp, [sp, #8]
 80a1440:	f8cd a004 	str.w	sl, [sp, #4]
 80a1444:	f8cd 9000 	str.w	r9, [sp]
 80a1448:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a144a:	9a08      	ldr	r2, [sp, #32]
 80a144c:	4641      	mov	r1, r8
 80a144e:	f7ff fd17 	bl	80a0e80 <_Z15add_Measurementfffffffffmi6String>
 80a1452:	4620      	mov	r0, r4
 80a1454:	f002 fe3e 	bl	80a40d4 <_ZN6StringD1Ev>
 80a1458:	e736      	b.n	80a12c8 <loop+0xf4>
    //if ((LatestStartTime[0] + 60 < Time.now()) && (Current[0][0]+ Current[0][1]+ Current[0][2]) < 1)
    //if (((numberOfZeroReadings[0]>10 && (LatestStartTime[0] + 60 < Time.now()))|| ((Time.now()<LatestStartTime[0] + 70)&&(LatestStartTime[0] + 60 < Time.now()))) && (Current[0][0]+ Current[0][1]+ Current[0][2]) < 1)
    if( ((numberOfZeroReadings[0]>10)||(LatestStartTime[0] + 70 > Time.now()) )&& (LatestStartTime[0] + 60 < Time.now()) && (Current[0][0]+ Current[0][1]+ Current[0][2]) < 1)
    {   
        //timeout with current almost zero
        DEBUGPORT.println("Timeout charger"+String(CHARGEROFFSET+1));
 80a145a:	f003 fc0b 	bl	80a4c74 <_Z16_fetch_usbserialv>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a145e:	491e      	ldr	r1, [pc, #120]	; (80a14d8 <loop+0x304>)
 80a1460:	4605      	mov	r5, r0
 80a1462:	a814      	add	r0, sp, #80	; 0x50
 80a1464:	f002 fe7d 	bl	80a4162 <_ZN6StringC1EPK19__FlashStringHelper>
 80a1468:	220a      	movs	r2, #10
 80a146a:	2101      	movs	r1, #1
 80a146c:	a810      	add	r0, sp, #64	; 0x40
 80a146e:	f002 feed 	bl	80a424c <_ZN6StringC1Eih>
 80a1472:	a910      	add	r1, sp, #64	; 0x40
 80a1474:	a814      	add	r0, sp, #80	; 0x50
 80a1476:	f002 ff73 	bl	80a4360 <_ZplRK15StringSumHelperRK6String>
 80a147a:	6801      	ldr	r1, [r0, #0]
 80a147c:	4628      	mov	r0, r5
 80a147e:	f003 f806 	bl	80a448e <_ZN5Print7printlnEPKc>
 80a1482:	a810      	add	r0, sp, #64	; 0x40
 80a1484:	f002 fe26 	bl	80a40d4 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80a1488:	a814      	add	r0, sp, #80	; 0x50
 80a148a:	f002 fe23 	bl	80a40d4 <_ZN6StringD1Ev>
        digitalWrite(AUTHENTICATION_CAR1,LOW);
 80a148e:	2100      	movs	r1, #0
 80a1490:	2005      	movs	r0, #5
 80a1492:	f003 fef6 	bl	80a5282 <digitalWrite>
        LatestStartTime[0]=2147483548;
 80a1496:	4a11      	ldr	r2, [pc, #68]	; (80a14dc <loop+0x308>)
 80a1498:	4b03      	ldr	r3, [pc, #12]	; (80a14a8 <loop+0x2d4>)
 80a149a:	601a      	str	r2, [r3, #0]
 80a149c:	e751      	b.n	80a1342 <loop+0x16e>
 80a149e:	bf00      	nop
 80a14a0:	200002d0 	.word	0x200002d0
 80a14a4:	20000008 	.word	0x20000008
 80a14a8:	2000027c 	.word	0x2000027c
 80a14ac:	080a9f42 	.word	0x080a9f42
 80a14b0:	080a9f54 	.word	0x080a9f54
 80a14b4:	20000368 	.word	0x20000368
 80a14b8:	20000286 	.word	0x20000286
 80a14bc:	20000000 	.word	0x20000000
 80a14c0:	20000114 	.word	0x20000114
 80a14c4:	080a9c4d 	.word	0x080a9c4d
 80a14c8:	20000288 	.word	0x20000288
 80a14cc:	20000380 	.word	0x20000380
 80a14d0:	20000398 	.word	0x20000398
 80a14d4:	200002b0 	.word	0x200002b0
 80a14d8:	080a9f57 	.word	0x080a9f57
 80a14dc:	7fffff9c 	.word	0x7fffff9c
    //DEBUGPORT.println(String(Time.now()));
    //DEBUGPORT.println((LatestStartTime[1] + 60 < Time.now()),DEC);
    if( ((numberOfZeroReadings[1]>10)||(LatestStartTime[1] + 70 > Time.now()) )&& (LatestStartTime[1] + 60 < Time.now()) && (Current[1][0]+ Current[1][1]+ Current[1][2]) < 1)
    {
        //timeout with current almost zero
        DEBUGPORT.println("Timeout charger"+String(CHARGEROFFSET+2));
 80a14e0:	f003 fbc8 	bl	80a4c74 <_Z16_fetch_usbserialv>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a14e4:	4914      	ldr	r1, [pc, #80]	; (80a1538 <loop+0x364>)
 80a14e6:	4604      	mov	r4, r0
 80a14e8:	a814      	add	r0, sp, #80	; 0x50
 80a14ea:	f002 fe3a 	bl	80a4162 <_ZN6StringC1EPK19__FlashStringHelper>
 80a14ee:	220a      	movs	r2, #10
 80a14f0:	2102      	movs	r1, #2
 80a14f2:	a810      	add	r0, sp, #64	; 0x40
 80a14f4:	f002 feaa 	bl	80a424c <_ZN6StringC1Eih>
 80a14f8:	a910      	add	r1, sp, #64	; 0x40
 80a14fa:	a814      	add	r0, sp, #80	; 0x50
 80a14fc:	f002 ff30 	bl	80a4360 <_ZplRK15StringSumHelperRK6String>
 80a1500:	6801      	ldr	r1, [r0, #0]
 80a1502:	4620      	mov	r0, r4
 80a1504:	f002 ffc3 	bl	80a448e <_ZN5Print7printlnEPKc>
 80a1508:	a810      	add	r0, sp, #64	; 0x40
 80a150a:	f002 fde3 	bl	80a40d4 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80a150e:	a814      	add	r0, sp, #80	; 0x50
 80a1510:	f002 fde0 	bl	80a40d4 <_ZN6StringD1Ev>
        digitalWrite(AUTHENTICATION_CAR2,LOW);
 80a1514:	2100      	movs	r1, #0
 80a1516:	2006      	movs	r0, #6
 80a1518:	f003 feb3 	bl	80a5282 <digitalWrite>
        //digitalWrite(D7,LOW);
        LatestStartTime[1]=2147483548;
 80a151c:	4a07      	ldr	r2, [pc, #28]	; (80a153c <loop+0x368>)
 80a151e:	4b08      	ldr	r3, [pc, #32]	; (80a1540 <loop+0x36c>)
 80a1520:	605a      	str	r2, [r3, #4]
 80a1522:	e72f      	b.n	80a1384 <loop+0x1b0>
    }
    */

    //Reset the UIDtag if there is no car charging
    if ((activeCharger()!=1)&&(activeCharger()!=3))
        UIDtagCharger1="No ID";
 80a1524:	4907      	ldr	r1, [pc, #28]	; (80a1544 <loop+0x370>)
 80a1526:	4808      	ldr	r0, [pc, #32]	; (80a1548 <loop+0x374>)
 80a1528:	f002 fe6d 	bl	80a4206 <_ZN6StringaSEPKc>
 80a152c:	e734      	b.n	80a1398 <loop+0x1c4>
    if ((activeCharger()!=2)&&(activeCharger()!=3))
        UIDtagCharger2="No ID";
 80a152e:	4905      	ldr	r1, [pc, #20]	; (80a1544 <loop+0x370>)
 80a1530:	4806      	ldr	r0, [pc, #24]	; (80a154c <loop+0x378>)
 80a1532:	f002 fe68 	bl	80a4206 <_ZN6StringaSEPKc>
 80a1536:	e735      	b.n	80a13a4 <loop+0x1d0>
 80a1538:	080a9f57 	.word	0x080a9f57
 80a153c:	7fffff9c 	.word	0x7fffff9c
 80a1540:	2000027c 	.word	0x2000027c
 80a1544:	080a9f67 	.word	0x080a9f67
 80a1548:	20000328 	.word	0x20000328
 80a154c:	20000338 	.word	0x20000338

080a1550 <_ZN10CloudClass8functionIA9_cIPFi6StringEEEEbRKT_DpT0_>:
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return register_function(call_raw_user_function, (void*)func, funcKey);
 80a1550:	4602      	mov	r2, r0
 80a1552:	4801      	ldr	r0, [pc, #4]	; (80a1558 <_ZN10CloudClass8functionIA9_cIPFi6StringEEEEbRKT_DpT0_+0x8>)
 80a1554:	f003 ba9c 	b.w	80a4a90 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 80a1558:	080a4a65 	.word	0x080a4a65

080a155c <setup>:
            delay(5000);
        }
    }
}

void setup() {
 80a155c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    DEBUGPORT.begin(115200); 
 80a155e:	f003 fb89 	bl	80a4c74 <_Z16_fetch_usbserialv>
 80a1562:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80a1566:	f003 fb79 	bl	80a4c5c <_ZN9USBSerial5beginEl>
    Serial1.begin(9600);
 80a156a:	f003 fc39 	bl	80a4de0 <_Z22__fetch_global_Serial1v>
 80a156e:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a1572:	f003 fc2f 	bl	80a4dd4 <_ZN11USARTSerial5beginEm>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a1576:	f002 f9bb 	bl	80a38f0 <spark_cloud_flag_connected>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80a157a:	2800      	cmp	r0, #0
 80a157c:	d070      	beq.n	80a1660 <setup+0x104>
 80a157e:	f002 f9b7 	bl	80a38f0 <spark_cloud_flag_connected>
    //DEBUGPORT.println(Voltage,5);
    //DEBUGPORT.println(String(Voltage,5));
    
    waitUntil(Particle.connected);
    
    pinMode(AUTHENTICATION_CAR1, OUTPUT); //pinMode(D1, OUTPUT); //Charger1_Authorized
 80a1582:	2101      	movs	r1, #1
 80a1584:	2005      	movs	r0, #5
 80a1586:	f003 fe6b 	bl	80a5260 <pinMode>
    pinMode(AUTHENTICATION_CAR2, OUTPUT); //pinMode(D2, OUTPUT); //Charger2_Authorized
 80a158a:	2101      	movs	r1, #1
 80a158c:	2006      	movs	r0, #6
 80a158e:	f003 fe67 	bl	80a5260 <pinMode>
    pinMode(PILOT_FEEDBACK_CAR_1,INPUT);
 80a1592:	2100      	movs	r1, #0
 80a1594:	2010      	movs	r0, #16
 80a1596:	f003 fe63 	bl	80a5260 <pinMode>
    pinMode(PILOT_FEEDBACK_CAR_2,INPUT);
 80a159a:	2100      	movs	r1, #0
 80a159c:	2011      	movs	r0, #17
 80a159e:	f003 fe5f 	bl	80a5260 <pinMode>
    pinMode(WAKEUP_OLIMEX, OUTPUT);
 80a15a2:	2101      	movs	r1, #1
 80a15a4:	2002      	movs	r0, #2
 80a15a6:	f003 fe5b 	bl	80a5260 <pinMode>
    pinMode(RESET_OLIMEX, OUTPUT);
 80a15aa:	2101      	movs	r1, #1
 80a15ac:	2004      	movs	r0, #4
 80a15ae:	f003 fe57 	bl	80a5260 <pinMode>
    pinMode(D7, OUTPUT);
 80a15b2:	2101      	movs	r1, #1
 80a15b4:	2007      	movs	r0, #7
 80a15b6:	f003 fe53 	bl	80a5260 <pinMode>
    
    digitalWrite(AUTHENTICATION_CAR1, LOW); //digitalWrite(D1,LOW);
 80a15ba:	2100      	movs	r1, #0
 80a15bc:	2005      	movs	r0, #5
 80a15be:	f003 fe60 	bl	80a5282 <digitalWrite>
    digitalWrite(AUTHENTICATION_CAR2, LOW);//digitalWrite(D2,LOW);
 80a15c2:	2100      	movs	r1, #0
 80a15c4:	2006      	movs	r0, #6
 80a15c6:	f003 fe5c 	bl	80a5282 <digitalWrite>
    digitalWrite(WAKEUP_OLIMEX, LOW);
 80a15ca:	2100      	movs	r1, #0
 80a15cc:	2002      	movs	r0, #2
 80a15ce:	f003 fe58 	bl	80a5282 <digitalWrite>
    digitalWrite(RESET_OLIMEX, HIGH);
 80a15d2:	2101      	movs	r1, #1
 80a15d4:	2004      	movs	r0, #4
 80a15d6:	f003 fe54 	bl	80a5282 <digitalWrite>
    digitalWrite(D7, LOW);
 80a15da:	2100      	movs	r1, #0
 80a15dc:	2007      	movs	r0, #7
 80a15de:	f003 fe50 	bl	80a5282 <digitalWrite>
    
    initRFID(""); //+
 80a15e2:	4921      	ldr	r1, [pc, #132]	; (80a1668 <setup+0x10c>)
 80a15e4:	4668      	mov	r0, sp
 80a15e6:	f002 fdbc 	bl	80a4162 <_ZN6StringC1EPK19__FlashStringHelper>
 80a15ea:	4668      	mov	r0, sp
 80a15ec:	f7fe fe86 	bl	80a02fc <_Z8initRFID6String>
 80a15f0:	4668      	mov	r0, sp
 80a15f2:	f002 fd6f 	bl	80a40d4 <_ZN6StringD1Ev>
    
    //Particle.process();  
    //resetOlimex("");  
    //Particle.process(); 

	Particle.function("switchTest",switchTest);
 80a15f6:	491d      	ldr	r1, [pc, #116]	; (80a166c <setup+0x110>)
 80a15f8:	481d      	ldr	r0, [pc, #116]	; (80a1670 <setup+0x114>)
 80a15fa:	f7ff ffa9 	bl	80a1550 <_ZN10CloudClass8functionIA9_cIPFi6StringEEEEbRKT_DpT0_>
    Particle.function("maxCurrentC1",maxCurrentC1);
 80a15fe:	491d      	ldr	r1, [pc, #116]	; (80a1674 <setup+0x118>)
 80a1600:	481d      	ldr	r0, [pc, #116]	; (80a1678 <setup+0x11c>)
 80a1602:	f7ff ffa5 	bl	80a1550 <_ZN10CloudClass8functionIA9_cIPFi6StringEEEEbRKT_DpT0_>
    Particle.function("maxCurrentC2",maxCurrentC2);
 80a1606:	491d      	ldr	r1, [pc, #116]	; (80a167c <setup+0x120>)
 80a1608:	481d      	ldr	r0, [pc, #116]	; (80a1680 <setup+0x124>)
 80a160a:	f7ff ffa1 	bl	80a1550 <_ZN10CloudClass8functionIA9_cIPFi6StringEEEEbRKT_DpT0_>
    Particle.function("resetOlimex",resetOlimex);
 80a160e:	491d      	ldr	r1, [pc, #116]	; (80a1684 <setup+0x128>)
 80a1610:	481d      	ldr	r0, [pc, #116]	; (80a1688 <setup+0x12c>)
 80a1612:	f7ff ff9d 	bl	80a1550 <_ZN10CloudClass8functionIA9_cIPFi6StringEEEEbRKT_DpT0_>
    Particle.function("progModeOlmx",progModeOlmx);
 80a1616:	491d      	ldr	r1, [pc, #116]	; (80a168c <setup+0x130>)
 80a1618:	481d      	ldr	r0, [pc, #116]	; (80a1690 <setup+0x134>)
 80a161a:	f7ff ff99 	bl	80a1550 <_ZN10CloudClass8functionIA9_cIPFi6StringEEEEbRKT_DpT0_>
    Particle.function("resetParticl",resetParticl);
 80a161e:	491d      	ldr	r1, [pc, #116]	; (80a1694 <setup+0x138>)
 80a1620:	481d      	ldr	r0, [pc, #116]	; (80a1698 <setup+0x13c>)
 80a1622:	f7ff ff95 	bl	80a1550 <_ZN10CloudClass8functionIA9_cIPFi6StringEEEEbRKT_DpT0_>
    //Particle.function("AuthPinsHigh",AuthPinsHigh);
    //Particle.function("AuthPinsLow",AuthPinsLow);
    Particle.function("WifiSignal",WifiSignal);
 80a1626:	491d      	ldr	r1, [pc, #116]	; (80a169c <setup+0x140>)
 80a1628:	481d      	ldr	r0, [pc, #116]	; (80a16a0 <setup+0x144>)
 80a162a:	f7ff ff91 	bl	80a1550 <_ZN10CloudClass8functionIA9_cIPFi6StringEEEEbRKT_DpT0_>
    Particle.function("initRFID",initRFID);
 80a162e:	491d      	ldr	r1, [pc, #116]	; (80a16a4 <setup+0x148>)
 80a1630:	481d      	ldr	r0, [pc, #116]	; (80a16a8 <setup+0x14c>)
 80a1632:	f7ff ff8d 	bl	80a1550 <_ZN10CloudClass8functionIA9_cIPFi6StringEEEEbRKT_DpT0_>
        return _variable(varKey, &var, DOUBLE);
    }

    static inline bool _variable(const char* varKey, const String& var)
    {
        return _variable(varKey, &var, STRING);
 80a1636:	491d      	ldr	r1, [pc, #116]	; (80a16ac <setup+0x150>)
 80a1638:	481d      	ldr	r0, [pc, #116]	; (80a16b0 <setup+0x154>)
 80a163a:	f7fe fe4d 	bl	80a02d8 <_ZN10CloudClass9_variableIcEEbPKT_PK6StringRK17CloudVariableTypeIPKcvE.isra.7>
 80a163e:	491d      	ldr	r1, [pc, #116]	; (80a16b4 <setup+0x158>)
 80a1640:	481d      	ldr	r0, [pc, #116]	; (80a16b8 <setup+0x15c>)
 80a1642:	f7fe fe49 	bl	80a02d8 <_ZN10CloudClass9_variableIcEEbPKT_PK6StringRK17CloudVariableTypeIPKcvE.isra.7>
 80a1646:	491d      	ldr	r1, [pc, #116]	; (80a16bc <setup+0x160>)
 80a1648:	481d      	ldr	r0, [pc, #116]	; (80a16c0 <setup+0x164>)
 80a164a:	f7fe fe45 	bl	80a02d8 <_ZN10CloudClass9_variableIcEEbPKT_PK6StringRK17CloudVariableTypeIPKcvE.isra.7>
    Particle.variable("currentStr",currentStr);
    Particle.variable("ShareVar",ShareVar);
    //Particle.variable("Current", Current_Str);
    Particle.variable("Topic", test);
    Particle.process();
 80a164e:	f7fe fead 	bl	80a03ac <_ZN10CloudClass7processEv>
	
	//RGB.control(true);
    Time.zone(1); //Dutch time zone
 80a1652:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80a1656:	f003 f845 	bl	80a46e4 <_ZN9TimeClass4zoneEf>
}
 80a165a:	b005      	add	sp, #20
 80a165c:	f85d fb04 	ldr.w	pc, [sp], #4
            spark_process();
 80a1660:	f002 f936 	bl	80a38d0 <spark_process>
 80a1664:	e787      	b.n	80a1576 <setup+0x1a>
 80a1666:	bf00      	nop
 80a1668:	080a9f53 	.word	0x080a9f53
 80a166c:	080a0149 	.word	0x080a0149
 80a1670:	080a9f6d 	.word	0x080a9f6d
 80a1674:	080a0191 	.word	0x080a0191
 80a1678:	080a9f78 	.word	0x080a9f78
 80a167c:	080a0215 	.word	0x080a0215
 80a1680:	080a9f85 	.word	0x080a9f85
 80a1684:	080a00c3 	.word	0x080a00c3
 80a1688:	080a9f92 	.word	0x080a9f92
 80a168c:	080a00e1 	.word	0x080a00e1
 80a1690:	080a9f9e 	.word	0x080a9f9e
 80a1694:	080a0141 	.word	0x080a0141
 80a1698:	080a9fab 	.word	0x080a9fab
 80a169c:	080a0125 	.word	0x080a0125
 80a16a0:	080a9fb8 	.word	0x080a9fb8
 80a16a4:	080a02fd 	.word	0x080a02fd
 80a16a8:	080a9fc3 	.word	0x080a9fc3
 80a16ac:	200003a0 	.word	0x200003a0
 80a16b0:	080a9fcc 	.word	0x080a9fcc
 80a16b4:	20000358 	.word	0x20000358
 80a16b8:	080a9fd7 	.word	0x080a9fd7
 80a16bc:	20000348 	.word	0x20000348
 80a16c0:	080a9fe0 	.word	0x080a9fe0

080a16c4 <_GLOBAL__sub_I_readnextLine>:
        UIDtagCharger1="No ID";
    if ((activeCharger()!=2)&&(activeCharger()!=3))
        UIDtagCharger2="No ID";
            
    handledCharger = !handledCharger;
 80a16c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
void reconnect(void);
void callback(char* topic, byte* payload, unsigned int length);
void charToString(const char in[], String &out);
void getMeasure_callback(byte* payload, unsigned int length);

String UIDtagCharger1="No ID";
 80a16c6:	4f32      	ldr	r7, [pc, #200]	; (80a1790 <_GLOBAL__sub_I_readnextLine+0xcc>)
 80a16c8:	4e32      	ldr	r6, [pc, #200]	; (80a1794 <_GLOBAL__sub_I_readnextLine+0xd0>)
 80a16ca:	4c33      	ldr	r4, [pc, #204]	; (80a1798 <_GLOBAL__sub_I_readnextLine+0xd4>)
 80a16cc:	4d33      	ldr	r5, [pc, #204]	; (80a179c <_GLOBAL__sub_I_readnextLine+0xd8>)
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a16ce:	f001 feb9 	bl	80a3444 <HAL_Pin_Map>
 80a16d2:	4639      	mov	r1, r7
 80a16d4:	4630      	mov	r0, r6
 80a16d6:	f002 fd44 	bl	80a4162 <_ZN6StringC1EPK19__FlashStringHelper>
 80a16da:	4630      	mov	r0, r6
String UIDtagCharger2="No ID";
 80a16dc:	4e30      	ldr	r6, [pc, #192]	; (80a17a0 <_GLOBAL__sub_I_readnextLine+0xdc>)
void reconnect(void);
void callback(char* topic, byte* payload, unsigned int length);
void charToString(const char in[], String &out);
void getMeasure_callback(byte* payload, unsigned int length);

String UIDtagCharger1="No ID";
 80a16de:	4622      	mov	r2, r4
 80a16e0:	4629      	mov	r1, r5
 80a16e2:	f003 fe53 	bl	80a538c <__aeabi_atexit>
String UIDtagCharger2="No ID";
 80a16e6:	4639      	mov	r1, r7
 80a16e8:	4630      	mov	r0, r6
 80a16ea:	f002 fd3a 	bl	80a4162 <_ZN6StringC1EPK19__FlashStringHelper>
 80a16ee:	4622      	mov	r2, r4
 80a16f0:	4629      	mov	r1, r5
 80a16f2:	4630      	mov	r0, r6
 80a16f4:	f003 fe4a 	bl	80a538c <__aeabi_atexit>
    bool clearCredentials(void) {
        return network_clear_credentials(*this, 0, NULL, NULL);
    }

    int selectAntenna(WLanSelectAntenna_TypeDef antenna) {
        return wlan_select_antenna(antenna);
 80a16f8:	2001      	movs	r0, #1
 80a16fa:	f002 f83d 	bl	80a3778 <wlan_select_antenna>
//SYSTEM_THREAD(ENABLED);

//MQTT setting
//byte server[] = {192,168,43,249};
//MQTT client(server, 1883, callback);
MQTT client("broker.hivemq.com", 1883, MQTT_DEFAULT_KEEPALIVE, callback, 512);
 80a16fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 80a1702:	4e28      	ldr	r6, [pc, #160]	; (80a17a4 <_GLOBAL__sub_I_readnextLine+0xe0>)
 80a1704:	9301      	str	r3, [sp, #4]
 80a1706:	4b28      	ldr	r3, [pc, #160]	; (80a17a8 <_GLOBAL__sub_I_readnextLine+0xe4>)
 80a1708:	f240 725b 	movw	r2, #1883	; 0x75b
 80a170c:	9300      	str	r3, [sp, #0]
 80a170e:	4927      	ldr	r1, [pc, #156]	; (80a17ac <_GLOBAL__sub_I_readnextLine+0xe8>)
 80a1710:	230f      	movs	r3, #15
 80a1712:	4630      	mov	r0, r6
 80a1714:	f000 fd6a 	bl	80a21ec <_ZN4MQTTC1EPctiPFvS0_PhjEi>
 80a1718:	4630      	mov	r0, r6
//char ID[] = "11111";

String test = "0";
 80a171a:	4e25      	ldr	r6, [pc, #148]	; (80a17b0 <_GLOBAL__sub_I_readnextLine+0xec>)
//SYSTEM_THREAD(ENABLED);

//MQTT setting
//byte server[] = {192,168,43,249};
//MQTT client(server, 1883, callback);
MQTT client("broker.hivemq.com", 1883, MQTT_DEFAULT_KEEPALIVE, callback, 512);
 80a171c:	4622      	mov	r2, r4
 80a171e:	4925      	ldr	r1, [pc, #148]	; (80a17b4 <_GLOBAL__sub_I_readnextLine+0xf0>)
 80a1720:	f003 fe34 	bl	80a538c <__aeabi_atexit>
//char ID[] = "11111";

String test = "0";
 80a1724:	4924      	ldr	r1, [pc, #144]	; (80a17b8 <_GLOBAL__sub_I_readnextLine+0xf4>)
 80a1726:	4630      	mov	r0, r6
 80a1728:	f002 fd1b 	bl	80a4162 <_ZN6StringC1EPK19__FlashStringHelper>
 80a172c:	4622      	mov	r2, r4
 80a172e:	4629      	mov	r1, r5
 80a1730:	4630      	mov	r0, r6
 80a1732:	f003 fe2b 	bl	80a538c <__aeabi_atexit>
int counter=11;
MFRC522 mfrc522_Charger1(SS_PIN_CHARGER1, RST_PIN);   // Create MFRC522 instance.
MFRC522 mfrc522_Charger2(SS_PIN_CHARGER2, RST_PIN);   // Create MFRC522 instance.
unsigned long LatestStartTime[2]={0,0};
bool handledCharger=0;
String ShareVar;
 80a1736:	4e21      	ldr	r6, [pc, #132]	; (80a17bc <_GLOBAL__sub_I_readnextLine+0xf8>)
 80a1738:	4f21      	ldr	r7, [pc, #132]	; (80a17c0 <_GLOBAL__sub_I_readnextLine+0xfc>)

String test = "0";


int counter=11;
MFRC522 mfrc522_Charger1(SS_PIN_CHARGER1, RST_PIN);   // Create MFRC522 instance.
 80a173a:	220a      	movs	r2, #10
 80a173c:	210b      	movs	r1, #11
 80a173e:	4821      	ldr	r0, [pc, #132]	; (80a17c4 <_GLOBAL__sub_I_readnextLine+0x100>)
 80a1740:	f000 f90c 	bl	80a195c <_ZN7MFRC522C1Ehh>
MFRC522 mfrc522_Charger2(SS_PIN_CHARGER2, RST_PIN);   // Create MFRC522 instance.
 80a1744:	220a      	movs	r2, #10
 80a1746:	210c      	movs	r1, #12
 80a1748:	481f      	ldr	r0, [pc, #124]	; (80a17c8 <_GLOBAL__sub_I_readnextLine+0x104>)
 80a174a:	f000 f907 	bl	80a195c <_ZN7MFRC522C1Ehh>
unsigned long LatestStartTime[2]={0,0};
bool handledCharger=0;
String ShareVar;
 80a174e:	4631      	mov	r1, r6
 80a1750:	4638      	mov	r0, r7
 80a1752:	f002 fd06 	bl	80a4162 <_ZN6StringC1EPK19__FlashStringHelper>
 80a1756:	4638      	mov	r0, r7
//     unsigned long StartTime;
// };

//EMeter EMeterData[NUMBEROFMETERS];
EMeter EMeterData;
String EVListStr="";
 80a1758:	4f1c      	ldr	r7, [pc, #112]	; (80a17cc <_GLOBAL__sub_I_readnextLine+0x108>)
int counter=11;
MFRC522 mfrc522_Charger1(SS_PIN_CHARGER1, RST_PIN);   // Create MFRC522 instance.
MFRC522 mfrc522_Charger2(SS_PIN_CHARGER2, RST_PIN);   // Create MFRC522 instance.
unsigned long LatestStartTime[2]={0,0};
bool handledCharger=0;
String ShareVar;
 80a175a:	4622      	mov	r2, r4
 80a175c:	4629      	mov	r1, r5
 80a175e:	f003 fe15 	bl	80a538c <__aeabi_atexit>
//     unsigned long StartTime;
// };

//EMeter EMeterData[NUMBEROFMETERS];
EMeter EMeterData;
String EVListStr="";
 80a1762:	4631      	mov	r1, r6
 80a1764:	4638      	mov	r0, r7
 80a1766:	f002 fcfc 	bl	80a4162 <_ZN6StringC1EPK19__FlashStringHelper>
 80a176a:	4638      	mov	r0, r7
String currentStr="";
 80a176c:	4f18      	ldr	r7, [pc, #96]	; (80a17d0 <_GLOBAL__sub_I_readnextLine+0x10c>)
//     unsigned long StartTime;
// };

//EMeter EMeterData[NUMBEROFMETERS];
EMeter EMeterData;
String EVListStr="";
 80a176e:	4622      	mov	r2, r4
 80a1770:	4629      	mov	r1, r5
 80a1772:	f003 fe0b 	bl	80a538c <__aeabi_atexit>
String currentStr="";
 80a1776:	4631      	mov	r1, r6
 80a1778:	4638      	mov	r0, r7
 80a177a:	f002 fcf2 	bl	80a4162 <_ZN6StringC1EPK19__FlashStringHelper>
 80a177e:	4622      	mov	r2, r4
 80a1780:	4629      	mov	r1, r5
 80a1782:	4638      	mov	r0, r7
        UIDtagCharger1="No ID";
    if ((activeCharger()!=2)&&(activeCharger()!=3))
        UIDtagCharger2="No ID";
            
    handledCharger = !handledCharger;
 80a1784:	b003      	add	sp, #12
 80a1786:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
// };

//EMeter EMeterData[NUMBEROFMETERS];
EMeter EMeterData;
String EVListStr="";
String currentStr="";
 80a178a:	f003 bdff 	b.w	80a538c <__aeabi_atexit>
 80a178e:	bf00      	nop
 80a1790:	080a9f67 	.word	0x080a9f67
 80a1794:	20000328 	.word	0x20000328
 80a1798:	20000100 	.word	0x20000100
 80a179c:	080a40d5 	.word	0x080a40d5
 80a17a0:	20000338 	.word	0x20000338
 80a17a4:	200002d0 	.word	0x200002d0
 80a17a8:	080a18c9 	.word	0x080a18c9
 80a17ac:	080a9fe6 	.word	0x080a9fe6
 80a17b0:	20000348 	.word	0x20000348
 80a17b4:	080a296f 	.word	0x080a296f
 80a17b8:	080a9ed6 	.word	0x080a9ed6
 80a17bc:	080a9f53 	.word	0x080a9f53
 80a17c0:	20000358 	.word	0x20000358
 80a17c4:	200003b0 	.word	0x200003b0
 80a17c8:	200003be 	.word	0x200003be
 80a17cc:	200002a0 	.word	0x200002a0
 80a17d0:	200003a0 	.word	0x200003a0

080a17d4 <_Z19getMeasure_callbackPhj>:
        return UIDtagCharger2;
    return "00";
}


void getMeasure_callback(byte* payload, unsigned int length) {
 80a17d4:	b530      	push	{r4, r5, lr}
 80a17d6:	4604      	mov	r4, r0
 80a17d8:	460d      	mov	r5, r1
 80a17da:	b093      	sub	sp, #76	; 0x4c

    String data = "try";
 80a17dc:	4931      	ldr	r1, [pc, #196]	; (80a18a4 <_Z19getMeasure_callbackPhj+0xd0>)
 80a17de:	a803      	add	r0, sp, #12
 80a17e0:	f002 fcbf 	bl	80a4162 <_ZN6StringC1EPK19__FlashStringHelper>
    int sockets = 0;
 80a17e4:	2300      	movs	r3, #0
    //char p[length + 1];
    //memcpy(p, payload, length);
    
    JsonParser parser1;
 80a17e6:	a807      	add	r0, sp, #28


void getMeasure_callback(byte* payload, unsigned int length) {

    String data = "try";
    int sockets = 0;
 80a17e8:	9301      	str	r3, [sp, #4]
    //char p[length + 1];
    //memcpy(p, payload, length);
    
    JsonParser parser1;
 80a17ea:	f001 f95f 	bl	80a2aac <_ZN10JsonParserC1Ev>
    parser1.clear();
 80a17ee:	a807      	add	r0, sp, #28
 80a17f0:	f001 f959 	bl	80a2aa6 <_ZN10JsonBuffer5clearEv>
    parser1.addData( (char*)(payload), length); 
 80a17f4:	462a      	mov	r2, r5
 80a17f6:	4621      	mov	r1, r4
 80a17f8:	a807      	add	r0, sp, #28
 80a17fa:	f001 f936 	bl	80a2a6a <_ZN10JsonBuffer7addDataEPKcj>
    parser1.parse();
 80a17fe:	a807      	add	r0, sp, #28
 80a1800:	f001 fdcc 	bl	80a339c <_ZN10JsonParser5parseEv>

    parser1.getOuterValueByKey("I1", EMeterData.PhaseCurrent[0]);
 80a1804:	4a28      	ldr	r2, [pc, #160]	; (80a18a8 <_Z19getMeasure_callbackPhj+0xd4>)
 80a1806:	4929      	ldr	r1, [pc, #164]	; (80a18ac <_Z19getMeasure_callbackPhj+0xd8>)
 80a1808:	a807      	add	r0, sp, #28
 80a180a:	f7ff f9d7 	bl	80a0bbc <_ZNK10JsonParser18getOuterValueByKeyIfEEbPKcRT_>
    parser1.getOuterValueByKey("I2", EMeterData.PhaseCurrent[1]);
 80a180e:	4a28      	ldr	r2, [pc, #160]	; (80a18b0 <_Z19getMeasure_callbackPhj+0xdc>)
 80a1810:	4928      	ldr	r1, [pc, #160]	; (80a18b4 <_Z19getMeasure_callbackPhj+0xe0>)
 80a1812:	a807      	add	r0, sp, #28
 80a1814:	f7ff f9d2 	bl	80a0bbc <_ZNK10JsonParser18getOuterValueByKeyIfEEbPKcRT_>
    parser1.getOuterValueByKey("I3", EMeterData.PhaseCurrent[2]);
 80a1818:	4a27      	ldr	r2, [pc, #156]	; (80a18b8 <_Z19getMeasure_callbackPhj+0xe4>)
 80a181a:	4928      	ldr	r1, [pc, #160]	; (80a18bc <_Z19getMeasure_callbackPhj+0xe8>)
 80a181c:	a807      	add	r0, sp, #28
 80a181e:	f7ff f9cd 	bl	80a0bbc <_ZNK10JsonParser18getOuterValueByKeyIfEEbPKcRT_>
	 */
	template<class T>
	bool getOuterValueByKey(const char *name, T &result) const {
		const JsonParserGeneratorRK::jsmntok_t *value;

		if (getValueTokenByKey(getOuterObject(), name, value)) {
 80a1822:	a807      	add	r0, sp, #28
 80a1824:	f001 f950 	bl	80a2ac8 <_ZNK10JsonParser14getOuterObjectEv>
 80a1828:	ab02      	add	r3, sp, #8
 80a182a:	4601      	mov	r1, r0
 80a182c:	4a24      	ldr	r2, [pc, #144]	; (80a18c0 <_Z19getMeasure_callbackPhj+0xec>)
 80a182e:	a807      	add	r0, sp, #28
 80a1830:	f001 fa84 	bl	80a2d3c <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
 80a1834:	b120      	cbz	r0, 80a1840 <_Z19getMeasure_callbackPhj+0x6c>
			return getTokenValue(value, result);
 80a1836:	aa01      	add	r2, sp, #4
 80a1838:	9902      	ldr	r1, [sp, #8]
 80a183a:	a807      	add	r0, sp, #28
 80a183c:	f001 f9b0 	bl	80a2ba0 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERi>
    parser1.getOuterValueByKey("Sockets", sockets);


    if (activeCharger() != 0) {
 80a1840:	f7ff f83c 	bl	80a08bc <_Z13activeChargerv>
 80a1844:	b330      	cbz	r0, 80a1894 <_Z19getMeasure_callbackPhj+0xc0>
        maxCurrentC1_test((int)((EMeterData.PhaseCurrent[0]+EMeterData.PhaseCurrent[1]+EMeterData.PhaseCurrent[2])/sockets)); //Emeter3, I1
 80a1846:	4c1f      	ldr	r4, [pc, #124]	; (80a18c4 <_Z19getMeasure_callbackPhj+0xf0>)
 80a1848:	6921      	ldr	r1, [r4, #16]
 80a184a:	68e0      	ldr	r0, [r4, #12]
 80a184c:	f004 fc0e 	bl	80a606c <__addsf3>
 80a1850:	6961      	ldr	r1, [r4, #20]
 80a1852:	f004 fc0b 	bl	80a606c <__addsf3>
 80a1856:	4605      	mov	r5, r0
 80a1858:	9801      	ldr	r0, [sp, #4]
 80a185a:	f004 fcbb 	bl	80a61d4 <__aeabi_i2f>
 80a185e:	4601      	mov	r1, r0
 80a1860:	4628      	mov	r0, r5
 80a1862:	f004 fdbf 	bl	80a63e4 <__aeabi_fdiv>
 80a1866:	f004 fecf 	bl	80a6608 <__aeabi_f2iz>
 80a186a:	f7ff f851 	bl	80a0910 <_Z17maxCurrentC1_testi>
        maxCurrentC2_test((int)((EMeterData.PhaseCurrent[0]+EMeterData.PhaseCurrent[1]+EMeterData.PhaseCurrent[2])/sockets)); //Emeter3, I1
 80a186e:	6921      	ldr	r1, [r4, #16]
 80a1870:	68e0      	ldr	r0, [r4, #12]
 80a1872:	f004 fbfb 	bl	80a606c <__addsf3>
 80a1876:	6961      	ldr	r1, [r4, #20]
 80a1878:	f004 fbf8 	bl	80a606c <__addsf3>
 80a187c:	4604      	mov	r4, r0
 80a187e:	9801      	ldr	r0, [sp, #4]
 80a1880:	f004 fca8 	bl	80a61d4 <__aeabi_i2f>
 80a1884:	4601      	mov	r1, r0
 80a1886:	4620      	mov	r0, r4
 80a1888:	f004 fdac 	bl	80a63e4 <__aeabi_fdiv>
 80a188c:	f004 febc 	bl	80a6608 <__aeabi_f2iz>
 80a1890:	f7ff f87e 	bl	80a0990 <_Z17maxCurrentC2_testi>
    String data = "try";
    int sockets = 0;
    //char p[length + 1];
    //memcpy(p, payload, length);
    
    JsonParser parser1;
 80a1894:	a807      	add	r0, sp, #28
 80a1896:	f001 f899 	bl	80a29cc <_ZN10JsonParserD1Ev>
}


void getMeasure_callback(byte* payload, unsigned int length) {

    String data = "try";
 80a189a:	a803      	add	r0, sp, #12
 80a189c:	f002 fc1a 	bl	80a40d4 <_ZN6StringD1Ev>

    if (activeCharger() != 0) {
        maxCurrentC1_test((int)((EMeterData.PhaseCurrent[0]+EMeterData.PhaseCurrent[1]+EMeterData.PhaseCurrent[2])/sockets)); //Emeter3, I1
        maxCurrentC2_test((int)((EMeterData.PhaseCurrent[0]+EMeterData.PhaseCurrent[1]+EMeterData.PhaseCurrent[2])/sockets)); //Emeter3, I1
    }
}
 80a18a0:	b013      	add	sp, #76	; 0x4c
 80a18a2:	bd30      	pop	{r4, r5, pc}
 80a18a4:	080a9ff8 	.word	0x080a9ff8
 80a18a8:	2000042c 	.word	0x2000042c
 80a18ac:	080a9e9c 	.word	0x080a9e9c
 80a18b0:	20000430 	.word	0x20000430
 80a18b4:	080a9e9f 	.word	0x080a9e9f
 80a18b8:	20000434 	.word	0x20000434
 80a18bc:	080a9ea2 	.word	0x080a9ea2
 80a18c0:	080a9ffc 	.word	0x080a9ffc
 80a18c4:	20000420 	.word	0x20000420

080a18c8 <_Z8callbackPcPhj>:
        
    }
    
}

void callback(char* topic, byte* payload, unsigned int length) {
 80a18c8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80a18ca:	4606      	mov	r6, r0
 80a18cc:	460c      	mov	r4, r1
    test = "99";
 80a18ce:	481b      	ldr	r0, [pc, #108]	; (80a193c <_Z8callbackPcPhj+0x74>)
 80a18d0:	491b      	ldr	r1, [pc, #108]	; (80a1940 <_Z8callbackPcPhj+0x78>)
        
    }
    
}

void callback(char* topic, byte* payload, unsigned int length) {
 80a18d2:	4615      	mov	r5, r2
    test = "99";
 80a18d4:	f002 fc97 	bl	80a4206 <_ZN6StringaSEPKc>

	if (strcmp(topic, "HANevse1/EnergyMeter")==0) {
 80a18d8:	491a      	ldr	r1, [pc, #104]	; (80a1944 <_Z8callbackPcPhj+0x7c>)
 80a18da:	4630      	mov	r0, r6
 80a18dc:	f005 f9f4 	bl	80a6cc8 <strcmp>
 80a18e0:	b940      	cbnz	r0, 80a18f4 <_Z8callbackPcPhj+0x2c>
	   test = "1";
 80a18e2:	4919      	ldr	r1, [pc, #100]	; (80a1948 <_Z8callbackPcPhj+0x80>)
 80a18e4:	4815      	ldr	r0, [pc, #84]	; (80a193c <_Z8callbackPcPhj+0x74>)
 80a18e6:	f002 fc8e 	bl	80a4206 <_ZN6StringaSEPKc>
	   getMeasure_callback(payload, length);
 80a18ea:	4629      	mov	r1, r5
 80a18ec:	4620      	mov	r0, r4
 80a18ee:	f7ff ff71 	bl	80a17d4 <_Z19getMeasure_callbackPhj>
 80a18f2:	e008      	b.n	80a1906 <_Z8callbackPcPhj+0x3e>
	}
    else
     if (strcmp(topic, "HANevse1/allowUser")==0)
 80a18f4:	4915      	ldr	r1, [pc, #84]	; (80a194c <_Z8callbackPcPhj+0x84>)
 80a18f6:	4630      	mov	r0, r6
 80a18f8:	f005 f9e6 	bl	80a6cc8 <strcmp>
 80a18fc:	b918      	cbnz	r0, 80a1906 <_Z8callbackPcPhj+0x3e>
    {
        allowUser_callback(payload, length);
 80a18fe:	4629      	mov	r1, r5
 80a1900:	4620      	mov	r0, r4
 80a1902:	f7ff f89f 	bl	80a0a44 <_Z18allowUser_callbackPhj>
        //client.publish("HANevse/photonConverted", "test photon responds");
    }
    
	time_t time = Time.now();
 80a1906:	f002 ffe0 	bl	80a48ca <_ZN9TimeClass3nowEv>
 80a190a:	4605      	mov	r5, r0
    //DEBUGPORT.println(time);
    DEBUGPORT.print("MQTT>\tCallback function is called at: ");
 80a190c:	f003 f9b2 	bl	80a4c74 <_Z16_fetch_usbserialv>
 80a1910:	490f      	ldr	r1, [pc, #60]	; (80a1950 <_Z8callbackPcPhj+0x88>)
 80a1912:	f002 fda9 	bl	80a4468 <_ZN5Print5printEPKc>
    DEBUGPORT.println(Time.format(time, TIME_FORMAT_DEFAULT));
 80a1916:	f003 f9ad 	bl	80a4c74 <_Z16_fetch_usbserialv>
 80a191a:	4604      	mov	r4, r0
 80a191c:	4b0d      	ldr	r3, [pc, #52]	; (80a1954 <_Z8callbackPcPhj+0x8c>)
 80a191e:	462a      	mov	r2, r5
 80a1920:	681b      	ldr	r3, [r3, #0]
 80a1922:	4668      	mov	r0, sp
 80a1924:	490c      	ldr	r1, [pc, #48]	; (80a1958 <_Z8callbackPcPhj+0x90>)
 80a1926:	f002 ff7d 	bl	80a4824 <_ZN9TimeClass6formatElPKc>
 80a192a:	9900      	ldr	r1, [sp, #0]
 80a192c:	4620      	mov	r0, r4
 80a192e:	f002 fdae 	bl	80a448e <_ZN5Print7printlnEPKc>
 80a1932:	4668      	mov	r0, sp
 80a1934:	f002 fbce 	bl	80a40d4 <_ZN6StringD1Ev>
}
 80a1938:	b004      	add	sp, #16
 80a193a:	bd70      	pop	{r4, r5, r6, pc}
 80a193c:	20000348 	.word	0x20000348
 80a1940:	080aa004 	.word	0x080aa004
 80a1944:	080a9e41 	.word	0x080a9e41
 80a1948:	080a9f83 	.word	0x080a9f83
 80a194c:	080a9e56 	.word	0x080a9e56
 80a1950:	080aa007 	.word	0x080aa007
 80a1954:	20000010 	.word	0x20000010
 80a1958:	20000468 	.word	0x20000468

080a195c <_ZN7MFRC522C1Ehh>:

/**
 * Constructor.
 * Prepares the output pins.
 */
MFRC522::MFRC522(	byte chipSelectPin,		///< Arduino pin connected to MFRC522's SPI slave select input (Pin 24, NSS, active low)
 80a195c:	b538      	push	{r3, r4, r5, lr}
 80a195e:	4604      	mov	r4, r0
 80a1960:	4615      	mov	r5, r2
 80a1962:	4608      	mov	r0, r1
					byte resetPowerDownPin	///< Arduino pin connected to MFRC522's reset and power down input (Pin 6, NRSTPD, active low)
				) {
	// Set the chipSelectPin as digital output, do not select the slave yet
	_chipSelectPin = chipSelectPin;
 80a1964:	7321      	strb	r1, [r4, #12]
	pinMode(_chipSelectPin, OUTPUT);
 80a1966:	2101      	movs	r1, #1
 80a1968:	f003 fc7a 	bl	80a5260 <pinMode>
	digitalWrite(_chipSelectPin, HIGH);
 80a196c:	7b20      	ldrb	r0, [r4, #12]
 80a196e:	2101      	movs	r1, #1
 80a1970:	f003 fc87 	bl	80a5282 <digitalWrite>
	
	// Set the resetPowerDownPin as digital output, do not reset or power down.
	_resetPowerDownPin = resetPowerDownPin;
	pinMode(_resetPowerDownPin, OUTPUT);
 80a1974:	4628      	mov	r0, r5
	_chipSelectPin = chipSelectPin;
	pinMode(_chipSelectPin, OUTPUT);
	digitalWrite(_chipSelectPin, HIGH);
	
	// Set the resetPowerDownPin as digital output, do not reset or power down.
	_resetPowerDownPin = resetPowerDownPin;
 80a1976:	7365      	strb	r5, [r4, #13]
	pinMode(_resetPowerDownPin, OUTPUT);
 80a1978:	2101      	movs	r1, #1
 80a197a:	f003 fc71 	bl	80a5260 <pinMode>
	digitalWrite(_resetPowerDownPin, LOW);
 80a197e:	7b60      	ldrb	r0, [r4, #13]
 80a1980:	2100      	movs	r1, #0
 80a1982:	f003 fc7e 	bl	80a5282 <digitalWrite>
	
	// Set SPI bus to work with MFRC522 chip.
	//setSPIConfig();
} // End constructor
 80a1986:	4620      	mov	r0, r4
 80a1988:	bd38      	pop	{r3, r4, r5, pc}
	...

080a198c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>:
namespace particle {

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
 80a198c:	b538      	push	{r3, r4, r5, lr}
        static SPIClass instance(Interface);
 80a198e:	4d0b      	ldr	r5, [pc, #44]	; (80a19bc <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x30>)
 80a1990:	6829      	ldr	r1, [r5, #0]
 80a1992:	f011 0401 	ands.w	r4, r1, #1
 80a1996:	d10f      	bne.n	80a19b8 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x2c>
 80a1998:	4628      	mov	r0, r5
 80a199a:	f7fe fb88 	bl	80a00ae <__cxa_guard_acquire>
 80a199e:	b158      	cbz	r0, 80a19b8 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x2c>
 80a19a0:	4621      	mov	r1, r4
 80a19a2:	4807      	ldr	r0, [pc, #28]	; (80a19c0 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x34>)
 80a19a4:	f002 f812 	bl	80a39cc <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a19a8:	4628      	mov	r0, r5
 80a19aa:	f7fe fb85 	bl	80a00b8 <__cxa_guard_release>
 80a19ae:	4a05      	ldr	r2, [pc, #20]	; (80a19c4 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x38>)
 80a19b0:	4905      	ldr	r1, [pc, #20]	; (80a19c8 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x3c>)
 80a19b2:	4803      	ldr	r0, [pc, #12]	; (80a19c0 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x34>)
 80a19b4:	f003 fcea 	bl	80a538c <__aeabi_atexit>
        return instance;
    }
 80a19b8:	4801      	ldr	r0, [pc, #4]	; (80a19c0 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x34>)
 80a19ba:	bd38      	pop	{r3, r4, r5, pc}
 80a19bc:	20000104 	.word	0x20000104
 80a19c0:	20000108 	.word	0x20000108
 80a19c4:	20000100 	.word	0x20000100
 80a19c8:	080a02c7 	.word	0x080a02c7

080a19cc <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8transferEh.isra.9>:
        return instance().setClockSpeed(value, scale);
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
 80a19cc:	b510      	push	{r4, lr}
 80a19ce:	4604      	mov	r4, r0
        return instance().transfer(data);
 80a19d0:	f7ff ffdc 	bl	80a198c <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
 80a19d4:	4621      	mov	r1, r4
    }
 80a19d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
 80a19da:	f002 b816 	b.w	80a3a0a <_ZN8SPIClass8transferEh>

080a19de <_ZN7MFRC52217PCD_WriteRegisterEhh>:
 * Writes a byte to the specified register in the MFRC522 chip.
 * The interface is described in the datasheet section 8.1.2.
 */
void MFRC522::PCD_WriteRegister(	byte reg,		///< The register to write to. One of the PCD_Register enums.
									byte value		///< The value to write.
								) {
 80a19de:	b570      	push	{r4, r5, r6, lr}
 80a19e0:	460e      	mov	r6, r1
 80a19e2:	4615      	mov	r5, r2
 80a19e4:	4604      	mov	r4, r0
	digitalWrite(_chipSelectPin, LOW);		// Select slave
 80a19e6:	2100      	movs	r1, #0
 80a19e8:	7b00      	ldrb	r0, [r0, #12]
 80a19ea:	f003 fc4a 	bl	80a5282 <digitalWrite>
	SPI.transfer(reg & 0x7E);					// MSB == 0 is for writing. LSB is not used in address. Datasheet section 8.1.2.3.
 80a19ee:	f006 007e 	and.w	r0, r6, #126	; 0x7e
 80a19f2:	f7ff ffeb 	bl	80a19cc <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8transferEh.isra.9>
	SPI.transfer(value);
 80a19f6:	4628      	mov	r0, r5
 80a19f8:	f7ff ffe8 	bl	80a19cc <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8transferEh.isra.9>
	digitalWrite(_chipSelectPin, HIGH);		// Release slave again
 80a19fc:	7b20      	ldrb	r0, [r4, #12]
 80a19fe:	2101      	movs	r1, #1
} // End PCD_WriteRegister()
 80a1a00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
									byte value		///< The value to write.
								) {
	digitalWrite(_chipSelectPin, LOW);		// Select slave
	SPI.transfer(reg & 0x7E);					// MSB == 0 is for writing. LSB is not used in address. Datasheet section 8.1.2.3.
	SPI.transfer(value);
	digitalWrite(_chipSelectPin, HIGH);		// Release slave again
 80a1a04:	f003 bc3d 	b.w	80a5282 <digitalWrite>

080a1a08 <_ZN7MFRC52217PCD_WriteRegisterEhhPh>:
 * The interface is described in the datasheet section 8.1.2.
 */
void MFRC522::PCD_WriteRegister(	byte reg,		///< The register to write to. One of the PCD_Register enums.
									byte count,		///< The number of bytes to write to the register
									byte *values	///< The values to write. Byte array.
								) {
 80a1a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1a0a:	460d      	mov	r5, r1
 80a1a0c:	4614      	mov	r4, r2
	digitalWrite(_chipSelectPin, LOW);		// Select slave
 80a1a0e:	2100      	movs	r1, #0
 * The interface is described in the datasheet section 8.1.2.
 */
void MFRC522::PCD_WriteRegister(	byte reg,		///< The register to write to. One of the PCD_Register enums.
									byte count,		///< The number of bytes to write to the register
									byte *values	///< The values to write. Byte array.
								) {
 80a1a10:	4606      	mov	r6, r0
	digitalWrite(_chipSelectPin, LOW);		// Select slave
 80a1a12:	7b00      	ldrb	r0, [r0, #12]
 * The interface is described in the datasheet section 8.1.2.
 */
void MFRC522::PCD_WriteRegister(	byte reg,		///< The register to write to. One of the PCD_Register enums.
									byte count,		///< The number of bytes to write to the register
									byte *values	///< The values to write. Byte array.
								) {
 80a1a14:	461f      	mov	r7, r3
	digitalWrite(_chipSelectPin, LOW);		// Select slave
 80a1a16:	f003 fc34 	bl	80a5282 <digitalWrite>
	SPI.transfer(reg & 0x7E);				// MSB == 0 is for writing. LSB is not used in address. Datasheet section 8.1.2.3.
 80a1a1a:	f005 007e 	and.w	r0, r5, #126	; 0x7e
 80a1a1e:	f7ff ffd5 	bl	80a19cc <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8transferEh.isra.9>
 80a1a22:	3c01      	subs	r4, #1
 80a1a24:	1e7d      	subs	r5, r7, #1
 80a1a26:	443c      	add	r4, r7
	for (byte index = 0; index < count; index++) {
 80a1a28:	42a5      	cmp	r5, r4
 80a1a2a:	d004      	beq.n	80a1a36 <_ZN7MFRC52217PCD_WriteRegisterEhhPh+0x2e>
		SPI.transfer(values[index]);
 80a1a2c:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 80a1a30:	f7ff ffcc 	bl	80a19cc <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8transferEh.isra.9>
									byte count,		///< The number of bytes to write to the register
									byte *values	///< The values to write. Byte array.
								) {
	digitalWrite(_chipSelectPin, LOW);		// Select slave
	SPI.transfer(reg & 0x7E);				// MSB == 0 is for writing. LSB is not used in address. Datasheet section 8.1.2.3.
	for (byte index = 0; index < count; index++) {
 80a1a34:	e7f8      	b.n	80a1a28 <_ZN7MFRC52217PCD_WriteRegisterEhhPh+0x20>
		SPI.transfer(values[index]);
	}
	digitalWrite(_chipSelectPin, HIGH);		// Release slave again
 80a1a36:	7b30      	ldrb	r0, [r6, #12]
 80a1a38:	2101      	movs	r1, #1
} // End PCD_WriteRegister()
 80a1a3a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	digitalWrite(_chipSelectPin, LOW);		// Select slave
	SPI.transfer(reg & 0x7E);				// MSB == 0 is for writing. LSB is not used in address. Datasheet section 8.1.2.3.
	for (byte index = 0; index < count; index++) {
		SPI.transfer(values[index]);
	}
	digitalWrite(_chipSelectPin, HIGH);		// Release slave again
 80a1a3e:	f003 bc20 	b.w	80a5282 <digitalWrite>

080a1a42 <_ZN7MFRC52216PCD_ReadRegisterEh>:
/**
 * Reads a byte from the specified register in the MFRC522 chip.
 * The interface is described in the datasheet section 8.1.2.
 */
byte MFRC522::PCD_ReadRegister(	byte reg	///< The register to read from. One of the PCD_Register enums.
								) {
 80a1a42:	b538      	push	{r3, r4, r5, lr}
 80a1a44:	460c      	mov	r4, r1
 80a1a46:	4605      	mov	r5, r0
	byte value;
	digitalWrite(_chipSelectPin, LOW);			// Select slave
 80a1a48:	2100      	movs	r1, #0
 80a1a4a:	7b00      	ldrb	r0, [r0, #12]
 80a1a4c:	f003 fc19 	bl	80a5282 <digitalWrite>
	SPI.transfer(0x80 | (reg & 0x7E));			// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
 80a1a50:	f004 007e 	and.w	r0, r4, #126	; 0x7e
 80a1a54:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 80a1a58:	f7ff ffb8 	bl	80a19cc <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8transferEh.isra.9>
	value = SPI.transfer(0);					// Read the value back. Send 0 to stop reading.
 80a1a5c:	2000      	movs	r0, #0
 80a1a5e:	f7ff ffb5 	bl	80a19cc <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8transferEh.isra.9>
 80a1a62:	4604      	mov	r4, r0
	digitalWrite(_chipSelectPin, HIGH);			// Release slave again
 80a1a64:	2101      	movs	r1, #1
 80a1a66:	7b28      	ldrb	r0, [r5, #12]
 80a1a68:	f003 fc0b 	bl	80a5282 <digitalWrite>
	return value;
} // End PCD_ReadRegister()
 80a1a6c:	4620      	mov	r0, r4
 80a1a6e:	bd38      	pop	{r3, r4, r5, pc}

080a1a70 <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>:
/**
 * Sets the bits given in mask in register reg.
 */
void MFRC522::PCD_SetRegisterBitMask(	byte reg,	///< The register to update. One of the PCD_Register enums.
										byte mask	///< The bits to set.
									) { 
 80a1a70:	b570      	push	{r4, r5, r6, lr}
 80a1a72:	4605      	mov	r5, r0
 80a1a74:	460e      	mov	r6, r1
 80a1a76:	4614      	mov	r4, r2
	byte tmp;
	tmp = PCD_ReadRegister(reg);
 80a1a78:	f7ff ffe3 	bl	80a1a42 <_ZN7MFRC52216PCD_ReadRegisterEh>
	PCD_WriteRegister(reg, tmp | mask);			// set bit mask
 80a1a7c:	ea40 0204 	orr.w	r2, r0, r4
 80a1a80:	4631      	mov	r1, r6
 80a1a82:	4628      	mov	r0, r5
} // End PCD_SetRegisterBitMask()
 80a1a84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
void MFRC522::PCD_SetRegisterBitMask(	byte reg,	///< The register to update. One of the PCD_Register enums.
										byte mask	///< The bits to set.
									) { 
	byte tmp;
	tmp = PCD_ReadRegister(reg);
	PCD_WriteRegister(reg, tmp | mask);			// set bit mask
 80a1a88:	b2d2      	uxtb	r2, r2
 80a1a8a:	f7ff bfa8 	b.w	80a19de <_ZN7MFRC52217PCD_WriteRegisterEhh>

080a1a8e <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>:
/**
 * Clears the bits given in mask from register reg.
 */
void MFRC522::PCD_ClearRegisterBitMask(	byte reg,	///< The register to update. One of the PCD_Register enums.
										byte mask	///< The bits to clear.
									  ) {
 80a1a8e:	b570      	push	{r4, r5, r6, lr}
 80a1a90:	4605      	mov	r5, r0
 80a1a92:	460e      	mov	r6, r1
 80a1a94:	4614      	mov	r4, r2
	byte tmp;
	tmp = PCD_ReadRegister(reg);
 80a1a96:	f7ff ffd4 	bl	80a1a42 <_ZN7MFRC52216PCD_ReadRegisterEh>
	PCD_WriteRegister(reg, tmp & (~mask));		// clear bit mask
 80a1a9a:	ea20 0204 	bic.w	r2, r0, r4
 80a1a9e:	4631      	mov	r1, r6
 80a1aa0:	4628      	mov	r0, r5
} // End PCD_ClearRegisterBitMask()
 80a1aa2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
void MFRC522::PCD_ClearRegisterBitMask(	byte reg,	///< The register to update. One of the PCD_Register enums.
										byte mask	///< The bits to clear.
									  ) {
	byte tmp;
	tmp = PCD_ReadRegister(reg);
	PCD_WriteRegister(reg, tmp & (~mask));		// clear bit mask
 80a1aa6:	b2d2      	uxtb	r2, r2
 80a1aa8:	f7ff bf99 	b.w	80a19de <_ZN7MFRC52217PCD_WriteRegisterEhh>

080a1aac <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>:
 * @return STATUS_OK on success, STATUS_??? otherwise.
 */
byte MFRC522::PCD_CalculateCRC(	byte *data,		///< In: Pointer to the data to transfer to the FIFO for CRC calculation.
								byte length,	///< In: The number of bytes to transfer.
								byte *result	///< Out: Pointer to result buffer. Result is written to result[0..1], low byte first.
					 ) {
 80a1aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1aae:	4604      	mov	r4, r0
 80a1ab0:	4615      	mov	r5, r2
 80a1ab2:	460f      	mov	r7, r1
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop any active command.
 80a1ab4:	2200      	movs	r2, #0
 80a1ab6:	2102      	movs	r1, #2
 * @return STATUS_OK on success, STATUS_??? otherwise.
 */
byte MFRC522::PCD_CalculateCRC(	byte *data,		///< In: Pointer to the data to transfer to the FIFO for CRC calculation.
								byte length,	///< In: The number of bytes to transfer.
								byte *result	///< Out: Pointer to result buffer. Result is written to result[0..1], low byte first.
					 ) {
 80a1ab8:	461e      	mov	r6, r3
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop any active command.
 80a1aba:	f7ff ff90 	bl	80a19de <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(DivIrqReg, 0x04);					// Clear the CRCIRq interrupt request bit
 80a1abe:	2204      	movs	r2, #4
 80a1ac0:	210a      	movs	r1, #10
 80a1ac2:	4620      	mov	r0, r4
 80a1ac4:	f7ff ff8b 	bl	80a19de <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_SetRegisterBitMask(FIFOLevelReg, 0x80);		// FlushBuffer = 1, FIFO initialization
 80a1ac8:	2280      	movs	r2, #128	; 0x80
 80a1aca:	2114      	movs	r1, #20
 80a1acc:	4620      	mov	r0, r4
 80a1ace:	f7ff ffcf 	bl	80a1a70 <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>
	PCD_WriteRegister(FIFODataReg, length, data);		// Write data to the FIFO
 80a1ad2:	462a      	mov	r2, r5
 80a1ad4:	463b      	mov	r3, r7
 80a1ad6:	2112      	movs	r1, #18
 80a1ad8:	4620      	mov	r0, r4
 80a1ada:	f7ff ff95 	bl	80a1a08 <_ZN7MFRC52217PCD_WriteRegisterEhhPh>
	PCD_WriteRegister(CommandReg, PCD_CalcCRC);		// Start the calculation
 80a1ade:	2203      	movs	r2, #3
 80a1ae0:	2102      	movs	r1, #2
 80a1ae2:	4620      	mov	r0, r4
 80a1ae4:	f7ff ff7b 	bl	80a19de <_ZN7MFRC52217PCD_WriteRegisterEhh>
 80a1ae8:	f241 3588 	movw	r5, #5000	; 0x1388
	
	// Wait for the CRC calculation to complete. Each iteration of the while-loop takes 17.73�s.
	word i = 5000;
	byte n;
	while (1) {
		n = PCD_ReadRegister(DivIrqReg);	// DivIrqReg[7..0] bits are: Set2 reserved reserved MfinActIRq   reserved CRCIRq reserved reserved
 80a1aec:	210a      	movs	r1, #10
 80a1aee:	4620      	mov	r0, r4
 80a1af0:	f7ff ffa7 	bl	80a1a42 <_ZN7MFRC52216PCD_ReadRegisterEh>
		if (n & 0x04) {						// CRCIRq bit set - calculation done
 80a1af4:	0743      	lsls	r3, r0, #29
 80a1af6:	d405      	bmi.n	80a1b04 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x58>
 80a1af8:	3d01      	subs	r5, #1
 80a1afa:	b2ad      	uxth	r5, r5
			break;
		}
		if (--i == 0) {						// The emergency break. We will eventually terminate on this one after 89ms. Communication with the MFRC522 might be down.
 80a1afc:	2d00      	cmp	r5, #0
 80a1afe:	d1f5      	bne.n	80a1aec <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x40>
			return STATUS_TIMEOUT;
 80a1b00:	2004      	movs	r0, #4
	
	// Transfer the result from the registers to the result buffer
	result[0] = PCD_ReadRegister(CRCResultRegL);
	result[1] = PCD_ReadRegister(CRCResultRegH);
	return STATUS_OK;
} // End PCD_CalculateCRC()
 80a1b02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
		if (--i == 0) {						// The emergency break. We will eventually terminate on this one after 89ms. Communication with the MFRC522 might be down.
			return STATUS_TIMEOUT;
		}
	}
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop calculating CRC for new content in the FIFO.
 80a1b04:	2200      	movs	r2, #0
 80a1b06:	4620      	mov	r0, r4
 80a1b08:	2102      	movs	r1, #2
 80a1b0a:	f7ff ff68 	bl	80a19de <_ZN7MFRC52217PCD_WriteRegisterEhh>
	
	// Transfer the result from the registers to the result buffer
	result[0] = PCD_ReadRegister(CRCResultRegL);
 80a1b0e:	2144      	movs	r1, #68	; 0x44
 80a1b10:	4620      	mov	r0, r4
 80a1b12:	f7ff ff96 	bl	80a1a42 <_ZN7MFRC52216PCD_ReadRegisterEh>
	result[1] = PCD_ReadRegister(CRCResultRegH);
 80a1b16:	2142      	movs	r1, #66	; 0x42
		}
	}
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop calculating CRC for new content in the FIFO.
	
	// Transfer the result from the registers to the result buffer
	result[0] = PCD_ReadRegister(CRCResultRegL);
 80a1b18:	7030      	strb	r0, [r6, #0]
	result[1] = PCD_ReadRegister(CRCResultRegH);
 80a1b1a:	4620      	mov	r0, r4
 80a1b1c:	f7ff ff91 	bl	80a1a42 <_ZN7MFRC52216PCD_ReadRegisterEh>
 80a1b20:	7070      	strb	r0, [r6, #1]
	return STATUS_OK;
 80a1b22:	2001      	movs	r0, #1
 80a1b24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1b26 <_ZN7MFRC5229PCD_ResetEv>:
} // End PCD_Init()

/**
 * Performs a soft reset on the MFRC522 chip and waits for it to be ready again.
 */
void MFRC522::PCD_Reset() {
 80a1b26:	b510      	push	{r4, lr}
	PCD_WriteRegister(CommandReg, PCD_SoftReset);	// Issue the SoftReset command.
 80a1b28:	220f      	movs	r2, #15
 80a1b2a:	2102      	movs	r1, #2
} // End PCD_Init()

/**
 * Performs a soft reset on the MFRC522 chip and waits for it to be ready again.
 */
void MFRC522::PCD_Reset() {
 80a1b2c:	4604      	mov	r4, r0
	PCD_WriteRegister(CommandReg, PCD_SoftReset);	// Issue the SoftReset command.
 80a1b2e:	f7ff ff56 	bl	80a19de <_ZN7MFRC52217PCD_WriteRegisterEhh>
	// The datasheet does not mention how long the SoftRest command takes to complete.
	// But the MFRC522 might have been in soft power-down mode (triggered by bit 4 of CommandReg) 
	// Section 8.8.2 in the datasheet says the oscillator start-up time is the start up time of the crystal + 37,74�s. Let us be generous: 50ms.
	delay(50);
 80a1b32:	2032      	movs	r0, #50	; 0x32
 80a1b34:	f002 feda 	bl	80a48ec <delay>
	// Wait for the PowerDown bit in CommandReg to be cleared
	while (PCD_ReadRegister(CommandReg) & (1<<4)) {
 80a1b38:	2102      	movs	r1, #2
 80a1b3a:	4620      	mov	r0, r4
 80a1b3c:	f7ff ff81 	bl	80a1a42 <_ZN7MFRC52216PCD_ReadRegisterEh>
 80a1b40:	06c3      	lsls	r3, r0, #27
 80a1b42:	d4f9      	bmi.n	80a1b38 <_ZN7MFRC5229PCD_ResetEv+0x12>
		// PCD still restarting - unlikely after waiting 50ms, but better safe than sorry.
	}
} // End PCD_Reset()
 80a1b44:	bd10      	pop	{r4, pc}

080a1b46 <_ZN7MFRC52213PCD_AntennaOnEv>:

/**
 * Turns the antenna on by enabling pins TX1 and TX2.
 * After a reset these pins disabled.
 */
void MFRC522::PCD_AntennaOn() {
 80a1b46:	b510      	push	{r4, lr}
	byte value = PCD_ReadRegister(TxControlReg);
 80a1b48:	2128      	movs	r1, #40	; 0x28

/**
 * Turns the antenna on by enabling pins TX1 and TX2.
 * After a reset these pins disabled.
 */
void MFRC522::PCD_AntennaOn() {
 80a1b4a:	4604      	mov	r4, r0
	byte value = PCD_ReadRegister(TxControlReg);
 80a1b4c:	f7ff ff79 	bl	80a1a42 <_ZN7MFRC52216PCD_ReadRegisterEh>
	if ((value & 0x03) != 0x03) {
 80a1b50:	f000 0303 	and.w	r3, r0, #3
 80a1b54:	2b03      	cmp	r3, #3
 80a1b56:	d008      	beq.n	80a1b6a <_ZN7MFRC52213PCD_AntennaOnEv+0x24>
		PCD_WriteRegister(TxControlReg, value | 0x03);
 80a1b58:	f040 0203 	orr.w	r2, r0, #3
 80a1b5c:	b2d2      	uxtb	r2, r2
 80a1b5e:	4620      	mov	r0, r4
	}
} // End PCD_AntennaOn()
 80a1b60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 * After a reset these pins disabled.
 */
void MFRC522::PCD_AntennaOn() {
	byte value = PCD_ReadRegister(TxControlReg);
	if ((value & 0x03) != 0x03) {
		PCD_WriteRegister(TxControlReg, value | 0x03);
 80a1b64:	2128      	movs	r1, #40	; 0x28
 80a1b66:	f7ff bf3a 	b.w	80a19de <_ZN7MFRC52217PCD_WriteRegisterEhh>
 80a1b6a:	bd10      	pop	{r4, pc}

080a1b6c <_ZN7MFRC5228PCD_InitEv>:
/////////////////////////////////////////////////////////////////////////////////////

/**
 * Initializes the MFRC522 chip.
 */
void MFRC522::PCD_Init() {
 80a1b6c:	b510      	push	{r4, lr}
 80a1b6e:	4604      	mov	r4, r0
	if (digitalRead(_resetPowerDownPin) == LOW) { //The MFRC522 chip is in power down mode.
 80a1b70:	7b40      	ldrb	r0, [r0, #13]
 80a1b72:	f003 fb9f 	bl	80a52b4 <digitalRead>
 80a1b76:	b938      	cbnz	r0, 80a1b88 <_ZN7MFRC5228PCD_InitEv+0x1c>
		digitalWrite(_resetPowerDownPin, HIGH);	// Exit power down mode. This triggers a hard reset.
 80a1b78:	7b60      	ldrb	r0, [r4, #13]
 80a1b7a:	2101      	movs	r1, #1
 80a1b7c:	f003 fb81 	bl	80a5282 <digitalWrite>
		// Section 8.8.2 in the datasheet says the oscillator start-up time is the start up time of the crystal + 37,74�s. Let us be generous: 50ms.
		delay(50);
 80a1b80:	2032      	movs	r0, #50	; 0x32
 80a1b82:	f002 feb3 	bl	80a48ec <delay>
 80a1b86:	e002      	b.n	80a1b8e <_ZN7MFRC5228PCD_InitEv+0x22>
	}
	else { // Perform a soft reset
		PCD_Reset();
 80a1b88:	4620      	mov	r0, r4
 80a1b8a:	f7ff ffcc 	bl	80a1b26 <_ZN7MFRC5229PCD_ResetEv>
	}
	
	// When communicating with a PICC we need a timeout if something goes wrong.
	// f_timer = 13.56 MHz / (2*TPreScaler+1) where TPreScaler = [TPrescaler_Hi:TPrescaler_Lo].
	// TPrescaler_Hi are the four low bits in TModeReg. TPrescaler_Lo is TPrescalerReg.
    PCD_WriteRegister(TModeReg, 0x80);			// TAuto=1; timer starts automatically at the end of the transmission in all communication modes at all speeds
 80a1b8e:	4620      	mov	r0, r4
 80a1b90:	2280      	movs	r2, #128	; 0x80
 80a1b92:	2154      	movs	r1, #84	; 0x54
 80a1b94:	f7ff ff23 	bl	80a19de <_ZN7MFRC52217PCD_WriteRegisterEhh>
    PCD_WriteRegister(TPrescalerReg, 0xA9);	// TPreScaler = TModeReg[3..0]:TPrescalerReg, ie 0x0A9 = 169 => f_timer=40kHz, ie a timer period of 25�s.
 80a1b98:	4620      	mov	r0, r4
 80a1b9a:	22a9      	movs	r2, #169	; 0xa9
 80a1b9c:	2156      	movs	r1, #86	; 0x56
 80a1b9e:	f7ff ff1e 	bl	80a19de <_ZN7MFRC52217PCD_WriteRegisterEhh>
    PCD_WriteRegister(TReloadRegH, 0x03);		// Reload timer with 0x3E8 = 1000, ie 25ms before timeout.
 80a1ba2:	4620      	mov	r0, r4
 80a1ba4:	2203      	movs	r2, #3
 80a1ba6:	2158      	movs	r1, #88	; 0x58
 80a1ba8:	f7ff ff19 	bl	80a19de <_ZN7MFRC52217PCD_WriteRegisterEhh>
    PCD_WriteRegister(TReloadRegL, 0xE8);
 80a1bac:	4620      	mov	r0, r4
 80a1bae:	22e8      	movs	r2, #232	; 0xe8
 80a1bb0:	215a      	movs	r1, #90	; 0x5a
 80a1bb2:	f7ff ff14 	bl	80a19de <_ZN7MFRC52217PCD_WriteRegisterEhh>
	
	PCD_WriteRegister(TxASKReg, 0x40);		// Default 0x00. Force a 100 % ASK modulation independent of the ModGsPReg register setting
 80a1bb6:	4620      	mov	r0, r4
 80a1bb8:	2240      	movs	r2, #64	; 0x40
 80a1bba:	212a      	movs	r1, #42	; 0x2a
 80a1bbc:	f7ff ff0f 	bl	80a19de <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(ModeReg, 0x3D);		// Default 0x3F. Set the preset value for the CRC coprocessor for the CalcCRC command to 0x6363 (ISO 14443-3 part 6.2.4)
 80a1bc0:	4620      	mov	r0, r4
 80a1bc2:	223d      	movs	r2, #61	; 0x3d
 80a1bc4:	2122      	movs	r1, #34	; 0x22
 80a1bc6:	f7ff ff0a 	bl	80a19de <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_AntennaOn();						// Enable the antenna driver pins TX1 and TX2 (they were disabled by the reset)
 80a1bca:	4620      	mov	r0, r4
} // End PCD_Init()
 80a1bcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    PCD_WriteRegister(TReloadRegH, 0x03);		// Reload timer with 0x3E8 = 1000, ie 25ms before timeout.
    PCD_WriteRegister(TReloadRegL, 0xE8);
	
	PCD_WriteRegister(TxASKReg, 0x40);		// Default 0x00. Force a 100 % ASK modulation independent of the ModGsPReg register setting
	PCD_WriteRegister(ModeReg, 0x3D);		// Default 0x3F. Set the preset value for the CRC coprocessor for the CalcCRC command to 0x6363 (ISO 14443-3 part 6.2.4)
	PCD_AntennaOn();						// Enable the antenna driver pins TX1 and TX2 (they were disabled by the reset)
 80a1bd0:	f7ff bfb9 	b.w	80a1b46 <_ZN7MFRC52213PCD_AntennaOnEv>

080a1bd4 <_ZN7MFRC52218PCD_GetAntennaGainEv>:
 * See 9.3.3.6 / table 98 in http://www.nxp.com/documents/data_sheet/MFRC522.pdf
 * NOTE: Return value scrubbed with (0x07<<4)=01110000b as RCFfgReg may use reserved bits.
 * 
 * @return Value of the RxGain, scrubbed to the 3 bits used.
 */
byte MFRC522::PCD_GetAntennaGain() {
 80a1bd4:	b508      	push	{r3, lr}
	return PCD_ReadRegister(RFCfgReg) & (0x07<<4);
 80a1bd6:	214c      	movs	r1, #76	; 0x4c
 80a1bd8:	f7ff ff33 	bl	80a1a42 <_ZN7MFRC52216PCD_ReadRegisterEh>
} // End PCD_GetAntennaGain()
 80a1bdc:	f000 0070 	and.w	r0, r0, #112	; 0x70
 80a1be0:	bd08      	pop	{r3, pc}

080a1be2 <_ZN7MFRC52218PCD_SetAntennaGainEh>:
/**
 * Set the MFRC522 Receiver Gain (RxGain) to value specified by given mask.
 * See 9.3.3.6 / table 98 in http://www.nxp.com/documents/data_sheet/MFRC522.pdf
 * NOTE: Given mask is scrubbed with (0x07<<4)=01110000b as RCFfgReg may use reserved bits.
 */
void MFRC522::PCD_SetAntennaGain(byte mask) {
 80a1be2:	b538      	push	{r3, r4, r5, lr}
 80a1be4:	460d      	mov	r5, r1
 80a1be6:	4604      	mov	r4, r0
	if (PCD_GetAntennaGain() != mask) {						// only bother if there is a change
 80a1be8:	f7ff fff4 	bl	80a1bd4 <_ZN7MFRC52218PCD_GetAntennaGainEv>
 80a1bec:	42a8      	cmp	r0, r5
 80a1bee:	d00c      	beq.n	80a1c0a <_ZN7MFRC52218PCD_SetAntennaGainEh+0x28>
		PCD_ClearRegisterBitMask(RFCfgReg, (0x07<<4));		// clear needed to allow 000 pattern
 80a1bf0:	4620      	mov	r0, r4
 80a1bf2:	2270      	movs	r2, #112	; 0x70
 80a1bf4:	214c      	movs	r1, #76	; 0x4c
 80a1bf6:	f7ff ff4a 	bl	80a1a8e <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>
		PCD_SetRegisterBitMask(RFCfgReg, mask & (0x07<<4));	// only set RxGain[2:0] bits
 80a1bfa:	f005 0270 	and.w	r2, r5, #112	; 0x70
 80a1bfe:	4620      	mov	r0, r4
	}
} // End PCD_SetAntennaGain()
 80a1c00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 * NOTE: Given mask is scrubbed with (0x07<<4)=01110000b as RCFfgReg may use reserved bits.
 */
void MFRC522::PCD_SetAntennaGain(byte mask) {
	if (PCD_GetAntennaGain() != mask) {						// only bother if there is a change
		PCD_ClearRegisterBitMask(RFCfgReg, (0x07<<4));		// clear needed to allow 000 pattern
		PCD_SetRegisterBitMask(RFCfgReg, mask & (0x07<<4));	// only set RxGain[2:0] bits
 80a1c04:	214c      	movs	r1, #76	; 0x4c
 80a1c06:	f7ff bf33 	b.w	80a1a70 <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>
 80a1c0a:	bd38      	pop	{r3, r4, r5, pc}

080a1c0c <_ZN7MFRC52216PCD_ReadRegisterEhhPhh>:
 */
void MFRC522::PCD_ReadRegister(	byte reg,		///< The register to read from. One of the PCD_Register enums.
								byte count,		///< The number of bytes to read
								byte *values,	///< Byte array to store the values in.
								byte rxAlign	///< Only bit positions rxAlign..7 in values[0] are updated.
								) {
 80a1c0c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a1c10:	4680      	mov	r8, r0
 80a1c12:	461f      	mov	r7, r3
 80a1c14:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
	if (count == 0) {
 80a1c18:	4615      	mov	r5, r2
 80a1c1a:	2a00      	cmp	r2, #0
 80a1c1c:	d03f      	beq.n	80a1c9e <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x92>
		return;
	}
	//Serial.print("Reading "); 	Serial.print(count); Serial.println(" bytes from register.");
	byte address = 0x80 | (reg & 0x7E);		// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
 80a1c1e:	f001 017e 	and.w	r1, r1, #126	; 0x7e
 80a1c22:	f041 0680 	orr.w	r6, r1, #128	; 0x80
	byte index = 0;							// Index in values array.
	digitalWrite(_chipSelectPin, LOW);		// Select slave
 80a1c26:	7b00      	ldrb	r0, [r0, #12]
 80a1c28:	2100      	movs	r1, #0
 80a1c2a:	f003 fb2a 	bl	80a5282 <digitalWrite>
	count--;								// One read is performed outside of the loop
	SPI.transfer(address);					// Tell MFRC522 which address we want to read
 80a1c2e:	4630      	mov	r0, r6
 80a1c30:	f7ff fecc 	bl	80a19cc <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8transferEh.isra.9>
	}
	//Serial.print("Reading "); 	Serial.print(count); Serial.println(" bytes from register.");
	byte address = 0x80 | (reg & 0x7E);		// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
	byte index = 0;							// Index in values array.
	digitalWrite(_chipSelectPin, LOW);		// Select slave
	count--;								// One read is performed outside of the loop
 80a1c34:	3d01      	subs	r5, #1
 80a1c36:	b2ed      	uxtb	r5, r5
	SPI.transfer(address);					// Tell MFRC522 which address we want to read
 80a1c38:	f04f 0b00 	mov.w	fp, #0
	while (index < count) {
		if (index == 0 && rxAlign) { // Only update bit positions rxAlign..7 in values[0]
			// Create bit mask for bit positions rxAlign..7
			byte mask = 0;
			for (byte i = rxAlign; i <= 7; i++) {
				mask |= (1 << i);
 80a1c3c:	f04f 0a01 	mov.w	sl, #1
 80a1c40:	fa5f f48b 	uxtb.w	r4, fp
	byte address = 0x80 | (reg & 0x7E);		// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
	byte index = 0;							// Index in values array.
	digitalWrite(_chipSelectPin, LOW);		// Select slave
	count--;								// One read is performed outside of the loop
	SPI.transfer(address);					// Tell MFRC522 which address we want to read
	while (index < count) {
 80a1c44:	42a5      	cmp	r5, r4
 80a1c46:	d91f      	bls.n	80a1c88 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x7c>
		if (index == 0 && rxAlign) { // Only update bit positions rxAlign..7 in values[0]
 80a1c48:	b9b4      	cbnz	r4, 80a1c78 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x6c>
 80a1c4a:	f1b9 0f00 	cmp.w	r9, #0
 80a1c4e:	d013      	beq.n	80a1c78 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x6c>
 80a1c50:	464b      	mov	r3, r9
			// Create bit mask for bit positions rxAlign..7
			byte mask = 0;
			for (byte i = rxAlign; i <= 7; i++) {
 80a1c52:	2b07      	cmp	r3, #7
 80a1c54:	d806      	bhi.n	80a1c64 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x58>
				mask |= (1 << i);
 80a1c56:	fa0a f003 	lsl.w	r0, sl, r3
 80a1c5a:	4304      	orrs	r4, r0
	SPI.transfer(address);					// Tell MFRC522 which address we want to read
	while (index < count) {
		if (index == 0 && rxAlign) { // Only update bit positions rxAlign..7 in values[0]
			// Create bit mask for bit positions rxAlign..7
			byte mask = 0;
			for (byte i = rxAlign; i <= 7; i++) {
 80a1c5c:	3301      	adds	r3, #1
				mask |= (1 << i);
 80a1c5e:	b2e4      	uxtb	r4, r4
	SPI.transfer(address);					// Tell MFRC522 which address we want to read
	while (index < count) {
		if (index == 0 && rxAlign) { // Only update bit positions rxAlign..7 in values[0]
			// Create bit mask for bit positions rxAlign..7
			byte mask = 0;
			for (byte i = rxAlign; i <= 7; i++) {
 80a1c60:	b2db      	uxtb	r3, r3
 80a1c62:	e7f6      	b.n	80a1c52 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x46>
				mask |= (1 << i);
			}
			// Read value and tell that we want to read the same address again.
			byte value = SPI.transfer(address);	
 80a1c64:	4630      	mov	r0, r6
 80a1c66:	f7ff feb1 	bl	80a19cc <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8transferEh.isra.9>
			// Apply mask to both current value of values[0] and the new data in value.
			values[0] = (values[index] & ~mask) | (value & mask);
 80a1c6a:	783b      	ldrb	r3, [r7, #0]
 80a1c6c:	4020      	ands	r0, r4
 80a1c6e:	ea23 0304 	bic.w	r3, r3, r4
 80a1c72:	4318      	orrs	r0, r3
 80a1c74:	7038      	strb	r0, [r7, #0]
 80a1c76:	e004      	b.n	80a1c82 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x76>
		}
		else { // Normal case
			values[index] = SPI.transfer(address);	// Read value and tell that we want to read the same address again.
 80a1c78:	4630      	mov	r0, r6
 80a1c7a:	f7ff fea7 	bl	80a19cc <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8transferEh.isra.9>
 80a1c7e:	f807 000b 	strb.w	r0, [r7, fp]
 80a1c82:	f10b 0b01 	add.w	fp, fp, #1
 80a1c86:	e7db      	b.n	80a1c40 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x34>
		}
		index++;
	}
	values[index] = SPI.transfer(0);			// Read the final byte. Send 0 to stop reading.
 80a1c88:	2000      	movs	r0, #0
 80a1c8a:	f7ff fe9f 	bl	80a19cc <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8transferEh.isra.9>
 80a1c8e:	5578      	strb	r0, [r7, r5]
	digitalWrite(_chipSelectPin, HIGH);			// Release slave again
 80a1c90:	f898 000c 	ldrb.w	r0, [r8, #12]
 80a1c94:	2101      	movs	r1, #1
} // End PCD_ReadRegister()
 80a1c96:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			values[index] = SPI.transfer(address);	// Read value and tell that we want to read the same address again.
		}
		index++;
	}
	values[index] = SPI.transfer(0);			// Read the final byte. Send 0 to stop reading.
	digitalWrite(_chipSelectPin, HIGH);			// Release slave again
 80a1c9a:	f003 baf2 	b.w	80a5282 <digitalWrite>
 80a1c9e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a1ca2 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>:
										byte *backData,		///< NULL or pointer to buffer if data should be read back after executing the command.
										byte *backLen,		///< In: Max number of bytes to write to *backData. Out: The number of bytes returned.
										byte *validBits,	///< In/Out: The number of valid bits in the last byte. 0 for 8 valid bits.
										byte rxAlign,		///< In: Defines the bit position in backData[0] for the first bit received. Default 0.
										bool checkCRC		///< In: True => The last two bytes of the response is assumed to be a CRC_A that must be validated.
									 ) {
 80a1ca2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a1ca6:	b087      	sub	sp, #28
 80a1ca8:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
 80a1cac:	4604      	mov	r4, r0
 80a1cae:	468b      	mov	fp, r1
 80a1cb0:	9202      	str	r2, [sp, #8]
 80a1cb2:	9f11      	ldr	r7, [sp, #68]	; 0x44
 80a1cb4:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80a1cb6:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
	byte n, _validBits;
	unsigned int i;

	// Prepare values for BitFramingReg
	byte txLastBits = validBits ? *validBits : 0;
 80a1cba:	f1b8 0f00 	cmp.w	r8, #0
 80a1cbe:	d002      	beq.n	80a1cc6 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x24>
 80a1cc0:	f898 6000 	ldrb.w	r6, [r8]
 80a1cc4:	e000      	b.n	80a1cc8 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x26>
 80a1cc6:	4646      	mov	r6, r8
	byte bitFraming	= (rxAlign << 4) + txLastBits;		// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
	
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop any active command.
 80a1cc8:	2200      	movs	r2, #0
 80a1cca:	2102      	movs	r1, #2
 80a1ccc:	4620      	mov	r0, r4
 80a1cce:	9303      	str	r3, [sp, #12]
 80a1cd0:	f7ff fe85 	bl	80a19de <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(ComIrqReg, 0x7F);					// Clear all seven interrupt request bits
 80a1cd4:	227f      	movs	r2, #127	; 0x7f
 80a1cd6:	2108      	movs	r1, #8
 80a1cd8:	4620      	mov	r0, r4
 80a1cda:	f7ff fe80 	bl	80a19de <_ZN7MFRC52217PCD_WriteRegisterEhh>
	byte n, _validBits;
	unsigned int i;

	// Prepare values for BitFramingReg
	byte txLastBits = validBits ? *validBits : 0;
	byte bitFraming	= (rxAlign << 4) + txLastBits;		// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
 80a1cde:	eb06 160a 	add.w	r6, r6, sl, lsl #4
	
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop any active command.
	PCD_WriteRegister(ComIrqReg, 0x7F);					// Clear all seven interrupt request bits
	PCD_SetRegisterBitMask(FIFOLevelReg, 0x80);		// FlushBuffer = 1, FIFO initialization
 80a1ce2:	2280      	movs	r2, #128	; 0x80
 80a1ce4:	2114      	movs	r1, #20
 80a1ce6:	4620      	mov	r0, r4
 80a1ce8:	f7ff fec2 	bl	80a1a70 <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>
	byte n, _validBits;
	unsigned int i;

	// Prepare values for BitFramingReg
	byte txLastBits = validBits ? *validBits : 0;
	byte bitFraming	= (rxAlign << 4) + txLastBits;		// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
 80a1cec:	b2f6      	uxtb	r6, r6
	
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop any active command.
	PCD_WriteRegister(ComIrqReg, 0x7F);					// Clear all seven interrupt request bits
	PCD_SetRegisterBitMask(FIFOLevelReg, 0x80);		// FlushBuffer = 1, FIFO initialization
	PCD_WriteRegister(FIFODataReg, sendLen, sendData);	// Write sendData to the FIFO
 80a1cee:	9b03      	ldr	r3, [sp, #12]
 80a1cf0:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 80a1cf4:	2112      	movs	r1, #18
 80a1cf6:	4620      	mov	r0, r4
 80a1cf8:	f7ff fe86 	bl	80a1a08 <_ZN7MFRC52217PCD_WriteRegisterEhhPh>
	PCD_WriteRegister(BitFramingReg, bitFraming);		// Bit adjustments
 80a1cfc:	4632      	mov	r2, r6
 80a1cfe:	211a      	movs	r1, #26
 80a1d00:	4620      	mov	r0, r4
 80a1d02:	f7ff fe6c 	bl	80a19de <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(CommandReg, command);			// Execute the command
 80a1d06:	465a      	mov	r2, fp
 80a1d08:	2102      	movs	r1, #2
 80a1d0a:	4620      	mov	r0, r4
 80a1d0c:	f7ff fe67 	bl	80a19de <_ZN7MFRC52217PCD_WriteRegisterEhh>
	if (command == PCD_Transceive) 	{
 80a1d10:	f1bb 0f0c 	cmp.w	fp, #12
 80a1d14:	d104      	bne.n	80a1d20 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x7e>
		PCD_SetRegisterBitMask(BitFramingReg, 0x80);	// StartSend=1, transmission of data starts
 80a1d16:	2280      	movs	r2, #128	; 0x80
 80a1d18:	211a      	movs	r1, #26
 80a1d1a:	4620      	mov	r0, r4
 80a1d1c:	f7ff fea8 	bl	80a1a70 <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>
									 ) {
	byte n, _validBits;
	unsigned int i;

	// Prepare values for BitFramingReg
	byte txLastBits = validBits ? *validBits : 0;
 80a1d20:	f44f 66fa 	mov.w	r6, #2000	; 0x7d0
	// Wait for the command to complete.
	// In PCD_Init() we set the TAuto flag in TModeReg. This means the timer automatically starts when the PCD stops transmitting.
	// Each iteration of the do-while-loop takes 17.86�s.
	i = 2000;
	while (1) {
		n = PCD_ReadRegister(ComIrqReg);	// ComIrqReg[7..0] bits are: Set1 TxIRq RxIRq IdleIRq   HiAlertIRq LoAlertIRq ErrIRq TimerIRq
 80a1d24:	2108      	movs	r1, #8
 80a1d26:	4620      	mov	r0, r4
 80a1d28:	f7ff fe8b 	bl	80a1a42 <_ZN7MFRC52216PCD_ReadRegisterEh>
		if (n & waitIRq) {					// One of the interrupts that signal success has been set.
 80a1d2c:	9b02      	ldr	r3, [sp, #8]
 80a1d2e:	4218      	tst	r0, r3
 80a1d30:	d104      	bne.n	80a1d3c <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x9a>
			break;
		}
		if (n & 0x01) {						// Timer interrupt - nothing received in 25ms
 80a1d32:	07c2      	lsls	r2, r0, #31
 80a1d34:	d452      	bmi.n	80a1ddc <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x13a>
			return STATUS_TIMEOUT;
		}
		if (--i == 0) {						// The emergency break. If all other condions fail we will eventually terminate on this one after 35.7ms. Communication with the MFRC522 might be down.
 80a1d36:	3e01      	subs	r6, #1
 80a1d38:	d1f4      	bne.n	80a1d24 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x82>
 80a1d3a:	e04f      	b.n	80a1ddc <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x13a>
			return STATUS_TIMEOUT;
		}
	}
	
	// Stop now if any errors except collisions were detected.
	byte errorRegValue = PCD_ReadRegister(ErrorReg); // ErrorReg[7..0] bits are: WrErr TempErr reserved BufferOvfl   CollErr CRCErr ParityErr ProtocolErr
 80a1d3c:	210c      	movs	r1, #12
 80a1d3e:	4620      	mov	r0, r4
 80a1d40:	f7ff fe7f 	bl	80a1a42 <_ZN7MFRC52216PCD_ReadRegisterEh>
	if (errorRegValue & 0x13) {	 // BufferOvfl ParityErr ProtocolErr
 80a1d44:	f010 0f13 	tst.w	r0, #19
			return STATUS_TIMEOUT;
		}
	}
	
	// Stop now if any errors except collisions were detected.
	byte errorRegValue = PCD_ReadRegister(ErrorReg); // ErrorReg[7..0] bits are: WrErr TempErr reserved BufferOvfl   CollErr CRCErr ParityErr ProtocolErr
 80a1d48:	4606      	mov	r6, r0
	if (errorRegValue & 0x13) {	 // BufferOvfl ParityErr ProtocolErr
 80a1d4a:	d149      	bne.n	80a1de0 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x13e>
		return STATUS_ERROR;
	}	

	// If the caller wants data back, get it from the MFRC522.
	if (backData && backLen) {
 80a1d4c:	b1df      	cbz	r7, 80a1d86 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xe4>
 80a1d4e:	b1d5      	cbz	r5, 80a1d86 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xe4>
		n = PCD_ReadRegister(FIFOLevelReg);						// Number of bytes in the FIFO
 80a1d50:	2114      	movs	r1, #20
 80a1d52:	4620      	mov	r0, r4
 80a1d54:	f7ff fe75 	bl	80a1a42 <_ZN7MFRC52216PCD_ReadRegisterEh>
		if (n > *backLen) {
 80a1d58:	782b      	ldrb	r3, [r5, #0]
		return STATUS_ERROR;
	}	

	// If the caller wants data back, get it from the MFRC522.
	if (backData && backLen) {
		n = PCD_ReadRegister(FIFOLevelReg);						// Number of bytes in the FIFO
 80a1d5a:	4602      	mov	r2, r0
		if (n > *backLen) {
 80a1d5c:	4283      	cmp	r3, r0
 80a1d5e:	d341      	bcc.n	80a1de4 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x142>
			return STATUS_NO_ROOM;
		}
		*backLen = n;												// Number of bytes returned
 80a1d60:	7028      	strb	r0, [r5, #0]
		PCD_ReadRegister(FIFODataReg, n, backData, rxAlign);		// Get received data from FIFO
 80a1d62:	463b      	mov	r3, r7
 80a1d64:	2112      	movs	r1, #18
 80a1d66:	4620      	mov	r0, r4
 80a1d68:	f8cd a000 	str.w	sl, [sp]
 80a1d6c:	f7ff ff4e 	bl	80a1c0c <_ZN7MFRC52216PCD_ReadRegisterEhhPhh>
		_validBits = PCD_ReadRegister(ControlReg) & 0x07;	// RxLastBits[2:0] indicates the number of valid bits in the last received byte. If this value is 000b, the whole byte is valid.
 80a1d70:	2118      	movs	r1, #24
 80a1d72:	4620      	mov	r0, r4
 80a1d74:	f7ff fe65 	bl	80a1a42 <_ZN7MFRC52216PCD_ReadRegisterEh>
 80a1d78:	f000 0907 	and.w	r9, r0, #7
		if (validBits) {
 80a1d7c:	f1b8 0f00 	cmp.w	r8, #0
 80a1d80:	d001      	beq.n	80a1d86 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xe4>
			*validBits = _validBits;
 80a1d82:	f888 9000 	strb.w	r9, [r8]
		}
	}
	
	// Tell about collisions
	if (errorRegValue & 0x08) { // CollErr
 80a1d86:	0733      	lsls	r3, r6, #28
 80a1d88:	d42e      	bmi.n	80a1de8 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x146>
		return STATUS_COLLISION;
	}
	
	// Perform CRC_A validation if requested.
	if (backData && backLen && checkCRC) {
 80a1d8a:	b37f      	cbz	r7, 80a1dec <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x14a>
 80a1d8c:	b375      	cbz	r5, 80a1dec <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x14a>
 80a1d8e:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 80a1d92:	b35b      	cbz	r3, 80a1dec <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x14a>
		// In this case a MIFARE Classic NAK is not OK.
		if (*backLen == 1 && _validBits == 4) {
 80a1d94:	782a      	ldrb	r2, [r5, #0]
 80a1d96:	2a01      	cmp	r2, #1
 80a1d98:	d104      	bne.n	80a1da4 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x102>
 80a1d9a:	f1b9 0f04 	cmp.w	r9, #4
 80a1d9e:	d127      	bne.n	80a1df0 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x14e>
			return STATUS_MIFARE_NACK;
 80a1da0:	2009      	movs	r0, #9
 80a1da2:	e026      	b.n	80a1df2 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x150>
		}
		// We need at least the CRC_A value and all 8 bits of the last byte must be received.
		if (*backLen < 2 || _validBits != 0) {
 80a1da4:	d924      	bls.n	80a1df0 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x14e>
 80a1da6:	f1b9 0f00 	cmp.w	r9, #0
 80a1daa:	d121      	bne.n	80a1df0 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x14e>
			return STATUS_CRC_WRONG;
		}
		// Verify CRC_A - do our own calculation and store the control in controlBuffer.
		byte controlBuffer[2]; 
		n = PCD_CalculateCRC(&backData[0], *backLen - 2, &controlBuffer[0]);
 80a1dac:	3a02      	subs	r2, #2
 80a1dae:	ab05      	add	r3, sp, #20
 80a1db0:	b2d2      	uxtb	r2, r2
 80a1db2:	4639      	mov	r1, r7
 80a1db4:	4620      	mov	r0, r4
 80a1db6:	f7ff fe79 	bl	80a1aac <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
		if (n != STATUS_OK) {
 80a1dba:	2801      	cmp	r0, #1
 80a1dbc:	d119      	bne.n	80a1df2 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x150>
			return n;
		}
		if ((backData[*backLen - 2] != controlBuffer[0]) || (backData[*backLen - 1] != controlBuffer[1])) {
 80a1dbe:	782b      	ldrb	r3, [r5, #0]
 80a1dc0:	441f      	add	r7, r3
 80a1dc2:	f817 2c02 	ldrb.w	r2, [r7, #-2]
 80a1dc6:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80a1dca:	429a      	cmp	r2, r3
 80a1dcc:	d110      	bne.n	80a1df0 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x14e>
 80a1dce:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80a1dd2:	f89d 3015 	ldrb.w	r3, [sp, #21]
 80a1dd6:	429a      	cmp	r2, r3
 80a1dd8:	d10a      	bne.n	80a1df0 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x14e>
 80a1dda:	e00a      	b.n	80a1df2 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x150>
		n = PCD_ReadRegister(ComIrqReg);	// ComIrqReg[7..0] bits are: Set1 TxIRq RxIRq IdleIRq   HiAlertIRq LoAlertIRq ErrIRq TimerIRq
		if (n & waitIRq) {					// One of the interrupts that signal success has been set.
			break;
		}
		if (n & 0x01) {						// Timer interrupt - nothing received in 25ms
			return STATUS_TIMEOUT;
 80a1ddc:	2004      	movs	r0, #4
 80a1dde:	e008      	b.n	80a1df2 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x150>
	}
	
	// Stop now if any errors except collisions were detected.
	byte errorRegValue = PCD_ReadRegister(ErrorReg); // ErrorReg[7..0] bits are: WrErr TempErr reserved BufferOvfl   CollErr CRCErr ParityErr ProtocolErr
	if (errorRegValue & 0x13) {	 // BufferOvfl ParityErr ProtocolErr
		return STATUS_ERROR;
 80a1de0:	2002      	movs	r0, #2
 80a1de2:	e006      	b.n	80a1df2 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x150>

	// If the caller wants data back, get it from the MFRC522.
	if (backData && backLen) {
		n = PCD_ReadRegister(FIFOLevelReg);						// Number of bytes in the FIFO
		if (n > *backLen) {
			return STATUS_NO_ROOM;
 80a1de4:	2005      	movs	r0, #5
 80a1de6:	e004      	b.n	80a1df2 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x150>
		}
	}
	
	// Tell about collisions
	if (errorRegValue & 0x08) { // CollErr
		return STATUS_COLLISION;
 80a1de8:	2003      	movs	r0, #3
 80a1dea:	e002      	b.n	80a1df2 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x150>
		if ((backData[*backLen - 2] != controlBuffer[0]) || (backData[*backLen - 1] != controlBuffer[1])) {
			return STATUS_CRC_WRONG;
		}
	}
	
	return STATUS_OK;
 80a1dec:	2001      	movs	r0, #1
 80a1dee:	e000      	b.n	80a1df2 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x150>
		if (*backLen == 1 && _validBits == 4) {
			return STATUS_MIFARE_NACK;
		}
		// We need at least the CRC_A value and all 8 bits of the last byte must be received.
		if (*backLen < 2 || _validBits != 0) {
			return STATUS_CRC_WRONG;
 80a1df0:	2008      	movs	r0, #8
			return STATUS_CRC_WRONG;
		}
	}
	
	return STATUS_OK;
} // End PCD_CommunicateWithPICC()
 80a1df2:	b007      	add	sp, #28
 80a1df4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a1df8 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>:
									byte *backData,		///< NULL or pointer to buffer if data should be read back after executing the command.
									byte *backLen,		///< In: Max number of bytes to write to *backData. Out: The number of bytes returned.
									byte *validBits,	///< In/Out: The number of valid bits in the last byte. 0 for 8 valid bits. Default NULL.
									byte rxAlign,		///< In: Defines the bit position in backData[0] for the first bit received. Default 0.
									bool checkCRC		///< In: True => The last two bytes of the response is assumed to be a CRC_A that must be validated.
								 ) {
 80a1df8:	b510      	push	{r4, lr}
 80a1dfa:	b086      	sub	sp, #24
	byte waitIRq = 0x30;		// RxIRq and IdleIRq
	return PCD_CommunicateWithPICC(PCD_Transceive, waitIRq, sendData, sendLen, backData, backLen, validBits, rxAlign, checkCRC);
 80a1dfc:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
 80a1e00:	9405      	str	r4, [sp, #20]
 80a1e02:	f89d 4028 	ldrb.w	r4, [sp, #40]	; 0x28
 80a1e06:	9404      	str	r4, [sp, #16]
 80a1e08:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80a1e0a:	9403      	str	r4, [sp, #12]
 80a1e0c:	9c08      	ldr	r4, [sp, #32]
 80a1e0e:	e88d 001c 	stmia.w	sp, {r2, r3, r4}
 80a1e12:	460b      	mov	r3, r1
 80a1e14:	2230      	movs	r2, #48	; 0x30
 80a1e16:	210c      	movs	r1, #12
 80a1e18:	f7ff ff43 	bl	80a1ca2 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>
} // End PCD_TransceiveData()
 80a1e1c:	b006      	add	sp, #24
 80a1e1e:	bd10      	pop	{r4, pc}

080a1e20 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_>:
 * @return STATUS_OK on success, STATUS_??? otherwise.
 */ 
byte MFRC522::PICC_REQA_or_WUPA(	byte command, 		///< The command to send - PICC_CMD_REQA or PICC_CMD_WUPA
									byte *bufferATQA,	///< The buffer to store the ATQA (Answer to request) in
									byte *bufferSize	///< Buffer size, at least two bytes. Also number of bytes returned if STATUS_OK.
							   ) {
 80a1e20:	b570      	push	{r4, r5, r6, lr}
 80a1e22:	b088      	sub	sp, #32
 80a1e24:	4606      	mov	r6, r0
 80a1e26:	461c      	mov	r4, r3
 80a1e28:	f88d 1017 	strb.w	r1, [sp, #23]
	byte validBits;
	byte status;
	
	if (bufferATQA == NULL || *bufferSize < 2) {	// The ATQA response is 2 bytes long.
 80a1e2c:	4615      	mov	r5, r2
 80a1e2e:	b312      	cbz	r2, 80a1e76 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x56>
 80a1e30:	781b      	ldrb	r3, [r3, #0]
 80a1e32:	2b01      	cmp	r3, #1
 80a1e34:	d91f      	bls.n	80a1e76 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x56>
		return STATUS_NO_ROOM;
	}
	PCD_ClearRegisterBitMask(CollReg, 0x80);			// ValuesAfterColl=1 => Bits received after collision are cleared.
 80a1e36:	2280      	movs	r2, #128	; 0x80
 80a1e38:	211c      	movs	r1, #28
 80a1e3a:	f7ff fe28 	bl	80a1a8e <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>
	validBits = 7;										// For REQA and WUPA we need the short frame format - transmit only 7 bits of the last (and only) byte. TxLastBits = BitFramingReg[2..0]
 80a1e3e:	2307      	movs	r3, #7
 80a1e40:	f88d 301f 	strb.w	r3, [sp, #31]
	status = PCD_TransceiveData(&command, 1, bufferATQA, bufferSize, &validBits);
 80a1e44:	2300      	movs	r3, #0
 80a1e46:	9303      	str	r3, [sp, #12]
 80a1e48:	9302      	str	r3, [sp, #8]
 80a1e4a:	f10d 031f 	add.w	r3, sp, #31
 80a1e4e:	9301      	str	r3, [sp, #4]
 80a1e50:	9400      	str	r4, [sp, #0]
 80a1e52:	462b      	mov	r3, r5
 80a1e54:	2201      	movs	r2, #1
 80a1e56:	f10d 0117 	add.w	r1, sp, #23
 80a1e5a:	4630      	mov	r0, r6
 80a1e5c:	f7ff ffcc 	bl	80a1df8 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
	if (status != STATUS_OK) {
 80a1e60:	2801      	cmp	r0, #1
 80a1e62:	d10b      	bne.n	80a1e7c <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x5c>
		return status;
	}
	if (*bufferSize != 2 || validBits != 0) {		// ATQA must be exactly 16 bits.
 80a1e64:	7820      	ldrb	r0, [r4, #0]
 80a1e66:	2802      	cmp	r0, #2
 80a1e68:	d107      	bne.n	80a1e7a <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x5a>
 80a1e6a:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80a1e6e:	2b00      	cmp	r3, #0
		return STATUS_ERROR;
	}
	return STATUS_OK;
 80a1e70:	bf08      	it	eq
 80a1e72:	2001      	moveq	r0, #1
 80a1e74:	e002      	b.n	80a1e7c <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x5c>
							   ) {
	byte validBits;
	byte status;
	
	if (bufferATQA == NULL || *bufferSize < 2) {	// The ATQA response is 2 bytes long.
		return STATUS_NO_ROOM;
 80a1e76:	2005      	movs	r0, #5
 80a1e78:	e000      	b.n	80a1e7c <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x5c>
	status = PCD_TransceiveData(&command, 1, bufferATQA, bufferSize, &validBits);
	if (status != STATUS_OK) {
		return status;
	}
	if (*bufferSize != 2 || validBits != 0) {		// ATQA must be exactly 16 bits.
		return STATUS_ERROR;
 80a1e7a:	2002      	movs	r0, #2
	}
	return STATUS_OK;
} // End PICC_REQA_or_WUPA()
 80a1e7c:	b008      	add	sp, #32
 80a1e7e:	bd70      	pop	{r4, r5, r6, pc}

080a1e80 <_ZN7MFRC52213PICC_RequestAEPhS0_>:
 * @return STATUS_OK on success, STATUS_??? otherwise.
 */
byte MFRC522::PICC_RequestA(byte *bufferATQA,	///< The buffer to store the ATQA (Answer to request) in
							byte *bufferSize	///< Buffer size, at least two bytes. Also number of bytes returned if STATUS_OK.
							) {
	return PICC_REQA_or_WUPA(PICC_CMD_REQA, bufferATQA, bufferSize);
 80a1e80:	4613      	mov	r3, r2
 80a1e82:	460a      	mov	r2, r1
 80a1e84:	2126      	movs	r1, #38	; 0x26
 80a1e86:	f7ff bfcb 	b.w	80a1e20 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_>

080a1e8a <_ZN7MFRC52221PICC_IsNewCardPresentEv>:
 * Returns true if a PICC responds to PICC_CMD_REQA.
 * Only "new" cards in state IDLE are invited. Sleeping cards in state HALT are ignored.
 * 
 * @return bool
 */
bool MFRC522::PICC_IsNewCardPresent() {
 80a1e8a:	b507      	push	{r0, r1, r2, lr}
	byte bufferATQA[2];
	byte bufferSize = sizeof(bufferATQA);
 80a1e8c:	2302      	movs	r3, #2
 80a1e8e:	aa02      	add	r2, sp, #8
 80a1e90:	f802 3d05 	strb.w	r3, [r2, #-5]!
	byte result = PICC_RequestA(bufferATQA, &bufferSize);
 80a1e94:	a901      	add	r1, sp, #4
 80a1e96:	f7ff fff3 	bl	80a1e80 <_ZN7MFRC52213PICC_RequestAEPhS0_>
	return (result == STATUS_OK || result == STATUS_COLLISION);
 80a1e9a:	2801      	cmp	r0, #1
 80a1e9c:	d002      	beq.n	80a1ea4 <_ZN7MFRC52221PICC_IsNewCardPresentEv+0x1a>
 80a1e9e:	1ec3      	subs	r3, r0, #3
 80a1ea0:	4258      	negs	r0, r3
 80a1ea2:	4158      	adcs	r0, r3
} // End PICC_IsNewCardPresent()
 80a1ea4:	b003      	add	sp, #12
 80a1ea6:	f85d fb04 	ldr.w	pc, [sp], #4

080a1eaa <_ZN7MFRC52211PICC_SelectEPNS_3UidEh>:
 * 
 * @return STATUS_OK on success, STATUS_??? otherwise.
 */
byte MFRC522::PICC_Select(	Uid *uid,			///< Pointer to Uid struct. Normally output, but can also be used to supply a known UID.
							byte validBits		///< The number of known UID bits supplied in *uid. Normally 0. If set you must also supply uid->size.
						 ) {
 80a1eaa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//		10 bytes		1			CT		uid0	uid1	uid2
	//						2			CT		uid3	uid4	uid5
	//						3			uid6	uid7	uid8	uid9
	
	// Sanity checks
	if (validBits > 80) {
 80a1eae:	2a50      	cmp	r2, #80	; 0x50
 * 
 * @return STATUS_OK on success, STATUS_??? otherwise.
 */
byte MFRC522::PICC_Select(	Uid *uid,			///< Pointer to Uid struct. Normally output, but can also be used to supply a known UID.
							byte validBits		///< The number of known UID bits supplied in *uid. Normally 0. If set you must also supply uid->size.
						 ) {
 80a1eb0:	b08b      	sub	sp, #44	; 0x2c
 80a1eb2:	4683      	mov	fp, r0
 80a1eb4:	468a      	mov	sl, r1
 80a1eb6:	4617      	mov	r7, r2
	//		10 bytes		1			CT		uid0	uid1	uid2
	//						2			CT		uid3	uid4	uid5
	//						3			uid6	uid7	uid8	uid9
	
	// Sanity checks
	if (validBits > 80) {
 80a1eb8:	f200 80f6 	bhi.w	80a20a8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1fe>
		return STATUS_INVALID;
	}

	// Prepare MFRC522
	PCD_ClearRegisterBitMask(CollReg, 0x80);			// ValuesAfterColl=1 => Bits received after collision are cleared.
 80a1ebc:	2280      	movs	r2, #128	; 0x80
 80a1ebe:	211c      	movs	r1, #28
 80a1ec0:	f7ff fde5 	bl	80a1a8e <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>
							byte validBits		///< The number of known UID bits supplied in *uid. Normally 0. If set you must also supply uid->size.
						 ) {
	bool uidComplete;
	bool selectDone;
	bool useCascadeTag;
	byte cascadeLevel	= 1; 
 80a1ec4:	2501      	movs	r5, #1

	// Repeat Cascade Level loop until we have a complete UID.
	uidComplete = false;
	while ( ! uidComplete) {
		// Set the Cascade Level in the SEL byte, find out if we need to use the Cascade Tag in byte 2.
		switch (cascadeLevel) {
 80a1ec6:	2d02      	cmp	r5, #2
 80a1ec8:	d010      	beq.n	80a1eec <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x42>
 80a1eca:	2d03      	cmp	r5, #3
 80a1ecc:	d01b      	beq.n	80a1f06 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x5c>
 80a1ece:	2d01      	cmp	r5, #1
 80a1ed0:	f040 80ec 	bne.w	80a20ac <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x202>
			case 1:
				buffer[0] = PICC_CMD_SEL_CL1;
 80a1ed4:	2393      	movs	r3, #147	; 0x93
 80a1ed6:	f88d 301c 	strb.w	r3, [sp, #28]
				uidIndex = 0;
				useCascadeTag = validBits && uid->size > 4;	// When we know that the UID has more than 4 bytes
 80a1eda:	b1d7      	cbz	r7, 80a1f12 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x68>
 80a1edc:	f89a 3000 	ldrb.w	r3, [sl]
	while ( ! uidComplete) {
		// Set the Cascade Level in the SEL byte, find out if we need to use the Cascade Tag in byte 2.
		switch (cascadeLevel) {
			case 1:
				buffer[0] = PICC_CMD_SEL_CL1;
				uidIndex = 0;
 80a1ee0:	2600      	movs	r6, #0
				useCascadeTag = validBits && uid->size > 4;	// When we know that the UID has more than 4 bytes
 80a1ee2:	2b04      	cmp	r3, #4
 80a1ee4:	bf94      	ite	ls
 80a1ee6:	2300      	movls	r3, #0
 80a1ee8:	2301      	movhi	r3, #1
 80a1eea:	e016      	b.n	80a1f1a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x70>
				break;
			
			case 2:
				buffer[0] = PICC_CMD_SEL_CL2;
 80a1eec:	f06f 036a 	mvn.w	r3, #106	; 0x6a
 80a1ef0:	f88d 301c 	strb.w	r3, [sp, #28]
				uidIndex = 3;
				useCascadeTag = validBits && uid->size > 7;	// When we know that the UID has more than 7 bytes
 80a1ef4:	b17f      	cbz	r7, 80a1f16 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x6c>
 80a1ef6:	f89a 3000 	ldrb.w	r3, [sl]
				useCascadeTag = validBits && uid->size > 4;	// When we know that the UID has more than 4 bytes
				break;
			
			case 2:
				buffer[0] = PICC_CMD_SEL_CL2;
				uidIndex = 3;
 80a1efa:	2603      	movs	r6, #3
				useCascadeTag = validBits && uid->size > 7;	// When we know that the UID has more than 7 bytes
 80a1efc:	2b07      	cmp	r3, #7
 80a1efe:	bf94      	ite	ls
 80a1f00:	2300      	movls	r3, #0
 80a1f02:	2301      	movhi	r3, #1
 80a1f04:	e009      	b.n	80a1f1a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x70>
				break;
			
			case 3:
				buffer[0] = PICC_CMD_SEL_CL3;
 80a1f06:	2397      	movs	r3, #151	; 0x97
 80a1f08:	f88d 301c 	strb.w	r3, [sp, #28]
				uidIndex = 6;
 80a1f0c:	2606      	movs	r6, #6
				useCascadeTag = false;						// Never used in CL3.
 80a1f0e:	2300      	movs	r3, #0
				break;
 80a1f10:	e003      	b.n	80a1f1a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x70>
	while ( ! uidComplete) {
		// Set the Cascade Level in the SEL byte, find out if we need to use the Cascade Tag in byte 2.
		switch (cascadeLevel) {
			case 1:
				buffer[0] = PICC_CMD_SEL_CL1;
				uidIndex = 0;
 80a1f12:	463e      	mov	r6, r7
 80a1f14:	e000      	b.n	80a1f18 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x6e>
				useCascadeTag = validBits && uid->size > 4;	// When we know that the UID has more than 4 bytes
				break;
			
			case 2:
				buffer[0] = PICC_CMD_SEL_CL2;
				uidIndex = 3;
 80a1f16:	2603      	movs	r6, #3
				useCascadeTag = validBits && uid->size > 7;	// When we know that the UID has more than 7 bytes
 80a1f18:	463b      	mov	r3, r7
				return STATUS_INTERNAL_ERROR;
				break;
		}
		
		// How many UID bits are known in this Cascade Level?
		currentLevelKnownBits = validBits - (8 * uidIndex);
 80a1f1a:	eba7 04c6 	sub.w	r4, r7, r6, lsl #3
 80a1f1e:	b264      	sxtb	r4, r4
 80a1f20:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
		if (currentLevelKnownBits < 0) {
			currentLevelKnownBits = 0;
		}
		// Copy the known bits from uid->uidByte[] to buffer[]
		index = 2; // destination index in buffer[]
		if (useCascadeTag) {
 80a1f24:	b12b      	cbz	r3, 80a1f32 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x88>
			buffer[index++] = PICC_CMD_CT;
 80a1f26:	2288      	movs	r2, #136	; 0x88
 80a1f28:	f88d 201e 	strb.w	r2, [sp, #30]
 80a1f2c:	f04f 0803 	mov.w	r8, #3
 80a1f30:	e001      	b.n	80a1f36 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x8c>
		currentLevelKnownBits = validBits - (8 * uidIndex);
		if (currentLevelKnownBits < 0) {
			currentLevelKnownBits = 0;
		}
		// Copy the known bits from uid->uidByte[] to buffer[]
		index = 2; // destination index in buffer[]
 80a1f32:	f04f 0802 	mov.w	r8, #2
		if (useCascadeTag) {
			buffer[index++] = PICC_CMD_CT;
		}
		byte bytesToCopy = currentLevelKnownBits / 8 + (currentLevelKnownBits % 8 ? 1 : 0); // The number of bytes needed to represent the known bits for this level.
 80a1f36:	b2e1      	uxtb	r1, r4
 80a1f38:	f011 0207 	ands.w	r2, r1, #7
 80a1f3c:	bf18      	it	ne
 80a1f3e:	2201      	movne	r2, #1
 80a1f40:	eb02 02e4 	add.w	r2, r2, r4, asr #3
		if (bytesToCopy) {
 80a1f44:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 80a1f48:	d106      	bne.n	80a1f58 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xae>
			for (count = 0; count < bytesToCopy; count++) {
				buffer[index++] = uid->uidByte[uidIndex + count];
			}
		}
		// Now that the data has been copied we need to include the 8 bits in CT in currentLevelKnownBits
		if (useCascadeTag) {
 80a1f4a:	2b00      	cmp	r3, #0
 80a1f4c:	f000 808c 	beq.w	80a2068 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1be>
			currentLevelKnownBits += 8;
 80a1f50:	f101 0408 	add.w	r4, r1, #8
 80a1f54:	b264      	sxtb	r4, r4
 80a1f56:	e087      	b.n	80a2068 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1be>
		if (useCascadeTag) {
			buffer[index++] = PICC_CMD_CT;
		}
		byte bytesToCopy = currentLevelKnownBits / 8 + (currentLevelKnownBits % 8 ? 1 : 0); // The number of bytes needed to represent the known bits for this level.
		if (bytesToCopy) {
			byte maxBytes = useCascadeTag ? 3 : 4; // Max 4 bytes in each Cascade Level. Only 3 left if we use the Cascade Tag
 80a1f58:	2b00      	cmp	r3, #0
 80a1f5a:	bf14      	ite	ne
 80a1f5c:	2003      	movne	r0, #3
 80a1f5e:	2004      	moveq	r0, #4
 80a1f60:	4282      	cmp	r2, r0
 80a1f62:	bf28      	it	cs
 80a1f64:	4602      	movcs	r2, r0
 80a1f66:	2000      	movs	r0, #0
			if (bytesToCopy > maxBytes) { 
				bytesToCopy = maxBytes;
			}
			for (count = 0; count < bytesToCopy; count++) {
				buffer[index++] = uid->uidByte[uidIndex + count];
 80a1f68:	eb08 0e00 	add.w	lr, r8, r0
 80a1f6c:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 80a1f70:	fa5f fe8e 	uxtb.w	lr, lr
 80a1f74:	44e6      	add	lr, ip
 80a1f76:	eb06 0c00 	add.w	ip, r6, r0
 80a1f7a:	44d4      	add	ip, sl
 80a1f7c:	f89c c001 	ldrb.w	ip, [ip, #1]
 80a1f80:	3001      	adds	r0, #1
 80a1f82:	f80e cc0c 	strb.w	ip, [lr, #-12]
		if (bytesToCopy) {
			byte maxBytes = useCascadeTag ? 3 : 4; // Max 4 bytes in each Cascade Level. Only 3 left if we use the Cascade Tag
			if (bytesToCopy > maxBytes) { 
				bytesToCopy = maxBytes;
			}
			for (count = 0; count < bytesToCopy; count++) {
 80a1f86:	fa5f fe80 	uxtb.w	lr, r0
 80a1f8a:	4596      	cmp	lr, r2
 80a1f8c:	d3ec      	bcc.n	80a1f68 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xbe>
 80a1f8e:	e7dc      	b.n	80a1f4a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xa0>
				currentLevelKnownBits = collisionPos;
				count			= (currentLevelKnownBits - 1) % 8; // The bit to modify
				index			= 1 + (currentLevelKnownBits / 8) + (count ? 1 : 0); // First byte is index 0.
				buffer[index]	|= (1 << count); 
			}
			else if (result != STATUS_OK) {
 80a1f90:	2801      	cmp	r0, #1
 80a1f92:	f040 808d 	bne.w	80a20b0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x206>
				return result;
			}
			else { // STATUS_OK
				if (currentLevelKnownBits >= 32) { // This was a SELECT.
 80a1f96:	2c1f      	cmp	r4, #31
 80a1f98:	f300 808c 	bgt.w	80a20b4 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x20a>
					selectDone = true; // No more anticollision 
					// We continue below outside the while.
				}
				else { // This was an ANTICOLLISION.
					// We now have all 32 bits of the UID in this Cascade Level
					currentLevelKnownBits = 32;
 80a1f9c:	2420      	movs	r4, #32
		selectDone = false;
		while ( ! selectDone) {
			// Find out how many bits and bytes to send and receive.
			if (currentLevelKnownBits >= 32) { // All UID bits in this Cascade Level are known. This is a SELECT.
				//Serial.print("SELECT: currentLevelKnownBits="); Serial.println(currentLevelKnownBits, DEC);
				buffer[1] = 0x70; // NVB - Number of Valid Bits: Seven whole bytes
 80a1f9e:	f04f 0370 	mov.w	r3, #112	; 0x70
				// Calulate BCC - Block Check Character
				buffer[6] = buffer[2] ^ buffer[3] ^ buffer[4] ^ buffer[5];
 80a1fa2:	f89d 201e 	ldrb.w	r2, [sp, #30]
		selectDone = false;
		while ( ! selectDone) {
			// Find out how many bits and bytes to send and receive.
			if (currentLevelKnownBits >= 32) { // All UID bits in this Cascade Level are known. This is a SELECT.
				//Serial.print("SELECT: currentLevelKnownBits="); Serial.println(currentLevelKnownBits, DEC);
				buffer[1] = 0x70; // NVB - Number of Valid Bits: Seven whole bytes
 80a1fa6:	f88d 301d 	strb.w	r3, [sp, #29]
				// Calulate BCC - Block Check Character
				buffer[6] = buffer[2] ^ buffer[3] ^ buffer[4] ^ buffer[5];
 80a1faa:	f89d 301f 	ldrb.w	r3, [sp, #31]
				// Calculate CRC_A
				result = PCD_CalculateCRC(buffer, 7, &buffer[7]);
 80a1fae:	a907      	add	r1, sp, #28
			// Find out how many bits and bytes to send and receive.
			if (currentLevelKnownBits >= 32) { // All UID bits in this Cascade Level are known. This is a SELECT.
				//Serial.print("SELECT: currentLevelKnownBits="); Serial.println(currentLevelKnownBits, DEC);
				buffer[1] = 0x70; // NVB - Number of Valid Bits: Seven whole bytes
				// Calulate BCC - Block Check Character
				buffer[6] = buffer[2] ^ buffer[3] ^ buffer[4] ^ buffer[5];
 80a1fb0:	4053      	eors	r3, r2
 80a1fb2:	f89d 2020 	ldrb.w	r2, [sp, #32]
				// Calculate CRC_A
				result = PCD_CalculateCRC(buffer, 7, &buffer[7]);
 80a1fb6:	4658      	mov	r0, fp
			// Find out how many bits and bytes to send and receive.
			if (currentLevelKnownBits >= 32) { // All UID bits in this Cascade Level are known. This is a SELECT.
				//Serial.print("SELECT: currentLevelKnownBits="); Serial.println(currentLevelKnownBits, DEC);
				buffer[1] = 0x70; // NVB - Number of Valid Bits: Seven whole bytes
				// Calulate BCC - Block Check Character
				buffer[6] = buffer[2] ^ buffer[3] ^ buffer[4] ^ buffer[5];
 80a1fb8:	405a      	eors	r2, r3
 80a1fba:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
 80a1fbe:	4053      	eors	r3, r2
 80a1fc0:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
				// Calculate CRC_A
				result = PCD_CalculateCRC(buffer, 7, &buffer[7]);
 80a1fc4:	2207      	movs	r2, #7
 80a1fc6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80a1fca:	f7ff fd6f 	bl	80a1aac <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
				if (result != STATUS_OK) {
 80a1fce:	2801      	cmp	r0, #1
 80a1fd0:	f040 80b7 	bne.w	80a2142 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x298>
					return result;
				}
				txLastBits		= 0; // 0 => All 8 bits are valid.
 80a1fd4:	f04f 0300 	mov.w	r3, #0
 80a1fd8:	f88d 301a 	strb.w	r3, [sp, #26]
				bufferUsed		= 9;
				// Store response in the last 3 bytes of buffer (BCC and CRC_A - not needed after tx)
				responseBuffer	= &buffer[6];
				responseLength	= 3;
 80a1fdc:	2303      	movs	r3, #3
 80a1fde:	f88d 301b 	strb.w	r3, [sp, #27]
				result = PCD_CalculateCRC(buffer, 7, &buffer[7]);
				if (result != STATUS_OK) {
					return result;
				}
				txLastBits		= 0; // 0 => All 8 bits are valid.
				bufferUsed		= 9;
 80a1fe2:	2309      	movs	r3, #9
				// Store response in the last 3 bytes of buffer (BCC and CRC_A - not needed after tx)
				responseBuffer	= &buffer[6];
 80a1fe4:	f10d 0922 	add.w	r9, sp, #34	; 0x22
				result = PCD_CalculateCRC(buffer, 7, &buffer[7]);
				if (result != STATUS_OK) {
					return result;
				}
				txLastBits		= 0; // 0 => All 8 bits are valid.
				bufferUsed		= 9;
 80a1fe8:	9304      	str	r3, [sp, #16]
				responseBuffer	= &buffer[index];
				responseLength	= sizeof(buffer) - index;
			}

			// Set bit adjustments
			rxAlign = txLastBits;											// Having a seperate variable is overkill. But it makes the next line easier to read.
 80a1fea:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 80a1fee:	f818 3d0e 	ldrb.w	r3, [r8, #-14]!
			PCD_WriteRegister(BitFramingReg, (rxAlign << 4) + txLastBits);	// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
 80a1ff2:	211a      	movs	r1, #26
 80a1ff4:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 80a1ff8:	b2d2      	uxtb	r2, r2
 80a1ffa:	4658      	mov	r0, fp
 80a1ffc:	9305      	str	r3, [sp, #20]
 80a1ffe:	f7ff fcee 	bl	80a19de <_ZN7MFRC52217PCD_WriteRegisterEhh>

			// Transmit the buffer and receive the response.
			result = PCD_TransceiveData(buffer, bufferUsed, responseBuffer, &responseLength, &txLastBits, rxAlign);			
 80a2002:	2300      	movs	r3, #0
 80a2004:	9303      	str	r3, [sp, #12]
 80a2006:	9b05      	ldr	r3, [sp, #20]
 80a2008:	f8cd 8004 	str.w	r8, [sp, #4]
 80a200c:	9302      	str	r3, [sp, #8]
 80a200e:	f10d 031b 	add.w	r3, sp, #27
 80a2012:	9300      	str	r3, [sp, #0]
 80a2014:	9a04      	ldr	r2, [sp, #16]
 80a2016:	464b      	mov	r3, r9
 80a2018:	a907      	add	r1, sp, #28
 80a201a:	4658      	mov	r0, fp
 80a201c:	f7ff feec 	bl	80a1df8 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
			if (result == STATUS_COLLISION) { // More than one PICC in the field => collision.
 80a2020:	2803      	cmp	r0, #3
			// Set bit adjustments
			rxAlign = txLastBits;											// Having a seperate variable is overkill. But it makes the next line easier to read.
			PCD_WriteRegister(BitFramingReg, (rxAlign << 4) + txLastBits);	// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]

			// Transmit the buffer and receive the response.
			result = PCD_TransceiveData(buffer, bufferUsed, responseBuffer, &responseLength, &txLastBits, rxAlign);			
 80a2022:	4680      	mov	r8, r0
			if (result == STATUS_COLLISION) { // More than one PICC in the field => collision.
 80a2024:	d1b4      	bne.n	80a1f90 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xe6>
				result = PCD_ReadRegister(CollReg); // CollReg[7..0] bits are: ValuesAfterColl reserved CollPosNotValid CollPos[4:0]
 80a2026:	211c      	movs	r1, #28
 80a2028:	4658      	mov	r0, fp
 80a202a:	f7ff fd0a 	bl	80a1a42 <_ZN7MFRC52216PCD_ReadRegisterEh>
				if (result & 0x20) { // CollPosNotValid
 80a202e:	0681      	lsls	r1, r0, #26
 80a2030:	d43e      	bmi.n	80a20b0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x206>
					return STATUS_COLLISION; // Without a valid collision position we cannot continue
				}
				byte collisionPos = result & 0x1F; // Values 0-31, 0 means bit 32.
				if (collisionPos == 0) {
					collisionPos = 32;
 80a2032:	f010 001f 	ands.w	r0, r0, #31
 80a2036:	bf08      	it	eq
 80a2038:	2020      	moveq	r0, #32
				}
				if (collisionPos <= currentLevelKnownBits) { // No progress - should not happen 
 80a203a:	42a0      	cmp	r0, r4
 80a203c:	dd36      	ble.n	80a20ac <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x202>
					return STATUS_INTERNAL_ERROR;
				}
				// Choose the PICC with the bit set.
				currentLevelKnownBits = collisionPos;
 80a203e:	b244      	sxtb	r4, r0
				count			= (currentLevelKnownBits - 1) % 8; // The bit to modify
 80a2040:	3801      	subs	r0, #1
				index			= 1 + (currentLevelKnownBits / 8) + (count ? 1 : 0); // First byte is index 0.
				buffer[index]	|= (1 << count); 
 80a2042:	f000 0307 	and.w	r3, r0, #7
 80a2046:	f010 0007 	ands.w	r0, r0, #7
 80a204a:	bf18      	it	ne
 80a204c:	2001      	movne	r0, #1
 80a204e:	eb00 00e4 	add.w	r0, r0, r4, asr #3
 80a2052:	aa0a      	add	r2, sp, #40	; 0x28
 80a2054:	3001      	adds	r0, #1
 80a2056:	4410      	add	r0, r2
 80a2058:	2201      	movs	r2, #1
 80a205a:	fa02 f303 	lsl.w	r3, r2, r3
 80a205e:	f810 2c0c 	ldrb.w	r2, [r0, #-12]
 80a2062:	4313      	orrs	r3, r2
 80a2064:	f800 3c0c 	strb.w	r3, [r0, #-12]
		
		// Repeat anti collision loop until we can transmit all UID bits + BCC and receive a SAK - max 32 iterations.
		selectDone = false;
		while ( ! selectDone) {
			// Find out how many bits and bytes to send and receive.
			if (currentLevelKnownBits >= 32) { // All UID bits in this Cascade Level are known. This is a SELECT.
 80a2068:	2c1f      	cmp	r4, #31
 80a206a:	dc98      	bgt.n	80a1f9e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xf4>
			}
			else { // This is an ANTICOLLISION.
				//Serial.print("ANTICOLLISION: currentLevelKnownBits="); Serial.println(currentLevelKnownBits, DEC);
				txLastBits		= currentLevelKnownBits % 8;
				count			= currentLevelKnownBits / 8;	// Number of whole bytes in the UID part.
				index			= 2 + count;					// Number of whole bytes: SEL + NVB + UIDs
 80a206c:	10e3      	asrs	r3, r4, #3
 80a206e:	3302      	adds	r3, #2
 80a2070:	b2db      	uxtb	r3, r3
				responseBuffer	= &buffer[6];
				responseLength	= 3;
			}
			else { // This is an ANTICOLLISION.
				//Serial.print("ANTICOLLISION: currentLevelKnownBits="); Serial.println(currentLevelKnownBits, DEC);
				txLastBits		= currentLevelKnownBits % 8;
 80a2072:	f004 0807 	and.w	r8, r4, #7
 80a2076:	fa5f f288 	uxtb.w	r2, r8
				count			= currentLevelKnownBits / 8;	// Number of whole bytes in the UID part.
				index			= 2 + count;					// Number of whole bytes: SEL + NVB + UIDs
				buffer[1]		= (index << 4) + txLastBits;	// NVB - Number of Valid Bits
				bufferUsed		= index + (txLastBits ? 1 : 0);
 80a207a:	f1b8 0f00 	cmp.w	r8, #0
 80a207e:	bf0c      	ite	eq
 80a2080:	4698      	moveq	r8, r3
 80a2082:	f103 0801 	addne.w	r8, r3, #1
				responseBuffer	= &buffer[6];
				responseLength	= 3;
			}
			else { // This is an ANTICOLLISION.
				//Serial.print("ANTICOLLISION: currentLevelKnownBits="); Serial.println(currentLevelKnownBits, DEC);
				txLastBits		= currentLevelKnownBits % 8;
 80a2086:	f88d 201a 	strb.w	r2, [sp, #26]
				count			= currentLevelKnownBits / 8;	// Number of whole bytes in the UID part.
				index			= 2 + count;					// Number of whole bytes: SEL + NVB + UIDs
				buffer[1]		= (index << 4) + txLastBits;	// NVB - Number of Valid Bits
 80a208a:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 80a208e:	f88d 201d 	strb.w	r2, [sp, #29]
				bufferUsed		= index + (txLastBits ? 1 : 0);
 80a2092:	fa5f f288 	uxtb.w	r2, r8
 80a2096:	9204      	str	r2, [sp, #16]
				// Store response in the unused part of buffer
				responseBuffer	= &buffer[index];
 80a2098:	aa07      	add	r2, sp, #28
 80a209a:	eb02 0903 	add.w	r9, r2, r3
				responseLength	= sizeof(buffer) - index;
 80a209e:	f1c3 0309 	rsb	r3, r3, #9
 80a20a2:	f88d 301b 	strb.w	r3, [sp, #27]
 80a20a6:	e7a0      	b.n	80a1fea <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x140>
	//						2			CT		uid3	uid4	uid5
	//						3			uid6	uid7	uid8	uid9
	
	// Sanity checks
	if (validBits > 80) {
		return STATUS_INVALID;
 80a20a8:	2007      	movs	r0, #7
 80a20aa:	e04a      	b.n	80a2142 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x298>
				byte collisionPos = result & 0x1F; // Values 0-31, 0 means bit 32.
				if (collisionPos == 0) {
					collisionPos = 32;
				}
				if (collisionPos <= currentLevelKnownBits) { // No progress - should not happen 
					return STATUS_INTERNAL_ERROR;
 80a20ac:	2006      	movs	r0, #6
 80a20ae:	e048      	b.n	80a2142 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x298>
			// Set bit adjustments
			rxAlign = txLastBits;											// Having a seperate variable is overkill. But it makes the next line easier to read.
			PCD_WriteRegister(BitFramingReg, (rxAlign << 4) + txLastBits);	// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]

			// Transmit the buffer and receive the response.
			result = PCD_TransceiveData(buffer, bufferUsed, responseBuffer, &responseLength, &txLastBits, rxAlign);			
 80a20b0:	4640      	mov	r0, r8
 80a20b2:	e046      	b.n	80a2142 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x298>
		} // End of while ( ! selectDone)

		// We do not check the CBB - it was constructed by us above.
		
		// Copy the found UID bytes from buffer[] to uid->uidByte[]
		index			= (buffer[2] == PICC_CMD_CT) ? 3 : 2; // source index in buffer[]
 80a20b4:	f89d 301e 	ldrb.w	r3, [sp, #30]
 80a20b8:	2b88      	cmp	r3, #136	; 0x88
 80a20ba:	d03f      	beq.n	80a213c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x292>
 80a20bc:	2102      	movs	r1, #2
		bytesToCopy		= (buffer[2] == PICC_CMD_CT) ? 3 : 4;
 80a20be:	2404      	movs	r4, #4
 80a20c0:	2300      	movs	r3, #0
		for (count = 0; count < bytesToCopy; count++) {
			uid->uidByte[uidIndex + count] = buffer[index++];
 80a20c2:	18ca      	adds	r2, r1, r3
 80a20c4:	b2d2      	uxtb	r2, r2
 80a20c6:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 80a20ca:	4472      	add	r2, lr
 80a20cc:	18f0      	adds	r0, r6, r3
 80a20ce:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80a20d2:	4450      	add	r0, sl
 80a20d4:	3301      	adds	r3, #1
 80a20d6:	7042      	strb	r2, [r0, #1]
		// We do not check the CBB - it was constructed by us above.
		
		// Copy the found UID bytes from buffer[] to uid->uidByte[]
		index			= (buffer[2] == PICC_CMD_CT) ? 3 : 2; // source index in buffer[]
		bytesToCopy		= (buffer[2] == PICC_CMD_CT) ? 3 : 4;
		for (count = 0; count < bytesToCopy; count++) {
 80a20d8:	b2da      	uxtb	r2, r3
 80a20da:	4294      	cmp	r4, r2
 80a20dc:	d8f1      	bhi.n	80a20c2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x218>
			uid->uidByte[uidIndex + count] = buffer[index++];
		}
		
		// Check response SAK (Select Acknowledge)
		if (responseLength != 3 || txLastBits != 0) {		// SAK must be exactly 24 bits (1 byte + CRC_A).
 80a20de:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80a20e2:	2b03      	cmp	r3, #3
 80a20e4:	d126      	bne.n	80a2134 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
 80a20e6:	f89d 301a 	ldrb.w	r3, [sp, #26]
 80a20ea:	bb1b      	cbnz	r3, 80a2134 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
			return STATUS_ERROR;
		}
		// Verify CRC_A - do our own calculation and store the control in buffer[2..3] - those bytes are not needed anymore.
		result = PCD_CalculateCRC(responseBuffer, 1, &buffer[2]);
 80a20ec:	f10d 031e 	add.w	r3, sp, #30
 80a20f0:	2201      	movs	r2, #1
 80a20f2:	4649      	mov	r1, r9
 80a20f4:	4658      	mov	r0, fp
 80a20f6:	f7ff fcd9 	bl	80a1aac <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
		if (result != STATUS_OK) {
 80a20fa:	2801      	cmp	r0, #1
 80a20fc:	d121      	bne.n	80a2142 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x298>
			return result;
		}
		if ((buffer[2] != responseBuffer[1]) || (buffer[3] != responseBuffer[2])) {
 80a20fe:	f89d 201e 	ldrb.w	r2, [sp, #30]
 80a2102:	f899 3001 	ldrb.w	r3, [r9, #1]
 80a2106:	429a      	cmp	r2, r3
 80a2108:	d116      	bne.n	80a2138 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28e>
 80a210a:	f89d 201f 	ldrb.w	r2, [sp, #31]
 80a210e:	f899 3002 	ldrb.w	r3, [r9, #2]
 80a2112:	429a      	cmp	r2, r3
 80a2114:	d110      	bne.n	80a2138 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28e>
			return STATUS_CRC_WRONG;
		}
		if (responseBuffer[0] & 0x04) { // Cascade bit set - UID not complete yes
 80a2116:	f899 3000 	ldrb.w	r3, [r9]
 80a211a:	075a      	lsls	r2, r3, #29
 80a211c:	d502      	bpl.n	80a2124 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x27a>
			cascadeLevel++;
 80a211e:	3501      	adds	r5, #1
 80a2120:	b2ed      	uxtb	r5, r5
 80a2122:	e6d0      	b.n	80a1ec6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1c>
			uid->sak = responseBuffer[0];
		}
	} // End of while ( ! uidComplete)
	
	// Set correct uid->size
	uid->size = 3 * cascadeLevel + 1;
 80a2124:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80a2128:	3501      	adds	r5, #1
		if (responseBuffer[0] & 0x04) { // Cascade bit set - UID not complete yes
			cascadeLevel++;
		}
		else {
			uidComplete = true;
			uid->sak = responseBuffer[0];
 80a212a:	f88a 300b 	strb.w	r3, [sl, #11]
		}
	} // End of while ( ! uidComplete)
	
	// Set correct uid->size
	uid->size = 3 * cascadeLevel + 1;
 80a212e:	f88a 5000 	strb.w	r5, [sl]

	return STATUS_OK;
 80a2132:	e006      	b.n	80a2142 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x298>
			uid->uidByte[uidIndex + count] = buffer[index++];
		}
		
		// Check response SAK (Select Acknowledge)
		if (responseLength != 3 || txLastBits != 0) {		// SAK must be exactly 24 bits (1 byte + CRC_A).
			return STATUS_ERROR;
 80a2134:	2002      	movs	r0, #2
 80a2136:	e004      	b.n	80a2142 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x298>
		result = PCD_CalculateCRC(responseBuffer, 1, &buffer[2]);
		if (result != STATUS_OK) {
			return result;
		}
		if ((buffer[2] != responseBuffer[1]) || (buffer[3] != responseBuffer[2])) {
			return STATUS_CRC_WRONG;
 80a2138:	2008      	movs	r0, #8
 80a213a:	e002      	b.n	80a2142 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x298>
		} // End of while ( ! selectDone)

		// We do not check the CBB - it was constructed by us above.
		
		// Copy the found UID bytes from buffer[] to uid->uidByte[]
		index			= (buffer[2] == PICC_CMD_CT) ? 3 : 2; // source index in buffer[]
 80a213c:	2103      	movs	r1, #3
		bytesToCopy		= (buffer[2] == PICC_CMD_CT) ? 3 : 4;
 80a213e:	460c      	mov	r4, r1
 80a2140:	e7be      	b.n	80a20c0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x216>
	
	// Set correct uid->size
	uid->size = 3 * cascadeLevel + 1;

	return STATUS_OK;
} // End PICC_Select()
 80a2142:	b00b      	add	sp, #44	; 0x2c
 80a2144:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a2148 <_ZN7MFRC52219PICC_ReadCardSerialEv>:
 * Remember to call PICC_IsNewCardPresent(), PICC_RequestA() or PICC_WakeupA() first.
 * The read UID is available in the class variable uid.
 * 
 * @return bool
 */
bool MFRC522::PICC_ReadCardSerial() {
 80a2148:	b508      	push	{r3, lr}
	byte result = PICC_Select(&uid);
 80a214a:	2200      	movs	r2, #0
 80a214c:	4601      	mov	r1, r0
 80a214e:	f7ff feac 	bl	80a1eaa <_ZN7MFRC52211PICC_SelectEPNS_3UidEh>
	return (result == STATUS_OK);
} // End PICC_ReadCardSerial()
 80a2152:	1e43      	subs	r3, r0, #1
 80a2154:	4258      	negs	r0, r3
 80a2156:	4158      	adcs	r0, r3
 80a2158:	bd08      	pop	{r3, pc}

080a215a <_GLOBAL__sub_I__ZN7MFRC522C2Ehh>:
 80a215a:	f001 b973 	b.w	80a3444 <HAL_Pin_Map>
	...

080a2160 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
 80a2160:	b538      	push	{r3, r4, r5, lr}
 80a2162:	4b0b      	ldr	r3, [pc, #44]	; (80a2190 <_ZN9TCPClientD1Ev+0x30>)
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 80a2164:	6984      	ldr	r4, [r0, #24]
 80a2166:	4605      	mov	r5, r0
 80a2168:	6003      	str	r3, [r0, #0]
 80a216a:	b17c      	cbz	r4, 80a218c <_ZN9TCPClientD1Ev+0x2c>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a216c:	6863      	ldr	r3, [r4, #4]
 80a216e:	3b01      	subs	r3, #1
 80a2170:	6063      	str	r3, [r4, #4]
 80a2172:	b95b      	cbnz	r3, 80a218c <_ZN9TCPClientD1Ev+0x2c>
        {
          _M_dispose();
 80a2174:	6823      	ldr	r3, [r4, #0]
 80a2176:	4620      	mov	r0, r4
 80a2178:	689b      	ldr	r3, [r3, #8]
 80a217a:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a217c:	68a3      	ldr	r3, [r4, #8]
 80a217e:	3b01      	subs	r3, #1
 80a2180:	60a3      	str	r3, [r4, #8]
 80a2182:	b91b      	cbnz	r3, 80a218c <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
 80a2184:	6823      	ldr	r3, [r4, #0]
 80a2186:	4620      	mov	r0, r4
 80a2188:	68db      	ldr	r3, [r3, #12]
 80a218a:	4798      	blx	r3
 80a218c:	4628      	mov	r0, r5
 80a218e:	bd38      	pop	{r3, r4, r5, pc}
 80a2190:	080aa0b4 	.word	0x080aa0b4

080a2194 <_ZN9TCPClientD0Ev>:
 80a2194:	b510      	push	{r4, lr}
 80a2196:	4604      	mov	r4, r0
 80a2198:	f7ff ffe2 	bl	80a2160 <_ZN9TCPClientD1Ev>
 80a219c:	4620      	mov	r0, r4
 80a219e:	211c      	movs	r1, #28
 80a21a0:	f003 f902 	bl	80a53a8 <_ZdlPvj>
 80a21a4:	4620      	mov	r0, r4
 80a21a6:	bd10      	pop	{r4, pc}

080a21a8 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi>:

    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(char* domain, uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
 80a21a8:	b538      	push	{r3, r4, r5, lr}
 80a21aa:	461d      	mov	r5, r3
    this->callback = callback;
 80a21ac:	9b05      	ldr	r3, [sp, #20]

    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(char* domain, uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
 80a21ae:	4604      	mov	r4, r0
    this->callback = callback;
 80a21b0:	6303      	str	r3, [r0, #48]	; 0x30
    this->qoscallback = NULL;
 80a21b2:	2300      	movs	r3, #0
 80a21b4:	6343      	str	r3, [r0, #52]	; 0x34
    if (ip != NULL)
 80a21b6:	b102      	cbz	r2, 80a21ba <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x12>
        this->ip = ip;
 80a21b8:	6482      	str	r2, [r0, #72]	; 0x48
    if (domain != NULL)
 80a21ba:	b119      	cbz	r1, 80a21c4 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x1c>
        this->domain = domain;
 80a21bc:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80a21c0:	f002 f821 	bl	80a4206 <_ZN6StringaSEPKc>
    this->port = port;
    this->keepalive = keepalive;
 80a21c4:	9b04      	ldr	r3, [sp, #16]

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
    if (buffer != NULL)
 80a21c6:	69e0      	ldr	r0, [r4, #28]
    if (ip != NULL)
        this->ip = ip;
    if (domain != NULL)
        this->domain = domain;
    this->port = port;
    this->keepalive = keepalive;
 80a21c8:	6523      	str	r3, [r4, #80]	; 0x50

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
 80a21ca:	9b06      	ldr	r3, [sp, #24]
    this->qoscallback = NULL;
    if (ip != NULL)
        this->ip = ip;
    if (domain != NULL)
        this->domain = domain;
    this->port = port;
 80a21cc:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
    this->keepalive = keepalive;

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
 80a21d0:	2bff      	cmp	r3, #255	; 0xff
 80a21d2:	bfb8      	it	lt
 80a21d4:	23ff      	movlt	r3, #255	; 0xff
 80a21d6:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    if (buffer != NULL)
 80a21da:	b108      	cbz	r0, 80a21e0 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x38>
      delete[] buffer;
 80a21dc:	f7fd ff65 	bl	80a00aa <_ZdaPv>
    buffer = new uint8_t[this->maxpacketsize];
 80a21e0:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
 80a21e4:	f7fd ff5d 	bl	80a00a2 <_Znaj>
 80a21e8:	61e0      	str	r0, [r4, #28]
 80a21ea:	bd38      	pop	{r3, r4, r5, pc}

080a21ec <_ZN4MQTTC1EPctiPFvS0_PhjEi>:

MQTT::MQTT(char* domain, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int)) {
    this->initialize(domain, NULL, port, keepalive, callback, MQTT_MAX_PACKET_SIZE);
}

MQTT::MQTT(char* domain, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
 80a21ec:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80a21f0:	4604      	mov	r4, r0
 80a21f2:	4617      	mov	r7, r2
 80a21f4:	4698      	mov	r8, r3
 80a21f6:	460e      	mov	r6, r1
 80a21f8:	2500      	movs	r5, #0
 80a21fa:	f001 feb1 	bl	80a3f60 <_ZN9TCPClientC1Ev>
 80a21fe:	61e5      	str	r5, [r4, #28]
 80a2200:	490a      	ldr	r1, [pc, #40]	; (80a222c <_ZN4MQTTC1EPctiPFvS0_PhjEi+0x40>)
 80a2202:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80a2206:	f001 ffac 	bl	80a4162 <_ZN6StringC1EPK19__FlashStringHelper>
    this->initialize(domain, NULL, port, keepalive, callback, maxpacketsize);
 80a220a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80a220c:	4620      	mov	r0, r4
 80a220e:	9302      	str	r3, [sp, #8]
 80a2210:	9b0a      	ldr	r3, [sp, #40]	; 0x28

MQTT::MQTT(char* domain, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int)) {
    this->initialize(domain, NULL, port, keepalive, callback, MQTT_MAX_PACKET_SIZE);
}

MQTT::MQTT(char* domain, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
 80a2212:	64a5      	str	r5, [r4, #72]	; 0x48
    this->initialize(domain, NULL, port, keepalive, callback, maxpacketsize);
 80a2214:	9301      	str	r3, [sp, #4]
 80a2216:	f8cd 8000 	str.w	r8, [sp]
 80a221a:	463b      	mov	r3, r7
 80a221c:	462a      	mov	r2, r5
 80a221e:	4631      	mov	r1, r6
 80a2220:	f7ff ffc2 	bl	80a21a8 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi>
}
 80a2224:	4620      	mov	r0, r4
 80a2226:	b004      	add	sp, #16
 80a2228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a222c:	080a9f53 	.word	0x080a9f53

080a2230 <_ZN4MQTT8readByteEv>:
        _client.stop();
    }
    return false;
}

uint8_t MQTT::readByte() {
 80a2230:	b510      	push	{r4, lr}
 80a2232:	4604      	mov	r4, r0
    while(!_client.available()) {}
 80a2234:	4620      	mov	r0, r4
 80a2236:	f001 fd27 	bl	80a3c88 <_ZN9TCPClient9availableEv>
 80a223a:	2800      	cmp	r0, #0
 80a223c:	d0fa      	beq.n	80a2234 <_ZN4MQTT8readByteEv+0x4>
    return _client.read();
 80a223e:	4620      	mov	r0, r4
 80a2240:	f001 fcd7 	bl	80a3bf2 <_ZN9TCPClient4readEv>
}
 80a2244:	b2c0      	uxtb	r0, r0
 80a2246:	bd10      	pop	{r4, pc}

080a2248 <_ZN4MQTT10readPacketEPh>:

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
 80a2248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a224c:	4605      	mov	r5, r0
    uint16_t len = 0;
    buffer[len++] = readByte();
 80a224e:	69c4      	ldr	r4, [r0, #28]
uint8_t MQTT::readByte() {
    while(!_client.available()) {}
    return _client.read();
}

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
 80a2250:	468a      	mov	sl, r1
    uint16_t len = 0;
    buffer[len++] = readByte();
 80a2252:	f7ff ffed 	bl	80a2230 <_ZN4MQTT8readByteEv>
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
    uint32_t multiplier = 1;
 80a2256:	f04f 0801 	mov.w	r8, #1
    return _client.read();
}

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
    uint16_t len = 0;
    buffer[len++] = readByte();
 80a225a:	4646      	mov	r6, r8
 80a225c:	7020      	strb	r0, [r4, #0]
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
 80a225e:	69eb      	ldr	r3, [r5, #28]
    uint32_t multiplier = 1;
    uint16_t length = 0;
 80a2260:	2700      	movs	r7, #0
 80a2262:	f893 9000 	ldrb.w	r9, [r3]
 80a2266:	f009 09f0 	and.w	r9, r9, #240	; 0xf0
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
 80a226a:	4628      	mov	r0, r5
 80a226c:	f7ff ffe0 	bl	80a2230 <_ZN4MQTT8readByteEv>
        buffer[len++] = digit;
 80a2270:	69eb      	ldr	r3, [r5, #28]
 80a2272:	1c74      	adds	r4, r6, #1
 80a2274:	5598      	strb	r0, [r3, r6]
        length += (digit & 127) * multiplier;
 80a2276:	f000 037f 	and.w	r3, r0, #127	; 0x7f
 80a227a:	fb03 7708 	mla	r7, r3, r8, r7
        multiplier *= 128;
    } while ((digit & 128) != 0);
 80a227e:	0603      	lsls	r3, r0, #24
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
        buffer[len++] = digit;
 80a2280:	b2a4      	uxth	r4, r4
        length += (digit & 127) * multiplier;
 80a2282:	b2bf      	uxth	r7, r7
        multiplier *= 128;
 80a2284:	ea4f 18c8 	mov.w	r8, r8, lsl #7
    } while ((digit & 128) != 0);
 80a2288:	d501      	bpl.n	80a228e <_ZN4MQTT10readPacketEPh+0x46>
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
        buffer[len++] = digit;
 80a228a:	4626      	mov	r6, r4
 80a228c:	e7ed      	b.n	80a226a <_ZN4MQTT10readPacketEPh+0x22>
        length += (digit & 127) * multiplier;
        multiplier *= 128;
    } while ((digit & 128) != 0);
    *lengthLength = len-1;
 80a228e:	1e63      	subs	r3, r4, #1

    if (isPublish) {
 80a2290:	f1b9 0f30 	cmp.w	r9, #48	; 0x30
        digit = readByte();
        buffer[len++] = digit;
        length += (digit & 127) * multiplier;
        multiplier *= 128;
    } while ((digit & 128) != 0);
    *lengthLength = len-1;
 80a2294:	f88a 3000 	strb.w	r3, [sl]

    if (isPublish) {
 80a2298:	d113      	bne.n	80a22c2 <_ZN4MQTT10readPacketEPh+0x7a>
        // Read in topic length to calculate bytes to skip over for Stream writing
        buffer[len++] = readByte();
 80a229a:	4628      	mov	r0, r5
 80a229c:	f8d5 801c 	ldr.w	r8, [r5, #28]
 80a22a0:	f7ff ffc6 	bl	80a2230 <_ZN4MQTT8readByteEv>
 80a22a4:	f808 0004 	strb.w	r0, [r8, r4]
        buffer[len++] = readByte();
 80a22a8:	4628      	mov	r0, r5
 80a22aa:	f8d5 801c 	ldr.w	r8, [r5, #28]
 80a22ae:	f7ff ffbf 	bl	80a2230 <_ZN4MQTT8readByteEv>
 80a22b2:	1cf4      	adds	r4, r6, #3
 80a22b4:	3602      	adds	r6, #2
 80a22b6:	b2b6      	uxth	r6, r6
 80a22b8:	b2a4      	uxth	r4, r4
 80a22ba:	f808 0006 	strb.w	r0, [r8, r6]
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
        start = 2;
 80a22be:	2302      	movs	r3, #2
 80a22c0:	e000      	b.n	80a22c4 <_ZN4MQTT10readPacketEPh+0x7c>
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
    uint32_t multiplier = 1;
    uint16_t length = 0;
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;
 80a22c2:	2300      	movs	r3, #0
 80a22c4:	1b1b      	subs	r3, r3, r4
 80a22c6:	b29e      	uxth	r6, r3
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
 80a22c8:	19a3      	adds	r3, r4, r6
 80a22ca:	b29b      	uxth	r3, r3
 80a22cc:	429f      	cmp	r7, r3
 80a22ce:	d90b      	bls.n	80a22e8 <_ZN4MQTT10readPacketEPh+0xa0>
        digit = readByte();
 80a22d0:	4628      	mov	r0, r5
 80a22d2:	f7ff ffad 	bl	80a2230 <_ZN4MQTT8readByteEv>
        if (len < this->maxpacketsize) {
 80a22d6:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
 80a22da:	42a3      	cmp	r3, r4
            buffer[len] = digit;
 80a22dc:	bf84      	itt	hi
 80a22de:	69eb      	ldrhi	r3, [r5, #28]
 80a22e0:	5518      	strbhi	r0, [r3, r4]
        }
        len++;
 80a22e2:	3401      	adds	r4, #1
 80a22e4:	b2a4      	uxth	r4, r4
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
 80a22e6:	e7ef      	b.n	80a22c8 <_ZN4MQTT10readPacketEPh+0x80>
            buffer[len] = digit;
        }
        len++;
    }

    if (len > this->maxpacketsize) {
 80a22e8:	f8b5 0054 	ldrh.w	r0, [r5, #84]	; 0x54
        len = 0; // This will cause the packet to be ignored.
    }

    return len;
}
 80a22ec:	42a0      	cmp	r0, r4
 80a22ee:	bf2c      	ite	cs
 80a22f0:	4620      	movcs	r0, r4
 80a22f2:	2000      	movcc	r0, #0
 80a22f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080a22f8 <_ZN4MQTT5writeEhPht>:
        return _client.write(buffer, length);
    }
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
 80a22f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80a22fa:	4607      	mov	r7, r0
 80a22fc:	468e      	mov	lr, r1
 80a22fe:	461e      	mov	r6, r3
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
 80a2300:	461d      	mov	r5, r3
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
    uint8_t lenBuf[4];
    uint8_t llen = 0;
 80a2302:	2400      	movs	r4, #0
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
    do {
        digit = len % 128;
 80a2304:	f005 037f 	and.w	r3, r5, #127	; 0x7f
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
 80a2308:	a902      	add	r1, sp, #8
    uint16_t rc;
    uint16_t len = length;
    do {
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
 80a230a:	09ed      	lsrs	r5, r5, #7
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
 80a230c:	4421      	add	r1, r4
    uint16_t len = length;
    do {
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
 80a230e:	bf18      	it	ne
 80a2310:	f043 0380 	orrne.w	r3, r3, #128	; 0x80
        }
        lenBuf[pos++] = digit;
        llen++;
 80a2314:	3401      	adds	r4, #1
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
 80a2316:	f801 3c04 	strb.w	r3, [r1, #-4]
        llen++;
 80a231a:	b2e4      	uxtb	r4, r4
    } while(len > 0);
 80a231c:	2d00      	cmp	r5, #0
 80a231e:	d1f1      	bne.n	80a2304 <_ZN4MQTT5writeEhPht+0xc>

    buf[4-llen] = header;
 80a2320:	f1c4 0304 	rsb	r3, r4, #4
 80a2324:	18d1      	adds	r1, r2, r3
 80a2326:	f802 e003 	strb.w	lr, [r2, r3]
    for (int i = 0; i < llen; i++) {
 80a232a:	42a5      	cmp	r5, r4
 80a232c:	da06      	bge.n	80a233c <_ZN4MQTT5writeEhPht+0x44>
        buf[5-llen+i] = lenBuf[i];
 80a232e:	a801      	add	r0, sp, #4
 80a2330:	1b2b      	subs	r3, r5, r4
 80a2332:	5c28      	ldrb	r0, [r5, r0]
 80a2334:	4413      	add	r3, r2
 80a2336:	7158      	strb	r0, [r3, #5]
        lenBuf[pos++] = digit;
        llen++;
    } while(len > 0);

    buf[4-llen] = header;
    for (int i = 0; i < llen; i++) {
 80a2338:	3501      	adds	r5, #1
 80a233a:	e7f6      	b.n	80a232a <_ZN4MQTT5writeEhPht+0x32>
        buf[5-llen+i] = lenBuf[i];
    }
    rc = _client.write(buf+(4-llen), length+1+llen);
 80a233c:	1c72      	adds	r2, r6, #1
 80a233e:	4422      	add	r2, r4
 80a2340:	4638      	mov	r0, r7
 80a2342:	f001 fbfe 	bl	80a3b42 <_ZN9TCPClient5writeEPKhj>
 80a2346:	4605      	mov	r5, r0
 80a2348:	f001 f8cc 	bl	80a34e4 <HAL_Timer_Get_Milli_Seconds>

    lastOutActivity = millis();
    return (rc == 1+llen+length);
 80a234c:	3401      	adds	r4, #1
    for (int i = 0; i < llen; i++) {
        buf[5-llen+i] = lenBuf[i];
    }
    rc = _client.write(buf+(4-llen), length+1+llen);

    lastOutActivity = millis();
 80a234e:	6278      	str	r0, [r7, #36]	; 0x24
    return (rc == 1+llen+length);
 80a2350:	4434      	add	r4, r6
 80a2352:	b2a8      	uxth	r0, r5
}
 80a2354:	1a23      	subs	r3, r4, r0
 80a2356:	4258      	negs	r0, r3
 80a2358:	4158      	adcs	r0, r3
 80a235a:	b003      	add	sp, #12
 80a235c:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a235e <_ZN4MQTT10disconnectEv>:
        return write(MQTTUNSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
    }
    return false;
}

void MQTT::disconnect() {
 80a235e:	b510      	push	{r4, lr}
 80a2360:	4604      	mov	r4, r0
    buffer[0] = MQTTDISCONNECT;
 80a2362:	69c3      	ldr	r3, [r0, #28]
 80a2364:	22e0      	movs	r2, #224	; 0xe0
 80a2366:	701a      	strb	r2, [r3, #0]
    buffer[1] = 0;
 80a2368:	69c3      	ldr	r3, [r0, #28]
 80a236a:	2200      	movs	r2, #0
 80a236c:	705a      	strb	r2, [r3, #1]
    _client.write(buffer,2);
 80a236e:	69c1      	ldr	r1, [r0, #28]
 80a2370:	2202      	movs	r2, #2
 80a2372:	f001 fbe6 	bl	80a3b42 <_ZN9TCPClient5writeEPKhj>
    _client.stop();
 80a2376:	4620      	mov	r0, r4
 80a2378:	f001 fcc2 	bl	80a3d00 <_ZN9TCPClient4stopEv>
 80a237c:	f001 f8b2 	bl	80a34e4 <HAL_Timer_Get_Milli_Seconds>
    lastInActivity = lastOutActivity = millis();
 80a2380:	6260      	str	r0, [r4, #36]	; 0x24
 80a2382:	62a0      	str	r0, [r4, #40]	; 0x28
 80a2384:	bd10      	pop	{r4, pc}

080a2386 <_ZN4MQTT11writeStringEPKcPht>:
}

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
 80a2386:	b5f0      	push	{r4, r5, r6, r7, lr}
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
 80a2388:	460d      	mov	r5, r1
 80a238a:	3302      	adds	r3, #2
 80a238c:	b29b      	uxth	r3, r3
 80a238e:	1a6c      	subs	r4, r5, r1
    while (*idp && pos < this->maxpacketsize) {
 80a2390:	f815 6b01 	ldrb.w	r6, [r5], #1
 80a2394:	b2a4      	uxth	r4, r4
 80a2396:	b13e      	cbz	r6, 80a23a8 <_ZN4MQTT11writeStringEPKcPht+0x22>
 80a2398:	f8b0 7054 	ldrh.w	r7, [r0, #84]	; 0x54
 80a239c:	429f      	cmp	r7, r3
 80a239e:	d903      	bls.n	80a23a8 <_ZN4MQTT11writeStringEPKcPht+0x22>
        buf[pos++] = *idp++;
 80a23a0:	1c5c      	adds	r4, r3, #1
 80a23a2:	54d6      	strb	r6, [r2, r3]
 80a23a4:	b2a3      	uxth	r3, r4

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
    while (*idp && pos < this->maxpacketsize) {
 80a23a6:	e7f2      	b.n	80a238e <_ZN4MQTT11writeStringEPKcPht+0x8>
        buf[pos++] = *idp++;
        i++;
    }
    buf[pos-i-2] = (i >> 8);
 80a23a8:	1b19      	subs	r1, r3, r4
 80a23aa:	440a      	add	r2, r1
 80a23ac:	1221      	asrs	r1, r4, #8
 80a23ae:	f802 1c02 	strb.w	r1, [r2, #-2]
    buf[pos-i-1] = (i & 0xFF);
 80a23b2:	f802 4c01 	strb.w	r4, [r2, #-1]
    return pos;
}
 80a23b6:	4618      	mov	r0, r3
 80a23b8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a23ba <_ZN4MQTT11isConnectedEv>:


bool MQTT::isConnected() {
 80a23ba:	b538      	push	{r3, r4, r5, lr}
 80a23bc:	4605      	mov	r5, r0
    bool rc = (int)_client.connected();
 80a23be:	f001 fd60 	bl	80a3e82 <_ZN9TCPClient9connectedEv>
 80a23c2:	2800      	cmp	r0, #0
 80a23c4:	bf14      	ite	ne
 80a23c6:	2401      	movne	r4, #1
 80a23c8:	2400      	moveq	r4, #0
    if (!rc) _client.stop();
 80a23ca:	d102      	bne.n	80a23d2 <_ZN4MQTT11isConnectedEv+0x18>
 80a23cc:	4628      	mov	r0, r5
 80a23ce:	f001 fc97 	bl	80a3d00 <_ZN9TCPClient4stopEv>
    return rc;
}
 80a23d2:	4620      	mov	r0, r4
 80a23d4:	bd38      	pop	{r3, r4, r5, pc}
	...

080a23d8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>:

bool MQTT::connect(const char *id, const char *user, const char *pass) {
    return connect(id, user, pass, 0, QOS0, 0, 0, true);
}

bool MQTT::connect(const char *id, const char *user, const char *pass, const char* willTopic, EMQTT_QOS willQos, uint8_t willRetain, const char* willMessage, bool cleanSession, MQTT_VERSION version) {
 80a23d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a23dc:	b087      	sub	sp, #28
 80a23de:	4604      	mov	r4, r0
 80a23e0:	4689      	mov	r9, r1
 80a23e2:	4617      	mov	r7, r2
 80a23e4:	461e      	mov	r6, r3
 80a23e6:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
    if (!isConnected()) {
 80a23ea:	f7ff ffe6 	bl	80a23ba <_ZN4MQTT11isConnectedEv>
 80a23ee:	4605      	mov	r5, r0
 80a23f0:	2800      	cmp	r0, #0
 80a23f2:	f040 80bd 	bne.w	80a2570 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x198>
        int result = 0;
        if (ip == NULL)
 80a23f6:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80a23f8:	b939      	cbnz	r1, 80a240a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x32>
            result = _client.connect(this->domain.c_str(), this->port);
 80a23fa:	4603      	mov	r3, r0
 80a23fc:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
 80a2400:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80a2402:	4620      	mov	r0, r4
 80a2404:	f001 fdce 	bl	80a3fa4 <_ZN9TCPClient7connectEPKctm>
 80a2408:	e009      	b.n	80a241e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x46>
        else
            result = _client.connect(this->ip, this->port);
 80a240a:	4668      	mov	r0, sp
 80a240c:	f002 fbc6 	bl	80a4b9c <_ZN9IPAddressC1EPKh>
 80a2410:	462b      	mov	r3, r5
 80a2412:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
 80a2416:	4669      	mov	r1, sp
 80a2418:	4620      	mov	r0, r4
 80a241a:	f001 fc8b 	bl	80a3d34 <_ZN9TCPClient7connectE9IPAddresstm>

        if (result) {
 80a241e:	2800      	cmp	r0, #0
 80a2420:	f000 80a2 	beq.w	80a2568 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x190>
            nextMsgId = 1;
 80a2424:	2301      	movs	r3, #1
 80a2426:	8423      	strh	r3, [r4, #32]
            uint16_t length = 5;

            if (version == MQTT_V311) {
 80a2428:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 80a242c:	2b04      	cmp	r3, #4
 80a242e:	d115      	bne.n	80a245c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x84>
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
 80a2430:	4b52      	ldr	r3, [pc, #328]	; (80a257c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1a4>)
 80a2432:	6818      	ldr	r0, [r3, #0]
 80a2434:	889a      	ldrh	r2, [r3, #4]
 80a2436:	9000      	str	r0, [sp, #0]
 80a2438:	f8ad 2004 	strh.w	r2, [sp, #4]
 80a243c:	799b      	ldrb	r3, [r3, #6]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
 80a243e:	69e2      	ldr	r2, [r4, #28]
 80a2440:	9800      	ldr	r0, [sp, #0]
        if (result) {
            nextMsgId = 1;
            uint16_t length = 5;

            if (version == MQTT_V311) {
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
 80a2442:	f88d 3006 	strb.w	r3, [sp, #6]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
 80a2446:	f8c2 0005 	str.w	r0, [r2, #5]
 80a244a:	1d53      	adds	r3, r2, #5
 80a244c:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 80a2450:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80a2454:	8099      	strh	r1, [r3, #4]
 80a2456:	719a      	strb	r2, [r3, #6]
                length+=sizeof(MQTT_HEADER_V311);
 80a2458:	230c      	movs	r3, #12
 80a245a:	e012      	b.n	80a2482 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
            } else {
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
 80a245c:	466a      	mov	r2, sp
 80a245e:	4b48      	ldr	r3, [pc, #288]	; (80a2580 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1a8>)
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
 80a2460:	f8d4 c01c 	ldr.w	ip, [r4, #28]
            if (version == MQTT_V311) {
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
                length+=sizeof(MQTT_HEADER_V311);
            } else {
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
 80a2464:	6818      	ldr	r0, [r3, #0]
 80a2466:	6859      	ldr	r1, [r3, #4]
 80a2468:	7a1b      	ldrb	r3, [r3, #8]
 80a246a:	c203      	stmia	r2!, {r0, r1}
 80a246c:	7013      	strb	r3, [r2, #0]
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
 80a246e:	466b      	mov	r3, sp
 80a2470:	cb03      	ldmia	r3!, {r0, r1}
 80a2472:	f8cc 0005 	str.w	r0, [ip, #5]
 80a2476:	f8cc 1009 	str.w	r1, [ip, #9]
 80a247a:	7813      	ldrb	r3, [r2, #0]
 80a247c:	f88c 300d 	strb.w	r3, [ip, #13]
                length+=sizeof(MQTT_HEADER_V31);
 80a2480:	230e      	movs	r3, #14
            }

            uint8_t v = 0;
            if (willTopic) {
 80a2482:	f1b8 0f00 	cmp.w	r8, #0
 80a2486:	d00a      	beq.n	80a249e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xc6>
                v = 0x06|(willQos<<3)|(willRetain<<5);
 80a2488:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 80a248c:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
 80a2490:	0152      	lsls	r2, r2, #5
 80a2492:	f042 0206 	orr.w	r2, r2, #6
 80a2496:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80a249a:	b2d2      	uxtb	r2, r2
 80a249c:	e000      	b.n	80a24a0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xc8>
            } else {
                v = 0x02;
 80a249e:	2202      	movs	r2, #2
            }

            if (!cleanSession) {
 80a24a0:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
 80a24a4:	b909      	cbnz	r1, 80a24aa <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xd2>
              v = v&0xfd;
 80a24a6:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
            }

            if(user != NULL) {
 80a24aa:	b12f      	cbz	r7, 80a24b8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xe0>
                v = v|0x80;

                if(pass != NULL) {
 80a24ac:	b916      	cbnz	r6, 80a24b4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xdc>
            if (!cleanSession) {
              v = v&0xfd;
            }

            if(user != NULL) {
                v = v|0x80;
 80a24ae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80a24b2:	e001      	b.n	80a24b8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xe0>

                if(pass != NULL) {
                    v = v|(0x80>>1);
 80a24b4:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
                }
            }

            buffer[length++] = v;
 80a24b8:	69e1      	ldr	r1, [r4, #28]

            buffer[length++] = ((this->keepalive) >> 8);
 80a24ba:	1c58      	adds	r0, r3, #1
                if(pass != NULL) {
                    v = v|(0x80>>1);
                }
            }

            buffer[length++] = v;
 80a24bc:	54ca      	strb	r2, [r1, r3]

            buffer[length++] = ((this->keepalive) >> 8);
 80a24be:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80a24c0:	69e1      	ldr	r1, [r4, #28]
 80a24c2:	1212      	asrs	r2, r2, #8
 80a24c4:	540a      	strb	r2, [r1, r0]
            buffer[length++] = ((this->keepalive) & 0xFF);
 80a24c6:	69e1      	ldr	r1, [r4, #28]
 80a24c8:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80a24ca:	1c9a      	adds	r2, r3, #2
 80a24cc:	5488      	strb	r0, [r1, r2]
            length = writeString(id, buffer, length);
 80a24ce:	3303      	adds	r3, #3
 80a24d0:	69e2      	ldr	r2, [r4, #28]
 80a24d2:	4649      	mov	r1, r9
 80a24d4:	4620      	mov	r0, r4
 80a24d6:	f7ff ff56 	bl	80a2386 <_ZN4MQTT11writeStringEPKcPht>
            if (willTopic) {
 80a24da:	f1b8 0f00 	cmp.w	r8, #0
 80a24de:	d00b      	beq.n	80a24f8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x120>
                length = writeString(willTopic, buffer, length);
 80a24e0:	4603      	mov	r3, r0
 80a24e2:	69e2      	ldr	r2, [r4, #28]
 80a24e4:	4641      	mov	r1, r8
 80a24e6:	4620      	mov	r0, r4
 80a24e8:	f7ff ff4d 	bl	80a2386 <_ZN4MQTT11writeStringEPKcPht>
                length = writeString(willMessage, buffer, length);
 80a24ec:	69e2      	ldr	r2, [r4, #28]
 80a24ee:	4603      	mov	r3, r0
 80a24f0:	9911      	ldr	r1, [sp, #68]	; 0x44
 80a24f2:	4620      	mov	r0, r4
 80a24f4:	f7ff ff47 	bl	80a2386 <_ZN4MQTT11writeStringEPKcPht>
            }

            if(user != NULL) {
 80a24f8:	b167      	cbz	r7, 80a2514 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13c>
                length = writeString(user,buffer,length);
 80a24fa:	4603      	mov	r3, r0
 80a24fc:	69e2      	ldr	r2, [r4, #28]
 80a24fe:	4639      	mov	r1, r7
 80a2500:	4620      	mov	r0, r4
 80a2502:	f7ff ff40 	bl	80a2386 <_ZN4MQTT11writeStringEPKcPht>
                if(pass != NULL) {
 80a2506:	b12e      	cbz	r6, 80a2514 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13c>
                    length = writeString(pass,buffer,length);
 80a2508:	4603      	mov	r3, r0
 80a250a:	69e2      	ldr	r2, [r4, #28]
 80a250c:	4631      	mov	r1, r6
 80a250e:	4620      	mov	r0, r4
 80a2510:	f7ff ff39 	bl	80a2386 <_ZN4MQTT11writeStringEPKcPht>
                }
            }

            write(MQTTCONNECT, buffer, length-5);
 80a2514:	1f43      	subs	r3, r0, #5
 80a2516:	b29b      	uxth	r3, r3
 80a2518:	69e2      	ldr	r2, [r4, #28]
 80a251a:	2110      	movs	r1, #16
 80a251c:	4620      	mov	r0, r4
 80a251e:	f7ff feeb 	bl	80a22f8 <_ZN4MQTT5writeEhPht>
 80a2522:	f000 ffdf 	bl	80a34e4 <HAL_Timer_Get_Milli_Seconds>
            lastInActivity = lastOutActivity = millis();

            while (!_client.available()) {
                unsigned long t = millis();
                if (t-lastInActivity > this->keepalive*1000UL) {
 80a2526:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
                    length = writeString(pass,buffer,length);
                }
            }

            write(MQTTCONNECT, buffer, length-5);
            lastInActivity = lastOutActivity = millis();
 80a252a:	6260      	str	r0, [r4, #36]	; 0x24
 80a252c:	62a0      	str	r0, [r4, #40]	; 0x28

            while (!_client.available()) {
 80a252e:	4620      	mov	r0, r4
 80a2530:	f001 fbaa 	bl	80a3c88 <_ZN9TCPClient9availableEv>
 80a2534:	b940      	cbnz	r0, 80a2548 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x170>
 80a2536:	f000 ffd5 	bl	80a34e4 <HAL_Timer_Get_Milli_Seconds>
                unsigned long t = millis();
                if (t-lastInActivity > this->keepalive*1000UL) {
 80a253a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80a253c:	1ac0      	subs	r0, r0, r3
 80a253e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80a2540:	4373      	muls	r3, r6
 80a2542:	4298      	cmp	r0, r3
 80a2544:	d9f3      	bls.n	80a252e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x156>
 80a2546:	e00f      	b.n	80a2568 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x190>
                    _client.stop();
                    return false;
                }
            }
            uint8_t llen;
            uint16_t len = readPacket(&llen);
 80a2548:	4669      	mov	r1, sp
 80a254a:	4620      	mov	r0, r4
 80a254c:	f7ff fe7c 	bl	80a2248 <_ZN4MQTT10readPacketEPh>

            if (len == 4) {
 80a2550:	2804      	cmp	r0, #4
 80a2552:	d109      	bne.n	80a2568 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x190>
                if (buffer[3] == CONN_ACCEPT) {
 80a2554:	69e3      	ldr	r3, [r4, #28]
 80a2556:	78de      	ldrb	r6, [r3, #3]
 80a2558:	b936      	cbnz	r6, 80a2568 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x190>
 80a255a:	f000 ffc3 	bl	80a34e4 <HAL_Timer_Get_Milli_Seconds>
                    lastInActivity = millis();
                    pingOutstanding = false;
                    debug_print(" Connect success\n");
                    return true;
 80a255e:	2501      	movs	r5, #1
            uint8_t llen;
            uint16_t len = readPacket(&llen);

            if (len == 4) {
                if (buffer[3] == CONN_ACCEPT) {
                    lastInActivity = millis();
 80a2560:	62a0      	str	r0, [r4, #40]	; 0x28
                    pingOutstanding = false;
 80a2562:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
 80a2566:	e004      	b.n	80a2572 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x19a>
                    // check EMQTT_CONNACK_RESPONSE code.
                    debug_print(" Connect fail. code = [%d]\n", buffer[3]);
                }
            }
        }
        _client.stop();
 80a2568:	4620      	mov	r0, r4
 80a256a:	f001 fbc9 	bl	80a3d00 <_ZN9TCPClient4stopEv>
 80a256e:	e000      	b.n	80a2572 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x19a>
    }
    return false;
 80a2570:	2500      	movs	r5, #0
}
 80a2572:	4628      	mov	r0, r5
 80a2574:	b007      	add	sp, #28
 80a2576:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a257a:	bf00      	nop
 80a257c:	080aa02e 	.word	0x080aa02e
 80a2580:	080aa035 	.word	0x080aa035

080a2584 <_ZN4MQTT7connectEPKc>:
void MQTT::addQosCallback(void (*qoscallback)(unsigned int)) {
    this->qoscallback = qoscallback;
}


bool MQTT::connect(const char *id) {
 80a2584:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    return connect(id, NULL, NULL, 0, QOS0, 0, 0, true);
 80a2586:	2304      	movs	r3, #4
 80a2588:	9305      	str	r3, [sp, #20]
 80a258a:	2301      	movs	r3, #1
 80a258c:	9304      	str	r3, [sp, #16]
 80a258e:	2300      	movs	r3, #0
 80a2590:	9303      	str	r3, [sp, #12]
 80a2592:	9302      	str	r3, [sp, #8]
 80a2594:	9301      	str	r3, [sp, #4]
 80a2596:	9300      	str	r3, [sp, #0]
 80a2598:	461a      	mov	r2, r3
 80a259a:	f7ff ff1d 	bl	80a23d8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>
}
 80a259e:	b007      	add	sp, #28
 80a25a0:	f85d fb04 	ldr.w	pc, [sp], #4

080a25a4 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>:

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
    return publish(topic, payload, plength, retain, qos, false, messageid);
}

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
 80a25a4:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a25a8:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80a25aa:	4604      	mov	r4, r0
 80a25ac:	468b      	mov	fp, r1
 80a25ae:	4691      	mov	r9, r2
 80a25b0:	469a      	mov	sl, r3
 80a25b2:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
 80a25b6:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
 80a25ba:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
    if (isConnected()) {
 80a25be:	f7ff fefc 	bl	80a23ba <_ZN4MQTT11isConnectedEv>
 80a25c2:	2800      	cmp	r0, #0
 80a25c4:	d04b      	beq.n	80a265e <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xba>
        // Leave room in the buffer for header and variable length field
        uint16_t length = 5;
        memset(buffer, 0, this->maxpacketsize);
 80a25c6:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54
 80a25ca:	2100      	movs	r1, #0
 80a25cc:	69e0      	ldr	r0, [r4, #28]
 80a25ce:	f004 fb4a 	bl	80a6c66 <memset>

        length = writeString(topic, buffer, length);
 80a25d2:	2305      	movs	r3, #5
 80a25d4:	69e2      	ldr	r2, [r4, #28]
 80a25d6:	4659      	mov	r1, fp
 80a25d8:	4620      	mov	r0, r4
 80a25da:	f7ff fed4 	bl	80a2386 <_ZN4MQTT11writeStringEPKcPht>

        if (qos == QOS2 || qos == QOS1) {
 80a25de:	1e6b      	subs	r3, r5, #1
 80a25e0:	2b01      	cmp	r3, #1
 80a25e2:	d812      	bhi.n	80a260a <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x66>
            nextMsgId += 1;
 80a25e4:	8c23      	ldrh	r3, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
 80a25e6:	69e2      	ldr	r2, [r4, #28]
        memset(buffer, 0, this->maxpacketsize);

        length = writeString(topic, buffer, length);

        if (qos == QOS2 || qos == QOS1) {
            nextMsgId += 1;
 80a25e8:	3301      	adds	r3, #1
 80a25ea:	b29b      	uxth	r3, r3
 80a25ec:	8423      	strh	r3, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
 80a25ee:	121b      	asrs	r3, r3, #8
 80a25f0:	5413      	strb	r3, [r2, r0]
 80a25f2:	1c41      	adds	r1, r0, #1
            buffer[length++] = (nextMsgId & 0xFF);
 80a25f4:	69e3      	ldr	r3, [r4, #28]
 80a25f6:	8c22      	ldrh	r2, [r4, #32]

        length = writeString(topic, buffer, length);

        if (qos == QOS2 || qos == QOS1) {
            nextMsgId += 1;
            buffer[length++] = (nextMsgId >> 8);
 80a25f8:	b289      	uxth	r1, r1
            buffer[length++] = (nextMsgId & 0xFF);
 80a25fa:	3002      	adds	r0, #2
 80a25fc:	b280      	uxth	r0, r0
 80a25fe:	545a      	strb	r2, [r3, r1]
            if (messageid != NULL)
 80a2600:	b11e      	cbz	r6, 80a260a <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x66>
                *messageid = nextMsgId++;
 80a2602:	8c23      	ldrh	r3, [r4, #32]
 80a2604:	1c5a      	adds	r2, r3, #1
 80a2606:	8422      	strh	r2, [r4, #32]
 80a2608:	8033      	strh	r3, [r6, #0]

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
    return publish(topic, payload, plength, retain, qos, false, messageid);
}

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
 80a260a:	2200      	movs	r2, #0
            buffer[length++] = (nextMsgId & 0xFF);
            if (messageid != NULL)
                *messageid = nextMsgId++;
        }

        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
 80a260c:	b291      	uxth	r1, r2
 80a260e:	1883      	adds	r3, r0, r2
 80a2610:	458a      	cmp	sl, r1
 80a2612:	b29b      	uxth	r3, r3
 80a2614:	d909      	bls.n	80a262a <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x86>
 80a2616:	f8b4 6054 	ldrh.w	r6, [r4, #84]	; 0x54
 80a261a:	3201      	adds	r2, #1
 80a261c:	429e      	cmp	r6, r3
 80a261e:	d904      	bls.n	80a262a <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x86>
            buffer[length++] = payload[i];
 80a2620:	f819 6001 	ldrb.w	r6, [r9, r1]
 80a2624:	69e1      	ldr	r1, [r4, #28]
 80a2626:	54ce      	strb	r6, [r1, r3]
 80a2628:	e7f0      	b.n	80a260c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x68>
        }

        uint8_t header = MQTTPUBLISH;
        if (retain) {
            header |= 1;
 80a262a:	f1b8 0f00 	cmp.w	r8, #0
 80a262e:	bf0c      	ite	eq
 80a2630:	2130      	moveq	r1, #48	; 0x30
 80a2632:	2131      	movne	r1, #49	; 0x31
        }

        if (dup) {
 80a2634:	b10f      	cbz	r7, 80a263a <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
            header |= DUP_FLAG_ON_MASK;
 80a2636:	f041 0108 	orr.w	r1, r1, #8
        }

        if (qos == QOS2)
 80a263a:	2d02      	cmp	r5, #2
 80a263c:	d102      	bne.n	80a2644 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xa0>
            header |= MQTTQOS2_HEADER_MASK;
 80a263e:	f041 0104 	orr.w	r1, r1, #4
 80a2642:	e003      	b.n	80a264c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xa8>
        else if (qos == QOS1)
 80a2644:	2d01      	cmp	r5, #1
            header |= MQTTQOS1_HEADER_MASK;
 80a2646:	bf08      	it	eq
 80a2648:	f041 0102 	orreq.w	r1, r1, #2
        else
            header |= MQTTQOS0_HEADER_MASK;

        return write(header, buffer, length-5);
 80a264c:	4620      	mov	r0, r4
 80a264e:	3b05      	subs	r3, #5
 80a2650:	69e2      	ldr	r2, [r4, #28]
 80a2652:	b29b      	uxth	r3, r3
    }
    return false;
}
 80a2654:	b001      	add	sp, #4
 80a2656:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        else if (qos == QOS1)
            header |= MQTTQOS1_HEADER_MASK;
        else
            header |= MQTTQOS0_HEADER_MASK;

        return write(header, buffer, length-5);
 80a265a:	f7ff be4d 	b.w	80a22f8 <_ZN4MQTT5writeEhPht>
    }
    return false;
}
 80a265e:	b001      	add	sp, #4
 80a2660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a2664 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>:

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain) {
    return publish(topic, payload, plength, retain, QOS0, NULL);
}

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
 80a2664:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return publish(topic, payload, plength, retain, qos, false, messageid);
 80a2666:	9c08      	ldr	r4, [sp, #32]
 80a2668:	9403      	str	r4, [sp, #12]
 80a266a:	2400      	movs	r4, #0
 80a266c:	9402      	str	r4, [sp, #8]
 80a266e:	f89d 401c 	ldrb.w	r4, [sp, #28]
 80a2672:	9401      	str	r4, [sp, #4]
 80a2674:	f89d 4018 	ldrb.w	r4, [sp, #24]
 80a2678:	9400      	str	r4, [sp, #0]
 80a267a:	f7ff ff93 	bl	80a25a4 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>
}
 80a267e:	b004      	add	sp, #16
 80a2680:	bd10      	pop	{r4, pc}

080a2682 <_ZN4MQTT7publishEPKcS1_>:
        return true;
    }
    return false;
}

bool MQTT::publish(const char* topic, const char* payload) {
 80a2682:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80a2684:	4605      	mov	r5, r0
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
 80a2686:	4610      	mov	r0, r2
        return true;
    }
    return false;
}

bool MQTT::publish(const char* topic, const char* payload) {
 80a2688:	460e      	mov	r6, r1
 80a268a:	4614      	mov	r4, r2
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
 80a268c:	f005 f842 	bl	80a7714 <strlen>
 80a2690:	2300      	movs	r3, #0
 80a2692:	9302      	str	r3, [sp, #8]
 80a2694:	9301      	str	r3, [sp, #4]
 80a2696:	9300      	str	r3, [sp, #0]
 80a2698:	4622      	mov	r2, r4
 80a269a:	4603      	mov	r3, r0
 80a269c:	4631      	mov	r1, r6
 80a269e:	4628      	mov	r0, r5
 80a26a0:	f7ff ffe0 	bl	80a2664 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>
}
 80a26a4:	b004      	add	sp, #16
 80a26a6:	bd70      	pop	{r4, r5, r6, pc}

080a26a8 <_ZN4MQTT14publishReleaseEt>:
        return write(header, buffer, length-5);
    }
    return false;
}

bool MQTT::publishRelease(uint16_t messageid) {
 80a26a8:	b538      	push	{r3, r4, r5, lr}
 80a26aa:	4604      	mov	r4, r0
 80a26ac:	460d      	mov	r5, r1
    if (isConnected()) {
 80a26ae:	f7ff fe84 	bl	80a23ba <_ZN4MQTT11isConnectedEv>
 80a26b2:	b190      	cbz	r0, 80a26da <_ZN4MQTT14publishReleaseEt+0x32>
        uint16_t length = 0;
        // reserved bits in MQTT v3.1.1
        buffer[length++] = MQTTPUBREL | MQTTQOS1_HEADER_MASK;
 80a26b4:	69e3      	ldr	r3, [r4, #28]
 80a26b6:	2262      	movs	r2, #98	; 0x62
 80a26b8:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
 80a26ba:	69e3      	ldr	r3, [r4, #28]
 80a26bc:	2202      	movs	r2, #2
 80a26be:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
 80a26c0:	69e3      	ldr	r3, [r4, #28]
 80a26c2:	122a      	asrs	r2, r5, #8
 80a26c4:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
 80a26c6:	69e3      	ldr	r3, [r4, #28]
        return _client.write(buffer, length);
 80a26c8:	2204      	movs	r2, #4
        uint16_t length = 0;
        // reserved bits in MQTT v3.1.1
        buffer[length++] = MQTTPUBREL | MQTTQOS1_HEADER_MASK;
        buffer[length++] = 2;
        buffer[length++] = (messageid >> 8);
        buffer[length++] = (messageid & 0xFF);
 80a26ca:	70dd      	strb	r5, [r3, #3]
        return _client.write(buffer, length);
 80a26cc:	69e1      	ldr	r1, [r4, #28]
 80a26ce:	4620      	mov	r0, r4
 80a26d0:	f001 fa37 	bl	80a3b42 <_ZN9TCPClient5writeEPKhj>
 80a26d4:	3000      	adds	r0, #0
 80a26d6:	bf18      	it	ne
 80a26d8:	2001      	movne	r0, #1
    }
    return false;
}
 80a26da:	bd38      	pop	{r3, r4, r5, pc}

080a26dc <_ZN4MQTT15publishCompleteEt>:

bool MQTT::publishComplete(uint16_t messageid) {
 80a26dc:	b538      	push	{r3, r4, r5, lr}
 80a26de:	4604      	mov	r4, r0
 80a26e0:	460d      	mov	r5, r1
    if (isConnected()) {
 80a26e2:	f7ff fe6a 	bl	80a23ba <_ZN4MQTT11isConnectedEv>
 80a26e6:	b190      	cbz	r0, 80a270e <_ZN4MQTT15publishCompleteEt+0x32>
        uint16_t length = 0;
        // reserved bits in MQTT v3.1.1
        buffer[length++] = MQTTPUBCOMP | MQTTQOS1_HEADER_MASK;
 80a26e8:	69e3      	ldr	r3, [r4, #28]
 80a26ea:	2272      	movs	r2, #114	; 0x72
 80a26ec:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
 80a26ee:	69e3      	ldr	r3, [r4, #28]
 80a26f0:	2202      	movs	r2, #2
 80a26f2:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
 80a26f4:	69e3      	ldr	r3, [r4, #28]
 80a26f6:	122a      	asrs	r2, r5, #8
 80a26f8:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
 80a26fa:	69e3      	ldr	r3, [r4, #28]
        return _client.write(buffer, length);
 80a26fc:	2204      	movs	r2, #4
        uint16_t length = 0;
        // reserved bits in MQTT v3.1.1
        buffer[length++] = MQTTPUBCOMP | MQTTQOS1_HEADER_MASK;
        buffer[length++] = 2;
        buffer[length++] = (messageid >> 8);
        buffer[length++] = (messageid & 0xFF);
 80a26fe:	70dd      	strb	r5, [r3, #3]
        return _client.write(buffer, length);
 80a2700:	69e1      	ldr	r1, [r4, #28]
 80a2702:	4620      	mov	r0, r4
 80a2704:	f001 fa1d 	bl	80a3b42 <_ZN9TCPClient5writeEPKhj>
 80a2708:	3000      	adds	r0, #0
 80a270a:	bf18      	it	ne
 80a270c:	2001      	movne	r0, #1
    }
    return false;
}
 80a270e:	bd38      	pop	{r3, r4, r5, pc}

080a2710 <_ZN4MQTT4loopEv>:
    }

    return len;
}

bool MQTT::loop() {
 80a2710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a2714:	b083      	sub	sp, #12
 80a2716:	af00      	add	r7, sp, #0
 80a2718:	4604      	mov	r4, r0
    if (isConnected()) {
 80a271a:	f7ff fe4e 	bl	80a23ba <_ZN4MQTT11isConnectedEv>
 80a271e:	4681      	mov	r9, r0
 80a2720:	2800      	cmp	r0, #0
 80a2722:	f000 80f6 	beq.w	80a2912 <_ZN4MQTT4loopEv+0x202>
 80a2726:	f000 fedd 	bl	80a34e4 <HAL_Timer_Get_Milli_Seconds>
        unsigned long t = millis();
        if ((t - lastInActivity > this->keepalive*1000UL) || (t - lastOutActivity > this->keepalive*1000UL)) {
 80a272a:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80a272c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a2730:	4353      	muls	r3, r2
 80a2732:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80a2734:	4605      	mov	r5, r0
 80a2736:	1a82      	subs	r2, r0, r2
 80a2738:	429a      	cmp	r2, r3
 80a273a:	d803      	bhi.n	80a2744 <_ZN4MQTT4loopEv+0x34>
 80a273c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80a273e:	1a82      	subs	r2, r0, r2
 80a2740:	4293      	cmp	r3, r2
 80a2742:	d217      	bcs.n	80a2774 <_ZN4MQTT4loopEv+0x64>
            if (pingOutstanding) {
 80a2744:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80a2748:	b12b      	cbz	r3, 80a2756 <_ZN4MQTT4loopEv+0x46>
                _client.stop();
 80a274a:	4620      	mov	r0, r4
 80a274c:	f001 fad8 	bl	80a3d00 <_ZN9TCPClient4stopEv>
                return false;
 80a2750:	f04f 0900 	mov.w	r9, #0
 80a2754:	e0dd      	b.n	80a2912 <_ZN4MQTT4loopEv+0x202>
            } else {
                buffer[0] = MQTTPINGREQ;
 80a2756:	69e2      	ldr	r2, [r4, #28]
 80a2758:	21c0      	movs	r1, #192	; 0xc0
 80a275a:	7011      	strb	r1, [r2, #0]
                buffer[1] = 0;
 80a275c:	69e2      	ldr	r2, [r4, #28]
                _client.write(buffer,2);
 80a275e:	4620      	mov	r0, r4
            if (pingOutstanding) {
                _client.stop();
                return false;
            } else {
                buffer[0] = MQTTPINGREQ;
                buffer[1] = 0;
 80a2760:	7053      	strb	r3, [r2, #1]
                _client.write(buffer,2);
 80a2762:	69e1      	ldr	r1, [r4, #28]
 80a2764:	2202      	movs	r2, #2
 80a2766:	f001 f9ec 	bl	80a3b42 <_ZN9TCPClient5writeEPKhj>
                lastOutActivity = t;
                lastInActivity = t;
                pingOutstanding = true;
 80a276a:	2301      	movs	r3, #1
                return false;
            } else {
                buffer[0] = MQTTPINGREQ;
                buffer[1] = 0;
                _client.write(buffer,2);
                lastOutActivity = t;
 80a276c:	6265      	str	r5, [r4, #36]	; 0x24
                lastInActivity = t;
 80a276e:	62a5      	str	r5, [r4, #40]	; 0x28
                pingOutstanding = true;
 80a2770:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
            }
        }
        if (_client.available()) {
 80a2774:	4620      	mov	r0, r4
 80a2776:	f001 fa87 	bl	80a3c88 <_ZN9TCPClient9availableEv>
 80a277a:	2800      	cmp	r0, #0
 80a277c:	f000 80c9 	beq.w	80a2912 <_ZN4MQTT4loopEv+0x202>
            uint8_t llen;
            uint16_t len = readPacket(&llen);
 80a2780:	1df9      	adds	r1, r7, #7
 80a2782:	4620      	mov	r0, r4
 80a2784:	f7ff fd60 	bl	80a2248 <_ZN4MQTT10readPacketEPh>
            uint16_t msgId = 0;
            uint8_t *payload;
            if (len > 0) {
 80a2788:	4602      	mov	r2, r0
 80a278a:	2800      	cmp	r0, #0
 80a278c:	f000 80c1 	beq.w	80a2912 <_ZN4MQTT4loopEv+0x202>
                lastInActivity = t;
                uint8_t type = buffer[0]&0xF0;
 80a2790:	69e3      	ldr	r3, [r4, #28]
            uint8_t llen;
            uint16_t len = readPacket(&llen);
            uint16_t msgId = 0;
            uint8_t *payload;
            if (len > 0) {
                lastInActivity = t;
 80a2792:	62a5      	str	r5, [r4, #40]	; 0x28
                uint8_t type = buffer[0]&0xF0;
 80a2794:	7818      	ldrb	r0, [r3, #0]
 80a2796:	f000 01f0 	and.w	r1, r0, #240	; 0xf0
                if (type == MQTTPUBLISH) {
 80a279a:	2930      	cmp	r1, #48	; 0x30
 80a279c:	d17d      	bne.n	80a289a <_ZN4MQTT4loopEv+0x18a>
                    if (callback) {
 80a279e:	f8d4 b030 	ldr.w	fp, [r4, #48]	; 0x30
 80a27a2:	f1bb 0f00 	cmp.w	fp, #0
 80a27a6:	f000 80b4 	beq.w	80a2912 <_ZN4MQTT4loopEv+0x202>
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
 80a27aa:	f897 c007 	ldrb.w	ip, [r7, #7]
              							_client.write(buffer, 4);
              							lastOutActivity = t;
            						} else {
                            payload = buffer+llen+3+tl;
                            callback(topic,payload,len-llen-3-tl);
                        }
 80a27ae:	46ea      	mov	sl, sp
            if (len > 0) {
                lastInActivity = t;
                uint8_t type = buffer[0]&0xF0;
                if (type == MQTTPUBLISH) {
                    if (callback) {
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
 80a27b0:	eb03 000c 	add.w	r0, r3, ip
 80a27b4:	7881      	ldrb	r1, [r0, #2]
 80a27b6:	f890 e001 	ldrb.w	lr, [r0, #1]
 80a27ba:	eb01 2e0e 	add.w	lr, r1, lr, lsl #8
 80a27be:	fa1f fe8e 	uxth.w	lr, lr
                        char topic[tl+1];
 80a27c2:	f10e 0108 	add.w	r1, lr, #8
 80a27c6:	f021 0107 	bic.w	r1, r1, #7
 80a27ca:	ebad 0d01 	sub.w	sp, sp, r1
 80a27ce:	4668      	mov	r0, sp
 80a27d0:	2100      	movs	r1, #0
                        for (uint16_t i=0;i<tl;i++) {
 80a27d2:	b28e      	uxth	r6, r1
 80a27d4:	45b6      	cmp	lr, r6
 80a27d6:	d906      	bls.n	80a27e6 <_ZN4MQTT4loopEv+0xd6>
                            topic[i] = buffer[llen+3+i];
 80a27d8:	eb0c 0601 	add.w	r6, ip, r1
 80a27dc:	441e      	add	r6, r3
 80a27de:	78f6      	ldrb	r6, [r6, #3]
 80a27e0:	5446      	strb	r6, [r0, r1]
 80a27e2:	3101      	adds	r1, #1
                uint8_t type = buffer[0]&0xF0;
                if (type == MQTTPUBLISH) {
                    if (callback) {
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
                        char topic[tl+1];
                        for (uint16_t i=0;i<tl;i++) {
 80a27e4:	e7f5      	b.n	80a27d2 <_ZN4MQTT4loopEv+0xc2>
                            topic[i] = buffer[llen+3+i];
                        }
                        topic[tl] = 0;
 80a27e6:	2100      	movs	r1, #0
 80a27e8:	f800 100e 	strb.w	r1, [r0, lr]
 80a27ec:	781e      	ldrb	r6, [r3, #0]
 80a27ee:	f10c 0103 	add.w	r1, ip, #3
 80a27f2:	f006 0606 	and.w	r6, r6, #6
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
 80a27f6:	2e02      	cmp	r6, #2
 80a27f8:	ebcc 0202 	rsb	r2, ip, r2
 80a27fc:	d11e      	bne.n	80a283c <_ZN4MQTT4loopEv+0x12c>
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
 80a27fe:	4471      	add	r1, lr
 80a2800:	f813 8001 	ldrb.w	r8, [r3, r1]
 80a2804:	4419      	add	r1, r3
 80a2806:	7849      	ldrb	r1, [r1, #1]
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);
 80a2808:	ebce 0202 	rsb	r2, lr, r2
                            topic[i] = buffer[llen+3+i];
                        }
                        topic[tl] = 0;
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
 80a280c:	eb01 2808 	add.w	r8, r1, r8, lsl #8
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);
 80a2810:	f10c 0105 	add.w	r1, ip, #5
 80a2814:	4471      	add	r1, lr
 80a2816:	3a05      	subs	r2, #5
 80a2818:	4419      	add	r1, r3
 80a281a:	47d8      	blx	fp

                            buffer[0] = MQTTPUBACK; // respond with PUBACK
 80a281c:	69e3      	ldr	r3, [r4, #28]
 80a281e:	2240      	movs	r2, #64	; 0x40
 80a2820:	701a      	strb	r2, [r3, #0]
                            buffer[1] = 2;
 80a2822:	69e3      	ldr	r3, [r4, #28]
                            topic[i] = buffer[llen+3+i];
                        }
                        topic[tl] = 0;
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
 80a2824:	fa1f f888 	uxth.w	r8, r8
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);

                            buffer[0] = MQTTPUBACK; // respond with PUBACK
                            buffer[1] = 2;
 80a2828:	705e      	strb	r6, [r3, #1]
                            buffer[2] = (msgId >> 8);
 80a282a:	69e3      	ldr	r3, [r4, #28]
 80a282c:	ea4f 2228 	mov.w	r2, r8, asr #8
 80a2830:	709a      	strb	r2, [r3, #2]
                            buffer[3] = (msgId & 0xFF);
 80a2832:	69e3      	ldr	r3, [r4, #28]
                            _client.write(buffer,4);
 80a2834:	2204      	movs	r2, #4
                            callback(topic,payload,len-llen-3-tl-2);

                            buffer[0] = MQTTPUBACK; // respond with PUBACK
                            buffer[1] = 2;
                            buffer[2] = (msgId >> 8);
                            buffer[3] = (msgId & 0xFF);
 80a2836:	f883 8003 	strb.w	r8, [r3, #3]
 80a283a:	e020      	b.n	80a287e <_ZN4MQTT4loopEv+0x16e>
                            _client.write(buffer,4);
                            lastOutActivity = t;
        						    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
 80a283c:	2e04      	cmp	r6, #4
 80a283e:	d124      	bne.n	80a288a <_ZN4MQTT4loopEv+0x17a>
							              msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
 80a2840:	4471      	add	r1, lr
 80a2842:	f813 8001 	ldrb.w	r8, [r3, r1]
 80a2846:	4419      	add	r1, r3
 80a2848:	7849      	ldrb	r1, [r1, #1]
							              payload = buffer + llen + 3 + tl + 2;
							              callback(topic, payload, len - llen - 3 - tl - 2);
 80a284a:	ebce 0202 	rsb	r2, lr, r2
                            buffer[2] = (msgId >> 8);
                            buffer[3] = (msgId & 0xFF);
                            _client.write(buffer,4);
                            lastOutActivity = t;
        						    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
							              msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
 80a284e:	eb01 2808 	add.w	r8, r1, r8, lsl #8
							              payload = buffer + llen + 3 + tl + 2;
							              callback(topic, payload, len - llen - 3 - tl - 2);
 80a2852:	f10c 0105 	add.w	r1, ip, #5
 80a2856:	4471      	add	r1, lr
 80a2858:	3a05      	subs	r2, #5
 80a285a:	4419      	add	r1, r3
 80a285c:	47d8      	blx	fp

              							buffer[0] = MQTTPUBREC; // respond with PUBREC
 80a285e:	69e3      	ldr	r3, [r4, #28]
 80a2860:	2250      	movs	r2, #80	; 0x50
 80a2862:	701a      	strb	r2, [r3, #0]
              							buffer[1] = 2;
 80a2864:	69e3      	ldr	r3, [r4, #28]
 80a2866:	2202      	movs	r2, #2
 80a2868:	705a      	strb	r2, [r3, #1]
              							buffer[2] = (msgId >> 8);
 80a286a:	69e3      	ldr	r3, [r4, #28]
                            buffer[2] = (msgId >> 8);
                            buffer[3] = (msgId & 0xFF);
                            _client.write(buffer,4);
                            lastOutActivity = t;
        						    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
							              msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
 80a286c:	fa1f f888 	uxth.w	r8, r8
							              payload = buffer + llen + 3 + tl + 2;
							              callback(topic, payload, len - llen - 3 - tl - 2);

              							buffer[0] = MQTTPUBREC; // respond with PUBREC
              							buffer[1] = 2;
              							buffer[2] = (msgId >> 8);
 80a2870:	ea4f 2228 	mov.w	r2, r8, asr #8
 80a2874:	709a      	strb	r2, [r3, #2]
              							buffer[3] = (msgId & 0xFF);
              							_client.write(buffer, 4);
 80a2876:	4632      	mov	r2, r6
							              callback(topic, payload, len - llen - 3 - tl - 2);

              							buffer[0] = MQTTPUBREC; // respond with PUBREC
              							buffer[1] = 2;
              							buffer[2] = (msgId >> 8);
              							buffer[3] = (msgId & 0xFF);
 80a2878:	69e3      	ldr	r3, [r4, #28]
 80a287a:	f883 8003 	strb.w	r8, [r3, #3]
              							_client.write(buffer, 4);
 80a287e:	69e1      	ldr	r1, [r4, #28]
 80a2880:	4620      	mov	r0, r4
 80a2882:	f001 f95e 	bl	80a3b42 <_ZN9TCPClient5writeEPKhj>
              							lastOutActivity = t;
 80a2886:	6265      	str	r5, [r4, #36]	; 0x24
 80a2888:	e005      	b.n	80a2896 <_ZN4MQTT4loopEv+0x186>
            						} else {
                            payload = buffer+llen+3+tl;
                            callback(topic,payload,len-llen-3-tl);
 80a288a:	3a03      	subs	r2, #3
 80a288c:	4471      	add	r1, lr
 80a288e:	ebce 0202 	rsb	r2, lr, r2
 80a2892:	4419      	add	r1, r3
 80a2894:	47d8      	blx	fp
 80a2896:	46d5      	mov	sp, sl
 80a2898:	e03b      	b.n	80a2912 <_ZN4MQTT4loopEv+0x202>
                        }
                    }
                } else if (type == MQTTPUBREC) {
 80a289a:	2950      	cmp	r1, #80	; 0x50
 80a289c:	d108      	bne.n	80a28b0 <_ZN4MQTT4loopEv+0x1a0>
                    // check for the situation that QoS2 receive PUBREC, should return PUBREL
                    msgId = (buffer[2] << 8) + buffer[3];
                    this->publishRelease(msgId);
 80a289e:	7899      	ldrb	r1, [r3, #2]
 80a28a0:	78db      	ldrb	r3, [r3, #3]
 80a28a2:	4620      	mov	r0, r4
 80a28a4:	eb03 2101 	add.w	r1, r3, r1, lsl #8
 80a28a8:	b289      	uxth	r1, r1
 80a28aa:	f7ff fefd 	bl	80a26a8 <_ZN4MQTT14publishReleaseEt>
 80a28ae:	e030      	b.n	80a2912 <_ZN4MQTT4loopEv+0x202>
                } else if (type == MQTTPUBACK) {
 80a28b0:	2940      	cmp	r1, #64	; 0x40
 80a28b2:	d00c      	beq.n	80a28ce <_ZN4MQTT4loopEv+0x1be>
                        if (len == 4 && (buffer[0]&0x06) == MQTTQOS0_HEADER_MASK) {
                            msgId = (buffer[2]<<8)+buffer[3];
                            this->qoscallback(msgId);
                        }
                    }
                } else if (type == MQTTPUBREL) {
 80a28b4:	2960      	cmp	r1, #96	; 0x60
 80a28b6:	d108      	bne.n	80a28ca <_ZN4MQTT4loopEv+0x1ba>
                  msgId = (buffer[2] << 8) + buffer[3];
                  this->publishComplete(msgId);
 80a28b8:	7899      	ldrb	r1, [r3, #2]
 80a28ba:	78db      	ldrb	r3, [r3, #3]
 80a28bc:	4620      	mov	r0, r4
 80a28be:	eb03 2101 	add.w	r1, r3, r1, lsl #8
 80a28c2:	b289      	uxth	r1, r1
 80a28c4:	f7ff ff0a 	bl	80a26dc <_ZN4MQTT15publishCompleteEt>
 80a28c8:	e023      	b.n	80a2912 <_ZN4MQTT4loopEv+0x202>
                } else if (type == MQTTPUBCOMP) {
 80a28ca:	2970      	cmp	r1, #112	; 0x70
 80a28cc:	d10d      	bne.n	80a28ea <_ZN4MQTT4loopEv+0x1da>
                  if (qoscallback) {
 80a28ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80a28d0:	b1f9      	cbz	r1, 80a2912 <_ZN4MQTT4loopEv+0x202>
                      // msgId only present for QOS==0
                      if (len == 4 && (buffer[0]&0x06) == MQTTQOS0_HEADER_MASK) {
 80a28d2:	2a04      	cmp	r2, #4
 80a28d4:	d11d      	bne.n	80a2912 <_ZN4MQTT4loopEv+0x202>
 80a28d6:	f010 0f06 	tst.w	r0, #6
 80a28da:	d11a      	bne.n	80a2912 <_ZN4MQTT4loopEv+0x202>
                          msgId = (buffer[2]<<8)+buffer[3];
                          this->qoscallback(msgId);
 80a28dc:	7898      	ldrb	r0, [r3, #2]
 80a28de:	78db      	ldrb	r3, [r3, #3]
 80a28e0:	eb03 2000 	add.w	r0, r3, r0, lsl #8
 80a28e4:	b280      	uxth	r0, r0
 80a28e6:	4788      	blx	r1
 80a28e8:	e013      	b.n	80a2912 <_ZN4MQTT4loopEv+0x202>
                      }
                  }
                } else if (type == MQTTSUBACK) {
 80a28ea:	2990      	cmp	r1, #144	; 0x90
 80a28ec:	d011      	beq.n	80a2912 <_ZN4MQTT4loopEv+0x202>
                    // if something...
                } else if (type == MQTTPINGREQ) {
 80a28ee:	29c0      	cmp	r1, #192	; 0xc0
 80a28f0:	d10a      	bne.n	80a2908 <_ZN4MQTT4loopEv+0x1f8>
                    buffer[0] = MQTTPINGRESP;
 80a28f2:	22d0      	movs	r2, #208	; 0xd0
 80a28f4:	701a      	strb	r2, [r3, #0]
                    buffer[1] = 0;
 80a28f6:	69e3      	ldr	r3, [r4, #28]
 80a28f8:	2200      	movs	r2, #0
 80a28fa:	705a      	strb	r2, [r3, #1]
                    _client.write(buffer,2);
 80a28fc:	69e1      	ldr	r1, [r4, #28]
 80a28fe:	2202      	movs	r2, #2
 80a2900:	4620      	mov	r0, r4
 80a2902:	f001 f91e 	bl	80a3b42 <_ZN9TCPClient5writeEPKhj>
 80a2906:	e004      	b.n	80a2912 <_ZN4MQTT4loopEv+0x202>
                } else if (type == MQTTPINGRESP) {
 80a2908:	29d0      	cmp	r1, #208	; 0xd0
                    pingOutstanding = false;
 80a290a:	bf04      	itt	eq
 80a290c:	2300      	moveq	r3, #0
 80a290e:	f884 302c 	strbeq.w	r3, [r4, #44]	; 0x2c
            }
        }
        return true;
    }
    return false;
}
 80a2912:	4648      	mov	r0, r9
 80a2914:	370c      	adds	r7, #12
 80a2916:	46bd      	mov	sp, r7
 80a2918:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a291c <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>:

bool MQTT::subscribe(const char* topic) {
    return subscribe(topic, QOS0);
}

bool MQTT::subscribe(const char* topic, EMQTT_QOS qos) {
 80a291c:	b570      	push	{r4, r5, r6, lr}
 80a291e:	4604      	mov	r4, r0
 80a2920:	460e      	mov	r6, r1
 80a2922:	4615      	mov	r5, r2

    if (isConnected()) {
 80a2924:	f7ff fd49 	bl	80a23ba <_ZN4MQTT11isConnectedEv>
 80a2928:	b1e8      	cbz	r0, 80a2966 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x4a>
        // Leave room in the buffer for header and variable length field
        uint16_t length = 5;
        nextMsgId++;
 80a292a:	8c23      	ldrh	r3, [r4, #32]
 80a292c:	3301      	adds	r3, #1
 80a292e:	b29b      	uxth	r3, r3
        if (nextMsgId == 0) {
 80a2930:	b903      	cbnz	r3, 80a2934 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x18>
            nextMsgId = 1;
 80a2932:	2301      	movs	r3, #1
 80a2934:	8423      	strh	r3, [r4, #32]
        }
        buffer[length++] = (nextMsgId >> 8);
 80a2936:	8c23      	ldrh	r3, [r4, #32]
 80a2938:	69e2      	ldr	r2, [r4, #28]
 80a293a:	121b      	asrs	r3, r3, #8
 80a293c:	7153      	strb	r3, [r2, #5]
        buffer[length++] = (nextMsgId & 0xFF);
 80a293e:	69e3      	ldr	r3, [r4, #28]
 80a2940:	8c22      	ldrh	r2, [r4, #32]
        length = writeString(topic, buffer,length);
 80a2942:	4631      	mov	r1, r6
        nextMsgId++;
        if (nextMsgId == 0) {
            nextMsgId = 1;
        }
        buffer[length++] = (nextMsgId >> 8);
        buffer[length++] = (nextMsgId & 0xFF);
 80a2944:	719a      	strb	r2, [r3, #6]
        length = writeString(topic, buffer,length);
 80a2946:	69e2      	ldr	r2, [r4, #28]
 80a2948:	2307      	movs	r3, #7
 80a294a:	4620      	mov	r0, r4
 80a294c:	f7ff fd1b 	bl	80a2386 <_ZN4MQTT11writeStringEPKcPht>
        buffer[length++] = qos;
 80a2950:	69e3      	ldr	r3, [r4, #28]
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
 80a2952:	2182      	movs	r1, #130	; 0x82
            nextMsgId = 1;
        }
        buffer[length++] = (nextMsgId >> 8);
        buffer[length++] = (nextMsgId & 0xFF);
        length = writeString(topic, buffer,length);
        buffer[length++] = qos;
 80a2954:	541d      	strb	r5, [r3, r0]
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
 80a2956:	1f03      	subs	r3, r0, #4
 80a2958:	69e2      	ldr	r2, [r4, #28]
 80a295a:	4620      	mov	r0, r4
    }
    return false;
}
 80a295c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        }
        buffer[length++] = (nextMsgId >> 8);
        buffer[length++] = (nextMsgId & 0xFF);
        length = writeString(topic, buffer,length);
        buffer[length++] = qos;
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
 80a2960:	b29b      	uxth	r3, r3
 80a2962:	f7ff bcc9 	b.w	80a22f8 <_ZN4MQTT5writeEhPht>
    }
    return false;
}
 80a2966:	bd70      	pop	{r4, r5, r6, pc}

080a2968 <_ZN4MQTT9subscribeEPKc>:
    lastOutActivity = millis();
    return (rc == 1+llen+length);
}

bool MQTT::subscribe(const char* topic) {
    return subscribe(topic, QOS0);
 80a2968:	2200      	movs	r2, #0
 80a296a:	f7ff bfd7 	b.w	80a291c <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>

080a296e <_ZN4MQTTD1Ev>:

MQTT::MQTT(uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
    this->initialize(NULL, ip, port, keepalive, callback, maxpacketsize);
}

MQTT::~MQTT() {
 80a296e:	b510      	push	{r4, lr}
 80a2970:	4604      	mov	r4, r0
    if (isConnected()) {
 80a2972:	f7ff fd22 	bl	80a23ba <_ZN4MQTT11isConnectedEv>
 80a2976:	b110      	cbz	r0, 80a297e <_ZN4MQTTD1Ev+0x10>
        disconnect();
 80a2978:	4620      	mov	r0, r4
 80a297a:	f7ff fcf0 	bl	80a235e <_ZN4MQTT10disconnectEv>
    }

    if (buffer != NULL)
 80a297e:	69e0      	ldr	r0, [r4, #28]
 80a2980:	b108      	cbz	r0, 80a2986 <_ZN4MQTTD1Ev+0x18>
      delete[] buffer;
 80a2982:	f7fd fb92 	bl	80a00aa <_ZdaPv>

MQTT::MQTT(uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
    this->initialize(NULL, ip, port, keepalive, callback, maxpacketsize);
}

MQTT::~MQTT() {
 80a2986:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80a298a:	f001 fba3 	bl	80a40d4 <_ZN6StringD1Ev>
 80a298e:	4620      	mov	r0, r4
 80a2990:	f7ff fbe6 	bl	80a2160 <_ZN9TCPClientD1Ev>
        disconnect();
    }

    if (buffer != NULL)
      delete[] buffer;
}
 80a2994:	4620      	mov	r0, r4
 80a2996:	bd10      	pop	{r4, pc}

080a2998 <_GLOBAL__sub_I__ZN4MQTTC2EPctPFvS0_PhjE>:
 80a2998:	f000 bd54 	b.w	80a3444 <HAL_Pin_Map>

080a299c <_ZN10JsonBufferD1Ev>:


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {

}
JsonBuffer::~JsonBuffer() {
 80a299c:	b510      	push	{r4, lr}
 80a299e:	4b05      	ldr	r3, [pc, #20]	; (80a29b4 <_ZN10JsonBufferD1Ev+0x18>)
 80a29a0:	4604      	mov	r4, r0
 80a29a2:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && buffer) {
 80a29a4:	7c03      	ldrb	r3, [r0, #16]
 80a29a6:	b91b      	cbnz	r3, 80a29b0 <_ZN10JsonBufferD1Ev+0x14>
 80a29a8:	6840      	ldr	r0, [r0, #4]
 80a29aa:	b108      	cbz	r0, 80a29b0 <_ZN10JsonBufferD1Ev+0x14>
		free(buffer);
 80a29ac:	f000 ffc0 	bl	80a3930 <free>
	}
}
 80a29b0:	4620      	mov	r0, r4
 80a29b2:	bd10      	pop	{r4, pc}
 80a29b4:	080aa048 	.word	0x080aa048

080a29b8 <_ZN10JsonBufferD0Ev>:


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {

}
JsonBuffer::~JsonBuffer() {
 80a29b8:	b510      	push	{r4, lr}
 80a29ba:	4604      	mov	r4, r0
	if (!staticBuffers && buffer) {
		free(buffer);
	}
}
 80a29bc:	f7ff ffee 	bl	80a299c <_ZN10JsonBufferD1Ev>
 80a29c0:	4620      	mov	r0, r4
 80a29c2:	2114      	movs	r1, #20
 80a29c4:	f002 fcf0 	bl	80a53a8 <_ZdlPvj>
 80a29c8:	4620      	mov	r0, r4
 80a29ca:	bd10      	pop	{r4, pc}

080a29cc <_ZN10JsonParserD1Ev>:
		JsonBuffer(buffer, bufferLen), tokens(tokens), maxTokens(maxTokens) {

}


JsonParser::~JsonParser() {
 80a29cc:	b510      	push	{r4, lr}
 80a29ce:	4b07      	ldr	r3, [pc, #28]	; (80a29ec <_ZN10JsonParserD1Ev+0x20>)
 80a29d0:	4604      	mov	r4, r0
 80a29d2:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && tokens) {
 80a29d4:	7c03      	ldrb	r3, [r0, #16]
 80a29d6:	b91b      	cbnz	r3, 80a29e0 <_ZN10JsonParserD1Ev+0x14>
 80a29d8:	6940      	ldr	r0, [r0, #20]
 80a29da:	b108      	cbz	r0, 80a29e0 <_ZN10JsonParserD1Ev+0x14>
		free(tokens);
 80a29dc:	f000 ffa8 	bl	80a3930 <free>
		JsonBuffer(buffer, bufferLen), tokens(tokens), maxTokens(maxTokens) {

}


JsonParser::~JsonParser() {
 80a29e0:	4620      	mov	r0, r4
 80a29e2:	f7ff ffdb 	bl	80a299c <_ZN10JsonBufferD1Ev>
	if (!staticBuffers && tokens) {
		free(tokens);
	}
}
 80a29e6:	4620      	mov	r0, r4
 80a29e8:	bd10      	pop	{r4, pc}
 80a29ea:	bf00      	nop
 80a29ec:	080aa088 	.word	0x080aa088

080a29f0 <_ZN10JsonParserD0Ev>:
		JsonBuffer(buffer, bufferLen), tokens(tokens), maxTokens(maxTokens) {

}


JsonParser::~JsonParser() {
 80a29f0:	b510      	push	{r4, lr}
 80a29f2:	4604      	mov	r4, r0
	if (!staticBuffers && tokens) {
		free(tokens);
	}
}
 80a29f4:	f7ff ffea 	bl	80a29cc <_ZN10JsonParserD1Ev>
 80a29f8:	4620      	mov	r0, r4
 80a29fa:	212c      	movs	r1, #44	; 0x2c
 80a29fc:	f002 fcd4 	bl	80a53a8 <_ZdlPvj>
 80a2a00:	4620      	mov	r0, r4
 80a2a02:	bd10      	pop	{r4, pc}

080a2a04 <_ZN10JsonWriterD1Ev>:
//
JsonWriter::JsonWriter() : JsonBuffer(), floatPlaces(-1) {
	init();
}

JsonWriter::~JsonWriter() {
 80a2a04:	b510      	push	{r4, lr}
 80a2a06:	4604      	mov	r4, r0
 80a2a08:	4b02      	ldr	r3, [pc, #8]	; (80a2a14 <_ZN10JsonWriterD1Ev+0x10>)
 80a2a0a:	6003      	str	r3, [r0, #0]
 80a2a0c:	f7ff ffc6 	bl	80a299c <_ZN10JsonBufferD1Ev>

}
 80a2a10:	4620      	mov	r0, r4
 80a2a12:	bd10      	pop	{r4, pc}
 80a2a14:	080aa058 	.word	0x080aa058

080a2a18 <_ZN10JsonWriterD0Ev>:
//
JsonWriter::JsonWriter() : JsonBuffer(), floatPlaces(-1) {
	init();
}

JsonWriter::~JsonWriter() {
 80a2a18:	b510      	push	{r4, lr}
 80a2a1a:	4604      	mov	r4, r0

}
 80a2a1c:	f7ff fff2 	bl	80a2a04 <_ZN10JsonWriterD1Ev>
 80a2a20:	4620      	mov	r0, r4
 80a2a22:	2130      	movs	r1, #48	; 0x30
 80a2a24:	f002 fcc0 	bl	80a53a8 <_ZdlPvj>
 80a2a28:	4620      	mov	r0, r4
 80a2a2a:	bd10      	pop	{r4, pc}

080a2a2c <_ZN10JsonBufferC1Ev>:

#include "Particle.h"
#include "JsonParserGeneratorRK.h"


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {
 80a2a2c:	4a03      	ldr	r2, [pc, #12]	; (80a2a3c <_ZN10JsonBufferC1Ev+0x10>)
 80a2a2e:	6002      	str	r2, [r0, #0]
 80a2a30:	2200      	movs	r2, #0
 80a2a32:	6042      	str	r2, [r0, #4]
 80a2a34:	6082      	str	r2, [r0, #8]
 80a2a36:	60c2      	str	r2, [r0, #12]
 80a2a38:	7402      	strb	r2, [r0, #16]

}
 80a2a3a:	4770      	bx	lr
 80a2a3c:	080aa048 	.word	0x080aa048

080a2a40 <_ZN10JsonBuffer8allocateEj>:
	this->buffer = buffer;
	this->bufferLen = bufferLen;
	this->staticBuffers = true;
}

bool JsonBuffer::allocate(size_t len) {
 80a2a40:	b538      	push	{r3, r4, r5, lr}
	if (!staticBuffers) {
 80a2a42:	7c03      	ldrb	r3, [r0, #16]
	this->buffer = buffer;
	this->bufferLen = bufferLen;
	this->staticBuffers = true;
}

bool JsonBuffer::allocate(size_t len) {
 80a2a44:	4604      	mov	r4, r0
 80a2a46:	460d      	mov	r5, r1
	if (!staticBuffers) {
 80a2a48:	b10b      	cbz	r3, 80a2a4e <_ZN10JsonBuffer8allocateEj+0xe>
		else {
			return false;
		}
	}
	else {
		return false;
 80a2a4a:	2000      	movs	r0, #0
 80a2a4c:	bd38      	pop	{r3, r4, r5, pc}
}

bool JsonBuffer::allocate(size_t len) {
	if (!staticBuffers) {
		char *newBuffer;
		if (buffer) {
 80a2a4e:	6840      	ldr	r0, [r0, #4]
 80a2a50:	b110      	cbz	r0, 80a2a58 <_ZN10JsonBuffer8allocateEj+0x18>
			newBuffer = (char *) realloc(buffer, len);
 80a2a52:	f000 ff75 	bl	80a3940 <realloc>
 80a2a56:	e002      	b.n	80a2a5e <_ZN10JsonBuffer8allocateEj+0x1e>
		}
		else {
			newBuffer = (char *) malloc(len);
 80a2a58:	4608      	mov	r0, r1
 80a2a5a:	f000 ff61 	bl	80a3920 <malloc>
		}
		if (newBuffer) {
 80a2a5e:	2800      	cmp	r0, #0
 80a2a60:	d0f3      	beq.n	80a2a4a <_ZN10JsonBuffer8allocateEj+0xa>
			buffer = newBuffer;
 80a2a62:	6060      	str	r0, [r4, #4]
			bufferLen = len;
 80a2a64:	60a5      	str	r5, [r4, #8]
			return true;
 80a2a66:	2001      	movs	r0, #1
		}
	}
	else {
		return false;
	}
}
 80a2a68:	bd38      	pop	{r3, r4, r5, pc}

080a2a6a <_ZN10JsonBuffer7addDataEPKcj>:

bool JsonBuffer::addData(const char *data, size_t dataLen) {
 80a2a6a:	b570      	push	{r4, r5, r6, lr}
	if (!buffer || (offset + dataLen) > bufferLen) {
 80a2a6c:	6843      	ldr	r3, [r0, #4]
	else {
		return false;
	}
}

bool JsonBuffer::addData(const char *data, size_t dataLen) {
 80a2a6e:	460e      	mov	r6, r1
 80a2a70:	4604      	mov	r4, r0
 80a2a72:	4615      	mov	r5, r2
 80a2a74:	68c1      	ldr	r1, [r0, #12]
	if (!buffer || (offset + dataLen) > bufferLen) {
 80a2a76:	b17b      	cbz	r3, 80a2a98 <_ZN10JsonBuffer7addDataEPKcj+0x2e>
 80a2a78:	1853      	adds	r3, r2, r1
 80a2a7a:	6882      	ldr	r2, [r0, #8]
 80a2a7c:	4293      	cmp	r3, r2
 80a2a7e:	d80b      	bhi.n	80a2a98 <_ZN10JsonBuffer7addDataEPKcj+0x2e>
		if (!allocate(offset + dataLen)) {
			return false;
		}
	}

	memcpy(&buffer[offset], data, dataLen);
 80a2a80:	68e3      	ldr	r3, [r4, #12]
 80a2a82:	6860      	ldr	r0, [r4, #4]
 80a2a84:	462a      	mov	r2, r5
 80a2a86:	4631      	mov	r1, r6
 80a2a88:	4418      	add	r0, r3
 80a2a8a:	f004 f8e1 	bl	80a6c50 <memcpy>
	offset += dataLen;
 80a2a8e:	68e3      	ldr	r3, [r4, #12]

	return true;
 80a2a90:	2001      	movs	r0, #1
			return false;
		}
	}

	memcpy(&buffer[offset], data, dataLen);
	offset += dataLen;
 80a2a92:	441d      	add	r5, r3
 80a2a94:	60e5      	str	r5, [r4, #12]

	return true;
 80a2a96:	bd70      	pop	{r4, r5, r6, pc}
}

bool JsonBuffer::addData(const char *data, size_t dataLen) {
	if (!buffer || (offset + dataLen) > bufferLen) {
		// Need to allocate more space for data
		if (!allocate(offset + dataLen)) {
 80a2a98:	4429      	add	r1, r5
 80a2a9a:	4620      	mov	r0, r4
 80a2a9c:	f7ff ffd0 	bl	80a2a40 <_ZN10JsonBuffer8allocateEj>
 80a2aa0:	2800      	cmp	r0, #0
 80a2aa2:	d1ed      	bne.n	80a2a80 <_ZN10JsonBuffer7addDataEPKcj+0x16>

	memcpy(&buffer[offset], data, dataLen);
	offset += dataLen;

	return true;
}
 80a2aa4:	bd70      	pop	{r4, r5, r6, pc}

080a2aa6 <_ZN10JsonBuffer5clearEv>:

void JsonBuffer::clear() {
	offset = 0;
 80a2aa6:	2300      	movs	r3, #0
 80a2aa8:	60c3      	str	r3, [r0, #12]
 80a2aaa:	4770      	bx	lr

080a2aac <_ZN10JsonParserC1Ev>:
}


//

JsonParser::JsonParser() : JsonBuffer(), tokens(0), tokensEnd(0), maxTokens(0) {
 80a2aac:	b508      	push	{r3, lr}
 80a2aae:	4603      	mov	r3, r0
 80a2ab0:	f7ff ffbc 	bl	80a2a2c <_ZN10JsonBufferC1Ev>
 80a2ab4:	4a03      	ldr	r2, [pc, #12]	; (80a2ac4 <_ZN10JsonParserC1Ev+0x18>)
}
 80a2ab6:	4618      	mov	r0, r3
}


//

JsonParser::JsonParser() : JsonBuffer(), tokens(0), tokensEnd(0), maxTokens(0) {
 80a2ab8:	601a      	str	r2, [r3, #0]
 80a2aba:	2200      	movs	r2, #0
 80a2abc:	615a      	str	r2, [r3, #20]
 80a2abe:	619a      	str	r2, [r3, #24]
 80a2ac0:	61da      	str	r2, [r3, #28]
}
 80a2ac2:	bd08      	pop	{r3, pc}
 80a2ac4:	080aa088 	.word	0x080aa088

080a2ac8 <_ZNK10JsonParser14getOuterObjectEv>:
	return 0;
}


const JsonParserGeneratorRK::jsmntok_t *JsonParser::getOuterObject() const {
	if (tokens < tokensEnd && tokens[0].type == JsonParserGeneratorRK::JSMN_OBJECT) {
 80a2ac8:	6943      	ldr	r3, [r0, #20]
 80a2aca:	6982      	ldr	r2, [r0, #24]
 80a2acc:	4293      	cmp	r3, r2
 80a2ace:	d205      	bcs.n	80a2adc <_ZNK10JsonParser14getOuterObjectEv+0x14>
 80a2ad0:	781a      	ldrb	r2, [r3, #0]
 80a2ad2:	2a01      	cmp	r2, #1
 80a2ad4:	bf0c      	ite	eq
 80a2ad6:	4618      	moveq	r0, r3
 80a2ad8:	2000      	movne	r0, #0
 80a2ada:	4770      	bx	lr
		return &tokens[0];
	}
	else {
		return 0;
 80a2adc:	2000      	movs	r0, #0
	}
}
 80a2ade:	4770      	bx	lr

080a2ae0 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>:
	}
	return 0;
}


bool JsonParser::skipObject(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&obj) const {
 80a2ae0:	b570      	push	{r4, r5, r6, lr}
	int curObjectEnd = obj->end;
 80a2ae2:	6813      	ldr	r3, [r2, #0]
 80a2ae4:	689d      	ldr	r5, [r3, #8]

	while(++obj < tokensEnd && obj->end < container->end && obj->end <= curObjectEnd) {
 80a2ae6:	6813      	ldr	r3, [r2, #0]
 80a2ae8:	f103 0410 	add.w	r4, r3, #16
 80a2aec:	6014      	str	r4, [r2, #0]
 80a2aee:	6986      	ldr	r6, [r0, #24]
 80a2af0:	42b4      	cmp	r4, r6
 80a2af2:	d20a      	bcs.n	80a2b0a <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x2a>
 80a2af4:	699b      	ldr	r3, [r3, #24]
 80a2af6:	688c      	ldr	r4, [r1, #8]
 80a2af8:	42a3      	cmp	r3, r4
 80a2afa:	da01      	bge.n	80a2b00 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x20>
 80a2afc:	429d      	cmp	r5, r3
 80a2afe:	daf2      	bge.n	80a2ae6 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x6>
	}

	if (obj >= tokensEnd || obj->end > container->end) {
 80a2b00:	42a3      	cmp	r3, r4
 80a2b02:	bfcc      	ite	gt
 80a2b04:	2000      	movgt	r0, #0
 80a2b06:	2001      	movle	r0, #1
 80a2b08:	bd70      	pop	{r4, r5, r6, pc}
		// No object after index
		return false;
 80a2b0a:	2000      	movs	r0, #0
	}
	return true;
}
 80a2b0c:	bd70      	pop	{r4, r5, r6, pc}

080a2b0e <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j>:

bool JsonParser::getKeyValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&key, const JsonParserGeneratorRK::jsmntok_t *&value, size_t desiredIndex) const {
 80a2b0e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80a2b12:	4607      	mov	r7, r0
 80a2b14:	460c      	mov	r4, r1
 80a2b16:	4691      	mov	r9, r2
 80a2b18:	469a      	mov	sl, r3

	size_t index = 0;
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
 80a2b1a:	ad02      	add	r5, sp, #8
 80a2b1c:	f101 0310 	add.w	r3, r1, #16
		return false;
	}
	return true;
}

bool JsonParser::getKeyValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&key, const JsonParserGeneratorRK::jsmntok_t *&value, size_t desiredIndex) const {
 80a2b20:	9e0a      	ldr	r6, [sp, #40]	; 0x28

	size_t index = 0;
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
 80a2b22:	f845 3d04 	str.w	r3, [r5, #-4]!
	return true;
}

bool JsonParser::getKeyValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&key, const JsonParserGeneratorRK::jsmntok_t *&value, size_t desiredIndex) const {

	size_t index = 0;
 80a2b26:	f04f 0800 	mov.w	r8, #0
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;

	while(token < tokensEnd && token->end < container->end) {
 80a2b2a:	9b01      	ldr	r3, [sp, #4]
 80a2b2c:	69ba      	ldr	r2, [r7, #24]
 80a2b2e:	429a      	cmp	r2, r3
 80a2b30:	d91e      	bls.n	80a2b70 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x62>
 80a2b32:	6899      	ldr	r1, [r3, #8]
 80a2b34:	68a2      	ldr	r2, [r4, #8]
 80a2b36:	4291      	cmp	r1, r2
 80a2b38:	da1a      	bge.n	80a2b70 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x62>
		if (desiredIndex == index) {
 80a2b3a:	45b0      	cmp	r8, r6
 80a2b3c:	d10b      	bne.n	80a2b56 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x48>
			key = token;
 80a2b3e:	f8c9 3000 	str.w	r3, [r9]
			if (skipObject(container, token)) {
 80a2b42:	462a      	mov	r2, r5
 80a2b44:	4621      	mov	r1, r4
 80a2b46:	4638      	mov	r0, r7
 80a2b48:	f7ff ffca 	bl	80a2ae0 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
 80a2b4c:	b118      	cbz	r0, 80a2b56 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x48>
				value = token;
 80a2b4e:	9b01      	ldr	r3, [sp, #4]
 80a2b50:	f8ca 3000 	str.w	r3, [sl]
				return true;
 80a2b54:	e00d      	b.n	80a2b72 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x64>
			}
		}
		index++;
		skipObject(container, token);
 80a2b56:	462a      	mov	r2, r5
 80a2b58:	4621      	mov	r1, r4
 80a2b5a:	4638      	mov	r0, r7
 80a2b5c:	f7ff ffc0 	bl	80a2ae0 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
		skipObject(container, token);
 80a2b60:	462a      	mov	r2, r5
 80a2b62:	4621      	mov	r1, r4
 80a2b64:	4638      	mov	r0, r7
			if (skipObject(container, token)) {
				value = token;
				return true;
			}
		}
		index++;
 80a2b66:	f108 0801 	add.w	r8, r8, #1
		skipObject(container, token);
		skipObject(container, token);
 80a2b6a:	f7ff ffb9 	bl	80a2ae0 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
bool JsonParser::getKeyValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&key, const JsonParserGeneratorRK::jsmntok_t *&value, size_t desiredIndex) const {

	size_t index = 0;
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;

	while(token < tokensEnd && token->end < container->end) {
 80a2b6e:	e7dc      	b.n	80a2b2a <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x1c>
		index++;
		skipObject(container, token);
		skipObject(container, token);
	}

	return false;
 80a2b70:	2000      	movs	r0, #0
}
 80a2b72:	b002      	add	sp, #8
 80a2b74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080a2b78 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj>:
	}

	return index;
}

void JsonParser::copyTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, char *dst, size_t dstLen) const {
 80a2b78:	b570      	push	{r4, r5, r6, lr}

	int ii;
	for(ii = 0; ii < (token->end - token->start) && ii < ((int)dstLen - 1); ii++) {
 80a2b7a:	3b01      	subs	r3, #1
 80a2b7c:	2400      	movs	r4, #0
 80a2b7e:	684e      	ldr	r6, [r1, #4]
 80a2b80:	688d      	ldr	r5, [r1, #8]
 80a2b82:	1bad      	subs	r5, r5, r6
 80a2b84:	42ac      	cmp	r4, r5
 80a2b86:	da07      	bge.n	80a2b98 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj+0x20>
 80a2b88:	429c      	cmp	r4, r3
 80a2b8a:	da05      	bge.n	80a2b98 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj+0x20>
		dst[ii] = buffer[token->start + ii];
 80a2b8c:	6845      	ldr	r5, [r0, #4]
 80a2b8e:	4425      	add	r5, r4
 80a2b90:	5dad      	ldrb	r5, [r5, r6]
 80a2b92:	5515      	strb	r5, [r2, r4]
}

void JsonParser::copyTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, char *dst, size_t dstLen) const {

	int ii;
	for(ii = 0; ii < (token->end - token->start) && ii < ((int)dstLen - 1); ii++) {
 80a2b94:	3401      	adds	r4, #1
 80a2b96:	e7f2      	b.n	80a2b7e <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj+0x6>
		dst[ii] = buffer[token->start + ii];
 	}
	dst[ii] = 0;
 80a2b98:	2300      	movs	r3, #0
 80a2b9a:	5513      	strb	r3, [r2, r4]
 80a2b9c:	bd70      	pop	{r4, r5, r6, pc}
	...

080a2ba0 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERi>:
	else {
		return false;
	}
}

bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, int &result) const {
 80a2ba0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80a2ba2:	4614      	mov	r4, r2
	// Copy data here, because tokens are not null terminated
	char tmp[16];
	copyTokenValue(token, tmp, sizeof(tmp));
 80a2ba4:	2310      	movs	r3, #16
 80a2ba6:	466a      	mov	r2, sp
 80a2ba8:	f7ff ffe6 	bl	80a2b78 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj>

	if (sscanf(tmp, "%d", &result) == 1) {
 80a2bac:	4622      	mov	r2, r4
 80a2bae:	4904      	ldr	r1, [pc, #16]	; (80a2bc0 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERi+0x20>)
 80a2bb0:	4668      	mov	r0, sp
 80a2bb2:	f000 fed5 	bl	80a3960 <sscanf>
		return true;
	}
	else {
		return false;
	}
}
 80a2bb6:	1e43      	subs	r3, r0, #1
 80a2bb8:	4258      	negs	r0, r3
 80a2bba:	4158      	adcs	r0, r3
 80a2bbc:	b004      	add	sp, #16
 80a2bbe:	bd10      	pop	{r4, pc}
 80a2bc0:	080aa59b 	.word	0x080aa59b

080a2bc4 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERf>:
	}
}



bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, float &result) const {
 80a2bc4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80a2bc6:	4614      	mov	r4, r2
	// Copy data here, because tokens are not null terminated
	char tmp[16];
	copyTokenValue(token, tmp, sizeof(tmp));
 80a2bc8:	2310      	movs	r3, #16
 80a2bca:	466a      	mov	r2, sp
 80a2bcc:	f7ff ffd4 	bl	80a2b78 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj>

	result = strtof(tmp, 0);
 80a2bd0:	2100      	movs	r1, #0
 80a2bd2:	4668      	mov	r0, sp
 80a2bd4:	f005 fbf0 	bl	80a83b8 <strtof>
 80a2bd8:	6020      	str	r0, [r4, #0]
	return true;
}
 80a2bda:	2001      	movs	r0, #1
 80a2bdc:	b004      	add	sp, #16
 80a2bde:	bd10      	pop	{r4, pc}

080a2be0 <_ZN16JsonParserString6appendEc>:
	if (buf && bufLen) {
		memset(buf, 0, bufLen);
	}
}

void JsonParserString::append(char ch) {
 80a2be0:	b538      	push	{r3, r4, r5, lr}
 80a2be2:	4604      	mov	r4, r0
	if (str) {
 80a2be4:	6800      	ldr	r0, [r0, #0]
	if (buf && bufLen) {
		memset(buf, 0, bufLen);
	}
}

void JsonParserString::append(char ch) {
 80a2be6:	460d      	mov	r5, r1
	if (str) {
 80a2be8:	b110      	cbz	r0, 80a2bf0 <_ZN16JsonParserString6appendEc+0x10>
		str->concat(ch);
 80a2bea:	f001 fb9b 	bl	80a4324 <_ZN6String6concatEc>
 80a2bee:	e007      	b.n	80a2c00 <_ZN16JsonParserString6appendEc+0x20>
		length++;
	}
	else {
		if (buf && length < (bufLen - 1)) {
 80a2bf0:	6861      	ldr	r1, [r4, #4]
 80a2bf2:	b129      	cbz	r1, 80a2c00 <_ZN16JsonParserString6appendEc+0x20>
 80a2bf4:	68a3      	ldr	r3, [r4, #8]
 80a2bf6:	68e2      	ldr	r2, [r4, #12]
 80a2bf8:	3b01      	subs	r3, #1
 80a2bfa:	429a      	cmp	r2, r3
			buf[length] = ch;
 80a2bfc:	bf38      	it	cc
 80a2bfe:	548d      	strbcc	r5, [r1, r2]
		}
		length++;
 80a2c00:	68e3      	ldr	r3, [r4, #12]
 80a2c02:	3301      	adds	r3, #1
 80a2c04:	60e3      	str	r3, [r4, #12]
 80a2c06:	bd38      	pop	{r3, r4, r5, pc}

080a2c08 <_ZN10JsonParser10appendUtf8EtR16JsonParserString>:
// [static]
void JsonParser::appendUtf8(uint16_t unicode, JsonParserString &str) {

	unsigned char value;

	if (unicode <= 0x007f) {
 80a2c08:	287f      	cmp	r0, #127	; 0x7f
	return true;
}


// [static]
void JsonParser::appendUtf8(uint16_t unicode, JsonParserString &str) {
 80a2c0a:	b570      	push	{r4, r5, r6, lr}
 80a2c0c:	460c      	mov	r4, r1

	unsigned char value;

	if (unicode <= 0x007f) {
 80a2c0e:	d801      	bhi.n	80a2c14 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0xc>
		// 0x00000000 - 0x0000007F:
		str.append((char)unicode);
 80a2c10:	b2c1      	uxtb	r1, r0
 80a2c12:	e019      	b.n	80a2c48 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x40>
	}
	else
	if (unicode <= 0x7ff) {
 80a2c14:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 80a2c18:	ea4f 15a0 	mov.w	r5, r0, asr #6
 80a2c1c:	f000 063f 	and.w	r6, r0, #63	; 0x3f
 80a2c20:	d203      	bcs.n	80a2c2a <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x22>
		// 0x00000080 - 0x000007FF:
		// 110xxxxx 10xxxxxx

		value = (0b11000000 | ((unicode >> 6) & 0b11111));
		str.append((char)value);
 80a2c22:	f065 013f 	orn	r1, r5, #63	; 0x3f
 80a2c26:	b2c9      	uxtb	r1, r1
 80a2c28:	e009      	b.n	80a2c3e <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x36>
	}
	else {
		// 0x00000800 - 0x0000FFFF:
		// 1110xxxx 10xxxxxx 10xxxxxx
		value = 0b11100000 | ((unicode >> 12) & 0b1111);
		str.append((char)value);
 80a2c2a:	0b01      	lsrs	r1, r0, #12
 80a2c2c:	f041 01e0 	orr.w	r1, r1, #224	; 0xe0
 80a2c30:	4620      	mov	r0, r4
 80a2c32:	f7ff ffd5 	bl	80a2be0 <_ZN16JsonParserString6appendEc>

		value = 0b10000000 | ((unicode >> 6) & 0b111111);
		str.append((char)value);
 80a2c36:	f005 013f 	and.w	r1, r5, #63	; 0x3f
 80a2c3a:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80a2c3e:	4620      	mov	r0, r4
 80a2c40:	f7ff ffce 	bl	80a2be0 <_ZN16JsonParserString6appendEc>

		value = 0b10000000 | (unicode & 0b111111);
		str.append((char)value);
 80a2c44:	f046 0180 	orr.w	r1, r6, #128	; 0x80
 80a2c48:	4620      	mov	r0, r4
	}
}
 80a2c4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

		value = 0b10000000 | ((unicode >> 6) & 0b111111);
		str.append((char)value);

		value = 0b10000000 | (unicode & 0b111111);
		str.append((char)value);
 80a2c4e:	f7ff bfc7 	b.w	80a2be0 <_ZN16JsonParserString6appendEc>
	...

080a2c54 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString>:
	bufLen = strWrapper.getLength() + 1;
	return result;
}


bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, JsonParserString &str) const {
 80a2c54:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80a2c58:	4680      	mov	r8, r0
 80a2c5a:	460f      	mov	r7, r1
 80a2c5c:	4616      	mov	r6, r2

	int unicode;
	bool escape = false;

	for(int ii = token->start; ii < token->end; ii++) {
 80a2c5e:	684d      	ldr	r5, [r1, #4]


bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, JsonParserString &str) const {

	int unicode;
	bool escape = false;
 80a2c60:	2400      	movs	r4, #0

	for(int ii = token->start; ii < token->end; ii++) {
 80a2c62:	68b8      	ldr	r0, [r7, #8]
 80a2c64:	4285      	cmp	r5, r0
 80a2c66:	da45      	bge.n	80a2cf4 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xa0>
 80a2c68:	f8d8 3004 	ldr.w	r3, [r8, #4]
		if (escape) {
 80a2c6c:	b3c4      	cbz	r4, 80a2ce0 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x8c>
			escape = false;
			switch(buffer[ii]) {
 80a2c6e:	5d59      	ldrb	r1, [r3, r5]
 80a2c70:	195a      	adds	r2, r3, r5
 80a2c72:	296e      	cmp	r1, #110	; 0x6e
 80a2c74:	d00f      	beq.n	80a2c96 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x42>
 80a2c76:	d805      	bhi.n	80a2c84 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x30>
 80a2c78:	2962      	cmp	r1, #98	; 0x62
 80a2c7a:	d00a      	beq.n	80a2c92 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x3e>
 80a2c7c:	2966      	cmp	r1, #102	; 0x66
 80a2c7e:	d10b      	bne.n	80a2c98 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x44>
			case 'b':
				str.append('\b');
				break;

			case 'f':
				str.append('\f');
 80a2c80:	210c      	movs	r1, #12
 80a2c82:	e009      	b.n	80a2c98 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x44>
	bool escape = false;

	for(int ii = token->start; ii < token->end; ii++) {
		if (escape) {
			escape = false;
			switch(buffer[ii]) {
 80a2c84:	2974      	cmp	r1, #116	; 0x74
 80a2c86:	d00e      	beq.n	80a2ca6 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x52>
 80a2c88:	2975      	cmp	r1, #117	; 0x75
 80a2c8a:	d00e      	beq.n	80a2caa <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x56>
 80a2c8c:	2972      	cmp	r1, #114	; 0x72
 80a2c8e:	d103      	bne.n	80a2c98 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x44>
 80a2c90:	e007      	b.n	80a2ca2 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x4e>
			case 'b':
				str.append('\b');
 80a2c92:	2108      	movs	r1, #8
 80a2c94:	e000      	b.n	80a2c98 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x44>
			case 'f':
				str.append('\f');
				break;

			case 'n':
				str.append('\n');
 80a2c96:	210a      	movs	r1, #10
			case 'b':
				str.append('\b');
				break;

			case 'f':
				str.append('\f');
 80a2c98:	4630      	mov	r0, r6
 80a2c9a:	f7ff ffa1 	bl	80a2be0 <_ZN16JsonParserString6appendEc>
	int unicode;
	bool escape = false;

	for(int ii = token->start; ii < token->end; ii++) {
		if (escape) {
			escape = false;
 80a2c9e:	2400      	movs	r4, #0
				str.append('\b');
				break;

			case 'f':
				str.append('\f');
				break;
 80a2ca0:	e026      	b.n	80a2cf0 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x9c>
			case 'n':
				str.append('\n');
				break;

			case 'r':
				str.append('\r');
 80a2ca2:	210d      	movs	r1, #13
 80a2ca4:	e7f8      	b.n	80a2c98 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x44>
				break;

			case 't':
				str.append('\t');
 80a2ca6:	2109      	movs	r1, #9
 80a2ca8:	e7f6      	b.n	80a2c98 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x44>
				break;

			case 'u':
				if ((ii + 4) < token->end) {
 80a2caa:	1d2b      	adds	r3, r5, #4
 80a2cac:	4298      	cmp	r0, r3
 80a2cae:	ddf6      	ble.n	80a2c9e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x4a>
 80a2cb0:	2300      	movs	r3, #0
					// Copy data here because buffer is not null terminated and this could
					// read past the end otherwise
					char tmp[5];
					for(size_t jj = 0; jj < 4; jj++) {
						tmp[jj] = buffer[ii + jj + 1];
 80a2cb2:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 80a2cb6:	a802      	add	r0, sp, #8
 80a2cb8:	5419      	strb	r1, [r3, r0]
			case 'u':
				if ((ii + 4) < token->end) {
					// Copy data here because buffer is not null terminated and this could
					// read past the end otherwise
					char tmp[5];
					for(size_t jj = 0; jj < 4; jj++) {
 80a2cba:	3301      	adds	r3, #1
 80a2cbc:	2b04      	cmp	r3, #4
 80a2cbe:	d1f8      	bne.n	80a2cb2 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x5e>
						tmp[jj] = buffer[ii + jj + 1];
					}
					tmp[4] = 0;
 80a2cc0:	2300      	movs	r3, #0
					if (sscanf(tmp, "%04x", &unicode) == 1) {
 80a2cc2:	aa01      	add	r2, sp, #4
 80a2cc4:	490d      	ldr	r1, [pc, #52]	; (80a2cfc <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xa8>)
					// read past the end otherwise
					char tmp[5];
					for(size_t jj = 0; jj < 4; jj++) {
						tmp[jj] = buffer[ii + jj + 1];
					}
					tmp[4] = 0;
 80a2cc6:	f88d 300c 	strb.w	r3, [sp, #12]
					if (sscanf(tmp, "%04x", &unicode) == 1) {
 80a2cca:	f000 fe49 	bl	80a3960 <sscanf>
 80a2cce:	2801      	cmp	r0, #1
 80a2cd0:	d1e5      	bne.n	80a2c9e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x4a>
						appendUtf8((uint16_t)unicode, str);
 80a2cd2:	4631      	mov	r1, r6
 80a2cd4:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 80a2cd8:	f7ff ff96 	bl	80a2c08 <_ZN10JsonParser10appendUtf8EtR16JsonParserString>
						ii += 5; // also increments in loop
 80a2cdc:	3505      	adds	r5, #5
 80a2cde:	e7de      	b.n	80a2c9e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x4a>
				str.append(buffer[ii]);
				break;
			}
		}
		else
		if (buffer[ii] == '\\') {
 80a2ce0:	5d59      	ldrb	r1, [r3, r5]
 80a2ce2:	295c      	cmp	r1, #92	; 0x5c
 80a2ce4:	d003      	beq.n	80a2cee <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x9a>
			escape = true;
		}
		else {
			str.append(buffer[ii]);
 80a2ce6:	4630      	mov	r0, r6
 80a2ce8:	f7ff ff7a 	bl	80a2be0 <_ZN16JsonParserString6appendEc>
 80a2cec:	e000      	b.n	80a2cf0 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x9c>
				break;
			}
		}
		else
		if (buffer[ii] == '\\') {
			escape = true;
 80a2cee:	2401      	movs	r4, #1
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, JsonParserString &str) const {

	int unicode;
	bool escape = false;

	for(int ii = token->start; ii < token->end; ii++) {
 80a2cf0:	3501      	adds	r5, #1
 80a2cf2:	e7b6      	b.n	80a2c62 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xe>
			str.append(buffer[ii]);
		}
	}

	return true;
}
 80a2cf4:	2001      	movs	r0, #1
 80a2cf6:	b004      	add	sp, #16
 80a2cf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a2cfc:	080aa060 	.word	0x080aa060

080a2d00 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>:
	return true;
}



bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, String &result) const {
 80a2d00:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80a2d02:	460c      	mov	r4, r1
 80a2d04:	4615      	mov	r5, r2
 80a2d06:	4606      	mov	r6, r0

	result = "";
 80a2d08:	490b      	ldr	r1, [pc, #44]	; (80a2d38 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String+0x38>)
 80a2d0a:	4610      	mov	r0, r2
 80a2d0c:	f001 fa7b 	bl	80a4206 <_ZN6StringaSEPKc>
	result.reserve(token->end - token->start + 1);
 80a2d10:	68a3      	ldr	r3, [r4, #8]
 80a2d12:	6861      	ldr	r1, [r4, #4]
 80a2d14:	4628      	mov	r0, r5
 80a2d16:	1a59      	subs	r1, r3, r1
 80a2d18:	3101      	adds	r1, #1
 80a2d1a:	f001 f9f9 	bl	80a4110 <_ZN6String7reserveEj>


//
//
//
JsonParserString::JsonParserString(String *str) : str(str), buf(0), bufLen(0), length(0){
 80a2d1e:	2300      	movs	r3, #0

	result = "";
	result.reserve(token->end - token->start + 1);

	JsonParserString strWrapper(&result);
	return getTokenValue(token, strWrapper);
 80a2d20:	466a      	mov	r2, sp
 80a2d22:	4621      	mov	r1, r4
 80a2d24:	4630      	mov	r0, r6


//
//
//
JsonParserString::JsonParserString(String *str) : str(str), buf(0), bufLen(0), length(0){
 80a2d26:	9500      	str	r5, [sp, #0]
 80a2d28:	9301      	str	r3, [sp, #4]
 80a2d2a:	9302      	str	r3, [sp, #8]
 80a2d2c:	9303      	str	r3, [sp, #12]

	result = "";
	result.reserve(token->end - token->start + 1);

	JsonParserString strWrapper(&result);
	return getTokenValue(token, strWrapper);
 80a2d2e:	f7ff ff91 	bl	80a2c54 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString>
}
 80a2d32:	b004      	add	sp, #16
 80a2d34:	bd70      	pop	{r4, r5, r6, pc}
 80a2d36:	bf00      	nop
 80a2d38:	080a9f53 	.word	0x080a9f53

080a2d3c <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>:

	return false;
}


bool JsonParser::getValueTokenByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, const JsonParserGeneratorRK::jsmntok_t *&value) const {
 80a2d3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a2d40:	b089      	sub	sp, #36	; 0x24
 80a2d42:	4606      	mov	r6, r0
 80a2d44:	460f      	mov	r7, r1

	const JsonParserGeneratorRK::jsmntok_t *key;
	String keyName;
 80a2d46:	a804      	add	r0, sp, #16
 80a2d48:	4911      	ldr	r1, [pc, #68]	; (80a2d90 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x54>)

	return false;
}


bool JsonParser::getValueTokenByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, const JsonParserGeneratorRK::jsmntok_t *&value) const {
 80a2d4a:	4690      	mov	r8, r2
 80a2d4c:	4699      	mov	r9, r3

	const JsonParserGeneratorRK::jsmntok_t *key;
	String keyName;
 80a2d4e:	f001 fa08 	bl	80a4162 <_ZN6StringC1EPK19__FlashStringHelper>

	for(size_t ii = 0; getKeyValueTokenByIndex(container, key, value, ii); ii++) {
 80a2d52:	2500      	movs	r5, #0
 80a2d54:	9500      	str	r5, [sp, #0]
 80a2d56:	464b      	mov	r3, r9
 80a2d58:	aa03      	add	r2, sp, #12
 80a2d5a:	4639      	mov	r1, r7
 80a2d5c:	4630      	mov	r0, r6
 80a2d5e:	f7ff fed6 	bl	80a2b0e <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j>
 80a2d62:	4604      	mov	r4, r0
 80a2d64:	b168      	cbz	r0, 80a2d82 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x46>
		if (getTokenValue(key, keyName) && keyName == name) {
 80a2d66:	aa04      	add	r2, sp, #16
 80a2d68:	9903      	ldr	r1, [sp, #12]
 80a2d6a:	4630      	mov	r0, r6
 80a2d6c:	f7ff ffc8 	bl	80a2d00 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>
 80a2d70:	4604      	mov	r4, r0
 80a2d72:	b120      	cbz	r0, 80a2d7e <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x42>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 80a2d74:	4641      	mov	r1, r8
 80a2d76:	a804      	add	r0, sp, #16
 80a2d78:	f001 fb10 	bl	80a439c <_ZNK6String6equalsEPKc>
 80a2d7c:	b908      	cbnz	r0, 80a2d82 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x46>
bool JsonParser::getValueTokenByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, const JsonParserGeneratorRK::jsmntok_t *&value) const {

	const JsonParserGeneratorRK::jsmntok_t *key;
	String keyName;

	for(size_t ii = 0; getKeyValueTokenByIndex(container, key, value, ii); ii++) {
 80a2d7e:	3501      	adds	r5, #1
 80a2d80:	e7e8      	b.n	80a2d54 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x18>


bool JsonParser::getValueTokenByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, const JsonParserGeneratorRK::jsmntok_t *&value) const {

	const JsonParserGeneratorRK::jsmntok_t *key;
	String keyName;
 80a2d82:	a804      	add	r0, sp, #16
 80a2d84:	f001 f9a6 	bl	80a40d4 <_ZN6StringD1Ev>
		if (getTokenValue(key, keyName) && keyName == name) {
			return true;
		}
	}
	return false;
}
 80a2d88:	4620      	mov	r0, r4
 80a2d8a:	b009      	add	sp, #36	; 0x24
 80a2d8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a2d90:	080a9f53 	.word	0x080a9f53

080a2d94 <_ZN10JsonWriter4initEv>:
	init();
}

void JsonWriter::init() {
	// Save start of insertion point for later
	offset = 0;
 80a2d94:	2300      	movs	r3, #0

	contextIndex = 0;
	context[contextIndex].isFirst = true;
 80a2d96:	2201      	movs	r2, #1
	init();
}

void JsonWriter::init() {
	// Save start of insertion point for later
	offset = 0;
 80a2d98:	60c3      	str	r3, [r0, #12]

	contextIndex = 0;
 80a2d9a:	6143      	str	r3, [r0, #20]
	context[contextIndex].isFirst = true;
 80a2d9c:	7602      	strb	r2, [r0, #24]
	context[contextIndex].terminator = 0;
 80a2d9e:	7643      	strb	r3, [r0, #25]

	truncated = false;
 80a2da0:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
 80a2da4:	4770      	bx	lr
	...

080a2da8 <_ZN10JsonWriterC1EPcj>:
	if (!staticBuffers && buffer) {
		free(buffer);
	}
}

JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
 80a2da8:	2300      	movs	r3, #0
 80a2daa:	60c3      	str	r3, [r0, #12]

JsonWriter::~JsonWriter() {

}

JsonWriter::JsonWriter(char *buffer, size_t bufferLen) : JsonBuffer(buffer, bufferLen), floatPlaces(-1) {
 80a2dac:	b510      	push	{r4, lr}
	if (!staticBuffers && buffer) {
		free(buffer);
	}
}

JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
 80a2dae:	2301      	movs	r3, #1
 80a2db0:	7403      	strb	r3, [r0, #16]

JsonWriter::~JsonWriter() {

}

JsonWriter::JsonWriter(char *buffer, size_t bufferLen) : JsonBuffer(buffer, bufferLen), floatPlaces(-1) {
 80a2db2:	4b05      	ldr	r3, [pc, #20]	; (80a2dc8 <_ZN10JsonWriterC1EPcj+0x20>)
	if (!staticBuffers && buffer) {
		free(buffer);
	}
}

JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
 80a2db4:	6041      	str	r1, [r0, #4]

JsonWriter::~JsonWriter() {

}

JsonWriter::JsonWriter(char *buffer, size_t bufferLen) : JsonBuffer(buffer, bufferLen), floatPlaces(-1) {
 80a2db6:	6003      	str	r3, [r0, #0]
 80a2db8:	f04f 33ff 	mov.w	r3, #4294967295
	if (!staticBuffers && buffer) {
		free(buffer);
	}
}

JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
 80a2dbc:	6082      	str	r2, [r0, #8]

JsonWriter::~JsonWriter() {

}

JsonWriter::JsonWriter(char *buffer, size_t bufferLen) : JsonBuffer(buffer, bufferLen), floatPlaces(-1) {
 80a2dbe:	62c3      	str	r3, [r0, #44]	; 0x2c
	init();
 80a2dc0:	f7ff ffe8 	bl	80a2d94 <_ZN10JsonWriter4initEv>
}
 80a2dc4:	bd10      	pop	{r4, pc}
 80a2dc6:	bf00      	nop
 80a2dc8:	080aa058 	.word	0x080aa058

080a2dcc <_ZN10JsonWriter10insertCharEc>:
	}
}


void JsonWriter::insertChar(char ch) {
	if (offset < bufferLen) {
 80a2dcc:	68c3      	ldr	r3, [r0, #12]
 80a2dce:	6882      	ldr	r2, [r0, #8]
		buffer[bufferLen - 1] = 0;
	}
}


void JsonWriter::insertChar(char ch) {
 80a2dd0:	b510      	push	{r4, lr}
	if (offset < bufferLen) {
 80a2dd2:	4293      	cmp	r3, r2
		buffer[offset++] = ch;
 80a2dd4:	bf3d      	ittte	cc
 80a2dd6:	6842      	ldrcc	r2, [r0, #4]
 80a2dd8:	1c5c      	addcc	r4, r3, #1
 80a2dda:	60c4      	strcc	r4, [r0, #12]
	}
	else {
		truncated = true;
 80a2ddc:	2301      	movcs	r3, #1
}


void JsonWriter::insertChar(char ch) {
	if (offset < bufferLen) {
		buffer[offset++] = ch;
 80a2dde:	bf34      	ite	cc
 80a2de0:	54d1      	strbcc	r1, [r2, r3]
	}
	else {
		truncated = true;
 80a2de2:	f880 302a 	strbcs.w	r3, [r0, #42]	; 0x2a
 80a2de6:	bd10      	pop	{r4, pc}

080a2de8 <_ZN10JsonWriter19finishObjectOrArrayEv>:
	insertChar(startChar);
	return true;
}


void JsonWriter::finishObjectOrArray() {
 80a2de8:	b510      	push	{r4, lr}
	if (contextIndex > 0) {
 80a2dea:	6943      	ldr	r3, [r0, #20]
	insertChar(startChar);
	return true;
}


void JsonWriter::finishObjectOrArray() {
 80a2dec:	4604      	mov	r4, r0
	if (contextIndex > 0) {
 80a2dee:	b143      	cbz	r3, 80a2e02 <_ZN10JsonWriter19finishObjectOrArrayEv+0x1a>
		if (context[contextIndex].terminator != 0) {
 80a2df0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80a2df4:	7e59      	ldrb	r1, [r3, #25]
 80a2df6:	b109      	cbz	r1, 80a2dfc <_ZN10JsonWriter19finishObjectOrArrayEv+0x14>
			insertChar(context[contextIndex].terminator);
 80a2df8:	f7ff ffe8 	bl	80a2dcc <_ZN10JsonWriter10insertCharEc>
		}
		contextIndex--;
 80a2dfc:	6963      	ldr	r3, [r4, #20]
 80a2dfe:	3b01      	subs	r3, #1
 80a2e00:	6163      	str	r3, [r4, #20]
	}
	// Make sure buffer is null terminated
	if (offset < bufferLen) {
 80a2e02:	68a3      	ldr	r3, [r4, #8]
 80a2e04:	68e0      	ldr	r0, [r4, #12]
 80a2e06:	6861      	ldr	r1, [r4, #4]
 80a2e08:	4298      	cmp	r0, r3
 80a2e0a:	f04f 0200 	mov.w	r2, #0
		buffer[offset] = 0;
	}
	else {
		buffer[bufferLen - 1] = 0;
 80a2e0e:	bf2a      	itet	cs
 80a2e10:	185b      	addcs	r3, r3, r1
		}
		contextIndex--;
	}
	// Make sure buffer is null terminated
	if (offset < bufferLen) {
		buffer[offset] = 0;
 80a2e12:	540a      	strbcc	r2, [r1, r0]
	}
	else {
		buffer[bufferLen - 1] = 0;
 80a2e14:	f803 2c01 	strbcs.w	r2, [r3, #-1]
 80a2e18:	bd10      	pop	{r4, pc}

080a2e1a <_ZN10JsonWriter14insertvsprintfEPKcSt9__va_list>:
	va_start(ap, fmt);
	insertvsprintf(fmt, ap);
	va_end(ap);
}

void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
 80a2e1a:	b570      	push	{r4, r5, r6, lr}
 80a2e1c:	4604      	mov	r4, r0
	size_t spaceAvailable = bufferLen - offset;
 80a2e1e:	68c0      	ldr	r0, [r0, #12]
 80a2e20:	68a5      	ldr	r5, [r4, #8]

	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
 80a2e22:	6866      	ldr	r6, [r4, #4]
	insertvsprintf(fmt, ap);
	va_end(ap);
}

void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
	size_t spaceAvailable = bufferLen - offset;
 80a2e24:	1a2d      	subs	r5, r5, r0

	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
 80a2e26:	4613      	mov	r3, r2
 80a2e28:	4430      	add	r0, r6
 80a2e2a:	460a      	mov	r2, r1
 80a2e2c:	4629      	mov	r1, r5
 80a2e2e:	f000 fdb7 	bl	80a39a0 <vsnprintf>
	if (count <= spaceAvailable) {
 80a2e32:	4285      	cmp	r5, r0
		offset += count;
	}
	else {
		// Truncated, no more space left
		offset = bufferLen;
 80a2e34:	bf35      	itete	cc
 80a2e36:	68a3      	ldrcc	r3, [r4, #8]
void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
	size_t spaceAvailable = bufferLen - offset;

	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
	if (count <= spaceAvailable) {
		offset += count;
 80a2e38:	68e3      	ldrcs	r3, [r4, #12]
	}
	else {
		// Truncated, no more space left
		offset = bufferLen;
 80a2e3a:	60e3      	strcc	r3, [r4, #12]
void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
	size_t spaceAvailable = bufferLen - offset;

	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
	if (count <= spaceAvailable) {
		offset += count;
 80a2e3c:	18c0      	addcs	r0, r0, r3
	}
	else {
		// Truncated, no more space left
		offset = bufferLen;
		truncated = true;
 80a2e3e:	bf36      	itet	cc
 80a2e40:	2301      	movcc	r3, #1
void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
	size_t spaceAvailable = bufferLen - offset;

	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
	if (count <= spaceAvailable) {
		offset += count;
 80a2e42:	60e0      	strcs	r0, [r4, #12]
	}
	else {
		// Truncated, no more space left
		offset = bufferLen;
		truncated = true;
 80a2e44:	f884 302a 	strbcc.w	r3, [r4, #42]	; 0x2a
 80a2e48:	bd70      	pop	{r4, r5, r6, pc}

080a2e4a <_ZN10JsonWriter13insertsprintfEPKcz>:

}



void JsonWriter::insertsprintf(const char *fmt, ...) {
 80a2e4a:	b40e      	push	{r1, r2, r3}
 80a2e4c:	b503      	push	{r0, r1, lr}
 80a2e4e:	aa03      	add	r2, sp, #12
 80a2e50:	f852 1b04 	ldr.w	r1, [r2], #4
	va_list ap;
	va_start(ap, fmt);
 80a2e54:	9201      	str	r2, [sp, #4]
	insertvsprintf(fmt, ap);
 80a2e56:	f7ff ffe0 	bl	80a2e1a <_ZN10JsonWriter14insertvsprintfEPKcSt9__va_list>
	va_end(ap);
}
 80a2e5a:	b002      	add	sp, #8
 80a2e5c:	f85d eb04 	ldr.w	lr, [sp], #4
 80a2e60:	b003      	add	sp, #12
 80a2e62:	4770      	bx	lr

080a2e64 <_ZN10JsonWriter12insertStringEPKcb>:
	else {
		truncated = true;
	}
}

void JsonWriter::insertString(const char *s, bool quoted) {
 80a2e64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a2e68:	4604      	mov	r4, r0
 80a2e6a:	460e      	mov	r6, r1
	// 110xxxxx 10xxxxxx

	// 0x00000800 - 0x0000FFFF:
	// 1110xxxx 10xxxxxx 10xxxxxx

	if (quoted) {
 80a2e6c:	4617      	mov	r7, r2
 80a2e6e:	b112      	cbz	r2, 80a2e76 <_ZN10JsonWriter12insertStringEPKcb+0x12>
		insertChar('"');
 80a2e70:	2122      	movs	r1, #34	; 0x22
 80a2e72:	f7ff ffab 	bl	80a2dcc <_ZN10JsonWriter10insertCharEc>
	else {
		truncated = true;
	}
}

void JsonWriter::insertString(const char *s, bool quoted) {
 80a2e76:	2500      	movs	r5, #0

	if (quoted) {
		insertChar('"');
	}

	for(size_t ii = 0; s[ii] && offset < bufferLen; ii++) {
 80a2e78:	5d71      	ldrb	r1, [r6, r5]
 80a2e7a:	eb06 0805 	add.w	r8, r6, r5
 80a2e7e:	2900      	cmp	r1, #0
 80a2e80:	d071      	beq.n	80a2f66 <_ZN10JsonWriter12insertStringEPKcb+0x102>
 80a2e82:	68e2      	ldr	r2, [r4, #12]
 80a2e84:	68a3      	ldr	r3, [r4, #8]
 80a2e86:	429a      	cmp	r2, r3
 80a2e88:	d26d      	bcs.n	80a2f66 <_ZN10JsonWriter12insertStringEPKcb+0x102>
		if (s[ii] & 0x80) {
 80a2e8a:	060b      	lsls	r3, r1, #24
 80a2e8c:	d533      	bpl.n	80a2ef6 <_ZN10JsonWriter12insertStringEPKcb+0x92>
			// High bit set: convert UTF-8 to JSON Unicode escape
			if (((s[ii] & 0b11110000) == 0b11100000) && ((s[ii+1] & 0b11000000) == 0b10000000) && ((s[ii+2] & 0b11000000) == 0b10000000)) {
 80a2e8e:	f001 03f0 	and.w	r3, r1, #240	; 0xf0
 80a2e92:	2be0      	cmp	r3, #224	; 0xe0
 80a2e94:	d117      	bne.n	80a2ec6 <_ZN10JsonWriter12insertStringEPKcb+0x62>
 80a2e96:	f898 3001 	ldrb.w	r3, [r8, #1]
 80a2e9a:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
 80a2e9e:	2a80      	cmp	r2, #128	; 0x80
 80a2ea0:	d111      	bne.n	80a2ec6 <_ZN10JsonWriter12insertStringEPKcb+0x62>
 80a2ea2:	f105 0802 	add.w	r8, r5, #2
 80a2ea6:	f816 2008 	ldrb.w	r2, [r6, r8]
 80a2eaa:	f002 00c0 	and.w	r0, r2, #192	; 0xc0
 80a2eae:	2880      	cmp	r0, #128	; 0x80
 80a2eb0:	d109      	bne.n	80a2ec6 <_ZN10JsonWriter12insertStringEPKcb+0x62>
				// 3-byte
				uint16_t utf16 = ((s[ii] & 0b1111) << 12) | ((s[ii+1] & 0b111111) << 6) | (s[ii+2] & 0b111111);
				insertsprintf("\\u%04X", utf16);
 80a2eb2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80a2eb6:	019b      	lsls	r3, r3, #6
 80a2eb8:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
 80a2ebc:	f403 637c 	and.w	r3, r3, #4032	; 0xfc0
 80a2ec0:	431a      	orrs	r2, r3
 80a2ec2:	b292      	uxth	r2, r2
 80a2ec4:	e011      	b.n	80a2eea <_ZN10JsonWriter12insertStringEPKcb+0x86>
				ii += 2; // plus one more in loop increment
			}
			else
			if (((s[ii] & 0b11100000) == 0b11000000) && ((s[ii+1] & 0b11000000) == 0b10000000)) {
 80a2ec6:	f001 03e0 	and.w	r3, r1, #224	; 0xe0
 80a2eca:	2bc0      	cmp	r3, #192	; 0xc0
 80a2ecc:	d146      	bne.n	80a2f5c <_ZN10JsonWriter12insertStringEPKcb+0xf8>
 80a2ece:	f105 0801 	add.w	r8, r5, #1
 80a2ed2:	f816 3008 	ldrb.w	r3, [r6, r8]
 80a2ed6:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
 80a2eda:	2a80      	cmp	r2, #128	; 0x80
 80a2edc:	d13e      	bne.n	80a2f5c <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				// 2-byte
				uint16_t utf16 = ((s[ii] & 0b11111) << 6) | (s[ii+1] & 0b111111);
				insertsprintf("\\u%04X", utf16);
 80a2ede:	0189      	lsls	r1, r1, #6
 80a2ee0:	f401 62f8 	and.w	r2, r1, #1984	; 0x7c0
 80a2ee4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80a2ee8:	431a      	orrs	r2, r3
 80a2eea:	4923      	ldr	r1, [pc, #140]	; (80a2f78 <_ZN10JsonWriter12insertStringEPKcb+0x114>)
 80a2eec:	4620      	mov	r0, r4
 80a2eee:	f7ff ffac 	bl	80a2e4a <_ZN10JsonWriter13insertsprintfEPKcz>
				ii++; // plus one more in loop increment
 80a2ef2:	4645      	mov	r5, r8
 80a2ef4:	e035      	b.n	80a2f62 <_ZN10JsonWriter12insertStringEPKcb+0xfe>
				// Not valid unicode, just pass characters through
				insertChar(s[ii]);
			}
		}
		else {
			switch(s[ii]) {
 80a2ef6:	290c      	cmp	r1, #12
 80a2ef8:	d018      	beq.n	80a2f2c <_ZN10JsonWriter12insertStringEPKcb+0xc8>
 80a2efa:	d80b      	bhi.n	80a2f14 <_ZN10JsonWriter12insertStringEPKcb+0xb0>
 80a2efc:	2909      	cmp	r1, #9
 80a2efe:	d021      	beq.n	80a2f44 <_ZN10JsonWriter12insertStringEPKcb+0xe0>
 80a2f00:	290a      	cmp	r1, #10
 80a2f02:	d019      	beq.n	80a2f38 <_ZN10JsonWriter12insertStringEPKcb+0xd4>
 80a2f04:	2908      	cmp	r1, #8
 80a2f06:	d129      	bne.n	80a2f5c <_ZN10JsonWriter12insertStringEPKcb+0xf8>
			case '\b':
				insertChar('\\');
 80a2f08:	215c      	movs	r1, #92	; 0x5c
 80a2f0a:	4620      	mov	r0, r4
 80a2f0c:	f7ff ff5e 	bl	80a2dcc <_ZN10JsonWriter10insertCharEc>
				insertChar('b');
 80a2f10:	2162      	movs	r1, #98	; 0x62
 80a2f12:	e023      	b.n	80a2f5c <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				// Not valid unicode, just pass characters through
				insertChar(s[ii]);
			}
		}
		else {
			switch(s[ii]) {
 80a2f14:	2922      	cmp	r1, #34	; 0x22
 80a2f16:	d01b      	beq.n	80a2f50 <_ZN10JsonWriter12insertStringEPKcb+0xec>
 80a2f18:	295c      	cmp	r1, #92	; 0x5c
 80a2f1a:	d019      	beq.n	80a2f50 <_ZN10JsonWriter12insertStringEPKcb+0xec>
 80a2f1c:	290d      	cmp	r1, #13
 80a2f1e:	d11d      	bne.n	80a2f5c <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				insertChar('\\');
				insertChar('n');
				break;

			case '\r':
				insertChar('\\');
 80a2f20:	215c      	movs	r1, #92	; 0x5c
 80a2f22:	4620      	mov	r0, r4
 80a2f24:	f7ff ff52 	bl	80a2dcc <_ZN10JsonWriter10insertCharEc>
				insertChar('r');
 80a2f28:	2172      	movs	r1, #114	; 0x72
 80a2f2a:	e017      	b.n	80a2f5c <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				insertChar('\\');
				insertChar('b');
				break;

			case '\f':
				insertChar('\\');
 80a2f2c:	215c      	movs	r1, #92	; 0x5c
 80a2f2e:	4620      	mov	r0, r4
 80a2f30:	f7ff ff4c 	bl	80a2dcc <_ZN10JsonWriter10insertCharEc>
				insertChar('f');
 80a2f34:	2166      	movs	r1, #102	; 0x66
 80a2f36:	e011      	b.n	80a2f5c <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				break;

			case '\n':
				insertChar('\\');
 80a2f38:	215c      	movs	r1, #92	; 0x5c
 80a2f3a:	4620      	mov	r0, r4
 80a2f3c:	f7ff ff46 	bl	80a2dcc <_ZN10JsonWriter10insertCharEc>
				insertChar('n');
 80a2f40:	216e      	movs	r1, #110	; 0x6e
 80a2f42:	e00b      	b.n	80a2f5c <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				insertChar('\\');
				insertChar('r');
				break;

			case '\t':
				insertChar('\\');
 80a2f44:	215c      	movs	r1, #92	; 0x5c
 80a2f46:	4620      	mov	r0, r4
 80a2f48:	f7ff ff40 	bl	80a2dcc <_ZN10JsonWriter10insertCharEc>
				insertChar('t');
 80a2f4c:	2174      	movs	r1, #116	; 0x74
 80a2f4e:	e005      	b.n	80a2f5c <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				break;

			case '"':
			case '\\':
				insertChar('\\');
 80a2f50:	215c      	movs	r1, #92	; 0x5c
 80a2f52:	4620      	mov	r0, r4
 80a2f54:	f7ff ff3a 	bl	80a2dcc <_ZN10JsonWriter10insertCharEc>
				insertChar(s[ii]);
 80a2f58:	f898 1000 	ldrb.w	r1, [r8]
				break;

			default:
				insertChar(s[ii]);
 80a2f5c:	4620      	mov	r0, r4
 80a2f5e:	f7ff ff35 	bl	80a2dcc <_ZN10JsonWriter10insertCharEc>

	if (quoted) {
		insertChar('"');
	}

	for(size_t ii = 0; s[ii] && offset < bufferLen; ii++) {
 80a2f62:	3501      	adds	r5, #1
 80a2f64:	e788      	b.n	80a2e78 <_ZN10JsonWriter12insertStringEPKcb+0x14>
				insertChar(s[ii]);
				break;
			}
		}
	}
	if (quoted) {
 80a2f66:	b12f      	cbz	r7, 80a2f74 <_ZN10JsonWriter12insertStringEPKcb+0x110>
		insertChar('"');
 80a2f68:	4620      	mov	r0, r4
	}

}
 80a2f6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				break;
			}
		}
	}
	if (quoted) {
		insertChar('"');
 80a2f6e:	2122      	movs	r1, #34	; 0x22
 80a2f70:	f7ff bf2c 	b.w	80a2dcc <_ZN10JsonWriter10insertCharEc>
 80a2f74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a2f78:	080aa065 	.word	0x080aa065

080a2f7c <_ZN10JsonWriter20insertCheckSeparatorEv>:
		offset = bufferLen;
		truncated = true;
	}
}

void JsonWriter::insertCheckSeparator() {
 80a2f7c:	6942      	ldr	r2, [r0, #20]
 80a2f7e:	eb00 0342 	add.w	r3, r0, r2, lsl #1
	if (context[contextIndex].isFirst) {
 80a2f82:	7e1a      	ldrb	r2, [r3, #24]
 80a2f84:	b112      	cbz	r2, 80a2f8c <_ZN10JsonWriter20insertCheckSeparatorEv+0x10>
		context[contextIndex].isFirst = false;
 80a2f86:	2200      	movs	r2, #0
 80a2f88:	761a      	strb	r2, [r3, #24]
 80a2f8a:	4770      	bx	lr
	}
	else {
		insertChar(',');
 80a2f8c:	212c      	movs	r1, #44	; 0x2c
 80a2f8e:	f7ff bf1d 	b.w	80a2dcc <_ZN10JsonWriter10insertCharEc>

080a2f92 <_ZN10JsonWriter18startObjectOrArrayEcc>:

	truncated = false;

}

bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
 80a2f92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
 80a2f94:	6943      	ldr	r3, [r0, #20]

	truncated = false;

}

bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
 80a2f96:	460e      	mov	r6, r1
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
 80a2f98:	3301      	adds	r3, #1
 80a2f9a:	2b08      	cmp	r3, #8

	truncated = false;

}

bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
 80a2f9c:	4617      	mov	r7, r2
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
 80a2f9e:	d80e      	bhi.n	80a2fbe <_ZN10JsonWriter18startObjectOrArrayEcc+0x2c>
		return false;
	}
	insertCheckSeparator();
 80a2fa0:	f7ff ffec 	bl	80a2f7c <_ZN10JsonWriter20insertCheckSeparatorEv>

	contextIndex++;
 80a2fa4:	6943      	ldr	r3, [r0, #20]

	context[contextIndex].isFirst = true;
 80a2fa6:	2401      	movs	r4, #1
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
		return false;
	}
	insertCheckSeparator();

	contextIndex++;
 80a2fa8:	1c5a      	adds	r2, r3, #1
 80a2faa:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80a2fae:	6142      	str	r2, [r0, #20]

	context[contextIndex].isFirst = true;
	context[contextIndex].terminator = endChar;

	insertChar(startChar);
 80a2fb0:	4631      	mov	r1, r6
	}
	insertCheckSeparator();

	contextIndex++;

	context[contextIndex].isFirst = true;
 80a2fb2:	769c      	strb	r4, [r3, #26]
	context[contextIndex].terminator = endChar;
 80a2fb4:	76df      	strb	r7, [r3, #27]

	insertChar(startChar);
 80a2fb6:	f7ff ff09 	bl	80a2dcc <_ZN10JsonWriter10insertCharEc>
 80a2fba:	4620      	mov	r0, r4
 80a2fbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

}

bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
		return false;
 80a2fbe:	2000      	movs	r0, #0
	context[contextIndex].isFirst = true;
	context[contextIndex].terminator = endChar;

	insertChar(startChar);
	return true;
}
 80a2fc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080a2fc4 <_ZN10JsonWriter11insertValueEf>:
	else {
		insertString("false");
	}
}

void JsonWriter::insertValue(float value) {
 80a2fc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a2fc6:	4604      	mov	r4, r0
	if (floatPlaces >= 0) {
 80a2fc8:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
	else {
		insertString("false");
	}
}

void JsonWriter::insertValue(float value) {
 80a2fca:	4608      	mov	r0, r1
	if (floatPlaces >= 0) {
 80a2fcc:	2d00      	cmp	r5, #0
 80a2fce:	db0a      	blt.n	80a2fe6 <_ZN10JsonWriter11insertValueEf+0x22>
		insertsprintf("%.*f", floatPlaces, value);
 80a2fd0:	f002 fcaa 	bl	80a5928 <__aeabi_f2d>
 80a2fd4:	462a      	mov	r2, r5
 80a2fd6:	e9cd 0100 	strd	r0, r1, [sp]
 80a2fda:	4908      	ldr	r1, [pc, #32]	; (80a2ffc <_ZN10JsonWriter11insertValueEf+0x38>)
 80a2fdc:	4620      	mov	r0, r4
 80a2fde:	f7ff ff34 	bl	80a2e4a <_ZN10JsonWriter13insertsprintfEPKcz>
	}
	else {
		insertsprintf("%f", value);
	}
}
 80a2fe2:	b003      	add	sp, #12
 80a2fe4:	bd30      	pop	{r4, r5, pc}
void JsonWriter::insertValue(float value) {
	if (floatPlaces >= 0) {
		insertsprintf("%.*f", floatPlaces, value);
	}
	else {
		insertsprintf("%f", value);
 80a2fe6:	f002 fc9f 	bl	80a5928 <__aeabi_f2d>
 80a2fea:	4602      	mov	r2, r0
 80a2fec:	460b      	mov	r3, r1
 80a2fee:	4620      	mov	r0, r4
 80a2ff0:	4903      	ldr	r1, [pc, #12]	; (80a3000 <_ZN10JsonWriter11insertValueEf+0x3c>)
	}
}
 80a2ff2:	b003      	add	sp, #12
 80a2ff4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
void JsonWriter::insertValue(float value) {
	if (floatPlaces >= 0) {
		insertsprintf("%.*f", floatPlaces, value);
	}
	else {
		insertsprintf("%f", value);
 80a2ff8:	f7ff bf27 	b.w	80a2e4a <_ZN10JsonWriter13insertsprintfEPKcz>
 80a2ffc:	080aa06c 	.word	0x080aa06c
 80a3000:	080aa071 	.word	0x080aa071

080a3004 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>:

/**
 * Parse JSON string and fill tokens.
 */
int jsmn_parse(jsmn_parser *parser, const char *js, size_t len,
		jsmntok_t *tokens, unsigned int num_tokens) {
 80a3004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int r;
	int i;
	jsmntok_t *token;
	int count = parser->toknext;
 80a3008:	6844      	ldr	r4, [r0, #4]
	jsmntok_t *tok;
	if (parser->toknext >= num_tokens) {
		return NULL;
	}
	tok = &tokens[parser->toknext++];
	tok->start = tok->end = -1;
 80a300a:	f04f 35ff 	mov.w	r5, #4294967295
/**
 * Fills token type and boundaries.
 */
static void jsmn_fill_token(jsmntok_t *token, jsmntype_t type,
                            int start, int end) {
	token->type = type;
 80a300e:	f04f 0e03 	mov.w	lr, #3
	int r;
	int i;
	jsmntok_t *token;
	int count = parser->toknext;

	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 80a3012:	f8d0 c000 	ldr.w	ip, [r0]
 80a3016:	4594      	cmp	ip, r2
 80a3018:	f080 819d 	bcs.w	80a3356 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x352>
 80a301c:	f811 800c 	ldrb.w	r8, [r1, ip]
 80a3020:	f1b8 0f00 	cmp.w	r8, #0
 80a3024:	f000 8197 	beq.w	80a3356 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x352>
		char c;
		jsmntype_t type;

		c = js[parser->pos];
		switch (c) {
 80a3028:	f1b8 0f2c 	cmp.w	r8, #44	; 0x2c
 80a302c:	f000 8116 	beq.w	80a325c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x258>
 80a3030:	d818      	bhi.n	80a3064 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x60>
 80a3032:	f1b8 0f0d 	cmp.w	r8, #13
 80a3036:	f000 818a 	beq.w	80a334e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x34a>
 80a303a:	d806      	bhi.n	80a304a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x46>
 80a303c:	f1a8 0809 	sub.w	r8, r8, #9
 80a3040:	f1b8 0f01 	cmp.w	r8, #1
 80a3044:	f240 8183 	bls.w	80a334e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x34a>
 80a3048:	e13d      	b.n	80a32c6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2c2>
 80a304a:	f1b8 0f20 	cmp.w	r8, #32
 80a304e:	f000 817e 	beq.w	80a334e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x34a>
 80a3052:	f1b8 0f22 	cmp.w	r8, #34	; 0x22
 80a3056:	f040 8136 	bne.w	80a32c6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2c2>
		size_t len, jsmntok_t *tokens, size_t num_tokens) {
	jsmntok_t *token;

	int start = parser->pos;

	parser->pos++;
 80a305a:	f10c 0901 	add.w	r9, ip, #1
 80a305e:	f8c0 9000 	str.w	r9, [r0]
 80a3062:	e092      	b.n	80a318a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x186>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
		char c;
		jsmntype_t type;

		c = js[parser->pos];
		switch (c) {
 80a3064:	f1b8 0f5d 	cmp.w	r8, #93	; 0x5d
 80a3068:	d03c      	beq.n	80a30e4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xe0>
 80a306a:	d807      	bhi.n	80a307c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x78>
 80a306c:	f1b8 0f3a 	cmp.w	r8, #58	; 0x3a
 80a3070:	f000 80f0 	beq.w	80a3254 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x250>
 80a3074:	f1b8 0f5b 	cmp.w	r8, #91	; 0x5b
 80a3078:	d007      	beq.n	80a308a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x86>
 80a307a:	e124      	b.n	80a32c6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2c2>
 80a307c:	f1b8 0f7b 	cmp.w	r8, #123	; 0x7b
 80a3080:	d003      	beq.n	80a308a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x86>
 80a3082:	f1b8 0f7d 	cmp.w	r8, #125	; 0x7d
 80a3086:	d02d      	beq.n	80a30e4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xe0>
 80a3088:	e11d      	b.n	80a32c6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2c2>
			case '{': case '[':
				count++;
 80a308a:	3401      	adds	r4, #1
				if (tokens == NULL) {
 80a308c:	2b00      	cmp	r3, #0
 80a308e:	f000 815e 	beq.w	80a334e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x34a>
 * Allocates a fresh unused token from the token pull.
 */
static jsmntok_t *jsmn_alloc_token(jsmn_parser *parser,
		jsmntok_t *tokens, size_t num_tokens) {
	jsmntok_t *tok;
	if (parser->toknext >= num_tokens) {
 80a3092:	6847      	ldr	r7, [r0, #4]
 80a3094:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80a3096:	42be      	cmp	r6, r7
 80a3098:	f240 817c 	bls.w	80a3394 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x390>
		return NULL;
	}
	tok = &tokens[parser->toknext++];
 80a309c:	f107 0c01 	add.w	ip, r7, #1
 80a30a0:	f8c0 c004 	str.w	ip, [r0, #4]
 80a30a4:	ea4f 1c07 	mov.w	ip, r7, lsl #4
 80a30a8:	eb03 0a0c 	add.w	sl, r3, ip
	tok->start = tok->end = -1;
	tok->size = 0;
 80a30ac:	2600      	movs	r6, #0
	jsmntok_t *tok;
	if (parser->toknext >= num_tokens) {
		return NULL;
	}
	tok = &tokens[parser->toknext++];
	tok->start = tok->end = -1;
 80a30ae:	f8ca 5004 	str.w	r5, [sl, #4]
	tok->size = 0;
 80a30b2:	f8ca 600c 	str.w	r6, [sl, #12]
	jsmntok_t *tok;
	if (parser->toknext >= num_tokens) {
		return NULL;
	}
	tok = &tokens[parser->toknext++];
	tok->start = tok->end = -1;
 80a30b6:	f8ca 5008 	str.w	r5, [sl, #8]
					break;
				}
				token = jsmn_alloc_token(parser, tokens, num_tokens);
				if (token == NULL)
					return JSMN_ERROR_NOMEM;
				if (parser->toksuper != -1) {
 80a30ba:	6887      	ldr	r7, [r0, #8]
 80a30bc:	1c7e      	adds	r6, r7, #1
					tokens[parser->toksuper].size++;
 80a30be:	bf1f      	itttt	ne
 80a30c0:	eb03 1907 	addne.w	r9, r3, r7, lsl #4
 80a30c4:	f8d9 700c 	ldrne.w	r7, [r9, #12]
 80a30c8:	3701      	addne	r7, #1
 80a30ca:	f8c9 700c 	strne.w	r7, [r9, #12]
#ifdef JSMN_PARENT_LINKS
					token->parent = parser->toksuper;
#endif
				}
				token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
 80a30ce:	f1b8 0f7b 	cmp.w	r8, #123	; 0x7b
 80a30d2:	bf14      	ite	ne
 80a30d4:	2702      	movne	r7, #2
 80a30d6:	2701      	moveq	r7, #1
 80a30d8:	f803 700c 	strb.w	r7, [r3, ip]
				token->start = parser->pos;
 80a30dc:	6807      	ldr	r7, [r0, #0]
 80a30de:	f8ca 7004 	str.w	r7, [sl, #4]
 80a30e2:	e0b7      	b.n	80a3254 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x250>
				parser->toksuper = parser->toknext - 1;
				break;
			case '}': case ']':
				if (tokens == NULL)
 80a30e4:	2b00      	cmp	r3, #0
 80a30e6:	f000 8132 	beq.w	80a334e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x34a>
						break;
					}
					token = &tokens[token->parent];
				}
#else
				for (i = parser->toknext - 1; i >= 0; i--) {
 80a30ea:	6847      	ldr	r7, [r0, #4]
				parser->toksuper = parser->toknext - 1;
				break;
			case '}': case ']':
				if (tokens == NULL)
					break;
				type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
 80a30ec:	f1b8 0f7d 	cmp.w	r8, #125	; 0x7d
 80a30f0:	f107 5880 	add.w	r8, r7, #268435456	; 0x10000000
 80a30f4:	f108 38ff 	add.w	r8, r8, #4294967295
 80a30f8:	bf14      	ite	ne
 80a30fa:	f04f 0a02 	movne.w	sl, #2
 80a30fe:	f04f 0a01 	moveq.w	sl, #1
						break;
					}
					token = &tokens[token->parent];
				}
#else
				for (i = parser->toknext - 1; i >= 0; i--) {
 80a3102:	f107 39ff 	add.w	r9, r7, #4294967295
 80a3106:	eb03 1808 	add.w	r8, r3, r8, lsl #4
 80a310a:	f1b9 0f00 	cmp.w	r9, #0
 80a310e:	db19      	blt.n	80a3144 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x140>
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
 80a3110:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80a3114:	3701      	adds	r7, #1
 80a3116:	d010      	beq.n	80a313a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x136>
 80a3118:	f8d8 7008 	ldr.w	r7, [r8, #8]
 80a311c:	1c7e      	adds	r6, r7, #1
 80a311e:	d10c      	bne.n	80a313a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x136>
						if (token->type != type) {
 80a3120:	f898 b000 	ldrb.w	fp, [r8]
 80a3124:	45d3      	cmp	fp, sl
 80a3126:	f040 8128 	bne.w	80a337a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x376>
							return JSMN_ERROR_INVAL;
						}
						parser->toksuper = -1;
 80a312a:	6087      	str	r7, [r0, #8]
						token->end = parser->pos + 1;
 80a312c:	f10c 0701 	add.w	r7, ip, #1
 80a3130:	f8c8 7008 	str.w	r7, [r8, #8]
 80a3134:	eb03 1c09 	add.w	ip, r3, r9, lsl #4
 80a3138:	e011      	b.n	80a315e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x15a>
						break;
					}
					token = &tokens[token->parent];
				}
#else
				for (i = parser->toknext - 1; i >= 0; i--) {
 80a313a:	f109 39ff 	add.w	r9, r9, #4294967295
 80a313e:	f1a8 0810 	sub.w	r8, r8, #16
 80a3142:	e7e2      	b.n	80a310a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x106>
						token->end = parser->pos + 1;
						break;
					}
				}
				/* Error if unmatched closing bracket */
				if (i == -1) return JSMN_ERROR_INVAL;
 80a3144:	f1b9 3fff 	cmp.w	r9, #4294967295
 80a3148:	f040 8101 	bne.w	80a334e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x34a>
 80a314c:	e115      	b.n	80a337a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x376>
				for (; i >= 0; i--) {
 80a314e:	f109 39ff 	add.w	r9, r9, #4294967295
 80a3152:	f1b9 3fff 	cmp.w	r9, #4294967295
 80a3156:	f1ac 0c10 	sub.w	ip, ip, #16
 80a315a:	f000 80f8 	beq.w	80a334e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x34a>
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
 80a315e:	f8dc 7004 	ldr.w	r7, [ip, #4]
 80a3162:	3701      	adds	r7, #1
 80a3164:	d0f3      	beq.n	80a314e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x14a>
 80a3166:	f8dc 7008 	ldr.w	r7, [ip, #8]
 80a316a:	3701      	adds	r7, #1
 80a316c:	d1ef      	bne.n	80a314e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x14a>
						parser->toksuper = i;
 80a316e:	f8c0 9008 	str.w	r9, [r0, #8]
						break;
 80a3172:	e0ec      	b.n	80a334e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x34a>
	int start = parser->pos;

	parser->pos++;

	/* Skip starting quote */
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 80a3174:	f811 7008 	ldrb.w	r7, [r1, r8]
 80a3178:	2f00      	cmp	r7, #0
 80a317a:	d068      	beq.n	80a324e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x24a>
		char c = js[parser->pos];

		/* Quote: end of string */
		if (c == '\"') {
 80a317c:	2f22      	cmp	r7, #34	; 0x22
 80a317e:	d009      	beq.n	80a3194 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x190>
#endif
			return 0;
		}

		/* Backslash: Quoted symbol expected */
		if (c == '\\' && parser->pos + 1 < len) {
 80a3180:	2f5c      	cmp	r7, #92	; 0x5c
 80a3182:	d026      	beq.n	80a31d2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1ce>
	int start = parser->pos;

	parser->pos++;

	/* Skip starting quote */
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 80a3184:	6807      	ldr	r7, [r0, #0]
 80a3186:	3701      	adds	r7, #1
 80a3188:	6007      	str	r7, [r0, #0]
 80a318a:	f8d0 8000 	ldr.w	r8, [r0]
 80a318e:	4542      	cmp	r2, r8
 80a3190:	d8f0      	bhi.n	80a3174 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x170>
 80a3192:	e05c      	b.n	80a324e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x24a>
		char c = js[parser->pos];

		/* Quote: end of string */
		if (c == '\"') {
			if (tokens == NULL) {
 80a3194:	2b00      	cmp	r3, #0
 80a3196:	f000 80ce 	beq.w	80a3336 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x332>
 * Allocates a fresh unused token from the token pull.
 */
static jsmntok_t *jsmn_alloc_token(jsmn_parser *parser,
		jsmntok_t *tokens, size_t num_tokens) {
	jsmntok_t *tok;
	if (parser->toknext >= num_tokens) {
 80a319a:	6847      	ldr	r7, [r0, #4]
 80a319c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80a319e:	42be      	cmp	r6, r7
 80a31a0:	f240 80f6 	bls.w	80a3390 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x38c>
		return NULL;
	}
	tok = &tokens[parser->toknext++];
 80a31a4:	f107 0c01 	add.w	ip, r7, #1
 80a31a8:	013f      	lsls	r7, r7, #4
 80a31aa:	f8c0 c004 	str.w	ip, [r0, #4]
	tok->start = tok->end = -1;
	tok->size = 0;
 80a31ae:	2600      	movs	r6, #0
		jsmntok_t *tokens, size_t num_tokens) {
	jsmntok_t *tok;
	if (parser->toknext >= num_tokens) {
		return NULL;
	}
	tok = &tokens[parser->toknext++];
 80a31b0:	eb03 0c07 	add.w	ip, r3, r7
	tok->start = tok->end = -1;
 80a31b4:	f8cc 5008 	str.w	r5, [ip, #8]
 80a31b8:	f8cc 5004 	str.w	r5, [ip, #4]
	tok->size = 0;
 80a31bc:	f8cc 600c 	str.w	r6, [ip, #12]
			token = jsmn_alloc_token(parser, tokens, num_tokens);
			if (token == NULL) {
				parser->pos = start;
				return JSMN_ERROR_NOMEM;
			}
			jsmn_fill_token(token, JSMN_STRING, start+1, parser->pos);
 80a31c0:	f8d0 8000 	ldr.w	r8, [r0]
/**
 * Fills token type and boundaries.
 */
static void jsmn_fill_token(jsmntok_t *token, jsmntype_t type,
                            int start, int end) {
	token->type = type;
 80a31c4:	f803 e007 	strb.w	lr, [r3, r7]
	token->start = start;
 80a31c8:	f8cc 9004 	str.w	r9, [ip, #4]
	token->end = end;
 80a31cc:	f8cc 8008 	str.w	r8, [ip, #8]
 80a31d0:	e0b1      	b.n	80a3336 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x332>
#endif
			return 0;
		}

		/* Backslash: Quoted symbol expected */
		if (c == '\\' && parser->pos + 1 < len) {
 80a31d2:	f108 0701 	add.w	r7, r8, #1
 80a31d6:	42ba      	cmp	r2, r7
 80a31d8:	d9d4      	bls.n	80a3184 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x180>
			int i;
			parser->pos++;
 80a31da:	6007      	str	r7, [r0, #0]
			switch (js[parser->pos]) {
 80a31dc:	5dcf      	ldrb	r7, [r1, r7]
 80a31de:	2f66      	cmp	r7, #102	; 0x66
 80a31e0:	d0d0      	beq.n	80a3184 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x180>
 80a31e2:	d808      	bhi.n	80a31f6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1f2>
 80a31e4:	2f2f      	cmp	r7, #47	; 0x2f
 80a31e6:	d0cd      	beq.n	80a3184 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x180>
 80a31e8:	d801      	bhi.n	80a31ee <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1ea>
 80a31ea:	2f22      	cmp	r7, #34	; 0x22
 80a31ec:	e007      	b.n	80a31fe <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1fa>
 80a31ee:	2f5c      	cmp	r7, #92	; 0x5c
 80a31f0:	d0c8      	beq.n	80a3184 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x180>
 80a31f2:	2f62      	cmp	r7, #98	; 0x62
 80a31f4:	e003      	b.n	80a31fe <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1fa>
 80a31f6:	2f72      	cmp	r7, #114	; 0x72
 80a31f8:	d0c4      	beq.n	80a3184 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x180>
 80a31fa:	d802      	bhi.n	80a3202 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1fe>
 80a31fc:	2f6e      	cmp	r7, #110	; 0x6e
 80a31fe:	d175      	bne.n	80a32ec <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2e8>
 80a3200:	e7c0      	b.n	80a3184 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x180>
 80a3202:	2f74      	cmp	r7, #116	; 0x74
 80a3204:	d0be      	beq.n	80a3184 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x180>
 80a3206:	2f75      	cmp	r7, #117	; 0x75
 80a3208:	d170      	bne.n	80a32ec <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2e8>
				case '\"': case '/' : case '\\' : case 'b' :
				case 'f' : case 'r' : case 'n'  : case 't' :
					break;
				/* Allows escaped symbol \uXXXX */
				case 'u':
					parser->pos++;
 80a320a:	f108 0702 	add.w	r7, r8, #2
 80a320e:	6007      	str	r7, [r0, #0]
 80a3210:	f04f 0a04 	mov.w	sl, #4
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
 80a3214:	f8d0 8000 	ldr.w	r8, [r0]
 80a3218:	4542      	cmp	r2, r8
 80a321a:	d803      	bhi.n	80a3224 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x220>
							parser->pos = start;
							return JSMN_ERROR_INVAL;
						}
						parser->pos++;
					}
					parser->pos--;
 80a321c:	6807      	ldr	r7, [r0, #0]
 80a321e:	3f01      	subs	r7, #1
 80a3220:	6007      	str	r7, [r0, #0]
 80a3222:	e7af      	b.n	80a3184 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x180>
				case 'f' : case 'r' : case 'n'  : case 't' :
					break;
				/* Allows escaped symbol \uXXXX */
				case 'u':
					parser->pos++;
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
 80a3224:	f811 7008 	ldrb.w	r7, [r1, r8]
 80a3228:	2f00      	cmp	r7, #0
 80a322a:	d0f7      	beq.n	80a321c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x218>
						/* If it isn't a hex character we have an error */
						if(!((js[parser->pos] >= 48 && js[parser->pos] <= 57) || /* 0-9 */
 80a322c:	f1a7 0b30 	sub.w	fp, r7, #48	; 0x30
 80a3230:	f1bb 0f09 	cmp.w	fp, #9
 80a3234:	d904      	bls.n	80a3240 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x23c>
 80a3236:	f027 0720 	bic.w	r7, r7, #32
 80a323a:	3f41      	subs	r7, #65	; 0x41
 80a323c:	2f05      	cmp	r7, #5
 80a323e:	d855      	bhi.n	80a32ec <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2e8>
									(js[parser->pos] >= 65 && js[parser->pos] <= 70) || /* A-F */
									(js[parser->pos] >= 97 && js[parser->pos] <= 102))) { /* a-f */
							parser->pos = start;
							return JSMN_ERROR_INVAL;
						}
						parser->pos++;
 80a3240:	f108 0701 	add.w	r7, r8, #1
				case 'f' : case 'r' : case 'n'  : case 't' :
					break;
				/* Allows escaped symbol \uXXXX */
				case 'u':
					parser->pos++;
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
 80a3244:	f1ba 0a01 	subs.w	sl, sl, #1
									(js[parser->pos] >= 65 && js[parser->pos] <= 70) || /* A-F */
									(js[parser->pos] >= 97 && js[parser->pos] <= 102))) { /* a-f */
							parser->pos = start;
							return JSMN_ERROR_INVAL;
						}
						parser->pos++;
 80a3248:	6007      	str	r7, [r0, #0]
				case 'f' : case 'r' : case 'n'  : case 't' :
					break;
				/* Allows escaped symbol \uXXXX */
				case 'u':
					parser->pos++;
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
 80a324a:	d1e3      	bne.n	80a3214 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x210>
 80a324c:	e7e6      	b.n	80a321c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x218>
					parser->pos = start;
					return JSMN_ERROR_INVAL;
			}
		}
	}
	parser->pos = start;
 80a324e:	f8c0 c000 	str.w	ip, [r0]
 80a3252:	e099      	b.n	80a3388 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x384>
					tokens[parser->toksuper].size++;
				break;
			case '\t' : case '\r' : case '\n' : case ' ':
				break;
			case ':':
				parser->toksuper = parser->toknext - 1;
 80a3254:	6847      	ldr	r7, [r0, #4]
 80a3256:	3f01      	subs	r7, #1
 80a3258:	6087      	str	r7, [r0, #8]
				break;
 80a325a:	e078      	b.n	80a334e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x34a>
			case ',':
				if (tokens != NULL && parser->toksuper != -1 &&
 80a325c:	2b00      	cmp	r3, #0
 80a325e:	d076      	beq.n	80a334e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x34a>
 80a3260:	6887      	ldr	r7, [r0, #8]
 80a3262:	1c7e      	adds	r6, r7, #1
 80a3264:	d073      	beq.n	80a334e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x34a>
						tokens[parser->toksuper].type != JSMN_ARRAY &&
 80a3266:	013f      	lsls	r7, r7, #4
 80a3268:	5ddf      	ldrb	r7, [r3, r7]
 80a326a:	3f01      	subs	r7, #1
 80a326c:	2f01      	cmp	r7, #1
 80a326e:	d96e      	bls.n	80a334e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x34a>
						tokens[parser->toksuper].type != JSMN_OBJECT) {
#ifdef JSMN_PARENT_LINKS
					parser->toksuper = tokens[parser->toksuper].parent;
#else
					for (i = parser->toknext - 1; i >= 0; i--) {
 80a3270:	6847      	ldr	r7, [r0, #4]
 80a3272:	f107 38ff 	add.w	r8, r7, #4294967295
 80a3276:	eb03 1c07 	add.w	ip, r3, r7, lsl #4
 80a327a:	f1b8 0f00 	cmp.w	r8, #0
 80a327e:	db66      	blt.n	80a334e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x34a>
						if (tokens[i].type == JSMN_ARRAY || tokens[i].type == JSMN_OBJECT) {
 80a3280:	f81c 7c10 	ldrb.w	r7, [ip, #-16]
 80a3284:	3f01      	subs	r7, #1
 80a3286:	2f01      	cmp	r7, #1
 80a3288:	d80a      	bhi.n	80a32a0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x29c>
							if (tokens[i].start != -1 && tokens[i].end == -1) {
 80a328a:	f85c 7c0c 	ldr.w	r7, [ip, #-12]
 80a328e:	3701      	adds	r7, #1
 80a3290:	d006      	beq.n	80a32a0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x29c>
 80a3292:	f85c 7c08 	ldr.w	r7, [ip, #-8]
 80a3296:	3701      	adds	r7, #1
 80a3298:	d102      	bne.n	80a32a0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x29c>
								parser->toksuper = i;
 80a329a:	f8c0 8008 	str.w	r8, [r0, #8]
								break;
 80a329e:	e056      	b.n	80a334e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x34a>
						tokens[parser->toksuper].type != JSMN_ARRAY &&
						tokens[parser->toksuper].type != JSMN_OBJECT) {
#ifdef JSMN_PARENT_LINKS
					parser->toksuper = tokens[parser->toksuper].parent;
#else
					for (i = parser->toknext - 1; i >= 0; i--) {
 80a32a0:	f108 38ff 	add.w	r8, r8, #4294967295
 80a32a4:	f1ac 0c10 	sub.w	ip, ip, #16
 80a32a8:	e7e7      	b.n	80a327a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x276>
	jsmntok_t *token;
	int start;

	start = parser->pos;

	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 80a32aa:	f811 7008 	ldrb.w	r7, [r1, r8]
 80a32ae:	b307      	cbz	r7, 80a32f2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ee>
		switch (js[parser->pos]) {
 80a32b0:	2f20      	cmp	r7, #32
 80a32b2:	d01e      	beq.n	80a32f2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ee>
 80a32b4:	d810      	bhi.n	80a32d8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2d4>
 80a32b6:	2f09      	cmp	r7, #9
 80a32b8:	d20a      	bcs.n	80a32d0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2cc>
#endif
			case '\t' : case '\r' : case '\n' : case ' ' :
			case ','  : case ']'  : case '}' :
				goto found;
		}
		if (js[parser->pos] < 32 || js[parser->pos] >= 127) {
 80a32ba:	3f20      	subs	r7, #32
 80a32bc:	2f5e      	cmp	r7, #94	; 0x5e
 80a32be:	d815      	bhi.n	80a32ec <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2e8>
	jsmntok_t *token;
	int start;

	start = parser->pos;

	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 80a32c0:	f108 0701 	add.w	r7, r8, #1
 80a32c4:	6007      	str	r7, [r0, #0]
 80a32c6:	f8d0 8000 	ldr.w	r8, [r0]
 80a32ca:	4542      	cmp	r2, r8
 80a32cc:	d8ed      	bhi.n	80a32aa <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2a6>
 80a32ce:	e010      	b.n	80a32f2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ee>
		switch (js[parser->pos]) {
 80a32d0:	2f0a      	cmp	r7, #10
 80a32d2:	d90e      	bls.n	80a32f2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ee>
 80a32d4:	2f0d      	cmp	r7, #13
 80a32d6:	e007      	b.n	80a32e8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2e4>
 80a32d8:	2f3a      	cmp	r7, #58	; 0x3a
 80a32da:	d00a      	beq.n	80a32f2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ee>
 80a32dc:	d801      	bhi.n	80a32e2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2de>
 80a32de:	2f2c      	cmp	r7, #44	; 0x2c
 80a32e0:	e002      	b.n	80a32e8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2e4>
 80a32e2:	2f5d      	cmp	r7, #93	; 0x5d
 80a32e4:	d005      	beq.n	80a32f2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ee>
 80a32e6:	2f7d      	cmp	r7, #125	; 0x7d
 80a32e8:	d1e7      	bne.n	80a32ba <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2b6>
 80a32ea:	e002      	b.n	80a32f2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ee>
			case '\t' : case '\r' : case '\n' : case ' ' :
			case ','  : case ']'  : case '}' :
				goto found;
		}
		if (js[parser->pos] < 32 || js[parser->pos] >= 127) {
			parser->pos = start;
 80a32ec:	f8c0 c000 	str.w	ip, [r0]
 80a32f0:	e043      	b.n	80a337a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x376>
	parser->pos = start;
	return JSMN_ERROR_PART;
#endif

found:
	if (tokens == NULL) {
 80a32f2:	b913      	cbnz	r3, 80a32fa <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2f6>
		parser->pos--;
 80a32f4:	f108 37ff 	add.w	r7, r8, #4294967295
 80a32f8:	e01c      	b.n	80a3334 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x330>
 * Allocates a fresh unused token from the token pull.
 */
static jsmntok_t *jsmn_alloc_token(jsmn_parser *parser,
		jsmntok_t *tokens, size_t num_tokens) {
	jsmntok_t *tok;
	if (parser->toknext >= num_tokens) {
 80a32fa:	6847      	ldr	r7, [r0, #4]
 80a32fc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80a32fe:	42be      	cmp	r6, r7
 80a3300:	d946      	bls.n	80a3390 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x38c>
		return NULL;
	}
	tok = &tokens[parser->toknext++];
 80a3302:	f107 0801 	add.w	r8, r7, #1
 80a3306:	013f      	lsls	r7, r7, #4
 80a3308:	f8c0 8004 	str.w	r8, [r0, #4]
	tok->start = tok->end = -1;
	tok->size = 0;
 80a330c:	2600      	movs	r6, #0
		jsmntok_t *tokens, size_t num_tokens) {
	jsmntok_t *tok;
	if (parser->toknext >= num_tokens) {
		return NULL;
	}
	tok = &tokens[parser->toknext++];
 80a330e:	eb03 0807 	add.w	r8, r3, r7
	tok->start = tok->end = -1;
	tok->size = 0;
 80a3312:	f8c8 600c 	str.w	r6, [r8, #12]
/**
 * Fills token type and boundaries.
 */
static void jsmn_fill_token(jsmntok_t *token, jsmntype_t type,
                            int start, int end) {
	token->type = type;
 80a3316:	f04f 0604 	mov.w	r6, #4
	jsmntok_t *tok;
	if (parser->toknext >= num_tokens) {
		return NULL;
	}
	tok = &tokens[parser->toknext++];
	tok->start = tok->end = -1;
 80a331a:	f8c8 5008 	str.w	r5, [r8, #8]
 80a331e:	f8c8 5004 	str.w	r5, [r8, #4]
	token = jsmn_alloc_token(parser, tokens, num_tokens);
	if (token == NULL) {
		parser->pos = start;
		return JSMN_ERROR_NOMEM;
	}
	jsmn_fill_token(token, JSMN_PRIMITIVE, start, parser->pos);
 80a3322:	f8d0 9000 	ldr.w	r9, [r0]
/**
 * Fills token type and boundaries.
 */
static void jsmn_fill_token(jsmntok_t *token, jsmntype_t type,
                            int start, int end) {
	token->type = type;
 80a3326:	55de      	strb	r6, [r3, r7]
	token->start = start;
 80a3328:	f8c8 c004 	str.w	ip, [r8, #4]
	token->end = end;
 80a332c:	f8c8 9008 	str.w	r9, [r8, #8]
	}
	jsmn_fill_token(token, JSMN_PRIMITIVE, start, parser->pos);
#ifdef JSMN_PARENT_LINKS
	token->parent = parser->toksuper;
#endif
	parser->pos--;
 80a3330:	6807      	ldr	r7, [r0, #0]
 80a3332:	3f01      	subs	r7, #1
 80a3334:	6007      	str	r7, [r0, #0]
			default:
#endif
				r = jsmn_parse_primitive(parser, js, len, tokens, num_tokens);
				if (r < 0) return r;
				count++;
				if (parser->toksuper != -1 && tokens != NULL)
 80a3336:	6887      	ldr	r7, [r0, #8]
			/* In non-strict mode every unquoted value is a primitive */
			default:
#endif
				r = jsmn_parse_primitive(parser, js, len, tokens, num_tokens);
				if (r < 0) return r;
				count++;
 80a3338:	3401      	adds	r4, #1
				if (parser->toksuper != -1 && tokens != NULL)
 80a333a:	1c7e      	adds	r6, r7, #1
 80a333c:	d007      	beq.n	80a334e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x34a>
 80a333e:	b133      	cbz	r3, 80a334e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x34a>
					tokens[parser->toksuper].size++;
 80a3340:	eb03 1c07 	add.w	ip, r3, r7, lsl #4
 80a3344:	f8dc 700c 	ldr.w	r7, [ip, #12]
 80a3348:	3701      	adds	r7, #1
 80a334a:	f8cc 700c 	str.w	r7, [ip, #12]
	int r;
	int i;
	jsmntok_t *token;
	int count = parser->toknext;

	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 80a334e:	6807      	ldr	r7, [r0, #0]
 80a3350:	3701      	adds	r7, #1
 80a3352:	6007      	str	r7, [r0, #0]
 80a3354:	e65d      	b.n	80a3012 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xe>
				return JSMN_ERROR_INVAL;
#endif
		}
	}

	if (tokens != NULL) {
 80a3356:	b1a3      	cbz	r3, 80a3382 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x37e>
		for (i = parser->toknext - 1; i >= 0; i--) {
 80a3358:	6842      	ldr	r2, [r0, #4]
 80a335a:	1e51      	subs	r1, r2, #1
 80a335c:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 80a3360:	2900      	cmp	r1, #0
 80a3362:	db0e      	blt.n	80a3382 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x37e>
			/* Unmatched opened object or array */
			if (tokens[i].start != -1 && tokens[i].end == -1) {
 80a3364:	f853 2c0c 	ldr.w	r2, [r3, #-12]
 80a3368:	3201      	adds	r2, #1
 80a336a:	d003      	beq.n	80a3374 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x370>
 80a336c:	f853 2c08 	ldr.w	r2, [r3, #-8]
 80a3370:	3201      	adds	r2, #1
 80a3372:	d009      	beq.n	80a3388 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x384>
#endif
		}
	}

	if (tokens != NULL) {
		for (i = parser->toknext - 1; i >= 0; i--) {
 80a3374:	3901      	subs	r1, #1
 80a3376:	3b10      	subs	r3, #16
 80a3378:	e7f2      	b.n	80a3360 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x35c>
#else
				for (i = parser->toknext - 1; i >= 0; i--) {
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
						if (token->type != type) {
							return JSMN_ERROR_INVAL;
 80a337a:	f06f 0001 	mvn.w	r0, #1
 80a337e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a3382:	4620      	mov	r0, r4
 80a3384:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

	if (tokens != NULL) {
		for (i = parser->toknext - 1; i >= 0; i--) {
			/* Unmatched opened object or array */
			if (tokens[i].start != -1 && tokens[i].end == -1) {
				return JSMN_ERROR_PART;
 80a3388:	f06f 0002 	mvn.w	r0, #2
 80a338c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		parser->pos--;
		return 0;
	}
	token = jsmn_alloc_token(parser, tokens, num_tokens);
	if (token == NULL) {
		parser->pos = start;
 80a3390:	f8c0 c000 	str.w	ip, [r0]
		return JSMN_ERROR_NOMEM;
 80a3394:	f04f 30ff 	mov.w	r0, #4294967295
 80a3398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a339c <_ZN10JsonParser5parseEv>:
	else {
		return false;
	}
}

bool JsonParser::parse() {
 80a339c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (offset == 0) {
 80a339e:	68c2      	ldr	r2, [r0, #12]
	else {
		return false;
	}
}

bool JsonParser::parse() {
 80a33a0:	4604      	mov	r4, r0
	if (offset == 0) {
 80a33a2:	b90a      	cbnz	r2, 80a33a8 <_ZN10JsonParser5parseEv+0xc>
		// If addString or addData is not called, or called with an empty string,
		// do not return true, see issue #7.
		return false;
 80a33a4:	2000      	movs	r0, #0
 80a33a6:	e048      	b.n	80a343a <_ZN10JsonParser5parseEv+0x9e>
	}

	if (tokens) {
 80a33a8:	6943      	ldr	r3, [r0, #20]
 80a33aa:	f100 0620 	add.w	r6, r0, #32
 80a33ae:	b1e3      	cbz	r3, 80a33ea <_ZN10JsonParser5parseEv+0x4e>
/**
 * Creates a new parser based over a given  buffer with an array of tokens
 * available.
 */
void jsmn_init(jsmn_parser *parser) {
	parser->pos = 0;
 80a33b0:	2100      	movs	r1, #0
 80a33b2:	6201      	str	r1, [r0, #32]
	parser->toknext = 0;
 80a33b4:	6241      	str	r1, [r0, #36]	; 0x24
	parser->toksuper = -1;
 80a33b6:	f04f 31ff 	mov.w	r1, #4294967295
 80a33ba:	6281      	str	r1, [r0, #40]	; 0x28
	}

	if (tokens) {
		// Try to use the existing token buffer if possible
		JsonParserGeneratorRK::jsmn_init(&parser);
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
 80a33bc:	69c1      	ldr	r1, [r0, #28]
 80a33be:	9100      	str	r1, [sp, #0]
 80a33c0:	6841      	ldr	r1, [r0, #4]
 80a33c2:	4630      	mov	r0, r6
 80a33c4:	f7ff fe1e 	bl	80a3004 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
		if (result == JsonParserGeneratorRK::JSMN_ERROR_NOMEM) {
 80a33c8:	1c43      	adds	r3, r0, #1
 80a33ca:	d108      	bne.n	80a33de <_ZN10JsonParser5parseEv+0x42>
			if (staticBuffers) {
 80a33cc:	7c25      	ldrb	r5, [r4, #16]
 80a33ce:	2d00      	cmp	r5, #0
 80a33d0:	d1e8      	bne.n	80a33a4 <_ZN10JsonParser5parseEv+0x8>
				// If using static buffers and there is not enough space, fail
				return false;
			}
			free(tokens);
 80a33d2:	6960      	ldr	r0, [r4, #20]
 80a33d4:	f000 faac 	bl	80a3930 <free>
			tokens = 0;
 80a33d8:	6165      	str	r5, [r4, #20]
			maxTokens = 0;
 80a33da:	61e5      	str	r5, [r4, #28]
 80a33dc:	e005      	b.n	80a33ea <_ZN10JsonParser5parseEv+0x4e>
		}
		else
		if (result < 0) {
 80a33de:	2800      	cmp	r0, #0
 80a33e0:	dbe0      	blt.n	80a33a4 <_ZN10JsonParser5parseEv+0x8>
			// Failed to parse: JSMN_ERROR_INVAL or JSMN_ERROR_PART
			return false;
		}
		else {
			tokensEnd = &tokens[result];
 80a33e2:	6963      	ldr	r3, [r4, #20]
 80a33e4:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 80a33e8:	e025      	b.n	80a3436 <_ZN10JsonParser5parseEv+0x9a>
/**
 * Creates a new parser based over a given  buffer with an array of tokens
 * available.
 */
void jsmn_init(jsmn_parser *parser) {
	parser->pos = 0;
 80a33ea:	2500      	movs	r5, #0
	parser->toknext = 0;
	parser->toksuper = -1;
 80a33ec:	f04f 37ff 	mov.w	r7, #4294967295
/**
 * Creates a new parser based over a given  buffer with an array of tokens
 * available.
 */
void jsmn_init(jsmn_parser *parser) {
	parser->pos = 0;
 80a33f0:	6225      	str	r5, [r4, #32]
	parser->toknext = 0;
 80a33f2:	6265      	str	r5, [r4, #36]	; 0x24
	parser->toksuper = -1;
 80a33f4:	62a7      	str	r7, [r4, #40]	; 0x28
		}
	}

	// Pass 1: determine now many tokens we need
	JsonParserGeneratorRK::jsmn_init(&parser);
	int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, 0, 0);
 80a33f6:	9500      	str	r5, [sp, #0]
 80a33f8:	462b      	mov	r3, r5
 80a33fa:	68e2      	ldr	r2, [r4, #12]
 80a33fc:	6861      	ldr	r1, [r4, #4]
 80a33fe:	4630      	mov	r0, r6
 80a3400:	f7ff fe00 	bl	80a3004 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
	if (result < 0) {
 80a3404:	2800      	cmp	r0, #0
 80a3406:	dbcd      	blt.n	80a33a4 <_ZN10JsonParser5parseEv+0x8>
	}

	// If we get here, tokens will always be == 0; it would have been freed if it was
	// too small, and this code is never executed for staticBuffers == true

	maxTokens = (size_t) result;
 80a3408:	61e0      	str	r0, [r4, #28]
	if (maxTokens > 0) {
 80a340a:	d013      	beq.n	80a3434 <_ZN10JsonParser5parseEv+0x98>
		tokens = (JsonParserGeneratorRK::jsmntok_t *)malloc(sizeof(JsonParserGeneratorRK::jsmntok_t) * maxTokens);
 80a340c:	0100      	lsls	r0, r0, #4
 80a340e:	f000 fa87 	bl	80a3920 <malloc>

		JsonParserGeneratorRK::jsmn_init(&parser);
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
 80a3412:	69e2      	ldr	r2, [r4, #28]
	// If we get here, tokens will always be == 0; it would have been freed if it was
	// too small, and this code is never executed for staticBuffers == true

	maxTokens = (size_t) result;
	if (maxTokens > 0) {
		tokens = (JsonParserGeneratorRK::jsmntok_t *)malloc(sizeof(JsonParserGeneratorRK::jsmntok_t) * maxTokens);
 80a3414:	4603      	mov	r3, r0
 80a3416:	6160      	str	r0, [r4, #20]

		JsonParserGeneratorRK::jsmn_init(&parser);
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
 80a3418:	9200      	str	r2, [sp, #0]
/**
 * Creates a new parser based over a given  buffer with an array of tokens
 * available.
 */
void jsmn_init(jsmn_parser *parser) {
	parser->pos = 0;
 80a341a:	6225      	str	r5, [r4, #32]
	parser->toknext = 0;
 80a341c:	6265      	str	r5, [r4, #36]	; 0x24
	parser->toksuper = -1;
 80a341e:	62a7      	str	r7, [r4, #40]	; 0x28
	maxTokens = (size_t) result;
	if (maxTokens > 0) {
		tokens = (JsonParserGeneratorRK::jsmntok_t *)malloc(sizeof(JsonParserGeneratorRK::jsmntok_t) * maxTokens);

		JsonParserGeneratorRK::jsmn_init(&parser);
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
 80a3420:	68e2      	ldr	r2, [r4, #12]
 80a3422:	6861      	ldr	r1, [r4, #4]
 80a3424:	4630      	mov	r0, r6
 80a3426:	f7ff fded 	bl	80a3004 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>

		tokensEnd = &tokens[result];
 80a342a:	6963      	ldr	r3, [r4, #20]
 80a342c:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 80a3430:	61a0      	str	r0, [r4, #24]
 80a3432:	e001      	b.n	80a3438 <_ZN10JsonParser5parseEv+0x9c>
	}
	else {
		tokensEnd = tokens;
 80a3434:	6963      	ldr	r3, [r4, #20]
 80a3436:	61a3      	str	r3, [r4, #24]
	for(const JsonParserGeneratorRK::jsmntok_t *token = tokens; token < tokensEnd; token++) {
		printf("%d, %d, %d, %d\n", token->type, token->start, token->end, token->size);
	}
	*/

	return true;
 80a3438:	2001      	movs	r0, #1
}
 80a343a:	b003      	add	sp, #12
 80a343c:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a343e <_GLOBAL__sub_I__ZN10JsonBufferC2Ev>:
 80a343e:	f000 b801 	b.w	80a3444 <HAL_Pin_Map>
	...

080a3444 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a3444:	b508      	push	{r3, lr}
 80a3446:	4b02      	ldr	r3, [pc, #8]	; (80a3450 <HAL_Pin_Map+0xc>)
 80a3448:	681b      	ldr	r3, [r3, #0]
 80a344a:	681b      	ldr	r3, [r3, #0]
 80a344c:	9301      	str	r3, [sp, #4]
 80a344e:	bd08      	pop	{r3, pc}
 80a3450:	080601b0 	.word	0x080601b0

080a3454 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a3454:	b508      	push	{r3, lr}
 80a3456:	4b02      	ldr	r3, [pc, #8]	; (80a3460 <HAL_Pin_Mode+0xc>)
 80a3458:	681b      	ldr	r3, [r3, #0]
 80a345a:	689b      	ldr	r3, [r3, #8]
 80a345c:	9301      	str	r3, [sp, #4]
 80a345e:	bd08      	pop	{r3, pc}
 80a3460:	080601b0 	.word	0x080601b0

080a3464 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a3464:	b508      	push	{r3, lr}
 80a3466:	4b02      	ldr	r3, [pc, #8]	; (80a3470 <HAL_Get_Pin_Mode+0xc>)
 80a3468:	681b      	ldr	r3, [r3, #0]
 80a346a:	68db      	ldr	r3, [r3, #12]
 80a346c:	9301      	str	r3, [sp, #4]
 80a346e:	bd08      	pop	{r3, pc}
 80a3470:	080601b0 	.word	0x080601b0

080a3474 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a3474:	b508      	push	{r3, lr}
 80a3476:	4b02      	ldr	r3, [pc, #8]	; (80a3480 <HAL_GPIO_Write+0xc>)
 80a3478:	681b      	ldr	r3, [r3, #0]
 80a347a:	691b      	ldr	r3, [r3, #16]
 80a347c:	9301      	str	r3, [sp, #4]
 80a347e:	bd08      	pop	{r3, pc}
 80a3480:	080601b0 	.word	0x080601b0

080a3484 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 80a3484:	b508      	push	{r3, lr}
 80a3486:	4b02      	ldr	r3, [pc, #8]	; (80a3490 <HAL_GPIO_Read+0xc>)
 80a3488:	681b      	ldr	r3, [r3, #0]
 80a348a:	695b      	ldr	r3, [r3, #20]
 80a348c:	9301      	str	r3, [sp, #4]
 80a348e:	bd08      	pop	{r3, pc}
 80a3490:	080601b0 	.word	0x080601b0

080a3494 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
 80a3494:	b508      	push	{r3, lr}
 80a3496:	4b02      	ldr	r3, [pc, #8]	; (80a34a0 <HAL_SPI_Begin+0xc>)
 80a3498:	681b      	ldr	r3, [r3, #0]
 80a349a:	681b      	ldr	r3, [r3, #0]
 80a349c:	9301      	str	r3, [sp, #4]
 80a349e:	bd08      	pop	{r3, pc}
 80a34a0:	080601b4 	.word	0x080601b4

080a34a4 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
 80a34a4:	b508      	push	{r3, lr}
 80a34a6:	4b02      	ldr	r3, [pc, #8]	; (80a34b0 <HAL_SPI_Send_Receive_Data+0xc>)
 80a34a8:	681b      	ldr	r3, [r3, #0]
 80a34aa:	695b      	ldr	r3, [r3, #20]
 80a34ac:	9301      	str	r3, [sp, #4]
 80a34ae:	bd08      	pop	{r3, pc}
 80a34b0:	080601b4 	.word	0x080601b4

080a34b4 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a34b4:	b508      	push	{r3, lr}
 80a34b6:	4b02      	ldr	r3, [pc, #8]	; (80a34c0 <HAL_SPI_Init+0xc>)
 80a34b8:	681b      	ldr	r3, [r3, #0]
 80a34ba:	69db      	ldr	r3, [r3, #28]
 80a34bc:	9301      	str	r3, [sp, #4]
 80a34be:	bd08      	pop	{r3, pc}
 80a34c0:	080601b4 	.word	0x080601b4

080a34c4 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a34c4:	b508      	push	{r3, lr}
 80a34c6:	4b02      	ldr	r3, [pc, #8]	; (80a34d0 <HAL_SPI_Is_Enabled+0xc>)
 80a34c8:	681b      	ldr	r3, [r3, #0]
 80a34ca:	6a1b      	ldr	r3, [r3, #32]
 80a34cc:	9301      	str	r3, [sp, #4]
 80a34ce:	bd08      	pop	{r3, pc}
 80a34d0:	080601b4 	.word	0x080601b4

080a34d4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a34d4:	b508      	push	{r3, lr}
 80a34d6:	4b02      	ldr	r3, [pc, #8]	; (80a34e0 <HAL_RNG_GetRandomNumber+0xc>)
 80a34d8:	681b      	ldr	r3, [r3, #0]
 80a34da:	685b      	ldr	r3, [r3, #4]
 80a34dc:	9301      	str	r3, [sp, #4]
 80a34de:	bd08      	pop	{r3, pc}
 80a34e0:	0806019c 	.word	0x0806019c

080a34e4 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a34e4:	b508      	push	{r3, lr}
 80a34e6:	4b02      	ldr	r3, [pc, #8]	; (80a34f0 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a34e8:	681b      	ldr	r3, [r3, #0]
 80a34ea:	695b      	ldr	r3, [r3, #20]
 80a34ec:	9301      	str	r3, [sp, #4]
 80a34ee:	bd08      	pop	{r3, pc}
 80a34f0:	0806019c 	.word	0x0806019c

080a34f4 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
 80a34f4:	b508      	push	{r3, lr}
 80a34f6:	4b02      	ldr	r3, [pc, #8]	; (80a3500 <HAL_RTC_Get_UnixTime+0xc>)
 80a34f8:	681b      	ldr	r3, [r3, #0]
 80a34fa:	69db      	ldr	r3, [r3, #28]
 80a34fc:	9301      	str	r3, [sp, #4]
 80a34fe:	bd08      	pop	{r3, pc}
 80a3500:	0806019c 	.word	0x0806019c

080a3504 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
 80a3504:	b508      	push	{r3, lr}
 80a3506:	4b02      	ldr	r3, [pc, #8]	; (80a3510 <HAL_RTC_Time_Is_Valid+0xc>)
 80a3508:	681b      	ldr	r3, [r3, #0]
 80a350a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a350c:	9301      	str	r3, [sp, #4]
 80a350e:	bd08      	pop	{r3, pc}
 80a3510:	0806019c 	.word	0x0806019c

080a3514 <HAL_Core_System_Reset_Ex>:
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
 80a3514:	b508      	push	{r3, lr}
 80a3516:	4b02      	ldr	r3, [pc, #8]	; (80a3520 <HAL_Core_System_Reset_Ex+0xc>)
 80a3518:	681b      	ldr	r3, [r3, #0]
 80a351a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a351c:	9301      	str	r3, [sp, #4]
 80a351e:	bd08      	pop	{r3, pc}
 80a3520:	080601b8 	.word	0x080601b8

080a3524 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80a3524:	b508      	push	{r3, lr}
 80a3526:	4b02      	ldr	r3, [pc, #8]	; (80a3530 <os_mutex_recursive_create+0xc>)
 80a3528:	681b      	ldr	r3, [r3, #0]
 80a352a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a352c:	9301      	str	r3, [sp, #4]
 80a352e:	bd08      	pop	{r3, pc}
 80a3530:	080601d0 	.word	0x080601d0

080a3534 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80a3534:	b508      	push	{r3, lr}
 80a3536:	4b02      	ldr	r3, [pc, #8]	; (80a3540 <os_mutex_recursive_destroy+0xc>)
 80a3538:	681b      	ldr	r3, [r3, #0]
 80a353a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a353c:	9301      	str	r3, [sp, #4]
 80a353e:	bd08      	pop	{r3, pc}
 80a3540:	080601d0 	.word	0x080601d0

080a3544 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
 80a3544:	b508      	push	{r3, lr}
 80a3546:	4b02      	ldr	r3, [pc, #8]	; (80a3550 <os_mutex_recursive_lock+0xc>)
 80a3548:	681b      	ldr	r3, [r3, #0]
 80a354a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a354c:	9301      	str	r3, [sp, #4]
 80a354e:	bd08      	pop	{r3, pc}
 80a3550:	080601d0 	.word	0x080601d0

080a3554 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
 80a3554:	b508      	push	{r3, lr}
 80a3556:	4b02      	ldr	r3, [pc, #8]	; (80a3560 <os_mutex_recursive_unlock+0xc>)
 80a3558:	681b      	ldr	r3, [r3, #0]
 80a355a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a355c:	9301      	str	r3, [sp, #4]
 80a355e:	bd08      	pop	{r3, pc}
 80a3560:	080601d0 	.word	0x080601d0

080a3564 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a3564:	b508      	push	{r3, lr}
 80a3566:	4b02      	ldr	r3, [pc, #8]	; (80a3570 <HAL_USART_Init+0xc>)
 80a3568:	681b      	ldr	r3, [r3, #0]
 80a356a:	699b      	ldr	r3, [r3, #24]
 80a356c:	9301      	str	r3, [sp, #4]
 80a356e:	bd08      	pop	{r3, pc}
 80a3570:	080601c4 	.word	0x080601c4

080a3574 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a3574:	b508      	push	{r3, lr}
 80a3576:	4b02      	ldr	r3, [pc, #8]	; (80a3580 <HAL_USART_Write_Data+0xc>)
 80a3578:	681b      	ldr	r3, [r3, #0]
 80a357a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a357c:	9301      	str	r3, [sp, #4]
 80a357e:	bd08      	pop	{r3, pc}
 80a3580:	080601c4 	.word	0x080601c4

080a3584 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a3584:	b508      	push	{r3, lr}
 80a3586:	4b02      	ldr	r3, [pc, #8]	; (80a3590 <HAL_USART_Available_Data+0xc>)
 80a3588:	681b      	ldr	r3, [r3, #0]
 80a358a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a358c:	9301      	str	r3, [sp, #4]
 80a358e:	bd08      	pop	{r3, pc}
 80a3590:	080601c4 	.word	0x080601c4

080a3594 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a3594:	b508      	push	{r3, lr}
 80a3596:	4b02      	ldr	r3, [pc, #8]	; (80a35a0 <HAL_USART_Read_Data+0xc>)
 80a3598:	681b      	ldr	r3, [r3, #0]
 80a359a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a359c:	9301      	str	r3, [sp, #4]
 80a359e:	bd08      	pop	{r3, pc}
 80a35a0:	080601c4 	.word	0x080601c4

080a35a4 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a35a4:	b508      	push	{r3, lr}
 80a35a6:	4b02      	ldr	r3, [pc, #8]	; (80a35b0 <HAL_USART_Peek_Data+0xc>)
 80a35a8:	681b      	ldr	r3, [r3, #0]
 80a35aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a35ac:	9301      	str	r3, [sp, #4]
 80a35ae:	bd08      	pop	{r3, pc}
 80a35b0:	080601c4 	.word	0x080601c4

080a35b4 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a35b4:	b508      	push	{r3, lr}
 80a35b6:	4b02      	ldr	r3, [pc, #8]	; (80a35c0 <HAL_USART_Flush_Data+0xc>)
 80a35b8:	681b      	ldr	r3, [r3, #0]
 80a35ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a35bc:	9301      	str	r3, [sp, #4]
 80a35be:	bd08      	pop	{r3, pc}
 80a35c0:	080601c4 	.word	0x080601c4

080a35c4 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a35c4:	b508      	push	{r3, lr}
 80a35c6:	4b02      	ldr	r3, [pc, #8]	; (80a35d0 <HAL_USART_Is_Enabled+0xc>)
 80a35c8:	681b      	ldr	r3, [r3, #0]
 80a35ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a35cc:	9301      	str	r3, [sp, #4]
 80a35ce:	bd08      	pop	{r3, pc}
 80a35d0:	080601c4 	.word	0x080601c4

080a35d4 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a35d4:	b508      	push	{r3, lr}
 80a35d6:	4b02      	ldr	r3, [pc, #8]	; (80a35e0 <HAL_USART_Available_Data_For_Write+0xc>)
 80a35d8:	681b      	ldr	r3, [r3, #0]
 80a35da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a35dc:	9301      	str	r3, [sp, #4]
 80a35de:	bd08      	pop	{r3, pc}
 80a35e0:	080601c4 	.word	0x080601c4

080a35e4 <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
 80a35e4:	b508      	push	{r3, lr}
 80a35e6:	4b02      	ldr	r3, [pc, #8]	; (80a35f0 <HAL_USART_BeginConfig+0xc>)
 80a35e8:	681b      	ldr	r3, [r3, #0]
 80a35ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a35ec:	9301      	str	r3, [sp, #4]
 80a35ee:	bd08      	pop	{r3, pc}
 80a35f0:	080601c4 	.word	0x080601c4

080a35f4 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a35f4:	b508      	push	{r3, lr}
 80a35f6:	4b02      	ldr	r3, [pc, #8]	; (80a3600 <HAL_I2C_Write_Data+0xc>)
 80a35f8:	681b      	ldr	r3, [r3, #0]
 80a35fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a35fc:	9301      	str	r3, [sp, #4]
 80a35fe:	bd08      	pop	{r3, pc}
 80a3600:	080601ac 	.word	0x080601ac

080a3604 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a3604:	b508      	push	{r3, lr}
 80a3606:	4b02      	ldr	r3, [pc, #8]	; (80a3610 <HAL_I2C_Available_Data+0xc>)
 80a3608:	681b      	ldr	r3, [r3, #0]
 80a360a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a360c:	9301      	str	r3, [sp, #4]
 80a360e:	bd08      	pop	{r3, pc}
 80a3610:	080601ac 	.word	0x080601ac

080a3614 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a3614:	b508      	push	{r3, lr}
 80a3616:	4b02      	ldr	r3, [pc, #8]	; (80a3620 <HAL_I2C_Read_Data+0xc>)
 80a3618:	681b      	ldr	r3, [r3, #0]
 80a361a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a361c:	9301      	str	r3, [sp, #4]
 80a361e:	bd08      	pop	{r3, pc}
 80a3620:	080601ac 	.word	0x080601ac

080a3624 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a3624:	b508      	push	{r3, lr}
 80a3626:	4b02      	ldr	r3, [pc, #8]	; (80a3630 <HAL_I2C_Peek_Data+0xc>)
 80a3628:	681b      	ldr	r3, [r3, #0]
 80a362a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a362c:	9301      	str	r3, [sp, #4]
 80a362e:	bd08      	pop	{r3, pc}
 80a3630:	080601ac 	.word	0x080601ac

080a3634 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a3634:	b508      	push	{r3, lr}
 80a3636:	4b02      	ldr	r3, [pc, #8]	; (80a3640 <HAL_I2C_Flush_Data+0xc>)
 80a3638:	681b      	ldr	r3, [r3, #0]
 80a363a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a363c:	9301      	str	r3, [sp, #4]
 80a363e:	bd08      	pop	{r3, pc}
 80a3640:	080601ac 	.word	0x080601ac

080a3644 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a3644:	b508      	push	{r3, lr}
 80a3646:	4b02      	ldr	r3, [pc, #8]	; (80a3650 <HAL_I2C_Is_Enabled+0xc>)
 80a3648:	681b      	ldr	r3, [r3, #0]
 80a364a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a364c:	9301      	str	r3, [sp, #4]
 80a364e:	bd08      	pop	{r3, pc}
 80a3650:	080601ac 	.word	0x080601ac

080a3654 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
 80a3654:	b508      	push	{r3, lr}
 80a3656:	4b03      	ldr	r3, [pc, #12]	; (80a3664 <HAL_I2C_Init+0x10>)
 80a3658:	681b      	ldr	r3, [r3, #0]
 80a365a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a365e:	9301      	str	r3, [sp, #4]
 80a3660:	bd08      	pop	{r3, pc}
 80a3662:	0000      	.short	0x0000
 80a3664:	080601ac 	.word	0x080601ac

080a3668 <socket_active_status>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, socket_active_status, uint8_t(sock_handle_t))
 80a3668:	b508      	push	{r3, lr}
 80a366a:	4b02      	ldr	r3, [pc, #8]	; (80a3674 <socket_active_status+0xc>)
 80a366c:	681b      	ldr	r3, [r3, #0]
 80a366e:	681b      	ldr	r3, [r3, #0]
 80a3670:	9301      	str	r3, [sp, #4]
 80a3672:	bd08      	pop	{r3, pc}
 80a3674:	080601bc 	.word	0x080601bc

080a3678 <socket_handle_valid>:
DYNALIB_FN(1, hal_socket, socket_handle_valid, uint8_t(sock_handle_t))
 80a3678:	b508      	push	{r3, lr}
 80a367a:	4b02      	ldr	r3, [pc, #8]	; (80a3684 <socket_handle_valid+0xc>)
 80a367c:	681b      	ldr	r3, [r3, #0]
 80a367e:	685b      	ldr	r3, [r3, #4]
 80a3680:	9301      	str	r3, [sp, #4]
 80a3682:	bd08      	pop	{r3, pc}
 80a3684:	080601bc 	.word	0x080601bc

080a3688 <socket_create>:
DYNALIB_FN(2, hal_socket, socket_create, sock_handle_t(uint8_t, uint8_t, uint8_t, uint16_t, network_interface_t))
 80a3688:	b508      	push	{r3, lr}
 80a368a:	4b02      	ldr	r3, [pc, #8]	; (80a3694 <socket_create+0xc>)
 80a368c:	681b      	ldr	r3, [r3, #0]
 80a368e:	689b      	ldr	r3, [r3, #8]
 80a3690:	9301      	str	r3, [sp, #4]
 80a3692:	bd08      	pop	{r3, pc}
 80a3694:	080601bc 	.word	0x080601bc

080a3698 <socket_connect>:
DYNALIB_FN(3, hal_socket, socket_connect, int32_t(sock_handle_t, const sockaddr_t*, long))
 80a3698:	b508      	push	{r3, lr}
 80a369a:	4b02      	ldr	r3, [pc, #8]	; (80a36a4 <socket_connect+0xc>)
 80a369c:	681b      	ldr	r3, [r3, #0]
 80a369e:	68db      	ldr	r3, [r3, #12]
 80a36a0:	9301      	str	r3, [sp, #4]
 80a36a2:	bd08      	pop	{r3, pc}
 80a36a4:	080601bc 	.word	0x080601bc

080a36a8 <socket_receive>:
DYNALIB_FN(4, hal_socket, socket_receive, sock_result_t(sock_handle_t, void*, socklen_t, system_tick_t))
 80a36a8:	b508      	push	{r3, lr}
 80a36aa:	4b02      	ldr	r3, [pc, #8]	; (80a36b4 <socket_receive+0xc>)
 80a36ac:	681b      	ldr	r3, [r3, #0]
 80a36ae:	691b      	ldr	r3, [r3, #16]
 80a36b0:	9301      	str	r3, [sp, #4]
 80a36b2:	bd08      	pop	{r3, pc}
 80a36b4:	080601bc 	.word	0x080601bc

080a36b8 <socket_close>:
DYNALIB_FN(5, hal_socket, socket_receivefrom, sock_result_t(sock_handle_t, void*, socklen_t, uint32_t, sockaddr_t*, socklen_t*))
DYNALIB_FN(6, hal_socket, socket_send, sock_result_t(sock_handle_t, const void*, socklen_t))
DYNALIB_FN(7, hal_socket, socket_sendto, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, sockaddr_t*, socklen_t))
DYNALIB_FN(8, hal_socket, socket_close, sock_result_t(sock_handle_t))
 80a36b8:	b508      	push	{r3, lr}
 80a36ba:	4b02      	ldr	r3, [pc, #8]	; (80a36c4 <socket_close+0xc>)
 80a36bc:	681b      	ldr	r3, [r3, #0]
 80a36be:	6a1b      	ldr	r3, [r3, #32]
 80a36c0:	9301      	str	r3, [sp, #4]
 80a36c2:	bd08      	pop	{r3, pc}
 80a36c4:	080601bc 	.word	0x080601bc

080a36c8 <socket_handle_invalid>:
DYNALIB_FN(9, hal_socket, socket_reset_blocking_call, sock_result_t(void))
DYNALIB_FN(10, hal_socket, socket_create_tcp_server, sock_result_t(uint16_t, network_interface_t))
DYNALIB_FN(11, hal_socket, socket_accept, sock_result_t(sock_handle_t))
DYNALIB_FN(12, hal_socket, socket_handle_invalid, sock_handle_t(void))
 80a36c8:	b508      	push	{r3, lr}
 80a36ca:	4b02      	ldr	r3, [pc, #8]	; (80a36d4 <socket_handle_invalid+0xc>)
 80a36cc:	681b      	ldr	r3, [r3, #0]
 80a36ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a36d0:	9301      	str	r3, [sp, #4]
 80a36d2:	bd08      	pop	{r3, pc}
 80a36d4:	080601bc 	.word	0x080601bc

080a36d8 <socket_send_ex>:
DYNALIB_FN(13, hal_socket, socket_join_multicast, sock_result_t(const HAL_IPAddress*, network_interface_t, socket_multicast_info_t*))
DYNALIB_FN(14, hal_socket, socket_leave_multicast, sock_result_t(const HAL_IPAddress*, network_interface_t, socket_multicast_info_t*))
DYNALIB_FN(15, hal_socket, socket_peer, sock_result_t(sock_handle_t, sock_peer_t*, void*))
DYNALIB_FN(16, hal_socket, socket_shutdown, sock_result_t(sock_handle_t, int))
DYNALIB_FN(17, hal_socket, socket_send_ex, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, system_tick_t, void*))
 80a36d8:	b508      	push	{r3, lr}
 80a36da:	4b02      	ldr	r3, [pc, #8]	; (80a36e4 <socket_send_ex+0xc>)
 80a36dc:	681b      	ldr	r3, [r3, #0]
 80a36de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a36e0:	9301      	str	r3, [sp, #4]
 80a36e2:	bd08      	pop	{r3, pc}
 80a36e4:	080601bc 	.word	0x080601bc

080a36e8 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a36e8:	b508      	push	{r3, lr}
 80a36ea:	4b02      	ldr	r3, [pc, #8]	; (80a36f4 <HAL_USB_USART_Init+0xc>)
 80a36ec:	681b      	ldr	r3, [r3, #0]
 80a36ee:	681b      	ldr	r3, [r3, #0]
 80a36f0:	9301      	str	r3, [sp, #4]
 80a36f2:	bd08      	pop	{r3, pc}
 80a36f4:	080601d8 	.word	0x080601d8

080a36f8 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a36f8:	b508      	push	{r3, lr}
 80a36fa:	4b02      	ldr	r3, [pc, #8]	; (80a3704 <HAL_USB_USART_Begin+0xc>)
 80a36fc:	681b      	ldr	r3, [r3, #0]
 80a36fe:	685b      	ldr	r3, [r3, #4]
 80a3700:	9301      	str	r3, [sp, #4]
 80a3702:	bd08      	pop	{r3, pc}
 80a3704:	080601d8 	.word	0x080601d8

080a3708 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a3708:	b508      	push	{r3, lr}
 80a370a:	4b02      	ldr	r3, [pc, #8]	; (80a3714 <HAL_USB_USART_Available_Data+0xc>)
 80a370c:	681b      	ldr	r3, [r3, #0]
 80a370e:	691b      	ldr	r3, [r3, #16]
 80a3710:	9301      	str	r3, [sp, #4]
 80a3712:	bd08      	pop	{r3, pc}
 80a3714:	080601d8 	.word	0x080601d8

080a3718 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a3718:	b508      	push	{r3, lr}
 80a371a:	4b02      	ldr	r3, [pc, #8]	; (80a3724 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a371c:	681b      	ldr	r3, [r3, #0]
 80a371e:	695b      	ldr	r3, [r3, #20]
 80a3720:	9301      	str	r3, [sp, #4]
 80a3722:	bd08      	pop	{r3, pc}
 80a3724:	080601d8 	.word	0x080601d8

080a3728 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a3728:	b508      	push	{r3, lr}
 80a372a:	4b02      	ldr	r3, [pc, #8]	; (80a3734 <HAL_USB_USART_Receive_Data+0xc>)
 80a372c:	681b      	ldr	r3, [r3, #0]
 80a372e:	699b      	ldr	r3, [r3, #24]
 80a3730:	9301      	str	r3, [sp, #4]
 80a3732:	bd08      	pop	{r3, pc}
 80a3734:	080601d8 	.word	0x080601d8

080a3738 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a3738:	b508      	push	{r3, lr}
 80a373a:	4b02      	ldr	r3, [pc, #8]	; (80a3744 <HAL_USB_USART_Send_Data+0xc>)
 80a373c:	681b      	ldr	r3, [r3, #0]
 80a373e:	69db      	ldr	r3, [r3, #28]
 80a3740:	9301      	str	r3, [sp, #4]
 80a3742:	bd08      	pop	{r3, pc}
 80a3744:	080601d8 	.word	0x080601d8

080a3748 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a3748:	b508      	push	{r3, lr}
 80a374a:	4b02      	ldr	r3, [pc, #8]	; (80a3754 <HAL_USB_USART_Flush_Data+0xc>)
 80a374c:	681b      	ldr	r3, [r3, #0]
 80a374e:	6a1b      	ldr	r3, [r3, #32]
 80a3750:	9301      	str	r3, [sp, #4]
 80a3752:	bd08      	pop	{r3, pc}
 80a3754:	080601d8 	.word	0x080601d8

080a3758 <HAL_NET_SetNetWatchDog>:

DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
 80a3758:	b508      	push	{r3, lr}
 80a375a:	4b02      	ldr	r3, [pc, #8]	; (80a3764 <HAL_NET_SetNetWatchDog+0xc>)
 80a375c:	681b      	ldr	r3, [r3, #0]
 80a375e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a3760:	9301      	str	r3, [sp, #4]
 80a3762:	bd08      	pop	{r3, pc}
 80a3764:	080601c0 	.word	0x080601c0

080a3768 <inet_gethostbyname>:
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a3768:	b508      	push	{r3, lr}
 80a376a:	4b02      	ldr	r3, [pc, #8]	; (80a3774 <inet_gethostbyname+0xc>)
 80a376c:	681b      	ldr	r3, [r3, #0]
 80a376e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a3770:	9301      	str	r3, [sp, #4]
 80a3772:	bd08      	pop	{r3, pc}
 80a3774:	080601c0 	.word	0x080601c0

080a3778 <wlan_select_antenna>:
DYNALIB_FN(19, hal_wlan, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(20, hal_wlan, wlan_select_antenna, int(WLanSelectAntenna_TypeDef))
 80a3778:	b508      	push	{r3, lr}
 80a377a:	4b02      	ldr	r3, [pc, #8]	; (80a3784 <wlan_select_antenna+0xc>)
 80a377c:	681b      	ldr	r3, [r3, #0]
 80a377e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80a3780:	9301      	str	r3, [sp, #4]
 80a3782:	bd08      	pop	{r3, pc}
 80a3784:	080601c0 	.word	0x080601c0

080a3788 <wlan_connected_info>:
DYNALIB_FN(24, hal_wlan, wlan_get_credentials, int(wlan_scan_result_t, void*))
DYNALIB_FN(25, hal_wlan, softap_set_application_page_handler, int(PageProvider* provider, void* reserved))
DYNALIB_FN(26, hal_wlan, wlan_restart, int(void*))
DYNALIB_FN(27, hal_wlan, wlan_set_hostname, int(const char*, void*))
DYNALIB_FN(28, hal_wlan, wlan_get_hostname, int(char*, size_t, void*))
DYNALIB_FN(29, hal_wlan, wlan_connected_info, int(void*, wlan_connected_info_t*, void*))
 80a3788:	b508      	push	{r3, lr}
 80a378a:	4b02      	ldr	r3, [pc, #8]	; (80a3794 <wlan_connected_info+0xc>)
 80a378c:	681b      	ldr	r3, [r3, #0]
 80a378e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a3790:	9301      	str	r3, [sp, #4]
 80a3792:	bd08      	pop	{r3, pc}
 80a3794:	080601c0 	.word	0x080601c0

080a3798 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
 80a3798:	b508      	push	{r3, lr}
 80a379a:	4b02      	ldr	r3, [pc, #8]	; (80a37a4 <log_message+0xc>)
 80a379c:	681b      	ldr	r3, [r3, #0]
 80a379e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80a37a0:	9301      	str	r3, [sp, #4]
 80a37a2:	bd08      	pop	{r3, pc}
 80a37a4:	080201a8 	.word	0x080201a8

080a37a8 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 80a37a8:	b508      	push	{r3, lr}
 80a37aa:	4b02      	ldr	r3, [pc, #8]	; (80a37b4 <system_mode+0xc>)
 80a37ac:	681b      	ldr	r3, [r3, #0]
 80a37ae:	681b      	ldr	r3, [r3, #0]
 80a37b0:	9301      	str	r3, [sp, #4]
 80a37b2:	bd08      	pop	{r3, pc}
 80a37b4:	080601a4 	.word	0x080601a4

080a37b8 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a37b8:	b508      	push	{r3, lr}
 80a37ba:	4b02      	ldr	r3, [pc, #8]	; (80a37c4 <set_system_mode+0xc>)
 80a37bc:	681b      	ldr	r3, [r3, #0]
 80a37be:	685b      	ldr	r3, [r3, #4]
 80a37c0:	9301      	str	r3, [sp, #4]
 80a37c2:	bd08      	pop	{r3, pc}
 80a37c4:	080601a4 	.word	0x080601a4

080a37c8 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a37c8:	b508      	push	{r3, lr}
 80a37ca:	4b02      	ldr	r3, [pc, #8]	; (80a37d4 <system_delay_ms+0xc>)
 80a37cc:	681b      	ldr	r3, [r3, #0]
 80a37ce:	695b      	ldr	r3, [r3, #20]
 80a37d0:	9301      	str	r3, [sp, #4]
 80a37d2:	bd08      	pop	{r3, pc}
 80a37d4:	080601a4 	.word	0x080601a4

080a37d8 <system_thread_get_state>:
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 80a37d8:	b508      	push	{r3, lr}
 80a37da:	4b02      	ldr	r3, [pc, #8]	; (80a37e4 <system_thread_get_state+0xc>)
 80a37dc:	681b      	ldr	r3, [r3, #0]
 80a37de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a37e0:	9301      	str	r3, [sp, #4]
 80a37e2:	bd08      	pop	{r3, pc}
 80a37e4:	080601a4 	.word	0x080601a4

080a37e8 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a37e8:	b508      	push	{r3, lr}
 80a37ea:	4b03      	ldr	r3, [pc, #12]	; (80a37f8 <system_ctrl_set_app_request_handler+0x10>)
 80a37ec:	681b      	ldr	r3, [r3, #0]
 80a37ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a37f2:	9301      	str	r3, [sp, #4]
 80a37f4:	bd08      	pop	{r3, pc}
 80a37f6:	0000      	.short	0x0000
 80a37f8:	080601a4 	.word	0x080601a4

080a37fc <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a37fc:	b508      	push	{r3, lr}
 80a37fe:	4b03      	ldr	r3, [pc, #12]	; (80a380c <system_ctrl_set_result+0x10>)
 80a3800:	681b      	ldr	r3, [r3, #0]
 80a3802:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a3806:	9301      	str	r3, [sp, #4]
 80a3808:	bd08      	pop	{r3, pc}
 80a380a:	0000      	.short	0x0000
 80a380c:	080601a4 	.word	0x080601a4

080a3810 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a3810:	b508      	push	{r3, lr}
 80a3812:	4b02      	ldr	r3, [pc, #8]	; (80a381c <network_connect+0xc>)
 80a3814:	681b      	ldr	r3, [r3, #0]
 80a3816:	685b      	ldr	r3, [r3, #4]
 80a3818:	9301      	str	r3, [sp, #4]
 80a381a:	bd08      	pop	{r3, pc}
 80a381c:	080601c8 	.word	0x080601c8

080a3820 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a3820:	b508      	push	{r3, lr}
 80a3822:	4b02      	ldr	r3, [pc, #8]	; (80a382c <network_connecting+0xc>)
 80a3824:	681b      	ldr	r3, [r3, #0]
 80a3826:	689b      	ldr	r3, [r3, #8]
 80a3828:	9301      	str	r3, [sp, #4]
 80a382a:	bd08      	pop	{r3, pc}
 80a382c:	080601c8 	.word	0x080601c8

080a3830 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a3830:	b508      	push	{r3, lr}
 80a3832:	4b02      	ldr	r3, [pc, #8]	; (80a383c <network_disconnect+0xc>)
 80a3834:	681b      	ldr	r3, [r3, #0]
 80a3836:	68db      	ldr	r3, [r3, #12]
 80a3838:	9301      	str	r3, [sp, #4]
 80a383a:	bd08      	pop	{r3, pc}
 80a383c:	080601c8 	.word	0x080601c8

080a3840 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a3840:	b508      	push	{r3, lr}
 80a3842:	4b02      	ldr	r3, [pc, #8]	; (80a384c <network_ready+0xc>)
 80a3844:	681b      	ldr	r3, [r3, #0]
 80a3846:	691b      	ldr	r3, [r3, #16]
 80a3848:	9301      	str	r3, [sp, #4]
 80a384a:	bd08      	pop	{r3, pc}
 80a384c:	080601c8 	.word	0x080601c8

080a3850 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a3850:	b508      	push	{r3, lr}
 80a3852:	4b02      	ldr	r3, [pc, #8]	; (80a385c <network_on+0xc>)
 80a3854:	681b      	ldr	r3, [r3, #0]
 80a3856:	695b      	ldr	r3, [r3, #20]
 80a3858:	9301      	str	r3, [sp, #4]
 80a385a:	bd08      	pop	{r3, pc}
 80a385c:	080601c8 	.word	0x080601c8

080a3860 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a3860:	b508      	push	{r3, lr}
 80a3862:	4b02      	ldr	r3, [pc, #8]	; (80a386c <network_off+0xc>)
 80a3864:	681b      	ldr	r3, [r3, #0]
 80a3866:	699b      	ldr	r3, [r3, #24]
 80a3868:	9301      	str	r3, [sp, #4]
 80a386a:	bd08      	pop	{r3, pc}
 80a386c:	080601c8 	.word	0x080601c8

080a3870 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a3870:	b508      	push	{r3, lr}
 80a3872:	4b02      	ldr	r3, [pc, #8]	; (80a387c <network_listen+0xc>)
 80a3874:	681b      	ldr	r3, [r3, #0]
 80a3876:	69db      	ldr	r3, [r3, #28]
 80a3878:	9301      	str	r3, [sp, #4]
 80a387a:	bd08      	pop	{r3, pc}
 80a387c:	080601c8 	.word	0x080601c8

080a3880 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a3880:	b508      	push	{r3, lr}
 80a3882:	4b02      	ldr	r3, [pc, #8]	; (80a388c <network_listening+0xc>)
 80a3884:	681b      	ldr	r3, [r3, #0]
 80a3886:	6a1b      	ldr	r3, [r3, #32]
 80a3888:	9301      	str	r3, [sp, #4]
 80a388a:	bd08      	pop	{r3, pc}
 80a388c:	080601c8 	.word	0x080601c8

080a3890 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a3890:	b508      	push	{r3, lr}
 80a3892:	4b02      	ldr	r3, [pc, #8]	; (80a389c <network_set_listen_timeout+0xc>)
 80a3894:	681b      	ldr	r3, [r3, #0]
 80a3896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a3898:	9301      	str	r3, [sp, #4]
 80a389a:	bd08      	pop	{r3, pc}
 80a389c:	080601c8 	.word	0x080601c8

080a38a0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a38a0:	b508      	push	{r3, lr}
 80a38a2:	4b02      	ldr	r3, [pc, #8]	; (80a38ac <network_get_listen_timeout+0xc>)
 80a38a4:	681b      	ldr	r3, [r3, #0]
 80a38a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a38a8:	9301      	str	r3, [sp, #4]
 80a38aa:	bd08      	pop	{r3, pc}
 80a38ac:	080601c8 	.word	0x080601c8

080a38b0 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
 80a38b0:	b508      	push	{r3, lr}
 80a38b2:	4b02      	ldr	r3, [pc, #8]	; (80a38bc <spark_variable+0xc>)
 80a38b4:	681b      	ldr	r3, [r3, #0]
 80a38b6:	681b      	ldr	r3, [r3, #0]
 80a38b8:	9301      	str	r3, [sp, #4]
 80a38ba:	bd08      	pop	{r3, pc}
 80a38bc:	080601cc 	.word	0x080601cc

080a38c0 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
 80a38c0:	b508      	push	{r3, lr}
 80a38c2:	4b02      	ldr	r3, [pc, #8]	; (80a38cc <spark_function+0xc>)
 80a38c4:	681b      	ldr	r3, [r3, #0]
 80a38c6:	685b      	ldr	r3, [r3, #4]
 80a38c8:	9301      	str	r3, [sp, #4]
 80a38ca:	bd08      	pop	{r3, pc}
 80a38cc:	080601cc 	.word	0x080601cc

080a38d0 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 80a38d0:	b508      	push	{r3, lr}
 80a38d2:	4b02      	ldr	r3, [pc, #8]	; (80a38dc <spark_process+0xc>)
 80a38d4:	681b      	ldr	r3, [r3, #0]
 80a38d6:	689b      	ldr	r3, [r3, #8]
 80a38d8:	9301      	str	r3, [sp, #4]
 80a38da:	bd08      	pop	{r3, pc}
 80a38dc:	080601cc 	.word	0x080601cc

080a38e0 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
 80a38e0:	b508      	push	{r3, lr}
 80a38e2:	4b02      	ldr	r3, [pc, #8]	; (80a38ec <spark_cloud_flag_connect+0xc>)
 80a38e4:	681b      	ldr	r3, [r3, #0]
 80a38e6:	68db      	ldr	r3, [r3, #12]
 80a38e8:	9301      	str	r3, [sp, #4]
 80a38ea:	bd08      	pop	{r3, pc}
 80a38ec:	080601cc 	.word	0x080601cc

080a38f0 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 80a38f0:	b508      	push	{r3, lr}
 80a38f2:	4b02      	ldr	r3, [pc, #8]	; (80a38fc <spark_cloud_flag_connected+0xc>)
 80a38f4:	681b      	ldr	r3, [r3, #0]
 80a38f6:	695b      	ldr	r3, [r3, #20]
 80a38f8:	9301      	str	r3, [sp, #4]
 80a38fa:	bd08      	pop	{r3, pc}
 80a38fc:	080601cc 	.word	0x080601cc

080a3900 <spark_sync_time_pending>:
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 80a3900:	b508      	push	{r3, lr}
 80a3902:	4b02      	ldr	r3, [pc, #8]	; (80a390c <spark_sync_time_pending+0xc>)
 80a3904:	681b      	ldr	r3, [r3, #0]
 80a3906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a3908:	9301      	str	r3, [sp, #4]
 80a390a:	bd08      	pop	{r3, pc}
 80a390c:	080601cc 	.word	0x080601cc

080a3910 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a3910:	b508      	push	{r3, lr}
 80a3912:	4b02      	ldr	r3, [pc, #8]	; (80a391c <spark_set_random_seed_from_cloud_handler+0xc>)
 80a3914:	681b      	ldr	r3, [r3, #0]
 80a3916:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a3918:	9301      	str	r3, [sp, #4]
 80a391a:	bd08      	pop	{r3, pc}
 80a391c:	080601cc 	.word	0x080601cc

080a3920 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a3920:	b508      	push	{r3, lr}
 80a3922:	4b02      	ldr	r3, [pc, #8]	; (80a392c <malloc+0xc>)
 80a3924:	681b      	ldr	r3, [r3, #0]
 80a3926:	681b      	ldr	r3, [r3, #0]
 80a3928:	9301      	str	r3, [sp, #4]
 80a392a:	bd08      	pop	{r3, pc}
 80a392c:	080601a0 	.word	0x080601a0

080a3930 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a3930:	b508      	push	{r3, lr}
 80a3932:	4b02      	ldr	r3, [pc, #8]	; (80a393c <free+0xc>)
 80a3934:	681b      	ldr	r3, [r3, #0]
 80a3936:	685b      	ldr	r3, [r3, #4]
 80a3938:	9301      	str	r3, [sp, #4]
 80a393a:	bd08      	pop	{r3, pc}
 80a393c:	080601a0 	.word	0x080601a0

080a3940 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a3940:	b508      	push	{r3, lr}
 80a3942:	4b02      	ldr	r3, [pc, #8]	; (80a394c <realloc+0xc>)
 80a3944:	681b      	ldr	r3, [r3, #0]
 80a3946:	689b      	ldr	r3, [r3, #8]
 80a3948:	9301      	str	r3, [sp, #4]
 80a394a:	bd08      	pop	{r3, pc}
 80a394c:	080601a0 	.word	0x080601a0

080a3950 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
 80a3950:	b508      	push	{r3, lr}
 80a3952:	4b02      	ldr	r3, [pc, #8]	; (80a395c <siprintf+0xc>)
 80a3954:	681b      	ldr	r3, [r3, #0]
 80a3956:	691b      	ldr	r3, [r3, #16]
 80a3958:	9301      	str	r3, [sp, #4]
 80a395a:	bd08      	pop	{r3, pc}
 80a395c:	080601a0 	.word	0x080601a0

080a3960 <sscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
 80a3960:	b508      	push	{r3, lr}
 80a3962:	4b02      	ldr	r3, [pc, #8]	; (80a396c <sscanf+0xc>)
 80a3964:	681b      	ldr	r3, [r3, #0]
 80a3966:	695b      	ldr	r3, [r3, #20]
 80a3968:	9301      	str	r3, [sp, #4]
 80a396a:	bd08      	pop	{r3, pc}
 80a396c:	080601a0 	.word	0x080601a0

080a3970 <siscanf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
 80a3970:	b508      	push	{r3, lr}
 80a3972:	4b02      	ldr	r3, [pc, #8]	; (80a397c <siscanf+0xc>)
 80a3974:	681b      	ldr	r3, [r3, #0]
 80a3976:	699b      	ldr	r3, [r3, #24]
 80a3978:	9301      	str	r3, [sp, #4]
 80a397a:	bd08      	pop	{r3, pc}
 80a397c:	080601a0 	.word	0x080601a0

080a3980 <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
 80a3980:	b508      	push	{r3, lr}
 80a3982:	4b02      	ldr	r3, [pc, #8]	; (80a398c <snprintf+0xc>)
 80a3984:	681b      	ldr	r3, [r3, #0]
 80a3986:	69db      	ldr	r3, [r3, #28]
 80a3988:	9301      	str	r3, [sp, #4]
 80a398a:	bd08      	pop	{r3, pc}
 80a398c:	080601a0 	.word	0x080601a0

080a3990 <sniprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
 80a3990:	b508      	push	{r3, lr}
 80a3992:	4b02      	ldr	r3, [pc, #8]	; (80a399c <sniprintf+0xc>)
 80a3994:	681b      	ldr	r3, [r3, #0]
 80a3996:	6a1b      	ldr	r3, [r3, #32]
 80a3998:	9301      	str	r3, [sp, #4]
 80a399a:	bd08      	pop	{r3, pc}
 80a399c:	080601a0 	.word	0x080601a0

080a39a0 <vsnprintf>:
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 80a39a0:	b508      	push	{r3, lr}
 80a39a2:	4b02      	ldr	r3, [pc, #8]	; (80a39ac <vsnprintf+0xc>)
 80a39a4:	681b      	ldr	r3, [r3, #0]
 80a39a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a39a8:	9301      	str	r3, [sp, #4]
 80a39aa:	bd08      	pop	{r3, pc}
 80a39ac:	080601a0 	.word	0x080601a0

080a39b0 <_malloc_r>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80a39b0:	b508      	push	{r3, lr}
 80a39b2:	4b02      	ldr	r3, [pc, #8]	; (80a39bc <_malloc_r+0xc>)
 80a39b4:	681b      	ldr	r3, [r3, #0]
 80a39b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a39b8:	9301      	str	r3, [sp, #4]
 80a39ba:	bd08      	pop	{r3, pc}
 80a39bc:	080601a0 	.word	0x080601a0

080a39c0 <_ZN14RecursiveMutex4lockEv>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
 80a39c0:	6800      	ldr	r0, [r0, #0]
 80a39c2:	f7ff bdbf 	b.w	80a3544 <os_mutex_recursive_lock>

080a39c6 <_ZN14RecursiveMutex6unlockEv>:
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
 80a39c6:	6800      	ldr	r0, [r0, #0]
 80a39c8:	f7ff bdc4 	b.w	80a3554 <os_mutex_recursive_unlock>

080a39cc <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a39cc:	b570      	push	{r4, r5, r6, lr}
 80a39ce:	4604      	mov	r4, r0
 80a39d0:	460e      	mov	r6, r1
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 80a39d2:	2500      	movs	r5, #0
 80a39d4:	f840 5f08 	str.w	r5, [r0, #8]!
    {
        os_mutex_recursive_create(&handle_);
 80a39d8:	f7ff fda4 	bl	80a3524 <os_mutex_recursive_create>
{
    _spi = spi;
    HAL_SPI_Init(_spi);
 80a39dc:	4630      	mov	r0, r6
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
    _spi = spi;
 80a39de:	7026      	strb	r6, [r4, #0]
    HAL_SPI_Init(_spi);
 80a39e0:	f7ff fd68 	bl	80a34b4 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80a39e4:	6065      	str	r5, [r4, #4]
}
 80a39e6:	4620      	mov	r0, r4
 80a39e8:	bd70      	pop	{r4, r5, r6, pc}

080a39ea <_ZN8SPIClass5beginEt>:
        unlock();
    }
}

void SPIClass::begin(uint16_t ss_pin)
{
 80a39ea:	b570      	push	{r4, r5, r6, lr}
 80a39ec:	4605      	mov	r5, r0
 80a39ee:	460e      	mov	r6, r1
  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
#elif PLATFORM_THREADING
    _mutex.lock();
 80a39f0:	f100 0408 	add.w	r4, r0, #8
 80a39f4:	4620      	mov	r0, r4
 80a39f6:	f7ff ffe3 	bl	80a39c0 <_ZN14RecursiveMutex4lockEv>
    if (!lock())
    {
        HAL_SPI_Begin(_spi, ss_pin);
 80a39fa:	7828      	ldrb	r0, [r5, #0]
 80a39fc:	4631      	mov	r1, r6
 80a39fe:	f7ff fd49 	bl	80a3494 <HAL_SPI_Begin>
  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
#elif PLATFORM_THREADING
    _mutex.unlock();
 80a3a02:	4620      	mov	r0, r4
 80a3a04:	f7ff ffdf 	bl	80a39c6 <_ZN14RecursiveMutex6unlockEv>
 80a3a08:	bd70      	pop	{r4, r5, r6, pc}

080a3a0a <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
 80a3a0a:	b508      	push	{r3, lr}
    return static_cast<byte>(HAL_SPI_Send_Receive_Data(_spi, _data));
 80a3a0c:	7800      	ldrb	r0, [r0, #0]
 80a3a0e:	f7ff fd49 	bl	80a34a4 <HAL_SPI_Send_Receive_Data>
}
 80a3a12:	b2c0      	uxtb	r0, r0
 80a3a14:	bd08      	pop	{r3, pc}

080a3a16 <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
 80a3a16:	7800      	ldrb	r0, [r0, #0]
 80a3a18:	f7ff bd54 	b.w	80a34c4 <HAL_SPI_Is_Enabled>

080a3a1c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
 80a3a1c:	b510      	push	{r4, lr}
 80a3a1e:	4604      	mov	r4, r0
        if (wakeupSource_) {
 80a3a20:	6800      	ldr	r0, [r0, #0]
 80a3a22:	b118      	cbz	r0, 80a3a2c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
 80a3a24:	f7ff ff84 	bl	80a3930 <free>
            wakeupSource_ = nullptr;
 80a3a28:	2300      	movs	r3, #0
 80a3a2a:	6023      	str	r3, [r4, #0]
 80a3a2c:	bd10      	pop	{r4, pc}

080a3a2e <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80a3a2e:	b510      	push	{r4, lr}
 80a3a30:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
 80a3a32:	f7ff fff3 	bl	80a3a1c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80a3a36:	4620      	mov	r0, r4
 80a3a38:	bd10      	pop	{r4, pc}

080a3a3a <_ZN11SystemClass5resetEm>:
    reset(0);
}

void SystemClass::reset(uint32_t data)
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
 80a3a3a:	4601      	mov	r1, r0
 80a3a3c:	2200      	movs	r2, #0
 80a3a3e:	208c      	movs	r0, #140	; 0x8c
 80a3a40:	f7ff bd68 	b.w	80a3514 <HAL_Core_System_Reset_Ex>

080a3a44 <_ZN11SystemClass5resetEv>:
    HAL_Core_Enter_Bootloader(persist);
}

void SystemClass::reset(void)
{
    reset(0);
 80a3a44:	2000      	movs	r0, #0
 80a3a46:	f7ff bff8 	b.w	80a3a3a <_ZN11SystemClass5resetEm>
	...

080a3a4c <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 80a3a4c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80a3a50:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 80a3a52:	4c08      	ldr	r4, [pc, #32]	; (80a3a74 <_GLOBAL__sub_I_System+0x28>)
 80a3a54:	2000      	movs	r0, #0
 80a3a56:	6020      	str	r0, [r4, #0]
 80a3a58:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 80a3a5a:	71a0      	strb	r0, [r4, #6]
 80a3a5c:	8120      	strh	r0, [r4, #8]
 80a3a5e:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a3a60:	f7ff feaa 	bl	80a37b8 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
 80a3a64:	4620      	mov	r0, r4
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80a3a66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
 80a3a6a:	4a03      	ldr	r2, [pc, #12]	; (80a3a78 <_GLOBAL__sub_I_System+0x2c>)
 80a3a6c:	4903      	ldr	r1, [pc, #12]	; (80a3a7c <_GLOBAL__sub_I_System+0x30>)
 80a3a6e:	f001 bc8d 	b.w	80a538c <__aeabi_atexit>
 80a3a72:	bf00      	nop
 80a3a74:	2000044c 	.word	0x2000044c
 80a3a78:	20000100 	.word	0x20000100
 80a3a7c:	080a3a2f 	.word	0x080a3a2f

080a3a80 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
 80a3a80:	b510      	push	{r4, lr}
 80a3a82:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
 80a3a84:	f003 fe46 	bl	80a7714 <strlen>
 80a3a88:	3801      	subs	r0, #1
 80a3a8a:	1823      	adds	r3, r4, r0
 80a3a8c:	4620      	mov	r0, r4
	while(i<j){
 80a3a8e:	4298      	cmp	r0, r3
 80a3a90:	d206      	bcs.n	80a3aa0 <_Z11str_reversePc+0x20>
		c = *i;
 80a3a92:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
 80a3a94:	7819      	ldrb	r1, [r3, #0]
 80a3a96:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
 80a3a9a:	f803 2901 	strb.w	r2, [r3], #-1
__attribute__((weak)) void str_reverse(char* buffer){
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
	while(i<j){
 80a3a9e:	e7f6      	b.n	80a3a8e <_Z11str_reversePc+0xe>
 80a3aa0:	bd10      	pop	{r4, pc}

080a3aa2 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
 80a3aa2:	b570      	push	{r4, r5, r6, lr}
 80a3aa4:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
 80a3aa6:	1e91      	subs	r1, r2, #2
 80a3aa8:	2922      	cmp	r1, #34	; 0x22
 80a3aaa:	d820      	bhi.n	80a3aee <ultoa+0x4c>
 80a3aac:	4625      	mov	r5, r4
 80a3aae:	4629      	mov	r1, r5
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
 80a3ab0:	b910      	cbnz	r0, 80a3ab8 <ultoa+0x16>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 80a3ab2:	4423      	add	r3, r4
            *ptr++ = '0';
 80a3ab4:	2230      	movs	r2, #48	; 0x30
 80a3ab6:	e00e      	b.n	80a3ad6 <ultoa+0x34>
	div_t result;
	while(a){
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
 80a3ab8:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
 80a3abc:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
 80a3ac0:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
 80a3ac2:	2809      	cmp	r0, #9
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
            result.rem = a%radix;
            *ptr = result.rem;
 80a3ac4:	f805 1b01 	strb.w	r1, [r5], #1
            if(result.rem<10){
                *ptr += '0';
 80a3ac8:	bf94      	ite	ls
 80a3aca:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
 80a3acc:	3157      	addhi	r1, #87	; 0x57
 80a3ace:	f805 1c01 	strb.w	r1, [r5, #-1]
            }
            ++ptr;
            a = result.quot;
 80a3ad2:	4630      	mov	r0, r6
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
 80a3ad4:	e7eb      	b.n	80a3aae <ultoa+0xc>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 80a3ad6:	4299      	cmp	r1, r3
 80a3ad8:	d202      	bcs.n	80a3ae0 <ultoa+0x3e>
            *ptr++ = '0';
 80a3ada:	f801 2b01 	strb.w	r2, [r1], #1
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 80a3ade:	e7fa      	b.n	80a3ad6 <ultoa+0x34>
            *ptr++ = '0';

	*ptr = '\0';
 80a3ae0:	2300      	movs	r3, #0
	str_reverse(buffer);
 80a3ae2:	4620      	mov	r0, r4
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';

	*ptr = '\0';
 80a3ae4:	700b      	strb	r3, [r1, #0]
	str_reverse(buffer);
 80a3ae6:	f7ff ffcb 	bl	80a3a80 <_Z11str_reversePc>
	return buffer;
 80a3aea:	4620      	mov	r0, r4
 80a3aec:	bd70      	pop	{r4, r5, r6, pc}
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
	if(radix<2 || radix>36){
		return NULL;
 80a3aee:	2000      	movs	r0, #0
            *ptr++ = '0';

	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}
 80a3af0:	bd70      	pop	{r4, r5, r6, pc}

080a3af2 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 80a3af2:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
 80a3af4:	1e03      	subs	r3, r0, #0
	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 80a3af6:	460c      	mov	r4, r1
 80a3af8:	4615      	mov	r5, r2
	if(a<0){
 80a3afa:	da0b      	bge.n	80a3b14 <itoa+0x22>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
 80a3afc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
 80a3b00:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
 80a3b04:	bf14      	ite	ne
 80a3b06:	4258      	negne	r0, r3
 80a3b08:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
 80a3b0a:	2301      	movs	r3, #1
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
 80a3b0c:	700a      	strb	r2, [r1, #0]
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
		ultoa((unsigned)v, buffer + 1, radix);
 80a3b0e:	462a      	mov	r2, r5
 80a3b10:	4419      	add	r1, r3
 80a3b12:	e000      	b.n	80a3b16 <itoa+0x24>
	}else{
		ultoa(a, buffer, radix);
 80a3b14:	2301      	movs	r3, #1
 80a3b16:	f7ff ffc4 	bl	80a3aa2 <ultoa>
	}
	return buffer;
}
 80a3b1a:	4620      	mov	r0, r4
 80a3b1c:	bd38      	pop	{r3, r4, r5, pc}

080a3b1e <utoa>:

__attribute__((weak)) char* utoa(unsigned a, char* buffer, int radix) {
 80a3b1e:	b508      	push	{r3, lr}
    return ultoa(a, buffer, radix);
 80a3b20:	2301      	movs	r3, #1
 80a3b22:	f7ff ffbe 	bl	80a3aa2 <ultoa>
}
 80a3b26:	bd08      	pop	{r3, pc}

080a3b28 <_ZN9TCPClient5writeEh>:
        }
        return connected;
}

size_t TCPClient::write(uint8_t b)
{
 80a3b28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a3b2a:	ac02      	add	r4, sp, #8
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a3b2c:	6803      	ldr	r3, [r0, #0]
        }
        return connected;
}

size_t TCPClient::write(uint8_t b)
{
 80a3b2e:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a3b32:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 80a3b34:	2201      	movs	r2, #1
 80a3b36:	f247 5330 	movw	r3, #30000	; 0x7530
 80a3b3a:	4621      	mov	r1, r4
 80a3b3c:	47a8      	blx	r5
}
 80a3b3e:	b003      	add	sp, #12
 80a3b40:	bd30      	pop	{r4, r5, pc}

080a3b42 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size)
{
 80a3b42:	b410      	push	{r4}
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a3b44:	6803      	ldr	r3, [r0, #0]
 80a3b46:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80a3b48:	f247 5330 	movw	r3, #30000	; 0x7530
 80a3b4c:	46a4      	mov	ip, r4
}
 80a3b4e:	bc10      	pop	{r4}
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size)
{
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a3b50:	4760      	bx	ip

080a3b52 <_ZN9TCPClient5writeEhm>:
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout)
{
 80a3b52:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a3b54:	ac02      	add	r4, sp, #8
    return write(&b, 1, timeout);
 80a3b56:	6803      	ldr	r3, [r0, #0]
{
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout)
{
 80a3b58:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, timeout);
 80a3b5c:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 80a3b5e:	4621      	mov	r1, r4
 80a3b60:	4613      	mov	r3, r2
 80a3b62:	2201      	movs	r2, #1
 80a3b64:	47a8      	blx	r5
}
 80a3b66:	b003      	add	sp, #12
 80a3b68:	bd30      	pop	{r4, r5, pc}

080a3b6a <_ZN9TCPClient5flushEv>:
  d_->offset = 0;
  d_->total = 0;
}

void TCPClient::flush()
{
 80a3b6a:	4770      	bx	lr

080a3b6c <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
 80a3b6c:	4770      	bx	lr

080a3b6e <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
 80a3b6e:	2000      	movs	r0, #0
 80a3b70:	4770      	bx	lr

080a3b72 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
 80a3b72:	b510      	push	{r4, lr}
 80a3b74:	4604      	mov	r4, r0
 80a3b76:	2114      	movs	r1, #20
 80a3b78:	f001 fc16 	bl	80a53a8 <_ZdlPvj>
 80a3b7c:	4620      	mov	r0, r4
 80a3b7e:	bd10      	pop	{r4, pc}

080a3b80 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
 80a3b80:	f7fc ba91 	b.w	80a00a6 <_ZdlPv>

080a3b84 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.2.constprop.28>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
 80a3b84:	b510      	push	{r4, lr}
 80a3b86:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
 80a3b88:	6803      	ldr	r3, [r0, #0]
 80a3b8a:	689b      	ldr	r3, [r3, #8]
 80a3b8c:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a3b8e:	68a3      	ldr	r3, [r4, #8]
 80a3b90:	3b01      	subs	r3, #1
 80a3b92:	60a3      	str	r3, [r4, #8]
 80a3b94:	b92b      	cbnz	r3, 80a3ba2 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.2.constprop.28+0x1e>
            _M_destroy();
 80a3b96:	6823      	ldr	r3, [r4, #0]
 80a3b98:	4620      	mov	r0, r4
        }
    }
 80a3b9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
 80a3b9e:	68db      	ldr	r3, [r3, #12]
 80a3ba0:	4718      	bx	r3
 80a3ba2:	bd10      	pop	{r4, pc}

080a3ba4 <_ZN9TCPClient8remoteIPEv>:
{
   return (status()!=0);
}

IPAddress TCPClient::remoteIP()
{
 80a3ba4:	b570      	push	{r4, r5, r6, lr}

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 80a3ba6:	4604      	mov	r4, r0
 80a3ba8:	4606      	mov	r6, r0
 80a3baa:	694d      	ldr	r5, [r1, #20]
 80a3bac:	4b04      	ldr	r3, [pc, #16]	; (80a3bc0 <_ZN9TCPClient8remoteIPEv+0x1c>)
 80a3bae:	358c      	adds	r5, #140	; 0x8c
 80a3bb0:	f844 3b04 	str.w	r3, [r4], #4
 80a3bb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a3bb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a3bb8:	682b      	ldr	r3, [r5, #0]
    return d_->remoteIP;
}
 80a3bba:	4630      	mov	r0, r6
 80a3bbc:	7023      	strb	r3, [r4, #0]
 80a3bbe:	bd70      	pop	{r4, r5, r6, pc}
 80a3bc0:	080aa22c 	.word	0x080aa22c

080a3bc4 <_ZN9TCPClient4peekEv>:
        }
        return read;
}

int TCPClient::peek()
{
 80a3bc4:	b510      	push	{r4, lr}
 80a3bc6:	6943      	ldr	r3, [r0, #20]
 80a3bc8:	4604      	mov	r4, r0
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
 80a3bca:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a3bce:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80a3bd2:	429a      	cmp	r2, r3
 80a3bd4:	d005      	beq.n	80a3be2 <_ZN9TCPClient4peekEv+0x1e>
 80a3bd6:	6962      	ldr	r2, [r4, #20]
 80a3bd8:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 80a3bdc:	4413      	add	r3, r2
 80a3bde:	7918      	ldrb	r0, [r3, #4]
 80a3be0:	bd10      	pop	{r4, pc}
 80a3be2:	6803      	ldr	r3, [r0, #0]
 80a3be4:	691b      	ldr	r3, [r3, #16]
 80a3be6:	4798      	blx	r3
 80a3be8:	2800      	cmp	r0, #0
 80a3bea:	d1f4      	bne.n	80a3bd6 <_ZN9TCPClient4peekEv+0x12>
 80a3bec:	f04f 30ff 	mov.w	r0, #4294967295
}
 80a3bf0:	bd10      	pop	{r4, pc}

080a3bf2 <_ZN9TCPClient4readEv>:
    avail = bufferCount();
    return avail;
}

int TCPClient::read()
{
 80a3bf2:	b510      	push	{r4, lr}
 80a3bf4:	6943      	ldr	r3, [r0, #20]
 80a3bf6:	4604      	mov	r4, r0
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
 80a3bf8:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a3bfc:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80a3c00:	429a      	cmp	r2, r3
 80a3c02:	d008      	beq.n	80a3c16 <_ZN9TCPClient4readEv+0x24>
 80a3c04:	6962      	ldr	r2, [r4, #20]
 80a3c06:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 80a3c0a:	1c59      	adds	r1, r3, #1
 80a3c0c:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
 80a3c10:	4413      	add	r3, r2
 80a3c12:	7918      	ldrb	r0, [r3, #4]
 80a3c14:	bd10      	pop	{r4, pc}
 80a3c16:	6803      	ldr	r3, [r0, #0]
 80a3c18:	691b      	ldr	r3, [r3, #16]
 80a3c1a:	4798      	blx	r3
 80a3c1c:	2800      	cmp	r0, #0
 80a3c1e:	d1f1      	bne.n	80a3c04 <_ZN9TCPClient4readEv+0x12>
 80a3c20:	f04f 30ff 	mov.w	r0, #4294967295
}
 80a3c24:	bd10      	pop	{r4, pc}

080a3c26 <_ZN9TCPClient4readEPhj>:

int TCPClient::read(uint8_t *buffer, size_t size)
{
 80a3c26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a3c28:	6943      	ldr	r3, [r0, #20]
 80a3c2a:	4617      	mov	r7, r2
        int read = -1;
        if (bufferCount() || available())
 80a3c2c:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a3c30:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
{
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size)
{
 80a3c34:	4605      	mov	r5, r0
        int read = -1;
        if (bufferCount() || available())
 80a3c36:	429a      	cmp	r2, r3
{
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size)
{
 80a3c38:	460e      	mov	r6, r1
        int read = -1;
        if (bufferCount() || available())
 80a3c3a:	d106      	bne.n	80a3c4a <_ZN9TCPClient4readEPhj+0x24>
 80a3c3c:	6803      	ldr	r3, [r0, #0]
 80a3c3e:	691b      	ldr	r3, [r3, #16]
 80a3c40:	4798      	blx	r3
 80a3c42:	b910      	cbnz	r0, 80a3c4a <_ZN9TCPClient4readEPhj+0x24>
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size)
{
        int read = -1;
 80a3c44:	f04f 34ff 	mov.w	r4, #4294967295
 80a3c48:	e014      	b.n	80a3c74 <_ZN9TCPClient4readEPhj+0x4e>
 80a3c4a:	6969      	ldr	r1, [r5, #20]
        if (bufferCount() || available())
        {
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80a3c4c:	4630      	mov	r0, r6
    return ret;
}

int TCPClient::bufferCount()
{
  return d_->total - d_->offset;
 80a3c4e:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
 80a3c52:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
{
        int read = -1;
        if (bufferCount() || available())
        {
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80a3c56:	4419      	add	r1, r3
    return ret;
}

int TCPClient::bufferCount()
{
  return d_->total - d_->offset;
 80a3c58:	1ae4      	subs	r4, r4, r3
int TCPClient::read(uint8_t *buffer, size_t size)
{
        int read = -1;
        if (bufferCount() || available())
        {
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
 80a3c5a:	42bc      	cmp	r4, r7
 80a3c5c:	bf28      	it	cs
 80a3c5e:	463c      	movcs	r4, r7
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80a3c60:	3104      	adds	r1, #4
 80a3c62:	4622      	mov	r2, r4
 80a3c64:	f002 fff4 	bl	80a6c50 <memcpy>
 80a3c68:	696a      	ldr	r2, [r5, #20]
          d_->offset += read;
 80a3c6a:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 80a3c6e:	4423      	add	r3, r4
 80a3c70:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
        }
        return read;
}
 80a3c74:	4620      	mov	r0, r4
 80a3c76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a3c78 <_ZN9TCPClient12flush_bufferEv>:
{
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
}

void TCPClient::flush_buffer()
{
 80a3c78:	6942      	ldr	r2, [r0, #20]
  d_->offset = 0;
 80a3c7a:	2300      	movs	r3, #0
 80a3c7c:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
 80a3c80:	6942      	ldr	r2, [r0, #20]
  d_->total = 0;
 80a3c82:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
 80a3c86:	4770      	bx	lr

080a3c88 <_ZN9TCPClient9availableEv>:
{
  return d_->total - d_->offset;
}

int TCPClient::available()
{
 80a3c88:	b538      	push	{r3, r4, r5, lr}
 80a3c8a:	6942      	ldr	r2, [r0, #20]
 80a3c8c:	4604      	mov	r4, r0
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total))
 80a3c8e:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 80a3c92:	b11b      	cbz	r3, 80a3c9c <_ZN9TCPClient9availableEv+0x14>
 80a3c94:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
 80a3c98:	429a      	cmp	r2, r3
 80a3c9a:	d00c      	beq.n	80a3cb6 <_ZN9TCPClient9availableEv+0x2e>
    {
        flush_buffer();
    }

    if(Network.from(nif).ready() && isOpen(d_->sock))
 80a3c9c:	6920      	ldr	r0, [r4, #16]
 80a3c9e:	f001 fa8b 	bl	80a51b8 <_ZN5spark12NetworkClass4fromEm>
 80a3ca2:	6803      	ldr	r3, [r0, #0]
 80a3ca4:	68db      	ldr	r3, [r3, #12]
 80a3ca6:	4798      	blx	r3
 80a3ca8:	b318      	cbz	r0, 80a3cf2 <_ZN9TCPClient9availableEv+0x6a>
 80a3caa:	6963      	ldr	r3, [r4, #20]

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 80a3cac:	6818      	ldr	r0, [r3, #0]
 80a3cae:	f7ff fce3 	bl	80a3678 <socket_handle_valid>
    if (d_->total && (d_->offset == d_->total))
    {
        flush_buffer();
    }

    if(Network.from(nif).ready() && isOpen(d_->sock))
 80a3cb2:	b918      	cbnz	r0, 80a3cbc <_ZN9TCPClient9availableEv+0x34>
 80a3cb4:	e01d      	b.n	80a3cf2 <_ZN9TCPClient9availableEv+0x6a>
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total))
    {
        flush_buffer();
 80a3cb6:	f7ff ffdf 	bl	80a3c78 <_ZN9TCPClient12flush_bufferEv>
 80a3cba:	e7ef      	b.n	80a3c9c <_ZN9TCPClient9availableEv+0x14>
 80a3cbc:	6960      	ldr	r0, [r4, #20]
    }

    if(Network.from(nif).ready() && isOpen(d_->sock))
    {
        // Have room
        if ( d_->total < arraySize(d_->buffer))
 80a3cbe:	f8b0 1086 	ldrh.w	r1, [r0, #134]	; 0x86
 80a3cc2:	297f      	cmp	r1, #127	; 0x7f
 80a3cc4:	d815      	bhi.n	80a3cf2 <_ZN9TCPClient9availableEv+0x6a>
        {
            int ret = socket_receive(d_->sock, d_->buffer + d_->total , arraySize(d_->buffer)-d_->total, 0);
 80a3cc6:	1d05      	adds	r5, r0, #4
 80a3cc8:	f1c1 0280 	rsb	r2, r1, #128	; 0x80
 80a3ccc:	2300      	movs	r3, #0
 80a3cce:	4429      	add	r1, r5
 80a3cd0:	6800      	ldr	r0, [r0, #0]
 80a3cd2:	f7ff fce9 	bl	80a36a8 <socket_receive>
            if (ret > 0)
 80a3cd6:	2800      	cmp	r0, #0
 80a3cd8:	dd0b      	ble.n	80a3cf2 <_ZN9TCPClient9availableEv+0x6a>
 80a3cda:	6963      	ldr	r3, [r4, #20]
            {
                DEBUG("recv(=%d)",ret);
                if (d_->total == 0) d_->offset = 0;
 80a3cdc:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a3ce0:	b90a      	cbnz	r2, 80a3ce6 <_ZN9TCPClient9availableEv+0x5e>
 80a3ce2:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 80a3ce6:	6962      	ldr	r2, [r4, #20]
                d_->total += ret;
 80a3ce8:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 80a3cec:	4418      	add	r0, r3
 80a3cee:	f8a2 0086 	strh.w	r0, [r2, #134]	; 0x86
 80a3cf2:	6962      	ldr	r2, [r4, #20]
            }
        } // Have Space
    } // WiFi.ready() && isOpen(d_->sock)
    avail = bufferCount();
    return avail;
 80a3cf4:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 80a3cf8:	f8b2 0084 	ldrh.w	r0, [r2, #132]	; 0x84
 80a3cfc:	1a18      	subs	r0, r3, r0
}
 80a3cfe:	bd38      	pop	{r3, r4, r5, pc}

080a3d00 <_ZN9TCPClient4stopEv>:
{
}


void TCPClient::stop()
{
 80a3d00:	b538      	push	{r3, r4, r5, lr}
  // This log line pollutes the log too much
  // DEBUG("sock %d closesocket", d_->sock);

  if (isOpen(d_->sock))
 80a3d02:	6943      	ldr	r3, [r0, #20]
{
}


void TCPClient::stop()
{
 80a3d04:	4604      	mov	r4, r0

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 80a3d06:	6818      	ldr	r0, [r3, #0]
 80a3d08:	f7ff fcb6 	bl	80a3678 <socket_handle_valid>
void TCPClient::stop()
{
  // This log line pollutes the log too much
  // DEBUG("sock %d closesocket", d_->sock);

  if (isOpen(d_->sock))
 80a3d0c:	b118      	cbz	r0, 80a3d16 <_ZN9TCPClient4stopEv+0x16>
      socket_close(d_->sock);
 80a3d0e:	6963      	ldr	r3, [r4, #20]
 80a3d10:	6818      	ldr	r0, [r3, #0]
 80a3d12:	f7ff fcd1 	bl	80a36b8 <socket_close>
 80a3d16:	6965      	ldr	r5, [r4, #20]
  d_->sock = socket_handle_invalid();
 80a3d18:	f7ff fcd6 	bl	80a36c8 <socket_handle_invalid>
 80a3d1c:	6028      	str	r0, [r5, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a3d1e:	6960      	ldr	r0, [r4, #20]
 80a3d20:	2211      	movs	r2, #17
 80a3d22:	2100      	movs	r1, #0
 80a3d24:	308c      	adds	r0, #140	; 0x8c
 80a3d26:	f002 ff9e 	bl	80a6c66 <memset>
  d_->remoteIP.clear();
  flush_buffer();
 80a3d2a:	4620      	mov	r0, r4
}
 80a3d2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

  if (isOpen(d_->sock))
      socket_close(d_->sock);
  d_->sock = socket_handle_invalid();
  d_->remoteIP.clear();
  flush_buffer();
 80a3d30:	f7ff bfa2 	b.w	80a3c78 <_ZN9TCPClient12flush_bufferEv>

080a3d34 <_ZN9TCPClient7connectE9IPAddresstm>:
    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif)
{
 80a3d34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a3d38:	461f      	mov	r7, r3
    stop();
 80a3d3a:	6803      	ldr	r3, [r0, #0]
    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif)
{
 80a3d3c:	b08a      	sub	sp, #40	; 0x28
    stop();
 80a3d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif)
{
 80a3d40:	4606      	mov	r6, r0
 80a3d42:	460c      	mov	r4, r1
 80a3d44:	4615      	mov	r5, r2
    stop();
 80a3d46:	4798      	blx	r3
        int connected = 0;
        if(Network.from(nif).ready())
 80a3d48:	4638      	mov	r0, r7
 80a3d4a:	f001 fa35 	bl	80a51b8 <_ZN5spark12NetworkClass4fromEm>
 80a3d4e:	6803      	ldr	r3, [r0, #0]
 80a3d50:	68db      	ldr	r3, [r3, #12]
 80a3d52:	4798      	blx	r3
 80a3d54:	2800      	cmp	r0, #0
 80a3d56:	d056      	beq.n	80a3e06 <_ZN9TCPClient7connectE9IPAddresstm+0xd2>
        {
          sockaddr_t tSocketAddr;
          d_->sock = socket_create(AF_INET, SOCK_STREAM, IPPROTO_TCP, port, nif);
 80a3d58:	9700      	str	r7, [sp, #0]
 80a3d5a:	462b      	mov	r3, r5
 80a3d5c:	2206      	movs	r2, #6
 80a3d5e:	2101      	movs	r1, #1
 80a3d60:	2002      	movs	r0, #2
 80a3d62:	f8d6 8014 	ldr.w	r8, [r6, #20]
 80a3d66:	f7ff fc8f 	bl	80a3688 <socket_create>
          LOG(TRACE, "TCPClient socket=%x", d_->sock);
 80a3d6a:	2320      	movs	r3, #32
    stop();
        int connected = 0;
        if(Network.from(nif).ready())
        {
          sockaddr_t tSocketAddr;
          d_->sock = socket_create(AF_INET, SOCK_STREAM, IPPROTO_TCP, port, nif);
 80a3d6c:	f8c8 0000 	str.w	r0, [r8]
          LOG(TRACE, "TCPClient socket=%x", d_->sock);
 80a3d70:	2700      	movs	r7, #0
 80a3d72:	9302      	str	r3, [sp, #8]
 80a3d74:	6973      	ldr	r3, [r6, #20]
 80a3d76:	9703      	str	r7, [sp, #12]
 80a3d78:	681b      	ldr	r3, [r3, #0]
 80a3d7a:	2001      	movs	r0, #1
 80a3d7c:	9301      	str	r3, [sp, #4]
 80a3d7e:	4b23      	ldr	r3, [pc, #140]	; (80a3e0c <_ZN9TCPClient7connectE9IPAddresstm+0xd8>)
 80a3d80:	aa02      	add	r2, sp, #8
 80a3d82:	9300      	str	r3, [sp, #0]
 80a3d84:	4922      	ldr	r1, [pc, #136]	; (80a3e10 <_ZN9TCPClient7connectE9IPAddresstm+0xdc>)
 80a3d86:	463b      	mov	r3, r7
 80a3d88:	f7ff fd06 	bl	80a3798 <log_message>

          if (socket_handle_valid(d_->sock))
 80a3d8c:	6973      	ldr	r3, [r6, #20]
 80a3d8e:	6818      	ldr	r0, [r3, #0]
 80a3d90:	f7ff fc72 	bl	80a3678 <socket_handle_valid>
 80a3d94:	2800      	cmp	r0, #0
 80a3d96:	d036      	beq.n	80a3e06 <_ZN9TCPClient7connectE9IPAddresstm+0xd2>
          {
            flush_buffer();
 80a3d98:	4630      	mov	r0, r6
 80a3d9a:	f7ff ff6d 	bl	80a3c78 <_ZN9TCPClient12flush_bufferEv>

            tSocketAddr.sa_family = AF_INET;
 80a3d9e:	2302      	movs	r3, #2
 80a3da0:	f8ad 3008 	strh.w	r3, [sp, #8]

            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80a3da4:	0a2b      	lsrs	r3, r5, #8
 80a3da6:	f88d 300a 	strb.w	r3, [sp, #10]
            tSocketAddr.sa_data[1] = (port & 0x00FF);

            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 80a3daa:	79e3      	ldrb	r3, [r4, #7]
            tSocketAddr.sa_data[3] = ip[1];
            tSocketAddr.sa_data[4] = ip[2];
            tSocketAddr.sa_data[5] = ip[3];


            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a3dac:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
            tSocketAddr.sa_family = AF_INET;

            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
            tSocketAddr.sa_data[1] = (port & 0x00FF);

            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 80a3db0:	f88d 300c 	strb.w	r3, [sp, #12]
            tSocketAddr.sa_data[3] = ip[1];
 80a3db4:	79a3      	ldrb	r3, [r4, #6]
            flush_buffer();

            tSocketAddr.sa_family = AF_INET;

            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
            tSocketAddr.sa_data[1] = (port & 0x00FF);
 80a3db6:	f88d 500b 	strb.w	r5, [sp, #11]

            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
            tSocketAddr.sa_data[3] = ip[1];
 80a3dba:	f88d 300d 	strb.w	r3, [sp, #13]
            tSocketAddr.sa_data[4] = ip[2];
 80a3dbe:	7963      	ldrb	r3, [r4, #5]
 80a3dc0:	f88d 300e 	strb.w	r3, [sp, #14]
            tSocketAddr.sa_data[5] = ip[3];
 80a3dc4:	f814 3f04 	ldrb.w	r3, [r4, #4]!
 80a3dc8:	f88d 300f 	strb.w	r3, [sp, #15]


            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a3dcc:	f7ff fcc4 	bl	80a3758 <HAL_NET_SetNetWatchDog>
            DEBUG("sock %d connect",d_->sock);
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80a3dd0:	6973      	ldr	r3, [r6, #20]
            tSocketAddr.sa_data[3] = ip[1];
            tSocketAddr.sa_data[4] = ip[2];
            tSocketAddr.sa_data[5] = ip[3];


            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a3dd2:	4605      	mov	r5, r0
            DEBUG("sock %d connect",d_->sock);
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80a3dd4:	2210      	movs	r2, #16
 80a3dd6:	a902      	add	r1, sp, #8
 80a3dd8:	6818      	ldr	r0, [r3, #0]
 80a3dda:	f7ff fc5d 	bl	80a3698 <socket_connect>
 80a3dde:	4680      	mov	r8, r0
            DEBUG("sock %d connected=%d",d_->sock, connected);
            HAL_NET_SetNetWatchDog(ot);
 80a3de0:	4628      	mov	r0, r5
 80a3de2:	f7ff fcb9 	bl	80a3758 <HAL_NET_SetNetWatchDog>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 80a3de6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a3de8:	6975      	ldr	r5, [r6, #20]
 80a3dea:	358c      	adds	r5, #140	; 0x8c
 80a3dec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a3dee:	6823      	ldr	r3, [r4, #0]
 80a3df0:	702b      	strb	r3, [r5, #0]
            d_->remoteIP = ip;
            if(!connected)
 80a3df2:	f1b8 0f00 	cmp.w	r8, #0
 80a3df6:	d005      	beq.n	80a3e04 <_ZN9TCPClient7connectE9IPAddresstm+0xd0>
            {
                stop();
 80a3df8:	6833      	ldr	r3, [r6, #0]
 80a3dfa:	4630      	mov	r0, r6
 80a3dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a3dfe:	4798      	blx	r3
 80a3e00:	4638      	mov	r0, r7
 80a3e02:	e000      	b.n	80a3e06 <_ZN9TCPClient7connectE9IPAddresstm+0xd2>
            DEBUG("sock %d connect",d_->sock);
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
            DEBUG("sock %d connected=%d",d_->sock, connected);
            HAL_NET_SetNetWatchDog(ot);
            d_->remoteIP = ip;
            if(!connected)
 80a3e04:	2001      	movs	r0, #1
                stop();
            }
          }
        }
        return connected;
}
 80a3e06:	b00a      	add	sp, #40	; 0x28
 80a3e08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a3e0c:	080aa0ff 	.word	0x080aa0ff
 80a3e10:	080aa0f8 	.word	0x080aa0f8

080a3e14 <_ZN9TCPClient6statusEv>:
  }
  return rv;
}

uint8_t TCPClient::status()
{
 80a3e14:	b510      	push	{r4, lr}
  return (isOpen(d_->sock) && Network.from(nif).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80a3e16:	6943      	ldr	r3, [r0, #20]
  }
  return rv;
}

uint8_t TCPClient::status()
{
 80a3e18:	4604      	mov	r4, r0

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 80a3e1a:	6818      	ldr	r0, [r3, #0]
 80a3e1c:	f7ff fc2c 	bl	80a3678 <socket_handle_valid>
  return rv;
}

uint8_t TCPClient::status()
{
  return (isOpen(d_->sock) && Network.from(nif).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80a3e20:	b908      	cbnz	r0, 80a3e26 <_ZN9TCPClient6statusEv+0x12>
 80a3e22:	2000      	movs	r0, #0
 80a3e24:	bd10      	pop	{r4, pc}
 80a3e26:	6920      	ldr	r0, [r4, #16]
 80a3e28:	f001 f9c6 	bl	80a51b8 <_ZN5spark12NetworkClass4fromEm>
 80a3e2c:	6803      	ldr	r3, [r0, #0]
 80a3e2e:	68db      	ldr	r3, [r3, #12]
 80a3e30:	4798      	blx	r3
 80a3e32:	2800      	cmp	r0, #0
 80a3e34:	d0f5      	beq.n	80a3e22 <_ZN9TCPClient6statusEv+0xe>
 80a3e36:	6963      	ldr	r3, [r4, #20]
 80a3e38:	6818      	ldr	r0, [r3, #0]
 80a3e3a:	f7ff fc15 	bl	80a3668 <socket_active_status>
 80a3e3e:	fab0 f080 	clz	r0, r0
 80a3e42:	0940      	lsrs	r0, r0, #5
}
 80a3e44:	bd10      	pop	{r4, pc}

080a3e46 <_ZN9TCPClient5writeEPKhjm>:
{
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout)
{
 80a3e46:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}

    size_t printNumber(unsigned long, uint8_t);
    size_t printNumber(unsigned long long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
 80a3e4a:	2500      	movs	r5, #0
 80a3e4c:	6045      	str	r5, [r0, #4]
 80a3e4e:	4604      	mov	r4, r0
 80a3e50:	460e      	mov	r6, r1
 80a3e52:	4617      	mov	r7, r2
 80a3e54:	4698      	mov	r8, r3
    clearWriteError();
    int ret = status() ? socket_send_ex(d_->sock, buffer, size, 0, timeout, nullptr) : -1;
 80a3e56:	f7ff ffdd 	bl	80a3e14 <_ZN9TCPClient6statusEv>
 80a3e5a:	b160      	cbz	r0, 80a3e76 <_ZN9TCPClient5writeEPKhjm+0x30>
 80a3e5c:	6960      	ldr	r0, [r4, #20]
 80a3e5e:	9501      	str	r5, [sp, #4]
 80a3e60:	f8cd 8000 	str.w	r8, [sp]
 80a3e64:	462b      	mov	r3, r5
 80a3e66:	463a      	mov	r2, r7
 80a3e68:	4631      	mov	r1, r6
 80a3e6a:	6800      	ldr	r0, [r0, #0]
 80a3e6c:	f7ff fc34 	bl	80a36d8 <socket_send_ex>
    if (ret < 0) {
 80a3e70:	2800      	cmp	r0, #0
 80a3e72:	da03      	bge.n	80a3e7c <_ZN9TCPClient5writeEPKhjm+0x36>
 80a3e74:	e001      	b.n	80a3e7a <_ZN9TCPClient5writeEPKhjm+0x34>
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout)
{
    clearWriteError();
    int ret = status() ? socket_send_ex(d_->sock, buffer, size, 0, timeout, nullptr) : -1;
 80a3e76:	f04f 30ff 	mov.w	r0, #4294967295
 80a3e7a:	6060      	str	r0, [r4, #4]

    /*
     * FIXME: We should not be returning negative numbers here
     */
    return ret;
}
 80a3e7c:	b002      	add	sp, #8
 80a3e7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a3e82 <_ZN9TCPClient9connectedEv>:
  d_->remoteIP.clear();
  flush_buffer();
}

uint8_t TCPClient::connected()
{
 80a3e82:	b538      	push	{r3, r4, r5, lr}
 80a3e84:	4604      	mov	r4, r0
  // Wlan up, open and not in CLOSE_WAIT or data still in the local buffer
  bool rv = (status() || bufferCount());
 80a3e86:	f7ff ffc5 	bl	80a3e14 <_ZN9TCPClient6statusEv>
 80a3e8a:	bb00      	cbnz	r0, 80a3ece <_ZN9TCPClient9connectedEv+0x4c>
 80a3e8c:	6963      	ldr	r3, [r4, #20]
 80a3e8e:	f8b3 1086 	ldrh.w	r1, [r3, #134]	; 0x86
 80a3e92:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 80a3e96:	4291      	cmp	r1, r2
 80a3e98:	d119      	bne.n	80a3ece <_ZN9TCPClient9connectedEv+0x4c>

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 80a3e9a:	6818      	ldr	r0, [r3, #0]
 80a3e9c:	f7ff fbec 	bl	80a3678 <socket_handle_valid>
uint8_t TCPClient::connected()
{
  // Wlan up, open and not in CLOSE_WAIT or data still in the local buffer
  bool rv = (status() || bufferCount());
  // no data in the local buffer, Socket open but my be in CLOSE_WAIT yet the CC3000 may have data in its buffer
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
 80a3ea0:	b128      	cbz	r0, 80a3eae <_ZN9TCPClient9connectedEv+0x2c>
 80a3ea2:	6963      	ldr	r3, [r4, #20]
 80a3ea4:	6818      	ldr	r0, [r3, #0]
 80a3ea6:	f7ff fbdf 	bl	80a3668 <socket_active_status>
 80a3eaa:	2801      	cmp	r0, #1
 80a3eac:	d001      	beq.n	80a3eb2 <_ZN9TCPClient9connectedEv+0x30>
}

uint8_t TCPClient::connected()
{
  // Wlan up, open and not in CLOSE_WAIT or data still in the local buffer
  bool rv = (status() || bufferCount());
 80a3eae:	2500      	movs	r5, #0
 80a3eb0:	e00e      	b.n	80a3ed0 <_ZN9TCPClient9connectedEv+0x4e>
  // no data in the local buffer, Socket open but my be in CLOSE_WAIT yet the CC3000 may have data in its buffer
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
    {
      rv = available(); // Try CC3000
 80a3eb2:	6823      	ldr	r3, [r4, #0]
 80a3eb4:	4620      	mov	r0, r4
 80a3eb6:	691b      	ldr	r3, [r3, #16]
 80a3eb8:	4798      	blx	r3
 80a3eba:	2800      	cmp	r0, #0
 80a3ebc:	bf14      	ite	ne
 80a3ebe:	2501      	movne	r5, #1
 80a3ec0:	2500      	moveq	r5, #0
      if (!rv) {        // No more Data and CLOSE_WAIT
 80a3ec2:	d105      	bne.n	80a3ed0 <_ZN9TCPClient9connectedEv+0x4e>
          DEBUG("calling .stop(), no more data, in CLOSE_WAIT");
          stop();       // Close our side
 80a3ec4:	6823      	ldr	r3, [r4, #0]
 80a3ec6:	4620      	mov	r0, r4
 80a3ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a3eca:	4798      	blx	r3
 80a3ecc:	e000      	b.n	80a3ed0 <_ZN9TCPClient9connectedEv+0x4e>
 80a3ece:	2501      	movs	r5, #1
      }
  }
  return rv;
}
 80a3ed0:	4628      	mov	r0, r5
 80a3ed2:	bd38      	pop	{r3, r4, r5, pc}

080a3ed4 <_ZN9TCPClientcvbEv>:
{
  return (isOpen(d_->sock) && Network.from(nif).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
}

TCPClient::operator bool()
{
 80a3ed4:	b508      	push	{r3, lr}
   return (status()!=0);
 80a3ed6:	f7ff ff9d 	bl	80a3e14 <_ZN9TCPClient6statusEv>
}
 80a3eda:	3000      	adds	r0, #0
 80a3edc:	bf18      	it	ne
 80a3ede:	2001      	movne	r0, #1
 80a3ee0:	bd08      	pop	{r3, pc}

080a3ee2 <_ZN9TCPClient4DataC1Em>:
IPAddress TCPClient::remoteIP()
{
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
 80a3ee2:	b510      	push	{r4, lr}
 80a3ee4:	4604      	mov	r4, r0
        : sock(sock),
          offset(0),
          total(0) {
 80a3ee6:	2300      	movs	r3, #0
 80a3ee8:	6001      	str	r1, [r0, #0]
 80a3eea:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 80a3eee:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
 80a3ef2:	3088      	adds	r0, #136	; 0x88
 80a3ef4:	f000 fe04 	bl	80a4b00 <_ZN9IPAddressC1Ev>
}
 80a3ef8:	4620      	mov	r0, r4
 80a3efa:	bd10      	pop	{r4, pc}

080a3efc <_ZN9TCPClientC1Em>:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a3efc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
{
}

TCPClient::TCPClient(sock_handle_t sock) :
 80a3f00:	b570      	push	{r4, r5, r6, lr}
 80a3f02:	6082      	str	r2, [r0, #8]
        d_(std::make_shared<Data>(sock))
 80a3f04:	4a14      	ldr	r2, [pc, #80]	; (80a3f58 <_ZN9TCPClientC1Em+0x5c>)
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a3f06:	2300      	movs	r3, #0
 80a3f08:	6043      	str	r3, [r0, #4]
 80a3f0a:	6002      	str	r2, [r0, #0]
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
 80a3f0c:	6143      	str	r3, [r0, #20]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
 80a3f0e:	6183      	str	r3, [r0, #24]

TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
{
}

TCPClient::TCPClient(sock_handle_t sock) :
 80a3f10:	4604      	mov	r4, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80a3f12:	20a0      	movs	r0, #160	; 0xa0
 80a3f14:	460e      	mov	r6, r1
 80a3f16:	f7fc f8c2 	bl	80a009e <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80a3f1a:	4605      	mov	r5, r0
 80a3f1c:	b110      	cbz	r0, 80a3f24 <_ZN9TCPClientC1Em+0x28>
 80a3f1e:	4631      	mov	r1, r6
 80a3f20:	f7ff ffdf 	bl	80a3ee2 <_ZN9TCPClient4DataC1Em>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80a3f24:	2014      	movs	r0, #20
 80a3f26:	f7fc f8ba 	bl	80a009e <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
 80a3f2a:	4603      	mov	r3, r0
 80a3f2c:	b128      	cbz	r0, 80a3f3a <_ZN9TCPClientC1Em+0x3e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 80a3f2e:	2201      	movs	r2, #1
 80a3f30:	6042      	str	r2, [r0, #4]
 80a3f32:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
 80a3f34:	4a09      	ldr	r2, [pc, #36]	; (80a3f5c <_ZN9TCPClientC1Em+0x60>)
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
 80a3f36:	6105      	str	r5, [r0, #16]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
 80a3f38:	6002      	str	r2, [r0, #0]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 80a3f3a:	69a0      	ldr	r0, [r4, #24]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
 80a3f3c:	6165      	str	r5, [r4, #20]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 80a3f3e:	61a3      	str	r3, [r4, #24]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 80a3f40:	b128      	cbz	r0, 80a3f4e <_ZN9TCPClientC1Em+0x52>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a3f42:	6843      	ldr	r3, [r0, #4]
 80a3f44:	3b01      	subs	r3, #1
 80a3f46:	6043      	str	r3, [r0, #4]
 80a3f48:	b90b      	cbnz	r3, 80a3f4e <_ZN9TCPClientC1Em+0x52>
 80a3f4a:	f7ff fe1b 	bl	80a3b84 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.2.constprop.28>
        d_(std::make_shared<Data>(sock))
{
  flush_buffer();
 80a3f4e:	4620      	mov	r0, r4
 80a3f50:	f7ff fe92 	bl	80a3c78 <_ZN9TCPClient12flush_bufferEv>
}
 80a3f54:	4620      	mov	r0, r4
 80a3f56:	bd70      	pop	{r4, r5, r6, pc}
 80a3f58:	080aa0b4 	.word	0x080aa0b4
 80a3f5c:	080aa098 	.word	0x080aa098

080a3f60 <_ZN9TCPClientC1Ev>:
static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
}

TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
 80a3f60:	b510      	push	{r4, lr}
 80a3f62:	4604      	mov	r4, r0
 80a3f64:	f7ff fbb0 	bl	80a36c8 <socket_handle_invalid>
 80a3f68:	4601      	mov	r1, r0
 80a3f6a:	4620      	mov	r0, r4
 80a3f6c:	f7ff ffc6 	bl	80a3efc <_ZN9TCPClientC1Em>
{
}
 80a3f70:	4620      	mov	r0, r4
 80a3f72:	bd10      	pop	{r4, pc}

080a3f74 <_ZN9TCPClient4DataD1Ev>:
        : sock(sock),
          offset(0),
          total(0) {
}

TCPClient::Data::~Data() {
 80a3f74:	b510      	push	{r4, lr}
 80a3f76:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
 80a3f78:	6800      	ldr	r0, [r0, #0]
 80a3f7a:	f7ff fb7d 	bl	80a3678 <socket_handle_valid>
 80a3f7e:	b110      	cbz	r0, 80a3f86 <_ZN9TCPClient4DataD1Ev+0x12>
        socket_close(sock);
 80a3f80:	6820      	ldr	r0, [r4, #0]
 80a3f82:	f7ff fb99 	bl	80a36b8 <socket_close>
    }
}
 80a3f86:	4620      	mov	r0, r4
 80a3f88:	bd10      	pop	{r4, pc}

080a3f8a <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
 80a3f8a:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
 80a3f8c:	6904      	ldr	r4, [r0, #16]
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
        void 
        destroy(_Up* __p) { __p->~_Up(); }
 80a3f8e:	4620      	mov	r0, r4
 80a3f90:	f7ff fff0 	bl	80a3f74 <_ZN9TCPClient4DataD1Ev>
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
      {
	if (_M_ptr != nullptr)
 80a3f94:	b124      	cbz	r4, 80a3fa0 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x16>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
 80a3f96:	4620      	mov	r0, r4
 80a3f98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a3f9c:	f7fc b883 	b.w	80a00a6 <_ZdlPv>
 80a3fa0:	bd10      	pop	{r4, pc}
	...

080a3fa4 <_ZN9TCPClient7connectEPKctm>:
  flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif)
{
 80a3fa4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a3fa8:	461f      	mov	r7, r3
    stop();
 80a3faa:	6803      	ldr	r3, [r0, #0]
  flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif)
{
 80a3fac:	b08f      	sub	sp, #60	; 0x3c
    stop();
 80a3fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif)
{
 80a3fb0:	4606      	mov	r6, r0
 80a3fb2:	460d      	mov	r5, r1
 80a3fb4:	4690      	mov	r8, r2
    stop();
 80a3fb6:	4798      	blx	r3
    if (Network.ready())
 80a3fb8:	4813      	ldr	r0, [pc, #76]	; (80a4008 <_ZN9TCPClient7connectEPKctm+0x64>)
 80a3fba:	f001 f8b0 	bl	80a511e <_ZN5spark12NetworkClass5readyEv>
 80a3fbe:	b300      	cbz	r0, 80a4002 <_ZN9TCPClient7connectEPKctm+0x5e>
    {
        IPAddress ip_addr;
 80a3fc0:	a802      	add	r0, sp, #8
 80a3fc2:	f000 fd9d 	bl	80a4b00 <_ZN9IPAddressC1Ev>
        if (inet_gethostbyname(host, strlen(host), ip_addr, nif, NULL) == 0) {
 80a3fc6:	4628      	mov	r0, r5
 80a3fc8:	f003 fba4 	bl	80a7714 <strlen>
 80a3fcc:	2400      	movs	r4, #0
 80a3fce:	b281      	uxth	r1, r0
 80a3fd0:	9400      	str	r4, [sp, #0]
 80a3fd2:	463b      	mov	r3, r7
 80a3fd4:	aa03      	add	r2, sp, #12
 80a3fd6:	4628      	mov	r0, r5
 80a3fd8:	f7ff fbc6 	bl	80a3768 <inet_gethostbyname>
 80a3fdc:	b980      	cbnz	r0, 80a4000 <_ZN9TCPClient7connectEPKctm+0x5c>
            return connect(ip_addr, port, nif);
 80a3fde:	6833      	ldr	r3, [r6, #0]
 80a3fe0:	ad09      	add	r5, sp, #36	; 0x24
 80a3fe2:	f8d3 9020 	ldr.w	r9, [r3, #32]
 80a3fe6:	4b09      	ldr	r3, [pc, #36]	; (80a400c <_ZN9TCPClient7connectEPKctm+0x68>)
 80a3fe8:	ac03      	add	r4, sp, #12
 80a3fea:	9308      	str	r3, [sp, #32]
 80a3fec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a3fee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a3ff0:	6823      	ldr	r3, [r4, #0]
 80a3ff2:	4642      	mov	r2, r8
 80a3ff4:	702b      	strb	r3, [r5, #0]
 80a3ff6:	a908      	add	r1, sp, #32
 80a3ff8:	463b      	mov	r3, r7
 80a3ffa:	4630      	mov	r0, r6
 80a3ffc:	47c8      	blx	r9
 80a3ffe:	e000      	b.n	80a4002 <_ZN9TCPClient7connectEPKctm+0x5e>
        } else {
            DEBUG("unable to get IP for hostname");
        }
    }

    return 0; // error, could not connect
 80a4000:	4620      	mov	r0, r4
}
 80a4002:	b00f      	add	sp, #60	; 0x3c
 80a4004:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a4008:	200004dc 	.word	0x200004dc
 80a400c:	080aa22c 	.word	0x080aa22c

080a4010 <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
 80a4010:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a4014:	4680      	mov	r8, r0
 80a4016:	460d      	mov	r5, r1
 80a4018:	4617      	mov	r7, r2
 80a401a:	461e      	mov	r6, r3
    bool negative = val<0;
    if (negative) {
 80a401c:	2200      	movs	r2, #0
 80a401e:	2300      	movs	r3, #0
 80a4020:	4640      	mov	r0, r8
 80a4022:	4629      	mov	r1, r5
 80a4024:	f001 ff46 	bl	80a5eb4 <__aeabi_dcmplt>
 80a4028:	b120      	cbz	r0, 80a4034 <_Z4dtoadhPc+0x24>
        val = -val;
        *sout++ = '-';
 80a402a:	232d      	movs	r3, #45	; 0x2d
 80a402c:	7033      	strb	r3, [r6, #0]
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
    bool negative = val<0;
    if (negative) {
        val = -val;
 80a402e:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
        *sout++ = '-';
 80a4032:	3601      	adds	r6, #1
 80a4034:	2300      	movs	r3, #0
    }
    long scale = 1;
 80a4036:	2401      	movs	r4, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
 80a4038:	220a      	movs	r2, #10
    if (negative) {
        val = -val;
        *sout++ = '-';
    }
    long scale = 1;
    for (uint8_t i=0; i<prec; i++)
 80a403a:	b2d9      	uxtb	r1, r3
 80a403c:	428f      	cmp	r7, r1
 80a403e:	d902      	bls.n	80a4046 <_Z4dtoadhPc+0x36>
        scale *= 10;
 80a4040:	4354      	muls	r4, r2
 80a4042:	3301      	adds	r3, #1
    if (negative) {
        val = -val;
        *sout++ = '-';
    }
    long scale = 1;
    for (uint8_t i=0; i<prec; i++)
 80a4044:	e7f9      	b.n	80a403a <_Z4dtoadhPc+0x2a>
        scale *= 10;
    val *= scale;   // capture all the significant digits
 80a4046:	4620      	mov	r0, r4
 80a4048:	f001 fc5c 	bl	80a5904 <__aeabi_i2d>
 80a404c:	4642      	mov	r2, r8
 80a404e:	462b      	mov	r3, r5
 80a4050:	f001 fcbe 	bl	80a59d0 <__aeabi_dmul>
 80a4054:	4682      	mov	sl, r0
 80a4056:	468b      	mov	fp, r1
    uint64_t fixed = uint64_t(val);
 80a4058:	f002 fb14 	bl	80a6684 <__aeabi_d2ulz>
 80a405c:	4680      	mov	r8, r0
 80a405e:	4689      	mov	r9, r1
    if ((val-fixed)>=0.5)    // round last digit
 80a4060:	f001 fc80 	bl	80a5964 <__aeabi_ul2d>
 80a4064:	4602      	mov	r2, r0
 80a4066:	460b      	mov	r3, r1
 80a4068:	4650      	mov	r0, sl
 80a406a:	4659      	mov	r1, fp
 80a406c:	f001 fafc 	bl	80a5668 <__aeabi_dsub>
 80a4070:	2200      	movs	r2, #0
 80a4072:	4b17      	ldr	r3, [pc, #92]	; (80a40d0 <_Z4dtoadhPc+0xc0>)
 80a4074:	f001 ff32 	bl	80a5edc <__aeabi_dcmpge>
 80a4078:	b118      	cbz	r0, 80a4082 <_Z4dtoadhPc+0x72>
        fixed++;
 80a407a:	f118 0801 	adds.w	r8, r8, #1
 80a407e:	f149 0900 	adc.w	r9, r9, #0

    unsigned long first = (unsigned long)(fixed / scale);
 80a4082:	17e5      	asrs	r5, r4, #31
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
 80a4084:	4622      	mov	r2, r4
 80a4086:	462b      	mov	r3, r5
 80a4088:	4640      	mov	r0, r8
 80a408a:	4649      	mov	r1, r9
 80a408c:	f002 fae2 	bl	80a6654 <__aeabi_uldivmod>
 80a4090:	2301      	movs	r3, #1
 80a4092:	220a      	movs	r2, #10
 80a4094:	4631      	mov	r1, r6
 80a4096:	f7ff fd04 	bl	80a3aa2 <ultoa>
    if (prec) {
 80a409a:	b1af      	cbz	r7, 80a40c8 <_Z4dtoadhPc+0xb8>
        sout += strlen(sout);
 80a409c:	4630      	mov	r0, r6
 80a409e:	f003 fb39 	bl	80a7714 <strlen>
        *sout++ = '.';
 80a40a2:	232e      	movs	r3, #46	; 0x2e
 80a40a4:	5433      	strb	r3, [r6, r0]
        ultoa(second, sout, 10, prec);
 80a40a6:	3001      	adds	r0, #1
 80a40a8:	4406      	add	r6, r0
 80a40aa:	4622      	mov	r2, r4
 80a40ac:	462b      	mov	r3, r5
 80a40ae:	4640      	mov	r0, r8
 80a40b0:	4649      	mov	r1, r9
 80a40b2:	f002 facf 	bl	80a6654 <__aeabi_uldivmod>
 80a40b6:	463b      	mov	r3, r7
 80a40b8:	4610      	mov	r0, r2
 80a40ba:	4631      	mov	r1, r6
 80a40bc:	220a      	movs	r2, #10
    }
}
 80a40be:	b001      	add	sp, #4
 80a40c0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    ultoa(first, sout, 10, 1);
    if (prec) {
        sout += strlen(sout);
        *sout++ = '.';
        ultoa(second, sout, 10, prec);
 80a40c4:	f7ff bced 	b.w	80a3aa2 <ultoa>
    }
}
 80a40c8:	b001      	add	sp, #4
 80a40ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a40ce:	bf00      	nop
 80a40d0:	3fe00000 	.word	0x3fe00000

080a40d4 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a40d4:	b510      	push	{r4, lr}
 80a40d6:	4604      	mov	r4, r0
{
	free(buffer);
 80a40d8:	6800      	ldr	r0, [r0, #0]
 80a40da:	f7ff fc29 	bl	80a3930 <free>
}
 80a40de:	4620      	mov	r0, r4
 80a40e0:	bd10      	pop	{r4, pc}

080a40e2 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a40e2:	b510      	push	{r4, lr}
 80a40e4:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a40e6:	6800      	ldr	r0, [r0, #0]
 80a40e8:	b108      	cbz	r0, 80a40ee <_ZN6String10invalidateEv+0xc>
 80a40ea:	f7ff fc21 	bl	80a3930 <free>
	buffer = NULL;
 80a40ee:	2300      	movs	r3, #0
 80a40f0:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 80a40f2:	60a3      	str	r3, [r4, #8]
 80a40f4:	6063      	str	r3, [r4, #4]
 80a40f6:	bd10      	pop	{r4, pc}

080a40f8 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a40f8:	b538      	push	{r3, r4, r5, lr}
 80a40fa:	4604      	mov	r4, r0
 80a40fc:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a40fe:	6800      	ldr	r0, [r0, #0]
 80a4100:	3101      	adds	r1, #1
 80a4102:	f7ff fc1d 	bl	80a3940 <realloc>
	if (newbuffer) {
 80a4106:	b110      	cbz	r0, 80a410e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a4108:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 80a410c:	2001      	movs	r0, #1
	}
	return 0;
}
 80a410e:	bd38      	pop	{r3, r4, r5, pc}

080a4110 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a4110:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a4112:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a4114:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a4116:	b113      	cbz	r3, 80a411e <_ZN6String7reserveEj+0xe>
 80a4118:	6843      	ldr	r3, [r0, #4]
 80a411a:	428b      	cmp	r3, r1
 80a411c:	d207      	bcs.n	80a412e <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 80a411e:	4620      	mov	r0, r4
 80a4120:	f7ff ffea 	bl	80a40f8 <_ZN6String12changeBufferEj>
 80a4124:	b120      	cbz	r0, 80a4130 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 80a4126:	68a3      	ldr	r3, [r4, #8]
 80a4128:	b90b      	cbnz	r3, 80a412e <_ZN6String7reserveEj+0x1e>
 80a412a:	6822      	ldr	r2, [r4, #0]
 80a412c:	7013      	strb	r3, [r2, #0]
 80a412e:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 80a4130:	bd10      	pop	{r4, pc}

080a4132 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a4132:	b570      	push	{r4, r5, r6, lr}
 80a4134:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a4136:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a4138:	4604      	mov	r4, r0
 80a413a:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a413c:	f7ff ffe8 	bl	80a4110 <_ZN6String7reserveEj>
 80a4140:	b918      	cbnz	r0, 80a414a <_ZN6String4copyEPKcj+0x18>
		invalidate();
 80a4142:	4620      	mov	r0, r4
 80a4144:	f7ff ffcd 	bl	80a40e2 <_ZN6String10invalidateEv>
		return *this;
 80a4148:	e009      	b.n	80a415e <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 80a414a:	462a      	mov	r2, r5
 80a414c:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 80a414e:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a4150:	6820      	ldr	r0, [r4, #0]
 80a4152:	f002 fd7d 	bl	80a6c50 <memcpy>
	buffer[len] = 0;
 80a4156:	6822      	ldr	r2, [r4, #0]
 80a4158:	68a3      	ldr	r3, [r4, #8]
 80a415a:	2100      	movs	r1, #0
 80a415c:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 80a415e:	4620      	mov	r0, r4
 80a4160:	bd70      	pop	{r4, r5, r6, pc}

080a4162 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a4162:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a4164:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a4166:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a4168:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a416a:	6043      	str	r3, [r0, #4]
	len = 0;
 80a416c:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a416e:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 80a4170:	460d      	mov	r5, r1
 80a4172:	b139      	cbz	r1, 80a4184 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 80a4174:	4608      	mov	r0, r1
 80a4176:	f003 facd 	bl	80a7714 <strlen>
 80a417a:	4629      	mov	r1, r5
 80a417c:	4602      	mov	r2, r0
 80a417e:	4620      	mov	r0, r4
 80a4180:	f7ff ffd7 	bl	80a4132 <_ZN6String4copyEPKcj>
}
 80a4184:	4620      	mov	r0, r4
 80a4186:	bd38      	pop	{r3, r4, r5, pc}

080a4188 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 80a4188:	b538      	push	{r3, r4, r5, lr}
 80a418a:	4605      	mov	r5, r0
	if (buffer) {
 80a418c:	6800      	ldr	r0, [r0, #0]
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 80a418e:	460c      	mov	r4, r1
	if (buffer) {
 80a4190:	b160      	cbz	r0, 80a41ac <_ZN6String4moveERS_+0x24>
		if (capacity >= rhs.len) {
 80a4192:	686a      	ldr	r2, [r5, #4]
 80a4194:	688b      	ldr	r3, [r1, #8]
 80a4196:	429a      	cmp	r2, r3
 80a4198:	d306      	bcc.n	80a41a8 <_ZN6String4moveERS_+0x20>
			strcpy(buffer, rhs.buffer);
 80a419a:	6809      	ldr	r1, [r1, #0]
 80a419c:	f002 fd9e 	bl	80a6cdc <strcpy>
			len = rhs.len;
 80a41a0:	68a3      	ldr	r3, [r4, #8]
 80a41a2:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
 80a41a4:	2300      	movs	r3, #0
 80a41a6:	e00a      	b.n	80a41be <_ZN6String4moveERS_+0x36>
			return;
		} else {
			free(buffer);
 80a41a8:	f7ff fbc2 	bl	80a3930 <free>
		}
	}
	buffer = rhs.buffer;
 80a41ac:	6823      	ldr	r3, [r4, #0]
 80a41ae:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
 80a41b0:	6863      	ldr	r3, [r4, #4]
 80a41b2:	606b      	str	r3, [r5, #4]
	len = rhs.len;
 80a41b4:	68a3      	ldr	r3, [r4, #8]
 80a41b6:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
 80a41b8:	2300      	movs	r3, #0
 80a41ba:	6023      	str	r3, [r4, #0]
	rhs.capacity = 0;
 80a41bc:	6063      	str	r3, [r4, #4]
	rhs.len = 0;
 80a41be:	60a3      	str	r3, [r4, #8]
 80a41c0:	bd38      	pop	{r3, r4, r5, pc}

080a41c2 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 80a41c2:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
 80a41c4:	b510      	push	{r4, lr}
 80a41c6:	460b      	mov	r3, r1
 80a41c8:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 80a41ca:	d007      	beq.n	80a41dc <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 80a41cc:	6809      	ldr	r1, [r1, #0]
 80a41ce:	b119      	cbz	r1, 80a41d8 <_ZN6StringaSERKS_+0x16>
 80a41d0:	689a      	ldr	r2, [r3, #8]
 80a41d2:	f7ff ffae 	bl	80a4132 <_ZN6String4copyEPKcj>
 80a41d6:	e001      	b.n	80a41dc <_ZN6StringaSERKS_+0x1a>
	else invalidate();
 80a41d8:	f7ff ff83 	bl	80a40e2 <_ZN6String10invalidateEv>

	return *this;
}
 80a41dc:	4620      	mov	r0, r4
 80a41de:	bd10      	pop	{r4, pc}

080a41e0 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
 80a41e0:	b510      	push	{r4, lr}
 80a41e2:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a41e4:	2300      	movs	r3, #0
 80a41e6:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a41e8:	6043      	str	r3, [r0, #4]
	len = 0;
 80a41ea:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a41ec:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
 80a41ee:	f7ff ffe8 	bl	80a41c2 <_ZN6StringaSERKS_>
}
 80a41f2:	4620      	mov	r0, r4
 80a41f4:	bd10      	pop	{r4, pc}

080a41f6 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
 80a41f6:	4288      	cmp	r0, r1
    return *this;
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
 80a41f8:	b510      	push	{r4, lr}
 80a41fa:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
 80a41fc:	d001      	beq.n	80a4202 <_ZN6StringaSEOS_+0xc>
 80a41fe:	f7ff ffc3 	bl	80a4188 <_ZN6String4moveERS_>
	return *this;
}
 80a4202:	4620      	mov	r0, r4
 80a4204:	bd10      	pop	{r4, pc}

080a4206 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 80a4206:	b538      	push	{r3, r4, r5, lr}
 80a4208:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a420a:	460c      	mov	r4, r1
 80a420c:	b141      	cbz	r1, 80a4220 <_ZN6StringaSEPKc+0x1a>
 80a420e:	4608      	mov	r0, r1
 80a4210:	f003 fa80 	bl	80a7714 <strlen>
 80a4214:	4621      	mov	r1, r4
 80a4216:	4602      	mov	r2, r0
 80a4218:	4628      	mov	r0, r5
 80a421a:	f7ff ff8a 	bl	80a4132 <_ZN6String4copyEPKcj>
 80a421e:	e001      	b.n	80a4224 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
 80a4220:	f7ff ff5f 	bl	80a40e2 <_ZN6String10invalidateEv>

	return *this;
}
 80a4224:	4628      	mov	r0, r5
 80a4226:	bd38      	pop	{r3, r4, r5, pc}

080a4228 <_ZN6StringC1Ehh>:
	buf[0] = c;
	buf[1] = 0;
	*this = buf;
}

String::String(unsigned char value, unsigned char base)
 80a4228:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80a422a:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a422c:	2300      	movs	r3, #0
 80a422e:	6023      	str	r3, [r4, #0]
	capacity = 0;
 80a4230:	6063      	str	r3, [r4, #4]
	len = 0;
 80a4232:	60a3      	str	r3, [r4, #8]
	flags = 0;
 80a4234:	7323      	strb	r3, [r4, #12]
	buf[0] = c;
	buf[1] = 0;
	*this = buf;
}

String::String(unsigned char value, unsigned char base)
 80a4236:	4608      	mov	r0, r1
{
	init();
	char buf[9];
	utoa(value, buf, base);
 80a4238:	a901      	add	r1, sp, #4
 80a423a:	f7ff fc70 	bl	80a3b1e <utoa>
	*this = buf;
 80a423e:	a901      	add	r1, sp, #4
 80a4240:	4620      	mov	r0, r4
 80a4242:	f7ff ffe0 	bl	80a4206 <_ZN6StringaSEPKc>
}
 80a4246:	4620      	mov	r0, r4
 80a4248:	b004      	add	sp, #16
 80a424a:	bd10      	pop	{r4, pc}

080a424c <_ZN6StringC1Eih>:

String::String(int value, unsigned char base)
 80a424c:	b510      	push	{r4, lr}
 80a424e:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a4250:	2300      	movs	r3, #0
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
 80a4252:	b08a      	sub	sp, #40	; 0x28
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a4254:	6023      	str	r3, [r4, #0]
	capacity = 0;
 80a4256:	6063      	str	r3, [r4, #4]
	len = 0;
 80a4258:	60a3      	str	r3, [r4, #8]
	flags = 0;
 80a425a:	7323      	strb	r3, [r4, #12]
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
 80a425c:	4608      	mov	r0, r1
{
	init();
	char buf[34];
	itoa(value, buf, base);
 80a425e:	a901      	add	r1, sp, #4
 80a4260:	f7ff fc47 	bl	80a3af2 <itoa>
	*this = buf;
 80a4264:	a901      	add	r1, sp, #4
 80a4266:	4620      	mov	r0, r4
 80a4268:	f7ff ffcd 	bl	80a4206 <_ZN6StringaSEPKc>
}
 80a426c:	4620      	mov	r0, r4
 80a426e:	b00a      	add	sp, #40	; 0x28
 80a4270:	bd10      	pop	{r4, pc}

080a4272 <_ZN6StringC1Ejh>:

String::String(unsigned int value, unsigned char base)
 80a4272:	b510      	push	{r4, lr}
 80a4274:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a4276:	2300      	movs	r3, #0
	char buf[34];
	itoa(value, buf, base);
	*this = buf;
}

String::String(unsigned int value, unsigned char base)
 80a4278:	b08a      	sub	sp, #40	; 0x28
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a427a:	6023      	str	r3, [r4, #0]
	capacity = 0;
 80a427c:	6063      	str	r3, [r4, #4]
	len = 0;
 80a427e:	60a3      	str	r3, [r4, #8]
	flags = 0;
 80a4280:	7323      	strb	r3, [r4, #12]
	char buf[34];
	itoa(value, buf, base);
	*this = buf;
}

String::String(unsigned int value, unsigned char base)
 80a4282:	4608      	mov	r0, r1
{
	init();
	char buf[33];
	utoa(value, buf, base);
 80a4284:	a901      	add	r1, sp, #4
 80a4286:	f7ff fc4a 	bl	80a3b1e <utoa>
	*this = buf;
 80a428a:	a901      	add	r1, sp, #4
 80a428c:	4620      	mov	r0, r4
 80a428e:	f7ff ffba 	bl	80a4206 <_ZN6StringaSEPKc>
}
 80a4292:	4620      	mov	r0, r4
 80a4294:	b00a      	add	sp, #40	; 0x28
 80a4296:	bd10      	pop	{r4, pc}

080a4298 <_ZN6StringC1Emh>:
	char buf[34];
	ltoa(value, buf, base);
	*this = buf;
}

String::String(unsigned long value, unsigned char base)
 80a4298:	b510      	push	{r4, lr}
 80a429a:	4604      	mov	r4, r0
 80a429c:	b08a      	sub	sp, #40	; 0x28
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a429e:	2300      	movs	r3, #0
 80a42a0:	6023      	str	r3, [r4, #0]
	capacity = 0;
 80a42a2:	6063      	str	r3, [r4, #4]
	len = 0;
 80a42a4:	60a3      	str	r3, [r4, #8]
	flags = 0;
 80a42a6:	7323      	strb	r3, [r4, #12]
	char buf[34];
	ltoa(value, buf, base);
	*this = buf;
}

String::String(unsigned long value, unsigned char base)
 80a42a8:	4608      	mov	r0, r1
{
	init();
	char buf[33];
	ultoa(value, buf, base);
 80a42aa:	2301      	movs	r3, #1
 80a42ac:	a901      	add	r1, sp, #4
 80a42ae:	f7ff fbf8 	bl	80a3aa2 <ultoa>
	*this = buf;
 80a42b2:	a901      	add	r1, sp, #4
 80a42b4:	4620      	mov	r0, r4
 80a42b6:	f7ff ffa6 	bl	80a4206 <_ZN6StringaSEPKc>
}
 80a42ba:	4620      	mov	r0, r4
 80a42bc:	b00a      	add	sp, #40	; 0x28
 80a42be:	bd10      	pop	{r4, pc}

080a42c0 <_ZN6StringC1Efi>:

String::String(float value, int decimalPlaces)
 80a42c0:	b530      	push	{r4, r5, lr}
 80a42c2:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a42c4:	2300      	movs	r3, #0
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::String(float value, int decimalPlaces)
 80a42c6:	b08b      	sub	sp, #44	; 0x2c
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a42c8:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a42ca:	6043      	str	r3, [r0, #4]
	len = 0;
 80a42cc:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a42ce:	7303      	strb	r3, [r0, #12]

String::String(float value, int decimalPlaces)
{
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
 80a42d0:	b2d5      	uxtb	r5, r2
 80a42d2:	4608      	mov	r0, r1
 80a42d4:	f001 fb28 	bl	80a5928 <__aeabi_f2d>
 80a42d8:	ab01      	add	r3, sp, #4
 80a42da:	462a      	mov	r2, r5
 80a42dc:	f7ff fe98 	bl	80a4010 <_Z4dtoadhPc>
        *this = buf;
 80a42e0:	a901      	add	r1, sp, #4
 80a42e2:	4620      	mov	r0, r4
 80a42e4:	f7ff ff8f 	bl	80a4206 <_ZN6StringaSEPKc>
}
 80a42e8:	4620      	mov	r0, r4
 80a42ea:	b00b      	add	sp, #44	; 0x2c
 80a42ec:	bd30      	pop	{r4, r5, pc}

080a42ee <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
 80a42ee:	b570      	push	{r4, r5, r6, lr}
 80a42f0:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
 80a42f2:	460e      	mov	r6, r1
 80a42f4:	b909      	cbnz	r1, 80a42fa <_ZN6String6concatEPKcj+0xc>
 80a42f6:	2000      	movs	r0, #0
 80a42f8:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
 80a42fa:	b16a      	cbz	r2, 80a4318 <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
 80a42fc:	6883      	ldr	r3, [r0, #8]
 80a42fe:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
 80a4300:	4629      	mov	r1, r5
 80a4302:	f7ff ff05 	bl	80a4110 <_ZN6String7reserveEj>
 80a4306:	2800      	cmp	r0, #0
 80a4308:	d0f5      	beq.n	80a42f6 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
 80a430a:	6820      	ldr	r0, [r4, #0]
 80a430c:	68a3      	ldr	r3, [r4, #8]
 80a430e:	4631      	mov	r1, r6
 80a4310:	4418      	add	r0, r3
 80a4312:	f002 fce3 	bl	80a6cdc <strcpy>
	len = newlen;
 80a4316:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
 80a4318:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
 80a431a:	bd70      	pop	{r4, r5, r6, pc}

080a431c <_ZN6String6concatERKS_>:
/*  concat                                   */
/*********************************************/

unsigned char String::concat(const String &s)
{
	return concat(s.buffer, s.len);
 80a431c:	688a      	ldr	r2, [r1, #8]
 80a431e:	6809      	ldr	r1, [r1, #0]
 80a4320:	f7ff bfe5 	b.w	80a42ee <_ZN6String6concatEPKcj>

080a4324 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
 80a4324:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
 80a4326:	2300      	movs	r3, #0
}

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
 80a4328:	f88d 1004 	strb.w	r1, [sp, #4]
	buf[1] = 0;
	return concat(buf, 1);
 80a432c:	2201      	movs	r2, #1
 80a432e:	a901      	add	r1, sp, #4

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
 80a4330:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
 80a4334:	f7ff ffdb 	bl	80a42ee <_ZN6String6concatEPKcj>
}
 80a4338:	b003      	add	sp, #12
 80a433a:	f85d fb04 	ldr.w	pc, [sp], #4

080a433e <_ZN6String6concatEi>:
	itoa(num, buf, 10);
	return concat(buf, strlen(buf));
}

unsigned char String::concat(int num)
{
 80a433e:	b513      	push	{r0, r1, r4, lr}
	char buf[7];
	itoa(num, buf, 10);
 80a4340:	220a      	movs	r2, #10
	itoa(num, buf, 10);
	return concat(buf, strlen(buf));
}

unsigned char String::concat(int num)
{
 80a4342:	4604      	mov	r4, r0
 80a4344:	4608      	mov	r0, r1
	char buf[7];
	itoa(num, buf, 10);
 80a4346:	4669      	mov	r1, sp
 80a4348:	f7ff fbd3 	bl	80a3af2 <itoa>
	return concat(buf, strlen(buf));
 80a434c:	4668      	mov	r0, sp
 80a434e:	f003 f9e1 	bl	80a7714 <strlen>
 80a4352:	4669      	mov	r1, sp
 80a4354:	4602      	mov	r2, r0
 80a4356:	4620      	mov	r0, r4
 80a4358:	f7ff ffc9 	bl	80a42ee <_ZN6String6concatEPKcj>
}
 80a435c:	b002      	add	sp, #8
 80a435e:	bd10      	pop	{r4, pc}

080a4360 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 80a4360:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 80a4362:	688a      	ldr	r2, [r1, #8]
 80a4364:	6809      	ldr	r1, [r1, #0]
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 80a4366:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 80a4368:	f7ff ffc1 	bl	80a42ee <_ZN6String6concatEPKcj>
 80a436c:	b910      	cbnz	r0, 80a4374 <_ZplRK15StringSumHelperRK6String+0x14>
 80a436e:	4620      	mov	r0, r4
 80a4370:	f7ff feb7 	bl	80a40e2 <_ZN6String10invalidateEv>
	return a;
}
 80a4374:	4620      	mov	r0, r4
 80a4376:	bd10      	pop	{r4, pc}

080a4378 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
 80a4378:	b538      	push	{r3, r4, r5, lr}
 80a437a:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
 80a437c:	460d      	mov	r5, r1
 80a437e:	b141      	cbz	r1, 80a4392 <_ZplRK15StringSumHelperPKc+0x1a>
 80a4380:	4608      	mov	r0, r1
 80a4382:	f003 f9c7 	bl	80a7714 <strlen>
 80a4386:	4629      	mov	r1, r5
 80a4388:	4602      	mov	r2, r0
 80a438a:	4620      	mov	r0, r4
 80a438c:	f7ff ffaf 	bl	80a42ee <_ZN6String6concatEPKcj>
 80a4390:	b910      	cbnz	r0, 80a4398 <_ZplRK15StringSumHelperPKc+0x20>
 80a4392:	4620      	mov	r0, r4
 80a4394:	f7ff fea5 	bl	80a40e2 <_ZN6String10invalidateEv>
	return a;
}
 80a4398:	4620      	mov	r0, r4
 80a439a:	bd38      	pop	{r3, r4, r5, pc}

080a439c <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 80a439c:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
 80a439e:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 80a43a0:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
 80a43a2:	b912      	cbnz	r2, 80a43aa <_ZNK6String6equalsEPKc+0xe>
 80a43a4:	b919      	cbnz	r1, 80a43ae <_ZNK6String6equalsEPKc+0x12>
 80a43a6:	2001      	movs	r0, #1
 80a43a8:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
 80a43aa:	b911      	cbnz	r1, 80a43b2 <_ZNK6String6equalsEPKc+0x16>
 80a43ac:	6803      	ldr	r3, [r0, #0]
 80a43ae:	7818      	ldrb	r0, [r3, #0]
 80a43b0:	e002      	b.n	80a43b8 <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
 80a43b2:	6800      	ldr	r0, [r0, #0]
 80a43b4:	f002 fc88 	bl	80a6cc8 <strcmp>
 80a43b8:	fab0 f080 	clz	r0, r0
 80a43bc:	0940      	lsrs	r0, r0, #5
}
 80a43be:	bd08      	pop	{r3, pc}

080a43c0 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
 80a43c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a43c2:	461d      	mov	r5, r3
	if (left > right) {
 80a43c4:	429a      	cmp	r2, r3
 80a43c6:	bf88      	it	hi
 80a43c8:	4613      	movhi	r3, r2
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
 80a43ca:	460f      	mov	r7, r1
 80a43cc:	4614      	mov	r4, r2
	if (left > right) {
 80a43ce:	bf88      	it	hi
 80a43d0:	462c      	movhi	r4, r5
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
 80a43d2:	490b      	ldr	r1, [pc, #44]	; (80a4400 <_ZNK6String9substringEjj+0x40>)
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
	if (left > right) {
 80a43d4:	bf88      	it	hi
 80a43d6:	461d      	movhi	r5, r3
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
 80a43d8:	4606      	mov	r6, r0
	if (left > right) {
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
 80a43da:	f7ff fec2 	bl	80a4162 <_ZN6StringC1EPK19__FlashStringHelper>
	if (left > len) return out;
 80a43de:	68ba      	ldr	r2, [r7, #8]
 80a43e0:	4294      	cmp	r4, r2
 80a43e2:	d80a      	bhi.n	80a43fa <_ZNK6String9substringEjj+0x3a>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
 80a43e4:	6839      	ldr	r1, [r7, #0]
 80a43e6:	4295      	cmp	r5, r2
 80a43e8:	bf94      	ite	ls
 80a43ea:	ebc4 0205 	rsbls	r2, r4, r5
 80a43ee:	ebc4 0202 	rsbhi	r2, r4, r2
 80a43f2:	4421      	add	r1, r4
 80a43f4:	4630      	mov	r0, r6
 80a43f6:	f7ff fe9c 	bl	80a4132 <_ZN6String4copyEPKcj>
	return out;
}
 80a43fa:	4630      	mov	r0, r6
 80a43fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a43fe:	bf00      	nop
 80a4400:	080a9f53 	.word	0x080a9f53

080a4404 <_ZNK6String9substringEj>:
	}
	return found;
}

String String::substring( unsigned int left ) const
{
 80a4404:	b510      	push	{r4, lr}
 80a4406:	4604      	mov	r4, r0
	return substring(left, len);
 80a4408:	688b      	ldr	r3, [r1, #8]
 80a440a:	f7ff ffd9 	bl	80a43c0 <_ZNK6String9substringEjj>
}
 80a440e:	4620      	mov	r0, r4
 80a4410:	bd10      	pop	{r4, pc}

080a4412 <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
 80a4412:	6800      	ldr	r0, [r0, #0]
 80a4414:	b108      	cbz	r0, 80a441a <_ZNK6String5toIntEv+0x8>
 80a4416:	f002 bb0d 	b.w	80a6a34 <atol>
	return 0;
}
 80a441a:	4770      	bx	lr

080a441c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a441c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a441e:	4606      	mov	r6, r0
 80a4420:	460d      	mov	r5, r1
 80a4422:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a4424:	2400      	movs	r4, #0
  while (size--) {
 80a4426:	42bd      	cmp	r5, r7
 80a4428:	d00c      	beq.n	80a4444 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a442a:	6833      	ldr	r3, [r6, #0]
 80a442c:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a4430:	689b      	ldr	r3, [r3, #8]
 80a4432:	4630      	mov	r0, r6
 80a4434:	4798      	blx	r3
     if (chunk>=0)
 80a4436:	2800      	cmp	r0, #0
 80a4438:	db01      	blt.n	80a443e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a443a:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a443c:	e7f3      	b.n	80a4426 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a443e:	2c00      	cmp	r4, #0
 80a4440:	bf08      	it	eq
 80a4442:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a4444:	4620      	mov	r0, r4
 80a4446:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a4448 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a4448:	b570      	push	{r4, r5, r6, lr}
 80a444a:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a444c:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a444e:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a4450:	b149      	cbz	r1, 80a4466 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a4452:	f003 f95f 	bl	80a7714 <strlen>
 80a4456:	682b      	ldr	r3, [r5, #0]
 80a4458:	4602      	mov	r2, r0
 80a445a:	4621      	mov	r1, r4
 80a445c:	4628      	mov	r0, r5
    }
 80a445e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a4462:	68db      	ldr	r3, [r3, #12]
 80a4464:	4718      	bx	r3
    }
 80a4466:	bd70      	pop	{r4, r5, r6, pc}

080a4468 <_ZN5Print5printEPKc>:
 80a4468:	b508      	push	{r3, lr}
 80a446a:	f7ff ffed 	bl	80a4448 <_ZN5Print5writeEPKc>
 80a446e:	bd08      	pop	{r3, pc}

080a4470 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a4470:	6803      	ldr	r3, [r0, #0]
 80a4472:	689b      	ldr	r3, [r3, #8]
 80a4474:	4718      	bx	r3

080a4476 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a4476:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a4478:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a447a:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a447c:	f7ff fff8 	bl	80a4470 <_ZN5Print5printEc>
  n += print('\n');
 80a4480:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80a4482:	4604      	mov	r4, r0
  n += print('\n');
 80a4484:	4628      	mov	r0, r5
 80a4486:	f7ff fff3 	bl	80a4470 <_ZN5Print5printEc>
  return n;
}
 80a448a:	4420      	add	r0, r4
 80a448c:	bd38      	pop	{r3, r4, r5, pc}

080a448e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a448e:	b538      	push	{r3, r4, r5, lr}
 80a4490:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a4492:	f7ff ffd9 	bl	80a4448 <_ZN5Print5writeEPKc>
 80a4496:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 80a4498:	4628      	mov	r0, r5
 80a449a:	f7ff ffec 	bl	80a4476 <_ZN5Print7printlnEv>
  return n;
}
 80a449e:	4420      	add	r0, r4
 80a44a0:	bd38      	pop	{r3, r4, r5, pc}

080a44a2 <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a44a2:	2a01      	cmp	r2, #1
 80a44a4:	bf98      	it	ls
 80a44a6:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a44a8:	b530      	push	{r4, r5, lr}
 80a44aa:	460b      	mov	r3, r1
 80a44ac:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a44ae:	2100      	movs	r1, #0
 80a44b0:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a44b4:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   decltype(n) m = n;
   n /= base;
 80a44b8:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
 80a44bc:	fb05 3312 	mls	r3, r5, r2, r3
 80a44c0:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a44c2:	2b09      	cmp	r3, #9
 80a44c4:	bf94      	ite	ls
 80a44c6:	3330      	addls	r3, #48	; 0x30
 80a44c8:	3337      	addhi	r3, #55	; 0x37
 80a44ca:	b2db      	uxtb	r3, r3
 80a44cc:	4621      	mov	r1, r4
 80a44ce:	f804 3901 	strb.w	r3, [r4], #-1
 80a44d2:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a44d4:	2d00      	cmp	r5, #0
 80a44d6:	d1ef      	bne.n	80a44b8 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a44d8:	f7ff ffb6 	bl	80a4448 <_ZN5Print5writeEPKc>
}
 80a44dc:	b00b      	add	sp, #44	; 0x2c
 80a44de:	bd30      	pop	{r4, r5, pc}

080a44e0 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a44e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a44e4:	4619      	mov	r1, r3

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a44e6:	4680      	mov	r8, r0
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a44e8:	4610      	mov	r0, r2

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a44ea:	4617      	mov	r7, r2
 80a44ec:	461e      	mov	r6, r3
 80a44ee:	f89d 5020 	ldrb.w	r5, [sp, #32]
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a44f2:	f001 fd07 	bl	80a5f04 <__aeabi_dcmpun>
 80a44f6:	b108      	cbz	r0, 80a44fc <_ZN5Print10printFloatEdh+0x1c>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a44f8:	494d      	ldr	r1, [pc, #308]	; (80a4630 <_ZN5Print10printFloatEdh+0x150>)
 80a44fa:	e012      	b.n	80a4522 <_ZN5Print10printFloatEdh+0x42>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
 80a44fc:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 80a4500:	f04f 32ff 	mov.w	r2, #4294967295
 80a4504:	4b4b      	ldr	r3, [pc, #300]	; (80a4634 <_ZN5Print10printFloatEdh+0x154>)
 80a4506:	4638      	mov	r0, r7
 80a4508:	4621      	mov	r1, r4
 80a450a:	f001 fcfb 	bl	80a5f04 <__aeabi_dcmpun>
 80a450e:	b968      	cbnz	r0, 80a452c <_ZN5Print10printFloatEdh+0x4c>
 80a4510:	f04f 32ff 	mov.w	r2, #4294967295
 80a4514:	4b47      	ldr	r3, [pc, #284]	; (80a4634 <_ZN5Print10printFloatEdh+0x154>)
 80a4516:	4638      	mov	r0, r7
 80a4518:	4621      	mov	r1, r4
 80a451a:	f001 fcd5 	bl	80a5ec8 <__aeabi_dcmple>
 80a451e:	b928      	cbnz	r0, 80a452c <_ZN5Print10printFloatEdh+0x4c>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a4520:	4945      	ldr	r1, [pc, #276]	; (80a4638 <_ZN5Print10printFloatEdh+0x158>)
 80a4522:	4640      	mov	r0, r8
 80a4524:	f7ff ff90 	bl	80a4448 <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
 80a4528:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
 80a452c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a4530:	4b42      	ldr	r3, [pc, #264]	; (80a463c <_ZN5Print10printFloatEdh+0x15c>)
 80a4532:	4638      	mov	r0, r7
 80a4534:	4631      	mov	r1, r6
 80a4536:	f001 fcdb 	bl	80a5ef0 <__aeabi_dcmpgt>
 80a453a:	b108      	cbz	r0, 80a4540 <_ZN5Print10printFloatEdh+0x60>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a453c:	4940      	ldr	r1, [pc, #256]	; (80a4640 <_ZN5Print10printFloatEdh+0x160>)
 80a453e:	e7f0      	b.n	80a4522 <_ZN5Print10printFloatEdh+0x42>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
 80a4540:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a4544:	4b3f      	ldr	r3, [pc, #252]	; (80a4644 <_ZN5Print10printFloatEdh+0x164>)
 80a4546:	4638      	mov	r0, r7
 80a4548:	4631      	mov	r1, r6
 80a454a:	f001 fcb3 	bl	80a5eb4 <__aeabi_dcmplt>
 80a454e:	2800      	cmp	r0, #0
 80a4550:	d1f4      	bne.n	80a453c <_ZN5Print10printFloatEdh+0x5c>

  // Handle negative numbers
  if (number < 0.0)
 80a4552:	2200      	movs	r2, #0
 80a4554:	2300      	movs	r3, #0
 80a4556:	4638      	mov	r0, r7
 80a4558:	4631      	mov	r1, r6
 80a455a:	f001 fcab 	bl	80a5eb4 <__aeabi_dcmplt>
 80a455e:	b138      	cbz	r0, 80a4570 <_ZN5Print10printFloatEdh+0x90>
  {
     n += print('-');
 80a4560:	212d      	movs	r1, #45	; 0x2d
 80a4562:	4640      	mov	r0, r8
 80a4564:	f7ff ff84 	bl	80a4470 <_ZN5Print5printEc>
     number = -number;
 80a4568:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
 80a456c:	4604      	mov	r4, r0
 80a456e:	e000      	b.n	80a4572 <_ZN5Print10printFloatEdh+0x92>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
 80a4570:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 80a4572:	4935      	ldr	r1, [pc, #212]	; (80a4648 <_ZN5Print10printFloatEdh+0x168>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
 80a4574:	f04f 0900 	mov.w	r9, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 80a4578:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
 80a457a:	fa5f f389 	uxtb.w	r3, r9
 80a457e:	429d      	cmp	r5, r3
 80a4580:	d906      	bls.n	80a4590 <_ZN5Print10printFloatEdh+0xb0>
    rounding /= 10.0;
 80a4582:	2200      	movs	r2, #0
 80a4584:	4b31      	ldr	r3, [pc, #196]	; (80a464c <_ZN5Print10printFloatEdh+0x16c>)
 80a4586:	f001 fb4d 	bl	80a5c24 <__aeabi_ddiv>
 80a458a:	f109 0901 	add.w	r9, r9, #1
 80a458e:	e7f4      	b.n	80a457a <_ZN5Print10printFloatEdh+0x9a>

  number += rounding;
 80a4590:	463a      	mov	r2, r7
 80a4592:	4633      	mov	r3, r6
 80a4594:	f001 f86a 	bl	80a566c <__adddf3>
 80a4598:	460f      	mov	r7, r1
 80a459a:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
 80a459c:	f001 fcf0 	bl	80a5f80 <__aeabi_d2uiz>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
 80a45a0:	220a      	movs	r2, #10
 80a45a2:	4601      	mov	r1, r0
 80a45a4:	4681      	mov	r9, r0
 80a45a6:	4640      	mov	r0, r8
 80a45a8:	f7ff ff7b 	bl	80a44a2 <_ZN5Print11printNumberEmh>
  double remainder = number - (double)int_part;
  n += print(int_part);
 80a45ac:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
 80a45ae:	b3e5      	cbz	r5, 80a462a <_ZN5Print10printFloatEdh+0x14a>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
 80a45b0:	4648      	mov	r0, r9
 80a45b2:	f001 f997 	bl	80a58e4 <__aeabi_ui2d>
 80a45b6:	4602      	mov	r2, r0
 80a45b8:	460b      	mov	r3, r1
 80a45ba:	4630      	mov	r0, r6
 80a45bc:	4639      	mov	r1, r7
 80a45be:	f001 f853 	bl	80a5668 <__aeabi_dsub>
 80a45c2:	4606      	mov	r6, r0
 80a45c4:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a45c6:	4640      	mov	r0, r8
 80a45c8:	4921      	ldr	r1, [pc, #132]	; (80a4650 <_ZN5Print10printFloatEdh+0x170>)
 80a45ca:	f7ff ff3d 	bl	80a4448 <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
 80a45ce:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
 80a45d0:	2200      	movs	r2, #0
 80a45d2:	4b1e      	ldr	r3, [pc, #120]	; (80a464c <_ZN5Print10printFloatEdh+0x16c>)
 80a45d4:	4630      	mov	r0, r6
 80a45d6:	4639      	mov	r1, r7
 80a45d8:	f001 f9fa 	bl	80a59d0 <__aeabi_dmul>
 80a45dc:	4606      	mov	r6, r0
 80a45de:	460f      	mov	r7, r1
    int toPrint = int(remainder);
 80a45e0:	f001 fca6 	bl	80a5f30 <__aeabi_d2iz>
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
 80a45e4:	f1b0 0a00 	subs.w	sl, r0, #0
 80a45e8:	da07      	bge.n	80a45fa <_ZN5Print10printFloatEdh+0x11a>
            t = print('-');
 80a45ea:	212d      	movs	r1, #45	; 0x2d
 80a45ec:	4640      	mov	r0, r8
 80a45ee:	f7ff ff3f 	bl	80a4470 <_ZN5Print5printEc>
            val = -n;
 80a45f2:	f1ca 0100 	rsb	r1, sl, #0
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
            t = print('-');
 80a45f6:	4681      	mov	r9, r0
 80a45f8:	e002      	b.n	80a4600 <_ZN5Print10printFloatEdh+0x120>
            val = -n;
        } else {
            val = n;
 80a45fa:	4651      	mov	r1, sl
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
    } else {
        size_t t = 0;
 80a45fc:	f04f 0900 	mov.w	r9, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
 80a4600:	220a      	movs	r2, #10
 80a4602:	4640      	mov	r0, r8
 80a4604:	f7ff ff4d 	bl	80a44a2 <_ZN5Print11printNumberEmh>
    n += print(toPrint);
 80a4608:	4448      	add	r0, r9
 80a460a:	4404      	add	r4, r0
    remainder -= toPrint;
 80a460c:	4650      	mov	r0, sl
 80a460e:	f001 f979 	bl	80a5904 <__aeabi_i2d>
 80a4612:	4602      	mov	r2, r0
 80a4614:	460b      	mov	r3, r1
 80a4616:	4630      	mov	r0, r6
 80a4618:	4639      	mov	r1, r7
 80a461a:	f001 f825 	bl	80a5668 <__aeabi_dsub>
 80a461e:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 80a4620:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
 80a4624:	4606      	mov	r6, r0
 80a4626:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 80a4628:	d1d2      	bne.n	80a45d0 <_ZN5Print10printFloatEdh+0xf0>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
 80a462a:	4620      	mov	r0, r4
 80a462c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a4630:	080aa113 	.word	0x080aa113
 80a4634:	7fefffff 	.word	0x7fefffff
 80a4638:	080aa11b 	.word	0x080aa11b
 80a463c:	41efffff 	.word	0x41efffff
 80a4640:	080aa117 	.word	0x080aa117
 80a4644:	c1efffff 	.word	0xc1efffff
 80a4648:	3fe00000 	.word	0x3fe00000
 80a464c:	40240000 	.word	0x40240000
 80a4650:	080a9e91 	.word	0x080a9e91

080a4654 <_ZN5Print5printEfi>:
{
  return write(c);
}

size_t Print::print(float n, int digits)
{
 80a4654:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a4656:	4605      	mov	r5, r0
 80a4658:	4614      	mov	r4, r2
  return printFloat((double)n, digits);
 80a465a:	4608      	mov	r0, r1
 80a465c:	f001 f964 	bl	80a5928 <__aeabi_f2d>
 80a4660:	b2e4      	uxtb	r4, r4
 80a4662:	4602      	mov	r2, r0
 80a4664:	9400      	str	r4, [sp, #0]
 80a4666:	460b      	mov	r3, r1
 80a4668:	4628      	mov	r0, r5
 80a466a:	f7ff ff39 	bl	80a44e0 <_ZN5Print10printFloatEdh>
}
 80a466e:	b003      	add	sp, #12
 80a4670:	bd30      	pop	{r4, r5, pc}

080a4672 <_ZN5Print7printlnEdi>:
{
    return println((double)num, digits);
}

size_t Print::println(double num, int digits)
{
 80a4672:	b537      	push	{r0, r1, r2, r4, r5, lr}
  return printFloat((double)n, digits);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
 80a4674:	f89d 1018 	ldrb.w	r1, [sp, #24]
{
    return println((double)num, digits);
}

size_t Print::println(double num, int digits)
{
 80a4678:	4605      	mov	r5, r0
  return printFloat((double)n, digits);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
 80a467a:	9100      	str	r1, [sp, #0]
 80a467c:	f7ff ff30 	bl	80a44e0 <_ZN5Print10printFloatEdh>
 80a4680:	4604      	mov	r4, r0
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
 80a4682:	4628      	mov	r0, r5
 80a4684:	f7ff fef7 	bl	80a4476 <_ZN5Print7printlnEv>
  return n;
}
 80a4688:	4420      	add	r0, r4
 80a468a:	b003      	add	sp, #12
 80a468c:	bd30      	pop	{r4, r5, pc}

080a468e <_ZN5Print7printlnEfi>:
  n += println();
  return n;
}

size_t Print::println(float num, int digits)
{
 80a468e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a4690:	4604      	mov	r4, r0
    return println((double)num, digits);
 80a4692:	4608      	mov	r0, r1
  n += println();
  return n;
}

size_t Print::println(float num, int digits)
{
 80a4694:	4615      	mov	r5, r2
    return println((double)num, digits);
 80a4696:	f001 f947 	bl	80a5928 <__aeabi_f2d>
 80a469a:	9500      	str	r5, [sp, #0]
 80a469c:	4602      	mov	r2, r0
 80a469e:	460b      	mov	r3, r1
 80a46a0:	4620      	mov	r0, r4
 80a46a2:	f7ff ffe6 	bl	80a4672 <_ZN5Print7printlnEdi>
}
 80a46a6:	b003      	add	sp, #12
 80a46a8:	bd30      	pop	{r4, r5, pc}

080a46aa <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a46aa:	2300      	movs	r3, #0
 80a46ac:	461a      	mov	r2, r3
 80a46ae:	4619      	mov	r1, r3
 80a46b0:	6840      	ldr	r0, [r0, #4]
 80a46b2:	f7ff b8cd 	b.w	80a3850 <network_on>
	...

080a46b8 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a46b8:	4a01      	ldr	r2, [pc, #4]	; (80a46c0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a46ba:	4b02      	ldr	r3, [pc, #8]	; (80a46c4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a46bc:	601a      	str	r2, [r3, #0]
 80a46be:	4770      	bx	lr
 80a46c0:	080aa195 	.word	0x080aa195
 80a46c4:	20000458 	.word	0x20000458

080a46c8 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
 80a46c8:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
 80a46ca:	2000      	movs	r0, #0
 80a46cc:	f7ff f918 	bl	80a3900 <spark_sync_time_pending>
 80a46d0:	b128      	cbz	r0, 80a46de <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a46d2:	f7ff f90d 	bl	80a38f0 <spark_cloud_flag_connected>
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
 80a46d6:	f080 0001 	eor.w	r0, r0, #1
 80a46da:	b2c0      	uxtb	r0, r0
 80a46dc:	bd08      	pop	{r3, pc}
 80a46de:	2001      	movs	r0, #1
    }
 80a46e0:	bd08      	pop	{r3, pc}
	...

080a46e4 <_ZN9TimeClass4zoneEf>:
	return HAL_RTC_Get_UnixTime()+time_zone_cache+dst_current_cache;
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
 80a46e4:	b510      	push	{r4, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
 80a46e6:	4909      	ldr	r1, [pc, #36]	; (80a470c <_ZN9TimeClass4zoneEf+0x28>)
	return HAL_RTC_Get_UnixTime()+time_zone_cache+dst_current_cache;
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
 80a46e8:	4604      	mov	r4, r0
	if(GMT_Offset < -12 || GMT_Offset > 14)
 80a46ea:	f001 ff65 	bl	80a65b8 <__aeabi_fcmplt>
 80a46ee:	b960      	cbnz	r0, 80a470a <_ZN9TimeClass4zoneEf+0x26>
 80a46f0:	4907      	ldr	r1, [pc, #28]	; (80a4710 <_ZN9TimeClass4zoneEf+0x2c>)
 80a46f2:	4620      	mov	r0, r4
 80a46f4:	f001 ff7e 	bl	80a65f4 <__aeabi_fcmpgt>
 80a46f8:	b938      	cbnz	r0, 80a470a <_ZN9TimeClass4zoneEf+0x26>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
 80a46fa:	4906      	ldr	r1, [pc, #24]	; (80a4714 <_ZN9TimeClass4zoneEf+0x30>)
 80a46fc:	4620      	mov	r0, r4
 80a46fe:	f001 fdbd 	bl	80a627c <__aeabi_fmul>
 80a4702:	f001 ff81 	bl	80a6608 <__aeabi_f2iz>
 80a4706:	4b04      	ldr	r3, [pc, #16]	; (80a4718 <_ZN9TimeClass4zoneEf+0x34>)
 80a4708:	6018      	str	r0, [r3, #0]
 80a470a:	bd10      	pop	{r4, pc}
 80a470c:	c1400000 	.word	0xc1400000
 80a4710:	41600000 	.word	0x41600000
 80a4714:	45610000 	.word	0x45610000
 80a4718:	20000464 	.word	0x20000464

080a471c <_ZN9TimeClass7timeStrEl>:
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 80a471c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	t += time_zone_cache;
    t += dst_current_cache;
 80a471e:	4b0e      	ldr	r3, [pc, #56]	; (80a4758 <_ZN9TimeClass7timeStrEl+0x3c>)
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 80a4720:	4604      	mov	r4, r0
	t += time_zone_cache;
    t += dst_current_cache;
 80a4722:	681b      	ldr	r3, [r3, #0]
 80a4724:	a802      	add	r0, sp, #8
 80a4726:	4419      	add	r1, r3
 80a4728:	4b0c      	ldr	r3, [pc, #48]	; (80a475c <_ZN9TimeClass7timeStrEl+0x40>)
 80a472a:	681b      	ldr	r3, [r3, #0]
 80a472c:	4419      	add	r1, r3
 80a472e:	f840 1d04 	str.w	r1, [r0, #-4]!
	tm* calendar_time = localtime(&t);
 80a4732:	f002 f991 	bl	80a6a58 <localtime>
        char* ascstr = asctime(calendar_time);
 80a4736:	f002 f941 	bl	80a69bc <asctime>
 80a473a:	4605      	mov	r5, r0
        int len = strlen(ascstr);
 80a473c:	f002 ffea 	bl	80a7714 <strlen>
        ascstr[len-1] = 0; // remove final newline
 80a4740:	2300      	movs	r3, #0
 80a4742:	4428      	add	r0, r5
 80a4744:	f800 3c01 	strb.w	r3, [r0, #-1]
	return String(ascstr);
 80a4748:	4629      	mov	r1, r5
 80a474a:	4620      	mov	r0, r4
 80a474c:	f7ff fd09 	bl	80a4162 <_ZN6StringC1EPK19__FlashStringHelper>
}
 80a4750:	4620      	mov	r0, r4
 80a4752:	b003      	add	sp, #12
 80a4754:	bd30      	pop	{r4, r5, pc}
 80a4756:	bf00      	nop
 80a4758:	20000464 	.word	0x20000464
 80a475c:	20000460 	.word	0x20000460

080a4760 <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 80a4760:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a4764:	b0a4      	sub	sp, #144	; 0x90
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 80a4766:	ac14      	add	r4, sp, #80	; 0x50
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 80a4768:	4607      	mov	r7, r0
 80a476a:	4689      	mov	r9, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 80a476c:	4620      	mov	r0, r4
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 80a476e:	4611      	mov	r1, r2
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 80a4770:	223f      	movs	r2, #63	; 0x3f
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 80a4772:	461d      	mov	r5, r3
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 80a4774:	f002 ffeb 	bl	80a774e <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
 80a4778:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
 80a477a:	4620      	mov	r0, r4
String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
 80a477c:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
 80a4780:	f002 ffc8 	bl	80a7714 <strlen>
 80a4784:	4680      	mov	r8, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
 80a4786:	b925      	cbnz	r5, 80a4792 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        strcpy(time_zone_str, "Z");
 80a4788:	4924      	ldr	r1, [pc, #144]	; (80a481c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xbc>)
 80a478a:	a803      	add	r0, sp, #12
 80a478c:	f002 faa6 	bl	80a6cdc <strcpy>
 80a4790:	e013      	b.n	80a47ba <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x5a>
    }
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
 80a4792:	213c      	movs	r1, #60	; 0x3c
 80a4794:	fb95 f2f1 	sdiv	r2, r5, r1
 80a4798:	2a00      	cmp	r2, #0
 80a479a:	bfb8      	it	lt
 80a479c:	4252      	neglt	r2, r2
 80a479e:	fb92 f3f1 	sdiv	r3, r2, r1
 80a47a2:	fb01 2213 	mls	r2, r1, r3, r2
 80a47a6:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80a47aa:	9200      	str	r2, [sp, #0]
 80a47ac:	fb95 f3f3 	sdiv	r3, r5, r3
 80a47b0:	4a1b      	ldr	r2, [pc, #108]	; (80a4820 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xc0>)
 80a47b2:	2110      	movs	r1, #16
 80a47b4:	a803      	add	r0, sp, #12
 80a47b6:	f7ff f8e3 	bl	80a3980 <snprintf>
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 80a47ba:	4625      	mov	r5, r4
 80a47bc:	1b2e      	subs	r6, r5, r4
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
 80a47be:	f108 3aff 	add.w	sl, r8, #4294967295
 80a47c2:	45b2      	cmp	sl, r6
 80a47c4:	d91b      	bls.n	80a47fe <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x9e>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
 80a47c6:	782b      	ldrb	r3, [r5, #0]
 80a47c8:	2b25      	cmp	r3, #37	; 0x25
 80a47ca:	d116      	bne.n	80a47fa <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x9a>
 80a47cc:	786b      	ldrb	r3, [r5, #1]
 80a47ce:	2b7a      	cmp	r3, #122	; 0x7a
 80a47d0:	d113      	bne.n	80a47fa <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x9a>
        {
            size_t tzlen = strlen(time_zone_str);
 80a47d2:	a803      	add	r0, sp, #12
 80a47d4:	f002 ff9e 	bl	80a7714 <strlen>
 80a47d8:	4680      	mov	r8, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
 80a47da:	4430      	add	r0, r6
 80a47dc:	ebc6 020a 	rsb	r2, r6, sl
 80a47e0:	1ca9      	adds	r1, r5, #2
 80a47e2:	4420      	add	r0, r4
 80a47e4:	f002 fa34 	bl	80a6c50 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
 80a47e8:	4642      	mov	r2, r8
 80a47ea:	a903      	add	r1, sp, #12
 80a47ec:	4628      	mov	r0, r5
 80a47ee:	f002 fa2f 	bl	80a6c50 <memcpy>
            len = strlen(format_str);
 80a47f2:	4620      	mov	r0, r4
 80a47f4:	f002 ff8e 	bl	80a7714 <strlen>
 80a47f8:	4680      	mov	r8, r0
 80a47fa:	3501      	adds	r5, #1
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
 80a47fc:	e7de      	b.n	80a47bc <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x5c>
            len = strlen(format_str);
        }
    }

    char buf[50];
    strftime(buf, 50, format_str, calendar_time);
 80a47fe:	464b      	mov	r3, r9
 80a4800:	4622      	mov	r2, r4
 80a4802:	2132      	movs	r1, #50	; 0x32
 80a4804:	a807      	add	r0, sp, #28
 80a4806:	f002 fad1 	bl	80a6dac <strftime>
    return String(buf);
 80a480a:	a907      	add	r1, sp, #28
 80a480c:	4638      	mov	r0, r7
 80a480e:	f7ff fca8 	bl	80a4162 <_ZN6StringC1EPK19__FlashStringHelper>
}
 80a4812:	4638      	mov	r0, r7
 80a4814:	b024      	add	sp, #144	; 0x90
 80a4816:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a481a:	bf00      	nop
 80a481c:	080aa84d 	.word	0x080aa84d
 80a4820:	080aa1fb 	.word	0x080aa1fb

080a4824 <_ZN9TimeClass6formatElPKc>:
        ascstr[len-1] = 0; // remove final newline
	return String(ascstr);
}

String TimeClass::format(time_t t, const char* format_spec)
{
 80a4824:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80a4826:	4605      	mov	r5, r0
 80a4828:	9201      	str	r2, [sp, #4]
    if (format_spec==NULL)
 80a482a:	461c      	mov	r4, r3
 80a482c:	b913      	cbnz	r3, 80a4834 <_ZN9TimeClass6formatElPKc+0x10>
        format_spec = this->format_spec;
 80a482e:	4b12      	ldr	r3, [pc, #72]	; (80a4878 <_ZN9TimeClass6formatElPKc+0x54>)
 80a4830:	681c      	ldr	r4, [r3, #0]

    if (!format_spec || !strcmp(format_spec,TIME_FORMAT_DEFAULT)) {
 80a4832:	b12c      	cbz	r4, 80a4840 <_ZN9TimeClass6formatElPKc+0x1c>
 80a4834:	4b11      	ldr	r3, [pc, #68]	; (80a487c <_ZN9TimeClass6formatElPKc+0x58>)
 80a4836:	4620      	mov	r0, r4
 80a4838:	6819      	ldr	r1, [r3, #0]
 80a483a:	f002 fa45 	bl	80a6cc8 <strcmp>
 80a483e:	b920      	cbnz	r0, 80a484a <_ZN9TimeClass6formatElPKc+0x26>
        return timeStr(t);
 80a4840:	9901      	ldr	r1, [sp, #4]
 80a4842:	4628      	mov	r0, r5
 80a4844:	f7ff ff6a 	bl	80a471c <_ZN9TimeClass7timeStrEl>
 80a4848:	e013      	b.n	80a4872 <_ZN9TimeClass6formatElPKc+0x4e>
    }
    t += time_zone_cache;
 80a484a:	4f0d      	ldr	r7, [pc, #52]	; (80a4880 <_ZN9TimeClass6formatElPKc+0x5c>)
    t += dst_current_cache;
 80a484c:	9a01      	ldr	r2, [sp, #4]
 80a484e:	683b      	ldr	r3, [r7, #0]
 80a4850:	4e0c      	ldr	r6, [pc, #48]	; (80a4884 <_ZN9TimeClass6formatElPKc+0x60>)
 80a4852:	441a      	add	r2, r3
 80a4854:	6833      	ldr	r3, [r6, #0]
 80a4856:	a802      	add	r0, sp, #8
 80a4858:	4413      	add	r3, r2
 80a485a:	f840 3d04 	str.w	r3, [r0, #-4]!
    tm* calendar_time = localtime(&t);
 80a485e:	f002 f8fb 	bl	80a6a58 <localtime>
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
 80a4862:	683a      	ldr	r2, [r7, #0]
 80a4864:	6833      	ldr	r3, [r6, #0]
 80a4866:	4601      	mov	r1, r0
 80a4868:	4413      	add	r3, r2
 80a486a:	4628      	mov	r0, r5
 80a486c:	4622      	mov	r2, r4
 80a486e:	f7ff ff77 	bl	80a4760 <_ZN9TimeClass14timeFormatImplEP2tmPKci>
}
 80a4872:	4628      	mov	r0, r5
 80a4874:	b003      	add	sp, #12
 80a4876:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a4878:	2000045c 	.word	0x2000045c
 80a487c:	20000010 	.word	0x20000010
 80a4880:	20000464 	.word	0x20000464
 80a4884:	20000460 	.word	0x20000460

080a4888 <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
 80a4888:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
 80a488a:	2000      	movs	r0, #0
 80a488c:	f7fe fe3a 	bl	80a3504 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
 80a4890:	4604      	mov	r4, r0
 80a4892:	b968      	cbnz	r0, 80a48b0 <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 80a4894:	f7fe ff88 	bl	80a37a8 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 80a4898:	2801      	cmp	r0, #1
 80a489a:	d10b      	bne.n	80a48b4 <_ZN9TimeClass7isValidEv+0x2c>
 80a489c:	4620      	mov	r0, r4
 80a489e:	f7fe ff9b 	bl	80a37d8 <system_thread_get_state>
 80a48a2:	b938      	cbnz	r0, 80a48b4 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
 80a48a4:	f7ff ff10 	bl	80a46c8 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80a48a8:	b930      	cbnz	r0, 80a48b8 <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
 80a48aa:	f7ff f811 	bl	80a38d0 <spark_process>
 80a48ae:	e7f9      	b.n	80a48a4 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
 80a48b0:	2001      	movs	r0, #1
 80a48b2:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
 80a48b4:	2000      	movs	r0, #0
 80a48b6:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
 80a48b8:	f7ff ff06 	bl	80a46c8 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
 80a48bc:	2000      	movs	r0, #0
 80a48be:	f7fe fe21 	bl	80a3504 <HAL_RTC_Time_Is_Valid>
 80a48c2:	3000      	adds	r0, #0
 80a48c4:	bf18      	it	ne
 80a48c6:	2001      	movne	r0, #1
    }
    return rtcstate;
}
 80a48c8:	bd10      	pop	{r4, pc}

080a48ca <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
 80a48ca:	b508      	push	{r3, lr}
    (void)isValid();
 80a48cc:	f7ff ffdc 	bl	80a4888 <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
 80a48d0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
 80a48d4:	f7fe be0e 	b.w	80a34f4 <HAL_RTC_Get_UnixTime>

080a48d8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a48d8:	4b02      	ldr	r3, [pc, #8]	; (80a48e4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a48da:	681a      	ldr	r2, [r3, #0]
 80a48dc:	4b02      	ldr	r3, [pc, #8]	; (80a48e8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a48de:	601a      	str	r2, [r3, #0]
 80a48e0:	4770      	bx	lr
 80a48e2:	bf00      	nop
 80a48e4:	20000010 	.word	0x20000010
 80a48e8:	2000045c 	.word	0x2000045c

080a48ec <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a48ec:	2100      	movs	r1, #0
 80a48ee:	f7fe bf6b 	b.w	80a37c8 <system_delay_ms>

080a48f2 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a48f2:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a48f4:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a48f6:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a48f8:	b113      	cbz	r3, 80a4900 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a48fa:	2203      	movs	r2, #3
 80a48fc:	4601      	mov	r1, r0
 80a48fe:	4798      	blx	r3
    }
 80a4900:	4620      	mov	r0, r4
 80a4902:	bd10      	pop	{r4, pc}

080a4904 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a4904:	b510      	push	{r4, lr}
 80a4906:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a4908:	f7ff fff3 	bl	80a48f2 <_ZNSt14_Function_baseD1Ev>
 80a490c:	4620      	mov	r0, r4
 80a490e:	bd10      	pop	{r4, pc}

080a4910 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a4910:	4803      	ldr	r0, [pc, #12]	; (80a4920 <_GLOBAL__sub_I_RGB+0x10>)
 80a4912:	2300      	movs	r3, #0
 80a4914:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a4916:	4a03      	ldr	r2, [pc, #12]	; (80a4924 <_GLOBAL__sub_I_RGB+0x14>)
 80a4918:	4903      	ldr	r1, [pc, #12]	; (80a4928 <_GLOBAL__sub_I_RGB+0x18>)
 80a491a:	f000 bd37 	b.w	80a538c <__aeabi_atexit>
 80a491e:	bf00      	nop
 80a4920:	2000046c 	.word	0x2000046c
 80a4924:	20000100 	.word	0x20000100
 80a4928:	080a4905 	.word	0x080a4905

080a492c <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a492c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a492e:	4b14      	ldr	r3, [pc, #80]	; (80a4980 <serialEventRun+0x54>)
 80a4930:	b133      	cbz	r3, 80a4940 <serialEventRun+0x14>
 80a4932:	f000 f99f 	bl	80a4c74 <_Z16_fetch_usbserialv>
 80a4936:	6803      	ldr	r3, [r0, #0]
 80a4938:	691b      	ldr	r3, [r3, #16]
 80a493a:	4798      	blx	r3
 80a493c:	2800      	cmp	r0, #0
 80a493e:	dc16      	bgt.n	80a496e <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a4940:	4b10      	ldr	r3, [pc, #64]	; (80a4984 <serialEventRun+0x58>)
 80a4942:	b133      	cbz	r3, 80a4952 <serialEventRun+0x26>
 80a4944:	f000 fa4c 	bl	80a4de0 <_Z22__fetch_global_Serial1v>
 80a4948:	6803      	ldr	r3, [r0, #0]
 80a494a:	691b      	ldr	r3, [r3, #16]
 80a494c:	4798      	blx	r3
 80a494e:	2800      	cmp	r0, #0
 80a4950:	dc10      	bgt.n	80a4974 <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a4952:	4b0d      	ldr	r3, [pc, #52]	; (80a4988 <serialEventRun+0x5c>)
 80a4954:	b10b      	cbz	r3, 80a495a <serialEventRun+0x2e>
 80a4956:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a495a:	4b0c      	ldr	r3, [pc, #48]	; (80a498c <serialEventRun+0x60>)
 80a495c:	b17b      	cbz	r3, 80a497e <serialEventRun+0x52>
 80a495e:	f000 f9b7 	bl	80a4cd0 <_Z17_fetch_usbserial1v>
 80a4962:	6803      	ldr	r3, [r0, #0]
 80a4964:	691b      	ldr	r3, [r3, #16]
 80a4966:	4798      	blx	r3
 80a4968:	2800      	cmp	r0, #0
 80a496a:	dc06      	bgt.n	80a497a <serialEventRun+0x4e>
 80a496c:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a496e:	f3af 8000 	nop.w
 80a4972:	e7e5      	b.n	80a4940 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a4974:	f3af 8000 	nop.w
 80a4978:	e7eb      	b.n	80a4952 <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a497a:	f3af 8000 	nop.w
 80a497e:	bd08      	pop	{r3, pc}
	...

080a4990 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a4990:	b508      	push	{r3, lr}
	serialEventRun();
 80a4992:	f7ff ffcb 	bl	80a492c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a4996:	f7fe fda5 	bl	80a34e4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a499a:	4b01      	ldr	r3, [pc, #4]	; (80a49a0 <_post_loop+0x10>)
 80a499c:	6018      	str	r0, [r3, #0]
 80a499e:	bd08      	pop	{r3, pc}
 80a49a0:	200004e4 	.word	0x200004e4

080a49a4 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a49a4:	4802      	ldr	r0, [pc, #8]	; (80a49b0 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a49a6:	4a03      	ldr	r2, [pc, #12]	; (80a49b4 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a49a8:	4903      	ldr	r1, [pc, #12]	; (80a49b8 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a49aa:	1a12      	subs	r2, r2, r0
 80a49ac:	f002 b950 	b.w	80a6c50 <memcpy>
 80a49b0:	40024000 	.word	0x40024000
 80a49b4:	40024004 	.word	0x40024004
 80a49b8:	080aa9c8 	.word	0x080aa9c8

080a49bc <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a49bc:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a49be:	2300      	movs	r3, #0
 80a49c0:	9300      	str	r3, [sp, #0]
 80a49c2:	461a      	mov	r2, r3
 80a49c4:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a49c8:	f7fe ff18 	bl	80a37fc <system_ctrl_set_result>
}
 80a49cc:	b003      	add	sp, #12
 80a49ce:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a49d4 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a49d4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a49d6:	8843      	ldrh	r3, [r0, #2]
 80a49d8:	2b0a      	cmp	r3, #10
 80a49da:	d008      	beq.n	80a49ee <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a49dc:	2b50      	cmp	r3, #80	; 0x50
 80a49de:	d109      	bne.n	80a49f4 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a49e0:	4b09      	ldr	r3, [pc, #36]	; (80a4a08 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a49e2:	681b      	ldr	r3, [r3, #0]
 80a49e4:	b13b      	cbz	r3, 80a49f6 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a49e6:	b003      	add	sp, #12
 80a49e8:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a49ec:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a49ee:	f7ff ffe5 	bl	80a49bc <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a49f2:	e006      	b.n	80a4a02 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a49f4:	2300      	movs	r3, #0
 80a49f6:	9300      	str	r3, [sp, #0]
 80a49f8:	461a      	mov	r2, r3
 80a49fa:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a49fe:	f7fe fefd 	bl	80a37fc <system_ctrl_set_result>
        break;
    }
}
 80a4a02:	b003      	add	sp, #12
 80a4a04:	f85d fb04 	ldr.w	pc, [sp], #4
 80a4a08:	2000047c 	.word	0x2000047c

080a4a0c <module_user_init_hook>:

void module_user_init_hook()
{
 80a4a0c:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a4a0e:	4c10      	ldr	r4, [pc, #64]	; (80a4a50 <module_user_init_hook+0x44>)
 80a4a10:	4d10      	ldr	r5, [pc, #64]	; (80a4a54 <module_user_init_hook+0x48>)
 80a4a12:	6823      	ldr	r3, [r4, #0]
 80a4a14:	42ab      	cmp	r3, r5
 80a4a16:	4b10      	ldr	r3, [pc, #64]	; (80a4a58 <module_user_init_hook+0x4c>)
 80a4a18:	bf0c      	ite	eq
 80a4a1a:	2201      	moveq	r2, #1
 80a4a1c:	2200      	movne	r2, #0
 80a4a1e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a4a20:	d002      	beq.n	80a4a28 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a4a22:	f7ff ffbf 	bl	80a49a4 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a4a26:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a4a28:	f7fe fd54 	bl	80a34d4 <HAL_RNG_GetRandomNumber>
 80a4a2c:	4604      	mov	r4, r0
    srand(seed);
 80a4a2e:	f002 f923 	bl	80a6c78 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a4a32:	4b0a      	ldr	r3, [pc, #40]	; (80a4a5c <module_user_init_hook+0x50>)
 80a4a34:	b113      	cbz	r3, 80a4a3c <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a4a36:	4620      	mov	r0, r4
 80a4a38:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a4a3c:	2100      	movs	r1, #0
 80a4a3e:	4807      	ldr	r0, [pc, #28]	; (80a4a5c <module_user_init_hook+0x50>)
 80a4a40:	f7fe ff66 	bl	80a3910 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a4a44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a4a48:	2100      	movs	r1, #0
 80a4a4a:	4805      	ldr	r0, [pc, #20]	; (80a4a60 <module_user_init_hook+0x54>)
 80a4a4c:	f7fe becc 	b.w	80a37e8 <system_ctrl_set_app_request_handler>
 80a4a50:	40024000 	.word	0x40024000
 80a4a54:	9a271c1e 	.word	0x9a271c1e
 80a4a58:	20000480 	.word	0x20000480
 80a4a5c:	00000000 	.word	0x00000000
 80a4a60:	080a49d5 	.word	0x080a49d5

080a4a64 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
}

} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
 80a4a64:	b510      	push	{r4, lr}
 80a4a66:	b088      	sub	sp, #32
 80a4a68:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 80a4a6a:	4668      	mov	r0, sp
 80a4a6c:	f7ff fb79 	bl	80a4162 <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
 80a4a70:	4669      	mov	r1, sp
 80a4a72:	a804      	add	r0, sp, #16
 80a4a74:	f7ff fbb4 	bl	80a41e0 <_ZN6StringC1ERKS_>
 80a4a78:	a804      	add	r0, sp, #16
 80a4a7a:	47a0      	blx	r4
 80a4a7c:	4604      	mov	r4, r0
 80a4a7e:	a804      	add	r0, sp, #16
 80a4a80:	f7ff fb28 	bl	80a40d4 <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 80a4a84:	4668      	mov	r0, sp
 80a4a86:	f7ff fb25 	bl	80a40d4 <_ZN6StringD1Ev>
    return (*fn)(p);
}
 80a4a8a:	4620      	mov	r0, r4
 80a4a8c:	b008      	add	sp, #32
 80a4a8e:	bd10      	pop	{r4, pc}

080a4a90 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
 80a4a90:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a4a92:	4607      	mov	r7, r0
 80a4a94:	460e      	mov	r6, r1
 80a4a96:	4615      	mov	r5, r2
 80a4a98:	b085      	sub	sp, #20
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
 80a4a9a:	2410      	movs	r4, #16
 80a4a9c:	4622      	mov	r2, r4
 80a4a9e:	2100      	movs	r1, #0
 80a4aa0:	4668      	mov	r0, sp
 80a4aa2:	f002 f8e0 	bl	80a6c66 <memset>
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 80a4aa6:	2200      	movs	r2, #0
 80a4aa8:	4669      	mov	r1, sp
 80a4aaa:	4610      	mov	r0, r2
         size = sizeof(*this);
 80a4aac:	f8ad 4000 	strh.w	r4, [sp]

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
 80a4ab0:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
 80a4ab2:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
 80a4ab4:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 80a4ab6:	f7fe ff03 	bl	80a38c0 <spark_function>
}
 80a4aba:	b005      	add	sp, #20
 80a4abc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a4abe <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a4abe:	4770      	bx	lr

080a4ac0 <_ZN9IPAddressD0Ev>:
 80a4ac0:	b510      	push	{r4, lr}
 80a4ac2:	4604      	mov	r4, r0
 80a4ac4:	2118      	movs	r1, #24
 80a4ac6:	f000 fc6f 	bl	80a53a8 <_ZdlPvj>
 80a4aca:	4620      	mov	r0, r4
 80a4acc:	bd10      	pop	{r4, pc}

080a4ace <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a4ace:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a4ad0:	460f      	mov	r7, r1
 80a4ad2:	f100 0608 	add.w	r6, r0, #8
 80a4ad6:	1d05      	adds	r5, r0, #4
 80a4ad8:	2400      	movs	r4, #0
 80a4ada:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a4ade:	220a      	movs	r2, #10
 80a4ae0:	4638      	mov	r0, r7
 80a4ae2:	f7ff fcde 	bl	80a44a2 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a4ae6:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a4ae8:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a4aea:	d007      	beq.n	80a4afc <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a4aec:	2c00      	cmp	r4, #0
 80a4aee:	d0f4      	beq.n	80a4ada <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a4af0:	212e      	movs	r1, #46	; 0x2e
 80a4af2:	4638      	mov	r0, r7
 80a4af4:	f7ff fcbc 	bl	80a4470 <_ZN5Print5printEc>
 80a4af8:	4404      	add	r4, r0
 80a4afa:	e7ee      	b.n	80a4ada <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a4afc:	4620      	mov	r0, r4
 80a4afe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a4b00 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a4b00:	b510      	push	{r4, lr}
 80a4b02:	4604      	mov	r4, r0
 80a4b04:	4b04      	ldr	r3, [pc, #16]	; (80a4b18 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a4b06:	2211      	movs	r2, #17
 80a4b08:	f840 3b04 	str.w	r3, [r0], #4
 80a4b0c:	2100      	movs	r1, #0
 80a4b0e:	f002 f8aa 	bl	80a6c66 <memset>
{
    clear();
}
 80a4b12:	4620      	mov	r0, r4
 80a4b14:	bd10      	pop	{r4, pc}
 80a4b16:	bf00      	nop
 80a4b18:	080aa22c 	.word	0x080aa22c

080a4b1c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a4b1c:	4603      	mov	r3, r0
 80a4b1e:	4a07      	ldr	r2, [pc, #28]	; (80a4b3c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a4b20:	b510      	push	{r4, lr}
 80a4b22:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a4b26:	f101 0210 	add.w	r2, r1, #16
 80a4b2a:	f851 4b04 	ldr.w	r4, [r1], #4
 80a4b2e:	4291      	cmp	r1, r2
 80a4b30:	f843 4b04 	str.w	r4, [r3], #4
 80a4b34:	d1f9      	bne.n	80a4b2a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a4b36:	780a      	ldrb	r2, [r1, #0]
 80a4b38:	701a      	strb	r2, [r3, #0]
}
 80a4b3a:	bd10      	pop	{r4, pc}
 80a4b3c:	080aa22c 	.word	0x080aa22c

080a4b40 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a4b40:	4a02      	ldr	r2, [pc, #8]	; (80a4b4c <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a4b42:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a4b44:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a4b46:	2204      	movs	r2, #4
 80a4b48:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a4b4a:	4770      	bx	lr
 80a4b4c:	080aa22c 	.word	0x080aa22c

080a4b50 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a4b50:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a4b52:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a4b56:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a4b5a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a4b5e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a4b62:	2304      	movs	r3, #4
 80a4b64:	6041      	str	r1, [r0, #4]
 80a4b66:	7503      	strb	r3, [r0, #20]
 80a4b68:	bd10      	pop	{r4, pc}
	...

080a4b6c <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a4b6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a4b6e:	4d04      	ldr	r5, [pc, #16]	; (80a4b80 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a4b70:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a4b72:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a4b76:	9500      	str	r5, [sp, #0]
 80a4b78:	f7ff ffea 	bl	80a4b50 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a4b7c:	b003      	add	sp, #12
 80a4b7e:	bd30      	pop	{r4, r5, pc}
 80a4b80:	080aa22c 	.word	0x080aa22c

080a4b84 <_ZN9IPAddressaSEPKh>:
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
 80a4b84:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
 80a4b86:	780d      	ldrb	r5, [r1, #0]
 80a4b88:	788b      	ldrb	r3, [r1, #2]
 80a4b8a:	784a      	ldrb	r2, [r1, #1]
 80a4b8c:	78c9      	ldrb	r1, [r1, #3]
 80a4b8e:	9100      	str	r1, [sp, #0]
 80a4b90:	4629      	mov	r1, r5
 80a4b92:	f7ff ffdd 	bl	80a4b50 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
 80a4b96:	b003      	add	sp, #12
 80a4b98:	bd30      	pop	{r4, r5, pc}
	...

080a4b9c <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(uint32_t address)
{
    *this = address;
}

IPAddress::IPAddress(const uint8_t* address)
 80a4b9c:	b510      	push	{r4, lr}
 80a4b9e:	4604      	mov	r4, r0
 80a4ba0:	4b02      	ldr	r3, [pc, #8]	; (80a4bac <_ZN9IPAddressC1EPKh+0x10>)
 80a4ba2:	6003      	str	r3, [r0, #0]
{
    *this = address;
 80a4ba4:	f7ff ffee 	bl	80a4b84 <_ZN9IPAddressaSEPKh>
}
 80a4ba8:	4620      	mov	r0, r4
 80a4baa:	bd10      	pop	{r4, pc}
 80a4bac:	080aa22c 	.word	0x080aa22c

080a4bb0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a4bb0:	7441      	strb	r1, [r0, #17]
 80a4bb2:	4770      	bx	lr

080a4bb4 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a4bb4:	4770      	bx	lr

080a4bb6 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80a4bb6:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a4bb8:	2100      	movs	r1, #0
 80a4bba:	7c00      	ldrb	r0, [r0, #16]
 80a4bbc:	f7fe fdb4 	bl	80a3728 <HAL_USB_USART_Receive_Data>
}
 80a4bc0:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a4bc4:	bf28      	it	cs
 80a4bc6:	f04f 30ff 	movcs.w	r0, #4294967295
 80a4bca:	bd08      	pop	{r3, pc}

080a4bcc <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80a4bcc:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a4bce:	2101      	movs	r1, #1
 80a4bd0:	7c00      	ldrb	r0, [r0, #16]
 80a4bd2:	f7fe fda9 	bl	80a3728 <HAL_USB_USART_Receive_Data>
}
 80a4bd6:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a4bda:	bf28      	it	cs
 80a4bdc:	f04f 30ff 	movcs.w	r0, #4294967295
 80a4be0:	bd08      	pop	{r3, pc}

080a4be2 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80a4be2:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a4be4:	7c00      	ldrb	r0, [r0, #16]
 80a4be6:	f7fe fd97 	bl	80a3718 <HAL_USB_USART_Available_Data_For_Write>
}
 80a4bea:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a4bee:	bd08      	pop	{r3, pc}

080a4bf0 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80a4bf0:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a4bf2:	7c00      	ldrb	r0, [r0, #16]
 80a4bf4:	f7fe fd88 	bl	80a3708 <HAL_USB_USART_Available_Data>
}
 80a4bf8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a4bfc:	bd08      	pop	{r3, pc}

080a4bfe <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a4bfe:	7c00      	ldrb	r0, [r0, #16]
 80a4c00:	f7fe bda2 	b.w	80a3748 <HAL_USB_USART_Flush_Data>

080a4c04 <_ZN9USBSerialD0Ev>:
 80a4c04:	b510      	push	{r4, lr}
 80a4c06:	4604      	mov	r4, r0
 80a4c08:	2114      	movs	r1, #20
 80a4c0a:	f000 fbcd 	bl	80a53a8 <_ZdlPvj>
 80a4c0e:	4620      	mov	r0, r4
 80a4c10:	bd10      	pop	{r4, pc}

080a4c12 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a4c12:	b538      	push	{r3, r4, r5, lr}
 80a4c14:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a4c16:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a4c18:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a4c1a:	f7fe fd7d 	bl	80a3718 <HAL_USB_USART_Available_Data_For_Write>
 80a4c1e:	2800      	cmp	r0, #0
 80a4c20:	dc01      	bgt.n	80a4c26 <_ZN9USBSerial5writeEh+0x14>
 80a4c22:	7c60      	ldrb	r0, [r4, #17]
 80a4c24:	b128      	cbz	r0, 80a4c32 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a4c26:	4629      	mov	r1, r5
 80a4c28:	7c20      	ldrb	r0, [r4, #16]
 80a4c2a:	f7fe fd85 	bl	80a3738 <HAL_USB_USART_Send_Data>
 80a4c2e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 80a4c32:	bd38      	pop	{r3, r4, r5, pc}

080a4c34 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a4c34:	b510      	push	{r4, lr}
 80a4c36:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a4c38:	2300      	movs	r3, #0
 80a4c3a:	6063      	str	r3, [r4, #4]
 80a4c3c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a4c40:	60a3      	str	r3, [r4, #8]
 80a4c42:	4b05      	ldr	r3, [pc, #20]	; (80a4c58 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a4c44:	4608      	mov	r0, r1
 80a4c46:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a4c48:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a4c4a:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a4c4c:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a4c4e:	4611      	mov	r1, r2
 80a4c50:	f7fe fd4a 	bl	80a36e8 <HAL_USB_USART_Init>
}
 80a4c54:	4620      	mov	r0, r4
 80a4c56:	bd10      	pop	{r4, pc}
 80a4c58:	080aa240 	.word	0x080aa240

080a4c5c <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a4c5c:	2200      	movs	r2, #0
 80a4c5e:	7c00      	ldrb	r0, [r0, #16]
 80a4c60:	f7fe bd4a 	b.w	80a36f8 <HAL_USB_USART_Begin>

080a4c64 <_Z19acquireSerialBufferv>:
 80a4c64:	b510      	push	{r4, lr}
 80a4c66:	4604      	mov	r4, r0
 80a4c68:	2214      	movs	r2, #20
 80a4c6a:	2100      	movs	r1, #0
 80a4c6c:	f001 fffb 	bl	80a6c66 <memset>
 80a4c70:	4620      	mov	r0, r4
 80a4c72:	bd10      	pop	{r4, pc}

080a4c74 <_Z16_fetch_usbserialv>:

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a4c74:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a4c76:	4d0e      	ldr	r5, [pc, #56]	; (80a4cb0 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a4c78:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a4c7a:	a801      	add	r0, sp, #4
 80a4c7c:	f7ff fff2 	bl	80a4c64 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a4c80:	6829      	ldr	r1, [r5, #0]
 80a4c82:	f011 0401 	ands.w	r4, r1, #1
 80a4c86:	d110      	bne.n	80a4caa <_Z16_fetch_usbserialv+0x36>
 80a4c88:	4628      	mov	r0, r5
 80a4c8a:	f7fb fa10 	bl	80a00ae <__cxa_guard_acquire>
 80a4c8e:	b160      	cbz	r0, 80a4caa <_Z16_fetch_usbserialv+0x36>
 80a4c90:	aa01      	add	r2, sp, #4
 80a4c92:	4621      	mov	r1, r4
 80a4c94:	4807      	ldr	r0, [pc, #28]	; (80a4cb4 <_Z16_fetch_usbserialv+0x40>)
 80a4c96:	f7ff ffcd 	bl	80a4c34 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a4c9a:	4628      	mov	r0, r5
 80a4c9c:	f7fb fa0c 	bl	80a00b8 <__cxa_guard_release>
 80a4ca0:	4a05      	ldr	r2, [pc, #20]	; (80a4cb8 <_Z16_fetch_usbserialv+0x44>)
 80a4ca2:	4906      	ldr	r1, [pc, #24]	; (80a4cbc <_Z16_fetch_usbserialv+0x48>)
 80a4ca4:	4803      	ldr	r0, [pc, #12]	; (80a4cb4 <_Z16_fetch_usbserialv+0x40>)
 80a4ca6:	f000 fb71 	bl	80a538c <__aeabi_atexit>
	return _usbserial;
}
 80a4caa:	4802      	ldr	r0, [pc, #8]	; (80a4cb4 <_Z16_fetch_usbserialv+0x40>)
 80a4cac:	b007      	add	sp, #28
 80a4cae:	bd30      	pop	{r4, r5, pc}
 80a4cb0:	20000484 	.word	0x20000484
 80a4cb4:	2000048c 	.word	0x2000048c
 80a4cb8:	20000100 	.word	0x20000100
 80a4cbc:	080a4bb5 	.word	0x080a4bb5

080a4cc0 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a4cc0:	b510      	push	{r4, lr}
 80a4cc2:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a4cc4:	2214      	movs	r2, #20
 80a4cc6:	2100      	movs	r1, #0
 80a4cc8:	f001 ffcd 	bl	80a6c66 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a4ccc:	4620      	mov	r0, r4
 80a4cce:	bd10      	pop	{r4, pc}

080a4cd0 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a4cd0:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a4cd2:	4c0e      	ldr	r4, [pc, #56]	; (80a4d0c <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a4cd4:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a4cd6:	a801      	add	r0, sp, #4
 80a4cd8:	f7ff fff2 	bl	80a4cc0 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a4cdc:	6823      	ldr	r3, [r4, #0]
 80a4cde:	07db      	lsls	r3, r3, #31
 80a4ce0:	d410      	bmi.n	80a4d04 <_Z17_fetch_usbserial1v+0x34>
 80a4ce2:	4620      	mov	r0, r4
 80a4ce4:	f7fb f9e3 	bl	80a00ae <__cxa_guard_acquire>
 80a4ce8:	b160      	cbz	r0, 80a4d04 <_Z17_fetch_usbserial1v+0x34>
 80a4cea:	aa01      	add	r2, sp, #4
 80a4cec:	2101      	movs	r1, #1
 80a4cee:	4808      	ldr	r0, [pc, #32]	; (80a4d10 <_Z17_fetch_usbserial1v+0x40>)
 80a4cf0:	f7ff ffa0 	bl	80a4c34 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a4cf4:	4620      	mov	r0, r4
 80a4cf6:	f7fb f9df 	bl	80a00b8 <__cxa_guard_release>
 80a4cfa:	4a06      	ldr	r2, [pc, #24]	; (80a4d14 <_Z17_fetch_usbserial1v+0x44>)
 80a4cfc:	4906      	ldr	r1, [pc, #24]	; (80a4d18 <_Z17_fetch_usbserial1v+0x48>)
 80a4cfe:	4804      	ldr	r0, [pc, #16]	; (80a4d10 <_Z17_fetch_usbserial1v+0x40>)
 80a4d00:	f000 fb44 	bl	80a538c <__aeabi_atexit>
  return _usbserial1;
}
 80a4d04:	4802      	ldr	r0, [pc, #8]	; (80a4d10 <_Z17_fetch_usbserial1v+0x40>)
 80a4d06:	b006      	add	sp, #24
 80a4d08:	bd10      	pop	{r4, pc}
 80a4d0a:	bf00      	nop
 80a4d0c:	20000488 	.word	0x20000488
 80a4d10:	200004a0 	.word	0x200004a0
 80a4d14:	20000100 	.word	0x20000100
 80a4d18:	080a4bb5 	.word	0x080a4bb5

080a4d1c <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a4d1c:	4770      	bx	lr

080a4d1e <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a4d1e:	7441      	strb	r1, [r0, #17]
 80a4d20:	4770      	bx	lr

080a4d22 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80a4d22:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80a4d24:	7c00      	ldrb	r0, [r0, #16]
 80a4d26:	f7fe fc55 	bl	80a35d4 <HAL_USART_Available_Data_For_Write>
}
 80a4d2a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a4d2e:	bd08      	pop	{r3, pc}

080a4d30 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a4d30:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80a4d32:	7c00      	ldrb	r0, [r0, #16]
 80a4d34:	f7fe fc26 	bl	80a3584 <HAL_USART_Available_Data>
}
 80a4d38:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a4d3c:	bd08      	pop	{r3, pc}

080a4d3e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a4d3e:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80a4d40:	7c00      	ldrb	r0, [r0, #16]
 80a4d42:	f7fe fc2f 	bl	80a35a4 <HAL_USART_Peek_Data>
}
 80a4d46:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a4d4a:	bf28      	it	cs
 80a4d4c:	f04f 30ff 	movcs.w	r0, #4294967295
 80a4d50:	bd08      	pop	{r3, pc}

080a4d52 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a4d52:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80a4d54:	7c00      	ldrb	r0, [r0, #16]
 80a4d56:	f7fe fc1d 	bl	80a3594 <HAL_USART_Read_Data>
}
 80a4d5a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a4d5e:	bf28      	it	cs
 80a4d60:	f04f 30ff 	movcs.w	r0, #4294967295
 80a4d64:	bd08      	pop	{r3, pc}

080a4d66 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a4d66:	7c00      	ldrb	r0, [r0, #16]
 80a4d68:	f7fe bc24 	b.w	80a35b4 <HAL_USART_Flush_Data>

080a4d6c <_ZN11USARTSerialD0Ev>:
 80a4d6c:	b510      	push	{r4, lr}
 80a4d6e:	4604      	mov	r4, r0
 80a4d70:	2114      	movs	r1, #20
 80a4d72:	f000 fb19 	bl	80a53a8 <_ZdlPvj>
 80a4d76:	4620      	mov	r0, r4
 80a4d78:	bd10      	pop	{r4, pc}

080a4d7a <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a4d7a:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a4d7c:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a4d7e:	4604      	mov	r4, r0
 80a4d80:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a4d82:	b925      	cbnz	r5, 80a4d8e <_ZN11USARTSerial5writeEh+0x14>
 80a4d84:	7c00      	ldrb	r0, [r0, #16]
 80a4d86:	f7fe fc25 	bl	80a35d4 <HAL_USART_Available_Data_For_Write>
 80a4d8a:	2800      	cmp	r0, #0
 80a4d8c:	dd05      	ble.n	80a4d9a <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a4d8e:	4631      	mov	r1, r6
 80a4d90:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a4d92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a4d96:	f7fe bbed 	b.w	80a3574 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a4d9a:	4628      	mov	r0, r5
 80a4d9c:	bd70      	pop	{r4, r5, r6, pc}
	...

080a4da0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a4da0:	b510      	push	{r4, lr}
 80a4da2:	4604      	mov	r4, r0
 80a4da4:	4608      	mov	r0, r1
 80a4da6:	4611      	mov	r1, r2
 80a4da8:	2200      	movs	r2, #0
 80a4daa:	6062      	str	r2, [r4, #4]
 80a4dac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a4db0:	60a2      	str	r2, [r4, #8]
 80a4db2:	4a05      	ldr	r2, [pc, #20]	; (80a4dc8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a4db4:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a4db6:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a4db8:	2201      	movs	r2, #1
 80a4dba:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a4dbc:	461a      	mov	r2, r3
 80a4dbe:	f7fe fbd1 	bl	80a3564 <HAL_USART_Init>
}
 80a4dc2:	4620      	mov	r0, r4
 80a4dc4:	bd10      	pop	{r4, pc}
 80a4dc6:	bf00      	nop
 80a4dc8:	080aa270 	.word	0x080aa270

080a4dcc <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
 80a4dcc:	2300      	movs	r3, #0
 80a4dce:	7c00      	ldrb	r0, [r0, #16]
 80a4dd0:	f7fe bc08 	b.w	80a35e4 <HAL_USART_BeginConfig>

080a4dd4 <_ZN11USARTSerial5beginEm>:
}
// Public Methods //////////////////////////////////////////////////////////////

void USARTSerial::begin(unsigned long baud)
{
  begin(baud, SERIAL_8N1);
 80a4dd4:	2200      	movs	r2, #0
 80a4dd6:	f7ff bff9 	b.w	80a4dcc <_ZN11USARTSerial5beginEmm>

080a4dda <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a4dda:	7c00      	ldrb	r0, [r0, #16]
 80a4ddc:	f7fe bbf2 	b.w	80a35c4 <HAL_USART_Is_Enabled>

080a4de0 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a4de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
#else
  if (!serial1_rx_buffer) {
 80a4de2:	4c19      	ldr	r4, [pc, #100]	; (80a4e48 <_Z22__fetch_global_Serial1v+0x68>)
 80a4de4:	6825      	ldr	r5, [r4, #0]
 80a4de6:	b94d      	cbnz	r5, 80a4dfc <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new Ring_Buffer();
 80a4de8:	2084      	movs	r0, #132	; 0x84
 80a4dea:	f7fb f958 	bl	80a009e <_Znwj>
 80a4dee:	4606      	mov	r6, r0
 80a4df0:	b118      	cbz	r0, 80a4dfa <_Z22__fetch_global_Serial1v+0x1a>
 80a4df2:	2284      	movs	r2, #132	; 0x84
 80a4df4:	4629      	mov	r1, r5
 80a4df6:	f001 ff36 	bl	80a6c66 <memset>
 80a4dfa:	6026      	str	r6, [r4, #0]
  }
  if (!serial1_tx_buffer) {
 80a4dfc:	4d13      	ldr	r5, [pc, #76]	; (80a4e4c <_Z22__fetch_global_Serial1v+0x6c>)
 80a4dfe:	682e      	ldr	r6, [r5, #0]
 80a4e00:	b94e      	cbnz	r6, 80a4e16 <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new Ring_Buffer();
 80a4e02:	2084      	movs	r0, #132	; 0x84
 80a4e04:	f7fb f94b 	bl	80a009e <_Znwj>
 80a4e08:	4607      	mov	r7, r0
 80a4e0a:	b118      	cbz	r0, 80a4e14 <_Z22__fetch_global_Serial1v+0x34>
 80a4e0c:	2284      	movs	r2, #132	; 0x84
 80a4e0e:	4631      	mov	r1, r6
 80a4e10:	f001 ff29 	bl	80a6c66 <memset>
 80a4e14:	602f      	str	r7, [r5, #0]
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
 80a4e16:	4f0e      	ldr	r7, [pc, #56]	; (80a4e50 <_Z22__fetch_global_Serial1v+0x70>)
 80a4e18:	6839      	ldr	r1, [r7, #0]
 80a4e1a:	f011 0601 	ands.w	r6, r1, #1
 80a4e1e:	d111      	bne.n	80a4e44 <_Z22__fetch_global_Serial1v+0x64>
 80a4e20:	4638      	mov	r0, r7
 80a4e22:	f7fb f944 	bl	80a00ae <__cxa_guard_acquire>
 80a4e26:	b168      	cbz	r0, 80a4e44 <_Z22__fetch_global_Serial1v+0x64>
 80a4e28:	6822      	ldr	r2, [r4, #0]
 80a4e2a:	4631      	mov	r1, r6
 80a4e2c:	682b      	ldr	r3, [r5, #0]
 80a4e2e:	4809      	ldr	r0, [pc, #36]	; (80a4e54 <_Z22__fetch_global_Serial1v+0x74>)
 80a4e30:	f7ff ffb6 	bl	80a4da0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a4e34:	4638      	mov	r0, r7
 80a4e36:	f7fb f93f 	bl	80a00b8 <__cxa_guard_release>
 80a4e3a:	4a07      	ldr	r2, [pc, #28]	; (80a4e58 <_Z22__fetch_global_Serial1v+0x78>)
 80a4e3c:	4907      	ldr	r1, [pc, #28]	; (80a4e5c <_Z22__fetch_global_Serial1v+0x7c>)
 80a4e3e:	4805      	ldr	r0, [pc, #20]	; (80a4e54 <_Z22__fetch_global_Serial1v+0x74>)
 80a4e40:	f000 faa4 	bl	80a538c <__aeabi_atexit>
#endif
	return serial1;
}
 80a4e44:	4803      	ldr	r0, [pc, #12]	; (80a4e54 <_Z22__fetch_global_Serial1v+0x74>)
 80a4e46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a4e48:	200004d0 	.word	0x200004d0
 80a4e4c:	200004c8 	.word	0x200004c8
 80a4e50:	200004cc 	.word	0x200004cc
 80a4e54:	200004b4 	.word	0x200004b4
 80a4e58:	20000100 	.word	0x20000100
 80a4e5c:	080a4d1d 	.word	0x080a4d1d

080a4e60 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
 80a4e60:	4770      	bx	lr

080a4e62 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a4e62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a4e64:	4606      	mov	r6, r0
 80a4e66:	4615      	mov	r5, r2
 80a4e68:	460c      	mov	r4, r1
 80a4e6a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a4e6c:	42bc      	cmp	r4, r7
 80a4e6e:	d006      	beq.n	80a4e7e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a4e70:	6833      	ldr	r3, [r6, #0]
 80a4e72:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a4e76:	689b      	ldr	r3, [r3, #8]
 80a4e78:	4630      	mov	r0, r6
 80a4e7a:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a4e7c:	e7f6      	b.n	80a4e6c <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a4e7e:	4628      	mov	r0, r5
 80a4e80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a4e82 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a4e82:	2200      	movs	r2, #0
 80a4e84:	7c00      	ldrb	r0, [r0, #16]
 80a4e86:	f7fe bbb5 	b.w	80a35f4 <HAL_I2C_Write_Data>

080a4e8a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a4e8a:	2100      	movs	r1, #0
 80a4e8c:	7c00      	ldrb	r0, [r0, #16]
 80a4e8e:	f7fe bbb9 	b.w	80a3604 <HAL_I2C_Available_Data>

080a4e92 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a4e92:	2100      	movs	r1, #0
 80a4e94:	7c00      	ldrb	r0, [r0, #16]
 80a4e96:	f7fe bbbd 	b.w	80a3614 <HAL_I2C_Read_Data>

080a4e9a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a4e9a:	2100      	movs	r1, #0
 80a4e9c:	7c00      	ldrb	r0, [r0, #16]
 80a4e9e:	f7fe bbc1 	b.w	80a3624 <HAL_I2C_Peek_Data>

080a4ea2 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a4ea2:	2100      	movs	r1, #0
 80a4ea4:	7c00      	ldrb	r0, [r0, #16]
 80a4ea6:	f7fe bbc5 	b.w	80a3634 <HAL_I2C_Flush_Data>

080a4eaa <_ZN7TwoWireD0Ev>:
 80a4eaa:	b510      	push	{r4, lr}
 80a4eac:	4604      	mov	r4, r0
 80a4eae:	2114      	movs	r1, #20
 80a4eb0:	f000 fa7a 	bl	80a53a8 <_ZdlPvj>
 80a4eb4:	4620      	mov	r0, r4
 80a4eb6:	bd10      	pop	{r4, pc}

080a4eb8 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
 80a4eb8:	b510      	push	{r4, lr}
 80a4eba:	4604      	mov	r4, r0
 80a4ebc:	2300      	movs	r3, #0
 80a4ebe:	6063      	str	r3, [r4, #4]
 80a4ec0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a4ec4:	60a3      	str	r3, [r4, #8]
 80a4ec6:	4b04      	ldr	r3, [pc, #16]	; (80a4ed8 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
 80a4ec8:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
 80a4eca:	4608      	mov	r0, r1
 80a4ecc:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
 80a4ece:	4611      	mov	r1, r2
 80a4ed0:	f7fe fbc0 	bl	80a3654 <HAL_I2C_Init>
}
 80a4ed4:	4620      	mov	r0, r4
 80a4ed6:	bd10      	pop	{r4, pc}
 80a4ed8:	080aa2a0 	.word	0x080aa2a0

080a4edc <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a4edc:	2100      	movs	r1, #0
 80a4ede:	7c00      	ldrb	r0, [r0, #16]
 80a4ee0:	f7fe bbb0 	b.w	80a3644 <HAL_I2C_Is_Enabled>

080a4ee4 <_ZN10WiFiSignalD1Ev>:
    int rssi = 2;
    int qual = 0;

    WiFiSignal() {}
    WiFiSignal(const wlan_connected_info_t& inf);
    virtual ~WiFiSignal() {};
 80a4ee4:	4770      	bx	lr

080a4ee6 <_ZNK10WiFiSignal19getAccessTechnologyEv>:
    return true;
}

hal_net_access_tech_t WiFiSignal::getAccessTechnology() const {
    return NET_ACCESS_TECHNOLOGY_WIFI;
}
 80a4ee6:	2001      	movs	r0, #1
 80a4ee8:	4770      	bx	lr
	...

080a4eec <_ZNK10WiFiSignal16getStrengthValueEv>:
        return inf_.strength / 65535.0f * 100.0f;
    }
    return -1.0f;
}

float WiFiSignal::getStrengthValue() const {
 80a4eec:	b508      	push	{r3, lr}
    if (inf_.size != 0 && inf_.rssi != std::numeric_limits<int32_t>::min()) {
 80a4eee:	8983      	ldrh	r3, [r0, #12]
 80a4ef0:	b11b      	cbz	r3, 80a4efa <_ZNK10WiFiSignal16getStrengthValueEv+0xe>
 80a4ef2:	6900      	ldr	r0, [r0, #16]
 80a4ef4:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 80a4ef8:	d101      	bne.n	80a4efe <_ZNK10WiFiSignal16getStrengthValueEv+0x12>
        return inf_.rssi / 100.0f;
    }
    return 0.0f;
 80a4efa:	2000      	movs	r0, #0
 80a4efc:	bd08      	pop	{r3, pc}
    return -1.0f;
}

float WiFiSignal::getStrengthValue() const {
    if (inf_.size != 0 && inf_.rssi != std::numeric_limits<int32_t>::min()) {
        return inf_.rssi / 100.0f;
 80a4efe:	f001 f969 	bl	80a61d4 <__aeabi_i2f>
 80a4f02:	4902      	ldr	r1, [pc, #8]	; (80a4f0c <_ZNK10WiFiSignal16getStrengthValueEv+0x20>)
 80a4f04:	f001 fa6e 	bl	80a63e4 <__aeabi_fdiv>
    }
    return 0.0f;
}
 80a4f08:	bd08      	pop	{r3, pc}
 80a4f0a:	bf00      	nop
 80a4f0c:	42c80000 	.word	0x42c80000

080a4f10 <_ZNK10WiFiSignal15getQualityValueEv>:
        return inf_.quality / 65535.0f * 100.0f;
    }
    return -1.0f;
}

float WiFiSignal::getQualityValue() const {
 80a4f10:	b508      	push	{r3, lr}
    if (inf_.size != 0 && inf_.snr != std::numeric_limits<int32_t>::min()) {
 80a4f12:	8983      	ldrh	r3, [r0, #12]
 80a4f14:	b11b      	cbz	r3, 80a4f1e <_ZNK10WiFiSignal15getQualityValueEv+0xe>
 80a4f16:	6980      	ldr	r0, [r0, #24]
 80a4f18:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 80a4f1c:	d101      	bne.n	80a4f22 <_ZNK10WiFiSignal15getQualityValueEv+0x12>
        return inf_.snr / 100.0f;
    }
    return 0.0f;
 80a4f1e:	2000      	movs	r0, #0
 80a4f20:	bd08      	pop	{r3, pc}
    return -1.0f;
}

float WiFiSignal::getQualityValue() const {
    if (inf_.size != 0 && inf_.snr != std::numeric_limits<int32_t>::min()) {
        return inf_.snr / 100.0f;
 80a4f22:	f001 f957 	bl	80a61d4 <__aeabi_i2f>
 80a4f26:	4902      	ldr	r1, [pc, #8]	; (80a4f30 <_ZNK10WiFiSignal15getQualityValueEv+0x20>)
 80a4f28:	f001 fa5c 	bl	80a63e4 <__aeabi_fdiv>
    }
    return 0.0f;
}
 80a4f2c:	bd08      	pop	{r3, pc}
 80a4f2e:	bf00      	nop
 80a4f30:	42c80000 	.word	0x42c80000

080a4f34 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a4f34:	2200      	movs	r2, #0
 80a4f36:	4611      	mov	r1, r2
 80a4f38:	6840      	ldr	r0, [r0, #4]
 80a4f3a:	f7fe bc81 	b.w	80a3840 <network_ready>

080a4f3e <_ZN10WiFiSignalD0Ev>:
    int rssi = 2;
    int qual = 0;

    WiFiSignal() {}
    WiFiSignal(const wlan_connected_info_t& inf);
    virtual ~WiFiSignal() {};
 80a4f3e:	b510      	push	{r4, lr}
 80a4f40:	4604      	mov	r4, r0
 80a4f42:	2124      	movs	r1, #36	; 0x24
 80a4f44:	f000 fa30 	bl	80a53a8 <_ZdlPvj>
 80a4f48:	4620      	mov	r0, r4
 80a4f4a:	bd10      	pop	{r4, pc}

080a4f4c <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a4f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a4f4e:	4616      	mov	r6, r2
 80a4f50:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a4f52:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a4f54:	460f      	mov	r7, r1
 80a4f56:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a4f58:	2100      	movs	r1, #0
 80a4f5a:	a803      	add	r0, sp, #12
 80a4f5c:	f001 fe83 	bl	80a6c66 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a4f60:	4630      	mov	r0, r6
 80a4f62:	f002 fbd7 	bl	80a7714 <strlen>
 80a4f66:	2500      	movs	r5, #0
 80a4f68:	9500      	str	r5, [sp, #0]
 80a4f6a:	b281      	uxth	r1, r0
 80a4f6c:	687b      	ldr	r3, [r7, #4]
 80a4f6e:	aa03      	add	r2, sp, #12
 80a4f70:	4630      	mov	r0, r6
 80a4f72:	f7fe fbf9 	bl	80a3768 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a4f76:	b120      	cbz	r0, 80a4f82 <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a4f78:	4629      	mov	r1, r5
 80a4f7a:	4620      	mov	r0, r4
 80a4f7c:	f7ff fde0 	bl	80a4b40 <_ZN9IPAddressC1Em>
 80a4f80:	e003      	b.n	80a4f8a <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a4f82:	a903      	add	r1, sp, #12
 80a4f84:	4620      	mov	r0, r4
 80a4f86:	f7ff fdc9 	bl	80a4b1c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a4f8a:	4620      	mov	r0, r4
 80a4f8c:	b009      	add	sp, #36	; 0x24
 80a4f8e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a4f90 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a4f90:	2200      	movs	r2, #0
 80a4f92:	4611      	mov	r1, r2
 80a4f94:	6840      	ldr	r0, [r0, #4]
 80a4f96:	f7fe bc73 	b.w	80a3880 <network_listening>

080a4f9a <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a4f9a:	2200      	movs	r2, #0
 80a4f9c:	4611      	mov	r1, r2
 80a4f9e:	6840      	ldr	r0, [r0, #4]
 80a4fa0:	f7fe bc7e 	b.w	80a38a0 <network_get_listen_timeout>

080a4fa4 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a4fa4:	2200      	movs	r2, #0
 80a4fa6:	6840      	ldr	r0, [r0, #4]
 80a4fa8:	f7fe bc72 	b.w	80a3890 <network_set_listen_timeout>

080a4fac <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a4fac:	2200      	movs	r2, #0
 80a4fae:	f081 0101 	eor.w	r1, r1, #1
 80a4fb2:	6840      	ldr	r0, [r0, #4]
 80a4fb4:	f7fe bc5c 	b.w	80a3870 <network_listen>

080a4fb8 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a4fb8:	2300      	movs	r3, #0
 80a4fba:	461a      	mov	r2, r3
 80a4fbc:	4619      	mov	r1, r3
 80a4fbe:	6840      	ldr	r0, [r0, #4]
 80a4fc0:	f7fe bc4e 	b.w	80a3860 <network_off>

080a4fc4 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a4fc4:	2200      	movs	r2, #0
 80a4fc6:	4611      	mov	r1, r2
 80a4fc8:	6840      	ldr	r0, [r0, #4]
 80a4fca:	f7fe bc29 	b.w	80a3820 <network_connecting>

080a4fce <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a4fce:	2200      	movs	r2, #0
 80a4fd0:	2102      	movs	r1, #2
 80a4fd2:	6840      	ldr	r0, [r0, #4]
 80a4fd4:	f7fe bc2c 	b.w	80a3830 <network_disconnect>

080a4fd8 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a4fd8:	2300      	movs	r3, #0
 80a4fda:	461a      	mov	r2, r3
 80a4fdc:	6840      	ldr	r0, [r0, #4]
 80a4fde:	f7fe bc17 	b.w	80a3810 <network_connect>
	...

080a4fe4 <_ZNK10WiFiSignal10getQualityEv>:
        return inf_.rssi / 100.0f;
    }
    return 0.0f;
}

float WiFiSignal::getQuality() const {
 80a4fe4:	b508      	push	{r3, lr}
    if (inf_.size != 0 && inf_.quality >= 0) {
 80a4fe6:	8983      	ldrh	r3, [r0, #12]
 80a4fe8:	b15b      	cbz	r3, 80a5002 <_ZNK10WiFiSignal10getQualityEv+0x1e>
 80a4fea:	6a00      	ldr	r0, [r0, #32]
 80a4fec:	2800      	cmp	r0, #0
 80a4fee:	db08      	blt.n	80a5002 <_ZNK10WiFiSignal10getQualityEv+0x1e>
        return inf_.quality / 65535.0f * 100.0f;
 80a4ff0:	f001 f8f0 	bl	80a61d4 <__aeabi_i2f>
 80a4ff4:	4904      	ldr	r1, [pc, #16]	; (80a5008 <_ZNK10WiFiSignal10getQualityEv+0x24>)
 80a4ff6:	f001 f9f5 	bl	80a63e4 <__aeabi_fdiv>
 80a4ffa:	4904      	ldr	r1, [pc, #16]	; (80a500c <_ZNK10WiFiSignal10getQualityEv+0x28>)
 80a4ffc:	f001 f93e 	bl	80a627c <__aeabi_fmul>
 80a5000:	bd08      	pop	{r3, pc}
    }
    return -1.0f;
 80a5002:	4803      	ldr	r0, [pc, #12]	; (80a5010 <_ZNK10WiFiSignal10getQualityEv+0x2c>)
}
 80a5004:	bd08      	pop	{r3, pc}
 80a5006:	bf00      	nop
 80a5008:	477fff00 	.word	0x477fff00
 80a500c:	42c80000 	.word	0x42c80000
 80a5010:	bf800000 	.word	0xbf800000

080a5014 <_ZNK10WiFiSignal11getStrengthEv>:

hal_net_access_tech_t WiFiSignal::getAccessTechnology() const {
    return NET_ACCESS_TECHNOLOGY_WIFI;
}

float WiFiSignal::getStrength() const {
 80a5014:	b508      	push	{r3, lr}
    if (inf_.size != 0 && inf_.strength >= 0) {
 80a5016:	8983      	ldrh	r3, [r0, #12]
 80a5018:	b15b      	cbz	r3, 80a5032 <_ZNK10WiFiSignal11getStrengthEv+0x1e>
 80a501a:	6940      	ldr	r0, [r0, #20]
 80a501c:	2800      	cmp	r0, #0
 80a501e:	db08      	blt.n	80a5032 <_ZNK10WiFiSignal11getStrengthEv+0x1e>
        return inf_.strength / 65535.0f * 100.0f;
 80a5020:	f001 f8d8 	bl	80a61d4 <__aeabi_i2f>
 80a5024:	4904      	ldr	r1, [pc, #16]	; (80a5038 <_ZNK10WiFiSignal11getStrengthEv+0x24>)
 80a5026:	f001 f9dd 	bl	80a63e4 <__aeabi_fdiv>
 80a502a:	4904      	ldr	r1, [pc, #16]	; (80a503c <_ZNK10WiFiSignal11getStrengthEv+0x28>)
 80a502c:	f001 f926 	bl	80a627c <__aeabi_fmul>
 80a5030:	bd08      	pop	{r3, pc}
    }
    return -1.0f;
 80a5032:	4803      	ldr	r0, [pc, #12]	; (80a5040 <_ZNK10WiFiSignal11getStrengthEv+0x2c>)
}
 80a5034:	bd08      	pop	{r3, pc}
 80a5036:	bf00      	nop
 80a5038:	477fff00 	.word	0x477fff00
 80a503c:	42c80000 	.word	0x42c80000
 80a5040:	bf800000 	.word	0xbf800000

080a5044 <_ZNK10WiFiSignalcvaEv>:
    : inf_(inf) {
}

WiFiSignal::operator int8_t() const {
    return this->rssi;
}
 80a5044:	f990 0004 	ldrsb.w	r0, [r0, #4]
 80a5048:	4770      	bx	lr

080a504a <_ZN10WiFiSignal17fromConnectedInfoERK21wlan_connected_info_t>:

bool WiFiSignal::fromConnectedInfo(const wlan_connected_info_t& inf) {
 80a504a:	b570      	push	{r4, r5, r6, lr}
    inf_ = inf;
 80a504c:	460d      	mov	r5, r1

WiFiSignal::operator int8_t() const {
    return this->rssi;
}

bool WiFiSignal::fromConnectedInfo(const wlan_connected_info_t& inf) {
 80a504e:	4606      	mov	r6, r0
    inf_ = inf;
 80a5050:	f100 040c 	add.w	r4, r0, #12
 80a5054:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a5056:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a5058:	e895 0003 	ldmia.w	r5, {r0, r1}
 80a505c:	e884 0003 	stmia.w	r4, {r0, r1}
    this->rssi = inf_.rssi != std::numeric_limits<int32_t>::min() ? inf_.rssi / 100 : 2;
 80a5060:	6933      	ldr	r3, [r6, #16]
    this->qual = inf_.snr != std::numeric_limits<int32_t>::min() ? inf_.snr / 100 : 0;
    return true;
}
 80a5062:	2001      	movs	r0, #1
    return this->rssi;
}

bool WiFiSignal::fromConnectedInfo(const wlan_connected_info_t& inf) {
    inf_ = inf;
    this->rssi = inf_.rssi != std::numeric_limits<int32_t>::min() ? inf_.rssi / 100 : 2;
 80a5064:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a5068:	bf1a      	itte	ne
 80a506a:	2264      	movne	r2, #100	; 0x64
 80a506c:	fb93 f3f2 	sdivne	r3, r3, r2
 80a5070:	2302      	moveq	r3, #2
 80a5072:	6073      	str	r3, [r6, #4]
    this->qual = inf_.snr != std::numeric_limits<int32_t>::min() ? inf_.snr / 100 : 0;
 80a5074:	69b3      	ldr	r3, [r6, #24]
 80a5076:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a507a:	bf1a      	itte	ne
 80a507c:	2264      	movne	r2, #100	; 0x64
 80a507e:	fb93 f3f2 	sdivne	r3, r3, r2
 80a5082:	2300      	moveq	r3, #0
 80a5084:	60b3      	str	r3, [r6, #8]
    return true;
}
 80a5086:	bd70      	pop	{r4, r5, r6, pc}

080a5088 <_ZN5spark9WiFiClass4RSSIEv>:
    int WiFiClass::getCredentials(WiFiAccessPoint* results, size_t result_count) {
        APList apList(results, result_count);
        return apList.start();
    }

    WiFiSignal WiFiClass::RSSI() {
 80a5088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a508c:	4688      	mov	r8, r1
public:
    // In order to be compatible with CellularSignal
    int rssi = 2;
    int qual = 0;

    WiFiSignal() {}
 80a508e:	4b16      	ldr	r3, [pc, #88]	; (80a50e8 <_ZN5spark9WiFiClass4RSSIEv+0x60>)
 80a5090:	2500      	movs	r5, #0
 80a5092:	2702      	movs	r7, #2
 80a5094:	2618      	movs	r6, #24
 80a5096:	b086      	sub	sp, #24
 80a5098:	6003      	str	r3, [r0, #0]
 80a509a:	6047      	str	r7, [r0, #4]
 80a509c:	6085      	str	r5, [r0, #8]
 80a509e:	4632      	mov	r2, r6
 80a50a0:	4629      	mov	r1, r5
 80a50a2:	4604      	mov	r4, r0
 80a50a4:	300c      	adds	r0, #12
 80a50a6:	f001 fdde 	bl	80a6c66 <memset>
        WiFiSignal sig;
        if (!network_ready(*this, 0, NULL)) {
 80a50aa:	462a      	mov	r2, r5
 80a50ac:	4629      	mov	r1, r5
 80a50ae:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80a50b2:	f7fe fbc5 	bl	80a3840 <network_ready>
 80a50b6:	b190      	cbz	r0, 80a50de <_ZN5spark9WiFiClass4RSSIEv+0x56>
            return sig;
        }

        wlan_connected_info_t info = {0};
 80a50b8:	4632      	mov	r2, r6
 80a50ba:	4629      	mov	r1, r5
 80a50bc:	4668      	mov	r0, sp
 80a50be:	f001 fdd2 	bl	80a6c66 <memset>
        info.size = sizeof(info);
        int r = wlan_connected_info(nullptr, &info, nullptr);
 80a50c2:	462a      	mov	r2, r5
 80a50c4:	4669      	mov	r1, sp
 80a50c6:	4628      	mov	r0, r5
        if (!network_ready(*this, 0, NULL)) {
            return sig;
        }

        wlan_connected_info_t info = {0};
        info.size = sizeof(info);
 80a50c8:	f8ad 6000 	strh.w	r6, [sp]
        int r = wlan_connected_info(nullptr, &info, nullptr);
 80a50cc:	f7fe fb5c 	bl	80a3788 <wlan_connected_info>
        if (r == 0) {
 80a50d0:	b920      	cbnz	r0, 80a50dc <_ZN5spark9WiFiClass4RSSIEv+0x54>
            sig.fromConnectedInfo(info);
 80a50d2:	4669      	mov	r1, sp
 80a50d4:	4620      	mov	r0, r4
 80a50d6:	f7ff ffb8 	bl	80a504a <_ZN10WiFiSignal17fromConnectedInfoERK21wlan_connected_info_t>
            return sig;
 80a50da:	e000      	b.n	80a50de <_ZN5spark9WiFiClass4RSSIEv+0x56>
        }

        sig.rssi = 2;
 80a50dc:	6067      	str	r7, [r4, #4]
        return sig;
    }
 80a50de:	4620      	mov	r0, r4
 80a50e0:	b006      	add	sp, #24
 80a50e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a50e6:	bf00      	nop
 80a50e8:	080aa2fc 	.word	0x080aa2fc

080a50ec <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a50ec:	4b02      	ldr	r3, [pc, #8]	; (80a50f8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a50ee:	2204      	movs	r2, #4
 80a50f0:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a50f2:	4a02      	ldr	r2, [pc, #8]	; (80a50fc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a50f4:	601a      	str	r2, [r3, #0]
 80a50f6:	4770      	bx	lr
 80a50f8:	200004d4 	.word	0x200004d4
 80a50fc:	080aa2c8 	.word	0x080aa2c8

080a5100 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a5100:	2300      	movs	r3, #0
 80a5102:	461a      	mov	r2, r3
 80a5104:	6840      	ldr	r0, [r0, #4]
 80a5106:	f7fe bb83 	b.w	80a3810 <network_connect>

080a510a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a510a:	2200      	movs	r2, #0
 80a510c:	2102      	movs	r1, #2
 80a510e:	6840      	ldr	r0, [r0, #4]
 80a5110:	f7fe bb8e 	b.w	80a3830 <network_disconnect>

080a5114 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a5114:	2200      	movs	r2, #0
 80a5116:	4611      	mov	r1, r2
 80a5118:	6840      	ldr	r0, [r0, #4]
 80a511a:	f7fe bb81 	b.w	80a3820 <network_connecting>

080a511e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a511e:	2200      	movs	r2, #0
 80a5120:	4611      	mov	r1, r2
 80a5122:	6840      	ldr	r0, [r0, #4]
 80a5124:	f7fe bb8c 	b.w	80a3840 <network_ready>

080a5128 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a5128:	2300      	movs	r3, #0
 80a512a:	461a      	mov	r2, r3
 80a512c:	4619      	mov	r1, r3
 80a512e:	6840      	ldr	r0, [r0, #4]
 80a5130:	f7fe bb8e 	b.w	80a3850 <network_on>

080a5134 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a5134:	2300      	movs	r3, #0
 80a5136:	461a      	mov	r2, r3
 80a5138:	4619      	mov	r1, r3
 80a513a:	6840      	ldr	r0, [r0, #4]
 80a513c:	f7fe bb90 	b.w	80a3860 <network_off>

080a5140 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a5140:	2200      	movs	r2, #0
 80a5142:	f081 0101 	eor.w	r1, r1, #1
 80a5146:	6840      	ldr	r0, [r0, #4]
 80a5148:	f7fe bb92 	b.w	80a3870 <network_listen>

080a514c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a514c:	2200      	movs	r2, #0
 80a514e:	6840      	ldr	r0, [r0, #4]
 80a5150:	f7fe bb9e 	b.w	80a3890 <network_set_listen_timeout>

080a5154 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a5154:	2200      	movs	r2, #0
 80a5156:	4611      	mov	r1, r2
 80a5158:	6840      	ldr	r0, [r0, #4]
 80a515a:	f7fe bba1 	b.w	80a38a0 <network_get_listen_timeout>

080a515e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a515e:	2200      	movs	r2, #0
 80a5160:	4611      	mov	r1, r2
 80a5162:	6840      	ldr	r0, [r0, #4]
 80a5164:	f7fe bb8c 	b.w	80a3880 <network_listening>

080a5168 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a5168:	b570      	push	{r4, r5, r6, lr}
 80a516a:	4616      	mov	r6, r2
 80a516c:	b08e      	sub	sp, #56	; 0x38
 80a516e:	4604      	mov	r4, r0
    IPAddress addr;
 80a5170:	a808      	add	r0, sp, #32
 80a5172:	f7ff fcc5 	bl	80a4b00 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a5176:	2211      	movs	r2, #17
 80a5178:	2100      	movs	r1, #0
 80a517a:	a803      	add	r0, sp, #12
 80a517c:	f001 fd73 	bl	80a6c66 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a5180:	4630      	mov	r0, r6
 80a5182:	f002 fac7 	bl	80a7714 <strlen>
 80a5186:	2500      	movs	r5, #0
 80a5188:	4b0a      	ldr	r3, [pc, #40]	; (80a51b4 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a518a:	9500      	str	r5, [sp, #0]
 80a518c:	b281      	uxth	r1, r0
 80a518e:	685b      	ldr	r3, [r3, #4]
 80a5190:	aa03      	add	r2, sp, #12
 80a5192:	4630      	mov	r0, r6
 80a5194:	f7fe fae8 	bl	80a3768 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a5198:	b120      	cbz	r0, 80a51a4 <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a519a:	4629      	mov	r1, r5
 80a519c:	4620      	mov	r0, r4
 80a519e:	f7ff fccf 	bl	80a4b40 <_ZN9IPAddressC1Em>
 80a51a2:	e003      	b.n	80a51ac <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a51a4:	a903      	add	r1, sp, #12
 80a51a6:	4620      	mov	r0, r4
 80a51a8:	f7ff fcb8 	bl	80a4b1c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a51ac:	4620      	mov	r0, r4
 80a51ae:	b00e      	add	sp, #56	; 0x38
 80a51b0:	bd70      	pop	{r4, r5, r6, pc}
 80a51b2:	bf00      	nop
 80a51b4:	200004d4 	.word	0x200004d4

080a51b8 <_ZN5spark12NetworkClass4fromEm>:
        return Cellular;
#endif
    default:
        return Network;
    }
}
 80a51b8:	4b03      	ldr	r3, [pc, #12]	; (80a51c8 <_ZN5spark12NetworkClass4fromEm+0x10>)
 80a51ba:	4a04      	ldr	r2, [pc, #16]	; (80a51cc <_ZN5spark12NetworkClass4fromEm+0x14>)
 80a51bc:	2804      	cmp	r0, #4
 80a51be:	bf0c      	ite	eq
 80a51c0:	4610      	moveq	r0, r2
 80a51c2:	4618      	movne	r0, r3
 80a51c4:	4770      	bx	lr
 80a51c6:	bf00      	nop
 80a51c8:	200004dc 	.word	0x200004dc
 80a51cc:	200004d4 	.word	0x200004d4

080a51d0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80a51d0:	4b02      	ldr	r3, [pc, #8]	; (80a51dc <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a51d2:	4a03      	ldr	r2, [pc, #12]	; (80a51e0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a51d4:	601a      	str	r2, [r3, #0]
 80a51d6:	2200      	movs	r2, #0
 80a51d8:	605a      	str	r2, [r3, #4]
 80a51da:	4770      	bx	lr
 80a51dc:	200004dc 	.word	0x200004dc
 80a51e0:	080aa320 	.word	0x080aa320

080a51e4 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a51e4:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a51e6:	4e1a      	ldr	r6, [pc, #104]	; (80a5250 <pinAvailable+0x6c>)
 80a51e8:	4604      	mov	r4, r0
 80a51ea:	6831      	ldr	r1, [r6, #0]
 80a51ec:	f011 0501 	ands.w	r5, r1, #1
 80a51f0:	d10f      	bne.n	80a5212 <pinAvailable+0x2e>
 80a51f2:	4630      	mov	r0, r6
 80a51f4:	f7fa ff5b 	bl	80a00ae <__cxa_guard_acquire>
 80a51f8:	b158      	cbz	r0, 80a5212 <pinAvailable+0x2e>
 80a51fa:	4629      	mov	r1, r5
 80a51fc:	4815      	ldr	r0, [pc, #84]	; (80a5254 <pinAvailable+0x70>)
 80a51fe:	f7fe fbe5 	bl	80a39cc <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a5202:	4630      	mov	r0, r6
 80a5204:	f7fa ff58 	bl	80a00b8 <__cxa_guard_release>
 80a5208:	4a13      	ldr	r2, [pc, #76]	; (80a5258 <pinAvailable+0x74>)
 80a520a:	4914      	ldr	r1, [pc, #80]	; (80a525c <pinAvailable+0x78>)
 80a520c:	4811      	ldr	r0, [pc, #68]	; (80a5254 <pinAvailable+0x70>)
 80a520e:	f000 f8bd 	bl	80a538c <__aeabi_atexit>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
 80a5212:	4810      	ldr	r0, [pc, #64]	; (80a5254 <pinAvailable+0x70>)
 80a5214:	f7fe fbff 	bl	80a3a16 <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a5218:	b128      	cbz	r0, 80a5226 <pinAvailable+0x42>
 80a521a:	f1a4 030d 	sub.w	r3, r4, #13
 80a521e:	2b02      	cmp	r3, #2
 80a5220:	d801      	bhi.n	80a5226 <pinAvailable+0x42>
  {
    return 0; // 'pin' is used
 80a5222:	2000      	movs	r0, #0
 80a5224:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a5226:	f000 f88b 	bl	80a5340 <_Z19__fetch_global_Wirev>
 80a522a:	f7ff fe57 	bl	80a4edc <_ZN7TwoWire9isEnabledEv>
 80a522e:	b108      	cbz	r0, 80a5234 <pinAvailable+0x50>
 80a5230:	2c01      	cmp	r4, #1
 80a5232:	d9f6      	bls.n	80a5222 <pinAvailable+0x3e>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a5234:	f7ff fdd4 	bl	80a4de0 <_Z22__fetch_global_Serial1v>
 80a5238:	f7ff fdcf 	bl	80a4dda <_ZN11USARTSerial9isEnabledEv>
 80a523c:	b118      	cbz	r0, 80a5246 <pinAvailable+0x62>
 80a523e:	f1a4 0312 	sub.w	r3, r4, #18
 80a5242:	2b01      	cmp	r3, #1
 80a5244:	d9ed      	bls.n	80a5222 <pinAvailable+0x3e>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a5246:	2c17      	cmp	r4, #23
 80a5248:	bf8c      	ite	hi
 80a524a:	2000      	movhi	r0, #0
 80a524c:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a524e:	bd70      	pop	{r4, r5, r6, pc}
 80a5250:	20000104 	.word	0x20000104
 80a5254:	20000108 	.word	0x20000108
 80a5258:	20000100 	.word	0x20000100
 80a525c:	080a02c7 	.word	0x080a02c7

080a5260 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a5260:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a5262:	b538      	push	{r3, r4, r5, lr}
 80a5264:	4604      	mov	r4, r0
 80a5266:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a5268:	d80a      	bhi.n	80a5280 <pinMode+0x20>
 80a526a:	29ff      	cmp	r1, #255	; 0xff
 80a526c:	d008      	beq.n	80a5280 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a526e:	f7ff ffb9 	bl	80a51e4 <pinAvailable>
 80a5272:	b128      	cbz	r0, 80a5280 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a5274:	4629      	mov	r1, r5
 80a5276:	4620      	mov	r0, r4
}
 80a5278:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a527c:	f7fe b8ea 	b.w	80a3454 <HAL_Pin_Mode>
 80a5280:	bd38      	pop	{r3, r4, r5, pc}

080a5282 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a5282:	b538      	push	{r3, r4, r5, lr}
 80a5284:	4604      	mov	r4, r0
 80a5286:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a5288:	f7fe f8ec 	bl	80a3464 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a528c:	28ff      	cmp	r0, #255	; 0xff
 80a528e:	d010      	beq.n	80a52b2 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80a5290:	2806      	cmp	r0, #6
 80a5292:	d804      	bhi.n	80a529e <digitalWrite+0x1c>
 80a5294:	234d      	movs	r3, #77	; 0x4d
 80a5296:	fa23 f000 	lsr.w	r0, r3, r0
 80a529a:	07c3      	lsls	r3, r0, #31
 80a529c:	d409      	bmi.n	80a52b2 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a529e:	4620      	mov	r0, r4
 80a52a0:	f7ff ffa0 	bl	80a51e4 <pinAvailable>
 80a52a4:	b128      	cbz	r0, 80a52b2 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a52a6:	4629      	mov	r1, r5
 80a52a8:	4620      	mov	r0, r4
}
 80a52aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a52ae:	f7fe b8e1 	b.w	80a3474 <HAL_GPIO_Write>
 80a52b2:	bd38      	pop	{r3, r4, r5, pc}

080a52b4 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 80a52b4:	b510      	push	{r4, lr}
 80a52b6:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a52b8:	f7fe f8d4 	bl	80a3464 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
 80a52bc:	3804      	subs	r0, #4
 80a52be:	b2c0      	uxtb	r0, r0
 80a52c0:	2801      	cmp	r0, #1
 80a52c2:	d908      	bls.n	80a52d6 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 80a52c4:	4620      	mov	r0, r4
 80a52c6:	f7ff ff8d 	bl	80a51e4 <pinAvailable>
 80a52ca:	b120      	cbz	r0, 80a52d6 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a52cc:	4620      	mov	r0, r4
}
 80a52ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a52d2:	f7fe b8d7 	b.w	80a3484 <HAL_GPIO_Read>
}
 80a52d6:	2000      	movs	r0, #0
 80a52d8:	bd10      	pop	{r4, pc}
	...

080a52dc <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a52dc:	b513      	push	{r0, r1, r4, lr}
 80a52de:	4c08      	ldr	r4, [pc, #32]	; (80a5300 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a52e0:	2300      	movs	r3, #0
 80a52e2:	461a      	mov	r2, r3
 80a52e4:	4619      	mov	r1, r3
 80a52e6:	9300      	str	r3, [sp, #0]
 80a52e8:	4620      	mov	r0, r4
 80a52ea:	f7ff fc3f 	bl	80a4b6c <_ZN9IPAddressC1Ehhhh>
 80a52ee:	4620      	mov	r0, r4
 80a52f0:	4a04      	ldr	r2, [pc, #16]	; (80a5304 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a52f2:	4905      	ldr	r1, [pc, #20]	; (80a5308 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a52f4:	b002      	add	sp, #8
 80a52f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a52fa:	f000 b847 	b.w	80a538c <__aeabi_atexit>
 80a52fe:	bf00      	nop
 80a5300:	200004e8 	.word	0x200004e8
 80a5304:	20000100 	.word	0x20000100
 80a5308:	080a4abf 	.word	0x080a4abf

080a530c <_Z17acquireWireBufferv>:
}

} // anonymous

HAL_I2C_Config __attribute__((weak)) acquireWireBuffer()
{
 80a530c:	b570      	push	{r4, r5, r6, lr}
 80a530e:	4604      	mov	r4, r0
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a5310:	2514      	movs	r5, #20
 80a5312:	462a      	mov	r2, r5

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a5314:	4e09      	ldr	r6, [pc, #36]	; (80a533c <_Z17acquireWireBufferv+0x30>)
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a5316:	2100      	movs	r1, #0
 80a5318:	f001 fca5 	bl	80a6c66 <memset>
 80a531c:	8025      	strh	r5, [r4, #0]
 80a531e:	2520      	movs	r5, #32

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a5320:	4631      	mov	r1, r6
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a5322:	60a5      	str	r5, [r4, #8]
 80a5324:	6125      	str	r5, [r4, #16]

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a5326:	4628      	mov	r0, r5
 80a5328:	f000 f840 	bl	80a53ac <_ZnajRKSt9nothrow_t>
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a532c:	4631      	mov	r1, r6
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a532e:	6060      	str	r0, [r4, #4]
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a5330:	4628      	mov	r0, r5
 80a5332:	f000 f83b 	bl	80a53ac <_ZnajRKSt9nothrow_t>
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a5336:	60e0      	str	r0, [r4, #12]
} // anonymous

HAL_I2C_Config __attribute__((weak)) acquireWireBuffer()
{
	return defaultWireConfig();
}
 80a5338:	4620      	mov	r0, r4
 80a533a:	bd70      	pop	{r4, r5, r6, pc}
 80a533c:	080aa34c 	.word	0x080aa34c

080a5340 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 80a5340:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a5342:	4d0e      	ldr	r5, [pc, #56]	; (80a537c <_Z19__fetch_global_Wirev+0x3c>)
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 80a5344:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a5346:	6829      	ldr	r1, [r5, #0]
 80a5348:	f011 0401 	ands.w	r4, r1, #1
 80a534c:	d113      	bne.n	80a5376 <_Z19__fetch_global_Wirev+0x36>
 80a534e:	4628      	mov	r0, r5
 80a5350:	f7fa fead 	bl	80a00ae <__cxa_guard_acquire>
 80a5354:	b178      	cbz	r0, 80a5376 <_Z19__fetch_global_Wirev+0x36>
 80a5356:	a801      	add	r0, sp, #4
 80a5358:	f7ff ffd8 	bl	80a530c <_Z17acquireWireBufferv>
 80a535c:	aa01      	add	r2, sp, #4
 80a535e:	4621      	mov	r1, r4
 80a5360:	4807      	ldr	r0, [pc, #28]	; (80a5380 <_Z19__fetch_global_Wirev+0x40>)
 80a5362:	f7ff fda9 	bl	80a4eb8 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
 80a5366:	4628      	mov	r0, r5
 80a5368:	f7fa fea6 	bl	80a00b8 <__cxa_guard_release>
 80a536c:	4a05      	ldr	r2, [pc, #20]	; (80a5384 <_Z19__fetch_global_Wirev+0x44>)
 80a536e:	4906      	ldr	r1, [pc, #24]	; (80a5388 <_Z19__fetch_global_Wirev+0x48>)
 80a5370:	4803      	ldr	r0, [pc, #12]	; (80a5380 <_Z19__fetch_global_Wirev+0x40>)
 80a5372:	f000 f80b 	bl	80a538c <__aeabi_atexit>
	return wire;
}
 80a5376:	4802      	ldr	r0, [pc, #8]	; (80a5380 <_Z19__fetch_global_Wirev+0x40>)
 80a5378:	b007      	add	sp, #28
 80a537a:	bd30      	pop	{r4, r5, pc}
 80a537c:	20000500 	.word	0x20000500
 80a5380:	20000504 	.word	0x20000504
 80a5384:	20000100 	.word	0x20000100
 80a5388:	080a4e61 	.word	0x080a4e61

080a538c <__aeabi_atexit>:
 80a538c:	460b      	mov	r3, r1
 80a538e:	4601      	mov	r1, r0
 80a5390:	4618      	mov	r0, r3
 80a5392:	f001 bb53 	b.w	80a6a3c <__cxa_atexit>
	...

080a5398 <_ZSt15get_new_handlerv>:
 80a5398:	4b02      	ldr	r3, [pc, #8]	; (80a53a4 <_ZSt15get_new_handlerv+0xc>)
 80a539a:	6818      	ldr	r0, [r3, #0]
 80a539c:	f3bf 8f5f 	dmb	sy
 80a53a0:	4770      	bx	lr
 80a53a2:	bf00      	nop
 80a53a4:	20000518 	.word	0x20000518

080a53a8 <_ZdlPvj>:
 80a53a8:	f7fa be7d 	b.w	80a00a6 <_ZdlPv>

080a53ac <_ZnajRKSt9nothrow_t>:
 80a53ac:	f000 b800 	b.w	80a53b0 <_ZnwjRKSt9nothrow_t>

080a53b0 <_ZnwjRKSt9nothrow_t>:
 80a53b0:	b510      	push	{r4, lr}
 80a53b2:	2800      	cmp	r0, #0
 80a53b4:	bf14      	ite	ne
 80a53b6:	4604      	movne	r4, r0
 80a53b8:	2401      	moveq	r4, #1
 80a53ba:	4620      	mov	r0, r4
 80a53bc:	f7fe fab0 	bl	80a3920 <malloc>
 80a53c0:	b920      	cbnz	r0, 80a53cc <_ZnwjRKSt9nothrow_t+0x1c>
 80a53c2:	f7ff ffe9 	bl	80a5398 <_ZSt15get_new_handlerv>
 80a53c6:	b108      	cbz	r0, 80a53cc <_ZnwjRKSt9nothrow_t+0x1c>
 80a53c8:	4780      	blx	r0
 80a53ca:	e7f6      	b.n	80a53ba <_ZnwjRKSt9nothrow_t+0xa>
 80a53cc:	bd10      	pop	{r4, pc}
	...

080a53d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a53d0:	4b18      	ldr	r3, [pc, #96]	; (80a5434 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a53d2:	681a      	ldr	r2, [r3, #0]
 80a53d4:	07d1      	lsls	r1, r2, #31
 80a53d6:	bf5c      	itt	pl
 80a53d8:	2201      	movpl	r2, #1
 80a53da:	601a      	strpl	r2, [r3, #0]
 80a53dc:	4b16      	ldr	r3, [pc, #88]	; (80a5438 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a53de:	681a      	ldr	r2, [r3, #0]
 80a53e0:	07d2      	lsls	r2, r2, #31
 80a53e2:	bf5c      	itt	pl
 80a53e4:	2201      	movpl	r2, #1
 80a53e6:	601a      	strpl	r2, [r3, #0]
 80a53e8:	4b14      	ldr	r3, [pc, #80]	; (80a543c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a53ea:	681a      	ldr	r2, [r3, #0]
 80a53ec:	07d0      	lsls	r0, r2, #31
 80a53ee:	bf5c      	itt	pl
 80a53f0:	2201      	movpl	r2, #1
 80a53f2:	601a      	strpl	r2, [r3, #0]
 80a53f4:	4b12      	ldr	r3, [pc, #72]	; (80a5440 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a53f6:	681a      	ldr	r2, [r3, #0]
 80a53f8:	07d1      	lsls	r1, r2, #31
 80a53fa:	bf5c      	itt	pl
 80a53fc:	2201      	movpl	r2, #1
 80a53fe:	601a      	strpl	r2, [r3, #0]
 80a5400:	4b10      	ldr	r3, [pc, #64]	; (80a5444 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a5402:	681a      	ldr	r2, [r3, #0]
 80a5404:	07d2      	lsls	r2, r2, #31
 80a5406:	bf5c      	itt	pl
 80a5408:	2201      	movpl	r2, #1
 80a540a:	601a      	strpl	r2, [r3, #0]
 80a540c:	4b0e      	ldr	r3, [pc, #56]	; (80a5448 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a540e:	681a      	ldr	r2, [r3, #0]
 80a5410:	07d0      	lsls	r0, r2, #31
 80a5412:	bf5c      	itt	pl
 80a5414:	2201      	movpl	r2, #1
 80a5416:	601a      	strpl	r2, [r3, #0]
 80a5418:	4b0c      	ldr	r3, [pc, #48]	; (80a544c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a541a:	681a      	ldr	r2, [r3, #0]
 80a541c:	07d1      	lsls	r1, r2, #31
 80a541e:	bf5c      	itt	pl
 80a5420:	2201      	movpl	r2, #1
 80a5422:	601a      	strpl	r2, [r3, #0]
 80a5424:	4b0a      	ldr	r3, [pc, #40]	; (80a5450 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a5426:	681a      	ldr	r2, [r3, #0]
 80a5428:	07d2      	lsls	r2, r2, #31
 80a542a:	bf5c      	itt	pl
 80a542c:	2201      	movpl	r2, #1
 80a542e:	601a      	strpl	r2, [r3, #0]
 80a5430:	4770      	bx	lr
 80a5432:	bf00      	nop
 80a5434:	20000538 	.word	0x20000538
 80a5438:	20000534 	.word	0x20000534
 80a543c:	20000530 	.word	0x20000530
 80a5440:	2000052c 	.word	0x2000052c
 80a5444:	20000528 	.word	0x20000528
 80a5448:	20000524 	.word	0x20000524
 80a544c:	20000520 	.word	0x20000520
 80a5450:	2000051c 	.word	0x2000051c

080a5454 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a5454:	4b24      	ldr	r3, [pc, #144]	; (80a54e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a5456:	681a      	ldr	r2, [r3, #0]
 80a5458:	07d0      	lsls	r0, r2, #31
 80a545a:	bf5c      	itt	pl
 80a545c:	2201      	movpl	r2, #1
 80a545e:	601a      	strpl	r2, [r3, #0]
 80a5460:	4b22      	ldr	r3, [pc, #136]	; (80a54ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a5462:	681a      	ldr	r2, [r3, #0]
 80a5464:	07d1      	lsls	r1, r2, #31
 80a5466:	bf5c      	itt	pl
 80a5468:	2201      	movpl	r2, #1
 80a546a:	601a      	strpl	r2, [r3, #0]
 80a546c:	4b20      	ldr	r3, [pc, #128]	; (80a54f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a546e:	681a      	ldr	r2, [r3, #0]
 80a5470:	07d2      	lsls	r2, r2, #31
 80a5472:	bf5c      	itt	pl
 80a5474:	2201      	movpl	r2, #1
 80a5476:	601a      	strpl	r2, [r3, #0]
 80a5478:	4b1e      	ldr	r3, [pc, #120]	; (80a54f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a547a:	681a      	ldr	r2, [r3, #0]
 80a547c:	07d0      	lsls	r0, r2, #31
 80a547e:	bf5c      	itt	pl
 80a5480:	2201      	movpl	r2, #1
 80a5482:	601a      	strpl	r2, [r3, #0]
 80a5484:	4b1c      	ldr	r3, [pc, #112]	; (80a54f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a5486:	681a      	ldr	r2, [r3, #0]
 80a5488:	07d1      	lsls	r1, r2, #31
 80a548a:	bf5c      	itt	pl
 80a548c:	2201      	movpl	r2, #1
 80a548e:	601a      	strpl	r2, [r3, #0]
 80a5490:	4b1a      	ldr	r3, [pc, #104]	; (80a54fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a5492:	681a      	ldr	r2, [r3, #0]
 80a5494:	07d2      	lsls	r2, r2, #31
 80a5496:	bf5c      	itt	pl
 80a5498:	2201      	movpl	r2, #1
 80a549a:	601a      	strpl	r2, [r3, #0]
 80a549c:	4b18      	ldr	r3, [pc, #96]	; (80a5500 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a549e:	681a      	ldr	r2, [r3, #0]
 80a54a0:	07d0      	lsls	r0, r2, #31
 80a54a2:	bf5c      	itt	pl
 80a54a4:	2201      	movpl	r2, #1
 80a54a6:	601a      	strpl	r2, [r3, #0]
 80a54a8:	4b16      	ldr	r3, [pc, #88]	; (80a5504 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a54aa:	681a      	ldr	r2, [r3, #0]
 80a54ac:	07d1      	lsls	r1, r2, #31
 80a54ae:	bf5c      	itt	pl
 80a54b0:	2201      	movpl	r2, #1
 80a54b2:	601a      	strpl	r2, [r3, #0]
 80a54b4:	4b14      	ldr	r3, [pc, #80]	; (80a5508 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a54b6:	681a      	ldr	r2, [r3, #0]
 80a54b8:	07d2      	lsls	r2, r2, #31
 80a54ba:	bf5c      	itt	pl
 80a54bc:	2201      	movpl	r2, #1
 80a54be:	601a      	strpl	r2, [r3, #0]
 80a54c0:	4b12      	ldr	r3, [pc, #72]	; (80a550c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a54c2:	681a      	ldr	r2, [r3, #0]
 80a54c4:	07d0      	lsls	r0, r2, #31
 80a54c6:	bf5c      	itt	pl
 80a54c8:	2201      	movpl	r2, #1
 80a54ca:	601a      	strpl	r2, [r3, #0]
 80a54cc:	4b10      	ldr	r3, [pc, #64]	; (80a5510 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a54ce:	681a      	ldr	r2, [r3, #0]
 80a54d0:	07d1      	lsls	r1, r2, #31
 80a54d2:	bf5c      	itt	pl
 80a54d4:	2201      	movpl	r2, #1
 80a54d6:	601a      	strpl	r2, [r3, #0]
 80a54d8:	4b0e      	ldr	r3, [pc, #56]	; (80a5514 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a54da:	681a      	ldr	r2, [r3, #0]
 80a54dc:	07d2      	lsls	r2, r2, #31
 80a54de:	bf5c      	itt	pl
 80a54e0:	2201      	movpl	r2, #1
 80a54e2:	601a      	strpl	r2, [r3, #0]
 80a54e4:	4770      	bx	lr
 80a54e6:	bf00      	nop
 80a54e8:	20000568 	.word	0x20000568
 80a54ec:	20000564 	.word	0x20000564
 80a54f0:	20000560 	.word	0x20000560
 80a54f4:	2000055c 	.word	0x2000055c
 80a54f8:	20000558 	.word	0x20000558
 80a54fc:	20000554 	.word	0x20000554
 80a5500:	20000550 	.word	0x20000550
 80a5504:	2000054c 	.word	0x2000054c
 80a5508:	20000548 	.word	0x20000548
 80a550c:	20000544 	.word	0x20000544
 80a5510:	20000540 	.word	0x20000540
 80a5514:	2000053c 	.word	0x2000053c

080a5518 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a5518:	4b24      	ldr	r3, [pc, #144]	; (80a55ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a551a:	681a      	ldr	r2, [r3, #0]
 80a551c:	07d0      	lsls	r0, r2, #31
 80a551e:	bf5c      	itt	pl
 80a5520:	2201      	movpl	r2, #1
 80a5522:	601a      	strpl	r2, [r3, #0]
 80a5524:	4b22      	ldr	r3, [pc, #136]	; (80a55b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a5526:	681a      	ldr	r2, [r3, #0]
 80a5528:	07d1      	lsls	r1, r2, #31
 80a552a:	bf5c      	itt	pl
 80a552c:	2201      	movpl	r2, #1
 80a552e:	601a      	strpl	r2, [r3, #0]
 80a5530:	4b20      	ldr	r3, [pc, #128]	; (80a55b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a5532:	681a      	ldr	r2, [r3, #0]
 80a5534:	07d2      	lsls	r2, r2, #31
 80a5536:	bf5c      	itt	pl
 80a5538:	2201      	movpl	r2, #1
 80a553a:	601a      	strpl	r2, [r3, #0]
 80a553c:	4b1e      	ldr	r3, [pc, #120]	; (80a55b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a553e:	681a      	ldr	r2, [r3, #0]
 80a5540:	07d0      	lsls	r0, r2, #31
 80a5542:	bf5c      	itt	pl
 80a5544:	2201      	movpl	r2, #1
 80a5546:	601a      	strpl	r2, [r3, #0]
 80a5548:	4b1c      	ldr	r3, [pc, #112]	; (80a55bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a554a:	681a      	ldr	r2, [r3, #0]
 80a554c:	07d1      	lsls	r1, r2, #31
 80a554e:	bf5c      	itt	pl
 80a5550:	2201      	movpl	r2, #1
 80a5552:	601a      	strpl	r2, [r3, #0]
 80a5554:	4b1a      	ldr	r3, [pc, #104]	; (80a55c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a5556:	681a      	ldr	r2, [r3, #0]
 80a5558:	07d2      	lsls	r2, r2, #31
 80a555a:	bf5c      	itt	pl
 80a555c:	2201      	movpl	r2, #1
 80a555e:	601a      	strpl	r2, [r3, #0]
 80a5560:	4b18      	ldr	r3, [pc, #96]	; (80a55c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a5562:	681a      	ldr	r2, [r3, #0]
 80a5564:	07d0      	lsls	r0, r2, #31
 80a5566:	bf5c      	itt	pl
 80a5568:	2201      	movpl	r2, #1
 80a556a:	601a      	strpl	r2, [r3, #0]
 80a556c:	4b16      	ldr	r3, [pc, #88]	; (80a55c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a556e:	681a      	ldr	r2, [r3, #0]
 80a5570:	07d1      	lsls	r1, r2, #31
 80a5572:	bf5c      	itt	pl
 80a5574:	2201      	movpl	r2, #1
 80a5576:	601a      	strpl	r2, [r3, #0]
 80a5578:	4b14      	ldr	r3, [pc, #80]	; (80a55cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a557a:	681a      	ldr	r2, [r3, #0]
 80a557c:	07d2      	lsls	r2, r2, #31
 80a557e:	bf5c      	itt	pl
 80a5580:	2201      	movpl	r2, #1
 80a5582:	601a      	strpl	r2, [r3, #0]
 80a5584:	4b12      	ldr	r3, [pc, #72]	; (80a55d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a5586:	681a      	ldr	r2, [r3, #0]
 80a5588:	07d0      	lsls	r0, r2, #31
 80a558a:	bf5c      	itt	pl
 80a558c:	2201      	movpl	r2, #1
 80a558e:	601a      	strpl	r2, [r3, #0]
 80a5590:	4b10      	ldr	r3, [pc, #64]	; (80a55d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a5592:	681a      	ldr	r2, [r3, #0]
 80a5594:	07d1      	lsls	r1, r2, #31
 80a5596:	bf5c      	itt	pl
 80a5598:	2201      	movpl	r2, #1
 80a559a:	601a      	strpl	r2, [r3, #0]
 80a559c:	4b0e      	ldr	r3, [pc, #56]	; (80a55d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a559e:	681a      	ldr	r2, [r3, #0]
 80a55a0:	07d2      	lsls	r2, r2, #31
 80a55a2:	bf5c      	itt	pl
 80a55a4:	2201      	movpl	r2, #1
 80a55a6:	601a      	strpl	r2, [r3, #0]
 80a55a8:	4770      	bx	lr
 80a55aa:	bf00      	nop
 80a55ac:	20000598 	.word	0x20000598
 80a55b0:	20000594 	.word	0x20000594
 80a55b4:	20000590 	.word	0x20000590
 80a55b8:	2000058c 	.word	0x2000058c
 80a55bc:	20000588 	.word	0x20000588
 80a55c0:	20000584 	.word	0x20000584
 80a55c4:	20000580 	.word	0x20000580
 80a55c8:	2000057c 	.word	0x2000057c
 80a55cc:	20000578 	.word	0x20000578
 80a55d0:	20000574 	.word	0x20000574
 80a55d4:	20000570 	.word	0x20000570
 80a55d8:	2000056c 	.word	0x2000056c

080a55dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a55dc:	4b18      	ldr	r3, [pc, #96]	; (80a5640 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a55de:	681a      	ldr	r2, [r3, #0]
 80a55e0:	07d1      	lsls	r1, r2, #31
 80a55e2:	bf5c      	itt	pl
 80a55e4:	2201      	movpl	r2, #1
 80a55e6:	601a      	strpl	r2, [r3, #0]
 80a55e8:	4b16      	ldr	r3, [pc, #88]	; (80a5644 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a55ea:	681a      	ldr	r2, [r3, #0]
 80a55ec:	07d2      	lsls	r2, r2, #31
 80a55ee:	bf5c      	itt	pl
 80a55f0:	2201      	movpl	r2, #1
 80a55f2:	601a      	strpl	r2, [r3, #0]
 80a55f4:	4b14      	ldr	r3, [pc, #80]	; (80a5648 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a55f6:	681a      	ldr	r2, [r3, #0]
 80a55f8:	07d0      	lsls	r0, r2, #31
 80a55fa:	bf5c      	itt	pl
 80a55fc:	2201      	movpl	r2, #1
 80a55fe:	601a      	strpl	r2, [r3, #0]
 80a5600:	4b12      	ldr	r3, [pc, #72]	; (80a564c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a5602:	681a      	ldr	r2, [r3, #0]
 80a5604:	07d1      	lsls	r1, r2, #31
 80a5606:	bf5c      	itt	pl
 80a5608:	2201      	movpl	r2, #1
 80a560a:	601a      	strpl	r2, [r3, #0]
 80a560c:	4b10      	ldr	r3, [pc, #64]	; (80a5650 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a560e:	681a      	ldr	r2, [r3, #0]
 80a5610:	07d2      	lsls	r2, r2, #31
 80a5612:	bf5c      	itt	pl
 80a5614:	2201      	movpl	r2, #1
 80a5616:	601a      	strpl	r2, [r3, #0]
 80a5618:	4b0e      	ldr	r3, [pc, #56]	; (80a5654 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a561a:	681a      	ldr	r2, [r3, #0]
 80a561c:	07d0      	lsls	r0, r2, #31
 80a561e:	bf5c      	itt	pl
 80a5620:	2201      	movpl	r2, #1
 80a5622:	601a      	strpl	r2, [r3, #0]
 80a5624:	4b0c      	ldr	r3, [pc, #48]	; (80a5658 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a5626:	681a      	ldr	r2, [r3, #0]
 80a5628:	07d1      	lsls	r1, r2, #31
 80a562a:	bf5c      	itt	pl
 80a562c:	2201      	movpl	r2, #1
 80a562e:	601a      	strpl	r2, [r3, #0]
 80a5630:	4b0a      	ldr	r3, [pc, #40]	; (80a565c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a5632:	681a      	ldr	r2, [r3, #0]
 80a5634:	07d2      	lsls	r2, r2, #31
 80a5636:	bf5c      	itt	pl
 80a5638:	2201      	movpl	r2, #1
 80a563a:	601a      	strpl	r2, [r3, #0]
 80a563c:	4770      	bx	lr
 80a563e:	bf00      	nop
 80a5640:	200005b8 	.word	0x200005b8
 80a5644:	200005b4 	.word	0x200005b4
 80a5648:	200005b0 	.word	0x200005b0
 80a564c:	200005ac 	.word	0x200005ac
 80a5650:	200005a8 	.word	0x200005a8
 80a5654:	200005a4 	.word	0x200005a4
 80a5658:	200005a0 	.word	0x200005a0
 80a565c:	2000059c 	.word	0x2000059c

080a5660 <__aeabi_drsub>:
 80a5660:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a5664:	e002      	b.n	80a566c <__adddf3>
 80a5666:	bf00      	nop

080a5668 <__aeabi_dsub>:
 80a5668:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a566c <__adddf3>:
 80a566c:	b530      	push	{r4, r5, lr}
 80a566e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a5672:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a5676:	ea94 0f05 	teq	r4, r5
 80a567a:	bf08      	it	eq
 80a567c:	ea90 0f02 	teqeq	r0, r2
 80a5680:	bf1f      	itttt	ne
 80a5682:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a5686:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a568a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a568e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a5692:	f000 80e2 	beq.w	80a585a <__adddf3+0x1ee>
 80a5696:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a569a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a569e:	bfb8      	it	lt
 80a56a0:	426d      	neglt	r5, r5
 80a56a2:	dd0c      	ble.n	80a56be <__adddf3+0x52>
 80a56a4:	442c      	add	r4, r5
 80a56a6:	ea80 0202 	eor.w	r2, r0, r2
 80a56aa:	ea81 0303 	eor.w	r3, r1, r3
 80a56ae:	ea82 0000 	eor.w	r0, r2, r0
 80a56b2:	ea83 0101 	eor.w	r1, r3, r1
 80a56b6:	ea80 0202 	eor.w	r2, r0, r2
 80a56ba:	ea81 0303 	eor.w	r3, r1, r3
 80a56be:	2d36      	cmp	r5, #54	; 0x36
 80a56c0:	bf88      	it	hi
 80a56c2:	bd30      	pophi	{r4, r5, pc}
 80a56c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a56c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a56cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a56d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a56d4:	d002      	beq.n	80a56dc <__adddf3+0x70>
 80a56d6:	4240      	negs	r0, r0
 80a56d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a56dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a56e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a56e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a56e8:	d002      	beq.n	80a56f0 <__adddf3+0x84>
 80a56ea:	4252      	negs	r2, r2
 80a56ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a56f0:	ea94 0f05 	teq	r4, r5
 80a56f4:	f000 80a7 	beq.w	80a5846 <__adddf3+0x1da>
 80a56f8:	f1a4 0401 	sub.w	r4, r4, #1
 80a56fc:	f1d5 0e20 	rsbs	lr, r5, #32
 80a5700:	db0d      	blt.n	80a571e <__adddf3+0xb2>
 80a5702:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a5706:	fa22 f205 	lsr.w	r2, r2, r5
 80a570a:	1880      	adds	r0, r0, r2
 80a570c:	f141 0100 	adc.w	r1, r1, #0
 80a5710:	fa03 f20e 	lsl.w	r2, r3, lr
 80a5714:	1880      	adds	r0, r0, r2
 80a5716:	fa43 f305 	asr.w	r3, r3, r5
 80a571a:	4159      	adcs	r1, r3
 80a571c:	e00e      	b.n	80a573c <__adddf3+0xd0>
 80a571e:	f1a5 0520 	sub.w	r5, r5, #32
 80a5722:	f10e 0e20 	add.w	lr, lr, #32
 80a5726:	2a01      	cmp	r2, #1
 80a5728:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a572c:	bf28      	it	cs
 80a572e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a5732:	fa43 f305 	asr.w	r3, r3, r5
 80a5736:	18c0      	adds	r0, r0, r3
 80a5738:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a573c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a5740:	d507      	bpl.n	80a5752 <__adddf3+0xe6>
 80a5742:	f04f 0e00 	mov.w	lr, #0
 80a5746:	f1dc 0c00 	rsbs	ip, ip, #0
 80a574a:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a574e:	eb6e 0101 	sbc.w	r1, lr, r1
 80a5752:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a5756:	d31b      	bcc.n	80a5790 <__adddf3+0x124>
 80a5758:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a575c:	d30c      	bcc.n	80a5778 <__adddf3+0x10c>
 80a575e:	0849      	lsrs	r1, r1, #1
 80a5760:	ea5f 0030 	movs.w	r0, r0, rrx
 80a5764:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a5768:	f104 0401 	add.w	r4, r4, #1
 80a576c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a5770:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a5774:	f080 809a 	bcs.w	80a58ac <__adddf3+0x240>
 80a5778:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a577c:	bf08      	it	eq
 80a577e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a5782:	f150 0000 	adcs.w	r0, r0, #0
 80a5786:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a578a:	ea41 0105 	orr.w	r1, r1, r5
 80a578e:	bd30      	pop	{r4, r5, pc}
 80a5790:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a5794:	4140      	adcs	r0, r0
 80a5796:	eb41 0101 	adc.w	r1, r1, r1
 80a579a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a579e:	f1a4 0401 	sub.w	r4, r4, #1
 80a57a2:	d1e9      	bne.n	80a5778 <__adddf3+0x10c>
 80a57a4:	f091 0f00 	teq	r1, #0
 80a57a8:	bf04      	itt	eq
 80a57aa:	4601      	moveq	r1, r0
 80a57ac:	2000      	moveq	r0, #0
 80a57ae:	fab1 f381 	clz	r3, r1
 80a57b2:	bf08      	it	eq
 80a57b4:	3320      	addeq	r3, #32
 80a57b6:	f1a3 030b 	sub.w	r3, r3, #11
 80a57ba:	f1b3 0220 	subs.w	r2, r3, #32
 80a57be:	da0c      	bge.n	80a57da <__adddf3+0x16e>
 80a57c0:	320c      	adds	r2, #12
 80a57c2:	dd08      	ble.n	80a57d6 <__adddf3+0x16a>
 80a57c4:	f102 0c14 	add.w	ip, r2, #20
 80a57c8:	f1c2 020c 	rsb	r2, r2, #12
 80a57cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80a57d0:	fa21 f102 	lsr.w	r1, r1, r2
 80a57d4:	e00c      	b.n	80a57f0 <__adddf3+0x184>
 80a57d6:	f102 0214 	add.w	r2, r2, #20
 80a57da:	bfd8      	it	le
 80a57dc:	f1c2 0c20 	rsble	ip, r2, #32
 80a57e0:	fa01 f102 	lsl.w	r1, r1, r2
 80a57e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a57e8:	bfdc      	itt	le
 80a57ea:	ea41 010c 	orrle.w	r1, r1, ip
 80a57ee:	4090      	lslle	r0, r2
 80a57f0:	1ae4      	subs	r4, r4, r3
 80a57f2:	bfa2      	ittt	ge
 80a57f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a57f8:	4329      	orrge	r1, r5
 80a57fa:	bd30      	popge	{r4, r5, pc}
 80a57fc:	ea6f 0404 	mvn.w	r4, r4
 80a5800:	3c1f      	subs	r4, #31
 80a5802:	da1c      	bge.n	80a583e <__adddf3+0x1d2>
 80a5804:	340c      	adds	r4, #12
 80a5806:	dc0e      	bgt.n	80a5826 <__adddf3+0x1ba>
 80a5808:	f104 0414 	add.w	r4, r4, #20
 80a580c:	f1c4 0220 	rsb	r2, r4, #32
 80a5810:	fa20 f004 	lsr.w	r0, r0, r4
 80a5814:	fa01 f302 	lsl.w	r3, r1, r2
 80a5818:	ea40 0003 	orr.w	r0, r0, r3
 80a581c:	fa21 f304 	lsr.w	r3, r1, r4
 80a5820:	ea45 0103 	orr.w	r1, r5, r3
 80a5824:	bd30      	pop	{r4, r5, pc}
 80a5826:	f1c4 040c 	rsb	r4, r4, #12
 80a582a:	f1c4 0220 	rsb	r2, r4, #32
 80a582e:	fa20 f002 	lsr.w	r0, r0, r2
 80a5832:	fa01 f304 	lsl.w	r3, r1, r4
 80a5836:	ea40 0003 	orr.w	r0, r0, r3
 80a583a:	4629      	mov	r1, r5
 80a583c:	bd30      	pop	{r4, r5, pc}
 80a583e:	fa21 f004 	lsr.w	r0, r1, r4
 80a5842:	4629      	mov	r1, r5
 80a5844:	bd30      	pop	{r4, r5, pc}
 80a5846:	f094 0f00 	teq	r4, #0
 80a584a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a584e:	bf06      	itte	eq
 80a5850:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a5854:	3401      	addeq	r4, #1
 80a5856:	3d01      	subne	r5, #1
 80a5858:	e74e      	b.n	80a56f8 <__adddf3+0x8c>
 80a585a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a585e:	bf18      	it	ne
 80a5860:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a5864:	d029      	beq.n	80a58ba <__adddf3+0x24e>
 80a5866:	ea94 0f05 	teq	r4, r5
 80a586a:	bf08      	it	eq
 80a586c:	ea90 0f02 	teqeq	r0, r2
 80a5870:	d005      	beq.n	80a587e <__adddf3+0x212>
 80a5872:	ea54 0c00 	orrs.w	ip, r4, r0
 80a5876:	bf04      	itt	eq
 80a5878:	4619      	moveq	r1, r3
 80a587a:	4610      	moveq	r0, r2
 80a587c:	bd30      	pop	{r4, r5, pc}
 80a587e:	ea91 0f03 	teq	r1, r3
 80a5882:	bf1e      	ittt	ne
 80a5884:	2100      	movne	r1, #0
 80a5886:	2000      	movne	r0, #0
 80a5888:	bd30      	popne	{r4, r5, pc}
 80a588a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a588e:	d105      	bne.n	80a589c <__adddf3+0x230>
 80a5890:	0040      	lsls	r0, r0, #1
 80a5892:	4149      	adcs	r1, r1
 80a5894:	bf28      	it	cs
 80a5896:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a589a:	bd30      	pop	{r4, r5, pc}
 80a589c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a58a0:	bf3c      	itt	cc
 80a58a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a58a6:	bd30      	popcc	{r4, r5, pc}
 80a58a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a58ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a58b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a58b4:	f04f 0000 	mov.w	r0, #0
 80a58b8:	bd30      	pop	{r4, r5, pc}
 80a58ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a58be:	bf1a      	itte	ne
 80a58c0:	4619      	movne	r1, r3
 80a58c2:	4610      	movne	r0, r2
 80a58c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a58c8:	bf1c      	itt	ne
 80a58ca:	460b      	movne	r3, r1
 80a58cc:	4602      	movne	r2, r0
 80a58ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a58d2:	bf06      	itte	eq
 80a58d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a58d8:	ea91 0f03 	teqeq	r1, r3
 80a58dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a58e0:	bd30      	pop	{r4, r5, pc}
 80a58e2:	bf00      	nop

080a58e4 <__aeabi_ui2d>:
 80a58e4:	f090 0f00 	teq	r0, #0
 80a58e8:	bf04      	itt	eq
 80a58ea:	2100      	moveq	r1, #0
 80a58ec:	4770      	bxeq	lr
 80a58ee:	b530      	push	{r4, r5, lr}
 80a58f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a58f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a58f8:	f04f 0500 	mov.w	r5, #0
 80a58fc:	f04f 0100 	mov.w	r1, #0
 80a5900:	e750      	b.n	80a57a4 <__adddf3+0x138>
 80a5902:	bf00      	nop

080a5904 <__aeabi_i2d>:
 80a5904:	f090 0f00 	teq	r0, #0
 80a5908:	bf04      	itt	eq
 80a590a:	2100      	moveq	r1, #0
 80a590c:	4770      	bxeq	lr
 80a590e:	b530      	push	{r4, r5, lr}
 80a5910:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a5914:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a5918:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a591c:	bf48      	it	mi
 80a591e:	4240      	negmi	r0, r0
 80a5920:	f04f 0100 	mov.w	r1, #0
 80a5924:	e73e      	b.n	80a57a4 <__adddf3+0x138>
 80a5926:	bf00      	nop

080a5928 <__aeabi_f2d>:
 80a5928:	0042      	lsls	r2, r0, #1
 80a592a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a592e:	ea4f 0131 	mov.w	r1, r1, rrx
 80a5932:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a5936:	bf1f      	itttt	ne
 80a5938:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a593c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a5940:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a5944:	4770      	bxne	lr
 80a5946:	f092 0f00 	teq	r2, #0
 80a594a:	bf14      	ite	ne
 80a594c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a5950:	4770      	bxeq	lr
 80a5952:	b530      	push	{r4, r5, lr}
 80a5954:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a5958:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a595c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a5960:	e720      	b.n	80a57a4 <__adddf3+0x138>
 80a5962:	bf00      	nop

080a5964 <__aeabi_ul2d>:
 80a5964:	ea50 0201 	orrs.w	r2, r0, r1
 80a5968:	bf08      	it	eq
 80a596a:	4770      	bxeq	lr
 80a596c:	b530      	push	{r4, r5, lr}
 80a596e:	f04f 0500 	mov.w	r5, #0
 80a5972:	e00a      	b.n	80a598a <__aeabi_l2d+0x16>

080a5974 <__aeabi_l2d>:
 80a5974:	ea50 0201 	orrs.w	r2, r0, r1
 80a5978:	bf08      	it	eq
 80a597a:	4770      	bxeq	lr
 80a597c:	b530      	push	{r4, r5, lr}
 80a597e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a5982:	d502      	bpl.n	80a598a <__aeabi_l2d+0x16>
 80a5984:	4240      	negs	r0, r0
 80a5986:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a598a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a598e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a5992:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a5996:	f43f aedc 	beq.w	80a5752 <__adddf3+0xe6>
 80a599a:	f04f 0203 	mov.w	r2, #3
 80a599e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a59a2:	bf18      	it	ne
 80a59a4:	3203      	addne	r2, #3
 80a59a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a59aa:	bf18      	it	ne
 80a59ac:	3203      	addne	r2, #3
 80a59ae:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a59b2:	f1c2 0320 	rsb	r3, r2, #32
 80a59b6:	fa00 fc03 	lsl.w	ip, r0, r3
 80a59ba:	fa20 f002 	lsr.w	r0, r0, r2
 80a59be:	fa01 fe03 	lsl.w	lr, r1, r3
 80a59c2:	ea40 000e 	orr.w	r0, r0, lr
 80a59c6:	fa21 f102 	lsr.w	r1, r1, r2
 80a59ca:	4414      	add	r4, r2
 80a59cc:	e6c1      	b.n	80a5752 <__adddf3+0xe6>
 80a59ce:	bf00      	nop

080a59d0 <__aeabi_dmul>:
 80a59d0:	b570      	push	{r4, r5, r6, lr}
 80a59d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a59d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a59da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a59de:	bf1d      	ittte	ne
 80a59e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a59e4:	ea94 0f0c 	teqne	r4, ip
 80a59e8:	ea95 0f0c 	teqne	r5, ip
 80a59ec:	f000 f8de 	bleq	80a5bac <__aeabi_dmul+0x1dc>
 80a59f0:	442c      	add	r4, r5
 80a59f2:	ea81 0603 	eor.w	r6, r1, r3
 80a59f6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a59fa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a59fe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a5a02:	bf18      	it	ne
 80a5a04:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a5a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a5a0c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a5a10:	d038      	beq.n	80a5a84 <__aeabi_dmul+0xb4>
 80a5a12:	fba0 ce02 	umull	ip, lr, r0, r2
 80a5a16:	f04f 0500 	mov.w	r5, #0
 80a5a1a:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a5a1e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a5a22:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a5a26:	f04f 0600 	mov.w	r6, #0
 80a5a2a:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a5a2e:	f09c 0f00 	teq	ip, #0
 80a5a32:	bf18      	it	ne
 80a5a34:	f04e 0e01 	orrne.w	lr, lr, #1
 80a5a38:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a5a3c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a5a40:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a5a44:	d204      	bcs.n	80a5a50 <__aeabi_dmul+0x80>
 80a5a46:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a5a4a:	416d      	adcs	r5, r5
 80a5a4c:	eb46 0606 	adc.w	r6, r6, r6
 80a5a50:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a5a54:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a5a58:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a5a5c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a5a60:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a5a64:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a5a68:	bf88      	it	hi
 80a5a6a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a5a6e:	d81e      	bhi.n	80a5aae <__aeabi_dmul+0xde>
 80a5a70:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a5a74:	bf08      	it	eq
 80a5a76:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a5a7a:	f150 0000 	adcs.w	r0, r0, #0
 80a5a7e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a5a82:	bd70      	pop	{r4, r5, r6, pc}
 80a5a84:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a5a88:	ea46 0101 	orr.w	r1, r6, r1
 80a5a8c:	ea40 0002 	orr.w	r0, r0, r2
 80a5a90:	ea81 0103 	eor.w	r1, r1, r3
 80a5a94:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a5a98:	bfc2      	ittt	gt
 80a5a9a:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a5a9e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a5aa2:	bd70      	popgt	{r4, r5, r6, pc}
 80a5aa4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a5aa8:	f04f 0e00 	mov.w	lr, #0
 80a5aac:	3c01      	subs	r4, #1
 80a5aae:	f300 80ab 	bgt.w	80a5c08 <__aeabi_dmul+0x238>
 80a5ab2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a5ab6:	bfde      	ittt	le
 80a5ab8:	2000      	movle	r0, #0
 80a5aba:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a5abe:	bd70      	pople	{r4, r5, r6, pc}
 80a5ac0:	f1c4 0400 	rsb	r4, r4, #0
 80a5ac4:	3c20      	subs	r4, #32
 80a5ac6:	da35      	bge.n	80a5b34 <__aeabi_dmul+0x164>
 80a5ac8:	340c      	adds	r4, #12
 80a5aca:	dc1b      	bgt.n	80a5b04 <__aeabi_dmul+0x134>
 80a5acc:	f104 0414 	add.w	r4, r4, #20
 80a5ad0:	f1c4 0520 	rsb	r5, r4, #32
 80a5ad4:	fa00 f305 	lsl.w	r3, r0, r5
 80a5ad8:	fa20 f004 	lsr.w	r0, r0, r4
 80a5adc:	fa01 f205 	lsl.w	r2, r1, r5
 80a5ae0:	ea40 0002 	orr.w	r0, r0, r2
 80a5ae4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a5ae8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a5aec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a5af0:	fa21 f604 	lsr.w	r6, r1, r4
 80a5af4:	eb42 0106 	adc.w	r1, r2, r6
 80a5af8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a5afc:	bf08      	it	eq
 80a5afe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a5b02:	bd70      	pop	{r4, r5, r6, pc}
 80a5b04:	f1c4 040c 	rsb	r4, r4, #12
 80a5b08:	f1c4 0520 	rsb	r5, r4, #32
 80a5b0c:	fa00 f304 	lsl.w	r3, r0, r4
 80a5b10:	fa20 f005 	lsr.w	r0, r0, r5
 80a5b14:	fa01 f204 	lsl.w	r2, r1, r4
 80a5b18:	ea40 0002 	orr.w	r0, r0, r2
 80a5b1c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a5b20:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a5b24:	f141 0100 	adc.w	r1, r1, #0
 80a5b28:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a5b2c:	bf08      	it	eq
 80a5b2e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a5b32:	bd70      	pop	{r4, r5, r6, pc}
 80a5b34:	f1c4 0520 	rsb	r5, r4, #32
 80a5b38:	fa00 f205 	lsl.w	r2, r0, r5
 80a5b3c:	ea4e 0e02 	orr.w	lr, lr, r2
 80a5b40:	fa20 f304 	lsr.w	r3, r0, r4
 80a5b44:	fa01 f205 	lsl.w	r2, r1, r5
 80a5b48:	ea43 0302 	orr.w	r3, r3, r2
 80a5b4c:	fa21 f004 	lsr.w	r0, r1, r4
 80a5b50:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a5b54:	fa21 f204 	lsr.w	r2, r1, r4
 80a5b58:	ea20 0002 	bic.w	r0, r0, r2
 80a5b5c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a5b60:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a5b64:	bf08      	it	eq
 80a5b66:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a5b6a:	bd70      	pop	{r4, r5, r6, pc}
 80a5b6c:	f094 0f00 	teq	r4, #0
 80a5b70:	d10f      	bne.n	80a5b92 <__aeabi_dmul+0x1c2>
 80a5b72:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a5b76:	0040      	lsls	r0, r0, #1
 80a5b78:	eb41 0101 	adc.w	r1, r1, r1
 80a5b7c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a5b80:	bf08      	it	eq
 80a5b82:	3c01      	subeq	r4, #1
 80a5b84:	d0f7      	beq.n	80a5b76 <__aeabi_dmul+0x1a6>
 80a5b86:	ea41 0106 	orr.w	r1, r1, r6
 80a5b8a:	f095 0f00 	teq	r5, #0
 80a5b8e:	bf18      	it	ne
 80a5b90:	4770      	bxne	lr
 80a5b92:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a5b96:	0052      	lsls	r2, r2, #1
 80a5b98:	eb43 0303 	adc.w	r3, r3, r3
 80a5b9c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a5ba0:	bf08      	it	eq
 80a5ba2:	3d01      	subeq	r5, #1
 80a5ba4:	d0f7      	beq.n	80a5b96 <__aeabi_dmul+0x1c6>
 80a5ba6:	ea43 0306 	orr.w	r3, r3, r6
 80a5baa:	4770      	bx	lr
 80a5bac:	ea94 0f0c 	teq	r4, ip
 80a5bb0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a5bb4:	bf18      	it	ne
 80a5bb6:	ea95 0f0c 	teqne	r5, ip
 80a5bba:	d00c      	beq.n	80a5bd6 <__aeabi_dmul+0x206>
 80a5bbc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a5bc0:	bf18      	it	ne
 80a5bc2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a5bc6:	d1d1      	bne.n	80a5b6c <__aeabi_dmul+0x19c>
 80a5bc8:	ea81 0103 	eor.w	r1, r1, r3
 80a5bcc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a5bd0:	f04f 0000 	mov.w	r0, #0
 80a5bd4:	bd70      	pop	{r4, r5, r6, pc}
 80a5bd6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a5bda:	bf06      	itte	eq
 80a5bdc:	4610      	moveq	r0, r2
 80a5bde:	4619      	moveq	r1, r3
 80a5be0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a5be4:	d019      	beq.n	80a5c1a <__aeabi_dmul+0x24a>
 80a5be6:	ea94 0f0c 	teq	r4, ip
 80a5bea:	d102      	bne.n	80a5bf2 <__aeabi_dmul+0x222>
 80a5bec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a5bf0:	d113      	bne.n	80a5c1a <__aeabi_dmul+0x24a>
 80a5bf2:	ea95 0f0c 	teq	r5, ip
 80a5bf6:	d105      	bne.n	80a5c04 <__aeabi_dmul+0x234>
 80a5bf8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a5bfc:	bf1c      	itt	ne
 80a5bfe:	4610      	movne	r0, r2
 80a5c00:	4619      	movne	r1, r3
 80a5c02:	d10a      	bne.n	80a5c1a <__aeabi_dmul+0x24a>
 80a5c04:	ea81 0103 	eor.w	r1, r1, r3
 80a5c08:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a5c0c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a5c10:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a5c14:	f04f 0000 	mov.w	r0, #0
 80a5c18:	bd70      	pop	{r4, r5, r6, pc}
 80a5c1a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a5c1e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a5c22:	bd70      	pop	{r4, r5, r6, pc}

080a5c24 <__aeabi_ddiv>:
 80a5c24:	b570      	push	{r4, r5, r6, lr}
 80a5c26:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a5c2a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a5c2e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a5c32:	bf1d      	ittte	ne
 80a5c34:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a5c38:	ea94 0f0c 	teqne	r4, ip
 80a5c3c:	ea95 0f0c 	teqne	r5, ip
 80a5c40:	f000 f8a7 	bleq	80a5d92 <__aeabi_ddiv+0x16e>
 80a5c44:	eba4 0405 	sub.w	r4, r4, r5
 80a5c48:	ea81 0e03 	eor.w	lr, r1, r3
 80a5c4c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a5c50:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a5c54:	f000 8088 	beq.w	80a5d68 <__aeabi_ddiv+0x144>
 80a5c58:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a5c5c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a5c60:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a5c64:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a5c68:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a5c6c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a5c70:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a5c74:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a5c78:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a5c7c:	429d      	cmp	r5, r3
 80a5c7e:	bf08      	it	eq
 80a5c80:	4296      	cmpeq	r6, r2
 80a5c82:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a5c86:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a5c8a:	d202      	bcs.n	80a5c92 <__aeabi_ddiv+0x6e>
 80a5c8c:	085b      	lsrs	r3, r3, #1
 80a5c8e:	ea4f 0232 	mov.w	r2, r2, rrx
 80a5c92:	1ab6      	subs	r6, r6, r2
 80a5c94:	eb65 0503 	sbc.w	r5, r5, r3
 80a5c98:	085b      	lsrs	r3, r3, #1
 80a5c9a:	ea4f 0232 	mov.w	r2, r2, rrx
 80a5c9e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a5ca2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a5ca6:	ebb6 0e02 	subs.w	lr, r6, r2
 80a5caa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a5cae:	bf22      	ittt	cs
 80a5cb0:	1ab6      	subcs	r6, r6, r2
 80a5cb2:	4675      	movcs	r5, lr
 80a5cb4:	ea40 000c 	orrcs.w	r0, r0, ip
 80a5cb8:	085b      	lsrs	r3, r3, #1
 80a5cba:	ea4f 0232 	mov.w	r2, r2, rrx
 80a5cbe:	ebb6 0e02 	subs.w	lr, r6, r2
 80a5cc2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a5cc6:	bf22      	ittt	cs
 80a5cc8:	1ab6      	subcs	r6, r6, r2
 80a5cca:	4675      	movcs	r5, lr
 80a5ccc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a5cd0:	085b      	lsrs	r3, r3, #1
 80a5cd2:	ea4f 0232 	mov.w	r2, r2, rrx
 80a5cd6:	ebb6 0e02 	subs.w	lr, r6, r2
 80a5cda:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a5cde:	bf22      	ittt	cs
 80a5ce0:	1ab6      	subcs	r6, r6, r2
 80a5ce2:	4675      	movcs	r5, lr
 80a5ce4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a5ce8:	085b      	lsrs	r3, r3, #1
 80a5cea:	ea4f 0232 	mov.w	r2, r2, rrx
 80a5cee:	ebb6 0e02 	subs.w	lr, r6, r2
 80a5cf2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a5cf6:	bf22      	ittt	cs
 80a5cf8:	1ab6      	subcs	r6, r6, r2
 80a5cfa:	4675      	movcs	r5, lr
 80a5cfc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a5d00:	ea55 0e06 	orrs.w	lr, r5, r6
 80a5d04:	d018      	beq.n	80a5d38 <__aeabi_ddiv+0x114>
 80a5d06:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a5d0a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a5d0e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a5d12:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a5d16:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a5d1a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a5d1e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a5d22:	d1c0      	bne.n	80a5ca6 <__aeabi_ddiv+0x82>
 80a5d24:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a5d28:	d10b      	bne.n	80a5d42 <__aeabi_ddiv+0x11e>
 80a5d2a:	ea41 0100 	orr.w	r1, r1, r0
 80a5d2e:	f04f 0000 	mov.w	r0, #0
 80a5d32:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a5d36:	e7b6      	b.n	80a5ca6 <__aeabi_ddiv+0x82>
 80a5d38:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a5d3c:	bf04      	itt	eq
 80a5d3e:	4301      	orreq	r1, r0
 80a5d40:	2000      	moveq	r0, #0
 80a5d42:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a5d46:	bf88      	it	hi
 80a5d48:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a5d4c:	f63f aeaf 	bhi.w	80a5aae <__aeabi_dmul+0xde>
 80a5d50:	ebb5 0c03 	subs.w	ip, r5, r3
 80a5d54:	bf04      	itt	eq
 80a5d56:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a5d5a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a5d5e:	f150 0000 	adcs.w	r0, r0, #0
 80a5d62:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a5d66:	bd70      	pop	{r4, r5, r6, pc}
 80a5d68:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a5d6c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a5d70:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a5d74:	bfc2      	ittt	gt
 80a5d76:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a5d7a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a5d7e:	bd70      	popgt	{r4, r5, r6, pc}
 80a5d80:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a5d84:	f04f 0e00 	mov.w	lr, #0
 80a5d88:	3c01      	subs	r4, #1
 80a5d8a:	e690      	b.n	80a5aae <__aeabi_dmul+0xde>
 80a5d8c:	ea45 0e06 	orr.w	lr, r5, r6
 80a5d90:	e68d      	b.n	80a5aae <__aeabi_dmul+0xde>
 80a5d92:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a5d96:	ea94 0f0c 	teq	r4, ip
 80a5d9a:	bf08      	it	eq
 80a5d9c:	ea95 0f0c 	teqeq	r5, ip
 80a5da0:	f43f af3b 	beq.w	80a5c1a <__aeabi_dmul+0x24a>
 80a5da4:	ea94 0f0c 	teq	r4, ip
 80a5da8:	d10a      	bne.n	80a5dc0 <__aeabi_ddiv+0x19c>
 80a5daa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a5dae:	f47f af34 	bne.w	80a5c1a <__aeabi_dmul+0x24a>
 80a5db2:	ea95 0f0c 	teq	r5, ip
 80a5db6:	f47f af25 	bne.w	80a5c04 <__aeabi_dmul+0x234>
 80a5dba:	4610      	mov	r0, r2
 80a5dbc:	4619      	mov	r1, r3
 80a5dbe:	e72c      	b.n	80a5c1a <__aeabi_dmul+0x24a>
 80a5dc0:	ea95 0f0c 	teq	r5, ip
 80a5dc4:	d106      	bne.n	80a5dd4 <__aeabi_ddiv+0x1b0>
 80a5dc6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a5dca:	f43f aefd 	beq.w	80a5bc8 <__aeabi_dmul+0x1f8>
 80a5dce:	4610      	mov	r0, r2
 80a5dd0:	4619      	mov	r1, r3
 80a5dd2:	e722      	b.n	80a5c1a <__aeabi_dmul+0x24a>
 80a5dd4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a5dd8:	bf18      	it	ne
 80a5dda:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a5dde:	f47f aec5 	bne.w	80a5b6c <__aeabi_dmul+0x19c>
 80a5de2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a5de6:	f47f af0d 	bne.w	80a5c04 <__aeabi_dmul+0x234>
 80a5dea:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a5dee:	f47f aeeb 	bne.w	80a5bc8 <__aeabi_dmul+0x1f8>
 80a5df2:	e712      	b.n	80a5c1a <__aeabi_dmul+0x24a>

080a5df4 <__gedf2>:
 80a5df4:	f04f 3cff 	mov.w	ip, #4294967295
 80a5df8:	e006      	b.n	80a5e08 <__cmpdf2+0x4>
 80a5dfa:	bf00      	nop

080a5dfc <__ledf2>:
 80a5dfc:	f04f 0c01 	mov.w	ip, #1
 80a5e00:	e002      	b.n	80a5e08 <__cmpdf2+0x4>
 80a5e02:	bf00      	nop

080a5e04 <__cmpdf2>:
 80a5e04:	f04f 0c01 	mov.w	ip, #1
 80a5e08:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a5e0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a5e10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a5e14:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a5e18:	bf18      	it	ne
 80a5e1a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80a5e1e:	d01b      	beq.n	80a5e58 <__cmpdf2+0x54>
 80a5e20:	b001      	add	sp, #4
 80a5e22:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80a5e26:	bf0c      	ite	eq
 80a5e28:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80a5e2c:	ea91 0f03 	teqne	r1, r3
 80a5e30:	bf02      	ittt	eq
 80a5e32:	ea90 0f02 	teqeq	r0, r2
 80a5e36:	2000      	moveq	r0, #0
 80a5e38:	4770      	bxeq	lr
 80a5e3a:	f110 0f00 	cmn.w	r0, #0
 80a5e3e:	ea91 0f03 	teq	r1, r3
 80a5e42:	bf58      	it	pl
 80a5e44:	4299      	cmppl	r1, r3
 80a5e46:	bf08      	it	eq
 80a5e48:	4290      	cmpeq	r0, r2
 80a5e4a:	bf2c      	ite	cs
 80a5e4c:	17d8      	asrcs	r0, r3, #31
 80a5e4e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80a5e52:	f040 0001 	orr.w	r0, r0, #1
 80a5e56:	4770      	bx	lr
 80a5e58:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a5e5c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a5e60:	d102      	bne.n	80a5e68 <__cmpdf2+0x64>
 80a5e62:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a5e66:	d107      	bne.n	80a5e78 <__cmpdf2+0x74>
 80a5e68:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a5e6c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a5e70:	d1d6      	bne.n	80a5e20 <__cmpdf2+0x1c>
 80a5e72:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a5e76:	d0d3      	beq.n	80a5e20 <__cmpdf2+0x1c>
 80a5e78:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a5e7c:	4770      	bx	lr
 80a5e7e:	bf00      	nop

080a5e80 <__aeabi_cdrcmple>:
 80a5e80:	4684      	mov	ip, r0
 80a5e82:	4610      	mov	r0, r2
 80a5e84:	4662      	mov	r2, ip
 80a5e86:	468c      	mov	ip, r1
 80a5e88:	4619      	mov	r1, r3
 80a5e8a:	4663      	mov	r3, ip
 80a5e8c:	e000      	b.n	80a5e90 <__aeabi_cdcmpeq>
 80a5e8e:	bf00      	nop

080a5e90 <__aeabi_cdcmpeq>:
 80a5e90:	b501      	push	{r0, lr}
 80a5e92:	f7ff ffb7 	bl	80a5e04 <__cmpdf2>
 80a5e96:	2800      	cmp	r0, #0
 80a5e98:	bf48      	it	mi
 80a5e9a:	f110 0f00 	cmnmi.w	r0, #0
 80a5e9e:	bd01      	pop	{r0, pc}

080a5ea0 <__aeabi_dcmpeq>:
 80a5ea0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a5ea4:	f7ff fff4 	bl	80a5e90 <__aeabi_cdcmpeq>
 80a5ea8:	bf0c      	ite	eq
 80a5eaa:	2001      	moveq	r0, #1
 80a5eac:	2000      	movne	r0, #0
 80a5eae:	f85d fb08 	ldr.w	pc, [sp], #8
 80a5eb2:	bf00      	nop

080a5eb4 <__aeabi_dcmplt>:
 80a5eb4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a5eb8:	f7ff ffea 	bl	80a5e90 <__aeabi_cdcmpeq>
 80a5ebc:	bf34      	ite	cc
 80a5ebe:	2001      	movcc	r0, #1
 80a5ec0:	2000      	movcs	r0, #0
 80a5ec2:	f85d fb08 	ldr.w	pc, [sp], #8
 80a5ec6:	bf00      	nop

080a5ec8 <__aeabi_dcmple>:
 80a5ec8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a5ecc:	f7ff ffe0 	bl	80a5e90 <__aeabi_cdcmpeq>
 80a5ed0:	bf94      	ite	ls
 80a5ed2:	2001      	movls	r0, #1
 80a5ed4:	2000      	movhi	r0, #0
 80a5ed6:	f85d fb08 	ldr.w	pc, [sp], #8
 80a5eda:	bf00      	nop

080a5edc <__aeabi_dcmpge>:
 80a5edc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a5ee0:	f7ff ffce 	bl	80a5e80 <__aeabi_cdrcmple>
 80a5ee4:	bf94      	ite	ls
 80a5ee6:	2001      	movls	r0, #1
 80a5ee8:	2000      	movhi	r0, #0
 80a5eea:	f85d fb08 	ldr.w	pc, [sp], #8
 80a5eee:	bf00      	nop

080a5ef0 <__aeabi_dcmpgt>:
 80a5ef0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a5ef4:	f7ff ffc4 	bl	80a5e80 <__aeabi_cdrcmple>
 80a5ef8:	bf34      	ite	cc
 80a5efa:	2001      	movcc	r0, #1
 80a5efc:	2000      	movcs	r0, #0
 80a5efe:	f85d fb08 	ldr.w	pc, [sp], #8
 80a5f02:	bf00      	nop

080a5f04 <__aeabi_dcmpun>:
 80a5f04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a5f08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a5f0c:	d102      	bne.n	80a5f14 <__aeabi_dcmpun+0x10>
 80a5f0e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a5f12:	d10a      	bne.n	80a5f2a <__aeabi_dcmpun+0x26>
 80a5f14:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a5f18:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a5f1c:	d102      	bne.n	80a5f24 <__aeabi_dcmpun+0x20>
 80a5f1e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a5f22:	d102      	bne.n	80a5f2a <__aeabi_dcmpun+0x26>
 80a5f24:	f04f 0000 	mov.w	r0, #0
 80a5f28:	4770      	bx	lr
 80a5f2a:	f04f 0001 	mov.w	r0, #1
 80a5f2e:	4770      	bx	lr

080a5f30 <__aeabi_d2iz>:
 80a5f30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a5f34:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a5f38:	d215      	bcs.n	80a5f66 <__aeabi_d2iz+0x36>
 80a5f3a:	d511      	bpl.n	80a5f60 <__aeabi_d2iz+0x30>
 80a5f3c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a5f40:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a5f44:	d912      	bls.n	80a5f6c <__aeabi_d2iz+0x3c>
 80a5f46:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a5f4a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a5f4e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a5f52:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a5f56:	fa23 f002 	lsr.w	r0, r3, r2
 80a5f5a:	bf18      	it	ne
 80a5f5c:	4240      	negne	r0, r0
 80a5f5e:	4770      	bx	lr
 80a5f60:	f04f 0000 	mov.w	r0, #0
 80a5f64:	4770      	bx	lr
 80a5f66:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a5f6a:	d105      	bne.n	80a5f78 <__aeabi_d2iz+0x48>
 80a5f6c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80a5f70:	bf08      	it	eq
 80a5f72:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a5f76:	4770      	bx	lr
 80a5f78:	f04f 0000 	mov.w	r0, #0
 80a5f7c:	4770      	bx	lr
 80a5f7e:	bf00      	nop

080a5f80 <__aeabi_d2uiz>:
 80a5f80:	004a      	lsls	r2, r1, #1
 80a5f82:	d211      	bcs.n	80a5fa8 <__aeabi_d2uiz+0x28>
 80a5f84:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a5f88:	d211      	bcs.n	80a5fae <__aeabi_d2uiz+0x2e>
 80a5f8a:	d50d      	bpl.n	80a5fa8 <__aeabi_d2uiz+0x28>
 80a5f8c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a5f90:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a5f94:	d40e      	bmi.n	80a5fb4 <__aeabi_d2uiz+0x34>
 80a5f96:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a5f9a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a5f9e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a5fa2:	fa23 f002 	lsr.w	r0, r3, r2
 80a5fa6:	4770      	bx	lr
 80a5fa8:	f04f 0000 	mov.w	r0, #0
 80a5fac:	4770      	bx	lr
 80a5fae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a5fb2:	d102      	bne.n	80a5fba <__aeabi_d2uiz+0x3a>
 80a5fb4:	f04f 30ff 	mov.w	r0, #4294967295
 80a5fb8:	4770      	bx	lr
 80a5fba:	f04f 0000 	mov.w	r0, #0
 80a5fbe:	4770      	bx	lr

080a5fc0 <__aeabi_d2f>:
 80a5fc0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a5fc4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80a5fc8:	bf24      	itt	cs
 80a5fca:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80a5fce:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80a5fd2:	d90d      	bls.n	80a5ff0 <__aeabi_d2f+0x30>
 80a5fd4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a5fd8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80a5fdc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80a5fe0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80a5fe4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80a5fe8:	bf08      	it	eq
 80a5fea:	f020 0001 	biceq.w	r0, r0, #1
 80a5fee:	4770      	bx	lr
 80a5ff0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80a5ff4:	d121      	bne.n	80a603a <__aeabi_d2f+0x7a>
 80a5ff6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80a5ffa:	bfbc      	itt	lt
 80a5ffc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80a6000:	4770      	bxlt	lr
 80a6002:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a6006:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80a600a:	f1c2 0218 	rsb	r2, r2, #24
 80a600e:	f1c2 0c20 	rsb	ip, r2, #32
 80a6012:	fa10 f30c 	lsls.w	r3, r0, ip
 80a6016:	fa20 f002 	lsr.w	r0, r0, r2
 80a601a:	bf18      	it	ne
 80a601c:	f040 0001 	orrne.w	r0, r0, #1
 80a6020:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a6024:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80a6028:	fa03 fc0c 	lsl.w	ip, r3, ip
 80a602c:	ea40 000c 	orr.w	r0, r0, ip
 80a6030:	fa23 f302 	lsr.w	r3, r3, r2
 80a6034:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80a6038:	e7cc      	b.n	80a5fd4 <__aeabi_d2f+0x14>
 80a603a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80a603e:	d107      	bne.n	80a6050 <__aeabi_d2f+0x90>
 80a6040:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80a6044:	bf1e      	ittt	ne
 80a6046:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80a604a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80a604e:	4770      	bxne	lr
 80a6050:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80a6054:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a6058:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a605c:	4770      	bx	lr
 80a605e:	bf00      	nop

080a6060 <__aeabi_frsub>:
 80a6060:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80a6064:	e002      	b.n	80a606c <__addsf3>
 80a6066:	bf00      	nop

080a6068 <__aeabi_fsub>:
 80a6068:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080a606c <__addsf3>:
 80a606c:	0042      	lsls	r2, r0, #1
 80a606e:	bf1f      	itttt	ne
 80a6070:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80a6074:	ea92 0f03 	teqne	r2, r3
 80a6078:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80a607c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a6080:	d06a      	beq.n	80a6158 <__addsf3+0xec>
 80a6082:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80a6086:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80a608a:	bfc1      	itttt	gt
 80a608c:	18d2      	addgt	r2, r2, r3
 80a608e:	4041      	eorgt	r1, r0
 80a6090:	4048      	eorgt	r0, r1
 80a6092:	4041      	eorgt	r1, r0
 80a6094:	bfb8      	it	lt
 80a6096:	425b      	neglt	r3, r3
 80a6098:	2b19      	cmp	r3, #25
 80a609a:	bf88      	it	hi
 80a609c:	4770      	bxhi	lr
 80a609e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a60a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a60a6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80a60aa:	bf18      	it	ne
 80a60ac:	4240      	negne	r0, r0
 80a60ae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a60b2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80a60b6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80a60ba:	bf18      	it	ne
 80a60bc:	4249      	negne	r1, r1
 80a60be:	ea92 0f03 	teq	r2, r3
 80a60c2:	d03f      	beq.n	80a6144 <__addsf3+0xd8>
 80a60c4:	f1a2 0201 	sub.w	r2, r2, #1
 80a60c8:	fa41 fc03 	asr.w	ip, r1, r3
 80a60cc:	eb10 000c 	adds.w	r0, r0, ip
 80a60d0:	f1c3 0320 	rsb	r3, r3, #32
 80a60d4:	fa01 f103 	lsl.w	r1, r1, r3
 80a60d8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a60dc:	d502      	bpl.n	80a60e4 <__addsf3+0x78>
 80a60de:	4249      	negs	r1, r1
 80a60e0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80a60e4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a60e8:	d313      	bcc.n	80a6112 <__addsf3+0xa6>
 80a60ea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80a60ee:	d306      	bcc.n	80a60fe <__addsf3+0x92>
 80a60f0:	0840      	lsrs	r0, r0, #1
 80a60f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80a60f6:	f102 0201 	add.w	r2, r2, #1
 80a60fa:	2afe      	cmp	r2, #254	; 0xfe
 80a60fc:	d251      	bcs.n	80a61a2 <__addsf3+0x136>
 80a60fe:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80a6102:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a6106:	bf08      	it	eq
 80a6108:	f020 0001 	biceq.w	r0, r0, #1
 80a610c:	ea40 0003 	orr.w	r0, r0, r3
 80a6110:	4770      	bx	lr
 80a6112:	0049      	lsls	r1, r1, #1
 80a6114:	eb40 0000 	adc.w	r0, r0, r0
 80a6118:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80a611c:	f1a2 0201 	sub.w	r2, r2, #1
 80a6120:	d1ed      	bne.n	80a60fe <__addsf3+0x92>
 80a6122:	fab0 fc80 	clz	ip, r0
 80a6126:	f1ac 0c08 	sub.w	ip, ip, #8
 80a612a:	ebb2 020c 	subs.w	r2, r2, ip
 80a612e:	fa00 f00c 	lsl.w	r0, r0, ip
 80a6132:	bfaa      	itet	ge
 80a6134:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80a6138:	4252      	neglt	r2, r2
 80a613a:	4318      	orrge	r0, r3
 80a613c:	bfbc      	itt	lt
 80a613e:	40d0      	lsrlt	r0, r2
 80a6140:	4318      	orrlt	r0, r3
 80a6142:	4770      	bx	lr
 80a6144:	f092 0f00 	teq	r2, #0
 80a6148:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80a614c:	bf06      	itte	eq
 80a614e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80a6152:	3201      	addeq	r2, #1
 80a6154:	3b01      	subne	r3, #1
 80a6156:	e7b5      	b.n	80a60c4 <__addsf3+0x58>
 80a6158:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a615c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a6160:	bf18      	it	ne
 80a6162:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a6166:	d021      	beq.n	80a61ac <__addsf3+0x140>
 80a6168:	ea92 0f03 	teq	r2, r3
 80a616c:	d004      	beq.n	80a6178 <__addsf3+0x10c>
 80a616e:	f092 0f00 	teq	r2, #0
 80a6172:	bf08      	it	eq
 80a6174:	4608      	moveq	r0, r1
 80a6176:	4770      	bx	lr
 80a6178:	ea90 0f01 	teq	r0, r1
 80a617c:	bf1c      	itt	ne
 80a617e:	2000      	movne	r0, #0
 80a6180:	4770      	bxne	lr
 80a6182:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80a6186:	d104      	bne.n	80a6192 <__addsf3+0x126>
 80a6188:	0040      	lsls	r0, r0, #1
 80a618a:	bf28      	it	cs
 80a618c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80a6190:	4770      	bx	lr
 80a6192:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80a6196:	bf3c      	itt	cc
 80a6198:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80a619c:	4770      	bxcc	lr
 80a619e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a61a2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80a61a6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a61aa:	4770      	bx	lr
 80a61ac:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80a61b0:	bf16      	itet	ne
 80a61b2:	4608      	movne	r0, r1
 80a61b4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80a61b8:	4601      	movne	r1, r0
 80a61ba:	0242      	lsls	r2, r0, #9
 80a61bc:	bf06      	itte	eq
 80a61be:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80a61c2:	ea90 0f01 	teqeq	r0, r1
 80a61c6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80a61ca:	4770      	bx	lr

080a61cc <__aeabi_ui2f>:
 80a61cc:	f04f 0300 	mov.w	r3, #0
 80a61d0:	e004      	b.n	80a61dc <__aeabi_i2f+0x8>
 80a61d2:	bf00      	nop

080a61d4 <__aeabi_i2f>:
 80a61d4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80a61d8:	bf48      	it	mi
 80a61da:	4240      	negmi	r0, r0
 80a61dc:	ea5f 0c00 	movs.w	ip, r0
 80a61e0:	bf08      	it	eq
 80a61e2:	4770      	bxeq	lr
 80a61e4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80a61e8:	4601      	mov	r1, r0
 80a61ea:	f04f 0000 	mov.w	r0, #0
 80a61ee:	e01c      	b.n	80a622a <__aeabi_l2f+0x2a>

080a61f0 <__aeabi_ul2f>:
 80a61f0:	ea50 0201 	orrs.w	r2, r0, r1
 80a61f4:	bf08      	it	eq
 80a61f6:	4770      	bxeq	lr
 80a61f8:	f04f 0300 	mov.w	r3, #0
 80a61fc:	e00a      	b.n	80a6214 <__aeabi_l2f+0x14>
 80a61fe:	bf00      	nop

080a6200 <__aeabi_l2f>:
 80a6200:	ea50 0201 	orrs.w	r2, r0, r1
 80a6204:	bf08      	it	eq
 80a6206:	4770      	bxeq	lr
 80a6208:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80a620c:	d502      	bpl.n	80a6214 <__aeabi_l2f+0x14>
 80a620e:	4240      	negs	r0, r0
 80a6210:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a6214:	ea5f 0c01 	movs.w	ip, r1
 80a6218:	bf02      	ittt	eq
 80a621a:	4684      	moveq	ip, r0
 80a621c:	4601      	moveq	r1, r0
 80a621e:	2000      	moveq	r0, #0
 80a6220:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80a6224:	bf08      	it	eq
 80a6226:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80a622a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80a622e:	fabc f28c 	clz	r2, ip
 80a6232:	3a08      	subs	r2, #8
 80a6234:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80a6238:	db10      	blt.n	80a625c <__aeabi_l2f+0x5c>
 80a623a:	fa01 fc02 	lsl.w	ip, r1, r2
 80a623e:	4463      	add	r3, ip
 80a6240:	fa00 fc02 	lsl.w	ip, r0, r2
 80a6244:	f1c2 0220 	rsb	r2, r2, #32
 80a6248:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a624c:	fa20 f202 	lsr.w	r2, r0, r2
 80a6250:	eb43 0002 	adc.w	r0, r3, r2
 80a6254:	bf08      	it	eq
 80a6256:	f020 0001 	biceq.w	r0, r0, #1
 80a625a:	4770      	bx	lr
 80a625c:	f102 0220 	add.w	r2, r2, #32
 80a6260:	fa01 fc02 	lsl.w	ip, r1, r2
 80a6264:	f1c2 0220 	rsb	r2, r2, #32
 80a6268:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80a626c:	fa21 f202 	lsr.w	r2, r1, r2
 80a6270:	eb43 0002 	adc.w	r0, r3, r2
 80a6274:	bf08      	it	eq
 80a6276:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a627a:	4770      	bx	lr

080a627c <__aeabi_fmul>:
 80a627c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a6280:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a6284:	bf1e      	ittt	ne
 80a6286:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a628a:	ea92 0f0c 	teqne	r2, ip
 80a628e:	ea93 0f0c 	teqne	r3, ip
 80a6292:	d06f      	beq.n	80a6374 <__aeabi_fmul+0xf8>
 80a6294:	441a      	add	r2, r3
 80a6296:	ea80 0c01 	eor.w	ip, r0, r1
 80a629a:	0240      	lsls	r0, r0, #9
 80a629c:	bf18      	it	ne
 80a629e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80a62a2:	d01e      	beq.n	80a62e2 <__aeabi_fmul+0x66>
 80a62a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80a62a8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80a62ac:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80a62b0:	fba0 3101 	umull	r3, r1, r0, r1
 80a62b4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a62b8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80a62bc:	bf3e      	ittt	cc
 80a62be:	0049      	lslcc	r1, r1, #1
 80a62c0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80a62c4:	005b      	lslcc	r3, r3, #1
 80a62c6:	ea40 0001 	orr.w	r0, r0, r1
 80a62ca:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80a62ce:	2afd      	cmp	r2, #253	; 0xfd
 80a62d0:	d81d      	bhi.n	80a630e <__aeabi_fmul+0x92>
 80a62d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a62d6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a62da:	bf08      	it	eq
 80a62dc:	f020 0001 	biceq.w	r0, r0, #1
 80a62e0:	4770      	bx	lr
 80a62e2:	f090 0f00 	teq	r0, #0
 80a62e6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a62ea:	bf08      	it	eq
 80a62ec:	0249      	lsleq	r1, r1, #9
 80a62ee:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a62f2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80a62f6:	3a7f      	subs	r2, #127	; 0x7f
 80a62f8:	bfc2      	ittt	gt
 80a62fa:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a62fe:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a6302:	4770      	bxgt	lr
 80a6304:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a6308:	f04f 0300 	mov.w	r3, #0
 80a630c:	3a01      	subs	r2, #1
 80a630e:	dc5d      	bgt.n	80a63cc <__aeabi_fmul+0x150>
 80a6310:	f112 0f19 	cmn.w	r2, #25
 80a6314:	bfdc      	itt	le
 80a6316:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80a631a:	4770      	bxle	lr
 80a631c:	f1c2 0200 	rsb	r2, r2, #0
 80a6320:	0041      	lsls	r1, r0, #1
 80a6322:	fa21 f102 	lsr.w	r1, r1, r2
 80a6326:	f1c2 0220 	rsb	r2, r2, #32
 80a632a:	fa00 fc02 	lsl.w	ip, r0, r2
 80a632e:	ea5f 0031 	movs.w	r0, r1, rrx
 80a6332:	f140 0000 	adc.w	r0, r0, #0
 80a6336:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80a633a:	bf08      	it	eq
 80a633c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a6340:	4770      	bx	lr
 80a6342:	f092 0f00 	teq	r2, #0
 80a6346:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a634a:	bf02      	ittt	eq
 80a634c:	0040      	lsleq	r0, r0, #1
 80a634e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a6352:	3a01      	subeq	r2, #1
 80a6354:	d0f9      	beq.n	80a634a <__aeabi_fmul+0xce>
 80a6356:	ea40 000c 	orr.w	r0, r0, ip
 80a635a:	f093 0f00 	teq	r3, #0
 80a635e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a6362:	bf02      	ittt	eq
 80a6364:	0049      	lsleq	r1, r1, #1
 80a6366:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a636a:	3b01      	subeq	r3, #1
 80a636c:	d0f9      	beq.n	80a6362 <__aeabi_fmul+0xe6>
 80a636e:	ea41 010c 	orr.w	r1, r1, ip
 80a6372:	e78f      	b.n	80a6294 <__aeabi_fmul+0x18>
 80a6374:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a6378:	ea92 0f0c 	teq	r2, ip
 80a637c:	bf18      	it	ne
 80a637e:	ea93 0f0c 	teqne	r3, ip
 80a6382:	d00a      	beq.n	80a639a <__aeabi_fmul+0x11e>
 80a6384:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a6388:	bf18      	it	ne
 80a638a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a638e:	d1d8      	bne.n	80a6342 <__aeabi_fmul+0xc6>
 80a6390:	ea80 0001 	eor.w	r0, r0, r1
 80a6394:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a6398:	4770      	bx	lr
 80a639a:	f090 0f00 	teq	r0, #0
 80a639e:	bf17      	itett	ne
 80a63a0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80a63a4:	4608      	moveq	r0, r1
 80a63a6:	f091 0f00 	teqne	r1, #0
 80a63aa:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80a63ae:	d014      	beq.n	80a63da <__aeabi_fmul+0x15e>
 80a63b0:	ea92 0f0c 	teq	r2, ip
 80a63b4:	d101      	bne.n	80a63ba <__aeabi_fmul+0x13e>
 80a63b6:	0242      	lsls	r2, r0, #9
 80a63b8:	d10f      	bne.n	80a63da <__aeabi_fmul+0x15e>
 80a63ba:	ea93 0f0c 	teq	r3, ip
 80a63be:	d103      	bne.n	80a63c8 <__aeabi_fmul+0x14c>
 80a63c0:	024b      	lsls	r3, r1, #9
 80a63c2:	bf18      	it	ne
 80a63c4:	4608      	movne	r0, r1
 80a63c6:	d108      	bne.n	80a63da <__aeabi_fmul+0x15e>
 80a63c8:	ea80 0001 	eor.w	r0, r0, r1
 80a63cc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a63d0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a63d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a63d8:	4770      	bx	lr
 80a63da:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a63de:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80a63e2:	4770      	bx	lr

080a63e4 <__aeabi_fdiv>:
 80a63e4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a63e8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a63ec:	bf1e      	ittt	ne
 80a63ee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a63f2:	ea92 0f0c 	teqne	r2, ip
 80a63f6:	ea93 0f0c 	teqne	r3, ip
 80a63fa:	d069      	beq.n	80a64d0 <__aeabi_fdiv+0xec>
 80a63fc:	eba2 0203 	sub.w	r2, r2, r3
 80a6400:	ea80 0c01 	eor.w	ip, r0, r1
 80a6404:	0249      	lsls	r1, r1, #9
 80a6406:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80a640a:	d037      	beq.n	80a647c <__aeabi_fdiv+0x98>
 80a640c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80a6410:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80a6414:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80a6418:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a641c:	428b      	cmp	r3, r1
 80a641e:	bf38      	it	cc
 80a6420:	005b      	lslcc	r3, r3, #1
 80a6422:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80a6426:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80a642a:	428b      	cmp	r3, r1
 80a642c:	bf24      	itt	cs
 80a642e:	1a5b      	subcs	r3, r3, r1
 80a6430:	ea40 000c 	orrcs.w	r0, r0, ip
 80a6434:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80a6438:	bf24      	itt	cs
 80a643a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80a643e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a6442:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80a6446:	bf24      	itt	cs
 80a6448:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80a644c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a6450:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80a6454:	bf24      	itt	cs
 80a6456:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80a645a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a645e:	011b      	lsls	r3, r3, #4
 80a6460:	bf18      	it	ne
 80a6462:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80a6466:	d1e0      	bne.n	80a642a <__aeabi_fdiv+0x46>
 80a6468:	2afd      	cmp	r2, #253	; 0xfd
 80a646a:	f63f af50 	bhi.w	80a630e <__aeabi_fmul+0x92>
 80a646e:	428b      	cmp	r3, r1
 80a6470:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a6474:	bf08      	it	eq
 80a6476:	f020 0001 	biceq.w	r0, r0, #1
 80a647a:	4770      	bx	lr
 80a647c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a6480:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a6484:	327f      	adds	r2, #127	; 0x7f
 80a6486:	bfc2      	ittt	gt
 80a6488:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a648c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a6490:	4770      	bxgt	lr
 80a6492:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a6496:	f04f 0300 	mov.w	r3, #0
 80a649a:	3a01      	subs	r2, #1
 80a649c:	e737      	b.n	80a630e <__aeabi_fmul+0x92>
 80a649e:	f092 0f00 	teq	r2, #0
 80a64a2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a64a6:	bf02      	ittt	eq
 80a64a8:	0040      	lsleq	r0, r0, #1
 80a64aa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a64ae:	3a01      	subeq	r2, #1
 80a64b0:	d0f9      	beq.n	80a64a6 <__aeabi_fdiv+0xc2>
 80a64b2:	ea40 000c 	orr.w	r0, r0, ip
 80a64b6:	f093 0f00 	teq	r3, #0
 80a64ba:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a64be:	bf02      	ittt	eq
 80a64c0:	0049      	lsleq	r1, r1, #1
 80a64c2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a64c6:	3b01      	subeq	r3, #1
 80a64c8:	d0f9      	beq.n	80a64be <__aeabi_fdiv+0xda>
 80a64ca:	ea41 010c 	orr.w	r1, r1, ip
 80a64ce:	e795      	b.n	80a63fc <__aeabi_fdiv+0x18>
 80a64d0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a64d4:	ea92 0f0c 	teq	r2, ip
 80a64d8:	d108      	bne.n	80a64ec <__aeabi_fdiv+0x108>
 80a64da:	0242      	lsls	r2, r0, #9
 80a64dc:	f47f af7d 	bne.w	80a63da <__aeabi_fmul+0x15e>
 80a64e0:	ea93 0f0c 	teq	r3, ip
 80a64e4:	f47f af70 	bne.w	80a63c8 <__aeabi_fmul+0x14c>
 80a64e8:	4608      	mov	r0, r1
 80a64ea:	e776      	b.n	80a63da <__aeabi_fmul+0x15e>
 80a64ec:	ea93 0f0c 	teq	r3, ip
 80a64f0:	d104      	bne.n	80a64fc <__aeabi_fdiv+0x118>
 80a64f2:	024b      	lsls	r3, r1, #9
 80a64f4:	f43f af4c 	beq.w	80a6390 <__aeabi_fmul+0x114>
 80a64f8:	4608      	mov	r0, r1
 80a64fa:	e76e      	b.n	80a63da <__aeabi_fmul+0x15e>
 80a64fc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a6500:	bf18      	it	ne
 80a6502:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a6506:	d1ca      	bne.n	80a649e <__aeabi_fdiv+0xba>
 80a6508:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80a650c:	f47f af5c 	bne.w	80a63c8 <__aeabi_fmul+0x14c>
 80a6510:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80a6514:	f47f af3c 	bne.w	80a6390 <__aeabi_fmul+0x114>
 80a6518:	e75f      	b.n	80a63da <__aeabi_fmul+0x15e>
 80a651a:	bf00      	nop

080a651c <__gesf2>:
 80a651c:	f04f 3cff 	mov.w	ip, #4294967295
 80a6520:	e006      	b.n	80a6530 <__cmpsf2+0x4>
 80a6522:	bf00      	nop

080a6524 <__lesf2>:
 80a6524:	f04f 0c01 	mov.w	ip, #1
 80a6528:	e002      	b.n	80a6530 <__cmpsf2+0x4>
 80a652a:	bf00      	nop

080a652c <__cmpsf2>:
 80a652c:	f04f 0c01 	mov.w	ip, #1
 80a6530:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a6534:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a6538:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a653c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a6540:	bf18      	it	ne
 80a6542:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a6546:	d011      	beq.n	80a656c <__cmpsf2+0x40>
 80a6548:	b001      	add	sp, #4
 80a654a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80a654e:	bf18      	it	ne
 80a6550:	ea90 0f01 	teqne	r0, r1
 80a6554:	bf58      	it	pl
 80a6556:	ebb2 0003 	subspl.w	r0, r2, r3
 80a655a:	bf88      	it	hi
 80a655c:	17c8      	asrhi	r0, r1, #31
 80a655e:	bf38      	it	cc
 80a6560:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80a6564:	bf18      	it	ne
 80a6566:	f040 0001 	orrne.w	r0, r0, #1
 80a656a:	4770      	bx	lr
 80a656c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a6570:	d102      	bne.n	80a6578 <__cmpsf2+0x4c>
 80a6572:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80a6576:	d105      	bne.n	80a6584 <__cmpsf2+0x58>
 80a6578:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80a657c:	d1e4      	bne.n	80a6548 <__cmpsf2+0x1c>
 80a657e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80a6582:	d0e1      	beq.n	80a6548 <__cmpsf2+0x1c>
 80a6584:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a6588:	4770      	bx	lr
 80a658a:	bf00      	nop

080a658c <__aeabi_cfrcmple>:
 80a658c:	4684      	mov	ip, r0
 80a658e:	4608      	mov	r0, r1
 80a6590:	4661      	mov	r1, ip
 80a6592:	e7ff      	b.n	80a6594 <__aeabi_cfcmpeq>

080a6594 <__aeabi_cfcmpeq>:
 80a6594:	b50f      	push	{r0, r1, r2, r3, lr}
 80a6596:	f7ff ffc9 	bl	80a652c <__cmpsf2>
 80a659a:	2800      	cmp	r0, #0
 80a659c:	bf48      	it	mi
 80a659e:	f110 0f00 	cmnmi.w	r0, #0
 80a65a2:	bd0f      	pop	{r0, r1, r2, r3, pc}

080a65a4 <__aeabi_fcmpeq>:
 80a65a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a65a8:	f7ff fff4 	bl	80a6594 <__aeabi_cfcmpeq>
 80a65ac:	bf0c      	ite	eq
 80a65ae:	2001      	moveq	r0, #1
 80a65b0:	2000      	movne	r0, #0
 80a65b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80a65b6:	bf00      	nop

080a65b8 <__aeabi_fcmplt>:
 80a65b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a65bc:	f7ff ffea 	bl	80a6594 <__aeabi_cfcmpeq>
 80a65c0:	bf34      	ite	cc
 80a65c2:	2001      	movcc	r0, #1
 80a65c4:	2000      	movcs	r0, #0
 80a65c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80a65ca:	bf00      	nop

080a65cc <__aeabi_fcmple>:
 80a65cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a65d0:	f7ff ffe0 	bl	80a6594 <__aeabi_cfcmpeq>
 80a65d4:	bf94      	ite	ls
 80a65d6:	2001      	movls	r0, #1
 80a65d8:	2000      	movhi	r0, #0
 80a65da:	f85d fb08 	ldr.w	pc, [sp], #8
 80a65de:	bf00      	nop

080a65e0 <__aeabi_fcmpge>:
 80a65e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a65e4:	f7ff ffd2 	bl	80a658c <__aeabi_cfrcmple>
 80a65e8:	bf94      	ite	ls
 80a65ea:	2001      	movls	r0, #1
 80a65ec:	2000      	movhi	r0, #0
 80a65ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80a65f2:	bf00      	nop

080a65f4 <__aeabi_fcmpgt>:
 80a65f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a65f8:	f7ff ffc8 	bl	80a658c <__aeabi_cfrcmple>
 80a65fc:	bf34      	ite	cc
 80a65fe:	2001      	movcc	r0, #1
 80a6600:	2000      	movcs	r0, #0
 80a6602:	f85d fb08 	ldr.w	pc, [sp], #8
 80a6606:	bf00      	nop

080a6608 <__aeabi_f2iz>:
 80a6608:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a660c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80a6610:	d30f      	bcc.n	80a6632 <__aeabi_f2iz+0x2a>
 80a6612:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80a6616:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80a661a:	d90d      	bls.n	80a6638 <__aeabi_f2iz+0x30>
 80a661c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80a6620:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a6624:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a6628:	fa23 f002 	lsr.w	r0, r3, r2
 80a662c:	bf18      	it	ne
 80a662e:	4240      	negne	r0, r0
 80a6630:	4770      	bx	lr
 80a6632:	f04f 0000 	mov.w	r0, #0
 80a6636:	4770      	bx	lr
 80a6638:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80a663c:	d101      	bne.n	80a6642 <__aeabi_f2iz+0x3a>
 80a663e:	0242      	lsls	r2, r0, #9
 80a6640:	d105      	bne.n	80a664e <__aeabi_f2iz+0x46>
 80a6642:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80a6646:	bf08      	it	eq
 80a6648:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a664c:	4770      	bx	lr
 80a664e:	f04f 0000 	mov.w	r0, #0
 80a6652:	4770      	bx	lr

080a6654 <__aeabi_uldivmod>:
 80a6654:	b953      	cbnz	r3, 80a666c <__aeabi_uldivmod+0x18>
 80a6656:	b94a      	cbnz	r2, 80a666c <__aeabi_uldivmod+0x18>
 80a6658:	2900      	cmp	r1, #0
 80a665a:	bf08      	it	eq
 80a665c:	2800      	cmpeq	r0, #0
 80a665e:	bf1c      	itt	ne
 80a6660:	f04f 31ff 	movne.w	r1, #4294967295
 80a6664:	f04f 30ff 	movne.w	r0, #4294967295
 80a6668:	f000 b9a6 	b.w	80a69b8 <__aeabi_idiv0>
 80a666c:	f1ad 0c08 	sub.w	ip, sp, #8
 80a6670:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80a6674:	f000 f82a 	bl	80a66cc <__udivmoddi4>
 80a6678:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a667c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a6680:	b004      	add	sp, #16
 80a6682:	4770      	bx	lr

080a6684 <__aeabi_d2ulz>:
 80a6684:	b5d0      	push	{r4, r6, r7, lr}
 80a6686:	2200      	movs	r2, #0
 80a6688:	4b0e      	ldr	r3, [pc, #56]	; (80a66c4 <__aeabi_d2ulz+0x40>)
 80a668a:	4606      	mov	r6, r0
 80a668c:	460f      	mov	r7, r1
 80a668e:	f7ff f99f 	bl	80a59d0 <__aeabi_dmul>
 80a6692:	f7ff fc75 	bl	80a5f80 <__aeabi_d2uiz>
 80a6696:	4604      	mov	r4, r0
 80a6698:	f7ff f924 	bl	80a58e4 <__aeabi_ui2d>
 80a669c:	2200      	movs	r2, #0
 80a669e:	4b0a      	ldr	r3, [pc, #40]	; (80a66c8 <__aeabi_d2ulz+0x44>)
 80a66a0:	f7ff f996 	bl	80a59d0 <__aeabi_dmul>
 80a66a4:	4602      	mov	r2, r0
 80a66a6:	460b      	mov	r3, r1
 80a66a8:	4630      	mov	r0, r6
 80a66aa:	4639      	mov	r1, r7
 80a66ac:	f7fe ffdc 	bl	80a5668 <__aeabi_dsub>
 80a66b0:	f7ff fc66 	bl	80a5f80 <__aeabi_d2uiz>
 80a66b4:	4623      	mov	r3, r4
 80a66b6:	2200      	movs	r2, #0
 80a66b8:	ea42 0200 	orr.w	r2, r2, r0
 80a66bc:	4610      	mov	r0, r2
 80a66be:	4619      	mov	r1, r3
 80a66c0:	bdd0      	pop	{r4, r6, r7, pc}
 80a66c2:	bf00      	nop
 80a66c4:	3df00000 	.word	0x3df00000
 80a66c8:	41f00000 	.word	0x41f00000

080a66cc <__udivmoddi4>:
 80a66cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a66d0:	468c      	mov	ip, r1
 80a66d2:	460c      	mov	r4, r1
 80a66d4:	4605      	mov	r5, r0
 80a66d6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80a66d8:	2b00      	cmp	r3, #0
 80a66da:	d14f      	bne.n	80a677c <__udivmoddi4+0xb0>
 80a66dc:	428a      	cmp	r2, r1
 80a66de:	4617      	mov	r7, r2
 80a66e0:	d96b      	bls.n	80a67ba <__udivmoddi4+0xee>
 80a66e2:	fab2 fe82 	clz	lr, r2
 80a66e6:	f1be 0f00 	cmp.w	lr, #0
 80a66ea:	d00b      	beq.n	80a6704 <__udivmoddi4+0x38>
 80a66ec:	f1ce 0520 	rsb	r5, lr, #32
 80a66f0:	fa20 f505 	lsr.w	r5, r0, r5
 80a66f4:	fa01 f30e 	lsl.w	r3, r1, lr
 80a66f8:	ea45 0c03 	orr.w	ip, r5, r3
 80a66fc:	fa02 f70e 	lsl.w	r7, r2, lr
 80a6700:	fa00 f50e 	lsl.w	r5, r0, lr
 80a6704:	0c39      	lsrs	r1, r7, #16
 80a6706:	fbbc f0f1 	udiv	r0, ip, r1
 80a670a:	b2ba      	uxth	r2, r7
 80a670c:	fb01 c310 	mls	r3, r1, r0, ip
 80a6710:	fb00 f802 	mul.w	r8, r0, r2
 80a6714:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 80a6718:	ea4c 4403 	orr.w	r4, ip, r3, lsl #16
 80a671c:	45a0      	cmp	r8, r4
 80a671e:	d909      	bls.n	80a6734 <__udivmoddi4+0x68>
 80a6720:	19e4      	adds	r4, r4, r7
 80a6722:	f100 33ff 	add.w	r3, r0, #4294967295
 80a6726:	f080 8128 	bcs.w	80a697a <__udivmoddi4+0x2ae>
 80a672a:	45a0      	cmp	r8, r4
 80a672c:	f240 8125 	bls.w	80a697a <__udivmoddi4+0x2ae>
 80a6730:	3802      	subs	r0, #2
 80a6732:	443c      	add	r4, r7
 80a6734:	ebc8 0404 	rsb	r4, r8, r4
 80a6738:	fbb4 f3f1 	udiv	r3, r4, r1
 80a673c:	fb01 4c13 	mls	ip, r1, r3, r4
 80a6740:	fb03 f202 	mul.w	r2, r3, r2
 80a6744:	b2ac      	uxth	r4, r5
 80a6746:	ea44 410c 	orr.w	r1, r4, ip, lsl #16
 80a674a:	428a      	cmp	r2, r1
 80a674c:	d909      	bls.n	80a6762 <__udivmoddi4+0x96>
 80a674e:	19c9      	adds	r1, r1, r7
 80a6750:	f103 34ff 	add.w	r4, r3, #4294967295
 80a6754:	f080 810f 	bcs.w	80a6976 <__udivmoddi4+0x2aa>
 80a6758:	428a      	cmp	r2, r1
 80a675a:	f240 810c 	bls.w	80a6976 <__udivmoddi4+0x2aa>
 80a675e:	3b02      	subs	r3, #2
 80a6760:	4439      	add	r1, r7
 80a6762:	1a8a      	subs	r2, r1, r2
 80a6764:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80a6768:	2100      	movs	r1, #0
 80a676a:	2e00      	cmp	r6, #0
 80a676c:	d063      	beq.n	80a6836 <__udivmoddi4+0x16a>
 80a676e:	fa22 f20e 	lsr.w	r2, r2, lr
 80a6772:	2300      	movs	r3, #0
 80a6774:	e886 000c 	stmia.w	r6, {r2, r3}
 80a6778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a677c:	428b      	cmp	r3, r1
 80a677e:	d907      	bls.n	80a6790 <__udivmoddi4+0xc4>
 80a6780:	2e00      	cmp	r6, #0
 80a6782:	d056      	beq.n	80a6832 <__udivmoddi4+0x166>
 80a6784:	2100      	movs	r1, #0
 80a6786:	e886 0011 	stmia.w	r6, {r0, r4}
 80a678a:	4608      	mov	r0, r1
 80a678c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a6790:	fab3 f183 	clz	r1, r3
 80a6794:	2900      	cmp	r1, #0
 80a6796:	f040 8093 	bne.w	80a68c0 <__udivmoddi4+0x1f4>
 80a679a:	42a3      	cmp	r3, r4
 80a679c:	d302      	bcc.n	80a67a4 <__udivmoddi4+0xd8>
 80a679e:	4282      	cmp	r2, r0
 80a67a0:	f200 80fe 	bhi.w	80a69a0 <__udivmoddi4+0x2d4>
 80a67a4:	1a85      	subs	r5, r0, r2
 80a67a6:	eb64 0303 	sbc.w	r3, r4, r3
 80a67aa:	469c      	mov	ip, r3
 80a67ac:	2001      	movs	r0, #1
 80a67ae:	2e00      	cmp	r6, #0
 80a67b0:	d041      	beq.n	80a6836 <__udivmoddi4+0x16a>
 80a67b2:	e886 1020 	stmia.w	r6, {r5, ip}
 80a67b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a67ba:	b912      	cbnz	r2, 80a67c2 <__udivmoddi4+0xf6>
 80a67bc:	2701      	movs	r7, #1
 80a67be:	fbb7 f7f2 	udiv	r7, r7, r2
 80a67c2:	fab7 fe87 	clz	lr, r7
 80a67c6:	f1be 0f00 	cmp.w	lr, #0
 80a67ca:	d136      	bne.n	80a683a <__udivmoddi4+0x16e>
 80a67cc:	1be4      	subs	r4, r4, r7
 80a67ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80a67d2:	fa1f f987 	uxth.w	r9, r7
 80a67d6:	2101      	movs	r1, #1
 80a67d8:	fbb4 f3f8 	udiv	r3, r4, r8
 80a67dc:	fb08 4413 	mls	r4, r8, r3, r4
 80a67e0:	fb09 f203 	mul.w	r2, r9, r3
 80a67e4:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 80a67e8:	ea4c 4404 	orr.w	r4, ip, r4, lsl #16
 80a67ec:	42a2      	cmp	r2, r4
 80a67ee:	d907      	bls.n	80a6800 <__udivmoddi4+0x134>
 80a67f0:	19e4      	adds	r4, r4, r7
 80a67f2:	f103 30ff 	add.w	r0, r3, #4294967295
 80a67f6:	d202      	bcs.n	80a67fe <__udivmoddi4+0x132>
 80a67f8:	42a2      	cmp	r2, r4
 80a67fa:	f200 80d3 	bhi.w	80a69a4 <__udivmoddi4+0x2d8>
 80a67fe:	4603      	mov	r3, r0
 80a6800:	1aa4      	subs	r4, r4, r2
 80a6802:	fbb4 f0f8 	udiv	r0, r4, r8
 80a6806:	fb08 4810 	mls	r8, r8, r0, r4
 80a680a:	fb09 f900 	mul.w	r9, r9, r0
 80a680e:	b2ac      	uxth	r4, r5
 80a6810:	ea44 4208 	orr.w	r2, r4, r8, lsl #16
 80a6814:	4591      	cmp	r9, r2
 80a6816:	d907      	bls.n	80a6828 <__udivmoddi4+0x15c>
 80a6818:	19d2      	adds	r2, r2, r7
 80a681a:	f100 34ff 	add.w	r4, r0, #4294967295
 80a681e:	d202      	bcs.n	80a6826 <__udivmoddi4+0x15a>
 80a6820:	4591      	cmp	r9, r2
 80a6822:	f200 80ba 	bhi.w	80a699a <__udivmoddi4+0x2ce>
 80a6826:	4620      	mov	r0, r4
 80a6828:	ebc9 0202 	rsb	r2, r9, r2
 80a682c:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80a6830:	e79b      	b.n	80a676a <__udivmoddi4+0x9e>
 80a6832:	4631      	mov	r1, r6
 80a6834:	4630      	mov	r0, r6
 80a6836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a683a:	fa07 f70e 	lsl.w	r7, r7, lr
 80a683e:	f1ce 0c20 	rsb	ip, lr, #32
 80a6842:	fa24 f30c 	lsr.w	r3, r4, ip
 80a6846:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80a684a:	fbb3 faf8 	udiv	sl, r3, r8
 80a684e:	fa1f f987 	uxth.w	r9, r7
 80a6852:	fb08 351a 	mls	r5, r8, sl, r3
 80a6856:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a685a:	fa04 f40e 	lsl.w	r4, r4, lr
 80a685e:	fb0a fb09 	mul.w	fp, sl, r9
 80a6862:	ea4c 0c04 	orr.w	ip, ip, r4
 80a6866:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80a686a:	ea42 4305 	orr.w	r3, r2, r5, lsl #16
 80a686e:	459b      	cmp	fp, r3
 80a6870:	fa00 f50e 	lsl.w	r5, r0, lr
 80a6874:	d90a      	bls.n	80a688c <__udivmoddi4+0x1c0>
 80a6876:	19db      	adds	r3, r3, r7
 80a6878:	f10a 32ff 	add.w	r2, sl, #4294967295
 80a687c:	f080 808b 	bcs.w	80a6996 <__udivmoddi4+0x2ca>
 80a6880:	459b      	cmp	fp, r3
 80a6882:	f240 8088 	bls.w	80a6996 <__udivmoddi4+0x2ca>
 80a6886:	f1aa 0a02 	sub.w	sl, sl, #2
 80a688a:	443b      	add	r3, r7
 80a688c:	ebcb 0303 	rsb	r3, fp, r3
 80a6890:	fbb3 f0f8 	udiv	r0, r3, r8
 80a6894:	fb08 3310 	mls	r3, r8, r0, r3
 80a6898:	fb00 f409 	mul.w	r4, r0, r9
 80a689c:	fa1f fc8c 	uxth.w	ip, ip
 80a68a0:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
 80a68a4:	429c      	cmp	r4, r3
 80a68a6:	d907      	bls.n	80a68b8 <__udivmoddi4+0x1ec>
 80a68a8:	19db      	adds	r3, r3, r7
 80a68aa:	f100 32ff 	add.w	r2, r0, #4294967295
 80a68ae:	d26e      	bcs.n	80a698e <__udivmoddi4+0x2c2>
 80a68b0:	429c      	cmp	r4, r3
 80a68b2:	d96c      	bls.n	80a698e <__udivmoddi4+0x2c2>
 80a68b4:	3802      	subs	r0, #2
 80a68b6:	443b      	add	r3, r7
 80a68b8:	1b1c      	subs	r4, r3, r4
 80a68ba:	ea40 410a 	orr.w	r1, r0, sl, lsl #16
 80a68be:	e78b      	b.n	80a67d8 <__udivmoddi4+0x10c>
 80a68c0:	f1c1 0e20 	rsb	lr, r1, #32
 80a68c4:	408b      	lsls	r3, r1
 80a68c6:	fa22 fc0e 	lsr.w	ip, r2, lr
 80a68ca:	ea4c 0c03 	orr.w	ip, ip, r3
 80a68ce:	fa24 f70e 	lsr.w	r7, r4, lr
 80a68d2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80a68d6:	fbb7 faf9 	udiv	sl, r7, r9
 80a68da:	fa1f f38c 	uxth.w	r3, ip
 80a68de:	fb09 771a 	mls	r7, r9, sl, r7
 80a68e2:	fa20 f80e 	lsr.w	r8, r0, lr
 80a68e6:	408c      	lsls	r4, r1
 80a68e8:	fb0a f503 	mul.w	r5, sl, r3
 80a68ec:	ea48 0404 	orr.w	r4, r8, r4
 80a68f0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80a68f4:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
 80a68f8:	42bd      	cmp	r5, r7
 80a68fa:	fa02 f201 	lsl.w	r2, r2, r1
 80a68fe:	fa00 fb01 	lsl.w	fp, r0, r1
 80a6902:	d909      	bls.n	80a6918 <__udivmoddi4+0x24c>
 80a6904:	eb17 070c 	adds.w	r7, r7, ip
 80a6908:	f10a 30ff 	add.w	r0, sl, #4294967295
 80a690c:	d241      	bcs.n	80a6992 <__udivmoddi4+0x2c6>
 80a690e:	42bd      	cmp	r5, r7
 80a6910:	d93f      	bls.n	80a6992 <__udivmoddi4+0x2c6>
 80a6912:	f1aa 0a02 	sub.w	sl, sl, #2
 80a6916:	4467      	add	r7, ip
 80a6918:	1b7f      	subs	r7, r7, r5
 80a691a:	fbb7 f5f9 	udiv	r5, r7, r9
 80a691e:	fb09 7715 	mls	r7, r9, r5, r7
 80a6922:	fb05 f303 	mul.w	r3, r5, r3
 80a6926:	b2a4      	uxth	r4, r4
 80a6928:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 80a692c:	42bb      	cmp	r3, r7
 80a692e:	d908      	bls.n	80a6942 <__udivmoddi4+0x276>
 80a6930:	eb17 070c 	adds.w	r7, r7, ip
 80a6934:	f105 30ff 	add.w	r0, r5, #4294967295
 80a6938:	d227      	bcs.n	80a698a <__udivmoddi4+0x2be>
 80a693a:	42bb      	cmp	r3, r7
 80a693c:	d925      	bls.n	80a698a <__udivmoddi4+0x2be>
 80a693e:	3d02      	subs	r5, #2
 80a6940:	4467      	add	r7, ip
 80a6942:	ea45 400a 	orr.w	r0, r5, sl, lsl #16
 80a6946:	fba0 8902 	umull	r8, r9, r0, r2
 80a694a:	1aff      	subs	r7, r7, r3
 80a694c:	454f      	cmp	r7, r9
 80a694e:	4645      	mov	r5, r8
 80a6950:	464c      	mov	r4, r9
 80a6952:	d314      	bcc.n	80a697e <__udivmoddi4+0x2b2>
 80a6954:	d029      	beq.n	80a69aa <__udivmoddi4+0x2de>
 80a6956:	b366      	cbz	r6, 80a69b2 <__udivmoddi4+0x2e6>
 80a6958:	ebbb 0305 	subs.w	r3, fp, r5
 80a695c:	eb67 0704 	sbc.w	r7, r7, r4
 80a6960:	fa07 fe0e 	lsl.w	lr, r7, lr
 80a6964:	40cb      	lsrs	r3, r1
 80a6966:	40cf      	lsrs	r7, r1
 80a6968:	ea4e 0303 	orr.w	r3, lr, r3
 80a696c:	e886 0088 	stmia.w	r6, {r3, r7}
 80a6970:	2100      	movs	r1, #0
 80a6972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a6976:	4623      	mov	r3, r4
 80a6978:	e6f3      	b.n	80a6762 <__udivmoddi4+0x96>
 80a697a:	4618      	mov	r0, r3
 80a697c:	e6da      	b.n	80a6734 <__udivmoddi4+0x68>
 80a697e:	ebb8 0502 	subs.w	r5, r8, r2
 80a6982:	eb69 040c 	sbc.w	r4, r9, ip
 80a6986:	3801      	subs	r0, #1
 80a6988:	e7e5      	b.n	80a6956 <__udivmoddi4+0x28a>
 80a698a:	4605      	mov	r5, r0
 80a698c:	e7d9      	b.n	80a6942 <__udivmoddi4+0x276>
 80a698e:	4610      	mov	r0, r2
 80a6990:	e792      	b.n	80a68b8 <__udivmoddi4+0x1ec>
 80a6992:	4682      	mov	sl, r0
 80a6994:	e7c0      	b.n	80a6918 <__udivmoddi4+0x24c>
 80a6996:	4692      	mov	sl, r2
 80a6998:	e778      	b.n	80a688c <__udivmoddi4+0x1c0>
 80a699a:	3802      	subs	r0, #2
 80a699c:	443a      	add	r2, r7
 80a699e:	e743      	b.n	80a6828 <__udivmoddi4+0x15c>
 80a69a0:	4608      	mov	r0, r1
 80a69a2:	e704      	b.n	80a67ae <__udivmoddi4+0xe2>
 80a69a4:	3b02      	subs	r3, #2
 80a69a6:	443c      	add	r4, r7
 80a69a8:	e72a      	b.n	80a6800 <__udivmoddi4+0x134>
 80a69aa:	45c3      	cmp	fp, r8
 80a69ac:	d3e7      	bcc.n	80a697e <__udivmoddi4+0x2b2>
 80a69ae:	463c      	mov	r4, r7
 80a69b0:	e7d1      	b.n	80a6956 <__udivmoddi4+0x28a>
 80a69b2:	4631      	mov	r1, r6
 80a69b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a69b8 <__aeabi_idiv0>:
 80a69b8:	4770      	bx	lr
 80a69ba:	bf00      	nop

080a69bc <asctime>:
 80a69bc:	4b09      	ldr	r3, [pc, #36]	; (80a69e4 <asctime+0x28>)
 80a69be:	b570      	push	{r4, r5, r6, lr}
 80a69c0:	681c      	ldr	r4, [r3, #0]
 80a69c2:	4606      	mov	r6, r0
 80a69c4:	6c25      	ldr	r5, [r4, #64]	; 0x40
 80a69c6:	b93d      	cbnz	r5, 80a69d8 <asctime+0x1c>
 80a69c8:	201a      	movs	r0, #26
 80a69ca:	f7fc ffa9 	bl	80a3920 <malloc>
 80a69ce:	221a      	movs	r2, #26
 80a69d0:	6420      	str	r0, [r4, #64]	; 0x40
 80a69d2:	4629      	mov	r1, r5
 80a69d4:	f000 f947 	bl	80a6c66 <memset>
 80a69d8:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80a69da:	4630      	mov	r0, r6
 80a69dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a69e0:	f000 b802 	b.w	80a69e8 <asctime_r>
 80a69e4:	20000078 	.word	0x20000078

080a69e8 <asctime_r>:
 80a69e8:	b510      	push	{r4, lr}
 80a69ea:	460c      	mov	r4, r1
 80a69ec:	6941      	ldr	r1, [r0, #20]
 80a69ee:	b086      	sub	sp, #24
 80a69f0:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 80a69f4:	6903      	ldr	r3, [r0, #16]
 80a69f6:	6982      	ldr	r2, [r0, #24]
 80a69f8:	9104      	str	r1, [sp, #16]
 80a69fa:	6801      	ldr	r1, [r0, #0]
 80a69fc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80a6a00:	9103      	str	r1, [sp, #12]
 80a6a02:	6841      	ldr	r1, [r0, #4]
 80a6a04:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80a6a08:	9102      	str	r1, [sp, #8]
 80a6a0a:	6881      	ldr	r1, [r0, #8]
 80a6a0c:	9101      	str	r1, [sp, #4]
 80a6a0e:	68c1      	ldr	r1, [r0, #12]
 80a6a10:	4620      	mov	r0, r4
 80a6a12:	9100      	str	r1, [sp, #0]
 80a6a14:	4904      	ldr	r1, [pc, #16]	; (80a6a28 <asctime_r+0x40>)
 80a6a16:	440b      	add	r3, r1
 80a6a18:	4904      	ldr	r1, [pc, #16]	; (80a6a2c <asctime_r+0x44>)
 80a6a1a:	440a      	add	r2, r1
 80a6a1c:	4904      	ldr	r1, [pc, #16]	; (80a6a30 <asctime_r+0x48>)
 80a6a1e:	f7fc ff97 	bl	80a3950 <siprintf>
 80a6a22:	4620      	mov	r0, r4
 80a6a24:	b006      	add	sp, #24
 80a6a26:	bd10      	pop	{r4, pc}
 80a6a28:	080aa362 	.word	0x080aa362
 80a6a2c:	080aa34d 	.word	0x080aa34d
 80a6a30:	080aa386 	.word	0x080aa386

080a6a34 <atol>:
 80a6a34:	220a      	movs	r2, #10
 80a6a36:	2100      	movs	r1, #0
 80a6a38:	f001 bd5e 	b.w	80a84f8 <strtol>

080a6a3c <__cxa_atexit>:
 80a6a3c:	b510      	push	{r4, lr}
 80a6a3e:	4c05      	ldr	r4, [pc, #20]	; (80a6a54 <__cxa_atexit+0x18>)
 80a6a40:	4613      	mov	r3, r2
 80a6a42:	b12c      	cbz	r4, 80a6a50 <__cxa_atexit+0x14>
 80a6a44:	460a      	mov	r2, r1
 80a6a46:	4601      	mov	r1, r0
 80a6a48:	2002      	movs	r0, #2
 80a6a4a:	f3af 8000 	nop.w
 80a6a4e:	bd10      	pop	{r4, pc}
 80a6a50:	4620      	mov	r0, r4
 80a6a52:	bd10      	pop	{r4, pc}
 80a6a54:	00000000 	.word	0x00000000

080a6a58 <localtime>:
 80a6a58:	b538      	push	{r3, r4, r5, lr}
 80a6a5a:	4b07      	ldr	r3, [pc, #28]	; (80a6a78 <localtime+0x20>)
 80a6a5c:	4605      	mov	r5, r0
 80a6a5e:	681c      	ldr	r4, [r3, #0]
 80a6a60:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80a6a62:	b91b      	cbnz	r3, 80a6a6c <localtime+0x14>
 80a6a64:	2024      	movs	r0, #36	; 0x24
 80a6a66:	f7fc ff5b 	bl	80a3920 <malloc>
 80a6a6a:	63e0      	str	r0, [r4, #60]	; 0x3c
 80a6a6c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80a6a6e:	4628      	mov	r0, r5
 80a6a70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a6a74:	f000 b802 	b.w	80a6a7c <localtime_r>
 80a6a78:	20000078 	.word	0x20000078

080a6a7c <localtime_r>:
 80a6a7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a6a80:	460c      	mov	r4, r1
 80a6a82:	4680      	mov	r8, r0
 80a6a84:	f002 fb70 	bl	80a9168 <__gettzinfo>
 80a6a88:	4621      	mov	r1, r4
 80a6a8a:	4607      	mov	r7, r0
 80a6a8c:	4640      	mov	r0, r8
 80a6a8e:	f002 fb6f 	bl	80a9170 <gmtime_r>
 80a6a92:	6946      	ldr	r6, [r0, #20]
 80a6a94:	4604      	mov	r4, r0
 80a6a96:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 80a6a9a:	07b3      	lsls	r3, r6, #30
 80a6a9c:	d105      	bne.n	80a6aaa <localtime_r+0x2e>
 80a6a9e:	2264      	movs	r2, #100	; 0x64
 80a6aa0:	fb96 f3f2 	sdiv	r3, r6, r2
 80a6aa4:	fb02 6313 	mls	r3, r2, r3, r6
 80a6aa8:	b94b      	cbnz	r3, 80a6abe <localtime_r+0x42>
 80a6aaa:	f44f 75c8 	mov.w	r5, #400	; 0x190
 80a6aae:	fb96 f3f5 	sdiv	r3, r6, r5
 80a6ab2:	fb05 6513 	mls	r5, r5, r3, r6
 80a6ab6:	fab5 f385 	clz	r3, r5
 80a6aba:	095b      	lsrs	r3, r3, #5
 80a6abc:	e000      	b.n	80a6ac0 <localtime_r+0x44>
 80a6abe:	2301      	movs	r3, #1
 80a6ac0:	4a5f      	ldr	r2, [pc, #380]	; (80a6c40 <localtime_r+0x1c4>)
 80a6ac2:	2530      	movs	r5, #48	; 0x30
 80a6ac4:	fb05 2503 	mla	r5, r5, r3, r2
 80a6ac8:	f001 fe60 	bl	80a878c <__tz_lock>
 80a6acc:	f001 fe60 	bl	80a8790 <_tzset_unlocked>
 80a6ad0:	4b5c      	ldr	r3, [pc, #368]	; (80a6c44 <localtime_r+0x1c8>)
 80a6ad2:	681b      	ldr	r3, [r3, #0]
 80a6ad4:	b1f3      	cbz	r3, 80a6b14 <localtime_r+0x98>
 80a6ad6:	687b      	ldr	r3, [r7, #4]
 80a6ad8:	429e      	cmp	r6, r3
 80a6ada:	d105      	bne.n	80a6ae8 <localtime_r+0x6c>
 80a6adc:	6839      	ldr	r1, [r7, #0]
 80a6ade:	f8d8 3000 	ldr.w	r3, [r8]
 80a6ae2:	69fa      	ldr	r2, [r7, #28]
 80a6ae4:	b941      	cbnz	r1, 80a6af8 <localtime_r+0x7c>
 80a6ae6:	e00a      	b.n	80a6afe <localtime_r+0x82>
 80a6ae8:	4630      	mov	r0, r6
 80a6aea:	f001 fda7 	bl	80a863c <__tzcalc_limits>
 80a6aee:	2800      	cmp	r0, #0
 80a6af0:	d1f4      	bne.n	80a6adc <localtime_r+0x60>
 80a6af2:	f04f 33ff 	mov.w	r3, #4294967295
 80a6af6:	e00d      	b.n	80a6b14 <localtime_r+0x98>
 80a6af8:	4293      	cmp	r3, r2
 80a6afa:	db08      	blt.n	80a6b0e <localtime_r+0x92>
 80a6afc:	e001      	b.n	80a6b02 <localtime_r+0x86>
 80a6afe:	4293      	cmp	r3, r2
 80a6b00:	da07      	bge.n	80a6b12 <localtime_r+0x96>
 80a6b02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80a6b04:	4293      	cmp	r3, r2
 80a6b06:	bfac      	ite	ge
 80a6b08:	2300      	movge	r3, #0
 80a6b0a:	2301      	movlt	r3, #1
 80a6b0c:	e002      	b.n	80a6b14 <localtime_r+0x98>
 80a6b0e:	2300      	movs	r3, #0
 80a6b10:	e000      	b.n	80a6b14 <localtime_r+0x98>
 80a6b12:	2301      	movs	r3, #1
 80a6b14:	6223      	str	r3, [r4, #32]
 80a6b16:	6a23      	ldr	r3, [r4, #32]
 80a6b18:	203c      	movs	r0, #60	; 0x3c
 80a6b1a:	2b01      	cmp	r3, #1
 80a6b1c:	bf0c      	ite	eq
 80a6b1e:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
 80a6b20:	6a39      	ldrne	r1, [r7, #32]
 80a6b22:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80a6b26:	fb91 f6f3 	sdiv	r6, r1, r3
 80a6b2a:	fb03 1316 	mls	r3, r3, r6, r1
 80a6b2e:	fb93 f2f0 	sdiv	r2, r3, r0
 80a6b32:	fb00 3012 	mls	r0, r0, r2, r3
 80a6b36:	6861      	ldr	r1, [r4, #4]
 80a6b38:	6823      	ldr	r3, [r4, #0]
 80a6b3a:	1a89      	subs	r1, r1, r2
 80a6b3c:	68a2      	ldr	r2, [r4, #8]
 80a6b3e:	1a1b      	subs	r3, r3, r0
 80a6b40:	1b92      	subs	r2, r2, r6
 80a6b42:	2b3b      	cmp	r3, #59	; 0x3b
 80a6b44:	6023      	str	r3, [r4, #0]
 80a6b46:	6061      	str	r1, [r4, #4]
 80a6b48:	60a2      	str	r2, [r4, #8]
 80a6b4a:	dd03      	ble.n	80a6b54 <localtime_r+0xd8>
 80a6b4c:	3101      	adds	r1, #1
 80a6b4e:	6061      	str	r1, [r4, #4]
 80a6b50:	3b3c      	subs	r3, #60	; 0x3c
 80a6b52:	e004      	b.n	80a6b5e <localtime_r+0xe2>
 80a6b54:	2b00      	cmp	r3, #0
 80a6b56:	da03      	bge.n	80a6b60 <localtime_r+0xe4>
 80a6b58:	3901      	subs	r1, #1
 80a6b5a:	6061      	str	r1, [r4, #4]
 80a6b5c:	333c      	adds	r3, #60	; 0x3c
 80a6b5e:	6023      	str	r3, [r4, #0]
 80a6b60:	6863      	ldr	r3, [r4, #4]
 80a6b62:	2b3b      	cmp	r3, #59	; 0x3b
 80a6b64:	dd03      	ble.n	80a6b6e <localtime_r+0xf2>
 80a6b66:	3201      	adds	r2, #1
 80a6b68:	60a2      	str	r2, [r4, #8]
 80a6b6a:	3b3c      	subs	r3, #60	; 0x3c
 80a6b6c:	e004      	b.n	80a6b78 <localtime_r+0xfc>
 80a6b6e:	2b00      	cmp	r3, #0
 80a6b70:	da03      	bge.n	80a6b7a <localtime_r+0xfe>
 80a6b72:	3a01      	subs	r2, #1
 80a6b74:	60a2      	str	r2, [r4, #8]
 80a6b76:	333c      	adds	r3, #60	; 0x3c
 80a6b78:	6063      	str	r3, [r4, #4]
 80a6b7a:	68a3      	ldr	r3, [r4, #8]
 80a6b7c:	2b17      	cmp	r3, #23
 80a6b7e:	dd22      	ble.n	80a6bc6 <localtime_r+0x14a>
 80a6b80:	69e2      	ldr	r2, [r4, #28]
 80a6b82:	3b18      	subs	r3, #24
 80a6b84:	3201      	adds	r2, #1
 80a6b86:	61e2      	str	r2, [r4, #28]
 80a6b88:	69a2      	ldr	r2, [r4, #24]
 80a6b8a:	60a3      	str	r3, [r4, #8]
 80a6b8c:	3201      	adds	r2, #1
 80a6b8e:	2a06      	cmp	r2, #6
 80a6b90:	bfc8      	it	gt
 80a6b92:	2200      	movgt	r2, #0
 80a6b94:	61a2      	str	r2, [r4, #24]
 80a6b96:	68e2      	ldr	r2, [r4, #12]
 80a6b98:	6923      	ldr	r3, [r4, #16]
 80a6b9a:	3201      	adds	r2, #1
 80a6b9c:	60e2      	str	r2, [r4, #12]
 80a6b9e:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 80a6ba2:	428a      	cmp	r2, r1
 80a6ba4:	dd46      	ble.n	80a6c34 <localtime_r+0x1b8>
 80a6ba6:	3301      	adds	r3, #1
 80a6ba8:	2b0c      	cmp	r3, #12
 80a6baa:	bf08      	it	eq
 80a6bac:	6963      	ldreq	r3, [r4, #20]
 80a6bae:	eba2 0201 	sub.w	r2, r2, r1
 80a6bb2:	60e2      	str	r2, [r4, #12]
 80a6bb4:	bf05      	ittet	eq
 80a6bb6:	3301      	addeq	r3, #1
 80a6bb8:	2200      	moveq	r2, #0
 80a6bba:	6123      	strne	r3, [r4, #16]
 80a6bbc:	6122      	streq	r2, [r4, #16]
 80a6bbe:	bf04      	itt	eq
 80a6bc0:	6163      	streq	r3, [r4, #20]
 80a6bc2:	61e2      	streq	r2, [r4, #28]
 80a6bc4:	e036      	b.n	80a6c34 <localtime_r+0x1b8>
 80a6bc6:	2b00      	cmp	r3, #0
 80a6bc8:	da34      	bge.n	80a6c34 <localtime_r+0x1b8>
 80a6bca:	69e2      	ldr	r2, [r4, #28]
 80a6bcc:	3318      	adds	r3, #24
 80a6bce:	3a01      	subs	r2, #1
 80a6bd0:	61e2      	str	r2, [r4, #28]
 80a6bd2:	69a2      	ldr	r2, [r4, #24]
 80a6bd4:	60a3      	str	r3, [r4, #8]
 80a6bd6:	3a01      	subs	r2, #1
 80a6bd8:	bf48      	it	mi
 80a6bda:	2206      	movmi	r2, #6
 80a6bdc:	61a2      	str	r2, [r4, #24]
 80a6bde:	68e2      	ldr	r2, [r4, #12]
 80a6be0:	3a01      	subs	r2, #1
 80a6be2:	60e2      	str	r2, [r4, #12]
 80a6be4:	bb32      	cbnz	r2, 80a6c34 <localtime_r+0x1b8>
 80a6be6:	6923      	ldr	r3, [r4, #16]
 80a6be8:	3b01      	subs	r3, #1
 80a6bea:	d401      	bmi.n	80a6bf0 <localtime_r+0x174>
 80a6bec:	6123      	str	r3, [r4, #16]
 80a6bee:	e01d      	b.n	80a6c2c <localtime_r+0x1b0>
 80a6bf0:	230b      	movs	r3, #11
 80a6bf2:	6123      	str	r3, [r4, #16]
 80a6bf4:	6963      	ldr	r3, [r4, #20]
 80a6bf6:	1e5a      	subs	r2, r3, #1
 80a6bf8:	f012 0f03 	tst.w	r2, #3
 80a6bfc:	6162      	str	r2, [r4, #20]
 80a6bfe:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 80a6c02:	d105      	bne.n	80a6c10 <localtime_r+0x194>
 80a6c04:	2164      	movs	r1, #100	; 0x64
 80a6c06:	fb93 f2f1 	sdiv	r2, r3, r1
 80a6c0a:	fb01 3212 	mls	r2, r1, r2, r3
 80a6c0e:	b94a      	cbnz	r2, 80a6c24 <localtime_r+0x1a8>
 80a6c10:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80a6c14:	fb93 f2f1 	sdiv	r2, r3, r1
 80a6c18:	fb01 3312 	mls	r3, r1, r2, r3
 80a6c1c:	fab3 f383 	clz	r3, r3
 80a6c20:	095b      	lsrs	r3, r3, #5
 80a6c22:	e000      	b.n	80a6c26 <localtime_r+0x1aa>
 80a6c24:	2301      	movs	r3, #1
 80a6c26:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 80a6c2a:	61e3      	str	r3, [r4, #28]
 80a6c2c:	6923      	ldr	r3, [r4, #16]
 80a6c2e:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80a6c32:	60e3      	str	r3, [r4, #12]
 80a6c34:	f001 fdab 	bl	80a878e <__tz_unlock>
 80a6c38:	4620      	mov	r0, r4
 80a6c3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a6c3e:	bf00      	nop
 80a6c40:	080aa510 	.word	0x080aa510
 80a6c44:	200006d8 	.word	0x200006d8

080a6c48 <_localeconv_r>:
 80a6c48:	4800      	ldr	r0, [pc, #0]	; (80a6c4c <_localeconv_r+0x4>)
 80a6c4a:	4770      	bx	lr
 80a6c4c:	2000007c 	.word	0x2000007c

080a6c50 <memcpy>:
 80a6c50:	b510      	push	{r4, lr}
 80a6c52:	1e43      	subs	r3, r0, #1
 80a6c54:	440a      	add	r2, r1
 80a6c56:	4291      	cmp	r1, r2
 80a6c58:	d004      	beq.n	80a6c64 <memcpy+0x14>
 80a6c5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a6c5e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a6c62:	e7f8      	b.n	80a6c56 <memcpy+0x6>
 80a6c64:	bd10      	pop	{r4, pc}

080a6c66 <memset>:
 80a6c66:	4603      	mov	r3, r0
 80a6c68:	4402      	add	r2, r0
 80a6c6a:	4293      	cmp	r3, r2
 80a6c6c:	d002      	beq.n	80a6c74 <memset+0xe>
 80a6c6e:	f803 1b01 	strb.w	r1, [r3], #1
 80a6c72:	e7fa      	b.n	80a6c6a <memset+0x4>
 80a6c74:	4770      	bx	lr
	...

080a6c78 <srand>:
 80a6c78:	b538      	push	{r3, r4, r5, lr}
 80a6c7a:	4b12      	ldr	r3, [pc, #72]	; (80a6cc4 <srand+0x4c>)
 80a6c7c:	4605      	mov	r5, r0
 80a6c7e:	681c      	ldr	r4, [r3, #0]
 80a6c80:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a6c82:	b9d3      	cbnz	r3, 80a6cba <srand+0x42>
 80a6c84:	2018      	movs	r0, #24
 80a6c86:	f7fc fe4b 	bl	80a3920 <malloc>
 80a6c8a:	f243 330e 	movw	r3, #13070	; 0x330e
 80a6c8e:	63a0      	str	r0, [r4, #56]	; 0x38
 80a6c90:	8003      	strh	r3, [r0, #0]
 80a6c92:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a6c96:	8043      	strh	r3, [r0, #2]
 80a6c98:	f241 2334 	movw	r3, #4660	; 0x1234
 80a6c9c:	8083      	strh	r3, [r0, #4]
 80a6c9e:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a6ca2:	80c3      	strh	r3, [r0, #6]
 80a6ca4:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a6ca8:	8103      	strh	r3, [r0, #8]
 80a6caa:	2305      	movs	r3, #5
 80a6cac:	8143      	strh	r3, [r0, #10]
 80a6cae:	230b      	movs	r3, #11
 80a6cb0:	8183      	strh	r3, [r0, #12]
 80a6cb2:	2201      	movs	r2, #1
 80a6cb4:	2300      	movs	r3, #0
 80a6cb6:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a6cba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a6cbc:	2200      	movs	r2, #0
 80a6cbe:	611d      	str	r5, [r3, #16]
 80a6cc0:	615a      	str	r2, [r3, #20]
 80a6cc2:	bd38      	pop	{r3, r4, r5, pc}
 80a6cc4:	20000078 	.word	0x20000078

080a6cc8 <strcmp>:
 80a6cc8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80a6ccc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80a6cd0:	2a01      	cmp	r2, #1
 80a6cd2:	bf28      	it	cs
 80a6cd4:	429a      	cmpcs	r2, r3
 80a6cd6:	d0f7      	beq.n	80a6cc8 <strcmp>
 80a6cd8:	1ad0      	subs	r0, r2, r3
 80a6cda:	4770      	bx	lr

080a6cdc <strcpy>:
 80a6cdc:	4603      	mov	r3, r0
 80a6cde:	f811 2b01 	ldrb.w	r2, [r1], #1
 80a6ce2:	f803 2b01 	strb.w	r2, [r3], #1
 80a6ce6:	2a00      	cmp	r2, #0
 80a6ce8:	d1f9      	bne.n	80a6cde <strcpy+0x2>
 80a6cea:	4770      	bx	lr

080a6cec <iso_year_adjust>:
 80a6cec:	6941      	ldr	r1, [r0, #20]
 80a6cee:	b510      	push	{r4, lr}
 80a6cf0:	078b      	lsls	r3, r1, #30
 80a6cf2:	d10c      	bne.n	80a6d0e <iso_year_adjust+0x22>
 80a6cf4:	f240 736c 	movw	r3, #1900	; 0x76c
 80a6cf8:	2900      	cmp	r1, #0
 80a6cfa:	bfa8      	it	ge
 80a6cfc:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 80a6d00:	440b      	add	r3, r1
 80a6d02:	2464      	movs	r4, #100	; 0x64
 80a6d04:	fb93 f2f4 	sdiv	r2, r3, r4
 80a6d08:	fb04 3312 	mls	r3, r4, r2, r3
 80a6d0c:	b983      	cbnz	r3, 80a6d30 <iso_year_adjust+0x44>
 80a6d0e:	f240 736c 	movw	r3, #1900	; 0x76c
 80a6d12:	2900      	cmp	r1, #0
 80a6d14:	bfa8      	it	ge
 80a6d16:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 80a6d1a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80a6d1e:	440b      	add	r3, r1
 80a6d20:	fb93 f1f2 	sdiv	r1, r3, r2
 80a6d24:	fb02 3311 	mls	r3, r2, r1, r3
 80a6d28:	fab3 f283 	clz	r2, r3
 80a6d2c:	0952      	lsrs	r2, r2, #5
 80a6d2e:	e000      	b.n	80a6d32 <iso_year_adjust+0x46>
 80a6d30:	2201      	movs	r2, #1
 80a6d32:	6983      	ldr	r3, [r0, #24]
 80a6d34:	69c1      	ldr	r1, [r0, #28]
 80a6d36:	005b      	lsls	r3, r3, #1
 80a6d38:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 80a6d3c:	4413      	add	r3, r2
 80a6d3e:	2b21      	cmp	r3, #33	; 0x21
 80a6d40:	dc0e      	bgt.n	80a6d60 <iso_year_adjust+0x74>
 80a6d42:	2b20      	cmp	r3, #32
 80a6d44:	da2f      	bge.n	80a6da6 <iso_year_adjust+0xba>
 80a6d46:	2b0d      	cmp	r3, #13
 80a6d48:	dc02      	bgt.n	80a6d50 <iso_year_adjust+0x64>
 80a6d4a:	2b0a      	cmp	r3, #10
 80a6d4c:	db05      	blt.n	80a6d5a <iso_year_adjust+0x6e>
 80a6d4e:	e02a      	b.n	80a6da6 <iso_year_adjust+0xba>
 80a6d50:	2b10      	cmp	r3, #16
 80a6d52:	db26      	blt.n	80a6da2 <iso_year_adjust+0xb6>
 80a6d54:	2b11      	cmp	r3, #17
 80a6d56:	dd26      	ble.n	80a6da6 <iso_year_adjust+0xba>
 80a6d58:	3b1c      	subs	r3, #28
 80a6d5a:	2b01      	cmp	r3, #1
 80a6d5c:	d923      	bls.n	80a6da6 <iso_year_adjust+0xba>
 80a6d5e:	e020      	b.n	80a6da2 <iso_year_adjust+0xb6>
 80a6d60:	f241 62c6 	movw	r2, #5830	; 0x16c6
 80a6d64:	4293      	cmp	r3, r2
 80a6d66:	dc0e      	bgt.n	80a6d86 <iso_year_adjust+0x9a>
 80a6d68:	f241 62c2 	movw	r2, #5826	; 0x16c2
 80a6d6c:	4293      	cmp	r3, r2
 80a6d6e:	da16      	bge.n	80a6d9e <iso_year_adjust+0xb2>
 80a6d70:	f241 62a2 	movw	r2, #5794	; 0x16a2
 80a6d74:	4293      	cmp	r3, r2
 80a6d76:	d012      	beq.n	80a6d9e <iso_year_adjust+0xb2>
 80a6d78:	db13      	blt.n	80a6da2 <iso_year_adjust+0xb6>
 80a6d7a:	f5a3 53b5 	sub.w	r3, r3, #5792	; 0x16a0
 80a6d7e:	3b12      	subs	r3, #18
 80a6d80:	2b02      	cmp	r3, #2
 80a6d82:	d90c      	bls.n	80a6d9e <iso_year_adjust+0xb2>
 80a6d84:	e00d      	b.n	80a6da2 <iso_year_adjust+0xb6>
 80a6d86:	f241 62d5 	movw	r2, #5845	; 0x16d5
 80a6d8a:	4293      	cmp	r3, r2
 80a6d8c:	d007      	beq.n	80a6d9e <iso_year_adjust+0xb2>
 80a6d8e:	f241 62d7 	movw	r2, #5847	; 0x16d7
 80a6d92:	4293      	cmp	r3, r2
 80a6d94:	d003      	beq.n	80a6d9e <iso_year_adjust+0xb2>
 80a6d96:	f241 62d3 	movw	r2, #5843	; 0x16d3
 80a6d9a:	4293      	cmp	r3, r2
 80a6d9c:	d101      	bne.n	80a6da2 <iso_year_adjust+0xb6>
 80a6d9e:	2001      	movs	r0, #1
 80a6da0:	bd10      	pop	{r4, pc}
 80a6da2:	2000      	movs	r0, #0
 80a6da4:	bd10      	pop	{r4, pc}
 80a6da6:	f04f 30ff 	mov.w	r0, #4294967295
 80a6daa:	bd10      	pop	{r4, pc}

080a6dac <strftime>:
 80a6dac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a6db0:	460e      	mov	r6, r1
 80a6db2:	b093      	sub	sp, #76	; 0x4c
 80a6db4:	461d      	mov	r5, r3
 80a6db6:	4607      	mov	r7, r0
 80a6db8:	4691      	mov	r9, r2
 80a6dba:	f001 fc2f 	bl	80a861c <__get_current_time_locale>
 80a6dbe:	2300      	movs	r3, #0
 80a6dc0:	9306      	str	r3, [sp, #24]
 80a6dc2:	461c      	mov	r4, r3
 80a6dc4:	1e73      	subs	r3, r6, #1
 80a6dc6:	9003      	str	r0, [sp, #12]
 80a6dc8:	9302      	str	r3, [sp, #8]
 80a6dca:	f899 3000 	ldrb.w	r3, [r9]
 80a6dce:	2b00      	cmp	r3, #0
 80a6dd0:	f000 8492 	beq.w	80a76f8 <strftime+0x94c>
 80a6dd4:	2b25      	cmp	r3, #37	; 0x25
 80a6dd6:	d008      	beq.n	80a6dea <strftime+0x3e>
 80a6dd8:	9a02      	ldr	r2, [sp, #8]
 80a6dda:	4294      	cmp	r4, r2
 80a6ddc:	f080 8490 	bcs.w	80a7700 <strftime+0x954>
 80a6de0:	553b      	strb	r3, [r7, r4]
 80a6de2:	f109 0901 	add.w	r9, r9, #1
 80a6de6:	3401      	adds	r4, #1
 80a6de8:	e7ef      	b.n	80a6dca <strftime+0x1e>
 80a6dea:	f899 a001 	ldrb.w	sl, [r9, #1]
 80a6dee:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
 80a6df2:	d007      	beq.n	80a6e04 <strftime+0x58>
 80a6df4:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 80a6df8:	d004      	beq.n	80a6e04 <strftime+0x58>
 80a6dfa:	f109 0901 	add.w	r9, r9, #1
 80a6dfe:	f04f 0a00 	mov.w	sl, #0
 80a6e02:	e001      	b.n	80a6e08 <strftime+0x5c>
 80a6e04:	f109 0902 	add.w	r9, r9, #2
 80a6e08:	f899 3000 	ldrb.w	r3, [r9]
 80a6e0c:	3b31      	subs	r3, #49	; 0x31
 80a6e0e:	2b08      	cmp	r3, #8
 80a6e10:	d808      	bhi.n	80a6e24 <strftime+0x78>
 80a6e12:	4648      	mov	r0, r9
 80a6e14:	220a      	movs	r2, #10
 80a6e16:	a90a      	add	r1, sp, #40	; 0x28
 80a6e18:	f001 fbf6 	bl	80a8608 <strtoul>
 80a6e1c:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 80a6e20:	4680      	mov	r8, r0
 80a6e22:	e001      	b.n	80a6e28 <strftime+0x7c>
 80a6e24:	f04f 0800 	mov.w	r8, #0
 80a6e28:	f899 3000 	ldrb.w	r3, [r9]
 80a6e2c:	2b45      	cmp	r3, #69	; 0x45
 80a6e2e:	d001      	beq.n	80a6e34 <strftime+0x88>
 80a6e30:	2b4f      	cmp	r3, #79	; 0x4f
 80a6e32:	d101      	bne.n	80a6e38 <strftime+0x8c>
 80a6e34:	f109 0901 	add.w	r9, r9, #1
 80a6e38:	f899 0000 	ldrb.w	r0, [r9]
 80a6e3c:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
 80a6e40:	2b55      	cmp	r3, #85	; 0x55
 80a6e42:	f200 845d 	bhi.w	80a7700 <strftime+0x954>
 80a6e46:	e8df f013 	tbh	[pc, r3, lsl #1]
 80a6e4a:	044a      	.short	0x044a
 80a6e4c:	045b045b 	.word	0x045b045b
 80a6e50:	045b045b 	.word	0x045b045b
 80a6e54:	045b045b 	.word	0x045b045b
 80a6e58:	045b045b 	.word	0x045b045b
 80a6e5c:	045b045b 	.word	0x045b045b
 80a6e60:	045b045b 	.word	0x045b045b
 80a6e64:	045b045b 	.word	0x045b045b
 80a6e68:	045b045b 	.word	0x045b045b
 80a6e6c:	045b045b 	.word	0x045b045b
 80a6e70:	045b045b 	.word	0x045b045b
 80a6e74:	045b045b 	.word	0x045b045b
 80a6e78:	045b045b 	.word	0x045b045b
 80a6e7c:	045b045b 	.word	0x045b045b
 80a6e80:	006f045b 	.word	0x006f045b
 80a6e84:	00d400a1 	.word	0x00d400a1
 80a6e88:	045b011a 	.word	0x045b011a
 80a6e8c:	01a0013f 	.word	0x01a0013f
 80a6e90:	022d0226 	.word	0x022d0226
 80a6e94:	045b045b 	.word	0x045b045b
 80a6e98:	0260045b 	.word	0x0260045b
 80a6e9c:	045b045b 	.word	0x045b045b
 80a6ea0:	045b0268 	.word	0x045b0268
 80a6ea4:	031c0296 	.word	0x031c0296
 80a6ea8:	033a0324 	.word	0x033a0324
 80a6eac:	03850342 	.word	0x03850342
 80a6eb0:	039f00c6 	.word	0x039f00c6
 80a6eb4:	045b041f 	.word	0x045b041f
 80a6eb8:	045b045b 	.word	0x045b045b
 80a6ebc:	045b045b 	.word	0x045b045b
 80a6ec0:	0056045b 	.word	0x0056045b
 80a6ec4:	00ba0089 	.word	0x00ba0089
 80a6ec8:	010c010c 	.word	0x010c010c
 80a6ecc:	0171045b 	.word	0x0171045b
 80a6ed0:	045b0089 	.word	0x045b0089
 80a6ed4:	0226023d 	.word	0x0226023d
 80a6ed8:	025d022d 	.word	0x025d022d
 80a6edc:	045b0262 	.word	0x045b0262
 80a6ee0:	045b0268 	.word	0x045b0268
 80a6ee4:	029b00be 	.word	0x029b00be
 80a6ee8:	032d031e 	.word	0x032d031e
 80a6eec:	037e045b 	.word	0x037e045b
 80a6ef0:	039100c2 	.word	0x039100c2
 80a6ef4:	03e7      	.short	0x03e7
 80a6ef6:	69ab      	ldr	r3, [r5, #24]
 80a6ef8:	9a03      	ldr	r2, [sp, #12]
 80a6efa:	3318      	adds	r3, #24
 80a6efc:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
 80a6f00:	4640      	mov	r0, r8
 80a6f02:	f000 fc07 	bl	80a7714 <strlen>
 80a6f06:	f108 38ff 	add.w	r8, r8, #4294967295
 80a6f0a:	193b      	adds	r3, r7, r4
 80a6f0c:	4420      	add	r0, r4
 80a6f0e:	4284      	cmp	r4, r0
 80a6f10:	f000 83eb 	beq.w	80a76ea <strftime+0x93e>
 80a6f14:	9a02      	ldr	r2, [sp, #8]
 80a6f16:	4294      	cmp	r4, r2
 80a6f18:	f080 83f2 	bcs.w	80a7700 <strftime+0x954>
 80a6f1c:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 80a6f20:	3401      	adds	r4, #1
 80a6f22:	f803 2b01 	strb.w	r2, [r3], #1
 80a6f26:	e7f2      	b.n	80a6f0e <strftime+0x162>
 80a6f28:	69ab      	ldr	r3, [r5, #24]
 80a6f2a:	9a03      	ldr	r2, [sp, #12]
 80a6f2c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80a6f30:	f8d3 807c 	ldr.w	r8, [r3, #124]	; 0x7c
 80a6f34:	4640      	mov	r0, r8
 80a6f36:	f000 fbed 	bl	80a7714 <strlen>
 80a6f3a:	f108 38ff 	add.w	r8, r8, #4294967295
 80a6f3e:	193b      	adds	r3, r7, r4
 80a6f40:	4420      	add	r0, r4
 80a6f42:	4284      	cmp	r4, r0
 80a6f44:	f000 83d1 	beq.w	80a76ea <strftime+0x93e>
 80a6f48:	9a02      	ldr	r2, [sp, #8]
 80a6f4a:	4294      	cmp	r4, r2
 80a6f4c:	f080 83d8 	bcs.w	80a7700 <strftime+0x954>
 80a6f50:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 80a6f54:	3401      	adds	r4, #1
 80a6f56:	f803 2b01 	strb.w	r2, [r3], #1
 80a6f5a:	e7f2      	b.n	80a6f42 <strftime+0x196>
 80a6f5c:	692b      	ldr	r3, [r5, #16]
 80a6f5e:	9a03      	ldr	r2, [sp, #12]
 80a6f60:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
 80a6f64:	4640      	mov	r0, r8
 80a6f66:	f000 fbd5 	bl	80a7714 <strlen>
 80a6f6a:	f108 38ff 	add.w	r8, r8, #4294967295
 80a6f6e:	193b      	adds	r3, r7, r4
 80a6f70:	4420      	add	r0, r4
 80a6f72:	4284      	cmp	r4, r0
 80a6f74:	f000 83b9 	beq.w	80a76ea <strftime+0x93e>
 80a6f78:	9a02      	ldr	r2, [sp, #8]
 80a6f7a:	4294      	cmp	r4, r2
 80a6f7c:	f080 83c0 	bcs.w	80a7700 <strftime+0x954>
 80a6f80:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 80a6f84:	3401      	adds	r4, #1
 80a6f86:	f803 2b01 	strb.w	r2, [r3], #1
 80a6f8a:	e7f2      	b.n	80a6f72 <strftime+0x1c6>
 80a6f8c:	692b      	ldr	r3, [r5, #16]
 80a6f8e:	9a03      	ldr	r2, [sp, #12]
 80a6f90:	330c      	adds	r3, #12
 80a6f92:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
 80a6f96:	4640      	mov	r0, r8
 80a6f98:	f000 fbbc 	bl	80a7714 <strlen>
 80a6f9c:	f108 38ff 	add.w	r8, r8, #4294967295
 80a6fa0:	193b      	adds	r3, r7, r4
 80a6fa2:	4420      	add	r0, r4
 80a6fa4:	4284      	cmp	r4, r0
 80a6fa6:	f000 83a0 	beq.w	80a76ea <strftime+0x93e>
 80a6faa:	9a02      	ldr	r2, [sp, #8]
 80a6fac:	4294      	cmp	r4, r2
 80a6fae:	f080 83a7 	bcs.w	80a7700 <strftime+0x954>
 80a6fb2:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 80a6fb6:	3401      	adds	r4, #1
 80a6fb8:	f803 2b01 	strb.w	r2, [r3], #1
 80a6fbc:	e7f2      	b.n	80a6fa4 <strftime+0x1f8>
 80a6fbe:	9b03      	ldr	r3, [sp, #12]
 80a6fc0:	f8d3 80a0 	ldr.w	r8, [r3, #160]	; 0xa0
 80a6fc4:	e00a      	b.n	80a6fdc <strftime+0x230>
 80a6fc6:	9b03      	ldr	r3, [sp, #12]
 80a6fc8:	f8d3 80e4 	ldr.w	r8, [r3, #228]	; 0xe4
 80a6fcc:	e006      	b.n	80a6fdc <strftime+0x230>
 80a6fce:	9b03      	ldr	r3, [sp, #12]
 80a6fd0:	f8d3 809c 	ldr.w	r8, [r3, #156]	; 0x9c
 80a6fd4:	e002      	b.n	80a6fdc <strftime+0x230>
 80a6fd6:	9b03      	ldr	r3, [sp, #12]
 80a6fd8:	f8d3 8098 	ldr.w	r8, [r3, #152]	; 0x98
 80a6fdc:	4640      	mov	r0, r8
 80a6fde:	f000 fb99 	bl	80a7714 <strlen>
 80a6fe2:	f898 3000 	ldrb.w	r3, [r8]
 80a6fe6:	2b00      	cmp	r3, #0
 80a6fe8:	f000 837f 	beq.w	80a76ea <strftime+0x93e>
 80a6fec:	462b      	mov	r3, r5
 80a6fee:	4642      	mov	r2, r8
 80a6ff0:	e093      	b.n	80a711a <strftime+0x36e>
 80a6ff2:	49b6      	ldr	r1, [pc, #728]	; (80a72cc <strftime+0x520>)
 80a6ff4:	f8d5 b014 	ldr.w	fp, [r5, #20]
 80a6ff8:	458b      	cmp	fp, r1
 80a6ffa:	bfac      	ite	ge
 80a6ffc:	2100      	movge	r1, #0
 80a6ffe:	2101      	movlt	r1, #1
 80a7000:	f1bb 0f00 	cmp.w	fp, #0
 80a7004:	db04      	blt.n	80a7010 <strftime+0x264>
 80a7006:	2064      	movs	r0, #100	; 0x64
 80a7008:	fb9b f0f0 	sdiv	r0, fp, r0
 80a700c:	3013      	adds	r0, #19
 80a700e:	e008      	b.n	80a7022 <strftime+0x276>
 80a7010:	f20b 706c 	addw	r0, fp, #1900	; 0x76c
 80a7014:	9107      	str	r1, [sp, #28]
 80a7016:	f001 fd41 	bl	80a8a9c <abs>
 80a701a:	2364      	movs	r3, #100	; 0x64
 80a701c:	fb90 f0f3 	sdiv	r0, r0, r3
 80a7020:	9907      	ldr	r1, [sp, #28]
 80a7022:	f1ba 0f00 	cmp.w	sl, #0
 80a7026:	d008      	beq.n	80a703a <strftime+0x28e>
 80a7028:	2863      	cmp	r0, #99	; 0x63
 80a702a:	dd09      	ble.n	80a7040 <strftime+0x294>
 80a702c:	4ba8      	ldr	r3, [pc, #672]	; (80a72d0 <strftime+0x524>)
 80a702e:	4aa9      	ldr	r2, [pc, #676]	; (80a72d4 <strftime+0x528>)
 80a7030:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 80a7034:	bf18      	it	ne
 80a7036:	4613      	movne	r3, r2
 80a7038:	e003      	b.n	80a7042 <strftime+0x296>
 80a703a:	4ba6      	ldr	r3, [pc, #664]	; (80a72d4 <strftime+0x528>)
 80a703c:	4aa6      	ldr	r2, [pc, #664]	; (80a72d8 <strftime+0x52c>)
 80a703e:	e001      	b.n	80a7044 <strftime+0x298>
 80a7040:	4ba4      	ldr	r3, [pc, #656]	; (80a72d4 <strftime+0x528>)
 80a7042:	4aa6      	ldr	r2, [pc, #664]	; (80a72dc <strftime+0x530>)
 80a7044:	f1b8 0f01 	cmp.w	r8, #1
 80a7048:	bf98      	it	ls
 80a704a:	f04f 0802 	movls.w	r8, #2
 80a704e:	ebc1 0108 	rsb	r1, r1, r8
 80a7052:	9001      	str	r0, [sp, #4]
 80a7054:	9100      	str	r1, [sp, #0]
 80a7056:	489d      	ldr	r0, [pc, #628]	; (80a72cc <strftime+0x520>)
 80a7058:	49a1      	ldr	r1, [pc, #644]	; (80a72e0 <strftime+0x534>)
 80a705a:	4583      	cmp	fp, r0
 80a705c:	bfb8      	it	lt
 80a705e:	460b      	movlt	r3, r1
 80a7060:	e21d      	b.n	80a749e <strftime+0x6f2>
 80a7062:	4aa0      	ldr	r2, [pc, #640]	; (80a72e4 <strftime+0x538>)
 80a7064:	49a0      	ldr	r1, [pc, #640]	; (80a72e8 <strftime+0x53c>)
 80a7066:	68eb      	ldr	r3, [r5, #12]
 80a7068:	2864      	cmp	r0, #100	; 0x64
 80a706a:	bf08      	it	eq
 80a706c:	460a      	moveq	r2, r1
 80a706e:	1b31      	subs	r1, r6, r4
 80a7070:	1938      	adds	r0, r7, r4
 80a7072:	f7fc fc8d 	bl	80a3990 <sniprintf>
 80a7076:	2800      	cmp	r0, #0
 80a7078:	f280 8302 	bge.w	80a7680 <strftime+0x8d4>
 80a707c:	e340      	b.n	80a7700 <strftime+0x954>
 80a707e:	6968      	ldr	r0, [r5, #20]
 80a7080:	692b      	ldr	r3, [r5, #16]
 80a7082:	2800      	cmp	r0, #0
 80a7084:	f103 0b01 	add.w	fp, r3, #1
 80a7088:	eb07 0804 	add.w	r8, r7, r4
 80a708c:	ebc4 0a06 	rsb	sl, r4, r6
 80a7090:	68eb      	ldr	r3, [r5, #12]
 80a7092:	db05      	blt.n	80a70a0 <strftime+0x2f4>
 80a7094:	2264      	movs	r2, #100	; 0x64
 80a7096:	fb90 f1f2 	sdiv	r1, r0, r2
 80a709a:	fb02 0011 	mls	r0, r2, r1, r0
 80a709e:	e00a      	b.n	80a70b6 <strftime+0x30a>
 80a70a0:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80a70a4:	9307      	str	r3, [sp, #28]
 80a70a6:	f001 fcf9 	bl	80a8a9c <abs>
 80a70aa:	2264      	movs	r2, #100	; 0x64
 80a70ac:	fb90 f1f2 	sdiv	r1, r0, r2
 80a70b0:	fb01 0012 	mls	r0, r1, r2, r0
 80a70b4:	9b07      	ldr	r3, [sp, #28]
 80a70b6:	9001      	str	r0, [sp, #4]
 80a70b8:	9300      	str	r3, [sp, #0]
 80a70ba:	4651      	mov	r1, sl
 80a70bc:	465b      	mov	r3, fp
 80a70be:	4640      	mov	r0, r8
 80a70c0:	4a8a      	ldr	r2, [pc, #552]	; (80a72ec <strftime+0x540>)
 80a70c2:	f7fc fc65 	bl	80a3990 <sniprintf>
 80a70c6:	e7d6      	b.n	80a7076 <strftime+0x2ca>
 80a70c8:	2325      	movs	r3, #37	; 0x25
 80a70ca:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 80a70ce:	f1ba 0f00 	cmp.w	sl, #0
 80a70d2:	d007      	beq.n	80a70e4 <strftime+0x338>
 80a70d4:	f1b8 0f05 	cmp.w	r8, #5
 80a70d8:	f88d a029 	strb.w	sl, [sp, #41]	; 0x29
 80a70dc:	bf98      	it	ls
 80a70de:	f04f 0806 	movls.w	r8, #6
 80a70e2:	e004      	b.n	80a70ee <strftime+0x342>
 80a70e4:	232b      	movs	r3, #43	; 0x2b
 80a70e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80a70ea:	f04f 080a 	mov.w	r8, #10
 80a70ee:	f1b8 0306 	subs.w	r3, r8, #6
 80a70f2:	d102      	bne.n	80a70fa <strftime+0x34e>
 80a70f4:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
 80a70f8:	e00a      	b.n	80a7110 <strftime+0x364>
 80a70fa:	4a7d      	ldr	r2, [pc, #500]	; (80a72f0 <strftime+0x544>)
 80a70fc:	211e      	movs	r1, #30
 80a70fe:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
 80a7102:	f7fc fc45 	bl	80a3990 <sniprintf>
 80a7106:	2800      	cmp	r0, #0
 80a7108:	ddf4      	ble.n	80a70f4 <strftime+0x348>
 80a710a:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
 80a710e:	4418      	add	r0, r3
 80a7110:	4978      	ldr	r1, [pc, #480]	; (80a72f4 <strftime+0x548>)
 80a7112:	f7ff fde3 	bl	80a6cdc <strcpy>
 80a7116:	462b      	mov	r3, r5
 80a7118:	aa0a      	add	r2, sp, #40	; 0x28
 80a711a:	1b31      	subs	r1, r6, r4
 80a711c:	1938      	adds	r0, r7, r4
 80a711e:	f7ff fe45 	bl	80a6dac <strftime>
 80a7122:	2800      	cmp	r0, #0
 80a7124:	f340 82ec 	ble.w	80a7700 <strftime+0x954>
 80a7128:	4404      	add	r4, r0
 80a712a:	e2de      	b.n	80a76ea <strftime+0x93e>
 80a712c:	4628      	mov	r0, r5
 80a712e:	f7ff fddd 	bl	80a6cec <iso_year_adjust>
 80a7132:	4680      	mov	r8, r0
 80a7134:	6968      	ldr	r0, [r5, #20]
 80a7136:	2800      	cmp	r0, #0
 80a7138:	db05      	blt.n	80a7146 <strftime+0x39a>
 80a713a:	2264      	movs	r2, #100	; 0x64
 80a713c:	fb90 f1f2 	sdiv	r1, r0, r2
 80a7140:	fb02 0011 	mls	r0, r2, r1, r0
 80a7144:	e008      	b.n	80a7158 <strftime+0x3ac>
 80a7146:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80a714a:	f001 fca7 	bl	80a8a9c <abs>
 80a714e:	2264      	movs	r2, #100	; 0x64
 80a7150:	fb90 f3f2 	sdiv	r3, r0, r2
 80a7154:	fb03 0012 	mls	r0, r3, r2, r0
 80a7158:	f1b8 0f00 	cmp.w	r8, #0
 80a715c:	da06      	bge.n	80a716c <strftime+0x3c0>
 80a715e:	696a      	ldr	r2, [r5, #20]
 80a7160:	4b65      	ldr	r3, [pc, #404]	; (80a72f8 <strftime+0x54c>)
 80a7162:	429a      	cmp	r2, r3
 80a7164:	bfb8      	it	lt
 80a7166:	f04f 0801 	movlt.w	r8, #1
 80a716a:	e006      	b.n	80a717a <strftime+0x3ce>
 80a716c:	d005      	beq.n	80a717a <strftime+0x3ce>
 80a716e:	696a      	ldr	r2, [r5, #20]
 80a7170:	4b56      	ldr	r3, [pc, #344]	; (80a72cc <strftime+0x520>)
 80a7172:	429a      	cmp	r2, r3
 80a7174:	bfb8      	it	lt
 80a7176:	f04f 38ff 	movlt.w	r8, #4294967295
 80a717a:	2364      	movs	r3, #100	; 0x64
 80a717c:	4440      	add	r0, r8
 80a717e:	fb90 f2f3 	sdiv	r2, r0, r3
 80a7182:	fb03 0012 	mls	r0, r3, r2, r0
 80a7186:	4418      	add	r0, r3
 80a7188:	e1f8      	b.n	80a757c <strftime+0x7d0>
 80a718a:	4b50      	ldr	r3, [pc, #320]	; (80a72cc <strftime+0x520>)
 80a718c:	6969      	ldr	r1, [r5, #20]
 80a718e:	4628      	mov	r0, r5
 80a7190:	4299      	cmp	r1, r3
 80a7192:	bfac      	ite	ge
 80a7194:	2300      	movge	r3, #0
 80a7196:	2301      	movlt	r3, #1
 80a7198:	9108      	str	r1, [sp, #32]
 80a719a:	9307      	str	r3, [sp, #28]
 80a719c:	f7ff fda6 	bl	80a6cec <iso_year_adjust>
 80a71a0:	9908      	ldr	r1, [sp, #32]
 80a71a2:	4683      	mov	fp, r0
 80a71a4:	2900      	cmp	r1, #0
 80a71a6:	db04      	blt.n	80a71b2 <strftime+0x406>
 80a71a8:	2364      	movs	r3, #100	; 0x64
 80a71aa:	fb91 f3f3 	sdiv	r3, r1, r3
 80a71ae:	3313      	adds	r3, #19
 80a71b0:	e008      	b.n	80a71c4 <strftime+0x418>
 80a71b2:	f201 706c 	addw	r0, r1, #1900	; 0x76c
 80a71b6:	9108      	str	r1, [sp, #32]
 80a71b8:	f001 fc70 	bl	80a8a9c <abs>
 80a71bc:	2364      	movs	r3, #100	; 0x64
 80a71be:	fb90 f3f3 	sdiv	r3, r0, r3
 80a71c2:	9908      	ldr	r1, [sp, #32]
 80a71c4:	6968      	ldr	r0, [r5, #20]
 80a71c6:	2800      	cmp	r0, #0
 80a71c8:	db06      	blt.n	80a71d8 <strftime+0x42c>
 80a71ca:	f04f 0e64 	mov.w	lr, #100	; 0x64
 80a71ce:	fb90 fcfe 	sdiv	ip, r0, lr
 80a71d2:	fb0e 001c 	mls	r0, lr, ip, r0
 80a71d6:	e00d      	b.n	80a71f4 <strftime+0x448>
 80a71d8:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80a71dc:	9109      	str	r1, [sp, #36]	; 0x24
 80a71de:	9308      	str	r3, [sp, #32]
 80a71e0:	f001 fc5c 	bl	80a8a9c <abs>
 80a71e4:	f04f 0e64 	mov.w	lr, #100	; 0x64
 80a71e8:	fb90 fcfe 	sdiv	ip, r0, lr
 80a71ec:	fb0c 001e 	mls	r0, ip, lr, r0
 80a71f0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a71f2:	9b08      	ldr	r3, [sp, #32]
 80a71f4:	f1bb 0f00 	cmp.w	fp, #0
 80a71f8:	da08      	bge.n	80a720c <strftime+0x460>
 80a71fa:	6969      	ldr	r1, [r5, #20]
 80a71fc:	4a3e      	ldr	r2, [pc, #248]	; (80a72f8 <strftime+0x54c>)
 80a71fe:	4291      	cmp	r1, r2
 80a7200:	da0a      	bge.n	80a7218 <strftime+0x46c>
 80a7202:	f04f 0b01 	mov.w	fp, #1
 80a7206:	f8cd b01c 	str.w	fp, [sp, #28]
 80a720a:	e005      	b.n	80a7218 <strftime+0x46c>
 80a720c:	d004      	beq.n	80a7218 <strftime+0x46c>
 80a720e:	4a2f      	ldr	r2, [pc, #188]	; (80a72cc <strftime+0x520>)
 80a7210:	4291      	cmp	r1, r2
 80a7212:	bfb8      	it	lt
 80a7214:	f04f 3bff 	movlt.w	fp, #4294967295
 80a7218:	eb0b 0200 	add.w	r2, fp, r0
 80a721c:	1c50      	adds	r0, r2, #1
 80a721e:	d102      	bne.n	80a7226 <strftime+0x47a>
 80a7220:	3b01      	subs	r3, #1
 80a7222:	2263      	movs	r2, #99	; 0x63
 80a7224:	e003      	b.n	80a722e <strftime+0x482>
 80a7226:	2a64      	cmp	r2, #100	; 0x64
 80a7228:	bf04      	itt	eq
 80a722a:	3301      	addeq	r3, #1
 80a722c:	2200      	moveq	r2, #0
 80a722e:	2064      	movs	r0, #100	; 0x64
 80a7230:	fb00 2303 	mla	r3, r0, r3, r2
 80a7234:	9a07      	ldr	r2, [sp, #28]
 80a7236:	b142      	cbz	r2, 80a724a <strftime+0x49e>
 80a7238:	222d      	movs	r2, #45	; 0x2d
 80a723a:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
 80a723e:	f1b8 0f00 	cmp.w	r8, #0
 80a7242:	d013      	beq.n	80a726c <strftime+0x4c0>
 80a7244:	f108 38ff 	add.w	r8, r8, #4294967295
 80a7248:	e010      	b.n	80a726c <strftime+0x4c0>
 80a724a:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 80a724e:	d110      	bne.n	80a7272 <strftime+0x4c6>
 80a7250:	f242 720f 	movw	r2, #9999	; 0x270f
 80a7254:	4293      	cmp	r3, r2
 80a7256:	d90c      	bls.n	80a7272 <strftime+0x4c6>
 80a7258:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
 80a725c:	f1b8 0f00 	cmp.w	r8, #0
 80a7260:	d1f0      	bne.n	80a7244 <strftime+0x498>
 80a7262:	aa12      	add	r2, sp, #72	; 0x48
 80a7264:	2125      	movs	r1, #37	; 0x25
 80a7266:	f802 1d1f 	strb.w	r1, [r2, #-31]!
 80a726a:	e00a      	b.n	80a7282 <strftime+0x4d6>
 80a726c:	f10d 0229 	add.w	r2, sp, #41	; 0x29
 80a7270:	e000      	b.n	80a7274 <strftime+0x4c8>
 80a7272:	aa0a      	add	r2, sp, #40	; 0x28
 80a7274:	2125      	movs	r1, #37	; 0x25
 80a7276:	7011      	strb	r1, [r2, #0]
 80a7278:	f1ba 0f00 	cmp.w	sl, #0
 80a727c:	d101      	bne.n	80a7282 <strftime+0x4d6>
 80a727e:	1c50      	adds	r0, r2, #1
 80a7280:	e002      	b.n	80a7288 <strftime+0x4dc>
 80a7282:	2130      	movs	r1, #48	; 0x30
 80a7284:	1c90      	adds	r0, r2, #2
 80a7286:	7051      	strb	r1, [r2, #1]
 80a7288:	491c      	ldr	r1, [pc, #112]	; (80a72fc <strftime+0x550>)
 80a728a:	9307      	str	r3, [sp, #28]
 80a728c:	f7ff fd26 	bl	80a6cdc <strcpy>
 80a7290:	9b07      	ldr	r3, [sp, #28]
 80a7292:	9300      	str	r3, [sp, #0]
 80a7294:	e1ac      	b.n	80a75f0 <strftime+0x844>
 80a7296:	4a14      	ldr	r2, [pc, #80]	; (80a72e8 <strftime+0x53c>)
 80a7298:	4912      	ldr	r1, [pc, #72]	; (80a72e4 <strftime+0x538>)
 80a729a:	68ab      	ldr	r3, [r5, #8]
 80a729c:	286b      	cmp	r0, #107	; 0x6b
 80a729e:	bf08      	it	eq
 80a72a0:	460a      	moveq	r2, r1
 80a72a2:	e6e4      	b.n	80a706e <strftime+0x2c2>
 80a72a4:	68a9      	ldr	r1, [r5, #8]
 80a72a6:	230c      	movs	r3, #12
 80a72a8:	b131      	cbz	r1, 80a72b8 <strftime+0x50c>
 80a72aa:	4299      	cmp	r1, r3
 80a72ac:	bf16      	itet	ne
 80a72ae:	fb91 f2f3 	sdivne	r2, r1, r3
 80a72b2:	460b      	moveq	r3, r1
 80a72b4:	fb03 1312 	mlsne	r3, r3, r2, r1
 80a72b8:	4a0a      	ldr	r2, [pc, #40]	; (80a72e4 <strftime+0x538>)
 80a72ba:	490b      	ldr	r1, [pc, #44]	; (80a72e8 <strftime+0x53c>)
 80a72bc:	2849      	cmp	r0, #73	; 0x49
 80a72be:	bf08      	it	eq
 80a72c0:	460a      	moveq	r2, r1
 80a72c2:	e6d4      	b.n	80a706e <strftime+0x2c2>
 80a72c4:	69eb      	ldr	r3, [r5, #28]
 80a72c6:	4a0e      	ldr	r2, [pc, #56]	; (80a7300 <strftime+0x554>)
 80a72c8:	3301      	adds	r3, #1
 80a72ca:	e6d0      	b.n	80a706e <strftime+0x2c2>
 80a72cc:	fffff894 	.word	0xfffff894
 80a72d0:	080aa57f 	.word	0x080aa57f
 80a72d4:	080a9f53 	.word	0x080a9f53
 80a72d8:	080aa570 	.word	0x080aa570
 80a72dc:	080aa577 	.word	0x080aa577
 80a72e0:	080aa581 	.word	0x080aa581
 80a72e4:	080aa583 	.word	0x080aa583
 80a72e8:	080aa591 	.word	0x080aa591
 80a72ec:	080aa587 	.word	0x080aa587
 80a72f0:	080a9eb7 	.word	0x080a9eb7
 80a72f4:	080aa596 	.word	0x080aa596
 80a72f8:	fffff895 	.word	0xfffff895
 80a72fc:	080aa59e 	.word	0x080aa59e
 80a7300:	080aa5a2 	.word	0x080aa5a2
 80a7304:	692b      	ldr	r3, [r5, #16]
 80a7306:	3301      	adds	r3, #1
 80a7308:	e13c      	b.n	80a7584 <strftime+0x7d8>
 80a730a:	686b      	ldr	r3, [r5, #4]
 80a730c:	e13a      	b.n	80a7584 <strftime+0x7d8>
 80a730e:	9b02      	ldr	r3, [sp, #8]
 80a7310:	429c      	cmp	r4, r3
 80a7312:	f080 81f5 	bcs.w	80a7700 <strftime+0x954>
 80a7316:	230a      	movs	r3, #10
 80a7318:	e1e5      	b.n	80a76e6 <strftime+0x93a>
 80a731a:	68ab      	ldr	r3, [r5, #8]
 80a731c:	9a03      	ldr	r2, [sp, #12]
 80a731e:	2b0b      	cmp	r3, #11
 80a7320:	bfcc      	ite	gt
 80a7322:	23a4      	movgt	r3, #164	; 0xa4
 80a7324:	23a0      	movle	r3, #160	; 0xa0
 80a7326:	4413      	add	r3, r2
 80a7328:	f8d3 8004 	ldr.w	r8, [r3, #4]
 80a732c:	4640      	mov	r0, r8
 80a732e:	f000 f9f1 	bl	80a7714 <strlen>
 80a7332:	4642      	mov	r2, r8
 80a7334:	4bb1      	ldr	r3, [pc, #708]	; (80a75fc <strftime+0x850>)
 80a7336:	1939      	adds	r1, r7, r4
 80a7338:	f8d3 e000 	ldr.w	lr, [r3]
 80a733c:	4420      	add	r0, r4
 80a733e:	4284      	cmp	r4, r0
 80a7340:	f000 81d3 	beq.w	80a76ea <strftime+0x93e>
 80a7344:	9b02      	ldr	r3, [sp, #8]
 80a7346:	429c      	cmp	r4, r3
 80a7348:	f080 81da 	bcs.w	80a7700 <strftime+0x954>
 80a734c:	f899 3000 	ldrb.w	r3, [r9]
 80a7350:	3401      	adds	r4, #1
 80a7352:	2b50      	cmp	r3, #80	; 0x50
 80a7354:	7813      	ldrb	r3, [r2, #0]
 80a7356:	d10a      	bne.n	80a736e <strftime+0x5c2>
 80a7358:	eb0e 0c03 	add.w	ip, lr, r3
 80a735c:	f89c c001 	ldrb.w	ip, [ip, #1]
 80a7360:	f00c 0c03 	and.w	ip, ip, #3
 80a7364:	f1bc 0f01 	cmp.w	ip, #1
 80a7368:	bf08      	it	eq
 80a736a:	3320      	addeq	r3, #32
 80a736c:	b2db      	uxtb	r3, r3
 80a736e:	f801 3b01 	strb.w	r3, [r1], #1
 80a7372:	3201      	adds	r2, #1
 80a7374:	e7e3      	b.n	80a733e <strftime+0x592>
 80a7376:	686b      	ldr	r3, [r5, #4]
 80a7378:	4aa1      	ldr	r2, [pc, #644]	; (80a7600 <strftime+0x854>)
 80a737a:	9300      	str	r3, [sp, #0]
 80a737c:	68ab      	ldr	r3, [r5, #8]
 80a737e:	e139      	b.n	80a75f4 <strftime+0x848>
 80a7380:	6a2b      	ldr	r3, [r5, #32]
 80a7382:	2b00      	cmp	r3, #0
 80a7384:	db17      	blt.n	80a73b6 <strftime+0x60a>
 80a7386:	f001 fa01 	bl	80a878c <__tz_lock>
 80a738a:	9b06      	ldr	r3, [sp, #24]
 80a738c:	b91b      	cbnz	r3, 80a7396 <strftime+0x5ea>
 80a738e:	f001 f9ff 	bl	80a8790 <_tzset_unlocked>
 80a7392:	2301      	movs	r3, #1
 80a7394:	9306      	str	r3, [sp, #24]
 80a7396:	f001 fee7 	bl	80a9168 <__gettzinfo>
 80a739a:	6a2b      	ldr	r3, [r5, #32]
 80a739c:	221c      	movs	r2, #28
 80a739e:	2b00      	cmp	r3, #0
 80a73a0:	bfd4      	ite	le
 80a73a2:	2300      	movle	r3, #0
 80a73a4:	2301      	movgt	r3, #1
 80a73a6:	fb02 0003 	mla	r0, r2, r3, r0
 80a73aa:	6a03      	ldr	r3, [r0, #32]
 80a73ac:	f1c3 0800 	rsb	r8, r3, #0
 80a73b0:	f001 f9ed 	bl	80a878e <__tz_unlock>
 80a73b4:	e001      	b.n	80a73ba <strftime+0x60e>
 80a73b6:	f04f 0800 	mov.w	r8, #0
 80a73ba:	f8d5 e014 	ldr.w	lr, [r5, #20]
 80a73be:	ebc4 0c06 	rsb	ip, r4, r6
 80a73c2:	4670      	mov	r0, lr
 80a73c4:	f1be 0245 	subs.w	r2, lr, #69	; 0x45
 80a73c8:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80a73cc:	f141 33ff 	adc.w	r3, r1, #4294967295
 80a73d0:	2a00      	cmp	r2, #0
 80a73d2:	f173 0b00 	sbcs.w	fp, r3, #0
 80a73d6:	eb07 0a04 	add.w	sl, r7, r4
 80a73da:	da03      	bge.n	80a73e4 <strftime+0x638>
 80a73dc:	f1be 0242 	subs.w	r2, lr, #66	; 0x42
 80a73e0:	f141 33ff 	adc.w	r3, r1, #4294967295
 80a73e4:	0891      	lsrs	r1, r2, #2
 80a73e6:	ea41 7183 	orr.w	r1, r1, r3, lsl #30
 80a73ea:	109b      	asrs	r3, r3, #2
 80a73ec:	9104      	str	r1, [sp, #16]
 80a73ee:	9305      	str	r3, [sp, #20]
 80a73f0:	f10e 31ff 	add.w	r1, lr, #4294967295
 80a73f4:	2364      	movs	r3, #100	; 0x64
 80a73f6:	fb91 f1f3 	sdiv	r1, r1, r3
 80a73fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80a73fe:	1a52      	subs	r2, r2, r1
 80a7400:	eb63 73e1 	sbc.w	r3, r3, r1, asr #31
 80a7404:	f20e 102b 	addw	r0, lr, #299	; 0x12b
 80a7408:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80a740c:	fb90 f1f1 	sdiv	r1, r0, r1
 80a7410:	1852      	adds	r2, r2, r1
 80a7412:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
 80a7416:	f240 116d 	movw	r1, #365	; 0x16d
 80a741a:	f1ae 0e46 	sub.w	lr, lr, #70	; 0x46
 80a741e:	fb01 fe0e 	mul.w	lr, r1, lr
 80a7422:	69e9      	ldr	r1, [r5, #28]
 80a7424:	eb12 020e 	adds.w	r2, r2, lr
 80a7428:	eb43 73ee 	adc.w	r3, r3, lr, asr #31
 80a742c:	1852      	adds	r2, r2, r1
 80a742e:	f04f 0e18 	mov.w	lr, #24
 80a7432:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
 80a7436:	fba2 010e 	umull	r0, r1, r2, lr
 80a743a:	fb0e 1103 	mla	r1, lr, r3, r1
 80a743e:	68ab      	ldr	r3, [r5, #8]
 80a7440:	f04f 0e3c 	mov.w	lr, #60	; 0x3c
 80a7444:	18c0      	adds	r0, r0, r3
 80a7446:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
 80a744a:	fba0 230e 	umull	r2, r3, r0, lr
 80a744e:	fb0e 3301 	mla	r3, lr, r1, r3
 80a7452:	6869      	ldr	r1, [r5, #4]
 80a7454:	1852      	adds	r2, r2, r1
 80a7456:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
 80a745a:	fba2 010e 	umull	r0, r1, r2, lr
 80a745e:	fb0e 1103 	mla	r1, lr, r3, r1
 80a7462:	682b      	ldr	r3, [r5, #0]
 80a7464:	4a67      	ldr	r2, [pc, #412]	; (80a7604 <strftime+0x858>)
 80a7466:	18c0      	adds	r0, r0, r3
 80a7468:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
 80a746c:	ebb0 0008 	subs.w	r0, r0, r8
 80a7470:	eb61 71e8 	sbc.w	r1, r1, r8, asr #31
 80a7474:	e9cd 0100 	strd	r0, r1, [sp]
 80a7478:	4661      	mov	r1, ip
 80a747a:	4650      	mov	r0, sl
 80a747c:	f7fc fa88 	bl	80a3990 <sniprintf>
 80a7480:	e5f9      	b.n	80a7076 <strftime+0x2ca>
 80a7482:	682b      	ldr	r3, [r5, #0]
 80a7484:	e07e      	b.n	80a7584 <strftime+0x7d8>
 80a7486:	9b02      	ldr	r3, [sp, #8]
 80a7488:	429c      	cmp	r4, r3
 80a748a:	f080 8139 	bcs.w	80a7700 <strftime+0x954>
 80a748e:	2309      	movs	r3, #9
 80a7490:	e129      	b.n	80a76e6 <strftime+0x93a>
 80a7492:	682b      	ldr	r3, [r5, #0]
 80a7494:	4a5c      	ldr	r2, [pc, #368]	; (80a7608 <strftime+0x85c>)
 80a7496:	9301      	str	r3, [sp, #4]
 80a7498:	686b      	ldr	r3, [r5, #4]
 80a749a:	9300      	str	r3, [sp, #0]
 80a749c:	68ab      	ldr	r3, [r5, #8]
 80a749e:	1b31      	subs	r1, r6, r4
 80a74a0:	1938      	adds	r0, r7, r4
 80a74a2:	e60e      	b.n	80a70c2 <strftime+0x316>
 80a74a4:	9b02      	ldr	r3, [sp, #8]
 80a74a6:	429c      	cmp	r4, r3
 80a74a8:	f080 812a 	bcs.w	80a7700 <strftime+0x954>
 80a74ac:	69ab      	ldr	r3, [r5, #24]
 80a74ae:	1c62      	adds	r2, r4, #1
 80a74b0:	b90b      	cbnz	r3, 80a74b6 <strftime+0x70a>
 80a74b2:	2337      	movs	r3, #55	; 0x37
 80a74b4:	e000      	b.n	80a74b8 <strftime+0x70c>
 80a74b6:	3330      	adds	r3, #48	; 0x30
 80a74b8:	553b      	strb	r3, [r7, r4]
 80a74ba:	4614      	mov	r4, r2
 80a74bc:	e115      	b.n	80a76ea <strftime+0x93e>
 80a74be:	69eb      	ldr	r3, [r5, #28]
 80a74c0:	69aa      	ldr	r2, [r5, #24]
 80a74c2:	3307      	adds	r3, #7
 80a74c4:	1a9b      	subs	r3, r3, r2
 80a74c6:	2207      	movs	r2, #7
 80a74c8:	fb93 f3f2 	sdiv	r3, r3, r2
 80a74cc:	e05a      	b.n	80a7584 <strftime+0x7d8>
 80a74ce:	4628      	mov	r0, r5
 80a74d0:	f7ff fc0c 	bl	80a6cec <iso_year_adjust>
 80a74d4:	69aa      	ldr	r2, [r5, #24]
 80a74d6:	b10a      	cbz	r2, 80a74dc <strftime+0x730>
 80a74d8:	1e53      	subs	r3, r2, #1
 80a74da:	e000      	b.n	80a74de <strftime+0x732>
 80a74dc:	2306      	movs	r3, #6
 80a74de:	2800      	cmp	r0, #0
 80a74e0:	dc2f      	bgt.n	80a7542 <strftime+0x796>
 80a74e2:	69ea      	ldr	r2, [r5, #28]
 80a74e4:	d101      	bne.n	80a74ea <strftime+0x73e>
 80a74e6:	320a      	adds	r2, #10
 80a74e8:	e03b      	b.n	80a7562 <strftime+0x7b6>
 80a74ea:	f240 716b 	movw	r1, #1899	; 0x76b
 80a74ee:	1a9a      	subs	r2, r3, r2
 80a74f0:	696b      	ldr	r3, [r5, #20]
 80a74f2:	2b00      	cmp	r3, #0
 80a74f4:	bfb4      	ite	lt
 80a74f6:	4608      	movlt	r0, r1
 80a74f8:	f06f 0064 	mvnge.w	r0, #100	; 0x64
 80a74fc:	4418      	add	r0, r3
 80a74fe:	0781      	lsls	r1, r0, #30
 80a7500:	d107      	bne.n	80a7512 <strftime+0x766>
 80a7502:	f04f 0e64 	mov.w	lr, #100	; 0x64
 80a7506:	4601      	mov	r1, r0
 80a7508:	fb90 f0fe 	sdiv	r0, r0, lr
 80a750c:	fb0e 1110 	mls	r1, lr, r0, r1
 80a7510:	b981      	cbnz	r1, 80a7534 <strftime+0x788>
 80a7512:	f240 716b 	movw	r1, #1899	; 0x76b
 80a7516:	2b00      	cmp	r3, #0
 80a7518:	bfa8      	it	ge
 80a751a:	f06f 0164 	mvnge.w	r1, #100	; 0x64
 80a751e:	4419      	add	r1, r3
 80a7520:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80a7524:	fb91 f0f3 	sdiv	r0, r1, r3
 80a7528:	fb03 1110 	mls	r1, r3, r0, r1
 80a752c:	fab1 f181 	clz	r1, r1
 80a7530:	0949      	lsrs	r1, r1, #5
 80a7532:	e000      	b.n	80a7536 <strftime+0x78a>
 80a7534:	2101      	movs	r1, #1
 80a7536:	1a52      	subs	r2, r2, r1
 80a7538:	2a05      	cmp	r2, #5
 80a753a:	bfb4      	ite	lt
 80a753c:	2335      	movlt	r3, #53	; 0x35
 80a753e:	2334      	movge	r3, #52	; 0x34
 80a7540:	e020      	b.n	80a7584 <strftime+0x7d8>
 80a7542:	2301      	movs	r3, #1
 80a7544:	e01e      	b.n	80a7584 <strftime+0x7d8>
 80a7546:	9b02      	ldr	r3, [sp, #8]
 80a7548:	429c      	cmp	r4, r3
 80a754a:	f080 80d9 	bcs.w	80a7700 <strftime+0x954>
 80a754e:	69ab      	ldr	r3, [r5, #24]
 80a7550:	3330      	adds	r3, #48	; 0x30
 80a7552:	e0c8      	b.n	80a76e6 <strftime+0x93a>
 80a7554:	69aa      	ldr	r2, [r5, #24]
 80a7556:	b10a      	cbz	r2, 80a755c <strftime+0x7b0>
 80a7558:	1e53      	subs	r3, r2, #1
 80a755a:	e000      	b.n	80a755e <strftime+0x7b2>
 80a755c:	2306      	movs	r3, #6
 80a755e:	69ea      	ldr	r2, [r5, #28]
 80a7560:	3207      	adds	r2, #7
 80a7562:	1ad2      	subs	r2, r2, r3
 80a7564:	2307      	movs	r3, #7
 80a7566:	fb92 f3f3 	sdiv	r3, r2, r3
 80a756a:	e00b      	b.n	80a7584 <strftime+0x7d8>
 80a756c:	6968      	ldr	r0, [r5, #20]
 80a756e:	2800      	cmp	r0, #0
 80a7570:	da03      	bge.n	80a757a <strftime+0x7ce>
 80a7572:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80a7576:	f001 fa91 	bl	80a8a9c <abs>
 80a757a:	2364      	movs	r3, #100	; 0x64
 80a757c:	fb90 f2f3 	sdiv	r2, r0, r3
 80a7580:	fb02 0313 	mls	r3, r2, r3, r0
 80a7584:	4a21      	ldr	r2, [pc, #132]	; (80a760c <strftime+0x860>)
 80a7586:	e572      	b.n	80a706e <strftime+0x2c2>
 80a7588:	696b      	ldr	r3, [r5, #20]
 80a758a:	4a21      	ldr	r2, [pc, #132]	; (80a7610 <strftime+0x864>)
 80a758c:	f203 7b6c 	addw	fp, r3, #1900	; 0x76c
 80a7590:	4293      	cmp	r3, r2
 80a7592:	da05      	bge.n	80a75a0 <strftime+0x7f4>
 80a7594:	232d      	movs	r3, #45	; 0x2d
 80a7596:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 80a759a:	f1cb 0b00 	rsb	fp, fp, #0
 80a759e:	e008      	b.n	80a75b2 <strftime+0x806>
 80a75a0:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 80a75a4:	d10d      	bne.n	80a75c2 <strftime+0x816>
 80a75a6:	f242 730f 	movw	r3, #9999	; 0x270f
 80a75aa:	459b      	cmp	fp, r3
 80a75ac:	d911      	bls.n	80a75d2 <strftime+0x826>
 80a75ae:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
 80a75b2:	f1b8 0f00 	cmp.w	r8, #0
 80a75b6:	d001      	beq.n	80a75bc <strftime+0x810>
 80a75b8:	f108 38ff 	add.w	r8, r8, #4294967295
 80a75bc:	f10d 0329 	add.w	r3, sp, #41	; 0x29
 80a75c0:	e000      	b.n	80a75c4 <strftime+0x818>
 80a75c2:	ab0a      	add	r3, sp, #40	; 0x28
 80a75c4:	2225      	movs	r2, #37	; 0x25
 80a75c6:	701a      	strb	r2, [r3, #0]
 80a75c8:	f1ba 0f00 	cmp.w	sl, #0
 80a75cc:	d108      	bne.n	80a75e0 <strftime+0x834>
 80a75ce:	1c58      	adds	r0, r3, #1
 80a75d0:	e009      	b.n	80a75e6 <strftime+0x83a>
 80a75d2:	f1b8 0f00 	cmp.w	r8, #0
 80a75d6:	d1f4      	bne.n	80a75c2 <strftime+0x816>
 80a75d8:	2325      	movs	r3, #37	; 0x25
 80a75da:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 80a75de:	ab0a      	add	r3, sp, #40	; 0x28
 80a75e0:	2230      	movs	r2, #48	; 0x30
 80a75e2:	1c98      	adds	r0, r3, #2
 80a75e4:	705a      	strb	r2, [r3, #1]
 80a75e6:	490b      	ldr	r1, [pc, #44]	; (80a7614 <strftime+0x868>)
 80a75e8:	f7ff fb78 	bl	80a6cdc <strcpy>
 80a75ec:	f8cd b000 	str.w	fp, [sp]
 80a75f0:	4643      	mov	r3, r8
 80a75f2:	aa0a      	add	r2, sp, #40	; 0x28
 80a75f4:	1b31      	subs	r1, r6, r4
 80a75f6:	1938      	adds	r0, r7, r4
 80a75f8:	e03f      	b.n	80a767a <strftime+0x8ce>
 80a75fa:	bf00      	nop
 80a75fc:	20000014 	.word	0x20000014
 80a7600:	080aa5b1 	.word	0x080aa5b1
 80a7604:	080aa5a7 	.word	0x080aa5a7
 80a7608:	080aa5ac 	.word	0x080aa5ac
 80a760c:	080aa591 	.word	0x080aa591
 80a7610:	fffff894 	.word	0xfffff894
 80a7614:	080aa59e 	.word	0x080aa59e
 80a7618:	6a2b      	ldr	r3, [r5, #32]
 80a761a:	2b00      	cmp	r3, #0
 80a761c:	db65      	blt.n	80a76ea <strftime+0x93e>
 80a761e:	f001 f8b5 	bl	80a878c <__tz_lock>
 80a7622:	9b06      	ldr	r3, [sp, #24]
 80a7624:	b91b      	cbnz	r3, 80a762e <strftime+0x882>
 80a7626:	f001 f8b3 	bl	80a8790 <_tzset_unlocked>
 80a762a:	2301      	movs	r3, #1
 80a762c:	9306      	str	r3, [sp, #24]
 80a762e:	f001 fd9b 	bl	80a9168 <__gettzinfo>
 80a7632:	6a2b      	ldr	r3, [r5, #32]
 80a7634:	221c      	movs	r2, #28
 80a7636:	2b00      	cmp	r3, #0
 80a7638:	bfd4      	ite	le
 80a763a:	2300      	movle	r3, #0
 80a763c:	2301      	movgt	r3, #1
 80a763e:	fb02 0003 	mla	r0, r2, r3, r0
 80a7642:	6a03      	ldr	r3, [r0, #32]
 80a7644:	eb07 0a04 	add.w	sl, r7, r4
 80a7648:	f1c3 0800 	rsb	r8, r3, #0
 80a764c:	f001 f89f 	bl	80a878e <__tz_unlock>
 80a7650:	233c      	movs	r3, #60	; 0x3c
 80a7652:	fb98 f0f3 	sdiv	r0, r8, r3
 80a7656:	9307      	str	r3, [sp, #28]
 80a7658:	f001 fe20 	bl	80a929c <labs>
 80a765c:	9b07      	ldr	r3, [sp, #28]
 80a765e:	ebc4 0b06 	rsb	fp, r4, r6
 80a7662:	fb90 f2f3 	sdiv	r2, r0, r3
 80a7666:	fb02 0013 	mls	r0, r2, r3, r0
 80a766a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80a766e:	9000      	str	r0, [sp, #0]
 80a7670:	fb98 f3f3 	sdiv	r3, r8, r3
 80a7674:	4659      	mov	r1, fp
 80a7676:	4650      	mov	r0, sl
 80a7678:	4a24      	ldr	r2, [pc, #144]	; (80a770c <strftime+0x960>)
 80a767a:	f7fc f989 	bl	80a3990 <sniprintf>
 80a767e:	e4fa      	b.n	80a7076 <strftime+0x2ca>
 80a7680:	4404      	add	r4, r0
 80a7682:	42a6      	cmp	r6, r4
 80a7684:	d831      	bhi.n	80a76ea <strftime+0x93e>
 80a7686:	e03b      	b.n	80a7700 <strftime+0x954>
 80a7688:	6a2b      	ldr	r3, [r5, #32]
 80a768a:	2b00      	cmp	r3, #0
 80a768c:	db2d      	blt.n	80a76ea <strftime+0x93e>
 80a768e:	f001 f87d 	bl	80a878c <__tz_lock>
 80a7692:	9b06      	ldr	r3, [sp, #24]
 80a7694:	b91b      	cbnz	r3, 80a769e <strftime+0x8f2>
 80a7696:	f001 f87b 	bl	80a8790 <_tzset_unlocked>
 80a769a:	2301      	movs	r3, #1
 80a769c:	9306      	str	r3, [sp, #24]
 80a769e:	6a2b      	ldr	r3, [r5, #32]
 80a76a0:	4a1b      	ldr	r2, [pc, #108]	; (80a7710 <strftime+0x964>)
 80a76a2:	2b00      	cmp	r3, #0
 80a76a4:	bfd4      	ite	le
 80a76a6:	2300      	movle	r3, #0
 80a76a8:	2301      	movgt	r3, #1
 80a76aa:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
 80a76ae:	4640      	mov	r0, r8
 80a76b0:	f000 f830 	bl	80a7714 <strlen>
 80a76b4:	f108 38ff 	add.w	r8, r8, #4294967295
 80a76b8:	193b      	adds	r3, r7, r4
 80a76ba:	4420      	add	r0, r4
 80a76bc:	4284      	cmp	r4, r0
 80a76be:	d00b      	beq.n	80a76d8 <strftime+0x92c>
 80a76c0:	9a02      	ldr	r2, [sp, #8]
 80a76c2:	4294      	cmp	r4, r2
 80a76c4:	d205      	bcs.n	80a76d2 <strftime+0x926>
 80a76c6:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 80a76ca:	3401      	adds	r4, #1
 80a76cc:	f803 2b01 	strb.w	r2, [r3], #1
 80a76d0:	e7f4      	b.n	80a76bc <strftime+0x910>
 80a76d2:	f001 f85c 	bl	80a878e <__tz_unlock>
 80a76d6:	e013      	b.n	80a7700 <strftime+0x954>
 80a76d8:	f001 f859 	bl	80a878e <__tz_unlock>
 80a76dc:	e005      	b.n	80a76ea <strftime+0x93e>
 80a76de:	9b02      	ldr	r3, [sp, #8]
 80a76e0:	429c      	cmp	r4, r3
 80a76e2:	d20d      	bcs.n	80a7700 <strftime+0x954>
 80a76e4:	2325      	movs	r3, #37	; 0x25
 80a76e6:	553b      	strb	r3, [r7, r4]
 80a76e8:	3401      	adds	r4, #1
 80a76ea:	f899 3000 	ldrb.w	r3, [r9]
 80a76ee:	b11b      	cbz	r3, 80a76f8 <strftime+0x94c>
 80a76f0:	f109 0901 	add.w	r9, r9, #1
 80a76f4:	f7ff bb69 	b.w	80a6dca <strftime+0x1e>
 80a76f8:	b126      	cbz	r6, 80a7704 <strftime+0x958>
 80a76fa:	2300      	movs	r3, #0
 80a76fc:	553b      	strb	r3, [r7, r4]
 80a76fe:	e001      	b.n	80a7704 <strftime+0x958>
 80a7700:	2000      	movs	r0, #0
 80a7702:	e000      	b.n	80a7706 <strftime+0x95a>
 80a7704:	4620      	mov	r0, r4
 80a7706:	b013      	add	sp, #76	; 0x4c
 80a7708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a770c:	080aa5bb 	.word	0x080aa5bb
 80a7710:	200000b4 	.word	0x200000b4

080a7714 <strlen>:
 80a7714:	4603      	mov	r3, r0
 80a7716:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a771a:	2a00      	cmp	r2, #0
 80a771c:	d1fb      	bne.n	80a7716 <strlen+0x2>
 80a771e:	1a18      	subs	r0, r3, r0
 80a7720:	3801      	subs	r0, #1
 80a7722:	4770      	bx	lr

080a7724 <strncmp>:
 80a7724:	b530      	push	{r4, r5, lr}
 80a7726:	b182      	cbz	r2, 80a774a <strncmp+0x26>
 80a7728:	1e45      	subs	r5, r0, #1
 80a772a:	3901      	subs	r1, #1
 80a772c:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80a7730:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80a7734:	42a3      	cmp	r3, r4
 80a7736:	d106      	bne.n	80a7746 <strncmp+0x22>
 80a7738:	43ec      	mvns	r4, r5
 80a773a:	4414      	add	r4, r2
 80a773c:	42e0      	cmn	r0, r4
 80a773e:	d001      	beq.n	80a7744 <strncmp+0x20>
 80a7740:	2b00      	cmp	r3, #0
 80a7742:	d1f3      	bne.n	80a772c <strncmp+0x8>
 80a7744:	461c      	mov	r4, r3
 80a7746:	1b18      	subs	r0, r3, r4
 80a7748:	bd30      	pop	{r4, r5, pc}
 80a774a:	4610      	mov	r0, r2
 80a774c:	bd30      	pop	{r4, r5, pc}

080a774e <strncpy>:
 80a774e:	4603      	mov	r3, r0
 80a7750:	b510      	push	{r4, lr}
 80a7752:	b142      	cbz	r2, 80a7766 <strncpy+0x18>
 80a7754:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a7758:	3a01      	subs	r2, #1
 80a775a:	f803 4b01 	strb.w	r4, [r3], #1
 80a775e:	2c00      	cmp	r4, #0
 80a7760:	d1f7      	bne.n	80a7752 <strncpy+0x4>
 80a7762:	441a      	add	r2, r3
 80a7764:	e000      	b.n	80a7768 <strncpy+0x1a>
 80a7766:	bd10      	pop	{r4, pc}
 80a7768:	4293      	cmp	r3, r2
 80a776a:	d002      	beq.n	80a7772 <strncpy+0x24>
 80a776c:	f803 4b01 	strb.w	r4, [r3], #1
 80a7770:	e7fa      	b.n	80a7768 <strncpy+0x1a>
 80a7772:	bd10      	pop	{r4, pc}

080a7774 <sulp>:
 80a7774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a7778:	460f      	mov	r7, r1
 80a777a:	4690      	mov	r8, r2
 80a777c:	f002 f858 	bl	80a9830 <__ulp>
 80a7780:	4604      	mov	r4, r0
 80a7782:	460d      	mov	r5, r1
 80a7784:	f1b8 0f00 	cmp.w	r8, #0
 80a7788:	d011      	beq.n	80a77ae <sulp+0x3a>
 80a778a:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80a778e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80a7792:	2b00      	cmp	r3, #0
 80a7794:	dd0b      	ble.n	80a77ae <sulp+0x3a>
 80a7796:	051b      	lsls	r3, r3, #20
 80a7798:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80a779c:	2400      	movs	r4, #0
 80a779e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80a77a2:	4622      	mov	r2, r4
 80a77a4:	462b      	mov	r3, r5
 80a77a6:	f7fe f913 	bl	80a59d0 <__aeabi_dmul>
 80a77aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a77ae:	4620      	mov	r0, r4
 80a77b0:	4629      	mov	r1, r5
 80a77b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080a77b8 <_strtod_r>:
 80a77b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a77bc:	4682      	mov	sl, r0
 80a77be:	460c      	mov	r4, r1
 80a77c0:	b09d      	sub	sp, #116	; 0x74
 80a77c2:	2300      	movs	r3, #0
 80a77c4:	9213      	str	r2, [sp, #76]	; 0x4c
 80a77c6:	9318      	str	r3, [sp, #96]	; 0x60
 80a77c8:	f04f 0800 	mov.w	r8, #0
 80a77cc:	f04f 0900 	mov.w	r9, #0
 80a77d0:	9117      	str	r1, [sp, #92]	; 0x5c
 80a77d2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a77d4:	781a      	ldrb	r2, [r3, #0]
 80a77d6:	2a0d      	cmp	r2, #13
 80a77d8:	d805      	bhi.n	80a77e6 <_strtod_r+0x2e>
 80a77da:	2a09      	cmp	r2, #9
 80a77dc:	d213      	bcs.n	80a7806 <_strtod_r+0x4e>
 80a77de:	2a00      	cmp	r2, #0
 80a77e0:	f000 81ad 	beq.w	80a7b3e <_strtod_r+0x386>
 80a77e4:	e012      	b.n	80a780c <_strtod_r+0x54>
 80a77e6:	2a2b      	cmp	r2, #43	; 0x2b
 80a77e8:	d004      	beq.n	80a77f4 <_strtod_r+0x3c>
 80a77ea:	2a2d      	cmp	r2, #45	; 0x2d
 80a77ec:	d004      	beq.n	80a77f8 <_strtod_r+0x40>
 80a77ee:	2a20      	cmp	r2, #32
 80a77f0:	d10c      	bne.n	80a780c <_strtod_r+0x54>
 80a77f2:	e008      	b.n	80a7806 <_strtod_r+0x4e>
 80a77f4:	2200      	movs	r2, #0
 80a77f6:	e000      	b.n	80a77fa <_strtod_r+0x42>
 80a77f8:	2201      	movs	r2, #1
 80a77fa:	920c      	str	r2, [sp, #48]	; 0x30
 80a77fc:	1c5a      	adds	r2, r3, #1
 80a77fe:	9217      	str	r2, [sp, #92]	; 0x5c
 80a7800:	785b      	ldrb	r3, [r3, #1]
 80a7802:	b92b      	cbnz	r3, 80a7810 <_strtod_r+0x58>
 80a7804:	e19b      	b.n	80a7b3e <_strtod_r+0x386>
 80a7806:	3301      	adds	r3, #1
 80a7808:	9317      	str	r3, [sp, #92]	; 0x5c
 80a780a:	e7e2      	b.n	80a77d2 <_strtod_r+0x1a>
 80a780c:	2300      	movs	r3, #0
 80a780e:	930c      	str	r3, [sp, #48]	; 0x30
 80a7810:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 80a7812:	782b      	ldrb	r3, [r5, #0]
 80a7814:	2b30      	cmp	r3, #48	; 0x30
 80a7816:	d15c      	bne.n	80a78d2 <_strtod_r+0x11a>
 80a7818:	786b      	ldrb	r3, [r5, #1]
 80a781a:	2b58      	cmp	r3, #88	; 0x58
 80a781c:	d001      	beq.n	80a7822 <_strtod_r+0x6a>
 80a781e:	2b78      	cmp	r3, #120	; 0x78
 80a7820:	d14c      	bne.n	80a78bc <_strtod_r+0x104>
 80a7822:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80a7824:	4aa8      	ldr	r2, [pc, #672]	; (80a7ac8 <_strtod_r+0x310>)
 80a7826:	9301      	str	r3, [sp, #4]
 80a7828:	ab18      	add	r3, sp, #96	; 0x60
 80a782a:	9300      	str	r3, [sp, #0]
 80a782c:	a917      	add	r1, sp, #92	; 0x5c
 80a782e:	ab19      	add	r3, sp, #100	; 0x64
 80a7830:	4650      	mov	r0, sl
 80a7832:	f001 f982 	bl	80a8b3a <__gethex>
 80a7836:	f010 0607 	ands.w	r6, r0, #7
 80a783a:	4604      	mov	r4, r0
 80a783c:	f000 8585 	beq.w	80a834a <_strtod_r+0xb92>
 80a7840:	2e06      	cmp	r6, #6
 80a7842:	d105      	bne.n	80a7850 <_strtod_r+0x98>
 80a7844:	3501      	adds	r5, #1
 80a7846:	2300      	movs	r3, #0
 80a7848:	9517      	str	r5, [sp, #92]	; 0x5c
 80a784a:	930c      	str	r3, [sp, #48]	; 0x30
 80a784c:	f000 bd7d 	b.w	80a834a <_strtod_r+0xb92>
 80a7850:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80a7852:	b13a      	cbz	r2, 80a7864 <_strtod_r+0xac>
 80a7854:	2135      	movs	r1, #53	; 0x35
 80a7856:	a81a      	add	r0, sp, #104	; 0x68
 80a7858:	f002 f8d1 	bl	80a99fe <__copybits>
 80a785c:	9918      	ldr	r1, [sp, #96]	; 0x60
 80a785e:	4650      	mov	r0, sl
 80a7860:	f001 fd55 	bl	80a930e <_Bfree>
 80a7864:	2e06      	cmp	r6, #6
 80a7866:	d822      	bhi.n	80a78ae <_strtod_r+0xf6>
 80a7868:	e8df f006 	tbb	[pc, r6]
 80a786c:	18080d04 	.word	0x18080d04
 80a7870:	0d1d      	.short	0x0d1d
 80a7872:	04          	.byte	0x04
 80a7873:	00          	.byte	0x00
 80a7874:	f04f 0900 	mov.w	r9, #0
 80a7878:	46c8      	mov	r8, r9
 80a787a:	e018      	b.n	80a78ae <_strtod_r+0xf6>
 80a787c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80a7880:	f8dd 906c 	ldr.w	r9, [sp, #108]	; 0x6c
 80a7884:	e013      	b.n	80a78ae <_strtod_r+0xf6>
 80a7886:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80a7888:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80a788a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80a788e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80a7892:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80a7896:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80a789a:	e008      	b.n	80a78ae <_strtod_r+0xf6>
 80a789c:	f8df 922c 	ldr.w	r9, [pc, #556]	; 80a7acc <_strtod_r+0x314>
 80a78a0:	f04f 0800 	mov.w	r8, #0
 80a78a4:	e003      	b.n	80a78ae <_strtod_r+0xf6>
 80a78a6:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80a78aa:	f04f 38ff 	mov.w	r8, #4294967295
 80a78ae:	0721      	lsls	r1, r4, #28
 80a78b0:	f140 854b 	bpl.w	80a834a <_strtod_r+0xb92>
 80a78b4:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 80a78b8:	f000 bd47 	b.w	80a834a <_strtod_r+0xb92>
 80a78bc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a78be:	1c5a      	adds	r2, r3, #1
 80a78c0:	9217      	str	r2, [sp, #92]	; 0x5c
 80a78c2:	785b      	ldrb	r3, [r3, #1]
 80a78c4:	2b30      	cmp	r3, #48	; 0x30
 80a78c6:	d0f9      	beq.n	80a78bc <_strtod_r+0x104>
 80a78c8:	2b00      	cmp	r3, #0
 80a78ca:	f000 853e 	beq.w	80a834a <_strtod_r+0xb92>
 80a78ce:	2301      	movs	r3, #1
 80a78d0:	e000      	b.n	80a78d4 <_strtod_r+0x11c>
 80a78d2:	2300      	movs	r3, #0
 80a78d4:	9305      	str	r3, [sp, #20]
 80a78d6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a78d8:	220a      	movs	r2, #10
 80a78da:	9306      	str	r3, [sp, #24]
 80a78dc:	2300      	movs	r3, #0
 80a78de:	469b      	mov	fp, r3
 80a78e0:	9302      	str	r3, [sp, #8]
 80a78e2:	9304      	str	r3, [sp, #16]
 80a78e4:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 80a78e6:	782e      	ldrb	r6, [r5, #0]
 80a78e8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80a78ec:	b2d9      	uxtb	r1, r3
 80a78ee:	2909      	cmp	r1, #9
 80a78f0:	d811      	bhi.n	80a7916 <_strtod_r+0x15e>
 80a78f2:	f1bb 0f08 	cmp.w	fp, #8
 80a78f6:	bfd5      	itete	le
 80a78f8:	9904      	ldrle	r1, [sp, #16]
 80a78fa:	9902      	ldrgt	r1, [sp, #8]
 80a78fc:	fb02 3301 	mlale	r3, r2, r1, r3
 80a7900:	fb02 3301 	mlagt	r3, r2, r1, r3
 80a7904:	f105 0501 	add.w	r5, r5, #1
 80a7908:	bfd4      	ite	le
 80a790a:	9304      	strle	r3, [sp, #16]
 80a790c:	9302      	strgt	r3, [sp, #8]
 80a790e:	f10b 0b01 	add.w	fp, fp, #1
 80a7912:	9517      	str	r5, [sp, #92]	; 0x5c
 80a7914:	e7e6      	b.n	80a78e4 <_strtod_r+0x12c>
 80a7916:	4650      	mov	r0, sl
 80a7918:	f7ff f996 	bl	80a6c48 <_localeconv_r>
 80a791c:	6807      	ldr	r7, [r0, #0]
 80a791e:	4650      	mov	r0, sl
 80a7920:	f7ff f992 	bl	80a6c48 <_localeconv_r>
 80a7924:	6800      	ldr	r0, [r0, #0]
 80a7926:	f7ff fef5 	bl	80a7714 <strlen>
 80a792a:	4639      	mov	r1, r7
 80a792c:	4602      	mov	r2, r0
 80a792e:	4628      	mov	r0, r5
 80a7930:	f7ff fef8 	bl	80a7724 <strncmp>
 80a7934:	4607      	mov	r7, r0
 80a7936:	b128      	cbz	r0, 80a7944 <_strtod_r+0x18c>
 80a7938:	2000      	movs	r0, #0
 80a793a:	4633      	mov	r3, r6
 80a793c:	465d      	mov	r5, fp
 80a793e:	4602      	mov	r2, r0
 80a7940:	4601      	mov	r1, r0
 80a7942:	e05a      	b.n	80a79fa <_strtod_r+0x242>
 80a7944:	4650      	mov	r0, sl
 80a7946:	f7ff f97f 	bl	80a6c48 <_localeconv_r>
 80a794a:	6800      	ldr	r0, [r0, #0]
 80a794c:	f7ff fee2 	bl	80a7714 <strlen>
 80a7950:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a7952:	181a      	adds	r2, r3, r0
 80a7954:	9217      	str	r2, [sp, #92]	; 0x5c
 80a7956:	5c1b      	ldrb	r3, [r3, r0]
 80a7958:	f1bb 0f00 	cmp.w	fp, #0
 80a795c:	d145      	bne.n	80a79ea <_strtod_r+0x232>
 80a795e:	4658      	mov	r0, fp
 80a7960:	2b30      	cmp	r3, #48	; 0x30
 80a7962:	d105      	bne.n	80a7970 <_strtod_r+0x1b8>
 80a7964:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a7966:	3001      	adds	r0, #1
 80a7968:	1c5a      	adds	r2, r3, #1
 80a796a:	9217      	str	r2, [sp, #92]	; 0x5c
 80a796c:	785b      	ldrb	r3, [r3, #1]
 80a796e:	e7f7      	b.n	80a7960 <_strtod_r+0x1a8>
 80a7970:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80a7974:	2a08      	cmp	r2, #8
 80a7976:	d846      	bhi.n	80a7a06 <_strtod_r+0x24e>
 80a7978:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80a797a:	9206      	str	r2, [sp, #24]
 80a797c:	4602      	mov	r2, r0
 80a797e:	2000      	movs	r0, #0
 80a7980:	4605      	mov	r5, r0
 80a7982:	3b30      	subs	r3, #48	; 0x30
 80a7984:	f100 0101 	add.w	r1, r0, #1
 80a7988:	d029      	beq.n	80a79de <_strtod_r+0x226>
 80a798a:	440a      	add	r2, r1
 80a798c:	4629      	mov	r1, r5
 80a798e:	eb05 0c00 	add.w	ip, r5, r0
 80a7992:	260a      	movs	r6, #10
 80a7994:	4561      	cmp	r1, ip
 80a7996:	d00f      	beq.n	80a79b8 <_strtod_r+0x200>
 80a7998:	3101      	adds	r1, #1
 80a799a:	f101 3eff 	add.w	lr, r1, #4294967295
 80a799e:	f1be 0f08 	cmp.w	lr, #8
 80a79a2:	dc03      	bgt.n	80a79ac <_strtod_r+0x1f4>
 80a79a4:	9f04      	ldr	r7, [sp, #16]
 80a79a6:	4377      	muls	r7, r6
 80a79a8:	9704      	str	r7, [sp, #16]
 80a79aa:	e7f3      	b.n	80a7994 <_strtod_r+0x1dc>
 80a79ac:	2910      	cmp	r1, #16
 80a79ae:	bfde      	ittt	le
 80a79b0:	9f02      	ldrle	r7, [sp, #8]
 80a79b2:	4377      	mulle	r7, r6
 80a79b4:	9702      	strle	r7, [sp, #8]
 80a79b6:	e7ed      	b.n	80a7994 <_strtod_r+0x1dc>
 80a79b8:	4428      	add	r0, r5
 80a79ba:	2808      	cmp	r0, #8
 80a79bc:	f100 0501 	add.w	r5, r0, #1
 80a79c0:	dc05      	bgt.n	80a79ce <_strtod_r+0x216>
 80a79c2:	9804      	ldr	r0, [sp, #16]
 80a79c4:	210a      	movs	r1, #10
 80a79c6:	fb01 3300 	mla	r3, r1, r0, r3
 80a79ca:	9304      	str	r3, [sp, #16]
 80a79cc:	e006      	b.n	80a79dc <_strtod_r+0x224>
 80a79ce:	2d10      	cmp	r5, #16
 80a79d0:	bfdf      	itttt	le
 80a79d2:	9802      	ldrle	r0, [sp, #8]
 80a79d4:	210a      	movle	r1, #10
 80a79d6:	fb01 3300 	mlale	r3, r1, r0, r3
 80a79da:	9302      	strle	r3, [sp, #8]
 80a79dc:	2100      	movs	r1, #0
 80a79de:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a79e0:	1c58      	adds	r0, r3, #1
 80a79e2:	9017      	str	r0, [sp, #92]	; 0x5c
 80a79e4:	785b      	ldrb	r3, [r3, #1]
 80a79e6:	4608      	mov	r0, r1
 80a79e8:	e002      	b.n	80a79f0 <_strtod_r+0x238>
 80a79ea:	465d      	mov	r5, fp
 80a79ec:	4638      	mov	r0, r7
 80a79ee:	463a      	mov	r2, r7
 80a79f0:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80a79f4:	2909      	cmp	r1, #9
 80a79f6:	d9c4      	bls.n	80a7982 <_strtod_r+0x1ca>
 80a79f8:	2101      	movs	r1, #1
 80a79fa:	2b65      	cmp	r3, #101	; 0x65
 80a79fc:	d001      	beq.n	80a7a02 <_strtod_r+0x24a>
 80a79fe:	2b45      	cmp	r3, #69	; 0x45
 80a7a00:	d14f      	bne.n	80a7aa2 <_strtod_r+0x2ea>
 80a7a02:	b96d      	cbnz	r5, 80a7a20 <_strtod_r+0x268>
 80a7a04:	e004      	b.n	80a7a10 <_strtod_r+0x258>
 80a7a06:	2b65      	cmp	r3, #101	; 0x65
 80a7a08:	f040 84ad 	bne.w	80a8366 <_strtod_r+0xbae>
 80a7a0c:	2200      	movs	r2, #0
 80a7a0e:	2101      	movs	r1, #1
 80a7a10:	b928      	cbnz	r0, 80a7a1e <_strtod_r+0x266>
 80a7a12:	9b05      	ldr	r3, [sp, #20]
 80a7a14:	2b00      	cmp	r3, #0
 80a7a16:	f000 8092 	beq.w	80a7b3e <_strtod_r+0x386>
 80a7a1a:	4605      	mov	r5, r0
 80a7a1c:	e000      	b.n	80a7a20 <_strtod_r+0x268>
 80a7a1e:	2500      	movs	r5, #0
 80a7a20:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80a7a22:	1c63      	adds	r3, r4, #1
 80a7a24:	9317      	str	r3, [sp, #92]	; 0x5c
 80a7a26:	7863      	ldrb	r3, [r4, #1]
 80a7a28:	2b2b      	cmp	r3, #43	; 0x2b
 80a7a2a:	d006      	beq.n	80a7a3a <_strtod_r+0x282>
 80a7a2c:	2b2d      	cmp	r3, #45	; 0x2d
 80a7a2e:	d002      	beq.n	80a7a36 <_strtod_r+0x27e>
 80a7a30:	2600      	movs	r6, #0
 80a7a32:	9603      	str	r6, [sp, #12]
 80a7a34:	e006      	b.n	80a7a44 <_strtod_r+0x28c>
 80a7a36:	2301      	movs	r3, #1
 80a7a38:	e000      	b.n	80a7a3c <_strtod_r+0x284>
 80a7a3a:	2300      	movs	r3, #0
 80a7a3c:	9303      	str	r3, [sp, #12]
 80a7a3e:	1ca3      	adds	r3, r4, #2
 80a7a40:	9317      	str	r3, [sp, #92]	; 0x5c
 80a7a42:	78a3      	ldrb	r3, [r4, #2]
 80a7a44:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 80a7a48:	2e09      	cmp	r6, #9
 80a7a4a:	d829      	bhi.n	80a7aa0 <_strtod_r+0x2e8>
 80a7a4c:	2b30      	cmp	r3, #48	; 0x30
 80a7a4e:	d104      	bne.n	80a7a5a <_strtod_r+0x2a2>
 80a7a50:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a7a52:	1c5e      	adds	r6, r3, #1
 80a7a54:	9617      	str	r6, [sp, #92]	; 0x5c
 80a7a56:	785b      	ldrb	r3, [r3, #1]
 80a7a58:	e7f8      	b.n	80a7a4c <_strtod_r+0x294>
 80a7a5a:	f1a3 0631 	sub.w	r6, r3, #49	; 0x31
 80a7a5e:	2e08      	cmp	r6, #8
 80a7a60:	d81f      	bhi.n	80a7aa2 <_strtod_r+0x2ea>
 80a7a62:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80a7a66:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a7a68:	461f      	mov	r7, r3
 80a7a6a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a7a6c:	1c5e      	adds	r6, r3, #1
 80a7a6e:	9617      	str	r6, [sp, #92]	; 0x5c
 80a7a70:	785b      	ldrb	r3, [r3, #1]
 80a7a72:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 80a7a76:	f1bc 0f09 	cmp.w	ip, #9
 80a7a7a:	d805      	bhi.n	80a7a88 <_strtod_r+0x2d0>
 80a7a7c:	260a      	movs	r6, #10
 80a7a7e:	fb06 3e0e 	mla	lr, r6, lr, r3
 80a7a82:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80a7a86:	e7f0      	b.n	80a7a6a <_strtod_r+0x2b2>
 80a7a88:	1bf6      	subs	r6, r6, r7
 80a7a8a:	2e08      	cmp	r6, #8
 80a7a8c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80a7a90:	dc02      	bgt.n	80a7a98 <_strtod_r+0x2e0>
 80a7a92:	4576      	cmp	r6, lr
 80a7a94:	bfa8      	it	ge
 80a7a96:	4676      	movge	r6, lr
 80a7a98:	9f03      	ldr	r7, [sp, #12]
 80a7a9a:	b11f      	cbz	r7, 80a7aa4 <_strtod_r+0x2ec>
 80a7a9c:	4276      	negs	r6, r6
 80a7a9e:	e001      	b.n	80a7aa4 <_strtod_r+0x2ec>
 80a7aa0:	9417      	str	r4, [sp, #92]	; 0x5c
 80a7aa2:	2600      	movs	r6, #0
 80a7aa4:	2d00      	cmp	r5, #0
 80a7aa6:	d152      	bne.n	80a7b4e <_strtod_r+0x396>
 80a7aa8:	2800      	cmp	r0, #0
 80a7aaa:	f040 844e 	bne.w	80a834a <_strtod_r+0xb92>
 80a7aae:	9a05      	ldr	r2, [sp, #20]
 80a7ab0:	2a00      	cmp	r2, #0
 80a7ab2:	f040 844a 	bne.w	80a834a <_strtod_r+0xb92>
 80a7ab6:	2900      	cmp	r1, #0
 80a7ab8:	d141      	bne.n	80a7b3e <_strtod_r+0x386>
 80a7aba:	2b4e      	cmp	r3, #78	; 0x4e
 80a7abc:	d020      	beq.n	80a7b00 <_strtod_r+0x348>
 80a7abe:	dc07      	bgt.n	80a7ad0 <_strtod_r+0x318>
 80a7ac0:	2b49      	cmp	r3, #73	; 0x49
 80a7ac2:	d00a      	beq.n	80a7ada <_strtod_r+0x322>
 80a7ac4:	e03b      	b.n	80a7b3e <_strtod_r+0x386>
 80a7ac6:	bf00      	nop
 80a7ac8:	080aa5c8 	.word	0x080aa5c8
 80a7acc:	7ff00000 	.word	0x7ff00000
 80a7ad0:	2b69      	cmp	r3, #105	; 0x69
 80a7ad2:	d002      	beq.n	80a7ada <_strtod_r+0x322>
 80a7ad4:	2b6e      	cmp	r3, #110	; 0x6e
 80a7ad6:	d013      	beq.n	80a7b00 <_strtod_r+0x348>
 80a7ad8:	e031      	b.n	80a7b3e <_strtod_r+0x386>
 80a7ada:	49aa      	ldr	r1, [pc, #680]	; (80a7d84 <_strtod_r+0x5cc>)
 80a7adc:	a817      	add	r0, sp, #92	; 0x5c
 80a7ade:	f001 fa5d 	bl	80a8f9c <__match>
 80a7ae2:	b360      	cbz	r0, 80a7b3e <_strtod_r+0x386>
 80a7ae4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a7ae6:	49a8      	ldr	r1, [pc, #672]	; (80a7d88 <_strtod_r+0x5d0>)
 80a7ae8:	3b01      	subs	r3, #1
 80a7aea:	a817      	add	r0, sp, #92	; 0x5c
 80a7aec:	9317      	str	r3, [sp, #92]	; 0x5c
 80a7aee:	f001 fa55 	bl	80a8f9c <__match>
 80a7af2:	b910      	cbnz	r0, 80a7afa <_strtod_r+0x342>
 80a7af4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a7af6:	3301      	adds	r3, #1
 80a7af8:	9317      	str	r3, [sp, #92]	; 0x5c
 80a7afa:	f8df 92a8 	ldr.w	r9, [pc, #680]	; 80a7da4 <_strtod_r+0x5ec>
 80a7afe:	e01a      	b.n	80a7b36 <_strtod_r+0x37e>
 80a7b00:	49a2      	ldr	r1, [pc, #648]	; (80a7d8c <_strtod_r+0x5d4>)
 80a7b02:	a817      	add	r0, sp, #92	; 0x5c
 80a7b04:	f001 fa4a 	bl	80a8f9c <__match>
 80a7b08:	b1c8      	cbz	r0, 80a7b3e <_strtod_r+0x386>
 80a7b0a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a7b0c:	781b      	ldrb	r3, [r3, #0]
 80a7b0e:	2b28      	cmp	r3, #40	; 0x28
 80a7b10:	d10f      	bne.n	80a7b32 <_strtod_r+0x37a>
 80a7b12:	aa1a      	add	r2, sp, #104	; 0x68
 80a7b14:	499e      	ldr	r1, [pc, #632]	; (80a7d90 <_strtod_r+0x5d8>)
 80a7b16:	a817      	add	r0, sp, #92	; 0x5c
 80a7b18:	f001 fa53 	bl	80a8fc2 <__hexnan>
 80a7b1c:	2805      	cmp	r0, #5
 80a7b1e:	d108      	bne.n	80a7b32 <_strtod_r+0x37a>
 80a7b20:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80a7b22:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80a7b26:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80a7b2a:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80a7b2e:	f000 bc0c 	b.w	80a834a <_strtod_r+0xb92>
 80a7b32:	f8df 9274 	ldr.w	r9, [pc, #628]	; 80a7da8 <_strtod_r+0x5f0>
 80a7b36:	f04f 0800 	mov.w	r8, #0
 80a7b3a:	f000 bc06 	b.w	80a834a <_strtod_r+0xb92>
 80a7b3e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80a7b40:	9417      	str	r4, [sp, #92]	; 0x5c
 80a7b42:	2b00      	cmp	r3, #0
 80a7b44:	f000 840c 	beq.w	80a8360 <_strtod_r+0xba8>
 80a7b48:	2300      	movs	r3, #0
 80a7b4a:	930c      	str	r3, [sp, #48]	; 0x30
 80a7b4c:	e3ff      	b.n	80a834e <_strtod_r+0xb96>
 80a7b4e:	462c      	mov	r4, r5
 80a7b50:	f1bb 0f00 	cmp.w	fp, #0
 80a7b54:	bf08      	it	eq
 80a7b56:	46ab      	moveq	fp, r5
 80a7b58:	9804      	ldr	r0, [sp, #16]
 80a7b5a:	2d10      	cmp	r5, #16
 80a7b5c:	bfa8      	it	ge
 80a7b5e:	2410      	movge	r4, #16
 80a7b60:	1ab7      	subs	r7, r6, r2
 80a7b62:	f7fd febf 	bl	80a58e4 <__aeabi_ui2d>
 80a7b66:	2c09      	cmp	r4, #9
 80a7b68:	4680      	mov	r8, r0
 80a7b6a:	4689      	mov	r9, r1
 80a7b6c:	dd13      	ble.n	80a7b96 <_strtod_r+0x3de>
 80a7b6e:	4b89      	ldr	r3, [pc, #548]	; (80a7d94 <_strtod_r+0x5dc>)
 80a7b70:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80a7b74:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80a7b78:	f7fd ff2a 	bl	80a59d0 <__aeabi_dmul>
 80a7b7c:	4680      	mov	r8, r0
 80a7b7e:	9802      	ldr	r0, [sp, #8]
 80a7b80:	4689      	mov	r9, r1
 80a7b82:	f7fd feaf 	bl	80a58e4 <__aeabi_ui2d>
 80a7b86:	4602      	mov	r2, r0
 80a7b88:	460b      	mov	r3, r1
 80a7b8a:	4640      	mov	r0, r8
 80a7b8c:	4649      	mov	r1, r9
 80a7b8e:	f7fd fd6d 	bl	80a566c <__adddf3>
 80a7b92:	4680      	mov	r8, r0
 80a7b94:	4689      	mov	r9, r1
 80a7b96:	2d0f      	cmp	r5, #15
 80a7b98:	dc33      	bgt.n	80a7c02 <_strtod_r+0x44a>
 80a7b9a:	2f00      	cmp	r7, #0
 80a7b9c:	f000 83d5 	beq.w	80a834a <_strtod_r+0xb92>
 80a7ba0:	dd22      	ble.n	80a7be8 <_strtod_r+0x430>
 80a7ba2:	2f16      	cmp	r7, #22
 80a7ba4:	dc07      	bgt.n	80a7bb6 <_strtod_r+0x3fe>
 80a7ba6:	4d7b      	ldr	r5, [pc, #492]	; (80a7d94 <_strtod_r+0x5dc>)
 80a7ba8:	4642      	mov	r2, r8
 80a7baa:	eb05 01c7 	add.w	r1, r5, r7, lsl #3
 80a7bae:	464b      	mov	r3, r9
 80a7bb0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a7bb4:	e013      	b.n	80a7bde <_strtod_r+0x426>
 80a7bb6:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80a7bba:	429f      	cmp	r7, r3
 80a7bbc:	dc21      	bgt.n	80a7c02 <_strtod_r+0x44a>
 80a7bbe:	4c75      	ldr	r4, [pc, #468]	; (80a7d94 <_strtod_r+0x5dc>)
 80a7bc0:	f1c5 050f 	rsb	r5, r5, #15
 80a7bc4:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80a7bc8:	1b7d      	subs	r5, r7, r5
 80a7bca:	4642      	mov	r2, r8
 80a7bcc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a7bd0:	464b      	mov	r3, r9
 80a7bd2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80a7bd6:	f7fd fefb 	bl	80a59d0 <__aeabi_dmul>
 80a7bda:	e9d4 2300 	ldrd	r2, r3, [r4]
 80a7bde:	f7fd fef7 	bl	80a59d0 <__aeabi_dmul>
 80a7be2:	4680      	mov	r8, r0
 80a7be4:	4689      	mov	r9, r1
 80a7be6:	e3b0      	b.n	80a834a <_strtod_r+0xb92>
 80a7be8:	f117 0f16 	cmn.w	r7, #22
 80a7bec:	db09      	blt.n	80a7c02 <_strtod_r+0x44a>
 80a7bee:	4d69      	ldr	r5, [pc, #420]	; (80a7d94 <_strtod_r+0x5dc>)
 80a7bf0:	4640      	mov	r0, r8
 80a7bf2:	eba5 03c7 	sub.w	r3, r5, r7, lsl #3
 80a7bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a7bfa:	4649      	mov	r1, r9
 80a7bfc:	f7fe f812 	bl	80a5c24 <__aeabi_ddiv>
 80a7c00:	e7ef      	b.n	80a7be2 <_strtod_r+0x42a>
 80a7c02:	1b2c      	subs	r4, r5, r4
 80a7c04:	443c      	add	r4, r7
 80a7c06:	2c00      	cmp	r4, #0
 80a7c08:	dd5d      	ble.n	80a7cc6 <_strtod_r+0x50e>
 80a7c0a:	f014 010f 	ands.w	r1, r4, #15
 80a7c0e:	d00a      	beq.n	80a7c26 <_strtod_r+0x46e>
 80a7c10:	4b60      	ldr	r3, [pc, #384]	; (80a7d94 <_strtod_r+0x5dc>)
 80a7c12:	4642      	mov	r2, r8
 80a7c14:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80a7c18:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a7c1c:	464b      	mov	r3, r9
 80a7c1e:	f7fd fed7 	bl	80a59d0 <__aeabi_dmul>
 80a7c22:	4680      	mov	r8, r0
 80a7c24:	4689      	mov	r9, r1
 80a7c26:	f034 040f 	bics.w	r4, r4, #15
 80a7c2a:	f000 80c1 	beq.w	80a7db0 <_strtod_r+0x5f8>
 80a7c2e:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
 80a7c32:	dd0f      	ble.n	80a7c54 <_strtod_r+0x49c>
 80a7c34:	f04f 0b00 	mov.w	fp, #0
 80a7c38:	f8cd b008 	str.w	fp, [sp, #8]
 80a7c3c:	f8cd b014 	str.w	fp, [sp, #20]
 80a7c40:	f8cd b010 	str.w	fp, [sp, #16]
 80a7c44:	2322      	movs	r3, #34	; 0x22
 80a7c46:	f8ca 3000 	str.w	r3, [sl]
 80a7c4a:	f8df 9158 	ldr.w	r9, [pc, #344]	; 80a7da4 <_strtod_r+0x5ec>
 80a7c4e:	f04f 0800 	mov.w	r8, #0
 80a7c52:	e189      	b.n	80a7f68 <_strtod_r+0x7b0>
 80a7c54:	4640      	mov	r0, r8
 80a7c56:	4649      	mov	r1, r9
 80a7c58:	2300      	movs	r3, #0
 80a7c5a:	4e4f      	ldr	r6, [pc, #316]	; (80a7d98 <_strtod_r+0x5e0>)
 80a7c5c:	1124      	asrs	r4, r4, #4
 80a7c5e:	9302      	str	r3, [sp, #8]
 80a7c60:	2c01      	cmp	r4, #1
 80a7c62:	dd0c      	ble.n	80a7c7e <_strtod_r+0x4c6>
 80a7c64:	07e2      	lsls	r2, r4, #31
 80a7c66:	d504      	bpl.n	80a7c72 <_strtod_r+0x4ba>
 80a7c68:	e9d6 2300 	ldrd	r2, r3, [r6]
 80a7c6c:	f7fd feb0 	bl	80a59d0 <__aeabi_dmul>
 80a7c70:	2301      	movs	r3, #1
 80a7c72:	9a02      	ldr	r2, [sp, #8]
 80a7c74:	1064      	asrs	r4, r4, #1
 80a7c76:	3201      	adds	r2, #1
 80a7c78:	9202      	str	r2, [sp, #8]
 80a7c7a:	3608      	adds	r6, #8
 80a7c7c:	e7f0      	b.n	80a7c60 <_strtod_r+0x4a8>
 80a7c7e:	b10b      	cbz	r3, 80a7c84 <_strtod_r+0x4cc>
 80a7c80:	4680      	mov	r8, r0
 80a7c82:	4689      	mov	r9, r1
 80a7c84:	4b44      	ldr	r3, [pc, #272]	; (80a7d98 <_strtod_r+0x5e0>)
 80a7c86:	9a02      	ldr	r2, [sp, #8]
 80a7c88:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80a7c8c:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 80a7c90:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a7c94:	4642      	mov	r2, r8
 80a7c96:	464b      	mov	r3, r9
 80a7c98:	f7fd fe9a 	bl	80a59d0 <__aeabi_dmul>
 80a7c9c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80a7ca0:	4689      	mov	r9, r1
 80a7ca2:	460a      	mov	r2, r1
 80a7ca4:	0d1b      	lsrs	r3, r3, #20
 80a7ca6:	493d      	ldr	r1, [pc, #244]	; (80a7d9c <_strtod_r+0x5e4>)
 80a7ca8:	051b      	lsls	r3, r3, #20
 80a7caa:	428b      	cmp	r3, r1
 80a7cac:	4680      	mov	r8, r0
 80a7cae:	d8c1      	bhi.n	80a7c34 <_strtod_r+0x47c>
 80a7cb0:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80a7cb4:	428b      	cmp	r3, r1
 80a7cb6:	bf86      	itte	hi
 80a7cb8:	f8df 90f0 	ldrhi.w	r9, [pc, #240]	; 80a7dac <_strtod_r+0x5f4>
 80a7cbc:	f04f 38ff 	movhi.w	r8, #4294967295
 80a7cc0:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80a7cc4:	e074      	b.n	80a7db0 <_strtod_r+0x5f8>
 80a7cc6:	d073      	beq.n	80a7db0 <_strtod_r+0x5f8>
 80a7cc8:	4264      	negs	r4, r4
 80a7cca:	f014 020f 	ands.w	r2, r4, #15
 80a7cce:	d00a      	beq.n	80a7ce6 <_strtod_r+0x52e>
 80a7cd0:	4b30      	ldr	r3, [pc, #192]	; (80a7d94 <_strtod_r+0x5dc>)
 80a7cd2:	4640      	mov	r0, r8
 80a7cd4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80a7cd8:	4649      	mov	r1, r9
 80a7cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a7cde:	f7fd ffa1 	bl	80a5c24 <__aeabi_ddiv>
 80a7ce2:	4680      	mov	r8, r0
 80a7ce4:	4689      	mov	r9, r1
 80a7ce6:	1124      	asrs	r4, r4, #4
 80a7ce8:	d062      	beq.n	80a7db0 <_strtod_r+0x5f8>
 80a7cea:	2c1f      	cmp	r4, #31
 80a7cec:	dd08      	ble.n	80a7d00 <_strtod_r+0x548>
 80a7cee:	f04f 0b00 	mov.w	fp, #0
 80a7cf2:	f8cd b008 	str.w	fp, [sp, #8]
 80a7cf6:	f8cd b014 	str.w	fp, [sp, #20]
 80a7cfa:	f8cd b010 	str.w	fp, [sp, #16]
 80a7cfe:	e12c      	b.n	80a7f5a <_strtod_r+0x7a2>
 80a7d00:	4640      	mov	r0, r8
 80a7d02:	4649      	mov	r1, r9
 80a7d04:	f014 0f10 	tst.w	r4, #16
 80a7d08:	bf0c      	ite	eq
 80a7d0a:	2300      	moveq	r3, #0
 80a7d0c:	236a      	movne	r3, #106	; 0x6a
 80a7d0e:	4e24      	ldr	r6, [pc, #144]	; (80a7da0 <_strtod_r+0x5e8>)
 80a7d10:	9303      	str	r3, [sp, #12]
 80a7d12:	2300      	movs	r3, #0
 80a7d14:	2c00      	cmp	r4, #0
 80a7d16:	dd09      	ble.n	80a7d2c <_strtod_r+0x574>
 80a7d18:	07e2      	lsls	r2, r4, #31
 80a7d1a:	d504      	bpl.n	80a7d26 <_strtod_r+0x56e>
 80a7d1c:	e9d6 2300 	ldrd	r2, r3, [r6]
 80a7d20:	f7fd fe56 	bl	80a59d0 <__aeabi_dmul>
 80a7d24:	2301      	movs	r3, #1
 80a7d26:	1064      	asrs	r4, r4, #1
 80a7d28:	3608      	adds	r6, #8
 80a7d2a:	e7f3      	b.n	80a7d14 <_strtod_r+0x55c>
 80a7d2c:	b10b      	cbz	r3, 80a7d32 <_strtod_r+0x57a>
 80a7d2e:	4680      	mov	r8, r0
 80a7d30:	4689      	mov	r9, r1
 80a7d32:	9b03      	ldr	r3, [sp, #12]
 80a7d34:	b1eb      	cbz	r3, 80a7d72 <_strtod_r+0x5ba>
 80a7d36:	f3c9 530a 	ubfx	r3, r9, #20, #11
 80a7d3a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80a7d3e:	2b00      	cmp	r3, #0
 80a7d40:	4649      	mov	r1, r9
 80a7d42:	dd16      	ble.n	80a7d72 <_strtod_r+0x5ba>
 80a7d44:	2b1f      	cmp	r3, #31
 80a7d46:	dd0e      	ble.n	80a7d66 <_strtod_r+0x5ae>
 80a7d48:	2b34      	cmp	r3, #52	; 0x34
 80a7d4a:	bfde      	ittt	le
 80a7d4c:	3b20      	suble	r3, #32
 80a7d4e:	f04f 32ff 	movle.w	r2, #4294967295
 80a7d52:	fa02 f303 	lslle.w	r3, r2, r3
 80a7d56:	f04f 0800 	mov.w	r8, #0
 80a7d5a:	bfcc      	ite	gt
 80a7d5c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80a7d60:	ea03 0901 	andle.w	r9, r3, r1
 80a7d64:	e005      	b.n	80a7d72 <_strtod_r+0x5ba>
 80a7d66:	f04f 32ff 	mov.w	r2, #4294967295
 80a7d6a:	fa02 f303 	lsl.w	r3, r2, r3
 80a7d6e:	ea03 0808 	and.w	r8, r3, r8
 80a7d72:	2200      	movs	r2, #0
 80a7d74:	2300      	movs	r3, #0
 80a7d76:	4640      	mov	r0, r8
 80a7d78:	4649      	mov	r1, r9
 80a7d7a:	f7fe f891 	bl	80a5ea0 <__aeabi_dcmpeq>
 80a7d7e:	2800      	cmp	r0, #0
 80a7d80:	d1b5      	bne.n	80a7cee <_strtod_r+0x536>
 80a7d82:	e017      	b.n	80a7db4 <_strtod_r+0x5fc>
 80a7d84:	080aa11c 	.word	0x080aa11c
 80a7d88:	080aa5dc 	.word	0x080aa5dc
 80a7d8c:	080aa629 	.word	0x080aa629
 80a7d90:	080aa5e4 	.word	0x080aa5e4
 80a7d94:	080aa888 	.word	0x080aa888
 80a7d98:	080aa950 	.word	0x080aa950
 80a7d9c:	7ca00000 	.word	0x7ca00000
 80a7da0:	080aa5f8 	.word	0x080aa5f8
 80a7da4:	7ff00000 	.word	0x7ff00000
 80a7da8:	fff80000 	.word	0xfff80000
 80a7dac:	7fefffff 	.word	0x7fefffff
 80a7db0:	2300      	movs	r3, #0
 80a7db2:	9303      	str	r3, [sp, #12]
 80a7db4:	9b04      	ldr	r3, [sp, #16]
 80a7db6:	465a      	mov	r2, fp
 80a7db8:	9300      	str	r3, [sp, #0]
 80a7dba:	9906      	ldr	r1, [sp, #24]
 80a7dbc:	462b      	mov	r3, r5
 80a7dbe:	4650      	mov	r0, sl
 80a7dc0:	f001 faf7 	bl	80a93b2 <__s2b>
 80a7dc4:	9005      	str	r0, [sp, #20]
 80a7dc6:	2800      	cmp	r0, #0
 80a7dc8:	f43f af34 	beq.w	80a7c34 <_strtod_r+0x47c>
 80a7dcc:	2f00      	cmp	r7, #0
 80a7dce:	f1c7 0300 	rsb	r3, r7, #0
 80a7dd2:	bfa8      	it	ge
 80a7dd4:	2300      	movge	r3, #0
 80a7dd6:	930d      	str	r3, [sp, #52]	; 0x34
 80a7dd8:	f04f 0b00 	mov.w	fp, #0
 80a7ddc:	ea27 73e7 	bic.w	r3, r7, r7, asr #31
 80a7de0:	9312      	str	r3, [sp, #72]	; 0x48
 80a7de2:	f8cd b008 	str.w	fp, [sp, #8]
 80a7de6:	9b05      	ldr	r3, [sp, #20]
 80a7de8:	4650      	mov	r0, sl
 80a7dea:	6859      	ldr	r1, [r3, #4]
 80a7dec:	f001 fa5a 	bl	80a92a4 <_Balloc>
 80a7df0:	9004      	str	r0, [sp, #16]
 80a7df2:	2800      	cmp	r0, #0
 80a7df4:	f43f af26 	beq.w	80a7c44 <_strtod_r+0x48c>
 80a7df8:	9b05      	ldr	r3, [sp, #20]
 80a7dfa:	300c      	adds	r0, #12
 80a7dfc:	691a      	ldr	r2, [r3, #16]
 80a7dfe:	f103 010c 	add.w	r1, r3, #12
 80a7e02:	3202      	adds	r2, #2
 80a7e04:	0092      	lsls	r2, r2, #2
 80a7e06:	f7fe ff23 	bl	80a6c50 <memcpy>
 80a7e0a:	ab1a      	add	r3, sp, #104	; 0x68
 80a7e0c:	9301      	str	r3, [sp, #4]
 80a7e0e:	ab19      	add	r3, sp, #100	; 0x64
 80a7e10:	9300      	str	r3, [sp, #0]
 80a7e12:	4642      	mov	r2, r8
 80a7e14:	464b      	mov	r3, r9
 80a7e16:	4650      	mov	r0, sl
 80a7e18:	e9cd 8908 	strd	r8, r9, [sp, #32]
 80a7e1c:	f001 fd79 	bl	80a9912 <__d2b>
 80a7e20:	9018      	str	r0, [sp, #96]	; 0x60
 80a7e22:	2800      	cmp	r0, #0
 80a7e24:	f43f af0e 	beq.w	80a7c44 <_strtod_r+0x48c>
 80a7e28:	2101      	movs	r1, #1
 80a7e2a:	4650      	mov	r0, sl
 80a7e2c:	f001 fb4c 	bl	80a94c8 <__i2b>
 80a7e30:	9002      	str	r0, [sp, #8]
 80a7e32:	2800      	cmp	r0, #0
 80a7e34:	f43f af06 	beq.w	80a7c44 <_strtod_r+0x48c>
 80a7e38:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80a7e3a:	9903      	ldr	r1, [sp, #12]
 80a7e3c:	2b00      	cmp	r3, #0
 80a7e3e:	bfac      	ite	ge
 80a7e40:	9a0d      	ldrge	r2, [sp, #52]	; 0x34
 80a7e42:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80a7e44:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 80a7e46:	bfac      	ite	ge
 80a7e48:	18d6      	addge	r6, r2, r3
 80a7e4a:	1ad2      	sublt	r2, r2, r3
 80a7e4c:	eba3 0301 	sub.w	r3, r3, r1
 80a7e50:	4423      	add	r3, r4
 80a7e52:	49b1      	ldr	r1, [pc, #708]	; (80a8118 <_strtod_r+0x960>)
 80a7e54:	f103 33ff 	add.w	r3, r3, #4294967295
 80a7e58:	bfac      	ite	ge
 80a7e5a:	9a12      	ldrge	r2, [sp, #72]	; 0x48
 80a7e5c:	9e0d      	ldrlt	r6, [sp, #52]	; 0x34
 80a7e5e:	428b      	cmp	r3, r1
 80a7e60:	f1c4 0436 	rsb	r4, r4, #54	; 0x36
 80a7e64:	f280 8085 	bge.w	80a7f72 <_strtod_r+0x7ba>
 80a7e68:	1ac9      	subs	r1, r1, r3
 80a7e6a:	291f      	cmp	r1, #31
 80a7e6c:	bfc8      	it	gt
 80a7e6e:	4dab      	ldrgt	r5, [pc, #684]	; (80a811c <_strtod_r+0x964>)
 80a7e70:	f04f 0701 	mov.w	r7, #1
 80a7e74:	bfd4      	ite	le
 80a7e76:	fa07 f301 	lslle.w	r3, r7, r1
 80a7e7a:	1aed      	subgt	r5, r5, r3
 80a7e7c:	eba4 0401 	sub.w	r4, r4, r1
 80a7e80:	bfd9      	ittee	le
 80a7e82:	9307      	strle	r3, [sp, #28]
 80a7e84:	2500      	movle	r5, #0
 80a7e86:	fa07 f505 	lslgt.w	r5, r7, r5
 80a7e8a:	9707      	strgt	r7, [sp, #28]
 80a7e8c:	1937      	adds	r7, r6, r4
 80a7e8e:	9b03      	ldr	r3, [sp, #12]
 80a7e90:	42be      	cmp	r6, r7
 80a7e92:	4414      	add	r4, r2
 80a7e94:	441c      	add	r4, r3
 80a7e96:	4633      	mov	r3, r6
 80a7e98:	bfa8      	it	ge
 80a7e9a:	463b      	movge	r3, r7
 80a7e9c:	42a3      	cmp	r3, r4
 80a7e9e:	bfa8      	it	ge
 80a7ea0:	4623      	movge	r3, r4
 80a7ea2:	2b00      	cmp	r3, #0
 80a7ea4:	bfc2      	ittt	gt
 80a7ea6:	1aff      	subgt	r7, r7, r3
 80a7ea8:	1ae4      	subgt	r4, r4, r3
 80a7eaa:	1af6      	subgt	r6, r6, r3
 80a7eac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80a7eae:	2b00      	cmp	r3, #0
 80a7eb0:	d163      	bne.n	80a7f7a <_strtod_r+0x7c2>
 80a7eb2:	2f00      	cmp	r7, #0
 80a7eb4:	dc7a      	bgt.n	80a7fac <_strtod_r+0x7f4>
 80a7eb6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80a7eb8:	2b00      	cmp	r3, #0
 80a7eba:	f040 8081 	bne.w	80a7fc0 <_strtod_r+0x808>
 80a7ebe:	2c00      	cmp	r4, #0
 80a7ec0:	f300 8088 	bgt.w	80a7fd4 <_strtod_r+0x81c>
 80a7ec4:	2e00      	cmp	r6, #0
 80a7ec6:	f300 808f 	bgt.w	80a7fe8 <_strtod_r+0x830>
 80a7eca:	9a04      	ldr	r2, [sp, #16]
 80a7ecc:	9918      	ldr	r1, [sp, #96]	; 0x60
 80a7ece:	4650      	mov	r0, sl
 80a7ed0:	f001 fc4f 	bl	80a9772 <__mdiff>
 80a7ed4:	4683      	mov	fp, r0
 80a7ed6:	2800      	cmp	r0, #0
 80a7ed8:	f43f aeb4 	beq.w	80a7c44 <_strtod_r+0x48c>
 80a7edc:	68c3      	ldr	r3, [r0, #12]
 80a7ede:	2400      	movs	r4, #0
 80a7ee0:	60c4      	str	r4, [r0, #12]
 80a7ee2:	9902      	ldr	r1, [sp, #8]
 80a7ee4:	9306      	str	r3, [sp, #24]
 80a7ee6:	f001 fc28 	bl	80a973a <__mcmp>
 80a7eea:	42a0      	cmp	r0, r4
 80a7eec:	f280 808b 	bge.w	80a8006 <_strtod_r+0x84e>
 80a7ef0:	9b06      	ldr	r3, [sp, #24]
 80a7ef2:	2b00      	cmp	r3, #0
 80a7ef4:	f040 8202 	bne.w	80a82fc <_strtod_r+0xb44>
 80a7ef8:	f1b8 0f00 	cmp.w	r8, #0
 80a7efc:	f040 81fe 	bne.w	80a82fc <_strtod_r+0xb44>
 80a7f00:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80a7f04:	2b00      	cmp	r3, #0
 80a7f06:	f040 81f9 	bne.w	80a82fc <_strtod_r+0xb44>
 80a7f0a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80a7f0e:	0d1b      	lsrs	r3, r3, #20
 80a7f10:	051b      	lsls	r3, r3, #20
 80a7f12:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80a7f16:	f240 81f1 	bls.w	80a82fc <_strtod_r+0xb44>
 80a7f1a:	f8db 3014 	ldr.w	r3, [fp, #20]
 80a7f1e:	2b00      	cmp	r3, #0
 80a7f20:	d06c      	beq.n	80a7ffc <_strtod_r+0x844>
 80a7f22:	4659      	mov	r1, fp
 80a7f24:	2201      	movs	r2, #1
 80a7f26:	4650      	mov	r0, sl
 80a7f28:	f001 fbb6 	bl	80a9698 <__lshift>
 80a7f2c:	9902      	ldr	r1, [sp, #8]
 80a7f2e:	4683      	mov	fp, r0
 80a7f30:	f001 fc03 	bl	80a973a <__mcmp>
 80a7f34:	2800      	cmp	r0, #0
 80a7f36:	f340 81e1 	ble.w	80a82fc <_strtod_r+0xb44>
 80a7f3a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80a7f3e:	9a03      	ldr	r2, [sp, #12]
 80a7f40:	0d1b      	lsrs	r3, r3, #20
 80a7f42:	051b      	lsls	r3, r3, #20
 80a7f44:	2a00      	cmp	r2, #0
 80a7f46:	f000 808d 	beq.w	80a8064 <_strtod_r+0x8ac>
 80a7f4a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80a7f4e:	f300 8089 	bgt.w	80a8064 <_strtod_r+0x8ac>
 80a7f52:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
 80a7f56:	f300 81d3 	bgt.w	80a8300 <_strtod_r+0xb48>
 80a7f5a:	2322      	movs	r3, #34	; 0x22
 80a7f5c:	f04f 0800 	mov.w	r8, #0
 80a7f60:	f04f 0900 	mov.w	r9, #0
 80a7f64:	f8ca 3000 	str.w	r3, [sl]
 80a7f68:	9b05      	ldr	r3, [sp, #20]
 80a7f6a:	2b00      	cmp	r3, #0
 80a7f6c:	f040 81d9 	bne.w	80a8322 <_strtod_r+0xb6a>
 80a7f70:	e1eb      	b.n	80a834a <_strtod_r+0xb92>
 80a7f72:	2301      	movs	r3, #1
 80a7f74:	2500      	movs	r5, #0
 80a7f76:	9307      	str	r3, [sp, #28]
 80a7f78:	e788      	b.n	80a7e8c <_strtod_r+0x6d4>
 80a7f7a:	461a      	mov	r2, r3
 80a7f7c:	9902      	ldr	r1, [sp, #8]
 80a7f7e:	4650      	mov	r0, sl
 80a7f80:	f001 fb3c 	bl	80a95fc <__pow5mult>
 80a7f84:	9002      	str	r0, [sp, #8]
 80a7f86:	2800      	cmp	r0, #0
 80a7f88:	f43f ae5c 	beq.w	80a7c44 <_strtod_r+0x48c>
 80a7f8c:	4601      	mov	r1, r0
 80a7f8e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80a7f90:	4650      	mov	r0, sl
 80a7f92:	f001 faa2 	bl	80a94da <__multiply>
 80a7f96:	9006      	str	r0, [sp, #24]
 80a7f98:	2800      	cmp	r0, #0
 80a7f9a:	f43f ae53 	beq.w	80a7c44 <_strtod_r+0x48c>
 80a7f9e:	9918      	ldr	r1, [sp, #96]	; 0x60
 80a7fa0:	4650      	mov	r0, sl
 80a7fa2:	f001 f9b4 	bl	80a930e <_Bfree>
 80a7fa6:	9b06      	ldr	r3, [sp, #24]
 80a7fa8:	9318      	str	r3, [sp, #96]	; 0x60
 80a7faa:	e782      	b.n	80a7eb2 <_strtod_r+0x6fa>
 80a7fac:	463a      	mov	r2, r7
 80a7fae:	9918      	ldr	r1, [sp, #96]	; 0x60
 80a7fb0:	4650      	mov	r0, sl
 80a7fb2:	f001 fb71 	bl	80a9698 <__lshift>
 80a7fb6:	9018      	str	r0, [sp, #96]	; 0x60
 80a7fb8:	2800      	cmp	r0, #0
 80a7fba:	f47f af7c 	bne.w	80a7eb6 <_strtod_r+0x6fe>
 80a7fbe:	e641      	b.n	80a7c44 <_strtod_r+0x48c>
 80a7fc0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80a7fc2:	9904      	ldr	r1, [sp, #16]
 80a7fc4:	4650      	mov	r0, sl
 80a7fc6:	f001 fb19 	bl	80a95fc <__pow5mult>
 80a7fca:	9004      	str	r0, [sp, #16]
 80a7fcc:	2800      	cmp	r0, #0
 80a7fce:	f47f af76 	bne.w	80a7ebe <_strtod_r+0x706>
 80a7fd2:	e637      	b.n	80a7c44 <_strtod_r+0x48c>
 80a7fd4:	4622      	mov	r2, r4
 80a7fd6:	9904      	ldr	r1, [sp, #16]
 80a7fd8:	4650      	mov	r0, sl
 80a7fda:	f001 fb5d 	bl	80a9698 <__lshift>
 80a7fde:	9004      	str	r0, [sp, #16]
 80a7fe0:	2800      	cmp	r0, #0
 80a7fe2:	f47f af6f 	bne.w	80a7ec4 <_strtod_r+0x70c>
 80a7fe6:	e62d      	b.n	80a7c44 <_strtod_r+0x48c>
 80a7fe8:	4632      	mov	r2, r6
 80a7fea:	9902      	ldr	r1, [sp, #8]
 80a7fec:	4650      	mov	r0, sl
 80a7fee:	f001 fb53 	bl	80a9698 <__lshift>
 80a7ff2:	9002      	str	r0, [sp, #8]
 80a7ff4:	2800      	cmp	r0, #0
 80a7ff6:	f47f af68 	bne.w	80a7eca <_strtod_r+0x712>
 80a7ffa:	e623      	b.n	80a7c44 <_strtod_r+0x48c>
 80a7ffc:	f8db 3010 	ldr.w	r3, [fp, #16]
 80a8000:	2b01      	cmp	r3, #1
 80a8002:	dc8e      	bgt.n	80a7f22 <_strtod_r+0x76a>
 80a8004:	e17a      	b.n	80a82fc <_strtod_r+0xb44>
 80a8006:	d161      	bne.n	80a80cc <_strtod_r+0x914>
 80a8008:	9a06      	ldr	r2, [sp, #24]
 80a800a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80a800e:	b322      	cbz	r2, 80a805a <_strtod_r+0x8a2>
 80a8010:	4943      	ldr	r1, [pc, #268]	; (80a8120 <_strtod_r+0x968>)
 80a8012:	464a      	mov	r2, r9
 80a8014:	428b      	cmp	r3, r1
 80a8016:	d12e      	bne.n	80a8076 <_strtod_r+0x8be>
 80a8018:	9b03      	ldr	r3, [sp, #12]
 80a801a:	4641      	mov	r1, r8
 80a801c:	b163      	cbz	r3, 80a8038 <_strtod_r+0x880>
 80a801e:	4b41      	ldr	r3, [pc, #260]	; (80a8124 <_strtod_r+0x96c>)
 80a8020:	4013      	ands	r3, r2
 80a8022:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80a8026:	d807      	bhi.n	80a8038 <_strtod_r+0x880>
 80a8028:	0d1b      	lsrs	r3, r3, #20
 80a802a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80a802e:	f04f 30ff 	mov.w	r0, #4294967295
 80a8032:	fa00 f303 	lsl.w	r3, r0, r3
 80a8036:	e001      	b.n	80a803c <_strtod_r+0x884>
 80a8038:	f04f 33ff 	mov.w	r3, #4294967295
 80a803c:	428b      	cmp	r3, r1
 80a803e:	d11a      	bne.n	80a8076 <_strtod_r+0x8be>
 80a8040:	4939      	ldr	r1, [pc, #228]	; (80a8128 <_strtod_r+0x970>)
 80a8042:	428a      	cmp	r2, r1
 80a8044:	d102      	bne.n	80a804c <_strtod_r+0x894>
 80a8046:	3301      	adds	r3, #1
 80a8048:	f43f adfc 	beq.w	80a7c44 <_strtod_r+0x48c>
 80a804c:	4b35      	ldr	r3, [pc, #212]	; (80a8124 <_strtod_r+0x96c>)
 80a804e:	f04f 0800 	mov.w	r8, #0
 80a8052:	4013      	ands	r3, r2
 80a8054:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80a8058:	e150      	b.n	80a82fc <_strtod_r+0xb44>
 80a805a:	b963      	cbnz	r3, 80a8076 <_strtod_r+0x8be>
 80a805c:	f1b8 0f00 	cmp.w	r8, #0
 80a8060:	d109      	bne.n	80a8076 <_strtod_r+0x8be>
 80a8062:	e76a      	b.n	80a7f3a <_strtod_r+0x782>
 80a8064:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80a8068:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80a806c:	f04f 38ff 	mov.w	r8, #4294967295
 80a8070:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80a8074:	e142      	b.n	80a82fc <_strtod_r+0xb44>
 80a8076:	b115      	cbz	r5, 80a807e <_strtod_r+0x8c6>
 80a8078:	ea15 0f09 	tst.w	r5, r9
 80a807c:	e002      	b.n	80a8084 <_strtod_r+0x8cc>
 80a807e:	9b07      	ldr	r3, [sp, #28]
 80a8080:	ea13 0f08 	tst.w	r3, r8
 80a8084:	f000 813a 	beq.w	80a82fc <_strtod_r+0xb44>
 80a8088:	9b06      	ldr	r3, [sp, #24]
 80a808a:	9a03      	ldr	r2, [sp, #12]
 80a808c:	4640      	mov	r0, r8
 80a808e:	4649      	mov	r1, r9
 80a8090:	b153      	cbz	r3, 80a80a8 <_strtod_r+0x8f0>
 80a8092:	f7ff fb6f 	bl	80a7774 <sulp>
 80a8096:	4602      	mov	r2, r0
 80a8098:	460b      	mov	r3, r1
 80a809a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80a809e:	f7fd fae5 	bl	80a566c <__adddf3>
 80a80a2:	4680      	mov	r8, r0
 80a80a4:	4689      	mov	r9, r1
 80a80a6:	e129      	b.n	80a82fc <_strtod_r+0xb44>
 80a80a8:	f7ff fb64 	bl	80a7774 <sulp>
 80a80ac:	4602      	mov	r2, r0
 80a80ae:	460b      	mov	r3, r1
 80a80b0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80a80b4:	f7fd fad8 	bl	80a5668 <__aeabi_dsub>
 80a80b8:	2200      	movs	r2, #0
 80a80ba:	2300      	movs	r3, #0
 80a80bc:	4680      	mov	r8, r0
 80a80be:	4689      	mov	r9, r1
 80a80c0:	f7fd feee 	bl	80a5ea0 <__aeabi_dcmpeq>
 80a80c4:	2800      	cmp	r0, #0
 80a80c6:	f47f af48 	bne.w	80a7f5a <_strtod_r+0x7a2>
 80a80ca:	e117      	b.n	80a82fc <_strtod_r+0xb44>
 80a80cc:	9902      	ldr	r1, [sp, #8]
 80a80ce:	4658      	mov	r0, fp
 80a80d0:	f001 fc6d 	bl	80a99ae <__ratio>
 80a80d4:	2200      	movs	r2, #0
 80a80d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80a80da:	4606      	mov	r6, r0
 80a80dc:	460f      	mov	r7, r1
 80a80de:	f7fd fef3 	bl	80a5ec8 <__aeabi_dcmple>
 80a80e2:	2800      	cmp	r0, #0
 80a80e4:	d03f      	beq.n	80a8166 <_strtod_r+0x9ae>
 80a80e6:	9b06      	ldr	r3, [sp, #24]
 80a80e8:	b113      	cbz	r3, 80a80f0 <_strtod_r+0x938>
 80a80ea:	2600      	movs	r6, #0
 80a80ec:	4f0f      	ldr	r7, [pc, #60]	; (80a812c <_strtod_r+0x974>)
 80a80ee:	e010      	b.n	80a8112 <_strtod_r+0x95a>
 80a80f0:	f1b8 0f00 	cmp.w	r8, #0
 80a80f4:	d103      	bne.n	80a80fe <_strtod_r+0x946>
 80a80f6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80a80fa:	b93b      	cbnz	r3, 80a810c <_strtod_r+0x954>
 80a80fc:	e01a      	b.n	80a8134 <_strtod_r+0x97c>
 80a80fe:	f1b8 0f01 	cmp.w	r8, #1
 80a8102:	d103      	bne.n	80a810c <_strtod_r+0x954>
 80a8104:	f1b9 0f00 	cmp.w	r9, #0
 80a8108:	f43f af27 	beq.w	80a7f5a <_strtod_r+0x7a2>
 80a810c:	4f08      	ldr	r7, [pc, #32]	; (80a8130 <_strtod_r+0x978>)
 80a810e:	2600      	movs	r6, #0
 80a8110:	2400      	movs	r4, #0
 80a8112:	4d06      	ldr	r5, [pc, #24]	; (80a812c <_strtod_r+0x974>)
 80a8114:	e03c      	b.n	80a8190 <_strtod_r+0x9d8>
 80a8116:	bf00      	nop
 80a8118:	fffffc02 	.word	0xfffffc02
 80a811c:	fffffbe2 	.word	0xfffffbe2
 80a8120:	000fffff 	.word	0x000fffff
 80a8124:	7ff00000 	.word	0x7ff00000
 80a8128:	7fefffff 	.word	0x7fefffff
 80a812c:	3ff00000 	.word	0x3ff00000
 80a8130:	bff00000 	.word	0xbff00000
 80a8134:	2200      	movs	r2, #0
 80a8136:	4b9a      	ldr	r3, [pc, #616]	; (80a83a0 <_strtod_r+0xbe8>)
 80a8138:	4630      	mov	r0, r6
 80a813a:	4639      	mov	r1, r7
 80a813c:	f7fd feba 	bl	80a5eb4 <__aeabi_dcmplt>
 80a8140:	b940      	cbnz	r0, 80a8154 <_strtod_r+0x99c>
 80a8142:	2200      	movs	r2, #0
 80a8144:	4b97      	ldr	r3, [pc, #604]	; (80a83a4 <_strtod_r+0xbec>)
 80a8146:	4630      	mov	r0, r6
 80a8148:	4639      	mov	r1, r7
 80a814a:	f7fd fc41 	bl	80a59d0 <__aeabi_dmul>
 80a814e:	4604      	mov	r4, r0
 80a8150:	460d      	mov	r5, r1
 80a8152:	e001      	b.n	80a8158 <_strtod_r+0x9a0>
 80a8154:	9c06      	ldr	r4, [sp, #24]
 80a8156:	4d93      	ldr	r5, [pc, #588]	; (80a83a4 <_strtod_r+0xbec>)
 80a8158:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80a815c:	9414      	str	r4, [sp, #80]	; 0x50
 80a815e:	9315      	str	r3, [sp, #84]	; 0x54
 80a8160:	e9dd 6714 	ldrd	r6, r7, [sp, #80]	; 0x50
 80a8164:	e014      	b.n	80a8190 <_strtod_r+0x9d8>
 80a8166:	4b8f      	ldr	r3, [pc, #572]	; (80a83a4 <_strtod_r+0xbec>)
 80a8168:	2200      	movs	r2, #0
 80a816a:	4630      	mov	r0, r6
 80a816c:	4639      	mov	r1, r7
 80a816e:	f7fd fc2f 	bl	80a59d0 <__aeabi_dmul>
 80a8172:	9b06      	ldr	r3, [sp, #24]
 80a8174:	4604      	mov	r4, r0
 80a8176:	460d      	mov	r5, r1
 80a8178:	b923      	cbnz	r3, 80a8184 <_strtod_r+0x9cc>
 80a817a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80a817e:	900e      	str	r0, [sp, #56]	; 0x38
 80a8180:	930f      	str	r3, [sp, #60]	; 0x3c
 80a8182:	e003      	b.n	80a818c <_strtod_r+0x9d4>
 80a8184:	4602      	mov	r2, r0
 80a8186:	460b      	mov	r3, r1
 80a8188:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80a818c:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
 80a8190:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80a8194:	0d1b      	lsrs	r3, r3, #20
 80a8196:	051b      	lsls	r3, r3, #20
 80a8198:	9307      	str	r3, [sp, #28]
 80a819a:	9a07      	ldr	r2, [sp, #28]
 80a819c:	4b82      	ldr	r3, [pc, #520]	; (80a83a8 <_strtod_r+0xbf0>)
 80a819e:	429a      	cmp	r2, r3
 80a81a0:	d12b      	bne.n	80a81fa <_strtod_r+0xa42>
 80a81a2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80a81a6:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80a81aa:	4640      	mov	r0, r8
 80a81ac:	4649      	mov	r1, r9
 80a81ae:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80a81b2:	f001 fb3d 	bl	80a9830 <__ulp>
 80a81b6:	4602      	mov	r2, r0
 80a81b8:	460b      	mov	r3, r1
 80a81ba:	4630      	mov	r0, r6
 80a81bc:	4639      	mov	r1, r7
 80a81be:	f7fd fc07 	bl	80a59d0 <__aeabi_dmul>
 80a81c2:	4642      	mov	r2, r8
 80a81c4:	464b      	mov	r3, r9
 80a81c6:	f7fd fa51 	bl	80a566c <__adddf3>
 80a81ca:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80a81ce:	0d1b      	lsrs	r3, r3, #20
 80a81d0:	4a76      	ldr	r2, [pc, #472]	; (80a83ac <_strtod_r+0xbf4>)
 80a81d2:	051b      	lsls	r3, r3, #20
 80a81d4:	4293      	cmp	r3, r2
 80a81d6:	4680      	mov	r8, r0
 80a81d8:	d90c      	bls.n	80a81f4 <_strtod_r+0xa3c>
 80a81da:	4b75      	ldr	r3, [pc, #468]	; (80a83b0 <_strtod_r+0xbf8>)
 80a81dc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80a81de:	429a      	cmp	r2, r3
 80a81e0:	d103      	bne.n	80a81ea <_strtod_r+0xa32>
 80a81e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a81e4:	3301      	adds	r3, #1
 80a81e6:	f43f ad2d 	beq.w	80a7c44 <_strtod_r+0x48c>
 80a81ea:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 80a83b0 <_strtod_r+0xbf8>
 80a81ee:	f04f 38ff 	mov.w	r8, #4294967295
 80a81f2:	e072      	b.n	80a82da <_strtod_r+0xb22>
 80a81f4:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 80a81f8:	e039      	b.n	80a826e <_strtod_r+0xab6>
 80a81fa:	9b03      	ldr	r3, [sp, #12]
 80a81fc:	b33b      	cbz	r3, 80a824e <_strtod_r+0xa96>
 80a81fe:	9b07      	ldr	r3, [sp, #28]
 80a8200:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80a8204:	d823      	bhi.n	80a824e <_strtod_r+0xa96>
 80a8206:	a35e      	add	r3, pc, #376	; (adr r3, 80a8380 <_strtod_r+0xbc8>)
 80a8208:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a820c:	4620      	mov	r0, r4
 80a820e:	4629      	mov	r1, r5
 80a8210:	f7fd fe5a 	bl	80a5ec8 <__aeabi_dcmple>
 80a8214:	b1b8      	cbz	r0, 80a8246 <_strtod_r+0xa8e>
 80a8216:	4629      	mov	r1, r5
 80a8218:	4620      	mov	r0, r4
 80a821a:	f7fd feb1 	bl	80a5f80 <__aeabi_d2uiz>
 80a821e:	2800      	cmp	r0, #0
 80a8220:	bf08      	it	eq
 80a8222:	2001      	moveq	r0, #1
 80a8224:	f7fd fb5e 	bl	80a58e4 <__aeabi_ui2d>
 80a8228:	9b06      	ldr	r3, [sp, #24]
 80a822a:	4604      	mov	r4, r0
 80a822c:	460d      	mov	r5, r1
 80a822e:	b923      	cbnz	r3, 80a823a <_strtod_r+0xa82>
 80a8230:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80a8234:	9010      	str	r0, [sp, #64]	; 0x40
 80a8236:	9311      	str	r3, [sp, #68]	; 0x44
 80a8238:	e003      	b.n	80a8242 <_strtod_r+0xa8a>
 80a823a:	4602      	mov	r2, r0
 80a823c:	460b      	mov	r3, r1
 80a823e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80a8242:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80a8246:	9a07      	ldr	r2, [sp, #28]
 80a8248:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 80a824c:	1a9f      	subs	r7, r3, r2
 80a824e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80a8252:	f001 faed 	bl	80a9830 <__ulp>
 80a8256:	4602      	mov	r2, r0
 80a8258:	460b      	mov	r3, r1
 80a825a:	4630      	mov	r0, r6
 80a825c:	4639      	mov	r1, r7
 80a825e:	f7fd fbb7 	bl	80a59d0 <__aeabi_dmul>
 80a8262:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80a8266:	f7fd fa01 	bl	80a566c <__adddf3>
 80a826a:	4680      	mov	r8, r0
 80a826c:	4689      	mov	r9, r1
 80a826e:	9b03      	ldr	r3, [sp, #12]
 80a8270:	bb9b      	cbnz	r3, 80a82da <_strtod_r+0xb22>
 80a8272:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80a8276:	0d1b      	lsrs	r3, r3, #20
 80a8278:	9a07      	ldr	r2, [sp, #28]
 80a827a:	051b      	lsls	r3, r3, #20
 80a827c:	429a      	cmp	r2, r3
 80a827e:	464e      	mov	r6, r9
 80a8280:	d12b      	bne.n	80a82da <_strtod_r+0xb22>
 80a8282:	4629      	mov	r1, r5
 80a8284:	4620      	mov	r0, r4
 80a8286:	f7fd fe53 	bl	80a5f30 <__aeabi_d2iz>
 80a828a:	f7fd fb3b 	bl	80a5904 <__aeabi_i2d>
 80a828e:	460b      	mov	r3, r1
 80a8290:	4602      	mov	r2, r0
 80a8292:	4629      	mov	r1, r5
 80a8294:	4620      	mov	r0, r4
 80a8296:	f7fd f9e7 	bl	80a5668 <__aeabi_dsub>
 80a829a:	9b06      	ldr	r3, [sp, #24]
 80a829c:	4604      	mov	r4, r0
 80a829e:	460d      	mov	r5, r1
 80a82a0:	b92b      	cbnz	r3, 80a82ae <_strtod_r+0xaf6>
 80a82a2:	f1b8 0f00 	cmp.w	r8, #0
 80a82a6:	d102      	bne.n	80a82ae <_strtod_r+0xaf6>
 80a82a8:	f3c9 0613 	ubfx	r6, r9, #0, #20
 80a82ac:	b17e      	cbz	r6, 80a82ce <_strtod_r+0xb16>
 80a82ae:	a336      	add	r3, pc, #216	; (adr r3, 80a8388 <_strtod_r+0xbd0>)
 80a82b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a82b4:	4620      	mov	r0, r4
 80a82b6:	4629      	mov	r1, r5
 80a82b8:	f7fd fdfc 	bl	80a5eb4 <__aeabi_dcmplt>
 80a82bc:	bb88      	cbnz	r0, 80a8322 <_strtod_r+0xb6a>
 80a82be:	a334      	add	r3, pc, #208	; (adr r3, 80a8390 <_strtod_r+0xbd8>)
 80a82c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a82c4:	4620      	mov	r0, r4
 80a82c6:	4629      	mov	r1, r5
 80a82c8:	f7fd fe12 	bl	80a5ef0 <__aeabi_dcmpgt>
 80a82cc:	e004      	b.n	80a82d8 <_strtod_r+0xb20>
 80a82ce:	a332      	add	r3, pc, #200	; (adr r3, 80a8398 <_strtod_r+0xbe0>)
 80a82d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a82d4:	f7fd fdee 	bl	80a5eb4 <__aeabi_dcmplt>
 80a82d8:	bb18      	cbnz	r0, 80a8322 <_strtod_r+0xb6a>
 80a82da:	9918      	ldr	r1, [sp, #96]	; 0x60
 80a82dc:	4650      	mov	r0, sl
 80a82de:	f001 f816 	bl	80a930e <_Bfree>
 80a82e2:	9904      	ldr	r1, [sp, #16]
 80a82e4:	4650      	mov	r0, sl
 80a82e6:	f001 f812 	bl	80a930e <_Bfree>
 80a82ea:	9902      	ldr	r1, [sp, #8]
 80a82ec:	4650      	mov	r0, sl
 80a82ee:	f001 f80e 	bl	80a930e <_Bfree>
 80a82f2:	4659      	mov	r1, fp
 80a82f4:	4650      	mov	r0, sl
 80a82f6:	f001 f80a 	bl	80a930e <_Bfree>
 80a82fa:	e574      	b.n	80a7de6 <_strtod_r+0x62e>
 80a82fc:	9b03      	ldr	r3, [sp, #12]
 80a82fe:	b183      	cbz	r3, 80a8322 <_strtod_r+0xb6a>
 80a8300:	4b2c      	ldr	r3, [pc, #176]	; (80a83b4 <_strtod_r+0xbfc>)
 80a8302:	4640      	mov	r0, r8
 80a8304:	930b      	str	r3, [sp, #44]	; 0x2c
 80a8306:	2300      	movs	r3, #0
 80a8308:	930a      	str	r3, [sp, #40]	; 0x28
 80a830a:	4649      	mov	r1, r9
 80a830c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80a8310:	f7fd fb5e 	bl	80a59d0 <__aeabi_dmul>
 80a8314:	4680      	mov	r8, r0
 80a8316:	4689      	mov	r9, r1
 80a8318:	b919      	cbnz	r1, 80a8322 <_strtod_r+0xb6a>
 80a831a:	b910      	cbnz	r0, 80a8322 <_strtod_r+0xb6a>
 80a831c:	2322      	movs	r3, #34	; 0x22
 80a831e:	f8ca 3000 	str.w	r3, [sl]
 80a8322:	9918      	ldr	r1, [sp, #96]	; 0x60
 80a8324:	4650      	mov	r0, sl
 80a8326:	f000 fff2 	bl	80a930e <_Bfree>
 80a832a:	9904      	ldr	r1, [sp, #16]
 80a832c:	4650      	mov	r0, sl
 80a832e:	f000 ffee 	bl	80a930e <_Bfree>
 80a8332:	9902      	ldr	r1, [sp, #8]
 80a8334:	4650      	mov	r0, sl
 80a8336:	f000 ffea 	bl	80a930e <_Bfree>
 80a833a:	9905      	ldr	r1, [sp, #20]
 80a833c:	4650      	mov	r0, sl
 80a833e:	f000 ffe6 	bl	80a930e <_Bfree>
 80a8342:	4659      	mov	r1, fp
 80a8344:	4650      	mov	r0, sl
 80a8346:	f000 ffe2 	bl	80a930e <_Bfree>
 80a834a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80a834c:	b113      	cbz	r3, 80a8354 <_strtod_r+0xb9c>
 80a834e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a8350:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80a8352:	6013      	str	r3, [r2, #0]
 80a8354:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80a8356:	b11b      	cbz	r3, 80a8360 <_strtod_r+0xba8>
 80a8358:	4642      	mov	r2, r8
 80a835a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80a835e:	e007      	b.n	80a8370 <_strtod_r+0xbb8>
 80a8360:	4642      	mov	r2, r8
 80a8362:	464b      	mov	r3, r9
 80a8364:	e004      	b.n	80a8370 <_strtod_r+0xbb8>
 80a8366:	2500      	movs	r5, #0
 80a8368:	462a      	mov	r2, r5
 80a836a:	2101      	movs	r1, #1
 80a836c:	f7ff bb47 	b.w	80a79fe <_strtod_r+0x246>
 80a8370:	4610      	mov	r0, r2
 80a8372:	4619      	mov	r1, r3
 80a8374:	b01d      	add	sp, #116	; 0x74
 80a8376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a837a:	bf00      	nop
 80a837c:	f3af 8000 	nop.w
 80a8380:	ffc00000 	.word	0xffc00000
 80a8384:	41dfffff 	.word	0x41dfffff
 80a8388:	94a03595 	.word	0x94a03595
 80a838c:	3fdfffff 	.word	0x3fdfffff
 80a8390:	35afe535 	.word	0x35afe535
 80a8394:	3fe00000 	.word	0x3fe00000
 80a8398:	94a03595 	.word	0x94a03595
 80a839c:	3fcfffff 	.word	0x3fcfffff
 80a83a0:	3ff00000 	.word	0x3ff00000
 80a83a4:	3fe00000 	.word	0x3fe00000
 80a83a8:	7fe00000 	.word	0x7fe00000
 80a83ac:	7c9fffff 	.word	0x7c9fffff
 80a83b0:	7fefffff 	.word	0x7fefffff
 80a83b4:	39500000 	.word	0x39500000

080a83b8 <strtof>:
 80a83b8:	b538      	push	{r3, r4, r5, lr}
 80a83ba:	4b0b      	ldr	r3, [pc, #44]	; (80a83e8 <strtof+0x30>)
 80a83bc:	460a      	mov	r2, r1
 80a83be:	4601      	mov	r1, r0
 80a83c0:	6818      	ldr	r0, [r3, #0]
 80a83c2:	f7ff f9f9 	bl	80a77b8 <_strtod_r>
 80a83c6:	4602      	mov	r2, r0
 80a83c8:	460b      	mov	r3, r1
 80a83ca:	4604      	mov	r4, r0
 80a83cc:	460d      	mov	r5, r1
 80a83ce:	f7fd fd99 	bl	80a5f04 <__aeabi_dcmpun>
 80a83d2:	b120      	cbz	r0, 80a83de <strtof+0x26>
 80a83d4:	2000      	movs	r0, #0
 80a83d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a83da:	f001 bb5b 	b.w	80a9a94 <nanf>
 80a83de:	4620      	mov	r0, r4
 80a83e0:	4629      	mov	r1, r5
 80a83e2:	f7fd fded 	bl	80a5fc0 <__aeabi_d2f>
 80a83e6:	bd38      	pop	{r3, r4, r5, pc}
 80a83e8:	20000078 	.word	0x20000078

080a83ec <_strtol_r>:
 80a83ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a83f0:	460f      	mov	r7, r1
 80a83f2:	4680      	mov	r8, r0
 80a83f4:	483f      	ldr	r0, [pc, #252]	; (80a84f4 <_strtol_r+0x108>)
 80a83f6:	f8d0 9000 	ldr.w	r9, [r0]
 80a83fa:	463d      	mov	r5, r7
 80a83fc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a8400:	eb09 0004 	add.w	r0, r9, r4
 80a8404:	7840      	ldrb	r0, [r0, #1]
 80a8406:	f000 0008 	and.w	r0, r0, #8
 80a840a:	f000 06ff 	and.w	r6, r0, #255	; 0xff
 80a840e:	b108      	cbz	r0, 80a8414 <_strtol_r+0x28>
 80a8410:	462f      	mov	r7, r5
 80a8412:	e7f2      	b.n	80a83fa <_strtol_r+0xe>
 80a8414:	2c2d      	cmp	r4, #45	; 0x2d
 80a8416:	d103      	bne.n	80a8420 <_strtol_r+0x34>
 80a8418:	1cbd      	adds	r5, r7, #2
 80a841a:	787c      	ldrb	r4, [r7, #1]
 80a841c:	2601      	movs	r6, #1
 80a841e:	e003      	b.n	80a8428 <_strtol_r+0x3c>
 80a8420:	2c2b      	cmp	r4, #43	; 0x2b
 80a8422:	bf04      	itt	eq
 80a8424:	787c      	ldrbeq	r4, [r7, #1]
 80a8426:	1cbd      	addeq	r5, r7, #2
 80a8428:	b113      	cbz	r3, 80a8430 <_strtol_r+0x44>
 80a842a:	2b10      	cmp	r3, #16
 80a842c:	d10a      	bne.n	80a8444 <_strtol_r+0x58>
 80a842e:	e05b      	b.n	80a84e8 <_strtol_r+0xfc>
 80a8430:	2c30      	cmp	r4, #48	; 0x30
 80a8432:	d157      	bne.n	80a84e4 <_strtol_r+0xf8>
 80a8434:	7828      	ldrb	r0, [r5, #0]
 80a8436:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80a843a:	2858      	cmp	r0, #88	; 0x58
 80a843c:	d14d      	bne.n	80a84da <_strtol_r+0xee>
 80a843e:	786c      	ldrb	r4, [r5, #1]
 80a8440:	2310      	movs	r3, #16
 80a8442:	3502      	adds	r5, #2
 80a8444:	2e00      	cmp	r6, #0
 80a8446:	bf14      	ite	ne
 80a8448:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
 80a844c:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
 80a8450:	fbbc faf3 	udiv	sl, ip, r3
 80a8454:	2700      	movs	r7, #0
 80a8456:	4638      	mov	r0, r7
 80a8458:	fb03 cc1a 	mls	ip, r3, sl, ip
 80a845c:	eb09 0e04 	add.w	lr, r9, r4
 80a8460:	f89e e001 	ldrb.w	lr, [lr, #1]
 80a8464:	f01e 0f04 	tst.w	lr, #4
 80a8468:	d001      	beq.n	80a846e <_strtol_r+0x82>
 80a846a:	3c30      	subs	r4, #48	; 0x30
 80a846c:	e00b      	b.n	80a8486 <_strtol_r+0x9a>
 80a846e:	f01e 0e03 	ands.w	lr, lr, #3
 80a8472:	d01b      	beq.n	80a84ac <_strtol_r+0xc0>
 80a8474:	f1be 0f01 	cmp.w	lr, #1
 80a8478:	bf0c      	ite	eq
 80a847a:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 80a847e:	f04f 0e57 	movne.w	lr, #87	; 0x57
 80a8482:	ebce 0404 	rsb	r4, lr, r4
 80a8486:	42a3      	cmp	r3, r4
 80a8488:	dd10      	ble.n	80a84ac <_strtol_r+0xc0>
 80a848a:	f1b7 3fff 	cmp.w	r7, #4294967295
 80a848e:	d00a      	beq.n	80a84a6 <_strtol_r+0xba>
 80a8490:	4550      	cmp	r0, sl
 80a8492:	d806      	bhi.n	80a84a2 <_strtol_r+0xb6>
 80a8494:	d101      	bne.n	80a849a <_strtol_r+0xae>
 80a8496:	4564      	cmp	r4, ip
 80a8498:	dc03      	bgt.n	80a84a2 <_strtol_r+0xb6>
 80a849a:	fb03 4000 	mla	r0, r3, r0, r4
 80a849e:	2701      	movs	r7, #1
 80a84a0:	e001      	b.n	80a84a6 <_strtol_r+0xba>
 80a84a2:	f04f 37ff 	mov.w	r7, #4294967295
 80a84a6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a84aa:	e7d7      	b.n	80a845c <_strtol_r+0x70>
 80a84ac:	1c7b      	adds	r3, r7, #1
 80a84ae:	d10c      	bne.n	80a84ca <_strtol_r+0xde>
 80a84b0:	2e00      	cmp	r6, #0
 80a84b2:	f04f 0322 	mov.w	r3, #34	; 0x22
 80a84b6:	bf14      	ite	ne
 80a84b8:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 80a84bc:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a84c0:	f8c8 3000 	str.w	r3, [r8]
 80a84c4:	b92a      	cbnz	r2, 80a84d2 <_strtol_r+0xe6>
 80a84c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a84ca:	b106      	cbz	r6, 80a84ce <_strtol_r+0xe2>
 80a84cc:	4240      	negs	r0, r0
 80a84ce:	b172      	cbz	r2, 80a84ee <_strtol_r+0x102>
 80a84d0:	b107      	cbz	r7, 80a84d4 <_strtol_r+0xe8>
 80a84d2:	1e69      	subs	r1, r5, #1
 80a84d4:	6011      	str	r1, [r2, #0]
 80a84d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a84da:	2430      	movs	r4, #48	; 0x30
 80a84dc:	2b00      	cmp	r3, #0
 80a84de:	d1b1      	bne.n	80a8444 <_strtol_r+0x58>
 80a84e0:	2308      	movs	r3, #8
 80a84e2:	e7af      	b.n	80a8444 <_strtol_r+0x58>
 80a84e4:	230a      	movs	r3, #10
 80a84e6:	e7ad      	b.n	80a8444 <_strtol_r+0x58>
 80a84e8:	2c30      	cmp	r4, #48	; 0x30
 80a84ea:	d0a3      	beq.n	80a8434 <_strtol_r+0x48>
 80a84ec:	e7aa      	b.n	80a8444 <_strtol_r+0x58>
 80a84ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a84f2:	bf00      	nop
 80a84f4:	20000014 	.word	0x20000014

080a84f8 <strtol>:
 80a84f8:	4613      	mov	r3, r2
 80a84fa:	460a      	mov	r2, r1
 80a84fc:	4601      	mov	r1, r0
 80a84fe:	4802      	ldr	r0, [pc, #8]	; (80a8508 <strtol+0x10>)
 80a8500:	6800      	ldr	r0, [r0, #0]
 80a8502:	f7ff bf73 	b.w	80a83ec <_strtol_r>
 80a8506:	bf00      	nop
 80a8508:	20000078 	.word	0x20000078

080a850c <_strtoul_r>:
 80a850c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a8510:	460e      	mov	r6, r1
 80a8512:	4680      	mov	r8, r0
 80a8514:	483b      	ldr	r0, [pc, #236]	; (80a8604 <_strtoul_r+0xf8>)
 80a8516:	f8d0 9000 	ldr.w	r9, [r0]
 80a851a:	4635      	mov	r5, r6
 80a851c:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a8520:	eb09 0004 	add.w	r0, r9, r4
 80a8524:	7840      	ldrb	r0, [r0, #1]
 80a8526:	f000 0008 	and.w	r0, r0, #8
 80a852a:	f000 07ff 	and.w	r7, r0, #255	; 0xff
 80a852e:	b108      	cbz	r0, 80a8534 <_strtoul_r+0x28>
 80a8530:	462e      	mov	r6, r5
 80a8532:	e7f2      	b.n	80a851a <_strtoul_r+0xe>
 80a8534:	2c2d      	cmp	r4, #45	; 0x2d
 80a8536:	d103      	bne.n	80a8540 <_strtoul_r+0x34>
 80a8538:	1cb5      	adds	r5, r6, #2
 80a853a:	7874      	ldrb	r4, [r6, #1]
 80a853c:	2701      	movs	r7, #1
 80a853e:	e003      	b.n	80a8548 <_strtoul_r+0x3c>
 80a8540:	2c2b      	cmp	r4, #43	; 0x2b
 80a8542:	bf04      	itt	eq
 80a8544:	7874      	ldrbeq	r4, [r6, #1]
 80a8546:	1cb5      	addeq	r5, r6, #2
 80a8548:	b113      	cbz	r3, 80a8550 <_strtoul_r+0x44>
 80a854a:	2b10      	cmp	r3, #16
 80a854c:	d10a      	bne.n	80a8564 <_strtoul_r+0x58>
 80a854e:	e053      	b.n	80a85f8 <_strtoul_r+0xec>
 80a8550:	2c30      	cmp	r4, #48	; 0x30
 80a8552:	d14f      	bne.n	80a85f4 <_strtoul_r+0xe8>
 80a8554:	7828      	ldrb	r0, [r5, #0]
 80a8556:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80a855a:	2858      	cmp	r0, #88	; 0x58
 80a855c:	d145      	bne.n	80a85ea <_strtoul_r+0xde>
 80a855e:	786c      	ldrb	r4, [r5, #1]
 80a8560:	2310      	movs	r3, #16
 80a8562:	3502      	adds	r5, #2
 80a8564:	f04f 3cff 	mov.w	ip, #4294967295
 80a8568:	fbbc fcf3 	udiv	ip, ip, r3
 80a856c:	fb03 fa0c 	mul.w	sl, r3, ip
 80a8570:	2600      	movs	r6, #0
 80a8572:	ea6f 0a0a 	mvn.w	sl, sl
 80a8576:	4630      	mov	r0, r6
 80a8578:	eb09 0e04 	add.w	lr, r9, r4
 80a857c:	f89e e001 	ldrb.w	lr, [lr, #1]
 80a8580:	f01e 0f04 	tst.w	lr, #4
 80a8584:	d001      	beq.n	80a858a <_strtoul_r+0x7e>
 80a8586:	3c30      	subs	r4, #48	; 0x30
 80a8588:	e00b      	b.n	80a85a2 <_strtoul_r+0x96>
 80a858a:	f01e 0e03 	ands.w	lr, lr, #3
 80a858e:	d01a      	beq.n	80a85c6 <_strtoul_r+0xba>
 80a8590:	f1be 0f01 	cmp.w	lr, #1
 80a8594:	bf0c      	ite	eq
 80a8596:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 80a859a:	f04f 0e57 	movne.w	lr, #87	; 0x57
 80a859e:	ebce 0404 	rsb	r4, lr, r4
 80a85a2:	42a3      	cmp	r3, r4
 80a85a4:	dd0f      	ble.n	80a85c6 <_strtoul_r+0xba>
 80a85a6:	2e00      	cmp	r6, #0
 80a85a8:	db08      	blt.n	80a85bc <_strtoul_r+0xb0>
 80a85aa:	4560      	cmp	r0, ip
 80a85ac:	d806      	bhi.n	80a85bc <_strtoul_r+0xb0>
 80a85ae:	d101      	bne.n	80a85b4 <_strtoul_r+0xa8>
 80a85b0:	4554      	cmp	r4, sl
 80a85b2:	dc03      	bgt.n	80a85bc <_strtoul_r+0xb0>
 80a85b4:	fb03 4000 	mla	r0, r3, r0, r4
 80a85b8:	2601      	movs	r6, #1
 80a85ba:	e001      	b.n	80a85c0 <_strtoul_r+0xb4>
 80a85bc:	f04f 36ff 	mov.w	r6, #4294967295
 80a85c0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a85c4:	e7d8      	b.n	80a8578 <_strtoul_r+0x6c>
 80a85c6:	2e00      	cmp	r6, #0
 80a85c8:	da07      	bge.n	80a85da <_strtoul_r+0xce>
 80a85ca:	2322      	movs	r3, #34	; 0x22
 80a85cc:	f8c8 3000 	str.w	r3, [r8]
 80a85d0:	f04f 30ff 	mov.w	r0, #4294967295
 80a85d4:	b92a      	cbnz	r2, 80a85e2 <_strtoul_r+0xd6>
 80a85d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a85da:	b107      	cbz	r7, 80a85de <_strtoul_r+0xd2>
 80a85dc:	4240      	negs	r0, r0
 80a85de:	b172      	cbz	r2, 80a85fe <_strtoul_r+0xf2>
 80a85e0:	b106      	cbz	r6, 80a85e4 <_strtoul_r+0xd8>
 80a85e2:	1e69      	subs	r1, r5, #1
 80a85e4:	6011      	str	r1, [r2, #0]
 80a85e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a85ea:	2430      	movs	r4, #48	; 0x30
 80a85ec:	2b00      	cmp	r3, #0
 80a85ee:	d1b9      	bne.n	80a8564 <_strtoul_r+0x58>
 80a85f0:	2308      	movs	r3, #8
 80a85f2:	e7b7      	b.n	80a8564 <_strtoul_r+0x58>
 80a85f4:	230a      	movs	r3, #10
 80a85f6:	e7b5      	b.n	80a8564 <_strtoul_r+0x58>
 80a85f8:	2c30      	cmp	r4, #48	; 0x30
 80a85fa:	d0ab      	beq.n	80a8554 <_strtoul_r+0x48>
 80a85fc:	e7b2      	b.n	80a8564 <_strtoul_r+0x58>
 80a85fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a8602:	bf00      	nop
 80a8604:	20000014 	.word	0x20000014

080a8608 <strtoul>:
 80a8608:	4613      	mov	r3, r2
 80a860a:	460a      	mov	r2, r1
 80a860c:	4601      	mov	r1, r0
 80a860e:	4802      	ldr	r0, [pc, #8]	; (80a8618 <strtoul+0x10>)
 80a8610:	6800      	ldr	r0, [r0, #0]
 80a8612:	f7ff bf7b 	b.w	80a850c <_strtoul_r>
 80a8616:	bf00      	nop
 80a8618:	20000078 	.word	0x20000078

080a861c <__get_current_time_locale>:
 80a861c:	4b04      	ldr	r3, [pc, #16]	; (80a8630 <__get_current_time_locale+0x14>)
 80a861e:	4a05      	ldr	r2, [pc, #20]	; (80a8634 <__get_current_time_locale+0x18>)
 80a8620:	6818      	ldr	r0, [r3, #0]
 80a8622:	4b05      	ldr	r3, [pc, #20]	; (80a8638 <__get_current_time_locale+0x1c>)
 80a8624:	2800      	cmp	r0, #0
 80a8626:	bf14      	ite	ne
 80a8628:	4610      	movne	r0, r2
 80a862a:	4618      	moveq	r0, r3
 80a862c:	4770      	bx	lr
 80a862e:	bf00      	nop
 80a8630:	200005bc 	.word	0x200005bc
 80a8634:	200005c0 	.word	0x200005c0
 80a8638:	080aa750 	.word	0x080aa750

080a863c <__tzcalc_limits>:
 80a863c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a8640:	4604      	mov	r4, r0
 80a8642:	f000 fd91 	bl	80a9168 <__gettzinfo>
 80a8646:	f240 73b1 	movw	r3, #1969	; 0x7b1
 80a864a:	429c      	cmp	r4, r3
 80a864c:	f340 8096 	ble.w	80a877c <__tzcalc_limits+0x140>
 80a8650:	f240 156d 	movw	r5, #365	; 0x16d
 80a8654:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 80a8658:	18e3      	adds	r3, r4, r3
 80a865a:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
 80a865e:	109b      	asrs	r3, r3, #2
 80a8660:	fb05 3502 	mla	r5, r5, r2, r3
 80a8664:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
 80a8668:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80a866c:	fb92 f3f3 	sdiv	r3, r2, r3
 80a8670:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 80a8674:	442b      	add	r3, r5
 80a8676:	18a5      	adds	r5, r4, r2
 80a8678:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80a867c:	fb94 f7f2 	sdiv	r7, r4, r2
 80a8680:	fb95 f5f2 	sdiv	r5, r5, r2
 80a8684:	fb02 4717 	mls	r7, r2, r7, r4
 80a8688:	441d      	add	r5, r3
 80a868a:	2364      	movs	r3, #100	; 0x64
 80a868c:	fb94 f6f3 	sdiv	r6, r4, r3
 80a8690:	fab7 fe87 	clz	lr, r7
 80a8694:	4601      	mov	r1, r0
 80a8696:	fb03 4616 	mls	r6, r3, r6, r4
 80a869a:	f100 0338 	add.w	r3, r0, #56	; 0x38
 80a869e:	9301      	str	r3, [sp, #4]
 80a86a0:	f004 0303 	and.w	r3, r4, #3
 80a86a4:	6044      	str	r4, [r0, #4]
 80a86a6:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80a86aa:	9300      	str	r3, [sp, #0]
 80a86ac:	f04f 0c07 	mov.w	ip, #7
 80a86b0:	7a0b      	ldrb	r3, [r1, #8]
 80a86b2:	2b4a      	cmp	r3, #74	; 0x4a
 80a86b4:	d10e      	bne.n	80a86d4 <__tzcalc_limits+0x98>
 80a86b6:	694b      	ldr	r3, [r1, #20]
 80a86b8:	9a00      	ldr	r2, [sp, #0]
 80a86ba:	18ec      	adds	r4, r5, r3
 80a86bc:	b902      	cbnz	r2, 80a86c0 <__tzcalc_limits+0x84>
 80a86be:	b906      	cbnz	r6, 80a86c2 <__tzcalc_limits+0x86>
 80a86c0:	b927      	cbnz	r7, 80a86cc <__tzcalc_limits+0x90>
 80a86c2:	2b3b      	cmp	r3, #59	; 0x3b
 80a86c4:	bfd4      	ite	le
 80a86c6:	2300      	movle	r3, #0
 80a86c8:	2301      	movgt	r3, #1
 80a86ca:	e000      	b.n	80a86ce <__tzcalc_limits+0x92>
 80a86cc:	2300      	movs	r3, #0
 80a86ce:	4423      	add	r3, r4
 80a86d0:	3b01      	subs	r3, #1
 80a86d2:	e03f      	b.n	80a8754 <__tzcalc_limits+0x118>
 80a86d4:	2b44      	cmp	r3, #68	; 0x44
 80a86d6:	d102      	bne.n	80a86de <__tzcalc_limits+0xa2>
 80a86d8:	694b      	ldr	r3, [r1, #20]
 80a86da:	442b      	add	r3, r5
 80a86dc:	e03a      	b.n	80a8754 <__tzcalc_limits+0x118>
 80a86de:	9b00      	ldr	r3, [sp, #0]
 80a86e0:	b92b      	cbnz	r3, 80a86ee <__tzcalc_limits+0xb2>
 80a86e2:	2e00      	cmp	r6, #0
 80a86e4:	bf0c      	ite	eq
 80a86e6:	46f0      	moveq	r8, lr
 80a86e8:	f04f 0801 	movne.w	r8, #1
 80a86ec:	e000      	b.n	80a86f0 <__tzcalc_limits+0xb4>
 80a86ee:	46f0      	mov	r8, lr
 80a86f0:	46a9      	mov	r9, r5
 80a86f2:	4b24      	ldr	r3, [pc, #144]	; (80a8784 <__tzcalc_limits+0x148>)
 80a86f4:	2230      	movs	r2, #48	; 0x30
 80a86f6:	fb02 3808 	mla	r8, r2, r8, r3
 80a86fa:	68cc      	ldr	r4, [r1, #12]
 80a86fc:	f1a8 0a04 	sub.w	sl, r8, #4
 80a8700:	2301      	movs	r3, #1
 80a8702:	42a3      	cmp	r3, r4
 80a8704:	da04      	bge.n	80a8710 <__tzcalc_limits+0xd4>
 80a8706:	f85a bf04 	ldr.w	fp, [sl, #4]!
 80a870a:	3301      	adds	r3, #1
 80a870c:	44d9      	add	r9, fp
 80a870e:	e7f8      	b.n	80a8702 <__tzcalc_limits+0xc6>
 80a8710:	f109 0304 	add.w	r3, r9, #4
 80a8714:	fb93 fbfc 	sdiv	fp, r3, ip
 80a8718:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
 80a871c:	ebca 0a03 	rsb	sl, sl, r3
 80a8720:	694b      	ldr	r3, [r1, #20]
 80a8722:	2c01      	cmp	r4, #1
 80a8724:	bfb8      	it	lt
 80a8726:	2401      	movlt	r4, #1
 80a8728:	ebb3 0a0a 	subs.w	sl, r3, sl
 80a872c:	690b      	ldr	r3, [r1, #16]
 80a872e:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 80a8732:	f103 33ff 	add.w	r3, r3, #4294967295
 80a8736:	f104 34ff 	add.w	r4, r4, #4294967295
 80a873a:	bf48      	it	mi
 80a873c:	f10a 0a07 	addmi.w	sl, sl, #7
 80a8740:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a8744:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 80a8748:	4453      	add	r3, sl
 80a874a:	42a3      	cmp	r3, r4
 80a874c:	db01      	blt.n	80a8752 <__tzcalc_limits+0x116>
 80a874e:	3b07      	subs	r3, #7
 80a8750:	e7fb      	b.n	80a874a <__tzcalc_limits+0x10e>
 80a8752:	444b      	add	r3, r9
 80a8754:	698c      	ldr	r4, [r1, #24]
 80a8756:	4a0c      	ldr	r2, [pc, #48]	; (80a8788 <__tzcalc_limits+0x14c>)
 80a8758:	fb02 4303 	mla	r3, r2, r3, r4
 80a875c:	6a0c      	ldr	r4, [r1, #32]
 80a875e:	4423      	add	r3, r4
 80a8760:	f841 3f1c 	str.w	r3, [r1, #28]!
 80a8764:	9b01      	ldr	r3, [sp, #4]
 80a8766:	4299      	cmp	r1, r3
 80a8768:	d1a2      	bne.n	80a86b0 <__tzcalc_limits+0x74>
 80a876a:	69c3      	ldr	r3, [r0, #28]
 80a876c:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80a876e:	4293      	cmp	r3, r2
 80a8770:	bfac      	ite	ge
 80a8772:	2300      	movge	r3, #0
 80a8774:	2301      	movlt	r3, #1
 80a8776:	6003      	str	r3, [r0, #0]
 80a8778:	2001      	movs	r0, #1
 80a877a:	e000      	b.n	80a877e <__tzcalc_limits+0x142>
 80a877c:	2000      	movs	r0, #0
 80a877e:	b003      	add	sp, #12
 80a8780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a8784:	080aa510 	.word	0x080aa510
 80a8788:	00015180 	.word	0x00015180

080a878c <__tz_lock>:
 80a878c:	4770      	bx	lr

080a878e <__tz_unlock>:
 80a878e:	4770      	bx	lr

080a8790 <_tzset_unlocked>:
 80a8790:	4b01      	ldr	r3, [pc, #4]	; (80a8798 <_tzset_unlocked+0x8>)
 80a8792:	6818      	ldr	r0, [r3, #0]
 80a8794:	f000 b802 	b.w	80a879c <_tzset_unlocked_r>
 80a8798:	20000078 	.word	0x20000078

080a879c <_tzset_unlocked_r>:
 80a879c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a87a0:	b08d      	sub	sp, #52	; 0x34
 80a87a2:	4607      	mov	r7, r0
 80a87a4:	f000 fce0 	bl	80a9168 <__gettzinfo>
 80a87a8:	49b0      	ldr	r1, [pc, #704]	; (80a8a6c <_tzset_unlocked_r+0x2d0>)
 80a87aa:	4604      	mov	r4, r0
 80a87ac:	4638      	mov	r0, r7
 80a87ae:	f000 fcd3 	bl	80a9158 <_getenv_r>
 80a87b2:	4eaf      	ldr	r6, [pc, #700]	; (80a8a70 <_tzset_unlocked_r+0x2d4>)
 80a87b4:	4605      	mov	r5, r0
 80a87b6:	b960      	cbnz	r0, 80a87d2 <_tzset_unlocked_r+0x36>
 80a87b8:	4bae      	ldr	r3, [pc, #696]	; (80a8a74 <_tzset_unlocked_r+0x2d8>)
 80a87ba:	4aaf      	ldr	r2, [pc, #700]	; (80a8a78 <_tzset_unlocked_r+0x2dc>)
 80a87bc:	6018      	str	r0, [r3, #0]
 80a87be:	4baf      	ldr	r3, [pc, #700]	; (80a8a7c <_tzset_unlocked_r+0x2e0>)
 80a87c0:	6018      	str	r0, [r3, #0]
 80a87c2:	4baf      	ldr	r3, [pc, #700]	; (80a8a80 <_tzset_unlocked_r+0x2e4>)
 80a87c4:	6830      	ldr	r0, [r6, #0]
 80a87c6:	601a      	str	r2, [r3, #0]
 80a87c8:	605a      	str	r2, [r3, #4]
 80a87ca:	f7fb f8b1 	bl	80a3930 <free>
 80a87ce:	6035      	str	r5, [r6, #0]
 80a87d0:	e148      	b.n	80a8a64 <_tzset_unlocked_r+0x2c8>
 80a87d2:	6831      	ldr	r1, [r6, #0]
 80a87d4:	b979      	cbnz	r1, 80a87f6 <_tzset_unlocked_r+0x5a>
 80a87d6:	6830      	ldr	r0, [r6, #0]
 80a87d8:	f7fb f8aa 	bl	80a3930 <free>
 80a87dc:	4628      	mov	r0, r5
 80a87de:	f7fe ff99 	bl	80a7714 <strlen>
 80a87e2:	1c41      	adds	r1, r0, #1
 80a87e4:	4638      	mov	r0, r7
 80a87e6:	f7fb f8e3 	bl	80a39b0 <_malloc_r>
 80a87ea:	6030      	str	r0, [r6, #0]
 80a87ec:	b148      	cbz	r0, 80a8802 <_tzset_unlocked_r+0x66>
 80a87ee:	4629      	mov	r1, r5
 80a87f0:	f7fe fa74 	bl	80a6cdc <strcpy>
 80a87f4:	e005      	b.n	80a8802 <_tzset_unlocked_r+0x66>
 80a87f6:	f7fe fa67 	bl	80a6cc8 <strcmp>
 80a87fa:	2800      	cmp	r0, #0
 80a87fc:	f000 8132 	beq.w	80a8a64 <_tzset_unlocked_r+0x2c8>
 80a8800:	e7e9      	b.n	80a87d6 <_tzset_unlocked_r+0x3a>
 80a8802:	782b      	ldrb	r3, [r5, #0]
 80a8804:	ae0a      	add	r6, sp, #40	; 0x28
 80a8806:	2b3a      	cmp	r3, #58	; 0x3a
 80a8808:	bf08      	it	eq
 80a880a:	3501      	addeq	r5, #1
 80a880c:	4633      	mov	r3, r6
 80a880e:	4a9d      	ldr	r2, [pc, #628]	; (80a8a84 <_tzset_unlocked_r+0x2e8>)
 80a8810:	499d      	ldr	r1, [pc, #628]	; (80a8a88 <_tzset_unlocked_r+0x2ec>)
 80a8812:	4628      	mov	r0, r5
 80a8814:	f7fb f8ac 	bl	80a3970 <siscanf>
 80a8818:	2800      	cmp	r0, #0
 80a881a:	f340 8123 	ble.w	80a8a64 <_tzset_unlocked_r+0x2c8>
 80a881e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a8820:	18ef      	adds	r7, r5, r3
 80a8822:	5ceb      	ldrb	r3, [r5, r3]
 80a8824:	2b2d      	cmp	r3, #45	; 0x2d
 80a8826:	d103      	bne.n	80a8830 <_tzset_unlocked_r+0x94>
 80a8828:	3701      	adds	r7, #1
 80a882a:	f04f 35ff 	mov.w	r5, #4294967295
 80a882e:	e003      	b.n	80a8838 <_tzset_unlocked_r+0x9c>
 80a8830:	2b2b      	cmp	r3, #43	; 0x2b
 80a8832:	bf08      	it	eq
 80a8834:	3701      	addeq	r7, #1
 80a8836:	2501      	movs	r5, #1
 80a8838:	f10d 0a20 	add.w	sl, sp, #32
 80a883c:	f10d 0b1e 	add.w	fp, sp, #30
 80a8840:	f04f 0800 	mov.w	r8, #0
 80a8844:	9603      	str	r6, [sp, #12]
 80a8846:	f8cd a008 	str.w	sl, [sp, #8]
 80a884a:	9601      	str	r6, [sp, #4]
 80a884c:	f8cd b000 	str.w	fp, [sp]
 80a8850:	4633      	mov	r3, r6
 80a8852:	aa07      	add	r2, sp, #28
 80a8854:	498d      	ldr	r1, [pc, #564]	; (80a8a8c <_tzset_unlocked_r+0x2f0>)
 80a8856:	4638      	mov	r0, r7
 80a8858:	f8ad 801e 	strh.w	r8, [sp, #30]
 80a885c:	f8ad 8020 	strh.w	r8, [sp, #32]
 80a8860:	f7fb f886 	bl	80a3970 <siscanf>
 80a8864:	4540      	cmp	r0, r8
 80a8866:	f340 80fd 	ble.w	80a8a64 <_tzset_unlocked_r+0x2c8>
 80a886a:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80a886e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80a8872:	213c      	movs	r1, #60	; 0x3c
 80a8874:	fb01 3302 	mla	r3, r1, r2, r3
 80a8878:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80a887c:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a8880:	fb01 3302 	mla	r3, r1, r2, r3
 80a8884:	435d      	muls	r5, r3
 80a8886:	4b7f      	ldr	r3, [pc, #508]	; (80a8a84 <_tzset_unlocked_r+0x2e8>)
 80a8888:	6225      	str	r5, [r4, #32]
 80a888a:	4d7d      	ldr	r5, [pc, #500]	; (80a8a80 <_tzset_unlocked_r+0x2e4>)
 80a888c:	f8df 9208 	ldr.w	r9, [pc, #520]	; 80a8a98 <_tzset_unlocked_r+0x2fc>
 80a8890:	602b      	str	r3, [r5, #0]
 80a8892:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a8894:	464a      	mov	r2, r9
 80a8896:	441f      	add	r7, r3
 80a8898:	497b      	ldr	r1, [pc, #492]	; (80a8a88 <_tzset_unlocked_r+0x2ec>)
 80a889a:	4633      	mov	r3, r6
 80a889c:	4638      	mov	r0, r7
 80a889e:	f7fb f867 	bl	80a3970 <siscanf>
 80a88a2:	4540      	cmp	r0, r8
 80a88a4:	dc08      	bgt.n	80a88b8 <_tzset_unlocked_r+0x11c>
 80a88a6:	682b      	ldr	r3, [r5, #0]
 80a88a8:	6a22      	ldr	r2, [r4, #32]
 80a88aa:	606b      	str	r3, [r5, #4]
 80a88ac:	4b71      	ldr	r3, [pc, #452]	; (80a8a74 <_tzset_unlocked_r+0x2d8>)
 80a88ae:	601a      	str	r2, [r3, #0]
 80a88b0:	4b72      	ldr	r3, [pc, #456]	; (80a8a7c <_tzset_unlocked_r+0x2e0>)
 80a88b2:	f8c3 8000 	str.w	r8, [r3]
 80a88b6:	e0d5      	b.n	80a8a64 <_tzset_unlocked_r+0x2c8>
 80a88b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a88ba:	f8c5 9004 	str.w	r9, [r5, #4]
 80a88be:	18fd      	adds	r5, r7, r3
 80a88c0:	5cfb      	ldrb	r3, [r7, r3]
 80a88c2:	2b2d      	cmp	r3, #45	; 0x2d
 80a88c4:	d103      	bne.n	80a88ce <_tzset_unlocked_r+0x132>
 80a88c6:	3501      	adds	r5, #1
 80a88c8:	f04f 37ff 	mov.w	r7, #4294967295
 80a88cc:	e003      	b.n	80a88d6 <_tzset_unlocked_r+0x13a>
 80a88ce:	2b2b      	cmp	r3, #43	; 0x2b
 80a88d0:	bf08      	it	eq
 80a88d2:	3501      	addeq	r5, #1
 80a88d4:	2701      	movs	r7, #1
 80a88d6:	2300      	movs	r3, #0
 80a88d8:	f8ad 301c 	strh.w	r3, [sp, #28]
 80a88dc:	f8ad 301e 	strh.w	r3, [sp, #30]
 80a88e0:	f8ad 3020 	strh.w	r3, [sp, #32]
 80a88e4:	930a      	str	r3, [sp, #40]	; 0x28
 80a88e6:	9603      	str	r6, [sp, #12]
 80a88e8:	f8cd a008 	str.w	sl, [sp, #8]
 80a88ec:	9601      	str	r6, [sp, #4]
 80a88ee:	f8cd b000 	str.w	fp, [sp]
 80a88f2:	4633      	mov	r3, r6
 80a88f4:	aa07      	add	r2, sp, #28
 80a88f6:	4965      	ldr	r1, [pc, #404]	; (80a8a8c <_tzset_unlocked_r+0x2f0>)
 80a88f8:	4628      	mov	r0, r5
 80a88fa:	f7fb f839 	bl	80a3970 <siscanf>
 80a88fe:	2800      	cmp	r0, #0
 80a8900:	dc04      	bgt.n	80a890c <_tzset_unlocked_r+0x170>
 80a8902:	6a23      	ldr	r3, [r4, #32]
 80a8904:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 80a8908:	63e3      	str	r3, [r4, #60]	; 0x3c
 80a890a:	e00e      	b.n	80a892a <_tzset_unlocked_r+0x18e>
 80a890c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80a8910:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80a8914:	213c      	movs	r1, #60	; 0x3c
 80a8916:	fb01 3302 	mla	r3, r1, r2, r3
 80a891a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80a891e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a8922:	fb01 3302 	mla	r3, r1, r2, r3
 80a8926:	435f      	muls	r7, r3
 80a8928:	63e7      	str	r7, [r4, #60]	; 0x3c
 80a892a:	4627      	mov	r7, r4
 80a892c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a892e:	f04f 0900 	mov.w	r9, #0
 80a8932:	441d      	add	r5, r3
 80a8934:	782b      	ldrb	r3, [r5, #0]
 80a8936:	2b2c      	cmp	r3, #44	; 0x2c
 80a8938:	bf08      	it	eq
 80a893a:	3501      	addeq	r5, #1
 80a893c:	f895 8000 	ldrb.w	r8, [r5]
 80a8940:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 80a8944:	d126      	bne.n	80a8994 <_tzset_unlocked_r+0x1f8>
 80a8946:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 80a894a:	9302      	str	r3, [sp, #8]
 80a894c:	ab09      	add	r3, sp, #36	; 0x24
 80a894e:	9300      	str	r3, [sp, #0]
 80a8950:	9603      	str	r6, [sp, #12]
 80a8952:	9601      	str	r6, [sp, #4]
 80a8954:	4633      	mov	r3, r6
 80a8956:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 80a895a:	494d      	ldr	r1, [pc, #308]	; (80a8a90 <_tzset_unlocked_r+0x2f4>)
 80a895c:	4628      	mov	r0, r5
 80a895e:	f7fb f807 	bl	80a3970 <siscanf>
 80a8962:	2803      	cmp	r0, #3
 80a8964:	d17e      	bne.n	80a8a64 <_tzset_unlocked_r+0x2c8>
 80a8966:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 80a896a:	1e4b      	subs	r3, r1, #1
 80a896c:	2b0b      	cmp	r3, #11
 80a896e:	d879      	bhi.n	80a8a64 <_tzset_unlocked_r+0x2c8>
 80a8970:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 80a8974:	1e53      	subs	r3, r2, #1
 80a8976:	2b04      	cmp	r3, #4
 80a8978:	d874      	bhi.n	80a8a64 <_tzset_unlocked_r+0x2c8>
 80a897a:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 80a897e:	2b06      	cmp	r3, #6
 80a8980:	d870      	bhi.n	80a8a64 <_tzset_unlocked_r+0x2c8>
 80a8982:	f887 8008 	strb.w	r8, [r7, #8]
 80a8986:	60f9      	str	r1, [r7, #12]
 80a8988:	613a      	str	r2, [r7, #16]
 80a898a:	617b      	str	r3, [r7, #20]
 80a898c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a898e:	eb05 0803 	add.w	r8, r5, r3
 80a8992:	e02a      	b.n	80a89ea <_tzset_unlocked_r+0x24e>
 80a8994:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 80a8998:	bf06      	itte	eq
 80a899a:	4643      	moveq	r3, r8
 80a899c:	3501      	addeq	r5, #1
 80a899e:	2344      	movne	r3, #68	; 0x44
 80a89a0:	220a      	movs	r2, #10
 80a89a2:	a90b      	add	r1, sp, #44	; 0x2c
 80a89a4:	4628      	mov	r0, r5
 80a89a6:	9305      	str	r3, [sp, #20]
 80a89a8:	f7ff fe2e 	bl	80a8608 <strtoul>
 80a89ac:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 80a89b0:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 80a89b4:	4545      	cmp	r5, r8
 80a89b6:	9b05      	ldr	r3, [sp, #20]
 80a89b8:	d114      	bne.n	80a89e4 <_tzset_unlocked_r+0x248>
 80a89ba:	234d      	movs	r3, #77	; 0x4d
 80a89bc:	f1b9 0f00 	cmp.w	r9, #0
 80a89c0:	d107      	bne.n	80a89d2 <_tzset_unlocked_r+0x236>
 80a89c2:	7223      	strb	r3, [r4, #8]
 80a89c4:	2303      	movs	r3, #3
 80a89c6:	60e3      	str	r3, [r4, #12]
 80a89c8:	2302      	movs	r3, #2
 80a89ca:	6123      	str	r3, [r4, #16]
 80a89cc:	f8c4 9014 	str.w	r9, [r4, #20]
 80a89d0:	e00b      	b.n	80a89ea <_tzset_unlocked_r+0x24e>
 80a89d2:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 80a89d6:	230b      	movs	r3, #11
 80a89d8:	62a3      	str	r3, [r4, #40]	; 0x28
 80a89da:	2301      	movs	r3, #1
 80a89dc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80a89de:	2300      	movs	r3, #0
 80a89e0:	6323      	str	r3, [r4, #48]	; 0x30
 80a89e2:	e002      	b.n	80a89ea <_tzset_unlocked_r+0x24e>
 80a89e4:	b280      	uxth	r0, r0
 80a89e6:	723b      	strb	r3, [r7, #8]
 80a89e8:	6178      	str	r0, [r7, #20]
 80a89ea:	2302      	movs	r3, #2
 80a89ec:	f8ad 301c 	strh.w	r3, [sp, #28]
 80a89f0:	2300      	movs	r3, #0
 80a89f2:	f8ad 301e 	strh.w	r3, [sp, #30]
 80a89f6:	f8ad 3020 	strh.w	r3, [sp, #32]
 80a89fa:	930a      	str	r3, [sp, #40]	; 0x28
 80a89fc:	f898 3000 	ldrb.w	r3, [r8]
 80a8a00:	2b2f      	cmp	r3, #47	; 0x2f
 80a8a02:	d10b      	bne.n	80a8a1c <_tzset_unlocked_r+0x280>
 80a8a04:	9603      	str	r6, [sp, #12]
 80a8a06:	f8cd a008 	str.w	sl, [sp, #8]
 80a8a0a:	9601      	str	r6, [sp, #4]
 80a8a0c:	f8cd b000 	str.w	fp, [sp]
 80a8a10:	4633      	mov	r3, r6
 80a8a12:	aa07      	add	r2, sp, #28
 80a8a14:	491f      	ldr	r1, [pc, #124]	; (80a8a94 <_tzset_unlocked_r+0x2f8>)
 80a8a16:	4640      	mov	r0, r8
 80a8a18:	f7fa ffaa 	bl	80a3970 <siscanf>
 80a8a1c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80a8a20:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80a8a24:	213c      	movs	r1, #60	; 0x3c
 80a8a26:	fb01 3302 	mla	r3, r1, r2, r3
 80a8a2a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80a8a2e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a8a32:	fb01 3302 	mla	r3, r1, r2, r3
 80a8a36:	61bb      	str	r3, [r7, #24]
 80a8a38:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80a8a3a:	f109 0901 	add.w	r9, r9, #1
 80a8a3e:	f1b9 0f02 	cmp.w	r9, #2
 80a8a42:	4445      	add	r5, r8
 80a8a44:	f107 071c 	add.w	r7, r7, #28
 80a8a48:	f47f af74 	bne.w	80a8934 <_tzset_unlocked_r+0x198>
 80a8a4c:	6860      	ldr	r0, [r4, #4]
 80a8a4e:	f7ff fdf5 	bl	80a863c <__tzcalc_limits>
 80a8a52:	6a22      	ldr	r2, [r4, #32]
 80a8a54:	4b07      	ldr	r3, [pc, #28]	; (80a8a74 <_tzset_unlocked_r+0x2d8>)
 80a8a56:	601a      	str	r2, [r3, #0]
 80a8a58:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80a8a5a:	1a9b      	subs	r3, r3, r2
 80a8a5c:	4a07      	ldr	r2, [pc, #28]	; (80a8a7c <_tzset_unlocked_r+0x2e0>)
 80a8a5e:	bf18      	it	ne
 80a8a60:	2301      	movne	r3, #1
 80a8a62:	6013      	str	r3, [r2, #0]
 80a8a64:	b00d      	add	sp, #52	; 0x34
 80a8a66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a8a6a:	bf00      	nop
 80a8a6c:	080aa84c 	.word	0x080aa84c
 80a8a70:	200006d4 	.word	0x200006d4
 80a8a74:	200006dc 	.word	0x200006dc
 80a8a78:	080aa84f 	.word	0x080aa84f
 80a8a7c:	200006d8 	.word	0x200006d8
 80a8a80:	200000b4 	.word	0x200000b4
 80a8a84:	200006c7 	.word	0x200006c7
 80a8a88:	080aa853 	.word	0x080aa853
 80a8a8c:	080aa876 	.word	0x080aa876
 80a8a90:	080aa862 	.word	0x080aa862
 80a8a94:	080aa875 	.word	0x080aa875
 80a8a98:	200006bc 	.word	0x200006bc

080a8a9c <abs>:
 80a8a9c:	2800      	cmp	r0, #0
 80a8a9e:	bfb8      	it	lt
 80a8aa0:	4240      	neglt	r0, r0
 80a8aa2:	4770      	bx	lr

080a8aa4 <rshift>:
 80a8aa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a8aa6:	6906      	ldr	r6, [r0, #16]
 80a8aa8:	114b      	asrs	r3, r1, #5
 80a8aaa:	42b3      	cmp	r3, r6
 80a8aac:	f100 0514 	add.w	r5, r0, #20
 80a8ab0:	da27      	bge.n	80a8b02 <rshift+0x5e>
 80a8ab2:	f011 011f 	ands.w	r1, r1, #31
 80a8ab6:	eb05 0686 	add.w	r6, r5, r6, lsl #2
 80a8aba:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 80a8abe:	d101      	bne.n	80a8ac4 <rshift+0x20>
 80a8ac0:	4629      	mov	r1, r5
 80a8ac2:	e016      	b.n	80a8af2 <rshift+0x4e>
 80a8ac4:	1d14      	adds	r4, r2, #4
 80a8ac6:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
 80a8aca:	462b      	mov	r3, r5
 80a8acc:	f1c1 0e20 	rsb	lr, r1, #32
 80a8ad0:	40ca      	lsrs	r2, r1
 80a8ad2:	42b4      	cmp	r4, r6
 80a8ad4:	d209      	bcs.n	80a8aea <rshift+0x46>
 80a8ad6:	6827      	ldr	r7, [r4, #0]
 80a8ad8:	fa07 f70e 	lsl.w	r7, r7, lr
 80a8adc:	433a      	orrs	r2, r7
 80a8ade:	f843 2b04 	str.w	r2, [r3], #4
 80a8ae2:	f854 2b04 	ldr.w	r2, [r4], #4
 80a8ae6:	40ca      	lsrs	r2, r1
 80a8ae8:	e7f3      	b.n	80a8ad2 <rshift+0x2e>
 80a8aea:	601a      	str	r2, [r3, #0]
 80a8aec:	b152      	cbz	r2, 80a8b04 <rshift+0x60>
 80a8aee:	3304      	adds	r3, #4
 80a8af0:	e008      	b.n	80a8b04 <rshift+0x60>
 80a8af2:	42b2      	cmp	r2, r6
 80a8af4:	460b      	mov	r3, r1
 80a8af6:	d205      	bcs.n	80a8b04 <rshift+0x60>
 80a8af8:	f852 3b04 	ldr.w	r3, [r2], #4
 80a8afc:	f841 3b04 	str.w	r3, [r1], #4
 80a8b00:	e7f7      	b.n	80a8af2 <rshift+0x4e>
 80a8b02:	462b      	mov	r3, r5
 80a8b04:	1b5b      	subs	r3, r3, r5
 80a8b06:	109b      	asrs	r3, r3, #2
 80a8b08:	6103      	str	r3, [r0, #16]
 80a8b0a:	b903      	cbnz	r3, 80a8b0e <rshift+0x6a>
 80a8b0c:	6143      	str	r3, [r0, #20]
 80a8b0e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a8b10 <__hexdig_fun>:
 80a8b10:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80a8b14:	2b09      	cmp	r3, #9
 80a8b16:	d801      	bhi.n	80a8b1c <__hexdig_fun+0xc>
 80a8b18:	3820      	subs	r0, #32
 80a8b1a:	e00a      	b.n	80a8b32 <__hexdig_fun+0x22>
 80a8b1c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80a8b20:	2b05      	cmp	r3, #5
 80a8b22:	d801      	bhi.n	80a8b28 <__hexdig_fun+0x18>
 80a8b24:	3847      	subs	r0, #71	; 0x47
 80a8b26:	e004      	b.n	80a8b32 <__hexdig_fun+0x22>
 80a8b28:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80a8b2c:	2b05      	cmp	r3, #5
 80a8b2e:	d802      	bhi.n	80a8b36 <__hexdig_fun+0x26>
 80a8b30:	3827      	subs	r0, #39	; 0x27
 80a8b32:	b2c0      	uxtb	r0, r0
 80a8b34:	4770      	bx	lr
 80a8b36:	2000      	movs	r0, #0
 80a8b38:	4770      	bx	lr

080a8b3a <__gethex>:
 80a8b3a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a8b3e:	b08b      	sub	sp, #44	; 0x2c
 80a8b40:	468a      	mov	sl, r1
 80a8b42:	4690      	mov	r8, r2
 80a8b44:	9306      	str	r3, [sp, #24]
 80a8b46:	9002      	str	r0, [sp, #8]
 80a8b48:	f7fe f87e 	bl	80a6c48 <_localeconv_r>
 80a8b4c:	6803      	ldr	r3, [r0, #0]
 80a8b4e:	f04f 0b00 	mov.w	fp, #0
 80a8b52:	4618      	mov	r0, r3
 80a8b54:	9303      	str	r3, [sp, #12]
 80a8b56:	f7fe fddd 	bl	80a7714 <strlen>
 80a8b5a:	9b03      	ldr	r3, [sp, #12]
 80a8b5c:	9001      	str	r0, [sp, #4]
 80a8b5e:	4403      	add	r3, r0
 80a8b60:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80a8b64:	9307      	str	r3, [sp, #28]
 80a8b66:	f8da 3000 	ldr.w	r3, [sl]
 80a8b6a:	3302      	adds	r3, #2
 80a8b6c:	461f      	mov	r7, r3
 80a8b6e:	f813 0b01 	ldrb.w	r0, [r3], #1
 80a8b72:	2830      	cmp	r0, #48	; 0x30
 80a8b74:	d102      	bne.n	80a8b7c <__gethex+0x42>
 80a8b76:	f10b 0b01 	add.w	fp, fp, #1
 80a8b7a:	e7f7      	b.n	80a8b6c <__gethex+0x32>
 80a8b7c:	f7ff ffc8 	bl	80a8b10 <__hexdig_fun>
 80a8b80:	4604      	mov	r4, r0
 80a8b82:	b9e0      	cbnz	r0, 80a8bbe <__gethex+0x84>
 80a8b84:	9a01      	ldr	r2, [sp, #4]
 80a8b86:	9903      	ldr	r1, [sp, #12]
 80a8b88:	4638      	mov	r0, r7
 80a8b8a:	f7fe fdcb 	bl	80a7724 <strncmp>
 80a8b8e:	2800      	cmp	r0, #0
 80a8b90:	d134      	bne.n	80a8bfc <__gethex+0xc2>
 80a8b92:	9b01      	ldr	r3, [sp, #4]
 80a8b94:	5cf8      	ldrb	r0, [r7, r3]
 80a8b96:	18fe      	adds	r6, r7, r3
 80a8b98:	f7ff ffba 	bl	80a8b10 <__hexdig_fun>
 80a8b9c:	b380      	cbz	r0, 80a8c00 <__gethex+0xc6>
 80a8b9e:	4633      	mov	r3, r6
 80a8ba0:	7818      	ldrb	r0, [r3, #0]
 80a8ba2:	461f      	mov	r7, r3
 80a8ba4:	2830      	cmp	r0, #48	; 0x30
 80a8ba6:	f103 0301 	add.w	r3, r3, #1
 80a8baa:	d0f9      	beq.n	80a8ba0 <__gethex+0x66>
 80a8bac:	f7ff ffb0 	bl	80a8b10 <__hexdig_fun>
 80a8bb0:	fab0 f580 	clz	r5, r0
 80a8bb4:	4634      	mov	r4, r6
 80a8bb6:	096d      	lsrs	r5, r5, #5
 80a8bb8:	f04f 0b01 	mov.w	fp, #1
 80a8bbc:	e001      	b.n	80a8bc2 <__gethex+0x88>
 80a8bbe:	2500      	movs	r5, #0
 80a8bc0:	462c      	mov	r4, r5
 80a8bc2:	463a      	mov	r2, r7
 80a8bc4:	4616      	mov	r6, r2
 80a8bc6:	7830      	ldrb	r0, [r6, #0]
 80a8bc8:	3201      	adds	r2, #1
 80a8bca:	f7ff ffa1 	bl	80a8b10 <__hexdig_fun>
 80a8bce:	2800      	cmp	r0, #0
 80a8bd0:	d1f8      	bne.n	80a8bc4 <__gethex+0x8a>
 80a8bd2:	9a01      	ldr	r2, [sp, #4]
 80a8bd4:	9903      	ldr	r1, [sp, #12]
 80a8bd6:	4630      	mov	r0, r6
 80a8bd8:	f7fe fda4 	bl	80a7724 <strncmp>
 80a8bdc:	b950      	cbnz	r0, 80a8bf4 <__gethex+0xba>
 80a8bde:	b954      	cbnz	r4, 80a8bf6 <__gethex+0xbc>
 80a8be0:	9b01      	ldr	r3, [sp, #4]
 80a8be2:	18f4      	adds	r4, r6, r3
 80a8be4:	4622      	mov	r2, r4
 80a8be6:	4616      	mov	r6, r2
 80a8be8:	7830      	ldrb	r0, [r6, #0]
 80a8bea:	3201      	adds	r2, #1
 80a8bec:	f7ff ff90 	bl	80a8b10 <__hexdig_fun>
 80a8bf0:	2800      	cmp	r0, #0
 80a8bf2:	d1f8      	bne.n	80a8be6 <__gethex+0xac>
 80a8bf4:	b134      	cbz	r4, 80a8c04 <__gethex+0xca>
 80a8bf6:	1ba4      	subs	r4, r4, r6
 80a8bf8:	00a4      	lsls	r4, r4, #2
 80a8bfa:	e003      	b.n	80a8c04 <__gethex+0xca>
 80a8bfc:	463e      	mov	r6, r7
 80a8bfe:	e000      	b.n	80a8c02 <__gethex+0xc8>
 80a8c00:	4604      	mov	r4, r0
 80a8c02:	2501      	movs	r5, #1
 80a8c04:	7833      	ldrb	r3, [r6, #0]
 80a8c06:	2b50      	cmp	r3, #80	; 0x50
 80a8c08:	d001      	beq.n	80a8c0e <__gethex+0xd4>
 80a8c0a:	2b70      	cmp	r3, #112	; 0x70
 80a8c0c:	d12a      	bne.n	80a8c64 <__gethex+0x12a>
 80a8c0e:	7873      	ldrb	r3, [r6, #1]
 80a8c10:	2b2b      	cmp	r3, #43	; 0x2b
 80a8c12:	d008      	beq.n	80a8c26 <__gethex+0xec>
 80a8c14:	2b2d      	cmp	r3, #45	; 0x2d
 80a8c16:	d003      	beq.n	80a8c20 <__gethex+0xe6>
 80a8c18:	1c71      	adds	r1, r6, #1
 80a8c1a:	f04f 0900 	mov.w	r9, #0
 80a8c1e:	e005      	b.n	80a8c2c <__gethex+0xf2>
 80a8c20:	f04f 0901 	mov.w	r9, #1
 80a8c24:	e001      	b.n	80a8c2a <__gethex+0xf0>
 80a8c26:	f04f 0900 	mov.w	r9, #0
 80a8c2a:	1cb1      	adds	r1, r6, #2
 80a8c2c:	7808      	ldrb	r0, [r1, #0]
 80a8c2e:	f7ff ff6f 	bl	80a8b10 <__hexdig_fun>
 80a8c32:	1e43      	subs	r3, r0, #1
 80a8c34:	b2db      	uxtb	r3, r3
 80a8c36:	2b18      	cmp	r3, #24
 80a8c38:	d814      	bhi.n	80a8c64 <__gethex+0x12a>
 80a8c3a:	f1a0 0210 	sub.w	r2, r0, #16
 80a8c3e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80a8c42:	f7ff ff65 	bl	80a8b10 <__hexdig_fun>
 80a8c46:	1e43      	subs	r3, r0, #1
 80a8c48:	b2db      	uxtb	r3, r3
 80a8c4a:	2b18      	cmp	r3, #24
 80a8c4c:	d804      	bhi.n	80a8c58 <__gethex+0x11e>
 80a8c4e:	230a      	movs	r3, #10
 80a8c50:	fb03 0202 	mla	r2, r3, r2, r0
 80a8c54:	3a10      	subs	r2, #16
 80a8c56:	e7f2      	b.n	80a8c3e <__gethex+0x104>
 80a8c58:	f1b9 0f00 	cmp.w	r9, #0
 80a8c5c:	d000      	beq.n	80a8c60 <__gethex+0x126>
 80a8c5e:	4252      	negs	r2, r2
 80a8c60:	4414      	add	r4, r2
 80a8c62:	e000      	b.n	80a8c66 <__gethex+0x12c>
 80a8c64:	4631      	mov	r1, r6
 80a8c66:	f8ca 1000 	str.w	r1, [sl]
 80a8c6a:	b12d      	cbz	r5, 80a8c78 <__gethex+0x13e>
 80a8c6c:	f1bb 0f00 	cmp.w	fp, #0
 80a8c70:	bf14      	ite	ne
 80a8c72:	2000      	movne	r0, #0
 80a8c74:	2006      	moveq	r0, #6
 80a8c76:	e17c      	b.n	80a8f72 <__gethex+0x438>
 80a8c78:	4629      	mov	r1, r5
 80a8c7a:	1bf3      	subs	r3, r6, r7
 80a8c7c:	3b01      	subs	r3, #1
 80a8c7e:	2b07      	cmp	r3, #7
 80a8c80:	dd02      	ble.n	80a8c88 <__gethex+0x14e>
 80a8c82:	3101      	adds	r1, #1
 80a8c84:	105b      	asrs	r3, r3, #1
 80a8c86:	e7fa      	b.n	80a8c7e <__gethex+0x144>
 80a8c88:	9802      	ldr	r0, [sp, #8]
 80a8c8a:	f000 fb0b 	bl	80a92a4 <_Balloc>
 80a8c8e:	f04f 0900 	mov.w	r9, #0
 80a8c92:	4605      	mov	r5, r0
 80a8c94:	46cb      	mov	fp, r9
 80a8c96:	9b01      	ldr	r3, [sp, #4]
 80a8c98:	f100 0a14 	add.w	sl, r0, #20
 80a8c9c:	f1c3 0301 	rsb	r3, r3, #1
 80a8ca0:	f8cd a010 	str.w	sl, [sp, #16]
 80a8ca4:	9308      	str	r3, [sp, #32]
 80a8ca6:	42b7      	cmp	r7, r6
 80a8ca8:	d22f      	bcs.n	80a8d0a <__gethex+0x1d0>
 80a8caa:	1e73      	subs	r3, r6, #1
 80a8cac:	9305      	str	r3, [sp, #20]
 80a8cae:	9a07      	ldr	r2, [sp, #28]
 80a8cb0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80a8cb4:	4293      	cmp	r3, r2
 80a8cb6:	d00b      	beq.n	80a8cd0 <__gethex+0x196>
 80a8cb8:	f1bb 0f20 	cmp.w	fp, #32
 80a8cbc:	d116      	bne.n	80a8cec <__gethex+0x1b2>
 80a8cbe:	9b04      	ldr	r3, [sp, #16]
 80a8cc0:	f8c3 9000 	str.w	r9, [r3]
 80a8cc4:	3304      	adds	r3, #4
 80a8cc6:	f04f 0900 	mov.w	r9, #0
 80a8cca:	9304      	str	r3, [sp, #16]
 80a8ccc:	46cb      	mov	fp, r9
 80a8cce:	e00d      	b.n	80a8cec <__gethex+0x1b2>
 80a8cd0:	9b05      	ldr	r3, [sp, #20]
 80a8cd2:	9a08      	ldr	r2, [sp, #32]
 80a8cd4:	4413      	add	r3, r2
 80a8cd6:	429f      	cmp	r7, r3
 80a8cd8:	d8ee      	bhi.n	80a8cb8 <__gethex+0x17e>
 80a8cda:	4618      	mov	r0, r3
 80a8cdc:	9a01      	ldr	r2, [sp, #4]
 80a8cde:	9903      	ldr	r1, [sp, #12]
 80a8ce0:	9309      	str	r3, [sp, #36]	; 0x24
 80a8ce2:	f7fe fd1f 	bl	80a7724 <strncmp>
 80a8ce6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a8ce8:	b168      	cbz	r0, 80a8d06 <__gethex+0x1cc>
 80a8cea:	e7e5      	b.n	80a8cb8 <__gethex+0x17e>
 80a8cec:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80a8cf0:	f7ff ff0e 	bl	80a8b10 <__hexdig_fun>
 80a8cf4:	f000 000f 	and.w	r0, r0, #15
 80a8cf8:	fa00 f00b 	lsl.w	r0, r0, fp
 80a8cfc:	9b05      	ldr	r3, [sp, #20]
 80a8cfe:	ea49 0900 	orr.w	r9, r9, r0
 80a8d02:	f10b 0b04 	add.w	fp, fp, #4
 80a8d06:	461e      	mov	r6, r3
 80a8d08:	e7cd      	b.n	80a8ca6 <__gethex+0x16c>
 80a8d0a:	9804      	ldr	r0, [sp, #16]
 80a8d0c:	f840 9b04 	str.w	r9, [r0], #4
 80a8d10:	ebca 0000 	rsb	r0, sl, r0
 80a8d14:	1080      	asrs	r0, r0, #2
 80a8d16:	6128      	str	r0, [r5, #16]
 80a8d18:	0147      	lsls	r7, r0, #5
 80a8d1a:	4648      	mov	r0, r9
 80a8d1c:	f000 fb87 	bl	80a942e <__hi0bits>
 80a8d20:	f8d8 6000 	ldr.w	r6, [r8]
 80a8d24:	1a38      	subs	r0, r7, r0
 80a8d26:	42b0      	cmp	r0, r6
 80a8d28:	dd26      	ble.n	80a8d78 <__gethex+0x23e>
 80a8d2a:	1b87      	subs	r7, r0, r6
 80a8d2c:	4639      	mov	r1, r7
 80a8d2e:	4628      	mov	r0, r5
 80a8d30:	f000 fe7f 	bl	80a9a32 <__any_on>
 80a8d34:	b1c8      	cbz	r0, 80a8d6a <__gethex+0x230>
 80a8d36:	1e7b      	subs	r3, r7, #1
 80a8d38:	1159      	asrs	r1, r3, #5
 80a8d3a:	f003 021f 	and.w	r2, r3, #31
 80a8d3e:	f04f 0901 	mov.w	r9, #1
 80a8d42:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80a8d46:	fa09 f202 	lsl.w	r2, r9, r2
 80a8d4a:	420a      	tst	r2, r1
 80a8d4c:	d00e      	beq.n	80a8d6c <__gethex+0x232>
 80a8d4e:	454b      	cmp	r3, r9
 80a8d50:	dc02      	bgt.n	80a8d58 <__gethex+0x21e>
 80a8d52:	f04f 0902 	mov.w	r9, #2
 80a8d56:	e009      	b.n	80a8d6c <__gethex+0x232>
 80a8d58:	1eb9      	subs	r1, r7, #2
 80a8d5a:	4628      	mov	r0, r5
 80a8d5c:	f000 fe69 	bl	80a9a32 <__any_on>
 80a8d60:	2800      	cmp	r0, #0
 80a8d62:	d0f6      	beq.n	80a8d52 <__gethex+0x218>
 80a8d64:	f04f 0903 	mov.w	r9, #3
 80a8d68:	e000      	b.n	80a8d6c <__gethex+0x232>
 80a8d6a:	4681      	mov	r9, r0
 80a8d6c:	4639      	mov	r1, r7
 80a8d6e:	4628      	mov	r0, r5
 80a8d70:	f7ff fe98 	bl	80a8aa4 <rshift>
 80a8d74:	443c      	add	r4, r7
 80a8d76:	e00c      	b.n	80a8d92 <__gethex+0x258>
 80a8d78:	da09      	bge.n	80a8d8e <__gethex+0x254>
 80a8d7a:	1a37      	subs	r7, r6, r0
 80a8d7c:	4629      	mov	r1, r5
 80a8d7e:	463a      	mov	r2, r7
 80a8d80:	9802      	ldr	r0, [sp, #8]
 80a8d82:	f000 fc89 	bl	80a9698 <__lshift>
 80a8d86:	4605      	mov	r5, r0
 80a8d88:	1be4      	subs	r4, r4, r7
 80a8d8a:	f100 0a14 	add.w	sl, r0, #20
 80a8d8e:	f04f 0900 	mov.w	r9, #0
 80a8d92:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80a8d96:	429c      	cmp	r4, r3
 80a8d98:	dd08      	ble.n	80a8dac <__gethex+0x272>
 80a8d9a:	9802      	ldr	r0, [sp, #8]
 80a8d9c:	4629      	mov	r1, r5
 80a8d9e:	f000 fab6 	bl	80a930e <_Bfree>
 80a8da2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80a8da4:	2300      	movs	r3, #0
 80a8da6:	6013      	str	r3, [r2, #0]
 80a8da8:	20a3      	movs	r0, #163	; 0xa3
 80a8daa:	e0e2      	b.n	80a8f72 <__gethex+0x438>
 80a8dac:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80a8db0:	4284      	cmp	r4, r0
 80a8db2:	da53      	bge.n	80a8e5c <__gethex+0x322>
 80a8db4:	1b04      	subs	r4, r0, r4
 80a8db6:	42a6      	cmp	r6, r4
 80a8db8:	dc2e      	bgt.n	80a8e18 <__gethex+0x2de>
 80a8dba:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80a8dbe:	2b02      	cmp	r3, #2
 80a8dc0:	d01a      	beq.n	80a8df8 <__gethex+0x2be>
 80a8dc2:	2b03      	cmp	r3, #3
 80a8dc4:	d01c      	beq.n	80a8e00 <__gethex+0x2c6>
 80a8dc6:	2b01      	cmp	r3, #1
 80a8dc8:	d11d      	bne.n	80a8e06 <__gethex+0x2cc>
 80a8dca:	42a6      	cmp	r6, r4
 80a8dcc:	d11b      	bne.n	80a8e06 <__gethex+0x2cc>
 80a8dce:	2e01      	cmp	r6, #1
 80a8dd0:	dc0b      	bgt.n	80a8dea <__gethex+0x2b0>
 80a8dd2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80a8dd6:	9a06      	ldr	r2, [sp, #24]
 80a8dd8:	2062      	movs	r0, #98	; 0x62
 80a8dda:	6013      	str	r3, [r2, #0]
 80a8ddc:	2301      	movs	r3, #1
 80a8dde:	612b      	str	r3, [r5, #16]
 80a8de0:	f8ca 3000 	str.w	r3, [sl]
 80a8de4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80a8de6:	601d      	str	r5, [r3, #0]
 80a8de8:	e0c3      	b.n	80a8f72 <__gethex+0x438>
 80a8dea:	1e71      	subs	r1, r6, #1
 80a8dec:	4628      	mov	r0, r5
 80a8dee:	f000 fe20 	bl	80a9a32 <__any_on>
 80a8df2:	2800      	cmp	r0, #0
 80a8df4:	d1ed      	bne.n	80a8dd2 <__gethex+0x298>
 80a8df6:	e006      	b.n	80a8e06 <__gethex+0x2cc>
 80a8df8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80a8dfa:	2b00      	cmp	r3, #0
 80a8dfc:	d0e9      	beq.n	80a8dd2 <__gethex+0x298>
 80a8dfe:	e002      	b.n	80a8e06 <__gethex+0x2cc>
 80a8e00:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80a8e02:	2b00      	cmp	r3, #0
 80a8e04:	d1e5      	bne.n	80a8dd2 <__gethex+0x298>
 80a8e06:	9802      	ldr	r0, [sp, #8]
 80a8e08:	4629      	mov	r1, r5
 80a8e0a:	f000 fa80 	bl	80a930e <_Bfree>
 80a8e0e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80a8e10:	2300      	movs	r3, #0
 80a8e12:	6013      	str	r3, [r2, #0]
 80a8e14:	2050      	movs	r0, #80	; 0x50
 80a8e16:	e0ac      	b.n	80a8f72 <__gethex+0x438>
 80a8e18:	1e67      	subs	r7, r4, #1
 80a8e1a:	f1b9 0f00 	cmp.w	r9, #0
 80a8e1e:	d106      	bne.n	80a8e2e <__gethex+0x2f4>
 80a8e20:	b13f      	cbz	r7, 80a8e32 <__gethex+0x2f8>
 80a8e22:	4639      	mov	r1, r7
 80a8e24:	4628      	mov	r0, r5
 80a8e26:	f000 fe04 	bl	80a9a32 <__any_on>
 80a8e2a:	4681      	mov	r9, r0
 80a8e2c:	e001      	b.n	80a8e32 <__gethex+0x2f8>
 80a8e2e:	f04f 0901 	mov.w	r9, #1
 80a8e32:	117a      	asrs	r2, r7, #5
 80a8e34:	2301      	movs	r3, #1
 80a8e36:	f007 071f 	and.w	r7, r7, #31
 80a8e3a:	fa03 f707 	lsl.w	r7, r3, r7
 80a8e3e:	f85a 3022 	ldr.w	r3, [sl, r2, lsl #2]
 80a8e42:	4621      	mov	r1, r4
 80a8e44:	421f      	tst	r7, r3
 80a8e46:	4628      	mov	r0, r5
 80a8e48:	bf18      	it	ne
 80a8e4a:	f049 0902 	orrne.w	r9, r9, #2
 80a8e4e:	1b36      	subs	r6, r6, r4
 80a8e50:	f7ff fe28 	bl	80a8aa4 <rshift>
 80a8e54:	2702      	movs	r7, #2
 80a8e56:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80a8e5a:	e000      	b.n	80a8e5e <__gethex+0x324>
 80a8e5c:	2701      	movs	r7, #1
 80a8e5e:	f1b9 0f00 	cmp.w	r9, #0
 80a8e62:	f000 8081 	beq.w	80a8f68 <__gethex+0x42e>
 80a8e66:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80a8e6a:	2b02      	cmp	r3, #2
 80a8e6c:	d00e      	beq.n	80a8e8c <__gethex+0x352>
 80a8e6e:	2b03      	cmp	r3, #3
 80a8e70:	d010      	beq.n	80a8e94 <__gethex+0x35a>
 80a8e72:	2b01      	cmp	r3, #1
 80a8e74:	d176      	bne.n	80a8f64 <__gethex+0x42a>
 80a8e76:	f019 0f02 	tst.w	r9, #2
 80a8e7a:	d073      	beq.n	80a8f64 <__gethex+0x42a>
 80a8e7c:	f8da 0000 	ldr.w	r0, [sl]
 80a8e80:	ea49 0900 	orr.w	r9, r9, r0
 80a8e84:	f019 0f01 	tst.w	r9, #1
 80a8e88:	d107      	bne.n	80a8e9a <__gethex+0x360>
 80a8e8a:	e06b      	b.n	80a8f64 <__gethex+0x42a>
 80a8e8c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80a8e8e:	f1c3 0301 	rsb	r3, r3, #1
 80a8e92:	9315      	str	r3, [sp, #84]	; 0x54
 80a8e94:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80a8e96:	2b00      	cmp	r3, #0
 80a8e98:	d064      	beq.n	80a8f64 <__gethex+0x42a>
 80a8e9a:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80a8e9e:	f105 0314 	add.w	r3, r5, #20
 80a8ea2:	ea4f 098a 	mov.w	r9, sl, lsl #2
 80a8ea6:	eb03 0109 	add.w	r1, r3, r9
 80a8eaa:	2000      	movs	r0, #0
 80a8eac:	681a      	ldr	r2, [r3, #0]
 80a8eae:	f1b2 3fff 	cmp.w	r2, #4294967295
 80a8eb2:	d002      	beq.n	80a8eba <__gethex+0x380>
 80a8eb4:	3201      	adds	r2, #1
 80a8eb6:	601a      	str	r2, [r3, #0]
 80a8eb8:	e020      	b.n	80a8efc <__gethex+0x3c2>
 80a8eba:	f843 0b04 	str.w	r0, [r3], #4
 80a8ebe:	4299      	cmp	r1, r3
 80a8ec0:	d8f4      	bhi.n	80a8eac <__gethex+0x372>
 80a8ec2:	68ab      	ldr	r3, [r5, #8]
 80a8ec4:	459a      	cmp	sl, r3
 80a8ec6:	db12      	blt.n	80a8eee <__gethex+0x3b4>
 80a8ec8:	6869      	ldr	r1, [r5, #4]
 80a8eca:	9802      	ldr	r0, [sp, #8]
 80a8ecc:	3101      	adds	r1, #1
 80a8ece:	f000 f9e9 	bl	80a92a4 <_Balloc>
 80a8ed2:	4683      	mov	fp, r0
 80a8ed4:	692a      	ldr	r2, [r5, #16]
 80a8ed6:	f105 010c 	add.w	r1, r5, #12
 80a8eda:	3202      	adds	r2, #2
 80a8edc:	0092      	lsls	r2, r2, #2
 80a8ede:	300c      	adds	r0, #12
 80a8ee0:	f7fd feb6 	bl	80a6c50 <memcpy>
 80a8ee4:	4629      	mov	r1, r5
 80a8ee6:	9802      	ldr	r0, [sp, #8]
 80a8ee8:	f000 fa11 	bl	80a930e <_Bfree>
 80a8eec:	465d      	mov	r5, fp
 80a8eee:	692b      	ldr	r3, [r5, #16]
 80a8ef0:	1c5a      	adds	r2, r3, #1
 80a8ef2:	612a      	str	r2, [r5, #16]
 80a8ef4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80a8ef8:	2201      	movs	r2, #1
 80a8efa:	615a      	str	r2, [r3, #20]
 80a8efc:	2f02      	cmp	r7, #2
 80a8efe:	f105 0214 	add.w	r2, r5, #20
 80a8f02:	d111      	bne.n	80a8f28 <__gethex+0x3ee>
 80a8f04:	f8d8 3000 	ldr.w	r3, [r8]
 80a8f08:	3b01      	subs	r3, #1
 80a8f0a:	429e      	cmp	r6, r3
 80a8f0c:	d127      	bne.n	80a8f5e <__gethex+0x424>
 80a8f0e:	1171      	asrs	r1, r6, #5
 80a8f10:	2301      	movs	r3, #1
 80a8f12:	f006 061f 	and.w	r6, r6, #31
 80a8f16:	fa03 f606 	lsl.w	r6, r3, r6
 80a8f1a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80a8f1e:	421e      	tst	r6, r3
 80a8f20:	bf0c      	ite	eq
 80a8f22:	2702      	moveq	r7, #2
 80a8f24:	2701      	movne	r7, #1
 80a8f26:	e01a      	b.n	80a8f5e <__gethex+0x424>
 80a8f28:	692b      	ldr	r3, [r5, #16]
 80a8f2a:	459a      	cmp	sl, r3
 80a8f2c:	da0a      	bge.n	80a8f44 <__gethex+0x40a>
 80a8f2e:	2101      	movs	r1, #1
 80a8f30:	4628      	mov	r0, r5
 80a8f32:	f7ff fdb7 	bl	80a8aa4 <rshift>
 80a8f36:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80a8f3a:	3401      	adds	r4, #1
 80a8f3c:	429c      	cmp	r4, r3
 80a8f3e:	f73f af2c 	bgt.w	80a8d9a <__gethex+0x260>
 80a8f42:	e00b      	b.n	80a8f5c <__gethex+0x422>
 80a8f44:	f016 061f 	ands.w	r6, r6, #31
 80a8f48:	d008      	beq.n	80a8f5c <__gethex+0x422>
 80a8f4a:	4491      	add	r9, r2
 80a8f4c:	f859 0c04 	ldr.w	r0, [r9, #-4]
 80a8f50:	f000 fa6d 	bl	80a942e <__hi0bits>
 80a8f54:	f1c6 0620 	rsb	r6, r6, #32
 80a8f58:	42b0      	cmp	r0, r6
 80a8f5a:	dbe8      	blt.n	80a8f2e <__gethex+0x3f4>
 80a8f5c:	2701      	movs	r7, #1
 80a8f5e:	f047 0720 	orr.w	r7, r7, #32
 80a8f62:	e001      	b.n	80a8f68 <__gethex+0x42e>
 80a8f64:	f047 0710 	orr.w	r7, r7, #16
 80a8f68:	4638      	mov	r0, r7
 80a8f6a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80a8f6c:	601d      	str	r5, [r3, #0]
 80a8f6e:	9b06      	ldr	r3, [sp, #24]
 80a8f70:	601c      	str	r4, [r3, #0]
 80a8f72:	b00b      	add	sp, #44	; 0x2c
 80a8f74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a8f78 <L_shift>:
 80a8f78:	f1c2 0208 	rsb	r2, r2, #8
 80a8f7c:	0092      	lsls	r2, r2, #2
 80a8f7e:	b570      	push	{r4, r5, r6, lr}
 80a8f80:	f1c2 0620 	rsb	r6, r2, #32
 80a8f84:	6843      	ldr	r3, [r0, #4]
 80a8f86:	6805      	ldr	r5, [r0, #0]
 80a8f88:	fa03 f406 	lsl.w	r4, r3, r6
 80a8f8c:	432c      	orrs	r4, r5
 80a8f8e:	40d3      	lsrs	r3, r2
 80a8f90:	6004      	str	r4, [r0, #0]
 80a8f92:	f840 3f04 	str.w	r3, [r0, #4]!
 80a8f96:	4288      	cmp	r0, r1
 80a8f98:	d3f4      	bcc.n	80a8f84 <L_shift+0xc>
 80a8f9a:	bd70      	pop	{r4, r5, r6, pc}

080a8f9c <__match>:
 80a8f9c:	b530      	push	{r4, r5, lr}
 80a8f9e:	6803      	ldr	r3, [r0, #0]
 80a8fa0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a8fa4:	3301      	adds	r3, #1
 80a8fa6:	b14c      	cbz	r4, 80a8fbc <__match+0x20>
 80a8fa8:	781a      	ldrb	r2, [r3, #0]
 80a8faa:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80a8fae:	2d19      	cmp	r5, #25
 80a8fb0:	bf98      	it	ls
 80a8fb2:	3220      	addls	r2, #32
 80a8fb4:	42a2      	cmp	r2, r4
 80a8fb6:	d0f3      	beq.n	80a8fa0 <__match+0x4>
 80a8fb8:	2000      	movs	r0, #0
 80a8fba:	bd30      	pop	{r4, r5, pc}
 80a8fbc:	6003      	str	r3, [r0, #0]
 80a8fbe:	2001      	movs	r0, #1
 80a8fc0:	bd30      	pop	{r4, r5, pc}

080a8fc2 <__hexnan>:
 80a8fc2:	680b      	ldr	r3, [r1, #0]
 80a8fc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a8fc8:	115e      	asrs	r6, r3, #5
 80a8fca:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80a8fce:	f013 031f 	ands.w	r3, r3, #31
 80a8fd2:	bf18      	it	ne
 80a8fd4:	3604      	addne	r6, #4
 80a8fd6:	1f35      	subs	r5, r6, #4
 80a8fd8:	4617      	mov	r7, r2
 80a8fda:	2200      	movs	r2, #0
 80a8fdc:	4682      	mov	sl, r0
 80a8fde:	46a8      	mov	r8, r5
 80a8fe0:	462c      	mov	r4, r5
 80a8fe2:	4691      	mov	r9, r2
 80a8fe4:	b085      	sub	sp, #20
 80a8fe6:	f8d0 b000 	ldr.w	fp, [r0]
 80a8fea:	9301      	str	r3, [sp, #4]
 80a8fec:	f846 2c04 	str.w	r2, [r6, #-4]
 80a8ff0:	9200      	str	r2, [sp, #0]
 80a8ff2:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
 80a8ff6:	2900      	cmp	r1, #0
 80a8ff8:	d03c      	beq.n	80a9074 <__hexnan+0xb2>
 80a8ffa:	4608      	mov	r0, r1
 80a8ffc:	9203      	str	r2, [sp, #12]
 80a8ffe:	9102      	str	r1, [sp, #8]
 80a9000:	f7ff fd86 	bl	80a8b10 <__hexdig_fun>
 80a9004:	9a03      	ldr	r2, [sp, #12]
 80a9006:	bb00      	cbnz	r0, 80a904a <__hexnan+0x88>
 80a9008:	9902      	ldr	r1, [sp, #8]
 80a900a:	2920      	cmp	r1, #32
 80a900c:	d816      	bhi.n	80a903c <__hexnan+0x7a>
 80a900e:	9b00      	ldr	r3, [sp, #0]
 80a9010:	4599      	cmp	r9, r3
 80a9012:	ddee      	ble.n	80a8ff2 <__hexnan+0x30>
 80a9014:	4544      	cmp	r4, r8
 80a9016:	d205      	bcs.n	80a9024 <__hexnan+0x62>
 80a9018:	2a07      	cmp	r2, #7
 80a901a:	dc03      	bgt.n	80a9024 <__hexnan+0x62>
 80a901c:	4641      	mov	r1, r8
 80a901e:	4620      	mov	r0, r4
 80a9020:	f7ff ffaa 	bl	80a8f78 <L_shift>
 80a9024:	42bc      	cmp	r4, r7
 80a9026:	d923      	bls.n	80a9070 <__hexnan+0xae>
 80a9028:	2300      	movs	r3, #0
 80a902a:	f1a4 0804 	sub.w	r8, r4, #4
 80a902e:	f844 3c04 	str.w	r3, [r4, #-4]
 80a9032:	f8cd 9000 	str.w	r9, [sp]
 80a9036:	4644      	mov	r4, r8
 80a9038:	461a      	mov	r2, r3
 80a903a:	e7da      	b.n	80a8ff2 <__hexnan+0x30>
 80a903c:	2929      	cmp	r1, #41	; 0x29
 80a903e:	d148      	bne.n	80a90d2 <__hexnan+0x110>
 80a9040:	f10b 0301 	add.w	r3, fp, #1
 80a9044:	f8ca 3000 	str.w	r3, [sl]
 80a9048:	e014      	b.n	80a9074 <__hexnan+0xb2>
 80a904a:	3201      	adds	r2, #1
 80a904c:	2a08      	cmp	r2, #8
 80a904e:	f109 0901 	add.w	r9, r9, #1
 80a9052:	dd06      	ble.n	80a9062 <__hexnan+0xa0>
 80a9054:	42bc      	cmp	r4, r7
 80a9056:	d9cc      	bls.n	80a8ff2 <__hexnan+0x30>
 80a9058:	2300      	movs	r3, #0
 80a905a:	f844 3c04 	str.w	r3, [r4, #-4]
 80a905e:	2201      	movs	r2, #1
 80a9060:	3c04      	subs	r4, #4
 80a9062:	6821      	ldr	r1, [r4, #0]
 80a9064:	f000 000f 	and.w	r0, r0, #15
 80a9068:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
 80a906c:	6020      	str	r0, [r4, #0]
 80a906e:	e7c0      	b.n	80a8ff2 <__hexnan+0x30>
 80a9070:	2208      	movs	r2, #8
 80a9072:	e7be      	b.n	80a8ff2 <__hexnan+0x30>
 80a9074:	f1b9 0f00 	cmp.w	r9, #0
 80a9078:	d02b      	beq.n	80a90d2 <__hexnan+0x110>
 80a907a:	4544      	cmp	r4, r8
 80a907c:	d205      	bcs.n	80a908a <__hexnan+0xc8>
 80a907e:	2a07      	cmp	r2, #7
 80a9080:	dc03      	bgt.n	80a908a <__hexnan+0xc8>
 80a9082:	4641      	mov	r1, r8
 80a9084:	4620      	mov	r0, r4
 80a9086:	f7ff ff77 	bl	80a8f78 <L_shift>
 80a908a:	42bc      	cmp	r4, r7
 80a908c:	d90c      	bls.n	80a90a8 <__hexnan+0xe6>
 80a908e:	463b      	mov	r3, r7
 80a9090:	f854 2b04 	ldr.w	r2, [r4], #4
 80a9094:	42a5      	cmp	r5, r4
 80a9096:	f843 2b04 	str.w	r2, [r3], #4
 80a909a:	d2f9      	bcs.n	80a9090 <__hexnan+0xce>
 80a909c:	2200      	movs	r2, #0
 80a909e:	f843 2b04 	str.w	r2, [r3], #4
 80a90a2:	429d      	cmp	r5, r3
 80a90a4:	d2fb      	bcs.n	80a909e <__hexnan+0xdc>
 80a90a6:	e00b      	b.n	80a90c0 <__hexnan+0xfe>
 80a90a8:	9b01      	ldr	r3, [sp, #4]
 80a90aa:	b14b      	cbz	r3, 80a90c0 <__hexnan+0xfe>
 80a90ac:	f1c3 0220 	rsb	r2, r3, #32
 80a90b0:	f04f 33ff 	mov.w	r3, #4294967295
 80a90b4:	40d3      	lsrs	r3, r2
 80a90b6:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80a90ba:	4013      	ands	r3, r2
 80a90bc:	f846 3c04 	str.w	r3, [r6, #-4]
 80a90c0:	682b      	ldr	r3, [r5, #0]
 80a90c2:	b943      	cbnz	r3, 80a90d6 <__hexnan+0x114>
 80a90c4:	42bd      	cmp	r5, r7
 80a90c6:	d102      	bne.n	80a90ce <__hexnan+0x10c>
 80a90c8:	2301      	movs	r3, #1
 80a90ca:	602b      	str	r3, [r5, #0]
 80a90cc:	e003      	b.n	80a90d6 <__hexnan+0x114>
 80a90ce:	3d04      	subs	r5, #4
 80a90d0:	e7f6      	b.n	80a90c0 <__hexnan+0xfe>
 80a90d2:	2004      	movs	r0, #4
 80a90d4:	e000      	b.n	80a90d8 <__hexnan+0x116>
 80a90d6:	2005      	movs	r0, #5
 80a90d8:	b005      	add	sp, #20
 80a90da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080a90e0 <_findenv_r>:
 80a90e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a90e4:	4607      	mov	r7, r0
 80a90e6:	468b      	mov	fp, r1
 80a90e8:	4690      	mov	r8, r2
 80a90ea:	f000 fcd7 	bl	80a9a9c <__env_lock>
 80a90ee:	4b19      	ldr	r3, [pc, #100]	; (80a9154 <_findenv_r+0x74>)
 80a90f0:	681d      	ldr	r5, [r3, #0]
 80a90f2:	469a      	mov	sl, r3
 80a90f4:	b13d      	cbz	r5, 80a9106 <_findenv_r+0x26>
 80a90f6:	465c      	mov	r4, fp
 80a90f8:	4623      	mov	r3, r4
 80a90fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a90fe:	b142      	cbz	r2, 80a9112 <_findenv_r+0x32>
 80a9100:	2a3d      	cmp	r2, #61	; 0x3d
 80a9102:	461c      	mov	r4, r3
 80a9104:	d1f8      	bne.n	80a90f8 <_findenv_r+0x18>
 80a9106:	4638      	mov	r0, r7
 80a9108:	f000 fcc9 	bl	80a9a9e <__env_unlock>
 80a910c:	2000      	movs	r0, #0
 80a910e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a9112:	ebcb 0404 	rsb	r4, fp, r4
 80a9116:	46a9      	mov	r9, r5
 80a9118:	f859 0b04 	ldr.w	r0, [r9], #4
 80a911c:	2800      	cmp	r0, #0
 80a911e:	d0f2      	beq.n	80a9106 <_findenv_r+0x26>
 80a9120:	4622      	mov	r2, r4
 80a9122:	4659      	mov	r1, fp
 80a9124:	f7fe fafe 	bl	80a7724 <strncmp>
 80a9128:	b988      	cbnz	r0, 80a914e <_findenv_r+0x6e>
 80a912a:	f859 3c04 	ldr.w	r3, [r9, #-4]
 80a912e:	191e      	adds	r6, r3, r4
 80a9130:	5d1b      	ldrb	r3, [r3, r4]
 80a9132:	2b3d      	cmp	r3, #61	; 0x3d
 80a9134:	d10b      	bne.n	80a914e <_findenv_r+0x6e>
 80a9136:	f8da 3000 	ldr.w	r3, [sl]
 80a913a:	4638      	mov	r0, r7
 80a913c:	1aed      	subs	r5, r5, r3
 80a913e:	10ad      	asrs	r5, r5, #2
 80a9140:	f8c8 5000 	str.w	r5, [r8]
 80a9144:	f000 fcab 	bl	80a9a9e <__env_unlock>
 80a9148:	1c70      	adds	r0, r6, #1
 80a914a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a914e:	464d      	mov	r5, r9
 80a9150:	e7e1      	b.n	80a9116 <_findenv_r+0x36>
 80a9152:	bf00      	nop
 80a9154:	200000fc 	.word	0x200000fc

080a9158 <_getenv_r>:
 80a9158:	b507      	push	{r0, r1, r2, lr}
 80a915a:	aa01      	add	r2, sp, #4
 80a915c:	f7ff ffc0 	bl	80a90e0 <_findenv_r>
 80a9160:	b003      	add	sp, #12
 80a9162:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a9168 <__gettzinfo>:
 80a9168:	4800      	ldr	r0, [pc, #0]	; (80a916c <__gettzinfo+0x4>)
 80a916a:	4770      	bx	lr
 80a916c:	200000bc 	.word	0x200000bc

080a9170 <gmtime_r>:
 80a9170:	6802      	ldr	r2, [r0, #0]
 80a9172:	4b46      	ldr	r3, [pc, #280]	; (80a928c <gmtime_r+0x11c>)
 80a9174:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a9176:	fb92 f4f3 	sdiv	r4, r2, r3
 80a917a:	fb03 2214 	mls	r2, r3, r4, r2
 80a917e:	2a00      	cmp	r2, #0
 80a9180:	bfbc      	itt	lt
 80a9182:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 80a9186:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 80a918a:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 80a918e:	fb92 f3f0 	sdiv	r3, r2, r0
 80a9192:	fb00 2213 	mls	r2, r0, r3, r2
 80a9196:	f04f 003c 	mov.w	r0, #60	; 0x3c
 80a919a:	608b      	str	r3, [r1, #8]
 80a919c:	fb92 f3f0 	sdiv	r3, r2, r0
 80a91a0:	fb00 2213 	mls	r2, r0, r3, r2
 80a91a4:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
 80a91a8:	bfac      	ite	ge
 80a91aa:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
 80a91ae:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
 80a91b2:	604b      	str	r3, [r1, #4]
 80a91b4:	600a      	str	r2, [r1, #0]
 80a91b6:	2307      	movs	r3, #7
 80a91b8:	1ce2      	adds	r2, r4, #3
 80a91ba:	fb92 f3f3 	sdiv	r3, r2, r3
 80a91be:	4d34      	ldr	r5, [pc, #208]	; (80a9290 <gmtime_r+0x120>)
 80a91c0:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a91c4:	fb94 f5f5 	sdiv	r5, r4, r5
 80a91c8:	1ad3      	subs	r3, r2, r3
 80a91ca:	f648 62ac 	movw	r2, #36524	; 0x8eac
 80a91ce:	f240 57b4 	movw	r7, #1460	; 0x5b4
 80a91d2:	618b      	str	r3, [r1, #24]
 80a91d4:	4b2f      	ldr	r3, [pc, #188]	; (80a9294 <gmtime_r+0x124>)
 80a91d6:	4830      	ldr	r0, [pc, #192]	; (80a9298 <gmtime_r+0x128>)
 80a91d8:	fb03 4405 	mla	r4, r3, r5, r4
 80a91dc:	fbb4 f2f2 	udiv	r2, r4, r2
 80a91e0:	fbb4 f3f7 	udiv	r3, r4, r7
 80a91e4:	fbb4 f0f0 	udiv	r0, r4, r0
 80a91e8:	4422      	add	r2, r4
 80a91ea:	1ad2      	subs	r2, r2, r3
 80a91ec:	f648 6694 	movw	r6, #36500	; 0x8e94
 80a91f0:	1a13      	subs	r3, r2, r0
 80a91f2:	f240 126d 	movw	r2, #365	; 0x16d
 80a91f6:	fbb3 f6f6 	udiv	r6, r3, r6
 80a91fa:	fbb3 f0f2 	udiv	r0, r3, r2
 80a91fe:	fbb3 f3f7 	udiv	r3, r3, r7
 80a9202:	4434      	add	r4, r6
 80a9204:	1ae3      	subs	r3, r4, r3
 80a9206:	fb02 3310 	mls	r3, r2, r0, r3
 80a920a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80a920e:	2499      	movs	r4, #153	; 0x99
 80a9210:	3202      	adds	r2, #2
 80a9212:	fbb2 f2f4 	udiv	r2, r2, r4
 80a9216:	4354      	muls	r4, r2
 80a9218:	1ca6      	adds	r6, r4, #2
 80a921a:	2405      	movs	r4, #5
 80a921c:	fbb6 f4f4 	udiv	r4, r6, r4
 80a9220:	2a0a      	cmp	r2, #10
 80a9222:	bf34      	ite	cc
 80a9224:	2602      	movcc	r6, #2
 80a9226:	f06f 0609 	mvncs.w	r6, #9
 80a922a:	4416      	add	r6, r2
 80a922c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80a9230:	fb02 0505 	mla	r5, r2, r5, r0
 80a9234:	1c5f      	adds	r7, r3, #1
 80a9236:	2e01      	cmp	r6, #1
 80a9238:	bf98      	it	ls
 80a923a:	3501      	addls	r5, #1
 80a923c:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 80a9240:	eba7 0704 	sub.w	r7, r7, r4
 80a9244:	d302      	bcc.n	80a924c <gmtime_r+0xdc>
 80a9246:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
 80a924a:	e014      	b.n	80a9276 <gmtime_r+0x106>
 80a924c:	0782      	lsls	r2, r0, #30
 80a924e:	d105      	bne.n	80a925c <gmtime_r+0xec>
 80a9250:	2464      	movs	r4, #100	; 0x64
 80a9252:	fbb0 f2f4 	udiv	r2, r0, r4
 80a9256:	fb04 0212 	mls	r2, r4, r2, r0
 80a925a:	b94a      	cbnz	r2, 80a9270 <gmtime_r+0x100>
 80a925c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80a9260:	fbb0 f4f2 	udiv	r4, r0, r2
 80a9264:	fb02 0014 	mls	r0, r2, r4, r0
 80a9268:	fab0 f280 	clz	r2, r0
 80a926c:	0952      	lsrs	r2, r2, #5
 80a926e:	e000      	b.n	80a9272 <gmtime_r+0x102>
 80a9270:	2201      	movs	r2, #1
 80a9272:	333b      	adds	r3, #59	; 0x3b
 80a9274:	441a      	add	r2, r3
 80a9276:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 80a927a:	2300      	movs	r3, #0
 80a927c:	61ca      	str	r2, [r1, #28]
 80a927e:	614d      	str	r5, [r1, #20]
 80a9280:	610e      	str	r6, [r1, #16]
 80a9282:	60cf      	str	r7, [r1, #12]
 80a9284:	620b      	str	r3, [r1, #32]
 80a9286:	4608      	mov	r0, r1
 80a9288:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a928a:	bf00      	nop
 80a928c:	00015180 	.word	0x00015180
 80a9290:	00023ab1 	.word	0x00023ab1
 80a9294:	fffdc54f 	.word	0xfffdc54f
 80a9298:	00023ab0 	.word	0x00023ab0

080a929c <labs>:
 80a929c:	2800      	cmp	r0, #0
 80a929e:	bfb8      	it	lt
 80a92a0:	4240      	neglt	r0, r0
 80a92a2:	4770      	bx	lr

080a92a4 <_Balloc>:
 80a92a4:	b570      	push	{r4, r5, r6, lr}
 80a92a6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80a92a8:	4604      	mov	r4, r0
 80a92aa:	460e      	mov	r6, r1
 80a92ac:	b93d      	cbnz	r5, 80a92be <_Balloc+0x1a>
 80a92ae:	2010      	movs	r0, #16
 80a92b0:	f7fa fb36 	bl	80a3920 <malloc>
 80a92b4:	6260      	str	r0, [r4, #36]	; 0x24
 80a92b6:	6045      	str	r5, [r0, #4]
 80a92b8:	6085      	str	r5, [r0, #8]
 80a92ba:	6005      	str	r5, [r0, #0]
 80a92bc:	60c5      	str	r5, [r0, #12]
 80a92be:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80a92c0:	68eb      	ldr	r3, [r5, #12]
 80a92c2:	b143      	cbz	r3, 80a92d6 <_Balloc+0x32>
 80a92c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80a92c6:	68db      	ldr	r3, [r3, #12]
 80a92c8:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80a92cc:	b178      	cbz	r0, 80a92ee <_Balloc+0x4a>
 80a92ce:	6802      	ldr	r2, [r0, #0]
 80a92d0:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80a92d4:	e017      	b.n	80a9306 <_Balloc+0x62>
 80a92d6:	2221      	movs	r2, #33	; 0x21
 80a92d8:	2104      	movs	r1, #4
 80a92da:	4620      	mov	r0, r4
 80a92dc:	f000 fbcb 	bl	80a9a76 <_calloc_r>
 80a92e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80a92e2:	60e8      	str	r0, [r5, #12]
 80a92e4:	68db      	ldr	r3, [r3, #12]
 80a92e6:	2b00      	cmp	r3, #0
 80a92e8:	d1ec      	bne.n	80a92c4 <_Balloc+0x20>
 80a92ea:	2000      	movs	r0, #0
 80a92ec:	bd70      	pop	{r4, r5, r6, pc}
 80a92ee:	2101      	movs	r1, #1
 80a92f0:	fa01 f506 	lsl.w	r5, r1, r6
 80a92f4:	1d6a      	adds	r2, r5, #5
 80a92f6:	0092      	lsls	r2, r2, #2
 80a92f8:	4620      	mov	r0, r4
 80a92fa:	f000 fbbc 	bl	80a9a76 <_calloc_r>
 80a92fe:	2800      	cmp	r0, #0
 80a9300:	d0f3      	beq.n	80a92ea <_Balloc+0x46>
 80a9302:	6046      	str	r6, [r0, #4]
 80a9304:	6085      	str	r5, [r0, #8]
 80a9306:	2300      	movs	r3, #0
 80a9308:	6103      	str	r3, [r0, #16]
 80a930a:	60c3      	str	r3, [r0, #12]
 80a930c:	bd70      	pop	{r4, r5, r6, pc}

080a930e <_Bfree>:
 80a930e:	b570      	push	{r4, r5, r6, lr}
 80a9310:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80a9312:	4606      	mov	r6, r0
 80a9314:	460d      	mov	r5, r1
 80a9316:	b93c      	cbnz	r4, 80a9328 <_Bfree+0x1a>
 80a9318:	2010      	movs	r0, #16
 80a931a:	f7fa fb01 	bl	80a3920 <malloc>
 80a931e:	6270      	str	r0, [r6, #36]	; 0x24
 80a9320:	6044      	str	r4, [r0, #4]
 80a9322:	6084      	str	r4, [r0, #8]
 80a9324:	6004      	str	r4, [r0, #0]
 80a9326:	60c4      	str	r4, [r0, #12]
 80a9328:	b13d      	cbz	r5, 80a933a <_Bfree+0x2c>
 80a932a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80a932c:	686a      	ldr	r2, [r5, #4]
 80a932e:	68db      	ldr	r3, [r3, #12]
 80a9330:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80a9334:	6029      	str	r1, [r5, #0]
 80a9336:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80a933a:	bd70      	pop	{r4, r5, r6, pc}

080a933c <__multadd>:
 80a933c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a9340:	4606      	mov	r6, r0
 80a9342:	460c      	mov	r4, r1
 80a9344:	690d      	ldr	r5, [r1, #16]
 80a9346:	461f      	mov	r7, r3
 80a9348:	f101 0e14 	add.w	lr, r1, #20
 80a934c:	2300      	movs	r3, #0
 80a934e:	f8de 0000 	ldr.w	r0, [lr]
 80a9352:	3301      	adds	r3, #1
 80a9354:	b281      	uxth	r1, r0
 80a9356:	fb02 7101 	mla	r1, r2, r1, r7
 80a935a:	0c00      	lsrs	r0, r0, #16
 80a935c:	0c0f      	lsrs	r7, r1, #16
 80a935e:	fb02 7000 	mla	r0, r2, r0, r7
 80a9362:	b289      	uxth	r1, r1
 80a9364:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80a9368:	429d      	cmp	r5, r3
 80a936a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80a936e:	f84e 1b04 	str.w	r1, [lr], #4
 80a9372:	dcec      	bgt.n	80a934e <__multadd+0x12>
 80a9374:	b1d7      	cbz	r7, 80a93ac <__multadd+0x70>
 80a9376:	68a3      	ldr	r3, [r4, #8]
 80a9378:	429d      	cmp	r5, r3
 80a937a:	db12      	blt.n	80a93a2 <__multadd+0x66>
 80a937c:	6861      	ldr	r1, [r4, #4]
 80a937e:	4630      	mov	r0, r6
 80a9380:	3101      	adds	r1, #1
 80a9382:	f7ff ff8f 	bl	80a92a4 <_Balloc>
 80a9386:	4680      	mov	r8, r0
 80a9388:	6922      	ldr	r2, [r4, #16]
 80a938a:	f104 010c 	add.w	r1, r4, #12
 80a938e:	3202      	adds	r2, #2
 80a9390:	0092      	lsls	r2, r2, #2
 80a9392:	300c      	adds	r0, #12
 80a9394:	f7fd fc5c 	bl	80a6c50 <memcpy>
 80a9398:	4621      	mov	r1, r4
 80a939a:	4630      	mov	r0, r6
 80a939c:	f7ff ffb7 	bl	80a930e <_Bfree>
 80a93a0:	4644      	mov	r4, r8
 80a93a2:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80a93a6:	3501      	adds	r5, #1
 80a93a8:	615f      	str	r7, [r3, #20]
 80a93aa:	6125      	str	r5, [r4, #16]
 80a93ac:	4620      	mov	r0, r4
 80a93ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a93b2 <__s2b>:
 80a93b2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a93b6:	4606      	mov	r6, r0
 80a93b8:	4615      	mov	r5, r2
 80a93ba:	461f      	mov	r7, r3
 80a93bc:	2209      	movs	r2, #9
 80a93be:	3308      	adds	r3, #8
 80a93c0:	460c      	mov	r4, r1
 80a93c2:	fb93 f3f2 	sdiv	r3, r3, r2
 80a93c6:	2100      	movs	r1, #0
 80a93c8:	2201      	movs	r2, #1
 80a93ca:	429a      	cmp	r2, r3
 80a93cc:	da02      	bge.n	80a93d4 <__s2b+0x22>
 80a93ce:	0052      	lsls	r2, r2, #1
 80a93d0:	3101      	adds	r1, #1
 80a93d2:	e7fa      	b.n	80a93ca <__s2b+0x18>
 80a93d4:	4630      	mov	r0, r6
 80a93d6:	f7ff ff65 	bl	80a92a4 <_Balloc>
 80a93da:	9b08      	ldr	r3, [sp, #32]
 80a93dc:	2d09      	cmp	r5, #9
 80a93de:	6143      	str	r3, [r0, #20]
 80a93e0:	f04f 0301 	mov.w	r3, #1
 80a93e4:	6103      	str	r3, [r0, #16]
 80a93e6:	dd11      	ble.n	80a940c <__s2b+0x5a>
 80a93e8:	f104 0809 	add.w	r8, r4, #9
 80a93ec:	46c1      	mov	r9, r8
 80a93ee:	442c      	add	r4, r5
 80a93f0:	f819 3b01 	ldrb.w	r3, [r9], #1
 80a93f4:	4601      	mov	r1, r0
 80a93f6:	3b30      	subs	r3, #48	; 0x30
 80a93f8:	220a      	movs	r2, #10
 80a93fa:	4630      	mov	r0, r6
 80a93fc:	f7ff ff9e 	bl	80a933c <__multadd>
 80a9400:	45a1      	cmp	r9, r4
 80a9402:	d1f5      	bne.n	80a93f0 <__s2b+0x3e>
 80a9404:	eb08 0405 	add.w	r4, r8, r5
 80a9408:	3c08      	subs	r4, #8
 80a940a:	e001      	b.n	80a9410 <__s2b+0x5e>
 80a940c:	340a      	adds	r4, #10
 80a940e:	2509      	movs	r5, #9
 80a9410:	1b2d      	subs	r5, r5, r4
 80a9412:	1963      	adds	r3, r4, r5
 80a9414:	429f      	cmp	r7, r3
 80a9416:	dd08      	ble.n	80a942a <__s2b+0x78>
 80a9418:	f814 3b01 	ldrb.w	r3, [r4], #1
 80a941c:	4601      	mov	r1, r0
 80a941e:	3b30      	subs	r3, #48	; 0x30
 80a9420:	220a      	movs	r2, #10
 80a9422:	4630      	mov	r0, r6
 80a9424:	f7ff ff8a 	bl	80a933c <__multadd>
 80a9428:	e7f3      	b.n	80a9412 <__s2b+0x60>
 80a942a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080a942e <__hi0bits>:
 80a942e:	0c03      	lsrs	r3, r0, #16
 80a9430:	041b      	lsls	r3, r3, #16
 80a9432:	b913      	cbnz	r3, 80a943a <__hi0bits+0xc>
 80a9434:	0400      	lsls	r0, r0, #16
 80a9436:	2310      	movs	r3, #16
 80a9438:	e000      	b.n	80a943c <__hi0bits+0xe>
 80a943a:	2300      	movs	r3, #0
 80a943c:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80a9440:	bf04      	itt	eq
 80a9442:	0200      	lsleq	r0, r0, #8
 80a9444:	3308      	addeq	r3, #8
 80a9446:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80a944a:	bf04      	itt	eq
 80a944c:	0100      	lsleq	r0, r0, #4
 80a944e:	3304      	addeq	r3, #4
 80a9450:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80a9454:	bf04      	itt	eq
 80a9456:	0080      	lsleq	r0, r0, #2
 80a9458:	3302      	addeq	r3, #2
 80a945a:	2800      	cmp	r0, #0
 80a945c:	db03      	blt.n	80a9466 <__hi0bits+0x38>
 80a945e:	0042      	lsls	r2, r0, #1
 80a9460:	d503      	bpl.n	80a946a <__hi0bits+0x3c>
 80a9462:	1c58      	adds	r0, r3, #1
 80a9464:	4770      	bx	lr
 80a9466:	4618      	mov	r0, r3
 80a9468:	4770      	bx	lr
 80a946a:	2020      	movs	r0, #32
 80a946c:	4770      	bx	lr

080a946e <__lo0bits>:
 80a946e:	6803      	ldr	r3, [r0, #0]
 80a9470:	f013 0207 	ands.w	r2, r3, #7
 80a9474:	d00b      	beq.n	80a948e <__lo0bits+0x20>
 80a9476:	07d9      	lsls	r1, r3, #31
 80a9478:	d422      	bmi.n	80a94c0 <__lo0bits+0x52>
 80a947a:	079a      	lsls	r2, r3, #30
 80a947c:	bf4b      	itete	mi
 80a947e:	085b      	lsrmi	r3, r3, #1
 80a9480:	089b      	lsrpl	r3, r3, #2
 80a9482:	6003      	strmi	r3, [r0, #0]
 80a9484:	6003      	strpl	r3, [r0, #0]
 80a9486:	bf4c      	ite	mi
 80a9488:	2001      	movmi	r0, #1
 80a948a:	2002      	movpl	r0, #2
 80a948c:	4770      	bx	lr
 80a948e:	b299      	uxth	r1, r3
 80a9490:	b909      	cbnz	r1, 80a9496 <__lo0bits+0x28>
 80a9492:	0c1b      	lsrs	r3, r3, #16
 80a9494:	2210      	movs	r2, #16
 80a9496:	f013 0fff 	tst.w	r3, #255	; 0xff
 80a949a:	bf04      	itt	eq
 80a949c:	0a1b      	lsreq	r3, r3, #8
 80a949e:	3208      	addeq	r2, #8
 80a94a0:	0719      	lsls	r1, r3, #28
 80a94a2:	bf04      	itt	eq
 80a94a4:	091b      	lsreq	r3, r3, #4
 80a94a6:	3204      	addeq	r2, #4
 80a94a8:	0799      	lsls	r1, r3, #30
 80a94aa:	bf04      	itt	eq
 80a94ac:	089b      	lsreq	r3, r3, #2
 80a94ae:	3202      	addeq	r2, #2
 80a94b0:	07d9      	lsls	r1, r3, #31
 80a94b2:	d402      	bmi.n	80a94ba <__lo0bits+0x4c>
 80a94b4:	085b      	lsrs	r3, r3, #1
 80a94b6:	d005      	beq.n	80a94c4 <__lo0bits+0x56>
 80a94b8:	3201      	adds	r2, #1
 80a94ba:	6003      	str	r3, [r0, #0]
 80a94bc:	4610      	mov	r0, r2
 80a94be:	4770      	bx	lr
 80a94c0:	2000      	movs	r0, #0
 80a94c2:	4770      	bx	lr
 80a94c4:	2020      	movs	r0, #32
 80a94c6:	4770      	bx	lr

080a94c8 <__i2b>:
 80a94c8:	b510      	push	{r4, lr}
 80a94ca:	460c      	mov	r4, r1
 80a94cc:	2101      	movs	r1, #1
 80a94ce:	f7ff fee9 	bl	80a92a4 <_Balloc>
 80a94d2:	2201      	movs	r2, #1
 80a94d4:	6144      	str	r4, [r0, #20]
 80a94d6:	6102      	str	r2, [r0, #16]
 80a94d8:	bd10      	pop	{r4, pc}

080a94da <__multiply>:
 80a94da:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a94de:	4614      	mov	r4, r2
 80a94e0:	690a      	ldr	r2, [r1, #16]
 80a94e2:	6923      	ldr	r3, [r4, #16]
 80a94e4:	4688      	mov	r8, r1
 80a94e6:	429a      	cmp	r2, r3
 80a94e8:	bfbe      	ittt	lt
 80a94ea:	460b      	movlt	r3, r1
 80a94ec:	46a0      	movlt	r8, r4
 80a94ee:	461c      	movlt	r4, r3
 80a94f0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80a94f4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80a94f8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80a94fc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80a9500:	eb07 0609 	add.w	r6, r7, r9
 80a9504:	429e      	cmp	r6, r3
 80a9506:	bfc8      	it	gt
 80a9508:	3101      	addgt	r1, #1
 80a950a:	f7ff fecb 	bl	80a92a4 <_Balloc>
 80a950e:	f100 0514 	add.w	r5, r0, #20
 80a9512:	462b      	mov	r3, r5
 80a9514:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
 80a9518:	2200      	movs	r2, #0
 80a951a:	4563      	cmp	r3, ip
 80a951c:	d202      	bcs.n	80a9524 <__multiply+0x4a>
 80a951e:	f843 2b04 	str.w	r2, [r3], #4
 80a9522:	e7fa      	b.n	80a951a <__multiply+0x40>
 80a9524:	f104 0214 	add.w	r2, r4, #20
 80a9528:	f108 0114 	add.w	r1, r8, #20
 80a952c:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80a9530:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80a9534:	9300      	str	r3, [sp, #0]
 80a9536:	9b00      	ldr	r3, [sp, #0]
 80a9538:	9201      	str	r2, [sp, #4]
 80a953a:	4293      	cmp	r3, r2
 80a953c:	d957      	bls.n	80a95ee <__multiply+0x114>
 80a953e:	f8b2 b000 	ldrh.w	fp, [r2]
 80a9542:	f1bb 0f00 	cmp.w	fp, #0
 80a9546:	d023      	beq.n	80a9590 <__multiply+0xb6>
 80a9548:	4689      	mov	r9, r1
 80a954a:	46ae      	mov	lr, r5
 80a954c:	f04f 0800 	mov.w	r8, #0
 80a9550:	f859 4b04 	ldr.w	r4, [r9], #4
 80a9554:	f8be a000 	ldrh.w	sl, [lr]
 80a9558:	b2a3      	uxth	r3, r4
 80a955a:	fb0b a303 	mla	r3, fp, r3, sl
 80a955e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80a9562:	f8de 4000 	ldr.w	r4, [lr]
 80a9566:	4443      	add	r3, r8
 80a9568:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80a956c:	fb0b 840a 	mla	r4, fp, sl, r8
 80a9570:	46f2      	mov	sl, lr
 80a9572:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80a9576:	b29b      	uxth	r3, r3
 80a9578:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80a957c:	454f      	cmp	r7, r9
 80a957e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80a9582:	f84a 3b04 	str.w	r3, [sl], #4
 80a9586:	d901      	bls.n	80a958c <__multiply+0xb2>
 80a9588:	46d6      	mov	lr, sl
 80a958a:	e7e1      	b.n	80a9550 <__multiply+0x76>
 80a958c:	f8ce 8004 	str.w	r8, [lr, #4]
 80a9590:	9b01      	ldr	r3, [sp, #4]
 80a9592:	3204      	adds	r2, #4
 80a9594:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80a9598:	f1ba 0f00 	cmp.w	sl, #0
 80a959c:	d021      	beq.n	80a95e2 <__multiply+0x108>
 80a959e:	462c      	mov	r4, r5
 80a95a0:	4689      	mov	r9, r1
 80a95a2:	682b      	ldr	r3, [r5, #0]
 80a95a4:	f04f 0800 	mov.w	r8, #0
 80a95a8:	f8b9 e000 	ldrh.w	lr, [r9]
 80a95ac:	f8b4 b002 	ldrh.w	fp, [r4, #2]
 80a95b0:	b29b      	uxth	r3, r3
 80a95b2:	fb0a be0e 	mla	lr, sl, lr, fp
 80a95b6:	46a3      	mov	fp, r4
 80a95b8:	44f0      	add	r8, lr
 80a95ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80a95be:	f84b 3b04 	str.w	r3, [fp], #4
 80a95c2:	f859 3b04 	ldr.w	r3, [r9], #4
 80a95c6:	f8b4 e004 	ldrh.w	lr, [r4, #4]
 80a95ca:	0c1b      	lsrs	r3, r3, #16
 80a95cc:	fb0a e303 	mla	r3, sl, r3, lr
 80a95d0:	454f      	cmp	r7, r9
 80a95d2:	eb03 4318 	add.w	r3, r3, r8, lsr #16
 80a95d6:	ea4f 4813 	mov.w	r8, r3, lsr #16
 80a95da:	d901      	bls.n	80a95e0 <__multiply+0x106>
 80a95dc:	465c      	mov	r4, fp
 80a95de:	e7e3      	b.n	80a95a8 <__multiply+0xce>
 80a95e0:	6063      	str	r3, [r4, #4]
 80a95e2:	3504      	adds	r5, #4
 80a95e4:	e7a7      	b.n	80a9536 <__multiply+0x5c>
 80a95e6:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
 80a95ea:	b913      	cbnz	r3, 80a95f2 <__multiply+0x118>
 80a95ec:	3e01      	subs	r6, #1
 80a95ee:	2e00      	cmp	r6, #0
 80a95f0:	dcf9      	bgt.n	80a95e6 <__multiply+0x10c>
 80a95f2:	6106      	str	r6, [r0, #16]
 80a95f4:	b003      	add	sp, #12
 80a95f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080a95fc <__pow5mult>:
 80a95fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a9600:	4615      	mov	r5, r2
 80a9602:	f012 0203 	ands.w	r2, r2, #3
 80a9606:	4606      	mov	r6, r0
 80a9608:	460f      	mov	r7, r1
 80a960a:	d007      	beq.n	80a961c <__pow5mult+0x20>
 80a960c:	4c21      	ldr	r4, [pc, #132]	; (80a9694 <__pow5mult+0x98>)
 80a960e:	3a01      	subs	r2, #1
 80a9610:	2300      	movs	r3, #0
 80a9612:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80a9616:	f7ff fe91 	bl	80a933c <__multadd>
 80a961a:	4607      	mov	r7, r0
 80a961c:	10ad      	asrs	r5, r5, #2
 80a961e:	d036      	beq.n	80a968e <__pow5mult+0x92>
 80a9620:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80a9622:	b93c      	cbnz	r4, 80a9634 <__pow5mult+0x38>
 80a9624:	2010      	movs	r0, #16
 80a9626:	f7fa f97b 	bl	80a3920 <malloc>
 80a962a:	6270      	str	r0, [r6, #36]	; 0x24
 80a962c:	6044      	str	r4, [r0, #4]
 80a962e:	6084      	str	r4, [r0, #8]
 80a9630:	6004      	str	r4, [r0, #0]
 80a9632:	60c4      	str	r4, [r0, #12]
 80a9634:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80a9638:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80a963c:	b94c      	cbnz	r4, 80a9652 <__pow5mult+0x56>
 80a963e:	f240 2171 	movw	r1, #625	; 0x271
 80a9642:	4630      	mov	r0, r6
 80a9644:	f7ff ff40 	bl	80a94c8 <__i2b>
 80a9648:	4604      	mov	r4, r0
 80a964a:	2300      	movs	r3, #0
 80a964c:	f8c8 0008 	str.w	r0, [r8, #8]
 80a9650:	6003      	str	r3, [r0, #0]
 80a9652:	f04f 0800 	mov.w	r8, #0
 80a9656:	07eb      	lsls	r3, r5, #31
 80a9658:	d50a      	bpl.n	80a9670 <__pow5mult+0x74>
 80a965a:	4639      	mov	r1, r7
 80a965c:	4622      	mov	r2, r4
 80a965e:	4630      	mov	r0, r6
 80a9660:	f7ff ff3b 	bl	80a94da <__multiply>
 80a9664:	4681      	mov	r9, r0
 80a9666:	4639      	mov	r1, r7
 80a9668:	4630      	mov	r0, r6
 80a966a:	f7ff fe50 	bl	80a930e <_Bfree>
 80a966e:	464f      	mov	r7, r9
 80a9670:	106d      	asrs	r5, r5, #1
 80a9672:	d00c      	beq.n	80a968e <__pow5mult+0x92>
 80a9674:	6820      	ldr	r0, [r4, #0]
 80a9676:	b108      	cbz	r0, 80a967c <__pow5mult+0x80>
 80a9678:	4604      	mov	r4, r0
 80a967a:	e7ec      	b.n	80a9656 <__pow5mult+0x5a>
 80a967c:	4622      	mov	r2, r4
 80a967e:	4621      	mov	r1, r4
 80a9680:	4630      	mov	r0, r6
 80a9682:	f7ff ff2a 	bl	80a94da <__multiply>
 80a9686:	6020      	str	r0, [r4, #0]
 80a9688:	f8c0 8000 	str.w	r8, [r0]
 80a968c:	e7f4      	b.n	80a9678 <__pow5mult+0x7c>
 80a968e:	4638      	mov	r0, r7
 80a9690:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a9694:	080aa978 	.word	0x080aa978

080a9698 <__lshift>:
 80a9698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a969c:	460c      	mov	r4, r1
 80a969e:	4607      	mov	r7, r0
 80a96a0:	4691      	mov	r9, r2
 80a96a2:	6926      	ldr	r6, [r4, #16]
 80a96a4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80a96a8:	4456      	add	r6, sl
 80a96aa:	6849      	ldr	r1, [r1, #4]
 80a96ac:	68a3      	ldr	r3, [r4, #8]
 80a96ae:	1c75      	adds	r5, r6, #1
 80a96b0:	42ab      	cmp	r3, r5
 80a96b2:	da02      	bge.n	80a96ba <__lshift+0x22>
 80a96b4:	3101      	adds	r1, #1
 80a96b6:	005b      	lsls	r3, r3, #1
 80a96b8:	e7fa      	b.n	80a96b0 <__lshift+0x18>
 80a96ba:	4638      	mov	r0, r7
 80a96bc:	f7ff fdf2 	bl	80a92a4 <_Balloc>
 80a96c0:	2300      	movs	r3, #0
 80a96c2:	4680      	mov	r8, r0
 80a96c4:	461a      	mov	r2, r3
 80a96c6:	f100 0114 	add.w	r1, r0, #20
 80a96ca:	4553      	cmp	r3, sl
 80a96cc:	da03      	bge.n	80a96d6 <__lshift+0x3e>
 80a96ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80a96d2:	3301      	adds	r3, #1
 80a96d4:	e7f9      	b.n	80a96ca <__lshift+0x32>
 80a96d6:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
 80a96da:	6920      	ldr	r0, [r4, #16]
 80a96dc:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80a96e0:	f019 091f 	ands.w	r9, r9, #31
 80a96e4:	f104 0114 	add.w	r1, r4, #20
 80a96e8:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 80a96ec:	d014      	beq.n	80a9718 <__lshift+0x80>
 80a96ee:	f1c9 0c20 	rsb	ip, r9, #32
 80a96f2:	2200      	movs	r2, #0
 80a96f4:	6808      	ldr	r0, [r1, #0]
 80a96f6:	469a      	mov	sl, r3
 80a96f8:	fa00 f009 	lsl.w	r0, r0, r9
 80a96fc:	4302      	orrs	r2, r0
 80a96fe:	f843 2b04 	str.w	r2, [r3], #4
 80a9702:	f851 2b04 	ldr.w	r2, [r1], #4
 80a9706:	458e      	cmp	lr, r1
 80a9708:	fa22 f20c 	lsr.w	r2, r2, ip
 80a970c:	d8f2      	bhi.n	80a96f4 <__lshift+0x5c>
 80a970e:	f8ca 2004 	str.w	r2, [sl, #4]
 80a9712:	b142      	cbz	r2, 80a9726 <__lshift+0x8e>
 80a9714:	1cb5      	adds	r5, r6, #2
 80a9716:	e006      	b.n	80a9726 <__lshift+0x8e>
 80a9718:	3b04      	subs	r3, #4
 80a971a:	f851 2b04 	ldr.w	r2, [r1], #4
 80a971e:	458e      	cmp	lr, r1
 80a9720:	f843 2f04 	str.w	r2, [r3, #4]!
 80a9724:	d8f9      	bhi.n	80a971a <__lshift+0x82>
 80a9726:	3d01      	subs	r5, #1
 80a9728:	4638      	mov	r0, r7
 80a972a:	f8c8 5010 	str.w	r5, [r8, #16]
 80a972e:	4621      	mov	r1, r4
 80a9730:	f7ff fded 	bl	80a930e <_Bfree>
 80a9734:	4640      	mov	r0, r8
 80a9736:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080a973a <__mcmp>:
 80a973a:	6903      	ldr	r3, [r0, #16]
 80a973c:	690a      	ldr	r2, [r1, #16]
 80a973e:	b510      	push	{r4, lr}
 80a9740:	1a9b      	subs	r3, r3, r2
 80a9742:	d111      	bne.n	80a9768 <__mcmp+0x2e>
 80a9744:	0092      	lsls	r2, r2, #2
 80a9746:	3014      	adds	r0, #20
 80a9748:	3114      	adds	r1, #20
 80a974a:	1883      	adds	r3, r0, r2
 80a974c:	440a      	add	r2, r1
 80a974e:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 80a9752:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80a9756:	428c      	cmp	r4, r1
 80a9758:	d002      	beq.n	80a9760 <__mcmp+0x26>
 80a975a:	d307      	bcc.n	80a976c <__mcmp+0x32>
 80a975c:	2001      	movs	r0, #1
 80a975e:	bd10      	pop	{r4, pc}
 80a9760:	4298      	cmp	r0, r3
 80a9762:	d3f4      	bcc.n	80a974e <__mcmp+0x14>
 80a9764:	2000      	movs	r0, #0
 80a9766:	bd10      	pop	{r4, pc}
 80a9768:	4618      	mov	r0, r3
 80a976a:	bd10      	pop	{r4, pc}
 80a976c:	f04f 30ff 	mov.w	r0, #4294967295
 80a9770:	bd10      	pop	{r4, pc}

080a9772 <__mdiff>:
 80a9772:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a9776:	460c      	mov	r4, r1
 80a9778:	4607      	mov	r7, r0
 80a977a:	4611      	mov	r1, r2
 80a977c:	4620      	mov	r0, r4
 80a977e:	4615      	mov	r5, r2
 80a9780:	f7ff ffdb 	bl	80a973a <__mcmp>
 80a9784:	1e06      	subs	r6, r0, #0
 80a9786:	d108      	bne.n	80a979a <__mdiff+0x28>
 80a9788:	4631      	mov	r1, r6
 80a978a:	4638      	mov	r0, r7
 80a978c:	f7ff fd8a 	bl	80a92a4 <_Balloc>
 80a9790:	2301      	movs	r3, #1
 80a9792:	6103      	str	r3, [r0, #16]
 80a9794:	6146      	str	r6, [r0, #20]
 80a9796:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a979a:	bfbc      	itt	lt
 80a979c:	4623      	movlt	r3, r4
 80a979e:	462c      	movlt	r4, r5
 80a97a0:	4638      	mov	r0, r7
 80a97a2:	6861      	ldr	r1, [r4, #4]
 80a97a4:	bfba      	itte	lt
 80a97a6:	461d      	movlt	r5, r3
 80a97a8:	2601      	movlt	r6, #1
 80a97aa:	2600      	movge	r6, #0
 80a97ac:	f7ff fd7a 	bl	80a92a4 <_Balloc>
 80a97b0:	692b      	ldr	r3, [r5, #16]
 80a97b2:	60c6      	str	r6, [r0, #12]
 80a97b4:	6926      	ldr	r6, [r4, #16]
 80a97b6:	f105 0914 	add.w	r9, r5, #20
 80a97ba:	f104 0114 	add.w	r1, r4, #20
 80a97be:	eb01 0786 	add.w	r7, r1, r6, lsl #2
 80a97c2:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80a97c6:	f100 0514 	add.w	r5, r0, #20
 80a97ca:	f04f 0c00 	mov.w	ip, #0
 80a97ce:	f851 2b04 	ldr.w	r2, [r1], #4
 80a97d2:	f859 4b04 	ldr.w	r4, [r9], #4
 80a97d6:	b293      	uxth	r3, r2
 80a97d8:	449c      	add	ip, r3
 80a97da:	b2a3      	uxth	r3, r4
 80a97dc:	0c24      	lsrs	r4, r4, #16
 80a97de:	ebc3 030c 	rsb	r3, r3, ip
 80a97e2:	ebc4 4212 	rsb	r2, r4, r2, lsr #16
 80a97e6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80a97ea:	b29b      	uxth	r3, r3
 80a97ec:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80a97f0:	45c8      	cmp	r8, r9
 80a97f2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a97f6:	468e      	mov	lr, r1
 80a97f8:	f845 2b04 	str.w	r2, [r5], #4
 80a97fc:	d8e7      	bhi.n	80a97ce <__mdiff+0x5c>
 80a97fe:	45be      	cmp	lr, r7
 80a9800:	d20e      	bcs.n	80a9820 <__mdiff+0xae>
 80a9802:	f85e 1b04 	ldr.w	r1, [lr], #4
 80a9806:	b28a      	uxth	r2, r1
 80a9808:	4462      	add	r2, ip
 80a980a:	1413      	asrs	r3, r2, #16
 80a980c:	eb03 4311 	add.w	r3, r3, r1, lsr #16
 80a9810:	b292      	uxth	r2, r2
 80a9812:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80a9816:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80a981a:	f845 2b04 	str.w	r2, [r5], #4
 80a981e:	e7ee      	b.n	80a97fe <__mdiff+0x8c>
 80a9820:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80a9824:	b90b      	cbnz	r3, 80a982a <__mdiff+0xb8>
 80a9826:	3e01      	subs	r6, #1
 80a9828:	e7fa      	b.n	80a9820 <__mdiff+0xae>
 80a982a:	6106      	str	r6, [r0, #16]
 80a982c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080a9830 <__ulp>:
 80a9830:	4b10      	ldr	r3, [pc, #64]	; (80a9874 <__ulp+0x44>)
 80a9832:	400b      	ands	r3, r1
 80a9834:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80a9838:	2b00      	cmp	r3, #0
 80a983a:	dd02      	ble.n	80a9842 <__ulp+0x12>
 80a983c:	2000      	movs	r0, #0
 80a983e:	4619      	mov	r1, r3
 80a9840:	4770      	bx	lr
 80a9842:	425b      	negs	r3, r3
 80a9844:	151b      	asrs	r3, r3, #20
 80a9846:	2b13      	cmp	r3, #19
 80a9848:	f04f 0000 	mov.w	r0, #0
 80a984c:	f04f 0100 	mov.w	r1, #0
 80a9850:	dc04      	bgt.n	80a985c <__ulp+0x2c>
 80a9852:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80a9856:	fa42 f103 	asr.w	r1, r2, r3
 80a985a:	4770      	bx	lr
 80a985c:	3b14      	subs	r3, #20
 80a985e:	2b1e      	cmp	r3, #30
 80a9860:	f04f 0201 	mov.w	r2, #1
 80a9864:	bfce      	itee	gt
 80a9866:	4613      	movgt	r3, r2
 80a9868:	f1c3 031f 	rsble	r3, r3, #31
 80a986c:	fa02 f303 	lslle.w	r3, r2, r3
 80a9870:	4618      	mov	r0, r3
 80a9872:	4770      	bx	lr
 80a9874:	7ff00000 	.word	0x7ff00000

080a9878 <__b2d>:
 80a9878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a987a:	6905      	ldr	r5, [r0, #16]
 80a987c:	f100 0614 	add.w	r6, r0, #20
 80a9880:	eb06 0585 	add.w	r5, r6, r5, lsl #2
 80a9884:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80a9888:	1f2f      	subs	r7, r5, #4
 80a988a:	4620      	mov	r0, r4
 80a988c:	f7ff fdcf 	bl	80a942e <__hi0bits>
 80a9890:	f1c0 0320 	rsb	r3, r0, #32
 80a9894:	280a      	cmp	r0, #10
 80a9896:	600b      	str	r3, [r1, #0]
 80a9898:	dc14      	bgt.n	80a98c4 <__b2d+0x4c>
 80a989a:	f1c0 0e0b 	rsb	lr, r0, #11
 80a989e:	fa24 f10e 	lsr.w	r1, r4, lr
 80a98a2:	42be      	cmp	r6, r7
 80a98a4:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
 80a98a8:	bf34      	ite	cc
 80a98aa:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80a98ae:	2100      	movcs	r1, #0
 80a98b0:	3015      	adds	r0, #21
 80a98b2:	fa04 f000 	lsl.w	r0, r4, r0
 80a98b6:	fa21 f10e 	lsr.w	r1, r1, lr
 80a98ba:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80a98be:	ea40 0201 	orr.w	r2, r0, r1
 80a98c2:	e023      	b.n	80a990c <__b2d+0x94>
 80a98c4:	42be      	cmp	r6, r7
 80a98c6:	bf3a      	itte	cc
 80a98c8:	f1a5 0708 	subcc.w	r7, r5, #8
 80a98cc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80a98d0:	2100      	movcs	r1, #0
 80a98d2:	380b      	subs	r0, #11
 80a98d4:	d015      	beq.n	80a9902 <__b2d+0x8a>
 80a98d6:	4084      	lsls	r4, r0
 80a98d8:	f1c0 0520 	rsb	r5, r0, #32
 80a98dc:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 80a98e0:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 80a98e4:	42b7      	cmp	r7, r6
 80a98e6:	fa21 fe05 	lsr.w	lr, r1, r5
 80a98ea:	ea44 030e 	orr.w	r3, r4, lr
 80a98ee:	bf8c      	ite	hi
 80a98f0:	f857 4c04 	ldrhi.w	r4, [r7, #-4]
 80a98f4:	2400      	movls	r4, #0
 80a98f6:	fa01 f000 	lsl.w	r0, r1, r0
 80a98fa:	40ec      	lsrs	r4, r5
 80a98fc:	ea40 0204 	orr.w	r2, r0, r4
 80a9900:	e004      	b.n	80a990c <__b2d+0x94>
 80a9902:	460a      	mov	r2, r1
 80a9904:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 80a9908:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80a990c:	4610      	mov	r0, r2
 80a990e:	4619      	mov	r1, r3
 80a9910:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a9912 <__d2b>:
 80a9912:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80a9916:	461c      	mov	r4, r3
 80a9918:	2101      	movs	r1, #1
 80a991a:	4690      	mov	r8, r2
 80a991c:	9e08      	ldr	r6, [sp, #32]
 80a991e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80a9920:	f7ff fcc0 	bl	80a92a4 <_Balloc>
 80a9924:	f3c4 0213 	ubfx	r2, r4, #0, #20
 80a9928:	f3c4 540a 	ubfx	r4, r4, #20, #11
 80a992c:	4607      	mov	r7, r0
 80a992e:	b10c      	cbz	r4, 80a9934 <__d2b+0x22>
 80a9930:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80a9934:	9201      	str	r2, [sp, #4]
 80a9936:	f1b8 0f00 	cmp.w	r8, #0
 80a993a:	d019      	beq.n	80a9970 <__d2b+0x5e>
 80a993c:	a802      	add	r0, sp, #8
 80a993e:	f840 8d08 	str.w	r8, [r0, #-8]!
 80a9942:	f7ff fd94 	bl	80a946e <__lo0bits>
 80a9946:	9b00      	ldr	r3, [sp, #0]
 80a9948:	b148      	cbz	r0, 80a995e <__d2b+0x4c>
 80a994a:	9a01      	ldr	r2, [sp, #4]
 80a994c:	f1c0 0120 	rsb	r1, r0, #32
 80a9950:	fa02 f101 	lsl.w	r1, r2, r1
 80a9954:	430b      	orrs	r3, r1
 80a9956:	40c2      	lsrs	r2, r0
 80a9958:	617b      	str	r3, [r7, #20]
 80a995a:	9201      	str	r2, [sp, #4]
 80a995c:	e000      	b.n	80a9960 <__d2b+0x4e>
 80a995e:	617b      	str	r3, [r7, #20]
 80a9960:	9b01      	ldr	r3, [sp, #4]
 80a9962:	2b00      	cmp	r3, #0
 80a9964:	bf14      	ite	ne
 80a9966:	2102      	movne	r1, #2
 80a9968:	2101      	moveq	r1, #1
 80a996a:	61bb      	str	r3, [r7, #24]
 80a996c:	6139      	str	r1, [r7, #16]
 80a996e:	e007      	b.n	80a9980 <__d2b+0x6e>
 80a9970:	a801      	add	r0, sp, #4
 80a9972:	f7ff fd7c 	bl	80a946e <__lo0bits>
 80a9976:	9b01      	ldr	r3, [sp, #4]
 80a9978:	2101      	movs	r1, #1
 80a997a:	617b      	str	r3, [r7, #20]
 80a997c:	6139      	str	r1, [r7, #16]
 80a997e:	3020      	adds	r0, #32
 80a9980:	b134      	cbz	r4, 80a9990 <__d2b+0x7e>
 80a9982:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80a9986:	4404      	add	r4, r0
 80a9988:	6034      	str	r4, [r6, #0]
 80a998a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80a998e:	e009      	b.n	80a99a4 <__d2b+0x92>
 80a9990:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80a9994:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80a9998:	6030      	str	r0, [r6, #0]
 80a999a:	6918      	ldr	r0, [r3, #16]
 80a999c:	f7ff fd47 	bl	80a942e <__hi0bits>
 80a99a0:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80a99a4:	6028      	str	r0, [r5, #0]
 80a99a6:	4638      	mov	r0, r7
 80a99a8:	b002      	add	sp, #8
 80a99aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a99ae <__ratio>:
 80a99ae:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80a99b2:	4688      	mov	r8, r1
 80a99b4:	4669      	mov	r1, sp
 80a99b6:	4681      	mov	r9, r0
 80a99b8:	f7ff ff5e 	bl	80a9878 <__b2d>
 80a99bc:	460d      	mov	r5, r1
 80a99be:	4604      	mov	r4, r0
 80a99c0:	a901      	add	r1, sp, #4
 80a99c2:	4640      	mov	r0, r8
 80a99c4:	f7ff ff58 	bl	80a9878 <__b2d>
 80a99c8:	460f      	mov	r7, r1
 80a99ca:	4606      	mov	r6, r0
 80a99cc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80a99d0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80a99d4:	4620      	mov	r0, r4
 80a99d6:	1a9a      	subs	r2, r3, r2
 80a99d8:	e89d 000a 	ldmia.w	sp, {r1, r3}
 80a99dc:	1ac9      	subs	r1, r1, r3
 80a99de:	eb01 1342 	add.w	r3, r1, r2, lsl #5
 80a99e2:	2b00      	cmp	r3, #0
 80a99e4:	bfcc      	ite	gt
 80a99e6:	eb05 5503 	addgt.w	r5, r5, r3, lsl #20
 80a99ea:	eba7 5703 	suble.w	r7, r7, r3, lsl #20
 80a99ee:	4632      	mov	r2, r6
 80a99f0:	463b      	mov	r3, r7
 80a99f2:	4629      	mov	r1, r5
 80a99f4:	f7fc f916 	bl	80a5c24 <__aeabi_ddiv>
 80a99f8:	b003      	add	sp, #12
 80a99fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080a99fe <__copybits>:
 80a99fe:	3901      	subs	r1, #1
 80a9a00:	b510      	push	{r4, lr}
 80a9a02:	1149      	asrs	r1, r1, #5
 80a9a04:	6914      	ldr	r4, [r2, #16]
 80a9a06:	3101      	adds	r1, #1
 80a9a08:	f102 0314 	add.w	r3, r2, #20
 80a9a0c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80a9a10:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80a9a14:	42a3      	cmp	r3, r4
 80a9a16:	4602      	mov	r2, r0
 80a9a18:	d204      	bcs.n	80a9a24 <__copybits+0x26>
 80a9a1a:	f853 2b04 	ldr.w	r2, [r3], #4
 80a9a1e:	f840 2b04 	str.w	r2, [r0], #4
 80a9a22:	e7f7      	b.n	80a9a14 <__copybits+0x16>
 80a9a24:	2300      	movs	r3, #0
 80a9a26:	428a      	cmp	r2, r1
 80a9a28:	d202      	bcs.n	80a9a30 <__copybits+0x32>
 80a9a2a:	f842 3b04 	str.w	r3, [r2], #4
 80a9a2e:	e7fa      	b.n	80a9a26 <__copybits+0x28>
 80a9a30:	bd10      	pop	{r4, pc}

080a9a32 <__any_on>:
 80a9a32:	f100 0214 	add.w	r2, r0, #20
 80a9a36:	6900      	ldr	r0, [r0, #16]
 80a9a38:	114b      	asrs	r3, r1, #5
 80a9a3a:	4298      	cmp	r0, r3
 80a9a3c:	b510      	push	{r4, lr}
 80a9a3e:	db0c      	blt.n	80a9a5a <__any_on+0x28>
 80a9a40:	dd0c      	ble.n	80a9a5c <__any_on+0x2a>
 80a9a42:	f011 011f 	ands.w	r1, r1, #31
 80a9a46:	d009      	beq.n	80a9a5c <__any_on+0x2a>
 80a9a48:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80a9a4c:	fa24 f001 	lsr.w	r0, r4, r1
 80a9a50:	fa00 f101 	lsl.w	r1, r0, r1
 80a9a54:	428c      	cmp	r4, r1
 80a9a56:	d10c      	bne.n	80a9a72 <__any_on+0x40>
 80a9a58:	e000      	b.n	80a9a5c <__any_on+0x2a>
 80a9a5a:	4603      	mov	r3, r0
 80a9a5c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80a9a60:	4293      	cmp	r3, r2
 80a9a62:	d904      	bls.n	80a9a6e <__any_on+0x3c>
 80a9a64:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80a9a68:	2900      	cmp	r1, #0
 80a9a6a:	d0f9      	beq.n	80a9a60 <__any_on+0x2e>
 80a9a6c:	e001      	b.n	80a9a72 <__any_on+0x40>
 80a9a6e:	2000      	movs	r0, #0
 80a9a70:	bd10      	pop	{r4, pc}
 80a9a72:	2001      	movs	r0, #1
 80a9a74:	bd10      	pop	{r4, pc}

080a9a76 <_calloc_r>:
 80a9a76:	b538      	push	{r3, r4, r5, lr}
 80a9a78:	fb02 f401 	mul.w	r4, r2, r1
 80a9a7c:	4621      	mov	r1, r4
 80a9a7e:	f7f9 ff97 	bl	80a39b0 <_malloc_r>
 80a9a82:	4605      	mov	r5, r0
 80a9a84:	b118      	cbz	r0, 80a9a8e <_calloc_r+0x18>
 80a9a86:	4622      	mov	r2, r4
 80a9a88:	2100      	movs	r1, #0
 80a9a8a:	f7fd f8ec 	bl	80a6c66 <memset>
 80a9a8e:	4628      	mov	r0, r5
 80a9a90:	bd38      	pop	{r3, r4, r5, pc}
	...

080a9a94 <nanf>:
 80a9a94:	4800      	ldr	r0, [pc, #0]	; (80a9a98 <nanf+0x4>)
 80a9a96:	4770      	bx	lr
 80a9a98:	7fc00000 	.word	0x7fc00000

080a9a9c <__env_lock>:
 80a9a9c:	4770      	bx	lr

080a9a9e <__env_unlock>:
 80a9a9e:	4770      	bx	lr

080a9aa0 <dynalib_user>:
 80a9aa0:	0021 080a 0061 080a 008d 080a 0091 080a     !...a...........
 80a9ab0:	0000 0000                                   ....

080a9ab4 <_ZTV16JsonWriterStaticILj512EE>:
	...
 80a9abc:	029d 080a 02b1 080a 7274 6575 6600 6c61     ........true.fal
 80a9acc:	6573 6d00 7861 7543 7272 6e65 4374 3e31     se.maxCurrentC1>
 80a9adc:	4e09 7765 7320 7465 6f70 6e69 2074 6573     .New setpoint se
 80a9aec:	2074 7461 0020 4120 706d 2e73 6d00 7861     t at . Amps..max
 80a9afc:	7543 7272 6e65 4374 3e32 4e09 7765 7320     CurrentC2>.New s
 80a9b0c:	7465 6f70 6e69 2074 6573 2074 7461 0020     etpoint set at .
 80a9b1c:	7041 7270 786f 6d69 7461 2065 6f79 7275     Approximate your
 80a9b2c:	6320 7261 2064 6f74 7420 6568 7220 6165      card to the rea
 80a9b3c:	6564 2e72 2e2e 4300 6168 6772 7265 0020     der....Charger .
 80a9b4c:	6f56 746c 6761 3a65 0020 6964 2064 6f6e     Voltage: .did no
 80a9b5c:	2074 6572 6563 7669 2065 6e65 756f 6867     t receive enough
 80a9b6c:	7620 6c6f 6174 6567 6420 7461 0061 7543      voltage data.Cu
 80a9b7c:	7272 6e65 3a74 0020 6964 2064 6f6e 2074     rrent: .did not 
 80a9b8c:	6572 6563 7669 2065 6e65 756f 6867 6320     receive enough c
 80a9b9c:	7275 6572 746e 6420 7461 0061 7246 7165     urrent data.Freq
 80a9bac:	6575 636e 3a79 0020 6964 2064 6f6e 2074     uency: .did not 
 80a9bbc:	6572 6563 7669 2065 6e65 756f 6867 6620     receive enough f
 80a9bcc:	6572 7571 6e65 7963 6420 7461 0061 6f50     requency data.Po
 80a9bdc:	6577 3a72 0020 6964 2064 6f6e 2074 6572     wer: .did not re
 80a9bec:	6563 7669 2065 6e65 756f 6867 7020 776f     ceive enough pow
 80a9bfc:	7265 6420 7461 0061 6e45 7265 7967 203a     er data.Energy: 
 80a9c0c:	6400 6469 6e20 746f 7220 6365 6965 6576     .did not receive
 80a9c1c:	6520 6f6e 6775 2068 6e65 7265 7967 6420      enough energy d
 80a9c2c:	7461 0061 6f6c 706f 6572 6461 093e 6553     ata.loopread>.Se
 80a9c3c:	6972 6c61 5220 6165 2064 7245 6f72 2172     rial Read Error!
 80a9c4c:	3000 0030 4148 654e 7376 2f65 6870 746f     .00.HANevse/phot
 80a9c5c:	6e6f 6f43 766e 7265 6574 2f64 7300 6375     onConverted/.suc
 80a9c6c:	6563 7373 7566 206c 7473 7261 2074 656e     cessful start ne
 80a9c7c:	2077 6863 7261 6567 6300 6168 6772 7265     w charge.charger
 80a9c8c:	6920 2073 7266 6565 202c 7562 2074 6f79      is free, but yo
 80a9c9c:	2075 6c61 6572 6461 2079 7773 7069 6465     u already swiped
 80a9cac:	7420 6568 6320 7261 2064 6e69 7420 6568      the card in the
 80a9cbc:	6c20 7361 2074 3032 7320 6365 4800 4e41      last 20 sec.HAN
 80a9ccc:	7665 6573 702f 6f68 6f74 436e 6e6f 6576     evse/photonConve
 80a9cdc:	7472 6465 6300 6168 6772 7265 6920 2073     rted.charger is 
 80a9cec:	636f 7563 6970 6465 6220 2079 6e61 746f     occupied by anot
 80a9cfc:	6568 2072 7375 7265 7300 6375 6563 7373     her user.success
 80a9d0c:	7566 206c 7473 706f 6320 6168 6772 2065     ful stop charge 
 80a9d1c:	6573 7373 6f69 006e 6f79 2075 756a 7473     session.you just
 80a9d2c:	7320 6174 7472 6465 6120 6320 6168 6772      started a charg
 80a9d3c:	2065 7461 7420 6968 2073 6863 7261 6567     e at this charge
 80a9d4c:	2c72 6220 7475 6820 6461 6120 6f6e 6874     r, but had anoth
 80a9d5c:	7265 6320 6e6f 6573 7563 6974 6576 5220     er consecutive R
 80a9d6c:	4946 2044 7773 7069 2065 6977 6874 6e69     FID swipe within
 80a9d7c:	3220 2030 6573 0063 6f79 2075 7261 2065      20 sec.you are 
 80a9d8c:	6c61 6572 6461 2079 6863 7261 6967 676e     already charging
 80a9d9c:	6120 2074 6e61 746f 6568 2072 6863 7261      at another char
 80a9dac:	6567 0072 7573 6363 7365 6673 6c75 5220     ger.successful R
 80a9dbc:	4946 2044 6572 6461 202c 7562 2074 6f79     FID read, but yo
 80a9dcc:	2075 7261 2065 6f6e 2074 6e69 7420 6568     u are not in the
 80a9ddc:	7520 6573 6c72 7369 0074 5245 4f52 3a52      userlist.ERROR:
 80a9dec:	7520 6b6e 6f6e 6e77 7320 6563 616e 6972      unknown scenari
 80a9dfc:	006f 514d 5454 093e 6f43 6e6e 6365 6974     o.MQTT>.Connecti
 80a9e0c:	676e 7420 206f 514d 5454 6220 6f72 656b     ng to MQTT broke
 80a9e1c:	2e72 2e2e 4500 2d56 6850 746f 6e6f 742d     r....EV-Photon-t
 80a9e2c:	7365 3174 4d00 5451 3e54 4309 6e6f 656e     est1.MQTT>.Conne
 80a9e3c:	7463 6465 4800 4e41 7665 6573 2f31 6e45     cted.HANevse1/En
 80a9e4c:	7265 7967 654d 6574 0072 4148 654e 7376     ergyMeter.HANevs
 80a9e5c:	3165 612f 6c6c 776f 7355 7265 4d00 5451     e1/allowUser.MQT
 80a9e6c:	3e54 4309 6e6f 656e 7463 6f69 206e 6166     T>.Connection fa
 80a9e7c:	6c69 6465 4d00 5451 3e54 5209 7465 7972     iled.MQTT>.Retry
 80a9e8c:	6e69 2e67 2e2e 5600 0031 3256 5600 0033     ing....V1.V2.V3.
 80a9e9c:	3149 4900 0032 3349 4600 5500 6573 4972     I1.I2.I3.F.UserI
 80a9eac:	0044 6f53 6b63 7465 4449 2500 756c 4800     D.SocketID.%lu.H
 80a9ebc:	4e41 7665 6573 702f 6f68 6f74 4d6e 6165     ANevse/photonMea
 80a9ecc:	7573 6572 2500 646c 2000 0030 6572 6461     sure.%ld. 0.read
 80a9edc:	6143 6472 093e 4955 2044 6174 2067 6e6f     Card>.UID tag on
 80a9eec:	6320 6168 6772 7265 3a31 5500 6573 4972      charger1:.UserI
 80a9efc:	0064 6843 7261 6567 0072 7453 7261 5474     d.Charger.StartT
 80a9f0c:	6d69 0065 4148 654e 7376 2f65 7075 6164     ime.HANevse/upda
 80a9f1c:	6574 7355 7265 7200 6165 4364 7261 3e64     teUser.readCard>
 80a9f2c:	5509 4449 7420 6761 6f20 206e 6863 7261     .UID tag on char
 80a9f3c:	6567 3272 003a 614c 6574 7473 7453 7261     ger2:.LatestStar
 80a9f4c:	5474 6d69 3e65 0009 202c 5400 6d69 6f65     tTime>.., .Timeo
 80a9f5c:	7475 6320 6168 6772 7265 4e00 206f 4449     ut charger.No ID
 80a9f6c:	7300 6977 6374 5468 7365 0074 616d 4378     .switchTest.maxC
 80a9f7c:	7275 6572 746e 3143 6d00 7861 7543 7272     urrentC1.maxCurr
 80a9f8c:	6e65 4374 0032 6572 6573 4f74 696c 656d     entC2.resetOlime
 80a9f9c:	0078 7270 676f 6f4d 6564 6c4f 786d 7200     x.progModeOlmx.r
 80a9fac:	7365 7465 6150 7472 6369 006c 6957 6966     esetParticl.Wifi
 80a9fbc:	6953 6e67 6c61 6900 696e 5274 4946 0044     Signal.initRFID.
 80a9fcc:	7563 7272 6e65 5374 7274 5300 6168 6572     currentStr.Share
 80a9fdc:	6156 0072 6f54 6970 0063 7262 6b6f 7265     Var.Topic.broker
 80a9fec:	682e 7669 6d65 2e71 6f63 006d 7274 0079     .hivemq.com.try.
 80a9ffc:	6f53 6b63 7465 0073 3939 4d00 5451 3e54     Sockets.99.MQTT>
 80aa00c:	4309 6c61 626c 6361 206b 7566 636e 6974     .Callback functi
 80aa01c:	6e6f 6920 2073 6163 6c6c 6465 6120 3a74     on is called at:
 80aa02c:	0020 0400 514d 5454 0004 4d06 4951 6473      ...MQTT...MQIsd
 80aa03c:	0370 0000                                   p...

080aa040 <_ZTV10JsonBuffer>:
	...
 80aa048:	299d 080a 29b9 080a                         .)...)..

080aa050 <_ZTV10JsonWriter>:
	...
 80aa058:	2a05 080a 2a19 080a 3025 7834 5c00 2575     .*...*..%04x.\u%
 80aa068:	3430 0058 2e25 662a 2500 0066 2e25 6c2a     04X.%.*f.%f.%.*l
 80aa078:	0066 6c25 0066 0000                         f.%lf...

080aa080 <_ZTV10JsonParser>:
	...
 80aa088:	29cd 080a 29f1 080a                         .)...)..

080aa090 <_ZTVSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
 80aa098:	3b6d 080a 3b73 080a 3f8b 080a 3b81 080a     m;..s;...?...;..
 80aa0a8:	3b6f 080a                                   o;..

080aa0ac <_ZTV9TCPClient>:
	...
 80aa0b4:	2161 080a 2195 080a 3b29 080a 3b43 080a     a!...!..);..C;..
 80aa0c4:	3c89 080a 3bf3 080a 3bc5 080a 3b6b 080a     .<...;...;..k;..
 80aa0d4:	3d35 080a 3fa5 080a 3c27 080a 3d01 080a     5=...?..'<...=..
 80aa0e4:	3e83 080a 3ed5 080a 3b53 080a 3e47 080a     .>...>..S;..G>..
 80aa0f4:	3ba5 080a 6977 6972 676e 5400 5043 6c43     .;..wiring.TCPCl
 80aa104:	6569 746e 7320 636f 656b 3d74 7825 6e00     ient socket=%x.n
 80aa114:	6e61 6f00 6676 6900 666e 6200 7561 0064     an.ovf.inf.baud.
 80aa124:	6553 6972 6c61 5500 4253 6553 6972 6c61     Serial.USBSerial
 80aa134:	0031 7974 6570 7000 7261 6d61 6300 646d     1.type.param.cmd
 80aa144:	6900 0064 6e68 0064 7473 6d72 6600 6c69     .id.hnd.strm.fil
 80aa154:	0074 766c 006c 6461 4864 6e61 6c64 7265     t.lvl.addHandler
 80aa164:	7200 6d65 766f 4865 6e61 6c64 7265 6500     .removeHandler.e
 80aa174:	756e 486d 6e61 6c64 7265 0073 534a 4e4f     numHandlers.JSON
 80aa184:	7453 6572 6d61 6f4c 4867 6e61 6c64 7265     StreamLogHandler
 80aa194:	6100 7070 2500 3130 7530 0020 205d 2800     .app.%010u .] .(
 80aa1a4:	3a29 0020 5b20 6300 646f 2065 203d 2500     ): . [.code = .%
 80aa1b4:	0069 6564 6174 6c69 2073 203d 0d00 000a     i.details = ....
 80aa1c4:	6e6c 6600 006e 6f63 6564 6400 7465 6961     ln.fn.code.detai
 80aa1d4:	006c 6f6e 656e 7400 6172 6563 6900 666e     l.none.trace.inf
 80aa1e4:	006f 6177 6e72 6500 7272 726f 7000 6e61     o.warn.error.pan
 80aa1f4:	6369 6100 6c6c 2500 302b 6433 253a 3230     ic.all.%+03d:%02
 80aa204:	0075 5925 252d 2d6d 6425 2554 3a48 4d25     u.%Y-%m-%dT%H:%M
 80aa214:	253a 2553 007a 7361 7463 6d69 0065 0000     :%S%z.asctime...

080aa224 <_ZTV9IPAddress>:
	...
 80aa22c:	4acf 080a 4abf 080a 4ac1 080a               .J...J...J..

080aa238 <_ZTV9USBSerial>:
	...
 80aa240:	4bb5 080a 4c05 080a 4c13 080a 441d 080a     .K...L...L...D..
 80aa250:	4bf1 080a 4bb7 080a 4bcd 080a 4bff 080a     .K...K...K...K..
 80aa260:	4be3 080a 4bb1 080a                         .K...K..

080aa268 <_ZTV11USARTSerial>:
	...
 80aa270:	4d1d 080a 4d6d 080a 4d7b 080a 441d 080a     .M..mM..{M...D..
 80aa280:	4d31 080a 4d53 080a 4d3f 080a 4d67 080a     1M..SM..?M..gM..
 80aa290:	4d1f 080a 4d23 080a                         .M..#M..

080aa298 <_ZTV7TwoWire>:
	...
 80aa2a0:	4e61 080a 4eab 080a 4e83 080a 4e63 080a     aN...N...N..cN..
 80aa2b0:	4e8b 080a 4e93 080a 4e9b 080a 4ea3 080a     .N...N...N...N..

080aa2c0 <_ZTVN5spark9WiFiClassE>:
	...
 80aa2c8:	4fd9 080a 4fcf 080a 4fc5 080a 4f35 080a     .O...O...O..5O..
 80aa2d8:	46ab 080a 4fb9 080a 4fad 080a 4fa5 080a     .F...O...O...O..
 80aa2e8:	4f9b 080a 4f91 080a 4f4d 080a               .O...O..MO..

080aa2f4 <_ZTV10WiFiSignal>:
	...
 80aa2fc:	4ee5 080a 4f3f 080a 4ee7 080a 5015 080a     .N..?O...N...P..
 80aa30c:	4eed 080a 4fe5 080a 4f11 080a               .N...O...O..

080aa318 <_ZTVN5spark12NetworkClassE>:
	...
 80aa320:	5101 080a 510b 080a 5115 080a 511f 080a     .Q...Q...Q...Q..
 80aa330:	5129 080a 5135 080a 5141 080a 514d 080a     )Q..5Q..AQ..MQ..
 80aa340:	5155 080a 515f 080a 5169 080a               UQ.._Q..iQ..

080aa34c <_ZSt7nothrow>:
	...

080aa34d <day_name.4723>:
 80aa34d:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
 80aa35d:	6972 6153 4a74                                   riSat

080aa362 <mon_name.4724>:
 80aa362:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
 80aa372:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
 80aa382:	4476 6365 2e25 7333 2520 332e 2573 6433     vDec%.3s %.3s%3d
 80aa392:	2520 322e 3a64 2e25 6432 253a 322e 2064      %.2d:%.2d:%.2d 
 80aa3a2:	6425 000a                                   %d..

080aa3a6 <_ctype_>:
 80aa3a6:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 80aa3b6:	2020 2020 2020 2020 2020 2020 2020 2020                     
 80aa3c6:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 80aa3d6:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 80aa3e6:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 80aa3f6:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 80aa406:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 80aa416:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 80aa426:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

080aa4a8 <__sf_fake_stdin>:
	...

080aa4c8 <__sf_fake_stdout>:
	...

080aa4e8 <__sf_fake_stderr>:
	...
 80aa508:	0043 4f50 4953 0058                         C.POSIX.

080aa510 <__month_lengths>:
 80aa510:	001f 0000 001c 0000 001f 0000 001e 0000     ................
 80aa520:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 80aa530:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 80aa540:	001f 0000 001d 0000 001f 0000 001e 0000     ................
 80aa550:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 80aa560:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 80aa570:	7325 2e25 642a 2500 2573 2e30 642a 2b00     %s%.*d.%s%0.*d.+
 80aa580:	2d00 2500 6432 2500 322e 2f64 2e25 6432     .-.%2d.%.2d/%.2d
 80aa590:	252f 322e 0064 2d59 6d25 252d 0064 2a2e     /%.2d.Y-%m-%d..*
 80aa5a0:	0075 2e25 6433 2500 6c6c 0064 2e25 6432     u.%.3d.%lld.%.2d
 80aa5b0:	253a 322e 3a64 2e25 6432 2500 302b 6c33     :%.2d:%.2d.%+03l
 80aa5c0:	2564 322e 646c 0000                         d%.2ld..

080aa5c8 <fpi.5342>:
 80aa5c8:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
 80aa5d8:	0000 0000 6e69 7469 0079 0000               ....inity...

080aa5e4 <fpinan.5378>:
 80aa5e4:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
 80aa5f4:	0000 0000                                   ....

080aa5f8 <tinytens>:
 80aa5f8:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
 80aa608:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
 80aa618:	6f43 64ac 0628 1168 434c 545f 4d49 0045     Co.d(.h.LC_TIME.
 80aa628:	614a 006e 6546 0062 614d 0072 7041 0072     Jan.Feb.Mar.Apr.
 80aa638:	614d 0079 754a 006e 754a 006c 7541 0067     May.Jun.Jul.Aug.
 80aa648:	6553 0070 634f 0074 6f4e 0076 6544 0063     Sep.Oct.Nov.Dec.
 80aa658:	614a 756e 7261 0079 6546 7262 6175 7972     January.February
 80aa668:	4d00 7261 6863 4100 7270 6c69 4a00 6e75     .March.April.Jun
 80aa678:	0065 754a 796c 4100 6775 7375 0074 6553     e.July.August.Se
 80aa688:	7470 6d65 6562 0072 634f 6f74 6562 0072     ptember.October.
 80aa698:	6f4e 6576 626d 7265 4400 6365 6d65 6562     November.Decembe
 80aa6a8:	0072 7553 006e 6f4d 006e 7554 0065 6557     r.Sun.Mon.Tue.We
 80aa6b8:	0064 6854 0075 7246 0069 6153 0074 7553     d.Thu.Fri.Sat.Su
 80aa6c8:	646e 7961 4d00 6e6f 6164 0079 7554 7365     nday.Monday.Tues
 80aa6d8:	6164 0079 6557 6e64 7365 6164 0079 6854     day.Wednesday.Th
 80aa6e8:	7275 6473 7961 4600 6972 6164 0079 6153     ursday.Friday.Sa
 80aa6f8:	7574 6472 7961 2500 3a48 4d25 253a 0053     turday.%H:%M:%S.
 80aa708:	6d25 252f 2f64 7925 2500 2061 6225 2520     %m/%d/%y.%a %b %
 80aa718:	2065 4825 253a 3a4d 5325 2520 0059 4d41     e %H:%M:%S %Y.AM
 80aa728:	5000 004d 6125 2520 2062 6525 2520 3a48     .PM.%a %b %e %H:
 80aa738:	4d25 253a 2053 5a25 2520 0059 4925 253a     %M:%S %Z %Y.%I:%
 80aa748:	3a4d 5325 2520 0070                         M:%S %p.

080aa750 <_C_time_locale>:
 80aa750:	a628 080a a62c 080a a630 080a a634 080a     (...,...0...4...
 80aa760:	a638 080a a63c 080a a640 080a a644 080a     8...<...@...D...
 80aa770:	a648 080a a64c 080a a650 080a a654 080a     H...L...P...T...
 80aa780:	a658 080a a660 080a a669 080a a66f 080a     X...`...i...o...
 80aa790:	a638 080a a675 080a a67a 080a a67f 080a     8...u...z.......
 80aa7a0:	a686 080a a690 080a a698 080a a6a1 080a     ................
 80aa7b0:	a6aa 080a a6ae 080a a6b2 080a a6b6 080a     ................
 80aa7c0:	a6ba 080a a6be 080a a6c2 080a a6c6 080a     ................
 80aa7d0:	a6cd 080a a6d4 080a a6dc 080a a6e6 080a     ................
 80aa7e0:	a6ef 080a a6f6 080a a6ff 080a a708 080a     ................
 80aa7f0:	a711 080a a726 080a a729 080a a72c 080a     ....&...)...,...
 80aa800:	a658 080a a660 080a a669 080a a66f 080a     X...`...i...o...
 80aa810:	a638 080a a675 080a a67a 080a a67f 080a     8...u...z.......
 80aa820:	a686 080a a690 080a a698 080a a6a1 080a     ................
 80aa830:	a142 080a a744 080a 9f53 080a 9f53 080a     B...D...S...S...
 80aa840:	9f53 080a 9f53 080a 9f53 080a 5a54 4700     S...S...S...TZ.G
 80aa850:	544d 2500 3031 5e5b 2d30 2c39 2d2b 255d     MT.%10[^0-9,+-]%
 80aa860:	006e 254d 7568 6e25 252e 7568 6e25 252e     n.M%hu%n.%hu%n.%
 80aa870:	7568 6e25 2f00 6825 2575 3a6e 6825 2575     hu%n./%hu%n:%hu%
 80aa880:	3a6e 6825 2575 006e                         n:%hu%n.

080aa888 <__mprec_tens>:
 80aa888:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
 80aa898:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
 80aa8a8:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
 80aa8b8:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
 80aa8c8:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
 80aa8d8:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
 80aa8e8:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
 80aa8f8:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
 80aa908:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
 80aa918:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
 80aa928:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
 80aa938:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
 80aa948:	9db4 79d9 7843 44ea                         ...yCx.D

080aa950 <__mprec_bigtens>:
 80aa950:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
 80aa960:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
 80aa970:	bf3c 7f73 4fdd 7515                         <.s..O.u

080aa978 <p05.5385>:
 80aa978:	0005 0000 0019 0000 007d 0000               ........}...

080aa984 <link_const_variable_data_end>:
 80aa984:	080a16c5 	.word	0x080a16c5
 80aa988:	080a215b 	.word	0x080a215b
 80aa98c:	080a2999 	.word	0x080a2999
 80aa990:	080a343f 	.word	0x080a343f
 80aa994:	080a3a4d 	.word	0x080a3a4d
 80aa998:	080a46b9 	.word	0x080a46b9
 80aa99c:	080a48d9 	.word	0x080a48d9
 80aa9a0:	080a4911 	.word	0x080a4911
 80aa9a4:	080a50ed 	.word	0x080a50ed
 80aa9a8:	080a51d1 	.word	0x080a51d1
 80aa9ac:	080a52dd 	.word	0x080a52dd
 80aa9b0:	080a53d1 	.word	0x080a53d1
 80aa9b4:	080a5455 	.word	0x080a5455
 80aa9b8:	080a5519 	.word	0x080a5519
 80aa9bc:	080a55dd 	.word	0x080a55dd
