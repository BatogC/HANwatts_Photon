
d:/UNI_S5/new_particle_code/2020_photon_code/target/1.5.2/photon/2020_photon_code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000a2f0  080a0020  080a0020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  080aa310  080aa310  0001a310  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  40024000  080aa318  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000000fc  20000000  080aa31c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000006a0  200000fc  200000fc  000400fc  2**2
                  ALLOC
  7 .module_info_suffix 00000028  080aa418  080aa418  0003a418  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  080aa440  080aa440  0003a440  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   000e8ed2  00000000  00000000  0003a444  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000132ab  00000000  00000000  00123316  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0001ff43  00000000  00000000  001365c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00002ac8  00000000  00000000  00156504  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00004710  00000000  00000000  00158fcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00029660  00000000  00000000  0015d6dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0002c6a1  00000000  00000000  00186d3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000b215b  00000000  00000000  001b33dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000e484  00000000  00000000  00265538  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0020:	4809      	ldr	r0, [pc, #36]	; (80a0048 <module_user_pre_init+0x28>)
 80a0022:	490a      	ldr	r1, [pc, #40]	; (80a004c <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0024:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0026:	4288      	cmp	r0, r1
 80a0028:	d005      	beq.n	80a0036 <module_user_pre_init+0x16>
 80a002a:	4a09      	ldr	r2, [pc, #36]	; (80a0050 <module_user_pre_init+0x30>)
 80a002c:	4282      	cmp	r2, r0
 80a002e:	d002      	beq.n	80a0036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a0030:	1a12      	subs	r2, r2, r0
 80a0032:	f006 fadb 	bl	80a65ec <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0036:	4807      	ldr	r0, [pc, #28]	; (80a0054 <module_user_pre_init+0x34>)
 80a0038:	4a07      	ldr	r2, [pc, #28]	; (80a0058 <module_user_pre_init+0x38>)
 80a003a:	2100      	movs	r1, #0
 80a003c:	1a12      	subs	r2, r2, r0
 80a003e:	f006 fae0 	bl	80a6602 <memset>
    return &link_heap_start;
}
 80a0042:	4806      	ldr	r0, [pc, #24]	; (80a005c <module_user_pre_init+0x3c>)
 80a0044:	bd08      	pop	{r3, pc}
 80a0046:	bf00      	nop
 80a0048:	20000000 	.word	0x20000000
 80a004c:	080aa31c 	.word	0x080aa31c
 80a0050:	200000fc 	.word	0x200000fc
 80a0054:	200000fc 	.word	0x200000fc
 80a0058:	2000079c 	.word	0x2000079c
 80a005c:	2000079c 	.word	0x2000079c

080a0060 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a0060:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a0062:	f004 f99d 	bl	80a43a0 <module_user_init_hook>
 80a0066:	4b07      	ldr	r3, [pc, #28]	; (80a0084 <module_user_init+0x24>)
 80a0068:	4c07      	ldr	r4, [pc, #28]	; (80a0088 <module_user_init+0x28>)
 80a006a:	461e      	mov	r6, r3
 80a006c:	1ae4      	subs	r4, r4, r3
 80a006e:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0070:	2500      	movs	r5, #0
 80a0072:	42a5      	cmp	r5, r4
 80a0074:	d004      	beq.n	80a0080 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0076:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a007a:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a007c:	3501      	adds	r5, #1
 80a007e:	e7f8      	b.n	80a0072 <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0080:	bd70      	pop	{r4, r5, r6, pc}
 80a0082:	bf00      	nop
 80a0084:	080aa2d4 	.word	0x080aa2d4
 80a0088:	080aa310 	.word	0x080aa310

080a008c <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a008c:	f001 bbb6 	b.w	80a17fc <setup>

080a0090 <module_user_loop>:
}

void module_user_loop() {
 80a0090:	b508      	push	{r3, lr}
    loop();
 80a0092:	f001 f96b 	bl	80a136c <loop>
    _post_loop();
}
 80a0096:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a009a:	f004 b943 	b.w	80a4324 <_post_loop>

080a009e <_Znwj>:
 80a009e:	f003 b8eb 	b.w	80a3278 <malloc>

080a00a2 <_Znaj>:
	return malloc(size);
}

void *operator new[](size_t size)
{
	return malloc(size);
 80a00a2:	f003 b8e9 	b.w	80a3278 <malloc>

080a00a6 <_ZdlPv>:
 80a00a6:	f003 b8ef 	b.w	80a3288 <free>

080a00aa <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
 80a00aa:	f003 b8ed 	b.w	80a3288 <free>

080a00ae <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00ae:	7800      	ldrb	r0, [r0, #0]
 80a00b0:	fab0 f080 	clz	r0, r0
 80a00b4:	0940      	lsrs	r0, r0, #5
 80a00b6:	4770      	bx	lr

080a00b8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00b8:	2301      	movs	r3, #1
 80a00ba:	7003      	strb	r3, [r0, #0]
 80a00bc:	4770      	bx	lr

080a00be <_ZN10CloudClass22update_string_variableEPKc18Spark_Data_TypeDefPKvPv>:

    static const void* update_string_variable(const char* name, Spark_Data_TypeDef type, const void* var, void* reserved)
    {
        const String* s = (const String*)var;
        return s->c_str();
    }
 80a00be:	6810      	ldr	r0, [r2, #0]
 80a00c0:	4770      	bx	lr

080a00c2 <_Z11resetOlimex6String>:
    while (*pointer++) {
      out.concat(in[index++]);
      }
}

int resetOlimex(String input) {
 80a00c2:	b508      	push	{r3, lr}
    digitalWrite(RESET_OLIMEX, LOW);
 80a00c4:	2100      	movs	r1, #0
 80a00c6:	2004      	movs	r0, #4
 80a00c8:	f004 fda5 	bl	80a4c16 <digitalWrite>
    delay(500);
 80a00cc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a00d0:	f004 f8c6 	bl	80a4260 <delay>
    digitalWrite(RESET_OLIMEX, HIGH);
 80a00d4:	2101      	movs	r1, #1
 80a00d6:	2004      	movs	r0, #4
 80a00d8:	f004 fd9d 	bl	80a4c16 <digitalWrite>
    return 1;
}
 80a00dc:	2001      	movs	r0, #1
 80a00de:	bd08      	pop	{r3, pc}

080a00e0 <_Z12progModeOlmx6String>:

int resetParticl(String input) {
    System.reset();
}

int progModeOlmx(String input) {
 80a00e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    digitalWrite(WAKEUP_OLIMEX, HIGH);
 80a00e2:	2101      	movs	r1, #1
 80a00e4:	2002      	movs	r0, #2
 80a00e6:	f004 fd96 	bl	80a4c16 <digitalWrite>
    delay(500);
 80a00ea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a00ee:	f004 f8b7 	bl	80a4260 <delay>
    resetOlimex("");
 80a00f2:	490b      	ldr	r1, [pc, #44]	; (80a0120 <_Z12progModeOlmx6String+0x40>)
 80a00f4:	4668      	mov	r0, sp
 80a00f6:	f003 fcd8 	bl	80a3aaa <_ZN6StringC1EPK19__FlashStringHelper>
 80a00fa:	4668      	mov	r0, sp
 80a00fc:	f7ff ffe1 	bl	80a00c2 <_Z11resetOlimex6String>
 80a0100:	4668      	mov	r0, sp
 80a0102:	f003 fc8b 	bl	80a3a1c <_ZN6StringD1Ev>
    delay(500);
 80a0106:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a010a:	f004 f8a9 	bl	80a4260 <delay>
    digitalWrite(WAKEUP_OLIMEX, LOW);
 80a010e:	2100      	movs	r1, #0
 80a0110:	2002      	movs	r0, #2
 80a0112:	f004 fd80 	bl	80a4c16 <digitalWrite>
    return 1;
}
 80a0116:	2001      	movs	r0, #1
 80a0118:	b005      	add	sp, #20
 80a011a:	f85d fb04 	ldr.w	pc, [sp], #4
 80a011e:	bf00      	nop
 80a0120:	080a98e2 	.word	0x080a98e2

080a0124 <_Z10WifiSignal6String>:
    delay(500);
    digitalWrite(RESET_OLIMEX, HIGH);
    return 1;
}

int WifiSignal(String input) {
 80a0124:	b500      	push	{lr}
 80a0126:	b08b      	sub	sp, #44	; 0x2c
    return WiFi.RSSI();
 80a0128:	4904      	ldr	r1, [pc, #16]	; (80a013c <_Z10WifiSignal6String+0x18>)
 80a012a:	a801      	add	r0, sp, #4
 80a012c:	f004 fc76 	bl	80a4a1c <_ZN5spark9WiFiClass4RSSIEv>
 80a0130:	a801      	add	r0, sp, #4
 80a0132:	f004 fc51 	bl	80a49d8 <_ZNK10WiFiSignalcvaEv>
}
 80a0136:	b00b      	add	sp, #44	; 0x2c
 80a0138:	f85d fb04 	ldr.w	pc, [sp], #4
 80a013c:	2000058c 	.word	0x2000058c

080a0140 <_Z12resetParticl6String>:

int resetParticl(String input) {
 80a0140:	b508      	push	{r3, lr}
    System.reset();
 80a0142:	f003 f923 	bl	80a338c <_ZN11SystemClass5resetEv>
}
 80a0146:	bd08      	pop	{r3, pc}

080a0148 <_Z10switchTest6String>:
    }
    
    return number;
}

int switchTest(String valueString) {
 80a0148:	b538      	push	{r3, r4, r5, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 80a014a:	490a      	ldr	r1, [pc, #40]	; (80a0174 <_Z10switchTest6String+0x2c>)
 80a014c:	4605      	mov	r5, r0
 80a014e:	f003 fdc7 	bl	80a3ce0 <_ZNK6String6equalsEPKc>
    if (valueString == "true") {
 80a0152:	4604      	mov	r4, r0
 80a0154:	b118      	cbz	r0, 80a015e <_Z10switchTest6String+0x16>
        TESTCASE = true;
 80a0156:	4b08      	ldr	r3, [pc, #32]	; (80a0178 <_Z10switchTest6String+0x30>)
 80a0158:	2001      	movs	r0, #1
 80a015a:	7018      	strb	r0, [r3, #0]
        return 1;
 80a015c:	bd38      	pop	{r3, r4, r5, pc}
 80a015e:	4907      	ldr	r1, [pc, #28]	; (80a017c <_Z10switchTest6String+0x34>)
 80a0160:	4628      	mov	r0, r5
 80a0162:	f003 fdbd 	bl	80a3ce0 <_ZNK6String6equalsEPKc>
    }
    if (valueString == "false") {
 80a0166:	b118      	cbz	r0, 80a0170 <_Z10switchTest6String+0x28>
        TESTCASE = false;
 80a0168:	4b03      	ldr	r3, [pc, #12]	; (80a0178 <_Z10switchTest6String+0x30>)
        return 0;
 80a016a:	4620      	mov	r0, r4
    if (valueString == "true") {
        TESTCASE = true;
        return 1;
    }
    if (valueString == "false") {
        TESTCASE = false;
 80a016c:	701c      	strb	r4, [r3, #0]
        return 0;
 80a016e:	bd38      	pop	{r3, r4, r5, pc}
    }
}
 80a0170:	bd38      	pop	{r3, r4, r5, pc}
 80a0172:	bf00      	nop
 80a0174:	080a9438 	.word	0x080a9438
 80a0178:	20000478 	.word	0x20000478
 80a017c:	080a943d 	.word	0x080a943d

080a0180 <_Z12maxCurrentC16String>:

int maxCurrentC1(String setPointStr) {
 80a0180:	b570      	push	{r4, r5, r6, lr}
 80a0182:	b08a      	sub	sp, #40	; 0x28
    unsigned int setPoint = setPointStr.toInt();
 80a0184:	f003 fdf5 	bl	80a3d72 <_ZNK6String5toIntEv>
 80a0188:	4605      	mov	r5, r0
    byte olimexMessage[4] = {0xFE,1,setPoint,0xFF};
 80a018a:	23fe      	movs	r3, #254	; 0xfe
 80a018c:	f88d 3004 	strb.w	r3, [sp, #4]
 80a0190:	23ff      	movs	r3, #255	; 0xff
 80a0192:	f88d 3007 	strb.w	r3, [sp, #7]
    if (!TESTCASE) {
 80a0196:	4b18      	ldr	r3, [pc, #96]	; (80a01f8 <_Z12maxCurrentC16String+0x78>)
    }
}

int maxCurrentC1(String setPointStr) {
    unsigned int setPoint = setPointStr.toInt();
    byte olimexMessage[4] = {0xFE,1,setPoint,0xFF};
 80a0198:	2001      	movs	r0, #1
    if (!TESTCASE) {
 80a019a:	781c      	ldrb	r4, [r3, #0]
    }
}

int maxCurrentC1(String setPointStr) {
    unsigned int setPoint = setPointStr.toInt();
    byte olimexMessage[4] = {0xFE,1,setPoint,0xFF};
 80a019c:	f88d 0005 	strb.w	r0, [sp, #5]
 80a01a0:	f88d 5006 	strb.w	r5, [sp, #6]
    if (!TESTCASE) {
 80a01a4:	bb2c      	cbnz	r4, 80a01f2 <_Z12maxCurrentC16String+0x72>
        Serial1.write(olimexMessage,4);
 80a01a6:	f004 fae5 	bl	80a4774 <_Z22__fetch_global_Serial1v>
 80a01aa:	6803      	ldr	r3, [r0, #0]
 80a01ac:	2204      	movs	r2, #4
 80a01ae:	68db      	ldr	r3, [r3, #12]
 80a01b0:	eb0d 0102 	add.w	r1, sp, r2
 80a01b4:	4798      	blx	r3
        DEBUGPORT.println("maxCurrentC1>\tNew setpoint set at "+String(setPoint)+" Amps.");
 80a01b6:	f004 fa27 	bl	80a4608 <_Z16_fetch_usbserialv>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a01ba:	4910      	ldr	r1, [pc, #64]	; (80a01fc <_Z12maxCurrentC16String+0x7c>)
 80a01bc:	4606      	mov	r6, r0
 80a01be:	a806      	add	r0, sp, #24
 80a01c0:	f003 fc73 	bl	80a3aaa <_ZN6StringC1EPK19__FlashStringHelper>
 80a01c4:	220a      	movs	r2, #10
 80a01c6:	4629      	mov	r1, r5
 80a01c8:	a802      	add	r0, sp, #8
 80a01ca:	f003 fcf6 	bl	80a3bba <_ZN6StringC1Ejh>
 80a01ce:	a902      	add	r1, sp, #8
 80a01d0:	a806      	add	r0, sp, #24
 80a01d2:	f003 fd67 	bl	80a3ca4 <_ZplRK15StringSumHelperRK6String>
 80a01d6:	490a      	ldr	r1, [pc, #40]	; (80a0200 <_Z12maxCurrentC16String+0x80>)
 80a01d8:	f003 fd70 	bl	80a3cbc <_ZplRK15StringSumHelperPKc>
 80a01dc:	6801      	ldr	r1, [r0, #0]
 80a01de:	4630      	mov	r0, r6
 80a01e0:	f003 fe0f 	bl	80a3e02 <_ZN5Print7printlnEPKc>
 80a01e4:	a802      	add	r0, sp, #8
 80a01e6:	f003 fc19 	bl	80a3a1c <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80a01ea:	a806      	add	r0, sp, #24
 80a01ec:	f003 fc16 	bl	80a3a1c <_ZN6StringD1Ev>
        return 0;
 80a01f0:	4620      	mov	r0, r4
    }
    return 1;
}
 80a01f2:	b00a      	add	sp, #40	; 0x28
 80a01f4:	bd70      	pop	{r4, r5, r6, pc}
 80a01f6:	bf00      	nop
 80a01f8:	20000478 	.word	0x20000478
 80a01fc:	080a9443 	.word	0x080a9443
 80a0200:	080a9466 	.word	0x080a9466

080a0204 <_Z12maxCurrentC26String>:

int maxCurrentC2(String setPointStr) {
 80a0204:	b570      	push	{r4, r5, r6, lr}
 80a0206:	b08a      	sub	sp, #40	; 0x28
    unsigned int setPoint = setPointStr.toInt();
 80a0208:	f003 fdb3 	bl	80a3d72 <_ZNK6String5toIntEv>
    byte olimexMessage[4] = {0xFE,2,setPoint,0xFF};
 80a020c:	23fe      	movs	r3, #254	; 0xfe
 80a020e:	f88d 3004 	strb.w	r3, [sp, #4]
 80a0212:	2302      	movs	r3, #2
 80a0214:	f88d 3005 	strb.w	r3, [sp, #5]
 80a0218:	23ff      	movs	r3, #255	; 0xff
 80a021a:	f88d 3007 	strb.w	r3, [sp, #7]
    if (!TESTCASE) {
 80a021e:	4b18      	ldr	r3, [pc, #96]	; (80a0280 <_Z12maxCurrentC26String+0x7c>)
    }
    return 1;
}

int maxCurrentC2(String setPointStr) {
    unsigned int setPoint = setPointStr.toInt();
 80a0220:	4605      	mov	r5, r0
    byte olimexMessage[4] = {0xFE,2,setPoint,0xFF};
    if (!TESTCASE) {
 80a0222:	781c      	ldrb	r4, [r3, #0]
    return 1;
}

int maxCurrentC2(String setPointStr) {
    unsigned int setPoint = setPointStr.toInt();
    byte olimexMessage[4] = {0xFE,2,setPoint,0xFF};
 80a0224:	f88d 0006 	strb.w	r0, [sp, #6]
    if (!TESTCASE) {
 80a0228:	bb34      	cbnz	r4, 80a0278 <_Z12maxCurrentC26String+0x74>
        Serial1.write(olimexMessage,4);
 80a022a:	f004 faa3 	bl	80a4774 <_Z22__fetch_global_Serial1v>
 80a022e:	6803      	ldr	r3, [r0, #0]
 80a0230:	2204      	movs	r2, #4
 80a0232:	68db      	ldr	r3, [r3, #12]
 80a0234:	eb0d 0102 	add.w	r1, sp, r2
 80a0238:	4798      	blx	r3
        DEBUGPORT.println("maxCurrentC2>\tNew setpoint set at "+String(setPoint)+" Amps.");
 80a023a:	f004 f9e5 	bl	80a4608 <_Z16_fetch_usbserialv>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a023e:	4911      	ldr	r1, [pc, #68]	; (80a0284 <_Z12maxCurrentC26String+0x80>)
 80a0240:	4606      	mov	r6, r0
 80a0242:	a806      	add	r0, sp, #24
 80a0244:	f003 fc31 	bl	80a3aaa <_ZN6StringC1EPK19__FlashStringHelper>
 80a0248:	220a      	movs	r2, #10
 80a024a:	4629      	mov	r1, r5
 80a024c:	a802      	add	r0, sp, #8
 80a024e:	f003 fcb4 	bl	80a3bba <_ZN6StringC1Ejh>
 80a0252:	a902      	add	r1, sp, #8
 80a0254:	a806      	add	r0, sp, #24
 80a0256:	f003 fd25 	bl	80a3ca4 <_ZplRK15StringSumHelperRK6String>
 80a025a:	490b      	ldr	r1, [pc, #44]	; (80a0288 <_Z12maxCurrentC26String+0x84>)
 80a025c:	f003 fd2e 	bl	80a3cbc <_ZplRK15StringSumHelperPKc>
 80a0260:	6801      	ldr	r1, [r0, #0]
 80a0262:	4630      	mov	r0, r6
 80a0264:	f003 fdcd 	bl	80a3e02 <_ZN5Print7printlnEPKc>
 80a0268:	a802      	add	r0, sp, #8
 80a026a:	f003 fbd7 	bl	80a3a1c <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80a026e:	a806      	add	r0, sp, #24
 80a0270:	f003 fbd4 	bl	80a3a1c <_ZN6StringD1Ev>
        return 0;
 80a0274:	4620      	mov	r0, r4
 80a0276:	e000      	b.n	80a027a <_Z12maxCurrentC26String+0x76>
    }
    return 1;
 80a0278:	2001      	movs	r0, #1
}
 80a027a:	b00a      	add	sp, #40	; 0x28
 80a027c:	bd70      	pop	{r4, r5, r6, pc}
 80a027e:	bf00      	nop
 80a0280:	20000478 	.word	0x20000478
 80a0284:	080a946d 	.word	0x080a946d
 80a0288:	080a9466 	.word	0x080a9466

080a028c <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  ~SPIClass() = default;
 80a028c:	b510      	push	{r4, lr}
 80a028e:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a0290:	6880      	ldr	r0, [r0, #8]
 80a0292:	b108      	cbz	r0, 80a0298 <_ZN8SPIClassD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
 80a0294:	f002 fde2 	bl	80a2e5c <os_mutex_recursive_destroy>
 80a0298:	4620      	mov	r0, r4
 80a029a:	bd10      	pop	{r4, pc}

080a029c <_ZN16JsonWriterStaticILj512EED1Ev>:
 * variable.
 *
 * @param BUFFER_SIZE The size of the buffer to reserve.
 */
template <size_t BUFFER_SIZE>
class JsonWriterStatic : public JsonWriter {
 80a029c:	b510      	push	{r4, lr}
 80a029e:	4604      	mov	r4, r0
 80a02a0:	4b02      	ldr	r3, [pc, #8]	; (80a02ac <_ZN16JsonWriterStaticILj512EED1Ev+0x10>)
 80a02a2:	6003      	str	r3, [r0, #0]
 80a02a4:	f002 fc34 	bl	80a2b10 <_ZN10JsonWriterD1Ev>
 80a02a8:	4620      	mov	r0, r4
 80a02aa:	bd10      	pop	{r4, pc}
 80a02ac:	080a9430 	.word	0x080a9430

080a02b0 <_ZN16JsonWriterStaticILj512EED0Ev>:
 80a02b0:	b510      	push	{r4, lr}
 80a02b2:	4604      	mov	r4, r0
 80a02b4:	f7ff fff2 	bl	80a029c <_ZN16JsonWriterStaticILj512EED1Ev>
 80a02b8:	4620      	mov	r0, r4
 80a02ba:	f44f 710c 	mov.w	r1, #560	; 0x230
 80a02be:	f004 fd3d 	bl	80a4d3c <_ZdlPvj>
 80a02c2:	4620      	mov	r0, r4
 80a02c4:	bd10      	pop	{r4, pc}
	...

080a02c8 <_ZN10CloudClass9_variableIcEEbPKT_PK6StringRK17CloudVariableTypeIPKcvE.isra.7>:
        static_assert(sizeof(T)==0, "\n\nUse Particle.variable(\"name\", myVar, STRING); without & in front of myVar\n\n");
        return false;
    }

    template<typename T>
    static inline bool _variable(const T *varKey, const String *userVar, const CloudVariableTypeString& userVarType)
 80a02c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    {
        spark_variable_t extra = {};
 80a02ca:	2300      	movs	r3, #0
 80a02cc:	9301      	str	r3, [sp, #4]
 80a02ce:	9303      	str	r3, [sp, #12]
        extra.size = sizeof(extra);
 80a02d0:	230c      	movs	r3, #12
 80a02d2:	f8ad 3004 	strh.w	r3, [sp, #4]
        extra.update = update_string_variable;
 80a02d6:	4b04      	ldr	r3, [pc, #16]	; (80a02e8 <_ZN10CloudClass9_variableIcEEbPKT_PK6StringRK17CloudVariableTypeIPKcvE.isra.7+0x20>)
        return spark_variable(varKey, userVar, CloudVariableTypeString::TYPE_ID, &extra);
 80a02d8:	2204      	movs	r2, #4
    template<typename T>
    static inline bool _variable(const T *varKey, const String *userVar, const CloudVariableTypeString& userVarType)
    {
        spark_variable_t extra = {};
        extra.size = sizeof(extra);
        extra.update = update_string_variable;
 80a02da:	9302      	str	r3, [sp, #8]
        return spark_variable(varKey, userVar, CloudVariableTypeString::TYPE_ID, &extra);
 80a02dc:	ab01      	add	r3, sp, #4
 80a02de:	f002 ff93 	bl	80a3208 <spark_variable>
    }
 80a02e2:	b005      	add	sp, #20
 80a02e4:	f85d fb04 	ldr.w	pc, [sp], #4
 80a02e8:	080a00bf 	.word	0x080a00bf

080a02ec <_Z8initRFID6String>:
			break;
		}
	}
}

int initRFID(String input) {
 80a02ec:	b538      	push	{r3, r4, r5, lr}
    //additional config for debugging RFID readers
    pinMode(SS_PIN_CHARGER1, OUTPUT);
 80a02ee:	2101      	movs	r1, #1
 80a02f0:	200b      	movs	r0, #11
 80a02f2:	f004 fc7f 	bl	80a4bf4 <pinMode>
	digitalWrite(SS_PIN_CHARGER1, HIGH);
 80a02f6:	2101      	movs	r1, #1
 80a02f8:	200b      	movs	r0, #11
 80a02fa:	f004 fc8c 	bl	80a4c16 <digitalWrite>

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a02fe:	4d20      	ldr	r5, [pc, #128]	; (80a0380 <_Z8initRFID6String+0x94>)
	pinMode(SS_PIN_CHARGER2, OUTPUT);
 80a0300:	2101      	movs	r1, #1
 80a0302:	200c      	movs	r0, #12
 80a0304:	f004 fc76 	bl	80a4bf4 <pinMode>
	digitalWrite(SS_PIN_CHARGER2, HIGH);
 80a0308:	2101      	movs	r1, #1
 80a030a:	200c      	movs	r0, #12
 80a030c:	f004 fc83 	bl	80a4c16 <digitalWrite>
 80a0310:	6829      	ldr	r1, [r5, #0]
 80a0312:	f011 0401 	ands.w	r4, r1, #1
 80a0316:	d10f      	bne.n	80a0338 <_Z8initRFID6String+0x4c>
 80a0318:	4628      	mov	r0, r5
 80a031a:	f7ff fec8 	bl	80a00ae <__cxa_guard_acquire>
 80a031e:	b158      	cbz	r0, 80a0338 <_Z8initRFID6String+0x4c>
 80a0320:	4621      	mov	r1, r4
 80a0322:	4818      	ldr	r0, [pc, #96]	; (80a0384 <_Z8initRFID6String+0x98>)
 80a0324:	f002 fff6 	bl	80a3314 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a0328:	4628      	mov	r0, r5
 80a032a:	f7ff fec5 	bl	80a00b8 <__cxa_guard_release>
 80a032e:	4a16      	ldr	r2, [pc, #88]	; (80a0388 <_Z8initRFID6String+0x9c>)
 80a0330:	4916      	ldr	r1, [pc, #88]	; (80a038c <_Z8initRFID6String+0xa0>)
 80a0332:	4814      	ldr	r0, [pc, #80]	; (80a0384 <_Z8initRFID6String+0x98>)
 80a0334:	f004 fcf4 	bl	80a4d20 <__aeabi_atexit>

    void begin() {
        instance().begin();
    }
    void begin(uint16_t ss_pin) {
        instance().begin(ss_pin);
 80a0338:	2100      	movs	r1, #0
 80a033a:	4812      	ldr	r0, [pc, #72]	; (80a0384 <_Z8initRFID6String+0x98>)
 80a033c:	f002 fff9 	bl	80a3332 <_ZN8SPIClass5beginEt>
  
    SPI.begin(D0);      // Initiate  SPI bus
    //Particle.process();
    delay(50);
 80a0340:	2032      	movs	r0, #50	; 0x32
 80a0342:	f003 ff8d 	bl	80a4260 <delay>
    mfrc522_Charger1.PCD_Init();   // Initiate MFRC522
 80a0346:	4812      	ldr	r0, [pc, #72]	; (80a0390 <_Z8initRFID6String+0xa4>)
 80a0348:	f001 fc9e 	bl	80a1c88 <_ZN7MFRC5228PCD_InitEv>
    delay(500);
 80a034c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a0350:	f003 ff86 	bl	80a4260 <delay>
    mfrc522_Charger2.PCD_Init();   // Initiate MFRC522
 80a0354:	480f      	ldr	r0, [pc, #60]	; (80a0394 <_Z8initRFID6String+0xa8>)
 80a0356:	f001 fc97 	bl	80a1c88 <_ZN7MFRC5228PCD_InitEv>
    ////mfrc522_Charger1.PCD_SetAntennaGain(mfrc522.RxGain_max);
    mfrc522_Charger1.PCD_SetAntennaGain(mfrc522_Charger1.RxGain_max);
 80a035a:	2170      	movs	r1, #112	; 0x70
 80a035c:	480c      	ldr	r0, [pc, #48]	; (80a0390 <_Z8initRFID6String+0xa4>)
 80a035e:	f001 fcce 	bl	80a1cfe <_ZN7MFRC52218PCD_SetAntennaGainEh>
    mfrc522_Charger2.PCD_SetAntennaGain(mfrc522_Charger2.RxGain_max);
 80a0362:	2170      	movs	r1, #112	; 0x70
 80a0364:	480b      	ldr	r0, [pc, #44]	; (80a0394 <_Z8initRFID6String+0xa8>)
 80a0366:	f001 fcca 	bl	80a1cfe <_ZN7MFRC52218PCD_SetAntennaGainEh>
    
    DEBUGPORT.println("Approximate your card to the reader...");
 80a036a:	f004 f94d 	bl	80a4608 <_Z16_fetch_usbserialv>
 80a036e:	490a      	ldr	r1, [pc, #40]	; (80a0398 <_Z8initRFID6String+0xac>)
 80a0370:	f003 fd47 	bl	80a3e02 <_ZN5Print7printlnEPKc>
    DEBUGPORT.println();    
 80a0374:	f004 f948 	bl	80a4608 <_Z16_fetch_usbserialv>
 80a0378:	f003 fd37 	bl	80a3dea <_ZN5Print7printlnEv>
    return 1;
}
 80a037c:	2001      	movs	r0, #1
 80a037e:	bd38      	pop	{r3, r4, r5, pc}
 80a0380:	20000100 	.word	0x20000100
 80a0384:	20000104 	.word	0x20000104
 80a0388:	200000fc 	.word	0x200000fc
 80a038c:	080a028d 	.word	0x080a028d
 80a0390:	2000048c 	.word	0x2000048c
 80a0394:	200002b4 	.word	0x200002b4
 80a0398:	080a9490 	.word	0x080a9490

080a039c <_ZN10CloudClass7processEv>:
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
 80a039c:	b508      	push	{r3, lr}
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a039e:	f002 fd35 	bl	80a2e0c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a03a2:	4b03      	ldr	r3, [pc, #12]	; (80a03b0 <_ZN10CloudClass7processEv+0x14>)
 80a03a4:	6018      	str	r0, [r3, #0]
    		application_checkin();
    		spark_process();
    }
 80a03a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
 80a03aa:	f002 bf3d 	b.w	80a3228 <spark_process>
 80a03ae:	bf00      	nop
 80a03b0:	2000059c 	.word	0x2000059c

080a03b4 <_Z18bytesArrToFloatArrPcjPfj>:

    return output;
}

bool bytesArrToFloatArr(char * Arr, unsigned int ArrLen, float * OutputArr, unsigned int FloatLen)
{
 80a03b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a03b6:	0889      	lsrs	r1, r1, #2
    //FloatTriplet TriOutput;
    for(int i=0; (i<FloatLen) && (4*i+3 < ArrLen); i++)
 80a03b8:	2400      	movs	r4, #0
 80a03ba:	429c      	cmp	r4, r3
 80a03bc:	d018      	beq.n	80a03f0 <_Z18bytesArrToFloatArrPcjPfj+0x3c>
 80a03be:	428c      	cmp	r4, r1
 80a03c0:	f100 0004 	add.w	r0, r0, #4
 80a03c4:	d014      	beq.n	80a03f0 <_Z18bytesArrToFloatArrPcjPfj+0x3c>
    {
        float output;

        *((unsigned char *)(&output) + 3) = (unsigned char) Arr[4*i+0];
 80a03c6:	f810 5c04 	ldrb.w	r5, [r0, #-4]
 80a03ca:	f88d 5007 	strb.w	r5, [sp, #7]
        *((unsigned char *)(&output) + 2) = Arr[4*i+1];
 80a03ce:	f810 5c03 	ldrb.w	r5, [r0, #-3]
 80a03d2:	f88d 5006 	strb.w	r5, [sp, #6]
        *((unsigned char *)(&output) + 1) = Arr[4*i+2];
 80a03d6:	f810 5c02 	ldrb.w	r5, [r0, #-2]
 80a03da:	f88d 5005 	strb.w	r5, [sp, #5]
        *((unsigned char *)(&output) + 0) = Arr[4*i+3];
 80a03de:	f810 5c01 	ldrb.w	r5, [r0, #-1]
 80a03e2:	f88d 5004 	strb.w	r5, [sp, #4]
        
        OutputArr[i] = output;
 80a03e6:	9d01      	ldr	r5, [sp, #4]
 80a03e8:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
}

bool bytesArrToFloatArr(char * Arr, unsigned int ArrLen, float * OutputArr, unsigned int FloatLen)
{
    //FloatTriplet TriOutput;
    for(int i=0; (i<FloatLen) && (4*i+3 < ArrLen); i++)
 80a03ec:	3401      	adds	r4, #1
 80a03ee:	e7e4      	b.n	80a03ba <_Z18bytesArrToFloatArrPcjPfj+0x6>
        
        OutputArr[i] = output;
    }

    return true;
}
 80a03f0:	2001      	movs	r0, #1
 80a03f2:	b003      	add	sp, #12
 80a03f4:	bd30      	pop	{r4, r5, pc}
	...

080a03f8 <_Z11stringParsePci>:
    }

    return TriOutput;
}
*/
int stringParse(char * buf, int buflen){
 80a03f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a03fc:	4680      	mov	r8, r0
 80a03fe:	b09f      	sub	sp, #124	; 0x7c
 80a0400:	460e      	mov	r6, r1
  String cmdValue;
 80a0402:	a806      	add	r0, sp, #24
 80a0404:	49ba      	ldr	r1, [pc, #744]	; (80a06f0 <_Z11stringParsePci+0x2f8>)
 80a0406:	f003 fb50 	bl	80a3aaa <_ZN6StringC1EPK19__FlashStringHelper>
 80a040a:	4647      	mov	r7, r8
 80a040c:	f108 0402 	add.w	r4, r8, #2
  int Charger=0;
 80a0410:	2500      	movs	r5, #0
  for (int i=0; i<buflen; i++){
 80a0412:	ebc8 0307 	rsb	r3, r8, r7
 80a0416:	429e      	cmp	r6, r3
 80a0418:	f340 81ea 	ble.w	80a07f0 <_Z11stringParsePci+0x3f8>
    if(buf[i]==0x0F && i+2>=buflen) //error check?
 80a041c:	783b      	ldrb	r3, [r7, #0]
 80a041e:	2b0f      	cmp	r3, #15
 80a0420:	d108      	bne.n	80a0434 <_Z11stringParsePci+0x3c>
 80a0422:	ebc8 0304 	rsb	r3, r8, r4
 80a0426:	429e      	cmp	r6, r3
 80a0428:	dc04      	bgt.n	80a0434 <_Z11stringParsePci+0x3c>
    {
      DEBUGPORT.println("E");
 80a042a:	f004 f8ed 	bl	80a4608 <_Z16_fetch_usbserialv>
 80a042e:	49b1      	ldr	r1, [pc, #708]	; (80a06f4 <_Z11stringParsePci+0x2fc>)
 80a0430:	f003 fce7 	bl	80a3e02 <_ZN5Print7printlnEPKc>
    }
    if((buf[i]==0x0F || buf[i]==0x0E) && i+2<buflen) //we detect a command-character and the next two characters exists
 80a0434:	f817 3b01 	ldrb.w	r3, [r7], #1
 80a0438:	f1a3 020e 	sub.w	r2, r3, #14
 80a043c:	2a01      	cmp	r2, #1
 80a043e:	f200 81d5 	bhi.w	80a07ec <_Z11stringParsePci+0x3f4>
 80a0442:	ebc8 0204 	rsb	r2, r8, r4
 80a0446:	4296      	cmp	r6, r2
 80a0448:	f340 81d0 	ble.w	80a07ec <_Z11stringParsePci+0x3f4>
      {
        Charger=1;  
      }
      else
      {
        Charger=2;
 80a044c:	2b0f      	cmp	r3, #15
 80a044e:	bf0c      	ite	eq
 80a0450:	2501      	moveq	r5, #1
 80a0452:	2502      	movne	r5, #2
      }
      DEBUGPORT.print("Charger "+String(Charger)+": ");
 80a0454:	f004 f8d8 	bl	80a4608 <_Z16_fetch_usbserialv>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a0458:	49a7      	ldr	r1, [pc, #668]	; (80a06f8 <_Z11stringParsePci+0x300>)
 80a045a:	4681      	mov	r9, r0
 80a045c:	a81a      	add	r0, sp, #104	; 0x68
 80a045e:	f003 fb24 	bl	80a3aaa <_ZN6StringC1EPK19__FlashStringHelper>
 80a0462:	220a      	movs	r2, #10
 80a0464:	4629      	mov	r1, r5
 80a0466:	a816      	add	r0, sp, #88	; 0x58
 80a0468:	f003 fb94 	bl	80a3b94 <_ZN6StringC1Eih>
 80a046c:	a916      	add	r1, sp, #88	; 0x58
 80a046e:	a81a      	add	r0, sp, #104	; 0x68
 80a0470:	f003 fc18 	bl	80a3ca4 <_ZplRK15StringSumHelperRK6String>
 80a0474:	49a1      	ldr	r1, [pc, #644]	; (80a06fc <_Z11stringParsePci+0x304>)
 80a0476:	f003 fc21 	bl	80a3cbc <_ZplRK15StringSumHelperPKc>
 80a047a:	6801      	ldr	r1, [r0, #0]
 80a047c:	4648      	mov	r0, r9
 80a047e:	f003 fcad 	bl	80a3ddc <_ZN5Print5printEPKc>
 80a0482:	a816      	add	r0, sp, #88	; 0x58
 80a0484:	f003 faca 	bl	80a3a1c <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80a0488:	a81a      	add	r0, sp, #104	; 0x68
 80a048a:	f003 fac7 	bl	80a3a1c <_ZN6StringD1Ev>
      String measurements;
 80a048e:	4998      	ldr	r1, [pc, #608]	; (80a06f0 <_Z11stringParsePci+0x2f8>)
 80a0490:	a80a      	add	r0, sp, #40	; 0x28
 80a0492:	f003 fb0a 	bl	80a3aaa <_ZN6StringC1EPK19__FlashStringHelper>
      switch (buf[i+1])
 80a0496:	783b      	ldrb	r3, [r7, #0]
 80a0498:	3b01      	subs	r3, #1
 80a049a:	2b05      	cmp	r3, #5
 80a049c:	f200 81a3 	bhi.w	80a07e6 <_Z11stringParsePci+0x3ee>
 80a04a0:	e8df f013 	tbh	[pc, r3, lsl #1]
 80a04a4:	00150006 	.word	0x00150006
 80a04a8:	00ab0086 	.word	0x00ab0086
 80a04ac:	015200fe 	.word	0x015200fe
      {
        case 1:
          //Phase Voltage
          if(buflen>4)
 80a04b0:	2e04      	cmp	r6, #4
 80a04b2:	dd08      	ble.n	80a04c6 <_Z11stringParsePci+0xce>
          {
              //Voltage[Charger-1] = bytesToFloat(buf[i+2], buf[i+3], buf[i+4], buf[i+5]);
              float VoltageArr[3];
              if(bytesArrToFloatArr(&buf[i+2], 12, VoltageArr,3))
 80a04b4:	2303      	movs	r3, #3
 80a04b6:	aa03      	add	r2, sp, #12
 80a04b8:	210c      	movs	r1, #12
 80a04ba:	4620      	mov	r0, r4
 80a04bc:	f7ff ff7a 	bl	80a03b4 <_Z18bytesArrToFloatArrPcjPfj>
 80a04c0:	f8df 926c 	ldr.w	r9, [pc, #620]	; 80a0730 <_Z11stringParsePci+0x338>
 80a04c4:	e14b      	b.n	80a075e <_Z11stringParsePci+0x366>
              }
              DEBUGPORT.print("Voltage: "+String(PhaseVoltage[Charger-1][0],4)+" "+String(PhaseVoltage[Charger-1][1],4)+" "+String(PhaseVoltage[Charger-1][2],4));
          }
          else
          {
              DEBUGPORT.print("did not receive enough voltage data");
 80a04c6:	f004 f89f 	bl	80a4608 <_Z16_fetch_usbserialv>
 80a04ca:	498d      	ldr	r1, [pc, #564]	; (80a0700 <_Z11stringParsePci+0x308>)
 80a04cc:	e10d      	b.n	80a06ea <_Z11stringParsePci+0x2f2>
          }
          break;
        case 2:
          //Current
          if(buflen>12) //(buflen>4)
 80a04ce:	2e0c      	cmp	r6, #12
 80a04d0:	dd6a      	ble.n	80a05a8 <_Z11stringParsePci+0x1b0>
          {
              //Current[Charger-1] = bytesToFloat(buf[i+2], buf[i+3], buf[i+4], buf[i+5]);
              float CurrentArr[3];
              if(bytesArrToFloatArr(&buf[i+2], 12, Current[Charger-1],3))
 80a04d2:	210c      	movs	r1, #12
 80a04d4:	f105 3aff 	add.w	sl, r5, #4294967295
 80a04d8:	fb01 fb0a 	mul.w	fp, r1, sl
 80a04dc:	4b89      	ldr	r3, [pc, #548]	; (80a0704 <_Z11stringParsePci+0x30c>)
 80a04de:	4620      	mov	r0, r4
 80a04e0:	eb03 090b 	add.w	r9, r3, fp
 80a04e4:	464a      	mov	r2, r9
 80a04e6:	2303      	movs	r3, #3
 80a04e8:	f7ff ff64 	bl	80a03b4 <_Z18bytesArrToFloatArrPcjPfj>
              {
                //Current[Charger-1] = (CurrentArr[0]+CurrentArr[1]+CurrentArr[2])/3;  
                //Current[Charger-1] = {CurrentArr[0],CurrentArr[1],CurrentArr[2]}
              }
              DEBUGPORT.print("Current: ");
 80a04ec:	f004 f88c 	bl	80a4608 <_Z16_fetch_usbserialv>
 80a04f0:	4985      	ldr	r1, [pc, #532]	; (80a0708 <_Z11stringParsePci+0x310>)
 80a04f2:	f003 fc73 	bl	80a3ddc <_ZN5Print5printEPKc>
              DEBUGPORT.print(Current[Charger-1][0],4);DEBUGPORT.print(" ");
 80a04f6:	f004 f887 	bl	80a4608 <_Z16_fetch_usbserialv>
 80a04fa:	4b82      	ldr	r3, [pc, #520]	; (80a0704 <_Z11stringParsePci+0x30c>)
 80a04fc:	2204      	movs	r2, #4
 80a04fe:	f853 100b 	ldr.w	r1, [r3, fp]
 80a0502:	f003 fd61 	bl	80a3fc8 <_ZN5Print5printEfi>
 80a0506:	f004 f87f 	bl	80a4608 <_Z16_fetch_usbserialv>
 80a050a:	4980      	ldr	r1, [pc, #512]	; (80a070c <_Z11stringParsePci+0x314>)
 80a050c:	f003 fc66 	bl	80a3ddc <_ZN5Print5printEPKc>
              DEBUGPORT.print(Current[Charger-1][1],4);DEBUGPORT.print(" ");
 80a0510:	f004 f87a 	bl	80a4608 <_Z16_fetch_usbserialv>
 80a0514:	2204      	movs	r2, #4
 80a0516:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80a051a:	f003 fd55 	bl	80a3fc8 <_ZN5Print5printEfi>
 80a051e:	f004 f873 	bl	80a4608 <_Z16_fetch_usbserialv>
 80a0522:	497a      	ldr	r1, [pc, #488]	; (80a070c <_Z11stringParsePci+0x314>)
 80a0524:	f003 fc5a 	bl	80a3ddc <_ZN5Print5printEPKc>
              DEBUGPORT.println(Current[Charger-1][2],4);
 80a0528:	f004 f86e 	bl	80a4608 <_Z16_fetch_usbserialv>
 80a052c:	2204      	movs	r2, #4
 80a052e:	f8d9 1008 	ldr.w	r1, [r9, #8]
 80a0532:	f003 fd66 	bl	80a4002 <_ZN5Print7printlnEfi>
              if((Current[Charger-1][0]+Current[Charger-1][1]+Current[Charger-1][2])<1)
 80a0536:	4b73      	ldr	r3, [pc, #460]	; (80a0704 <_Z11stringParsePci+0x30c>)
 80a0538:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80a053c:	f853 000b 	ldr.w	r0, [r3, fp]
 80a0540:	f005 fa5e 	bl	80a5a00 <__addsf3>
 80a0544:	f8d9 1008 	ldr.w	r1, [r9, #8]
 80a0548:	f005 fa5a 	bl	80a5a00 <__addsf3>
 80a054c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80a0550:	f005 fcfc 	bl	80a5f4c <__aeabi_fcmplt>
 80a0554:	f8df b1dc 	ldr.w	fp, [pc, #476]	; 80a0734 <_Z11stringParsePci+0x33c>
 80a0558:	b128      	cbz	r0, 80a0566 <_Z11stringParsePci+0x16e>
              {
                numberOfZeroReadings[Charger-1]++;
 80a055a:	f85b 302a 	ldr.w	r3, [fp, sl, lsl #2]
 80a055e:	3301      	adds	r3, #1
 80a0560:	f84b 302a 	str.w	r3, [fp, sl, lsl #2]
 80a0564:	e001      	b.n	80a056a <_Z11stringParsePci+0x172>
              }
              else
              {
                  numberOfZeroReadings[Charger-1]=0;
 80a0566:	f84b 002a 	str.w	r0, [fp, sl, lsl #2]
 80a056a:	4a69      	ldr	r2, [pc, #420]	; (80a0710 <_Z11stringParsePci+0x318>)
      {
        Charger=1;  
      }
      else
      {
        Charger=2;
 80a056c:	2312      	movs	r3, #18
              {
                  numberOfZeroReadings[Charger-1]=0;
              }
              for(int i=18;i>=0;i--)
              {
                   CurrentList[i+1]= CurrentList[i];
 80a056e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
              }
              else
              {
                  numberOfZeroReadings[Charger-1]=0;
              }
              for(int i=18;i>=0;i--)
 80a0572:	f113 33ff 	adds.w	r3, r3, #4294967295
              {
                   CurrentList[i+1]= CurrentList[i];
 80a0576:	6051      	str	r1, [r2, #4]
              }
              else
              {
                  numberOfZeroReadings[Charger-1]=0;
              }
              for(int i=18;i>=0;i--)
 80a0578:	d2f9      	bcs.n	80a056e <_Z11stringParsePci+0x176>
              {
                   CurrentList[i+1]= CurrentList[i];
              }
              CurrentList[0]=(Current[0][0]+Current[0][1]+Current[0][2]);//numberOfZeroReadings[0];
 80a057a:	4b62      	ldr	r3, [pc, #392]	; (80a0704 <_Z11stringParsePci+0x30c>)
 80a057c:	f8df a1b8 	ldr.w	sl, [pc, #440]	; 80a0738 <_Z11stringParsePci+0x340>
 80a0580:	f8d3 9008 	ldr.w	r9, [r3, #8]
 80a0584:	6859      	ldr	r1, [r3, #4]
 80a0586:	6818      	ldr	r0, [r3, #0]
 80a0588:	f005 fa3a 	bl	80a5a00 <__addsf3>
 80a058c:	4649      	mov	r1, r9
 80a058e:	f005 fa37 	bl	80a5a00 <__addsf3>
 80a0592:	f8ca 0000 	str.w	r0, [sl]
              CurrentList[1]=numberOfZeroReadings[0];
 80a0596:	f8db 0000 	ldr.w	r0, [fp]
 80a059a:	f005 fae5 	bl	80a5b68 <__aeabi_i2f>
              CurrentList[2]=Current[0][2];
 80a059e:	f8ca 9008 	str.w	r9, [sl, #8]
              for(int i=18;i>=0;i--)
              {
                   CurrentList[i+1]= CurrentList[i];
              }
              CurrentList[0]=(Current[0][0]+Current[0][1]+Current[0][2]);//numberOfZeroReadings[0];
              CurrentList[1]=numberOfZeroReadings[0];
 80a05a2:	f8ca 0004 	str.w	r0, [sl, #4]
 80a05a6:	e11e      	b.n	80a07e6 <_Z11stringParsePci+0x3ee>
              CurrentList[2]=Current[0][2];
          }
          else
          {
              DEBUGPORT.print("did not receive enough current data");
 80a05a8:	f004 f82e 	bl	80a4608 <_Z16_fetch_usbserialv>
 80a05ac:	4959      	ldr	r1, [pc, #356]	; (80a0714 <_Z11stringParsePci+0x31c>)
 80a05ae:	e09c      	b.n	80a06ea <_Z11stringParsePci+0x2f2>
          }
          break;  
        case 3:
          //Frequency
          if(buflen>4)
 80a05b0:	2e04      	cmp	r6, #4
 80a05b2:	dd1e      	ble.n	80a05f2 <_Z11stringParsePci+0x1fa>
          {
              Frequency[0] = bytesToFloat(buf[i+2], buf[i+3], buf[i+4], buf[i+5]);
 80a05b4:	78a2      	ldrb	r2, [r4, #2]
 80a05b6:	7861      	ldrb	r1, [r4, #1]
 80a05b8:	78e3      	ldrb	r3, [r4, #3]

float bytesToFloat(unsigned char  b0, unsigned char  b1, unsigned char  b2, unsigned char  b3)
{
    float output;

    *((unsigned char *)(&output) + 3) = b0;
 80a05ba:	7820      	ldrb	r0, [r4, #0]
    *((unsigned char *)(&output) + 2) = b1;
    *((unsigned char *)(&output) + 1) = b2;
 80a05bc:	f88d 2069 	strb.w	r2, [sp, #105]	; 0x69
float bytesToFloat(unsigned char  b0, unsigned char  b1, unsigned char  b2, unsigned char  b3)
{
    float output;

    *((unsigned char *)(&output) + 3) = b0;
    *((unsigned char *)(&output) + 2) = b1;
 80a05c0:	f88d 106a 	strb.w	r1, [sp, #106]	; 0x6a

float bytesToFloat(unsigned char  b0, unsigned char  b1, unsigned char  b2, unsigned char  b3)
{
    float output;

    *((unsigned char *)(&output) + 3) = b0;
 80a05c4:	f88d 006b 	strb.w	r0, [sp, #107]	; 0x6b
    *((unsigned char *)(&output) + 2) = b1;
    *((unsigned char *)(&output) + 1) = b2;
    *((unsigned char *)(&output) + 0) = b3;
 80a05c8:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68

    return output;
 80a05cc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
          break;  
        case 3:
          //Frequency
          if(buflen>4)
          {
              Frequency[0] = bytesToFloat(buf[i+2], buf[i+3], buf[i+4], buf[i+5]);
 80a05ce:	f8df 916c 	ldr.w	r9, [pc, #364]	; 80a073c <_Z11stringParsePci+0x344>
 80a05d2:	f8c9 3000 	str.w	r3, [r9]
              Frequency[1]=Frequency[0];
 80a05d6:	f8c9 3004 	str.w	r3, [r9, #4]
              DEBUGPORT.print("Frequency: ");
 80a05da:	f004 f815 	bl	80a4608 <_Z16_fetch_usbserialv>
 80a05de:	494e      	ldr	r1, [pc, #312]	; (80a0718 <_Z11stringParsePci+0x320>)
 80a05e0:	f003 fbfc 	bl	80a3ddc <_ZN5Print5printEPKc>
              DEBUGPORT.print(Frequency[Charger-1],4);
 80a05e4:	f004 f810 	bl	80a4608 <_Z16_fetch_usbserialv>
 80a05e8:	1e6b      	subs	r3, r5, #1
 80a05ea:	2204      	movs	r2, #4
 80a05ec:	f859 1023 	ldr.w	r1, [r9, r3, lsl #2]
 80a05f0:	e075      	b.n	80a06de <_Z11stringParsePci+0x2e6>
          }
          else
          {
              DEBUGPORT.print("did not receive enough frequency data");
 80a05f2:	f004 f809 	bl	80a4608 <_Z16_fetch_usbserialv>
 80a05f6:	4949      	ldr	r1, [pc, #292]	; (80a071c <_Z11stringParsePci+0x324>)
 80a05f8:	e077      	b.n	80a06ea <_Z11stringParsePci+0x2f2>
          }
          break;
        case 4:
          //Power
          if(buflen>4)
 80a05fa:	2e04      	cmp	r6, #4
 80a05fc:	dd4c      	ble.n	80a0698 <_Z11stringParsePci+0x2a0>
          {
              //Power[Charger-1] = bytesToFloat(buf[i+2], buf[i+3], buf[i+4], buf[i+5]);
              float PowerArr[3];
              if(bytesArrToFloatArr(&buf[i+2], 12, Power[Charger-1],3))
 80a05fe:	210c      	movs	r1, #12
 80a0600:	f105 39ff 	add.w	r9, r5, #4294967295
 80a0604:	fb01 f909 	mul.w	r9, r1, r9
 80a0608:	f8df b134 	ldr.w	fp, [pc, #308]	; 80a0740 <_Z11stringParsePci+0x348>
 80a060c:	2303      	movs	r3, #3
 80a060e:	eb0b 0a09 	add.w	sl, fp, r9
 80a0612:	4652      	mov	r2, sl
 80a0614:	4620      	mov	r0, r4
 80a0616:	f7ff fecd 	bl	80a03b4 <_Z18bytesArrToFloatArrPcjPfj>
              {
                //Power[Charger-1] = {PowerArr[0],PowerArr[1],PowerArr[2]}
              }
              DEBUGPORT.print("Power: "+String(Power[Charger-1][0],4)+" "+String(Power[Charger-1][1],4)+" "+String(Power[Charger-1][2],4));              
 80a061a:	f003 fff5 	bl	80a4608 <_Z16_fetch_usbserialv>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a061e:	4940      	ldr	r1, [pc, #256]	; (80a0720 <_Z11stringParsePci+0x328>)
 80a0620:	9001      	str	r0, [sp, #4]
 80a0622:	a812      	add	r0, sp, #72	; 0x48
 80a0624:	f003 fa41 	bl	80a3aaa <_ZN6StringC1EPK19__FlashStringHelper>
 80a0628:	2204      	movs	r2, #4
 80a062a:	f85b 1009 	ldr.w	r1, [fp, r9]
 80a062e:	a80e      	add	r0, sp, #56	; 0x38
 80a0630:	f003 faea 	bl	80a3c08 <_ZN6StringC1Efi>
 80a0634:	a90e      	add	r1, sp, #56	; 0x38
 80a0636:	a812      	add	r0, sp, #72	; 0x48
 80a0638:	f003 fb34 	bl	80a3ca4 <_ZplRK15StringSumHelperRK6String>
 80a063c:	4933      	ldr	r1, [pc, #204]	; (80a070c <_Z11stringParsePci+0x314>)
 80a063e:	f003 fb3d 	bl	80a3cbc <_ZplRK15StringSumHelperPKc>
 80a0642:	4681      	mov	r9, r0
 80a0644:	2204      	movs	r2, #4
 80a0646:	f8da 1004 	ldr.w	r1, [sl, #4]
 80a064a:	a816      	add	r0, sp, #88	; 0x58
 80a064c:	f003 fadc 	bl	80a3c08 <_ZN6StringC1Efi>
 80a0650:	a916      	add	r1, sp, #88	; 0x58
 80a0652:	4648      	mov	r0, r9
 80a0654:	f003 fb26 	bl	80a3ca4 <_ZplRK15StringSumHelperRK6String>
 80a0658:	492c      	ldr	r1, [pc, #176]	; (80a070c <_Z11stringParsePci+0x314>)
 80a065a:	f003 fb2f 	bl	80a3cbc <_ZplRK15StringSumHelperPKc>
 80a065e:	4681      	mov	r9, r0
 80a0660:	2204      	movs	r2, #4
 80a0662:	f8da 1008 	ldr.w	r1, [sl, #8]
 80a0666:	a81a      	add	r0, sp, #104	; 0x68
 80a0668:	f003 face 	bl	80a3c08 <_ZN6StringC1Efi>
 80a066c:	a91a      	add	r1, sp, #104	; 0x68
 80a066e:	4648      	mov	r0, r9
 80a0670:	f003 fb18 	bl	80a3ca4 <_ZplRK15StringSumHelperRK6String>
 80a0674:	9b01      	ldr	r3, [sp, #4]
 80a0676:	6801      	ldr	r1, [r0, #0]
 80a0678:	4618      	mov	r0, r3
 80a067a:	f003 fbaf 	bl	80a3ddc <_ZN5Print5printEPKc>
 80a067e:	a81a      	add	r0, sp, #104	; 0x68
 80a0680:	f003 f9cc 	bl	80a3a1c <_ZN6StringD1Ev>
 80a0684:	a816      	add	r0, sp, #88	; 0x58
 80a0686:	f003 f9c9 	bl	80a3a1c <_ZN6StringD1Ev>
 80a068a:	a80e      	add	r0, sp, #56	; 0x38
 80a068c:	f003 f9c6 	bl	80a3a1c <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80a0690:	a812      	add	r0, sp, #72	; 0x48
 80a0692:	f003 f9c3 	bl	80a3a1c <_ZN6StringD1Ev>
 80a0696:	e0a6      	b.n	80a07e6 <_Z11stringParsePci+0x3ee>
              //DEBUGPORT.print("Power: ");
              //DEBUGPORT.print(Power[Charger-1],4);
          }
          else
          {
              DEBUGPORT.print("did not receive enough power data");
 80a0698:	f003 ffb6 	bl	80a4608 <_Z16_fetch_usbserialv>
 80a069c:	4921      	ldr	r1, [pc, #132]	; (80a0724 <_Z11stringParsePci+0x32c>)
 80a069e:	e024      	b.n	80a06ea <_Z11stringParsePci+0x2f2>
          }
          break;
        case 5:
          //Energy
          if(buflen>4)
 80a06a0:	2e04      	cmp	r6, #4
 80a06a2:	dd1f      	ble.n	80a06e4 <_Z11stringParsePci+0x2ec>
          {
              Energy[Charger-1] = bytesToFloat(buf[i+2], buf[i+3], buf[i+4], buf[i+5]);
 80a06a4:	78a2      	ldrb	r2, [r4, #2]
 80a06a6:	7861      	ldrb	r1, [r4, #1]
 80a06a8:	78e3      	ldrb	r3, [r4, #3]

float bytesToFloat(unsigned char  b0, unsigned char  b1, unsigned char  b2, unsigned char  b3)
{
    float output;

    *((unsigned char *)(&output) + 3) = b0;
 80a06aa:	7820      	ldrb	r0, [r4, #0]
    *((unsigned char *)(&output) + 2) = b1;
    *((unsigned char *)(&output) + 1) = b2;
 80a06ac:	f88d 2069 	strb.w	r2, [sp, #105]	; 0x69
float bytesToFloat(unsigned char  b0, unsigned char  b1, unsigned char  b2, unsigned char  b3)
{
    float output;

    *((unsigned char *)(&output) + 3) = b0;
    *((unsigned char *)(&output) + 2) = b1;
 80a06b0:	f88d 106a 	strb.w	r1, [sp, #106]	; 0x6a

float bytesToFloat(unsigned char  b0, unsigned char  b1, unsigned char  b2, unsigned char  b3)
{
    float output;

    *((unsigned char *)(&output) + 3) = b0;
 80a06b4:	f88d 006b 	strb.w	r0, [sp, #107]	; 0x6b
    *((unsigned char *)(&output) + 2) = b1;
    *((unsigned char *)(&output) + 1) = b2;
    *((unsigned char *)(&output) + 0) = b3;
 80a06b8:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
          break;
        case 5:
          //Energy
          if(buflen>4)
          {
              Energy[Charger-1] = bytesToFloat(buf[i+2], buf[i+3], buf[i+4], buf[i+5]);
 80a06bc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80a06be:	f8df 9084 	ldr.w	r9, [pc, #132]	; 80a0744 <_Z11stringParsePci+0x34c>
 80a06c2:	f105 3aff 	add.w	sl, r5, #4294967295
 80a06c6:	f849 302a 	str.w	r3, [r9, sl, lsl #2]
              DEBUGPORT.print("Energy: ");
 80a06ca:	f003 ff9d 	bl	80a4608 <_Z16_fetch_usbserialv>
 80a06ce:	4916      	ldr	r1, [pc, #88]	; (80a0728 <_Z11stringParsePci+0x330>)
 80a06d0:	f003 fb84 	bl	80a3ddc <_ZN5Print5printEPKc>
              DEBUGPORT.print(Energy[Charger-1],4);
 80a06d4:	f003 ff98 	bl	80a4608 <_Z16_fetch_usbserialv>
 80a06d8:	f859 102a 	ldr.w	r1, [r9, sl, lsl #2]
 80a06dc:	2204      	movs	r2, #4
 80a06de:	f003 fc73 	bl	80a3fc8 <_ZN5Print5printEfi>
 80a06e2:	e080      	b.n	80a07e6 <_Z11stringParsePci+0x3ee>
          }
          else
          {
              DEBUGPORT.print("did not receive enough energy data");
 80a06e4:	f003 ff90 	bl	80a4608 <_Z16_fetch_usbserialv>
 80a06e8:	4910      	ldr	r1, [pc, #64]	; (80a072c <_Z11stringParsePci+0x334>)
 80a06ea:	f003 fb77 	bl	80a3ddc <_ZN5Print5printEPKc>
 80a06ee:	e07a      	b.n	80a07e6 <_Z11stringParsePci+0x3ee>
 80a06f0:	080a98e2 	.word	0x080a98e2
 80a06f4:	080a9f76 	.word	0x080a9f76
 80a06f8:	080a94b7 	.word	0x080a94b7
 80a06fc:	080a9af1 	.word	0x080a9af1
 80a0700:	080a94ca 	.word	0x080a94ca
 80a0704:	20000364 	.word	0x20000364
 80a0708:	080a94ee 	.word	0x080a94ee
 80a070c:	080a98e4 	.word	0x080a98e4
 80a0710:	200004fc 	.word	0x200004fc
 80a0714:	080a94f8 	.word	0x080a94f8
 80a0718:	080a951c 	.word	0x080a951c
 80a071c:	080a9528 	.word	0x080a9528
 80a0720:	080a954e 	.word	0x080a954e
 80a0724:	080a9556 	.word	0x080a9556
 80a0728:	080a9578 	.word	0x080a9578
 80a072c:	080a9581 	.word	0x080a9581
 80a0730:	20000284 	.word	0x20000284
 80a0734:	20000110 	.word	0x20000110
 80a0738:	200004b0 	.word	0x200004b0
 80a073c:	200002ac 	.word	0x200002ac
 80a0740:	2000037c 	.word	0x2000037c
 80a0744:	20000470 	.word	0x20000470
          }
          break;
        case 6:
          //Line Voltage
          if(buflen>4)
 80a0748:	2e04      	cmp	r6, #4
 80a074a:	f77f aebc 	ble.w	80a04c6 <_Z11stringParsePci+0xce>
          {
              //Voltage[Charger-1] = bytesToFloat(buf[i+2], buf[i+3], buf[i+4], buf[i+5]);
              float VoltageArr[3];
              if(bytesArrToFloatArr(&buf[i+2], 12, VoltageArr,3))
 80a074e:	2303      	movs	r3, #3
 80a0750:	aa03      	add	r2, sp, #12
 80a0752:	210c      	movs	r1, #12
 80a0754:	4620      	mov	r0, r4
 80a0756:	f7ff fe2d 	bl	80a03b4 <_Z18bytesArrToFloatArrPcjPfj>
 80a075a:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 80a0808 <_Z11stringParsePci+0x410>
 80a075e:	2800      	cmp	r0, #0
 80a0760:	d134      	bne.n	80a07cc <_Z11stringParsePci+0x3d4>
                {
                    LineVoltage[Charger-1][i]=VoltageArr[i];
                }
                //Voltage[Charger-1] = {VoltageArr[0],VoltageArr[1],VoltageArr[2]};
              }
              DEBUGPORT.print("Voltage: "+String(LineVoltage[Charger-1][0],4)+" "+String(LineVoltage[Charger-1][1],4)+" "+String(LineVoltage[Charger-1][2],4));
 80a0762:	f003 ff51 	bl	80a4608 <_Z16_fetch_usbserialv>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a0766:	4926      	ldr	r1, [pc, #152]	; (80a0800 <_Z11stringParsePci+0x408>)
 80a0768:	4683      	mov	fp, r0
 80a076a:	a812      	add	r0, sp, #72	; 0x48
 80a076c:	f003 f99d 	bl	80a3aaa <_ZN6StringC1EPK19__FlashStringHelper>
 80a0770:	1e6a      	subs	r2, r5, #1
 80a0772:	230c      	movs	r3, #12
 80a0774:	4353      	muls	r3, r2
 80a0776:	a80e      	add	r0, sp, #56	; 0x38
 80a0778:	f859 1003 	ldr.w	r1, [r9, r3]
 80a077c:	2204      	movs	r2, #4
 80a077e:	eb09 0a03 	add.w	sl, r9, r3
 80a0782:	f003 fa41 	bl	80a3c08 <_ZN6StringC1Efi>
 80a0786:	a90e      	add	r1, sp, #56	; 0x38
 80a0788:	a812      	add	r0, sp, #72	; 0x48
 80a078a:	f003 fa8b 	bl	80a3ca4 <_ZplRK15StringSumHelperRK6String>
 80a078e:	491d      	ldr	r1, [pc, #116]	; (80a0804 <_Z11stringParsePci+0x40c>)
 80a0790:	f003 fa94 	bl	80a3cbc <_ZplRK15StringSumHelperPKc>
 80a0794:	4681      	mov	r9, r0
 80a0796:	2204      	movs	r2, #4
 80a0798:	f8da 1004 	ldr.w	r1, [sl, #4]
 80a079c:	a816      	add	r0, sp, #88	; 0x58
 80a079e:	f003 fa33 	bl	80a3c08 <_ZN6StringC1Efi>
 80a07a2:	a916      	add	r1, sp, #88	; 0x58
 80a07a4:	4648      	mov	r0, r9
 80a07a6:	f003 fa7d 	bl	80a3ca4 <_ZplRK15StringSumHelperRK6String>
 80a07aa:	4916      	ldr	r1, [pc, #88]	; (80a0804 <_Z11stringParsePci+0x40c>)
 80a07ac:	f003 fa86 	bl	80a3cbc <_ZplRK15StringSumHelperPKc>
 80a07b0:	4681      	mov	r9, r0
 80a07b2:	2204      	movs	r2, #4
 80a07b4:	f8da 1008 	ldr.w	r1, [sl, #8]
 80a07b8:	a81a      	add	r0, sp, #104	; 0x68
 80a07ba:	f003 fa25 	bl	80a3c08 <_ZN6StringC1Efi>
 80a07be:	a91a      	add	r1, sp, #104	; 0x68
 80a07c0:	4648      	mov	r0, r9
 80a07c2:	f003 fa6f 	bl	80a3ca4 <_ZplRK15StringSumHelperRK6String>
 80a07c6:	6801      	ldr	r1, [r0, #0]
 80a07c8:	4658      	mov	r0, fp
 80a07ca:	e756      	b.n	80a067a <_Z11stringParsePci+0x282>
              if(bytesArrToFloatArr(&buf[i+2], 12, VoltageArr,3))
              {
                //Current[Charger-1] = (CurrentArr[0]+CurrentArr[1]+CurrentArr[2])/3;  
                for(int i=0;i<3;i++)
                {
                    LineVoltage[Charger-1][i]=VoltageArr[i];
 80a07cc:	1e6a      	subs	r2, r5, #1
 80a07ce:	230c      	movs	r3, #12
 80a07d0:	4353      	muls	r3, r2
 80a07d2:	9903      	ldr	r1, [sp, #12]
 80a07d4:	eb09 0203 	add.w	r2, r9, r3
 80a07d8:	f849 1003 	str.w	r1, [r9, r3]
 80a07dc:	9b04      	ldr	r3, [sp, #16]
 80a07de:	6053      	str	r3, [r2, #4]
 80a07e0:	9b05      	ldr	r3, [sp, #20]
 80a07e2:	6093      	str	r3, [r2, #8]
 80a07e4:	e7bd      	b.n	80a0762 <_Z11stringParsePci+0x36a>
      else
      {
        Charger=2;
      }
      DEBUGPORT.print("Charger "+String(Charger)+": ");
      String measurements;
 80a07e6:	a80a      	add	r0, sp, #40	; 0x28
 80a07e8:	f003 f918 	bl	80a3a1c <_ZN6StringD1Ev>
 80a07ec:	3401      	adds	r4, #1
}
*/
int stringParse(char * buf, int buflen){
  String cmdValue;
  int Charger=0;
  for (int i=0; i<buflen; i++){
 80a07ee:	e610      	b.n	80a0412 <_Z11stringParsePci+0x1a>

    return TriOutput;
}
*/
int stringParse(char * buf, int buflen){
  String cmdValue;
 80a07f0:	a806      	add	r0, sp, #24
 80a07f2:	f003 f913 	bl	80a3a1c <_ZN6StringD1Ev>
  }
  //Test only
  //Current[0][0] = 3.0;
  //Current[1][0] = 4.0;
  return Charger;
}
 80a07f6:	4628      	mov	r0, r5
 80a07f8:	b01f      	add	sp, #124	; 0x7c
 80a07fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a07fe:	bf00      	nop
 80a0800:	080a94c0 	.word	0x080a94c0
 80a0804:	080a98e4 	.word	0x080a98e4
 80a0808:	2000034c 	.word	0x2000034c

080a080c <_Z16readSerialOlimexv>:


int readSerialOlimex() {
 80a080c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  for(int k=0;k<10;k++){
  if (Serial1.available()) {
    input = Serial1.read();
    DEBUGPORT.print(input,HEX);
    DEBUGPORT.print(" ");
    if (bufpos<BUFSIZE)
 80a0810:	4c20      	ldr	r4, [pc, #128]	; (80a0894 <_Z16readSerialOlimexv+0x88>)

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a0812:	f002 fafb 	bl	80a2e0c <HAL_Timer_Get_Milli_Seconds>
 80a0816:	4627      	mov	r7, r4
 80a0818:	250a      	movs	r5, #10
     char input;
  if (millis()>(lastUpload+RSTTIMEOUT)){
   // softReset();
  }
  for(int k=0;k<10;k++){
  if (Serial1.available()) {
 80a081a:	f003 ffab 	bl	80a4774 <_Z22__fetch_global_Serial1v>
 80a081e:	6803      	ldr	r3, [r0, #0]
 80a0820:	691b      	ldr	r3, [r3, #16]
 80a0822:	4798      	blx	r3
 80a0824:	b388      	cbz	r0, 80a088a <_Z16readSerialOlimexv+0x7e>
    input = Serial1.read();
 80a0826:	f003 ffa5 	bl	80a4774 <_Z22__fetch_global_Serial1v>
 80a082a:	6803      	ldr	r3, [r0, #0]
 80a082c:	695b      	ldr	r3, [r3, #20]
 80a082e:	4798      	blx	r3
 80a0830:	b2c6      	uxtb	r6, r0
    DEBUGPORT.print(input,HEX);
 80a0832:	f003 fee9 	bl	80a4608 <_Z16_fetch_usbserialv>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
 80a0836:	2210      	movs	r2, #16
 80a0838:	4631      	mov	r1, r6
 80a083a:	f003 faec 	bl	80a3e16 <_ZN5Print11printNumberEmh>
    DEBUGPORT.print(" ");
 80a083e:	f003 fee3 	bl	80a4608 <_Z16_fetch_usbserialv>
 80a0842:	4915      	ldr	r1, [pc, #84]	; (80a0898 <_Z16readSerialOlimexv+0x8c>)
 80a0844:	f003 faca 	bl	80a3ddc <_ZN5Print5printEPKc>
    if (bufpos<BUFSIZE)
 80a0848:	6823      	ldr	r3, [r4, #0]
 80a084a:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 80a084e:	da04      	bge.n	80a085a <_Z16readSerialOlimexv+0x4e>
    {
        buff[bufpos] = input;
 80a0850:	4a12      	ldr	r2, [pc, #72]	; (80a089c <_Z16readSerialOlimexv+0x90>)
 80a0852:	54d6      	strb	r6, [r2, r3]
        bufpos++;    
 80a0854:	3301      	adds	r3, #1
 80a0856:	6023      	str	r3, [r4, #0]
 80a0858:	e006      	b.n	80a0868 <_Z16readSerialOlimexv+0x5c>
    }
    else
    {
        bufpos=0;
 80a085a:	2300      	movs	r3, #0
 80a085c:	6023      	str	r3, [r4, #0]
        DEBUGPORT.print("loopread>\tSerial Read Error!");
 80a085e:	f003 fed3 	bl	80a4608 <_Z16_fetch_usbserialv>
 80a0862:	490f      	ldr	r1, [pc, #60]	; (80a08a0 <_Z16readSerialOlimexv+0x94>)
 80a0864:	f003 faba 	bl	80a3ddc <_ZN5Print5printEPKc>
    }
    if (input == '\n') { // we hebben een regel binnen, tot aan \n   //  0x0A
 80a0868:	2e0a      	cmp	r6, #10
 80a086a:	d10e      	bne.n	80a088a <_Z16readSerialOlimexv+0x7e>
      Charger = stringParse(buff, bufpos);
 80a086c:	6839      	ldr	r1, [r7, #0]
 80a086e:	480b      	ldr	r0, [pc, #44]	; (80a089c <_Z16readSerialOlimexv+0x90>)
 80a0870:	f7ff fdc2 	bl	80a03f8 <_Z11stringParsePci>
      //Maak de buffer leeg
      for (int i=0; i<BUFSIZE; i++)
 80a0874:	2300      	movs	r3, #0
    {
        bufpos=0;
        DEBUGPORT.print("loopread>\tSerial Read Error!");
    }
    if (input == '\n') { // we hebben een regel binnen, tot aan \n   //  0x0A
      Charger = stringParse(buff, bufpos);
 80a0876:	4680      	mov	r8, r0
      //Maak de buffer leeg
      for (int i=0; i<BUFSIZE; i++)
      { buff[i] = 0;}
 80a0878:	4619      	mov	r1, r3
 80a087a:	4a08      	ldr	r2, [pc, #32]	; (80a089c <_Z16readSerialOlimexv+0x90>)
 80a087c:	5499      	strb	r1, [r3, r2]
        DEBUGPORT.print("loopread>\tSerial Read Error!");
    }
    if (input == '\n') { // we hebben een regel binnen, tot aan \n   //  0x0A
      Charger = stringParse(buff, bufpos);
      //Maak de buffer leeg
      for (int i=0; i<BUFSIZE; i++)
 80a087e:	3301      	adds	r3, #1
 80a0880:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 80a0884:	d1fa      	bne.n	80a087c <_Z16readSerialOlimexv+0x70>
      { buff[i] = 0;}
      bufpos = 0;
 80a0886:	2300      	movs	r3, #0
 80a0888:	603b      	str	r3, [r7, #0]
    int Charger;
     char input;
  if (millis()>(lastUpload+RSTTIMEOUT)){
   // softReset();
  }
  for(int k=0;k<10;k++){
 80a088a:	3d01      	subs	r5, #1
 80a088c:	d1c5      	bne.n	80a081a <_Z16readSerialOlimexv+0xe>
      bufpos = 0;
    }
  }
}
return Charger;
 80a088e:	4640      	mov	r0, r8
 80a0890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a0894:	200004ac 	.word	0x200004ac
 80a0898:	080a98e4 	.word	0x080a98e4
 80a089c:	20000118 	.word	0x20000118
 80a08a0:	080a95a4 	.word	0x080a95a4

080a08a4 <_Z12charToStringPKcR6String>:
EMeter EMeterData[NUMBEROFMETERS];
String EVListStr="";
String currentStr="";
unsigned int nextTime[2] = {30000,30000};    // Next time to contact the server

void charToString(const char in[], String &out) {
 80a08a4:	b570      	push	{r4, r5, r6, lr}
 80a08a6:	460e      	mov	r6, r1
 80a08a8:	4604      	mov	r4, r0
    byte index = 0;
    const char *pointer = in;
    out = "";
 80a08aa:	4908      	ldr	r1, [pc, #32]	; (80a08cc <_Z12charToStringPKcR6String+0x28>)
 80a08ac:	4630      	mov	r0, r6
 80a08ae:	f003 f94e 	bl	80a3b4e <_ZN6StringaSEPKc>
String currentStr="";
unsigned int nextTime[2] = {30000,30000};    // Next time to contact the server

void charToString(const char in[], String &out) {
    byte index = 0;
    const char *pointer = in;
 80a08b2:	4625      	mov	r5, r4
 80a08b4:	1b2b      	subs	r3, r5, r4
    out = "";

    while (*pointer++) {
 80a08b6:	f815 2b01 	ldrb.w	r2, [r5], #1
 80a08ba:	b2db      	uxtb	r3, r3
 80a08bc:	b122      	cbz	r2, 80a08c8 <_Z12charToStringPKcR6String+0x24>
      out.concat(in[index++]);
 80a08be:	5ce1      	ldrb	r1, [r4, r3]
 80a08c0:	4630      	mov	r0, r6
 80a08c2:	f003 f9e2 	bl	80a3c8a <_ZN6String6concatEc>
void charToString(const char in[], String &out) {
    byte index = 0;
    const char *pointer = in;
    out = "";

    while (*pointer++) {
 80a08c6:	e7f5      	b.n	80a08b4 <_Z12charToStringPKcR6String+0x10>
 80a08c8:	bd70      	pop	{r4, r5, r6, pc}
 80a08ca:	bf00      	nop
 80a08cc:	080a98e2 	.word	0x080a98e2

080a08d0 <_Z13activeChargerv>:
    delay(100);
    digitalWrite(D7,LOW);
    return;
}

int activeCharger() {
 80a08d0:	b570      	push	{r4, r5, r6, lr}
    int number = 0;
    for (int i=0; i<3; i++) {
        if (Current[0][i] != 0.0) {
 80a08d2:	4d13      	ldr	r5, [pc, #76]	; (80a0920 <_Z13activeChargerv+0x50>)
 80a08d4:	2100      	movs	r1, #0
 80a08d6:	6828      	ldr	r0, [r5, #0]
 80a08d8:	f005 fb2e 	bl	80a5f38 <__aeabi_fcmpeq>
 80a08dc:	b160      	cbz	r0, 80a08f8 <_Z13activeChargerv+0x28>
 80a08de:	2100      	movs	r1, #0
 80a08e0:	6868      	ldr	r0, [r5, #4]
 80a08e2:	f005 fb29 	bl	80a5f38 <__aeabi_fcmpeq>
 80a08e6:	b138      	cbz	r0, 80a08f8 <_Z13activeChargerv+0x28>
    digitalWrite(D7,LOW);
    return;
}

int activeCharger() {
    int number = 0;
 80a08e8:	2100      	movs	r1, #0
 80a08ea:	68a8      	ldr	r0, [r5, #8]
 80a08ec:	f005 fb24 	bl	80a5f38 <__aeabi_fcmpeq>
 80a08f0:	fab0 f480 	clz	r4, r0
 80a08f4:	0964      	lsrs	r4, r4, #5
 80a08f6:	e000      	b.n	80a08fa <_Z13activeChargerv+0x2a>
    for (int i=0; i<3; i++) {
        if (Current[0][i] != 0.0) {
            number += 1;
 80a08f8:	2401      	movs	r4, #1
            break;
        }
    }
    
    for (int i=0; i<3; i++) {
        if (Current[1][i] != 0.0) {
 80a08fa:	2100      	movs	r1, #0
 80a08fc:	68e8      	ldr	r0, [r5, #12]
 80a08fe:	4e08      	ldr	r6, [pc, #32]	; (80a0920 <_Z13activeChargerv+0x50>)
 80a0900:	f005 fb1a 	bl	80a5f38 <__aeabi_fcmpeq>
 80a0904:	b148      	cbz	r0, 80a091a <_Z13activeChargerv+0x4a>
 80a0906:	2100      	movs	r1, #0
 80a0908:	6930      	ldr	r0, [r6, #16]
 80a090a:	f005 fb15 	bl	80a5f38 <__aeabi_fcmpeq>
 80a090e:	b120      	cbz	r0, 80a091a <_Z13activeChargerv+0x4a>
 80a0910:	2100      	movs	r1, #0
 80a0912:	6970      	ldr	r0, [r6, #20]
 80a0914:	f005 fb10 	bl	80a5f38 <__aeabi_fcmpeq>
 80a0918:	b900      	cbnz	r0, 80a091c <_Z13activeChargerv+0x4c>
            number += 2;
 80a091a:	3402      	adds	r4, #2
            break;
        }
    }
    
    return number;
}
 80a091c:	4620      	mov	r0, r4
 80a091e:	bd70      	pop	{r4, r5, r6, pc}
 80a0920:	20000364 	.word	0x20000364

080a0924 <_Z17maxCurrentC1_testi>:
        return 0;
    }
    return 1;
}

int maxCurrentC1_test(int setPoint) {
 80a0924:	b530      	push	{r4, r5, lr}
 80a0926:	4604      	mov	r4, r0
 80a0928:	b08b      	sub	sp, #44	; 0x2c
    byte olimexMessage[4] = {0xFE,1,setPoint,0xFF};
 80a092a:	23fe      	movs	r3, #254	; 0xfe
 80a092c:	f88d 3004 	strb.w	r3, [sp, #4]
 80a0930:	23ff      	movs	r3, #255	; 0xff
 80a0932:	f88d 3007 	strb.w	r3, [sp, #7]
    if (TESTCASE) {
 80a0936:	4b18      	ldr	r3, [pc, #96]	; (80a0998 <_Z17maxCurrentC1_testi+0x74>)
    }
    return 1;
}

int maxCurrentC1_test(int setPoint) {
    byte olimexMessage[4] = {0xFE,1,setPoint,0xFF};
 80a0938:	2001      	movs	r0, #1
    if (TESTCASE) {
 80a093a:	781b      	ldrb	r3, [r3, #0]
    }
    return 1;
}

int maxCurrentC1_test(int setPoint) {
    byte olimexMessage[4] = {0xFE,1,setPoint,0xFF};
 80a093c:	f88d 0005 	strb.w	r0, [sp, #5]
 80a0940:	f88d 4006 	strb.w	r4, [sp, #6]
    if (TESTCASE) {
 80a0944:	b32b      	cbz	r3, 80a0992 <_Z17maxCurrentC1_testi+0x6e>
        Serial1.write(olimexMessage,4);
 80a0946:	f003 ff15 	bl	80a4774 <_Z22__fetch_global_Serial1v>
 80a094a:	6803      	ldr	r3, [r0, #0]
 80a094c:	2204      	movs	r2, #4
 80a094e:	68db      	ldr	r3, [r3, #12]
 80a0950:	eb0d 0102 	add.w	r1, sp, r2
 80a0954:	4798      	blx	r3
        DEBUGPORT.println("maxCurrentC1>\tNew setpoint set at "+String(setPoint)+" Amps.");
 80a0956:	f003 fe57 	bl	80a4608 <_Z16_fetch_usbserialv>
 80a095a:	4910      	ldr	r1, [pc, #64]	; (80a099c <_Z17maxCurrentC1_testi+0x78>)
 80a095c:	4605      	mov	r5, r0
 80a095e:	a806      	add	r0, sp, #24
 80a0960:	f003 f8a3 	bl	80a3aaa <_ZN6StringC1EPK19__FlashStringHelper>
 80a0964:	220a      	movs	r2, #10
 80a0966:	4621      	mov	r1, r4
 80a0968:	a802      	add	r0, sp, #8
 80a096a:	f003 f913 	bl	80a3b94 <_ZN6StringC1Eih>
 80a096e:	a902      	add	r1, sp, #8
 80a0970:	a806      	add	r0, sp, #24
 80a0972:	f003 f997 	bl	80a3ca4 <_ZplRK15StringSumHelperRK6String>
 80a0976:	490a      	ldr	r1, [pc, #40]	; (80a09a0 <_Z17maxCurrentC1_testi+0x7c>)
 80a0978:	f003 f9a0 	bl	80a3cbc <_ZplRK15StringSumHelperPKc>
 80a097c:	6801      	ldr	r1, [r0, #0]
 80a097e:	4628      	mov	r0, r5
 80a0980:	f003 fa3f 	bl	80a3e02 <_ZN5Print7printlnEPKc>
 80a0984:	a802      	add	r0, sp, #8
 80a0986:	f003 f849 	bl	80a3a1c <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80a098a:	a806      	add	r0, sp, #24
 80a098c:	f003 f846 	bl	80a3a1c <_ZN6StringD1Ev>
        return 0;
 80a0990:	2000      	movs	r0, #0
    }
    return 1;
}
 80a0992:	b00b      	add	sp, #44	; 0x2c
 80a0994:	bd30      	pop	{r4, r5, pc}
 80a0996:	bf00      	nop
 80a0998:	20000478 	.word	0x20000478
 80a099c:	080a9443 	.word	0x080a9443
 80a09a0:	080a9466 	.word	0x080a9466

080a09a4 <_Z17maxCurrentC2_testi>:

int maxCurrentC2_test(int setPoint) {
 80a09a4:	b530      	push	{r4, r5, lr}
    byte olimexMessage[4] = {0xFE,2,setPoint,0xFF};
 80a09a6:	23fe      	movs	r3, #254	; 0xfe
        return 0;
    }
    return 1;
}

int maxCurrentC2_test(int setPoint) {
 80a09a8:	b08b      	sub	sp, #44	; 0x2c
    byte olimexMessage[4] = {0xFE,2,setPoint,0xFF};
 80a09aa:	f88d 3004 	strb.w	r3, [sp, #4]
 80a09ae:	2302      	movs	r3, #2
 80a09b0:	f88d 3005 	strb.w	r3, [sp, #5]
 80a09b4:	23ff      	movs	r3, #255	; 0xff
 80a09b6:	f88d 3007 	strb.w	r3, [sp, #7]
    if (TESTCASE) {
 80a09ba:	4b18      	ldr	r3, [pc, #96]	; (80a0a1c <_Z17maxCurrentC2_testi+0x78>)
        return 0;
    }
    return 1;
}

int maxCurrentC2_test(int setPoint) {
 80a09bc:	4604      	mov	r4, r0
    byte olimexMessage[4] = {0xFE,2,setPoint,0xFF};
    if (TESTCASE) {
 80a09be:	781b      	ldrb	r3, [r3, #0]
    }
    return 1;
}

int maxCurrentC2_test(int setPoint) {
    byte olimexMessage[4] = {0xFE,2,setPoint,0xFF};
 80a09c0:	f88d 0006 	strb.w	r0, [sp, #6]
    if (TESTCASE) {
 80a09c4:	b333      	cbz	r3, 80a0a14 <_Z17maxCurrentC2_testi+0x70>
        Serial1.write(olimexMessage,4);
 80a09c6:	f003 fed5 	bl	80a4774 <_Z22__fetch_global_Serial1v>
 80a09ca:	6803      	ldr	r3, [r0, #0]
 80a09cc:	2204      	movs	r2, #4
 80a09ce:	68db      	ldr	r3, [r3, #12]
 80a09d0:	eb0d 0102 	add.w	r1, sp, r2
 80a09d4:	4798      	blx	r3
        DEBUGPORT.println("maxCurrentC1>\tNew setpoint set at "+String(setPoint)+" Amps.");
 80a09d6:	f003 fe17 	bl	80a4608 <_Z16_fetch_usbserialv>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a09da:	4911      	ldr	r1, [pc, #68]	; (80a0a20 <_Z17maxCurrentC2_testi+0x7c>)
 80a09dc:	4605      	mov	r5, r0
 80a09de:	a806      	add	r0, sp, #24
 80a09e0:	f003 f863 	bl	80a3aaa <_ZN6StringC1EPK19__FlashStringHelper>
 80a09e4:	220a      	movs	r2, #10
 80a09e6:	4621      	mov	r1, r4
 80a09e8:	a802      	add	r0, sp, #8
 80a09ea:	f003 f8d3 	bl	80a3b94 <_ZN6StringC1Eih>
 80a09ee:	a902      	add	r1, sp, #8
 80a09f0:	a806      	add	r0, sp, #24
 80a09f2:	f003 f957 	bl	80a3ca4 <_ZplRK15StringSumHelperRK6String>
 80a09f6:	490b      	ldr	r1, [pc, #44]	; (80a0a24 <_Z17maxCurrentC2_testi+0x80>)
 80a09f8:	f003 f960 	bl	80a3cbc <_ZplRK15StringSumHelperPKc>
 80a09fc:	6801      	ldr	r1, [r0, #0]
 80a09fe:	4628      	mov	r0, r5
 80a0a00:	f003 f9ff 	bl	80a3e02 <_ZN5Print7printlnEPKc>
 80a0a04:	a802      	add	r0, sp, #8
 80a0a06:	f003 f809 	bl	80a3a1c <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80a0a0a:	a806      	add	r0, sp, #24
 80a0a0c:	f003 f806 	bl	80a3a1c <_ZN6StringD1Ev>
        return 0;
 80a0a10:	2000      	movs	r0, #0
 80a0a12:	e000      	b.n	80a0a16 <_Z17maxCurrentC2_testi+0x72>
    }
    return 1;
 80a0a14:	2001      	movs	r0, #1
}
 80a0a16:	b00b      	add	sp, #44	; 0x2c
 80a0a18:	bd30      	pop	{r4, r5, pc}
 80a0a1a:	bf00      	nop
 80a0a1c:	20000478 	.word	0x20000478
 80a0a20:	080a9443 	.word	0x080a9443
 80a0a24:	080a9466 	.word	0x080a9466

080a0a28 <_Z17getUserIdAtSocketi>:
    delay(10000);
    return 1;
}*/

String getUserIdAtSocket(int socket) {
    if (socket == 1+CHARGEROFFSET)
 80a0a28:	2901      	cmp	r1, #1
    //digitalWrite(D7,LOW);
    delay(10000);
    return 1;
}*/

String getUserIdAtSocket(int socket) {
 80a0a2a:	b510      	push	{r4, lr}
 80a0a2c:	4604      	mov	r4, r0
    if (socket == 1+CHARGEROFFSET)
 80a0a2e:	d101      	bne.n	80a0a34 <_Z17getUserIdAtSocketi+0xc>
        return UIDtagCharger1;
 80a0a30:	4906      	ldr	r1, [pc, #24]	; (80a0a4c <_Z17getUserIdAtSocketi+0x24>)
 80a0a32:	e002      	b.n	80a0a3a <_Z17getUserIdAtSocketi+0x12>
    if (socket == 2+CHARGEROFFSET)
 80a0a34:	2902      	cmp	r1, #2
 80a0a36:	d103      	bne.n	80a0a40 <_Z17getUserIdAtSocketi+0x18>
        return UIDtagCharger2;
 80a0a38:	4905      	ldr	r1, [pc, #20]	; (80a0a50 <_Z17getUserIdAtSocketi+0x28>)
 80a0a3a:	f003 f875 	bl	80a3b28 <_ZN6StringC1ERKS_>
 80a0a3e:	e002      	b.n	80a0a46 <_Z17getUserIdAtSocketi+0x1e>
    return "00";
 80a0a40:	4904      	ldr	r1, [pc, #16]	; (80a0a54 <_Z17getUserIdAtSocketi+0x2c>)
 80a0a42:	f003 f832 	bl	80a3aaa <_ZN6StringC1EPK19__FlashStringHelper>
}
 80a0a46:	4620      	mov	r0, r4
 80a0a48:	bd10      	pop	{r4, pc}
 80a0a4a:	bf00      	nop
 80a0a4c:	2000031c 	.word	0x2000031c
 80a0a50:	2000032c 	.word	0x2000032c
 80a0a54:	080a95c1 	.word	0x080a95c1

080a0a58 <_Z19getMeasure_callbackPhj>:

void getMeasure_callback(byte* payload, unsigned int length) {
 80a0a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0a5c:	460d      	mov	r5, r1
 80a0a5e:	4604      	mov	r4, r0
 80a0a60:	b089      	sub	sp, #36	; 0x24
 80a0a62:	af00      	add	r7, sp, #0
    String data;
 80a0a64:	4989      	ldr	r1, [pc, #548]	; (80a0c8c <_Z19getMeasure_callbackPhj+0x234>)
 80a0a66:	4638      	mov	r0, r7
 80a0a68:	f003 f81f 	bl	80a3aaa <_ZN6StringC1EPK19__FlashStringHelper>
    unsigned int from = 0;
    unsigned int to = 0;
    
    char p[length + 1];
 80a0a6c:	f105 0308 	add.w	r3, r5, #8
 80a0a70:	f023 0307 	bic.w	r3, r3, #7
 80a0a74:	ebad 0d03 	sub.w	sp, sp, r3
    memcpy(p, payload, length);
 80a0a78:	4621      	mov	r1, r4
 80a0a7a:	462a      	mov	r2, r5
 80a0a7c:	4668      	mov	r0, sp
 80a0a7e:	f005 fdb5 	bl	80a65ec <memcpy>
    
    p[length] = NULL;
 80a0a82:	2400      	movs	r4, #0
    charToString(p, data);
 80a0a84:	4639      	mov	r1, r7
 80a0a86:	4668      	mov	r0, sp
    unsigned int to = 0;
    
    char p[length + 1];
    memcpy(p, payload, length);
    
    p[length] = NULL;
 80a0a88:	f80d 4005 	strb.w	r4, [sp, r5]
    charToString(p, data);
 80a0a8c:	f7ff ff0a 	bl	80a08a4 <_Z12charToStringPKcR6String>
 80a0a90:	4e7f      	ldr	r6, [pc, #508]	; (80a0c90 <_Z19getMeasure_callbackPhj+0x238>)
 80a0a92:	f106 08dc 	add.w	r8, r6, #220	; 0xdc
    return "00";
}

void getMeasure_callback(byte* payload, unsigned int length) {
    String data;
    unsigned int from = 0;
 80a0a96:	2500      	movs	r5, #0
 80a0a98:	46a1      	mov	r9, r4
    p[length] = NULL;
    charToString(p, data);
    for(int i=0; i<NUMBEROFMETERS; i++) {
        //Read Phase Voltage
        for(int j=0; j<3; j++) {
            while (data[to]!='%') {
 80a0a9a:	4649      	mov	r1, r9
 80a0a9c:	4638      	mov	r0, r7
 80a0a9e:	f003 f931 	bl	80a3d04 <_ZN6StringixEj>
 80a0aa2:	7803      	ldrb	r3, [r0, #0]
 80a0aa4:	f109 0a01 	add.w	sl, r9, #1
 80a0aa8:	2b25      	cmp	r3, #37	; 0x25
 80a0aaa:	d001      	beq.n	80a0ab0 <_Z19getMeasure_callbackPhj+0x58>
                to++;
 80a0aac:	46d1      	mov	r9, sl
    p[length] = NULL;
    charToString(p, data);
    for(int i=0; i<NUMBEROFMETERS; i++) {
        //Read Phase Voltage
        for(int j=0; j<3; j++) {
            while (data[to]!='%') {
 80a0aae:	e7f4      	b.n	80a0a9a <_Z19getMeasure_callbackPhj+0x42>
                to++;
            }
            EMeterData[i].PhaseVoltage[j] = (data.substring(from, to)).toFloat();
 80a0ab0:	4622      	mov	r2, r4
 80a0ab2:	464b      	mov	r3, r9
 80a0ab4:	4639      	mov	r1, r7
 80a0ab6:	f107 0010 	add.w	r0, r7, #16
 80a0aba:	f003 f931 	bl	80a3d20 <_ZNK6String9substringEjj>
 80a0abe:	f107 0010 	add.w	r0, r7, #16
 80a0ac2:	f003 f95b 	bl	80a3d7c <_ZNK6String7toFloatEv>
 80a0ac6:	f1a6 0314 	sub.w	r3, r6, #20
 80a0aca:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 80a0ace:	f107 0010 	add.w	r0, r7, #16
    
    p[length] = NULL;
    charToString(p, data);
    for(int i=0; i<NUMBEROFMETERS; i++) {
        //Read Phase Voltage
        for(int j=0; j<3; j++) {
 80a0ad2:	3501      	adds	r5, #1
            while (data[to]!='%') {
                to++;
            }
            EMeterData[i].PhaseVoltage[j] = (data.substring(from, to)).toFloat();
 80a0ad4:	f002 ffa2 	bl	80a3a1c <_ZN6StringD1Ev>
    
    p[length] = NULL;
    charToString(p, data);
    for(int i=0; i<NUMBEROFMETERS; i++) {
        //Read Phase Voltage
        for(int j=0; j<3; j++) {
 80a0ad8:	2d03      	cmp	r5, #3
            while (data[to]!='%') {
                to++;
            }
            EMeterData[i].PhaseVoltage[j] = (data.substring(from, to)).toFloat();
            to++;
 80a0ada:	4654      	mov	r4, sl
    
    p[length] = NULL;
    charToString(p, data);
    for(int i=0; i<NUMBEROFMETERS; i++) {
        //Read Phase Voltage
        for(int j=0; j<3; j++) {
 80a0adc:	d1dc      	bne.n	80a0a98 <_Z19getMeasure_callbackPhj+0x40>
 80a0ade:	f1a6 090c 	sub.w	r9, r6, #12
    return "00";
}

void getMeasure_callback(byte* payload, unsigned int length) {
    String data;
    unsigned int from = 0;
 80a0ae2:	4625      	mov	r5, r4
            to++;
            from = to;
        }
        //Read Phase Current
        for(int j=0; j<3; j++) {
            while (data[to]!='%') {
 80a0ae4:	4629      	mov	r1, r5
 80a0ae6:	4638      	mov	r0, r7
 80a0ae8:	f003 f90c 	bl	80a3d04 <_ZN6StringixEj>
 80a0aec:	7803      	ldrb	r3, [r0, #0]
 80a0aee:	f105 0a01 	add.w	sl, r5, #1
 80a0af2:	2b25      	cmp	r3, #37	; 0x25
 80a0af4:	d001      	beq.n	80a0afa <_Z19getMeasure_callbackPhj+0xa2>
                to++;
 80a0af6:	4655      	mov	r5, sl
            to++;
            from = to;
        }
        //Read Phase Current
        for(int j=0; j<3; j++) {
            while (data[to]!='%') {
 80a0af8:	e7f4      	b.n	80a0ae4 <_Z19getMeasure_callbackPhj+0x8c>
                to++;
            }
            EMeterData[i].PhaseCurrent[j] = (data.substring(from, to)).toFloat();
 80a0afa:	4622      	mov	r2, r4
 80a0afc:	462b      	mov	r3, r5
 80a0afe:	4639      	mov	r1, r7
 80a0b00:	f107 0010 	add.w	r0, r7, #16
 80a0b04:	f003 f90c 	bl	80a3d20 <_ZNK6String9substringEjj>
 80a0b08:	f107 0010 	add.w	r0, r7, #16
 80a0b0c:	f003 f936 	bl	80a3d7c <_ZNK6String7toFloatEv>
 80a0b10:	f849 0f04 	str.w	r0, [r9, #4]!
 80a0b14:	f107 0010 	add.w	r0, r7, #16
 80a0b18:	f002 ff80 	bl	80a3a1c <_ZN6StringD1Ev>
            EMeterData[i].PhaseVoltage[j] = (data.substring(from, to)).toFloat();
            to++;
            from = to;
        }
        //Read Phase Current
        for(int j=0; j<3; j++) {
 80a0b1c:	454e      	cmp	r6, r9
            while (data[to]!='%') {
                to++;
            }
            EMeterData[i].PhaseCurrent[j] = (data.substring(from, to)).toFloat();
            to++;
 80a0b1e:	4654      	mov	r4, sl
            EMeterData[i].PhaseVoltage[j] = (data.substring(from, to)).toFloat();
            to++;
            from = to;
        }
        //Read Phase Current
        for(int j=0; j<3; j++) {
 80a0b20:	d1df      	bne.n	80a0ae2 <_Z19getMeasure_callbackPhj+0x8a>
 80a0b22:	46b1      	mov	r9, r6
 80a0b24:	f106 0b0c 	add.w	fp, r6, #12
 80a0b28:	4625      	mov	r5, r4
            to++;
            from = to;
        }
        //Read Phase Power
        for(int j=0; j<3; j++) {
            while (data[to]!='%') {
 80a0b2a:	4629      	mov	r1, r5
 80a0b2c:	4638      	mov	r0, r7
 80a0b2e:	f003 f8e9 	bl	80a3d04 <_ZN6StringixEj>
 80a0b32:	7803      	ldrb	r3, [r0, #0]
 80a0b34:	f105 0a01 	add.w	sl, r5, #1
 80a0b38:	2b25      	cmp	r3, #37	; 0x25
 80a0b3a:	d001      	beq.n	80a0b40 <_Z19getMeasure_callbackPhj+0xe8>
                to++;
 80a0b3c:	4655      	mov	r5, sl
            to++;
            from = to;
        }
        //Read Phase Power
        for(int j=0; j<3; j++) {
            while (data[to]!='%') {
 80a0b3e:	e7f4      	b.n	80a0b2a <_Z19getMeasure_callbackPhj+0xd2>
                to++;
            }
            EMeterData[i].PhasePower[j] = (data.substring(from, to)).toFloat();
 80a0b40:	4622      	mov	r2, r4
 80a0b42:	462b      	mov	r3, r5
 80a0b44:	4639      	mov	r1, r7
 80a0b46:	f107 0010 	add.w	r0, r7, #16
 80a0b4a:	f003 f8e9 	bl	80a3d20 <_ZNK6String9substringEjj>
 80a0b4e:	f107 0010 	add.w	r0, r7, #16
 80a0b52:	f003 f913 	bl	80a3d7c <_ZNK6String7toFloatEv>
 80a0b56:	f849 0f04 	str.w	r0, [r9, #4]!
 80a0b5a:	f107 0010 	add.w	r0, r7, #16
 80a0b5e:	f002 ff5d 	bl	80a3a1c <_ZN6StringD1Ev>
            EMeterData[i].PhaseCurrent[j] = (data.substring(from, to)).toFloat();
            to++;
            from = to;
        }
        //Read Phase Power
        for(int j=0; j<3; j++) {
 80a0b62:	45d9      	cmp	r9, fp
            while (data[to]!='%') {
                to++;
            }
            EMeterData[i].PhasePower[j] = (data.substring(from, to)).toFloat();
            to++;
 80a0b64:	4654      	mov	r4, sl
            EMeterData[i].PhaseCurrent[j] = (data.substring(from, to)).toFloat();
            to++;
            from = to;
        }
        //Read Phase Power
        for(int j=0; j<3; j++) {
 80a0b66:	d1df      	bne.n	80a0b28 <_Z19getMeasure_callbackPhj+0xd0>
            EMeterData[i].PhasePower[j] = (data.substring(from, to)).toFloat();
            to++;
            from = to;
        }
        //Read Frequency
        while (data[to]!='%') {
 80a0b68:	4621      	mov	r1, r4
 80a0b6a:	4638      	mov	r0, r7
 80a0b6c:	f003 f8ca 	bl	80a3d04 <_ZN6StringixEj>
 80a0b70:	7803      	ldrb	r3, [r0, #0]
 80a0b72:	f104 0901 	add.w	r9, r4, #1
 80a0b76:	2b25      	cmp	r3, #37	; 0x25
 80a0b78:	d001      	beq.n	80a0b7e <_Z19getMeasure_callbackPhj+0x126>
            to++;
 80a0b7a:	464c      	mov	r4, r9
            EMeterData[i].PhasePower[j] = (data.substring(from, to)).toFloat();
            to++;
            from = to;
        }
        //Read Frequency
        while (data[to]!='%') {
 80a0b7c:	e7f4      	b.n	80a0b68 <_Z19getMeasure_callbackPhj+0x110>
            to++;
        }
        EMeterData[i].Frequency = (data.substring(from, to)).toFloat();
 80a0b7e:	4623      	mov	r3, r4
 80a0b80:	4652      	mov	r2, sl
 80a0b82:	4639      	mov	r1, r7
 80a0b84:	f107 0010 	add.w	r0, r7, #16
 80a0b88:	f003 f8ca 	bl	80a3d20 <_ZNK6String9substringEjj>
 80a0b8c:	f107 0010 	add.w	r0, r7, #16
 80a0b90:	f003 f8f4 	bl	80a3d7c <_ZNK6String7toFloatEv>
 80a0b94:	6130      	str	r0, [r6, #16]
 80a0b96:	f107 0010 	add.w	r0, r7, #16
 80a0b9a:	f002 ff3f 	bl	80a3a1c <_ZN6StringD1Ev>
        to++;
 80a0b9e:	464d      	mov	r5, r9
        from = to;
        //Read StartTime
        while (data[to]!='%') {
 80a0ba0:	4629      	mov	r1, r5
 80a0ba2:	4638      	mov	r0, r7
 80a0ba4:	f003 f8ae 	bl	80a3d04 <_ZN6StringixEj>
 80a0ba8:	7803      	ldrb	r3, [r0, #0]
 80a0baa:	1c6c      	adds	r4, r5, #1
 80a0bac:	2b25      	cmp	r3, #37	; 0x25
 80a0bae:	d001      	beq.n	80a0bb4 <_Z19getMeasure_callbackPhj+0x15c>
            to++;
 80a0bb0:	4625      	mov	r5, r4
        }
        EMeterData[i].Frequency = (data.substring(from, to)).toFloat();
        to++;
        from = to;
        //Read StartTime
        while (data[to]!='%') {
 80a0bb2:	e7f5      	b.n	80a0ba0 <_Z19getMeasure_callbackPhj+0x148>
            to++;
        }
        EMeterData[i].Time = atol((data.substring(from, to)).c_str());
 80a0bb4:	462b      	mov	r3, r5
 80a0bb6:	464a      	mov	r2, r9
 80a0bb8:	4639      	mov	r1, r7
 80a0bba:	f107 0010 	add.w	r0, r7, #16
 80a0bbe:	f003 f8af 	bl	80a3d20 <_ZNK6String9substringEjj>
 80a0bc2:	6938      	ldr	r0, [r7, #16]
 80a0bc4:	f005 fc03 	bl	80a63ce <atol>
 80a0bc8:	362c      	adds	r6, #44	; 0x2c
 80a0bca:	f846 0c18 	str.w	r0, [r6, #-24]
 80a0bce:	f107 0010 	add.w	r0, r7, #16
 80a0bd2:	f002 ff23 	bl	80a3a1c <_ZN6StringD1Ev>
    char p[length + 1];
    memcpy(p, payload, length);
    
    p[length] = NULL;
    charToString(p, data);
    for(int i=0; i<NUMBEROFMETERS; i++) {
 80a0bd6:	4546      	cmp	r6, r8
 80a0bd8:	f47f af5d 	bne.w	80a0a96 <_Z19getMeasure_callbackPhj+0x3e>
        }
        EMeterData[i].Time = atol((data.substring(from, to)).c_str());
        to++;
        from = to;
    }
    time_t time = Time.now();
 80a0bdc:	f003 fb2f 	bl	80a423e <_ZN9TimeClass3nowEv>
 80a0be0:	4605      	mov	r5, r0
    //DEBUGPORT.println(time);
    DEBUGPORT.print("MQTT>\tReceive energy meter data from broker at: ");
 80a0be2:	f003 fd11 	bl	80a4608 <_Z16_fetch_usbserialv>
 80a0be6:	492b      	ldr	r1, [pc, #172]	; (80a0c94 <_Z19getMeasure_callbackPhj+0x23c>)
 80a0be8:	f003 f8f8 	bl	80a3ddc <_ZN5Print5printEPKc>
    DEBUGPORT.println(Time.format(time, TIME_FORMAT_DEFAULT));
 80a0bec:	f003 fd0c 	bl	80a4608 <_Z16_fetch_usbserialv>
 80a0bf0:	4604      	mov	r4, r0
 80a0bf2:	4b29      	ldr	r3, [pc, #164]	; (80a0c98 <_Z19getMeasure_callbackPhj+0x240>)
 80a0bf4:	462a      	mov	r2, r5
 80a0bf6:	681b      	ldr	r3, [r3, #0]
 80a0bf8:	4928      	ldr	r1, [pc, #160]	; (80a0c9c <_Z19getMeasure_callbackPhj+0x244>)
 80a0bfa:	f107 0010 	add.w	r0, r7, #16
 80a0bfe:	f003 facb 	bl	80a4198 <_ZN9TimeClass6formatElPKc>
 80a0c02:	6939      	ldr	r1, [r7, #16]
 80a0c04:	4620      	mov	r0, r4
 80a0c06:	f003 f8fc 	bl	80a3e02 <_ZN5Print7printlnEPKc>
 80a0c0a:	f107 0010 	add.w	r0, r7, #16
 80a0c0e:	f002 ff05 	bl	80a3a1c <_ZN6StringD1Ev>
        if (AUTHENTICATION_CAR2) {
            maxCurrentC2_test((int)(EMeterData[2].PhaseCurrent[0])); //Emeter3, I1
        }
    }
    */
    if (activeCharger()==1) {
 80a0c12:	f7ff fe5d 	bl	80a08d0 <_Z13activeChargerv>
 80a0c16:	4c22      	ldr	r4, [pc, #136]	; (80a0ca0 <_Z19getMeasure_callbackPhj+0x248>)
 80a0c18:	2801      	cmp	r0, #1
        maxCurrentC1_test((int)(EMeterData[2].PhaseCurrent[0]+EMeterData[2].PhaseCurrent[1]+EMeterData[2].PhaseCurrent[2])); //Emeter3, I1
 80a0c1a:	6ea1      	ldr	r1, [r4, #104]	; 0x68
        if (AUTHENTICATION_CAR2) {
            maxCurrentC2_test((int)(EMeterData[2].PhaseCurrent[0])); //Emeter3, I1
        }
    }
    */
    if (activeCharger()==1) {
 80a0c1c:	d10a      	bne.n	80a0c34 <_Z19getMeasure_callbackPhj+0x1dc>
        maxCurrentC1_test((int)(EMeterData[2].PhaseCurrent[0]+EMeterData[2].PhaseCurrent[1]+EMeterData[2].PhaseCurrent[2])); //Emeter3, I1
 80a0c1e:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80a0c20:	f004 feee 	bl	80a5a00 <__addsf3>
 80a0c24:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 80a0c26:	f004 feeb 	bl	80a5a00 <__addsf3>
 80a0c2a:	f005 f9b7 	bl	80a5f9c <__aeabi_f2iz>
 80a0c2e:	f7ff fe79 	bl	80a0924 <_Z17maxCurrentC1_testi>
 80a0c32:	e024      	b.n	80a0c7e <_Z19getMeasure_callbackPhj+0x226>
    }
    else if (activeCharger()==2) {
 80a0c34:	2802      	cmp	r0, #2
        maxCurrentC2_test((int)(EMeterData[2].PhaseCurrent[0]+EMeterData[2].PhaseCurrent[1]+EMeterData[2].PhaseCurrent[2])); //Emeter3, I1
 80a0c36:	6e60      	ldr	r0, [r4, #100]	; 0x64
    }
    */
    if (activeCharger()==1) {
        maxCurrentC1_test((int)(EMeterData[2].PhaseCurrent[0]+EMeterData[2].PhaseCurrent[1]+EMeterData[2].PhaseCurrent[2])); //Emeter3, I1
    }
    else if (activeCharger()==2) {
 80a0c38:	d105      	bne.n	80a0c46 <_Z19getMeasure_callbackPhj+0x1ee>
        maxCurrentC2_test((int)(EMeterData[2].PhaseCurrent[0]+EMeterData[2].PhaseCurrent[1]+EMeterData[2].PhaseCurrent[2])); //Emeter3, I1
 80a0c3a:	f004 fee1 	bl	80a5a00 <__addsf3>
 80a0c3e:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 80a0c40:	f004 fede 	bl	80a5a00 <__addsf3>
 80a0c44:	e017      	b.n	80a0c76 <_Z19getMeasure_callbackPhj+0x21e>
    }
    else {
        maxCurrentC1_test((int)((EMeterData[2].PhaseCurrent[0]+EMeterData[2].PhaseCurrent[1]+EMeterData[2].PhaseCurrent[2])/2)); //Emeter3, I1
 80a0c46:	f004 fedb 	bl	80a5a00 <__addsf3>
 80a0c4a:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 80a0c4c:	f004 fed8 	bl	80a5a00 <__addsf3>
 80a0c50:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80a0c54:	f004 ffdc 	bl	80a5c10 <__aeabi_fmul>
 80a0c58:	f005 f9a0 	bl	80a5f9c <__aeabi_f2iz>
 80a0c5c:	f7ff fe62 	bl	80a0924 <_Z17maxCurrentC1_testi>
        maxCurrentC2_test((int)((EMeterData[2].PhaseCurrent[0]+EMeterData[2].PhaseCurrent[1]+EMeterData[2].PhaseCurrent[2])/2)); //Emeter3, I1
 80a0c60:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 80a0c62:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80a0c64:	f004 fecc 	bl	80a5a00 <__addsf3>
 80a0c68:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 80a0c6a:	f004 fec9 	bl	80a5a00 <__addsf3>
 80a0c6e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80a0c72:	f004 ffcd 	bl	80a5c10 <__aeabi_fmul>
 80a0c76:	f005 f991 	bl	80a5f9c <__aeabi_f2iz>
 80a0c7a:	f7ff fe93 	bl	80a09a4 <_Z17maxCurrentC2_testi>
        return UIDtagCharger2;
    return "00";
}

void getMeasure_callback(byte* payload, unsigned int length) {
    String data;
 80a0c7e:	4638      	mov	r0, r7
 80a0c80:	f002 fecc 	bl	80a3a1c <_ZN6StringD1Ev>
    }
    else {
        maxCurrentC1_test((int)((EMeterData[2].PhaseCurrent[0]+EMeterData[2].PhaseCurrent[1]+EMeterData[2].PhaseCurrent[2])/2)); //Emeter3, I1
        maxCurrentC2_test((int)((EMeterData[2].PhaseCurrent[0]+EMeterData[2].PhaseCurrent[1]+EMeterData[2].PhaseCurrent[2])/2)); //Emeter3, I1
    }
}
 80a0c84:	3724      	adds	r7, #36	; 0x24
 80a0c86:	46bd      	mov	sp, r7
 80a0c88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a0c8c:	080a98e2 	.word	0x080a98e2
 80a0c90:	200003a8 	.word	0x200003a8
 80a0c94:	080a95c4 	.word	0x080a95c4
 80a0c98:	2000000c 	.word	0x2000000c
 80a0c9c:	20000520 	.word	0x20000520
 80a0ca0:	20000394 	.word	0x20000394

080a0ca4 <_Z18allowUser_callbackPhj>:

void allowUser_callback(byte* payload, unsigned int length) {
 80a0ca4:	b590      	push	{r4, r7, lr}
 80a0ca6:	460c      	mov	r4, r1
    char payl[length+1];
 80a0ca8:	f101 0308 	add.w	r3, r1, #8
        maxCurrentC1_test((int)((EMeterData[2].PhaseCurrent[0]+EMeterData[2].PhaseCurrent[1]+EMeterData[2].PhaseCurrent[2])/2)); //Emeter3, I1
        maxCurrentC2_test((int)((EMeterData[2].PhaseCurrent[0]+EMeterData[2].PhaseCurrent[1]+EMeterData[2].PhaseCurrent[2])/2)); //Emeter3, I1
    }
}

void allowUser_callback(byte* payload, unsigned int length) {
 80a0cac:	b083      	sub	sp, #12
    char payl[length+1];
 80a0cae:	f023 0307 	bic.w	r3, r3, #7
        maxCurrentC1_test((int)((EMeterData[2].PhaseCurrent[0]+EMeterData[2].PhaseCurrent[1]+EMeterData[2].PhaseCurrent[2])/2)); //Emeter3, I1
        maxCurrentC2_test((int)((EMeterData[2].PhaseCurrent[0]+EMeterData[2].PhaseCurrent[1]+EMeterData[2].PhaseCurrent[2])/2)); //Emeter3, I1
    }
}

void allowUser_callback(byte* payload, unsigned int length) {
 80a0cb2:	af00      	add	r7, sp, #0
    char payl[length+1];
 80a0cb4:	ebad 0d03 	sub.w	sp, sp, r3
    char *endchar;
        
    memcpy(payl, payload, length);
 80a0cb8:	460a      	mov	r2, r1
 80a0cba:	4601      	mov	r1, r0
 80a0cbc:	4668      	mov	r0, sp
 80a0cbe:	f005 fc95 	bl	80a65ec <memcpy>
    payl[length] = NULL;
 80a0cc2:	2300      	movs	r3, #0
    //char* ch = "and";
    //strncat(Body, ch, 3);
    //client.publish("HANevse/photonConverted", p);
    int port = (int) strtol(payl, &endchar, 10);
 80a0cc4:	220a      	movs	r2, #10
 80a0cc6:	1d39      	adds	r1, r7, #4
 80a0cc8:	4668      	mov	r0, sp
void allowUser_callback(byte* payload, unsigned int length) {
    char payl[length+1];
    char *endchar;
        
    memcpy(payl, payload, length);
    payl[length] = NULL;
 80a0cca:	f80d 3004 	strb.w	r3, [sp, r4]
    //char* ch = "and";
    //strncat(Body, ch, 3);
    //client.publish("HANevse/photonConverted", p);
    int port = (int) strtol(payl, &endchar, 10);
 80a0cce:	f007 f8d1 	bl	80a7e74 <strtol>
    //action=3  charger is occupied by annother user
    //action=4  succesful stop this charge session
    //action=5  you just started a charge on this charger, but have another consecutive RFID read/swipe within 20 seconds
    //action=6  you are already charging at another charger
    //action=7  succesfull RFID read, but you are not in the userlist
    endchar = endchar + 1;
 80a0cd2:	687b      	ldr	r3, [r7, #4]
    if (port == 1 ) 
 80a0cd4:	2801      	cmp	r0, #1
    //action=3  charger is occupied by annother user
    //action=4  succesful stop this charge session
    //action=5  you just started a charge on this charger, but have another consecutive RFID read/swipe within 20 seconds
    //action=6  you are already charging at another charger
    //action=7  succesfull RFID read, but you are not in the userlist
    endchar = endchar + 1;
 80a0cd6:	f103 0301 	add.w	r3, r3, #1
 80a0cda:	607b      	str	r3, [r7, #4]
    if (port == 1 ) 
 80a0cdc:	d004      	beq.n	80a0ce8 <_Z18allowUser_callbackPhj+0x44>
        port = AUTHENTICATION_CAR1;
    else if (port == 2)
        port = AUTHENTICATION_CAR2;
    else port = EXTRA;
 80a0cde:	2802      	cmp	r0, #2
 80a0ce0:	bf0c      	ite	eq
 80a0ce2:	2406      	moveq	r4, #6
 80a0ce4:	2407      	movne	r4, #7
 80a0ce6:	e000      	b.n	80a0cea <_Z18allowUser_callbackPhj+0x46>
    //action=5  you just started a charge on this charger, but have another consecutive RFID read/swipe within 20 seconds
    //action=6  you are already charging at another charger
    //action=7  succesfull RFID read, but you are not in the userlist
    endchar = endchar + 1;
    if (port == 1 ) 
        port = AUTHENTICATION_CAR1;
 80a0ce8:	2405      	movs	r4, #5
    else if (port == 2)
        port = AUTHENTICATION_CAR2;
    else port = EXTRA;
    int retPi = (int) strtol(endchar, &endchar, 10);
 80a0cea:	220a      	movs	r2, #10
 80a0cec:	4618      	mov	r0, r3
 80a0cee:	1d39      	adds	r1, r7, #4
 80a0cf0:	f007 f8c0 	bl	80a7e74 <strtol>
    Pianswer = retPi; 
 80a0cf4:	b282      	uxth	r2, r0
 80a0cf6:	4b15      	ldr	r3, [pc, #84]	; (80a0d4c <_Z18allowUser_callbackPhj+0xa8>)
    if (Pianswer == 0)
 80a0cf8:	b902      	cbnz	r2, 80a0cfc <_Z18allowUser_callbackPhj+0x58>
        Pianswer = 9;
 80a0cfa:	2209      	movs	r2, #9
    switch(retPi) {
 80a0cfc:	3801      	subs	r0, #1
        port = AUTHENTICATION_CAR2;
    else port = EXTRA;
    int retPi = (int) strtol(endchar, &endchar, 10);
    Pianswer = retPi; 
    if (Pianswer == 0)
        Pianswer = 9;
 80a0cfe:	801a      	strh	r2, [r3, #0]
    switch(retPi) {
 80a0d00:	2806      	cmp	r0, #6
 80a0d02:	d81b      	bhi.n	80a0d3c <_Z18allowUser_callbackPhj+0x98>
 80a0d04:	e8df f000 	tbb	[pc, r0]
 80a0d08:	0e0c0a04 	.word	0x0e0c0a04
 80a0d0c:	1614      	.short	0x1614
 80a0d0e:	18          	.byte	0x18
 80a0d0f:	00          	.byte	0x00
        case 1:
            digitalWrite(port, HIGH);
 80a0d10:	2101      	movs	r1, #1
 80a0d12:	4620      	mov	r0, r4
 80a0d14:	f003 ff7f 	bl	80a4c16 <digitalWrite>
            client.publish("HANevse/photonConverted", "successful start new charge");
 80a0d18:	4a0d      	ldr	r2, [pc, #52]	; (80a0d50 <_Z18allowUser_callbackPhj+0xac>)
 80a0d1a:	e010      	b.n	80a0d3e <_Z18allowUser_callbackPhj+0x9a>
            break;
        case 2:
            client.publish("HANevse/photonConverted", "charger is free, but you already swiped the card in the last 20 sec");
 80a0d1c:	4a0d      	ldr	r2, [pc, #52]	; (80a0d54 <_Z18allowUser_callbackPhj+0xb0>)
 80a0d1e:	e00e      	b.n	80a0d3e <_Z18allowUser_callbackPhj+0x9a>
            break;
        case 3:
            client.publish("HANevse/photonConverted", "charger is occupied by another user");
 80a0d20:	4a0d      	ldr	r2, [pc, #52]	; (80a0d58 <_Z18allowUser_callbackPhj+0xb4>)
 80a0d22:	e00c      	b.n	80a0d3e <_Z18allowUser_callbackPhj+0x9a>
            break;
        case 4:
            digitalWrite(port, LOW);
 80a0d24:	2100      	movs	r1, #0
 80a0d26:	4620      	mov	r0, r4
 80a0d28:	f003 ff75 	bl	80a4c16 <digitalWrite>
            client.publish("HANevse/photonConverted", "successful stop charge session");
 80a0d2c:	4a0b      	ldr	r2, [pc, #44]	; (80a0d5c <_Z18allowUser_callbackPhj+0xb8>)
 80a0d2e:	e006      	b.n	80a0d3e <_Z18allowUser_callbackPhj+0x9a>
            break;
        case 5:
            client.publish("HANevse/photonConverted", "you just started a charge at this charger, but had another consecutive RFID swipe within 20 sec");
 80a0d30:	4a0b      	ldr	r2, [pc, #44]	; (80a0d60 <_Z18allowUser_callbackPhj+0xbc>)
 80a0d32:	e004      	b.n	80a0d3e <_Z18allowUser_callbackPhj+0x9a>
            break;
        case 6:
            client.publish("HANevse/photonConverted", "you are already charging at another charger");
 80a0d34:	4a0b      	ldr	r2, [pc, #44]	; (80a0d64 <_Z18allowUser_callbackPhj+0xc0>)
 80a0d36:	e002      	b.n	80a0d3e <_Z18allowUser_callbackPhj+0x9a>
            break;
        case 7:
            client.publish("HANevse/photonConverted", "successful RFID read, but you are not in the userlist");
 80a0d38:	4a0b      	ldr	r2, [pc, #44]	; (80a0d68 <_Z18allowUser_callbackPhj+0xc4>)
 80a0d3a:	e000      	b.n	80a0d3e <_Z18allowUser_callbackPhj+0x9a>
            break;
        default:
            client.publish("HANevse/photonConverted", "ERROR: unknown scenario");
 80a0d3c:	4a0b      	ldr	r2, [pc, #44]	; (80a0d6c <_Z18allowUser_callbackPhj+0xc8>)
 80a0d3e:	490c      	ldr	r1, [pc, #48]	; (80a0d70 <_Z18allowUser_callbackPhj+0xcc>)
 80a0d40:	480c      	ldr	r0, [pc, #48]	; (80a0d74 <_Z18allowUser_callbackPhj+0xd0>)
 80a0d42:	f001 fd2c 	bl	80a279e <_ZN4MQTT7publishEPKcS1_>
        
    }
    
}
 80a0d46:	370c      	adds	r7, #12
 80a0d48:	46bd      	mov	sp, r7
 80a0d4a:	bd90      	pop	{r4, r7, pc}
 80a0d4c:	20000280 	.word	0x20000280
 80a0d50:	080a95f5 	.word	0x080a95f5
 80a0d54:	080a9629 	.word	0x080a9629
 80a0d58:	080a966d 	.word	0x080a966d
 80a0d5c:	080a9691 	.word	0x080a9691
 80a0d60:	080a96b0 	.word	0x080a96b0
 80a0d64:	080a9710 	.word	0x080a9710
 80a0d68:	080a973c 	.word	0x080a973c
 80a0d6c:	080a9772 	.word	0x080a9772
 80a0d70:	080a9611 	.word	0x080a9611
 80a0d74:	200002c4 	.word	0x200002c4

080a0d78 <_Z8callbackPcPhj>:

void callback(char* topic, byte* payload, unsigned int length) {
 80a0d78:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80a0d7a:	4606      	mov	r6, r0
 80a0d7c:	460c      	mov	r4, r1
    test = "99";
 80a0d7e:	481b      	ldr	r0, [pc, #108]	; (80a0dec <_Z8callbackPcPhj+0x74>)
 80a0d80:	491b      	ldr	r1, [pc, #108]	; (80a0df0 <_Z8callbackPcPhj+0x78>)
        
    }
    
}

void callback(char* topic, byte* payload, unsigned int length) {
 80a0d82:	4615      	mov	r5, r2
    test = "99";
 80a0d84:	f002 fee3 	bl	80a3b4e <_ZN6StringaSEPKc>

	if (strcmp(topic, "HANevse/EnergyMeter")==0) {
 80a0d88:	491a      	ldr	r1, [pc, #104]	; (80a0df4 <_Z8callbackPcPhj+0x7c>)
 80a0d8a:	4630      	mov	r0, r6
 80a0d8c:	f005 fc6a 	bl	80a6664 <strcmp>
 80a0d90:	b940      	cbnz	r0, 80a0da4 <_Z8callbackPcPhj+0x2c>
	    test = "1";
 80a0d92:	4919      	ldr	r1, [pc, #100]	; (80a0df8 <_Z8callbackPcPhj+0x80>)
 80a0d94:	4815      	ldr	r0, [pc, #84]	; (80a0dec <_Z8callbackPcPhj+0x74>)
 80a0d96:	f002 feda 	bl	80a3b4e <_ZN6StringaSEPKc>
	    getMeasure_callback(payload, length);
 80a0d9a:	4629      	mov	r1, r5
 80a0d9c:	4620      	mov	r0, r4
 80a0d9e:	f7ff fe5b 	bl	80a0a58 <_Z19getMeasure_callbackPhj>
 80a0da2:	e008      	b.n	80a0db6 <_Z8callbackPcPhj+0x3e>
	}
    else if (strcmp(topic, "HANevse/allowUser")==0)
 80a0da4:	4915      	ldr	r1, [pc, #84]	; (80a0dfc <_Z8callbackPcPhj+0x84>)
 80a0da6:	4630      	mov	r0, r6
 80a0da8:	f005 fc5c 	bl	80a6664 <strcmp>
 80a0dac:	b918      	cbnz	r0, 80a0db6 <_Z8callbackPcPhj+0x3e>
    {
        allowUser_callback(payload, length);
 80a0dae:	4629      	mov	r1, r5
 80a0db0:	4620      	mov	r0, r4
 80a0db2:	f7ff ff77 	bl	80a0ca4 <_Z18allowUser_callbackPhj>
    }
    
	time_t time = Time.now();
 80a0db6:	f003 fa42 	bl	80a423e <_ZN9TimeClass3nowEv>
 80a0dba:	4605      	mov	r5, r0
    //DEBUGPORT.println(time);
    DEBUGPORT.print("MQTT>\tCallback function is called at: ");
 80a0dbc:	f003 fc24 	bl	80a4608 <_Z16_fetch_usbserialv>
 80a0dc0:	490f      	ldr	r1, [pc, #60]	; (80a0e00 <_Z8callbackPcPhj+0x88>)
 80a0dc2:	f003 f80b 	bl	80a3ddc <_ZN5Print5printEPKc>
    DEBUGPORT.println(Time.format(time, TIME_FORMAT_DEFAULT));
 80a0dc6:	f003 fc1f 	bl	80a4608 <_Z16_fetch_usbserialv>
 80a0dca:	4604      	mov	r4, r0
 80a0dcc:	4b0d      	ldr	r3, [pc, #52]	; (80a0e04 <_Z8callbackPcPhj+0x8c>)
 80a0dce:	462a      	mov	r2, r5
 80a0dd0:	681b      	ldr	r3, [r3, #0]
 80a0dd2:	4668      	mov	r0, sp
 80a0dd4:	490c      	ldr	r1, [pc, #48]	; (80a0e08 <_Z8callbackPcPhj+0x90>)
 80a0dd6:	f003 f9df 	bl	80a4198 <_ZN9TimeClass6formatElPKc>
 80a0dda:	9900      	ldr	r1, [sp, #0]
 80a0ddc:	4620      	mov	r0, r4
 80a0dde:	f003 f810 	bl	80a3e02 <_ZN5Print7printlnEPKc>
 80a0de2:	4668      	mov	r0, sp
 80a0de4:	f002 fe1a 	bl	80a3a1c <_ZN6StringD1Ev>
}
 80a0de8:	b004      	add	sp, #16
 80a0dea:	bd70      	pop	{r4, r5, r6, pc}
 80a0dec:	2000049c 	.word	0x2000049c
 80a0df0:	080a978a 	.word	0x080a978a
 80a0df4:	080a978d 	.word	0x080a978d
 80a0df8:	080a9912 	.word	0x080a9912
 80a0dfc:	080a97a1 	.word	0x080a97a1
 80a0e00:	080a97b3 	.word	0x080a97b3
 80a0e04:	2000000c 	.word	0x2000000c
 80a0e08:	20000520 	.word	0x20000520

080a0e0c <_Z15add_Measurementfffffffffmi6String>:

void add_Measurement(float phaseVoltageL1, float phaseVoltageL2, float phaseVoltageL3, float currentL1, float currentL2, float currentL3,  float Power, float Energy, float Frequency, unsigned long Timestamp, int socketId=0, String userId="00") {
 80a0e0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a0e10:	b0ba      	sub	sp, #232	; 0xe8
 80a0e12:	9c46      	ldr	r4, [sp, #280]	; 0x118
 80a0e14:	4680      	mov	r8, r0
 80a0e16:	460f      	mov	r7, r1
	String socketStr = "";
 80a0e18:	a802      	add	r0, sp, #8
 80a0e1a:	497d      	ldr	r1, [pc, #500]	; (80a1010 <_Z15add_Measurementfffffffffmi6String+0x204>)
    //DEBUGPORT.println(time);
    DEBUGPORT.print("MQTT>\tCallback function is called at: ");
    DEBUGPORT.println(Time.format(time, TIME_FORMAT_DEFAULT));
}

void add_Measurement(float phaseVoltageL1, float phaseVoltageL2, float phaseVoltageL3, float currentL1, float currentL2, float currentL3,  float Power, float Energy, float Frequency, unsigned long Timestamp, int socketId=0, String userId="00") {
 80a0e1c:	4616      	mov	r6, r2
 80a0e1e:	461d      	mov	r5, r3
	String socketStr = "";
 80a0e20:	f002 fe43 	bl	80a3aaa <_ZN6StringC1EPK19__FlashStringHelper>
	String userStr = "";
 80a0e24:	497a      	ldr	r1, [pc, #488]	; (80a1010 <_Z15add_Measurementfffffffffmi6String+0x204>)
 80a0e26:	a806      	add	r0, sp, #24
 80a0e28:	f002 fe3f 	bl	80a3aaa <_ZN6StringC1EPK19__FlashStringHelper>
	if(socketId != 0) {
 80a0e2c:	b1b4      	cbz	r4, 80a0e5c <_Z15add_Measurementfffffffffmi6String+0x50>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a0e2e:	4979      	ldr	r1, [pc, #484]	; (80a1014 <_Z15add_Measurementfffffffffmi6String+0x208>)
 80a0e30:	a836      	add	r0, sp, #216	; 0xd8
 80a0e32:	f002 fe3a 	bl	80a3aaa <_ZN6StringC1EPK19__FlashStringHelper>
		socketStr = "%" + String(socketId);
 80a0e36:	220a      	movs	r2, #10
 80a0e38:	4621      	mov	r1, r4
 80a0e3a:	a832      	add	r0, sp, #200	; 0xc8
 80a0e3c:	f002 feaa 	bl	80a3b94 <_ZN6StringC1Eih>
 80a0e40:	a932      	add	r1, sp, #200	; 0xc8
 80a0e42:	a836      	add	r0, sp, #216	; 0xd8
 80a0e44:	f002 ff2e 	bl	80a3ca4 <_ZplRK15StringSumHelperRK6String>
 80a0e48:	4601      	mov	r1, r0
 80a0e4a:	a802      	add	r0, sp, #8
 80a0e4c:	f002 fe5d 	bl	80a3b0a <_ZN6StringaSERKS_>
 80a0e50:	a832      	add	r0, sp, #200	; 0xc8
 80a0e52:	f002 fde3 	bl	80a3a1c <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80a0e56:	a836      	add	r0, sp, #216	; 0xd8
 80a0e58:	f002 fde0 	bl	80a3a1c <_ZN6StringD1Ev>
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
 80a0e5c:	496e      	ldr	r1, [pc, #440]	; (80a1018 <_Z15add_Measurementfffffffffmi6String+0x20c>)
 80a0e5e:	9847      	ldr	r0, [sp, #284]	; 0x11c
 80a0e60:	f002 ff3e 	bl	80a3ce0 <_ZNK6String6equalsEPKc>
	}
	if(userId != "00") {
 80a0e64:	b970      	cbnz	r0, 80a0e84 <_Z15add_Measurementfffffffffmi6String+0x78>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a0e66:	496b      	ldr	r1, [pc, #428]	; (80a1014 <_Z15add_Measurementfffffffffmi6String+0x208>)
 80a0e68:	a836      	add	r0, sp, #216	; 0xd8
 80a0e6a:	f002 fe1e 	bl	80a3aaa <_ZN6StringC1EPK19__FlashStringHelper>
		userStr = "%" + userId;
 80a0e6e:	9947      	ldr	r1, [sp, #284]	; 0x11c
 80a0e70:	a836      	add	r0, sp, #216	; 0xd8
 80a0e72:	f002 ff17 	bl	80a3ca4 <_ZplRK15StringSumHelperRK6String>
 80a0e76:	4601      	mov	r1, r0
 80a0e78:	a806      	add	r0, sp, #24
 80a0e7a:	f002 fe46 	bl	80a3b0a <_ZN6StringaSERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80a0e7e:	a836      	add	r0, sp, #216	; 0xd8
 80a0e80:	f002 fdcc 	bl	80a3a1c <_ZN6StringD1Ev>
	}
	String Body = String(phaseVoltageL1, 2) + "%" + String(phaseVoltageL2, 2) + "%" + String(phaseVoltageL3, 2) + "%" + String(currentL1, 2) + "%" + String(currentL2, 2) + "%" + String(currentL3, 2) + "%" + String(Power, 2) + "%" + String(Energy, 2) + "%" + String(Frequency, 2) + "%" + String(Timestamp) + socketStr + userStr + "%";
 80a0e84:	2202      	movs	r2, #2
 80a0e86:	4641      	mov	r1, r8
 80a0e88:	a80e      	add	r0, sp, #56	; 0x38
 80a0e8a:	f002 febd 	bl	80a3c08 <_ZN6StringC1Efi>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 80a0e8e:	a90e      	add	r1, sp, #56	; 0x38
 80a0e90:	a812      	add	r0, sp, #72	; 0x48
 80a0e92:	f002 fe49 	bl	80a3b28 <_ZN6StringC1ERKS_>
 80a0e96:	495f      	ldr	r1, [pc, #380]	; (80a1014 <_Z15add_Measurementfffffffffmi6String+0x208>)
 80a0e98:	a812      	add	r0, sp, #72	; 0x48
 80a0e9a:	f002 ff0f 	bl	80a3cbc <_ZplRK15StringSumHelperPKc>
 80a0e9e:	4604      	mov	r4, r0
 80a0ea0:	2202      	movs	r2, #2
 80a0ea2:	4639      	mov	r1, r7
 80a0ea4:	a816      	add	r0, sp, #88	; 0x58
 80a0ea6:	f002 feaf 	bl	80a3c08 <_ZN6StringC1Efi>
 80a0eaa:	a916      	add	r1, sp, #88	; 0x58
 80a0eac:	4620      	mov	r0, r4
 80a0eae:	f002 fef9 	bl	80a3ca4 <_ZplRK15StringSumHelperRK6String>
 80a0eb2:	4958      	ldr	r1, [pc, #352]	; (80a1014 <_Z15add_Measurementfffffffffmi6String+0x208>)
 80a0eb4:	f002 ff02 	bl	80a3cbc <_ZplRK15StringSumHelperPKc>
 80a0eb8:	4604      	mov	r4, r0
 80a0eba:	2202      	movs	r2, #2
 80a0ebc:	4631      	mov	r1, r6
 80a0ebe:	a81a      	add	r0, sp, #104	; 0x68
 80a0ec0:	f002 fea2 	bl	80a3c08 <_ZN6StringC1Efi>
 80a0ec4:	a91a      	add	r1, sp, #104	; 0x68
 80a0ec6:	4620      	mov	r0, r4
 80a0ec8:	f002 feec 	bl	80a3ca4 <_ZplRK15StringSumHelperRK6String>
 80a0ecc:	4951      	ldr	r1, [pc, #324]	; (80a1014 <_Z15add_Measurementfffffffffmi6String+0x208>)
 80a0ece:	f002 fef5 	bl	80a3cbc <_ZplRK15StringSumHelperPKc>
 80a0ed2:	4604      	mov	r4, r0
 80a0ed4:	2202      	movs	r2, #2
 80a0ed6:	4629      	mov	r1, r5
 80a0ed8:	a81e      	add	r0, sp, #120	; 0x78
 80a0eda:	f002 fe95 	bl	80a3c08 <_ZN6StringC1Efi>
 80a0ede:	a91e      	add	r1, sp, #120	; 0x78
 80a0ee0:	4620      	mov	r0, r4
 80a0ee2:	f002 fedf 	bl	80a3ca4 <_ZplRK15StringSumHelperRK6String>
 80a0ee6:	494b      	ldr	r1, [pc, #300]	; (80a1014 <_Z15add_Measurementfffffffffmi6String+0x208>)
 80a0ee8:	f002 fee8 	bl	80a3cbc <_ZplRK15StringSumHelperPKc>
 80a0eec:	4604      	mov	r4, r0
 80a0eee:	2202      	movs	r2, #2
 80a0ef0:	9940      	ldr	r1, [sp, #256]	; 0x100
 80a0ef2:	a822      	add	r0, sp, #136	; 0x88
 80a0ef4:	f002 fe88 	bl	80a3c08 <_ZN6StringC1Efi>
 80a0ef8:	a922      	add	r1, sp, #136	; 0x88
 80a0efa:	4620      	mov	r0, r4
 80a0efc:	f002 fed2 	bl	80a3ca4 <_ZplRK15StringSumHelperRK6String>
 80a0f00:	4944      	ldr	r1, [pc, #272]	; (80a1014 <_Z15add_Measurementfffffffffmi6String+0x208>)
 80a0f02:	f002 fedb 	bl	80a3cbc <_ZplRK15StringSumHelperPKc>
 80a0f06:	4604      	mov	r4, r0
 80a0f08:	2202      	movs	r2, #2
 80a0f0a:	9941      	ldr	r1, [sp, #260]	; 0x104
 80a0f0c:	a826      	add	r0, sp, #152	; 0x98
 80a0f0e:	f002 fe7b 	bl	80a3c08 <_ZN6StringC1Efi>
 80a0f12:	a926      	add	r1, sp, #152	; 0x98
 80a0f14:	4620      	mov	r0, r4
 80a0f16:	f002 fec5 	bl	80a3ca4 <_ZplRK15StringSumHelperRK6String>
 80a0f1a:	493e      	ldr	r1, [pc, #248]	; (80a1014 <_Z15add_Measurementfffffffffmi6String+0x208>)
 80a0f1c:	f002 fece 	bl	80a3cbc <_ZplRK15StringSumHelperPKc>
 80a0f20:	4604      	mov	r4, r0
 80a0f22:	2202      	movs	r2, #2
 80a0f24:	9942      	ldr	r1, [sp, #264]	; 0x108
 80a0f26:	a82a      	add	r0, sp, #168	; 0xa8
 80a0f28:	f002 fe6e 	bl	80a3c08 <_ZN6StringC1Efi>
 80a0f2c:	a92a      	add	r1, sp, #168	; 0xa8
 80a0f2e:	4620      	mov	r0, r4
 80a0f30:	f002 feb8 	bl	80a3ca4 <_ZplRK15StringSumHelperRK6String>
 80a0f34:	4937      	ldr	r1, [pc, #220]	; (80a1014 <_Z15add_Measurementfffffffffmi6String+0x208>)
 80a0f36:	f002 fec1 	bl	80a3cbc <_ZplRK15StringSumHelperPKc>
 80a0f3a:	4604      	mov	r4, r0
 80a0f3c:	2202      	movs	r2, #2
 80a0f3e:	9943      	ldr	r1, [sp, #268]	; 0x10c
 80a0f40:	a82e      	add	r0, sp, #184	; 0xb8
 80a0f42:	f002 fe61 	bl	80a3c08 <_ZN6StringC1Efi>
 80a0f46:	a92e      	add	r1, sp, #184	; 0xb8
 80a0f48:	4620      	mov	r0, r4
 80a0f4a:	f002 feab 	bl	80a3ca4 <_ZplRK15StringSumHelperRK6String>
 80a0f4e:	4931      	ldr	r1, [pc, #196]	; (80a1014 <_Z15add_Measurementfffffffffmi6String+0x208>)
 80a0f50:	f002 feb4 	bl	80a3cbc <_ZplRK15StringSumHelperPKc>
 80a0f54:	4604      	mov	r4, r0
 80a0f56:	2202      	movs	r2, #2
 80a0f58:	9944      	ldr	r1, [sp, #272]	; 0x110
 80a0f5a:	a832      	add	r0, sp, #200	; 0xc8
 80a0f5c:	f002 fe54 	bl	80a3c08 <_ZN6StringC1Efi>
 80a0f60:	a932      	add	r1, sp, #200	; 0xc8
 80a0f62:	4620      	mov	r0, r4
 80a0f64:	f002 fe9e 	bl	80a3ca4 <_ZplRK15StringSumHelperRK6String>
 80a0f68:	492a      	ldr	r1, [pc, #168]	; (80a1014 <_Z15add_Measurementfffffffffmi6String+0x208>)
 80a0f6a:	f002 fea7 	bl	80a3cbc <_ZplRK15StringSumHelperPKc>
 80a0f6e:	4604      	mov	r4, r0
 80a0f70:	220a      	movs	r2, #10
 80a0f72:	9945      	ldr	r1, [sp, #276]	; 0x114
 80a0f74:	a836      	add	r0, sp, #216	; 0xd8
 80a0f76:	f002 fe33 	bl	80a3be0 <_ZN6StringC1Emh>
 80a0f7a:	a936      	add	r1, sp, #216	; 0xd8
 80a0f7c:	4620      	mov	r0, r4
 80a0f7e:	f002 fe91 	bl	80a3ca4 <_ZplRK15StringSumHelperRK6String>
 80a0f82:	a902      	add	r1, sp, #8
 80a0f84:	f002 fe8e 	bl	80a3ca4 <_ZplRK15StringSumHelperRK6String>
 80a0f88:	a906      	add	r1, sp, #24
 80a0f8a:	f002 fe8b 	bl	80a3ca4 <_ZplRK15StringSumHelperRK6String>
 80a0f8e:	4921      	ldr	r1, [pc, #132]	; (80a1014 <_Z15add_Measurementfffffffffmi6String+0x208>)
 80a0f90:	f002 fe94 	bl	80a3cbc <_ZplRK15StringSumHelperPKc>
 80a0f94:	4601      	mov	r1, r0
 80a0f96:	a80a      	add	r0, sp, #40	; 0x28
 80a0f98:	f002 fdc6 	bl	80a3b28 <_ZN6StringC1ERKS_>
 80a0f9c:	a836      	add	r0, sp, #216	; 0xd8
 80a0f9e:	f002 fd3d 	bl	80a3a1c <_ZN6StringD1Ev>
 80a0fa2:	a832      	add	r0, sp, #200	; 0xc8
 80a0fa4:	f002 fd3a 	bl	80a3a1c <_ZN6StringD1Ev>
 80a0fa8:	a82e      	add	r0, sp, #184	; 0xb8
 80a0faa:	f002 fd37 	bl	80a3a1c <_ZN6StringD1Ev>
 80a0fae:	a82a      	add	r0, sp, #168	; 0xa8
 80a0fb0:	f002 fd34 	bl	80a3a1c <_ZN6StringD1Ev>
 80a0fb4:	a826      	add	r0, sp, #152	; 0x98
 80a0fb6:	f002 fd31 	bl	80a3a1c <_ZN6StringD1Ev>
 80a0fba:	a822      	add	r0, sp, #136	; 0x88
 80a0fbc:	f002 fd2e 	bl	80a3a1c <_ZN6StringD1Ev>
 80a0fc0:	a81e      	add	r0, sp, #120	; 0x78
 80a0fc2:	f002 fd2b 	bl	80a3a1c <_ZN6StringD1Ev>
 80a0fc6:	a81a      	add	r0, sp, #104	; 0x68
 80a0fc8:	f002 fd28 	bl	80a3a1c <_ZN6StringD1Ev>
 80a0fcc:	a816      	add	r0, sp, #88	; 0x58
 80a0fce:	f002 fd25 	bl	80a3a1c <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80a0fd2:	a812      	add	r0, sp, #72	; 0x48
 80a0fd4:	f002 fd22 	bl	80a3a1c <_ZN6StringD1Ev>
 80a0fd8:	a80e      	add	r0, sp, #56	; 0x38
 80a0fda:	f002 fd1f 	bl	80a3a1c <_ZN6StringD1Ev>
 80a0fde:	2403      	movs	r4, #3
	
	for(int i=0; i<3; i++) {
		if(client.publish("HANevse/photonMeasure", Body, client.QOS2)) {
 80a0fe0:	2500      	movs	r5, #0
 80a0fe2:	9500      	str	r5, [sp, #0]
 80a0fe4:	2302      	movs	r3, #2
 80a0fe6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80a0fe8:	490c      	ldr	r1, [pc, #48]	; (80a101c <_Z15add_Measurementfffffffffmi6String+0x210>)
 80a0fea:	480d      	ldr	r0, [pc, #52]	; (80a1020 <_Z15add_Measurementfffffffffmi6String+0x214>)
 80a0fec:	f001 fbea 	bl	80a27c4 <_ZN4MQTT7publishEPKcS1_NS_9EMQTT_QOSEPt>
 80a0ff0:	b908      	cbnz	r0, 80a0ff6 <_Z15add_Measurementfffffffffmi6String+0x1ea>
	if(userId != "00") {
		userStr = "%" + userId;
	}
	String Body = String(phaseVoltageL1, 2) + "%" + String(phaseVoltageL2, 2) + "%" + String(phaseVoltageL3, 2) + "%" + String(currentL1, 2) + "%" + String(currentL2, 2) + "%" + String(currentL3, 2) + "%" + String(Power, 2) + "%" + String(Energy, 2) + "%" + String(Frequency, 2) + "%" + String(Timestamp) + socketStr + userStr + "%";
	
	for(int i=0; i<3; i++) {
 80a0ff2:	3c01      	subs	r4, #1
 80a0ff4:	d1f5      	bne.n	80a0fe2 <_Z15add_Measurementfffffffffmi6String+0x1d6>
		socketStr = "%" + String(socketId);
	}
	if(userId != "00") {
		userStr = "%" + userId;
	}
	String Body = String(phaseVoltageL1, 2) + "%" + String(phaseVoltageL2, 2) + "%" + String(phaseVoltageL3, 2) + "%" + String(currentL1, 2) + "%" + String(currentL2, 2) + "%" + String(currentL3, 2) + "%" + String(Power, 2) + "%" + String(Energy, 2) + "%" + String(Frequency, 2) + "%" + String(Timestamp) + socketStr + userStr + "%";
 80a0ff6:	a80a      	add	r0, sp, #40	; 0x28
 80a0ff8:	f002 fd10 	bl	80a3a1c <_ZN6StringD1Ev>
    DEBUGPORT.println(Time.format(time, TIME_FORMAT_DEFAULT));
}

void add_Measurement(float phaseVoltageL1, float phaseVoltageL2, float phaseVoltageL3, float currentL1, float currentL2, float currentL3,  float Power, float Energy, float Frequency, unsigned long Timestamp, int socketId=0, String userId="00") {
	String socketStr = "";
	String userStr = "";
 80a0ffc:	a806      	add	r0, sp, #24
 80a0ffe:	f002 fd0d 	bl	80a3a1c <_ZN6StringD1Ev>
    DEBUGPORT.print("MQTT>\tCallback function is called at: ");
    DEBUGPORT.println(Time.format(time, TIME_FORMAT_DEFAULT));
}

void add_Measurement(float phaseVoltageL1, float phaseVoltageL2, float phaseVoltageL3, float currentL1, float currentL2, float currentL3,  float Power, float Energy, float Frequency, unsigned long Timestamp, int socketId=0, String userId="00") {
	String socketStr = "";
 80a1002:	a802      	add	r0, sp, #8
 80a1004:	f002 fd0a 	bl	80a3a1c <_ZN6StringD1Ev>
	for(int i=0; i<3; i++) {
		if(client.publish("HANevse/photonMeasure", Body, client.QOS2)) {
			break;
		}
	}
}
 80a1008:	b03a      	add	sp, #232	; 0xe8
 80a100a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a100e:	bf00      	nop
 80a1010:	080a98e2 	.word	0x080a98e2
 80a1014:	080a97da 	.word	0x080a97da
 80a1018:	080a95c1 	.word	0x080a95c1
 80a101c:	080a97dc 	.word	0x080a97dc
 80a1020:	200002c4 	.word	0x200002c4

080a1024 <_Z12readRFIDCardi>:
    DEBUGPORT.println("Approximate your card to the reader...");
    DEBUGPORT.println();    
    return 1;
}

bool readRFIDCard(int Charger) {
 80a1024:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   // DEBUGPORT.print("readCard>\t");
    bool Authorized = true;
    Pianswer = 0;
 80a1028:	4e9d      	ldr	r6, [pc, #628]	; (80a12a0 <_Z12readRFIDCardi+0x27c>)
 80a102a:	2400      	movs	r4, #0
    if(Charger==1+CHARGEROFFSET)
 80a102c:	2801      	cmp	r0, #1
    DEBUGPORT.println("Approximate your card to the reader...");
    DEBUGPORT.println();    
    return 1;
}

bool readRFIDCard(int Charger) {
 80a102e:	f5ad 7d16 	sub.w	sp, sp, #600	; 0x258
 80a1032:	4605      	mov	r5, r0
   // DEBUGPORT.print("readCard>\t");
    bool Authorized = true;
    Pianswer = 0;
 80a1034:	8034      	strh	r4, [r6, #0]
    if(Charger==1+CHARGEROFFSET)
 80a1036:	f040 80b2 	bne.w	80a119e <_Z12readRFIDCardi+0x17a>
    {
      // Look for new cards
        if ( ! mfrc522_Charger1.PICC_IsNewCardPresent()) 
 80a103a:	489a      	ldr	r0, [pc, #616]	; (80a12a4 <_Z12readRFIDCardi+0x280>)
 80a103c:	f000 ffb3 	bl	80a1fa6 <_ZN7MFRC52221PICC_IsNewCardPresentEv>
 80a1040:	4f98      	ldr	r7, [pc, #608]	; (80a12a4 <_Z12readRFIDCardi+0x280>)
 80a1042:	2800      	cmp	r0, #0
 80a1044:	f000 8115 	beq.w	80a1272 <_Z12readRFIDCardi+0x24e>
        {
            return false;
        }
        // Select one of the cards
        if ( ! mfrc522_Charger1.PICC_ReadCardSerial()) 
 80a1048:	4638      	mov	r0, r7
 80a104a:	f001 f90b 	bl	80a2264 <_ZN7MFRC52219PICC_ReadCardSerialEv>
 80a104e:	2800      	cmp	r0, #0
 80a1050:	f000 810f 	beq.w	80a1272 <_Z12readRFIDCardi+0x24e>
        {
            return false;
        }
  
        //Show UID on serial monitor
        DEBUGPORT.print("readCard>\tUID tag on charger1:");
 80a1054:	f003 fad8 	bl	80a4608 <_Z16_fetch_usbserialv>
 80a1058:	4993      	ldr	r1, [pc, #588]	; (80a12a8 <_Z12readRFIDCardi+0x284>)
 80a105a:	f002 febf 	bl	80a3ddc <_ZN5Print5printEPKc>
        String content = "";        
 80a105e:	4993      	ldr	r1, [pc, #588]	; (80a12ac <_Z12readRFIDCardi+0x288>)
 80a1060:	a802      	add	r0, sp, #8
 80a1062:	f002 fd22 	bl	80a3aaa <_ZN6StringC1EPK19__FlashStringHelper>
        //byte letter;
        for (byte i = 0; i < mfrc522_Charger1.uid.size; i++) 
 80a1066:	46ba      	mov	sl, r7
        {
            DEBUGPORT.print(mfrc522_Charger1.uid.uidByte[i] < 0x10 ? " 0" : " ");
 80a1068:	f8df 9278 	ldr.w	r9, [pc, #632]	; 80a12e4 <_Z12readRFIDCardi+0x2c0>
 80a106c:	f8df 8278 	ldr.w	r8, [pc, #632]	; 80a12e8 <_Z12readRFIDCardi+0x2c4>
  
        //Show UID on serial monitor
        DEBUGPORT.print("readCard>\tUID tag on charger1:");
        String content = "";        
        //byte letter;
        for (byte i = 0; i < mfrc522_Charger1.uid.size; i++) 
 80a1070:	783b      	ldrb	r3, [r7, #0]
 80a1072:	b2e5      	uxtb	r5, r4
 80a1074:	42ab      	cmp	r3, r5
 80a1076:	d92c      	bls.n	80a10d2 <_Z12readRFIDCardi+0xae>
        {
            DEBUGPORT.print(mfrc522_Charger1.uid.uidByte[i] < 0x10 ? " 0" : " ");
 80a1078:	4455      	add	r5, sl
 80a107a:	f003 fac5 	bl	80a4608 <_Z16_fetch_usbserialv>
 80a107e:	7869      	ldrb	r1, [r5, #1]
 80a1080:	3401      	adds	r4, #1
 80a1082:	290f      	cmp	r1, #15
 80a1084:	bf94      	ite	ls
 80a1086:	4649      	movls	r1, r9
 80a1088:	4641      	movhi	r1, r8
 80a108a:	f002 fea7 	bl	80a3ddc <_ZN5Print5printEPKc>
            DEBUGPORT.print(mfrc522_Charger1.uid.uidByte[i], HEX);
 80a108e:	f003 fabb 	bl	80a4608 <_Z16_fetch_usbserialv>
 80a1092:	2210      	movs	r2, #16
 80a1094:	7869      	ldrb	r1, [r5, #1]
 80a1096:	f002 febe 	bl	80a3e16 <_ZN5Print11printNumberEmh>
            content.concat(String(mfrc522_Charger1.uid.uidByte[i] < 0x10 ? " 0" : " "));
 80a109a:	7869      	ldrb	r1, [r5, #1]
 80a109c:	a80a      	add	r0, sp, #40	; 0x28
 80a109e:	290f      	cmp	r1, #15
 80a10a0:	bf94      	ite	ls
 80a10a2:	4649      	movls	r1, r9
 80a10a4:	4641      	movhi	r1, r8
 80a10a6:	f002 fd00 	bl	80a3aaa <_ZN6StringC1EPK19__FlashStringHelper>
 80a10aa:	a90a      	add	r1, sp, #40	; 0x28
 80a10ac:	a802      	add	r0, sp, #8
 80a10ae:	f002 fdd9 	bl	80a3c64 <_ZN6String6concatERKS_>
 80a10b2:	a80a      	add	r0, sp, #40	; 0x28
 80a10b4:	f002 fcb2 	bl	80a3a1c <_ZN6StringD1Ev>
            content.concat(String(mfrc522_Charger1.uid.uidByte[i], HEX));
 80a10b8:	2210      	movs	r2, #16
 80a10ba:	7869      	ldrb	r1, [r5, #1]
 80a10bc:	a80a      	add	r0, sp, #40	; 0x28
 80a10be:	f002 fd57 	bl	80a3b70 <_ZN6StringC1Ehh>
 80a10c2:	a90a      	add	r1, sp, #40	; 0x28
 80a10c4:	a802      	add	r0, sp, #8
 80a10c6:	f002 fdcd 	bl	80a3c64 <_ZN6String6concatERKS_>
 80a10ca:	a80a      	add	r0, sp, #40	; 0x28
 80a10cc:	f002 fca6 	bl	80a3a1c <_ZN6StringD1Ev>
  
        //Show UID on serial monitor
        DEBUGPORT.print("readCard>\tUID tag on charger1:");
        String content = "";        
        //byte letter;
        for (byte i = 0; i < mfrc522_Charger1.uid.size; i++) 
 80a10d0:	e7ce      	b.n	80a1070 <_Z12readRFIDCardi+0x4c>
public:
	explicit JsonWriterStatic() : JsonWriter(staticBuffer, BUFFER_SIZE) {};
 80a10d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80a10d6:	a916      	add	r1, sp, #88	; 0x58
 80a10d8:	a80a      	add	r0, sp, #40	; 0x28
 80a10da:	f001 fd37 	bl	80a2b4c <_ZN10JsonWriterC1EPcj>
 80a10de:	4b74      	ldr	r3, [pc, #464]	; (80a12b0 <_Z12readRFIDCardi+0x28c>)
            content.concat(String(mfrc522_Charger1.uid.uidByte[i], HEX));
        }
        JsonWriterStatic<512> jsonMessage;

        //Authorized=testUser(content,Charger);
        UIDtagCharger1=content.substring(1); //?????? why does it start at 1?
 80a10e0:	2201      	movs	r2, #1
 80a10e2:	a902      	add	r1, sp, #8
 80a10e4:	a806      	add	r0, sp, #24
 80a10e6:	930a      	str	r3, [sp, #40]	; 0x28
 80a10e8:	f002 fe3c 	bl	80a3d64 <_ZNK6String9substringEj>
 80a10ec:	a906      	add	r1, sp, #24
 80a10ee:	4871      	ldr	r0, [pc, #452]	; (80a12b4 <_Z12readRFIDCardi+0x290>)
 80a10f0:	f002 fd25 	bl	80a3b3e <_ZN6StringaSEOS_>
 80a10f4:	a806      	add	r0, sp, #24
 80a10f6:	f002 fc91 	bl	80a3a1c <_ZN6StringD1Ev>
	void init();

	/**
	 * @brief Start a new JSON object. Make sure you finish it with finishObjectOrArray()
	 */
	bool startObject() { return startObjectOrArray('{', '}'); };
 80a10fa:	227d      	movs	r2, #125	; 0x7d
 80a10fc:	217b      	movs	r1, #123	; 0x7b
 80a10fe:	a80a      	add	r0, sp, #40	; 0x28
 80a1100:	f001 fe19 	bl	80a2d36 <_ZN10JsonWriter18startObjectOrArrayEcc>
	 * Uses templates so you can pass any type object that's supported by insertValue() overloads,
	 * for example: bool, int, float, double, const char *.
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
 80a1104:	a80a      	add	r0, sp, #40	; 0x28
 80a1106:	f001 fe0b 	bl	80a2d20 <_ZN10JsonWriter20insertCheckSeparatorEv>
	 * @brief Inserts a quoted string value. This escapes special characters and encodes utf-8.
	 *
	 * You would normally use insertKeyValue() or insertArrayValue() instead of calling this directly
	 * as those functions take care of inserting the separtators between items.
	 */
	void insertValue(const char *value) { insertString(value, true); }
 80a110a:	2201      	movs	r2, #1
 80a110c:	496a      	ldr	r1, [pc, #424]	; (80a12b8 <_Z12readRFIDCardi+0x294>)
 80a110e:	a80a      	add	r0, sp, #40	; 0x28
 80a1110:	f001 fd7a 	bl	80a2c08 <_ZN10JsonWriter12insertStringEPKcb>
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
		insertValue(key);
		insertChar(':');
 80a1114:	213a      	movs	r1, #58	; 0x3a
 80a1116:	a80a      	add	r0, sp, #40	; 0x28
 80a1118:	f001 fd2a 	bl	80a2b70 <_ZN10JsonWriter10insertCharEc>
	 * @brief Inserts an integer value.
	 *
	 * You would normally use insertKeyValue() or insertArrayValue() instead of calling this directly
	 * as those functions take care of inserting the separators between items.
	 */
	void insertValue(int value) { insertsprintf("%d", value); }
 80a111c:	2201      	movs	r2, #1
 80a111e:	4967      	ldr	r1, [pc, #412]	; (80a12bc <_Z12readRFIDCardi+0x298>)
 80a1120:	a80a      	add	r0, sp, #40	; 0x28
 80a1122:	f001 fd64 	bl	80a2bee <_ZN10JsonWriter13insertsprintfEPKcz>
        {
		JsonWriterAutoObject obj(&jsonMessage);

		// Add various types of data
		jsonMessage.insertKeyValue("Charger", Charger);
		jsonMessage.insertKeyValue("UserId", UIDtagCharger1);
 80a1126:	4963      	ldr	r1, [pc, #396]	; (80a12b4 <_Z12readRFIDCardi+0x290>)
 80a1128:	a806      	add	r0, sp, #24
 80a112a:	f002 fcfd 	bl	80a3b28 <_ZN6StringC1ERKS_>
	 * Uses templates so you can pass any type object that's supported by insertValue() overloads,
	 * for example: bool, int, float, double, const char *.
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
 80a112e:	a80a      	add	r0, sp, #40	; 0x28
 80a1130:	f001 fdf6 	bl	80a2d20 <_ZN10JsonWriter20insertCheckSeparatorEv>
	 * @brief Inserts a quoted string value. This escapes special characters and encodes utf-8.
	 *
	 * You would normally use insertKeyValue() or insertArrayValue() instead of calling this directly
	 * as those functions take care of inserting the separtators between items.
	 */
	void insertValue(const char *value) { insertString(value, true); }
 80a1134:	2201      	movs	r2, #1
 80a1136:	4962      	ldr	r1, [pc, #392]	; (80a12c0 <_Z12readRFIDCardi+0x29c>)
 80a1138:	a80a      	add	r0, sp, #40	; 0x28
 80a113a:	f001 fd65 	bl	80a2c08 <_ZN10JsonWriter12insertStringEPKcb>
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
		insertValue(key);
		insertChar(':');
 80a113e:	213a      	movs	r1, #58	; 0x3a
 80a1140:	a80a      	add	r0, sp, #40	; 0x28
 80a1142:	f001 fd15 	bl	80a2b70 <_ZN10JsonWriter10insertCharEc>
	 * See also the version that takes a plain const char *.
	 *
	 * You would normally use insertKeyValue() or insertArrayValue() instead of calling this directly
	 * as those functions take care of inserting the separtators between items.
	 */
	void insertValue(const String &value) { insertString(value.c_str(), true); }
 80a1146:	2201      	movs	r2, #1
 80a1148:	9906      	ldr	r1, [sp, #24]
 80a114a:	a80a      	add	r0, sp, #40	; 0x28
 80a114c:	f001 fd5c 	bl	80a2c08 <_ZN10JsonWriter12insertStringEPKcb>
 80a1150:	a806      	add	r0, sp, #24
 80a1152:	f002 fc63 	bl	80a3a1c <_ZN6StringD1Ev>
		jsonMessage.insertKeyValue("StartTime", Time.now());
 80a1156:	f003 f872 	bl	80a423e <_ZN9TimeClass3nowEv>
 80a115a:	4604      	mov	r4, r0
	 * Uses templates so you can pass any type object that's supported by insertValue() overloads,
	 * for example: bool, int, float, double, const char *.
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
 80a115c:	a80a      	add	r0, sp, #40	; 0x28
 80a115e:	f001 fddf 	bl	80a2d20 <_ZN10JsonWriter20insertCheckSeparatorEv>
	 * @brief Inserts a quoted string value. This escapes special characters and encodes utf-8.
	 *
	 * You would normally use insertKeyValue() or insertArrayValue() instead of calling this directly
	 * as those functions take care of inserting the separtators between items.
	 */
	void insertValue(const char *value) { insertString(value, true); }
 80a1162:	2201      	movs	r2, #1
 80a1164:	4957      	ldr	r1, [pc, #348]	; (80a12c4 <_Z12readRFIDCardi+0x2a0>)
 80a1166:	a80a      	add	r0, sp, #40	; 0x28
 80a1168:	f001 fd4e 	bl	80a2c08 <_ZN10JsonWriter12insertStringEPKcb>
	 */
	template<class T>
	void insertKeyValue(const char *key, T value) {
		insertCheckSeparator();
		insertValue(key);
		insertChar(':');
 80a116c:	213a      	movs	r1, #58	; 0x3a
 80a116e:	a80a      	add	r0, sp, #40	; 0x28
 80a1170:	f001 fcfe 	bl	80a2b70 <_ZN10JsonWriter10insertCharEc>
	 * @brief Inserts a long integer value.
	 *
	 * You would normally use insertKeyValue() or insertArrayValue() instead of calling this directly
	 * as those functions take care of inserting the separators between items.
	 */
	void insertValue(long value) { insertsprintf("%ld", value); }
 80a1174:	4622      	mov	r2, r4
 80a1176:	4954      	ldr	r1, [pc, #336]	; (80a12c8 <_Z12readRFIDCardi+0x2a4>)
 80a1178:	a80a      	add	r0, sp, #40	; 0x28
 80a117a:	f001 fd38 	bl	80a2bee <_ZN10JsonWriter13insertsprintfEPKcz>

	/**
	 * @brief End the object
	 */
	~JsonWriterAutoObject() {
		jw->finishObjectOrArray();
 80a117e:	a80a      	add	r0, sp, #40	; 0x28
 80a1180:	f001 fd04 	bl	80a2b8c <_ZN10JsonWriter19finishObjectOrArrayEv>
	    }
        client.publish("HANevse/updateUser", jsonMessage.getBuffer(), client.QOS2);
 80a1184:	2300      	movs	r3, #0
 80a1186:	9300      	str	r3, [sp, #0]
 80a1188:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80a118a:	2302      	movs	r3, #2
 80a118c:	494f      	ldr	r1, [pc, #316]	; (80a12cc <_Z12readRFIDCardi+0x2a8>)
 80a118e:	4850      	ldr	r0, [pc, #320]	; (80a12d0 <_Z12readRFIDCardi+0x2ac>)
 80a1190:	f001 fb18 	bl	80a27c4 <_ZN4MQTT7publishEPKcS1_NS_9EMQTT_QOSEPt>
            DEBUGPORT.print(mfrc522_Charger1.uid.uidByte[i] < 0x10 ? " 0" : " ");
            DEBUGPORT.print(mfrc522_Charger1.uid.uidByte[i], HEX);
            content.concat(String(mfrc522_Charger1.uid.uidByte[i] < 0x10 ? " 0" : " "));
            content.concat(String(mfrc522_Charger1.uid.uidByte[i], HEX));
        }
        JsonWriterStatic<512> jsonMessage;
 80a1194:	a80a      	add	r0, sp, #40	; 0x28
 80a1196:	f7ff f881 	bl	80a029c <_ZN16JsonWriterStaticILj512EED1Ev>
            return false;
        }
  
        //Show UID on serial monitor
        DEBUGPORT.print("readCard>\tUID tag on charger1:");
        String content = "";        
 80a119a:	a802      	add	r0, sp, #8
 80a119c:	e066      	b.n	80a126c <_Z12readRFIDCardi+0x248>
		jsonMessage.insertKeyValue("UserId", UIDtagCharger1);
		jsonMessage.insertKeyValue("StartTime", Time.now());
	    }
        client.publish("HANevse/updateUser", jsonMessage.getBuffer(), client.QOS2);
    }
    if(Charger==2+CHARGEROFFSET)
 80a119e:	2802      	cmp	r0, #2
 80a11a0:	d169      	bne.n	80a1276 <_Z12readRFIDCardi+0x252>
    {
    
        // Look for new cards
        if ( ! mfrc522_Charger2.PICC_IsNewCardPresent()) 
 80a11a2:	484c      	ldr	r0, [pc, #304]	; (80a12d4 <_Z12readRFIDCardi+0x2b0>)
 80a11a4:	f000 feff 	bl	80a1fa6 <_ZN7MFRC52221PICC_IsNewCardPresentEv>
 80a11a8:	4f4a      	ldr	r7, [pc, #296]	; (80a12d4 <_Z12readRFIDCardi+0x2b0>)
 80a11aa:	2800      	cmp	r0, #0
 80a11ac:	d061      	beq.n	80a1272 <_Z12readRFIDCardi+0x24e>
        {
            return false;
        }
        // Select one of the cards
        if ( ! mfrc522_Charger2.PICC_ReadCardSerial()) 
 80a11ae:	4638      	mov	r0, r7
 80a11b0:	f001 f858 	bl	80a2264 <_ZN7MFRC52219PICC_ReadCardSerialEv>
 80a11b4:	2800      	cmp	r0, #0
 80a11b6:	d05c      	beq.n	80a1272 <_Z12readRFIDCardi+0x24e>
        {
            return false;
        }
        //DEBUGPORT.println("Read something on charger2");
        //Show UID on serial monitor
        DEBUGPORT.print("readCard>\tUID tag on charger2:");
 80a11b8:	f003 fa26 	bl	80a4608 <_Z16_fetch_usbserialv>
 80a11bc:	4946      	ldr	r1, [pc, #280]	; (80a12d8 <_Z12readRFIDCardi+0x2b4>)
 80a11be:	f002 fe0d 	bl	80a3ddc <_ZN5Print5printEPKc>
        String content = (String)Charger;
 80a11c2:	220a      	movs	r2, #10
 80a11c4:	4629      	mov	r1, r5
 80a11c6:	a806      	add	r0, sp, #24
 80a11c8:	f002 fce4 	bl	80a3b94 <_ZN6StringC1Eih>
        content.concat(";");
 80a11cc:	4943      	ldr	r1, [pc, #268]	; (80a12dc <_Z12readRFIDCardi+0x2b8>)
 80a11ce:	a806      	add	r0, sp, #24
 80a11d0:	f002 fd4c 	bl	80a3c6c <_ZN6String6concatEPKc>
        //String content= "";
        //byte letter;
        for (byte i = 0; i < mfrc522_Charger2.uid.size; i++) 
 80a11d4:	46ba      	mov	sl, r7
        {
            DEBUGPORT.print(mfrc522_Charger2.uid.uidByte[i] < 0x10 ? " 0" : " ");
 80a11d6:	f8df 910c 	ldr.w	r9, [pc, #268]	; 80a12e4 <_Z12readRFIDCardi+0x2c0>
 80a11da:	f8df 810c 	ldr.w	r8, [pc, #268]	; 80a12e8 <_Z12readRFIDCardi+0x2c4>
        DEBUGPORT.print("readCard>\tUID tag on charger2:");
        String content = (String)Charger;
        content.concat(";");
        //String content= "";
        //byte letter;
        for (byte i = 0; i < mfrc522_Charger2.uid.size; i++) 
 80a11de:	783b      	ldrb	r3, [r7, #0]
 80a11e0:	b2e5      	uxtb	r5, r4
 80a11e2:	42ab      	cmp	r3, r5
 80a11e4:	d92c      	bls.n	80a1240 <_Z12readRFIDCardi+0x21c>
        {
            DEBUGPORT.print(mfrc522_Charger2.uid.uidByte[i] < 0x10 ? " 0" : " ");
 80a11e6:	4455      	add	r5, sl
 80a11e8:	f003 fa0e 	bl	80a4608 <_Z16_fetch_usbserialv>
 80a11ec:	7869      	ldrb	r1, [r5, #1]
 80a11ee:	3401      	adds	r4, #1
 80a11f0:	290f      	cmp	r1, #15
 80a11f2:	bf94      	ite	ls
 80a11f4:	4649      	movls	r1, r9
 80a11f6:	4641      	movhi	r1, r8
 80a11f8:	f002 fdf0 	bl	80a3ddc <_ZN5Print5printEPKc>
            DEBUGPORT.print(mfrc522_Charger2.uid.uidByte[i], HEX);
 80a11fc:	f003 fa04 	bl	80a4608 <_Z16_fetch_usbserialv>
 80a1200:	2210      	movs	r2, #16
 80a1202:	7869      	ldrb	r1, [r5, #1]
 80a1204:	f002 fe07 	bl	80a3e16 <_ZN5Print11printNumberEmh>
            content.concat(String(mfrc522_Charger2.uid.uidByte[i] < 0x10 ? " 0" : " "));
 80a1208:	7869      	ldrb	r1, [r5, #1]
 80a120a:	a80a      	add	r0, sp, #40	; 0x28
 80a120c:	290f      	cmp	r1, #15
 80a120e:	bf94      	ite	ls
 80a1210:	4649      	movls	r1, r9
 80a1212:	4641      	movhi	r1, r8
 80a1214:	f002 fc49 	bl	80a3aaa <_ZN6StringC1EPK19__FlashStringHelper>
 80a1218:	a90a      	add	r1, sp, #40	; 0x28
 80a121a:	a806      	add	r0, sp, #24
 80a121c:	f002 fd22 	bl	80a3c64 <_ZN6String6concatERKS_>
 80a1220:	a80a      	add	r0, sp, #40	; 0x28
 80a1222:	f002 fbfb 	bl	80a3a1c <_ZN6StringD1Ev>
            content.concat(String(mfrc522_Charger2.uid.uidByte[i], HEX));
 80a1226:	2210      	movs	r2, #16
 80a1228:	7869      	ldrb	r1, [r5, #1]
 80a122a:	a80a      	add	r0, sp, #40	; 0x28
 80a122c:	f002 fca0 	bl	80a3b70 <_ZN6StringC1Ehh>
 80a1230:	a90a      	add	r1, sp, #40	; 0x28
 80a1232:	a806      	add	r0, sp, #24
 80a1234:	f002 fd16 	bl	80a3c64 <_ZN6String6concatERKS_>
 80a1238:	a80a      	add	r0, sp, #40	; 0x28
 80a123a:	f002 fbef 	bl	80a3a1c <_ZN6StringD1Ev>
        DEBUGPORT.print("readCard>\tUID tag on charger2:");
        String content = (String)Charger;
        content.concat(";");
        //String content= "";
        //byte letter;
        for (byte i = 0; i < mfrc522_Charger2.uid.size; i++) 
 80a123e:	e7ce      	b.n	80a11de <_Z12readRFIDCardi+0x1ba>
            DEBUGPORT.print(mfrc522_Charger2.uid.uidByte[i], HEX);
            content.concat(String(mfrc522_Charger2.uid.uidByte[i] < 0x10 ? " 0" : " "));
            content.concat(String(mfrc522_Charger2.uid.uidByte[i], HEX));
        }
        //Authorized=testUser(content,Charger);
        UIDtagCharger2=content.substring(1);
 80a1240:	4c27      	ldr	r4, [pc, #156]	; (80a12e0 <_Z12readRFIDCardi+0x2bc>)
 80a1242:	2201      	movs	r2, #1
 80a1244:	a906      	add	r1, sp, #24
 80a1246:	a80a      	add	r0, sp, #40	; 0x28
 80a1248:	f002 fd8c 	bl	80a3d64 <_ZNK6String9substringEj>
 80a124c:	a90a      	add	r1, sp, #40	; 0x28
 80a124e:	4620      	mov	r0, r4
 80a1250:	f002 fc75 	bl	80a3b3e <_ZN6StringaSEOS_>
 80a1254:	a80a      	add	r0, sp, #40	; 0x28
 80a1256:	f002 fbe1 	bl	80a3a1c <_ZN6StringD1Ev>
        client.publish("HANevse/updateUser", UIDtagCharger2, client.QOS2);
 80a125a:	2300      	movs	r3, #0
 80a125c:	9300      	str	r3, [sp, #0]
 80a125e:	6822      	ldr	r2, [r4, #0]
 80a1260:	2302      	movs	r3, #2
 80a1262:	491a      	ldr	r1, [pc, #104]	; (80a12cc <_Z12readRFIDCardi+0x2a8>)
 80a1264:	481a      	ldr	r0, [pc, #104]	; (80a12d0 <_Z12readRFIDCardi+0x2ac>)
 80a1266:	f001 faad 	bl	80a27c4 <_ZN4MQTT7publishEPKcS1_NS_9EMQTT_QOSEPt>
            return false;
        }
        //DEBUGPORT.println("Read something on charger2");
        //Show UID on serial monitor
        DEBUGPORT.print("readCard>\tUID tag on charger2:");
        String content = (String)Charger;
 80a126a:	a806      	add	r0, sp, #24
 80a126c:	f002 fbd6 	bl	80a3a1c <_ZN6StringD1Ev>
 80a1270:	e001      	b.n	80a1276 <_Z12readRFIDCardi+0x252>
    {
    
        // Look for new cards
        if ( ! mfrc522_Charger2.PICC_IsNewCardPresent()) 
        {
            return false;
 80a1272:	2000      	movs	r0, #0
 80a1274:	e00f      	b.n	80a1296 <_Z12readRFIDCardi+0x272>
        }
        //Authorized=testUser(content,Charger);
        UIDtagCharger2=content.substring(1);
        client.publish("HANevse/updateUser", UIDtagCharger2, client.QOS2);
    }
    DEBUGPORT.println("");
 80a1276:	f003 f9c7 	bl	80a4608 <_Z16_fetch_usbserialv>
 80a127a:	490c      	ldr	r1, [pc, #48]	; (80a12ac <_Z12readRFIDCardi+0x288>)
 80a127c:	f002 fdc1 	bl	80a3e02 <_ZN5Print7printlnEPKc>
    //// Added part, unknown if it can be interrupted by Pi mqtt response
    while(Pianswer < 1)
 80a1280:	8830      	ldrh	r0, [r6, #0]
 80a1282:	b918      	cbnz	r0, 80a128c <_Z12readRFIDCardi+0x268>
    {
        delay(50);
 80a1284:	2032      	movs	r0, #50	; 0x32
 80a1286:	f002 ffeb 	bl	80a4260 <delay>
        UIDtagCharger2=content.substring(1);
        client.publish("HANevse/updateUser", UIDtagCharger2, client.QOS2);
    }
    DEBUGPORT.println("");
    //// Added part, unknown if it can be interrupted by Pi mqtt response
    while(Pianswer < 1)
 80a128a:	e7f9      	b.n	80a1280 <_Z12readRFIDCardi+0x25c>
    {
        delay(50);
    }        
    if (Pianswer==1 || Pianswer==4)    
 80a128c:	2801      	cmp	r0, #1
 80a128e:	d002      	beq.n	80a1296 <_Z12readRFIDCardi+0x272>
 80a1290:	1f03      	subs	r3, r0, #4
 80a1292:	4258      	negs	r0, r3
 80a1294:	4158      	adcs	r0, r3
     return Authorized;
    else 
     return false;
}
 80a1296:	f50d 7d16 	add.w	sp, sp, #600	; 0x258
 80a129a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a129e:	bf00      	nop
 80a12a0:	20000280 	.word	0x20000280
 80a12a4:	2000048c 	.word	0x2000048c
 80a12a8:	080a97f5 	.word	0x080a97f5
 80a12ac:	080a98e2 	.word	0x080a98e2
 80a12b0:	080a9430 	.word	0x080a9430
 80a12b4:	2000031c 	.word	0x2000031c
 80a12b8:	080a9814 	.word	0x080a9814
 80a12bc:	080a9ee7 	.word	0x080a9ee7
 80a12c0:	080a981c 	.word	0x080a981c
 80a12c4:	080a9823 	.word	0x080a9823
 80a12c8:	080a982d 	.word	0x080a982d
 80a12cc:	080a9831 	.word	0x080a9831
 80a12d0:	200002c4 	.word	0x200002c4
 80a12d4:	200002b4 	.word	0x200002b4
 80a12d8:	080a9844 	.word	0x080a9844
 80a12dc:	080a9863 	.word	0x080a9863
 80a12e0:	2000032c 	.word	0x2000032c
 80a12e4:	080a97f2 	.word	0x080a97f2
 80a12e8:	080a98e4 	.word	0x080a98e4

080a12ec <_Z9reconnectv>:

void reconnect(void) {
 80a12ec:	b508      	push	{r3, lr}
    while (!client.isConnected()) {
 80a12ee:	4817      	ldr	r0, [pc, #92]	; (80a134c <_Z9reconnectv+0x60>)
 80a12f0:	f001 f8f1 	bl	80a24d6 <_ZN4MQTT11isConnectedEv>
 80a12f4:	bb40      	cbnz	r0, 80a1348 <_Z9reconnectv+0x5c>
        DEBUGPORT.print("MQTT>\tConnecting to MQTT broker...");
 80a12f6:	f003 f987 	bl	80a4608 <_Z16_fetch_usbserialv>
 80a12fa:	4915      	ldr	r1, [pc, #84]	; (80a1350 <_Z9reconnectv+0x64>)
 80a12fc:	f002 fd6e 	bl	80a3ddc <_ZN5Print5printEPKc>
        if (client.connect("EV-Photon-test")) {
 80a1300:	4914      	ldr	r1, [pc, #80]	; (80a1354 <_Z9reconnectv+0x68>)
 80a1302:	4812      	ldr	r0, [pc, #72]	; (80a134c <_Z9reconnectv+0x60>)
 80a1304:	f001 f9cc 	bl	80a26a0 <_ZN4MQTT7connectEPKc>
 80a1308:	b178      	cbz	r0, 80a132a <_Z9reconnectv+0x3e>
            DEBUGPORT.println("MQTT>\tConnected");
 80a130a:	f003 f97d 	bl	80a4608 <_Z16_fetch_usbserialv>
 80a130e:	4912      	ldr	r1, [pc, #72]	; (80a1358 <_Z9reconnectv+0x6c>)
 80a1310:	f002 fd77 	bl	80a3e02 <_ZN5Print7printlnEPKc>
            //client.subscribe("HANevse/#", client.QOS2);
            client.subscribe("HANevse/EnergyMeter", client.QOS2);
 80a1314:	2202      	movs	r2, #2
 80a1316:	4911      	ldr	r1, [pc, #68]	; (80a135c <_Z9reconnectv+0x70>)
 80a1318:	480c      	ldr	r0, [pc, #48]	; (80a134c <_Z9reconnectv+0x60>)
 80a131a:	f001 fba3 	bl	80a2a64 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>
            client.subscribe("HANevse/allowUser", client.QOS2);
 80a131e:	2202      	movs	r2, #2
 80a1320:	490f      	ldr	r1, [pc, #60]	; (80a1360 <_Z9reconnectv+0x74>)
 80a1322:	480a      	ldr	r0, [pc, #40]	; (80a134c <_Z9reconnectv+0x60>)
 80a1324:	f001 fb9e 	bl	80a2a64 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>
 80a1328:	e7e1      	b.n	80a12ee <_Z9reconnectv+0x2>
        }
        else {
            DEBUGPORT.println("MQTT>\tConnection failed");
 80a132a:	f003 f96d 	bl	80a4608 <_Z16_fetch_usbserialv>
 80a132e:	490d      	ldr	r1, [pc, #52]	; (80a1364 <_Z9reconnectv+0x78>)
 80a1330:	f002 fd67 	bl	80a3e02 <_ZN5Print7printlnEPKc>
            DEBUGPORT.println("MQTT>\tRetrying...");
 80a1334:	f003 f968 	bl	80a4608 <_Z16_fetch_usbserialv>
 80a1338:	490b      	ldr	r1, [pc, #44]	; (80a1368 <_Z9reconnectv+0x7c>)
 80a133a:	f002 fd62 	bl	80a3e02 <_ZN5Print7printlnEPKc>
            delay(5000);
 80a133e:	f241 3088 	movw	r0, #5000	; 0x1388
 80a1342:	f002 ff8d 	bl	80a4260 <delay>
 80a1346:	e7d2      	b.n	80a12ee <_Z9reconnectv+0x2>
 80a1348:	bd08      	pop	{r3, pc}
 80a134a:	bf00      	nop
 80a134c:	200002c4 	.word	0x200002c4
 80a1350:	080a9865 	.word	0x080a9865
 80a1354:	080a9888 	.word	0x080a9888
 80a1358:	080a9897 	.word	0x080a9897
 80a135c:	080a978d 	.word	0x080a978d
 80a1360:	080a97a1 	.word	0x080a97a1
 80a1364:	080a98a7 	.word	0x080a98a7
 80a1368:	080a98bf 	.word	0x080a98bf

080a136c <loop>:
	
	RGB.control(true);
    Time.zone(1); //Dutch time zone
}

void loop() {
 80a136c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    //Check the connection to the MQTT broker
    if (client.isConnected()) {
 80a1370:	48b4      	ldr	r0, [pc, #720]	; (80a1644 <loop+0x2d8>)
	
	RGB.control(true);
    Time.zone(1); //Dutch time zone
}

void loop() {
 80a1372:	b0ad      	sub	sp, #180	; 0xb4
    //Check the connection to the MQTT broker
    if (client.isConnected()) {
 80a1374:	f001 f8af 	bl	80a24d6 <_ZN4MQTT11isConnectedEv>
 80a1378:	b118      	cbz	r0, 80a1382 <loop+0x16>
        client.loop();
 80a137a:	48b2      	ldr	r0, [pc, #712]	; (80a1644 <loop+0x2d8>)
 80a137c:	f001 fa6c 	bl	80a2858 <_ZN4MQTT4loopEv>
 80a1380:	e001      	b.n	80a1386 <loop+0x1a>
    }
    else reconnect();
 80a1382:	f7ff ffb3 	bl	80a12ec <_Z9reconnectv>
    
    Particle.process();
    //currentStr = String(Current[0][0],1)+" "+String( Current[0][1],1)+" "+String(Current[0][2],1)+" "+String(Current[1][0],1)+" "+String( Current[1][1],1)+" "+String(Current[1][2],1)+" "+String(Frequency[0],2);
    currentStr = String(Current[0][0],1)+" "+String( PhaseVoltage[0][1],1)+" "+String(LineVoltage[0][2],1)+" "+String(Power[1][0],1)+" "+String( Energy[1],1)+" "+String(Current[1][2],1)+" "+String(Frequency[0],2);
 80a1386:	4db0      	ldr	r5, [pc, #704]	; (80a1648 <loop+0x2dc>)
    if (client.isConnected()) {
        client.loop();
    }
    else reconnect();
    
    Particle.process();
 80a1388:	f7ff f808 	bl	80a039c <_ZN10CloudClass7processEv>
    //currentStr = String(Current[0][0],1)+" "+String( Current[0][1],1)+" "+String(Current[0][2],1)+" "+String(Current[1][0],1)+" "+String( Current[1][1],1)+" "+String(Current[1][2],1)+" "+String(Frequency[0],2);
    currentStr = String(Current[0][0],1)+" "+String( PhaseVoltage[0][1],1)+" "+String(LineVoltage[0][2],1)+" "+String(Power[1][0],1)+" "+String( Energy[1],1)+" "+String(Current[1][2],1)+" "+String(Frequency[0],2);
 80a138c:	2201      	movs	r2, #1
 80a138e:	6829      	ldr	r1, [r5, #0]
 80a1390:	a80c      	add	r0, sp, #48	; 0x30
 80a1392:	f002 fc39 	bl	80a3c08 <_ZN6StringC1Efi>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 80a1396:	a90c      	add	r1, sp, #48	; 0x30
 80a1398:	a810      	add	r0, sp, #64	; 0x40
 80a139a:	f002 fbc5 	bl	80a3b28 <_ZN6StringC1ERKS_>
 80a139e:	49ab      	ldr	r1, [pc, #684]	; (80a164c <loop+0x2e0>)
 80a13a0:	a810      	add	r0, sp, #64	; 0x40
 80a13a2:	f002 fc8b 	bl	80a3cbc <_ZplRK15StringSumHelperPKc>
 80a13a6:	4604      	mov	r4, r0
 80a13a8:	4fa9      	ldr	r7, [pc, #676]	; (80a1650 <loop+0x2e4>)
 80a13aa:	2201      	movs	r2, #1
 80a13ac:	6879      	ldr	r1, [r7, #4]
 80a13ae:	a814      	add	r0, sp, #80	; 0x50
 80a13b0:	f002 fc2a 	bl	80a3c08 <_ZN6StringC1Efi>
 80a13b4:	a914      	add	r1, sp, #80	; 0x50
 80a13b6:	4620      	mov	r0, r4
 80a13b8:	f002 fc74 	bl	80a3ca4 <_ZplRK15StringSumHelperRK6String>
 80a13bc:	49a3      	ldr	r1, [pc, #652]	; (80a164c <loop+0x2e0>)
 80a13be:	f002 fc7d 	bl	80a3cbc <_ZplRK15StringSumHelperPKc>
 80a13c2:	4604      	mov	r4, r0
 80a13c4:	4ba3      	ldr	r3, [pc, #652]	; (80a1654 <loop+0x2e8>)
 80a13c6:	2201      	movs	r2, #1
 80a13c8:	6899      	ldr	r1, [r3, #8]
 80a13ca:	a818      	add	r0, sp, #96	; 0x60
 80a13cc:	f002 fc1c 	bl	80a3c08 <_ZN6StringC1Efi>
 80a13d0:	a918      	add	r1, sp, #96	; 0x60
 80a13d2:	4620      	mov	r0, r4
 80a13d4:	f002 fc66 	bl	80a3ca4 <_ZplRK15StringSumHelperRK6String>
 80a13d8:	499c      	ldr	r1, [pc, #624]	; (80a164c <loop+0x2e0>)
 80a13da:	f002 fc6f 	bl	80a3cbc <_ZplRK15StringSumHelperPKc>
 80a13de:	4604      	mov	r4, r0
 80a13e0:	4b9d      	ldr	r3, [pc, #628]	; (80a1658 <loop+0x2ec>)
 80a13e2:	2201      	movs	r2, #1
 80a13e4:	68d9      	ldr	r1, [r3, #12]
 80a13e6:	a81c      	add	r0, sp, #112	; 0x70
 80a13e8:	f002 fc0e 	bl	80a3c08 <_ZN6StringC1Efi>
 80a13ec:	a91c      	add	r1, sp, #112	; 0x70
 80a13ee:	4620      	mov	r0, r4
 80a13f0:	f002 fc58 	bl	80a3ca4 <_ZplRK15StringSumHelperRK6String>
 80a13f4:	4995      	ldr	r1, [pc, #596]	; (80a164c <loop+0x2e0>)
 80a13f6:	f002 fc61 	bl	80a3cbc <_ZplRK15StringSumHelperPKc>
 80a13fa:	4604      	mov	r4, r0
 80a13fc:	4b97      	ldr	r3, [pc, #604]	; (80a165c <loop+0x2f0>)
 80a13fe:	2201      	movs	r2, #1
 80a1400:	6859      	ldr	r1, [r3, #4]
 80a1402:	a820      	add	r0, sp, #128	; 0x80
 80a1404:	f002 fc00 	bl	80a3c08 <_ZN6StringC1Efi>
 80a1408:	a920      	add	r1, sp, #128	; 0x80
 80a140a:	4620      	mov	r0, r4
 80a140c:	f002 fc4a 	bl	80a3ca4 <_ZplRK15StringSumHelperRK6String>
 80a1410:	498e      	ldr	r1, [pc, #568]	; (80a164c <loop+0x2e0>)
 80a1412:	f002 fc53 	bl	80a3cbc <_ZplRK15StringSumHelperPKc>
 80a1416:	4604      	mov	r4, r0
 80a1418:	2201      	movs	r2, #1
 80a141a:	6969      	ldr	r1, [r5, #20]
 80a141c:	a824      	add	r0, sp, #144	; 0x90
 80a141e:	f002 fbf3 	bl	80a3c08 <_ZN6StringC1Efi>
 80a1422:	a924      	add	r1, sp, #144	; 0x90
 80a1424:	4620      	mov	r0, r4
 80a1426:	f002 fc3d 	bl	80a3ca4 <_ZplRK15StringSumHelperRK6String>
 80a142a:	4988      	ldr	r1, [pc, #544]	; (80a164c <loop+0x2e0>)
 80a142c:	f002 fc46 	bl	80a3cbc <_ZplRK15StringSumHelperPKc>
 80a1430:	4606      	mov	r6, r0
 80a1432:	4b8b      	ldr	r3, [pc, #556]	; (80a1660 <loop+0x2f4>)
 80a1434:	ac28      	add	r4, sp, #160	; 0xa0
 80a1436:	6819      	ldr	r1, [r3, #0]
 80a1438:	2202      	movs	r2, #2
 80a143a:	4620      	mov	r0, r4
 80a143c:	f002 fbe4 	bl	80a3c08 <_ZN6StringC1Efi>
 80a1440:	4621      	mov	r1, r4
 80a1442:	4630      	mov	r0, r6
 80a1444:	f002 fc2e 	bl	80a3ca4 <_ZplRK15StringSumHelperRK6String>
 80a1448:	4601      	mov	r1, r0
 80a144a:	4886      	ldr	r0, [pc, #536]	; (80a1664 <loop+0x2f8>)
 80a144c:	f002 fb5d 	bl	80a3b0a <_ZN6StringaSERKS_>
 80a1450:	4620      	mov	r0, r4
 80a1452:	f002 fae3 	bl	80a3a1c <_ZN6StringD1Ev>
 80a1456:	a824      	add	r0, sp, #144	; 0x90
 80a1458:	f002 fae0 	bl	80a3a1c <_ZN6StringD1Ev>
 80a145c:	a820      	add	r0, sp, #128	; 0x80
 80a145e:	f002 fadd 	bl	80a3a1c <_ZN6StringD1Ev>
 80a1462:	a81c      	add	r0, sp, #112	; 0x70
 80a1464:	f002 fada 	bl	80a3a1c <_ZN6StringD1Ev>
 80a1468:	a818      	add	r0, sp, #96	; 0x60
 80a146a:	f002 fad7 	bl	80a3a1c <_ZN6StringD1Ev>
 80a146e:	a814      	add	r0, sp, #80	; 0x50
 80a1470:	f002 fad4 	bl	80a3a1c <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80a1474:	a810      	add	r0, sp, #64	; 0x40
 80a1476:	f002 fad1 	bl	80a3a1c <_ZN6StringD1Ev>
 80a147a:	a80c      	add	r0, sp, #48	; 0x30
 80a147c:	f002 face 	bl	80a3a1c <_ZN6StringD1Ev>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a1480:	f001 fee2 	bl	80a3248 <spark_cloud_flag_connected>
 80a1484:	46a9      	mov	r9, r5
    //currentStr=String(Current[1][2],1)+" "+currentStr.substring(0, max(200, currentStr.length()))
    //currentStr = String(CurrentList[0],1)+" "+String(CurrentList[1],1)+" "+String(CurrentList[2],1)+" "+String(CurrentList[3],1)+" "+String(CurrentList[4],1)+" "+String(CurrentList[5],1)+" "+String(CurrentList[6],1)+" "+String(CurrentList[7],1)+" "+String(CurrentList[8],1)+" "+String(CurrentList[9],1)+" "+String(CurrentList[10],1)+" "+String(CurrentList[11],1)+" "+String(CurrentList[12],1)+" "+String(CurrentList[13],1)+" "+String(CurrentList[14],1)+" "+String(CurrentList[15],1)+" "+String(CurrentList[16],1)+" "+String(CurrentList[17],1)+" "+String(CurrentList[18],1)+" "+String(CurrentList[19],1);
    if (Particle.connected() == false) {
 80a1486:	b908      	cbnz	r0, 80a148c <loop+0x120>
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
 80a1488:	f001 fed6 	bl	80a3238 <spark_cloud_flag_connect>
        Particle.connect();
    }
    //int Charger =1; 
    int Charger = readSerialOlimex()+CHARGEROFFSET;
 80a148c:	f7ff f9be 	bl	80a080c <_Z16readSerialOlimexv>
 80a1490:	4606      	mov	r6, r0
    Particle.process();
 80a1492:	f7fe ff83 	bl	80a039c <_ZN10CloudClass7processEv>
    if(counter>10){
 80a1496:	4b74      	ldr	r3, [pc, #464]	; (80a1668 <loop+0x2fc>)
 80a1498:	681a      	ldr	r2, [r3, #0]
 80a149a:	2a0a      	cmp	r2, #10
 80a149c:	dd45      	ble.n	80a152a <loop+0x1be>
		counter = 0;
 80a149e:	2200      	movs	r2, #0
 80a14a0:	601a      	str	r2, [r3, #0]
		DEBUGPORT.println("LatestStartTime>\t"+String(LatestStartTime[0])+", "+String(LatestStartTime[1]));
 80a14a2:	f003 f8b1 	bl	80a4608 <_Z16_fetch_usbserialv>
 80a14a6:	4d71      	ldr	r5, [pc, #452]	; (80a166c <loop+0x300>)
 80a14a8:	4680      	mov	r8, r0
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a14aa:	4971      	ldr	r1, [pc, #452]	; (80a1670 <loop+0x304>)
 80a14ac:	a824      	add	r0, sp, #144	; 0x90
 80a14ae:	f002 fafc 	bl	80a3aaa <_ZN6StringC1EPK19__FlashStringHelper>
 80a14b2:	220a      	movs	r2, #10
 80a14b4:	6829      	ldr	r1, [r5, #0]
 80a14b6:	a820      	add	r0, sp, #128	; 0x80
 80a14b8:	f002 fb92 	bl	80a3be0 <_ZN6StringC1Emh>
 80a14bc:	a920      	add	r1, sp, #128	; 0x80
 80a14be:	a824      	add	r0, sp, #144	; 0x90
 80a14c0:	f002 fbf0 	bl	80a3ca4 <_ZplRK15StringSumHelperRK6String>
 80a14c4:	496b      	ldr	r1, [pc, #428]	; (80a1674 <loop+0x308>)
 80a14c6:	f002 fbf9 	bl	80a3cbc <_ZplRK15StringSumHelperPKc>
 80a14ca:	4682      	mov	sl, r0
 80a14cc:	220a      	movs	r2, #10
 80a14ce:	6869      	ldr	r1, [r5, #4]
 80a14d0:	4620      	mov	r0, r4
 80a14d2:	f002 fb85 	bl	80a3be0 <_ZN6StringC1Emh>
 80a14d6:	4621      	mov	r1, r4
 80a14d8:	4650      	mov	r0, sl
 80a14da:	f002 fbe3 	bl	80a3ca4 <_ZplRK15StringSumHelperRK6String>
 80a14de:	6801      	ldr	r1, [r0, #0]
 80a14e0:	4640      	mov	r0, r8
 80a14e2:	f002 fc8e 	bl	80a3e02 <_ZN5Print7printlnEPKc>
 80a14e6:	4620      	mov	r0, r4
 80a14e8:	f002 fa98 	bl	80a3a1c <_ZN6StringD1Ev>
 80a14ec:	a820      	add	r0, sp, #128	; 0x80
 80a14ee:	f002 fa95 	bl	80a3a1c <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80a14f2:	a824      	add	r0, sp, #144	; 0x90
 80a14f4:	f002 fa92 	bl	80a3a1c <_ZN6StringD1Ev>
		DEBUGPORT.println(String(Current[1][0]+ Current[1][1]+ Current[1][2]));
 80a14f8:	f003 f886 	bl	80a4608 <_Z16_fetch_usbserialv>
 80a14fc:	f8d9 1010 	ldr.w	r1, [r9, #16]
 80a1500:	4605      	mov	r5, r0
 80a1502:	f8d9 000c 	ldr.w	r0, [r9, #12]
 80a1506:	f004 fa7b 	bl	80a5a00 <__addsf3>
 80a150a:	f8d9 1014 	ldr.w	r1, [r9, #20]
 80a150e:	f004 fa77 	bl	80a5a00 <__addsf3>
 80a1512:	2206      	movs	r2, #6
 80a1514:	4601      	mov	r1, r0
 80a1516:	4620      	mov	r0, r4
 80a1518:	f002 fb76 	bl	80a3c08 <_ZN6StringC1Efi>
 80a151c:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80a151e:	4628      	mov	r0, r5
 80a1520:	f002 fc6f 	bl	80a3e02 <_ZN5Print7printlnEPKc>
 80a1524:	4620      	mov	r0, r4
 80a1526:	f002 fa79 	bl	80a3a1c <_ZN6StringD1Ev>
    }
    counter++;
 80a152a:	4a4f      	ldr	r2, [pc, #316]	; (80a1668 <loop+0x2fc>)
		
    // store new measurement value if it is received correctly from energymeter (via the Olimex).
    if(millis()>nextTime[handledCharger] && (Charger==1+CHARGEROFFSET || Charger==2+CHARGEROFFSET)) 
 80a152c:	4d52      	ldr	r5, [pc, #328]	; (80a1678 <loop+0x30c>)
    if(counter>10){
		counter = 0;
		DEBUGPORT.println("LatestStartTime>\t"+String(LatestStartTime[0])+", "+String(LatestStartTime[1]));
		DEBUGPORT.println(String(Current[1][0]+ Current[1][1]+ Current[1][2]));
    }
    counter++;
 80a152e:	6813      	ldr	r3, [r2, #0]
 80a1530:	3301      	adds	r3, #1
 80a1532:	6013      	str	r3, [r2, #0]
 80a1534:	f001 fc6a 	bl	80a2e0c <HAL_Timer_Get_Milli_Seconds>
		
    // store new measurement value if it is received correctly from energymeter (via the Olimex).
    if(millis()>nextTime[handledCharger] && (Charger==1+CHARGEROFFSET || Charger==2+CHARGEROFFSET)) 
 80a1538:	782a      	ldrb	r2, [r5, #0]
 80a153a:	4b50      	ldr	r3, [pc, #320]	; (80a167c <loop+0x310>)
 80a153c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80a1540:	4298      	cmp	r0, r3
 80a1542:	d918      	bls.n	80a1576 <loop+0x20a>
 80a1544:	1e70      	subs	r0, r6, #1
 80a1546:	2801      	cmp	r0, #1
 80a1548:	d815      	bhi.n	80a1576 <loop+0x20a>
    {
        Particle.process();
 80a154a:	f7fe ff27 	bl	80a039c <_ZN10CloudClass7processEv>
        //getUserIdAtSocket(Charger)
        int tempCharger = Charger;
        Charger = handledCharger + 1;
        if(((activeCharger()==Charger) || (activeCharger() == 3)) && (getUserIdAtSocket(Charger)!="00"))
 80a154e:	f7ff f9bf 	bl	80a08d0 <_Z13activeChargerv>
    if(millis()>nextTime[handledCharger] && (Charger==1+CHARGEROFFSET || Charger==2+CHARGEROFFSET)) 
    {
        Particle.process();
        //getUserIdAtSocket(Charger)
        int tempCharger = Charger;
        Charger = handledCharger + 1;
 80a1552:	782d      	ldrb	r5, [r5, #0]
 80a1554:	1c6e      	adds	r6, r5, #1
        if(((activeCharger()==Charger) || (activeCharger() == 3)) && (getUserIdAtSocket(Charger)!="00"))
 80a1556:	4286      	cmp	r6, r0
 80a1558:	f000 8094 	beq.w	80a1684 <loop+0x318>
 80a155c:	2803      	cmp	r0, #3
 80a155e:	f000 8091 	beq.w	80a1684 <loop+0x318>
        {
            //getUserIdAtSocket(Charger+CHARGEROFFSET);
            add_Measurement(PhaseVoltage[Charger-1][0], PhaseVoltage[Charger-1][1], PhaseVoltage[Charger-1][2], Current[Charger-1][0], Current[Charger-1][1], Current[Charger-1][2], Power[Charger-1][0]+Power[Charger-1][1]+Power[Charger-1][2], Energy[Charger-1], Frequency[Charger-1], Time.now(), Charger+CHARGEROFFSET, getUserIdAtSocket(Charger+CHARGEROFFSET));
        }
        Charger = tempCharger;
        nextTime[handledCharger] = millis() + 30000; //every 30 sec
 80a1562:	4b45      	ldr	r3, [pc, #276]	; (80a1678 <loop+0x30c>)
 80a1564:	781c      	ldrb	r4, [r3, #0]
 80a1566:	f001 fc51 	bl	80a2e0c <HAL_Timer_Get_Milli_Seconds>
 80a156a:	4b44      	ldr	r3, [pc, #272]	; (80a167c <loop+0x310>)
 80a156c:	f500 40ea 	add.w	r0, r0, #29952	; 0x7500
 80a1570:	3030      	adds	r0, #48	; 0x30
 80a1572:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
    }
    
    //run loop very often to check new RFID cards
    Particle.process();
 80a1576:	f7fe ff11 	bl	80a039c <_ZN10CloudClass7processEv>
    bool Authorized_Charger1=readRFIDCard(1+CHARGEROFFSET);
 80a157a:	2001      	movs	r0, #1
 80a157c:	f7ff fd52 	bl	80a1024 <_Z12readRFIDCardi>
    bool Authorized_Charger2=readRFIDCard(2+CHARGEROFFSET);
 80a1580:	2002      	movs	r0, #2
 80a1582:	f7ff fd4f 	bl	80a1024 <_Z12readRFIDCardi>
    //DEBUGPORT.println(String(LatestStartTime[0]+60));
    //DEBUGPORT.println(String(Time.now()));
    //DEBUGPORT.println((LatestStartTime[0] + 60 < Time.now()),DEC);
    //if ((LatestStartTime[0] + 60 < Time.now()) && (Current[0][0]+ Current[0][1]+ Current[0][2]) < 1)
    //if (((numberOfZeroReadings[0]>10 && (LatestStartTime[0] + 60 < Time.now()))|| ((Time.now()<LatestStartTime[0] + 70)&&(LatestStartTime[0] + 60 < Time.now()))) && (Current[0][0]+ Current[0][1]+ Current[0][2]) < 1)
    if( ((numberOfZeroReadings[0]>10)||(LatestStartTime[0] + 70 > Time.now()) )&& (LatestStartTime[0] + 60 < Time.now()) && (Current[0][0]+ Current[0][1]+ Current[0][2]) < 1)
 80a1586:	4b3e      	ldr	r3, [pc, #248]	; (80a1680 <loop+0x314>)
 80a1588:	4c38      	ldr	r4, [pc, #224]	; (80a166c <loop+0x300>)
 80a158a:	681a      	ldr	r2, [r3, #0]
 80a158c:	461e      	mov	r6, r3
 80a158e:	2a0a      	cmp	r2, #10
 80a1590:	dd07      	ble.n	80a15a2 <loop+0x236>
 80a1592:	6823      	ldr	r3, [r4, #0]
 80a1594:	f103 053c 	add.w	r5, r3, #60	; 0x3c
 80a1598:	f002 fe51 	bl	80a423e <_ZN9TimeClass3nowEv>
 80a159c:	4285      	cmp	r5, r0
 80a159e:	d308      	bcc.n	80a15b2 <loop+0x246>
 80a15a0:	e016      	b.n	80a15d0 <loop+0x264>
 80a15a2:	6823      	ldr	r3, [r4, #0]
 80a15a4:	f103 0546 	add.w	r5, r3, #70	; 0x46
 80a15a8:	f002 fe49 	bl	80a423e <_ZN9TimeClass3nowEv>
 80a15ac:	4285      	cmp	r5, r0
 80a15ae:	d8f0      	bhi.n	80a1592 <loop+0x226>
 80a15b0:	e00e      	b.n	80a15d0 <loop+0x264>
 80a15b2:	4d25      	ldr	r5, [pc, #148]	; (80a1648 <loop+0x2dc>)
 80a15b4:	6869      	ldr	r1, [r5, #4]
 80a15b6:	6828      	ldr	r0, [r5, #0]
 80a15b8:	f004 fa22 	bl	80a5a00 <__addsf3>
 80a15bc:	68a9      	ldr	r1, [r5, #8]
 80a15be:	f004 fa1f 	bl	80a5a00 <__addsf3>
 80a15c2:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80a15c6:	f004 fcc1 	bl	80a5f4c <__aeabi_fcmplt>
 80a15ca:	2800      	cmp	r0, #0
 80a15cc:	f040 80ad 	bne.w	80a172a <loop+0x3be>
    }
    //DEBUGPORT.println(Current[1][0]+ Current[1][1]+ Current[1][2],4);
    //DEBUGPORT.println(String(LatestStartTime[1]+60));
    //DEBUGPORT.println(String(Time.now()));
    //DEBUGPORT.println((LatestStartTime[1] + 60 < Time.now()),DEC);
    if( ((numberOfZeroReadings[1]>10)||(LatestStartTime[1] + 70 > Time.now()) )&& (LatestStartTime[1] + 60 < Time.now()) && (Current[1][0]+ Current[1][1]+ Current[1][2]) < 1)
 80a15d0:	6873      	ldr	r3, [r6, #4]
 80a15d2:	2b0a      	cmp	r3, #10
 80a15d4:	dd06      	ble.n	80a15e4 <loop+0x278>
 80a15d6:	6864      	ldr	r4, [r4, #4]
 80a15d8:	f002 fe31 	bl	80a423e <_ZN9TimeClass3nowEv>
 80a15dc:	343c      	adds	r4, #60	; 0x3c
 80a15de:	4284      	cmp	r4, r0
 80a15e0:	d308      	bcc.n	80a15f4 <loop+0x288>
 80a15e2:	e016      	b.n	80a1612 <loop+0x2a6>
 80a15e4:	6863      	ldr	r3, [r4, #4]
 80a15e6:	f103 0546 	add.w	r5, r3, #70	; 0x46
 80a15ea:	f002 fe28 	bl	80a423e <_ZN9TimeClass3nowEv>
 80a15ee:	4285      	cmp	r5, r0
 80a15f0:	d8f1      	bhi.n	80a15d6 <loop+0x26a>
 80a15f2:	e00e      	b.n	80a1612 <loop+0x2a6>
 80a15f4:	4c14      	ldr	r4, [pc, #80]	; (80a1648 <loop+0x2dc>)
 80a15f6:	6921      	ldr	r1, [r4, #16]
 80a15f8:	68e0      	ldr	r0, [r4, #12]
 80a15fa:	f004 fa01 	bl	80a5a00 <__addsf3>
 80a15fe:	6961      	ldr	r1, [r4, #20]
 80a1600:	f004 f9fe 	bl	80a5a00 <__addsf3>
 80a1604:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80a1608:	f004 fca0 	bl	80a5f4c <__aeabi_fcmplt>
 80a160c:	2800      	cmp	r0, #0
 80a160e:	f040 80ae 	bne.w	80a176e <loop+0x402>
        digitalWrite(AUTHENTICATION_CAR2,LOW);
        //digitalWrite(D7,LOW);
        LatestStartTime[1]=2147483548;
        //DEBUGPORT.println("Timeout charger2");
    }
    delay(100);
 80a1612:	2064      	movs	r0, #100	; 0x64
 80a1614:	f002 fe24 	bl	80a4260 <delay>
     delay(100);
    }
    */

    //Reset the UIDtag if there is no car charging
    if ((activeCharger()!=1)&&(activeCharger()!=3))
 80a1618:	f7ff f95a 	bl	80a08d0 <_Z13activeChargerv>
 80a161c:	f020 0002 	bic.w	r0, r0, #2
 80a1620:	2801      	cmp	r0, #1
 80a1622:	f040 80c6 	bne.w	80a17b2 <loop+0x446>
        UIDtagCharger1="No ID";
    if ((activeCharger()!=2)&&(activeCharger()!=3))
 80a1626:	f7ff f953 	bl	80a08d0 <_Z13activeChargerv>
 80a162a:	3802      	subs	r0, #2
 80a162c:	2801      	cmp	r0, #1
 80a162e:	f200 80c5 	bhi.w	80a17bc <loop+0x450>
        UIDtagCharger2="No ID";
            
    handledCharger = !handledCharger;
 80a1632:	4a11      	ldr	r2, [pc, #68]	; (80a1678 <loop+0x30c>)
 80a1634:	7813      	ldrb	r3, [r2, #0]
 80a1636:	f083 0301 	eor.w	r3, r3, #1
 80a163a:	7013      	strb	r3, [r2, #0]
 80a163c:	b02d      	add	sp, #180	; 0xb4
 80a163e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a1642:	bf00      	nop
 80a1644:	200002c4 	.word	0x200002c4
 80a1648:	20000364 	.word	0x20000364
 80a164c:	080a98e4 	.word	0x080a98e4
 80a1650:	20000284 	.word	0x20000284
 80a1654:	2000034c 	.word	0x2000034c
 80a1658:	2000037c 	.word	0x2000037c
 80a165c:	20000470 	.word	0x20000470
 80a1660:	200002ac 	.word	0x200002ac
 80a1664:	2000047c 	.word	0x2000047c
 80a1668:	20000008 	.word	0x20000008
 80a166c:	20000278 	.word	0x20000278
 80a1670:	080a98d1 	.word	0x080a98d1
 80a1674:	080a98e3 	.word	0x080a98e3
 80a1678:	20000282 	.word	0x20000282
 80a167c:	20000000 	.word	0x20000000
 80a1680:	20000110 	.word	0x20000110
    {
        Particle.process();
        //getUserIdAtSocket(Charger)
        int tempCharger = Charger;
        Charger = handledCharger + 1;
        if(((activeCharger()==Charger) || (activeCharger() == 3)) && (getUserIdAtSocket(Charger)!="00"))
 80a1684:	4631      	mov	r1, r6
 80a1686:	4620      	mov	r0, r4
 80a1688:	f7ff f9ce 	bl	80a0a28 <_Z17getUserIdAtSocketi>
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
 80a168c:	494e      	ldr	r1, [pc, #312]	; (80a17c8 <loop+0x45c>)
 80a168e:	4620      	mov	r0, r4
 80a1690:	f002 fb26 	bl	80a3ce0 <_ZNK6String6equalsEPKc>
 80a1694:	4680      	mov	r8, r0
 80a1696:	4620      	mov	r0, r4
 80a1698:	f002 f9c0 	bl	80a3a1c <_ZN6StringD1Ev>
 80a169c:	f1b8 0f00 	cmp.w	r8, #0
 80a16a0:	f47f af5f 	bne.w	80a1562 <loop+0x1f6>
        {
            //getUserIdAtSocket(Charger+CHARGEROFFSET);
            add_Measurement(PhaseVoltage[Charger-1][0], PhaseVoltage[Charger-1][1], PhaseVoltage[Charger-1][2], Current[Charger-1][0], Current[Charger-1][1], Current[Charger-1][2], Power[Charger-1][0]+Power[Charger-1][1]+Power[Charger-1][2], Energy[Charger-1], Frequency[Charger-1], Time.now(), Charger+CHARGEROFFSET, getUserIdAtSocket(Charger+CHARGEROFFSET));
 80a16a4:	230c      	movs	r3, #12
 80a16a6:	436b      	muls	r3, r5
 80a16a8:	18fa      	adds	r2, r7, r3
 80a16aa:	f8d2 8004 	ldr.w	r8, [r2, #4]
 80a16ae:	6892      	ldr	r2, [r2, #8]
 80a16b0:	f859 1003 	ldr.w	r1, [r9, r3]
 80a16b4:	9208      	str	r2, [sp, #32]
 80a16b6:	eb09 0203 	add.w	r2, r9, r3
 80a16ba:	f8d2 9004 	ldr.w	r9, [r2, #4]
 80a16be:	f8d2 a008 	ldr.w	sl, [r2, #8]
 80a16c2:	4a42      	ldr	r2, [pc, #264]	; (80a17cc <loop+0x460>)
 80a16c4:	9109      	str	r1, [sp, #36]	; 0x24
 80a16c6:	eb02 0b03 	add.w	fp, r2, r3
 80a16ca:	58d0      	ldr	r0, [r2, r3]
 80a16cc:	f8db 1004 	ldr.w	r1, [fp, #4]
 80a16d0:	58ff      	ldr	r7, [r7, r3]
 80a16d2:	f004 f995 	bl	80a5a00 <__addsf3>
 80a16d6:	f8db 1008 	ldr.w	r1, [fp, #8]
 80a16da:	f004 f991 	bl	80a5a00 <__addsf3>
 80a16de:	4b3c      	ldr	r3, [pc, #240]	; (80a17d0 <loop+0x464>)
 80a16e0:	4a3c      	ldr	r2, [pc, #240]	; (80a17d4 <loop+0x468>)
 80a16e2:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80a16e6:	4683      	mov	fp, r0
 80a16e8:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
 80a16ec:	930b      	str	r3, [sp, #44]	; 0x2c
 80a16ee:	f002 fda6 	bl	80a423e <_ZN9TimeClass3nowEv>
 80a16f2:	4631      	mov	r1, r6
 80a16f4:	900a      	str	r0, [sp, #40]	; 0x28
 80a16f6:	4620      	mov	r0, r4
 80a16f8:	f7ff f996 	bl	80a0a28 <_Z17getUserIdAtSocketi>
 80a16fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80a16fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80a1700:	9205      	str	r2, [sp, #20]
 80a1702:	9303      	str	r3, [sp, #12]
 80a1704:	4638      	mov	r0, r7
 80a1706:	9407      	str	r4, [sp, #28]
 80a1708:	9606      	str	r6, [sp, #24]
 80a170a:	9504      	str	r5, [sp, #16]
 80a170c:	f8cd b008 	str.w	fp, [sp, #8]
 80a1710:	f8cd a004 	str.w	sl, [sp, #4]
 80a1714:	f8cd 9000 	str.w	r9, [sp]
 80a1718:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a171a:	9a08      	ldr	r2, [sp, #32]
 80a171c:	4641      	mov	r1, r8
 80a171e:	f7ff fb75 	bl	80a0e0c <_Z15add_Measurementfffffffffmi6String>
 80a1722:	4620      	mov	r0, r4
 80a1724:	f002 f97a 	bl	80a3a1c <_ZN6StringD1Ev>
 80a1728:	e71b      	b.n	80a1562 <loop+0x1f6>
    //if ((LatestStartTime[0] + 60 < Time.now()) && (Current[0][0]+ Current[0][1]+ Current[0][2]) < 1)
    //if (((numberOfZeroReadings[0]>10 && (LatestStartTime[0] + 60 < Time.now()))|| ((Time.now()<LatestStartTime[0] + 70)&&(LatestStartTime[0] + 60 < Time.now()))) && (Current[0][0]+ Current[0][1]+ Current[0][2]) < 1)
    if( ((numberOfZeroReadings[0]>10)||(LatestStartTime[0] + 70 > Time.now()) )&& (LatestStartTime[0] + 60 < Time.now()) && (Current[0][0]+ Current[0][1]+ Current[0][2]) < 1)
    {   
        //timeout with current almost zero
        DEBUGPORT.println("Timeout charger"+String(CHARGEROFFSET+1));
 80a172a:	f002 ff6d 	bl	80a4608 <_Z16_fetch_usbserialv>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a172e:	492a      	ldr	r1, [pc, #168]	; (80a17d8 <loop+0x46c>)
 80a1730:	4605      	mov	r5, r0
 80a1732:	a828      	add	r0, sp, #160	; 0xa0
 80a1734:	f002 f9b9 	bl	80a3aaa <_ZN6StringC1EPK19__FlashStringHelper>
 80a1738:	220a      	movs	r2, #10
 80a173a:	2101      	movs	r1, #1
 80a173c:	a824      	add	r0, sp, #144	; 0x90
 80a173e:	f002 fa29 	bl	80a3b94 <_ZN6StringC1Eih>
 80a1742:	a924      	add	r1, sp, #144	; 0x90
 80a1744:	a828      	add	r0, sp, #160	; 0xa0
 80a1746:	f002 faad 	bl	80a3ca4 <_ZplRK15StringSumHelperRK6String>
 80a174a:	6801      	ldr	r1, [r0, #0]
 80a174c:	4628      	mov	r0, r5
 80a174e:	f002 fb58 	bl	80a3e02 <_ZN5Print7printlnEPKc>
 80a1752:	a824      	add	r0, sp, #144	; 0x90
 80a1754:	f002 f962 	bl	80a3a1c <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80a1758:	a828      	add	r0, sp, #160	; 0xa0
 80a175a:	f002 f95f 	bl	80a3a1c <_ZN6StringD1Ev>
        digitalWrite(AUTHENTICATION_CAR1,LOW);
 80a175e:	2100      	movs	r1, #0
 80a1760:	2005      	movs	r0, #5
 80a1762:	f003 fa58 	bl	80a4c16 <digitalWrite>
        LatestStartTime[0]=2147483548;
 80a1766:	4a1d      	ldr	r2, [pc, #116]	; (80a17dc <loop+0x470>)
 80a1768:	4b1d      	ldr	r3, [pc, #116]	; (80a17e0 <loop+0x474>)
 80a176a:	601a      	str	r2, [r3, #0]
 80a176c:	e730      	b.n	80a15d0 <loop+0x264>
    //DEBUGPORT.println(String(Time.now()));
    //DEBUGPORT.println((LatestStartTime[1] + 60 < Time.now()),DEC);
    if( ((numberOfZeroReadings[1]>10)||(LatestStartTime[1] + 70 > Time.now()) )&& (LatestStartTime[1] + 60 < Time.now()) && (Current[1][0]+ Current[1][1]+ Current[1][2]) < 1)
    {
        //timeout with current almost zero
        DEBUGPORT.println("Timeout charger"+String(CHARGEROFFSET+2));
 80a176e:	f002 ff4b 	bl	80a4608 <_Z16_fetch_usbserialv>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a1772:	4919      	ldr	r1, [pc, #100]	; (80a17d8 <loop+0x46c>)
 80a1774:	4604      	mov	r4, r0
 80a1776:	a828      	add	r0, sp, #160	; 0xa0
 80a1778:	f002 f997 	bl	80a3aaa <_ZN6StringC1EPK19__FlashStringHelper>
 80a177c:	220a      	movs	r2, #10
 80a177e:	2102      	movs	r1, #2
 80a1780:	a824      	add	r0, sp, #144	; 0x90
 80a1782:	f002 fa07 	bl	80a3b94 <_ZN6StringC1Eih>
 80a1786:	a924      	add	r1, sp, #144	; 0x90
 80a1788:	a828      	add	r0, sp, #160	; 0xa0
 80a178a:	f002 fa8b 	bl	80a3ca4 <_ZplRK15StringSumHelperRK6String>
 80a178e:	6801      	ldr	r1, [r0, #0]
 80a1790:	4620      	mov	r0, r4
 80a1792:	f002 fb36 	bl	80a3e02 <_ZN5Print7printlnEPKc>
 80a1796:	a824      	add	r0, sp, #144	; 0x90
 80a1798:	f002 f940 	bl	80a3a1c <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80a179c:	a828      	add	r0, sp, #160	; 0xa0
 80a179e:	f002 f93d 	bl	80a3a1c <_ZN6StringD1Ev>
        digitalWrite(AUTHENTICATION_CAR2,LOW);
 80a17a2:	2100      	movs	r1, #0
 80a17a4:	2006      	movs	r0, #6
 80a17a6:	f003 fa36 	bl	80a4c16 <digitalWrite>
        //digitalWrite(D7,LOW);
        LatestStartTime[1]=2147483548;
 80a17aa:	4a0c      	ldr	r2, [pc, #48]	; (80a17dc <loop+0x470>)
 80a17ac:	4b0c      	ldr	r3, [pc, #48]	; (80a17e0 <loop+0x474>)
 80a17ae:	605a      	str	r2, [r3, #4]
 80a17b0:	e72f      	b.n	80a1612 <loop+0x2a6>
    }
    */

    //Reset the UIDtag if there is no car charging
    if ((activeCharger()!=1)&&(activeCharger()!=3))
        UIDtagCharger1="No ID";
 80a17b2:	490c      	ldr	r1, [pc, #48]	; (80a17e4 <loop+0x478>)
 80a17b4:	480c      	ldr	r0, [pc, #48]	; (80a17e8 <loop+0x47c>)
 80a17b6:	f002 f9ca 	bl	80a3b4e <_ZN6StringaSEPKc>
 80a17ba:	e734      	b.n	80a1626 <loop+0x2ba>
    if ((activeCharger()!=2)&&(activeCharger()!=3))
        UIDtagCharger2="No ID";
 80a17bc:	4909      	ldr	r1, [pc, #36]	; (80a17e4 <loop+0x478>)
 80a17be:	480b      	ldr	r0, [pc, #44]	; (80a17ec <loop+0x480>)
 80a17c0:	f002 f9c5 	bl	80a3b4e <_ZN6StringaSEPKc>
 80a17c4:	e735      	b.n	80a1632 <loop+0x2c6>
 80a17c6:	bf00      	nop
 80a17c8:	080a95c1 	.word	0x080a95c1
 80a17cc:	2000037c 	.word	0x2000037c
 80a17d0:	20000470 	.word	0x20000470
 80a17d4:	200002ac 	.word	0x200002ac
 80a17d8:	080a98e6 	.word	0x080a98e6
 80a17dc:	7fffff9c 	.word	0x7fffff9c
 80a17e0:	20000278 	.word	0x20000278
 80a17e4:	080a98f6 	.word	0x080a98f6
 80a17e8:	2000031c 	.word	0x2000031c
 80a17ec:	2000032c 	.word	0x2000032c

080a17f0 <_ZN10CloudClass8functionIA9_cIPFi6StringEEEEbRKT_DpT0_>:
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return register_function(call_raw_user_function, (void*)func, funcKey);
 80a17f0:	4602      	mov	r2, r0
 80a17f2:	4801      	ldr	r0, [pc, #4]	; (80a17f8 <_ZN10CloudClass8functionIA9_cIPFi6StringEEEEbRKT_DpT0_+0x8>)
 80a17f4:	f002 be16 	b.w	80a4424 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 80a17f8:	080a43f9 	.word	0x080a43f9

080a17fc <setup>:
            delay(5000);
        }
    }
}

void setup() {
 80a17fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    DEBUGPORT.begin(115200); 
 80a17fe:	f002 ff03 	bl	80a4608 <_Z16_fetch_usbserialv>
 80a1802:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80a1806:	f002 fef3 	bl	80a45f0 <_ZN9USBSerial5beginEl>
    Serial1.begin(9600);
 80a180a:	f002 ffb3 	bl	80a4774 <_Z22__fetch_global_Serial1v>
 80a180e:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a1812:	f002 ffa9 	bl	80a4768 <_ZN11USARTSerial5beginEm>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a1816:	f001 fd17 	bl	80a3248 <spark_cloud_flag_connected>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80a181a:	2800      	cmp	r0, #0
 80a181c:	d073      	beq.n	80a1906 <setup+0x10a>
 80a181e:	f001 fd13 	bl	80a3248 <spark_cloud_flag_connected>
    //DEBUGPORT.println(Voltage,5);
    //DEBUGPORT.println(String(Voltage,5));
    
    waitUntil(Particle.connected);
    
    pinMode(AUTHENTICATION_CAR1, OUTPUT); //pinMode(D1, OUTPUT); //Charger1_Authorized
 80a1822:	2101      	movs	r1, #1
 80a1824:	2005      	movs	r0, #5
 80a1826:	f003 f9e5 	bl	80a4bf4 <pinMode>
    pinMode(AUTHENTICATION_CAR2, OUTPUT); //pinMode(D2, OUTPUT); //Charger2_Authorized
 80a182a:	2101      	movs	r1, #1
 80a182c:	2006      	movs	r0, #6
 80a182e:	f003 f9e1 	bl	80a4bf4 <pinMode>
    pinMode(PILOT_FEEDBACK_CAR_1,INPUT);
 80a1832:	2100      	movs	r1, #0
 80a1834:	2010      	movs	r0, #16
 80a1836:	f003 f9dd 	bl	80a4bf4 <pinMode>
    pinMode(PILOT_FEEDBACK_CAR_2,INPUT);
 80a183a:	2100      	movs	r1, #0
 80a183c:	2011      	movs	r0, #17
 80a183e:	f003 f9d9 	bl	80a4bf4 <pinMode>
    pinMode(WAKEUP_OLIMEX, OUTPUT);
 80a1842:	2101      	movs	r1, #1
 80a1844:	2002      	movs	r0, #2
 80a1846:	f003 f9d5 	bl	80a4bf4 <pinMode>
    pinMode(RESET_OLIMEX, OUTPUT);
 80a184a:	2101      	movs	r1, #1
 80a184c:	2004      	movs	r0, #4
 80a184e:	f003 f9d1 	bl	80a4bf4 <pinMode>
    pinMode(D7, OUTPUT);
 80a1852:	2101      	movs	r1, #1
 80a1854:	2007      	movs	r0, #7
 80a1856:	f003 f9cd 	bl	80a4bf4 <pinMode>
    
    digitalWrite(AUTHENTICATION_CAR1, LOW); //digitalWrite(D1,LOW);
 80a185a:	2100      	movs	r1, #0
 80a185c:	2005      	movs	r0, #5
 80a185e:	f003 f9da 	bl	80a4c16 <digitalWrite>
    digitalWrite(AUTHENTICATION_CAR2, LOW);//digitalWrite(D2,LOW);
 80a1862:	2100      	movs	r1, #0
 80a1864:	2006      	movs	r0, #6
 80a1866:	f003 f9d6 	bl	80a4c16 <digitalWrite>
    digitalWrite(WAKEUP_OLIMEX, LOW);
 80a186a:	2100      	movs	r1, #0
 80a186c:	2002      	movs	r0, #2
 80a186e:	f003 f9d2 	bl	80a4c16 <digitalWrite>
    digitalWrite(RESET_OLIMEX, HIGH);
 80a1872:	2101      	movs	r1, #1
 80a1874:	2004      	movs	r0, #4
 80a1876:	f003 f9ce 	bl	80a4c16 <digitalWrite>
    digitalWrite(D7, LOW);
 80a187a:	2100      	movs	r1, #0
 80a187c:	2007      	movs	r0, #7
 80a187e:	f003 f9ca 	bl	80a4c16 <digitalWrite>
    
    initRFID("");
 80a1882:	4922      	ldr	r1, [pc, #136]	; (80a190c <setup+0x110>)
 80a1884:	4668      	mov	r0, sp
 80a1886:	f002 f910 	bl	80a3aaa <_ZN6StringC1EPK19__FlashStringHelper>
 80a188a:	4668      	mov	r0, sp
 80a188c:	f7fe fd2e 	bl	80a02ec <_Z8initRFID6String>
 80a1890:	4668      	mov	r0, sp
 80a1892:	f002 f8c3 	bl	80a3a1c <_ZN6StringD1Ev>
    
    //Particle.process();
    //resetOlimex("");
    //Particle.process();

	Particle.function("switchTest",switchTest);
 80a1896:	491e      	ldr	r1, [pc, #120]	; (80a1910 <setup+0x114>)
 80a1898:	481e      	ldr	r0, [pc, #120]	; (80a1914 <setup+0x118>)
 80a189a:	f7ff ffa9 	bl	80a17f0 <_ZN10CloudClass8functionIA9_cIPFi6StringEEEEbRKT_DpT0_>
    Particle.function("maxCurrentC1",maxCurrentC1);
 80a189e:	491e      	ldr	r1, [pc, #120]	; (80a1918 <setup+0x11c>)
 80a18a0:	481e      	ldr	r0, [pc, #120]	; (80a191c <setup+0x120>)
 80a18a2:	f7ff ffa5 	bl	80a17f0 <_ZN10CloudClass8functionIA9_cIPFi6StringEEEEbRKT_DpT0_>
    Particle.function("maxCurrentC2",maxCurrentC2);
 80a18a6:	491e      	ldr	r1, [pc, #120]	; (80a1920 <setup+0x124>)
 80a18a8:	481e      	ldr	r0, [pc, #120]	; (80a1924 <setup+0x128>)
 80a18aa:	f7ff ffa1 	bl	80a17f0 <_ZN10CloudClass8functionIA9_cIPFi6StringEEEEbRKT_DpT0_>
    Particle.function("resetOlimex",resetOlimex);
 80a18ae:	491e      	ldr	r1, [pc, #120]	; (80a1928 <setup+0x12c>)
 80a18b0:	481e      	ldr	r0, [pc, #120]	; (80a192c <setup+0x130>)
 80a18b2:	f7ff ff9d 	bl	80a17f0 <_ZN10CloudClass8functionIA9_cIPFi6StringEEEEbRKT_DpT0_>
    Particle.function("progModeOlmx",progModeOlmx);
 80a18b6:	491e      	ldr	r1, [pc, #120]	; (80a1930 <setup+0x134>)
 80a18b8:	481e      	ldr	r0, [pc, #120]	; (80a1934 <setup+0x138>)
 80a18ba:	f7ff ff99 	bl	80a17f0 <_ZN10CloudClass8functionIA9_cIPFi6StringEEEEbRKT_DpT0_>
    Particle.function("resetParticl",resetParticl);
 80a18be:	491e      	ldr	r1, [pc, #120]	; (80a1938 <setup+0x13c>)
 80a18c0:	481e      	ldr	r0, [pc, #120]	; (80a193c <setup+0x140>)
 80a18c2:	f7ff ff95 	bl	80a17f0 <_ZN10CloudClass8functionIA9_cIPFi6StringEEEEbRKT_DpT0_>
    //Particle.function("AuthPinsHigh",AuthPinsHigh);
    //Particle.function("AuthPinsLow",AuthPinsLow);
    Particle.function("WifiSignal",WifiSignal);
 80a18c6:	491e      	ldr	r1, [pc, #120]	; (80a1940 <setup+0x144>)
 80a18c8:	481e      	ldr	r0, [pc, #120]	; (80a1944 <setup+0x148>)
 80a18ca:	f7ff ff91 	bl	80a17f0 <_ZN10CloudClass8functionIA9_cIPFi6StringEEEEbRKT_DpT0_>
    Particle.function("initRFID",initRFID);
 80a18ce:	491e      	ldr	r1, [pc, #120]	; (80a1948 <setup+0x14c>)
 80a18d0:	481e      	ldr	r0, [pc, #120]	; (80a194c <setup+0x150>)
 80a18d2:	f7ff ff8d 	bl	80a17f0 <_ZN10CloudClass8functionIA9_cIPFi6StringEEEEbRKT_DpT0_>
        return _variable(varKey, &var, DOUBLE);
    }

    static inline bool _variable(const char* varKey, const String& var)
    {
        return _variable(varKey, &var, STRING);
 80a18d6:	491e      	ldr	r1, [pc, #120]	; (80a1950 <setup+0x154>)
 80a18d8:	481e      	ldr	r0, [pc, #120]	; (80a1954 <setup+0x158>)
 80a18da:	f7fe fcf5 	bl	80a02c8 <_ZN10CloudClass9_variableIcEEbPKT_PK6StringRK17CloudVariableTypeIPKcvE.isra.7>
 80a18de:	491e      	ldr	r1, [pc, #120]	; (80a1958 <setup+0x15c>)
 80a18e0:	481e      	ldr	r0, [pc, #120]	; (80a195c <setup+0x160>)
 80a18e2:	f7fe fcf1 	bl	80a02c8 <_ZN10CloudClass9_variableIcEEbPKT_PK6StringRK17CloudVariableTypeIPKcvE.isra.7>
 80a18e6:	491e      	ldr	r1, [pc, #120]	; (80a1960 <setup+0x164>)
 80a18e8:	481e      	ldr	r0, [pc, #120]	; (80a1964 <setup+0x168>)
 80a18ea:	f7fe fced 	bl	80a02c8 <_ZN10CloudClass9_variableIcEEbPKT_PK6StringRK17CloudVariableTypeIPKcvE.isra.7>
    Particle.variable("currentStr",currentStr);
    Particle.variable("ShareVar",ShareVar);
    //Particle.variable("Current", Current_Str);
    Particle.variable("Topic", test);
    Particle.process();
 80a18ee:	f7fe fd55 	bl	80a039c <_ZN10CloudClass7processEv>
	
	RGB.control(true);
 80a18f2:	2001      	movs	r0, #1
 80a18f4:	f002 fcc6 	bl	80a4284 <_ZN8RGBClass7controlEb>
    Time.zone(1); //Dutch time zone
 80a18f8:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80a18fc:	f002 fbac 	bl	80a4058 <_ZN9TimeClass4zoneEf>
}
 80a1900:	b005      	add	sp, #20
 80a1902:	f85d fb04 	ldr.w	pc, [sp], #4
            spark_process();
 80a1906:	f001 fc8f 	bl	80a3228 <spark_process>
 80a190a:	e784      	b.n	80a1816 <setup+0x1a>
 80a190c:	080a98e2 	.word	0x080a98e2
 80a1910:	080a0149 	.word	0x080a0149
 80a1914:	080a98fc 	.word	0x080a98fc
 80a1918:	080a0181 	.word	0x080a0181
 80a191c:	080a9907 	.word	0x080a9907
 80a1920:	080a0205 	.word	0x080a0205
 80a1924:	080a9914 	.word	0x080a9914
 80a1928:	080a00c3 	.word	0x080a00c3
 80a192c:	080a9921 	.word	0x080a9921
 80a1930:	080a00e1 	.word	0x080a00e1
 80a1934:	080a992d 	.word	0x080a992d
 80a1938:	080a0141 	.word	0x080a0141
 80a193c:	080a993a 	.word	0x080a993a
 80a1940:	080a0125 	.word	0x080a0125
 80a1944:	080a9947 	.word	0x080a9947
 80a1948:	080a02ed 	.word	0x080a02ed
 80a194c:	080a9952 	.word	0x080a9952
 80a1950:	2000047c 	.word	0x2000047c
 80a1954:	080a995b 	.word	0x080a995b
 80a1958:	2000033c 	.word	0x2000033c
 80a195c:	080a9966 	.word	0x080a9966
 80a1960:	2000049c 	.word	0x2000049c
 80a1964:	080a996f 	.word	0x080a996f

080a1968 <_GLOBAL__sub_I_readnextLine>:
        UIDtagCharger1="No ID";
    if ((activeCharger()!=2)&&(activeCharger()!=3))
        UIDtagCharger2="No ID";
            
    handledCharger = !handledCharger;
 80a1968:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
void reconnect(void);
void callback(char* topic, byte* payload, unsigned int length);
void charToString(const char in[], String &out);
void getMeasure_callback(byte* payload, unsigned int length);

String UIDtagCharger1="No ID";
 80a196a:	4f32      	ldr	r7, [pc, #200]	; (80a1a34 <_GLOBAL__sub_I_readnextLine+0xcc>)
 80a196c:	4e32      	ldr	r6, [pc, #200]	; (80a1a38 <_GLOBAL__sub_I_readnextLine+0xd0>)
 80a196e:	4c33      	ldr	r4, [pc, #204]	; (80a1a3c <_GLOBAL__sub_I_readnextLine+0xd4>)
 80a1970:	4d33      	ldr	r5, [pc, #204]	; (80a1a40 <_GLOBAL__sub_I_readnextLine+0xd8>)
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a1972:	f001 f9fb 	bl	80a2d6c <HAL_Pin_Map>
 80a1976:	4639      	mov	r1, r7
 80a1978:	4630      	mov	r0, r6
 80a197a:	f002 f896 	bl	80a3aaa <_ZN6StringC1EPK19__FlashStringHelper>
 80a197e:	4630      	mov	r0, r6
String UIDtagCharger2="No ID";
 80a1980:	4e30      	ldr	r6, [pc, #192]	; (80a1a44 <_GLOBAL__sub_I_readnextLine+0xdc>)
void reconnect(void);
void callback(char* topic, byte* payload, unsigned int length);
void charToString(const char in[], String &out);
void getMeasure_callback(byte* payload, unsigned int length);

String UIDtagCharger1="No ID";
 80a1982:	4622      	mov	r2, r4
 80a1984:	4629      	mov	r1, r5
 80a1986:	f003 f9cb 	bl	80a4d20 <__aeabi_atexit>
String UIDtagCharger2="No ID";
 80a198a:	4639      	mov	r1, r7
 80a198c:	4630      	mov	r0, r6
 80a198e:	f002 f88c 	bl	80a3aaa <_ZN6StringC1EPK19__FlashStringHelper>
 80a1992:	4622      	mov	r2, r4
 80a1994:	4629      	mov	r1, r5
 80a1996:	4630      	mov	r0, r6
 80a1998:	f003 f9c2 	bl	80a4d20 <__aeabi_atexit>
    bool clearCredentials(void) {
        return network_clear_credentials(*this, 0, NULL, NULL);
    }

    int selectAntenna(WLanSelectAntenna_TypeDef antenna) {
        return wlan_select_antenna(antenna);
 80a199c:	2001      	movs	r0, #1
 80a199e:	f001 fb7f 	bl	80a30a0 <wlan_select_antenna>
//SYSTEM_THREAD(ENABLED);

//MQTT setting
//byte server[] = {192,168,43,249};
//MQTT client(server, 1883, callback);
MQTT client("broker.hivemq.com", 1883, MQTT_DEFAULT_KEEPALIVE, callback, 512);
 80a19a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80a19a6:	4e28      	ldr	r6, [pc, #160]	; (80a1a48 <_GLOBAL__sub_I_readnextLine+0xe0>)
 80a19a8:	9301      	str	r3, [sp, #4]
 80a19aa:	4b28      	ldr	r3, [pc, #160]	; (80a1a4c <_GLOBAL__sub_I_readnextLine+0xe4>)
 80a19ac:	f240 725b 	movw	r2, #1883	; 0x75b
 80a19b0:	9300      	str	r3, [sp, #0]
 80a19b2:	4927      	ldr	r1, [pc, #156]	; (80a1a50 <_GLOBAL__sub_I_readnextLine+0xe8>)
 80a19b4:	230f      	movs	r3, #15
 80a19b6:	4630      	mov	r0, r6
 80a19b8:	f000 fca6 	bl	80a2308 <_ZN4MQTTC1EPctiPFvS0_PhjEi>
 80a19bc:	4630      	mov	r0, r6
//char ID[] = "11111";

String test = "0";
 80a19be:	4e25      	ldr	r6, [pc, #148]	; (80a1a54 <_GLOBAL__sub_I_readnextLine+0xec>)
//SYSTEM_THREAD(ENABLED);

//MQTT setting
//byte server[] = {192,168,43,249};
//MQTT client(server, 1883, callback);
MQTT client("broker.hivemq.com", 1883, MQTT_DEFAULT_KEEPALIVE, callback, 512);
 80a19c0:	4622      	mov	r2, r4
 80a19c2:	4925      	ldr	r1, [pc, #148]	; (80a1a58 <_GLOBAL__sub_I_readnextLine+0xf0>)
 80a19c4:	f003 f9ac 	bl	80a4d20 <__aeabi_atexit>
//char ID[] = "11111";

String test = "0";
 80a19c8:	4924      	ldr	r1, [pc, #144]	; (80a1a5c <_GLOBAL__sub_I_readnextLine+0xf4>)
 80a19ca:	4630      	mov	r0, r6
 80a19cc:	f002 f86d 	bl	80a3aaa <_ZN6StringC1EPK19__FlashStringHelper>
 80a19d0:	4622      	mov	r2, r4
 80a19d2:	4629      	mov	r1, r5
 80a19d4:	4630      	mov	r0, r6
 80a19d6:	f003 f9a3 	bl	80a4d20 <__aeabi_atexit>
int counter=11;
MFRC522 mfrc522_Charger1(SS_PIN_CHARGER1, RST_PIN);   // Create MFRC522 instance.
MFRC522 mfrc522_Charger2(SS_PIN_CHARGER2, RST_PIN);   // Create MFRC522 instance.
unsigned long LatestStartTime[2]={0,0};
bool handledCharger=0;
String ShareVar;
 80a19da:	4e21      	ldr	r6, [pc, #132]	; (80a1a60 <_GLOBAL__sub_I_readnextLine+0xf8>)
 80a19dc:	4f21      	ldr	r7, [pc, #132]	; (80a1a64 <_GLOBAL__sub_I_readnextLine+0xfc>)

String test = "0";


int counter=11;
MFRC522 mfrc522_Charger1(SS_PIN_CHARGER1, RST_PIN);   // Create MFRC522 instance.
 80a19de:	220a      	movs	r2, #10
 80a19e0:	210b      	movs	r1, #11
 80a19e2:	4821      	ldr	r0, [pc, #132]	; (80a1a68 <_GLOBAL__sub_I_readnextLine+0x100>)
 80a19e4:	f000 f848 	bl	80a1a78 <_ZN7MFRC522C1Ehh>
MFRC522 mfrc522_Charger2(SS_PIN_CHARGER2, RST_PIN);   // Create MFRC522 instance.
 80a19e8:	220a      	movs	r2, #10
 80a19ea:	210c      	movs	r1, #12
 80a19ec:	481f      	ldr	r0, [pc, #124]	; (80a1a6c <_GLOBAL__sub_I_readnextLine+0x104>)
 80a19ee:	f000 f843 	bl	80a1a78 <_ZN7MFRC522C1Ehh>
unsigned long LatestStartTime[2]={0,0};
bool handledCharger=0;
String ShareVar;
 80a19f2:	4631      	mov	r1, r6
 80a19f4:	4638      	mov	r0, r7
 80a19f6:	f002 f858 	bl	80a3aaa <_ZN6StringC1EPK19__FlashStringHelper>
 80a19fa:	4638      	mov	r0, r7
//     int PendingCharger;
//     unsigned long StartTime;
// };

EMeter EMeterData[NUMBEROFMETERS];
String EVListStr="";
 80a19fc:	4f1c      	ldr	r7, [pc, #112]	; (80a1a70 <_GLOBAL__sub_I_readnextLine+0x108>)
int counter=11;
MFRC522 mfrc522_Charger1(SS_PIN_CHARGER1, RST_PIN);   // Create MFRC522 instance.
MFRC522 mfrc522_Charger2(SS_PIN_CHARGER2, RST_PIN);   // Create MFRC522 instance.
unsigned long LatestStartTime[2]={0,0};
bool handledCharger=0;
String ShareVar;
 80a19fe:	4622      	mov	r2, r4
 80a1a00:	4629      	mov	r1, r5
 80a1a02:	f003 f98d 	bl	80a4d20 <__aeabi_atexit>
//     int PendingCharger;
//     unsigned long StartTime;
// };

EMeter EMeterData[NUMBEROFMETERS];
String EVListStr="";
 80a1a06:	4631      	mov	r1, r6
 80a1a08:	4638      	mov	r0, r7
 80a1a0a:	f002 f84e 	bl	80a3aaa <_ZN6StringC1EPK19__FlashStringHelper>
 80a1a0e:	4638      	mov	r0, r7
String currentStr="";
 80a1a10:	4f18      	ldr	r7, [pc, #96]	; (80a1a74 <_GLOBAL__sub_I_readnextLine+0x10c>)
//     int PendingCharger;
//     unsigned long StartTime;
// };

EMeter EMeterData[NUMBEROFMETERS];
String EVListStr="";
 80a1a12:	4622      	mov	r2, r4
 80a1a14:	4629      	mov	r1, r5
 80a1a16:	f003 f983 	bl	80a4d20 <__aeabi_atexit>
String currentStr="";
 80a1a1a:	4631      	mov	r1, r6
 80a1a1c:	4638      	mov	r0, r7
 80a1a1e:	f002 f844 	bl	80a3aaa <_ZN6StringC1EPK19__FlashStringHelper>
 80a1a22:	4622      	mov	r2, r4
 80a1a24:	4629      	mov	r1, r5
 80a1a26:	4638      	mov	r0, r7
        UIDtagCharger1="No ID";
    if ((activeCharger()!=2)&&(activeCharger()!=3))
        UIDtagCharger2="No ID";
            
    handledCharger = !handledCharger;
 80a1a28:	b003      	add	sp, #12
 80a1a2a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
//     unsigned long StartTime;
// };

EMeter EMeterData[NUMBEROFMETERS];
String EVListStr="";
String currentStr="";
 80a1a2e:	f003 b977 	b.w	80a4d20 <__aeabi_atexit>
 80a1a32:	bf00      	nop
 80a1a34:	080a98f6 	.word	0x080a98f6
 80a1a38:	2000031c 	.word	0x2000031c
 80a1a3c:	200000fc 	.word	0x200000fc
 80a1a40:	080a3a1d 	.word	0x080a3a1d
 80a1a44:	2000032c 	.word	0x2000032c
 80a1a48:	200002c4 	.word	0x200002c4
 80a1a4c:	080a0d79 	.word	0x080a0d79
 80a1a50:	080a9975 	.word	0x080a9975
 80a1a54:	2000049c 	.word	0x2000049c
 80a1a58:	080a2ab1 	.word	0x080a2ab1
 80a1a5c:	080a97f3 	.word	0x080a97f3
 80a1a60:	080a98e2 	.word	0x080a98e2
 80a1a64:	2000033c 	.word	0x2000033c
 80a1a68:	2000048c 	.word	0x2000048c
 80a1a6c:	200002b4 	.word	0x200002b4
 80a1a70:	2000029c 	.word	0x2000029c
 80a1a74:	2000047c 	.word	0x2000047c

080a1a78 <_ZN7MFRC522C1Ehh>:

/**
 * Constructor.
 * Prepares the output pins.
 */
MFRC522::MFRC522(	byte chipSelectPin,		///< Arduino pin connected to MFRC522's SPI slave select input (Pin 24, NSS, active low)
 80a1a78:	b538      	push	{r3, r4, r5, lr}
 80a1a7a:	4604      	mov	r4, r0
 80a1a7c:	4615      	mov	r5, r2
 80a1a7e:	4608      	mov	r0, r1
					byte resetPowerDownPin	///< Arduino pin connected to MFRC522's reset and power down input (Pin 6, NRSTPD, active low)
				) {
	// Set the chipSelectPin as digital output, do not select the slave yet
	_chipSelectPin = chipSelectPin;
 80a1a80:	7321      	strb	r1, [r4, #12]
	pinMode(_chipSelectPin, OUTPUT);
 80a1a82:	2101      	movs	r1, #1
 80a1a84:	f003 f8b6 	bl	80a4bf4 <pinMode>
	digitalWrite(_chipSelectPin, HIGH);
 80a1a88:	7b20      	ldrb	r0, [r4, #12]
 80a1a8a:	2101      	movs	r1, #1
 80a1a8c:	f003 f8c3 	bl	80a4c16 <digitalWrite>
	
	// Set the resetPowerDownPin as digital output, do not reset or power down.
	_resetPowerDownPin = resetPowerDownPin;
	pinMode(_resetPowerDownPin, OUTPUT);
 80a1a90:	4628      	mov	r0, r5
	_chipSelectPin = chipSelectPin;
	pinMode(_chipSelectPin, OUTPUT);
	digitalWrite(_chipSelectPin, HIGH);
	
	// Set the resetPowerDownPin as digital output, do not reset or power down.
	_resetPowerDownPin = resetPowerDownPin;
 80a1a92:	7365      	strb	r5, [r4, #13]
	pinMode(_resetPowerDownPin, OUTPUT);
 80a1a94:	2101      	movs	r1, #1
 80a1a96:	f003 f8ad 	bl	80a4bf4 <pinMode>
	digitalWrite(_resetPowerDownPin, LOW);
 80a1a9a:	7b60      	ldrb	r0, [r4, #13]
 80a1a9c:	2100      	movs	r1, #0
 80a1a9e:	f003 f8ba 	bl	80a4c16 <digitalWrite>
	
	// Set SPI bus to work with MFRC522 chip.
	//setSPIConfig();
} // End constructor
 80a1aa2:	4620      	mov	r0, r4
 80a1aa4:	bd38      	pop	{r3, r4, r5, pc}
	...

080a1aa8 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>:
namespace particle {

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
 80a1aa8:	b538      	push	{r3, r4, r5, lr}
        static SPIClass instance(Interface);
 80a1aaa:	4d0b      	ldr	r5, [pc, #44]	; (80a1ad8 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x30>)
 80a1aac:	6829      	ldr	r1, [r5, #0]
 80a1aae:	f011 0401 	ands.w	r4, r1, #1
 80a1ab2:	d10f      	bne.n	80a1ad4 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x2c>
 80a1ab4:	4628      	mov	r0, r5
 80a1ab6:	f7fe fafa 	bl	80a00ae <__cxa_guard_acquire>
 80a1aba:	b158      	cbz	r0, 80a1ad4 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x2c>
 80a1abc:	4621      	mov	r1, r4
 80a1abe:	4807      	ldr	r0, [pc, #28]	; (80a1adc <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x34>)
 80a1ac0:	f001 fc28 	bl	80a3314 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a1ac4:	4628      	mov	r0, r5
 80a1ac6:	f7fe faf7 	bl	80a00b8 <__cxa_guard_release>
 80a1aca:	4a05      	ldr	r2, [pc, #20]	; (80a1ae0 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x38>)
 80a1acc:	4905      	ldr	r1, [pc, #20]	; (80a1ae4 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x3c>)
 80a1ace:	4803      	ldr	r0, [pc, #12]	; (80a1adc <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x34>)
 80a1ad0:	f003 f926 	bl	80a4d20 <__aeabi_atexit>
        return instance;
    }
 80a1ad4:	4801      	ldr	r0, [pc, #4]	; (80a1adc <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x34>)
 80a1ad6:	bd38      	pop	{r3, r4, r5, pc}
 80a1ad8:	20000100 	.word	0x20000100
 80a1adc:	20000104 	.word	0x20000104
 80a1ae0:	200000fc 	.word	0x200000fc
 80a1ae4:	080a028d 	.word	0x080a028d

080a1ae8 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8transferEh.isra.9>:
        return instance().setClockSpeed(value, scale);
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
 80a1ae8:	b510      	push	{r4, lr}
 80a1aea:	4604      	mov	r4, r0
        return instance().transfer(data);
 80a1aec:	f7ff ffdc 	bl	80a1aa8 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
 80a1af0:	4621      	mov	r1, r4
    }
 80a1af2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
 80a1af6:	f001 bc2c 	b.w	80a3352 <_ZN8SPIClass8transferEh>

080a1afa <_ZN7MFRC52217PCD_WriteRegisterEhh>:
 * Writes a byte to the specified register in the MFRC522 chip.
 * The interface is described in the datasheet section 8.1.2.
 */
void MFRC522::PCD_WriteRegister(	byte reg,		///< The register to write to. One of the PCD_Register enums.
									byte value		///< The value to write.
								) {
 80a1afa:	b570      	push	{r4, r5, r6, lr}
 80a1afc:	460e      	mov	r6, r1
 80a1afe:	4615      	mov	r5, r2
 80a1b00:	4604      	mov	r4, r0
	digitalWrite(_chipSelectPin, LOW);		// Select slave
 80a1b02:	2100      	movs	r1, #0
 80a1b04:	7b00      	ldrb	r0, [r0, #12]
 80a1b06:	f003 f886 	bl	80a4c16 <digitalWrite>
	SPI.transfer(reg & 0x7E);					// MSB == 0 is for writing. LSB is not used in address. Datasheet section 8.1.2.3.
 80a1b0a:	f006 007e 	and.w	r0, r6, #126	; 0x7e
 80a1b0e:	f7ff ffeb 	bl	80a1ae8 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8transferEh.isra.9>
	SPI.transfer(value);
 80a1b12:	4628      	mov	r0, r5
 80a1b14:	f7ff ffe8 	bl	80a1ae8 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8transferEh.isra.9>
	digitalWrite(_chipSelectPin, HIGH);		// Release slave again
 80a1b18:	7b20      	ldrb	r0, [r4, #12]
 80a1b1a:	2101      	movs	r1, #1
} // End PCD_WriteRegister()
 80a1b1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
									byte value		///< The value to write.
								) {
	digitalWrite(_chipSelectPin, LOW);		// Select slave
	SPI.transfer(reg & 0x7E);					// MSB == 0 is for writing. LSB is not used in address. Datasheet section 8.1.2.3.
	SPI.transfer(value);
	digitalWrite(_chipSelectPin, HIGH);		// Release slave again
 80a1b20:	f003 b879 	b.w	80a4c16 <digitalWrite>

080a1b24 <_ZN7MFRC52217PCD_WriteRegisterEhhPh>:
 * The interface is described in the datasheet section 8.1.2.
 */
void MFRC522::PCD_WriteRegister(	byte reg,		///< The register to write to. One of the PCD_Register enums.
									byte count,		///< The number of bytes to write to the register
									byte *values	///< The values to write. Byte array.
								) {
 80a1b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1b26:	460d      	mov	r5, r1
 80a1b28:	4614      	mov	r4, r2
	digitalWrite(_chipSelectPin, LOW);		// Select slave
 80a1b2a:	2100      	movs	r1, #0
 * The interface is described in the datasheet section 8.1.2.
 */
void MFRC522::PCD_WriteRegister(	byte reg,		///< The register to write to. One of the PCD_Register enums.
									byte count,		///< The number of bytes to write to the register
									byte *values	///< The values to write. Byte array.
								) {
 80a1b2c:	4606      	mov	r6, r0
	digitalWrite(_chipSelectPin, LOW);		// Select slave
 80a1b2e:	7b00      	ldrb	r0, [r0, #12]
 * The interface is described in the datasheet section 8.1.2.
 */
void MFRC522::PCD_WriteRegister(	byte reg,		///< The register to write to. One of the PCD_Register enums.
									byte count,		///< The number of bytes to write to the register
									byte *values	///< The values to write. Byte array.
								) {
 80a1b30:	461f      	mov	r7, r3
	digitalWrite(_chipSelectPin, LOW);		// Select slave
 80a1b32:	f003 f870 	bl	80a4c16 <digitalWrite>
	SPI.transfer(reg & 0x7E);				// MSB == 0 is for writing. LSB is not used in address. Datasheet section 8.1.2.3.
 80a1b36:	f005 007e 	and.w	r0, r5, #126	; 0x7e
 80a1b3a:	f7ff ffd5 	bl	80a1ae8 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8transferEh.isra.9>
 80a1b3e:	3c01      	subs	r4, #1
 80a1b40:	1e7d      	subs	r5, r7, #1
 80a1b42:	443c      	add	r4, r7
	for (byte index = 0; index < count; index++) {
 80a1b44:	42a5      	cmp	r5, r4
 80a1b46:	d004      	beq.n	80a1b52 <_ZN7MFRC52217PCD_WriteRegisterEhhPh+0x2e>
		SPI.transfer(values[index]);
 80a1b48:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 80a1b4c:	f7ff ffcc 	bl	80a1ae8 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8transferEh.isra.9>
									byte count,		///< The number of bytes to write to the register
									byte *values	///< The values to write. Byte array.
								) {
	digitalWrite(_chipSelectPin, LOW);		// Select slave
	SPI.transfer(reg & 0x7E);				// MSB == 0 is for writing. LSB is not used in address. Datasheet section 8.1.2.3.
	for (byte index = 0; index < count; index++) {
 80a1b50:	e7f8      	b.n	80a1b44 <_ZN7MFRC52217PCD_WriteRegisterEhhPh+0x20>
		SPI.transfer(values[index]);
	}
	digitalWrite(_chipSelectPin, HIGH);		// Release slave again
 80a1b52:	7b30      	ldrb	r0, [r6, #12]
 80a1b54:	2101      	movs	r1, #1
} // End PCD_WriteRegister()
 80a1b56:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	digitalWrite(_chipSelectPin, LOW);		// Select slave
	SPI.transfer(reg & 0x7E);				// MSB == 0 is for writing. LSB is not used in address. Datasheet section 8.1.2.3.
	for (byte index = 0; index < count; index++) {
		SPI.transfer(values[index]);
	}
	digitalWrite(_chipSelectPin, HIGH);		// Release slave again
 80a1b5a:	f003 b85c 	b.w	80a4c16 <digitalWrite>

080a1b5e <_ZN7MFRC52216PCD_ReadRegisterEh>:
/**
 * Reads a byte from the specified register in the MFRC522 chip.
 * The interface is described in the datasheet section 8.1.2.
 */
byte MFRC522::PCD_ReadRegister(	byte reg	///< The register to read from. One of the PCD_Register enums.
								) {
 80a1b5e:	b538      	push	{r3, r4, r5, lr}
 80a1b60:	460c      	mov	r4, r1
 80a1b62:	4605      	mov	r5, r0
	byte value;
	digitalWrite(_chipSelectPin, LOW);			// Select slave
 80a1b64:	2100      	movs	r1, #0
 80a1b66:	7b00      	ldrb	r0, [r0, #12]
 80a1b68:	f003 f855 	bl	80a4c16 <digitalWrite>
	SPI.transfer(0x80 | (reg & 0x7E));			// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
 80a1b6c:	f004 007e 	and.w	r0, r4, #126	; 0x7e
 80a1b70:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 80a1b74:	f7ff ffb8 	bl	80a1ae8 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8transferEh.isra.9>
	value = SPI.transfer(0);					// Read the value back. Send 0 to stop reading.
 80a1b78:	2000      	movs	r0, #0
 80a1b7a:	f7ff ffb5 	bl	80a1ae8 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8transferEh.isra.9>
 80a1b7e:	4604      	mov	r4, r0
	digitalWrite(_chipSelectPin, HIGH);			// Release slave again
 80a1b80:	2101      	movs	r1, #1
 80a1b82:	7b28      	ldrb	r0, [r5, #12]
 80a1b84:	f003 f847 	bl	80a4c16 <digitalWrite>
	return value;
} // End PCD_ReadRegister()
 80a1b88:	4620      	mov	r0, r4
 80a1b8a:	bd38      	pop	{r3, r4, r5, pc}

080a1b8c <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>:
/**
 * Sets the bits given in mask in register reg.
 */
void MFRC522::PCD_SetRegisterBitMask(	byte reg,	///< The register to update. One of the PCD_Register enums.
										byte mask	///< The bits to set.
									) { 
 80a1b8c:	b570      	push	{r4, r5, r6, lr}
 80a1b8e:	4605      	mov	r5, r0
 80a1b90:	460e      	mov	r6, r1
 80a1b92:	4614      	mov	r4, r2
	byte tmp;
	tmp = PCD_ReadRegister(reg);
 80a1b94:	f7ff ffe3 	bl	80a1b5e <_ZN7MFRC52216PCD_ReadRegisterEh>
	PCD_WriteRegister(reg, tmp | mask);			// set bit mask
 80a1b98:	ea40 0204 	orr.w	r2, r0, r4
 80a1b9c:	4631      	mov	r1, r6
 80a1b9e:	4628      	mov	r0, r5
} // End PCD_SetRegisterBitMask()
 80a1ba0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
void MFRC522::PCD_SetRegisterBitMask(	byte reg,	///< The register to update. One of the PCD_Register enums.
										byte mask	///< The bits to set.
									) { 
	byte tmp;
	tmp = PCD_ReadRegister(reg);
	PCD_WriteRegister(reg, tmp | mask);			// set bit mask
 80a1ba4:	b2d2      	uxtb	r2, r2
 80a1ba6:	f7ff bfa8 	b.w	80a1afa <_ZN7MFRC52217PCD_WriteRegisterEhh>

080a1baa <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>:
/**
 * Clears the bits given in mask from register reg.
 */
void MFRC522::PCD_ClearRegisterBitMask(	byte reg,	///< The register to update. One of the PCD_Register enums.
										byte mask	///< The bits to clear.
									  ) {
 80a1baa:	b570      	push	{r4, r5, r6, lr}
 80a1bac:	4605      	mov	r5, r0
 80a1bae:	460e      	mov	r6, r1
 80a1bb0:	4614      	mov	r4, r2
	byte tmp;
	tmp = PCD_ReadRegister(reg);
 80a1bb2:	f7ff ffd4 	bl	80a1b5e <_ZN7MFRC52216PCD_ReadRegisterEh>
	PCD_WriteRegister(reg, tmp & (~mask));		// clear bit mask
 80a1bb6:	ea20 0204 	bic.w	r2, r0, r4
 80a1bba:	4631      	mov	r1, r6
 80a1bbc:	4628      	mov	r0, r5
} // End PCD_ClearRegisterBitMask()
 80a1bbe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
void MFRC522::PCD_ClearRegisterBitMask(	byte reg,	///< The register to update. One of the PCD_Register enums.
										byte mask	///< The bits to clear.
									  ) {
	byte tmp;
	tmp = PCD_ReadRegister(reg);
	PCD_WriteRegister(reg, tmp & (~mask));		// clear bit mask
 80a1bc2:	b2d2      	uxtb	r2, r2
 80a1bc4:	f7ff bf99 	b.w	80a1afa <_ZN7MFRC52217PCD_WriteRegisterEhh>

080a1bc8 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>:
 * @return STATUS_OK on success, STATUS_??? otherwise.
 */
byte MFRC522::PCD_CalculateCRC(	byte *data,		///< In: Pointer to the data to transfer to the FIFO for CRC calculation.
								byte length,	///< In: The number of bytes to transfer.
								byte *result	///< Out: Pointer to result buffer. Result is written to result[0..1], low byte first.
					 ) {
 80a1bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1bca:	4604      	mov	r4, r0
 80a1bcc:	4615      	mov	r5, r2
 80a1bce:	460f      	mov	r7, r1
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop any active command.
 80a1bd0:	2200      	movs	r2, #0
 80a1bd2:	2102      	movs	r1, #2
 * @return STATUS_OK on success, STATUS_??? otherwise.
 */
byte MFRC522::PCD_CalculateCRC(	byte *data,		///< In: Pointer to the data to transfer to the FIFO for CRC calculation.
								byte length,	///< In: The number of bytes to transfer.
								byte *result	///< Out: Pointer to result buffer. Result is written to result[0..1], low byte first.
					 ) {
 80a1bd4:	461e      	mov	r6, r3
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop any active command.
 80a1bd6:	f7ff ff90 	bl	80a1afa <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(DivIrqReg, 0x04);					// Clear the CRCIRq interrupt request bit
 80a1bda:	2204      	movs	r2, #4
 80a1bdc:	210a      	movs	r1, #10
 80a1bde:	4620      	mov	r0, r4
 80a1be0:	f7ff ff8b 	bl	80a1afa <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_SetRegisterBitMask(FIFOLevelReg, 0x80);		// FlushBuffer = 1, FIFO initialization
 80a1be4:	2280      	movs	r2, #128	; 0x80
 80a1be6:	2114      	movs	r1, #20
 80a1be8:	4620      	mov	r0, r4
 80a1bea:	f7ff ffcf 	bl	80a1b8c <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>
	PCD_WriteRegister(FIFODataReg, length, data);		// Write data to the FIFO
 80a1bee:	462a      	mov	r2, r5
 80a1bf0:	463b      	mov	r3, r7
 80a1bf2:	2112      	movs	r1, #18
 80a1bf4:	4620      	mov	r0, r4
 80a1bf6:	f7ff ff95 	bl	80a1b24 <_ZN7MFRC52217PCD_WriteRegisterEhhPh>
	PCD_WriteRegister(CommandReg, PCD_CalcCRC);		// Start the calculation
 80a1bfa:	2203      	movs	r2, #3
 80a1bfc:	2102      	movs	r1, #2
 80a1bfe:	4620      	mov	r0, r4
 80a1c00:	f7ff ff7b 	bl	80a1afa <_ZN7MFRC52217PCD_WriteRegisterEhh>
 80a1c04:	f241 3588 	movw	r5, #5000	; 0x1388
	
	// Wait for the CRC calculation to complete. Each iteration of the while-loop takes 17.73�s.
	word i = 5000;
	byte n;
	while (1) {
		n = PCD_ReadRegister(DivIrqReg);	// DivIrqReg[7..0] bits are: Set2 reserved reserved MfinActIRq   reserved CRCIRq reserved reserved
 80a1c08:	210a      	movs	r1, #10
 80a1c0a:	4620      	mov	r0, r4
 80a1c0c:	f7ff ffa7 	bl	80a1b5e <_ZN7MFRC52216PCD_ReadRegisterEh>
		if (n & 0x04) {						// CRCIRq bit set - calculation done
 80a1c10:	0743      	lsls	r3, r0, #29
 80a1c12:	d405      	bmi.n	80a1c20 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x58>
 80a1c14:	3d01      	subs	r5, #1
 80a1c16:	b2ad      	uxth	r5, r5
			break;
		}
		if (--i == 0) {						// The emergency break. We will eventually terminate on this one after 89ms. Communication with the MFRC522 might be down.
 80a1c18:	2d00      	cmp	r5, #0
 80a1c1a:	d1f5      	bne.n	80a1c08 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x40>
			return STATUS_TIMEOUT;
 80a1c1c:	2004      	movs	r0, #4
	
	// Transfer the result from the registers to the result buffer
	result[0] = PCD_ReadRegister(CRCResultRegL);
	result[1] = PCD_ReadRegister(CRCResultRegH);
	return STATUS_OK;
} // End PCD_CalculateCRC()
 80a1c1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
		if (--i == 0) {						// The emergency break. We will eventually terminate on this one after 89ms. Communication with the MFRC522 might be down.
			return STATUS_TIMEOUT;
		}
	}
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop calculating CRC for new content in the FIFO.
 80a1c20:	2200      	movs	r2, #0
 80a1c22:	4620      	mov	r0, r4
 80a1c24:	2102      	movs	r1, #2
 80a1c26:	f7ff ff68 	bl	80a1afa <_ZN7MFRC52217PCD_WriteRegisterEhh>
	
	// Transfer the result from the registers to the result buffer
	result[0] = PCD_ReadRegister(CRCResultRegL);
 80a1c2a:	2144      	movs	r1, #68	; 0x44
 80a1c2c:	4620      	mov	r0, r4
 80a1c2e:	f7ff ff96 	bl	80a1b5e <_ZN7MFRC52216PCD_ReadRegisterEh>
	result[1] = PCD_ReadRegister(CRCResultRegH);
 80a1c32:	2142      	movs	r1, #66	; 0x42
		}
	}
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop calculating CRC for new content in the FIFO.
	
	// Transfer the result from the registers to the result buffer
	result[0] = PCD_ReadRegister(CRCResultRegL);
 80a1c34:	7030      	strb	r0, [r6, #0]
	result[1] = PCD_ReadRegister(CRCResultRegH);
 80a1c36:	4620      	mov	r0, r4
 80a1c38:	f7ff ff91 	bl	80a1b5e <_ZN7MFRC52216PCD_ReadRegisterEh>
 80a1c3c:	7070      	strb	r0, [r6, #1]
	return STATUS_OK;
 80a1c3e:	2001      	movs	r0, #1
 80a1c40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1c42 <_ZN7MFRC5229PCD_ResetEv>:
} // End PCD_Init()

/**
 * Performs a soft reset on the MFRC522 chip and waits for it to be ready again.
 */
void MFRC522::PCD_Reset() {
 80a1c42:	b510      	push	{r4, lr}
	PCD_WriteRegister(CommandReg, PCD_SoftReset);	// Issue the SoftReset command.
 80a1c44:	220f      	movs	r2, #15
 80a1c46:	2102      	movs	r1, #2
} // End PCD_Init()

/**
 * Performs a soft reset on the MFRC522 chip and waits for it to be ready again.
 */
void MFRC522::PCD_Reset() {
 80a1c48:	4604      	mov	r4, r0
	PCD_WriteRegister(CommandReg, PCD_SoftReset);	// Issue the SoftReset command.
 80a1c4a:	f7ff ff56 	bl	80a1afa <_ZN7MFRC52217PCD_WriteRegisterEhh>
	// The datasheet does not mention how long the SoftRest command takes to complete.
	// But the MFRC522 might have been in soft power-down mode (triggered by bit 4 of CommandReg) 
	// Section 8.8.2 in the datasheet says the oscillator start-up time is the start up time of the crystal + 37,74�s. Let us be generous: 50ms.
	delay(50);
 80a1c4e:	2032      	movs	r0, #50	; 0x32
 80a1c50:	f002 fb06 	bl	80a4260 <delay>
	// Wait for the PowerDown bit in CommandReg to be cleared
	while (PCD_ReadRegister(CommandReg) & (1<<4)) {
 80a1c54:	2102      	movs	r1, #2
 80a1c56:	4620      	mov	r0, r4
 80a1c58:	f7ff ff81 	bl	80a1b5e <_ZN7MFRC52216PCD_ReadRegisterEh>
 80a1c5c:	06c3      	lsls	r3, r0, #27
 80a1c5e:	d4f9      	bmi.n	80a1c54 <_ZN7MFRC5229PCD_ResetEv+0x12>
		// PCD still restarting - unlikely after waiting 50ms, but better safe than sorry.
	}
} // End PCD_Reset()
 80a1c60:	bd10      	pop	{r4, pc}

080a1c62 <_ZN7MFRC52213PCD_AntennaOnEv>:

/**
 * Turns the antenna on by enabling pins TX1 and TX2.
 * After a reset these pins disabled.
 */
void MFRC522::PCD_AntennaOn() {
 80a1c62:	b510      	push	{r4, lr}
	byte value = PCD_ReadRegister(TxControlReg);
 80a1c64:	2128      	movs	r1, #40	; 0x28

/**
 * Turns the antenna on by enabling pins TX1 and TX2.
 * After a reset these pins disabled.
 */
void MFRC522::PCD_AntennaOn() {
 80a1c66:	4604      	mov	r4, r0
	byte value = PCD_ReadRegister(TxControlReg);
 80a1c68:	f7ff ff79 	bl	80a1b5e <_ZN7MFRC52216PCD_ReadRegisterEh>
	if ((value & 0x03) != 0x03) {
 80a1c6c:	f000 0303 	and.w	r3, r0, #3
 80a1c70:	2b03      	cmp	r3, #3
 80a1c72:	d008      	beq.n	80a1c86 <_ZN7MFRC52213PCD_AntennaOnEv+0x24>
		PCD_WriteRegister(TxControlReg, value | 0x03);
 80a1c74:	f040 0203 	orr.w	r2, r0, #3
 80a1c78:	b2d2      	uxtb	r2, r2
 80a1c7a:	4620      	mov	r0, r4
	}
} // End PCD_AntennaOn()
 80a1c7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 * After a reset these pins disabled.
 */
void MFRC522::PCD_AntennaOn() {
	byte value = PCD_ReadRegister(TxControlReg);
	if ((value & 0x03) != 0x03) {
		PCD_WriteRegister(TxControlReg, value | 0x03);
 80a1c80:	2128      	movs	r1, #40	; 0x28
 80a1c82:	f7ff bf3a 	b.w	80a1afa <_ZN7MFRC52217PCD_WriteRegisterEhh>
 80a1c86:	bd10      	pop	{r4, pc}

080a1c88 <_ZN7MFRC5228PCD_InitEv>:
/////////////////////////////////////////////////////////////////////////////////////

/**
 * Initializes the MFRC522 chip.
 */
void MFRC522::PCD_Init() {
 80a1c88:	b510      	push	{r4, lr}
 80a1c8a:	4604      	mov	r4, r0
	if (digitalRead(_resetPowerDownPin) == LOW) { //The MFRC522 chip is in power down mode.
 80a1c8c:	7b40      	ldrb	r0, [r0, #13]
 80a1c8e:	f002 ffdb 	bl	80a4c48 <digitalRead>
 80a1c92:	b938      	cbnz	r0, 80a1ca4 <_ZN7MFRC5228PCD_InitEv+0x1c>
		digitalWrite(_resetPowerDownPin, HIGH);	// Exit power down mode. This triggers a hard reset.
 80a1c94:	7b60      	ldrb	r0, [r4, #13]
 80a1c96:	2101      	movs	r1, #1
 80a1c98:	f002 ffbd 	bl	80a4c16 <digitalWrite>
		// Section 8.8.2 in the datasheet says the oscillator start-up time is the start up time of the crystal + 37,74�s. Let us be generous: 50ms.
		delay(50);
 80a1c9c:	2032      	movs	r0, #50	; 0x32
 80a1c9e:	f002 fadf 	bl	80a4260 <delay>
 80a1ca2:	e002      	b.n	80a1caa <_ZN7MFRC5228PCD_InitEv+0x22>
	}
	else { // Perform a soft reset
		PCD_Reset();
 80a1ca4:	4620      	mov	r0, r4
 80a1ca6:	f7ff ffcc 	bl	80a1c42 <_ZN7MFRC5229PCD_ResetEv>
	}
	
	// When communicating with a PICC we need a timeout if something goes wrong.
	// f_timer = 13.56 MHz / (2*TPreScaler+1) where TPreScaler = [TPrescaler_Hi:TPrescaler_Lo].
	// TPrescaler_Hi are the four low bits in TModeReg. TPrescaler_Lo is TPrescalerReg.
    PCD_WriteRegister(TModeReg, 0x80);			// TAuto=1; timer starts automatically at the end of the transmission in all communication modes at all speeds
 80a1caa:	4620      	mov	r0, r4
 80a1cac:	2280      	movs	r2, #128	; 0x80
 80a1cae:	2154      	movs	r1, #84	; 0x54
 80a1cb0:	f7ff ff23 	bl	80a1afa <_ZN7MFRC52217PCD_WriteRegisterEhh>
    PCD_WriteRegister(TPrescalerReg, 0xA9);	// TPreScaler = TModeReg[3..0]:TPrescalerReg, ie 0x0A9 = 169 => f_timer=40kHz, ie a timer period of 25�s.
 80a1cb4:	4620      	mov	r0, r4
 80a1cb6:	22a9      	movs	r2, #169	; 0xa9
 80a1cb8:	2156      	movs	r1, #86	; 0x56
 80a1cba:	f7ff ff1e 	bl	80a1afa <_ZN7MFRC52217PCD_WriteRegisterEhh>
    PCD_WriteRegister(TReloadRegH, 0x03);		// Reload timer with 0x3E8 = 1000, ie 25ms before timeout.
 80a1cbe:	4620      	mov	r0, r4
 80a1cc0:	2203      	movs	r2, #3
 80a1cc2:	2158      	movs	r1, #88	; 0x58
 80a1cc4:	f7ff ff19 	bl	80a1afa <_ZN7MFRC52217PCD_WriteRegisterEhh>
    PCD_WriteRegister(TReloadRegL, 0xE8);
 80a1cc8:	4620      	mov	r0, r4
 80a1cca:	22e8      	movs	r2, #232	; 0xe8
 80a1ccc:	215a      	movs	r1, #90	; 0x5a
 80a1cce:	f7ff ff14 	bl	80a1afa <_ZN7MFRC52217PCD_WriteRegisterEhh>
	
	PCD_WriteRegister(TxASKReg, 0x40);		// Default 0x00. Force a 100 % ASK modulation independent of the ModGsPReg register setting
 80a1cd2:	4620      	mov	r0, r4
 80a1cd4:	2240      	movs	r2, #64	; 0x40
 80a1cd6:	212a      	movs	r1, #42	; 0x2a
 80a1cd8:	f7ff ff0f 	bl	80a1afa <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(ModeReg, 0x3D);		// Default 0x3F. Set the preset value for the CRC coprocessor for the CalcCRC command to 0x6363 (ISO 14443-3 part 6.2.4)
 80a1cdc:	4620      	mov	r0, r4
 80a1cde:	223d      	movs	r2, #61	; 0x3d
 80a1ce0:	2122      	movs	r1, #34	; 0x22
 80a1ce2:	f7ff ff0a 	bl	80a1afa <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_AntennaOn();						// Enable the antenna driver pins TX1 and TX2 (they were disabled by the reset)
 80a1ce6:	4620      	mov	r0, r4
} // End PCD_Init()
 80a1ce8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    PCD_WriteRegister(TReloadRegH, 0x03);		// Reload timer with 0x3E8 = 1000, ie 25ms before timeout.
    PCD_WriteRegister(TReloadRegL, 0xE8);
	
	PCD_WriteRegister(TxASKReg, 0x40);		// Default 0x00. Force a 100 % ASK modulation independent of the ModGsPReg register setting
	PCD_WriteRegister(ModeReg, 0x3D);		// Default 0x3F. Set the preset value for the CRC coprocessor for the CalcCRC command to 0x6363 (ISO 14443-3 part 6.2.4)
	PCD_AntennaOn();						// Enable the antenna driver pins TX1 and TX2 (they were disabled by the reset)
 80a1cec:	f7ff bfb9 	b.w	80a1c62 <_ZN7MFRC52213PCD_AntennaOnEv>

080a1cf0 <_ZN7MFRC52218PCD_GetAntennaGainEv>:
 * See 9.3.3.6 / table 98 in http://www.nxp.com/documents/data_sheet/MFRC522.pdf
 * NOTE: Return value scrubbed with (0x07<<4)=01110000b as RCFfgReg may use reserved bits.
 * 
 * @return Value of the RxGain, scrubbed to the 3 bits used.
 */
byte MFRC522::PCD_GetAntennaGain() {
 80a1cf0:	b508      	push	{r3, lr}
	return PCD_ReadRegister(RFCfgReg) & (0x07<<4);
 80a1cf2:	214c      	movs	r1, #76	; 0x4c
 80a1cf4:	f7ff ff33 	bl	80a1b5e <_ZN7MFRC52216PCD_ReadRegisterEh>
} // End PCD_GetAntennaGain()
 80a1cf8:	f000 0070 	and.w	r0, r0, #112	; 0x70
 80a1cfc:	bd08      	pop	{r3, pc}

080a1cfe <_ZN7MFRC52218PCD_SetAntennaGainEh>:
/**
 * Set the MFRC522 Receiver Gain (RxGain) to value specified by given mask.
 * See 9.3.3.6 / table 98 in http://www.nxp.com/documents/data_sheet/MFRC522.pdf
 * NOTE: Given mask is scrubbed with (0x07<<4)=01110000b as RCFfgReg may use reserved bits.
 */
void MFRC522::PCD_SetAntennaGain(byte mask) {
 80a1cfe:	b538      	push	{r3, r4, r5, lr}
 80a1d00:	460d      	mov	r5, r1
 80a1d02:	4604      	mov	r4, r0
	if (PCD_GetAntennaGain() != mask) {						// only bother if there is a change
 80a1d04:	f7ff fff4 	bl	80a1cf0 <_ZN7MFRC52218PCD_GetAntennaGainEv>
 80a1d08:	42a8      	cmp	r0, r5
 80a1d0a:	d00c      	beq.n	80a1d26 <_ZN7MFRC52218PCD_SetAntennaGainEh+0x28>
		PCD_ClearRegisterBitMask(RFCfgReg, (0x07<<4));		// clear needed to allow 000 pattern
 80a1d0c:	4620      	mov	r0, r4
 80a1d0e:	2270      	movs	r2, #112	; 0x70
 80a1d10:	214c      	movs	r1, #76	; 0x4c
 80a1d12:	f7ff ff4a 	bl	80a1baa <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>
		PCD_SetRegisterBitMask(RFCfgReg, mask & (0x07<<4));	// only set RxGain[2:0] bits
 80a1d16:	f005 0270 	and.w	r2, r5, #112	; 0x70
 80a1d1a:	4620      	mov	r0, r4
	}
} // End PCD_SetAntennaGain()
 80a1d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 * NOTE: Given mask is scrubbed with (0x07<<4)=01110000b as RCFfgReg may use reserved bits.
 */
void MFRC522::PCD_SetAntennaGain(byte mask) {
	if (PCD_GetAntennaGain() != mask) {						// only bother if there is a change
		PCD_ClearRegisterBitMask(RFCfgReg, (0x07<<4));		// clear needed to allow 000 pattern
		PCD_SetRegisterBitMask(RFCfgReg, mask & (0x07<<4));	// only set RxGain[2:0] bits
 80a1d20:	214c      	movs	r1, #76	; 0x4c
 80a1d22:	f7ff bf33 	b.w	80a1b8c <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>
 80a1d26:	bd38      	pop	{r3, r4, r5, pc}

080a1d28 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh>:
 */
void MFRC522::PCD_ReadRegister(	byte reg,		///< The register to read from. One of the PCD_Register enums.
								byte count,		///< The number of bytes to read
								byte *values,	///< Byte array to store the values in.
								byte rxAlign	///< Only bit positions rxAlign..7 in values[0] are updated.
								) {
 80a1d28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a1d2c:	4680      	mov	r8, r0
 80a1d2e:	461f      	mov	r7, r3
 80a1d30:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
	if (count == 0) {
 80a1d34:	4615      	mov	r5, r2
 80a1d36:	2a00      	cmp	r2, #0
 80a1d38:	d03f      	beq.n	80a1dba <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x92>
		return;
	}
	//Serial.print("Reading "); 	Serial.print(count); Serial.println(" bytes from register.");
	byte address = 0x80 | (reg & 0x7E);		// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
 80a1d3a:	f001 017e 	and.w	r1, r1, #126	; 0x7e
 80a1d3e:	f041 0680 	orr.w	r6, r1, #128	; 0x80
	byte index = 0;							// Index in values array.
	digitalWrite(_chipSelectPin, LOW);		// Select slave
 80a1d42:	7b00      	ldrb	r0, [r0, #12]
 80a1d44:	2100      	movs	r1, #0
 80a1d46:	f002 ff66 	bl	80a4c16 <digitalWrite>
	count--;								// One read is performed outside of the loop
	SPI.transfer(address);					// Tell MFRC522 which address we want to read
 80a1d4a:	4630      	mov	r0, r6
 80a1d4c:	f7ff fecc 	bl	80a1ae8 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8transferEh.isra.9>
	}
	//Serial.print("Reading "); 	Serial.print(count); Serial.println(" bytes from register.");
	byte address = 0x80 | (reg & 0x7E);		// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
	byte index = 0;							// Index in values array.
	digitalWrite(_chipSelectPin, LOW);		// Select slave
	count--;								// One read is performed outside of the loop
 80a1d50:	3d01      	subs	r5, #1
 80a1d52:	b2ed      	uxtb	r5, r5
	SPI.transfer(address);					// Tell MFRC522 which address we want to read
 80a1d54:	f04f 0b00 	mov.w	fp, #0
	while (index < count) {
		if (index == 0 && rxAlign) { // Only update bit positions rxAlign..7 in values[0]
			// Create bit mask for bit positions rxAlign..7
			byte mask = 0;
			for (byte i = rxAlign; i <= 7; i++) {
				mask |= (1 << i);
 80a1d58:	f04f 0a01 	mov.w	sl, #1
 80a1d5c:	fa5f f48b 	uxtb.w	r4, fp
	byte address = 0x80 | (reg & 0x7E);		// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
	byte index = 0;							// Index in values array.
	digitalWrite(_chipSelectPin, LOW);		// Select slave
	count--;								// One read is performed outside of the loop
	SPI.transfer(address);					// Tell MFRC522 which address we want to read
	while (index < count) {
 80a1d60:	42a5      	cmp	r5, r4
 80a1d62:	d91f      	bls.n	80a1da4 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x7c>
		if (index == 0 && rxAlign) { // Only update bit positions rxAlign..7 in values[0]
 80a1d64:	b9b4      	cbnz	r4, 80a1d94 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x6c>
 80a1d66:	f1b9 0f00 	cmp.w	r9, #0
 80a1d6a:	d013      	beq.n	80a1d94 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x6c>
 80a1d6c:	464b      	mov	r3, r9
			// Create bit mask for bit positions rxAlign..7
			byte mask = 0;
			for (byte i = rxAlign; i <= 7; i++) {
 80a1d6e:	2b07      	cmp	r3, #7
 80a1d70:	d806      	bhi.n	80a1d80 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x58>
				mask |= (1 << i);
 80a1d72:	fa0a f003 	lsl.w	r0, sl, r3
 80a1d76:	4304      	orrs	r4, r0
	SPI.transfer(address);					// Tell MFRC522 which address we want to read
	while (index < count) {
		if (index == 0 && rxAlign) { // Only update bit positions rxAlign..7 in values[0]
			// Create bit mask for bit positions rxAlign..7
			byte mask = 0;
			for (byte i = rxAlign; i <= 7; i++) {
 80a1d78:	3301      	adds	r3, #1
				mask |= (1 << i);
 80a1d7a:	b2e4      	uxtb	r4, r4
	SPI.transfer(address);					// Tell MFRC522 which address we want to read
	while (index < count) {
		if (index == 0 && rxAlign) { // Only update bit positions rxAlign..7 in values[0]
			// Create bit mask for bit positions rxAlign..7
			byte mask = 0;
			for (byte i = rxAlign; i <= 7; i++) {
 80a1d7c:	b2db      	uxtb	r3, r3
 80a1d7e:	e7f6      	b.n	80a1d6e <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x46>
				mask |= (1 << i);
			}
			// Read value and tell that we want to read the same address again.
			byte value = SPI.transfer(address);	
 80a1d80:	4630      	mov	r0, r6
 80a1d82:	f7ff feb1 	bl	80a1ae8 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8transferEh.isra.9>
			// Apply mask to both current value of values[0] and the new data in value.
			values[0] = (values[index] & ~mask) | (value & mask);
 80a1d86:	783b      	ldrb	r3, [r7, #0]
 80a1d88:	4020      	ands	r0, r4
 80a1d8a:	ea23 0304 	bic.w	r3, r3, r4
 80a1d8e:	4318      	orrs	r0, r3
 80a1d90:	7038      	strb	r0, [r7, #0]
 80a1d92:	e004      	b.n	80a1d9e <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x76>
		}
		else { // Normal case
			values[index] = SPI.transfer(address);	// Read value and tell that we want to read the same address again.
 80a1d94:	4630      	mov	r0, r6
 80a1d96:	f7ff fea7 	bl	80a1ae8 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8transferEh.isra.9>
 80a1d9a:	f807 000b 	strb.w	r0, [r7, fp]
 80a1d9e:	f10b 0b01 	add.w	fp, fp, #1
 80a1da2:	e7db      	b.n	80a1d5c <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x34>
		}
		index++;
	}
	values[index] = SPI.transfer(0);			// Read the final byte. Send 0 to stop reading.
 80a1da4:	2000      	movs	r0, #0
 80a1da6:	f7ff fe9f 	bl	80a1ae8 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8transferEh.isra.9>
 80a1daa:	5578      	strb	r0, [r7, r5]
	digitalWrite(_chipSelectPin, HIGH);			// Release slave again
 80a1dac:	f898 000c 	ldrb.w	r0, [r8, #12]
 80a1db0:	2101      	movs	r1, #1
} // End PCD_ReadRegister()
 80a1db2:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			values[index] = SPI.transfer(address);	// Read value and tell that we want to read the same address again.
		}
		index++;
	}
	values[index] = SPI.transfer(0);			// Read the final byte. Send 0 to stop reading.
	digitalWrite(_chipSelectPin, HIGH);			// Release slave again
 80a1db6:	f002 bf2e 	b.w	80a4c16 <digitalWrite>
 80a1dba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a1dbe <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>:
										byte *backData,		///< NULL or pointer to buffer if data should be read back after executing the command.
										byte *backLen,		///< In: Max number of bytes to write to *backData. Out: The number of bytes returned.
										byte *validBits,	///< In/Out: The number of valid bits in the last byte. 0 for 8 valid bits.
										byte rxAlign,		///< In: Defines the bit position in backData[0] for the first bit received. Default 0.
										bool checkCRC		///< In: True => The last two bytes of the response is assumed to be a CRC_A that must be validated.
									 ) {
 80a1dbe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a1dc2:	b087      	sub	sp, #28
 80a1dc4:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
 80a1dc8:	4604      	mov	r4, r0
 80a1dca:	468b      	mov	fp, r1
 80a1dcc:	9202      	str	r2, [sp, #8]
 80a1dce:	9f11      	ldr	r7, [sp, #68]	; 0x44
 80a1dd0:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80a1dd2:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
	byte n, _validBits;
	unsigned int i;

	// Prepare values for BitFramingReg
	byte txLastBits = validBits ? *validBits : 0;
 80a1dd6:	f1b8 0f00 	cmp.w	r8, #0
 80a1dda:	d002      	beq.n	80a1de2 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x24>
 80a1ddc:	f898 6000 	ldrb.w	r6, [r8]
 80a1de0:	e000      	b.n	80a1de4 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x26>
 80a1de2:	4646      	mov	r6, r8
	byte bitFraming	= (rxAlign << 4) + txLastBits;		// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
	
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop any active command.
 80a1de4:	2200      	movs	r2, #0
 80a1de6:	2102      	movs	r1, #2
 80a1de8:	4620      	mov	r0, r4
 80a1dea:	9303      	str	r3, [sp, #12]
 80a1dec:	f7ff fe85 	bl	80a1afa <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(ComIrqReg, 0x7F);					// Clear all seven interrupt request bits
 80a1df0:	227f      	movs	r2, #127	; 0x7f
 80a1df2:	2108      	movs	r1, #8
 80a1df4:	4620      	mov	r0, r4
 80a1df6:	f7ff fe80 	bl	80a1afa <_ZN7MFRC52217PCD_WriteRegisterEhh>
	byte n, _validBits;
	unsigned int i;

	// Prepare values for BitFramingReg
	byte txLastBits = validBits ? *validBits : 0;
	byte bitFraming	= (rxAlign << 4) + txLastBits;		// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
 80a1dfa:	eb06 160a 	add.w	r6, r6, sl, lsl #4
	
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop any active command.
	PCD_WriteRegister(ComIrqReg, 0x7F);					// Clear all seven interrupt request bits
	PCD_SetRegisterBitMask(FIFOLevelReg, 0x80);		// FlushBuffer = 1, FIFO initialization
 80a1dfe:	2280      	movs	r2, #128	; 0x80
 80a1e00:	2114      	movs	r1, #20
 80a1e02:	4620      	mov	r0, r4
 80a1e04:	f7ff fec2 	bl	80a1b8c <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>
	byte n, _validBits;
	unsigned int i;

	// Prepare values for BitFramingReg
	byte txLastBits = validBits ? *validBits : 0;
	byte bitFraming	= (rxAlign << 4) + txLastBits;		// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
 80a1e08:	b2f6      	uxtb	r6, r6
	
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop any active command.
	PCD_WriteRegister(ComIrqReg, 0x7F);					// Clear all seven interrupt request bits
	PCD_SetRegisterBitMask(FIFOLevelReg, 0x80);		// FlushBuffer = 1, FIFO initialization
	PCD_WriteRegister(FIFODataReg, sendLen, sendData);	// Write sendData to the FIFO
 80a1e0a:	9b03      	ldr	r3, [sp, #12]
 80a1e0c:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 80a1e10:	2112      	movs	r1, #18
 80a1e12:	4620      	mov	r0, r4
 80a1e14:	f7ff fe86 	bl	80a1b24 <_ZN7MFRC52217PCD_WriteRegisterEhhPh>
	PCD_WriteRegister(BitFramingReg, bitFraming);		// Bit adjustments
 80a1e18:	4632      	mov	r2, r6
 80a1e1a:	211a      	movs	r1, #26
 80a1e1c:	4620      	mov	r0, r4
 80a1e1e:	f7ff fe6c 	bl	80a1afa <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(CommandReg, command);			// Execute the command
 80a1e22:	465a      	mov	r2, fp
 80a1e24:	2102      	movs	r1, #2
 80a1e26:	4620      	mov	r0, r4
 80a1e28:	f7ff fe67 	bl	80a1afa <_ZN7MFRC52217PCD_WriteRegisterEhh>
	if (command == PCD_Transceive) 	{
 80a1e2c:	f1bb 0f0c 	cmp.w	fp, #12
 80a1e30:	d104      	bne.n	80a1e3c <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x7e>
		PCD_SetRegisterBitMask(BitFramingReg, 0x80);	// StartSend=1, transmission of data starts
 80a1e32:	2280      	movs	r2, #128	; 0x80
 80a1e34:	211a      	movs	r1, #26
 80a1e36:	4620      	mov	r0, r4
 80a1e38:	f7ff fea8 	bl	80a1b8c <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>
									 ) {
	byte n, _validBits;
	unsigned int i;

	// Prepare values for BitFramingReg
	byte txLastBits = validBits ? *validBits : 0;
 80a1e3c:	f44f 66fa 	mov.w	r6, #2000	; 0x7d0
	// Wait for the command to complete.
	// In PCD_Init() we set the TAuto flag in TModeReg. This means the timer automatically starts when the PCD stops transmitting.
	// Each iteration of the do-while-loop takes 17.86�s.
	i = 2000;
	while (1) {
		n = PCD_ReadRegister(ComIrqReg);	// ComIrqReg[7..0] bits are: Set1 TxIRq RxIRq IdleIRq   HiAlertIRq LoAlertIRq ErrIRq TimerIRq
 80a1e40:	2108      	movs	r1, #8
 80a1e42:	4620      	mov	r0, r4
 80a1e44:	f7ff fe8b 	bl	80a1b5e <_ZN7MFRC52216PCD_ReadRegisterEh>
		if (n & waitIRq) {					// One of the interrupts that signal success has been set.
 80a1e48:	9b02      	ldr	r3, [sp, #8]
 80a1e4a:	4218      	tst	r0, r3
 80a1e4c:	d104      	bne.n	80a1e58 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x9a>
			break;
		}
		if (n & 0x01) {						// Timer interrupt - nothing received in 25ms
 80a1e4e:	07c2      	lsls	r2, r0, #31
 80a1e50:	d452      	bmi.n	80a1ef8 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x13a>
			return STATUS_TIMEOUT;
		}
		if (--i == 0) {						// The emergency break. If all other condions fail we will eventually terminate on this one after 35.7ms. Communication with the MFRC522 might be down.
 80a1e52:	3e01      	subs	r6, #1
 80a1e54:	d1f4      	bne.n	80a1e40 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x82>
 80a1e56:	e04f      	b.n	80a1ef8 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x13a>
			return STATUS_TIMEOUT;
		}
	}
	
	// Stop now if any errors except collisions were detected.
	byte errorRegValue = PCD_ReadRegister(ErrorReg); // ErrorReg[7..0] bits are: WrErr TempErr reserved BufferOvfl   CollErr CRCErr ParityErr ProtocolErr
 80a1e58:	210c      	movs	r1, #12
 80a1e5a:	4620      	mov	r0, r4
 80a1e5c:	f7ff fe7f 	bl	80a1b5e <_ZN7MFRC52216PCD_ReadRegisterEh>
	if (errorRegValue & 0x13) {	 // BufferOvfl ParityErr ProtocolErr
 80a1e60:	f010 0f13 	tst.w	r0, #19
			return STATUS_TIMEOUT;
		}
	}
	
	// Stop now if any errors except collisions were detected.
	byte errorRegValue = PCD_ReadRegister(ErrorReg); // ErrorReg[7..0] bits are: WrErr TempErr reserved BufferOvfl   CollErr CRCErr ParityErr ProtocolErr
 80a1e64:	4606      	mov	r6, r0
	if (errorRegValue & 0x13) {	 // BufferOvfl ParityErr ProtocolErr
 80a1e66:	d149      	bne.n	80a1efc <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x13e>
		return STATUS_ERROR;
	}	

	// If the caller wants data back, get it from the MFRC522.
	if (backData && backLen) {
 80a1e68:	b1df      	cbz	r7, 80a1ea2 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xe4>
 80a1e6a:	b1d5      	cbz	r5, 80a1ea2 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xe4>
		n = PCD_ReadRegister(FIFOLevelReg);						// Number of bytes in the FIFO
 80a1e6c:	2114      	movs	r1, #20
 80a1e6e:	4620      	mov	r0, r4
 80a1e70:	f7ff fe75 	bl	80a1b5e <_ZN7MFRC52216PCD_ReadRegisterEh>
		if (n > *backLen) {
 80a1e74:	782b      	ldrb	r3, [r5, #0]
		return STATUS_ERROR;
	}	

	// If the caller wants data back, get it from the MFRC522.
	if (backData && backLen) {
		n = PCD_ReadRegister(FIFOLevelReg);						// Number of bytes in the FIFO
 80a1e76:	4602      	mov	r2, r0
		if (n > *backLen) {
 80a1e78:	4283      	cmp	r3, r0
 80a1e7a:	d341      	bcc.n	80a1f00 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x142>
			return STATUS_NO_ROOM;
		}
		*backLen = n;												// Number of bytes returned
 80a1e7c:	7028      	strb	r0, [r5, #0]
		PCD_ReadRegister(FIFODataReg, n, backData, rxAlign);		// Get received data from FIFO
 80a1e7e:	463b      	mov	r3, r7
 80a1e80:	2112      	movs	r1, #18
 80a1e82:	4620      	mov	r0, r4
 80a1e84:	f8cd a000 	str.w	sl, [sp]
 80a1e88:	f7ff ff4e 	bl	80a1d28 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh>
		_validBits = PCD_ReadRegister(ControlReg) & 0x07;	// RxLastBits[2:0] indicates the number of valid bits in the last received byte. If this value is 000b, the whole byte is valid.
 80a1e8c:	2118      	movs	r1, #24
 80a1e8e:	4620      	mov	r0, r4
 80a1e90:	f7ff fe65 	bl	80a1b5e <_ZN7MFRC52216PCD_ReadRegisterEh>
 80a1e94:	f000 0907 	and.w	r9, r0, #7
		if (validBits) {
 80a1e98:	f1b8 0f00 	cmp.w	r8, #0
 80a1e9c:	d001      	beq.n	80a1ea2 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xe4>
			*validBits = _validBits;
 80a1e9e:	f888 9000 	strb.w	r9, [r8]
		}
	}
	
	// Tell about collisions
	if (errorRegValue & 0x08) { // CollErr
 80a1ea2:	0733      	lsls	r3, r6, #28
 80a1ea4:	d42e      	bmi.n	80a1f04 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x146>
		return STATUS_COLLISION;
	}
	
	// Perform CRC_A validation if requested.
	if (backData && backLen && checkCRC) {
 80a1ea6:	b37f      	cbz	r7, 80a1f08 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x14a>
 80a1ea8:	b375      	cbz	r5, 80a1f08 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x14a>
 80a1eaa:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 80a1eae:	b35b      	cbz	r3, 80a1f08 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x14a>
		// In this case a MIFARE Classic NAK is not OK.
		if (*backLen == 1 && _validBits == 4) {
 80a1eb0:	782a      	ldrb	r2, [r5, #0]
 80a1eb2:	2a01      	cmp	r2, #1
 80a1eb4:	d104      	bne.n	80a1ec0 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x102>
 80a1eb6:	f1b9 0f04 	cmp.w	r9, #4
 80a1eba:	d127      	bne.n	80a1f0c <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x14e>
			return STATUS_MIFARE_NACK;
 80a1ebc:	2009      	movs	r0, #9
 80a1ebe:	e026      	b.n	80a1f0e <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x150>
		}
		// We need at least the CRC_A value and all 8 bits of the last byte must be received.
		if (*backLen < 2 || _validBits != 0) {
 80a1ec0:	d924      	bls.n	80a1f0c <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x14e>
 80a1ec2:	f1b9 0f00 	cmp.w	r9, #0
 80a1ec6:	d121      	bne.n	80a1f0c <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x14e>
			return STATUS_CRC_WRONG;
		}
		// Verify CRC_A - do our own calculation and store the control in controlBuffer.
		byte controlBuffer[2]; 
		n = PCD_CalculateCRC(&backData[0], *backLen - 2, &controlBuffer[0]);
 80a1ec8:	3a02      	subs	r2, #2
 80a1eca:	ab05      	add	r3, sp, #20
 80a1ecc:	b2d2      	uxtb	r2, r2
 80a1ece:	4639      	mov	r1, r7
 80a1ed0:	4620      	mov	r0, r4
 80a1ed2:	f7ff fe79 	bl	80a1bc8 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
		if (n != STATUS_OK) {
 80a1ed6:	2801      	cmp	r0, #1
 80a1ed8:	d119      	bne.n	80a1f0e <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x150>
			return n;
		}
		if ((backData[*backLen - 2] != controlBuffer[0]) || (backData[*backLen - 1] != controlBuffer[1])) {
 80a1eda:	782b      	ldrb	r3, [r5, #0]
 80a1edc:	441f      	add	r7, r3
 80a1ede:	f817 2c02 	ldrb.w	r2, [r7, #-2]
 80a1ee2:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80a1ee6:	429a      	cmp	r2, r3
 80a1ee8:	d110      	bne.n	80a1f0c <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x14e>
 80a1eea:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80a1eee:	f89d 3015 	ldrb.w	r3, [sp, #21]
 80a1ef2:	429a      	cmp	r2, r3
 80a1ef4:	d10a      	bne.n	80a1f0c <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x14e>
 80a1ef6:	e00a      	b.n	80a1f0e <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x150>
		n = PCD_ReadRegister(ComIrqReg);	// ComIrqReg[7..0] bits are: Set1 TxIRq RxIRq IdleIRq   HiAlertIRq LoAlertIRq ErrIRq TimerIRq
		if (n & waitIRq) {					// One of the interrupts that signal success has been set.
			break;
		}
		if (n & 0x01) {						// Timer interrupt - nothing received in 25ms
			return STATUS_TIMEOUT;
 80a1ef8:	2004      	movs	r0, #4
 80a1efa:	e008      	b.n	80a1f0e <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x150>
	}
	
	// Stop now if any errors except collisions were detected.
	byte errorRegValue = PCD_ReadRegister(ErrorReg); // ErrorReg[7..0] bits are: WrErr TempErr reserved BufferOvfl   CollErr CRCErr ParityErr ProtocolErr
	if (errorRegValue & 0x13) {	 // BufferOvfl ParityErr ProtocolErr
		return STATUS_ERROR;
 80a1efc:	2002      	movs	r0, #2
 80a1efe:	e006      	b.n	80a1f0e <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x150>

	// If the caller wants data back, get it from the MFRC522.
	if (backData && backLen) {
		n = PCD_ReadRegister(FIFOLevelReg);						// Number of bytes in the FIFO
		if (n > *backLen) {
			return STATUS_NO_ROOM;
 80a1f00:	2005      	movs	r0, #5
 80a1f02:	e004      	b.n	80a1f0e <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x150>
		}
	}
	
	// Tell about collisions
	if (errorRegValue & 0x08) { // CollErr
		return STATUS_COLLISION;
 80a1f04:	2003      	movs	r0, #3
 80a1f06:	e002      	b.n	80a1f0e <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x150>
		if ((backData[*backLen - 2] != controlBuffer[0]) || (backData[*backLen - 1] != controlBuffer[1])) {
			return STATUS_CRC_WRONG;
		}
	}
	
	return STATUS_OK;
 80a1f08:	2001      	movs	r0, #1
 80a1f0a:	e000      	b.n	80a1f0e <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x150>
		if (*backLen == 1 && _validBits == 4) {
			return STATUS_MIFARE_NACK;
		}
		// We need at least the CRC_A value and all 8 bits of the last byte must be received.
		if (*backLen < 2 || _validBits != 0) {
			return STATUS_CRC_WRONG;
 80a1f0c:	2008      	movs	r0, #8
			return STATUS_CRC_WRONG;
		}
	}
	
	return STATUS_OK;
} // End PCD_CommunicateWithPICC()
 80a1f0e:	b007      	add	sp, #28
 80a1f10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a1f14 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>:
									byte *backData,		///< NULL or pointer to buffer if data should be read back after executing the command.
									byte *backLen,		///< In: Max number of bytes to write to *backData. Out: The number of bytes returned.
									byte *validBits,	///< In/Out: The number of valid bits in the last byte. 0 for 8 valid bits. Default NULL.
									byte rxAlign,		///< In: Defines the bit position in backData[0] for the first bit received. Default 0.
									bool checkCRC		///< In: True => The last two bytes of the response is assumed to be a CRC_A that must be validated.
								 ) {
 80a1f14:	b510      	push	{r4, lr}
 80a1f16:	b086      	sub	sp, #24
	byte waitIRq = 0x30;		// RxIRq and IdleIRq
	return PCD_CommunicateWithPICC(PCD_Transceive, waitIRq, sendData, sendLen, backData, backLen, validBits, rxAlign, checkCRC);
 80a1f18:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
 80a1f1c:	9405      	str	r4, [sp, #20]
 80a1f1e:	f89d 4028 	ldrb.w	r4, [sp, #40]	; 0x28
 80a1f22:	9404      	str	r4, [sp, #16]
 80a1f24:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80a1f26:	9403      	str	r4, [sp, #12]
 80a1f28:	9c08      	ldr	r4, [sp, #32]
 80a1f2a:	e88d 001c 	stmia.w	sp, {r2, r3, r4}
 80a1f2e:	460b      	mov	r3, r1
 80a1f30:	2230      	movs	r2, #48	; 0x30
 80a1f32:	210c      	movs	r1, #12
 80a1f34:	f7ff ff43 	bl	80a1dbe <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>
} // End PCD_TransceiveData()
 80a1f38:	b006      	add	sp, #24
 80a1f3a:	bd10      	pop	{r4, pc}

080a1f3c <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_>:
 * @return STATUS_OK on success, STATUS_??? otherwise.
 */ 
byte MFRC522::PICC_REQA_or_WUPA(	byte command, 		///< The command to send - PICC_CMD_REQA or PICC_CMD_WUPA
									byte *bufferATQA,	///< The buffer to store the ATQA (Answer to request) in
									byte *bufferSize	///< Buffer size, at least two bytes. Also number of bytes returned if STATUS_OK.
							   ) {
 80a1f3c:	b570      	push	{r4, r5, r6, lr}
 80a1f3e:	b088      	sub	sp, #32
 80a1f40:	4606      	mov	r6, r0
 80a1f42:	461c      	mov	r4, r3
 80a1f44:	f88d 1017 	strb.w	r1, [sp, #23]
	byte validBits;
	byte status;
	
	if (bufferATQA == NULL || *bufferSize < 2) {	// The ATQA response is 2 bytes long.
 80a1f48:	4615      	mov	r5, r2
 80a1f4a:	b312      	cbz	r2, 80a1f92 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x56>
 80a1f4c:	781b      	ldrb	r3, [r3, #0]
 80a1f4e:	2b01      	cmp	r3, #1
 80a1f50:	d91f      	bls.n	80a1f92 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x56>
		return STATUS_NO_ROOM;
	}
	PCD_ClearRegisterBitMask(CollReg, 0x80);			// ValuesAfterColl=1 => Bits received after collision are cleared.
 80a1f52:	2280      	movs	r2, #128	; 0x80
 80a1f54:	211c      	movs	r1, #28
 80a1f56:	f7ff fe28 	bl	80a1baa <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>
	validBits = 7;										// For REQA and WUPA we need the short frame format - transmit only 7 bits of the last (and only) byte. TxLastBits = BitFramingReg[2..0]
 80a1f5a:	2307      	movs	r3, #7
 80a1f5c:	f88d 301f 	strb.w	r3, [sp, #31]
	status = PCD_TransceiveData(&command, 1, bufferATQA, bufferSize, &validBits);
 80a1f60:	2300      	movs	r3, #0
 80a1f62:	9303      	str	r3, [sp, #12]
 80a1f64:	9302      	str	r3, [sp, #8]
 80a1f66:	f10d 031f 	add.w	r3, sp, #31
 80a1f6a:	9301      	str	r3, [sp, #4]
 80a1f6c:	9400      	str	r4, [sp, #0]
 80a1f6e:	462b      	mov	r3, r5
 80a1f70:	2201      	movs	r2, #1
 80a1f72:	f10d 0117 	add.w	r1, sp, #23
 80a1f76:	4630      	mov	r0, r6
 80a1f78:	f7ff ffcc 	bl	80a1f14 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
	if (status != STATUS_OK) {
 80a1f7c:	2801      	cmp	r0, #1
 80a1f7e:	d10b      	bne.n	80a1f98 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x5c>
		return status;
	}
	if (*bufferSize != 2 || validBits != 0) {		// ATQA must be exactly 16 bits.
 80a1f80:	7820      	ldrb	r0, [r4, #0]
 80a1f82:	2802      	cmp	r0, #2
 80a1f84:	d107      	bne.n	80a1f96 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x5a>
 80a1f86:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80a1f8a:	2b00      	cmp	r3, #0
		return STATUS_ERROR;
	}
	return STATUS_OK;
 80a1f8c:	bf08      	it	eq
 80a1f8e:	2001      	moveq	r0, #1
 80a1f90:	e002      	b.n	80a1f98 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x5c>
							   ) {
	byte validBits;
	byte status;
	
	if (bufferATQA == NULL || *bufferSize < 2) {	// The ATQA response is 2 bytes long.
		return STATUS_NO_ROOM;
 80a1f92:	2005      	movs	r0, #5
 80a1f94:	e000      	b.n	80a1f98 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x5c>
	status = PCD_TransceiveData(&command, 1, bufferATQA, bufferSize, &validBits);
	if (status != STATUS_OK) {
		return status;
	}
	if (*bufferSize != 2 || validBits != 0) {		// ATQA must be exactly 16 bits.
		return STATUS_ERROR;
 80a1f96:	2002      	movs	r0, #2
	}
	return STATUS_OK;
} // End PICC_REQA_or_WUPA()
 80a1f98:	b008      	add	sp, #32
 80a1f9a:	bd70      	pop	{r4, r5, r6, pc}

080a1f9c <_ZN7MFRC52213PICC_RequestAEPhS0_>:
 * @return STATUS_OK on success, STATUS_??? otherwise.
 */
byte MFRC522::PICC_RequestA(byte *bufferATQA,	///< The buffer to store the ATQA (Answer to request) in
							byte *bufferSize	///< Buffer size, at least two bytes. Also number of bytes returned if STATUS_OK.
							) {
	return PICC_REQA_or_WUPA(PICC_CMD_REQA, bufferATQA, bufferSize);
 80a1f9c:	4613      	mov	r3, r2
 80a1f9e:	460a      	mov	r2, r1
 80a1fa0:	2126      	movs	r1, #38	; 0x26
 80a1fa2:	f7ff bfcb 	b.w	80a1f3c <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_>

080a1fa6 <_ZN7MFRC52221PICC_IsNewCardPresentEv>:
 * Returns true if a PICC responds to PICC_CMD_REQA.
 * Only "new" cards in state IDLE are invited. Sleeping cards in state HALT are ignored.
 * 
 * @return bool
 */
bool MFRC522::PICC_IsNewCardPresent() {
 80a1fa6:	b507      	push	{r0, r1, r2, lr}
	byte bufferATQA[2];
	byte bufferSize = sizeof(bufferATQA);
 80a1fa8:	2302      	movs	r3, #2
 80a1faa:	aa02      	add	r2, sp, #8
 80a1fac:	f802 3d05 	strb.w	r3, [r2, #-5]!
	byte result = PICC_RequestA(bufferATQA, &bufferSize);
 80a1fb0:	a901      	add	r1, sp, #4
 80a1fb2:	f7ff fff3 	bl	80a1f9c <_ZN7MFRC52213PICC_RequestAEPhS0_>
	return (result == STATUS_OK || result == STATUS_COLLISION);
 80a1fb6:	2801      	cmp	r0, #1
 80a1fb8:	d002      	beq.n	80a1fc0 <_ZN7MFRC52221PICC_IsNewCardPresentEv+0x1a>
 80a1fba:	1ec3      	subs	r3, r0, #3
 80a1fbc:	4258      	negs	r0, r3
 80a1fbe:	4158      	adcs	r0, r3
} // End PICC_IsNewCardPresent()
 80a1fc0:	b003      	add	sp, #12
 80a1fc2:	f85d fb04 	ldr.w	pc, [sp], #4

080a1fc6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh>:
 * 
 * @return STATUS_OK on success, STATUS_??? otherwise.
 */
byte MFRC522::PICC_Select(	Uid *uid,			///< Pointer to Uid struct. Normally output, but can also be used to supply a known UID.
							byte validBits		///< The number of known UID bits supplied in *uid. Normally 0. If set you must also supply uid->size.
						 ) {
 80a1fc6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//		10 bytes		1			CT		uid0	uid1	uid2
	//						2			CT		uid3	uid4	uid5
	//						3			uid6	uid7	uid8	uid9
	
	// Sanity checks
	if (validBits > 80) {
 80a1fca:	2a50      	cmp	r2, #80	; 0x50
 * 
 * @return STATUS_OK on success, STATUS_??? otherwise.
 */
byte MFRC522::PICC_Select(	Uid *uid,			///< Pointer to Uid struct. Normally output, but can also be used to supply a known UID.
							byte validBits		///< The number of known UID bits supplied in *uid. Normally 0. If set you must also supply uid->size.
						 ) {
 80a1fcc:	b08b      	sub	sp, #44	; 0x2c
 80a1fce:	4683      	mov	fp, r0
 80a1fd0:	468a      	mov	sl, r1
 80a1fd2:	4617      	mov	r7, r2
	//		10 bytes		1			CT		uid0	uid1	uid2
	//						2			CT		uid3	uid4	uid5
	//						3			uid6	uid7	uid8	uid9
	
	// Sanity checks
	if (validBits > 80) {
 80a1fd4:	f200 80f6 	bhi.w	80a21c4 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1fe>
		return STATUS_INVALID;
	}

	// Prepare MFRC522
	PCD_ClearRegisterBitMask(CollReg, 0x80);			// ValuesAfterColl=1 => Bits received after collision are cleared.
 80a1fd8:	2280      	movs	r2, #128	; 0x80
 80a1fda:	211c      	movs	r1, #28
 80a1fdc:	f7ff fde5 	bl	80a1baa <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>
							byte validBits		///< The number of known UID bits supplied in *uid. Normally 0. If set you must also supply uid->size.
						 ) {
	bool uidComplete;
	bool selectDone;
	bool useCascadeTag;
	byte cascadeLevel	= 1; 
 80a1fe0:	2501      	movs	r5, #1

	// Repeat Cascade Level loop until we have a complete UID.
	uidComplete = false;
	while ( ! uidComplete) {
		// Set the Cascade Level in the SEL byte, find out if we need to use the Cascade Tag in byte 2.
		switch (cascadeLevel) {
 80a1fe2:	2d02      	cmp	r5, #2
 80a1fe4:	d010      	beq.n	80a2008 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x42>
 80a1fe6:	2d03      	cmp	r5, #3
 80a1fe8:	d01b      	beq.n	80a2022 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x5c>
 80a1fea:	2d01      	cmp	r5, #1
 80a1fec:	f040 80ec 	bne.w	80a21c8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x202>
			case 1:
				buffer[0] = PICC_CMD_SEL_CL1;
 80a1ff0:	2393      	movs	r3, #147	; 0x93
 80a1ff2:	f88d 301c 	strb.w	r3, [sp, #28]
				uidIndex = 0;
				useCascadeTag = validBits && uid->size > 4;	// When we know that the UID has more than 4 bytes
 80a1ff6:	b1d7      	cbz	r7, 80a202e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x68>
 80a1ff8:	f89a 3000 	ldrb.w	r3, [sl]
	while ( ! uidComplete) {
		// Set the Cascade Level in the SEL byte, find out if we need to use the Cascade Tag in byte 2.
		switch (cascadeLevel) {
			case 1:
				buffer[0] = PICC_CMD_SEL_CL1;
				uidIndex = 0;
 80a1ffc:	2600      	movs	r6, #0
				useCascadeTag = validBits && uid->size > 4;	// When we know that the UID has more than 4 bytes
 80a1ffe:	2b04      	cmp	r3, #4
 80a2000:	bf94      	ite	ls
 80a2002:	2300      	movls	r3, #0
 80a2004:	2301      	movhi	r3, #1
 80a2006:	e016      	b.n	80a2036 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x70>
				break;
			
			case 2:
				buffer[0] = PICC_CMD_SEL_CL2;
 80a2008:	f06f 036a 	mvn.w	r3, #106	; 0x6a
 80a200c:	f88d 301c 	strb.w	r3, [sp, #28]
				uidIndex = 3;
				useCascadeTag = validBits && uid->size > 7;	// When we know that the UID has more than 7 bytes
 80a2010:	b17f      	cbz	r7, 80a2032 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x6c>
 80a2012:	f89a 3000 	ldrb.w	r3, [sl]
				useCascadeTag = validBits && uid->size > 4;	// When we know that the UID has more than 4 bytes
				break;
			
			case 2:
				buffer[0] = PICC_CMD_SEL_CL2;
				uidIndex = 3;
 80a2016:	2603      	movs	r6, #3
				useCascadeTag = validBits && uid->size > 7;	// When we know that the UID has more than 7 bytes
 80a2018:	2b07      	cmp	r3, #7
 80a201a:	bf94      	ite	ls
 80a201c:	2300      	movls	r3, #0
 80a201e:	2301      	movhi	r3, #1
 80a2020:	e009      	b.n	80a2036 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x70>
				break;
			
			case 3:
				buffer[0] = PICC_CMD_SEL_CL3;
 80a2022:	2397      	movs	r3, #151	; 0x97
 80a2024:	f88d 301c 	strb.w	r3, [sp, #28]
				uidIndex = 6;
 80a2028:	2606      	movs	r6, #6
				useCascadeTag = false;						// Never used in CL3.
 80a202a:	2300      	movs	r3, #0
				break;
 80a202c:	e003      	b.n	80a2036 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x70>
	while ( ! uidComplete) {
		// Set the Cascade Level in the SEL byte, find out if we need to use the Cascade Tag in byte 2.
		switch (cascadeLevel) {
			case 1:
				buffer[0] = PICC_CMD_SEL_CL1;
				uidIndex = 0;
 80a202e:	463e      	mov	r6, r7
 80a2030:	e000      	b.n	80a2034 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x6e>
				useCascadeTag = validBits && uid->size > 4;	// When we know that the UID has more than 4 bytes
				break;
			
			case 2:
				buffer[0] = PICC_CMD_SEL_CL2;
				uidIndex = 3;
 80a2032:	2603      	movs	r6, #3
				useCascadeTag = validBits && uid->size > 7;	// When we know that the UID has more than 7 bytes
 80a2034:	463b      	mov	r3, r7
				return STATUS_INTERNAL_ERROR;
				break;
		}
		
		// How many UID bits are known in this Cascade Level?
		currentLevelKnownBits = validBits - (8 * uidIndex);
 80a2036:	eba7 04c6 	sub.w	r4, r7, r6, lsl #3
 80a203a:	b264      	sxtb	r4, r4
 80a203c:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
		if (currentLevelKnownBits < 0) {
			currentLevelKnownBits = 0;
		}
		// Copy the known bits from uid->uidByte[] to buffer[]
		index = 2; // destination index in buffer[]
		if (useCascadeTag) {
 80a2040:	b12b      	cbz	r3, 80a204e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x88>
			buffer[index++] = PICC_CMD_CT;
 80a2042:	2288      	movs	r2, #136	; 0x88
 80a2044:	f88d 201e 	strb.w	r2, [sp, #30]
 80a2048:	f04f 0803 	mov.w	r8, #3
 80a204c:	e001      	b.n	80a2052 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x8c>
		currentLevelKnownBits = validBits - (8 * uidIndex);
		if (currentLevelKnownBits < 0) {
			currentLevelKnownBits = 0;
		}
		// Copy the known bits from uid->uidByte[] to buffer[]
		index = 2; // destination index in buffer[]
 80a204e:	f04f 0802 	mov.w	r8, #2
		if (useCascadeTag) {
			buffer[index++] = PICC_CMD_CT;
		}
		byte bytesToCopy = currentLevelKnownBits / 8 + (currentLevelKnownBits % 8 ? 1 : 0); // The number of bytes needed to represent the known bits for this level.
 80a2052:	b2e1      	uxtb	r1, r4
 80a2054:	f011 0207 	ands.w	r2, r1, #7
 80a2058:	bf18      	it	ne
 80a205a:	2201      	movne	r2, #1
 80a205c:	eb02 02e4 	add.w	r2, r2, r4, asr #3
		if (bytesToCopy) {
 80a2060:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 80a2064:	d106      	bne.n	80a2074 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xae>
			for (count = 0; count < bytesToCopy; count++) {
				buffer[index++] = uid->uidByte[uidIndex + count];
			}
		}
		// Now that the data has been copied we need to include the 8 bits in CT in currentLevelKnownBits
		if (useCascadeTag) {
 80a2066:	2b00      	cmp	r3, #0
 80a2068:	f000 808c 	beq.w	80a2184 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1be>
			currentLevelKnownBits += 8;
 80a206c:	f101 0408 	add.w	r4, r1, #8
 80a2070:	b264      	sxtb	r4, r4
 80a2072:	e087      	b.n	80a2184 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1be>
		if (useCascadeTag) {
			buffer[index++] = PICC_CMD_CT;
		}
		byte bytesToCopy = currentLevelKnownBits / 8 + (currentLevelKnownBits % 8 ? 1 : 0); // The number of bytes needed to represent the known bits for this level.
		if (bytesToCopy) {
			byte maxBytes = useCascadeTag ? 3 : 4; // Max 4 bytes in each Cascade Level. Only 3 left if we use the Cascade Tag
 80a2074:	2b00      	cmp	r3, #0
 80a2076:	bf14      	ite	ne
 80a2078:	2003      	movne	r0, #3
 80a207a:	2004      	moveq	r0, #4
 80a207c:	4282      	cmp	r2, r0
 80a207e:	bf28      	it	cs
 80a2080:	4602      	movcs	r2, r0
 80a2082:	2000      	movs	r0, #0
			if (bytesToCopy > maxBytes) { 
				bytesToCopy = maxBytes;
			}
			for (count = 0; count < bytesToCopy; count++) {
				buffer[index++] = uid->uidByte[uidIndex + count];
 80a2084:	eb08 0e00 	add.w	lr, r8, r0
 80a2088:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 80a208c:	fa5f fe8e 	uxtb.w	lr, lr
 80a2090:	44e6      	add	lr, ip
 80a2092:	eb06 0c00 	add.w	ip, r6, r0
 80a2096:	44d4      	add	ip, sl
 80a2098:	f89c c001 	ldrb.w	ip, [ip, #1]
 80a209c:	3001      	adds	r0, #1
 80a209e:	f80e cc0c 	strb.w	ip, [lr, #-12]
		if (bytesToCopy) {
			byte maxBytes = useCascadeTag ? 3 : 4; // Max 4 bytes in each Cascade Level. Only 3 left if we use the Cascade Tag
			if (bytesToCopy > maxBytes) { 
				bytesToCopy = maxBytes;
			}
			for (count = 0; count < bytesToCopy; count++) {
 80a20a2:	fa5f fe80 	uxtb.w	lr, r0
 80a20a6:	4596      	cmp	lr, r2
 80a20a8:	d3ec      	bcc.n	80a2084 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xbe>
 80a20aa:	e7dc      	b.n	80a2066 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xa0>
				currentLevelKnownBits = collisionPos;
				count			= (currentLevelKnownBits - 1) % 8; // The bit to modify
				index			= 1 + (currentLevelKnownBits / 8) + (count ? 1 : 0); // First byte is index 0.
				buffer[index]	|= (1 << count); 
			}
			else if (result != STATUS_OK) {
 80a20ac:	2801      	cmp	r0, #1
 80a20ae:	f040 808d 	bne.w	80a21cc <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x206>
				return result;
			}
			else { // STATUS_OK
				if (currentLevelKnownBits >= 32) { // This was a SELECT.
 80a20b2:	2c1f      	cmp	r4, #31
 80a20b4:	f300 808c 	bgt.w	80a21d0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x20a>
					selectDone = true; // No more anticollision 
					// We continue below outside the while.
				}
				else { // This was an ANTICOLLISION.
					// We now have all 32 bits of the UID in this Cascade Level
					currentLevelKnownBits = 32;
 80a20b8:	2420      	movs	r4, #32
		selectDone = false;
		while ( ! selectDone) {
			// Find out how many bits and bytes to send and receive.
			if (currentLevelKnownBits >= 32) { // All UID bits in this Cascade Level are known. This is a SELECT.
				//Serial.print("SELECT: currentLevelKnownBits="); Serial.println(currentLevelKnownBits, DEC);
				buffer[1] = 0x70; // NVB - Number of Valid Bits: Seven whole bytes
 80a20ba:	f04f 0370 	mov.w	r3, #112	; 0x70
				// Calulate BCC - Block Check Character
				buffer[6] = buffer[2] ^ buffer[3] ^ buffer[4] ^ buffer[5];
 80a20be:	f89d 201e 	ldrb.w	r2, [sp, #30]
		selectDone = false;
		while ( ! selectDone) {
			// Find out how many bits and bytes to send and receive.
			if (currentLevelKnownBits >= 32) { // All UID bits in this Cascade Level are known. This is a SELECT.
				//Serial.print("SELECT: currentLevelKnownBits="); Serial.println(currentLevelKnownBits, DEC);
				buffer[1] = 0x70; // NVB - Number of Valid Bits: Seven whole bytes
 80a20c2:	f88d 301d 	strb.w	r3, [sp, #29]
				// Calulate BCC - Block Check Character
				buffer[6] = buffer[2] ^ buffer[3] ^ buffer[4] ^ buffer[5];
 80a20c6:	f89d 301f 	ldrb.w	r3, [sp, #31]
				// Calculate CRC_A
				result = PCD_CalculateCRC(buffer, 7, &buffer[7]);
 80a20ca:	a907      	add	r1, sp, #28
			// Find out how many bits and bytes to send and receive.
			if (currentLevelKnownBits >= 32) { // All UID bits in this Cascade Level are known. This is a SELECT.
				//Serial.print("SELECT: currentLevelKnownBits="); Serial.println(currentLevelKnownBits, DEC);
				buffer[1] = 0x70; // NVB - Number of Valid Bits: Seven whole bytes
				// Calulate BCC - Block Check Character
				buffer[6] = buffer[2] ^ buffer[3] ^ buffer[4] ^ buffer[5];
 80a20cc:	4053      	eors	r3, r2
 80a20ce:	f89d 2020 	ldrb.w	r2, [sp, #32]
				// Calculate CRC_A
				result = PCD_CalculateCRC(buffer, 7, &buffer[7]);
 80a20d2:	4658      	mov	r0, fp
			// Find out how many bits and bytes to send and receive.
			if (currentLevelKnownBits >= 32) { // All UID bits in this Cascade Level are known. This is a SELECT.
				//Serial.print("SELECT: currentLevelKnownBits="); Serial.println(currentLevelKnownBits, DEC);
				buffer[1] = 0x70; // NVB - Number of Valid Bits: Seven whole bytes
				// Calulate BCC - Block Check Character
				buffer[6] = buffer[2] ^ buffer[3] ^ buffer[4] ^ buffer[5];
 80a20d4:	405a      	eors	r2, r3
 80a20d6:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
 80a20da:	4053      	eors	r3, r2
 80a20dc:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
				// Calculate CRC_A
				result = PCD_CalculateCRC(buffer, 7, &buffer[7]);
 80a20e0:	2207      	movs	r2, #7
 80a20e2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80a20e6:	f7ff fd6f 	bl	80a1bc8 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
				if (result != STATUS_OK) {
 80a20ea:	2801      	cmp	r0, #1
 80a20ec:	f040 80b7 	bne.w	80a225e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x298>
					return result;
				}
				txLastBits		= 0; // 0 => All 8 bits are valid.
 80a20f0:	f04f 0300 	mov.w	r3, #0
 80a20f4:	f88d 301a 	strb.w	r3, [sp, #26]
				bufferUsed		= 9;
				// Store response in the last 3 bytes of buffer (BCC and CRC_A - not needed after tx)
				responseBuffer	= &buffer[6];
				responseLength	= 3;
 80a20f8:	2303      	movs	r3, #3
 80a20fa:	f88d 301b 	strb.w	r3, [sp, #27]
				result = PCD_CalculateCRC(buffer, 7, &buffer[7]);
				if (result != STATUS_OK) {
					return result;
				}
				txLastBits		= 0; // 0 => All 8 bits are valid.
				bufferUsed		= 9;
 80a20fe:	2309      	movs	r3, #9
				// Store response in the last 3 bytes of buffer (BCC and CRC_A - not needed after tx)
				responseBuffer	= &buffer[6];
 80a2100:	f10d 0922 	add.w	r9, sp, #34	; 0x22
				result = PCD_CalculateCRC(buffer, 7, &buffer[7]);
				if (result != STATUS_OK) {
					return result;
				}
				txLastBits		= 0; // 0 => All 8 bits are valid.
				bufferUsed		= 9;
 80a2104:	9304      	str	r3, [sp, #16]
				responseBuffer	= &buffer[index];
				responseLength	= sizeof(buffer) - index;
			}

			// Set bit adjustments
			rxAlign = txLastBits;											// Having a seperate variable is overkill. But it makes the next line easier to read.
 80a2106:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 80a210a:	f818 3d0e 	ldrb.w	r3, [r8, #-14]!
			PCD_WriteRegister(BitFramingReg, (rxAlign << 4) + txLastBits);	// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
 80a210e:	211a      	movs	r1, #26
 80a2110:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 80a2114:	b2d2      	uxtb	r2, r2
 80a2116:	4658      	mov	r0, fp
 80a2118:	9305      	str	r3, [sp, #20]
 80a211a:	f7ff fcee 	bl	80a1afa <_ZN7MFRC52217PCD_WriteRegisterEhh>

			// Transmit the buffer and receive the response.
			result = PCD_TransceiveData(buffer, bufferUsed, responseBuffer, &responseLength, &txLastBits, rxAlign);			
 80a211e:	2300      	movs	r3, #0
 80a2120:	9303      	str	r3, [sp, #12]
 80a2122:	9b05      	ldr	r3, [sp, #20]
 80a2124:	f8cd 8004 	str.w	r8, [sp, #4]
 80a2128:	9302      	str	r3, [sp, #8]
 80a212a:	f10d 031b 	add.w	r3, sp, #27
 80a212e:	9300      	str	r3, [sp, #0]
 80a2130:	9a04      	ldr	r2, [sp, #16]
 80a2132:	464b      	mov	r3, r9
 80a2134:	a907      	add	r1, sp, #28
 80a2136:	4658      	mov	r0, fp
 80a2138:	f7ff feec 	bl	80a1f14 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
			if (result == STATUS_COLLISION) { // More than one PICC in the field => collision.
 80a213c:	2803      	cmp	r0, #3
			// Set bit adjustments
			rxAlign = txLastBits;											// Having a seperate variable is overkill. But it makes the next line easier to read.
			PCD_WriteRegister(BitFramingReg, (rxAlign << 4) + txLastBits);	// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]

			// Transmit the buffer and receive the response.
			result = PCD_TransceiveData(buffer, bufferUsed, responseBuffer, &responseLength, &txLastBits, rxAlign);			
 80a213e:	4680      	mov	r8, r0
			if (result == STATUS_COLLISION) { // More than one PICC in the field => collision.
 80a2140:	d1b4      	bne.n	80a20ac <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xe6>
				result = PCD_ReadRegister(CollReg); // CollReg[7..0] bits are: ValuesAfterColl reserved CollPosNotValid CollPos[4:0]
 80a2142:	211c      	movs	r1, #28
 80a2144:	4658      	mov	r0, fp
 80a2146:	f7ff fd0a 	bl	80a1b5e <_ZN7MFRC52216PCD_ReadRegisterEh>
				if (result & 0x20) { // CollPosNotValid
 80a214a:	0681      	lsls	r1, r0, #26
 80a214c:	d43e      	bmi.n	80a21cc <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x206>
					return STATUS_COLLISION; // Without a valid collision position we cannot continue
				}
				byte collisionPos = result & 0x1F; // Values 0-31, 0 means bit 32.
				if (collisionPos == 0) {
					collisionPos = 32;
 80a214e:	f010 001f 	ands.w	r0, r0, #31
 80a2152:	bf08      	it	eq
 80a2154:	2020      	moveq	r0, #32
				}
				if (collisionPos <= currentLevelKnownBits) { // No progress - should not happen 
 80a2156:	42a0      	cmp	r0, r4
 80a2158:	dd36      	ble.n	80a21c8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x202>
					return STATUS_INTERNAL_ERROR;
				}
				// Choose the PICC with the bit set.
				currentLevelKnownBits = collisionPos;
 80a215a:	b244      	sxtb	r4, r0
				count			= (currentLevelKnownBits - 1) % 8; // The bit to modify
 80a215c:	3801      	subs	r0, #1
				index			= 1 + (currentLevelKnownBits / 8) + (count ? 1 : 0); // First byte is index 0.
				buffer[index]	|= (1 << count); 
 80a215e:	f000 0307 	and.w	r3, r0, #7
 80a2162:	f010 0007 	ands.w	r0, r0, #7
 80a2166:	bf18      	it	ne
 80a2168:	2001      	movne	r0, #1
 80a216a:	eb00 00e4 	add.w	r0, r0, r4, asr #3
 80a216e:	aa0a      	add	r2, sp, #40	; 0x28
 80a2170:	3001      	adds	r0, #1
 80a2172:	4410      	add	r0, r2
 80a2174:	2201      	movs	r2, #1
 80a2176:	fa02 f303 	lsl.w	r3, r2, r3
 80a217a:	f810 2c0c 	ldrb.w	r2, [r0, #-12]
 80a217e:	4313      	orrs	r3, r2
 80a2180:	f800 3c0c 	strb.w	r3, [r0, #-12]
		
		// Repeat anti collision loop until we can transmit all UID bits + BCC and receive a SAK - max 32 iterations.
		selectDone = false;
		while ( ! selectDone) {
			// Find out how many bits and bytes to send and receive.
			if (currentLevelKnownBits >= 32) { // All UID bits in this Cascade Level are known. This is a SELECT.
 80a2184:	2c1f      	cmp	r4, #31
 80a2186:	dc98      	bgt.n	80a20ba <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xf4>
			}
			else { // This is an ANTICOLLISION.
				//Serial.print("ANTICOLLISION: currentLevelKnownBits="); Serial.println(currentLevelKnownBits, DEC);
				txLastBits		= currentLevelKnownBits % 8;
				count			= currentLevelKnownBits / 8;	// Number of whole bytes in the UID part.
				index			= 2 + count;					// Number of whole bytes: SEL + NVB + UIDs
 80a2188:	10e3      	asrs	r3, r4, #3
 80a218a:	3302      	adds	r3, #2
 80a218c:	b2db      	uxtb	r3, r3
				responseBuffer	= &buffer[6];
				responseLength	= 3;
			}
			else { // This is an ANTICOLLISION.
				//Serial.print("ANTICOLLISION: currentLevelKnownBits="); Serial.println(currentLevelKnownBits, DEC);
				txLastBits		= currentLevelKnownBits % 8;
 80a218e:	f004 0807 	and.w	r8, r4, #7
 80a2192:	fa5f f288 	uxtb.w	r2, r8
				count			= currentLevelKnownBits / 8;	// Number of whole bytes in the UID part.
				index			= 2 + count;					// Number of whole bytes: SEL + NVB + UIDs
				buffer[1]		= (index << 4) + txLastBits;	// NVB - Number of Valid Bits
				bufferUsed		= index + (txLastBits ? 1 : 0);
 80a2196:	f1b8 0f00 	cmp.w	r8, #0
 80a219a:	bf0c      	ite	eq
 80a219c:	4698      	moveq	r8, r3
 80a219e:	f103 0801 	addne.w	r8, r3, #1
				responseBuffer	= &buffer[6];
				responseLength	= 3;
			}
			else { // This is an ANTICOLLISION.
				//Serial.print("ANTICOLLISION: currentLevelKnownBits="); Serial.println(currentLevelKnownBits, DEC);
				txLastBits		= currentLevelKnownBits % 8;
 80a21a2:	f88d 201a 	strb.w	r2, [sp, #26]
				count			= currentLevelKnownBits / 8;	// Number of whole bytes in the UID part.
				index			= 2 + count;					// Number of whole bytes: SEL + NVB + UIDs
				buffer[1]		= (index << 4) + txLastBits;	// NVB - Number of Valid Bits
 80a21a6:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 80a21aa:	f88d 201d 	strb.w	r2, [sp, #29]
				bufferUsed		= index + (txLastBits ? 1 : 0);
 80a21ae:	fa5f f288 	uxtb.w	r2, r8
 80a21b2:	9204      	str	r2, [sp, #16]
				// Store response in the unused part of buffer
				responseBuffer	= &buffer[index];
 80a21b4:	aa07      	add	r2, sp, #28
 80a21b6:	eb02 0903 	add.w	r9, r2, r3
				responseLength	= sizeof(buffer) - index;
 80a21ba:	f1c3 0309 	rsb	r3, r3, #9
 80a21be:	f88d 301b 	strb.w	r3, [sp, #27]
 80a21c2:	e7a0      	b.n	80a2106 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x140>
	//						2			CT		uid3	uid4	uid5
	//						3			uid6	uid7	uid8	uid9
	
	// Sanity checks
	if (validBits > 80) {
		return STATUS_INVALID;
 80a21c4:	2007      	movs	r0, #7
 80a21c6:	e04a      	b.n	80a225e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x298>
				byte collisionPos = result & 0x1F; // Values 0-31, 0 means bit 32.
				if (collisionPos == 0) {
					collisionPos = 32;
				}
				if (collisionPos <= currentLevelKnownBits) { // No progress - should not happen 
					return STATUS_INTERNAL_ERROR;
 80a21c8:	2006      	movs	r0, #6
 80a21ca:	e048      	b.n	80a225e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x298>
			// Set bit adjustments
			rxAlign = txLastBits;											// Having a seperate variable is overkill. But it makes the next line easier to read.
			PCD_WriteRegister(BitFramingReg, (rxAlign << 4) + txLastBits);	// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]

			// Transmit the buffer and receive the response.
			result = PCD_TransceiveData(buffer, bufferUsed, responseBuffer, &responseLength, &txLastBits, rxAlign);			
 80a21cc:	4640      	mov	r0, r8
 80a21ce:	e046      	b.n	80a225e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x298>
		} // End of while ( ! selectDone)

		// We do not check the CBB - it was constructed by us above.
		
		// Copy the found UID bytes from buffer[] to uid->uidByte[]
		index			= (buffer[2] == PICC_CMD_CT) ? 3 : 2; // source index in buffer[]
 80a21d0:	f89d 301e 	ldrb.w	r3, [sp, #30]
 80a21d4:	2b88      	cmp	r3, #136	; 0x88
 80a21d6:	d03f      	beq.n	80a2258 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x292>
 80a21d8:	2102      	movs	r1, #2
		bytesToCopy		= (buffer[2] == PICC_CMD_CT) ? 3 : 4;
 80a21da:	2404      	movs	r4, #4
 80a21dc:	2300      	movs	r3, #0
		for (count = 0; count < bytesToCopy; count++) {
			uid->uidByte[uidIndex + count] = buffer[index++];
 80a21de:	18ca      	adds	r2, r1, r3
 80a21e0:	b2d2      	uxtb	r2, r2
 80a21e2:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 80a21e6:	4472      	add	r2, lr
 80a21e8:	18f0      	adds	r0, r6, r3
 80a21ea:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80a21ee:	4450      	add	r0, sl
 80a21f0:	3301      	adds	r3, #1
 80a21f2:	7042      	strb	r2, [r0, #1]
		// We do not check the CBB - it was constructed by us above.
		
		// Copy the found UID bytes from buffer[] to uid->uidByte[]
		index			= (buffer[2] == PICC_CMD_CT) ? 3 : 2; // source index in buffer[]
		bytesToCopy		= (buffer[2] == PICC_CMD_CT) ? 3 : 4;
		for (count = 0; count < bytesToCopy; count++) {
 80a21f4:	b2da      	uxtb	r2, r3
 80a21f6:	4294      	cmp	r4, r2
 80a21f8:	d8f1      	bhi.n	80a21de <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x218>
			uid->uidByte[uidIndex + count] = buffer[index++];
		}
		
		// Check response SAK (Select Acknowledge)
		if (responseLength != 3 || txLastBits != 0) {		// SAK must be exactly 24 bits (1 byte + CRC_A).
 80a21fa:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80a21fe:	2b03      	cmp	r3, #3
 80a2200:	d126      	bne.n	80a2250 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
 80a2202:	f89d 301a 	ldrb.w	r3, [sp, #26]
 80a2206:	bb1b      	cbnz	r3, 80a2250 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28a>
			return STATUS_ERROR;
		}
		// Verify CRC_A - do our own calculation and store the control in buffer[2..3] - those bytes are not needed anymore.
		result = PCD_CalculateCRC(responseBuffer, 1, &buffer[2]);
 80a2208:	f10d 031e 	add.w	r3, sp, #30
 80a220c:	2201      	movs	r2, #1
 80a220e:	4649      	mov	r1, r9
 80a2210:	4658      	mov	r0, fp
 80a2212:	f7ff fcd9 	bl	80a1bc8 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
		if (result != STATUS_OK) {
 80a2216:	2801      	cmp	r0, #1
 80a2218:	d121      	bne.n	80a225e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x298>
			return result;
		}
		if ((buffer[2] != responseBuffer[1]) || (buffer[3] != responseBuffer[2])) {
 80a221a:	f89d 201e 	ldrb.w	r2, [sp, #30]
 80a221e:	f899 3001 	ldrb.w	r3, [r9, #1]
 80a2222:	429a      	cmp	r2, r3
 80a2224:	d116      	bne.n	80a2254 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28e>
 80a2226:	f89d 201f 	ldrb.w	r2, [sp, #31]
 80a222a:	f899 3002 	ldrb.w	r3, [r9, #2]
 80a222e:	429a      	cmp	r2, r3
 80a2230:	d110      	bne.n	80a2254 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28e>
			return STATUS_CRC_WRONG;
		}
		if (responseBuffer[0] & 0x04) { // Cascade bit set - UID not complete yes
 80a2232:	f899 3000 	ldrb.w	r3, [r9]
 80a2236:	075a      	lsls	r2, r3, #29
 80a2238:	d502      	bpl.n	80a2240 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x27a>
			cascadeLevel++;
 80a223a:	3501      	adds	r5, #1
 80a223c:	b2ed      	uxtb	r5, r5
 80a223e:	e6d0      	b.n	80a1fe2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1c>
			uid->sak = responseBuffer[0];
		}
	} // End of while ( ! uidComplete)
	
	// Set correct uid->size
	uid->size = 3 * cascadeLevel + 1;
 80a2240:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80a2244:	3501      	adds	r5, #1
		if (responseBuffer[0] & 0x04) { // Cascade bit set - UID not complete yes
			cascadeLevel++;
		}
		else {
			uidComplete = true;
			uid->sak = responseBuffer[0];
 80a2246:	f88a 300b 	strb.w	r3, [sl, #11]
		}
	} // End of while ( ! uidComplete)
	
	// Set correct uid->size
	uid->size = 3 * cascadeLevel + 1;
 80a224a:	f88a 5000 	strb.w	r5, [sl]

	return STATUS_OK;
 80a224e:	e006      	b.n	80a225e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x298>
			uid->uidByte[uidIndex + count] = buffer[index++];
		}
		
		// Check response SAK (Select Acknowledge)
		if (responseLength != 3 || txLastBits != 0) {		// SAK must be exactly 24 bits (1 byte + CRC_A).
			return STATUS_ERROR;
 80a2250:	2002      	movs	r0, #2
 80a2252:	e004      	b.n	80a225e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x298>
		result = PCD_CalculateCRC(responseBuffer, 1, &buffer[2]);
		if (result != STATUS_OK) {
			return result;
		}
		if ((buffer[2] != responseBuffer[1]) || (buffer[3] != responseBuffer[2])) {
			return STATUS_CRC_WRONG;
 80a2254:	2008      	movs	r0, #8
 80a2256:	e002      	b.n	80a225e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x298>
		} // End of while ( ! selectDone)

		// We do not check the CBB - it was constructed by us above.
		
		// Copy the found UID bytes from buffer[] to uid->uidByte[]
		index			= (buffer[2] == PICC_CMD_CT) ? 3 : 2; // source index in buffer[]
 80a2258:	2103      	movs	r1, #3
		bytesToCopy		= (buffer[2] == PICC_CMD_CT) ? 3 : 4;
 80a225a:	460c      	mov	r4, r1
 80a225c:	e7be      	b.n	80a21dc <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x216>
	
	// Set correct uid->size
	uid->size = 3 * cascadeLevel + 1;

	return STATUS_OK;
} // End PICC_Select()
 80a225e:	b00b      	add	sp, #44	; 0x2c
 80a2260:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a2264 <_ZN7MFRC52219PICC_ReadCardSerialEv>:
 * Remember to call PICC_IsNewCardPresent(), PICC_RequestA() or PICC_WakeupA() first.
 * The read UID is available in the class variable uid.
 * 
 * @return bool
 */
bool MFRC522::PICC_ReadCardSerial() {
 80a2264:	b508      	push	{r3, lr}
	byte result = PICC_Select(&uid);
 80a2266:	2200      	movs	r2, #0
 80a2268:	4601      	mov	r1, r0
 80a226a:	f7ff feac 	bl	80a1fc6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh>
	return (result == STATUS_OK);
} // End PICC_ReadCardSerial()
 80a226e:	1e43      	subs	r3, r0, #1
 80a2270:	4258      	negs	r0, r3
 80a2272:	4158      	adcs	r0, r3
 80a2274:	bd08      	pop	{r3, pc}

080a2276 <_GLOBAL__sub_I__ZN7MFRC522C2Ehh>:
 80a2276:	f000 bd79 	b.w	80a2d6c <HAL_Pin_Map>
	...

080a227c <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
 80a227c:	b538      	push	{r3, r4, r5, lr}
 80a227e:	4b0b      	ldr	r3, [pc, #44]	; (80a22ac <_ZN9TCPClientD1Ev+0x30>)
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 80a2280:	6984      	ldr	r4, [r0, #24]
 80a2282:	4605      	mov	r5, r0
 80a2284:	6003      	str	r3, [r0, #0]
 80a2286:	b17c      	cbz	r4, 80a22a8 <_ZN9TCPClientD1Ev+0x2c>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a2288:	6863      	ldr	r3, [r4, #4]
 80a228a:	3b01      	subs	r3, #1
 80a228c:	6063      	str	r3, [r4, #4]
 80a228e:	b95b      	cbnz	r3, 80a22a8 <_ZN9TCPClientD1Ev+0x2c>
        {
          _M_dispose();
 80a2290:	6823      	ldr	r3, [r4, #0]
 80a2292:	4620      	mov	r0, r4
 80a2294:	689b      	ldr	r3, [r3, #8]
 80a2296:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a2298:	68a3      	ldr	r3, [r4, #8]
 80a229a:	3b01      	subs	r3, #1
 80a229c:	60a3      	str	r3, [r4, #8]
 80a229e:	b91b      	cbnz	r3, 80a22a8 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
 80a22a0:	6823      	ldr	r3, [r4, #0]
 80a22a2:	4620      	mov	r0, r4
 80a22a4:	68db      	ldr	r3, [r3, #12]
 80a22a6:	4798      	blx	r3
 80a22a8:	4628      	mov	r0, r5
 80a22aa:	bd38      	pop	{r3, r4, r5, pc}
 80a22ac:	080a9a00 	.word	0x080a9a00

080a22b0 <_ZN9TCPClientD0Ev>:
 80a22b0:	b510      	push	{r4, lr}
 80a22b2:	4604      	mov	r4, r0
 80a22b4:	f7ff ffe2 	bl	80a227c <_ZN9TCPClientD1Ev>
 80a22b8:	4620      	mov	r0, r4
 80a22ba:	211c      	movs	r1, #28
 80a22bc:	f002 fd3e 	bl	80a4d3c <_ZdlPvj>
 80a22c0:	4620      	mov	r0, r4
 80a22c2:	bd10      	pop	{r4, pc}

080a22c4 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi>:

    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(char* domain, uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
 80a22c4:	b538      	push	{r3, r4, r5, lr}
 80a22c6:	461d      	mov	r5, r3
    this->callback = callback;
 80a22c8:	9b05      	ldr	r3, [sp, #20]

    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(char* domain, uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
 80a22ca:	4604      	mov	r4, r0
    this->callback = callback;
 80a22cc:	6303      	str	r3, [r0, #48]	; 0x30
    this->qoscallback = NULL;
 80a22ce:	2300      	movs	r3, #0
 80a22d0:	6343      	str	r3, [r0, #52]	; 0x34
    if (ip != NULL)
 80a22d2:	b102      	cbz	r2, 80a22d6 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x12>
        this->ip = ip;
 80a22d4:	6482      	str	r2, [r0, #72]	; 0x48
    if (domain != NULL)
 80a22d6:	b119      	cbz	r1, 80a22e0 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x1c>
        this->domain = domain;
 80a22d8:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80a22dc:	f001 fc37 	bl	80a3b4e <_ZN6StringaSEPKc>
    this->port = port;
    this->keepalive = keepalive;
 80a22e0:	9b04      	ldr	r3, [sp, #16]

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
    if (buffer != NULL)
 80a22e2:	69e0      	ldr	r0, [r4, #28]
    if (ip != NULL)
        this->ip = ip;
    if (domain != NULL)
        this->domain = domain;
    this->port = port;
    this->keepalive = keepalive;
 80a22e4:	6523      	str	r3, [r4, #80]	; 0x50

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
 80a22e6:	9b06      	ldr	r3, [sp, #24]
    this->qoscallback = NULL;
    if (ip != NULL)
        this->ip = ip;
    if (domain != NULL)
        this->domain = domain;
    this->port = port;
 80a22e8:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
    this->keepalive = keepalive;

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
 80a22ec:	2bff      	cmp	r3, #255	; 0xff
 80a22ee:	bfb8      	it	lt
 80a22f0:	23ff      	movlt	r3, #255	; 0xff
 80a22f2:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    if (buffer != NULL)
 80a22f6:	b108      	cbz	r0, 80a22fc <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x38>
      delete[] buffer;
 80a22f8:	f7fd fed7 	bl	80a00aa <_ZdaPv>
    buffer = new uint8_t[this->maxpacketsize];
 80a22fc:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
 80a2300:	f7fd fecf 	bl	80a00a2 <_Znaj>
 80a2304:	61e0      	str	r0, [r4, #28]
 80a2306:	bd38      	pop	{r3, r4, r5, pc}

080a2308 <_ZN4MQTTC1EPctiPFvS0_PhjEi>:

MQTT::MQTT(char* domain, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int)) {
    this->initialize(domain, NULL, port, keepalive, callback, MQTT_MAX_PACKET_SIZE);
}

MQTT::MQTT(char* domain, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
 80a2308:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80a230c:	4604      	mov	r4, r0
 80a230e:	4617      	mov	r7, r2
 80a2310:	4698      	mov	r8, r3
 80a2312:	460e      	mov	r6, r1
 80a2314:	2500      	movs	r5, #0
 80a2316:	f001 fac7 	bl	80a38a8 <_ZN9TCPClientC1Ev>
 80a231a:	61e5      	str	r5, [r4, #28]
 80a231c:	490a      	ldr	r1, [pc, #40]	; (80a2348 <_ZN4MQTTC1EPctiPFvS0_PhjEi+0x40>)
 80a231e:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80a2322:	f001 fbc2 	bl	80a3aaa <_ZN6StringC1EPK19__FlashStringHelper>
    this->initialize(domain, NULL, port, keepalive, callback, maxpacketsize);
 80a2326:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80a2328:	4620      	mov	r0, r4
 80a232a:	9302      	str	r3, [sp, #8]
 80a232c:	9b0a      	ldr	r3, [sp, #40]	; 0x28

MQTT::MQTT(char* domain, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int)) {
    this->initialize(domain, NULL, port, keepalive, callback, MQTT_MAX_PACKET_SIZE);
}

MQTT::MQTT(char* domain, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
 80a232e:	64a5      	str	r5, [r4, #72]	; 0x48
    this->initialize(domain, NULL, port, keepalive, callback, maxpacketsize);
 80a2330:	9301      	str	r3, [sp, #4]
 80a2332:	f8cd 8000 	str.w	r8, [sp]
 80a2336:	463b      	mov	r3, r7
 80a2338:	462a      	mov	r2, r5
 80a233a:	4631      	mov	r1, r6
 80a233c:	f7ff ffc2 	bl	80a22c4 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi>
}
 80a2340:	4620      	mov	r0, r4
 80a2342:	b004      	add	sp, #16
 80a2344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a2348:	080a98e2 	.word	0x080a98e2

080a234c <_ZN4MQTT8readByteEv>:
        _client.stop();
    }
    return false;
}

uint8_t MQTT::readByte() {
 80a234c:	b510      	push	{r4, lr}
 80a234e:	4604      	mov	r4, r0
    while(!_client.available()) {}
 80a2350:	4620      	mov	r0, r4
 80a2352:	f001 f93d 	bl	80a35d0 <_ZN9TCPClient9availableEv>
 80a2356:	2800      	cmp	r0, #0
 80a2358:	d0fa      	beq.n	80a2350 <_ZN4MQTT8readByteEv+0x4>
    return _client.read();
 80a235a:	4620      	mov	r0, r4
 80a235c:	f001 f8ed 	bl	80a353a <_ZN9TCPClient4readEv>
}
 80a2360:	b2c0      	uxtb	r0, r0
 80a2362:	bd10      	pop	{r4, pc}

080a2364 <_ZN4MQTT10readPacketEPh>:

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
 80a2364:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a2368:	4605      	mov	r5, r0
    uint16_t len = 0;
    buffer[len++] = readByte();
 80a236a:	69c4      	ldr	r4, [r0, #28]
uint8_t MQTT::readByte() {
    while(!_client.available()) {}
    return _client.read();
}

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
 80a236c:	468a      	mov	sl, r1
    uint16_t len = 0;
    buffer[len++] = readByte();
 80a236e:	f7ff ffed 	bl	80a234c <_ZN4MQTT8readByteEv>
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
    uint32_t multiplier = 1;
 80a2372:	f04f 0801 	mov.w	r8, #1
    return _client.read();
}

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
    uint16_t len = 0;
    buffer[len++] = readByte();
 80a2376:	4646      	mov	r6, r8
 80a2378:	7020      	strb	r0, [r4, #0]
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
 80a237a:	69eb      	ldr	r3, [r5, #28]
    uint32_t multiplier = 1;
    uint16_t length = 0;
 80a237c:	2700      	movs	r7, #0
 80a237e:	f893 9000 	ldrb.w	r9, [r3]
 80a2382:	f009 09f0 	and.w	r9, r9, #240	; 0xf0
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
 80a2386:	4628      	mov	r0, r5
 80a2388:	f7ff ffe0 	bl	80a234c <_ZN4MQTT8readByteEv>
        buffer[len++] = digit;
 80a238c:	69eb      	ldr	r3, [r5, #28]
 80a238e:	1c74      	adds	r4, r6, #1
 80a2390:	5598      	strb	r0, [r3, r6]
        length += (digit & 127) * multiplier;
 80a2392:	f000 037f 	and.w	r3, r0, #127	; 0x7f
 80a2396:	fb03 7708 	mla	r7, r3, r8, r7
        multiplier *= 128;
    } while ((digit & 128) != 0);
 80a239a:	0603      	lsls	r3, r0, #24
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
        buffer[len++] = digit;
 80a239c:	b2a4      	uxth	r4, r4
        length += (digit & 127) * multiplier;
 80a239e:	b2bf      	uxth	r7, r7
        multiplier *= 128;
 80a23a0:	ea4f 18c8 	mov.w	r8, r8, lsl #7
    } while ((digit & 128) != 0);
 80a23a4:	d501      	bpl.n	80a23aa <_ZN4MQTT10readPacketEPh+0x46>
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
        buffer[len++] = digit;
 80a23a6:	4626      	mov	r6, r4
 80a23a8:	e7ed      	b.n	80a2386 <_ZN4MQTT10readPacketEPh+0x22>
        length += (digit & 127) * multiplier;
        multiplier *= 128;
    } while ((digit & 128) != 0);
    *lengthLength = len-1;
 80a23aa:	1e63      	subs	r3, r4, #1

    if (isPublish) {
 80a23ac:	f1b9 0f30 	cmp.w	r9, #48	; 0x30
        digit = readByte();
        buffer[len++] = digit;
        length += (digit & 127) * multiplier;
        multiplier *= 128;
    } while ((digit & 128) != 0);
    *lengthLength = len-1;
 80a23b0:	f88a 3000 	strb.w	r3, [sl]

    if (isPublish) {
 80a23b4:	d113      	bne.n	80a23de <_ZN4MQTT10readPacketEPh+0x7a>
        // Read in topic length to calculate bytes to skip over for Stream writing
        buffer[len++] = readByte();
 80a23b6:	4628      	mov	r0, r5
 80a23b8:	f8d5 801c 	ldr.w	r8, [r5, #28]
 80a23bc:	f7ff ffc6 	bl	80a234c <_ZN4MQTT8readByteEv>
 80a23c0:	f808 0004 	strb.w	r0, [r8, r4]
        buffer[len++] = readByte();
 80a23c4:	4628      	mov	r0, r5
 80a23c6:	f8d5 801c 	ldr.w	r8, [r5, #28]
 80a23ca:	f7ff ffbf 	bl	80a234c <_ZN4MQTT8readByteEv>
 80a23ce:	1cf4      	adds	r4, r6, #3
 80a23d0:	3602      	adds	r6, #2
 80a23d2:	b2b6      	uxth	r6, r6
 80a23d4:	b2a4      	uxth	r4, r4
 80a23d6:	f808 0006 	strb.w	r0, [r8, r6]
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
        start = 2;
 80a23da:	2302      	movs	r3, #2
 80a23dc:	e000      	b.n	80a23e0 <_ZN4MQTT10readPacketEPh+0x7c>
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
    uint32_t multiplier = 1;
    uint16_t length = 0;
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;
 80a23de:	2300      	movs	r3, #0
 80a23e0:	1b1b      	subs	r3, r3, r4
 80a23e2:	b29e      	uxth	r6, r3
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
 80a23e4:	19a3      	adds	r3, r4, r6
 80a23e6:	b29b      	uxth	r3, r3
 80a23e8:	429f      	cmp	r7, r3
 80a23ea:	d90b      	bls.n	80a2404 <_ZN4MQTT10readPacketEPh+0xa0>
        digit = readByte();
 80a23ec:	4628      	mov	r0, r5
 80a23ee:	f7ff ffad 	bl	80a234c <_ZN4MQTT8readByteEv>
        if (len < this->maxpacketsize) {
 80a23f2:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
 80a23f6:	42a3      	cmp	r3, r4
            buffer[len] = digit;
 80a23f8:	bf84      	itt	hi
 80a23fa:	69eb      	ldrhi	r3, [r5, #28]
 80a23fc:	5518      	strbhi	r0, [r3, r4]
        }
        len++;
 80a23fe:	3401      	adds	r4, #1
 80a2400:	b2a4      	uxth	r4, r4
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
 80a2402:	e7ef      	b.n	80a23e4 <_ZN4MQTT10readPacketEPh+0x80>
            buffer[len] = digit;
        }
        len++;
    }

    if (len > this->maxpacketsize) {
 80a2404:	f8b5 0054 	ldrh.w	r0, [r5, #84]	; 0x54
        len = 0; // This will cause the packet to be ignored.
    }

    return len;
}
 80a2408:	42a0      	cmp	r0, r4
 80a240a:	bf2c      	ite	cs
 80a240c:	4620      	movcs	r0, r4
 80a240e:	2000      	movcc	r0, #0
 80a2410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080a2414 <_ZN4MQTT5writeEhPht>:
        return _client.write(buffer, length);
    }
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
 80a2414:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80a2416:	4607      	mov	r7, r0
 80a2418:	468e      	mov	lr, r1
 80a241a:	461e      	mov	r6, r3
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
 80a241c:	461d      	mov	r5, r3
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
    uint8_t lenBuf[4];
    uint8_t llen = 0;
 80a241e:	2400      	movs	r4, #0
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
    do {
        digit = len % 128;
 80a2420:	f005 037f 	and.w	r3, r5, #127	; 0x7f
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
 80a2424:	a902      	add	r1, sp, #8
    uint16_t rc;
    uint16_t len = length;
    do {
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
 80a2426:	09ed      	lsrs	r5, r5, #7
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
 80a2428:	4421      	add	r1, r4
    uint16_t len = length;
    do {
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
 80a242a:	bf18      	it	ne
 80a242c:	f043 0380 	orrne.w	r3, r3, #128	; 0x80
        }
        lenBuf[pos++] = digit;
        llen++;
 80a2430:	3401      	adds	r4, #1
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
 80a2432:	f801 3c04 	strb.w	r3, [r1, #-4]
        llen++;
 80a2436:	b2e4      	uxtb	r4, r4
    } while(len > 0);
 80a2438:	2d00      	cmp	r5, #0
 80a243a:	d1f1      	bne.n	80a2420 <_ZN4MQTT5writeEhPht+0xc>

    buf[4-llen] = header;
 80a243c:	f1c4 0304 	rsb	r3, r4, #4
 80a2440:	18d1      	adds	r1, r2, r3
 80a2442:	f802 e003 	strb.w	lr, [r2, r3]
    for (int i = 0; i < llen; i++) {
 80a2446:	42a5      	cmp	r5, r4
 80a2448:	da06      	bge.n	80a2458 <_ZN4MQTT5writeEhPht+0x44>
        buf[5-llen+i] = lenBuf[i];
 80a244a:	a801      	add	r0, sp, #4
 80a244c:	1b2b      	subs	r3, r5, r4
 80a244e:	5c28      	ldrb	r0, [r5, r0]
 80a2450:	4413      	add	r3, r2
 80a2452:	7158      	strb	r0, [r3, #5]
        lenBuf[pos++] = digit;
        llen++;
    } while(len > 0);

    buf[4-llen] = header;
    for (int i = 0; i < llen; i++) {
 80a2454:	3501      	adds	r5, #1
 80a2456:	e7f6      	b.n	80a2446 <_ZN4MQTT5writeEhPht+0x32>
        buf[5-llen+i] = lenBuf[i];
    }
    rc = _client.write(buf+(4-llen), length+1+llen);
 80a2458:	1c72      	adds	r2, r6, #1
 80a245a:	4422      	add	r2, r4
 80a245c:	4638      	mov	r0, r7
 80a245e:	f001 f814 	bl	80a348a <_ZN9TCPClient5writeEPKhj>
 80a2462:	4605      	mov	r5, r0
 80a2464:	f000 fcd2 	bl	80a2e0c <HAL_Timer_Get_Milli_Seconds>

    lastOutActivity = millis();
    return (rc == 1+llen+length);
 80a2468:	3401      	adds	r4, #1
    for (int i = 0; i < llen; i++) {
        buf[5-llen+i] = lenBuf[i];
    }
    rc = _client.write(buf+(4-llen), length+1+llen);

    lastOutActivity = millis();
 80a246a:	6278      	str	r0, [r7, #36]	; 0x24
    return (rc == 1+llen+length);
 80a246c:	4434      	add	r4, r6
 80a246e:	b2a8      	uxth	r0, r5
}
 80a2470:	1a23      	subs	r3, r4, r0
 80a2472:	4258      	negs	r0, r3
 80a2474:	4158      	adcs	r0, r3
 80a2476:	b003      	add	sp, #12
 80a2478:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a247a <_ZN4MQTT10disconnectEv>:
        return write(MQTTUNSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
    }
    return false;
}

void MQTT::disconnect() {
 80a247a:	b510      	push	{r4, lr}
 80a247c:	4604      	mov	r4, r0
    buffer[0] = MQTTDISCONNECT;
 80a247e:	69c3      	ldr	r3, [r0, #28]
 80a2480:	22e0      	movs	r2, #224	; 0xe0
 80a2482:	701a      	strb	r2, [r3, #0]
    buffer[1] = 0;
 80a2484:	69c3      	ldr	r3, [r0, #28]
 80a2486:	2200      	movs	r2, #0
 80a2488:	705a      	strb	r2, [r3, #1]
    _client.write(buffer,2);
 80a248a:	69c1      	ldr	r1, [r0, #28]
 80a248c:	2202      	movs	r2, #2
 80a248e:	f000 fffc 	bl	80a348a <_ZN9TCPClient5writeEPKhj>
    _client.stop();
 80a2492:	4620      	mov	r0, r4
 80a2494:	f001 f8d8 	bl	80a3648 <_ZN9TCPClient4stopEv>
 80a2498:	f000 fcb8 	bl	80a2e0c <HAL_Timer_Get_Milli_Seconds>
    lastInActivity = lastOutActivity = millis();
 80a249c:	6260      	str	r0, [r4, #36]	; 0x24
 80a249e:	62a0      	str	r0, [r4, #40]	; 0x28
 80a24a0:	bd10      	pop	{r4, pc}

080a24a2 <_ZN4MQTT11writeStringEPKcPht>:
}

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
 80a24a2:	b5f0      	push	{r4, r5, r6, r7, lr}
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
 80a24a4:	460d      	mov	r5, r1
 80a24a6:	3302      	adds	r3, #2
 80a24a8:	b29b      	uxth	r3, r3
 80a24aa:	1a6c      	subs	r4, r5, r1
    while (*idp && pos < this->maxpacketsize) {
 80a24ac:	f815 6b01 	ldrb.w	r6, [r5], #1
 80a24b0:	b2a4      	uxth	r4, r4
 80a24b2:	b13e      	cbz	r6, 80a24c4 <_ZN4MQTT11writeStringEPKcPht+0x22>
 80a24b4:	f8b0 7054 	ldrh.w	r7, [r0, #84]	; 0x54
 80a24b8:	429f      	cmp	r7, r3
 80a24ba:	d903      	bls.n	80a24c4 <_ZN4MQTT11writeStringEPKcPht+0x22>
        buf[pos++] = *idp++;
 80a24bc:	1c5c      	adds	r4, r3, #1
 80a24be:	54d6      	strb	r6, [r2, r3]
 80a24c0:	b2a3      	uxth	r3, r4

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
    while (*idp && pos < this->maxpacketsize) {
 80a24c2:	e7f2      	b.n	80a24aa <_ZN4MQTT11writeStringEPKcPht+0x8>
        buf[pos++] = *idp++;
        i++;
    }
    buf[pos-i-2] = (i >> 8);
 80a24c4:	1b19      	subs	r1, r3, r4
 80a24c6:	440a      	add	r2, r1
 80a24c8:	1221      	asrs	r1, r4, #8
 80a24ca:	f802 1c02 	strb.w	r1, [r2, #-2]
    buf[pos-i-1] = (i & 0xFF);
 80a24ce:	f802 4c01 	strb.w	r4, [r2, #-1]
    return pos;
}
 80a24d2:	4618      	mov	r0, r3
 80a24d4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a24d6 <_ZN4MQTT11isConnectedEv>:


bool MQTT::isConnected() {
 80a24d6:	b538      	push	{r3, r4, r5, lr}
 80a24d8:	4605      	mov	r5, r0
    bool rc = (int)_client.connected();
 80a24da:	f001 f976 	bl	80a37ca <_ZN9TCPClient9connectedEv>
 80a24de:	2800      	cmp	r0, #0
 80a24e0:	bf14      	ite	ne
 80a24e2:	2401      	movne	r4, #1
 80a24e4:	2400      	moveq	r4, #0
    if (!rc) _client.stop();
 80a24e6:	d102      	bne.n	80a24ee <_ZN4MQTT11isConnectedEv+0x18>
 80a24e8:	4628      	mov	r0, r5
 80a24ea:	f001 f8ad 	bl	80a3648 <_ZN9TCPClient4stopEv>
    return rc;
}
 80a24ee:	4620      	mov	r0, r4
 80a24f0:	bd38      	pop	{r3, r4, r5, pc}
	...

080a24f4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>:

bool MQTT::connect(const char *id, const char *user, const char *pass) {
    return connect(id, user, pass, 0, QOS0, 0, 0, true);
}

bool MQTT::connect(const char *id, const char *user, const char *pass, const char* willTopic, EMQTT_QOS willQos, uint8_t willRetain, const char* willMessage, bool cleanSession, MQTT_VERSION version) {
 80a24f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a24f8:	b087      	sub	sp, #28
 80a24fa:	4604      	mov	r4, r0
 80a24fc:	4689      	mov	r9, r1
 80a24fe:	4617      	mov	r7, r2
 80a2500:	461e      	mov	r6, r3
 80a2502:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
    if (!isConnected()) {
 80a2506:	f7ff ffe6 	bl	80a24d6 <_ZN4MQTT11isConnectedEv>
 80a250a:	4605      	mov	r5, r0
 80a250c:	2800      	cmp	r0, #0
 80a250e:	f040 80bd 	bne.w	80a268c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x198>
        int result = 0;
        if (ip == NULL)
 80a2512:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80a2514:	b939      	cbnz	r1, 80a2526 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x32>
            result = _client.connect(this->domain.c_str(), this->port);
 80a2516:	4603      	mov	r3, r0
 80a2518:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
 80a251c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80a251e:	4620      	mov	r0, r4
 80a2520:	f001 f9e4 	bl	80a38ec <_ZN9TCPClient7connectEPKctm>
 80a2524:	e009      	b.n	80a253a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x46>
        else
            result = _client.connect(this->ip, this->port);
 80a2526:	4668      	mov	r0, sp
 80a2528:	f002 f802 	bl	80a4530 <_ZN9IPAddressC1EPKh>
 80a252c:	462b      	mov	r3, r5
 80a252e:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
 80a2532:	4669      	mov	r1, sp
 80a2534:	4620      	mov	r0, r4
 80a2536:	f001 f8a1 	bl	80a367c <_ZN9TCPClient7connectE9IPAddresstm>

        if (result) {
 80a253a:	2800      	cmp	r0, #0
 80a253c:	f000 80a2 	beq.w	80a2684 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x190>
            nextMsgId = 1;
 80a2540:	2301      	movs	r3, #1
 80a2542:	8423      	strh	r3, [r4, #32]
            uint16_t length = 5;

            if (version == MQTT_V311) {
 80a2544:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 80a2548:	2b04      	cmp	r3, #4
 80a254a:	d115      	bne.n	80a2578 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x84>
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
 80a254c:	4b52      	ldr	r3, [pc, #328]	; (80a2698 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1a4>)
 80a254e:	6818      	ldr	r0, [r3, #0]
 80a2550:	889a      	ldrh	r2, [r3, #4]
 80a2552:	9000      	str	r0, [sp, #0]
 80a2554:	f8ad 2004 	strh.w	r2, [sp, #4]
 80a2558:	799b      	ldrb	r3, [r3, #6]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
 80a255a:	69e2      	ldr	r2, [r4, #28]
 80a255c:	9800      	ldr	r0, [sp, #0]
        if (result) {
            nextMsgId = 1;
            uint16_t length = 5;

            if (version == MQTT_V311) {
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
 80a255e:	f88d 3006 	strb.w	r3, [sp, #6]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
 80a2562:	f8c2 0005 	str.w	r0, [r2, #5]
 80a2566:	1d53      	adds	r3, r2, #5
 80a2568:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 80a256c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80a2570:	8099      	strh	r1, [r3, #4]
 80a2572:	719a      	strb	r2, [r3, #6]
                length+=sizeof(MQTT_HEADER_V311);
 80a2574:	230c      	movs	r3, #12
 80a2576:	e012      	b.n	80a259e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
            } else {
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
 80a2578:	466a      	mov	r2, sp
 80a257a:	4b48      	ldr	r3, [pc, #288]	; (80a269c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1a8>)
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
 80a257c:	f8d4 c01c 	ldr.w	ip, [r4, #28]
            if (version == MQTT_V311) {
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
                length+=sizeof(MQTT_HEADER_V311);
            } else {
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
 80a2580:	6818      	ldr	r0, [r3, #0]
 80a2582:	6859      	ldr	r1, [r3, #4]
 80a2584:	7a1b      	ldrb	r3, [r3, #8]
 80a2586:	c203      	stmia	r2!, {r0, r1}
 80a2588:	7013      	strb	r3, [r2, #0]
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
 80a258a:	466b      	mov	r3, sp
 80a258c:	cb03      	ldmia	r3!, {r0, r1}
 80a258e:	f8cc 0005 	str.w	r0, [ip, #5]
 80a2592:	f8cc 1009 	str.w	r1, [ip, #9]
 80a2596:	7813      	ldrb	r3, [r2, #0]
 80a2598:	f88c 300d 	strb.w	r3, [ip, #13]
                length+=sizeof(MQTT_HEADER_V31);
 80a259c:	230e      	movs	r3, #14
            }

            uint8_t v = 0;
            if (willTopic) {
 80a259e:	f1b8 0f00 	cmp.w	r8, #0
 80a25a2:	d00a      	beq.n	80a25ba <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xc6>
                v = 0x06|(willQos<<3)|(willRetain<<5);
 80a25a4:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 80a25a8:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
 80a25ac:	0152      	lsls	r2, r2, #5
 80a25ae:	f042 0206 	orr.w	r2, r2, #6
 80a25b2:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80a25b6:	b2d2      	uxtb	r2, r2
 80a25b8:	e000      	b.n	80a25bc <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xc8>
            } else {
                v = 0x02;
 80a25ba:	2202      	movs	r2, #2
            }

            if (!cleanSession) {
 80a25bc:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
 80a25c0:	b909      	cbnz	r1, 80a25c6 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xd2>
              v = v&0xfd;
 80a25c2:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
            }

            if(user != NULL) {
 80a25c6:	b12f      	cbz	r7, 80a25d4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xe0>
                v = v|0x80;

                if(pass != NULL) {
 80a25c8:	b916      	cbnz	r6, 80a25d0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xdc>
            if (!cleanSession) {
              v = v&0xfd;
            }

            if(user != NULL) {
                v = v|0x80;
 80a25ca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80a25ce:	e001      	b.n	80a25d4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xe0>

                if(pass != NULL) {
                    v = v|(0x80>>1);
 80a25d0:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
                }
            }

            buffer[length++] = v;
 80a25d4:	69e1      	ldr	r1, [r4, #28]

            buffer[length++] = ((this->keepalive) >> 8);
 80a25d6:	1c58      	adds	r0, r3, #1
                if(pass != NULL) {
                    v = v|(0x80>>1);
                }
            }

            buffer[length++] = v;
 80a25d8:	54ca      	strb	r2, [r1, r3]

            buffer[length++] = ((this->keepalive) >> 8);
 80a25da:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80a25dc:	69e1      	ldr	r1, [r4, #28]
 80a25de:	1212      	asrs	r2, r2, #8
 80a25e0:	540a      	strb	r2, [r1, r0]
            buffer[length++] = ((this->keepalive) & 0xFF);
 80a25e2:	69e1      	ldr	r1, [r4, #28]
 80a25e4:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80a25e6:	1c9a      	adds	r2, r3, #2
 80a25e8:	5488      	strb	r0, [r1, r2]
            length = writeString(id, buffer, length);
 80a25ea:	3303      	adds	r3, #3
 80a25ec:	69e2      	ldr	r2, [r4, #28]
 80a25ee:	4649      	mov	r1, r9
 80a25f0:	4620      	mov	r0, r4
 80a25f2:	f7ff ff56 	bl	80a24a2 <_ZN4MQTT11writeStringEPKcPht>
            if (willTopic) {
 80a25f6:	f1b8 0f00 	cmp.w	r8, #0
 80a25fa:	d00b      	beq.n	80a2614 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x120>
                length = writeString(willTopic, buffer, length);
 80a25fc:	4603      	mov	r3, r0
 80a25fe:	69e2      	ldr	r2, [r4, #28]
 80a2600:	4641      	mov	r1, r8
 80a2602:	4620      	mov	r0, r4
 80a2604:	f7ff ff4d 	bl	80a24a2 <_ZN4MQTT11writeStringEPKcPht>
                length = writeString(willMessage, buffer, length);
 80a2608:	69e2      	ldr	r2, [r4, #28]
 80a260a:	4603      	mov	r3, r0
 80a260c:	9911      	ldr	r1, [sp, #68]	; 0x44
 80a260e:	4620      	mov	r0, r4
 80a2610:	f7ff ff47 	bl	80a24a2 <_ZN4MQTT11writeStringEPKcPht>
            }

            if(user != NULL) {
 80a2614:	b167      	cbz	r7, 80a2630 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13c>
                length = writeString(user,buffer,length);
 80a2616:	4603      	mov	r3, r0
 80a2618:	69e2      	ldr	r2, [r4, #28]
 80a261a:	4639      	mov	r1, r7
 80a261c:	4620      	mov	r0, r4
 80a261e:	f7ff ff40 	bl	80a24a2 <_ZN4MQTT11writeStringEPKcPht>
                if(pass != NULL) {
 80a2622:	b12e      	cbz	r6, 80a2630 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13c>
                    length = writeString(pass,buffer,length);
 80a2624:	4603      	mov	r3, r0
 80a2626:	69e2      	ldr	r2, [r4, #28]
 80a2628:	4631      	mov	r1, r6
 80a262a:	4620      	mov	r0, r4
 80a262c:	f7ff ff39 	bl	80a24a2 <_ZN4MQTT11writeStringEPKcPht>
                }
            }

            write(MQTTCONNECT, buffer, length-5);
 80a2630:	1f43      	subs	r3, r0, #5
 80a2632:	b29b      	uxth	r3, r3
 80a2634:	69e2      	ldr	r2, [r4, #28]
 80a2636:	2110      	movs	r1, #16
 80a2638:	4620      	mov	r0, r4
 80a263a:	f7ff feeb 	bl	80a2414 <_ZN4MQTT5writeEhPht>
 80a263e:	f000 fbe5 	bl	80a2e0c <HAL_Timer_Get_Milli_Seconds>
            lastInActivity = lastOutActivity = millis();

            while (!_client.available()) {
                unsigned long t = millis();
                if (t-lastInActivity > this->keepalive*1000UL) {
 80a2642:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
                    length = writeString(pass,buffer,length);
                }
            }

            write(MQTTCONNECT, buffer, length-5);
            lastInActivity = lastOutActivity = millis();
 80a2646:	6260      	str	r0, [r4, #36]	; 0x24
 80a2648:	62a0      	str	r0, [r4, #40]	; 0x28

            while (!_client.available()) {
 80a264a:	4620      	mov	r0, r4
 80a264c:	f000 ffc0 	bl	80a35d0 <_ZN9TCPClient9availableEv>
 80a2650:	b940      	cbnz	r0, 80a2664 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x170>
 80a2652:	f000 fbdb 	bl	80a2e0c <HAL_Timer_Get_Milli_Seconds>
                unsigned long t = millis();
                if (t-lastInActivity > this->keepalive*1000UL) {
 80a2656:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80a2658:	1ac0      	subs	r0, r0, r3
 80a265a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80a265c:	4373      	muls	r3, r6
 80a265e:	4298      	cmp	r0, r3
 80a2660:	d9f3      	bls.n	80a264a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x156>
 80a2662:	e00f      	b.n	80a2684 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x190>
                    _client.stop();
                    return false;
                }
            }
            uint8_t llen;
            uint16_t len = readPacket(&llen);
 80a2664:	4669      	mov	r1, sp
 80a2666:	4620      	mov	r0, r4
 80a2668:	f7ff fe7c 	bl	80a2364 <_ZN4MQTT10readPacketEPh>

            if (len == 4) {
 80a266c:	2804      	cmp	r0, #4
 80a266e:	d109      	bne.n	80a2684 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x190>
                if (buffer[3] == CONN_ACCEPT) {
 80a2670:	69e3      	ldr	r3, [r4, #28]
 80a2672:	78de      	ldrb	r6, [r3, #3]
 80a2674:	b936      	cbnz	r6, 80a2684 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x190>
 80a2676:	f000 fbc9 	bl	80a2e0c <HAL_Timer_Get_Milli_Seconds>
                    lastInActivity = millis();
                    pingOutstanding = false;
                    debug_print(" Connect success\n");
                    return true;
 80a267a:	2501      	movs	r5, #1
            uint8_t llen;
            uint16_t len = readPacket(&llen);

            if (len == 4) {
                if (buffer[3] == CONN_ACCEPT) {
                    lastInActivity = millis();
 80a267c:	62a0      	str	r0, [r4, #40]	; 0x28
                    pingOutstanding = false;
 80a267e:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
 80a2682:	e004      	b.n	80a268e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x19a>
                    // check EMQTT_CONNACK_RESPONSE code.
                    debug_print(" Connect fail. code = [%d]\n", buffer[3]);
                }
            }
        }
        _client.stop();
 80a2684:	4620      	mov	r0, r4
 80a2686:	f000 ffdf 	bl	80a3648 <_ZN9TCPClient4stopEv>
 80a268a:	e000      	b.n	80a268e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x19a>
    }
    return false;
 80a268c:	2500      	movs	r5, #0
}
 80a268e:	4628      	mov	r0, r5
 80a2690:	b007      	add	sp, #28
 80a2692:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a2696:	bf00      	nop
 80a2698:	080a9987 	.word	0x080a9987
 80a269c:	080a998e 	.word	0x080a998e

080a26a0 <_ZN4MQTT7connectEPKc>:
void MQTT::addQosCallback(void (*qoscallback)(unsigned int)) {
    this->qoscallback = qoscallback;
}


bool MQTT::connect(const char *id) {
 80a26a0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    return connect(id, NULL, NULL, 0, QOS0, 0, 0, true);
 80a26a2:	2304      	movs	r3, #4
 80a26a4:	9305      	str	r3, [sp, #20]
 80a26a6:	2301      	movs	r3, #1
 80a26a8:	9304      	str	r3, [sp, #16]
 80a26aa:	2300      	movs	r3, #0
 80a26ac:	9303      	str	r3, [sp, #12]
 80a26ae:	9302      	str	r3, [sp, #8]
 80a26b0:	9301      	str	r3, [sp, #4]
 80a26b2:	9300      	str	r3, [sp, #0]
 80a26b4:	461a      	mov	r2, r3
 80a26b6:	f7ff ff1d 	bl	80a24f4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>
}
 80a26ba:	b007      	add	sp, #28
 80a26bc:	f85d fb04 	ldr.w	pc, [sp], #4

080a26c0 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>:

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
    return publish(topic, payload, plength, retain, qos, false, messageid);
}

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
 80a26c0:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a26c4:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80a26c6:	4604      	mov	r4, r0
 80a26c8:	468b      	mov	fp, r1
 80a26ca:	4691      	mov	r9, r2
 80a26cc:	469a      	mov	sl, r3
 80a26ce:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
 80a26d2:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
 80a26d6:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
    if (isConnected()) {
 80a26da:	f7ff fefc 	bl	80a24d6 <_ZN4MQTT11isConnectedEv>
 80a26de:	2800      	cmp	r0, #0
 80a26e0:	d04b      	beq.n	80a277a <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xba>
        // Leave room in the buffer for header and variable length field
        uint16_t length = 5;
        memset(buffer, 0, this->maxpacketsize);
 80a26e2:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54
 80a26e6:	2100      	movs	r1, #0
 80a26e8:	69e0      	ldr	r0, [r4, #28]
 80a26ea:	f003 ff8a 	bl	80a6602 <memset>

        length = writeString(topic, buffer, length);
 80a26ee:	2305      	movs	r3, #5
 80a26f0:	69e2      	ldr	r2, [r4, #28]
 80a26f2:	4659      	mov	r1, fp
 80a26f4:	4620      	mov	r0, r4
 80a26f6:	f7ff fed4 	bl	80a24a2 <_ZN4MQTT11writeStringEPKcPht>

        if (qos == QOS2 || qos == QOS1) {
 80a26fa:	1e6b      	subs	r3, r5, #1
 80a26fc:	2b01      	cmp	r3, #1
 80a26fe:	d812      	bhi.n	80a2726 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x66>
            nextMsgId += 1;
 80a2700:	8c23      	ldrh	r3, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
 80a2702:	69e2      	ldr	r2, [r4, #28]
        memset(buffer, 0, this->maxpacketsize);

        length = writeString(topic, buffer, length);

        if (qos == QOS2 || qos == QOS1) {
            nextMsgId += 1;
 80a2704:	3301      	adds	r3, #1
 80a2706:	b29b      	uxth	r3, r3
 80a2708:	8423      	strh	r3, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
 80a270a:	121b      	asrs	r3, r3, #8
 80a270c:	5413      	strb	r3, [r2, r0]
 80a270e:	1c41      	adds	r1, r0, #1
            buffer[length++] = (nextMsgId & 0xFF);
 80a2710:	69e3      	ldr	r3, [r4, #28]
 80a2712:	8c22      	ldrh	r2, [r4, #32]

        length = writeString(topic, buffer, length);

        if (qos == QOS2 || qos == QOS1) {
            nextMsgId += 1;
            buffer[length++] = (nextMsgId >> 8);
 80a2714:	b289      	uxth	r1, r1
            buffer[length++] = (nextMsgId & 0xFF);
 80a2716:	3002      	adds	r0, #2
 80a2718:	b280      	uxth	r0, r0
 80a271a:	545a      	strb	r2, [r3, r1]
            if (messageid != NULL)
 80a271c:	b11e      	cbz	r6, 80a2726 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x66>
                *messageid = nextMsgId++;
 80a271e:	8c23      	ldrh	r3, [r4, #32]
 80a2720:	1c5a      	adds	r2, r3, #1
 80a2722:	8422      	strh	r2, [r4, #32]
 80a2724:	8033      	strh	r3, [r6, #0]

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
    return publish(topic, payload, plength, retain, qos, false, messageid);
}

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
 80a2726:	2200      	movs	r2, #0
            buffer[length++] = (nextMsgId & 0xFF);
            if (messageid != NULL)
                *messageid = nextMsgId++;
        }

        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
 80a2728:	b291      	uxth	r1, r2
 80a272a:	1883      	adds	r3, r0, r2
 80a272c:	458a      	cmp	sl, r1
 80a272e:	b29b      	uxth	r3, r3
 80a2730:	d909      	bls.n	80a2746 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x86>
 80a2732:	f8b4 6054 	ldrh.w	r6, [r4, #84]	; 0x54
 80a2736:	3201      	adds	r2, #1
 80a2738:	429e      	cmp	r6, r3
 80a273a:	d904      	bls.n	80a2746 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x86>
            buffer[length++] = payload[i];
 80a273c:	f819 6001 	ldrb.w	r6, [r9, r1]
 80a2740:	69e1      	ldr	r1, [r4, #28]
 80a2742:	54ce      	strb	r6, [r1, r3]
 80a2744:	e7f0      	b.n	80a2728 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x68>
        }

        uint8_t header = MQTTPUBLISH;
        if (retain) {
            header |= 1;
 80a2746:	f1b8 0f00 	cmp.w	r8, #0
 80a274a:	bf0c      	ite	eq
 80a274c:	2130      	moveq	r1, #48	; 0x30
 80a274e:	2131      	movne	r1, #49	; 0x31
        }

        if (dup) {
 80a2750:	b10f      	cbz	r7, 80a2756 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
            header |= DUP_FLAG_ON_MASK;
 80a2752:	f041 0108 	orr.w	r1, r1, #8
        }

        if (qos == QOS2)
 80a2756:	2d02      	cmp	r5, #2
 80a2758:	d102      	bne.n	80a2760 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xa0>
            header |= MQTTQOS2_HEADER_MASK;
 80a275a:	f041 0104 	orr.w	r1, r1, #4
 80a275e:	e003      	b.n	80a2768 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xa8>
        else if (qos == QOS1)
 80a2760:	2d01      	cmp	r5, #1
            header |= MQTTQOS1_HEADER_MASK;
 80a2762:	bf08      	it	eq
 80a2764:	f041 0102 	orreq.w	r1, r1, #2
        else
            header |= MQTTQOS0_HEADER_MASK;

        return write(header, buffer, length-5);
 80a2768:	4620      	mov	r0, r4
 80a276a:	3b05      	subs	r3, #5
 80a276c:	69e2      	ldr	r2, [r4, #28]
 80a276e:	b29b      	uxth	r3, r3
    }
    return false;
}
 80a2770:	b001      	add	sp, #4
 80a2772:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        else if (qos == QOS1)
            header |= MQTTQOS1_HEADER_MASK;
        else
            header |= MQTTQOS0_HEADER_MASK;

        return write(header, buffer, length-5);
 80a2776:	f7ff be4d 	b.w	80a2414 <_ZN4MQTT5writeEhPht>
    }
    return false;
}
 80a277a:	b001      	add	sp, #4
 80a277c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a2780 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>:

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain) {
    return publish(topic, payload, plength, retain, QOS0, NULL);
}

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
 80a2780:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return publish(topic, payload, plength, retain, qos, false, messageid);
 80a2782:	9c08      	ldr	r4, [sp, #32]
 80a2784:	9403      	str	r4, [sp, #12]
 80a2786:	2400      	movs	r4, #0
 80a2788:	9402      	str	r4, [sp, #8]
 80a278a:	f89d 401c 	ldrb.w	r4, [sp, #28]
 80a278e:	9401      	str	r4, [sp, #4]
 80a2790:	f89d 4018 	ldrb.w	r4, [sp, #24]
 80a2794:	9400      	str	r4, [sp, #0]
 80a2796:	f7ff ff93 	bl	80a26c0 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>
}
 80a279a:	b004      	add	sp, #16
 80a279c:	bd10      	pop	{r4, pc}

080a279e <_ZN4MQTT7publishEPKcS1_>:
        return true;
    }
    return false;
}

bool MQTT::publish(const char* topic, const char* payload) {
 80a279e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80a27a0:	4605      	mov	r5, r0
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
 80a27a2:	4610      	mov	r0, r2
        return true;
    }
    return false;
}

bool MQTT::publish(const char* topic, const char* payload) {
 80a27a4:	460e      	mov	r6, r1
 80a27a6:	4614      	mov	r4, r2
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
 80a27a8:	f004 fc82 	bl	80a70b0 <strlen>
 80a27ac:	2300      	movs	r3, #0
 80a27ae:	9302      	str	r3, [sp, #8]
 80a27b0:	9301      	str	r3, [sp, #4]
 80a27b2:	9300      	str	r3, [sp, #0]
 80a27b4:	4622      	mov	r2, r4
 80a27b6:	4603      	mov	r3, r0
 80a27b8:	4631      	mov	r1, r6
 80a27ba:	4628      	mov	r0, r5
 80a27bc:	f7ff ffe0 	bl	80a2780 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>
}
 80a27c0:	b004      	add	sp, #16
 80a27c2:	bd70      	pop	{r4, r5, r6, pc}

080a27c4 <_ZN4MQTT7publishEPKcS1_NS_9EMQTT_QOSEPt>:

bool MQTT::publish(const char * topic, const char* payload, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
    return publish(topic, (uint8_t*)payload, strlen(payload), false, qos, dup, messageid);
}

bool MQTT::publish(const char * topic, const char* payload, EMQTT_QOS qos, uint16_t *messageid) {
 80a27c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a27c6:	4605      	mov	r5, r0
 80a27c8:	b085      	sub	sp, #20
    return publish(topic, (uint8_t*)payload, strlen(payload), false, qos, messageid);
 80a27ca:	4610      	mov	r0, r2

bool MQTT::publish(const char * topic, const char* payload, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
    return publish(topic, (uint8_t*)payload, strlen(payload), false, qos, dup, messageid);
}

bool MQTT::publish(const char * topic, const char* payload, EMQTT_QOS qos, uint16_t *messageid) {
 80a27cc:	461f      	mov	r7, r3
 80a27ce:	460e      	mov	r6, r1
 80a27d0:	4614      	mov	r4, r2
    return publish(topic, (uint8_t*)payload, strlen(payload), false, qos, messageid);
 80a27d2:	f004 fc6d 	bl	80a70b0 <strlen>
 80a27d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a27d8:	9701      	str	r7, [sp, #4]
 80a27da:	9302      	str	r3, [sp, #8]
 80a27dc:	2300      	movs	r3, #0
 80a27de:	9300      	str	r3, [sp, #0]
 80a27e0:	4622      	mov	r2, r4
 80a27e2:	4603      	mov	r3, r0
 80a27e4:	4631      	mov	r1, r6
 80a27e6:	4628      	mov	r0, r5
 80a27e8:	f7ff ffca 	bl	80a2780 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>
}
 80a27ec:	b005      	add	sp, #20
 80a27ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a27f0 <_ZN4MQTT14publishReleaseEt>:
        return write(header, buffer, length-5);
    }
    return false;
}

bool MQTT::publishRelease(uint16_t messageid) {
 80a27f0:	b538      	push	{r3, r4, r5, lr}
 80a27f2:	4604      	mov	r4, r0
 80a27f4:	460d      	mov	r5, r1
    if (isConnected()) {
 80a27f6:	f7ff fe6e 	bl	80a24d6 <_ZN4MQTT11isConnectedEv>
 80a27fa:	b190      	cbz	r0, 80a2822 <_ZN4MQTT14publishReleaseEt+0x32>
        uint16_t length = 0;
        // reserved bits in MQTT v3.1.1
        buffer[length++] = MQTTPUBREL | MQTTQOS1_HEADER_MASK;
 80a27fc:	69e3      	ldr	r3, [r4, #28]
 80a27fe:	2262      	movs	r2, #98	; 0x62
 80a2800:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
 80a2802:	69e3      	ldr	r3, [r4, #28]
 80a2804:	2202      	movs	r2, #2
 80a2806:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
 80a2808:	69e3      	ldr	r3, [r4, #28]
 80a280a:	122a      	asrs	r2, r5, #8
 80a280c:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
 80a280e:	69e3      	ldr	r3, [r4, #28]
        return _client.write(buffer, length);
 80a2810:	2204      	movs	r2, #4
        uint16_t length = 0;
        // reserved bits in MQTT v3.1.1
        buffer[length++] = MQTTPUBREL | MQTTQOS1_HEADER_MASK;
        buffer[length++] = 2;
        buffer[length++] = (messageid >> 8);
        buffer[length++] = (messageid & 0xFF);
 80a2812:	70dd      	strb	r5, [r3, #3]
        return _client.write(buffer, length);
 80a2814:	69e1      	ldr	r1, [r4, #28]
 80a2816:	4620      	mov	r0, r4
 80a2818:	f000 fe37 	bl	80a348a <_ZN9TCPClient5writeEPKhj>
 80a281c:	3000      	adds	r0, #0
 80a281e:	bf18      	it	ne
 80a2820:	2001      	movne	r0, #1
    }
    return false;
}
 80a2822:	bd38      	pop	{r3, r4, r5, pc}

080a2824 <_ZN4MQTT15publishCompleteEt>:

bool MQTT::publishComplete(uint16_t messageid) {
 80a2824:	b538      	push	{r3, r4, r5, lr}
 80a2826:	4604      	mov	r4, r0
 80a2828:	460d      	mov	r5, r1
    if (isConnected()) {
 80a282a:	f7ff fe54 	bl	80a24d6 <_ZN4MQTT11isConnectedEv>
 80a282e:	b190      	cbz	r0, 80a2856 <_ZN4MQTT15publishCompleteEt+0x32>
        uint16_t length = 0;
        // reserved bits in MQTT v3.1.1
        buffer[length++] = MQTTPUBCOMP | MQTTQOS1_HEADER_MASK;
 80a2830:	69e3      	ldr	r3, [r4, #28]
 80a2832:	2272      	movs	r2, #114	; 0x72
 80a2834:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
 80a2836:	69e3      	ldr	r3, [r4, #28]
 80a2838:	2202      	movs	r2, #2
 80a283a:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
 80a283c:	69e3      	ldr	r3, [r4, #28]
 80a283e:	122a      	asrs	r2, r5, #8
 80a2840:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
 80a2842:	69e3      	ldr	r3, [r4, #28]
        return _client.write(buffer, length);
 80a2844:	2204      	movs	r2, #4
        uint16_t length = 0;
        // reserved bits in MQTT v3.1.1
        buffer[length++] = MQTTPUBCOMP | MQTTQOS1_HEADER_MASK;
        buffer[length++] = 2;
        buffer[length++] = (messageid >> 8);
        buffer[length++] = (messageid & 0xFF);
 80a2846:	70dd      	strb	r5, [r3, #3]
        return _client.write(buffer, length);
 80a2848:	69e1      	ldr	r1, [r4, #28]
 80a284a:	4620      	mov	r0, r4
 80a284c:	f000 fe1d 	bl	80a348a <_ZN9TCPClient5writeEPKhj>
 80a2850:	3000      	adds	r0, #0
 80a2852:	bf18      	it	ne
 80a2854:	2001      	movne	r0, #1
    }
    return false;
}
 80a2856:	bd38      	pop	{r3, r4, r5, pc}

080a2858 <_ZN4MQTT4loopEv>:
    }

    return len;
}

bool MQTT::loop() {
 80a2858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a285c:	b083      	sub	sp, #12
 80a285e:	af00      	add	r7, sp, #0
 80a2860:	4604      	mov	r4, r0
    if (isConnected()) {
 80a2862:	f7ff fe38 	bl	80a24d6 <_ZN4MQTT11isConnectedEv>
 80a2866:	4681      	mov	r9, r0
 80a2868:	2800      	cmp	r0, #0
 80a286a:	f000 80f6 	beq.w	80a2a5a <_ZN4MQTT4loopEv+0x202>
 80a286e:	f000 facd 	bl	80a2e0c <HAL_Timer_Get_Milli_Seconds>
        unsigned long t = millis();
        if ((t - lastInActivity > this->keepalive*1000UL) || (t - lastOutActivity > this->keepalive*1000UL)) {
 80a2872:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80a2874:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a2878:	4353      	muls	r3, r2
 80a287a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80a287c:	4605      	mov	r5, r0
 80a287e:	1a82      	subs	r2, r0, r2
 80a2880:	429a      	cmp	r2, r3
 80a2882:	d803      	bhi.n	80a288c <_ZN4MQTT4loopEv+0x34>
 80a2884:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80a2886:	1a82      	subs	r2, r0, r2
 80a2888:	4293      	cmp	r3, r2
 80a288a:	d217      	bcs.n	80a28bc <_ZN4MQTT4loopEv+0x64>
            if (pingOutstanding) {
 80a288c:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80a2890:	b12b      	cbz	r3, 80a289e <_ZN4MQTT4loopEv+0x46>
                _client.stop();
 80a2892:	4620      	mov	r0, r4
 80a2894:	f000 fed8 	bl	80a3648 <_ZN9TCPClient4stopEv>
                return false;
 80a2898:	f04f 0900 	mov.w	r9, #0
 80a289c:	e0dd      	b.n	80a2a5a <_ZN4MQTT4loopEv+0x202>
            } else {
                buffer[0] = MQTTPINGREQ;
 80a289e:	69e2      	ldr	r2, [r4, #28]
 80a28a0:	21c0      	movs	r1, #192	; 0xc0
 80a28a2:	7011      	strb	r1, [r2, #0]
                buffer[1] = 0;
 80a28a4:	69e2      	ldr	r2, [r4, #28]
                _client.write(buffer,2);
 80a28a6:	4620      	mov	r0, r4
            if (pingOutstanding) {
                _client.stop();
                return false;
            } else {
                buffer[0] = MQTTPINGREQ;
                buffer[1] = 0;
 80a28a8:	7053      	strb	r3, [r2, #1]
                _client.write(buffer,2);
 80a28aa:	69e1      	ldr	r1, [r4, #28]
 80a28ac:	2202      	movs	r2, #2
 80a28ae:	f000 fdec 	bl	80a348a <_ZN9TCPClient5writeEPKhj>
                lastOutActivity = t;
                lastInActivity = t;
                pingOutstanding = true;
 80a28b2:	2301      	movs	r3, #1
                return false;
            } else {
                buffer[0] = MQTTPINGREQ;
                buffer[1] = 0;
                _client.write(buffer,2);
                lastOutActivity = t;
 80a28b4:	6265      	str	r5, [r4, #36]	; 0x24
                lastInActivity = t;
 80a28b6:	62a5      	str	r5, [r4, #40]	; 0x28
                pingOutstanding = true;
 80a28b8:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
            }
        }
        if (_client.available()) {
 80a28bc:	4620      	mov	r0, r4
 80a28be:	f000 fe87 	bl	80a35d0 <_ZN9TCPClient9availableEv>
 80a28c2:	2800      	cmp	r0, #0
 80a28c4:	f000 80c9 	beq.w	80a2a5a <_ZN4MQTT4loopEv+0x202>
            uint8_t llen;
            uint16_t len = readPacket(&llen);
 80a28c8:	1df9      	adds	r1, r7, #7
 80a28ca:	4620      	mov	r0, r4
 80a28cc:	f7ff fd4a 	bl	80a2364 <_ZN4MQTT10readPacketEPh>
            uint16_t msgId = 0;
            uint8_t *payload;
            if (len > 0) {
 80a28d0:	4602      	mov	r2, r0
 80a28d2:	2800      	cmp	r0, #0
 80a28d4:	f000 80c1 	beq.w	80a2a5a <_ZN4MQTT4loopEv+0x202>
                lastInActivity = t;
                uint8_t type = buffer[0]&0xF0;
 80a28d8:	69e3      	ldr	r3, [r4, #28]
            uint8_t llen;
            uint16_t len = readPacket(&llen);
            uint16_t msgId = 0;
            uint8_t *payload;
            if (len > 0) {
                lastInActivity = t;
 80a28da:	62a5      	str	r5, [r4, #40]	; 0x28
                uint8_t type = buffer[0]&0xF0;
 80a28dc:	7818      	ldrb	r0, [r3, #0]
 80a28de:	f000 01f0 	and.w	r1, r0, #240	; 0xf0
                if (type == MQTTPUBLISH) {
 80a28e2:	2930      	cmp	r1, #48	; 0x30
 80a28e4:	d17d      	bne.n	80a29e2 <_ZN4MQTT4loopEv+0x18a>
                    if (callback) {
 80a28e6:	f8d4 b030 	ldr.w	fp, [r4, #48]	; 0x30
 80a28ea:	f1bb 0f00 	cmp.w	fp, #0
 80a28ee:	f000 80b4 	beq.w	80a2a5a <_ZN4MQTT4loopEv+0x202>
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
 80a28f2:	f897 c007 	ldrb.w	ip, [r7, #7]
              							_client.write(buffer, 4);
              							lastOutActivity = t;
            						} else {
                            payload = buffer+llen+3+tl;
                            callback(topic,payload,len-llen-3-tl);
                        }
 80a28f6:	46ea      	mov	sl, sp
            if (len > 0) {
                lastInActivity = t;
                uint8_t type = buffer[0]&0xF0;
                if (type == MQTTPUBLISH) {
                    if (callback) {
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
 80a28f8:	eb03 000c 	add.w	r0, r3, ip
 80a28fc:	7881      	ldrb	r1, [r0, #2]
 80a28fe:	f890 e001 	ldrb.w	lr, [r0, #1]
 80a2902:	eb01 2e0e 	add.w	lr, r1, lr, lsl #8
 80a2906:	fa1f fe8e 	uxth.w	lr, lr
                        char topic[tl+1];
 80a290a:	f10e 0108 	add.w	r1, lr, #8
 80a290e:	f021 0107 	bic.w	r1, r1, #7
 80a2912:	ebad 0d01 	sub.w	sp, sp, r1
 80a2916:	4668      	mov	r0, sp
 80a2918:	2100      	movs	r1, #0
                        for (uint16_t i=0;i<tl;i++) {
 80a291a:	b28e      	uxth	r6, r1
 80a291c:	45b6      	cmp	lr, r6
 80a291e:	d906      	bls.n	80a292e <_ZN4MQTT4loopEv+0xd6>
                            topic[i] = buffer[llen+3+i];
 80a2920:	eb0c 0601 	add.w	r6, ip, r1
 80a2924:	441e      	add	r6, r3
 80a2926:	78f6      	ldrb	r6, [r6, #3]
 80a2928:	5446      	strb	r6, [r0, r1]
 80a292a:	3101      	adds	r1, #1
                uint8_t type = buffer[0]&0xF0;
                if (type == MQTTPUBLISH) {
                    if (callback) {
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
                        char topic[tl+1];
                        for (uint16_t i=0;i<tl;i++) {
 80a292c:	e7f5      	b.n	80a291a <_ZN4MQTT4loopEv+0xc2>
                            topic[i] = buffer[llen+3+i];
                        }
                        topic[tl] = 0;
 80a292e:	2100      	movs	r1, #0
 80a2930:	f800 100e 	strb.w	r1, [r0, lr]
 80a2934:	781e      	ldrb	r6, [r3, #0]
 80a2936:	f10c 0103 	add.w	r1, ip, #3
 80a293a:	f006 0606 	and.w	r6, r6, #6
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
 80a293e:	2e02      	cmp	r6, #2
 80a2940:	ebcc 0202 	rsb	r2, ip, r2
 80a2944:	d11e      	bne.n	80a2984 <_ZN4MQTT4loopEv+0x12c>
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
 80a2946:	4471      	add	r1, lr
 80a2948:	f813 8001 	ldrb.w	r8, [r3, r1]
 80a294c:	4419      	add	r1, r3
 80a294e:	7849      	ldrb	r1, [r1, #1]
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);
 80a2950:	ebce 0202 	rsb	r2, lr, r2
                            topic[i] = buffer[llen+3+i];
                        }
                        topic[tl] = 0;
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
 80a2954:	eb01 2808 	add.w	r8, r1, r8, lsl #8
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);
 80a2958:	f10c 0105 	add.w	r1, ip, #5
 80a295c:	4471      	add	r1, lr
 80a295e:	3a05      	subs	r2, #5
 80a2960:	4419      	add	r1, r3
 80a2962:	47d8      	blx	fp

                            buffer[0] = MQTTPUBACK; // respond with PUBACK
 80a2964:	69e3      	ldr	r3, [r4, #28]
 80a2966:	2240      	movs	r2, #64	; 0x40
 80a2968:	701a      	strb	r2, [r3, #0]
                            buffer[1] = 2;
 80a296a:	69e3      	ldr	r3, [r4, #28]
                            topic[i] = buffer[llen+3+i];
                        }
                        topic[tl] = 0;
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
 80a296c:	fa1f f888 	uxth.w	r8, r8
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);

                            buffer[0] = MQTTPUBACK; // respond with PUBACK
                            buffer[1] = 2;
 80a2970:	705e      	strb	r6, [r3, #1]
                            buffer[2] = (msgId >> 8);
 80a2972:	69e3      	ldr	r3, [r4, #28]
 80a2974:	ea4f 2228 	mov.w	r2, r8, asr #8
 80a2978:	709a      	strb	r2, [r3, #2]
                            buffer[3] = (msgId & 0xFF);
 80a297a:	69e3      	ldr	r3, [r4, #28]
                            _client.write(buffer,4);
 80a297c:	2204      	movs	r2, #4
                            callback(topic,payload,len-llen-3-tl-2);

                            buffer[0] = MQTTPUBACK; // respond with PUBACK
                            buffer[1] = 2;
                            buffer[2] = (msgId >> 8);
                            buffer[3] = (msgId & 0xFF);
 80a297e:	f883 8003 	strb.w	r8, [r3, #3]
 80a2982:	e020      	b.n	80a29c6 <_ZN4MQTT4loopEv+0x16e>
                            _client.write(buffer,4);
                            lastOutActivity = t;
        						    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
 80a2984:	2e04      	cmp	r6, #4
 80a2986:	d124      	bne.n	80a29d2 <_ZN4MQTT4loopEv+0x17a>
							              msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
 80a2988:	4471      	add	r1, lr
 80a298a:	f813 8001 	ldrb.w	r8, [r3, r1]
 80a298e:	4419      	add	r1, r3
 80a2990:	7849      	ldrb	r1, [r1, #1]
							              payload = buffer + llen + 3 + tl + 2;
							              callback(topic, payload, len - llen - 3 - tl - 2);
 80a2992:	ebce 0202 	rsb	r2, lr, r2
                            buffer[2] = (msgId >> 8);
                            buffer[3] = (msgId & 0xFF);
                            _client.write(buffer,4);
                            lastOutActivity = t;
        						    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
							              msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
 80a2996:	eb01 2808 	add.w	r8, r1, r8, lsl #8
							              payload = buffer + llen + 3 + tl + 2;
							              callback(topic, payload, len - llen - 3 - tl - 2);
 80a299a:	f10c 0105 	add.w	r1, ip, #5
 80a299e:	4471      	add	r1, lr
 80a29a0:	3a05      	subs	r2, #5
 80a29a2:	4419      	add	r1, r3
 80a29a4:	47d8      	blx	fp

              							buffer[0] = MQTTPUBREC; // respond with PUBREC
 80a29a6:	69e3      	ldr	r3, [r4, #28]
 80a29a8:	2250      	movs	r2, #80	; 0x50
 80a29aa:	701a      	strb	r2, [r3, #0]
              							buffer[1] = 2;
 80a29ac:	69e3      	ldr	r3, [r4, #28]
 80a29ae:	2202      	movs	r2, #2
 80a29b0:	705a      	strb	r2, [r3, #1]
              							buffer[2] = (msgId >> 8);
 80a29b2:	69e3      	ldr	r3, [r4, #28]
                            buffer[2] = (msgId >> 8);
                            buffer[3] = (msgId & 0xFF);
                            _client.write(buffer,4);
                            lastOutActivity = t;
        						    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
							              msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
 80a29b4:	fa1f f888 	uxth.w	r8, r8
							              payload = buffer + llen + 3 + tl + 2;
							              callback(topic, payload, len - llen - 3 - tl - 2);

              							buffer[0] = MQTTPUBREC; // respond with PUBREC
              							buffer[1] = 2;
              							buffer[2] = (msgId >> 8);
 80a29b8:	ea4f 2228 	mov.w	r2, r8, asr #8
 80a29bc:	709a      	strb	r2, [r3, #2]
              							buffer[3] = (msgId & 0xFF);
              							_client.write(buffer, 4);
 80a29be:	4632      	mov	r2, r6
							              callback(topic, payload, len - llen - 3 - tl - 2);

              							buffer[0] = MQTTPUBREC; // respond with PUBREC
              							buffer[1] = 2;
              							buffer[2] = (msgId >> 8);
              							buffer[3] = (msgId & 0xFF);
 80a29c0:	69e3      	ldr	r3, [r4, #28]
 80a29c2:	f883 8003 	strb.w	r8, [r3, #3]
              							_client.write(buffer, 4);
 80a29c6:	69e1      	ldr	r1, [r4, #28]
 80a29c8:	4620      	mov	r0, r4
 80a29ca:	f000 fd5e 	bl	80a348a <_ZN9TCPClient5writeEPKhj>
              							lastOutActivity = t;
 80a29ce:	6265      	str	r5, [r4, #36]	; 0x24
 80a29d0:	e005      	b.n	80a29de <_ZN4MQTT4loopEv+0x186>
            						} else {
                            payload = buffer+llen+3+tl;
                            callback(topic,payload,len-llen-3-tl);
 80a29d2:	3a03      	subs	r2, #3
 80a29d4:	4471      	add	r1, lr
 80a29d6:	ebce 0202 	rsb	r2, lr, r2
 80a29da:	4419      	add	r1, r3
 80a29dc:	47d8      	blx	fp
 80a29de:	46d5      	mov	sp, sl
 80a29e0:	e03b      	b.n	80a2a5a <_ZN4MQTT4loopEv+0x202>
                        }
                    }
                } else if (type == MQTTPUBREC) {
 80a29e2:	2950      	cmp	r1, #80	; 0x50
 80a29e4:	d108      	bne.n	80a29f8 <_ZN4MQTT4loopEv+0x1a0>
                    // check for the situation that QoS2 receive PUBREC, should return PUBREL
                    msgId = (buffer[2] << 8) + buffer[3];
                    this->publishRelease(msgId);
 80a29e6:	7899      	ldrb	r1, [r3, #2]
 80a29e8:	78db      	ldrb	r3, [r3, #3]
 80a29ea:	4620      	mov	r0, r4
 80a29ec:	eb03 2101 	add.w	r1, r3, r1, lsl #8
 80a29f0:	b289      	uxth	r1, r1
 80a29f2:	f7ff fefd 	bl	80a27f0 <_ZN4MQTT14publishReleaseEt>
 80a29f6:	e030      	b.n	80a2a5a <_ZN4MQTT4loopEv+0x202>
                } else if (type == MQTTPUBACK) {
 80a29f8:	2940      	cmp	r1, #64	; 0x40
 80a29fa:	d00c      	beq.n	80a2a16 <_ZN4MQTT4loopEv+0x1be>
                        if (len == 4 && (buffer[0]&0x06) == MQTTQOS0_HEADER_MASK) {
                            msgId = (buffer[2]<<8)+buffer[3];
                            this->qoscallback(msgId);
                        }
                    }
                } else if (type == MQTTPUBREL) {
 80a29fc:	2960      	cmp	r1, #96	; 0x60
 80a29fe:	d108      	bne.n	80a2a12 <_ZN4MQTT4loopEv+0x1ba>
                  msgId = (buffer[2] << 8) + buffer[3];
                  this->publishComplete(msgId);
 80a2a00:	7899      	ldrb	r1, [r3, #2]
 80a2a02:	78db      	ldrb	r3, [r3, #3]
 80a2a04:	4620      	mov	r0, r4
 80a2a06:	eb03 2101 	add.w	r1, r3, r1, lsl #8
 80a2a0a:	b289      	uxth	r1, r1
 80a2a0c:	f7ff ff0a 	bl	80a2824 <_ZN4MQTT15publishCompleteEt>
 80a2a10:	e023      	b.n	80a2a5a <_ZN4MQTT4loopEv+0x202>
                } else if (type == MQTTPUBCOMP) {
 80a2a12:	2970      	cmp	r1, #112	; 0x70
 80a2a14:	d10d      	bne.n	80a2a32 <_ZN4MQTT4loopEv+0x1da>
                  if (qoscallback) {
 80a2a16:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80a2a18:	b1f9      	cbz	r1, 80a2a5a <_ZN4MQTT4loopEv+0x202>
                      // msgId only present for QOS==0
                      if (len == 4 && (buffer[0]&0x06) == MQTTQOS0_HEADER_MASK) {
 80a2a1a:	2a04      	cmp	r2, #4
 80a2a1c:	d11d      	bne.n	80a2a5a <_ZN4MQTT4loopEv+0x202>
 80a2a1e:	f010 0f06 	tst.w	r0, #6
 80a2a22:	d11a      	bne.n	80a2a5a <_ZN4MQTT4loopEv+0x202>
                          msgId = (buffer[2]<<8)+buffer[3];
                          this->qoscallback(msgId);
 80a2a24:	7898      	ldrb	r0, [r3, #2]
 80a2a26:	78db      	ldrb	r3, [r3, #3]
 80a2a28:	eb03 2000 	add.w	r0, r3, r0, lsl #8
 80a2a2c:	b280      	uxth	r0, r0
 80a2a2e:	4788      	blx	r1
 80a2a30:	e013      	b.n	80a2a5a <_ZN4MQTT4loopEv+0x202>
                      }
                  }
                } else if (type == MQTTSUBACK) {
 80a2a32:	2990      	cmp	r1, #144	; 0x90
 80a2a34:	d011      	beq.n	80a2a5a <_ZN4MQTT4loopEv+0x202>
                    // if something...
                } else if (type == MQTTPINGREQ) {
 80a2a36:	29c0      	cmp	r1, #192	; 0xc0
 80a2a38:	d10a      	bne.n	80a2a50 <_ZN4MQTT4loopEv+0x1f8>
                    buffer[0] = MQTTPINGRESP;
 80a2a3a:	22d0      	movs	r2, #208	; 0xd0
 80a2a3c:	701a      	strb	r2, [r3, #0]
                    buffer[1] = 0;
 80a2a3e:	69e3      	ldr	r3, [r4, #28]
 80a2a40:	2200      	movs	r2, #0
 80a2a42:	705a      	strb	r2, [r3, #1]
                    _client.write(buffer,2);
 80a2a44:	69e1      	ldr	r1, [r4, #28]
 80a2a46:	2202      	movs	r2, #2
 80a2a48:	4620      	mov	r0, r4
 80a2a4a:	f000 fd1e 	bl	80a348a <_ZN9TCPClient5writeEPKhj>
 80a2a4e:	e004      	b.n	80a2a5a <_ZN4MQTT4loopEv+0x202>
                } else if (type == MQTTPINGRESP) {
 80a2a50:	29d0      	cmp	r1, #208	; 0xd0
                    pingOutstanding = false;
 80a2a52:	bf04      	itt	eq
 80a2a54:	2300      	moveq	r3, #0
 80a2a56:	f884 302c 	strbeq.w	r3, [r4, #44]	; 0x2c
            }
        }
        return true;
    }
    return false;
}
 80a2a5a:	4648      	mov	r0, r9
 80a2a5c:	370c      	adds	r7, #12
 80a2a5e:	46bd      	mov	sp, r7
 80a2a60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a2a64 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>:

bool MQTT::subscribe(const char* topic) {
    return subscribe(topic, QOS0);
}

bool MQTT::subscribe(const char* topic, EMQTT_QOS qos) {
 80a2a64:	b570      	push	{r4, r5, r6, lr}
 80a2a66:	4604      	mov	r4, r0
 80a2a68:	460e      	mov	r6, r1
 80a2a6a:	4615      	mov	r5, r2

    if (isConnected()) {
 80a2a6c:	f7ff fd33 	bl	80a24d6 <_ZN4MQTT11isConnectedEv>
 80a2a70:	b1e8      	cbz	r0, 80a2aae <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x4a>
        // Leave room in the buffer for header and variable length field
        uint16_t length = 5;
        nextMsgId++;
 80a2a72:	8c23      	ldrh	r3, [r4, #32]
 80a2a74:	3301      	adds	r3, #1
 80a2a76:	b29b      	uxth	r3, r3
        if (nextMsgId == 0) {
 80a2a78:	b903      	cbnz	r3, 80a2a7c <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x18>
            nextMsgId = 1;
 80a2a7a:	2301      	movs	r3, #1
 80a2a7c:	8423      	strh	r3, [r4, #32]
        }
        buffer[length++] = (nextMsgId >> 8);
 80a2a7e:	8c23      	ldrh	r3, [r4, #32]
 80a2a80:	69e2      	ldr	r2, [r4, #28]
 80a2a82:	121b      	asrs	r3, r3, #8
 80a2a84:	7153      	strb	r3, [r2, #5]
        buffer[length++] = (nextMsgId & 0xFF);
 80a2a86:	69e3      	ldr	r3, [r4, #28]
 80a2a88:	8c22      	ldrh	r2, [r4, #32]
        length = writeString(topic, buffer,length);
 80a2a8a:	4631      	mov	r1, r6
        nextMsgId++;
        if (nextMsgId == 0) {
            nextMsgId = 1;
        }
        buffer[length++] = (nextMsgId >> 8);
        buffer[length++] = (nextMsgId & 0xFF);
 80a2a8c:	719a      	strb	r2, [r3, #6]
        length = writeString(topic, buffer,length);
 80a2a8e:	69e2      	ldr	r2, [r4, #28]
 80a2a90:	2307      	movs	r3, #7
 80a2a92:	4620      	mov	r0, r4
 80a2a94:	f7ff fd05 	bl	80a24a2 <_ZN4MQTT11writeStringEPKcPht>
        buffer[length++] = qos;
 80a2a98:	69e3      	ldr	r3, [r4, #28]
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
 80a2a9a:	2182      	movs	r1, #130	; 0x82
            nextMsgId = 1;
        }
        buffer[length++] = (nextMsgId >> 8);
        buffer[length++] = (nextMsgId & 0xFF);
        length = writeString(topic, buffer,length);
        buffer[length++] = qos;
 80a2a9c:	541d      	strb	r5, [r3, r0]
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
 80a2a9e:	1f03      	subs	r3, r0, #4
 80a2aa0:	69e2      	ldr	r2, [r4, #28]
 80a2aa2:	4620      	mov	r0, r4
    }
    return false;
}
 80a2aa4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        }
        buffer[length++] = (nextMsgId >> 8);
        buffer[length++] = (nextMsgId & 0xFF);
        length = writeString(topic, buffer,length);
        buffer[length++] = qos;
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
 80a2aa8:	b29b      	uxth	r3, r3
 80a2aaa:	f7ff bcb3 	b.w	80a2414 <_ZN4MQTT5writeEhPht>
    }
    return false;
}
 80a2aae:	bd70      	pop	{r4, r5, r6, pc}

080a2ab0 <_ZN4MQTTD1Ev>:

MQTT::MQTT(uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
    this->initialize(NULL, ip, port, keepalive, callback, maxpacketsize);
}

MQTT::~MQTT() {
 80a2ab0:	b510      	push	{r4, lr}
 80a2ab2:	4604      	mov	r4, r0
    if (isConnected()) {
 80a2ab4:	f7ff fd0f 	bl	80a24d6 <_ZN4MQTT11isConnectedEv>
 80a2ab8:	b110      	cbz	r0, 80a2ac0 <_ZN4MQTTD1Ev+0x10>
        disconnect();
 80a2aba:	4620      	mov	r0, r4
 80a2abc:	f7ff fcdd 	bl	80a247a <_ZN4MQTT10disconnectEv>
    }

    if (buffer != NULL)
 80a2ac0:	69e0      	ldr	r0, [r4, #28]
 80a2ac2:	b108      	cbz	r0, 80a2ac8 <_ZN4MQTTD1Ev+0x18>
      delete[] buffer;
 80a2ac4:	f7fd faf1 	bl	80a00aa <_ZdaPv>

MQTT::MQTT(uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
    this->initialize(NULL, ip, port, keepalive, callback, maxpacketsize);
}

MQTT::~MQTT() {
 80a2ac8:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80a2acc:	f000 ffa6 	bl	80a3a1c <_ZN6StringD1Ev>
 80a2ad0:	4620      	mov	r0, r4
 80a2ad2:	f7ff fbd3 	bl	80a227c <_ZN9TCPClientD1Ev>
        disconnect();
    }

    if (buffer != NULL)
      delete[] buffer;
}
 80a2ad6:	4620      	mov	r0, r4
 80a2ad8:	bd10      	pop	{r4, pc}

080a2ada <_GLOBAL__sub_I__ZN4MQTTC2EPctPFvS0_PhjE>:
 80a2ada:	f000 b947 	b.w	80a2d6c <HAL_Pin_Map>
	...

080a2ae0 <_ZN10JsonBufferD1Ev>:


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {

}
JsonBuffer::~JsonBuffer() {
 80a2ae0:	b510      	push	{r4, lr}
 80a2ae2:	4b05      	ldr	r3, [pc, #20]	; (80a2af8 <_ZN10JsonBufferD1Ev+0x18>)
 80a2ae4:	4604      	mov	r4, r0
 80a2ae6:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && buffer) {
 80a2ae8:	7c03      	ldrb	r3, [r0, #16]
 80a2aea:	b91b      	cbnz	r3, 80a2af4 <_ZN10JsonBufferD1Ev+0x14>
 80a2aec:	6840      	ldr	r0, [r0, #4]
 80a2aee:	b108      	cbz	r0, 80a2af4 <_ZN10JsonBufferD1Ev+0x14>
		free(buffer);
 80a2af0:	f000 fbca 	bl	80a3288 <free>
	}
}
 80a2af4:	4620      	mov	r0, r4
 80a2af6:	bd10      	pop	{r4, pc}
 80a2af8:	080a99a0 	.word	0x080a99a0

080a2afc <_ZN10JsonBufferD0Ev>:


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {

}
JsonBuffer::~JsonBuffer() {
 80a2afc:	b510      	push	{r4, lr}
 80a2afe:	4604      	mov	r4, r0
	if (!staticBuffers && buffer) {
		free(buffer);
	}
}
 80a2b00:	f7ff ffee 	bl	80a2ae0 <_ZN10JsonBufferD1Ev>
 80a2b04:	4620      	mov	r0, r4
 80a2b06:	2114      	movs	r1, #20
 80a2b08:	f002 f918 	bl	80a4d3c <_ZdlPvj>
 80a2b0c:	4620      	mov	r0, r4
 80a2b0e:	bd10      	pop	{r4, pc}

080a2b10 <_ZN10JsonWriterD1Ev>:
//
JsonWriter::JsonWriter() : JsonBuffer(), floatPlaces(-1) {
	init();
}

JsonWriter::~JsonWriter() {
 80a2b10:	b510      	push	{r4, lr}
 80a2b12:	4604      	mov	r4, r0
 80a2b14:	4b02      	ldr	r3, [pc, #8]	; (80a2b20 <_ZN10JsonWriterD1Ev+0x10>)
 80a2b16:	6003      	str	r3, [r0, #0]
 80a2b18:	f7ff ffe2 	bl	80a2ae0 <_ZN10JsonBufferD1Ev>

}
 80a2b1c:	4620      	mov	r0, r4
 80a2b1e:	bd10      	pop	{r4, pc}
 80a2b20:	080a99b0 	.word	0x080a99b0

080a2b24 <_ZN10JsonWriterD0Ev>:
//
JsonWriter::JsonWriter() : JsonBuffer(), floatPlaces(-1) {
	init();
}

JsonWriter::~JsonWriter() {
 80a2b24:	b510      	push	{r4, lr}
 80a2b26:	4604      	mov	r4, r0

}
 80a2b28:	f7ff fff2 	bl	80a2b10 <_ZN10JsonWriterD1Ev>
 80a2b2c:	4620      	mov	r0, r4
 80a2b2e:	2130      	movs	r1, #48	; 0x30
 80a2b30:	f002 f904 	bl	80a4d3c <_ZdlPvj>
 80a2b34:	4620      	mov	r0, r4
 80a2b36:	bd10      	pop	{r4, pc}

080a2b38 <_ZN10JsonWriter4initEv>:
	init();
}

void JsonWriter::init() {
	// Save start of insertion point for later
	offset = 0;
 80a2b38:	2300      	movs	r3, #0

	contextIndex = 0;
	context[contextIndex].isFirst = true;
 80a2b3a:	2201      	movs	r2, #1
	init();
}

void JsonWriter::init() {
	// Save start of insertion point for later
	offset = 0;
 80a2b3c:	60c3      	str	r3, [r0, #12]

	contextIndex = 0;
 80a2b3e:	6143      	str	r3, [r0, #20]
	context[contextIndex].isFirst = true;
 80a2b40:	7602      	strb	r2, [r0, #24]
	context[contextIndex].terminator = 0;
 80a2b42:	7643      	strb	r3, [r0, #25]

	truncated = false;
 80a2b44:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
 80a2b48:	4770      	bx	lr
	...

080a2b4c <_ZN10JsonWriterC1EPcj>:
	if (!staticBuffers && buffer) {
		free(buffer);
	}
}

JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
 80a2b4c:	2300      	movs	r3, #0
 80a2b4e:	60c3      	str	r3, [r0, #12]

JsonWriter::~JsonWriter() {

}

JsonWriter::JsonWriter(char *buffer, size_t bufferLen) : JsonBuffer(buffer, bufferLen), floatPlaces(-1) {
 80a2b50:	b510      	push	{r4, lr}
	if (!staticBuffers && buffer) {
		free(buffer);
	}
}

JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
 80a2b52:	2301      	movs	r3, #1
 80a2b54:	7403      	strb	r3, [r0, #16]

JsonWriter::~JsonWriter() {

}

JsonWriter::JsonWriter(char *buffer, size_t bufferLen) : JsonBuffer(buffer, bufferLen), floatPlaces(-1) {
 80a2b56:	4b05      	ldr	r3, [pc, #20]	; (80a2b6c <_ZN10JsonWriterC1EPcj+0x20>)
	if (!staticBuffers && buffer) {
		free(buffer);
	}
}

JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
 80a2b58:	6041      	str	r1, [r0, #4]

JsonWriter::~JsonWriter() {

}

JsonWriter::JsonWriter(char *buffer, size_t bufferLen) : JsonBuffer(buffer, bufferLen), floatPlaces(-1) {
 80a2b5a:	6003      	str	r3, [r0, #0]
 80a2b5c:	f04f 33ff 	mov.w	r3, #4294967295
	if (!staticBuffers && buffer) {
		free(buffer);
	}
}

JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
 80a2b60:	6082      	str	r2, [r0, #8]

JsonWriter::~JsonWriter() {

}

JsonWriter::JsonWriter(char *buffer, size_t bufferLen) : JsonBuffer(buffer, bufferLen), floatPlaces(-1) {
 80a2b62:	62c3      	str	r3, [r0, #44]	; 0x2c
	init();
 80a2b64:	f7ff ffe8 	bl	80a2b38 <_ZN10JsonWriter4initEv>
}
 80a2b68:	bd10      	pop	{r4, pc}
 80a2b6a:	bf00      	nop
 80a2b6c:	080a99b0 	.word	0x080a99b0

080a2b70 <_ZN10JsonWriter10insertCharEc>:
	}
}


void JsonWriter::insertChar(char ch) {
	if (offset < bufferLen) {
 80a2b70:	68c3      	ldr	r3, [r0, #12]
 80a2b72:	6882      	ldr	r2, [r0, #8]
		buffer[bufferLen - 1] = 0;
	}
}


void JsonWriter::insertChar(char ch) {
 80a2b74:	b510      	push	{r4, lr}
	if (offset < bufferLen) {
 80a2b76:	4293      	cmp	r3, r2
		buffer[offset++] = ch;
 80a2b78:	bf3d      	ittte	cc
 80a2b7a:	6842      	ldrcc	r2, [r0, #4]
 80a2b7c:	1c5c      	addcc	r4, r3, #1
 80a2b7e:	60c4      	strcc	r4, [r0, #12]
	}
	else {
		truncated = true;
 80a2b80:	2301      	movcs	r3, #1
}


void JsonWriter::insertChar(char ch) {
	if (offset < bufferLen) {
		buffer[offset++] = ch;
 80a2b82:	bf34      	ite	cc
 80a2b84:	54d1      	strbcc	r1, [r2, r3]
	}
	else {
		truncated = true;
 80a2b86:	f880 302a 	strbcs.w	r3, [r0, #42]	; 0x2a
 80a2b8a:	bd10      	pop	{r4, pc}

080a2b8c <_ZN10JsonWriter19finishObjectOrArrayEv>:
	insertChar(startChar);
	return true;
}


void JsonWriter::finishObjectOrArray() {
 80a2b8c:	b510      	push	{r4, lr}
	if (contextIndex > 0) {
 80a2b8e:	6943      	ldr	r3, [r0, #20]
	insertChar(startChar);
	return true;
}


void JsonWriter::finishObjectOrArray() {
 80a2b90:	4604      	mov	r4, r0
	if (contextIndex > 0) {
 80a2b92:	b143      	cbz	r3, 80a2ba6 <_ZN10JsonWriter19finishObjectOrArrayEv+0x1a>
		if (context[contextIndex].terminator != 0) {
 80a2b94:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80a2b98:	7e59      	ldrb	r1, [r3, #25]
 80a2b9a:	b109      	cbz	r1, 80a2ba0 <_ZN10JsonWriter19finishObjectOrArrayEv+0x14>
			insertChar(context[contextIndex].terminator);
 80a2b9c:	f7ff ffe8 	bl	80a2b70 <_ZN10JsonWriter10insertCharEc>
		}
		contextIndex--;
 80a2ba0:	6963      	ldr	r3, [r4, #20]
 80a2ba2:	3b01      	subs	r3, #1
 80a2ba4:	6163      	str	r3, [r4, #20]
	}
	// Make sure buffer is null terminated
	if (offset < bufferLen) {
 80a2ba6:	68a3      	ldr	r3, [r4, #8]
 80a2ba8:	68e0      	ldr	r0, [r4, #12]
 80a2baa:	6861      	ldr	r1, [r4, #4]
 80a2bac:	4298      	cmp	r0, r3
 80a2bae:	f04f 0200 	mov.w	r2, #0
		buffer[offset] = 0;
	}
	else {
		buffer[bufferLen - 1] = 0;
 80a2bb2:	bf2a      	itet	cs
 80a2bb4:	185b      	addcs	r3, r3, r1
		}
		contextIndex--;
	}
	// Make sure buffer is null terminated
	if (offset < bufferLen) {
		buffer[offset] = 0;
 80a2bb6:	540a      	strbcc	r2, [r1, r0]
	}
	else {
		buffer[bufferLen - 1] = 0;
 80a2bb8:	f803 2c01 	strbcs.w	r2, [r3, #-1]
 80a2bbc:	bd10      	pop	{r4, pc}

080a2bbe <_ZN10JsonWriter14insertvsprintfEPKcSt9__va_list>:
	va_start(ap, fmt);
	insertvsprintf(fmt, ap);
	va_end(ap);
}

void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
 80a2bbe:	b570      	push	{r4, r5, r6, lr}
 80a2bc0:	4604      	mov	r4, r0
	size_t spaceAvailable = bufferLen - offset;
 80a2bc2:	68c0      	ldr	r0, [r0, #12]
 80a2bc4:	68a5      	ldr	r5, [r4, #8]

	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
 80a2bc6:	6866      	ldr	r6, [r4, #4]
	insertvsprintf(fmt, ap);
	va_end(ap);
}

void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
	size_t spaceAvailable = bufferLen - offset;
 80a2bc8:	1a2d      	subs	r5, r5, r0

	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
 80a2bca:	4613      	mov	r3, r2
 80a2bcc:	4430      	add	r0, r6
 80a2bce:	460a      	mov	r2, r1
 80a2bd0:	4629      	mov	r1, r5
 80a2bd2:	f000 fb89 	bl	80a32e8 <vsnprintf>
	if (count <= spaceAvailable) {
 80a2bd6:	4285      	cmp	r5, r0
		offset += count;
	}
	else {
		// Truncated, no more space left
		offset = bufferLen;
 80a2bd8:	bf35      	itete	cc
 80a2bda:	68a3      	ldrcc	r3, [r4, #8]
void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
	size_t spaceAvailable = bufferLen - offset;

	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
	if (count <= spaceAvailable) {
		offset += count;
 80a2bdc:	68e3      	ldrcs	r3, [r4, #12]
	}
	else {
		// Truncated, no more space left
		offset = bufferLen;
 80a2bde:	60e3      	strcc	r3, [r4, #12]
void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
	size_t spaceAvailable = bufferLen - offset;

	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
	if (count <= spaceAvailable) {
		offset += count;
 80a2be0:	18c0      	addcs	r0, r0, r3
	}
	else {
		// Truncated, no more space left
		offset = bufferLen;
		truncated = true;
 80a2be2:	bf36      	itet	cc
 80a2be4:	2301      	movcc	r3, #1
void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
	size_t spaceAvailable = bufferLen - offset;

	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
	if (count <= spaceAvailable) {
		offset += count;
 80a2be6:	60e0      	strcs	r0, [r4, #12]
	}
	else {
		// Truncated, no more space left
		offset = bufferLen;
		truncated = true;
 80a2be8:	f884 302a 	strbcc.w	r3, [r4, #42]	; 0x2a
 80a2bec:	bd70      	pop	{r4, r5, r6, pc}

080a2bee <_ZN10JsonWriter13insertsprintfEPKcz>:

}



void JsonWriter::insertsprintf(const char *fmt, ...) {
 80a2bee:	b40e      	push	{r1, r2, r3}
 80a2bf0:	b503      	push	{r0, r1, lr}
 80a2bf2:	aa03      	add	r2, sp, #12
 80a2bf4:	f852 1b04 	ldr.w	r1, [r2], #4
	va_list ap;
	va_start(ap, fmt);
 80a2bf8:	9201      	str	r2, [sp, #4]
	insertvsprintf(fmt, ap);
 80a2bfa:	f7ff ffe0 	bl	80a2bbe <_ZN10JsonWriter14insertvsprintfEPKcSt9__va_list>
	va_end(ap);
}
 80a2bfe:	b002      	add	sp, #8
 80a2c00:	f85d eb04 	ldr.w	lr, [sp], #4
 80a2c04:	b003      	add	sp, #12
 80a2c06:	4770      	bx	lr

080a2c08 <_ZN10JsonWriter12insertStringEPKcb>:
	else {
		truncated = true;
	}
}

void JsonWriter::insertString(const char *s, bool quoted) {
 80a2c08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a2c0c:	4604      	mov	r4, r0
 80a2c0e:	460e      	mov	r6, r1
	// 110xxxxx 10xxxxxx

	// 0x00000800 - 0x0000FFFF:
	// 1110xxxx 10xxxxxx 10xxxxxx

	if (quoted) {
 80a2c10:	4617      	mov	r7, r2
 80a2c12:	b112      	cbz	r2, 80a2c1a <_ZN10JsonWriter12insertStringEPKcb+0x12>
		insertChar('"');
 80a2c14:	2122      	movs	r1, #34	; 0x22
 80a2c16:	f7ff ffab 	bl	80a2b70 <_ZN10JsonWriter10insertCharEc>
	else {
		truncated = true;
	}
}

void JsonWriter::insertString(const char *s, bool quoted) {
 80a2c1a:	2500      	movs	r5, #0

	if (quoted) {
		insertChar('"');
	}

	for(size_t ii = 0; s[ii] && offset < bufferLen; ii++) {
 80a2c1c:	5d71      	ldrb	r1, [r6, r5]
 80a2c1e:	eb06 0805 	add.w	r8, r6, r5
 80a2c22:	2900      	cmp	r1, #0
 80a2c24:	d071      	beq.n	80a2d0a <_ZN10JsonWriter12insertStringEPKcb+0x102>
 80a2c26:	68e2      	ldr	r2, [r4, #12]
 80a2c28:	68a3      	ldr	r3, [r4, #8]
 80a2c2a:	429a      	cmp	r2, r3
 80a2c2c:	d26d      	bcs.n	80a2d0a <_ZN10JsonWriter12insertStringEPKcb+0x102>
		if (s[ii] & 0x80) {
 80a2c2e:	060b      	lsls	r3, r1, #24
 80a2c30:	d533      	bpl.n	80a2c9a <_ZN10JsonWriter12insertStringEPKcb+0x92>
			// High bit set: convert UTF-8 to JSON Unicode escape
			if (((s[ii] & 0b11110000) == 0b11100000) && ((s[ii+1] & 0b11000000) == 0b10000000) && ((s[ii+2] & 0b11000000) == 0b10000000)) {
 80a2c32:	f001 03f0 	and.w	r3, r1, #240	; 0xf0
 80a2c36:	2be0      	cmp	r3, #224	; 0xe0
 80a2c38:	d117      	bne.n	80a2c6a <_ZN10JsonWriter12insertStringEPKcb+0x62>
 80a2c3a:	f898 3001 	ldrb.w	r3, [r8, #1]
 80a2c3e:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
 80a2c42:	2a80      	cmp	r2, #128	; 0x80
 80a2c44:	d111      	bne.n	80a2c6a <_ZN10JsonWriter12insertStringEPKcb+0x62>
 80a2c46:	f105 0802 	add.w	r8, r5, #2
 80a2c4a:	f816 2008 	ldrb.w	r2, [r6, r8]
 80a2c4e:	f002 00c0 	and.w	r0, r2, #192	; 0xc0
 80a2c52:	2880      	cmp	r0, #128	; 0x80
 80a2c54:	d109      	bne.n	80a2c6a <_ZN10JsonWriter12insertStringEPKcb+0x62>
				// 3-byte
				uint16_t utf16 = ((s[ii] & 0b1111) << 12) | ((s[ii+1] & 0b111111) << 6) | (s[ii+2] & 0b111111);
				insertsprintf("\\u%04X", utf16);
 80a2c56:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80a2c5a:	019b      	lsls	r3, r3, #6
 80a2c5c:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
 80a2c60:	f403 637c 	and.w	r3, r3, #4032	; 0xfc0
 80a2c64:	431a      	orrs	r2, r3
 80a2c66:	b292      	uxth	r2, r2
 80a2c68:	e011      	b.n	80a2c8e <_ZN10JsonWriter12insertStringEPKcb+0x86>
				ii += 2; // plus one more in loop increment
			}
			else
			if (((s[ii] & 0b11100000) == 0b11000000) && ((s[ii+1] & 0b11000000) == 0b10000000)) {
 80a2c6a:	f001 03e0 	and.w	r3, r1, #224	; 0xe0
 80a2c6e:	2bc0      	cmp	r3, #192	; 0xc0
 80a2c70:	d146      	bne.n	80a2d00 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
 80a2c72:	f105 0801 	add.w	r8, r5, #1
 80a2c76:	f816 3008 	ldrb.w	r3, [r6, r8]
 80a2c7a:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
 80a2c7e:	2a80      	cmp	r2, #128	; 0x80
 80a2c80:	d13e      	bne.n	80a2d00 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				// 2-byte
				uint16_t utf16 = ((s[ii] & 0b11111) << 6) | (s[ii+1] & 0b111111);
				insertsprintf("\\u%04X", utf16);
 80a2c82:	0189      	lsls	r1, r1, #6
 80a2c84:	f401 62f8 	and.w	r2, r1, #1984	; 0x7c0
 80a2c88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80a2c8c:	431a      	orrs	r2, r3
 80a2c8e:	4923      	ldr	r1, [pc, #140]	; (80a2d1c <_ZN10JsonWriter12insertStringEPKcb+0x114>)
 80a2c90:	4620      	mov	r0, r4
 80a2c92:	f7ff ffac 	bl	80a2bee <_ZN10JsonWriter13insertsprintfEPKcz>
				ii++; // plus one more in loop increment
 80a2c96:	4645      	mov	r5, r8
 80a2c98:	e035      	b.n	80a2d06 <_ZN10JsonWriter12insertStringEPKcb+0xfe>
				// Not valid unicode, just pass characters through
				insertChar(s[ii]);
			}
		}
		else {
			switch(s[ii]) {
 80a2c9a:	290c      	cmp	r1, #12
 80a2c9c:	d018      	beq.n	80a2cd0 <_ZN10JsonWriter12insertStringEPKcb+0xc8>
 80a2c9e:	d80b      	bhi.n	80a2cb8 <_ZN10JsonWriter12insertStringEPKcb+0xb0>
 80a2ca0:	2909      	cmp	r1, #9
 80a2ca2:	d021      	beq.n	80a2ce8 <_ZN10JsonWriter12insertStringEPKcb+0xe0>
 80a2ca4:	290a      	cmp	r1, #10
 80a2ca6:	d019      	beq.n	80a2cdc <_ZN10JsonWriter12insertStringEPKcb+0xd4>
 80a2ca8:	2908      	cmp	r1, #8
 80a2caa:	d129      	bne.n	80a2d00 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
			case '\b':
				insertChar('\\');
 80a2cac:	215c      	movs	r1, #92	; 0x5c
 80a2cae:	4620      	mov	r0, r4
 80a2cb0:	f7ff ff5e 	bl	80a2b70 <_ZN10JsonWriter10insertCharEc>
				insertChar('b');
 80a2cb4:	2162      	movs	r1, #98	; 0x62
 80a2cb6:	e023      	b.n	80a2d00 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				// Not valid unicode, just pass characters through
				insertChar(s[ii]);
			}
		}
		else {
			switch(s[ii]) {
 80a2cb8:	2922      	cmp	r1, #34	; 0x22
 80a2cba:	d01b      	beq.n	80a2cf4 <_ZN10JsonWriter12insertStringEPKcb+0xec>
 80a2cbc:	295c      	cmp	r1, #92	; 0x5c
 80a2cbe:	d019      	beq.n	80a2cf4 <_ZN10JsonWriter12insertStringEPKcb+0xec>
 80a2cc0:	290d      	cmp	r1, #13
 80a2cc2:	d11d      	bne.n	80a2d00 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				insertChar('\\');
				insertChar('n');
				break;

			case '\r':
				insertChar('\\');
 80a2cc4:	215c      	movs	r1, #92	; 0x5c
 80a2cc6:	4620      	mov	r0, r4
 80a2cc8:	f7ff ff52 	bl	80a2b70 <_ZN10JsonWriter10insertCharEc>
				insertChar('r');
 80a2ccc:	2172      	movs	r1, #114	; 0x72
 80a2cce:	e017      	b.n	80a2d00 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				insertChar('\\');
				insertChar('b');
				break;

			case '\f':
				insertChar('\\');
 80a2cd0:	215c      	movs	r1, #92	; 0x5c
 80a2cd2:	4620      	mov	r0, r4
 80a2cd4:	f7ff ff4c 	bl	80a2b70 <_ZN10JsonWriter10insertCharEc>
				insertChar('f');
 80a2cd8:	2166      	movs	r1, #102	; 0x66
 80a2cda:	e011      	b.n	80a2d00 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				break;

			case '\n':
				insertChar('\\');
 80a2cdc:	215c      	movs	r1, #92	; 0x5c
 80a2cde:	4620      	mov	r0, r4
 80a2ce0:	f7ff ff46 	bl	80a2b70 <_ZN10JsonWriter10insertCharEc>
				insertChar('n');
 80a2ce4:	216e      	movs	r1, #110	; 0x6e
 80a2ce6:	e00b      	b.n	80a2d00 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				insertChar('\\');
				insertChar('r');
				break;

			case '\t':
				insertChar('\\');
 80a2ce8:	215c      	movs	r1, #92	; 0x5c
 80a2cea:	4620      	mov	r0, r4
 80a2cec:	f7ff ff40 	bl	80a2b70 <_ZN10JsonWriter10insertCharEc>
				insertChar('t');
 80a2cf0:	2174      	movs	r1, #116	; 0x74
 80a2cf2:	e005      	b.n	80a2d00 <_ZN10JsonWriter12insertStringEPKcb+0xf8>
				break;

			case '"':
			case '\\':
				insertChar('\\');
 80a2cf4:	215c      	movs	r1, #92	; 0x5c
 80a2cf6:	4620      	mov	r0, r4
 80a2cf8:	f7ff ff3a 	bl	80a2b70 <_ZN10JsonWriter10insertCharEc>
				insertChar(s[ii]);
 80a2cfc:	f898 1000 	ldrb.w	r1, [r8]
				break;

			default:
				insertChar(s[ii]);
 80a2d00:	4620      	mov	r0, r4
 80a2d02:	f7ff ff35 	bl	80a2b70 <_ZN10JsonWriter10insertCharEc>

	if (quoted) {
		insertChar('"');
	}

	for(size_t ii = 0; s[ii] && offset < bufferLen; ii++) {
 80a2d06:	3501      	adds	r5, #1
 80a2d08:	e788      	b.n	80a2c1c <_ZN10JsonWriter12insertStringEPKcb+0x14>
				insertChar(s[ii]);
				break;
			}
		}
	}
	if (quoted) {
 80a2d0a:	b12f      	cbz	r7, 80a2d18 <_ZN10JsonWriter12insertStringEPKcb+0x110>
		insertChar('"');
 80a2d0c:	4620      	mov	r0, r4
	}

}
 80a2d0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				break;
			}
		}
	}
	if (quoted) {
		insertChar('"');
 80a2d12:	2122      	movs	r1, #34	; 0x22
 80a2d14:	f7ff bf2c 	b.w	80a2b70 <_ZN10JsonWriter10insertCharEc>
 80a2d18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a2d1c:	080a99c1 	.word	0x080a99c1

080a2d20 <_ZN10JsonWriter20insertCheckSeparatorEv>:
		offset = bufferLen;
		truncated = true;
	}
}

void JsonWriter::insertCheckSeparator() {
 80a2d20:	6942      	ldr	r2, [r0, #20]
 80a2d22:	eb00 0342 	add.w	r3, r0, r2, lsl #1
	if (context[contextIndex].isFirst) {
 80a2d26:	7e1a      	ldrb	r2, [r3, #24]
 80a2d28:	b112      	cbz	r2, 80a2d30 <_ZN10JsonWriter20insertCheckSeparatorEv+0x10>
		context[contextIndex].isFirst = false;
 80a2d2a:	2200      	movs	r2, #0
 80a2d2c:	761a      	strb	r2, [r3, #24]
 80a2d2e:	4770      	bx	lr
	}
	else {
		insertChar(',');
 80a2d30:	212c      	movs	r1, #44	; 0x2c
 80a2d32:	f7ff bf1d 	b.w	80a2b70 <_ZN10JsonWriter10insertCharEc>

080a2d36 <_ZN10JsonWriter18startObjectOrArrayEcc>:

	truncated = false;

}

bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
 80a2d36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
 80a2d38:	6943      	ldr	r3, [r0, #20]

	truncated = false;

}

bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
 80a2d3a:	460e      	mov	r6, r1
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
 80a2d3c:	3301      	adds	r3, #1
 80a2d3e:	2b08      	cmp	r3, #8

	truncated = false;

}

bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
 80a2d40:	4617      	mov	r7, r2
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
 80a2d42:	d80e      	bhi.n	80a2d62 <_ZN10JsonWriter18startObjectOrArrayEcc+0x2c>
		return false;
	}
	insertCheckSeparator();
 80a2d44:	f7ff ffec 	bl	80a2d20 <_ZN10JsonWriter20insertCheckSeparatorEv>

	contextIndex++;
 80a2d48:	6943      	ldr	r3, [r0, #20]

	context[contextIndex].isFirst = true;
 80a2d4a:	2401      	movs	r4, #1
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
		return false;
	}
	insertCheckSeparator();

	contextIndex++;
 80a2d4c:	1c5a      	adds	r2, r3, #1
 80a2d4e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80a2d52:	6142      	str	r2, [r0, #20]

	context[contextIndex].isFirst = true;
	context[contextIndex].terminator = endChar;

	insertChar(startChar);
 80a2d54:	4631      	mov	r1, r6
	}
	insertCheckSeparator();

	contextIndex++;

	context[contextIndex].isFirst = true;
 80a2d56:	769c      	strb	r4, [r3, #26]
	context[contextIndex].terminator = endChar;
 80a2d58:	76df      	strb	r7, [r3, #27]

	insertChar(startChar);
 80a2d5a:	f7ff ff09 	bl	80a2b70 <_ZN10JsonWriter10insertCharEc>
 80a2d5e:	4620      	mov	r0, r4
 80a2d60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

}

bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
		return false;
 80a2d62:	2000      	movs	r0, #0
	context[contextIndex].isFirst = true;
	context[contextIndex].terminator = endChar;

	insertChar(startChar);
	return true;
}
 80a2d64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a2d66 <_GLOBAL__sub_I__ZN10JsonBufferC2Ev>:
 80a2d66:	f000 b801 	b.w	80a2d6c <HAL_Pin_Map>
	...

080a2d6c <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a2d6c:	b508      	push	{r3, lr}
 80a2d6e:	4b02      	ldr	r3, [pc, #8]	; (80a2d78 <HAL_Pin_Map+0xc>)
 80a2d70:	681b      	ldr	r3, [r3, #0]
 80a2d72:	681b      	ldr	r3, [r3, #0]
 80a2d74:	9301      	str	r3, [sp, #4]
 80a2d76:	bd08      	pop	{r3, pc}
 80a2d78:	080601b0 	.word	0x080601b0

080a2d7c <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a2d7c:	b508      	push	{r3, lr}
 80a2d7e:	4b02      	ldr	r3, [pc, #8]	; (80a2d88 <HAL_Pin_Mode+0xc>)
 80a2d80:	681b      	ldr	r3, [r3, #0]
 80a2d82:	689b      	ldr	r3, [r3, #8]
 80a2d84:	9301      	str	r3, [sp, #4]
 80a2d86:	bd08      	pop	{r3, pc}
 80a2d88:	080601b0 	.word	0x080601b0

080a2d8c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a2d8c:	b508      	push	{r3, lr}
 80a2d8e:	4b02      	ldr	r3, [pc, #8]	; (80a2d98 <HAL_Get_Pin_Mode+0xc>)
 80a2d90:	681b      	ldr	r3, [r3, #0]
 80a2d92:	68db      	ldr	r3, [r3, #12]
 80a2d94:	9301      	str	r3, [sp, #4]
 80a2d96:	bd08      	pop	{r3, pc}
 80a2d98:	080601b0 	.word	0x080601b0

080a2d9c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a2d9c:	b508      	push	{r3, lr}
 80a2d9e:	4b02      	ldr	r3, [pc, #8]	; (80a2da8 <HAL_GPIO_Write+0xc>)
 80a2da0:	681b      	ldr	r3, [r3, #0]
 80a2da2:	691b      	ldr	r3, [r3, #16]
 80a2da4:	9301      	str	r3, [sp, #4]
 80a2da6:	bd08      	pop	{r3, pc}
 80a2da8:	080601b0 	.word	0x080601b0

080a2dac <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 80a2dac:	b508      	push	{r3, lr}
 80a2dae:	4b02      	ldr	r3, [pc, #8]	; (80a2db8 <HAL_GPIO_Read+0xc>)
 80a2db0:	681b      	ldr	r3, [r3, #0]
 80a2db2:	695b      	ldr	r3, [r3, #20]
 80a2db4:	9301      	str	r3, [sp, #4]
 80a2db6:	bd08      	pop	{r3, pc}
 80a2db8:	080601b0 	.word	0x080601b0

080a2dbc <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
 80a2dbc:	b508      	push	{r3, lr}
 80a2dbe:	4b02      	ldr	r3, [pc, #8]	; (80a2dc8 <HAL_SPI_Begin+0xc>)
 80a2dc0:	681b      	ldr	r3, [r3, #0]
 80a2dc2:	681b      	ldr	r3, [r3, #0]
 80a2dc4:	9301      	str	r3, [sp, #4]
 80a2dc6:	bd08      	pop	{r3, pc}
 80a2dc8:	080601b4 	.word	0x080601b4

080a2dcc <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
 80a2dcc:	b508      	push	{r3, lr}
 80a2dce:	4b02      	ldr	r3, [pc, #8]	; (80a2dd8 <HAL_SPI_Send_Receive_Data+0xc>)
 80a2dd0:	681b      	ldr	r3, [r3, #0]
 80a2dd2:	695b      	ldr	r3, [r3, #20]
 80a2dd4:	9301      	str	r3, [sp, #4]
 80a2dd6:	bd08      	pop	{r3, pc}
 80a2dd8:	080601b4 	.word	0x080601b4

080a2ddc <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a2ddc:	b508      	push	{r3, lr}
 80a2dde:	4b02      	ldr	r3, [pc, #8]	; (80a2de8 <HAL_SPI_Init+0xc>)
 80a2de0:	681b      	ldr	r3, [r3, #0]
 80a2de2:	69db      	ldr	r3, [r3, #28]
 80a2de4:	9301      	str	r3, [sp, #4]
 80a2de6:	bd08      	pop	{r3, pc}
 80a2de8:	080601b4 	.word	0x080601b4

080a2dec <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a2dec:	b508      	push	{r3, lr}
 80a2dee:	4b02      	ldr	r3, [pc, #8]	; (80a2df8 <HAL_SPI_Is_Enabled+0xc>)
 80a2df0:	681b      	ldr	r3, [r3, #0]
 80a2df2:	6a1b      	ldr	r3, [r3, #32]
 80a2df4:	9301      	str	r3, [sp, #4]
 80a2df6:	bd08      	pop	{r3, pc}
 80a2df8:	080601b4 	.word	0x080601b4

080a2dfc <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a2dfc:	b508      	push	{r3, lr}
 80a2dfe:	4b02      	ldr	r3, [pc, #8]	; (80a2e08 <HAL_RNG_GetRandomNumber+0xc>)
 80a2e00:	681b      	ldr	r3, [r3, #0]
 80a2e02:	685b      	ldr	r3, [r3, #4]
 80a2e04:	9301      	str	r3, [sp, #4]
 80a2e06:	bd08      	pop	{r3, pc}
 80a2e08:	0806019c 	.word	0x0806019c

080a2e0c <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a2e0c:	b508      	push	{r3, lr}
 80a2e0e:	4b02      	ldr	r3, [pc, #8]	; (80a2e18 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a2e10:	681b      	ldr	r3, [r3, #0]
 80a2e12:	695b      	ldr	r3, [r3, #20]
 80a2e14:	9301      	str	r3, [sp, #4]
 80a2e16:	bd08      	pop	{r3, pc}
 80a2e18:	0806019c 	.word	0x0806019c

080a2e1c <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
 80a2e1c:	b508      	push	{r3, lr}
 80a2e1e:	4b02      	ldr	r3, [pc, #8]	; (80a2e28 <HAL_RTC_Get_UnixTime+0xc>)
 80a2e20:	681b      	ldr	r3, [r3, #0]
 80a2e22:	69db      	ldr	r3, [r3, #28]
 80a2e24:	9301      	str	r3, [sp, #4]
 80a2e26:	bd08      	pop	{r3, pc}
 80a2e28:	0806019c 	.word	0x0806019c

080a2e2c <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
 80a2e2c:	b508      	push	{r3, lr}
 80a2e2e:	4b02      	ldr	r3, [pc, #8]	; (80a2e38 <HAL_RTC_Time_Is_Valid+0xc>)
 80a2e30:	681b      	ldr	r3, [r3, #0]
 80a2e32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a2e34:	9301      	str	r3, [sp, #4]
 80a2e36:	bd08      	pop	{r3, pc}
 80a2e38:	0806019c 	.word	0x0806019c

080a2e3c <HAL_Core_System_Reset_Ex>:
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
 80a2e3c:	b508      	push	{r3, lr}
 80a2e3e:	4b02      	ldr	r3, [pc, #8]	; (80a2e48 <HAL_Core_System_Reset_Ex+0xc>)
 80a2e40:	681b      	ldr	r3, [r3, #0]
 80a2e42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a2e44:	9301      	str	r3, [sp, #4]
 80a2e46:	bd08      	pop	{r3, pc}
 80a2e48:	080601b8 	.word	0x080601b8

080a2e4c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80a2e4c:	b508      	push	{r3, lr}
 80a2e4e:	4b02      	ldr	r3, [pc, #8]	; (80a2e58 <os_mutex_recursive_create+0xc>)
 80a2e50:	681b      	ldr	r3, [r3, #0]
 80a2e52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a2e54:	9301      	str	r3, [sp, #4]
 80a2e56:	bd08      	pop	{r3, pc}
 80a2e58:	080601d0 	.word	0x080601d0

080a2e5c <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80a2e5c:	b508      	push	{r3, lr}
 80a2e5e:	4b02      	ldr	r3, [pc, #8]	; (80a2e68 <os_mutex_recursive_destroy+0xc>)
 80a2e60:	681b      	ldr	r3, [r3, #0]
 80a2e62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a2e64:	9301      	str	r3, [sp, #4]
 80a2e66:	bd08      	pop	{r3, pc}
 80a2e68:	080601d0 	.word	0x080601d0

080a2e6c <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
 80a2e6c:	b508      	push	{r3, lr}
 80a2e6e:	4b02      	ldr	r3, [pc, #8]	; (80a2e78 <os_mutex_recursive_lock+0xc>)
 80a2e70:	681b      	ldr	r3, [r3, #0]
 80a2e72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a2e74:	9301      	str	r3, [sp, #4]
 80a2e76:	bd08      	pop	{r3, pc}
 80a2e78:	080601d0 	.word	0x080601d0

080a2e7c <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
 80a2e7c:	b508      	push	{r3, lr}
 80a2e7e:	4b02      	ldr	r3, [pc, #8]	; (80a2e88 <os_mutex_recursive_unlock+0xc>)
 80a2e80:	681b      	ldr	r3, [r3, #0]
 80a2e82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a2e84:	9301      	str	r3, [sp, #4]
 80a2e86:	bd08      	pop	{r3, pc}
 80a2e88:	080601d0 	.word	0x080601d0

080a2e8c <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a2e8c:	b508      	push	{r3, lr}
 80a2e8e:	4b02      	ldr	r3, [pc, #8]	; (80a2e98 <HAL_USART_Init+0xc>)
 80a2e90:	681b      	ldr	r3, [r3, #0]
 80a2e92:	699b      	ldr	r3, [r3, #24]
 80a2e94:	9301      	str	r3, [sp, #4]
 80a2e96:	bd08      	pop	{r3, pc}
 80a2e98:	080601c4 	.word	0x080601c4

080a2e9c <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a2e9c:	b508      	push	{r3, lr}
 80a2e9e:	4b02      	ldr	r3, [pc, #8]	; (80a2ea8 <HAL_USART_Write_Data+0xc>)
 80a2ea0:	681b      	ldr	r3, [r3, #0]
 80a2ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a2ea4:	9301      	str	r3, [sp, #4]
 80a2ea6:	bd08      	pop	{r3, pc}
 80a2ea8:	080601c4 	.word	0x080601c4

080a2eac <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a2eac:	b508      	push	{r3, lr}
 80a2eae:	4b02      	ldr	r3, [pc, #8]	; (80a2eb8 <HAL_USART_Available_Data+0xc>)
 80a2eb0:	681b      	ldr	r3, [r3, #0]
 80a2eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a2eb4:	9301      	str	r3, [sp, #4]
 80a2eb6:	bd08      	pop	{r3, pc}
 80a2eb8:	080601c4 	.word	0x080601c4

080a2ebc <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a2ebc:	b508      	push	{r3, lr}
 80a2ebe:	4b02      	ldr	r3, [pc, #8]	; (80a2ec8 <HAL_USART_Read_Data+0xc>)
 80a2ec0:	681b      	ldr	r3, [r3, #0]
 80a2ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a2ec4:	9301      	str	r3, [sp, #4]
 80a2ec6:	bd08      	pop	{r3, pc}
 80a2ec8:	080601c4 	.word	0x080601c4

080a2ecc <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a2ecc:	b508      	push	{r3, lr}
 80a2ece:	4b02      	ldr	r3, [pc, #8]	; (80a2ed8 <HAL_USART_Peek_Data+0xc>)
 80a2ed0:	681b      	ldr	r3, [r3, #0]
 80a2ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a2ed4:	9301      	str	r3, [sp, #4]
 80a2ed6:	bd08      	pop	{r3, pc}
 80a2ed8:	080601c4 	.word	0x080601c4

080a2edc <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a2edc:	b508      	push	{r3, lr}
 80a2ede:	4b02      	ldr	r3, [pc, #8]	; (80a2ee8 <HAL_USART_Flush_Data+0xc>)
 80a2ee0:	681b      	ldr	r3, [r3, #0]
 80a2ee2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a2ee4:	9301      	str	r3, [sp, #4]
 80a2ee6:	bd08      	pop	{r3, pc}
 80a2ee8:	080601c4 	.word	0x080601c4

080a2eec <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a2eec:	b508      	push	{r3, lr}
 80a2eee:	4b02      	ldr	r3, [pc, #8]	; (80a2ef8 <HAL_USART_Is_Enabled+0xc>)
 80a2ef0:	681b      	ldr	r3, [r3, #0]
 80a2ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a2ef4:	9301      	str	r3, [sp, #4]
 80a2ef6:	bd08      	pop	{r3, pc}
 80a2ef8:	080601c4 	.word	0x080601c4

080a2efc <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a2efc:	b508      	push	{r3, lr}
 80a2efe:	4b02      	ldr	r3, [pc, #8]	; (80a2f08 <HAL_USART_Available_Data_For_Write+0xc>)
 80a2f00:	681b      	ldr	r3, [r3, #0]
 80a2f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a2f04:	9301      	str	r3, [sp, #4]
 80a2f06:	bd08      	pop	{r3, pc}
 80a2f08:	080601c4 	.word	0x080601c4

080a2f0c <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
 80a2f0c:	b508      	push	{r3, lr}
 80a2f0e:	4b02      	ldr	r3, [pc, #8]	; (80a2f18 <HAL_USART_BeginConfig+0xc>)
 80a2f10:	681b      	ldr	r3, [r3, #0]
 80a2f12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a2f14:	9301      	str	r3, [sp, #4]
 80a2f16:	bd08      	pop	{r3, pc}
 80a2f18:	080601c4 	.word	0x080601c4

080a2f1c <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a2f1c:	b508      	push	{r3, lr}
 80a2f1e:	4b02      	ldr	r3, [pc, #8]	; (80a2f28 <HAL_I2C_Write_Data+0xc>)
 80a2f20:	681b      	ldr	r3, [r3, #0]
 80a2f22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a2f24:	9301      	str	r3, [sp, #4]
 80a2f26:	bd08      	pop	{r3, pc}
 80a2f28:	080601ac 	.word	0x080601ac

080a2f2c <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a2f2c:	b508      	push	{r3, lr}
 80a2f2e:	4b02      	ldr	r3, [pc, #8]	; (80a2f38 <HAL_I2C_Available_Data+0xc>)
 80a2f30:	681b      	ldr	r3, [r3, #0]
 80a2f32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a2f34:	9301      	str	r3, [sp, #4]
 80a2f36:	bd08      	pop	{r3, pc}
 80a2f38:	080601ac 	.word	0x080601ac

080a2f3c <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a2f3c:	b508      	push	{r3, lr}
 80a2f3e:	4b02      	ldr	r3, [pc, #8]	; (80a2f48 <HAL_I2C_Read_Data+0xc>)
 80a2f40:	681b      	ldr	r3, [r3, #0]
 80a2f42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a2f44:	9301      	str	r3, [sp, #4]
 80a2f46:	bd08      	pop	{r3, pc}
 80a2f48:	080601ac 	.word	0x080601ac

080a2f4c <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a2f4c:	b508      	push	{r3, lr}
 80a2f4e:	4b02      	ldr	r3, [pc, #8]	; (80a2f58 <HAL_I2C_Peek_Data+0xc>)
 80a2f50:	681b      	ldr	r3, [r3, #0]
 80a2f52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a2f54:	9301      	str	r3, [sp, #4]
 80a2f56:	bd08      	pop	{r3, pc}
 80a2f58:	080601ac 	.word	0x080601ac

080a2f5c <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a2f5c:	b508      	push	{r3, lr}
 80a2f5e:	4b02      	ldr	r3, [pc, #8]	; (80a2f68 <HAL_I2C_Flush_Data+0xc>)
 80a2f60:	681b      	ldr	r3, [r3, #0]
 80a2f62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a2f64:	9301      	str	r3, [sp, #4]
 80a2f66:	bd08      	pop	{r3, pc}
 80a2f68:	080601ac 	.word	0x080601ac

080a2f6c <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a2f6c:	b508      	push	{r3, lr}
 80a2f6e:	4b02      	ldr	r3, [pc, #8]	; (80a2f78 <HAL_I2C_Is_Enabled+0xc>)
 80a2f70:	681b      	ldr	r3, [r3, #0]
 80a2f72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a2f74:	9301      	str	r3, [sp, #4]
 80a2f76:	bd08      	pop	{r3, pc}
 80a2f78:	080601ac 	.word	0x080601ac

080a2f7c <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
 80a2f7c:	b508      	push	{r3, lr}
 80a2f7e:	4b03      	ldr	r3, [pc, #12]	; (80a2f8c <HAL_I2C_Init+0x10>)
 80a2f80:	681b      	ldr	r3, [r3, #0]
 80a2f82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a2f86:	9301      	str	r3, [sp, #4]
 80a2f88:	bd08      	pop	{r3, pc}
 80a2f8a:	0000      	.short	0x0000
 80a2f8c:	080601ac 	.word	0x080601ac

080a2f90 <socket_active_status>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, socket_active_status, uint8_t(sock_handle_t))
 80a2f90:	b508      	push	{r3, lr}
 80a2f92:	4b02      	ldr	r3, [pc, #8]	; (80a2f9c <socket_active_status+0xc>)
 80a2f94:	681b      	ldr	r3, [r3, #0]
 80a2f96:	681b      	ldr	r3, [r3, #0]
 80a2f98:	9301      	str	r3, [sp, #4]
 80a2f9a:	bd08      	pop	{r3, pc}
 80a2f9c:	080601bc 	.word	0x080601bc

080a2fa0 <socket_handle_valid>:
DYNALIB_FN(1, hal_socket, socket_handle_valid, uint8_t(sock_handle_t))
 80a2fa0:	b508      	push	{r3, lr}
 80a2fa2:	4b02      	ldr	r3, [pc, #8]	; (80a2fac <socket_handle_valid+0xc>)
 80a2fa4:	681b      	ldr	r3, [r3, #0]
 80a2fa6:	685b      	ldr	r3, [r3, #4]
 80a2fa8:	9301      	str	r3, [sp, #4]
 80a2faa:	bd08      	pop	{r3, pc}
 80a2fac:	080601bc 	.word	0x080601bc

080a2fb0 <socket_create>:
DYNALIB_FN(2, hal_socket, socket_create, sock_handle_t(uint8_t, uint8_t, uint8_t, uint16_t, network_interface_t))
 80a2fb0:	b508      	push	{r3, lr}
 80a2fb2:	4b02      	ldr	r3, [pc, #8]	; (80a2fbc <socket_create+0xc>)
 80a2fb4:	681b      	ldr	r3, [r3, #0]
 80a2fb6:	689b      	ldr	r3, [r3, #8]
 80a2fb8:	9301      	str	r3, [sp, #4]
 80a2fba:	bd08      	pop	{r3, pc}
 80a2fbc:	080601bc 	.word	0x080601bc

080a2fc0 <socket_connect>:
DYNALIB_FN(3, hal_socket, socket_connect, int32_t(sock_handle_t, const sockaddr_t*, long))
 80a2fc0:	b508      	push	{r3, lr}
 80a2fc2:	4b02      	ldr	r3, [pc, #8]	; (80a2fcc <socket_connect+0xc>)
 80a2fc4:	681b      	ldr	r3, [r3, #0]
 80a2fc6:	68db      	ldr	r3, [r3, #12]
 80a2fc8:	9301      	str	r3, [sp, #4]
 80a2fca:	bd08      	pop	{r3, pc}
 80a2fcc:	080601bc 	.word	0x080601bc

080a2fd0 <socket_receive>:
DYNALIB_FN(4, hal_socket, socket_receive, sock_result_t(sock_handle_t, void*, socklen_t, system_tick_t))
 80a2fd0:	b508      	push	{r3, lr}
 80a2fd2:	4b02      	ldr	r3, [pc, #8]	; (80a2fdc <socket_receive+0xc>)
 80a2fd4:	681b      	ldr	r3, [r3, #0]
 80a2fd6:	691b      	ldr	r3, [r3, #16]
 80a2fd8:	9301      	str	r3, [sp, #4]
 80a2fda:	bd08      	pop	{r3, pc}
 80a2fdc:	080601bc 	.word	0x080601bc

080a2fe0 <socket_close>:
DYNALIB_FN(5, hal_socket, socket_receivefrom, sock_result_t(sock_handle_t, void*, socklen_t, uint32_t, sockaddr_t*, socklen_t*))
DYNALIB_FN(6, hal_socket, socket_send, sock_result_t(sock_handle_t, const void*, socklen_t))
DYNALIB_FN(7, hal_socket, socket_sendto, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, sockaddr_t*, socklen_t))
DYNALIB_FN(8, hal_socket, socket_close, sock_result_t(sock_handle_t))
 80a2fe0:	b508      	push	{r3, lr}
 80a2fe2:	4b02      	ldr	r3, [pc, #8]	; (80a2fec <socket_close+0xc>)
 80a2fe4:	681b      	ldr	r3, [r3, #0]
 80a2fe6:	6a1b      	ldr	r3, [r3, #32]
 80a2fe8:	9301      	str	r3, [sp, #4]
 80a2fea:	bd08      	pop	{r3, pc}
 80a2fec:	080601bc 	.word	0x080601bc

080a2ff0 <socket_handle_invalid>:
DYNALIB_FN(9, hal_socket, socket_reset_blocking_call, sock_result_t(void))
DYNALIB_FN(10, hal_socket, socket_create_tcp_server, sock_result_t(uint16_t, network_interface_t))
DYNALIB_FN(11, hal_socket, socket_accept, sock_result_t(sock_handle_t))
DYNALIB_FN(12, hal_socket, socket_handle_invalid, sock_handle_t(void))
 80a2ff0:	b508      	push	{r3, lr}
 80a2ff2:	4b02      	ldr	r3, [pc, #8]	; (80a2ffc <socket_handle_invalid+0xc>)
 80a2ff4:	681b      	ldr	r3, [r3, #0]
 80a2ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a2ff8:	9301      	str	r3, [sp, #4]
 80a2ffa:	bd08      	pop	{r3, pc}
 80a2ffc:	080601bc 	.word	0x080601bc

080a3000 <socket_send_ex>:
DYNALIB_FN(13, hal_socket, socket_join_multicast, sock_result_t(const HAL_IPAddress*, network_interface_t, socket_multicast_info_t*))
DYNALIB_FN(14, hal_socket, socket_leave_multicast, sock_result_t(const HAL_IPAddress*, network_interface_t, socket_multicast_info_t*))
DYNALIB_FN(15, hal_socket, socket_peer, sock_result_t(sock_handle_t, sock_peer_t*, void*))
DYNALIB_FN(16, hal_socket, socket_shutdown, sock_result_t(sock_handle_t, int))
DYNALIB_FN(17, hal_socket, socket_send_ex, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, system_tick_t, void*))
 80a3000:	b508      	push	{r3, lr}
 80a3002:	4b02      	ldr	r3, [pc, #8]	; (80a300c <socket_send_ex+0xc>)
 80a3004:	681b      	ldr	r3, [r3, #0]
 80a3006:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a3008:	9301      	str	r3, [sp, #4]
 80a300a:	bd08      	pop	{r3, pc}
 80a300c:	080601bc 	.word	0x080601bc

080a3010 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a3010:	b508      	push	{r3, lr}
 80a3012:	4b02      	ldr	r3, [pc, #8]	; (80a301c <HAL_USB_USART_Init+0xc>)
 80a3014:	681b      	ldr	r3, [r3, #0]
 80a3016:	681b      	ldr	r3, [r3, #0]
 80a3018:	9301      	str	r3, [sp, #4]
 80a301a:	bd08      	pop	{r3, pc}
 80a301c:	080601d8 	.word	0x080601d8

080a3020 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a3020:	b508      	push	{r3, lr}
 80a3022:	4b02      	ldr	r3, [pc, #8]	; (80a302c <HAL_USB_USART_Begin+0xc>)
 80a3024:	681b      	ldr	r3, [r3, #0]
 80a3026:	685b      	ldr	r3, [r3, #4]
 80a3028:	9301      	str	r3, [sp, #4]
 80a302a:	bd08      	pop	{r3, pc}
 80a302c:	080601d8 	.word	0x080601d8

080a3030 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a3030:	b508      	push	{r3, lr}
 80a3032:	4b02      	ldr	r3, [pc, #8]	; (80a303c <HAL_USB_USART_Available_Data+0xc>)
 80a3034:	681b      	ldr	r3, [r3, #0]
 80a3036:	691b      	ldr	r3, [r3, #16]
 80a3038:	9301      	str	r3, [sp, #4]
 80a303a:	bd08      	pop	{r3, pc}
 80a303c:	080601d8 	.word	0x080601d8

080a3040 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a3040:	b508      	push	{r3, lr}
 80a3042:	4b02      	ldr	r3, [pc, #8]	; (80a304c <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a3044:	681b      	ldr	r3, [r3, #0]
 80a3046:	695b      	ldr	r3, [r3, #20]
 80a3048:	9301      	str	r3, [sp, #4]
 80a304a:	bd08      	pop	{r3, pc}
 80a304c:	080601d8 	.word	0x080601d8

080a3050 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a3050:	b508      	push	{r3, lr}
 80a3052:	4b02      	ldr	r3, [pc, #8]	; (80a305c <HAL_USB_USART_Receive_Data+0xc>)
 80a3054:	681b      	ldr	r3, [r3, #0]
 80a3056:	699b      	ldr	r3, [r3, #24]
 80a3058:	9301      	str	r3, [sp, #4]
 80a305a:	bd08      	pop	{r3, pc}
 80a305c:	080601d8 	.word	0x080601d8

080a3060 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a3060:	b508      	push	{r3, lr}
 80a3062:	4b02      	ldr	r3, [pc, #8]	; (80a306c <HAL_USB_USART_Send_Data+0xc>)
 80a3064:	681b      	ldr	r3, [r3, #0]
 80a3066:	69db      	ldr	r3, [r3, #28]
 80a3068:	9301      	str	r3, [sp, #4]
 80a306a:	bd08      	pop	{r3, pc}
 80a306c:	080601d8 	.word	0x080601d8

080a3070 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a3070:	b508      	push	{r3, lr}
 80a3072:	4b02      	ldr	r3, [pc, #8]	; (80a307c <HAL_USB_USART_Flush_Data+0xc>)
 80a3074:	681b      	ldr	r3, [r3, #0]
 80a3076:	6a1b      	ldr	r3, [r3, #32]
 80a3078:	9301      	str	r3, [sp, #4]
 80a307a:	bd08      	pop	{r3, pc}
 80a307c:	080601d8 	.word	0x080601d8

080a3080 <HAL_NET_SetNetWatchDog>:

DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
 80a3080:	b508      	push	{r3, lr}
 80a3082:	4b02      	ldr	r3, [pc, #8]	; (80a308c <HAL_NET_SetNetWatchDog+0xc>)
 80a3084:	681b      	ldr	r3, [r3, #0]
 80a3086:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a3088:	9301      	str	r3, [sp, #4]
 80a308a:	bd08      	pop	{r3, pc}
 80a308c:	080601c0 	.word	0x080601c0

080a3090 <inet_gethostbyname>:
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a3090:	b508      	push	{r3, lr}
 80a3092:	4b02      	ldr	r3, [pc, #8]	; (80a309c <inet_gethostbyname+0xc>)
 80a3094:	681b      	ldr	r3, [r3, #0]
 80a3096:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a3098:	9301      	str	r3, [sp, #4]
 80a309a:	bd08      	pop	{r3, pc}
 80a309c:	080601c0 	.word	0x080601c0

080a30a0 <wlan_select_antenna>:
DYNALIB_FN(19, hal_wlan, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(20, hal_wlan, wlan_select_antenna, int(WLanSelectAntenna_TypeDef))
 80a30a0:	b508      	push	{r3, lr}
 80a30a2:	4b02      	ldr	r3, [pc, #8]	; (80a30ac <wlan_select_antenna+0xc>)
 80a30a4:	681b      	ldr	r3, [r3, #0]
 80a30a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80a30a8:	9301      	str	r3, [sp, #4]
 80a30aa:	bd08      	pop	{r3, pc}
 80a30ac:	080601c0 	.word	0x080601c0

080a30b0 <wlan_connected_info>:
DYNALIB_FN(24, hal_wlan, wlan_get_credentials, int(wlan_scan_result_t, void*))
DYNALIB_FN(25, hal_wlan, softap_set_application_page_handler, int(PageProvider* provider, void* reserved))
DYNALIB_FN(26, hal_wlan, wlan_restart, int(void*))
DYNALIB_FN(27, hal_wlan, wlan_set_hostname, int(const char*, void*))
DYNALIB_FN(28, hal_wlan, wlan_get_hostname, int(char*, size_t, void*))
DYNALIB_FN(29, hal_wlan, wlan_connected_info, int(void*, wlan_connected_info_t*, void*))
 80a30b0:	b508      	push	{r3, lr}
 80a30b2:	4b02      	ldr	r3, [pc, #8]	; (80a30bc <wlan_connected_info+0xc>)
 80a30b4:	681b      	ldr	r3, [r3, #0]
 80a30b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a30b8:	9301      	str	r3, [sp, #4]
 80a30ba:	bd08      	pop	{r3, pc}
 80a30bc:	080601c0 	.word	0x080601c0

080a30c0 <LED_Signaling_Start>:

DYNALIB_BEGIN(services)

DYNALIB_FN(0, services, LED_SetRGBColor, void(uint32_t))
DYNALIB_FN(1, services, LED_SetSignalingColor, void(uint32_t))
DYNALIB_FN(2, services, LED_Signaling_Start, void(void))
 80a30c0:	b508      	push	{r3, lr}
 80a30c2:	4b02      	ldr	r3, [pc, #8]	; (80a30cc <LED_Signaling_Start+0xc>)
 80a30c4:	681b      	ldr	r3, [r3, #0]
 80a30c6:	689b      	ldr	r3, [r3, #8]
 80a30c8:	9301      	str	r3, [sp, #4]
 80a30ca:	bd08      	pop	{r3, pc}
 80a30cc:	080201a8 	.word	0x080201a8

080a30d0 <LED_Signaling_Stop>:
DYNALIB_FN(3, services, LED_Signaling_Stop, void(void))
 80a30d0:	b508      	push	{r3, lr}
 80a30d2:	4b02      	ldr	r3, [pc, #8]	; (80a30dc <LED_Signaling_Stop+0xc>)
 80a30d4:	681b      	ldr	r3, [r3, #0]
 80a30d6:	68db      	ldr	r3, [r3, #12]
 80a30d8:	9301      	str	r3, [sp, #4]
 80a30da:	bd08      	pop	{r3, pc}
 80a30dc:	080201a8 	.word	0x080201a8

080a30e0 <LED_RGB_IsOverRidden>:
DYNALIB_FN(4, services, LED_SetBrightness, void(uint8_t))
DYNALIB_FN(5, services, LED_RGB_Get, void(uint8_t*))
DYNALIB_FN(6, services, LED_RGB_IsOverRidden, bool(void))
 80a30e0:	b508      	push	{r3, lr}
 80a30e2:	4b02      	ldr	r3, [pc, #8]	; (80a30ec <LED_RGB_IsOverRidden+0xc>)
 80a30e4:	681b      	ldr	r3, [r3, #0]
 80a30e6:	699b      	ldr	r3, [r3, #24]
 80a30e8:	9301      	str	r3, [sp, #4]
 80a30ea:	bd08      	pop	{r3, pc}
 80a30ec:	080201a8 	.word	0x080201a8

080a30f0 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
 80a30f0:	b508      	push	{r3, lr}
 80a30f2:	4b02      	ldr	r3, [pc, #8]	; (80a30fc <log_message+0xc>)
 80a30f4:	681b      	ldr	r3, [r3, #0]
 80a30f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80a30f8:	9301      	str	r3, [sp, #4]
 80a30fa:	bd08      	pop	{r3, pc}
 80a30fc:	080201a8 	.word	0x080201a8

080a3100 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 80a3100:	b508      	push	{r3, lr}
 80a3102:	4b02      	ldr	r3, [pc, #8]	; (80a310c <system_mode+0xc>)
 80a3104:	681b      	ldr	r3, [r3, #0]
 80a3106:	681b      	ldr	r3, [r3, #0]
 80a3108:	9301      	str	r3, [sp, #4]
 80a310a:	bd08      	pop	{r3, pc}
 80a310c:	080601a4 	.word	0x080601a4

080a3110 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a3110:	b508      	push	{r3, lr}
 80a3112:	4b02      	ldr	r3, [pc, #8]	; (80a311c <set_system_mode+0xc>)
 80a3114:	681b      	ldr	r3, [r3, #0]
 80a3116:	685b      	ldr	r3, [r3, #4]
 80a3118:	9301      	str	r3, [sp, #4]
 80a311a:	bd08      	pop	{r3, pc}
 80a311c:	080601a4 	.word	0x080601a4

080a3120 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a3120:	b508      	push	{r3, lr}
 80a3122:	4b02      	ldr	r3, [pc, #8]	; (80a312c <system_delay_ms+0xc>)
 80a3124:	681b      	ldr	r3, [r3, #0]
 80a3126:	695b      	ldr	r3, [r3, #20]
 80a3128:	9301      	str	r3, [sp, #4]
 80a312a:	bd08      	pop	{r3, pc}
 80a312c:	080601a4 	.word	0x080601a4

080a3130 <system_thread_get_state>:
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 80a3130:	b508      	push	{r3, lr}
 80a3132:	4b02      	ldr	r3, [pc, #8]	; (80a313c <system_thread_get_state+0xc>)
 80a3134:	681b      	ldr	r3, [r3, #0]
 80a3136:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a3138:	9301      	str	r3, [sp, #4]
 80a313a:	bd08      	pop	{r3, pc}
 80a313c:	080601a4 	.word	0x080601a4

080a3140 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a3140:	b508      	push	{r3, lr}
 80a3142:	4b03      	ldr	r3, [pc, #12]	; (80a3150 <system_ctrl_set_app_request_handler+0x10>)
 80a3144:	681b      	ldr	r3, [r3, #0]
 80a3146:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a314a:	9301      	str	r3, [sp, #4]
 80a314c:	bd08      	pop	{r3, pc}
 80a314e:	0000      	.short	0x0000
 80a3150:	080601a4 	.word	0x080601a4

080a3154 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a3154:	b508      	push	{r3, lr}
 80a3156:	4b03      	ldr	r3, [pc, #12]	; (80a3164 <system_ctrl_set_result+0x10>)
 80a3158:	681b      	ldr	r3, [r3, #0]
 80a315a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a315e:	9301      	str	r3, [sp, #4]
 80a3160:	bd08      	pop	{r3, pc}
 80a3162:	0000      	.short	0x0000
 80a3164:	080601a4 	.word	0x080601a4

080a3168 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a3168:	b508      	push	{r3, lr}
 80a316a:	4b02      	ldr	r3, [pc, #8]	; (80a3174 <network_connect+0xc>)
 80a316c:	681b      	ldr	r3, [r3, #0]
 80a316e:	685b      	ldr	r3, [r3, #4]
 80a3170:	9301      	str	r3, [sp, #4]
 80a3172:	bd08      	pop	{r3, pc}
 80a3174:	080601c8 	.word	0x080601c8

080a3178 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a3178:	b508      	push	{r3, lr}
 80a317a:	4b02      	ldr	r3, [pc, #8]	; (80a3184 <network_connecting+0xc>)
 80a317c:	681b      	ldr	r3, [r3, #0]
 80a317e:	689b      	ldr	r3, [r3, #8]
 80a3180:	9301      	str	r3, [sp, #4]
 80a3182:	bd08      	pop	{r3, pc}
 80a3184:	080601c8 	.word	0x080601c8

080a3188 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a3188:	b508      	push	{r3, lr}
 80a318a:	4b02      	ldr	r3, [pc, #8]	; (80a3194 <network_disconnect+0xc>)
 80a318c:	681b      	ldr	r3, [r3, #0]
 80a318e:	68db      	ldr	r3, [r3, #12]
 80a3190:	9301      	str	r3, [sp, #4]
 80a3192:	bd08      	pop	{r3, pc}
 80a3194:	080601c8 	.word	0x080601c8

080a3198 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a3198:	b508      	push	{r3, lr}
 80a319a:	4b02      	ldr	r3, [pc, #8]	; (80a31a4 <network_ready+0xc>)
 80a319c:	681b      	ldr	r3, [r3, #0]
 80a319e:	691b      	ldr	r3, [r3, #16]
 80a31a0:	9301      	str	r3, [sp, #4]
 80a31a2:	bd08      	pop	{r3, pc}
 80a31a4:	080601c8 	.word	0x080601c8

080a31a8 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a31a8:	b508      	push	{r3, lr}
 80a31aa:	4b02      	ldr	r3, [pc, #8]	; (80a31b4 <network_on+0xc>)
 80a31ac:	681b      	ldr	r3, [r3, #0]
 80a31ae:	695b      	ldr	r3, [r3, #20]
 80a31b0:	9301      	str	r3, [sp, #4]
 80a31b2:	bd08      	pop	{r3, pc}
 80a31b4:	080601c8 	.word	0x080601c8

080a31b8 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a31b8:	b508      	push	{r3, lr}
 80a31ba:	4b02      	ldr	r3, [pc, #8]	; (80a31c4 <network_off+0xc>)
 80a31bc:	681b      	ldr	r3, [r3, #0]
 80a31be:	699b      	ldr	r3, [r3, #24]
 80a31c0:	9301      	str	r3, [sp, #4]
 80a31c2:	bd08      	pop	{r3, pc}
 80a31c4:	080601c8 	.word	0x080601c8

080a31c8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a31c8:	b508      	push	{r3, lr}
 80a31ca:	4b02      	ldr	r3, [pc, #8]	; (80a31d4 <network_listen+0xc>)
 80a31cc:	681b      	ldr	r3, [r3, #0]
 80a31ce:	69db      	ldr	r3, [r3, #28]
 80a31d0:	9301      	str	r3, [sp, #4]
 80a31d2:	bd08      	pop	{r3, pc}
 80a31d4:	080601c8 	.word	0x080601c8

080a31d8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a31d8:	b508      	push	{r3, lr}
 80a31da:	4b02      	ldr	r3, [pc, #8]	; (80a31e4 <network_listening+0xc>)
 80a31dc:	681b      	ldr	r3, [r3, #0]
 80a31de:	6a1b      	ldr	r3, [r3, #32]
 80a31e0:	9301      	str	r3, [sp, #4]
 80a31e2:	bd08      	pop	{r3, pc}
 80a31e4:	080601c8 	.word	0x080601c8

080a31e8 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a31e8:	b508      	push	{r3, lr}
 80a31ea:	4b02      	ldr	r3, [pc, #8]	; (80a31f4 <network_set_listen_timeout+0xc>)
 80a31ec:	681b      	ldr	r3, [r3, #0]
 80a31ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a31f0:	9301      	str	r3, [sp, #4]
 80a31f2:	bd08      	pop	{r3, pc}
 80a31f4:	080601c8 	.word	0x080601c8

080a31f8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a31f8:	b508      	push	{r3, lr}
 80a31fa:	4b02      	ldr	r3, [pc, #8]	; (80a3204 <network_get_listen_timeout+0xc>)
 80a31fc:	681b      	ldr	r3, [r3, #0]
 80a31fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a3200:	9301      	str	r3, [sp, #4]
 80a3202:	bd08      	pop	{r3, pc}
 80a3204:	080601c8 	.word	0x080601c8

080a3208 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
 80a3208:	b508      	push	{r3, lr}
 80a320a:	4b02      	ldr	r3, [pc, #8]	; (80a3214 <spark_variable+0xc>)
 80a320c:	681b      	ldr	r3, [r3, #0]
 80a320e:	681b      	ldr	r3, [r3, #0]
 80a3210:	9301      	str	r3, [sp, #4]
 80a3212:	bd08      	pop	{r3, pc}
 80a3214:	080601cc 	.word	0x080601cc

080a3218 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
 80a3218:	b508      	push	{r3, lr}
 80a321a:	4b02      	ldr	r3, [pc, #8]	; (80a3224 <spark_function+0xc>)
 80a321c:	681b      	ldr	r3, [r3, #0]
 80a321e:	685b      	ldr	r3, [r3, #4]
 80a3220:	9301      	str	r3, [sp, #4]
 80a3222:	bd08      	pop	{r3, pc}
 80a3224:	080601cc 	.word	0x080601cc

080a3228 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 80a3228:	b508      	push	{r3, lr}
 80a322a:	4b02      	ldr	r3, [pc, #8]	; (80a3234 <spark_process+0xc>)
 80a322c:	681b      	ldr	r3, [r3, #0]
 80a322e:	689b      	ldr	r3, [r3, #8]
 80a3230:	9301      	str	r3, [sp, #4]
 80a3232:	bd08      	pop	{r3, pc}
 80a3234:	080601cc 	.word	0x080601cc

080a3238 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
 80a3238:	b508      	push	{r3, lr}
 80a323a:	4b02      	ldr	r3, [pc, #8]	; (80a3244 <spark_cloud_flag_connect+0xc>)
 80a323c:	681b      	ldr	r3, [r3, #0]
 80a323e:	68db      	ldr	r3, [r3, #12]
 80a3240:	9301      	str	r3, [sp, #4]
 80a3242:	bd08      	pop	{r3, pc}
 80a3244:	080601cc 	.word	0x080601cc

080a3248 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 80a3248:	b508      	push	{r3, lr}
 80a324a:	4b02      	ldr	r3, [pc, #8]	; (80a3254 <spark_cloud_flag_connected+0xc>)
 80a324c:	681b      	ldr	r3, [r3, #0]
 80a324e:	695b      	ldr	r3, [r3, #20]
 80a3250:	9301      	str	r3, [sp, #4]
 80a3252:	bd08      	pop	{r3, pc}
 80a3254:	080601cc 	.word	0x080601cc

080a3258 <spark_sync_time_pending>:
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 80a3258:	b508      	push	{r3, lr}
 80a325a:	4b02      	ldr	r3, [pc, #8]	; (80a3264 <spark_sync_time_pending+0xc>)
 80a325c:	681b      	ldr	r3, [r3, #0]
 80a325e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a3260:	9301      	str	r3, [sp, #4]
 80a3262:	bd08      	pop	{r3, pc}
 80a3264:	080601cc 	.word	0x080601cc

080a3268 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a3268:	b508      	push	{r3, lr}
 80a326a:	4b02      	ldr	r3, [pc, #8]	; (80a3274 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a326c:	681b      	ldr	r3, [r3, #0]
 80a326e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a3270:	9301      	str	r3, [sp, #4]
 80a3272:	bd08      	pop	{r3, pc}
 80a3274:	080601cc 	.word	0x080601cc

080a3278 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a3278:	b508      	push	{r3, lr}
 80a327a:	4b02      	ldr	r3, [pc, #8]	; (80a3284 <malloc+0xc>)
 80a327c:	681b      	ldr	r3, [r3, #0]
 80a327e:	681b      	ldr	r3, [r3, #0]
 80a3280:	9301      	str	r3, [sp, #4]
 80a3282:	bd08      	pop	{r3, pc}
 80a3284:	080601a0 	.word	0x080601a0

080a3288 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a3288:	b508      	push	{r3, lr}
 80a328a:	4b02      	ldr	r3, [pc, #8]	; (80a3294 <free+0xc>)
 80a328c:	681b      	ldr	r3, [r3, #0]
 80a328e:	685b      	ldr	r3, [r3, #4]
 80a3290:	9301      	str	r3, [sp, #4]
 80a3292:	bd08      	pop	{r3, pc}
 80a3294:	080601a0 	.word	0x080601a0

080a3298 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a3298:	b508      	push	{r3, lr}
 80a329a:	4b02      	ldr	r3, [pc, #8]	; (80a32a4 <realloc+0xc>)
 80a329c:	681b      	ldr	r3, [r3, #0]
 80a329e:	689b      	ldr	r3, [r3, #8]
 80a32a0:	9301      	str	r3, [sp, #4]
 80a32a2:	bd08      	pop	{r3, pc}
 80a32a4:	080601a0 	.word	0x080601a0

080a32a8 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
 80a32a8:	b508      	push	{r3, lr}
 80a32aa:	4b02      	ldr	r3, [pc, #8]	; (80a32b4 <siprintf+0xc>)
 80a32ac:	681b      	ldr	r3, [r3, #0]
 80a32ae:	691b      	ldr	r3, [r3, #16]
 80a32b0:	9301      	str	r3, [sp, #4]
 80a32b2:	bd08      	pop	{r3, pc}
 80a32b4:	080601a0 	.word	0x080601a0

080a32b8 <siscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
 80a32b8:	b508      	push	{r3, lr}
 80a32ba:	4b02      	ldr	r3, [pc, #8]	; (80a32c4 <siscanf+0xc>)
 80a32bc:	681b      	ldr	r3, [r3, #0]
 80a32be:	699b      	ldr	r3, [r3, #24]
 80a32c0:	9301      	str	r3, [sp, #4]
 80a32c2:	bd08      	pop	{r3, pc}
 80a32c4:	080601a0 	.word	0x080601a0

080a32c8 <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
 80a32c8:	b508      	push	{r3, lr}
 80a32ca:	4b02      	ldr	r3, [pc, #8]	; (80a32d4 <snprintf+0xc>)
 80a32cc:	681b      	ldr	r3, [r3, #0]
 80a32ce:	69db      	ldr	r3, [r3, #28]
 80a32d0:	9301      	str	r3, [sp, #4]
 80a32d2:	bd08      	pop	{r3, pc}
 80a32d4:	080601a0 	.word	0x080601a0

080a32d8 <sniprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
 80a32d8:	b508      	push	{r3, lr}
 80a32da:	4b02      	ldr	r3, [pc, #8]	; (80a32e4 <sniprintf+0xc>)
 80a32dc:	681b      	ldr	r3, [r3, #0]
 80a32de:	6a1b      	ldr	r3, [r3, #32]
 80a32e0:	9301      	str	r3, [sp, #4]
 80a32e2:	bd08      	pop	{r3, pc}
 80a32e4:	080601a0 	.word	0x080601a0

080a32e8 <vsnprintf>:
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 80a32e8:	b508      	push	{r3, lr}
 80a32ea:	4b02      	ldr	r3, [pc, #8]	; (80a32f4 <vsnprintf+0xc>)
 80a32ec:	681b      	ldr	r3, [r3, #0]
 80a32ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a32f0:	9301      	str	r3, [sp, #4]
 80a32f2:	bd08      	pop	{r3, pc}
 80a32f4:	080601a0 	.word	0x080601a0

080a32f8 <_malloc_r>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80a32f8:	b508      	push	{r3, lr}
 80a32fa:	4b02      	ldr	r3, [pc, #8]	; (80a3304 <_malloc_r+0xc>)
 80a32fc:	681b      	ldr	r3, [r3, #0]
 80a32fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a3300:	9301      	str	r3, [sp, #4]
 80a3302:	bd08      	pop	{r3, pc}
 80a3304:	080601a0 	.word	0x080601a0

080a3308 <_ZN14RecursiveMutex4lockEv>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
 80a3308:	6800      	ldr	r0, [r0, #0]
 80a330a:	f7ff bdaf 	b.w	80a2e6c <os_mutex_recursive_lock>

080a330e <_ZN14RecursiveMutex6unlockEv>:
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
 80a330e:	6800      	ldr	r0, [r0, #0]
 80a3310:	f7ff bdb4 	b.w	80a2e7c <os_mutex_recursive_unlock>

080a3314 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a3314:	b570      	push	{r4, r5, r6, lr}
 80a3316:	4604      	mov	r4, r0
 80a3318:	460e      	mov	r6, r1
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 80a331a:	2500      	movs	r5, #0
 80a331c:	f840 5f08 	str.w	r5, [r0, #8]!
    {
        os_mutex_recursive_create(&handle_);
 80a3320:	f7ff fd94 	bl	80a2e4c <os_mutex_recursive_create>
{
    _spi = spi;
    HAL_SPI_Init(_spi);
 80a3324:	4630      	mov	r0, r6
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
    _spi = spi;
 80a3326:	7026      	strb	r6, [r4, #0]
    HAL_SPI_Init(_spi);
 80a3328:	f7ff fd58 	bl	80a2ddc <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80a332c:	6065      	str	r5, [r4, #4]
}
 80a332e:	4620      	mov	r0, r4
 80a3330:	bd70      	pop	{r4, r5, r6, pc}

080a3332 <_ZN8SPIClass5beginEt>:
        unlock();
    }
}

void SPIClass::begin(uint16_t ss_pin)
{
 80a3332:	b570      	push	{r4, r5, r6, lr}
 80a3334:	4605      	mov	r5, r0
 80a3336:	460e      	mov	r6, r1
  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
#elif PLATFORM_THREADING
    _mutex.lock();
 80a3338:	f100 0408 	add.w	r4, r0, #8
 80a333c:	4620      	mov	r0, r4
 80a333e:	f7ff ffe3 	bl	80a3308 <_ZN14RecursiveMutex4lockEv>
    if (!lock())
    {
        HAL_SPI_Begin(_spi, ss_pin);
 80a3342:	7828      	ldrb	r0, [r5, #0]
 80a3344:	4631      	mov	r1, r6
 80a3346:	f7ff fd39 	bl	80a2dbc <HAL_SPI_Begin>
  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
#elif PLATFORM_THREADING
    _mutex.unlock();
 80a334a:	4620      	mov	r0, r4
 80a334c:	f7ff ffdf 	bl	80a330e <_ZN14RecursiveMutex6unlockEv>
 80a3350:	bd70      	pop	{r4, r5, r6, pc}

080a3352 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
 80a3352:	b508      	push	{r3, lr}
    return static_cast<byte>(HAL_SPI_Send_Receive_Data(_spi, _data));
 80a3354:	7800      	ldrb	r0, [r0, #0]
 80a3356:	f7ff fd39 	bl	80a2dcc <HAL_SPI_Send_Receive_Data>
}
 80a335a:	b2c0      	uxtb	r0, r0
 80a335c:	bd08      	pop	{r3, pc}

080a335e <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
 80a335e:	7800      	ldrb	r0, [r0, #0]
 80a3360:	f7ff bd44 	b.w	80a2dec <HAL_SPI_Is_Enabled>

080a3364 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
 80a3364:	b510      	push	{r4, lr}
 80a3366:	4604      	mov	r4, r0
        if (wakeupSource_) {
 80a3368:	6800      	ldr	r0, [r0, #0]
 80a336a:	b118      	cbz	r0, 80a3374 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
 80a336c:	f7ff ff8c 	bl	80a3288 <free>
            wakeupSource_ = nullptr;
 80a3370:	2300      	movs	r3, #0
 80a3372:	6023      	str	r3, [r4, #0]
 80a3374:	bd10      	pop	{r4, pc}

080a3376 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80a3376:	b510      	push	{r4, lr}
 80a3378:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
 80a337a:	f7ff fff3 	bl	80a3364 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80a337e:	4620      	mov	r0, r4
 80a3380:	bd10      	pop	{r4, pc}

080a3382 <_ZN11SystemClass5resetEm>:
    reset(0);
}

void SystemClass::reset(uint32_t data)
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
 80a3382:	4601      	mov	r1, r0
 80a3384:	2200      	movs	r2, #0
 80a3386:	208c      	movs	r0, #140	; 0x8c
 80a3388:	f7ff bd58 	b.w	80a2e3c <HAL_Core_System_Reset_Ex>

080a338c <_ZN11SystemClass5resetEv>:
    HAL_Core_Enter_Bootloader(persist);
}

void SystemClass::reset(void)
{
    reset(0);
 80a338c:	2000      	movs	r0, #0
 80a338e:	f7ff bff8 	b.w	80a3382 <_ZN11SystemClass5resetEm>
	...

080a3394 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 80a3394:	f64f 73ff 	movw	r3, #65535	; 0xffff
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80a3398:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 80a339a:	4c08      	ldr	r4, [pc, #32]	; (80a33bc <_GLOBAL__sub_I_System+0x28>)
 80a339c:	2000      	movs	r0, #0
 80a339e:	6020      	str	r0, [r4, #0]
 80a33a0:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 80a33a2:	71a0      	strb	r0, [r4, #6]
 80a33a4:	8120      	strh	r0, [r4, #8]
 80a33a6:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a33a8:	f7ff feb2 	bl	80a3110 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
 80a33ac:	4620      	mov	r0, r4
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80a33ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
 80a33b2:	4a03      	ldr	r2, [pc, #12]	; (80a33c0 <_GLOBAL__sub_I_System+0x2c>)
 80a33b4:	4903      	ldr	r1, [pc, #12]	; (80a33c4 <_GLOBAL__sub_I_System+0x30>)
 80a33b6:	f001 bcb3 	b.w	80a4d20 <__aeabi_atexit>
 80a33ba:	bf00      	nop
 80a33bc:	20000500 	.word	0x20000500
 80a33c0:	200000fc 	.word	0x200000fc
 80a33c4:	080a3377 	.word	0x080a3377

080a33c8 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
 80a33c8:	b510      	push	{r4, lr}
 80a33ca:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
 80a33cc:	f003 fe70 	bl	80a70b0 <strlen>
 80a33d0:	3801      	subs	r0, #1
 80a33d2:	1823      	adds	r3, r4, r0
 80a33d4:	4620      	mov	r0, r4
	while(i<j){
 80a33d6:	4298      	cmp	r0, r3
 80a33d8:	d206      	bcs.n	80a33e8 <_Z11str_reversePc+0x20>
		c = *i;
 80a33da:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
 80a33dc:	7819      	ldrb	r1, [r3, #0]
 80a33de:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
 80a33e2:	f803 2901 	strb.w	r2, [r3], #-1
__attribute__((weak)) void str_reverse(char* buffer){
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
	while(i<j){
 80a33e6:	e7f6      	b.n	80a33d6 <_Z11str_reversePc+0xe>
 80a33e8:	bd10      	pop	{r4, pc}

080a33ea <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
 80a33ea:	b570      	push	{r4, r5, r6, lr}
 80a33ec:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
 80a33ee:	1e91      	subs	r1, r2, #2
 80a33f0:	2922      	cmp	r1, #34	; 0x22
 80a33f2:	d820      	bhi.n	80a3436 <ultoa+0x4c>
 80a33f4:	4625      	mov	r5, r4
 80a33f6:	4629      	mov	r1, r5
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
 80a33f8:	b910      	cbnz	r0, 80a3400 <ultoa+0x16>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 80a33fa:	4423      	add	r3, r4
            *ptr++ = '0';
 80a33fc:	2230      	movs	r2, #48	; 0x30
 80a33fe:	e00e      	b.n	80a341e <ultoa+0x34>
	div_t result;
	while(a){
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
 80a3400:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
 80a3404:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
 80a3408:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
 80a340a:	2809      	cmp	r0, #9
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
            result.rem = a%radix;
            *ptr = result.rem;
 80a340c:	f805 1b01 	strb.w	r1, [r5], #1
            if(result.rem<10){
                *ptr += '0';
 80a3410:	bf94      	ite	ls
 80a3412:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
 80a3414:	3157      	addhi	r1, #87	; 0x57
 80a3416:	f805 1c01 	strb.w	r1, [r5, #-1]
            }
            ++ptr;
            a = result.quot;
 80a341a:	4630      	mov	r0, r6
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
 80a341c:	e7eb      	b.n	80a33f6 <ultoa+0xc>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 80a341e:	4299      	cmp	r1, r3
 80a3420:	d202      	bcs.n	80a3428 <ultoa+0x3e>
            *ptr++ = '0';
 80a3422:	f801 2b01 	strb.w	r2, [r1], #1
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 80a3426:	e7fa      	b.n	80a341e <ultoa+0x34>
            *ptr++ = '0';

	*ptr = '\0';
 80a3428:	2300      	movs	r3, #0
	str_reverse(buffer);
 80a342a:	4620      	mov	r0, r4
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';

	*ptr = '\0';
 80a342c:	700b      	strb	r3, [r1, #0]
	str_reverse(buffer);
 80a342e:	f7ff ffcb 	bl	80a33c8 <_Z11str_reversePc>
	return buffer;
 80a3432:	4620      	mov	r0, r4
 80a3434:	bd70      	pop	{r4, r5, r6, pc}
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
	if(radix<2 || radix>36){
		return NULL;
 80a3436:	2000      	movs	r0, #0
            *ptr++ = '0';

	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}
 80a3438:	bd70      	pop	{r4, r5, r6, pc}

080a343a <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 80a343a:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
 80a343c:	1e03      	subs	r3, r0, #0
	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 80a343e:	460c      	mov	r4, r1
 80a3440:	4615      	mov	r5, r2
	if(a<0){
 80a3442:	da0b      	bge.n	80a345c <itoa+0x22>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
 80a3444:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
 80a3448:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
 80a344c:	bf14      	ite	ne
 80a344e:	4258      	negne	r0, r3
 80a3450:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
 80a3452:	2301      	movs	r3, #1
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
 80a3454:	700a      	strb	r2, [r1, #0]
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
		ultoa((unsigned)v, buffer + 1, radix);
 80a3456:	462a      	mov	r2, r5
 80a3458:	4419      	add	r1, r3
 80a345a:	e000      	b.n	80a345e <itoa+0x24>
	}else{
		ultoa(a, buffer, radix);
 80a345c:	2301      	movs	r3, #1
 80a345e:	f7ff ffc4 	bl	80a33ea <ultoa>
	}
	return buffer;
}
 80a3462:	4620      	mov	r0, r4
 80a3464:	bd38      	pop	{r3, r4, r5, pc}

080a3466 <utoa>:

__attribute__((weak)) char* utoa(unsigned a, char* buffer, int radix) {
 80a3466:	b508      	push	{r3, lr}
    return ultoa(a, buffer, radix);
 80a3468:	2301      	movs	r3, #1
 80a346a:	f7ff ffbe 	bl	80a33ea <ultoa>
}
 80a346e:	bd08      	pop	{r3, pc}

080a3470 <_ZN9TCPClient5writeEh>:
        }
        return connected;
}

size_t TCPClient::write(uint8_t b)
{
 80a3470:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a3472:	ac02      	add	r4, sp, #8
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a3474:	6803      	ldr	r3, [r0, #0]
        }
        return connected;
}

size_t TCPClient::write(uint8_t b)
{
 80a3476:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a347a:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 80a347c:	2201      	movs	r2, #1
 80a347e:	f247 5330 	movw	r3, #30000	; 0x7530
 80a3482:	4621      	mov	r1, r4
 80a3484:	47a8      	blx	r5
}
 80a3486:	b003      	add	sp, #12
 80a3488:	bd30      	pop	{r4, r5, pc}

080a348a <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size)
{
 80a348a:	b410      	push	{r4}
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a348c:	6803      	ldr	r3, [r0, #0]
 80a348e:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80a3490:	f247 5330 	movw	r3, #30000	; 0x7530
 80a3494:	46a4      	mov	ip, r4
}
 80a3496:	bc10      	pop	{r4}
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size)
{
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a3498:	4760      	bx	ip

080a349a <_ZN9TCPClient5writeEhm>:
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout)
{
 80a349a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a349c:	ac02      	add	r4, sp, #8
    return write(&b, 1, timeout);
 80a349e:	6803      	ldr	r3, [r0, #0]
{
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout)
{
 80a34a0:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, timeout);
 80a34a4:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 80a34a6:	4621      	mov	r1, r4
 80a34a8:	4613      	mov	r3, r2
 80a34aa:	2201      	movs	r2, #1
 80a34ac:	47a8      	blx	r5
}
 80a34ae:	b003      	add	sp, #12
 80a34b0:	bd30      	pop	{r4, r5, pc}

080a34b2 <_ZN9TCPClient5flushEv>:
  d_->offset = 0;
  d_->total = 0;
}

void TCPClient::flush()
{
 80a34b2:	4770      	bx	lr

080a34b4 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
 80a34b4:	4770      	bx	lr

080a34b6 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
 80a34b6:	2000      	movs	r0, #0
 80a34b8:	4770      	bx	lr

080a34ba <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
 80a34ba:	b510      	push	{r4, lr}
 80a34bc:	4604      	mov	r4, r0
 80a34be:	2114      	movs	r1, #20
 80a34c0:	f001 fc3c 	bl	80a4d3c <_ZdlPvj>
 80a34c4:	4620      	mov	r0, r4
 80a34c6:	bd10      	pop	{r4, pc}

080a34c8 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
 80a34c8:	f7fc bded 	b.w	80a00a6 <_ZdlPv>

080a34cc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.2.constprop.28>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
 80a34cc:	b510      	push	{r4, lr}
 80a34ce:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
 80a34d0:	6803      	ldr	r3, [r0, #0]
 80a34d2:	689b      	ldr	r3, [r3, #8]
 80a34d4:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a34d6:	68a3      	ldr	r3, [r4, #8]
 80a34d8:	3b01      	subs	r3, #1
 80a34da:	60a3      	str	r3, [r4, #8]
 80a34dc:	b92b      	cbnz	r3, 80a34ea <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.2.constprop.28+0x1e>
            _M_destroy();
 80a34de:	6823      	ldr	r3, [r4, #0]
 80a34e0:	4620      	mov	r0, r4
        }
    }
 80a34e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
 80a34e6:	68db      	ldr	r3, [r3, #12]
 80a34e8:	4718      	bx	r3
 80a34ea:	bd10      	pop	{r4, pc}

080a34ec <_ZN9TCPClient8remoteIPEv>:
{
   return (status()!=0);
}

IPAddress TCPClient::remoteIP()
{
 80a34ec:	b570      	push	{r4, r5, r6, lr}

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 80a34ee:	4604      	mov	r4, r0
 80a34f0:	4606      	mov	r6, r0
 80a34f2:	694d      	ldr	r5, [r1, #20]
 80a34f4:	4b04      	ldr	r3, [pc, #16]	; (80a3508 <_ZN9TCPClient8remoteIPEv+0x1c>)
 80a34f6:	358c      	adds	r5, #140	; 0x8c
 80a34f8:	f844 3b04 	str.w	r3, [r4], #4
 80a34fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a34fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a3500:	682b      	ldr	r3, [r5, #0]
    return d_->remoteIP;
}
 80a3502:	4630      	mov	r0, r6
 80a3504:	7023      	strb	r3, [r4, #0]
 80a3506:	bd70      	pop	{r4, r5, r6, pc}
 80a3508:	080a9b78 	.word	0x080a9b78

080a350c <_ZN9TCPClient4peekEv>:
        }
        return read;
}

int TCPClient::peek()
{
 80a350c:	b510      	push	{r4, lr}
 80a350e:	6943      	ldr	r3, [r0, #20]
 80a3510:	4604      	mov	r4, r0
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
 80a3512:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a3516:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80a351a:	429a      	cmp	r2, r3
 80a351c:	d005      	beq.n	80a352a <_ZN9TCPClient4peekEv+0x1e>
 80a351e:	6962      	ldr	r2, [r4, #20]
 80a3520:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 80a3524:	4413      	add	r3, r2
 80a3526:	7918      	ldrb	r0, [r3, #4]
 80a3528:	bd10      	pop	{r4, pc}
 80a352a:	6803      	ldr	r3, [r0, #0]
 80a352c:	691b      	ldr	r3, [r3, #16]
 80a352e:	4798      	blx	r3
 80a3530:	2800      	cmp	r0, #0
 80a3532:	d1f4      	bne.n	80a351e <_ZN9TCPClient4peekEv+0x12>
 80a3534:	f04f 30ff 	mov.w	r0, #4294967295
}
 80a3538:	bd10      	pop	{r4, pc}

080a353a <_ZN9TCPClient4readEv>:
    avail = bufferCount();
    return avail;
}

int TCPClient::read()
{
 80a353a:	b510      	push	{r4, lr}
 80a353c:	6943      	ldr	r3, [r0, #20]
 80a353e:	4604      	mov	r4, r0
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
 80a3540:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a3544:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80a3548:	429a      	cmp	r2, r3
 80a354a:	d008      	beq.n	80a355e <_ZN9TCPClient4readEv+0x24>
 80a354c:	6962      	ldr	r2, [r4, #20]
 80a354e:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 80a3552:	1c59      	adds	r1, r3, #1
 80a3554:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
 80a3558:	4413      	add	r3, r2
 80a355a:	7918      	ldrb	r0, [r3, #4]
 80a355c:	bd10      	pop	{r4, pc}
 80a355e:	6803      	ldr	r3, [r0, #0]
 80a3560:	691b      	ldr	r3, [r3, #16]
 80a3562:	4798      	blx	r3
 80a3564:	2800      	cmp	r0, #0
 80a3566:	d1f1      	bne.n	80a354c <_ZN9TCPClient4readEv+0x12>
 80a3568:	f04f 30ff 	mov.w	r0, #4294967295
}
 80a356c:	bd10      	pop	{r4, pc}

080a356e <_ZN9TCPClient4readEPhj>:

int TCPClient::read(uint8_t *buffer, size_t size)
{
 80a356e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a3570:	6943      	ldr	r3, [r0, #20]
 80a3572:	4617      	mov	r7, r2
        int read = -1;
        if (bufferCount() || available())
 80a3574:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a3578:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
{
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size)
{
 80a357c:	4605      	mov	r5, r0
        int read = -1;
        if (bufferCount() || available())
 80a357e:	429a      	cmp	r2, r3
{
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size)
{
 80a3580:	460e      	mov	r6, r1
        int read = -1;
        if (bufferCount() || available())
 80a3582:	d106      	bne.n	80a3592 <_ZN9TCPClient4readEPhj+0x24>
 80a3584:	6803      	ldr	r3, [r0, #0]
 80a3586:	691b      	ldr	r3, [r3, #16]
 80a3588:	4798      	blx	r3
 80a358a:	b910      	cbnz	r0, 80a3592 <_ZN9TCPClient4readEPhj+0x24>
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size)
{
        int read = -1;
 80a358c:	f04f 34ff 	mov.w	r4, #4294967295
 80a3590:	e014      	b.n	80a35bc <_ZN9TCPClient4readEPhj+0x4e>
 80a3592:	6969      	ldr	r1, [r5, #20]
        if (bufferCount() || available())
        {
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80a3594:	4630      	mov	r0, r6
    return ret;
}

int TCPClient::bufferCount()
{
  return d_->total - d_->offset;
 80a3596:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
 80a359a:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
{
        int read = -1;
        if (bufferCount() || available())
        {
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80a359e:	4419      	add	r1, r3
    return ret;
}

int TCPClient::bufferCount()
{
  return d_->total - d_->offset;
 80a35a0:	1ae4      	subs	r4, r4, r3
int TCPClient::read(uint8_t *buffer, size_t size)
{
        int read = -1;
        if (bufferCount() || available())
        {
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
 80a35a2:	42bc      	cmp	r4, r7
 80a35a4:	bf28      	it	cs
 80a35a6:	463c      	movcs	r4, r7
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80a35a8:	3104      	adds	r1, #4
 80a35aa:	4622      	mov	r2, r4
 80a35ac:	f003 f81e 	bl	80a65ec <memcpy>
 80a35b0:	696a      	ldr	r2, [r5, #20]
          d_->offset += read;
 80a35b2:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 80a35b6:	4423      	add	r3, r4
 80a35b8:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
        }
        return read;
}
 80a35bc:	4620      	mov	r0, r4
 80a35be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a35c0 <_ZN9TCPClient12flush_bufferEv>:
{
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
}

void TCPClient::flush_buffer()
{
 80a35c0:	6942      	ldr	r2, [r0, #20]
  d_->offset = 0;
 80a35c2:	2300      	movs	r3, #0
 80a35c4:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
 80a35c8:	6942      	ldr	r2, [r0, #20]
  d_->total = 0;
 80a35ca:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
 80a35ce:	4770      	bx	lr

080a35d0 <_ZN9TCPClient9availableEv>:
{
  return d_->total - d_->offset;
}

int TCPClient::available()
{
 80a35d0:	b538      	push	{r3, r4, r5, lr}
 80a35d2:	6942      	ldr	r2, [r0, #20]
 80a35d4:	4604      	mov	r4, r0
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total))
 80a35d6:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 80a35da:	b11b      	cbz	r3, 80a35e4 <_ZN9TCPClient9availableEv+0x14>
 80a35dc:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
 80a35e0:	429a      	cmp	r2, r3
 80a35e2:	d00c      	beq.n	80a35fe <_ZN9TCPClient9availableEv+0x2e>
    {
        flush_buffer();
    }

    if(Network.from(nif).ready() && isOpen(d_->sock))
 80a35e4:	6920      	ldr	r0, [r4, #16]
 80a35e6:	f001 fab1 	bl	80a4b4c <_ZN5spark12NetworkClass4fromEm>
 80a35ea:	6803      	ldr	r3, [r0, #0]
 80a35ec:	68db      	ldr	r3, [r3, #12]
 80a35ee:	4798      	blx	r3
 80a35f0:	b318      	cbz	r0, 80a363a <_ZN9TCPClient9availableEv+0x6a>
 80a35f2:	6963      	ldr	r3, [r4, #20]

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 80a35f4:	6818      	ldr	r0, [r3, #0]
 80a35f6:	f7ff fcd3 	bl	80a2fa0 <socket_handle_valid>
    if (d_->total && (d_->offset == d_->total))
    {
        flush_buffer();
    }

    if(Network.from(nif).ready() && isOpen(d_->sock))
 80a35fa:	b918      	cbnz	r0, 80a3604 <_ZN9TCPClient9availableEv+0x34>
 80a35fc:	e01d      	b.n	80a363a <_ZN9TCPClient9availableEv+0x6a>
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total))
    {
        flush_buffer();
 80a35fe:	f7ff ffdf 	bl	80a35c0 <_ZN9TCPClient12flush_bufferEv>
 80a3602:	e7ef      	b.n	80a35e4 <_ZN9TCPClient9availableEv+0x14>
 80a3604:	6960      	ldr	r0, [r4, #20]
    }

    if(Network.from(nif).ready() && isOpen(d_->sock))
    {
        // Have room
        if ( d_->total < arraySize(d_->buffer))
 80a3606:	f8b0 1086 	ldrh.w	r1, [r0, #134]	; 0x86
 80a360a:	297f      	cmp	r1, #127	; 0x7f
 80a360c:	d815      	bhi.n	80a363a <_ZN9TCPClient9availableEv+0x6a>
        {
            int ret = socket_receive(d_->sock, d_->buffer + d_->total , arraySize(d_->buffer)-d_->total, 0);
 80a360e:	1d05      	adds	r5, r0, #4
 80a3610:	f1c1 0280 	rsb	r2, r1, #128	; 0x80
 80a3614:	2300      	movs	r3, #0
 80a3616:	4429      	add	r1, r5
 80a3618:	6800      	ldr	r0, [r0, #0]
 80a361a:	f7ff fcd9 	bl	80a2fd0 <socket_receive>
            if (ret > 0)
 80a361e:	2800      	cmp	r0, #0
 80a3620:	dd0b      	ble.n	80a363a <_ZN9TCPClient9availableEv+0x6a>
 80a3622:	6963      	ldr	r3, [r4, #20]
            {
                DEBUG("recv(=%d)",ret);
                if (d_->total == 0) d_->offset = 0;
 80a3624:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a3628:	b90a      	cbnz	r2, 80a362e <_ZN9TCPClient9availableEv+0x5e>
 80a362a:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 80a362e:	6962      	ldr	r2, [r4, #20]
                d_->total += ret;
 80a3630:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 80a3634:	4418      	add	r0, r3
 80a3636:	f8a2 0086 	strh.w	r0, [r2, #134]	; 0x86
 80a363a:	6962      	ldr	r2, [r4, #20]
            }
        } // Have Space
    } // WiFi.ready() && isOpen(d_->sock)
    avail = bufferCount();
    return avail;
 80a363c:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 80a3640:	f8b2 0084 	ldrh.w	r0, [r2, #132]	; 0x84
 80a3644:	1a18      	subs	r0, r3, r0
}
 80a3646:	bd38      	pop	{r3, r4, r5, pc}

080a3648 <_ZN9TCPClient4stopEv>:
{
}


void TCPClient::stop()
{
 80a3648:	b538      	push	{r3, r4, r5, lr}
  // This log line pollutes the log too much
  // DEBUG("sock %d closesocket", d_->sock);

  if (isOpen(d_->sock))
 80a364a:	6943      	ldr	r3, [r0, #20]
{
}


void TCPClient::stop()
{
 80a364c:	4604      	mov	r4, r0

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 80a364e:	6818      	ldr	r0, [r3, #0]
 80a3650:	f7ff fca6 	bl	80a2fa0 <socket_handle_valid>
void TCPClient::stop()
{
  // This log line pollutes the log too much
  // DEBUG("sock %d closesocket", d_->sock);

  if (isOpen(d_->sock))
 80a3654:	b118      	cbz	r0, 80a365e <_ZN9TCPClient4stopEv+0x16>
      socket_close(d_->sock);
 80a3656:	6963      	ldr	r3, [r4, #20]
 80a3658:	6818      	ldr	r0, [r3, #0]
 80a365a:	f7ff fcc1 	bl	80a2fe0 <socket_close>
 80a365e:	6965      	ldr	r5, [r4, #20]
  d_->sock = socket_handle_invalid();
 80a3660:	f7ff fcc6 	bl	80a2ff0 <socket_handle_invalid>
 80a3664:	6028      	str	r0, [r5, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a3666:	6960      	ldr	r0, [r4, #20]
 80a3668:	2211      	movs	r2, #17
 80a366a:	2100      	movs	r1, #0
 80a366c:	308c      	adds	r0, #140	; 0x8c
 80a366e:	f002 ffc8 	bl	80a6602 <memset>
  d_->remoteIP.clear();
  flush_buffer();
 80a3672:	4620      	mov	r0, r4
}
 80a3674:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

  if (isOpen(d_->sock))
      socket_close(d_->sock);
  d_->sock = socket_handle_invalid();
  d_->remoteIP.clear();
  flush_buffer();
 80a3678:	f7ff bfa2 	b.w	80a35c0 <_ZN9TCPClient12flush_bufferEv>

080a367c <_ZN9TCPClient7connectE9IPAddresstm>:
    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif)
{
 80a367c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a3680:	461f      	mov	r7, r3
    stop();
 80a3682:	6803      	ldr	r3, [r0, #0]
    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif)
{
 80a3684:	b08a      	sub	sp, #40	; 0x28
    stop();
 80a3686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif)
{
 80a3688:	4606      	mov	r6, r0
 80a368a:	460c      	mov	r4, r1
 80a368c:	4615      	mov	r5, r2
    stop();
 80a368e:	4798      	blx	r3
        int connected = 0;
        if(Network.from(nif).ready())
 80a3690:	4638      	mov	r0, r7
 80a3692:	f001 fa5b 	bl	80a4b4c <_ZN5spark12NetworkClass4fromEm>
 80a3696:	6803      	ldr	r3, [r0, #0]
 80a3698:	68db      	ldr	r3, [r3, #12]
 80a369a:	4798      	blx	r3
 80a369c:	2800      	cmp	r0, #0
 80a369e:	d056      	beq.n	80a374e <_ZN9TCPClient7connectE9IPAddresstm+0xd2>
        {
          sockaddr_t tSocketAddr;
          d_->sock = socket_create(AF_INET, SOCK_STREAM, IPPROTO_TCP, port, nif);
 80a36a0:	9700      	str	r7, [sp, #0]
 80a36a2:	462b      	mov	r3, r5
 80a36a4:	2206      	movs	r2, #6
 80a36a6:	2101      	movs	r1, #1
 80a36a8:	2002      	movs	r0, #2
 80a36aa:	f8d6 8014 	ldr.w	r8, [r6, #20]
 80a36ae:	f7ff fc7f 	bl	80a2fb0 <socket_create>
          LOG(TRACE, "TCPClient socket=%x", d_->sock);
 80a36b2:	2320      	movs	r3, #32
    stop();
        int connected = 0;
        if(Network.from(nif).ready())
        {
          sockaddr_t tSocketAddr;
          d_->sock = socket_create(AF_INET, SOCK_STREAM, IPPROTO_TCP, port, nif);
 80a36b4:	f8c8 0000 	str.w	r0, [r8]
          LOG(TRACE, "TCPClient socket=%x", d_->sock);
 80a36b8:	2700      	movs	r7, #0
 80a36ba:	9302      	str	r3, [sp, #8]
 80a36bc:	6973      	ldr	r3, [r6, #20]
 80a36be:	9703      	str	r7, [sp, #12]
 80a36c0:	681b      	ldr	r3, [r3, #0]
 80a36c2:	2001      	movs	r0, #1
 80a36c4:	9301      	str	r3, [sp, #4]
 80a36c6:	4b23      	ldr	r3, [pc, #140]	; (80a3754 <_ZN9TCPClient7connectE9IPAddresstm+0xd8>)
 80a36c8:	aa02      	add	r2, sp, #8
 80a36ca:	9300      	str	r3, [sp, #0]
 80a36cc:	4922      	ldr	r1, [pc, #136]	; (80a3758 <_ZN9TCPClient7connectE9IPAddresstm+0xdc>)
 80a36ce:	463b      	mov	r3, r7
 80a36d0:	f7ff fd0e 	bl	80a30f0 <log_message>

          if (socket_handle_valid(d_->sock))
 80a36d4:	6973      	ldr	r3, [r6, #20]
 80a36d6:	6818      	ldr	r0, [r3, #0]
 80a36d8:	f7ff fc62 	bl	80a2fa0 <socket_handle_valid>
 80a36dc:	2800      	cmp	r0, #0
 80a36de:	d036      	beq.n	80a374e <_ZN9TCPClient7connectE9IPAddresstm+0xd2>
          {
            flush_buffer();
 80a36e0:	4630      	mov	r0, r6
 80a36e2:	f7ff ff6d 	bl	80a35c0 <_ZN9TCPClient12flush_bufferEv>

            tSocketAddr.sa_family = AF_INET;
 80a36e6:	2302      	movs	r3, #2
 80a36e8:	f8ad 3008 	strh.w	r3, [sp, #8]

            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80a36ec:	0a2b      	lsrs	r3, r5, #8
 80a36ee:	f88d 300a 	strb.w	r3, [sp, #10]
            tSocketAddr.sa_data[1] = (port & 0x00FF);

            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 80a36f2:	79e3      	ldrb	r3, [r4, #7]
            tSocketAddr.sa_data[3] = ip[1];
            tSocketAddr.sa_data[4] = ip[2];
            tSocketAddr.sa_data[5] = ip[3];


            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a36f4:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
            tSocketAddr.sa_family = AF_INET;

            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
            tSocketAddr.sa_data[1] = (port & 0x00FF);

            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 80a36f8:	f88d 300c 	strb.w	r3, [sp, #12]
            tSocketAddr.sa_data[3] = ip[1];
 80a36fc:	79a3      	ldrb	r3, [r4, #6]
            flush_buffer();

            tSocketAddr.sa_family = AF_INET;

            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
            tSocketAddr.sa_data[1] = (port & 0x00FF);
 80a36fe:	f88d 500b 	strb.w	r5, [sp, #11]

            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
            tSocketAddr.sa_data[3] = ip[1];
 80a3702:	f88d 300d 	strb.w	r3, [sp, #13]
            tSocketAddr.sa_data[4] = ip[2];
 80a3706:	7963      	ldrb	r3, [r4, #5]
 80a3708:	f88d 300e 	strb.w	r3, [sp, #14]
            tSocketAddr.sa_data[5] = ip[3];
 80a370c:	f814 3f04 	ldrb.w	r3, [r4, #4]!
 80a3710:	f88d 300f 	strb.w	r3, [sp, #15]


            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a3714:	f7ff fcb4 	bl	80a3080 <HAL_NET_SetNetWatchDog>
            DEBUG("sock %d connect",d_->sock);
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80a3718:	6973      	ldr	r3, [r6, #20]
            tSocketAddr.sa_data[3] = ip[1];
            tSocketAddr.sa_data[4] = ip[2];
            tSocketAddr.sa_data[5] = ip[3];


            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a371a:	4605      	mov	r5, r0
            DEBUG("sock %d connect",d_->sock);
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80a371c:	2210      	movs	r2, #16
 80a371e:	a902      	add	r1, sp, #8
 80a3720:	6818      	ldr	r0, [r3, #0]
 80a3722:	f7ff fc4d 	bl	80a2fc0 <socket_connect>
 80a3726:	4680      	mov	r8, r0
            DEBUG("sock %d connected=%d",d_->sock, connected);
            HAL_NET_SetNetWatchDog(ot);
 80a3728:	4628      	mov	r0, r5
 80a372a:	f7ff fca9 	bl	80a3080 <HAL_NET_SetNetWatchDog>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 80a372e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a3730:	6975      	ldr	r5, [r6, #20]
 80a3732:	358c      	adds	r5, #140	; 0x8c
 80a3734:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a3736:	6823      	ldr	r3, [r4, #0]
 80a3738:	702b      	strb	r3, [r5, #0]
            d_->remoteIP = ip;
            if(!connected)
 80a373a:	f1b8 0f00 	cmp.w	r8, #0
 80a373e:	d005      	beq.n	80a374c <_ZN9TCPClient7connectE9IPAddresstm+0xd0>
            {
                stop();
 80a3740:	6833      	ldr	r3, [r6, #0]
 80a3742:	4630      	mov	r0, r6
 80a3744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a3746:	4798      	blx	r3
 80a3748:	4638      	mov	r0, r7
 80a374a:	e000      	b.n	80a374e <_ZN9TCPClient7connectE9IPAddresstm+0xd2>
            DEBUG("sock %d connect",d_->sock);
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
            DEBUG("sock %d connected=%d",d_->sock, connected);
            HAL_NET_SetNetWatchDog(ot);
            d_->remoteIP = ip;
            if(!connected)
 80a374c:	2001      	movs	r0, #1
                stop();
            }
          }
        }
        return connected;
}
 80a374e:	b00a      	add	sp, #40	; 0x28
 80a3750:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a3754:	080a9a4b 	.word	0x080a9a4b
 80a3758:	080a9a44 	.word	0x080a9a44

080a375c <_ZN9TCPClient6statusEv>:
  }
  return rv;
}

uint8_t TCPClient::status()
{
 80a375c:	b510      	push	{r4, lr}
  return (isOpen(d_->sock) && Network.from(nif).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80a375e:	6943      	ldr	r3, [r0, #20]
  }
  return rv;
}

uint8_t TCPClient::status()
{
 80a3760:	4604      	mov	r4, r0

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 80a3762:	6818      	ldr	r0, [r3, #0]
 80a3764:	f7ff fc1c 	bl	80a2fa0 <socket_handle_valid>
  return rv;
}

uint8_t TCPClient::status()
{
  return (isOpen(d_->sock) && Network.from(nif).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80a3768:	b908      	cbnz	r0, 80a376e <_ZN9TCPClient6statusEv+0x12>
 80a376a:	2000      	movs	r0, #0
 80a376c:	bd10      	pop	{r4, pc}
 80a376e:	6920      	ldr	r0, [r4, #16]
 80a3770:	f001 f9ec 	bl	80a4b4c <_ZN5spark12NetworkClass4fromEm>
 80a3774:	6803      	ldr	r3, [r0, #0]
 80a3776:	68db      	ldr	r3, [r3, #12]
 80a3778:	4798      	blx	r3
 80a377a:	2800      	cmp	r0, #0
 80a377c:	d0f5      	beq.n	80a376a <_ZN9TCPClient6statusEv+0xe>
 80a377e:	6963      	ldr	r3, [r4, #20]
 80a3780:	6818      	ldr	r0, [r3, #0]
 80a3782:	f7ff fc05 	bl	80a2f90 <socket_active_status>
 80a3786:	fab0 f080 	clz	r0, r0
 80a378a:	0940      	lsrs	r0, r0, #5
}
 80a378c:	bd10      	pop	{r4, pc}

080a378e <_ZN9TCPClient5writeEPKhjm>:
{
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout)
{
 80a378e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}

    size_t printNumber(unsigned long, uint8_t);
    size_t printNumber(unsigned long long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
 80a3792:	2500      	movs	r5, #0
 80a3794:	6045      	str	r5, [r0, #4]
 80a3796:	4604      	mov	r4, r0
 80a3798:	460e      	mov	r6, r1
 80a379a:	4617      	mov	r7, r2
 80a379c:	4698      	mov	r8, r3
    clearWriteError();
    int ret = status() ? socket_send_ex(d_->sock, buffer, size, 0, timeout, nullptr) : -1;
 80a379e:	f7ff ffdd 	bl	80a375c <_ZN9TCPClient6statusEv>
 80a37a2:	b160      	cbz	r0, 80a37be <_ZN9TCPClient5writeEPKhjm+0x30>
 80a37a4:	6960      	ldr	r0, [r4, #20]
 80a37a6:	9501      	str	r5, [sp, #4]
 80a37a8:	f8cd 8000 	str.w	r8, [sp]
 80a37ac:	462b      	mov	r3, r5
 80a37ae:	463a      	mov	r2, r7
 80a37b0:	4631      	mov	r1, r6
 80a37b2:	6800      	ldr	r0, [r0, #0]
 80a37b4:	f7ff fc24 	bl	80a3000 <socket_send_ex>
    if (ret < 0) {
 80a37b8:	2800      	cmp	r0, #0
 80a37ba:	da03      	bge.n	80a37c4 <_ZN9TCPClient5writeEPKhjm+0x36>
 80a37bc:	e001      	b.n	80a37c2 <_ZN9TCPClient5writeEPKhjm+0x34>
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout)
{
    clearWriteError();
    int ret = status() ? socket_send_ex(d_->sock, buffer, size, 0, timeout, nullptr) : -1;
 80a37be:	f04f 30ff 	mov.w	r0, #4294967295
 80a37c2:	6060      	str	r0, [r4, #4]

    /*
     * FIXME: We should not be returning negative numbers here
     */
    return ret;
}
 80a37c4:	b002      	add	sp, #8
 80a37c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a37ca <_ZN9TCPClient9connectedEv>:
  d_->remoteIP.clear();
  flush_buffer();
}

uint8_t TCPClient::connected()
{
 80a37ca:	b538      	push	{r3, r4, r5, lr}
 80a37cc:	4604      	mov	r4, r0
  // Wlan up, open and not in CLOSE_WAIT or data still in the local buffer
  bool rv = (status() || bufferCount());
 80a37ce:	f7ff ffc5 	bl	80a375c <_ZN9TCPClient6statusEv>
 80a37d2:	bb00      	cbnz	r0, 80a3816 <_ZN9TCPClient9connectedEv+0x4c>
 80a37d4:	6963      	ldr	r3, [r4, #20]
 80a37d6:	f8b3 1086 	ldrh.w	r1, [r3, #134]	; 0x86
 80a37da:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 80a37de:	4291      	cmp	r1, r2
 80a37e0:	d119      	bne.n	80a3816 <_ZN9TCPClient9connectedEv+0x4c>

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 80a37e2:	6818      	ldr	r0, [r3, #0]
 80a37e4:	f7ff fbdc 	bl	80a2fa0 <socket_handle_valid>
uint8_t TCPClient::connected()
{
  // Wlan up, open and not in CLOSE_WAIT or data still in the local buffer
  bool rv = (status() || bufferCount());
  // no data in the local buffer, Socket open but my be in CLOSE_WAIT yet the CC3000 may have data in its buffer
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
 80a37e8:	b128      	cbz	r0, 80a37f6 <_ZN9TCPClient9connectedEv+0x2c>
 80a37ea:	6963      	ldr	r3, [r4, #20]
 80a37ec:	6818      	ldr	r0, [r3, #0]
 80a37ee:	f7ff fbcf 	bl	80a2f90 <socket_active_status>
 80a37f2:	2801      	cmp	r0, #1
 80a37f4:	d001      	beq.n	80a37fa <_ZN9TCPClient9connectedEv+0x30>
}

uint8_t TCPClient::connected()
{
  // Wlan up, open and not in CLOSE_WAIT or data still in the local buffer
  bool rv = (status() || bufferCount());
 80a37f6:	2500      	movs	r5, #0
 80a37f8:	e00e      	b.n	80a3818 <_ZN9TCPClient9connectedEv+0x4e>
  // no data in the local buffer, Socket open but my be in CLOSE_WAIT yet the CC3000 may have data in its buffer
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
    {
      rv = available(); // Try CC3000
 80a37fa:	6823      	ldr	r3, [r4, #0]
 80a37fc:	4620      	mov	r0, r4
 80a37fe:	691b      	ldr	r3, [r3, #16]
 80a3800:	4798      	blx	r3
 80a3802:	2800      	cmp	r0, #0
 80a3804:	bf14      	ite	ne
 80a3806:	2501      	movne	r5, #1
 80a3808:	2500      	moveq	r5, #0
      if (!rv) {        // No more Data and CLOSE_WAIT
 80a380a:	d105      	bne.n	80a3818 <_ZN9TCPClient9connectedEv+0x4e>
          DEBUG("calling .stop(), no more data, in CLOSE_WAIT");
          stop();       // Close our side
 80a380c:	6823      	ldr	r3, [r4, #0]
 80a380e:	4620      	mov	r0, r4
 80a3810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a3812:	4798      	blx	r3
 80a3814:	e000      	b.n	80a3818 <_ZN9TCPClient9connectedEv+0x4e>
 80a3816:	2501      	movs	r5, #1
      }
  }
  return rv;
}
 80a3818:	4628      	mov	r0, r5
 80a381a:	bd38      	pop	{r3, r4, r5, pc}

080a381c <_ZN9TCPClientcvbEv>:
{
  return (isOpen(d_->sock) && Network.from(nif).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
}

TCPClient::operator bool()
{
 80a381c:	b508      	push	{r3, lr}
   return (status()!=0);
 80a381e:	f7ff ff9d 	bl	80a375c <_ZN9TCPClient6statusEv>
}
 80a3822:	3000      	adds	r0, #0
 80a3824:	bf18      	it	ne
 80a3826:	2001      	movne	r0, #1
 80a3828:	bd08      	pop	{r3, pc}

080a382a <_ZN9TCPClient4DataC1Em>:
IPAddress TCPClient::remoteIP()
{
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
 80a382a:	b510      	push	{r4, lr}
 80a382c:	4604      	mov	r4, r0
        : sock(sock),
          offset(0),
          total(0) {
 80a382e:	2300      	movs	r3, #0
 80a3830:	6001      	str	r1, [r0, #0]
 80a3832:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 80a3836:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
 80a383a:	3088      	adds	r0, #136	; 0x88
 80a383c:	f000 fe2a 	bl	80a4494 <_ZN9IPAddressC1Ev>
}
 80a3840:	4620      	mov	r0, r4
 80a3842:	bd10      	pop	{r4, pc}

080a3844 <_ZN9TCPClientC1Em>:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a3844:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
{
}

TCPClient::TCPClient(sock_handle_t sock) :
 80a3848:	b570      	push	{r4, r5, r6, lr}
 80a384a:	6082      	str	r2, [r0, #8]
        d_(std::make_shared<Data>(sock))
 80a384c:	4a14      	ldr	r2, [pc, #80]	; (80a38a0 <_ZN9TCPClientC1Em+0x5c>)
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a384e:	2300      	movs	r3, #0
 80a3850:	6043      	str	r3, [r0, #4]
 80a3852:	6002      	str	r2, [r0, #0]
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
 80a3854:	6143      	str	r3, [r0, #20]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
 80a3856:	6183      	str	r3, [r0, #24]

TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
{
}

TCPClient::TCPClient(sock_handle_t sock) :
 80a3858:	4604      	mov	r4, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80a385a:	20a0      	movs	r0, #160	; 0xa0
 80a385c:	460e      	mov	r6, r1
 80a385e:	f7fc fc1e 	bl	80a009e <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80a3862:	4605      	mov	r5, r0
 80a3864:	b110      	cbz	r0, 80a386c <_ZN9TCPClientC1Em+0x28>
 80a3866:	4631      	mov	r1, r6
 80a3868:	f7ff ffdf 	bl	80a382a <_ZN9TCPClient4DataC1Em>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80a386c:	2014      	movs	r0, #20
 80a386e:	f7fc fc16 	bl	80a009e <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
 80a3872:	4603      	mov	r3, r0
 80a3874:	b128      	cbz	r0, 80a3882 <_ZN9TCPClientC1Em+0x3e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 80a3876:	2201      	movs	r2, #1
 80a3878:	6042      	str	r2, [r0, #4]
 80a387a:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
 80a387c:	4a09      	ldr	r2, [pc, #36]	; (80a38a4 <_ZN9TCPClientC1Em+0x60>)
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
 80a387e:	6105      	str	r5, [r0, #16]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
 80a3880:	6002      	str	r2, [r0, #0]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 80a3882:	69a0      	ldr	r0, [r4, #24]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
 80a3884:	6165      	str	r5, [r4, #20]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 80a3886:	61a3      	str	r3, [r4, #24]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 80a3888:	b128      	cbz	r0, 80a3896 <_ZN9TCPClientC1Em+0x52>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a388a:	6843      	ldr	r3, [r0, #4]
 80a388c:	3b01      	subs	r3, #1
 80a388e:	6043      	str	r3, [r0, #4]
 80a3890:	b90b      	cbnz	r3, 80a3896 <_ZN9TCPClientC1Em+0x52>
 80a3892:	f7ff fe1b 	bl	80a34cc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.2.constprop.28>
        d_(std::make_shared<Data>(sock))
{
  flush_buffer();
 80a3896:	4620      	mov	r0, r4
 80a3898:	f7ff fe92 	bl	80a35c0 <_ZN9TCPClient12flush_bufferEv>
}
 80a389c:	4620      	mov	r0, r4
 80a389e:	bd70      	pop	{r4, r5, r6, pc}
 80a38a0:	080a9a00 	.word	0x080a9a00
 80a38a4:	080a99e4 	.word	0x080a99e4

080a38a8 <_ZN9TCPClientC1Ev>:
static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
}

TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
 80a38a8:	b510      	push	{r4, lr}
 80a38aa:	4604      	mov	r4, r0
 80a38ac:	f7ff fba0 	bl	80a2ff0 <socket_handle_invalid>
 80a38b0:	4601      	mov	r1, r0
 80a38b2:	4620      	mov	r0, r4
 80a38b4:	f7ff ffc6 	bl	80a3844 <_ZN9TCPClientC1Em>
{
}
 80a38b8:	4620      	mov	r0, r4
 80a38ba:	bd10      	pop	{r4, pc}

080a38bc <_ZN9TCPClient4DataD1Ev>:
        : sock(sock),
          offset(0),
          total(0) {
}

TCPClient::Data::~Data() {
 80a38bc:	b510      	push	{r4, lr}
 80a38be:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
 80a38c0:	6800      	ldr	r0, [r0, #0]
 80a38c2:	f7ff fb6d 	bl	80a2fa0 <socket_handle_valid>
 80a38c6:	b110      	cbz	r0, 80a38ce <_ZN9TCPClient4DataD1Ev+0x12>
        socket_close(sock);
 80a38c8:	6820      	ldr	r0, [r4, #0]
 80a38ca:	f7ff fb89 	bl	80a2fe0 <socket_close>
    }
}
 80a38ce:	4620      	mov	r0, r4
 80a38d0:	bd10      	pop	{r4, pc}

080a38d2 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
 80a38d2:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
 80a38d4:	6904      	ldr	r4, [r0, #16]
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
        void 
        destroy(_Up* __p) { __p->~_Up(); }
 80a38d6:	4620      	mov	r0, r4
 80a38d8:	f7ff fff0 	bl	80a38bc <_ZN9TCPClient4DataD1Ev>
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
      {
	if (_M_ptr != nullptr)
 80a38dc:	b124      	cbz	r4, 80a38e8 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x16>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
 80a38de:	4620      	mov	r0, r4
 80a38e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a38e4:	f7fc bbdf 	b.w	80a00a6 <_ZdlPv>
 80a38e8:	bd10      	pop	{r4, pc}
	...

080a38ec <_ZN9TCPClient7connectEPKctm>:
  flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif)
{
 80a38ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a38f0:	461f      	mov	r7, r3
    stop();
 80a38f2:	6803      	ldr	r3, [r0, #0]
  flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif)
{
 80a38f4:	b08f      	sub	sp, #60	; 0x3c
    stop();
 80a38f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif)
{
 80a38f8:	4606      	mov	r6, r0
 80a38fa:	460d      	mov	r5, r1
 80a38fc:	4690      	mov	r8, r2
    stop();
 80a38fe:	4798      	blx	r3
    if (Network.ready())
 80a3900:	4813      	ldr	r0, [pc, #76]	; (80a3950 <_ZN9TCPClient7connectEPKctm+0x64>)
 80a3902:	f001 f8d6 	bl	80a4ab2 <_ZN5spark12NetworkClass5readyEv>
 80a3906:	b300      	cbz	r0, 80a394a <_ZN9TCPClient7connectEPKctm+0x5e>
    {
        IPAddress ip_addr;
 80a3908:	a802      	add	r0, sp, #8
 80a390a:	f000 fdc3 	bl	80a4494 <_ZN9IPAddressC1Ev>
        if (inet_gethostbyname(host, strlen(host), ip_addr, nif, NULL) == 0) {
 80a390e:	4628      	mov	r0, r5
 80a3910:	f003 fbce 	bl	80a70b0 <strlen>
 80a3914:	2400      	movs	r4, #0
 80a3916:	b281      	uxth	r1, r0
 80a3918:	9400      	str	r4, [sp, #0]
 80a391a:	463b      	mov	r3, r7
 80a391c:	aa03      	add	r2, sp, #12
 80a391e:	4628      	mov	r0, r5
 80a3920:	f7ff fbb6 	bl	80a3090 <inet_gethostbyname>
 80a3924:	b980      	cbnz	r0, 80a3948 <_ZN9TCPClient7connectEPKctm+0x5c>
            return connect(ip_addr, port, nif);
 80a3926:	6833      	ldr	r3, [r6, #0]
 80a3928:	ad09      	add	r5, sp, #36	; 0x24
 80a392a:	f8d3 9020 	ldr.w	r9, [r3, #32]
 80a392e:	4b09      	ldr	r3, [pc, #36]	; (80a3954 <_ZN9TCPClient7connectEPKctm+0x68>)
 80a3930:	ac03      	add	r4, sp, #12
 80a3932:	9308      	str	r3, [sp, #32]
 80a3934:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a3936:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a3938:	6823      	ldr	r3, [r4, #0]
 80a393a:	4642      	mov	r2, r8
 80a393c:	702b      	strb	r3, [r5, #0]
 80a393e:	a908      	add	r1, sp, #32
 80a3940:	463b      	mov	r3, r7
 80a3942:	4630      	mov	r0, r6
 80a3944:	47c8      	blx	r9
 80a3946:	e000      	b.n	80a394a <_ZN9TCPClient7connectEPKctm+0x5e>
        } else {
            DEBUG("unable to get IP for hostname");
        }
    }

    return 0; // error, could not connect
 80a3948:	4620      	mov	r0, r4
}
 80a394a:	b00f      	add	sp, #60	; 0x3c
 80a394c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a3950:	20000594 	.word	0x20000594
 80a3954:	080a9b78 	.word	0x080a9b78

080a3958 <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
 80a3958:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a395c:	4680      	mov	r8, r0
 80a395e:	460d      	mov	r5, r1
 80a3960:	4617      	mov	r7, r2
 80a3962:	461e      	mov	r6, r3
    bool negative = val<0;
    if (negative) {
 80a3964:	2200      	movs	r2, #0
 80a3966:	2300      	movs	r3, #0
 80a3968:	4640      	mov	r0, r8
 80a396a:	4629      	mov	r1, r5
 80a396c:	f001 ff6c 	bl	80a5848 <__aeabi_dcmplt>
 80a3970:	b120      	cbz	r0, 80a397c <_Z4dtoadhPc+0x24>
        val = -val;
        *sout++ = '-';
 80a3972:	232d      	movs	r3, #45	; 0x2d
 80a3974:	7033      	strb	r3, [r6, #0]
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
    bool negative = val<0;
    if (negative) {
        val = -val;
 80a3976:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
        *sout++ = '-';
 80a397a:	3601      	adds	r6, #1
 80a397c:	2300      	movs	r3, #0
    }
    long scale = 1;
 80a397e:	2401      	movs	r4, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
 80a3980:	220a      	movs	r2, #10
    if (negative) {
        val = -val;
        *sout++ = '-';
    }
    long scale = 1;
    for (uint8_t i=0; i<prec; i++)
 80a3982:	b2d9      	uxtb	r1, r3
 80a3984:	428f      	cmp	r7, r1
 80a3986:	d902      	bls.n	80a398e <_Z4dtoadhPc+0x36>
        scale *= 10;
 80a3988:	4354      	muls	r4, r2
 80a398a:	3301      	adds	r3, #1
    if (negative) {
        val = -val;
        *sout++ = '-';
    }
    long scale = 1;
    for (uint8_t i=0; i<prec; i++)
 80a398c:	e7f9      	b.n	80a3982 <_Z4dtoadhPc+0x2a>
        scale *= 10;
    val *= scale;   // capture all the significant digits
 80a398e:	4620      	mov	r0, r4
 80a3990:	f001 fc82 	bl	80a5298 <__aeabi_i2d>
 80a3994:	4642      	mov	r2, r8
 80a3996:	462b      	mov	r3, r5
 80a3998:	f001 fce4 	bl	80a5364 <__aeabi_dmul>
 80a399c:	4682      	mov	sl, r0
 80a399e:	468b      	mov	fp, r1
    uint64_t fixed = uint64_t(val);
 80a39a0:	f002 fb3a 	bl	80a6018 <__aeabi_d2ulz>
 80a39a4:	4680      	mov	r8, r0
 80a39a6:	4689      	mov	r9, r1
    if ((val-fixed)>=0.5)    // round last digit
 80a39a8:	f001 fca6 	bl	80a52f8 <__aeabi_ul2d>
 80a39ac:	4602      	mov	r2, r0
 80a39ae:	460b      	mov	r3, r1
 80a39b0:	4650      	mov	r0, sl
 80a39b2:	4659      	mov	r1, fp
 80a39b4:	f001 fb22 	bl	80a4ffc <__aeabi_dsub>
 80a39b8:	2200      	movs	r2, #0
 80a39ba:	4b17      	ldr	r3, [pc, #92]	; (80a3a18 <_Z4dtoadhPc+0xc0>)
 80a39bc:	f001 ff58 	bl	80a5870 <__aeabi_dcmpge>
 80a39c0:	b118      	cbz	r0, 80a39ca <_Z4dtoadhPc+0x72>
        fixed++;
 80a39c2:	f118 0801 	adds.w	r8, r8, #1
 80a39c6:	f149 0900 	adc.w	r9, r9, #0

    unsigned long first = (unsigned long)(fixed / scale);
 80a39ca:	17e5      	asrs	r5, r4, #31
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
 80a39cc:	4622      	mov	r2, r4
 80a39ce:	462b      	mov	r3, r5
 80a39d0:	4640      	mov	r0, r8
 80a39d2:	4649      	mov	r1, r9
 80a39d4:	f002 fb08 	bl	80a5fe8 <__aeabi_uldivmod>
 80a39d8:	2301      	movs	r3, #1
 80a39da:	220a      	movs	r2, #10
 80a39dc:	4631      	mov	r1, r6
 80a39de:	f7ff fd04 	bl	80a33ea <ultoa>
    if (prec) {
 80a39e2:	b1af      	cbz	r7, 80a3a10 <_Z4dtoadhPc+0xb8>
        sout += strlen(sout);
 80a39e4:	4630      	mov	r0, r6
 80a39e6:	f003 fb63 	bl	80a70b0 <strlen>
        *sout++ = '.';
 80a39ea:	232e      	movs	r3, #46	; 0x2e
 80a39ec:	5433      	strb	r3, [r6, r0]
        ultoa(second, sout, 10, prec);
 80a39ee:	3001      	adds	r0, #1
 80a39f0:	4406      	add	r6, r0
 80a39f2:	4622      	mov	r2, r4
 80a39f4:	462b      	mov	r3, r5
 80a39f6:	4640      	mov	r0, r8
 80a39f8:	4649      	mov	r1, r9
 80a39fa:	f002 faf5 	bl	80a5fe8 <__aeabi_uldivmod>
 80a39fe:	463b      	mov	r3, r7
 80a3a00:	4610      	mov	r0, r2
 80a3a02:	4631      	mov	r1, r6
 80a3a04:	220a      	movs	r2, #10
    }
}
 80a3a06:	b001      	add	sp, #4
 80a3a08:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    ultoa(first, sout, 10, 1);
    if (prec) {
        sout += strlen(sout);
        *sout++ = '.';
        ultoa(second, sout, 10, prec);
 80a3a0c:	f7ff bced 	b.w	80a33ea <ultoa>
    }
}
 80a3a10:	b001      	add	sp, #4
 80a3a12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a3a16:	bf00      	nop
 80a3a18:	3fe00000 	.word	0x3fe00000

080a3a1c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a3a1c:	b510      	push	{r4, lr}
 80a3a1e:	4604      	mov	r4, r0
{
	free(buffer);
 80a3a20:	6800      	ldr	r0, [r0, #0]
 80a3a22:	f7ff fc31 	bl	80a3288 <free>
}
 80a3a26:	4620      	mov	r0, r4
 80a3a28:	bd10      	pop	{r4, pc}

080a3a2a <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a3a2a:	b510      	push	{r4, lr}
 80a3a2c:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a3a2e:	6800      	ldr	r0, [r0, #0]
 80a3a30:	b108      	cbz	r0, 80a3a36 <_ZN6String10invalidateEv+0xc>
 80a3a32:	f7ff fc29 	bl	80a3288 <free>
	buffer = NULL;
 80a3a36:	2300      	movs	r3, #0
 80a3a38:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 80a3a3a:	60a3      	str	r3, [r4, #8]
 80a3a3c:	6063      	str	r3, [r4, #4]
 80a3a3e:	bd10      	pop	{r4, pc}

080a3a40 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a3a40:	b538      	push	{r3, r4, r5, lr}
 80a3a42:	4604      	mov	r4, r0
 80a3a44:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a3a46:	6800      	ldr	r0, [r0, #0]
 80a3a48:	3101      	adds	r1, #1
 80a3a4a:	f7ff fc25 	bl	80a3298 <realloc>
	if (newbuffer) {
 80a3a4e:	b110      	cbz	r0, 80a3a56 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a3a50:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 80a3a54:	2001      	movs	r0, #1
	}
	return 0;
}
 80a3a56:	bd38      	pop	{r3, r4, r5, pc}

080a3a58 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a3a58:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a3a5a:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a3a5c:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a3a5e:	b113      	cbz	r3, 80a3a66 <_ZN6String7reserveEj+0xe>
 80a3a60:	6843      	ldr	r3, [r0, #4]
 80a3a62:	428b      	cmp	r3, r1
 80a3a64:	d207      	bcs.n	80a3a76 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 80a3a66:	4620      	mov	r0, r4
 80a3a68:	f7ff ffea 	bl	80a3a40 <_ZN6String12changeBufferEj>
 80a3a6c:	b120      	cbz	r0, 80a3a78 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 80a3a6e:	68a3      	ldr	r3, [r4, #8]
 80a3a70:	b90b      	cbnz	r3, 80a3a76 <_ZN6String7reserveEj+0x1e>
 80a3a72:	6822      	ldr	r2, [r4, #0]
 80a3a74:	7013      	strb	r3, [r2, #0]
 80a3a76:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 80a3a78:	bd10      	pop	{r4, pc}

080a3a7a <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a3a7a:	b570      	push	{r4, r5, r6, lr}
 80a3a7c:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a3a7e:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a3a80:	4604      	mov	r4, r0
 80a3a82:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a3a84:	f7ff ffe8 	bl	80a3a58 <_ZN6String7reserveEj>
 80a3a88:	b918      	cbnz	r0, 80a3a92 <_ZN6String4copyEPKcj+0x18>
		invalidate();
 80a3a8a:	4620      	mov	r0, r4
 80a3a8c:	f7ff ffcd 	bl	80a3a2a <_ZN6String10invalidateEv>
		return *this;
 80a3a90:	e009      	b.n	80a3aa6 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 80a3a92:	462a      	mov	r2, r5
 80a3a94:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 80a3a96:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a3a98:	6820      	ldr	r0, [r4, #0]
 80a3a9a:	f002 fda7 	bl	80a65ec <memcpy>
	buffer[len] = 0;
 80a3a9e:	6822      	ldr	r2, [r4, #0]
 80a3aa0:	68a3      	ldr	r3, [r4, #8]
 80a3aa2:	2100      	movs	r1, #0
 80a3aa4:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 80a3aa6:	4620      	mov	r0, r4
 80a3aa8:	bd70      	pop	{r4, r5, r6, pc}

080a3aaa <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a3aaa:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a3aac:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a3aae:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a3ab0:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a3ab2:	6043      	str	r3, [r0, #4]
	len = 0;
 80a3ab4:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a3ab6:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 80a3ab8:	460d      	mov	r5, r1
 80a3aba:	b139      	cbz	r1, 80a3acc <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 80a3abc:	4608      	mov	r0, r1
 80a3abe:	f003 faf7 	bl	80a70b0 <strlen>
 80a3ac2:	4629      	mov	r1, r5
 80a3ac4:	4602      	mov	r2, r0
 80a3ac6:	4620      	mov	r0, r4
 80a3ac8:	f7ff ffd7 	bl	80a3a7a <_ZN6String4copyEPKcj>
}
 80a3acc:	4620      	mov	r0, r4
 80a3ace:	bd38      	pop	{r3, r4, r5, pc}

080a3ad0 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 80a3ad0:	b538      	push	{r3, r4, r5, lr}
 80a3ad2:	4605      	mov	r5, r0
	if (buffer) {
 80a3ad4:	6800      	ldr	r0, [r0, #0]
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 80a3ad6:	460c      	mov	r4, r1
	if (buffer) {
 80a3ad8:	b160      	cbz	r0, 80a3af4 <_ZN6String4moveERS_+0x24>
		if (capacity >= rhs.len) {
 80a3ada:	686a      	ldr	r2, [r5, #4]
 80a3adc:	688b      	ldr	r3, [r1, #8]
 80a3ade:	429a      	cmp	r2, r3
 80a3ae0:	d306      	bcc.n	80a3af0 <_ZN6String4moveERS_+0x20>
			strcpy(buffer, rhs.buffer);
 80a3ae2:	6809      	ldr	r1, [r1, #0]
 80a3ae4:	f002 fdc8 	bl	80a6678 <strcpy>
			len = rhs.len;
 80a3ae8:	68a3      	ldr	r3, [r4, #8]
 80a3aea:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
 80a3aec:	2300      	movs	r3, #0
 80a3aee:	e00a      	b.n	80a3b06 <_ZN6String4moveERS_+0x36>
			return;
		} else {
			free(buffer);
 80a3af0:	f7ff fbca 	bl	80a3288 <free>
		}
	}
	buffer = rhs.buffer;
 80a3af4:	6823      	ldr	r3, [r4, #0]
 80a3af6:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
 80a3af8:	6863      	ldr	r3, [r4, #4]
 80a3afa:	606b      	str	r3, [r5, #4]
	len = rhs.len;
 80a3afc:	68a3      	ldr	r3, [r4, #8]
 80a3afe:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
 80a3b00:	2300      	movs	r3, #0
 80a3b02:	6023      	str	r3, [r4, #0]
	rhs.capacity = 0;
 80a3b04:	6063      	str	r3, [r4, #4]
	rhs.len = 0;
 80a3b06:	60a3      	str	r3, [r4, #8]
 80a3b08:	bd38      	pop	{r3, r4, r5, pc}

080a3b0a <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 80a3b0a:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
 80a3b0c:	b510      	push	{r4, lr}
 80a3b0e:	460b      	mov	r3, r1
 80a3b10:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 80a3b12:	d007      	beq.n	80a3b24 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 80a3b14:	6809      	ldr	r1, [r1, #0]
 80a3b16:	b119      	cbz	r1, 80a3b20 <_ZN6StringaSERKS_+0x16>
 80a3b18:	689a      	ldr	r2, [r3, #8]
 80a3b1a:	f7ff ffae 	bl	80a3a7a <_ZN6String4copyEPKcj>
 80a3b1e:	e001      	b.n	80a3b24 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
 80a3b20:	f7ff ff83 	bl	80a3a2a <_ZN6String10invalidateEv>

	return *this;
}
 80a3b24:	4620      	mov	r0, r4
 80a3b26:	bd10      	pop	{r4, pc}

080a3b28 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
 80a3b28:	b510      	push	{r4, lr}
 80a3b2a:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a3b2c:	2300      	movs	r3, #0
 80a3b2e:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a3b30:	6043      	str	r3, [r0, #4]
	len = 0;
 80a3b32:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a3b34:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
 80a3b36:	f7ff ffe8 	bl	80a3b0a <_ZN6StringaSERKS_>
}
 80a3b3a:	4620      	mov	r0, r4
 80a3b3c:	bd10      	pop	{r4, pc}

080a3b3e <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
 80a3b3e:	4288      	cmp	r0, r1
    return *this;
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
 80a3b40:	b510      	push	{r4, lr}
 80a3b42:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
 80a3b44:	d001      	beq.n	80a3b4a <_ZN6StringaSEOS_+0xc>
 80a3b46:	f7ff ffc3 	bl	80a3ad0 <_ZN6String4moveERS_>
	return *this;
}
 80a3b4a:	4620      	mov	r0, r4
 80a3b4c:	bd10      	pop	{r4, pc}

080a3b4e <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 80a3b4e:	b538      	push	{r3, r4, r5, lr}
 80a3b50:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a3b52:	460c      	mov	r4, r1
 80a3b54:	b141      	cbz	r1, 80a3b68 <_ZN6StringaSEPKc+0x1a>
 80a3b56:	4608      	mov	r0, r1
 80a3b58:	f003 faaa 	bl	80a70b0 <strlen>
 80a3b5c:	4621      	mov	r1, r4
 80a3b5e:	4602      	mov	r2, r0
 80a3b60:	4628      	mov	r0, r5
 80a3b62:	f7ff ff8a 	bl	80a3a7a <_ZN6String4copyEPKcj>
 80a3b66:	e001      	b.n	80a3b6c <_ZN6StringaSEPKc+0x1e>
	else invalidate();
 80a3b68:	f7ff ff5f 	bl	80a3a2a <_ZN6String10invalidateEv>

	return *this;
}
 80a3b6c:	4628      	mov	r0, r5
 80a3b6e:	bd38      	pop	{r3, r4, r5, pc}

080a3b70 <_ZN6StringC1Ehh>:
	buf[0] = c;
	buf[1] = 0;
	*this = buf;
}

String::String(unsigned char value, unsigned char base)
 80a3b70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80a3b72:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a3b74:	2300      	movs	r3, #0
 80a3b76:	6023      	str	r3, [r4, #0]
	capacity = 0;
 80a3b78:	6063      	str	r3, [r4, #4]
	len = 0;
 80a3b7a:	60a3      	str	r3, [r4, #8]
	flags = 0;
 80a3b7c:	7323      	strb	r3, [r4, #12]
	buf[0] = c;
	buf[1] = 0;
	*this = buf;
}

String::String(unsigned char value, unsigned char base)
 80a3b7e:	4608      	mov	r0, r1
{
	init();
	char buf[9];
	utoa(value, buf, base);
 80a3b80:	a901      	add	r1, sp, #4
 80a3b82:	f7ff fc70 	bl	80a3466 <utoa>
	*this = buf;
 80a3b86:	a901      	add	r1, sp, #4
 80a3b88:	4620      	mov	r0, r4
 80a3b8a:	f7ff ffe0 	bl	80a3b4e <_ZN6StringaSEPKc>
}
 80a3b8e:	4620      	mov	r0, r4
 80a3b90:	b004      	add	sp, #16
 80a3b92:	bd10      	pop	{r4, pc}

080a3b94 <_ZN6StringC1Eih>:

String::String(int value, unsigned char base)
 80a3b94:	b510      	push	{r4, lr}
 80a3b96:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a3b98:	2300      	movs	r3, #0
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
 80a3b9a:	b08a      	sub	sp, #40	; 0x28
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a3b9c:	6023      	str	r3, [r4, #0]
	capacity = 0;
 80a3b9e:	6063      	str	r3, [r4, #4]
	len = 0;
 80a3ba0:	60a3      	str	r3, [r4, #8]
	flags = 0;
 80a3ba2:	7323      	strb	r3, [r4, #12]
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
 80a3ba4:	4608      	mov	r0, r1
{
	init();
	char buf[34];
	itoa(value, buf, base);
 80a3ba6:	a901      	add	r1, sp, #4
 80a3ba8:	f7ff fc47 	bl	80a343a <itoa>
	*this = buf;
 80a3bac:	a901      	add	r1, sp, #4
 80a3bae:	4620      	mov	r0, r4
 80a3bb0:	f7ff ffcd 	bl	80a3b4e <_ZN6StringaSEPKc>
}
 80a3bb4:	4620      	mov	r0, r4
 80a3bb6:	b00a      	add	sp, #40	; 0x28
 80a3bb8:	bd10      	pop	{r4, pc}

080a3bba <_ZN6StringC1Ejh>:

String::String(unsigned int value, unsigned char base)
 80a3bba:	b510      	push	{r4, lr}
 80a3bbc:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a3bbe:	2300      	movs	r3, #0
	char buf[34];
	itoa(value, buf, base);
	*this = buf;
}

String::String(unsigned int value, unsigned char base)
 80a3bc0:	b08a      	sub	sp, #40	; 0x28
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a3bc2:	6023      	str	r3, [r4, #0]
	capacity = 0;
 80a3bc4:	6063      	str	r3, [r4, #4]
	len = 0;
 80a3bc6:	60a3      	str	r3, [r4, #8]
	flags = 0;
 80a3bc8:	7323      	strb	r3, [r4, #12]
	char buf[34];
	itoa(value, buf, base);
	*this = buf;
}

String::String(unsigned int value, unsigned char base)
 80a3bca:	4608      	mov	r0, r1
{
	init();
	char buf[33];
	utoa(value, buf, base);
 80a3bcc:	a901      	add	r1, sp, #4
 80a3bce:	f7ff fc4a 	bl	80a3466 <utoa>
	*this = buf;
 80a3bd2:	a901      	add	r1, sp, #4
 80a3bd4:	4620      	mov	r0, r4
 80a3bd6:	f7ff ffba 	bl	80a3b4e <_ZN6StringaSEPKc>
}
 80a3bda:	4620      	mov	r0, r4
 80a3bdc:	b00a      	add	sp, #40	; 0x28
 80a3bde:	bd10      	pop	{r4, pc}

080a3be0 <_ZN6StringC1Emh>:
	char buf[34];
	ltoa(value, buf, base);
	*this = buf;
}

String::String(unsigned long value, unsigned char base)
 80a3be0:	b510      	push	{r4, lr}
 80a3be2:	4604      	mov	r4, r0
 80a3be4:	b08a      	sub	sp, #40	; 0x28
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a3be6:	2300      	movs	r3, #0
 80a3be8:	6023      	str	r3, [r4, #0]
	capacity = 0;
 80a3bea:	6063      	str	r3, [r4, #4]
	len = 0;
 80a3bec:	60a3      	str	r3, [r4, #8]
	flags = 0;
 80a3bee:	7323      	strb	r3, [r4, #12]
	char buf[34];
	ltoa(value, buf, base);
	*this = buf;
}

String::String(unsigned long value, unsigned char base)
 80a3bf0:	4608      	mov	r0, r1
{
	init();
	char buf[33];
	ultoa(value, buf, base);
 80a3bf2:	2301      	movs	r3, #1
 80a3bf4:	a901      	add	r1, sp, #4
 80a3bf6:	f7ff fbf8 	bl	80a33ea <ultoa>
	*this = buf;
 80a3bfa:	a901      	add	r1, sp, #4
 80a3bfc:	4620      	mov	r0, r4
 80a3bfe:	f7ff ffa6 	bl	80a3b4e <_ZN6StringaSEPKc>
}
 80a3c02:	4620      	mov	r0, r4
 80a3c04:	b00a      	add	sp, #40	; 0x28
 80a3c06:	bd10      	pop	{r4, pc}

080a3c08 <_ZN6StringC1Efi>:

String::String(float value, int decimalPlaces)
 80a3c08:	b530      	push	{r4, r5, lr}
 80a3c0a:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a3c0c:	2300      	movs	r3, #0
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::String(float value, int decimalPlaces)
 80a3c0e:	b08b      	sub	sp, #44	; 0x2c
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a3c10:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a3c12:	6043      	str	r3, [r0, #4]
	len = 0;
 80a3c14:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a3c16:	7303      	strb	r3, [r0, #12]

String::String(float value, int decimalPlaces)
{
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
 80a3c18:	b2d5      	uxtb	r5, r2
 80a3c1a:	4608      	mov	r0, r1
 80a3c1c:	f001 fb4e 	bl	80a52bc <__aeabi_f2d>
 80a3c20:	ab01      	add	r3, sp, #4
 80a3c22:	462a      	mov	r2, r5
 80a3c24:	f7ff fe98 	bl	80a3958 <_Z4dtoadhPc>
        *this = buf;
 80a3c28:	a901      	add	r1, sp, #4
 80a3c2a:	4620      	mov	r0, r4
 80a3c2c:	f7ff ff8f 	bl	80a3b4e <_ZN6StringaSEPKc>
}
 80a3c30:	4620      	mov	r0, r4
 80a3c32:	b00b      	add	sp, #44	; 0x2c
 80a3c34:	bd30      	pop	{r4, r5, pc}

080a3c36 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
 80a3c36:	b570      	push	{r4, r5, r6, lr}
 80a3c38:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
 80a3c3a:	460e      	mov	r6, r1
 80a3c3c:	b909      	cbnz	r1, 80a3c42 <_ZN6String6concatEPKcj+0xc>
 80a3c3e:	2000      	movs	r0, #0
 80a3c40:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
 80a3c42:	b16a      	cbz	r2, 80a3c60 <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
 80a3c44:	6883      	ldr	r3, [r0, #8]
 80a3c46:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
 80a3c48:	4629      	mov	r1, r5
 80a3c4a:	f7ff ff05 	bl	80a3a58 <_ZN6String7reserveEj>
 80a3c4e:	2800      	cmp	r0, #0
 80a3c50:	d0f5      	beq.n	80a3c3e <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
 80a3c52:	6820      	ldr	r0, [r4, #0]
 80a3c54:	68a3      	ldr	r3, [r4, #8]
 80a3c56:	4631      	mov	r1, r6
 80a3c58:	4418      	add	r0, r3
 80a3c5a:	f002 fd0d 	bl	80a6678 <strcpy>
	len = newlen;
 80a3c5e:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
 80a3c60:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
 80a3c62:	bd70      	pop	{r4, r5, r6, pc}

080a3c64 <_ZN6String6concatERKS_>:
/*  concat                                   */
/*********************************************/

unsigned char String::concat(const String &s)
{
	return concat(s.buffer, s.len);
 80a3c64:	688a      	ldr	r2, [r1, #8]
 80a3c66:	6809      	ldr	r1, [r1, #0]
 80a3c68:	f7ff bfe5 	b.w	80a3c36 <_ZN6String6concatEPKcj>

080a3c6c <_ZN6String6concatEPKc>:
	len = newlen;
	return 1;
}

unsigned char String::concat(const char *cstr)
{
 80a3c6c:	b538      	push	{r3, r4, r5, lr}
 80a3c6e:	4605      	mov	r5, r0
	if (!cstr) return 0;
 80a3c70:	460c      	mov	r4, r1
	return concat(cstr, strlen(cstr));
}
 80a3c72:	4608      	mov	r0, r1
	return 1;
}

unsigned char String::concat(const char *cstr)
{
	if (!cstr) return 0;
 80a3c74:	b141      	cbz	r1, 80a3c88 <_ZN6String6concatEPKc+0x1c>
	return concat(cstr, strlen(cstr));
 80a3c76:	f003 fa1b 	bl	80a70b0 <strlen>
 80a3c7a:	4621      	mov	r1, r4
 80a3c7c:	4602      	mov	r2, r0
 80a3c7e:	4628      	mov	r0, r5
}
 80a3c80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
}

unsigned char String::concat(const char *cstr)
{
	if (!cstr) return 0;
	return concat(cstr, strlen(cstr));
 80a3c84:	f7ff bfd7 	b.w	80a3c36 <_ZN6String6concatEPKcj>
}
 80a3c88:	bd38      	pop	{r3, r4, r5, pc}

080a3c8a <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
 80a3c8a:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
 80a3c8c:	2300      	movs	r3, #0
}

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
 80a3c8e:	f88d 1004 	strb.w	r1, [sp, #4]
	buf[1] = 0;
	return concat(buf, 1);
 80a3c92:	2201      	movs	r2, #1
 80a3c94:	a901      	add	r1, sp, #4

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
 80a3c96:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
 80a3c9a:	f7ff ffcc 	bl	80a3c36 <_ZN6String6concatEPKcj>
}
 80a3c9e:	b003      	add	sp, #12
 80a3ca0:	f85d fb04 	ldr.w	pc, [sp], #4

080a3ca4 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 80a3ca4:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 80a3ca6:	688a      	ldr	r2, [r1, #8]
 80a3ca8:	6809      	ldr	r1, [r1, #0]
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 80a3caa:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 80a3cac:	f7ff ffc3 	bl	80a3c36 <_ZN6String6concatEPKcj>
 80a3cb0:	b910      	cbnz	r0, 80a3cb8 <_ZplRK15StringSumHelperRK6String+0x14>
 80a3cb2:	4620      	mov	r0, r4
 80a3cb4:	f7ff feb9 	bl	80a3a2a <_ZN6String10invalidateEv>
	return a;
}
 80a3cb8:	4620      	mov	r0, r4
 80a3cba:	bd10      	pop	{r4, pc}

080a3cbc <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
 80a3cbc:	b538      	push	{r3, r4, r5, lr}
 80a3cbe:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
 80a3cc0:	460d      	mov	r5, r1
 80a3cc2:	b141      	cbz	r1, 80a3cd6 <_ZplRK15StringSumHelperPKc+0x1a>
 80a3cc4:	4608      	mov	r0, r1
 80a3cc6:	f003 f9f3 	bl	80a70b0 <strlen>
 80a3cca:	4629      	mov	r1, r5
 80a3ccc:	4602      	mov	r2, r0
 80a3cce:	4620      	mov	r0, r4
 80a3cd0:	f7ff ffb1 	bl	80a3c36 <_ZN6String6concatEPKcj>
 80a3cd4:	b910      	cbnz	r0, 80a3cdc <_ZplRK15StringSumHelperPKc+0x20>
 80a3cd6:	4620      	mov	r0, r4
 80a3cd8:	f7ff fea7 	bl	80a3a2a <_ZN6String10invalidateEv>
	return a;
}
 80a3cdc:	4620      	mov	r0, r4
 80a3cde:	bd38      	pop	{r3, r4, r5, pc}

080a3ce0 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 80a3ce0:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
 80a3ce2:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 80a3ce4:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
 80a3ce6:	b912      	cbnz	r2, 80a3cee <_ZNK6String6equalsEPKc+0xe>
 80a3ce8:	b919      	cbnz	r1, 80a3cf2 <_ZNK6String6equalsEPKc+0x12>
 80a3cea:	2001      	movs	r0, #1
 80a3cec:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
 80a3cee:	b911      	cbnz	r1, 80a3cf6 <_ZNK6String6equalsEPKc+0x16>
 80a3cf0:	6803      	ldr	r3, [r0, #0]
 80a3cf2:	7818      	ldrb	r0, [r3, #0]
 80a3cf4:	e002      	b.n	80a3cfc <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
 80a3cf6:	6800      	ldr	r0, [r0, #0]
 80a3cf8:	f002 fcb4 	bl	80a6664 <strcmp>
 80a3cfc:	fab0 f080 	clz	r0, r0
 80a3d00:	0940      	lsrs	r0, r0, #5
}
 80a3d02:	bd08      	pop	{r3, pc}

080a3d04 <_ZN6StringixEj>:
}

char & String::operator[](unsigned int index)
{
	static char dummy_writable_char;
	if (index >= len || !buffer) {
 80a3d04:	6883      	ldr	r3, [r0, #8]
 80a3d06:	428b      	cmp	r3, r1
 80a3d08:	d901      	bls.n	80a3d0e <_ZN6StringixEj+0xa>
 80a3d0a:	6800      	ldr	r0, [r0, #0]
 80a3d0c:	b918      	cbnz	r0, 80a3d16 <_ZN6StringixEj+0x12>
		dummy_writable_char = 0;
 80a3d0e:	4803      	ldr	r0, [pc, #12]	; (80a3d1c <_ZN6StringixEj+0x18>)
 80a3d10:	2300      	movs	r3, #0
 80a3d12:	7003      	strb	r3, [r0, #0]
		return dummy_writable_char;
 80a3d14:	4770      	bx	lr
	}
	return buffer[index];
 80a3d16:	4408      	add	r0, r1
}
 80a3d18:	4770      	bx	lr
 80a3d1a:	bf00      	nop
 80a3d1c:	2000050c 	.word	0x2000050c

080a3d20 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
 80a3d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a3d22:	461d      	mov	r5, r3
	if (left > right) {
 80a3d24:	429a      	cmp	r2, r3
 80a3d26:	bf88      	it	hi
 80a3d28:	4613      	movhi	r3, r2
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
 80a3d2a:	460f      	mov	r7, r1
 80a3d2c:	4614      	mov	r4, r2
	if (left > right) {
 80a3d2e:	bf88      	it	hi
 80a3d30:	462c      	movhi	r4, r5
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
 80a3d32:	490b      	ldr	r1, [pc, #44]	; (80a3d60 <_ZNK6String9substringEjj+0x40>)
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
	if (left > right) {
 80a3d34:	bf88      	it	hi
 80a3d36:	461d      	movhi	r5, r3
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
 80a3d38:	4606      	mov	r6, r0
	if (left > right) {
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
 80a3d3a:	f7ff feb6 	bl	80a3aaa <_ZN6StringC1EPK19__FlashStringHelper>
	if (left > len) return out;
 80a3d3e:	68ba      	ldr	r2, [r7, #8]
 80a3d40:	4294      	cmp	r4, r2
 80a3d42:	d80a      	bhi.n	80a3d5a <_ZNK6String9substringEjj+0x3a>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
 80a3d44:	6839      	ldr	r1, [r7, #0]
 80a3d46:	4295      	cmp	r5, r2
 80a3d48:	bf94      	ite	ls
 80a3d4a:	ebc4 0205 	rsbls	r2, r4, r5
 80a3d4e:	ebc4 0202 	rsbhi	r2, r4, r2
 80a3d52:	4421      	add	r1, r4
 80a3d54:	4630      	mov	r0, r6
 80a3d56:	f7ff fe90 	bl	80a3a7a <_ZN6String4copyEPKcj>
	return out;
}
 80a3d5a:	4630      	mov	r0, r6
 80a3d5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a3d5e:	bf00      	nop
 80a3d60:	080a98e2 	.word	0x080a98e2

080a3d64 <_ZNK6String9substringEj>:
	}
	return found;
}

String String::substring( unsigned int left ) const
{
 80a3d64:	b510      	push	{r4, lr}
 80a3d66:	4604      	mov	r4, r0
	return substring(left, len);
 80a3d68:	688b      	ldr	r3, [r1, #8]
 80a3d6a:	f7ff ffd9 	bl	80a3d20 <_ZNK6String9substringEjj>
}
 80a3d6e:	4620      	mov	r0, r4
 80a3d70:	bd10      	pop	{r4, pc}

080a3d72 <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
 80a3d72:	6800      	ldr	r0, [r0, #0]
 80a3d74:	b108      	cbz	r0, 80a3d7a <_ZNK6String5toIntEv+0x8>
 80a3d76:	f002 bb2a 	b.w	80a63ce <atol>
	return 0;
}
 80a3d7a:	4770      	bx	lr

080a3d7c <_ZNK6String7toFloatEv>:


float String::toFloat(void) const
{
 80a3d7c:	b508      	push	{r3, lr}
	if (buffer) return float(atof(buffer));
 80a3d7e:	6800      	ldr	r0, [r0, #0]
 80a3d80:	b120      	cbz	r0, 80a3d8c <_ZNK6String7toFloatEv+0x10>
 80a3d82:	f002 fb21 	bl	80a63c8 <atof>
 80a3d86:	f001 fde5 	bl	80a5954 <__aeabi_d2f>
 80a3d8a:	bd08      	pop	{r3, pc}
	return 0;
 80a3d8c:	2000      	movs	r0, #0
}
 80a3d8e:	bd08      	pop	{r3, pc}

080a3d90 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a3d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a3d92:	4606      	mov	r6, r0
 80a3d94:	460d      	mov	r5, r1
 80a3d96:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a3d98:	2400      	movs	r4, #0
  while (size--) {
 80a3d9a:	42bd      	cmp	r5, r7
 80a3d9c:	d00c      	beq.n	80a3db8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a3d9e:	6833      	ldr	r3, [r6, #0]
 80a3da0:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a3da4:	689b      	ldr	r3, [r3, #8]
 80a3da6:	4630      	mov	r0, r6
 80a3da8:	4798      	blx	r3
     if (chunk>=0)
 80a3daa:	2800      	cmp	r0, #0
 80a3dac:	db01      	blt.n	80a3db2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a3dae:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a3db0:	e7f3      	b.n	80a3d9a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a3db2:	2c00      	cmp	r4, #0
 80a3db4:	bf08      	it	eq
 80a3db6:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a3db8:	4620      	mov	r0, r4
 80a3dba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a3dbc <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a3dbc:	b570      	push	{r4, r5, r6, lr}
 80a3dbe:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a3dc0:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a3dc2:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a3dc4:	b149      	cbz	r1, 80a3dda <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a3dc6:	f003 f973 	bl	80a70b0 <strlen>
 80a3dca:	682b      	ldr	r3, [r5, #0]
 80a3dcc:	4602      	mov	r2, r0
 80a3dce:	4621      	mov	r1, r4
 80a3dd0:	4628      	mov	r0, r5
    }
 80a3dd2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a3dd6:	68db      	ldr	r3, [r3, #12]
 80a3dd8:	4718      	bx	r3
    }
 80a3dda:	bd70      	pop	{r4, r5, r6, pc}

080a3ddc <_ZN5Print5printEPKc>:
 80a3ddc:	b508      	push	{r3, lr}
 80a3dde:	f7ff ffed 	bl	80a3dbc <_ZN5Print5writeEPKc>
 80a3de2:	bd08      	pop	{r3, pc}

080a3de4 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a3de4:	6803      	ldr	r3, [r0, #0]
 80a3de6:	689b      	ldr	r3, [r3, #8]
 80a3de8:	4718      	bx	r3

080a3dea <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a3dea:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a3dec:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a3dee:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a3df0:	f7ff fff8 	bl	80a3de4 <_ZN5Print5printEc>
  n += print('\n');
 80a3df4:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80a3df6:	4604      	mov	r4, r0
  n += print('\n');
 80a3df8:	4628      	mov	r0, r5
 80a3dfa:	f7ff fff3 	bl	80a3de4 <_ZN5Print5printEc>
  return n;
}
 80a3dfe:	4420      	add	r0, r4
 80a3e00:	bd38      	pop	{r3, r4, r5, pc}

080a3e02 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a3e02:	b538      	push	{r3, r4, r5, lr}
 80a3e04:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a3e06:	f7ff ffd9 	bl	80a3dbc <_ZN5Print5writeEPKc>
 80a3e0a:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 80a3e0c:	4628      	mov	r0, r5
 80a3e0e:	f7ff ffec 	bl	80a3dea <_ZN5Print7printlnEv>
  return n;
}
 80a3e12:	4420      	add	r0, r4
 80a3e14:	bd38      	pop	{r3, r4, r5, pc}

080a3e16 <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a3e16:	2a01      	cmp	r2, #1
 80a3e18:	bf98      	it	ls
 80a3e1a:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a3e1c:	b530      	push	{r4, r5, lr}
 80a3e1e:	460b      	mov	r3, r1
 80a3e20:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a3e22:	2100      	movs	r1, #0
 80a3e24:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a3e28:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   decltype(n) m = n;
   n /= base;
 80a3e2c:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
 80a3e30:	fb05 3312 	mls	r3, r5, r2, r3
 80a3e34:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a3e36:	2b09      	cmp	r3, #9
 80a3e38:	bf94      	ite	ls
 80a3e3a:	3330      	addls	r3, #48	; 0x30
 80a3e3c:	3337      	addhi	r3, #55	; 0x37
 80a3e3e:	b2db      	uxtb	r3, r3
 80a3e40:	4621      	mov	r1, r4
 80a3e42:	f804 3901 	strb.w	r3, [r4], #-1
 80a3e46:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a3e48:	2d00      	cmp	r5, #0
 80a3e4a:	d1ef      	bne.n	80a3e2c <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a3e4c:	f7ff ffb6 	bl	80a3dbc <_ZN5Print5writeEPKc>
}
 80a3e50:	b00b      	add	sp, #44	; 0x2c
 80a3e52:	bd30      	pop	{r4, r5, pc}

080a3e54 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a3e54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a3e58:	4619      	mov	r1, r3

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a3e5a:	4680      	mov	r8, r0
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a3e5c:	4610      	mov	r0, r2

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a3e5e:	4617      	mov	r7, r2
 80a3e60:	461e      	mov	r6, r3
 80a3e62:	f89d 5020 	ldrb.w	r5, [sp, #32]
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a3e66:	f001 fd17 	bl	80a5898 <__aeabi_dcmpun>
 80a3e6a:	b108      	cbz	r0, 80a3e70 <_ZN5Print10printFloatEdh+0x1c>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a3e6c:	494d      	ldr	r1, [pc, #308]	; (80a3fa4 <_ZN5Print10printFloatEdh+0x150>)
 80a3e6e:	e012      	b.n	80a3e96 <_ZN5Print10printFloatEdh+0x42>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
 80a3e70:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 80a3e74:	f04f 32ff 	mov.w	r2, #4294967295
 80a3e78:	4b4b      	ldr	r3, [pc, #300]	; (80a3fa8 <_ZN5Print10printFloatEdh+0x154>)
 80a3e7a:	4638      	mov	r0, r7
 80a3e7c:	4621      	mov	r1, r4
 80a3e7e:	f001 fd0b 	bl	80a5898 <__aeabi_dcmpun>
 80a3e82:	b968      	cbnz	r0, 80a3ea0 <_ZN5Print10printFloatEdh+0x4c>
 80a3e84:	f04f 32ff 	mov.w	r2, #4294967295
 80a3e88:	4b47      	ldr	r3, [pc, #284]	; (80a3fa8 <_ZN5Print10printFloatEdh+0x154>)
 80a3e8a:	4638      	mov	r0, r7
 80a3e8c:	4621      	mov	r1, r4
 80a3e8e:	f001 fce5 	bl	80a585c <__aeabi_dcmple>
 80a3e92:	b928      	cbnz	r0, 80a3ea0 <_ZN5Print10printFloatEdh+0x4c>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a3e94:	4945      	ldr	r1, [pc, #276]	; (80a3fac <_ZN5Print10printFloatEdh+0x158>)
 80a3e96:	4640      	mov	r0, r8
 80a3e98:	f7ff ff90 	bl	80a3dbc <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
 80a3e9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
 80a3ea0:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a3ea4:	4b42      	ldr	r3, [pc, #264]	; (80a3fb0 <_ZN5Print10printFloatEdh+0x15c>)
 80a3ea6:	4638      	mov	r0, r7
 80a3ea8:	4631      	mov	r1, r6
 80a3eaa:	f001 fceb 	bl	80a5884 <__aeabi_dcmpgt>
 80a3eae:	b108      	cbz	r0, 80a3eb4 <_ZN5Print10printFloatEdh+0x60>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a3eb0:	4940      	ldr	r1, [pc, #256]	; (80a3fb4 <_ZN5Print10printFloatEdh+0x160>)
 80a3eb2:	e7f0      	b.n	80a3e96 <_ZN5Print10printFloatEdh+0x42>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
 80a3eb4:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a3eb8:	4b3f      	ldr	r3, [pc, #252]	; (80a3fb8 <_ZN5Print10printFloatEdh+0x164>)
 80a3eba:	4638      	mov	r0, r7
 80a3ebc:	4631      	mov	r1, r6
 80a3ebe:	f001 fcc3 	bl	80a5848 <__aeabi_dcmplt>
 80a3ec2:	2800      	cmp	r0, #0
 80a3ec4:	d1f4      	bne.n	80a3eb0 <_ZN5Print10printFloatEdh+0x5c>

  // Handle negative numbers
  if (number < 0.0)
 80a3ec6:	2200      	movs	r2, #0
 80a3ec8:	2300      	movs	r3, #0
 80a3eca:	4638      	mov	r0, r7
 80a3ecc:	4631      	mov	r1, r6
 80a3ece:	f001 fcbb 	bl	80a5848 <__aeabi_dcmplt>
 80a3ed2:	b138      	cbz	r0, 80a3ee4 <_ZN5Print10printFloatEdh+0x90>
  {
     n += print('-');
 80a3ed4:	212d      	movs	r1, #45	; 0x2d
 80a3ed6:	4640      	mov	r0, r8
 80a3ed8:	f7ff ff84 	bl	80a3de4 <_ZN5Print5printEc>
     number = -number;
 80a3edc:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
 80a3ee0:	4604      	mov	r4, r0
 80a3ee2:	e000      	b.n	80a3ee6 <_ZN5Print10printFloatEdh+0x92>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
 80a3ee4:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 80a3ee6:	4935      	ldr	r1, [pc, #212]	; (80a3fbc <_ZN5Print10printFloatEdh+0x168>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
 80a3ee8:	f04f 0900 	mov.w	r9, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 80a3eec:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
 80a3eee:	fa5f f389 	uxtb.w	r3, r9
 80a3ef2:	429d      	cmp	r5, r3
 80a3ef4:	d906      	bls.n	80a3f04 <_ZN5Print10printFloatEdh+0xb0>
    rounding /= 10.0;
 80a3ef6:	2200      	movs	r2, #0
 80a3ef8:	4b31      	ldr	r3, [pc, #196]	; (80a3fc0 <_ZN5Print10printFloatEdh+0x16c>)
 80a3efa:	f001 fb5d 	bl	80a55b8 <__aeabi_ddiv>
 80a3efe:	f109 0901 	add.w	r9, r9, #1
 80a3f02:	e7f4      	b.n	80a3eee <_ZN5Print10printFloatEdh+0x9a>

  number += rounding;
 80a3f04:	463a      	mov	r2, r7
 80a3f06:	4633      	mov	r3, r6
 80a3f08:	f001 f87a 	bl	80a5000 <__adddf3>
 80a3f0c:	460f      	mov	r7, r1
 80a3f0e:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
 80a3f10:	f001 fd00 	bl	80a5914 <__aeabi_d2uiz>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
 80a3f14:	220a      	movs	r2, #10
 80a3f16:	4601      	mov	r1, r0
 80a3f18:	4681      	mov	r9, r0
 80a3f1a:	4640      	mov	r0, r8
 80a3f1c:	f7ff ff7b 	bl	80a3e16 <_ZN5Print11printNumberEmh>
  double remainder = number - (double)int_part;
  n += print(int_part);
 80a3f20:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
 80a3f22:	b3e5      	cbz	r5, 80a3f9e <_ZN5Print10printFloatEdh+0x14a>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
 80a3f24:	4648      	mov	r0, r9
 80a3f26:	f001 f9a7 	bl	80a5278 <__aeabi_ui2d>
 80a3f2a:	4602      	mov	r2, r0
 80a3f2c:	460b      	mov	r3, r1
 80a3f2e:	4630      	mov	r0, r6
 80a3f30:	4639      	mov	r1, r7
 80a3f32:	f001 f863 	bl	80a4ffc <__aeabi_dsub>
 80a3f36:	4606      	mov	r6, r0
 80a3f38:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a3f3a:	4640      	mov	r0, r8
 80a3f3c:	4921      	ldr	r1, [pc, #132]	; (80a3fc4 <_ZN5Print10printFloatEdh+0x170>)
 80a3f3e:	f7ff ff3d 	bl	80a3dbc <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
 80a3f42:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
 80a3f44:	2200      	movs	r2, #0
 80a3f46:	4b1e      	ldr	r3, [pc, #120]	; (80a3fc0 <_ZN5Print10printFloatEdh+0x16c>)
 80a3f48:	4630      	mov	r0, r6
 80a3f4a:	4639      	mov	r1, r7
 80a3f4c:	f001 fa0a 	bl	80a5364 <__aeabi_dmul>
 80a3f50:	4606      	mov	r6, r0
 80a3f52:	460f      	mov	r7, r1
    int toPrint = int(remainder);
 80a3f54:	f001 fcb6 	bl	80a58c4 <__aeabi_d2iz>
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
 80a3f58:	f1b0 0a00 	subs.w	sl, r0, #0
 80a3f5c:	da07      	bge.n	80a3f6e <_ZN5Print10printFloatEdh+0x11a>
            t = print('-');
 80a3f5e:	212d      	movs	r1, #45	; 0x2d
 80a3f60:	4640      	mov	r0, r8
 80a3f62:	f7ff ff3f 	bl	80a3de4 <_ZN5Print5printEc>
            val = -n;
 80a3f66:	f1ca 0100 	rsb	r1, sl, #0
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
            t = print('-');
 80a3f6a:	4681      	mov	r9, r0
 80a3f6c:	e002      	b.n	80a3f74 <_ZN5Print10printFloatEdh+0x120>
            val = -n;
        } else {
            val = n;
 80a3f6e:	4651      	mov	r1, sl
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
    } else {
        size_t t = 0;
 80a3f70:	f04f 0900 	mov.w	r9, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
 80a3f74:	220a      	movs	r2, #10
 80a3f76:	4640      	mov	r0, r8
 80a3f78:	f7ff ff4d 	bl	80a3e16 <_ZN5Print11printNumberEmh>
    n += print(toPrint);
 80a3f7c:	4448      	add	r0, r9
 80a3f7e:	4404      	add	r4, r0
    remainder -= toPrint;
 80a3f80:	4650      	mov	r0, sl
 80a3f82:	f001 f989 	bl	80a5298 <__aeabi_i2d>
 80a3f86:	4602      	mov	r2, r0
 80a3f88:	460b      	mov	r3, r1
 80a3f8a:	4630      	mov	r0, r6
 80a3f8c:	4639      	mov	r1, r7
 80a3f8e:	f001 f835 	bl	80a4ffc <__aeabi_dsub>
 80a3f92:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 80a3f94:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
 80a3f98:	4606      	mov	r6, r0
 80a3f9a:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 80a3f9c:	d1d2      	bne.n	80a3f44 <_ZN5Print10printFloatEdh+0xf0>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
 80a3f9e:	4620      	mov	r0, r4
 80a3fa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a3fa4:	080a9a5f 	.word	0x080a9a5f
 80a3fa8:	7fefffff 	.word	0x7fefffff
 80a3fac:	080a9a67 	.word	0x080a9a67
 80a3fb0:	41efffff 	.word	0x41efffff
 80a3fb4:	080a9a63 	.word	0x080a9a63
 80a3fb8:	c1efffff 	.word	0xc1efffff
 80a3fbc:	3fe00000 	.word	0x3fe00000
 80a3fc0:	40240000 	.word	0x40240000
 80a3fc4:	080a98cf 	.word	0x080a98cf

080a3fc8 <_ZN5Print5printEfi>:
{
  return write(c);
}

size_t Print::print(float n, int digits)
{
 80a3fc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a3fca:	4605      	mov	r5, r0
 80a3fcc:	4614      	mov	r4, r2
  return printFloat((double)n, digits);
 80a3fce:	4608      	mov	r0, r1
 80a3fd0:	f001 f974 	bl	80a52bc <__aeabi_f2d>
 80a3fd4:	b2e4      	uxtb	r4, r4
 80a3fd6:	4602      	mov	r2, r0
 80a3fd8:	9400      	str	r4, [sp, #0]
 80a3fda:	460b      	mov	r3, r1
 80a3fdc:	4628      	mov	r0, r5
 80a3fde:	f7ff ff39 	bl	80a3e54 <_ZN5Print10printFloatEdh>
}
 80a3fe2:	b003      	add	sp, #12
 80a3fe4:	bd30      	pop	{r4, r5, pc}

080a3fe6 <_ZN5Print7printlnEdi>:
{
    return println((double)num, digits);
}

size_t Print::println(double num, int digits)
{
 80a3fe6:	b537      	push	{r0, r1, r2, r4, r5, lr}
  return printFloat((double)n, digits);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
 80a3fe8:	f89d 1018 	ldrb.w	r1, [sp, #24]
{
    return println((double)num, digits);
}

size_t Print::println(double num, int digits)
{
 80a3fec:	4605      	mov	r5, r0
  return printFloat((double)n, digits);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
 80a3fee:	9100      	str	r1, [sp, #0]
 80a3ff0:	f7ff ff30 	bl	80a3e54 <_ZN5Print10printFloatEdh>
 80a3ff4:	4604      	mov	r4, r0
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
 80a3ff6:	4628      	mov	r0, r5
 80a3ff8:	f7ff fef7 	bl	80a3dea <_ZN5Print7printlnEv>
  return n;
}
 80a3ffc:	4420      	add	r0, r4
 80a3ffe:	b003      	add	sp, #12
 80a4000:	bd30      	pop	{r4, r5, pc}

080a4002 <_ZN5Print7printlnEfi>:
  n += println();
  return n;
}

size_t Print::println(float num, int digits)
{
 80a4002:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a4004:	4604      	mov	r4, r0
    return println((double)num, digits);
 80a4006:	4608      	mov	r0, r1
  n += println();
  return n;
}

size_t Print::println(float num, int digits)
{
 80a4008:	4615      	mov	r5, r2
    return println((double)num, digits);
 80a400a:	f001 f957 	bl	80a52bc <__aeabi_f2d>
 80a400e:	9500      	str	r5, [sp, #0]
 80a4010:	4602      	mov	r2, r0
 80a4012:	460b      	mov	r3, r1
 80a4014:	4620      	mov	r0, r4
 80a4016:	f7ff ffe6 	bl	80a3fe6 <_ZN5Print7printlnEdi>
}
 80a401a:	b003      	add	sp, #12
 80a401c:	bd30      	pop	{r4, r5, pc}

080a401e <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a401e:	2300      	movs	r3, #0
 80a4020:	461a      	mov	r2, r3
 80a4022:	4619      	mov	r1, r3
 80a4024:	6840      	ldr	r0, [r0, #4]
 80a4026:	f7ff b8bf 	b.w	80a31a8 <network_on>
	...

080a402c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a402c:	4a01      	ldr	r2, [pc, #4]	; (80a4034 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a402e:	4b02      	ldr	r3, [pc, #8]	; (80a4038 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a4030:	601a      	str	r2, [r3, #0]
 80a4032:	4770      	bx	lr
 80a4034:	080a9ae1 	.word	0x080a9ae1
 80a4038:	20000510 	.word	0x20000510

080a403c <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
 80a403c:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
 80a403e:	2000      	movs	r0, #0
 80a4040:	f7ff f90a 	bl	80a3258 <spark_sync_time_pending>
 80a4044:	b128      	cbz	r0, 80a4052 <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a4046:	f7ff f8ff 	bl	80a3248 <spark_cloud_flag_connected>
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
 80a404a:	f080 0001 	eor.w	r0, r0, #1
 80a404e:	b2c0      	uxtb	r0, r0
 80a4050:	bd08      	pop	{r3, pc}
 80a4052:	2001      	movs	r0, #1
    }
 80a4054:	bd08      	pop	{r3, pc}
	...

080a4058 <_ZN9TimeClass4zoneEf>:
	return HAL_RTC_Get_UnixTime()+time_zone_cache+dst_current_cache;
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
 80a4058:	b510      	push	{r4, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
 80a405a:	4909      	ldr	r1, [pc, #36]	; (80a4080 <_ZN9TimeClass4zoneEf+0x28>)
	return HAL_RTC_Get_UnixTime()+time_zone_cache+dst_current_cache;
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
 80a405c:	4604      	mov	r4, r0
	if(GMT_Offset < -12 || GMT_Offset > 14)
 80a405e:	f001 ff75 	bl	80a5f4c <__aeabi_fcmplt>
 80a4062:	b960      	cbnz	r0, 80a407e <_ZN9TimeClass4zoneEf+0x26>
 80a4064:	4907      	ldr	r1, [pc, #28]	; (80a4084 <_ZN9TimeClass4zoneEf+0x2c>)
 80a4066:	4620      	mov	r0, r4
 80a4068:	f001 ff8e 	bl	80a5f88 <__aeabi_fcmpgt>
 80a406c:	b938      	cbnz	r0, 80a407e <_ZN9TimeClass4zoneEf+0x26>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
 80a406e:	4906      	ldr	r1, [pc, #24]	; (80a4088 <_ZN9TimeClass4zoneEf+0x30>)
 80a4070:	4620      	mov	r0, r4
 80a4072:	f001 fdcd 	bl	80a5c10 <__aeabi_fmul>
 80a4076:	f001 ff91 	bl	80a5f9c <__aeabi_f2iz>
 80a407a:	4b04      	ldr	r3, [pc, #16]	; (80a408c <_ZN9TimeClass4zoneEf+0x34>)
 80a407c:	6018      	str	r0, [r3, #0]
 80a407e:	bd10      	pop	{r4, pc}
 80a4080:	c1400000 	.word	0xc1400000
 80a4084:	41600000 	.word	0x41600000
 80a4088:	45610000 	.word	0x45610000
 80a408c:	2000051c 	.word	0x2000051c

080a4090 <_ZN9TimeClass7timeStrEl>:
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 80a4090:	b537      	push	{r0, r1, r2, r4, r5, lr}
	t += time_zone_cache;
    t += dst_current_cache;
 80a4092:	4b0e      	ldr	r3, [pc, #56]	; (80a40cc <_ZN9TimeClass7timeStrEl+0x3c>)
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 80a4094:	4604      	mov	r4, r0
	t += time_zone_cache;
    t += dst_current_cache;
 80a4096:	681b      	ldr	r3, [r3, #0]
 80a4098:	a802      	add	r0, sp, #8
 80a409a:	4419      	add	r1, r3
 80a409c:	4b0c      	ldr	r3, [pc, #48]	; (80a40d0 <_ZN9TimeClass7timeStrEl+0x40>)
 80a409e:	681b      	ldr	r3, [r3, #0]
 80a40a0:	4419      	add	r1, r3
 80a40a2:	f840 1d04 	str.w	r1, [r0, #-4]!
	tm* calendar_time = localtime(&t);
 80a40a6:	f002 f9a5 	bl	80a63f4 <localtime>
        char* ascstr = asctime(calendar_time);
 80a40aa:	f002 f951 	bl	80a6350 <asctime>
 80a40ae:	4605      	mov	r5, r0
        int len = strlen(ascstr);
 80a40b0:	f002 fffe 	bl	80a70b0 <strlen>
        ascstr[len-1] = 0; // remove final newline
 80a40b4:	2300      	movs	r3, #0
 80a40b6:	4428      	add	r0, r5
 80a40b8:	f800 3c01 	strb.w	r3, [r0, #-1]
	return String(ascstr);
 80a40bc:	4629      	mov	r1, r5
 80a40be:	4620      	mov	r0, r4
 80a40c0:	f7ff fcf3 	bl	80a3aaa <_ZN6StringC1EPK19__FlashStringHelper>
}
 80a40c4:	4620      	mov	r0, r4
 80a40c6:	b003      	add	sp, #12
 80a40c8:	bd30      	pop	{r4, r5, pc}
 80a40ca:	bf00      	nop
 80a40cc:	2000051c 	.word	0x2000051c
 80a40d0:	20000518 	.word	0x20000518

080a40d4 <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 80a40d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a40d8:	b0a4      	sub	sp, #144	; 0x90
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 80a40da:	ac14      	add	r4, sp, #80	; 0x50
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 80a40dc:	4607      	mov	r7, r0
 80a40de:	4689      	mov	r9, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 80a40e0:	4620      	mov	r0, r4
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 80a40e2:	4611      	mov	r1, r2
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 80a40e4:	223f      	movs	r2, #63	; 0x3f
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 80a40e6:	461d      	mov	r5, r3
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 80a40e8:	f002 ffff 	bl	80a70ea <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
 80a40ec:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
 80a40ee:	4620      	mov	r0, r4
String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
 80a40f0:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
 80a40f4:	f002 ffdc 	bl	80a70b0 <strlen>
 80a40f8:	4680      	mov	r8, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
 80a40fa:	b925      	cbnz	r5, 80a4106 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        strcpy(time_zone_str, "Z");
 80a40fc:	4924      	ldr	r1, [pc, #144]	; (80a4190 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xbc>)
 80a40fe:	a803      	add	r0, sp, #12
 80a4100:	f002 faba 	bl	80a6678 <strcpy>
 80a4104:	e013      	b.n	80a412e <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x5a>
    }
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
 80a4106:	213c      	movs	r1, #60	; 0x3c
 80a4108:	fb95 f2f1 	sdiv	r2, r5, r1
 80a410c:	2a00      	cmp	r2, #0
 80a410e:	bfb8      	it	lt
 80a4110:	4252      	neglt	r2, r2
 80a4112:	fb92 f3f1 	sdiv	r3, r2, r1
 80a4116:	fb01 2213 	mls	r2, r1, r3, r2
 80a411a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80a411e:	9200      	str	r2, [sp, #0]
 80a4120:	fb95 f3f3 	sdiv	r3, r5, r3
 80a4124:	4a1b      	ldr	r2, [pc, #108]	; (80a4194 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xc0>)
 80a4126:	2110      	movs	r1, #16
 80a4128:	a803      	add	r0, sp, #12
 80a412a:	f7ff f8cd 	bl	80a32c8 <snprintf>
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 80a412e:	4625      	mov	r5, r4
 80a4130:	1b2e      	subs	r6, r5, r4
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
 80a4132:	f108 3aff 	add.w	sl, r8, #4294967295
 80a4136:	45b2      	cmp	sl, r6
 80a4138:	d91b      	bls.n	80a4172 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x9e>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
 80a413a:	782b      	ldrb	r3, [r5, #0]
 80a413c:	2b25      	cmp	r3, #37	; 0x25
 80a413e:	d116      	bne.n	80a416e <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x9a>
 80a4140:	786b      	ldrb	r3, [r5, #1]
 80a4142:	2b7a      	cmp	r3, #122	; 0x7a
 80a4144:	d113      	bne.n	80a416e <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x9a>
        {
            size_t tzlen = strlen(time_zone_str);
 80a4146:	a803      	add	r0, sp, #12
 80a4148:	f002 ffb2 	bl	80a70b0 <strlen>
 80a414c:	4680      	mov	r8, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
 80a414e:	4430      	add	r0, r6
 80a4150:	ebc6 020a 	rsb	r2, r6, sl
 80a4154:	1ca9      	adds	r1, r5, #2
 80a4156:	4420      	add	r0, r4
 80a4158:	f002 fa48 	bl	80a65ec <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
 80a415c:	4642      	mov	r2, r8
 80a415e:	a903      	add	r1, sp, #12
 80a4160:	4628      	mov	r0, r5
 80a4162:	f002 fa43 	bl	80a65ec <memcpy>
            len = strlen(format_str);
 80a4166:	4620      	mov	r0, r4
 80a4168:	f002 ffa2 	bl	80a70b0 <strlen>
 80a416c:	4680      	mov	r8, r0
 80a416e:	3501      	adds	r5, #1
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
 80a4170:	e7de      	b.n	80a4130 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x5c>
            len = strlen(format_str);
        }
    }

    char buf[50];
    strftime(buf, 50, format_str, calendar_time);
 80a4172:	464b      	mov	r3, r9
 80a4174:	4622      	mov	r2, r4
 80a4176:	2132      	movs	r1, #50	; 0x32
 80a4178:	a807      	add	r0, sp, #28
 80a417a:	f002 fae5 	bl	80a6748 <strftime>
    return String(buf);
 80a417e:	a907      	add	r1, sp, #28
 80a4180:	4638      	mov	r0, r7
 80a4182:	f7ff fc92 	bl	80a3aaa <_ZN6StringC1EPK19__FlashStringHelper>
}
 80a4186:	4638      	mov	r0, r7
 80a4188:	b024      	add	sp, #144	; 0x90
 80a418a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a418e:	bf00      	nop
 80a4190:	080aa19d 	.word	0x080aa19d
 80a4194:	080a9b47 	.word	0x080a9b47

080a4198 <_ZN9TimeClass6formatElPKc>:
        ascstr[len-1] = 0; // remove final newline
	return String(ascstr);
}

String TimeClass::format(time_t t, const char* format_spec)
{
 80a4198:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80a419a:	4605      	mov	r5, r0
 80a419c:	9201      	str	r2, [sp, #4]
    if (format_spec==NULL)
 80a419e:	461c      	mov	r4, r3
 80a41a0:	b913      	cbnz	r3, 80a41a8 <_ZN9TimeClass6formatElPKc+0x10>
        format_spec = this->format_spec;
 80a41a2:	4b12      	ldr	r3, [pc, #72]	; (80a41ec <_ZN9TimeClass6formatElPKc+0x54>)
 80a41a4:	681c      	ldr	r4, [r3, #0]

    if (!format_spec || !strcmp(format_spec,TIME_FORMAT_DEFAULT)) {
 80a41a6:	b12c      	cbz	r4, 80a41b4 <_ZN9TimeClass6formatElPKc+0x1c>
 80a41a8:	4b11      	ldr	r3, [pc, #68]	; (80a41f0 <_ZN9TimeClass6formatElPKc+0x58>)
 80a41aa:	4620      	mov	r0, r4
 80a41ac:	6819      	ldr	r1, [r3, #0]
 80a41ae:	f002 fa59 	bl	80a6664 <strcmp>
 80a41b2:	b920      	cbnz	r0, 80a41be <_ZN9TimeClass6formatElPKc+0x26>
        return timeStr(t);
 80a41b4:	9901      	ldr	r1, [sp, #4]
 80a41b6:	4628      	mov	r0, r5
 80a41b8:	f7ff ff6a 	bl	80a4090 <_ZN9TimeClass7timeStrEl>
 80a41bc:	e013      	b.n	80a41e6 <_ZN9TimeClass6formatElPKc+0x4e>
    }
    t += time_zone_cache;
 80a41be:	4f0d      	ldr	r7, [pc, #52]	; (80a41f4 <_ZN9TimeClass6formatElPKc+0x5c>)
    t += dst_current_cache;
 80a41c0:	9a01      	ldr	r2, [sp, #4]
 80a41c2:	683b      	ldr	r3, [r7, #0]
 80a41c4:	4e0c      	ldr	r6, [pc, #48]	; (80a41f8 <_ZN9TimeClass6formatElPKc+0x60>)
 80a41c6:	441a      	add	r2, r3
 80a41c8:	6833      	ldr	r3, [r6, #0]
 80a41ca:	a802      	add	r0, sp, #8
 80a41cc:	4413      	add	r3, r2
 80a41ce:	f840 3d04 	str.w	r3, [r0, #-4]!
    tm* calendar_time = localtime(&t);
 80a41d2:	f002 f90f 	bl	80a63f4 <localtime>
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
 80a41d6:	683a      	ldr	r2, [r7, #0]
 80a41d8:	6833      	ldr	r3, [r6, #0]
 80a41da:	4601      	mov	r1, r0
 80a41dc:	4413      	add	r3, r2
 80a41de:	4628      	mov	r0, r5
 80a41e0:	4622      	mov	r2, r4
 80a41e2:	f7ff ff77 	bl	80a40d4 <_ZN9TimeClass14timeFormatImplEP2tmPKci>
}
 80a41e6:	4628      	mov	r0, r5
 80a41e8:	b003      	add	sp, #12
 80a41ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a41ec:	20000514 	.word	0x20000514
 80a41f0:	2000000c 	.word	0x2000000c
 80a41f4:	2000051c 	.word	0x2000051c
 80a41f8:	20000518 	.word	0x20000518

080a41fc <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
 80a41fc:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
 80a41fe:	2000      	movs	r0, #0
 80a4200:	f7fe fe14 	bl	80a2e2c <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
 80a4204:	4604      	mov	r4, r0
 80a4206:	b968      	cbnz	r0, 80a4224 <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 80a4208:	f7fe ff7a 	bl	80a3100 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 80a420c:	2801      	cmp	r0, #1
 80a420e:	d10b      	bne.n	80a4228 <_ZN9TimeClass7isValidEv+0x2c>
 80a4210:	4620      	mov	r0, r4
 80a4212:	f7fe ff8d 	bl	80a3130 <system_thread_get_state>
 80a4216:	b938      	cbnz	r0, 80a4228 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
 80a4218:	f7ff ff10 	bl	80a403c <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80a421c:	b930      	cbnz	r0, 80a422c <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
 80a421e:	f7ff f803 	bl	80a3228 <spark_process>
 80a4222:	e7f9      	b.n	80a4218 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
 80a4224:	2001      	movs	r0, #1
 80a4226:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
 80a4228:	2000      	movs	r0, #0
 80a422a:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
 80a422c:	f7ff ff06 	bl	80a403c <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
 80a4230:	2000      	movs	r0, #0
 80a4232:	f7fe fdfb 	bl	80a2e2c <HAL_RTC_Time_Is_Valid>
 80a4236:	3000      	adds	r0, #0
 80a4238:	bf18      	it	ne
 80a423a:	2001      	movne	r0, #1
    }
    return rtcstate;
}
 80a423c:	bd10      	pop	{r4, pc}

080a423e <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
 80a423e:	b508      	push	{r3, lr}
    (void)isValid();
 80a4240:	f7ff ffdc 	bl	80a41fc <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
 80a4244:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
 80a4248:	f7fe bde8 	b.w	80a2e1c <HAL_RTC_Get_UnixTime>

080a424c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a424c:	4b02      	ldr	r3, [pc, #8]	; (80a4258 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a424e:	681a      	ldr	r2, [r3, #0]
 80a4250:	4b02      	ldr	r3, [pc, #8]	; (80a425c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a4252:	601a      	str	r2, [r3, #0]
 80a4254:	4770      	bx	lr
 80a4256:	bf00      	nop
 80a4258:	2000000c 	.word	0x2000000c
 80a425c:	20000514 	.word	0x20000514

080a4260 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a4260:	2100      	movs	r1, #0
 80a4262:	f7fe bf5d 	b.w	80a3120 <system_delay_ms>

080a4266 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a4266:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a4268:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a426a:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a426c:	b113      	cbz	r3, 80a4274 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a426e:	2203      	movs	r2, #3
 80a4270:	4601      	mov	r1, r0
 80a4272:	4798      	blx	r3
    }
 80a4274:	4620      	mov	r0, r4
 80a4276:	bd10      	pop	{r4, pc}

080a4278 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a4278:	b510      	push	{r4, lr}
 80a427a:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a427c:	f7ff fff3 	bl	80a4266 <_ZNSt14_Function_baseD1Ev>
 80a4280:	4620      	mov	r0, r4
 80a4282:	bd10      	pop	{r4, pc}

080a4284 <_ZN8RGBClass7controlEb>:
{
    return LED_RGB_IsOverRidden();
}

void RGBClass::control(bool override)
{
 80a4284:	b510      	push	{r4, lr}
 80a4286:	4604      	mov	r4, r0

RGBClass RGB;

bool RGBClass::controlled(void)
{
    return LED_RGB_IsOverRidden();
 80a4288:	f7fe ff2a 	bl	80a30e0 <LED_RGB_IsOverRidden>
}

void RGBClass::control(bool override)
{
    if (override == controlled()) {
 80a428c:	4284      	cmp	r4, r0
 80a428e:	d008      	beq.n	80a42a2 <_ZN8RGBClass7controlEb+0x1e>
        return;
    } else if (override) {
 80a4290:	b11c      	cbz	r4, 80a429a <_ZN8RGBClass7controlEb+0x16>
        LED_Signaling_Start();
    } else {
        LED_Signaling_Stop();
    }
}
 80a4292:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void RGBClass::control(bool override)
{
    if (override == controlled()) {
        return;
    } else if (override) {
        LED_Signaling_Start();
 80a4296:	f7fe bf13 	b.w	80a30c0 <LED_Signaling_Start>
    } else {
        LED_Signaling_Stop();
    }
}
 80a429a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (override == controlled()) {
        return;
    } else if (override) {
        LED_Signaling_Start();
    } else {
        LED_Signaling_Stop();
 80a429e:	f7fe bf17 	b.w	80a30d0 <LED_Signaling_Stop>
 80a42a2:	bd10      	pop	{r4, pc}

080a42a4 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a42a4:	4803      	ldr	r0, [pc, #12]	; (80a42b4 <_GLOBAL__sub_I_RGB+0x10>)
 80a42a6:	2300      	movs	r3, #0
 80a42a8:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a42aa:	4a03      	ldr	r2, [pc, #12]	; (80a42b8 <_GLOBAL__sub_I_RGB+0x14>)
 80a42ac:	4903      	ldr	r1, [pc, #12]	; (80a42bc <_GLOBAL__sub_I_RGB+0x18>)
 80a42ae:	f000 bd37 	b.w	80a4d20 <__aeabi_atexit>
 80a42b2:	bf00      	nop
 80a42b4:	20000524 	.word	0x20000524
 80a42b8:	200000fc 	.word	0x200000fc
 80a42bc:	080a4279 	.word	0x080a4279

080a42c0 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a42c0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a42c2:	4b14      	ldr	r3, [pc, #80]	; (80a4314 <serialEventRun+0x54>)
 80a42c4:	b133      	cbz	r3, 80a42d4 <serialEventRun+0x14>
 80a42c6:	f000 f99f 	bl	80a4608 <_Z16_fetch_usbserialv>
 80a42ca:	6803      	ldr	r3, [r0, #0]
 80a42cc:	691b      	ldr	r3, [r3, #16]
 80a42ce:	4798      	blx	r3
 80a42d0:	2800      	cmp	r0, #0
 80a42d2:	dc16      	bgt.n	80a4302 <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a42d4:	4b10      	ldr	r3, [pc, #64]	; (80a4318 <serialEventRun+0x58>)
 80a42d6:	b133      	cbz	r3, 80a42e6 <serialEventRun+0x26>
 80a42d8:	f000 fa4c 	bl	80a4774 <_Z22__fetch_global_Serial1v>
 80a42dc:	6803      	ldr	r3, [r0, #0]
 80a42de:	691b      	ldr	r3, [r3, #16]
 80a42e0:	4798      	blx	r3
 80a42e2:	2800      	cmp	r0, #0
 80a42e4:	dc10      	bgt.n	80a4308 <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a42e6:	4b0d      	ldr	r3, [pc, #52]	; (80a431c <serialEventRun+0x5c>)
 80a42e8:	b10b      	cbz	r3, 80a42ee <serialEventRun+0x2e>
 80a42ea:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a42ee:	4b0c      	ldr	r3, [pc, #48]	; (80a4320 <serialEventRun+0x60>)
 80a42f0:	b17b      	cbz	r3, 80a4312 <serialEventRun+0x52>
 80a42f2:	f000 f9b7 	bl	80a4664 <_Z17_fetch_usbserial1v>
 80a42f6:	6803      	ldr	r3, [r0, #0]
 80a42f8:	691b      	ldr	r3, [r3, #16]
 80a42fa:	4798      	blx	r3
 80a42fc:	2800      	cmp	r0, #0
 80a42fe:	dc06      	bgt.n	80a430e <serialEventRun+0x4e>
 80a4300:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a4302:	f3af 8000 	nop.w
 80a4306:	e7e5      	b.n	80a42d4 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a4308:	f3af 8000 	nop.w
 80a430c:	e7eb      	b.n	80a42e6 <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a430e:	f3af 8000 	nop.w
 80a4312:	bd08      	pop	{r3, pc}
	...

080a4324 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a4324:	b508      	push	{r3, lr}
	serialEventRun();
 80a4326:	f7ff ffcb 	bl	80a42c0 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a432a:	f7fe fd6f 	bl	80a2e0c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a432e:	4b01      	ldr	r3, [pc, #4]	; (80a4334 <_post_loop+0x10>)
 80a4330:	6018      	str	r0, [r3, #0]
 80a4332:	bd08      	pop	{r3, pc}
 80a4334:	2000059c 	.word	0x2000059c

080a4338 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a4338:	4802      	ldr	r0, [pc, #8]	; (80a4344 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a433a:	4a03      	ldr	r2, [pc, #12]	; (80a4348 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a433c:	4903      	ldr	r1, [pc, #12]	; (80a434c <_Z33system_initialize_user_backup_ramv+0x14>)
 80a433e:	1a12      	subs	r2, r2, r0
 80a4340:	f002 b954 	b.w	80a65ec <memcpy>
 80a4344:	40024000 	.word	0x40024000
 80a4348:	40024004 	.word	0x40024004
 80a434c:	080aa318 	.word	0x080aa318

080a4350 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a4350:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a4352:	2300      	movs	r3, #0
 80a4354:	9300      	str	r3, [sp, #0]
 80a4356:	461a      	mov	r2, r3
 80a4358:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a435c:	f7fe fefa 	bl	80a3154 <system_ctrl_set_result>
}
 80a4360:	b003      	add	sp, #12
 80a4362:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a4368 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a4368:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a436a:	8843      	ldrh	r3, [r0, #2]
 80a436c:	2b0a      	cmp	r3, #10
 80a436e:	d008      	beq.n	80a4382 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a4370:	2b50      	cmp	r3, #80	; 0x50
 80a4372:	d109      	bne.n	80a4388 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a4374:	4b09      	ldr	r3, [pc, #36]	; (80a439c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a4376:	681b      	ldr	r3, [r3, #0]
 80a4378:	b13b      	cbz	r3, 80a438a <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a437a:	b003      	add	sp, #12
 80a437c:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a4380:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a4382:	f7ff ffe5 	bl	80a4350 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a4386:	e006      	b.n	80a4396 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a4388:	2300      	movs	r3, #0
 80a438a:	9300      	str	r3, [sp, #0]
 80a438c:	461a      	mov	r2, r3
 80a438e:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a4392:	f7fe fedf 	bl	80a3154 <system_ctrl_set_result>
        break;
    }
}
 80a4396:	b003      	add	sp, #12
 80a4398:	f85d fb04 	ldr.w	pc, [sp], #4
 80a439c:	20000534 	.word	0x20000534

080a43a0 <module_user_init_hook>:

void module_user_init_hook()
{
 80a43a0:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a43a2:	4c10      	ldr	r4, [pc, #64]	; (80a43e4 <module_user_init_hook+0x44>)
 80a43a4:	4d10      	ldr	r5, [pc, #64]	; (80a43e8 <module_user_init_hook+0x48>)
 80a43a6:	6823      	ldr	r3, [r4, #0]
 80a43a8:	42ab      	cmp	r3, r5
 80a43aa:	4b10      	ldr	r3, [pc, #64]	; (80a43ec <module_user_init_hook+0x4c>)
 80a43ac:	bf0c      	ite	eq
 80a43ae:	2201      	moveq	r2, #1
 80a43b0:	2200      	movne	r2, #0
 80a43b2:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a43b4:	d002      	beq.n	80a43bc <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a43b6:	f7ff ffbf 	bl	80a4338 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a43ba:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a43bc:	f7fe fd1e 	bl	80a2dfc <HAL_RNG_GetRandomNumber>
 80a43c0:	4604      	mov	r4, r0
    srand(seed);
 80a43c2:	f002 f927 	bl	80a6614 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a43c6:	4b0a      	ldr	r3, [pc, #40]	; (80a43f0 <module_user_init_hook+0x50>)
 80a43c8:	b113      	cbz	r3, 80a43d0 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a43ca:	4620      	mov	r0, r4
 80a43cc:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a43d0:	2100      	movs	r1, #0
 80a43d2:	4807      	ldr	r0, [pc, #28]	; (80a43f0 <module_user_init_hook+0x50>)
 80a43d4:	f7fe ff48 	bl	80a3268 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a43d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a43dc:	2100      	movs	r1, #0
 80a43de:	4805      	ldr	r0, [pc, #20]	; (80a43f4 <module_user_init_hook+0x54>)
 80a43e0:	f7fe beae 	b.w	80a3140 <system_ctrl_set_app_request_handler>
 80a43e4:	40024000 	.word	0x40024000
 80a43e8:	9a271c1e 	.word	0x9a271c1e
 80a43ec:	20000538 	.word	0x20000538
 80a43f0:	00000000 	.word	0x00000000
 80a43f4:	080a4369 	.word	0x080a4369

080a43f8 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
}

} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
 80a43f8:	b510      	push	{r4, lr}
 80a43fa:	b088      	sub	sp, #32
 80a43fc:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 80a43fe:	4668      	mov	r0, sp
 80a4400:	f7ff fb53 	bl	80a3aaa <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
 80a4404:	4669      	mov	r1, sp
 80a4406:	a804      	add	r0, sp, #16
 80a4408:	f7ff fb8e 	bl	80a3b28 <_ZN6StringC1ERKS_>
 80a440c:	a804      	add	r0, sp, #16
 80a440e:	47a0      	blx	r4
 80a4410:	4604      	mov	r4, r0
 80a4412:	a804      	add	r0, sp, #16
 80a4414:	f7ff fb02 	bl	80a3a1c <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 80a4418:	4668      	mov	r0, sp
 80a441a:	f7ff faff 	bl	80a3a1c <_ZN6StringD1Ev>
    return (*fn)(p);
}
 80a441e:	4620      	mov	r0, r4
 80a4420:	b008      	add	sp, #32
 80a4422:	bd10      	pop	{r4, pc}

080a4424 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
 80a4424:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a4426:	4607      	mov	r7, r0
 80a4428:	460e      	mov	r6, r1
 80a442a:	4615      	mov	r5, r2
 80a442c:	b085      	sub	sp, #20
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
 80a442e:	2410      	movs	r4, #16
 80a4430:	4622      	mov	r2, r4
 80a4432:	2100      	movs	r1, #0
 80a4434:	4668      	mov	r0, sp
 80a4436:	f002 f8e4 	bl	80a6602 <memset>
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 80a443a:	2200      	movs	r2, #0
 80a443c:	4669      	mov	r1, sp
 80a443e:	4610      	mov	r0, r2
         size = sizeof(*this);
 80a4440:	f8ad 4000 	strh.w	r4, [sp]

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
 80a4444:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
 80a4446:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
 80a4448:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 80a444a:	f7fe fee5 	bl	80a3218 <spark_function>
}
 80a444e:	b005      	add	sp, #20
 80a4450:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a4452 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a4452:	4770      	bx	lr

080a4454 <_ZN9IPAddressD0Ev>:
 80a4454:	b510      	push	{r4, lr}
 80a4456:	4604      	mov	r4, r0
 80a4458:	2118      	movs	r1, #24
 80a445a:	f000 fc6f 	bl	80a4d3c <_ZdlPvj>
 80a445e:	4620      	mov	r0, r4
 80a4460:	bd10      	pop	{r4, pc}

080a4462 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a4462:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a4464:	460f      	mov	r7, r1
 80a4466:	f100 0608 	add.w	r6, r0, #8
 80a446a:	1d05      	adds	r5, r0, #4
 80a446c:	2400      	movs	r4, #0
 80a446e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a4472:	220a      	movs	r2, #10
 80a4474:	4638      	mov	r0, r7
 80a4476:	f7ff fcce 	bl	80a3e16 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a447a:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a447c:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a447e:	d007      	beq.n	80a4490 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a4480:	2c00      	cmp	r4, #0
 80a4482:	d0f4      	beq.n	80a446e <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a4484:	212e      	movs	r1, #46	; 0x2e
 80a4486:	4638      	mov	r0, r7
 80a4488:	f7ff fcac 	bl	80a3de4 <_ZN5Print5printEc>
 80a448c:	4404      	add	r4, r0
 80a448e:	e7ee      	b.n	80a446e <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a4490:	4620      	mov	r0, r4
 80a4492:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a4494 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a4494:	b510      	push	{r4, lr}
 80a4496:	4604      	mov	r4, r0
 80a4498:	4b04      	ldr	r3, [pc, #16]	; (80a44ac <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a449a:	2211      	movs	r2, #17
 80a449c:	f840 3b04 	str.w	r3, [r0], #4
 80a44a0:	2100      	movs	r1, #0
 80a44a2:	f002 f8ae 	bl	80a6602 <memset>
{
    clear();
}
 80a44a6:	4620      	mov	r0, r4
 80a44a8:	bd10      	pop	{r4, pc}
 80a44aa:	bf00      	nop
 80a44ac:	080a9b78 	.word	0x080a9b78

080a44b0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a44b0:	4603      	mov	r3, r0
 80a44b2:	4a07      	ldr	r2, [pc, #28]	; (80a44d0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a44b4:	b510      	push	{r4, lr}
 80a44b6:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a44ba:	f101 0210 	add.w	r2, r1, #16
 80a44be:	f851 4b04 	ldr.w	r4, [r1], #4
 80a44c2:	4291      	cmp	r1, r2
 80a44c4:	f843 4b04 	str.w	r4, [r3], #4
 80a44c8:	d1f9      	bne.n	80a44be <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a44ca:	780a      	ldrb	r2, [r1, #0]
 80a44cc:	701a      	strb	r2, [r3, #0]
}
 80a44ce:	bd10      	pop	{r4, pc}
 80a44d0:	080a9b78 	.word	0x080a9b78

080a44d4 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a44d4:	4a02      	ldr	r2, [pc, #8]	; (80a44e0 <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a44d6:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a44d8:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a44da:	2204      	movs	r2, #4
 80a44dc:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a44de:	4770      	bx	lr
 80a44e0:	080a9b78 	.word	0x080a9b78

080a44e4 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a44e4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a44e6:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a44ea:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a44ee:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a44f2:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a44f6:	2304      	movs	r3, #4
 80a44f8:	6041      	str	r1, [r0, #4]
 80a44fa:	7503      	strb	r3, [r0, #20]
 80a44fc:	bd10      	pop	{r4, pc}
	...

080a4500 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a4500:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a4502:	4d04      	ldr	r5, [pc, #16]	; (80a4514 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a4504:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a4506:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a450a:	9500      	str	r5, [sp, #0]
 80a450c:	f7ff ffea 	bl	80a44e4 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a4510:	b003      	add	sp, #12
 80a4512:	bd30      	pop	{r4, r5, pc}
 80a4514:	080a9b78 	.word	0x080a9b78

080a4518 <_ZN9IPAddressaSEPKh>:
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
 80a4518:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
 80a451a:	780d      	ldrb	r5, [r1, #0]
 80a451c:	788b      	ldrb	r3, [r1, #2]
 80a451e:	784a      	ldrb	r2, [r1, #1]
 80a4520:	78c9      	ldrb	r1, [r1, #3]
 80a4522:	9100      	str	r1, [sp, #0]
 80a4524:	4629      	mov	r1, r5
 80a4526:	f7ff ffdd 	bl	80a44e4 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
 80a452a:	b003      	add	sp, #12
 80a452c:	bd30      	pop	{r4, r5, pc}
	...

080a4530 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(uint32_t address)
{
    *this = address;
}

IPAddress::IPAddress(const uint8_t* address)
 80a4530:	b510      	push	{r4, lr}
 80a4532:	4604      	mov	r4, r0
 80a4534:	4b02      	ldr	r3, [pc, #8]	; (80a4540 <_ZN9IPAddressC1EPKh+0x10>)
 80a4536:	6003      	str	r3, [r0, #0]
{
    *this = address;
 80a4538:	f7ff ffee 	bl	80a4518 <_ZN9IPAddressaSEPKh>
}
 80a453c:	4620      	mov	r0, r4
 80a453e:	bd10      	pop	{r4, pc}
 80a4540:	080a9b78 	.word	0x080a9b78

080a4544 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a4544:	7441      	strb	r1, [r0, #17]
 80a4546:	4770      	bx	lr

080a4548 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a4548:	4770      	bx	lr

080a454a <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80a454a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a454c:	2100      	movs	r1, #0
 80a454e:	7c00      	ldrb	r0, [r0, #16]
 80a4550:	f7fe fd7e 	bl	80a3050 <HAL_USB_USART_Receive_Data>
}
 80a4554:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a4558:	bf28      	it	cs
 80a455a:	f04f 30ff 	movcs.w	r0, #4294967295
 80a455e:	bd08      	pop	{r3, pc}

080a4560 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80a4560:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a4562:	2101      	movs	r1, #1
 80a4564:	7c00      	ldrb	r0, [r0, #16]
 80a4566:	f7fe fd73 	bl	80a3050 <HAL_USB_USART_Receive_Data>
}
 80a456a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a456e:	bf28      	it	cs
 80a4570:	f04f 30ff 	movcs.w	r0, #4294967295
 80a4574:	bd08      	pop	{r3, pc}

080a4576 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80a4576:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a4578:	7c00      	ldrb	r0, [r0, #16]
 80a457a:	f7fe fd61 	bl	80a3040 <HAL_USB_USART_Available_Data_For_Write>
}
 80a457e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a4582:	bd08      	pop	{r3, pc}

080a4584 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80a4584:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a4586:	7c00      	ldrb	r0, [r0, #16]
 80a4588:	f7fe fd52 	bl	80a3030 <HAL_USB_USART_Available_Data>
}
 80a458c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a4590:	bd08      	pop	{r3, pc}

080a4592 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a4592:	7c00      	ldrb	r0, [r0, #16]
 80a4594:	f7fe bd6c 	b.w	80a3070 <HAL_USB_USART_Flush_Data>

080a4598 <_ZN9USBSerialD0Ev>:
 80a4598:	b510      	push	{r4, lr}
 80a459a:	4604      	mov	r4, r0
 80a459c:	2114      	movs	r1, #20
 80a459e:	f000 fbcd 	bl	80a4d3c <_ZdlPvj>
 80a45a2:	4620      	mov	r0, r4
 80a45a4:	bd10      	pop	{r4, pc}

080a45a6 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a45a6:	b538      	push	{r3, r4, r5, lr}
 80a45a8:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a45aa:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a45ac:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a45ae:	f7fe fd47 	bl	80a3040 <HAL_USB_USART_Available_Data_For_Write>
 80a45b2:	2800      	cmp	r0, #0
 80a45b4:	dc01      	bgt.n	80a45ba <_ZN9USBSerial5writeEh+0x14>
 80a45b6:	7c60      	ldrb	r0, [r4, #17]
 80a45b8:	b128      	cbz	r0, 80a45c6 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a45ba:	4629      	mov	r1, r5
 80a45bc:	7c20      	ldrb	r0, [r4, #16]
 80a45be:	f7fe fd4f 	bl	80a3060 <HAL_USB_USART_Send_Data>
 80a45c2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 80a45c6:	bd38      	pop	{r3, r4, r5, pc}

080a45c8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a45c8:	b510      	push	{r4, lr}
 80a45ca:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a45cc:	2300      	movs	r3, #0
 80a45ce:	6063      	str	r3, [r4, #4]
 80a45d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a45d4:	60a3      	str	r3, [r4, #8]
 80a45d6:	4b05      	ldr	r3, [pc, #20]	; (80a45ec <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a45d8:	4608      	mov	r0, r1
 80a45da:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a45dc:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a45de:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a45e0:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a45e2:	4611      	mov	r1, r2
 80a45e4:	f7fe fd14 	bl	80a3010 <HAL_USB_USART_Init>
}
 80a45e8:	4620      	mov	r0, r4
 80a45ea:	bd10      	pop	{r4, pc}
 80a45ec:	080a9b8c 	.word	0x080a9b8c

080a45f0 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a45f0:	2200      	movs	r2, #0
 80a45f2:	7c00      	ldrb	r0, [r0, #16]
 80a45f4:	f7fe bd14 	b.w	80a3020 <HAL_USB_USART_Begin>

080a45f8 <_Z19acquireSerialBufferv>:
 80a45f8:	b510      	push	{r4, lr}
 80a45fa:	4604      	mov	r4, r0
 80a45fc:	2214      	movs	r2, #20
 80a45fe:	2100      	movs	r1, #0
 80a4600:	f001 ffff 	bl	80a6602 <memset>
 80a4604:	4620      	mov	r0, r4
 80a4606:	bd10      	pop	{r4, pc}

080a4608 <_Z16_fetch_usbserialv>:

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a4608:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a460a:	4d0e      	ldr	r5, [pc, #56]	; (80a4644 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a460c:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a460e:	a801      	add	r0, sp, #4
 80a4610:	f7ff fff2 	bl	80a45f8 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a4614:	6829      	ldr	r1, [r5, #0]
 80a4616:	f011 0401 	ands.w	r4, r1, #1
 80a461a:	d110      	bne.n	80a463e <_Z16_fetch_usbserialv+0x36>
 80a461c:	4628      	mov	r0, r5
 80a461e:	f7fb fd46 	bl	80a00ae <__cxa_guard_acquire>
 80a4622:	b160      	cbz	r0, 80a463e <_Z16_fetch_usbserialv+0x36>
 80a4624:	aa01      	add	r2, sp, #4
 80a4626:	4621      	mov	r1, r4
 80a4628:	4807      	ldr	r0, [pc, #28]	; (80a4648 <_Z16_fetch_usbserialv+0x40>)
 80a462a:	f7ff ffcd 	bl	80a45c8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a462e:	4628      	mov	r0, r5
 80a4630:	f7fb fd42 	bl	80a00b8 <__cxa_guard_release>
 80a4634:	4a05      	ldr	r2, [pc, #20]	; (80a464c <_Z16_fetch_usbserialv+0x44>)
 80a4636:	4906      	ldr	r1, [pc, #24]	; (80a4650 <_Z16_fetch_usbserialv+0x48>)
 80a4638:	4803      	ldr	r0, [pc, #12]	; (80a4648 <_Z16_fetch_usbserialv+0x40>)
 80a463a:	f000 fb71 	bl	80a4d20 <__aeabi_atexit>
	return _usbserial;
}
 80a463e:	4802      	ldr	r0, [pc, #8]	; (80a4648 <_Z16_fetch_usbserialv+0x40>)
 80a4640:	b007      	add	sp, #28
 80a4642:	bd30      	pop	{r4, r5, pc}
 80a4644:	2000053c 	.word	0x2000053c
 80a4648:	20000544 	.word	0x20000544
 80a464c:	200000fc 	.word	0x200000fc
 80a4650:	080a4549 	.word	0x080a4549

080a4654 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a4654:	b510      	push	{r4, lr}
 80a4656:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a4658:	2214      	movs	r2, #20
 80a465a:	2100      	movs	r1, #0
 80a465c:	f001 ffd1 	bl	80a6602 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a4660:	4620      	mov	r0, r4
 80a4662:	bd10      	pop	{r4, pc}

080a4664 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a4664:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a4666:	4c0e      	ldr	r4, [pc, #56]	; (80a46a0 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a4668:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a466a:	a801      	add	r0, sp, #4
 80a466c:	f7ff fff2 	bl	80a4654 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a4670:	6823      	ldr	r3, [r4, #0]
 80a4672:	07db      	lsls	r3, r3, #31
 80a4674:	d410      	bmi.n	80a4698 <_Z17_fetch_usbserial1v+0x34>
 80a4676:	4620      	mov	r0, r4
 80a4678:	f7fb fd19 	bl	80a00ae <__cxa_guard_acquire>
 80a467c:	b160      	cbz	r0, 80a4698 <_Z17_fetch_usbserial1v+0x34>
 80a467e:	aa01      	add	r2, sp, #4
 80a4680:	2101      	movs	r1, #1
 80a4682:	4808      	ldr	r0, [pc, #32]	; (80a46a4 <_Z17_fetch_usbserial1v+0x40>)
 80a4684:	f7ff ffa0 	bl	80a45c8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a4688:	4620      	mov	r0, r4
 80a468a:	f7fb fd15 	bl	80a00b8 <__cxa_guard_release>
 80a468e:	4a06      	ldr	r2, [pc, #24]	; (80a46a8 <_Z17_fetch_usbserial1v+0x44>)
 80a4690:	4906      	ldr	r1, [pc, #24]	; (80a46ac <_Z17_fetch_usbserial1v+0x48>)
 80a4692:	4804      	ldr	r0, [pc, #16]	; (80a46a4 <_Z17_fetch_usbserial1v+0x40>)
 80a4694:	f000 fb44 	bl	80a4d20 <__aeabi_atexit>
  return _usbserial1;
}
 80a4698:	4802      	ldr	r0, [pc, #8]	; (80a46a4 <_Z17_fetch_usbserial1v+0x40>)
 80a469a:	b006      	add	sp, #24
 80a469c:	bd10      	pop	{r4, pc}
 80a469e:	bf00      	nop
 80a46a0:	20000540 	.word	0x20000540
 80a46a4:	20000558 	.word	0x20000558
 80a46a8:	200000fc 	.word	0x200000fc
 80a46ac:	080a4549 	.word	0x080a4549

080a46b0 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a46b0:	4770      	bx	lr

080a46b2 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a46b2:	7441      	strb	r1, [r0, #17]
 80a46b4:	4770      	bx	lr

080a46b6 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80a46b6:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80a46b8:	7c00      	ldrb	r0, [r0, #16]
 80a46ba:	f7fe fc1f 	bl	80a2efc <HAL_USART_Available_Data_For_Write>
}
 80a46be:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a46c2:	bd08      	pop	{r3, pc}

080a46c4 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a46c4:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80a46c6:	7c00      	ldrb	r0, [r0, #16]
 80a46c8:	f7fe fbf0 	bl	80a2eac <HAL_USART_Available_Data>
}
 80a46cc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a46d0:	bd08      	pop	{r3, pc}

080a46d2 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a46d2:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80a46d4:	7c00      	ldrb	r0, [r0, #16]
 80a46d6:	f7fe fbf9 	bl	80a2ecc <HAL_USART_Peek_Data>
}
 80a46da:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a46de:	bf28      	it	cs
 80a46e0:	f04f 30ff 	movcs.w	r0, #4294967295
 80a46e4:	bd08      	pop	{r3, pc}

080a46e6 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a46e6:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80a46e8:	7c00      	ldrb	r0, [r0, #16]
 80a46ea:	f7fe fbe7 	bl	80a2ebc <HAL_USART_Read_Data>
}
 80a46ee:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a46f2:	bf28      	it	cs
 80a46f4:	f04f 30ff 	movcs.w	r0, #4294967295
 80a46f8:	bd08      	pop	{r3, pc}

080a46fa <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a46fa:	7c00      	ldrb	r0, [r0, #16]
 80a46fc:	f7fe bbee 	b.w	80a2edc <HAL_USART_Flush_Data>

080a4700 <_ZN11USARTSerialD0Ev>:
 80a4700:	b510      	push	{r4, lr}
 80a4702:	4604      	mov	r4, r0
 80a4704:	2114      	movs	r1, #20
 80a4706:	f000 fb19 	bl	80a4d3c <_ZdlPvj>
 80a470a:	4620      	mov	r0, r4
 80a470c:	bd10      	pop	{r4, pc}

080a470e <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a470e:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a4710:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a4712:	4604      	mov	r4, r0
 80a4714:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a4716:	b925      	cbnz	r5, 80a4722 <_ZN11USARTSerial5writeEh+0x14>
 80a4718:	7c00      	ldrb	r0, [r0, #16]
 80a471a:	f7fe fbef 	bl	80a2efc <HAL_USART_Available_Data_For_Write>
 80a471e:	2800      	cmp	r0, #0
 80a4720:	dd05      	ble.n	80a472e <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a4722:	4631      	mov	r1, r6
 80a4724:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a4726:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a472a:	f7fe bbb7 	b.w	80a2e9c <HAL_USART_Write_Data>
  }
  return 0;
}
 80a472e:	4628      	mov	r0, r5
 80a4730:	bd70      	pop	{r4, r5, r6, pc}
	...

080a4734 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a4734:	b510      	push	{r4, lr}
 80a4736:	4604      	mov	r4, r0
 80a4738:	4608      	mov	r0, r1
 80a473a:	4611      	mov	r1, r2
 80a473c:	2200      	movs	r2, #0
 80a473e:	6062      	str	r2, [r4, #4]
 80a4740:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a4744:	60a2      	str	r2, [r4, #8]
 80a4746:	4a05      	ldr	r2, [pc, #20]	; (80a475c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a4748:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a474a:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a474c:	2201      	movs	r2, #1
 80a474e:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a4750:	461a      	mov	r2, r3
 80a4752:	f7fe fb9b 	bl	80a2e8c <HAL_USART_Init>
}
 80a4756:	4620      	mov	r0, r4
 80a4758:	bd10      	pop	{r4, pc}
 80a475a:	bf00      	nop
 80a475c:	080a9bbc 	.word	0x080a9bbc

080a4760 <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
 80a4760:	2300      	movs	r3, #0
 80a4762:	7c00      	ldrb	r0, [r0, #16]
 80a4764:	f7fe bbd2 	b.w	80a2f0c <HAL_USART_BeginConfig>

080a4768 <_ZN11USARTSerial5beginEm>:
}
// Public Methods //////////////////////////////////////////////////////////////

void USARTSerial::begin(unsigned long baud)
{
  begin(baud, SERIAL_8N1);
 80a4768:	2200      	movs	r2, #0
 80a476a:	f7ff bff9 	b.w	80a4760 <_ZN11USARTSerial5beginEmm>

080a476e <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a476e:	7c00      	ldrb	r0, [r0, #16]
 80a4770:	f7fe bbbc 	b.w	80a2eec <HAL_USART_Is_Enabled>

080a4774 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a4774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
#else
  if (!serial1_rx_buffer) {
 80a4776:	4c19      	ldr	r4, [pc, #100]	; (80a47dc <_Z22__fetch_global_Serial1v+0x68>)
 80a4778:	6825      	ldr	r5, [r4, #0]
 80a477a:	b94d      	cbnz	r5, 80a4790 <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new Ring_Buffer();
 80a477c:	2084      	movs	r0, #132	; 0x84
 80a477e:	f7fb fc8e 	bl	80a009e <_Znwj>
 80a4782:	4606      	mov	r6, r0
 80a4784:	b118      	cbz	r0, 80a478e <_Z22__fetch_global_Serial1v+0x1a>
 80a4786:	2284      	movs	r2, #132	; 0x84
 80a4788:	4629      	mov	r1, r5
 80a478a:	f001 ff3a 	bl	80a6602 <memset>
 80a478e:	6026      	str	r6, [r4, #0]
  }
  if (!serial1_tx_buffer) {
 80a4790:	4d13      	ldr	r5, [pc, #76]	; (80a47e0 <_Z22__fetch_global_Serial1v+0x6c>)
 80a4792:	682e      	ldr	r6, [r5, #0]
 80a4794:	b94e      	cbnz	r6, 80a47aa <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new Ring_Buffer();
 80a4796:	2084      	movs	r0, #132	; 0x84
 80a4798:	f7fb fc81 	bl	80a009e <_Znwj>
 80a479c:	4607      	mov	r7, r0
 80a479e:	b118      	cbz	r0, 80a47a8 <_Z22__fetch_global_Serial1v+0x34>
 80a47a0:	2284      	movs	r2, #132	; 0x84
 80a47a2:	4631      	mov	r1, r6
 80a47a4:	f001 ff2d 	bl	80a6602 <memset>
 80a47a8:	602f      	str	r7, [r5, #0]
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
 80a47aa:	4f0e      	ldr	r7, [pc, #56]	; (80a47e4 <_Z22__fetch_global_Serial1v+0x70>)
 80a47ac:	6839      	ldr	r1, [r7, #0]
 80a47ae:	f011 0601 	ands.w	r6, r1, #1
 80a47b2:	d111      	bne.n	80a47d8 <_Z22__fetch_global_Serial1v+0x64>
 80a47b4:	4638      	mov	r0, r7
 80a47b6:	f7fb fc7a 	bl	80a00ae <__cxa_guard_acquire>
 80a47ba:	b168      	cbz	r0, 80a47d8 <_Z22__fetch_global_Serial1v+0x64>
 80a47bc:	6822      	ldr	r2, [r4, #0]
 80a47be:	4631      	mov	r1, r6
 80a47c0:	682b      	ldr	r3, [r5, #0]
 80a47c2:	4809      	ldr	r0, [pc, #36]	; (80a47e8 <_Z22__fetch_global_Serial1v+0x74>)
 80a47c4:	f7ff ffb6 	bl	80a4734 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a47c8:	4638      	mov	r0, r7
 80a47ca:	f7fb fc75 	bl	80a00b8 <__cxa_guard_release>
 80a47ce:	4a07      	ldr	r2, [pc, #28]	; (80a47ec <_Z22__fetch_global_Serial1v+0x78>)
 80a47d0:	4907      	ldr	r1, [pc, #28]	; (80a47f0 <_Z22__fetch_global_Serial1v+0x7c>)
 80a47d2:	4805      	ldr	r0, [pc, #20]	; (80a47e8 <_Z22__fetch_global_Serial1v+0x74>)
 80a47d4:	f000 faa4 	bl	80a4d20 <__aeabi_atexit>
#endif
	return serial1;
}
 80a47d8:	4803      	ldr	r0, [pc, #12]	; (80a47e8 <_Z22__fetch_global_Serial1v+0x74>)
 80a47da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a47dc:	20000588 	.word	0x20000588
 80a47e0:	20000580 	.word	0x20000580
 80a47e4:	20000584 	.word	0x20000584
 80a47e8:	2000056c 	.word	0x2000056c
 80a47ec:	200000fc 	.word	0x200000fc
 80a47f0:	080a46b1 	.word	0x080a46b1

080a47f4 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
 80a47f4:	4770      	bx	lr

080a47f6 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a47f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a47f8:	4606      	mov	r6, r0
 80a47fa:	4615      	mov	r5, r2
 80a47fc:	460c      	mov	r4, r1
 80a47fe:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a4800:	42bc      	cmp	r4, r7
 80a4802:	d006      	beq.n	80a4812 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a4804:	6833      	ldr	r3, [r6, #0]
 80a4806:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a480a:	689b      	ldr	r3, [r3, #8]
 80a480c:	4630      	mov	r0, r6
 80a480e:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a4810:	e7f6      	b.n	80a4800 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a4812:	4628      	mov	r0, r5
 80a4814:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a4816 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a4816:	2200      	movs	r2, #0
 80a4818:	7c00      	ldrb	r0, [r0, #16]
 80a481a:	f7fe bb7f 	b.w	80a2f1c <HAL_I2C_Write_Data>

080a481e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a481e:	2100      	movs	r1, #0
 80a4820:	7c00      	ldrb	r0, [r0, #16]
 80a4822:	f7fe bb83 	b.w	80a2f2c <HAL_I2C_Available_Data>

080a4826 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a4826:	2100      	movs	r1, #0
 80a4828:	7c00      	ldrb	r0, [r0, #16]
 80a482a:	f7fe bb87 	b.w	80a2f3c <HAL_I2C_Read_Data>

080a482e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a482e:	2100      	movs	r1, #0
 80a4830:	7c00      	ldrb	r0, [r0, #16]
 80a4832:	f7fe bb8b 	b.w	80a2f4c <HAL_I2C_Peek_Data>

080a4836 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a4836:	2100      	movs	r1, #0
 80a4838:	7c00      	ldrb	r0, [r0, #16]
 80a483a:	f7fe bb8f 	b.w	80a2f5c <HAL_I2C_Flush_Data>

080a483e <_ZN7TwoWireD0Ev>:
 80a483e:	b510      	push	{r4, lr}
 80a4840:	4604      	mov	r4, r0
 80a4842:	2114      	movs	r1, #20
 80a4844:	f000 fa7a 	bl	80a4d3c <_ZdlPvj>
 80a4848:	4620      	mov	r0, r4
 80a484a:	bd10      	pop	{r4, pc}

080a484c <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
 80a484c:	b510      	push	{r4, lr}
 80a484e:	4604      	mov	r4, r0
 80a4850:	2300      	movs	r3, #0
 80a4852:	6063      	str	r3, [r4, #4]
 80a4854:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a4858:	60a3      	str	r3, [r4, #8]
 80a485a:	4b04      	ldr	r3, [pc, #16]	; (80a486c <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
 80a485c:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
 80a485e:	4608      	mov	r0, r1
 80a4860:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
 80a4862:	4611      	mov	r1, r2
 80a4864:	f7fe fb8a 	bl	80a2f7c <HAL_I2C_Init>
}
 80a4868:	4620      	mov	r0, r4
 80a486a:	bd10      	pop	{r4, pc}
 80a486c:	080a9bec 	.word	0x080a9bec

080a4870 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a4870:	2100      	movs	r1, #0
 80a4872:	7c00      	ldrb	r0, [r0, #16]
 80a4874:	f7fe bb7a 	b.w	80a2f6c <HAL_I2C_Is_Enabled>

080a4878 <_ZN10WiFiSignalD1Ev>:
    int rssi = 2;
    int qual = 0;

    WiFiSignal() {}
    WiFiSignal(const wlan_connected_info_t& inf);
    virtual ~WiFiSignal() {};
 80a4878:	4770      	bx	lr

080a487a <_ZNK10WiFiSignal19getAccessTechnologyEv>:
    return true;
}

hal_net_access_tech_t WiFiSignal::getAccessTechnology() const {
    return NET_ACCESS_TECHNOLOGY_WIFI;
}
 80a487a:	2001      	movs	r0, #1
 80a487c:	4770      	bx	lr
	...

080a4880 <_ZNK10WiFiSignal16getStrengthValueEv>:
        return inf_.strength / 65535.0f * 100.0f;
    }
    return -1.0f;
}

float WiFiSignal::getStrengthValue() const {
 80a4880:	b508      	push	{r3, lr}
    if (inf_.size != 0 && inf_.rssi != std::numeric_limits<int32_t>::min()) {
 80a4882:	8983      	ldrh	r3, [r0, #12]
 80a4884:	b11b      	cbz	r3, 80a488e <_ZNK10WiFiSignal16getStrengthValueEv+0xe>
 80a4886:	6900      	ldr	r0, [r0, #16]
 80a4888:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 80a488c:	d101      	bne.n	80a4892 <_ZNK10WiFiSignal16getStrengthValueEv+0x12>
        return inf_.rssi / 100.0f;
    }
    return 0.0f;
 80a488e:	2000      	movs	r0, #0
 80a4890:	bd08      	pop	{r3, pc}
    return -1.0f;
}

float WiFiSignal::getStrengthValue() const {
    if (inf_.size != 0 && inf_.rssi != std::numeric_limits<int32_t>::min()) {
        return inf_.rssi / 100.0f;
 80a4892:	f001 f969 	bl	80a5b68 <__aeabi_i2f>
 80a4896:	4902      	ldr	r1, [pc, #8]	; (80a48a0 <_ZNK10WiFiSignal16getStrengthValueEv+0x20>)
 80a4898:	f001 fa6e 	bl	80a5d78 <__aeabi_fdiv>
    }
    return 0.0f;
}
 80a489c:	bd08      	pop	{r3, pc}
 80a489e:	bf00      	nop
 80a48a0:	42c80000 	.word	0x42c80000

080a48a4 <_ZNK10WiFiSignal15getQualityValueEv>:
        return inf_.quality / 65535.0f * 100.0f;
    }
    return -1.0f;
}

float WiFiSignal::getQualityValue() const {
 80a48a4:	b508      	push	{r3, lr}
    if (inf_.size != 0 && inf_.snr != std::numeric_limits<int32_t>::min()) {
 80a48a6:	8983      	ldrh	r3, [r0, #12]
 80a48a8:	b11b      	cbz	r3, 80a48b2 <_ZNK10WiFiSignal15getQualityValueEv+0xe>
 80a48aa:	6980      	ldr	r0, [r0, #24]
 80a48ac:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 80a48b0:	d101      	bne.n	80a48b6 <_ZNK10WiFiSignal15getQualityValueEv+0x12>
        return inf_.snr / 100.0f;
    }
    return 0.0f;
 80a48b2:	2000      	movs	r0, #0
 80a48b4:	bd08      	pop	{r3, pc}
    return -1.0f;
}

float WiFiSignal::getQualityValue() const {
    if (inf_.size != 0 && inf_.snr != std::numeric_limits<int32_t>::min()) {
        return inf_.snr / 100.0f;
 80a48b6:	f001 f957 	bl	80a5b68 <__aeabi_i2f>
 80a48ba:	4902      	ldr	r1, [pc, #8]	; (80a48c4 <_ZNK10WiFiSignal15getQualityValueEv+0x20>)
 80a48bc:	f001 fa5c 	bl	80a5d78 <__aeabi_fdiv>
    }
    return 0.0f;
}
 80a48c0:	bd08      	pop	{r3, pc}
 80a48c2:	bf00      	nop
 80a48c4:	42c80000 	.word	0x42c80000

080a48c8 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a48c8:	2200      	movs	r2, #0
 80a48ca:	4611      	mov	r1, r2
 80a48cc:	6840      	ldr	r0, [r0, #4]
 80a48ce:	f7fe bc63 	b.w	80a3198 <network_ready>

080a48d2 <_ZN10WiFiSignalD0Ev>:
    int rssi = 2;
    int qual = 0;

    WiFiSignal() {}
    WiFiSignal(const wlan_connected_info_t& inf);
    virtual ~WiFiSignal() {};
 80a48d2:	b510      	push	{r4, lr}
 80a48d4:	4604      	mov	r4, r0
 80a48d6:	2124      	movs	r1, #36	; 0x24
 80a48d8:	f000 fa30 	bl	80a4d3c <_ZdlPvj>
 80a48dc:	4620      	mov	r0, r4
 80a48de:	bd10      	pop	{r4, pc}

080a48e0 <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a48e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a48e2:	4616      	mov	r6, r2
 80a48e4:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a48e6:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a48e8:	460f      	mov	r7, r1
 80a48ea:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a48ec:	2100      	movs	r1, #0
 80a48ee:	a803      	add	r0, sp, #12
 80a48f0:	f001 fe87 	bl	80a6602 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a48f4:	4630      	mov	r0, r6
 80a48f6:	f002 fbdb 	bl	80a70b0 <strlen>
 80a48fa:	2500      	movs	r5, #0
 80a48fc:	9500      	str	r5, [sp, #0]
 80a48fe:	b281      	uxth	r1, r0
 80a4900:	687b      	ldr	r3, [r7, #4]
 80a4902:	aa03      	add	r2, sp, #12
 80a4904:	4630      	mov	r0, r6
 80a4906:	f7fe fbc3 	bl	80a3090 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a490a:	b120      	cbz	r0, 80a4916 <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a490c:	4629      	mov	r1, r5
 80a490e:	4620      	mov	r0, r4
 80a4910:	f7ff fde0 	bl	80a44d4 <_ZN9IPAddressC1Em>
 80a4914:	e003      	b.n	80a491e <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a4916:	a903      	add	r1, sp, #12
 80a4918:	4620      	mov	r0, r4
 80a491a:	f7ff fdc9 	bl	80a44b0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a491e:	4620      	mov	r0, r4
 80a4920:	b009      	add	sp, #36	; 0x24
 80a4922:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a4924 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a4924:	2200      	movs	r2, #0
 80a4926:	4611      	mov	r1, r2
 80a4928:	6840      	ldr	r0, [r0, #4]
 80a492a:	f7fe bc55 	b.w	80a31d8 <network_listening>

080a492e <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a492e:	2200      	movs	r2, #0
 80a4930:	4611      	mov	r1, r2
 80a4932:	6840      	ldr	r0, [r0, #4]
 80a4934:	f7fe bc60 	b.w	80a31f8 <network_get_listen_timeout>

080a4938 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a4938:	2200      	movs	r2, #0
 80a493a:	6840      	ldr	r0, [r0, #4]
 80a493c:	f7fe bc54 	b.w	80a31e8 <network_set_listen_timeout>

080a4940 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a4940:	2200      	movs	r2, #0
 80a4942:	f081 0101 	eor.w	r1, r1, #1
 80a4946:	6840      	ldr	r0, [r0, #4]
 80a4948:	f7fe bc3e 	b.w	80a31c8 <network_listen>

080a494c <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a494c:	2300      	movs	r3, #0
 80a494e:	461a      	mov	r2, r3
 80a4950:	4619      	mov	r1, r3
 80a4952:	6840      	ldr	r0, [r0, #4]
 80a4954:	f7fe bc30 	b.w	80a31b8 <network_off>

080a4958 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a4958:	2200      	movs	r2, #0
 80a495a:	4611      	mov	r1, r2
 80a495c:	6840      	ldr	r0, [r0, #4]
 80a495e:	f7fe bc0b 	b.w	80a3178 <network_connecting>

080a4962 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a4962:	2200      	movs	r2, #0
 80a4964:	2102      	movs	r1, #2
 80a4966:	6840      	ldr	r0, [r0, #4]
 80a4968:	f7fe bc0e 	b.w	80a3188 <network_disconnect>

080a496c <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a496c:	2300      	movs	r3, #0
 80a496e:	461a      	mov	r2, r3
 80a4970:	6840      	ldr	r0, [r0, #4]
 80a4972:	f7fe bbf9 	b.w	80a3168 <network_connect>
	...

080a4978 <_ZNK10WiFiSignal10getQualityEv>:
        return inf_.rssi / 100.0f;
    }
    return 0.0f;
}

float WiFiSignal::getQuality() const {
 80a4978:	b508      	push	{r3, lr}
    if (inf_.size != 0 && inf_.quality >= 0) {
 80a497a:	8983      	ldrh	r3, [r0, #12]
 80a497c:	b15b      	cbz	r3, 80a4996 <_ZNK10WiFiSignal10getQualityEv+0x1e>
 80a497e:	6a00      	ldr	r0, [r0, #32]
 80a4980:	2800      	cmp	r0, #0
 80a4982:	db08      	blt.n	80a4996 <_ZNK10WiFiSignal10getQualityEv+0x1e>
        return inf_.quality / 65535.0f * 100.0f;
 80a4984:	f001 f8f0 	bl	80a5b68 <__aeabi_i2f>
 80a4988:	4904      	ldr	r1, [pc, #16]	; (80a499c <_ZNK10WiFiSignal10getQualityEv+0x24>)
 80a498a:	f001 f9f5 	bl	80a5d78 <__aeabi_fdiv>
 80a498e:	4904      	ldr	r1, [pc, #16]	; (80a49a0 <_ZNK10WiFiSignal10getQualityEv+0x28>)
 80a4990:	f001 f93e 	bl	80a5c10 <__aeabi_fmul>
 80a4994:	bd08      	pop	{r3, pc}
    }
    return -1.0f;
 80a4996:	4803      	ldr	r0, [pc, #12]	; (80a49a4 <_ZNK10WiFiSignal10getQualityEv+0x2c>)
}
 80a4998:	bd08      	pop	{r3, pc}
 80a499a:	bf00      	nop
 80a499c:	477fff00 	.word	0x477fff00
 80a49a0:	42c80000 	.word	0x42c80000
 80a49a4:	bf800000 	.word	0xbf800000

080a49a8 <_ZNK10WiFiSignal11getStrengthEv>:

hal_net_access_tech_t WiFiSignal::getAccessTechnology() const {
    return NET_ACCESS_TECHNOLOGY_WIFI;
}

float WiFiSignal::getStrength() const {
 80a49a8:	b508      	push	{r3, lr}
    if (inf_.size != 0 && inf_.strength >= 0) {
 80a49aa:	8983      	ldrh	r3, [r0, #12]
 80a49ac:	b15b      	cbz	r3, 80a49c6 <_ZNK10WiFiSignal11getStrengthEv+0x1e>
 80a49ae:	6940      	ldr	r0, [r0, #20]
 80a49b0:	2800      	cmp	r0, #0
 80a49b2:	db08      	blt.n	80a49c6 <_ZNK10WiFiSignal11getStrengthEv+0x1e>
        return inf_.strength / 65535.0f * 100.0f;
 80a49b4:	f001 f8d8 	bl	80a5b68 <__aeabi_i2f>
 80a49b8:	4904      	ldr	r1, [pc, #16]	; (80a49cc <_ZNK10WiFiSignal11getStrengthEv+0x24>)
 80a49ba:	f001 f9dd 	bl	80a5d78 <__aeabi_fdiv>
 80a49be:	4904      	ldr	r1, [pc, #16]	; (80a49d0 <_ZNK10WiFiSignal11getStrengthEv+0x28>)
 80a49c0:	f001 f926 	bl	80a5c10 <__aeabi_fmul>
 80a49c4:	bd08      	pop	{r3, pc}
    }
    return -1.0f;
 80a49c6:	4803      	ldr	r0, [pc, #12]	; (80a49d4 <_ZNK10WiFiSignal11getStrengthEv+0x2c>)
}
 80a49c8:	bd08      	pop	{r3, pc}
 80a49ca:	bf00      	nop
 80a49cc:	477fff00 	.word	0x477fff00
 80a49d0:	42c80000 	.word	0x42c80000
 80a49d4:	bf800000 	.word	0xbf800000

080a49d8 <_ZNK10WiFiSignalcvaEv>:
    : inf_(inf) {
}

WiFiSignal::operator int8_t() const {
    return this->rssi;
}
 80a49d8:	f990 0004 	ldrsb.w	r0, [r0, #4]
 80a49dc:	4770      	bx	lr

080a49de <_ZN10WiFiSignal17fromConnectedInfoERK21wlan_connected_info_t>:

bool WiFiSignal::fromConnectedInfo(const wlan_connected_info_t& inf) {
 80a49de:	b570      	push	{r4, r5, r6, lr}
    inf_ = inf;
 80a49e0:	460d      	mov	r5, r1

WiFiSignal::operator int8_t() const {
    return this->rssi;
}

bool WiFiSignal::fromConnectedInfo(const wlan_connected_info_t& inf) {
 80a49e2:	4606      	mov	r6, r0
    inf_ = inf;
 80a49e4:	f100 040c 	add.w	r4, r0, #12
 80a49e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a49ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a49ec:	e895 0003 	ldmia.w	r5, {r0, r1}
 80a49f0:	e884 0003 	stmia.w	r4, {r0, r1}
    this->rssi = inf_.rssi != std::numeric_limits<int32_t>::min() ? inf_.rssi / 100 : 2;
 80a49f4:	6933      	ldr	r3, [r6, #16]
    this->qual = inf_.snr != std::numeric_limits<int32_t>::min() ? inf_.snr / 100 : 0;
    return true;
}
 80a49f6:	2001      	movs	r0, #1
    return this->rssi;
}

bool WiFiSignal::fromConnectedInfo(const wlan_connected_info_t& inf) {
    inf_ = inf;
    this->rssi = inf_.rssi != std::numeric_limits<int32_t>::min() ? inf_.rssi / 100 : 2;
 80a49f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a49fc:	bf1a      	itte	ne
 80a49fe:	2264      	movne	r2, #100	; 0x64
 80a4a00:	fb93 f3f2 	sdivne	r3, r3, r2
 80a4a04:	2302      	moveq	r3, #2
 80a4a06:	6073      	str	r3, [r6, #4]
    this->qual = inf_.snr != std::numeric_limits<int32_t>::min() ? inf_.snr / 100 : 0;
 80a4a08:	69b3      	ldr	r3, [r6, #24]
 80a4a0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a4a0e:	bf1a      	itte	ne
 80a4a10:	2264      	movne	r2, #100	; 0x64
 80a4a12:	fb93 f3f2 	sdivne	r3, r3, r2
 80a4a16:	2300      	moveq	r3, #0
 80a4a18:	60b3      	str	r3, [r6, #8]
    return true;
}
 80a4a1a:	bd70      	pop	{r4, r5, r6, pc}

080a4a1c <_ZN5spark9WiFiClass4RSSIEv>:
    int WiFiClass::getCredentials(WiFiAccessPoint* results, size_t result_count) {
        APList apList(results, result_count);
        return apList.start();
    }

    WiFiSignal WiFiClass::RSSI() {
 80a4a1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a4a20:	4688      	mov	r8, r1
public:
    // In order to be compatible with CellularSignal
    int rssi = 2;
    int qual = 0;

    WiFiSignal() {}
 80a4a22:	4b16      	ldr	r3, [pc, #88]	; (80a4a7c <_ZN5spark9WiFiClass4RSSIEv+0x60>)
 80a4a24:	2500      	movs	r5, #0
 80a4a26:	2702      	movs	r7, #2
 80a4a28:	2618      	movs	r6, #24
 80a4a2a:	b086      	sub	sp, #24
 80a4a2c:	6003      	str	r3, [r0, #0]
 80a4a2e:	6047      	str	r7, [r0, #4]
 80a4a30:	6085      	str	r5, [r0, #8]
 80a4a32:	4632      	mov	r2, r6
 80a4a34:	4629      	mov	r1, r5
 80a4a36:	4604      	mov	r4, r0
 80a4a38:	300c      	adds	r0, #12
 80a4a3a:	f001 fde2 	bl	80a6602 <memset>
        WiFiSignal sig;
        if (!network_ready(*this, 0, NULL)) {
 80a4a3e:	462a      	mov	r2, r5
 80a4a40:	4629      	mov	r1, r5
 80a4a42:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80a4a46:	f7fe fba7 	bl	80a3198 <network_ready>
 80a4a4a:	b190      	cbz	r0, 80a4a72 <_ZN5spark9WiFiClass4RSSIEv+0x56>
            return sig;
        }

        wlan_connected_info_t info = {0};
 80a4a4c:	4632      	mov	r2, r6
 80a4a4e:	4629      	mov	r1, r5
 80a4a50:	4668      	mov	r0, sp
 80a4a52:	f001 fdd6 	bl	80a6602 <memset>
        info.size = sizeof(info);
        int r = wlan_connected_info(nullptr, &info, nullptr);
 80a4a56:	462a      	mov	r2, r5
 80a4a58:	4669      	mov	r1, sp
 80a4a5a:	4628      	mov	r0, r5
        if (!network_ready(*this, 0, NULL)) {
            return sig;
        }

        wlan_connected_info_t info = {0};
        info.size = sizeof(info);
 80a4a5c:	f8ad 6000 	strh.w	r6, [sp]
        int r = wlan_connected_info(nullptr, &info, nullptr);
 80a4a60:	f7fe fb26 	bl	80a30b0 <wlan_connected_info>
        if (r == 0) {
 80a4a64:	b920      	cbnz	r0, 80a4a70 <_ZN5spark9WiFiClass4RSSIEv+0x54>
            sig.fromConnectedInfo(info);
 80a4a66:	4669      	mov	r1, sp
 80a4a68:	4620      	mov	r0, r4
 80a4a6a:	f7ff ffb8 	bl	80a49de <_ZN10WiFiSignal17fromConnectedInfoERK21wlan_connected_info_t>
            return sig;
 80a4a6e:	e000      	b.n	80a4a72 <_ZN5spark9WiFiClass4RSSIEv+0x56>
        }

        sig.rssi = 2;
 80a4a70:	6067      	str	r7, [r4, #4]
        return sig;
    }
 80a4a72:	4620      	mov	r0, r4
 80a4a74:	b006      	add	sp, #24
 80a4a76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a4a7a:	bf00      	nop
 80a4a7c:	080a9c48 	.word	0x080a9c48

080a4a80 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a4a80:	4b02      	ldr	r3, [pc, #8]	; (80a4a8c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a4a82:	2204      	movs	r2, #4
 80a4a84:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a4a86:	4a02      	ldr	r2, [pc, #8]	; (80a4a90 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a4a88:	601a      	str	r2, [r3, #0]
 80a4a8a:	4770      	bx	lr
 80a4a8c:	2000058c 	.word	0x2000058c
 80a4a90:	080a9c14 	.word	0x080a9c14

080a4a94 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a4a94:	2300      	movs	r3, #0
 80a4a96:	461a      	mov	r2, r3
 80a4a98:	6840      	ldr	r0, [r0, #4]
 80a4a9a:	f7fe bb65 	b.w	80a3168 <network_connect>

080a4a9e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a4a9e:	2200      	movs	r2, #0
 80a4aa0:	2102      	movs	r1, #2
 80a4aa2:	6840      	ldr	r0, [r0, #4]
 80a4aa4:	f7fe bb70 	b.w	80a3188 <network_disconnect>

080a4aa8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a4aa8:	2200      	movs	r2, #0
 80a4aaa:	4611      	mov	r1, r2
 80a4aac:	6840      	ldr	r0, [r0, #4]
 80a4aae:	f7fe bb63 	b.w	80a3178 <network_connecting>

080a4ab2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a4ab2:	2200      	movs	r2, #0
 80a4ab4:	4611      	mov	r1, r2
 80a4ab6:	6840      	ldr	r0, [r0, #4]
 80a4ab8:	f7fe bb6e 	b.w	80a3198 <network_ready>

080a4abc <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a4abc:	2300      	movs	r3, #0
 80a4abe:	461a      	mov	r2, r3
 80a4ac0:	4619      	mov	r1, r3
 80a4ac2:	6840      	ldr	r0, [r0, #4]
 80a4ac4:	f7fe bb70 	b.w	80a31a8 <network_on>

080a4ac8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a4ac8:	2300      	movs	r3, #0
 80a4aca:	461a      	mov	r2, r3
 80a4acc:	4619      	mov	r1, r3
 80a4ace:	6840      	ldr	r0, [r0, #4]
 80a4ad0:	f7fe bb72 	b.w	80a31b8 <network_off>

080a4ad4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a4ad4:	2200      	movs	r2, #0
 80a4ad6:	f081 0101 	eor.w	r1, r1, #1
 80a4ada:	6840      	ldr	r0, [r0, #4]
 80a4adc:	f7fe bb74 	b.w	80a31c8 <network_listen>

080a4ae0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a4ae0:	2200      	movs	r2, #0
 80a4ae2:	6840      	ldr	r0, [r0, #4]
 80a4ae4:	f7fe bb80 	b.w	80a31e8 <network_set_listen_timeout>

080a4ae8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a4ae8:	2200      	movs	r2, #0
 80a4aea:	4611      	mov	r1, r2
 80a4aec:	6840      	ldr	r0, [r0, #4]
 80a4aee:	f7fe bb83 	b.w	80a31f8 <network_get_listen_timeout>

080a4af2 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a4af2:	2200      	movs	r2, #0
 80a4af4:	4611      	mov	r1, r2
 80a4af6:	6840      	ldr	r0, [r0, #4]
 80a4af8:	f7fe bb6e 	b.w	80a31d8 <network_listening>

080a4afc <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a4afc:	b570      	push	{r4, r5, r6, lr}
 80a4afe:	4616      	mov	r6, r2
 80a4b00:	b08e      	sub	sp, #56	; 0x38
 80a4b02:	4604      	mov	r4, r0
    IPAddress addr;
 80a4b04:	a808      	add	r0, sp, #32
 80a4b06:	f7ff fcc5 	bl	80a4494 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a4b0a:	2211      	movs	r2, #17
 80a4b0c:	2100      	movs	r1, #0
 80a4b0e:	a803      	add	r0, sp, #12
 80a4b10:	f001 fd77 	bl	80a6602 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a4b14:	4630      	mov	r0, r6
 80a4b16:	f002 facb 	bl	80a70b0 <strlen>
 80a4b1a:	2500      	movs	r5, #0
 80a4b1c:	4b0a      	ldr	r3, [pc, #40]	; (80a4b48 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a4b1e:	9500      	str	r5, [sp, #0]
 80a4b20:	b281      	uxth	r1, r0
 80a4b22:	685b      	ldr	r3, [r3, #4]
 80a4b24:	aa03      	add	r2, sp, #12
 80a4b26:	4630      	mov	r0, r6
 80a4b28:	f7fe fab2 	bl	80a3090 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a4b2c:	b120      	cbz	r0, 80a4b38 <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a4b2e:	4629      	mov	r1, r5
 80a4b30:	4620      	mov	r0, r4
 80a4b32:	f7ff fccf 	bl	80a44d4 <_ZN9IPAddressC1Em>
 80a4b36:	e003      	b.n	80a4b40 <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a4b38:	a903      	add	r1, sp, #12
 80a4b3a:	4620      	mov	r0, r4
 80a4b3c:	f7ff fcb8 	bl	80a44b0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a4b40:	4620      	mov	r0, r4
 80a4b42:	b00e      	add	sp, #56	; 0x38
 80a4b44:	bd70      	pop	{r4, r5, r6, pc}
 80a4b46:	bf00      	nop
 80a4b48:	2000058c 	.word	0x2000058c

080a4b4c <_ZN5spark12NetworkClass4fromEm>:
        return Cellular;
#endif
    default:
        return Network;
    }
}
 80a4b4c:	4b03      	ldr	r3, [pc, #12]	; (80a4b5c <_ZN5spark12NetworkClass4fromEm+0x10>)
 80a4b4e:	4a04      	ldr	r2, [pc, #16]	; (80a4b60 <_ZN5spark12NetworkClass4fromEm+0x14>)
 80a4b50:	2804      	cmp	r0, #4
 80a4b52:	bf0c      	ite	eq
 80a4b54:	4610      	moveq	r0, r2
 80a4b56:	4618      	movne	r0, r3
 80a4b58:	4770      	bx	lr
 80a4b5a:	bf00      	nop
 80a4b5c:	20000594 	.word	0x20000594
 80a4b60:	2000058c 	.word	0x2000058c

080a4b64 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80a4b64:	4b02      	ldr	r3, [pc, #8]	; (80a4b70 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a4b66:	4a03      	ldr	r2, [pc, #12]	; (80a4b74 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a4b68:	601a      	str	r2, [r3, #0]
 80a4b6a:	2200      	movs	r2, #0
 80a4b6c:	605a      	str	r2, [r3, #4]
 80a4b6e:	4770      	bx	lr
 80a4b70:	20000594 	.word	0x20000594
 80a4b74:	080a9c6c 	.word	0x080a9c6c

080a4b78 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a4b78:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a4b7a:	4e1a      	ldr	r6, [pc, #104]	; (80a4be4 <pinAvailable+0x6c>)
 80a4b7c:	4604      	mov	r4, r0
 80a4b7e:	6831      	ldr	r1, [r6, #0]
 80a4b80:	f011 0501 	ands.w	r5, r1, #1
 80a4b84:	d10f      	bne.n	80a4ba6 <pinAvailable+0x2e>
 80a4b86:	4630      	mov	r0, r6
 80a4b88:	f7fb fa91 	bl	80a00ae <__cxa_guard_acquire>
 80a4b8c:	b158      	cbz	r0, 80a4ba6 <pinAvailable+0x2e>
 80a4b8e:	4629      	mov	r1, r5
 80a4b90:	4815      	ldr	r0, [pc, #84]	; (80a4be8 <pinAvailable+0x70>)
 80a4b92:	f7fe fbbf 	bl	80a3314 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a4b96:	4630      	mov	r0, r6
 80a4b98:	f7fb fa8e 	bl	80a00b8 <__cxa_guard_release>
 80a4b9c:	4a13      	ldr	r2, [pc, #76]	; (80a4bec <pinAvailable+0x74>)
 80a4b9e:	4914      	ldr	r1, [pc, #80]	; (80a4bf0 <pinAvailable+0x78>)
 80a4ba0:	4811      	ldr	r0, [pc, #68]	; (80a4be8 <pinAvailable+0x70>)
 80a4ba2:	f000 f8bd 	bl	80a4d20 <__aeabi_atexit>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
 80a4ba6:	4810      	ldr	r0, [pc, #64]	; (80a4be8 <pinAvailable+0x70>)
 80a4ba8:	f7fe fbd9 	bl	80a335e <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a4bac:	b128      	cbz	r0, 80a4bba <pinAvailable+0x42>
 80a4bae:	f1a4 030d 	sub.w	r3, r4, #13
 80a4bb2:	2b02      	cmp	r3, #2
 80a4bb4:	d801      	bhi.n	80a4bba <pinAvailable+0x42>
  {
    return 0; // 'pin' is used
 80a4bb6:	2000      	movs	r0, #0
 80a4bb8:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a4bba:	f000 f88b 	bl	80a4cd4 <_Z19__fetch_global_Wirev>
 80a4bbe:	f7ff fe57 	bl	80a4870 <_ZN7TwoWire9isEnabledEv>
 80a4bc2:	b108      	cbz	r0, 80a4bc8 <pinAvailable+0x50>
 80a4bc4:	2c01      	cmp	r4, #1
 80a4bc6:	d9f6      	bls.n	80a4bb6 <pinAvailable+0x3e>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a4bc8:	f7ff fdd4 	bl	80a4774 <_Z22__fetch_global_Serial1v>
 80a4bcc:	f7ff fdcf 	bl	80a476e <_ZN11USARTSerial9isEnabledEv>
 80a4bd0:	b118      	cbz	r0, 80a4bda <pinAvailable+0x62>
 80a4bd2:	f1a4 0312 	sub.w	r3, r4, #18
 80a4bd6:	2b01      	cmp	r3, #1
 80a4bd8:	d9ed      	bls.n	80a4bb6 <pinAvailable+0x3e>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a4bda:	2c17      	cmp	r4, #23
 80a4bdc:	bf8c      	ite	hi
 80a4bde:	2000      	movhi	r0, #0
 80a4be0:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a4be2:	bd70      	pop	{r4, r5, r6, pc}
 80a4be4:	20000100 	.word	0x20000100
 80a4be8:	20000104 	.word	0x20000104
 80a4bec:	200000fc 	.word	0x200000fc
 80a4bf0:	080a028d 	.word	0x080a028d

080a4bf4 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a4bf4:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a4bf6:	b538      	push	{r3, r4, r5, lr}
 80a4bf8:	4604      	mov	r4, r0
 80a4bfa:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a4bfc:	d80a      	bhi.n	80a4c14 <pinMode+0x20>
 80a4bfe:	29ff      	cmp	r1, #255	; 0xff
 80a4c00:	d008      	beq.n	80a4c14 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a4c02:	f7ff ffb9 	bl	80a4b78 <pinAvailable>
 80a4c06:	b128      	cbz	r0, 80a4c14 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a4c08:	4629      	mov	r1, r5
 80a4c0a:	4620      	mov	r0, r4
}
 80a4c0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a4c10:	f7fe b8b4 	b.w	80a2d7c <HAL_Pin_Mode>
 80a4c14:	bd38      	pop	{r3, r4, r5, pc}

080a4c16 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a4c16:	b538      	push	{r3, r4, r5, lr}
 80a4c18:	4604      	mov	r4, r0
 80a4c1a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a4c1c:	f7fe f8b6 	bl	80a2d8c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a4c20:	28ff      	cmp	r0, #255	; 0xff
 80a4c22:	d010      	beq.n	80a4c46 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80a4c24:	2806      	cmp	r0, #6
 80a4c26:	d804      	bhi.n	80a4c32 <digitalWrite+0x1c>
 80a4c28:	234d      	movs	r3, #77	; 0x4d
 80a4c2a:	fa23 f000 	lsr.w	r0, r3, r0
 80a4c2e:	07c3      	lsls	r3, r0, #31
 80a4c30:	d409      	bmi.n	80a4c46 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a4c32:	4620      	mov	r0, r4
 80a4c34:	f7ff ffa0 	bl	80a4b78 <pinAvailable>
 80a4c38:	b128      	cbz	r0, 80a4c46 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a4c3a:	4629      	mov	r1, r5
 80a4c3c:	4620      	mov	r0, r4
}
 80a4c3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a4c42:	f7fe b8ab 	b.w	80a2d9c <HAL_GPIO_Write>
 80a4c46:	bd38      	pop	{r3, r4, r5, pc}

080a4c48 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 80a4c48:	b510      	push	{r4, lr}
 80a4c4a:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a4c4c:	f7fe f89e 	bl	80a2d8c <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
 80a4c50:	3804      	subs	r0, #4
 80a4c52:	b2c0      	uxtb	r0, r0
 80a4c54:	2801      	cmp	r0, #1
 80a4c56:	d908      	bls.n	80a4c6a <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 80a4c58:	4620      	mov	r0, r4
 80a4c5a:	f7ff ff8d 	bl	80a4b78 <pinAvailable>
 80a4c5e:	b120      	cbz	r0, 80a4c6a <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a4c60:	4620      	mov	r0, r4
}
 80a4c62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a4c66:	f7fe b8a1 	b.w	80a2dac <HAL_GPIO_Read>
}
 80a4c6a:	2000      	movs	r0, #0
 80a4c6c:	bd10      	pop	{r4, pc}
	...

080a4c70 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a4c70:	b513      	push	{r0, r1, r4, lr}
 80a4c72:	4c08      	ldr	r4, [pc, #32]	; (80a4c94 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a4c74:	2300      	movs	r3, #0
 80a4c76:	461a      	mov	r2, r3
 80a4c78:	4619      	mov	r1, r3
 80a4c7a:	9300      	str	r3, [sp, #0]
 80a4c7c:	4620      	mov	r0, r4
 80a4c7e:	f7ff fc3f 	bl	80a4500 <_ZN9IPAddressC1Ehhhh>
 80a4c82:	4620      	mov	r0, r4
 80a4c84:	4a04      	ldr	r2, [pc, #16]	; (80a4c98 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a4c86:	4905      	ldr	r1, [pc, #20]	; (80a4c9c <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a4c88:	b002      	add	sp, #8
 80a4c8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a4c8e:	f000 b847 	b.w	80a4d20 <__aeabi_atexit>
 80a4c92:	bf00      	nop
 80a4c94:	200005a0 	.word	0x200005a0
 80a4c98:	200000fc 	.word	0x200000fc
 80a4c9c:	080a4453 	.word	0x080a4453

080a4ca0 <_Z17acquireWireBufferv>:
}

} // anonymous

HAL_I2C_Config __attribute__((weak)) acquireWireBuffer()
{
 80a4ca0:	b570      	push	{r4, r5, r6, lr}
 80a4ca2:	4604      	mov	r4, r0
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a4ca4:	2514      	movs	r5, #20
 80a4ca6:	462a      	mov	r2, r5

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a4ca8:	4e09      	ldr	r6, [pc, #36]	; (80a4cd0 <_Z17acquireWireBufferv+0x30>)
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a4caa:	2100      	movs	r1, #0
 80a4cac:	f001 fca9 	bl	80a6602 <memset>
 80a4cb0:	8025      	strh	r5, [r4, #0]
 80a4cb2:	2520      	movs	r5, #32

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a4cb4:	4631      	mov	r1, r6
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a4cb6:	60a5      	str	r5, [r4, #8]
 80a4cb8:	6125      	str	r5, [r4, #16]

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a4cba:	4628      	mov	r0, r5
 80a4cbc:	f000 f840 	bl	80a4d40 <_ZnajRKSt9nothrow_t>
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a4cc0:	4631      	mov	r1, r6
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a4cc2:	6060      	str	r0, [r4, #4]
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a4cc4:	4628      	mov	r0, r5
 80a4cc6:	f000 f83b 	bl	80a4d40 <_ZnajRKSt9nothrow_t>
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a4cca:	60e0      	str	r0, [r4, #12]
} // anonymous

HAL_I2C_Config __attribute__((weak)) acquireWireBuffer()
{
	return defaultWireConfig();
}
 80a4ccc:	4620      	mov	r0, r4
 80a4cce:	bd70      	pop	{r4, r5, r6, pc}
 80a4cd0:	080a9c98 	.word	0x080a9c98

080a4cd4 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 80a4cd4:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a4cd6:	4d0e      	ldr	r5, [pc, #56]	; (80a4d10 <_Z19__fetch_global_Wirev+0x3c>)
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 80a4cd8:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a4cda:	6829      	ldr	r1, [r5, #0]
 80a4cdc:	f011 0401 	ands.w	r4, r1, #1
 80a4ce0:	d113      	bne.n	80a4d0a <_Z19__fetch_global_Wirev+0x36>
 80a4ce2:	4628      	mov	r0, r5
 80a4ce4:	f7fb f9e3 	bl	80a00ae <__cxa_guard_acquire>
 80a4ce8:	b178      	cbz	r0, 80a4d0a <_Z19__fetch_global_Wirev+0x36>
 80a4cea:	a801      	add	r0, sp, #4
 80a4cec:	f7ff ffd8 	bl	80a4ca0 <_Z17acquireWireBufferv>
 80a4cf0:	aa01      	add	r2, sp, #4
 80a4cf2:	4621      	mov	r1, r4
 80a4cf4:	4807      	ldr	r0, [pc, #28]	; (80a4d14 <_Z19__fetch_global_Wirev+0x40>)
 80a4cf6:	f7ff fda9 	bl	80a484c <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
 80a4cfa:	4628      	mov	r0, r5
 80a4cfc:	f7fb f9dc 	bl	80a00b8 <__cxa_guard_release>
 80a4d00:	4a05      	ldr	r2, [pc, #20]	; (80a4d18 <_Z19__fetch_global_Wirev+0x44>)
 80a4d02:	4906      	ldr	r1, [pc, #24]	; (80a4d1c <_Z19__fetch_global_Wirev+0x48>)
 80a4d04:	4803      	ldr	r0, [pc, #12]	; (80a4d14 <_Z19__fetch_global_Wirev+0x40>)
 80a4d06:	f000 f80b 	bl	80a4d20 <__aeabi_atexit>
	return wire;
}
 80a4d0a:	4802      	ldr	r0, [pc, #8]	; (80a4d14 <_Z19__fetch_global_Wirev+0x40>)
 80a4d0c:	b007      	add	sp, #28
 80a4d0e:	bd30      	pop	{r4, r5, pc}
 80a4d10:	200005b8 	.word	0x200005b8
 80a4d14:	200005bc 	.word	0x200005bc
 80a4d18:	200000fc 	.word	0x200000fc
 80a4d1c:	080a47f5 	.word	0x080a47f5

080a4d20 <__aeabi_atexit>:
 80a4d20:	460b      	mov	r3, r1
 80a4d22:	4601      	mov	r1, r0
 80a4d24:	4618      	mov	r0, r3
 80a4d26:	f001 bb57 	b.w	80a63d8 <__cxa_atexit>
	...

080a4d2c <_ZSt15get_new_handlerv>:
 80a4d2c:	4b02      	ldr	r3, [pc, #8]	; (80a4d38 <_ZSt15get_new_handlerv+0xc>)
 80a4d2e:	6818      	ldr	r0, [r3, #0]
 80a4d30:	f3bf 8f5f 	dmb	sy
 80a4d34:	4770      	bx	lr
 80a4d36:	bf00      	nop
 80a4d38:	200005d0 	.word	0x200005d0

080a4d3c <_ZdlPvj>:
 80a4d3c:	f7fb b9b3 	b.w	80a00a6 <_ZdlPv>

080a4d40 <_ZnajRKSt9nothrow_t>:
 80a4d40:	f000 b800 	b.w	80a4d44 <_ZnwjRKSt9nothrow_t>

080a4d44 <_ZnwjRKSt9nothrow_t>:
 80a4d44:	b510      	push	{r4, lr}
 80a4d46:	2800      	cmp	r0, #0
 80a4d48:	bf14      	ite	ne
 80a4d4a:	4604      	movne	r4, r0
 80a4d4c:	2401      	moveq	r4, #1
 80a4d4e:	4620      	mov	r0, r4
 80a4d50:	f7fe fa92 	bl	80a3278 <malloc>
 80a4d54:	b920      	cbnz	r0, 80a4d60 <_ZnwjRKSt9nothrow_t+0x1c>
 80a4d56:	f7ff ffe9 	bl	80a4d2c <_ZSt15get_new_handlerv>
 80a4d5a:	b108      	cbz	r0, 80a4d60 <_ZnwjRKSt9nothrow_t+0x1c>
 80a4d5c:	4780      	blx	r0
 80a4d5e:	e7f6      	b.n	80a4d4e <_ZnwjRKSt9nothrow_t+0xa>
 80a4d60:	bd10      	pop	{r4, pc}
	...

080a4d64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a4d64:	4b18      	ldr	r3, [pc, #96]	; (80a4dc8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a4d66:	681a      	ldr	r2, [r3, #0]
 80a4d68:	07d1      	lsls	r1, r2, #31
 80a4d6a:	bf5c      	itt	pl
 80a4d6c:	2201      	movpl	r2, #1
 80a4d6e:	601a      	strpl	r2, [r3, #0]
 80a4d70:	4b16      	ldr	r3, [pc, #88]	; (80a4dcc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a4d72:	681a      	ldr	r2, [r3, #0]
 80a4d74:	07d2      	lsls	r2, r2, #31
 80a4d76:	bf5c      	itt	pl
 80a4d78:	2201      	movpl	r2, #1
 80a4d7a:	601a      	strpl	r2, [r3, #0]
 80a4d7c:	4b14      	ldr	r3, [pc, #80]	; (80a4dd0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a4d7e:	681a      	ldr	r2, [r3, #0]
 80a4d80:	07d0      	lsls	r0, r2, #31
 80a4d82:	bf5c      	itt	pl
 80a4d84:	2201      	movpl	r2, #1
 80a4d86:	601a      	strpl	r2, [r3, #0]
 80a4d88:	4b12      	ldr	r3, [pc, #72]	; (80a4dd4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a4d8a:	681a      	ldr	r2, [r3, #0]
 80a4d8c:	07d1      	lsls	r1, r2, #31
 80a4d8e:	bf5c      	itt	pl
 80a4d90:	2201      	movpl	r2, #1
 80a4d92:	601a      	strpl	r2, [r3, #0]
 80a4d94:	4b10      	ldr	r3, [pc, #64]	; (80a4dd8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a4d96:	681a      	ldr	r2, [r3, #0]
 80a4d98:	07d2      	lsls	r2, r2, #31
 80a4d9a:	bf5c      	itt	pl
 80a4d9c:	2201      	movpl	r2, #1
 80a4d9e:	601a      	strpl	r2, [r3, #0]
 80a4da0:	4b0e      	ldr	r3, [pc, #56]	; (80a4ddc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a4da2:	681a      	ldr	r2, [r3, #0]
 80a4da4:	07d0      	lsls	r0, r2, #31
 80a4da6:	bf5c      	itt	pl
 80a4da8:	2201      	movpl	r2, #1
 80a4daa:	601a      	strpl	r2, [r3, #0]
 80a4dac:	4b0c      	ldr	r3, [pc, #48]	; (80a4de0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a4dae:	681a      	ldr	r2, [r3, #0]
 80a4db0:	07d1      	lsls	r1, r2, #31
 80a4db2:	bf5c      	itt	pl
 80a4db4:	2201      	movpl	r2, #1
 80a4db6:	601a      	strpl	r2, [r3, #0]
 80a4db8:	4b0a      	ldr	r3, [pc, #40]	; (80a4de4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a4dba:	681a      	ldr	r2, [r3, #0]
 80a4dbc:	07d2      	lsls	r2, r2, #31
 80a4dbe:	bf5c      	itt	pl
 80a4dc0:	2201      	movpl	r2, #1
 80a4dc2:	601a      	strpl	r2, [r3, #0]
 80a4dc4:	4770      	bx	lr
 80a4dc6:	bf00      	nop
 80a4dc8:	200005f0 	.word	0x200005f0
 80a4dcc:	200005ec 	.word	0x200005ec
 80a4dd0:	200005e8 	.word	0x200005e8
 80a4dd4:	200005e4 	.word	0x200005e4
 80a4dd8:	200005e0 	.word	0x200005e0
 80a4ddc:	200005dc 	.word	0x200005dc
 80a4de0:	200005d8 	.word	0x200005d8
 80a4de4:	200005d4 	.word	0x200005d4

080a4de8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a4de8:	4b24      	ldr	r3, [pc, #144]	; (80a4e7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a4dea:	681a      	ldr	r2, [r3, #0]
 80a4dec:	07d0      	lsls	r0, r2, #31
 80a4dee:	bf5c      	itt	pl
 80a4df0:	2201      	movpl	r2, #1
 80a4df2:	601a      	strpl	r2, [r3, #0]
 80a4df4:	4b22      	ldr	r3, [pc, #136]	; (80a4e80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a4df6:	681a      	ldr	r2, [r3, #0]
 80a4df8:	07d1      	lsls	r1, r2, #31
 80a4dfa:	bf5c      	itt	pl
 80a4dfc:	2201      	movpl	r2, #1
 80a4dfe:	601a      	strpl	r2, [r3, #0]
 80a4e00:	4b20      	ldr	r3, [pc, #128]	; (80a4e84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a4e02:	681a      	ldr	r2, [r3, #0]
 80a4e04:	07d2      	lsls	r2, r2, #31
 80a4e06:	bf5c      	itt	pl
 80a4e08:	2201      	movpl	r2, #1
 80a4e0a:	601a      	strpl	r2, [r3, #0]
 80a4e0c:	4b1e      	ldr	r3, [pc, #120]	; (80a4e88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a4e0e:	681a      	ldr	r2, [r3, #0]
 80a4e10:	07d0      	lsls	r0, r2, #31
 80a4e12:	bf5c      	itt	pl
 80a4e14:	2201      	movpl	r2, #1
 80a4e16:	601a      	strpl	r2, [r3, #0]
 80a4e18:	4b1c      	ldr	r3, [pc, #112]	; (80a4e8c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a4e1a:	681a      	ldr	r2, [r3, #0]
 80a4e1c:	07d1      	lsls	r1, r2, #31
 80a4e1e:	bf5c      	itt	pl
 80a4e20:	2201      	movpl	r2, #1
 80a4e22:	601a      	strpl	r2, [r3, #0]
 80a4e24:	4b1a      	ldr	r3, [pc, #104]	; (80a4e90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a4e26:	681a      	ldr	r2, [r3, #0]
 80a4e28:	07d2      	lsls	r2, r2, #31
 80a4e2a:	bf5c      	itt	pl
 80a4e2c:	2201      	movpl	r2, #1
 80a4e2e:	601a      	strpl	r2, [r3, #0]
 80a4e30:	4b18      	ldr	r3, [pc, #96]	; (80a4e94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a4e32:	681a      	ldr	r2, [r3, #0]
 80a4e34:	07d0      	lsls	r0, r2, #31
 80a4e36:	bf5c      	itt	pl
 80a4e38:	2201      	movpl	r2, #1
 80a4e3a:	601a      	strpl	r2, [r3, #0]
 80a4e3c:	4b16      	ldr	r3, [pc, #88]	; (80a4e98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a4e3e:	681a      	ldr	r2, [r3, #0]
 80a4e40:	07d1      	lsls	r1, r2, #31
 80a4e42:	bf5c      	itt	pl
 80a4e44:	2201      	movpl	r2, #1
 80a4e46:	601a      	strpl	r2, [r3, #0]
 80a4e48:	4b14      	ldr	r3, [pc, #80]	; (80a4e9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a4e4a:	681a      	ldr	r2, [r3, #0]
 80a4e4c:	07d2      	lsls	r2, r2, #31
 80a4e4e:	bf5c      	itt	pl
 80a4e50:	2201      	movpl	r2, #1
 80a4e52:	601a      	strpl	r2, [r3, #0]
 80a4e54:	4b12      	ldr	r3, [pc, #72]	; (80a4ea0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a4e56:	681a      	ldr	r2, [r3, #0]
 80a4e58:	07d0      	lsls	r0, r2, #31
 80a4e5a:	bf5c      	itt	pl
 80a4e5c:	2201      	movpl	r2, #1
 80a4e5e:	601a      	strpl	r2, [r3, #0]
 80a4e60:	4b10      	ldr	r3, [pc, #64]	; (80a4ea4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a4e62:	681a      	ldr	r2, [r3, #0]
 80a4e64:	07d1      	lsls	r1, r2, #31
 80a4e66:	bf5c      	itt	pl
 80a4e68:	2201      	movpl	r2, #1
 80a4e6a:	601a      	strpl	r2, [r3, #0]
 80a4e6c:	4b0e      	ldr	r3, [pc, #56]	; (80a4ea8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a4e6e:	681a      	ldr	r2, [r3, #0]
 80a4e70:	07d2      	lsls	r2, r2, #31
 80a4e72:	bf5c      	itt	pl
 80a4e74:	2201      	movpl	r2, #1
 80a4e76:	601a      	strpl	r2, [r3, #0]
 80a4e78:	4770      	bx	lr
 80a4e7a:	bf00      	nop
 80a4e7c:	20000620 	.word	0x20000620
 80a4e80:	2000061c 	.word	0x2000061c
 80a4e84:	20000618 	.word	0x20000618
 80a4e88:	20000614 	.word	0x20000614
 80a4e8c:	20000610 	.word	0x20000610
 80a4e90:	2000060c 	.word	0x2000060c
 80a4e94:	20000608 	.word	0x20000608
 80a4e98:	20000604 	.word	0x20000604
 80a4e9c:	20000600 	.word	0x20000600
 80a4ea0:	200005fc 	.word	0x200005fc
 80a4ea4:	200005f8 	.word	0x200005f8
 80a4ea8:	200005f4 	.word	0x200005f4

080a4eac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a4eac:	4b24      	ldr	r3, [pc, #144]	; (80a4f40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a4eae:	681a      	ldr	r2, [r3, #0]
 80a4eb0:	07d0      	lsls	r0, r2, #31
 80a4eb2:	bf5c      	itt	pl
 80a4eb4:	2201      	movpl	r2, #1
 80a4eb6:	601a      	strpl	r2, [r3, #0]
 80a4eb8:	4b22      	ldr	r3, [pc, #136]	; (80a4f44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a4eba:	681a      	ldr	r2, [r3, #0]
 80a4ebc:	07d1      	lsls	r1, r2, #31
 80a4ebe:	bf5c      	itt	pl
 80a4ec0:	2201      	movpl	r2, #1
 80a4ec2:	601a      	strpl	r2, [r3, #0]
 80a4ec4:	4b20      	ldr	r3, [pc, #128]	; (80a4f48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a4ec6:	681a      	ldr	r2, [r3, #0]
 80a4ec8:	07d2      	lsls	r2, r2, #31
 80a4eca:	bf5c      	itt	pl
 80a4ecc:	2201      	movpl	r2, #1
 80a4ece:	601a      	strpl	r2, [r3, #0]
 80a4ed0:	4b1e      	ldr	r3, [pc, #120]	; (80a4f4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a4ed2:	681a      	ldr	r2, [r3, #0]
 80a4ed4:	07d0      	lsls	r0, r2, #31
 80a4ed6:	bf5c      	itt	pl
 80a4ed8:	2201      	movpl	r2, #1
 80a4eda:	601a      	strpl	r2, [r3, #0]
 80a4edc:	4b1c      	ldr	r3, [pc, #112]	; (80a4f50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a4ede:	681a      	ldr	r2, [r3, #0]
 80a4ee0:	07d1      	lsls	r1, r2, #31
 80a4ee2:	bf5c      	itt	pl
 80a4ee4:	2201      	movpl	r2, #1
 80a4ee6:	601a      	strpl	r2, [r3, #0]
 80a4ee8:	4b1a      	ldr	r3, [pc, #104]	; (80a4f54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a4eea:	681a      	ldr	r2, [r3, #0]
 80a4eec:	07d2      	lsls	r2, r2, #31
 80a4eee:	bf5c      	itt	pl
 80a4ef0:	2201      	movpl	r2, #1
 80a4ef2:	601a      	strpl	r2, [r3, #0]
 80a4ef4:	4b18      	ldr	r3, [pc, #96]	; (80a4f58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a4ef6:	681a      	ldr	r2, [r3, #0]
 80a4ef8:	07d0      	lsls	r0, r2, #31
 80a4efa:	bf5c      	itt	pl
 80a4efc:	2201      	movpl	r2, #1
 80a4efe:	601a      	strpl	r2, [r3, #0]
 80a4f00:	4b16      	ldr	r3, [pc, #88]	; (80a4f5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a4f02:	681a      	ldr	r2, [r3, #0]
 80a4f04:	07d1      	lsls	r1, r2, #31
 80a4f06:	bf5c      	itt	pl
 80a4f08:	2201      	movpl	r2, #1
 80a4f0a:	601a      	strpl	r2, [r3, #0]
 80a4f0c:	4b14      	ldr	r3, [pc, #80]	; (80a4f60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a4f0e:	681a      	ldr	r2, [r3, #0]
 80a4f10:	07d2      	lsls	r2, r2, #31
 80a4f12:	bf5c      	itt	pl
 80a4f14:	2201      	movpl	r2, #1
 80a4f16:	601a      	strpl	r2, [r3, #0]
 80a4f18:	4b12      	ldr	r3, [pc, #72]	; (80a4f64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a4f1a:	681a      	ldr	r2, [r3, #0]
 80a4f1c:	07d0      	lsls	r0, r2, #31
 80a4f1e:	bf5c      	itt	pl
 80a4f20:	2201      	movpl	r2, #1
 80a4f22:	601a      	strpl	r2, [r3, #0]
 80a4f24:	4b10      	ldr	r3, [pc, #64]	; (80a4f68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a4f26:	681a      	ldr	r2, [r3, #0]
 80a4f28:	07d1      	lsls	r1, r2, #31
 80a4f2a:	bf5c      	itt	pl
 80a4f2c:	2201      	movpl	r2, #1
 80a4f2e:	601a      	strpl	r2, [r3, #0]
 80a4f30:	4b0e      	ldr	r3, [pc, #56]	; (80a4f6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a4f32:	681a      	ldr	r2, [r3, #0]
 80a4f34:	07d2      	lsls	r2, r2, #31
 80a4f36:	bf5c      	itt	pl
 80a4f38:	2201      	movpl	r2, #1
 80a4f3a:	601a      	strpl	r2, [r3, #0]
 80a4f3c:	4770      	bx	lr
 80a4f3e:	bf00      	nop
 80a4f40:	20000650 	.word	0x20000650
 80a4f44:	2000064c 	.word	0x2000064c
 80a4f48:	20000648 	.word	0x20000648
 80a4f4c:	20000644 	.word	0x20000644
 80a4f50:	20000640 	.word	0x20000640
 80a4f54:	2000063c 	.word	0x2000063c
 80a4f58:	20000638 	.word	0x20000638
 80a4f5c:	20000634 	.word	0x20000634
 80a4f60:	20000630 	.word	0x20000630
 80a4f64:	2000062c 	.word	0x2000062c
 80a4f68:	20000628 	.word	0x20000628
 80a4f6c:	20000624 	.word	0x20000624

080a4f70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a4f70:	4b18      	ldr	r3, [pc, #96]	; (80a4fd4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a4f72:	681a      	ldr	r2, [r3, #0]
 80a4f74:	07d1      	lsls	r1, r2, #31
 80a4f76:	bf5c      	itt	pl
 80a4f78:	2201      	movpl	r2, #1
 80a4f7a:	601a      	strpl	r2, [r3, #0]
 80a4f7c:	4b16      	ldr	r3, [pc, #88]	; (80a4fd8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a4f7e:	681a      	ldr	r2, [r3, #0]
 80a4f80:	07d2      	lsls	r2, r2, #31
 80a4f82:	bf5c      	itt	pl
 80a4f84:	2201      	movpl	r2, #1
 80a4f86:	601a      	strpl	r2, [r3, #0]
 80a4f88:	4b14      	ldr	r3, [pc, #80]	; (80a4fdc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a4f8a:	681a      	ldr	r2, [r3, #0]
 80a4f8c:	07d0      	lsls	r0, r2, #31
 80a4f8e:	bf5c      	itt	pl
 80a4f90:	2201      	movpl	r2, #1
 80a4f92:	601a      	strpl	r2, [r3, #0]
 80a4f94:	4b12      	ldr	r3, [pc, #72]	; (80a4fe0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a4f96:	681a      	ldr	r2, [r3, #0]
 80a4f98:	07d1      	lsls	r1, r2, #31
 80a4f9a:	bf5c      	itt	pl
 80a4f9c:	2201      	movpl	r2, #1
 80a4f9e:	601a      	strpl	r2, [r3, #0]
 80a4fa0:	4b10      	ldr	r3, [pc, #64]	; (80a4fe4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a4fa2:	681a      	ldr	r2, [r3, #0]
 80a4fa4:	07d2      	lsls	r2, r2, #31
 80a4fa6:	bf5c      	itt	pl
 80a4fa8:	2201      	movpl	r2, #1
 80a4faa:	601a      	strpl	r2, [r3, #0]
 80a4fac:	4b0e      	ldr	r3, [pc, #56]	; (80a4fe8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a4fae:	681a      	ldr	r2, [r3, #0]
 80a4fb0:	07d0      	lsls	r0, r2, #31
 80a4fb2:	bf5c      	itt	pl
 80a4fb4:	2201      	movpl	r2, #1
 80a4fb6:	601a      	strpl	r2, [r3, #0]
 80a4fb8:	4b0c      	ldr	r3, [pc, #48]	; (80a4fec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a4fba:	681a      	ldr	r2, [r3, #0]
 80a4fbc:	07d1      	lsls	r1, r2, #31
 80a4fbe:	bf5c      	itt	pl
 80a4fc0:	2201      	movpl	r2, #1
 80a4fc2:	601a      	strpl	r2, [r3, #0]
 80a4fc4:	4b0a      	ldr	r3, [pc, #40]	; (80a4ff0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a4fc6:	681a      	ldr	r2, [r3, #0]
 80a4fc8:	07d2      	lsls	r2, r2, #31
 80a4fca:	bf5c      	itt	pl
 80a4fcc:	2201      	movpl	r2, #1
 80a4fce:	601a      	strpl	r2, [r3, #0]
 80a4fd0:	4770      	bx	lr
 80a4fd2:	bf00      	nop
 80a4fd4:	20000670 	.word	0x20000670
 80a4fd8:	2000066c 	.word	0x2000066c
 80a4fdc:	20000668 	.word	0x20000668
 80a4fe0:	20000664 	.word	0x20000664
 80a4fe4:	20000660 	.word	0x20000660
 80a4fe8:	2000065c 	.word	0x2000065c
 80a4fec:	20000658 	.word	0x20000658
 80a4ff0:	20000654 	.word	0x20000654

080a4ff4 <__aeabi_drsub>:
 80a4ff4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a4ff8:	e002      	b.n	80a5000 <__adddf3>
 80a4ffa:	bf00      	nop

080a4ffc <__aeabi_dsub>:
 80a4ffc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a5000 <__adddf3>:
 80a5000:	b530      	push	{r4, r5, lr}
 80a5002:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a5006:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a500a:	ea94 0f05 	teq	r4, r5
 80a500e:	bf08      	it	eq
 80a5010:	ea90 0f02 	teqeq	r0, r2
 80a5014:	bf1f      	itttt	ne
 80a5016:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a501a:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a501e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a5022:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a5026:	f000 80e2 	beq.w	80a51ee <__adddf3+0x1ee>
 80a502a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a502e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a5032:	bfb8      	it	lt
 80a5034:	426d      	neglt	r5, r5
 80a5036:	dd0c      	ble.n	80a5052 <__adddf3+0x52>
 80a5038:	442c      	add	r4, r5
 80a503a:	ea80 0202 	eor.w	r2, r0, r2
 80a503e:	ea81 0303 	eor.w	r3, r1, r3
 80a5042:	ea82 0000 	eor.w	r0, r2, r0
 80a5046:	ea83 0101 	eor.w	r1, r3, r1
 80a504a:	ea80 0202 	eor.w	r2, r0, r2
 80a504e:	ea81 0303 	eor.w	r3, r1, r3
 80a5052:	2d36      	cmp	r5, #54	; 0x36
 80a5054:	bf88      	it	hi
 80a5056:	bd30      	pophi	{r4, r5, pc}
 80a5058:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a505c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a5060:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a5064:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a5068:	d002      	beq.n	80a5070 <__adddf3+0x70>
 80a506a:	4240      	negs	r0, r0
 80a506c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a5070:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a5074:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a5078:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a507c:	d002      	beq.n	80a5084 <__adddf3+0x84>
 80a507e:	4252      	negs	r2, r2
 80a5080:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a5084:	ea94 0f05 	teq	r4, r5
 80a5088:	f000 80a7 	beq.w	80a51da <__adddf3+0x1da>
 80a508c:	f1a4 0401 	sub.w	r4, r4, #1
 80a5090:	f1d5 0e20 	rsbs	lr, r5, #32
 80a5094:	db0d      	blt.n	80a50b2 <__adddf3+0xb2>
 80a5096:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a509a:	fa22 f205 	lsr.w	r2, r2, r5
 80a509e:	1880      	adds	r0, r0, r2
 80a50a0:	f141 0100 	adc.w	r1, r1, #0
 80a50a4:	fa03 f20e 	lsl.w	r2, r3, lr
 80a50a8:	1880      	adds	r0, r0, r2
 80a50aa:	fa43 f305 	asr.w	r3, r3, r5
 80a50ae:	4159      	adcs	r1, r3
 80a50b0:	e00e      	b.n	80a50d0 <__adddf3+0xd0>
 80a50b2:	f1a5 0520 	sub.w	r5, r5, #32
 80a50b6:	f10e 0e20 	add.w	lr, lr, #32
 80a50ba:	2a01      	cmp	r2, #1
 80a50bc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a50c0:	bf28      	it	cs
 80a50c2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a50c6:	fa43 f305 	asr.w	r3, r3, r5
 80a50ca:	18c0      	adds	r0, r0, r3
 80a50cc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a50d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a50d4:	d507      	bpl.n	80a50e6 <__adddf3+0xe6>
 80a50d6:	f04f 0e00 	mov.w	lr, #0
 80a50da:	f1dc 0c00 	rsbs	ip, ip, #0
 80a50de:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a50e2:	eb6e 0101 	sbc.w	r1, lr, r1
 80a50e6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a50ea:	d31b      	bcc.n	80a5124 <__adddf3+0x124>
 80a50ec:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a50f0:	d30c      	bcc.n	80a510c <__adddf3+0x10c>
 80a50f2:	0849      	lsrs	r1, r1, #1
 80a50f4:	ea5f 0030 	movs.w	r0, r0, rrx
 80a50f8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a50fc:	f104 0401 	add.w	r4, r4, #1
 80a5100:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a5104:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a5108:	f080 809a 	bcs.w	80a5240 <__adddf3+0x240>
 80a510c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a5110:	bf08      	it	eq
 80a5112:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a5116:	f150 0000 	adcs.w	r0, r0, #0
 80a511a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a511e:	ea41 0105 	orr.w	r1, r1, r5
 80a5122:	bd30      	pop	{r4, r5, pc}
 80a5124:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a5128:	4140      	adcs	r0, r0
 80a512a:	eb41 0101 	adc.w	r1, r1, r1
 80a512e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a5132:	f1a4 0401 	sub.w	r4, r4, #1
 80a5136:	d1e9      	bne.n	80a510c <__adddf3+0x10c>
 80a5138:	f091 0f00 	teq	r1, #0
 80a513c:	bf04      	itt	eq
 80a513e:	4601      	moveq	r1, r0
 80a5140:	2000      	moveq	r0, #0
 80a5142:	fab1 f381 	clz	r3, r1
 80a5146:	bf08      	it	eq
 80a5148:	3320      	addeq	r3, #32
 80a514a:	f1a3 030b 	sub.w	r3, r3, #11
 80a514e:	f1b3 0220 	subs.w	r2, r3, #32
 80a5152:	da0c      	bge.n	80a516e <__adddf3+0x16e>
 80a5154:	320c      	adds	r2, #12
 80a5156:	dd08      	ble.n	80a516a <__adddf3+0x16a>
 80a5158:	f102 0c14 	add.w	ip, r2, #20
 80a515c:	f1c2 020c 	rsb	r2, r2, #12
 80a5160:	fa01 f00c 	lsl.w	r0, r1, ip
 80a5164:	fa21 f102 	lsr.w	r1, r1, r2
 80a5168:	e00c      	b.n	80a5184 <__adddf3+0x184>
 80a516a:	f102 0214 	add.w	r2, r2, #20
 80a516e:	bfd8      	it	le
 80a5170:	f1c2 0c20 	rsble	ip, r2, #32
 80a5174:	fa01 f102 	lsl.w	r1, r1, r2
 80a5178:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a517c:	bfdc      	itt	le
 80a517e:	ea41 010c 	orrle.w	r1, r1, ip
 80a5182:	4090      	lslle	r0, r2
 80a5184:	1ae4      	subs	r4, r4, r3
 80a5186:	bfa2      	ittt	ge
 80a5188:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a518c:	4329      	orrge	r1, r5
 80a518e:	bd30      	popge	{r4, r5, pc}
 80a5190:	ea6f 0404 	mvn.w	r4, r4
 80a5194:	3c1f      	subs	r4, #31
 80a5196:	da1c      	bge.n	80a51d2 <__adddf3+0x1d2>
 80a5198:	340c      	adds	r4, #12
 80a519a:	dc0e      	bgt.n	80a51ba <__adddf3+0x1ba>
 80a519c:	f104 0414 	add.w	r4, r4, #20
 80a51a0:	f1c4 0220 	rsb	r2, r4, #32
 80a51a4:	fa20 f004 	lsr.w	r0, r0, r4
 80a51a8:	fa01 f302 	lsl.w	r3, r1, r2
 80a51ac:	ea40 0003 	orr.w	r0, r0, r3
 80a51b0:	fa21 f304 	lsr.w	r3, r1, r4
 80a51b4:	ea45 0103 	orr.w	r1, r5, r3
 80a51b8:	bd30      	pop	{r4, r5, pc}
 80a51ba:	f1c4 040c 	rsb	r4, r4, #12
 80a51be:	f1c4 0220 	rsb	r2, r4, #32
 80a51c2:	fa20 f002 	lsr.w	r0, r0, r2
 80a51c6:	fa01 f304 	lsl.w	r3, r1, r4
 80a51ca:	ea40 0003 	orr.w	r0, r0, r3
 80a51ce:	4629      	mov	r1, r5
 80a51d0:	bd30      	pop	{r4, r5, pc}
 80a51d2:	fa21 f004 	lsr.w	r0, r1, r4
 80a51d6:	4629      	mov	r1, r5
 80a51d8:	bd30      	pop	{r4, r5, pc}
 80a51da:	f094 0f00 	teq	r4, #0
 80a51de:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a51e2:	bf06      	itte	eq
 80a51e4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a51e8:	3401      	addeq	r4, #1
 80a51ea:	3d01      	subne	r5, #1
 80a51ec:	e74e      	b.n	80a508c <__adddf3+0x8c>
 80a51ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a51f2:	bf18      	it	ne
 80a51f4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a51f8:	d029      	beq.n	80a524e <__adddf3+0x24e>
 80a51fa:	ea94 0f05 	teq	r4, r5
 80a51fe:	bf08      	it	eq
 80a5200:	ea90 0f02 	teqeq	r0, r2
 80a5204:	d005      	beq.n	80a5212 <__adddf3+0x212>
 80a5206:	ea54 0c00 	orrs.w	ip, r4, r0
 80a520a:	bf04      	itt	eq
 80a520c:	4619      	moveq	r1, r3
 80a520e:	4610      	moveq	r0, r2
 80a5210:	bd30      	pop	{r4, r5, pc}
 80a5212:	ea91 0f03 	teq	r1, r3
 80a5216:	bf1e      	ittt	ne
 80a5218:	2100      	movne	r1, #0
 80a521a:	2000      	movne	r0, #0
 80a521c:	bd30      	popne	{r4, r5, pc}
 80a521e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a5222:	d105      	bne.n	80a5230 <__adddf3+0x230>
 80a5224:	0040      	lsls	r0, r0, #1
 80a5226:	4149      	adcs	r1, r1
 80a5228:	bf28      	it	cs
 80a522a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a522e:	bd30      	pop	{r4, r5, pc}
 80a5230:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a5234:	bf3c      	itt	cc
 80a5236:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a523a:	bd30      	popcc	{r4, r5, pc}
 80a523c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a5240:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a5244:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a5248:	f04f 0000 	mov.w	r0, #0
 80a524c:	bd30      	pop	{r4, r5, pc}
 80a524e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a5252:	bf1a      	itte	ne
 80a5254:	4619      	movne	r1, r3
 80a5256:	4610      	movne	r0, r2
 80a5258:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a525c:	bf1c      	itt	ne
 80a525e:	460b      	movne	r3, r1
 80a5260:	4602      	movne	r2, r0
 80a5262:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a5266:	bf06      	itte	eq
 80a5268:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a526c:	ea91 0f03 	teqeq	r1, r3
 80a5270:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a5274:	bd30      	pop	{r4, r5, pc}
 80a5276:	bf00      	nop

080a5278 <__aeabi_ui2d>:
 80a5278:	f090 0f00 	teq	r0, #0
 80a527c:	bf04      	itt	eq
 80a527e:	2100      	moveq	r1, #0
 80a5280:	4770      	bxeq	lr
 80a5282:	b530      	push	{r4, r5, lr}
 80a5284:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a5288:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a528c:	f04f 0500 	mov.w	r5, #0
 80a5290:	f04f 0100 	mov.w	r1, #0
 80a5294:	e750      	b.n	80a5138 <__adddf3+0x138>
 80a5296:	bf00      	nop

080a5298 <__aeabi_i2d>:
 80a5298:	f090 0f00 	teq	r0, #0
 80a529c:	bf04      	itt	eq
 80a529e:	2100      	moveq	r1, #0
 80a52a0:	4770      	bxeq	lr
 80a52a2:	b530      	push	{r4, r5, lr}
 80a52a4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a52a8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a52ac:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a52b0:	bf48      	it	mi
 80a52b2:	4240      	negmi	r0, r0
 80a52b4:	f04f 0100 	mov.w	r1, #0
 80a52b8:	e73e      	b.n	80a5138 <__adddf3+0x138>
 80a52ba:	bf00      	nop

080a52bc <__aeabi_f2d>:
 80a52bc:	0042      	lsls	r2, r0, #1
 80a52be:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a52c2:	ea4f 0131 	mov.w	r1, r1, rrx
 80a52c6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a52ca:	bf1f      	itttt	ne
 80a52cc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a52d0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a52d4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a52d8:	4770      	bxne	lr
 80a52da:	f092 0f00 	teq	r2, #0
 80a52de:	bf14      	ite	ne
 80a52e0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a52e4:	4770      	bxeq	lr
 80a52e6:	b530      	push	{r4, r5, lr}
 80a52e8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a52ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a52f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a52f4:	e720      	b.n	80a5138 <__adddf3+0x138>
 80a52f6:	bf00      	nop

080a52f8 <__aeabi_ul2d>:
 80a52f8:	ea50 0201 	orrs.w	r2, r0, r1
 80a52fc:	bf08      	it	eq
 80a52fe:	4770      	bxeq	lr
 80a5300:	b530      	push	{r4, r5, lr}
 80a5302:	f04f 0500 	mov.w	r5, #0
 80a5306:	e00a      	b.n	80a531e <__aeabi_l2d+0x16>

080a5308 <__aeabi_l2d>:
 80a5308:	ea50 0201 	orrs.w	r2, r0, r1
 80a530c:	bf08      	it	eq
 80a530e:	4770      	bxeq	lr
 80a5310:	b530      	push	{r4, r5, lr}
 80a5312:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a5316:	d502      	bpl.n	80a531e <__aeabi_l2d+0x16>
 80a5318:	4240      	negs	r0, r0
 80a531a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a531e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a5322:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a5326:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a532a:	f43f aedc 	beq.w	80a50e6 <__adddf3+0xe6>
 80a532e:	f04f 0203 	mov.w	r2, #3
 80a5332:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a5336:	bf18      	it	ne
 80a5338:	3203      	addne	r2, #3
 80a533a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a533e:	bf18      	it	ne
 80a5340:	3203      	addne	r2, #3
 80a5342:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a5346:	f1c2 0320 	rsb	r3, r2, #32
 80a534a:	fa00 fc03 	lsl.w	ip, r0, r3
 80a534e:	fa20 f002 	lsr.w	r0, r0, r2
 80a5352:	fa01 fe03 	lsl.w	lr, r1, r3
 80a5356:	ea40 000e 	orr.w	r0, r0, lr
 80a535a:	fa21 f102 	lsr.w	r1, r1, r2
 80a535e:	4414      	add	r4, r2
 80a5360:	e6c1      	b.n	80a50e6 <__adddf3+0xe6>
 80a5362:	bf00      	nop

080a5364 <__aeabi_dmul>:
 80a5364:	b570      	push	{r4, r5, r6, lr}
 80a5366:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a536a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a536e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a5372:	bf1d      	ittte	ne
 80a5374:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a5378:	ea94 0f0c 	teqne	r4, ip
 80a537c:	ea95 0f0c 	teqne	r5, ip
 80a5380:	f000 f8de 	bleq	80a5540 <__aeabi_dmul+0x1dc>
 80a5384:	442c      	add	r4, r5
 80a5386:	ea81 0603 	eor.w	r6, r1, r3
 80a538a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a538e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a5392:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a5396:	bf18      	it	ne
 80a5398:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a539c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a53a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a53a4:	d038      	beq.n	80a5418 <__aeabi_dmul+0xb4>
 80a53a6:	fba0 ce02 	umull	ip, lr, r0, r2
 80a53aa:	f04f 0500 	mov.w	r5, #0
 80a53ae:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a53b2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a53b6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a53ba:	f04f 0600 	mov.w	r6, #0
 80a53be:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a53c2:	f09c 0f00 	teq	ip, #0
 80a53c6:	bf18      	it	ne
 80a53c8:	f04e 0e01 	orrne.w	lr, lr, #1
 80a53cc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a53d0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a53d4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a53d8:	d204      	bcs.n	80a53e4 <__aeabi_dmul+0x80>
 80a53da:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a53de:	416d      	adcs	r5, r5
 80a53e0:	eb46 0606 	adc.w	r6, r6, r6
 80a53e4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a53e8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a53ec:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a53f0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a53f4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a53f8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a53fc:	bf88      	it	hi
 80a53fe:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a5402:	d81e      	bhi.n	80a5442 <__aeabi_dmul+0xde>
 80a5404:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a5408:	bf08      	it	eq
 80a540a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a540e:	f150 0000 	adcs.w	r0, r0, #0
 80a5412:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a5416:	bd70      	pop	{r4, r5, r6, pc}
 80a5418:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a541c:	ea46 0101 	orr.w	r1, r6, r1
 80a5420:	ea40 0002 	orr.w	r0, r0, r2
 80a5424:	ea81 0103 	eor.w	r1, r1, r3
 80a5428:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a542c:	bfc2      	ittt	gt
 80a542e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a5432:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a5436:	bd70      	popgt	{r4, r5, r6, pc}
 80a5438:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a543c:	f04f 0e00 	mov.w	lr, #0
 80a5440:	3c01      	subs	r4, #1
 80a5442:	f300 80ab 	bgt.w	80a559c <__aeabi_dmul+0x238>
 80a5446:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a544a:	bfde      	ittt	le
 80a544c:	2000      	movle	r0, #0
 80a544e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a5452:	bd70      	pople	{r4, r5, r6, pc}
 80a5454:	f1c4 0400 	rsb	r4, r4, #0
 80a5458:	3c20      	subs	r4, #32
 80a545a:	da35      	bge.n	80a54c8 <__aeabi_dmul+0x164>
 80a545c:	340c      	adds	r4, #12
 80a545e:	dc1b      	bgt.n	80a5498 <__aeabi_dmul+0x134>
 80a5460:	f104 0414 	add.w	r4, r4, #20
 80a5464:	f1c4 0520 	rsb	r5, r4, #32
 80a5468:	fa00 f305 	lsl.w	r3, r0, r5
 80a546c:	fa20 f004 	lsr.w	r0, r0, r4
 80a5470:	fa01 f205 	lsl.w	r2, r1, r5
 80a5474:	ea40 0002 	orr.w	r0, r0, r2
 80a5478:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a547c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a5480:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a5484:	fa21 f604 	lsr.w	r6, r1, r4
 80a5488:	eb42 0106 	adc.w	r1, r2, r6
 80a548c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a5490:	bf08      	it	eq
 80a5492:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a5496:	bd70      	pop	{r4, r5, r6, pc}
 80a5498:	f1c4 040c 	rsb	r4, r4, #12
 80a549c:	f1c4 0520 	rsb	r5, r4, #32
 80a54a0:	fa00 f304 	lsl.w	r3, r0, r4
 80a54a4:	fa20 f005 	lsr.w	r0, r0, r5
 80a54a8:	fa01 f204 	lsl.w	r2, r1, r4
 80a54ac:	ea40 0002 	orr.w	r0, r0, r2
 80a54b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a54b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a54b8:	f141 0100 	adc.w	r1, r1, #0
 80a54bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a54c0:	bf08      	it	eq
 80a54c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a54c6:	bd70      	pop	{r4, r5, r6, pc}
 80a54c8:	f1c4 0520 	rsb	r5, r4, #32
 80a54cc:	fa00 f205 	lsl.w	r2, r0, r5
 80a54d0:	ea4e 0e02 	orr.w	lr, lr, r2
 80a54d4:	fa20 f304 	lsr.w	r3, r0, r4
 80a54d8:	fa01 f205 	lsl.w	r2, r1, r5
 80a54dc:	ea43 0302 	orr.w	r3, r3, r2
 80a54e0:	fa21 f004 	lsr.w	r0, r1, r4
 80a54e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a54e8:	fa21 f204 	lsr.w	r2, r1, r4
 80a54ec:	ea20 0002 	bic.w	r0, r0, r2
 80a54f0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a54f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a54f8:	bf08      	it	eq
 80a54fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a54fe:	bd70      	pop	{r4, r5, r6, pc}
 80a5500:	f094 0f00 	teq	r4, #0
 80a5504:	d10f      	bne.n	80a5526 <__aeabi_dmul+0x1c2>
 80a5506:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a550a:	0040      	lsls	r0, r0, #1
 80a550c:	eb41 0101 	adc.w	r1, r1, r1
 80a5510:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a5514:	bf08      	it	eq
 80a5516:	3c01      	subeq	r4, #1
 80a5518:	d0f7      	beq.n	80a550a <__aeabi_dmul+0x1a6>
 80a551a:	ea41 0106 	orr.w	r1, r1, r6
 80a551e:	f095 0f00 	teq	r5, #0
 80a5522:	bf18      	it	ne
 80a5524:	4770      	bxne	lr
 80a5526:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a552a:	0052      	lsls	r2, r2, #1
 80a552c:	eb43 0303 	adc.w	r3, r3, r3
 80a5530:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a5534:	bf08      	it	eq
 80a5536:	3d01      	subeq	r5, #1
 80a5538:	d0f7      	beq.n	80a552a <__aeabi_dmul+0x1c6>
 80a553a:	ea43 0306 	orr.w	r3, r3, r6
 80a553e:	4770      	bx	lr
 80a5540:	ea94 0f0c 	teq	r4, ip
 80a5544:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a5548:	bf18      	it	ne
 80a554a:	ea95 0f0c 	teqne	r5, ip
 80a554e:	d00c      	beq.n	80a556a <__aeabi_dmul+0x206>
 80a5550:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a5554:	bf18      	it	ne
 80a5556:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a555a:	d1d1      	bne.n	80a5500 <__aeabi_dmul+0x19c>
 80a555c:	ea81 0103 	eor.w	r1, r1, r3
 80a5560:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a5564:	f04f 0000 	mov.w	r0, #0
 80a5568:	bd70      	pop	{r4, r5, r6, pc}
 80a556a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a556e:	bf06      	itte	eq
 80a5570:	4610      	moveq	r0, r2
 80a5572:	4619      	moveq	r1, r3
 80a5574:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a5578:	d019      	beq.n	80a55ae <__aeabi_dmul+0x24a>
 80a557a:	ea94 0f0c 	teq	r4, ip
 80a557e:	d102      	bne.n	80a5586 <__aeabi_dmul+0x222>
 80a5580:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a5584:	d113      	bne.n	80a55ae <__aeabi_dmul+0x24a>
 80a5586:	ea95 0f0c 	teq	r5, ip
 80a558a:	d105      	bne.n	80a5598 <__aeabi_dmul+0x234>
 80a558c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a5590:	bf1c      	itt	ne
 80a5592:	4610      	movne	r0, r2
 80a5594:	4619      	movne	r1, r3
 80a5596:	d10a      	bne.n	80a55ae <__aeabi_dmul+0x24a>
 80a5598:	ea81 0103 	eor.w	r1, r1, r3
 80a559c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a55a0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a55a4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a55a8:	f04f 0000 	mov.w	r0, #0
 80a55ac:	bd70      	pop	{r4, r5, r6, pc}
 80a55ae:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a55b2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a55b6:	bd70      	pop	{r4, r5, r6, pc}

080a55b8 <__aeabi_ddiv>:
 80a55b8:	b570      	push	{r4, r5, r6, lr}
 80a55ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a55be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a55c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a55c6:	bf1d      	ittte	ne
 80a55c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a55cc:	ea94 0f0c 	teqne	r4, ip
 80a55d0:	ea95 0f0c 	teqne	r5, ip
 80a55d4:	f000 f8a7 	bleq	80a5726 <__aeabi_ddiv+0x16e>
 80a55d8:	eba4 0405 	sub.w	r4, r4, r5
 80a55dc:	ea81 0e03 	eor.w	lr, r1, r3
 80a55e0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a55e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a55e8:	f000 8088 	beq.w	80a56fc <__aeabi_ddiv+0x144>
 80a55ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a55f0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a55f4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a55f8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a55fc:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a5600:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a5604:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a5608:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a560c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a5610:	429d      	cmp	r5, r3
 80a5612:	bf08      	it	eq
 80a5614:	4296      	cmpeq	r6, r2
 80a5616:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a561a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a561e:	d202      	bcs.n	80a5626 <__aeabi_ddiv+0x6e>
 80a5620:	085b      	lsrs	r3, r3, #1
 80a5622:	ea4f 0232 	mov.w	r2, r2, rrx
 80a5626:	1ab6      	subs	r6, r6, r2
 80a5628:	eb65 0503 	sbc.w	r5, r5, r3
 80a562c:	085b      	lsrs	r3, r3, #1
 80a562e:	ea4f 0232 	mov.w	r2, r2, rrx
 80a5632:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a5636:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a563a:	ebb6 0e02 	subs.w	lr, r6, r2
 80a563e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a5642:	bf22      	ittt	cs
 80a5644:	1ab6      	subcs	r6, r6, r2
 80a5646:	4675      	movcs	r5, lr
 80a5648:	ea40 000c 	orrcs.w	r0, r0, ip
 80a564c:	085b      	lsrs	r3, r3, #1
 80a564e:	ea4f 0232 	mov.w	r2, r2, rrx
 80a5652:	ebb6 0e02 	subs.w	lr, r6, r2
 80a5656:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a565a:	bf22      	ittt	cs
 80a565c:	1ab6      	subcs	r6, r6, r2
 80a565e:	4675      	movcs	r5, lr
 80a5660:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a5664:	085b      	lsrs	r3, r3, #1
 80a5666:	ea4f 0232 	mov.w	r2, r2, rrx
 80a566a:	ebb6 0e02 	subs.w	lr, r6, r2
 80a566e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a5672:	bf22      	ittt	cs
 80a5674:	1ab6      	subcs	r6, r6, r2
 80a5676:	4675      	movcs	r5, lr
 80a5678:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a567c:	085b      	lsrs	r3, r3, #1
 80a567e:	ea4f 0232 	mov.w	r2, r2, rrx
 80a5682:	ebb6 0e02 	subs.w	lr, r6, r2
 80a5686:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a568a:	bf22      	ittt	cs
 80a568c:	1ab6      	subcs	r6, r6, r2
 80a568e:	4675      	movcs	r5, lr
 80a5690:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a5694:	ea55 0e06 	orrs.w	lr, r5, r6
 80a5698:	d018      	beq.n	80a56cc <__aeabi_ddiv+0x114>
 80a569a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a569e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a56a2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a56a6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a56aa:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a56ae:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a56b2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a56b6:	d1c0      	bne.n	80a563a <__aeabi_ddiv+0x82>
 80a56b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a56bc:	d10b      	bne.n	80a56d6 <__aeabi_ddiv+0x11e>
 80a56be:	ea41 0100 	orr.w	r1, r1, r0
 80a56c2:	f04f 0000 	mov.w	r0, #0
 80a56c6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a56ca:	e7b6      	b.n	80a563a <__aeabi_ddiv+0x82>
 80a56cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a56d0:	bf04      	itt	eq
 80a56d2:	4301      	orreq	r1, r0
 80a56d4:	2000      	moveq	r0, #0
 80a56d6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a56da:	bf88      	it	hi
 80a56dc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a56e0:	f63f aeaf 	bhi.w	80a5442 <__aeabi_dmul+0xde>
 80a56e4:	ebb5 0c03 	subs.w	ip, r5, r3
 80a56e8:	bf04      	itt	eq
 80a56ea:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a56ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a56f2:	f150 0000 	adcs.w	r0, r0, #0
 80a56f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a56fa:	bd70      	pop	{r4, r5, r6, pc}
 80a56fc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a5700:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a5704:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a5708:	bfc2      	ittt	gt
 80a570a:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a570e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a5712:	bd70      	popgt	{r4, r5, r6, pc}
 80a5714:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a5718:	f04f 0e00 	mov.w	lr, #0
 80a571c:	3c01      	subs	r4, #1
 80a571e:	e690      	b.n	80a5442 <__aeabi_dmul+0xde>
 80a5720:	ea45 0e06 	orr.w	lr, r5, r6
 80a5724:	e68d      	b.n	80a5442 <__aeabi_dmul+0xde>
 80a5726:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a572a:	ea94 0f0c 	teq	r4, ip
 80a572e:	bf08      	it	eq
 80a5730:	ea95 0f0c 	teqeq	r5, ip
 80a5734:	f43f af3b 	beq.w	80a55ae <__aeabi_dmul+0x24a>
 80a5738:	ea94 0f0c 	teq	r4, ip
 80a573c:	d10a      	bne.n	80a5754 <__aeabi_ddiv+0x19c>
 80a573e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a5742:	f47f af34 	bne.w	80a55ae <__aeabi_dmul+0x24a>
 80a5746:	ea95 0f0c 	teq	r5, ip
 80a574a:	f47f af25 	bne.w	80a5598 <__aeabi_dmul+0x234>
 80a574e:	4610      	mov	r0, r2
 80a5750:	4619      	mov	r1, r3
 80a5752:	e72c      	b.n	80a55ae <__aeabi_dmul+0x24a>
 80a5754:	ea95 0f0c 	teq	r5, ip
 80a5758:	d106      	bne.n	80a5768 <__aeabi_ddiv+0x1b0>
 80a575a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a575e:	f43f aefd 	beq.w	80a555c <__aeabi_dmul+0x1f8>
 80a5762:	4610      	mov	r0, r2
 80a5764:	4619      	mov	r1, r3
 80a5766:	e722      	b.n	80a55ae <__aeabi_dmul+0x24a>
 80a5768:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a576c:	bf18      	it	ne
 80a576e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a5772:	f47f aec5 	bne.w	80a5500 <__aeabi_dmul+0x19c>
 80a5776:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a577a:	f47f af0d 	bne.w	80a5598 <__aeabi_dmul+0x234>
 80a577e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a5782:	f47f aeeb 	bne.w	80a555c <__aeabi_dmul+0x1f8>
 80a5786:	e712      	b.n	80a55ae <__aeabi_dmul+0x24a>

080a5788 <__gedf2>:
 80a5788:	f04f 3cff 	mov.w	ip, #4294967295
 80a578c:	e006      	b.n	80a579c <__cmpdf2+0x4>
 80a578e:	bf00      	nop

080a5790 <__ledf2>:
 80a5790:	f04f 0c01 	mov.w	ip, #1
 80a5794:	e002      	b.n	80a579c <__cmpdf2+0x4>
 80a5796:	bf00      	nop

080a5798 <__cmpdf2>:
 80a5798:	f04f 0c01 	mov.w	ip, #1
 80a579c:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a57a0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a57a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a57a8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a57ac:	bf18      	it	ne
 80a57ae:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80a57b2:	d01b      	beq.n	80a57ec <__cmpdf2+0x54>
 80a57b4:	b001      	add	sp, #4
 80a57b6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80a57ba:	bf0c      	ite	eq
 80a57bc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80a57c0:	ea91 0f03 	teqne	r1, r3
 80a57c4:	bf02      	ittt	eq
 80a57c6:	ea90 0f02 	teqeq	r0, r2
 80a57ca:	2000      	moveq	r0, #0
 80a57cc:	4770      	bxeq	lr
 80a57ce:	f110 0f00 	cmn.w	r0, #0
 80a57d2:	ea91 0f03 	teq	r1, r3
 80a57d6:	bf58      	it	pl
 80a57d8:	4299      	cmppl	r1, r3
 80a57da:	bf08      	it	eq
 80a57dc:	4290      	cmpeq	r0, r2
 80a57de:	bf2c      	ite	cs
 80a57e0:	17d8      	asrcs	r0, r3, #31
 80a57e2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80a57e6:	f040 0001 	orr.w	r0, r0, #1
 80a57ea:	4770      	bx	lr
 80a57ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a57f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a57f4:	d102      	bne.n	80a57fc <__cmpdf2+0x64>
 80a57f6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a57fa:	d107      	bne.n	80a580c <__cmpdf2+0x74>
 80a57fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a5800:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a5804:	d1d6      	bne.n	80a57b4 <__cmpdf2+0x1c>
 80a5806:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a580a:	d0d3      	beq.n	80a57b4 <__cmpdf2+0x1c>
 80a580c:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a5810:	4770      	bx	lr
 80a5812:	bf00      	nop

080a5814 <__aeabi_cdrcmple>:
 80a5814:	4684      	mov	ip, r0
 80a5816:	4610      	mov	r0, r2
 80a5818:	4662      	mov	r2, ip
 80a581a:	468c      	mov	ip, r1
 80a581c:	4619      	mov	r1, r3
 80a581e:	4663      	mov	r3, ip
 80a5820:	e000      	b.n	80a5824 <__aeabi_cdcmpeq>
 80a5822:	bf00      	nop

080a5824 <__aeabi_cdcmpeq>:
 80a5824:	b501      	push	{r0, lr}
 80a5826:	f7ff ffb7 	bl	80a5798 <__cmpdf2>
 80a582a:	2800      	cmp	r0, #0
 80a582c:	bf48      	it	mi
 80a582e:	f110 0f00 	cmnmi.w	r0, #0
 80a5832:	bd01      	pop	{r0, pc}

080a5834 <__aeabi_dcmpeq>:
 80a5834:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a5838:	f7ff fff4 	bl	80a5824 <__aeabi_cdcmpeq>
 80a583c:	bf0c      	ite	eq
 80a583e:	2001      	moveq	r0, #1
 80a5840:	2000      	movne	r0, #0
 80a5842:	f85d fb08 	ldr.w	pc, [sp], #8
 80a5846:	bf00      	nop

080a5848 <__aeabi_dcmplt>:
 80a5848:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a584c:	f7ff ffea 	bl	80a5824 <__aeabi_cdcmpeq>
 80a5850:	bf34      	ite	cc
 80a5852:	2001      	movcc	r0, #1
 80a5854:	2000      	movcs	r0, #0
 80a5856:	f85d fb08 	ldr.w	pc, [sp], #8
 80a585a:	bf00      	nop

080a585c <__aeabi_dcmple>:
 80a585c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a5860:	f7ff ffe0 	bl	80a5824 <__aeabi_cdcmpeq>
 80a5864:	bf94      	ite	ls
 80a5866:	2001      	movls	r0, #1
 80a5868:	2000      	movhi	r0, #0
 80a586a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a586e:	bf00      	nop

080a5870 <__aeabi_dcmpge>:
 80a5870:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a5874:	f7ff ffce 	bl	80a5814 <__aeabi_cdrcmple>
 80a5878:	bf94      	ite	ls
 80a587a:	2001      	movls	r0, #1
 80a587c:	2000      	movhi	r0, #0
 80a587e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a5882:	bf00      	nop

080a5884 <__aeabi_dcmpgt>:
 80a5884:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a5888:	f7ff ffc4 	bl	80a5814 <__aeabi_cdrcmple>
 80a588c:	bf34      	ite	cc
 80a588e:	2001      	movcc	r0, #1
 80a5890:	2000      	movcs	r0, #0
 80a5892:	f85d fb08 	ldr.w	pc, [sp], #8
 80a5896:	bf00      	nop

080a5898 <__aeabi_dcmpun>:
 80a5898:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a589c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a58a0:	d102      	bne.n	80a58a8 <__aeabi_dcmpun+0x10>
 80a58a2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a58a6:	d10a      	bne.n	80a58be <__aeabi_dcmpun+0x26>
 80a58a8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a58ac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a58b0:	d102      	bne.n	80a58b8 <__aeabi_dcmpun+0x20>
 80a58b2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a58b6:	d102      	bne.n	80a58be <__aeabi_dcmpun+0x26>
 80a58b8:	f04f 0000 	mov.w	r0, #0
 80a58bc:	4770      	bx	lr
 80a58be:	f04f 0001 	mov.w	r0, #1
 80a58c2:	4770      	bx	lr

080a58c4 <__aeabi_d2iz>:
 80a58c4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a58c8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a58cc:	d215      	bcs.n	80a58fa <__aeabi_d2iz+0x36>
 80a58ce:	d511      	bpl.n	80a58f4 <__aeabi_d2iz+0x30>
 80a58d0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a58d4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a58d8:	d912      	bls.n	80a5900 <__aeabi_d2iz+0x3c>
 80a58da:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a58de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a58e2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a58e6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a58ea:	fa23 f002 	lsr.w	r0, r3, r2
 80a58ee:	bf18      	it	ne
 80a58f0:	4240      	negne	r0, r0
 80a58f2:	4770      	bx	lr
 80a58f4:	f04f 0000 	mov.w	r0, #0
 80a58f8:	4770      	bx	lr
 80a58fa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a58fe:	d105      	bne.n	80a590c <__aeabi_d2iz+0x48>
 80a5900:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80a5904:	bf08      	it	eq
 80a5906:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a590a:	4770      	bx	lr
 80a590c:	f04f 0000 	mov.w	r0, #0
 80a5910:	4770      	bx	lr
 80a5912:	bf00      	nop

080a5914 <__aeabi_d2uiz>:
 80a5914:	004a      	lsls	r2, r1, #1
 80a5916:	d211      	bcs.n	80a593c <__aeabi_d2uiz+0x28>
 80a5918:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a591c:	d211      	bcs.n	80a5942 <__aeabi_d2uiz+0x2e>
 80a591e:	d50d      	bpl.n	80a593c <__aeabi_d2uiz+0x28>
 80a5920:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a5924:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a5928:	d40e      	bmi.n	80a5948 <__aeabi_d2uiz+0x34>
 80a592a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a592e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a5932:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a5936:	fa23 f002 	lsr.w	r0, r3, r2
 80a593a:	4770      	bx	lr
 80a593c:	f04f 0000 	mov.w	r0, #0
 80a5940:	4770      	bx	lr
 80a5942:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a5946:	d102      	bne.n	80a594e <__aeabi_d2uiz+0x3a>
 80a5948:	f04f 30ff 	mov.w	r0, #4294967295
 80a594c:	4770      	bx	lr
 80a594e:	f04f 0000 	mov.w	r0, #0
 80a5952:	4770      	bx	lr

080a5954 <__aeabi_d2f>:
 80a5954:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a5958:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80a595c:	bf24      	itt	cs
 80a595e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80a5962:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80a5966:	d90d      	bls.n	80a5984 <__aeabi_d2f+0x30>
 80a5968:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a596c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80a5970:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80a5974:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80a5978:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80a597c:	bf08      	it	eq
 80a597e:	f020 0001 	biceq.w	r0, r0, #1
 80a5982:	4770      	bx	lr
 80a5984:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80a5988:	d121      	bne.n	80a59ce <__aeabi_d2f+0x7a>
 80a598a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80a598e:	bfbc      	itt	lt
 80a5990:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80a5994:	4770      	bxlt	lr
 80a5996:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a599a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80a599e:	f1c2 0218 	rsb	r2, r2, #24
 80a59a2:	f1c2 0c20 	rsb	ip, r2, #32
 80a59a6:	fa10 f30c 	lsls.w	r3, r0, ip
 80a59aa:	fa20 f002 	lsr.w	r0, r0, r2
 80a59ae:	bf18      	it	ne
 80a59b0:	f040 0001 	orrne.w	r0, r0, #1
 80a59b4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a59b8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80a59bc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80a59c0:	ea40 000c 	orr.w	r0, r0, ip
 80a59c4:	fa23 f302 	lsr.w	r3, r3, r2
 80a59c8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80a59cc:	e7cc      	b.n	80a5968 <__aeabi_d2f+0x14>
 80a59ce:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80a59d2:	d107      	bne.n	80a59e4 <__aeabi_d2f+0x90>
 80a59d4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80a59d8:	bf1e      	ittt	ne
 80a59da:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80a59de:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80a59e2:	4770      	bxne	lr
 80a59e4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80a59e8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a59ec:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a59f0:	4770      	bx	lr
 80a59f2:	bf00      	nop

080a59f4 <__aeabi_frsub>:
 80a59f4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80a59f8:	e002      	b.n	80a5a00 <__addsf3>
 80a59fa:	bf00      	nop

080a59fc <__aeabi_fsub>:
 80a59fc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080a5a00 <__addsf3>:
 80a5a00:	0042      	lsls	r2, r0, #1
 80a5a02:	bf1f      	itttt	ne
 80a5a04:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80a5a08:	ea92 0f03 	teqne	r2, r3
 80a5a0c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80a5a10:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a5a14:	d06a      	beq.n	80a5aec <__addsf3+0xec>
 80a5a16:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80a5a1a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80a5a1e:	bfc1      	itttt	gt
 80a5a20:	18d2      	addgt	r2, r2, r3
 80a5a22:	4041      	eorgt	r1, r0
 80a5a24:	4048      	eorgt	r0, r1
 80a5a26:	4041      	eorgt	r1, r0
 80a5a28:	bfb8      	it	lt
 80a5a2a:	425b      	neglt	r3, r3
 80a5a2c:	2b19      	cmp	r3, #25
 80a5a2e:	bf88      	it	hi
 80a5a30:	4770      	bxhi	lr
 80a5a32:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a5a36:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a5a3a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80a5a3e:	bf18      	it	ne
 80a5a40:	4240      	negne	r0, r0
 80a5a42:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a5a46:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80a5a4a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80a5a4e:	bf18      	it	ne
 80a5a50:	4249      	negne	r1, r1
 80a5a52:	ea92 0f03 	teq	r2, r3
 80a5a56:	d03f      	beq.n	80a5ad8 <__addsf3+0xd8>
 80a5a58:	f1a2 0201 	sub.w	r2, r2, #1
 80a5a5c:	fa41 fc03 	asr.w	ip, r1, r3
 80a5a60:	eb10 000c 	adds.w	r0, r0, ip
 80a5a64:	f1c3 0320 	rsb	r3, r3, #32
 80a5a68:	fa01 f103 	lsl.w	r1, r1, r3
 80a5a6c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a5a70:	d502      	bpl.n	80a5a78 <__addsf3+0x78>
 80a5a72:	4249      	negs	r1, r1
 80a5a74:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80a5a78:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a5a7c:	d313      	bcc.n	80a5aa6 <__addsf3+0xa6>
 80a5a7e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80a5a82:	d306      	bcc.n	80a5a92 <__addsf3+0x92>
 80a5a84:	0840      	lsrs	r0, r0, #1
 80a5a86:	ea4f 0131 	mov.w	r1, r1, rrx
 80a5a8a:	f102 0201 	add.w	r2, r2, #1
 80a5a8e:	2afe      	cmp	r2, #254	; 0xfe
 80a5a90:	d251      	bcs.n	80a5b36 <__addsf3+0x136>
 80a5a92:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80a5a96:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a5a9a:	bf08      	it	eq
 80a5a9c:	f020 0001 	biceq.w	r0, r0, #1
 80a5aa0:	ea40 0003 	orr.w	r0, r0, r3
 80a5aa4:	4770      	bx	lr
 80a5aa6:	0049      	lsls	r1, r1, #1
 80a5aa8:	eb40 0000 	adc.w	r0, r0, r0
 80a5aac:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80a5ab0:	f1a2 0201 	sub.w	r2, r2, #1
 80a5ab4:	d1ed      	bne.n	80a5a92 <__addsf3+0x92>
 80a5ab6:	fab0 fc80 	clz	ip, r0
 80a5aba:	f1ac 0c08 	sub.w	ip, ip, #8
 80a5abe:	ebb2 020c 	subs.w	r2, r2, ip
 80a5ac2:	fa00 f00c 	lsl.w	r0, r0, ip
 80a5ac6:	bfaa      	itet	ge
 80a5ac8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80a5acc:	4252      	neglt	r2, r2
 80a5ace:	4318      	orrge	r0, r3
 80a5ad0:	bfbc      	itt	lt
 80a5ad2:	40d0      	lsrlt	r0, r2
 80a5ad4:	4318      	orrlt	r0, r3
 80a5ad6:	4770      	bx	lr
 80a5ad8:	f092 0f00 	teq	r2, #0
 80a5adc:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80a5ae0:	bf06      	itte	eq
 80a5ae2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80a5ae6:	3201      	addeq	r2, #1
 80a5ae8:	3b01      	subne	r3, #1
 80a5aea:	e7b5      	b.n	80a5a58 <__addsf3+0x58>
 80a5aec:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a5af0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a5af4:	bf18      	it	ne
 80a5af6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a5afa:	d021      	beq.n	80a5b40 <__addsf3+0x140>
 80a5afc:	ea92 0f03 	teq	r2, r3
 80a5b00:	d004      	beq.n	80a5b0c <__addsf3+0x10c>
 80a5b02:	f092 0f00 	teq	r2, #0
 80a5b06:	bf08      	it	eq
 80a5b08:	4608      	moveq	r0, r1
 80a5b0a:	4770      	bx	lr
 80a5b0c:	ea90 0f01 	teq	r0, r1
 80a5b10:	bf1c      	itt	ne
 80a5b12:	2000      	movne	r0, #0
 80a5b14:	4770      	bxne	lr
 80a5b16:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80a5b1a:	d104      	bne.n	80a5b26 <__addsf3+0x126>
 80a5b1c:	0040      	lsls	r0, r0, #1
 80a5b1e:	bf28      	it	cs
 80a5b20:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80a5b24:	4770      	bx	lr
 80a5b26:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80a5b2a:	bf3c      	itt	cc
 80a5b2c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80a5b30:	4770      	bxcc	lr
 80a5b32:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a5b36:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80a5b3a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a5b3e:	4770      	bx	lr
 80a5b40:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80a5b44:	bf16      	itet	ne
 80a5b46:	4608      	movne	r0, r1
 80a5b48:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80a5b4c:	4601      	movne	r1, r0
 80a5b4e:	0242      	lsls	r2, r0, #9
 80a5b50:	bf06      	itte	eq
 80a5b52:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80a5b56:	ea90 0f01 	teqeq	r0, r1
 80a5b5a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80a5b5e:	4770      	bx	lr

080a5b60 <__aeabi_ui2f>:
 80a5b60:	f04f 0300 	mov.w	r3, #0
 80a5b64:	e004      	b.n	80a5b70 <__aeabi_i2f+0x8>
 80a5b66:	bf00      	nop

080a5b68 <__aeabi_i2f>:
 80a5b68:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80a5b6c:	bf48      	it	mi
 80a5b6e:	4240      	negmi	r0, r0
 80a5b70:	ea5f 0c00 	movs.w	ip, r0
 80a5b74:	bf08      	it	eq
 80a5b76:	4770      	bxeq	lr
 80a5b78:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80a5b7c:	4601      	mov	r1, r0
 80a5b7e:	f04f 0000 	mov.w	r0, #0
 80a5b82:	e01c      	b.n	80a5bbe <__aeabi_l2f+0x2a>

080a5b84 <__aeabi_ul2f>:
 80a5b84:	ea50 0201 	orrs.w	r2, r0, r1
 80a5b88:	bf08      	it	eq
 80a5b8a:	4770      	bxeq	lr
 80a5b8c:	f04f 0300 	mov.w	r3, #0
 80a5b90:	e00a      	b.n	80a5ba8 <__aeabi_l2f+0x14>
 80a5b92:	bf00      	nop

080a5b94 <__aeabi_l2f>:
 80a5b94:	ea50 0201 	orrs.w	r2, r0, r1
 80a5b98:	bf08      	it	eq
 80a5b9a:	4770      	bxeq	lr
 80a5b9c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80a5ba0:	d502      	bpl.n	80a5ba8 <__aeabi_l2f+0x14>
 80a5ba2:	4240      	negs	r0, r0
 80a5ba4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a5ba8:	ea5f 0c01 	movs.w	ip, r1
 80a5bac:	bf02      	ittt	eq
 80a5bae:	4684      	moveq	ip, r0
 80a5bb0:	4601      	moveq	r1, r0
 80a5bb2:	2000      	moveq	r0, #0
 80a5bb4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80a5bb8:	bf08      	it	eq
 80a5bba:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80a5bbe:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80a5bc2:	fabc f28c 	clz	r2, ip
 80a5bc6:	3a08      	subs	r2, #8
 80a5bc8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80a5bcc:	db10      	blt.n	80a5bf0 <__aeabi_l2f+0x5c>
 80a5bce:	fa01 fc02 	lsl.w	ip, r1, r2
 80a5bd2:	4463      	add	r3, ip
 80a5bd4:	fa00 fc02 	lsl.w	ip, r0, r2
 80a5bd8:	f1c2 0220 	rsb	r2, r2, #32
 80a5bdc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a5be0:	fa20 f202 	lsr.w	r2, r0, r2
 80a5be4:	eb43 0002 	adc.w	r0, r3, r2
 80a5be8:	bf08      	it	eq
 80a5bea:	f020 0001 	biceq.w	r0, r0, #1
 80a5bee:	4770      	bx	lr
 80a5bf0:	f102 0220 	add.w	r2, r2, #32
 80a5bf4:	fa01 fc02 	lsl.w	ip, r1, r2
 80a5bf8:	f1c2 0220 	rsb	r2, r2, #32
 80a5bfc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80a5c00:	fa21 f202 	lsr.w	r2, r1, r2
 80a5c04:	eb43 0002 	adc.w	r0, r3, r2
 80a5c08:	bf08      	it	eq
 80a5c0a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a5c0e:	4770      	bx	lr

080a5c10 <__aeabi_fmul>:
 80a5c10:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a5c14:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a5c18:	bf1e      	ittt	ne
 80a5c1a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a5c1e:	ea92 0f0c 	teqne	r2, ip
 80a5c22:	ea93 0f0c 	teqne	r3, ip
 80a5c26:	d06f      	beq.n	80a5d08 <__aeabi_fmul+0xf8>
 80a5c28:	441a      	add	r2, r3
 80a5c2a:	ea80 0c01 	eor.w	ip, r0, r1
 80a5c2e:	0240      	lsls	r0, r0, #9
 80a5c30:	bf18      	it	ne
 80a5c32:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80a5c36:	d01e      	beq.n	80a5c76 <__aeabi_fmul+0x66>
 80a5c38:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80a5c3c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80a5c40:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80a5c44:	fba0 3101 	umull	r3, r1, r0, r1
 80a5c48:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a5c4c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80a5c50:	bf3e      	ittt	cc
 80a5c52:	0049      	lslcc	r1, r1, #1
 80a5c54:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80a5c58:	005b      	lslcc	r3, r3, #1
 80a5c5a:	ea40 0001 	orr.w	r0, r0, r1
 80a5c5e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80a5c62:	2afd      	cmp	r2, #253	; 0xfd
 80a5c64:	d81d      	bhi.n	80a5ca2 <__aeabi_fmul+0x92>
 80a5c66:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a5c6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a5c6e:	bf08      	it	eq
 80a5c70:	f020 0001 	biceq.w	r0, r0, #1
 80a5c74:	4770      	bx	lr
 80a5c76:	f090 0f00 	teq	r0, #0
 80a5c7a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a5c7e:	bf08      	it	eq
 80a5c80:	0249      	lsleq	r1, r1, #9
 80a5c82:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a5c86:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80a5c8a:	3a7f      	subs	r2, #127	; 0x7f
 80a5c8c:	bfc2      	ittt	gt
 80a5c8e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a5c92:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a5c96:	4770      	bxgt	lr
 80a5c98:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a5c9c:	f04f 0300 	mov.w	r3, #0
 80a5ca0:	3a01      	subs	r2, #1
 80a5ca2:	dc5d      	bgt.n	80a5d60 <__aeabi_fmul+0x150>
 80a5ca4:	f112 0f19 	cmn.w	r2, #25
 80a5ca8:	bfdc      	itt	le
 80a5caa:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80a5cae:	4770      	bxle	lr
 80a5cb0:	f1c2 0200 	rsb	r2, r2, #0
 80a5cb4:	0041      	lsls	r1, r0, #1
 80a5cb6:	fa21 f102 	lsr.w	r1, r1, r2
 80a5cba:	f1c2 0220 	rsb	r2, r2, #32
 80a5cbe:	fa00 fc02 	lsl.w	ip, r0, r2
 80a5cc2:	ea5f 0031 	movs.w	r0, r1, rrx
 80a5cc6:	f140 0000 	adc.w	r0, r0, #0
 80a5cca:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80a5cce:	bf08      	it	eq
 80a5cd0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a5cd4:	4770      	bx	lr
 80a5cd6:	f092 0f00 	teq	r2, #0
 80a5cda:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a5cde:	bf02      	ittt	eq
 80a5ce0:	0040      	lsleq	r0, r0, #1
 80a5ce2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a5ce6:	3a01      	subeq	r2, #1
 80a5ce8:	d0f9      	beq.n	80a5cde <__aeabi_fmul+0xce>
 80a5cea:	ea40 000c 	orr.w	r0, r0, ip
 80a5cee:	f093 0f00 	teq	r3, #0
 80a5cf2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a5cf6:	bf02      	ittt	eq
 80a5cf8:	0049      	lsleq	r1, r1, #1
 80a5cfa:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a5cfe:	3b01      	subeq	r3, #1
 80a5d00:	d0f9      	beq.n	80a5cf6 <__aeabi_fmul+0xe6>
 80a5d02:	ea41 010c 	orr.w	r1, r1, ip
 80a5d06:	e78f      	b.n	80a5c28 <__aeabi_fmul+0x18>
 80a5d08:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a5d0c:	ea92 0f0c 	teq	r2, ip
 80a5d10:	bf18      	it	ne
 80a5d12:	ea93 0f0c 	teqne	r3, ip
 80a5d16:	d00a      	beq.n	80a5d2e <__aeabi_fmul+0x11e>
 80a5d18:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a5d1c:	bf18      	it	ne
 80a5d1e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a5d22:	d1d8      	bne.n	80a5cd6 <__aeabi_fmul+0xc6>
 80a5d24:	ea80 0001 	eor.w	r0, r0, r1
 80a5d28:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a5d2c:	4770      	bx	lr
 80a5d2e:	f090 0f00 	teq	r0, #0
 80a5d32:	bf17      	itett	ne
 80a5d34:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80a5d38:	4608      	moveq	r0, r1
 80a5d3a:	f091 0f00 	teqne	r1, #0
 80a5d3e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80a5d42:	d014      	beq.n	80a5d6e <__aeabi_fmul+0x15e>
 80a5d44:	ea92 0f0c 	teq	r2, ip
 80a5d48:	d101      	bne.n	80a5d4e <__aeabi_fmul+0x13e>
 80a5d4a:	0242      	lsls	r2, r0, #9
 80a5d4c:	d10f      	bne.n	80a5d6e <__aeabi_fmul+0x15e>
 80a5d4e:	ea93 0f0c 	teq	r3, ip
 80a5d52:	d103      	bne.n	80a5d5c <__aeabi_fmul+0x14c>
 80a5d54:	024b      	lsls	r3, r1, #9
 80a5d56:	bf18      	it	ne
 80a5d58:	4608      	movne	r0, r1
 80a5d5a:	d108      	bne.n	80a5d6e <__aeabi_fmul+0x15e>
 80a5d5c:	ea80 0001 	eor.w	r0, r0, r1
 80a5d60:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a5d64:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a5d68:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a5d6c:	4770      	bx	lr
 80a5d6e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a5d72:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80a5d76:	4770      	bx	lr

080a5d78 <__aeabi_fdiv>:
 80a5d78:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a5d7c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a5d80:	bf1e      	ittt	ne
 80a5d82:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a5d86:	ea92 0f0c 	teqne	r2, ip
 80a5d8a:	ea93 0f0c 	teqne	r3, ip
 80a5d8e:	d069      	beq.n	80a5e64 <__aeabi_fdiv+0xec>
 80a5d90:	eba2 0203 	sub.w	r2, r2, r3
 80a5d94:	ea80 0c01 	eor.w	ip, r0, r1
 80a5d98:	0249      	lsls	r1, r1, #9
 80a5d9a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80a5d9e:	d037      	beq.n	80a5e10 <__aeabi_fdiv+0x98>
 80a5da0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80a5da4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80a5da8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80a5dac:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a5db0:	428b      	cmp	r3, r1
 80a5db2:	bf38      	it	cc
 80a5db4:	005b      	lslcc	r3, r3, #1
 80a5db6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80a5dba:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80a5dbe:	428b      	cmp	r3, r1
 80a5dc0:	bf24      	itt	cs
 80a5dc2:	1a5b      	subcs	r3, r3, r1
 80a5dc4:	ea40 000c 	orrcs.w	r0, r0, ip
 80a5dc8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80a5dcc:	bf24      	itt	cs
 80a5dce:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80a5dd2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a5dd6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80a5dda:	bf24      	itt	cs
 80a5ddc:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80a5de0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a5de4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80a5de8:	bf24      	itt	cs
 80a5dea:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80a5dee:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a5df2:	011b      	lsls	r3, r3, #4
 80a5df4:	bf18      	it	ne
 80a5df6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80a5dfa:	d1e0      	bne.n	80a5dbe <__aeabi_fdiv+0x46>
 80a5dfc:	2afd      	cmp	r2, #253	; 0xfd
 80a5dfe:	f63f af50 	bhi.w	80a5ca2 <__aeabi_fmul+0x92>
 80a5e02:	428b      	cmp	r3, r1
 80a5e04:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a5e08:	bf08      	it	eq
 80a5e0a:	f020 0001 	biceq.w	r0, r0, #1
 80a5e0e:	4770      	bx	lr
 80a5e10:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a5e14:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a5e18:	327f      	adds	r2, #127	; 0x7f
 80a5e1a:	bfc2      	ittt	gt
 80a5e1c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a5e20:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a5e24:	4770      	bxgt	lr
 80a5e26:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a5e2a:	f04f 0300 	mov.w	r3, #0
 80a5e2e:	3a01      	subs	r2, #1
 80a5e30:	e737      	b.n	80a5ca2 <__aeabi_fmul+0x92>
 80a5e32:	f092 0f00 	teq	r2, #0
 80a5e36:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a5e3a:	bf02      	ittt	eq
 80a5e3c:	0040      	lsleq	r0, r0, #1
 80a5e3e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a5e42:	3a01      	subeq	r2, #1
 80a5e44:	d0f9      	beq.n	80a5e3a <__aeabi_fdiv+0xc2>
 80a5e46:	ea40 000c 	orr.w	r0, r0, ip
 80a5e4a:	f093 0f00 	teq	r3, #0
 80a5e4e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a5e52:	bf02      	ittt	eq
 80a5e54:	0049      	lsleq	r1, r1, #1
 80a5e56:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a5e5a:	3b01      	subeq	r3, #1
 80a5e5c:	d0f9      	beq.n	80a5e52 <__aeabi_fdiv+0xda>
 80a5e5e:	ea41 010c 	orr.w	r1, r1, ip
 80a5e62:	e795      	b.n	80a5d90 <__aeabi_fdiv+0x18>
 80a5e64:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a5e68:	ea92 0f0c 	teq	r2, ip
 80a5e6c:	d108      	bne.n	80a5e80 <__aeabi_fdiv+0x108>
 80a5e6e:	0242      	lsls	r2, r0, #9
 80a5e70:	f47f af7d 	bne.w	80a5d6e <__aeabi_fmul+0x15e>
 80a5e74:	ea93 0f0c 	teq	r3, ip
 80a5e78:	f47f af70 	bne.w	80a5d5c <__aeabi_fmul+0x14c>
 80a5e7c:	4608      	mov	r0, r1
 80a5e7e:	e776      	b.n	80a5d6e <__aeabi_fmul+0x15e>
 80a5e80:	ea93 0f0c 	teq	r3, ip
 80a5e84:	d104      	bne.n	80a5e90 <__aeabi_fdiv+0x118>
 80a5e86:	024b      	lsls	r3, r1, #9
 80a5e88:	f43f af4c 	beq.w	80a5d24 <__aeabi_fmul+0x114>
 80a5e8c:	4608      	mov	r0, r1
 80a5e8e:	e76e      	b.n	80a5d6e <__aeabi_fmul+0x15e>
 80a5e90:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a5e94:	bf18      	it	ne
 80a5e96:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a5e9a:	d1ca      	bne.n	80a5e32 <__aeabi_fdiv+0xba>
 80a5e9c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80a5ea0:	f47f af5c 	bne.w	80a5d5c <__aeabi_fmul+0x14c>
 80a5ea4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80a5ea8:	f47f af3c 	bne.w	80a5d24 <__aeabi_fmul+0x114>
 80a5eac:	e75f      	b.n	80a5d6e <__aeabi_fmul+0x15e>
 80a5eae:	bf00      	nop

080a5eb0 <__gesf2>:
 80a5eb0:	f04f 3cff 	mov.w	ip, #4294967295
 80a5eb4:	e006      	b.n	80a5ec4 <__cmpsf2+0x4>
 80a5eb6:	bf00      	nop

080a5eb8 <__lesf2>:
 80a5eb8:	f04f 0c01 	mov.w	ip, #1
 80a5ebc:	e002      	b.n	80a5ec4 <__cmpsf2+0x4>
 80a5ebe:	bf00      	nop

080a5ec0 <__cmpsf2>:
 80a5ec0:	f04f 0c01 	mov.w	ip, #1
 80a5ec4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a5ec8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a5ecc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a5ed0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a5ed4:	bf18      	it	ne
 80a5ed6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a5eda:	d011      	beq.n	80a5f00 <__cmpsf2+0x40>
 80a5edc:	b001      	add	sp, #4
 80a5ede:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80a5ee2:	bf18      	it	ne
 80a5ee4:	ea90 0f01 	teqne	r0, r1
 80a5ee8:	bf58      	it	pl
 80a5eea:	ebb2 0003 	subspl.w	r0, r2, r3
 80a5eee:	bf88      	it	hi
 80a5ef0:	17c8      	asrhi	r0, r1, #31
 80a5ef2:	bf38      	it	cc
 80a5ef4:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80a5ef8:	bf18      	it	ne
 80a5efa:	f040 0001 	orrne.w	r0, r0, #1
 80a5efe:	4770      	bx	lr
 80a5f00:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a5f04:	d102      	bne.n	80a5f0c <__cmpsf2+0x4c>
 80a5f06:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80a5f0a:	d105      	bne.n	80a5f18 <__cmpsf2+0x58>
 80a5f0c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80a5f10:	d1e4      	bne.n	80a5edc <__cmpsf2+0x1c>
 80a5f12:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80a5f16:	d0e1      	beq.n	80a5edc <__cmpsf2+0x1c>
 80a5f18:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a5f1c:	4770      	bx	lr
 80a5f1e:	bf00      	nop

080a5f20 <__aeabi_cfrcmple>:
 80a5f20:	4684      	mov	ip, r0
 80a5f22:	4608      	mov	r0, r1
 80a5f24:	4661      	mov	r1, ip
 80a5f26:	e7ff      	b.n	80a5f28 <__aeabi_cfcmpeq>

080a5f28 <__aeabi_cfcmpeq>:
 80a5f28:	b50f      	push	{r0, r1, r2, r3, lr}
 80a5f2a:	f7ff ffc9 	bl	80a5ec0 <__cmpsf2>
 80a5f2e:	2800      	cmp	r0, #0
 80a5f30:	bf48      	it	mi
 80a5f32:	f110 0f00 	cmnmi.w	r0, #0
 80a5f36:	bd0f      	pop	{r0, r1, r2, r3, pc}

080a5f38 <__aeabi_fcmpeq>:
 80a5f38:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a5f3c:	f7ff fff4 	bl	80a5f28 <__aeabi_cfcmpeq>
 80a5f40:	bf0c      	ite	eq
 80a5f42:	2001      	moveq	r0, #1
 80a5f44:	2000      	movne	r0, #0
 80a5f46:	f85d fb08 	ldr.w	pc, [sp], #8
 80a5f4a:	bf00      	nop

080a5f4c <__aeabi_fcmplt>:
 80a5f4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a5f50:	f7ff ffea 	bl	80a5f28 <__aeabi_cfcmpeq>
 80a5f54:	bf34      	ite	cc
 80a5f56:	2001      	movcc	r0, #1
 80a5f58:	2000      	movcs	r0, #0
 80a5f5a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a5f5e:	bf00      	nop

080a5f60 <__aeabi_fcmple>:
 80a5f60:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a5f64:	f7ff ffe0 	bl	80a5f28 <__aeabi_cfcmpeq>
 80a5f68:	bf94      	ite	ls
 80a5f6a:	2001      	movls	r0, #1
 80a5f6c:	2000      	movhi	r0, #0
 80a5f6e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a5f72:	bf00      	nop

080a5f74 <__aeabi_fcmpge>:
 80a5f74:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a5f78:	f7ff ffd2 	bl	80a5f20 <__aeabi_cfrcmple>
 80a5f7c:	bf94      	ite	ls
 80a5f7e:	2001      	movls	r0, #1
 80a5f80:	2000      	movhi	r0, #0
 80a5f82:	f85d fb08 	ldr.w	pc, [sp], #8
 80a5f86:	bf00      	nop

080a5f88 <__aeabi_fcmpgt>:
 80a5f88:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a5f8c:	f7ff ffc8 	bl	80a5f20 <__aeabi_cfrcmple>
 80a5f90:	bf34      	ite	cc
 80a5f92:	2001      	movcc	r0, #1
 80a5f94:	2000      	movcs	r0, #0
 80a5f96:	f85d fb08 	ldr.w	pc, [sp], #8
 80a5f9a:	bf00      	nop

080a5f9c <__aeabi_f2iz>:
 80a5f9c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a5fa0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80a5fa4:	d30f      	bcc.n	80a5fc6 <__aeabi_f2iz+0x2a>
 80a5fa6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80a5faa:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80a5fae:	d90d      	bls.n	80a5fcc <__aeabi_f2iz+0x30>
 80a5fb0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80a5fb4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a5fb8:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a5fbc:	fa23 f002 	lsr.w	r0, r3, r2
 80a5fc0:	bf18      	it	ne
 80a5fc2:	4240      	negne	r0, r0
 80a5fc4:	4770      	bx	lr
 80a5fc6:	f04f 0000 	mov.w	r0, #0
 80a5fca:	4770      	bx	lr
 80a5fcc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80a5fd0:	d101      	bne.n	80a5fd6 <__aeabi_f2iz+0x3a>
 80a5fd2:	0242      	lsls	r2, r0, #9
 80a5fd4:	d105      	bne.n	80a5fe2 <__aeabi_f2iz+0x46>
 80a5fd6:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80a5fda:	bf08      	it	eq
 80a5fdc:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a5fe0:	4770      	bx	lr
 80a5fe2:	f04f 0000 	mov.w	r0, #0
 80a5fe6:	4770      	bx	lr

080a5fe8 <__aeabi_uldivmod>:
 80a5fe8:	b953      	cbnz	r3, 80a6000 <__aeabi_uldivmod+0x18>
 80a5fea:	b94a      	cbnz	r2, 80a6000 <__aeabi_uldivmod+0x18>
 80a5fec:	2900      	cmp	r1, #0
 80a5fee:	bf08      	it	eq
 80a5ff0:	2800      	cmpeq	r0, #0
 80a5ff2:	bf1c      	itt	ne
 80a5ff4:	f04f 31ff 	movne.w	r1, #4294967295
 80a5ff8:	f04f 30ff 	movne.w	r0, #4294967295
 80a5ffc:	f000 b9a6 	b.w	80a634c <__aeabi_idiv0>
 80a6000:	f1ad 0c08 	sub.w	ip, sp, #8
 80a6004:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80a6008:	f000 f82a 	bl	80a6060 <__udivmoddi4>
 80a600c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a6010:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a6014:	b004      	add	sp, #16
 80a6016:	4770      	bx	lr

080a6018 <__aeabi_d2ulz>:
 80a6018:	b5d0      	push	{r4, r6, r7, lr}
 80a601a:	2200      	movs	r2, #0
 80a601c:	4b0e      	ldr	r3, [pc, #56]	; (80a6058 <__aeabi_d2ulz+0x40>)
 80a601e:	4606      	mov	r6, r0
 80a6020:	460f      	mov	r7, r1
 80a6022:	f7ff f99f 	bl	80a5364 <__aeabi_dmul>
 80a6026:	f7ff fc75 	bl	80a5914 <__aeabi_d2uiz>
 80a602a:	4604      	mov	r4, r0
 80a602c:	f7ff f924 	bl	80a5278 <__aeabi_ui2d>
 80a6030:	2200      	movs	r2, #0
 80a6032:	4b0a      	ldr	r3, [pc, #40]	; (80a605c <__aeabi_d2ulz+0x44>)
 80a6034:	f7ff f996 	bl	80a5364 <__aeabi_dmul>
 80a6038:	4602      	mov	r2, r0
 80a603a:	460b      	mov	r3, r1
 80a603c:	4630      	mov	r0, r6
 80a603e:	4639      	mov	r1, r7
 80a6040:	f7fe ffdc 	bl	80a4ffc <__aeabi_dsub>
 80a6044:	f7ff fc66 	bl	80a5914 <__aeabi_d2uiz>
 80a6048:	4623      	mov	r3, r4
 80a604a:	2200      	movs	r2, #0
 80a604c:	ea42 0200 	orr.w	r2, r2, r0
 80a6050:	4610      	mov	r0, r2
 80a6052:	4619      	mov	r1, r3
 80a6054:	bdd0      	pop	{r4, r6, r7, pc}
 80a6056:	bf00      	nop
 80a6058:	3df00000 	.word	0x3df00000
 80a605c:	41f00000 	.word	0x41f00000

080a6060 <__udivmoddi4>:
 80a6060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a6064:	468c      	mov	ip, r1
 80a6066:	460c      	mov	r4, r1
 80a6068:	4605      	mov	r5, r0
 80a606a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80a606c:	2b00      	cmp	r3, #0
 80a606e:	d14f      	bne.n	80a6110 <__udivmoddi4+0xb0>
 80a6070:	428a      	cmp	r2, r1
 80a6072:	4617      	mov	r7, r2
 80a6074:	d96b      	bls.n	80a614e <__udivmoddi4+0xee>
 80a6076:	fab2 fe82 	clz	lr, r2
 80a607a:	f1be 0f00 	cmp.w	lr, #0
 80a607e:	d00b      	beq.n	80a6098 <__udivmoddi4+0x38>
 80a6080:	f1ce 0520 	rsb	r5, lr, #32
 80a6084:	fa20 f505 	lsr.w	r5, r0, r5
 80a6088:	fa01 f30e 	lsl.w	r3, r1, lr
 80a608c:	ea45 0c03 	orr.w	ip, r5, r3
 80a6090:	fa02 f70e 	lsl.w	r7, r2, lr
 80a6094:	fa00 f50e 	lsl.w	r5, r0, lr
 80a6098:	0c39      	lsrs	r1, r7, #16
 80a609a:	fbbc f0f1 	udiv	r0, ip, r1
 80a609e:	b2ba      	uxth	r2, r7
 80a60a0:	fb01 c310 	mls	r3, r1, r0, ip
 80a60a4:	fb00 f802 	mul.w	r8, r0, r2
 80a60a8:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 80a60ac:	ea4c 4403 	orr.w	r4, ip, r3, lsl #16
 80a60b0:	45a0      	cmp	r8, r4
 80a60b2:	d909      	bls.n	80a60c8 <__udivmoddi4+0x68>
 80a60b4:	19e4      	adds	r4, r4, r7
 80a60b6:	f100 33ff 	add.w	r3, r0, #4294967295
 80a60ba:	f080 8128 	bcs.w	80a630e <__udivmoddi4+0x2ae>
 80a60be:	45a0      	cmp	r8, r4
 80a60c0:	f240 8125 	bls.w	80a630e <__udivmoddi4+0x2ae>
 80a60c4:	3802      	subs	r0, #2
 80a60c6:	443c      	add	r4, r7
 80a60c8:	ebc8 0404 	rsb	r4, r8, r4
 80a60cc:	fbb4 f3f1 	udiv	r3, r4, r1
 80a60d0:	fb01 4c13 	mls	ip, r1, r3, r4
 80a60d4:	fb03 f202 	mul.w	r2, r3, r2
 80a60d8:	b2ac      	uxth	r4, r5
 80a60da:	ea44 410c 	orr.w	r1, r4, ip, lsl #16
 80a60de:	428a      	cmp	r2, r1
 80a60e0:	d909      	bls.n	80a60f6 <__udivmoddi4+0x96>
 80a60e2:	19c9      	adds	r1, r1, r7
 80a60e4:	f103 34ff 	add.w	r4, r3, #4294967295
 80a60e8:	f080 810f 	bcs.w	80a630a <__udivmoddi4+0x2aa>
 80a60ec:	428a      	cmp	r2, r1
 80a60ee:	f240 810c 	bls.w	80a630a <__udivmoddi4+0x2aa>
 80a60f2:	3b02      	subs	r3, #2
 80a60f4:	4439      	add	r1, r7
 80a60f6:	1a8a      	subs	r2, r1, r2
 80a60f8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80a60fc:	2100      	movs	r1, #0
 80a60fe:	2e00      	cmp	r6, #0
 80a6100:	d063      	beq.n	80a61ca <__udivmoddi4+0x16a>
 80a6102:	fa22 f20e 	lsr.w	r2, r2, lr
 80a6106:	2300      	movs	r3, #0
 80a6108:	e886 000c 	stmia.w	r6, {r2, r3}
 80a610c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a6110:	428b      	cmp	r3, r1
 80a6112:	d907      	bls.n	80a6124 <__udivmoddi4+0xc4>
 80a6114:	2e00      	cmp	r6, #0
 80a6116:	d056      	beq.n	80a61c6 <__udivmoddi4+0x166>
 80a6118:	2100      	movs	r1, #0
 80a611a:	e886 0011 	stmia.w	r6, {r0, r4}
 80a611e:	4608      	mov	r0, r1
 80a6120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a6124:	fab3 f183 	clz	r1, r3
 80a6128:	2900      	cmp	r1, #0
 80a612a:	f040 8093 	bne.w	80a6254 <__udivmoddi4+0x1f4>
 80a612e:	42a3      	cmp	r3, r4
 80a6130:	d302      	bcc.n	80a6138 <__udivmoddi4+0xd8>
 80a6132:	4282      	cmp	r2, r0
 80a6134:	f200 80fe 	bhi.w	80a6334 <__udivmoddi4+0x2d4>
 80a6138:	1a85      	subs	r5, r0, r2
 80a613a:	eb64 0303 	sbc.w	r3, r4, r3
 80a613e:	469c      	mov	ip, r3
 80a6140:	2001      	movs	r0, #1
 80a6142:	2e00      	cmp	r6, #0
 80a6144:	d041      	beq.n	80a61ca <__udivmoddi4+0x16a>
 80a6146:	e886 1020 	stmia.w	r6, {r5, ip}
 80a614a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a614e:	b912      	cbnz	r2, 80a6156 <__udivmoddi4+0xf6>
 80a6150:	2701      	movs	r7, #1
 80a6152:	fbb7 f7f2 	udiv	r7, r7, r2
 80a6156:	fab7 fe87 	clz	lr, r7
 80a615a:	f1be 0f00 	cmp.w	lr, #0
 80a615e:	d136      	bne.n	80a61ce <__udivmoddi4+0x16e>
 80a6160:	1be4      	subs	r4, r4, r7
 80a6162:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80a6166:	fa1f f987 	uxth.w	r9, r7
 80a616a:	2101      	movs	r1, #1
 80a616c:	fbb4 f3f8 	udiv	r3, r4, r8
 80a6170:	fb08 4413 	mls	r4, r8, r3, r4
 80a6174:	fb09 f203 	mul.w	r2, r9, r3
 80a6178:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 80a617c:	ea4c 4404 	orr.w	r4, ip, r4, lsl #16
 80a6180:	42a2      	cmp	r2, r4
 80a6182:	d907      	bls.n	80a6194 <__udivmoddi4+0x134>
 80a6184:	19e4      	adds	r4, r4, r7
 80a6186:	f103 30ff 	add.w	r0, r3, #4294967295
 80a618a:	d202      	bcs.n	80a6192 <__udivmoddi4+0x132>
 80a618c:	42a2      	cmp	r2, r4
 80a618e:	f200 80d3 	bhi.w	80a6338 <__udivmoddi4+0x2d8>
 80a6192:	4603      	mov	r3, r0
 80a6194:	1aa4      	subs	r4, r4, r2
 80a6196:	fbb4 f0f8 	udiv	r0, r4, r8
 80a619a:	fb08 4810 	mls	r8, r8, r0, r4
 80a619e:	fb09 f900 	mul.w	r9, r9, r0
 80a61a2:	b2ac      	uxth	r4, r5
 80a61a4:	ea44 4208 	orr.w	r2, r4, r8, lsl #16
 80a61a8:	4591      	cmp	r9, r2
 80a61aa:	d907      	bls.n	80a61bc <__udivmoddi4+0x15c>
 80a61ac:	19d2      	adds	r2, r2, r7
 80a61ae:	f100 34ff 	add.w	r4, r0, #4294967295
 80a61b2:	d202      	bcs.n	80a61ba <__udivmoddi4+0x15a>
 80a61b4:	4591      	cmp	r9, r2
 80a61b6:	f200 80ba 	bhi.w	80a632e <__udivmoddi4+0x2ce>
 80a61ba:	4620      	mov	r0, r4
 80a61bc:	ebc9 0202 	rsb	r2, r9, r2
 80a61c0:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80a61c4:	e79b      	b.n	80a60fe <__udivmoddi4+0x9e>
 80a61c6:	4631      	mov	r1, r6
 80a61c8:	4630      	mov	r0, r6
 80a61ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a61ce:	fa07 f70e 	lsl.w	r7, r7, lr
 80a61d2:	f1ce 0c20 	rsb	ip, lr, #32
 80a61d6:	fa24 f30c 	lsr.w	r3, r4, ip
 80a61da:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80a61de:	fbb3 faf8 	udiv	sl, r3, r8
 80a61e2:	fa1f f987 	uxth.w	r9, r7
 80a61e6:	fb08 351a 	mls	r5, r8, sl, r3
 80a61ea:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a61ee:	fa04 f40e 	lsl.w	r4, r4, lr
 80a61f2:	fb0a fb09 	mul.w	fp, sl, r9
 80a61f6:	ea4c 0c04 	orr.w	ip, ip, r4
 80a61fa:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80a61fe:	ea42 4305 	orr.w	r3, r2, r5, lsl #16
 80a6202:	459b      	cmp	fp, r3
 80a6204:	fa00 f50e 	lsl.w	r5, r0, lr
 80a6208:	d90a      	bls.n	80a6220 <__udivmoddi4+0x1c0>
 80a620a:	19db      	adds	r3, r3, r7
 80a620c:	f10a 32ff 	add.w	r2, sl, #4294967295
 80a6210:	f080 808b 	bcs.w	80a632a <__udivmoddi4+0x2ca>
 80a6214:	459b      	cmp	fp, r3
 80a6216:	f240 8088 	bls.w	80a632a <__udivmoddi4+0x2ca>
 80a621a:	f1aa 0a02 	sub.w	sl, sl, #2
 80a621e:	443b      	add	r3, r7
 80a6220:	ebcb 0303 	rsb	r3, fp, r3
 80a6224:	fbb3 f0f8 	udiv	r0, r3, r8
 80a6228:	fb08 3310 	mls	r3, r8, r0, r3
 80a622c:	fb00 f409 	mul.w	r4, r0, r9
 80a6230:	fa1f fc8c 	uxth.w	ip, ip
 80a6234:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
 80a6238:	429c      	cmp	r4, r3
 80a623a:	d907      	bls.n	80a624c <__udivmoddi4+0x1ec>
 80a623c:	19db      	adds	r3, r3, r7
 80a623e:	f100 32ff 	add.w	r2, r0, #4294967295
 80a6242:	d26e      	bcs.n	80a6322 <__udivmoddi4+0x2c2>
 80a6244:	429c      	cmp	r4, r3
 80a6246:	d96c      	bls.n	80a6322 <__udivmoddi4+0x2c2>
 80a6248:	3802      	subs	r0, #2
 80a624a:	443b      	add	r3, r7
 80a624c:	1b1c      	subs	r4, r3, r4
 80a624e:	ea40 410a 	orr.w	r1, r0, sl, lsl #16
 80a6252:	e78b      	b.n	80a616c <__udivmoddi4+0x10c>
 80a6254:	f1c1 0e20 	rsb	lr, r1, #32
 80a6258:	408b      	lsls	r3, r1
 80a625a:	fa22 fc0e 	lsr.w	ip, r2, lr
 80a625e:	ea4c 0c03 	orr.w	ip, ip, r3
 80a6262:	fa24 f70e 	lsr.w	r7, r4, lr
 80a6266:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80a626a:	fbb7 faf9 	udiv	sl, r7, r9
 80a626e:	fa1f f38c 	uxth.w	r3, ip
 80a6272:	fb09 771a 	mls	r7, r9, sl, r7
 80a6276:	fa20 f80e 	lsr.w	r8, r0, lr
 80a627a:	408c      	lsls	r4, r1
 80a627c:	fb0a f503 	mul.w	r5, sl, r3
 80a6280:	ea48 0404 	orr.w	r4, r8, r4
 80a6284:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80a6288:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
 80a628c:	42bd      	cmp	r5, r7
 80a628e:	fa02 f201 	lsl.w	r2, r2, r1
 80a6292:	fa00 fb01 	lsl.w	fp, r0, r1
 80a6296:	d909      	bls.n	80a62ac <__udivmoddi4+0x24c>
 80a6298:	eb17 070c 	adds.w	r7, r7, ip
 80a629c:	f10a 30ff 	add.w	r0, sl, #4294967295
 80a62a0:	d241      	bcs.n	80a6326 <__udivmoddi4+0x2c6>
 80a62a2:	42bd      	cmp	r5, r7
 80a62a4:	d93f      	bls.n	80a6326 <__udivmoddi4+0x2c6>
 80a62a6:	f1aa 0a02 	sub.w	sl, sl, #2
 80a62aa:	4467      	add	r7, ip
 80a62ac:	1b7f      	subs	r7, r7, r5
 80a62ae:	fbb7 f5f9 	udiv	r5, r7, r9
 80a62b2:	fb09 7715 	mls	r7, r9, r5, r7
 80a62b6:	fb05 f303 	mul.w	r3, r5, r3
 80a62ba:	b2a4      	uxth	r4, r4
 80a62bc:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 80a62c0:	42bb      	cmp	r3, r7
 80a62c2:	d908      	bls.n	80a62d6 <__udivmoddi4+0x276>
 80a62c4:	eb17 070c 	adds.w	r7, r7, ip
 80a62c8:	f105 30ff 	add.w	r0, r5, #4294967295
 80a62cc:	d227      	bcs.n	80a631e <__udivmoddi4+0x2be>
 80a62ce:	42bb      	cmp	r3, r7
 80a62d0:	d925      	bls.n	80a631e <__udivmoddi4+0x2be>
 80a62d2:	3d02      	subs	r5, #2
 80a62d4:	4467      	add	r7, ip
 80a62d6:	ea45 400a 	orr.w	r0, r5, sl, lsl #16
 80a62da:	fba0 8902 	umull	r8, r9, r0, r2
 80a62de:	1aff      	subs	r7, r7, r3
 80a62e0:	454f      	cmp	r7, r9
 80a62e2:	4645      	mov	r5, r8
 80a62e4:	464c      	mov	r4, r9
 80a62e6:	d314      	bcc.n	80a6312 <__udivmoddi4+0x2b2>
 80a62e8:	d029      	beq.n	80a633e <__udivmoddi4+0x2de>
 80a62ea:	b366      	cbz	r6, 80a6346 <__udivmoddi4+0x2e6>
 80a62ec:	ebbb 0305 	subs.w	r3, fp, r5
 80a62f0:	eb67 0704 	sbc.w	r7, r7, r4
 80a62f4:	fa07 fe0e 	lsl.w	lr, r7, lr
 80a62f8:	40cb      	lsrs	r3, r1
 80a62fa:	40cf      	lsrs	r7, r1
 80a62fc:	ea4e 0303 	orr.w	r3, lr, r3
 80a6300:	e886 0088 	stmia.w	r6, {r3, r7}
 80a6304:	2100      	movs	r1, #0
 80a6306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a630a:	4623      	mov	r3, r4
 80a630c:	e6f3      	b.n	80a60f6 <__udivmoddi4+0x96>
 80a630e:	4618      	mov	r0, r3
 80a6310:	e6da      	b.n	80a60c8 <__udivmoddi4+0x68>
 80a6312:	ebb8 0502 	subs.w	r5, r8, r2
 80a6316:	eb69 040c 	sbc.w	r4, r9, ip
 80a631a:	3801      	subs	r0, #1
 80a631c:	e7e5      	b.n	80a62ea <__udivmoddi4+0x28a>
 80a631e:	4605      	mov	r5, r0
 80a6320:	e7d9      	b.n	80a62d6 <__udivmoddi4+0x276>
 80a6322:	4610      	mov	r0, r2
 80a6324:	e792      	b.n	80a624c <__udivmoddi4+0x1ec>
 80a6326:	4682      	mov	sl, r0
 80a6328:	e7c0      	b.n	80a62ac <__udivmoddi4+0x24c>
 80a632a:	4692      	mov	sl, r2
 80a632c:	e778      	b.n	80a6220 <__udivmoddi4+0x1c0>
 80a632e:	3802      	subs	r0, #2
 80a6330:	443a      	add	r2, r7
 80a6332:	e743      	b.n	80a61bc <__udivmoddi4+0x15c>
 80a6334:	4608      	mov	r0, r1
 80a6336:	e704      	b.n	80a6142 <__udivmoddi4+0xe2>
 80a6338:	3b02      	subs	r3, #2
 80a633a:	443c      	add	r4, r7
 80a633c:	e72a      	b.n	80a6194 <__udivmoddi4+0x134>
 80a633e:	45c3      	cmp	fp, r8
 80a6340:	d3e7      	bcc.n	80a6312 <__udivmoddi4+0x2b2>
 80a6342:	463c      	mov	r4, r7
 80a6344:	e7d1      	b.n	80a62ea <__udivmoddi4+0x28a>
 80a6346:	4631      	mov	r1, r6
 80a6348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a634c <__aeabi_idiv0>:
 80a634c:	4770      	bx	lr
 80a634e:	bf00      	nop

080a6350 <asctime>:
 80a6350:	4b09      	ldr	r3, [pc, #36]	; (80a6378 <asctime+0x28>)
 80a6352:	b570      	push	{r4, r5, r6, lr}
 80a6354:	681c      	ldr	r4, [r3, #0]
 80a6356:	4606      	mov	r6, r0
 80a6358:	6c25      	ldr	r5, [r4, #64]	; 0x40
 80a635a:	b93d      	cbnz	r5, 80a636c <asctime+0x1c>
 80a635c:	201a      	movs	r0, #26
 80a635e:	f7fc ff8b 	bl	80a3278 <malloc>
 80a6362:	221a      	movs	r2, #26
 80a6364:	6420      	str	r0, [r4, #64]	; 0x40
 80a6366:	4629      	mov	r1, r5
 80a6368:	f000 f94b 	bl	80a6602 <memset>
 80a636c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80a636e:	4630      	mov	r0, r6
 80a6370:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a6374:	f000 b802 	b.w	80a637c <asctime_r>
 80a6378:	20000074 	.word	0x20000074

080a637c <asctime_r>:
 80a637c:	b510      	push	{r4, lr}
 80a637e:	460c      	mov	r4, r1
 80a6380:	6941      	ldr	r1, [r0, #20]
 80a6382:	b086      	sub	sp, #24
 80a6384:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 80a6388:	6903      	ldr	r3, [r0, #16]
 80a638a:	6982      	ldr	r2, [r0, #24]
 80a638c:	9104      	str	r1, [sp, #16]
 80a638e:	6801      	ldr	r1, [r0, #0]
 80a6390:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80a6394:	9103      	str	r1, [sp, #12]
 80a6396:	6841      	ldr	r1, [r0, #4]
 80a6398:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80a639c:	9102      	str	r1, [sp, #8]
 80a639e:	6881      	ldr	r1, [r0, #8]
 80a63a0:	9101      	str	r1, [sp, #4]
 80a63a2:	68c1      	ldr	r1, [r0, #12]
 80a63a4:	4620      	mov	r0, r4
 80a63a6:	9100      	str	r1, [sp, #0]
 80a63a8:	4904      	ldr	r1, [pc, #16]	; (80a63bc <asctime_r+0x40>)
 80a63aa:	440b      	add	r3, r1
 80a63ac:	4904      	ldr	r1, [pc, #16]	; (80a63c0 <asctime_r+0x44>)
 80a63ae:	440a      	add	r2, r1
 80a63b0:	4904      	ldr	r1, [pc, #16]	; (80a63c4 <asctime_r+0x48>)
 80a63b2:	f7fc ff79 	bl	80a32a8 <siprintf>
 80a63b6:	4620      	mov	r0, r4
 80a63b8:	b006      	add	sp, #24
 80a63ba:	bd10      	pop	{r4, pc}
 80a63bc:	080a9cae 	.word	0x080a9cae
 80a63c0:	080a9c99 	.word	0x080a9c99
 80a63c4:	080a9cd2 	.word	0x080a9cd2

080a63c8 <atof>:
 80a63c8:	2100      	movs	r1, #0
 80a63ca:	f001 bcc5 	b.w	80a7d58 <strtod>

080a63ce <atol>:
 80a63ce:	220a      	movs	r2, #10
 80a63d0:	2100      	movs	r1, #0
 80a63d2:	f001 bd4f 	b.w	80a7e74 <strtol>
	...

080a63d8 <__cxa_atexit>:
 80a63d8:	b510      	push	{r4, lr}
 80a63da:	4c05      	ldr	r4, [pc, #20]	; (80a63f0 <__cxa_atexit+0x18>)
 80a63dc:	4613      	mov	r3, r2
 80a63de:	b12c      	cbz	r4, 80a63ec <__cxa_atexit+0x14>
 80a63e0:	460a      	mov	r2, r1
 80a63e2:	4601      	mov	r1, r0
 80a63e4:	2002      	movs	r0, #2
 80a63e6:	f3af 8000 	nop.w
 80a63ea:	bd10      	pop	{r4, pc}
 80a63ec:	4620      	mov	r0, r4
 80a63ee:	bd10      	pop	{r4, pc}
 80a63f0:	00000000 	.word	0x00000000

080a63f4 <localtime>:
 80a63f4:	b538      	push	{r3, r4, r5, lr}
 80a63f6:	4b07      	ldr	r3, [pc, #28]	; (80a6414 <localtime+0x20>)
 80a63f8:	4605      	mov	r5, r0
 80a63fa:	681c      	ldr	r4, [r3, #0]
 80a63fc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80a63fe:	b91b      	cbnz	r3, 80a6408 <localtime+0x14>
 80a6400:	2024      	movs	r0, #36	; 0x24
 80a6402:	f7fc ff39 	bl	80a3278 <malloc>
 80a6406:	63e0      	str	r0, [r4, #60]	; 0x3c
 80a6408:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80a640a:	4628      	mov	r0, r5
 80a640c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a6410:	f000 b802 	b.w	80a6418 <localtime_r>
 80a6414:	20000074 	.word	0x20000074

080a6418 <localtime_r>:
 80a6418:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a641c:	460c      	mov	r4, r1
 80a641e:	4680      	mov	r8, r0
 80a6420:	f002 fb60 	bl	80a8ae4 <__gettzinfo>
 80a6424:	4621      	mov	r1, r4
 80a6426:	4607      	mov	r7, r0
 80a6428:	4640      	mov	r0, r8
 80a642a:	f002 fb5f 	bl	80a8aec <gmtime_r>
 80a642e:	6946      	ldr	r6, [r0, #20]
 80a6430:	4604      	mov	r4, r0
 80a6432:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 80a6436:	07b3      	lsls	r3, r6, #30
 80a6438:	d105      	bne.n	80a6446 <localtime_r+0x2e>
 80a643a:	2264      	movs	r2, #100	; 0x64
 80a643c:	fb96 f3f2 	sdiv	r3, r6, r2
 80a6440:	fb02 6313 	mls	r3, r2, r3, r6
 80a6444:	b94b      	cbnz	r3, 80a645a <localtime_r+0x42>
 80a6446:	f44f 75c8 	mov.w	r5, #400	; 0x190
 80a644a:	fb96 f3f5 	sdiv	r3, r6, r5
 80a644e:	fb05 6513 	mls	r5, r5, r3, r6
 80a6452:	fab5 f385 	clz	r3, r5
 80a6456:	095b      	lsrs	r3, r3, #5
 80a6458:	e000      	b.n	80a645c <localtime_r+0x44>
 80a645a:	2301      	movs	r3, #1
 80a645c:	4a5f      	ldr	r2, [pc, #380]	; (80a65dc <localtime_r+0x1c4>)
 80a645e:	2530      	movs	r5, #48	; 0x30
 80a6460:	fb05 2503 	mla	r5, r5, r3, r2
 80a6464:	f001 fe50 	bl	80a8108 <__tz_lock>
 80a6468:	f001 fe50 	bl	80a810c <_tzset_unlocked>
 80a646c:	4b5c      	ldr	r3, [pc, #368]	; (80a65e0 <localtime_r+0x1c8>)
 80a646e:	681b      	ldr	r3, [r3, #0]
 80a6470:	b1f3      	cbz	r3, 80a64b0 <localtime_r+0x98>
 80a6472:	687b      	ldr	r3, [r7, #4]
 80a6474:	429e      	cmp	r6, r3
 80a6476:	d105      	bne.n	80a6484 <localtime_r+0x6c>
 80a6478:	6839      	ldr	r1, [r7, #0]
 80a647a:	f8d8 3000 	ldr.w	r3, [r8]
 80a647e:	69fa      	ldr	r2, [r7, #28]
 80a6480:	b941      	cbnz	r1, 80a6494 <localtime_r+0x7c>
 80a6482:	e00a      	b.n	80a649a <localtime_r+0x82>
 80a6484:	4630      	mov	r0, r6
 80a6486:	f001 fd97 	bl	80a7fb8 <__tzcalc_limits>
 80a648a:	2800      	cmp	r0, #0
 80a648c:	d1f4      	bne.n	80a6478 <localtime_r+0x60>
 80a648e:	f04f 33ff 	mov.w	r3, #4294967295
 80a6492:	e00d      	b.n	80a64b0 <localtime_r+0x98>
 80a6494:	4293      	cmp	r3, r2
 80a6496:	db08      	blt.n	80a64aa <localtime_r+0x92>
 80a6498:	e001      	b.n	80a649e <localtime_r+0x86>
 80a649a:	4293      	cmp	r3, r2
 80a649c:	da07      	bge.n	80a64ae <localtime_r+0x96>
 80a649e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80a64a0:	4293      	cmp	r3, r2
 80a64a2:	bfac      	ite	ge
 80a64a4:	2300      	movge	r3, #0
 80a64a6:	2301      	movlt	r3, #1
 80a64a8:	e002      	b.n	80a64b0 <localtime_r+0x98>
 80a64aa:	2300      	movs	r3, #0
 80a64ac:	e000      	b.n	80a64b0 <localtime_r+0x98>
 80a64ae:	2301      	movs	r3, #1
 80a64b0:	6223      	str	r3, [r4, #32]
 80a64b2:	6a23      	ldr	r3, [r4, #32]
 80a64b4:	203c      	movs	r0, #60	; 0x3c
 80a64b6:	2b01      	cmp	r3, #1
 80a64b8:	bf0c      	ite	eq
 80a64ba:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
 80a64bc:	6a39      	ldrne	r1, [r7, #32]
 80a64be:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80a64c2:	fb91 f6f3 	sdiv	r6, r1, r3
 80a64c6:	fb03 1316 	mls	r3, r3, r6, r1
 80a64ca:	fb93 f2f0 	sdiv	r2, r3, r0
 80a64ce:	fb00 3012 	mls	r0, r0, r2, r3
 80a64d2:	6861      	ldr	r1, [r4, #4]
 80a64d4:	6823      	ldr	r3, [r4, #0]
 80a64d6:	1a89      	subs	r1, r1, r2
 80a64d8:	68a2      	ldr	r2, [r4, #8]
 80a64da:	1a1b      	subs	r3, r3, r0
 80a64dc:	1b92      	subs	r2, r2, r6
 80a64de:	2b3b      	cmp	r3, #59	; 0x3b
 80a64e0:	6023      	str	r3, [r4, #0]
 80a64e2:	6061      	str	r1, [r4, #4]
 80a64e4:	60a2      	str	r2, [r4, #8]
 80a64e6:	dd03      	ble.n	80a64f0 <localtime_r+0xd8>
 80a64e8:	3101      	adds	r1, #1
 80a64ea:	6061      	str	r1, [r4, #4]
 80a64ec:	3b3c      	subs	r3, #60	; 0x3c
 80a64ee:	e004      	b.n	80a64fa <localtime_r+0xe2>
 80a64f0:	2b00      	cmp	r3, #0
 80a64f2:	da03      	bge.n	80a64fc <localtime_r+0xe4>
 80a64f4:	3901      	subs	r1, #1
 80a64f6:	6061      	str	r1, [r4, #4]
 80a64f8:	333c      	adds	r3, #60	; 0x3c
 80a64fa:	6023      	str	r3, [r4, #0]
 80a64fc:	6863      	ldr	r3, [r4, #4]
 80a64fe:	2b3b      	cmp	r3, #59	; 0x3b
 80a6500:	dd03      	ble.n	80a650a <localtime_r+0xf2>
 80a6502:	3201      	adds	r2, #1
 80a6504:	60a2      	str	r2, [r4, #8]
 80a6506:	3b3c      	subs	r3, #60	; 0x3c
 80a6508:	e004      	b.n	80a6514 <localtime_r+0xfc>
 80a650a:	2b00      	cmp	r3, #0
 80a650c:	da03      	bge.n	80a6516 <localtime_r+0xfe>
 80a650e:	3a01      	subs	r2, #1
 80a6510:	60a2      	str	r2, [r4, #8]
 80a6512:	333c      	adds	r3, #60	; 0x3c
 80a6514:	6063      	str	r3, [r4, #4]
 80a6516:	68a3      	ldr	r3, [r4, #8]
 80a6518:	2b17      	cmp	r3, #23
 80a651a:	dd22      	ble.n	80a6562 <localtime_r+0x14a>
 80a651c:	69e2      	ldr	r2, [r4, #28]
 80a651e:	3b18      	subs	r3, #24
 80a6520:	3201      	adds	r2, #1
 80a6522:	61e2      	str	r2, [r4, #28]
 80a6524:	69a2      	ldr	r2, [r4, #24]
 80a6526:	60a3      	str	r3, [r4, #8]
 80a6528:	3201      	adds	r2, #1
 80a652a:	2a06      	cmp	r2, #6
 80a652c:	bfc8      	it	gt
 80a652e:	2200      	movgt	r2, #0
 80a6530:	61a2      	str	r2, [r4, #24]
 80a6532:	68e2      	ldr	r2, [r4, #12]
 80a6534:	6923      	ldr	r3, [r4, #16]
 80a6536:	3201      	adds	r2, #1
 80a6538:	60e2      	str	r2, [r4, #12]
 80a653a:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 80a653e:	428a      	cmp	r2, r1
 80a6540:	dd46      	ble.n	80a65d0 <localtime_r+0x1b8>
 80a6542:	3301      	adds	r3, #1
 80a6544:	2b0c      	cmp	r3, #12
 80a6546:	bf08      	it	eq
 80a6548:	6963      	ldreq	r3, [r4, #20]
 80a654a:	eba2 0201 	sub.w	r2, r2, r1
 80a654e:	60e2      	str	r2, [r4, #12]
 80a6550:	bf05      	ittet	eq
 80a6552:	3301      	addeq	r3, #1
 80a6554:	2200      	moveq	r2, #0
 80a6556:	6123      	strne	r3, [r4, #16]
 80a6558:	6122      	streq	r2, [r4, #16]
 80a655a:	bf04      	itt	eq
 80a655c:	6163      	streq	r3, [r4, #20]
 80a655e:	61e2      	streq	r2, [r4, #28]
 80a6560:	e036      	b.n	80a65d0 <localtime_r+0x1b8>
 80a6562:	2b00      	cmp	r3, #0
 80a6564:	da34      	bge.n	80a65d0 <localtime_r+0x1b8>
 80a6566:	69e2      	ldr	r2, [r4, #28]
 80a6568:	3318      	adds	r3, #24
 80a656a:	3a01      	subs	r2, #1
 80a656c:	61e2      	str	r2, [r4, #28]
 80a656e:	69a2      	ldr	r2, [r4, #24]
 80a6570:	60a3      	str	r3, [r4, #8]
 80a6572:	3a01      	subs	r2, #1
 80a6574:	bf48      	it	mi
 80a6576:	2206      	movmi	r2, #6
 80a6578:	61a2      	str	r2, [r4, #24]
 80a657a:	68e2      	ldr	r2, [r4, #12]
 80a657c:	3a01      	subs	r2, #1
 80a657e:	60e2      	str	r2, [r4, #12]
 80a6580:	bb32      	cbnz	r2, 80a65d0 <localtime_r+0x1b8>
 80a6582:	6923      	ldr	r3, [r4, #16]
 80a6584:	3b01      	subs	r3, #1
 80a6586:	d401      	bmi.n	80a658c <localtime_r+0x174>
 80a6588:	6123      	str	r3, [r4, #16]
 80a658a:	e01d      	b.n	80a65c8 <localtime_r+0x1b0>
 80a658c:	230b      	movs	r3, #11
 80a658e:	6123      	str	r3, [r4, #16]
 80a6590:	6963      	ldr	r3, [r4, #20]
 80a6592:	1e5a      	subs	r2, r3, #1
 80a6594:	f012 0f03 	tst.w	r2, #3
 80a6598:	6162      	str	r2, [r4, #20]
 80a659a:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 80a659e:	d105      	bne.n	80a65ac <localtime_r+0x194>
 80a65a0:	2164      	movs	r1, #100	; 0x64
 80a65a2:	fb93 f2f1 	sdiv	r2, r3, r1
 80a65a6:	fb01 3212 	mls	r2, r1, r2, r3
 80a65aa:	b94a      	cbnz	r2, 80a65c0 <localtime_r+0x1a8>
 80a65ac:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80a65b0:	fb93 f2f1 	sdiv	r2, r3, r1
 80a65b4:	fb01 3312 	mls	r3, r1, r2, r3
 80a65b8:	fab3 f383 	clz	r3, r3
 80a65bc:	095b      	lsrs	r3, r3, #5
 80a65be:	e000      	b.n	80a65c2 <localtime_r+0x1aa>
 80a65c0:	2301      	movs	r3, #1
 80a65c2:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 80a65c6:	61e3      	str	r3, [r4, #28]
 80a65c8:	6923      	ldr	r3, [r4, #16]
 80a65ca:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80a65ce:	60e3      	str	r3, [r4, #12]
 80a65d0:	f001 fd9b 	bl	80a810a <__tz_unlock>
 80a65d4:	4620      	mov	r0, r4
 80a65d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a65da:	bf00      	nop
 80a65dc:	080a9e5c 	.word	0x080a9e5c
 80a65e0:	20000790 	.word	0x20000790

080a65e4 <_localeconv_r>:
 80a65e4:	4800      	ldr	r0, [pc, #0]	; (80a65e8 <_localeconv_r+0x4>)
 80a65e6:	4770      	bx	lr
 80a65e8:	20000078 	.word	0x20000078

080a65ec <memcpy>:
 80a65ec:	b510      	push	{r4, lr}
 80a65ee:	1e43      	subs	r3, r0, #1
 80a65f0:	440a      	add	r2, r1
 80a65f2:	4291      	cmp	r1, r2
 80a65f4:	d004      	beq.n	80a6600 <memcpy+0x14>
 80a65f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a65fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a65fe:	e7f8      	b.n	80a65f2 <memcpy+0x6>
 80a6600:	bd10      	pop	{r4, pc}

080a6602 <memset>:
 80a6602:	4603      	mov	r3, r0
 80a6604:	4402      	add	r2, r0
 80a6606:	4293      	cmp	r3, r2
 80a6608:	d002      	beq.n	80a6610 <memset+0xe>
 80a660a:	f803 1b01 	strb.w	r1, [r3], #1
 80a660e:	e7fa      	b.n	80a6606 <memset+0x4>
 80a6610:	4770      	bx	lr
	...

080a6614 <srand>:
 80a6614:	b538      	push	{r3, r4, r5, lr}
 80a6616:	4b12      	ldr	r3, [pc, #72]	; (80a6660 <srand+0x4c>)
 80a6618:	4605      	mov	r5, r0
 80a661a:	681c      	ldr	r4, [r3, #0]
 80a661c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a661e:	b9d3      	cbnz	r3, 80a6656 <srand+0x42>
 80a6620:	2018      	movs	r0, #24
 80a6622:	f7fc fe29 	bl	80a3278 <malloc>
 80a6626:	f243 330e 	movw	r3, #13070	; 0x330e
 80a662a:	63a0      	str	r0, [r4, #56]	; 0x38
 80a662c:	8003      	strh	r3, [r0, #0]
 80a662e:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a6632:	8043      	strh	r3, [r0, #2]
 80a6634:	f241 2334 	movw	r3, #4660	; 0x1234
 80a6638:	8083      	strh	r3, [r0, #4]
 80a663a:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a663e:	80c3      	strh	r3, [r0, #6]
 80a6640:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a6644:	8103      	strh	r3, [r0, #8]
 80a6646:	2305      	movs	r3, #5
 80a6648:	8143      	strh	r3, [r0, #10]
 80a664a:	230b      	movs	r3, #11
 80a664c:	8183      	strh	r3, [r0, #12]
 80a664e:	2201      	movs	r2, #1
 80a6650:	2300      	movs	r3, #0
 80a6652:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a6656:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a6658:	2200      	movs	r2, #0
 80a665a:	611d      	str	r5, [r3, #16]
 80a665c:	615a      	str	r2, [r3, #20]
 80a665e:	bd38      	pop	{r3, r4, r5, pc}
 80a6660:	20000074 	.word	0x20000074

080a6664 <strcmp>:
 80a6664:	f810 2b01 	ldrb.w	r2, [r0], #1
 80a6668:	f811 3b01 	ldrb.w	r3, [r1], #1
 80a666c:	2a01      	cmp	r2, #1
 80a666e:	bf28      	it	cs
 80a6670:	429a      	cmpcs	r2, r3
 80a6672:	d0f7      	beq.n	80a6664 <strcmp>
 80a6674:	1ad0      	subs	r0, r2, r3
 80a6676:	4770      	bx	lr

080a6678 <strcpy>:
 80a6678:	4603      	mov	r3, r0
 80a667a:	f811 2b01 	ldrb.w	r2, [r1], #1
 80a667e:	f803 2b01 	strb.w	r2, [r3], #1
 80a6682:	2a00      	cmp	r2, #0
 80a6684:	d1f9      	bne.n	80a667a <strcpy+0x2>
 80a6686:	4770      	bx	lr

080a6688 <iso_year_adjust>:
 80a6688:	6941      	ldr	r1, [r0, #20]
 80a668a:	b510      	push	{r4, lr}
 80a668c:	078b      	lsls	r3, r1, #30
 80a668e:	d10c      	bne.n	80a66aa <iso_year_adjust+0x22>
 80a6690:	f240 736c 	movw	r3, #1900	; 0x76c
 80a6694:	2900      	cmp	r1, #0
 80a6696:	bfa8      	it	ge
 80a6698:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 80a669c:	440b      	add	r3, r1
 80a669e:	2464      	movs	r4, #100	; 0x64
 80a66a0:	fb93 f2f4 	sdiv	r2, r3, r4
 80a66a4:	fb04 3312 	mls	r3, r4, r2, r3
 80a66a8:	b983      	cbnz	r3, 80a66cc <iso_year_adjust+0x44>
 80a66aa:	f240 736c 	movw	r3, #1900	; 0x76c
 80a66ae:	2900      	cmp	r1, #0
 80a66b0:	bfa8      	it	ge
 80a66b2:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 80a66b6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80a66ba:	440b      	add	r3, r1
 80a66bc:	fb93 f1f2 	sdiv	r1, r3, r2
 80a66c0:	fb02 3311 	mls	r3, r2, r1, r3
 80a66c4:	fab3 f283 	clz	r2, r3
 80a66c8:	0952      	lsrs	r2, r2, #5
 80a66ca:	e000      	b.n	80a66ce <iso_year_adjust+0x46>
 80a66cc:	2201      	movs	r2, #1
 80a66ce:	6983      	ldr	r3, [r0, #24]
 80a66d0:	69c1      	ldr	r1, [r0, #28]
 80a66d2:	005b      	lsls	r3, r3, #1
 80a66d4:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 80a66d8:	4413      	add	r3, r2
 80a66da:	2b21      	cmp	r3, #33	; 0x21
 80a66dc:	dc0e      	bgt.n	80a66fc <iso_year_adjust+0x74>
 80a66de:	2b20      	cmp	r3, #32
 80a66e0:	da2f      	bge.n	80a6742 <iso_year_adjust+0xba>
 80a66e2:	2b0d      	cmp	r3, #13
 80a66e4:	dc02      	bgt.n	80a66ec <iso_year_adjust+0x64>
 80a66e6:	2b0a      	cmp	r3, #10
 80a66e8:	db05      	blt.n	80a66f6 <iso_year_adjust+0x6e>
 80a66ea:	e02a      	b.n	80a6742 <iso_year_adjust+0xba>
 80a66ec:	2b10      	cmp	r3, #16
 80a66ee:	db26      	blt.n	80a673e <iso_year_adjust+0xb6>
 80a66f0:	2b11      	cmp	r3, #17
 80a66f2:	dd26      	ble.n	80a6742 <iso_year_adjust+0xba>
 80a66f4:	3b1c      	subs	r3, #28
 80a66f6:	2b01      	cmp	r3, #1
 80a66f8:	d923      	bls.n	80a6742 <iso_year_adjust+0xba>
 80a66fa:	e020      	b.n	80a673e <iso_year_adjust+0xb6>
 80a66fc:	f241 62c6 	movw	r2, #5830	; 0x16c6
 80a6700:	4293      	cmp	r3, r2
 80a6702:	dc0e      	bgt.n	80a6722 <iso_year_adjust+0x9a>
 80a6704:	f241 62c2 	movw	r2, #5826	; 0x16c2
 80a6708:	4293      	cmp	r3, r2
 80a670a:	da16      	bge.n	80a673a <iso_year_adjust+0xb2>
 80a670c:	f241 62a2 	movw	r2, #5794	; 0x16a2
 80a6710:	4293      	cmp	r3, r2
 80a6712:	d012      	beq.n	80a673a <iso_year_adjust+0xb2>
 80a6714:	db13      	blt.n	80a673e <iso_year_adjust+0xb6>
 80a6716:	f5a3 53b5 	sub.w	r3, r3, #5792	; 0x16a0
 80a671a:	3b12      	subs	r3, #18
 80a671c:	2b02      	cmp	r3, #2
 80a671e:	d90c      	bls.n	80a673a <iso_year_adjust+0xb2>
 80a6720:	e00d      	b.n	80a673e <iso_year_adjust+0xb6>
 80a6722:	f241 62d5 	movw	r2, #5845	; 0x16d5
 80a6726:	4293      	cmp	r3, r2
 80a6728:	d007      	beq.n	80a673a <iso_year_adjust+0xb2>
 80a672a:	f241 62d7 	movw	r2, #5847	; 0x16d7
 80a672e:	4293      	cmp	r3, r2
 80a6730:	d003      	beq.n	80a673a <iso_year_adjust+0xb2>
 80a6732:	f241 62d3 	movw	r2, #5843	; 0x16d3
 80a6736:	4293      	cmp	r3, r2
 80a6738:	d101      	bne.n	80a673e <iso_year_adjust+0xb6>
 80a673a:	2001      	movs	r0, #1
 80a673c:	bd10      	pop	{r4, pc}
 80a673e:	2000      	movs	r0, #0
 80a6740:	bd10      	pop	{r4, pc}
 80a6742:	f04f 30ff 	mov.w	r0, #4294967295
 80a6746:	bd10      	pop	{r4, pc}

080a6748 <strftime>:
 80a6748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a674c:	460e      	mov	r6, r1
 80a674e:	b093      	sub	sp, #76	; 0x4c
 80a6750:	461d      	mov	r5, r3
 80a6752:	4607      	mov	r7, r0
 80a6754:	4691      	mov	r9, r2
 80a6756:	f001 fc1f 	bl	80a7f98 <__get_current_time_locale>
 80a675a:	2300      	movs	r3, #0
 80a675c:	9306      	str	r3, [sp, #24]
 80a675e:	461c      	mov	r4, r3
 80a6760:	1e73      	subs	r3, r6, #1
 80a6762:	9003      	str	r0, [sp, #12]
 80a6764:	9302      	str	r3, [sp, #8]
 80a6766:	f899 3000 	ldrb.w	r3, [r9]
 80a676a:	2b00      	cmp	r3, #0
 80a676c:	f000 8492 	beq.w	80a7094 <strftime+0x94c>
 80a6770:	2b25      	cmp	r3, #37	; 0x25
 80a6772:	d008      	beq.n	80a6786 <strftime+0x3e>
 80a6774:	9a02      	ldr	r2, [sp, #8]
 80a6776:	4294      	cmp	r4, r2
 80a6778:	f080 8490 	bcs.w	80a709c <strftime+0x954>
 80a677c:	553b      	strb	r3, [r7, r4]
 80a677e:	f109 0901 	add.w	r9, r9, #1
 80a6782:	3401      	adds	r4, #1
 80a6784:	e7ef      	b.n	80a6766 <strftime+0x1e>
 80a6786:	f899 a001 	ldrb.w	sl, [r9, #1]
 80a678a:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
 80a678e:	d007      	beq.n	80a67a0 <strftime+0x58>
 80a6790:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 80a6794:	d004      	beq.n	80a67a0 <strftime+0x58>
 80a6796:	f109 0901 	add.w	r9, r9, #1
 80a679a:	f04f 0a00 	mov.w	sl, #0
 80a679e:	e001      	b.n	80a67a4 <strftime+0x5c>
 80a67a0:	f109 0902 	add.w	r9, r9, #2
 80a67a4:	f899 3000 	ldrb.w	r3, [r9]
 80a67a8:	3b31      	subs	r3, #49	; 0x31
 80a67aa:	2b08      	cmp	r3, #8
 80a67ac:	d808      	bhi.n	80a67c0 <strftime+0x78>
 80a67ae:	4648      	mov	r0, r9
 80a67b0:	220a      	movs	r2, #10
 80a67b2:	a90a      	add	r1, sp, #40	; 0x28
 80a67b4:	f001 fbe6 	bl	80a7f84 <strtoul>
 80a67b8:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 80a67bc:	4680      	mov	r8, r0
 80a67be:	e001      	b.n	80a67c4 <strftime+0x7c>
 80a67c0:	f04f 0800 	mov.w	r8, #0
 80a67c4:	f899 3000 	ldrb.w	r3, [r9]
 80a67c8:	2b45      	cmp	r3, #69	; 0x45
 80a67ca:	d001      	beq.n	80a67d0 <strftime+0x88>
 80a67cc:	2b4f      	cmp	r3, #79	; 0x4f
 80a67ce:	d101      	bne.n	80a67d4 <strftime+0x8c>
 80a67d0:	f109 0901 	add.w	r9, r9, #1
 80a67d4:	f899 0000 	ldrb.w	r0, [r9]
 80a67d8:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
 80a67dc:	2b55      	cmp	r3, #85	; 0x55
 80a67de:	f200 845d 	bhi.w	80a709c <strftime+0x954>
 80a67e2:	e8df f013 	tbh	[pc, r3, lsl #1]
 80a67e6:	044a      	.short	0x044a
 80a67e8:	045b045b 	.word	0x045b045b
 80a67ec:	045b045b 	.word	0x045b045b
 80a67f0:	045b045b 	.word	0x045b045b
 80a67f4:	045b045b 	.word	0x045b045b
 80a67f8:	045b045b 	.word	0x045b045b
 80a67fc:	045b045b 	.word	0x045b045b
 80a6800:	045b045b 	.word	0x045b045b
 80a6804:	045b045b 	.word	0x045b045b
 80a6808:	045b045b 	.word	0x045b045b
 80a680c:	045b045b 	.word	0x045b045b
 80a6810:	045b045b 	.word	0x045b045b
 80a6814:	045b045b 	.word	0x045b045b
 80a6818:	045b045b 	.word	0x045b045b
 80a681c:	006f045b 	.word	0x006f045b
 80a6820:	00d400a1 	.word	0x00d400a1
 80a6824:	045b011a 	.word	0x045b011a
 80a6828:	01a0013f 	.word	0x01a0013f
 80a682c:	022d0226 	.word	0x022d0226
 80a6830:	045b045b 	.word	0x045b045b
 80a6834:	0260045b 	.word	0x0260045b
 80a6838:	045b045b 	.word	0x045b045b
 80a683c:	045b0268 	.word	0x045b0268
 80a6840:	031c0296 	.word	0x031c0296
 80a6844:	033a0324 	.word	0x033a0324
 80a6848:	03850342 	.word	0x03850342
 80a684c:	039f00c6 	.word	0x039f00c6
 80a6850:	045b041f 	.word	0x045b041f
 80a6854:	045b045b 	.word	0x045b045b
 80a6858:	045b045b 	.word	0x045b045b
 80a685c:	0056045b 	.word	0x0056045b
 80a6860:	00ba0089 	.word	0x00ba0089
 80a6864:	010c010c 	.word	0x010c010c
 80a6868:	0171045b 	.word	0x0171045b
 80a686c:	045b0089 	.word	0x045b0089
 80a6870:	0226023d 	.word	0x0226023d
 80a6874:	025d022d 	.word	0x025d022d
 80a6878:	045b0262 	.word	0x045b0262
 80a687c:	045b0268 	.word	0x045b0268
 80a6880:	029b00be 	.word	0x029b00be
 80a6884:	032d031e 	.word	0x032d031e
 80a6888:	037e045b 	.word	0x037e045b
 80a688c:	039100c2 	.word	0x039100c2
 80a6890:	03e7      	.short	0x03e7
 80a6892:	69ab      	ldr	r3, [r5, #24]
 80a6894:	9a03      	ldr	r2, [sp, #12]
 80a6896:	3318      	adds	r3, #24
 80a6898:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
 80a689c:	4640      	mov	r0, r8
 80a689e:	f000 fc07 	bl	80a70b0 <strlen>
 80a68a2:	f108 38ff 	add.w	r8, r8, #4294967295
 80a68a6:	193b      	adds	r3, r7, r4
 80a68a8:	4420      	add	r0, r4
 80a68aa:	4284      	cmp	r4, r0
 80a68ac:	f000 83eb 	beq.w	80a7086 <strftime+0x93e>
 80a68b0:	9a02      	ldr	r2, [sp, #8]
 80a68b2:	4294      	cmp	r4, r2
 80a68b4:	f080 83f2 	bcs.w	80a709c <strftime+0x954>
 80a68b8:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 80a68bc:	3401      	adds	r4, #1
 80a68be:	f803 2b01 	strb.w	r2, [r3], #1
 80a68c2:	e7f2      	b.n	80a68aa <strftime+0x162>
 80a68c4:	69ab      	ldr	r3, [r5, #24]
 80a68c6:	9a03      	ldr	r2, [sp, #12]
 80a68c8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80a68cc:	f8d3 807c 	ldr.w	r8, [r3, #124]	; 0x7c
 80a68d0:	4640      	mov	r0, r8
 80a68d2:	f000 fbed 	bl	80a70b0 <strlen>
 80a68d6:	f108 38ff 	add.w	r8, r8, #4294967295
 80a68da:	193b      	adds	r3, r7, r4
 80a68dc:	4420      	add	r0, r4
 80a68de:	4284      	cmp	r4, r0
 80a68e0:	f000 83d1 	beq.w	80a7086 <strftime+0x93e>
 80a68e4:	9a02      	ldr	r2, [sp, #8]
 80a68e6:	4294      	cmp	r4, r2
 80a68e8:	f080 83d8 	bcs.w	80a709c <strftime+0x954>
 80a68ec:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 80a68f0:	3401      	adds	r4, #1
 80a68f2:	f803 2b01 	strb.w	r2, [r3], #1
 80a68f6:	e7f2      	b.n	80a68de <strftime+0x196>
 80a68f8:	692b      	ldr	r3, [r5, #16]
 80a68fa:	9a03      	ldr	r2, [sp, #12]
 80a68fc:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
 80a6900:	4640      	mov	r0, r8
 80a6902:	f000 fbd5 	bl	80a70b0 <strlen>
 80a6906:	f108 38ff 	add.w	r8, r8, #4294967295
 80a690a:	193b      	adds	r3, r7, r4
 80a690c:	4420      	add	r0, r4
 80a690e:	4284      	cmp	r4, r0
 80a6910:	f000 83b9 	beq.w	80a7086 <strftime+0x93e>
 80a6914:	9a02      	ldr	r2, [sp, #8]
 80a6916:	4294      	cmp	r4, r2
 80a6918:	f080 83c0 	bcs.w	80a709c <strftime+0x954>
 80a691c:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 80a6920:	3401      	adds	r4, #1
 80a6922:	f803 2b01 	strb.w	r2, [r3], #1
 80a6926:	e7f2      	b.n	80a690e <strftime+0x1c6>
 80a6928:	692b      	ldr	r3, [r5, #16]
 80a692a:	9a03      	ldr	r2, [sp, #12]
 80a692c:	330c      	adds	r3, #12
 80a692e:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
 80a6932:	4640      	mov	r0, r8
 80a6934:	f000 fbbc 	bl	80a70b0 <strlen>
 80a6938:	f108 38ff 	add.w	r8, r8, #4294967295
 80a693c:	193b      	adds	r3, r7, r4
 80a693e:	4420      	add	r0, r4
 80a6940:	4284      	cmp	r4, r0
 80a6942:	f000 83a0 	beq.w	80a7086 <strftime+0x93e>
 80a6946:	9a02      	ldr	r2, [sp, #8]
 80a6948:	4294      	cmp	r4, r2
 80a694a:	f080 83a7 	bcs.w	80a709c <strftime+0x954>
 80a694e:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 80a6952:	3401      	adds	r4, #1
 80a6954:	f803 2b01 	strb.w	r2, [r3], #1
 80a6958:	e7f2      	b.n	80a6940 <strftime+0x1f8>
 80a695a:	9b03      	ldr	r3, [sp, #12]
 80a695c:	f8d3 80a0 	ldr.w	r8, [r3, #160]	; 0xa0
 80a6960:	e00a      	b.n	80a6978 <strftime+0x230>
 80a6962:	9b03      	ldr	r3, [sp, #12]
 80a6964:	f8d3 80e4 	ldr.w	r8, [r3, #228]	; 0xe4
 80a6968:	e006      	b.n	80a6978 <strftime+0x230>
 80a696a:	9b03      	ldr	r3, [sp, #12]
 80a696c:	f8d3 809c 	ldr.w	r8, [r3, #156]	; 0x9c
 80a6970:	e002      	b.n	80a6978 <strftime+0x230>
 80a6972:	9b03      	ldr	r3, [sp, #12]
 80a6974:	f8d3 8098 	ldr.w	r8, [r3, #152]	; 0x98
 80a6978:	4640      	mov	r0, r8
 80a697a:	f000 fb99 	bl	80a70b0 <strlen>
 80a697e:	f898 3000 	ldrb.w	r3, [r8]
 80a6982:	2b00      	cmp	r3, #0
 80a6984:	f000 837f 	beq.w	80a7086 <strftime+0x93e>
 80a6988:	462b      	mov	r3, r5
 80a698a:	4642      	mov	r2, r8
 80a698c:	e093      	b.n	80a6ab6 <strftime+0x36e>
 80a698e:	49b6      	ldr	r1, [pc, #728]	; (80a6c68 <strftime+0x520>)
 80a6990:	f8d5 b014 	ldr.w	fp, [r5, #20]
 80a6994:	458b      	cmp	fp, r1
 80a6996:	bfac      	ite	ge
 80a6998:	2100      	movge	r1, #0
 80a699a:	2101      	movlt	r1, #1
 80a699c:	f1bb 0f00 	cmp.w	fp, #0
 80a69a0:	db04      	blt.n	80a69ac <strftime+0x264>
 80a69a2:	2064      	movs	r0, #100	; 0x64
 80a69a4:	fb9b f0f0 	sdiv	r0, fp, r0
 80a69a8:	3013      	adds	r0, #19
 80a69aa:	e008      	b.n	80a69be <strftime+0x276>
 80a69ac:	f20b 706c 	addw	r0, fp, #1900	; 0x76c
 80a69b0:	9107      	str	r1, [sp, #28]
 80a69b2:	f001 fd31 	bl	80a8418 <abs>
 80a69b6:	2364      	movs	r3, #100	; 0x64
 80a69b8:	fb90 f0f3 	sdiv	r0, r0, r3
 80a69bc:	9907      	ldr	r1, [sp, #28]
 80a69be:	f1ba 0f00 	cmp.w	sl, #0
 80a69c2:	d008      	beq.n	80a69d6 <strftime+0x28e>
 80a69c4:	2863      	cmp	r0, #99	; 0x63
 80a69c6:	dd09      	ble.n	80a69dc <strftime+0x294>
 80a69c8:	4ba8      	ldr	r3, [pc, #672]	; (80a6c6c <strftime+0x524>)
 80a69ca:	4aa9      	ldr	r2, [pc, #676]	; (80a6c70 <strftime+0x528>)
 80a69cc:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 80a69d0:	bf18      	it	ne
 80a69d2:	4613      	movne	r3, r2
 80a69d4:	e003      	b.n	80a69de <strftime+0x296>
 80a69d6:	4ba6      	ldr	r3, [pc, #664]	; (80a6c70 <strftime+0x528>)
 80a69d8:	4aa6      	ldr	r2, [pc, #664]	; (80a6c74 <strftime+0x52c>)
 80a69da:	e001      	b.n	80a69e0 <strftime+0x298>
 80a69dc:	4ba4      	ldr	r3, [pc, #656]	; (80a6c70 <strftime+0x528>)
 80a69de:	4aa6      	ldr	r2, [pc, #664]	; (80a6c78 <strftime+0x530>)
 80a69e0:	f1b8 0f01 	cmp.w	r8, #1
 80a69e4:	bf98      	it	ls
 80a69e6:	f04f 0802 	movls.w	r8, #2
 80a69ea:	ebc1 0108 	rsb	r1, r1, r8
 80a69ee:	9001      	str	r0, [sp, #4]
 80a69f0:	9100      	str	r1, [sp, #0]
 80a69f2:	489d      	ldr	r0, [pc, #628]	; (80a6c68 <strftime+0x520>)
 80a69f4:	49a1      	ldr	r1, [pc, #644]	; (80a6c7c <strftime+0x534>)
 80a69f6:	4583      	cmp	fp, r0
 80a69f8:	bfb8      	it	lt
 80a69fa:	460b      	movlt	r3, r1
 80a69fc:	e21d      	b.n	80a6e3a <strftime+0x6f2>
 80a69fe:	4aa0      	ldr	r2, [pc, #640]	; (80a6c80 <strftime+0x538>)
 80a6a00:	49a0      	ldr	r1, [pc, #640]	; (80a6c84 <strftime+0x53c>)
 80a6a02:	68eb      	ldr	r3, [r5, #12]
 80a6a04:	2864      	cmp	r0, #100	; 0x64
 80a6a06:	bf08      	it	eq
 80a6a08:	460a      	moveq	r2, r1
 80a6a0a:	1b31      	subs	r1, r6, r4
 80a6a0c:	1938      	adds	r0, r7, r4
 80a6a0e:	f7fc fc63 	bl	80a32d8 <sniprintf>
 80a6a12:	2800      	cmp	r0, #0
 80a6a14:	f280 8302 	bge.w	80a701c <strftime+0x8d4>
 80a6a18:	e340      	b.n	80a709c <strftime+0x954>
 80a6a1a:	6968      	ldr	r0, [r5, #20]
 80a6a1c:	692b      	ldr	r3, [r5, #16]
 80a6a1e:	2800      	cmp	r0, #0
 80a6a20:	f103 0b01 	add.w	fp, r3, #1
 80a6a24:	eb07 0804 	add.w	r8, r7, r4
 80a6a28:	ebc4 0a06 	rsb	sl, r4, r6
 80a6a2c:	68eb      	ldr	r3, [r5, #12]
 80a6a2e:	db05      	blt.n	80a6a3c <strftime+0x2f4>
 80a6a30:	2264      	movs	r2, #100	; 0x64
 80a6a32:	fb90 f1f2 	sdiv	r1, r0, r2
 80a6a36:	fb02 0011 	mls	r0, r2, r1, r0
 80a6a3a:	e00a      	b.n	80a6a52 <strftime+0x30a>
 80a6a3c:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80a6a40:	9307      	str	r3, [sp, #28]
 80a6a42:	f001 fce9 	bl	80a8418 <abs>
 80a6a46:	2264      	movs	r2, #100	; 0x64
 80a6a48:	fb90 f1f2 	sdiv	r1, r0, r2
 80a6a4c:	fb01 0012 	mls	r0, r1, r2, r0
 80a6a50:	9b07      	ldr	r3, [sp, #28]
 80a6a52:	9001      	str	r0, [sp, #4]
 80a6a54:	9300      	str	r3, [sp, #0]
 80a6a56:	4651      	mov	r1, sl
 80a6a58:	465b      	mov	r3, fp
 80a6a5a:	4640      	mov	r0, r8
 80a6a5c:	4a8a      	ldr	r2, [pc, #552]	; (80a6c88 <strftime+0x540>)
 80a6a5e:	f7fc fc3b 	bl	80a32d8 <sniprintf>
 80a6a62:	e7d6      	b.n	80a6a12 <strftime+0x2ca>
 80a6a64:	2325      	movs	r3, #37	; 0x25
 80a6a66:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 80a6a6a:	f1ba 0f00 	cmp.w	sl, #0
 80a6a6e:	d007      	beq.n	80a6a80 <strftime+0x338>
 80a6a70:	f1b8 0f05 	cmp.w	r8, #5
 80a6a74:	f88d a029 	strb.w	sl, [sp, #41]	; 0x29
 80a6a78:	bf98      	it	ls
 80a6a7a:	f04f 0806 	movls.w	r8, #6
 80a6a7e:	e004      	b.n	80a6a8a <strftime+0x342>
 80a6a80:	232b      	movs	r3, #43	; 0x2b
 80a6a82:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80a6a86:	f04f 080a 	mov.w	r8, #10
 80a6a8a:	f1b8 0306 	subs.w	r3, r8, #6
 80a6a8e:	d102      	bne.n	80a6a96 <strftime+0x34e>
 80a6a90:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
 80a6a94:	e00a      	b.n	80a6aac <strftime+0x364>
 80a6a96:	4a7d      	ldr	r2, [pc, #500]	; (80a6c8c <strftime+0x544>)
 80a6a98:	211e      	movs	r1, #30
 80a6a9a:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
 80a6a9e:	f7fc fc1b 	bl	80a32d8 <sniprintf>
 80a6aa2:	2800      	cmp	r0, #0
 80a6aa4:	ddf4      	ble.n	80a6a90 <strftime+0x348>
 80a6aa6:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
 80a6aaa:	4418      	add	r0, r3
 80a6aac:	4978      	ldr	r1, [pc, #480]	; (80a6c90 <strftime+0x548>)
 80a6aae:	f7ff fde3 	bl	80a6678 <strcpy>
 80a6ab2:	462b      	mov	r3, r5
 80a6ab4:	aa0a      	add	r2, sp, #40	; 0x28
 80a6ab6:	1b31      	subs	r1, r6, r4
 80a6ab8:	1938      	adds	r0, r7, r4
 80a6aba:	f7ff fe45 	bl	80a6748 <strftime>
 80a6abe:	2800      	cmp	r0, #0
 80a6ac0:	f340 82ec 	ble.w	80a709c <strftime+0x954>
 80a6ac4:	4404      	add	r4, r0
 80a6ac6:	e2de      	b.n	80a7086 <strftime+0x93e>
 80a6ac8:	4628      	mov	r0, r5
 80a6aca:	f7ff fddd 	bl	80a6688 <iso_year_adjust>
 80a6ace:	4680      	mov	r8, r0
 80a6ad0:	6968      	ldr	r0, [r5, #20]
 80a6ad2:	2800      	cmp	r0, #0
 80a6ad4:	db05      	blt.n	80a6ae2 <strftime+0x39a>
 80a6ad6:	2264      	movs	r2, #100	; 0x64
 80a6ad8:	fb90 f1f2 	sdiv	r1, r0, r2
 80a6adc:	fb02 0011 	mls	r0, r2, r1, r0
 80a6ae0:	e008      	b.n	80a6af4 <strftime+0x3ac>
 80a6ae2:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80a6ae6:	f001 fc97 	bl	80a8418 <abs>
 80a6aea:	2264      	movs	r2, #100	; 0x64
 80a6aec:	fb90 f3f2 	sdiv	r3, r0, r2
 80a6af0:	fb03 0012 	mls	r0, r3, r2, r0
 80a6af4:	f1b8 0f00 	cmp.w	r8, #0
 80a6af8:	da06      	bge.n	80a6b08 <strftime+0x3c0>
 80a6afa:	696a      	ldr	r2, [r5, #20]
 80a6afc:	4b65      	ldr	r3, [pc, #404]	; (80a6c94 <strftime+0x54c>)
 80a6afe:	429a      	cmp	r2, r3
 80a6b00:	bfb8      	it	lt
 80a6b02:	f04f 0801 	movlt.w	r8, #1
 80a6b06:	e006      	b.n	80a6b16 <strftime+0x3ce>
 80a6b08:	d005      	beq.n	80a6b16 <strftime+0x3ce>
 80a6b0a:	696a      	ldr	r2, [r5, #20]
 80a6b0c:	4b56      	ldr	r3, [pc, #344]	; (80a6c68 <strftime+0x520>)
 80a6b0e:	429a      	cmp	r2, r3
 80a6b10:	bfb8      	it	lt
 80a6b12:	f04f 38ff 	movlt.w	r8, #4294967295
 80a6b16:	2364      	movs	r3, #100	; 0x64
 80a6b18:	4440      	add	r0, r8
 80a6b1a:	fb90 f2f3 	sdiv	r2, r0, r3
 80a6b1e:	fb03 0012 	mls	r0, r3, r2, r0
 80a6b22:	4418      	add	r0, r3
 80a6b24:	e1f8      	b.n	80a6f18 <strftime+0x7d0>
 80a6b26:	4b50      	ldr	r3, [pc, #320]	; (80a6c68 <strftime+0x520>)
 80a6b28:	6969      	ldr	r1, [r5, #20]
 80a6b2a:	4628      	mov	r0, r5
 80a6b2c:	4299      	cmp	r1, r3
 80a6b2e:	bfac      	ite	ge
 80a6b30:	2300      	movge	r3, #0
 80a6b32:	2301      	movlt	r3, #1
 80a6b34:	9108      	str	r1, [sp, #32]
 80a6b36:	9307      	str	r3, [sp, #28]
 80a6b38:	f7ff fda6 	bl	80a6688 <iso_year_adjust>
 80a6b3c:	9908      	ldr	r1, [sp, #32]
 80a6b3e:	4683      	mov	fp, r0
 80a6b40:	2900      	cmp	r1, #0
 80a6b42:	db04      	blt.n	80a6b4e <strftime+0x406>
 80a6b44:	2364      	movs	r3, #100	; 0x64
 80a6b46:	fb91 f3f3 	sdiv	r3, r1, r3
 80a6b4a:	3313      	adds	r3, #19
 80a6b4c:	e008      	b.n	80a6b60 <strftime+0x418>
 80a6b4e:	f201 706c 	addw	r0, r1, #1900	; 0x76c
 80a6b52:	9108      	str	r1, [sp, #32]
 80a6b54:	f001 fc60 	bl	80a8418 <abs>
 80a6b58:	2364      	movs	r3, #100	; 0x64
 80a6b5a:	fb90 f3f3 	sdiv	r3, r0, r3
 80a6b5e:	9908      	ldr	r1, [sp, #32]
 80a6b60:	6968      	ldr	r0, [r5, #20]
 80a6b62:	2800      	cmp	r0, #0
 80a6b64:	db06      	blt.n	80a6b74 <strftime+0x42c>
 80a6b66:	f04f 0e64 	mov.w	lr, #100	; 0x64
 80a6b6a:	fb90 fcfe 	sdiv	ip, r0, lr
 80a6b6e:	fb0e 001c 	mls	r0, lr, ip, r0
 80a6b72:	e00d      	b.n	80a6b90 <strftime+0x448>
 80a6b74:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80a6b78:	9109      	str	r1, [sp, #36]	; 0x24
 80a6b7a:	9308      	str	r3, [sp, #32]
 80a6b7c:	f001 fc4c 	bl	80a8418 <abs>
 80a6b80:	f04f 0e64 	mov.w	lr, #100	; 0x64
 80a6b84:	fb90 fcfe 	sdiv	ip, r0, lr
 80a6b88:	fb0c 001e 	mls	r0, ip, lr, r0
 80a6b8c:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a6b8e:	9b08      	ldr	r3, [sp, #32]
 80a6b90:	f1bb 0f00 	cmp.w	fp, #0
 80a6b94:	da08      	bge.n	80a6ba8 <strftime+0x460>
 80a6b96:	6969      	ldr	r1, [r5, #20]
 80a6b98:	4a3e      	ldr	r2, [pc, #248]	; (80a6c94 <strftime+0x54c>)
 80a6b9a:	4291      	cmp	r1, r2
 80a6b9c:	da0a      	bge.n	80a6bb4 <strftime+0x46c>
 80a6b9e:	f04f 0b01 	mov.w	fp, #1
 80a6ba2:	f8cd b01c 	str.w	fp, [sp, #28]
 80a6ba6:	e005      	b.n	80a6bb4 <strftime+0x46c>
 80a6ba8:	d004      	beq.n	80a6bb4 <strftime+0x46c>
 80a6baa:	4a2f      	ldr	r2, [pc, #188]	; (80a6c68 <strftime+0x520>)
 80a6bac:	4291      	cmp	r1, r2
 80a6bae:	bfb8      	it	lt
 80a6bb0:	f04f 3bff 	movlt.w	fp, #4294967295
 80a6bb4:	eb0b 0200 	add.w	r2, fp, r0
 80a6bb8:	1c50      	adds	r0, r2, #1
 80a6bba:	d102      	bne.n	80a6bc2 <strftime+0x47a>
 80a6bbc:	3b01      	subs	r3, #1
 80a6bbe:	2263      	movs	r2, #99	; 0x63
 80a6bc0:	e003      	b.n	80a6bca <strftime+0x482>
 80a6bc2:	2a64      	cmp	r2, #100	; 0x64
 80a6bc4:	bf04      	itt	eq
 80a6bc6:	3301      	addeq	r3, #1
 80a6bc8:	2200      	moveq	r2, #0
 80a6bca:	2064      	movs	r0, #100	; 0x64
 80a6bcc:	fb00 2303 	mla	r3, r0, r3, r2
 80a6bd0:	9a07      	ldr	r2, [sp, #28]
 80a6bd2:	b142      	cbz	r2, 80a6be6 <strftime+0x49e>
 80a6bd4:	222d      	movs	r2, #45	; 0x2d
 80a6bd6:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
 80a6bda:	f1b8 0f00 	cmp.w	r8, #0
 80a6bde:	d013      	beq.n	80a6c08 <strftime+0x4c0>
 80a6be0:	f108 38ff 	add.w	r8, r8, #4294967295
 80a6be4:	e010      	b.n	80a6c08 <strftime+0x4c0>
 80a6be6:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 80a6bea:	d110      	bne.n	80a6c0e <strftime+0x4c6>
 80a6bec:	f242 720f 	movw	r2, #9999	; 0x270f
 80a6bf0:	4293      	cmp	r3, r2
 80a6bf2:	d90c      	bls.n	80a6c0e <strftime+0x4c6>
 80a6bf4:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
 80a6bf8:	f1b8 0f00 	cmp.w	r8, #0
 80a6bfc:	d1f0      	bne.n	80a6be0 <strftime+0x498>
 80a6bfe:	aa12      	add	r2, sp, #72	; 0x48
 80a6c00:	2125      	movs	r1, #37	; 0x25
 80a6c02:	f802 1d1f 	strb.w	r1, [r2, #-31]!
 80a6c06:	e00a      	b.n	80a6c1e <strftime+0x4d6>
 80a6c08:	f10d 0229 	add.w	r2, sp, #41	; 0x29
 80a6c0c:	e000      	b.n	80a6c10 <strftime+0x4c8>
 80a6c0e:	aa0a      	add	r2, sp, #40	; 0x28
 80a6c10:	2125      	movs	r1, #37	; 0x25
 80a6c12:	7011      	strb	r1, [r2, #0]
 80a6c14:	f1ba 0f00 	cmp.w	sl, #0
 80a6c18:	d101      	bne.n	80a6c1e <strftime+0x4d6>
 80a6c1a:	1c50      	adds	r0, r2, #1
 80a6c1c:	e002      	b.n	80a6c24 <strftime+0x4dc>
 80a6c1e:	2130      	movs	r1, #48	; 0x30
 80a6c20:	1c90      	adds	r0, r2, #2
 80a6c22:	7051      	strb	r1, [r2, #1]
 80a6c24:	491c      	ldr	r1, [pc, #112]	; (80a6c98 <strftime+0x550>)
 80a6c26:	9307      	str	r3, [sp, #28]
 80a6c28:	f7ff fd26 	bl	80a6678 <strcpy>
 80a6c2c:	9b07      	ldr	r3, [sp, #28]
 80a6c2e:	9300      	str	r3, [sp, #0]
 80a6c30:	e1ac      	b.n	80a6f8c <strftime+0x844>
 80a6c32:	4a14      	ldr	r2, [pc, #80]	; (80a6c84 <strftime+0x53c>)
 80a6c34:	4912      	ldr	r1, [pc, #72]	; (80a6c80 <strftime+0x538>)
 80a6c36:	68ab      	ldr	r3, [r5, #8]
 80a6c38:	286b      	cmp	r0, #107	; 0x6b
 80a6c3a:	bf08      	it	eq
 80a6c3c:	460a      	moveq	r2, r1
 80a6c3e:	e6e4      	b.n	80a6a0a <strftime+0x2c2>
 80a6c40:	68a9      	ldr	r1, [r5, #8]
 80a6c42:	230c      	movs	r3, #12
 80a6c44:	b131      	cbz	r1, 80a6c54 <strftime+0x50c>
 80a6c46:	4299      	cmp	r1, r3
 80a6c48:	bf16      	itet	ne
 80a6c4a:	fb91 f2f3 	sdivne	r2, r1, r3
 80a6c4e:	460b      	moveq	r3, r1
 80a6c50:	fb03 1312 	mlsne	r3, r3, r2, r1
 80a6c54:	4a0a      	ldr	r2, [pc, #40]	; (80a6c80 <strftime+0x538>)
 80a6c56:	490b      	ldr	r1, [pc, #44]	; (80a6c84 <strftime+0x53c>)
 80a6c58:	2849      	cmp	r0, #73	; 0x49
 80a6c5a:	bf08      	it	eq
 80a6c5c:	460a      	moveq	r2, r1
 80a6c5e:	e6d4      	b.n	80a6a0a <strftime+0x2c2>
 80a6c60:	69eb      	ldr	r3, [r5, #28]
 80a6c62:	4a0e      	ldr	r2, [pc, #56]	; (80a6c9c <strftime+0x554>)
 80a6c64:	3301      	adds	r3, #1
 80a6c66:	e6d0      	b.n	80a6a0a <strftime+0x2c2>
 80a6c68:	fffff894 	.word	0xfffff894
 80a6c6c:	080a9ecb 	.word	0x080a9ecb
 80a6c70:	080a98e2 	.word	0x080a98e2
 80a6c74:	080a9ebc 	.word	0x080a9ebc
 80a6c78:	080a9ec3 	.word	0x080a9ec3
 80a6c7c:	080a9ecd 	.word	0x080a9ecd
 80a6c80:	080a9ecf 	.word	0x080a9ecf
 80a6c84:	080a9edd 	.word	0x080a9edd
 80a6c88:	080a9ed3 	.word	0x080a9ed3
 80a6c8c:	080a99b8 	.word	0x080a99b8
 80a6c90:	080a9ee2 	.word	0x080a9ee2
 80a6c94:	fffff895 	.word	0xfffff895
 80a6c98:	080a9eea 	.word	0x080a9eea
 80a6c9c:	080a9eee 	.word	0x080a9eee
 80a6ca0:	692b      	ldr	r3, [r5, #16]
 80a6ca2:	3301      	adds	r3, #1
 80a6ca4:	e13c      	b.n	80a6f20 <strftime+0x7d8>
 80a6ca6:	686b      	ldr	r3, [r5, #4]
 80a6ca8:	e13a      	b.n	80a6f20 <strftime+0x7d8>
 80a6caa:	9b02      	ldr	r3, [sp, #8]
 80a6cac:	429c      	cmp	r4, r3
 80a6cae:	f080 81f5 	bcs.w	80a709c <strftime+0x954>
 80a6cb2:	230a      	movs	r3, #10
 80a6cb4:	e1e5      	b.n	80a7082 <strftime+0x93a>
 80a6cb6:	68ab      	ldr	r3, [r5, #8]
 80a6cb8:	9a03      	ldr	r2, [sp, #12]
 80a6cba:	2b0b      	cmp	r3, #11
 80a6cbc:	bfcc      	ite	gt
 80a6cbe:	23a4      	movgt	r3, #164	; 0xa4
 80a6cc0:	23a0      	movle	r3, #160	; 0xa0
 80a6cc2:	4413      	add	r3, r2
 80a6cc4:	f8d3 8004 	ldr.w	r8, [r3, #4]
 80a6cc8:	4640      	mov	r0, r8
 80a6cca:	f000 f9f1 	bl	80a70b0 <strlen>
 80a6cce:	4642      	mov	r2, r8
 80a6cd0:	4bb1      	ldr	r3, [pc, #708]	; (80a6f98 <strftime+0x850>)
 80a6cd2:	1939      	adds	r1, r7, r4
 80a6cd4:	f8d3 e000 	ldr.w	lr, [r3]
 80a6cd8:	4420      	add	r0, r4
 80a6cda:	4284      	cmp	r4, r0
 80a6cdc:	f000 81d3 	beq.w	80a7086 <strftime+0x93e>
 80a6ce0:	9b02      	ldr	r3, [sp, #8]
 80a6ce2:	429c      	cmp	r4, r3
 80a6ce4:	f080 81da 	bcs.w	80a709c <strftime+0x954>
 80a6ce8:	f899 3000 	ldrb.w	r3, [r9]
 80a6cec:	3401      	adds	r4, #1
 80a6cee:	2b50      	cmp	r3, #80	; 0x50
 80a6cf0:	7813      	ldrb	r3, [r2, #0]
 80a6cf2:	d10a      	bne.n	80a6d0a <strftime+0x5c2>
 80a6cf4:	eb0e 0c03 	add.w	ip, lr, r3
 80a6cf8:	f89c c001 	ldrb.w	ip, [ip, #1]
 80a6cfc:	f00c 0c03 	and.w	ip, ip, #3
 80a6d00:	f1bc 0f01 	cmp.w	ip, #1
 80a6d04:	bf08      	it	eq
 80a6d06:	3320      	addeq	r3, #32
 80a6d08:	b2db      	uxtb	r3, r3
 80a6d0a:	f801 3b01 	strb.w	r3, [r1], #1
 80a6d0e:	3201      	adds	r2, #1
 80a6d10:	e7e3      	b.n	80a6cda <strftime+0x592>
 80a6d12:	686b      	ldr	r3, [r5, #4]
 80a6d14:	4aa1      	ldr	r2, [pc, #644]	; (80a6f9c <strftime+0x854>)
 80a6d16:	9300      	str	r3, [sp, #0]
 80a6d18:	68ab      	ldr	r3, [r5, #8]
 80a6d1a:	e139      	b.n	80a6f90 <strftime+0x848>
 80a6d1c:	6a2b      	ldr	r3, [r5, #32]
 80a6d1e:	2b00      	cmp	r3, #0
 80a6d20:	db17      	blt.n	80a6d52 <strftime+0x60a>
 80a6d22:	f001 f9f1 	bl	80a8108 <__tz_lock>
 80a6d26:	9b06      	ldr	r3, [sp, #24]
 80a6d28:	b91b      	cbnz	r3, 80a6d32 <strftime+0x5ea>
 80a6d2a:	f001 f9ef 	bl	80a810c <_tzset_unlocked>
 80a6d2e:	2301      	movs	r3, #1
 80a6d30:	9306      	str	r3, [sp, #24]
 80a6d32:	f001 fed7 	bl	80a8ae4 <__gettzinfo>
 80a6d36:	6a2b      	ldr	r3, [r5, #32]
 80a6d38:	221c      	movs	r2, #28
 80a6d3a:	2b00      	cmp	r3, #0
 80a6d3c:	bfd4      	ite	le
 80a6d3e:	2300      	movle	r3, #0
 80a6d40:	2301      	movgt	r3, #1
 80a6d42:	fb02 0003 	mla	r0, r2, r3, r0
 80a6d46:	6a03      	ldr	r3, [r0, #32]
 80a6d48:	f1c3 0800 	rsb	r8, r3, #0
 80a6d4c:	f001 f9dd 	bl	80a810a <__tz_unlock>
 80a6d50:	e001      	b.n	80a6d56 <strftime+0x60e>
 80a6d52:	f04f 0800 	mov.w	r8, #0
 80a6d56:	f8d5 e014 	ldr.w	lr, [r5, #20]
 80a6d5a:	ebc4 0c06 	rsb	ip, r4, r6
 80a6d5e:	4670      	mov	r0, lr
 80a6d60:	f1be 0245 	subs.w	r2, lr, #69	; 0x45
 80a6d64:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80a6d68:	f141 33ff 	adc.w	r3, r1, #4294967295
 80a6d6c:	2a00      	cmp	r2, #0
 80a6d6e:	f173 0b00 	sbcs.w	fp, r3, #0
 80a6d72:	eb07 0a04 	add.w	sl, r7, r4
 80a6d76:	da03      	bge.n	80a6d80 <strftime+0x638>
 80a6d78:	f1be 0242 	subs.w	r2, lr, #66	; 0x42
 80a6d7c:	f141 33ff 	adc.w	r3, r1, #4294967295
 80a6d80:	0891      	lsrs	r1, r2, #2
 80a6d82:	ea41 7183 	orr.w	r1, r1, r3, lsl #30
 80a6d86:	109b      	asrs	r3, r3, #2
 80a6d88:	9104      	str	r1, [sp, #16]
 80a6d8a:	9305      	str	r3, [sp, #20]
 80a6d8c:	f10e 31ff 	add.w	r1, lr, #4294967295
 80a6d90:	2364      	movs	r3, #100	; 0x64
 80a6d92:	fb91 f1f3 	sdiv	r1, r1, r3
 80a6d96:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80a6d9a:	1a52      	subs	r2, r2, r1
 80a6d9c:	eb63 73e1 	sbc.w	r3, r3, r1, asr #31
 80a6da0:	f20e 102b 	addw	r0, lr, #299	; 0x12b
 80a6da4:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80a6da8:	fb90 f1f1 	sdiv	r1, r0, r1
 80a6dac:	1852      	adds	r2, r2, r1
 80a6dae:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
 80a6db2:	f240 116d 	movw	r1, #365	; 0x16d
 80a6db6:	f1ae 0e46 	sub.w	lr, lr, #70	; 0x46
 80a6dba:	fb01 fe0e 	mul.w	lr, r1, lr
 80a6dbe:	69e9      	ldr	r1, [r5, #28]
 80a6dc0:	eb12 020e 	adds.w	r2, r2, lr
 80a6dc4:	eb43 73ee 	adc.w	r3, r3, lr, asr #31
 80a6dc8:	1852      	adds	r2, r2, r1
 80a6dca:	f04f 0e18 	mov.w	lr, #24
 80a6dce:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
 80a6dd2:	fba2 010e 	umull	r0, r1, r2, lr
 80a6dd6:	fb0e 1103 	mla	r1, lr, r3, r1
 80a6dda:	68ab      	ldr	r3, [r5, #8]
 80a6ddc:	f04f 0e3c 	mov.w	lr, #60	; 0x3c
 80a6de0:	18c0      	adds	r0, r0, r3
 80a6de2:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
 80a6de6:	fba0 230e 	umull	r2, r3, r0, lr
 80a6dea:	fb0e 3301 	mla	r3, lr, r1, r3
 80a6dee:	6869      	ldr	r1, [r5, #4]
 80a6df0:	1852      	adds	r2, r2, r1
 80a6df2:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
 80a6df6:	fba2 010e 	umull	r0, r1, r2, lr
 80a6dfa:	fb0e 1103 	mla	r1, lr, r3, r1
 80a6dfe:	682b      	ldr	r3, [r5, #0]
 80a6e00:	4a67      	ldr	r2, [pc, #412]	; (80a6fa0 <strftime+0x858>)
 80a6e02:	18c0      	adds	r0, r0, r3
 80a6e04:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
 80a6e08:	ebb0 0008 	subs.w	r0, r0, r8
 80a6e0c:	eb61 71e8 	sbc.w	r1, r1, r8, asr #31
 80a6e10:	e9cd 0100 	strd	r0, r1, [sp]
 80a6e14:	4661      	mov	r1, ip
 80a6e16:	4650      	mov	r0, sl
 80a6e18:	f7fc fa5e 	bl	80a32d8 <sniprintf>
 80a6e1c:	e5f9      	b.n	80a6a12 <strftime+0x2ca>
 80a6e1e:	682b      	ldr	r3, [r5, #0]
 80a6e20:	e07e      	b.n	80a6f20 <strftime+0x7d8>
 80a6e22:	9b02      	ldr	r3, [sp, #8]
 80a6e24:	429c      	cmp	r4, r3
 80a6e26:	f080 8139 	bcs.w	80a709c <strftime+0x954>
 80a6e2a:	2309      	movs	r3, #9
 80a6e2c:	e129      	b.n	80a7082 <strftime+0x93a>
 80a6e2e:	682b      	ldr	r3, [r5, #0]
 80a6e30:	4a5c      	ldr	r2, [pc, #368]	; (80a6fa4 <strftime+0x85c>)
 80a6e32:	9301      	str	r3, [sp, #4]
 80a6e34:	686b      	ldr	r3, [r5, #4]
 80a6e36:	9300      	str	r3, [sp, #0]
 80a6e38:	68ab      	ldr	r3, [r5, #8]
 80a6e3a:	1b31      	subs	r1, r6, r4
 80a6e3c:	1938      	adds	r0, r7, r4
 80a6e3e:	e60e      	b.n	80a6a5e <strftime+0x316>
 80a6e40:	9b02      	ldr	r3, [sp, #8]
 80a6e42:	429c      	cmp	r4, r3
 80a6e44:	f080 812a 	bcs.w	80a709c <strftime+0x954>
 80a6e48:	69ab      	ldr	r3, [r5, #24]
 80a6e4a:	1c62      	adds	r2, r4, #1
 80a6e4c:	b90b      	cbnz	r3, 80a6e52 <strftime+0x70a>
 80a6e4e:	2337      	movs	r3, #55	; 0x37
 80a6e50:	e000      	b.n	80a6e54 <strftime+0x70c>
 80a6e52:	3330      	adds	r3, #48	; 0x30
 80a6e54:	553b      	strb	r3, [r7, r4]
 80a6e56:	4614      	mov	r4, r2
 80a6e58:	e115      	b.n	80a7086 <strftime+0x93e>
 80a6e5a:	69eb      	ldr	r3, [r5, #28]
 80a6e5c:	69aa      	ldr	r2, [r5, #24]
 80a6e5e:	3307      	adds	r3, #7
 80a6e60:	1a9b      	subs	r3, r3, r2
 80a6e62:	2207      	movs	r2, #7
 80a6e64:	fb93 f3f2 	sdiv	r3, r3, r2
 80a6e68:	e05a      	b.n	80a6f20 <strftime+0x7d8>
 80a6e6a:	4628      	mov	r0, r5
 80a6e6c:	f7ff fc0c 	bl	80a6688 <iso_year_adjust>
 80a6e70:	69aa      	ldr	r2, [r5, #24]
 80a6e72:	b10a      	cbz	r2, 80a6e78 <strftime+0x730>
 80a6e74:	1e53      	subs	r3, r2, #1
 80a6e76:	e000      	b.n	80a6e7a <strftime+0x732>
 80a6e78:	2306      	movs	r3, #6
 80a6e7a:	2800      	cmp	r0, #0
 80a6e7c:	dc2f      	bgt.n	80a6ede <strftime+0x796>
 80a6e7e:	69ea      	ldr	r2, [r5, #28]
 80a6e80:	d101      	bne.n	80a6e86 <strftime+0x73e>
 80a6e82:	320a      	adds	r2, #10
 80a6e84:	e03b      	b.n	80a6efe <strftime+0x7b6>
 80a6e86:	f240 716b 	movw	r1, #1899	; 0x76b
 80a6e8a:	1a9a      	subs	r2, r3, r2
 80a6e8c:	696b      	ldr	r3, [r5, #20]
 80a6e8e:	2b00      	cmp	r3, #0
 80a6e90:	bfb4      	ite	lt
 80a6e92:	4608      	movlt	r0, r1
 80a6e94:	f06f 0064 	mvnge.w	r0, #100	; 0x64
 80a6e98:	4418      	add	r0, r3
 80a6e9a:	0781      	lsls	r1, r0, #30
 80a6e9c:	d107      	bne.n	80a6eae <strftime+0x766>
 80a6e9e:	f04f 0e64 	mov.w	lr, #100	; 0x64
 80a6ea2:	4601      	mov	r1, r0
 80a6ea4:	fb90 f0fe 	sdiv	r0, r0, lr
 80a6ea8:	fb0e 1110 	mls	r1, lr, r0, r1
 80a6eac:	b981      	cbnz	r1, 80a6ed0 <strftime+0x788>
 80a6eae:	f240 716b 	movw	r1, #1899	; 0x76b
 80a6eb2:	2b00      	cmp	r3, #0
 80a6eb4:	bfa8      	it	ge
 80a6eb6:	f06f 0164 	mvnge.w	r1, #100	; 0x64
 80a6eba:	4419      	add	r1, r3
 80a6ebc:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80a6ec0:	fb91 f0f3 	sdiv	r0, r1, r3
 80a6ec4:	fb03 1110 	mls	r1, r3, r0, r1
 80a6ec8:	fab1 f181 	clz	r1, r1
 80a6ecc:	0949      	lsrs	r1, r1, #5
 80a6ece:	e000      	b.n	80a6ed2 <strftime+0x78a>
 80a6ed0:	2101      	movs	r1, #1
 80a6ed2:	1a52      	subs	r2, r2, r1
 80a6ed4:	2a05      	cmp	r2, #5
 80a6ed6:	bfb4      	ite	lt
 80a6ed8:	2335      	movlt	r3, #53	; 0x35
 80a6eda:	2334      	movge	r3, #52	; 0x34
 80a6edc:	e020      	b.n	80a6f20 <strftime+0x7d8>
 80a6ede:	2301      	movs	r3, #1
 80a6ee0:	e01e      	b.n	80a6f20 <strftime+0x7d8>
 80a6ee2:	9b02      	ldr	r3, [sp, #8]
 80a6ee4:	429c      	cmp	r4, r3
 80a6ee6:	f080 80d9 	bcs.w	80a709c <strftime+0x954>
 80a6eea:	69ab      	ldr	r3, [r5, #24]
 80a6eec:	3330      	adds	r3, #48	; 0x30
 80a6eee:	e0c8      	b.n	80a7082 <strftime+0x93a>
 80a6ef0:	69aa      	ldr	r2, [r5, #24]
 80a6ef2:	b10a      	cbz	r2, 80a6ef8 <strftime+0x7b0>
 80a6ef4:	1e53      	subs	r3, r2, #1
 80a6ef6:	e000      	b.n	80a6efa <strftime+0x7b2>
 80a6ef8:	2306      	movs	r3, #6
 80a6efa:	69ea      	ldr	r2, [r5, #28]
 80a6efc:	3207      	adds	r2, #7
 80a6efe:	1ad2      	subs	r2, r2, r3
 80a6f00:	2307      	movs	r3, #7
 80a6f02:	fb92 f3f3 	sdiv	r3, r2, r3
 80a6f06:	e00b      	b.n	80a6f20 <strftime+0x7d8>
 80a6f08:	6968      	ldr	r0, [r5, #20]
 80a6f0a:	2800      	cmp	r0, #0
 80a6f0c:	da03      	bge.n	80a6f16 <strftime+0x7ce>
 80a6f0e:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80a6f12:	f001 fa81 	bl	80a8418 <abs>
 80a6f16:	2364      	movs	r3, #100	; 0x64
 80a6f18:	fb90 f2f3 	sdiv	r2, r0, r3
 80a6f1c:	fb02 0313 	mls	r3, r2, r3, r0
 80a6f20:	4a21      	ldr	r2, [pc, #132]	; (80a6fa8 <strftime+0x860>)
 80a6f22:	e572      	b.n	80a6a0a <strftime+0x2c2>
 80a6f24:	696b      	ldr	r3, [r5, #20]
 80a6f26:	4a21      	ldr	r2, [pc, #132]	; (80a6fac <strftime+0x864>)
 80a6f28:	f203 7b6c 	addw	fp, r3, #1900	; 0x76c
 80a6f2c:	4293      	cmp	r3, r2
 80a6f2e:	da05      	bge.n	80a6f3c <strftime+0x7f4>
 80a6f30:	232d      	movs	r3, #45	; 0x2d
 80a6f32:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 80a6f36:	f1cb 0b00 	rsb	fp, fp, #0
 80a6f3a:	e008      	b.n	80a6f4e <strftime+0x806>
 80a6f3c:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 80a6f40:	d10d      	bne.n	80a6f5e <strftime+0x816>
 80a6f42:	f242 730f 	movw	r3, #9999	; 0x270f
 80a6f46:	459b      	cmp	fp, r3
 80a6f48:	d911      	bls.n	80a6f6e <strftime+0x826>
 80a6f4a:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
 80a6f4e:	f1b8 0f00 	cmp.w	r8, #0
 80a6f52:	d001      	beq.n	80a6f58 <strftime+0x810>
 80a6f54:	f108 38ff 	add.w	r8, r8, #4294967295
 80a6f58:	f10d 0329 	add.w	r3, sp, #41	; 0x29
 80a6f5c:	e000      	b.n	80a6f60 <strftime+0x818>
 80a6f5e:	ab0a      	add	r3, sp, #40	; 0x28
 80a6f60:	2225      	movs	r2, #37	; 0x25
 80a6f62:	701a      	strb	r2, [r3, #0]
 80a6f64:	f1ba 0f00 	cmp.w	sl, #0
 80a6f68:	d108      	bne.n	80a6f7c <strftime+0x834>
 80a6f6a:	1c58      	adds	r0, r3, #1
 80a6f6c:	e009      	b.n	80a6f82 <strftime+0x83a>
 80a6f6e:	f1b8 0f00 	cmp.w	r8, #0
 80a6f72:	d1f4      	bne.n	80a6f5e <strftime+0x816>
 80a6f74:	2325      	movs	r3, #37	; 0x25
 80a6f76:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 80a6f7a:	ab0a      	add	r3, sp, #40	; 0x28
 80a6f7c:	2230      	movs	r2, #48	; 0x30
 80a6f7e:	1c98      	adds	r0, r3, #2
 80a6f80:	705a      	strb	r2, [r3, #1]
 80a6f82:	490b      	ldr	r1, [pc, #44]	; (80a6fb0 <strftime+0x868>)
 80a6f84:	f7ff fb78 	bl	80a6678 <strcpy>
 80a6f88:	f8cd b000 	str.w	fp, [sp]
 80a6f8c:	4643      	mov	r3, r8
 80a6f8e:	aa0a      	add	r2, sp, #40	; 0x28
 80a6f90:	1b31      	subs	r1, r6, r4
 80a6f92:	1938      	adds	r0, r7, r4
 80a6f94:	e03f      	b.n	80a7016 <strftime+0x8ce>
 80a6f96:	bf00      	nop
 80a6f98:	20000010 	.word	0x20000010
 80a6f9c:	080a9efd 	.word	0x080a9efd
 80a6fa0:	080a9ef3 	.word	0x080a9ef3
 80a6fa4:	080a9ef8 	.word	0x080a9ef8
 80a6fa8:	080a9edd 	.word	0x080a9edd
 80a6fac:	fffff894 	.word	0xfffff894
 80a6fb0:	080a9eea 	.word	0x080a9eea
 80a6fb4:	6a2b      	ldr	r3, [r5, #32]
 80a6fb6:	2b00      	cmp	r3, #0
 80a6fb8:	db65      	blt.n	80a7086 <strftime+0x93e>
 80a6fba:	f001 f8a5 	bl	80a8108 <__tz_lock>
 80a6fbe:	9b06      	ldr	r3, [sp, #24]
 80a6fc0:	b91b      	cbnz	r3, 80a6fca <strftime+0x882>
 80a6fc2:	f001 f8a3 	bl	80a810c <_tzset_unlocked>
 80a6fc6:	2301      	movs	r3, #1
 80a6fc8:	9306      	str	r3, [sp, #24]
 80a6fca:	f001 fd8b 	bl	80a8ae4 <__gettzinfo>
 80a6fce:	6a2b      	ldr	r3, [r5, #32]
 80a6fd0:	221c      	movs	r2, #28
 80a6fd2:	2b00      	cmp	r3, #0
 80a6fd4:	bfd4      	ite	le
 80a6fd6:	2300      	movle	r3, #0
 80a6fd8:	2301      	movgt	r3, #1
 80a6fda:	fb02 0003 	mla	r0, r2, r3, r0
 80a6fde:	6a03      	ldr	r3, [r0, #32]
 80a6fe0:	eb07 0a04 	add.w	sl, r7, r4
 80a6fe4:	f1c3 0800 	rsb	r8, r3, #0
 80a6fe8:	f001 f88f 	bl	80a810a <__tz_unlock>
 80a6fec:	233c      	movs	r3, #60	; 0x3c
 80a6fee:	fb98 f0f3 	sdiv	r0, r8, r3
 80a6ff2:	9307      	str	r3, [sp, #28]
 80a6ff4:	f001 fe10 	bl	80a8c18 <labs>
 80a6ff8:	9b07      	ldr	r3, [sp, #28]
 80a6ffa:	ebc4 0b06 	rsb	fp, r4, r6
 80a6ffe:	fb90 f2f3 	sdiv	r2, r0, r3
 80a7002:	fb02 0013 	mls	r0, r2, r3, r0
 80a7006:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80a700a:	9000      	str	r0, [sp, #0]
 80a700c:	fb98 f3f3 	sdiv	r3, r8, r3
 80a7010:	4659      	mov	r1, fp
 80a7012:	4650      	mov	r0, sl
 80a7014:	4a24      	ldr	r2, [pc, #144]	; (80a70a8 <strftime+0x960>)
 80a7016:	f7fc f95f 	bl	80a32d8 <sniprintf>
 80a701a:	e4fa      	b.n	80a6a12 <strftime+0x2ca>
 80a701c:	4404      	add	r4, r0
 80a701e:	42a6      	cmp	r6, r4
 80a7020:	d831      	bhi.n	80a7086 <strftime+0x93e>
 80a7022:	e03b      	b.n	80a709c <strftime+0x954>
 80a7024:	6a2b      	ldr	r3, [r5, #32]
 80a7026:	2b00      	cmp	r3, #0
 80a7028:	db2d      	blt.n	80a7086 <strftime+0x93e>
 80a702a:	f001 f86d 	bl	80a8108 <__tz_lock>
 80a702e:	9b06      	ldr	r3, [sp, #24]
 80a7030:	b91b      	cbnz	r3, 80a703a <strftime+0x8f2>
 80a7032:	f001 f86b 	bl	80a810c <_tzset_unlocked>
 80a7036:	2301      	movs	r3, #1
 80a7038:	9306      	str	r3, [sp, #24]
 80a703a:	6a2b      	ldr	r3, [r5, #32]
 80a703c:	4a1b      	ldr	r2, [pc, #108]	; (80a70ac <strftime+0x964>)
 80a703e:	2b00      	cmp	r3, #0
 80a7040:	bfd4      	ite	le
 80a7042:	2300      	movle	r3, #0
 80a7044:	2301      	movgt	r3, #1
 80a7046:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
 80a704a:	4640      	mov	r0, r8
 80a704c:	f000 f830 	bl	80a70b0 <strlen>
 80a7050:	f108 38ff 	add.w	r8, r8, #4294967295
 80a7054:	193b      	adds	r3, r7, r4
 80a7056:	4420      	add	r0, r4
 80a7058:	4284      	cmp	r4, r0
 80a705a:	d00b      	beq.n	80a7074 <strftime+0x92c>
 80a705c:	9a02      	ldr	r2, [sp, #8]
 80a705e:	4294      	cmp	r4, r2
 80a7060:	d205      	bcs.n	80a706e <strftime+0x926>
 80a7062:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 80a7066:	3401      	adds	r4, #1
 80a7068:	f803 2b01 	strb.w	r2, [r3], #1
 80a706c:	e7f4      	b.n	80a7058 <strftime+0x910>
 80a706e:	f001 f84c 	bl	80a810a <__tz_unlock>
 80a7072:	e013      	b.n	80a709c <strftime+0x954>
 80a7074:	f001 f849 	bl	80a810a <__tz_unlock>
 80a7078:	e005      	b.n	80a7086 <strftime+0x93e>
 80a707a:	9b02      	ldr	r3, [sp, #8]
 80a707c:	429c      	cmp	r4, r3
 80a707e:	d20d      	bcs.n	80a709c <strftime+0x954>
 80a7080:	2325      	movs	r3, #37	; 0x25
 80a7082:	553b      	strb	r3, [r7, r4]
 80a7084:	3401      	adds	r4, #1
 80a7086:	f899 3000 	ldrb.w	r3, [r9]
 80a708a:	b11b      	cbz	r3, 80a7094 <strftime+0x94c>
 80a708c:	f109 0901 	add.w	r9, r9, #1
 80a7090:	f7ff bb69 	b.w	80a6766 <strftime+0x1e>
 80a7094:	b126      	cbz	r6, 80a70a0 <strftime+0x958>
 80a7096:	2300      	movs	r3, #0
 80a7098:	553b      	strb	r3, [r7, r4]
 80a709a:	e001      	b.n	80a70a0 <strftime+0x958>
 80a709c:	2000      	movs	r0, #0
 80a709e:	e000      	b.n	80a70a2 <strftime+0x95a>
 80a70a0:	4620      	mov	r0, r4
 80a70a2:	b013      	add	sp, #76	; 0x4c
 80a70a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a70a8:	080a9f07 	.word	0x080a9f07
 80a70ac:	200000b0 	.word	0x200000b0

080a70b0 <strlen>:
 80a70b0:	4603      	mov	r3, r0
 80a70b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a70b6:	2a00      	cmp	r2, #0
 80a70b8:	d1fb      	bne.n	80a70b2 <strlen+0x2>
 80a70ba:	1a18      	subs	r0, r3, r0
 80a70bc:	3801      	subs	r0, #1
 80a70be:	4770      	bx	lr

080a70c0 <strncmp>:
 80a70c0:	b530      	push	{r4, r5, lr}
 80a70c2:	b182      	cbz	r2, 80a70e6 <strncmp+0x26>
 80a70c4:	1e45      	subs	r5, r0, #1
 80a70c6:	3901      	subs	r1, #1
 80a70c8:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80a70cc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80a70d0:	42a3      	cmp	r3, r4
 80a70d2:	d106      	bne.n	80a70e2 <strncmp+0x22>
 80a70d4:	43ec      	mvns	r4, r5
 80a70d6:	4414      	add	r4, r2
 80a70d8:	42e0      	cmn	r0, r4
 80a70da:	d001      	beq.n	80a70e0 <strncmp+0x20>
 80a70dc:	2b00      	cmp	r3, #0
 80a70de:	d1f3      	bne.n	80a70c8 <strncmp+0x8>
 80a70e0:	461c      	mov	r4, r3
 80a70e2:	1b18      	subs	r0, r3, r4
 80a70e4:	bd30      	pop	{r4, r5, pc}
 80a70e6:	4610      	mov	r0, r2
 80a70e8:	bd30      	pop	{r4, r5, pc}

080a70ea <strncpy>:
 80a70ea:	4603      	mov	r3, r0
 80a70ec:	b510      	push	{r4, lr}
 80a70ee:	b142      	cbz	r2, 80a7102 <strncpy+0x18>
 80a70f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a70f4:	3a01      	subs	r2, #1
 80a70f6:	f803 4b01 	strb.w	r4, [r3], #1
 80a70fa:	2c00      	cmp	r4, #0
 80a70fc:	d1f7      	bne.n	80a70ee <strncpy+0x4>
 80a70fe:	441a      	add	r2, r3
 80a7100:	e000      	b.n	80a7104 <strncpy+0x1a>
 80a7102:	bd10      	pop	{r4, pc}
 80a7104:	4293      	cmp	r3, r2
 80a7106:	d002      	beq.n	80a710e <strncpy+0x24>
 80a7108:	f803 4b01 	strb.w	r4, [r3], #1
 80a710c:	e7fa      	b.n	80a7104 <strncpy+0x1a>
 80a710e:	bd10      	pop	{r4, pc}

080a7110 <sulp>:
 80a7110:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a7114:	460f      	mov	r7, r1
 80a7116:	4690      	mov	r8, r2
 80a7118:	f002 f848 	bl	80a91ac <__ulp>
 80a711c:	4604      	mov	r4, r0
 80a711e:	460d      	mov	r5, r1
 80a7120:	f1b8 0f00 	cmp.w	r8, #0
 80a7124:	d011      	beq.n	80a714a <sulp+0x3a>
 80a7126:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80a712a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80a712e:	2b00      	cmp	r3, #0
 80a7130:	dd0b      	ble.n	80a714a <sulp+0x3a>
 80a7132:	051b      	lsls	r3, r3, #20
 80a7134:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80a7138:	2400      	movs	r4, #0
 80a713a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80a713e:	4622      	mov	r2, r4
 80a7140:	462b      	mov	r3, r5
 80a7142:	f7fe f90f 	bl	80a5364 <__aeabi_dmul>
 80a7146:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a714a:	4620      	mov	r0, r4
 80a714c:	4629      	mov	r1, r5
 80a714e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a7152:	0000      	movs	r0, r0
 80a7154:	0000      	movs	r0, r0
	...

080a7158 <_strtod_r>:
 80a7158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a715c:	4682      	mov	sl, r0
 80a715e:	460c      	mov	r4, r1
 80a7160:	b09d      	sub	sp, #116	; 0x74
 80a7162:	2300      	movs	r3, #0
 80a7164:	9213      	str	r2, [sp, #76]	; 0x4c
 80a7166:	9318      	str	r3, [sp, #96]	; 0x60
 80a7168:	f04f 0800 	mov.w	r8, #0
 80a716c:	f04f 0900 	mov.w	r9, #0
 80a7170:	9117      	str	r1, [sp, #92]	; 0x5c
 80a7172:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a7174:	781a      	ldrb	r2, [r3, #0]
 80a7176:	2a0d      	cmp	r2, #13
 80a7178:	d805      	bhi.n	80a7186 <_strtod_r+0x2e>
 80a717a:	2a09      	cmp	r2, #9
 80a717c:	d213      	bcs.n	80a71a6 <_strtod_r+0x4e>
 80a717e:	2a00      	cmp	r2, #0
 80a7180:	f000 81ad 	beq.w	80a74de <_strtod_r+0x386>
 80a7184:	e012      	b.n	80a71ac <_strtod_r+0x54>
 80a7186:	2a2b      	cmp	r2, #43	; 0x2b
 80a7188:	d004      	beq.n	80a7194 <_strtod_r+0x3c>
 80a718a:	2a2d      	cmp	r2, #45	; 0x2d
 80a718c:	d004      	beq.n	80a7198 <_strtod_r+0x40>
 80a718e:	2a20      	cmp	r2, #32
 80a7190:	d10c      	bne.n	80a71ac <_strtod_r+0x54>
 80a7192:	e008      	b.n	80a71a6 <_strtod_r+0x4e>
 80a7194:	2200      	movs	r2, #0
 80a7196:	e000      	b.n	80a719a <_strtod_r+0x42>
 80a7198:	2201      	movs	r2, #1
 80a719a:	920c      	str	r2, [sp, #48]	; 0x30
 80a719c:	1c5a      	adds	r2, r3, #1
 80a719e:	9217      	str	r2, [sp, #92]	; 0x5c
 80a71a0:	785b      	ldrb	r3, [r3, #1]
 80a71a2:	b92b      	cbnz	r3, 80a71b0 <_strtod_r+0x58>
 80a71a4:	e19b      	b.n	80a74de <_strtod_r+0x386>
 80a71a6:	3301      	adds	r3, #1
 80a71a8:	9317      	str	r3, [sp, #92]	; 0x5c
 80a71aa:	e7e2      	b.n	80a7172 <_strtod_r+0x1a>
 80a71ac:	2300      	movs	r3, #0
 80a71ae:	930c      	str	r3, [sp, #48]	; 0x30
 80a71b0:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 80a71b2:	782b      	ldrb	r3, [r5, #0]
 80a71b4:	2b30      	cmp	r3, #48	; 0x30
 80a71b6:	d15c      	bne.n	80a7272 <_strtod_r+0x11a>
 80a71b8:	786b      	ldrb	r3, [r5, #1]
 80a71ba:	2b58      	cmp	r3, #88	; 0x58
 80a71bc:	d001      	beq.n	80a71c2 <_strtod_r+0x6a>
 80a71be:	2b78      	cmp	r3, #120	; 0x78
 80a71c0:	d14c      	bne.n	80a725c <_strtod_r+0x104>
 80a71c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80a71c4:	4aa8      	ldr	r2, [pc, #672]	; (80a7468 <_strtod_r+0x310>)
 80a71c6:	9301      	str	r3, [sp, #4]
 80a71c8:	ab18      	add	r3, sp, #96	; 0x60
 80a71ca:	9300      	str	r3, [sp, #0]
 80a71cc:	a917      	add	r1, sp, #92	; 0x5c
 80a71ce:	ab19      	add	r3, sp, #100	; 0x64
 80a71d0:	4650      	mov	r0, sl
 80a71d2:	f001 f970 	bl	80a84b6 <__gethex>
 80a71d6:	f010 0607 	ands.w	r6, r0, #7
 80a71da:	4604      	mov	r4, r0
 80a71dc:	f000 8585 	beq.w	80a7cea <_strtod_r+0xb92>
 80a71e0:	2e06      	cmp	r6, #6
 80a71e2:	d105      	bne.n	80a71f0 <_strtod_r+0x98>
 80a71e4:	3501      	adds	r5, #1
 80a71e6:	2300      	movs	r3, #0
 80a71e8:	9517      	str	r5, [sp, #92]	; 0x5c
 80a71ea:	930c      	str	r3, [sp, #48]	; 0x30
 80a71ec:	f000 bd7d 	b.w	80a7cea <_strtod_r+0xb92>
 80a71f0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80a71f2:	b13a      	cbz	r2, 80a7204 <_strtod_r+0xac>
 80a71f4:	2135      	movs	r1, #53	; 0x35
 80a71f6:	a81a      	add	r0, sp, #104	; 0x68
 80a71f8:	f002 f8bf 	bl	80a937a <__copybits>
 80a71fc:	9918      	ldr	r1, [sp, #96]	; 0x60
 80a71fe:	4650      	mov	r0, sl
 80a7200:	f001 fd43 	bl	80a8c8a <_Bfree>
 80a7204:	2e06      	cmp	r6, #6
 80a7206:	d822      	bhi.n	80a724e <_strtod_r+0xf6>
 80a7208:	e8df f006 	tbb	[pc, r6]
 80a720c:	18080d04 	.word	0x18080d04
 80a7210:	0d1d      	.short	0x0d1d
 80a7212:	04          	.byte	0x04
 80a7213:	00          	.byte	0x00
 80a7214:	f04f 0900 	mov.w	r9, #0
 80a7218:	46c8      	mov	r8, r9
 80a721a:	e018      	b.n	80a724e <_strtod_r+0xf6>
 80a721c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80a7220:	f8dd 906c 	ldr.w	r9, [sp, #108]	; 0x6c
 80a7224:	e013      	b.n	80a724e <_strtod_r+0xf6>
 80a7226:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80a7228:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80a722a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80a722e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80a7232:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80a7236:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80a723a:	e008      	b.n	80a724e <_strtod_r+0xf6>
 80a723c:	f8df 922c 	ldr.w	r9, [pc, #556]	; 80a746c <_strtod_r+0x314>
 80a7240:	f04f 0800 	mov.w	r8, #0
 80a7244:	e003      	b.n	80a724e <_strtod_r+0xf6>
 80a7246:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80a724a:	f04f 38ff 	mov.w	r8, #4294967295
 80a724e:	0721      	lsls	r1, r4, #28
 80a7250:	f140 854b 	bpl.w	80a7cea <_strtod_r+0xb92>
 80a7254:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 80a7258:	f000 bd47 	b.w	80a7cea <_strtod_r+0xb92>
 80a725c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a725e:	1c5a      	adds	r2, r3, #1
 80a7260:	9217      	str	r2, [sp, #92]	; 0x5c
 80a7262:	785b      	ldrb	r3, [r3, #1]
 80a7264:	2b30      	cmp	r3, #48	; 0x30
 80a7266:	d0f9      	beq.n	80a725c <_strtod_r+0x104>
 80a7268:	2b00      	cmp	r3, #0
 80a726a:	f000 853e 	beq.w	80a7cea <_strtod_r+0xb92>
 80a726e:	2301      	movs	r3, #1
 80a7270:	e000      	b.n	80a7274 <_strtod_r+0x11c>
 80a7272:	2300      	movs	r3, #0
 80a7274:	9305      	str	r3, [sp, #20]
 80a7276:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a7278:	220a      	movs	r2, #10
 80a727a:	9306      	str	r3, [sp, #24]
 80a727c:	2300      	movs	r3, #0
 80a727e:	469b      	mov	fp, r3
 80a7280:	9302      	str	r3, [sp, #8]
 80a7282:	9304      	str	r3, [sp, #16]
 80a7284:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 80a7286:	782e      	ldrb	r6, [r5, #0]
 80a7288:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80a728c:	b2d9      	uxtb	r1, r3
 80a728e:	2909      	cmp	r1, #9
 80a7290:	d811      	bhi.n	80a72b6 <_strtod_r+0x15e>
 80a7292:	f1bb 0f08 	cmp.w	fp, #8
 80a7296:	bfd5      	itete	le
 80a7298:	9904      	ldrle	r1, [sp, #16]
 80a729a:	9902      	ldrgt	r1, [sp, #8]
 80a729c:	fb02 3301 	mlale	r3, r2, r1, r3
 80a72a0:	fb02 3301 	mlagt	r3, r2, r1, r3
 80a72a4:	f105 0501 	add.w	r5, r5, #1
 80a72a8:	bfd4      	ite	le
 80a72aa:	9304      	strle	r3, [sp, #16]
 80a72ac:	9302      	strgt	r3, [sp, #8]
 80a72ae:	f10b 0b01 	add.w	fp, fp, #1
 80a72b2:	9517      	str	r5, [sp, #92]	; 0x5c
 80a72b4:	e7e6      	b.n	80a7284 <_strtod_r+0x12c>
 80a72b6:	4650      	mov	r0, sl
 80a72b8:	f7ff f994 	bl	80a65e4 <_localeconv_r>
 80a72bc:	6807      	ldr	r7, [r0, #0]
 80a72be:	4650      	mov	r0, sl
 80a72c0:	f7ff f990 	bl	80a65e4 <_localeconv_r>
 80a72c4:	6800      	ldr	r0, [r0, #0]
 80a72c6:	f7ff fef3 	bl	80a70b0 <strlen>
 80a72ca:	4639      	mov	r1, r7
 80a72cc:	4602      	mov	r2, r0
 80a72ce:	4628      	mov	r0, r5
 80a72d0:	f7ff fef6 	bl	80a70c0 <strncmp>
 80a72d4:	4607      	mov	r7, r0
 80a72d6:	b128      	cbz	r0, 80a72e4 <_strtod_r+0x18c>
 80a72d8:	2000      	movs	r0, #0
 80a72da:	4633      	mov	r3, r6
 80a72dc:	465d      	mov	r5, fp
 80a72de:	4602      	mov	r2, r0
 80a72e0:	4601      	mov	r1, r0
 80a72e2:	e05a      	b.n	80a739a <_strtod_r+0x242>
 80a72e4:	4650      	mov	r0, sl
 80a72e6:	f7ff f97d 	bl	80a65e4 <_localeconv_r>
 80a72ea:	6800      	ldr	r0, [r0, #0]
 80a72ec:	f7ff fee0 	bl	80a70b0 <strlen>
 80a72f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a72f2:	181a      	adds	r2, r3, r0
 80a72f4:	9217      	str	r2, [sp, #92]	; 0x5c
 80a72f6:	5c1b      	ldrb	r3, [r3, r0]
 80a72f8:	f1bb 0f00 	cmp.w	fp, #0
 80a72fc:	d145      	bne.n	80a738a <_strtod_r+0x232>
 80a72fe:	4658      	mov	r0, fp
 80a7300:	2b30      	cmp	r3, #48	; 0x30
 80a7302:	d105      	bne.n	80a7310 <_strtod_r+0x1b8>
 80a7304:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a7306:	3001      	adds	r0, #1
 80a7308:	1c5a      	adds	r2, r3, #1
 80a730a:	9217      	str	r2, [sp, #92]	; 0x5c
 80a730c:	785b      	ldrb	r3, [r3, #1]
 80a730e:	e7f7      	b.n	80a7300 <_strtod_r+0x1a8>
 80a7310:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80a7314:	2a08      	cmp	r2, #8
 80a7316:	d846      	bhi.n	80a73a6 <_strtod_r+0x24e>
 80a7318:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80a731a:	9206      	str	r2, [sp, #24]
 80a731c:	4602      	mov	r2, r0
 80a731e:	2000      	movs	r0, #0
 80a7320:	4605      	mov	r5, r0
 80a7322:	3b30      	subs	r3, #48	; 0x30
 80a7324:	f100 0101 	add.w	r1, r0, #1
 80a7328:	d029      	beq.n	80a737e <_strtod_r+0x226>
 80a732a:	440a      	add	r2, r1
 80a732c:	4629      	mov	r1, r5
 80a732e:	eb05 0c00 	add.w	ip, r5, r0
 80a7332:	260a      	movs	r6, #10
 80a7334:	4561      	cmp	r1, ip
 80a7336:	d00f      	beq.n	80a7358 <_strtod_r+0x200>
 80a7338:	3101      	adds	r1, #1
 80a733a:	f101 3eff 	add.w	lr, r1, #4294967295
 80a733e:	f1be 0f08 	cmp.w	lr, #8
 80a7342:	dc03      	bgt.n	80a734c <_strtod_r+0x1f4>
 80a7344:	9f04      	ldr	r7, [sp, #16]
 80a7346:	4377      	muls	r7, r6
 80a7348:	9704      	str	r7, [sp, #16]
 80a734a:	e7f3      	b.n	80a7334 <_strtod_r+0x1dc>
 80a734c:	2910      	cmp	r1, #16
 80a734e:	bfde      	ittt	le
 80a7350:	9f02      	ldrle	r7, [sp, #8]
 80a7352:	4377      	mulle	r7, r6
 80a7354:	9702      	strle	r7, [sp, #8]
 80a7356:	e7ed      	b.n	80a7334 <_strtod_r+0x1dc>
 80a7358:	4428      	add	r0, r5
 80a735a:	2808      	cmp	r0, #8
 80a735c:	f100 0501 	add.w	r5, r0, #1
 80a7360:	dc05      	bgt.n	80a736e <_strtod_r+0x216>
 80a7362:	9804      	ldr	r0, [sp, #16]
 80a7364:	210a      	movs	r1, #10
 80a7366:	fb01 3300 	mla	r3, r1, r0, r3
 80a736a:	9304      	str	r3, [sp, #16]
 80a736c:	e006      	b.n	80a737c <_strtod_r+0x224>
 80a736e:	2d10      	cmp	r5, #16
 80a7370:	bfdf      	itttt	le
 80a7372:	9802      	ldrle	r0, [sp, #8]
 80a7374:	210a      	movle	r1, #10
 80a7376:	fb01 3300 	mlale	r3, r1, r0, r3
 80a737a:	9302      	strle	r3, [sp, #8]
 80a737c:	2100      	movs	r1, #0
 80a737e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a7380:	1c58      	adds	r0, r3, #1
 80a7382:	9017      	str	r0, [sp, #92]	; 0x5c
 80a7384:	785b      	ldrb	r3, [r3, #1]
 80a7386:	4608      	mov	r0, r1
 80a7388:	e002      	b.n	80a7390 <_strtod_r+0x238>
 80a738a:	465d      	mov	r5, fp
 80a738c:	4638      	mov	r0, r7
 80a738e:	463a      	mov	r2, r7
 80a7390:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80a7394:	2909      	cmp	r1, #9
 80a7396:	d9c4      	bls.n	80a7322 <_strtod_r+0x1ca>
 80a7398:	2101      	movs	r1, #1
 80a739a:	2b65      	cmp	r3, #101	; 0x65
 80a739c:	d001      	beq.n	80a73a2 <_strtod_r+0x24a>
 80a739e:	2b45      	cmp	r3, #69	; 0x45
 80a73a0:	d14f      	bne.n	80a7442 <_strtod_r+0x2ea>
 80a73a2:	b96d      	cbnz	r5, 80a73c0 <_strtod_r+0x268>
 80a73a4:	e004      	b.n	80a73b0 <_strtod_r+0x258>
 80a73a6:	2b65      	cmp	r3, #101	; 0x65
 80a73a8:	f040 84ad 	bne.w	80a7d06 <_strtod_r+0xbae>
 80a73ac:	2200      	movs	r2, #0
 80a73ae:	2101      	movs	r1, #1
 80a73b0:	b928      	cbnz	r0, 80a73be <_strtod_r+0x266>
 80a73b2:	9b05      	ldr	r3, [sp, #20]
 80a73b4:	2b00      	cmp	r3, #0
 80a73b6:	f000 8092 	beq.w	80a74de <_strtod_r+0x386>
 80a73ba:	4605      	mov	r5, r0
 80a73bc:	e000      	b.n	80a73c0 <_strtod_r+0x268>
 80a73be:	2500      	movs	r5, #0
 80a73c0:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80a73c2:	1c63      	adds	r3, r4, #1
 80a73c4:	9317      	str	r3, [sp, #92]	; 0x5c
 80a73c6:	7863      	ldrb	r3, [r4, #1]
 80a73c8:	2b2b      	cmp	r3, #43	; 0x2b
 80a73ca:	d006      	beq.n	80a73da <_strtod_r+0x282>
 80a73cc:	2b2d      	cmp	r3, #45	; 0x2d
 80a73ce:	d002      	beq.n	80a73d6 <_strtod_r+0x27e>
 80a73d0:	2600      	movs	r6, #0
 80a73d2:	9603      	str	r6, [sp, #12]
 80a73d4:	e006      	b.n	80a73e4 <_strtod_r+0x28c>
 80a73d6:	2301      	movs	r3, #1
 80a73d8:	e000      	b.n	80a73dc <_strtod_r+0x284>
 80a73da:	2300      	movs	r3, #0
 80a73dc:	9303      	str	r3, [sp, #12]
 80a73de:	1ca3      	adds	r3, r4, #2
 80a73e0:	9317      	str	r3, [sp, #92]	; 0x5c
 80a73e2:	78a3      	ldrb	r3, [r4, #2]
 80a73e4:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 80a73e8:	2e09      	cmp	r6, #9
 80a73ea:	d829      	bhi.n	80a7440 <_strtod_r+0x2e8>
 80a73ec:	2b30      	cmp	r3, #48	; 0x30
 80a73ee:	d104      	bne.n	80a73fa <_strtod_r+0x2a2>
 80a73f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a73f2:	1c5e      	adds	r6, r3, #1
 80a73f4:	9617      	str	r6, [sp, #92]	; 0x5c
 80a73f6:	785b      	ldrb	r3, [r3, #1]
 80a73f8:	e7f8      	b.n	80a73ec <_strtod_r+0x294>
 80a73fa:	f1a3 0631 	sub.w	r6, r3, #49	; 0x31
 80a73fe:	2e08      	cmp	r6, #8
 80a7400:	d81f      	bhi.n	80a7442 <_strtod_r+0x2ea>
 80a7402:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80a7406:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a7408:	461f      	mov	r7, r3
 80a740a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a740c:	1c5e      	adds	r6, r3, #1
 80a740e:	9617      	str	r6, [sp, #92]	; 0x5c
 80a7410:	785b      	ldrb	r3, [r3, #1]
 80a7412:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 80a7416:	f1bc 0f09 	cmp.w	ip, #9
 80a741a:	d805      	bhi.n	80a7428 <_strtod_r+0x2d0>
 80a741c:	260a      	movs	r6, #10
 80a741e:	fb06 3e0e 	mla	lr, r6, lr, r3
 80a7422:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80a7426:	e7f0      	b.n	80a740a <_strtod_r+0x2b2>
 80a7428:	1bf6      	subs	r6, r6, r7
 80a742a:	2e08      	cmp	r6, #8
 80a742c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80a7430:	dc02      	bgt.n	80a7438 <_strtod_r+0x2e0>
 80a7432:	4576      	cmp	r6, lr
 80a7434:	bfa8      	it	ge
 80a7436:	4676      	movge	r6, lr
 80a7438:	9f03      	ldr	r7, [sp, #12]
 80a743a:	b11f      	cbz	r7, 80a7444 <_strtod_r+0x2ec>
 80a743c:	4276      	negs	r6, r6
 80a743e:	e001      	b.n	80a7444 <_strtod_r+0x2ec>
 80a7440:	9417      	str	r4, [sp, #92]	; 0x5c
 80a7442:	2600      	movs	r6, #0
 80a7444:	2d00      	cmp	r5, #0
 80a7446:	d152      	bne.n	80a74ee <_strtod_r+0x396>
 80a7448:	2800      	cmp	r0, #0
 80a744a:	f040 844e 	bne.w	80a7cea <_strtod_r+0xb92>
 80a744e:	9a05      	ldr	r2, [sp, #20]
 80a7450:	2a00      	cmp	r2, #0
 80a7452:	f040 844a 	bne.w	80a7cea <_strtod_r+0xb92>
 80a7456:	2900      	cmp	r1, #0
 80a7458:	d141      	bne.n	80a74de <_strtod_r+0x386>
 80a745a:	2b4e      	cmp	r3, #78	; 0x4e
 80a745c:	d020      	beq.n	80a74a0 <_strtod_r+0x348>
 80a745e:	dc07      	bgt.n	80a7470 <_strtod_r+0x318>
 80a7460:	2b49      	cmp	r3, #73	; 0x49
 80a7462:	d00a      	beq.n	80a747a <_strtod_r+0x322>
 80a7464:	e03b      	b.n	80a74de <_strtod_r+0x386>
 80a7466:	bf00      	nop
 80a7468:	080a9f14 	.word	0x080a9f14
 80a746c:	7ff00000 	.word	0x7ff00000
 80a7470:	2b69      	cmp	r3, #105	; 0x69
 80a7472:	d002      	beq.n	80a747a <_strtod_r+0x322>
 80a7474:	2b6e      	cmp	r3, #110	; 0x6e
 80a7476:	d013      	beq.n	80a74a0 <_strtod_r+0x348>
 80a7478:	e031      	b.n	80a74de <_strtod_r+0x386>
 80a747a:	49aa      	ldr	r1, [pc, #680]	; (80a7724 <_strtod_r+0x5cc>)
 80a747c:	a817      	add	r0, sp, #92	; 0x5c
 80a747e:	f001 fa4b 	bl	80a8918 <__match>
 80a7482:	b360      	cbz	r0, 80a74de <_strtod_r+0x386>
 80a7484:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a7486:	49a8      	ldr	r1, [pc, #672]	; (80a7728 <_strtod_r+0x5d0>)
 80a7488:	3b01      	subs	r3, #1
 80a748a:	a817      	add	r0, sp, #92	; 0x5c
 80a748c:	9317      	str	r3, [sp, #92]	; 0x5c
 80a748e:	f001 fa43 	bl	80a8918 <__match>
 80a7492:	b910      	cbnz	r0, 80a749a <_strtod_r+0x342>
 80a7494:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a7496:	3301      	adds	r3, #1
 80a7498:	9317      	str	r3, [sp, #92]	; 0x5c
 80a749a:	f8df 92a8 	ldr.w	r9, [pc, #680]	; 80a7744 <_strtod_r+0x5ec>
 80a749e:	e01a      	b.n	80a74d6 <_strtod_r+0x37e>
 80a74a0:	49a2      	ldr	r1, [pc, #648]	; (80a772c <_strtod_r+0x5d4>)
 80a74a2:	a817      	add	r0, sp, #92	; 0x5c
 80a74a4:	f001 fa38 	bl	80a8918 <__match>
 80a74a8:	b1c8      	cbz	r0, 80a74de <_strtod_r+0x386>
 80a74aa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a74ac:	781b      	ldrb	r3, [r3, #0]
 80a74ae:	2b28      	cmp	r3, #40	; 0x28
 80a74b0:	d10f      	bne.n	80a74d2 <_strtod_r+0x37a>
 80a74b2:	aa1a      	add	r2, sp, #104	; 0x68
 80a74b4:	499e      	ldr	r1, [pc, #632]	; (80a7730 <_strtod_r+0x5d8>)
 80a74b6:	a817      	add	r0, sp, #92	; 0x5c
 80a74b8:	f001 fa41 	bl	80a893e <__hexnan>
 80a74bc:	2805      	cmp	r0, #5
 80a74be:	d108      	bne.n	80a74d2 <_strtod_r+0x37a>
 80a74c0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80a74c2:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80a74c6:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80a74ca:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80a74ce:	f000 bc0c 	b.w	80a7cea <_strtod_r+0xb92>
 80a74d2:	f8df 9274 	ldr.w	r9, [pc, #628]	; 80a7748 <_strtod_r+0x5f0>
 80a74d6:	f04f 0800 	mov.w	r8, #0
 80a74da:	f000 bc06 	b.w	80a7cea <_strtod_r+0xb92>
 80a74de:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80a74e0:	9417      	str	r4, [sp, #92]	; 0x5c
 80a74e2:	2b00      	cmp	r3, #0
 80a74e4:	f000 840c 	beq.w	80a7d00 <_strtod_r+0xba8>
 80a74e8:	2300      	movs	r3, #0
 80a74ea:	930c      	str	r3, [sp, #48]	; 0x30
 80a74ec:	e3ff      	b.n	80a7cee <_strtod_r+0xb96>
 80a74ee:	462c      	mov	r4, r5
 80a74f0:	f1bb 0f00 	cmp.w	fp, #0
 80a74f4:	bf08      	it	eq
 80a74f6:	46ab      	moveq	fp, r5
 80a74f8:	9804      	ldr	r0, [sp, #16]
 80a74fa:	2d10      	cmp	r5, #16
 80a74fc:	bfa8      	it	ge
 80a74fe:	2410      	movge	r4, #16
 80a7500:	1ab7      	subs	r7, r6, r2
 80a7502:	f7fd feb9 	bl	80a5278 <__aeabi_ui2d>
 80a7506:	2c09      	cmp	r4, #9
 80a7508:	4680      	mov	r8, r0
 80a750a:	4689      	mov	r9, r1
 80a750c:	dd13      	ble.n	80a7536 <_strtod_r+0x3de>
 80a750e:	4b89      	ldr	r3, [pc, #548]	; (80a7734 <_strtod_r+0x5dc>)
 80a7510:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80a7514:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80a7518:	f7fd ff24 	bl	80a5364 <__aeabi_dmul>
 80a751c:	4680      	mov	r8, r0
 80a751e:	9802      	ldr	r0, [sp, #8]
 80a7520:	4689      	mov	r9, r1
 80a7522:	f7fd fea9 	bl	80a5278 <__aeabi_ui2d>
 80a7526:	4602      	mov	r2, r0
 80a7528:	460b      	mov	r3, r1
 80a752a:	4640      	mov	r0, r8
 80a752c:	4649      	mov	r1, r9
 80a752e:	f7fd fd67 	bl	80a5000 <__adddf3>
 80a7532:	4680      	mov	r8, r0
 80a7534:	4689      	mov	r9, r1
 80a7536:	2d0f      	cmp	r5, #15
 80a7538:	dc33      	bgt.n	80a75a2 <_strtod_r+0x44a>
 80a753a:	2f00      	cmp	r7, #0
 80a753c:	f000 83d5 	beq.w	80a7cea <_strtod_r+0xb92>
 80a7540:	dd22      	ble.n	80a7588 <_strtod_r+0x430>
 80a7542:	2f16      	cmp	r7, #22
 80a7544:	dc07      	bgt.n	80a7556 <_strtod_r+0x3fe>
 80a7546:	4d7b      	ldr	r5, [pc, #492]	; (80a7734 <_strtod_r+0x5dc>)
 80a7548:	4642      	mov	r2, r8
 80a754a:	eb05 01c7 	add.w	r1, r5, r7, lsl #3
 80a754e:	464b      	mov	r3, r9
 80a7550:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a7554:	e013      	b.n	80a757e <_strtod_r+0x426>
 80a7556:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80a755a:	429f      	cmp	r7, r3
 80a755c:	dc21      	bgt.n	80a75a2 <_strtod_r+0x44a>
 80a755e:	4c75      	ldr	r4, [pc, #468]	; (80a7734 <_strtod_r+0x5dc>)
 80a7560:	f1c5 050f 	rsb	r5, r5, #15
 80a7564:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80a7568:	1b7d      	subs	r5, r7, r5
 80a756a:	4642      	mov	r2, r8
 80a756c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a7570:	464b      	mov	r3, r9
 80a7572:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80a7576:	f7fd fef5 	bl	80a5364 <__aeabi_dmul>
 80a757a:	e9d4 2300 	ldrd	r2, r3, [r4]
 80a757e:	f7fd fef1 	bl	80a5364 <__aeabi_dmul>
 80a7582:	4680      	mov	r8, r0
 80a7584:	4689      	mov	r9, r1
 80a7586:	e3b0      	b.n	80a7cea <_strtod_r+0xb92>
 80a7588:	f117 0f16 	cmn.w	r7, #22
 80a758c:	db09      	blt.n	80a75a2 <_strtod_r+0x44a>
 80a758e:	4d69      	ldr	r5, [pc, #420]	; (80a7734 <_strtod_r+0x5dc>)
 80a7590:	4640      	mov	r0, r8
 80a7592:	eba5 03c7 	sub.w	r3, r5, r7, lsl #3
 80a7596:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a759a:	4649      	mov	r1, r9
 80a759c:	f7fe f80c 	bl	80a55b8 <__aeabi_ddiv>
 80a75a0:	e7ef      	b.n	80a7582 <_strtod_r+0x42a>
 80a75a2:	1b2c      	subs	r4, r5, r4
 80a75a4:	443c      	add	r4, r7
 80a75a6:	2c00      	cmp	r4, #0
 80a75a8:	dd5d      	ble.n	80a7666 <_strtod_r+0x50e>
 80a75aa:	f014 010f 	ands.w	r1, r4, #15
 80a75ae:	d00a      	beq.n	80a75c6 <_strtod_r+0x46e>
 80a75b0:	4b60      	ldr	r3, [pc, #384]	; (80a7734 <_strtod_r+0x5dc>)
 80a75b2:	4642      	mov	r2, r8
 80a75b4:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80a75b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a75bc:	464b      	mov	r3, r9
 80a75be:	f7fd fed1 	bl	80a5364 <__aeabi_dmul>
 80a75c2:	4680      	mov	r8, r0
 80a75c4:	4689      	mov	r9, r1
 80a75c6:	f034 040f 	bics.w	r4, r4, #15
 80a75ca:	f000 80c1 	beq.w	80a7750 <_strtod_r+0x5f8>
 80a75ce:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
 80a75d2:	dd0f      	ble.n	80a75f4 <_strtod_r+0x49c>
 80a75d4:	f04f 0b00 	mov.w	fp, #0
 80a75d8:	f8cd b008 	str.w	fp, [sp, #8]
 80a75dc:	f8cd b014 	str.w	fp, [sp, #20]
 80a75e0:	f8cd b010 	str.w	fp, [sp, #16]
 80a75e4:	2322      	movs	r3, #34	; 0x22
 80a75e6:	f8ca 3000 	str.w	r3, [sl]
 80a75ea:	f8df 9158 	ldr.w	r9, [pc, #344]	; 80a7744 <_strtod_r+0x5ec>
 80a75ee:	f04f 0800 	mov.w	r8, #0
 80a75f2:	e189      	b.n	80a7908 <_strtod_r+0x7b0>
 80a75f4:	4640      	mov	r0, r8
 80a75f6:	4649      	mov	r1, r9
 80a75f8:	2300      	movs	r3, #0
 80a75fa:	4e4f      	ldr	r6, [pc, #316]	; (80a7738 <_strtod_r+0x5e0>)
 80a75fc:	1124      	asrs	r4, r4, #4
 80a75fe:	9302      	str	r3, [sp, #8]
 80a7600:	2c01      	cmp	r4, #1
 80a7602:	dd0c      	ble.n	80a761e <_strtod_r+0x4c6>
 80a7604:	07e2      	lsls	r2, r4, #31
 80a7606:	d504      	bpl.n	80a7612 <_strtod_r+0x4ba>
 80a7608:	e9d6 2300 	ldrd	r2, r3, [r6]
 80a760c:	f7fd feaa 	bl	80a5364 <__aeabi_dmul>
 80a7610:	2301      	movs	r3, #1
 80a7612:	9a02      	ldr	r2, [sp, #8]
 80a7614:	1064      	asrs	r4, r4, #1
 80a7616:	3201      	adds	r2, #1
 80a7618:	9202      	str	r2, [sp, #8]
 80a761a:	3608      	adds	r6, #8
 80a761c:	e7f0      	b.n	80a7600 <_strtod_r+0x4a8>
 80a761e:	b10b      	cbz	r3, 80a7624 <_strtod_r+0x4cc>
 80a7620:	4680      	mov	r8, r0
 80a7622:	4689      	mov	r9, r1
 80a7624:	4b44      	ldr	r3, [pc, #272]	; (80a7738 <_strtod_r+0x5e0>)
 80a7626:	9a02      	ldr	r2, [sp, #8]
 80a7628:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80a762c:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 80a7630:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a7634:	4642      	mov	r2, r8
 80a7636:	464b      	mov	r3, r9
 80a7638:	f7fd fe94 	bl	80a5364 <__aeabi_dmul>
 80a763c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80a7640:	4689      	mov	r9, r1
 80a7642:	460a      	mov	r2, r1
 80a7644:	0d1b      	lsrs	r3, r3, #20
 80a7646:	493d      	ldr	r1, [pc, #244]	; (80a773c <_strtod_r+0x5e4>)
 80a7648:	051b      	lsls	r3, r3, #20
 80a764a:	428b      	cmp	r3, r1
 80a764c:	4680      	mov	r8, r0
 80a764e:	d8c1      	bhi.n	80a75d4 <_strtod_r+0x47c>
 80a7650:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80a7654:	428b      	cmp	r3, r1
 80a7656:	bf86      	itte	hi
 80a7658:	f8df 90f0 	ldrhi.w	r9, [pc, #240]	; 80a774c <_strtod_r+0x5f4>
 80a765c:	f04f 38ff 	movhi.w	r8, #4294967295
 80a7660:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80a7664:	e074      	b.n	80a7750 <_strtod_r+0x5f8>
 80a7666:	d073      	beq.n	80a7750 <_strtod_r+0x5f8>
 80a7668:	4264      	negs	r4, r4
 80a766a:	f014 020f 	ands.w	r2, r4, #15
 80a766e:	d00a      	beq.n	80a7686 <_strtod_r+0x52e>
 80a7670:	4b30      	ldr	r3, [pc, #192]	; (80a7734 <_strtod_r+0x5dc>)
 80a7672:	4640      	mov	r0, r8
 80a7674:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80a7678:	4649      	mov	r1, r9
 80a767a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a767e:	f7fd ff9b 	bl	80a55b8 <__aeabi_ddiv>
 80a7682:	4680      	mov	r8, r0
 80a7684:	4689      	mov	r9, r1
 80a7686:	1124      	asrs	r4, r4, #4
 80a7688:	d062      	beq.n	80a7750 <_strtod_r+0x5f8>
 80a768a:	2c1f      	cmp	r4, #31
 80a768c:	dd08      	ble.n	80a76a0 <_strtod_r+0x548>
 80a768e:	f04f 0b00 	mov.w	fp, #0
 80a7692:	f8cd b008 	str.w	fp, [sp, #8]
 80a7696:	f8cd b014 	str.w	fp, [sp, #20]
 80a769a:	f8cd b010 	str.w	fp, [sp, #16]
 80a769e:	e12c      	b.n	80a78fa <_strtod_r+0x7a2>
 80a76a0:	4640      	mov	r0, r8
 80a76a2:	4649      	mov	r1, r9
 80a76a4:	f014 0f10 	tst.w	r4, #16
 80a76a8:	bf0c      	ite	eq
 80a76aa:	2300      	moveq	r3, #0
 80a76ac:	236a      	movne	r3, #106	; 0x6a
 80a76ae:	4e24      	ldr	r6, [pc, #144]	; (80a7740 <_strtod_r+0x5e8>)
 80a76b0:	9303      	str	r3, [sp, #12]
 80a76b2:	2300      	movs	r3, #0
 80a76b4:	2c00      	cmp	r4, #0
 80a76b6:	dd09      	ble.n	80a76cc <_strtod_r+0x574>
 80a76b8:	07e2      	lsls	r2, r4, #31
 80a76ba:	d504      	bpl.n	80a76c6 <_strtod_r+0x56e>
 80a76bc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80a76c0:	f7fd fe50 	bl	80a5364 <__aeabi_dmul>
 80a76c4:	2301      	movs	r3, #1
 80a76c6:	1064      	asrs	r4, r4, #1
 80a76c8:	3608      	adds	r6, #8
 80a76ca:	e7f3      	b.n	80a76b4 <_strtod_r+0x55c>
 80a76cc:	b10b      	cbz	r3, 80a76d2 <_strtod_r+0x57a>
 80a76ce:	4680      	mov	r8, r0
 80a76d0:	4689      	mov	r9, r1
 80a76d2:	9b03      	ldr	r3, [sp, #12]
 80a76d4:	b1eb      	cbz	r3, 80a7712 <_strtod_r+0x5ba>
 80a76d6:	f3c9 530a 	ubfx	r3, r9, #20, #11
 80a76da:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80a76de:	2b00      	cmp	r3, #0
 80a76e0:	4649      	mov	r1, r9
 80a76e2:	dd16      	ble.n	80a7712 <_strtod_r+0x5ba>
 80a76e4:	2b1f      	cmp	r3, #31
 80a76e6:	dd0e      	ble.n	80a7706 <_strtod_r+0x5ae>
 80a76e8:	2b34      	cmp	r3, #52	; 0x34
 80a76ea:	bfde      	ittt	le
 80a76ec:	3b20      	suble	r3, #32
 80a76ee:	f04f 32ff 	movle.w	r2, #4294967295
 80a76f2:	fa02 f303 	lslle.w	r3, r2, r3
 80a76f6:	f04f 0800 	mov.w	r8, #0
 80a76fa:	bfcc      	ite	gt
 80a76fc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80a7700:	ea03 0901 	andle.w	r9, r3, r1
 80a7704:	e005      	b.n	80a7712 <_strtod_r+0x5ba>
 80a7706:	f04f 32ff 	mov.w	r2, #4294967295
 80a770a:	fa02 f303 	lsl.w	r3, r2, r3
 80a770e:	ea03 0808 	and.w	r8, r3, r8
 80a7712:	2200      	movs	r2, #0
 80a7714:	2300      	movs	r3, #0
 80a7716:	4640      	mov	r0, r8
 80a7718:	4649      	mov	r1, r9
 80a771a:	f7fe f88b 	bl	80a5834 <__aeabi_dcmpeq>
 80a771e:	2800      	cmp	r0, #0
 80a7720:	d1b5      	bne.n	80a768e <_strtod_r+0x536>
 80a7722:	e017      	b.n	80a7754 <_strtod_r+0x5fc>
 80a7724:	080a9a68 	.word	0x080a9a68
 80a7728:	080a9f28 	.word	0x080a9f28
 80a772c:	080a9f79 	.word	0x080a9f79
 80a7730:	080a9f30 	.word	0x080a9f30
 80a7734:	080aa1d8 	.word	0x080aa1d8
 80a7738:	080aa2a0 	.word	0x080aa2a0
 80a773c:	7ca00000 	.word	0x7ca00000
 80a7740:	080a9f48 	.word	0x080a9f48
 80a7744:	7ff00000 	.word	0x7ff00000
 80a7748:	fff80000 	.word	0xfff80000
 80a774c:	7fefffff 	.word	0x7fefffff
 80a7750:	2300      	movs	r3, #0
 80a7752:	9303      	str	r3, [sp, #12]
 80a7754:	9b04      	ldr	r3, [sp, #16]
 80a7756:	465a      	mov	r2, fp
 80a7758:	9300      	str	r3, [sp, #0]
 80a775a:	9906      	ldr	r1, [sp, #24]
 80a775c:	462b      	mov	r3, r5
 80a775e:	4650      	mov	r0, sl
 80a7760:	f001 fae5 	bl	80a8d2e <__s2b>
 80a7764:	9005      	str	r0, [sp, #20]
 80a7766:	2800      	cmp	r0, #0
 80a7768:	f43f af34 	beq.w	80a75d4 <_strtod_r+0x47c>
 80a776c:	2f00      	cmp	r7, #0
 80a776e:	f1c7 0300 	rsb	r3, r7, #0
 80a7772:	bfa8      	it	ge
 80a7774:	2300      	movge	r3, #0
 80a7776:	930d      	str	r3, [sp, #52]	; 0x34
 80a7778:	f04f 0b00 	mov.w	fp, #0
 80a777c:	ea27 73e7 	bic.w	r3, r7, r7, asr #31
 80a7780:	9312      	str	r3, [sp, #72]	; 0x48
 80a7782:	f8cd b008 	str.w	fp, [sp, #8]
 80a7786:	9b05      	ldr	r3, [sp, #20]
 80a7788:	4650      	mov	r0, sl
 80a778a:	6859      	ldr	r1, [r3, #4]
 80a778c:	f001 fa48 	bl	80a8c20 <_Balloc>
 80a7790:	9004      	str	r0, [sp, #16]
 80a7792:	2800      	cmp	r0, #0
 80a7794:	f43f af26 	beq.w	80a75e4 <_strtod_r+0x48c>
 80a7798:	9b05      	ldr	r3, [sp, #20]
 80a779a:	300c      	adds	r0, #12
 80a779c:	691a      	ldr	r2, [r3, #16]
 80a779e:	f103 010c 	add.w	r1, r3, #12
 80a77a2:	3202      	adds	r2, #2
 80a77a4:	0092      	lsls	r2, r2, #2
 80a77a6:	f7fe ff21 	bl	80a65ec <memcpy>
 80a77aa:	ab1a      	add	r3, sp, #104	; 0x68
 80a77ac:	9301      	str	r3, [sp, #4]
 80a77ae:	ab19      	add	r3, sp, #100	; 0x64
 80a77b0:	9300      	str	r3, [sp, #0]
 80a77b2:	4642      	mov	r2, r8
 80a77b4:	464b      	mov	r3, r9
 80a77b6:	4650      	mov	r0, sl
 80a77b8:	e9cd 8908 	strd	r8, r9, [sp, #32]
 80a77bc:	f001 fd67 	bl	80a928e <__d2b>
 80a77c0:	9018      	str	r0, [sp, #96]	; 0x60
 80a77c2:	2800      	cmp	r0, #0
 80a77c4:	f43f af0e 	beq.w	80a75e4 <_strtod_r+0x48c>
 80a77c8:	2101      	movs	r1, #1
 80a77ca:	4650      	mov	r0, sl
 80a77cc:	f001 fb3a 	bl	80a8e44 <__i2b>
 80a77d0:	9002      	str	r0, [sp, #8]
 80a77d2:	2800      	cmp	r0, #0
 80a77d4:	f43f af06 	beq.w	80a75e4 <_strtod_r+0x48c>
 80a77d8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80a77da:	9903      	ldr	r1, [sp, #12]
 80a77dc:	2b00      	cmp	r3, #0
 80a77de:	bfac      	ite	ge
 80a77e0:	9a0d      	ldrge	r2, [sp, #52]	; 0x34
 80a77e2:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80a77e4:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 80a77e6:	bfac      	ite	ge
 80a77e8:	18d6      	addge	r6, r2, r3
 80a77ea:	1ad2      	sublt	r2, r2, r3
 80a77ec:	eba3 0301 	sub.w	r3, r3, r1
 80a77f0:	4423      	add	r3, r4
 80a77f2:	49b1      	ldr	r1, [pc, #708]	; (80a7ab8 <_strtod_r+0x960>)
 80a77f4:	f103 33ff 	add.w	r3, r3, #4294967295
 80a77f8:	bfac      	ite	ge
 80a77fa:	9a12      	ldrge	r2, [sp, #72]	; 0x48
 80a77fc:	9e0d      	ldrlt	r6, [sp, #52]	; 0x34
 80a77fe:	428b      	cmp	r3, r1
 80a7800:	f1c4 0436 	rsb	r4, r4, #54	; 0x36
 80a7804:	f280 8085 	bge.w	80a7912 <_strtod_r+0x7ba>
 80a7808:	1ac9      	subs	r1, r1, r3
 80a780a:	291f      	cmp	r1, #31
 80a780c:	bfc8      	it	gt
 80a780e:	4dab      	ldrgt	r5, [pc, #684]	; (80a7abc <_strtod_r+0x964>)
 80a7810:	f04f 0701 	mov.w	r7, #1
 80a7814:	bfd4      	ite	le
 80a7816:	fa07 f301 	lslle.w	r3, r7, r1
 80a781a:	1aed      	subgt	r5, r5, r3
 80a781c:	eba4 0401 	sub.w	r4, r4, r1
 80a7820:	bfd9      	ittee	le
 80a7822:	9307      	strle	r3, [sp, #28]
 80a7824:	2500      	movle	r5, #0
 80a7826:	fa07 f505 	lslgt.w	r5, r7, r5
 80a782a:	9707      	strgt	r7, [sp, #28]
 80a782c:	1937      	adds	r7, r6, r4
 80a782e:	9b03      	ldr	r3, [sp, #12]
 80a7830:	42be      	cmp	r6, r7
 80a7832:	4414      	add	r4, r2
 80a7834:	441c      	add	r4, r3
 80a7836:	4633      	mov	r3, r6
 80a7838:	bfa8      	it	ge
 80a783a:	463b      	movge	r3, r7
 80a783c:	42a3      	cmp	r3, r4
 80a783e:	bfa8      	it	ge
 80a7840:	4623      	movge	r3, r4
 80a7842:	2b00      	cmp	r3, #0
 80a7844:	bfc2      	ittt	gt
 80a7846:	1aff      	subgt	r7, r7, r3
 80a7848:	1ae4      	subgt	r4, r4, r3
 80a784a:	1af6      	subgt	r6, r6, r3
 80a784c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80a784e:	2b00      	cmp	r3, #0
 80a7850:	d163      	bne.n	80a791a <_strtod_r+0x7c2>
 80a7852:	2f00      	cmp	r7, #0
 80a7854:	dc7a      	bgt.n	80a794c <_strtod_r+0x7f4>
 80a7856:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80a7858:	2b00      	cmp	r3, #0
 80a785a:	f040 8081 	bne.w	80a7960 <_strtod_r+0x808>
 80a785e:	2c00      	cmp	r4, #0
 80a7860:	f300 8088 	bgt.w	80a7974 <_strtod_r+0x81c>
 80a7864:	2e00      	cmp	r6, #0
 80a7866:	f300 808f 	bgt.w	80a7988 <_strtod_r+0x830>
 80a786a:	9a04      	ldr	r2, [sp, #16]
 80a786c:	9918      	ldr	r1, [sp, #96]	; 0x60
 80a786e:	4650      	mov	r0, sl
 80a7870:	f001 fc3d 	bl	80a90ee <__mdiff>
 80a7874:	4683      	mov	fp, r0
 80a7876:	2800      	cmp	r0, #0
 80a7878:	f43f aeb4 	beq.w	80a75e4 <_strtod_r+0x48c>
 80a787c:	68c3      	ldr	r3, [r0, #12]
 80a787e:	2400      	movs	r4, #0
 80a7880:	60c4      	str	r4, [r0, #12]
 80a7882:	9902      	ldr	r1, [sp, #8]
 80a7884:	9306      	str	r3, [sp, #24]
 80a7886:	f001 fc16 	bl	80a90b6 <__mcmp>
 80a788a:	42a0      	cmp	r0, r4
 80a788c:	f280 808b 	bge.w	80a79a6 <_strtod_r+0x84e>
 80a7890:	9b06      	ldr	r3, [sp, #24]
 80a7892:	2b00      	cmp	r3, #0
 80a7894:	f040 8202 	bne.w	80a7c9c <_strtod_r+0xb44>
 80a7898:	f1b8 0f00 	cmp.w	r8, #0
 80a789c:	f040 81fe 	bne.w	80a7c9c <_strtod_r+0xb44>
 80a78a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80a78a4:	2b00      	cmp	r3, #0
 80a78a6:	f040 81f9 	bne.w	80a7c9c <_strtod_r+0xb44>
 80a78aa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80a78ae:	0d1b      	lsrs	r3, r3, #20
 80a78b0:	051b      	lsls	r3, r3, #20
 80a78b2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80a78b6:	f240 81f1 	bls.w	80a7c9c <_strtod_r+0xb44>
 80a78ba:	f8db 3014 	ldr.w	r3, [fp, #20]
 80a78be:	2b00      	cmp	r3, #0
 80a78c0:	d06c      	beq.n	80a799c <_strtod_r+0x844>
 80a78c2:	4659      	mov	r1, fp
 80a78c4:	2201      	movs	r2, #1
 80a78c6:	4650      	mov	r0, sl
 80a78c8:	f001 fba4 	bl	80a9014 <__lshift>
 80a78cc:	9902      	ldr	r1, [sp, #8]
 80a78ce:	4683      	mov	fp, r0
 80a78d0:	f001 fbf1 	bl	80a90b6 <__mcmp>
 80a78d4:	2800      	cmp	r0, #0
 80a78d6:	f340 81e1 	ble.w	80a7c9c <_strtod_r+0xb44>
 80a78da:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80a78de:	9a03      	ldr	r2, [sp, #12]
 80a78e0:	0d1b      	lsrs	r3, r3, #20
 80a78e2:	051b      	lsls	r3, r3, #20
 80a78e4:	2a00      	cmp	r2, #0
 80a78e6:	f000 808d 	beq.w	80a7a04 <_strtod_r+0x8ac>
 80a78ea:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80a78ee:	f300 8089 	bgt.w	80a7a04 <_strtod_r+0x8ac>
 80a78f2:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
 80a78f6:	f300 81d3 	bgt.w	80a7ca0 <_strtod_r+0xb48>
 80a78fa:	2322      	movs	r3, #34	; 0x22
 80a78fc:	f04f 0800 	mov.w	r8, #0
 80a7900:	f04f 0900 	mov.w	r9, #0
 80a7904:	f8ca 3000 	str.w	r3, [sl]
 80a7908:	9b05      	ldr	r3, [sp, #20]
 80a790a:	2b00      	cmp	r3, #0
 80a790c:	f040 81d9 	bne.w	80a7cc2 <_strtod_r+0xb6a>
 80a7910:	e1eb      	b.n	80a7cea <_strtod_r+0xb92>
 80a7912:	2301      	movs	r3, #1
 80a7914:	2500      	movs	r5, #0
 80a7916:	9307      	str	r3, [sp, #28]
 80a7918:	e788      	b.n	80a782c <_strtod_r+0x6d4>
 80a791a:	461a      	mov	r2, r3
 80a791c:	9902      	ldr	r1, [sp, #8]
 80a791e:	4650      	mov	r0, sl
 80a7920:	f001 fb2a 	bl	80a8f78 <__pow5mult>
 80a7924:	9002      	str	r0, [sp, #8]
 80a7926:	2800      	cmp	r0, #0
 80a7928:	f43f ae5c 	beq.w	80a75e4 <_strtod_r+0x48c>
 80a792c:	4601      	mov	r1, r0
 80a792e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80a7930:	4650      	mov	r0, sl
 80a7932:	f001 fa90 	bl	80a8e56 <__multiply>
 80a7936:	9006      	str	r0, [sp, #24]
 80a7938:	2800      	cmp	r0, #0
 80a793a:	f43f ae53 	beq.w	80a75e4 <_strtod_r+0x48c>
 80a793e:	9918      	ldr	r1, [sp, #96]	; 0x60
 80a7940:	4650      	mov	r0, sl
 80a7942:	f001 f9a2 	bl	80a8c8a <_Bfree>
 80a7946:	9b06      	ldr	r3, [sp, #24]
 80a7948:	9318      	str	r3, [sp, #96]	; 0x60
 80a794a:	e782      	b.n	80a7852 <_strtod_r+0x6fa>
 80a794c:	463a      	mov	r2, r7
 80a794e:	9918      	ldr	r1, [sp, #96]	; 0x60
 80a7950:	4650      	mov	r0, sl
 80a7952:	f001 fb5f 	bl	80a9014 <__lshift>
 80a7956:	9018      	str	r0, [sp, #96]	; 0x60
 80a7958:	2800      	cmp	r0, #0
 80a795a:	f47f af7c 	bne.w	80a7856 <_strtod_r+0x6fe>
 80a795e:	e641      	b.n	80a75e4 <_strtod_r+0x48c>
 80a7960:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80a7962:	9904      	ldr	r1, [sp, #16]
 80a7964:	4650      	mov	r0, sl
 80a7966:	f001 fb07 	bl	80a8f78 <__pow5mult>
 80a796a:	9004      	str	r0, [sp, #16]
 80a796c:	2800      	cmp	r0, #0
 80a796e:	f47f af76 	bne.w	80a785e <_strtod_r+0x706>
 80a7972:	e637      	b.n	80a75e4 <_strtod_r+0x48c>
 80a7974:	4622      	mov	r2, r4
 80a7976:	9904      	ldr	r1, [sp, #16]
 80a7978:	4650      	mov	r0, sl
 80a797a:	f001 fb4b 	bl	80a9014 <__lshift>
 80a797e:	9004      	str	r0, [sp, #16]
 80a7980:	2800      	cmp	r0, #0
 80a7982:	f47f af6f 	bne.w	80a7864 <_strtod_r+0x70c>
 80a7986:	e62d      	b.n	80a75e4 <_strtod_r+0x48c>
 80a7988:	4632      	mov	r2, r6
 80a798a:	9902      	ldr	r1, [sp, #8]
 80a798c:	4650      	mov	r0, sl
 80a798e:	f001 fb41 	bl	80a9014 <__lshift>
 80a7992:	9002      	str	r0, [sp, #8]
 80a7994:	2800      	cmp	r0, #0
 80a7996:	f47f af68 	bne.w	80a786a <_strtod_r+0x712>
 80a799a:	e623      	b.n	80a75e4 <_strtod_r+0x48c>
 80a799c:	f8db 3010 	ldr.w	r3, [fp, #16]
 80a79a0:	2b01      	cmp	r3, #1
 80a79a2:	dc8e      	bgt.n	80a78c2 <_strtod_r+0x76a>
 80a79a4:	e17a      	b.n	80a7c9c <_strtod_r+0xb44>
 80a79a6:	d161      	bne.n	80a7a6c <_strtod_r+0x914>
 80a79a8:	9a06      	ldr	r2, [sp, #24]
 80a79aa:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80a79ae:	b322      	cbz	r2, 80a79fa <_strtod_r+0x8a2>
 80a79b0:	4943      	ldr	r1, [pc, #268]	; (80a7ac0 <_strtod_r+0x968>)
 80a79b2:	464a      	mov	r2, r9
 80a79b4:	428b      	cmp	r3, r1
 80a79b6:	d12e      	bne.n	80a7a16 <_strtod_r+0x8be>
 80a79b8:	9b03      	ldr	r3, [sp, #12]
 80a79ba:	4641      	mov	r1, r8
 80a79bc:	b163      	cbz	r3, 80a79d8 <_strtod_r+0x880>
 80a79be:	4b41      	ldr	r3, [pc, #260]	; (80a7ac4 <_strtod_r+0x96c>)
 80a79c0:	4013      	ands	r3, r2
 80a79c2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80a79c6:	d807      	bhi.n	80a79d8 <_strtod_r+0x880>
 80a79c8:	0d1b      	lsrs	r3, r3, #20
 80a79ca:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80a79ce:	f04f 30ff 	mov.w	r0, #4294967295
 80a79d2:	fa00 f303 	lsl.w	r3, r0, r3
 80a79d6:	e001      	b.n	80a79dc <_strtod_r+0x884>
 80a79d8:	f04f 33ff 	mov.w	r3, #4294967295
 80a79dc:	428b      	cmp	r3, r1
 80a79de:	d11a      	bne.n	80a7a16 <_strtod_r+0x8be>
 80a79e0:	4939      	ldr	r1, [pc, #228]	; (80a7ac8 <_strtod_r+0x970>)
 80a79e2:	428a      	cmp	r2, r1
 80a79e4:	d102      	bne.n	80a79ec <_strtod_r+0x894>
 80a79e6:	3301      	adds	r3, #1
 80a79e8:	f43f adfc 	beq.w	80a75e4 <_strtod_r+0x48c>
 80a79ec:	4b35      	ldr	r3, [pc, #212]	; (80a7ac4 <_strtod_r+0x96c>)
 80a79ee:	f04f 0800 	mov.w	r8, #0
 80a79f2:	4013      	ands	r3, r2
 80a79f4:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80a79f8:	e150      	b.n	80a7c9c <_strtod_r+0xb44>
 80a79fa:	b963      	cbnz	r3, 80a7a16 <_strtod_r+0x8be>
 80a79fc:	f1b8 0f00 	cmp.w	r8, #0
 80a7a00:	d109      	bne.n	80a7a16 <_strtod_r+0x8be>
 80a7a02:	e76a      	b.n	80a78da <_strtod_r+0x782>
 80a7a04:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80a7a08:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80a7a0c:	f04f 38ff 	mov.w	r8, #4294967295
 80a7a10:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80a7a14:	e142      	b.n	80a7c9c <_strtod_r+0xb44>
 80a7a16:	b115      	cbz	r5, 80a7a1e <_strtod_r+0x8c6>
 80a7a18:	ea15 0f09 	tst.w	r5, r9
 80a7a1c:	e002      	b.n	80a7a24 <_strtod_r+0x8cc>
 80a7a1e:	9b07      	ldr	r3, [sp, #28]
 80a7a20:	ea13 0f08 	tst.w	r3, r8
 80a7a24:	f000 813a 	beq.w	80a7c9c <_strtod_r+0xb44>
 80a7a28:	9b06      	ldr	r3, [sp, #24]
 80a7a2a:	9a03      	ldr	r2, [sp, #12]
 80a7a2c:	4640      	mov	r0, r8
 80a7a2e:	4649      	mov	r1, r9
 80a7a30:	b153      	cbz	r3, 80a7a48 <_strtod_r+0x8f0>
 80a7a32:	f7ff fb6d 	bl	80a7110 <sulp>
 80a7a36:	4602      	mov	r2, r0
 80a7a38:	460b      	mov	r3, r1
 80a7a3a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80a7a3e:	f7fd fadf 	bl	80a5000 <__adddf3>
 80a7a42:	4680      	mov	r8, r0
 80a7a44:	4689      	mov	r9, r1
 80a7a46:	e129      	b.n	80a7c9c <_strtod_r+0xb44>
 80a7a48:	f7ff fb62 	bl	80a7110 <sulp>
 80a7a4c:	4602      	mov	r2, r0
 80a7a4e:	460b      	mov	r3, r1
 80a7a50:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80a7a54:	f7fd fad2 	bl	80a4ffc <__aeabi_dsub>
 80a7a58:	2200      	movs	r2, #0
 80a7a5a:	2300      	movs	r3, #0
 80a7a5c:	4680      	mov	r8, r0
 80a7a5e:	4689      	mov	r9, r1
 80a7a60:	f7fd fee8 	bl	80a5834 <__aeabi_dcmpeq>
 80a7a64:	2800      	cmp	r0, #0
 80a7a66:	f47f af48 	bne.w	80a78fa <_strtod_r+0x7a2>
 80a7a6a:	e117      	b.n	80a7c9c <_strtod_r+0xb44>
 80a7a6c:	9902      	ldr	r1, [sp, #8]
 80a7a6e:	4658      	mov	r0, fp
 80a7a70:	f001 fc5b 	bl	80a932a <__ratio>
 80a7a74:	2200      	movs	r2, #0
 80a7a76:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80a7a7a:	4606      	mov	r6, r0
 80a7a7c:	460f      	mov	r7, r1
 80a7a7e:	f7fd feed 	bl	80a585c <__aeabi_dcmple>
 80a7a82:	2800      	cmp	r0, #0
 80a7a84:	d03f      	beq.n	80a7b06 <_strtod_r+0x9ae>
 80a7a86:	9b06      	ldr	r3, [sp, #24]
 80a7a88:	b113      	cbz	r3, 80a7a90 <_strtod_r+0x938>
 80a7a8a:	2600      	movs	r6, #0
 80a7a8c:	4f0f      	ldr	r7, [pc, #60]	; (80a7acc <_strtod_r+0x974>)
 80a7a8e:	e010      	b.n	80a7ab2 <_strtod_r+0x95a>
 80a7a90:	f1b8 0f00 	cmp.w	r8, #0
 80a7a94:	d103      	bne.n	80a7a9e <_strtod_r+0x946>
 80a7a96:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80a7a9a:	b93b      	cbnz	r3, 80a7aac <_strtod_r+0x954>
 80a7a9c:	e01a      	b.n	80a7ad4 <_strtod_r+0x97c>
 80a7a9e:	f1b8 0f01 	cmp.w	r8, #1
 80a7aa2:	d103      	bne.n	80a7aac <_strtod_r+0x954>
 80a7aa4:	f1b9 0f00 	cmp.w	r9, #0
 80a7aa8:	f43f af27 	beq.w	80a78fa <_strtod_r+0x7a2>
 80a7aac:	4f08      	ldr	r7, [pc, #32]	; (80a7ad0 <_strtod_r+0x978>)
 80a7aae:	2600      	movs	r6, #0
 80a7ab0:	2400      	movs	r4, #0
 80a7ab2:	4d06      	ldr	r5, [pc, #24]	; (80a7acc <_strtod_r+0x974>)
 80a7ab4:	e03c      	b.n	80a7b30 <_strtod_r+0x9d8>
 80a7ab6:	bf00      	nop
 80a7ab8:	fffffc02 	.word	0xfffffc02
 80a7abc:	fffffbe2 	.word	0xfffffbe2
 80a7ac0:	000fffff 	.word	0x000fffff
 80a7ac4:	7ff00000 	.word	0x7ff00000
 80a7ac8:	7fefffff 	.word	0x7fefffff
 80a7acc:	3ff00000 	.word	0x3ff00000
 80a7ad0:	bff00000 	.word	0xbff00000
 80a7ad4:	2200      	movs	r2, #0
 80a7ad6:	4b9a      	ldr	r3, [pc, #616]	; (80a7d40 <_strtod_r+0xbe8>)
 80a7ad8:	4630      	mov	r0, r6
 80a7ada:	4639      	mov	r1, r7
 80a7adc:	f7fd feb4 	bl	80a5848 <__aeabi_dcmplt>
 80a7ae0:	b940      	cbnz	r0, 80a7af4 <_strtod_r+0x99c>
 80a7ae2:	2200      	movs	r2, #0
 80a7ae4:	4b97      	ldr	r3, [pc, #604]	; (80a7d44 <_strtod_r+0xbec>)
 80a7ae6:	4630      	mov	r0, r6
 80a7ae8:	4639      	mov	r1, r7
 80a7aea:	f7fd fc3b 	bl	80a5364 <__aeabi_dmul>
 80a7aee:	4604      	mov	r4, r0
 80a7af0:	460d      	mov	r5, r1
 80a7af2:	e001      	b.n	80a7af8 <_strtod_r+0x9a0>
 80a7af4:	9c06      	ldr	r4, [sp, #24]
 80a7af6:	4d93      	ldr	r5, [pc, #588]	; (80a7d44 <_strtod_r+0xbec>)
 80a7af8:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80a7afc:	9414      	str	r4, [sp, #80]	; 0x50
 80a7afe:	9315      	str	r3, [sp, #84]	; 0x54
 80a7b00:	e9dd 6714 	ldrd	r6, r7, [sp, #80]	; 0x50
 80a7b04:	e014      	b.n	80a7b30 <_strtod_r+0x9d8>
 80a7b06:	4b8f      	ldr	r3, [pc, #572]	; (80a7d44 <_strtod_r+0xbec>)
 80a7b08:	2200      	movs	r2, #0
 80a7b0a:	4630      	mov	r0, r6
 80a7b0c:	4639      	mov	r1, r7
 80a7b0e:	f7fd fc29 	bl	80a5364 <__aeabi_dmul>
 80a7b12:	9b06      	ldr	r3, [sp, #24]
 80a7b14:	4604      	mov	r4, r0
 80a7b16:	460d      	mov	r5, r1
 80a7b18:	b923      	cbnz	r3, 80a7b24 <_strtod_r+0x9cc>
 80a7b1a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80a7b1e:	900e      	str	r0, [sp, #56]	; 0x38
 80a7b20:	930f      	str	r3, [sp, #60]	; 0x3c
 80a7b22:	e003      	b.n	80a7b2c <_strtod_r+0x9d4>
 80a7b24:	4602      	mov	r2, r0
 80a7b26:	460b      	mov	r3, r1
 80a7b28:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80a7b2c:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
 80a7b30:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80a7b34:	0d1b      	lsrs	r3, r3, #20
 80a7b36:	051b      	lsls	r3, r3, #20
 80a7b38:	9307      	str	r3, [sp, #28]
 80a7b3a:	9a07      	ldr	r2, [sp, #28]
 80a7b3c:	4b82      	ldr	r3, [pc, #520]	; (80a7d48 <_strtod_r+0xbf0>)
 80a7b3e:	429a      	cmp	r2, r3
 80a7b40:	d12b      	bne.n	80a7b9a <_strtod_r+0xa42>
 80a7b42:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80a7b46:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80a7b4a:	4640      	mov	r0, r8
 80a7b4c:	4649      	mov	r1, r9
 80a7b4e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80a7b52:	f001 fb2b 	bl	80a91ac <__ulp>
 80a7b56:	4602      	mov	r2, r0
 80a7b58:	460b      	mov	r3, r1
 80a7b5a:	4630      	mov	r0, r6
 80a7b5c:	4639      	mov	r1, r7
 80a7b5e:	f7fd fc01 	bl	80a5364 <__aeabi_dmul>
 80a7b62:	4642      	mov	r2, r8
 80a7b64:	464b      	mov	r3, r9
 80a7b66:	f7fd fa4b 	bl	80a5000 <__adddf3>
 80a7b6a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80a7b6e:	0d1b      	lsrs	r3, r3, #20
 80a7b70:	4a76      	ldr	r2, [pc, #472]	; (80a7d4c <_strtod_r+0xbf4>)
 80a7b72:	051b      	lsls	r3, r3, #20
 80a7b74:	4293      	cmp	r3, r2
 80a7b76:	4680      	mov	r8, r0
 80a7b78:	d90c      	bls.n	80a7b94 <_strtod_r+0xa3c>
 80a7b7a:	4b75      	ldr	r3, [pc, #468]	; (80a7d50 <_strtod_r+0xbf8>)
 80a7b7c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80a7b7e:	429a      	cmp	r2, r3
 80a7b80:	d103      	bne.n	80a7b8a <_strtod_r+0xa32>
 80a7b82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a7b84:	3301      	adds	r3, #1
 80a7b86:	f43f ad2d 	beq.w	80a75e4 <_strtod_r+0x48c>
 80a7b8a:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 80a7d50 <_strtod_r+0xbf8>
 80a7b8e:	f04f 38ff 	mov.w	r8, #4294967295
 80a7b92:	e072      	b.n	80a7c7a <_strtod_r+0xb22>
 80a7b94:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 80a7b98:	e039      	b.n	80a7c0e <_strtod_r+0xab6>
 80a7b9a:	9b03      	ldr	r3, [sp, #12]
 80a7b9c:	b33b      	cbz	r3, 80a7bee <_strtod_r+0xa96>
 80a7b9e:	9b07      	ldr	r3, [sp, #28]
 80a7ba0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80a7ba4:	d823      	bhi.n	80a7bee <_strtod_r+0xa96>
 80a7ba6:	a35e      	add	r3, pc, #376	; (adr r3, 80a7d20 <_strtod_r+0xbc8>)
 80a7ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a7bac:	4620      	mov	r0, r4
 80a7bae:	4629      	mov	r1, r5
 80a7bb0:	f7fd fe54 	bl	80a585c <__aeabi_dcmple>
 80a7bb4:	b1b8      	cbz	r0, 80a7be6 <_strtod_r+0xa8e>
 80a7bb6:	4629      	mov	r1, r5
 80a7bb8:	4620      	mov	r0, r4
 80a7bba:	f7fd feab 	bl	80a5914 <__aeabi_d2uiz>
 80a7bbe:	2800      	cmp	r0, #0
 80a7bc0:	bf08      	it	eq
 80a7bc2:	2001      	moveq	r0, #1
 80a7bc4:	f7fd fb58 	bl	80a5278 <__aeabi_ui2d>
 80a7bc8:	9b06      	ldr	r3, [sp, #24]
 80a7bca:	4604      	mov	r4, r0
 80a7bcc:	460d      	mov	r5, r1
 80a7bce:	b923      	cbnz	r3, 80a7bda <_strtod_r+0xa82>
 80a7bd0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80a7bd4:	9010      	str	r0, [sp, #64]	; 0x40
 80a7bd6:	9311      	str	r3, [sp, #68]	; 0x44
 80a7bd8:	e003      	b.n	80a7be2 <_strtod_r+0xa8a>
 80a7bda:	4602      	mov	r2, r0
 80a7bdc:	460b      	mov	r3, r1
 80a7bde:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80a7be2:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80a7be6:	9a07      	ldr	r2, [sp, #28]
 80a7be8:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 80a7bec:	1a9f      	subs	r7, r3, r2
 80a7bee:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80a7bf2:	f001 fadb 	bl	80a91ac <__ulp>
 80a7bf6:	4602      	mov	r2, r0
 80a7bf8:	460b      	mov	r3, r1
 80a7bfa:	4630      	mov	r0, r6
 80a7bfc:	4639      	mov	r1, r7
 80a7bfe:	f7fd fbb1 	bl	80a5364 <__aeabi_dmul>
 80a7c02:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80a7c06:	f7fd f9fb 	bl	80a5000 <__adddf3>
 80a7c0a:	4680      	mov	r8, r0
 80a7c0c:	4689      	mov	r9, r1
 80a7c0e:	9b03      	ldr	r3, [sp, #12]
 80a7c10:	bb9b      	cbnz	r3, 80a7c7a <_strtod_r+0xb22>
 80a7c12:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80a7c16:	0d1b      	lsrs	r3, r3, #20
 80a7c18:	9a07      	ldr	r2, [sp, #28]
 80a7c1a:	051b      	lsls	r3, r3, #20
 80a7c1c:	429a      	cmp	r2, r3
 80a7c1e:	464e      	mov	r6, r9
 80a7c20:	d12b      	bne.n	80a7c7a <_strtod_r+0xb22>
 80a7c22:	4629      	mov	r1, r5
 80a7c24:	4620      	mov	r0, r4
 80a7c26:	f7fd fe4d 	bl	80a58c4 <__aeabi_d2iz>
 80a7c2a:	f7fd fb35 	bl	80a5298 <__aeabi_i2d>
 80a7c2e:	460b      	mov	r3, r1
 80a7c30:	4602      	mov	r2, r0
 80a7c32:	4629      	mov	r1, r5
 80a7c34:	4620      	mov	r0, r4
 80a7c36:	f7fd f9e1 	bl	80a4ffc <__aeabi_dsub>
 80a7c3a:	9b06      	ldr	r3, [sp, #24]
 80a7c3c:	4604      	mov	r4, r0
 80a7c3e:	460d      	mov	r5, r1
 80a7c40:	b92b      	cbnz	r3, 80a7c4e <_strtod_r+0xaf6>
 80a7c42:	f1b8 0f00 	cmp.w	r8, #0
 80a7c46:	d102      	bne.n	80a7c4e <_strtod_r+0xaf6>
 80a7c48:	f3c9 0613 	ubfx	r6, r9, #0, #20
 80a7c4c:	b17e      	cbz	r6, 80a7c6e <_strtod_r+0xb16>
 80a7c4e:	a336      	add	r3, pc, #216	; (adr r3, 80a7d28 <_strtod_r+0xbd0>)
 80a7c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a7c54:	4620      	mov	r0, r4
 80a7c56:	4629      	mov	r1, r5
 80a7c58:	f7fd fdf6 	bl	80a5848 <__aeabi_dcmplt>
 80a7c5c:	bb88      	cbnz	r0, 80a7cc2 <_strtod_r+0xb6a>
 80a7c5e:	a334      	add	r3, pc, #208	; (adr r3, 80a7d30 <_strtod_r+0xbd8>)
 80a7c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a7c64:	4620      	mov	r0, r4
 80a7c66:	4629      	mov	r1, r5
 80a7c68:	f7fd fe0c 	bl	80a5884 <__aeabi_dcmpgt>
 80a7c6c:	e004      	b.n	80a7c78 <_strtod_r+0xb20>
 80a7c6e:	a332      	add	r3, pc, #200	; (adr r3, 80a7d38 <_strtod_r+0xbe0>)
 80a7c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a7c74:	f7fd fde8 	bl	80a5848 <__aeabi_dcmplt>
 80a7c78:	bb18      	cbnz	r0, 80a7cc2 <_strtod_r+0xb6a>
 80a7c7a:	9918      	ldr	r1, [sp, #96]	; 0x60
 80a7c7c:	4650      	mov	r0, sl
 80a7c7e:	f001 f804 	bl	80a8c8a <_Bfree>
 80a7c82:	9904      	ldr	r1, [sp, #16]
 80a7c84:	4650      	mov	r0, sl
 80a7c86:	f001 f800 	bl	80a8c8a <_Bfree>
 80a7c8a:	9902      	ldr	r1, [sp, #8]
 80a7c8c:	4650      	mov	r0, sl
 80a7c8e:	f000 fffc 	bl	80a8c8a <_Bfree>
 80a7c92:	4659      	mov	r1, fp
 80a7c94:	4650      	mov	r0, sl
 80a7c96:	f000 fff8 	bl	80a8c8a <_Bfree>
 80a7c9a:	e574      	b.n	80a7786 <_strtod_r+0x62e>
 80a7c9c:	9b03      	ldr	r3, [sp, #12]
 80a7c9e:	b183      	cbz	r3, 80a7cc2 <_strtod_r+0xb6a>
 80a7ca0:	4b2c      	ldr	r3, [pc, #176]	; (80a7d54 <_strtod_r+0xbfc>)
 80a7ca2:	4640      	mov	r0, r8
 80a7ca4:	930b      	str	r3, [sp, #44]	; 0x2c
 80a7ca6:	2300      	movs	r3, #0
 80a7ca8:	930a      	str	r3, [sp, #40]	; 0x28
 80a7caa:	4649      	mov	r1, r9
 80a7cac:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80a7cb0:	f7fd fb58 	bl	80a5364 <__aeabi_dmul>
 80a7cb4:	4680      	mov	r8, r0
 80a7cb6:	4689      	mov	r9, r1
 80a7cb8:	b919      	cbnz	r1, 80a7cc2 <_strtod_r+0xb6a>
 80a7cba:	b910      	cbnz	r0, 80a7cc2 <_strtod_r+0xb6a>
 80a7cbc:	2322      	movs	r3, #34	; 0x22
 80a7cbe:	f8ca 3000 	str.w	r3, [sl]
 80a7cc2:	9918      	ldr	r1, [sp, #96]	; 0x60
 80a7cc4:	4650      	mov	r0, sl
 80a7cc6:	f000 ffe0 	bl	80a8c8a <_Bfree>
 80a7cca:	9904      	ldr	r1, [sp, #16]
 80a7ccc:	4650      	mov	r0, sl
 80a7cce:	f000 ffdc 	bl	80a8c8a <_Bfree>
 80a7cd2:	9902      	ldr	r1, [sp, #8]
 80a7cd4:	4650      	mov	r0, sl
 80a7cd6:	f000 ffd8 	bl	80a8c8a <_Bfree>
 80a7cda:	9905      	ldr	r1, [sp, #20]
 80a7cdc:	4650      	mov	r0, sl
 80a7cde:	f000 ffd4 	bl	80a8c8a <_Bfree>
 80a7ce2:	4659      	mov	r1, fp
 80a7ce4:	4650      	mov	r0, sl
 80a7ce6:	f000 ffd0 	bl	80a8c8a <_Bfree>
 80a7cea:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80a7cec:	b113      	cbz	r3, 80a7cf4 <_strtod_r+0xb9c>
 80a7cee:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a7cf0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80a7cf2:	6013      	str	r3, [r2, #0]
 80a7cf4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80a7cf6:	b11b      	cbz	r3, 80a7d00 <_strtod_r+0xba8>
 80a7cf8:	4642      	mov	r2, r8
 80a7cfa:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80a7cfe:	e007      	b.n	80a7d10 <_strtod_r+0xbb8>
 80a7d00:	4642      	mov	r2, r8
 80a7d02:	464b      	mov	r3, r9
 80a7d04:	e004      	b.n	80a7d10 <_strtod_r+0xbb8>
 80a7d06:	2500      	movs	r5, #0
 80a7d08:	462a      	mov	r2, r5
 80a7d0a:	2101      	movs	r1, #1
 80a7d0c:	f7ff bb47 	b.w	80a739e <_strtod_r+0x246>
 80a7d10:	4610      	mov	r0, r2
 80a7d12:	4619      	mov	r1, r3
 80a7d14:	b01d      	add	sp, #116	; 0x74
 80a7d16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a7d1a:	bf00      	nop
 80a7d1c:	f3af 8000 	nop.w
 80a7d20:	ffc00000 	.word	0xffc00000
 80a7d24:	41dfffff 	.word	0x41dfffff
 80a7d28:	94a03595 	.word	0x94a03595
 80a7d2c:	3fdfffff 	.word	0x3fdfffff
 80a7d30:	35afe535 	.word	0x35afe535
 80a7d34:	3fe00000 	.word	0x3fe00000
 80a7d38:	94a03595 	.word	0x94a03595
 80a7d3c:	3fcfffff 	.word	0x3fcfffff
 80a7d40:	3ff00000 	.word	0x3ff00000
 80a7d44:	3fe00000 	.word	0x3fe00000
 80a7d48:	7fe00000 	.word	0x7fe00000
 80a7d4c:	7c9fffff 	.word	0x7c9fffff
 80a7d50:	7fefffff 	.word	0x7fefffff
 80a7d54:	39500000 	.word	0x39500000

080a7d58 <strtod>:
 80a7d58:	4b02      	ldr	r3, [pc, #8]	; (80a7d64 <strtod+0xc>)
 80a7d5a:	460a      	mov	r2, r1
 80a7d5c:	4601      	mov	r1, r0
 80a7d5e:	6818      	ldr	r0, [r3, #0]
 80a7d60:	f7ff b9fa 	b.w	80a7158 <_strtod_r>
 80a7d64:	20000074 	.word	0x20000074

080a7d68 <_strtol_r>:
 80a7d68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a7d6c:	460f      	mov	r7, r1
 80a7d6e:	4680      	mov	r8, r0
 80a7d70:	483f      	ldr	r0, [pc, #252]	; (80a7e70 <_strtol_r+0x108>)
 80a7d72:	f8d0 9000 	ldr.w	r9, [r0]
 80a7d76:	463d      	mov	r5, r7
 80a7d78:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a7d7c:	eb09 0004 	add.w	r0, r9, r4
 80a7d80:	7840      	ldrb	r0, [r0, #1]
 80a7d82:	f000 0008 	and.w	r0, r0, #8
 80a7d86:	f000 06ff 	and.w	r6, r0, #255	; 0xff
 80a7d8a:	b108      	cbz	r0, 80a7d90 <_strtol_r+0x28>
 80a7d8c:	462f      	mov	r7, r5
 80a7d8e:	e7f2      	b.n	80a7d76 <_strtol_r+0xe>
 80a7d90:	2c2d      	cmp	r4, #45	; 0x2d
 80a7d92:	d103      	bne.n	80a7d9c <_strtol_r+0x34>
 80a7d94:	1cbd      	adds	r5, r7, #2
 80a7d96:	787c      	ldrb	r4, [r7, #1]
 80a7d98:	2601      	movs	r6, #1
 80a7d9a:	e003      	b.n	80a7da4 <_strtol_r+0x3c>
 80a7d9c:	2c2b      	cmp	r4, #43	; 0x2b
 80a7d9e:	bf04      	itt	eq
 80a7da0:	787c      	ldrbeq	r4, [r7, #1]
 80a7da2:	1cbd      	addeq	r5, r7, #2
 80a7da4:	b113      	cbz	r3, 80a7dac <_strtol_r+0x44>
 80a7da6:	2b10      	cmp	r3, #16
 80a7da8:	d10a      	bne.n	80a7dc0 <_strtol_r+0x58>
 80a7daa:	e05b      	b.n	80a7e64 <_strtol_r+0xfc>
 80a7dac:	2c30      	cmp	r4, #48	; 0x30
 80a7dae:	d157      	bne.n	80a7e60 <_strtol_r+0xf8>
 80a7db0:	7828      	ldrb	r0, [r5, #0]
 80a7db2:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80a7db6:	2858      	cmp	r0, #88	; 0x58
 80a7db8:	d14d      	bne.n	80a7e56 <_strtol_r+0xee>
 80a7dba:	786c      	ldrb	r4, [r5, #1]
 80a7dbc:	2310      	movs	r3, #16
 80a7dbe:	3502      	adds	r5, #2
 80a7dc0:	2e00      	cmp	r6, #0
 80a7dc2:	bf14      	ite	ne
 80a7dc4:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
 80a7dc8:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
 80a7dcc:	fbbc faf3 	udiv	sl, ip, r3
 80a7dd0:	2700      	movs	r7, #0
 80a7dd2:	4638      	mov	r0, r7
 80a7dd4:	fb03 cc1a 	mls	ip, r3, sl, ip
 80a7dd8:	eb09 0e04 	add.w	lr, r9, r4
 80a7ddc:	f89e e001 	ldrb.w	lr, [lr, #1]
 80a7de0:	f01e 0f04 	tst.w	lr, #4
 80a7de4:	d001      	beq.n	80a7dea <_strtol_r+0x82>
 80a7de6:	3c30      	subs	r4, #48	; 0x30
 80a7de8:	e00b      	b.n	80a7e02 <_strtol_r+0x9a>
 80a7dea:	f01e 0e03 	ands.w	lr, lr, #3
 80a7dee:	d01b      	beq.n	80a7e28 <_strtol_r+0xc0>
 80a7df0:	f1be 0f01 	cmp.w	lr, #1
 80a7df4:	bf0c      	ite	eq
 80a7df6:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 80a7dfa:	f04f 0e57 	movne.w	lr, #87	; 0x57
 80a7dfe:	ebce 0404 	rsb	r4, lr, r4
 80a7e02:	42a3      	cmp	r3, r4
 80a7e04:	dd10      	ble.n	80a7e28 <_strtol_r+0xc0>
 80a7e06:	f1b7 3fff 	cmp.w	r7, #4294967295
 80a7e0a:	d00a      	beq.n	80a7e22 <_strtol_r+0xba>
 80a7e0c:	4550      	cmp	r0, sl
 80a7e0e:	d806      	bhi.n	80a7e1e <_strtol_r+0xb6>
 80a7e10:	d101      	bne.n	80a7e16 <_strtol_r+0xae>
 80a7e12:	4564      	cmp	r4, ip
 80a7e14:	dc03      	bgt.n	80a7e1e <_strtol_r+0xb6>
 80a7e16:	fb03 4000 	mla	r0, r3, r0, r4
 80a7e1a:	2701      	movs	r7, #1
 80a7e1c:	e001      	b.n	80a7e22 <_strtol_r+0xba>
 80a7e1e:	f04f 37ff 	mov.w	r7, #4294967295
 80a7e22:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a7e26:	e7d7      	b.n	80a7dd8 <_strtol_r+0x70>
 80a7e28:	1c7b      	adds	r3, r7, #1
 80a7e2a:	d10c      	bne.n	80a7e46 <_strtol_r+0xde>
 80a7e2c:	2e00      	cmp	r6, #0
 80a7e2e:	f04f 0322 	mov.w	r3, #34	; 0x22
 80a7e32:	bf14      	ite	ne
 80a7e34:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 80a7e38:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a7e3c:	f8c8 3000 	str.w	r3, [r8]
 80a7e40:	b92a      	cbnz	r2, 80a7e4e <_strtol_r+0xe6>
 80a7e42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a7e46:	b106      	cbz	r6, 80a7e4a <_strtol_r+0xe2>
 80a7e48:	4240      	negs	r0, r0
 80a7e4a:	b172      	cbz	r2, 80a7e6a <_strtol_r+0x102>
 80a7e4c:	b107      	cbz	r7, 80a7e50 <_strtol_r+0xe8>
 80a7e4e:	1e69      	subs	r1, r5, #1
 80a7e50:	6011      	str	r1, [r2, #0]
 80a7e52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a7e56:	2430      	movs	r4, #48	; 0x30
 80a7e58:	2b00      	cmp	r3, #0
 80a7e5a:	d1b1      	bne.n	80a7dc0 <_strtol_r+0x58>
 80a7e5c:	2308      	movs	r3, #8
 80a7e5e:	e7af      	b.n	80a7dc0 <_strtol_r+0x58>
 80a7e60:	230a      	movs	r3, #10
 80a7e62:	e7ad      	b.n	80a7dc0 <_strtol_r+0x58>
 80a7e64:	2c30      	cmp	r4, #48	; 0x30
 80a7e66:	d0a3      	beq.n	80a7db0 <_strtol_r+0x48>
 80a7e68:	e7aa      	b.n	80a7dc0 <_strtol_r+0x58>
 80a7e6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a7e6e:	bf00      	nop
 80a7e70:	20000010 	.word	0x20000010

080a7e74 <strtol>:
 80a7e74:	4613      	mov	r3, r2
 80a7e76:	460a      	mov	r2, r1
 80a7e78:	4601      	mov	r1, r0
 80a7e7a:	4802      	ldr	r0, [pc, #8]	; (80a7e84 <strtol+0x10>)
 80a7e7c:	6800      	ldr	r0, [r0, #0]
 80a7e7e:	f7ff bf73 	b.w	80a7d68 <_strtol_r>
 80a7e82:	bf00      	nop
 80a7e84:	20000074 	.word	0x20000074

080a7e88 <_strtoul_r>:
 80a7e88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a7e8c:	460e      	mov	r6, r1
 80a7e8e:	4680      	mov	r8, r0
 80a7e90:	483b      	ldr	r0, [pc, #236]	; (80a7f80 <_strtoul_r+0xf8>)
 80a7e92:	f8d0 9000 	ldr.w	r9, [r0]
 80a7e96:	4635      	mov	r5, r6
 80a7e98:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a7e9c:	eb09 0004 	add.w	r0, r9, r4
 80a7ea0:	7840      	ldrb	r0, [r0, #1]
 80a7ea2:	f000 0008 	and.w	r0, r0, #8
 80a7ea6:	f000 07ff 	and.w	r7, r0, #255	; 0xff
 80a7eaa:	b108      	cbz	r0, 80a7eb0 <_strtoul_r+0x28>
 80a7eac:	462e      	mov	r6, r5
 80a7eae:	e7f2      	b.n	80a7e96 <_strtoul_r+0xe>
 80a7eb0:	2c2d      	cmp	r4, #45	; 0x2d
 80a7eb2:	d103      	bne.n	80a7ebc <_strtoul_r+0x34>
 80a7eb4:	1cb5      	adds	r5, r6, #2
 80a7eb6:	7874      	ldrb	r4, [r6, #1]
 80a7eb8:	2701      	movs	r7, #1
 80a7eba:	e003      	b.n	80a7ec4 <_strtoul_r+0x3c>
 80a7ebc:	2c2b      	cmp	r4, #43	; 0x2b
 80a7ebe:	bf04      	itt	eq
 80a7ec0:	7874      	ldrbeq	r4, [r6, #1]
 80a7ec2:	1cb5      	addeq	r5, r6, #2
 80a7ec4:	b113      	cbz	r3, 80a7ecc <_strtoul_r+0x44>
 80a7ec6:	2b10      	cmp	r3, #16
 80a7ec8:	d10a      	bne.n	80a7ee0 <_strtoul_r+0x58>
 80a7eca:	e053      	b.n	80a7f74 <_strtoul_r+0xec>
 80a7ecc:	2c30      	cmp	r4, #48	; 0x30
 80a7ece:	d14f      	bne.n	80a7f70 <_strtoul_r+0xe8>
 80a7ed0:	7828      	ldrb	r0, [r5, #0]
 80a7ed2:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80a7ed6:	2858      	cmp	r0, #88	; 0x58
 80a7ed8:	d145      	bne.n	80a7f66 <_strtoul_r+0xde>
 80a7eda:	786c      	ldrb	r4, [r5, #1]
 80a7edc:	2310      	movs	r3, #16
 80a7ede:	3502      	adds	r5, #2
 80a7ee0:	f04f 3cff 	mov.w	ip, #4294967295
 80a7ee4:	fbbc fcf3 	udiv	ip, ip, r3
 80a7ee8:	fb03 fa0c 	mul.w	sl, r3, ip
 80a7eec:	2600      	movs	r6, #0
 80a7eee:	ea6f 0a0a 	mvn.w	sl, sl
 80a7ef2:	4630      	mov	r0, r6
 80a7ef4:	eb09 0e04 	add.w	lr, r9, r4
 80a7ef8:	f89e e001 	ldrb.w	lr, [lr, #1]
 80a7efc:	f01e 0f04 	tst.w	lr, #4
 80a7f00:	d001      	beq.n	80a7f06 <_strtoul_r+0x7e>
 80a7f02:	3c30      	subs	r4, #48	; 0x30
 80a7f04:	e00b      	b.n	80a7f1e <_strtoul_r+0x96>
 80a7f06:	f01e 0e03 	ands.w	lr, lr, #3
 80a7f0a:	d01a      	beq.n	80a7f42 <_strtoul_r+0xba>
 80a7f0c:	f1be 0f01 	cmp.w	lr, #1
 80a7f10:	bf0c      	ite	eq
 80a7f12:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 80a7f16:	f04f 0e57 	movne.w	lr, #87	; 0x57
 80a7f1a:	ebce 0404 	rsb	r4, lr, r4
 80a7f1e:	42a3      	cmp	r3, r4
 80a7f20:	dd0f      	ble.n	80a7f42 <_strtoul_r+0xba>
 80a7f22:	2e00      	cmp	r6, #0
 80a7f24:	db08      	blt.n	80a7f38 <_strtoul_r+0xb0>
 80a7f26:	4560      	cmp	r0, ip
 80a7f28:	d806      	bhi.n	80a7f38 <_strtoul_r+0xb0>
 80a7f2a:	d101      	bne.n	80a7f30 <_strtoul_r+0xa8>
 80a7f2c:	4554      	cmp	r4, sl
 80a7f2e:	dc03      	bgt.n	80a7f38 <_strtoul_r+0xb0>
 80a7f30:	fb03 4000 	mla	r0, r3, r0, r4
 80a7f34:	2601      	movs	r6, #1
 80a7f36:	e001      	b.n	80a7f3c <_strtoul_r+0xb4>
 80a7f38:	f04f 36ff 	mov.w	r6, #4294967295
 80a7f3c:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a7f40:	e7d8      	b.n	80a7ef4 <_strtoul_r+0x6c>
 80a7f42:	2e00      	cmp	r6, #0
 80a7f44:	da07      	bge.n	80a7f56 <_strtoul_r+0xce>
 80a7f46:	2322      	movs	r3, #34	; 0x22
 80a7f48:	f8c8 3000 	str.w	r3, [r8]
 80a7f4c:	f04f 30ff 	mov.w	r0, #4294967295
 80a7f50:	b92a      	cbnz	r2, 80a7f5e <_strtoul_r+0xd6>
 80a7f52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a7f56:	b107      	cbz	r7, 80a7f5a <_strtoul_r+0xd2>
 80a7f58:	4240      	negs	r0, r0
 80a7f5a:	b172      	cbz	r2, 80a7f7a <_strtoul_r+0xf2>
 80a7f5c:	b106      	cbz	r6, 80a7f60 <_strtoul_r+0xd8>
 80a7f5e:	1e69      	subs	r1, r5, #1
 80a7f60:	6011      	str	r1, [r2, #0]
 80a7f62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a7f66:	2430      	movs	r4, #48	; 0x30
 80a7f68:	2b00      	cmp	r3, #0
 80a7f6a:	d1b9      	bne.n	80a7ee0 <_strtoul_r+0x58>
 80a7f6c:	2308      	movs	r3, #8
 80a7f6e:	e7b7      	b.n	80a7ee0 <_strtoul_r+0x58>
 80a7f70:	230a      	movs	r3, #10
 80a7f72:	e7b5      	b.n	80a7ee0 <_strtoul_r+0x58>
 80a7f74:	2c30      	cmp	r4, #48	; 0x30
 80a7f76:	d0ab      	beq.n	80a7ed0 <_strtoul_r+0x48>
 80a7f78:	e7b2      	b.n	80a7ee0 <_strtoul_r+0x58>
 80a7f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a7f7e:	bf00      	nop
 80a7f80:	20000010 	.word	0x20000010

080a7f84 <strtoul>:
 80a7f84:	4613      	mov	r3, r2
 80a7f86:	460a      	mov	r2, r1
 80a7f88:	4601      	mov	r1, r0
 80a7f8a:	4802      	ldr	r0, [pc, #8]	; (80a7f94 <strtoul+0x10>)
 80a7f8c:	6800      	ldr	r0, [r0, #0]
 80a7f8e:	f7ff bf7b 	b.w	80a7e88 <_strtoul_r>
 80a7f92:	bf00      	nop
 80a7f94:	20000074 	.word	0x20000074

080a7f98 <__get_current_time_locale>:
 80a7f98:	4b04      	ldr	r3, [pc, #16]	; (80a7fac <__get_current_time_locale+0x14>)
 80a7f9a:	4a05      	ldr	r2, [pc, #20]	; (80a7fb0 <__get_current_time_locale+0x18>)
 80a7f9c:	6818      	ldr	r0, [r3, #0]
 80a7f9e:	4b05      	ldr	r3, [pc, #20]	; (80a7fb4 <__get_current_time_locale+0x1c>)
 80a7fa0:	2800      	cmp	r0, #0
 80a7fa2:	bf14      	ite	ne
 80a7fa4:	4610      	movne	r0, r2
 80a7fa6:	4618      	moveq	r0, r3
 80a7fa8:	4770      	bx	lr
 80a7faa:	bf00      	nop
 80a7fac:	20000674 	.word	0x20000674
 80a7fb0:	20000678 	.word	0x20000678
 80a7fb4:	080aa0a0 	.word	0x080aa0a0

080a7fb8 <__tzcalc_limits>:
 80a7fb8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a7fbc:	4604      	mov	r4, r0
 80a7fbe:	f000 fd91 	bl	80a8ae4 <__gettzinfo>
 80a7fc2:	f240 73b1 	movw	r3, #1969	; 0x7b1
 80a7fc6:	429c      	cmp	r4, r3
 80a7fc8:	f340 8096 	ble.w	80a80f8 <__tzcalc_limits+0x140>
 80a7fcc:	f240 156d 	movw	r5, #365	; 0x16d
 80a7fd0:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 80a7fd4:	18e3      	adds	r3, r4, r3
 80a7fd6:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
 80a7fda:	109b      	asrs	r3, r3, #2
 80a7fdc:	fb05 3502 	mla	r5, r5, r2, r3
 80a7fe0:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
 80a7fe4:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80a7fe8:	fb92 f3f3 	sdiv	r3, r2, r3
 80a7fec:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 80a7ff0:	442b      	add	r3, r5
 80a7ff2:	18a5      	adds	r5, r4, r2
 80a7ff4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80a7ff8:	fb94 f7f2 	sdiv	r7, r4, r2
 80a7ffc:	fb95 f5f2 	sdiv	r5, r5, r2
 80a8000:	fb02 4717 	mls	r7, r2, r7, r4
 80a8004:	441d      	add	r5, r3
 80a8006:	2364      	movs	r3, #100	; 0x64
 80a8008:	fb94 f6f3 	sdiv	r6, r4, r3
 80a800c:	fab7 fe87 	clz	lr, r7
 80a8010:	4601      	mov	r1, r0
 80a8012:	fb03 4616 	mls	r6, r3, r6, r4
 80a8016:	f100 0338 	add.w	r3, r0, #56	; 0x38
 80a801a:	9301      	str	r3, [sp, #4]
 80a801c:	f004 0303 	and.w	r3, r4, #3
 80a8020:	6044      	str	r4, [r0, #4]
 80a8022:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80a8026:	9300      	str	r3, [sp, #0]
 80a8028:	f04f 0c07 	mov.w	ip, #7
 80a802c:	7a0b      	ldrb	r3, [r1, #8]
 80a802e:	2b4a      	cmp	r3, #74	; 0x4a
 80a8030:	d10e      	bne.n	80a8050 <__tzcalc_limits+0x98>
 80a8032:	694b      	ldr	r3, [r1, #20]
 80a8034:	9a00      	ldr	r2, [sp, #0]
 80a8036:	18ec      	adds	r4, r5, r3
 80a8038:	b902      	cbnz	r2, 80a803c <__tzcalc_limits+0x84>
 80a803a:	b906      	cbnz	r6, 80a803e <__tzcalc_limits+0x86>
 80a803c:	b927      	cbnz	r7, 80a8048 <__tzcalc_limits+0x90>
 80a803e:	2b3b      	cmp	r3, #59	; 0x3b
 80a8040:	bfd4      	ite	le
 80a8042:	2300      	movle	r3, #0
 80a8044:	2301      	movgt	r3, #1
 80a8046:	e000      	b.n	80a804a <__tzcalc_limits+0x92>
 80a8048:	2300      	movs	r3, #0
 80a804a:	4423      	add	r3, r4
 80a804c:	3b01      	subs	r3, #1
 80a804e:	e03f      	b.n	80a80d0 <__tzcalc_limits+0x118>
 80a8050:	2b44      	cmp	r3, #68	; 0x44
 80a8052:	d102      	bne.n	80a805a <__tzcalc_limits+0xa2>
 80a8054:	694b      	ldr	r3, [r1, #20]
 80a8056:	442b      	add	r3, r5
 80a8058:	e03a      	b.n	80a80d0 <__tzcalc_limits+0x118>
 80a805a:	9b00      	ldr	r3, [sp, #0]
 80a805c:	b92b      	cbnz	r3, 80a806a <__tzcalc_limits+0xb2>
 80a805e:	2e00      	cmp	r6, #0
 80a8060:	bf0c      	ite	eq
 80a8062:	46f0      	moveq	r8, lr
 80a8064:	f04f 0801 	movne.w	r8, #1
 80a8068:	e000      	b.n	80a806c <__tzcalc_limits+0xb4>
 80a806a:	46f0      	mov	r8, lr
 80a806c:	46a9      	mov	r9, r5
 80a806e:	4b24      	ldr	r3, [pc, #144]	; (80a8100 <__tzcalc_limits+0x148>)
 80a8070:	2230      	movs	r2, #48	; 0x30
 80a8072:	fb02 3808 	mla	r8, r2, r8, r3
 80a8076:	68cc      	ldr	r4, [r1, #12]
 80a8078:	f1a8 0a04 	sub.w	sl, r8, #4
 80a807c:	2301      	movs	r3, #1
 80a807e:	42a3      	cmp	r3, r4
 80a8080:	da04      	bge.n	80a808c <__tzcalc_limits+0xd4>
 80a8082:	f85a bf04 	ldr.w	fp, [sl, #4]!
 80a8086:	3301      	adds	r3, #1
 80a8088:	44d9      	add	r9, fp
 80a808a:	e7f8      	b.n	80a807e <__tzcalc_limits+0xc6>
 80a808c:	f109 0304 	add.w	r3, r9, #4
 80a8090:	fb93 fbfc 	sdiv	fp, r3, ip
 80a8094:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
 80a8098:	ebca 0a03 	rsb	sl, sl, r3
 80a809c:	694b      	ldr	r3, [r1, #20]
 80a809e:	2c01      	cmp	r4, #1
 80a80a0:	bfb8      	it	lt
 80a80a2:	2401      	movlt	r4, #1
 80a80a4:	ebb3 0a0a 	subs.w	sl, r3, sl
 80a80a8:	690b      	ldr	r3, [r1, #16]
 80a80aa:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 80a80ae:	f103 33ff 	add.w	r3, r3, #4294967295
 80a80b2:	f104 34ff 	add.w	r4, r4, #4294967295
 80a80b6:	bf48      	it	mi
 80a80b8:	f10a 0a07 	addmi.w	sl, sl, #7
 80a80bc:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a80c0:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 80a80c4:	4453      	add	r3, sl
 80a80c6:	42a3      	cmp	r3, r4
 80a80c8:	db01      	blt.n	80a80ce <__tzcalc_limits+0x116>
 80a80ca:	3b07      	subs	r3, #7
 80a80cc:	e7fb      	b.n	80a80c6 <__tzcalc_limits+0x10e>
 80a80ce:	444b      	add	r3, r9
 80a80d0:	698c      	ldr	r4, [r1, #24]
 80a80d2:	4a0c      	ldr	r2, [pc, #48]	; (80a8104 <__tzcalc_limits+0x14c>)
 80a80d4:	fb02 4303 	mla	r3, r2, r3, r4
 80a80d8:	6a0c      	ldr	r4, [r1, #32]
 80a80da:	4423      	add	r3, r4
 80a80dc:	f841 3f1c 	str.w	r3, [r1, #28]!
 80a80e0:	9b01      	ldr	r3, [sp, #4]
 80a80e2:	4299      	cmp	r1, r3
 80a80e4:	d1a2      	bne.n	80a802c <__tzcalc_limits+0x74>
 80a80e6:	69c3      	ldr	r3, [r0, #28]
 80a80e8:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80a80ea:	4293      	cmp	r3, r2
 80a80ec:	bfac      	ite	ge
 80a80ee:	2300      	movge	r3, #0
 80a80f0:	2301      	movlt	r3, #1
 80a80f2:	6003      	str	r3, [r0, #0]
 80a80f4:	2001      	movs	r0, #1
 80a80f6:	e000      	b.n	80a80fa <__tzcalc_limits+0x142>
 80a80f8:	2000      	movs	r0, #0
 80a80fa:	b003      	add	sp, #12
 80a80fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a8100:	080a9e5c 	.word	0x080a9e5c
 80a8104:	00015180 	.word	0x00015180

080a8108 <__tz_lock>:
 80a8108:	4770      	bx	lr

080a810a <__tz_unlock>:
 80a810a:	4770      	bx	lr

080a810c <_tzset_unlocked>:
 80a810c:	4b01      	ldr	r3, [pc, #4]	; (80a8114 <_tzset_unlocked+0x8>)
 80a810e:	6818      	ldr	r0, [r3, #0]
 80a8110:	f000 b802 	b.w	80a8118 <_tzset_unlocked_r>
 80a8114:	20000074 	.word	0x20000074

080a8118 <_tzset_unlocked_r>:
 80a8118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a811c:	b08d      	sub	sp, #52	; 0x34
 80a811e:	4607      	mov	r7, r0
 80a8120:	f000 fce0 	bl	80a8ae4 <__gettzinfo>
 80a8124:	49b0      	ldr	r1, [pc, #704]	; (80a83e8 <_tzset_unlocked_r+0x2d0>)
 80a8126:	4604      	mov	r4, r0
 80a8128:	4638      	mov	r0, r7
 80a812a:	f000 fcd3 	bl	80a8ad4 <_getenv_r>
 80a812e:	4eaf      	ldr	r6, [pc, #700]	; (80a83ec <_tzset_unlocked_r+0x2d4>)
 80a8130:	4605      	mov	r5, r0
 80a8132:	b960      	cbnz	r0, 80a814e <_tzset_unlocked_r+0x36>
 80a8134:	4bae      	ldr	r3, [pc, #696]	; (80a83f0 <_tzset_unlocked_r+0x2d8>)
 80a8136:	4aaf      	ldr	r2, [pc, #700]	; (80a83f4 <_tzset_unlocked_r+0x2dc>)
 80a8138:	6018      	str	r0, [r3, #0]
 80a813a:	4baf      	ldr	r3, [pc, #700]	; (80a83f8 <_tzset_unlocked_r+0x2e0>)
 80a813c:	6018      	str	r0, [r3, #0]
 80a813e:	4baf      	ldr	r3, [pc, #700]	; (80a83fc <_tzset_unlocked_r+0x2e4>)
 80a8140:	6830      	ldr	r0, [r6, #0]
 80a8142:	601a      	str	r2, [r3, #0]
 80a8144:	605a      	str	r2, [r3, #4]
 80a8146:	f7fb f89f 	bl	80a3288 <free>
 80a814a:	6035      	str	r5, [r6, #0]
 80a814c:	e148      	b.n	80a83e0 <_tzset_unlocked_r+0x2c8>
 80a814e:	6831      	ldr	r1, [r6, #0]
 80a8150:	b979      	cbnz	r1, 80a8172 <_tzset_unlocked_r+0x5a>
 80a8152:	6830      	ldr	r0, [r6, #0]
 80a8154:	f7fb f898 	bl	80a3288 <free>
 80a8158:	4628      	mov	r0, r5
 80a815a:	f7fe ffa9 	bl	80a70b0 <strlen>
 80a815e:	1c41      	adds	r1, r0, #1
 80a8160:	4638      	mov	r0, r7
 80a8162:	f7fb f8c9 	bl	80a32f8 <_malloc_r>
 80a8166:	6030      	str	r0, [r6, #0]
 80a8168:	b148      	cbz	r0, 80a817e <_tzset_unlocked_r+0x66>
 80a816a:	4629      	mov	r1, r5
 80a816c:	f7fe fa84 	bl	80a6678 <strcpy>
 80a8170:	e005      	b.n	80a817e <_tzset_unlocked_r+0x66>
 80a8172:	f7fe fa77 	bl	80a6664 <strcmp>
 80a8176:	2800      	cmp	r0, #0
 80a8178:	f000 8132 	beq.w	80a83e0 <_tzset_unlocked_r+0x2c8>
 80a817c:	e7e9      	b.n	80a8152 <_tzset_unlocked_r+0x3a>
 80a817e:	782b      	ldrb	r3, [r5, #0]
 80a8180:	ae0a      	add	r6, sp, #40	; 0x28
 80a8182:	2b3a      	cmp	r3, #58	; 0x3a
 80a8184:	bf08      	it	eq
 80a8186:	3501      	addeq	r5, #1
 80a8188:	4633      	mov	r3, r6
 80a818a:	4a9d      	ldr	r2, [pc, #628]	; (80a8400 <_tzset_unlocked_r+0x2e8>)
 80a818c:	499d      	ldr	r1, [pc, #628]	; (80a8404 <_tzset_unlocked_r+0x2ec>)
 80a818e:	4628      	mov	r0, r5
 80a8190:	f7fb f892 	bl	80a32b8 <siscanf>
 80a8194:	2800      	cmp	r0, #0
 80a8196:	f340 8123 	ble.w	80a83e0 <_tzset_unlocked_r+0x2c8>
 80a819a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a819c:	18ef      	adds	r7, r5, r3
 80a819e:	5ceb      	ldrb	r3, [r5, r3]
 80a81a0:	2b2d      	cmp	r3, #45	; 0x2d
 80a81a2:	d103      	bne.n	80a81ac <_tzset_unlocked_r+0x94>
 80a81a4:	3701      	adds	r7, #1
 80a81a6:	f04f 35ff 	mov.w	r5, #4294967295
 80a81aa:	e003      	b.n	80a81b4 <_tzset_unlocked_r+0x9c>
 80a81ac:	2b2b      	cmp	r3, #43	; 0x2b
 80a81ae:	bf08      	it	eq
 80a81b0:	3701      	addeq	r7, #1
 80a81b2:	2501      	movs	r5, #1
 80a81b4:	f10d 0a20 	add.w	sl, sp, #32
 80a81b8:	f10d 0b1e 	add.w	fp, sp, #30
 80a81bc:	f04f 0800 	mov.w	r8, #0
 80a81c0:	9603      	str	r6, [sp, #12]
 80a81c2:	f8cd a008 	str.w	sl, [sp, #8]
 80a81c6:	9601      	str	r6, [sp, #4]
 80a81c8:	f8cd b000 	str.w	fp, [sp]
 80a81cc:	4633      	mov	r3, r6
 80a81ce:	aa07      	add	r2, sp, #28
 80a81d0:	498d      	ldr	r1, [pc, #564]	; (80a8408 <_tzset_unlocked_r+0x2f0>)
 80a81d2:	4638      	mov	r0, r7
 80a81d4:	f8ad 801e 	strh.w	r8, [sp, #30]
 80a81d8:	f8ad 8020 	strh.w	r8, [sp, #32]
 80a81dc:	f7fb f86c 	bl	80a32b8 <siscanf>
 80a81e0:	4540      	cmp	r0, r8
 80a81e2:	f340 80fd 	ble.w	80a83e0 <_tzset_unlocked_r+0x2c8>
 80a81e6:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80a81ea:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80a81ee:	213c      	movs	r1, #60	; 0x3c
 80a81f0:	fb01 3302 	mla	r3, r1, r2, r3
 80a81f4:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80a81f8:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a81fc:	fb01 3302 	mla	r3, r1, r2, r3
 80a8200:	435d      	muls	r5, r3
 80a8202:	4b7f      	ldr	r3, [pc, #508]	; (80a8400 <_tzset_unlocked_r+0x2e8>)
 80a8204:	6225      	str	r5, [r4, #32]
 80a8206:	4d7d      	ldr	r5, [pc, #500]	; (80a83fc <_tzset_unlocked_r+0x2e4>)
 80a8208:	f8df 9208 	ldr.w	r9, [pc, #520]	; 80a8414 <_tzset_unlocked_r+0x2fc>
 80a820c:	602b      	str	r3, [r5, #0]
 80a820e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a8210:	464a      	mov	r2, r9
 80a8212:	441f      	add	r7, r3
 80a8214:	497b      	ldr	r1, [pc, #492]	; (80a8404 <_tzset_unlocked_r+0x2ec>)
 80a8216:	4633      	mov	r3, r6
 80a8218:	4638      	mov	r0, r7
 80a821a:	f7fb f84d 	bl	80a32b8 <siscanf>
 80a821e:	4540      	cmp	r0, r8
 80a8220:	dc08      	bgt.n	80a8234 <_tzset_unlocked_r+0x11c>
 80a8222:	682b      	ldr	r3, [r5, #0]
 80a8224:	6a22      	ldr	r2, [r4, #32]
 80a8226:	606b      	str	r3, [r5, #4]
 80a8228:	4b71      	ldr	r3, [pc, #452]	; (80a83f0 <_tzset_unlocked_r+0x2d8>)
 80a822a:	601a      	str	r2, [r3, #0]
 80a822c:	4b72      	ldr	r3, [pc, #456]	; (80a83f8 <_tzset_unlocked_r+0x2e0>)
 80a822e:	f8c3 8000 	str.w	r8, [r3]
 80a8232:	e0d5      	b.n	80a83e0 <_tzset_unlocked_r+0x2c8>
 80a8234:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a8236:	f8c5 9004 	str.w	r9, [r5, #4]
 80a823a:	18fd      	adds	r5, r7, r3
 80a823c:	5cfb      	ldrb	r3, [r7, r3]
 80a823e:	2b2d      	cmp	r3, #45	; 0x2d
 80a8240:	d103      	bne.n	80a824a <_tzset_unlocked_r+0x132>
 80a8242:	3501      	adds	r5, #1
 80a8244:	f04f 37ff 	mov.w	r7, #4294967295
 80a8248:	e003      	b.n	80a8252 <_tzset_unlocked_r+0x13a>
 80a824a:	2b2b      	cmp	r3, #43	; 0x2b
 80a824c:	bf08      	it	eq
 80a824e:	3501      	addeq	r5, #1
 80a8250:	2701      	movs	r7, #1
 80a8252:	2300      	movs	r3, #0
 80a8254:	f8ad 301c 	strh.w	r3, [sp, #28]
 80a8258:	f8ad 301e 	strh.w	r3, [sp, #30]
 80a825c:	f8ad 3020 	strh.w	r3, [sp, #32]
 80a8260:	930a      	str	r3, [sp, #40]	; 0x28
 80a8262:	9603      	str	r6, [sp, #12]
 80a8264:	f8cd a008 	str.w	sl, [sp, #8]
 80a8268:	9601      	str	r6, [sp, #4]
 80a826a:	f8cd b000 	str.w	fp, [sp]
 80a826e:	4633      	mov	r3, r6
 80a8270:	aa07      	add	r2, sp, #28
 80a8272:	4965      	ldr	r1, [pc, #404]	; (80a8408 <_tzset_unlocked_r+0x2f0>)
 80a8274:	4628      	mov	r0, r5
 80a8276:	f7fb f81f 	bl	80a32b8 <siscanf>
 80a827a:	2800      	cmp	r0, #0
 80a827c:	dc04      	bgt.n	80a8288 <_tzset_unlocked_r+0x170>
 80a827e:	6a23      	ldr	r3, [r4, #32]
 80a8280:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 80a8284:	63e3      	str	r3, [r4, #60]	; 0x3c
 80a8286:	e00e      	b.n	80a82a6 <_tzset_unlocked_r+0x18e>
 80a8288:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80a828c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80a8290:	213c      	movs	r1, #60	; 0x3c
 80a8292:	fb01 3302 	mla	r3, r1, r2, r3
 80a8296:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80a829a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a829e:	fb01 3302 	mla	r3, r1, r2, r3
 80a82a2:	435f      	muls	r7, r3
 80a82a4:	63e7      	str	r7, [r4, #60]	; 0x3c
 80a82a6:	4627      	mov	r7, r4
 80a82a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a82aa:	f04f 0900 	mov.w	r9, #0
 80a82ae:	441d      	add	r5, r3
 80a82b0:	782b      	ldrb	r3, [r5, #0]
 80a82b2:	2b2c      	cmp	r3, #44	; 0x2c
 80a82b4:	bf08      	it	eq
 80a82b6:	3501      	addeq	r5, #1
 80a82b8:	f895 8000 	ldrb.w	r8, [r5]
 80a82bc:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 80a82c0:	d126      	bne.n	80a8310 <_tzset_unlocked_r+0x1f8>
 80a82c2:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 80a82c6:	9302      	str	r3, [sp, #8]
 80a82c8:	ab09      	add	r3, sp, #36	; 0x24
 80a82ca:	9300      	str	r3, [sp, #0]
 80a82cc:	9603      	str	r6, [sp, #12]
 80a82ce:	9601      	str	r6, [sp, #4]
 80a82d0:	4633      	mov	r3, r6
 80a82d2:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 80a82d6:	494d      	ldr	r1, [pc, #308]	; (80a840c <_tzset_unlocked_r+0x2f4>)
 80a82d8:	4628      	mov	r0, r5
 80a82da:	f7fa ffed 	bl	80a32b8 <siscanf>
 80a82de:	2803      	cmp	r0, #3
 80a82e0:	d17e      	bne.n	80a83e0 <_tzset_unlocked_r+0x2c8>
 80a82e2:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 80a82e6:	1e4b      	subs	r3, r1, #1
 80a82e8:	2b0b      	cmp	r3, #11
 80a82ea:	d879      	bhi.n	80a83e0 <_tzset_unlocked_r+0x2c8>
 80a82ec:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 80a82f0:	1e53      	subs	r3, r2, #1
 80a82f2:	2b04      	cmp	r3, #4
 80a82f4:	d874      	bhi.n	80a83e0 <_tzset_unlocked_r+0x2c8>
 80a82f6:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 80a82fa:	2b06      	cmp	r3, #6
 80a82fc:	d870      	bhi.n	80a83e0 <_tzset_unlocked_r+0x2c8>
 80a82fe:	f887 8008 	strb.w	r8, [r7, #8]
 80a8302:	60f9      	str	r1, [r7, #12]
 80a8304:	613a      	str	r2, [r7, #16]
 80a8306:	617b      	str	r3, [r7, #20]
 80a8308:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a830a:	eb05 0803 	add.w	r8, r5, r3
 80a830e:	e02a      	b.n	80a8366 <_tzset_unlocked_r+0x24e>
 80a8310:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 80a8314:	bf06      	itte	eq
 80a8316:	4643      	moveq	r3, r8
 80a8318:	3501      	addeq	r5, #1
 80a831a:	2344      	movne	r3, #68	; 0x44
 80a831c:	220a      	movs	r2, #10
 80a831e:	a90b      	add	r1, sp, #44	; 0x2c
 80a8320:	4628      	mov	r0, r5
 80a8322:	9305      	str	r3, [sp, #20]
 80a8324:	f7ff fe2e 	bl	80a7f84 <strtoul>
 80a8328:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 80a832c:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 80a8330:	4545      	cmp	r5, r8
 80a8332:	9b05      	ldr	r3, [sp, #20]
 80a8334:	d114      	bne.n	80a8360 <_tzset_unlocked_r+0x248>
 80a8336:	234d      	movs	r3, #77	; 0x4d
 80a8338:	f1b9 0f00 	cmp.w	r9, #0
 80a833c:	d107      	bne.n	80a834e <_tzset_unlocked_r+0x236>
 80a833e:	7223      	strb	r3, [r4, #8]
 80a8340:	2303      	movs	r3, #3
 80a8342:	60e3      	str	r3, [r4, #12]
 80a8344:	2302      	movs	r3, #2
 80a8346:	6123      	str	r3, [r4, #16]
 80a8348:	f8c4 9014 	str.w	r9, [r4, #20]
 80a834c:	e00b      	b.n	80a8366 <_tzset_unlocked_r+0x24e>
 80a834e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 80a8352:	230b      	movs	r3, #11
 80a8354:	62a3      	str	r3, [r4, #40]	; 0x28
 80a8356:	2301      	movs	r3, #1
 80a8358:	62e3      	str	r3, [r4, #44]	; 0x2c
 80a835a:	2300      	movs	r3, #0
 80a835c:	6323      	str	r3, [r4, #48]	; 0x30
 80a835e:	e002      	b.n	80a8366 <_tzset_unlocked_r+0x24e>
 80a8360:	b280      	uxth	r0, r0
 80a8362:	723b      	strb	r3, [r7, #8]
 80a8364:	6178      	str	r0, [r7, #20]
 80a8366:	2302      	movs	r3, #2
 80a8368:	f8ad 301c 	strh.w	r3, [sp, #28]
 80a836c:	2300      	movs	r3, #0
 80a836e:	f8ad 301e 	strh.w	r3, [sp, #30]
 80a8372:	f8ad 3020 	strh.w	r3, [sp, #32]
 80a8376:	930a      	str	r3, [sp, #40]	; 0x28
 80a8378:	f898 3000 	ldrb.w	r3, [r8]
 80a837c:	2b2f      	cmp	r3, #47	; 0x2f
 80a837e:	d10b      	bne.n	80a8398 <_tzset_unlocked_r+0x280>
 80a8380:	9603      	str	r6, [sp, #12]
 80a8382:	f8cd a008 	str.w	sl, [sp, #8]
 80a8386:	9601      	str	r6, [sp, #4]
 80a8388:	f8cd b000 	str.w	fp, [sp]
 80a838c:	4633      	mov	r3, r6
 80a838e:	aa07      	add	r2, sp, #28
 80a8390:	491f      	ldr	r1, [pc, #124]	; (80a8410 <_tzset_unlocked_r+0x2f8>)
 80a8392:	4640      	mov	r0, r8
 80a8394:	f7fa ff90 	bl	80a32b8 <siscanf>
 80a8398:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80a839c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80a83a0:	213c      	movs	r1, #60	; 0x3c
 80a83a2:	fb01 3302 	mla	r3, r1, r2, r3
 80a83a6:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80a83aa:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a83ae:	fb01 3302 	mla	r3, r1, r2, r3
 80a83b2:	61bb      	str	r3, [r7, #24]
 80a83b4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80a83b6:	f109 0901 	add.w	r9, r9, #1
 80a83ba:	f1b9 0f02 	cmp.w	r9, #2
 80a83be:	4445      	add	r5, r8
 80a83c0:	f107 071c 	add.w	r7, r7, #28
 80a83c4:	f47f af74 	bne.w	80a82b0 <_tzset_unlocked_r+0x198>
 80a83c8:	6860      	ldr	r0, [r4, #4]
 80a83ca:	f7ff fdf5 	bl	80a7fb8 <__tzcalc_limits>
 80a83ce:	6a22      	ldr	r2, [r4, #32]
 80a83d0:	4b07      	ldr	r3, [pc, #28]	; (80a83f0 <_tzset_unlocked_r+0x2d8>)
 80a83d2:	601a      	str	r2, [r3, #0]
 80a83d4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80a83d6:	1a9b      	subs	r3, r3, r2
 80a83d8:	4a07      	ldr	r2, [pc, #28]	; (80a83f8 <_tzset_unlocked_r+0x2e0>)
 80a83da:	bf18      	it	ne
 80a83dc:	2301      	movne	r3, #1
 80a83de:	6013      	str	r3, [r2, #0]
 80a83e0:	b00d      	add	sp, #52	; 0x34
 80a83e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a83e6:	bf00      	nop
 80a83e8:	080aa19c 	.word	0x080aa19c
 80a83ec:	2000078c 	.word	0x2000078c
 80a83f0:	20000794 	.word	0x20000794
 80a83f4:	080aa19f 	.word	0x080aa19f
 80a83f8:	20000790 	.word	0x20000790
 80a83fc:	200000b0 	.word	0x200000b0
 80a8400:	2000077f 	.word	0x2000077f
 80a8404:	080aa1a3 	.word	0x080aa1a3
 80a8408:	080aa1c6 	.word	0x080aa1c6
 80a840c:	080aa1b2 	.word	0x080aa1b2
 80a8410:	080aa1c5 	.word	0x080aa1c5
 80a8414:	20000774 	.word	0x20000774

080a8418 <abs>:
 80a8418:	2800      	cmp	r0, #0
 80a841a:	bfb8      	it	lt
 80a841c:	4240      	neglt	r0, r0
 80a841e:	4770      	bx	lr

080a8420 <rshift>:
 80a8420:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a8422:	6906      	ldr	r6, [r0, #16]
 80a8424:	114b      	asrs	r3, r1, #5
 80a8426:	42b3      	cmp	r3, r6
 80a8428:	f100 0514 	add.w	r5, r0, #20
 80a842c:	da27      	bge.n	80a847e <rshift+0x5e>
 80a842e:	f011 011f 	ands.w	r1, r1, #31
 80a8432:	eb05 0686 	add.w	r6, r5, r6, lsl #2
 80a8436:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 80a843a:	d101      	bne.n	80a8440 <rshift+0x20>
 80a843c:	4629      	mov	r1, r5
 80a843e:	e016      	b.n	80a846e <rshift+0x4e>
 80a8440:	1d14      	adds	r4, r2, #4
 80a8442:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
 80a8446:	462b      	mov	r3, r5
 80a8448:	f1c1 0e20 	rsb	lr, r1, #32
 80a844c:	40ca      	lsrs	r2, r1
 80a844e:	42b4      	cmp	r4, r6
 80a8450:	d209      	bcs.n	80a8466 <rshift+0x46>
 80a8452:	6827      	ldr	r7, [r4, #0]
 80a8454:	fa07 f70e 	lsl.w	r7, r7, lr
 80a8458:	433a      	orrs	r2, r7
 80a845a:	f843 2b04 	str.w	r2, [r3], #4
 80a845e:	f854 2b04 	ldr.w	r2, [r4], #4
 80a8462:	40ca      	lsrs	r2, r1
 80a8464:	e7f3      	b.n	80a844e <rshift+0x2e>
 80a8466:	601a      	str	r2, [r3, #0]
 80a8468:	b152      	cbz	r2, 80a8480 <rshift+0x60>
 80a846a:	3304      	adds	r3, #4
 80a846c:	e008      	b.n	80a8480 <rshift+0x60>
 80a846e:	42b2      	cmp	r2, r6
 80a8470:	460b      	mov	r3, r1
 80a8472:	d205      	bcs.n	80a8480 <rshift+0x60>
 80a8474:	f852 3b04 	ldr.w	r3, [r2], #4
 80a8478:	f841 3b04 	str.w	r3, [r1], #4
 80a847c:	e7f7      	b.n	80a846e <rshift+0x4e>
 80a847e:	462b      	mov	r3, r5
 80a8480:	1b5b      	subs	r3, r3, r5
 80a8482:	109b      	asrs	r3, r3, #2
 80a8484:	6103      	str	r3, [r0, #16]
 80a8486:	b903      	cbnz	r3, 80a848a <rshift+0x6a>
 80a8488:	6143      	str	r3, [r0, #20]
 80a848a:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a848c <__hexdig_fun>:
 80a848c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80a8490:	2b09      	cmp	r3, #9
 80a8492:	d801      	bhi.n	80a8498 <__hexdig_fun+0xc>
 80a8494:	3820      	subs	r0, #32
 80a8496:	e00a      	b.n	80a84ae <__hexdig_fun+0x22>
 80a8498:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80a849c:	2b05      	cmp	r3, #5
 80a849e:	d801      	bhi.n	80a84a4 <__hexdig_fun+0x18>
 80a84a0:	3847      	subs	r0, #71	; 0x47
 80a84a2:	e004      	b.n	80a84ae <__hexdig_fun+0x22>
 80a84a4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80a84a8:	2b05      	cmp	r3, #5
 80a84aa:	d802      	bhi.n	80a84b2 <__hexdig_fun+0x26>
 80a84ac:	3827      	subs	r0, #39	; 0x27
 80a84ae:	b2c0      	uxtb	r0, r0
 80a84b0:	4770      	bx	lr
 80a84b2:	2000      	movs	r0, #0
 80a84b4:	4770      	bx	lr

080a84b6 <__gethex>:
 80a84b6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a84ba:	b08b      	sub	sp, #44	; 0x2c
 80a84bc:	468a      	mov	sl, r1
 80a84be:	4690      	mov	r8, r2
 80a84c0:	9306      	str	r3, [sp, #24]
 80a84c2:	9002      	str	r0, [sp, #8]
 80a84c4:	f7fe f88e 	bl	80a65e4 <_localeconv_r>
 80a84c8:	6803      	ldr	r3, [r0, #0]
 80a84ca:	f04f 0b00 	mov.w	fp, #0
 80a84ce:	4618      	mov	r0, r3
 80a84d0:	9303      	str	r3, [sp, #12]
 80a84d2:	f7fe fded 	bl	80a70b0 <strlen>
 80a84d6:	9b03      	ldr	r3, [sp, #12]
 80a84d8:	9001      	str	r0, [sp, #4]
 80a84da:	4403      	add	r3, r0
 80a84dc:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80a84e0:	9307      	str	r3, [sp, #28]
 80a84e2:	f8da 3000 	ldr.w	r3, [sl]
 80a84e6:	3302      	adds	r3, #2
 80a84e8:	461f      	mov	r7, r3
 80a84ea:	f813 0b01 	ldrb.w	r0, [r3], #1
 80a84ee:	2830      	cmp	r0, #48	; 0x30
 80a84f0:	d102      	bne.n	80a84f8 <__gethex+0x42>
 80a84f2:	f10b 0b01 	add.w	fp, fp, #1
 80a84f6:	e7f7      	b.n	80a84e8 <__gethex+0x32>
 80a84f8:	f7ff ffc8 	bl	80a848c <__hexdig_fun>
 80a84fc:	4604      	mov	r4, r0
 80a84fe:	b9e0      	cbnz	r0, 80a853a <__gethex+0x84>
 80a8500:	9a01      	ldr	r2, [sp, #4]
 80a8502:	9903      	ldr	r1, [sp, #12]
 80a8504:	4638      	mov	r0, r7
 80a8506:	f7fe fddb 	bl	80a70c0 <strncmp>
 80a850a:	2800      	cmp	r0, #0
 80a850c:	d134      	bne.n	80a8578 <__gethex+0xc2>
 80a850e:	9b01      	ldr	r3, [sp, #4]
 80a8510:	5cf8      	ldrb	r0, [r7, r3]
 80a8512:	18fe      	adds	r6, r7, r3
 80a8514:	f7ff ffba 	bl	80a848c <__hexdig_fun>
 80a8518:	b380      	cbz	r0, 80a857c <__gethex+0xc6>
 80a851a:	4633      	mov	r3, r6
 80a851c:	7818      	ldrb	r0, [r3, #0]
 80a851e:	461f      	mov	r7, r3
 80a8520:	2830      	cmp	r0, #48	; 0x30
 80a8522:	f103 0301 	add.w	r3, r3, #1
 80a8526:	d0f9      	beq.n	80a851c <__gethex+0x66>
 80a8528:	f7ff ffb0 	bl	80a848c <__hexdig_fun>
 80a852c:	fab0 f580 	clz	r5, r0
 80a8530:	4634      	mov	r4, r6
 80a8532:	096d      	lsrs	r5, r5, #5
 80a8534:	f04f 0b01 	mov.w	fp, #1
 80a8538:	e001      	b.n	80a853e <__gethex+0x88>
 80a853a:	2500      	movs	r5, #0
 80a853c:	462c      	mov	r4, r5
 80a853e:	463a      	mov	r2, r7
 80a8540:	4616      	mov	r6, r2
 80a8542:	7830      	ldrb	r0, [r6, #0]
 80a8544:	3201      	adds	r2, #1
 80a8546:	f7ff ffa1 	bl	80a848c <__hexdig_fun>
 80a854a:	2800      	cmp	r0, #0
 80a854c:	d1f8      	bne.n	80a8540 <__gethex+0x8a>
 80a854e:	9a01      	ldr	r2, [sp, #4]
 80a8550:	9903      	ldr	r1, [sp, #12]
 80a8552:	4630      	mov	r0, r6
 80a8554:	f7fe fdb4 	bl	80a70c0 <strncmp>
 80a8558:	b950      	cbnz	r0, 80a8570 <__gethex+0xba>
 80a855a:	b954      	cbnz	r4, 80a8572 <__gethex+0xbc>
 80a855c:	9b01      	ldr	r3, [sp, #4]
 80a855e:	18f4      	adds	r4, r6, r3
 80a8560:	4622      	mov	r2, r4
 80a8562:	4616      	mov	r6, r2
 80a8564:	7830      	ldrb	r0, [r6, #0]
 80a8566:	3201      	adds	r2, #1
 80a8568:	f7ff ff90 	bl	80a848c <__hexdig_fun>
 80a856c:	2800      	cmp	r0, #0
 80a856e:	d1f8      	bne.n	80a8562 <__gethex+0xac>
 80a8570:	b134      	cbz	r4, 80a8580 <__gethex+0xca>
 80a8572:	1ba4      	subs	r4, r4, r6
 80a8574:	00a4      	lsls	r4, r4, #2
 80a8576:	e003      	b.n	80a8580 <__gethex+0xca>
 80a8578:	463e      	mov	r6, r7
 80a857a:	e000      	b.n	80a857e <__gethex+0xc8>
 80a857c:	4604      	mov	r4, r0
 80a857e:	2501      	movs	r5, #1
 80a8580:	7833      	ldrb	r3, [r6, #0]
 80a8582:	2b50      	cmp	r3, #80	; 0x50
 80a8584:	d001      	beq.n	80a858a <__gethex+0xd4>
 80a8586:	2b70      	cmp	r3, #112	; 0x70
 80a8588:	d12a      	bne.n	80a85e0 <__gethex+0x12a>
 80a858a:	7873      	ldrb	r3, [r6, #1]
 80a858c:	2b2b      	cmp	r3, #43	; 0x2b
 80a858e:	d008      	beq.n	80a85a2 <__gethex+0xec>
 80a8590:	2b2d      	cmp	r3, #45	; 0x2d
 80a8592:	d003      	beq.n	80a859c <__gethex+0xe6>
 80a8594:	1c71      	adds	r1, r6, #1
 80a8596:	f04f 0900 	mov.w	r9, #0
 80a859a:	e005      	b.n	80a85a8 <__gethex+0xf2>
 80a859c:	f04f 0901 	mov.w	r9, #1
 80a85a0:	e001      	b.n	80a85a6 <__gethex+0xf0>
 80a85a2:	f04f 0900 	mov.w	r9, #0
 80a85a6:	1cb1      	adds	r1, r6, #2
 80a85a8:	7808      	ldrb	r0, [r1, #0]
 80a85aa:	f7ff ff6f 	bl	80a848c <__hexdig_fun>
 80a85ae:	1e43      	subs	r3, r0, #1
 80a85b0:	b2db      	uxtb	r3, r3
 80a85b2:	2b18      	cmp	r3, #24
 80a85b4:	d814      	bhi.n	80a85e0 <__gethex+0x12a>
 80a85b6:	f1a0 0210 	sub.w	r2, r0, #16
 80a85ba:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80a85be:	f7ff ff65 	bl	80a848c <__hexdig_fun>
 80a85c2:	1e43      	subs	r3, r0, #1
 80a85c4:	b2db      	uxtb	r3, r3
 80a85c6:	2b18      	cmp	r3, #24
 80a85c8:	d804      	bhi.n	80a85d4 <__gethex+0x11e>
 80a85ca:	230a      	movs	r3, #10
 80a85cc:	fb03 0202 	mla	r2, r3, r2, r0
 80a85d0:	3a10      	subs	r2, #16
 80a85d2:	e7f2      	b.n	80a85ba <__gethex+0x104>
 80a85d4:	f1b9 0f00 	cmp.w	r9, #0
 80a85d8:	d000      	beq.n	80a85dc <__gethex+0x126>
 80a85da:	4252      	negs	r2, r2
 80a85dc:	4414      	add	r4, r2
 80a85de:	e000      	b.n	80a85e2 <__gethex+0x12c>
 80a85e0:	4631      	mov	r1, r6
 80a85e2:	f8ca 1000 	str.w	r1, [sl]
 80a85e6:	b12d      	cbz	r5, 80a85f4 <__gethex+0x13e>
 80a85e8:	f1bb 0f00 	cmp.w	fp, #0
 80a85ec:	bf14      	ite	ne
 80a85ee:	2000      	movne	r0, #0
 80a85f0:	2006      	moveq	r0, #6
 80a85f2:	e17c      	b.n	80a88ee <__gethex+0x438>
 80a85f4:	4629      	mov	r1, r5
 80a85f6:	1bf3      	subs	r3, r6, r7
 80a85f8:	3b01      	subs	r3, #1
 80a85fa:	2b07      	cmp	r3, #7
 80a85fc:	dd02      	ble.n	80a8604 <__gethex+0x14e>
 80a85fe:	3101      	adds	r1, #1
 80a8600:	105b      	asrs	r3, r3, #1
 80a8602:	e7fa      	b.n	80a85fa <__gethex+0x144>
 80a8604:	9802      	ldr	r0, [sp, #8]
 80a8606:	f000 fb0b 	bl	80a8c20 <_Balloc>
 80a860a:	f04f 0900 	mov.w	r9, #0
 80a860e:	4605      	mov	r5, r0
 80a8610:	46cb      	mov	fp, r9
 80a8612:	9b01      	ldr	r3, [sp, #4]
 80a8614:	f100 0a14 	add.w	sl, r0, #20
 80a8618:	f1c3 0301 	rsb	r3, r3, #1
 80a861c:	f8cd a010 	str.w	sl, [sp, #16]
 80a8620:	9308      	str	r3, [sp, #32]
 80a8622:	42b7      	cmp	r7, r6
 80a8624:	d22f      	bcs.n	80a8686 <__gethex+0x1d0>
 80a8626:	1e73      	subs	r3, r6, #1
 80a8628:	9305      	str	r3, [sp, #20]
 80a862a:	9a07      	ldr	r2, [sp, #28]
 80a862c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80a8630:	4293      	cmp	r3, r2
 80a8632:	d00b      	beq.n	80a864c <__gethex+0x196>
 80a8634:	f1bb 0f20 	cmp.w	fp, #32
 80a8638:	d116      	bne.n	80a8668 <__gethex+0x1b2>
 80a863a:	9b04      	ldr	r3, [sp, #16]
 80a863c:	f8c3 9000 	str.w	r9, [r3]
 80a8640:	3304      	adds	r3, #4
 80a8642:	f04f 0900 	mov.w	r9, #0
 80a8646:	9304      	str	r3, [sp, #16]
 80a8648:	46cb      	mov	fp, r9
 80a864a:	e00d      	b.n	80a8668 <__gethex+0x1b2>
 80a864c:	9b05      	ldr	r3, [sp, #20]
 80a864e:	9a08      	ldr	r2, [sp, #32]
 80a8650:	4413      	add	r3, r2
 80a8652:	429f      	cmp	r7, r3
 80a8654:	d8ee      	bhi.n	80a8634 <__gethex+0x17e>
 80a8656:	4618      	mov	r0, r3
 80a8658:	9a01      	ldr	r2, [sp, #4]
 80a865a:	9903      	ldr	r1, [sp, #12]
 80a865c:	9309      	str	r3, [sp, #36]	; 0x24
 80a865e:	f7fe fd2f 	bl	80a70c0 <strncmp>
 80a8662:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a8664:	b168      	cbz	r0, 80a8682 <__gethex+0x1cc>
 80a8666:	e7e5      	b.n	80a8634 <__gethex+0x17e>
 80a8668:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80a866c:	f7ff ff0e 	bl	80a848c <__hexdig_fun>
 80a8670:	f000 000f 	and.w	r0, r0, #15
 80a8674:	fa00 f00b 	lsl.w	r0, r0, fp
 80a8678:	9b05      	ldr	r3, [sp, #20]
 80a867a:	ea49 0900 	orr.w	r9, r9, r0
 80a867e:	f10b 0b04 	add.w	fp, fp, #4
 80a8682:	461e      	mov	r6, r3
 80a8684:	e7cd      	b.n	80a8622 <__gethex+0x16c>
 80a8686:	9804      	ldr	r0, [sp, #16]
 80a8688:	f840 9b04 	str.w	r9, [r0], #4
 80a868c:	ebca 0000 	rsb	r0, sl, r0
 80a8690:	1080      	asrs	r0, r0, #2
 80a8692:	6128      	str	r0, [r5, #16]
 80a8694:	0147      	lsls	r7, r0, #5
 80a8696:	4648      	mov	r0, r9
 80a8698:	f000 fb87 	bl	80a8daa <__hi0bits>
 80a869c:	f8d8 6000 	ldr.w	r6, [r8]
 80a86a0:	1a38      	subs	r0, r7, r0
 80a86a2:	42b0      	cmp	r0, r6
 80a86a4:	dd26      	ble.n	80a86f4 <__gethex+0x23e>
 80a86a6:	1b87      	subs	r7, r0, r6
 80a86a8:	4639      	mov	r1, r7
 80a86aa:	4628      	mov	r0, r5
 80a86ac:	f000 fe7f 	bl	80a93ae <__any_on>
 80a86b0:	b1c8      	cbz	r0, 80a86e6 <__gethex+0x230>
 80a86b2:	1e7b      	subs	r3, r7, #1
 80a86b4:	1159      	asrs	r1, r3, #5
 80a86b6:	f003 021f 	and.w	r2, r3, #31
 80a86ba:	f04f 0901 	mov.w	r9, #1
 80a86be:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80a86c2:	fa09 f202 	lsl.w	r2, r9, r2
 80a86c6:	420a      	tst	r2, r1
 80a86c8:	d00e      	beq.n	80a86e8 <__gethex+0x232>
 80a86ca:	454b      	cmp	r3, r9
 80a86cc:	dc02      	bgt.n	80a86d4 <__gethex+0x21e>
 80a86ce:	f04f 0902 	mov.w	r9, #2
 80a86d2:	e009      	b.n	80a86e8 <__gethex+0x232>
 80a86d4:	1eb9      	subs	r1, r7, #2
 80a86d6:	4628      	mov	r0, r5
 80a86d8:	f000 fe69 	bl	80a93ae <__any_on>
 80a86dc:	2800      	cmp	r0, #0
 80a86de:	d0f6      	beq.n	80a86ce <__gethex+0x218>
 80a86e0:	f04f 0903 	mov.w	r9, #3
 80a86e4:	e000      	b.n	80a86e8 <__gethex+0x232>
 80a86e6:	4681      	mov	r9, r0
 80a86e8:	4639      	mov	r1, r7
 80a86ea:	4628      	mov	r0, r5
 80a86ec:	f7ff fe98 	bl	80a8420 <rshift>
 80a86f0:	443c      	add	r4, r7
 80a86f2:	e00c      	b.n	80a870e <__gethex+0x258>
 80a86f4:	da09      	bge.n	80a870a <__gethex+0x254>
 80a86f6:	1a37      	subs	r7, r6, r0
 80a86f8:	4629      	mov	r1, r5
 80a86fa:	463a      	mov	r2, r7
 80a86fc:	9802      	ldr	r0, [sp, #8]
 80a86fe:	f000 fc89 	bl	80a9014 <__lshift>
 80a8702:	4605      	mov	r5, r0
 80a8704:	1be4      	subs	r4, r4, r7
 80a8706:	f100 0a14 	add.w	sl, r0, #20
 80a870a:	f04f 0900 	mov.w	r9, #0
 80a870e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80a8712:	429c      	cmp	r4, r3
 80a8714:	dd08      	ble.n	80a8728 <__gethex+0x272>
 80a8716:	9802      	ldr	r0, [sp, #8]
 80a8718:	4629      	mov	r1, r5
 80a871a:	f000 fab6 	bl	80a8c8a <_Bfree>
 80a871e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80a8720:	2300      	movs	r3, #0
 80a8722:	6013      	str	r3, [r2, #0]
 80a8724:	20a3      	movs	r0, #163	; 0xa3
 80a8726:	e0e2      	b.n	80a88ee <__gethex+0x438>
 80a8728:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80a872c:	4284      	cmp	r4, r0
 80a872e:	da53      	bge.n	80a87d8 <__gethex+0x322>
 80a8730:	1b04      	subs	r4, r0, r4
 80a8732:	42a6      	cmp	r6, r4
 80a8734:	dc2e      	bgt.n	80a8794 <__gethex+0x2de>
 80a8736:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80a873a:	2b02      	cmp	r3, #2
 80a873c:	d01a      	beq.n	80a8774 <__gethex+0x2be>
 80a873e:	2b03      	cmp	r3, #3
 80a8740:	d01c      	beq.n	80a877c <__gethex+0x2c6>
 80a8742:	2b01      	cmp	r3, #1
 80a8744:	d11d      	bne.n	80a8782 <__gethex+0x2cc>
 80a8746:	42a6      	cmp	r6, r4
 80a8748:	d11b      	bne.n	80a8782 <__gethex+0x2cc>
 80a874a:	2e01      	cmp	r6, #1
 80a874c:	dc0b      	bgt.n	80a8766 <__gethex+0x2b0>
 80a874e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80a8752:	9a06      	ldr	r2, [sp, #24]
 80a8754:	2062      	movs	r0, #98	; 0x62
 80a8756:	6013      	str	r3, [r2, #0]
 80a8758:	2301      	movs	r3, #1
 80a875a:	612b      	str	r3, [r5, #16]
 80a875c:	f8ca 3000 	str.w	r3, [sl]
 80a8760:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80a8762:	601d      	str	r5, [r3, #0]
 80a8764:	e0c3      	b.n	80a88ee <__gethex+0x438>
 80a8766:	1e71      	subs	r1, r6, #1
 80a8768:	4628      	mov	r0, r5
 80a876a:	f000 fe20 	bl	80a93ae <__any_on>
 80a876e:	2800      	cmp	r0, #0
 80a8770:	d1ed      	bne.n	80a874e <__gethex+0x298>
 80a8772:	e006      	b.n	80a8782 <__gethex+0x2cc>
 80a8774:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80a8776:	2b00      	cmp	r3, #0
 80a8778:	d0e9      	beq.n	80a874e <__gethex+0x298>
 80a877a:	e002      	b.n	80a8782 <__gethex+0x2cc>
 80a877c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80a877e:	2b00      	cmp	r3, #0
 80a8780:	d1e5      	bne.n	80a874e <__gethex+0x298>
 80a8782:	9802      	ldr	r0, [sp, #8]
 80a8784:	4629      	mov	r1, r5
 80a8786:	f000 fa80 	bl	80a8c8a <_Bfree>
 80a878a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80a878c:	2300      	movs	r3, #0
 80a878e:	6013      	str	r3, [r2, #0]
 80a8790:	2050      	movs	r0, #80	; 0x50
 80a8792:	e0ac      	b.n	80a88ee <__gethex+0x438>
 80a8794:	1e67      	subs	r7, r4, #1
 80a8796:	f1b9 0f00 	cmp.w	r9, #0
 80a879a:	d106      	bne.n	80a87aa <__gethex+0x2f4>
 80a879c:	b13f      	cbz	r7, 80a87ae <__gethex+0x2f8>
 80a879e:	4639      	mov	r1, r7
 80a87a0:	4628      	mov	r0, r5
 80a87a2:	f000 fe04 	bl	80a93ae <__any_on>
 80a87a6:	4681      	mov	r9, r0
 80a87a8:	e001      	b.n	80a87ae <__gethex+0x2f8>
 80a87aa:	f04f 0901 	mov.w	r9, #1
 80a87ae:	117a      	asrs	r2, r7, #5
 80a87b0:	2301      	movs	r3, #1
 80a87b2:	f007 071f 	and.w	r7, r7, #31
 80a87b6:	fa03 f707 	lsl.w	r7, r3, r7
 80a87ba:	f85a 3022 	ldr.w	r3, [sl, r2, lsl #2]
 80a87be:	4621      	mov	r1, r4
 80a87c0:	421f      	tst	r7, r3
 80a87c2:	4628      	mov	r0, r5
 80a87c4:	bf18      	it	ne
 80a87c6:	f049 0902 	orrne.w	r9, r9, #2
 80a87ca:	1b36      	subs	r6, r6, r4
 80a87cc:	f7ff fe28 	bl	80a8420 <rshift>
 80a87d0:	2702      	movs	r7, #2
 80a87d2:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80a87d6:	e000      	b.n	80a87da <__gethex+0x324>
 80a87d8:	2701      	movs	r7, #1
 80a87da:	f1b9 0f00 	cmp.w	r9, #0
 80a87de:	f000 8081 	beq.w	80a88e4 <__gethex+0x42e>
 80a87e2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80a87e6:	2b02      	cmp	r3, #2
 80a87e8:	d00e      	beq.n	80a8808 <__gethex+0x352>
 80a87ea:	2b03      	cmp	r3, #3
 80a87ec:	d010      	beq.n	80a8810 <__gethex+0x35a>
 80a87ee:	2b01      	cmp	r3, #1
 80a87f0:	d176      	bne.n	80a88e0 <__gethex+0x42a>
 80a87f2:	f019 0f02 	tst.w	r9, #2
 80a87f6:	d073      	beq.n	80a88e0 <__gethex+0x42a>
 80a87f8:	f8da 0000 	ldr.w	r0, [sl]
 80a87fc:	ea49 0900 	orr.w	r9, r9, r0
 80a8800:	f019 0f01 	tst.w	r9, #1
 80a8804:	d107      	bne.n	80a8816 <__gethex+0x360>
 80a8806:	e06b      	b.n	80a88e0 <__gethex+0x42a>
 80a8808:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80a880a:	f1c3 0301 	rsb	r3, r3, #1
 80a880e:	9315      	str	r3, [sp, #84]	; 0x54
 80a8810:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80a8812:	2b00      	cmp	r3, #0
 80a8814:	d064      	beq.n	80a88e0 <__gethex+0x42a>
 80a8816:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80a881a:	f105 0314 	add.w	r3, r5, #20
 80a881e:	ea4f 098a 	mov.w	r9, sl, lsl #2
 80a8822:	eb03 0109 	add.w	r1, r3, r9
 80a8826:	2000      	movs	r0, #0
 80a8828:	681a      	ldr	r2, [r3, #0]
 80a882a:	f1b2 3fff 	cmp.w	r2, #4294967295
 80a882e:	d002      	beq.n	80a8836 <__gethex+0x380>
 80a8830:	3201      	adds	r2, #1
 80a8832:	601a      	str	r2, [r3, #0]
 80a8834:	e020      	b.n	80a8878 <__gethex+0x3c2>
 80a8836:	f843 0b04 	str.w	r0, [r3], #4
 80a883a:	4299      	cmp	r1, r3
 80a883c:	d8f4      	bhi.n	80a8828 <__gethex+0x372>
 80a883e:	68ab      	ldr	r3, [r5, #8]
 80a8840:	459a      	cmp	sl, r3
 80a8842:	db12      	blt.n	80a886a <__gethex+0x3b4>
 80a8844:	6869      	ldr	r1, [r5, #4]
 80a8846:	9802      	ldr	r0, [sp, #8]
 80a8848:	3101      	adds	r1, #1
 80a884a:	f000 f9e9 	bl	80a8c20 <_Balloc>
 80a884e:	4683      	mov	fp, r0
 80a8850:	692a      	ldr	r2, [r5, #16]
 80a8852:	f105 010c 	add.w	r1, r5, #12
 80a8856:	3202      	adds	r2, #2
 80a8858:	0092      	lsls	r2, r2, #2
 80a885a:	300c      	adds	r0, #12
 80a885c:	f7fd fec6 	bl	80a65ec <memcpy>
 80a8860:	4629      	mov	r1, r5
 80a8862:	9802      	ldr	r0, [sp, #8]
 80a8864:	f000 fa11 	bl	80a8c8a <_Bfree>
 80a8868:	465d      	mov	r5, fp
 80a886a:	692b      	ldr	r3, [r5, #16]
 80a886c:	1c5a      	adds	r2, r3, #1
 80a886e:	612a      	str	r2, [r5, #16]
 80a8870:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80a8874:	2201      	movs	r2, #1
 80a8876:	615a      	str	r2, [r3, #20]
 80a8878:	2f02      	cmp	r7, #2
 80a887a:	f105 0214 	add.w	r2, r5, #20
 80a887e:	d111      	bne.n	80a88a4 <__gethex+0x3ee>
 80a8880:	f8d8 3000 	ldr.w	r3, [r8]
 80a8884:	3b01      	subs	r3, #1
 80a8886:	429e      	cmp	r6, r3
 80a8888:	d127      	bne.n	80a88da <__gethex+0x424>
 80a888a:	1171      	asrs	r1, r6, #5
 80a888c:	2301      	movs	r3, #1
 80a888e:	f006 061f 	and.w	r6, r6, #31
 80a8892:	fa03 f606 	lsl.w	r6, r3, r6
 80a8896:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80a889a:	421e      	tst	r6, r3
 80a889c:	bf0c      	ite	eq
 80a889e:	2702      	moveq	r7, #2
 80a88a0:	2701      	movne	r7, #1
 80a88a2:	e01a      	b.n	80a88da <__gethex+0x424>
 80a88a4:	692b      	ldr	r3, [r5, #16]
 80a88a6:	459a      	cmp	sl, r3
 80a88a8:	da0a      	bge.n	80a88c0 <__gethex+0x40a>
 80a88aa:	2101      	movs	r1, #1
 80a88ac:	4628      	mov	r0, r5
 80a88ae:	f7ff fdb7 	bl	80a8420 <rshift>
 80a88b2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80a88b6:	3401      	adds	r4, #1
 80a88b8:	429c      	cmp	r4, r3
 80a88ba:	f73f af2c 	bgt.w	80a8716 <__gethex+0x260>
 80a88be:	e00b      	b.n	80a88d8 <__gethex+0x422>
 80a88c0:	f016 061f 	ands.w	r6, r6, #31
 80a88c4:	d008      	beq.n	80a88d8 <__gethex+0x422>
 80a88c6:	4491      	add	r9, r2
 80a88c8:	f859 0c04 	ldr.w	r0, [r9, #-4]
 80a88cc:	f000 fa6d 	bl	80a8daa <__hi0bits>
 80a88d0:	f1c6 0620 	rsb	r6, r6, #32
 80a88d4:	42b0      	cmp	r0, r6
 80a88d6:	dbe8      	blt.n	80a88aa <__gethex+0x3f4>
 80a88d8:	2701      	movs	r7, #1
 80a88da:	f047 0720 	orr.w	r7, r7, #32
 80a88de:	e001      	b.n	80a88e4 <__gethex+0x42e>
 80a88e0:	f047 0710 	orr.w	r7, r7, #16
 80a88e4:	4638      	mov	r0, r7
 80a88e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80a88e8:	601d      	str	r5, [r3, #0]
 80a88ea:	9b06      	ldr	r3, [sp, #24]
 80a88ec:	601c      	str	r4, [r3, #0]
 80a88ee:	b00b      	add	sp, #44	; 0x2c
 80a88f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a88f4 <L_shift>:
 80a88f4:	f1c2 0208 	rsb	r2, r2, #8
 80a88f8:	0092      	lsls	r2, r2, #2
 80a88fa:	b570      	push	{r4, r5, r6, lr}
 80a88fc:	f1c2 0620 	rsb	r6, r2, #32
 80a8900:	6843      	ldr	r3, [r0, #4]
 80a8902:	6805      	ldr	r5, [r0, #0]
 80a8904:	fa03 f406 	lsl.w	r4, r3, r6
 80a8908:	432c      	orrs	r4, r5
 80a890a:	40d3      	lsrs	r3, r2
 80a890c:	6004      	str	r4, [r0, #0]
 80a890e:	f840 3f04 	str.w	r3, [r0, #4]!
 80a8912:	4288      	cmp	r0, r1
 80a8914:	d3f4      	bcc.n	80a8900 <L_shift+0xc>
 80a8916:	bd70      	pop	{r4, r5, r6, pc}

080a8918 <__match>:
 80a8918:	b530      	push	{r4, r5, lr}
 80a891a:	6803      	ldr	r3, [r0, #0]
 80a891c:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a8920:	3301      	adds	r3, #1
 80a8922:	b14c      	cbz	r4, 80a8938 <__match+0x20>
 80a8924:	781a      	ldrb	r2, [r3, #0]
 80a8926:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80a892a:	2d19      	cmp	r5, #25
 80a892c:	bf98      	it	ls
 80a892e:	3220      	addls	r2, #32
 80a8930:	42a2      	cmp	r2, r4
 80a8932:	d0f3      	beq.n	80a891c <__match+0x4>
 80a8934:	2000      	movs	r0, #0
 80a8936:	bd30      	pop	{r4, r5, pc}
 80a8938:	6003      	str	r3, [r0, #0]
 80a893a:	2001      	movs	r0, #1
 80a893c:	bd30      	pop	{r4, r5, pc}

080a893e <__hexnan>:
 80a893e:	680b      	ldr	r3, [r1, #0]
 80a8940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a8944:	115e      	asrs	r6, r3, #5
 80a8946:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80a894a:	f013 031f 	ands.w	r3, r3, #31
 80a894e:	bf18      	it	ne
 80a8950:	3604      	addne	r6, #4
 80a8952:	1f35      	subs	r5, r6, #4
 80a8954:	4617      	mov	r7, r2
 80a8956:	2200      	movs	r2, #0
 80a8958:	4682      	mov	sl, r0
 80a895a:	46a8      	mov	r8, r5
 80a895c:	462c      	mov	r4, r5
 80a895e:	4691      	mov	r9, r2
 80a8960:	b085      	sub	sp, #20
 80a8962:	f8d0 b000 	ldr.w	fp, [r0]
 80a8966:	9301      	str	r3, [sp, #4]
 80a8968:	f846 2c04 	str.w	r2, [r6, #-4]
 80a896c:	9200      	str	r2, [sp, #0]
 80a896e:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
 80a8972:	2900      	cmp	r1, #0
 80a8974:	d03c      	beq.n	80a89f0 <__hexnan+0xb2>
 80a8976:	4608      	mov	r0, r1
 80a8978:	9203      	str	r2, [sp, #12]
 80a897a:	9102      	str	r1, [sp, #8]
 80a897c:	f7ff fd86 	bl	80a848c <__hexdig_fun>
 80a8980:	9a03      	ldr	r2, [sp, #12]
 80a8982:	bb00      	cbnz	r0, 80a89c6 <__hexnan+0x88>
 80a8984:	9902      	ldr	r1, [sp, #8]
 80a8986:	2920      	cmp	r1, #32
 80a8988:	d816      	bhi.n	80a89b8 <__hexnan+0x7a>
 80a898a:	9b00      	ldr	r3, [sp, #0]
 80a898c:	4599      	cmp	r9, r3
 80a898e:	ddee      	ble.n	80a896e <__hexnan+0x30>
 80a8990:	4544      	cmp	r4, r8
 80a8992:	d205      	bcs.n	80a89a0 <__hexnan+0x62>
 80a8994:	2a07      	cmp	r2, #7
 80a8996:	dc03      	bgt.n	80a89a0 <__hexnan+0x62>
 80a8998:	4641      	mov	r1, r8
 80a899a:	4620      	mov	r0, r4
 80a899c:	f7ff ffaa 	bl	80a88f4 <L_shift>
 80a89a0:	42bc      	cmp	r4, r7
 80a89a2:	d923      	bls.n	80a89ec <__hexnan+0xae>
 80a89a4:	2300      	movs	r3, #0
 80a89a6:	f1a4 0804 	sub.w	r8, r4, #4
 80a89aa:	f844 3c04 	str.w	r3, [r4, #-4]
 80a89ae:	f8cd 9000 	str.w	r9, [sp]
 80a89b2:	4644      	mov	r4, r8
 80a89b4:	461a      	mov	r2, r3
 80a89b6:	e7da      	b.n	80a896e <__hexnan+0x30>
 80a89b8:	2929      	cmp	r1, #41	; 0x29
 80a89ba:	d148      	bne.n	80a8a4e <__hexnan+0x110>
 80a89bc:	f10b 0301 	add.w	r3, fp, #1
 80a89c0:	f8ca 3000 	str.w	r3, [sl]
 80a89c4:	e014      	b.n	80a89f0 <__hexnan+0xb2>
 80a89c6:	3201      	adds	r2, #1
 80a89c8:	2a08      	cmp	r2, #8
 80a89ca:	f109 0901 	add.w	r9, r9, #1
 80a89ce:	dd06      	ble.n	80a89de <__hexnan+0xa0>
 80a89d0:	42bc      	cmp	r4, r7
 80a89d2:	d9cc      	bls.n	80a896e <__hexnan+0x30>
 80a89d4:	2300      	movs	r3, #0
 80a89d6:	f844 3c04 	str.w	r3, [r4, #-4]
 80a89da:	2201      	movs	r2, #1
 80a89dc:	3c04      	subs	r4, #4
 80a89de:	6821      	ldr	r1, [r4, #0]
 80a89e0:	f000 000f 	and.w	r0, r0, #15
 80a89e4:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
 80a89e8:	6020      	str	r0, [r4, #0]
 80a89ea:	e7c0      	b.n	80a896e <__hexnan+0x30>
 80a89ec:	2208      	movs	r2, #8
 80a89ee:	e7be      	b.n	80a896e <__hexnan+0x30>
 80a89f0:	f1b9 0f00 	cmp.w	r9, #0
 80a89f4:	d02b      	beq.n	80a8a4e <__hexnan+0x110>
 80a89f6:	4544      	cmp	r4, r8
 80a89f8:	d205      	bcs.n	80a8a06 <__hexnan+0xc8>
 80a89fa:	2a07      	cmp	r2, #7
 80a89fc:	dc03      	bgt.n	80a8a06 <__hexnan+0xc8>
 80a89fe:	4641      	mov	r1, r8
 80a8a00:	4620      	mov	r0, r4
 80a8a02:	f7ff ff77 	bl	80a88f4 <L_shift>
 80a8a06:	42bc      	cmp	r4, r7
 80a8a08:	d90c      	bls.n	80a8a24 <__hexnan+0xe6>
 80a8a0a:	463b      	mov	r3, r7
 80a8a0c:	f854 2b04 	ldr.w	r2, [r4], #4
 80a8a10:	42a5      	cmp	r5, r4
 80a8a12:	f843 2b04 	str.w	r2, [r3], #4
 80a8a16:	d2f9      	bcs.n	80a8a0c <__hexnan+0xce>
 80a8a18:	2200      	movs	r2, #0
 80a8a1a:	f843 2b04 	str.w	r2, [r3], #4
 80a8a1e:	429d      	cmp	r5, r3
 80a8a20:	d2fb      	bcs.n	80a8a1a <__hexnan+0xdc>
 80a8a22:	e00b      	b.n	80a8a3c <__hexnan+0xfe>
 80a8a24:	9b01      	ldr	r3, [sp, #4]
 80a8a26:	b14b      	cbz	r3, 80a8a3c <__hexnan+0xfe>
 80a8a28:	f1c3 0220 	rsb	r2, r3, #32
 80a8a2c:	f04f 33ff 	mov.w	r3, #4294967295
 80a8a30:	40d3      	lsrs	r3, r2
 80a8a32:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80a8a36:	4013      	ands	r3, r2
 80a8a38:	f846 3c04 	str.w	r3, [r6, #-4]
 80a8a3c:	682b      	ldr	r3, [r5, #0]
 80a8a3e:	b943      	cbnz	r3, 80a8a52 <__hexnan+0x114>
 80a8a40:	42bd      	cmp	r5, r7
 80a8a42:	d102      	bne.n	80a8a4a <__hexnan+0x10c>
 80a8a44:	2301      	movs	r3, #1
 80a8a46:	602b      	str	r3, [r5, #0]
 80a8a48:	e003      	b.n	80a8a52 <__hexnan+0x114>
 80a8a4a:	3d04      	subs	r5, #4
 80a8a4c:	e7f6      	b.n	80a8a3c <__hexnan+0xfe>
 80a8a4e:	2004      	movs	r0, #4
 80a8a50:	e000      	b.n	80a8a54 <__hexnan+0x116>
 80a8a52:	2005      	movs	r0, #5
 80a8a54:	b005      	add	sp, #20
 80a8a56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080a8a5c <_findenv_r>:
 80a8a5c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a8a60:	4607      	mov	r7, r0
 80a8a62:	468b      	mov	fp, r1
 80a8a64:	4690      	mov	r8, r2
 80a8a66:	f000 fcd2 	bl	80a940e <__env_lock>
 80a8a6a:	4b19      	ldr	r3, [pc, #100]	; (80a8ad0 <_findenv_r+0x74>)
 80a8a6c:	681d      	ldr	r5, [r3, #0]
 80a8a6e:	469a      	mov	sl, r3
 80a8a70:	b13d      	cbz	r5, 80a8a82 <_findenv_r+0x26>
 80a8a72:	465c      	mov	r4, fp
 80a8a74:	4623      	mov	r3, r4
 80a8a76:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a8a7a:	b142      	cbz	r2, 80a8a8e <_findenv_r+0x32>
 80a8a7c:	2a3d      	cmp	r2, #61	; 0x3d
 80a8a7e:	461c      	mov	r4, r3
 80a8a80:	d1f8      	bne.n	80a8a74 <_findenv_r+0x18>
 80a8a82:	4638      	mov	r0, r7
 80a8a84:	f000 fcc4 	bl	80a9410 <__env_unlock>
 80a8a88:	2000      	movs	r0, #0
 80a8a8a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a8a8e:	ebcb 0404 	rsb	r4, fp, r4
 80a8a92:	46a9      	mov	r9, r5
 80a8a94:	f859 0b04 	ldr.w	r0, [r9], #4
 80a8a98:	2800      	cmp	r0, #0
 80a8a9a:	d0f2      	beq.n	80a8a82 <_findenv_r+0x26>
 80a8a9c:	4622      	mov	r2, r4
 80a8a9e:	4659      	mov	r1, fp
 80a8aa0:	f7fe fb0e 	bl	80a70c0 <strncmp>
 80a8aa4:	b988      	cbnz	r0, 80a8aca <_findenv_r+0x6e>
 80a8aa6:	f859 3c04 	ldr.w	r3, [r9, #-4]
 80a8aaa:	191e      	adds	r6, r3, r4
 80a8aac:	5d1b      	ldrb	r3, [r3, r4]
 80a8aae:	2b3d      	cmp	r3, #61	; 0x3d
 80a8ab0:	d10b      	bne.n	80a8aca <_findenv_r+0x6e>
 80a8ab2:	f8da 3000 	ldr.w	r3, [sl]
 80a8ab6:	4638      	mov	r0, r7
 80a8ab8:	1aed      	subs	r5, r5, r3
 80a8aba:	10ad      	asrs	r5, r5, #2
 80a8abc:	f8c8 5000 	str.w	r5, [r8]
 80a8ac0:	f000 fca6 	bl	80a9410 <__env_unlock>
 80a8ac4:	1c70      	adds	r0, r6, #1
 80a8ac6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a8aca:	464d      	mov	r5, r9
 80a8acc:	e7e1      	b.n	80a8a92 <_findenv_r+0x36>
 80a8ace:	bf00      	nop
 80a8ad0:	200000f8 	.word	0x200000f8

080a8ad4 <_getenv_r>:
 80a8ad4:	b507      	push	{r0, r1, r2, lr}
 80a8ad6:	aa01      	add	r2, sp, #4
 80a8ad8:	f7ff ffc0 	bl	80a8a5c <_findenv_r>
 80a8adc:	b003      	add	sp, #12
 80a8ade:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a8ae4 <__gettzinfo>:
 80a8ae4:	4800      	ldr	r0, [pc, #0]	; (80a8ae8 <__gettzinfo+0x4>)
 80a8ae6:	4770      	bx	lr
 80a8ae8:	200000b8 	.word	0x200000b8

080a8aec <gmtime_r>:
 80a8aec:	6802      	ldr	r2, [r0, #0]
 80a8aee:	4b46      	ldr	r3, [pc, #280]	; (80a8c08 <gmtime_r+0x11c>)
 80a8af0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a8af2:	fb92 f4f3 	sdiv	r4, r2, r3
 80a8af6:	fb03 2214 	mls	r2, r3, r4, r2
 80a8afa:	2a00      	cmp	r2, #0
 80a8afc:	bfbc      	itt	lt
 80a8afe:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 80a8b02:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 80a8b06:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 80a8b0a:	fb92 f3f0 	sdiv	r3, r2, r0
 80a8b0e:	fb00 2213 	mls	r2, r0, r3, r2
 80a8b12:	f04f 003c 	mov.w	r0, #60	; 0x3c
 80a8b16:	608b      	str	r3, [r1, #8]
 80a8b18:	fb92 f3f0 	sdiv	r3, r2, r0
 80a8b1c:	fb00 2213 	mls	r2, r0, r3, r2
 80a8b20:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
 80a8b24:	bfac      	ite	ge
 80a8b26:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
 80a8b2a:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
 80a8b2e:	604b      	str	r3, [r1, #4]
 80a8b30:	600a      	str	r2, [r1, #0]
 80a8b32:	2307      	movs	r3, #7
 80a8b34:	1ce2      	adds	r2, r4, #3
 80a8b36:	fb92 f3f3 	sdiv	r3, r2, r3
 80a8b3a:	4d34      	ldr	r5, [pc, #208]	; (80a8c0c <gmtime_r+0x120>)
 80a8b3c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a8b40:	fb94 f5f5 	sdiv	r5, r4, r5
 80a8b44:	1ad3      	subs	r3, r2, r3
 80a8b46:	f648 62ac 	movw	r2, #36524	; 0x8eac
 80a8b4a:	f240 57b4 	movw	r7, #1460	; 0x5b4
 80a8b4e:	618b      	str	r3, [r1, #24]
 80a8b50:	4b2f      	ldr	r3, [pc, #188]	; (80a8c10 <gmtime_r+0x124>)
 80a8b52:	4830      	ldr	r0, [pc, #192]	; (80a8c14 <gmtime_r+0x128>)
 80a8b54:	fb03 4405 	mla	r4, r3, r5, r4
 80a8b58:	fbb4 f2f2 	udiv	r2, r4, r2
 80a8b5c:	fbb4 f3f7 	udiv	r3, r4, r7
 80a8b60:	fbb4 f0f0 	udiv	r0, r4, r0
 80a8b64:	4422      	add	r2, r4
 80a8b66:	1ad2      	subs	r2, r2, r3
 80a8b68:	f648 6694 	movw	r6, #36500	; 0x8e94
 80a8b6c:	1a13      	subs	r3, r2, r0
 80a8b6e:	f240 126d 	movw	r2, #365	; 0x16d
 80a8b72:	fbb3 f6f6 	udiv	r6, r3, r6
 80a8b76:	fbb3 f0f2 	udiv	r0, r3, r2
 80a8b7a:	fbb3 f3f7 	udiv	r3, r3, r7
 80a8b7e:	4434      	add	r4, r6
 80a8b80:	1ae3      	subs	r3, r4, r3
 80a8b82:	fb02 3310 	mls	r3, r2, r0, r3
 80a8b86:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80a8b8a:	2499      	movs	r4, #153	; 0x99
 80a8b8c:	3202      	adds	r2, #2
 80a8b8e:	fbb2 f2f4 	udiv	r2, r2, r4
 80a8b92:	4354      	muls	r4, r2
 80a8b94:	1ca6      	adds	r6, r4, #2
 80a8b96:	2405      	movs	r4, #5
 80a8b98:	fbb6 f4f4 	udiv	r4, r6, r4
 80a8b9c:	2a0a      	cmp	r2, #10
 80a8b9e:	bf34      	ite	cc
 80a8ba0:	2602      	movcc	r6, #2
 80a8ba2:	f06f 0609 	mvncs.w	r6, #9
 80a8ba6:	4416      	add	r6, r2
 80a8ba8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80a8bac:	fb02 0505 	mla	r5, r2, r5, r0
 80a8bb0:	1c5f      	adds	r7, r3, #1
 80a8bb2:	2e01      	cmp	r6, #1
 80a8bb4:	bf98      	it	ls
 80a8bb6:	3501      	addls	r5, #1
 80a8bb8:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 80a8bbc:	eba7 0704 	sub.w	r7, r7, r4
 80a8bc0:	d302      	bcc.n	80a8bc8 <gmtime_r+0xdc>
 80a8bc2:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
 80a8bc6:	e014      	b.n	80a8bf2 <gmtime_r+0x106>
 80a8bc8:	0782      	lsls	r2, r0, #30
 80a8bca:	d105      	bne.n	80a8bd8 <gmtime_r+0xec>
 80a8bcc:	2464      	movs	r4, #100	; 0x64
 80a8bce:	fbb0 f2f4 	udiv	r2, r0, r4
 80a8bd2:	fb04 0212 	mls	r2, r4, r2, r0
 80a8bd6:	b94a      	cbnz	r2, 80a8bec <gmtime_r+0x100>
 80a8bd8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80a8bdc:	fbb0 f4f2 	udiv	r4, r0, r2
 80a8be0:	fb02 0014 	mls	r0, r2, r4, r0
 80a8be4:	fab0 f280 	clz	r2, r0
 80a8be8:	0952      	lsrs	r2, r2, #5
 80a8bea:	e000      	b.n	80a8bee <gmtime_r+0x102>
 80a8bec:	2201      	movs	r2, #1
 80a8bee:	333b      	adds	r3, #59	; 0x3b
 80a8bf0:	441a      	add	r2, r3
 80a8bf2:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 80a8bf6:	2300      	movs	r3, #0
 80a8bf8:	61ca      	str	r2, [r1, #28]
 80a8bfa:	614d      	str	r5, [r1, #20]
 80a8bfc:	610e      	str	r6, [r1, #16]
 80a8bfe:	60cf      	str	r7, [r1, #12]
 80a8c00:	620b      	str	r3, [r1, #32]
 80a8c02:	4608      	mov	r0, r1
 80a8c04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a8c06:	bf00      	nop
 80a8c08:	00015180 	.word	0x00015180
 80a8c0c:	00023ab1 	.word	0x00023ab1
 80a8c10:	fffdc54f 	.word	0xfffdc54f
 80a8c14:	00023ab0 	.word	0x00023ab0

080a8c18 <labs>:
 80a8c18:	2800      	cmp	r0, #0
 80a8c1a:	bfb8      	it	lt
 80a8c1c:	4240      	neglt	r0, r0
 80a8c1e:	4770      	bx	lr

080a8c20 <_Balloc>:
 80a8c20:	b570      	push	{r4, r5, r6, lr}
 80a8c22:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80a8c24:	4604      	mov	r4, r0
 80a8c26:	460e      	mov	r6, r1
 80a8c28:	b93d      	cbnz	r5, 80a8c3a <_Balloc+0x1a>
 80a8c2a:	2010      	movs	r0, #16
 80a8c2c:	f7fa fb24 	bl	80a3278 <malloc>
 80a8c30:	6260      	str	r0, [r4, #36]	; 0x24
 80a8c32:	6045      	str	r5, [r0, #4]
 80a8c34:	6085      	str	r5, [r0, #8]
 80a8c36:	6005      	str	r5, [r0, #0]
 80a8c38:	60c5      	str	r5, [r0, #12]
 80a8c3a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80a8c3c:	68eb      	ldr	r3, [r5, #12]
 80a8c3e:	b143      	cbz	r3, 80a8c52 <_Balloc+0x32>
 80a8c40:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80a8c42:	68db      	ldr	r3, [r3, #12]
 80a8c44:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80a8c48:	b178      	cbz	r0, 80a8c6a <_Balloc+0x4a>
 80a8c4a:	6802      	ldr	r2, [r0, #0]
 80a8c4c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80a8c50:	e017      	b.n	80a8c82 <_Balloc+0x62>
 80a8c52:	2221      	movs	r2, #33	; 0x21
 80a8c54:	2104      	movs	r1, #4
 80a8c56:	4620      	mov	r0, r4
 80a8c58:	f000 fbcb 	bl	80a93f2 <_calloc_r>
 80a8c5c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80a8c5e:	60e8      	str	r0, [r5, #12]
 80a8c60:	68db      	ldr	r3, [r3, #12]
 80a8c62:	2b00      	cmp	r3, #0
 80a8c64:	d1ec      	bne.n	80a8c40 <_Balloc+0x20>
 80a8c66:	2000      	movs	r0, #0
 80a8c68:	bd70      	pop	{r4, r5, r6, pc}
 80a8c6a:	2101      	movs	r1, #1
 80a8c6c:	fa01 f506 	lsl.w	r5, r1, r6
 80a8c70:	1d6a      	adds	r2, r5, #5
 80a8c72:	0092      	lsls	r2, r2, #2
 80a8c74:	4620      	mov	r0, r4
 80a8c76:	f000 fbbc 	bl	80a93f2 <_calloc_r>
 80a8c7a:	2800      	cmp	r0, #0
 80a8c7c:	d0f3      	beq.n	80a8c66 <_Balloc+0x46>
 80a8c7e:	6046      	str	r6, [r0, #4]
 80a8c80:	6085      	str	r5, [r0, #8]
 80a8c82:	2300      	movs	r3, #0
 80a8c84:	6103      	str	r3, [r0, #16]
 80a8c86:	60c3      	str	r3, [r0, #12]
 80a8c88:	bd70      	pop	{r4, r5, r6, pc}

080a8c8a <_Bfree>:
 80a8c8a:	b570      	push	{r4, r5, r6, lr}
 80a8c8c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80a8c8e:	4606      	mov	r6, r0
 80a8c90:	460d      	mov	r5, r1
 80a8c92:	b93c      	cbnz	r4, 80a8ca4 <_Bfree+0x1a>
 80a8c94:	2010      	movs	r0, #16
 80a8c96:	f7fa faef 	bl	80a3278 <malloc>
 80a8c9a:	6270      	str	r0, [r6, #36]	; 0x24
 80a8c9c:	6044      	str	r4, [r0, #4]
 80a8c9e:	6084      	str	r4, [r0, #8]
 80a8ca0:	6004      	str	r4, [r0, #0]
 80a8ca2:	60c4      	str	r4, [r0, #12]
 80a8ca4:	b13d      	cbz	r5, 80a8cb6 <_Bfree+0x2c>
 80a8ca6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80a8ca8:	686a      	ldr	r2, [r5, #4]
 80a8caa:	68db      	ldr	r3, [r3, #12]
 80a8cac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80a8cb0:	6029      	str	r1, [r5, #0]
 80a8cb2:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80a8cb6:	bd70      	pop	{r4, r5, r6, pc}

080a8cb8 <__multadd>:
 80a8cb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a8cbc:	4606      	mov	r6, r0
 80a8cbe:	460c      	mov	r4, r1
 80a8cc0:	690d      	ldr	r5, [r1, #16]
 80a8cc2:	461f      	mov	r7, r3
 80a8cc4:	f101 0e14 	add.w	lr, r1, #20
 80a8cc8:	2300      	movs	r3, #0
 80a8cca:	f8de 0000 	ldr.w	r0, [lr]
 80a8cce:	3301      	adds	r3, #1
 80a8cd0:	b281      	uxth	r1, r0
 80a8cd2:	fb02 7101 	mla	r1, r2, r1, r7
 80a8cd6:	0c00      	lsrs	r0, r0, #16
 80a8cd8:	0c0f      	lsrs	r7, r1, #16
 80a8cda:	fb02 7000 	mla	r0, r2, r0, r7
 80a8cde:	b289      	uxth	r1, r1
 80a8ce0:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80a8ce4:	429d      	cmp	r5, r3
 80a8ce6:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80a8cea:	f84e 1b04 	str.w	r1, [lr], #4
 80a8cee:	dcec      	bgt.n	80a8cca <__multadd+0x12>
 80a8cf0:	b1d7      	cbz	r7, 80a8d28 <__multadd+0x70>
 80a8cf2:	68a3      	ldr	r3, [r4, #8]
 80a8cf4:	429d      	cmp	r5, r3
 80a8cf6:	db12      	blt.n	80a8d1e <__multadd+0x66>
 80a8cf8:	6861      	ldr	r1, [r4, #4]
 80a8cfa:	4630      	mov	r0, r6
 80a8cfc:	3101      	adds	r1, #1
 80a8cfe:	f7ff ff8f 	bl	80a8c20 <_Balloc>
 80a8d02:	4680      	mov	r8, r0
 80a8d04:	6922      	ldr	r2, [r4, #16]
 80a8d06:	f104 010c 	add.w	r1, r4, #12
 80a8d0a:	3202      	adds	r2, #2
 80a8d0c:	0092      	lsls	r2, r2, #2
 80a8d0e:	300c      	adds	r0, #12
 80a8d10:	f7fd fc6c 	bl	80a65ec <memcpy>
 80a8d14:	4621      	mov	r1, r4
 80a8d16:	4630      	mov	r0, r6
 80a8d18:	f7ff ffb7 	bl	80a8c8a <_Bfree>
 80a8d1c:	4644      	mov	r4, r8
 80a8d1e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80a8d22:	3501      	adds	r5, #1
 80a8d24:	615f      	str	r7, [r3, #20]
 80a8d26:	6125      	str	r5, [r4, #16]
 80a8d28:	4620      	mov	r0, r4
 80a8d2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a8d2e <__s2b>:
 80a8d2e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a8d32:	4606      	mov	r6, r0
 80a8d34:	4615      	mov	r5, r2
 80a8d36:	461f      	mov	r7, r3
 80a8d38:	2209      	movs	r2, #9
 80a8d3a:	3308      	adds	r3, #8
 80a8d3c:	460c      	mov	r4, r1
 80a8d3e:	fb93 f3f2 	sdiv	r3, r3, r2
 80a8d42:	2100      	movs	r1, #0
 80a8d44:	2201      	movs	r2, #1
 80a8d46:	429a      	cmp	r2, r3
 80a8d48:	da02      	bge.n	80a8d50 <__s2b+0x22>
 80a8d4a:	0052      	lsls	r2, r2, #1
 80a8d4c:	3101      	adds	r1, #1
 80a8d4e:	e7fa      	b.n	80a8d46 <__s2b+0x18>
 80a8d50:	4630      	mov	r0, r6
 80a8d52:	f7ff ff65 	bl	80a8c20 <_Balloc>
 80a8d56:	9b08      	ldr	r3, [sp, #32]
 80a8d58:	2d09      	cmp	r5, #9
 80a8d5a:	6143      	str	r3, [r0, #20]
 80a8d5c:	f04f 0301 	mov.w	r3, #1
 80a8d60:	6103      	str	r3, [r0, #16]
 80a8d62:	dd11      	ble.n	80a8d88 <__s2b+0x5a>
 80a8d64:	f104 0809 	add.w	r8, r4, #9
 80a8d68:	46c1      	mov	r9, r8
 80a8d6a:	442c      	add	r4, r5
 80a8d6c:	f819 3b01 	ldrb.w	r3, [r9], #1
 80a8d70:	4601      	mov	r1, r0
 80a8d72:	3b30      	subs	r3, #48	; 0x30
 80a8d74:	220a      	movs	r2, #10
 80a8d76:	4630      	mov	r0, r6
 80a8d78:	f7ff ff9e 	bl	80a8cb8 <__multadd>
 80a8d7c:	45a1      	cmp	r9, r4
 80a8d7e:	d1f5      	bne.n	80a8d6c <__s2b+0x3e>
 80a8d80:	eb08 0405 	add.w	r4, r8, r5
 80a8d84:	3c08      	subs	r4, #8
 80a8d86:	e001      	b.n	80a8d8c <__s2b+0x5e>
 80a8d88:	340a      	adds	r4, #10
 80a8d8a:	2509      	movs	r5, #9
 80a8d8c:	1b2d      	subs	r5, r5, r4
 80a8d8e:	1963      	adds	r3, r4, r5
 80a8d90:	429f      	cmp	r7, r3
 80a8d92:	dd08      	ble.n	80a8da6 <__s2b+0x78>
 80a8d94:	f814 3b01 	ldrb.w	r3, [r4], #1
 80a8d98:	4601      	mov	r1, r0
 80a8d9a:	3b30      	subs	r3, #48	; 0x30
 80a8d9c:	220a      	movs	r2, #10
 80a8d9e:	4630      	mov	r0, r6
 80a8da0:	f7ff ff8a 	bl	80a8cb8 <__multadd>
 80a8da4:	e7f3      	b.n	80a8d8e <__s2b+0x60>
 80a8da6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080a8daa <__hi0bits>:
 80a8daa:	0c03      	lsrs	r3, r0, #16
 80a8dac:	041b      	lsls	r3, r3, #16
 80a8dae:	b913      	cbnz	r3, 80a8db6 <__hi0bits+0xc>
 80a8db0:	0400      	lsls	r0, r0, #16
 80a8db2:	2310      	movs	r3, #16
 80a8db4:	e000      	b.n	80a8db8 <__hi0bits+0xe>
 80a8db6:	2300      	movs	r3, #0
 80a8db8:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80a8dbc:	bf04      	itt	eq
 80a8dbe:	0200      	lsleq	r0, r0, #8
 80a8dc0:	3308      	addeq	r3, #8
 80a8dc2:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80a8dc6:	bf04      	itt	eq
 80a8dc8:	0100      	lsleq	r0, r0, #4
 80a8dca:	3304      	addeq	r3, #4
 80a8dcc:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80a8dd0:	bf04      	itt	eq
 80a8dd2:	0080      	lsleq	r0, r0, #2
 80a8dd4:	3302      	addeq	r3, #2
 80a8dd6:	2800      	cmp	r0, #0
 80a8dd8:	db03      	blt.n	80a8de2 <__hi0bits+0x38>
 80a8dda:	0042      	lsls	r2, r0, #1
 80a8ddc:	d503      	bpl.n	80a8de6 <__hi0bits+0x3c>
 80a8dde:	1c58      	adds	r0, r3, #1
 80a8de0:	4770      	bx	lr
 80a8de2:	4618      	mov	r0, r3
 80a8de4:	4770      	bx	lr
 80a8de6:	2020      	movs	r0, #32
 80a8de8:	4770      	bx	lr

080a8dea <__lo0bits>:
 80a8dea:	6803      	ldr	r3, [r0, #0]
 80a8dec:	f013 0207 	ands.w	r2, r3, #7
 80a8df0:	d00b      	beq.n	80a8e0a <__lo0bits+0x20>
 80a8df2:	07d9      	lsls	r1, r3, #31
 80a8df4:	d422      	bmi.n	80a8e3c <__lo0bits+0x52>
 80a8df6:	079a      	lsls	r2, r3, #30
 80a8df8:	bf4b      	itete	mi
 80a8dfa:	085b      	lsrmi	r3, r3, #1
 80a8dfc:	089b      	lsrpl	r3, r3, #2
 80a8dfe:	6003      	strmi	r3, [r0, #0]
 80a8e00:	6003      	strpl	r3, [r0, #0]
 80a8e02:	bf4c      	ite	mi
 80a8e04:	2001      	movmi	r0, #1
 80a8e06:	2002      	movpl	r0, #2
 80a8e08:	4770      	bx	lr
 80a8e0a:	b299      	uxth	r1, r3
 80a8e0c:	b909      	cbnz	r1, 80a8e12 <__lo0bits+0x28>
 80a8e0e:	0c1b      	lsrs	r3, r3, #16
 80a8e10:	2210      	movs	r2, #16
 80a8e12:	f013 0fff 	tst.w	r3, #255	; 0xff
 80a8e16:	bf04      	itt	eq
 80a8e18:	0a1b      	lsreq	r3, r3, #8
 80a8e1a:	3208      	addeq	r2, #8
 80a8e1c:	0719      	lsls	r1, r3, #28
 80a8e1e:	bf04      	itt	eq
 80a8e20:	091b      	lsreq	r3, r3, #4
 80a8e22:	3204      	addeq	r2, #4
 80a8e24:	0799      	lsls	r1, r3, #30
 80a8e26:	bf04      	itt	eq
 80a8e28:	089b      	lsreq	r3, r3, #2
 80a8e2a:	3202      	addeq	r2, #2
 80a8e2c:	07d9      	lsls	r1, r3, #31
 80a8e2e:	d402      	bmi.n	80a8e36 <__lo0bits+0x4c>
 80a8e30:	085b      	lsrs	r3, r3, #1
 80a8e32:	d005      	beq.n	80a8e40 <__lo0bits+0x56>
 80a8e34:	3201      	adds	r2, #1
 80a8e36:	6003      	str	r3, [r0, #0]
 80a8e38:	4610      	mov	r0, r2
 80a8e3a:	4770      	bx	lr
 80a8e3c:	2000      	movs	r0, #0
 80a8e3e:	4770      	bx	lr
 80a8e40:	2020      	movs	r0, #32
 80a8e42:	4770      	bx	lr

080a8e44 <__i2b>:
 80a8e44:	b510      	push	{r4, lr}
 80a8e46:	460c      	mov	r4, r1
 80a8e48:	2101      	movs	r1, #1
 80a8e4a:	f7ff fee9 	bl	80a8c20 <_Balloc>
 80a8e4e:	2201      	movs	r2, #1
 80a8e50:	6144      	str	r4, [r0, #20]
 80a8e52:	6102      	str	r2, [r0, #16]
 80a8e54:	bd10      	pop	{r4, pc}

080a8e56 <__multiply>:
 80a8e56:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a8e5a:	4614      	mov	r4, r2
 80a8e5c:	690a      	ldr	r2, [r1, #16]
 80a8e5e:	6923      	ldr	r3, [r4, #16]
 80a8e60:	4688      	mov	r8, r1
 80a8e62:	429a      	cmp	r2, r3
 80a8e64:	bfbe      	ittt	lt
 80a8e66:	460b      	movlt	r3, r1
 80a8e68:	46a0      	movlt	r8, r4
 80a8e6a:	461c      	movlt	r4, r3
 80a8e6c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80a8e70:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80a8e74:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80a8e78:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80a8e7c:	eb07 0609 	add.w	r6, r7, r9
 80a8e80:	429e      	cmp	r6, r3
 80a8e82:	bfc8      	it	gt
 80a8e84:	3101      	addgt	r1, #1
 80a8e86:	f7ff fecb 	bl	80a8c20 <_Balloc>
 80a8e8a:	f100 0514 	add.w	r5, r0, #20
 80a8e8e:	462b      	mov	r3, r5
 80a8e90:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
 80a8e94:	2200      	movs	r2, #0
 80a8e96:	4563      	cmp	r3, ip
 80a8e98:	d202      	bcs.n	80a8ea0 <__multiply+0x4a>
 80a8e9a:	f843 2b04 	str.w	r2, [r3], #4
 80a8e9e:	e7fa      	b.n	80a8e96 <__multiply+0x40>
 80a8ea0:	f104 0214 	add.w	r2, r4, #20
 80a8ea4:	f108 0114 	add.w	r1, r8, #20
 80a8ea8:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80a8eac:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80a8eb0:	9300      	str	r3, [sp, #0]
 80a8eb2:	9b00      	ldr	r3, [sp, #0]
 80a8eb4:	9201      	str	r2, [sp, #4]
 80a8eb6:	4293      	cmp	r3, r2
 80a8eb8:	d957      	bls.n	80a8f6a <__multiply+0x114>
 80a8eba:	f8b2 b000 	ldrh.w	fp, [r2]
 80a8ebe:	f1bb 0f00 	cmp.w	fp, #0
 80a8ec2:	d023      	beq.n	80a8f0c <__multiply+0xb6>
 80a8ec4:	4689      	mov	r9, r1
 80a8ec6:	46ae      	mov	lr, r5
 80a8ec8:	f04f 0800 	mov.w	r8, #0
 80a8ecc:	f859 4b04 	ldr.w	r4, [r9], #4
 80a8ed0:	f8be a000 	ldrh.w	sl, [lr]
 80a8ed4:	b2a3      	uxth	r3, r4
 80a8ed6:	fb0b a303 	mla	r3, fp, r3, sl
 80a8eda:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80a8ede:	f8de 4000 	ldr.w	r4, [lr]
 80a8ee2:	4443      	add	r3, r8
 80a8ee4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80a8ee8:	fb0b 840a 	mla	r4, fp, sl, r8
 80a8eec:	46f2      	mov	sl, lr
 80a8eee:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80a8ef2:	b29b      	uxth	r3, r3
 80a8ef4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80a8ef8:	454f      	cmp	r7, r9
 80a8efa:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80a8efe:	f84a 3b04 	str.w	r3, [sl], #4
 80a8f02:	d901      	bls.n	80a8f08 <__multiply+0xb2>
 80a8f04:	46d6      	mov	lr, sl
 80a8f06:	e7e1      	b.n	80a8ecc <__multiply+0x76>
 80a8f08:	f8ce 8004 	str.w	r8, [lr, #4]
 80a8f0c:	9b01      	ldr	r3, [sp, #4]
 80a8f0e:	3204      	adds	r2, #4
 80a8f10:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80a8f14:	f1ba 0f00 	cmp.w	sl, #0
 80a8f18:	d021      	beq.n	80a8f5e <__multiply+0x108>
 80a8f1a:	462c      	mov	r4, r5
 80a8f1c:	4689      	mov	r9, r1
 80a8f1e:	682b      	ldr	r3, [r5, #0]
 80a8f20:	f04f 0800 	mov.w	r8, #0
 80a8f24:	f8b9 e000 	ldrh.w	lr, [r9]
 80a8f28:	f8b4 b002 	ldrh.w	fp, [r4, #2]
 80a8f2c:	b29b      	uxth	r3, r3
 80a8f2e:	fb0a be0e 	mla	lr, sl, lr, fp
 80a8f32:	46a3      	mov	fp, r4
 80a8f34:	44f0      	add	r8, lr
 80a8f36:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80a8f3a:	f84b 3b04 	str.w	r3, [fp], #4
 80a8f3e:	f859 3b04 	ldr.w	r3, [r9], #4
 80a8f42:	f8b4 e004 	ldrh.w	lr, [r4, #4]
 80a8f46:	0c1b      	lsrs	r3, r3, #16
 80a8f48:	fb0a e303 	mla	r3, sl, r3, lr
 80a8f4c:	454f      	cmp	r7, r9
 80a8f4e:	eb03 4318 	add.w	r3, r3, r8, lsr #16
 80a8f52:	ea4f 4813 	mov.w	r8, r3, lsr #16
 80a8f56:	d901      	bls.n	80a8f5c <__multiply+0x106>
 80a8f58:	465c      	mov	r4, fp
 80a8f5a:	e7e3      	b.n	80a8f24 <__multiply+0xce>
 80a8f5c:	6063      	str	r3, [r4, #4]
 80a8f5e:	3504      	adds	r5, #4
 80a8f60:	e7a7      	b.n	80a8eb2 <__multiply+0x5c>
 80a8f62:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
 80a8f66:	b913      	cbnz	r3, 80a8f6e <__multiply+0x118>
 80a8f68:	3e01      	subs	r6, #1
 80a8f6a:	2e00      	cmp	r6, #0
 80a8f6c:	dcf9      	bgt.n	80a8f62 <__multiply+0x10c>
 80a8f6e:	6106      	str	r6, [r0, #16]
 80a8f70:	b003      	add	sp, #12
 80a8f72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080a8f78 <__pow5mult>:
 80a8f78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a8f7c:	4615      	mov	r5, r2
 80a8f7e:	f012 0203 	ands.w	r2, r2, #3
 80a8f82:	4606      	mov	r6, r0
 80a8f84:	460f      	mov	r7, r1
 80a8f86:	d007      	beq.n	80a8f98 <__pow5mult+0x20>
 80a8f88:	4c21      	ldr	r4, [pc, #132]	; (80a9010 <__pow5mult+0x98>)
 80a8f8a:	3a01      	subs	r2, #1
 80a8f8c:	2300      	movs	r3, #0
 80a8f8e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80a8f92:	f7ff fe91 	bl	80a8cb8 <__multadd>
 80a8f96:	4607      	mov	r7, r0
 80a8f98:	10ad      	asrs	r5, r5, #2
 80a8f9a:	d036      	beq.n	80a900a <__pow5mult+0x92>
 80a8f9c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80a8f9e:	b93c      	cbnz	r4, 80a8fb0 <__pow5mult+0x38>
 80a8fa0:	2010      	movs	r0, #16
 80a8fa2:	f7fa f969 	bl	80a3278 <malloc>
 80a8fa6:	6270      	str	r0, [r6, #36]	; 0x24
 80a8fa8:	6044      	str	r4, [r0, #4]
 80a8faa:	6084      	str	r4, [r0, #8]
 80a8fac:	6004      	str	r4, [r0, #0]
 80a8fae:	60c4      	str	r4, [r0, #12]
 80a8fb0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80a8fb4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80a8fb8:	b94c      	cbnz	r4, 80a8fce <__pow5mult+0x56>
 80a8fba:	f240 2171 	movw	r1, #625	; 0x271
 80a8fbe:	4630      	mov	r0, r6
 80a8fc0:	f7ff ff40 	bl	80a8e44 <__i2b>
 80a8fc4:	4604      	mov	r4, r0
 80a8fc6:	2300      	movs	r3, #0
 80a8fc8:	f8c8 0008 	str.w	r0, [r8, #8]
 80a8fcc:	6003      	str	r3, [r0, #0]
 80a8fce:	f04f 0800 	mov.w	r8, #0
 80a8fd2:	07eb      	lsls	r3, r5, #31
 80a8fd4:	d50a      	bpl.n	80a8fec <__pow5mult+0x74>
 80a8fd6:	4639      	mov	r1, r7
 80a8fd8:	4622      	mov	r2, r4
 80a8fda:	4630      	mov	r0, r6
 80a8fdc:	f7ff ff3b 	bl	80a8e56 <__multiply>
 80a8fe0:	4681      	mov	r9, r0
 80a8fe2:	4639      	mov	r1, r7
 80a8fe4:	4630      	mov	r0, r6
 80a8fe6:	f7ff fe50 	bl	80a8c8a <_Bfree>
 80a8fea:	464f      	mov	r7, r9
 80a8fec:	106d      	asrs	r5, r5, #1
 80a8fee:	d00c      	beq.n	80a900a <__pow5mult+0x92>
 80a8ff0:	6820      	ldr	r0, [r4, #0]
 80a8ff2:	b108      	cbz	r0, 80a8ff8 <__pow5mult+0x80>
 80a8ff4:	4604      	mov	r4, r0
 80a8ff6:	e7ec      	b.n	80a8fd2 <__pow5mult+0x5a>
 80a8ff8:	4622      	mov	r2, r4
 80a8ffa:	4621      	mov	r1, r4
 80a8ffc:	4630      	mov	r0, r6
 80a8ffe:	f7ff ff2a 	bl	80a8e56 <__multiply>
 80a9002:	6020      	str	r0, [r4, #0]
 80a9004:	f8c0 8000 	str.w	r8, [r0]
 80a9008:	e7f4      	b.n	80a8ff4 <__pow5mult+0x7c>
 80a900a:	4638      	mov	r0, r7
 80a900c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a9010:	080aa2c8 	.word	0x080aa2c8

080a9014 <__lshift>:
 80a9014:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a9018:	460c      	mov	r4, r1
 80a901a:	4607      	mov	r7, r0
 80a901c:	4691      	mov	r9, r2
 80a901e:	6926      	ldr	r6, [r4, #16]
 80a9020:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80a9024:	4456      	add	r6, sl
 80a9026:	6849      	ldr	r1, [r1, #4]
 80a9028:	68a3      	ldr	r3, [r4, #8]
 80a902a:	1c75      	adds	r5, r6, #1
 80a902c:	42ab      	cmp	r3, r5
 80a902e:	da02      	bge.n	80a9036 <__lshift+0x22>
 80a9030:	3101      	adds	r1, #1
 80a9032:	005b      	lsls	r3, r3, #1
 80a9034:	e7fa      	b.n	80a902c <__lshift+0x18>
 80a9036:	4638      	mov	r0, r7
 80a9038:	f7ff fdf2 	bl	80a8c20 <_Balloc>
 80a903c:	2300      	movs	r3, #0
 80a903e:	4680      	mov	r8, r0
 80a9040:	461a      	mov	r2, r3
 80a9042:	f100 0114 	add.w	r1, r0, #20
 80a9046:	4553      	cmp	r3, sl
 80a9048:	da03      	bge.n	80a9052 <__lshift+0x3e>
 80a904a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80a904e:	3301      	adds	r3, #1
 80a9050:	e7f9      	b.n	80a9046 <__lshift+0x32>
 80a9052:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
 80a9056:	6920      	ldr	r0, [r4, #16]
 80a9058:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80a905c:	f019 091f 	ands.w	r9, r9, #31
 80a9060:	f104 0114 	add.w	r1, r4, #20
 80a9064:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 80a9068:	d014      	beq.n	80a9094 <__lshift+0x80>
 80a906a:	f1c9 0c20 	rsb	ip, r9, #32
 80a906e:	2200      	movs	r2, #0
 80a9070:	6808      	ldr	r0, [r1, #0]
 80a9072:	469a      	mov	sl, r3
 80a9074:	fa00 f009 	lsl.w	r0, r0, r9
 80a9078:	4302      	orrs	r2, r0
 80a907a:	f843 2b04 	str.w	r2, [r3], #4
 80a907e:	f851 2b04 	ldr.w	r2, [r1], #4
 80a9082:	458e      	cmp	lr, r1
 80a9084:	fa22 f20c 	lsr.w	r2, r2, ip
 80a9088:	d8f2      	bhi.n	80a9070 <__lshift+0x5c>
 80a908a:	f8ca 2004 	str.w	r2, [sl, #4]
 80a908e:	b142      	cbz	r2, 80a90a2 <__lshift+0x8e>
 80a9090:	1cb5      	adds	r5, r6, #2
 80a9092:	e006      	b.n	80a90a2 <__lshift+0x8e>
 80a9094:	3b04      	subs	r3, #4
 80a9096:	f851 2b04 	ldr.w	r2, [r1], #4
 80a909a:	458e      	cmp	lr, r1
 80a909c:	f843 2f04 	str.w	r2, [r3, #4]!
 80a90a0:	d8f9      	bhi.n	80a9096 <__lshift+0x82>
 80a90a2:	3d01      	subs	r5, #1
 80a90a4:	4638      	mov	r0, r7
 80a90a6:	f8c8 5010 	str.w	r5, [r8, #16]
 80a90aa:	4621      	mov	r1, r4
 80a90ac:	f7ff fded 	bl	80a8c8a <_Bfree>
 80a90b0:	4640      	mov	r0, r8
 80a90b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080a90b6 <__mcmp>:
 80a90b6:	6903      	ldr	r3, [r0, #16]
 80a90b8:	690a      	ldr	r2, [r1, #16]
 80a90ba:	b510      	push	{r4, lr}
 80a90bc:	1a9b      	subs	r3, r3, r2
 80a90be:	d111      	bne.n	80a90e4 <__mcmp+0x2e>
 80a90c0:	0092      	lsls	r2, r2, #2
 80a90c2:	3014      	adds	r0, #20
 80a90c4:	3114      	adds	r1, #20
 80a90c6:	1883      	adds	r3, r0, r2
 80a90c8:	440a      	add	r2, r1
 80a90ca:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 80a90ce:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80a90d2:	428c      	cmp	r4, r1
 80a90d4:	d002      	beq.n	80a90dc <__mcmp+0x26>
 80a90d6:	d307      	bcc.n	80a90e8 <__mcmp+0x32>
 80a90d8:	2001      	movs	r0, #1
 80a90da:	bd10      	pop	{r4, pc}
 80a90dc:	4298      	cmp	r0, r3
 80a90de:	d3f4      	bcc.n	80a90ca <__mcmp+0x14>
 80a90e0:	2000      	movs	r0, #0
 80a90e2:	bd10      	pop	{r4, pc}
 80a90e4:	4618      	mov	r0, r3
 80a90e6:	bd10      	pop	{r4, pc}
 80a90e8:	f04f 30ff 	mov.w	r0, #4294967295
 80a90ec:	bd10      	pop	{r4, pc}

080a90ee <__mdiff>:
 80a90ee:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a90f2:	460c      	mov	r4, r1
 80a90f4:	4607      	mov	r7, r0
 80a90f6:	4611      	mov	r1, r2
 80a90f8:	4620      	mov	r0, r4
 80a90fa:	4615      	mov	r5, r2
 80a90fc:	f7ff ffdb 	bl	80a90b6 <__mcmp>
 80a9100:	1e06      	subs	r6, r0, #0
 80a9102:	d108      	bne.n	80a9116 <__mdiff+0x28>
 80a9104:	4631      	mov	r1, r6
 80a9106:	4638      	mov	r0, r7
 80a9108:	f7ff fd8a 	bl	80a8c20 <_Balloc>
 80a910c:	2301      	movs	r3, #1
 80a910e:	6103      	str	r3, [r0, #16]
 80a9110:	6146      	str	r6, [r0, #20]
 80a9112:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a9116:	bfbc      	itt	lt
 80a9118:	4623      	movlt	r3, r4
 80a911a:	462c      	movlt	r4, r5
 80a911c:	4638      	mov	r0, r7
 80a911e:	6861      	ldr	r1, [r4, #4]
 80a9120:	bfba      	itte	lt
 80a9122:	461d      	movlt	r5, r3
 80a9124:	2601      	movlt	r6, #1
 80a9126:	2600      	movge	r6, #0
 80a9128:	f7ff fd7a 	bl	80a8c20 <_Balloc>
 80a912c:	692b      	ldr	r3, [r5, #16]
 80a912e:	60c6      	str	r6, [r0, #12]
 80a9130:	6926      	ldr	r6, [r4, #16]
 80a9132:	f105 0914 	add.w	r9, r5, #20
 80a9136:	f104 0114 	add.w	r1, r4, #20
 80a913a:	eb01 0786 	add.w	r7, r1, r6, lsl #2
 80a913e:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80a9142:	f100 0514 	add.w	r5, r0, #20
 80a9146:	f04f 0c00 	mov.w	ip, #0
 80a914a:	f851 2b04 	ldr.w	r2, [r1], #4
 80a914e:	f859 4b04 	ldr.w	r4, [r9], #4
 80a9152:	b293      	uxth	r3, r2
 80a9154:	449c      	add	ip, r3
 80a9156:	b2a3      	uxth	r3, r4
 80a9158:	0c24      	lsrs	r4, r4, #16
 80a915a:	ebc3 030c 	rsb	r3, r3, ip
 80a915e:	ebc4 4212 	rsb	r2, r4, r2, lsr #16
 80a9162:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80a9166:	b29b      	uxth	r3, r3
 80a9168:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80a916c:	45c8      	cmp	r8, r9
 80a916e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a9172:	468e      	mov	lr, r1
 80a9174:	f845 2b04 	str.w	r2, [r5], #4
 80a9178:	d8e7      	bhi.n	80a914a <__mdiff+0x5c>
 80a917a:	45be      	cmp	lr, r7
 80a917c:	d20e      	bcs.n	80a919c <__mdiff+0xae>
 80a917e:	f85e 1b04 	ldr.w	r1, [lr], #4
 80a9182:	b28a      	uxth	r2, r1
 80a9184:	4462      	add	r2, ip
 80a9186:	1413      	asrs	r3, r2, #16
 80a9188:	eb03 4311 	add.w	r3, r3, r1, lsr #16
 80a918c:	b292      	uxth	r2, r2
 80a918e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80a9192:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80a9196:	f845 2b04 	str.w	r2, [r5], #4
 80a919a:	e7ee      	b.n	80a917a <__mdiff+0x8c>
 80a919c:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80a91a0:	b90b      	cbnz	r3, 80a91a6 <__mdiff+0xb8>
 80a91a2:	3e01      	subs	r6, #1
 80a91a4:	e7fa      	b.n	80a919c <__mdiff+0xae>
 80a91a6:	6106      	str	r6, [r0, #16]
 80a91a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080a91ac <__ulp>:
 80a91ac:	4b10      	ldr	r3, [pc, #64]	; (80a91f0 <__ulp+0x44>)
 80a91ae:	400b      	ands	r3, r1
 80a91b0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80a91b4:	2b00      	cmp	r3, #0
 80a91b6:	dd02      	ble.n	80a91be <__ulp+0x12>
 80a91b8:	2000      	movs	r0, #0
 80a91ba:	4619      	mov	r1, r3
 80a91bc:	4770      	bx	lr
 80a91be:	425b      	negs	r3, r3
 80a91c0:	151b      	asrs	r3, r3, #20
 80a91c2:	2b13      	cmp	r3, #19
 80a91c4:	f04f 0000 	mov.w	r0, #0
 80a91c8:	f04f 0100 	mov.w	r1, #0
 80a91cc:	dc04      	bgt.n	80a91d8 <__ulp+0x2c>
 80a91ce:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80a91d2:	fa42 f103 	asr.w	r1, r2, r3
 80a91d6:	4770      	bx	lr
 80a91d8:	3b14      	subs	r3, #20
 80a91da:	2b1e      	cmp	r3, #30
 80a91dc:	f04f 0201 	mov.w	r2, #1
 80a91e0:	bfce      	itee	gt
 80a91e2:	4613      	movgt	r3, r2
 80a91e4:	f1c3 031f 	rsble	r3, r3, #31
 80a91e8:	fa02 f303 	lslle.w	r3, r2, r3
 80a91ec:	4618      	mov	r0, r3
 80a91ee:	4770      	bx	lr
 80a91f0:	7ff00000 	.word	0x7ff00000

080a91f4 <__b2d>:
 80a91f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a91f6:	6905      	ldr	r5, [r0, #16]
 80a91f8:	f100 0614 	add.w	r6, r0, #20
 80a91fc:	eb06 0585 	add.w	r5, r6, r5, lsl #2
 80a9200:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80a9204:	1f2f      	subs	r7, r5, #4
 80a9206:	4620      	mov	r0, r4
 80a9208:	f7ff fdcf 	bl	80a8daa <__hi0bits>
 80a920c:	f1c0 0320 	rsb	r3, r0, #32
 80a9210:	280a      	cmp	r0, #10
 80a9212:	600b      	str	r3, [r1, #0]
 80a9214:	dc14      	bgt.n	80a9240 <__b2d+0x4c>
 80a9216:	f1c0 0e0b 	rsb	lr, r0, #11
 80a921a:	fa24 f10e 	lsr.w	r1, r4, lr
 80a921e:	42be      	cmp	r6, r7
 80a9220:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
 80a9224:	bf34      	ite	cc
 80a9226:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80a922a:	2100      	movcs	r1, #0
 80a922c:	3015      	adds	r0, #21
 80a922e:	fa04 f000 	lsl.w	r0, r4, r0
 80a9232:	fa21 f10e 	lsr.w	r1, r1, lr
 80a9236:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80a923a:	ea40 0201 	orr.w	r2, r0, r1
 80a923e:	e023      	b.n	80a9288 <__b2d+0x94>
 80a9240:	42be      	cmp	r6, r7
 80a9242:	bf3a      	itte	cc
 80a9244:	f1a5 0708 	subcc.w	r7, r5, #8
 80a9248:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80a924c:	2100      	movcs	r1, #0
 80a924e:	380b      	subs	r0, #11
 80a9250:	d015      	beq.n	80a927e <__b2d+0x8a>
 80a9252:	4084      	lsls	r4, r0
 80a9254:	f1c0 0520 	rsb	r5, r0, #32
 80a9258:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 80a925c:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 80a9260:	42b7      	cmp	r7, r6
 80a9262:	fa21 fe05 	lsr.w	lr, r1, r5
 80a9266:	ea44 030e 	orr.w	r3, r4, lr
 80a926a:	bf8c      	ite	hi
 80a926c:	f857 4c04 	ldrhi.w	r4, [r7, #-4]
 80a9270:	2400      	movls	r4, #0
 80a9272:	fa01 f000 	lsl.w	r0, r1, r0
 80a9276:	40ec      	lsrs	r4, r5
 80a9278:	ea40 0204 	orr.w	r2, r0, r4
 80a927c:	e004      	b.n	80a9288 <__b2d+0x94>
 80a927e:	460a      	mov	r2, r1
 80a9280:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 80a9284:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80a9288:	4610      	mov	r0, r2
 80a928a:	4619      	mov	r1, r3
 80a928c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a928e <__d2b>:
 80a928e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80a9292:	461c      	mov	r4, r3
 80a9294:	2101      	movs	r1, #1
 80a9296:	4690      	mov	r8, r2
 80a9298:	9e08      	ldr	r6, [sp, #32]
 80a929a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80a929c:	f7ff fcc0 	bl	80a8c20 <_Balloc>
 80a92a0:	f3c4 0213 	ubfx	r2, r4, #0, #20
 80a92a4:	f3c4 540a 	ubfx	r4, r4, #20, #11
 80a92a8:	4607      	mov	r7, r0
 80a92aa:	b10c      	cbz	r4, 80a92b0 <__d2b+0x22>
 80a92ac:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80a92b0:	9201      	str	r2, [sp, #4]
 80a92b2:	f1b8 0f00 	cmp.w	r8, #0
 80a92b6:	d019      	beq.n	80a92ec <__d2b+0x5e>
 80a92b8:	a802      	add	r0, sp, #8
 80a92ba:	f840 8d08 	str.w	r8, [r0, #-8]!
 80a92be:	f7ff fd94 	bl	80a8dea <__lo0bits>
 80a92c2:	9b00      	ldr	r3, [sp, #0]
 80a92c4:	b148      	cbz	r0, 80a92da <__d2b+0x4c>
 80a92c6:	9a01      	ldr	r2, [sp, #4]
 80a92c8:	f1c0 0120 	rsb	r1, r0, #32
 80a92cc:	fa02 f101 	lsl.w	r1, r2, r1
 80a92d0:	430b      	orrs	r3, r1
 80a92d2:	40c2      	lsrs	r2, r0
 80a92d4:	617b      	str	r3, [r7, #20]
 80a92d6:	9201      	str	r2, [sp, #4]
 80a92d8:	e000      	b.n	80a92dc <__d2b+0x4e>
 80a92da:	617b      	str	r3, [r7, #20]
 80a92dc:	9b01      	ldr	r3, [sp, #4]
 80a92de:	2b00      	cmp	r3, #0
 80a92e0:	bf14      	ite	ne
 80a92e2:	2102      	movne	r1, #2
 80a92e4:	2101      	moveq	r1, #1
 80a92e6:	61bb      	str	r3, [r7, #24]
 80a92e8:	6139      	str	r1, [r7, #16]
 80a92ea:	e007      	b.n	80a92fc <__d2b+0x6e>
 80a92ec:	a801      	add	r0, sp, #4
 80a92ee:	f7ff fd7c 	bl	80a8dea <__lo0bits>
 80a92f2:	9b01      	ldr	r3, [sp, #4]
 80a92f4:	2101      	movs	r1, #1
 80a92f6:	617b      	str	r3, [r7, #20]
 80a92f8:	6139      	str	r1, [r7, #16]
 80a92fa:	3020      	adds	r0, #32
 80a92fc:	b134      	cbz	r4, 80a930c <__d2b+0x7e>
 80a92fe:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80a9302:	4404      	add	r4, r0
 80a9304:	6034      	str	r4, [r6, #0]
 80a9306:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80a930a:	e009      	b.n	80a9320 <__d2b+0x92>
 80a930c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80a9310:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80a9314:	6030      	str	r0, [r6, #0]
 80a9316:	6918      	ldr	r0, [r3, #16]
 80a9318:	f7ff fd47 	bl	80a8daa <__hi0bits>
 80a931c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80a9320:	6028      	str	r0, [r5, #0]
 80a9322:	4638      	mov	r0, r7
 80a9324:	b002      	add	sp, #8
 80a9326:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a932a <__ratio>:
 80a932a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80a932e:	4688      	mov	r8, r1
 80a9330:	4669      	mov	r1, sp
 80a9332:	4681      	mov	r9, r0
 80a9334:	f7ff ff5e 	bl	80a91f4 <__b2d>
 80a9338:	460d      	mov	r5, r1
 80a933a:	4604      	mov	r4, r0
 80a933c:	a901      	add	r1, sp, #4
 80a933e:	4640      	mov	r0, r8
 80a9340:	f7ff ff58 	bl	80a91f4 <__b2d>
 80a9344:	460f      	mov	r7, r1
 80a9346:	4606      	mov	r6, r0
 80a9348:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80a934c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80a9350:	4620      	mov	r0, r4
 80a9352:	1a9a      	subs	r2, r3, r2
 80a9354:	e89d 000a 	ldmia.w	sp, {r1, r3}
 80a9358:	1ac9      	subs	r1, r1, r3
 80a935a:	eb01 1342 	add.w	r3, r1, r2, lsl #5
 80a935e:	2b00      	cmp	r3, #0
 80a9360:	bfcc      	ite	gt
 80a9362:	eb05 5503 	addgt.w	r5, r5, r3, lsl #20
 80a9366:	eba7 5703 	suble.w	r7, r7, r3, lsl #20
 80a936a:	4632      	mov	r2, r6
 80a936c:	463b      	mov	r3, r7
 80a936e:	4629      	mov	r1, r5
 80a9370:	f7fc f922 	bl	80a55b8 <__aeabi_ddiv>
 80a9374:	b003      	add	sp, #12
 80a9376:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080a937a <__copybits>:
 80a937a:	3901      	subs	r1, #1
 80a937c:	b510      	push	{r4, lr}
 80a937e:	1149      	asrs	r1, r1, #5
 80a9380:	6914      	ldr	r4, [r2, #16]
 80a9382:	3101      	adds	r1, #1
 80a9384:	f102 0314 	add.w	r3, r2, #20
 80a9388:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80a938c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80a9390:	42a3      	cmp	r3, r4
 80a9392:	4602      	mov	r2, r0
 80a9394:	d204      	bcs.n	80a93a0 <__copybits+0x26>
 80a9396:	f853 2b04 	ldr.w	r2, [r3], #4
 80a939a:	f840 2b04 	str.w	r2, [r0], #4
 80a939e:	e7f7      	b.n	80a9390 <__copybits+0x16>
 80a93a0:	2300      	movs	r3, #0
 80a93a2:	428a      	cmp	r2, r1
 80a93a4:	d202      	bcs.n	80a93ac <__copybits+0x32>
 80a93a6:	f842 3b04 	str.w	r3, [r2], #4
 80a93aa:	e7fa      	b.n	80a93a2 <__copybits+0x28>
 80a93ac:	bd10      	pop	{r4, pc}

080a93ae <__any_on>:
 80a93ae:	f100 0214 	add.w	r2, r0, #20
 80a93b2:	6900      	ldr	r0, [r0, #16]
 80a93b4:	114b      	asrs	r3, r1, #5
 80a93b6:	4298      	cmp	r0, r3
 80a93b8:	b510      	push	{r4, lr}
 80a93ba:	db0c      	blt.n	80a93d6 <__any_on+0x28>
 80a93bc:	dd0c      	ble.n	80a93d8 <__any_on+0x2a>
 80a93be:	f011 011f 	ands.w	r1, r1, #31
 80a93c2:	d009      	beq.n	80a93d8 <__any_on+0x2a>
 80a93c4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80a93c8:	fa24 f001 	lsr.w	r0, r4, r1
 80a93cc:	fa00 f101 	lsl.w	r1, r0, r1
 80a93d0:	428c      	cmp	r4, r1
 80a93d2:	d10c      	bne.n	80a93ee <__any_on+0x40>
 80a93d4:	e000      	b.n	80a93d8 <__any_on+0x2a>
 80a93d6:	4603      	mov	r3, r0
 80a93d8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80a93dc:	4293      	cmp	r3, r2
 80a93de:	d904      	bls.n	80a93ea <__any_on+0x3c>
 80a93e0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80a93e4:	2900      	cmp	r1, #0
 80a93e6:	d0f9      	beq.n	80a93dc <__any_on+0x2e>
 80a93e8:	e001      	b.n	80a93ee <__any_on+0x40>
 80a93ea:	2000      	movs	r0, #0
 80a93ec:	bd10      	pop	{r4, pc}
 80a93ee:	2001      	movs	r0, #1
 80a93f0:	bd10      	pop	{r4, pc}

080a93f2 <_calloc_r>:
 80a93f2:	b538      	push	{r3, r4, r5, lr}
 80a93f4:	fb02 f401 	mul.w	r4, r2, r1
 80a93f8:	4621      	mov	r1, r4
 80a93fa:	f7f9 ff7d 	bl	80a32f8 <_malloc_r>
 80a93fe:	4605      	mov	r5, r0
 80a9400:	b118      	cbz	r0, 80a940a <_calloc_r+0x18>
 80a9402:	4622      	mov	r2, r4
 80a9404:	2100      	movs	r1, #0
 80a9406:	f7fd f8fc 	bl	80a6602 <memset>
 80a940a:	4628      	mov	r0, r5
 80a940c:	bd38      	pop	{r3, r4, r5, pc}

080a940e <__env_lock>:
 80a940e:	4770      	bx	lr

080a9410 <__env_unlock>:
 80a9410:	4770      	bx	lr

080a9412 <link_code_end>:
	...

080a9414 <dynalib_user>:
 80a9414:	0021 080a 0061 080a 008d 080a 0091 080a     !...a...........
 80a9424:	0000 0000                                   ....

080a9428 <_ZTV16JsonWriterStaticILj512EE>:
	...
 80a9430:	029d 080a 02b1 080a 7274 6575 6600 6c61     ........true.fal
 80a9440:	6573 6d00 7861 7543 7272 6e65 4374 3e31     se.maxCurrentC1>
 80a9450:	4e09 7765 7320 7465 6f70 6e69 2074 6573     .New setpoint se
 80a9460:	2074 7461 0020 4120 706d 2e73 6d00 7861     t at . Amps..max
 80a9470:	7543 7272 6e65 4374 3e32 4e09 7765 7320     CurrentC2>.New s
 80a9480:	7465 6f70 6e69 2074 6573 2074 7461 0020     etpoint set at .
 80a9490:	7041 7270 786f 6d69 7461 2065 6f79 7275     Approximate your
 80a94a0:	6320 7261 2064 6f74 7420 6568 7220 6165      card to the rea
 80a94b0:	6564 2e72 2e2e 4300 6168 6772 7265 0020     der....Charger .
 80a94c0:	6f56 746c 6761 3a65 0020 6964 2064 6f6e     Voltage: .did no
 80a94d0:	2074 6572 6563 7669 2065 6e65 756f 6867     t receive enough
 80a94e0:	7620 6c6f 6174 6567 6420 7461 0061 7543      voltage data.Cu
 80a94f0:	7272 6e65 3a74 0020 6964 2064 6f6e 2074     rrent: .did not 
 80a9500:	6572 6563 7669 2065 6e65 756f 6867 6320     receive enough c
 80a9510:	7275 6572 746e 6420 7461 0061 7246 7165     urrent data.Freq
 80a9520:	6575 636e 3a79 0020 6964 2064 6f6e 2074     uency: .did not 
 80a9530:	6572 6563 7669 2065 6e65 756f 6867 6620     receive enough f
 80a9540:	6572 7571 6e65 7963 6420 7461 0061 6f50     requency data.Po
 80a9550:	6577 3a72 0020 6964 2064 6f6e 2074 6572     wer: .did not re
 80a9560:	6563 7669 2065 6e65 756f 6867 7020 776f     ceive enough pow
 80a9570:	7265 6420 7461 0061 6e45 7265 7967 203a     er data.Energy: 
 80a9580:	6400 6469 6e20 746f 7220 6365 6965 6576     .did not receive
 80a9590:	6520 6f6e 6775 2068 6e65 7265 7967 6420      enough energy d
 80a95a0:	7461 0061 6f6c 706f 6572 6461 093e 6553     ata.loopread>.Se
 80a95b0:	6972 6c61 5220 6165 2064 7245 6f72 2172     rial Read Error!
 80a95c0:	3000 0030 514d 5454 093e 6552 6563 7669     .00.MQTT>.Receiv
 80a95d0:	2065 6e65 7265 7967 6d20 7465 7265 6420     e energy meter d
 80a95e0:	7461 2061 7266 6d6f 6220 6f72 656b 2072     ata from broker 
 80a95f0:	7461 203a 7300 6375 6563 7373 7566 206c     at: .successful 
 80a9600:	7473 7261 2074 656e 2077 6863 7261 6567     start new charge
 80a9610:	4800 4e41 7665 6573 702f 6f68 6f74 436e     .HANevse/photonC
 80a9620:	6e6f 6576 7472 6465 6300 6168 6772 7265     onverted.charger
 80a9630:	6920 2073 7266 6565 202c 7562 2074 6f79      is free, but yo
 80a9640:	2075 6c61 6572 6461 2079 7773 7069 6465     u already swiped
 80a9650:	7420 6568 6320 7261 2064 6e69 7420 6568      the card in the
 80a9660:	6c20 7361 2074 3032 7320 6365 6300 6168      last 20 sec.cha
 80a9670:	6772 7265 6920 2073 636f 7563 6970 6465     rger is occupied
 80a9680:	6220 2079 6e61 746f 6568 2072 7375 7265      by another user
 80a9690:	7300 6375 6563 7373 7566 206c 7473 706f     .successful stop
 80a96a0:	6320 6168 6772 2065 6573 7373 6f69 006e      charge session.
 80a96b0:	6f79 2075 756a 7473 7320 6174 7472 6465     you just started
 80a96c0:	6120 6320 6168 6772 2065 7461 7420 6968      a charge at thi
 80a96d0:	2073 6863 7261 6567 2c72 6220 7475 6820     s charger, but h
 80a96e0:	6461 6120 6f6e 6874 7265 6320 6e6f 6573     ad another conse
 80a96f0:	7563 6974 6576 5220 4946 2044 7773 7069     cutive RFID swip
 80a9700:	2065 6977 6874 6e69 3220 2030 6573 0063     e within 20 sec.
 80a9710:	6f79 2075 7261 2065 6c61 6572 6461 2079     you are already 
 80a9720:	6863 7261 6967 676e 6120 2074 6e61 746f     charging at anot
 80a9730:	6568 2072 6863 7261 6567 0072 7573 6363     her charger.succ
 80a9740:	7365 6673 6c75 5220 4946 2044 6572 6461     essful RFID read
 80a9750:	202c 7562 2074 6f79 2075 7261 2065 6f6e     , but you are no
 80a9760:	2074 6e69 7420 6568 7520 6573 6c72 7369     t in the userlis
 80a9770:	0074 5245 4f52 3a52 7520 6b6e 6f6e 6e77     t.ERROR: unknown
 80a9780:	7320 6563 616e 6972 006f 3939 4800 4e41      scenario.99.HAN
 80a9790:	7665 6573 452f 656e 6772 4d79 7465 7265     evse/EnergyMeter
 80a97a0:	4800 4e41 7665 6573 612f 6c6c 776f 7355     .HANevse/allowUs
 80a97b0:	7265 4d00 5451 3e54 4309 6c61 626c 6361     er.MQTT>.Callbac
 80a97c0:	206b 7566 636e 6974 6e6f 6920 2073 6163     k function is ca
 80a97d0:	6c6c 6465 6120 3a74 0020 0025 4148 654e     lled at: .%.HANe
 80a97e0:	7376 2f65 6870 746f 6e6f 654d 7361 7275     vse/photonMeasur
 80a97f0:	0065 3020 7200 6165 4364 7261 3e64 5509     e. 0.readCard>.U
 80a9800:	4449 7420 6761 6f20 206e 6863 7261 6567     ID tag on charge
 80a9810:	3172 003a 6843 7261 6567 0072 7355 7265     r1:.Charger.User
 80a9820:	6449 5300 6174 7472 6954 656d 2500 646c     Id.StartTime.%ld
 80a9830:	4800 4e41 7665 6573 752f 6470 7461 5565     .HANevse/updateU
 80a9840:	6573 0072 6572 6461 6143 6472 093e 4955     ser.readCard>.UI
 80a9850:	2044 6174 2067 6e6f 6320 6168 6772 7265     D tag on charger
 80a9860:	3a32 3b00 4d00 5451 3e54 4309 6e6f 656e     2:.;.MQTT>.Conne
 80a9870:	7463 6e69 2067 6f74 4d20 5451 2054 7262     cting to MQTT br
 80a9880:	6b6f 7265 2e2e 002e 5645 502d 6f68 6f74     oker....EV-Photo
 80a9890:	2d6e 6574 7473 4d00 5451 3e54 4309 6e6f     n-test.MQTT>.Con
 80a98a0:	656e 7463 6465 4d00 5451 3e54 4309 6e6f     nected.MQTT>.Con
 80a98b0:	656e 7463 6f69 206e 6166 6c69 6465 4d00     nection failed.M
 80a98c0:	5451 3e54 5209 7465 7972 6e69 2e67 2e2e     QTT>.Retrying...
 80a98d0:	4c00 7461 7365 5374 6174 7472 6954 656d     .LatestStartTime
 80a98e0:	093e 2c00 0020 6954 656d 756f 2074 6863     >.., .Timeout ch
 80a98f0:	7261 6567 0072 6f4e 4920 0044 7773 7469     arger.No ID.swit
 80a9900:	6863 6554 7473 6d00 7861 7543 7272 6e65     chTest.maxCurren
 80a9910:	4374 0031 616d 4378 7275 6572 746e 3243     tC1.maxCurrentC2
 80a9920:	7200 7365 7465 6c4f 6d69 7865 7000 6f72     .resetOlimex.pro
 80a9930:	4d67 646f 4f65 6d6c 0078 6572 6573 5074     gModeOlmx.resetP
 80a9940:	7261 6974 6c63 5700 6669 5369 6769 616e     articl.WifiSigna
 80a9950:	006c 6e69 7469 4652 4449 6300 7275 6572     l.initRFID.curre
 80a9960:	746e 7453 0072 6853 7261 5665 7261 5400     ntStr.ShareVar.T
 80a9970:	706f 6369 6200 6f72 656b 2e72 6968 6576     opic.broker.hive
 80a9980:	716d 632e 6d6f 0000 4d04 5451 0454 0600     mq.com...MQTT...
 80a9990:	514d 7349 7064 0003                         MQIsdp..

080a9998 <_ZTV10JsonBuffer>:
	...
 80a99a0:	2ae1 080a 2afd 080a                         .*...*..

080a99a8 <_ZTV10JsonWriter>:
	...
 80a99b0:	2b11 080a 2b25 080a 6c25 0075 3025 7834     .+..%+..%lu.%04x
 80a99c0:	5c00 2575 3430 0058 2e25 662a 2500 0066     .\u%04X.%.*f.%f.
 80a99d0:	2e25 6c2a 0066 6c25 0066 0000               %.*lf.%lf...

080a99dc <_ZTVSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
 80a99e4:	34b5 080a 34bb 080a 38d3 080a 34c9 080a     .4...4...8...4..
 80a99f4:	34b7 080a                                   .4..

080a99f8 <_ZTV9TCPClient>:
	...
 80a9a00:	227d 080a 22b1 080a 3471 080a 348b 080a     }"..."..q4...4..
 80a9a10:	35d1 080a 353b 080a 350d 080a 34b3 080a     .5..;5...5...4..
 80a9a20:	367d 080a 38ed 080a 356f 080a 3649 080a     }6...8..o5..I6..
 80a9a30:	37cb 080a 381d 080a 349b 080a 378f 080a     .7...8...4...7..
 80a9a40:	34ed 080a 6977 6972 676e 5400 5043 6c43     .4..wiring.TCPCl
 80a9a50:	6569 746e 7320 636f 656b 3d74 7825 6e00     ient socket=%x.n
 80a9a60:	6e61 6f00 6676 6900 666e 6200 7561 0064     an.ovf.inf.baud.
 80a9a70:	6553 6972 6c61 5500 4253 6553 6972 6c61     Serial.USBSerial
 80a9a80:	0031 7974 6570 7000 7261 6d61 6300 646d     1.type.param.cmd
 80a9a90:	6900 0064 6e68 0064 7473 6d72 6600 6c69     .id.hnd.strm.fil
 80a9aa0:	0074 766c 006c 6461 4864 6e61 6c64 7265     t.lvl.addHandler
 80a9ab0:	7200 6d65 766f 4865 6e61 6c64 7265 6500     .removeHandler.e
 80a9ac0:	756e 486d 6e61 6c64 7265 0073 534a 4e4f     numHandlers.JSON
 80a9ad0:	7453 6572 6d61 6f4c 4867 6e61 6c64 7265     StreamLogHandler
 80a9ae0:	6100 7070 2500 3130 7530 0020 205d 2800     .app.%010u .] .(
 80a9af0:	3a29 0020 5b20 6300 646f 2065 203d 2500     ): . [.code = .%
 80a9b00:	0069 6564 6174 6c69 2073 203d 0d00 000a     i.details = ....
 80a9b10:	6e6c 6600 006e 6f63 6564 6400 7465 6961     ln.fn.code.detai
 80a9b20:	006c 6f6e 656e 7400 6172 6563 6900 666e     l.none.trace.inf
 80a9b30:	006f 6177 6e72 6500 7272 726f 7000 6e61     o.warn.error.pan
 80a9b40:	6369 6100 6c6c 2500 302b 6433 253a 3230     ic.all.%+03d:%02
 80a9b50:	0075 5925 252d 2d6d 6425 2554 3a48 4d25     u.%Y-%m-%dT%H:%M
 80a9b60:	253a 2553 007a 7361 7463 6d69 0065 0000     :%S%z.asctime...

080a9b70 <_ZTV9IPAddress>:
	...
 80a9b78:	4463 080a 4453 080a 4455 080a               cD..SD..UD..

080a9b84 <_ZTV9USBSerial>:
	...
 80a9b8c:	4549 080a 4599 080a 45a7 080a 3d91 080a     IE...E...E...=..
 80a9b9c:	4585 080a 454b 080a 4561 080a 4593 080a     .E..KE..aE...E..
 80a9bac:	4577 080a 4545 080a                         wE..EE..

080a9bb4 <_ZTV11USARTSerial>:
	...
 80a9bbc:	46b1 080a 4701 080a 470f 080a 3d91 080a     .F...G...G...=..
 80a9bcc:	46c5 080a 46e7 080a 46d3 080a 46fb 080a     .F...F...F...F..
 80a9bdc:	46b3 080a 46b7 080a                         .F...F..

080a9be4 <_ZTV7TwoWire>:
	...
 80a9bec:	47f5 080a 483f 080a 4817 080a 47f7 080a     .G..?H...H...G..
 80a9bfc:	481f 080a 4827 080a 482f 080a 4837 080a     .H..'H../H..7H..

080a9c0c <_ZTVN5spark9WiFiClassE>:
	...
 80a9c14:	496d 080a 4963 080a 4959 080a 48c9 080a     mI..cI..YI...H..
 80a9c24:	401f 080a 494d 080a 4941 080a 4939 080a     .@..MI..AI..9I..
 80a9c34:	492f 080a 4925 080a 48e1 080a               /I..%I...H..

080a9c40 <_ZTV10WiFiSignal>:
	...
 80a9c48:	4879 080a 48d3 080a 487b 080a 49a9 080a     yH...H..{H...I..
 80a9c58:	4881 080a 4979 080a 48a5 080a               .H..yI...H..

080a9c64 <_ZTVN5spark12NetworkClassE>:
	...
 80a9c6c:	4a95 080a 4a9f 080a 4aa9 080a 4ab3 080a     .J...J...J...J..
 80a9c7c:	4abd 080a 4ac9 080a 4ad5 080a 4ae1 080a     .J...J...J...J..
 80a9c8c:	4ae9 080a 4af3 080a 4afd 080a               .J...J...J..

080a9c98 <_ZSt7nothrow>:
	...

080a9c99 <day_name.4723>:
 80a9c99:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
 80a9ca9:	6972 6153 4a74                                   riSat

080a9cae <mon_name.4724>:
 80a9cae:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
 80a9cbe:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
 80a9cce:	4476 6365 2e25 7333 2520 332e 2573 6433     vDec%.3s %.3s%3d
 80a9cde:	2520 322e 3a64 2e25 6432 253a 322e 2064      %.2d:%.2d:%.2d 
 80a9cee:	6425 000a                                   %d..

080a9cf2 <_ctype_>:
 80a9cf2:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 80a9d02:	2020 2020 2020 2020 2020 2020 2020 2020                     
 80a9d12:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 80a9d22:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 80a9d32:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 80a9d42:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 80a9d52:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 80a9d62:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 80a9d72:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

080a9df4 <__sf_fake_stdin>:
	...

080a9e14 <__sf_fake_stdout>:
	...

080a9e34 <__sf_fake_stderr>:
	...
 80a9e54:	0043 4f50 4953 0058                         C.POSIX.

080a9e5c <__month_lengths>:
 80a9e5c:	001f 0000 001c 0000 001f 0000 001e 0000     ................
 80a9e6c:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 80a9e7c:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 80a9e8c:	001f 0000 001d 0000 001f 0000 001e 0000     ................
 80a9e9c:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 80a9eac:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 80a9ebc:	7325 2e25 642a 2500 2573 2e30 642a 2b00     %s%.*d.%s%0.*d.+
 80a9ecc:	2d00 2500 6432 2500 322e 2f64 2e25 6432     .-.%2d.%.2d/%.2d
 80a9edc:	252f 322e 0064 2d59 6d25 252d 0064 2a2e     /%.2d.Y-%m-%d..*
 80a9eec:	0075 2e25 6433 2500 6c6c 0064 2e25 6432     u.%.3d.%lld.%.2d
 80a9efc:	253a 322e 3a64 2e25 6432 2500 302b 6c33     :%.2d:%.2d.%+03l
 80a9f0c:	2564 322e 646c 0000                         d%.2ld..

080a9f14 <fpi.5342>:
 80a9f14:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
 80a9f24:	0000 0000 6e69 7469 0079 0000               ....inity...

080a9f30 <fpinan.5378>:
 80a9f30:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
	...

080a9f48 <tinytens>:
 80a9f48:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
 80a9f58:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
 80a9f68:	6f43 64ac 0628 1168 434c 545f 4d49 0045     Co.d(.h.LC_TIME.
 80a9f78:	614a 006e 6546 0062 614d 0072 7041 0072     Jan.Feb.Mar.Apr.
 80a9f88:	614d 0079 754a 006e 754a 006c 7541 0067     May.Jun.Jul.Aug.
 80a9f98:	6553 0070 634f 0074 6f4e 0076 6544 0063     Sep.Oct.Nov.Dec.
 80a9fa8:	614a 756e 7261 0079 6546 7262 6175 7972     January.February
 80a9fb8:	4d00 7261 6863 4100 7270 6c69 4a00 6e75     .March.April.Jun
 80a9fc8:	0065 754a 796c 4100 6775 7375 0074 6553     e.July.August.Se
 80a9fd8:	7470 6d65 6562 0072 634f 6f74 6562 0072     ptember.October.
 80a9fe8:	6f4e 6576 626d 7265 4400 6365 6d65 6562     November.Decembe
 80a9ff8:	0072 7553 006e 6f4d 006e 7554 0065 6557     r.Sun.Mon.Tue.We
 80aa008:	0064 6854 0075 7246 0069 6153 0074 7553     d.Thu.Fri.Sat.Su
 80aa018:	646e 7961 4d00 6e6f 6164 0079 7554 7365     nday.Monday.Tues
 80aa028:	6164 0079 6557 6e64 7365 6164 0079 6854     day.Wednesday.Th
 80aa038:	7275 6473 7961 4600 6972 6164 0079 6153     ursday.Friday.Sa
 80aa048:	7574 6472 7961 2500 3a48 4d25 253a 0053     turday.%H:%M:%S.
 80aa058:	6d25 252f 2f64 7925 2500 2061 6225 2520     %m/%d/%y.%a %b %
 80aa068:	2065 4825 253a 3a4d 5325 2520 0059 4d41     e %H:%M:%S %Y.AM
 80aa078:	5000 004d 6125 2520 2062 6525 2520 3a48     .PM.%a %b %e %H:
 80aa088:	4d25 253a 2053 5a25 2520 0059 4925 253a     %M:%S %Z %Y.%I:%
 80aa098:	3a4d 5325 2520 0070                         M:%S %p.

080aa0a0 <_C_time_locale>:
 80aa0a0:	9f78 080a 9f7c 080a 9f80 080a 9f84 080a     x...|...........
 80aa0b0:	9f88 080a 9f8c 080a 9f90 080a 9f94 080a     ................
 80aa0c0:	9f98 080a 9f9c 080a 9fa0 080a 9fa4 080a     ................
 80aa0d0:	9fa8 080a 9fb0 080a 9fb9 080a 9fbf 080a     ................
 80aa0e0:	9f88 080a 9fc5 080a 9fca 080a 9fcf 080a     ................
 80aa0f0:	9fd6 080a 9fe0 080a 9fe8 080a 9ff1 080a     ................
 80aa100:	9ffa 080a 9ffe 080a a002 080a a006 080a     ................
 80aa110:	a00a 080a a00e 080a a012 080a a016 080a     ................
 80aa120:	a01d 080a a024 080a a02c 080a a036 080a     ....$...,...6...
 80aa130:	a03f 080a a046 080a a04f 080a a058 080a     ?...F...O...X...
 80aa140:	a061 080a a076 080a a079 080a a07c 080a     a...v...y...|...
 80aa150:	9fa8 080a 9fb0 080a 9fb9 080a 9fbf 080a     ................
 80aa160:	9f88 080a 9fc5 080a 9fca 080a 9fcf 080a     ................
 80aa170:	9fd6 080a 9fe0 080a 9fe8 080a 9ff1 080a     ................
 80aa180:	9a8e 080a a094 080a 98e2 080a 98e2 080a     ................
 80aa190:	98e2 080a 98e2 080a 98e2 080a 5a54 4700     ............TZ.G
 80aa1a0:	544d 2500 3031 5e5b 2d30 2c39 2d2b 255d     MT.%10[^0-9,+-]%
 80aa1b0:	006e 254d 7568 6e25 252e 7568 6e25 252e     n.M%hu%n.%hu%n.%
 80aa1c0:	7568 6e25 2f00 6825 2575 3a6e 6825 2575     hu%n./%hu%n:%hu%
 80aa1d0:	3a6e 6825 2575 006e                         n:%hu%n.

080aa1d8 <__mprec_tens>:
 80aa1d8:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
 80aa1e8:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
 80aa1f8:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
 80aa208:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
 80aa218:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
 80aa228:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
 80aa238:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
 80aa248:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
 80aa258:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
 80aa268:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
 80aa278:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
 80aa288:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
 80aa298:	9db4 79d9 7843 44ea                         ...yCx.D

080aa2a0 <__mprec_bigtens>:
 80aa2a0:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
 80aa2b0:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
 80aa2c0:	bf3c 7f73 4fdd 7515                         <.s..O.u

080aa2c8 <p05.5385>:
 80aa2c8:	0005 0000 0019 0000 007d 0000               ........}...

080aa2d4 <link_const_variable_data_end>:
 80aa2d4:	080a1969 	.word	0x080a1969
 80aa2d8:	080a2277 	.word	0x080a2277
 80aa2dc:	080a2adb 	.word	0x080a2adb
 80aa2e0:	080a2d67 	.word	0x080a2d67
 80aa2e4:	080a3395 	.word	0x080a3395
 80aa2e8:	080a402d 	.word	0x080a402d
 80aa2ec:	080a424d 	.word	0x080a424d
 80aa2f0:	080a42a5 	.word	0x080a42a5
 80aa2f4:	080a4a81 	.word	0x080a4a81
 80aa2f8:	080a4b65 	.word	0x080a4b65
 80aa2fc:	080a4c71 	.word	0x080a4c71
 80aa300:	080a4d65 	.word	0x080a4d65
 80aa304:	080a4de9 	.word	0x080a4de9
 80aa308:	080a4ead 	.word	0x080a4ead
 80aa30c:	080a4f71 	.word	0x080a4f71
