
d:/UNI_S5/new_particle_code/2020_photon_code/target/2.0.0/photon/2020_photon_code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00008ee0  080a0020  080a0020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  080a8f00  080a8f00  00018f00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  40024000  080a8f08  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000240  20000000  080a8f0c  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000428  20000240  20000240  00040240  2**3
                  ALLOC
  7 .module_info_suffix 00000028  080a914c  080a914c  0003914c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  080a9174  080a9174  00039174  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   0016317d  00000000  00000000  00039178  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000189ec  00000000  00000000  0019c2f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00029a35  00000000  00000000  001b4ce1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00002a50  00000000  00000000  001de716  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00006cb0  00000000  00000000  001e1166  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0002ba9e  00000000  00000000  001e7e16  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0003a4e1  00000000  00000000  002138b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000ba83f  00000000  00000000  0024dd95  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00007eb0  00000000  00000000  003085d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0020:	4809      	ldr	r0, [pc, #36]	; (80a0048 <module_user_pre_init+0x28>)
 80a0022:	490a      	ldr	r1, [pc, #40]	; (80a004c <module_user_pre_init+0x2c>)
void* module_user_pre_init() {
 80a0024:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0026:	4288      	cmp	r0, r1
 80a0028:	d005      	beq.n	80a0036 <module_user_pre_init+0x16>
 80a002a:	4a09      	ldr	r2, [pc, #36]	; (80a0050 <module_user_pre_init+0x30>)
 80a002c:	4282      	cmp	r2, r0
 80a002e:	d002      	beq.n	80a0036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a0030:	1a12      	subs	r2, r2, r0
 80a0032:	f006 fdef 	bl	80a6c14 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0036:	4807      	ldr	r0, [pc, #28]	; (80a0054 <module_user_pre_init+0x34>)
 80a0038:	4a07      	ldr	r2, [pc, #28]	; (80a0058 <module_user_pre_init+0x38>)
 80a003a:	2100      	movs	r1, #0
 80a003c:	1a12      	subs	r2, r2, r0
 80a003e:	f006 fdf7 	bl	80a6c30 <memset>
    return &link_heap_start;
}
 80a0042:	4806      	ldr	r0, [pc, #24]	; (80a005c <module_user_pre_init+0x3c>)
 80a0044:	bd08      	pop	{r3, pc}
 80a0046:	bf00      	nop
 80a0048:	20000000 	.word	0x20000000
 80a004c:	080a8f0c 	.word	0x080a8f0c
 80a0050:	20000240 	.word	0x20000240
 80a0054:	20000240 	.word	0x20000240
 80a0058:	20000665 	.word	0x20000665
 80a005c:	20000665 	.word	0x20000665

080a0060 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a0060:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a0062:	f004 fd7d 	bl	80a4b60 <module_user_init_hook>

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0066:	2500      	movs	r5, #0
 80a0068:	4e05      	ldr	r6, [pc, #20]	; (80a0080 <module_user_init+0x20>)
 80a006a:	4c06      	ldr	r4, [pc, #24]	; (80a0084 <module_user_init+0x24>)
 80a006c:	1ba4      	subs	r4, r4, r6
 80a006e:	08a4      	lsrs	r4, r4, #2
 80a0070:	42a5      	cmp	r5, r4
 80a0072:	d100      	bne.n	80a0076 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0074:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 80a0076:	f856 3b04 	ldr.w	r3, [r6], #4
 80a007a:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a007c:	3501      	adds	r5, #1
 80a007e:	e7f7      	b.n	80a0070 <module_user_init+0x10>
 80a0080:	080a8edc 	.word	0x080a8edc
 80a0084:	080a8efc 	.word	0x080a8efc

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f001 ba10 	b.w	80a14ac <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f001 f839 	bl	80a1104 <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 80a0096:	f004 bd25 	b.w	80a4ae4 <_post_loop>

080a009a <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 80a009a:	f003 bc93 	b.w	80a39c4 <malloc>

080a009e <_Znaj>:
 80a009e:	f003 bc91 	b.w	80a39c4 <malloc>

080a00a2 <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
 80a00a2:	f003 bc97 	b.w	80a39d4 <free>

080a00a6 <_ZdaPv>:
 80a00a6:	f003 bc95 	b.w	80a39d4 <free>

080a00aa <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00aa:	7800      	ldrb	r0, [r0, #0]
 80a00ac:	fab0 f080 	clz	r0, r0
 80a00b0:	0940      	lsrs	r0, r0, #5
 80a00b2:	4770      	bx	lr

080a00b4 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00b4:	2301      	movs	r3, #1
 80a00b6:	7003      	strb	r3, [r0, #0]
 80a00b8:	4770      	bx	lr

080a00ba <_ZN10CloudClass22update_string_variableEPKc18Spark_Data_TypeDefPKvPv>:

    static const void* update_string_variable(const char* name, Spark_Data_TypeDef type, const void* var, void* reserved)
    {
        const String* s = (const String*)var;
        return s->c_str();
    }
 80a00ba:	6810      	ldr	r0, [r2, #0]
 80a00bc:	4770      	bx	lr

080a00be <_Z11resetOlimex6String>:
    while (*pointer++) {
      out.concat(in[index++]);
      }
}

int resetOlimex(String input) {
 80a00be:	b508      	push	{r3, lr}
    digitalWrite(RESET_OLIMEX, LOW);
 80a00c0:	2100      	movs	r1, #0
 80a00c2:	2004      	movs	r0, #4
 80a00c4:	f005 f97f 	bl	80a53c6 <digitalWrite>
    delay(500);
 80a00c8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a00cc:	f004 fcb4 	bl	80a4a38 <delay>
    digitalWrite(RESET_OLIMEX, HIGH);
 80a00d0:	2101      	movs	r1, #1
 80a00d2:	2004      	movs	r0, #4
 80a00d4:	f005 f977 	bl	80a53c6 <digitalWrite>
    return 1;
}
 80a00d8:	2001      	movs	r0, #1
 80a00da:	bd08      	pop	{r3, pc}

080a00dc <_Z12progModeOlmx6String>:

int resetParticle(String input) {
    System.reset();
}

int progModeOlmx(String input) {
 80a00dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    digitalWrite(WAKEUP_OLIMEX, HIGH);
 80a00de:	2101      	movs	r1, #1
 80a00e0:	2002      	movs	r0, #2
 80a00e2:	f005 f970 	bl	80a53c6 <digitalWrite>
    delay(500);
 80a00e6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a00ea:	f004 fca5 	bl	80a4a38 <delay>
    resetOlimex("");
 80a00ee:	490b      	ldr	r1, [pc, #44]	; (80a011c <_Z12progModeOlmx6String+0x40>)
 80a00f0:	4668      	mov	r0, sp
 80a00f2:	f004 f89d 	bl	80a4230 <_ZN6StringC1EPKc>
 80a00f6:	4668      	mov	r0, sp
 80a00f8:	f7ff ffe1 	bl	80a00be <_Z11resetOlimex6String>
 80a00fc:	4668      	mov	r0, sp
 80a00fe:	f004 f84d 	bl	80a419c <_ZN6StringD1Ev>
    delay(500);
 80a0102:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a0106:	f004 fc97 	bl	80a4a38 <delay>
    digitalWrite(WAKEUP_OLIMEX, LOW);
 80a010a:	2100      	movs	r1, #0
 80a010c:	2002      	movs	r0, #2
 80a010e:	f005 f95a 	bl	80a53c6 <digitalWrite>
    return 1;
}
 80a0112:	2001      	movs	r0, #1
 80a0114:	b005      	add	sp, #20
 80a0116:	f85d fb04 	ldr.w	pc, [sp], #4
 80a011a:	bf00      	nop
 80a011c:	080a86c9 	.word	0x080a86c9

080a0120 <_Z10WifiSignal6String>:
int WifiSignal(String input) {
 80a0120:	b500      	push	{lr}
 80a0122:	b08b      	sub	sp, #44	; 0x2c
    return WiFi.RSSI();
 80a0124:	4904      	ldr	r1, [pc, #16]	; (80a0138 <_Z10WifiSignal6String+0x18>)
 80a0126:	a801      	add	r0, sp, #4
 80a0128:	f005 f848 	bl	80a51bc <_ZN5spark9WiFiClass4RSSIEv>
 80a012c:	a801      	add	r0, sp, #4
 80a012e:	f005 f823 	bl	80a5178 <_ZNK10WiFiSignalcvaEv>
}
 80a0132:	b00b      	add	sp, #44	; 0x2c
 80a0134:	f85d fb04 	ldr.w	pc, [sp], #4
 80a0138:	200005f0 	.word	0x200005f0

080a013c <_Z13resetParticle6String>:
int resetParticle(String input) {
 80a013c:	b508      	push	{r3, lr}
    System.reset();
 80a013e:	f003 fcde 	bl	80a3afe <_ZN11SystemClass5resetEv>
	...

080a0144 <_Z12maxCurrentC16String>:
        TESTCASE = false;
        return 0;
    }
}

int maxCurrentC1(String setPointStr) {
 80a0144:	b570      	push	{r4, r5, r6, lr}
 80a0146:	b08a      	sub	sp, #40	; 0x28
    unsigned int setPoint = setPointStr.toInt();
 80a0148:	f004 f9cd 	bl	80a44e6 <_ZNK6String5toIntEv>
    byte olimexMessage[4] = {0xFE,1,setPoint,0xFF};
 80a014c:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
 80a0150:	f8ad 3004 	strh.w	r3, [sp, #4]
 80a0154:	23ff      	movs	r3, #255	; 0xff
 80a0156:	f88d 3007 	strb.w	r3, [sp, #7]
    if (!TESTCASE) {
 80a015a:	4b18      	ldr	r3, [pc, #96]	; (80a01bc <_Z12maxCurrentC16String+0x78>)
    unsigned int setPoint = setPointStr.toInt();
 80a015c:	4605      	mov	r5, r0
    if (!TESTCASE) {
 80a015e:	781c      	ldrb	r4, [r3, #0]
    byte olimexMessage[4] = {0xFE,1,setPoint,0xFF};
 80a0160:	f88d 0006 	strb.w	r0, [sp, #6]
    if (!TESTCASE) {
 80a0164:	bb3c      	cbnz	r4, 80a01b6 <_Z12maxCurrentC16String+0x72>
        Serial1.write(olimexMessage,4);
 80a0166:	f004 fed9 	bl	80a4f1c <_Z22__fetch_global_Serial1v>
 80a016a:	2204      	movs	r2, #4
 80a016c:	6803      	ldr	r3, [r0, #0]
 80a016e:	eb0d 0102 	add.w	r1, sp, r2
 80a0172:	68db      	ldr	r3, [r3, #12]
 80a0174:	4798      	blx	r3
        DEBUGPORT.println("maxCurrentC1>\tNew setpoint set at "+String(setPoint)+" Amps.");
 80a0176:	f004 fe1f 	bl	80a4db8 <_Z16_fetch_usbserialv>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a017a:	4911      	ldr	r1, [pc, #68]	; (80a01c0 <_Z12maxCurrentC16String+0x7c>)
 80a017c:	4606      	mov	r6, r0
 80a017e:	a806      	add	r0, sp, #24
 80a0180:	f004 f856 	bl	80a4230 <_ZN6StringC1EPKc>
 80a0184:	220a      	movs	r2, #10
 80a0186:	4629      	mov	r1, r5
 80a0188:	a802      	add	r0, sp, #8
 80a018a:	f004 f8d9 	bl	80a4340 <_ZN6StringC1Ejh>
 80a018e:	a902      	add	r1, sp, #8
 80a0190:	a806      	add	r0, sp, #24
 80a0192:	f004 f94c 	bl	80a442e <_ZplRK15StringSumHelperRK6String>
 80a0196:	490b      	ldr	r1, [pc, #44]	; (80a01c4 <_Z12maxCurrentC16String+0x80>)
 80a0198:	f004 f955 	bl	80a4446 <_ZplRK15StringSumHelperPKc>
 80a019c:	6801      	ldr	r1, [r0, #0]
 80a019e:	4630      	mov	r0, r6
 80a01a0:	f004 f9df 	bl	80a4562 <_ZN5Print7printlnEPKc>
 80a01a4:	a802      	add	r0, sp, #8
 80a01a6:	f003 fff9 	bl	80a419c <_ZN6StringD1Ev>
class StringSumHelper : public String
 80a01aa:	a806      	add	r0, sp, #24
 80a01ac:	f003 fff6 	bl	80a419c <_ZN6StringD1Ev>
        return 0;
 80a01b0:	4620      	mov	r0, r4
    }
    return 1;
}
 80a01b2:	b00a      	add	sp, #40	; 0x28
 80a01b4:	bd70      	pop	{r4, r5, r6, pc}
    return 1;
 80a01b6:	2001      	movs	r0, #1
 80a01b8:	e7fb      	b.n	80a01b2 <_Z12maxCurrentC16String+0x6e>
 80a01ba:	bf00      	nop
 80a01bc:	20000330 	.word	0x20000330
 80a01c0:	080a8164 	.word	0x080a8164
 80a01c4:	080a8187 	.word	0x080a8187

080a01c8 <_Z12maxCurrentC26String>:

int maxCurrentC2(String setPointStr) {
 80a01c8:	b570      	push	{r4, r5, r6, lr}
 80a01ca:	b08a      	sub	sp, #40	; 0x28
    unsigned int setPoint = setPointStr.toInt();
 80a01cc:	f004 f98b 	bl	80a44e6 <_ZNK6String5toIntEv>
    byte olimexMessage[4] = {0xFE, 2, setPoint, 0xFF};
 80a01d0:	f240 23fe 	movw	r3, #766	; 0x2fe
 80a01d4:	f8ad 3004 	strh.w	r3, [sp, #4]
 80a01d8:	23ff      	movs	r3, #255	; 0xff
 80a01da:	f88d 3007 	strb.w	r3, [sp, #7]
    if (!TESTCASE) {
 80a01de:	4b18      	ldr	r3, [pc, #96]	; (80a0240 <_Z12maxCurrentC26String+0x78>)
    unsigned int setPoint = setPointStr.toInt();
 80a01e0:	4605      	mov	r5, r0
    if (!TESTCASE) {
 80a01e2:	781c      	ldrb	r4, [r3, #0]
    byte olimexMessage[4] = {0xFE, 2, setPoint, 0xFF};
 80a01e4:	f88d 0006 	strb.w	r0, [sp, #6]
    if (!TESTCASE) {
 80a01e8:	bb3c      	cbnz	r4, 80a023a <_Z12maxCurrentC26String+0x72>
        Serial1.write(olimexMessage,4);
 80a01ea:	f004 fe97 	bl	80a4f1c <_Z22__fetch_global_Serial1v>
 80a01ee:	2204      	movs	r2, #4
 80a01f0:	6803      	ldr	r3, [r0, #0]
 80a01f2:	eb0d 0102 	add.w	r1, sp, r2
 80a01f6:	68db      	ldr	r3, [r3, #12]
 80a01f8:	4798      	blx	r3
        DEBUGPORT.println("maxCurrentC2>\tNew setpoint set at "+String(setPoint)+" Amps.");
 80a01fa:	f004 fddd 	bl	80a4db8 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
 80a01fe:	4911      	ldr	r1, [pc, #68]	; (80a0244 <_Z12maxCurrentC26String+0x7c>)
 80a0200:	4606      	mov	r6, r0
 80a0202:	a806      	add	r0, sp, #24
 80a0204:	f004 f814 	bl	80a4230 <_ZN6StringC1EPKc>
 80a0208:	220a      	movs	r2, #10
 80a020a:	4629      	mov	r1, r5
 80a020c:	a802      	add	r0, sp, #8
 80a020e:	f004 f897 	bl	80a4340 <_ZN6StringC1Ejh>
 80a0212:	a902      	add	r1, sp, #8
 80a0214:	a806      	add	r0, sp, #24
 80a0216:	f004 f90a 	bl	80a442e <_ZplRK15StringSumHelperRK6String>
 80a021a:	490b      	ldr	r1, [pc, #44]	; (80a0248 <_Z12maxCurrentC26String+0x80>)
 80a021c:	f004 f913 	bl	80a4446 <_ZplRK15StringSumHelperPKc>
 80a0220:	6801      	ldr	r1, [r0, #0]
 80a0222:	4630      	mov	r0, r6
 80a0224:	f004 f99d 	bl	80a4562 <_ZN5Print7printlnEPKc>
 80a0228:	a802      	add	r0, sp, #8
 80a022a:	f003 ffb7 	bl	80a419c <_ZN6StringD1Ev>
class StringSumHelper : public String
 80a022e:	a806      	add	r0, sp, #24
 80a0230:	f003 ffb4 	bl	80a419c <_ZN6StringD1Ev>
        return 0;
 80a0234:	4620      	mov	r0, r4
    }
    return 1;
}
 80a0236:	b00a      	add	sp, #40	; 0x28
 80a0238:	bd70      	pop	{r4, r5, r6, pc}
    return 1;
 80a023a:	2001      	movs	r0, #1
 80a023c:	e7fb      	b.n	80a0236 <_Z12maxCurrentC26String+0x6e>
 80a023e:	bf00      	nop
 80a0240:	20000330 	.word	0x20000330
 80a0244:	080a818e 	.word	0x080a818e
 80a0248:	080a8187 	.word	0x080a8187

080a024c <_ZN16JsonWriterStaticILj512EED1Ev>:
 * variable.
 *
 * @param BUFFER_SIZE The size of the buffer to reserve.
 */
template <size_t BUFFER_SIZE>
class JsonWriterStatic : public JsonWriter {
 80a024c:	b510      	push	{r4, lr}
 80a024e:	4604      	mov	r4, r0
 80a0250:	4b02      	ldr	r3, [pc, #8]	; (80a025c <_ZN16JsonWriterStaticILj512EED1Ev+0x10>)
 80a0252:	6003      	str	r3, [r0, #0]
 80a0254:	f002 fbfa 	bl	80a2a4c <_ZN10JsonWriterD1Ev>
 80a0258:	4620      	mov	r0, r4
 80a025a:	bd10      	pop	{r4, pc}
 80a025c:	080a871c 	.word	0x080a871c

080a0260 <_ZN16JsonWriterStaticILj512EED0Ev>:
 80a0260:	b510      	push	{r4, lr}
 80a0262:	4604      	mov	r4, r0
 80a0264:	f7ff fff2 	bl	80a024c <_ZN16JsonWriterStaticILj512EED1Ev>
 80a0268:	4620      	mov	r0, r4
 80a026a:	f44f 710c 	mov.w	r1, #560	; 0x230
 80a026e:	f005 f934 	bl	80a54da <_ZdlPvj>
 80a0272:	4620      	mov	r0, r4
 80a0274:	bd10      	pop	{r4, pc}
	...

080a0278 <_Z10switchTest6String>:
int switchTest(String valueString) {
 80a0278:	b570      	push	{r4, r5, r6, lr}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 80a027a:	4908      	ldr	r1, [pc, #32]	; (80a029c <_Z10switchTest6String+0x24>)
 80a027c:	4605      	mov	r5, r0
 80a027e:	f004 f8f6 	bl	80a446e <_ZNK6String6equalsEPKc>
 80a0282:	4e07      	ldr	r6, [pc, #28]	; (80a02a0 <_Z10switchTest6String+0x28>)
    if (valueString == "true") {
 80a0284:	4604      	mov	r4, r0
 80a0286:	b110      	cbz	r0, 80a028e <_Z10switchTest6String+0x16>
        TESTCASE = true;
 80a0288:	2001      	movs	r0, #1
 80a028a:	7030      	strb	r0, [r6, #0]
}
 80a028c:	bd70      	pop	{r4, r5, r6, pc}
 80a028e:	4628      	mov	r0, r5
 80a0290:	4904      	ldr	r1, [pc, #16]	; (80a02a4 <_Z10switchTest6String+0x2c>)
 80a0292:	f004 f8ec 	bl	80a446e <_ZNK6String6equalsEPKc>
        TESTCASE = false;
 80a0296:	4620      	mov	r0, r4
 80a0298:	7034      	strb	r4, [r6, #0]
        return 0;
 80a029a:	e7f7      	b.n	80a028c <_Z10switchTest6String+0x14>
 80a029c:	080a81b1 	.word	0x080a81b1
 80a02a0:	20000330 	.word	0x20000330
 80a02a4:	080a81b6 	.word	0x080a81b6

080a02a8 <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(hal_spi_interface_t spi);
  ~SPIClass() = default;
 80a02a8:	b510      	push	{r4, lr}
 80a02aa:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a02ac:	6880      	ldr	r0, [r0, #8]
 80a02ae:	b108      	cbz	r0, 80a02b4 <_ZN8SPIClassD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
 80a02b0:	f003 f968 	bl	80a3584 <os_mutex_recursive_destroy>
 80a02b4:	4620      	mov	r0, r4
 80a02b6:	bd10      	pop	{r4, pc}

080a02b8 <_ZN10CloudClass9_variableIcEEbPKT_PK6StringRK17CloudVariableTypeIPKcvE.isra.0>:
    static inline bool _variable(const T *varKey, const String *userVar, const CloudVariableTypeString& userVarType)
 80a02b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        spark_variable_t extra = {};
 80a02ba:	2300      	movs	r3, #0
 80a02bc:	9301      	str	r3, [sp, #4]
 80a02be:	9303      	str	r3, [sp, #12]
        extra.size = sizeof(extra);
 80a02c0:	230c      	movs	r3, #12
 80a02c2:	f8ad 3004 	strh.w	r3, [sp, #4]
        extra.update = update_string_variable;
 80a02c6:	4b04      	ldr	r3, [pc, #16]	; (80a02d8 <_ZN10CloudClass9_variableIcEEbPKT_PK6StringRK17CloudVariableTypeIPKcvE.isra.0+0x20>)
        return spark_variable(varKey, userVar, CloudVariableTypeString::TYPE_ID, &extra);
 80a02c8:	2204      	movs	r2, #4
        extra.update = update_string_variable;
 80a02ca:	9302      	str	r3, [sp, #8]
        return spark_variable(varKey, userVar, CloudVariableTypeString::TYPE_ID, &extra);
 80a02cc:	ab01      	add	r3, sp, #4
 80a02ce:	f003 fb41 	bl	80a3954 <spark_variable>
    }
 80a02d2:	b005      	add	sp, #20
 80a02d4:	f85d fb04 	ldr.w	pc, [sp], #4
 80a02d8:	080a00bb 	.word	0x080a00bb

080a02dc <_Z8initRFID6String>:
			break;
		}
	}
}

int initRFID(String input) {
 80a02dc:	b538      	push	{r3, r4, r5, lr}
    //additional config for debugging RFID readers
    pinMode(SS_PIN_CHARGER1, OUTPUT);
 80a02de:	2101      	movs	r1, #1
 80a02e0:	200b      	movs	r0, #11
 80a02e2:	f005 f85f 	bl	80a53a4 <pinMode>
	digitalWrite(SS_PIN_CHARGER1, HIGH);
 80a02e6:	2101      	movs	r1, #1
 80a02e8:	200b      	movs	r0, #11
 80a02ea:	f005 f86c 	bl	80a53c6 <digitalWrite>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a02ee:	4d21      	ldr	r5, [pc, #132]	; (80a0374 <_Z8initRFID6String+0x98>)
	pinMode(SS_PIN_CHARGER2, OUTPUT);
 80a02f0:	2101      	movs	r1, #1
 80a02f2:	200c      	movs	r0, #12
 80a02f4:	f005 f856 	bl	80a53a4 <pinMode>
	digitalWrite(SS_PIN_CHARGER2, HIGH);
 80a02f8:	2101      	movs	r1, #1
 80a02fa:	200c      	movs	r0, #12
 80a02fc:	f005 f863 	bl	80a53c6 <digitalWrite>
 80a0300:	7829      	ldrb	r1, [r5, #0]
 80a0302:	f3bf 8f5b 	dmb	ish
 80a0306:	f011 0401 	ands.w	r4, r1, #1
 80a030a:	d10f      	bne.n	80a032c <_Z8initRFID6String+0x50>
 80a030c:	4628      	mov	r0, r5
 80a030e:	f7ff fecc 	bl	80a00aa <__cxa_guard_acquire>
 80a0312:	b158      	cbz	r0, 80a032c <_Z8initRFID6String+0x50>
 80a0314:	4621      	mov	r1, r4
 80a0316:	4818      	ldr	r0, [pc, #96]	; (80a0378 <_Z8initRFID6String+0x9c>)
 80a0318:	f003 fbaf 	bl	80a3a7a <_ZN8SPIClassC1E19hal_spi_interface_t>
 80a031c:	4628      	mov	r0, r5
 80a031e:	f7ff fec9 	bl	80a00b4 <__cxa_guard_release>
 80a0322:	4a16      	ldr	r2, [pc, #88]	; (80a037c <_Z8initRFID6String+0xa0>)
 80a0324:	4916      	ldr	r1, [pc, #88]	; (80a0380 <_Z8initRFID6String+0xa4>)
 80a0326:	4814      	ldr	r0, [pc, #80]	; (80a0378 <_Z8initRFID6String+0x9c>)
 80a0328:	f005 f8d2 	bl	80a54d0 <__aeabi_atexit>
    }
    void begin() {
        instance().begin();
    }
    void begin(uint16_t ss_pin) {
        instance().begin(ss_pin);
 80a032c:	2100      	movs	r1, #0
 80a032e:	4812      	ldr	r0, [pc, #72]	; (80a0378 <_Z8initRFID6String+0x9c>)
 80a0330:	f003 fbb2 	bl	80a3a98 <_ZN8SPIClass5beginEt>
  
    SPI.begin(D0);      // Initiate  SPI bus
    //Particle.process();
    delay(50);
 80a0334:	2032      	movs	r0, #50	; 0x32
 80a0336:	f004 fb7f 	bl	80a4a38 <delay>
    mfrc522_Charger1.PCD_Init();   // Initiate MFRC522
 80a033a:	4812      	ldr	r0, [pc, #72]	; (80a0384 <_Z8initRFID6String+0xa8>)
 80a033c:	f001 fc44 	bl	80a1bc8 <_ZN7MFRC5228PCD_InitEv>
    delay(500);
 80a0340:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a0344:	f004 fb78 	bl	80a4a38 <delay>
    mfrc522_Charger2.PCD_Init();   // Initiate MFRC522
 80a0348:	480f      	ldr	r0, [pc, #60]	; (80a0388 <_Z8initRFID6String+0xac>)
 80a034a:	f001 fc3d 	bl	80a1bc8 <_ZN7MFRC5228PCD_InitEv>
    ////mfrc522_Charger1.PCD_SetAntennaGain(mfrc522.RxGain_max);
    mfrc522_Charger1.PCD_SetAntennaGain(mfrc522_Charger1.RxGain_max);
 80a034e:	2170      	movs	r1, #112	; 0x70
 80a0350:	480c      	ldr	r0, [pc, #48]	; (80a0384 <_Z8initRFID6String+0xa8>)
 80a0352:	f001 fc74 	bl	80a1c3e <_ZN7MFRC52218PCD_SetAntennaGainEh>
    mfrc522_Charger2.PCD_SetAntennaGain(mfrc522_Charger2.RxGain_max);
 80a0356:	2170      	movs	r1, #112	; 0x70
 80a0358:	480b      	ldr	r0, [pc, #44]	; (80a0388 <_Z8initRFID6String+0xac>)
 80a035a:	f001 fc70 	bl	80a1c3e <_ZN7MFRC52218PCD_SetAntennaGainEh>
    
    DEBUGPORT.println("Approach your card to the reader...");
 80a035e:	f004 fd2b 	bl	80a4db8 <_Z16_fetch_usbserialv>
 80a0362:	490a      	ldr	r1, [pc, #40]	; (80a038c <_Z8initRFID6String+0xb0>)
 80a0364:	f004 f8fd 	bl	80a4562 <_ZN5Print7printlnEPKc>
    DEBUGPORT.println();    
 80a0368:	f004 fd26 	bl	80a4db8 <_Z16_fetch_usbserialv>
 80a036c:	f004 f8ed 	bl	80a454a <_ZN5Print7printlnEv>
    return 1;
}
 80a0370:	2001      	movs	r0, #1
 80a0372:	bd38      	pop	{r3, r4, r5, pc}
 80a0374:	20000244 	.word	0x20000244
 80a0378:	20000248 	.word	0x20000248
 80a037c:	20000240 	.word	0x20000240
 80a0380:	080a02a9 	.word	0x080a02a9
 80a0384:	20000521 	.word	0x20000521
 80a0388:	2000052f 	.word	0x2000052f
 80a038c:	080a81bc 	.word	0x080a81bc

080a0390 <_ZN10CloudClass7processEv>:
    static void process(void) {
 80a0390:	b508      	push	{r3, lr}
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a0392:	f003 f8d7 	bl	80a3544 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a0396:	4b03      	ldr	r3, [pc, #12]	; (80a03a4 <_ZN10CloudClass7processEv+0x14>)
 80a0398:	6018      	str	r0, [r3, #0]
    }
 80a039a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    		spark_process();
 80a039e:	f003 bae9 	b.w	80a3974 <spark_process>
 80a03a2:	bf00      	nop
 80a03a4:	20000600 	.word	0x20000600

080a03a8 <_ZN10JsonWriter11startObjectEv>:
	bool startObject() { return startObjectOrArray('{', '}'); };
 80a03a8:	227d      	movs	r2, #125	; 0x7d
 80a03aa:	217b      	movs	r1, #123	; 0x7b
 80a03ac:	f002 be3b 	b.w	80a3026 <_ZN10JsonWriter18startObjectOrArrayEcc>

080a03b0 <_Z18bytesArrToFloatArrPcjPfj>:

    return output;
}

bool bytesArrToFloatArr(char * Arr, unsigned int ArrLen, float * OutputArr, unsigned int FloatLen)
{
 80a03b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    //FloatTriplet TriOutput;
    for(int i=0; (i<FloatLen) && (4*i+3 < ArrLen); i++)
 80a03b2:	2400      	movs	r4, #0
 80a03b4:	0889      	lsrs	r1, r1, #2
 80a03b6:	429c      	cmp	r4, r3
 80a03b8:	d018      	beq.n	80a03ec <_Z18bytesArrToFloatArrPcjPfj+0x3c>
 80a03ba:	428c      	cmp	r4, r1
 80a03bc:	f100 0004 	add.w	r0, r0, #4
 80a03c0:	d014      	beq.n	80a03ec <_Z18bytesArrToFloatArrPcjPfj+0x3c>
    {
        float output;

        *((unsigned char *)(&output) + 3) = (unsigned char) Arr[4*i+0];
 80a03c2:	f810 5c04 	ldrb.w	r5, [r0, #-4]
 80a03c6:	f88d 5007 	strb.w	r5, [sp, #7]
        *((unsigned char *)(&output) + 2) = Arr[4*i+1];
 80a03ca:	f810 5c03 	ldrb.w	r5, [r0, #-3]
 80a03ce:	f88d 5006 	strb.w	r5, [sp, #6]
        *((unsigned char *)(&output) + 1) = Arr[4*i+2];
 80a03d2:	f810 5c02 	ldrb.w	r5, [r0, #-2]
 80a03d6:	f88d 5005 	strb.w	r5, [sp, #5]
        *((unsigned char *)(&output) + 0) = Arr[4*i+3];
 80a03da:	f810 5c01 	ldrb.w	r5, [r0, #-1]
 80a03de:	f88d 5004 	strb.w	r5, [sp, #4]
        
        OutputArr[i] = output;
 80a03e2:	9d01      	ldr	r5, [sp, #4]
 80a03e4:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
    for(int i=0; (i<FloatLen) && (4*i+3 < ArrLen); i++)
 80a03e8:	3401      	adds	r4, #1
 80a03ea:	e7e4      	b.n	80a03b6 <_Z18bytesArrToFloatArrPcjPfj+0x6>
    }

    return true;
}
 80a03ec:	2001      	movs	r0, #1
 80a03ee:	b003      	add	sp, #12
 80a03f0:	bd30      	pop	{r4, r5, pc}
	...

080a03f4 <_Z11stringParsePci>:
    }

    return TriOutput;
}
*/
int stringParse(char * buf, int buflen){
 80a03f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  String cmdValue;
  int Charger=0;
  for (int i=0; i<buflen; i++){
 80a03f8:	f04f 0800 	mov.w	r8, #0
int stringParse(char * buf, int buflen){
 80a03fc:	b09d      	sub	sp, #116	; 0x74
 80a03fe:	4605      	mov	r5, r0
 80a0400:	460e      	mov	r6, r1
  String cmdValue;
 80a0402:	a804      	add	r0, sp, #16
 80a0404:	49c4      	ldr	r1, [pc, #784]	; (80a0718 <_Z11stringParsePci+0x324>)
 80a0406:	f003 ff13 	bl	80a4230 <_ZN6StringC1EPKc>
  int Charger=0;
 80a040a:	4647      	mov	r7, r8
  for (int i=0; i<buflen; i++){
 80a040c:	45b0      	cmp	r8, r6
 80a040e:	f280 81d9 	bge.w	80a07c4 <_Z11stringParsePci+0x3d0>
    if(buf[i]==0x0F && i+2>=buflen) //error check?
 80a0412:	782b      	ldrb	r3, [r5, #0]
 80a0414:	2b0f      	cmp	r3, #15
 80a0416:	d108      	bne.n	80a042a <_Z11stringParsePci+0x36>
 80a0418:	f108 0302 	add.w	r3, r8, #2
 80a041c:	429e      	cmp	r6, r3
 80a041e:	dc04      	bgt.n	80a042a <_Z11stringParsePci+0x36>
    {
      DEBUGPORT.println("E");
 80a0420:	f004 fcca 	bl	80a4db8 <_Z16_fetch_usbserialv>
 80a0424:	49bd      	ldr	r1, [pc, #756]	; (80a071c <_Z11stringParsePci+0x328>)
 80a0426:	f004 f89c 	bl	80a4562 <_ZN5Print7printlnEPKc>
    }
    if((buf[i]==0x0F || buf[i]==0x0E) && i+2<buflen) //we detect a command-character and the next two characters exists
 80a042a:	462c      	mov	r4, r5
 80a042c:	f814 3b01 	ldrb.w	r3, [r4], #1
 80a0430:	f1a3 020e 	sub.w	r2, r3, #14
 80a0434:	2a01      	cmp	r2, #1
 80a0436:	f200 80f0 	bhi.w	80a061a <_Z11stringParsePci+0x226>
 80a043a:	f108 0202 	add.w	r2, r8, #2
 80a043e:	42b2      	cmp	r2, r6
 80a0440:	f280 80eb 	bge.w	80a061a <_Z11stringParsePci+0x226>
      {
        Charger=1;  
      }
      else
      {
        Charger=2;
 80a0444:	2b0f      	cmp	r3, #15
 80a0446:	bf0c      	ite	eq
 80a0448:	2701      	moveq	r7, #1
 80a044a:	2702      	movne	r7, #2
      }
      DEBUGPORT.print("Charger "+String(Charger)+": ");
 80a044c:	f004 fcb4 	bl	80a4db8 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
 80a0450:	49b3      	ldr	r1, [pc, #716]	; (80a0720 <_Z11stringParsePci+0x32c>)
 80a0452:	4681      	mov	r9, r0
 80a0454:	a818      	add	r0, sp, #96	; 0x60
 80a0456:	f003 feeb 	bl	80a4230 <_ZN6StringC1EPKc>
 80a045a:	220a      	movs	r2, #10
 80a045c:	4639      	mov	r1, r7
 80a045e:	a814      	add	r0, sp, #80	; 0x50
 80a0460:	f003 ff5b 	bl	80a431a <_ZN6StringC1Eih>
 80a0464:	a914      	add	r1, sp, #80	; 0x50
 80a0466:	a818      	add	r0, sp, #96	; 0x60
 80a0468:	f003 ffe1 	bl	80a442e <_ZplRK15StringSumHelperRK6String>
 80a046c:	49ad      	ldr	r1, [pc, #692]	; (80a0724 <_Z11stringParsePci+0x330>)
 80a046e:	f003 ffea 	bl	80a4446 <_ZplRK15StringSumHelperPKc>
 80a0472:	6801      	ldr	r1, [r0, #0]
 80a0474:	4648      	mov	r0, r9
 80a0476:	f004 f861 	bl	80a453c <_ZN5Print5printEPKc>
 80a047a:	a814      	add	r0, sp, #80	; 0x50
 80a047c:	f003 fe8e 	bl	80a419c <_ZN6StringD1Ev>
class StringSumHelper : public String
 80a0480:	a818      	add	r0, sp, #96	; 0x60
 80a0482:	f003 fe8b 	bl	80a419c <_ZN6StringD1Ev>
      String measurements;
 80a0486:	49a4      	ldr	r1, [pc, #656]	; (80a0718 <_Z11stringParsePci+0x324>)
 80a0488:	a808      	add	r0, sp, #32
 80a048a:	f003 fed1 	bl	80a4230 <_ZN6StringC1EPKc>
      switch (buf[i+1])
 80a048e:	7823      	ldrb	r3, [r4, #0]
 80a0490:	3b01      	subs	r3, #1
 80a0492:	2b05      	cmp	r3, #5
 80a0494:	f200 80be 	bhi.w	80a0614 <_Z11stringParsePci+0x220>
 80a0498:	e8df f013 	tbh	[pc, r3, lsl #1]
 80a049c:	00560006 	.word	0x00560006
 80a04a0:	00eb00c7 	.word	0x00eb00c7
 80a04a4:	01870164 	.word	0x01870164
      {
        case 1:
          //Phase Voltage
          if(buflen>4)
 80a04a8:	2e04      	cmp	r6, #4
 80a04aa:	dd47      	ble.n	80a053c <_Z11stringParsePci+0x148>
          {
              //Voltage[Charger-1] = bytesToFloat(buf[i+2], buf[i+3], buf[i+4], buf[i+5]);
              float VoltageArr[3];
              if(bytesArrToFloatArr(&buf[i+2], 12, VoltageArr,3))
 80a04ac:	1ca8      	adds	r0, r5, #2
 80a04ae:	2303      	movs	r3, #3
 80a04b0:	210c      	movs	r1, #12
 80a04b2:	aa01      	add	r2, sp, #4
 80a04b4:	f7ff ff7c 	bl	80a03b0 <_Z18bytesArrToFloatArrPcjPfj>
 80a04b8:	4d9b      	ldr	r5, [pc, #620]	; (80a0728 <_Z11stringParsePci+0x334>)
 80a04ba:	f107 39ff 	add.w	r9, r7, #4294967295
          //Line Voltage
          if(buflen>4)
          {
              //Voltage[Charger-1] = bytesToFloat(buf[i+2], buf[i+3], buf[i+4], buf[i+5]);
              float VoltageArr[3];
              if(bytesArrToFloatArr(&buf[i+2], 12, VoltageArr,3))
 80a04be:	b148      	cbz	r0, 80a04d4 <_Z11stringParsePci+0xe0>
              {
                //Current[Charger-1] = (CurrentArr[0]+CurrentArr[1]+CurrentArr[2])/3;  
                for(int i=0;i<3;i++)
                {
                    LineVoltage[Charger-1][i]=VoltageArr[i];
 80a04c0:	230c      	movs	r3, #12
 80a04c2:	fb03 f309 	mul.w	r3, r3, r9
 80a04c6:	9901      	ldr	r1, [sp, #4]
 80a04c8:	18ea      	adds	r2, r5, r3
 80a04ca:	50e9      	str	r1, [r5, r3]
 80a04cc:	9b02      	ldr	r3, [sp, #8]
 80a04ce:	6053      	str	r3, [r2, #4]
 80a04d0:	9b03      	ldr	r3, [sp, #12]
 80a04d2:	6093      	str	r3, [r2, #8]
                }
                //Voltage[Charger-1] = {VoltageArr[0],VoltageArr[1],VoltageArr[2]};
              }
              DEBUGPORT.print("Voltage: "+String(LineVoltage[Charger-1][0],4)+" "+String(LineVoltage[Charger-1][1],4)+" "+String(LineVoltage[Charger-1][2],4));
 80a04d4:	f004 fc70 	bl	80a4db8 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
 80a04d8:	4994      	ldr	r1, [pc, #592]	; (80a072c <_Z11stringParsePci+0x338>)
 80a04da:	4682      	mov	sl, r0
 80a04dc:	a810      	add	r0, sp, #64	; 0x40
 80a04de:	f003 fea7 	bl	80a4230 <_ZN6StringC1EPKc>
 80a04e2:	230c      	movs	r3, #12
 80a04e4:	fb03 f309 	mul.w	r3, r3, r9
 80a04e8:	2204      	movs	r2, #4
 80a04ea:	58e9      	ldr	r1, [r5, r3]
 80a04ec:	a80c      	add	r0, sp, #48	; 0x30
 80a04ee:	eb05 0903 	add.w	r9, r5, r3
 80a04f2:	f003 ff4c 	bl	80a438e <_ZN6StringC1Efi>
 80a04f6:	a90c      	add	r1, sp, #48	; 0x30
 80a04f8:	a810      	add	r0, sp, #64	; 0x40
 80a04fa:	f003 ff98 	bl	80a442e <_ZplRK15StringSumHelperRK6String>
 80a04fe:	498c      	ldr	r1, [pc, #560]	; (80a0730 <_Z11stringParsePci+0x33c>)
 80a0500:	f003 ffa1 	bl	80a4446 <_ZplRK15StringSumHelperPKc>
 80a0504:	4605      	mov	r5, r0
 80a0506:	2204      	movs	r2, #4
 80a0508:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80a050c:	a814      	add	r0, sp, #80	; 0x50
 80a050e:	f003 ff3e 	bl	80a438e <_ZN6StringC1Efi>
 80a0512:	4628      	mov	r0, r5
 80a0514:	a914      	add	r1, sp, #80	; 0x50
 80a0516:	f003 ff8a 	bl	80a442e <_ZplRK15StringSumHelperRK6String>
 80a051a:	4985      	ldr	r1, [pc, #532]	; (80a0730 <_Z11stringParsePci+0x33c>)
 80a051c:	f003 ff93 	bl	80a4446 <_ZplRK15StringSumHelperPKc>
 80a0520:	4605      	mov	r5, r0
 80a0522:	2204      	movs	r2, #4
 80a0524:	f8d9 1008 	ldr.w	r1, [r9, #8]
 80a0528:	a818      	add	r0, sp, #96	; 0x60
 80a052a:	f003 ff30 	bl	80a438e <_ZN6StringC1Efi>
 80a052e:	a918      	add	r1, sp, #96	; 0x60
 80a0530:	4628      	mov	r0, r5
 80a0532:	f003 ff7c 	bl	80a442e <_ZplRK15StringSumHelperRK6String>
 80a0536:	6801      	ldr	r1, [r0, #0]
 80a0538:	4650      	mov	r0, sl
 80a053a:	e0d9      	b.n	80a06f0 <_Z11stringParsePci+0x2fc>
              DEBUGPORT.print("did not receive enough voltage data");
 80a053c:	f004 fc3c 	bl	80a4db8 <_Z16_fetch_usbserialv>
 80a0540:	497c      	ldr	r1, [pc, #496]	; (80a0734 <_Z11stringParsePci+0x340>)
              DEBUGPORT.print("did not receive enough energy data");
 80a0542:	f003 fffb 	bl	80a453c <_ZN5Print5printEPKc>
 80a0546:	e065      	b.n	80a0614 <_Z11stringParsePci+0x220>
          if(buflen>12) //(buflen>4)
 80a0548:	2e0c      	cmp	r6, #12
 80a054a:	dd6a      	ble.n	80a0622 <_Z11stringParsePci+0x22e>
              if(bytesArrToFloatArr(&buf[i+2], 12, Current[Charger-1],3))
 80a054c:	210c      	movs	r1, #12
 80a054e:	f107 3aff 	add.w	sl, r7, #4294967295
 80a0552:	fb01 fb0a 	mul.w	fp, r1, sl
 80a0556:	4b78      	ldr	r3, [pc, #480]	; (80a0738 <_Z11stringParsePci+0x344>)
 80a0558:	1ca8      	adds	r0, r5, #2
 80a055a:	eb03 090b 	add.w	r9, r3, fp
 80a055e:	464a      	mov	r2, r9
 80a0560:	2303      	movs	r3, #3
 80a0562:	f7ff ff25 	bl	80a03b0 <_Z18bytesArrToFloatArrPcjPfj>
              DEBUGPORT.print("Current: ");
 80a0566:	f004 fc27 	bl	80a4db8 <_Z16_fetch_usbserialv>
 80a056a:	4974      	ldr	r1, [pc, #464]	; (80a073c <_Z11stringParsePci+0x348>)
 80a056c:	f003 ffe6 	bl	80a453c <_ZN5Print5printEPKc>
              DEBUGPORT.print(Current[Charger-1][0],4);DEBUGPORT.print(" ");
 80a0570:	f004 fc22 	bl	80a4db8 <_Z16_fetch_usbserialv>
 80a0574:	4b70      	ldr	r3, [pc, #448]	; (80a0738 <_Z11stringParsePci+0x344>)
 80a0576:	2204      	movs	r2, #4
 80a0578:	461d      	mov	r5, r3
 80a057a:	f853 100b 	ldr.w	r1, [r3, fp]
 80a057e:	f004 f8d7 	bl	80a4730 <_ZN5Print5printEfi>
 80a0582:	f004 fc19 	bl	80a4db8 <_Z16_fetch_usbserialv>
 80a0586:	496a      	ldr	r1, [pc, #424]	; (80a0730 <_Z11stringParsePci+0x33c>)
 80a0588:	f003 ffd8 	bl	80a453c <_ZN5Print5printEPKc>
              DEBUGPORT.print(Current[Charger-1][1],4);DEBUGPORT.print(" ");
 80a058c:	f004 fc14 	bl	80a4db8 <_Z16_fetch_usbserialv>
 80a0590:	2204      	movs	r2, #4
 80a0592:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80a0596:	f004 f8cb 	bl	80a4730 <_ZN5Print5printEfi>
 80a059a:	f004 fc0d 	bl	80a4db8 <_Z16_fetch_usbserialv>
 80a059e:	4964      	ldr	r1, [pc, #400]	; (80a0730 <_Z11stringParsePci+0x33c>)
 80a05a0:	f003 ffcc 	bl	80a453c <_ZN5Print5printEPKc>
              DEBUGPORT.println(Current[Charger-1][2],4);
 80a05a4:	f004 fc08 	bl	80a4db8 <_Z16_fetch_usbserialv>
 80a05a8:	2204      	movs	r2, #4
 80a05aa:	f8d9 1008 	ldr.w	r1, [r9, #8]
 80a05ae:	f004 f8dc 	bl	80a476a <_ZN5Print7printlnEfi>
              if((Current[Charger-1][0]+Current[Charger-1][1]+Current[Charger-1][2])<1)
 80a05b2:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80a05b6:	f855 000b 	ldr.w	r0, [r5, fp]
 80a05ba:	f005 fd61 	bl	80a6080 <__addsf3>
 80a05be:	f8d9 1008 	ldr.w	r1, [r9, #8]
 80a05c2:	f005 fd5d 	bl	80a6080 <__addsf3>
 80a05c6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80a05ca:	f005 ffff 	bl	80a65cc <__aeabi_fcmplt>
 80a05ce:	4d5c      	ldr	r5, [pc, #368]	; (80a0740 <_Z11stringParsePci+0x34c>)
 80a05d0:	b110      	cbz	r0, 80a05d8 <_Z11stringParsePci+0x1e4>
                numberOfZeroReadings[Charger-1]++;
 80a05d2:	f855 002a 	ldr.w	r0, [r5, sl, lsl #2]
 80a05d6:	3001      	adds	r0, #1
 80a05d8:	4b5a      	ldr	r3, [pc, #360]	; (80a0744 <_Z11stringParsePci+0x350>)
 80a05da:	f845 002a 	str.w	r0, [r5, sl, lsl #2]
              for(int i=18;i>=0;i--)
 80a05de:	f1a3 0a4c 	sub.w	sl, r3, #76	; 0x4c
                   CurrentList[i+1]= CurrentList[i];
 80a05e2:	f853 2c04 	ldr.w	r2, [r3, #-4]
 80a05e6:	f843 2904 	str.w	r2, [r3], #-4
              for(int i=18;i>=0;i--)
 80a05ea:	459a      	cmp	sl, r3
 80a05ec:	d1f9      	bne.n	80a05e2 <_Z11stringParsePci+0x1ee>
              CurrentList[0]=(Current[0][0]+Current[0][1]+Current[0][2]);//numberOfZeroReadings[0];
 80a05ee:	4b52      	ldr	r3, [pc, #328]	; (80a0738 <_Z11stringParsePci+0x344>)
 80a05f0:	f8d3 9008 	ldr.w	r9, [r3, #8]
 80a05f4:	6859      	ldr	r1, [r3, #4]
 80a05f6:	6818      	ldr	r0, [r3, #0]
 80a05f8:	f005 fd42 	bl	80a6080 <__addsf3>
 80a05fc:	4649      	mov	r1, r9
 80a05fe:	f005 fd3f 	bl	80a6080 <__addsf3>
 80a0602:	f8ca 0000 	str.w	r0, [sl]
              CurrentList[1]=numberOfZeroReadings[0];
 80a0606:	6828      	ldr	r0, [r5, #0]
 80a0608:	f005 fdee 	bl	80a61e8 <__aeabi_i2f>
              CurrentList[2]=Current[0][2];
 80a060c:	f8ca 9008 	str.w	r9, [sl, #8]
              CurrentList[1]=numberOfZeroReadings[0];
 80a0610:	f8ca 0004 	str.w	r0, [sl, #4]
      String measurements;
 80a0614:	a808      	add	r0, sp, #32
 80a0616:	f003 fdc1 	bl	80a419c <_ZN6StringD1Ev>
  for (int i=0; i<buflen; i++){
 80a061a:	4625      	mov	r5, r4
 80a061c:	f108 0801 	add.w	r8, r8, #1
 80a0620:	e6f4      	b.n	80a040c <_Z11stringParsePci+0x18>
              DEBUGPORT.print("did not receive enough current data");
 80a0622:	f004 fbc9 	bl	80a4db8 <_Z16_fetch_usbserialv>
 80a0626:	4948      	ldr	r1, [pc, #288]	; (80a0748 <_Z11stringParsePci+0x354>)
 80a0628:	e78b      	b.n	80a0542 <_Z11stringParsePci+0x14e>
          if(buflen>4)
 80a062a:	2e04      	cmp	r6, #4
 80a062c:	dd1d      	ble.n	80a066a <_Z11stringParsePci+0x276>
              Frequency[0] = bytesToFloat(buf[i+2], buf[i+3], buf[i+4], buf[i+5]);
 80a062e:	78e2      	ldrb	r2, [r4, #3]
 80a0630:	78a1      	ldrb	r1, [r4, #2]
 80a0632:	7923      	ldrb	r3, [r4, #4]
    *((unsigned char *)(&output) + 3) = b0;
 80a0634:	7860      	ldrb	r0, [r4, #1]
    *((unsigned char *)(&output) + 1) = b2;
 80a0636:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
    *((unsigned char *)(&output) + 2) = b1;
 80a063a:	f88d 1062 	strb.w	r1, [sp, #98]	; 0x62
    *((unsigned char *)(&output) + 3) = b0;
 80a063e:	f88d 0063 	strb.w	r0, [sp, #99]	; 0x63
    *((unsigned char *)(&output) + 0) = b3;
 80a0642:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
    return output;
 80a0646:	9b18      	ldr	r3, [sp, #96]	; 0x60
              Frequency[0] = bytesToFloat(buf[i+2], buf[i+3], buf[i+4], buf[i+5]);
 80a0648:	4d40      	ldr	r5, [pc, #256]	; (80a074c <_Z11stringParsePci+0x358>)
 80a064a:	602b      	str	r3, [r5, #0]
              Frequency[1]=Frequency[0];
 80a064c:	606b      	str	r3, [r5, #4]
              DEBUGPORT.print("Frequency: ");
 80a064e:	f004 fbb3 	bl	80a4db8 <_Z16_fetch_usbserialv>
 80a0652:	493f      	ldr	r1, [pc, #252]	; (80a0750 <_Z11stringParsePci+0x35c>)
 80a0654:	f003 ff72 	bl	80a453c <_ZN5Print5printEPKc>
              DEBUGPORT.print(Frequency[Charger-1],4);
 80a0658:	f004 fbae 	bl	80a4db8 <_Z16_fetch_usbserialv>
 80a065c:	2204      	movs	r2, #4
 80a065e:	1e7b      	subs	r3, r7, #1
 80a0660:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
              DEBUGPORT.print(Energy[Charger-1],4);
 80a0664:	f004 f864 	bl	80a4730 <_ZN5Print5printEfi>
 80a0668:	e7d4      	b.n	80a0614 <_Z11stringParsePci+0x220>
              DEBUGPORT.print("did not receive enough frequency data");
 80a066a:	f004 fba5 	bl	80a4db8 <_Z16_fetch_usbserialv>
 80a066e:	4939      	ldr	r1, [pc, #228]	; (80a0754 <_Z11stringParsePci+0x360>)
 80a0670:	e767      	b.n	80a0542 <_Z11stringParsePci+0x14e>
          if(buflen>4)
 80a0672:	2e04      	cmp	r6, #4
 80a0674:	dd4b      	ble.n	80a070e <_Z11stringParsePci+0x31a>
              if(bytesArrToFloatArr(&buf[i+2], 12, Power[Charger-1],3))
 80a0676:	210c      	movs	r1, #12
 80a0678:	f107 3bff 	add.w	fp, r7, #4294967295
 80a067c:	fb01 fb0b 	mul.w	fp, r1, fp
 80a0680:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 80a0760 <_Z11stringParsePci+0x36c>
 80a0684:	2303      	movs	r3, #3
 80a0686:	eb0a 090b 	add.w	r9, sl, fp
 80a068a:	464a      	mov	r2, r9
 80a068c:	1ca8      	adds	r0, r5, #2
 80a068e:	f7ff fe8f 	bl	80a03b0 <_Z18bytesArrToFloatArrPcjPfj>
              DEBUGPORT.print("Power: "+String(Power[Charger-1][0],4)+" "+String(Power[Charger-1][1],4)+" "+String(Power[Charger-1][2],4));              
 80a0692:	f004 fb91 	bl	80a4db8 <_Z16_fetch_usbserialv>
 80a0696:	4930      	ldr	r1, [pc, #192]	; (80a0758 <_Z11stringParsePci+0x364>)
 80a0698:	4605      	mov	r5, r0
 80a069a:	a810      	add	r0, sp, #64	; 0x40
 80a069c:	f003 fdc8 	bl	80a4230 <_ZN6StringC1EPKc>
 80a06a0:	2204      	movs	r2, #4
 80a06a2:	f85a 100b 	ldr.w	r1, [sl, fp]
 80a06a6:	a80c      	add	r0, sp, #48	; 0x30
 80a06a8:	f003 fe71 	bl	80a438e <_ZN6StringC1Efi>
 80a06ac:	a90c      	add	r1, sp, #48	; 0x30
 80a06ae:	a810      	add	r0, sp, #64	; 0x40
 80a06b0:	f003 febd 	bl	80a442e <_ZplRK15StringSumHelperRK6String>
 80a06b4:	491e      	ldr	r1, [pc, #120]	; (80a0730 <_Z11stringParsePci+0x33c>)
 80a06b6:	f003 fec6 	bl	80a4446 <_ZplRK15StringSumHelperPKc>
 80a06ba:	4682      	mov	sl, r0
 80a06bc:	2204      	movs	r2, #4
 80a06be:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80a06c2:	a814      	add	r0, sp, #80	; 0x50
 80a06c4:	f003 fe63 	bl	80a438e <_ZN6StringC1Efi>
 80a06c8:	4650      	mov	r0, sl
 80a06ca:	a914      	add	r1, sp, #80	; 0x50
 80a06cc:	f003 feaf 	bl	80a442e <_ZplRK15StringSumHelperRK6String>
 80a06d0:	4917      	ldr	r1, [pc, #92]	; (80a0730 <_Z11stringParsePci+0x33c>)
 80a06d2:	f003 feb8 	bl	80a4446 <_ZplRK15StringSumHelperPKc>
 80a06d6:	4682      	mov	sl, r0
 80a06d8:	2204      	movs	r2, #4
 80a06da:	f8d9 1008 	ldr.w	r1, [r9, #8]
 80a06de:	a818      	add	r0, sp, #96	; 0x60
 80a06e0:	f003 fe55 	bl	80a438e <_ZN6StringC1Efi>
 80a06e4:	a918      	add	r1, sp, #96	; 0x60
 80a06e6:	4650      	mov	r0, sl
 80a06e8:	f003 fea1 	bl	80a442e <_ZplRK15StringSumHelperRK6String>
 80a06ec:	6801      	ldr	r1, [r0, #0]
 80a06ee:	4628      	mov	r0, r5
              DEBUGPORT.print("Voltage: "+String(LineVoltage[Charger-1][0],4)+" "+String(LineVoltage[Charger-1][1],4)+" "+String(LineVoltage[Charger-1][2],4));
 80a06f0:	f003 ff24 	bl	80a453c <_ZN5Print5printEPKc>
 80a06f4:	a818      	add	r0, sp, #96	; 0x60
 80a06f6:	f003 fd51 	bl	80a419c <_ZN6StringD1Ev>
 80a06fa:	a814      	add	r0, sp, #80	; 0x50
 80a06fc:	f003 fd4e 	bl	80a419c <_ZN6StringD1Ev>
 80a0700:	a80c      	add	r0, sp, #48	; 0x30
 80a0702:	f003 fd4b 	bl	80a419c <_ZN6StringD1Ev>
class StringSumHelper : public String
 80a0706:	a810      	add	r0, sp, #64	; 0x40
 80a0708:	f003 fd48 	bl	80a419c <_ZN6StringD1Ev>
 80a070c:	e782      	b.n	80a0614 <_Z11stringParsePci+0x220>
              DEBUGPORT.print("did not receive enough power data");
 80a070e:	f004 fb53 	bl	80a4db8 <_Z16_fetch_usbserialv>
 80a0712:	4912      	ldr	r1, [pc, #72]	; (80a075c <_Z11stringParsePci+0x368>)
 80a0714:	e715      	b.n	80a0542 <_Z11stringParsePci+0x14e>
 80a0716:	bf00      	nop
 80a0718:	080a86c9 	.word	0x080a86c9
 80a071c:	080a81e0 	.word	0x080a81e0
 80a0720:	080a81e2 	.word	0x080a81e2
 80a0724:	080a81f2 	.word	0x080a81f2
 80a0728:	200002ec 	.word	0x200002ec
 80a072c:	080a81eb 	.word	0x080a81eb
 80a0730:	080a86cb 	.word	0x080a86cb
 80a0734:	080a81f5 	.word	0x080a81f5
 80a0738:	20000254 	.word	0x20000254
 80a073c:	080a8219 	.word	0x080a8219
 80a0740:	20000540 	.word	0x20000540
 80a0744:	200002b8 	.word	0x200002b8
 80a0748:	080a8223 	.word	0x080a8223
 80a074c:	200002c4 	.word	0x200002c4
 80a0750:	080a8247 	.word	0x080a8247
 80a0754:	080a8253 	.word	0x080a8253
 80a0758:	080a8279 	.word	0x080a8279
 80a075c:	080a8281 	.word	0x080a8281
 80a0760:	20000308 	.word	0x20000308
          if(buflen>4)
 80a0764:	2e04      	cmp	r6, #4
 80a0766:	dd1c      	ble.n	80a07a2 <_Z11stringParsePci+0x3ae>
              Energy[Charger-1] = bytesToFloat(buf[i+2], buf[i+3], buf[i+4], buf[i+5]);
 80a0768:	78e2      	ldrb	r2, [r4, #3]
 80a076a:	78a1      	ldrb	r1, [r4, #2]
 80a076c:	7923      	ldrb	r3, [r4, #4]
    *((unsigned char *)(&output) + 3) = b0;
 80a076e:	7860      	ldrb	r0, [r4, #1]
    *((unsigned char *)(&output) + 1) = b2;
 80a0770:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
    *((unsigned char *)(&output) + 2) = b1;
 80a0774:	f88d 1062 	strb.w	r1, [sp, #98]	; 0x62
    *((unsigned char *)(&output) + 3) = b0;
 80a0778:	f88d 0063 	strb.w	r0, [sp, #99]	; 0x63
    *((unsigned char *)(&output) + 0) = b3;
 80a077c:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
              Energy[Charger-1] = bytesToFloat(buf[i+2], buf[i+3], buf[i+4], buf[i+5]);
 80a0780:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80a0782:	4d14      	ldr	r5, [pc, #80]	; (80a07d4 <_Z11stringParsePci+0x3e0>)
 80a0784:	f107 39ff 	add.w	r9, r7, #4294967295
 80a0788:	f845 3029 	str.w	r3, [r5, r9, lsl #2]
              DEBUGPORT.print("Energy: ");
 80a078c:	f004 fb14 	bl	80a4db8 <_Z16_fetch_usbserialv>
 80a0790:	4911      	ldr	r1, [pc, #68]	; (80a07d8 <_Z11stringParsePci+0x3e4>)
 80a0792:	f003 fed3 	bl	80a453c <_ZN5Print5printEPKc>
              DEBUGPORT.print(Energy[Charger-1],4);
 80a0796:	f004 fb0f 	bl	80a4db8 <_Z16_fetch_usbserialv>
 80a079a:	2204      	movs	r2, #4
 80a079c:	f855 1029 	ldr.w	r1, [r5, r9, lsl #2]
 80a07a0:	e760      	b.n	80a0664 <_Z11stringParsePci+0x270>
              DEBUGPORT.print("did not receive enough energy data");
 80a07a2:	f004 fb09 	bl	80a4db8 <_Z16_fetch_usbserialv>
 80a07a6:	490d      	ldr	r1, [pc, #52]	; (80a07dc <_Z11stringParsePci+0x3e8>)
 80a07a8:	e6cb      	b.n	80a0542 <_Z11stringParsePci+0x14e>
          if(buflen>4)
 80a07aa:	2e04      	cmp	r6, #4
 80a07ac:	f77f aec6 	ble.w	80a053c <_Z11stringParsePci+0x148>
              if(bytesArrToFloatArr(&buf[i+2], 12, VoltageArr,3))
 80a07b0:	1ca8      	adds	r0, r5, #2
 80a07b2:	2303      	movs	r3, #3
 80a07b4:	210c      	movs	r1, #12
 80a07b6:	aa01      	add	r2, sp, #4
 80a07b8:	f7ff fdfa 	bl	80a03b0 <_Z18bytesArrToFloatArrPcjPfj>
 80a07bc:	4d08      	ldr	r5, [pc, #32]	; (80a07e0 <_Z11stringParsePci+0x3ec>)
 80a07be:	f107 39ff 	add.w	r9, r7, #4294967295
 80a07c2:	e67c      	b.n	80a04be <_Z11stringParsePci+0xca>
  String cmdValue;
 80a07c4:	a804      	add	r0, sp, #16
 80a07c6:	f003 fce9 	bl	80a419c <_ZN6StringD1Ev>
  }
  //Test only
  //Current[0][0] = 3.0;
  //Current[1][0] = 4.0;
  return Charger;
}
 80a07ca:	4638      	mov	r0, r7
 80a07cc:	b01d      	add	sp, #116	; 0x74
 80a07ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a07d2:	bf00      	nop
 80a07d4:	200002bc 	.word	0x200002bc
 80a07d8:	080a82a3 	.word	0x080a82a3
 80a07dc:	080a82ac 	.word	0x080a82ac
 80a07e0:	200002d4 	.word	0x200002d4

080a07e4 <_Z16readSerialOlimexv>:


int readSerialOlimex() {
 80a07e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a07e8:	f002 feac 	bl	80a3544 <HAL_Timer_Get_Milli_Seconds>
 80a07ec:	2600      	movs	r6, #0
 80a07ee:	270a      	movs	r7, #10
  }
  for(int k=0;k<10;k++){
  if (Serial1.available()) {
    input = Serial1.read();
    DEBUGPORT.print(input,HEX);
    DEBUGPORT.print(" ");
 80a07f0:	f8df 8088 	ldr.w	r8, [pc, #136]	; 80a087c <_Z16readSerialOlimexv+0x98>
    if (bufpos<BUFSIZE)
 80a07f4:	4c1e      	ldr	r4, [pc, #120]	; (80a0870 <_Z16readSerialOlimexv+0x8c>)
  if (Serial1.available()) {
 80a07f6:	f004 fb91 	bl	80a4f1c <_Z22__fetch_global_Serial1v>
 80a07fa:	6803      	ldr	r3, [r0, #0]
 80a07fc:	691b      	ldr	r3, [r3, #16]
 80a07fe:	4798      	blx	r3
 80a0800:	b348      	cbz	r0, 80a0856 <_Z16readSerialOlimexv+0x72>
    input = Serial1.read();
 80a0802:	f004 fb8b 	bl	80a4f1c <_Z22__fetch_global_Serial1v>
 80a0806:	6803      	ldr	r3, [r0, #0]
 80a0808:	695b      	ldr	r3, [r3, #20]
 80a080a:	4798      	blx	r3
 80a080c:	b2c5      	uxtb	r5, r0
    DEBUGPORT.print(input,HEX);
 80a080e:	f004 fad3 	bl	80a4db8 <_Z16_fetch_usbserialv>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80a0812:	2210      	movs	r2, #16
 80a0814:	4629      	mov	r1, r5
 80a0816:	f003 feae 	bl	80a4576 <_ZN5Print11printNumberEmh>
    DEBUGPORT.print(" ");
 80a081a:	f004 facd 	bl	80a4db8 <_Z16_fetch_usbserialv>
 80a081e:	4641      	mov	r1, r8
 80a0820:	f003 fe8c 	bl	80a453c <_ZN5Print5printEPKc>
    if (bufpos<BUFSIZE)
 80a0824:	6823      	ldr	r3, [r4, #0]
 80a0826:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 80a082a:	da19      	bge.n	80a0860 <_Z16readSerialOlimexv+0x7c>
    {
        buff[bufpos] = input;
 80a082c:	4a11      	ldr	r2, [pc, #68]	; (80a0874 <_Z16readSerialOlimexv+0x90>)
 80a082e:	54d5      	strb	r5, [r2, r3]
        bufpos++;    
 80a0830:	3301      	adds	r3, #1
 80a0832:	6023      	str	r3, [r4, #0]
    else
    {
        bufpos=0;
        DEBUGPORT.print("loopread>\tSerial Read Error!");
    }
    if (input == '\n') { // we hebben een regel binnen, tot aan \n   //  0x0A
 80a0834:	2d0a      	cmp	r5, #10
 80a0836:	d10e      	bne.n	80a0856 <_Z16readSerialOlimexv+0x72>
      Charger = stringParse(buff, bufpos);
 80a0838:	6821      	ldr	r1, [r4, #0]
 80a083a:	480e      	ldr	r0, [pc, #56]	; (80a0874 <_Z16readSerialOlimexv+0x90>)
 80a083c:	f7ff fdda 	bl	80a03f4 <_Z11stringParsePci>
      //Maak de buffer leeg
      for (int i=0; i<BUFSIZE; i++)
 80a0840:	2300      	movs	r3, #0
      Charger = stringParse(buff, bufpos);
 80a0842:	4606      	mov	r6, r0
      { buff[i] = 0;}
 80a0844:	461a      	mov	r2, r3
 80a0846:	490b      	ldr	r1, [pc, #44]	; (80a0874 <_Z16readSerialOlimexv+0x90>)
      for (int i=0; i<BUFSIZE; i++)
 80a0848:	3301      	adds	r3, #1
 80a084a:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
      { buff[i] = 0;}
 80a084e:	f801 2b01 	strb.w	r2, [r1], #1
      for (int i=0; i<BUFSIZE; i++)
 80a0852:	d1f9      	bne.n	80a0848 <_Z16readSerialOlimexv+0x64>
      bufpos = 0;
 80a0854:	6022      	str	r2, [r4, #0]
  for(int k=0;k<10;k++){
 80a0856:	3f01      	subs	r7, #1
 80a0858:	d1cd      	bne.n	80a07f6 <_Z16readSerialOlimexv+0x12>
    }
  }
}
return Charger;
 80a085a:	4630      	mov	r0, r6
 80a085c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        bufpos=0;
 80a0860:	2300      	movs	r3, #0
 80a0862:	6023      	str	r3, [r4, #0]
        DEBUGPORT.print("loopread>\tSerial Read Error!");
 80a0864:	f004 faa8 	bl	80a4db8 <_Z16_fetch_usbserialv>
 80a0868:	4903      	ldr	r1, [pc, #12]	; (80a0878 <_Z16readSerialOlimexv+0x94>)
 80a086a:	f003 fe67 	bl	80a453c <_ZN5Print5printEPKc>
 80a086e:	e7e1      	b.n	80a0834 <_Z16readSerialOlimexv+0x50>
 80a0870:	200004b4 	.word	0x200004b4
 80a0874:	20000354 	.word	0x20000354
 80a0878:	080a82cf 	.word	0x080a82cf
 80a087c:	080a86cb 	.word	0x080a86cb

080a0880 <_Z13activeChargerv>:
int activeCharger() {
 80a0880:	b538      	push	{r3, r4, r5, lr}
        if (Current[0][i] != 0.0) {
 80a0882:	4d13      	ldr	r5, [pc, #76]	; (80a08d0 <_Z13activeChargerv+0x50>)
 80a0884:	2100      	movs	r1, #0
 80a0886:	6828      	ldr	r0, [r5, #0]
 80a0888:	f005 fe96 	bl	80a65b8 <__aeabi_fcmpeq>
 80a088c:	b1e8      	cbz	r0, 80a08ca <_Z13activeChargerv+0x4a>
 80a088e:	2100      	movs	r1, #0
 80a0890:	6868      	ldr	r0, [r5, #4]
 80a0892:	f005 fe91 	bl	80a65b8 <__aeabi_fcmpeq>
 80a0896:	b1c0      	cbz	r0, 80a08ca <_Z13activeChargerv+0x4a>
 80a0898:	2100      	movs	r1, #0
 80a089a:	68a8      	ldr	r0, [r5, #8]
 80a089c:	f005 fe8c 	bl	80a65b8 <__aeabi_fcmpeq>
 80a08a0:	fab0 f480 	clz	r4, r0
 80a08a4:	0964      	lsrs	r4, r4, #5
        if (Current[1][i] != 0.0) {
 80a08a6:	2100      	movs	r1, #0
 80a08a8:	68e8      	ldr	r0, [r5, #12]
 80a08aa:	f005 fe85 	bl	80a65b8 <__aeabi_fcmpeq>
 80a08ae:	b148      	cbz	r0, 80a08c4 <_Z13activeChargerv+0x44>
 80a08b0:	2100      	movs	r1, #0
 80a08b2:	6928      	ldr	r0, [r5, #16]
 80a08b4:	f005 fe80 	bl	80a65b8 <__aeabi_fcmpeq>
 80a08b8:	b120      	cbz	r0, 80a08c4 <_Z13activeChargerv+0x44>
 80a08ba:	2100      	movs	r1, #0
 80a08bc:	6968      	ldr	r0, [r5, #20]
 80a08be:	f005 fe7b 	bl	80a65b8 <__aeabi_fcmpeq>
 80a08c2:	b900      	cbnz	r0, 80a08c6 <_Z13activeChargerv+0x46>
            number += 2;
 80a08c4:	3402      	adds	r4, #2
}
 80a08c6:	4620      	mov	r0, r4
 80a08c8:	bd38      	pop	{r3, r4, r5, pc}
            number += 1;
 80a08ca:	2401      	movs	r4, #1
 80a08cc:	e7eb      	b.n	80a08a6 <_Z13activeChargerv+0x26>
 80a08ce:	bf00      	nop
 80a08d0:	20000254 	.word	0x20000254

080a08d4 <_Z17maxCurrentC1_testj>:
    byte olimexMessage[4] = {0xFE, 1, setPoint, 0xFF};
 80a08d4:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
int maxCurrentC1_test(unsigned int setPoint) {
 80a08d8:	b530      	push	{r4, r5, lr}
 80a08da:	b08b      	sub	sp, #44	; 0x2c
    byte olimexMessage[4] = {0xFE, 1, setPoint, 0xFF};
 80a08dc:	f8ad 3004 	strh.w	r3, [sp, #4]
 80a08e0:	23ff      	movs	r3, #255	; 0xff
 80a08e2:	f88d 3007 	strb.w	r3, [sp, #7]
    if (TESTCASE) {
 80a08e6:	4b1f      	ldr	r3, [pc, #124]	; (80a0964 <_Z17maxCurrentC1_testj+0x90>)
int maxCurrentC1_test(unsigned int setPoint) {
 80a08e8:	4604      	mov	r4, r0
    if (TESTCASE) {
 80a08ea:	781b      	ldrb	r3, [r3, #0]
    byte olimexMessage[4] = {0xFE, 1, setPoint, 0xFF};
 80a08ec:	f88d 0006 	strb.w	r0, [sp, #6]
    if (TESTCASE) {
 80a08f0:	2b00      	cmp	r3, #0
 80a08f2:	d034      	beq.n	80a095e <_Z17maxCurrentC1_testj+0x8a>
        Serial1.write(olimexMessage,4);
 80a08f4:	f004 fb12 	bl	80a4f1c <_Z22__fetch_global_Serial1v>
 80a08f8:	2204      	movs	r2, #4
 80a08fa:	6803      	ldr	r3, [r0, #0]
 80a08fc:	eb0d 0102 	add.w	r1, sp, r2
 80a0900:	68db      	ldr	r3, [r3, #12]
 80a0902:	4798      	blx	r3
        DEBUGPORT.println("maxCurrentC1>\tNew setpoint set at "+String(setPoint)+" Amps.");
 80a0904:	f004 fa58 	bl	80a4db8 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
 80a0908:	4917      	ldr	r1, [pc, #92]	; (80a0968 <_Z17maxCurrentC1_testj+0x94>)
 80a090a:	4605      	mov	r5, r0
 80a090c:	a806      	add	r0, sp, #24
 80a090e:	f003 fc8f 	bl	80a4230 <_ZN6StringC1EPKc>
 80a0912:	220a      	movs	r2, #10
 80a0914:	4621      	mov	r1, r4
 80a0916:	a802      	add	r0, sp, #8
 80a0918:	f003 fd12 	bl	80a4340 <_ZN6StringC1Ejh>
 80a091c:	a902      	add	r1, sp, #8
 80a091e:	a806      	add	r0, sp, #24
 80a0920:	f003 fd85 	bl	80a442e <_ZplRK15StringSumHelperRK6String>
 80a0924:	4911      	ldr	r1, [pc, #68]	; (80a096c <_Z17maxCurrentC1_testj+0x98>)
 80a0926:	f003 fd8e 	bl	80a4446 <_ZplRK15StringSumHelperPKc>
 80a092a:	6801      	ldr	r1, [r0, #0]
 80a092c:	4628      	mov	r0, r5
 80a092e:	f003 fe18 	bl	80a4562 <_ZN5Print7printlnEPKc>
 80a0932:	a802      	add	r0, sp, #8
 80a0934:	f003 fc32 	bl	80a419c <_ZN6StringD1Ev>
class StringSumHelper : public String
 80a0938:	a806      	add	r0, sp, #24
 80a093a:	f003 fc2f 	bl	80a419c <_ZN6StringD1Ev>
        client.publish("HANevse/photonMaxC1", String(setPoint));
 80a093e:	220a      	movs	r2, #10
 80a0940:	4621      	mov	r1, r4
 80a0942:	a806      	add	r0, sp, #24
 80a0944:	f003 fcfc 	bl	80a4340 <_ZN6StringC1Ejh>
 80a0948:	9a06      	ldr	r2, [sp, #24]
 80a094a:	4909      	ldr	r1, [pc, #36]	; (80a0970 <_Z17maxCurrentC1_testj+0x9c>)
 80a094c:	4809      	ldr	r0, [pc, #36]	; (80a0974 <_Z17maxCurrentC1_testj+0xa0>)
 80a094e:	f001 fec2 	bl	80a26d6 <_ZN4MQTT7publishEPKcS1_>
 80a0952:	a806      	add	r0, sp, #24
 80a0954:	f003 fc22 	bl	80a419c <_ZN6StringD1Ev>
        return 0;
 80a0958:	2000      	movs	r0, #0
}
 80a095a:	b00b      	add	sp, #44	; 0x2c
 80a095c:	bd30      	pop	{r4, r5, pc}
    return 1;
 80a095e:	2001      	movs	r0, #1
 80a0960:	e7fb      	b.n	80a095a <_Z17maxCurrentC1_testj+0x86>
 80a0962:	bf00      	nop
 80a0964:	20000330 	.word	0x20000330
 80a0968:	080a8164 	.word	0x080a8164
 80a096c:	080a8187 	.word	0x080a8187
 80a0970:	080a82ec 	.word	0x080a82ec
 80a0974:	200004b8 	.word	0x200004b8

080a0978 <_Z17maxCurrentC2_testj>:
    byte olimexMessage[4] = {0xFE,2,setPoint,0xFF};
 80a0978:	f240 23fe 	movw	r3, #766	; 0x2fe
int maxCurrentC2_test(unsigned int setPoint) {
 80a097c:	b530      	push	{r4, r5, lr}
 80a097e:	b08b      	sub	sp, #44	; 0x2c
    byte olimexMessage[4] = {0xFE,2,setPoint,0xFF};
 80a0980:	f8ad 3004 	strh.w	r3, [sp, #4]
 80a0984:	23ff      	movs	r3, #255	; 0xff
 80a0986:	f88d 3007 	strb.w	r3, [sp, #7]
    if (TESTCASE) {
 80a098a:	4b1f      	ldr	r3, [pc, #124]	; (80a0a08 <_Z17maxCurrentC2_testj+0x90>)
int maxCurrentC2_test(unsigned int setPoint) {
 80a098c:	4604      	mov	r4, r0
    if (TESTCASE) {
 80a098e:	781b      	ldrb	r3, [r3, #0]
    byte olimexMessage[4] = {0xFE,2,setPoint,0xFF};
 80a0990:	f88d 0006 	strb.w	r0, [sp, #6]
    if (TESTCASE) {
 80a0994:	2b00      	cmp	r3, #0
 80a0996:	d034      	beq.n	80a0a02 <_Z17maxCurrentC2_testj+0x8a>
        Serial1.write(olimexMessage,4);
 80a0998:	f004 fac0 	bl	80a4f1c <_Z22__fetch_global_Serial1v>
 80a099c:	2204      	movs	r2, #4
 80a099e:	6803      	ldr	r3, [r0, #0]
 80a09a0:	eb0d 0102 	add.w	r1, sp, r2
 80a09a4:	68db      	ldr	r3, [r3, #12]
 80a09a6:	4798      	blx	r3
        DEBUGPORT.println("maxCurrentC2>\tNew setpoint set at "+String(setPoint)+" Amps.");
 80a09a8:	f004 fa06 	bl	80a4db8 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
 80a09ac:	4917      	ldr	r1, [pc, #92]	; (80a0a0c <_Z17maxCurrentC2_testj+0x94>)
 80a09ae:	4605      	mov	r5, r0
 80a09b0:	a806      	add	r0, sp, #24
 80a09b2:	f003 fc3d 	bl	80a4230 <_ZN6StringC1EPKc>
 80a09b6:	220a      	movs	r2, #10
 80a09b8:	4621      	mov	r1, r4
 80a09ba:	a802      	add	r0, sp, #8
 80a09bc:	f003 fcc0 	bl	80a4340 <_ZN6StringC1Ejh>
 80a09c0:	a902      	add	r1, sp, #8
 80a09c2:	a806      	add	r0, sp, #24
 80a09c4:	f003 fd33 	bl	80a442e <_ZplRK15StringSumHelperRK6String>
 80a09c8:	4911      	ldr	r1, [pc, #68]	; (80a0a10 <_Z17maxCurrentC2_testj+0x98>)
 80a09ca:	f003 fd3c 	bl	80a4446 <_ZplRK15StringSumHelperPKc>
 80a09ce:	6801      	ldr	r1, [r0, #0]
 80a09d0:	4628      	mov	r0, r5
 80a09d2:	f003 fdc6 	bl	80a4562 <_ZN5Print7printlnEPKc>
 80a09d6:	a802      	add	r0, sp, #8
 80a09d8:	f003 fbe0 	bl	80a419c <_ZN6StringD1Ev>
class StringSumHelper : public String
 80a09dc:	a806      	add	r0, sp, #24
 80a09de:	f003 fbdd 	bl	80a419c <_ZN6StringD1Ev>
        client.publish("HANevse/photonMaxC2", String(setPoint));
 80a09e2:	220a      	movs	r2, #10
 80a09e4:	4621      	mov	r1, r4
 80a09e6:	a806      	add	r0, sp, #24
 80a09e8:	f003 fcaa 	bl	80a4340 <_ZN6StringC1Ejh>
 80a09ec:	9a06      	ldr	r2, [sp, #24]
 80a09ee:	4909      	ldr	r1, [pc, #36]	; (80a0a14 <_Z17maxCurrentC2_testj+0x9c>)
 80a09f0:	4809      	ldr	r0, [pc, #36]	; (80a0a18 <_Z17maxCurrentC2_testj+0xa0>)
 80a09f2:	f001 fe70 	bl	80a26d6 <_ZN4MQTT7publishEPKcS1_>
 80a09f6:	a806      	add	r0, sp, #24
 80a09f8:	f003 fbd0 	bl	80a419c <_ZN6StringD1Ev>
        return 0;
 80a09fc:	2000      	movs	r0, #0
}
 80a09fe:	b00b      	add	sp, #44	; 0x2c
 80a0a00:	bd30      	pop	{r4, r5, pc}
    return 1;
 80a0a02:	2001      	movs	r0, #1
 80a0a04:	e7fb      	b.n	80a09fe <_Z17maxCurrentC2_testj+0x86>
 80a0a06:	bf00      	nop
 80a0a08:	20000330 	.word	0x20000330
 80a0a0c:	080a818e 	.word	0x080a818e
 80a0a10:	080a8187 	.word	0x080a8187
 80a0a14:	080a8300 	.word	0x080a8300
 80a0a18:	200004b8 	.word	0x200004b8

080a0a1c <_Z17getUserIdAtSocketi>:
    if (socket == 1+CHARGEROFFSET)
 80a0a1c:	2901      	cmp	r1, #1
String getUserIdAtSocket(int socket) {
 80a0a1e:	b510      	push	{r4, lr}
 80a0a20:	4604      	mov	r4, r0
    if (socket == 1+CHARGEROFFSET)
 80a0a22:	d104      	bne.n	80a0a2e <_Z17getUserIdAtSocketi+0x12>
        return UIDtagCharger1;
 80a0a24:	4906      	ldr	r1, [pc, #24]	; (80a0a40 <_Z17getUserIdAtSocketi+0x24>)
        return UIDtagCharger2;
 80a0a26:	f003 fc42 	bl	80a42ae <_ZN6StringC1ERKS_>
}
 80a0a2a:	4620      	mov	r0, r4
 80a0a2c:	bd10      	pop	{r4, pc}
    if (socket == 2+CHARGEROFFSET)
 80a0a2e:	2902      	cmp	r1, #2
 80a0a30:	d101      	bne.n	80a0a36 <_Z17getUserIdAtSocketi+0x1a>
        return UIDtagCharger2;
 80a0a32:	4904      	ldr	r1, [pc, #16]	; (80a0a44 <_Z17getUserIdAtSocketi+0x28>)
 80a0a34:	e7f7      	b.n	80a0a26 <_Z17getUserIdAtSocketi+0xa>
    return "00";
 80a0a36:	4904      	ldr	r1, [pc, #16]	; (80a0a48 <_Z17getUserIdAtSocketi+0x2c>)
 80a0a38:	f003 fbfa 	bl	80a4230 <_ZN6StringC1EPKc>
 80a0a3c:	e7f5      	b.n	80a0a2a <_Z17getUserIdAtSocketi+0xe>
 80a0a3e:	bf00      	nop
 80a0a40:	20000334 	.word	0x20000334
 80a0a44:	20000344 	.word	0x20000344
 80a0a48:	080a8314 	.word	0x080a8314

080a0a4c <_Z18allowUser_callbackPhj>:
void allowUser_callback(byte* payload, unsigned int length) {
 80a0a4c:	b5b0      	push	{r4, r5, r7, lr}
    char payl[length+1];
 80a0a4e:	f101 0308 	add.w	r3, r1, #8
void allowUser_callback(byte* payload, unsigned int length) {
 80a0a52:	b086      	sub	sp, #24
    char payl[length+1];
 80a0a54:	f023 0307 	bic.w	r3, r3, #7
    }
 80a0a58:	466d      	mov	r5, sp
void allowUser_callback(byte* payload, unsigned int length) {
 80a0a5a:	af00      	add	r7, sp, #0
    char payl[length+1];
 80a0a5c:	ebad 0d03 	sub.w	sp, sp, r3
void allowUser_callback(byte* payload, unsigned int length) {
 80a0a60:	460c      	mov	r4, r1
    memcpy(payl, payload, length);
 80a0a62:	460a      	mov	r2, r1
 80a0a64:	4601      	mov	r1, r0
 80a0a66:	4668      	mov	r0, sp
 80a0a68:	f006 f8d4 	bl	80a6c14 <memcpy>
    payl[length] = NULL;
 80a0a6c:	2300      	movs	r3, #0
    int port = (int) strtol(payl, &endchar, 10);
 80a0a6e:	220a      	movs	r2, #10
    payl[length] = NULL;
 80a0a70:	f80d 3004 	strb.w	r3, [sp, r4]
    int port = (int) strtol(payl, &endchar, 10);
 80a0a74:	1d39      	adds	r1, r7, #4
 80a0a76:	4668      	mov	r0, sp
 80a0a78:	f006 ff22 	bl	80a78c0 <strtol>
 80a0a7c:	4604      	mov	r4, r0
    String topic_str = "HANevse/photonConverted/";
 80a0a7e:	4925      	ldr	r1, [pc, #148]	; (80a0b14 <_Z18allowUser_callbackPhj+0xc8>)
 80a0a80:	f107 0008 	add.w	r0, r7, #8
 80a0a84:	f003 fbd4 	bl	80a4230 <_ZN6StringC1EPKc>
    topic_str.concat(port);
 80a0a88:	4621      	mov	r1, r4
 80a0a8a:	f107 0008 	add.w	r0, r7, #8
 80a0a8e:	f003 fcbd 	bl	80a440c <_ZN6String6concatEi>
    endchar = endchar + 1;
 80a0a92:	6878      	ldr	r0, [r7, #4]
    if (port == 1 + CHARGEROFFSET) 
 80a0a94:	2c01      	cmp	r4, #1
    endchar = endchar + 1;
 80a0a96:	f100 0001 	add.w	r0, r0, #1
 80a0a9a:	6078      	str	r0, [r7, #4]
    if (port == 1 + CHARGEROFFSET) 
 80a0a9c:	d009      	beq.n	80a0ab2 <_Z18allowUser_callbackPhj+0x66>
    else if (port == 2 + CHARGEROFFSET)
 80a0a9e:	2c02      	cmp	r4, #2
 80a0aa0:	d017      	beq.n	80a0ad2 <_Z18allowUser_callbackPhj+0x86>
    String topic_str = "HANevse/photonConverted/";
 80a0aa2:	f107 0008 	add.w	r0, r7, #8
 80a0aa6:	f003 fb79 	bl	80a419c <_ZN6StringD1Ev>
 80a0aaa:	46ad      	mov	sp, r5
}
 80a0aac:	3718      	adds	r7, #24
 80a0aae:	46bd      	mov	sp, r7
 80a0ab0:	bdb0      	pop	{r4, r5, r7, pc}
        port = AUTHENTICATION_CAR1;
 80a0ab2:	2405      	movs	r4, #5
    int retPi = (int) strtol(endchar, &endchar, 10);
 80a0ab4:	220a      	movs	r2, #10
 80a0ab6:	1d39      	adds	r1, r7, #4
 80a0ab8:	f006 ff02 	bl	80a78c0 <strtol>
    Pianswer = retPi; 
 80a0abc:	4b16      	ldr	r3, [pc, #88]	; (80a0b18 <_Z18allowUser_callbackPhj+0xcc>)
 80a0abe:	8018      	strh	r0, [r3, #0]
    switch(retPi) {
 80a0ac0:	3801      	subs	r0, #1
 80a0ac2:	2807      	cmp	r0, #7
 80a0ac4:	d823      	bhi.n	80a0b0e <_Z18allowUser_callbackPhj+0xc2>
 80a0ac6:	e8df f000 	tbb	[pc, r0]
 80a0aca:	1006      	.short	0x1006
 80a0acc:	1c1a1412 	.word	0x1c1a1412
 80a0ad0:	201e      	.short	0x201e
        port = AUTHENTICATION_CAR2;
 80a0ad2:	2406      	movs	r4, #6
 80a0ad4:	e7ee      	b.n	80a0ab4 <_Z18allowUser_callbackPhj+0x68>
            digitalWrite(port, HIGH);
 80a0ad6:	2101      	movs	r1, #1
 80a0ad8:	4620      	mov	r0, r4
 80a0ada:	f004 fc74 	bl	80a53c6 <digitalWrite>
            client.publish(topic_str, "successful start new charge");
 80a0ade:	4a0f      	ldr	r2, [pc, #60]	; (80a0b1c <_Z18allowUser_callbackPhj+0xd0>)
            client.publish(topic_str, "ERROR: unknown scenario");
 80a0ae0:	68b9      	ldr	r1, [r7, #8]
 80a0ae2:	480f      	ldr	r0, [pc, #60]	; (80a0b20 <_Z18allowUser_callbackPhj+0xd4>)
 80a0ae4:	f001 fdf7 	bl	80a26d6 <_ZN4MQTT7publishEPKcS1_>
 80a0ae8:	e7db      	b.n	80a0aa2 <_Z18allowUser_callbackPhj+0x56>
            client.publish(topic_str, "charger is free, but card was swiped in the last 20 sec");
 80a0aea:	4a0e      	ldr	r2, [pc, #56]	; (80a0b24 <_Z18allowUser_callbackPhj+0xd8>)
 80a0aec:	e7f8      	b.n	80a0ae0 <_Z18allowUser_callbackPhj+0x94>
            client.publish(topic_str, "charger is occupied by another user");
 80a0aee:	4a0e      	ldr	r2, [pc, #56]	; (80a0b28 <_Z18allowUser_callbackPhj+0xdc>)
 80a0af0:	e7f6      	b.n	80a0ae0 <_Z18allowUser_callbackPhj+0x94>
            digitalWrite(port, LOW);
 80a0af2:	2100      	movs	r1, #0
 80a0af4:	4620      	mov	r0, r4
 80a0af6:	f004 fc66 	bl	80a53c6 <digitalWrite>
            client.publish(topic_str, "successful stop charge session");
 80a0afa:	4a0c      	ldr	r2, [pc, #48]	; (80a0b2c <_Z18allowUser_callbackPhj+0xe0>)
 80a0afc:	e7f0      	b.n	80a0ae0 <_Z18allowUser_callbackPhj+0x94>
            client.publish(topic_str, "consecutive RFID swipe within 20s of new charge start");
 80a0afe:	4a0c      	ldr	r2, [pc, #48]	; (80a0b30 <_Z18allowUser_callbackPhj+0xe4>)
 80a0b00:	e7ee      	b.n	80a0ae0 <_Z18allowUser_callbackPhj+0x94>
            client.publish(topic_str, "you are already charging at another charger");
 80a0b02:	4a0c      	ldr	r2, [pc, #48]	; (80a0b34 <_Z18allowUser_callbackPhj+0xe8>)
 80a0b04:	e7ec      	b.n	80a0ae0 <_Z18allowUser_callbackPhj+0x94>
            client.publish(topic_str, "you are in the userlist, but not verified by admin");
 80a0b06:	4a0c      	ldr	r2, [pc, #48]	; (80a0b38 <_Z18allowUser_callbackPhj+0xec>)
 80a0b08:	e7ea      	b.n	80a0ae0 <_Z18allowUser_callbackPhj+0x94>
            client.publish(topic_str, "successful RFID read, but you are not in the userlist");
 80a0b0a:	4a0c      	ldr	r2, [pc, #48]	; (80a0b3c <_Z18allowUser_callbackPhj+0xf0>)
 80a0b0c:	e7e8      	b.n	80a0ae0 <_Z18allowUser_callbackPhj+0x94>
            client.publish(topic_str, "ERROR: unknown scenario");
 80a0b0e:	4a0c      	ldr	r2, [pc, #48]	; (80a0b40 <_Z18allowUser_callbackPhj+0xf4>)
 80a0b10:	e7e6      	b.n	80a0ae0 <_Z18allowUser_callbackPhj+0x94>
 80a0b12:	bf00      	nop
 80a0b14:	080a8317 	.word	0x080a8317
 80a0b18:	20000304 	.word	0x20000304
 80a0b1c:	080a8330 	.word	0x080a8330
 80a0b20:	200004b8 	.word	0x200004b8
 80a0b24:	080a834c 	.word	0x080a834c
 80a0b28:	080a8384 	.word	0x080a8384
 80a0b2c:	080a83a8 	.word	0x080a83a8
 80a0b30:	080a83c7 	.word	0x080a83c7
 80a0b34:	080a83fd 	.word	0x080a83fd
 80a0b38:	080a8429 	.word	0x080a8429
 80a0b3c:	080a845c 	.word	0x080a845c
 80a0b40:	080a8492 	.word	0x080a8492

080a0b44 <_Z9reconnectv>:
        maxCurrentC2(payl);
        //client.publish("HANevse/photonTest", "test photon responds");
    }
}

void reconnect(void) {
 80a0b44:	b570      	push	{r4, r5, r6, lr}
    while (!client.isConnected()) {
 80a0b46:	4c22      	ldr	r4, [pc, #136]	; (80a0bd0 <_Z9reconnectv+0x8c>)
        DEBUGPORT.print("MQTT>\tConnecting to MQTT broker...");
 80a0b48:	4d22      	ldr	r5, [pc, #136]	; (80a0bd4 <_Z9reconnectv+0x90>)
        if (client.connect("EV-Photon-test1")) {
 80a0b4a:	4e23      	ldr	r6, [pc, #140]	; (80a0bd8 <_Z9reconnectv+0x94>)
    while (!client.isConnected()) {
 80a0b4c:	4820      	ldr	r0, [pc, #128]	; (80a0bd0 <_Z9reconnectv+0x8c>)
 80a0b4e:	f001 fc54 	bl	80a23fa <_ZN4MQTT11isConnectedEv>
 80a0b52:	2800      	cmp	r0, #0
 80a0b54:	d13a      	bne.n	80a0bcc <_Z9reconnectv+0x88>
        DEBUGPORT.print("MQTT>\tConnecting to MQTT broker...");
 80a0b56:	f004 f92f 	bl	80a4db8 <_Z16_fetch_usbserialv>
 80a0b5a:	4629      	mov	r1, r5
 80a0b5c:	f003 fcee 	bl	80a453c <_ZN5Print5printEPKc>
        if (client.connect("EV-Photon-test1")) {
 80a0b60:	4631      	mov	r1, r6
 80a0b62:	4620      	mov	r0, r4
 80a0b64:	f001 fd32 	bl	80a25cc <_ZN4MQTT7connectEPKc>
 80a0b68:	b308      	cbz	r0, 80a0bae <_Z9reconnectv+0x6a>
            DEBUGPORT.println("MQTT>\tConnected");
 80a0b6a:	f004 f925 	bl	80a4db8 <_Z16_fetch_usbserialv>
 80a0b6e:	491b      	ldr	r1, [pc, #108]	; (80a0bdc <_Z9reconnectv+0x98>)
 80a0b70:	f003 fcf7 	bl	80a4562 <_ZN5Print7printlnEPKc>
            //client.subscribe("HANevse/#", client.QOS2);
            client.subscribe("HANevse/energyMeter"); //+
 80a0b74:	4620      	mov	r0, r4
 80a0b76:	491a      	ldr	r1, [pc, #104]	; (80a0be0 <_Z9reconnectv+0x9c>)
 80a0b78:	f001 ff24 	bl	80a29c4 <_ZN4MQTT9subscribeEPKc>
            client.subscribe("HANevse/allowUser");
 80a0b7c:	4620      	mov	r0, r4
 80a0b7e:	4919      	ldr	r1, [pc, #100]	; (80a0be4 <_Z9reconnectv+0xa0>)
 80a0b80:	f001 ff20 	bl	80a29c4 <_ZN4MQTT9subscribeEPKc>
            
            client.subscribe("HANevse/resetOlimex");
 80a0b84:	4620      	mov	r0, r4
 80a0b86:	4918      	ldr	r1, [pc, #96]	; (80a0be8 <_Z9reconnectv+0xa4>)
 80a0b88:	f001 ff1c 	bl	80a29c4 <_ZN4MQTT9subscribeEPKc>
            client.subscribe("HANevse/resetPhoton");
 80a0b8c:	4620      	mov	r0, r4
 80a0b8e:	4917      	ldr	r1, [pc, #92]	; (80a0bec <_Z9reconnectv+0xa8>)
 80a0b90:	f001 ff18 	bl	80a29c4 <_ZN4MQTT9subscribeEPKc>
            client.subscribe("HANevse/switchTest");
 80a0b94:	4620      	mov	r0, r4
 80a0b96:	4916      	ldr	r1, [pc, #88]	; (80a0bf0 <_Z9reconnectv+0xac>)
 80a0b98:	f001 ff14 	bl	80a29c4 <_ZN4MQTT9subscribeEPKc>
            client.subscribe("HANevse/maxC1");
 80a0b9c:	4620      	mov	r0, r4
 80a0b9e:	4915      	ldr	r1, [pc, #84]	; (80a0bf4 <_Z9reconnectv+0xb0>)
 80a0ba0:	f001 ff10 	bl	80a29c4 <_ZN4MQTT9subscribeEPKc>
            client.subscribe("HANevse/maxC2");
 80a0ba4:	4620      	mov	r0, r4
 80a0ba6:	4914      	ldr	r1, [pc, #80]	; (80a0bf8 <_Z9reconnectv+0xb4>)
 80a0ba8:	f001 ff0c 	bl	80a29c4 <_ZN4MQTT9subscribeEPKc>
 80a0bac:	e7ce      	b.n	80a0b4c <_Z9reconnectv+0x8>
            //client.subscribe("HANevse/maxC3");
            //client.subscribe("HANevse/maxC4");            
        }
        else {
            DEBUGPORT.println("MQTT>\tConnection failed");
 80a0bae:	f004 f903 	bl	80a4db8 <_Z16_fetch_usbserialv>
 80a0bb2:	4912      	ldr	r1, [pc, #72]	; (80a0bfc <_Z9reconnectv+0xb8>)
 80a0bb4:	f003 fcd5 	bl	80a4562 <_ZN5Print7printlnEPKc>
            DEBUGPORT.println("MQTT>\tRetrying...");
 80a0bb8:	f004 f8fe 	bl	80a4db8 <_Z16_fetch_usbserialv>
 80a0bbc:	4910      	ldr	r1, [pc, #64]	; (80a0c00 <_Z9reconnectv+0xbc>)
 80a0bbe:	f003 fcd0 	bl	80a4562 <_ZN5Print7printlnEPKc>
            delay(5000);
 80a0bc2:	f241 3088 	movw	r0, #5000	; 0x1388
 80a0bc6:	f003 ff37 	bl	80a4a38 <delay>
 80a0bca:	e7bf      	b.n	80a0b4c <_Z9reconnectv+0x8>
        }
    }
}
 80a0bcc:	bd70      	pop	{r4, r5, r6, pc}
 80a0bce:	bf00      	nop
 80a0bd0:	200004b8 	.word	0x200004b8
 80a0bd4:	080a84aa 	.word	0x080a84aa
 80a0bd8:	080a84cd 	.word	0x080a84cd
 80a0bdc:	080a84dd 	.word	0x080a84dd
 80a0be0:	080a84ed 	.word	0x080a84ed
 80a0be4:	080a8501 	.word	0x080a8501
 80a0be8:	080a8513 	.word	0x080a8513
 80a0bec:	080a8527 	.word	0x080a8527
 80a0bf0:	080a853b 	.word	0x080a853b
 80a0bf4:	080a854e 	.word	0x080a854e
 80a0bf8:	080a855c 	.word	0x080a855c
 80a0bfc:	080a856a 	.word	0x080a856a
 80a0c00:	080a8582 	.word	0x080a8582

080a0c04 <_ZN16JsonWriterStaticILj512EEC1Ev>:
public:
	explicit JsonWriterStatic() : JsonWriter(staticBuffer, BUFFER_SIZE) {};
 80a0c04:	b510      	push	{r4, lr}
 80a0c06:	4604      	mov	r4, r0
 80a0c08:	f44f 7200 	mov.w	r2, #512	; 0x200
 80a0c0c:	f100 0130 	add.w	r1, r0, #48	; 0x30
 80a0c10:	f002 f90e 	bl	80a2e30 <_ZN10JsonWriterC1EPcj>
 80a0c14:	4b01      	ldr	r3, [pc, #4]	; (80a0c1c <_ZN16JsonWriterStaticILj512EEC1Ev+0x18>)
 80a0c16:	4620      	mov	r0, r4
 80a0c18:	6023      	str	r3, [r4, #0]
 80a0c1a:	bd10      	pop	{r4, pc}
 80a0c1c:	080a871c 	.word	0x080a871c

080a0c20 <_ZN10JsonWriter14insertKeyValueIfEEvPKcT_>:
	void insertKeyValue(const char *key, T value) {
 80a0c20:	b570      	push	{r4, r5, r6, lr}
 80a0c22:	4604      	mov	r4, r0
 80a0c24:	460e      	mov	r6, r1
 80a0c26:	4615      	mov	r5, r2
		insertCheckSeparator();
 80a0c28:	f002 f9f2 	bl	80a3010 <_ZN10JsonWriter20insertCheckSeparatorEv>
	void insertValue(const char *value) { insertString(value, true); }
 80a0c2c:	4631      	mov	r1, r6
 80a0c2e:	4620      	mov	r0, r4
 80a0c30:	2201      	movs	r2, #1
 80a0c32:	f002 f95b 	bl	80a2eec <_ZN10JsonWriter12insertStringEPKcb>
		insertChar(':');
 80a0c36:	4620      	mov	r0, r4
 80a0c38:	213a      	movs	r1, #58	; 0x3a
 80a0c3a:	f002 f90b 	bl	80a2e54 <_ZN10JsonWriter10insertCharEc>
		insertValue(value);
 80a0c3e:	4629      	mov	r1, r5
 80a0c40:	4620      	mov	r0, r4
	}
 80a0c42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		insertValue(value);
 80a0c46:	f002 ba07 	b.w	80a3058 <_ZN10JsonWriter11insertValueEf>

080a0c4a <_ZN10JsonWriter14insertKeyValueI6StringEEvPKcT_>:
	void insertKeyValue(const char *key, T value) {
 80a0c4a:	b570      	push	{r4, r5, r6, lr}
 80a0c4c:	4604      	mov	r4, r0
 80a0c4e:	460e      	mov	r6, r1
 80a0c50:	4615      	mov	r5, r2
		insertCheckSeparator();
 80a0c52:	f002 f9dd 	bl	80a3010 <_ZN10JsonWriter20insertCheckSeparatorEv>
	void insertValue(const char *value) { insertString(value, true); }
 80a0c56:	2201      	movs	r2, #1
 80a0c58:	4631      	mov	r1, r6
 80a0c5a:	4620      	mov	r0, r4
 80a0c5c:	f002 f946 	bl	80a2eec <_ZN10JsonWriter12insertStringEPKcb>
		insertChar(':');
 80a0c60:	4620      	mov	r0, r4
 80a0c62:	213a      	movs	r1, #58	; 0x3a
 80a0c64:	f002 f8f6 	bl	80a2e54 <_ZN10JsonWriter10insertCharEc>
	void insertValue(const String &value) { insertString(value.c_str(), true); }
 80a0c68:	4620      	mov	r0, r4
 80a0c6a:	6829      	ldr	r1, [r5, #0]
 80a0c6c:	2201      	movs	r2, #1
	}
 80a0c6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	void insertValue(const String &value) { insertString(value.c_str(), true); }
 80a0c72:	f002 b93b 	b.w	80a2eec <_ZN10JsonWriter12insertStringEPKcb>
	...

080a0c78 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>:
	void insertKeyValue(const char *key, T value) {
 80a0c78:	b570      	push	{r4, r5, r6, lr}
 80a0c7a:	4604      	mov	r4, r0
 80a0c7c:	460e      	mov	r6, r1
 80a0c7e:	4615      	mov	r5, r2
		insertCheckSeparator();
 80a0c80:	f002 f9c6 	bl	80a3010 <_ZN10JsonWriter20insertCheckSeparatorEv>
	void insertValue(const char *value) { insertString(value, true); }
 80a0c84:	2201      	movs	r2, #1
 80a0c86:	4631      	mov	r1, r6
 80a0c88:	4620      	mov	r0, r4
 80a0c8a:	f002 f92f 	bl	80a2eec <_ZN10JsonWriter12insertStringEPKcb>
		insertChar(':');
 80a0c8e:	4620      	mov	r0, r4
 80a0c90:	213a      	movs	r1, #58	; 0x3a
 80a0c92:	f002 f8df 	bl	80a2e54 <_ZN10JsonWriter10insertCharEc>
	void insertValue(int value) { insertsprintf("%d", value); }
 80a0c96:	462a      	mov	r2, r5
 80a0c98:	4620      	mov	r0, r4
	}
 80a0c9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	void insertValue(int value) { insertsprintf("%d", value); }
 80a0c9e:	4901      	ldr	r1, [pc, #4]	; (80a0ca4 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_+0x2c>)
 80a0ca0:	f002 b917 	b.w	80a2ed2 <_ZN10JsonWriter13insertsprintfEPKcz>
 80a0ca4:	080a8b3f 	.word	0x080a8b3f

080a0ca8 <_Z15add_Measurementfffffffffmi6String.part.0>:
void add_Measurement(float phaseVoltageL1, float phaseVoltageL2, float phaseVoltageL3, float currentL1, float currentL2, float currentL3,  float Power, float Energy, float Frequency, unsigned long Timestamp, int socketId=0, String userId="00") {
 80a0ca8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a0caa:	4607      	mov	r7, r0
 80a0cac:	460e      	mov	r6, r1
 80a0cae:	4615      	mov	r5, r2
 80a0cb0:	461c      	mov	r4, r3
 80a0cb2:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
    JsonWriterStatic<512> jsonMessage;     
 80a0cb6:	a804      	add	r0, sp, #16
 80a0cb8:	f7ff ffa4 	bl	80a0c04 <_ZN16JsonWriterStaticILj512EEC1Ev>
	 * @brief Start a new object
	 *
	 * @param jw The JsonWriter object to insert the object into
	 */
	JsonWriterAutoObject(JsonWriter *jw) : jw(jw) {
		jw->startObject();
 80a0cbc:	a804      	add	r0, sp, #16
 80a0cbe:	f7ff fb73 	bl	80a03a8 <_ZN10JsonWriter11startObjectEv>
        jsonMessage.insertKeyValue("V1", phaseVoltageL1);
 80a0cc2:	463a      	mov	r2, r7
 80a0cc4:	492b      	ldr	r1, [pc, #172]	; (80a0d74 <_Z15add_Measurementfffffffffmi6String.part.0+0xcc>)
 80a0cc6:	a804      	add	r0, sp, #16
 80a0cc8:	f7ff ffaa 	bl	80a0c20 <_ZN10JsonWriter14insertKeyValueIfEEvPKcT_>
        jsonMessage.insertKeyValue("V2", phaseVoltageL2);
 80a0ccc:	4632      	mov	r2, r6
 80a0cce:	492a      	ldr	r1, [pc, #168]	; (80a0d78 <_Z15add_Measurementfffffffffmi6String.part.0+0xd0>)
 80a0cd0:	a804      	add	r0, sp, #16
 80a0cd2:	f7ff ffa5 	bl	80a0c20 <_ZN10JsonWriter14insertKeyValueIfEEvPKcT_>
        jsonMessage.insertKeyValue("V3", phaseVoltageL3);
 80a0cd6:	462a      	mov	r2, r5
 80a0cd8:	4928      	ldr	r1, [pc, #160]	; (80a0d7c <_Z15add_Measurementfffffffffmi6String.part.0+0xd4>)
 80a0cda:	a804      	add	r0, sp, #16
 80a0cdc:	f7ff ffa0 	bl	80a0c20 <_ZN10JsonWriter14insertKeyValueIfEEvPKcT_>
        jsonMessage.insertKeyValue("I1", currentL1);
 80a0ce0:	4622      	mov	r2, r4
 80a0ce2:	4927      	ldr	r1, [pc, #156]	; (80a0d80 <_Z15add_Measurementfffffffffmi6String.part.0+0xd8>)
 80a0ce4:	a804      	add	r0, sp, #16
 80a0ce6:	f7ff ff9b 	bl	80a0c20 <_ZN10JsonWriter14insertKeyValueIfEEvPKcT_>
        jsonMessage.insertKeyValue("I2", currentL2);
 80a0cea:	9a96      	ldr	r2, [sp, #600]	; 0x258
 80a0cec:	4925      	ldr	r1, [pc, #148]	; (80a0d84 <_Z15add_Measurementfffffffffmi6String.part.0+0xdc>)
 80a0cee:	a804      	add	r0, sp, #16
 80a0cf0:	f7ff ff96 	bl	80a0c20 <_ZN10JsonWriter14insertKeyValueIfEEvPKcT_>
        jsonMessage.insertKeyValue("I3", currentL3);
 80a0cf4:	9a97      	ldr	r2, [sp, #604]	; 0x25c
 80a0cf6:	4924      	ldr	r1, [pc, #144]	; (80a0d88 <_Z15add_Measurementfffffffffmi6String.part.0+0xe0>)
 80a0cf8:	a804      	add	r0, sp, #16
 80a0cfa:	f7ff ff91 	bl	80a0c20 <_ZN10JsonWriter14insertKeyValueIfEEvPKcT_>
        jsonMessage.insertKeyValue("F", Frequency);
 80a0cfe:	9a98      	ldr	r2, [sp, #608]	; 0x260
 80a0d00:	4922      	ldr	r1, [pc, #136]	; (80a0d8c <_Z15add_Measurementfffffffffmi6String.part.0+0xe4>)
 80a0d02:	a804      	add	r0, sp, #16
 80a0d04:	f7ff ff8c 	bl	80a0c20 <_ZN10JsonWriter14insertKeyValueIfEEvPKcT_>
		jsonMessage.insertKeyValue("UserID", userId);
 80a0d08:	999b      	ldr	r1, [sp, #620]	; 0x26c
 80a0d0a:	4668      	mov	r0, sp
 80a0d0c:	f003 facf 	bl	80a42ae <_ZN6StringC1ERKS_>
 80a0d10:	466a      	mov	r2, sp
 80a0d12:	491f      	ldr	r1, [pc, #124]	; (80a0d90 <_Z15add_Measurementfffffffffmi6String.part.0+0xe8>)
 80a0d14:	a804      	add	r0, sp, #16
 80a0d16:	f7ff ff98 	bl	80a0c4a <_ZN10JsonWriter14insertKeyValueI6StringEEvPKcT_>
 80a0d1a:	4668      	mov	r0, sp
 80a0d1c:	f003 fa3e 	bl	80a419c <_ZN6StringD1Ev>
		jsonMessage.insertKeyValue("SocketID", socketId);
 80a0d20:	9a9a      	ldr	r2, [sp, #616]	; 0x268
 80a0d22:	491c      	ldr	r1, [pc, #112]	; (80a0d94 <_Z15add_Measurementfffffffffmi6String.part.0+0xec>)
 80a0d24:	a804      	add	r0, sp, #16
 80a0d26:	f7ff ffa7 	bl	80a0c78 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
		insertCheckSeparator();
 80a0d2a:	a804      	add	r0, sp, #16
 80a0d2c:	f002 f970 	bl	80a3010 <_ZN10JsonWriter20insertCheckSeparatorEv>
	void insertValue(const char *value) { insertString(value, true); }
 80a0d30:	2201      	movs	r2, #1
 80a0d32:	4919      	ldr	r1, [pc, #100]	; (80a0d98 <_Z15add_Measurementfffffffffmi6String.part.0+0xf0>)
 80a0d34:	a804      	add	r0, sp, #16
 80a0d36:	f002 f8d9 	bl	80a2eec <_ZN10JsonWriter12insertStringEPKcb>
		insertChar(':');
 80a0d3a:	213a      	movs	r1, #58	; 0x3a
 80a0d3c:	a804      	add	r0, sp, #16
 80a0d3e:	f002 f889 	bl	80a2e54 <_ZN10JsonWriter10insertCharEc>
	void insertValue(unsigned long value) { insertsprintf("%lu", value); }
 80a0d42:	9a99      	ldr	r2, [sp, #612]	; 0x264
 80a0d44:	4915      	ldr	r1, [pc, #84]	; (80a0d9c <_Z15add_Measurementfffffffffmi6String.part.0+0xf4>)
 80a0d46:	a804      	add	r0, sp, #16
 80a0d48:	f002 f8c3 	bl	80a2ed2 <_ZN10JsonWriter13insertsprintfEPKcz>

	/**
	 * @brief End the object
	 */
	~JsonWriterAutoObject() {
		jw->finishObjectOrArray();
 80a0d4c:	a804      	add	r0, sp, #16
 80a0d4e:	f002 f890 	bl	80a2e72 <_ZN10JsonWriter19finishObjectOrArrayEv>
 80a0d52:	2403      	movs	r4, #3
		if(client.publish("HANevse/photonMeasure", jsonMessage.getBuffer())) {
 80a0d54:	4d12      	ldr	r5, [pc, #72]	; (80a0da0 <_Z15add_Measurementfffffffffmi6String.part.0+0xf8>)
 80a0d56:	4e13      	ldr	r6, [pc, #76]	; (80a0da4 <_Z15add_Measurementfffffffffmi6String.part.0+0xfc>)
 80a0d58:	4629      	mov	r1, r5
 80a0d5a:	4630      	mov	r0, r6
 80a0d5c:	9a05      	ldr	r2, [sp, #20]
 80a0d5e:	f001 fcba 	bl	80a26d6 <_ZN4MQTT7publishEPKcS1_>
 80a0d62:	b908      	cbnz	r0, 80a0d68 <_Z15add_Measurementfffffffffmi6String.part.0+0xc0>
	for(int i=0; i<3; i++) {
 80a0d64:	3c01      	subs	r4, #1
 80a0d66:	d1f7      	bne.n	80a0d58 <_Z15add_Measurementfffffffffmi6String.part.0+0xb0>
    JsonWriterStatic<512> jsonMessage;     
 80a0d68:	a804      	add	r0, sp, #16
 80a0d6a:	f7ff fa6f 	bl	80a024c <_ZN16JsonWriterStaticILj512EED1Ev>
}
 80a0d6e:	f50d 7d11 	add.w	sp, sp, #580	; 0x244
 80a0d72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a0d74:	080a8594 	.word	0x080a8594
 80a0d78:	080a8597 	.word	0x080a8597
 80a0d7c:	080a859a 	.word	0x080a859a
 80a0d80:	080a859d 	.word	0x080a859d
 80a0d84:	080a85a0 	.word	0x080a85a0
 80a0d88:	080a85a3 	.word	0x080a85a3
 80a0d8c:	080a85a6 	.word	0x080a85a6
 80a0d90:	080a85a8 	.word	0x080a85a8
 80a0d94:	080a85af 	.word	0x080a85af
 80a0d98:	080a860c 	.word	0x080a860c
 80a0d9c:	080a85b8 	.word	0x080a85b8
 80a0da0:	080a85bc 	.word	0x080a85bc
 80a0da4:	200004b8 	.word	0x200004b8

080a0da8 <_Z15add_Measurementfffffffffmi6String>:
void add_Measurement(float phaseVoltageL1, float phaseVoltageL2, float phaseVoltageL3, float currentL1, float currentL2, float currentL3,  float Power, float Energy, float Frequency, unsigned long Timestamp, int socketId=0, String userId="00") {
 80a0da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0dac:	461c      	mov	r4, r3
 80a0dae:	b085      	sub	sp, #20
 80a0db0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80a0db2:	4605      	mov	r5, r0
 80a0db4:	9301      	str	r3, [sp, #4]
 80a0db6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80a0db8:	460e      	mov	r6, r1
 80a0dba:	9302      	str	r3, [sp, #8]
 80a0dbc:	9b15      	ldr	r3, [sp, #84]	; 0x54
    if ((currentL1 > 50.0)||(currentL2 > 50.0)||(currentL3 > 50.0))
 80a0dbe:	4620      	mov	r0, r4
 80a0dc0:	4931      	ldr	r1, [pc, #196]	; (80a0e88 <_Z15add_Measurementfffffffffmi6String+0xe0>)
void add_Measurement(float phaseVoltageL1, float phaseVoltageL2, float phaseVoltageL3, float currentL1, float currentL2, float currentL3,  float Power, float Energy, float Frequency, unsigned long Timestamp, int socketId=0, String userId="00") {
 80a0dc2:	4617      	mov	r7, r2
 80a0dc4:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 80a0dc8:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
 80a0dcc:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
 80a0dd0:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
 80a0dd4:	9303      	str	r3, [sp, #12]
    if ((currentL1 > 50.0)||(currentL2 > 50.0)||(currentL3 > 50.0))
 80a0dd6:	f005 fc17 	bl	80a6608 <__aeabi_fcmpgt>
 80a0dda:	2800      	cmp	r0, #0
 80a0ddc:	d14a      	bne.n	80a0e74 <_Z15add_Measurementfffffffffmi6String+0xcc>
 80a0dde:	4640      	mov	r0, r8
 80a0de0:	4929      	ldr	r1, [pc, #164]	; (80a0e88 <_Z15add_Measurementfffffffffmi6String+0xe0>)
 80a0de2:	f005 fc11 	bl	80a6608 <__aeabi_fcmpgt>
 80a0de6:	2800      	cmp	r0, #0
 80a0de8:	d144      	bne.n	80a0e74 <_Z15add_Measurementfffffffffmi6String+0xcc>
 80a0dea:	4648      	mov	r0, r9
 80a0dec:	4926      	ldr	r1, [pc, #152]	; (80a0e88 <_Z15add_Measurementfffffffffmi6String+0xe0>)
 80a0dee:	f005 fc0b 	bl	80a6608 <__aeabi_fcmpgt>
 80a0df2:	2800      	cmp	r0, #0
 80a0df4:	d13e      	bne.n	80a0e74 <_Z15add_Measurementfffffffffmi6String+0xcc>
    if (((currentL1 < 0.1)&&(currentL2 < 0.1)&&(currentL3 < 0.1))&&((Power > phaseVoltageL1)&&(Power > phaseVoltageL2)&&(Power > phaseVoltageL3) )  )
 80a0df6:	4620      	mov	r0, r4
 80a0df8:	f004 fdec 	bl	80a59d4 <__aeabi_f2d>
 80a0dfc:	a320      	add	r3, pc, #128	; (adr r3, 80a0e80 <_Z15add_Measurementfffffffffmi6String+0xd8>)
 80a0dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0e02:	f005 f8b1 	bl	80a5f68 <__aeabi_dcmplt>
 80a0e06:	b300      	cbz	r0, 80a0e4a <_Z15add_Measurementfffffffffmi6String+0xa2>
 80a0e08:	4640      	mov	r0, r8
 80a0e0a:	f004 fde3 	bl	80a59d4 <__aeabi_f2d>
 80a0e0e:	a31c      	add	r3, pc, #112	; (adr r3, 80a0e80 <_Z15add_Measurementfffffffffmi6String+0xd8>)
 80a0e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0e14:	f005 f8a8 	bl	80a5f68 <__aeabi_dcmplt>
 80a0e18:	b1b8      	cbz	r0, 80a0e4a <_Z15add_Measurementfffffffffmi6String+0xa2>
 80a0e1a:	4648      	mov	r0, r9
 80a0e1c:	f004 fdda 	bl	80a59d4 <__aeabi_f2d>
 80a0e20:	a317      	add	r3, pc, #92	; (adr r3, 80a0e80 <_Z15add_Measurementfffffffffmi6String+0xd8>)
 80a0e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0e26:	f005 f89f 	bl	80a5f68 <__aeabi_dcmplt>
 80a0e2a:	b170      	cbz	r0, 80a0e4a <_Z15add_Measurementfffffffffmi6String+0xa2>
 80a0e2c:	4629      	mov	r1, r5
 80a0e2e:	4650      	mov	r0, sl
 80a0e30:	f005 fbea 	bl	80a6608 <__aeabi_fcmpgt>
 80a0e34:	b148      	cbz	r0, 80a0e4a <_Z15add_Measurementfffffffffmi6String+0xa2>
 80a0e36:	4631      	mov	r1, r6
 80a0e38:	4650      	mov	r0, sl
 80a0e3a:	f005 fbe5 	bl	80a6608 <__aeabi_fcmpgt>
 80a0e3e:	b120      	cbz	r0, 80a0e4a <_Z15add_Measurementfffffffffmi6String+0xa2>
 80a0e40:	4639      	mov	r1, r7
 80a0e42:	4650      	mov	r0, sl
 80a0e44:	f005 fbe0 	bl	80a6608 <__aeabi_fcmpgt>
 80a0e48:	b9a0      	cbnz	r0, 80a0e74 <_Z15add_Measurementfffffffffmi6String+0xcc>
 80a0e4a:	9b03      	ldr	r3, [sp, #12]
 80a0e4c:	463a      	mov	r2, r7
 80a0e4e:	9313      	str	r3, [sp, #76]	; 0x4c
 80a0e50:	9b02      	ldr	r3, [sp, #8]
 80a0e52:	4631      	mov	r1, r6
 80a0e54:	9312      	str	r3, [sp, #72]	; 0x48
 80a0e56:	9b01      	ldr	r3, [sp, #4]
 80a0e58:	4628      	mov	r0, r5
 80a0e5a:	9311      	str	r3, [sp, #68]	; 0x44
 80a0e5c:	4623      	mov	r3, r4
 80a0e5e:	f8cd b040 	str.w	fp, [sp, #64]	; 0x40
 80a0e62:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 80a0e66:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
}
 80a0e6a:	b005      	add	sp, #20
 80a0e6c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0e70:	f7ff bf1a 	b.w	80a0ca8 <_Z15add_Measurementfffffffffmi6String.part.0>
 80a0e74:	b005      	add	sp, #20
 80a0e76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a0e7a:	bf00      	nop
 80a0e7c:	f3af 8000 	nop.w
 80a0e80:	9999999a 	.word	0x9999999a
 80a0e84:	3fb99999 	.word	0x3fb99999
 80a0e88:	42480000 	.word	0x42480000

080a0e8c <_ZN10JsonWriter14insertKeyValueIlEEvPKcT_>:
	void insertKeyValue(const char *key, T value) {
 80a0e8c:	b570      	push	{r4, r5, r6, lr}
 80a0e8e:	4604      	mov	r4, r0
 80a0e90:	460e      	mov	r6, r1
 80a0e92:	4615      	mov	r5, r2
		insertCheckSeparator();
 80a0e94:	f002 f8bc 	bl	80a3010 <_ZN10JsonWriter20insertCheckSeparatorEv>
	void insertValue(const char *value) { insertString(value, true); }
 80a0e98:	2201      	movs	r2, #1
 80a0e9a:	4631      	mov	r1, r6
 80a0e9c:	4620      	mov	r0, r4
 80a0e9e:	f002 f825 	bl	80a2eec <_ZN10JsonWriter12insertStringEPKcb>
		insertChar(':');
 80a0ea2:	4620      	mov	r0, r4
 80a0ea4:	213a      	movs	r1, #58	; 0x3a
 80a0ea6:	f001 ffd5 	bl	80a2e54 <_ZN10JsonWriter10insertCharEc>
	void insertValue(long value) { insertsprintf("%ld", value); }
 80a0eaa:	462a      	mov	r2, r5
 80a0eac:	4620      	mov	r0, r4
	}
 80a0eae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	void insertValue(long value) { insertsprintf("%ld", value); }
 80a0eb2:	4901      	ldr	r1, [pc, #4]	; (80a0eb8 <_ZN10JsonWriter14insertKeyValueIlEEvPKcT_+0x2c>)
 80a0eb4:	f002 b80d 	b.w	80a2ed2 <_ZN10JsonWriter13insertsprintfEPKcz>
 80a0eb8:	080a85d2 	.word	0x080a85d2

080a0ebc <_Z12readRFIDCardi>:
bool readRFIDCard(int Charger) {
 80a0ebc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    Pianswer = 0;
 80a0ec0:	2400      	movs	r4, #0
 80a0ec2:	4b81      	ldr	r3, [pc, #516]	; (80a10c8 <_Z12readRFIDCardi+0x20c>)
    if(Charger==1+CHARGEROFFSET)
 80a0ec4:	2801      	cmp	r0, #1
bool readRFIDCard(int Charger) {
 80a0ec6:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
    Pianswer = 0;
 80a0eca:	801c      	strh	r4, [r3, #0]
    if(Charger==1+CHARGEROFFSET)
 80a0ecc:	f040 808d 	bne.w	80a0fea <_Z12readRFIDCardi+0x12e>
        if ( ! mfrc522_Charger1.PICC_IsNewCardPresent()) 
 80a0ed0:	487e      	ldr	r0, [pc, #504]	; (80a10cc <_Z12readRFIDCardi+0x210>)
 80a0ed2:	f001 f80f 	bl	80a1ef4 <_ZN7MFRC52221PICC_IsNewCardPresentEv>
 80a0ed6:	4e7d      	ldr	r6, [pc, #500]	; (80a10cc <_Z12readRFIDCardi+0x210>)
 80a0ed8:	2800      	cmp	r0, #0
 80a0eda:	f000 80f0 	beq.w	80a10be <_Z12readRFIDCardi+0x202>
        if ( ! mfrc522_Charger1.PICC_ReadCardSerial()) 
 80a0ede:	4630      	mov	r0, r6
 80a0ee0:	f001 f966 	bl	80a21b0 <_ZN7MFRC52219PICC_ReadCardSerialEv>
 80a0ee4:	2800      	cmp	r0, #0
 80a0ee6:	f000 80ea 	beq.w	80a10be <_Z12readRFIDCardi+0x202>
        DEBUGPORT.print("readCard>\tUID tag on charger1:");
 80a0eea:	f003 ff65 	bl	80a4db8 <_Z16_fetch_usbserialv>
 80a0eee:	4978      	ldr	r1, [pc, #480]	; (80a10d0 <_Z12readRFIDCardi+0x214>)
 80a0ef0:	f003 fb24 	bl	80a453c <_ZN5Print5printEPKc>
        String content = "";        
 80a0ef4:	4668      	mov	r0, sp
 80a0ef6:	4977      	ldr	r1, [pc, #476]	; (80a10d4 <_Z12readRFIDCardi+0x218>)
 80a0ef8:	f003 f99a 	bl	80a4230 <_ZN6StringC1EPKc>
            DEBUGPORT.print(mfrc522_Charger1.uid.uidByte[i] < 0x10 ? " 0" : " ");
 80a0efc:	f8df 8200 	ldr.w	r8, [pc, #512]	; 80a1100 <_Z12readRFIDCardi+0x244>
 80a0f00:	4f75      	ldr	r7, [pc, #468]	; (80a10d8 <_Z12readRFIDCardi+0x21c>)
        for (byte i = 0; i < mfrc522_Charger1.uid.size; i++) 
 80a0f02:	7833      	ldrb	r3, [r6, #0]
 80a0f04:	b2e5      	uxtb	r5, r4
 80a0f06:	42ab      	cmp	r3, r5
 80a0f08:	d92c      	bls.n	80a0f64 <_Z12readRFIDCardi+0xa8>
            DEBUGPORT.print(mfrc522_Charger1.uid.uidByte[i] < 0x10 ? " 0" : " ");
 80a0f0a:	4435      	add	r5, r6
 80a0f0c:	f003 ff54 	bl	80a4db8 <_Z16_fetch_usbserialv>
 80a0f10:	7869      	ldrb	r1, [r5, #1]
 80a0f12:	3401      	adds	r4, #1
 80a0f14:	290f      	cmp	r1, #15
 80a0f16:	bf94      	ite	ls
 80a0f18:	4641      	movls	r1, r8
 80a0f1a:	4639      	movhi	r1, r7
 80a0f1c:	f003 fb0e 	bl	80a453c <_ZN5Print5printEPKc>
            DEBUGPORT.print(mfrc522_Charger1.uid.uidByte[i], HEX);
 80a0f20:	f003 ff4a 	bl	80a4db8 <_Z16_fetch_usbserialv>
 80a0f24:	2210      	movs	r2, #16
 80a0f26:	7869      	ldrb	r1, [r5, #1]
 80a0f28:	f003 fb25 	bl	80a4576 <_ZN5Print11printNumberEmh>
            content.concat(String(mfrc522_Charger1.uid.uidByte[i] < 0x10 ? " 0" : " "));
 80a0f2c:	7869      	ldrb	r1, [r5, #1]
 80a0f2e:	a808      	add	r0, sp, #32
 80a0f30:	290f      	cmp	r1, #15
 80a0f32:	bf94      	ite	ls
 80a0f34:	4641      	movls	r1, r8
 80a0f36:	4639      	movhi	r1, r7
 80a0f38:	f003 f97a 	bl	80a4230 <_ZN6StringC1EPKc>
 80a0f3c:	a908      	add	r1, sp, #32
 80a0f3e:	4668      	mov	r0, sp
 80a0f40:	f003 fa53 	bl	80a43ea <_ZN6String6concatERKS_>
 80a0f44:	a808      	add	r0, sp, #32
 80a0f46:	f003 f929 	bl	80a419c <_ZN6StringD1Ev>
            content.concat(String(mfrc522_Charger1.uid.uidByte[i], HEX));
 80a0f4a:	2210      	movs	r2, #16
 80a0f4c:	7869      	ldrb	r1, [r5, #1]
 80a0f4e:	a808      	add	r0, sp, #32
 80a0f50:	f003 f9d1 	bl	80a42f6 <_ZN6StringC1Ehh>
 80a0f54:	a908      	add	r1, sp, #32
 80a0f56:	4668      	mov	r0, sp
 80a0f58:	f003 fa47 	bl	80a43ea <_ZN6String6concatERKS_>
 80a0f5c:	a808      	add	r0, sp, #32
 80a0f5e:	f003 f91d 	bl	80a419c <_ZN6StringD1Ev>
        for (byte i = 0; i < mfrc522_Charger1.uid.size; i++) 
 80a0f62:	e7ce      	b.n	80a0f02 <_Z12readRFIDCardi+0x46>
        JsonWriterStatic<512> jsonMessage;
 80a0f64:	a808      	add	r0, sp, #32
 80a0f66:	f7ff fe4d 	bl	80a0c04 <_ZN16JsonWriterStaticILj512EEC1Ev>
        UIDtagCharger1=content.substring(1); //??? why does it start at 1?
 80a0f6a:	2201      	movs	r2, #1
 80a0f6c:	4669      	mov	r1, sp
 80a0f6e:	a804      	add	r0, sp, #16
 80a0f70:	f003 fab2 	bl	80a44d8 <_ZNK6String9substringEj>
 80a0f74:	a904      	add	r1, sp, #16
 80a0f76:	4859      	ldr	r0, [pc, #356]	; (80a10dc <_Z12readRFIDCardi+0x220>)
 80a0f78:	f003 f9a4 	bl	80a42c4 <_ZN6StringaSEOS_>
 80a0f7c:	a804      	add	r0, sp, #16
 80a0f7e:	f003 f90d 	bl	80a419c <_ZN6StringD1Ev>
		jw->startObject();
 80a0f82:	a808      	add	r0, sp, #32
 80a0f84:	f7ff fa10 	bl	80a03a8 <_ZN10JsonWriter11startObjectEv>
		jsonMessage.insertKeyValue("UserId", UIDtagCharger1);
 80a0f88:	4954      	ldr	r1, [pc, #336]	; (80a10dc <_Z12readRFIDCardi+0x220>)
 80a0f8a:	a804      	add	r0, sp, #16
 80a0f8c:	f003 f98f 	bl	80a42ae <_ZN6StringC1ERKS_>
 80a0f90:	aa04      	add	r2, sp, #16
 80a0f92:	4953      	ldr	r1, [pc, #332]	; (80a10e0 <_Z12readRFIDCardi+0x224>)
 80a0f94:	a808      	add	r0, sp, #32
 80a0f96:	f7ff fe58 	bl	80a0c4a <_ZN10JsonWriter14insertKeyValueI6StringEEvPKcT_>
 80a0f9a:	a804      	add	r0, sp, #16
 80a0f9c:	f003 f8fe 	bl	80a419c <_ZN6StringD1Ev>
        jsonMessage.insertKeyValue("Charger", Charger);
 80a0fa0:	2201      	movs	r2, #1
        jsonMessage.insertKeyValue("Charger", Charger);
 80a0fa2:	4950      	ldr	r1, [pc, #320]	; (80a10e4 <_Z12readRFIDCardi+0x228>)
 80a0fa4:	a808      	add	r0, sp, #32
 80a0fa6:	f7ff fe67 	bl	80a0c78 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
		jsonMessage.insertKeyValue("StartTime", Time.now());
 80a0faa:	f003 fd2a 	bl	80a4a02 <_ZN9TimeClass3nowEv>
 80a0fae:	494e      	ldr	r1, [pc, #312]	; (80a10e8 <_Z12readRFIDCardi+0x22c>)
 80a0fb0:	4602      	mov	r2, r0
 80a0fb2:	a808      	add	r0, sp, #32
 80a0fb4:	f7ff ff6a 	bl	80a0e8c <_ZN10JsonWriter14insertKeyValueIlEEvPKcT_>
		jw->finishObjectOrArray();
 80a0fb8:	a808      	add	r0, sp, #32
 80a0fba:	f001 ff5a 	bl	80a2e72 <_ZN10JsonWriter19finishObjectOrArrayEv>
        client.publish("HANevse/updateUser", jsonMessage.getBuffer());
 80a0fbe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80a0fc0:	494a      	ldr	r1, [pc, #296]	; (80a10ec <_Z12readRFIDCardi+0x230>)
 80a0fc2:	484b      	ldr	r0, [pc, #300]	; (80a10f0 <_Z12readRFIDCardi+0x234>)
 80a0fc4:	f001 fb87 	bl	80a26d6 <_ZN4MQTT7publishEPKcS1_>
        JsonWriterStatic<512> jsonMessage;
 80a0fc8:	a808      	add	r0, sp, #32
 80a0fca:	f7ff f93f 	bl	80a024c <_ZN16JsonWriterStaticILj512EED1Ev>
        String content = "";        
 80a0fce:	4668      	mov	r0, sp
 80a0fd0:	f003 f8e4 	bl	80a419c <_ZN6StringD1Ev>
    DEBUGPORT.println("");
 80a0fd4:	f003 fef0 	bl	80a4db8 <_Z16_fetch_usbserialv>
 80a0fd8:	493e      	ldr	r1, [pc, #248]	; (80a10d4 <_Z12readRFIDCardi+0x218>)
 80a0fda:	f003 fac2 	bl	80a4562 <_ZN5Print7printlnEPKc>
    delay(500);
 80a0fde:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a0fe2:	f003 fd29 	bl	80a4a38 <delay>
     return Authorized;
 80a0fe6:	2001      	movs	r0, #1
 80a0fe8:	e06a      	b.n	80a10c0 <_Z12readRFIDCardi+0x204>
    if(Charger==2+CHARGEROFFSET)
 80a0fea:	2802      	cmp	r0, #2
 80a0fec:	d1f2      	bne.n	80a0fd4 <_Z12readRFIDCardi+0x118>
        if ( ! mfrc522_Charger2.PICC_IsNewCardPresent()) 
 80a0fee:	4841      	ldr	r0, [pc, #260]	; (80a10f4 <_Z12readRFIDCardi+0x238>)
 80a0ff0:	f000 ff80 	bl	80a1ef4 <_ZN7MFRC52221PICC_IsNewCardPresentEv>
 80a0ff4:	4e3f      	ldr	r6, [pc, #252]	; (80a10f4 <_Z12readRFIDCardi+0x238>)
 80a0ff6:	2800      	cmp	r0, #0
 80a0ff8:	d061      	beq.n	80a10be <_Z12readRFIDCardi+0x202>
        if ( ! mfrc522_Charger2.PICC_ReadCardSerial()) 
 80a0ffa:	4630      	mov	r0, r6
 80a0ffc:	f001 f8d8 	bl	80a21b0 <_ZN7MFRC52219PICC_ReadCardSerialEv>
 80a1000:	2800      	cmp	r0, #0
 80a1002:	d05c      	beq.n	80a10be <_Z12readRFIDCardi+0x202>
        DEBUGPORT.print("readCard>\tUID tag on charger2:");
 80a1004:	f003 fed8 	bl	80a4db8 <_Z16_fetch_usbserialv>
 80a1008:	493b      	ldr	r1, [pc, #236]	; (80a10f8 <_Z12readRFIDCardi+0x23c>)
 80a100a:	f003 fa97 	bl	80a453c <_ZN5Print5printEPKc>
        String content = "";        
 80a100e:	4668      	mov	r0, sp
 80a1010:	4930      	ldr	r1, [pc, #192]	; (80a10d4 <_Z12readRFIDCardi+0x218>)
 80a1012:	f003 f90d 	bl	80a4230 <_ZN6StringC1EPKc>
            DEBUGPORT.print(mfrc522_Charger2.uid.uidByte[i] < 0x10 ? " 0" : " ");
 80a1016:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 80a1100 <_Z12readRFIDCardi+0x244>
 80a101a:	4f2f      	ldr	r7, [pc, #188]	; (80a10d8 <_Z12readRFIDCardi+0x21c>)
        for (byte i = 0; i < mfrc522_Charger2.uid.size; i++) 
 80a101c:	7833      	ldrb	r3, [r6, #0]
 80a101e:	b2e5      	uxtb	r5, r4
 80a1020:	42ab      	cmp	r3, r5
 80a1022:	d92c      	bls.n	80a107e <_Z12readRFIDCardi+0x1c2>
            DEBUGPORT.print(mfrc522_Charger2.uid.uidByte[i] < 0x10 ? " 0" : " ");
 80a1024:	4435      	add	r5, r6
 80a1026:	f003 fec7 	bl	80a4db8 <_Z16_fetch_usbserialv>
 80a102a:	7869      	ldrb	r1, [r5, #1]
 80a102c:	3401      	adds	r4, #1
 80a102e:	290f      	cmp	r1, #15
 80a1030:	bf94      	ite	ls
 80a1032:	4641      	movls	r1, r8
 80a1034:	4639      	movhi	r1, r7
 80a1036:	f003 fa81 	bl	80a453c <_ZN5Print5printEPKc>
            DEBUGPORT.print(mfrc522_Charger2.uid.uidByte[i], HEX);
 80a103a:	f003 febd 	bl	80a4db8 <_Z16_fetch_usbserialv>
 80a103e:	2210      	movs	r2, #16
 80a1040:	7869      	ldrb	r1, [r5, #1]
 80a1042:	f003 fa98 	bl	80a4576 <_ZN5Print11printNumberEmh>
            content.concat(String(mfrc522_Charger2.uid.uidByte[i] < 0x10 ? " 0" : " "));
 80a1046:	7869      	ldrb	r1, [r5, #1]
 80a1048:	a808      	add	r0, sp, #32
 80a104a:	290f      	cmp	r1, #15
 80a104c:	bf94      	ite	ls
 80a104e:	4641      	movls	r1, r8
 80a1050:	4639      	movhi	r1, r7
 80a1052:	f003 f8ed 	bl	80a4230 <_ZN6StringC1EPKc>
 80a1056:	a908      	add	r1, sp, #32
 80a1058:	4668      	mov	r0, sp
 80a105a:	f003 f9c6 	bl	80a43ea <_ZN6String6concatERKS_>
 80a105e:	a808      	add	r0, sp, #32
 80a1060:	f003 f89c 	bl	80a419c <_ZN6StringD1Ev>
            content.concat(String(mfrc522_Charger2.uid.uidByte[i], HEX));
 80a1064:	2210      	movs	r2, #16
 80a1066:	7869      	ldrb	r1, [r5, #1]
 80a1068:	a808      	add	r0, sp, #32
 80a106a:	f003 f944 	bl	80a42f6 <_ZN6StringC1Ehh>
 80a106e:	a908      	add	r1, sp, #32
 80a1070:	4668      	mov	r0, sp
 80a1072:	f003 f9ba 	bl	80a43ea <_ZN6String6concatERKS_>
 80a1076:	a808      	add	r0, sp, #32
 80a1078:	f003 f890 	bl	80a419c <_ZN6StringD1Ev>
        for (byte i = 0; i < mfrc522_Charger2.uid.size; i++) 
 80a107c:	e7ce      	b.n	80a101c <_Z12readRFIDCardi+0x160>
        UIDtagCharger2=content.substring(1);
 80a107e:	2201      	movs	r2, #1
 80a1080:	4669      	mov	r1, sp
 80a1082:	a808      	add	r0, sp, #32
 80a1084:	f003 fa28 	bl	80a44d8 <_ZNK6String9substringEj>
 80a1088:	a908      	add	r1, sp, #32
 80a108a:	481c      	ldr	r0, [pc, #112]	; (80a10fc <_Z12readRFIDCardi+0x240>)
 80a108c:	f003 f91a 	bl	80a42c4 <_ZN6StringaSEOS_>
 80a1090:	a808      	add	r0, sp, #32
 80a1092:	f003 f883 	bl	80a419c <_ZN6StringD1Ev>
        JsonWriterStatic<512> jsonMessage;
 80a1096:	a808      	add	r0, sp, #32
 80a1098:	f7ff fdb4 	bl	80a0c04 <_ZN16JsonWriterStaticILj512EEC1Ev>
		jw->startObject();
 80a109c:	a808      	add	r0, sp, #32
 80a109e:	f7ff f983 	bl	80a03a8 <_ZN10JsonWriter11startObjectEv>
		jsonMessage.insertKeyValue("UserId", UIDtagCharger2);
 80a10a2:	4916      	ldr	r1, [pc, #88]	; (80a10fc <_Z12readRFIDCardi+0x240>)
 80a10a4:	a804      	add	r0, sp, #16
 80a10a6:	f003 f902 	bl	80a42ae <_ZN6StringC1ERKS_>
 80a10aa:	aa04      	add	r2, sp, #16
 80a10ac:	490c      	ldr	r1, [pc, #48]	; (80a10e0 <_Z12readRFIDCardi+0x224>)
 80a10ae:	a808      	add	r0, sp, #32
 80a10b0:	f7ff fdcb 	bl	80a0c4a <_ZN10JsonWriter14insertKeyValueI6StringEEvPKcT_>
 80a10b4:	a804      	add	r0, sp, #16
 80a10b6:	f003 f871 	bl	80a419c <_ZN6StringD1Ev>
        jsonMessage.insertKeyValue("Charger", Charger);
 80a10ba:	2202      	movs	r2, #2
 80a10bc:	e771      	b.n	80a0fa2 <_Z12readRFIDCardi+0xe6>
            return false;
 80a10be:	2000      	movs	r0, #0
}
 80a10c0:	f50d 7d14 	add.w	sp, sp, #592	; 0x250
 80a10c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a10c8:	20000304 	.word	0x20000304
 80a10cc:	20000521 	.word	0x20000521
 80a10d0:	080a85d9 	.word	0x080a85d9
 80a10d4:	080a86c9 	.word	0x080a86c9
 80a10d8:	080a86cb 	.word	0x080a86cb
 80a10dc:	20000334 	.word	0x20000334
 80a10e0:	080a85f8 	.word	0x080a85f8
 80a10e4:	080a85ff 	.word	0x080a85ff
 80a10e8:	080a8607 	.word	0x080a8607
 80a10ec:	080a8611 	.word	0x080a8611
 80a10f0:	200004b8 	.word	0x200004b8
 80a10f4:	2000052f 	.word	0x2000052f
 80a10f8:	080a8624 	.word	0x080a8624
 80a10fc:	20000344 	.word	0x20000344
 80a1100:	080a85d6 	.word	0x080a85d6

080a1104 <loop>:
	//RGB.control(true);
    Time.zone(1); //Dutch time zone
    DEBUGPORT.println("Latest Start>\t"+String(LatestStartTime[0])+", "+String(LatestStartTime[1]));
}

void loop() {
 80a1104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a1108:	f5ad 7d1d 	sub.w	sp, sp, #628	; 0x274
    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a110c:	f002 fc42 	bl	80a3994 <spark_cloud_flag_connected>
    //Check the connection to the MQTT broker
    if (Particle.connected() == false) {
 80a1110:	b908      	cbnz	r0, 80a1116 <loop+0x12>
        spark_cloud_flag_connect();
 80a1112:	f002 fc37 	bl	80a3984 <spark_cloud_flag_connect>
        Particle.connect();
    }

    if (client.isConnected()) {
 80a1116:	48b3      	ldr	r0, [pc, #716]	; (80a13e4 <loop+0x2e0>)
 80a1118:	f001 f96f 	bl	80a23fa <_ZN4MQTT11isConnectedEv>
 80a111c:	2800      	cmp	r0, #0
 80a111e:	f000 811c 	beq.w	80a135a <loop+0x256>
        client.loop();
 80a1122:	48b0      	ldr	r0, [pc, #704]	; (80a13e4 <loop+0x2e0>)
 80a1124:	f001 fb1e 	bl	80a2764 <_ZN4MQTT4loopEv>
    }
    else reconnect();
    
    Particle.process();
 80a1128:	f7ff f932 	bl	80a0390 <_ZN10CloudClass7processEv>
//+    currentStr = String(Current[0][0],1)+" "+String( PhaseVoltage[0][1],1)+" "+String(LineVoltage[0][2],1)+" "+String(Power[1][0],1)+" "+String( Energy[1],1)+" "+String(Current[1][2],1)+" "+String(Frequency[0],2);
    //currentStr=String(Current[1][2],1)+" "+currentStr.substring(0, max(200, currentStr.length()))
    //currentStr = String(CurrentList[0],1)+" "+String(CurrentList[1],1)+" "+String(CurrentList[2],1)+" "+String(CurrentList[3],1)+" "+String(CurrentList[4],1)+" "+String(CurrentList[5],1)+" "+String(CurrentList[6],1)+" "+String(CurrentList[7],1)+" "+String(CurrentList[8],1)+" "+String(CurrentList[9],1)+" "+String(CurrentList[10],1)+" "+String(CurrentList[11],1)+" "+String(CurrentList[12],1)+" "+String(CurrentList[13],1)+" "+String(CurrentList[14],1)+" "+String(CurrentList[15],1)+" "+String(CurrentList[16],1)+" "+String(CurrentList[17],1)+" "+String(CurrentList[18],1)+" "+String(CurrentList[19],1);
    
    //int Charger =1; //+
    int Charger = readSerialOlimex()+CHARGEROFFSET; //+
 80a112c:	f7ff fb5a 	bl	80a07e4 <_Z16readSerialOlimexv>
 80a1130:	4604      	mov	r4, r0
    Particle.process();
 80a1132:	f7ff f92d 	bl	80a0390 <_ZN10CloudClass7processEv>
 80a1136:	f002 fa05 	bl	80a3544 <HAL_Timer_Get_Milli_Seconds>
	// 	DEBUGPORT.println(String(Current[1][0]+ Current[1][1]+ Current[1][2]));
    // }
    // counter++;

    // store new measurement value if it is received correctly from energymeter (via the Olimex).
    if(millis()>nextTime[handledCharger] && (Charger==1+CHARGEROFFSET || Charger==2+CHARGEROFFSET)) //+ all the if{}
 80a113a:	4dab      	ldr	r5, [pc, #684]	; (80a13e8 <loop+0x2e4>)
 80a113c:	4bab      	ldr	r3, [pc, #684]	; (80a13ec <loop+0x2e8>)
 80a113e:	782a      	ldrb	r2, [r5, #0]
 80a1140:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80a1144:	4283      	cmp	r3, r0
 80a1146:	d265      	bcs.n	80a1214 <loop+0x110>
 80a1148:	3c01      	subs	r4, #1
 80a114a:	2c01      	cmp	r4, #1
 80a114c:	d862      	bhi.n	80a1214 <loop+0x110>
    {
        Particle.process();
 80a114e:	f7ff f91f 	bl	80a0390 <_ZN10CloudClass7processEv>
        //getUserIdAtSocket(Charger)
        int tempCharger = Charger;
        Charger = handledCharger + 1;
        if(((activeCharger()==Charger) || (activeCharger() == 3)) && (getUserIdAtSocket(Charger)!="00"))
 80a1152:	f7ff fb95 	bl	80a0880 <_Z13activeChargerv>
        Charger = handledCharger + 1;
 80a1156:	782e      	ldrb	r6, [r5, #0]
 80a1158:	1c75      	adds	r5, r6, #1
        if(((activeCharger()==Charger) || (activeCharger() == 3)) && (getUserIdAtSocket(Charger)!="00"))
 80a115a:	42a8      	cmp	r0, r5
 80a115c:	d001      	beq.n	80a1162 <loop+0x5e>
 80a115e:	2803      	cmp	r0, #3
 80a1160:	d14e      	bne.n	80a1200 <loop+0xfc>
 80a1162:	ac10      	add	r4, sp, #64	; 0x40
 80a1164:	4629      	mov	r1, r5
 80a1166:	4620      	mov	r0, r4
 80a1168:	f7ff fc58 	bl	80a0a1c <_Z17getUserIdAtSocketi>
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
 80a116c:	4620      	mov	r0, r4
 80a116e:	49a0      	ldr	r1, [pc, #640]	; (80a13f0 <loop+0x2ec>)
 80a1170:	f003 f97d 	bl	80a446e <_ZNK6String6equalsEPKc>
 80a1174:	4607      	mov	r7, r0
 80a1176:	4620      	mov	r0, r4
 80a1178:	f003 f810 	bl	80a419c <_ZN6StringD1Ev>
 80a117c:	2f00      	cmp	r7, #0
 80a117e:	d13f      	bne.n	80a1200 <loop+0xfc>
        {
            //getUserIdAtSocket(Charger+CHARGEROFFSET);
            add_Measurement(PhaseVoltage[Charger-1][0], PhaseVoltage[Charger-1][1], PhaseVoltage[Charger-1][2], Current[Charger-1][0], Current[Charger-1][1], Current[Charger-1][2], Power[Charger-1][0]+Power[Charger-1][1]+Power[Charger-1][2], Energy[Charger-1], Frequency[Charger-1], Time.now(), Charger+CHARGEROFFSET, getUserIdAtSocket(Charger+CHARGEROFFSET));
 80a1180:	230c      	movs	r3, #12
 80a1182:	4373      	muls	r3, r6
 80a1184:	499b      	ldr	r1, [pc, #620]	; (80a13f4 <loop+0x2f0>)
 80a1186:	18ca      	adds	r2, r1, r3
 80a1188:	f851 8003 	ldr.w	r8, [r1, r3]
 80a118c:	499a      	ldr	r1, [pc, #616]	; (80a13f8 <loop+0x2f4>)
 80a118e:	f8d2 9004 	ldr.w	r9, [r2, #4]
 80a1192:	f8d2 a008 	ldr.w	sl, [r2, #8]
 80a1196:	18ca      	adds	r2, r1, r3
 80a1198:	f851 b003 	ldr.w	fp, [r1, r3]
 80a119c:	6851      	ldr	r1, [r2, #4]
 80a119e:	6892      	ldr	r2, [r2, #8]
 80a11a0:	9108      	str	r1, [sp, #32]
 80a11a2:	9209      	str	r2, [sp, #36]	; 0x24
 80a11a4:	4a95      	ldr	r2, [pc, #596]	; (80a13fc <loop+0x2f8>)
 80a11a6:	18d7      	adds	r7, r2, r3
 80a11a8:	58d0      	ldr	r0, [r2, r3]
 80a11aa:	6879      	ldr	r1, [r7, #4]
 80a11ac:	f004 ff68 	bl	80a6080 <__addsf3>
 80a11b0:	68b9      	ldr	r1, [r7, #8]
 80a11b2:	f004 ff65 	bl	80a6080 <__addsf3>
 80a11b6:	4b92      	ldr	r3, [pc, #584]	; (80a1400 <loop+0x2fc>)
 80a11b8:	4a92      	ldr	r2, [pc, #584]	; (80a1404 <loop+0x300>)
 80a11ba:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 80a11be:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 80a11c2:	930b      	str	r3, [sp, #44]	; 0x2c
 80a11c4:	920a      	str	r2, [sp, #40]	; 0x28
 80a11c6:	4607      	mov	r7, r0
 80a11c8:	f003 fc1b 	bl	80a4a02 <_ZN9TimeClass3nowEv>
 80a11cc:	4606      	mov	r6, r0
 80a11ce:	4629      	mov	r1, r5
 80a11d0:	4620      	mov	r0, r4
 80a11d2:	f7ff fc23 	bl	80a0a1c <_Z17getUserIdAtSocketi>
 80a11d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80a11d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80a11da:	9303      	str	r3, [sp, #12]
 80a11dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a11de:	4640      	mov	r0, r8
 80a11e0:	9301      	str	r3, [sp, #4]
 80a11e2:	9b08      	ldr	r3, [sp, #32]
 80a11e4:	9204      	str	r2, [sp, #16]
 80a11e6:	9300      	str	r3, [sp, #0]
 80a11e8:	4652      	mov	r2, sl
 80a11ea:	465b      	mov	r3, fp
 80a11ec:	4649      	mov	r1, r9
 80a11ee:	e9cd 5406 	strd	r5, r4, [sp, #24]
 80a11f2:	9605      	str	r6, [sp, #20]
 80a11f4:	9702      	str	r7, [sp, #8]
 80a11f6:	f7ff fdd7 	bl	80a0da8 <_Z15add_Measurementfffffffffmi6String>
 80a11fa:	4620      	mov	r0, r4
 80a11fc:	f002 ffce 	bl	80a419c <_ZN6StringD1Ev>
 80a1200:	f002 f9a0 	bl	80a3544 <HAL_Timer_Get_Milli_Seconds>
        }
        Charger = tempCharger;
        nextTime[handledCharger] = millis() + 30000; //every 30 sec
 80a1204:	4b78      	ldr	r3, [pc, #480]	; (80a13e8 <loop+0x2e4>)
 80a1206:	f500 40ea 	add.w	r0, r0, #29952	; 0x7500
 80a120a:	781a      	ldrb	r2, [r3, #0]
 80a120c:	4b77      	ldr	r3, [pc, #476]	; (80a13ec <loop+0x2e8>)
 80a120e:	3030      	adds	r0, #48	; 0x30
 80a1210:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
    }
    
//     run loop very often to check new RFID cards
    Particle.process(); //+
 80a1214:	f7ff f8bc 	bl	80a0390 <_ZN10CloudClass7processEv>
    bool Authorized_Charger1=readRFIDCard(1+CHARGEROFFSET); //+
 80a1218:	2001      	movs	r0, #1
 80a121a:	f7ff fe4f 	bl	80a0ebc <_Z12readRFIDCardi>
    delay(5);
 80a121e:	2005      	movs	r0, #5
 80a1220:	f003 fc0a 	bl	80a4a38 <delay>
    //DEBUGPORT.println(String(LatestStartTime[0]+60));
    //DEBUGPORT.println(String(Time.now()));
    //DEBUGPORT.println((LatestStartTime[0] + 60 < Time.now()),DEC);
    //if ((LatestStartTime[0] + 60 < Time.now()) && (Current[0][0]+ Current[0][1]+ Current[0][2]) < 1)
    //if (((numberOfZeroReadings[0]>10 && (LatestStartTime[0] + 60 < Time.now()))|| ((Time.now()<LatestStartTime[0] + 70)&&(LatestStartTime[0] + 60 < Time.now()))) && (Current[0][0]+ Current[0][1]+ Current[0][2]) < 1)
    if( ((numberOfZeroReadings[0]>10)||(LatestStartTime[0] + 70 > Time.now()) )&& (LatestStartTime[0] + 60 < Time.now()) && (Current[0][0]+ Current[0][1]+ Current[0][2]) < 1)
 80a1224:	4d78      	ldr	r5, [pc, #480]	; (80a1408 <loop+0x304>)
    bool Authorized_Charger2=readRFIDCard(2+CHARGEROFFSET); //+
 80a1226:	2002      	movs	r0, #2
 80a1228:	f7ff fe48 	bl	80a0ebc <_Z12readRFIDCardi>
    delay(5);
 80a122c:	2005      	movs	r0, #5
 80a122e:	f003 fc03 	bl	80a4a38 <delay>
    if( ((numberOfZeroReadings[0]>10)||(LatestStartTime[0] + 70 > Time.now()) )&& (LatestStartTime[0] + 60 < Time.now()) && (Current[0][0]+ Current[0][1]+ Current[0][2]) < 1)
 80a1232:	682b      	ldr	r3, [r5, #0]
 80a1234:	4c75      	ldr	r4, [pc, #468]	; (80a140c <loop+0x308>)
 80a1236:	2b0a      	cmp	r3, #10
 80a1238:	f340 8092 	ble.w	80a1360 <loop+0x25c>
 80a123c:	6823      	ldr	r3, [r4, #0]
 80a123e:	f103 063c 	add.w	r6, r3, #60	; 0x3c
 80a1242:	f003 fbde 	bl	80a4a02 <_ZN9TimeClass3nowEv>
 80a1246:	4286      	cmp	r6, r0
 80a1248:	f0c0 8093 	bcc.w	80a1372 <loop+0x26e>
    }
    //DEBUGPORT.println(Current[1][0]+ Current[1][1]+ Current[1][2],4);
    //DEBUGPORT.println(String(LatestStartTime[1]+60));
    //DEBUGPORT.println(String(Time.now()));
    //DEBUGPORT.println((LatestStartTime[1] + 60 < Time.now()),DEC);
    if( ((numberOfZeroReadings[1]>10)||(LatestStartTime[1] + 70 > Time.now()) )&& (LatestStartTime[1] + 60 < Time.now()) && (Current[1][0]+ Current[1][1]+ Current[1][2]) < 1)
 80a124c:	686b      	ldr	r3, [r5, #4]
 80a124e:	2b0a      	cmp	r3, #10
 80a1250:	f340 80bf 	ble.w	80a13d2 <loop+0x2ce>
 80a1254:	6863      	ldr	r3, [r4, #4]
 80a1256:	f103 053c 	add.w	r5, r3, #60	; 0x3c
 80a125a:	f003 fbd2 	bl	80a4a02 <_ZN9TimeClass3nowEv>
 80a125e:	4285      	cmp	r5, r0
 80a1260:	f0c0 80e8 	bcc.w	80a1434 <loop+0x330>
        digitalWrite(AUTHENTICATION_CAR2,LOW);
        //digitalWrite(D7,LOW);
        LatestStartTime[1]=2147483548;
        //DEBUGPORT.println("Timeout charger2");
    }
    delay(100);
 80a1264:	2064      	movs	r0, #100	; 0x64
 80a1266:	f003 fbe7 	bl	80a4a38 <delay>


    /////!!!! Check how often these run 
    //Reset the UIDtag if there is no car charging
    if ((activeCharger()!=1)&&(activeCharger()!=3)&&(UIDtagCharger1!="No ID")){
 80a126a:	f7ff fb09 	bl	80a0880 <_Z13activeChargerv>
 80a126e:	f020 0002 	bic.w	r0, r0, #2
 80a1272:	2801      	cmp	r0, #1
 80a1274:	d031      	beq.n	80a12da <loop+0x1d6>
 80a1276:	4966      	ldr	r1, [pc, #408]	; (80a1410 <loop+0x30c>)
 80a1278:	4866      	ldr	r0, [pc, #408]	; (80a1414 <loop+0x310>)
 80a127a:	f003 f8f8 	bl	80a446e <_ZNK6String6equalsEPKc>
 80a127e:	bb60      	cbnz	r0, 80a12da <loop+0x1d6>
        
        JsonWriterStatic<512> jsonMessage;
 80a1280:	a810      	add	r0, sp, #64	; 0x40
 80a1282:	f7ff fcbf 	bl	80a0c04 <_ZN16JsonWriterStaticILj512EEC1Ev>
 80a1286:	a810      	add	r0, sp, #64	; 0x40
 80a1288:	f7ff f88e 	bl	80a03a8 <_ZN10JsonWriter11startObjectEv>

        {
		JsonWriterAutoObject obj(&jsonMessage);
		
		jsonMessage.insertKeyValue("UserId", UIDtagCharger1);
 80a128c:	4961      	ldr	r1, [pc, #388]	; (80a1414 <loop+0x310>)
 80a128e:	a80c      	add	r0, sp, #48	; 0x30
 80a1290:	f003 f80d 	bl	80a42ae <_ZN6StringC1ERKS_>
 80a1294:	4960      	ldr	r1, [pc, #384]	; (80a1418 <loop+0x314>)
 80a1296:	aa0c      	add	r2, sp, #48	; 0x30
 80a1298:	a810      	add	r0, sp, #64	; 0x40
 80a129a:	f7ff fcd6 	bl	80a0c4a <_ZN10JsonWriter14insertKeyValueI6StringEEvPKcT_>
 80a129e:	a80c      	add	r0, sp, #48	; 0x30
 80a12a0:	f002 ff7c 	bl	80a419c <_ZN6StringD1Ev>
        jsonMessage.insertKeyValue("Charger", 1);
 80a12a4:	2201      	movs	r2, #1
 80a12a6:	495d      	ldr	r1, [pc, #372]	; (80a141c <loop+0x318>)
 80a12a8:	a810      	add	r0, sp, #64	; 0x40
 80a12aa:	f7ff fce5 	bl	80a0c78 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
		jsonMessage.insertKeyValue("StartTime", Time.now());
 80a12ae:	f003 fba8 	bl	80a4a02 <_ZN9TimeClass3nowEv>
 80a12b2:	495b      	ldr	r1, [pc, #364]	; (80a1420 <loop+0x31c>)
 80a12b4:	4602      	mov	r2, r0
 80a12b6:	a810      	add	r0, sp, #64	; 0x40
 80a12b8:	f7ff fde8 	bl	80a0e8c <_ZN10JsonWriter14insertKeyValueIlEEvPKcT_>
		jw->finishObjectOrArray();
 80a12bc:	a810      	add	r0, sp, #64	; 0x40
 80a12be:	f001 fdd8 	bl	80a2e72 <_ZN10JsonWriter19finishObjectOrArrayEv>
	    }
        client.publish("HANevse/updateUser", jsonMessage.getBuffer());
 80a12c2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80a12c4:	4957      	ldr	r1, [pc, #348]	; (80a1424 <loop+0x320>)
 80a12c6:	4847      	ldr	r0, [pc, #284]	; (80a13e4 <loop+0x2e0>)
 80a12c8:	f001 fa05 	bl	80a26d6 <_ZN4MQTT7publishEPKcS1_>

        UIDtagCharger1="No ID";
 80a12cc:	4950      	ldr	r1, [pc, #320]	; (80a1410 <loop+0x30c>)
 80a12ce:	4851      	ldr	r0, [pc, #324]	; (80a1414 <loop+0x310>)
 80a12d0:	f003 f800 	bl	80a42d4 <_ZN6StringaSEPKc>
        JsonWriterStatic<512> jsonMessage;
 80a12d4:	a810      	add	r0, sp, #64	; 0x40
 80a12d6:	f7fe ffb9 	bl	80a024c <_ZN16JsonWriterStaticILj512EED1Ev>
    }

        
    if ((activeCharger()!=2)&&(activeCharger()!=3)&&(UIDtagCharger2!="No ID")){
 80a12da:	f7ff fad1 	bl	80a0880 <_Z13activeChargerv>
 80a12de:	3802      	subs	r0, #2
 80a12e0:	2801      	cmp	r0, #1
 80a12e2:	d931      	bls.n	80a1348 <loop+0x244>
 80a12e4:	494a      	ldr	r1, [pc, #296]	; (80a1410 <loop+0x30c>)
 80a12e6:	4850      	ldr	r0, [pc, #320]	; (80a1428 <loop+0x324>)
 80a12e8:	f003 f8c1 	bl	80a446e <_ZNK6String6equalsEPKc>
 80a12ec:	bb60      	cbnz	r0, 80a1348 <loop+0x244>
        
        JsonWriterStatic<512> jsonMessage;
 80a12ee:	a810      	add	r0, sp, #64	; 0x40
 80a12f0:	f7ff fc88 	bl	80a0c04 <_ZN16JsonWriterStaticILj512EEC1Ev>
		jw->startObject();
 80a12f4:	a810      	add	r0, sp, #64	; 0x40
 80a12f6:	f7ff f857 	bl	80a03a8 <_ZN10JsonWriter11startObjectEv>

        {
		JsonWriterAutoObject obj(&jsonMessage);
		
		jsonMessage.insertKeyValue("UserId", UIDtagCharger2);
 80a12fa:	494b      	ldr	r1, [pc, #300]	; (80a1428 <loop+0x324>)
 80a12fc:	a80c      	add	r0, sp, #48	; 0x30
 80a12fe:	f002 ffd6 	bl	80a42ae <_ZN6StringC1ERKS_>
 80a1302:	4945      	ldr	r1, [pc, #276]	; (80a1418 <loop+0x314>)
 80a1304:	aa0c      	add	r2, sp, #48	; 0x30
 80a1306:	a810      	add	r0, sp, #64	; 0x40
 80a1308:	f7ff fc9f 	bl	80a0c4a <_ZN10JsonWriter14insertKeyValueI6StringEEvPKcT_>
 80a130c:	a80c      	add	r0, sp, #48	; 0x30
 80a130e:	f002 ff45 	bl	80a419c <_ZN6StringD1Ev>
        jsonMessage.insertKeyValue("Charger", 2);
 80a1312:	2202      	movs	r2, #2
 80a1314:	4941      	ldr	r1, [pc, #260]	; (80a141c <loop+0x318>)
 80a1316:	a810      	add	r0, sp, #64	; 0x40
 80a1318:	f7ff fcae 	bl	80a0c78 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
		jsonMessage.insertKeyValue("StartTime", Time.now());
 80a131c:	f003 fb71 	bl	80a4a02 <_ZN9TimeClass3nowEv>
 80a1320:	493f      	ldr	r1, [pc, #252]	; (80a1420 <loop+0x31c>)
 80a1322:	4602      	mov	r2, r0
 80a1324:	a810      	add	r0, sp, #64	; 0x40
 80a1326:	f7ff fdb1 	bl	80a0e8c <_ZN10JsonWriter14insertKeyValueIlEEvPKcT_>
		jw->finishObjectOrArray();
 80a132a:	a810      	add	r0, sp, #64	; 0x40
 80a132c:	f001 fda1 	bl	80a2e72 <_ZN10JsonWriter19finishObjectOrArrayEv>
	    }
        client.publish("HANevse/updateUser", jsonMessage.getBuffer());
 80a1330:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80a1332:	493c      	ldr	r1, [pc, #240]	; (80a1424 <loop+0x320>)
 80a1334:	482b      	ldr	r0, [pc, #172]	; (80a13e4 <loop+0x2e0>)
 80a1336:	f001 f9ce 	bl	80a26d6 <_ZN4MQTT7publishEPKcS1_>

        UIDtagCharger2="No ID";
 80a133a:	4935      	ldr	r1, [pc, #212]	; (80a1410 <loop+0x30c>)
 80a133c:	483a      	ldr	r0, [pc, #232]	; (80a1428 <loop+0x324>)
 80a133e:	f002 ffc9 	bl	80a42d4 <_ZN6StringaSEPKc>
        JsonWriterStatic<512> jsonMessage;
 80a1342:	a810      	add	r0, sp, #64	; 0x40
 80a1344:	f7fe ff82 	bl	80a024c <_ZN16JsonWriterStaticILj512EED1Ev>
    }
            
    handledCharger = !handledCharger;
 80a1348:	4a27      	ldr	r2, [pc, #156]	; (80a13e8 <loop+0x2e4>)
 80a134a:	7813      	ldrb	r3, [r2, #0]
 80a134c:	f083 0301 	eor.w	r3, r3, #1
 80a1350:	7013      	strb	r3, [r2, #0]
 80a1352:	f50d 7d1d 	add.w	sp, sp, #628	; 0x274
 80a1356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else reconnect();
 80a135a:	f7ff fbf3 	bl	80a0b44 <_Z9reconnectv>
 80a135e:	e6e3      	b.n	80a1128 <loop+0x24>
    if( ((numberOfZeroReadings[0]>10)||(LatestStartTime[0] + 70 > Time.now()) )&& (LatestStartTime[0] + 60 < Time.now()) && (Current[0][0]+ Current[0][1]+ Current[0][2]) < 1)
 80a1360:	6823      	ldr	r3, [r4, #0]
 80a1362:	f103 0646 	add.w	r6, r3, #70	; 0x46
 80a1366:	f003 fb4c 	bl	80a4a02 <_ZN9TimeClass3nowEv>
 80a136a:	4286      	cmp	r6, r0
 80a136c:	f63f af66 	bhi.w	80a123c <loop+0x138>
 80a1370:	e76c      	b.n	80a124c <loop+0x148>
 80a1372:	4e21      	ldr	r6, [pc, #132]	; (80a13f8 <loop+0x2f4>)
 80a1374:	6871      	ldr	r1, [r6, #4]
 80a1376:	6830      	ldr	r0, [r6, #0]
 80a1378:	f004 fe82 	bl	80a6080 <__addsf3>
 80a137c:	68b1      	ldr	r1, [r6, #8]
 80a137e:	f004 fe7f 	bl	80a6080 <__addsf3>
 80a1382:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80a1386:	f005 f921 	bl	80a65cc <__aeabi_fcmplt>
 80a138a:	2800      	cmp	r0, #0
 80a138c:	f43f af5e 	beq.w	80a124c <loop+0x148>
        DEBUGPORT.println("Timeout charger"+String(CHARGEROFFSET+1));
 80a1390:	f003 fd12 	bl	80a4db8 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
 80a1394:	4925      	ldr	r1, [pc, #148]	; (80a142c <loop+0x328>)
 80a1396:	4606      	mov	r6, r0
 80a1398:	a810      	add	r0, sp, #64	; 0x40
 80a139a:	f002 ff49 	bl	80a4230 <_ZN6StringC1EPKc>
 80a139e:	220a      	movs	r2, #10
 80a13a0:	2101      	movs	r1, #1
 80a13a2:	a80c      	add	r0, sp, #48	; 0x30
 80a13a4:	f002 ffb9 	bl	80a431a <_ZN6StringC1Eih>
 80a13a8:	a90c      	add	r1, sp, #48	; 0x30
 80a13aa:	a810      	add	r0, sp, #64	; 0x40
 80a13ac:	f003 f83f 	bl	80a442e <_ZplRK15StringSumHelperRK6String>
 80a13b0:	6801      	ldr	r1, [r0, #0]
 80a13b2:	4630      	mov	r0, r6
 80a13b4:	f003 f8d5 	bl	80a4562 <_ZN5Print7printlnEPKc>
 80a13b8:	a80c      	add	r0, sp, #48	; 0x30
 80a13ba:	f002 feef 	bl	80a419c <_ZN6StringD1Ev>
class StringSumHelper : public String
 80a13be:	a810      	add	r0, sp, #64	; 0x40
 80a13c0:	f002 feec 	bl	80a419c <_ZN6StringD1Ev>
        digitalWrite(AUTHENTICATION_CAR1,LOW);
 80a13c4:	2100      	movs	r1, #0
 80a13c6:	2005      	movs	r0, #5
 80a13c8:	f003 fffd 	bl	80a53c6 <digitalWrite>
        LatestStartTime[0]=2147483548;
 80a13cc:	4b18      	ldr	r3, [pc, #96]	; (80a1430 <loop+0x32c>)
 80a13ce:	6023      	str	r3, [r4, #0]
 80a13d0:	e73c      	b.n	80a124c <loop+0x148>
    if( ((numberOfZeroReadings[1]>10)||(LatestStartTime[1] + 70 > Time.now()) )&& (LatestStartTime[1] + 60 < Time.now()) && (Current[1][0]+ Current[1][1]+ Current[1][2]) < 1)
 80a13d2:	6863      	ldr	r3, [r4, #4]
 80a13d4:	f103 0546 	add.w	r5, r3, #70	; 0x46
 80a13d8:	f003 fb13 	bl	80a4a02 <_ZN9TimeClass3nowEv>
 80a13dc:	4285      	cmp	r5, r0
 80a13de:	f63f af39 	bhi.w	80a1254 <loop+0x150>
 80a13e2:	e73f      	b.n	80a1264 <loop+0x160>
 80a13e4:	200004b8 	.word	0x200004b8
 80a13e8:	20000520 	.word	0x20000520
 80a13ec:	20000000 	.word	0x20000000
 80a13f0:	080a8314 	.word	0x080a8314
 80a13f4:	200002ec 	.word	0x200002ec
 80a13f8:	20000254 	.word	0x20000254
 80a13fc:	20000308 	.word	0x20000308
 80a1400:	200002bc 	.word	0x200002bc
 80a1404:	200002c4 	.word	0x200002c4
 80a1408:	20000540 	.word	0x20000540
 80a140c:	200002cc 	.word	0x200002cc
 80a1410:	080a8653 	.word	0x080a8653
 80a1414:	20000334 	.word	0x20000334
 80a1418:	080a85f8 	.word	0x080a85f8
 80a141c:	080a85ff 	.word	0x080a85ff
 80a1420:	080a8607 	.word	0x080a8607
 80a1424:	080a8611 	.word	0x080a8611
 80a1428:	20000344 	.word	0x20000344
 80a142c:	080a8643 	.word	0x080a8643
 80a1430:	7fffff9c 	.word	0x7fffff9c
 80a1434:	4d17      	ldr	r5, [pc, #92]	; (80a1494 <loop+0x390>)
 80a1436:	6929      	ldr	r1, [r5, #16]
 80a1438:	68e8      	ldr	r0, [r5, #12]
 80a143a:	f004 fe21 	bl	80a6080 <__addsf3>
 80a143e:	6969      	ldr	r1, [r5, #20]
 80a1440:	f004 fe1e 	bl	80a6080 <__addsf3>
 80a1444:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80a1448:	f005 f8c0 	bl	80a65cc <__aeabi_fcmplt>
 80a144c:	2800      	cmp	r0, #0
 80a144e:	f43f af09 	beq.w	80a1264 <loop+0x160>
        DEBUGPORT.println("Timeout charger"+String(CHARGEROFFSET+2));
 80a1452:	f003 fcb1 	bl	80a4db8 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
 80a1456:	4910      	ldr	r1, [pc, #64]	; (80a1498 <loop+0x394>)
 80a1458:	4605      	mov	r5, r0
 80a145a:	a810      	add	r0, sp, #64	; 0x40
 80a145c:	f002 fee8 	bl	80a4230 <_ZN6StringC1EPKc>
 80a1460:	220a      	movs	r2, #10
 80a1462:	2102      	movs	r1, #2
 80a1464:	a80c      	add	r0, sp, #48	; 0x30
 80a1466:	f002 ff58 	bl	80a431a <_ZN6StringC1Eih>
 80a146a:	a90c      	add	r1, sp, #48	; 0x30
 80a146c:	a810      	add	r0, sp, #64	; 0x40
 80a146e:	f002 ffde 	bl	80a442e <_ZplRK15StringSumHelperRK6String>
 80a1472:	6801      	ldr	r1, [r0, #0]
 80a1474:	4628      	mov	r0, r5
 80a1476:	f003 f874 	bl	80a4562 <_ZN5Print7printlnEPKc>
 80a147a:	a80c      	add	r0, sp, #48	; 0x30
 80a147c:	f002 fe8e 	bl	80a419c <_ZN6StringD1Ev>
class StringSumHelper : public String
 80a1480:	a810      	add	r0, sp, #64	; 0x40
 80a1482:	f002 fe8b 	bl	80a419c <_ZN6StringD1Ev>
        digitalWrite(AUTHENTICATION_CAR2,LOW);
 80a1486:	2100      	movs	r1, #0
 80a1488:	2006      	movs	r0, #6
 80a148a:	f003 ff9c 	bl	80a53c6 <digitalWrite>
        LatestStartTime[1]=2147483548;
 80a148e:	4b03      	ldr	r3, [pc, #12]	; (80a149c <loop+0x398>)
 80a1490:	6063      	str	r3, [r4, #4]
 80a1492:	e6e7      	b.n	80a1264 <loop+0x160>
 80a1494:	20000254 	.word	0x20000254
 80a1498:	080a8643 	.word	0x080a8643
 80a149c:	7fffff9c 	.word	0x7fffff9c

080a14a0 <_ZN10CloudClass8functionIA13_cJPFi6StringEEEEbRKT_DpT0_>:
    static inline bool function(const T &name, Types ... args)
 80a14a0:	4602      	mov	r2, r0
        return register_function(call_raw_user_function, (void*)func, funcKey);
 80a14a2:	4801      	ldr	r0, [pc, #4]	; (80a14a8 <_ZN10CloudClass8functionIA13_cJPFi6StringEEEEbRKT_DpT0_+0x8>)
 80a14a4:	f003 bba4 	b.w	80a4bf0 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 80a14a8:	080a4bc5 	.word	0x080a4bc5

080a14ac <setup>:
void setup() {
 80a14ac:	b570      	push	{r4, r5, r6, lr}
 80a14ae:	b08c      	sub	sp, #48	; 0x30
    DEBUGPORT.begin(115200); 
 80a14b0:	f003 fc82 	bl	80a4db8 <_Z16_fetch_usbserialv>
 80a14b4:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80a14b8:	f003 fc72 	bl	80a4da0 <_ZN9USBSerial5beginEl>
    Serial1.begin(9600);
 80a14bc:	f003 fd2e 	bl	80a4f1c <_Z22__fetch_global_Serial1v>
 80a14c0:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a14c4:	f003 fd26 	bl	80a4f14 <_ZN11USARTSerial5beginEm>
    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a14c8:	f002 fa64 	bl	80a3994 <spark_cloud_flag_connected>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80a14cc:	b910      	cbnz	r0, 80a14d4 <setup+0x28>
            spark_process();
 80a14ce:	f002 fa51 	bl	80a3974 <spark_process>
        while (_while() && !_condition()) {
 80a14d2:	e7f9      	b.n	80a14c8 <setup+0x1c>
 80a14d4:	f002 fa5e 	bl	80a3994 <spark_cloud_flag_connected>
    pinMode(AUTHENTICATION_CAR1, OUTPUT); //pinMode(D1, OUTPUT); //Charger1_Authorized
 80a14d8:	2101      	movs	r1, #1
 80a14da:	2005      	movs	r0, #5
 80a14dc:	f003 ff62 	bl	80a53a4 <pinMode>
    pinMode(AUTHENTICATION_CAR2, OUTPUT); //pinMode(D2, OUTPUT); //Charger2_Authorized
 80a14e0:	2101      	movs	r1, #1
 80a14e2:	2006      	movs	r0, #6
 80a14e4:	f003 ff5e 	bl	80a53a4 <pinMode>
    pinMode(PILOT_FEEDBACK_CAR_1,INPUT);
 80a14e8:	2100      	movs	r1, #0
 80a14ea:	2010      	movs	r0, #16
 80a14ec:	f003 ff5a 	bl	80a53a4 <pinMode>
    pinMode(PILOT_FEEDBACK_CAR_2,INPUT);
 80a14f0:	2100      	movs	r1, #0
 80a14f2:	2011      	movs	r0, #17
 80a14f4:	f003 ff56 	bl	80a53a4 <pinMode>
    pinMode(WAKEUP_OLIMEX, OUTPUT);
 80a14f8:	2101      	movs	r1, #1
 80a14fa:	2002      	movs	r0, #2
 80a14fc:	f003 ff52 	bl	80a53a4 <pinMode>
    pinMode(RESET_OLIMEX, OUTPUT);
 80a1500:	2101      	movs	r1, #1
 80a1502:	2004      	movs	r0, #4
 80a1504:	f003 ff4e 	bl	80a53a4 <pinMode>
    pinMode(D7, OUTPUT);
 80a1508:	2101      	movs	r1, #1
 80a150a:	2007      	movs	r0, #7
 80a150c:	f003 ff4a 	bl	80a53a4 <pinMode>
    digitalWrite(AUTHENTICATION_CAR1, LOW); //digitalWrite(D1,LOW);
 80a1510:	2100      	movs	r1, #0
 80a1512:	2005      	movs	r0, #5
 80a1514:	f003 ff57 	bl	80a53c6 <digitalWrite>
    digitalWrite(AUTHENTICATION_CAR2, LOW);//digitalWrite(D2,LOW);
 80a1518:	2100      	movs	r1, #0
 80a151a:	2006      	movs	r0, #6
 80a151c:	f003 ff53 	bl	80a53c6 <digitalWrite>
    digitalWrite(WAKEUP_OLIMEX, LOW);
 80a1520:	2100      	movs	r1, #0
 80a1522:	2002      	movs	r0, #2
 80a1524:	f003 ff4f 	bl	80a53c6 <digitalWrite>
    digitalWrite(RESET_OLIMEX, HIGH);
 80a1528:	2101      	movs	r1, #1
 80a152a:	2004      	movs	r0, #4
 80a152c:	f003 ff4b 	bl	80a53c6 <digitalWrite>
    digitalWrite(D7, LOW);
 80a1530:	2100      	movs	r1, #0
 80a1532:	2007      	movs	r0, #7
 80a1534:	f003 ff47 	bl	80a53c6 <digitalWrite>
    initRFID(""); //+
 80a1538:	4936      	ldr	r1, [pc, #216]	; (80a1614 <setup+0x168>)
 80a153a:	a808      	add	r0, sp, #32
 80a153c:	f002 fe78 	bl	80a4230 <_ZN6StringC1EPKc>
 80a1540:	a808      	add	r0, sp, #32
 80a1542:	f7fe fecb 	bl	80a02dc <_Z8initRFID6String>
 80a1546:	a808      	add	r0, sp, #32
 80a1548:	f002 fe28 	bl	80a419c <_ZN6StringD1Ev>
        return register_function(call_raw_user_function, (void*)func, funcKey);
 80a154c:	4a32      	ldr	r2, [pc, #200]	; (80a1618 <setup+0x16c>)
 80a154e:	4933      	ldr	r1, [pc, #204]	; (80a161c <setup+0x170>)
 80a1550:	4833      	ldr	r0, [pc, #204]	; (80a1620 <setup+0x174>)
 80a1552:	f003 fb4d 	bl	80a4bf0 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
    Particle.function("maxCurrentC1",maxCurrentC1);
 80a1556:	4933      	ldr	r1, [pc, #204]	; (80a1624 <setup+0x178>)
 80a1558:	4833      	ldr	r0, [pc, #204]	; (80a1628 <setup+0x17c>)
 80a155a:	f7ff ffa1 	bl	80a14a0 <_ZN10CloudClass8functionIA13_cJPFi6StringEEEEbRKT_DpT0_>
    Particle.function("maxCurrentC2",maxCurrentC2);
 80a155e:	4933      	ldr	r1, [pc, #204]	; (80a162c <setup+0x180>)
 80a1560:	4833      	ldr	r0, [pc, #204]	; (80a1630 <setup+0x184>)
 80a1562:	f7ff ff9d 	bl	80a14a0 <_ZN10CloudClass8functionIA13_cJPFi6StringEEEEbRKT_DpT0_>
 80a1566:	4a33      	ldr	r2, [pc, #204]	; (80a1634 <setup+0x188>)
 80a1568:	4933      	ldr	r1, [pc, #204]	; (80a1638 <setup+0x18c>)
 80a156a:	482d      	ldr	r0, [pc, #180]	; (80a1620 <setup+0x174>)
 80a156c:	f003 fb40 	bl	80a4bf0 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
    Particle.function("progModeOlmx",progModeOlmx);
 80a1570:	4932      	ldr	r1, [pc, #200]	; (80a163c <setup+0x190>)
 80a1572:	4833      	ldr	r0, [pc, #204]	; (80a1640 <setup+0x194>)
 80a1574:	f7ff ff94 	bl	80a14a0 <_ZN10CloudClass8functionIA13_cJPFi6StringEEEEbRKT_DpT0_>
    Particle.function("resetParticl",resetParticle);
 80a1578:	4932      	ldr	r1, [pc, #200]	; (80a1644 <setup+0x198>)
 80a157a:	4833      	ldr	r0, [pc, #204]	; (80a1648 <setup+0x19c>)
 80a157c:	f7ff ff90 	bl	80a14a0 <_ZN10CloudClass8functionIA13_cJPFi6StringEEEEbRKT_DpT0_>
 80a1580:	4a32      	ldr	r2, [pc, #200]	; (80a164c <setup+0x1a0>)
 80a1582:	4933      	ldr	r1, [pc, #204]	; (80a1650 <setup+0x1a4>)
 80a1584:	4826      	ldr	r0, [pc, #152]	; (80a1620 <setup+0x174>)
 80a1586:	f003 fb33 	bl	80a4bf0 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 80a158a:	4a32      	ldr	r2, [pc, #200]	; (80a1654 <setup+0x1a8>)
 80a158c:	4932      	ldr	r1, [pc, #200]	; (80a1658 <setup+0x1ac>)
 80a158e:	4824      	ldr	r0, [pc, #144]	; (80a1620 <setup+0x174>)
 80a1590:	f003 fb2e 	bl	80a4bf0 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
        return _variable(varKey, &var, STRING);
 80a1594:	4931      	ldr	r1, [pc, #196]	; (80a165c <setup+0x1b0>)
 80a1596:	4832      	ldr	r0, [pc, #200]	; (80a1660 <setup+0x1b4>)
 80a1598:	f7fe fe8e 	bl	80a02b8 <_ZN10CloudClass9_variableIcEEbPKT_PK6StringRK17CloudVariableTypeIPKcvE.isra.0>
 80a159c:	4931      	ldr	r1, [pc, #196]	; (80a1664 <setup+0x1b8>)
 80a159e:	4832      	ldr	r0, [pc, #200]	; (80a1668 <setup+0x1bc>)
 80a15a0:	f7fe fe8a 	bl	80a02b8 <_ZN10CloudClass9_variableIcEEbPKT_PK6StringRK17CloudVariableTypeIPKcvE.isra.0>
 80a15a4:	4931      	ldr	r1, [pc, #196]	; (80a166c <setup+0x1c0>)
 80a15a6:	4832      	ldr	r0, [pc, #200]	; (80a1670 <setup+0x1c4>)
 80a15a8:	f7fe fe86 	bl	80a02b8 <_ZN10CloudClass9_variableIcEEbPKT_PK6StringRK17CloudVariableTypeIPKcvE.isra.0>
    Particle.process();
 80a15ac:	f7fe fef0 	bl	80a0390 <_ZN10CloudClass7processEv>
    Time.zone(1); //Dutch time zone
 80a15b0:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80a15b4:	f003 f904 	bl	80a47c0 <_ZN9TimeClass4zoneEf>
    DEBUGPORT.println("Latest Start>\t"+String(LatestStartTime[0])+", "+String(LatestStartTime[1]));
 80a15b8:	f003 fbfe 	bl	80a4db8 <_Z16_fetch_usbserialv>
 80a15bc:	4e2d      	ldr	r6, [pc, #180]	; (80a1674 <setup+0x1c8>)
 80a15be:	4604      	mov	r4, r0
	StringSumHelper(const char *p) : String(p) {}
 80a15c0:	492d      	ldr	r1, [pc, #180]	; (80a1678 <setup+0x1cc>)
 80a15c2:	a804      	add	r0, sp, #16
 80a15c4:	f002 fe34 	bl	80a4230 <_ZN6StringC1EPKc>
 80a15c8:	220a      	movs	r2, #10
 80a15ca:	6831      	ldr	r1, [r6, #0]
 80a15cc:	4668      	mov	r0, sp
 80a15ce:	f002 feca 	bl	80a4366 <_ZN6StringC1Emh>
 80a15d2:	4669      	mov	r1, sp
 80a15d4:	a804      	add	r0, sp, #16
 80a15d6:	f002 ff2a 	bl	80a442e <_ZplRK15StringSumHelperRK6String>
 80a15da:	4928      	ldr	r1, [pc, #160]	; (80a167c <setup+0x1d0>)
 80a15dc:	f002 ff33 	bl	80a4446 <_ZplRK15StringSumHelperPKc>
 80a15e0:	4605      	mov	r5, r0
 80a15e2:	220a      	movs	r2, #10
 80a15e4:	6871      	ldr	r1, [r6, #4]
 80a15e6:	a808      	add	r0, sp, #32
 80a15e8:	f002 febd 	bl	80a4366 <_ZN6StringC1Emh>
 80a15ec:	a908      	add	r1, sp, #32
 80a15ee:	4628      	mov	r0, r5
 80a15f0:	f002 ff1d 	bl	80a442e <_ZplRK15StringSumHelperRK6String>
 80a15f4:	6801      	ldr	r1, [r0, #0]
 80a15f6:	4620      	mov	r0, r4
 80a15f8:	f002 ffb3 	bl	80a4562 <_ZN5Print7printlnEPKc>
 80a15fc:	a808      	add	r0, sp, #32
 80a15fe:	f002 fdcd 	bl	80a419c <_ZN6StringD1Ev>
 80a1602:	4668      	mov	r0, sp
 80a1604:	f002 fdca 	bl	80a419c <_ZN6StringD1Ev>
class StringSumHelper : public String
 80a1608:	a804      	add	r0, sp, #16
 80a160a:	f002 fdc7 	bl	80a419c <_ZN6StringD1Ev>
}
 80a160e:	b00c      	add	sp, #48	; 0x30
 80a1610:	bd70      	pop	{r4, r5, r6, pc}
 80a1612:	bf00      	nop
 80a1614:	080a86c9 	.word	0x080a86c9
 80a1618:	080a8543 	.word	0x080a8543
 80a161c:	080a0279 	.word	0x080a0279
 80a1620:	080a4bc5 	.word	0x080a4bc5
 80a1624:	080a0145 	.word	0x080a0145
 80a1628:	080a8659 	.word	0x080a8659
 80a162c:	080a01c9 	.word	0x080a01c9
 80a1630:	080a8666 	.word	0x080a8666
 80a1634:	080a851b 	.word	0x080a851b
 80a1638:	080a00bf 	.word	0x080a00bf
 80a163c:	080a00dd 	.word	0x080a00dd
 80a1640:	080a8673 	.word	0x080a8673
 80a1644:	080a013d 	.word	0x080a013d
 80a1648:	080a8680 	.word	0x080a8680
 80a164c:	080a868d 	.word	0x080a868d
 80a1650:	080a0121 	.word	0x080a0121
 80a1654:	080a8698 	.word	0x080a8698
 80a1658:	080a02dd 	.word	0x080a02dd
 80a165c:	20000510 	.word	0x20000510
 80a1660:	080a86a1 	.word	0x080a86a1
 80a1664:	20000320 	.word	0x20000320
 80a1668:	080a86ac 	.word	0x080a86ac
 80a166c:	20000548 	.word	0x20000548
 80a1670:	080a86b5 	.word	0x080a86b5
 80a1674:	200002cc 	.word	0x200002cc
 80a1678:	080a86bb 	.word	0x080a86bb
 80a167c:	080a86ca 	.word	0x080a86ca

080a1680 <_GLOBAL__sub_I_readnextLine>:
 80a1680:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
String UIDtagCharger1="No ID";
 80a1682:	4f2c      	ldr	r7, [pc, #176]	; (80a1734 <_GLOBAL__sub_I_readnextLine+0xb4>)
 80a1684:	4e2c      	ldr	r6, [pc, #176]	; (80a1738 <_GLOBAL__sub_I_readnextLine+0xb8>)
 80a1686:	4c2d      	ldr	r4, [pc, #180]	; (80a173c <_GLOBAL__sub_I_readnextLine+0xbc>)
 80a1688:	4d2d      	ldr	r5, [pc, #180]	; (80a1740 <_GLOBAL__sub_I_readnextLine+0xc0>)
 80a168a:	4639      	mov	r1, r7
 80a168c:	4630      	mov	r0, r6
 80a168e:	f002 fdcf 	bl	80a4230 <_ZN6StringC1EPKc>
 80a1692:	4630      	mov	r0, r6
String UIDtagCharger2="No ID";
 80a1694:	4e2b      	ldr	r6, [pc, #172]	; (80a1744 <_GLOBAL__sub_I_readnextLine+0xc4>)
String UIDtagCharger1="No ID";
 80a1696:	4622      	mov	r2, r4
 80a1698:	4629      	mov	r1, r5
 80a169a:	f003 ff19 	bl	80a54d0 <__aeabi_atexit>
String UIDtagCharger2="No ID";
 80a169e:	4639      	mov	r1, r7
 80a16a0:	4630      	mov	r0, r6
 80a16a2:	f002 fdc5 	bl	80a4230 <_ZN6StringC1EPKc>
 80a16a6:	4622      	mov	r2, r4
 80a16a8:	4629      	mov	r1, r5
 80a16aa:	4630      	mov	r0, r6
 80a16ac:	f003 ff10 	bl	80a54d0 <__aeabi_atexit>
    bool clearCredentials(void) {
        return network_clear_credentials(*this, 0, NULL, NULL);
    }

    int selectAntenna(WLanSelectAntenna_TypeDef antenna) {
        return wlan_select_antenna(antenna);
 80a16b0:	2001      	movs	r0, #1
 80a16b2:	f002 f8a9 	bl	80a3808 <wlan_select_antenna>
MQTT client("broker.hivemq.com", 1883, MQTT_DEFAULT_KEEPALIVE, callback, 512);
 80a16b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80a16ba:	4e23      	ldr	r6, [pc, #140]	; (80a1748 <_GLOBAL__sub_I_readnextLine+0xc8>)
 80a16bc:	9301      	str	r3, [sp, #4]
 80a16be:	4b23      	ldr	r3, [pc, #140]	; (80a174c <_GLOBAL__sub_I_readnextLine+0xcc>)
 80a16c0:	f240 725b 	movw	r2, #1883	; 0x75b
 80a16c4:	9300      	str	r3, [sp, #0]
 80a16c6:	4630      	mov	r0, r6
 80a16c8:	230f      	movs	r3, #15
 80a16ca:	4921      	ldr	r1, [pc, #132]	; (80a1750 <_GLOBAL__sub_I_readnextLine+0xd0>)
 80a16cc:	f000 fd9c 	bl	80a2208 <_ZN4MQTTC1EPctiPFvS0_PhjEi>
 80a16d0:	4630      	mov	r0, r6
String test = "0";
 80a16d2:	4e20      	ldr	r6, [pc, #128]	; (80a1754 <_GLOBAL__sub_I_readnextLine+0xd4>)
MQTT client("broker.hivemq.com", 1883, MQTT_DEFAULT_KEEPALIVE, callback, 512);
 80a16d4:	4622      	mov	r2, r4
 80a16d6:	4920      	ldr	r1, [pc, #128]	; (80a1758 <_GLOBAL__sub_I_readnextLine+0xd8>)
 80a16d8:	f003 fefa 	bl	80a54d0 <__aeabi_atexit>
String test = "0";
 80a16dc:	4630      	mov	r0, r6
 80a16de:	491f      	ldr	r1, [pc, #124]	; (80a175c <_GLOBAL__sub_I_readnextLine+0xdc>)
 80a16e0:	f002 fda6 	bl	80a4230 <_ZN6StringC1EPKc>
 80a16e4:	4622      	mov	r2, r4
 80a16e6:	4629      	mov	r1, r5
 80a16e8:	4630      	mov	r0, r6
 80a16ea:	f003 fef1 	bl	80a54d0 <__aeabi_atexit>
String ShareVar;
 80a16ee:	4f1c      	ldr	r7, [pc, #112]	; (80a1760 <_GLOBAL__sub_I_readnextLine+0xe0>)
 80a16f0:	4e1c      	ldr	r6, [pc, #112]	; (80a1764 <_GLOBAL__sub_I_readnextLine+0xe4>)
MFRC522 mfrc522_Charger1(SS_PIN_CHARGER1, RST_PIN);   // Create MFRC522 instance.
 80a16f2:	220a      	movs	r2, #10
 80a16f4:	210b      	movs	r1, #11
 80a16f6:	481c      	ldr	r0, [pc, #112]	; (80a1768 <_GLOBAL__sub_I_readnextLine+0xe8>)
 80a16f8:	f000 f95e 	bl	80a19b8 <_ZN7MFRC522C1Ehh>
MFRC522 mfrc522_Charger2(SS_PIN_CHARGER2, RST_PIN);   // Create MFRC522 instance.
 80a16fc:	220a      	movs	r2, #10
 80a16fe:	210c      	movs	r1, #12
 80a1700:	481a      	ldr	r0, [pc, #104]	; (80a176c <_GLOBAL__sub_I_readnextLine+0xec>)
 80a1702:	f000 f959 	bl	80a19b8 <_ZN7MFRC522C1Ehh>
String ShareVar;
 80a1706:	4639      	mov	r1, r7
 80a1708:	4630      	mov	r0, r6
 80a170a:	f002 fd91 	bl	80a4230 <_ZN6StringC1EPKc>
 80a170e:	4630      	mov	r0, r6
String currentStr="";
 80a1710:	4e17      	ldr	r6, [pc, #92]	; (80a1770 <_GLOBAL__sub_I_readnextLine+0xf0>)
String ShareVar;
 80a1712:	4622      	mov	r2, r4
 80a1714:	4629      	mov	r1, r5
 80a1716:	f003 fedb 	bl	80a54d0 <__aeabi_atexit>
String currentStr="";
 80a171a:	4639      	mov	r1, r7
 80a171c:	4630      	mov	r0, r6
 80a171e:	f002 fd87 	bl	80a4230 <_ZN6StringC1EPKc>
 80a1722:	4622      	mov	r2, r4
 80a1724:	4629      	mov	r1, r5
 80a1726:	4630      	mov	r0, r6
 80a1728:	b003      	add	sp, #12
 80a172a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
String currentStr="";
 80a172e:	f003 becf 	b.w	80a54d0 <__aeabi_atexit>
 80a1732:	bf00      	nop
 80a1734:	080a8653 	.word	0x080a8653
 80a1738:	20000334 	.word	0x20000334
 80a173c:	20000240 	.word	0x20000240
 80a1740:	080a419d 	.word	0x080a419d
 80a1744:	20000344 	.word	0x20000344
 80a1748:	200004b8 	.word	0x200004b8
 80a174c:	080a17dd 	.word	0x080a17dd
 80a1750:	080a86cd 	.word	0x080a86cd
 80a1754:	20000548 	.word	0x20000548
 80a1758:	080a29cd 	.word	0x080a29cd
 80a175c:	080a85d7 	.word	0x080a85d7
 80a1760:	080a86c9 	.word	0x080a86c9
 80a1764:	20000320 	.word	0x20000320
 80a1768:	20000521 	.word	0x20000521
 80a176c:	2000052f 	.word	0x2000052f
 80a1770:	20000510 	.word	0x20000510

080a1774 <_Z19getMeasure_callbackPhj>:
    int setP = 0;
 80a1774:	2300      	movs	r3, #0
void getMeasure_callback(byte* payload, unsigned int length) {
 80a1776:	b530      	push	{r4, r5, lr}
 80a1778:	460d      	mov	r5, r1
 80a177a:	4604      	mov	r4, r0
 80a177c:	b08f      	sub	sp, #60	; 0x3c
    JsonParser parser1;
 80a177e:	a803      	add	r0, sp, #12
    int setP = 0;
 80a1780:	9301      	str	r3, [sp, #4]
    JsonParser parser1;
 80a1782:	f001 f9d3 	bl	80a2b2c <_ZN10JsonParserC1Ev>
    parser1.clear();
 80a1786:	a803      	add	r0, sp, #12
 80a1788:	f001 f9cc 	bl	80a2b24 <_ZN10JsonBuffer5clearEv>
    parser1.addData( (char*)(payload), length); 
 80a178c:	462a      	mov	r2, r5
 80a178e:	4621      	mov	r1, r4
 80a1790:	a803      	add	r0, sp, #12
 80a1792:	f001 f9aa 	bl	80a2aea <_ZN10JsonBuffer7addDataEPKcj>
    parser1.parse();
 80a1796:	a803      	add	r0, sp, #12
 80a1798:	f001 fe5c 	bl	80a3454 <_ZN10JsonParser5parseEv>
		if (getValueTokenByKey(getOuterObject(), name, value)) {
 80a179c:	a803      	add	r0, sp, #12
 80a179e:	f001 f9d3 	bl	80a2b48 <_ZNK10JsonParser14getOuterObjectEv>
 80a17a2:	4a0d      	ldr	r2, [pc, #52]	; (80a17d8 <_Z19getMeasure_callbackPhj+0x64>)
 80a17a4:	4601      	mov	r1, r0
 80a17a6:	ab02      	add	r3, sp, #8
 80a17a8:	a803      	add	r0, sp, #12
 80a17aa:	f001 fb0b 	bl	80a2dc4 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
 80a17ae:	b120      	cbz	r0, 80a17ba <_Z19getMeasure_callbackPhj+0x46>
			return getTokenValue(value, result);
 80a17b0:	9902      	ldr	r1, [sp, #8]
 80a17b2:	aa01      	add	r2, sp, #4
 80a17b4:	a803      	add	r0, sp, #12
 80a17b6:	f001 fa2b 	bl	80a2c10 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERi>
    unsigned int setPoint = setP;
 80a17ba:	9c01      	ldr	r4, [sp, #4]
      maxCurrentC1_test(setPoint); //Emeter3, I1
 80a17bc:	4620      	mov	r0, r4
 80a17be:	f7ff f889 	bl	80a08d4 <_Z17maxCurrentC1_testj>
      delay(10);
 80a17c2:	200a      	movs	r0, #10
 80a17c4:	f003 f938 	bl	80a4a38 <delay>
      maxCurrentC2_test(setPoint); //Emeter3, I1
 80a17c8:	4620      	mov	r0, r4
 80a17ca:	f7ff f8d5 	bl	80a0978 <_Z17maxCurrentC2_testj>
    JsonParser parser1;
 80a17ce:	a803      	add	r0, sp, #12
 80a17d0:	f001 f950 	bl	80a2a74 <_ZN10JsonParserD1Ev>
}
 80a17d4:	b00f      	add	sp, #60	; 0x3c
 80a17d6:	bd30      	pop	{r4, r5, pc}
 80a17d8:	080a86df 	.word	0x080a86df

080a17dc <_Z8callbackPcPhj>:
void callback(char* topic, byte* payload, unsigned int length) {
 80a17dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a17e0:	b087      	sub	sp, #28
 80a17e2:	4605      	mov	r5, r0
 80a17e4:	af02      	add	r7, sp, #8
 80a17e6:	460e      	mov	r6, r1
    test = "99";
 80a17e8:	4865      	ldr	r0, [pc, #404]	; (80a1980 <_Z8callbackPcPhj+0x1a4>)
 80a17ea:	4966      	ldr	r1, [pc, #408]	; (80a1984 <_Z8callbackPcPhj+0x1a8>)
void callback(char* topic, byte* payload, unsigned int length) {
 80a17ec:	4614      	mov	r4, r2
    test = "99";
 80a17ee:	f002 fd71 	bl	80a42d4 <_ZN6StringaSEPKc>
	time_t time = Time.now();
 80a17f2:	f003 f906 	bl	80a4a02 <_ZN9TimeClass3nowEv>
 80a17f6:	4681      	mov	r9, r0
    DEBUGPORT.print("MQTT>\tCallback function is called at: ");
 80a17f8:	f003 fade 	bl	80a4db8 <_Z16_fetch_usbserialv>
 80a17fc:	4962      	ldr	r1, [pc, #392]	; (80a1988 <_Z8callbackPcPhj+0x1ac>)
 80a17fe:	f002 fe9d 	bl	80a453c <_ZN5Print5printEPKc>
    DEBUGPORT.println(Time.format(time, TIME_FORMAT_DEFAULT));
 80a1802:	f003 fad9 	bl	80a4db8 <_Z16_fetch_usbserialv>
 80a1806:	464a      	mov	r2, r9
 80a1808:	4680      	mov	r8, r0
 80a180a:	4b60      	ldr	r3, [pc, #384]	; (80a198c <_Z8callbackPcPhj+0x1b0>)
 80a180c:	4638      	mov	r0, r7
 80a180e:	681b      	ldr	r3, [r3, #0]
 80a1810:	495f      	ldr	r1, [pc, #380]	; (80a1990 <_Z8callbackPcPhj+0x1b4>)
 80a1812:	9300      	str	r3, [sp, #0]
 80a1814:	17d3      	asrs	r3, r2, #31
 80a1816:	f003 f895 	bl	80a4944 <_ZN9TimeClass6formatExPKc>
 80a181a:	6839      	ldr	r1, [r7, #0]
 80a181c:	4640      	mov	r0, r8
 80a181e:	f002 fea0 	bl	80a4562 <_ZN5Print7printlnEPKc>
 80a1822:	4638      	mov	r0, r7
 80a1824:	f002 fcba 	bl	80a419c <_ZN6StringD1Ev>
     if (strcmp(topic, "HANevse/allowUser")==0)
 80a1828:	4628      	mov	r0, r5
 80a182a:	495a      	ldr	r1, [pc, #360]	; (80a1994 <_Z8callbackPcPhj+0x1b8>)
 80a182c:	f005 fa2c 	bl	80a6c88 <strcmp>
 80a1830:	b938      	cbnz	r0, 80a1842 <_Z8callbackPcPhj+0x66>
        allowUser_callback(payload, length);
 80a1832:	4621      	mov	r1, r4
 80a1834:	4630      	mov	r0, r6
 80a1836:	f7ff f909 	bl	80a0a4c <_Z18allowUser_callbackPhj>
}
 80a183a:	3714      	adds	r7, #20
 80a183c:	46bd      	mov	sp, r7
 80a183e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
     if ( (strcmp(topic, "HANevse/energyMeter")==0) && TESTCASE )
 80a1842:	4628      	mov	r0, r5
 80a1844:	4954      	ldr	r1, [pc, #336]	; (80a1998 <_Z8callbackPcPhj+0x1bc>)
 80a1846:	f005 fa1f 	bl	80a6c88 <strcmp>
 80a184a:	b938      	cbnz	r0, 80a185c <_Z8callbackPcPhj+0x80>
 80a184c:	4b53      	ldr	r3, [pc, #332]	; (80a199c <_Z8callbackPcPhj+0x1c0>)
 80a184e:	781b      	ldrb	r3, [r3, #0]
 80a1850:	b123      	cbz	r3, 80a185c <_Z8callbackPcPhj+0x80>
        getMeasure_callback(payload, length);
 80a1852:	4621      	mov	r1, r4
 80a1854:	4630      	mov	r0, r6
 80a1856:	f7ff ff8d 	bl	80a1774 <_Z19getMeasure_callbackPhj>
 80a185a:	e7ee      	b.n	80a183a <_Z8callbackPcPhj+0x5e>
     if (strcmp(topic, "HANevse/resetOlimex")==0)
 80a185c:	4628      	mov	r0, r5
 80a185e:	4950      	ldr	r1, [pc, #320]	; (80a19a0 <_Z8callbackPcPhj+0x1c4>)
 80a1860:	f005 fa12 	bl	80a6c88 <strcmp>
 80a1864:	4680      	mov	r8, r0
 80a1866:	b9d0      	cbnz	r0, 80a189e <_Z8callbackPcPhj+0xc2>
        char payl[length+1];
 80a1868:	f104 0308 	add.w	r3, r4, #8
 80a186c:	f023 0307 	bic.w	r3, r3, #7
        resetOlimex(payl);
 80a1870:	466d      	mov	r5, sp
        char payl[length+1];
 80a1872:	ebad 0d03 	sub.w	sp, sp, r3
 80a1876:	ab02      	add	r3, sp, #8
        memcpy(payl, payload, length);
 80a1878:	4622      	mov	r2, r4
 80a187a:	4631      	mov	r1, r6
 80a187c:	4618      	mov	r0, r3
 80a187e:	f005 f9c9 	bl	80a6c14 <memcpy>
        resetOlimex(payl);
 80a1882:	4601      	mov	r1, r0
        payl[length] = NULL;
 80a1884:	f800 8004 	strb.w	r8, [r0, r4]
        resetOlimex(payl);
 80a1888:	4638      	mov	r0, r7
 80a188a:	f002 fcd1 	bl	80a4230 <_ZN6StringC1EPKc>
 80a188e:	4638      	mov	r0, r7
 80a1890:	f7fe fc15 	bl	80a00be <_Z11resetOlimex6String>
        switchTest(payl);
 80a1894:	4638      	mov	r0, r7
 80a1896:	f002 fc81 	bl	80a419c <_ZN6StringD1Ev>
 80a189a:	46ad      	mov	sp, r5
 80a189c:	e7cd      	b.n	80a183a <_Z8callbackPcPhj+0x5e>
     if (strcmp(topic, "HANevse/resetPhoton")==0)
 80a189e:	4628      	mov	r0, r5
 80a18a0:	4940      	ldr	r1, [pc, #256]	; (80a19a4 <_Z8callbackPcPhj+0x1c8>)
 80a18a2:	f005 f9f1 	bl	80a6c88 <strcmp>
 80a18a6:	b928      	cbnz	r0, 80a18b4 <_Z8callbackPcPhj+0xd8>
        resetParticle("1");
 80a18a8:	493f      	ldr	r1, [pc, #252]	; (80a19a8 <_Z8callbackPcPhj+0x1cc>)
 80a18aa:	4638      	mov	r0, r7
 80a18ac:	f002 fcc0 	bl	80a4230 <_ZN6StringC1EPKc>
    System.reset();
 80a18b0:	f002 f925 	bl	80a3afe <_ZN11SystemClass5resetEv>
     if (strcmp(topic, "HANevse/switchTest")==0)
 80a18b4:	4628      	mov	r0, r5
 80a18b6:	493d      	ldr	r1, [pc, #244]	; (80a19ac <_Z8callbackPcPhj+0x1d0>)
 80a18b8:	f005 f9e6 	bl	80a6c88 <strcmp>
 80a18bc:	4680      	mov	r8, r0
 80a18be:	b9b0      	cbnz	r0, 80a18ee <_Z8callbackPcPhj+0x112>
        char payl[length+1];
 80a18c0:	f104 0308 	add.w	r3, r4, #8
 80a18c4:	f023 0307 	bic.w	r3, r3, #7
        switchTest(payl);
 80a18c8:	466d      	mov	r5, sp
        char payl[length+1];
 80a18ca:	ebad 0d03 	sub.w	sp, sp, r3
 80a18ce:	ab02      	add	r3, sp, #8
        memcpy(payl, payload, length);
 80a18d0:	4622      	mov	r2, r4
 80a18d2:	4631      	mov	r1, r6
 80a18d4:	4618      	mov	r0, r3
 80a18d6:	f005 f99d 	bl	80a6c14 <memcpy>
        switchTest(payl);
 80a18da:	4601      	mov	r1, r0
        payl[length] = NULL;
 80a18dc:	f800 8004 	strb.w	r8, [r0, r4]
        switchTest(payl);
 80a18e0:	4638      	mov	r0, r7
 80a18e2:	f002 fca5 	bl	80a4230 <_ZN6StringC1EPKc>
 80a18e6:	4638      	mov	r0, r7
 80a18e8:	f7fe fcc6 	bl	80a0278 <_Z10switchTest6String>
 80a18ec:	e7d2      	b.n	80a1894 <_Z8callbackPcPhj+0xb8>
     if ((strcmp(topic, "HANevse/maxC1")==0)  && !TESTCASE )
 80a18ee:	4628      	mov	r0, r5
 80a18f0:	492f      	ldr	r1, [pc, #188]	; (80a19b0 <_Z8callbackPcPhj+0x1d4>)
 80a18f2:	f005 f9c9 	bl	80a6c88 <strcmp>
 80a18f6:	b9e0      	cbnz	r0, 80a1932 <_Z8callbackPcPhj+0x156>
 80a18f8:	4b28      	ldr	r3, [pc, #160]	; (80a199c <_Z8callbackPcPhj+0x1c0>)
 80a18fa:	f893 8000 	ldrb.w	r8, [r3]
 80a18fe:	f1b8 0f00 	cmp.w	r8, #0
 80a1902:	d116      	bne.n	80a1932 <_Z8callbackPcPhj+0x156>
        char payl[length+1];
 80a1904:	f104 0308 	add.w	r3, r4, #8
 80a1908:	f023 0307 	bic.w	r3, r3, #7
        maxCurrentC1(payl);
 80a190c:	466d      	mov	r5, sp
        char payl[length+1];
 80a190e:	ebad 0d03 	sub.w	sp, sp, r3
 80a1912:	ab02      	add	r3, sp, #8
        memcpy(payl, payload, length);
 80a1914:	4622      	mov	r2, r4
 80a1916:	4631      	mov	r1, r6
 80a1918:	4618      	mov	r0, r3
 80a191a:	f005 f97b 	bl	80a6c14 <memcpy>
        maxCurrentC1(payl);
 80a191e:	4601      	mov	r1, r0
        payl[length] = NULL;
 80a1920:	f800 8004 	strb.w	r8, [r0, r4]
        maxCurrentC1(payl);
 80a1924:	4638      	mov	r0, r7
 80a1926:	f002 fc83 	bl	80a4230 <_ZN6StringC1EPKc>
 80a192a:	4638      	mov	r0, r7
 80a192c:	f7fe fc0a 	bl	80a0144 <_Z12maxCurrentC16String>
 80a1930:	e7b0      	b.n	80a1894 <_Z8callbackPcPhj+0xb8>
     if ((strcmp(topic, "HANevse/maxC2")==0) && !TESTCASE )
 80a1932:	4628      	mov	r0, r5
 80a1934:	491f      	ldr	r1, [pc, #124]	; (80a19b4 <_Z8callbackPcPhj+0x1d8>)
 80a1936:	f005 f9a7 	bl	80a6c88 <strcmp>
 80a193a:	2800      	cmp	r0, #0
 80a193c:	f47f af7d 	bne.w	80a183a <_Z8callbackPcPhj+0x5e>
 80a1940:	4b16      	ldr	r3, [pc, #88]	; (80a199c <_Z8callbackPcPhj+0x1c0>)
 80a1942:	781d      	ldrb	r5, [r3, #0]
 80a1944:	2d00      	cmp	r5, #0
 80a1946:	f47f af78 	bne.w	80a183a <_Z8callbackPcPhj+0x5e>
        char payl[length+1];
 80a194a:	f104 0308 	add.w	r3, r4, #8
 80a194e:	f023 0307 	bic.w	r3, r3, #7
        maxCurrentC2(payl);
 80a1952:	46e8      	mov	r8, sp
        char payl[length+1];
 80a1954:	ebad 0d03 	sub.w	sp, sp, r3
 80a1958:	ab02      	add	r3, sp, #8
        memcpy(payl, payload, length);
 80a195a:	4622      	mov	r2, r4
 80a195c:	4618      	mov	r0, r3
 80a195e:	4631      	mov	r1, r6
 80a1960:	f005 f958 	bl	80a6c14 <memcpy>
        maxCurrentC2(payl);
 80a1964:	4601      	mov	r1, r0
        payl[length] = NULL;
 80a1966:	5505      	strb	r5, [r0, r4]
        maxCurrentC2(payl);
 80a1968:	4638      	mov	r0, r7
 80a196a:	f002 fc61 	bl	80a4230 <_ZN6StringC1EPKc>
 80a196e:	4638      	mov	r0, r7
 80a1970:	f7fe fc2a 	bl	80a01c8 <_Z12maxCurrentC26String>
 80a1974:	4638      	mov	r0, r7
 80a1976:	f002 fc11 	bl	80a419c <_ZN6StringD1Ev>
 80a197a:	46c5      	mov	sp, r8
}
 80a197c:	e75d      	b.n	80a183a <_Z8callbackPcPhj+0x5e>
 80a197e:	bf00      	nop
 80a1980:	20000548 	.word	0x20000548
 80a1984:	080a86e8 	.word	0x080a86e8
 80a1988:	080a86eb 	.word	0x080a86eb
 80a198c:	20000008 	.word	0x20000008
 80a1990:	2000056c 	.word	0x2000056c
 80a1994:	080a8501 	.word	0x080a8501
 80a1998:	080a84ed 	.word	0x080a84ed
 80a199c:	20000330 	.word	0x20000330
 80a19a0:	080a8513 	.word	0x080a8513
 80a19a4:	080a8527 	.word	0x080a8527
 80a19a8:	080a8664 	.word	0x080a8664
 80a19ac:	080a853b 	.word	0x080a853b
 80a19b0:	080a854e 	.word	0x080a854e
 80a19b4:	080a855c 	.word	0x080a855c

080a19b8 <_ZN7MFRC522C1Ehh>:

/**
 * Constructor.
 * Prepares the output pins.
 */
MFRC522::MFRC522(	byte chipSelectPin,		///< Arduino pin connected to MFRC522's SPI slave select input (Pin 24, NSS, active low)
 80a19b8:	b538      	push	{r3, r4, r5, lr}
 80a19ba:	4604      	mov	r4, r0
 80a19bc:	4615      	mov	r5, r2
 80a19be:	4608      	mov	r0, r1
					byte resetPowerDownPin	///< Arduino pin connected to MFRC522's reset and power down input (Pin 6, NRSTPD, active low)
				) {
	// Set the chipSelectPin as digital output, do not select the slave yet
	_chipSelectPin = chipSelectPin;
 80a19c0:	7321      	strb	r1, [r4, #12]
	pinMode(_chipSelectPin, OUTPUT);
 80a19c2:	2101      	movs	r1, #1
 80a19c4:	f003 fcee 	bl	80a53a4 <pinMode>
	digitalWrite(_chipSelectPin, HIGH);
 80a19c8:	7b20      	ldrb	r0, [r4, #12]
 80a19ca:	2101      	movs	r1, #1
 80a19cc:	f003 fcfb 	bl	80a53c6 <digitalWrite>
	
	// Set the resetPowerDownPin as digital output, do not reset or power down.
	_resetPowerDownPin = resetPowerDownPin;
	pinMode(_resetPowerDownPin, OUTPUT);
 80a19d0:	4628      	mov	r0, r5
 80a19d2:	2101      	movs	r1, #1
	_resetPowerDownPin = resetPowerDownPin;
 80a19d4:	7365      	strb	r5, [r4, #13]
	pinMode(_resetPowerDownPin, OUTPUT);
 80a19d6:	f003 fce5 	bl	80a53a4 <pinMode>
	digitalWrite(_resetPowerDownPin, LOW);
 80a19da:	7b60      	ldrb	r0, [r4, #13]
 80a19dc:	2100      	movs	r1, #0
 80a19de:	f003 fcf2 	bl	80a53c6 <digitalWrite>
	
	// Set SPI bus to work with MFRC522 chip.
	//setSPIConfig();
} // End constructor
 80a19e2:	4620      	mov	r0, r4
 80a19e4:	bd38      	pop	{r3, r4, r5, pc}
	...

080a19e8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
    static SPIClass& instance() {
 80a19e8:	b538      	push	{r3, r4, r5, lr}
        static SPIClass instance(Interface);
 80a19ea:	4d0c      	ldr	r5, [pc, #48]	; (80a1a1c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
 80a19ec:	7829      	ldrb	r1, [r5, #0]
 80a19ee:	f3bf 8f5b 	dmb	ish
 80a19f2:	f011 0401 	ands.w	r4, r1, #1
 80a19f6:	d10f      	bne.n	80a1a18 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>
 80a19f8:	4628      	mov	r0, r5
 80a19fa:	f7fe fb56 	bl	80a00aa <__cxa_guard_acquire>
 80a19fe:	b158      	cbz	r0, 80a1a18 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>
 80a1a00:	4621      	mov	r1, r4
 80a1a02:	4807      	ldr	r0, [pc, #28]	; (80a1a20 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x38>)
 80a1a04:	f002 f839 	bl	80a3a7a <_ZN8SPIClassC1E19hal_spi_interface_t>
 80a1a08:	4628      	mov	r0, r5
 80a1a0a:	f7fe fb53 	bl	80a00b4 <__cxa_guard_release>
 80a1a0e:	4a05      	ldr	r2, [pc, #20]	; (80a1a24 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x3c>)
 80a1a10:	4905      	ldr	r1, [pc, #20]	; (80a1a28 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x40>)
 80a1a12:	4803      	ldr	r0, [pc, #12]	; (80a1a20 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x38>)
 80a1a14:	f003 fd5c 	bl	80a54d0 <__aeabi_atexit>
    }
 80a1a18:	4801      	ldr	r0, [pc, #4]	; (80a1a20 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x38>)
 80a1a1a:	bd38      	pop	{r3, r4, r5, pc}
 80a1a1c:	20000244 	.word	0x20000244
 80a1a20:	20000248 	.word	0x20000248
 80a1a24:	20000240 	.word	0x20000240
 80a1a28:	080a02a9 	.word	0x080a02a9

080a1a2c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>:
        return instance().setClockSpeed(value, scale);
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
 80a1a2c:	b510      	push	{r4, lr}
 80a1a2e:	4604      	mov	r4, r0
        return instance().transfer(data);
 80a1a30:	f7ff ffda 	bl	80a19e8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 80a1a34:	4621      	mov	r1, r4
    }
 80a1a36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return instance().transfer(data);
 80a1a3a:	f002 b83b 	b.w	80a3ab4 <_ZN8SPIClass8transferEh>

080a1a3e <_ZN7MFRC52217PCD_WriteRegisterEhh>:
 * Writes a byte to the specified register in the MFRC522 chip.
 * The interface is described in the datasheet section 8.1.2.
 */
void MFRC522::PCD_WriteRegister(	byte reg,		///< The register to write to. One of the PCD_Register enums.
									byte value		///< The value to write.
								) {
 80a1a3e:	b570      	push	{r4, r5, r6, lr}
 80a1a40:	460e      	mov	r6, r1
 80a1a42:	4615      	mov	r5, r2
 80a1a44:	4604      	mov	r4, r0
	digitalWrite(_chipSelectPin, LOW);		// Select slave
 80a1a46:	2100      	movs	r1, #0
 80a1a48:	7b00      	ldrb	r0, [r0, #12]
 80a1a4a:	f003 fcbc 	bl	80a53c6 <digitalWrite>
	SPI.transfer(reg & 0x7E);					// MSB == 0 is for writing. LSB is not used in address. Datasheet section 8.1.2.3.
 80a1a4e:	f006 007e 	and.w	r0, r6, #126	; 0x7e
 80a1a52:	f7ff ffeb 	bl	80a1a2c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
	SPI.transfer(value);
 80a1a56:	4628      	mov	r0, r5
 80a1a58:	f7ff ffe8 	bl	80a1a2c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
	digitalWrite(_chipSelectPin, HIGH);		// Release slave again
 80a1a5c:	7b20      	ldrb	r0, [r4, #12]
 80a1a5e:	2101      	movs	r1, #1
} // End PCD_WriteRegister()
 80a1a60:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	digitalWrite(_chipSelectPin, HIGH);		// Release slave again
 80a1a64:	f003 bcaf 	b.w	80a53c6 <digitalWrite>

080a1a68 <_ZN7MFRC52217PCD_WriteRegisterEhhPh>:
 * The interface is described in the datasheet section 8.1.2.
 */
void MFRC522::PCD_WriteRegister(	byte reg,		///< The register to write to. One of the PCD_Register enums.
									byte count,		///< The number of bytes to write to the register
									byte *values	///< The values to write. Byte array.
								) {
 80a1a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1a6a:	460f      	mov	r7, r1
 80a1a6c:	4606      	mov	r6, r0
	digitalWrite(_chipSelectPin, LOW);		// Select slave
 80a1a6e:	2100      	movs	r1, #0
 80a1a70:	7b00      	ldrb	r0, [r0, #12]
								) {
 80a1a72:	4615      	mov	r5, r2
 80a1a74:	461c      	mov	r4, r3
	digitalWrite(_chipSelectPin, LOW);		// Select slave
 80a1a76:	f003 fca6 	bl	80a53c6 <digitalWrite>
	SPI.transfer(reg & 0x7E);				// MSB == 0 is for writing. LSB is not used in address. Datasheet section 8.1.2.3.
 80a1a7a:	f007 007e 	and.w	r0, r7, #126	; 0x7e
 80a1a7e:	f7ff ffd5 	bl	80a1a2c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
	for (byte index = 0; index < count; index++) {
 80a1a82:	4425      	add	r5, r4
 80a1a84:	42ac      	cmp	r4, r5
 80a1a86:	d004      	beq.n	80a1a92 <_ZN7MFRC52217PCD_WriteRegisterEhhPh+0x2a>
		SPI.transfer(values[index]);
 80a1a88:	f814 0b01 	ldrb.w	r0, [r4], #1
 80a1a8c:	f7ff ffce 	bl	80a1a2c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
	for (byte index = 0; index < count; index++) {
 80a1a90:	e7f8      	b.n	80a1a84 <_ZN7MFRC52217PCD_WriteRegisterEhhPh+0x1c>
	}
	digitalWrite(_chipSelectPin, HIGH);		// Release slave again
 80a1a92:	7b30      	ldrb	r0, [r6, #12]
 80a1a94:	2101      	movs	r1, #1
} // End PCD_WriteRegister()
 80a1a96:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	digitalWrite(_chipSelectPin, HIGH);		// Release slave again
 80a1a9a:	f003 bc94 	b.w	80a53c6 <digitalWrite>

080a1a9e <_ZN7MFRC52216PCD_ReadRegisterEh>:
/**
 * Reads a byte from the specified register in the MFRC522 chip.
 * The interface is described in the datasheet section 8.1.2.
 */
byte MFRC522::PCD_ReadRegister(	byte reg	///< The register to read from. One of the PCD_Register enums.
								) {
 80a1a9e:	b538      	push	{r3, r4, r5, lr}
 80a1aa0:	460c      	mov	r4, r1
 80a1aa2:	4605      	mov	r5, r0
	byte value;
	digitalWrite(_chipSelectPin, LOW);			// Select slave
 80a1aa4:	2100      	movs	r1, #0
 80a1aa6:	7b00      	ldrb	r0, [r0, #12]
	SPI.transfer(0x80 | (reg & 0x7E));			// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
 80a1aa8:	f004 047e 	and.w	r4, r4, #126	; 0x7e
	digitalWrite(_chipSelectPin, LOW);			// Select slave
 80a1aac:	f003 fc8b 	bl	80a53c6 <digitalWrite>
	SPI.transfer(0x80 | (reg & 0x7E));			// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
 80a1ab0:	f044 0080 	orr.w	r0, r4, #128	; 0x80
 80a1ab4:	f7ff ffba 	bl	80a1a2c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
	value = SPI.transfer(0);					// Read the value back. Send 0 to stop reading.
 80a1ab8:	2000      	movs	r0, #0
 80a1aba:	f7ff ffb7 	bl	80a1a2c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
 80a1abe:	4604      	mov	r4, r0
	digitalWrite(_chipSelectPin, HIGH);			// Release slave again
 80a1ac0:	2101      	movs	r1, #1
 80a1ac2:	7b28      	ldrb	r0, [r5, #12]
 80a1ac4:	f003 fc7f 	bl	80a53c6 <digitalWrite>
	return value;
} // End PCD_ReadRegister()
 80a1ac8:	4620      	mov	r0, r4
 80a1aca:	bd38      	pop	{r3, r4, r5, pc}

080a1acc <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>:
/**
 * Sets the bits given in mask in register reg.
 */
void MFRC522::PCD_SetRegisterBitMask(	byte reg,	///< The register to update. One of the PCD_Register enums.
										byte mask	///< The bits to set.
									) { 
 80a1acc:	b570      	push	{r4, r5, r6, lr}
 80a1ace:	4604      	mov	r4, r0
 80a1ad0:	460d      	mov	r5, r1
 80a1ad2:	4616      	mov	r6, r2
	byte tmp;
	tmp = PCD_ReadRegister(reg);
 80a1ad4:	f7ff ffe3 	bl	80a1a9e <_ZN7MFRC52216PCD_ReadRegisterEh>
	PCD_WriteRegister(reg, tmp | mask);			// set bit mask
 80a1ad8:	ea40 0206 	orr.w	r2, r0, r6
 80a1adc:	4629      	mov	r1, r5
 80a1ade:	4620      	mov	r0, r4
} // End PCD_SetRegisterBitMask()
 80a1ae0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	PCD_WriteRegister(reg, tmp | mask);			// set bit mask
 80a1ae4:	b2d2      	uxtb	r2, r2
 80a1ae6:	f7ff bfaa 	b.w	80a1a3e <_ZN7MFRC52217PCD_WriteRegisterEhh>

080a1aea <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>:
/**
 * Clears the bits given in mask from register reg.
 */
void MFRC522::PCD_ClearRegisterBitMask(	byte reg,	///< The register to update. One of the PCD_Register enums.
										byte mask	///< The bits to clear.
									  ) {
 80a1aea:	b570      	push	{r4, r5, r6, lr}
 80a1aec:	4604      	mov	r4, r0
 80a1aee:	460d      	mov	r5, r1
 80a1af0:	4616      	mov	r6, r2
	byte tmp;
	tmp = PCD_ReadRegister(reg);
 80a1af2:	f7ff ffd4 	bl	80a1a9e <_ZN7MFRC52216PCD_ReadRegisterEh>
	PCD_WriteRegister(reg, tmp & (~mask));		// clear bit mask
 80a1af6:	ea20 0206 	bic.w	r2, r0, r6
 80a1afa:	4629      	mov	r1, r5
 80a1afc:	4620      	mov	r0, r4
} // End PCD_ClearRegisterBitMask()
 80a1afe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	PCD_WriteRegister(reg, tmp & (~mask));		// clear bit mask
 80a1b02:	b2d2      	uxtb	r2, r2
 80a1b04:	f7ff bf9b 	b.w	80a1a3e <_ZN7MFRC52217PCD_WriteRegisterEhh>

080a1b08 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>:
 * @return STATUS_OK on success, STATUS_??? otherwise.
 */
byte MFRC522::PCD_CalculateCRC(	byte *data,		///< In: Pointer to the data to transfer to the FIFO for CRC calculation.
								byte length,	///< In: The number of bytes to transfer.
								byte *result	///< Out: Pointer to result buffer. Result is written to result[0..1], low byte first.
					 ) {
 80a1b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1b0a:	4604      	mov	r4, r0
 80a1b0c:	4615      	mov	r5, r2
 80a1b0e:	460f      	mov	r7, r1
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop any active command.
 80a1b10:	2200      	movs	r2, #0
 80a1b12:	2102      	movs	r1, #2
					 ) {
 80a1b14:	461e      	mov	r6, r3
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop any active command.
 80a1b16:	f7ff ff92 	bl	80a1a3e <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(DivIrqReg, 0x04);					// Clear the CRCIRq interrupt request bit
 80a1b1a:	2204      	movs	r2, #4
 80a1b1c:	210a      	movs	r1, #10
 80a1b1e:	4620      	mov	r0, r4
 80a1b20:	f7ff ff8d 	bl	80a1a3e <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_SetRegisterBitMask(FIFOLevelReg, 0x80);		// FlushBuffer = 1, FIFO initialization
 80a1b24:	2280      	movs	r2, #128	; 0x80
 80a1b26:	2114      	movs	r1, #20
 80a1b28:	4620      	mov	r0, r4
 80a1b2a:	f7ff ffcf 	bl	80a1acc <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>
	PCD_WriteRegister(FIFODataReg, length, data);		// Write data to the FIFO
 80a1b2e:	462a      	mov	r2, r5
 80a1b30:	463b      	mov	r3, r7
 80a1b32:	2112      	movs	r1, #18
 80a1b34:	4620      	mov	r0, r4
 80a1b36:	f7ff ff97 	bl	80a1a68 <_ZN7MFRC52217PCD_WriteRegisterEhhPh>
	PCD_WriteRegister(CommandReg, PCD_CalcCRC);		// Start the calculation
 80a1b3a:	2203      	movs	r2, #3
 80a1b3c:	2102      	movs	r1, #2
 80a1b3e:	4620      	mov	r0, r4
 80a1b40:	f7ff ff7d 	bl	80a1a3e <_ZN7MFRC52217PCD_WriteRegisterEhh>
 80a1b44:	f241 3588 	movw	r5, #5000	; 0x1388
	
	// Wait for the CRC calculation to complete. Each iteration of the while-loop takes 17.73�s.
	word i = 5000;
	byte n;
	while (1) {
		n = PCD_ReadRegister(DivIrqReg);	// DivIrqReg[7..0] bits are: Set2 reserved reserved MfinActIRq   reserved CRCIRq reserved reserved
 80a1b48:	210a      	movs	r1, #10
 80a1b4a:	4620      	mov	r0, r4
 80a1b4c:	f7ff ffa7 	bl	80a1a9e <_ZN7MFRC52216PCD_ReadRegisterEh>
		if (n & 0x04) {						// CRCIRq bit set - calculation done
 80a1b50:	0743      	lsls	r3, r0, #29
 80a1b52:	d405      	bmi.n	80a1b60 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x58>
			break;
		}
		if (--i == 0) {						// The emergency break. We will eventually terminate on this one after 89ms. Communication with the MFRC522 might be down.
 80a1b54:	3d01      	subs	r5, #1
 80a1b56:	b2ad      	uxth	r5, r5
 80a1b58:	2d00      	cmp	r5, #0
 80a1b5a:	d1f5      	bne.n	80a1b48 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x40>
			return STATUS_TIMEOUT;
 80a1b5c:	2004      	movs	r0, #4
 80a1b5e:	e00f      	b.n	80a1b80 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x78>
		}
	}
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop calculating CRC for new content in the FIFO.
 80a1b60:	2200      	movs	r2, #0
 80a1b62:	2102      	movs	r1, #2
 80a1b64:	4620      	mov	r0, r4
 80a1b66:	f7ff ff6a 	bl	80a1a3e <_ZN7MFRC52217PCD_WriteRegisterEhh>
	
	// Transfer the result from the registers to the result buffer
	result[0] = PCD_ReadRegister(CRCResultRegL);
 80a1b6a:	2144      	movs	r1, #68	; 0x44
 80a1b6c:	4620      	mov	r0, r4
 80a1b6e:	f7ff ff96 	bl	80a1a9e <_ZN7MFRC52216PCD_ReadRegisterEh>
	result[1] = PCD_ReadRegister(CRCResultRegH);
 80a1b72:	2142      	movs	r1, #66	; 0x42
	result[0] = PCD_ReadRegister(CRCResultRegL);
 80a1b74:	7030      	strb	r0, [r6, #0]
	result[1] = PCD_ReadRegister(CRCResultRegH);
 80a1b76:	4620      	mov	r0, r4
 80a1b78:	f7ff ff91 	bl	80a1a9e <_ZN7MFRC52216PCD_ReadRegisterEh>
 80a1b7c:	7070      	strb	r0, [r6, #1]
	return STATUS_OK;
 80a1b7e:	2001      	movs	r0, #1
} // End PCD_CalculateCRC()
 80a1b80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1b82 <_ZN7MFRC5229PCD_ResetEv>:
} // End PCD_Init()

/**
 * Performs a soft reset on the MFRC522 chip and waits for it to be ready again.
 */
void MFRC522::PCD_Reset() {
 80a1b82:	b510      	push	{r4, lr}
	PCD_WriteRegister(CommandReg, PCD_SoftReset);	// Issue the SoftReset command.
 80a1b84:	220f      	movs	r2, #15
 80a1b86:	2102      	movs	r1, #2
void MFRC522::PCD_Reset() {
 80a1b88:	4604      	mov	r4, r0
	PCD_WriteRegister(CommandReg, PCD_SoftReset);	// Issue the SoftReset command.
 80a1b8a:	f7ff ff58 	bl	80a1a3e <_ZN7MFRC52217PCD_WriteRegisterEhh>
	// The datasheet does not mention how long the SoftRest command takes to complete.
	// But the MFRC522 might have been in soft power-down mode (triggered by bit 4 of CommandReg) 
	// Section 8.8.2 in the datasheet says the oscillator start-up time is the start up time of the crystal + 37,74�s. Let us be generous: 50ms.
	delay(50);
 80a1b8e:	2032      	movs	r0, #50	; 0x32
 80a1b90:	f002 ff52 	bl	80a4a38 <delay>
	// Wait for the PowerDown bit in CommandReg to be cleared
	while (PCD_ReadRegister(CommandReg) & (1<<4)) {
 80a1b94:	2102      	movs	r1, #2
 80a1b96:	4620      	mov	r0, r4
 80a1b98:	f7ff ff81 	bl	80a1a9e <_ZN7MFRC52216PCD_ReadRegisterEh>
 80a1b9c:	06c3      	lsls	r3, r0, #27
 80a1b9e:	d4f9      	bmi.n	80a1b94 <_ZN7MFRC5229PCD_ResetEv+0x12>
		// PCD still restarting - unlikely after waiting 50ms, but better safe than sorry.
	}
} // End PCD_Reset()
 80a1ba0:	bd10      	pop	{r4, pc}

080a1ba2 <_ZN7MFRC52213PCD_AntennaOnEv>:

/**
 * Turns the antenna on by enabling pins TX1 and TX2.
 * After a reset these pins disabled.
 */
void MFRC522::PCD_AntennaOn() {
 80a1ba2:	b510      	push	{r4, lr}
	byte value = PCD_ReadRegister(TxControlReg);
 80a1ba4:	2128      	movs	r1, #40	; 0x28
void MFRC522::PCD_AntennaOn() {
 80a1ba6:	4604      	mov	r4, r0
	byte value = PCD_ReadRegister(TxControlReg);
 80a1ba8:	f7ff ff79 	bl	80a1a9e <_ZN7MFRC52216PCD_ReadRegisterEh>
	if ((value & 0x03) != 0x03) {
 80a1bac:	f000 0303 	and.w	r3, r0, #3
 80a1bb0:	2b03      	cmp	r3, #3
 80a1bb2:	d008      	beq.n	80a1bc6 <_ZN7MFRC52213PCD_AntennaOnEv+0x24>
		PCD_WriteRegister(TxControlReg, value | 0x03);
 80a1bb4:	f040 0203 	orr.w	r2, r0, #3
 80a1bb8:	2128      	movs	r1, #40	; 0x28
 80a1bba:	4620      	mov	r0, r4
	}
} // End PCD_AntennaOn()
 80a1bbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		PCD_WriteRegister(TxControlReg, value | 0x03);
 80a1bc0:	b2d2      	uxtb	r2, r2
 80a1bc2:	f7ff bf3c 	b.w	80a1a3e <_ZN7MFRC52217PCD_WriteRegisterEhh>
} // End PCD_AntennaOn()
 80a1bc6:	bd10      	pop	{r4, pc}

080a1bc8 <_ZN7MFRC5228PCD_InitEv>:
void MFRC522::PCD_Init() {
 80a1bc8:	b510      	push	{r4, lr}
 80a1bca:	4604      	mov	r4, r0
	if (digitalRead(_resetPowerDownPin) == LOW) { //The MFRC522 chip is in power down mode.
 80a1bcc:	7b40      	ldrb	r0, [r0, #13]
 80a1bce:	f003 fc13 	bl	80a53f8 <digitalRead>
 80a1bd2:	bb48      	cbnz	r0, 80a1c28 <_ZN7MFRC5228PCD_InitEv+0x60>
		digitalWrite(_resetPowerDownPin, HIGH);	// Exit power down mode. This triggers a hard reset.
 80a1bd4:	7b60      	ldrb	r0, [r4, #13]
 80a1bd6:	2101      	movs	r1, #1
 80a1bd8:	f003 fbf5 	bl	80a53c6 <digitalWrite>
		delay(50);
 80a1bdc:	2032      	movs	r0, #50	; 0x32
 80a1bde:	f002 ff2b 	bl	80a4a38 <delay>
    PCD_WriteRegister(TModeReg, 0x80);			// TAuto=1; timer starts automatically at the end of the transmission in all communication modes at all speeds
 80a1be2:	4620      	mov	r0, r4
 80a1be4:	2280      	movs	r2, #128	; 0x80
 80a1be6:	2154      	movs	r1, #84	; 0x54
 80a1be8:	f7ff ff29 	bl	80a1a3e <_ZN7MFRC52217PCD_WriteRegisterEhh>
    PCD_WriteRegister(TPrescalerReg, 0xA9);	// TPreScaler = TModeReg[3..0]:TPrescalerReg, ie 0x0A9 = 169 => f_timer=40kHz, ie a timer period of 25�s.
 80a1bec:	4620      	mov	r0, r4
 80a1bee:	22a9      	movs	r2, #169	; 0xa9
 80a1bf0:	2156      	movs	r1, #86	; 0x56
 80a1bf2:	f7ff ff24 	bl	80a1a3e <_ZN7MFRC52217PCD_WriteRegisterEhh>
    PCD_WriteRegister(TReloadRegH, 0x03);		// Reload timer with 0x3E8 = 1000, ie 25ms before timeout.
 80a1bf6:	4620      	mov	r0, r4
 80a1bf8:	2203      	movs	r2, #3
 80a1bfa:	2158      	movs	r1, #88	; 0x58
 80a1bfc:	f7ff ff1f 	bl	80a1a3e <_ZN7MFRC52217PCD_WriteRegisterEhh>
    PCD_WriteRegister(TReloadRegL, 0xE8);
 80a1c00:	4620      	mov	r0, r4
 80a1c02:	22e8      	movs	r2, #232	; 0xe8
 80a1c04:	215a      	movs	r1, #90	; 0x5a
 80a1c06:	f7ff ff1a 	bl	80a1a3e <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(TxASKReg, 0x40);		// Default 0x00. Force a 100 % ASK modulation independent of the ModGsPReg register setting
 80a1c0a:	4620      	mov	r0, r4
 80a1c0c:	2240      	movs	r2, #64	; 0x40
 80a1c0e:	212a      	movs	r1, #42	; 0x2a
 80a1c10:	f7ff ff15 	bl	80a1a3e <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(ModeReg, 0x3D);		// Default 0x3F. Set the preset value for the CRC coprocessor for the CalcCRC command to 0x6363 (ISO 14443-3 part 6.2.4)
 80a1c14:	4620      	mov	r0, r4
 80a1c16:	223d      	movs	r2, #61	; 0x3d
 80a1c18:	2122      	movs	r1, #34	; 0x22
 80a1c1a:	f7ff ff10 	bl	80a1a3e <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_AntennaOn();						// Enable the antenna driver pins TX1 and TX2 (they were disabled by the reset)
 80a1c1e:	4620      	mov	r0, r4
} // End PCD_Init()
 80a1c20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PCD_AntennaOn();						// Enable the antenna driver pins TX1 and TX2 (they were disabled by the reset)
 80a1c24:	f7ff bfbd 	b.w	80a1ba2 <_ZN7MFRC52213PCD_AntennaOnEv>
		PCD_Reset();
 80a1c28:	4620      	mov	r0, r4
 80a1c2a:	f7ff ffaa 	bl	80a1b82 <_ZN7MFRC5229PCD_ResetEv>
 80a1c2e:	e7d8      	b.n	80a1be2 <_ZN7MFRC5228PCD_InitEv+0x1a>

080a1c30 <_ZN7MFRC52218PCD_GetAntennaGainEv>:
 * NOTE: Return value scrubbed with (0x07<<4)=01110000b as RCFfgReg may use reserved bits.
 * 
 * @return Value of the RxGain, scrubbed to the 3 bits used.
 */
byte MFRC522::PCD_GetAntennaGain() {
	return PCD_ReadRegister(RFCfgReg) & (0x07<<4);
 80a1c30:	214c      	movs	r1, #76	; 0x4c
byte MFRC522::PCD_GetAntennaGain() {
 80a1c32:	b508      	push	{r3, lr}
	return PCD_ReadRegister(RFCfgReg) & (0x07<<4);
 80a1c34:	f7ff ff33 	bl	80a1a9e <_ZN7MFRC52216PCD_ReadRegisterEh>
} // End PCD_GetAntennaGain()
 80a1c38:	f000 0070 	and.w	r0, r0, #112	; 0x70
 80a1c3c:	bd08      	pop	{r3, pc}

080a1c3e <_ZN7MFRC52218PCD_SetAntennaGainEh>:
/**
 * Set the MFRC522 Receiver Gain (RxGain) to value specified by given mask.
 * See 9.3.3.6 / table 98 in http://www.nxp.com/documents/data_sheet/MFRC522.pdf
 * NOTE: Given mask is scrubbed with (0x07<<4)=01110000b as RCFfgReg may use reserved bits.
 */
void MFRC522::PCD_SetAntennaGain(byte mask) {
 80a1c3e:	b538      	push	{r3, r4, r5, lr}
 80a1c40:	460d      	mov	r5, r1
 80a1c42:	4604      	mov	r4, r0
	if (PCD_GetAntennaGain() != mask) {						// only bother if there is a change
 80a1c44:	f7ff fff4 	bl	80a1c30 <_ZN7MFRC52218PCD_GetAntennaGainEv>
 80a1c48:	42a8      	cmp	r0, r5
 80a1c4a:	d00c      	beq.n	80a1c66 <_ZN7MFRC52218PCD_SetAntennaGainEh+0x28>
		PCD_ClearRegisterBitMask(RFCfgReg, (0x07<<4));		// clear needed to allow 000 pattern
 80a1c4c:	4620      	mov	r0, r4
 80a1c4e:	2270      	movs	r2, #112	; 0x70
 80a1c50:	214c      	movs	r1, #76	; 0x4c
 80a1c52:	f7ff ff4a 	bl	80a1aea <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>
		PCD_SetRegisterBitMask(RFCfgReg, mask & (0x07<<4));	// only set RxGain[2:0] bits
 80a1c56:	4620      	mov	r0, r4
 80a1c58:	f005 0270 	and.w	r2, r5, #112	; 0x70
 80a1c5c:	214c      	movs	r1, #76	; 0x4c
	}
} // End PCD_SetAntennaGain()
 80a1c5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		PCD_SetRegisterBitMask(RFCfgReg, mask & (0x07<<4));	// only set RxGain[2:0] bits
 80a1c62:	f7ff bf33 	b.w	80a1acc <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>
} // End PCD_SetAntennaGain()
 80a1c66:	bd38      	pop	{r3, r4, r5, pc}

080a1c68 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh>:
								) {
 80a1c68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a1c6c:	4607      	mov	r7, r0
 80a1c6e:	461e      	mov	r6, r3
	if (count == 0) {
 80a1c70:	4615      	mov	r5, r2
								) {
 80a1c72:	f89d 8030 	ldrb.w	r8, [sp, #48]	; 0x30
	if (count == 0) {
 80a1c76:	2a00      	cmp	r2, #0
 80a1c78:	d042      	beq.n	80a1d00 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x98>
	byte address = 0x80 | (reg & 0x7E);		// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
 80a1c7a:	f001 017e 	and.w	r1, r1, #126	; 0x7e
	digitalWrite(_chipSelectPin, LOW);		// Select slave
 80a1c7e:	7b00      	ldrb	r0, [r0, #12]
	byte address = 0x80 | (reg & 0x7E);		// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
 80a1c80:	f041 0980 	orr.w	r9, r1, #128	; 0x80
	digitalWrite(_chipSelectPin, LOW);		// Select slave
 80a1c84:	2100      	movs	r1, #0
 80a1c86:	f003 fb9e 	bl	80a53c6 <digitalWrite>
	SPI.transfer(address);					// Tell MFRC522 which address we want to read
 80a1c8a:	4648      	mov	r0, r9
 80a1c8c:	f7ff fece 	bl	80a1a2c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
 80a1c90:	f04f 0b00 	mov.w	fp, #0
				mask |= (1 << i);
 80a1c94:	f04f 0a01 	mov.w	sl, #1
	count--;								// One read is performed outside of the loop
 80a1c98:	3d01      	subs	r5, #1
 80a1c9a:	b2ed      	uxtb	r5, r5
	while (index < count) {
 80a1c9c:	fa5f f48b 	uxtb.w	r4, fp
 80a1ca0:	42a5      	cmp	r5, r4
 80a1ca2:	d922      	bls.n	80a1cea <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x82>
		if (index == 0 && rxAlign) { // Only update bit positions rxAlign..7 in values[0]
 80a1ca4:	b9dc      	cbnz	r4, 80a1cde <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x76>
 80a1ca6:	f1b8 0f00 	cmp.w	r8, #0
 80a1caa:	d018      	beq.n	80a1cde <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x76>
 80a1cac:	4642      	mov	r2, r8
			for (byte i = rxAlign; i <= 7; i++) {
 80a1cae:	b2d3      	uxtb	r3, r2
 80a1cb0:	2b07      	cmp	r3, #7
 80a1cb2:	b261      	sxtb	r1, r4
 80a1cb4:	d805      	bhi.n	80a1cc2 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x5a>
				mask |= (1 << i);
 80a1cb6:	fa0a f402 	lsl.w	r4, sl, r2
 80a1cba:	430c      	orrs	r4, r1
 80a1cbc:	b2e4      	uxtb	r4, r4
			for (byte i = rxAlign; i <= 7; i++) {
 80a1cbe:	3201      	adds	r2, #1
 80a1cc0:	e7f5      	b.n	80a1cae <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x46>
			byte value = SPI.transfer(address);	
 80a1cc2:	4648      	mov	r0, r9
 80a1cc4:	9101      	str	r1, [sp, #4]
 80a1cc6:	f7ff feb1 	bl	80a1a2c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
			values[0] = (values[index] & ~mask) | (value & mask);
 80a1cca:	7833      	ldrb	r3, [r6, #0]
 80a1ccc:	9901      	ldr	r1, [sp, #4]
 80a1cce:	4004      	ands	r4, r0
 80a1cd0:	ea23 0301 	bic.w	r3, r3, r1
 80a1cd4:	431c      	orrs	r4, r3
 80a1cd6:	7034      	strb	r4, [r6, #0]
		index++;
 80a1cd8:	f10b 0b01 	add.w	fp, fp, #1
	while (index < count) {
 80a1cdc:	e7de      	b.n	80a1c9c <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x34>
			values[index] = SPI.transfer(address);	// Read value and tell that we want to read the same address again.
 80a1cde:	4648      	mov	r0, r9
 80a1ce0:	f7ff fea4 	bl	80a1a2c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
 80a1ce4:	f806 000b 	strb.w	r0, [r6, fp]
 80a1ce8:	e7f6      	b.n	80a1cd8 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x70>
	values[index] = SPI.transfer(0);			// Read the final byte. Send 0 to stop reading.
 80a1cea:	2000      	movs	r0, #0
 80a1cec:	f7ff fe9e 	bl	80a1a2c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
	digitalWrite(_chipSelectPin, HIGH);			// Release slave again
 80a1cf0:	2101      	movs	r1, #1
	values[index] = SPI.transfer(0);			// Read the final byte. Send 0 to stop reading.
 80a1cf2:	5570      	strb	r0, [r6, r5]
	digitalWrite(_chipSelectPin, HIGH);			// Release slave again
 80a1cf4:	7b38      	ldrb	r0, [r7, #12]
} // End PCD_ReadRegister()
 80a1cf6:	b003      	add	sp, #12
 80a1cf8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	digitalWrite(_chipSelectPin, HIGH);			// Release slave again
 80a1cfc:	f003 bb63 	b.w	80a53c6 <digitalWrite>
} // End PCD_ReadRegister()
 80a1d00:	b003      	add	sp, #12
 80a1d02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a1d06 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>:
										byte *backData,		///< NULL or pointer to buffer if data should be read back after executing the command.
										byte *backLen,		///< In: Max number of bytes to write to *backData. Out: The number of bytes returned.
										byte *validBits,	///< In/Out: The number of valid bits in the last byte. 0 for 8 valid bits.
										byte rxAlign,		///< In: Defines the bit position in backData[0] for the first bit received. Default 0.
										bool checkCRC		///< In: True => The last two bytes of the response is assumed to be a CRC_A that must be validated.
									 ) {
 80a1d06:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a1d0a:	b089      	sub	sp, #36	; 0x24
 80a1d0c:	9203      	str	r2, [sp, #12]
 80a1d0e:	f8dd 9054 	ldr.w	r9, [sp, #84]	; 0x54
 80a1d12:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 80a1d16:	4604      	mov	r4, r0
 80a1d18:	e9dd 5613 	ldrd	r5, r6, [sp, #76]	; 0x4c
 80a1d1c:	468a      	mov	sl, r1
 80a1d1e:	2700      	movs	r7, #0
 80a1d20:	f89d b058 	ldrb.w	fp, [sp, #88]	; 0x58
 80a1d24:	9204      	str	r2, [sp, #16]
	byte n, _validBits;
	unsigned int i;

	// Prepare values for BitFramingReg
	byte txLastBits = validBits ? *validBits : 0;
 80a1d26:	f1b9 0f00 	cmp.w	r9, #0
 80a1d2a:	d03e      	beq.n	80a1daa <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xa4>
 80a1d2c:	f899 8000 	ldrb.w	r8, [r9]
	byte bitFraming	= (rxAlign << 4) + txLastBits;		// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
	
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop any active command.
 80a1d30:	2200      	movs	r2, #0
 80a1d32:	2102      	movs	r1, #2
 80a1d34:	4620      	mov	r0, r4
 80a1d36:	9305      	str	r3, [sp, #20]
 80a1d38:	f7ff fe81 	bl	80a1a3e <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(ComIrqReg, 0x7F);					// Clear all seven interrupt request bits
 80a1d3c:	227f      	movs	r2, #127	; 0x7f
 80a1d3e:	2108      	movs	r1, #8
 80a1d40:	4620      	mov	r0, r4
 80a1d42:	f7ff fe7c 	bl	80a1a3e <_ZN7MFRC52217PCD_WriteRegisterEhh>
	byte bitFraming	= (rxAlign << 4) + txLastBits;		// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
 80a1d46:	eb08 180b 	add.w	r8, r8, fp, lsl #4
	PCD_SetRegisterBitMask(FIFOLevelReg, 0x80);		// FlushBuffer = 1, FIFO initialization
 80a1d4a:	2280      	movs	r2, #128	; 0x80
 80a1d4c:	2114      	movs	r1, #20
 80a1d4e:	4620      	mov	r0, r4
 80a1d50:	f7ff febc 	bl	80a1acc <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>
	byte bitFraming	= (rxAlign << 4) + txLastBits;		// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
 80a1d54:	fa5f f888 	uxtb.w	r8, r8
	PCD_WriteRegister(FIFODataReg, sendLen, sendData);	// Write sendData to the FIFO
 80a1d58:	9b05      	ldr	r3, [sp, #20]
 80a1d5a:	2112      	movs	r1, #18
 80a1d5c:	4620      	mov	r0, r4
 80a1d5e:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 80a1d62:	f7ff fe81 	bl	80a1a68 <_ZN7MFRC52217PCD_WriteRegisterEhhPh>
	PCD_WriteRegister(BitFramingReg, bitFraming);		// Bit adjustments
 80a1d66:	4642      	mov	r2, r8
 80a1d68:	211a      	movs	r1, #26
 80a1d6a:	4620      	mov	r0, r4
 80a1d6c:	f7ff fe67 	bl	80a1a3e <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(CommandReg, command);			// Execute the command
 80a1d70:	4652      	mov	r2, sl
 80a1d72:	2102      	movs	r1, #2
 80a1d74:	4620      	mov	r0, r4
 80a1d76:	f7ff fe62 	bl	80a1a3e <_ZN7MFRC52217PCD_WriteRegisterEhh>
	if (command == PCD_Transceive) 	{
 80a1d7a:	f1ba 0f0c 	cmp.w	sl, #12
 80a1d7e:	d104      	bne.n	80a1d8a <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x84>
		PCD_SetRegisterBitMask(BitFramingReg, 0x80);	// StartSend=1, transmission of data starts
 80a1d80:	2280      	movs	r2, #128	; 0x80
 80a1d82:	211a      	movs	r1, #26
 80a1d84:	4620      	mov	r0, r4
 80a1d86:	f7ff fea1 	bl	80a1acc <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>
	byte txLastBits = validBits ? *validBits : 0;
 80a1d8a:	f44f 68fa 	mov.w	r8, #2000	; 0x7d0
	// Wait for the command to complete.
	// In PCD_Init() we set the TAuto flag in TModeReg. This means the timer automatically starts when the PCD stops transmitting.
	// Each iteration of the do-while-loop takes 17.86�s.
	i = 2000;
	while (1) {
		n = PCD_ReadRegister(ComIrqReg);	// ComIrqReg[7..0] bits are: Set1 TxIRq RxIRq IdleIRq   HiAlertIRq LoAlertIRq ErrIRq TimerIRq
 80a1d8e:	2108      	movs	r1, #8
 80a1d90:	4620      	mov	r0, r4
 80a1d92:	f7ff fe84 	bl	80a1a9e <_ZN7MFRC52216PCD_ReadRegisterEh>
		if (n & waitIRq) {					// One of the interrupts that signal success has been set.
 80a1d96:	9b03      	ldr	r3, [sp, #12]
 80a1d98:	4218      	tst	r0, r3
 80a1d9a:	d108      	bne.n	80a1dae <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xa8>
			break;
		}
		if (n & 0x01) {						// Timer interrupt - nothing received in 25ms
 80a1d9c:	07c3      	lsls	r3, r0, #31
 80a1d9e:	d402      	bmi.n	80a1da6 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xa0>
			return STATUS_TIMEOUT;
		}
		if (--i == 0) {						// The emergency break. If all other condions fail we will eventually terminate on this one after 35.7ms. Communication with the MFRC522 might be down.
 80a1da0:	f1b8 0801 	subs.w	r8, r8, #1
 80a1da4:	d1f3      	bne.n	80a1d8e <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x88>
			return STATUS_TIMEOUT;
 80a1da6:	2004      	movs	r0, #4
 80a1da8:	e04d      	b.n	80a1e46 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
	byte txLastBits = validBits ? *validBits : 0;
 80a1daa:	46c8      	mov	r8, r9
 80a1dac:	e7c0      	b.n	80a1d30 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x2a>
			return STATUS_TIMEOUT;
		}
	}
	
	// Stop now if any errors except collisions were detected.
	byte errorRegValue = PCD_ReadRegister(ErrorReg); // ErrorReg[7..0] bits are: WrErr TempErr reserved BufferOvfl   CollErr CRCErr ParityErr ProtocolErr
 80a1dae:	210c      	movs	r1, #12
 80a1db0:	4620      	mov	r0, r4
 80a1db2:	f7ff fe74 	bl	80a1a9e <_ZN7MFRC52216PCD_ReadRegisterEh>
	if (errorRegValue & 0x13) {	 // BufferOvfl ParityErr ProtocolErr
 80a1db6:	f010 0f13 	tst.w	r0, #19
	byte errorRegValue = PCD_ReadRegister(ErrorReg); // ErrorReg[7..0] bits are: WrErr TempErr reserved BufferOvfl   CollErr CRCErr ParityErr ProtocolErr
 80a1dba:	4680      	mov	r8, r0
	if (errorRegValue & 0x13) {	 // BufferOvfl ParityErr ProtocolErr
 80a1dbc:	d146      	bne.n	80a1e4c <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x146>
		return STATUS_ERROR;
	}	

	// If the caller wants data back, get it from the MFRC522.
	if (backData && backLen) {
 80a1dbe:	b1dd      	cbz	r5, 80a1df8 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xf2>
 80a1dc0:	b1d6      	cbz	r6, 80a1df8 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xf2>
		n = PCD_ReadRegister(FIFOLevelReg);						// Number of bytes in the FIFO
 80a1dc2:	2114      	movs	r1, #20
 80a1dc4:	4620      	mov	r0, r4
 80a1dc6:	f7ff fe6a 	bl	80a1a9e <_ZN7MFRC52216PCD_ReadRegisterEh>
		if (n > *backLen) {
 80a1dca:	7833      	ldrb	r3, [r6, #0]
		n = PCD_ReadRegister(FIFOLevelReg);						// Number of bytes in the FIFO
 80a1dcc:	4602      	mov	r2, r0
		if (n > *backLen) {
 80a1dce:	4283      	cmp	r3, r0
 80a1dd0:	d33e      	bcc.n	80a1e50 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x14a>
			return STATUS_NO_ROOM;
		}
		*backLen = n;												// Number of bytes returned
 80a1dd2:	7030      	strb	r0, [r6, #0]
		PCD_ReadRegister(FIFODataReg, n, backData, rxAlign);		// Get received data from FIFO
 80a1dd4:	462b      	mov	r3, r5
 80a1dd6:	2112      	movs	r1, #18
 80a1dd8:	4620      	mov	r0, r4
 80a1dda:	f8cd b000 	str.w	fp, [sp]
 80a1dde:	f7ff ff43 	bl	80a1c68 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh>
		_validBits = PCD_ReadRegister(ControlReg) & 0x07;	// RxLastBits[2:0] indicates the number of valid bits in the last received byte. If this value is 000b, the whole byte is valid.
 80a1de2:	2118      	movs	r1, #24
 80a1de4:	4620      	mov	r0, r4
 80a1de6:	f7ff fe5a 	bl	80a1a9e <_ZN7MFRC52216PCD_ReadRegisterEh>
 80a1dea:	f000 0707 	and.w	r7, r0, #7
		if (validBits) {
 80a1dee:	f1b9 0f00 	cmp.w	r9, #0
 80a1df2:	d001      	beq.n	80a1df8 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xf2>
			*validBits = _validBits;
 80a1df4:	f889 7000 	strb.w	r7, [r9]
		}
	}
	
	// Tell about collisions
	if (errorRegValue & 0x08) { // CollErr
 80a1df8:	f018 0f08 	tst.w	r8, #8
 80a1dfc:	d12a      	bne.n	80a1e54 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x14e>
		return STATUS_COLLISION;
	}
	
	// Perform CRC_A validation if requested.
	if (backData && backLen && checkCRC) {
 80a1dfe:	b35d      	cbz	r5, 80a1e58 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x152>
 80a1e00:	b356      	cbz	r6, 80a1e58 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x152>
 80a1e02:	9b04      	ldr	r3, [sp, #16]
 80a1e04:	b343      	cbz	r3, 80a1e58 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x152>
		// In this case a MIFARE Classic NAK is not OK.
		if (*backLen == 1 && _validBits == 4) {
 80a1e06:	7832      	ldrb	r2, [r6, #0]
 80a1e08:	2a01      	cmp	r2, #1
 80a1e0a:	d103      	bne.n	80a1e14 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x10e>
 80a1e0c:	2f04      	cmp	r7, #4
 80a1e0e:	d125      	bne.n	80a1e5c <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x156>
			return STATUS_MIFARE_NACK;
 80a1e10:	2009      	movs	r0, #9
 80a1e12:	e018      	b.n	80a1e46 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
		}
		// We need at least the CRC_A value and all 8 bits of the last byte must be received.
		if (*backLen < 2 || _validBits != 0) {
 80a1e14:	d922      	bls.n	80a1e5c <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x156>
 80a1e16:	bb0f      	cbnz	r7, 80a1e5c <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x156>
			return STATUS_CRC_WRONG;
		}
		// Verify CRC_A - do our own calculation and store the control in controlBuffer.
		byte controlBuffer[2]; 
		n = PCD_CalculateCRC(&backData[0], *backLen - 2, &controlBuffer[0]);
 80a1e18:	3a02      	subs	r2, #2
 80a1e1a:	4629      	mov	r1, r5
 80a1e1c:	4620      	mov	r0, r4
 80a1e1e:	ab07      	add	r3, sp, #28
 80a1e20:	b2d2      	uxtb	r2, r2
 80a1e22:	f7ff fe71 	bl	80a1b08 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
		if (n != STATUS_OK) {
 80a1e26:	2801      	cmp	r0, #1
 80a1e28:	d10d      	bne.n	80a1e46 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
			return n;
		}
		if ((backData[*backLen - 2] != controlBuffer[0]) || (backData[*backLen - 1] != controlBuffer[1])) {
 80a1e2a:	7833      	ldrb	r3, [r6, #0]
 80a1e2c:	441d      	add	r5, r3
 80a1e2e:	f815 2c02 	ldrb.w	r2, [r5, #-2]
 80a1e32:	f89d 301c 	ldrb.w	r3, [sp, #28]
 80a1e36:	429a      	cmp	r2, r3
 80a1e38:	d110      	bne.n	80a1e5c <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x156>
 80a1e3a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80a1e3e:	f89d 301d 	ldrb.w	r3, [sp, #29]
 80a1e42:	429a      	cmp	r2, r3
 80a1e44:	d10a      	bne.n	80a1e5c <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x156>
			return STATUS_CRC_WRONG;
		}
	}
	
	return STATUS_OK;
} // End PCD_CommunicateWithPICC()
 80a1e46:	b009      	add	sp, #36	; 0x24
 80a1e48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return STATUS_ERROR;
 80a1e4c:	2002      	movs	r0, #2
 80a1e4e:	e7fa      	b.n	80a1e46 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
			return STATUS_NO_ROOM;
 80a1e50:	2005      	movs	r0, #5
 80a1e52:	e7f8      	b.n	80a1e46 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
		return STATUS_COLLISION;
 80a1e54:	2003      	movs	r0, #3
 80a1e56:	e7f6      	b.n	80a1e46 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
	return STATUS_OK;
 80a1e58:	2001      	movs	r0, #1
 80a1e5a:	e7f4      	b.n	80a1e46 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
			return STATUS_CRC_WRONG;
 80a1e5c:	2008      	movs	r0, #8
 80a1e5e:	e7f2      	b.n	80a1e46 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>

080a1e60 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>:
								 ) {
 80a1e60:	b510      	push	{r4, lr}
 80a1e62:	b086      	sub	sp, #24
	return PCD_CommunicateWithPICC(PCD_Transceive, waitIRq, sendData, sendLen, backData, backLen, validBits, rxAlign, checkCRC);
 80a1e64:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
 80a1e68:	9200      	str	r2, [sp, #0]
 80a1e6a:	9405      	str	r4, [sp, #20]
 80a1e6c:	f89d 4028 	ldrb.w	r4, [sp, #40]	; 0x28
 80a1e70:	2230      	movs	r2, #48	; 0x30
 80a1e72:	9404      	str	r4, [sp, #16]
 80a1e74:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80a1e76:	9403      	str	r4, [sp, #12]
 80a1e78:	9c08      	ldr	r4, [sp, #32]
 80a1e7a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80a1e7e:	460b      	mov	r3, r1
 80a1e80:	210c      	movs	r1, #12
 80a1e82:	f7ff ff40 	bl	80a1d06 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>
} // End PCD_TransceiveData()
 80a1e86:	b006      	add	sp, #24
 80a1e88:	bd10      	pop	{r4, pc}

080a1e8a <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_>:
 * @return STATUS_OK on success, STATUS_??? otherwise.
 */ 
byte MFRC522::PICC_REQA_or_WUPA(	byte command, 		///< The command to send - PICC_CMD_REQA or PICC_CMD_WUPA
									byte *bufferATQA,	///< The buffer to store the ATQA (Answer to request) in
									byte *bufferSize	///< Buffer size, at least two bytes. Also number of bytes returned if STATUS_OK.
							   ) {
 80a1e8a:	b570      	push	{r4, r5, r6, lr}
 80a1e8c:	b088      	sub	sp, #32
 80a1e8e:	4606      	mov	r6, r0
 80a1e90:	461c      	mov	r4, r3
	byte validBits;
	byte status;
	
	if (bufferATQA == NULL || *bufferSize < 2) {	// The ATQA response is 2 bytes long.
 80a1e92:	4615      	mov	r5, r2
							   ) {
 80a1e94:	f88d 1017 	strb.w	r1, [sp, #23]
	if (bufferATQA == NULL || *bufferSize < 2) {	// The ATQA response is 2 bytes long.
 80a1e98:	b31a      	cbz	r2, 80a1ee2 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x58>
 80a1e9a:	781b      	ldrb	r3, [r3, #0]
 80a1e9c:	2b01      	cmp	r3, #1
 80a1e9e:	d920      	bls.n	80a1ee2 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x58>
		return STATUS_NO_ROOM;
	}
	PCD_ClearRegisterBitMask(CollReg, 0x80);			// ValuesAfterColl=1 => Bits received after collision are cleared.
 80a1ea0:	2280      	movs	r2, #128	; 0x80
 80a1ea2:	211c      	movs	r1, #28
 80a1ea4:	f7ff fe21 	bl	80a1aea <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>
	validBits = 7;										// For REQA and WUPA we need the short frame format - transmit only 7 bits of the last (and only) byte. TxLastBits = BitFramingReg[2..0]
 80a1ea8:	2307      	movs	r3, #7
 80a1eaa:	f88d 301f 	strb.w	r3, [sp, #31]
	status = PCD_TransceiveData(&command, 1, bufferATQA, bufferSize, &validBits);
 80a1eae:	2300      	movs	r3, #0
 80a1eb0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80a1eb4:	f10d 031f 	add.w	r3, sp, #31
 80a1eb8:	e9cd 4300 	strd	r4, r3, [sp]
 80a1ebc:	2201      	movs	r2, #1
 80a1ebe:	462b      	mov	r3, r5
 80a1ec0:	4630      	mov	r0, r6
 80a1ec2:	f10d 0117 	add.w	r1, sp, #23
 80a1ec6:	f7ff ffcb 	bl	80a1e60 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
	if (status != STATUS_OK) {
 80a1eca:	2801      	cmp	r0, #1
 80a1ecc:	d107      	bne.n	80a1ede <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x54>
		return status;
	}
	if (*bufferSize != 2 || validBits != 0) {		// ATQA must be exactly 16 bits.
 80a1ece:	7823      	ldrb	r3, [r4, #0]
 80a1ed0:	2b02      	cmp	r3, #2
 80a1ed2:	d108      	bne.n	80a1ee6 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x5c>
 80a1ed4:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80a1ed8:	2b00      	cmp	r3, #0
		return STATUS_ERROR;
 80a1eda:	bf18      	it	ne
 80a1edc:	2002      	movne	r0, #2
	}
	return STATUS_OK;
} // End PICC_REQA_or_WUPA()
 80a1ede:	b008      	add	sp, #32
 80a1ee0:	bd70      	pop	{r4, r5, r6, pc}
		return STATUS_NO_ROOM;
 80a1ee2:	2005      	movs	r0, #5
 80a1ee4:	e7fb      	b.n	80a1ede <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x54>
		return STATUS_ERROR;
 80a1ee6:	2002      	movs	r0, #2
 80a1ee8:	e7f9      	b.n	80a1ede <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x54>

080a1eea <_ZN7MFRC52213PICC_RequestAEPhS0_>:
							) {
 80a1eea:	4613      	mov	r3, r2
	return PICC_REQA_or_WUPA(PICC_CMD_REQA, bufferATQA, bufferSize);
 80a1eec:	460a      	mov	r2, r1
 80a1eee:	2126      	movs	r1, #38	; 0x26
 80a1ef0:	f7ff bfcb 	b.w	80a1e8a <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_>

080a1ef4 <_ZN7MFRC52221PICC_IsNewCardPresentEv>:
 * 
 * @return bool
 */
bool MFRC522::PICC_IsNewCardPresent() {
	byte bufferATQA[2];
	byte bufferSize = sizeof(bufferATQA);
 80a1ef4:	2302      	movs	r3, #2
bool MFRC522::PICC_IsNewCardPresent() {
 80a1ef6:	b507      	push	{r0, r1, r2, lr}
	byte result = PICC_RequestA(bufferATQA, &bufferSize);
 80a1ef8:	f10d 0203 	add.w	r2, sp, #3
 80a1efc:	a901      	add	r1, sp, #4
	byte bufferSize = sizeof(bufferATQA);
 80a1efe:	f88d 3003 	strb.w	r3, [sp, #3]
	byte result = PICC_RequestA(bufferATQA, &bufferSize);
 80a1f02:	f7ff fff2 	bl	80a1eea <_ZN7MFRC52213PICC_RequestAEPhS0_>
	return (result == STATUS_OK || result == STATUS_COLLISION);
 80a1f06:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
} // End PICC_IsNewCardPresent()
 80a1f0a:	1e43      	subs	r3, r0, #1
 80a1f0c:	4258      	negs	r0, r3
 80a1f0e:	4158      	adcs	r0, r3
 80a1f10:	b003      	add	sp, #12
 80a1f12:	f85d fb04 	ldr.w	pc, [sp], #4

080a1f16 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh>:
						 ) {
 80a1f16:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (validBits > 80) {
 80a1f1a:	2a50      	cmp	r2, #80	; 0x50
						 ) {
 80a1f1c:	4682      	mov	sl, r0
 80a1f1e:	460f      	mov	r7, r1
 80a1f20:	4690      	mov	r8, r2
 80a1f22:	b08b      	sub	sp, #44	; 0x2c
	if (validBits > 80) {
 80a1f24:	f200 813b 	bhi.w	80a219e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x288>
	PCD_ClearRegisterBitMask(CollReg, 0x80);			// ValuesAfterColl=1 => Bits received after collision are cleared.
 80a1f28:	2280      	movs	r2, #128	; 0x80
 80a1f2a:	211c      	movs	r1, #28
 80a1f2c:	f7ff fddd 	bl	80a1aea <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>
				buffer[0] = PICC_CMD_SEL_CL1;
 80a1f30:	2393      	movs	r3, #147	; 0x93
 80a1f32:	f88d 301c 	strb.w	r3, [sp, #28]
				useCascadeTag = validBits && uid->size > 4;	// When we know that the UID has more than 4 bytes
 80a1f36:	f1b8 0f00 	cmp.w	r8, #0
 80a1f3a:	f000 80b9 	beq.w	80a20b0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x19a>
 80a1f3e:	783c      	ldrb	r4, [r7, #0]
 80a1f40:	2c04      	cmp	r4, #4
 80a1f42:	bf94      	ite	ls
 80a1f44:	2300      	movls	r3, #0
 80a1f46:	2301      	movhi	r3, #1
				useCascadeTag = validBits && uid->size > 7;	// When we know that the UID has more than 7 bytes
 80a1f48:	2501      	movs	r5, #1
 80a1f4a:	2600      	movs	r6, #0
 80a1f4c:	e00b      	b.n	80a1f66 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x50>
				buffer[0] = PICC_CMD_SEL_CL2;
 80a1f4e:	2395      	movs	r3, #149	; 0x95
 80a1f50:	f88d 301c 	strb.w	r3, [sp, #28]
				useCascadeTag = validBits && uid->size > 7;	// When we know that the UID has more than 7 bytes
 80a1f54:	f1b8 0f00 	cmp.w	r8, #0
 80a1f58:	f000 80ac 	beq.w	80a20b4 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x19e>
 80a1f5c:	783c      	ldrb	r4, [r7, #0]
 80a1f5e:	2c07      	cmp	r4, #7
 80a1f60:	bf94      	ite	ls
 80a1f62:	2300      	movls	r3, #0
 80a1f64:	2301      	movhi	r3, #1
		currentLevelKnownBits = validBits - (8 * uidIndex);
 80a1f66:	eba8 04c6 	sub.w	r4, r8, r6, lsl #3
 80a1f6a:	b264      	sxtb	r4, r4
		if (currentLevelKnownBits < 0) {
 80a1f6c:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
		if (useCascadeTag) {
 80a1f70:	2b00      	cmp	r3, #0
 80a1f72:	f000 80a1 	beq.w	80a20b8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1a2>
			buffer[index++] = PICC_CMD_CT;
 80a1f76:	2288      	movs	r2, #136	; 0x88
 80a1f78:	2103      	movs	r1, #3
 80a1f7a:	f88d 201e 	strb.w	r2, [sp, #30]
		byte bytesToCopy = currentLevelKnownBits / 8 + (currentLevelKnownBits % 8 ? 1 : 0); // The number of bytes needed to represent the known bits for this level.
 80a1f7e:	f014 0207 	ands.w	r2, r4, #7
 80a1f82:	bf18      	it	ne
 80a1f84:	2201      	movne	r2, #1
 80a1f86:	eb02 02e4 	add.w	r2, r2, r4, asr #3
		if (bytesToCopy) {
 80a1f8a:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
		byte bytesToCopy = currentLevelKnownBits / 8 + (currentLevelKnownBits % 8 ? 1 : 0); // The number of bytes needed to represent the known bits for this level.
 80a1f8e:	b2e0      	uxtb	r0, r4
		if (bytesToCopy) {
 80a1f90:	d01a      	beq.n	80a1fc8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xb2>
			byte maxBytes = useCascadeTag ? 3 : 4; // Max 4 bytes in each Cascade Level. Only 3 left if we use the Cascade Tag
 80a1f92:	2b00      	cmp	r3, #0
 80a1f94:	bf14      	ite	ne
 80a1f96:	f04f 0c03 	movne.w	ip, #3
 80a1f9a:	f04f 0c04 	moveq.w	ip, #4
			for (count = 0; count < bytesToCopy; count++) {
 80a1f9e:	4594      	cmp	ip, r2
 80a1fa0:	bf94      	ite	ls
 80a1fa2:	eb01 020c 	addls.w	r2, r1, ip
 80a1fa6:	188a      	addhi	r2, r1, r2
 80a1fa8:	f106 0e01 	add.w	lr, r6, #1
 80a1fac:	44be      	add	lr, r7
 80a1fae:	b2d2      	uxtb	r2, r2
				buffer[index++] = uid->uidByte[uidIndex + count];
 80a1fb0:	468c      	mov	ip, r1
 80a1fb2:	3101      	adds	r1, #1
 80a1fb4:	f81e 9b01 	ldrb.w	r9, [lr], #1
 80a1fb8:	b2c9      	uxtb	r1, r1
 80a1fba:	f10d 0b28 	add.w	fp, sp, #40	; 0x28
 80a1fbe:	44dc      	add	ip, fp
			for (count = 0; count < bytesToCopy; count++) {
 80a1fc0:	4291      	cmp	r1, r2
				buffer[index++] = uid->uidByte[uidIndex + count];
 80a1fc2:	f80c 9c0c 	strb.w	r9, [ip, #-12]
			for (count = 0; count < bytesToCopy; count++) {
 80a1fc6:	d1f3      	bne.n	80a1fb0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x9a>
		if (useCascadeTag) {
 80a1fc8:	b113      	cbz	r3, 80a1fd0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xba>
			currentLevelKnownBits += 8;
 80a1fca:	f100 0408 	add.w	r4, r0, #8
 80a1fce:	b264      	sxtb	r4, r4
			if (currentLevelKnownBits >= 32) { // All UID bits in this Cascade Level are known. This is a SELECT.
 80a1fd0:	2c1f      	cmp	r4, #31
 80a1fd2:	dd73      	ble.n	80a20bc <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1a6>
				buffer[1] = 0x70; // NVB - Number of Valid Bits: Seven whole bytes
 80a1fd4:	f04f 0370 	mov.w	r3, #112	; 0x70
				buffer[6] = buffer[2] ^ buffer[3] ^ buffer[4] ^ buffer[5];
 80a1fd8:	f89d 201f 	ldrb.w	r2, [sp, #31]
				buffer[1] = 0x70; // NVB - Number of Valid Bits: Seven whole bytes
 80a1fdc:	f88d 301d 	strb.w	r3, [sp, #29]
				buffer[6] = buffer[2] ^ buffer[3] ^ buffer[4] ^ buffer[5];
 80a1fe0:	f89d 301e 	ldrb.w	r3, [sp, #30]
				result = PCD_CalculateCRC(buffer, 7, &buffer[7]);
 80a1fe4:	4650      	mov	r0, sl
				buffer[6] = buffer[2] ^ buffer[3] ^ buffer[4] ^ buffer[5];
 80a1fe6:	4053      	eors	r3, r2
 80a1fe8:	f89d 2020 	ldrb.w	r2, [sp, #32]
				result = PCD_CalculateCRC(buffer, 7, &buffer[7]);
 80a1fec:	a907      	add	r1, sp, #28
				buffer[6] = buffer[2] ^ buffer[3] ^ buffer[4] ^ buffer[5];
 80a1fee:	4053      	eors	r3, r2
 80a1ff0:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
 80a1ff4:	4053      	eors	r3, r2
 80a1ff6:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
				result = PCD_CalculateCRC(buffer, 7, &buffer[7]);
 80a1ffa:	2207      	movs	r2, #7
 80a1ffc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80a2000:	f7ff fd82 	bl	80a1b08 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
				if (result != STATUS_OK) {
 80a2004:	2801      	cmp	r0, #1
				result = PCD_CalculateCRC(buffer, 7, &buffer[7]);
 80a2006:	4681      	mov	r9, r0
				if (result != STATUS_OK) {
 80a2008:	f040 80c5 	bne.w	80a2196 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x280>
				txLastBits		= 0; // 0 => All 8 bits are valid.
 80a200c:	2300      	movs	r3, #0
 80a200e:	f88d 301a 	strb.w	r3, [sp, #26]
				responseLength	= 3;
 80a2012:	2303      	movs	r3, #3
				bufferUsed		= 9;
 80a2014:	f04f 0909 	mov.w	r9, #9
				responseLength	= 3;
 80a2018:	f88d 301b 	strb.w	r3, [sp, #27]
 80a201c:	9404      	str	r4, [sp, #16]
				responseBuffer	= &buffer[6];
 80a201e:	f10d 0b22 	add.w	fp, sp, #34	; 0x22
			rxAlign = txLastBits;											// Having a seperate variable is overkill. But it makes the next line easier to read.
 80a2022:	f89d 301a 	ldrb.w	r3, [sp, #26]
			PCD_WriteRegister(BitFramingReg, (rxAlign << 4) + txLastBits);	// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
 80a2026:	211a      	movs	r1, #26
 80a2028:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 80a202c:	4650      	mov	r0, sl
 80a202e:	b2d2      	uxtb	r2, r2
 80a2030:	9305      	str	r3, [sp, #20]
 80a2032:	f7ff fd04 	bl	80a1a3e <_ZN7MFRC52217PCD_WriteRegisterEhh>
			result = PCD_TransceiveData(buffer, bufferUsed, responseBuffer, &responseLength, &txLastBits, rxAlign);			
 80a2036:	2200      	movs	r2, #0
 80a2038:	9b05      	ldr	r3, [sp, #20]
 80a203a:	9203      	str	r2, [sp, #12]
 80a203c:	9302      	str	r3, [sp, #8]
 80a203e:	f10d 031a 	add.w	r3, sp, #26
 80a2042:	9301      	str	r3, [sp, #4]
 80a2044:	f10d 031b 	add.w	r3, sp, #27
 80a2048:	464a      	mov	r2, r9
 80a204a:	9300      	str	r3, [sp, #0]
 80a204c:	4650      	mov	r0, sl
 80a204e:	465b      	mov	r3, fp
 80a2050:	a907      	add	r1, sp, #28
 80a2052:	f7ff ff05 	bl	80a1e60 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
			if (result == STATUS_COLLISION) { // More than one PICC in the field => collision.
 80a2056:	2803      	cmp	r0, #3
			result = PCD_TransceiveData(buffer, bufferUsed, responseBuffer, &responseLength, &txLastBits, rxAlign);			
 80a2058:	4681      	mov	r9, r0
			if (result == STATUS_COLLISION) { // More than one PICC in the field => collision.
 80a205a:	d14b      	bne.n	80a20f4 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1de>
				result = PCD_ReadRegister(CollReg); // CollReg[7..0] bits are: ValuesAfterColl reserved CollPosNotValid CollPos[4:0]
 80a205c:	211c      	movs	r1, #28
 80a205e:	4650      	mov	r0, sl
 80a2060:	f7ff fd1d 	bl	80a1a9e <_ZN7MFRC52216PCD_ReadRegisterEh>
				if (result & 0x20) { // CollPosNotValid
 80a2064:	0681      	lsls	r1, r0, #26
 80a2066:	f100 8096 	bmi.w	80a2196 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x280>
					collisionPos = 32;
 80a206a:	f010 001f 	ands.w	r0, r0, #31
 80a206e:	bf08      	it	eq
 80a2070:	2020      	moveq	r0, #32
				if (collisionPos <= currentLevelKnownBits) { // No progress - should not happen 
 80a2072:	42a0      	cmp	r0, r4
 80a2074:	f340 8084 	ble.w	80a2180 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x26a>
				count			= (currentLevelKnownBits - 1) % 8; // The bit to modify
 80a2078:	1e43      	subs	r3, r0, #1
				index			= 1 + (currentLevelKnownBits / 8) + (count ? 1 : 0); // First byte is index 0.
 80a207a:	f003 0207 	and.w	r2, r3, #7
 80a207e:	f013 0307 	ands.w	r3, r3, #7
 80a2082:	bf18      	it	ne
 80a2084:	2301      	movne	r3, #1
				currentLevelKnownBits = collisionPos;
 80a2086:	b244      	sxtb	r4, r0
				index			= 1 + (currentLevelKnownBits / 8) + (count ? 1 : 0); // First byte is index 0.
 80a2088:	08c0      	lsrs	r0, r0, #3
 80a208a:	3001      	adds	r0, #1
				buffer[index]	|= (1 << count); 
 80a208c:	4418      	add	r0, r3
 80a208e:	ab0a      	add	r3, sp, #40	; 0x28
 80a2090:	4418      	add	r0, r3
 80a2092:	2301      	movs	r3, #1
 80a2094:	fa03 f202 	lsl.w	r2, r3, r2
 80a2098:	f810 3c0c 	ldrb.w	r3, [r0, #-12]
 80a209c:	4313      	orrs	r3, r2
 80a209e:	f800 3c0c 	strb.w	r3, [r0, #-12]
		while ( ! selectDone) {
 80a20a2:	e795      	b.n	80a1fd0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xba>
				buffer[0] = PICC_CMD_SEL_CL3;
 80a20a4:	2397      	movs	r3, #151	; 0x97
				uidIndex = 6;
 80a20a6:	2606      	movs	r6, #6
				buffer[0] = PICC_CMD_SEL_CL3;
 80a20a8:	f88d 301c 	strb.w	r3, [sp, #28]
				useCascadeTag = false;						// Never used in CL3.
 80a20ac:	4623      	mov	r3, r4
				break;
 80a20ae:	e75a      	b.n	80a1f66 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x50>
				useCascadeTag = validBits && uid->size > 4;	// When we know that the UID has more than 4 bytes
 80a20b0:	4643      	mov	r3, r8
 80a20b2:	e749      	b.n	80a1f48 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x32>
				useCascadeTag = validBits && uid->size > 7;	// When we know that the UID has more than 7 bytes
 80a20b4:	4643      	mov	r3, r8
 80a20b6:	e756      	b.n	80a1f66 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x50>
		index = 2; // destination index in buffer[]
 80a20b8:	2102      	movs	r1, #2
 80a20ba:	e760      	b.n	80a1f7e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x68>
				bufferUsed		= index + (txLastBits ? 1 : 0);
 80a20bc:	f014 0907 	ands.w	r9, r4, #7
 80a20c0:	bf18      	it	ne
 80a20c2:	f04f 0901 	movne.w	r9, #1
				count			= currentLevelKnownBits / 8;	// Number of whole bytes in the UID part.
 80a20c6:	10e3      	asrs	r3, r4, #3
				index			= 2 + count;					// Number of whole bytes: SEL + NVB + UIDs
 80a20c8:	3302      	adds	r3, #2
 80a20ca:	b2db      	uxtb	r3, r3
				txLastBits		= currentLevelKnownBits % 8;
 80a20cc:	f004 0207 	and.w	r2, r4, #7
 80a20d0:	f88d 201a 	strb.w	r2, [sp, #26]
				buffer[1]		= (index << 4) + txLastBits;	// NVB - Number of Valid Bits
 80a20d4:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 80a20d8:	f88d 201d 	strb.w	r2, [sp, #29]
				responseBuffer	= &buffer[index];
 80a20dc:	aa07      	add	r2, sp, #28
				bufferUsed		= index + (txLastBits ? 1 : 0);
 80a20de:	4499      	add	r9, r3
				responseBuffer	= &buffer[index];
 80a20e0:	eb02 0b03 	add.w	fp, r2, r3
				responseLength	= sizeof(buffer) - index;
 80a20e4:	f1c3 0309 	rsb	r3, r3, #9
				bufferUsed		= index + (txLastBits ? 1 : 0);
 80a20e8:	fa5f f989 	uxtb.w	r9, r9
				responseLength	= sizeof(buffer) - index;
 80a20ec:	f88d 301b 	strb.w	r3, [sp, #27]
 80a20f0:	9404      	str	r4, [sp, #16]
 80a20f2:	e796      	b.n	80a2022 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x10c>
			else if (result != STATUS_OK) {
 80a20f4:	2801      	cmp	r0, #1
 80a20f6:	d14e      	bne.n	80a2196 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x280>
				if (currentLevelKnownBits >= 32) { // This was a SELECT.
 80a20f8:	9b04      	ldr	r3, [sp, #16]
					currentLevelKnownBits = 32;
 80a20fa:	2420      	movs	r4, #32
				if (currentLevelKnownBits >= 32) { // This was a SELECT.
 80a20fc:	2b1f      	cmp	r3, #31
 80a20fe:	f77f af69 	ble.w	80a1fd4 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xbe>
		index			= (buffer[2] == PICC_CMD_CT) ? 3 : 2; // source index in buffer[]
 80a2102:	f89d 301e 	ldrb.w	r3, [sp, #30]
 80a2106:	2b88      	cmp	r3, #136	; 0x88
 80a2108:	d13d      	bne.n	80a2186 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x270>
 80a210a:	2303      	movs	r3, #3
		bytesToCopy		= (buffer[2] == PICC_CMD_CT) ? 3 : 4;
 80a210c:	461a      	mov	r2, r3
		for (count = 0; count < bytesToCopy; count++) {
 80a210e:	3601      	adds	r6, #1
 80a2110:	441a      	add	r2, r3
 80a2112:	443e      	add	r6, r7
 80a2114:	b2d2      	uxtb	r2, r2
			uid->uidByte[uidIndex + count] = buffer[index++];
 80a2116:	4619      	mov	r1, r3
 80a2118:	a80a      	add	r0, sp, #40	; 0x28
 80a211a:	3301      	adds	r3, #1
 80a211c:	4401      	add	r1, r0
 80a211e:	f811 1c0c 	ldrb.w	r1, [r1, #-12]
 80a2122:	b2db      	uxtb	r3, r3
		for (count = 0; count < bytesToCopy; count++) {
 80a2124:	4293      	cmp	r3, r2
			uid->uidByte[uidIndex + count] = buffer[index++];
 80a2126:	f806 1b01 	strb.w	r1, [r6], #1
		for (count = 0; count < bytesToCopy; count++) {
 80a212a:	d1f4      	bne.n	80a2116 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x200>
		if (responseLength != 3 || txLastBits != 0) {		// SAK must be exactly 24 bits (1 byte + CRC_A).
 80a212c:	f89d 601b 	ldrb.w	r6, [sp, #27]
 80a2130:	2e03      	cmp	r6, #3
 80a2132:	d137      	bne.n	80a21a4 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28e>
 80a2134:	f89d 401a 	ldrb.w	r4, [sp, #26]
 80a2138:	bba4      	cbnz	r4, 80a21a4 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28e>
		result = PCD_CalculateCRC(responseBuffer, 1, &buffer[2]);
 80a213a:	2201      	movs	r2, #1
 80a213c:	4659      	mov	r1, fp
 80a213e:	4650      	mov	r0, sl
 80a2140:	f10d 031e 	add.w	r3, sp, #30
 80a2144:	f7ff fce0 	bl	80a1b08 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
		if (result != STATUS_OK) {
 80a2148:	2801      	cmp	r0, #1
		result = PCD_CalculateCRC(responseBuffer, 1, &buffer[2]);
 80a214a:	4681      	mov	r9, r0
		if (result != STATUS_OK) {
 80a214c:	d123      	bne.n	80a2196 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x280>
		if ((buffer[2] != responseBuffer[1]) || (buffer[3] != responseBuffer[2])) {
 80a214e:	f89d 201e 	ldrb.w	r2, [sp, #30]
 80a2152:	f89b 3001 	ldrb.w	r3, [fp, #1]
 80a2156:	429a      	cmp	r2, r3
 80a2158:	d127      	bne.n	80a21aa <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x294>
 80a215a:	f89d 201f 	ldrb.w	r2, [sp, #31]
 80a215e:	f89b 3002 	ldrb.w	r3, [fp, #2]
 80a2162:	429a      	cmp	r2, r3
 80a2164:	d121      	bne.n	80a21aa <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x294>
		if (responseBuffer[0] & 0x04) { // Cascade bit set - UID not complete yes
 80a2166:	f89b 3000 	ldrb.w	r3, [fp]
 80a216a:	075a      	lsls	r2, r3, #29
 80a216c:	d50e      	bpl.n	80a218c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x276>
			cascadeLevel++;
 80a216e:	3501      	adds	r5, #1
 80a2170:	b2ed      	uxtb	r5, r5
		switch (cascadeLevel) {
 80a2172:	2d03      	cmp	r5, #3
 80a2174:	d096      	beq.n	80a20a4 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x18e>
 80a2176:	2d04      	cmp	r5, #4
 80a2178:	d002      	beq.n	80a2180 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x26a>
 80a217a:	2d02      	cmp	r5, #2
 80a217c:	f43f aee7 	beq.w	80a1f4e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x38>
 80a2180:	f04f 0906 	mov.w	r9, #6
 80a2184:	e007      	b.n	80a2196 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x280>
		index			= (buffer[2] == PICC_CMD_CT) ? 3 : 2; // source index in buffer[]
 80a2186:	2302      	movs	r3, #2
		bytesToCopy		= (buffer[2] == PICC_CMD_CT) ? 3 : 4;
 80a2188:	2204      	movs	r2, #4
 80a218a:	e7c0      	b.n	80a210e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1f8>
	uid->size = 3 * cascadeLevel + 1;
 80a218c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80a2190:	3501      	adds	r5, #1
			uid->sak = responseBuffer[0];
 80a2192:	72fb      	strb	r3, [r7, #11]
	uid->size = 3 * cascadeLevel + 1;
 80a2194:	703d      	strb	r5, [r7, #0]
} // End PICC_Select()
 80a2196:	4648      	mov	r0, r9
 80a2198:	b00b      	add	sp, #44	; 0x2c
 80a219a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return STATUS_INVALID;
 80a219e:	f04f 0907 	mov.w	r9, #7
 80a21a2:	e7f8      	b.n	80a2196 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x280>
			return STATUS_ERROR;
 80a21a4:	f04f 0902 	mov.w	r9, #2
 80a21a8:	e7f5      	b.n	80a2196 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x280>
			return STATUS_CRC_WRONG;
 80a21aa:	f04f 0908 	mov.w	r9, #8
 80a21ae:	e7f2      	b.n	80a2196 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x280>

080a21b0 <_ZN7MFRC52219PICC_ReadCardSerialEv>:
 * Remember to call PICC_IsNewCardPresent(), PICC_RequestA() or PICC_WakeupA() first.
 * The read UID is available in the class variable uid.
 * 
 * @return bool
 */
bool MFRC522::PICC_ReadCardSerial() {
 80a21b0:	b508      	push	{r3, lr}
 80a21b2:	4601      	mov	r1, r0
	byte result = PICC_Select(&uid);
 80a21b4:	2200      	movs	r2, #0
 80a21b6:	f7ff feae 	bl	80a1f16 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh>
	return (result == STATUS_OK);
} // End PICC_ReadCardSerial()
 80a21ba:	1e43      	subs	r3, r0, #1
 80a21bc:	4258      	negs	r0, r3
 80a21be:	4158      	adcs	r0, r3
 80a21c0:	bd08      	pop	{r3, pc}

080a21c2 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi>:

    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(char* domain, uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
 80a21c2:	b538      	push	{r3, r4, r5, lr}
 80a21c4:	461d      	mov	r5, r3
    this->callback = callback;
 80a21c6:	9b05      	ldr	r3, [sp, #20]
void MQTT::initialize(char* domain, uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
 80a21c8:	4604      	mov	r4, r0
    this->callback = callback;
 80a21ca:	6303      	str	r3, [r0, #48]	; 0x30
    this->qoscallback = NULL;
 80a21cc:	2300      	movs	r3, #0
 80a21ce:	6343      	str	r3, [r0, #52]	; 0x34
    if (ip != NULL)
 80a21d0:	b102      	cbz	r2, 80a21d4 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x12>
        this->ip = ip;
 80a21d2:	6482      	str	r2, [r0, #72]	; 0x48
    if (domain != NULL)
 80a21d4:	b119      	cbz	r1, 80a21de <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x1c>
        this->domain = domain;
 80a21d6:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80a21da:	f002 f87b 	bl	80a42d4 <_ZN6StringaSEPKc>
    this->port = port;
    this->keepalive = keepalive;
 80a21de:	9b04      	ldr	r3, [sp, #16]

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
    if (buffer != NULL)
 80a21e0:	69e0      	ldr	r0, [r4, #28]
    this->keepalive = keepalive;
 80a21e2:	6523      	str	r3, [r4, #80]	; 0x50
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
 80a21e4:	9b06      	ldr	r3, [sp, #24]
    this->port = port;
 80a21e6:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
 80a21ea:	2bff      	cmp	r3, #255	; 0xff
 80a21ec:	bfb8      	it	lt
 80a21ee:	23ff      	movlt	r3, #255	; 0xff
 80a21f0:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    if (buffer != NULL)
 80a21f4:	b108      	cbz	r0, 80a21fa <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x38>
      delete[] buffer;
 80a21f6:	f7fd ff56 	bl	80a00a6 <_ZdaPv>
    buffer = new uint8_t[this->maxpacketsize];
 80a21fa:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
 80a21fe:	f7fd ff4e 	bl	80a009e <_Znaj>
 80a2202:	61e0      	str	r0, [r4, #28]
}
 80a2204:	bd38      	pop	{r3, r4, r5, pc}
	...

080a2208 <_ZN4MQTTC1EPctiPFvS0_PhjEi>:
MQTT::MQTT(char* domain, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
 80a2208:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80a220c:	4604      	mov	r4, r0
 80a220e:	2600      	movs	r6, #0
 80a2210:	4617      	mov	r7, r2
 80a2212:	4698      	mov	r8, r3
 80a2214:	460d      	mov	r5, r1
 80a2216:	f001 ff19 	bl	80a404c <_ZN9TCPClientC1Ev>
 80a221a:	490b      	ldr	r1, [pc, #44]	; (80a2248 <_ZN4MQTTC1EPctiPFvS0_PhjEi+0x40>)
 80a221c:	61e6      	str	r6, [r4, #28]
 80a221e:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80a2222:	f002 f805 	bl	80a4230 <_ZN6StringC1EPKc>
    this->initialize(domain, NULL, port, keepalive, callback, maxpacketsize);
 80a2226:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80a2228:	4620      	mov	r0, r4
 80a222a:	9302      	str	r3, [sp, #8]
 80a222c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a222e:	4632      	mov	r2, r6
 80a2230:	e9cd 8300 	strd	r8, r3, [sp]
 80a2234:	4629      	mov	r1, r5
 80a2236:	463b      	mov	r3, r7
MQTT::MQTT(char* domain, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
 80a2238:	64a6      	str	r6, [r4, #72]	; 0x48
    this->initialize(domain, NULL, port, keepalive, callback, maxpacketsize);
 80a223a:	f7ff ffc2 	bl	80a21c2 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi>
}
 80a223e:	4620      	mov	r0, r4
 80a2240:	b004      	add	sp, #16
 80a2242:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a2246:	bf00      	nop
 80a2248:	080a86c9 	.word	0x080a86c9

080a224c <_ZN4MQTT8readByteEv>:
        _client.stop();
    }
    return false;
}

uint8_t MQTT::readByte() {
 80a224c:	b510      	push	{r4, lr}
 80a224e:	4604      	mov	r4, r0
    while(!_client.available()) {}
 80a2250:	4620      	mov	r0, r4
 80a2252:	f001 fe11 	bl	80a3e78 <_ZN9TCPClient9availableEv>
 80a2256:	2800      	cmp	r0, #0
 80a2258:	d0fa      	beq.n	80a2250 <_ZN4MQTT8readByteEv+0x4>
    return _client.read();
 80a225a:	4620      	mov	r0, r4
 80a225c:	f001 fd4f 	bl	80a3cfe <_ZN9TCPClient4readEv>
}
 80a2260:	b2c0      	uxtb	r0, r0
 80a2262:	bd10      	pop	{r4, pc}

080a2264 <_ZN4MQTT10readPacketEPh>:

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
 80a2264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a2268:	4605      	mov	r5, r0
    uint16_t len = 0;
    buffer[len++] = readByte();
 80a226a:	69c4      	ldr	r4, [r0, #28]
uint16_t MQTT::readPacket(uint8_t* lengthLength) {
 80a226c:	4689      	mov	r9, r1
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
    uint32_t multiplier = 1;
 80a226e:	2701      	movs	r7, #1
    buffer[len++] = readByte();
 80a2270:	f7ff ffec 	bl	80a224c <_ZN4MQTT8readByteEv>
    uint16_t length = 0;
 80a2274:	f04f 0800 	mov.w	r8, #0
    buffer[len++] = readByte();
 80a2278:	7020      	strb	r0, [r4, #0]
 80a227a:	463c      	mov	r4, r7
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
 80a227c:	69eb      	ldr	r3, [r5, #28]
 80a227e:	f893 a000 	ldrb.w	sl, [r3]
 80a2282:	f00a 0af0 	and.w	sl, sl, #240	; 0xf0
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
 80a2286:	4628      	mov	r0, r5
 80a2288:	f7ff ffe0 	bl	80a224c <_ZN4MQTT8readByteEv>
        buffer[len++] = digit;
 80a228c:	4626      	mov	r6, r4
 80a228e:	69eb      	ldr	r3, [r5, #28]
 80a2290:	3401      	adds	r4, #1
 80a2292:	5598      	strb	r0, [r3, r6]
        length += (digit & 127) * multiplier;
 80a2294:	f000 037f 	and.w	r3, r0, #127	; 0x7f
 80a2298:	fb03 8807 	mla	r8, r3, r7, r8
        multiplier *= 128;
    } while ((digit & 128) != 0);
 80a229c:	0603      	lsls	r3, r0, #24
        buffer[len++] = digit;
 80a229e:	b2a4      	uxth	r4, r4
        length += (digit & 127) * multiplier;
 80a22a0:	fa1f f888 	uxth.w	r8, r8
        multiplier *= 128;
 80a22a4:	ea4f 17c7 	mov.w	r7, r7, lsl #7
    } while ((digit & 128) != 0);
 80a22a8:	d4ed      	bmi.n	80a2286 <_ZN4MQTT10readPacketEPh+0x22>
    *lengthLength = len-1;
 80a22aa:	1e63      	subs	r3, r4, #1

    if (isPublish) {
 80a22ac:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
    *lengthLength = len-1;
 80a22b0:	f889 3000 	strb.w	r3, [r9]
    if (isPublish) {
 80a22b4:	d124      	bne.n	80a2300 <_ZN4MQTT10readPacketEPh+0x9c>
        // Read in topic length to calculate bytes to skip over for Stream writing
        buffer[len++] = readByte();
 80a22b6:	4628      	mov	r0, r5
 80a22b8:	69ef      	ldr	r7, [r5, #28]
 80a22ba:	f7ff ffc7 	bl	80a224c <_ZN4MQTT8readByteEv>
 80a22be:	5538      	strb	r0, [r7, r4]
        buffer[len++] = readByte();
 80a22c0:	4628      	mov	r0, r5
 80a22c2:	69ef      	ldr	r7, [r5, #28]
 80a22c4:	f7ff ffc2 	bl	80a224c <_ZN4MQTT8readByteEv>
 80a22c8:	1cf4      	adds	r4, r6, #3
        buffer[len++] = readByte();
 80a22ca:	3602      	adds	r6, #2
        buffer[len++] = readByte();
 80a22cc:	b2b6      	uxth	r6, r6
 80a22ce:	55b8      	strb	r0, [r7, r6]
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
        start = 2;
 80a22d0:	2602      	movs	r6, #2
        buffer[len++] = readByte();
 80a22d2:	b2a4      	uxth	r4, r4
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
 80a22d4:	b2b6      	uxth	r6, r6
 80a22d6:	46b1      	mov	r9, r6
 80a22d8:	4627      	mov	r7, r4
 80a22da:	45c1      	cmp	r9, r8
 80a22dc:	d212      	bcs.n	80a2304 <_ZN4MQTT10readPacketEPh+0xa0>
        digit = readByte();
 80a22de:	4628      	mov	r0, r5
 80a22e0:	f7ff ffb4 	bl	80a224c <_ZN4MQTT8readByteEv>
        if (len < this->maxpacketsize) {
 80a22e4:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
    for (uint16_t i = start;i<length;i++) {
 80a22e8:	f109 0901 	add.w	r9, r9, #1
        if (len < this->maxpacketsize) {
 80a22ec:	42bb      	cmp	r3, r7
            buffer[len] = digit;
 80a22ee:	bf88      	it	hi
 80a22f0:	69eb      	ldrhi	r3, [r5, #28]
    for (uint16_t i = start;i<length;i++) {
 80a22f2:	fa1f f989 	uxth.w	r9, r9
            buffer[len] = digit;
 80a22f6:	bf88      	it	hi
 80a22f8:	55d8      	strbhi	r0, [r3, r7]
        }
        len++;
 80a22fa:	3701      	adds	r7, #1
 80a22fc:	b2bf      	uxth	r7, r7
    for (uint16_t i = start;i<length;i++) {
 80a22fe:	e7ec      	b.n	80a22da <_ZN4MQTT10readPacketEPh+0x76>
    uint8_t start = 0;
 80a2300:	2600      	movs	r6, #0
 80a2302:	e7e7      	b.n	80a22d4 <_ZN4MQTT10readPacketEPh+0x70>
 80a2304:	eba8 0006 	sub.w	r0, r8, r6
 80a2308:	45b0      	cmp	r8, r6
 80a230a:	bf2c      	ite	cs
 80a230c:	4606      	movcs	r6, r0
 80a230e:	2600      	movcc	r6, #0
    }

    if (len > this->maxpacketsize) {
 80a2310:	f8b5 0054 	ldrh.w	r0, [r5, #84]	; 0x54
 80a2314:	4434      	add	r4, r6
 80a2316:	b2a4      	uxth	r4, r4
        len = 0; // This will cause the packet to be ignored.
    }

    return len;
}
 80a2318:	42a0      	cmp	r0, r4
 80a231a:	bf2c      	ite	cs
 80a231c:	4620      	movcs	r0, r4
 80a231e:	2000      	movcc	r0, #0
 80a2320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080a2324 <_ZN4MQTT5writeEhPht>:
        return _client.write(buffer, length);
    }
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
 80a2324:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80a2326:	468c      	mov	ip, r1
 80a2328:	461e      	mov	r6, r3
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
 80a232a:	461d      	mov	r5, r3
bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
 80a232c:	4607      	mov	r7, r0
    uint8_t llen = 0;
 80a232e:	2300      	movs	r3, #0
    do {
        digit = len % 128;
 80a2330:	46ae      	mov	lr, r5
 80a2332:	f005 017f 	and.w	r1, r5, #127	; 0x7f
        len = len / 128;
        if (len > 0) {
 80a2336:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
 80a233a:	a802      	add	r0, sp, #8
            digit |= 0x80;
 80a233c:	bf88      	it	hi
 80a233e:	f041 0180 	orrhi.w	r1, r1, #128	; 0x80
        lenBuf[pos++] = digit;
 80a2342:	1c5c      	adds	r4, r3, #1
        llen++;
    } while(len > 0);
 80a2344:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        lenBuf[pos++] = digit;
 80a2348:	4403      	add	r3, r0
        len = len / 128;
 80a234a:	ea4f 15d5 	mov.w	r5, r5, lsr #7
        lenBuf[pos++] = digit;
 80a234e:	b2e4      	uxtb	r4, r4
 80a2350:	f803 1c04 	strb.w	r1, [r3, #-4]
    } while(len > 0);
 80a2354:	d810      	bhi.n	80a2378 <_ZN4MQTT5writeEhPht+0x54>

    buf[4-llen] = header;
 80a2356:	f1c4 0304 	rsb	r3, r4, #4
 80a235a:	18d1      	adds	r1, r2, r3
 80a235c:	f802 c003 	strb.w	ip, [r2, r3]
    for (int i = 0; i < llen; i++) {
 80a2360:	f1c4 0305 	rsb	r3, r4, #5
 80a2364:	4413      	add	r3, r2
 80a2366:	a801      	add	r0, sp, #4
 80a2368:	3205      	adds	r2, #5
 80a236a:	4293      	cmp	r3, r2
 80a236c:	d006      	beq.n	80a237c <_ZN4MQTT5writeEhPht+0x58>
        buf[5-llen+i] = lenBuf[i];
 80a236e:	f810 5b01 	ldrb.w	r5, [r0], #1
 80a2372:	f803 5b01 	strb.w	r5, [r3], #1
    for (int i = 0; i < llen; i++) {
 80a2376:	e7f8      	b.n	80a236a <_ZN4MQTT5writeEhPht+0x46>
        lenBuf[pos++] = digit;
 80a2378:	4623      	mov	r3, r4
 80a237a:	e7d9      	b.n	80a2330 <_ZN4MQTT5writeEhPht+0xc>
    }
    rc = _client.write(buf+(4-llen), length+1+llen);
 80a237c:	1c72      	adds	r2, r6, #1
 80a237e:	4422      	add	r2, r4
 80a2380:	4638      	mov	r0, r7
 80a2382:	f001 fc3f 	bl	80a3c04 <_ZN9TCPClient5writeEPKhj>
 80a2386:	4605      	mov	r5, r0
 80a2388:	f001 f8dc 	bl	80a3544 <HAL_Timer_Get_Milli_Seconds>

    lastOutActivity = millis();
    return (rc == 1+llen+length);
 80a238c:	3401      	adds	r4, #1
    lastOutActivity = millis();
 80a238e:	6278      	str	r0, [r7, #36]	; 0x24
    return (rc == 1+llen+length);
 80a2390:	4434      	add	r4, r6
 80a2392:	b2a8      	uxth	r0, r5
}
 80a2394:	1a23      	subs	r3, r4, r0
 80a2396:	4258      	negs	r0, r3
 80a2398:	4158      	adcs	r0, r3
 80a239a:	b003      	add	sp, #12
 80a239c:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a239e <_ZN4MQTT10disconnectEv>:
    }
    return false;
}

void MQTT::disconnect() {
    buffer[0] = MQTTDISCONNECT;
 80a239e:	22e0      	movs	r2, #224	; 0xe0
void MQTT::disconnect() {
 80a23a0:	b510      	push	{r4, lr}
    buffer[0] = MQTTDISCONNECT;
 80a23a2:	69c3      	ldr	r3, [r0, #28]
void MQTT::disconnect() {
 80a23a4:	4604      	mov	r4, r0
    buffer[0] = MQTTDISCONNECT;
 80a23a6:	701a      	strb	r2, [r3, #0]
    buffer[1] = 0;
 80a23a8:	2200      	movs	r2, #0
 80a23aa:	69c3      	ldr	r3, [r0, #28]
 80a23ac:	705a      	strb	r2, [r3, #1]
    _client.write(buffer,2);
 80a23ae:	69c1      	ldr	r1, [r0, #28]
 80a23b0:	2202      	movs	r2, #2
 80a23b2:	f001 fc27 	bl	80a3c04 <_ZN9TCPClient5writeEPKhj>
    _client.stop();
 80a23b6:	4620      	mov	r0, r4
 80a23b8:	f001 fd98 	bl	80a3eec <_ZN9TCPClient4stopEv>
 80a23bc:	f001 f8c2 	bl	80a3544 <HAL_Timer_Get_Milli_Seconds>
    lastInActivity = lastOutActivity = millis();
 80a23c0:	e9c4 0009 	strd	r0, r0, [r4, #36]	; 0x24
}
 80a23c4:	bd10      	pop	{r4, pc}

080a23c6 <_ZN4MQTT11writeStringEPKcPht>:

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
 80a23c6:	3302      	adds	r3, #2
uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
 80a23c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a23ca:	4604      	mov	r4, r0
    pos += 2;
 80a23cc:	b298      	uxth	r0, r3
 80a23ce:	2300      	movs	r3, #0
    while (*idp && pos < this->maxpacketsize) {
 80a23d0:	5ccd      	ldrb	r5, [r1, r3]
 80a23d2:	b14d      	cbz	r5, 80a23e8 <_ZN4MQTT11writeStringEPKcPht+0x22>
 80a23d4:	f8b4 6054 	ldrh.w	r6, [r4, #84]	; 0x54
 80a23d8:	1c5f      	adds	r7, r3, #1
 80a23da:	4286      	cmp	r6, r0
 80a23dc:	d904      	bls.n	80a23e8 <_ZN4MQTT11writeStringEPKcPht+0x22>
        buf[pos++] = *idp++;
 80a23de:	1c46      	adds	r6, r0, #1
 80a23e0:	5415      	strb	r5, [r2, r0]
    while (*idp && pos < this->maxpacketsize) {
 80a23e2:	463b      	mov	r3, r7
        buf[pos++] = *idp++;
 80a23e4:	b2b0      	uxth	r0, r6
    while (*idp && pos < this->maxpacketsize) {
 80a23e6:	e7f3      	b.n	80a23d0 <_ZN4MQTT11writeStringEPKcPht+0xa>
        i++;
    }
    buf[pos-i-2] = (i >> 8);
 80a23e8:	b299      	uxth	r1, r3
 80a23ea:	1a44      	subs	r4, r0, r1
 80a23ec:	4422      	add	r2, r4
 80a23ee:	1209      	asrs	r1, r1, #8
 80a23f0:	f802 1c02 	strb.w	r1, [r2, #-2]
    buf[pos-i-1] = (i & 0xFF);
 80a23f4:	f802 3c01 	strb.w	r3, [r2, #-1]
    return pos;
}
 80a23f8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a23fa <_ZN4MQTT11isConnectedEv>:


bool MQTT::isConnected() {
 80a23fa:	b538      	push	{r3, r4, r5, lr}
 80a23fc:	4604      	mov	r4, r0
    bool rc = (int)_client.connected();
 80a23fe:	f001 fdcc 	bl	80a3f9a <_ZN9TCPClient9connectedEv>
 80a2402:	2800      	cmp	r0, #0
 80a2404:	bf14      	ite	ne
 80a2406:	2501      	movne	r5, #1
 80a2408:	2500      	moveq	r5, #0
    if (!rc) _client.stop();
 80a240a:	d102      	bne.n	80a2412 <_ZN4MQTT11isConnectedEv+0x18>
 80a240c:	4620      	mov	r0, r4
 80a240e:	f001 fd6d 	bl	80a3eec <_ZN9TCPClient4stopEv>
    return rc;
}
 80a2412:	4628      	mov	r0, r5
 80a2414:	bd38      	pop	{r3, r4, r5, pc}
	...

080a2418 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>:
bool MQTT::connect(const char *id, const char *user, const char *pass, const char* willTopic, EMQTT_QOS willQos, uint8_t willRetain, const char* willMessage, bool cleanSession, MQTT_VERSION version) {
 80a2418:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a241c:	b086      	sub	sp, #24
 80a241e:	4604      	mov	r4, r0
 80a2420:	4689      	mov	r9, r1
 80a2422:	4617      	mov	r7, r2
 80a2424:	461e      	mov	r6, r3
 80a2426:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 80a242a:	f89d a048 	ldrb.w	sl, [sp, #72]	; 0x48
    if (!isConnected()) {
 80a242e:	f7ff ffe4 	bl	80a23fa <_ZN4MQTT11isConnectedEv>
 80a2432:	4605      	mov	r5, r0
 80a2434:	2800      	cmp	r0, #0
 80a2436:	f040 80c3 	bne.w	80a25c0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1a8>
        if (ip == NULL)
 80a243a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80a243c:	2900      	cmp	r1, #0
 80a243e:	f040 8087 	bne.w	80a2550 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x138>
            result = _client.connect(this->domain.c_str(), this->port);
 80a2442:	4603      	mov	r3, r0
 80a2444:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
 80a2448:	4620      	mov	r0, r4
 80a244a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80a244c:	f001 fe16 	bl	80a407c <_ZN9TCPClient7connectEPKctm>
        if (result) {
 80a2450:	2800      	cmp	r0, #0
 80a2452:	d079      	beq.n	80a2548 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x130>
            nextMsgId = 1;
 80a2454:	2301      	movs	r3, #1
 80a2456:	8423      	strh	r3, [r4, #32]
            if (version == MQTT_V311) {
 80a2458:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 80a245c:	69e2      	ldr	r2, [r4, #28]
 80a245e:	2b04      	cmp	r3, #4
 80a2460:	f040 8081 	bne.w	80a2566 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x14e>
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
 80a2464:	4b57      	ldr	r3, [pc, #348]	; (80a25c4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1ac>)
 80a2466:	6818      	ldr	r0, [r3, #0]
 80a2468:	8899      	ldrh	r1, [r3, #4]
 80a246a:	799b      	ldrb	r3, [r3, #6]
 80a246c:	f8ad 1004 	strh.w	r1, [sp, #4]
 80a2470:	f88d 3006 	strb.w	r3, [sp, #6]
 80a2474:	9000      	str	r0, [sp, #0]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
 80a2476:	f8c2 0005 	str.w	r0, [r2, #5]
 80a247a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a247e:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 80a2482:	72d3      	strb	r3, [r2, #11]
                length+=sizeof(MQTT_HEADER_V311);
 80a2484:	230c      	movs	r3, #12
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
 80a2486:	f8a2 1009 	strh.w	r1, [r2, #9]
            if (willTopic) {
 80a248a:	f1b8 0f00 	cmp.w	r8, #0
 80a248e:	d07e      	beq.n	80a258e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x176>
                v = 0x06|(willQos<<3)|(willRetain<<5);
 80a2490:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
 80a2494:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 80a2498:	0140      	lsls	r0, r0, #5
 80a249a:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 80a249e:	f040 0006 	orr.w	r0, r0, #6
 80a24a2:	b2c0      	uxtb	r0, r0
            if (!cleanSession) {
 80a24a4:	f1ba 0f00 	cmp.w	sl, #0
 80a24a8:	d101      	bne.n	80a24ae <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x96>
              v = v&0xfd;
 80a24aa:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
            if(user != NULL) {
 80a24ae:	b11f      	cbz	r7, 80a24b8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xa0>
                if(pass != NULL) {
 80a24b0:	2e00      	cmp	r6, #0
 80a24b2:	d16e      	bne.n	80a2592 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x17a>
                v = v|0x80;
 80a24b4:	f040 0080 	orr.w	r0, r0, #128	; 0x80
            buffer[length++] = v;
 80a24b8:	69e2      	ldr	r2, [r4, #28]
 80a24ba:	54d0      	strb	r0, [r2, r3]
            buffer[length++] = ((this->keepalive) >> 8);
 80a24bc:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80a24be:	69e1      	ldr	r1, [r4, #28]
 80a24c0:	1c58      	adds	r0, r3, #1
 80a24c2:	1212      	asrs	r2, r2, #8
 80a24c4:	540a      	strb	r2, [r1, r0]
            buffer[length++] = ((this->keepalive) & 0xFF);
 80a24c6:	69e1      	ldr	r1, [r4, #28]
 80a24c8:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80a24ca:	1c9a      	adds	r2, r3, #2
 80a24cc:	5488      	strb	r0, [r1, r2]
            length = writeString(id, buffer, length);
 80a24ce:	3303      	adds	r3, #3
 80a24d0:	4649      	mov	r1, r9
 80a24d2:	4620      	mov	r0, r4
 80a24d4:	69e2      	ldr	r2, [r4, #28]
 80a24d6:	f7ff ff76 	bl	80a23c6 <_ZN4MQTT11writeStringEPKcPht>
 80a24da:	4603      	mov	r3, r0
            if (willTopic) {
 80a24dc:	f1b8 0f00 	cmp.w	r8, #0
 80a24e0:	d00b      	beq.n	80a24fa <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xe2>
                length = writeString(willTopic, buffer, length);
 80a24e2:	4641      	mov	r1, r8
 80a24e4:	69e2      	ldr	r2, [r4, #28]
 80a24e6:	4620      	mov	r0, r4
 80a24e8:	f7ff ff6d 	bl	80a23c6 <_ZN4MQTT11writeStringEPKcPht>
                length = writeString(willMessage, buffer, length);
 80a24ec:	69e2      	ldr	r2, [r4, #28]
                length = writeString(willTopic, buffer, length);
 80a24ee:	4603      	mov	r3, r0
                length = writeString(willMessage, buffer, length);
 80a24f0:	9911      	ldr	r1, [sp, #68]	; 0x44
 80a24f2:	4620      	mov	r0, r4
 80a24f4:	f7ff ff67 	bl	80a23c6 <_ZN4MQTT11writeStringEPKcPht>
 80a24f8:	4603      	mov	r3, r0
            if(user != NULL) {
 80a24fa:	b167      	cbz	r7, 80a2516 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xfe>
                length = writeString(user,buffer,length);
 80a24fc:	4639      	mov	r1, r7
 80a24fe:	4620      	mov	r0, r4
 80a2500:	69e2      	ldr	r2, [r4, #28]
 80a2502:	f7ff ff60 	bl	80a23c6 <_ZN4MQTT11writeStringEPKcPht>
 80a2506:	4603      	mov	r3, r0
                if(pass != NULL) {
 80a2508:	b12e      	cbz	r6, 80a2516 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xfe>
                    length = writeString(pass,buffer,length);
 80a250a:	4631      	mov	r1, r6
 80a250c:	4620      	mov	r0, r4
 80a250e:	69e2      	ldr	r2, [r4, #28]
 80a2510:	f7ff ff59 	bl	80a23c6 <_ZN4MQTT11writeStringEPKcPht>
 80a2514:	4603      	mov	r3, r0
            write(MQTTCONNECT, buffer, length-5);
 80a2516:	3b05      	subs	r3, #5
 80a2518:	2110      	movs	r1, #16
 80a251a:	69e2      	ldr	r2, [r4, #28]
 80a251c:	b29b      	uxth	r3, r3
 80a251e:	4620      	mov	r0, r4
 80a2520:	f7ff ff00 	bl	80a2324 <_ZN4MQTT5writeEhPht>
 80a2524:	f001 f80e 	bl	80a3544 <HAL_Timer_Get_Milli_Seconds>
                if (t-lastInActivity > this->keepalive*1000UL) {
 80a2528:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
            lastInActivity = lastOutActivity = millis();
 80a252c:	e9c4 0009 	strd	r0, r0, [r4, #36]	; 0x24
            while (!_client.available()) {
 80a2530:	4620      	mov	r0, r4
 80a2532:	f001 fca1 	bl	80a3e78 <_ZN9TCPClient9availableEv>
 80a2536:	bb78      	cbnz	r0, 80a2598 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x180>
 80a2538:	f001 f804 	bl	80a3544 <HAL_Timer_Get_Milli_Seconds>
                if (t-lastInActivity > this->keepalive*1000UL) {
 80a253c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80a253e:	1ac0      	subs	r0, r0, r3
 80a2540:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80a2542:	4373      	muls	r3, r6
 80a2544:	4298      	cmp	r0, r3
 80a2546:	d9f3      	bls.n	80a2530 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x118>
        _client.stop();
 80a2548:	4620      	mov	r0, r4
 80a254a:	f001 fccf 	bl	80a3eec <_ZN9TCPClient4stopEv>
 80a254e:	e033      	b.n	80a25b8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1a0>
            result = _client.connect(this->ip, this->port);
 80a2550:	4668      	mov	r0, sp
 80a2552:	f002 fbcb 	bl	80a4cec <_ZN9IPAddressC1EPKh>
 80a2556:	462b      	mov	r3, r5
 80a2558:	4669      	mov	r1, sp
 80a255a:	4620      	mov	r0, r4
 80a255c:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
 80a2560:	f001 fc1a 	bl	80a3d98 <_ZN9TCPClient7connectE9IPAddresstm>
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a2564:	e774      	b.n	80a2450 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x38>
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
 80a2566:	46ec      	mov	ip, sp
 80a2568:	4b17      	ldr	r3, [pc, #92]	; (80a25c8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1b0>)
 80a256a:	6818      	ldr	r0, [r3, #0]
 80a256c:	6859      	ldr	r1, [r3, #4]
 80a256e:	7a1b      	ldrb	r3, [r3, #8]
 80a2570:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 80a2574:	f88c 3000 	strb.w	r3, [ip]
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
 80a2578:	466b      	mov	r3, sp
 80a257a:	cb03      	ldmia	r3!, {r0, r1}
 80a257c:	f8c2 0005 	str.w	r0, [r2, #5]
 80a2580:	f8c2 1009 	str.w	r1, [r2, #9]
 80a2584:	f89c 3000 	ldrb.w	r3, [ip]
 80a2588:	7353      	strb	r3, [r2, #13]
                length+=sizeof(MQTT_HEADER_V31);
 80a258a:	230e      	movs	r3, #14
 80a258c:	e77d      	b.n	80a248a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x72>
                v = 0x02;
 80a258e:	2002      	movs	r0, #2
 80a2590:	e788      	b.n	80a24a4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x8c>
                    v = v|(0x80>>1);
 80a2592:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
 80a2596:	e78f      	b.n	80a24b8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xa0>
            uint16_t len = readPacket(&llen);
 80a2598:	4669      	mov	r1, sp
 80a259a:	4620      	mov	r0, r4
 80a259c:	f7ff fe62 	bl	80a2264 <_ZN4MQTT10readPacketEPh>
            if (len == 4) {
 80a25a0:	2804      	cmp	r0, #4
 80a25a2:	d1d1      	bne.n	80a2548 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x130>
                if (buffer[3] == CONN_ACCEPT) {
 80a25a4:	69e3      	ldr	r3, [r4, #28]
 80a25a6:	78de      	ldrb	r6, [r3, #3]
 80a25a8:	2e00      	cmp	r6, #0
 80a25aa:	d1cd      	bne.n	80a2548 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x130>
 80a25ac:	f000 ffca 	bl	80a3544 <HAL_Timer_Get_Milli_Seconds>
                    return true;
 80a25b0:	2501      	movs	r5, #1
                    lastInActivity = millis();
 80a25b2:	62a0      	str	r0, [r4, #40]	; 0x28
                    pingOutstanding = false;
 80a25b4:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
}
 80a25b8:	4628      	mov	r0, r5
 80a25ba:	b006      	add	sp, #24
 80a25bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return false;
 80a25c0:	2500      	movs	r5, #0
 80a25c2:	e7f9      	b.n	80a25b8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1a0>
 80a25c4:	080a8724 	.word	0x080a8724
 80a25c8:	080a872b 	.word	0x080a872b

080a25cc <_ZN4MQTT7connectEPKc>:
bool MQTT::connect(const char *id) {
 80a25cc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    return connect(id, NULL, NULL, 0, QOS0, 0, 0, true);
 80a25ce:	2301      	movs	r3, #1
 80a25d0:	2204      	movs	r2, #4
 80a25d2:	e9cd 3204 	strd	r3, r2, [sp, #16]
 80a25d6:	2300      	movs	r3, #0
 80a25d8:	461a      	mov	r2, r3
 80a25da:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80a25de:	e9cd 3300 	strd	r3, r3, [sp]
 80a25e2:	f7ff ff19 	bl	80a2418 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>
}
 80a25e6:	b007      	add	sp, #28
 80a25e8:	f85d fb04 	ldr.w	pc, [sp], #4

080a25ec <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
 80a25ec:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a25f0:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 80a25f4:	4604      	mov	r4, r0
 80a25f6:	468b      	mov	fp, r1
 80a25f8:	4616      	mov	r6, r2
 80a25fa:	461f      	mov	r7, r3
 80a25fc:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
 80a2600:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
 80a2604:	f89d 9030 	ldrb.w	r9, [sp, #48]	; 0x30
    if (isConnected()) {
 80a2608:	f7ff fef7 	bl	80a23fa <_ZN4MQTT11isConnectedEv>
 80a260c:	2800      	cmp	r0, #0
 80a260e:	d050      	beq.n	80a26b2 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xc6>
        memset(buffer, 0, this->maxpacketsize);
 80a2610:	2100      	movs	r1, #0
 80a2612:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54
 80a2616:	69e0      	ldr	r0, [r4, #28]
 80a2618:	f004 fb0a 	bl	80a6c30 <memset>
        length = writeString(topic, buffer, length);
 80a261c:	2305      	movs	r3, #5
 80a261e:	4659      	mov	r1, fp
 80a2620:	4620      	mov	r0, r4
 80a2622:	69e2      	ldr	r2, [r4, #28]
 80a2624:	f7ff fecf 	bl	80a23c6 <_ZN4MQTT11writeStringEPKcPht>
        if (qos == QOS2 || qos == QOS1) {
 80a2628:	1e6b      	subs	r3, r5, #1
 80a262a:	2b01      	cmp	r3, #1
 80a262c:	d815      	bhi.n	80a265a <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x6e>
            nextMsgId += 1;
 80a262e:	8c23      	ldrh	r3, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
 80a2630:	69e2      	ldr	r2, [r4, #28]
            nextMsgId += 1;
 80a2632:	3301      	adds	r3, #1
 80a2634:	b29b      	uxth	r3, r3
 80a2636:	8423      	strh	r3, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
 80a2638:	121b      	asrs	r3, r3, #8
 80a263a:	5413      	strb	r3, [r2, r0]
 80a263c:	1c41      	adds	r1, r0, #1
            buffer[length++] = (nextMsgId & 0xFF);
 80a263e:	69e3      	ldr	r3, [r4, #28]
 80a2640:	8c22      	ldrh	r2, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
 80a2642:	b289      	uxth	r1, r1
            buffer[length++] = (nextMsgId & 0xFF);
 80a2644:	3002      	adds	r0, #2
 80a2646:	b280      	uxth	r0, r0
 80a2648:	545a      	strb	r2, [r3, r1]
            if (messageid != NULL)
 80a264a:	f1b8 0f00 	cmp.w	r8, #0
 80a264e:	d004      	beq.n	80a265a <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x6e>
                *messageid = nextMsgId++;
 80a2650:	8c23      	ldrh	r3, [r4, #32]
 80a2652:	1c5a      	adds	r2, r3, #1
 80a2654:	8422      	strh	r2, [r4, #32]
 80a2656:	f8a8 3000 	strh.w	r3, [r8]
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
 80a265a:	2100      	movs	r1, #0
 80a265c:	180b      	adds	r3, r1, r0
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
 80a265e:	428f      	cmp	r7, r1
 80a2660:	69e2      	ldr	r2, [r4, #28]
 80a2662:	b29b      	uxth	r3, r3
 80a2664:	d90a      	bls.n	80a267c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x90>
 80a2666:	f8b4 c054 	ldrh.w	ip, [r4, #84]	; 0x54
 80a266a:	459c      	cmp	ip, r3
 80a266c:	d906      	bls.n	80a267c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x90>
            buffer[length++] = payload[i];
 80a266e:	f816 c001 	ldrb.w	ip, [r6, r1]
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
 80a2672:	3101      	adds	r1, #1
            buffer[length++] = payload[i];
 80a2674:	f802 c003 	strb.w	ip, [r2, r3]
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
 80a2678:	b289      	uxth	r1, r1
 80a267a:	e7ef      	b.n	80a265c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x70>
            header |= 1;
 80a267c:	f1ba 0f00 	cmp.w	sl, #0
 80a2680:	bf0c      	ite	eq
 80a2682:	2130      	moveq	r1, #48	; 0x30
 80a2684:	2131      	movne	r1, #49	; 0x31
        if (dup) {
 80a2686:	f1b9 0f00 	cmp.w	r9, #0
 80a268a:	d001      	beq.n	80a2690 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xa4>
            header |= DUP_FLAG_ON_MASK;
 80a268c:	f041 0108 	orr.w	r1, r1, #8
        if (qos == QOS2)
 80a2690:	2d02      	cmp	r5, #2
 80a2692:	d109      	bne.n	80a26a8 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xbc>
            header |= MQTTQOS2_HEADER_MASK;
 80a2694:	f041 0104 	orr.w	r1, r1, #4
        return write(header, buffer, length-5);
 80a2698:	4620      	mov	r0, r4
 80a269a:	3b05      	subs	r3, #5
 80a269c:	b29b      	uxth	r3, r3
}
 80a269e:	b001      	add	sp, #4
 80a26a0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        return write(header, buffer, length-5);
 80a26a4:	f7ff be3e 	b.w	80a2324 <_ZN4MQTT5writeEhPht>
        else if (qos == QOS1)
 80a26a8:	2d01      	cmp	r5, #1
            header |= MQTTQOS1_HEADER_MASK;
 80a26aa:	bf08      	it	eq
 80a26ac:	f041 0102 	orreq.w	r1, r1, #2
 80a26b0:	e7f2      	b.n	80a2698 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xac>
}
 80a26b2:	b001      	add	sp, #4
 80a26b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a26b8 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
 80a26b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return publish(topic, payload, plength, retain, qos, false, messageid);
 80a26ba:	9c08      	ldr	r4, [sp, #32]
 80a26bc:	9403      	str	r4, [sp, #12]
 80a26be:	2400      	movs	r4, #0
 80a26c0:	9402      	str	r4, [sp, #8]
 80a26c2:	f89d 401c 	ldrb.w	r4, [sp, #28]
 80a26c6:	9401      	str	r4, [sp, #4]
 80a26c8:	f89d 4018 	ldrb.w	r4, [sp, #24]
 80a26cc:	9400      	str	r4, [sp, #0]
 80a26ce:	f7ff ff8d 	bl	80a25ec <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>
}
 80a26d2:	b004      	add	sp, #16
 80a26d4:	bd10      	pop	{r4, pc}

080a26d6 <_ZN4MQTT7publishEPKcS1_>:
bool MQTT::publish(const char* topic, const char* payload) {
 80a26d6:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80a26d8:	4605      	mov	r5, r0
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
 80a26da:	4610      	mov	r0, r2
bool MQTT::publish(const char* topic, const char* payload) {
 80a26dc:	4614      	mov	r4, r2
 80a26de:	460e      	mov	r6, r1
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
 80a26e0:	f005 f846 	bl	80a7770 <strlen>
 80a26e4:	2200      	movs	r2, #0
 80a26e6:	4603      	mov	r3, r0
 80a26e8:	e9cd 2201 	strd	r2, r2, [sp, #4]
 80a26ec:	9200      	str	r2, [sp, #0]
 80a26ee:	4631      	mov	r1, r6
 80a26f0:	4622      	mov	r2, r4
 80a26f2:	4628      	mov	r0, r5
 80a26f4:	f7ff ffe0 	bl	80a26b8 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>
}
 80a26f8:	b004      	add	sp, #16
 80a26fa:	bd70      	pop	{r4, r5, r6, pc}

080a26fc <_ZN4MQTT14publishReleaseEt>:
bool MQTT::publishRelease(uint16_t messageid) {
 80a26fc:	b538      	push	{r3, r4, r5, lr}
 80a26fe:	4604      	mov	r4, r0
 80a2700:	460d      	mov	r5, r1
    if (isConnected()) {
 80a2702:	f7ff fe7a 	bl	80a23fa <_ZN4MQTT11isConnectedEv>
 80a2706:	b190      	cbz	r0, 80a272e <_ZN4MQTT14publishReleaseEt+0x32>
        buffer[length++] = MQTTPUBREL | MQTTQOS1_HEADER_MASK;
 80a2708:	2262      	movs	r2, #98	; 0x62
 80a270a:	69e3      	ldr	r3, [r4, #28]
        return _client.write(buffer, length);
 80a270c:	4620      	mov	r0, r4
        buffer[length++] = MQTTPUBREL | MQTTQOS1_HEADER_MASK;
 80a270e:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
 80a2710:	2202      	movs	r2, #2
 80a2712:	69e3      	ldr	r3, [r4, #28]
 80a2714:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
 80a2716:	69e3      	ldr	r3, [r4, #28]
 80a2718:	122a      	asrs	r2, r5, #8
 80a271a:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
 80a271c:	69e3      	ldr	r3, [r4, #28]
        return _client.write(buffer, length);
 80a271e:	2204      	movs	r2, #4
        buffer[length++] = (messageid & 0xFF);
 80a2720:	70dd      	strb	r5, [r3, #3]
        return _client.write(buffer, length);
 80a2722:	69e1      	ldr	r1, [r4, #28]
 80a2724:	f001 fa6e 	bl	80a3c04 <_ZN9TCPClient5writeEPKhj>
 80a2728:	3800      	subs	r0, #0
 80a272a:	bf18      	it	ne
 80a272c:	2001      	movne	r0, #1
}
 80a272e:	bd38      	pop	{r3, r4, r5, pc}

080a2730 <_ZN4MQTT15publishCompleteEt>:
bool MQTT::publishComplete(uint16_t messageid) {
 80a2730:	b538      	push	{r3, r4, r5, lr}
 80a2732:	4604      	mov	r4, r0
 80a2734:	460d      	mov	r5, r1
    if (isConnected()) {
 80a2736:	f7ff fe60 	bl	80a23fa <_ZN4MQTT11isConnectedEv>
 80a273a:	b190      	cbz	r0, 80a2762 <_ZN4MQTT15publishCompleteEt+0x32>
        buffer[length++] = MQTTPUBCOMP | MQTTQOS1_HEADER_MASK;
 80a273c:	2272      	movs	r2, #114	; 0x72
 80a273e:	69e3      	ldr	r3, [r4, #28]
        return _client.write(buffer, length);
 80a2740:	4620      	mov	r0, r4
        buffer[length++] = MQTTPUBCOMP | MQTTQOS1_HEADER_MASK;
 80a2742:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
 80a2744:	2202      	movs	r2, #2
 80a2746:	69e3      	ldr	r3, [r4, #28]
 80a2748:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
 80a274a:	69e3      	ldr	r3, [r4, #28]
 80a274c:	122a      	asrs	r2, r5, #8
 80a274e:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
 80a2750:	69e3      	ldr	r3, [r4, #28]
        return _client.write(buffer, length);
 80a2752:	2204      	movs	r2, #4
        buffer[length++] = (messageid & 0xFF);
 80a2754:	70dd      	strb	r5, [r3, #3]
        return _client.write(buffer, length);
 80a2756:	69e1      	ldr	r1, [r4, #28]
 80a2758:	f001 fa54 	bl	80a3c04 <_ZN9TCPClient5writeEPKhj>
 80a275c:	3800      	subs	r0, #0
 80a275e:	bf18      	it	ne
 80a2760:	2001      	movne	r0, #1
}
 80a2762:	bd38      	pop	{r3, r4, r5, pc}

080a2764 <_ZN4MQTT4loopEv>:
bool MQTT::loop() {
 80a2764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a2768:	b087      	sub	sp, #28
 80a276a:	af00      	add	r7, sp, #0
 80a276c:	4604      	mov	r4, r0
    if (isConnected()) {
 80a276e:	f7ff fe44 	bl	80a23fa <_ZN4MQTT11isConnectedEv>
 80a2772:	4681      	mov	r9, r0
 80a2774:	b1b0      	cbz	r0, 80a27a4 <_ZN4MQTT4loopEv+0x40>
 80a2776:	f000 fee5 	bl	80a3544 <HAL_Timer_Get_Milli_Seconds>
        if ((t - lastInActivity > this->keepalive*1000UL) || (t - lastOutActivity > this->keepalive*1000UL)) {
 80a277a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a277e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80a2780:	4606      	mov	r6, r0
 80a2782:	4353      	muls	r3, r2
 80a2784:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80a2786:	1a82      	subs	r2, r0, r2
 80a2788:	429a      	cmp	r2, r3
 80a278a:	d803      	bhi.n	80a2794 <_ZN4MQTT4loopEv+0x30>
 80a278c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80a278e:	1a82      	subs	r2, r0, r2
 80a2790:	4293      	cmp	r3, r2
 80a2792:	d21b      	bcs.n	80a27cc <_ZN4MQTT4loopEv+0x68>
            if (pingOutstanding) {
 80a2794:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80a2798:	b14b      	cbz	r3, 80a27ae <_ZN4MQTT4loopEv+0x4a>
                _client.stop();
 80a279a:	4620      	mov	r0, r4
 80a279c:	f001 fba6 	bl	80a3eec <_ZN9TCPClient4stopEv>
                return false;
 80a27a0:	f04f 0900 	mov.w	r9, #0
}
 80a27a4:	4648      	mov	r0, r9
 80a27a6:	371c      	adds	r7, #28
 80a27a8:	46bd      	mov	sp, r7
 80a27aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                buffer[0] = MQTTPINGREQ;
 80a27ae:	21c0      	movs	r1, #192	; 0xc0
 80a27b0:	69e2      	ldr	r2, [r4, #28]
                _client.write(buffer,2);
 80a27b2:	4620      	mov	r0, r4
                buffer[0] = MQTTPINGREQ;
 80a27b4:	7011      	strb	r1, [r2, #0]
                buffer[1] = 0;
 80a27b6:	69e2      	ldr	r2, [r4, #28]
 80a27b8:	7053      	strb	r3, [r2, #1]
                _client.write(buffer,2);
 80a27ba:	69e1      	ldr	r1, [r4, #28]
 80a27bc:	2202      	movs	r2, #2
 80a27be:	f001 fa21 	bl	80a3c04 <_ZN9TCPClient5writeEPKhj>
                pingOutstanding = true;
 80a27c2:	2301      	movs	r3, #1
                lastInActivity = t;
 80a27c4:	e9c4 6609 	strd	r6, r6, [r4, #36]	; 0x24
                pingOutstanding = true;
 80a27c8:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
        if (_client.available()) {
 80a27cc:	4620      	mov	r0, r4
 80a27ce:	f001 fb53 	bl	80a3e78 <_ZN9TCPClient9availableEv>
 80a27d2:	2800      	cmp	r0, #0
 80a27d4:	d0e6      	beq.n	80a27a4 <_ZN4MQTT4loopEv+0x40>
            uint16_t len = readPacket(&llen);
 80a27d6:	4620      	mov	r0, r4
 80a27d8:	f107 0117 	add.w	r1, r7, #23
 80a27dc:	f7ff fd42 	bl	80a2264 <_ZN4MQTT10readPacketEPh>
            if (len > 0) {
 80a27e0:	4683      	mov	fp, r0
 80a27e2:	2800      	cmp	r0, #0
 80a27e4:	d0de      	beq.n	80a27a4 <_ZN4MQTT4loopEv+0x40>
                uint8_t type = buffer[0]&0xF0;
 80a27e6:	69e3      	ldr	r3, [r4, #28]
                lastInActivity = t;
 80a27e8:	62a6      	str	r6, [r4, #40]	; 0x28
                uint8_t type = buffer[0]&0xF0;
 80a27ea:	7819      	ldrb	r1, [r3, #0]
 80a27ec:	f001 02f0 	and.w	r2, r1, #240	; 0xf0
                if (type == MQTTPUBLISH) {
 80a27f0:	2a30      	cmp	r2, #48	; 0x30
 80a27f2:	d17d      	bne.n	80a28f0 <_ZN4MQTT4loopEv+0x18c>
                    if (callback) {
 80a27f4:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80a27f8:	f1ba 0f00 	cmp.w	sl, #0
 80a27fc:	d0d2      	beq.n	80a27a4 <_ZN4MQTT4loopEv+0x40>
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
 80a27fe:	f897 c017 	ldrb.w	ip, [r7, #23]
                        }
 80a2802:	f8c7 d000 	str.w	sp, [r7]
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
 80a2806:	eb03 020c 	add.w	r2, r3, ip
 80a280a:	7855      	ldrb	r5, [r2, #1]
 80a280c:	7891      	ldrb	r1, [r2, #2]
 80a280e:	eb01 2105 	add.w	r1, r1, r5, lsl #8
 80a2812:	b28d      	uxth	r5, r1
                        char topic[tl+1];
 80a2814:	4669      	mov	r1, sp
 80a2816:	f105 0208 	add.w	r2, r5, #8
 80a281a:	08d2      	lsrs	r2, r2, #3
 80a281c:	eba1 02c2 	sub.w	r2, r1, r2, lsl #3
 80a2820:	4695      	mov	sp, r2
 80a2822:	4668      	mov	r0, sp
                        for (uint16_t i=0;i<tl;i++) {
 80a2824:	f10c 0203 	add.w	r2, ip, #3
 80a2828:	60fa      	str	r2, [r7, #12]
 80a282a:	eb03 0e02 	add.w	lr, r3, r2
 80a282e:	eb0d 0205 	add.w	r2, sp, r5
 80a2832:	f8c7 d008 	str.w	sp, [r7, #8]
 80a2836:	607a      	str	r2, [r7, #4]
 80a2838:	e9d7 2101 	ldrd	r2, r1, [r7, #4]
 80a283c:	428a      	cmp	r2, r1
 80a283e:	d006      	beq.n	80a284e <_ZN4MQTT4loopEv+0xea>
                            topic[i] = buffer[llen+3+i];
 80a2840:	460a      	mov	r2, r1
 80a2842:	f81e 8b01 	ldrb.w	r8, [lr], #1
 80a2846:	f802 8b01 	strb.w	r8, [r2], #1
 80a284a:	60ba      	str	r2, [r7, #8]
                        for (uint16_t i=0;i<tl;i++) {
 80a284c:	e7f4      	b.n	80a2838 <_ZN4MQTT4loopEv+0xd4>
                        topic[tl] = 0;
 80a284e:	2200      	movs	r2, #0
 80a2850:	5542      	strb	r2, [r0, r5]
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
 80a2852:	f893 8000 	ldrb.w	r8, [r3]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
 80a2856:	68f9      	ldr	r1, [r7, #12]
 80a2858:	f008 0806 	and.w	r8, r8, #6
 80a285c:	ebab 020c 	sub.w	r2, fp, ip
 80a2860:	3a03      	subs	r2, #3
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
 80a2862:	f1b8 0f02 	cmp.w	r8, #2
 80a2866:	eba2 0205 	sub.w	r2, r2, r5
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
 80a286a:	4429      	add	r1, r5
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
 80a286c:	d124      	bne.n	80a28b8 <_ZN4MQTT4loopEv+0x154>
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
 80a286e:	f813 e001 	ldrb.w	lr, [r3, r1]
 80a2872:	4419      	add	r1, r3
 80a2874:	f891 b001 	ldrb.w	fp, [r1, #1]
                            payload = buffer+llen+3+tl+2;
 80a2878:	f10c 0105 	add.w	r1, ip, #5
 80a287c:	4429      	add	r1, r5
                            callback(topic,payload,len-llen-3-tl-2);
 80a287e:	3a02      	subs	r2, #2
 80a2880:	4419      	add	r1, r3
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
 80a2882:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
                            callback(topic,payload,len-llen-3-tl-2);
 80a2886:	47d0      	blx	sl
                            buffer[0] = MQTTPUBACK; // respond with PUBACK
 80a2888:	2240      	movs	r2, #64	; 0x40
 80a288a:	69e3      	ldr	r3, [r4, #28]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
 80a288c:	fa1f fb8b 	uxth.w	fp, fp
                            buffer[0] = MQTTPUBACK; // respond with PUBACK
 80a2890:	701a      	strb	r2, [r3, #0]
                            buffer[1] = 2;
 80a2892:	69e3      	ldr	r3, [r4, #28]
 80a2894:	f883 8001 	strb.w	r8, [r3, #1]
                            buffer[2] = (msgId >> 8);
 80a2898:	69e3      	ldr	r3, [r4, #28]
 80a289a:	ea4f 222b 	mov.w	r2, fp, asr #8
 80a289e:	709a      	strb	r2, [r3, #2]
                            buffer[3] = (msgId & 0xFF);
 80a28a0:	69e3      	ldr	r3, [r4, #28]
                            _client.write(buffer,4);
 80a28a2:	2204      	movs	r2, #4
                            buffer[3] = (msgId & 0xFF);
 80a28a4:	f883 b003 	strb.w	fp, [r3, #3]
                            _client.write(buffer,4);
 80a28a8:	4620      	mov	r0, r4
 80a28aa:	69e1      	ldr	r1, [r4, #28]
 80a28ac:	f001 f9aa 	bl	80a3c04 <_ZN9TCPClient5writeEPKhj>
                            lastOutActivity = t;
 80a28b0:	6266      	str	r6, [r4, #36]	; 0x24
 80a28b2:	f8d7 d000 	ldr.w	sp, [r7]
 80a28b6:	e775      	b.n	80a27a4 <_ZN4MQTT4loopEv+0x40>
        						    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
 80a28b8:	f1b8 0f04 	cmp.w	r8, #4
 80a28bc:	d115      	bne.n	80a28ea <_ZN4MQTT4loopEv+0x186>
							              msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
 80a28be:	f813 e001 	ldrb.w	lr, [r3, r1]
 80a28c2:	4419      	add	r1, r3
 80a28c4:	f891 b001 	ldrb.w	fp, [r1, #1]
							              payload = buffer + llen + 3 + tl + 2;
 80a28c8:	f10c 0105 	add.w	r1, ip, #5
 80a28cc:	4429      	add	r1, r5
							              callback(topic, payload, len - llen - 3 - tl - 2);
 80a28ce:	3a02      	subs	r2, #2
 80a28d0:	4419      	add	r1, r3
							              msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
 80a28d2:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
							              callback(topic, payload, len - llen - 3 - tl - 2);
 80a28d6:	47d0      	blx	sl
              							buffer[0] = MQTTPUBREC; // respond with PUBREC
 80a28d8:	2250      	movs	r2, #80	; 0x50
 80a28da:	69e3      	ldr	r3, [r4, #28]
							              msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
 80a28dc:	fa1f fb8b 	uxth.w	fp, fp
              							buffer[0] = MQTTPUBREC; // respond with PUBREC
 80a28e0:	701a      	strb	r2, [r3, #0]
              							buffer[1] = 2;
 80a28e2:	2202      	movs	r2, #2
 80a28e4:	69e3      	ldr	r3, [r4, #28]
 80a28e6:	705a      	strb	r2, [r3, #1]
              							buffer[2] = (msgId >> 8);
 80a28e8:	e7d6      	b.n	80a2898 <_ZN4MQTT4loopEv+0x134>
                            callback(topic,payload,len-llen-3-tl);
 80a28ea:	4419      	add	r1, r3
 80a28ec:	47d0      	blx	sl
 80a28ee:	e7e0      	b.n	80a28b2 <_ZN4MQTT4loopEv+0x14e>
                } else if (type == MQTTPUBREC) {
 80a28f0:	2a50      	cmp	r2, #80	; 0x50
 80a28f2:	d108      	bne.n	80a2906 <_ZN4MQTT4loopEv+0x1a2>
                    msgId = (buffer[2] << 8) + buffer[3];
 80a28f4:	789a      	ldrb	r2, [r3, #2]
 80a28f6:	78d9      	ldrb	r1, [r3, #3]
                    this->publishRelease(msgId);
 80a28f8:	4620      	mov	r0, r4
                    msgId = (buffer[2] << 8) + buffer[3];
 80a28fa:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                    this->publishRelease(msgId);
 80a28fe:	b289      	uxth	r1, r1
 80a2900:	f7ff fefc 	bl	80a26fc <_ZN4MQTT14publishReleaseEt>
 80a2904:	e74e      	b.n	80a27a4 <_ZN4MQTT4loopEv+0x40>
                } else if (type == MQTTPUBACK) {
 80a2906:	2a40      	cmp	r2, #64	; 0x40
 80a2908:	d112      	bne.n	80a2930 <_ZN4MQTT4loopEv+0x1cc>
                  if (qoscallback) {
 80a290a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80a290c:	2a00      	cmp	r2, #0
 80a290e:	f43f af49 	beq.w	80a27a4 <_ZN4MQTT4loopEv+0x40>
                      if (len == 4 && (buffer[0]&0x06) == MQTTQOS0_HEADER_MASK) {
 80a2912:	f1bb 0f04 	cmp.w	fp, #4
 80a2916:	f47f af45 	bne.w	80a27a4 <_ZN4MQTT4loopEv+0x40>
 80a291a:	f011 0f06 	tst.w	r1, #6
 80a291e:	f47f af41 	bne.w	80a27a4 <_ZN4MQTT4loopEv+0x40>
                          msgId = (buffer[2]<<8)+buffer[3];
 80a2922:	7899      	ldrb	r1, [r3, #2]
 80a2924:	78d8      	ldrb	r0, [r3, #3]
 80a2926:	eb00 2001 	add.w	r0, r0, r1, lsl #8
                          this->qoscallback(msgId);
 80a292a:	b280      	uxth	r0, r0
 80a292c:	4790      	blx	r2
 80a292e:	e739      	b.n	80a27a4 <_ZN4MQTT4loopEv+0x40>
                } else if (type == MQTTPUBREL) {
 80a2930:	2a60      	cmp	r2, #96	; 0x60
 80a2932:	d108      	bne.n	80a2946 <_ZN4MQTT4loopEv+0x1e2>
                  msgId = (buffer[2] << 8) + buffer[3];
 80a2934:	789a      	ldrb	r2, [r3, #2]
 80a2936:	78d9      	ldrb	r1, [r3, #3]
                  this->publishComplete(msgId);
 80a2938:	4620      	mov	r0, r4
                  msgId = (buffer[2] << 8) + buffer[3];
 80a293a:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                  this->publishComplete(msgId);
 80a293e:	b289      	uxth	r1, r1
 80a2940:	f7ff fef6 	bl	80a2730 <_ZN4MQTT15publishCompleteEt>
 80a2944:	e72e      	b.n	80a27a4 <_ZN4MQTT4loopEv+0x40>
                } else if (type == MQTTPUBCOMP) {
 80a2946:	2a70      	cmp	r2, #112	; 0x70
 80a2948:	d0df      	beq.n	80a290a <_ZN4MQTT4loopEv+0x1a6>
                } else if (type == MQTTSUBACK) {
 80a294a:	2a90      	cmp	r2, #144	; 0x90
 80a294c:	f43f af2a 	beq.w	80a27a4 <_ZN4MQTT4loopEv+0x40>
                } else if (type == MQTTPINGREQ) {
 80a2950:	2ac0      	cmp	r2, #192	; 0xc0
 80a2952:	d10a      	bne.n	80a296a <_ZN4MQTT4loopEv+0x206>
                    buffer[0] = MQTTPINGRESP;
 80a2954:	22d0      	movs	r2, #208	; 0xd0
 80a2956:	701a      	strb	r2, [r3, #0]
                    buffer[1] = 0;
 80a2958:	2200      	movs	r2, #0
 80a295a:	69e3      	ldr	r3, [r4, #28]
                    _client.write(buffer,2);
 80a295c:	4620      	mov	r0, r4
                    buffer[1] = 0;
 80a295e:	705a      	strb	r2, [r3, #1]
                    _client.write(buffer,2);
 80a2960:	69e1      	ldr	r1, [r4, #28]
 80a2962:	2202      	movs	r2, #2
 80a2964:	f001 f94e 	bl	80a3c04 <_ZN9TCPClient5writeEPKhj>
 80a2968:	e71c      	b.n	80a27a4 <_ZN4MQTT4loopEv+0x40>
                } else if (type == MQTTPINGRESP) {
 80a296a:	2ad0      	cmp	r2, #208	; 0xd0
                    pingOutstanding = false;
 80a296c:	bf04      	itt	eq
 80a296e:	2300      	moveq	r3, #0
 80a2970:	f884 302c 	strbeq.w	r3, [r4, #44]	; 0x2c
 80a2974:	e716      	b.n	80a27a4 <_ZN4MQTT4loopEv+0x40>

080a2976 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>:
bool MQTT::subscribe(const char* topic, EMQTT_QOS qos) {
 80a2976:	b570      	push	{r4, r5, r6, lr}
 80a2978:	4604      	mov	r4, r0
 80a297a:	460e      	mov	r6, r1
 80a297c:	4615      	mov	r5, r2
    if (isConnected()) {
 80a297e:	f7ff fd3c 	bl	80a23fa <_ZN4MQTT11isConnectedEv>
 80a2982:	b1f0      	cbz	r0, 80a29c2 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x4c>
        nextMsgId++;
 80a2984:	8c23      	ldrh	r3, [r4, #32]
 80a2986:	3301      	adds	r3, #1
 80a2988:	b29b      	uxth	r3, r3
        if (nextMsgId == 0) {
 80a298a:	b1c3      	cbz	r3, 80a29be <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x48>
            nextMsgId = 1;
 80a298c:	8423      	strh	r3, [r4, #32]
        buffer[length++] = (nextMsgId >> 8);
 80a298e:	8c23      	ldrh	r3, [r4, #32]
 80a2990:	69e2      	ldr	r2, [r4, #28]
 80a2992:	121b      	asrs	r3, r3, #8
 80a2994:	7153      	strb	r3, [r2, #5]
        buffer[length++] = (nextMsgId & 0xFF);
 80a2996:	69e3      	ldr	r3, [r4, #28]
 80a2998:	8c22      	ldrh	r2, [r4, #32]
        length = writeString(topic, buffer,length);
 80a299a:	4631      	mov	r1, r6
        buffer[length++] = (nextMsgId & 0xFF);
 80a299c:	719a      	strb	r2, [r3, #6]
        length = writeString(topic, buffer,length);
 80a299e:	69e2      	ldr	r2, [r4, #28]
 80a29a0:	2307      	movs	r3, #7
 80a29a2:	4620      	mov	r0, r4
 80a29a4:	f7ff fd0f 	bl	80a23c6 <_ZN4MQTT11writeStringEPKcPht>
        buffer[length++] = qos;
 80a29a8:	69e3      	ldr	r3, [r4, #28]
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
 80a29aa:	2182      	movs	r1, #130	; 0x82
        buffer[length++] = qos;
 80a29ac:	541d      	strb	r5, [r3, r0]
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
 80a29ae:	3804      	subs	r0, #4
 80a29b0:	69e2      	ldr	r2, [r4, #28]
 80a29b2:	b283      	uxth	r3, r0
 80a29b4:	4620      	mov	r0, r4
}
 80a29b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
 80a29ba:	f7ff bcb3 	b.w	80a2324 <_ZN4MQTT5writeEhPht>
            nextMsgId = 1;
 80a29be:	2301      	movs	r3, #1
 80a29c0:	e7e4      	b.n	80a298c <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x16>
}
 80a29c2:	bd70      	pop	{r4, r5, r6, pc}

080a29c4 <_ZN4MQTT9subscribeEPKc>:
    return subscribe(topic, QOS0);
 80a29c4:	2200      	movs	r2, #0
 80a29c6:	f7ff bfd6 	b.w	80a2976 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>
	...

080a29cc <_ZN4MQTTD1Ev>:
MQTT::~MQTT() {
 80a29cc:	b538      	push	{r3, r4, r5, lr}
 80a29ce:	4605      	mov	r5, r0
    if (isConnected()) {
 80a29d0:	f7ff fd13 	bl	80a23fa <_ZN4MQTT11isConnectedEv>
 80a29d4:	b110      	cbz	r0, 80a29dc <_ZN4MQTTD1Ev+0x10>
        disconnect();
 80a29d6:	4628      	mov	r0, r5
 80a29d8:	f7ff fce1 	bl	80a239e <_ZN4MQTT10disconnectEv>
    if (buffer != NULL)
 80a29dc:	69e8      	ldr	r0, [r5, #28]
 80a29de:	b108      	cbz	r0, 80a29e4 <_ZN4MQTTD1Ev+0x18>
      delete[] buffer;
 80a29e0:	f7fd fb61 	bl	80a00a6 <_ZdaPv>
MQTT::~MQTT() {
 80a29e4:	f105 0038 	add.w	r0, r5, #56	; 0x38
 80a29e8:	f001 fbd8 	bl	80a419c <_ZN6StringD1Ev>
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
 80a29ec:	4b0a      	ldr	r3, [pc, #40]	; (80a2a18 <_ZN4MQTTD1Ev+0x4c>)
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 80a29ee:	69ac      	ldr	r4, [r5, #24]
 80a29f0:	602b      	str	r3, [r5, #0]
 80a29f2:	b17c      	cbz	r4, 80a2a14 <_ZN4MQTTD1Ev+0x48>
      if (--_M_use_count == 0)
 80a29f4:	6863      	ldr	r3, [r4, #4]
 80a29f6:	3b01      	subs	r3, #1
 80a29f8:	6063      	str	r3, [r4, #4]
 80a29fa:	b95b      	cbnz	r3, 80a2a14 <_ZN4MQTTD1Ev+0x48>
          _M_dispose();
 80a29fc:	6823      	ldr	r3, [r4, #0]
 80a29fe:	4620      	mov	r0, r4
 80a2a00:	689b      	ldr	r3, [r3, #8]
 80a2a02:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a2a04:	68a3      	ldr	r3, [r4, #8]
 80a2a06:	3b01      	subs	r3, #1
 80a2a08:	60a3      	str	r3, [r4, #8]
 80a2a0a:	b91b      	cbnz	r3, 80a2a14 <_ZN4MQTTD1Ev+0x48>
            _M_destroy();
 80a2a0c:	6823      	ldr	r3, [r4, #0]
 80a2a0e:	4620      	mov	r0, r4
 80a2a10:	68db      	ldr	r3, [r3, #12]
 80a2a12:	4798      	blx	r3
}
 80a2a14:	4628      	mov	r0, r5
 80a2a16:	bd38      	pop	{r3, r4, r5, pc}
 80a2a18:	080a87c0 	.word	0x080a87c0

080a2a1c <_ZN10JsonBufferD1Ev>:


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {

}
JsonBuffer::~JsonBuffer() {
 80a2a1c:	b510      	push	{r4, lr}
 80a2a1e:	4b05      	ldr	r3, [pc, #20]	; (80a2a34 <_ZN10JsonBufferD1Ev+0x18>)
 80a2a20:	4604      	mov	r4, r0
 80a2a22:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && buffer) {
 80a2a24:	7c03      	ldrb	r3, [r0, #16]
 80a2a26:	b91b      	cbnz	r3, 80a2a30 <_ZN10JsonBufferD1Ev+0x14>
 80a2a28:	6840      	ldr	r0, [r0, #4]
 80a2a2a:	b108      	cbz	r0, 80a2a30 <_ZN10JsonBufferD1Ev+0x14>
		free(buffer);
 80a2a2c:	f000 ffd2 	bl	80a39d4 <free>
	}
}
 80a2a30:	4620      	mov	r0, r4
 80a2a32:	bd10      	pop	{r4, pc}
 80a2a34:	080a8750 	.word	0x080a8750

080a2a38 <_ZN10JsonBufferD0Ev>:
JsonBuffer::~JsonBuffer() {
 80a2a38:	b510      	push	{r4, lr}
 80a2a3a:	4604      	mov	r4, r0
}
 80a2a3c:	f7ff ffee 	bl	80a2a1c <_ZN10JsonBufferD1Ev>
 80a2a40:	4620      	mov	r0, r4
 80a2a42:	2114      	movs	r1, #20
 80a2a44:	f002 fd49 	bl	80a54da <_ZdlPvj>
 80a2a48:	4620      	mov	r0, r4
 80a2a4a:	bd10      	pop	{r4, pc}

080a2a4c <_ZN10JsonWriterD1Ev>:
//
JsonWriter::JsonWriter() : JsonBuffer(), floatPlaces(-1) {
	init();
}

JsonWriter::~JsonWriter() {
 80a2a4c:	b510      	push	{r4, lr}
 80a2a4e:	4604      	mov	r4, r0
 80a2a50:	4b02      	ldr	r3, [pc, #8]	; (80a2a5c <_ZN10JsonWriterD1Ev+0x10>)
 80a2a52:	6003      	str	r3, [r0, #0]
 80a2a54:	f7ff ffe2 	bl	80a2a1c <_ZN10JsonBufferD1Ev>

}
 80a2a58:	4620      	mov	r0, r4
 80a2a5a:	bd10      	pop	{r4, pc}
 80a2a5c:	080a8770 	.word	0x080a8770

080a2a60 <_ZN10JsonWriterD0Ev>:
JsonWriter::~JsonWriter() {
 80a2a60:	b510      	push	{r4, lr}
 80a2a62:	4604      	mov	r4, r0
}
 80a2a64:	f7ff fff2 	bl	80a2a4c <_ZN10JsonWriterD1Ev>
 80a2a68:	4620      	mov	r0, r4
 80a2a6a:	2130      	movs	r1, #48	; 0x30
 80a2a6c:	f002 fd35 	bl	80a54da <_ZdlPvj>
 80a2a70:	4620      	mov	r0, r4
 80a2a72:	bd10      	pop	{r4, pc}

080a2a74 <_ZN10JsonParserD1Ev>:
JsonParser::~JsonParser() {
 80a2a74:	b510      	push	{r4, lr}
 80a2a76:	4b07      	ldr	r3, [pc, #28]	; (80a2a94 <_ZN10JsonParserD1Ev+0x20>)
 80a2a78:	4604      	mov	r4, r0
 80a2a7a:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && tokens) {
 80a2a7c:	7c03      	ldrb	r3, [r0, #16]
 80a2a7e:	b91b      	cbnz	r3, 80a2a88 <_ZN10JsonParserD1Ev+0x14>
 80a2a80:	6940      	ldr	r0, [r0, #20]
 80a2a82:	b108      	cbz	r0, 80a2a88 <_ZN10JsonParserD1Ev+0x14>
		free(tokens);
 80a2a84:	f000 ffa6 	bl	80a39d4 <free>
JsonParser::~JsonParser() {
 80a2a88:	4620      	mov	r0, r4
 80a2a8a:	f7ff ffc7 	bl	80a2a1c <_ZN10JsonBufferD1Ev>
}
 80a2a8e:	4620      	mov	r0, r4
 80a2a90:	bd10      	pop	{r4, pc}
 80a2a92:	bf00      	nop
 80a2a94:	080a8760 	.word	0x080a8760

080a2a98 <_ZN10JsonParserD0Ev>:
JsonParser::~JsonParser() {
 80a2a98:	b510      	push	{r4, lr}
 80a2a9a:	4604      	mov	r4, r0
}
 80a2a9c:	f7ff ffea 	bl	80a2a74 <_ZN10JsonParserD1Ev>
 80a2aa0:	4620      	mov	r0, r4
 80a2aa2:	212c      	movs	r1, #44	; 0x2c
 80a2aa4:	f002 fd19 	bl	80a54da <_ZdlPvj>
 80a2aa8:	4620      	mov	r0, r4
 80a2aaa:	bd10      	pop	{r4, pc}

080a2aac <_ZN10JsonBufferC1Ev>:
JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {
 80a2aac:	4a03      	ldr	r2, [pc, #12]	; (80a2abc <_ZN10JsonBufferC1Ev+0x10>)
 80a2aae:	6002      	str	r2, [r0, #0]
 80a2ab0:	2200      	movs	r2, #0
 80a2ab2:	e9c0 2201 	strd	r2, r2, [r0, #4]
 80a2ab6:	60c2      	str	r2, [r0, #12]
 80a2ab8:	7402      	strb	r2, [r0, #16]
}
 80a2aba:	4770      	bx	lr
 80a2abc:	080a8750 	.word	0x080a8750

080a2ac0 <_ZN10JsonBuffer8allocateEj>:
bool JsonBuffer::allocate(size_t len) {
 80a2ac0:	b538      	push	{r3, r4, r5, lr}
	if (!staticBuffers) {
 80a2ac2:	7c03      	ldrb	r3, [r0, #16]
bool JsonBuffer::allocate(size_t len) {
 80a2ac4:	4604      	mov	r4, r0
 80a2ac6:	460d      	mov	r5, r1
	if (!staticBuffers) {
 80a2ac8:	b10b      	cbz	r3, 80a2ace <_ZN10JsonBuffer8allocateEj+0xe>
		return false;
 80a2aca:	2000      	movs	r0, #0
}
 80a2acc:	bd38      	pop	{r3, r4, r5, pc}
		if (buffer) {
 80a2ace:	6840      	ldr	r0, [r0, #4]
 80a2ad0:	b138      	cbz	r0, 80a2ae2 <_ZN10JsonBuffer8allocateEj+0x22>
			newBuffer = (char *) realloc(buffer, len);
 80a2ad2:	f000 ff87 	bl	80a39e4 <realloc>
		if (newBuffer) {
 80a2ad6:	2800      	cmp	r0, #0
 80a2ad8:	d0f7      	beq.n	80a2aca <_ZN10JsonBuffer8allocateEj+0xa>
			bufferLen = len;
 80a2ada:	e9c4 0501 	strd	r0, r5, [r4, #4]
			return true;
 80a2ade:	2001      	movs	r0, #1
 80a2ae0:	e7f4      	b.n	80a2acc <_ZN10JsonBuffer8allocateEj+0xc>
			newBuffer = (char *) malloc(len);
 80a2ae2:	4608      	mov	r0, r1
 80a2ae4:	f000 ff6e 	bl	80a39c4 <malloc>
 80a2ae8:	e7f5      	b.n	80a2ad6 <_ZN10JsonBuffer8allocateEj+0x16>

080a2aea <_ZN10JsonBuffer7addDataEPKcj>:
bool JsonBuffer::addData(const char *data, size_t dataLen) {
 80a2aea:	b570      	push	{r4, r5, r6, lr}
 80a2aec:	68c3      	ldr	r3, [r0, #12]
 80a2aee:	460e      	mov	r6, r1
 80a2af0:	18d1      	adds	r1, r2, r3
	if (!buffer || (offset + dataLen) > bufferLen) {
 80a2af2:	6843      	ldr	r3, [r0, #4]
bool JsonBuffer::addData(const char *data, size_t dataLen) {
 80a2af4:	4604      	mov	r4, r0
 80a2af6:	4615      	mov	r5, r2
	if (!buffer || (offset + dataLen) > bufferLen) {
 80a2af8:	b173      	cbz	r3, 80a2b18 <_ZN10JsonBuffer7addDataEPKcj+0x2e>
 80a2afa:	6883      	ldr	r3, [r0, #8]
 80a2afc:	428b      	cmp	r3, r1
 80a2afe:	d30b      	bcc.n	80a2b18 <_ZN10JsonBuffer7addDataEPKcj+0x2e>
	memcpy(&buffer[offset], data, dataLen);
 80a2b00:	6860      	ldr	r0, [r4, #4]
 80a2b02:	68e3      	ldr	r3, [r4, #12]
 80a2b04:	462a      	mov	r2, r5
 80a2b06:	4631      	mov	r1, r6
 80a2b08:	4418      	add	r0, r3
 80a2b0a:	f004 f883 	bl	80a6c14 <memcpy>
	return true;
 80a2b0e:	2001      	movs	r0, #1
	offset += dataLen;
 80a2b10:	68e2      	ldr	r2, [r4, #12]
 80a2b12:	442a      	add	r2, r5
 80a2b14:	60e2      	str	r2, [r4, #12]
}
 80a2b16:	bd70      	pop	{r4, r5, r6, pc}
		if (!allocate(offset + dataLen)) {
 80a2b18:	4620      	mov	r0, r4
 80a2b1a:	f7ff ffd1 	bl	80a2ac0 <_ZN10JsonBuffer8allocateEj>
 80a2b1e:	2800      	cmp	r0, #0
 80a2b20:	d1ee      	bne.n	80a2b00 <_ZN10JsonBuffer7addDataEPKcj+0x16>
 80a2b22:	e7f8      	b.n	80a2b16 <_ZN10JsonBuffer7addDataEPKcj+0x2c>

080a2b24 <_ZN10JsonBuffer5clearEv>:
	offset = 0;
 80a2b24:	2300      	movs	r3, #0
 80a2b26:	60c3      	str	r3, [r0, #12]
}
 80a2b28:	4770      	bx	lr
	...

080a2b2c <_ZN10JsonParserC1Ev>:
JsonParser::JsonParser() : JsonBuffer(), tokens(0), tokensEnd(0), maxTokens(0) {
 80a2b2c:	b508      	push	{r3, lr}
 80a2b2e:	4603      	mov	r3, r0
 80a2b30:	f7ff ffbc 	bl	80a2aac <_ZN10JsonBufferC1Ev>
 80a2b34:	4a03      	ldr	r2, [pc, #12]	; (80a2b44 <_ZN10JsonParserC1Ev+0x18>)
}
 80a2b36:	4618      	mov	r0, r3
JsonParser::JsonParser() : JsonBuffer(), tokens(0), tokensEnd(0), maxTokens(0) {
 80a2b38:	601a      	str	r2, [r3, #0]
 80a2b3a:	2200      	movs	r2, #0
 80a2b3c:	e9c3 2205 	strd	r2, r2, [r3, #20]
 80a2b40:	61da      	str	r2, [r3, #28]
}
 80a2b42:	bd08      	pop	{r3, pc}
 80a2b44:	080a8760 	.word	0x080a8760

080a2b48 <_ZNK10JsonParser14getOuterObjectEv>:
const JsonParserGeneratorRK::jsmntok_t *JsonParser::getOuterObject() const {
 80a2b48:	4603      	mov	r3, r0
	if (tokens < tokensEnd && tokens[0].type == JsonParserGeneratorRK::JSMN_OBJECT) {
 80a2b4a:	e9d3 0305 	ldrd	r0, r3, [r3, #20]
 80a2b4e:	4298      	cmp	r0, r3
 80a2b50:	d204      	bcs.n	80a2b5c <_ZNK10JsonParser14getOuterObjectEv+0x14>
 80a2b52:	7803      	ldrb	r3, [r0, #0]
 80a2b54:	2b01      	cmp	r3, #1
		return 0;
 80a2b56:	bf18      	it	ne
 80a2b58:	2000      	movne	r0, #0
 80a2b5a:	4770      	bx	lr
 80a2b5c:	2000      	movs	r0, #0
}
 80a2b5e:	4770      	bx	lr

080a2b60 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>:
bool JsonParser::skipObject(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&obj) const {
 80a2b60:	b570      	push	{r4, r5, r6, lr}
	int curObjectEnd = obj->end;
 80a2b62:	6813      	ldr	r3, [r2, #0]
 80a2b64:	689d      	ldr	r5, [r3, #8]
	while(++obj < tokensEnd && obj->end < container->end && obj->end <= curObjectEnd) {
 80a2b66:	6813      	ldr	r3, [r2, #0]
 80a2b68:	f103 0410 	add.w	r4, r3, #16
 80a2b6c:	6014      	str	r4, [r2, #0]
 80a2b6e:	6986      	ldr	r6, [r0, #24]
 80a2b70:	42b4      	cmp	r4, r6
 80a2b72:	d20a      	bcs.n	80a2b8a <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x2a>
 80a2b74:	699b      	ldr	r3, [r3, #24]
 80a2b76:	688c      	ldr	r4, [r1, #8]
 80a2b78:	42a3      	cmp	r3, r4
 80a2b7a:	da01      	bge.n	80a2b80 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x20>
 80a2b7c:	42ab      	cmp	r3, r5
 80a2b7e:	ddf2      	ble.n	80a2b66 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x6>
	if (obj >= tokensEnd || obj->end > container->end) {
 80a2b80:	42a3      	cmp	r3, r4
 80a2b82:	bfcc      	ite	gt
 80a2b84:	2000      	movgt	r0, #0
 80a2b86:	2001      	movle	r0, #1
 80a2b88:	e000      	b.n	80a2b8c <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x2c>
		return false;
 80a2b8a:	2000      	movs	r0, #0
}
 80a2b8c:	bd70      	pop	{r4, r5, r6, pc}

080a2b8e <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j>:
bool JsonParser::getKeyValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&key, const JsonParserGeneratorRK::jsmntok_t *&value, size_t desiredIndex) const {
 80a2b8e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80a2b92:	4605      	mov	r5, r0
 80a2b94:	4617      	mov	r7, r2
	size_t index = 0;
 80a2b96:	2600      	movs	r6, #0
bool JsonParser::getKeyValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&key, const JsonParserGeneratorRK::jsmntok_t *&value, size_t desiredIndex) const {
 80a2b98:	4698      	mov	r8, r3
 80a2b9a:	9c08      	ldr	r4, [sp, #32]
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
 80a2b9c:	f101 0310 	add.w	r3, r1, #16
 80a2ba0:	9301      	str	r3, [sp, #4]
	while(token < tokensEnd && token->end < container->end) {
 80a2ba2:	9801      	ldr	r0, [sp, #4]
 80a2ba4:	69ab      	ldr	r3, [r5, #24]
 80a2ba6:	4283      	cmp	r3, r0
 80a2ba8:	d91b      	bls.n	80a2be2 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x54>
 80a2baa:	6882      	ldr	r2, [r0, #8]
 80a2bac:	688b      	ldr	r3, [r1, #8]
 80a2bae:	429a      	cmp	r2, r3
 80a2bb0:	da17      	bge.n	80a2be2 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x54>
		if (desiredIndex == index) {
 80a2bb2:	42a6      	cmp	r6, r4
 80a2bb4:	d10b      	bne.n	80a2bce <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x40>
			key = token;
 80a2bb6:	6038      	str	r0, [r7, #0]
			if (skipObject(container, token)) {
 80a2bb8:	aa01      	add	r2, sp, #4
 80a2bba:	4628      	mov	r0, r5
 80a2bbc:	f7ff ffd0 	bl	80a2b60 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
 80a2bc0:	b128      	cbz	r0, 80a2bce <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x40>
				value = token;
 80a2bc2:	9b01      	ldr	r3, [sp, #4]
 80a2bc4:	f8c8 3000 	str.w	r3, [r8]
}
 80a2bc8:	b002      	add	sp, #8
 80a2bca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		skipObject(container, token);
 80a2bce:	aa01      	add	r2, sp, #4
 80a2bd0:	4628      	mov	r0, r5
 80a2bd2:	f7ff ffc5 	bl	80a2b60 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
		skipObject(container, token);
 80a2bd6:	4628      	mov	r0, r5
 80a2bd8:	aa01      	add	r2, sp, #4
		index++;
 80a2bda:	3601      	adds	r6, #1
		skipObject(container, token);
 80a2bdc:	f7ff ffc0 	bl	80a2b60 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
	while(token < tokensEnd && token->end < container->end) {
 80a2be0:	e7df      	b.n	80a2ba2 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x14>
	return false;
 80a2be2:	2000      	movs	r0, #0
 80a2be4:	e7f0      	b.n	80a2bc8 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x3a>

080a2be6 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj>:
void JsonParser::copyTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, char *dst, size_t dstLen) const {
 80a2be6:	b5f0      	push	{r4, r5, r6, r7, lr}
	for(ii = 0; ii < (token->end - token->start) && ii < ((int)dstLen - 1); ii++) {
 80a2be8:	2400      	movs	r4, #0
 80a2bea:	3b01      	subs	r3, #1
 80a2bec:	e9d1 7601 	ldrd	r7, r6, [r1, #4]
 80a2bf0:	1bf6      	subs	r6, r6, r7
 80a2bf2:	42a6      	cmp	r6, r4
 80a2bf4:	dd08      	ble.n	80a2c08 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj+0x22>
 80a2bf6:	42a3      	cmp	r3, r4
 80a2bf8:	dd06      	ble.n	80a2c08 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj+0x22>
		dst[ii] = buffer[token->start + ii];
 80a2bfa:	6845      	ldr	r5, [r0, #4]
 80a2bfc:	443d      	add	r5, r7
 80a2bfe:	5d2d      	ldrb	r5, [r5, r4]
	for(ii = 0; ii < (token->end - token->start) && ii < ((int)dstLen - 1); ii++) {
 80a2c00:	3401      	adds	r4, #1
		dst[ii] = buffer[token->start + ii];
 80a2c02:	f802 5b01 	strb.w	r5, [r2], #1
	for(ii = 0; ii < (token->end - token->start) && ii < ((int)dstLen - 1); ii++) {
 80a2c06:	e7f1      	b.n	80a2bec <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj+0x6>
	dst[ii] = 0;
 80a2c08:	2300      	movs	r3, #0
 80a2c0a:	7013      	strb	r3, [r2, #0]
}
 80a2c0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080a2c10 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERi>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, int &result) const {
 80a2c10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80a2c12:	4614      	mov	r4, r2
	copyTokenValue(token, tmp, sizeof(tmp));
 80a2c14:	2310      	movs	r3, #16
 80a2c16:	466a      	mov	r2, sp
 80a2c18:	f7ff ffe5 	bl	80a2be6 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj>
	if (sscanf(tmp, "%d", &result) == 1) {
 80a2c1c:	4622      	mov	r2, r4
 80a2c1e:	4668      	mov	r0, sp
 80a2c20:	4903      	ldr	r1, [pc, #12]	; (80a2c30 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERi+0x20>)
 80a2c22:	f000 feef 	bl	80a3a04 <sscanf>
}
 80a2c26:	1e43      	subs	r3, r0, #1
 80a2c28:	4258      	negs	r0, r3
 80a2c2a:	4158      	adcs	r0, r3
 80a2c2c:	b004      	add	sp, #16
 80a2c2e:	bd10      	pop	{r4, pc}
 80a2c30:	080a8b3f 	.word	0x080a8b3f

080a2c34 <_ZN16JsonParserString6appendEc>:
void JsonParserString::append(char ch) {
 80a2c34:	b510      	push	{r4, lr}
 80a2c36:	4604      	mov	r4, r0
	if (str) {
 80a2c38:	6800      	ldr	r0, [r0, #0]
void JsonParserString::append(char ch) {
 80a2c3a:	460b      	mov	r3, r1
	if (str) {
 80a2c3c:	b128      	cbz	r0, 80a2c4a <_ZN16JsonParserString6appendEc+0x16>
		str->concat(ch);
 80a2c3e:	f001 fbd8 	bl	80a43f2 <_ZN6String6concatEc>
		length++;
 80a2c42:	68e3      	ldr	r3, [r4, #12]
 80a2c44:	3301      	adds	r3, #1
 80a2c46:	60e3      	str	r3, [r4, #12]
}
 80a2c48:	bd10      	pop	{r4, pc}
		if (buf && length < (bufLen - 1)) {
 80a2c4a:	6860      	ldr	r0, [r4, #4]
 80a2c4c:	2800      	cmp	r0, #0
 80a2c4e:	d0f8      	beq.n	80a2c42 <_ZN16JsonParserString6appendEc+0xe>
 80a2c50:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 80a2c54:	3a01      	subs	r2, #1
 80a2c56:	428a      	cmp	r2, r1
			buf[length] = ch;
 80a2c58:	bf88      	it	hi
 80a2c5a:	5443      	strbhi	r3, [r0, r1]
 80a2c5c:	e7f1      	b.n	80a2c42 <_ZN16JsonParserString6appendEc+0xe>

080a2c5e <_ZN10JsonParser10appendUtf8EtR16JsonParserString>:
	if (unicode <= 0x007f) {
 80a2c5e:	287f      	cmp	r0, #127	; 0x7f
void JsonParser::appendUtf8(uint16_t unicode, JsonParserString &str) {
 80a2c60:	b570      	push	{r4, r5, r6, lr}
 80a2c62:	460c      	mov	r4, r1
 80a2c64:	b2c1      	uxtb	r1, r0
	if (unicode <= 0x007f) {
 80a2c66:	d804      	bhi.n	80a2c72 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x14>
		str.append((char)value);
 80a2c68:	4620      	mov	r0, r4
}
 80a2c6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		str.append((char)value);
 80a2c6e:	f7ff bfe1 	b.w	80a2c34 <_ZN16JsonParserString6appendEc>
	if (unicode <= 0x7ff) {
 80a2c72:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80a2c76:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 80a2c7a:	f340 1687 	sbfx	r6, r0, #6, #8
 80a2c7e:	f041 0580 	orr.w	r5, r1, #128	; 0x80
 80a2c82:	d207      	bcs.n	80a2c94 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x36>
		value = (0b11000000 | ((unicode >> 6) & 0b11111));
 80a2c84:	f066 013f 	orn	r1, r6, #63	; 0x3f
		str.append((char)value);
 80a2c88:	b2c9      	uxtb	r1, r1
		str.append((char)value);
 80a2c8a:	4620      	mov	r0, r4
 80a2c8c:	f7ff ffd2 	bl	80a2c34 <_ZN16JsonParserString6appendEc>
		str.append((char)value);
 80a2c90:	4629      	mov	r1, r5
 80a2c92:	e7e9      	b.n	80a2c68 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0xa>
		value = 0b11100000 | ((unicode >> 12) & 0b1111);
 80a2c94:	0b03      	lsrs	r3, r0, #12
		str.append((char)value);
 80a2c96:	f043 01e0 	orr.w	r1, r3, #224	; 0xe0
 80a2c9a:	4620      	mov	r0, r4
 80a2c9c:	f7ff ffca 	bl	80a2c34 <_ZN16JsonParserString6appendEc>
		value = 0b10000000 | ((unicode >> 6) & 0b111111);
 80a2ca0:	f006 013f 	and.w	r1, r6, #63	; 0x3f
		str.append((char)value);
 80a2ca4:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80a2ca8:	e7ef      	b.n	80a2c8a <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x2c>
	...

080a2cac <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, JsonParserString &str) const {
 80a2cac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	bool escape = false;
 80a2cb0:	2400      	movs	r4, #0
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, JsonParserString &str) const {
 80a2cb2:	4680      	mov	r8, r0
 80a2cb4:	460f      	mov	r7, r1
 80a2cb6:	4615      	mov	r5, r2
			escape = false;
 80a2cb8:	46a1      	mov	r9, r4
	for(int ii = token->start; ii < token->end; ii++) {
 80a2cba:	684e      	ldr	r6, [r1, #4]
					if (sscanf(tmp, "%04x", &unicode) == 1) {
 80a2cbc:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80a2d84 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xd8>
	for(int ii = token->start; ii < token->end; ii++) {
 80a2cc0:	68b8      	ldr	r0, [r7, #8]
 80a2cc2:	42b0      	cmp	r0, r6
 80a2cc4:	dd5a      	ble.n	80a2d7c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xd0>
		if (escape) {
 80a2cc6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80a2cca:	5d99      	ldrb	r1, [r3, r6]
 80a2ccc:	199a      	adds	r2, r3, r6
 80a2cce:	2c00      	cmp	r4, #0
 80a2cd0:	d04b      	beq.n	80a2d6a <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xbe>
			switch(buffer[ii]) {
 80a2cd2:	2975      	cmp	r1, #117	; 0x75
 80a2cd4:	d805      	bhi.n	80a2ce2 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
 80a2cd6:	296d      	cmp	r1, #109	; 0x6d
 80a2cd8:	d807      	bhi.n	80a2cea <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x3e>
 80a2cda:	2962      	cmp	r1, #98	; 0x62
 80a2cdc:	d01e      	beq.n	80a2d1c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x70>
 80a2cde:	2966      	cmp	r1, #102	; 0x66
 80a2ce0:	d01e      	beq.n	80a2d20 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x74>
				str.append(buffer[ii]);
 80a2ce2:	4628      	mov	r0, r5
 80a2ce4:	f7ff ffa6 	bl	80a2c34 <_ZN16JsonParserString6appendEc>
				break;
 80a2ce8:	e03d      	b.n	80a2d66 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
 80a2cea:	f1a1 046e 	sub.w	r4, r1, #110	; 0x6e
 80a2cee:	2c07      	cmp	r4, #7
 80a2cf0:	d8f7      	bhi.n	80a2ce2 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
 80a2cf2:	f20f 0c08 	addw	ip, pc, #8
 80a2cf6:	f85c f024 	ldr.w	pc, [ip, r4, lsl #2]
 80a2cfa:	bf00      	nop
 80a2cfc:	080a2d25 	.word	0x080a2d25
 80a2d00:	080a2ce3 	.word	0x080a2ce3
 80a2d04:	080a2ce3 	.word	0x080a2ce3
 80a2d08:	080a2ce3 	.word	0x080a2ce3
 80a2d0c:	080a2d29 	.word	0x080a2d29
 80a2d10:	080a2ce3 	.word	0x080a2ce3
 80a2d14:	080a2d2d 	.word	0x080a2d2d
 80a2d18:	080a2d31 	.word	0x080a2d31
				str.append('\b');
 80a2d1c:	2108      	movs	r1, #8
 80a2d1e:	e7e0      	b.n	80a2ce2 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\f');
 80a2d20:	210c      	movs	r1, #12
 80a2d22:	e7de      	b.n	80a2ce2 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\n');
 80a2d24:	210a      	movs	r1, #10
 80a2d26:	e7dc      	b.n	80a2ce2 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\r');
 80a2d28:	210d      	movs	r1, #13
 80a2d2a:	e7da      	b.n	80a2ce2 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\t');
 80a2d2c:	2109      	movs	r1, #9
 80a2d2e:	e7d8      	b.n	80a2ce2 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				if ((ii + 4) < token->end) {
 80a2d30:	1d31      	adds	r1, r6, #4
 80a2d32:	4288      	cmp	r0, r1
 80a2d34:	dd17      	ble.n	80a2d66 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
 80a2d36:	a902      	add	r1, sp, #8
 80a2d38:	4608      	mov	r0, r1
 80a2d3a:	3304      	adds	r3, #4
 80a2d3c:	4433      	add	r3, r6
						tmp[jj] = buffer[ii + jj + 1];
 80a2d3e:	f812 4f01 	ldrb.w	r4, [r2, #1]!
					for(size_t jj = 0; jj < 4; jj++) {
 80a2d42:	429a      	cmp	r2, r3
						tmp[jj] = buffer[ii + jj + 1];
 80a2d44:	f801 4b01 	strb.w	r4, [r1], #1
					for(size_t jj = 0; jj < 4; jj++) {
 80a2d48:	d1f9      	bne.n	80a2d3e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x92>
					if (sscanf(tmp, "%04x", &unicode) == 1) {
 80a2d4a:	4651      	mov	r1, sl
 80a2d4c:	aa01      	add	r2, sp, #4
					tmp[4] = 0;
 80a2d4e:	f88d 900c 	strb.w	r9, [sp, #12]
					if (sscanf(tmp, "%04x", &unicode) == 1) {
 80a2d52:	f000 fe57 	bl	80a3a04 <sscanf>
 80a2d56:	2801      	cmp	r0, #1
 80a2d58:	d105      	bne.n	80a2d66 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
						appendUtf8((uint16_t)unicode, str);
 80a2d5a:	4629      	mov	r1, r5
 80a2d5c:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 80a2d60:	f7ff ff7d 	bl	80a2c5e <_ZN10JsonParser10appendUtf8EtR16JsonParserString>
						ii += 5; // also increments in loop
 80a2d64:	3605      	adds	r6, #5
			escape = false;
 80a2d66:	2400      	movs	r4, #0
 80a2d68:	e004      	b.n	80a2d74 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xc8>
		if (buffer[ii] == '\\') {
 80a2d6a:	295c      	cmp	r1, #92	; 0x5c
 80a2d6c:	d004      	beq.n	80a2d78 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xcc>
			str.append(buffer[ii]);
 80a2d6e:	4628      	mov	r0, r5
 80a2d70:	f7ff ff60 	bl	80a2c34 <_ZN16JsonParserString6appendEc>
	for(int ii = token->start; ii < token->end; ii++) {
 80a2d74:	3601      	adds	r6, #1
 80a2d76:	e7a3      	b.n	80a2cc0 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x14>
			escape = true;
 80a2d78:	2401      	movs	r4, #1
 80a2d7a:	e7fb      	b.n	80a2d74 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xc8>
}
 80a2d7c:	2001      	movs	r0, #1
 80a2d7e:	b004      	add	sp, #16
 80a2d80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a2d84:	080a8734 	.word	0x080a8734

080a2d88 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, String &result) const {
 80a2d88:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80a2d8a:	460c      	mov	r4, r1
 80a2d8c:	4615      	mov	r5, r2
 80a2d8e:	4606      	mov	r6, r0
	result = "";
 80a2d90:	490b      	ldr	r1, [pc, #44]	; (80a2dc0 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String+0x38>)
 80a2d92:	4610      	mov	r0, r2
 80a2d94:	f001 fa9e 	bl	80a42d4 <_ZN6StringaSEPKc>
	result.reserve(token->end - token->start + 1);
 80a2d98:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 80a2d9c:	1ac9      	subs	r1, r1, r3
 80a2d9e:	4628      	mov	r0, r5
 80a2da0:	3101      	adds	r1, #1
 80a2da2:	f001 fa19 	bl	80a41d8 <_ZN6String7reserveEj>
JsonParserString::JsonParserString(String *str) : str(str), buf(0), bufLen(0), length(0){
 80a2da6:	2300      	movs	r3, #0
	return getTokenValue(token, strWrapper);
 80a2da8:	466a      	mov	r2, sp
 80a2daa:	4621      	mov	r1, r4
 80a2dac:	4630      	mov	r0, r6
JsonParserString::JsonParserString(String *str) : str(str), buf(0), bufLen(0), length(0){
 80a2dae:	e9cd 3301 	strd	r3, r3, [sp, #4]
 80a2db2:	9500      	str	r5, [sp, #0]
 80a2db4:	9303      	str	r3, [sp, #12]
	return getTokenValue(token, strWrapper);
 80a2db6:	f7ff ff79 	bl	80a2cac <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString>
}
 80a2dba:	b004      	add	sp, #16
 80a2dbc:	bd70      	pop	{r4, r5, r6, pc}
 80a2dbe:	bf00      	nop
 80a2dc0:	080a86c9 	.word	0x080a86c9

080a2dc4 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>:
bool JsonParser::getValueTokenByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, const JsonParserGeneratorRK::jsmntok_t *&value) const {
 80a2dc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a2dc8:	b089      	sub	sp, #36	; 0x24
 80a2dca:	4605      	mov	r5, r0
 80a2dcc:	4688      	mov	r8, r1
	String keyName;
 80a2dce:	a804      	add	r0, sp, #16
 80a2dd0:	4912      	ldr	r1, [pc, #72]	; (80a2e1c <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x58>)
bool JsonParser::getValueTokenByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, const JsonParserGeneratorRK::jsmntok_t *&value) const {
 80a2dd2:	4616      	mov	r6, r2
 80a2dd4:	4699      	mov	r9, r3
	for(size_t ii = 0; getKeyValueTokenByIndex(container, key, value, ii); ii++) {
 80a2dd6:	2700      	movs	r7, #0
	String keyName;
 80a2dd8:	f001 fa2a 	bl	80a4230 <_ZN6StringC1EPKc>
	for(size_t ii = 0; getKeyValueTokenByIndex(container, key, value, ii); ii++) {
 80a2ddc:	464b      	mov	r3, r9
 80a2dde:	4641      	mov	r1, r8
 80a2de0:	4628      	mov	r0, r5
 80a2de2:	9700      	str	r7, [sp, #0]
 80a2de4:	aa03      	add	r2, sp, #12
 80a2de6:	f7ff fed2 	bl	80a2b8e <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j>
 80a2dea:	4604      	mov	r4, r0
 80a2dec:	b170      	cbz	r0, 80a2e0c <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x48>
		if (getTokenValue(key, keyName) && keyName == name) {
 80a2dee:	4628      	mov	r0, r5
 80a2df0:	9903      	ldr	r1, [sp, #12]
 80a2df2:	aa04      	add	r2, sp, #16
 80a2df4:	f7ff ffc8 	bl	80a2d88 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>
 80a2df8:	4604      	mov	r4, r0
 80a2dfa:	b908      	cbnz	r0, 80a2e00 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x3c>
	for(size_t ii = 0; getKeyValueTokenByIndex(container, key, value, ii); ii++) {
 80a2dfc:	3701      	adds	r7, #1
 80a2dfe:	e7ed      	b.n	80a2ddc <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x18>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 80a2e00:	4631      	mov	r1, r6
 80a2e02:	a804      	add	r0, sp, #16
 80a2e04:	f001 fb33 	bl	80a446e <_ZNK6String6equalsEPKc>
		if (getTokenValue(key, keyName) && keyName == name) {
 80a2e08:	2800      	cmp	r0, #0
 80a2e0a:	d0f7      	beq.n	80a2dfc <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x38>
	String keyName;
 80a2e0c:	a804      	add	r0, sp, #16
 80a2e0e:	f001 f9c5 	bl	80a419c <_ZN6StringD1Ev>
}
 80a2e12:	4620      	mov	r0, r4
 80a2e14:	b009      	add	sp, #36	; 0x24
 80a2e16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a2e1a:	bf00      	nop
 80a2e1c:	080a86c9 	.word	0x080a86c9

080a2e20 <_ZN10JsonWriter4initEv>:
	init();
}

void JsonWriter::init() {
	// Save start of insertion point for later
	offset = 0;
 80a2e20:	2300      	movs	r3, #0

	contextIndex = 0;
	context[contextIndex].isFirst = true;
 80a2e22:	2201      	movs	r2, #1
	offset = 0;
 80a2e24:	60c3      	str	r3, [r0, #12]
	contextIndex = 0;
 80a2e26:	6143      	str	r3, [r0, #20]
	context[contextIndex].isFirst = true;
 80a2e28:	8302      	strh	r2, [r0, #24]
	context[contextIndex].terminator = 0;

	truncated = false;
 80a2e2a:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a

}
 80a2e2e:	4770      	bx	lr

080a2e30 <_ZN10JsonWriterC1EPcj>:
JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
 80a2e30:	2300      	movs	r3, #0
 80a2e32:	60c3      	str	r3, [r0, #12]
 80a2e34:	2301      	movs	r3, #1
 80a2e36:	7403      	strb	r3, [r0, #16]
JsonWriter::JsonWriter(char *buffer, size_t bufferLen) : JsonBuffer(buffer, bufferLen), floatPlaces(-1) {
 80a2e38:	4b05      	ldr	r3, [pc, #20]	; (80a2e50 <_ZN10JsonWriterC1EPcj+0x20>)
 80a2e3a:	b510      	push	{r4, lr}
 80a2e3c:	6003      	str	r3, [r0, #0]
 80a2e3e:	f04f 33ff 	mov.w	r3, #4294967295
JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
 80a2e42:	e9c0 1201 	strd	r1, r2, [r0, #4]
JsonWriter::JsonWriter(char *buffer, size_t bufferLen) : JsonBuffer(buffer, bufferLen), floatPlaces(-1) {
 80a2e46:	62c3      	str	r3, [r0, #44]	; 0x2c
	init();
 80a2e48:	f7ff ffea 	bl	80a2e20 <_ZN10JsonWriter4initEv>
}
 80a2e4c:	bd10      	pop	{r4, pc}
 80a2e4e:	bf00      	nop
 80a2e50:	080a8770 	.word	0x080a8770

080a2e54 <_ZN10JsonWriter10insertCharEc>:
	}
}


void JsonWriter::insertChar(char ch) {
	if (offset < bufferLen) {
 80a2e54:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 80a2e58:	4293      	cmp	r3, r2
		buffer[offset++] = ch;
	}
	else {
		truncated = true;
 80a2e5a:	bf28      	it	cs
 80a2e5c:	2301      	movcs	r3, #1
void JsonWriter::insertChar(char ch) {
 80a2e5e:	b510      	push	{r4, lr}
		buffer[offset++] = ch;
 80a2e60:	bf3f      	itttt	cc
 80a2e62:	6842      	ldrcc	r2, [r0, #4]
 80a2e64:	1c5c      	addcc	r4, r3, #1
 80a2e66:	60c4      	strcc	r4, [r0, #12]
 80a2e68:	54d1      	strbcc	r1, [r2, r3]
		truncated = true;
 80a2e6a:	bf28      	it	cs
 80a2e6c:	f880 302a 	strbcs.w	r3, [r0, #42]	; 0x2a
	}
}
 80a2e70:	bd10      	pop	{r4, pc}

080a2e72 <_ZN10JsonWriter19finishObjectOrArrayEv>:
void JsonWriter::finishObjectOrArray() {
 80a2e72:	b510      	push	{r4, lr}
	if (contextIndex > 0) {
 80a2e74:	6943      	ldr	r3, [r0, #20]
void JsonWriter::finishObjectOrArray() {
 80a2e76:	4604      	mov	r4, r0
	if (contextIndex > 0) {
 80a2e78:	b143      	cbz	r3, 80a2e8c <_ZN10JsonWriter19finishObjectOrArrayEv+0x1a>
		if (context[contextIndex].terminator != 0) {
 80a2e7a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80a2e7e:	7e59      	ldrb	r1, [r3, #25]
 80a2e80:	b109      	cbz	r1, 80a2e86 <_ZN10JsonWriter19finishObjectOrArrayEv+0x14>
			insertChar(context[contextIndex].terminator);
 80a2e82:	f7ff ffe7 	bl	80a2e54 <_ZN10JsonWriter10insertCharEc>
		contextIndex--;
 80a2e86:	6963      	ldr	r3, [r4, #20]
 80a2e88:	3b01      	subs	r3, #1
 80a2e8a:	6163      	str	r3, [r4, #20]
	if (offset < bufferLen) {
 80a2e8c:	2200      	movs	r2, #0
 80a2e8e:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
 80a2e92:	6863      	ldr	r3, [r4, #4]
 80a2e94:	4288      	cmp	r0, r1
		buffer[bufferLen - 1] = 0;
 80a2e96:	bf2a      	itet	cs
 80a2e98:	185b      	addcs	r3, r3, r1
		buffer[offset] = 0;
 80a2e9a:	541a      	strbcc	r2, [r3, r0]
		buffer[bufferLen - 1] = 0;
 80a2e9c:	f803 2c01 	strbcs.w	r2, [r3, #-1]
}
 80a2ea0:	bd10      	pop	{r4, pc}

080a2ea2 <_ZN10JsonWriter14insertvsprintfEPKcSt9__va_list>:
	va_start(ap, fmt);
	insertvsprintf(fmt, ap);
	va_end(ap);
}

void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
 80a2ea2:	b570      	push	{r4, r5, r6, lr}
 80a2ea4:	4604      	mov	r4, r0
	size_t spaceAvailable = bufferLen - offset;
 80a2ea6:	e9d0 5002 	ldrd	r5, r0, [r0, #8]

	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
 80a2eaa:	6866      	ldr	r6, [r4, #4]
	size_t spaceAvailable = bufferLen - offset;
 80a2eac:	1a2d      	subs	r5, r5, r0
void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
 80a2eae:	4613      	mov	r3, r2
	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
 80a2eb0:	4430      	add	r0, r6
 80a2eb2:	460a      	mov	r2, r1
 80a2eb4:	4629      	mov	r1, r5
 80a2eb6:	f000 fdc5 	bl	80a3a44 <vsnprintf>
	if (count <= spaceAvailable) {
 80a2eba:	4285      	cmp	r5, r0
		offset += count;
	}
	else {
		// Truncated, no more space left
		offset = bufferLen;
 80a2ebc:	bf37      	itett	cc
 80a2ebe:	68a3      	ldrcc	r3, [r4, #8]
		offset += count;
 80a2ec0:	68e3      	ldrcs	r3, [r4, #12]
		offset = bufferLen;
 80a2ec2:	60e3      	strcc	r3, [r4, #12]
		truncated = true;
 80a2ec4:	2301      	movcc	r3, #1
		offset += count;
 80a2ec6:	bf26      	itte	cs
 80a2ec8:	18c0      	addcs	r0, r0, r3
 80a2eca:	60e0      	strcs	r0, [r4, #12]
		truncated = true;
 80a2ecc:	f884 302a 	strbcc.w	r3, [r4, #42]	; 0x2a
	}
}
 80a2ed0:	bd70      	pop	{r4, r5, r6, pc}

080a2ed2 <_ZN10JsonWriter13insertsprintfEPKcz>:
void JsonWriter::insertsprintf(const char *fmt, ...) {
 80a2ed2:	b40e      	push	{r1, r2, r3}
 80a2ed4:	b503      	push	{r0, r1, lr}
 80a2ed6:	aa03      	add	r2, sp, #12
 80a2ed8:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(ap, fmt);
 80a2edc:	9201      	str	r2, [sp, #4]
	insertvsprintf(fmt, ap);
 80a2ede:	f7ff ffe0 	bl	80a2ea2 <_ZN10JsonWriter14insertvsprintfEPKcSt9__va_list>
}
 80a2ee2:	b002      	add	sp, #8
 80a2ee4:	f85d eb04 	ldr.w	lr, [sp], #4
 80a2ee8:	b003      	add	sp, #12
 80a2eea:	4770      	bx	lr

080a2eec <_ZN10JsonWriter12insertStringEPKcb>:
void JsonWriter::insertString(const char *s, bool quoted) {
 80a2eec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a2ef0:	4604      	mov	r4, r0
 80a2ef2:	460e      	mov	r6, r1
	if (quoted) {
 80a2ef4:	4617      	mov	r7, r2
 80a2ef6:	b112      	cbz	r2, 80a2efe <_ZN10JsonWriter12insertStringEPKcb+0x12>
		insertChar('"');
 80a2ef8:	2122      	movs	r1, #34	; 0x22
 80a2efa:	f7ff ffab 	bl	80a2e54 <_ZN10JsonWriter10insertCharEc>
void JsonWriter::insertString(const char *s, bool quoted) {
 80a2efe:	2500      	movs	r5, #0
				insertsprintf("\\u%04X", utf16);
 80a2f00:	f8df 8108 	ldr.w	r8, [pc, #264]	; 80a300c <_ZN10JsonWriter12insertStringEPKcb+0x120>
	for(size_t ii = 0; s[ii] && offset < bufferLen; ii++) {
 80a2f04:	5d71      	ldrb	r1, [r6, r5]
 80a2f06:	eb06 0905 	add.w	r9, r6, r5
 80a2f0a:	2900      	cmp	r1, #0
 80a2f0c:	d074      	beq.n	80a2ff8 <_ZN10JsonWriter12insertStringEPKcb+0x10c>
 80a2f0e:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
 80a2f12:	429a      	cmp	r2, r3
 80a2f14:	d270      	bcs.n	80a2ff8 <_ZN10JsonWriter12insertStringEPKcb+0x10c>
		if (s[ii] & 0x80) {
 80a2f16:	060b      	lsls	r3, r1, #24
 80a2f18:	d534      	bpl.n	80a2f84 <_ZN10JsonWriter12insertStringEPKcb+0x98>
			if (((s[ii] & 0b11110000) == 0b11100000) && ((s[ii+1] & 0b11000000) == 0b10000000) && ((s[ii+2] & 0b11000000) == 0b10000000)) {
 80a2f1a:	f001 03f0 	and.w	r3, r1, #240	; 0xf0
 80a2f1e:	2be0      	cmp	r3, #224	; 0xe0
 80a2f20:	f105 0901 	add.w	r9, r5, #1
 80a2f24:	d11d      	bne.n	80a2f62 <_ZN10JsonWriter12insertStringEPKcb+0x76>
 80a2f26:	f816 2009 	ldrb.w	r2, [r6, r9]
 80a2f2a:	f002 03c0 	and.w	r3, r2, #192	; 0xc0
 80a2f2e:	2b80      	cmp	r3, #128	; 0x80
 80a2f30:	d139      	bne.n	80a2fa6 <_ZN10JsonWriter12insertStringEPKcb+0xba>
 80a2f32:	f105 0902 	add.w	r9, r5, #2
 80a2f36:	f816 3009 	ldrb.w	r3, [r6, r9]
 80a2f3a:	f003 00c0 	and.w	r0, r3, #192	; 0xc0
 80a2f3e:	2880      	cmp	r0, #128	; 0x80
 80a2f40:	d131      	bne.n	80a2fa6 <_ZN10JsonWriter12insertStringEPKcb+0xba>
				uint16_t utf16 = ((s[ii] & 0b1111) << 12) | ((s[ii+1] & 0b111111) << 6) | (s[ii+2] & 0b111111);
 80a2f42:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80a2f46:	0192      	lsls	r2, r2, #6
 80a2f48:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 80a2f4c:	f402 627c 	and.w	r2, r2, #4032	; 0xfc0
 80a2f50:	431a      	orrs	r2, r3
				insertsprintf("\\u%04X", utf16);
 80a2f52:	b292      	uxth	r2, r2
				insertsprintf("\\u%04X", utf16);
 80a2f54:	4641      	mov	r1, r8
 80a2f56:	4620      	mov	r0, r4
 80a2f58:	f7ff ffbb 	bl	80a2ed2 <_ZN10JsonWriter13insertsprintfEPKcz>
				ii++; // plus one more in loop increment
 80a2f5c:	464d      	mov	r5, r9
	for(size_t ii = 0; s[ii] && offset < bufferLen; ii++) {
 80a2f5e:	3501      	adds	r5, #1
 80a2f60:	e7d0      	b.n	80a2f04 <_ZN10JsonWriter12insertStringEPKcb+0x18>
			if (((s[ii] & 0b11100000) == 0b11000000) && ((s[ii+1] & 0b11000000) == 0b10000000)) {
 80a2f62:	f001 03e0 	and.w	r3, r1, #224	; 0xe0
 80a2f66:	2bc0      	cmp	r3, #192	; 0xc0
 80a2f68:	d11d      	bne.n	80a2fa6 <_ZN10JsonWriter12insertStringEPKcb+0xba>
 80a2f6a:	f816 3009 	ldrb.w	r3, [r6, r9]
 80a2f6e:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
 80a2f72:	2a80      	cmp	r2, #128	; 0x80
 80a2f74:	d117      	bne.n	80a2fa6 <_ZN10JsonWriter12insertStringEPKcb+0xba>
				uint16_t utf16 = ((s[ii] & 0b11111) << 6) | (s[ii+1] & 0b111111);
 80a2f76:	0189      	lsls	r1, r1, #6
 80a2f78:	f401 62f8 	and.w	r2, r1, #1984	; 0x7c0
 80a2f7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
				insertsprintf("\\u%04X", utf16);
 80a2f80:	431a      	orrs	r2, r3
 80a2f82:	e7e7      	b.n	80a2f54 <_ZN10JsonWriter12insertStringEPKcb+0x68>
			switch(s[ii]) {
 80a2f84:	290d      	cmp	r1, #13
 80a2f86:	d80a      	bhi.n	80a2f9e <_ZN10JsonWriter12insertStringEPKcb+0xb2>
 80a2f88:	2907      	cmp	r1, #7
 80a2f8a:	d90c      	bls.n	80a2fa6 <_ZN10JsonWriter12insertStringEPKcb+0xba>
 80a2f8c:	f1a1 0308 	sub.w	r3, r1, #8
 80a2f90:	2b05      	cmp	r3, #5
 80a2f92:	d808      	bhi.n	80a2fa6 <_ZN10JsonWriter12insertStringEPKcb+0xba>
 80a2f94:	e8df f003 	tbb	[pc, r3]
 80a2f98:	0717230b 	.word	0x0717230b
 80a2f9c:	1d11      	.short	0x1d11
 80a2f9e:	2922      	cmp	r1, #34	; 0x22
 80a2fa0:	d023      	beq.n	80a2fea <_ZN10JsonWriter12insertStringEPKcb+0xfe>
 80a2fa2:	295c      	cmp	r1, #92	; 0x5c
 80a2fa4:	d021      	beq.n	80a2fea <_ZN10JsonWriter12insertStringEPKcb+0xfe>
				insertChar(s[ii]);
 80a2fa6:	4620      	mov	r0, r4
 80a2fa8:	f7ff ff54 	bl	80a2e54 <_ZN10JsonWriter10insertCharEc>
				break;
 80a2fac:	e7d7      	b.n	80a2f5e <_ZN10JsonWriter12insertStringEPKcb+0x72>
				insertChar('\\');
 80a2fae:	215c      	movs	r1, #92	; 0x5c
 80a2fb0:	4620      	mov	r0, r4
 80a2fb2:	f7ff ff4f 	bl	80a2e54 <_ZN10JsonWriter10insertCharEc>
				insertChar('b');
 80a2fb6:	2162      	movs	r1, #98	; 0x62
 80a2fb8:	e7f5      	b.n	80a2fa6 <_ZN10JsonWriter12insertStringEPKcb+0xba>
				insertChar('\\');
 80a2fba:	215c      	movs	r1, #92	; 0x5c
 80a2fbc:	4620      	mov	r0, r4
 80a2fbe:	f7ff ff49 	bl	80a2e54 <_ZN10JsonWriter10insertCharEc>
				insertChar('f');
 80a2fc2:	2166      	movs	r1, #102	; 0x66
 80a2fc4:	e7ef      	b.n	80a2fa6 <_ZN10JsonWriter12insertStringEPKcb+0xba>
				insertChar('\\');
 80a2fc6:	215c      	movs	r1, #92	; 0x5c
 80a2fc8:	4620      	mov	r0, r4
 80a2fca:	f7ff ff43 	bl	80a2e54 <_ZN10JsonWriter10insertCharEc>
				insertChar('n');
 80a2fce:	216e      	movs	r1, #110	; 0x6e
 80a2fd0:	e7e9      	b.n	80a2fa6 <_ZN10JsonWriter12insertStringEPKcb+0xba>
				insertChar('\\');
 80a2fd2:	215c      	movs	r1, #92	; 0x5c
 80a2fd4:	4620      	mov	r0, r4
 80a2fd6:	f7ff ff3d 	bl	80a2e54 <_ZN10JsonWriter10insertCharEc>
				insertChar('r');
 80a2fda:	2172      	movs	r1, #114	; 0x72
 80a2fdc:	e7e3      	b.n	80a2fa6 <_ZN10JsonWriter12insertStringEPKcb+0xba>
				insertChar('\\');
 80a2fde:	215c      	movs	r1, #92	; 0x5c
 80a2fe0:	4620      	mov	r0, r4
 80a2fe2:	f7ff ff37 	bl	80a2e54 <_ZN10JsonWriter10insertCharEc>
				insertChar('t');
 80a2fe6:	2174      	movs	r1, #116	; 0x74
 80a2fe8:	e7dd      	b.n	80a2fa6 <_ZN10JsonWriter12insertStringEPKcb+0xba>
				insertChar('\\');
 80a2fea:	215c      	movs	r1, #92	; 0x5c
 80a2fec:	4620      	mov	r0, r4
 80a2fee:	f7ff ff31 	bl	80a2e54 <_ZN10JsonWriter10insertCharEc>
				insertChar(s[ii]);
 80a2ff2:	f899 1000 	ldrb.w	r1, [r9]
 80a2ff6:	e7d6      	b.n	80a2fa6 <_ZN10JsonWriter12insertStringEPKcb+0xba>
	if (quoted) {
 80a2ff8:	b12f      	cbz	r7, 80a3006 <_ZN10JsonWriter12insertStringEPKcb+0x11a>
		insertChar('"');
 80a2ffa:	4620      	mov	r0, r4
}
 80a2ffc:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		insertChar('"');
 80a3000:	2122      	movs	r1, #34	; 0x22
 80a3002:	f7ff bf27 	b.w	80a2e54 <_ZN10JsonWriter10insertCharEc>
}
 80a3006:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a300a:	bf00      	nop
 80a300c:	080a8739 	.word	0x080a8739

080a3010 <_ZN10JsonWriter20insertCheckSeparatorEv>:

void JsonWriter::insertCheckSeparator() {
	if (context[contextIndex].isFirst) {
 80a3010:	6942      	ldr	r2, [r0, #20]
 80a3012:	eb00 0342 	add.w	r3, r0, r2, lsl #1
 80a3016:	7e1a      	ldrb	r2, [r3, #24]
 80a3018:	b112      	cbz	r2, 80a3020 <_ZN10JsonWriter20insertCheckSeparatorEv+0x10>
		context[contextIndex].isFirst = false;
 80a301a:	2200      	movs	r2, #0
 80a301c:	761a      	strb	r2, [r3, #24]
	}
	else {
		insertChar(',');
	}
}
 80a301e:	4770      	bx	lr
		insertChar(',');
 80a3020:	212c      	movs	r1, #44	; 0x2c
 80a3022:	f7ff bf17 	b.w	80a2e54 <_ZN10JsonWriter10insertCharEc>

080a3026 <_ZN10JsonWriter18startObjectOrArrayEcc>:
bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
 80a3026:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
 80a3028:	6943      	ldr	r3, [r0, #20]
bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
 80a302a:	460e      	mov	r6, r1
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
 80a302c:	3301      	adds	r3, #1
 80a302e:	2b08      	cmp	r3, #8
bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
 80a3030:	4617      	mov	r7, r2
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
 80a3032:	d80e      	bhi.n	80a3052 <_ZN10JsonWriter18startObjectOrArrayEcc+0x2c>
	insertCheckSeparator();
 80a3034:	f7ff ffec 	bl	80a3010 <_ZN10JsonWriter20insertCheckSeparatorEv>
	context[contextIndex].isFirst = true;
 80a3038:	2501      	movs	r5, #1
	contextIndex++;
 80a303a:	6943      	ldr	r3, [r0, #20]
	insertChar(startChar);
 80a303c:	4631      	mov	r1, r6
	contextIndex++;
 80a303e:	1c5a      	adds	r2, r3, #1
 80a3040:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80a3044:	6142      	str	r2, [r0, #20]
	context[contextIndex].isFirst = true;
 80a3046:	769d      	strb	r5, [r3, #26]
	context[contextIndex].terminator = endChar;
 80a3048:	76df      	strb	r7, [r3, #27]
	insertChar(startChar);
 80a304a:	f7ff ff03 	bl	80a2e54 <_ZN10JsonWriter10insertCharEc>
 80a304e:	4628      	mov	r0, r5
}
 80a3050:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return false;
 80a3052:	2000      	movs	r0, #0
 80a3054:	e7fc      	b.n	80a3050 <_ZN10JsonWriter18startObjectOrArrayEcc+0x2a>
	...

080a3058 <_ZN10JsonWriter11insertValueEf>:
	else {
		insertString("false");
	}
}

void JsonWriter::insertValue(float value) {
 80a3058:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a305a:	4604      	mov	r4, r0
	if (floatPlaces >= 0) {
 80a305c:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 80a305e:	4608      	mov	r0, r1
 80a3060:	f002 fcb8 	bl	80a59d4 <__aeabi_f2d>
 80a3064:	2d00      	cmp	r5, #0
 80a3066:	4602      	mov	r2, r0
 80a3068:	460b      	mov	r3, r1
 80a306a:	db08      	blt.n	80a307e <_ZN10JsonWriter11insertValueEf+0x26>
		insertsprintf("%.*f", floatPlaces, value);
 80a306c:	e9cd 2300 	strd	r2, r3, [sp]
 80a3070:	4620      	mov	r0, r4
 80a3072:	462a      	mov	r2, r5
 80a3074:	4905      	ldr	r1, [pc, #20]	; (80a308c <_ZN10JsonWriter11insertValueEf+0x34>)
 80a3076:	f7ff ff2c 	bl	80a2ed2 <_ZN10JsonWriter13insertsprintfEPKcz>
	}
	else {
		insertsprintf("%f", value);
	}
}
 80a307a:	b003      	add	sp, #12
 80a307c:	bd30      	pop	{r4, r5, pc}
		insertsprintf("%f", value);
 80a307e:	4620      	mov	r0, r4
 80a3080:	4903      	ldr	r1, [pc, #12]	; (80a3090 <_ZN10JsonWriter11insertValueEf+0x38>)
}
 80a3082:	b003      	add	sp, #12
 80a3084:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		insertsprintf("%f", value);
 80a3088:	f7ff bf23 	b.w	80a2ed2 <_ZN10JsonWriter13insertsprintfEPKcz>
 80a308c:	080a8740 	.word	0x080a8740
 80a3090:	080a8745 	.word	0x080a8745

080a3094 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>:

/**
 * Parse JSON string and fill tokens.
 */
int jsmn_parse(jsmn_parser *parser, const char *js, size_t len,
		jsmntok_t *tokens, unsigned int num_tokens) {
 80a3094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a3098:	f04f 0c01 	mov.w	ip, #1
	tok->start = tok->end = -1;
 80a309c:	f04f 35ff 	mov.w	r5, #4294967295
		jsmntok_t *tokens, unsigned int num_tokens) {
 80a30a0:	4604      	mov	r4, r0
	int r;
	int i;
	jsmntok_t *token;
	int count = parser->toknext;
 80a30a2:	6840      	ldr	r0, [r0, #4]

	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 80a30a4:	f8d4 e000 	ldr.w	lr, [r4]
 80a30a8:	4596      	cmp	lr, r2
 80a30aa:	f080 81be 	bcs.w	80a342a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x396>
 80a30ae:	f811 800e 	ldrb.w	r8, [r1, lr]
 80a30b2:	f1b8 0f00 	cmp.w	r8, #0
 80a30b6:	f000 81b8 	beq.w	80a342a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x396>
		char c;
		jsmntype_t type;

		c = js[parser->pos];
		switch (c) {
 80a30ba:	f1b8 0f3a 	cmp.w	r8, #58	; 0x3a
 80a30be:	f000 809b 	beq.w	80a31f8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x164>
 80a30c2:	d833      	bhi.n	80a312c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x98>
 80a30c4:	f1b8 0f22 	cmp.w	r8, #34	; 0x22
 80a30c8:	f000 80ad 	beq.w	80a3226 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x192>
 80a30cc:	d810      	bhi.n	80a30f0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x5c>
 80a30ce:	f1a8 0809 	sub.w	r8, r8, #9
 80a30d2:	fa5f f888 	uxtb.w	r8, r8
 80a30d6:	f1b8 0f17 	cmp.w	r8, #23
 80a30da:	d80d      	bhi.n	80a30f8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x64>
 80a30dc:	4fc0      	ldr	r7, [pc, #768]	; (80a33e0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x34c>)
 80a30de:	fa0c f808 	lsl.w	r8, ip, r8
 80a30e2:	ea18 0f07 	tst.w	r8, r7
 80a30e6:	d007      	beq.n	80a30f8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x64>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 80a30e8:	6827      	ldr	r7, [r4, #0]
 80a30ea:	3701      	adds	r7, #1
 80a30ec:	6027      	str	r7, [r4, #0]
 80a30ee:	e7d9      	b.n	80a30a4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x10>
		switch (c) {
 80a30f0:	f1b8 0f2c 	cmp.w	r8, #44	; 0x2c
 80a30f4:	f000 8136 	beq.w	80a3364 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2d0>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 80a30f8:	f8d4 8000 	ldr.w	r8, [r4]
 80a30fc:	4542      	cmp	r2, r8
 80a30fe:	d90e      	bls.n	80a311e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x8a>
 80a3100:	f811 7008 	ldrb.w	r7, [r1, r8]
 80a3104:	b15f      	cbz	r7, 80a311e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x8a>
		switch (js[parser->pos]) {
 80a3106:	2f3a      	cmp	r7, #58	; 0x3a
 80a3108:	f200 816e 	bhi.w	80a33e8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x354>
 80a310c:	2f1f      	cmp	r7, #31
 80a310e:	f200 8152 	bhi.w	80a33b6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x322>
 80a3112:	2f0a      	cmp	r7, #10
 80a3114:	f200 8161 	bhi.w	80a33da <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x346>
 80a3118:	2f08      	cmp	r7, #8
 80a311a:	f240 8157 	bls.w	80a33cc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x338>
	if (tokens == NULL) {
 80a311e:	2b00      	cmp	r3, #0
 80a3120:	f040 8167 	bne.w	80a33f2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x35e>
		parser->pos--;
 80a3124:	f108 37ff 	add.w	r7, r8, #4294967295
	parser->pos--;
 80a3128:	6027      	str	r7, [r4, #0]
 80a312a:	e0ab      	b.n	80a3284 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1f0>
		switch (c) {
 80a312c:	f1b8 0f7b 	cmp.w	r8, #123	; 0x7b
 80a3130:	d03a      	beq.n	80a31a8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x114>
 80a3132:	d80a      	bhi.n	80a314a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xb6>
 80a3134:	f1b8 0f5b 	cmp.w	r8, #91	; 0x5b
 80a3138:	d036      	beq.n	80a31a8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x114>
 80a313a:	f1b8 0f5d 	cmp.w	r8, #93	; 0x5d
 80a313e:	d1db      	bne.n	80a30f8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x64>
				token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
				token->start = parser->pos;
				parser->toksuper = parser->toknext - 1;
				break;
			case '}': case ']':
				if (tokens == NULL)
 80a3140:	2b00      	cmp	r3, #0
 80a3142:	d0d1      	beq.n	80a30e8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x54>
					break;
				type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
 80a3144:	f04f 0b02 	mov.w	fp, #2
 80a3148:	e006      	b.n	80a3158 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xc4>
		switch (c) {
 80a314a:	f1b8 0f7d 	cmp.w	r8, #125	; 0x7d
 80a314e:	d1d3      	bne.n	80a30f8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x64>
				if (tokens == NULL)
 80a3150:	2b00      	cmp	r3, #0
 80a3152:	d0c9      	beq.n	80a30e8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x54>
				type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
 80a3154:	f04f 0b01 	mov.w	fp, #1
						break;
					}
					token = &tokens[token->parent];
				}
#else
				for (i = parser->toknext - 1; i >= 0; i--) {
 80a3158:	6867      	ldr	r7, [r4, #4]
 80a315a:	f107 38ff 	add.w	r8, r7, #4294967295
 80a315e:	eb03 1907 	add.w	r9, r3, r7, lsl #4
 80a3162:	f1b8 0f00 	cmp.w	r8, #0
 80a3166:	db4f      	blt.n	80a3208 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x174>
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
 80a3168:	f859 7c0c 	ldr.w	r7, [r9, #-12]
 80a316c:	f1a9 0a10 	sub.w	sl, r9, #16
 80a3170:	3701      	adds	r7, #1
 80a3172:	d045      	beq.n	80a3200 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x16c>
 80a3174:	f859 7c08 	ldr.w	r7, [r9, #-8]
 80a3178:	1c7e      	adds	r6, r7, #1
 80a317a:	d141      	bne.n	80a3200 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x16c>
						if (token->type != type) {
 80a317c:	f89a 9000 	ldrb.w	r9, [sl]
 80a3180:	45d9      	cmp	r9, fp
 80a3182:	d145      	bne.n	80a3210 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x17c>
							return JSMN_ERROR_INVAL;
						}
						parser->toksuper = -1;
 80a3184:	60a7      	str	r7, [r4, #8]
						token->end = parser->pos + 1;
 80a3186:	f10e 0701 	add.w	r7, lr, #1
 80a318a:	f8ca 7008 	str.w	r7, [sl, #8]
						break;
					}
				}
				/* Error if unmatched closing bracket */
				if (i == -1) return JSMN_ERROR_INVAL;
 80a318e:	eb03 1e08 	add.w	lr, r3, r8, lsl #4
				for (; i >= 0; i--) {
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
 80a3192:	f8de 7004 	ldr.w	r7, [lr, #4]
 80a3196:	3701      	adds	r7, #1
 80a3198:	d03d      	beq.n	80a3216 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x182>
 80a319a:	f8de 7008 	ldr.w	r7, [lr, #8]
 80a319e:	3701      	adds	r7, #1
 80a31a0:	d139      	bne.n	80a3216 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x182>
					parser->toksuper = tokens[parser->toksuper].parent;
#else
					for (i = parser->toknext - 1; i >= 0; i--) {
						if (tokens[i].type == JSMN_ARRAY || tokens[i].type == JSMN_OBJECT) {
							if (tokens[i].start != -1 && tokens[i].end == -1) {
								parser->toksuper = i;
 80a31a2:	f8c4 8008 	str.w	r8, [r4, #8]
								break;
 80a31a6:	e79f      	b.n	80a30e8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x54>
				count++;
 80a31a8:	3001      	adds	r0, #1
				if (tokens == NULL) {
 80a31aa:	2b00      	cmp	r3, #0
 80a31ac:	d09c      	beq.n	80a30e8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x54>
	if (parser->toknext >= num_tokens) {
 80a31ae:	6867      	ldr	r7, [r4, #4]
 80a31b0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80a31b2:	42be      	cmp	r6, r7
 80a31b4:	d94e      	bls.n	80a3254 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1c0>
	tok->size = 0;
 80a31b6:	2600      	movs	r6, #0
	tok = &tokens[parser->toknext++];
 80a31b8:	f107 0e01 	add.w	lr, r7, #1
 80a31bc:	f8c4 e004 	str.w	lr, [r4, #4]
 80a31c0:	eb03 1e07 	add.w	lr, r3, r7, lsl #4
	tok->start = tok->end = -1;
 80a31c4:	e9ce 5501 	strd	r5, r5, [lr, #4]
	tok->size = 0;
 80a31c8:	f8ce 600c 	str.w	r6, [lr, #12]
	tok = &tokens[parser->toknext++];
 80a31cc:	ea4f 1a07 	mov.w	sl, r7, lsl #4
				if (parser->toksuper != -1) {
 80a31d0:	68a7      	ldr	r7, [r4, #8]
 80a31d2:	1c7e      	adds	r6, r7, #1
					tokens[parser->toksuper].size++;
 80a31d4:	bf1f      	itttt	ne
 80a31d6:	eb03 1907 	addne.w	r9, r3, r7, lsl #4
 80a31da:	f8d9 700c 	ldrne.w	r7, [r9, #12]
 80a31de:	3701      	addne	r7, #1
 80a31e0:	f8c9 700c 	strne.w	r7, [r9, #12]
				token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
 80a31e4:	f1b8 0f7b 	cmp.w	r8, #123	; 0x7b
 80a31e8:	bf0c      	ite	eq
 80a31ea:	2701      	moveq	r7, #1
 80a31ec:	2702      	movne	r7, #2
 80a31ee:	f803 700a 	strb.w	r7, [r3, sl]
				token->start = parser->pos;
 80a31f2:	6827      	ldr	r7, [r4, #0]
 80a31f4:	f8ce 7004 	str.w	r7, [lr, #4]
				parser->toksuper = parser->toknext - 1;
 80a31f8:	6867      	ldr	r7, [r4, #4]
 80a31fa:	3f01      	subs	r7, #1
 80a31fc:	60a7      	str	r7, [r4, #8]
				break;
 80a31fe:	e773      	b.n	80a30e8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x54>
				for (i = parser->toknext - 1; i >= 0; i--) {
 80a3200:	46d1      	mov	r9, sl
 80a3202:	f108 38ff 	add.w	r8, r8, #4294967295
 80a3206:	e7ac      	b.n	80a3162 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xce>
				if (i == -1) return JSMN_ERROR_INVAL;
 80a3208:	f1b8 3fff 	cmp.w	r8, #4294967295
 80a320c:	f47f af6c 	bne.w	80a30e8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x54>
							return JSMN_ERROR_INVAL;
 80a3210:	f06f 0001 	mvn.w	r0, #1
 80a3214:	e020      	b.n	80a3258 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1c4>
				for (; i >= 0; i--) {
 80a3216:	f108 38ff 	add.w	r8, r8, #4294967295
 80a321a:	f1b8 3fff 	cmp.w	r8, #4294967295
 80a321e:	f1ae 0e10 	sub.w	lr, lr, #16
 80a3222:	d1b6      	bne.n	80a3192 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xfe>
 80a3224:	e760      	b.n	80a30e8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x54>
	parser->pos++;
 80a3226:	f10e 0901 	add.w	r9, lr, #1
 80a322a:	f8c4 9000 	str.w	r9, [r4]
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 80a322e:	f8d4 8000 	ldr.w	r8, [r4]
 80a3232:	4542      	cmp	r2, r8
 80a3234:	f240 8091 	bls.w	80a335a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2c6>
 80a3238:	f811 7008 	ldrb.w	r7, [r1, r8]
 80a323c:	2f00      	cmp	r7, #0
 80a323e:	f000 808c 	beq.w	80a335a <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2c6>
		if (c == '\"') {
 80a3242:	2f22      	cmp	r7, #34	; 0x22
 80a3244:	d12e      	bne.n	80a32a4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x210>
			if (tokens == NULL) {
 80a3246:	b1eb      	cbz	r3, 80a3284 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1f0>
	if (parser->toknext >= num_tokens) {
 80a3248:	6867      	ldr	r7, [r4, #4]
 80a324a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80a324c:	42be      	cmp	r6, r7
 80a324e:	d805      	bhi.n	80a325c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1c8>
		parser->pos = start;
 80a3250:	f8c4 e000 	str.w	lr, [r4]
					return JSMN_ERROR_NOMEM;
 80a3254:	f04f 30ff 	mov.w	r0, #4294967295
			}
		}
	}

	return count;
}
 80a3258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	tok->size = 0;
 80a325c:	2600      	movs	r6, #0
	token->type = type;
 80a325e:	f04f 0a03 	mov.w	sl, #3
	tok = &tokens[parser->toknext++];
 80a3262:	f107 0e01 	add.w	lr, r7, #1
 80a3266:	ea4f 1807 	mov.w	r8, r7, lsl #4
 80a326a:	eb03 1707 	add.w	r7, r3, r7, lsl #4
 80a326e:	f8c4 e004 	str.w	lr, [r4, #4]
	tok->start = tok->end = -1;
 80a3272:	e9c7 5501 	strd	r5, r5, [r7, #4]
	tok->size = 0;
 80a3276:	60fe      	str	r6, [r7, #12]
			jsmn_fill_token(token, JSMN_STRING, start+1, parser->pos);
 80a3278:	f8d4 e000 	ldr.w	lr, [r4]
	token->type = type;
 80a327c:	f803 a008 	strb.w	sl, [r3, r8]
	token->end = end;
 80a3280:	e9c7 9e01 	strd	r9, lr, [r7, #4]
				if (parser->toksuper != -1 && tokens != NULL)
 80a3284:	68a7      	ldr	r7, [r4, #8]
				count++;
 80a3286:	3001      	adds	r0, #1
				if (parser->toksuper != -1 && tokens != NULL)
 80a3288:	1c7e      	adds	r6, r7, #1
 80a328a:	f43f af2d 	beq.w	80a30e8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x54>
 80a328e:	2b00      	cmp	r3, #0
 80a3290:	f43f af2a 	beq.w	80a30e8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x54>
					tokens[parser->toksuper].size++;
 80a3294:	eb03 1e07 	add.w	lr, r3, r7, lsl #4
 80a3298:	f8de 700c 	ldr.w	r7, [lr, #12]
 80a329c:	3701      	adds	r7, #1
 80a329e:	f8ce 700c 	str.w	r7, [lr, #12]
 80a32a2:	e721      	b.n	80a30e8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x54>
		if (c == '\\' && parser->pos + 1 < len) {
 80a32a4:	2f5c      	cmp	r7, #92	; 0x5c
 80a32a6:	d111      	bne.n	80a32cc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x238>
 80a32a8:	f108 0701 	add.w	r7, r8, #1
 80a32ac:	42ba      	cmp	r2, r7
 80a32ae:	d90d      	bls.n	80a32cc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x238>
			parser->pos++;
 80a32b0:	6027      	str	r7, [r4, #0]
			switch (js[parser->pos]) {
 80a32b2:	5dcf      	ldrb	r7, [r1, r7]
 80a32b4:	2f75      	cmp	r7, #117	; 0x75
 80a32b6:	d82b      	bhi.n	80a3310 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x27c>
 80a32b8:	2f6d      	cmp	r7, #109	; 0x6d
 80a32ba:	d80b      	bhi.n	80a32d4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x240>
 80a32bc:	2f66      	cmp	r7, #102	; 0x66
 80a32be:	d827      	bhi.n	80a3310 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x27c>
 80a32c0:	2f5b      	cmp	r7, #91	; 0x5b
 80a32c2:	d81d      	bhi.n	80a3300 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x26c>
 80a32c4:	2f22      	cmp	r7, #34	; 0x22
 80a32c6:	d001      	beq.n	80a32cc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x238>
 80a32c8:	2f2f      	cmp	r7, #47	; 0x2f
 80a32ca:	d121      	bne.n	80a3310 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x27c>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 80a32cc:	6827      	ldr	r7, [r4, #0]
 80a32ce:	3701      	adds	r7, #1
 80a32d0:	6027      	str	r7, [r4, #0]
 80a32d2:	e7ac      	b.n	80a322e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x19a>
 80a32d4:	3f6e      	subs	r7, #110	; 0x6e
 80a32d6:	2f07      	cmp	r7, #7
 80a32d8:	d81a      	bhi.n	80a3310 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x27c>
 80a32da:	a601      	add	r6, pc, #4	; (adr r6, 80a32e0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x24c>)
 80a32dc:	f856 f027 	ldr.w	pc, [r6, r7, lsl #2]
 80a32e0:	080a32cd 	.word	0x080a32cd
 80a32e4:	080a3311 	.word	0x080a3311
 80a32e8:	080a3311 	.word	0x080a3311
 80a32ec:	080a3311 	.word	0x080a3311
 80a32f0:	080a32cd 	.word	0x080a32cd
 80a32f4:	080a3311 	.word	0x080a3311
 80a32f8:	080a32cd 	.word	0x080a32cd
 80a32fc:	080a3317 	.word	0x080a3317
 80a3300:	f240 4641 	movw	r6, #1089	; 0x441
 80a3304:	3f5c      	subs	r7, #92	; 0x5c
 80a3306:	b2ff      	uxtb	r7, r7
 80a3308:	fa0c f707 	lsl.w	r7, ip, r7
 80a330c:	4237      	tst	r7, r6
 80a330e:	d1dd      	bne.n	80a32cc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x238>
			parser->pos = start;
 80a3310:	f8c4 e000 	str.w	lr, [r4]
				if (r < 0) return r;
 80a3314:	e77c      	b.n	80a3210 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x17c>
					parser->pos++;
 80a3316:	f04f 0a04 	mov.w	sl, #4
 80a331a:	f108 0702 	add.w	r7, r8, #2
 80a331e:	6027      	str	r7, [r4, #0]
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
 80a3320:	f8d4 8000 	ldr.w	r8, [r4]
 80a3324:	4542      	cmp	r2, r8
 80a3326:	d803      	bhi.n	80a3330 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x29c>
					parser->pos--;
 80a3328:	6827      	ldr	r7, [r4, #0]
 80a332a:	3f01      	subs	r7, #1
 80a332c:	6027      	str	r7, [r4, #0]
					break;
 80a332e:	e7cd      	b.n	80a32cc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x238>
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
 80a3330:	f811 7008 	ldrb.w	r7, [r1, r8]
 80a3334:	2f00      	cmp	r7, #0
 80a3336:	d0f7      	beq.n	80a3328 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x294>
						if(!((js[parser->pos] >= 48 && js[parser->pos] <= 57) || /* 0-9 */
 80a3338:	f1a7 0b30 	sub.w	fp, r7, #48	; 0x30
 80a333c:	f1bb 0f09 	cmp.w	fp, #9
 80a3340:	d904      	bls.n	80a334c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2b8>
 80a3342:	f027 0720 	bic.w	r7, r7, #32
 80a3346:	3f41      	subs	r7, #65	; 0x41
 80a3348:	2f05      	cmp	r7, #5
 80a334a:	d8e1      	bhi.n	80a3310 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x27c>
						parser->pos++;
 80a334c:	f108 0701 	add.w	r7, r8, #1
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
 80a3350:	f1ba 0a01 	subs.w	sl, sl, #1
						parser->pos++;
 80a3354:	6027      	str	r7, [r4, #0]
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
 80a3356:	d1e3      	bne.n	80a3320 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x28c>
 80a3358:	e7e6      	b.n	80a3328 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x294>
	parser->pos = start;
 80a335a:	f8c4 e000 	str.w	lr, [r4]
				return JSMN_ERROR_PART;
 80a335e:	f06f 0002 	mvn.w	r0, #2
 80a3362:	e779      	b.n	80a3258 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1c4>
				if (tokens != NULL && parser->toksuper != -1 &&
 80a3364:	2b00      	cmp	r3, #0
 80a3366:	f43f aebf 	beq.w	80a30e8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x54>
 80a336a:	68a7      	ldr	r7, [r4, #8]
 80a336c:	1c7e      	adds	r6, r7, #1
 80a336e:	f43f aebb 	beq.w	80a30e8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x54>
						tokens[parser->toksuper].type != JSMN_ARRAY &&
 80a3372:	013f      	lsls	r7, r7, #4
 80a3374:	5ddf      	ldrb	r7, [r3, r7]
 80a3376:	3f01      	subs	r7, #1
 80a3378:	2f01      	cmp	r7, #1
 80a337a:	f67f aeb5 	bls.w	80a30e8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x54>
					for (i = parser->toknext - 1; i >= 0; i--) {
 80a337e:	6867      	ldr	r7, [r4, #4]
 80a3380:	f107 38ff 	add.w	r8, r7, #4294967295
 80a3384:	eb03 1e07 	add.w	lr, r3, r7, lsl #4
 80a3388:	f1b8 0f00 	cmp.w	r8, #0
 80a338c:	f6ff aeac 	blt.w	80a30e8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x54>
						if (tokens[i].type == JSMN_ARRAY || tokens[i].type == JSMN_OBJECT) {
 80a3390:	f81e 7c10 	ldrb.w	r7, [lr, #-16]
 80a3394:	3f01      	subs	r7, #1
 80a3396:	2f01      	cmp	r7, #1
 80a3398:	d808      	bhi.n	80a33ac <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x318>
							if (tokens[i].start != -1 && tokens[i].end == -1) {
 80a339a:	f85e 7c0c 	ldr.w	r7, [lr, #-12]
 80a339e:	3701      	adds	r7, #1
 80a33a0:	d004      	beq.n	80a33ac <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x318>
 80a33a2:	f85e 7c08 	ldr.w	r7, [lr, #-8]
 80a33a6:	3701      	adds	r7, #1
 80a33a8:	f43f aefb 	beq.w	80a31a2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x10e>
					for (i = parser->toknext - 1; i >= 0; i--) {
 80a33ac:	f108 38ff 	add.w	r8, r8, #4294967295
 80a33b0:	f1ae 0e10 	sub.w	lr, lr, #16
 80a33b4:	e7e8      	b.n	80a3388 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2f4>
 80a33b6:	f1a7 0920 	sub.w	r9, r7, #32
 80a33ba:	4e0a      	ldr	r6, [pc, #40]	; (80a33e4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x350>)
 80a33bc:	fa5f f989 	uxtb.w	r9, r9
 80a33c0:	fa0c f909 	lsl.w	r9, ip, r9
 80a33c4:	ea19 0f06 	tst.w	r9, r6
 80a33c8:	f47f aea9 	bne.w	80a311e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x8a>
		if (js[parser->pos] < 32 || js[parser->pos] >= 127) {
 80a33cc:	3f20      	subs	r7, #32
 80a33ce:	2f5e      	cmp	r7, #94	; 0x5e
 80a33d0:	d89e      	bhi.n	80a3310 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x27c>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 80a33d2:	f108 0701 	add.w	r7, r8, #1
 80a33d6:	6027      	str	r7, [r4, #0]
 80a33d8:	e68e      	b.n	80a30f8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x64>
		switch (js[parser->pos]) {
 80a33da:	2f0d      	cmp	r7, #13
 80a33dc:	d1f6      	bne.n	80a33cc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x338>
 80a33de:	e69e      	b.n	80a311e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x8a>
 80a33e0:	00800013 	.word	0x00800013
 80a33e4:	04001001 	.word	0x04001001
 80a33e8:	f007 09df 	and.w	r9, r7, #223	; 0xdf
 80a33ec:	f1b9 0f5d 	cmp.w	r9, #93	; 0x5d
 80a33f0:	e7f4      	b.n	80a33dc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x348>
	if (parser->toknext >= num_tokens) {
 80a33f2:	6867      	ldr	r7, [r4, #4]
 80a33f4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80a33f6:	42be      	cmp	r6, r7
 80a33f8:	f67f af2a 	bls.w	80a3250 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1bc>
	tok->size = 0;
 80a33fc:	2600      	movs	r6, #0
	token->type = type;
 80a33fe:	f04f 0a04 	mov.w	sl, #4
	tok = &tokens[parser->toknext++];
 80a3402:	f107 0801 	add.w	r8, r7, #1
 80a3406:	ea4f 1907 	mov.w	r9, r7, lsl #4
 80a340a:	eb03 1707 	add.w	r7, r3, r7, lsl #4
 80a340e:	f8c4 8004 	str.w	r8, [r4, #4]
	tok->start = tok->end = -1;
 80a3412:	e9c7 5501 	strd	r5, r5, [r7, #4]
	tok->size = 0;
 80a3416:	60fe      	str	r6, [r7, #12]
	jsmn_fill_token(token, JSMN_PRIMITIVE, start, parser->pos);
 80a3418:	f8d4 8000 	ldr.w	r8, [r4]
	token->type = type;
 80a341c:	f803 a009 	strb.w	sl, [r3, r9]
	token->end = end;
 80a3420:	e9c7 e801 	strd	lr, r8, [r7, #4]
	parser->pos--;
 80a3424:	6827      	ldr	r7, [r4, #0]
 80a3426:	3f01      	subs	r7, #1
 80a3428:	e67e      	b.n	80a3128 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x94>
	if (tokens != NULL) {
 80a342a:	2b00      	cmp	r3, #0
 80a342c:	f43f af14 	beq.w	80a3258 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1c4>
		for (i = parser->toknext - 1; i >= 0; i--) {
 80a3430:	6862      	ldr	r2, [r4, #4]
 80a3432:	1e51      	subs	r1, r2, #1
 80a3434:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 80a3438:	2900      	cmp	r1, #0
 80a343a:	f6ff af0d 	blt.w	80a3258 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1c4>
			if (tokens[i].start != -1 && tokens[i].end == -1) {
 80a343e:	f853 2c0c 	ldr.w	r2, [r3, #-12]
 80a3442:	3201      	adds	r2, #1
 80a3444:	d003      	beq.n	80a344e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x3ba>
 80a3446:	f853 2c08 	ldr.w	r2, [r3, #-8]
 80a344a:	3201      	adds	r2, #1
 80a344c:	d087      	beq.n	80a335e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ca>
		for (i = parser->toknext - 1; i >= 0; i--) {
 80a344e:	3901      	subs	r1, #1
 80a3450:	3b10      	subs	r3, #16
 80a3452:	e7f1      	b.n	80a3438 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x3a4>

080a3454 <_ZN10JsonParser5parseEv>:
bool JsonParser::parse() {
 80a3454:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (offset == 0) {
 80a3456:	68c2      	ldr	r2, [r0, #12]
bool JsonParser::parse() {
 80a3458:	4604      	mov	r4, r0
	if (offset == 0) {
 80a345a:	b912      	cbnz	r2, 80a3462 <_ZN10JsonParser5parseEv+0xe>
		return false;
 80a345c:	2000      	movs	r0, #0
}
 80a345e:	b003      	add	sp, #12
 80a3460:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (tokens) {
 80a3462:	6943      	ldr	r3, [r0, #20]
 80a3464:	f100 0620 	add.w	r6, r0, #32
 80a3468:	b1ab      	cbz	r3, 80a3496 <_ZN10JsonParser5parseEv+0x42>
/**
 * Creates a new parser based over a given  buffer with an array of tokens
 * available.
 */
void jsmn_init(jsmn_parser *parser) {
	parser->pos = 0;
 80a346a:	2100      	movs	r1, #0
	parser->toknext = 0;
 80a346c:	e9c0 1108 	strd	r1, r1, [r0, #32]
	parser->toksuper = -1;
 80a3470:	f04f 31ff 	mov.w	r1, #4294967295
 80a3474:	6281      	str	r1, [r0, #40]	; 0x28
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
 80a3476:	69c1      	ldr	r1, [r0, #28]
 80a3478:	9100      	str	r1, [sp, #0]
 80a347a:	6841      	ldr	r1, [r0, #4]
 80a347c:	4630      	mov	r0, r6
 80a347e:	f7ff fe09 	bl	80a3094 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
		if (result == JsonParserGeneratorRK::JSMN_ERROR_NOMEM) {
 80a3482:	1c43      	adds	r3, r0, #1
 80a3484:	d12c      	bne.n	80a34e0 <_ZN10JsonParser5parseEv+0x8c>
			if (staticBuffers) {
 80a3486:	7c25      	ldrb	r5, [r4, #16]
 80a3488:	2d00      	cmp	r5, #0
 80a348a:	d1e7      	bne.n	80a345c <_ZN10JsonParser5parseEv+0x8>
			free(tokens);
 80a348c:	6960      	ldr	r0, [r4, #20]
 80a348e:	f000 faa1 	bl	80a39d4 <free>
			tokens = 0;
 80a3492:	6165      	str	r5, [r4, #20]
			maxTokens = 0;
 80a3494:	61e5      	str	r5, [r4, #28]
	parser->pos = 0;
 80a3496:	2500      	movs	r5, #0
	parser->toksuper = -1;
 80a3498:	f04f 37ff 	mov.w	r7, #4294967295
	int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, 0, 0);
 80a349c:	462b      	mov	r3, r5
 80a349e:	4630      	mov	r0, r6
	parser->toknext = 0;
 80a34a0:	e9c4 5508 	strd	r5, r5, [r4, #32]
	int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, 0, 0);
 80a34a4:	68e2      	ldr	r2, [r4, #12]
 80a34a6:	6861      	ldr	r1, [r4, #4]
	parser->toksuper = -1;
 80a34a8:	62a7      	str	r7, [r4, #40]	; 0x28
	int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, 0, 0);
 80a34aa:	9500      	str	r5, [sp, #0]
 80a34ac:	f7ff fdf2 	bl	80a3094 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
	if (result < 0) {
 80a34b0:	2800      	cmp	r0, #0
 80a34b2:	dbd3      	blt.n	80a345c <_ZN10JsonParser5parseEv+0x8>
	maxTokens = (size_t) result;
 80a34b4:	61e0      	str	r0, [r4, #28]
	if (maxTokens > 0) {
 80a34b6:	d01b      	beq.n	80a34f0 <_ZN10JsonParser5parseEv+0x9c>
		tokens = (JsonParserGeneratorRK::jsmntok_t *)malloc(sizeof(JsonParserGeneratorRK::jsmntok_t) * maxTokens);
 80a34b8:	0100      	lsls	r0, r0, #4
 80a34ba:	f000 fa83 	bl	80a39c4 <malloc>
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
 80a34be:	69e2      	ldr	r2, [r4, #28]
		tokens = (JsonParserGeneratorRK::jsmntok_t *)malloc(sizeof(JsonParserGeneratorRK::jsmntok_t) * maxTokens);
 80a34c0:	4603      	mov	r3, r0
 80a34c2:	6160      	str	r0, [r4, #20]
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
 80a34c4:	9200      	str	r2, [sp, #0]
 80a34c6:	4630      	mov	r0, r6
	parser->toknext = 0;
 80a34c8:	e9c4 5508 	strd	r5, r5, [r4, #32]
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
 80a34cc:	68e2      	ldr	r2, [r4, #12]
 80a34ce:	6861      	ldr	r1, [r4, #4]
	parser->toksuper = -1;
 80a34d0:	62a7      	str	r7, [r4, #40]	; 0x28
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
 80a34d2:	f7ff fddf 	bl	80a3094 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
		tokensEnd = &tokens[result];
 80a34d6:	6963      	ldr	r3, [r4, #20]
 80a34d8:	eb03 1300 	add.w	r3, r3, r0, lsl #4
		tokensEnd = tokens;
 80a34dc:	61a3      	str	r3, [r4, #24]
 80a34de:	e005      	b.n	80a34ec <_ZN10JsonParser5parseEv+0x98>
		if (result < 0) {
 80a34e0:	2800      	cmp	r0, #0
 80a34e2:	dbbb      	blt.n	80a345c <_ZN10JsonParser5parseEv+0x8>
			tokensEnd = &tokens[result];
 80a34e4:	6963      	ldr	r3, [r4, #20]
 80a34e6:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 80a34ea:	61a0      	str	r0, [r4, #24]
	return true;
 80a34ec:	2001      	movs	r0, #1
 80a34ee:	e7b6      	b.n	80a345e <_ZN10JsonParser5parseEv+0xa>
		tokensEnd = tokens;
 80a34f0:	6963      	ldr	r3, [r4, #20]
 80a34f2:	e7f3      	b.n	80a34dc <_ZN10JsonParser5parseEv+0x88>

080a34f4 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a34f4:	b508      	push	{r3, lr}
 80a34f6:	4b02      	ldr	r3, [pc, #8]	; (80a3500 <HAL_Pin_Mode+0xc>)
 80a34f8:	681b      	ldr	r3, [r3, #0]
 80a34fa:	689b      	ldr	r3, [r3, #8]
 80a34fc:	9301      	str	r3, [sp, #4]
 80a34fe:	bd08      	pop	{r3, pc}
 80a3500:	080601b0 	.word	0x080601b0

080a3504 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a3504:	b508      	push	{r3, lr}
 80a3506:	4b02      	ldr	r3, [pc, #8]	; (80a3510 <HAL_Get_Pin_Mode+0xc>)
 80a3508:	681b      	ldr	r3, [r3, #0]
 80a350a:	68db      	ldr	r3, [r3, #12]
 80a350c:	9301      	str	r3, [sp, #4]
 80a350e:	bd08      	pop	{r3, pc}
 80a3510:	080601b0 	.word	0x080601b0

080a3514 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a3514:	b508      	push	{r3, lr}
 80a3516:	4b02      	ldr	r3, [pc, #8]	; (80a3520 <HAL_GPIO_Write+0xc>)
 80a3518:	681b      	ldr	r3, [r3, #0]
 80a351a:	691b      	ldr	r3, [r3, #16]
 80a351c:	9301      	str	r3, [sp, #4]
 80a351e:	bd08      	pop	{r3, pc}
 80a3520:	080601b0 	.word	0x080601b0

080a3524 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 80a3524:	b508      	push	{r3, lr}
 80a3526:	4b02      	ldr	r3, [pc, #8]	; (80a3530 <HAL_GPIO_Read+0xc>)
 80a3528:	681b      	ldr	r3, [r3, #0]
 80a352a:	695b      	ldr	r3, [r3, #20]
 80a352c:	9301      	str	r3, [sp, #4]
 80a352e:	bd08      	pop	{r3, pc}
 80a3530:	080601b0 	.word	0x080601b0

080a3534 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a3534:	b508      	push	{r3, lr}
 80a3536:	4b02      	ldr	r3, [pc, #8]	; (80a3540 <HAL_RNG_GetRandomNumber+0xc>)
 80a3538:	681b      	ldr	r3, [r3, #0]
 80a353a:	685b      	ldr	r3, [r3, #4]
 80a353c:	9301      	str	r3, [sp, #4]
 80a353e:	bd08      	pop	{r3, pc}
 80a3540:	0806019c 	.word	0x0806019c

080a3544 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a3544:	b508      	push	{r3, lr}
 80a3546:	4b02      	ldr	r3, [pc, #8]	; (80a3550 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a3548:	681b      	ldr	r3, [r3, #0]
 80a354a:	695b      	ldr	r3, [r3, #20]
 80a354c:	9301      	str	r3, [sp, #4]
 80a354e:	bd08      	pop	{r3, pc}
 80a3550:	0806019c 	.word	0x0806019c

080a3554 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
 80a3554:	b508      	push	{r3, lr}
 80a3556:	4b02      	ldr	r3, [pc, #8]	; (80a3560 <hal_rtc_time_is_valid+0xc>)
 80a3558:	681b      	ldr	r3, [r3, #0]
 80a355a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a355c:	9301      	str	r3, [sp, #4]
 80a355e:	bd08      	pop	{r3, pc}
 80a3560:	0806019c 	.word	0x0806019c

080a3564 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
 80a3564:	b508      	push	{r3, lr}
 80a3566:	4b02      	ldr	r3, [pc, #8]	; (80a3570 <hal_rtc_get_time+0xc>)
 80a3568:	681b      	ldr	r3, [r3, #0]
 80a356a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a356c:	9301      	str	r3, [sp, #4]
 80a356e:	bd08      	pop	{r3, pc}
 80a3570:	0806019c 	.word	0x0806019c

080a3574 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80a3574:	b508      	push	{r3, lr}
 80a3576:	4b02      	ldr	r3, [pc, #8]	; (80a3580 <os_mutex_recursive_create+0xc>)
 80a3578:	681b      	ldr	r3, [r3, #0]
 80a357a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a357c:	9301      	str	r3, [sp, #4]
 80a357e:	bd08      	pop	{r3, pc}
 80a3580:	080601d0 	.word	0x080601d0

080a3584 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80a3584:	b508      	push	{r3, lr}
 80a3586:	4b02      	ldr	r3, [pc, #8]	; (80a3590 <os_mutex_recursive_destroy+0xc>)
 80a3588:	681b      	ldr	r3, [r3, #0]
 80a358a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a358c:	9301      	str	r3, [sp, #4]
 80a358e:	bd08      	pop	{r3, pc}
 80a3590:	080601d0 	.word	0x080601d0

080a3594 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
 80a3594:	b508      	push	{r3, lr}
 80a3596:	4b02      	ldr	r3, [pc, #8]	; (80a35a0 <os_mutex_recursive_lock+0xc>)
 80a3598:	681b      	ldr	r3, [r3, #0]
 80a359a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a359c:	9301      	str	r3, [sp, #4]
 80a359e:	bd08      	pop	{r3, pc}
 80a35a0:	080601d0 	.word	0x080601d0

080a35a4 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
 80a35a4:	b508      	push	{r3, lr}
 80a35a6:	4b02      	ldr	r3, [pc, #8]	; (80a35b0 <os_mutex_recursive_unlock+0xc>)
 80a35a8:	681b      	ldr	r3, [r3, #0]
 80a35aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a35ac:	9301      	str	r3, [sp, #4]
 80a35ae:	bd08      	pop	{r3, pc}
 80a35b0:	080601d0 	.word	0x080601d0

080a35b4 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
 80a35b4:	b508      	push	{r3, lr}
 80a35b6:	4b02      	ldr	r3, [pc, #8]	; (80a35c0 <hal_usart_init+0xc>)
 80a35b8:	681b      	ldr	r3, [r3, #0]
 80a35ba:	699b      	ldr	r3, [r3, #24]
 80a35bc:	9301      	str	r3, [sp, #4]
 80a35be:	bd08      	pop	{r3, pc}
 80a35c0:	080601c4 	.word	0x080601c4

080a35c4 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 80a35c4:	b508      	push	{r3, lr}
 80a35c6:	4b02      	ldr	r3, [pc, #8]	; (80a35d0 <hal_usart_write+0xc>)
 80a35c8:	681b      	ldr	r3, [r3, #0]
 80a35ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a35cc:	9301      	str	r3, [sp, #4]
 80a35ce:	bd08      	pop	{r3, pc}
 80a35d0:	080601c4 	.word	0x080601c4

080a35d4 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 80a35d4:	b508      	push	{r3, lr}
 80a35d6:	4b02      	ldr	r3, [pc, #8]	; (80a35e0 <hal_usart_available+0xc>)
 80a35d8:	681b      	ldr	r3, [r3, #0]
 80a35da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a35dc:	9301      	str	r3, [sp, #4]
 80a35de:	bd08      	pop	{r3, pc}
 80a35e0:	080601c4 	.word	0x080601c4

080a35e4 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 80a35e4:	b508      	push	{r3, lr}
 80a35e6:	4b02      	ldr	r3, [pc, #8]	; (80a35f0 <hal_usart_read+0xc>)
 80a35e8:	681b      	ldr	r3, [r3, #0]
 80a35ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a35ec:	9301      	str	r3, [sp, #4]
 80a35ee:	bd08      	pop	{r3, pc}
 80a35f0:	080601c4 	.word	0x080601c4

080a35f4 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 80a35f4:	b508      	push	{r3, lr}
 80a35f6:	4b02      	ldr	r3, [pc, #8]	; (80a3600 <hal_usart_peek+0xc>)
 80a35f8:	681b      	ldr	r3, [r3, #0]
 80a35fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a35fc:	9301      	str	r3, [sp, #4]
 80a35fe:	bd08      	pop	{r3, pc}
 80a3600:	080601c4 	.word	0x080601c4

080a3604 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 80a3604:	b508      	push	{r3, lr}
 80a3606:	4b02      	ldr	r3, [pc, #8]	; (80a3610 <hal_usart_flush+0xc>)
 80a3608:	681b      	ldr	r3, [r3, #0]
 80a360a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a360c:	9301      	str	r3, [sp, #4]
 80a360e:	bd08      	pop	{r3, pc}
 80a3610:	080601c4 	.word	0x080601c4

080a3614 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 80a3614:	b508      	push	{r3, lr}
 80a3616:	4b02      	ldr	r3, [pc, #8]	; (80a3620 <hal_usart_is_enabled+0xc>)
 80a3618:	681b      	ldr	r3, [r3, #0]
 80a361a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a361c:	9301      	str	r3, [sp, #4]
 80a361e:	bd08      	pop	{r3, pc}
 80a3620:	080601c4 	.word	0x080601c4

080a3624 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 80a3624:	b508      	push	{r3, lr}
 80a3626:	4b02      	ldr	r3, [pc, #8]	; (80a3630 <hal_usart_available_data_for_write+0xc>)
 80a3628:	681b      	ldr	r3, [r3, #0]
 80a362a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a362c:	9301      	str	r3, [sp, #4]
 80a362e:	bd08      	pop	{r3, pc}
 80a3630:	080601c4 	.word	0x080601c4

080a3634 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
 80a3634:	b508      	push	{r3, lr}
 80a3636:	4b02      	ldr	r3, [pc, #8]	; (80a3640 <hal_usart_begin_config+0xc>)
 80a3638:	681b      	ldr	r3, [r3, #0]
 80a363a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a363c:	9301      	str	r3, [sp, #4]
 80a363e:	bd08      	pop	{r3, pc}
 80a3640:	080601c4 	.word	0x080601c4

080a3644 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 80a3644:	b508      	push	{r3, lr}
 80a3646:	4b02      	ldr	r3, [pc, #8]	; (80a3650 <hal_i2c_write+0xc>)
 80a3648:	681b      	ldr	r3, [r3, #0]
 80a364a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a364c:	9301      	str	r3, [sp, #4]
 80a364e:	bd08      	pop	{r3, pc}
 80a3650:	080601ac 	.word	0x080601ac

080a3654 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 80a3654:	b508      	push	{r3, lr}
 80a3656:	4b02      	ldr	r3, [pc, #8]	; (80a3660 <hal_i2c_available+0xc>)
 80a3658:	681b      	ldr	r3, [r3, #0]
 80a365a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a365c:	9301      	str	r3, [sp, #4]
 80a365e:	bd08      	pop	{r3, pc}
 80a3660:	080601ac 	.word	0x080601ac

080a3664 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 80a3664:	b508      	push	{r3, lr}
 80a3666:	4b02      	ldr	r3, [pc, #8]	; (80a3670 <hal_i2c_read+0xc>)
 80a3668:	681b      	ldr	r3, [r3, #0]
 80a366a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a366c:	9301      	str	r3, [sp, #4]
 80a366e:	bd08      	pop	{r3, pc}
 80a3670:	080601ac 	.word	0x080601ac

080a3674 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 80a3674:	b508      	push	{r3, lr}
 80a3676:	4b02      	ldr	r3, [pc, #8]	; (80a3680 <hal_i2c_peek+0xc>)
 80a3678:	681b      	ldr	r3, [r3, #0]
 80a367a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a367c:	9301      	str	r3, [sp, #4]
 80a367e:	bd08      	pop	{r3, pc}
 80a3680:	080601ac 	.word	0x080601ac

080a3684 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 80a3684:	b508      	push	{r3, lr}
 80a3686:	4b02      	ldr	r3, [pc, #8]	; (80a3690 <hal_i2c_flush+0xc>)
 80a3688:	681b      	ldr	r3, [r3, #0]
 80a368a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a368c:	9301      	str	r3, [sp, #4]
 80a368e:	bd08      	pop	{r3, pc}
 80a3690:	080601ac 	.word	0x080601ac

080a3694 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 80a3694:	b508      	push	{r3, lr}
 80a3696:	4b02      	ldr	r3, [pc, #8]	; (80a36a0 <hal_i2c_is_enabled+0xc>)
 80a3698:	681b      	ldr	r3, [r3, #0]
 80a369a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a369c:	9301      	str	r3, [sp, #4]
 80a369e:	bd08      	pop	{r3, pc}
 80a36a0:	080601ac 	.word	0x080601ac

080a36a4 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 80a36a4:	b508      	push	{r3, lr}
 80a36a6:	4b03      	ldr	r3, [pc, #12]	; (80a36b4 <hal_i2c_init+0x10>)
 80a36a8:	681b      	ldr	r3, [r3, #0]
 80a36aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a36ae:	9301      	str	r3, [sp, #4]
 80a36b0:	bd08      	pop	{r3, pc}
 80a36b2:	0000      	.short	0x0000
 80a36b4:	080601ac 	.word	0x080601ac

080a36b8 <socket_active_status>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, socket_active_status, uint8_t(sock_handle_t))
 80a36b8:	b508      	push	{r3, lr}
 80a36ba:	4b02      	ldr	r3, [pc, #8]	; (80a36c4 <socket_active_status+0xc>)
 80a36bc:	681b      	ldr	r3, [r3, #0]
 80a36be:	681b      	ldr	r3, [r3, #0]
 80a36c0:	9301      	str	r3, [sp, #4]
 80a36c2:	bd08      	pop	{r3, pc}
 80a36c4:	080601bc 	.word	0x080601bc

080a36c8 <socket_handle_valid>:
DYNALIB_FN(1, hal_socket, socket_handle_valid, uint8_t(sock_handle_t))
 80a36c8:	b508      	push	{r3, lr}
 80a36ca:	4b02      	ldr	r3, [pc, #8]	; (80a36d4 <socket_handle_valid+0xc>)
 80a36cc:	681b      	ldr	r3, [r3, #0]
 80a36ce:	685b      	ldr	r3, [r3, #4]
 80a36d0:	9301      	str	r3, [sp, #4]
 80a36d2:	bd08      	pop	{r3, pc}
 80a36d4:	080601bc 	.word	0x080601bc

080a36d8 <socket_create>:
DYNALIB_FN(2, hal_socket, socket_create, sock_handle_t(uint8_t, uint8_t, uint8_t, uint16_t, network_interface_t))
 80a36d8:	b508      	push	{r3, lr}
 80a36da:	4b02      	ldr	r3, [pc, #8]	; (80a36e4 <socket_create+0xc>)
 80a36dc:	681b      	ldr	r3, [r3, #0]
 80a36de:	689b      	ldr	r3, [r3, #8]
 80a36e0:	9301      	str	r3, [sp, #4]
 80a36e2:	bd08      	pop	{r3, pc}
 80a36e4:	080601bc 	.word	0x080601bc

080a36e8 <socket_connect>:
DYNALIB_FN(3, hal_socket, socket_connect, int32_t(sock_handle_t, const sockaddr_t*, long))
 80a36e8:	b508      	push	{r3, lr}
 80a36ea:	4b02      	ldr	r3, [pc, #8]	; (80a36f4 <socket_connect+0xc>)
 80a36ec:	681b      	ldr	r3, [r3, #0]
 80a36ee:	68db      	ldr	r3, [r3, #12]
 80a36f0:	9301      	str	r3, [sp, #4]
 80a36f2:	bd08      	pop	{r3, pc}
 80a36f4:	080601bc 	.word	0x080601bc

080a36f8 <socket_receive>:
DYNALIB_FN(4, hal_socket, socket_receive, sock_result_t(sock_handle_t, void*, socklen_t, system_tick_t))
 80a36f8:	b508      	push	{r3, lr}
 80a36fa:	4b02      	ldr	r3, [pc, #8]	; (80a3704 <socket_receive+0xc>)
 80a36fc:	681b      	ldr	r3, [r3, #0]
 80a36fe:	691b      	ldr	r3, [r3, #16]
 80a3700:	9301      	str	r3, [sp, #4]
 80a3702:	bd08      	pop	{r3, pc}
 80a3704:	080601bc 	.word	0x080601bc

080a3708 <socket_close>:
DYNALIB_FN(5, hal_socket, socket_receivefrom, sock_result_t(sock_handle_t, void*, socklen_t, uint32_t, sockaddr_t*, socklen_t*))
DYNALIB_FN(6, hal_socket, socket_send, sock_result_t(sock_handle_t, const void*, socklen_t))
DYNALIB_FN(7, hal_socket, socket_sendto, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, sockaddr_t*, socklen_t))
DYNALIB_FN(8, hal_socket, socket_close, sock_result_t(sock_handle_t))
 80a3708:	b508      	push	{r3, lr}
 80a370a:	4b02      	ldr	r3, [pc, #8]	; (80a3714 <socket_close+0xc>)
 80a370c:	681b      	ldr	r3, [r3, #0]
 80a370e:	6a1b      	ldr	r3, [r3, #32]
 80a3710:	9301      	str	r3, [sp, #4]
 80a3712:	bd08      	pop	{r3, pc}
 80a3714:	080601bc 	.word	0x080601bc

080a3718 <socket_handle_invalid>:
DYNALIB_FN(9, hal_socket, socket_reset_blocking_call, sock_result_t(void))
DYNALIB_FN(10, hal_socket, socket_create_tcp_server, sock_result_t(uint16_t, network_interface_t))
DYNALIB_FN(11, hal_socket, socket_accept, sock_result_t(sock_handle_t))
DYNALIB_FN(12, hal_socket, socket_handle_invalid, sock_handle_t(void))
 80a3718:	b508      	push	{r3, lr}
 80a371a:	4b02      	ldr	r3, [pc, #8]	; (80a3724 <socket_handle_invalid+0xc>)
 80a371c:	681b      	ldr	r3, [r3, #0]
 80a371e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a3720:	9301      	str	r3, [sp, #4]
 80a3722:	bd08      	pop	{r3, pc}
 80a3724:	080601bc 	.word	0x080601bc

080a3728 <socket_send_ex>:
DYNALIB_FN(13, hal_socket, socket_join_multicast, sock_result_t(const HAL_IPAddress*, network_interface_t, socket_multicast_info_t*))
DYNALIB_FN(14, hal_socket, socket_leave_multicast, sock_result_t(const HAL_IPAddress*, network_interface_t, socket_multicast_info_t*))
DYNALIB_FN(15, hal_socket, socket_peer, sock_result_t(sock_handle_t, sock_peer_t*, void*))
DYNALIB_FN(16, hal_socket, socket_shutdown, sock_result_t(sock_handle_t, int))
DYNALIB_FN(17, hal_socket, socket_send_ex, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, system_tick_t, void*))
 80a3728:	b508      	push	{r3, lr}
 80a372a:	4b02      	ldr	r3, [pc, #8]	; (80a3734 <socket_send_ex+0xc>)
 80a372c:	681b      	ldr	r3, [r3, #0]
 80a372e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a3730:	9301      	str	r3, [sp, #4]
 80a3732:	bd08      	pop	{r3, pc}
 80a3734:	080601bc 	.word	0x080601bc

080a3738 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
 80a3738:	b508      	push	{r3, lr}
 80a373a:	4b02      	ldr	r3, [pc, #8]	; (80a3744 <hal_spi_begin+0xc>)
 80a373c:	681b      	ldr	r3, [r3, #0]
 80a373e:	681b      	ldr	r3, [r3, #0]
 80a3740:	9301      	str	r3, [sp, #4]
 80a3742:	bd08      	pop	{r3, pc}
 80a3744:	080601b4 	.word	0x080601b4

080a3748 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
 80a3748:	b508      	push	{r3, lr}
 80a374a:	4b02      	ldr	r3, [pc, #8]	; (80a3754 <hal_spi_transfer+0xc>)
 80a374c:	681b      	ldr	r3, [r3, #0]
 80a374e:	695b      	ldr	r3, [r3, #20]
 80a3750:	9301      	str	r3, [sp, #4]
 80a3752:	bd08      	pop	{r3, pc}
 80a3754:	080601b4 	.word	0x080601b4

080a3758 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 80a3758:	b508      	push	{r3, lr}
 80a375a:	4b02      	ldr	r3, [pc, #8]	; (80a3764 <hal_spi_init+0xc>)
 80a375c:	681b      	ldr	r3, [r3, #0]
 80a375e:	69db      	ldr	r3, [r3, #28]
 80a3760:	9301      	str	r3, [sp, #4]
 80a3762:	bd08      	pop	{r3, pc}
 80a3764:	080601b4 	.word	0x080601b4

080a3768 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 80a3768:	b508      	push	{r3, lr}
 80a376a:	4b02      	ldr	r3, [pc, #8]	; (80a3774 <hal_spi_is_enabled+0xc>)
 80a376c:	681b      	ldr	r3, [r3, #0]
 80a376e:	6a1b      	ldr	r3, [r3, #32]
 80a3770:	9301      	str	r3, [sp, #4]
 80a3772:	bd08      	pop	{r3, pc}
 80a3774:	080601b4 	.word	0x080601b4

080a3778 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a3778:	b508      	push	{r3, lr}
 80a377a:	4b02      	ldr	r3, [pc, #8]	; (80a3784 <HAL_USB_USART_Init+0xc>)
 80a377c:	681b      	ldr	r3, [r3, #0]
 80a377e:	681b      	ldr	r3, [r3, #0]
 80a3780:	9301      	str	r3, [sp, #4]
 80a3782:	bd08      	pop	{r3, pc}
 80a3784:	080601d8 	.word	0x080601d8

080a3788 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a3788:	b508      	push	{r3, lr}
 80a378a:	4b02      	ldr	r3, [pc, #8]	; (80a3794 <HAL_USB_USART_Begin+0xc>)
 80a378c:	681b      	ldr	r3, [r3, #0]
 80a378e:	685b      	ldr	r3, [r3, #4]
 80a3790:	9301      	str	r3, [sp, #4]
 80a3792:	bd08      	pop	{r3, pc}
 80a3794:	080601d8 	.word	0x080601d8

080a3798 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a3798:	b508      	push	{r3, lr}
 80a379a:	4b02      	ldr	r3, [pc, #8]	; (80a37a4 <HAL_USB_USART_Available_Data+0xc>)
 80a379c:	681b      	ldr	r3, [r3, #0]
 80a379e:	691b      	ldr	r3, [r3, #16]
 80a37a0:	9301      	str	r3, [sp, #4]
 80a37a2:	bd08      	pop	{r3, pc}
 80a37a4:	080601d8 	.word	0x080601d8

080a37a8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a37a8:	b508      	push	{r3, lr}
 80a37aa:	4b02      	ldr	r3, [pc, #8]	; (80a37b4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a37ac:	681b      	ldr	r3, [r3, #0]
 80a37ae:	695b      	ldr	r3, [r3, #20]
 80a37b0:	9301      	str	r3, [sp, #4]
 80a37b2:	bd08      	pop	{r3, pc}
 80a37b4:	080601d8 	.word	0x080601d8

080a37b8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a37b8:	b508      	push	{r3, lr}
 80a37ba:	4b02      	ldr	r3, [pc, #8]	; (80a37c4 <HAL_USB_USART_Receive_Data+0xc>)
 80a37bc:	681b      	ldr	r3, [r3, #0]
 80a37be:	699b      	ldr	r3, [r3, #24]
 80a37c0:	9301      	str	r3, [sp, #4]
 80a37c2:	bd08      	pop	{r3, pc}
 80a37c4:	080601d8 	.word	0x080601d8

080a37c8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a37c8:	b508      	push	{r3, lr}
 80a37ca:	4b02      	ldr	r3, [pc, #8]	; (80a37d4 <HAL_USB_USART_Send_Data+0xc>)
 80a37cc:	681b      	ldr	r3, [r3, #0]
 80a37ce:	69db      	ldr	r3, [r3, #28]
 80a37d0:	9301      	str	r3, [sp, #4]
 80a37d2:	bd08      	pop	{r3, pc}
 80a37d4:	080601d8 	.word	0x080601d8

080a37d8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a37d8:	b508      	push	{r3, lr}
 80a37da:	4b02      	ldr	r3, [pc, #8]	; (80a37e4 <HAL_USB_USART_Flush_Data+0xc>)
 80a37dc:	681b      	ldr	r3, [r3, #0]
 80a37de:	6a1b      	ldr	r3, [r3, #32]
 80a37e0:	9301      	str	r3, [sp, #4]
 80a37e2:	bd08      	pop	{r3, pc}
 80a37e4:	080601d8 	.word	0x080601d8

080a37e8 <HAL_NET_SetNetWatchDog>:

DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
 80a37e8:	b508      	push	{r3, lr}
 80a37ea:	4b02      	ldr	r3, [pc, #8]	; (80a37f4 <HAL_NET_SetNetWatchDog+0xc>)
 80a37ec:	681b      	ldr	r3, [r3, #0]
 80a37ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a37f0:	9301      	str	r3, [sp, #4]
 80a37f2:	bd08      	pop	{r3, pc}
 80a37f4:	080601c0 	.word	0x080601c0

080a37f8 <inet_gethostbyname>:
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a37f8:	b508      	push	{r3, lr}
 80a37fa:	4b02      	ldr	r3, [pc, #8]	; (80a3804 <inet_gethostbyname+0xc>)
 80a37fc:	681b      	ldr	r3, [r3, #0]
 80a37fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a3800:	9301      	str	r3, [sp, #4]
 80a3802:	bd08      	pop	{r3, pc}
 80a3804:	080601c0 	.word	0x080601c0

080a3808 <wlan_select_antenna>:
DYNALIB_FN(19, hal_wlan, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(20, hal_wlan, wlan_select_antenna, int(WLanSelectAntenna_TypeDef))
 80a3808:	b508      	push	{r3, lr}
 80a380a:	4b02      	ldr	r3, [pc, #8]	; (80a3814 <wlan_select_antenna+0xc>)
 80a380c:	681b      	ldr	r3, [r3, #0]
 80a380e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80a3810:	9301      	str	r3, [sp, #4]
 80a3812:	bd08      	pop	{r3, pc}
 80a3814:	080601c0 	.word	0x080601c0

080a3818 <wlan_connected_info>:
DYNALIB_FN(24, hal_wlan, wlan_get_credentials, int(wlan_scan_result_t, void*))
DYNALIB_FN(25, hal_wlan, softap_set_application_page_handler, int(PageProvider* provider, void* reserved))
DYNALIB_FN(26, hal_wlan, wlan_restart, int(void*))
DYNALIB_FN(27, hal_wlan, wlan_set_hostname, int(const char*, void*))
DYNALIB_FN(28, hal_wlan, wlan_get_hostname, int(char*, size_t, void*))
DYNALIB_FN(29, hal_wlan, wlan_connected_info, int(void*, wlan_connected_info_t*, void*))
 80a3818:	b508      	push	{r3, lr}
 80a381a:	4b02      	ldr	r3, [pc, #8]	; (80a3824 <wlan_connected_info+0xc>)
 80a381c:	681b      	ldr	r3, [r3, #0]
 80a381e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a3820:	9301      	str	r3, [sp, #4]
 80a3822:	bd08      	pop	{r3, pc}
 80a3824:	080601c0 	.word	0x080601c0

080a3828 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
 80a3828:	b508      	push	{r3, lr}
 80a382a:	4b02      	ldr	r3, [pc, #8]	; (80a3834 <log_message+0xc>)
 80a382c:	681b      	ldr	r3, [r3, #0]
 80a382e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80a3830:	9301      	str	r3, [sp, #4]
 80a3832:	bd08      	pop	{r3, pc}
 80a3834:	080201a8 	.word	0x080201a8

080a3838 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 80a3838:	b508      	push	{r3, lr}
 80a383a:	4b02      	ldr	r3, [pc, #8]	; (80a3844 <system_mode+0xc>)
 80a383c:	681b      	ldr	r3, [r3, #0]
 80a383e:	681b      	ldr	r3, [r3, #0]
 80a3840:	9301      	str	r3, [sp, #4]
 80a3842:	bd08      	pop	{r3, pc}
 80a3844:	080601a4 	.word	0x080601a4

080a3848 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a3848:	b508      	push	{r3, lr}
 80a384a:	4b02      	ldr	r3, [pc, #8]	; (80a3854 <set_system_mode+0xc>)
 80a384c:	681b      	ldr	r3, [r3, #0]
 80a384e:	685b      	ldr	r3, [r3, #4]
 80a3850:	9301      	str	r3, [sp, #4]
 80a3852:	bd08      	pop	{r3, pc}
 80a3854:	080601a4 	.word	0x080601a4

080a3858 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a3858:	b508      	push	{r3, lr}
 80a385a:	4b02      	ldr	r3, [pc, #8]	; (80a3864 <system_delay_ms+0xc>)
 80a385c:	681b      	ldr	r3, [r3, #0]
 80a385e:	695b      	ldr	r3, [r3, #20]
 80a3860:	9301      	str	r3, [sp, #4]
 80a3862:	bd08      	pop	{r3, pc}
 80a3864:	080601a4 	.word	0x080601a4

080a3868 <system_thread_get_state>:
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 80a3868:	b508      	push	{r3, lr}
 80a386a:	4b02      	ldr	r3, [pc, #8]	; (80a3874 <system_thread_get_state+0xc>)
 80a386c:	681b      	ldr	r3, [r3, #0]
 80a386e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a3870:	9301      	str	r3, [sp, #4]
 80a3872:	bd08      	pop	{r3, pc}
 80a3874:	080601a4 	.word	0x080601a4

080a3878 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a3878:	b508      	push	{r3, lr}
 80a387a:	4b03      	ldr	r3, [pc, #12]	; (80a3888 <system_ctrl_set_app_request_handler+0x10>)
 80a387c:	681b      	ldr	r3, [r3, #0]
 80a387e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a3882:	9301      	str	r3, [sp, #4]
 80a3884:	bd08      	pop	{r3, pc}
 80a3886:	0000      	.short	0x0000
 80a3888:	080601a4 	.word	0x080601a4

080a388c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a388c:	b508      	push	{r3, lr}
 80a388e:	4b03      	ldr	r3, [pc, #12]	; (80a389c <system_ctrl_set_result+0x10>)
 80a3890:	681b      	ldr	r3, [r3, #0]
 80a3892:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a3896:	9301      	str	r3, [sp, #4]
 80a3898:	bd08      	pop	{r3, pc}
 80a389a:	0000      	.short	0x0000
 80a389c:	080601a4 	.word	0x080601a4

080a38a0 <system_reset>:
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))
 80a38a0:	b508      	push	{r3, lr}
 80a38a2:	4b03      	ldr	r3, [pc, #12]	; (80a38b0 <system_reset+0x10>)
 80a38a4:	681b      	ldr	r3, [r3, #0]
 80a38a6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80a38aa:	9301      	str	r3, [sp, #4]
 80a38ac:	bd08      	pop	{r3, pc}
 80a38ae:	0000      	.short	0x0000
 80a38b0:	080601a4 	.word	0x080601a4

080a38b4 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a38b4:	b508      	push	{r3, lr}
 80a38b6:	4b02      	ldr	r3, [pc, #8]	; (80a38c0 <network_connect+0xc>)
 80a38b8:	681b      	ldr	r3, [r3, #0]
 80a38ba:	685b      	ldr	r3, [r3, #4]
 80a38bc:	9301      	str	r3, [sp, #4]
 80a38be:	bd08      	pop	{r3, pc}
 80a38c0:	080601c8 	.word	0x080601c8

080a38c4 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a38c4:	b508      	push	{r3, lr}
 80a38c6:	4b02      	ldr	r3, [pc, #8]	; (80a38d0 <network_connecting+0xc>)
 80a38c8:	681b      	ldr	r3, [r3, #0]
 80a38ca:	689b      	ldr	r3, [r3, #8]
 80a38cc:	9301      	str	r3, [sp, #4]
 80a38ce:	bd08      	pop	{r3, pc}
 80a38d0:	080601c8 	.word	0x080601c8

080a38d4 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a38d4:	b508      	push	{r3, lr}
 80a38d6:	4b02      	ldr	r3, [pc, #8]	; (80a38e0 <network_disconnect+0xc>)
 80a38d8:	681b      	ldr	r3, [r3, #0]
 80a38da:	68db      	ldr	r3, [r3, #12]
 80a38dc:	9301      	str	r3, [sp, #4]
 80a38de:	bd08      	pop	{r3, pc}
 80a38e0:	080601c8 	.word	0x080601c8

080a38e4 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a38e4:	b508      	push	{r3, lr}
 80a38e6:	4b02      	ldr	r3, [pc, #8]	; (80a38f0 <network_ready+0xc>)
 80a38e8:	681b      	ldr	r3, [r3, #0]
 80a38ea:	691b      	ldr	r3, [r3, #16]
 80a38ec:	9301      	str	r3, [sp, #4]
 80a38ee:	bd08      	pop	{r3, pc}
 80a38f0:	080601c8 	.word	0x080601c8

080a38f4 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a38f4:	b508      	push	{r3, lr}
 80a38f6:	4b02      	ldr	r3, [pc, #8]	; (80a3900 <network_on+0xc>)
 80a38f8:	681b      	ldr	r3, [r3, #0]
 80a38fa:	695b      	ldr	r3, [r3, #20]
 80a38fc:	9301      	str	r3, [sp, #4]
 80a38fe:	bd08      	pop	{r3, pc}
 80a3900:	080601c8 	.word	0x080601c8

080a3904 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a3904:	b508      	push	{r3, lr}
 80a3906:	4b02      	ldr	r3, [pc, #8]	; (80a3910 <network_off+0xc>)
 80a3908:	681b      	ldr	r3, [r3, #0]
 80a390a:	699b      	ldr	r3, [r3, #24]
 80a390c:	9301      	str	r3, [sp, #4]
 80a390e:	bd08      	pop	{r3, pc}
 80a3910:	080601c8 	.word	0x080601c8

080a3914 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a3914:	b508      	push	{r3, lr}
 80a3916:	4b02      	ldr	r3, [pc, #8]	; (80a3920 <network_listen+0xc>)
 80a3918:	681b      	ldr	r3, [r3, #0]
 80a391a:	69db      	ldr	r3, [r3, #28]
 80a391c:	9301      	str	r3, [sp, #4]
 80a391e:	bd08      	pop	{r3, pc}
 80a3920:	080601c8 	.word	0x080601c8

080a3924 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a3924:	b508      	push	{r3, lr}
 80a3926:	4b02      	ldr	r3, [pc, #8]	; (80a3930 <network_listening+0xc>)
 80a3928:	681b      	ldr	r3, [r3, #0]
 80a392a:	6a1b      	ldr	r3, [r3, #32]
 80a392c:	9301      	str	r3, [sp, #4]
 80a392e:	bd08      	pop	{r3, pc}
 80a3930:	080601c8 	.word	0x080601c8

080a3934 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a3934:	b508      	push	{r3, lr}
 80a3936:	4b02      	ldr	r3, [pc, #8]	; (80a3940 <network_set_listen_timeout+0xc>)
 80a3938:	681b      	ldr	r3, [r3, #0]
 80a393a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a393c:	9301      	str	r3, [sp, #4]
 80a393e:	bd08      	pop	{r3, pc}
 80a3940:	080601c8 	.word	0x080601c8

080a3944 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a3944:	b508      	push	{r3, lr}
 80a3946:	4b02      	ldr	r3, [pc, #8]	; (80a3950 <network_get_listen_timeout+0xc>)
 80a3948:	681b      	ldr	r3, [r3, #0]
 80a394a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a394c:	9301      	str	r3, [sp, #4]
 80a394e:	bd08      	pop	{r3, pc}
 80a3950:	080601c8 	.word	0x080601c8

080a3954 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
 80a3954:	b508      	push	{r3, lr}
 80a3956:	4b02      	ldr	r3, [pc, #8]	; (80a3960 <spark_variable+0xc>)
 80a3958:	681b      	ldr	r3, [r3, #0]
 80a395a:	681b      	ldr	r3, [r3, #0]
 80a395c:	9301      	str	r3, [sp, #4]
 80a395e:	bd08      	pop	{r3, pc}
 80a3960:	080601cc 	.word	0x080601cc

080a3964 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
 80a3964:	b508      	push	{r3, lr}
 80a3966:	4b02      	ldr	r3, [pc, #8]	; (80a3970 <spark_function+0xc>)
 80a3968:	681b      	ldr	r3, [r3, #0]
 80a396a:	685b      	ldr	r3, [r3, #4]
 80a396c:	9301      	str	r3, [sp, #4]
 80a396e:	bd08      	pop	{r3, pc}
 80a3970:	080601cc 	.word	0x080601cc

080a3974 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 80a3974:	b508      	push	{r3, lr}
 80a3976:	4b02      	ldr	r3, [pc, #8]	; (80a3980 <spark_process+0xc>)
 80a3978:	681b      	ldr	r3, [r3, #0]
 80a397a:	689b      	ldr	r3, [r3, #8]
 80a397c:	9301      	str	r3, [sp, #4]
 80a397e:	bd08      	pop	{r3, pc}
 80a3980:	080601cc 	.word	0x080601cc

080a3984 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
 80a3984:	b508      	push	{r3, lr}
 80a3986:	4b02      	ldr	r3, [pc, #8]	; (80a3990 <spark_cloud_flag_connect+0xc>)
 80a3988:	681b      	ldr	r3, [r3, #0]
 80a398a:	68db      	ldr	r3, [r3, #12]
 80a398c:	9301      	str	r3, [sp, #4]
 80a398e:	bd08      	pop	{r3, pc}
 80a3990:	080601cc 	.word	0x080601cc

080a3994 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 80a3994:	b508      	push	{r3, lr}
 80a3996:	4b02      	ldr	r3, [pc, #8]	; (80a39a0 <spark_cloud_flag_connected+0xc>)
 80a3998:	681b      	ldr	r3, [r3, #0]
 80a399a:	695b      	ldr	r3, [r3, #20]
 80a399c:	9301      	str	r3, [sp, #4]
 80a399e:	bd08      	pop	{r3, pc}
 80a39a0:	080601cc 	.word	0x080601cc

080a39a4 <spark_sync_time_pending>:
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 80a39a4:	b508      	push	{r3, lr}
 80a39a6:	4b02      	ldr	r3, [pc, #8]	; (80a39b0 <spark_sync_time_pending+0xc>)
 80a39a8:	681b      	ldr	r3, [r3, #0]
 80a39aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a39ac:	9301      	str	r3, [sp, #4]
 80a39ae:	bd08      	pop	{r3, pc}
 80a39b0:	080601cc 	.word	0x080601cc

080a39b4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a39b4:	b508      	push	{r3, lr}
 80a39b6:	4b02      	ldr	r3, [pc, #8]	; (80a39c0 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a39b8:	681b      	ldr	r3, [r3, #0]
 80a39ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a39bc:	9301      	str	r3, [sp, #4]
 80a39be:	bd08      	pop	{r3, pc}
 80a39c0:	080601cc 	.word	0x080601cc

080a39c4 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a39c4:	b508      	push	{r3, lr}
 80a39c6:	4b02      	ldr	r3, [pc, #8]	; (80a39d0 <malloc+0xc>)
 80a39c8:	681b      	ldr	r3, [r3, #0]
 80a39ca:	681b      	ldr	r3, [r3, #0]
 80a39cc:	9301      	str	r3, [sp, #4]
 80a39ce:	bd08      	pop	{r3, pc}
 80a39d0:	080601a0 	.word	0x080601a0

080a39d4 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a39d4:	b508      	push	{r3, lr}
 80a39d6:	4b02      	ldr	r3, [pc, #8]	; (80a39e0 <free+0xc>)
 80a39d8:	681b      	ldr	r3, [r3, #0]
 80a39da:	685b      	ldr	r3, [r3, #4]
 80a39dc:	9301      	str	r3, [sp, #4]
 80a39de:	bd08      	pop	{r3, pc}
 80a39e0:	080601a0 	.word	0x080601a0

080a39e4 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a39e4:	b508      	push	{r3, lr}
 80a39e6:	4b02      	ldr	r3, [pc, #8]	; (80a39f0 <realloc+0xc>)
 80a39e8:	681b      	ldr	r3, [r3, #0]
 80a39ea:	689b      	ldr	r3, [r3, #8]
 80a39ec:	9301      	str	r3, [sp, #4]
 80a39ee:	bd08      	pop	{r3, pc}
 80a39f0:	080601a0 	.word	0x080601a0

080a39f4 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
 80a39f4:	b508      	push	{r3, lr}
 80a39f6:	4b02      	ldr	r3, [pc, #8]	; (80a3a00 <siprintf+0xc>)
 80a39f8:	681b      	ldr	r3, [r3, #0]
 80a39fa:	691b      	ldr	r3, [r3, #16]
 80a39fc:	9301      	str	r3, [sp, #4]
 80a39fe:	bd08      	pop	{r3, pc}
 80a3a00:	080601a0 	.word	0x080601a0

080a3a04 <sscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
 80a3a04:	b508      	push	{r3, lr}
 80a3a06:	4b02      	ldr	r3, [pc, #8]	; (80a3a10 <sscanf+0xc>)
 80a3a08:	681b      	ldr	r3, [r3, #0]
 80a3a0a:	695b      	ldr	r3, [r3, #20]
 80a3a0c:	9301      	str	r3, [sp, #4]
 80a3a0e:	bd08      	pop	{r3, pc}
 80a3a10:	080601a0 	.word	0x080601a0

080a3a14 <siscanf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
 80a3a14:	b508      	push	{r3, lr}
 80a3a16:	4b02      	ldr	r3, [pc, #8]	; (80a3a20 <siscanf+0xc>)
 80a3a18:	681b      	ldr	r3, [r3, #0]
 80a3a1a:	699b      	ldr	r3, [r3, #24]
 80a3a1c:	9301      	str	r3, [sp, #4]
 80a3a1e:	bd08      	pop	{r3, pc}
 80a3a20:	080601a0 	.word	0x080601a0

080a3a24 <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
 80a3a24:	b508      	push	{r3, lr}
 80a3a26:	4b02      	ldr	r3, [pc, #8]	; (80a3a30 <snprintf+0xc>)
 80a3a28:	681b      	ldr	r3, [r3, #0]
 80a3a2a:	69db      	ldr	r3, [r3, #28]
 80a3a2c:	9301      	str	r3, [sp, #4]
 80a3a2e:	bd08      	pop	{r3, pc}
 80a3a30:	080601a0 	.word	0x080601a0

080a3a34 <sniprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
 80a3a34:	b508      	push	{r3, lr}
 80a3a36:	4b02      	ldr	r3, [pc, #8]	; (80a3a40 <sniprintf+0xc>)
 80a3a38:	681b      	ldr	r3, [r3, #0]
 80a3a3a:	6a1b      	ldr	r3, [r3, #32]
 80a3a3c:	9301      	str	r3, [sp, #4]
 80a3a3e:	bd08      	pop	{r3, pc}
 80a3a40:	080601a0 	.word	0x080601a0

080a3a44 <vsnprintf>:
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 80a3a44:	b508      	push	{r3, lr}
 80a3a46:	4b02      	ldr	r3, [pc, #8]	; (80a3a50 <vsnprintf+0xc>)
 80a3a48:	681b      	ldr	r3, [r3, #0]
 80a3a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a3a4c:	9301      	str	r3, [sp, #4]
 80a3a4e:	bd08      	pop	{r3, pc}
 80a3a50:	080601a0 	.word	0x080601a0

080a3a54 <_malloc_r>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80a3a54:	b508      	push	{r3, lr}
 80a3a56:	4b02      	ldr	r3, [pc, #8]	; (80a3a60 <_malloc_r+0xc>)
 80a3a58:	681b      	ldr	r3, [r3, #0]
 80a3a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a3a5c:	9301      	str	r3, [sp, #4]
 80a3a5e:	bd08      	pop	{r3, pc}
 80a3a60:	080601a0 	.word	0x080601a0

080a3a64 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 80a3a64:	b508      	push	{r3, lr}
 80a3a66:	4b02      	ldr	r3, [pc, #8]	; (80a3a70 <newlib_impure_ptr_callback+0xc>)
 80a3a68:	681b      	ldr	r3, [r3, #0]
 80a3a6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a3a6c:	9301      	str	r3, [sp, #4]
 80a3a6e:	bd08      	pop	{r3, pc}
 80a3a70:	080601a0 	.word	0x080601a0

080a3a74 <_ZN8SPIClass6unlockEv>:
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
 80a3a74:	6880      	ldr	r0, [r0, #8]
 80a3a76:	f7ff bd95 	b.w	80a35a4 <os_mutex_recursive_unlock>

080a3a7a <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 80a3a7a:	b570      	push	{r4, r5, r6, lr}
    RecursiveMutex() : handle_(nullptr)
 80a3a7c:	2600      	movs	r6, #0
 80a3a7e:	4604      	mov	r4, r0
 80a3a80:	460d      	mov	r5, r1
 80a3a82:	f840 6f08 	str.w	r6, [r0, #8]!
        os_mutex_recursive_create(&handle_);
 80a3a86:	f7ff fd75 	bl	80a3574 <os_mutex_recursive_create>
{
    _spi = spi;
    hal_spi_init(_spi);
 80a3a8a:	4628      	mov	r0, r5
    _spi = spi;
 80a3a8c:	7025      	strb	r5, [r4, #0]
    hal_spi_init(_spi);
 80a3a8e:	f7ff fe63 	bl	80a3758 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
}
 80a3a92:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80a3a94:	6066      	str	r6, [r4, #4]
}
 80a3a96:	bd70      	pop	{r4, r5, r6, pc}

080a3a98 <_ZN8SPIClass5beginEt>:
        unlock();
    }
}

void SPIClass::begin(uint16_t ss_pin)
{
 80a3a98:	b538      	push	{r3, r4, r5, lr}
 80a3a9a:	4604      	mov	r4, r0
 80a3a9c:	460d      	mov	r5, r1
    void lock() { os_mutex_recursive_lock(handle_); }
 80a3a9e:	6880      	ldr	r0, [r0, #8]
 80a3aa0:	f7ff fd78 	bl	80a3594 <os_mutex_recursive_lock>
    if (!lock())
    {
        hal_spi_begin(_spi, ss_pin);
 80a3aa4:	7820      	ldrb	r0, [r4, #0]
 80a3aa6:	4629      	mov	r1, r5
 80a3aa8:	f7ff fe46 	bl	80a3738 <hal_spi_begin>
        unlock();
 80a3aac:	4620      	mov	r0, r4
 80a3aae:	f7ff ffe1 	bl	80a3a74 <_ZN8SPIClass6unlockEv>
    }
}
 80a3ab2:	bd38      	pop	{r3, r4, r5, pc}

080a3ab4 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
 80a3ab4:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
 80a3ab6:	7800      	ldrb	r0, [r0, #0]
 80a3ab8:	f7ff fe46 	bl	80a3748 <hal_spi_transfer>
}
 80a3abc:	b2c0      	uxtb	r0, r0
 80a3abe:	bd08      	pop	{r3, pc}

080a3ac0 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
 80a3ac0:	b510      	push	{r4, lr}
 80a3ac2:	4604      	mov	r4, r0
        if (wakeupSource_) {
 80a3ac4:	6800      	ldr	r0, [r0, #0]
 80a3ac6:	b118      	cbz	r0, 80a3ad0 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
 80a3ac8:	f7ff ff84 	bl	80a39d4 <free>
            wakeupSource_ = nullptr;
 80a3acc:	2300      	movs	r3, #0
 80a3ace:	6023      	str	r3, [r4, #0]
        }
    }
 80a3ad0:	bd10      	pop	{r4, pc}

080a3ad2 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80a3ad2:	b510      	push	{r4, lr}
 80a3ad4:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
 80a3ad6:	f7ff fff3 	bl	80a3ac0 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
 80a3ada:	4620      	mov	r0, r4
 80a3adc:	bd10      	pop	{r4, pc}

080a3ade <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>:
{
    reset(0, flags);
}

void SystemClass::reset(uint32_t data, SystemResetFlags flags)
{
 80a3ade:	b507      	push	{r0, r1, r2, lr}
 80a3ae0:	460b      	mov	r3, r1
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
 80a3ae2:	2100      	movs	r1, #0
{
 80a3ae4:	4602      	mov	r2, r0
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
 80a3ae6:	9100      	str	r1, [sp, #0]
 80a3ae8:	2001      	movs	r0, #1
 80a3aea:	218c      	movs	r1, #140	; 0x8c
 80a3aec:	f7ff fed8 	bl	80a38a0 <system_reset>
}
 80a3af0:	b003      	add	sp, #12
 80a3af2:	f85d fb04 	ldr.w	pc, [sp], #4

080a3af6 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>:
{
 80a3af6:	4601      	mov	r1, r0
    reset(0, flags);
 80a3af8:	2000      	movs	r0, #0
 80a3afa:	f7ff bff0 	b.w	80a3ade <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>

080a3afe <_ZN11SystemClass5resetEv>:
    reset(SystemResetFlags());
 80a3afe:	2000      	movs	r0, #0
 80a3b00:	f7ff bff9 	b.w	80a3af6 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>

080a3b04 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a3b04:	2202      	movs	r2, #2
              error_(SYSTEM_ERROR_NONE) {
 80a3b06:	2000      	movs	r0, #0
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80a3b08:	b510      	push	{r4, lr}
 80a3b0a:	4b08      	ldr	r3, [pc, #32]	; (80a3b2c <_GLOBAL__sub_I_System+0x28>)
 80a3b0c:	4c08      	ldr	r4, [pc, #32]	; (80a3b30 <_GLOBAL__sub_I_System+0x2c>)
 80a3b0e:	601a      	str	r2, [r3, #0]
    SleepResult() {}
 80a3b10:	4b08      	ldr	r3, [pc, #32]	; (80a3b34 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
 80a3b12:	6020      	str	r0, [r4, #0]
 80a3b14:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
 80a3b16:	71a0      	strb	r0, [r4, #6]
 80a3b18:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a3b1a:	f7ff fe95 	bl	80a3848 <set_system_mode>
SystemClass System;
 80a3b1e:	4620      	mov	r0, r4
 80a3b20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
 80a3b24:	4a04      	ldr	r2, [pc, #16]	; (80a3b38 <_GLOBAL__sub_I_System+0x34>)
 80a3b26:	4905      	ldr	r1, [pc, #20]	; (80a3b3c <_GLOBAL__sub_I_System+0x38>)
 80a3b28:	f001 bcd2 	b.w	80a54d0 <__aeabi_atexit>
 80a3b2c:	20000564 	.word	0x20000564
 80a3b30:	20000558 	.word	0x20000558
 80a3b34:	ffff0000 	.word	0xffff0000
 80a3b38:	20000240 	.word	0x20000240
 80a3b3c:	080a3ad3 	.word	0x080a3ad3

080a3b40 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
 80a3b40:	b510      	push	{r4, lr}
 80a3b42:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
 80a3b44:	f003 fe14 	bl	80a7770 <strlen>
 80a3b48:	1e43      	subs	r3, r0, #1
 80a3b4a:	4620      	mov	r0, r4
 80a3b4c:	4423      	add	r3, r4
	while(i<j){
 80a3b4e:	4283      	cmp	r3, r0
 80a3b50:	d906      	bls.n	80a3b60 <_Z11str_reversePc+0x20>
		c = *i;
 80a3b52:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
 80a3b54:	7819      	ldrb	r1, [r3, #0]
 80a3b56:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
 80a3b5a:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
 80a3b5e:	e7f6      	b.n	80a3b4e <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
 80a3b60:	bd10      	pop	{r4, pc}

080a3b62 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
 80a3b62:	b570      	push	{r4, r5, r6, lr}
 80a3b64:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
 80a3b66:	1e91      	subs	r1, r2, #2
 80a3b68:	2922      	cmp	r1, #34	; 0x22
 80a3b6a:	d822      	bhi.n	80a3bb2 <ultoa+0x50>
		return NULL;
	}
	char* ptr=buffer;
 80a3b6c:	4625      	mov	r5, r4

	div_t result;
	while(a){
 80a3b6e:	b168      	cbz	r0, 80a3b8c <ultoa+0x2a>
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
 80a3b70:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
 80a3b74:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
 80a3b78:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
 80a3b7a:	2809      	cmp	r0, #9
                *ptr += '0';
 80a3b7c:	bf94      	ite	ls
 80a3b7e:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
 80a3b80:	3157      	addhi	r1, #87	; 0x57
 80a3b82:	b2c9      	uxtb	r1, r1
            }
            ++ptr;
            a = result.quot;
 80a3b84:	4630      	mov	r0, r6
 80a3b86:	f805 1b01 	strb.w	r1, [r5], #1
	while(a){
 80a3b8a:	e7f0      	b.n	80a3b6e <ultoa+0xc>
 80a3b8c:	462a      	mov	r2, r5
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';
 80a3b8e:	2130      	movs	r1, #48	; 0x30
        while (ptr < buffer+pad)
 80a3b90:	4423      	add	r3, r4
 80a3b92:	4293      	cmp	r3, r2
 80a3b94:	d902      	bls.n	80a3b9c <ultoa+0x3a>
            *ptr++ = '0';
 80a3b96:	f802 1b01 	strb.w	r1, [r2], #1
        while (ptr < buffer+pad)
 80a3b9a:	e7fa      	b.n	80a3b92 <ultoa+0x30>
 80a3b9c:	1b5a      	subs	r2, r3, r5
 80a3b9e:	42ab      	cmp	r3, r5
 80a3ba0:	bf38      	it	cc
 80a3ba2:	2200      	movcc	r2, #0

	*ptr = '\0';
 80a3ba4:	2300      	movs	r3, #0
	str_reverse(buffer);
 80a3ba6:	4620      	mov	r0, r4
	*ptr = '\0';
 80a3ba8:	54ab      	strb	r3, [r5, r2]
	str_reverse(buffer);
 80a3baa:	f7ff ffc9 	bl	80a3b40 <_Z11str_reversePc>
	return buffer;
 80a3bae:	4620      	mov	r0, r4
}
 80a3bb0:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
 80a3bb2:	2000      	movs	r0, #0
 80a3bb4:	e7fc      	b.n	80a3bb0 <ultoa+0x4e>

080a3bb6 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 80a3bb6:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
 80a3bb8:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 80a3bba:	460c      	mov	r4, r1
 80a3bbc:	4615      	mov	r5, r2
	if(a<0){
 80a3bbe:	da0d      	bge.n	80a3bdc <itoa+0x26>
		*buffer = '-';
 80a3bc0:	222d      	movs	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
 80a3bc2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a3bc6:	bf0c      	ite	eq
 80a3bc8:	4618      	moveq	r0, r3
 80a3bca:	4258      	negne	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
 80a3bcc:	2301      	movs	r3, #1
		*buffer = '-';
 80a3bce:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
 80a3bd0:	462a      	mov	r2, r5
 80a3bd2:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
 80a3bd4:	f7ff ffc5 	bl	80a3b62 <ultoa>
	}
	return buffer;
}
 80a3bd8:	4620      	mov	r0, r4
 80a3bda:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
 80a3bdc:	2301      	movs	r3, #1
 80a3bde:	e7f9      	b.n	80a3bd4 <itoa+0x1e>

080a3be0 <utoa>:

__attribute__((weak)) char* utoa(unsigned a, char* buffer, int radix) {
 80a3be0:	b508      	push	{r3, lr}
    return ultoa(a, buffer, radix);
 80a3be2:	2301      	movs	r3, #1
 80a3be4:	f7ff ffbd 	bl	80a3b62 <ultoa>
}
 80a3be8:	bd08      	pop	{r3, pc}

080a3bea <_ZN9TCPClient5writeEh>:
        }
        return connected;
}

size_t TCPClient::write(uint8_t b)
{
 80a3bea:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a3bec:	6803      	ldr	r3, [r0, #0]
{
 80a3bee:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a3bf2:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80a3bf4:	2201      	movs	r2, #1
 80a3bf6:	f247 5330 	movw	r3, #30000	; 0x7530
 80a3bfa:	f10d 0107 	add.w	r1, sp, #7
 80a3bfe:	47a0      	blx	r4
}
 80a3c00:	b002      	add	sp, #8
 80a3c02:	bd10      	pop	{r4, pc}

080a3c04 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size)
{
 80a3c04:	b410      	push	{r4}
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a3c06:	6803      	ldr	r3, [r0, #0]
 80a3c08:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80a3c0a:	f247 5330 	movw	r3, #30000	; 0x7530
 80a3c0e:	46a4      	mov	ip, r4
}
 80a3c10:	bc10      	pop	{r4}
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a3c12:	4760      	bx	ip

080a3c14 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout)
{
 80a3c14:	b513      	push	{r0, r1, r4, lr}
 80a3c16:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
 80a3c18:	6802      	ldr	r2, [r0, #0]
{
 80a3c1a:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
 80a3c1e:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
 80a3c20:	f10d 0107 	add.w	r1, sp, #7
 80a3c24:	2201      	movs	r2, #1
 80a3c26:	47a0      	blx	r4
}
 80a3c28:	b002      	add	sp, #8
 80a3c2a:	bd10      	pop	{r4, pc}

080a3c2c <_ZN9TCPClient5flushEv>:
  d_->total = 0;
}

void TCPClient::flush()
{
}
 80a3c2c:	4770      	bx	lr

080a3c2e <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 80a3c2e:	4770      	bx	lr

080a3c30 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info& __ti) noexcept override
 80a3c30:	b510      	push	{r4, lr}
 80a3c32:	4604      	mov	r4, r0
	    ||
 80a3c34:	4b06      	ldr	r3, [pc, #24]	; (80a3c50 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x20>)
      _M_get_deleter(const std::type_info& __ti) noexcept override
 80a3c36:	4608      	mov	r0, r1
	    ||
 80a3c38:	4299      	cmp	r1, r3
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
 80a3c3a:	f104 040c 	add.w	r4, r4, #12
 80a3c3e:	d004      	beq.n	80a3c4a <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1a>
	    _Sp_make_shared_tag::_S_eq(__ti)
 80a3c40:	f001 fc50 	bl	80a54e4 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
 80a3c44:	2800      	cmp	r0, #0
	return nullptr;
 80a3c46:	bf08      	it	eq
 80a3c48:	2400      	moveq	r4, #0
      }
 80a3c4a:	4620      	mov	r0, r4
 80a3c4c:	bd10      	pop	{r4, pc}
 80a3c4e:	bf00      	nop
 80a3c50:	080a87b0 	.word	0x080a87b0

080a3c54 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 80a3c54:	b510      	push	{r4, lr}
 80a3c56:	4604      	mov	r4, r0
 80a3c58:	21ac      	movs	r1, #172	; 0xac
 80a3c5a:	f001 fc3e 	bl	80a54da <_ZdlPvj>
 80a3c5e:	4620      	mov	r0, r4
 80a3c60:	bd10      	pop	{r4, pc}

080a3c62 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
 80a3c62:	f7fc ba1e 	b.w	80a00a2 <_ZdlPv>
	...

080a3c68 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
 80a3c68:	b538      	push	{r3, r4, r5, lr}
 80a3c6a:	4b0b      	ldr	r3, [pc, #44]	; (80a3c98 <_ZN9TCPClientD1Ev+0x30>)
	if (_M_pi != nullptr)
 80a3c6c:	6984      	ldr	r4, [r0, #24]
 80a3c6e:	4605      	mov	r5, r0
 80a3c70:	6003      	str	r3, [r0, #0]
 80a3c72:	b17c      	cbz	r4, 80a3c94 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
 80a3c74:	6863      	ldr	r3, [r4, #4]
 80a3c76:	3b01      	subs	r3, #1
 80a3c78:	6063      	str	r3, [r4, #4]
 80a3c7a:	b95b      	cbnz	r3, 80a3c94 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
 80a3c7c:	6823      	ldr	r3, [r4, #0]
 80a3c7e:	4620      	mov	r0, r4
 80a3c80:	689b      	ldr	r3, [r3, #8]
 80a3c82:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a3c84:	68a3      	ldr	r3, [r4, #8]
 80a3c86:	3b01      	subs	r3, #1
 80a3c88:	60a3      	str	r3, [r4, #8]
 80a3c8a:	b91b      	cbnz	r3, 80a3c94 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
 80a3c8c:	6823      	ldr	r3, [r4, #0]
 80a3c8e:	4620      	mov	r0, r4
 80a3c90:	68db      	ldr	r3, [r3, #12]
 80a3c92:	4798      	blx	r3
 80a3c94:	4628      	mov	r0, r5
 80a3c96:	bd38      	pop	{r3, r4, r5, pc}
 80a3c98:	080a87c0 	.word	0x080a87c0

080a3c9c <_ZN9TCPClientD0Ev>:
 80a3c9c:	b510      	push	{r4, lr}
 80a3c9e:	4604      	mov	r4, r0
 80a3ca0:	f7ff ffe2 	bl	80a3c68 <_ZN9TCPClientD1Ev>
 80a3ca4:	4620      	mov	r0, r4
 80a3ca6:	211c      	movs	r1, #28
 80a3ca8:	f001 fc17 	bl	80a54da <_ZdlPvj>
 80a3cac:	4620      	mov	r0, r4
 80a3cae:	bd10      	pop	{r4, pc}

080a3cb0 <_ZN9TCPClient8remoteIPEv>:
{
   return (status()!=0);
}

IPAddress TCPClient::remoteIP()
{
 80a3cb0:	b570      	push	{r4, r5, r6, lr}

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 80a3cb2:	4604      	mov	r4, r0
 80a3cb4:	4606      	mov	r6, r0
      }

    private:
      element_type*
      _M_get() const noexcept
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 80a3cb6:	694d      	ldr	r5, [r1, #20]
 80a3cb8:	4b04      	ldr	r3, [pc, #16]	; (80a3ccc <_ZN9TCPClient8remoteIPEv+0x1c>)
 80a3cba:	358c      	adds	r5, #140	; 0x8c
 80a3cbc:	f844 3b04 	str.w	r3, [r4], #4
 80a3cc0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a3cc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a3cc4:	682b      	ldr	r3, [r5, #0]
    return d_->remoteIP;
}
 80a3cc6:	4630      	mov	r0, r6
 80a3cc8:	7023      	strb	r3, [r4, #0]
 80a3cca:	bd70      	pop	{r4, r5, r6, pc}
 80a3ccc:	080a8844 	.word	0x080a8844

080a3cd0 <_ZN9TCPClient4peekEv>:
{
 80a3cd0:	b510      	push	{r4, lr}
 80a3cd2:	6943      	ldr	r3, [r0, #20]
 80a3cd4:	4604      	mov	r4, r0
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
 80a3cd6:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a3cda:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80a3cde:	429a      	cmp	r2, r3
 80a3ce0:	d005      	beq.n	80a3cee <_ZN9TCPClient4peekEv+0x1e>
 80a3ce2:	6963      	ldr	r3, [r4, #20]
 80a3ce4:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 80a3ce8:	4413      	add	r3, r2
 80a3cea:	7918      	ldrb	r0, [r3, #4]
}
 80a3cec:	bd10      	pop	{r4, pc}
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
 80a3cee:	6803      	ldr	r3, [r0, #0]
 80a3cf0:	691b      	ldr	r3, [r3, #16]
 80a3cf2:	4798      	blx	r3
 80a3cf4:	2800      	cmp	r0, #0
 80a3cf6:	d1f4      	bne.n	80a3ce2 <_ZN9TCPClient4peekEv+0x12>
 80a3cf8:	f04f 30ff 	mov.w	r0, #4294967295
 80a3cfc:	e7f6      	b.n	80a3cec <_ZN9TCPClient4peekEv+0x1c>

080a3cfe <_ZN9TCPClient4readEv>:
{
 80a3cfe:	b510      	push	{r4, lr}
 80a3d00:	6943      	ldr	r3, [r0, #20]
 80a3d02:	4604      	mov	r4, r0
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
 80a3d04:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a3d08:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80a3d0c:	429a      	cmp	r2, r3
 80a3d0e:	d008      	beq.n	80a3d22 <_ZN9TCPClient4readEv+0x24>
 80a3d10:	6963      	ldr	r3, [r4, #20]
 80a3d12:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 80a3d16:	1c51      	adds	r1, r2, #1
 80a3d18:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
 80a3d1c:	4413      	add	r3, r2
 80a3d1e:	7918      	ldrb	r0, [r3, #4]
}
 80a3d20:	bd10      	pop	{r4, pc}
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
 80a3d22:	6803      	ldr	r3, [r0, #0]
 80a3d24:	691b      	ldr	r3, [r3, #16]
 80a3d26:	4798      	blx	r3
 80a3d28:	2800      	cmp	r0, #0
 80a3d2a:	d1f1      	bne.n	80a3d10 <_ZN9TCPClient4readEv+0x12>
 80a3d2c:	f04f 30ff 	mov.w	r0, #4294967295
 80a3d30:	e7f6      	b.n	80a3d20 <_ZN9TCPClient4readEv+0x22>

080a3d32 <_ZN9TCPClient4readEPhj>:
{
 80a3d32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a3d34:	6943      	ldr	r3, [r0, #20]
 80a3d36:	4617      	mov	r7, r2
        if (bufferCount() || available())
 80a3d38:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a3d3c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
{
 80a3d40:	4605      	mov	r5, r0
        if (bufferCount() || available())
 80a3d42:	429a      	cmp	r2, r3
{
 80a3d44:	460e      	mov	r6, r1
        if (bufferCount() || available())
 80a3d46:	d016      	beq.n	80a3d76 <_ZN9TCPClient4readEPhj+0x44>
 80a3d48:	6969      	ldr	r1, [r5, #20]
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80a3d4a:	4630      	mov	r0, r6
  return d_->total - d_->offset;
 80a3d4c:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
 80a3d50:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
 80a3d54:	1ae4      	subs	r4, r4, r3
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
 80a3d56:	42bc      	cmp	r4, r7
 80a3d58:	bf28      	it	cs
 80a3d5a:	463c      	movcs	r4, r7
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80a3d5c:	3304      	adds	r3, #4
 80a3d5e:	4622      	mov	r2, r4
 80a3d60:	4419      	add	r1, r3
 80a3d62:	f002 ff57 	bl	80a6c14 <memcpy>
 80a3d66:	696a      	ldr	r2, [r5, #20]
          d_->offset += read;
 80a3d68:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 80a3d6c:	4423      	add	r3, r4
 80a3d6e:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
 80a3d72:	4620      	mov	r0, r4
 80a3d74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (bufferCount() || available())
 80a3d76:	6803      	ldr	r3, [r0, #0]
 80a3d78:	691b      	ldr	r3, [r3, #16]
 80a3d7a:	4798      	blx	r3
 80a3d7c:	2800      	cmp	r0, #0
 80a3d7e:	d1e3      	bne.n	80a3d48 <_ZN9TCPClient4readEPhj+0x16>
        int read = -1;
 80a3d80:	f04f 34ff 	mov.w	r4, #4294967295
 80a3d84:	e7f5      	b.n	80a3d72 <_ZN9TCPClient4readEPhj+0x40>

080a3d86 <_ZN9TCPClient12flush_bufferEv>:
  d_->offset = 0;
 80a3d86:	2300      	movs	r3, #0
 80a3d88:	6942      	ldr	r2, [r0, #20]
 80a3d8a:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
 80a3d8e:	6942      	ldr	r2, [r0, #20]
  d_->total = 0;
 80a3d90:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
 80a3d94:	4770      	bx	lr
	...

080a3d98 <_ZN9TCPClient7connectE9IPAddresstm>:
{
 80a3d98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a3d9c:	461f      	mov	r7, r3
    stop();
 80a3d9e:	6803      	ldr	r3, [r0, #0]
{
 80a3da0:	b08b      	sub	sp, #44	; 0x2c
    stop();
 80a3da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
{
 80a3da4:	4605      	mov	r5, r0
 80a3da6:	460c      	mov	r4, r1
 80a3da8:	4616      	mov	r6, r2
    stop();
 80a3daa:	4798      	blx	r3
        if(Network.from(nif).ready())
 80a3dac:	4638      	mov	r0, r7
 80a3dae:	f001 fa9d 	bl	80a52ec <_ZN5spark12NetworkClass4fromEm>
 80a3db2:	6803      	ldr	r3, [r0, #0]
 80a3db4:	68db      	ldr	r3, [r3, #12]
 80a3db6:	4798      	blx	r3
 80a3db8:	2800      	cmp	r0, #0
 80a3dba:	d054      	beq.n	80a3e66 <_ZN9TCPClient7connectE9IPAddresstm+0xce>
          d_->sock = socket_create(AF_INET, SOCK_STREAM, IPPROTO_TCP, port, nif);
 80a3dbc:	4633      	mov	r3, r6
 80a3dbe:	2206      	movs	r2, #6
 80a3dc0:	2101      	movs	r1, #1
 80a3dc2:	2002      	movs	r0, #2
 80a3dc4:	9700      	str	r7, [sp, #0]
 80a3dc6:	f8d5 8014 	ldr.w	r8, [r5, #20]
 80a3dca:	f7ff fc85 	bl	80a36d8 <socket_create>
          LOG(TRACE, "TCPClient socket=%x", d_->sock);
 80a3dce:	2320      	movs	r3, #32
          d_->sock = socket_create(AF_INET, SOCK_STREAM, IPPROTO_TCP, port, nif);
 80a3dd0:	f8c8 0000 	str.w	r0, [r8]
          LOG(TRACE, "TCPClient socket=%x", d_->sock);
 80a3dd4:	f04f 0800 	mov.w	r8, #0
 80a3dd8:	e9cd 3802 	strd	r3, r8, [sp, #8]
 80a3ddc:	696b      	ldr	r3, [r5, #20]
 80a3dde:	2001      	movs	r0, #1
 80a3de0:	681b      	ldr	r3, [r3, #0]
 80a3de2:	4923      	ldr	r1, [pc, #140]	; (80a3e70 <_ZN9TCPClient7connectE9IPAddresstm+0xd8>)
 80a3de4:	9301      	str	r3, [sp, #4]
 80a3de6:	4b23      	ldr	r3, [pc, #140]	; (80a3e74 <_ZN9TCPClient7connectE9IPAddresstm+0xdc>)
 80a3de8:	aa02      	add	r2, sp, #8
 80a3dea:	9300      	str	r3, [sp, #0]
 80a3dec:	4643      	mov	r3, r8
 80a3dee:	f7ff fd1b 	bl	80a3828 <log_message>
          if (socket_handle_valid(d_->sock))
 80a3df2:	696b      	ldr	r3, [r5, #20]
 80a3df4:	6818      	ldr	r0, [r3, #0]
 80a3df6:	f7ff fc67 	bl	80a36c8 <socket_handle_valid>
 80a3dfa:	2800      	cmp	r0, #0
 80a3dfc:	d033      	beq.n	80a3e66 <_ZN9TCPClient7connectE9IPAddresstm+0xce>
            flush_buffer();
 80a3dfe:	4628      	mov	r0, r5
 80a3e00:	f7ff ffc1 	bl	80a3d86 <_ZN9TCPClient12flush_bufferEv>
            tSocketAddr.sa_family = AF_INET;
 80a3e04:	2302      	movs	r3, #2
 80a3e06:	f8ad 3008 	strh.w	r3, [sp, #8]
            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 80a3e0a:	79e3      	ldrb	r3, [r4, #7]
            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80a3e0c:	ba76      	rev16	r6, r6
            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 80a3e0e:	f88d 300c 	strb.w	r3, [sp, #12]
            tSocketAddr.sa_data[3] = ip[1];
 80a3e12:	79a3      	ldrb	r3, [r4, #6]
            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a3e14:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
            tSocketAddr.sa_data[3] = ip[1];
 80a3e18:	f88d 300d 	strb.w	r3, [sp, #13]
            tSocketAddr.sa_data[4] = ip[2];
 80a3e1c:	7963      	ldrb	r3, [r4, #5]
            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80a3e1e:	f8ad 600a 	strh.w	r6, [sp, #10]
            tSocketAddr.sa_data[4] = ip[2];
 80a3e22:	f88d 300e 	strb.w	r3, [sp, #14]
            tSocketAddr.sa_data[5] = ip[3];
 80a3e26:	f814 3f04 	ldrb.w	r3, [r4, #4]!
 80a3e2a:	f88d 300f 	strb.w	r3, [sp, #15]
            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a3e2e:	f7ff fcdb 	bl	80a37e8 <HAL_NET_SetNetWatchDog>
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80a3e32:	696b      	ldr	r3, [r5, #20]
            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a3e34:	4606      	mov	r6, r0
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80a3e36:	2210      	movs	r2, #16
 80a3e38:	6818      	ldr	r0, [r3, #0]
 80a3e3a:	a902      	add	r1, sp, #8
 80a3e3c:	f7ff fc54 	bl	80a36e8 <socket_connect>
 80a3e40:	4681      	mov	r9, r0
            HAL_NET_SetNetWatchDog(ot);
 80a3e42:	4630      	mov	r0, r6
 80a3e44:	f7ff fcd0 	bl	80a37e8 <HAL_NET_SetNetWatchDog>
 80a3e48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a3e4a:	696e      	ldr	r6, [r5, #20]
 80a3e4c:	368c      	adds	r6, #140	; 0x8c
 80a3e4e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80a3e50:	6823      	ldr	r3, [r4, #0]
 80a3e52:	7033      	strb	r3, [r6, #0]
            nif_ = nif;
 80a3e54:	612f      	str	r7, [r5, #16]
            if(!connected)
 80a3e56:	f1b9 0f00 	cmp.w	r9, #0
 80a3e5a:	d007      	beq.n	80a3e6c <_ZN9TCPClient7connectE9IPAddresstm+0xd4>
                stop();
 80a3e5c:	682b      	ldr	r3, [r5, #0]
 80a3e5e:	4628      	mov	r0, r5
 80a3e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a3e62:	4798      	blx	r3
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80a3e64:	4640      	mov	r0, r8
}
 80a3e66:	b00b      	add	sp, #44	; 0x2c
 80a3e68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a3e6c:	2001      	movs	r0, #1
        return connected;
 80a3e6e:	e7fa      	b.n	80a3e66 <_ZN9TCPClient7connectE9IPAddresstm+0xce>
 80a3e70:	080a8778 	.word	0x080a8778
 80a3e74:	080a877f 	.word	0x080a877f

080a3e78 <_ZN9TCPClient9availableEv>:
{
 80a3e78:	b538      	push	{r3, r4, r5, lr}
 80a3e7a:	6942      	ldr	r2, [r0, #20]
 80a3e7c:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total))
 80a3e7e:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 80a3e82:	b12b      	cbz	r3, 80a3e90 <_ZN9TCPClient9availableEv+0x18>
 80a3e84:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
 80a3e88:	429a      	cmp	r2, r3
 80a3e8a:	d101      	bne.n	80a3e90 <_ZN9TCPClient9availableEv+0x18>
        flush_buffer();
 80a3e8c:	f7ff ff7b 	bl	80a3d86 <_ZN9TCPClient12flush_bufferEv>
    if(Network.from(nif_).ready() && isOpen(d_->sock))
 80a3e90:	6920      	ldr	r0, [r4, #16]
 80a3e92:	f001 fa2b 	bl	80a52ec <_ZN5spark12NetworkClass4fromEm>
 80a3e96:	6803      	ldr	r3, [r0, #0]
 80a3e98:	68db      	ldr	r3, [r3, #12]
 80a3e9a:	4798      	blx	r3
 80a3e9c:	b1f8      	cbz	r0, 80a3ede <_ZN9TCPClient9availableEv+0x66>
 80a3e9e:	6963      	ldr	r3, [r4, #20]
   return socket_handle_valid(sd);
 80a3ea0:	6818      	ldr	r0, [r3, #0]
 80a3ea2:	f7ff fc11 	bl	80a36c8 <socket_handle_valid>
    if(Network.from(nif_).ready() && isOpen(d_->sock))
 80a3ea6:	b1d0      	cbz	r0, 80a3ede <_ZN9TCPClient9availableEv+0x66>
 80a3ea8:	6960      	ldr	r0, [r4, #20]
        if ( d_->total < arraySize(d_->buffer))
 80a3eaa:	f8b0 1086 	ldrh.w	r1, [r0, #134]	; 0x86
 80a3eae:	297f      	cmp	r1, #127	; 0x7f
 80a3eb0:	d815      	bhi.n	80a3ede <_ZN9TCPClient9availableEv+0x66>
            int ret = socket_receive(d_->sock, d_->buffer + d_->total , arraySize(d_->buffer)-d_->total, 0);
 80a3eb2:	1d05      	adds	r5, r0, #4
 80a3eb4:	f1c1 0280 	rsb	r2, r1, #128	; 0x80
 80a3eb8:	2300      	movs	r3, #0
 80a3eba:	6800      	ldr	r0, [r0, #0]
 80a3ebc:	4429      	add	r1, r5
 80a3ebe:	f7ff fc1b 	bl	80a36f8 <socket_receive>
            if (ret > 0)
 80a3ec2:	2800      	cmp	r0, #0
 80a3ec4:	dd0b      	ble.n	80a3ede <_ZN9TCPClient9availableEv+0x66>
 80a3ec6:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) d_->offset = 0;
 80a3ec8:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a3ecc:	b90a      	cbnz	r2, 80a3ed2 <_ZN9TCPClient9availableEv+0x5a>
 80a3ece:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 80a3ed2:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
 80a3ed4:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a3ed8:	4410      	add	r0, r2
 80a3eda:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
 80a3ede:	6963      	ldr	r3, [r4, #20]
  return d_->total - d_->offset;
 80a3ee0:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
 80a3ee4:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
 80a3ee8:	1ac0      	subs	r0, r0, r3
 80a3eea:	bd38      	pop	{r3, r4, r5, pc}

080a3eec <_ZN9TCPClient4stopEv>:
{
 80a3eec:	b538      	push	{r3, r4, r5, lr}
  if (isOpen(d_->sock))
 80a3eee:	6943      	ldr	r3, [r0, #20]
{
 80a3ef0:	4604      	mov	r4, r0
   return socket_handle_valid(sd);
 80a3ef2:	6818      	ldr	r0, [r3, #0]
 80a3ef4:	f7ff fbe8 	bl	80a36c8 <socket_handle_valid>
  if (isOpen(d_->sock))
 80a3ef8:	b118      	cbz	r0, 80a3f02 <_ZN9TCPClient4stopEv+0x16>
      socket_close(d_->sock);
 80a3efa:	6963      	ldr	r3, [r4, #20]
 80a3efc:	6818      	ldr	r0, [r3, #0]
 80a3efe:	f7ff fc03 	bl	80a3708 <socket_close>
 80a3f02:	6965      	ldr	r5, [r4, #20]
  d_->sock = socket_handle_invalid();
 80a3f04:	f7ff fc08 	bl	80a3718 <socket_handle_invalid>
 80a3f08:	6028      	str	r0, [r5, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a3f0a:	6960      	ldr	r0, [r4, #20]
 80a3f0c:	2211      	movs	r2, #17
 80a3f0e:	2100      	movs	r1, #0
 80a3f10:	308c      	adds	r0, #140	; 0x8c
 80a3f12:	f002 fe8d 	bl	80a6c30 <memset>
  flush_buffer();
 80a3f16:	4620      	mov	r0, r4
}
 80a3f18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  flush_buffer();
 80a3f1c:	f7ff bf33 	b.w	80a3d86 <_ZN9TCPClient12flush_bufferEv>

080a3f20 <_ZN9TCPClient6statusEv>:
{
 80a3f20:	b510      	push	{r4, lr}
  return (isOpen(d_->sock) && Network.from(nif_).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80a3f22:	6943      	ldr	r3, [r0, #20]
{
 80a3f24:	4604      	mov	r4, r0
   return socket_handle_valid(sd);
 80a3f26:	6818      	ldr	r0, [r3, #0]
 80a3f28:	f7ff fbce 	bl	80a36c8 <socket_handle_valid>
  return (isOpen(d_->sock) && Network.from(nif_).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80a3f2c:	b908      	cbnz	r0, 80a3f32 <_ZN9TCPClient6statusEv+0x12>
 80a3f2e:	2000      	movs	r0, #0
}
 80a3f30:	bd10      	pop	{r4, pc}
  return (isOpen(d_->sock) && Network.from(nif_).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80a3f32:	6920      	ldr	r0, [r4, #16]
 80a3f34:	f001 f9da 	bl	80a52ec <_ZN5spark12NetworkClass4fromEm>
 80a3f38:	6803      	ldr	r3, [r0, #0]
 80a3f3a:	68db      	ldr	r3, [r3, #12]
 80a3f3c:	4798      	blx	r3
 80a3f3e:	2800      	cmp	r0, #0
 80a3f40:	d0f5      	beq.n	80a3f2e <_ZN9TCPClient6statusEv+0xe>
 80a3f42:	6963      	ldr	r3, [r4, #20]
 80a3f44:	6818      	ldr	r0, [r3, #0]
 80a3f46:	f7ff fbb7 	bl	80a36b8 <socket_active_status>
 80a3f4a:	fab0 f080 	clz	r0, r0
 80a3f4e:	0940      	lsrs	r0, r0, #5
 80a3f50:	e7ee      	b.n	80a3f30 <_ZN9TCPClient6statusEv+0x10>

080a3f52 <_ZN9TCPClientcvbEv>:
{
 80a3f52:	b508      	push	{r3, lr}
   return (status()!=0);
 80a3f54:	f7ff ffe4 	bl	80a3f20 <_ZN9TCPClient6statusEv>
}
 80a3f58:	3800      	subs	r0, #0
 80a3f5a:	bf18      	it	ne
 80a3f5c:	2001      	movne	r0, #1
 80a3f5e:	bd08      	pop	{r3, pc}

080a3f60 <_ZN9TCPClient5writeEPKhjm>:
{
 80a3f60:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}

    size_t printNumber(unsigned long, uint8_t);
    size_t printNumber(unsigned long long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
 80a3f64:	2700      	movs	r7, #0
 80a3f66:	6047      	str	r7, [r0, #4]
 80a3f68:	4604      	mov	r4, r0
 80a3f6a:	460d      	mov	r5, r1
 80a3f6c:	4616      	mov	r6, r2
 80a3f6e:	4698      	mov	r8, r3
    int ret = status() ? socket_send_ex(d_->sock, buffer, size, 0, timeout, nullptr) : -1;
 80a3f70:	f7ff ffd6 	bl	80a3f20 <_ZN9TCPClient6statusEv>
 80a3f74:	b170      	cbz	r0, 80a3f94 <_ZN9TCPClient5writeEPKhjm+0x34>
 80a3f76:	e9cd 8700 	strd	r8, r7, [sp]
 80a3f7a:	6960      	ldr	r0, [r4, #20]
 80a3f7c:	463b      	mov	r3, r7
 80a3f7e:	4632      	mov	r2, r6
 80a3f80:	4629      	mov	r1, r5
 80a3f82:	6800      	ldr	r0, [r0, #0]
 80a3f84:	f7ff fbd0 	bl	80a3728 <socket_send_ex>
    if (ret < 0) {
 80a3f88:	2800      	cmp	r0, #0
 80a3f8a:	da00      	bge.n	80a3f8e <_ZN9TCPClient5writeEPKhjm+0x2e>
 80a3f8c:	6060      	str	r0, [r4, #4]
}
 80a3f8e:	b002      	add	sp, #8
 80a3f90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    int ret = status() ? socket_send_ex(d_->sock, buffer, size, 0, timeout, nullptr) : -1;
 80a3f94:	f04f 30ff 	mov.w	r0, #4294967295
 80a3f98:	e7f8      	b.n	80a3f8c <_ZN9TCPClient5writeEPKhjm+0x2c>

080a3f9a <_ZN9TCPClient9connectedEv>:
{
 80a3f9a:	b570      	push	{r4, r5, r6, lr}
 80a3f9c:	4605      	mov	r5, r0
  bool rv = (status() || bufferCount());
 80a3f9e:	f7ff ffbf 	bl	80a3f20 <_ZN9TCPClient6statusEv>
 80a3fa2:	b9e8      	cbnz	r0, 80a3fe0 <_ZN9TCPClient9connectedEv+0x46>
 80a3fa4:	696b      	ldr	r3, [r5, #20]
 80a3fa6:	f8b3 1086 	ldrh.w	r1, [r3, #134]	; 0x86
 80a3faa:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 80a3fae:	4291      	cmp	r1, r2
 80a3fb0:	d116      	bne.n	80a3fe0 <_ZN9TCPClient9connectedEv+0x46>
   return socket_handle_valid(sd);
 80a3fb2:	6818      	ldr	r0, [r3, #0]
 80a3fb4:	f7ff fb88 	bl	80a36c8 <socket_handle_valid>
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
 80a3fb8:	b908      	cbnz	r0, 80a3fbe <_ZN9TCPClient9connectedEv+0x24>
  bool rv = (status() || bufferCount());
 80a3fba:	2000      	movs	r0, #0
}
 80a3fbc:	bd70      	pop	{r4, r5, r6, pc}
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
 80a3fbe:	696b      	ldr	r3, [r5, #20]
 80a3fc0:	6818      	ldr	r0, [r3, #0]
 80a3fc2:	f7ff fb79 	bl	80a36b8 <socket_active_status>
 80a3fc6:	2801      	cmp	r0, #1
 80a3fc8:	4604      	mov	r4, r0
 80a3fca:	d1f6      	bne.n	80a3fba <_ZN9TCPClient9connectedEv+0x20>
      rv = available(); // Try CC3000
 80a3fcc:	682b      	ldr	r3, [r5, #0]
 80a3fce:	4628      	mov	r0, r5
 80a3fd0:	691b      	ldr	r3, [r3, #16]
 80a3fd2:	4798      	blx	r3
      if (!rv) {        // No more Data and CLOSE_WAIT
 80a3fd4:	b930      	cbnz	r0, 80a3fe4 <_ZN9TCPClient9connectedEv+0x4a>
          stop();       // Close our side
 80a3fd6:	682b      	ldr	r3, [r5, #0]
 80a3fd8:	4628      	mov	r0, r5
 80a3fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a3fdc:	4798      	blx	r3
 80a3fde:	e7ec      	b.n	80a3fba <_ZN9TCPClient9connectedEv+0x20>
  bool rv = (status() || bufferCount());
 80a3fe0:	2001      	movs	r0, #1
 80a3fe2:	e7eb      	b.n	80a3fbc <_ZN9TCPClient9connectedEv+0x22>
      rv = available(); // Try CC3000
 80a3fe4:	4620      	mov	r0, r4
 80a3fe6:	e7e9      	b.n	80a3fbc <_ZN9TCPClient9connectedEv+0x22>

080a3fe8 <_ZN9TCPClient4DataC1Em>:

TCPClient::Data::Data(sock_handle_t sock)
        : sock(sock),
          offset(0),
          total(0) {
 80a3fe8:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
 80a3fea:	b510      	push	{r4, lr}
 80a3fec:	4604      	mov	r4, r0
          total(0) {
 80a3fee:	6001      	str	r1, [r0, #0]
 80a3ff0:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
 80a3ff4:	3088      	adds	r0, #136	; 0x88
 80a3ff6:	f000 fe2d 	bl	80a4c54 <_ZN9IPAddressC1Ev>
}
 80a3ffa:	4620      	mov	r0, r4
 80a3ffc:	bd10      	pop	{r4, pc}
	...

080a4000 <_ZN9TCPClientC1Em>:
TCPClient::TCPClient(sock_handle_t sock) :
 80a4000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a4002:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a4006:	2300      	movs	r3, #0
 80a4008:	e9c0 3201 	strd	r3, r2, [r0, #4]
        d_(std::make_shared<Data>(sock))
 80a400c:	4a0d      	ldr	r2, [pc, #52]	; (80a4044 <_ZN9TCPClientC1Em+0x44>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
 80a400e:	6103      	str	r3, [r0, #16]
 80a4010:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
 80a4012:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock) :
 80a4014:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80a4016:	20ac      	movs	r0, #172	; 0xac
 80a4018:	460e      	mov	r6, r1
 80a401a:	f7fc f83e 	bl	80a009a <_Znwj>
	  auto __pi = ::new (__mem)
 80a401e:	1e05      	subs	r5, r0, #0
 80a4020:	f105 070c 	add.w	r7, r5, #12
 80a4024:	d008      	beq.n	80a4038 <_ZN9TCPClientC1Em+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
 80a4026:	2301      	movs	r3, #1
 80a4028:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
 80a402c:	4b06      	ldr	r3, [pc, #24]	; (80a4048 <_ZN9TCPClientC1Em+0x48>)
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80a402e:	4631      	mov	r1, r6
 80a4030:	4638      	mov	r0, r7
 80a4032:	602b      	str	r3, [r5, #0]
 80a4034:	f7ff ffd8 	bl	80a3fe8 <_ZN9TCPClient4DataC1Em>
  flush_buffer();
 80a4038:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
 80a403a:	e9c4 7505 	strd	r7, r5, [r4, #20]
 80a403e:	f7ff fea2 	bl	80a3d86 <_ZN9TCPClient12flush_bufferEv>
}
 80a4042:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a4044:	080a87c0 	.word	0x080a87c0
 80a4048:	080a879c 	.word	0x080a879c

080a404c <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
 80a404c:	b510      	push	{r4, lr}
 80a404e:	4604      	mov	r4, r0
 80a4050:	f7ff fb62 	bl	80a3718 <socket_handle_invalid>
 80a4054:	4601      	mov	r1, r0
 80a4056:	4620      	mov	r0, r4
 80a4058:	f7ff ffd2 	bl	80a4000 <_ZN9TCPClientC1Em>
}
 80a405c:	4620      	mov	r0, r4
 80a405e:	bd10      	pop	{r4, pc}

080a4060 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
 80a4060:	b510      	push	{r4, lr}
 80a4062:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
 80a4064:	6800      	ldr	r0, [r0, #0]
 80a4066:	f7ff fb2f 	bl	80a36c8 <socket_handle_valid>
 80a406a:	b110      	cbz	r0, 80a4072 <_ZN9TCPClient4DataD1Ev+0x12>
        socket_close(sock);
 80a406c:	6820      	ldr	r0, [r4, #0]
 80a406e:	f7ff fb4b 	bl	80a3708 <socket_close>
    }
}
 80a4072:	4620      	mov	r0, r4
 80a4074:	bd10      	pop	{r4, pc}

080a4076 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(noexcept( __p->~_Up()))
	{ __p->~_Up(); }
 80a4076:	300c      	adds	r0, #12
 80a4078:	f7ff bff2 	b.w	80a4060 <_ZN9TCPClient4DataD1Ev>

080a407c <_ZN9TCPClient7connectEPKctm>:
{
 80a407c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a4080:	461f      	mov	r7, r3
    stop();
 80a4082:	6803      	ldr	r3, [r0, #0]
{
 80a4084:	b08f      	sub	sp, #60	; 0x3c
    stop();
 80a4086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
{
 80a4088:	4606      	mov	r6, r0
 80a408a:	460d      	mov	r5, r1
 80a408c:	4690      	mov	r8, r2
    stop();
 80a408e:	4798      	blx	r3
    if (Network.ready())
 80a4090:	4813      	ldr	r0, [pc, #76]	; (80a40e0 <_ZN9TCPClient7connectEPKctm+0x64>)
 80a4092:	f001 f8de 	bl	80a5252 <_ZN5spark12NetworkClass5readyEv>
 80a4096:	b1f0      	cbz	r0, 80a40d6 <_ZN9TCPClient7connectEPKctm+0x5a>
        IPAddress ip_addr;
 80a4098:	a802      	add	r0, sp, #8
 80a409a:	f000 fddb 	bl	80a4c54 <_ZN9IPAddressC1Ev>
        if (inet_gethostbyname(host, strlen(host), ip_addr, nif, NULL) == 0) {
 80a409e:	4628      	mov	r0, r5
 80a40a0:	f003 fb66 	bl	80a7770 <strlen>
 80a40a4:	2400      	movs	r4, #0
 80a40a6:	b281      	uxth	r1, r0
 80a40a8:	463b      	mov	r3, r7
 80a40aa:	4628      	mov	r0, r5
 80a40ac:	9400      	str	r4, [sp, #0]
 80a40ae:	aa03      	add	r2, sp, #12
 80a40b0:	f7ff fba2 	bl	80a37f8 <inet_gethostbyname>
 80a40b4:	b990      	cbnz	r0, 80a40dc <_ZN9TCPClient7connectEPKctm+0x60>
            return connect(ip_addr, port, nif);
 80a40b6:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
 80a40b8:	ad09      	add	r5, sp, #36	; 0x24
 80a40ba:	f8d3 9020 	ldr.w	r9, [r3, #32]
 80a40be:	4b09      	ldr	r3, [pc, #36]	; (80a40e4 <_ZN9TCPClient7connectEPKctm+0x68>)
 80a40c0:	ac03      	add	r4, sp, #12
 80a40c2:	9308      	str	r3, [sp, #32]
 80a40c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a40c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a40c8:	6823      	ldr	r3, [r4, #0]
 80a40ca:	4642      	mov	r2, r8
 80a40cc:	702b      	strb	r3, [r5, #0]
 80a40ce:	4630      	mov	r0, r6
 80a40d0:	463b      	mov	r3, r7
 80a40d2:	a908      	add	r1, sp, #32
 80a40d4:	47c8      	blx	r9
}
 80a40d6:	b00f      	add	sp, #60	; 0x3c
 80a40d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return 0; // error, could not connect
 80a40dc:	4620      	mov	r0, r4
 80a40de:	e7fa      	b.n	80a40d6 <_ZN9TCPClient7connectEPKctm+0x5a>
 80a40e0:	200005f8 	.word	0x200005f8
 80a40e4:	080a8844 	.word	0x080a8844

080a40e8 <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
 80a40e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a40ec:	4607      	mov	r7, r0
 80a40ee:	460d      	mov	r5, r1
 80a40f0:	4616      	mov	r6, r2
 80a40f2:	461c      	mov	r4, r3
    bool negative = val<0;
    if (negative) {
 80a40f4:	2200      	movs	r2, #0
 80a40f6:	2300      	movs	r3, #0
 80a40f8:	4638      	mov	r0, r7
 80a40fa:	4629      	mov	r1, r5
 80a40fc:	f001 ff34 	bl	80a5f68 <__aeabi_dcmplt>
 80a4100:	b120      	cbz	r0, 80a410c <_Z4dtoadhPc+0x24>
        val = -val;
        *sout++ = '-';
 80a4102:	232d      	movs	r3, #45	; 0x2d
        val = -val;
 80a4104:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
        *sout++ = '-';
 80a4108:	f804 3b01 	strb.w	r3, [r4], #1
 80a410c:	2300      	movs	r3, #0
    }
    long scale = 1;
 80a410e:	f04f 0a01 	mov.w	sl, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
 80a4112:	220a      	movs	r2, #10
    for (uint8_t i=0; i<prec; i++)
 80a4114:	b2d9      	uxtb	r1, r3
 80a4116:	428e      	cmp	r6, r1
 80a4118:	d903      	bls.n	80a4122 <_Z4dtoadhPc+0x3a>
        scale *= 10;
 80a411a:	fb02 fa0a 	mul.w	sl, r2, sl
    for (uint8_t i=0; i<prec; i++)
 80a411e:	3301      	adds	r3, #1
 80a4120:	e7f8      	b.n	80a4114 <_Z4dtoadhPc+0x2c>
    val *= scale;   // capture all the significant digits
 80a4122:	4650      	mov	r0, sl
 80a4124:	f001 fc44 	bl	80a59b0 <__aeabi_i2d>
 80a4128:	463a      	mov	r2, r7
 80a412a:	462b      	mov	r3, r5
 80a412c:	f001 fcaa 	bl	80a5a84 <__aeabi_dmul>
 80a4130:	4680      	mov	r8, r0
 80a4132:	4689      	mov	r9, r1
    uint64_t fixed = uint64_t(val);
 80a4134:	f002 fabe 	bl	80a66b4 <__aeabi_d2ulz>
 80a4138:	4605      	mov	r5, r0
 80a413a:	460f      	mov	r7, r1
    if ((val-fixed)>=0.5)    // round last digit
 80a413c:	f001 fc6c 	bl	80a5a18 <__aeabi_ul2d>
 80a4140:	4602      	mov	r2, r0
 80a4142:	460b      	mov	r3, r1
 80a4144:	4640      	mov	r0, r8
 80a4146:	4649      	mov	r1, r9
 80a4148:	f001 fae4 	bl	80a5714 <__aeabi_dsub>
 80a414c:	2200      	movs	r2, #0
 80a414e:	4b12      	ldr	r3, [pc, #72]	; (80a4198 <_Z4dtoadhPc+0xb0>)
 80a4150:	f001 ff1e 	bl	80a5f90 <__aeabi_dcmpge>
 80a4154:	b110      	cbz	r0, 80a415c <_Z4dtoadhPc+0x74>
        fixed++;
 80a4156:	3501      	adds	r5, #1
 80a4158:	f147 0700 	adc.w	r7, r7, #0

    unsigned long first = (unsigned long)(fixed / scale);
 80a415c:	4652      	mov	r2, sl
 80a415e:	4628      	mov	r0, r5
 80a4160:	4639      	mov	r1, r7
 80a4162:	17d3      	asrs	r3, r2, #31
 80a4164:	f002 fa5a 	bl	80a661c <__aeabi_uldivmod>
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
 80a4168:	2301      	movs	r3, #1
 80a416a:	4615      	mov	r5, r2
 80a416c:	4621      	mov	r1, r4
 80a416e:	220a      	movs	r2, #10
 80a4170:	f7ff fcf7 	bl	80a3b62 <ultoa>
    if (prec) {
 80a4174:	b16e      	cbz	r6, 80a4192 <_Z4dtoadhPc+0xaa>
        sout += strlen(sout);
 80a4176:	4620      	mov	r0, r4
 80a4178:	f003 fafa 	bl	80a7770 <strlen>
        *sout++ = '.';
 80a417c:	232e      	movs	r3, #46	; 0x2e
        sout += strlen(sout);
 80a417e:	1821      	adds	r1, r4, r0
        *sout++ = '.';
 80a4180:	5423      	strb	r3, [r4, r0]
        ultoa(second, sout, 10, prec);
 80a4182:	220a      	movs	r2, #10
 80a4184:	4633      	mov	r3, r6
 80a4186:	4628      	mov	r0, r5
    }
}
 80a4188:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        ultoa(second, sout, 10, prec);
 80a418c:	3101      	adds	r1, #1
 80a418e:	f7ff bce8 	b.w	80a3b62 <ultoa>
}
 80a4192:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a4196:	bf00      	nop
 80a4198:	3fe00000 	.word	0x3fe00000

080a419c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a419c:	b510      	push	{r4, lr}
 80a419e:	4604      	mov	r4, r0
{
	free(buffer);
 80a41a0:	6800      	ldr	r0, [r0, #0]
 80a41a2:	f7ff fc17 	bl	80a39d4 <free>
}
 80a41a6:	4620      	mov	r0, r4
 80a41a8:	bd10      	pop	{r4, pc}

080a41aa <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a41aa:	b510      	push	{r4, lr}
 80a41ac:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a41ae:	6800      	ldr	r0, [r0, #0]
 80a41b0:	b108      	cbz	r0, 80a41b6 <_ZN6String10invalidateEv+0xc>
 80a41b2:	f7ff fc0f 	bl	80a39d4 <free>
	buffer = NULL;
 80a41b6:	2300      	movs	r3, #0
	capacity = len = 0;
 80a41b8:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
 80a41bc:	6023      	str	r3, [r4, #0]
}
 80a41be:	bd10      	pop	{r4, pc}

080a41c0 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a41c0:	b538      	push	{r3, r4, r5, lr}
 80a41c2:	4604      	mov	r4, r0
 80a41c4:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a41c6:	6800      	ldr	r0, [r0, #0]
 80a41c8:	3101      	adds	r1, #1
 80a41ca:	f7ff fc0b 	bl	80a39e4 <realloc>
	if (newbuffer) {
 80a41ce:	b110      	cbz	r0, 80a41d6 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a41d0:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
 80a41d4:	2001      	movs	r0, #1
	}
	return 0;
}
 80a41d6:	bd38      	pop	{r3, r4, r5, pc}

080a41d8 <_ZN6String7reserveEj>:
{
 80a41d8:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a41da:	6803      	ldr	r3, [r0, #0]
{
 80a41dc:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a41de:	b123      	cbz	r3, 80a41ea <_ZN6String7reserveEj+0x12>
 80a41e0:	6843      	ldr	r3, [r0, #4]
 80a41e2:	428b      	cmp	r3, r1
 80a41e4:	d301      	bcc.n	80a41ea <_ZN6String7reserveEj+0x12>
 80a41e6:	2001      	movs	r0, #1
}
 80a41e8:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
 80a41ea:	4620      	mov	r0, r4
 80a41ec:	f7ff ffe8 	bl	80a41c0 <_ZN6String12changeBufferEj>
 80a41f0:	2800      	cmp	r0, #0
 80a41f2:	d0f9      	beq.n	80a41e8 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
 80a41f4:	68a3      	ldr	r3, [r4, #8]
 80a41f6:	2b00      	cmp	r3, #0
 80a41f8:	d1f5      	bne.n	80a41e6 <_ZN6String7reserveEj+0xe>
 80a41fa:	6822      	ldr	r2, [r4, #0]
 80a41fc:	7013      	strb	r3, [r2, #0]
 80a41fe:	e7f2      	b.n	80a41e6 <_ZN6String7reserveEj+0xe>

080a4200 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a4200:	b570      	push	{r4, r5, r6, lr}
 80a4202:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a4204:	4611      	mov	r1, r2
{
 80a4206:	4604      	mov	r4, r0
 80a4208:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a420a:	f7ff ffe5 	bl	80a41d8 <_ZN6String7reserveEj>
 80a420e:	b920      	cbnz	r0, 80a421a <_ZN6String4copyEPKcj+0x1a>
		invalidate();
 80a4210:	4620      	mov	r0, r4
 80a4212:	f7ff ffca 	bl	80a41aa <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
 80a4216:	4620      	mov	r0, r4
 80a4218:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(buffer, cstr, length);
 80a421a:	462a      	mov	r2, r5
 80a421c:	4631      	mov	r1, r6
 80a421e:	6820      	ldr	r0, [r4, #0]
	len = length;
 80a4220:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a4222:	f002 fcf7 	bl	80a6c14 <memcpy>
	buffer[len] = 0;
 80a4226:	2100      	movs	r1, #0
 80a4228:	6822      	ldr	r2, [r4, #0]
 80a422a:	68a3      	ldr	r3, [r4, #8]
 80a422c:	54d1      	strb	r1, [r2, r3]
	return *this;
 80a422e:	e7f2      	b.n	80a4216 <_ZN6String4copyEPKcj+0x16>

080a4230 <_ZN6StringC1EPKc>:
String::String(const char *cstr)
 80a4230:	b538      	push	{r3, r4, r5, lr}
	buffer = NULL;
 80a4232:	2300      	movs	r3, #0
String::String(const char *cstr)
 80a4234:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a4236:	460d      	mov	r5, r1
	capacity = 0;
 80a4238:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 80a423c:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a423e:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
 80a4240:	b139      	cbz	r1, 80a4252 <_ZN6StringC1EPKc+0x22>
 80a4242:	4608      	mov	r0, r1
 80a4244:	f003 fa94 	bl	80a7770 <strlen>
 80a4248:	4629      	mov	r1, r5
 80a424a:	4602      	mov	r2, r0
 80a424c:	4620      	mov	r0, r4
 80a424e:	f7ff ffd7 	bl	80a4200 <_ZN6String4copyEPKcj>
}
 80a4252:	4620      	mov	r0, r4
 80a4254:	bd38      	pop	{r3, r4, r5, pc}

080a4256 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 80a4256:	b538      	push	{r3, r4, r5, lr}
 80a4258:	4605      	mov	r5, r0
	if (buffer) {
 80a425a:	6800      	ldr	r0, [r0, #0]
{
 80a425c:	460c      	mov	r4, r1
	if (buffer) {
 80a425e:	b168      	cbz	r0, 80a427c <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
 80a4260:	686a      	ldr	r2, [r5, #4]
 80a4262:	688b      	ldr	r3, [r1, #8]
 80a4264:	429a      	cmp	r2, r3
 80a4266:	d307      	bcc.n	80a4278 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
 80a4268:	6809      	ldr	r1, [r1, #0]
 80a426a:	f002 fd17 	bl	80a6c9c <strcpy>
			len = rhs.len;
 80a426e:	68a3      	ldr	r3, [r4, #8]
 80a4270:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
 80a4272:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
 80a4274:	60a3      	str	r3, [r4, #8]
}
 80a4276:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
 80a4278:	f7ff fbac 	bl	80a39d4 <free>
	buffer = rhs.buffer;
 80a427c:	6823      	ldr	r3, [r4, #0]
 80a427e:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
 80a4280:	6863      	ldr	r3, [r4, #4]
 80a4282:	606b      	str	r3, [r5, #4]
	len = rhs.len;
 80a4284:	68a3      	ldr	r3, [r4, #8]
 80a4286:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
 80a4288:	2300      	movs	r3, #0
	rhs.capacity = 0;
 80a428a:	e9c4 3300 	strd	r3, r3, [r4]
 80a428e:	e7f1      	b.n	80a4274 <_ZN6String4moveERS_+0x1e>

080a4290 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 80a4290:	4288      	cmp	r0, r1
{
 80a4292:	b510      	push	{r4, lr}
 80a4294:	460b      	mov	r3, r1
 80a4296:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 80a4298:	d004      	beq.n	80a42a4 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 80a429a:	6809      	ldr	r1, [r1, #0]
 80a429c:	b121      	cbz	r1, 80a42a8 <_ZN6StringaSERKS_+0x18>
 80a429e:	689a      	ldr	r2, [r3, #8]
 80a42a0:	f7ff ffae 	bl	80a4200 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 80a42a4:	4620      	mov	r0, r4
 80a42a6:	bd10      	pop	{r4, pc}
	else invalidate();
 80a42a8:	f7ff ff7f 	bl	80a41aa <_ZN6String10invalidateEv>
 80a42ac:	e7fa      	b.n	80a42a4 <_ZN6StringaSERKS_+0x14>

080a42ae <_ZN6StringC1ERKS_>:
	buffer = NULL;
 80a42ae:	2300      	movs	r3, #0
String::String(const String &value)
 80a42b0:	b510      	push	{r4, lr}
 80a42b2:	4604      	mov	r4, r0
	capacity = 0;
 80a42b4:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 80a42b8:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a42ba:	7303      	strb	r3, [r0, #12]
	*this = value;
 80a42bc:	f7ff ffe8 	bl	80a4290 <_ZN6StringaSERKS_>
}
 80a42c0:	4620      	mov	r0, r4
 80a42c2:	bd10      	pop	{r4, pc}

080a42c4 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
 80a42c4:	4288      	cmp	r0, r1
{
 80a42c6:	b510      	push	{r4, lr}
 80a42c8:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
 80a42ca:	d001      	beq.n	80a42d0 <_ZN6StringaSEOS_+0xc>
 80a42cc:	f7ff ffc3 	bl	80a4256 <_ZN6String4moveERS_>
	return *this;
}
 80a42d0:	4620      	mov	r0, r4
 80a42d2:	bd10      	pop	{r4, pc}

080a42d4 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 80a42d4:	b538      	push	{r3, r4, r5, lr}
 80a42d6:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a42d8:	460c      	mov	r4, r1
 80a42da:	b149      	cbz	r1, 80a42f0 <_ZN6StringaSEPKc+0x1c>
 80a42dc:	4608      	mov	r0, r1
 80a42de:	f003 fa47 	bl	80a7770 <strlen>
 80a42e2:	4621      	mov	r1, r4
 80a42e4:	4602      	mov	r2, r0
 80a42e6:	4628      	mov	r0, r5
 80a42e8:	f7ff ff8a 	bl	80a4200 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 80a42ec:	4628      	mov	r0, r5
 80a42ee:	bd38      	pop	{r3, r4, r5, pc}
	else invalidate();
 80a42f0:	f7ff ff5b 	bl	80a41aa <_ZN6String10invalidateEv>
 80a42f4:	e7fa      	b.n	80a42ec <_ZN6StringaSEPKc+0x18>

080a42f6 <_ZN6StringC1Ehh>:
String::String(unsigned char value, unsigned char base)
 80a42f6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80a42f8:	4604      	mov	r4, r0
	buffer = NULL;
 80a42fa:	2300      	movs	r3, #0
String::String(unsigned char value, unsigned char base)
 80a42fc:	4608      	mov	r0, r1
	capacity = 0;
 80a42fe:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
 80a4302:	60a3      	str	r3, [r4, #8]
	flags = 0;
 80a4304:	7323      	strb	r3, [r4, #12]
	utoa(value, buf, base);
 80a4306:	a901      	add	r1, sp, #4
 80a4308:	f7ff fc6a 	bl	80a3be0 <utoa>
	*this = buf;
 80a430c:	4620      	mov	r0, r4
 80a430e:	a901      	add	r1, sp, #4
 80a4310:	f7ff ffe0 	bl	80a42d4 <_ZN6StringaSEPKc>
}
 80a4314:	4620      	mov	r0, r4
 80a4316:	b004      	add	sp, #16
 80a4318:	bd10      	pop	{r4, pc}

080a431a <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
 80a431a:	b510      	push	{r4, lr}
	buffer = NULL;
 80a431c:	2300      	movs	r3, #0
String::String(int value, unsigned char base)
 80a431e:	4604      	mov	r4, r0
 80a4320:	b08a      	sub	sp, #40	; 0x28
	capacity = 0;
 80a4322:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
 80a4326:	60a3      	str	r3, [r4, #8]
	flags = 0;
 80a4328:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
 80a432a:	4608      	mov	r0, r1
	itoa(value, buf, base);
 80a432c:	a901      	add	r1, sp, #4
 80a432e:	f7ff fc42 	bl	80a3bb6 <itoa>
	*this = buf;
 80a4332:	4620      	mov	r0, r4
 80a4334:	a901      	add	r1, sp, #4
 80a4336:	f7ff ffcd 	bl	80a42d4 <_ZN6StringaSEPKc>
}
 80a433a:	4620      	mov	r0, r4
 80a433c:	b00a      	add	sp, #40	; 0x28
 80a433e:	bd10      	pop	{r4, pc}

080a4340 <_ZN6StringC1Ejh>:
String::String(unsigned int value, unsigned char base)
 80a4340:	b510      	push	{r4, lr}
	buffer = NULL;
 80a4342:	2300      	movs	r3, #0
String::String(unsigned int value, unsigned char base)
 80a4344:	4604      	mov	r4, r0
 80a4346:	b08a      	sub	sp, #40	; 0x28
	capacity = 0;
 80a4348:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
 80a434c:	60a3      	str	r3, [r4, #8]
	flags = 0;
 80a434e:	7323      	strb	r3, [r4, #12]
String::String(unsigned int value, unsigned char base)
 80a4350:	4608      	mov	r0, r1
	utoa(value, buf, base);
 80a4352:	a901      	add	r1, sp, #4
 80a4354:	f7ff fc44 	bl	80a3be0 <utoa>
	*this = buf;
 80a4358:	4620      	mov	r0, r4
 80a435a:	a901      	add	r1, sp, #4
 80a435c:	f7ff ffba 	bl	80a42d4 <_ZN6StringaSEPKc>
}
 80a4360:	4620      	mov	r0, r4
 80a4362:	b00a      	add	sp, #40	; 0x28
 80a4364:	bd10      	pop	{r4, pc}

080a4366 <_ZN6StringC1Emh>:
String::String(unsigned long value, unsigned char base)
 80a4366:	b510      	push	{r4, lr}
	buffer = NULL;
 80a4368:	2300      	movs	r3, #0
String::String(unsigned long value, unsigned char base)
 80a436a:	4604      	mov	r4, r0
 80a436c:	b08a      	sub	sp, #40	; 0x28
	capacity = 0;
 80a436e:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
 80a4372:	60a3      	str	r3, [r4, #8]
	flags = 0;
 80a4374:	7323      	strb	r3, [r4, #12]
String::String(unsigned long value, unsigned char base)
 80a4376:	4608      	mov	r0, r1
	ultoa(value, buf, base);
 80a4378:	2301      	movs	r3, #1
 80a437a:	a901      	add	r1, sp, #4
 80a437c:	f7ff fbf1 	bl	80a3b62 <ultoa>
	*this = buf;
 80a4380:	4620      	mov	r0, r4
 80a4382:	a901      	add	r1, sp, #4
 80a4384:	f7ff ffa6 	bl	80a42d4 <_ZN6StringaSEPKc>
}
 80a4388:	4620      	mov	r0, r4
 80a438a:	b00a      	add	sp, #40	; 0x28
 80a438c:	bd10      	pop	{r4, pc}

080a438e <_ZN6StringC1Efi>:
	buffer = NULL;
 80a438e:	2300      	movs	r3, #0
String::String(float value, int decimalPlaces)
 80a4390:	b530      	push	{r4, r5, lr}
 80a4392:	4604      	mov	r4, r0
 80a4394:	b08b      	sub	sp, #44	; 0x2c
	capacity = 0;
 80a4396:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 80a439a:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a439c:	7303      	strb	r3, [r0, #12]
	dtoa(value, decimalPlaces, buf);
 80a439e:	b2d5      	uxtb	r5, r2
 80a43a0:	4608      	mov	r0, r1
 80a43a2:	f001 fb17 	bl	80a59d4 <__aeabi_f2d>
 80a43a6:	462a      	mov	r2, r5
 80a43a8:	ab01      	add	r3, sp, #4
 80a43aa:	f7ff fe9d 	bl	80a40e8 <_Z4dtoadhPc>
        *this = buf;
 80a43ae:	4620      	mov	r0, r4
 80a43b0:	a901      	add	r1, sp, #4
 80a43b2:	f7ff ff8f 	bl	80a42d4 <_ZN6StringaSEPKc>
}
 80a43b6:	4620      	mov	r0, r4
 80a43b8:	b00b      	add	sp, #44	; 0x2c
 80a43ba:	bd30      	pop	{r4, r5, pc}

080a43bc <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
 80a43bc:	b570      	push	{r4, r5, r6, lr}
 80a43be:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
 80a43c0:	460e      	mov	r6, r1
 80a43c2:	b909      	cbnz	r1, 80a43c8 <_ZN6String6concatEPKcj+0xc>
 80a43c4:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
 80a43c6:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
 80a43c8:	b16a      	cbz	r2, 80a43e6 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
 80a43ca:	6884      	ldr	r4, [r0, #8]
 80a43cc:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
 80a43ce:	4621      	mov	r1, r4
 80a43d0:	f7ff ff02 	bl	80a41d8 <_ZN6String7reserveEj>
 80a43d4:	2800      	cmp	r0, #0
 80a43d6:	d0f5      	beq.n	80a43c4 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
 80a43d8:	6828      	ldr	r0, [r5, #0]
 80a43da:	68ab      	ldr	r3, [r5, #8]
 80a43dc:	4631      	mov	r1, r6
 80a43de:	4418      	add	r0, r3
 80a43e0:	f002 fc5c 	bl	80a6c9c <strcpy>
	len = newlen;
 80a43e4:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
 80a43e6:	2001      	movs	r0, #1
 80a43e8:	e7ed      	b.n	80a43c6 <_ZN6String6concatEPKcj+0xa>

080a43ea <_ZN6String6concatERKS_>:
	return concat(s.buffer, s.len);
 80a43ea:	688a      	ldr	r2, [r1, #8]
 80a43ec:	6809      	ldr	r1, [r1, #0]
 80a43ee:	f7ff bfe5 	b.w	80a43bc <_ZN6String6concatEPKcj>

080a43f2 <_ZN6String6concatEc>:

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
 80a43f2:	2300      	movs	r3, #0
{
 80a43f4:	b507      	push	{r0, r1, r2, lr}
	return concat(buf, 1);
 80a43f6:	2201      	movs	r2, #1
	buf[0] = c;
 80a43f8:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
 80a43fc:	a901      	add	r1, sp, #4
	buf[1] = 0;
 80a43fe:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
 80a4402:	f7ff ffdb 	bl	80a43bc <_ZN6String6concatEPKcj>
}
 80a4406:	b003      	add	sp, #12
 80a4408:	f85d fb04 	ldr.w	pc, [sp], #4

080a440c <_ZN6String6concatEi>:
	itoa(num, buf, 10);
	return concat(buf, strlen(buf));
}

unsigned char String::concat(int num)
{
 80a440c:	b513      	push	{r0, r1, r4, lr}
	char buf[7];
	itoa(num, buf, 10);
 80a440e:	220a      	movs	r2, #10
{
 80a4410:	4604      	mov	r4, r0
 80a4412:	4608      	mov	r0, r1
	itoa(num, buf, 10);
 80a4414:	4669      	mov	r1, sp
 80a4416:	f7ff fbce 	bl	80a3bb6 <itoa>
	return concat(buf, strlen(buf));
 80a441a:	4668      	mov	r0, sp
 80a441c:	f003 f9a8 	bl	80a7770 <strlen>
 80a4420:	4669      	mov	r1, sp
 80a4422:	4602      	mov	r2, r0
 80a4424:	4620      	mov	r0, r4
 80a4426:	f7ff ffc9 	bl	80a43bc <_ZN6String6concatEPKcj>
}
 80a442a:	b002      	add	sp, #8
 80a442c:	bd10      	pop	{r4, pc}

080a442e <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 80a442e:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 80a4430:	688a      	ldr	r2, [r1, #8]
 80a4432:	6809      	ldr	r1, [r1, #0]
{
 80a4434:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 80a4436:	f7ff ffc1 	bl	80a43bc <_ZN6String6concatEPKcj>
 80a443a:	b910      	cbnz	r0, 80a4442 <_ZplRK15StringSumHelperRK6String+0x14>
 80a443c:	4620      	mov	r0, r4
 80a443e:	f7ff feb4 	bl	80a41aa <_ZN6String10invalidateEv>
	return a;
}
 80a4442:	4620      	mov	r0, r4
 80a4444:	bd10      	pop	{r4, pc}

080a4446 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
 80a4446:	b538      	push	{r3, r4, r5, lr}
 80a4448:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
 80a444a:	460d      	mov	r5, r1
 80a444c:	b921      	cbnz	r1, 80a4458 <_ZplRK15StringSumHelperPKc+0x12>
 80a444e:	4620      	mov	r0, r4
 80a4450:	f7ff feab 	bl	80a41aa <_ZN6String10invalidateEv>
	return a;
}
 80a4454:	4620      	mov	r0, r4
 80a4456:	bd38      	pop	{r3, r4, r5, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
 80a4458:	4608      	mov	r0, r1
 80a445a:	f003 f989 	bl	80a7770 <strlen>
 80a445e:	4629      	mov	r1, r5
 80a4460:	4602      	mov	r2, r0
 80a4462:	4620      	mov	r0, r4
 80a4464:	f7ff ffaa 	bl	80a43bc <_ZN6String6concatEPKcj>
 80a4468:	2800      	cmp	r0, #0
 80a446a:	d0f0      	beq.n	80a444e <_ZplRK15StringSumHelperPKc+0x8>
 80a446c:	e7f2      	b.n	80a4454 <_ZplRK15StringSumHelperPKc+0xe>

080a446e <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 80a446e:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
 80a4470:	6882      	ldr	r2, [r0, #8]
 80a4472:	b93a      	cbnz	r2, 80a4484 <_ZNK6String6equalsEPKc+0x16>
 80a4474:	b121      	cbz	r1, 80a4480 <_ZNK6String6equalsEPKc+0x12>
 80a4476:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
 80a4478:	fab0 f080 	clz	r0, r0
 80a447c:	0940      	lsrs	r0, r0, #5
 80a447e:	e000      	b.n	80a4482 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
 80a4480:	2001      	movs	r0, #1
}
 80a4482:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
 80a4484:	6800      	ldr	r0, [r0, #0]
 80a4486:	b909      	cbnz	r1, 80a448c <_ZNK6String6equalsEPKc+0x1e>
 80a4488:	7800      	ldrb	r0, [r0, #0]
 80a448a:	e7f5      	b.n	80a4478 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
 80a448c:	f002 fbfc 	bl	80a6c88 <strcmp>
 80a4490:	e7f2      	b.n	80a4478 <_ZNK6String6equalsEPKc+0xa>
	...

080a4494 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
 80a4494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a4496:	461d      	mov	r5, r3
	if (left > right) {
 80a4498:	429a      	cmp	r2, r3
 80a449a:	bf88      	it	hi
 80a449c:	4613      	movhi	r3, r2
{
 80a449e:	460f      	mov	r7, r1
 80a44a0:	4614      	mov	r4, r2
	if (left > right) {
 80a44a2:	bf88      	it	hi
 80a44a4:	462c      	movhi	r4, r5
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
 80a44a6:	490b      	ldr	r1, [pc, #44]	; (80a44d4 <_ZNK6String9substringEjj+0x40>)
	if (left > right) {
 80a44a8:	bf88      	it	hi
 80a44aa:	461d      	movhi	r5, r3
{
 80a44ac:	4606      	mov	r6, r0
	String out;
 80a44ae:	f7ff febf 	bl	80a4230 <_ZN6StringC1EPKc>
	if (left > len) return out;
 80a44b2:	68ba      	ldr	r2, [r7, #8]
 80a44b4:	42a2      	cmp	r2, r4
 80a44b6:	d30a      	bcc.n	80a44ce <_ZNK6String9substringEjj+0x3a>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
 80a44b8:	6839      	ldr	r1, [r7, #0]
 80a44ba:	42aa      	cmp	r2, r5
 80a44bc:	bf94      	ite	ls
 80a44be:	ebc4 0202 	rsbls	r2, r4, r2
 80a44c2:	ebc4 0205 	rsbhi	r2, r4, r5
 80a44c6:	4630      	mov	r0, r6
 80a44c8:	4421      	add	r1, r4
 80a44ca:	f7ff fe99 	bl	80a4200 <_ZN6String4copyEPKcj>
	return out;
}
 80a44ce:	4630      	mov	r0, r6
 80a44d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a44d2:	bf00      	nop
 80a44d4:	080a86c9 	.word	0x080a86c9

080a44d8 <_ZNK6String9substringEj>:
{
 80a44d8:	b510      	push	{r4, lr}
 80a44da:	4604      	mov	r4, r0
	return substring(left, len);
 80a44dc:	688b      	ldr	r3, [r1, #8]
 80a44de:	f7ff ffd9 	bl	80a4494 <_ZNK6String9substringEjj>
}
 80a44e2:	4620      	mov	r0, r4
 80a44e4:	bd10      	pop	{r4, pc}

080a44e6 <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
 80a44e6:	6800      	ldr	r0, [r0, #0]
 80a44e8:	b108      	cbz	r0, 80a44ee <_ZNK6String5toIntEv+0x8>
 80a44ea:	f002 ba8b 	b.w	80a6a04 <atol>
	return 0;
}
 80a44ee:	4770      	bx	lr

080a44f0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a44f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a44f2:	4606      	mov	r6, r0
 80a44f4:	460d      	mov	r5, r1
  size_t n = 0;
 80a44f6:	2400      	movs	r4, #0
 80a44f8:	188f      	adds	r7, r1, r2
  while (size--) {
 80a44fa:	42bd      	cmp	r5, r7
 80a44fc:	d00c      	beq.n	80a4518 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a44fe:	6833      	ldr	r3, [r6, #0]
 80a4500:	4630      	mov	r0, r6
 80a4502:	689b      	ldr	r3, [r3, #8]
 80a4504:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a4508:	4798      	blx	r3
     if (chunk>=0)
 80a450a:	1e03      	subs	r3, r0, #0
 80a450c:	db01      	blt.n	80a4512 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a450e:	441c      	add	r4, r3
  while (size--) {
 80a4510:	e7f3      	b.n	80a44fa <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a4512:	2c00      	cmp	r4, #0
 80a4514:	bf08      	it	eq
 80a4516:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 80a4518:	4620      	mov	r0, r4
 80a451a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a451c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a451c:	b570      	push	{r4, r5, r6, lr}
 80a451e:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a4520:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a4522:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 80a4524:	b149      	cbz	r1, 80a453a <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a4526:	f003 f923 	bl	80a7770 <strlen>
 80a452a:	682b      	ldr	r3, [r5, #0]
 80a452c:	4602      	mov	r2, r0
 80a452e:	4621      	mov	r1, r4
 80a4530:	4628      	mov	r0, r5
    }
 80a4532:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 80a4536:	68db      	ldr	r3, [r3, #12]
 80a4538:	4718      	bx	r3
    }
 80a453a:	bd70      	pop	{r4, r5, r6, pc}

080a453c <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
 80a453c:	b508      	push	{r3, lr}
  return write(str);
 80a453e:	f7ff ffed 	bl	80a451c <_ZN5Print5writeEPKc>
}
 80a4542:	bd08      	pop	{r3, pc}

080a4544 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
 80a4544:	6803      	ldr	r3, [r0, #0]
 80a4546:	689b      	ldr	r3, [r3, #8]
 80a4548:	4718      	bx	r3

080a454a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a454a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a454c:	210d      	movs	r1, #13
{
 80a454e:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a4550:	f7ff fff8 	bl	80a4544 <_ZN5Print5printEc>
  n += print('\n');
 80a4554:	210a      	movs	r1, #10
  size_t n = print('\r');
 80a4556:	4604      	mov	r4, r0
  n += print('\n');
 80a4558:	4628      	mov	r0, r5
 80a455a:	f7ff fff3 	bl	80a4544 <_ZN5Print5printEc>
  return n;
}
 80a455e:	4420      	add	r0, r4
 80a4560:	bd38      	pop	{r3, r4, r5, pc}

080a4562 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a4562:	b538      	push	{r3, r4, r5, lr}
 80a4564:	4605      	mov	r5, r0
  return write(str);
 80a4566:	f7ff ffd9 	bl	80a451c <_ZN5Print5writeEPKc>
 80a456a:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
 80a456c:	4628      	mov	r0, r5
 80a456e:	f7ff ffec 	bl	80a454a <_ZN5Print7printlnEv>
  return n;
}
 80a4572:	4420      	add	r0, r4
 80a4574:	bd38      	pop	{r3, r4, r5, pc}

080a4576 <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a4576:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a4578:	2a01      	cmp	r2, #1
 80a457a:	bf98      	it	ls
 80a457c:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a457e:	b530      	push	{r4, r5, lr}
 80a4580:	b08b      	sub	sp, #44	; 0x2c
 80a4582:	460c      	mov	r4, r1
  *str = '\0';
 80a4584:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 80a4588:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 80a458a:	4625      	mov	r5, r4
 80a458c:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 80a4590:	fb04 5312 	mls	r3, r4, r2, r5
 80a4594:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a4596:	2b09      	cmp	r3, #9
 80a4598:	bf94      	ite	ls
 80a459a:	3330      	addls	r3, #48	; 0x30
 80a459c:	3337      	addhi	r3, #55	; 0x37
 80a459e:	b2db      	uxtb	r3, r3
  } while(n);
 80a45a0:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a45a2:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 80a45a6:	d9f0      	bls.n	80a458a <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 80a45a8:	f7ff ffb8 	bl	80a451c <_ZN5Print5writeEPKc>
}
 80a45ac:	b00b      	add	sp, #44	; 0x2c
 80a45ae:	bd30      	pop	{r4, r5, pc}

080a45b0 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a45b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a45b4:	4605      	mov	r5, r0
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a45b6:	4619      	mov	r1, r3
 80a45b8:	4610      	mov	r0, r2
{
 80a45ba:	4692      	mov	sl, r2
 80a45bc:	461f      	mov	r7, r3
 80a45be:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
  if (isnan(number)) return print("nan");
 80a45c2:	f001 fcf9 	bl	80a5fb8 <__aeabi_dcmpun>
 80a45c6:	b140      	cbz	r0, 80a45da <_ZN5Print10printFloatEdh+0x2a>
  return write(str);
 80a45c8:	4950      	ldr	r1, [pc, #320]	; (80a470c <_ZN5Print10printFloatEdh+0x15c>)
 80a45ca:	4628      	mov	r0, r5
 80a45cc:	f7ff ffa6 	bl	80a451c <_ZN5Print5writeEPKc>
 80a45d0:	4604      	mov	r4, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
 80a45d2:	4620      	mov	r0, r4
 80a45d4:	b003      	add	sp, #12
 80a45d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
 80a45da:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
 80a45de:	f04f 32ff 	mov.w	r2, #4294967295
 80a45e2:	4650      	mov	r0, sl
 80a45e4:	4621      	mov	r1, r4
 80a45e6:	4b4a      	ldr	r3, [pc, #296]	; (80a4710 <_ZN5Print10printFloatEdh+0x160>)
 80a45e8:	f001 fce6 	bl	80a5fb8 <__aeabi_dcmpun>
 80a45ec:	b948      	cbnz	r0, 80a4602 <_ZN5Print10printFloatEdh+0x52>
 80a45ee:	f04f 32ff 	mov.w	r2, #4294967295
 80a45f2:	4650      	mov	r0, sl
 80a45f4:	4621      	mov	r1, r4
 80a45f6:	4b46      	ldr	r3, [pc, #280]	; (80a4710 <_ZN5Print10printFloatEdh+0x160>)
 80a45f8:	f001 fcc0 	bl	80a5f7c <__aeabi_dcmple>
 80a45fc:	b908      	cbnz	r0, 80a4602 <_ZN5Print10printFloatEdh+0x52>
  return write(str);
 80a45fe:	4945      	ldr	r1, [pc, #276]	; (80a4714 <_ZN5Print10printFloatEdh+0x164>)
 80a4600:	e7e3      	b.n	80a45ca <_ZN5Print10printFloatEdh+0x1a>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
 80a4602:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a4606:	4650      	mov	r0, sl
 80a4608:	4639      	mov	r1, r7
 80a460a:	4b43      	ldr	r3, [pc, #268]	; (80a4718 <_ZN5Print10printFloatEdh+0x168>)
 80a460c:	f001 fcca 	bl	80a5fa4 <__aeabi_dcmpgt>
 80a4610:	b108      	cbz	r0, 80a4616 <_ZN5Print10printFloatEdh+0x66>
  return write(str);
 80a4612:	4942      	ldr	r1, [pc, #264]	; (80a471c <_ZN5Print10printFloatEdh+0x16c>)
 80a4614:	e7d9      	b.n	80a45ca <_ZN5Print10printFloatEdh+0x1a>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
 80a4616:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a461a:	4650      	mov	r0, sl
 80a461c:	4639      	mov	r1, r7
 80a461e:	4b40      	ldr	r3, [pc, #256]	; (80a4720 <_ZN5Print10printFloatEdh+0x170>)
 80a4620:	f001 fca2 	bl	80a5f68 <__aeabi_dcmplt>
 80a4624:	2800      	cmp	r0, #0
 80a4626:	d1f4      	bne.n	80a4612 <_ZN5Print10printFloatEdh+0x62>
  if (number < 0.0)
 80a4628:	2200      	movs	r2, #0
 80a462a:	2300      	movs	r3, #0
 80a462c:	4650      	mov	r0, sl
 80a462e:	4639      	mov	r1, r7
 80a4630:	f001 fc9a 	bl	80a5f68 <__aeabi_dcmplt>
 80a4634:	4604      	mov	r4, r0
 80a4636:	b130      	cbz	r0, 80a4646 <_ZN5Print10printFloatEdh+0x96>
     n += print('-');
 80a4638:	212d      	movs	r1, #45	; 0x2d
 80a463a:	4628      	mov	r0, r5
 80a463c:	f7ff ff82 	bl	80a4544 <_ZN5Print5printEc>
 80a4640:	4604      	mov	r4, r0
     number = -number;
 80a4642:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
  size_t n = 0;
 80a4646:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
 80a464a:	2000      	movs	r0, #0
    rounding /= 10.0;
 80a464c:	f04f 0800 	mov.w	r8, #0
  double rounding = 0.5;
 80a4650:	4934      	ldr	r1, [pc, #208]	; (80a4724 <_ZN5Print10printFloatEdh+0x174>)
    rounding /= 10.0;
 80a4652:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 80a472c <_ZN5Print10printFloatEdh+0x17c>
  for (uint8_t i=0; i<digits; ++i)
 80a4656:	fa5f f38b 	uxtb.w	r3, fp
 80a465a:	429e      	cmp	r6, r3
 80a465c:	d906      	bls.n	80a466c <_ZN5Print10printFloatEdh+0xbc>
    rounding /= 10.0;
 80a465e:	4642      	mov	r2, r8
 80a4660:	464b      	mov	r3, r9
 80a4662:	f001 fb39 	bl	80a5cd8 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
 80a4666:	f10b 0b01 	add.w	fp, fp, #1
 80a466a:	e7f4      	b.n	80a4656 <_ZN5Print10printFloatEdh+0xa6>
  number += rounding;
 80a466c:	463b      	mov	r3, r7
 80a466e:	4652      	mov	r2, sl
 80a4670:	f001 f852 	bl	80a5718 <__adddf3>
 80a4674:	4689      	mov	r9, r1
 80a4676:	4680      	mov	r8, r0
  unsigned long int_part = (unsigned long)number;
 80a4678:	f001 fcdc 	bl	80a6034 <__aeabi_d2uiz>
 80a467c:	4607      	mov	r7, r0
  double remainder = number - (double)int_part;
 80a467e:	f001 f987 	bl	80a5990 <__aeabi_ui2d>
 80a4682:	4602      	mov	r2, r0
 80a4684:	460b      	mov	r3, r1
 80a4686:	4640      	mov	r0, r8
 80a4688:	4649      	mov	r1, r9
 80a468a:	f001 f843 	bl	80a5714 <__aeabi_dsub>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80a468e:	220a      	movs	r2, #10
 80a4690:	4680      	mov	r8, r0
 80a4692:	4689      	mov	r9, r1
 80a4694:	4628      	mov	r0, r5
 80a4696:	4639      	mov	r1, r7
 80a4698:	f7ff ff6d 	bl	80a4576 <_ZN5Print11printNumberEmh>
  n += print(int_part);
 80a469c:	4404      	add	r4, r0
  if (digits > 0) {
 80a469e:	b126      	cbz	r6, 80a46aa <_ZN5Print10printFloatEdh+0xfa>
  return write(str);
 80a46a0:	4628      	mov	r0, r5
 80a46a2:	4921      	ldr	r1, [pc, #132]	; (80a4728 <_ZN5Print10printFloatEdh+0x178>)
 80a46a4:	f7ff ff3a 	bl	80a451c <_ZN5Print5writeEPKc>
    n += print(".");
 80a46a8:	4404      	add	r4, r0
    remainder *= 10.0;
 80a46aa:	f04f 0a00 	mov.w	sl, #0
 80a46ae:	f8df b07c 	ldr.w	fp, [pc, #124]	; 80a472c <_ZN5Print10printFloatEdh+0x17c>
  while (digits-- > 0)
 80a46b2:	3e01      	subs	r6, #1
 80a46b4:	b2f6      	uxtb	r6, r6
 80a46b6:	2eff      	cmp	r6, #255	; 0xff
 80a46b8:	d08b      	beq.n	80a45d2 <_ZN5Print10printFloatEdh+0x22>
    remainder *= 10.0;
 80a46ba:	4652      	mov	r2, sl
 80a46bc:	465b      	mov	r3, fp
 80a46be:	4640      	mov	r0, r8
 80a46c0:	4649      	mov	r1, r9
 80a46c2:	f001 f9df 	bl	80a5a84 <__aeabi_dmul>
 80a46c6:	4680      	mov	r8, r0
 80a46c8:	4689      	mov	r9, r1
    int toPrint = int(remainder);
 80a46ca:	f001 fc8b 	bl	80a5fe4 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
 80a46ce:	1e07      	subs	r7, r0, #0
 80a46d0:	da19      	bge.n	80a4706 <_ZN5Print10printFloatEdh+0x156>
            t = print('-');
 80a46d2:	212d      	movs	r1, #45	; 0x2d
 80a46d4:	4628      	mov	r0, r5
 80a46d6:	f7ff ff35 	bl	80a4544 <_ZN5Print5printEc>
 80a46da:	4603      	mov	r3, r0
            val = -n;
 80a46dc:	4279      	negs	r1, r7
        return printNumber(val, base) + t;
 80a46de:	220a      	movs	r2, #10
 80a46e0:	4628      	mov	r0, r5
 80a46e2:	9301      	str	r3, [sp, #4]
 80a46e4:	f7ff ff47 	bl	80a4576 <_ZN5Print11printNumberEmh>
 80a46e8:	9b01      	ldr	r3, [sp, #4]
 80a46ea:	4403      	add	r3, r0
    remainder -= toPrint;
 80a46ec:	4638      	mov	r0, r7
    n += print(toPrint);
 80a46ee:	441c      	add	r4, r3
    remainder -= toPrint;
 80a46f0:	f001 f95e 	bl	80a59b0 <__aeabi_i2d>
 80a46f4:	4602      	mov	r2, r0
 80a46f6:	460b      	mov	r3, r1
 80a46f8:	4640      	mov	r0, r8
 80a46fa:	4649      	mov	r1, r9
 80a46fc:	f001 f80a 	bl	80a5714 <__aeabi_dsub>
 80a4700:	4680      	mov	r8, r0
 80a4702:	4689      	mov	r9, r1
  while (digits-- > 0)
 80a4704:	e7d5      	b.n	80a46b2 <_ZN5Print10printFloatEdh+0x102>
            val = n;
 80a4706:	4639      	mov	r1, r7
        size_t t = 0;
 80a4708:	2300      	movs	r3, #0
 80a470a:	e7e8      	b.n	80a46de <_ZN5Print10printFloatEdh+0x12e>
 80a470c:	080a8804 	.word	0x080a8804
 80a4710:	7fefffff 	.word	0x7fefffff
 80a4714:	080a8808 	.word	0x080a8808
 80a4718:	41efffff 	.word	0x41efffff
 80a471c:	080a880c 	.word	0x080a880c
 80a4720:	c1efffff 	.word	0xc1efffff
 80a4724:	3fe00000 	.word	0x3fe00000
 80a4728:	080a8592 	.word	0x080a8592
 80a472c:	40240000 	.word	0x40240000

080a4730 <_ZN5Print5printEfi>:
{
 80a4730:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a4732:	4605      	mov	r5, r0
 80a4734:	4614      	mov	r4, r2
  return printFloat((double)n, digits);
 80a4736:	4608      	mov	r0, r1
 80a4738:	f001 f94c 	bl	80a59d4 <__aeabi_f2d>
 80a473c:	b2e4      	uxtb	r4, r4
 80a473e:	4602      	mov	r2, r0
 80a4740:	460b      	mov	r3, r1
 80a4742:	4628      	mov	r0, r5
 80a4744:	9400      	str	r4, [sp, #0]
 80a4746:	f7ff ff33 	bl	80a45b0 <_ZN5Print10printFloatEdh>
}
 80a474a:	b003      	add	sp, #12
 80a474c:	bd30      	pop	{r4, r5, pc}

080a474e <_ZN5Print7printlnEdi>:
{
 80a474e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  return printFloat(n, digits);
 80a4750:	f89d 1018 	ldrb.w	r1, [sp, #24]
{
 80a4754:	4605      	mov	r5, r0
  return printFloat(n, digits);
 80a4756:	9100      	str	r1, [sp, #0]
 80a4758:	f7ff ff2a 	bl	80a45b0 <_ZN5Print10printFloatEdh>
 80a475c:	4604      	mov	r4, r0
  n += println();
 80a475e:	4628      	mov	r0, r5
 80a4760:	f7ff fef3 	bl	80a454a <_ZN5Print7printlnEv>
}
 80a4764:	4420      	add	r0, r4
 80a4766:	b003      	add	sp, #12
 80a4768:	bd30      	pop	{r4, r5, pc}

080a476a <_ZN5Print7printlnEfi>:
{
 80a476a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a476c:	4604      	mov	r4, r0
    return println((double)num, digits);
 80a476e:	4608      	mov	r0, r1
{
 80a4770:	4615      	mov	r5, r2
    return println((double)num, digits);
 80a4772:	f001 f92f 	bl	80a59d4 <__aeabi_f2d>
 80a4776:	9500      	str	r5, [sp, #0]
 80a4778:	4602      	mov	r2, r0
 80a477a:	460b      	mov	r3, r1
 80a477c:	4620      	mov	r0, r4
 80a477e:	f7ff ffe6 	bl	80a474e <_ZN5Print7printlnEdi>
}
 80a4782:	b003      	add	sp, #12
 80a4784:	bd30      	pop	{r4, r5, pc}

080a4786 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a4786:	2300      	movs	r3, #0
 80a4788:	6840      	ldr	r0, [r0, #4]
 80a478a:	461a      	mov	r2, r3
 80a478c:	4619      	mov	r1, r3
 80a478e:	f7ff b8b1 	b.w	80a38f4 <network_on>
	...

080a4794 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a4794:	4b01      	ldr	r3, [pc, #4]	; (80a479c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a4796:	4a02      	ldr	r2, [pc, #8]	; (80a47a0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a4798:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 80a479a:	4770      	bx	lr
 80a479c:	20000568 	.word	0x20000568
 80a47a0:	080a8810 	.word	0x080a8810

080a47a4 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
 80a47a4:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
 80a47a6:	2000      	movs	r0, #0
 80a47a8:	f7ff f8fc 	bl	80a39a4 <spark_sync_time_pending>
 80a47ac:	b128      	cbz	r0, 80a47ba <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a47ae:	f7ff f8f1 	bl	80a3994 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
 80a47b2:	f080 0001 	eor.w	r0, r0, #1
 80a47b6:	b2c0      	uxtb	r0, r0
    }
 80a47b8:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
 80a47ba:	2001      	movs	r0, #1
 80a47bc:	e7fc      	b.n	80a47b8 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

080a47c0 <_ZN9TimeClass4zoneEf>:
	return now() + time_zone_cache + dst_current_cache;
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
 80a47c0:	b510      	push	{r4, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
 80a47c2:	490a      	ldr	r1, [pc, #40]	; (80a47ec <_ZN9TimeClass4zoneEf+0x2c>)
{
 80a47c4:	4604      	mov	r4, r0
	if(GMT_Offset < -12 || GMT_Offset > 14)
 80a47c6:	f001 ff01 	bl	80a65cc <__aeabi_fcmplt>
 80a47ca:	b968      	cbnz	r0, 80a47e8 <_ZN9TimeClass4zoneEf+0x28>
 80a47cc:	4620      	mov	r0, r4
 80a47ce:	4908      	ldr	r1, [pc, #32]	; (80a47f0 <_ZN9TimeClass4zoneEf+0x30>)
 80a47d0:	f001 ff1a 	bl	80a6608 <__aeabi_fcmpgt>
 80a47d4:	b940      	cbnz	r0, 80a47e8 <_ZN9TimeClass4zoneEf+0x28>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
 80a47d6:	4907      	ldr	r1, [pc, #28]	; (80a47f4 <_ZN9TimeClass4zoneEf+0x34>)
 80a47d8:	4620      	mov	r0, r4
 80a47da:	f001 fd59 	bl	80a6290 <__aeabi_fmul>
 80a47de:	f001 ff35 	bl	80a664c <__aeabi_f2lz>
 80a47e2:	4b05      	ldr	r3, [pc, #20]	; (80a47f8 <_ZN9TimeClass4zoneEf+0x38>)
 80a47e4:	e9c3 0100 	strd	r0, r1, [r3]
}
 80a47e8:	bd10      	pop	{r4, pc}
 80a47ea:	bf00      	nop
 80a47ec:	c1400000 	.word	0xc1400000
 80a47f0:	41600000 	.word	0x41600000
 80a47f4:	45610000 	.word	0x45610000
 80a47f8:	20000580 	.word	0x20000580

080a47fc <_ZN9TimeClass7timeStrEx>:
    }
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 80a47fc:	b530      	push	{r4, r5, lr}
 80a47fe:	4604      	mov	r4, r0
    t += time_zone_cache;
 80a4800:	4818      	ldr	r0, [pc, #96]	; (80a4864 <_ZN9TimeClass7timeStrEx+0x68>)
{
 80a4802:	b093      	sub	sp, #76	; 0x4c
    t += time_zone_cache;
 80a4804:	e9d0 1000 	ldrd	r1, r0, [r0]
 80a4808:	1852      	adds	r2, r2, r1
 80a480a:	eb40 0303 	adc.w	r3, r0, r3
    t += dst_current_cache;
 80a480e:	4816      	ldr	r0, [pc, #88]	; (80a4868 <_ZN9TimeClass7timeStrEx+0x6c>)
    struct tm calendar_time = {};
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
 80a4810:	2500      	movs	r5, #0
    t += dst_current_cache;
 80a4812:	e9d0 1000 	ldrd	r1, r0, [r0]
 80a4816:	1852      	adds	r2, r2, r1
 80a4818:	eb40 0303 	adc.w	r3, r0, r3
 80a481c:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
 80a4820:	2224      	movs	r2, #36	; 0x24
 80a4822:	2100      	movs	r1, #0
 80a4824:	eb0d 0002 	add.w	r0, sp, r2
 80a4828:	f002 fa02 	bl	80a6c30 <memset>
    localtime_r(&t, &calendar_time);
 80a482c:	a909      	add	r1, sp, #36	; 0x24
 80a482e:	4668      	mov	r0, sp
 80a4830:	f002 f8fa 	bl	80a6a28 <localtime_r>
    char ascstr[26] = {};
 80a4834:	2216      	movs	r2, #22
 80a4836:	4629      	mov	r1, r5
 80a4838:	a803      	add	r0, sp, #12
 80a483a:	9502      	str	r5, [sp, #8]
 80a483c:	f002 f9f8 	bl	80a6c30 <memset>
    asctime_r(&calendar_time, ascstr);
 80a4840:	a902      	add	r1, sp, #8
 80a4842:	a809      	add	r0, sp, #36	; 0x24
 80a4844:	f002 f8b8 	bl	80a69b8 <asctime_r>
    int len = strlen(ascstr);
 80a4848:	a802      	add	r0, sp, #8
 80a484a:	f002 ff91 	bl	80a7770 <strlen>
    ascstr[len-1] = 0; // remove final newline
 80a484e:	ab12      	add	r3, sp, #72	; 0x48
 80a4850:	4418      	add	r0, r3
 80a4852:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
 80a4856:	a902      	add	r1, sp, #8
 80a4858:	4620      	mov	r0, r4
 80a485a:	f7ff fce9 	bl	80a4230 <_ZN6StringC1EPKc>
}
 80a485e:	4620      	mov	r0, r4
 80a4860:	b013      	add	sp, #76	; 0x4c
 80a4862:	bd30      	pop	{r4, r5, pc}
 80a4864:	20000580 	.word	0x20000580
 80a4868:	20000578 	.word	0x20000578

080a486c <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    localtime_r(&t, &calendar_time);
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 80a486c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a4870:	b0a5      	sub	sp, #148	; 0x94
 80a4872:	4607      	mov	r7, r0
 80a4874:	4688      	mov	r8, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 80a4876:	a814      	add	r0, sp, #80	; 0x50
{
 80a4878:	4611      	mov	r1, r2
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 80a487a:	223f      	movs	r2, #63	; 0x3f
{
 80a487c:	461d      	mov	r5, r3
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 80a487e:	f002 ff91 	bl	80a77a4 <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
 80a4882:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
 80a4884:	a814      	add	r0, sp, #80	; 0x50
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
 80a4886:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
 80a488a:	f002 ff71 	bl	80a7770 <strlen>
 80a488e:	4604      	mov	r4, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
 80a4890:	bb5d      	cbnz	r5, 80a48ea <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x7e>
        strcpy(time_zone_str, "Z");
 80a4892:	492a      	ldr	r1, [pc, #168]	; (80a493c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd0>)
 80a4894:	a803      	add	r0, sp, #12
 80a4896:	f002 fa01 	bl	80a6c9c <strcpy>
{
 80a489a:	2500      	movs	r5, #0
 80a489c:	ae14      	add	r6, sp, #80	; 0x50
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
 80a489e:	f104 3bff 	add.w	fp, r4, #4294967295
 80a48a2:	45ab      	cmp	fp, r5
 80a48a4:	d936      	bls.n	80a4914 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xa8>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
 80a48a6:	46b1      	mov	r9, r6
 80a48a8:	f819 3b01 	ldrb.w	r3, [r9], #1
 80a48ac:	f105 0a01 	add.w	sl, r5, #1
 80a48b0:	2b25      	cmp	r3, #37	; 0x25
 80a48b2:	d117      	bne.n	80a48e4 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
 80a48b4:	7873      	ldrb	r3, [r6, #1]
 80a48b6:	2b7a      	cmp	r3, #122	; 0x7a
 80a48b8:	d114      	bne.n	80a48e4 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
        {
            size_t tzlen = strlen(time_zone_str);
 80a48ba:	a803      	add	r0, sp, #12
 80a48bc:	f002 ff58 	bl	80a7770 <strlen>
 80a48c0:	4604      	mov	r4, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
 80a48c2:	ab14      	add	r3, sp, #80	; 0x50
 80a48c4:	1828      	adds	r0, r5, r0
 80a48c6:	4418      	add	r0, r3
 80a48c8:	ebab 0205 	sub.w	r2, fp, r5
 80a48cc:	1cb1      	adds	r1, r6, #2
 80a48ce:	f002 f9a1 	bl	80a6c14 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
 80a48d2:	4622      	mov	r2, r4
 80a48d4:	a903      	add	r1, sp, #12
 80a48d6:	4630      	mov	r0, r6
 80a48d8:	f002 f99c 	bl	80a6c14 <memcpy>
            len = strlen(format_str);
 80a48dc:	a814      	add	r0, sp, #80	; 0x50
 80a48de:	f002 ff47 	bl	80a7770 <strlen>
 80a48e2:	4604      	mov	r4, r0
    for (size_t i=0; i<len-1; i++)
 80a48e4:	464e      	mov	r6, r9
 80a48e6:	4655      	mov	r5, sl
 80a48e8:	e7d9      	b.n	80a489e <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
 80a48ea:	213c      	movs	r1, #60	; 0x3c
 80a48ec:	fb95 f3f1 	sdiv	r3, r5, r1
 80a48f0:	2b00      	cmp	r3, #0
 80a48f2:	bfb8      	it	lt
 80a48f4:	425b      	neglt	r3, r3
 80a48f6:	fbb3 f2f1 	udiv	r2, r3, r1
 80a48fa:	fb01 3312 	mls	r3, r1, r2, r3
 80a48fe:	9300      	str	r3, [sp, #0]
 80a4900:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80a4904:	2110      	movs	r1, #16
 80a4906:	fb95 f3f3 	sdiv	r3, r5, r3
 80a490a:	4a0d      	ldr	r2, [pc, #52]	; (80a4940 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd4>)
 80a490c:	a803      	add	r0, sp, #12
 80a490e:	f7ff f889 	bl	80a3a24 <snprintf>
 80a4912:	e7c2      	b.n	80a489a <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2e>
        }
    }

    char buf[50] = {};
 80a4914:	2100      	movs	r1, #0
 80a4916:	222e      	movs	r2, #46	; 0x2e
 80a4918:	a808      	add	r0, sp, #32
 80a491a:	9107      	str	r1, [sp, #28]
 80a491c:	f002 f988 	bl	80a6c30 <memset>
    strftime(buf, sizeof(buf), format_str, calendar_time);
 80a4920:	4643      	mov	r3, r8
 80a4922:	aa14      	add	r2, sp, #80	; 0x50
 80a4924:	2132      	movs	r1, #50	; 0x32
 80a4926:	a807      	add	r0, sp, #28
 80a4928:	f002 ff18 	bl	80a775c <strftime>
    return String(buf);
 80a492c:	4638      	mov	r0, r7
 80a492e:	a907      	add	r1, sp, #28
 80a4930:	f7ff fc7e 	bl	80a4230 <_ZN6StringC1EPKc>
}
 80a4934:	4638      	mov	r0, r7
 80a4936:	b025      	add	sp, #148	; 0x94
 80a4938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a493c:	080a8d95 	.word	0x080a8d95
 80a4940:	080a8814 	.word	0x080a8814

080a4944 <_ZN9TimeClass6formatExPKc>:
{
 80a4944:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a4946:	b08d      	sub	sp, #52	; 0x34
 80a4948:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80a494a:	4604      	mov	r4, r0
 80a494c:	e9cd 2300 	strd	r2, r3, [sp]
    if (format_spec == nullptr)
 80a4950:	b915      	cbnz	r5, 80a4958 <_ZN9TimeClass6formatExPKc+0x14>
        format_spec = this->format_spec;
 80a4952:	4b19      	ldr	r3, [pc, #100]	; (80a49b8 <_ZN9TimeClass6formatExPKc+0x74>)
 80a4954:	681d      	ldr	r5, [r3, #0]
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
 80a4956:	b12d      	cbz	r5, 80a4964 <_ZN9TimeClass6formatExPKc+0x20>
 80a4958:	4b18      	ldr	r3, [pc, #96]	; (80a49bc <_ZN9TimeClass6formatExPKc+0x78>)
 80a495a:	4628      	mov	r0, r5
 80a495c:	6819      	ldr	r1, [r3, #0]
 80a495e:	f002 f993 	bl	80a6c88 <strcmp>
 80a4962:	b938      	cbnz	r0, 80a4974 <_ZN9TimeClass6formatExPKc+0x30>
        return timeStr(t);
 80a4964:	e9dd 2300 	ldrd	r2, r3, [sp]
 80a4968:	4620      	mov	r0, r4
 80a496a:	f7ff ff47 	bl	80a47fc <_ZN9TimeClass7timeStrEx>
}
 80a496e:	4620      	mov	r0, r4
 80a4970:	b00d      	add	sp, #52	; 0x34
 80a4972:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t += time_zone_cache;
 80a4974:	9900      	ldr	r1, [sp, #0]
 80a4976:	4e12      	ldr	r6, [pc, #72]	; (80a49c0 <_ZN9TimeClass6formatExPKc+0x7c>)
    t += dst_current_cache;
 80a4978:	4f12      	ldr	r7, [pc, #72]	; (80a49c4 <_ZN9TimeClass6formatExPKc+0x80>)
    t += time_zone_cache;
 80a497a:	e9d6 3200 	ldrd	r3, r2, [r6]
 80a497e:	185b      	adds	r3, r3, r1
 80a4980:	9901      	ldr	r1, [sp, #4]
 80a4982:	eb41 0202 	adc.w	r2, r1, r2
    t += dst_current_cache;
 80a4986:	e9d7 0100 	ldrd	r0, r1, [r7]
 80a498a:	181b      	adds	r3, r3, r0
 80a498c:	eb41 0202 	adc.w	r2, r1, r2
 80a4990:	e9cd 3200 	strd	r3, r2, [sp]
    struct tm calendar_time = {};
 80a4994:	2100      	movs	r1, #0
 80a4996:	2224      	movs	r2, #36	; 0x24
 80a4998:	a803      	add	r0, sp, #12
 80a499a:	f002 f949 	bl	80a6c30 <memset>
    localtime_r(&t, &calendar_time);
 80a499e:	a903      	add	r1, sp, #12
 80a49a0:	4668      	mov	r0, sp
 80a49a2:	f002 f841 	bl	80a6a28 <localtime_r>
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
 80a49a6:	6832      	ldr	r2, [r6, #0]
 80a49a8:	683b      	ldr	r3, [r7, #0]
 80a49aa:	4620      	mov	r0, r4
 80a49ac:	4413      	add	r3, r2
 80a49ae:	a903      	add	r1, sp, #12
 80a49b0:	462a      	mov	r2, r5
 80a49b2:	f7ff ff5b 	bl	80a486c <_ZN9TimeClass14timeFormatImplEP2tmPKci>
 80a49b6:	e7da      	b.n	80a496e <_ZN9TimeClass6formatExPKc+0x2a>
 80a49b8:	20000570 	.word	0x20000570
 80a49bc:	20000008 	.word	0x20000008
 80a49c0:	20000580 	.word	0x20000580
 80a49c4:	20000578 	.word	0x20000578

080a49c8 <_ZN9TimeClass7isValidEv>:

bool TimeClass::isValid()
{
 80a49c8:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
 80a49ca:	2000      	movs	r0, #0
 80a49cc:	f7fe fdc2 	bl	80a3554 <hal_rtc_time_is_valid>
    if (rtcstate)
 80a49d0:	4604      	mov	r4, r0
 80a49d2:	b9a0      	cbnz	r0, 80a49fe <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 80a49d4:	f7fe ff30 	bl	80a3838 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 80a49d8:	2801      	cmp	r0, #1
 80a49da:	d110      	bne.n	80a49fe <_ZN9TimeClass7isValidEv+0x36>
 80a49dc:	4620      	mov	r0, r4
 80a49de:	f7fe ff43 	bl	80a3868 <system_thread_get_state>
 80a49e2:	b960      	cbnz	r0, 80a49fe <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
 80a49e4:	f7ff fede 	bl	80a47a4 <_ZN10CloudClass12syncTimeDoneEv.isra.0>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80a49e8:	b910      	cbnz	r0, 80a49f0 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
 80a49ea:	f7fe ffc3 	bl	80a3974 <spark_process>
        while (_while() && !_condition()) {
 80a49ee:	e7f9      	b.n	80a49e4 <_ZN9TimeClass7isValidEv+0x1c>
 80a49f0:	f7ff fed8 	bl	80a47a4 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
 80a49f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
 80a49f8:	2000      	movs	r0, #0
 80a49fa:	f7fe bdab 	b.w	80a3554 <hal_rtc_time_is_valid>
}
 80a49fe:	4620      	mov	r0, r4
 80a4a00:	bd10      	pop	{r4, pc}

080a4a02 <_ZN9TimeClass3nowEv>:
{
 80a4a02:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
 80a4a04:	f7ff ffe0 	bl	80a49c8 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
 80a4a08:	2210      	movs	r2, #16
 80a4a0a:	2100      	movs	r1, #0
 80a4a0c:	4668      	mov	r0, sp
 80a4a0e:	f002 f90f 	bl	80a6c30 <memset>
    hal_rtc_get_time(&tv, nullptr);
 80a4a12:	2100      	movs	r1, #0
 80a4a14:	4668      	mov	r0, sp
 80a4a16:	f7fe fda5 	bl	80a3564 <hal_rtc_get_time>
}
 80a4a1a:	9800      	ldr	r0, [sp, #0]
 80a4a1c:	b005      	add	sp, #20
 80a4a1e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a4a24 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a4a24:	4b02      	ldr	r3, [pc, #8]	; (80a4a30 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a4a26:	681a      	ldr	r2, [r3, #0]
 80a4a28:	4b02      	ldr	r3, [pc, #8]	; (80a4a34 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a4a2a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 80a4a2c:	4770      	bx	lr
 80a4a2e:	bf00      	nop
 80a4a30:	20000008 	.word	0x20000008
 80a4a34:	20000570 	.word	0x20000570

080a4a38 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a4a38:	2100      	movs	r1, #0
 80a4a3a:	f7fe bf0d 	b.w	80a3858 <system_delay_ms>

080a4a3e <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a4a3e:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a4a40:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 80a4a42:	4604      	mov	r4, r0
      if (_M_manager)
 80a4a44:	b113      	cbz	r3, 80a4a4c <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a4a46:	2203      	movs	r2, #3
 80a4a48:	4601      	mov	r1, r0
 80a4a4a:	4798      	blx	r3
    }
 80a4a4c:	4620      	mov	r0, r4
 80a4a4e:	bd10      	pop	{r4, pc}

080a4a50 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a4a50:	b510      	push	{r4, lr}
 80a4a52:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a4a54:	f7ff fff3 	bl	80a4a3e <_ZNSt14_Function_baseD1Ev>
 80a4a58:	4620      	mov	r0, r4
 80a4a5a:	bd10      	pop	{r4, pc}

080a4a5c <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 80a4a5c:	2300      	movs	r3, #0
 80a4a5e:	4803      	ldr	r0, [pc, #12]	; (80a4a6c <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a4a60:	4a03      	ldr	r2, [pc, #12]	; (80a4a70 <_GLOBAL__sub_I_RGB+0x14>)
 80a4a62:	4904      	ldr	r1, [pc, #16]	; (80a4a74 <_GLOBAL__sub_I_RGB+0x18>)
 80a4a64:	6083      	str	r3, [r0, #8]
 80a4a66:	f000 bd33 	b.w	80a54d0 <__aeabi_atexit>
 80a4a6a:	bf00      	nop
 80a4a6c:	20000588 	.word	0x20000588
 80a4a70:	20000240 	.word	0x20000240
 80a4a74:	080a4a51 	.word	0x080a4a51

080a4a78 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 80a4a78:	4b01      	ldr	r3, [pc, #4]	; (80a4a80 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 80a4a7a:	6018      	str	r0, [r3, #0]
    }, nullptr);
 80a4a7c:	4770      	bx	lr
 80a4a7e:	bf00      	nop
 80a4a80:	2000000c 	.word	0x2000000c

080a4a84 <serialEventRun>:
{
 80a4a84:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a4a86:	4b13      	ldr	r3, [pc, #76]	; (80a4ad4 <serialEventRun+0x50>)
 80a4a88:	b143      	cbz	r3, 80a4a9c <serialEventRun+0x18>
 80a4a8a:	f000 f995 	bl	80a4db8 <_Z16_fetch_usbserialv>
 80a4a8e:	6803      	ldr	r3, [r0, #0]
 80a4a90:	691b      	ldr	r3, [r3, #16]
 80a4a92:	4798      	blx	r3
 80a4a94:	2800      	cmp	r0, #0
 80a4a96:	dd01      	ble.n	80a4a9c <serialEventRun+0x18>
        serialEvent();
 80a4a98:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
 80a4a9c:	4b0e      	ldr	r3, [pc, #56]	; (80a4ad8 <serialEventRun+0x54>)
 80a4a9e:	b143      	cbz	r3, 80a4ab2 <serialEventRun+0x2e>
 80a4aa0:	f000 fa3c 	bl	80a4f1c <_Z22__fetch_global_Serial1v>
 80a4aa4:	6803      	ldr	r3, [r0, #0]
 80a4aa6:	691b      	ldr	r3, [r3, #16]
 80a4aa8:	4798      	blx	r3
 80a4aaa:	2800      	cmp	r0, #0
 80a4aac:	dd01      	ble.n	80a4ab2 <serialEventRun+0x2e>
        serialEvent1();
 80a4aae:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 80a4ab2:	4b0a      	ldr	r3, [pc, #40]	; (80a4adc <serialEventRun+0x58>)
 80a4ab4:	b10b      	cbz	r3, 80a4aba <serialEventRun+0x36>
 80a4ab6:	f3af 8000 	nop.w
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a4aba:	4b09      	ldr	r3, [pc, #36]	; (80a4ae0 <serialEventRun+0x5c>)
 80a4abc:	b143      	cbz	r3, 80a4ad0 <serialEventRun+0x4c>
 80a4abe:	f000 f9ab 	bl	80a4e18 <_Z17_fetch_usbserial1v>
 80a4ac2:	6803      	ldr	r3, [r0, #0]
 80a4ac4:	691b      	ldr	r3, [r3, #16]
 80a4ac6:	4798      	blx	r3
 80a4ac8:	2800      	cmp	r0, #0
 80a4aca:	dd01      	ble.n	80a4ad0 <serialEventRun+0x4c>
        usbSerialEvent1();
 80a4acc:	f3af 8000 	nop.w
}
 80a4ad0:	bd08      	pop	{r3, pc}
 80a4ad2:	bf00      	nop
	...

080a4ae4 <_post_loop>:
{
 80a4ae4:	b508      	push	{r3, lr}
	serialEventRun();
 80a4ae6:	f7ff ffcd 	bl	80a4a84 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a4aea:	f7fe fd2b 	bl	80a3544 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a4aee:	4b01      	ldr	r3, [pc, #4]	; (80a4af4 <_post_loop+0x10>)
 80a4af0:	6018      	str	r0, [r3, #0]
}
 80a4af2:	bd08      	pop	{r3, pc}
 80a4af4:	20000600 	.word	0x20000600

080a4af8 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a4af8:	4802      	ldr	r0, [pc, #8]	; (80a4b04 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a4afa:	4a03      	ldr	r2, [pc, #12]	; (80a4b08 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a4afc:	4903      	ldr	r1, [pc, #12]	; (80a4b0c <_Z33system_initialize_user_backup_ramv+0x14>)
 80a4afe:	1a12      	subs	r2, r2, r0
 80a4b00:	f002 b888 	b.w	80a6c14 <memcpy>
 80a4b04:	40024000 	.word	0x40024000
 80a4b08:	40024004 	.word	0x40024004
 80a4b0c:	080a8f08 	.word	0x080a8f08

080a4b10 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a4b10:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a4b12:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a4b14:	461a      	mov	r2, r3
 80a4b16:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a4b1a:	9300      	str	r3, [sp, #0]
 80a4b1c:	f7fe feb6 	bl	80a388c <system_ctrl_set_result>
}
 80a4b20:	b003      	add	sp, #12
 80a4b22:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a4b28 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 80a4b28:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a4b2a:	8843      	ldrh	r3, [r0, #2]
 80a4b2c:	2b0a      	cmp	r3, #10
 80a4b2e:	d008      	beq.n	80a4b42 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a4b30:	2b50      	cmp	r3, #80	; 0x50
 80a4b32:	d10b      	bne.n	80a4b4c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 80a4b34:	4b09      	ldr	r3, [pc, #36]	; (80a4b5c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a4b36:	681b      	ldr	r3, [r3, #0]
 80a4b38:	b14b      	cbz	r3, 80a4b4e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 80a4b3a:	b003      	add	sp, #12
 80a4b3c:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 80a4b40:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 80a4b42:	f7ff ffe5 	bl	80a4b10 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 80a4b46:	b003      	add	sp, #12
 80a4b48:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a4b4c:	2300      	movs	r3, #0
 80a4b4e:	461a      	mov	r2, r3
 80a4b50:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a4b54:	9300      	str	r3, [sp, #0]
 80a4b56:	f7fe fe99 	bl	80a388c <system_ctrl_set_result>
}
 80a4b5a:	e7f4      	b.n	80a4b46 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 80a4b5c:	2000059c 	.word	0x2000059c

080a4b60 <module_user_init_hook>:
{
 80a4b60:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a4b62:	4c12      	ldr	r4, [pc, #72]	; (80a4bac <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a4b64:	2100      	movs	r1, #0
 80a4b66:	4812      	ldr	r0, [pc, #72]	; (80a4bb0 <module_user_init_hook+0x50>)
 80a4b68:	f7fe ff7c 	bl	80a3a64 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a4b6c:	4d11      	ldr	r5, [pc, #68]	; (80a4bb4 <module_user_init_hook+0x54>)
 80a4b6e:	6823      	ldr	r3, [r4, #0]
 80a4b70:	42ab      	cmp	r3, r5
 80a4b72:	bf0c      	ite	eq
 80a4b74:	2201      	moveq	r2, #1
 80a4b76:	2200      	movne	r2, #0
 80a4b78:	4b0f      	ldr	r3, [pc, #60]	; (80a4bb8 <module_user_init_hook+0x58>)
 80a4b7a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a4b7c:	d002      	beq.n	80a4b84 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
 80a4b7e:	f7ff ffbb 	bl	80a4af8 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a4b82:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a4b84:	f7fe fcd6 	bl	80a3534 <HAL_RNG_GetRandomNumber>
 80a4b88:	4604      	mov	r4, r0
    srand(seed);
 80a4b8a:	f002 f859 	bl	80a6c40 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a4b8e:	4b0b      	ldr	r3, [pc, #44]	; (80a4bbc <module_user_init_hook+0x5c>)
 80a4b90:	b113      	cbz	r3, 80a4b98 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
 80a4b92:	4620      	mov	r0, r4
 80a4b94:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a4b98:	2100      	movs	r1, #0
 80a4b9a:	4808      	ldr	r0, [pc, #32]	; (80a4bbc <module_user_init_hook+0x5c>)
 80a4b9c:	f7fe ff0a 	bl	80a39b4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a4ba0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a4ba4:	2100      	movs	r1, #0
 80a4ba6:	4806      	ldr	r0, [pc, #24]	; (80a4bc0 <module_user_init_hook+0x60>)
 80a4ba8:	f7fe be66 	b.w	80a3878 <system_ctrl_set_app_request_handler>
 80a4bac:	40024000 	.word	0x40024000
 80a4bb0:	080a4a79 	.word	0x080a4a79
 80a4bb4:	9a271c1e 	.word	0x9a271c1e
 80a4bb8:	20000598 	.word	0x20000598
 80a4bbc:	00000000 	.word	0x00000000
 80a4bc0:	080a4b29 	.word	0x080a4b29

080a4bc4 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
{
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
 80a4bc4:	b510      	push	{r4, lr}
 80a4bc6:	b088      	sub	sp, #32
 80a4bc8:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 80a4bca:	4668      	mov	r0, sp
 80a4bcc:	f7ff fb30 	bl	80a4230 <_ZN6StringC1EPKc>
    return (*fn)(p);
 80a4bd0:	4669      	mov	r1, sp
 80a4bd2:	a804      	add	r0, sp, #16
 80a4bd4:	f7ff fb6b 	bl	80a42ae <_ZN6StringC1ERKS_>
 80a4bd8:	a804      	add	r0, sp, #16
 80a4bda:	47a0      	blx	r4
 80a4bdc:	4604      	mov	r4, r0
 80a4bde:	a804      	add	r0, sp, #16
 80a4be0:	f7ff fadc 	bl	80a419c <_ZN6StringD1Ev>
    String p(param);
 80a4be4:	4668      	mov	r0, sp
 80a4be6:	f7ff fad9 	bl	80a419c <_ZN6StringD1Ev>
}
 80a4bea:	4620      	mov	r0, r4
 80a4bec:	b008      	add	sp, #32
 80a4bee:	bd10      	pop	{r4, pc}

080a4bf0 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
 80a4bf0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
 80a4bf2:	2300      	movs	r3, #0
         size = sizeof(*this);
 80a4bf4:	2410      	movs	r4, #16
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
 80a4bf6:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
 80a4bfa:	9201      	str	r2, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 80a4bfc:	4669      	mov	r1, sp
 80a4bfe:	461a      	mov	r2, r3
 80a4c00:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
 80a4c02:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
 80a4c06:	f8ad 4000 	strh.w	r4, [sp]
 80a4c0a:	f7fe feab 	bl	80a3964 <spark_function>
}
 80a4c0e:	b004      	add	sp, #16
 80a4c10:	bd10      	pop	{r4, pc}

080a4c12 <_ZN9IPAddressD1Ev>:
    virtual ~IPAddress() {}
 80a4c12:	4770      	bx	lr

080a4c14 <_ZN9IPAddressD0Ev>:
 80a4c14:	b510      	push	{r4, lr}
 80a4c16:	4604      	mov	r4, r0
 80a4c18:	2118      	movs	r1, #24
 80a4c1a:	f000 fc5e 	bl	80a54da <_ZdlPvj>
 80a4c1e:	4620      	mov	r0, r4
 80a4c20:	bd10      	pop	{r4, pc}

080a4c22 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a4c22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a4c24:	460e      	mov	r6, r1
 80a4c26:	2400      	movs	r4, #0
 80a4c28:	f100 0708 	add.w	r7, r0, #8
 80a4c2c:	1d05      	adds	r5, r0, #4
        return printNumber(val, base) + t;
 80a4c2e:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 80a4c32:	220a      	movs	r2, #10
 80a4c34:	4630      	mov	r0, r6
 80a4c36:	f7ff fc9e 	bl	80a4576 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a4c3a:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a4c3c:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 80a4c3e:	d101      	bne.n	80a4c44 <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 80a4c40:	4620      	mov	r0, r4
 80a4c42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 80a4c44:	2c00      	cmp	r4, #0
 80a4c46:	d0f2      	beq.n	80a4c2e <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a4c48:	212e      	movs	r1, #46	; 0x2e
 80a4c4a:	4630      	mov	r0, r6
 80a4c4c:	f7ff fc7a 	bl	80a4544 <_ZN5Print5printEc>
 80a4c50:	4404      	add	r4, r0
 80a4c52:	e7ec      	b.n	80a4c2e <_ZNK9IPAddress7printToER5Print+0xc>

080a4c54 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 80a4c54:	b510      	push	{r4, lr}
 80a4c56:	4604      	mov	r4, r0
 80a4c58:	4b04      	ldr	r3, [pc, #16]	; (80a4c6c <_ZN9IPAddressC1Ev+0x18>)
    void clear() { memset(&address, 0, sizeof (address)); }
 80a4c5a:	2211      	movs	r2, #17
 80a4c5c:	2100      	movs	r1, #0
 80a4c5e:	f840 3b04 	str.w	r3, [r0], #4
 80a4c62:	f001 ffe5 	bl	80a6c30 <memset>
}
 80a4c66:	4620      	mov	r0, r4
 80a4c68:	bd10      	pop	{r4, pc}
 80a4c6a:	bf00      	nop
 80a4c6c:	080a8844 	.word	0x080a8844

080a4c70 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 80a4c70:	4603      	mov	r3, r0
 80a4c72:	4a07      	ldr	r2, [pc, #28]	; (80a4c90 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a4c74:	b510      	push	{r4, lr}
 80a4c76:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 80a4c7a:	f101 0210 	add.w	r2, r1, #16
 80a4c7e:	f851 4b04 	ldr.w	r4, [r1], #4
 80a4c82:	4291      	cmp	r1, r2
 80a4c84:	f843 4b04 	str.w	r4, [r3], #4
 80a4c88:	d1f9      	bne.n	80a4c7e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a4c8a:	780a      	ldrb	r2, [r1, #0]
 80a4c8c:	701a      	strb	r2, [r3, #0]
}
 80a4c8e:	bd10      	pop	{r4, pc}
 80a4c90:	080a8844 	.word	0x080a8844

080a4c94 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t address)
 80a4c94:	4a02      	ldr	r2, [pc, #8]	; (80a4ca0 <_ZN9IPAddressC1Em+0xc>)
    address.ipv4 = ipv4;
 80a4c96:	e9c0 2100 	strd	r2, r1, [r0]
        address.v = version;
 80a4c9a:	2204      	movs	r2, #4
 80a4c9c:	7502      	strb	r2, [r0, #20]
}
 80a4c9e:	4770      	bx	lr
 80a4ca0:	080a8844 	.word	0x080a8844

080a4ca4 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 80a4ca4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a4ca6:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a4caa:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 80a4cae:	2304      	movs	r3, #4
 80a4cb0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80a4cb4:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 80a4cb8:	6044      	str	r4, [r0, #4]
 80a4cba:	7503      	strb	r3, [r0, #20]
}
 80a4cbc:	bd10      	pop	{r4, pc}
	...

080a4cc0 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a4cc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a4cc2:	4d04      	ldr	r5, [pc, #16]	; (80a4cd4 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a4cc4:	6005      	str	r5, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a4cc6:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a4cca:	9500      	str	r5, [sp, #0]
 80a4ccc:	f7ff ffea 	bl	80a4ca4 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a4cd0:	b003      	add	sp, #12
 80a4cd2:	bd30      	pop	{r4, r5, pc}
 80a4cd4:	080a8844 	.word	0x080a8844

080a4cd8 <_ZN9IPAddressaSEPKh>:
{
 80a4cd8:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
 80a4cda:	78cb      	ldrb	r3, [r1, #3]
 80a4cdc:	9300      	str	r3, [sp, #0]
 80a4cde:	788b      	ldrb	r3, [r1, #2]
 80a4ce0:	784a      	ldrb	r2, [r1, #1]
 80a4ce2:	7809      	ldrb	r1, [r1, #0]
 80a4ce4:	f7ff ffde 	bl	80a4ca4 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a4ce8:	b002      	add	sp, #8
 80a4cea:	bd10      	pop	{r4, pc}

080a4cec <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* address)
 80a4cec:	b510      	push	{r4, lr}
 80a4cee:	4604      	mov	r4, r0
 80a4cf0:	4b02      	ldr	r3, [pc, #8]	; (80a4cfc <_ZN9IPAddressC1EPKh+0x10>)
 80a4cf2:	6003      	str	r3, [r0, #0]
    *this = address;
 80a4cf4:	f7ff fff0 	bl	80a4cd8 <_ZN9IPAddressaSEPKh>
}
 80a4cf8:	4620      	mov	r0, r4
 80a4cfa:	bd10      	pop	{r4, pc}
 80a4cfc:	080a8844 	.word	0x080a8844

080a4d00 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a4d00:	7441      	strb	r1, [r0, #17]
}
 80a4d02:	4770      	bx	lr

080a4d04 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a4d04:	4770      	bx	lr

080a4d06 <_ZN9USBSerial4readEv>:
{
 80a4d06:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a4d08:	2100      	movs	r1, #0
 80a4d0a:	7c00      	ldrb	r0, [r0, #16]
 80a4d0c:	f7fe fd54 	bl	80a37b8 <HAL_USB_USART_Receive_Data>
}
 80a4d10:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a4d14:	bd08      	pop	{r3, pc}

080a4d16 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
 80a4d16:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a4d18:	2101      	movs	r1, #1
 80a4d1a:	7c00      	ldrb	r0, [r0, #16]
 80a4d1c:	f7fe fd4c 	bl	80a37b8 <HAL_USB_USART_Receive_Data>
}
 80a4d20:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a4d24:	bd08      	pop	{r3, pc}

080a4d26 <_ZN9USBSerial17availableForWriteEv>:
{
 80a4d26:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a4d28:	7c00      	ldrb	r0, [r0, #16]
 80a4d2a:	f7fe fd3d 	bl	80a37a8 <HAL_USB_USART_Available_Data_For_Write>
}
 80a4d2e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a4d32:	bd08      	pop	{r3, pc}

080a4d34 <_ZN9USBSerial9availableEv>:
{
 80a4d34:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a4d36:	7c00      	ldrb	r0, [r0, #16]
 80a4d38:	f7fe fd2e 	bl	80a3798 <HAL_USB_USART_Available_Data>
}
 80a4d3c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a4d40:	bd08      	pop	{r3, pc}

080a4d42 <_ZN9USBSerial5writeEh>:
{
 80a4d42:	b538      	push	{r3, r4, r5, lr}
 80a4d44:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a4d46:	7c00      	ldrb	r0, [r0, #16]
{
 80a4d48:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a4d4a:	f7fe fd2d 	bl	80a37a8 <HAL_USB_USART_Available_Data_For_Write>
 80a4d4e:	2800      	cmp	r0, #0
 80a4d50:	dc01      	bgt.n	80a4d56 <_ZN9USBSerial5writeEh+0x14>
 80a4d52:	7c60      	ldrb	r0, [r4, #17]
 80a4d54:	b128      	cbz	r0, 80a4d62 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a4d56:	4629      	mov	r1, r5
 80a4d58:	7c20      	ldrb	r0, [r4, #16]
 80a4d5a:	f7fe fd35 	bl	80a37c8 <HAL_USB_USART_Send_Data>
 80a4d5e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 80a4d62:	bd38      	pop	{r3, r4, r5, pc}

080a4d64 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 80a4d64:	7c00      	ldrb	r0, [r0, #16]
 80a4d66:	f7fe bd37 	b.w	80a37d8 <HAL_USB_USART_Flush_Data>

080a4d6a <_ZN9USBSerialD0Ev>:
 80a4d6a:	b510      	push	{r4, lr}
 80a4d6c:	4604      	mov	r4, r0
 80a4d6e:	2114      	movs	r1, #20
 80a4d70:	f000 fbb3 	bl	80a54da <_ZdlPvj>
 80a4d74:	4620      	mov	r0, r4
 80a4d76:	bd10      	pop	{r4, pc}

080a4d78 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a4d78:	b510      	push	{r4, lr}
 80a4d7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a4d7e:	4604      	mov	r4, r0
 80a4d80:	4608      	mov	r0, r1
 80a4d82:	2100      	movs	r1, #0
 80a4d84:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a4d88:	4b04      	ldr	r3, [pc, #16]	; (80a4d9c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 80a4d8a:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a4d8c:	6023      	str	r3, [r4, #0]
  _blocking = true;
 80a4d8e:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 80a4d90:	4611      	mov	r1, r2
  _blocking = true;
 80a4d92:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 80a4d94:	f7fe fcf0 	bl	80a3778 <HAL_USB_USART_Init>
}
 80a4d98:	4620      	mov	r0, r4
 80a4d9a:	bd10      	pop	{r4, pc}
 80a4d9c:	080a8858 	.word	0x080a8858

080a4da0 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a4da0:	2200      	movs	r2, #0
 80a4da2:	7c00      	ldrb	r0, [r0, #16]
 80a4da4:	f7fe bcf0 	b.w	80a3788 <HAL_USB_USART_Begin>

080a4da8 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a4da8:	b510      	push	{r4, lr}
 80a4daa:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a4dac:	2214      	movs	r2, #20
 80a4dae:	2100      	movs	r1, #0
 80a4db0:	f001 ff3e 	bl	80a6c30 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a4db4:	4620      	mov	r0, r4
 80a4db6:	bd10      	pop	{r4, pc}

080a4db8 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a4db8:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a4dba:	4d0f      	ldr	r5, [pc, #60]	; (80a4df8 <_Z16_fetch_usbserialv+0x40>)
{
 80a4dbc:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a4dbe:	a801      	add	r0, sp, #4
 80a4dc0:	f7ff fff2 	bl	80a4da8 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a4dc4:	7829      	ldrb	r1, [r5, #0]
 80a4dc6:	f3bf 8f5b 	dmb	ish
 80a4dca:	f011 0401 	ands.w	r4, r1, #1
 80a4dce:	d110      	bne.n	80a4df2 <_Z16_fetch_usbserialv+0x3a>
 80a4dd0:	4628      	mov	r0, r5
 80a4dd2:	f7fb f96a 	bl	80a00aa <__cxa_guard_acquire>
 80a4dd6:	b160      	cbz	r0, 80a4df2 <_Z16_fetch_usbserialv+0x3a>
 80a4dd8:	4621      	mov	r1, r4
 80a4dda:	aa01      	add	r2, sp, #4
 80a4ddc:	4807      	ldr	r0, [pc, #28]	; (80a4dfc <_Z16_fetch_usbserialv+0x44>)
 80a4dde:	f7ff ffcb 	bl	80a4d78 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a4de2:	4628      	mov	r0, r5
 80a4de4:	f7fb f966 	bl	80a00b4 <__cxa_guard_release>
 80a4de8:	4a05      	ldr	r2, [pc, #20]	; (80a4e00 <_Z16_fetch_usbserialv+0x48>)
 80a4dea:	4906      	ldr	r1, [pc, #24]	; (80a4e04 <_Z16_fetch_usbserialv+0x4c>)
 80a4dec:	4803      	ldr	r0, [pc, #12]	; (80a4dfc <_Z16_fetch_usbserialv+0x44>)
 80a4dee:	f000 fb6f 	bl	80a54d0 <__aeabi_atexit>
	return _usbserial;
}
 80a4df2:	4802      	ldr	r0, [pc, #8]	; (80a4dfc <_Z16_fetch_usbserialv+0x44>)
 80a4df4:	b007      	add	sp, #28
 80a4df6:	bd30      	pop	{r4, r5, pc}
 80a4df8:	200005a0 	.word	0x200005a0
 80a4dfc:	200005a8 	.word	0x200005a8
 80a4e00:	20000240 	.word	0x20000240
 80a4e04:	080a4d05 	.word	0x080a4d05

080a4e08 <_Z23acquireUSBSerial1Bufferv>:
 80a4e08:	b510      	push	{r4, lr}
 80a4e0a:	4604      	mov	r4, r0
 80a4e0c:	2214      	movs	r2, #20
 80a4e0e:	2100      	movs	r1, #0
 80a4e10:	f001 ff0e 	bl	80a6c30 <memset>
 80a4e14:	4620      	mov	r0, r4
 80a4e16:	bd10      	pop	{r4, pc}

080a4e18 <_Z17_fetch_usbserial1v>:

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a4e18:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a4e1a:	4c0f      	ldr	r4, [pc, #60]	; (80a4e58 <_Z17_fetch_usbserial1v+0x40>)
{
 80a4e1c:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a4e1e:	a801      	add	r0, sp, #4
 80a4e20:	f7ff fff2 	bl	80a4e08 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a4e24:	7823      	ldrb	r3, [r4, #0]
 80a4e26:	f3bf 8f5b 	dmb	ish
 80a4e2a:	07db      	lsls	r3, r3, #31
 80a4e2c:	d410      	bmi.n	80a4e50 <_Z17_fetch_usbserial1v+0x38>
 80a4e2e:	4620      	mov	r0, r4
 80a4e30:	f7fb f93b 	bl	80a00aa <__cxa_guard_acquire>
 80a4e34:	b160      	cbz	r0, 80a4e50 <_Z17_fetch_usbserial1v+0x38>
 80a4e36:	2101      	movs	r1, #1
 80a4e38:	aa01      	add	r2, sp, #4
 80a4e3a:	4808      	ldr	r0, [pc, #32]	; (80a4e5c <_Z17_fetch_usbserial1v+0x44>)
 80a4e3c:	f7ff ff9c 	bl	80a4d78 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a4e40:	4620      	mov	r0, r4
 80a4e42:	f7fb f937 	bl	80a00b4 <__cxa_guard_release>
 80a4e46:	4a06      	ldr	r2, [pc, #24]	; (80a4e60 <_Z17_fetch_usbserial1v+0x48>)
 80a4e48:	4906      	ldr	r1, [pc, #24]	; (80a4e64 <_Z17_fetch_usbserial1v+0x4c>)
 80a4e4a:	4804      	ldr	r0, [pc, #16]	; (80a4e5c <_Z17_fetch_usbserial1v+0x44>)
 80a4e4c:	f000 fb40 	bl	80a54d0 <__aeabi_atexit>
  return _usbserial1;
}
 80a4e50:	4802      	ldr	r0, [pc, #8]	; (80a4e5c <_Z17_fetch_usbserial1v+0x44>)
 80a4e52:	b006      	add	sp, #24
 80a4e54:	bd10      	pop	{r4, pc}
 80a4e56:	bf00      	nop
 80a4e58:	200005a4 	.word	0x200005a4
 80a4e5c:	200005bc 	.word	0x200005bc
 80a4e60:	20000240 	.word	0x20000240
 80a4e64:	080a4d05 	.word	0x080a4d05

080a4e68 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
 80a4e68:	4770      	bx	lr

080a4e6a <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a4e6a:	7441      	strb	r1, [r0, #17]
}
 80a4e6c:	4770      	bx	lr

080a4e6e <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 80a4e6e:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 80a4e70:	7c00      	ldrb	r0, [r0, #16]
 80a4e72:	f7fe fbd7 	bl	80a3624 <hal_usart_available_data_for_write>
}
 80a4e76:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a4e7a:	bd08      	pop	{r3, pc}

080a4e7c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a4e7c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 80a4e7e:	7c00      	ldrb	r0, [r0, #16]
 80a4e80:	f7fe fba8 	bl	80a35d4 <hal_usart_available>
}
 80a4e84:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a4e88:	bd08      	pop	{r3, pc}

080a4e8a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a4e8a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 80a4e8c:	7c00      	ldrb	r0, [r0, #16]
 80a4e8e:	f7fe fbb1 	bl	80a35f4 <hal_usart_peek>
}
 80a4e92:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a4e96:	bd08      	pop	{r3, pc}

080a4e98 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a4e98:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 80a4e9a:	7c00      	ldrb	r0, [r0, #16]
 80a4e9c:	f7fe fba2 	bl	80a35e4 <hal_usart_read>
}
 80a4ea0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a4ea4:	bd08      	pop	{r3, pc}

080a4ea6 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 80a4ea6:	7c00      	ldrb	r0, [r0, #16]
 80a4ea8:	f7fe bbac 	b.w	80a3604 <hal_usart_flush>

080a4eac <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a4eac:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a4eae:	7c46      	ldrb	r6, [r0, #17]
{
 80a4eb0:	4604      	mov	r4, r0
 80a4eb2:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a4eb4:	b12e      	cbz	r6, 80a4ec2 <_ZN11USARTSerial5writeEh+0x16>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 80a4eb6:	4629      	mov	r1, r5
 80a4eb8:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a4eba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 80a4ebe:	f7fe bb81 	b.w	80a35c4 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a4ec2:	7c00      	ldrb	r0, [r0, #16]
 80a4ec4:	f7fe fbae 	bl	80a3624 <hal_usart_available_data_for_write>
 80a4ec8:	2800      	cmp	r0, #0
 80a4eca:	dcf4      	bgt.n	80a4eb6 <_ZN11USARTSerial5writeEh+0xa>
}
 80a4ecc:	4630      	mov	r0, r6
 80a4ece:	bd70      	pop	{r4, r5, r6, pc}

080a4ed0 <_ZN11USARTSerialD0Ev>:
 80a4ed0:	b510      	push	{r4, lr}
 80a4ed2:	4604      	mov	r4, r0
 80a4ed4:	2114      	movs	r1, #20
 80a4ed6:	f000 fb00 	bl	80a54da <_ZdlPvj>
 80a4eda:	4620      	mov	r0, r4
 80a4edc:	bd10      	pop	{r4, pc}
	...

080a4ee0 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
 80a4ee0:	f04f 0c00 	mov.w	ip, #0
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a4ee4:	b510      	push	{r4, lr}
 80a4ee6:	4604      	mov	r4, r0
 80a4ee8:	4608      	mov	r0, r1
 80a4eea:	4611      	mov	r1, r2
 80a4eec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a4ef0:	e9c4 c201 	strd	ip, r2, [r4, #4]
 80a4ef4:	4a04      	ldr	r2, [pc, #16]	; (80a4f08 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
  _serial = serial;
 80a4ef6:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a4ef8:	6022      	str	r2, [r4, #0]
  _blocking = true;
 80a4efa:	2201      	movs	r2, #1
 80a4efc:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
 80a4efe:	461a      	mov	r2, r3
 80a4f00:	f7fe fb58 	bl	80a35b4 <hal_usart_init>
}
 80a4f04:	4620      	mov	r0, r4
 80a4f06:	bd10      	pop	{r4, pc}
 80a4f08:	080a8888 	.word	0x080a8888

080a4f0c <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
 80a4f0c:	2300      	movs	r3, #0
 80a4f0e:	7c00      	ldrb	r0, [r0, #16]
 80a4f10:	f7fe bb90 	b.w	80a3634 <hal_usart_begin_config>

080a4f14 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
 80a4f14:	2200      	movs	r2, #0
 80a4f16:	f7ff bff9 	b.w	80a4f0c <_ZN11USARTSerial5beginEmm>
	...

080a4f1c <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a4f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
#else
  if (!serial1_rx_buffer) {
 80a4f1e:	4c1a      	ldr	r4, [pc, #104]	; (80a4f88 <_Z22__fetch_global_Serial1v+0x6c>)
 80a4f20:	6826      	ldr	r6, [r4, #0]
 80a4f22:	b94e      	cbnz	r6, 80a4f38 <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new hal_usart_ring_buffer_t();
 80a4f24:	2084      	movs	r0, #132	; 0x84
 80a4f26:	f7fb f8b8 	bl	80a009a <_Znwj>
 80a4f2a:	4605      	mov	r5, r0
 80a4f2c:	b118      	cbz	r0, 80a4f36 <_Z22__fetch_global_Serial1v+0x1a>
 80a4f2e:	2284      	movs	r2, #132	; 0x84
 80a4f30:	4631      	mov	r1, r6
 80a4f32:	f001 fe7d 	bl	80a6c30 <memset>
 80a4f36:	6025      	str	r5, [r4, #0]
  }
  if (!serial1_tx_buffer) {
 80a4f38:	4d14      	ldr	r5, [pc, #80]	; (80a4f8c <_Z22__fetch_global_Serial1v+0x70>)
 80a4f3a:	682f      	ldr	r7, [r5, #0]
 80a4f3c:	b94f      	cbnz	r7, 80a4f52 <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
 80a4f3e:	2084      	movs	r0, #132	; 0x84
 80a4f40:	f7fb f8ab 	bl	80a009a <_Znwj>
 80a4f44:	4606      	mov	r6, r0
 80a4f46:	b118      	cbz	r0, 80a4f50 <_Z22__fetch_global_Serial1v+0x34>
 80a4f48:	2284      	movs	r2, #132	; 0x84
 80a4f4a:	4639      	mov	r1, r7
 80a4f4c:	f001 fe70 	bl	80a6c30 <memset>
 80a4f50:	602e      	str	r6, [r5, #0]
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
 80a4f52:	4f0f      	ldr	r7, [pc, #60]	; (80a4f90 <_Z22__fetch_global_Serial1v+0x74>)
 80a4f54:	7839      	ldrb	r1, [r7, #0]
 80a4f56:	f3bf 8f5b 	dmb	ish
 80a4f5a:	f011 0601 	ands.w	r6, r1, #1
 80a4f5e:	d111      	bne.n	80a4f84 <_Z22__fetch_global_Serial1v+0x68>
 80a4f60:	4638      	mov	r0, r7
 80a4f62:	f7fb f8a2 	bl	80a00aa <__cxa_guard_acquire>
 80a4f66:	b168      	cbz	r0, 80a4f84 <_Z22__fetch_global_Serial1v+0x68>
 80a4f68:	4631      	mov	r1, r6
 80a4f6a:	6822      	ldr	r2, [r4, #0]
 80a4f6c:	682b      	ldr	r3, [r5, #0]
 80a4f6e:	4809      	ldr	r0, [pc, #36]	; (80a4f94 <_Z22__fetch_global_Serial1v+0x78>)
 80a4f70:	f7ff ffb6 	bl	80a4ee0 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
 80a4f74:	4638      	mov	r0, r7
 80a4f76:	f7fb f89d 	bl	80a00b4 <__cxa_guard_release>
 80a4f7a:	4a07      	ldr	r2, [pc, #28]	; (80a4f98 <_Z22__fetch_global_Serial1v+0x7c>)
 80a4f7c:	4907      	ldr	r1, [pc, #28]	; (80a4f9c <_Z22__fetch_global_Serial1v+0x80>)
 80a4f7e:	4805      	ldr	r0, [pc, #20]	; (80a4f94 <_Z22__fetch_global_Serial1v+0x78>)
 80a4f80:	f000 faa6 	bl	80a54d0 <__aeabi_atexit>
#endif
	return serial1;
}
 80a4f84:	4803      	ldr	r0, [pc, #12]	; (80a4f94 <_Z22__fetch_global_Serial1v+0x78>)
 80a4f86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a4f88:	200005d4 	.word	0x200005d4
 80a4f8c:	200005d8 	.word	0x200005d8
 80a4f90:	200005d0 	.word	0x200005d0
 80a4f94:	200005dc 	.word	0x200005dc
 80a4f98:	20000240 	.word	0x20000240
 80a4f9c:	080a4e69 	.word	0x080a4e69

080a4fa0 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 80a4fa0:	4770      	bx	lr

080a4fa2 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a4fa2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a4fa4:	4606      	mov	r6, r0
 80a4fa6:	4615      	mov	r5, r2
 80a4fa8:	460c      	mov	r4, r1
 80a4faa:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a4fac:	42bc      	cmp	r4, r7
 80a4fae:	d006      	beq.n	80a4fbe <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a4fb0:	6833      	ldr	r3, [r6, #0]
 80a4fb2:	4630      	mov	r0, r6
 80a4fb4:	689b      	ldr	r3, [r3, #8]
 80a4fb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a4fba:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 80a4fbc:	e7f6      	b.n	80a4fac <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 80a4fbe:	4628      	mov	r0, r5
 80a4fc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a4fc2 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 80a4fc2:	2200      	movs	r2, #0
 80a4fc4:	7c00      	ldrb	r0, [r0, #16]
 80a4fc6:	f7fe bb3d 	b.w	80a3644 <hal_i2c_write>

080a4fca <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 80a4fca:	2100      	movs	r1, #0
 80a4fcc:	7c00      	ldrb	r0, [r0, #16]
 80a4fce:	f7fe bb41 	b.w	80a3654 <hal_i2c_available>

080a4fd2 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 80a4fd2:	2100      	movs	r1, #0
 80a4fd4:	7c00      	ldrb	r0, [r0, #16]
 80a4fd6:	f7fe bb45 	b.w	80a3664 <hal_i2c_read>

080a4fda <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 80a4fda:	2100      	movs	r1, #0
 80a4fdc:	7c00      	ldrb	r0, [r0, #16]
 80a4fde:	f7fe bb49 	b.w	80a3674 <hal_i2c_peek>

080a4fe2 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 80a4fe2:	2100      	movs	r1, #0
 80a4fe4:	7c00      	ldrb	r0, [r0, #16]
 80a4fe6:	f7fe bb4d 	b.w	80a3684 <hal_i2c_flush>

080a4fea <_ZN7TwoWireD0Ev>:
 80a4fea:	b510      	push	{r4, lr}
 80a4fec:	4604      	mov	r4, r0
 80a4fee:	2114      	movs	r1, #20
 80a4ff0:	f000 fa73 	bl	80a54da <_ZdlPvj>
 80a4ff4:	4620      	mov	r0, r4
 80a4ff6:	bd10      	pop	{r4, pc}

080a4ff8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a4ff8:	b510      	push	{r4, lr}
 80a4ffa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a4ffe:	4604      	mov	r4, r0
 80a5000:	4608      	mov	r0, r1
 80a5002:	2100      	movs	r1, #0
 80a5004:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a5008:	4b03      	ldr	r3, [pc, #12]	; (80a5018 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
  hal_i2c_init(_i2c, &conf);
 80a500a:	4611      	mov	r1, r2
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a500c:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
 80a500e:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
 80a5010:	f7fe fb48 	bl	80a36a4 <hal_i2c_init>
}
 80a5014:	4620      	mov	r0, r4
 80a5016:	bd10      	pop	{r4, pc}
 80a5018:	080a88b8 	.word	0x080a88b8

080a501c <_ZN10WiFiSignalD1Ev>:
    virtual ~WiFiSignal() {};
 80a501c:	4770      	bx	lr

080a501e <_ZNK10WiFiSignal19getAccessTechnologyEv>:
    return true;
}

hal_net_access_tech_t WiFiSignal::getAccessTechnology() const {
    return NET_ACCESS_TECHNOLOGY_WIFI;
}
 80a501e:	2001      	movs	r0, #1
 80a5020:	4770      	bx	lr

080a5022 <_ZN5spark9WiFiClass5readyEv>:
        return network_ready(*this, 0, NULL);
 80a5022:	2200      	movs	r2, #0
 80a5024:	6840      	ldr	r0, [r0, #4]
 80a5026:	4611      	mov	r1, r2
 80a5028:	f7fe bc5c 	b.w	80a38e4 <network_ready>

080a502c <_ZN10WiFiSignalD0Ev>:
    virtual ~WiFiSignal() {};
 80a502c:	b510      	push	{r4, lr}
 80a502e:	4604      	mov	r4, r0
 80a5030:	2124      	movs	r1, #36	; 0x24
 80a5032:	f000 fa52 	bl	80a54da <_ZdlPvj>
 80a5036:	4620      	mov	r0, r4
 80a5038:	bd10      	pop	{r4, pc}

080a503a <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a503a:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a503c:	4615      	mov	r5, r2
 80a503e:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a5040:	2211      	movs	r2, #17
    IPAddress resolve(const char* name)
 80a5042:	460e      	mov	r6, r1
 80a5044:	4604      	mov	r4, r0
        HAL_IPAddress ip = {};
 80a5046:	2100      	movs	r1, #0
 80a5048:	a803      	add	r0, sp, #12
 80a504a:	f001 fdf1 	bl	80a6c30 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a504e:	4628      	mov	r0, r5
 80a5050:	f002 fb8e 	bl	80a7770 <strlen>
 80a5054:	2700      	movs	r7, #0
 80a5056:	b281      	uxth	r1, r0
 80a5058:	6873      	ldr	r3, [r6, #4]
 80a505a:	4628      	mov	r0, r5
 80a505c:	9700      	str	r7, [sp, #0]
 80a505e:	aa03      	add	r2, sp, #12
 80a5060:	f7fe fbca 	bl	80a37f8 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a5064:	b130      	cbz	r0, 80a5074 <_ZN5spark9WiFiClass7resolveEPKc+0x3a>
 80a5066:	4639      	mov	r1, r7
 80a5068:	4620      	mov	r0, r4
 80a506a:	f7ff fe13 	bl	80a4c94 <_ZN9IPAddressC1Em>
    }
 80a506e:	4620      	mov	r0, r4
 80a5070:	b009      	add	sp, #36	; 0x24
 80a5072:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a5074:	4620      	mov	r0, r4
 80a5076:	a903      	add	r1, sp, #12
 80a5078:	f7ff fdfa 	bl	80a4c70 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 80a507c:	e7f7      	b.n	80a506e <_ZN5spark9WiFiClass7resolveEPKc+0x34>

080a507e <_ZN5spark9WiFiClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 80a507e:	2200      	movs	r2, #0
 80a5080:	6840      	ldr	r0, [r0, #4]
 80a5082:	4611      	mov	r1, r2
 80a5084:	f7fe bc4e 	b.w	80a3924 <network_listening>

080a5088 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 80a5088:	2200      	movs	r2, #0
 80a508a:	6840      	ldr	r0, [r0, #4]
 80a508c:	4611      	mov	r1, r2
 80a508e:	f7fe bc59 	b.w	80a3944 <network_get_listen_timeout>

080a5092 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 80a5092:	2200      	movs	r2, #0
 80a5094:	6840      	ldr	r0, [r0, #4]
 80a5096:	f7fe bc4d 	b.w	80a3934 <network_set_listen_timeout>

080a509a <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 80a509a:	2200      	movs	r2, #0
 80a509c:	6840      	ldr	r0, [r0, #4]
 80a509e:	f081 0101 	eor.w	r1, r1, #1
 80a50a2:	f7fe bc37 	b.w	80a3914 <network_listen>

080a50a6 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 80a50a6:	2300      	movs	r3, #0
 80a50a8:	6840      	ldr	r0, [r0, #4]
 80a50aa:	461a      	mov	r2, r3
 80a50ac:	4619      	mov	r1, r3
 80a50ae:	f7fe bc29 	b.w	80a3904 <network_off>

080a50b2 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 80a50b2:	2200      	movs	r2, #0
 80a50b4:	6840      	ldr	r0, [r0, #4]
 80a50b6:	4611      	mov	r1, r2
 80a50b8:	f7fe bc04 	b.w	80a38c4 <network_connecting>

080a50bc <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a50bc:	2200      	movs	r2, #0
 80a50be:	2102      	movs	r1, #2
 80a50c0:	6840      	ldr	r0, [r0, #4]
 80a50c2:	f7fe bc07 	b.w	80a38d4 <network_disconnect>

080a50c6 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 80a50c6:	2300      	movs	r3, #0
 80a50c8:	6840      	ldr	r0, [r0, #4]
 80a50ca:	461a      	mov	r2, r3
 80a50cc:	f7fe bbf2 	b.w	80a38b4 <network_connect>

080a50d0 <_ZNK10WiFiSignal11getStrengthEv>:

float WiFiSignal::getStrength() const {
 80a50d0:	b508      	push	{r3, lr}
    if (inf_.size != 0 && inf_.strength >= 0) {
 80a50d2:	8983      	ldrh	r3, [r0, #12]
 80a50d4:	b15b      	cbz	r3, 80a50ee <_ZNK10WiFiSignal11getStrengthEv+0x1e>
 80a50d6:	6940      	ldr	r0, [r0, #20]
 80a50d8:	2800      	cmp	r0, #0
 80a50da:	db08      	blt.n	80a50ee <_ZNK10WiFiSignal11getStrengthEv+0x1e>
        return inf_.strength / 65535.0f * 100.0f;
 80a50dc:	f001 f884 	bl	80a61e8 <__aeabi_i2f>
 80a50e0:	4904      	ldr	r1, [pc, #16]	; (80a50f4 <_ZNK10WiFiSignal11getStrengthEv+0x24>)
 80a50e2:	f001 f989 	bl	80a63f8 <__aeabi_fdiv>
 80a50e6:	4904      	ldr	r1, [pc, #16]	; (80a50f8 <_ZNK10WiFiSignal11getStrengthEv+0x28>)
 80a50e8:	f001 f8d2 	bl	80a6290 <__aeabi_fmul>
    }
    return -1.0f;
}
 80a50ec:	bd08      	pop	{r3, pc}
    return -1.0f;
 80a50ee:	4803      	ldr	r0, [pc, #12]	; (80a50fc <_ZNK10WiFiSignal11getStrengthEv+0x2c>)
 80a50f0:	e7fc      	b.n	80a50ec <_ZNK10WiFiSignal11getStrengthEv+0x1c>
 80a50f2:	bf00      	nop
 80a50f4:	477fff00 	.word	0x477fff00
 80a50f8:	42c80000 	.word	0x42c80000
 80a50fc:	bf800000 	.word	0xbf800000

080a5100 <_ZNK10WiFiSignal16getStrengthValueEv>:

float WiFiSignal::getStrengthValue() const {
 80a5100:	b508      	push	{r3, lr}
    if (inf_.size != 0 && inf_.rssi != std::numeric_limits<int32_t>::min()) {
 80a5102:	8983      	ldrh	r3, [r0, #12]
 80a5104:	b14b      	cbz	r3, 80a511a <_ZNK10WiFiSignal16getStrengthValueEv+0x1a>
 80a5106:	6900      	ldr	r0, [r0, #16]
 80a5108:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 80a510c:	d005      	beq.n	80a511a <_ZNK10WiFiSignal16getStrengthValueEv+0x1a>
        return inf_.rssi / 100.0f;
 80a510e:	f001 f86b 	bl	80a61e8 <__aeabi_i2f>
 80a5112:	4903      	ldr	r1, [pc, #12]	; (80a5120 <_ZNK10WiFiSignal16getStrengthValueEv+0x20>)
 80a5114:	f001 f970 	bl	80a63f8 <__aeabi_fdiv>
    }
    return 0.0f;
}
 80a5118:	bd08      	pop	{r3, pc}
    return 0.0f;
 80a511a:	2000      	movs	r0, #0
 80a511c:	e7fc      	b.n	80a5118 <_ZNK10WiFiSignal16getStrengthValueEv+0x18>
 80a511e:	bf00      	nop
 80a5120:	42c80000 	.word	0x42c80000

080a5124 <_ZNK10WiFiSignal10getQualityEv>:

float WiFiSignal::getQuality() const {
 80a5124:	b508      	push	{r3, lr}
    if (inf_.size != 0 && inf_.quality >= 0) {
 80a5126:	8983      	ldrh	r3, [r0, #12]
 80a5128:	b15b      	cbz	r3, 80a5142 <_ZNK10WiFiSignal10getQualityEv+0x1e>
 80a512a:	6a00      	ldr	r0, [r0, #32]
 80a512c:	2800      	cmp	r0, #0
 80a512e:	db08      	blt.n	80a5142 <_ZNK10WiFiSignal10getQualityEv+0x1e>
        return inf_.quality / 65535.0f * 100.0f;
 80a5130:	f001 f85a 	bl	80a61e8 <__aeabi_i2f>
 80a5134:	4904      	ldr	r1, [pc, #16]	; (80a5148 <_ZNK10WiFiSignal10getQualityEv+0x24>)
 80a5136:	f001 f95f 	bl	80a63f8 <__aeabi_fdiv>
 80a513a:	4904      	ldr	r1, [pc, #16]	; (80a514c <_ZNK10WiFiSignal10getQualityEv+0x28>)
 80a513c:	f001 f8a8 	bl	80a6290 <__aeabi_fmul>
    }
    return -1.0f;
}
 80a5140:	bd08      	pop	{r3, pc}
    return -1.0f;
 80a5142:	4803      	ldr	r0, [pc, #12]	; (80a5150 <_ZNK10WiFiSignal10getQualityEv+0x2c>)
 80a5144:	e7fc      	b.n	80a5140 <_ZNK10WiFiSignal10getQualityEv+0x1c>
 80a5146:	bf00      	nop
 80a5148:	477fff00 	.word	0x477fff00
 80a514c:	42c80000 	.word	0x42c80000
 80a5150:	bf800000 	.word	0xbf800000

080a5154 <_ZNK10WiFiSignal15getQualityValueEv>:

float WiFiSignal::getQualityValue() const {
 80a5154:	b508      	push	{r3, lr}
    if (inf_.size != 0 && inf_.snr != std::numeric_limits<int32_t>::min()) {
 80a5156:	8983      	ldrh	r3, [r0, #12]
 80a5158:	b14b      	cbz	r3, 80a516e <_ZNK10WiFiSignal15getQualityValueEv+0x1a>
 80a515a:	6980      	ldr	r0, [r0, #24]
 80a515c:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 80a5160:	d005      	beq.n	80a516e <_ZNK10WiFiSignal15getQualityValueEv+0x1a>
        return inf_.snr / 100.0f;
 80a5162:	f001 f841 	bl	80a61e8 <__aeabi_i2f>
 80a5166:	4903      	ldr	r1, [pc, #12]	; (80a5174 <_ZNK10WiFiSignal15getQualityValueEv+0x20>)
 80a5168:	f001 f946 	bl	80a63f8 <__aeabi_fdiv>
    }
    return 0.0f;
}
 80a516c:	bd08      	pop	{r3, pc}
    return 0.0f;
 80a516e:	2000      	movs	r0, #0
 80a5170:	e7fc      	b.n	80a516c <_ZNK10WiFiSignal15getQualityValueEv+0x18>
 80a5172:	bf00      	nop
 80a5174:	42c80000 	.word	0x42c80000

080a5178 <_ZNK10WiFiSignalcvaEv>:
}
 80a5178:	f990 0004 	ldrsb.w	r0, [r0, #4]
 80a517c:	4770      	bx	lr

080a517e <_ZN10WiFiSignal17fromConnectedInfoERK21wlan_connected_info_t>:
bool WiFiSignal::fromConnectedInfo(const wlan_connected_info_t& inf) {
 80a517e:	b570      	push	{r4, r5, r6, lr}
    inf_ = inf;
 80a5180:	460c      	mov	r4, r1
bool WiFiSignal::fromConnectedInfo(const wlan_connected_info_t& inf) {
 80a5182:	4606      	mov	r6, r0
    inf_ = inf;
 80a5184:	f100 050c 	add.w	r5, r0, #12
 80a5188:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a518a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a518c:	e894 0003 	ldmia.w	r4, {r0, r1}
 80a5190:	e885 0003 	stmia.w	r5, {r0, r1}
    this->rssi = inf_.rssi != std::numeric_limits<int32_t>::min() ? inf_.rssi / 100 : 2;
 80a5194:	6933      	ldr	r3, [r6, #16]
}
 80a5196:	2001      	movs	r0, #1
    this->rssi = inf_.rssi != std::numeric_limits<int32_t>::min() ? inf_.rssi / 100 : 2;
 80a5198:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a519c:	bf16      	itet	ne
 80a519e:	2264      	movne	r2, #100	; 0x64
 80a51a0:	2302      	moveq	r3, #2
 80a51a2:	fb93 f3f2 	sdivne	r3, r3, r2
 80a51a6:	6073      	str	r3, [r6, #4]
    this->qual = inf_.snr != std::numeric_limits<int32_t>::min() ? inf_.snr / 100 : 0;
 80a51a8:	69b3      	ldr	r3, [r6, #24]
 80a51aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a51ae:	bf16      	itet	ne
 80a51b0:	2264      	movne	r2, #100	; 0x64
 80a51b2:	2300      	moveq	r3, #0
 80a51b4:	fb93 f3f2 	sdivne	r3, r3, r2
 80a51b8:	60b3      	str	r3, [r6, #8]
}
 80a51ba:	bd70      	pop	{r4, r5, r6, pc}

080a51bc <_ZN5spark9WiFiClass4RSSIEv>:
    int WiFiClass::getCredentials(WiFiAccessPoint* results, size_t result_count) {
        APList apList(results, result_count);
        return apList.start();
    }

    WiFiSignal WiFiClass::RSSI() {
 80a51bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    WiFiSignal() {}
 80a51c0:	2500      	movs	r5, #0
 80a51c2:	f04f 0802 	mov.w	r8, #2
 80a51c6:	2618      	movs	r6, #24
 80a51c8:	460f      	mov	r7, r1
 80a51ca:	4b14      	ldr	r3, [pc, #80]	; (80a521c <_ZN5spark9WiFiClass4RSSIEv+0x60>)
 80a51cc:	4632      	mov	r2, r6
 80a51ce:	4629      	mov	r1, r5
 80a51d0:	e9c0 8501 	strd	r8, r5, [r0, #4]
 80a51d4:	b086      	sub	sp, #24
 80a51d6:	6003      	str	r3, [r0, #0]
 80a51d8:	4604      	mov	r4, r0
 80a51da:	300c      	adds	r0, #12
 80a51dc:	f001 fd28 	bl	80a6c30 <memset>
        WiFiSignal sig;
        if (!network_ready(*this, 0, NULL)) {
 80a51e0:	462a      	mov	r2, r5
 80a51e2:	4629      	mov	r1, r5
 80a51e4:	6878      	ldr	r0, [r7, #4]
 80a51e6:	f7fe fb7d 	bl	80a38e4 <network_ready>
 80a51ea:	b180      	cbz	r0, 80a520e <_ZN5spark9WiFiClass4RSSIEv+0x52>
            return sig;
        }

        wlan_connected_info_t info = {0};
 80a51ec:	4632      	mov	r2, r6
 80a51ee:	4629      	mov	r1, r5
 80a51f0:	4668      	mov	r0, sp
 80a51f2:	f001 fd1d 	bl	80a6c30 <memset>
        info.size = sizeof(info);
        int r = wlan_connected_info(nullptr, &info, nullptr);
 80a51f6:	462a      	mov	r2, r5
 80a51f8:	4669      	mov	r1, sp
 80a51fa:	4628      	mov	r0, r5
        info.size = sizeof(info);
 80a51fc:	f8ad 6000 	strh.w	r6, [sp]
        int r = wlan_connected_info(nullptr, &info, nullptr);
 80a5200:	f7fe fb0a 	bl	80a3818 <wlan_connected_info>
        if (r == 0) {
 80a5204:	b938      	cbnz	r0, 80a5216 <_ZN5spark9WiFiClass4RSSIEv+0x5a>
            sig.fromConnectedInfo(info);
 80a5206:	4669      	mov	r1, sp
 80a5208:	4620      	mov	r0, r4
 80a520a:	f7ff ffb8 	bl	80a517e <_ZN10WiFiSignal17fromConnectedInfoERK21wlan_connected_info_t>
            return sig;
        }

        sig.rssi = 2;
        return sig;
    }
 80a520e:	4620      	mov	r0, r4
 80a5210:	b006      	add	sp, #24
 80a5212:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        sig.rssi = 2;
 80a5216:	f8c4 8004 	str.w	r8, [r4, #4]
        return sig;
 80a521a:	e7f8      	b.n	80a520e <_ZN5spark9WiFiClass4RSSIEv+0x52>
 80a521c:	080a8914 	.word	0x080a8914

080a5220 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a5220:	2204      	movs	r2, #4
 80a5222:	4b02      	ldr	r3, [pc, #8]	; (80a522c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a5224:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a5226:	4a02      	ldr	r2, [pc, #8]	; (80a5230 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a5228:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 80a522a:	4770      	bx	lr
 80a522c:	200005f0 	.word	0x200005f0
 80a5230:	080a88e0 	.word	0x080a88e0

080a5234 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a5234:	2300      	movs	r3, #0
 80a5236:	6840      	ldr	r0, [r0, #4]
 80a5238:	461a      	mov	r2, r3
 80a523a:	f7fe bb3b 	b.w	80a38b4 <network_connect>

080a523e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a523e:	2200      	movs	r2, #0
 80a5240:	2102      	movs	r1, #2
 80a5242:	6840      	ldr	r0, [r0, #4]
 80a5244:	f7fe bb46 	b.w	80a38d4 <network_disconnect>

080a5248 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a5248:	2200      	movs	r2, #0
 80a524a:	6840      	ldr	r0, [r0, #4]
 80a524c:	4611      	mov	r1, r2
 80a524e:	f7fe bb39 	b.w	80a38c4 <network_connecting>

080a5252 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a5252:	2200      	movs	r2, #0
 80a5254:	6840      	ldr	r0, [r0, #4]
 80a5256:	4611      	mov	r1, r2
 80a5258:	f7fe bb44 	b.w	80a38e4 <network_ready>

080a525c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a525c:	2300      	movs	r3, #0
 80a525e:	6840      	ldr	r0, [r0, #4]
 80a5260:	461a      	mov	r2, r3
 80a5262:	4619      	mov	r1, r3
 80a5264:	f7fe bb46 	b.w	80a38f4 <network_on>

080a5268 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a5268:	2300      	movs	r3, #0
 80a526a:	6840      	ldr	r0, [r0, #4]
 80a526c:	461a      	mov	r2, r3
 80a526e:	4619      	mov	r1, r3
 80a5270:	f7fe bb48 	b.w	80a3904 <network_off>

080a5274 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a5274:	2200      	movs	r2, #0
 80a5276:	6840      	ldr	r0, [r0, #4]
 80a5278:	f081 0101 	eor.w	r1, r1, #1
 80a527c:	f7fe bb4a 	b.w	80a3914 <network_listen>

080a5280 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a5280:	2200      	movs	r2, #0
 80a5282:	6840      	ldr	r0, [r0, #4]
 80a5284:	f7fe bb56 	b.w	80a3934 <network_set_listen_timeout>

080a5288 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a5288:	2200      	movs	r2, #0
 80a528a:	6840      	ldr	r0, [r0, #4]
 80a528c:	4611      	mov	r1, r2
 80a528e:	f7fe bb59 	b.w	80a3944 <network_get_listen_timeout>

080a5292 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a5292:	2200      	movs	r2, #0
 80a5294:	6840      	ldr	r0, [r0, #4]
 80a5296:	4611      	mov	r1, r2
 80a5298:	f7fe bb44 	b.w	80a3924 <network_listening>

080a529c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a529c:	b570      	push	{r4, r5, r6, lr}
 80a529e:	4615      	mov	r5, r2
 80a52a0:	b08e      	sub	sp, #56	; 0x38
 80a52a2:	4604      	mov	r4, r0
    IPAddress addr;
 80a52a4:	a808      	add	r0, sp, #32
 80a52a6:	f7ff fcd5 	bl	80a4c54 <_ZN9IPAddressC1Ev>
        HAL_IPAddress ip = {};
 80a52aa:	2211      	movs	r2, #17
 80a52ac:	2100      	movs	r1, #0
 80a52ae:	a803      	add	r0, sp, #12
 80a52b0:	f001 fcbe 	bl	80a6c30 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a52b4:	2600      	movs	r6, #0
 80a52b6:	4628      	mov	r0, r5
 80a52b8:	f002 fa5a 	bl	80a7770 <strlen>
 80a52bc:	4b0a      	ldr	r3, [pc, #40]	; (80a52e8 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a52be:	9600      	str	r6, [sp, #0]
 80a52c0:	b281      	uxth	r1, r0
 80a52c2:	685b      	ldr	r3, [r3, #4]
 80a52c4:	4628      	mov	r0, r5
 80a52c6:	aa03      	add	r2, sp, #12
 80a52c8:	f7fe fa96 	bl	80a37f8 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a52cc:	b130      	cbz	r0, 80a52dc <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 80a52ce:	4631      	mov	r1, r6
 80a52d0:	4620      	mov	r0, r4
 80a52d2:	f7ff fcdf 	bl	80a4c94 <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a52d6:	4620      	mov	r0, r4
 80a52d8:	b00e      	add	sp, #56	; 0x38
 80a52da:	bd70      	pop	{r4, r5, r6, pc}
 80a52dc:	4620      	mov	r0, r4
 80a52de:	a903      	add	r1, sp, #12
 80a52e0:	f7ff fcc6 	bl	80a4c70 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    virtual ~IPAddress() {}
 80a52e4:	e7f7      	b.n	80a52d6 <_ZN5spark12NetworkClass7resolveEPKc+0x3a>
 80a52e6:	bf00      	nop
 80a52e8:	200005f0 	.word	0x200005f0

080a52ec <_ZN5spark12NetworkClass4fromEm>:
}
 80a52ec:	4a03      	ldr	r2, [pc, #12]	; (80a52fc <_ZN5spark12NetworkClass4fromEm+0x10>)
 80a52ee:	4b04      	ldr	r3, [pc, #16]	; (80a5300 <_ZN5spark12NetworkClass4fromEm+0x14>)
 80a52f0:	2804      	cmp	r0, #4
 80a52f2:	bf14      	ite	ne
 80a52f4:	4610      	movne	r0, r2
 80a52f6:	4618      	moveq	r0, r3
 80a52f8:	4770      	bx	lr
 80a52fa:	bf00      	nop
 80a52fc:	200005f8 	.word	0x200005f8
 80a5300:	200005f0 	.word	0x200005f0

080a5304 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80a5304:	4b02      	ldr	r3, [pc, #8]	; (80a5310 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a5306:	4a03      	ldr	r2, [pc, #12]	; (80a5314 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a5308:	601a      	str	r2, [r3, #0]
 80a530a:	2200      	movs	r2, #0
 80a530c:	605a      	str	r2, [r3, #4]

} // spark
 80a530e:	4770      	bx	lr
 80a5310:	200005f8 	.word	0x200005f8
 80a5314:	080a8938 	.word	0x080a8938

080a5318 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 80a5318:	2817      	cmp	r0, #23
bool pinAvailable(uint16_t pin) {
 80a531a:	b570      	push	{r4, r5, r6, lr}
 80a531c:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 80a531e:	d901      	bls.n	80a5324 <pinAvailable+0xc>
    return false;
 80a5320:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 80a5322:	bd70      	pop	{r4, r5, r6, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a5324:	f1a0 030d 	sub.w	r3, r0, #13
 80a5328:	2b02      	cmp	r3, #2
 80a532a:	d90b      	bls.n	80a5344 <pinAvailable+0x2c>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 80a532c:	2801      	cmp	r0, #1
 80a532e:	d826      	bhi.n	80a537e <pinAvailable+0x66>
 80a5330:	f000 f8a6 	bl	80a5480 <_Z19__fetch_global_Wirev>
 80a5334:	2100      	movs	r1, #0
 80a5336:	7c00      	ldrb	r0, [r0, #16]
 80a5338:	f7fe f9ac 	bl	80a3694 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a533c:	f080 0001 	eor.w	r0, r0, #1
 80a5340:	b2c0      	uxtb	r0, r0
 80a5342:	e7ee      	b.n	80a5322 <pinAvailable+0xa>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a5344:	4e13      	ldr	r6, [pc, #76]	; (80a5394 <pinAvailable+0x7c>)
 80a5346:	7831      	ldrb	r1, [r6, #0]
 80a5348:	f3bf 8f5b 	dmb	ish
 80a534c:	f011 0501 	ands.w	r5, r1, #1
 80a5350:	d10f      	bne.n	80a5372 <pinAvailable+0x5a>
 80a5352:	4630      	mov	r0, r6
 80a5354:	f7fa fea9 	bl	80a00aa <__cxa_guard_acquire>
 80a5358:	b158      	cbz	r0, 80a5372 <pinAvailable+0x5a>
 80a535a:	4629      	mov	r1, r5
 80a535c:	480e      	ldr	r0, [pc, #56]	; (80a5398 <pinAvailable+0x80>)
 80a535e:	f7fe fb8c 	bl	80a3a7a <_ZN8SPIClassC1E19hal_spi_interface_t>
 80a5362:	4630      	mov	r0, r6
 80a5364:	f7fa fea6 	bl	80a00b4 <__cxa_guard_release>
 80a5368:	4a0c      	ldr	r2, [pc, #48]	; (80a539c <pinAvailable+0x84>)
 80a536a:	490d      	ldr	r1, [pc, #52]	; (80a53a0 <pinAvailable+0x88>)
 80a536c:	480a      	ldr	r0, [pc, #40]	; (80a5398 <pinAvailable+0x80>)
 80a536e:	f000 f8af 	bl	80a54d0 <__aeabi_atexit>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a5372:	4b09      	ldr	r3, [pc, #36]	; (80a5398 <pinAvailable+0x80>)
 80a5374:	7818      	ldrb	r0, [r3, #0]
 80a5376:	f7fe f9f7 	bl	80a3768 <hal_spi_is_enabled>
 80a537a:	2800      	cmp	r0, #0
 80a537c:	d1d0      	bne.n	80a5320 <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a537e:	3c12      	subs	r4, #18
 80a5380:	2c01      	cmp	r4, #1
 80a5382:	d805      	bhi.n	80a5390 <pinAvailable+0x78>
 80a5384:	f7ff fdca 	bl	80a4f1c <_Z22__fetch_global_Serial1v>
 80a5388:	7c00      	ldrb	r0, [r0, #16]
 80a538a:	f7fe f943 	bl	80a3614 <hal_usart_is_enabled>
 80a538e:	e7d5      	b.n	80a533c <pinAvailable+0x24>
  return true; // 'pin' is available
 80a5390:	2001      	movs	r0, #1
 80a5392:	e7c6      	b.n	80a5322 <pinAvailable+0xa>
 80a5394:	20000244 	.word	0x20000244
 80a5398:	20000248 	.word	0x20000248
 80a539c:	20000240 	.word	0x20000240
 80a53a0:	080a02a9 	.word	0x080a02a9

080a53a4 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a53a4:	2817      	cmp	r0, #23
{
 80a53a6:	b538      	push	{r3, r4, r5, lr}
 80a53a8:	4604      	mov	r4, r0
 80a53aa:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a53ac:	d80a      	bhi.n	80a53c4 <pinMode+0x20>
 80a53ae:	29ff      	cmp	r1, #255	; 0xff
 80a53b0:	d008      	beq.n	80a53c4 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 80a53b2:	f7ff ffb1 	bl	80a5318 <pinAvailable>
 80a53b6:	b128      	cbz	r0, 80a53c4 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
 80a53b8:	4629      	mov	r1, r5
 80a53ba:	4620      	mov	r0, r4
}
 80a53bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
 80a53c0:	f7fe b898 	b.w	80a34f4 <HAL_Pin_Mode>
}
 80a53c4:	bd38      	pop	{r3, r4, r5, pc}

080a53c6 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a53c6:	b538      	push	{r3, r4, r5, lr}
 80a53c8:	4604      	mov	r4, r0
 80a53ca:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a53cc:	f7fe f89a 	bl	80a3504 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a53d0:	28ff      	cmp	r0, #255	; 0xff
 80a53d2:	d010      	beq.n	80a53f6 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 80a53d4:	2806      	cmp	r0, #6
 80a53d6:	d804      	bhi.n	80a53e2 <digitalWrite+0x1c>
 80a53d8:	234d      	movs	r3, #77	; 0x4d
 80a53da:	fa23 f000 	lsr.w	r0, r3, r0
 80a53de:	07c3      	lsls	r3, r0, #31
 80a53e0:	d409      	bmi.n	80a53f6 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a53e2:	4620      	mov	r0, r4
 80a53e4:	f7ff ff98 	bl	80a5318 <pinAvailable>
 80a53e8:	b128      	cbz	r0, 80a53f6 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a53ea:	4629      	mov	r1, r5
 80a53ec:	4620      	mov	r0, r4
}
 80a53ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
 80a53f2:	f7fe b88f 	b.w	80a3514 <HAL_GPIO_Write>
}
 80a53f6:	bd38      	pop	{r3, r4, r5, pc}

080a53f8 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 80a53f8:	b510      	push	{r4, lr}
 80a53fa:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a53fc:	f7fe f882 	bl	80a3504 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
 80a5400:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
 80a5402:	b2db      	uxtb	r3, r3
 80a5404:	2b01      	cmp	r3, #1
 80a5406:	d908      	bls.n	80a541a <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 80a5408:	4620      	mov	r0, r4
 80a540a:	f7ff ff85 	bl	80a5318 <pinAvailable>
 80a540e:	b120      	cbz	r0, 80a541a <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a5410:	4620      	mov	r0, r4
}
 80a5412:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
 80a5416:	f7fe b885 	b.w	80a3524 <HAL_GPIO_Read>
}
 80a541a:	2000      	movs	r0, #0
 80a541c:	bd10      	pop	{r4, pc}
	...

080a5420 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a5420:	2300      	movs	r3, #0
 80a5422:	b513      	push	{r0, r1, r4, lr}
 80a5424:	4c07      	ldr	r4, [pc, #28]	; (80a5444 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a5426:	461a      	mov	r2, r3
 80a5428:	4619      	mov	r1, r3
 80a542a:	4620      	mov	r0, r4
 80a542c:	9300      	str	r3, [sp, #0]
 80a542e:	f7ff fc47 	bl	80a4cc0 <_ZN9IPAddressC1Ehhhh>
 80a5432:	4620      	mov	r0, r4
 80a5434:	4a04      	ldr	r2, [pc, #16]	; (80a5448 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a5436:	4905      	ldr	r1, [pc, #20]	; (80a544c <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a5438:	b002      	add	sp, #8
 80a543a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a543e:	f000 b847 	b.w	80a54d0 <__aeabi_atexit>
 80a5442:	bf00      	nop
 80a5444:	20000604 	.word	0x20000604
 80a5448:	20000240 	.word	0x20000240
 80a544c:	080a4c13 	.word	0x080a4c13

080a5450 <_Z17acquireWireBufferv>:
#ifndef SPARK_WIRING_NO_I2C

namespace {

hal_i2c_config_t defaultWireConfig() {
	hal_i2c_config_t config = {
 80a5450:	2300      	movs	r3, #0
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
 80a5452:	b570      	push	{r4, r5, r6, lr}
	hal_i2c_config_t config = {
 80a5454:	2520      	movs	r5, #32
 80a5456:	8043      	strh	r3, [r0, #2]
 80a5458:	2314      	movs	r3, #20
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a545a:	4e08      	ldr	r6, [pc, #32]	; (80a547c <_Z17acquireWireBufferv+0x2c>)
{
 80a545c:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 80a545e:	8003      	strh	r3, [r0, #0]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a5460:	4631      	mov	r1, r6
	hal_i2c_config_t config = {
 80a5462:	6085      	str	r5, [r0, #8]
 80a5464:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a5466:	4628      	mov	r0, r5
 80a5468:	f000 f839 	bl	80a54de <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a546c:	4631      	mov	r1, r6
	};
 80a546e:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a5470:	4628      	mov	r0, r5
 80a5472:	f000 f834 	bl	80a54de <_ZnajRKSt9nothrow_t>
	};
 80a5476:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
 80a5478:	4620      	mov	r0, r4
 80a547a:	bd70      	pop	{r4, r5, r6, pc}
 80a547c:	080a8964 	.word	0x080a8964

080a5480 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 80a5480:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a5482:	4d0f      	ldr	r5, [pc, #60]	; (80a54c0 <_Z19__fetch_global_Wirev+0x40>)
{
 80a5484:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a5486:	7829      	ldrb	r1, [r5, #0]
 80a5488:	f3bf 8f5b 	dmb	ish
 80a548c:	f011 0401 	ands.w	r4, r1, #1
 80a5490:	d113      	bne.n	80a54ba <_Z19__fetch_global_Wirev+0x3a>
 80a5492:	4628      	mov	r0, r5
 80a5494:	f7fa fe09 	bl	80a00aa <__cxa_guard_acquire>
 80a5498:	b178      	cbz	r0, 80a54ba <_Z19__fetch_global_Wirev+0x3a>
 80a549a:	a801      	add	r0, sp, #4
 80a549c:	f7ff ffd8 	bl	80a5450 <_Z17acquireWireBufferv>
 80a54a0:	4621      	mov	r1, r4
 80a54a2:	aa01      	add	r2, sp, #4
 80a54a4:	4807      	ldr	r0, [pc, #28]	; (80a54c4 <_Z19__fetch_global_Wirev+0x44>)
 80a54a6:	f7ff fda7 	bl	80a4ff8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 80a54aa:	4628      	mov	r0, r5
 80a54ac:	f7fa fe02 	bl	80a00b4 <__cxa_guard_release>
 80a54b0:	4a05      	ldr	r2, [pc, #20]	; (80a54c8 <_Z19__fetch_global_Wirev+0x48>)
 80a54b2:	4906      	ldr	r1, [pc, #24]	; (80a54cc <_Z19__fetch_global_Wirev+0x4c>)
 80a54b4:	4803      	ldr	r0, [pc, #12]	; (80a54c4 <_Z19__fetch_global_Wirev+0x44>)
 80a54b6:	f000 f80b 	bl	80a54d0 <__aeabi_atexit>
	return wire;
}
 80a54ba:	4802      	ldr	r0, [pc, #8]	; (80a54c4 <_Z19__fetch_global_Wirev+0x44>)
 80a54bc:	b007      	add	sp, #28
 80a54be:	bd30      	pop	{r4, r5, pc}
 80a54c0:	2000061c 	.word	0x2000061c
 80a54c4:	20000620 	.word	0x20000620
 80a54c8:	20000240 	.word	0x20000240
 80a54cc:	080a4fa1 	.word	0x080a4fa1

080a54d0 <__aeabi_atexit>:
 80a54d0:	460b      	mov	r3, r1
 80a54d2:	4601      	mov	r1, r0
 80a54d4:	4618      	mov	r0, r3
 80a54d6:	f001 ba99 	b.w	80a6a0c <__cxa_atexit>

080a54da <_ZdlPvj>:
 80a54da:	f7fa bde2 	b.w	80a00a2 <_ZdlPv>

080a54de <_ZnajRKSt9nothrow_t>:
 80a54de:	f7fa bdde 	b.w	80a009e <_Znaj>
	...

080a54e4 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
 80a54e4:	4901      	ldr	r1, [pc, #4]	; (80a54ec <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
 80a54e6:	f000 b8fb 	b.w	80a56e0 <_ZNKSt9type_infoeqERKS_>
 80a54ea:	bf00      	nop
 80a54ec:	080a8980 	.word	0x080a8980

080a54f0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 80a54f0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80a54f2:	2400      	movs	r4, #0
 80a54f4:	2310      	movs	r3, #16
 80a54f6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80a54fa:	6803      	ldr	r3, [r0, #0]
 80a54fc:	4615      	mov	r5, r2
 80a54fe:	699e      	ldr	r6, [r3, #24]
 80a5500:	6812      	ldr	r2, [r2, #0]
 80a5502:	466b      	mov	r3, sp
 80a5504:	9400      	str	r4, [sp, #0]
 80a5506:	f88d 4004 	strb.w	r4, [sp, #4]
 80a550a:	47b0      	blx	r6
 80a550c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80a5510:	f003 0306 	and.w	r3, r3, #6
 80a5514:	2b06      	cmp	r3, #6
 80a5516:	bf09      	itett	eq
 80a5518:	2001      	moveq	r0, #1
 80a551a:	4620      	movne	r0, r4
 80a551c:	9b00      	ldreq	r3, [sp, #0]
 80a551e:	602b      	streq	r3, [r5, #0]
 80a5520:	b004      	add	sp, #16
 80a5522:	bd70      	pop	{r4, r5, r6, pc}

080a5524 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 80a5524:	9800      	ldr	r0, [sp, #0]
 80a5526:	4290      	cmp	r0, r2
 80a5528:	bf14      	ite	ne
 80a552a:	2001      	movne	r0, #1
 80a552c:	2006      	moveq	r0, #6
 80a552e:	4770      	bx	lr

080a5530 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 80a5530:	b510      	push	{r4, lr}
 80a5532:	4604      	mov	r4, r0
 80a5534:	4b02      	ldr	r3, [pc, #8]	; (80a5540 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 80a5536:	6003      	str	r3, [r0, #0]
 80a5538:	f000 f8cf 	bl	80a56da <_ZNSt9type_infoD1Ev>
 80a553c:	4620      	mov	r0, r4
 80a553e:	bd10      	pop	{r4, pc}
 80a5540:	080a89c0 	.word	0x080a89c0

080a5544 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 80a5544:	b510      	push	{r4, lr}
 80a5546:	4604      	mov	r4, r0
 80a5548:	f7ff fff2 	bl	80a5530 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 80a554c:	4620      	mov	r0, r4
 80a554e:	2108      	movs	r1, #8
 80a5550:	f7ff ffc3 	bl	80a54da <_ZdlPvj>
 80a5554:	4620      	mov	r0, r4
 80a5556:	bd10      	pop	{r4, pc}

080a5558 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 80a5558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a555c:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80a5560:	461f      	mov	r7, r3
 80a5562:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 80a5566:	4598      	cmp	r8, r3
 80a5568:	4606      	mov	r6, r0
 80a556a:	4615      	mov	r5, r2
 80a556c:	d107      	bne.n	80a557e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 80a556e:	9907      	ldr	r1, [sp, #28]
 80a5570:	f000 f8b6 	bl	80a56e0 <_ZNKSt9type_infoeqERKS_>
 80a5574:	b118      	cbz	r0, 80a557e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 80a5576:	7165      	strb	r5, [r4, #5]
 80a5578:	2000      	movs	r0, #0
 80a557a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a557e:	4639      	mov	r1, r7
 80a5580:	4630      	mov	r0, r6
 80a5582:	f000 f8ad 	bl	80a56e0 <_ZNKSt9type_infoeqERKS_>
 80a5586:	2800      	cmp	r0, #0
 80a5588:	d0f6      	beq.n	80a5578 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
 80a558a:	2301      	movs	r3, #1
 80a558c:	f8c4 8000 	str.w	r8, [r4]
 80a5590:	7125      	strb	r5, [r4, #4]
 80a5592:	71a3      	strb	r3, [r4, #6]
 80a5594:	e7f0      	b.n	80a5578 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

080a5596 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 80a5596:	b538      	push	{r3, r4, r5, lr}
 80a5598:	4615      	mov	r5, r2
 80a559a:	461c      	mov	r4, r3
 80a559c:	f000 f8a0 	bl	80a56e0 <_ZNKSt9type_infoeqERKS_>
 80a55a0:	b120      	cbz	r0, 80a55ac <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 80a55a2:	2308      	movs	r3, #8
 80a55a4:	60e3      	str	r3, [r4, #12]
 80a55a6:	2306      	movs	r3, #6
 80a55a8:	6025      	str	r5, [r4, #0]
 80a55aa:	7123      	strb	r3, [r4, #4]
 80a55ac:	bd38      	pop	{r3, r4, r5, pc}

080a55ae <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 80a55ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a55b2:	4605      	mov	r5, r0
 80a55b4:	460c      	mov	r4, r1
 80a55b6:	4616      	mov	r6, r2
 80a55b8:	461f      	mov	r7, r3
 80a55ba:	f000 f891 	bl	80a56e0 <_ZNKSt9type_infoeqERKS_>
 80a55be:	b948      	cbnz	r0, 80a55d4 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 80a55c0:	2f03      	cmp	r7, #3
 80a55c2:	d807      	bhi.n	80a55d4 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 80a55c4:	6823      	ldr	r3, [r4, #0]
 80a55c6:	4632      	mov	r2, r6
 80a55c8:	4629      	mov	r1, r5
 80a55ca:	4620      	mov	r0, r4
 80a55cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80a55d0:	695b      	ldr	r3, [r3, #20]
 80a55d2:	4718      	bx	r3
 80a55d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a55d8 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 80a55d8:	b510      	push	{r4, lr}
 80a55da:	4604      	mov	r4, r0
 80a55dc:	4b02      	ldr	r3, [pc, #8]	; (80a55e8 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 80a55de:	6003      	str	r3, [r0, #0]
 80a55e0:	f7ff ffa6 	bl	80a5530 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 80a55e4:	4620      	mov	r0, r4
 80a55e6:	bd10      	pop	{r4, pc}
 80a55e8:	080a8a20 	.word	0x080a8a20

080a55ec <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 80a55ec:	b510      	push	{r4, lr}
 80a55ee:	4604      	mov	r4, r0
 80a55f0:	f7ff fff2 	bl	80a55d8 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 80a55f4:	4620      	mov	r0, r4
 80a55f6:	210c      	movs	r1, #12
 80a55f8:	f7ff ff6f 	bl	80a54da <_ZdlPvj>
 80a55fc:	4620      	mov	r0, r4
 80a55fe:	bd10      	pop	{r4, pc}

080a5600 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 80a5600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a5604:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80a5608:	4606      	mov	r6, r0
 80a560a:	4590      	cmp	r8, r2
 80a560c:	460f      	mov	r7, r1
 80a560e:	4615      	mov	r5, r2
 80a5610:	461c      	mov	r4, r3
 80a5612:	d00b      	beq.n	80a562c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x2c>
 80a5614:	68b0      	ldr	r0, [r6, #8]
 80a5616:	462a      	mov	r2, r5
 80a5618:	6803      	ldr	r3, [r0, #0]
 80a561a:	f8cd 8018 	str.w	r8, [sp, #24]
 80a561e:	6a1e      	ldr	r6, [r3, #32]
 80a5620:	4639      	mov	r1, r7
 80a5622:	4623      	mov	r3, r4
 80a5624:	46b4      	mov	ip, r6
 80a5626:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80a562a:	4760      	bx	ip
 80a562c:	4619      	mov	r1, r3
 80a562e:	f000 f857 	bl	80a56e0 <_ZNKSt9type_infoeqERKS_>
 80a5632:	2800      	cmp	r0, #0
 80a5634:	d0ee      	beq.n	80a5614 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x14>
 80a5636:	2006      	movs	r0, #6
 80a5638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a563c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 80a563c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a5640:	460d      	mov	r5, r1
 80a5642:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
 80a5646:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
 80a564a:	4619      	mov	r1, r3
 80a564c:	4681      	mov	r9, r0
 80a564e:	4617      	mov	r7, r2
 80a5650:	4698      	mov	r8, r3
 80a5652:	f000 f845 	bl	80a56e0 <_ZNKSt9type_infoeqERKS_>
 80a5656:	b190      	cbz	r0, 80a567e <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 80a5658:	2d00      	cmp	r5, #0
 80a565a:	6034      	str	r4, [r6, #0]
 80a565c:	7137      	strb	r7, [r6, #4]
 80a565e:	db09      	blt.n	80a5674 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 80a5660:	442c      	add	r4, r5
 80a5662:	45a2      	cmp	sl, r4
 80a5664:	bf0c      	ite	eq
 80a5666:	2406      	moveq	r4, #6
 80a5668:	2401      	movne	r4, #1
 80a566a:	71b4      	strb	r4, [r6, #6]
 80a566c:	2000      	movs	r0, #0
 80a566e:	b001      	add	sp, #4
 80a5670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a5674:	3502      	adds	r5, #2
 80a5676:	d1f9      	bne.n	80a566c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 80a5678:	2301      	movs	r3, #1
 80a567a:	71b3      	strb	r3, [r6, #6]
 80a567c:	e7f6      	b.n	80a566c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 80a567e:	4554      	cmp	r4, sl
 80a5680:	d106      	bne.n	80a5690 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 80a5682:	4659      	mov	r1, fp
 80a5684:	4648      	mov	r0, r9
 80a5686:	f000 f82b 	bl	80a56e0 <_ZNKSt9type_infoeqERKS_>
 80a568a:	b108      	cbz	r0, 80a5690 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 80a568c:	7177      	strb	r7, [r6, #5]
 80a568e:	e7ed      	b.n	80a566c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 80a5690:	f8d9 0008 	ldr.w	r0, [r9, #8]
 80a5694:	463a      	mov	r2, r7
 80a5696:	6803      	ldr	r3, [r0, #0]
 80a5698:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
 80a569c:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
 80a56a0:	69dc      	ldr	r4, [r3, #28]
 80a56a2:	4629      	mov	r1, r5
 80a56a4:	4643      	mov	r3, r8
 80a56a6:	46a4      	mov	ip, r4
 80a56a8:	b001      	add	sp, #4
 80a56aa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a56ae:	4760      	bx	ip

080a56b0 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 80a56b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a56b4:	4607      	mov	r7, r0
 80a56b6:	460c      	mov	r4, r1
 80a56b8:	4615      	mov	r5, r2
 80a56ba:	461e      	mov	r6, r3
 80a56bc:	f7ff ff6b 	bl	80a5596 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 80a56c0:	b948      	cbnz	r0, 80a56d6 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 80a56c2:	68b8      	ldr	r0, [r7, #8]
 80a56c4:	462a      	mov	r2, r5
 80a56c6:	6803      	ldr	r3, [r0, #0]
 80a56c8:	4621      	mov	r1, r4
 80a56ca:	699f      	ldr	r7, [r3, #24]
 80a56cc:	4633      	mov	r3, r6
 80a56ce:	46bc      	mov	ip, r7
 80a56d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80a56d4:	4760      	bx	ip
 80a56d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a56da <_ZNSt9type_infoD1Ev>:
 80a56da:	4770      	bx	lr

080a56dc <_ZNKSt9type_info14__is_pointer_pEv>:
 80a56dc:	2000      	movs	r0, #0
 80a56de:	4770      	bx	lr

080a56e0 <_ZNKSt9type_infoeqERKS_>:
 80a56e0:	4281      	cmp	r1, r0
 80a56e2:	b508      	push	{r3, lr}
 80a56e4:	d00e      	beq.n	80a5704 <_ZNKSt9type_infoeqERKS_+0x24>
 80a56e6:	6840      	ldr	r0, [r0, #4]
 80a56e8:	7803      	ldrb	r3, [r0, #0]
 80a56ea:	2b2a      	cmp	r3, #42	; 0x2a
 80a56ec:	d00c      	beq.n	80a5708 <_ZNKSt9type_infoeqERKS_+0x28>
 80a56ee:	6849      	ldr	r1, [r1, #4]
 80a56f0:	780b      	ldrb	r3, [r1, #0]
 80a56f2:	2b2a      	cmp	r3, #42	; 0x2a
 80a56f4:	bf08      	it	eq
 80a56f6:	3101      	addeq	r1, #1
 80a56f8:	f001 fac6 	bl	80a6c88 <strcmp>
 80a56fc:	fab0 f080 	clz	r0, r0
 80a5700:	0940      	lsrs	r0, r0, #5
 80a5702:	bd08      	pop	{r3, pc}
 80a5704:	2001      	movs	r0, #1
 80a5706:	e7fc      	b.n	80a5702 <_ZNKSt9type_infoeqERKS_+0x22>
 80a5708:	2000      	movs	r0, #0
 80a570a:	e7fa      	b.n	80a5702 <_ZNKSt9type_infoeqERKS_+0x22>

080a570c <__aeabi_drsub>:
 80a570c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a5710:	e002      	b.n	80a5718 <__adddf3>
 80a5712:	bf00      	nop

080a5714 <__aeabi_dsub>:
 80a5714:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a5718 <__adddf3>:
 80a5718:	b530      	push	{r4, r5, lr}
 80a571a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a571e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a5722:	ea94 0f05 	teq	r4, r5
 80a5726:	bf08      	it	eq
 80a5728:	ea90 0f02 	teqeq	r0, r2
 80a572c:	bf1f      	itttt	ne
 80a572e:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a5732:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a5736:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a573a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a573e:	f000 80e2 	beq.w	80a5906 <__adddf3+0x1ee>
 80a5742:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a5746:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a574a:	bfb8      	it	lt
 80a574c:	426d      	neglt	r5, r5
 80a574e:	dd0c      	ble.n	80a576a <__adddf3+0x52>
 80a5750:	442c      	add	r4, r5
 80a5752:	ea80 0202 	eor.w	r2, r0, r2
 80a5756:	ea81 0303 	eor.w	r3, r1, r3
 80a575a:	ea82 0000 	eor.w	r0, r2, r0
 80a575e:	ea83 0101 	eor.w	r1, r3, r1
 80a5762:	ea80 0202 	eor.w	r2, r0, r2
 80a5766:	ea81 0303 	eor.w	r3, r1, r3
 80a576a:	2d36      	cmp	r5, #54	; 0x36
 80a576c:	bf88      	it	hi
 80a576e:	bd30      	pophi	{r4, r5, pc}
 80a5770:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a5774:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a5778:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a577c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a5780:	d002      	beq.n	80a5788 <__adddf3+0x70>
 80a5782:	4240      	negs	r0, r0
 80a5784:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a5788:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a578c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a5790:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a5794:	d002      	beq.n	80a579c <__adddf3+0x84>
 80a5796:	4252      	negs	r2, r2
 80a5798:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a579c:	ea94 0f05 	teq	r4, r5
 80a57a0:	f000 80a7 	beq.w	80a58f2 <__adddf3+0x1da>
 80a57a4:	f1a4 0401 	sub.w	r4, r4, #1
 80a57a8:	f1d5 0e20 	rsbs	lr, r5, #32
 80a57ac:	db0d      	blt.n	80a57ca <__adddf3+0xb2>
 80a57ae:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a57b2:	fa22 f205 	lsr.w	r2, r2, r5
 80a57b6:	1880      	adds	r0, r0, r2
 80a57b8:	f141 0100 	adc.w	r1, r1, #0
 80a57bc:	fa03 f20e 	lsl.w	r2, r3, lr
 80a57c0:	1880      	adds	r0, r0, r2
 80a57c2:	fa43 f305 	asr.w	r3, r3, r5
 80a57c6:	4159      	adcs	r1, r3
 80a57c8:	e00e      	b.n	80a57e8 <__adddf3+0xd0>
 80a57ca:	f1a5 0520 	sub.w	r5, r5, #32
 80a57ce:	f10e 0e20 	add.w	lr, lr, #32
 80a57d2:	2a01      	cmp	r2, #1
 80a57d4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a57d8:	bf28      	it	cs
 80a57da:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a57de:	fa43 f305 	asr.w	r3, r3, r5
 80a57e2:	18c0      	adds	r0, r0, r3
 80a57e4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a57e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a57ec:	d507      	bpl.n	80a57fe <__adddf3+0xe6>
 80a57ee:	f04f 0e00 	mov.w	lr, #0
 80a57f2:	f1dc 0c00 	rsbs	ip, ip, #0
 80a57f6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a57fa:	eb6e 0101 	sbc.w	r1, lr, r1
 80a57fe:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a5802:	d31b      	bcc.n	80a583c <__adddf3+0x124>
 80a5804:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a5808:	d30c      	bcc.n	80a5824 <__adddf3+0x10c>
 80a580a:	0849      	lsrs	r1, r1, #1
 80a580c:	ea5f 0030 	movs.w	r0, r0, rrx
 80a5810:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a5814:	f104 0401 	add.w	r4, r4, #1
 80a5818:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a581c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a5820:	f080 809a 	bcs.w	80a5958 <__adddf3+0x240>
 80a5824:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a5828:	bf08      	it	eq
 80a582a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a582e:	f150 0000 	adcs.w	r0, r0, #0
 80a5832:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a5836:	ea41 0105 	orr.w	r1, r1, r5
 80a583a:	bd30      	pop	{r4, r5, pc}
 80a583c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a5840:	4140      	adcs	r0, r0
 80a5842:	eb41 0101 	adc.w	r1, r1, r1
 80a5846:	3c01      	subs	r4, #1
 80a5848:	bf28      	it	cs
 80a584a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80a584e:	d2e9      	bcs.n	80a5824 <__adddf3+0x10c>
 80a5850:	f091 0f00 	teq	r1, #0
 80a5854:	bf04      	itt	eq
 80a5856:	4601      	moveq	r1, r0
 80a5858:	2000      	moveq	r0, #0
 80a585a:	fab1 f381 	clz	r3, r1
 80a585e:	bf08      	it	eq
 80a5860:	3320      	addeq	r3, #32
 80a5862:	f1a3 030b 	sub.w	r3, r3, #11
 80a5866:	f1b3 0220 	subs.w	r2, r3, #32
 80a586a:	da0c      	bge.n	80a5886 <__adddf3+0x16e>
 80a586c:	320c      	adds	r2, #12
 80a586e:	dd08      	ble.n	80a5882 <__adddf3+0x16a>
 80a5870:	f102 0c14 	add.w	ip, r2, #20
 80a5874:	f1c2 020c 	rsb	r2, r2, #12
 80a5878:	fa01 f00c 	lsl.w	r0, r1, ip
 80a587c:	fa21 f102 	lsr.w	r1, r1, r2
 80a5880:	e00c      	b.n	80a589c <__adddf3+0x184>
 80a5882:	f102 0214 	add.w	r2, r2, #20
 80a5886:	bfd8      	it	le
 80a5888:	f1c2 0c20 	rsble	ip, r2, #32
 80a588c:	fa01 f102 	lsl.w	r1, r1, r2
 80a5890:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a5894:	bfdc      	itt	le
 80a5896:	ea41 010c 	orrle.w	r1, r1, ip
 80a589a:	4090      	lslle	r0, r2
 80a589c:	1ae4      	subs	r4, r4, r3
 80a589e:	bfa2      	ittt	ge
 80a58a0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a58a4:	4329      	orrge	r1, r5
 80a58a6:	bd30      	popge	{r4, r5, pc}
 80a58a8:	ea6f 0404 	mvn.w	r4, r4
 80a58ac:	3c1f      	subs	r4, #31
 80a58ae:	da1c      	bge.n	80a58ea <__adddf3+0x1d2>
 80a58b0:	340c      	adds	r4, #12
 80a58b2:	dc0e      	bgt.n	80a58d2 <__adddf3+0x1ba>
 80a58b4:	f104 0414 	add.w	r4, r4, #20
 80a58b8:	f1c4 0220 	rsb	r2, r4, #32
 80a58bc:	fa20 f004 	lsr.w	r0, r0, r4
 80a58c0:	fa01 f302 	lsl.w	r3, r1, r2
 80a58c4:	ea40 0003 	orr.w	r0, r0, r3
 80a58c8:	fa21 f304 	lsr.w	r3, r1, r4
 80a58cc:	ea45 0103 	orr.w	r1, r5, r3
 80a58d0:	bd30      	pop	{r4, r5, pc}
 80a58d2:	f1c4 040c 	rsb	r4, r4, #12
 80a58d6:	f1c4 0220 	rsb	r2, r4, #32
 80a58da:	fa20 f002 	lsr.w	r0, r0, r2
 80a58de:	fa01 f304 	lsl.w	r3, r1, r4
 80a58e2:	ea40 0003 	orr.w	r0, r0, r3
 80a58e6:	4629      	mov	r1, r5
 80a58e8:	bd30      	pop	{r4, r5, pc}
 80a58ea:	fa21 f004 	lsr.w	r0, r1, r4
 80a58ee:	4629      	mov	r1, r5
 80a58f0:	bd30      	pop	{r4, r5, pc}
 80a58f2:	f094 0f00 	teq	r4, #0
 80a58f6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a58fa:	bf06      	itte	eq
 80a58fc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a5900:	3401      	addeq	r4, #1
 80a5902:	3d01      	subne	r5, #1
 80a5904:	e74e      	b.n	80a57a4 <__adddf3+0x8c>
 80a5906:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a590a:	bf18      	it	ne
 80a590c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a5910:	d029      	beq.n	80a5966 <__adddf3+0x24e>
 80a5912:	ea94 0f05 	teq	r4, r5
 80a5916:	bf08      	it	eq
 80a5918:	ea90 0f02 	teqeq	r0, r2
 80a591c:	d005      	beq.n	80a592a <__adddf3+0x212>
 80a591e:	ea54 0c00 	orrs.w	ip, r4, r0
 80a5922:	bf04      	itt	eq
 80a5924:	4619      	moveq	r1, r3
 80a5926:	4610      	moveq	r0, r2
 80a5928:	bd30      	pop	{r4, r5, pc}
 80a592a:	ea91 0f03 	teq	r1, r3
 80a592e:	bf1e      	ittt	ne
 80a5930:	2100      	movne	r1, #0
 80a5932:	2000      	movne	r0, #0
 80a5934:	bd30      	popne	{r4, r5, pc}
 80a5936:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a593a:	d105      	bne.n	80a5948 <__adddf3+0x230>
 80a593c:	0040      	lsls	r0, r0, #1
 80a593e:	4149      	adcs	r1, r1
 80a5940:	bf28      	it	cs
 80a5942:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a5946:	bd30      	pop	{r4, r5, pc}
 80a5948:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a594c:	bf3c      	itt	cc
 80a594e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a5952:	bd30      	popcc	{r4, r5, pc}
 80a5954:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a5958:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a595c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a5960:	f04f 0000 	mov.w	r0, #0
 80a5964:	bd30      	pop	{r4, r5, pc}
 80a5966:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a596a:	bf1a      	itte	ne
 80a596c:	4619      	movne	r1, r3
 80a596e:	4610      	movne	r0, r2
 80a5970:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a5974:	bf1c      	itt	ne
 80a5976:	460b      	movne	r3, r1
 80a5978:	4602      	movne	r2, r0
 80a597a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a597e:	bf06      	itte	eq
 80a5980:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a5984:	ea91 0f03 	teqeq	r1, r3
 80a5988:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a598c:	bd30      	pop	{r4, r5, pc}
 80a598e:	bf00      	nop

080a5990 <__aeabi_ui2d>:
 80a5990:	f090 0f00 	teq	r0, #0
 80a5994:	bf04      	itt	eq
 80a5996:	2100      	moveq	r1, #0
 80a5998:	4770      	bxeq	lr
 80a599a:	b530      	push	{r4, r5, lr}
 80a599c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a59a0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a59a4:	f04f 0500 	mov.w	r5, #0
 80a59a8:	f04f 0100 	mov.w	r1, #0
 80a59ac:	e750      	b.n	80a5850 <__adddf3+0x138>
 80a59ae:	bf00      	nop

080a59b0 <__aeabi_i2d>:
 80a59b0:	f090 0f00 	teq	r0, #0
 80a59b4:	bf04      	itt	eq
 80a59b6:	2100      	moveq	r1, #0
 80a59b8:	4770      	bxeq	lr
 80a59ba:	b530      	push	{r4, r5, lr}
 80a59bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a59c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a59c4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a59c8:	bf48      	it	mi
 80a59ca:	4240      	negmi	r0, r0
 80a59cc:	f04f 0100 	mov.w	r1, #0
 80a59d0:	e73e      	b.n	80a5850 <__adddf3+0x138>
 80a59d2:	bf00      	nop

080a59d4 <__aeabi_f2d>:
 80a59d4:	0042      	lsls	r2, r0, #1
 80a59d6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a59da:	ea4f 0131 	mov.w	r1, r1, rrx
 80a59de:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a59e2:	bf1f      	itttt	ne
 80a59e4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a59e8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a59ec:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a59f0:	4770      	bxne	lr
 80a59f2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80a59f6:	bf08      	it	eq
 80a59f8:	4770      	bxeq	lr
 80a59fa:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80a59fe:	bf04      	itt	eq
 80a5a00:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80a5a04:	4770      	bxeq	lr
 80a5a06:	b530      	push	{r4, r5, lr}
 80a5a08:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a5a0c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a5a10:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a5a14:	e71c      	b.n	80a5850 <__adddf3+0x138>
 80a5a16:	bf00      	nop

080a5a18 <__aeabi_ul2d>:
 80a5a18:	ea50 0201 	orrs.w	r2, r0, r1
 80a5a1c:	bf08      	it	eq
 80a5a1e:	4770      	bxeq	lr
 80a5a20:	b530      	push	{r4, r5, lr}
 80a5a22:	f04f 0500 	mov.w	r5, #0
 80a5a26:	e00a      	b.n	80a5a3e <__aeabi_l2d+0x16>

080a5a28 <__aeabi_l2d>:
 80a5a28:	ea50 0201 	orrs.w	r2, r0, r1
 80a5a2c:	bf08      	it	eq
 80a5a2e:	4770      	bxeq	lr
 80a5a30:	b530      	push	{r4, r5, lr}
 80a5a32:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a5a36:	d502      	bpl.n	80a5a3e <__aeabi_l2d+0x16>
 80a5a38:	4240      	negs	r0, r0
 80a5a3a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a5a3e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a5a42:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a5a46:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a5a4a:	f43f aed8 	beq.w	80a57fe <__adddf3+0xe6>
 80a5a4e:	f04f 0203 	mov.w	r2, #3
 80a5a52:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a5a56:	bf18      	it	ne
 80a5a58:	3203      	addne	r2, #3
 80a5a5a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a5a5e:	bf18      	it	ne
 80a5a60:	3203      	addne	r2, #3
 80a5a62:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a5a66:	f1c2 0320 	rsb	r3, r2, #32
 80a5a6a:	fa00 fc03 	lsl.w	ip, r0, r3
 80a5a6e:	fa20 f002 	lsr.w	r0, r0, r2
 80a5a72:	fa01 fe03 	lsl.w	lr, r1, r3
 80a5a76:	ea40 000e 	orr.w	r0, r0, lr
 80a5a7a:	fa21 f102 	lsr.w	r1, r1, r2
 80a5a7e:	4414      	add	r4, r2
 80a5a80:	e6bd      	b.n	80a57fe <__adddf3+0xe6>
 80a5a82:	bf00      	nop

080a5a84 <__aeabi_dmul>:
 80a5a84:	b570      	push	{r4, r5, r6, lr}
 80a5a86:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a5a8a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a5a8e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a5a92:	bf1d      	ittte	ne
 80a5a94:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a5a98:	ea94 0f0c 	teqne	r4, ip
 80a5a9c:	ea95 0f0c 	teqne	r5, ip
 80a5aa0:	f000 f8de 	bleq	80a5c60 <__aeabi_dmul+0x1dc>
 80a5aa4:	442c      	add	r4, r5
 80a5aa6:	ea81 0603 	eor.w	r6, r1, r3
 80a5aaa:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a5aae:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a5ab2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a5ab6:	bf18      	it	ne
 80a5ab8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a5abc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a5ac0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a5ac4:	d038      	beq.n	80a5b38 <__aeabi_dmul+0xb4>
 80a5ac6:	fba0 ce02 	umull	ip, lr, r0, r2
 80a5aca:	f04f 0500 	mov.w	r5, #0
 80a5ace:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a5ad2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a5ad6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a5ada:	f04f 0600 	mov.w	r6, #0
 80a5ade:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a5ae2:	f09c 0f00 	teq	ip, #0
 80a5ae6:	bf18      	it	ne
 80a5ae8:	f04e 0e01 	orrne.w	lr, lr, #1
 80a5aec:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a5af0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a5af4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a5af8:	d204      	bcs.n	80a5b04 <__aeabi_dmul+0x80>
 80a5afa:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a5afe:	416d      	adcs	r5, r5
 80a5b00:	eb46 0606 	adc.w	r6, r6, r6
 80a5b04:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a5b08:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a5b0c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a5b10:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a5b14:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a5b18:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a5b1c:	bf88      	it	hi
 80a5b1e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a5b22:	d81e      	bhi.n	80a5b62 <__aeabi_dmul+0xde>
 80a5b24:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a5b28:	bf08      	it	eq
 80a5b2a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a5b2e:	f150 0000 	adcs.w	r0, r0, #0
 80a5b32:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a5b36:	bd70      	pop	{r4, r5, r6, pc}
 80a5b38:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a5b3c:	ea46 0101 	orr.w	r1, r6, r1
 80a5b40:	ea40 0002 	orr.w	r0, r0, r2
 80a5b44:	ea81 0103 	eor.w	r1, r1, r3
 80a5b48:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a5b4c:	bfc2      	ittt	gt
 80a5b4e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a5b52:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a5b56:	bd70      	popgt	{r4, r5, r6, pc}
 80a5b58:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a5b5c:	f04f 0e00 	mov.w	lr, #0
 80a5b60:	3c01      	subs	r4, #1
 80a5b62:	f300 80ab 	bgt.w	80a5cbc <__aeabi_dmul+0x238>
 80a5b66:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a5b6a:	bfde      	ittt	le
 80a5b6c:	2000      	movle	r0, #0
 80a5b6e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a5b72:	bd70      	pople	{r4, r5, r6, pc}
 80a5b74:	f1c4 0400 	rsb	r4, r4, #0
 80a5b78:	3c20      	subs	r4, #32
 80a5b7a:	da35      	bge.n	80a5be8 <__aeabi_dmul+0x164>
 80a5b7c:	340c      	adds	r4, #12
 80a5b7e:	dc1b      	bgt.n	80a5bb8 <__aeabi_dmul+0x134>
 80a5b80:	f104 0414 	add.w	r4, r4, #20
 80a5b84:	f1c4 0520 	rsb	r5, r4, #32
 80a5b88:	fa00 f305 	lsl.w	r3, r0, r5
 80a5b8c:	fa20 f004 	lsr.w	r0, r0, r4
 80a5b90:	fa01 f205 	lsl.w	r2, r1, r5
 80a5b94:	ea40 0002 	orr.w	r0, r0, r2
 80a5b98:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a5b9c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a5ba0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a5ba4:	fa21 f604 	lsr.w	r6, r1, r4
 80a5ba8:	eb42 0106 	adc.w	r1, r2, r6
 80a5bac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a5bb0:	bf08      	it	eq
 80a5bb2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a5bb6:	bd70      	pop	{r4, r5, r6, pc}
 80a5bb8:	f1c4 040c 	rsb	r4, r4, #12
 80a5bbc:	f1c4 0520 	rsb	r5, r4, #32
 80a5bc0:	fa00 f304 	lsl.w	r3, r0, r4
 80a5bc4:	fa20 f005 	lsr.w	r0, r0, r5
 80a5bc8:	fa01 f204 	lsl.w	r2, r1, r4
 80a5bcc:	ea40 0002 	orr.w	r0, r0, r2
 80a5bd0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a5bd4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a5bd8:	f141 0100 	adc.w	r1, r1, #0
 80a5bdc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a5be0:	bf08      	it	eq
 80a5be2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a5be6:	bd70      	pop	{r4, r5, r6, pc}
 80a5be8:	f1c4 0520 	rsb	r5, r4, #32
 80a5bec:	fa00 f205 	lsl.w	r2, r0, r5
 80a5bf0:	ea4e 0e02 	orr.w	lr, lr, r2
 80a5bf4:	fa20 f304 	lsr.w	r3, r0, r4
 80a5bf8:	fa01 f205 	lsl.w	r2, r1, r5
 80a5bfc:	ea43 0302 	orr.w	r3, r3, r2
 80a5c00:	fa21 f004 	lsr.w	r0, r1, r4
 80a5c04:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a5c08:	fa21 f204 	lsr.w	r2, r1, r4
 80a5c0c:	ea20 0002 	bic.w	r0, r0, r2
 80a5c10:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a5c14:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a5c18:	bf08      	it	eq
 80a5c1a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a5c1e:	bd70      	pop	{r4, r5, r6, pc}
 80a5c20:	f094 0f00 	teq	r4, #0
 80a5c24:	d10f      	bne.n	80a5c46 <__aeabi_dmul+0x1c2>
 80a5c26:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a5c2a:	0040      	lsls	r0, r0, #1
 80a5c2c:	eb41 0101 	adc.w	r1, r1, r1
 80a5c30:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a5c34:	bf08      	it	eq
 80a5c36:	3c01      	subeq	r4, #1
 80a5c38:	d0f7      	beq.n	80a5c2a <__aeabi_dmul+0x1a6>
 80a5c3a:	ea41 0106 	orr.w	r1, r1, r6
 80a5c3e:	f095 0f00 	teq	r5, #0
 80a5c42:	bf18      	it	ne
 80a5c44:	4770      	bxne	lr
 80a5c46:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a5c4a:	0052      	lsls	r2, r2, #1
 80a5c4c:	eb43 0303 	adc.w	r3, r3, r3
 80a5c50:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a5c54:	bf08      	it	eq
 80a5c56:	3d01      	subeq	r5, #1
 80a5c58:	d0f7      	beq.n	80a5c4a <__aeabi_dmul+0x1c6>
 80a5c5a:	ea43 0306 	orr.w	r3, r3, r6
 80a5c5e:	4770      	bx	lr
 80a5c60:	ea94 0f0c 	teq	r4, ip
 80a5c64:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a5c68:	bf18      	it	ne
 80a5c6a:	ea95 0f0c 	teqne	r5, ip
 80a5c6e:	d00c      	beq.n	80a5c8a <__aeabi_dmul+0x206>
 80a5c70:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a5c74:	bf18      	it	ne
 80a5c76:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a5c7a:	d1d1      	bne.n	80a5c20 <__aeabi_dmul+0x19c>
 80a5c7c:	ea81 0103 	eor.w	r1, r1, r3
 80a5c80:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a5c84:	f04f 0000 	mov.w	r0, #0
 80a5c88:	bd70      	pop	{r4, r5, r6, pc}
 80a5c8a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a5c8e:	bf06      	itte	eq
 80a5c90:	4610      	moveq	r0, r2
 80a5c92:	4619      	moveq	r1, r3
 80a5c94:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a5c98:	d019      	beq.n	80a5cce <__aeabi_dmul+0x24a>
 80a5c9a:	ea94 0f0c 	teq	r4, ip
 80a5c9e:	d102      	bne.n	80a5ca6 <__aeabi_dmul+0x222>
 80a5ca0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a5ca4:	d113      	bne.n	80a5cce <__aeabi_dmul+0x24a>
 80a5ca6:	ea95 0f0c 	teq	r5, ip
 80a5caa:	d105      	bne.n	80a5cb8 <__aeabi_dmul+0x234>
 80a5cac:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a5cb0:	bf1c      	itt	ne
 80a5cb2:	4610      	movne	r0, r2
 80a5cb4:	4619      	movne	r1, r3
 80a5cb6:	d10a      	bne.n	80a5cce <__aeabi_dmul+0x24a>
 80a5cb8:	ea81 0103 	eor.w	r1, r1, r3
 80a5cbc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a5cc0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a5cc4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a5cc8:	f04f 0000 	mov.w	r0, #0
 80a5ccc:	bd70      	pop	{r4, r5, r6, pc}
 80a5cce:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a5cd2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a5cd6:	bd70      	pop	{r4, r5, r6, pc}

080a5cd8 <__aeabi_ddiv>:
 80a5cd8:	b570      	push	{r4, r5, r6, lr}
 80a5cda:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a5cde:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a5ce2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a5ce6:	bf1d      	ittte	ne
 80a5ce8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a5cec:	ea94 0f0c 	teqne	r4, ip
 80a5cf0:	ea95 0f0c 	teqne	r5, ip
 80a5cf4:	f000 f8a7 	bleq	80a5e46 <__aeabi_ddiv+0x16e>
 80a5cf8:	eba4 0405 	sub.w	r4, r4, r5
 80a5cfc:	ea81 0e03 	eor.w	lr, r1, r3
 80a5d00:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a5d04:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a5d08:	f000 8088 	beq.w	80a5e1c <__aeabi_ddiv+0x144>
 80a5d0c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a5d10:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a5d14:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a5d18:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a5d1c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a5d20:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a5d24:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a5d28:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a5d2c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a5d30:	429d      	cmp	r5, r3
 80a5d32:	bf08      	it	eq
 80a5d34:	4296      	cmpeq	r6, r2
 80a5d36:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a5d3a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a5d3e:	d202      	bcs.n	80a5d46 <__aeabi_ddiv+0x6e>
 80a5d40:	085b      	lsrs	r3, r3, #1
 80a5d42:	ea4f 0232 	mov.w	r2, r2, rrx
 80a5d46:	1ab6      	subs	r6, r6, r2
 80a5d48:	eb65 0503 	sbc.w	r5, r5, r3
 80a5d4c:	085b      	lsrs	r3, r3, #1
 80a5d4e:	ea4f 0232 	mov.w	r2, r2, rrx
 80a5d52:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a5d56:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a5d5a:	ebb6 0e02 	subs.w	lr, r6, r2
 80a5d5e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a5d62:	bf22      	ittt	cs
 80a5d64:	1ab6      	subcs	r6, r6, r2
 80a5d66:	4675      	movcs	r5, lr
 80a5d68:	ea40 000c 	orrcs.w	r0, r0, ip
 80a5d6c:	085b      	lsrs	r3, r3, #1
 80a5d6e:	ea4f 0232 	mov.w	r2, r2, rrx
 80a5d72:	ebb6 0e02 	subs.w	lr, r6, r2
 80a5d76:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a5d7a:	bf22      	ittt	cs
 80a5d7c:	1ab6      	subcs	r6, r6, r2
 80a5d7e:	4675      	movcs	r5, lr
 80a5d80:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a5d84:	085b      	lsrs	r3, r3, #1
 80a5d86:	ea4f 0232 	mov.w	r2, r2, rrx
 80a5d8a:	ebb6 0e02 	subs.w	lr, r6, r2
 80a5d8e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a5d92:	bf22      	ittt	cs
 80a5d94:	1ab6      	subcs	r6, r6, r2
 80a5d96:	4675      	movcs	r5, lr
 80a5d98:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a5d9c:	085b      	lsrs	r3, r3, #1
 80a5d9e:	ea4f 0232 	mov.w	r2, r2, rrx
 80a5da2:	ebb6 0e02 	subs.w	lr, r6, r2
 80a5da6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a5daa:	bf22      	ittt	cs
 80a5dac:	1ab6      	subcs	r6, r6, r2
 80a5dae:	4675      	movcs	r5, lr
 80a5db0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a5db4:	ea55 0e06 	orrs.w	lr, r5, r6
 80a5db8:	d018      	beq.n	80a5dec <__aeabi_ddiv+0x114>
 80a5dba:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a5dbe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a5dc2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a5dc6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a5dca:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a5dce:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a5dd2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a5dd6:	d1c0      	bne.n	80a5d5a <__aeabi_ddiv+0x82>
 80a5dd8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a5ddc:	d10b      	bne.n	80a5df6 <__aeabi_ddiv+0x11e>
 80a5dde:	ea41 0100 	orr.w	r1, r1, r0
 80a5de2:	f04f 0000 	mov.w	r0, #0
 80a5de6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a5dea:	e7b6      	b.n	80a5d5a <__aeabi_ddiv+0x82>
 80a5dec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a5df0:	bf04      	itt	eq
 80a5df2:	4301      	orreq	r1, r0
 80a5df4:	2000      	moveq	r0, #0
 80a5df6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a5dfa:	bf88      	it	hi
 80a5dfc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a5e00:	f63f aeaf 	bhi.w	80a5b62 <__aeabi_dmul+0xde>
 80a5e04:	ebb5 0c03 	subs.w	ip, r5, r3
 80a5e08:	bf04      	itt	eq
 80a5e0a:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a5e0e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a5e12:	f150 0000 	adcs.w	r0, r0, #0
 80a5e16:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a5e1a:	bd70      	pop	{r4, r5, r6, pc}
 80a5e1c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a5e20:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a5e24:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a5e28:	bfc2      	ittt	gt
 80a5e2a:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a5e2e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a5e32:	bd70      	popgt	{r4, r5, r6, pc}
 80a5e34:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a5e38:	f04f 0e00 	mov.w	lr, #0
 80a5e3c:	3c01      	subs	r4, #1
 80a5e3e:	e690      	b.n	80a5b62 <__aeabi_dmul+0xde>
 80a5e40:	ea45 0e06 	orr.w	lr, r5, r6
 80a5e44:	e68d      	b.n	80a5b62 <__aeabi_dmul+0xde>
 80a5e46:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a5e4a:	ea94 0f0c 	teq	r4, ip
 80a5e4e:	bf08      	it	eq
 80a5e50:	ea95 0f0c 	teqeq	r5, ip
 80a5e54:	f43f af3b 	beq.w	80a5cce <__aeabi_dmul+0x24a>
 80a5e58:	ea94 0f0c 	teq	r4, ip
 80a5e5c:	d10a      	bne.n	80a5e74 <__aeabi_ddiv+0x19c>
 80a5e5e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a5e62:	f47f af34 	bne.w	80a5cce <__aeabi_dmul+0x24a>
 80a5e66:	ea95 0f0c 	teq	r5, ip
 80a5e6a:	f47f af25 	bne.w	80a5cb8 <__aeabi_dmul+0x234>
 80a5e6e:	4610      	mov	r0, r2
 80a5e70:	4619      	mov	r1, r3
 80a5e72:	e72c      	b.n	80a5cce <__aeabi_dmul+0x24a>
 80a5e74:	ea95 0f0c 	teq	r5, ip
 80a5e78:	d106      	bne.n	80a5e88 <__aeabi_ddiv+0x1b0>
 80a5e7a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a5e7e:	f43f aefd 	beq.w	80a5c7c <__aeabi_dmul+0x1f8>
 80a5e82:	4610      	mov	r0, r2
 80a5e84:	4619      	mov	r1, r3
 80a5e86:	e722      	b.n	80a5cce <__aeabi_dmul+0x24a>
 80a5e88:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a5e8c:	bf18      	it	ne
 80a5e8e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a5e92:	f47f aec5 	bne.w	80a5c20 <__aeabi_dmul+0x19c>
 80a5e96:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a5e9a:	f47f af0d 	bne.w	80a5cb8 <__aeabi_dmul+0x234>
 80a5e9e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a5ea2:	f47f aeeb 	bne.w	80a5c7c <__aeabi_dmul+0x1f8>
 80a5ea6:	e712      	b.n	80a5cce <__aeabi_dmul+0x24a>

080a5ea8 <__gedf2>:
 80a5ea8:	f04f 3cff 	mov.w	ip, #4294967295
 80a5eac:	e006      	b.n	80a5ebc <__cmpdf2+0x4>
 80a5eae:	bf00      	nop

080a5eb0 <__ledf2>:
 80a5eb0:	f04f 0c01 	mov.w	ip, #1
 80a5eb4:	e002      	b.n	80a5ebc <__cmpdf2+0x4>
 80a5eb6:	bf00      	nop

080a5eb8 <__cmpdf2>:
 80a5eb8:	f04f 0c01 	mov.w	ip, #1
 80a5ebc:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a5ec0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a5ec4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a5ec8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a5ecc:	bf18      	it	ne
 80a5ece:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80a5ed2:	d01b      	beq.n	80a5f0c <__cmpdf2+0x54>
 80a5ed4:	b001      	add	sp, #4
 80a5ed6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80a5eda:	bf0c      	ite	eq
 80a5edc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80a5ee0:	ea91 0f03 	teqne	r1, r3
 80a5ee4:	bf02      	ittt	eq
 80a5ee6:	ea90 0f02 	teqeq	r0, r2
 80a5eea:	2000      	moveq	r0, #0
 80a5eec:	4770      	bxeq	lr
 80a5eee:	f110 0f00 	cmn.w	r0, #0
 80a5ef2:	ea91 0f03 	teq	r1, r3
 80a5ef6:	bf58      	it	pl
 80a5ef8:	4299      	cmppl	r1, r3
 80a5efa:	bf08      	it	eq
 80a5efc:	4290      	cmpeq	r0, r2
 80a5efe:	bf2c      	ite	cs
 80a5f00:	17d8      	asrcs	r0, r3, #31
 80a5f02:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80a5f06:	f040 0001 	orr.w	r0, r0, #1
 80a5f0a:	4770      	bx	lr
 80a5f0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a5f10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a5f14:	d102      	bne.n	80a5f1c <__cmpdf2+0x64>
 80a5f16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a5f1a:	d107      	bne.n	80a5f2c <__cmpdf2+0x74>
 80a5f1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a5f20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a5f24:	d1d6      	bne.n	80a5ed4 <__cmpdf2+0x1c>
 80a5f26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a5f2a:	d0d3      	beq.n	80a5ed4 <__cmpdf2+0x1c>
 80a5f2c:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a5f30:	4770      	bx	lr
 80a5f32:	bf00      	nop

080a5f34 <__aeabi_cdrcmple>:
 80a5f34:	4684      	mov	ip, r0
 80a5f36:	4610      	mov	r0, r2
 80a5f38:	4662      	mov	r2, ip
 80a5f3a:	468c      	mov	ip, r1
 80a5f3c:	4619      	mov	r1, r3
 80a5f3e:	4663      	mov	r3, ip
 80a5f40:	e000      	b.n	80a5f44 <__aeabi_cdcmpeq>
 80a5f42:	bf00      	nop

080a5f44 <__aeabi_cdcmpeq>:
 80a5f44:	b501      	push	{r0, lr}
 80a5f46:	f7ff ffb7 	bl	80a5eb8 <__cmpdf2>
 80a5f4a:	2800      	cmp	r0, #0
 80a5f4c:	bf48      	it	mi
 80a5f4e:	f110 0f00 	cmnmi.w	r0, #0
 80a5f52:	bd01      	pop	{r0, pc}

080a5f54 <__aeabi_dcmpeq>:
 80a5f54:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a5f58:	f7ff fff4 	bl	80a5f44 <__aeabi_cdcmpeq>
 80a5f5c:	bf0c      	ite	eq
 80a5f5e:	2001      	moveq	r0, #1
 80a5f60:	2000      	movne	r0, #0
 80a5f62:	f85d fb08 	ldr.w	pc, [sp], #8
 80a5f66:	bf00      	nop

080a5f68 <__aeabi_dcmplt>:
 80a5f68:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a5f6c:	f7ff ffea 	bl	80a5f44 <__aeabi_cdcmpeq>
 80a5f70:	bf34      	ite	cc
 80a5f72:	2001      	movcc	r0, #1
 80a5f74:	2000      	movcs	r0, #0
 80a5f76:	f85d fb08 	ldr.w	pc, [sp], #8
 80a5f7a:	bf00      	nop

080a5f7c <__aeabi_dcmple>:
 80a5f7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a5f80:	f7ff ffe0 	bl	80a5f44 <__aeabi_cdcmpeq>
 80a5f84:	bf94      	ite	ls
 80a5f86:	2001      	movls	r0, #1
 80a5f88:	2000      	movhi	r0, #0
 80a5f8a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a5f8e:	bf00      	nop

080a5f90 <__aeabi_dcmpge>:
 80a5f90:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a5f94:	f7ff ffce 	bl	80a5f34 <__aeabi_cdrcmple>
 80a5f98:	bf94      	ite	ls
 80a5f9a:	2001      	movls	r0, #1
 80a5f9c:	2000      	movhi	r0, #0
 80a5f9e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a5fa2:	bf00      	nop

080a5fa4 <__aeabi_dcmpgt>:
 80a5fa4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a5fa8:	f7ff ffc4 	bl	80a5f34 <__aeabi_cdrcmple>
 80a5fac:	bf34      	ite	cc
 80a5fae:	2001      	movcc	r0, #1
 80a5fb0:	2000      	movcs	r0, #0
 80a5fb2:	f85d fb08 	ldr.w	pc, [sp], #8
 80a5fb6:	bf00      	nop

080a5fb8 <__aeabi_dcmpun>:
 80a5fb8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a5fbc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a5fc0:	d102      	bne.n	80a5fc8 <__aeabi_dcmpun+0x10>
 80a5fc2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a5fc6:	d10a      	bne.n	80a5fde <__aeabi_dcmpun+0x26>
 80a5fc8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a5fcc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a5fd0:	d102      	bne.n	80a5fd8 <__aeabi_dcmpun+0x20>
 80a5fd2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a5fd6:	d102      	bne.n	80a5fde <__aeabi_dcmpun+0x26>
 80a5fd8:	f04f 0000 	mov.w	r0, #0
 80a5fdc:	4770      	bx	lr
 80a5fde:	f04f 0001 	mov.w	r0, #1
 80a5fe2:	4770      	bx	lr

080a5fe4 <__aeabi_d2iz>:
 80a5fe4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a5fe8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a5fec:	d215      	bcs.n	80a601a <__aeabi_d2iz+0x36>
 80a5fee:	d511      	bpl.n	80a6014 <__aeabi_d2iz+0x30>
 80a5ff0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a5ff4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a5ff8:	d912      	bls.n	80a6020 <__aeabi_d2iz+0x3c>
 80a5ffa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a5ffe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a6002:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a6006:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a600a:	fa23 f002 	lsr.w	r0, r3, r2
 80a600e:	bf18      	it	ne
 80a6010:	4240      	negne	r0, r0
 80a6012:	4770      	bx	lr
 80a6014:	f04f 0000 	mov.w	r0, #0
 80a6018:	4770      	bx	lr
 80a601a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a601e:	d105      	bne.n	80a602c <__aeabi_d2iz+0x48>
 80a6020:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80a6024:	bf08      	it	eq
 80a6026:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a602a:	4770      	bx	lr
 80a602c:	f04f 0000 	mov.w	r0, #0
 80a6030:	4770      	bx	lr
 80a6032:	bf00      	nop

080a6034 <__aeabi_d2uiz>:
 80a6034:	004a      	lsls	r2, r1, #1
 80a6036:	d211      	bcs.n	80a605c <__aeabi_d2uiz+0x28>
 80a6038:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a603c:	d211      	bcs.n	80a6062 <__aeabi_d2uiz+0x2e>
 80a603e:	d50d      	bpl.n	80a605c <__aeabi_d2uiz+0x28>
 80a6040:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a6044:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a6048:	d40e      	bmi.n	80a6068 <__aeabi_d2uiz+0x34>
 80a604a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a604e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a6052:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a6056:	fa23 f002 	lsr.w	r0, r3, r2
 80a605a:	4770      	bx	lr
 80a605c:	f04f 0000 	mov.w	r0, #0
 80a6060:	4770      	bx	lr
 80a6062:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a6066:	d102      	bne.n	80a606e <__aeabi_d2uiz+0x3a>
 80a6068:	f04f 30ff 	mov.w	r0, #4294967295
 80a606c:	4770      	bx	lr
 80a606e:	f04f 0000 	mov.w	r0, #0
 80a6072:	4770      	bx	lr

080a6074 <__aeabi_frsub>:
 80a6074:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80a6078:	e002      	b.n	80a6080 <__addsf3>
 80a607a:	bf00      	nop

080a607c <__aeabi_fsub>:
 80a607c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080a6080 <__addsf3>:
 80a6080:	0042      	lsls	r2, r0, #1
 80a6082:	bf1f      	itttt	ne
 80a6084:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80a6088:	ea92 0f03 	teqne	r2, r3
 80a608c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80a6090:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a6094:	d06a      	beq.n	80a616c <__addsf3+0xec>
 80a6096:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80a609a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80a609e:	bfc1      	itttt	gt
 80a60a0:	18d2      	addgt	r2, r2, r3
 80a60a2:	4041      	eorgt	r1, r0
 80a60a4:	4048      	eorgt	r0, r1
 80a60a6:	4041      	eorgt	r1, r0
 80a60a8:	bfb8      	it	lt
 80a60aa:	425b      	neglt	r3, r3
 80a60ac:	2b19      	cmp	r3, #25
 80a60ae:	bf88      	it	hi
 80a60b0:	4770      	bxhi	lr
 80a60b2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a60b6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a60ba:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80a60be:	bf18      	it	ne
 80a60c0:	4240      	negne	r0, r0
 80a60c2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a60c6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80a60ca:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80a60ce:	bf18      	it	ne
 80a60d0:	4249      	negne	r1, r1
 80a60d2:	ea92 0f03 	teq	r2, r3
 80a60d6:	d03f      	beq.n	80a6158 <__addsf3+0xd8>
 80a60d8:	f1a2 0201 	sub.w	r2, r2, #1
 80a60dc:	fa41 fc03 	asr.w	ip, r1, r3
 80a60e0:	eb10 000c 	adds.w	r0, r0, ip
 80a60e4:	f1c3 0320 	rsb	r3, r3, #32
 80a60e8:	fa01 f103 	lsl.w	r1, r1, r3
 80a60ec:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a60f0:	d502      	bpl.n	80a60f8 <__addsf3+0x78>
 80a60f2:	4249      	negs	r1, r1
 80a60f4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80a60f8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a60fc:	d313      	bcc.n	80a6126 <__addsf3+0xa6>
 80a60fe:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80a6102:	d306      	bcc.n	80a6112 <__addsf3+0x92>
 80a6104:	0840      	lsrs	r0, r0, #1
 80a6106:	ea4f 0131 	mov.w	r1, r1, rrx
 80a610a:	f102 0201 	add.w	r2, r2, #1
 80a610e:	2afe      	cmp	r2, #254	; 0xfe
 80a6110:	d251      	bcs.n	80a61b6 <__addsf3+0x136>
 80a6112:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80a6116:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a611a:	bf08      	it	eq
 80a611c:	f020 0001 	biceq.w	r0, r0, #1
 80a6120:	ea40 0003 	orr.w	r0, r0, r3
 80a6124:	4770      	bx	lr
 80a6126:	0049      	lsls	r1, r1, #1
 80a6128:	eb40 0000 	adc.w	r0, r0, r0
 80a612c:	3a01      	subs	r2, #1
 80a612e:	bf28      	it	cs
 80a6130:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80a6134:	d2ed      	bcs.n	80a6112 <__addsf3+0x92>
 80a6136:	fab0 fc80 	clz	ip, r0
 80a613a:	f1ac 0c08 	sub.w	ip, ip, #8
 80a613e:	ebb2 020c 	subs.w	r2, r2, ip
 80a6142:	fa00 f00c 	lsl.w	r0, r0, ip
 80a6146:	bfaa      	itet	ge
 80a6148:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80a614c:	4252      	neglt	r2, r2
 80a614e:	4318      	orrge	r0, r3
 80a6150:	bfbc      	itt	lt
 80a6152:	40d0      	lsrlt	r0, r2
 80a6154:	4318      	orrlt	r0, r3
 80a6156:	4770      	bx	lr
 80a6158:	f092 0f00 	teq	r2, #0
 80a615c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80a6160:	bf06      	itte	eq
 80a6162:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80a6166:	3201      	addeq	r2, #1
 80a6168:	3b01      	subne	r3, #1
 80a616a:	e7b5      	b.n	80a60d8 <__addsf3+0x58>
 80a616c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a6170:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a6174:	bf18      	it	ne
 80a6176:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a617a:	d021      	beq.n	80a61c0 <__addsf3+0x140>
 80a617c:	ea92 0f03 	teq	r2, r3
 80a6180:	d004      	beq.n	80a618c <__addsf3+0x10c>
 80a6182:	f092 0f00 	teq	r2, #0
 80a6186:	bf08      	it	eq
 80a6188:	4608      	moveq	r0, r1
 80a618a:	4770      	bx	lr
 80a618c:	ea90 0f01 	teq	r0, r1
 80a6190:	bf1c      	itt	ne
 80a6192:	2000      	movne	r0, #0
 80a6194:	4770      	bxne	lr
 80a6196:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80a619a:	d104      	bne.n	80a61a6 <__addsf3+0x126>
 80a619c:	0040      	lsls	r0, r0, #1
 80a619e:	bf28      	it	cs
 80a61a0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80a61a4:	4770      	bx	lr
 80a61a6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80a61aa:	bf3c      	itt	cc
 80a61ac:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80a61b0:	4770      	bxcc	lr
 80a61b2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a61b6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80a61ba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a61be:	4770      	bx	lr
 80a61c0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80a61c4:	bf16      	itet	ne
 80a61c6:	4608      	movne	r0, r1
 80a61c8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80a61cc:	4601      	movne	r1, r0
 80a61ce:	0242      	lsls	r2, r0, #9
 80a61d0:	bf06      	itte	eq
 80a61d2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80a61d6:	ea90 0f01 	teqeq	r0, r1
 80a61da:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80a61de:	4770      	bx	lr

080a61e0 <__aeabi_ui2f>:
 80a61e0:	f04f 0300 	mov.w	r3, #0
 80a61e4:	e004      	b.n	80a61f0 <__aeabi_i2f+0x8>
 80a61e6:	bf00      	nop

080a61e8 <__aeabi_i2f>:
 80a61e8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80a61ec:	bf48      	it	mi
 80a61ee:	4240      	negmi	r0, r0
 80a61f0:	ea5f 0c00 	movs.w	ip, r0
 80a61f4:	bf08      	it	eq
 80a61f6:	4770      	bxeq	lr
 80a61f8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80a61fc:	4601      	mov	r1, r0
 80a61fe:	f04f 0000 	mov.w	r0, #0
 80a6202:	e01c      	b.n	80a623e <__aeabi_l2f+0x2a>

080a6204 <__aeabi_ul2f>:
 80a6204:	ea50 0201 	orrs.w	r2, r0, r1
 80a6208:	bf08      	it	eq
 80a620a:	4770      	bxeq	lr
 80a620c:	f04f 0300 	mov.w	r3, #0
 80a6210:	e00a      	b.n	80a6228 <__aeabi_l2f+0x14>
 80a6212:	bf00      	nop

080a6214 <__aeabi_l2f>:
 80a6214:	ea50 0201 	orrs.w	r2, r0, r1
 80a6218:	bf08      	it	eq
 80a621a:	4770      	bxeq	lr
 80a621c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80a6220:	d502      	bpl.n	80a6228 <__aeabi_l2f+0x14>
 80a6222:	4240      	negs	r0, r0
 80a6224:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a6228:	ea5f 0c01 	movs.w	ip, r1
 80a622c:	bf02      	ittt	eq
 80a622e:	4684      	moveq	ip, r0
 80a6230:	4601      	moveq	r1, r0
 80a6232:	2000      	moveq	r0, #0
 80a6234:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80a6238:	bf08      	it	eq
 80a623a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80a623e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80a6242:	fabc f28c 	clz	r2, ip
 80a6246:	3a08      	subs	r2, #8
 80a6248:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80a624c:	db10      	blt.n	80a6270 <__aeabi_l2f+0x5c>
 80a624e:	fa01 fc02 	lsl.w	ip, r1, r2
 80a6252:	4463      	add	r3, ip
 80a6254:	fa00 fc02 	lsl.w	ip, r0, r2
 80a6258:	f1c2 0220 	rsb	r2, r2, #32
 80a625c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a6260:	fa20 f202 	lsr.w	r2, r0, r2
 80a6264:	eb43 0002 	adc.w	r0, r3, r2
 80a6268:	bf08      	it	eq
 80a626a:	f020 0001 	biceq.w	r0, r0, #1
 80a626e:	4770      	bx	lr
 80a6270:	f102 0220 	add.w	r2, r2, #32
 80a6274:	fa01 fc02 	lsl.w	ip, r1, r2
 80a6278:	f1c2 0220 	rsb	r2, r2, #32
 80a627c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80a6280:	fa21 f202 	lsr.w	r2, r1, r2
 80a6284:	eb43 0002 	adc.w	r0, r3, r2
 80a6288:	bf08      	it	eq
 80a628a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a628e:	4770      	bx	lr

080a6290 <__aeabi_fmul>:
 80a6290:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a6294:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a6298:	bf1e      	ittt	ne
 80a629a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a629e:	ea92 0f0c 	teqne	r2, ip
 80a62a2:	ea93 0f0c 	teqne	r3, ip
 80a62a6:	d06f      	beq.n	80a6388 <__aeabi_fmul+0xf8>
 80a62a8:	441a      	add	r2, r3
 80a62aa:	ea80 0c01 	eor.w	ip, r0, r1
 80a62ae:	0240      	lsls	r0, r0, #9
 80a62b0:	bf18      	it	ne
 80a62b2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80a62b6:	d01e      	beq.n	80a62f6 <__aeabi_fmul+0x66>
 80a62b8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80a62bc:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80a62c0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80a62c4:	fba0 3101 	umull	r3, r1, r0, r1
 80a62c8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a62cc:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80a62d0:	bf3e      	ittt	cc
 80a62d2:	0049      	lslcc	r1, r1, #1
 80a62d4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80a62d8:	005b      	lslcc	r3, r3, #1
 80a62da:	ea40 0001 	orr.w	r0, r0, r1
 80a62de:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80a62e2:	2afd      	cmp	r2, #253	; 0xfd
 80a62e4:	d81d      	bhi.n	80a6322 <__aeabi_fmul+0x92>
 80a62e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a62ea:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a62ee:	bf08      	it	eq
 80a62f0:	f020 0001 	biceq.w	r0, r0, #1
 80a62f4:	4770      	bx	lr
 80a62f6:	f090 0f00 	teq	r0, #0
 80a62fa:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a62fe:	bf08      	it	eq
 80a6300:	0249      	lsleq	r1, r1, #9
 80a6302:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a6306:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80a630a:	3a7f      	subs	r2, #127	; 0x7f
 80a630c:	bfc2      	ittt	gt
 80a630e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a6312:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a6316:	4770      	bxgt	lr
 80a6318:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a631c:	f04f 0300 	mov.w	r3, #0
 80a6320:	3a01      	subs	r2, #1
 80a6322:	dc5d      	bgt.n	80a63e0 <__aeabi_fmul+0x150>
 80a6324:	f112 0f19 	cmn.w	r2, #25
 80a6328:	bfdc      	itt	le
 80a632a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80a632e:	4770      	bxle	lr
 80a6330:	f1c2 0200 	rsb	r2, r2, #0
 80a6334:	0041      	lsls	r1, r0, #1
 80a6336:	fa21 f102 	lsr.w	r1, r1, r2
 80a633a:	f1c2 0220 	rsb	r2, r2, #32
 80a633e:	fa00 fc02 	lsl.w	ip, r0, r2
 80a6342:	ea5f 0031 	movs.w	r0, r1, rrx
 80a6346:	f140 0000 	adc.w	r0, r0, #0
 80a634a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80a634e:	bf08      	it	eq
 80a6350:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a6354:	4770      	bx	lr
 80a6356:	f092 0f00 	teq	r2, #0
 80a635a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a635e:	bf02      	ittt	eq
 80a6360:	0040      	lsleq	r0, r0, #1
 80a6362:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a6366:	3a01      	subeq	r2, #1
 80a6368:	d0f9      	beq.n	80a635e <__aeabi_fmul+0xce>
 80a636a:	ea40 000c 	orr.w	r0, r0, ip
 80a636e:	f093 0f00 	teq	r3, #0
 80a6372:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a6376:	bf02      	ittt	eq
 80a6378:	0049      	lsleq	r1, r1, #1
 80a637a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a637e:	3b01      	subeq	r3, #1
 80a6380:	d0f9      	beq.n	80a6376 <__aeabi_fmul+0xe6>
 80a6382:	ea41 010c 	orr.w	r1, r1, ip
 80a6386:	e78f      	b.n	80a62a8 <__aeabi_fmul+0x18>
 80a6388:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a638c:	ea92 0f0c 	teq	r2, ip
 80a6390:	bf18      	it	ne
 80a6392:	ea93 0f0c 	teqne	r3, ip
 80a6396:	d00a      	beq.n	80a63ae <__aeabi_fmul+0x11e>
 80a6398:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a639c:	bf18      	it	ne
 80a639e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a63a2:	d1d8      	bne.n	80a6356 <__aeabi_fmul+0xc6>
 80a63a4:	ea80 0001 	eor.w	r0, r0, r1
 80a63a8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a63ac:	4770      	bx	lr
 80a63ae:	f090 0f00 	teq	r0, #0
 80a63b2:	bf17      	itett	ne
 80a63b4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80a63b8:	4608      	moveq	r0, r1
 80a63ba:	f091 0f00 	teqne	r1, #0
 80a63be:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80a63c2:	d014      	beq.n	80a63ee <__aeabi_fmul+0x15e>
 80a63c4:	ea92 0f0c 	teq	r2, ip
 80a63c8:	d101      	bne.n	80a63ce <__aeabi_fmul+0x13e>
 80a63ca:	0242      	lsls	r2, r0, #9
 80a63cc:	d10f      	bne.n	80a63ee <__aeabi_fmul+0x15e>
 80a63ce:	ea93 0f0c 	teq	r3, ip
 80a63d2:	d103      	bne.n	80a63dc <__aeabi_fmul+0x14c>
 80a63d4:	024b      	lsls	r3, r1, #9
 80a63d6:	bf18      	it	ne
 80a63d8:	4608      	movne	r0, r1
 80a63da:	d108      	bne.n	80a63ee <__aeabi_fmul+0x15e>
 80a63dc:	ea80 0001 	eor.w	r0, r0, r1
 80a63e0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a63e4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a63e8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a63ec:	4770      	bx	lr
 80a63ee:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a63f2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80a63f6:	4770      	bx	lr

080a63f8 <__aeabi_fdiv>:
 80a63f8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a63fc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a6400:	bf1e      	ittt	ne
 80a6402:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a6406:	ea92 0f0c 	teqne	r2, ip
 80a640a:	ea93 0f0c 	teqne	r3, ip
 80a640e:	d069      	beq.n	80a64e4 <__aeabi_fdiv+0xec>
 80a6410:	eba2 0203 	sub.w	r2, r2, r3
 80a6414:	ea80 0c01 	eor.w	ip, r0, r1
 80a6418:	0249      	lsls	r1, r1, #9
 80a641a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80a641e:	d037      	beq.n	80a6490 <__aeabi_fdiv+0x98>
 80a6420:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80a6424:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80a6428:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80a642c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a6430:	428b      	cmp	r3, r1
 80a6432:	bf38      	it	cc
 80a6434:	005b      	lslcc	r3, r3, #1
 80a6436:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80a643a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80a643e:	428b      	cmp	r3, r1
 80a6440:	bf24      	itt	cs
 80a6442:	1a5b      	subcs	r3, r3, r1
 80a6444:	ea40 000c 	orrcs.w	r0, r0, ip
 80a6448:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80a644c:	bf24      	itt	cs
 80a644e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80a6452:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a6456:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80a645a:	bf24      	itt	cs
 80a645c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80a6460:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a6464:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80a6468:	bf24      	itt	cs
 80a646a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80a646e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a6472:	011b      	lsls	r3, r3, #4
 80a6474:	bf18      	it	ne
 80a6476:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80a647a:	d1e0      	bne.n	80a643e <__aeabi_fdiv+0x46>
 80a647c:	2afd      	cmp	r2, #253	; 0xfd
 80a647e:	f63f af50 	bhi.w	80a6322 <__aeabi_fmul+0x92>
 80a6482:	428b      	cmp	r3, r1
 80a6484:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a6488:	bf08      	it	eq
 80a648a:	f020 0001 	biceq.w	r0, r0, #1
 80a648e:	4770      	bx	lr
 80a6490:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a6494:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a6498:	327f      	adds	r2, #127	; 0x7f
 80a649a:	bfc2      	ittt	gt
 80a649c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a64a0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a64a4:	4770      	bxgt	lr
 80a64a6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a64aa:	f04f 0300 	mov.w	r3, #0
 80a64ae:	3a01      	subs	r2, #1
 80a64b0:	e737      	b.n	80a6322 <__aeabi_fmul+0x92>
 80a64b2:	f092 0f00 	teq	r2, #0
 80a64b6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a64ba:	bf02      	ittt	eq
 80a64bc:	0040      	lsleq	r0, r0, #1
 80a64be:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a64c2:	3a01      	subeq	r2, #1
 80a64c4:	d0f9      	beq.n	80a64ba <__aeabi_fdiv+0xc2>
 80a64c6:	ea40 000c 	orr.w	r0, r0, ip
 80a64ca:	f093 0f00 	teq	r3, #0
 80a64ce:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a64d2:	bf02      	ittt	eq
 80a64d4:	0049      	lsleq	r1, r1, #1
 80a64d6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a64da:	3b01      	subeq	r3, #1
 80a64dc:	d0f9      	beq.n	80a64d2 <__aeabi_fdiv+0xda>
 80a64de:	ea41 010c 	orr.w	r1, r1, ip
 80a64e2:	e795      	b.n	80a6410 <__aeabi_fdiv+0x18>
 80a64e4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a64e8:	ea92 0f0c 	teq	r2, ip
 80a64ec:	d108      	bne.n	80a6500 <__aeabi_fdiv+0x108>
 80a64ee:	0242      	lsls	r2, r0, #9
 80a64f0:	f47f af7d 	bne.w	80a63ee <__aeabi_fmul+0x15e>
 80a64f4:	ea93 0f0c 	teq	r3, ip
 80a64f8:	f47f af70 	bne.w	80a63dc <__aeabi_fmul+0x14c>
 80a64fc:	4608      	mov	r0, r1
 80a64fe:	e776      	b.n	80a63ee <__aeabi_fmul+0x15e>
 80a6500:	ea93 0f0c 	teq	r3, ip
 80a6504:	d104      	bne.n	80a6510 <__aeabi_fdiv+0x118>
 80a6506:	024b      	lsls	r3, r1, #9
 80a6508:	f43f af4c 	beq.w	80a63a4 <__aeabi_fmul+0x114>
 80a650c:	4608      	mov	r0, r1
 80a650e:	e76e      	b.n	80a63ee <__aeabi_fmul+0x15e>
 80a6510:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a6514:	bf18      	it	ne
 80a6516:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a651a:	d1ca      	bne.n	80a64b2 <__aeabi_fdiv+0xba>
 80a651c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80a6520:	f47f af5c 	bne.w	80a63dc <__aeabi_fmul+0x14c>
 80a6524:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80a6528:	f47f af3c 	bne.w	80a63a4 <__aeabi_fmul+0x114>
 80a652c:	e75f      	b.n	80a63ee <__aeabi_fmul+0x15e>
 80a652e:	bf00      	nop

080a6530 <__gesf2>:
 80a6530:	f04f 3cff 	mov.w	ip, #4294967295
 80a6534:	e006      	b.n	80a6544 <__cmpsf2+0x4>
 80a6536:	bf00      	nop

080a6538 <__lesf2>:
 80a6538:	f04f 0c01 	mov.w	ip, #1
 80a653c:	e002      	b.n	80a6544 <__cmpsf2+0x4>
 80a653e:	bf00      	nop

080a6540 <__cmpsf2>:
 80a6540:	f04f 0c01 	mov.w	ip, #1
 80a6544:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a6548:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a654c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a6550:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a6554:	bf18      	it	ne
 80a6556:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a655a:	d011      	beq.n	80a6580 <__cmpsf2+0x40>
 80a655c:	b001      	add	sp, #4
 80a655e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80a6562:	bf18      	it	ne
 80a6564:	ea90 0f01 	teqne	r0, r1
 80a6568:	bf58      	it	pl
 80a656a:	ebb2 0003 	subspl.w	r0, r2, r3
 80a656e:	bf88      	it	hi
 80a6570:	17c8      	asrhi	r0, r1, #31
 80a6572:	bf38      	it	cc
 80a6574:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80a6578:	bf18      	it	ne
 80a657a:	f040 0001 	orrne.w	r0, r0, #1
 80a657e:	4770      	bx	lr
 80a6580:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a6584:	d102      	bne.n	80a658c <__cmpsf2+0x4c>
 80a6586:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80a658a:	d105      	bne.n	80a6598 <__cmpsf2+0x58>
 80a658c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80a6590:	d1e4      	bne.n	80a655c <__cmpsf2+0x1c>
 80a6592:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80a6596:	d0e1      	beq.n	80a655c <__cmpsf2+0x1c>
 80a6598:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a659c:	4770      	bx	lr
 80a659e:	bf00      	nop

080a65a0 <__aeabi_cfrcmple>:
 80a65a0:	4684      	mov	ip, r0
 80a65a2:	4608      	mov	r0, r1
 80a65a4:	4661      	mov	r1, ip
 80a65a6:	e7ff      	b.n	80a65a8 <__aeabi_cfcmpeq>

080a65a8 <__aeabi_cfcmpeq>:
 80a65a8:	b50f      	push	{r0, r1, r2, r3, lr}
 80a65aa:	f7ff ffc9 	bl	80a6540 <__cmpsf2>
 80a65ae:	2800      	cmp	r0, #0
 80a65b0:	bf48      	it	mi
 80a65b2:	f110 0f00 	cmnmi.w	r0, #0
 80a65b6:	bd0f      	pop	{r0, r1, r2, r3, pc}

080a65b8 <__aeabi_fcmpeq>:
 80a65b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a65bc:	f7ff fff4 	bl	80a65a8 <__aeabi_cfcmpeq>
 80a65c0:	bf0c      	ite	eq
 80a65c2:	2001      	moveq	r0, #1
 80a65c4:	2000      	movne	r0, #0
 80a65c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80a65ca:	bf00      	nop

080a65cc <__aeabi_fcmplt>:
 80a65cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a65d0:	f7ff ffea 	bl	80a65a8 <__aeabi_cfcmpeq>
 80a65d4:	bf34      	ite	cc
 80a65d6:	2001      	movcc	r0, #1
 80a65d8:	2000      	movcs	r0, #0
 80a65da:	f85d fb08 	ldr.w	pc, [sp], #8
 80a65de:	bf00      	nop

080a65e0 <__aeabi_fcmple>:
 80a65e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a65e4:	f7ff ffe0 	bl	80a65a8 <__aeabi_cfcmpeq>
 80a65e8:	bf94      	ite	ls
 80a65ea:	2001      	movls	r0, #1
 80a65ec:	2000      	movhi	r0, #0
 80a65ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80a65f2:	bf00      	nop

080a65f4 <__aeabi_fcmpge>:
 80a65f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a65f8:	f7ff ffd2 	bl	80a65a0 <__aeabi_cfrcmple>
 80a65fc:	bf94      	ite	ls
 80a65fe:	2001      	movls	r0, #1
 80a6600:	2000      	movhi	r0, #0
 80a6602:	f85d fb08 	ldr.w	pc, [sp], #8
 80a6606:	bf00      	nop

080a6608 <__aeabi_fcmpgt>:
 80a6608:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a660c:	f7ff ffc8 	bl	80a65a0 <__aeabi_cfrcmple>
 80a6610:	bf34      	ite	cc
 80a6612:	2001      	movcc	r0, #1
 80a6614:	2000      	movcs	r0, #0
 80a6616:	f85d fb08 	ldr.w	pc, [sp], #8
 80a661a:	bf00      	nop

080a661c <__aeabi_uldivmod>:
 80a661c:	b953      	cbnz	r3, 80a6634 <__aeabi_uldivmod+0x18>
 80a661e:	b94a      	cbnz	r2, 80a6634 <__aeabi_uldivmod+0x18>
 80a6620:	2900      	cmp	r1, #0
 80a6622:	bf08      	it	eq
 80a6624:	2800      	cmpeq	r0, #0
 80a6626:	bf1c      	itt	ne
 80a6628:	f04f 31ff 	movne.w	r1, #4294967295
 80a662c:	f04f 30ff 	movne.w	r0, #4294967295
 80a6630:	f000 b9c0 	b.w	80a69b4 <__aeabi_idiv0>
 80a6634:	f1ad 0c08 	sub.w	ip, sp, #8
 80a6638:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80a663c:	f000 f858 	bl	80a66f0 <__udivmoddi4>
 80a6640:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a6644:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a6648:	b004      	add	sp, #16
 80a664a:	4770      	bx	lr

080a664c <__aeabi_f2lz>:
 80a664c:	b510      	push	{r4, lr}
 80a664e:	2100      	movs	r1, #0
 80a6650:	4604      	mov	r4, r0
 80a6652:	f7ff ffbb 	bl	80a65cc <__aeabi_fcmplt>
 80a6656:	b920      	cbnz	r0, 80a6662 <__aeabi_f2lz+0x16>
 80a6658:	4620      	mov	r0, r4
 80a665a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a665e:	f000 b809 	b.w	80a6674 <__aeabi_f2ulz>
 80a6662:	f104 4000 	add.w	r0, r4, #2147483648	; 0x80000000
 80a6666:	f000 f805 	bl	80a6674 <__aeabi_f2ulz>
 80a666a:	4240      	negs	r0, r0
 80a666c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a6670:	bd10      	pop	{r4, pc}
 80a6672:	bf00      	nop

080a6674 <__aeabi_f2ulz>:
 80a6674:	b5d0      	push	{r4, r6, r7, lr}
 80a6676:	f7ff f9ad 	bl	80a59d4 <__aeabi_f2d>
 80a667a:	2200      	movs	r2, #0
 80a667c:	4b0b      	ldr	r3, [pc, #44]	; (80a66ac <__aeabi_f2ulz+0x38>)
 80a667e:	4606      	mov	r6, r0
 80a6680:	460f      	mov	r7, r1
 80a6682:	f7ff f9ff 	bl	80a5a84 <__aeabi_dmul>
 80a6686:	f7ff fcd5 	bl	80a6034 <__aeabi_d2uiz>
 80a668a:	4604      	mov	r4, r0
 80a668c:	f7ff f980 	bl	80a5990 <__aeabi_ui2d>
 80a6690:	2200      	movs	r2, #0
 80a6692:	4b07      	ldr	r3, [pc, #28]	; (80a66b0 <__aeabi_f2ulz+0x3c>)
 80a6694:	f7ff f9f6 	bl	80a5a84 <__aeabi_dmul>
 80a6698:	4602      	mov	r2, r0
 80a669a:	460b      	mov	r3, r1
 80a669c:	4630      	mov	r0, r6
 80a669e:	4639      	mov	r1, r7
 80a66a0:	f7ff f838 	bl	80a5714 <__aeabi_dsub>
 80a66a4:	f7ff fcc6 	bl	80a6034 <__aeabi_d2uiz>
 80a66a8:	4621      	mov	r1, r4
 80a66aa:	bdd0      	pop	{r4, r6, r7, pc}
 80a66ac:	3df00000 	.word	0x3df00000
 80a66b0:	41f00000 	.word	0x41f00000

080a66b4 <__aeabi_d2ulz>:
 80a66b4:	b5d0      	push	{r4, r6, r7, lr}
 80a66b6:	2200      	movs	r2, #0
 80a66b8:	4b0b      	ldr	r3, [pc, #44]	; (80a66e8 <__aeabi_d2ulz+0x34>)
 80a66ba:	4606      	mov	r6, r0
 80a66bc:	460f      	mov	r7, r1
 80a66be:	f7ff f9e1 	bl	80a5a84 <__aeabi_dmul>
 80a66c2:	f7ff fcb7 	bl	80a6034 <__aeabi_d2uiz>
 80a66c6:	4604      	mov	r4, r0
 80a66c8:	f7ff f962 	bl	80a5990 <__aeabi_ui2d>
 80a66cc:	2200      	movs	r2, #0
 80a66ce:	4b07      	ldr	r3, [pc, #28]	; (80a66ec <__aeabi_d2ulz+0x38>)
 80a66d0:	f7ff f9d8 	bl	80a5a84 <__aeabi_dmul>
 80a66d4:	4602      	mov	r2, r0
 80a66d6:	460b      	mov	r3, r1
 80a66d8:	4630      	mov	r0, r6
 80a66da:	4639      	mov	r1, r7
 80a66dc:	f7ff f81a 	bl	80a5714 <__aeabi_dsub>
 80a66e0:	f7ff fca8 	bl	80a6034 <__aeabi_d2uiz>
 80a66e4:	4621      	mov	r1, r4
 80a66e6:	bdd0      	pop	{r4, r6, r7, pc}
 80a66e8:	3df00000 	.word	0x3df00000
 80a66ec:	41f00000 	.word	0x41f00000

080a66f0 <__udivmoddi4>:
 80a66f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a66f4:	9e08      	ldr	r6, [sp, #32]
 80a66f6:	460d      	mov	r5, r1
 80a66f8:	4604      	mov	r4, r0
 80a66fa:	468e      	mov	lr, r1
 80a66fc:	2b00      	cmp	r3, #0
 80a66fe:	f040 8083 	bne.w	80a6808 <__udivmoddi4+0x118>
 80a6702:	428a      	cmp	r2, r1
 80a6704:	4617      	mov	r7, r2
 80a6706:	d947      	bls.n	80a6798 <__udivmoddi4+0xa8>
 80a6708:	fab2 f382 	clz	r3, r2
 80a670c:	b14b      	cbz	r3, 80a6722 <__udivmoddi4+0x32>
 80a670e:	f1c3 0120 	rsb	r1, r3, #32
 80a6712:	fa05 fe03 	lsl.w	lr, r5, r3
 80a6716:	fa20 f101 	lsr.w	r1, r0, r1
 80a671a:	409f      	lsls	r7, r3
 80a671c:	ea41 0e0e 	orr.w	lr, r1, lr
 80a6720:	409c      	lsls	r4, r3
 80a6722:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80a6726:	fbbe fcf8 	udiv	ip, lr, r8
 80a672a:	fa1f f987 	uxth.w	r9, r7
 80a672e:	fb08 e21c 	mls	r2, r8, ip, lr
 80a6732:	fb0c f009 	mul.w	r0, ip, r9
 80a6736:	0c21      	lsrs	r1, r4, #16
 80a6738:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 80a673c:	4290      	cmp	r0, r2
 80a673e:	d90a      	bls.n	80a6756 <__udivmoddi4+0x66>
 80a6740:	18ba      	adds	r2, r7, r2
 80a6742:	f10c 31ff 	add.w	r1, ip, #4294967295
 80a6746:	f080 8118 	bcs.w	80a697a <__udivmoddi4+0x28a>
 80a674a:	4290      	cmp	r0, r2
 80a674c:	f240 8115 	bls.w	80a697a <__udivmoddi4+0x28a>
 80a6750:	f1ac 0c02 	sub.w	ip, ip, #2
 80a6754:	443a      	add	r2, r7
 80a6756:	1a12      	subs	r2, r2, r0
 80a6758:	fbb2 f0f8 	udiv	r0, r2, r8
 80a675c:	fb08 2210 	mls	r2, r8, r0, r2
 80a6760:	fb00 f109 	mul.w	r1, r0, r9
 80a6764:	b2a4      	uxth	r4, r4
 80a6766:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80a676a:	42a1      	cmp	r1, r4
 80a676c:	d909      	bls.n	80a6782 <__udivmoddi4+0x92>
 80a676e:	193c      	adds	r4, r7, r4
 80a6770:	f100 32ff 	add.w	r2, r0, #4294967295
 80a6774:	f080 8103 	bcs.w	80a697e <__udivmoddi4+0x28e>
 80a6778:	42a1      	cmp	r1, r4
 80a677a:	f240 8100 	bls.w	80a697e <__udivmoddi4+0x28e>
 80a677e:	3802      	subs	r0, #2
 80a6780:	443c      	add	r4, r7
 80a6782:	1a64      	subs	r4, r4, r1
 80a6784:	2100      	movs	r1, #0
 80a6786:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80a678a:	b11e      	cbz	r6, 80a6794 <__udivmoddi4+0xa4>
 80a678c:	2200      	movs	r2, #0
 80a678e:	40dc      	lsrs	r4, r3
 80a6790:	e9c6 4200 	strd	r4, r2, [r6]
 80a6794:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a6798:	b902      	cbnz	r2, 80a679c <__udivmoddi4+0xac>
 80a679a:	deff      	udf	#255	; 0xff
 80a679c:	fab2 f382 	clz	r3, r2
 80a67a0:	2b00      	cmp	r3, #0
 80a67a2:	d14f      	bne.n	80a6844 <__udivmoddi4+0x154>
 80a67a4:	1a8d      	subs	r5, r1, r2
 80a67a6:	2101      	movs	r1, #1
 80a67a8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80a67ac:	fa1f f882 	uxth.w	r8, r2
 80a67b0:	fbb5 fcfe 	udiv	ip, r5, lr
 80a67b4:	fb0e 551c 	mls	r5, lr, ip, r5
 80a67b8:	fb08 f00c 	mul.w	r0, r8, ip
 80a67bc:	0c22      	lsrs	r2, r4, #16
 80a67be:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 80a67c2:	42a8      	cmp	r0, r5
 80a67c4:	d907      	bls.n	80a67d6 <__udivmoddi4+0xe6>
 80a67c6:	197d      	adds	r5, r7, r5
 80a67c8:	f10c 32ff 	add.w	r2, ip, #4294967295
 80a67cc:	d202      	bcs.n	80a67d4 <__udivmoddi4+0xe4>
 80a67ce:	42a8      	cmp	r0, r5
 80a67d0:	f200 80e9 	bhi.w	80a69a6 <__udivmoddi4+0x2b6>
 80a67d4:	4694      	mov	ip, r2
 80a67d6:	1a2d      	subs	r5, r5, r0
 80a67d8:	fbb5 f0fe 	udiv	r0, r5, lr
 80a67dc:	fb0e 5510 	mls	r5, lr, r0, r5
 80a67e0:	fb08 f800 	mul.w	r8, r8, r0
 80a67e4:	b2a4      	uxth	r4, r4
 80a67e6:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80a67ea:	45a0      	cmp	r8, r4
 80a67ec:	d907      	bls.n	80a67fe <__udivmoddi4+0x10e>
 80a67ee:	193c      	adds	r4, r7, r4
 80a67f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80a67f4:	d202      	bcs.n	80a67fc <__udivmoddi4+0x10c>
 80a67f6:	45a0      	cmp	r8, r4
 80a67f8:	f200 80d9 	bhi.w	80a69ae <__udivmoddi4+0x2be>
 80a67fc:	4610      	mov	r0, r2
 80a67fe:	eba4 0408 	sub.w	r4, r4, r8
 80a6802:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80a6806:	e7c0      	b.n	80a678a <__udivmoddi4+0x9a>
 80a6808:	428b      	cmp	r3, r1
 80a680a:	d908      	bls.n	80a681e <__udivmoddi4+0x12e>
 80a680c:	2e00      	cmp	r6, #0
 80a680e:	f000 80b1 	beq.w	80a6974 <__udivmoddi4+0x284>
 80a6812:	2100      	movs	r1, #0
 80a6814:	e9c6 0500 	strd	r0, r5, [r6]
 80a6818:	4608      	mov	r0, r1
 80a681a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a681e:	fab3 f183 	clz	r1, r3
 80a6822:	2900      	cmp	r1, #0
 80a6824:	d14b      	bne.n	80a68be <__udivmoddi4+0x1ce>
 80a6826:	42ab      	cmp	r3, r5
 80a6828:	d302      	bcc.n	80a6830 <__udivmoddi4+0x140>
 80a682a:	4282      	cmp	r2, r0
 80a682c:	f200 80b9 	bhi.w	80a69a2 <__udivmoddi4+0x2b2>
 80a6830:	1a84      	subs	r4, r0, r2
 80a6832:	eb65 0303 	sbc.w	r3, r5, r3
 80a6836:	2001      	movs	r0, #1
 80a6838:	469e      	mov	lr, r3
 80a683a:	2e00      	cmp	r6, #0
 80a683c:	d0aa      	beq.n	80a6794 <__udivmoddi4+0xa4>
 80a683e:	e9c6 4e00 	strd	r4, lr, [r6]
 80a6842:	e7a7      	b.n	80a6794 <__udivmoddi4+0xa4>
 80a6844:	409f      	lsls	r7, r3
 80a6846:	f1c3 0220 	rsb	r2, r3, #32
 80a684a:	40d1      	lsrs	r1, r2
 80a684c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80a6850:	fbb1 f0fe 	udiv	r0, r1, lr
 80a6854:	fa1f f887 	uxth.w	r8, r7
 80a6858:	fb0e 1110 	mls	r1, lr, r0, r1
 80a685c:	fa24 f202 	lsr.w	r2, r4, r2
 80a6860:	409d      	lsls	r5, r3
 80a6862:	fb00 fc08 	mul.w	ip, r0, r8
 80a6866:	432a      	orrs	r2, r5
 80a6868:	0c15      	lsrs	r5, r2, #16
 80a686a:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 80a686e:	45ac      	cmp	ip, r5
 80a6870:	fa04 f403 	lsl.w	r4, r4, r3
 80a6874:	d909      	bls.n	80a688a <__udivmoddi4+0x19a>
 80a6876:	197d      	adds	r5, r7, r5
 80a6878:	f100 31ff 	add.w	r1, r0, #4294967295
 80a687c:	f080 808f 	bcs.w	80a699e <__udivmoddi4+0x2ae>
 80a6880:	45ac      	cmp	ip, r5
 80a6882:	f240 808c 	bls.w	80a699e <__udivmoddi4+0x2ae>
 80a6886:	3802      	subs	r0, #2
 80a6888:	443d      	add	r5, r7
 80a688a:	eba5 050c 	sub.w	r5, r5, ip
 80a688e:	fbb5 f1fe 	udiv	r1, r5, lr
 80a6892:	fb0e 5c11 	mls	ip, lr, r1, r5
 80a6896:	fb01 f908 	mul.w	r9, r1, r8
 80a689a:	b295      	uxth	r5, r2
 80a689c:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80a68a0:	45a9      	cmp	r9, r5
 80a68a2:	d907      	bls.n	80a68b4 <__udivmoddi4+0x1c4>
 80a68a4:	197d      	adds	r5, r7, r5
 80a68a6:	f101 32ff 	add.w	r2, r1, #4294967295
 80a68aa:	d274      	bcs.n	80a6996 <__udivmoddi4+0x2a6>
 80a68ac:	45a9      	cmp	r9, r5
 80a68ae:	d972      	bls.n	80a6996 <__udivmoddi4+0x2a6>
 80a68b0:	3902      	subs	r1, #2
 80a68b2:	443d      	add	r5, r7
 80a68b4:	eba5 0509 	sub.w	r5, r5, r9
 80a68b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80a68bc:	e778      	b.n	80a67b0 <__udivmoddi4+0xc0>
 80a68be:	f1c1 0720 	rsb	r7, r1, #32
 80a68c2:	408b      	lsls	r3, r1
 80a68c4:	fa22 fc07 	lsr.w	ip, r2, r7
 80a68c8:	ea4c 0c03 	orr.w	ip, ip, r3
 80a68cc:	fa25 f407 	lsr.w	r4, r5, r7
 80a68d0:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80a68d4:	fbb4 f9fe 	udiv	r9, r4, lr
 80a68d8:	fa1f f88c 	uxth.w	r8, ip
 80a68dc:	fb0e 4419 	mls	r4, lr, r9, r4
 80a68e0:	fa20 f307 	lsr.w	r3, r0, r7
 80a68e4:	fb09 fa08 	mul.w	sl, r9, r8
 80a68e8:	408d      	lsls	r5, r1
 80a68ea:	431d      	orrs	r5, r3
 80a68ec:	0c2b      	lsrs	r3, r5, #16
 80a68ee:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80a68f2:	45a2      	cmp	sl, r4
 80a68f4:	fa02 f201 	lsl.w	r2, r2, r1
 80a68f8:	fa00 f301 	lsl.w	r3, r0, r1
 80a68fc:	d909      	bls.n	80a6912 <__udivmoddi4+0x222>
 80a68fe:	eb1c 0404 	adds.w	r4, ip, r4
 80a6902:	f109 30ff 	add.w	r0, r9, #4294967295
 80a6906:	d248      	bcs.n	80a699a <__udivmoddi4+0x2aa>
 80a6908:	45a2      	cmp	sl, r4
 80a690a:	d946      	bls.n	80a699a <__udivmoddi4+0x2aa>
 80a690c:	f1a9 0902 	sub.w	r9, r9, #2
 80a6910:	4464      	add	r4, ip
 80a6912:	eba4 040a 	sub.w	r4, r4, sl
 80a6916:	fbb4 f0fe 	udiv	r0, r4, lr
 80a691a:	fb0e 4410 	mls	r4, lr, r0, r4
 80a691e:	fb00 fa08 	mul.w	sl, r0, r8
 80a6922:	b2ad      	uxth	r5, r5
 80a6924:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80a6928:	45a2      	cmp	sl, r4
 80a692a:	d908      	bls.n	80a693e <__udivmoddi4+0x24e>
 80a692c:	eb1c 0404 	adds.w	r4, ip, r4
 80a6930:	f100 35ff 	add.w	r5, r0, #4294967295
 80a6934:	d22d      	bcs.n	80a6992 <__udivmoddi4+0x2a2>
 80a6936:	45a2      	cmp	sl, r4
 80a6938:	d92b      	bls.n	80a6992 <__udivmoddi4+0x2a2>
 80a693a:	3802      	subs	r0, #2
 80a693c:	4464      	add	r4, ip
 80a693e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80a6942:	fba0 8902 	umull	r8, r9, r0, r2
 80a6946:	eba4 040a 	sub.w	r4, r4, sl
 80a694a:	454c      	cmp	r4, r9
 80a694c:	46c6      	mov	lr, r8
 80a694e:	464d      	mov	r5, r9
 80a6950:	d319      	bcc.n	80a6986 <__udivmoddi4+0x296>
 80a6952:	d016      	beq.n	80a6982 <__udivmoddi4+0x292>
 80a6954:	b15e      	cbz	r6, 80a696e <__udivmoddi4+0x27e>
 80a6956:	ebb3 020e 	subs.w	r2, r3, lr
 80a695a:	eb64 0405 	sbc.w	r4, r4, r5
 80a695e:	fa04 f707 	lsl.w	r7, r4, r7
 80a6962:	fa22 f301 	lsr.w	r3, r2, r1
 80a6966:	431f      	orrs	r7, r3
 80a6968:	40cc      	lsrs	r4, r1
 80a696a:	e9c6 7400 	strd	r7, r4, [r6]
 80a696e:	2100      	movs	r1, #0
 80a6970:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a6974:	4631      	mov	r1, r6
 80a6976:	4630      	mov	r0, r6
 80a6978:	e70c      	b.n	80a6794 <__udivmoddi4+0xa4>
 80a697a:	468c      	mov	ip, r1
 80a697c:	e6eb      	b.n	80a6756 <__udivmoddi4+0x66>
 80a697e:	4610      	mov	r0, r2
 80a6980:	e6ff      	b.n	80a6782 <__udivmoddi4+0x92>
 80a6982:	4543      	cmp	r3, r8
 80a6984:	d2e6      	bcs.n	80a6954 <__udivmoddi4+0x264>
 80a6986:	ebb8 0e02 	subs.w	lr, r8, r2
 80a698a:	eb69 050c 	sbc.w	r5, r9, ip
 80a698e:	3801      	subs	r0, #1
 80a6990:	e7e0      	b.n	80a6954 <__udivmoddi4+0x264>
 80a6992:	4628      	mov	r0, r5
 80a6994:	e7d3      	b.n	80a693e <__udivmoddi4+0x24e>
 80a6996:	4611      	mov	r1, r2
 80a6998:	e78c      	b.n	80a68b4 <__udivmoddi4+0x1c4>
 80a699a:	4681      	mov	r9, r0
 80a699c:	e7b9      	b.n	80a6912 <__udivmoddi4+0x222>
 80a699e:	4608      	mov	r0, r1
 80a69a0:	e773      	b.n	80a688a <__udivmoddi4+0x19a>
 80a69a2:	4608      	mov	r0, r1
 80a69a4:	e749      	b.n	80a683a <__udivmoddi4+0x14a>
 80a69a6:	f1ac 0c02 	sub.w	ip, ip, #2
 80a69aa:	443d      	add	r5, r7
 80a69ac:	e713      	b.n	80a67d6 <__udivmoddi4+0xe6>
 80a69ae:	3802      	subs	r0, #2
 80a69b0:	443c      	add	r4, r7
 80a69b2:	e724      	b.n	80a67fe <__udivmoddi4+0x10e>

080a69b4 <__aeabi_idiv0>:
 80a69b4:	4770      	bx	lr
 80a69b6:	bf00      	nop

080a69b8 <asctime_r>:
 80a69b8:	b510      	push	{r4, lr}
 80a69ba:	460c      	mov	r4, r1
 80a69bc:	6941      	ldr	r1, [r0, #20]
 80a69be:	b086      	sub	sp, #24
 80a69c0:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 80a69c4:	6903      	ldr	r3, [r0, #16]
 80a69c6:	6982      	ldr	r2, [r0, #24]
 80a69c8:	9104      	str	r1, [sp, #16]
 80a69ca:	6801      	ldr	r1, [r0, #0]
 80a69cc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80a69d0:	9103      	str	r1, [sp, #12]
 80a69d2:	6841      	ldr	r1, [r0, #4]
 80a69d4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80a69d8:	9102      	str	r1, [sp, #8]
 80a69da:	6881      	ldr	r1, [r0, #8]
 80a69dc:	9101      	str	r1, [sp, #4]
 80a69de:	68c1      	ldr	r1, [r0, #12]
 80a69e0:	4620      	mov	r0, r4
 80a69e2:	9100      	str	r1, [sp, #0]
 80a69e4:	4904      	ldr	r1, [pc, #16]	; (80a69f8 <asctime_r+0x40>)
 80a69e6:	440b      	add	r3, r1
 80a69e8:	4904      	ldr	r1, [pc, #16]	; (80a69fc <asctime_r+0x44>)
 80a69ea:	440a      	add	r2, r1
 80a69ec:	4904      	ldr	r1, [pc, #16]	; (80a6a00 <asctime_r+0x48>)
 80a69ee:	f7fd f801 	bl	80a39f4 <siprintf>
 80a69f2:	4620      	mov	r0, r4
 80a69f4:	b006      	add	sp, #24
 80a69f6:	bd10      	pop	{r4, pc}
 80a69f8:	080a8a8e 	.word	0x080a8a8e
 80a69fc:	080a8a79 	.word	0x080a8a79
 80a6a00:	080a8a59 	.word	0x080a8a59

080a6a04 <atol>:
 80a6a04:	220a      	movs	r2, #10
 80a6a06:	2100      	movs	r1, #0
 80a6a08:	f000 bf5a 	b.w	80a78c0 <strtol>

080a6a0c <__cxa_atexit>:
 80a6a0c:	b510      	push	{r4, lr}
 80a6a0e:	4604      	mov	r4, r0
 80a6a10:	4804      	ldr	r0, [pc, #16]	; (80a6a24 <__cxa_atexit+0x18>)
 80a6a12:	4613      	mov	r3, r2
 80a6a14:	b120      	cbz	r0, 80a6a20 <__cxa_atexit+0x14>
 80a6a16:	460a      	mov	r2, r1
 80a6a18:	2002      	movs	r0, #2
 80a6a1a:	4621      	mov	r1, r4
 80a6a1c:	f3af 8000 	nop.w
 80a6a20:	bd10      	pop	{r4, pc}
 80a6a22:	bf00      	nop
 80a6a24:	00000000 	.word	0x00000000

080a6a28 <localtime_r>:
 80a6a28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a6a2c:	460c      	mov	r4, r1
 80a6a2e:	4607      	mov	r7, r0
 80a6a30:	f001 fa56 	bl	80a7ee0 <__gettzinfo>
 80a6a34:	4621      	mov	r1, r4
 80a6a36:	4680      	mov	r8, r0
 80a6a38:	4638      	mov	r0, r7
 80a6a3a:	f001 fa55 	bl	80a7ee8 <gmtime_r>
 80a6a3e:	6943      	ldr	r3, [r0, #20]
 80a6a40:	4604      	mov	r4, r0
 80a6a42:	079a      	lsls	r2, r3, #30
 80a6a44:	f203 766c 	addw	r6, r3, #1900	; 0x76c
 80a6a48:	d105      	bne.n	80a6a56 <localtime_r+0x2e>
 80a6a4a:	2264      	movs	r2, #100	; 0x64
 80a6a4c:	fb96 f3f2 	sdiv	r3, r6, r2
 80a6a50:	fb02 6313 	mls	r3, r2, r3, r6
 80a6a54:	bb7b      	cbnz	r3, 80a6ab6 <localtime_r+0x8e>
 80a6a56:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80a6a5a:	fb96 f5f3 	sdiv	r5, r6, r3
 80a6a5e:	fb03 6515 	mls	r5, r3, r5, r6
 80a6a62:	fab5 f585 	clz	r5, r5
 80a6a66:	096d      	lsrs	r5, r5, #5
 80a6a68:	2230      	movs	r2, #48	; 0x30
 80a6a6a:	4b68      	ldr	r3, [pc, #416]	; (80a6c0c <localtime_r+0x1e4>)
 80a6a6c:	fb02 3505 	mla	r5, r2, r5, r3
 80a6a70:	f001 f85e 	bl	80a7b30 <__tz_lock>
 80a6a74:	f001 f868 	bl	80a7b48 <_tzset_unlocked>
 80a6a78:	4b65      	ldr	r3, [pc, #404]	; (80a6c10 <localtime_r+0x1e8>)
 80a6a7a:	681b      	ldr	r3, [r3, #0]
 80a6a7c:	b353      	cbz	r3, 80a6ad4 <localtime_r+0xac>
 80a6a7e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80a6a82:	42b3      	cmp	r3, r6
 80a6a84:	d119      	bne.n	80a6aba <localtime_r+0x92>
 80a6a86:	e9d7 6700 	ldrd	r6, r7, [r7]
 80a6a8a:	e9d8 2308 	ldrd	r2, r3, [r8, #32]
 80a6a8e:	f8d8 1000 	ldr.w	r1, [r8]
 80a6a92:	b9d1      	cbnz	r1, 80a6aca <localtime_r+0xa2>
 80a6a94:	4296      	cmp	r6, r2
 80a6a96:	eb77 0303 	sbcs.w	r3, r7, r3
 80a6a9a:	da23      	bge.n	80a6ae4 <localtime_r+0xbc>
 80a6a9c:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 80a6aa0:	4296      	cmp	r6, r2
 80a6aa2:	eb77 0303 	sbcs.w	r3, r7, r3
 80a6aa6:	bfb4      	ite	lt
 80a6aa8:	2301      	movlt	r3, #1
 80a6aaa:	2300      	movge	r3, #0
 80a6aac:	6223      	str	r3, [r4, #32]
 80a6aae:	db1b      	blt.n	80a6ae8 <localtime_r+0xc0>
 80a6ab0:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
 80a6ab4:	e01a      	b.n	80a6aec <localtime_r+0xc4>
 80a6ab6:	2501      	movs	r5, #1
 80a6ab8:	e7d6      	b.n	80a6a68 <localtime_r+0x40>
 80a6aba:	4630      	mov	r0, r6
 80a6abc:	f000 ff90 	bl	80a79e0 <__tzcalc_limits>
 80a6ac0:	2800      	cmp	r0, #0
 80a6ac2:	d1e0      	bne.n	80a6a86 <localtime_r+0x5e>
 80a6ac4:	f04f 33ff 	mov.w	r3, #4294967295
 80a6ac8:	e004      	b.n	80a6ad4 <localtime_r+0xac>
 80a6aca:	4296      	cmp	r6, r2
 80a6acc:	eb77 0303 	sbcs.w	r3, r7, r3
 80a6ad0:	da02      	bge.n	80a6ad8 <localtime_r+0xb0>
 80a6ad2:	2300      	movs	r3, #0
 80a6ad4:	6223      	str	r3, [r4, #32]
 80a6ad6:	e7eb      	b.n	80a6ab0 <localtime_r+0x88>
 80a6ad8:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 80a6adc:	4296      	cmp	r6, r2
 80a6ade:	eb77 0303 	sbcs.w	r3, r7, r3
 80a6ae2:	daf6      	bge.n	80a6ad2 <localtime_r+0xaa>
 80a6ae4:	2301      	movs	r3, #1
 80a6ae6:	6223      	str	r3, [r4, #32]
 80a6ae8:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
 80a6aec:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80a6af0:	fb91 f6f3 	sdiv	r6, r1, r3
 80a6af4:	203c      	movs	r0, #60	; 0x3c
 80a6af6:	fb03 1316 	mls	r3, r3, r6, r1
 80a6afa:	fb93 f2f0 	sdiv	r2, r3, r0
 80a6afe:	fb00 3012 	mls	r0, r0, r2, r3
 80a6b02:	6861      	ldr	r1, [r4, #4]
 80a6b04:	6823      	ldr	r3, [r4, #0]
 80a6b06:	1a89      	subs	r1, r1, r2
 80a6b08:	68a2      	ldr	r2, [r4, #8]
 80a6b0a:	1a1b      	subs	r3, r3, r0
 80a6b0c:	1b92      	subs	r2, r2, r6
 80a6b0e:	2b3b      	cmp	r3, #59	; 0x3b
 80a6b10:	6023      	str	r3, [r4, #0]
 80a6b12:	6061      	str	r1, [r4, #4]
 80a6b14:	60a2      	str	r2, [r4, #8]
 80a6b16:	dd34      	ble.n	80a6b82 <localtime_r+0x15a>
 80a6b18:	3101      	adds	r1, #1
 80a6b1a:	6061      	str	r1, [r4, #4]
 80a6b1c:	3b3c      	subs	r3, #60	; 0x3c
 80a6b1e:	6023      	str	r3, [r4, #0]
 80a6b20:	6863      	ldr	r3, [r4, #4]
 80a6b22:	2b3b      	cmp	r3, #59	; 0x3b
 80a6b24:	dd33      	ble.n	80a6b8e <localtime_r+0x166>
 80a6b26:	3201      	adds	r2, #1
 80a6b28:	60a2      	str	r2, [r4, #8]
 80a6b2a:	3b3c      	subs	r3, #60	; 0x3c
 80a6b2c:	6063      	str	r3, [r4, #4]
 80a6b2e:	68a3      	ldr	r3, [r4, #8]
 80a6b30:	2b17      	cmp	r3, #23
 80a6b32:	dd32      	ble.n	80a6b9a <localtime_r+0x172>
 80a6b34:	69e2      	ldr	r2, [r4, #28]
 80a6b36:	3b18      	subs	r3, #24
 80a6b38:	3201      	adds	r2, #1
 80a6b3a:	61e2      	str	r2, [r4, #28]
 80a6b3c:	69a2      	ldr	r2, [r4, #24]
 80a6b3e:	60a3      	str	r3, [r4, #8]
 80a6b40:	3201      	adds	r2, #1
 80a6b42:	2a06      	cmp	r2, #6
 80a6b44:	bfc8      	it	gt
 80a6b46:	2200      	movgt	r2, #0
 80a6b48:	61a2      	str	r2, [r4, #24]
 80a6b4a:	68e2      	ldr	r2, [r4, #12]
 80a6b4c:	6923      	ldr	r3, [r4, #16]
 80a6b4e:	3201      	adds	r2, #1
 80a6b50:	60e2      	str	r2, [r4, #12]
 80a6b52:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 80a6b56:	428a      	cmp	r2, r1
 80a6b58:	dd0e      	ble.n	80a6b78 <localtime_r+0x150>
 80a6b5a:	2b0b      	cmp	r3, #11
 80a6b5c:	eba2 0201 	sub.w	r2, r2, r1
 80a6b60:	60e2      	str	r2, [r4, #12]
 80a6b62:	f103 0201 	add.w	r2, r3, #1
 80a6b66:	bf05      	ittet	eq
 80a6b68:	2200      	moveq	r2, #0
 80a6b6a:	6963      	ldreq	r3, [r4, #20]
 80a6b6c:	6122      	strne	r2, [r4, #16]
 80a6b6e:	3301      	addeq	r3, #1
 80a6b70:	bf02      	ittt	eq
 80a6b72:	6122      	streq	r2, [r4, #16]
 80a6b74:	6163      	streq	r3, [r4, #20]
 80a6b76:	61e2      	streq	r2, [r4, #28]
 80a6b78:	f000 ffe0 	bl	80a7b3c <__tz_unlock>
 80a6b7c:	4620      	mov	r0, r4
 80a6b7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a6b82:	2b00      	cmp	r3, #0
 80a6b84:	dacc      	bge.n	80a6b20 <localtime_r+0xf8>
 80a6b86:	3901      	subs	r1, #1
 80a6b88:	6061      	str	r1, [r4, #4]
 80a6b8a:	333c      	adds	r3, #60	; 0x3c
 80a6b8c:	e7c7      	b.n	80a6b1e <localtime_r+0xf6>
 80a6b8e:	2b00      	cmp	r3, #0
 80a6b90:	dacd      	bge.n	80a6b2e <localtime_r+0x106>
 80a6b92:	3a01      	subs	r2, #1
 80a6b94:	60a2      	str	r2, [r4, #8]
 80a6b96:	333c      	adds	r3, #60	; 0x3c
 80a6b98:	e7c8      	b.n	80a6b2c <localtime_r+0x104>
 80a6b9a:	2b00      	cmp	r3, #0
 80a6b9c:	daec      	bge.n	80a6b78 <localtime_r+0x150>
 80a6b9e:	69e2      	ldr	r2, [r4, #28]
 80a6ba0:	3318      	adds	r3, #24
 80a6ba2:	3a01      	subs	r2, #1
 80a6ba4:	61e2      	str	r2, [r4, #28]
 80a6ba6:	69a2      	ldr	r2, [r4, #24]
 80a6ba8:	60a3      	str	r3, [r4, #8]
 80a6baa:	3a01      	subs	r2, #1
 80a6bac:	bf48      	it	mi
 80a6bae:	2206      	movmi	r2, #6
 80a6bb0:	61a2      	str	r2, [r4, #24]
 80a6bb2:	68e2      	ldr	r2, [r4, #12]
 80a6bb4:	3a01      	subs	r2, #1
 80a6bb6:	60e2      	str	r2, [r4, #12]
 80a6bb8:	2a00      	cmp	r2, #0
 80a6bba:	d1dd      	bne.n	80a6b78 <localtime_r+0x150>
 80a6bbc:	6923      	ldr	r3, [r4, #16]
 80a6bbe:	3b01      	subs	r3, #1
 80a6bc0:	d405      	bmi.n	80a6bce <localtime_r+0x1a6>
 80a6bc2:	6123      	str	r3, [r4, #16]
 80a6bc4:	6923      	ldr	r3, [r4, #16]
 80a6bc6:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80a6bca:	60e3      	str	r3, [r4, #12]
 80a6bcc:	e7d4      	b.n	80a6b78 <localtime_r+0x150>
 80a6bce:	230b      	movs	r3, #11
 80a6bd0:	6123      	str	r3, [r4, #16]
 80a6bd2:	6963      	ldr	r3, [r4, #20]
 80a6bd4:	1e5a      	subs	r2, r3, #1
 80a6bd6:	6162      	str	r2, [r4, #20]
 80a6bd8:	f203 726b 	addw	r2, r3, #1899	; 0x76b
 80a6bdc:	0793      	lsls	r3, r2, #30
 80a6bde:	d105      	bne.n	80a6bec <localtime_r+0x1c4>
 80a6be0:	2164      	movs	r1, #100	; 0x64
 80a6be2:	fb92 f3f1 	sdiv	r3, r2, r1
 80a6be6:	fb01 2313 	mls	r3, r1, r3, r2
 80a6bea:	b963      	cbnz	r3, 80a6c06 <localtime_r+0x1de>
 80a6bec:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80a6bf0:	fb92 f3f1 	sdiv	r3, r2, r1
 80a6bf4:	fb01 2313 	mls	r3, r1, r3, r2
 80a6bf8:	fab3 f383 	clz	r3, r3
 80a6bfc:	095b      	lsrs	r3, r3, #5
 80a6bfe:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 80a6c02:	61e3      	str	r3, [r4, #28]
 80a6c04:	e7de      	b.n	80a6bc4 <localtime_r+0x19c>
 80a6c06:	2301      	movs	r3, #1
 80a6c08:	e7f9      	b.n	80a6bfe <localtime_r+0x1d6>
 80a6c0a:	bf00      	nop
 80a6c0c:	080a8ab4 	.word	0x080a8ab4
 80a6c10:	20000650 	.word	0x20000650

080a6c14 <memcpy>:
 80a6c14:	440a      	add	r2, r1
 80a6c16:	4291      	cmp	r1, r2
 80a6c18:	f100 33ff 	add.w	r3, r0, #4294967295
 80a6c1c:	d100      	bne.n	80a6c20 <memcpy+0xc>
 80a6c1e:	4770      	bx	lr
 80a6c20:	b510      	push	{r4, lr}
 80a6c22:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a6c26:	4291      	cmp	r1, r2
 80a6c28:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a6c2c:	d1f9      	bne.n	80a6c22 <memcpy+0xe>
 80a6c2e:	bd10      	pop	{r4, pc}

080a6c30 <memset>:
 80a6c30:	4603      	mov	r3, r0
 80a6c32:	4402      	add	r2, r0
 80a6c34:	4293      	cmp	r3, r2
 80a6c36:	d100      	bne.n	80a6c3a <memset+0xa>
 80a6c38:	4770      	bx	lr
 80a6c3a:	f803 1b01 	strb.w	r1, [r3], #1
 80a6c3e:	e7f9      	b.n	80a6c34 <memset+0x4>

080a6c40 <srand>:
 80a6c40:	b538      	push	{r3, r4, r5, lr}
 80a6c42:	4b0d      	ldr	r3, [pc, #52]	; (80a6c78 <srand+0x38>)
 80a6c44:	4604      	mov	r4, r0
 80a6c46:	681d      	ldr	r5, [r3, #0]
 80a6c48:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a6c4a:	b97b      	cbnz	r3, 80a6c6c <srand+0x2c>
 80a6c4c:	2018      	movs	r0, #24
 80a6c4e:	f7fc feb9 	bl	80a39c4 <malloc>
 80a6c52:	4a0a      	ldr	r2, [pc, #40]	; (80a6c7c <srand+0x3c>)
 80a6c54:	4b0a      	ldr	r3, [pc, #40]	; (80a6c80 <srand+0x40>)
 80a6c56:	63a8      	str	r0, [r5, #56]	; 0x38
 80a6c58:	e9c0 2300 	strd	r2, r3, [r0]
 80a6c5c:	4b09      	ldr	r3, [pc, #36]	; (80a6c84 <srand+0x44>)
 80a6c5e:	2201      	movs	r2, #1
 80a6c60:	6083      	str	r3, [r0, #8]
 80a6c62:	230b      	movs	r3, #11
 80a6c64:	8183      	strh	r3, [r0, #12]
 80a6c66:	2300      	movs	r3, #0
 80a6c68:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a6c6c:	2200      	movs	r2, #0
 80a6c6e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a6c70:	611c      	str	r4, [r3, #16]
 80a6c72:	615a      	str	r2, [r3, #20]
 80a6c74:	bd38      	pop	{r3, r4, r5, pc}
 80a6c76:	bf00      	nop
 80a6c78:	2000000c 	.word	0x2000000c
 80a6c7c:	abcd330e 	.word	0xabcd330e
 80a6c80:	e66d1234 	.word	0xe66d1234
 80a6c84:	0005deec 	.word	0x0005deec

080a6c88 <strcmp>:
 80a6c88:	f810 2b01 	ldrb.w	r2, [r0], #1
 80a6c8c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80a6c90:	2a01      	cmp	r2, #1
 80a6c92:	bf28      	it	cs
 80a6c94:	429a      	cmpcs	r2, r3
 80a6c96:	d0f7      	beq.n	80a6c88 <strcmp>
 80a6c98:	1ad0      	subs	r0, r2, r3
 80a6c9a:	4770      	bx	lr

080a6c9c <strcpy>:
 80a6c9c:	4603      	mov	r3, r0
 80a6c9e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80a6ca2:	f803 2b01 	strb.w	r2, [r3], #1
 80a6ca6:	2a00      	cmp	r2, #0
 80a6ca8:	d1f9      	bne.n	80a6c9e <strcpy+0x2>
 80a6caa:	4770      	bx	lr

080a6cac <iso_year_adjust>:
 80a6cac:	6941      	ldr	r1, [r0, #20]
 80a6cae:	f240 736c 	movw	r3, #1900	; 0x76c
 80a6cb2:	2900      	cmp	r1, #0
 80a6cb4:	bfa8      	it	ge
 80a6cb6:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 80a6cba:	18ca      	adds	r2, r1, r3
 80a6cbc:	078b      	lsls	r3, r1, #30
 80a6cbe:	d105      	bne.n	80a6ccc <iso_year_adjust+0x20>
 80a6cc0:	2164      	movs	r1, #100	; 0x64
 80a6cc2:	fb92 f3f1 	sdiv	r3, r2, r1
 80a6cc6:	fb01 2313 	mls	r3, r1, r3, r2
 80a6cca:	b9db      	cbnz	r3, 80a6d04 <iso_year_adjust+0x58>
 80a6ccc:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80a6cd0:	fb92 f3f1 	sdiv	r3, r2, r1
 80a6cd4:	fb01 2313 	mls	r3, r1, r3, r2
 80a6cd8:	fab3 f383 	clz	r3, r3
 80a6cdc:	095b      	lsrs	r3, r3, #5
 80a6cde:	e9d0 0206 	ldrd	r0, r2, [r0, #24]
 80a6ce2:	0040      	lsls	r0, r0, #1
 80a6ce4:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 80a6ce8:	4418      	add	r0, r3
 80a6cea:	f241 63a2 	movw	r3, #5794	; 0x16a2
 80a6cee:	4298      	cmp	r0, r3
 80a6cf0:	d03a      	beq.n	80a6d68 <iso_year_adjust+0xbc>
 80a6cf2:	dc21      	bgt.n	80a6d38 <iso_year_adjust+0x8c>
 80a6cf4:	2801      	cmp	r0, #1
 80a6cf6:	dc1a      	bgt.n	80a6d2e <iso_year_adjust+0x82>
 80a6cf8:	2800      	cmp	r0, #0
 80a6cfa:	bfb4      	ite	lt
 80a6cfc:	2000      	movlt	r0, #0
 80a6cfe:	f04f 30ff 	movge.w	r0, #4294967295
 80a6d02:	4770      	bx	lr
 80a6d04:	2301      	movs	r3, #1
 80a6d06:	e7ea      	b.n	80a6cde <iso_year_adjust+0x32>
 80a6d08:	2817      	cmp	r0, #23
 80a6d0a:	d813      	bhi.n	80a6d34 <iso_year_adjust+0x88>
 80a6d0c:	e8df f000 	tbb	[pc, r0]
 80a6d10:	0c0c0c0c 	.word	0x0c0c0c0c
 80a6d14:	0c0c1212 	.word	0x0c0c1212
 80a6d18:	12121212 	.word	0x12121212
 80a6d1c:	12121212 	.word	0x12121212
 80a6d20:	0c0c1212 	.word	0x0c0c1212
 80a6d24:	0c0c1212 	.word	0x0c0c1212
 80a6d28:	f04f 30ff 	mov.w	r0, #4294967295
 80a6d2c:	4770      	bx	lr
 80a6d2e:	380a      	subs	r0, #10
 80a6d30:	2817      	cmp	r0, #23
 80a6d32:	d9e9      	bls.n	80a6d08 <iso_year_adjust+0x5c>
 80a6d34:	2000      	movs	r0, #0
 80a6d36:	4770      	bx	lr
 80a6d38:	f241 63b4 	movw	r3, #5812	; 0x16b4
 80a6d3c:	4298      	cmp	r0, r3
 80a6d3e:	dc06      	bgt.n	80a6d4e <iso_year_adjust+0xa2>
 80a6d40:	f241 63b1 	movw	r3, #5809	; 0x16b1
 80a6d44:	4298      	cmp	r0, r3
 80a6d46:	bfd4      	ite	le
 80a6d48:	2000      	movle	r0, #0
 80a6d4a:	2001      	movgt	r0, #1
 80a6d4c:	4770      	bx	lr
 80a6d4e:	f5a0 50b6 	sub.w	r0, r0, #5824	; 0x16c0
 80a6d52:	3802      	subs	r0, #2
 80a6d54:	2815      	cmp	r0, #21
 80a6d56:	d8ed      	bhi.n	80a6d34 <iso_year_adjust+0x88>
 80a6d58:	2301      	movs	r3, #1
 80a6d5a:	4083      	lsls	r3, r0
 80a6d5c:	4803      	ldr	r0, [pc, #12]	; (80a6d6c <iso_year_adjust+0xc0>)
 80a6d5e:	4018      	ands	r0, r3
 80a6d60:	3800      	subs	r0, #0
 80a6d62:	bf18      	it	ne
 80a6d64:	2001      	movne	r0, #1
 80a6d66:	4770      	bx	lr
 80a6d68:	2001      	movs	r0, #1
 80a6d6a:	4770      	bx	lr
 80a6d6c:	002a001f 	.word	0x002a001f

080a6d70 <__strftime>:
 80a6d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a6d74:	461e      	mov	r6, r3
 80a6d76:	2300      	movs	r3, #0
 80a6d78:	4607      	mov	r7, r0
 80a6d7a:	460d      	mov	r5, r1
 80a6d7c:	461c      	mov	r4, r3
 80a6d7e:	b091      	sub	sp, #68	; 0x44
 80a6d80:	9304      	str	r3, [sp, #16]
 80a6d82:	7813      	ldrb	r3, [r2, #0]
 80a6d84:	2b00      	cmp	r3, #0
 80a6d86:	f000 84da 	beq.w	80a773e <__strftime+0x9ce>
 80a6d8a:	2b25      	cmp	r3, #37	; 0x25
 80a6d8c:	d11f      	bne.n	80a6dce <__strftime+0x5e>
 80a6d8e:	f892 9001 	ldrb.w	r9, [r2, #1]
 80a6d92:	f1b9 0f30 	cmp.w	r9, #48	; 0x30
 80a6d96:	d024      	beq.n	80a6de2 <__strftime+0x72>
 80a6d98:	f1b9 0f2b 	cmp.w	r9, #43	; 0x2b
 80a6d9c:	d021      	beq.n	80a6de2 <__strftime+0x72>
 80a6d9e:	f04f 0900 	mov.w	r9, #0
 80a6da2:	f102 0a01 	add.w	sl, r2, #1
 80a6da6:	f89a 3000 	ldrb.w	r3, [sl]
 80a6daa:	3b31      	subs	r3, #49	; 0x31
 80a6dac:	2b08      	cmp	r3, #8
 80a6dae:	d81b      	bhi.n	80a6de8 <__strftime+0x78>
 80a6db0:	4650      	mov	r0, sl
 80a6db2:	220a      	movs	r2, #10
 80a6db4:	a908      	add	r1, sp, #32
 80a6db6:	f000 fe09 	bl	80a79cc <strtoul>
 80a6dba:	4680      	mov	r8, r0
 80a6dbc:	f8dd a020 	ldr.w	sl, [sp, #32]
 80a6dc0:	f89a 3000 	ldrb.w	r3, [sl]
 80a6dc4:	2b45      	cmp	r3, #69	; 0x45
 80a6dc6:	d112      	bne.n	80a6dee <__strftime+0x7e>
 80a6dc8:	f10a 0a01 	add.w	sl, sl, #1
 80a6dcc:	e011      	b.n	80a6df2 <__strftime+0x82>
 80a6dce:	1e69      	subs	r1, r5, #1
 80a6dd0:	42a1      	cmp	r1, r4
 80a6dd2:	d802      	bhi.n	80a6dda <__strftime+0x6a>
 80a6dd4:	2400      	movs	r4, #0
 80a6dd6:	f000 bcb5 	b.w	80a7744 <__strftime+0x9d4>
 80a6dda:	553b      	strb	r3, [r7, r4]
 80a6ddc:	3201      	adds	r2, #1
 80a6dde:	3401      	adds	r4, #1
 80a6de0:	e7cf      	b.n	80a6d82 <__strftime+0x12>
 80a6de2:	f102 0a02 	add.w	sl, r2, #2
 80a6de6:	e7de      	b.n	80a6da6 <__strftime+0x36>
 80a6de8:	f04f 0800 	mov.w	r8, #0
 80a6dec:	e7e8      	b.n	80a6dc0 <__strftime+0x50>
 80a6dee:	2b4f      	cmp	r3, #79	; 0x4f
 80a6df0:	d0ea      	beq.n	80a6dc8 <__strftime+0x58>
 80a6df2:	f89a 0000 	ldrb.w	r0, [sl]
 80a6df6:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
 80a6dfa:	2b55      	cmp	r3, #85	; 0x55
 80a6dfc:	d8ea      	bhi.n	80a6dd4 <__strftime+0x64>
 80a6dfe:	a201      	add	r2, pc, #4	; (adr r2, 80a6e04 <__strftime+0x94>)
 80a6e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80a6e04:	080a7733 	.word	0x080a7733
 80a6e08:	080a6dd5 	.word	0x080a6dd5
 80a6e0c:	080a6dd5 	.word	0x080a6dd5
 80a6e10:	080a6dd5 	.word	0x080a6dd5
 80a6e14:	080a6dd5 	.word	0x080a6dd5
 80a6e18:	080a6dd5 	.word	0x080a6dd5
 80a6e1c:	080a6dd5 	.word	0x080a6dd5
 80a6e20:	080a6dd5 	.word	0x080a6dd5
 80a6e24:	080a6dd5 	.word	0x080a6dd5
 80a6e28:	080a6dd5 	.word	0x080a6dd5
 80a6e2c:	080a6dd5 	.word	0x080a6dd5
 80a6e30:	080a6dd5 	.word	0x080a6dd5
 80a6e34:	080a6dd5 	.word	0x080a6dd5
 80a6e38:	080a6dd5 	.word	0x080a6dd5
 80a6e3c:	080a6dd5 	.word	0x080a6dd5
 80a6e40:	080a6dd5 	.word	0x080a6dd5
 80a6e44:	080a6dd5 	.word	0x080a6dd5
 80a6e48:	080a6dd5 	.word	0x080a6dd5
 80a6e4c:	080a6dd5 	.word	0x080a6dd5
 80a6e50:	080a6dd5 	.word	0x080a6dd5
 80a6e54:	080a6dd5 	.word	0x080a6dd5
 80a6e58:	080a6dd5 	.word	0x080a6dd5
 80a6e5c:	080a6dd5 	.word	0x080a6dd5
 80a6e60:	080a6dd5 	.word	0x080a6dd5
 80a6e64:	080a6dd5 	.word	0x080a6dd5
 80a6e68:	080a6dd5 	.word	0x080a6dd5
 80a6e6c:	080a6dd5 	.word	0x080a6dd5
 80a6e70:	080a6dd5 	.word	0x080a6dd5
 80a6e74:	080a6f99 	.word	0x080a6f99
 80a6e78:	080a6ff1 	.word	0x080a6ff1
 80a6e7c:	080a7063 	.word	0x080a7063
 80a6e80:	080a70fb 	.word	0x080a70fb
 80a6e84:	080a6dd5 	.word	0x080a6dd5
 80a6e88:	080a7145 	.word	0x080a7145
 80a6e8c:	080a7239 	.word	0x080a7239
 80a6e90:	080a7343 	.word	0x080a7343
 80a6e94:	080a7351 	.word	0x080a7351
 80a6e98:	080a6dd5 	.word	0x080a6dd5
 80a6e9c:	080a6dd5 	.word	0x080a6dd5
 80a6ea0:	080a6dd5 	.word	0x080a6dd5
 80a6ea4:	080a7381 	.word	0x080a7381
 80a6ea8:	080a6dd5 	.word	0x080a6dd5
 80a6eac:	080a6dd5 	.word	0x080a6dd5
 80a6eb0:	080a7395 	.word	0x080a7395
 80a6eb4:	080a6dd5 	.word	0x080a6dd5
 80a6eb8:	080a73e5 	.word	0x080a73e5
 80a6ebc:	080a74fb 	.word	0x080a74fb
 80a6ec0:	080a750b 	.word	0x080a750b
 80a6ec4:	080a755f 	.word	0x080a755f
 80a6ec8:	080a756f 	.word	0x080a756f
 80a6ecc:	080a75e1 	.word	0x080a75e1
 80a6ed0:	080a705b 	.word	0x080a705b
 80a6ed4:	080a7615 	.word	0x080a7615
 80a6ed8:	080a76e1 	.word	0x080a76e1
 80a6edc:	080a6dd5 	.word	0x080a6dd5
 80a6ee0:	080a6dd5 	.word	0x080a6dd5
 80a6ee4:	080a6dd5 	.word	0x080a6dd5
 80a6ee8:	080a6dd5 	.word	0x080a6dd5
 80a6eec:	080a6dd5 	.word	0x080a6dd5
 80a6ef0:	080a6dd5 	.word	0x080a6dd5
 80a6ef4:	080a6f5d 	.word	0x080a6f5d
 80a6ef8:	080a6fc7 	.word	0x080a6fc7
 80a6efc:	080a701d 	.word	0x080a701d
 80a6f00:	080a70d7 	.word	0x080a70d7
 80a6f04:	080a70d7 	.word	0x080a70d7
 80a6f08:	080a6dd5 	.word	0x080a6dd5
 80a6f0c:	080a719b 	.word	0x080a719b
 80a6f10:	080a6fc7 	.word	0x080a6fc7
 80a6f14:	080a6dd5 	.word	0x080a6dd5
 80a6f18:	080a7373 	.word	0x080a7373
 80a6f1c:	080a7343 	.word	0x080a7343
 80a6f20:	080a7351 	.word	0x080a7351
 80a6f24:	080a737b 	.word	0x080a737b
 80a6f28:	080a7385 	.word	0x080a7385
 80a6f2c:	080a6dd5 	.word	0x080a6dd5
 80a6f30:	080a7395 	.word	0x080a7395
 80a6f34:	080a6dd5 	.word	0x080a6dd5
 80a6f38:	080a704b 	.word	0x080a704b
 80a6f3c:	080a73f7 	.word	0x080a73f7
 80a6f40:	080a74ff 	.word	0x080a74ff
 80a6f44:	080a7545 	.word	0x080a7545
 80a6f48:	080a6dd5 	.word	0x080a6dd5
 80a6f4c:	080a75d3 	.word	0x080a75d3
 80a6f50:	080a7053 	.word	0x080a7053
 80a6f54:	080a75f9 	.word	0x080a75f9
 80a6f58:	080a7671 	.word	0x080a7671
 80a6f5c:	69b3      	ldr	r3, [r6, #24]
 80a6f5e:	4aa9      	ldr	r2, [pc, #676]	; (80a7204 <__strftime+0x494>)
 80a6f60:	3318      	adds	r3, #24
 80a6f62:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
 80a6f66:	4640      	mov	r0, r8
 80a6f68:	f000 fc02 	bl	80a7770 <strlen>
 80a6f6c:	f108 38ff 	add.w	r8, r8, #4294967295
 80a6f70:	4420      	add	r0, r4
 80a6f72:	1e6b      	subs	r3, r5, #1
 80a6f74:	42a0      	cmp	r0, r4
 80a6f76:	d107      	bne.n	80a6f88 <__strftime+0x218>
 80a6f78:	f89a 3000 	ldrb.w	r3, [sl]
 80a6f7c:	2b00      	cmp	r3, #0
 80a6f7e:	f000 83de 	beq.w	80a773e <__strftime+0x9ce>
 80a6f82:	f10a 0201 	add.w	r2, sl, #1
 80a6f86:	e6fc      	b.n	80a6d82 <__strftime+0x12>
 80a6f88:	42a3      	cmp	r3, r4
 80a6f8a:	f67f af23 	bls.w	80a6dd4 <__strftime+0x64>
 80a6f8e:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 80a6f92:	553a      	strb	r2, [r7, r4]
 80a6f94:	3401      	adds	r4, #1
 80a6f96:	e7ed      	b.n	80a6f74 <__strftime+0x204>
 80a6f98:	69b2      	ldr	r2, [r6, #24]
 80a6f9a:	4b9a      	ldr	r3, [pc, #616]	; (80a7204 <__strftime+0x494>)
 80a6f9c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80a6fa0:	f8d3 807c 	ldr.w	r8, [r3, #124]	; 0x7c
 80a6fa4:	4640      	mov	r0, r8
 80a6fa6:	f000 fbe3 	bl	80a7770 <strlen>
 80a6faa:	f108 38ff 	add.w	r8, r8, #4294967295
 80a6fae:	4420      	add	r0, r4
 80a6fb0:	1e6b      	subs	r3, r5, #1
 80a6fb2:	42a0      	cmp	r0, r4
 80a6fb4:	d0e0      	beq.n	80a6f78 <__strftime+0x208>
 80a6fb6:	42a3      	cmp	r3, r4
 80a6fb8:	f67f af0c 	bls.w	80a6dd4 <__strftime+0x64>
 80a6fbc:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 80a6fc0:	553a      	strb	r2, [r7, r4]
 80a6fc2:	3401      	adds	r4, #1
 80a6fc4:	e7f5      	b.n	80a6fb2 <__strftime+0x242>
 80a6fc6:	4b8f      	ldr	r3, [pc, #572]	; (80a7204 <__strftime+0x494>)
 80a6fc8:	6932      	ldr	r2, [r6, #16]
 80a6fca:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
 80a6fce:	4640      	mov	r0, r8
 80a6fd0:	f000 fbce 	bl	80a7770 <strlen>
 80a6fd4:	f108 38ff 	add.w	r8, r8, #4294967295
 80a6fd8:	4420      	add	r0, r4
 80a6fda:	1e6b      	subs	r3, r5, #1
 80a6fdc:	42a0      	cmp	r0, r4
 80a6fde:	d0cb      	beq.n	80a6f78 <__strftime+0x208>
 80a6fe0:	42a3      	cmp	r3, r4
 80a6fe2:	f67f aef7 	bls.w	80a6dd4 <__strftime+0x64>
 80a6fe6:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 80a6fea:	553a      	strb	r2, [r7, r4]
 80a6fec:	3401      	adds	r4, #1
 80a6fee:	e7f5      	b.n	80a6fdc <__strftime+0x26c>
 80a6ff0:	6933      	ldr	r3, [r6, #16]
 80a6ff2:	4a84      	ldr	r2, [pc, #528]	; (80a7204 <__strftime+0x494>)
 80a6ff4:	330c      	adds	r3, #12
 80a6ff6:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
 80a6ffa:	4640      	mov	r0, r8
 80a6ffc:	f000 fbb8 	bl	80a7770 <strlen>
 80a7000:	f108 38ff 	add.w	r8, r8, #4294967295
 80a7004:	4420      	add	r0, r4
 80a7006:	1e6b      	subs	r3, r5, #1
 80a7008:	42a0      	cmp	r0, r4
 80a700a:	d0b5      	beq.n	80a6f78 <__strftime+0x208>
 80a700c:	42a3      	cmp	r3, r4
 80a700e:	f67f aee1 	bls.w	80a6dd4 <__strftime+0x64>
 80a7012:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 80a7016:	553a      	strb	r2, [r7, r4]
 80a7018:	3401      	adds	r4, #1
 80a701a:	e7f5      	b.n	80a7008 <__strftime+0x298>
 80a701c:	4b79      	ldr	r3, [pc, #484]	; (80a7204 <__strftime+0x494>)
 80a701e:	f8d3 80a0 	ldr.w	r8, [r3, #160]	; 0xa0
 80a7022:	4640      	mov	r0, r8
 80a7024:	f000 fba4 	bl	80a7770 <strlen>
 80a7028:	f898 3000 	ldrb.w	r3, [r8]
 80a702c:	2b00      	cmp	r3, #0
 80a702e:	d0a3      	beq.n	80a6f78 <__strftime+0x208>
 80a7030:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80a7032:	4642      	mov	r2, r8
 80a7034:	9300      	str	r3, [sp, #0]
 80a7036:	4633      	mov	r3, r6
 80a7038:	1b29      	subs	r1, r5, r4
 80a703a:	1938      	adds	r0, r7, r4
 80a703c:	f7ff fe98 	bl	80a6d70 <__strftime>
 80a7040:	2800      	cmp	r0, #0
 80a7042:	f77f aec7 	ble.w	80a6dd4 <__strftime+0x64>
 80a7046:	4404      	add	r4, r0
 80a7048:	e796      	b.n	80a6f78 <__strftime+0x208>
 80a704a:	4b6e      	ldr	r3, [pc, #440]	; (80a7204 <__strftime+0x494>)
 80a704c:	f8d3 80e4 	ldr.w	r8, [r3, #228]	; 0xe4
 80a7050:	e7e7      	b.n	80a7022 <__strftime+0x2b2>
 80a7052:	4b6c      	ldr	r3, [pc, #432]	; (80a7204 <__strftime+0x494>)
 80a7054:	f8d3 809c 	ldr.w	r8, [r3, #156]	; 0x9c
 80a7058:	e7e3      	b.n	80a7022 <__strftime+0x2b2>
 80a705a:	4b6a      	ldr	r3, [pc, #424]	; (80a7204 <__strftime+0x494>)
 80a705c:	f8d3 8098 	ldr.w	r8, [r3, #152]	; 0x98
 80a7060:	e7df      	b.n	80a7022 <__strftime+0x2b2>
 80a7062:	4969      	ldr	r1, [pc, #420]	; (80a7208 <__strftime+0x498>)
 80a7064:	f8d6 b014 	ldr.w	fp, [r6, #20]
 80a7068:	458b      	cmp	fp, r1
 80a706a:	bfac      	ite	ge
 80a706c:	2100      	movge	r1, #0
 80a706e:	2101      	movlt	r1, #1
 80a7070:	f1bb 0f00 	cmp.w	fp, #0
 80a7074:	db10      	blt.n	80a7098 <__strftime+0x328>
 80a7076:	2064      	movs	r0, #100	; 0x64
 80a7078:	fb9b f0f0 	sdiv	r0, fp, r0
 80a707c:	3013      	adds	r0, #19
 80a707e:	f1b9 0f00 	cmp.w	r9, #0
 80a7082:	d013      	beq.n	80a70ac <__strftime+0x33c>
 80a7084:	2863      	cmp	r0, #99	; 0x63
 80a7086:	dd24      	ble.n	80a70d2 <__strftime+0x362>
 80a7088:	4a60      	ldr	r2, [pc, #384]	; (80a720c <__strftime+0x49c>)
 80a708a:	4b61      	ldr	r3, [pc, #388]	; (80a7210 <__strftime+0x4a0>)
 80a708c:	f1b9 0f2b 	cmp.w	r9, #43	; 0x2b
 80a7090:	bf18      	it	ne
 80a7092:	4613      	movne	r3, r2
 80a7094:	4a5f      	ldr	r2, [pc, #380]	; (80a7214 <__strftime+0x4a4>)
 80a7096:	e00b      	b.n	80a70b0 <__strftime+0x340>
 80a7098:	f20b 706c 	addw	r0, fp, #1900	; 0x76c
 80a709c:	9105      	str	r1, [sp, #20]
 80a709e:	f000 fed9 	bl	80a7e54 <abs>
 80a70a2:	2364      	movs	r3, #100	; 0x64
 80a70a4:	9905      	ldr	r1, [sp, #20]
 80a70a6:	fb90 f0f3 	sdiv	r0, r0, r3
 80a70aa:	e7e8      	b.n	80a707e <__strftime+0x30e>
 80a70ac:	4b57      	ldr	r3, [pc, #348]	; (80a720c <__strftime+0x49c>)
 80a70ae:	4a5a      	ldr	r2, [pc, #360]	; (80a7218 <__strftime+0x4a8>)
 80a70b0:	f1b8 0f02 	cmp.w	r8, #2
 80a70b4:	bf2c      	ite	cs
 80a70b6:	ebc1 0108 	rsbcs	r1, r1, r8
 80a70ba:	f1c1 0102 	rsbcc	r1, r1, #2
 80a70be:	9001      	str	r0, [sp, #4]
 80a70c0:	9100      	str	r1, [sp, #0]
 80a70c2:	4851      	ldr	r0, [pc, #324]	; (80a7208 <__strftime+0x498>)
 80a70c4:	4955      	ldr	r1, [pc, #340]	; (80a721c <__strftime+0x4ac>)
 80a70c6:	4583      	cmp	fp, r0
 80a70c8:	bfb8      	it	lt
 80a70ca:	460b      	movlt	r3, r1
 80a70cc:	1b29      	subs	r1, r5, r4
 80a70ce:	1938      	adds	r0, r7, r4
 80a70d0:	e029      	b.n	80a7126 <__strftime+0x3b6>
 80a70d2:	4b4e      	ldr	r3, [pc, #312]	; (80a720c <__strftime+0x49c>)
 80a70d4:	e7de      	b.n	80a7094 <__strftime+0x324>
 80a70d6:	4952      	ldr	r1, [pc, #328]	; (80a7220 <__strftime+0x4b0>)
 80a70d8:	4a52      	ldr	r2, [pc, #328]	; (80a7224 <__strftime+0x4b4>)
 80a70da:	68f3      	ldr	r3, [r6, #12]
 80a70dc:	2864      	cmp	r0, #100	; 0x64
 80a70de:	bf08      	it	eq
 80a70e0:	460a      	moveq	r2, r1
 80a70e2:	1b29      	subs	r1, r5, r4
 80a70e4:	1938      	adds	r0, r7, r4
 80a70e6:	f7fc fca5 	bl	80a3a34 <sniprintf>
 80a70ea:	2800      	cmp	r0, #0
 80a70ec:	f6ff ae72 	blt.w	80a6dd4 <__strftime+0x64>
 80a70f0:	4404      	add	r4, r0
 80a70f2:	42a5      	cmp	r5, r4
 80a70f4:	f63f af40 	bhi.w	80a6f78 <__strftime+0x208>
 80a70f8:	e66c      	b.n	80a6dd4 <__strftime+0x64>
 80a70fa:	6970      	ldr	r0, [r6, #20]
 80a70fc:	6933      	ldr	r3, [r6, #16]
 80a70fe:	2800      	cmp	r0, #0
 80a7100:	f103 0b01 	add.w	fp, r3, #1
 80a7104:	eb07 0804 	add.w	r8, r7, r4
 80a7108:	68f3      	ldr	r3, [r6, #12]
 80a710a:	eba5 0904 	sub.w	r9, r5, r4
 80a710e:	db0d      	blt.n	80a712c <__strftime+0x3bc>
 80a7110:	2164      	movs	r1, #100	; 0x64
 80a7112:	fb90 f2f1 	sdiv	r2, r0, r1
 80a7116:	fb01 0212 	mls	r2, r1, r2, r0
 80a711a:	e9cd 3200 	strd	r3, r2, [sp]
 80a711e:	4649      	mov	r1, r9
 80a7120:	465b      	mov	r3, fp
 80a7122:	4640      	mov	r0, r8
 80a7124:	4a40      	ldr	r2, [pc, #256]	; (80a7228 <__strftime+0x4b8>)
 80a7126:	f7fc fc85 	bl	80a3a34 <sniprintf>
 80a712a:	e7de      	b.n	80a70ea <__strftime+0x37a>
 80a712c:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80a7130:	9305      	str	r3, [sp, #20]
 80a7132:	f000 fe8f 	bl	80a7e54 <abs>
 80a7136:	2264      	movs	r2, #100	; 0x64
 80a7138:	fb90 f1f2 	sdiv	r1, r0, r2
 80a713c:	9b05      	ldr	r3, [sp, #20]
 80a713e:	fb01 0212 	mls	r2, r1, r2, r0
 80a7142:	e7ea      	b.n	80a711a <__strftime+0x3aa>
 80a7144:	2325      	movs	r3, #37	; 0x25
 80a7146:	f88d 3020 	strb.w	r3, [sp, #32]
 80a714a:	f1b9 0f00 	cmp.w	r9, #0
 80a714e:	d013      	beq.n	80a7178 <__strftime+0x408>
 80a7150:	f1b8 0f06 	cmp.w	r8, #6
 80a7154:	bf38      	it	cc
 80a7156:	f04f 0806 	movcc.w	r8, #6
 80a715a:	f1b8 0306 	subs.w	r3, r8, #6
 80a715e:	f88d 9021 	strb.w	r9, [sp, #33]	; 0x21
 80a7162:	d10e      	bne.n	80a7182 <__strftime+0x412>
 80a7164:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 80a7168:	4930      	ldr	r1, [pc, #192]	; (80a722c <__strftime+0x4bc>)
 80a716a:	f7ff fd97 	bl	80a6c9c <strcpy>
 80a716e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80a7170:	aa08      	add	r2, sp, #32
 80a7172:	9300      	str	r3, [sp, #0]
 80a7174:	4633      	mov	r3, r6
 80a7176:	e75f      	b.n	80a7038 <__strftime+0x2c8>
 80a7178:	f04f 092b 	mov.w	r9, #43	; 0x2b
 80a717c:	f04f 080a 	mov.w	r8, #10
 80a7180:	e7eb      	b.n	80a715a <__strftime+0x3ea>
 80a7182:	211e      	movs	r1, #30
 80a7184:	4a2a      	ldr	r2, [pc, #168]	; (80a7230 <__strftime+0x4c0>)
 80a7186:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 80a718a:	f7fc fc53 	bl	80a3a34 <sniprintf>
 80a718e:	2800      	cmp	r0, #0
 80a7190:	dde8      	ble.n	80a7164 <__strftime+0x3f4>
 80a7192:	f10d 0322 	add.w	r3, sp, #34	; 0x22
 80a7196:	4418      	add	r0, r3
 80a7198:	e7e6      	b.n	80a7168 <__strftime+0x3f8>
 80a719a:	4630      	mov	r0, r6
 80a719c:	f7ff fd86 	bl	80a6cac <iso_year_adjust>
 80a71a0:	4680      	mov	r8, r0
 80a71a2:	6970      	ldr	r0, [r6, #20]
 80a71a4:	2800      	cmp	r0, #0
 80a71a6:	db11      	blt.n	80a71cc <__strftime+0x45c>
 80a71a8:	2264      	movs	r2, #100	; 0x64
 80a71aa:	fb90 f3f2 	sdiv	r3, r0, r2
 80a71ae:	fb02 0313 	mls	r3, r2, r3, r0
 80a71b2:	4498      	add	r8, r3
 80a71b4:	2364      	movs	r3, #100	; 0x64
 80a71b6:	fb98 f0f3 	sdiv	r0, r8, r3
 80a71ba:	fb03 8810 	mls	r8, r3, r0, r8
 80a71be:	4498      	add	r8, r3
 80a71c0:	fbb8 f2f3 	udiv	r2, r8, r3
 80a71c4:	fb03 8312 	mls	r3, r3, r2, r8
 80a71c8:	4a15      	ldr	r2, [pc, #84]	; (80a7220 <__strftime+0x4b0>)
 80a71ca:	e78a      	b.n	80a70e2 <__strftime+0x372>
 80a71cc:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80a71d0:	f000 fe40 	bl	80a7e54 <abs>
 80a71d4:	2364      	movs	r3, #100	; 0x64
 80a71d6:	fb90 f2f3 	sdiv	r2, r0, r3
 80a71da:	f1b8 0f00 	cmp.w	r8, #0
 80a71de:	fb02 0313 	mls	r3, r2, r3, r0
 80a71e2:	da06      	bge.n	80a71f2 <__strftime+0x482>
 80a71e4:	6971      	ldr	r1, [r6, #20]
 80a71e6:	4a13      	ldr	r2, [pc, #76]	; (80a7234 <__strftime+0x4c4>)
 80a71e8:	4291      	cmp	r1, r2
 80a71ea:	bfb8      	it	lt
 80a71ec:	f04f 0801 	movlt.w	r8, #1
 80a71f0:	e7df      	b.n	80a71b2 <__strftime+0x442>
 80a71f2:	d0de      	beq.n	80a71b2 <__strftime+0x442>
 80a71f4:	6971      	ldr	r1, [r6, #20]
 80a71f6:	4a04      	ldr	r2, [pc, #16]	; (80a7208 <__strftime+0x498>)
 80a71f8:	4291      	cmp	r1, r2
 80a71fa:	bfb8      	it	lt
 80a71fc:	f04f 38ff 	movlt.w	r8, #4294967295
 80a7200:	e7d7      	b.n	80a71b2 <__strftime+0x442>
 80a7202:	bf00      	nop
 80a7204:	080a8c98 	.word	0x080a8c98
 80a7208:	fffff894 	.word	0xfffff894
 80a720c:	080a86c9 	.word	0x080a86c9
 80a7210:	080a8b23 	.word	0x080a8b23
 80a7214:	080a8b1b 	.word	0x080a8b1b
 80a7218:	080a8b14 	.word	0x080a8b14
 80a721c:	080a8b25 	.word	0x080a8b25
 80a7220:	080a8b35 	.word	0x080a8b35
 80a7224:	080a8b27 	.word	0x080a8b27
 80a7228:	080a8b2b 	.word	0x080a8b2b
 80a722c:	080a8b3a 	.word	0x080a8b3a
 80a7230:	080a85b8 	.word	0x080a85b8
 80a7234:	fffff895 	.word	0xfffff895
 80a7238:	4bb7      	ldr	r3, [pc, #732]	; (80a7518 <__strftime+0x7a8>)
 80a723a:	6971      	ldr	r1, [r6, #20]
 80a723c:	4630      	mov	r0, r6
 80a723e:	4299      	cmp	r1, r3
 80a7240:	bfac      	ite	ge
 80a7242:	2300      	movge	r3, #0
 80a7244:	2301      	movlt	r3, #1
 80a7246:	e9cd 3105 	strd	r3, r1, [sp, #20]
 80a724a:	f7ff fd2f 	bl	80a6cac <iso_year_adjust>
 80a724e:	9906      	ldr	r1, [sp, #24]
 80a7250:	4683      	mov	fp, r0
 80a7252:	2900      	cmp	r1, #0
 80a7254:	db2a      	blt.n	80a72ac <__strftime+0x53c>
 80a7256:	2264      	movs	r2, #100	; 0x64
 80a7258:	fb91 f2f2 	sdiv	r2, r1, r2
 80a725c:	3213      	adds	r2, #19
 80a725e:	6970      	ldr	r0, [r6, #20]
 80a7260:	2800      	cmp	r0, #0
 80a7262:	db2d      	blt.n	80a72c0 <__strftime+0x550>
 80a7264:	f04f 0c64 	mov.w	ip, #100	; 0x64
 80a7268:	fb90 fefc 	sdiv	lr, r0, ip
 80a726c:	fb0c 001e 	mls	r0, ip, lr, r0
 80a7270:	f1bb 0f00 	cmp.w	fp, #0
 80a7274:	da33      	bge.n	80a72de <__strftime+0x56e>
 80a7276:	6971      	ldr	r1, [r6, #20]
 80a7278:	4ba8      	ldr	r3, [pc, #672]	; (80a751c <__strftime+0x7ac>)
 80a727a:	4299      	cmp	r1, r3
 80a727c:	db39      	blt.n	80a72f2 <__strftime+0x582>
 80a727e:	eb0b 0300 	add.w	r3, fp, r0
 80a7282:	1c59      	adds	r1, r3, #1
 80a7284:	d13a      	bne.n	80a72fc <__strftime+0x58c>
 80a7286:	2363      	movs	r3, #99	; 0x63
 80a7288:	3a01      	subs	r2, #1
 80a728a:	2064      	movs	r0, #100	; 0x64
 80a728c:	fb00 3202 	mla	r2, r0, r2, r3
 80a7290:	9b05      	ldr	r3, [sp, #20]
 80a7292:	2b00      	cmp	r3, #0
 80a7294:	d037      	beq.n	80a7306 <__strftime+0x596>
 80a7296:	232d      	movs	r3, #45	; 0x2d
 80a7298:	f88d 3020 	strb.w	r3, [sp, #32]
 80a729c:	f1b8 0f00 	cmp.w	r8, #0
 80a72a0:	d001      	beq.n	80a72a6 <__strftime+0x536>
 80a72a2:	f108 38ff 	add.w	r8, r8, #4294967295
 80a72a6:	f10d 0321 	add.w	r3, sp, #33	; 0x21
 80a72aa:	e037      	b.n	80a731c <__strftime+0x5ac>
 80a72ac:	f201 706c 	addw	r0, r1, #1900	; 0x76c
 80a72b0:	9106      	str	r1, [sp, #24]
 80a72b2:	f000 fdcf 	bl	80a7e54 <abs>
 80a72b6:	2264      	movs	r2, #100	; 0x64
 80a72b8:	9906      	ldr	r1, [sp, #24]
 80a72ba:	fb90 f2f2 	sdiv	r2, r0, r2
 80a72be:	e7ce      	b.n	80a725e <__strftime+0x4ee>
 80a72c0:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80a72c4:	e9cd 1206 	strd	r1, r2, [sp, #24]
 80a72c8:	f000 fdc4 	bl	80a7e54 <abs>
 80a72cc:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 80a72d0:	f04f 0c64 	mov.w	ip, #100	; 0x64
 80a72d4:	fb90 fefc 	sdiv	lr, r0, ip
 80a72d8:	fb0e 001c 	mls	r0, lr, ip, r0
 80a72dc:	e7c8      	b.n	80a7270 <__strftime+0x500>
 80a72de:	d0ce      	beq.n	80a727e <__strftime+0x50e>
 80a72e0:	4b8d      	ldr	r3, [pc, #564]	; (80a7518 <__strftime+0x7a8>)
 80a72e2:	4299      	cmp	r1, r3
 80a72e4:	bfb6      	itet	lt
 80a72e6:	2301      	movlt	r3, #1
 80a72e8:	2300      	movge	r3, #0
 80a72ea:	f04f 3bff 	movlt.w	fp, #4294967295
 80a72ee:	9305      	str	r3, [sp, #20]
 80a72f0:	e7c5      	b.n	80a727e <__strftime+0x50e>
 80a72f2:	f04f 0b01 	mov.w	fp, #1
 80a72f6:	f8cd b014 	str.w	fp, [sp, #20]
 80a72fa:	e7c0      	b.n	80a727e <__strftime+0x50e>
 80a72fc:	2b64      	cmp	r3, #100	; 0x64
 80a72fe:	bf04      	itt	eq
 80a7300:	2300      	moveq	r3, #0
 80a7302:	3201      	addeq	r2, #1
 80a7304:	e7c1      	b.n	80a728a <__strftime+0x51a>
 80a7306:	f1b9 0f2b 	cmp.w	r9, #43	; 0x2b
 80a730a:	d106      	bne.n	80a731a <__strftime+0x5aa>
 80a730c:	f242 730f 	movw	r3, #9999	; 0x270f
 80a7310:	429a      	cmp	r2, r3
 80a7312:	d902      	bls.n	80a731a <__strftime+0x5aa>
 80a7314:	f88d 9020 	strb.w	r9, [sp, #32]
 80a7318:	e7c0      	b.n	80a729c <__strftime+0x52c>
 80a731a:	ab08      	add	r3, sp, #32
 80a731c:	2125      	movs	r1, #37	; 0x25
 80a731e:	7019      	strb	r1, [r3, #0]
 80a7320:	f1b9 0f00 	cmp.w	r9, #0
 80a7324:	d109      	bne.n	80a733a <__strftime+0x5ca>
 80a7326:	1c58      	adds	r0, r3, #1
 80a7328:	497d      	ldr	r1, [pc, #500]	; (80a7520 <__strftime+0x7b0>)
 80a732a:	9205      	str	r2, [sp, #20]
 80a732c:	f7ff fcb6 	bl	80a6c9c <strcpy>
 80a7330:	9a05      	ldr	r2, [sp, #20]
 80a7332:	9200      	str	r2, [sp, #0]
 80a7334:	4643      	mov	r3, r8
 80a7336:	aa08      	add	r2, sp, #32
 80a7338:	e058      	b.n	80a73ec <__strftime+0x67c>
 80a733a:	2130      	movs	r1, #48	; 0x30
 80a733c:	1c98      	adds	r0, r3, #2
 80a733e:	7059      	strb	r1, [r3, #1]
 80a7340:	e7f2      	b.n	80a7328 <__strftime+0x5b8>
 80a7342:	4978      	ldr	r1, [pc, #480]	; (80a7524 <__strftime+0x7b4>)
 80a7344:	4a78      	ldr	r2, [pc, #480]	; (80a7528 <__strftime+0x7b8>)
 80a7346:	68b3      	ldr	r3, [r6, #8]
 80a7348:	286b      	cmp	r0, #107	; 0x6b
 80a734a:	bf08      	it	eq
 80a734c:	460a      	moveq	r2, r1
 80a734e:	e6c8      	b.n	80a70e2 <__strftime+0x372>
 80a7350:	68b3      	ldr	r3, [r6, #8]
 80a7352:	b163      	cbz	r3, 80a736e <__strftime+0x5fe>
 80a7354:	2b0c      	cmp	r3, #12
 80a7356:	d004      	beq.n	80a7362 <__strftime+0x5f2>
 80a7358:	210c      	movs	r1, #12
 80a735a:	fb93 f2f1 	sdiv	r2, r3, r1
 80a735e:	fb01 3312 	mls	r3, r1, r2, r3
 80a7362:	4971      	ldr	r1, [pc, #452]	; (80a7528 <__strftime+0x7b8>)
 80a7364:	4a6f      	ldr	r2, [pc, #444]	; (80a7524 <__strftime+0x7b4>)
 80a7366:	2849      	cmp	r0, #73	; 0x49
 80a7368:	bf08      	it	eq
 80a736a:	460a      	moveq	r2, r1
 80a736c:	e6b9      	b.n	80a70e2 <__strftime+0x372>
 80a736e:	230c      	movs	r3, #12
 80a7370:	e7f7      	b.n	80a7362 <__strftime+0x5f2>
 80a7372:	69f3      	ldr	r3, [r6, #28]
 80a7374:	4a6d      	ldr	r2, [pc, #436]	; (80a752c <__strftime+0x7bc>)
 80a7376:	3301      	adds	r3, #1
 80a7378:	e6b3      	b.n	80a70e2 <__strftime+0x372>
 80a737a:	6933      	ldr	r3, [r6, #16]
 80a737c:	3301      	adds	r3, #1
 80a737e:	e723      	b.n	80a71c8 <__strftime+0x458>
 80a7380:	6873      	ldr	r3, [r6, #4]
 80a7382:	e721      	b.n	80a71c8 <__strftime+0x458>
 80a7384:	1e6b      	subs	r3, r5, #1
 80a7386:	42a3      	cmp	r3, r4
 80a7388:	f67f ad24 	bls.w	80a6dd4 <__strftime+0x64>
 80a738c:	230a      	movs	r3, #10
 80a738e:	553b      	strb	r3, [r7, r4]
 80a7390:	3401      	adds	r4, #1
 80a7392:	e5f1      	b.n	80a6f78 <__strftime+0x208>
 80a7394:	68b3      	ldr	r3, [r6, #8]
 80a7396:	2b0b      	cmp	r3, #11
 80a7398:	bfcc      	ite	gt
 80a739a:	22a4      	movgt	r2, #164	; 0xa4
 80a739c:	22a0      	movle	r2, #160	; 0xa0
 80a739e:	4b64      	ldr	r3, [pc, #400]	; (80a7530 <__strftime+0x7c0>)
 80a73a0:	4413      	add	r3, r2
 80a73a2:	f8d3 8004 	ldr.w	r8, [r3, #4]
 80a73a6:	4640      	mov	r0, r8
 80a73a8:	f000 f9e2 	bl	80a7770 <strlen>
 80a73ac:	f108 32ff 	add.w	r2, r8, #4294967295
 80a73b0:	4420      	add	r0, r4
 80a73b2:	f105 3cff 	add.w	ip, r5, #4294967295
 80a73b6:	42a0      	cmp	r0, r4
 80a73b8:	f43f adde 	beq.w	80a6f78 <__strftime+0x208>
 80a73bc:	45a4      	cmp	ip, r4
 80a73be:	f67f ad09 	bls.w	80a6dd4 <__strftime+0x64>
 80a73c2:	f89a 1000 	ldrb.w	r1, [sl]
 80a73c6:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 80a73ca:	2950      	cmp	r1, #80	; 0x50
 80a73cc:	d107      	bne.n	80a73de <__strftime+0x66e>
 80a73ce:	4959      	ldr	r1, [pc, #356]	; (80a7534 <__strftime+0x7c4>)
 80a73d0:	5cc9      	ldrb	r1, [r1, r3]
 80a73d2:	f001 0103 	and.w	r1, r1, #3
 80a73d6:	2901      	cmp	r1, #1
 80a73d8:	bf08      	it	eq
 80a73da:	3320      	addeq	r3, #32
 80a73dc:	b2db      	uxtb	r3, r3
 80a73de:	553b      	strb	r3, [r7, r4]
 80a73e0:	3401      	adds	r4, #1
 80a73e2:	e7e8      	b.n	80a73b6 <__strftime+0x646>
 80a73e4:	6873      	ldr	r3, [r6, #4]
 80a73e6:	4a54      	ldr	r2, [pc, #336]	; (80a7538 <__strftime+0x7c8>)
 80a73e8:	9300      	str	r3, [sp, #0]
 80a73ea:	68b3      	ldr	r3, [r6, #8]
 80a73ec:	1b29      	subs	r1, r5, r4
 80a73ee:	1938      	adds	r0, r7, r4
 80a73f0:	f7fc fb20 	bl	80a3a34 <sniprintf>
 80a73f4:	e679      	b.n	80a70ea <__strftime+0x37a>
 80a73f6:	6a33      	ldr	r3, [r6, #32]
 80a73f8:	2b00      	cmp	r3, #0
 80a73fa:	db7b      	blt.n	80a74f4 <__strftime+0x784>
 80a73fc:	f000 fb98 	bl	80a7b30 <__tz_lock>
 80a7400:	9b04      	ldr	r3, [sp, #16]
 80a7402:	b90b      	cbnz	r3, 80a7408 <__strftime+0x698>
 80a7404:	f000 fba0 	bl	80a7b48 <_tzset_unlocked>
 80a7408:	f000 fd6a 	bl	80a7ee0 <__gettzinfo>
 80a740c:	6a33      	ldr	r3, [r6, #32]
 80a740e:	2b00      	cmp	r3, #0
 80a7410:	bfcc      	ite	gt
 80a7412:	2350      	movgt	r3, #80	; 0x50
 80a7414:	2328      	movle	r3, #40	; 0x28
 80a7416:	58c3      	ldr	r3, [r0, r3]
 80a7418:	f1c3 0900 	rsb	r9, r3, #0
 80a741c:	f000 fb8e 	bl	80a7b3c <__tz_unlock>
 80a7420:	2301      	movs	r3, #1
 80a7422:	9304      	str	r3, [sp, #16]
 80a7424:	f8d6 c014 	ldr.w	ip, [r6, #20]
 80a7428:	eba5 0e04 	sub.w	lr, r5, r4
 80a742c:	4662      	mov	r2, ip
 80a742e:	f1bc 0145 	subs.w	r1, ip, #69	; 0x45
 80a7432:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80a7436:	9102      	str	r1, [sp, #8]
 80a7438:	f143 31ff 	adc.w	r1, r3, #4294967295
 80a743c:	9103      	str	r1, [sp, #12]
 80a743e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a7442:	2800      	cmp	r0, #0
 80a7444:	f171 0100 	sbcs.w	r1, r1, #0
 80a7448:	eb07 0804 	add.w	r8, r7, r4
 80a744c:	da05      	bge.n	80a745a <__strftime+0x6ea>
 80a744e:	f1bc 0142 	subs.w	r1, ip, #66	; 0x42
 80a7452:	f143 33ff 	adc.w	r3, r3, #4294967295
 80a7456:	9102      	str	r1, [sp, #8]
 80a7458:	9303      	str	r3, [sp, #12]
 80a745a:	9b02      	ldr	r3, [sp, #8]
 80a745c:	f10c 32ff 	add.w	r2, ip, #4294967295
 80a7460:	0898      	lsrs	r0, r3, #2
 80a7462:	9b03      	ldr	r3, [sp, #12]
 80a7464:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 80a7468:	1099      	asrs	r1, r3, #2
 80a746a:	2364      	movs	r3, #100	; 0x64
 80a746c:	fb92 f3f3 	sdiv	r3, r2, r3
 80a7470:	1ac0      	subs	r0, r0, r3
 80a7472:	eb61 71e3 	sbc.w	r1, r1, r3, asr #31
 80a7476:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80a747a:	f20c 122b 	addw	r2, ip, #299	; 0x12b
 80a747e:	fb92 f3f3 	sdiv	r3, r2, r3
 80a7482:	18c0      	adds	r0, r0, r3
 80a7484:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
 80a7488:	f240 136d 	movw	r3, #365	; 0x16d
 80a748c:	f1ac 0c46 	sub.w	ip, ip, #70	; 0x46
 80a7490:	fb03 fc0c 	mul.w	ip, r3, ip
 80a7494:	eb10 000c 	adds.w	r0, r0, ip
 80a7498:	eb41 71ec 	adc.w	r1, r1, ip, asr #31
 80a749c:	f04f 0c18 	mov.w	ip, #24
 80a74a0:	69f3      	ldr	r3, [r6, #28]
 80a74a2:	18c0      	adds	r0, r0, r3
 80a74a4:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
 80a74a8:	fba0 230c 	umull	r2, r3, r0, ip
 80a74ac:	fb0c 3301 	mla	r3, ip, r1, r3
 80a74b0:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
 80a74b4:	68b1      	ldr	r1, [r6, #8]
 80a74b6:	1852      	adds	r2, r2, r1
 80a74b8:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
 80a74bc:	fba2 010c 	umull	r0, r1, r2, ip
 80a74c0:	fb0c 1103 	mla	r1, ip, r3, r1
 80a74c4:	6873      	ldr	r3, [r6, #4]
 80a74c6:	18c0      	adds	r0, r0, r3
 80a74c8:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
 80a74cc:	fba0 230c 	umull	r2, r3, r0, ip
 80a74d0:	fb0c 3301 	mla	r3, ip, r1, r3
 80a74d4:	6831      	ldr	r1, [r6, #0]
 80a74d6:	4640      	mov	r0, r8
 80a74d8:	1852      	adds	r2, r2, r1
 80a74da:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
 80a74de:	ebb2 0209 	subs.w	r2, r2, r9
 80a74e2:	eb63 73e9 	sbc.w	r3, r3, r9, asr #31
 80a74e6:	e9cd 2300 	strd	r2, r3, [sp]
 80a74ea:	4671      	mov	r1, lr
 80a74ec:	4a13      	ldr	r2, [pc, #76]	; (80a753c <__strftime+0x7cc>)
 80a74ee:	f7fc faa1 	bl	80a3a34 <sniprintf>
 80a74f2:	e5fa      	b.n	80a70ea <__strftime+0x37a>
 80a74f4:	f04f 0900 	mov.w	r9, #0
 80a74f8:	e794      	b.n	80a7424 <__strftime+0x6b4>
 80a74fa:	6833      	ldr	r3, [r6, #0]
 80a74fc:	e664      	b.n	80a71c8 <__strftime+0x458>
 80a74fe:	1e6b      	subs	r3, r5, #1
 80a7500:	42a3      	cmp	r3, r4
 80a7502:	f67f ac67 	bls.w	80a6dd4 <__strftime+0x64>
 80a7506:	2309      	movs	r3, #9
 80a7508:	e741      	b.n	80a738e <__strftime+0x61e>
 80a750a:	6833      	ldr	r3, [r6, #0]
 80a750c:	4a0c      	ldr	r2, [pc, #48]	; (80a7540 <__strftime+0x7d0>)
 80a750e:	9301      	str	r3, [sp, #4]
 80a7510:	6873      	ldr	r3, [r6, #4]
 80a7512:	9300      	str	r3, [sp, #0]
 80a7514:	68b3      	ldr	r3, [r6, #8]
 80a7516:	e5d9      	b.n	80a70cc <__strftime+0x35c>
 80a7518:	fffff894 	.word	0xfffff894
 80a751c:	fffff895 	.word	0xfffff895
 80a7520:	080a8b42 	.word	0x080a8b42
 80a7524:	080a8b27 	.word	0x080a8b27
 80a7528:	080a8b35 	.word	0x080a8b35
 80a752c:	080a8b46 	.word	0x080a8b46
 80a7530:	080a8c98 	.word	0x080a8c98
 80a7534:	080a8dd1 	.word	0x080a8dd1
 80a7538:	080a8b55 	.word	0x080a8b55
 80a753c:	080a8b4b 	.word	0x080a8b4b
 80a7540:	080a8b50 	.word	0x080a8b50
 80a7544:	1e6b      	subs	r3, r5, #1
 80a7546:	42a3      	cmp	r3, r4
 80a7548:	f67f ac44 	bls.w	80a6dd4 <__strftime+0x64>
 80a754c:	69b3      	ldr	r3, [r6, #24]
 80a754e:	193a      	adds	r2, r7, r4
 80a7550:	3401      	adds	r4, #1
 80a7552:	b913      	cbnz	r3, 80a755a <__strftime+0x7ea>
 80a7554:	2337      	movs	r3, #55	; 0x37
 80a7556:	7013      	strb	r3, [r2, #0]
 80a7558:	e50e      	b.n	80a6f78 <__strftime+0x208>
 80a755a:	3330      	adds	r3, #48	; 0x30
 80a755c:	e7fb      	b.n	80a7556 <__strftime+0x7e6>
 80a755e:	69f3      	ldr	r3, [r6, #28]
 80a7560:	69b2      	ldr	r2, [r6, #24]
 80a7562:	3307      	adds	r3, #7
 80a7564:	1a9b      	subs	r3, r3, r2
 80a7566:	2207      	movs	r2, #7
 80a7568:	fb93 f3f2 	sdiv	r3, r3, r2
 80a756c:	e62c      	b.n	80a71c8 <__strftime+0x458>
 80a756e:	4630      	mov	r0, r6
 80a7570:	f7ff fb9c 	bl	80a6cac <iso_year_adjust>
 80a7574:	69b2      	ldr	r2, [r6, #24]
 80a7576:	b132      	cbz	r2, 80a7586 <__strftime+0x816>
 80a7578:	3a01      	subs	r2, #1
 80a757a:	2800      	cmp	r0, #0
 80a757c:	dc27      	bgt.n	80a75ce <__strftime+0x85e>
 80a757e:	69f3      	ldr	r3, [r6, #28]
 80a7580:	d103      	bne.n	80a758a <__strftime+0x81a>
 80a7582:	330a      	adds	r3, #10
 80a7584:	e7ee      	b.n	80a7564 <__strftime+0x7f4>
 80a7586:	2206      	movs	r2, #6
 80a7588:	e7f7      	b.n	80a757a <__strftime+0x80a>
 80a758a:	6970      	ldr	r0, [r6, #20]
 80a758c:	1ad3      	subs	r3, r2, r3
 80a758e:	2800      	cmp	r0, #0
 80a7590:	f240 726b 	movw	r2, #1899	; 0x76b
 80a7594:	bfa8      	it	ge
 80a7596:	f06f 0264 	mvnge.w	r2, #100	; 0x64
 80a759a:	4410      	add	r0, r2
 80a759c:	0782      	lsls	r2, r0, #30
 80a759e:	d105      	bne.n	80a75ac <__strftime+0x83c>
 80a75a0:	2264      	movs	r2, #100	; 0x64
 80a75a2:	fb90 f1f2 	sdiv	r1, r0, r2
 80a75a6:	fb02 0111 	mls	r1, r2, r1, r0
 80a75aa:	b971      	cbnz	r1, 80a75ca <__strftime+0x85a>
 80a75ac:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80a75b0:	fb90 f2f1 	sdiv	r2, r0, r1
 80a75b4:	fb01 0212 	mls	r2, r1, r2, r0
 80a75b8:	fab2 f282 	clz	r2, r2
 80a75bc:	0952      	lsrs	r2, r2, #5
 80a75be:	1a9a      	subs	r2, r3, r2
 80a75c0:	2a05      	cmp	r2, #5
 80a75c2:	bfb4      	ite	lt
 80a75c4:	2335      	movlt	r3, #53	; 0x35
 80a75c6:	2334      	movge	r3, #52	; 0x34
 80a75c8:	e5fe      	b.n	80a71c8 <__strftime+0x458>
 80a75ca:	2201      	movs	r2, #1
 80a75cc:	e7f7      	b.n	80a75be <__strftime+0x84e>
 80a75ce:	2301      	movs	r3, #1
 80a75d0:	e5fa      	b.n	80a71c8 <__strftime+0x458>
 80a75d2:	1e6b      	subs	r3, r5, #1
 80a75d4:	42a3      	cmp	r3, r4
 80a75d6:	f67f abfd 	bls.w	80a6dd4 <__strftime+0x64>
 80a75da:	69b3      	ldr	r3, [r6, #24]
 80a75dc:	3330      	adds	r3, #48	; 0x30
 80a75de:	e6d6      	b.n	80a738e <__strftime+0x61e>
 80a75e0:	69b3      	ldr	r3, [r6, #24]
 80a75e2:	b13b      	cbz	r3, 80a75f4 <__strftime+0x884>
 80a75e4:	3b01      	subs	r3, #1
 80a75e6:	69f2      	ldr	r2, [r6, #28]
 80a75e8:	3207      	adds	r2, #7
 80a75ea:	1ad2      	subs	r2, r2, r3
 80a75ec:	2307      	movs	r3, #7
 80a75ee:	fb92 f3f3 	sdiv	r3, r2, r3
 80a75f2:	e5e9      	b.n	80a71c8 <__strftime+0x458>
 80a75f4:	2306      	movs	r3, #6
 80a75f6:	e7f6      	b.n	80a75e6 <__strftime+0x876>
 80a75f8:	6970      	ldr	r0, [r6, #20]
 80a75fa:	2800      	cmp	r0, #0
 80a75fc:	db05      	blt.n	80a760a <__strftime+0x89a>
 80a75fe:	2264      	movs	r2, #100	; 0x64
 80a7600:	fb90 f3f2 	sdiv	r3, r0, r2
 80a7604:	fb03 0312 	mls	r3, r3, r2, r0
 80a7608:	e5de      	b.n	80a71c8 <__strftime+0x458>
 80a760a:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80a760e:	f000 fc21 	bl	80a7e54 <abs>
 80a7612:	e7f4      	b.n	80a75fe <__strftime+0x88e>
 80a7614:	6973      	ldr	r3, [r6, #20]
 80a7616:	4a4d      	ldr	r2, [pc, #308]	; (80a774c <__strftime+0x9dc>)
 80a7618:	4293      	cmp	r3, r2
 80a761a:	da0c      	bge.n	80a7636 <__strftime+0x8c6>
 80a761c:	212d      	movs	r1, #45	; 0x2d
 80a761e:	eba2 0b03 	sub.w	fp, r2, r3
 80a7622:	f88d 1020 	strb.w	r1, [sp, #32]
 80a7626:	f1b8 0f00 	cmp.w	r8, #0
 80a762a:	d001      	beq.n	80a7630 <__strftime+0x8c0>
 80a762c:	f108 38ff 	add.w	r8, r8, #4294967295
 80a7630:	f10d 0321 	add.w	r3, sp, #33	; 0x21
 80a7634:	e00c      	b.n	80a7650 <__strftime+0x8e0>
 80a7636:	f1b9 0f2b 	cmp.w	r9, #43	; 0x2b
 80a763a:	f203 7b6c 	addw	fp, r3, #1900	; 0x76c
 80a763e:	d106      	bne.n	80a764e <__strftime+0x8de>
 80a7640:	f242 730f 	movw	r3, #9999	; 0x270f
 80a7644:	459b      	cmp	fp, r3
 80a7646:	d902      	bls.n	80a764e <__strftime+0x8de>
 80a7648:	f88d 9020 	strb.w	r9, [sp, #32]
 80a764c:	e7eb      	b.n	80a7626 <__strftime+0x8b6>
 80a764e:	ab08      	add	r3, sp, #32
 80a7650:	2225      	movs	r2, #37	; 0x25
 80a7652:	701a      	strb	r2, [r3, #0]
 80a7654:	f1b9 0f00 	cmp.w	r9, #0
 80a7658:	d106      	bne.n	80a7668 <__strftime+0x8f8>
 80a765a:	1c58      	adds	r0, r3, #1
 80a765c:	493c      	ldr	r1, [pc, #240]	; (80a7750 <__strftime+0x9e0>)
 80a765e:	f7ff fb1d 	bl	80a6c9c <strcpy>
 80a7662:	f8cd b000 	str.w	fp, [sp]
 80a7666:	e665      	b.n	80a7334 <__strftime+0x5c4>
 80a7668:	2230      	movs	r2, #48	; 0x30
 80a766a:	1c98      	adds	r0, r3, #2
 80a766c:	705a      	strb	r2, [r3, #1]
 80a766e:	e7f5      	b.n	80a765c <__strftime+0x8ec>
 80a7670:	6a33      	ldr	r3, [r6, #32]
 80a7672:	2b00      	cmp	r3, #0
 80a7674:	f6ff ac80 	blt.w	80a6f78 <__strftime+0x208>
 80a7678:	f000 fa5a 	bl	80a7b30 <__tz_lock>
 80a767c:	9b04      	ldr	r3, [sp, #16]
 80a767e:	b90b      	cbnz	r3, 80a7684 <__strftime+0x914>
 80a7680:	f000 fa62 	bl	80a7b48 <_tzset_unlocked>
 80a7684:	f000 fc2c 	bl	80a7ee0 <__gettzinfo>
 80a7688:	6a33      	ldr	r3, [r6, #32]
 80a768a:	eb07 0904 	add.w	r9, r7, r4
 80a768e:	2b00      	cmp	r3, #0
 80a7690:	bfcc      	ite	gt
 80a7692:	2350      	movgt	r3, #80	; 0x50
 80a7694:	2328      	movle	r3, #40	; 0x28
 80a7696:	58c3      	ldr	r3, [r0, r3]
 80a7698:	eba5 0b04 	sub.w	fp, r5, r4
 80a769c:	f1c3 0800 	rsb	r8, r3, #0
 80a76a0:	f000 fa4c 	bl	80a7b3c <__tz_unlock>
 80a76a4:	233c      	movs	r3, #60	; 0x3c
 80a76a6:	fb98 f0f3 	sdiv	r0, r8, r3
 80a76aa:	f000 fccd 	bl	80a8048 <labs>
 80a76ae:	233c      	movs	r3, #60	; 0x3c
 80a76b0:	fb90 f2f3 	sdiv	r2, r0, r3
 80a76b4:	fb02 0013 	mls	r0, r2, r3, r0
 80a76b8:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80a76bc:	9000      	str	r0, [sp, #0]
 80a76be:	fb98 f3f3 	sdiv	r3, r8, r3
 80a76c2:	4659      	mov	r1, fp
 80a76c4:	4648      	mov	r0, r9
 80a76c6:	4a23      	ldr	r2, [pc, #140]	; (80a7754 <__strftime+0x9e4>)
 80a76c8:	f7fc f9b4 	bl	80a3a34 <sniprintf>
 80a76cc:	2800      	cmp	r0, #0
 80a76ce:	f6ff ab81 	blt.w	80a6dd4 <__strftime+0x64>
 80a76d2:	4404      	add	r4, r0
 80a76d4:	42a5      	cmp	r5, r4
 80a76d6:	f67f ab7d 	bls.w	80a6dd4 <__strftime+0x64>
 80a76da:	2301      	movs	r3, #1
 80a76dc:	9304      	str	r3, [sp, #16]
 80a76de:	e44b      	b.n	80a6f78 <__strftime+0x208>
 80a76e0:	6a33      	ldr	r3, [r6, #32]
 80a76e2:	2b00      	cmp	r3, #0
 80a76e4:	f6ff ac48 	blt.w	80a6f78 <__strftime+0x208>
 80a76e8:	f000 fa22 	bl	80a7b30 <__tz_lock>
 80a76ec:	9b04      	ldr	r3, [sp, #16]
 80a76ee:	b90b      	cbnz	r3, 80a76f4 <__strftime+0x984>
 80a76f0:	f000 fa2a 	bl	80a7b48 <_tzset_unlocked>
 80a76f4:	6a33      	ldr	r3, [r6, #32]
 80a76f6:	4a18      	ldr	r2, [pc, #96]	; (80a7758 <__strftime+0x9e8>)
 80a76f8:	2b00      	cmp	r3, #0
 80a76fa:	bfd4      	ite	le
 80a76fc:	2300      	movle	r3, #0
 80a76fe:	2301      	movgt	r3, #1
 80a7700:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
 80a7704:	4640      	mov	r0, r8
 80a7706:	f000 f833 	bl	80a7770 <strlen>
 80a770a:	f108 38ff 	add.w	r8, r8, #4294967295
 80a770e:	4420      	add	r0, r4
 80a7710:	1e6b      	subs	r3, r5, #1
 80a7712:	42a0      	cmp	r0, r4
 80a7714:	d102      	bne.n	80a771c <__strftime+0x9ac>
 80a7716:	f000 fa11 	bl	80a7b3c <__tz_unlock>
 80a771a:	e7de      	b.n	80a76da <__strftime+0x96a>
 80a771c:	42a3      	cmp	r3, r4
 80a771e:	d904      	bls.n	80a772a <__strftime+0x9ba>
 80a7720:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 80a7724:	553a      	strb	r2, [r7, r4]
 80a7726:	3401      	adds	r4, #1
 80a7728:	e7f3      	b.n	80a7712 <__strftime+0x9a2>
 80a772a:	f000 fa07 	bl	80a7b3c <__tz_unlock>
 80a772e:	f7ff bb51 	b.w	80a6dd4 <__strftime+0x64>
 80a7732:	1e6b      	subs	r3, r5, #1
 80a7734:	42a3      	cmp	r3, r4
 80a7736:	f67f ab4d 	bls.w	80a6dd4 <__strftime+0x64>
 80a773a:	2325      	movs	r3, #37	; 0x25
 80a773c:	e627      	b.n	80a738e <__strftime+0x61e>
 80a773e:	b10d      	cbz	r5, 80a7744 <__strftime+0x9d4>
 80a7740:	2300      	movs	r3, #0
 80a7742:	553b      	strb	r3, [r7, r4]
 80a7744:	4620      	mov	r0, r4
 80a7746:	b011      	add	sp, #68	; 0x44
 80a7748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a774c:	fffff894 	.word	0xfffff894
 80a7750:	080a8b42 	.word	0x080a8b42
 80a7754:	080a8b5f 	.word	0x080a8b5f
 80a7758:	20000070 	.word	0x20000070

080a775c <strftime>:
 80a775c:	b513      	push	{r0, r1, r4, lr}
 80a775e:	4c03      	ldr	r4, [pc, #12]	; (80a776c <strftime+0x10>)
 80a7760:	9400      	str	r4, [sp, #0]
 80a7762:	f7ff fb05 	bl	80a6d70 <__strftime>
 80a7766:	b002      	add	sp, #8
 80a7768:	bd10      	pop	{r4, pc}
 80a776a:	bf00      	nop
 80a776c:	200000d0 	.word	0x200000d0

080a7770 <strlen>:
 80a7770:	4603      	mov	r3, r0
 80a7772:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a7776:	2a00      	cmp	r2, #0
 80a7778:	d1fb      	bne.n	80a7772 <strlen+0x2>
 80a777a:	1a18      	subs	r0, r3, r0
 80a777c:	3801      	subs	r0, #1
 80a777e:	4770      	bx	lr

080a7780 <strncmp>:
 80a7780:	b510      	push	{r4, lr}
 80a7782:	b16a      	cbz	r2, 80a77a0 <strncmp+0x20>
 80a7784:	3901      	subs	r1, #1
 80a7786:	1884      	adds	r4, r0, r2
 80a7788:	f810 3b01 	ldrb.w	r3, [r0], #1
 80a778c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80a7790:	4293      	cmp	r3, r2
 80a7792:	d103      	bne.n	80a779c <strncmp+0x1c>
 80a7794:	42a0      	cmp	r0, r4
 80a7796:	d001      	beq.n	80a779c <strncmp+0x1c>
 80a7798:	2b00      	cmp	r3, #0
 80a779a:	d1f5      	bne.n	80a7788 <strncmp+0x8>
 80a779c:	1a98      	subs	r0, r3, r2
 80a779e:	bd10      	pop	{r4, pc}
 80a77a0:	4610      	mov	r0, r2
 80a77a2:	e7fc      	b.n	80a779e <strncmp+0x1e>

080a77a4 <strncpy>:
 80a77a4:	4603      	mov	r3, r0
 80a77a6:	b510      	push	{r4, lr}
 80a77a8:	3901      	subs	r1, #1
 80a77aa:	b132      	cbz	r2, 80a77ba <strncpy+0x16>
 80a77ac:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80a77b0:	3a01      	subs	r2, #1
 80a77b2:	f803 4b01 	strb.w	r4, [r3], #1
 80a77b6:	2c00      	cmp	r4, #0
 80a77b8:	d1f7      	bne.n	80a77aa <strncpy+0x6>
 80a77ba:	2100      	movs	r1, #0
 80a77bc:	441a      	add	r2, r3
 80a77be:	4293      	cmp	r3, r2
 80a77c0:	d100      	bne.n	80a77c4 <strncpy+0x20>
 80a77c2:	bd10      	pop	{r4, pc}
 80a77c4:	f803 1b01 	strb.w	r1, [r3], #1
 80a77c8:	e7f9      	b.n	80a77be <strncpy+0x1a>
	...

080a77cc <_strtol_l.isra.0>:
 80a77cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a77d0:	468c      	mov	ip, r1
 80a77d2:	4686      	mov	lr, r0
 80a77d4:	4e39      	ldr	r6, [pc, #228]	; (80a78bc <_strtol_l.isra.0+0xf0>)
 80a77d6:	4660      	mov	r0, ip
 80a77d8:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80a77dc:	5da5      	ldrb	r5, [r4, r6]
 80a77de:	f015 0508 	ands.w	r5, r5, #8
 80a77e2:	d1f8      	bne.n	80a77d6 <_strtol_l.isra.0+0xa>
 80a77e4:	2c2d      	cmp	r4, #45	; 0x2d
 80a77e6:	d133      	bne.n	80a7850 <_strtol_l.isra.0+0x84>
 80a77e8:	f04f 0801 	mov.w	r8, #1
 80a77ec:	f89c 4000 	ldrb.w	r4, [ip]
 80a77f0:	f100 0c02 	add.w	ip, r0, #2
 80a77f4:	2b00      	cmp	r3, #0
 80a77f6:	d05c      	beq.n	80a78b2 <_strtol_l.isra.0+0xe6>
 80a77f8:	2b10      	cmp	r3, #16
 80a77fa:	d10c      	bne.n	80a7816 <_strtol_l.isra.0+0x4a>
 80a77fc:	2c30      	cmp	r4, #48	; 0x30
 80a77fe:	d10a      	bne.n	80a7816 <_strtol_l.isra.0+0x4a>
 80a7800:	f89c 0000 	ldrb.w	r0, [ip]
 80a7804:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80a7808:	2858      	cmp	r0, #88	; 0x58
 80a780a:	d14d      	bne.n	80a78a8 <_strtol_l.isra.0+0xdc>
 80a780c:	2310      	movs	r3, #16
 80a780e:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80a7812:	f10c 0c02 	add.w	ip, ip, #2
 80a7816:	2600      	movs	r6, #0
 80a7818:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 80a781c:	3f01      	subs	r7, #1
 80a781e:	fbb7 f9f3 	udiv	r9, r7, r3
 80a7822:	4630      	mov	r0, r6
 80a7824:	fb03 7a19 	mls	sl, r3, r9, r7
 80a7828:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
 80a782c:	2d09      	cmp	r5, #9
 80a782e:	d818      	bhi.n	80a7862 <_strtol_l.isra.0+0x96>
 80a7830:	462c      	mov	r4, r5
 80a7832:	42a3      	cmp	r3, r4
 80a7834:	dd24      	ble.n	80a7880 <_strtol_l.isra.0+0xb4>
 80a7836:	1c75      	adds	r5, r6, #1
 80a7838:	d007      	beq.n	80a784a <_strtol_l.isra.0+0x7e>
 80a783a:	4581      	cmp	r9, r0
 80a783c:	d31d      	bcc.n	80a787a <_strtol_l.isra.0+0xae>
 80a783e:	d101      	bne.n	80a7844 <_strtol_l.isra.0+0x78>
 80a7840:	45a2      	cmp	sl, r4
 80a7842:	db1a      	blt.n	80a787a <_strtol_l.isra.0+0xae>
 80a7844:	2601      	movs	r6, #1
 80a7846:	fb00 4003 	mla	r0, r0, r3, r4
 80a784a:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80a784e:	e7eb      	b.n	80a7828 <_strtol_l.isra.0+0x5c>
 80a7850:	2c2b      	cmp	r4, #43	; 0x2b
 80a7852:	bf08      	it	eq
 80a7854:	f89c 4000 	ldrbeq.w	r4, [ip]
 80a7858:	46a8      	mov	r8, r5
 80a785a:	bf08      	it	eq
 80a785c:	f100 0c02 	addeq.w	ip, r0, #2
 80a7860:	e7c8      	b.n	80a77f4 <_strtol_l.isra.0+0x28>
 80a7862:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
 80a7866:	2d19      	cmp	r5, #25
 80a7868:	d801      	bhi.n	80a786e <_strtol_l.isra.0+0xa2>
 80a786a:	3c37      	subs	r4, #55	; 0x37
 80a786c:	e7e1      	b.n	80a7832 <_strtol_l.isra.0+0x66>
 80a786e:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
 80a7872:	2d19      	cmp	r5, #25
 80a7874:	d804      	bhi.n	80a7880 <_strtol_l.isra.0+0xb4>
 80a7876:	3c57      	subs	r4, #87	; 0x57
 80a7878:	e7db      	b.n	80a7832 <_strtol_l.isra.0+0x66>
 80a787a:	f04f 36ff 	mov.w	r6, #4294967295
 80a787e:	e7e4      	b.n	80a784a <_strtol_l.isra.0+0x7e>
 80a7880:	1c73      	adds	r3, r6, #1
 80a7882:	d106      	bne.n	80a7892 <_strtol_l.isra.0+0xc6>
 80a7884:	2322      	movs	r3, #34	; 0x22
 80a7886:	4638      	mov	r0, r7
 80a7888:	f8ce 3000 	str.w	r3, [lr]
 80a788c:	b942      	cbnz	r2, 80a78a0 <_strtol_l.isra.0+0xd4>
 80a788e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a7892:	f1b8 0f00 	cmp.w	r8, #0
 80a7896:	d000      	beq.n	80a789a <_strtol_l.isra.0+0xce>
 80a7898:	4240      	negs	r0, r0
 80a789a:	2a00      	cmp	r2, #0
 80a789c:	d0f7      	beq.n	80a788e <_strtol_l.isra.0+0xc2>
 80a789e:	b10e      	cbz	r6, 80a78a4 <_strtol_l.isra.0+0xd8>
 80a78a0:	f10c 31ff 	add.w	r1, ip, #4294967295
 80a78a4:	6011      	str	r1, [r2, #0]
 80a78a6:	e7f2      	b.n	80a788e <_strtol_l.isra.0+0xc2>
 80a78a8:	2430      	movs	r4, #48	; 0x30
 80a78aa:	2b00      	cmp	r3, #0
 80a78ac:	d1b3      	bne.n	80a7816 <_strtol_l.isra.0+0x4a>
 80a78ae:	2308      	movs	r3, #8
 80a78b0:	e7b1      	b.n	80a7816 <_strtol_l.isra.0+0x4a>
 80a78b2:	2c30      	cmp	r4, #48	; 0x30
 80a78b4:	d0a4      	beq.n	80a7800 <_strtol_l.isra.0+0x34>
 80a78b6:	230a      	movs	r3, #10
 80a78b8:	e7ad      	b.n	80a7816 <_strtol_l.isra.0+0x4a>
 80a78ba:	bf00      	nop
 80a78bc:	080a8dd1 	.word	0x080a8dd1

080a78c0 <strtol>:
 80a78c0:	4613      	mov	r3, r2
 80a78c2:	460a      	mov	r2, r1
 80a78c4:	4601      	mov	r1, r0
 80a78c6:	4802      	ldr	r0, [pc, #8]	; (80a78d0 <strtol+0x10>)
 80a78c8:	6800      	ldr	r0, [r0, #0]
 80a78ca:	f7ff bf7f 	b.w	80a77cc <_strtol_l.isra.0>
 80a78ce:	bf00      	nop
 80a78d0:	2000000c 	.word	0x2000000c

080a78d4 <_strtoul_l.isra.0>:
 80a78d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a78d8:	468c      	mov	ip, r1
 80a78da:	4686      	mov	lr, r0
 80a78dc:	4e3a      	ldr	r6, [pc, #232]	; (80a79c8 <_strtoul_l.isra.0+0xf4>)
 80a78de:	4660      	mov	r0, ip
 80a78e0:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80a78e4:	5da5      	ldrb	r5, [r4, r6]
 80a78e6:	f015 0508 	ands.w	r5, r5, #8
 80a78ea:	d1f8      	bne.n	80a78de <_strtoul_l.isra.0+0xa>
 80a78ec:	2c2d      	cmp	r4, #45	; 0x2d
 80a78ee:	d134      	bne.n	80a795a <_strtoul_l.isra.0+0x86>
 80a78f0:	f04f 0801 	mov.w	r8, #1
 80a78f4:	f89c 4000 	ldrb.w	r4, [ip]
 80a78f8:	f100 0c02 	add.w	ip, r0, #2
 80a78fc:	2b00      	cmp	r3, #0
 80a78fe:	d05e      	beq.n	80a79be <_strtoul_l.isra.0+0xea>
 80a7900:	2b10      	cmp	r3, #16
 80a7902:	d10c      	bne.n	80a791e <_strtoul_l.isra.0+0x4a>
 80a7904:	2c30      	cmp	r4, #48	; 0x30
 80a7906:	d10a      	bne.n	80a791e <_strtoul_l.isra.0+0x4a>
 80a7908:	f89c 0000 	ldrb.w	r0, [ip]
 80a790c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80a7910:	2858      	cmp	r0, #88	; 0x58
 80a7912:	d14f      	bne.n	80a79b4 <_strtoul_l.isra.0+0xe0>
 80a7914:	2310      	movs	r3, #16
 80a7916:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80a791a:	f10c 0c02 	add.w	ip, ip, #2
 80a791e:	f04f 37ff 	mov.w	r7, #4294967295
 80a7922:	fbb7 f7f3 	udiv	r7, r7, r3
 80a7926:	2500      	movs	r5, #0
 80a7928:	fb03 f907 	mul.w	r9, r3, r7
 80a792c:	4628      	mov	r0, r5
 80a792e:	ea6f 0909 	mvn.w	r9, r9
 80a7932:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 80a7936:	2e09      	cmp	r6, #9
 80a7938:	d818      	bhi.n	80a796c <_strtoul_l.isra.0+0x98>
 80a793a:	4634      	mov	r4, r6
 80a793c:	42a3      	cmp	r3, r4
 80a793e:	dd24      	ble.n	80a798a <_strtoul_l.isra.0+0xb6>
 80a7940:	2d00      	cmp	r5, #0
 80a7942:	db1f      	blt.n	80a7984 <_strtoul_l.isra.0+0xb0>
 80a7944:	4287      	cmp	r7, r0
 80a7946:	d31d      	bcc.n	80a7984 <_strtoul_l.isra.0+0xb0>
 80a7948:	d101      	bne.n	80a794e <_strtoul_l.isra.0+0x7a>
 80a794a:	45a1      	cmp	r9, r4
 80a794c:	db1a      	blt.n	80a7984 <_strtoul_l.isra.0+0xb0>
 80a794e:	2501      	movs	r5, #1
 80a7950:	fb00 4003 	mla	r0, r0, r3, r4
 80a7954:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80a7958:	e7eb      	b.n	80a7932 <_strtoul_l.isra.0+0x5e>
 80a795a:	2c2b      	cmp	r4, #43	; 0x2b
 80a795c:	bf08      	it	eq
 80a795e:	f89c 4000 	ldrbeq.w	r4, [ip]
 80a7962:	46a8      	mov	r8, r5
 80a7964:	bf08      	it	eq
 80a7966:	f100 0c02 	addeq.w	ip, r0, #2
 80a796a:	e7c7      	b.n	80a78fc <_strtoul_l.isra.0+0x28>
 80a796c:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 80a7970:	2e19      	cmp	r6, #25
 80a7972:	d801      	bhi.n	80a7978 <_strtoul_l.isra.0+0xa4>
 80a7974:	3c37      	subs	r4, #55	; 0x37
 80a7976:	e7e1      	b.n	80a793c <_strtoul_l.isra.0+0x68>
 80a7978:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 80a797c:	2e19      	cmp	r6, #25
 80a797e:	d804      	bhi.n	80a798a <_strtoul_l.isra.0+0xb6>
 80a7980:	3c57      	subs	r4, #87	; 0x57
 80a7982:	e7db      	b.n	80a793c <_strtoul_l.isra.0+0x68>
 80a7984:	f04f 35ff 	mov.w	r5, #4294967295
 80a7988:	e7e4      	b.n	80a7954 <_strtoul_l.isra.0+0x80>
 80a798a:	2d00      	cmp	r5, #0
 80a798c:	da07      	bge.n	80a799e <_strtoul_l.isra.0+0xca>
 80a798e:	2322      	movs	r3, #34	; 0x22
 80a7990:	f04f 30ff 	mov.w	r0, #4294967295
 80a7994:	f8ce 3000 	str.w	r3, [lr]
 80a7998:	b942      	cbnz	r2, 80a79ac <_strtoul_l.isra.0+0xd8>
 80a799a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a799e:	f1b8 0f00 	cmp.w	r8, #0
 80a79a2:	d000      	beq.n	80a79a6 <_strtoul_l.isra.0+0xd2>
 80a79a4:	4240      	negs	r0, r0
 80a79a6:	2a00      	cmp	r2, #0
 80a79a8:	d0f7      	beq.n	80a799a <_strtoul_l.isra.0+0xc6>
 80a79aa:	b10d      	cbz	r5, 80a79b0 <_strtoul_l.isra.0+0xdc>
 80a79ac:	f10c 31ff 	add.w	r1, ip, #4294967295
 80a79b0:	6011      	str	r1, [r2, #0]
 80a79b2:	e7f2      	b.n	80a799a <_strtoul_l.isra.0+0xc6>
 80a79b4:	2430      	movs	r4, #48	; 0x30
 80a79b6:	2b00      	cmp	r3, #0
 80a79b8:	d1b1      	bne.n	80a791e <_strtoul_l.isra.0+0x4a>
 80a79ba:	2308      	movs	r3, #8
 80a79bc:	e7af      	b.n	80a791e <_strtoul_l.isra.0+0x4a>
 80a79be:	2c30      	cmp	r4, #48	; 0x30
 80a79c0:	d0a2      	beq.n	80a7908 <_strtoul_l.isra.0+0x34>
 80a79c2:	230a      	movs	r3, #10
 80a79c4:	e7ab      	b.n	80a791e <_strtoul_l.isra.0+0x4a>
 80a79c6:	bf00      	nop
 80a79c8:	080a8dd1 	.word	0x080a8dd1

080a79cc <strtoul>:
 80a79cc:	4613      	mov	r3, r2
 80a79ce:	460a      	mov	r2, r1
 80a79d0:	4601      	mov	r1, r0
 80a79d2:	4802      	ldr	r0, [pc, #8]	; (80a79dc <strtoul+0x10>)
 80a79d4:	6800      	ldr	r0, [r0, #0]
 80a79d6:	f7ff bf7d 	b.w	80a78d4 <_strtoul_l.isra.0>
 80a79da:	bf00      	nop
 80a79dc:	2000000c 	.word	0x2000000c

080a79e0 <__tzcalc_limits>:
 80a79e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a79e4:	4680      	mov	r8, r0
 80a79e6:	f000 fa7b 	bl	80a7ee0 <__gettzinfo>
 80a79ea:	f240 73b1 	movw	r3, #1969	; 0x7b1
 80a79ee:	4598      	cmp	r8, r3
 80a79f0:	f340 8097 	ble.w	80a7b22 <__tzcalc_limits+0x142>
 80a79f4:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 80a79f8:	f240 126d 	movw	r2, #365	; 0x16d
 80a79fc:	4443      	add	r3, r8
 80a79fe:	109b      	asrs	r3, r3, #2
 80a7a00:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
 80a7a04:	fb02 3505 	mla	r5, r2, r5, r3
 80a7a08:	f06f 0263 	mvn.w	r2, #99	; 0x63
 80a7a0c:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
 80a7a10:	fb93 f3f2 	sdiv	r3, r3, r2
 80a7a14:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 80a7a18:	441d      	add	r5, r3
 80a7a1a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80a7a1e:	4442      	add	r2, r8
 80a7a20:	fbb2 f2f3 	udiv	r2, r2, r3
 80a7a24:	fb98 f7f3 	sdiv	r7, r8, r3
 80a7a28:	4415      	add	r5, r2
 80a7a2a:	2264      	movs	r2, #100	; 0x64
 80a7a2c:	fb03 8717 	mls	r7, r3, r7, r8
 80a7a30:	fb98 f6f2 	sdiv	r6, r8, r2
 80a7a34:	fab7 fc87 	clz	ip, r7
 80a7a38:	4604      	mov	r4, r0
 80a7a3a:	f04f 0e07 	mov.w	lr, #7
 80a7a3e:	fb02 8616 	mls	r6, r2, r6, r8
 80a7a42:	f008 0303 	and.w	r3, r8, #3
 80a7a46:	f8c0 8004 	str.w	r8, [r0, #4]
 80a7a4a:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80a7a4e:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 80a7a52:	9300      	str	r3, [sp, #0]
 80a7a54:	7a22      	ldrb	r2, [r4, #8]
 80a7a56:	6963      	ldr	r3, [r4, #20]
 80a7a58:	2a4a      	cmp	r2, #74	; 0x4a
 80a7a5a:	d128      	bne.n	80a7aae <__tzcalc_limits+0xce>
 80a7a5c:	9900      	ldr	r1, [sp, #0]
 80a7a5e:	18ea      	adds	r2, r5, r3
 80a7a60:	b901      	cbnz	r1, 80a7a64 <__tzcalc_limits+0x84>
 80a7a62:	b906      	cbnz	r6, 80a7a66 <__tzcalc_limits+0x86>
 80a7a64:	bb0f      	cbnz	r7, 80a7aaa <__tzcalc_limits+0xca>
 80a7a66:	2b3b      	cmp	r3, #59	; 0x3b
 80a7a68:	bfd4      	ite	le
 80a7a6a:	2300      	movle	r3, #0
 80a7a6c:	2301      	movgt	r3, #1
 80a7a6e:	4413      	add	r3, r2
 80a7a70:	1e5a      	subs	r2, r3, #1
 80a7a72:	69a3      	ldr	r3, [r4, #24]
 80a7a74:	492c      	ldr	r1, [pc, #176]	; (80a7b28 <__tzcalc_limits+0x148>)
 80a7a76:	3428      	adds	r4, #40	; 0x28
 80a7a78:	fb01 3202 	mla	r2, r1, r2, r3
 80a7a7c:	6823      	ldr	r3, [r4, #0]
 80a7a7e:	4413      	add	r3, r2
 80a7a80:	461a      	mov	r2, r3
 80a7a82:	17db      	asrs	r3, r3, #31
 80a7a84:	e944 2302 	strd	r2, r3, [r4, #-8]
 80a7a88:	45a3      	cmp	fp, r4
 80a7a8a:	d1e3      	bne.n	80a7a54 <__tzcalc_limits+0x74>
 80a7a8c:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
 80a7a90:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
 80a7a94:	4294      	cmp	r4, r2
 80a7a96:	eb75 0303 	sbcs.w	r3, r5, r3
 80a7a9a:	bfb4      	ite	lt
 80a7a9c:	2301      	movlt	r3, #1
 80a7a9e:	2300      	movge	r3, #0
 80a7aa0:	6003      	str	r3, [r0, #0]
 80a7aa2:	2001      	movs	r0, #1
 80a7aa4:	b003      	add	sp, #12
 80a7aa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a7aaa:	2300      	movs	r3, #0
 80a7aac:	e7df      	b.n	80a7a6e <__tzcalc_limits+0x8e>
 80a7aae:	2a44      	cmp	r2, #68	; 0x44
 80a7ab0:	d101      	bne.n	80a7ab6 <__tzcalc_limits+0xd6>
 80a7ab2:	18ea      	adds	r2, r5, r3
 80a7ab4:	e7dd      	b.n	80a7a72 <__tzcalc_limits+0x92>
 80a7ab6:	9a00      	ldr	r2, [sp, #0]
 80a7ab8:	bb6a      	cbnz	r2, 80a7b16 <__tzcalc_limits+0x136>
 80a7aba:	2e00      	cmp	r6, #0
 80a7abc:	bf0c      	ite	eq
 80a7abe:	46e0      	moveq	r8, ip
 80a7ac0:	f04f 0801 	movne.w	r8, #1
 80a7ac4:	f04f 0a30 	mov.w	sl, #48	; 0x30
 80a7ac8:	68e2      	ldr	r2, [r4, #12]
 80a7aca:	f04f 0900 	mov.w	r9, #0
 80a7ace:	9201      	str	r2, [sp, #4]
 80a7ad0:	462a      	mov	r2, r5
 80a7ad2:	4916      	ldr	r1, [pc, #88]	; (80a7b2c <__tzcalc_limits+0x14c>)
 80a7ad4:	fb0a 1808 	mla	r8, sl, r8, r1
 80a7ad8:	f1a8 0804 	sub.w	r8, r8, #4
 80a7adc:	9901      	ldr	r1, [sp, #4]
 80a7ade:	f109 0901 	add.w	r9, r9, #1
 80a7ae2:	4549      	cmp	r1, r9
 80a7ae4:	f858 a029 	ldr.w	sl, [r8, r9, lsl #2]
 80a7ae8:	dc17      	bgt.n	80a7b1a <__tzcalc_limits+0x13a>
 80a7aea:	f102 0804 	add.w	r8, r2, #4
 80a7aee:	fb98 f9fe 	sdiv	r9, r8, lr
 80a7af2:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 80a7af6:	eba8 0909 	sub.w	r9, r8, r9
 80a7afa:	ebb3 0909 	subs.w	r9, r3, r9
 80a7afe:	6923      	ldr	r3, [r4, #16]
 80a7b00:	bf48      	it	mi
 80a7b02:	f109 0907 	addmi.w	r9, r9, #7
 80a7b06:	3b01      	subs	r3, #1
 80a7b08:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a7b0c:	444b      	add	r3, r9
 80a7b0e:	4553      	cmp	r3, sl
 80a7b10:	da05      	bge.n	80a7b1e <__tzcalc_limits+0x13e>
 80a7b12:	441a      	add	r2, r3
 80a7b14:	e7ad      	b.n	80a7a72 <__tzcalc_limits+0x92>
 80a7b16:	46e0      	mov	r8, ip
 80a7b18:	e7d4      	b.n	80a7ac4 <__tzcalc_limits+0xe4>
 80a7b1a:	4452      	add	r2, sl
 80a7b1c:	e7de      	b.n	80a7adc <__tzcalc_limits+0xfc>
 80a7b1e:	3b07      	subs	r3, #7
 80a7b20:	e7f5      	b.n	80a7b0e <__tzcalc_limits+0x12e>
 80a7b22:	2000      	movs	r0, #0
 80a7b24:	e7be      	b.n	80a7aa4 <__tzcalc_limits+0xc4>
 80a7b26:	bf00      	nop
 80a7b28:	00015180 	.word	0x00015180
 80a7b2c:	080a8ab4 	.word	0x080a8ab4

080a7b30 <__tz_lock>:
 80a7b30:	4801      	ldr	r0, [pc, #4]	; (80a7b38 <__tz_lock+0x8>)
 80a7b32:	f000 ba8d 	b.w	80a8050 <__retarget_lock_acquire>
 80a7b36:	bf00      	nop
 80a7b38:	20000663 	.word	0x20000663

080a7b3c <__tz_unlock>:
 80a7b3c:	4801      	ldr	r0, [pc, #4]	; (80a7b44 <__tz_unlock+0x8>)
 80a7b3e:	f000 ba89 	b.w	80a8054 <__retarget_lock_release>
 80a7b42:	bf00      	nop
 80a7b44:	20000663 	.word	0x20000663

080a7b48 <_tzset_unlocked>:
 80a7b48:	4b01      	ldr	r3, [pc, #4]	; (80a7b50 <_tzset_unlocked+0x8>)
 80a7b4a:	6818      	ldr	r0, [r3, #0]
 80a7b4c:	f000 b802 	b.w	80a7b54 <_tzset_unlocked_r>
 80a7b50:	2000000c 	.word	0x2000000c

080a7b54 <_tzset_unlocked_r>:
 80a7b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a7b58:	b08d      	sub	sp, #52	; 0x34
 80a7b5a:	4607      	mov	r7, r0
 80a7b5c:	f000 f9c0 	bl	80a7ee0 <__gettzinfo>
 80a7b60:	49b0      	ldr	r1, [pc, #704]	; (80a7e24 <_tzset_unlocked_r+0x2d0>)
 80a7b62:	4605      	mov	r5, r0
 80a7b64:	4638      	mov	r0, r7
 80a7b66:	f000 f9b3 	bl	80a7ed0 <_getenv_r>
 80a7b6a:	4eaf      	ldr	r6, [pc, #700]	; (80a7e28 <_tzset_unlocked_r+0x2d4>)
 80a7b6c:	4604      	mov	r4, r0
 80a7b6e:	b970      	cbnz	r0, 80a7b8e <_tzset_unlocked_r+0x3a>
 80a7b70:	4bae      	ldr	r3, [pc, #696]	; (80a7e2c <_tzset_unlocked_r+0x2d8>)
 80a7b72:	4aaf      	ldr	r2, [pc, #700]	; (80a7e30 <_tzset_unlocked_r+0x2dc>)
 80a7b74:	6018      	str	r0, [r3, #0]
 80a7b76:	4baf      	ldr	r3, [pc, #700]	; (80a7e34 <_tzset_unlocked_r+0x2e0>)
 80a7b78:	6018      	str	r0, [r3, #0]
 80a7b7a:	4baf      	ldr	r3, [pc, #700]	; (80a7e38 <_tzset_unlocked_r+0x2e4>)
 80a7b7c:	6830      	ldr	r0, [r6, #0]
 80a7b7e:	e9c3 2200 	strd	r2, r2, [r3]
 80a7b82:	f7fb ff27 	bl	80a39d4 <free>
 80a7b86:	6034      	str	r4, [r6, #0]
 80a7b88:	b00d      	add	sp, #52	; 0x34
 80a7b8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a7b8e:	6831      	ldr	r1, [r6, #0]
 80a7b90:	2900      	cmp	r1, #0
 80a7b92:	d15f      	bne.n	80a7c54 <_tzset_unlocked_r+0x100>
 80a7b94:	6830      	ldr	r0, [r6, #0]
 80a7b96:	f7fb ff1d 	bl	80a39d4 <free>
 80a7b9a:	4620      	mov	r0, r4
 80a7b9c:	f7ff fde8 	bl	80a7770 <strlen>
 80a7ba0:	1c41      	adds	r1, r0, #1
 80a7ba2:	4638      	mov	r0, r7
 80a7ba4:	f7fb ff56 	bl	80a3a54 <_malloc_r>
 80a7ba8:	6030      	str	r0, [r6, #0]
 80a7baa:	2800      	cmp	r0, #0
 80a7bac:	d157      	bne.n	80a7c5e <_tzset_unlocked_r+0x10a>
 80a7bae:	7823      	ldrb	r3, [r4, #0]
 80a7bb0:	ae0a      	add	r6, sp, #40	; 0x28
 80a7bb2:	2b3a      	cmp	r3, #58	; 0x3a
 80a7bb4:	bf08      	it	eq
 80a7bb6:	3401      	addeq	r4, #1
 80a7bb8:	4633      	mov	r3, r6
 80a7bba:	4620      	mov	r0, r4
 80a7bbc:	4a9f      	ldr	r2, [pc, #636]	; (80a7e3c <_tzset_unlocked_r+0x2e8>)
 80a7bbe:	49a0      	ldr	r1, [pc, #640]	; (80a7e40 <_tzset_unlocked_r+0x2ec>)
 80a7bc0:	f7fb ff28 	bl	80a3a14 <siscanf>
 80a7bc4:	2800      	cmp	r0, #0
 80a7bc6:	dddf      	ble.n	80a7b88 <_tzset_unlocked_r+0x34>
 80a7bc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a7bca:	18e7      	adds	r7, r4, r3
 80a7bcc:	5ce3      	ldrb	r3, [r4, r3]
 80a7bce:	2b2d      	cmp	r3, #45	; 0x2d
 80a7bd0:	d149      	bne.n	80a7c66 <_tzset_unlocked_r+0x112>
 80a7bd2:	f04f 34ff 	mov.w	r4, #4294967295
 80a7bd6:	3701      	adds	r7, #1
 80a7bd8:	f04f 0800 	mov.w	r8, #0
 80a7bdc:	f10d 0a20 	add.w	sl, sp, #32
 80a7be0:	f10d 0b1e 	add.w	fp, sp, #30
 80a7be4:	4633      	mov	r3, r6
 80a7be6:	4638      	mov	r0, r7
 80a7be8:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 80a7bec:	4995      	ldr	r1, [pc, #596]	; (80a7e44 <_tzset_unlocked_r+0x2f0>)
 80a7bee:	9603      	str	r6, [sp, #12]
 80a7bf0:	f8cd b000 	str.w	fp, [sp]
 80a7bf4:	aa07      	add	r2, sp, #28
 80a7bf6:	f8ad 801e 	strh.w	r8, [sp, #30]
 80a7bfa:	f8ad 8020 	strh.w	r8, [sp, #32]
 80a7bfe:	f7fb ff09 	bl	80a3a14 <siscanf>
 80a7c02:	4540      	cmp	r0, r8
 80a7c04:	ddc0      	ble.n	80a7b88 <_tzset_unlocked_r+0x34>
 80a7c06:	213c      	movs	r1, #60	; 0x3c
 80a7c08:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80a7c0c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80a7c10:	f8df 923c 	ldr.w	r9, [pc, #572]	; 80a7e50 <_tzset_unlocked_r+0x2fc>
 80a7c14:	fb01 2203 	mla	r2, r1, r3, r2
 80a7c18:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a7c1c:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80a7c20:	fb01 2303 	mla	r3, r1, r3, r2
 80a7c24:	435c      	muls	r4, r3
 80a7c26:	4b85      	ldr	r3, [pc, #532]	; (80a7e3c <_tzset_unlocked_r+0x2e8>)
 80a7c28:	62ac      	str	r4, [r5, #40]	; 0x28
 80a7c2a:	4c83      	ldr	r4, [pc, #524]	; (80a7e38 <_tzset_unlocked_r+0x2e4>)
 80a7c2c:	464a      	mov	r2, r9
 80a7c2e:	6023      	str	r3, [r4, #0]
 80a7c30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a7c32:	4983      	ldr	r1, [pc, #524]	; (80a7e40 <_tzset_unlocked_r+0x2ec>)
 80a7c34:	441f      	add	r7, r3
 80a7c36:	4638      	mov	r0, r7
 80a7c38:	4633      	mov	r3, r6
 80a7c3a:	f7fb feeb 	bl	80a3a14 <siscanf>
 80a7c3e:	4540      	cmp	r0, r8
 80a7c40:	dc17      	bgt.n	80a7c72 <_tzset_unlocked_r+0x11e>
 80a7c42:	6823      	ldr	r3, [r4, #0]
 80a7c44:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80a7c46:	6063      	str	r3, [r4, #4]
 80a7c48:	4b78      	ldr	r3, [pc, #480]	; (80a7e2c <_tzset_unlocked_r+0x2d8>)
 80a7c4a:	601a      	str	r2, [r3, #0]
 80a7c4c:	4b79      	ldr	r3, [pc, #484]	; (80a7e34 <_tzset_unlocked_r+0x2e0>)
 80a7c4e:	f8c3 8000 	str.w	r8, [r3]
 80a7c52:	e799      	b.n	80a7b88 <_tzset_unlocked_r+0x34>
 80a7c54:	f7ff f818 	bl	80a6c88 <strcmp>
 80a7c58:	2800      	cmp	r0, #0
 80a7c5a:	d19b      	bne.n	80a7b94 <_tzset_unlocked_r+0x40>
 80a7c5c:	e794      	b.n	80a7b88 <_tzset_unlocked_r+0x34>
 80a7c5e:	4621      	mov	r1, r4
 80a7c60:	f7ff f81c 	bl	80a6c9c <strcpy>
 80a7c64:	e7a3      	b.n	80a7bae <_tzset_unlocked_r+0x5a>
 80a7c66:	2b2b      	cmp	r3, #43	; 0x2b
 80a7c68:	f04f 0401 	mov.w	r4, #1
 80a7c6c:	bf08      	it	eq
 80a7c6e:	3701      	addeq	r7, #1
 80a7c70:	e7b2      	b.n	80a7bd8 <_tzset_unlocked_r+0x84>
 80a7c72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a7c74:	f8c4 9004 	str.w	r9, [r4, #4]
 80a7c78:	18fc      	adds	r4, r7, r3
 80a7c7a:	5cfb      	ldrb	r3, [r7, r3]
 80a7c7c:	2b2d      	cmp	r3, #45	; 0x2d
 80a7c7e:	f040 808c 	bne.w	80a7d9a <_tzset_unlocked_r+0x246>
 80a7c82:	f04f 37ff 	mov.w	r7, #4294967295
 80a7c86:	3401      	adds	r4, #1
 80a7c88:	2300      	movs	r3, #0
 80a7c8a:	4620      	mov	r0, r4
 80a7c8c:	f8ad 301c 	strh.w	r3, [sp, #28]
 80a7c90:	f8ad 301e 	strh.w	r3, [sp, #30]
 80a7c94:	f8ad 3020 	strh.w	r3, [sp, #32]
 80a7c98:	930a      	str	r3, [sp, #40]	; 0x28
 80a7c9a:	e9cd a602 	strd	sl, r6, [sp, #8]
 80a7c9e:	4633      	mov	r3, r6
 80a7ca0:	e9cd b600 	strd	fp, r6, [sp]
 80a7ca4:	4967      	ldr	r1, [pc, #412]	; (80a7e44 <_tzset_unlocked_r+0x2f0>)
 80a7ca6:	aa07      	add	r2, sp, #28
 80a7ca8:	f7fb feb4 	bl	80a3a14 <siscanf>
 80a7cac:	2800      	cmp	r0, #0
 80a7cae:	dc7a      	bgt.n	80a7da6 <_tzset_unlocked_r+0x252>
 80a7cb0:	6aaf      	ldr	r7, [r5, #40]	; 0x28
 80a7cb2:	f5a7 6761 	sub.w	r7, r7, #3600	; 0xe10
 80a7cb6:	652f      	str	r7, [r5, #80]	; 0x50
 80a7cb8:	f04f 0900 	mov.w	r9, #0
 80a7cbc:	462f      	mov	r7, r5
 80a7cbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a7cc0:	441c      	add	r4, r3
 80a7cc2:	7823      	ldrb	r3, [r4, #0]
 80a7cc4:	2b2c      	cmp	r3, #44	; 0x2c
 80a7cc6:	bf08      	it	eq
 80a7cc8:	3401      	addeq	r4, #1
 80a7cca:	f894 8000 	ldrb.w	r8, [r4]
 80a7cce:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 80a7cd2:	d17a      	bne.n	80a7dca <_tzset_unlocked_r+0x276>
 80a7cd4:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 80a7cd8:	e9cd 6301 	strd	r6, r3, [sp, #4]
 80a7cdc:	ab09      	add	r3, sp, #36	; 0x24
 80a7cde:	9300      	str	r3, [sp, #0]
 80a7ce0:	4620      	mov	r0, r4
 80a7ce2:	4633      	mov	r3, r6
 80a7ce4:	4958      	ldr	r1, [pc, #352]	; (80a7e48 <_tzset_unlocked_r+0x2f4>)
 80a7ce6:	9603      	str	r6, [sp, #12]
 80a7ce8:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 80a7cec:	f7fb fe92 	bl	80a3a14 <siscanf>
 80a7cf0:	2803      	cmp	r0, #3
 80a7cf2:	f47f af49 	bne.w	80a7b88 <_tzset_unlocked_r+0x34>
 80a7cf6:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 80a7cfa:	1e4b      	subs	r3, r1, #1
 80a7cfc:	2b0b      	cmp	r3, #11
 80a7cfe:	f63f af43 	bhi.w	80a7b88 <_tzset_unlocked_r+0x34>
 80a7d02:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 80a7d06:	1e53      	subs	r3, r2, #1
 80a7d08:	2b04      	cmp	r3, #4
 80a7d0a:	f63f af3d 	bhi.w	80a7b88 <_tzset_unlocked_r+0x34>
 80a7d0e:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 80a7d12:	2b06      	cmp	r3, #6
 80a7d14:	f63f af38 	bhi.w	80a7b88 <_tzset_unlocked_r+0x34>
 80a7d18:	e9c7 1203 	strd	r1, r2, [r7, #12]
 80a7d1c:	f887 8008 	strb.w	r8, [r7, #8]
 80a7d20:	617b      	str	r3, [r7, #20]
 80a7d22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a7d24:	eb04 0803 	add.w	r8, r4, r3
 80a7d28:	2302      	movs	r3, #2
 80a7d2a:	f8ad 301c 	strh.w	r3, [sp, #28]
 80a7d2e:	2300      	movs	r3, #0
 80a7d30:	f8ad 301e 	strh.w	r3, [sp, #30]
 80a7d34:	f8ad 3020 	strh.w	r3, [sp, #32]
 80a7d38:	930a      	str	r3, [sp, #40]	; 0x28
 80a7d3a:	f898 3000 	ldrb.w	r3, [r8]
 80a7d3e:	2b2f      	cmp	r3, #47	; 0x2f
 80a7d40:	d109      	bne.n	80a7d56 <_tzset_unlocked_r+0x202>
 80a7d42:	4633      	mov	r3, r6
 80a7d44:	4640      	mov	r0, r8
 80a7d46:	e9cd a602 	strd	sl, r6, [sp, #8]
 80a7d4a:	e9cd b600 	strd	fp, r6, [sp]
 80a7d4e:	493f      	ldr	r1, [pc, #252]	; (80a7e4c <_tzset_unlocked_r+0x2f8>)
 80a7d50:	aa07      	add	r2, sp, #28
 80a7d52:	f7fb fe5f 	bl	80a3a14 <siscanf>
 80a7d56:	213c      	movs	r1, #60	; 0x3c
 80a7d58:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80a7d5c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80a7d60:	3728      	adds	r7, #40	; 0x28
 80a7d62:	fb01 2203 	mla	r2, r1, r3, r2
 80a7d66:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a7d6a:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80a7d6e:	fb01 2303 	mla	r3, r1, r3, r2
 80a7d72:	f847 3c10 	str.w	r3, [r7, #-16]
 80a7d76:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80a7d78:	4444      	add	r4, r8
 80a7d7a:	f1b9 0f00 	cmp.w	r9, #0
 80a7d7e:	d021      	beq.n	80a7dc4 <_tzset_unlocked_r+0x270>
 80a7d80:	6868      	ldr	r0, [r5, #4]
 80a7d82:	f7ff fe2d 	bl	80a79e0 <__tzcalc_limits>
 80a7d86:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80a7d88:	4b28      	ldr	r3, [pc, #160]	; (80a7e2c <_tzset_unlocked_r+0x2d8>)
 80a7d8a:	601a      	str	r2, [r3, #0]
 80a7d8c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80a7d8e:	1a9b      	subs	r3, r3, r2
 80a7d90:	bf18      	it	ne
 80a7d92:	2301      	movne	r3, #1
 80a7d94:	4a27      	ldr	r2, [pc, #156]	; (80a7e34 <_tzset_unlocked_r+0x2e0>)
 80a7d96:	6013      	str	r3, [r2, #0]
 80a7d98:	e6f6      	b.n	80a7b88 <_tzset_unlocked_r+0x34>
 80a7d9a:	2b2b      	cmp	r3, #43	; 0x2b
 80a7d9c:	f04f 0701 	mov.w	r7, #1
 80a7da0:	bf08      	it	eq
 80a7da2:	3401      	addeq	r4, #1
 80a7da4:	e770      	b.n	80a7c88 <_tzset_unlocked_r+0x134>
 80a7da6:	213c      	movs	r1, #60	; 0x3c
 80a7da8:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80a7dac:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80a7db0:	fb01 2203 	mla	r2, r1, r3, r2
 80a7db4:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a7db8:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80a7dbc:	fb01 2303 	mla	r3, r1, r3, r2
 80a7dc0:	435f      	muls	r7, r3
 80a7dc2:	e778      	b.n	80a7cb6 <_tzset_unlocked_r+0x162>
 80a7dc4:	f04f 0901 	mov.w	r9, #1
 80a7dc8:	e77b      	b.n	80a7cc2 <_tzset_unlocked_r+0x16e>
 80a7dca:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 80a7dce:	bf0a      	itet	eq
 80a7dd0:	4643      	moveq	r3, r8
 80a7dd2:	2344      	movne	r3, #68	; 0x44
 80a7dd4:	3401      	addeq	r4, #1
 80a7dd6:	220a      	movs	r2, #10
 80a7dd8:	4620      	mov	r0, r4
 80a7dda:	a90b      	add	r1, sp, #44	; 0x2c
 80a7ddc:	9305      	str	r3, [sp, #20]
 80a7dde:	f7ff fdf5 	bl	80a79cc <strtoul>
 80a7de2:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 80a7de6:	9b05      	ldr	r3, [sp, #20]
 80a7de8:	45a0      	cmp	r8, r4
 80a7dea:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 80a7dee:	d114      	bne.n	80a7e1a <_tzset_unlocked_r+0x2c6>
 80a7df0:	234d      	movs	r3, #77	; 0x4d
 80a7df2:	f1b9 0f00 	cmp.w	r9, #0
 80a7df6:	d107      	bne.n	80a7e08 <_tzset_unlocked_r+0x2b4>
 80a7df8:	2103      	movs	r1, #3
 80a7dfa:	722b      	strb	r3, [r5, #8]
 80a7dfc:	2302      	movs	r3, #2
 80a7dfe:	f8c5 9014 	str.w	r9, [r5, #20]
 80a7e02:	e9c5 1303 	strd	r1, r3, [r5, #12]
 80a7e06:	e78f      	b.n	80a7d28 <_tzset_unlocked_r+0x1d4>
 80a7e08:	220b      	movs	r2, #11
 80a7e0a:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 80a7e0e:	2301      	movs	r3, #1
 80a7e10:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 80a7e14:	2300      	movs	r3, #0
 80a7e16:	63eb      	str	r3, [r5, #60]	; 0x3c
 80a7e18:	e786      	b.n	80a7d28 <_tzset_unlocked_r+0x1d4>
 80a7e1a:	b280      	uxth	r0, r0
 80a7e1c:	723b      	strb	r3, [r7, #8]
 80a7e1e:	6178      	str	r0, [r7, #20]
 80a7e20:	e782      	b.n	80a7d28 <_tzset_unlocked_r+0x1d4>
 80a7e22:	bf00      	nop
 80a7e24:	080a8d94 	.word	0x080a8d94
 80a7e28:	2000064c 	.word	0x2000064c
 80a7e2c:	20000654 	.word	0x20000654
 80a7e30:	080a8d97 	.word	0x080a8d97
 80a7e34:	20000650 	.word	0x20000650
 80a7e38:	20000070 	.word	0x20000070
 80a7e3c:	2000063f 	.word	0x2000063f
 80a7e40:	080a8d9b 	.word	0x080a8d9b
 80a7e44:	080a8dbe 	.word	0x080a8dbe
 80a7e48:	080a8daa 	.word	0x080a8daa
 80a7e4c:	080a8dbd 	.word	0x080a8dbd
 80a7e50:	20000634 	.word	0x20000634

080a7e54 <abs>:
 80a7e54:	2800      	cmp	r0, #0
 80a7e56:	bfb8      	it	lt
 80a7e58:	4240      	neglt	r0, r0
 80a7e5a:	4770      	bx	lr

080a7e5c <_findenv_r>:
 80a7e5c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a7e60:	4607      	mov	r7, r0
 80a7e62:	4689      	mov	r9, r1
 80a7e64:	4616      	mov	r6, r2
 80a7e66:	f000 f917 	bl	80a8098 <__env_lock>
 80a7e6a:	4b18      	ldr	r3, [pc, #96]	; (80a7ecc <_findenv_r+0x70>)
 80a7e6c:	681c      	ldr	r4, [r3, #0]
 80a7e6e:	469a      	mov	sl, r3
 80a7e70:	b134      	cbz	r4, 80a7e80 <_findenv_r+0x24>
 80a7e72:	464b      	mov	r3, r9
 80a7e74:	4698      	mov	r8, r3
 80a7e76:	f813 1b01 	ldrb.w	r1, [r3], #1
 80a7e7a:	b139      	cbz	r1, 80a7e8c <_findenv_r+0x30>
 80a7e7c:	293d      	cmp	r1, #61	; 0x3d
 80a7e7e:	d1f9      	bne.n	80a7e74 <_findenv_r+0x18>
 80a7e80:	4638      	mov	r0, r7
 80a7e82:	f000 f90f 	bl	80a80a4 <__env_unlock>
 80a7e86:	2000      	movs	r0, #0
 80a7e88:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a7e8c:	eba8 0809 	sub.w	r8, r8, r9
 80a7e90:	46a3      	mov	fp, r4
 80a7e92:	f854 0b04 	ldr.w	r0, [r4], #4
 80a7e96:	2800      	cmp	r0, #0
 80a7e98:	d0f2      	beq.n	80a7e80 <_findenv_r+0x24>
 80a7e9a:	4642      	mov	r2, r8
 80a7e9c:	4649      	mov	r1, r9
 80a7e9e:	f7ff fc6f 	bl	80a7780 <strncmp>
 80a7ea2:	2800      	cmp	r0, #0
 80a7ea4:	d1f4      	bne.n	80a7e90 <_findenv_r+0x34>
 80a7ea6:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80a7eaa:	eb03 0508 	add.w	r5, r3, r8
 80a7eae:	f813 3008 	ldrb.w	r3, [r3, r8]
 80a7eb2:	2b3d      	cmp	r3, #61	; 0x3d
 80a7eb4:	d1ec      	bne.n	80a7e90 <_findenv_r+0x34>
 80a7eb6:	f8da 3000 	ldr.w	r3, [sl]
 80a7eba:	4638      	mov	r0, r7
 80a7ebc:	ebab 0303 	sub.w	r3, fp, r3
 80a7ec0:	109b      	asrs	r3, r3, #2
 80a7ec2:	6033      	str	r3, [r6, #0]
 80a7ec4:	f000 f8ee 	bl	80a80a4 <__env_unlock>
 80a7ec8:	1c68      	adds	r0, r5, #1
 80a7eca:	e7dd      	b.n	80a7e88 <_findenv_r+0x2c>
 80a7ecc:	2000023c 	.word	0x2000023c

080a7ed0 <_getenv_r>:
 80a7ed0:	b507      	push	{r0, r1, r2, lr}
 80a7ed2:	aa01      	add	r2, sp, #4
 80a7ed4:	f7ff ffc2 	bl	80a7e5c <_findenv_r>
 80a7ed8:	b003      	add	sp, #12
 80a7eda:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a7ee0 <__gettzinfo>:
 80a7ee0:	4800      	ldr	r0, [pc, #0]	; (80a7ee4 <__gettzinfo+0x4>)
 80a7ee2:	4770      	bx	lr
 80a7ee4:	20000078 	.word	0x20000078

080a7ee8 <gmtime_r>:
 80a7ee8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a7eec:	e9d0 6700 	ldrd	r6, r7, [r0]
 80a7ef0:	460c      	mov	r4, r1
 80a7ef2:	2300      	movs	r3, #0
 80a7ef4:	4630      	mov	r0, r6
 80a7ef6:	4639      	mov	r1, r7
 80a7ef8:	4a4f      	ldr	r2, [pc, #316]	; (80a8038 <gmtime_r+0x150>)
 80a7efa:	f000 f8d9 	bl	80a80b0 <__aeabi_ldivmod>
 80a7efe:	4639      	mov	r1, r7
 80a7f00:	4605      	mov	r5, r0
 80a7f02:	2300      	movs	r3, #0
 80a7f04:	4630      	mov	r0, r6
 80a7f06:	4a4c      	ldr	r2, [pc, #304]	; (80a8038 <gmtime_r+0x150>)
 80a7f08:	f000 f8d2 	bl	80a80b0 <__aeabi_ldivmod>
 80a7f0c:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a7f10:	2a00      	cmp	r2, #0
 80a7f12:	bfbc      	itt	lt
 80a7f14:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 80a7f18:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 80a7f1c:	fbb2 f3f1 	udiv	r3, r2, r1
 80a7f20:	fb01 2213 	mls	r2, r1, r3, r2
 80a7f24:	f04f 013c 	mov.w	r1, #60	; 0x3c
 80a7f28:	60a3      	str	r3, [r4, #8]
 80a7f2a:	fbb2 f3f1 	udiv	r3, r2, r1
 80a7f2e:	fb01 2213 	mls	r2, r1, r3, r2
 80a7f32:	6022      	str	r2, [r4, #0]
 80a7f34:	f04f 0207 	mov.w	r2, #7
 80a7f38:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 80a7f3c:	bfac      	ite	ge
 80a7f3e:	f600 206c 	addwge	r0, r0, #2668	; 0xa6c
 80a7f42:	f600 206b 	addwlt	r0, r0, #2667	; 0xa6b
 80a7f46:	6063      	str	r3, [r4, #4]
 80a7f48:	1cc3      	adds	r3, r0, #3
 80a7f4a:	fb93 f2f2 	sdiv	r2, r3, r2
 80a7f4e:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a7f52:	1a9b      	subs	r3, r3, r2
 80a7f54:	bf48      	it	mi
 80a7f56:	3307      	addmi	r3, #7
 80a7f58:	2800      	cmp	r0, #0
 80a7f5a:	4938      	ldr	r1, [pc, #224]	; (80a803c <gmtime_r+0x154>)
 80a7f5c:	61a3      	str	r3, [r4, #24]
 80a7f5e:	bfbd      	ittte	lt
 80a7f60:	f5a0 330e 	sublt.w	r3, r0, #145408	; 0x23800
 80a7f64:	f5a3 732c 	sublt.w	r3, r3, #688	; 0x2b0
 80a7f68:	fb93 f1f1 	sdivlt	r1, r3, r1
 80a7f6c:	fb90 f1f1 	sdivge	r1, r0, r1
 80a7f70:	f648 62ac 	movw	r2, #36524	; 0x8eac
 80a7f74:	f240 5cb4 	movw	ip, #1460	; 0x5b4
 80a7f78:	4b31      	ldr	r3, [pc, #196]	; (80a8040 <gmtime_r+0x158>)
 80a7f7a:	f240 176d 	movw	r7, #365	; 0x16d
 80a7f7e:	fb03 0001 	mla	r0, r3, r1, r0
 80a7f82:	fbb0 f2f2 	udiv	r2, r0, r2
 80a7f86:	fbb0 f3fc 	udiv	r3, r0, ip
 80a7f8a:	4402      	add	r2, r0
 80a7f8c:	1ad2      	subs	r2, r2, r3
 80a7f8e:	4b2d      	ldr	r3, [pc, #180]	; (80a8044 <gmtime_r+0x15c>)
 80a7f90:	2664      	movs	r6, #100	; 0x64
 80a7f92:	fbb0 f3f3 	udiv	r3, r0, r3
 80a7f96:	1ad3      	subs	r3, r2, r3
 80a7f98:	fbb3 f5f7 	udiv	r5, r3, r7
 80a7f9c:	fbb3 f3fc 	udiv	r3, r3, ip
 80a7fa0:	fbb5 f2f6 	udiv	r2, r5, r6
 80a7fa4:	1ad3      	subs	r3, r2, r3
 80a7fa6:	4403      	add	r3, r0
 80a7fa8:	2099      	movs	r0, #153	; 0x99
 80a7faa:	fb07 3315 	mls	r3, r7, r5, r3
 80a7fae:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 80a7fb2:	f10c 0c02 	add.w	ip, ip, #2
 80a7fb6:	fbbc f7f0 	udiv	r7, ip, r0
 80a7fba:	f04f 0805 	mov.w	r8, #5
 80a7fbe:	4378      	muls	r0, r7
 80a7fc0:	3002      	adds	r0, #2
 80a7fc2:	fbb0 f0f8 	udiv	r0, r0, r8
 80a7fc6:	f103 0e01 	add.w	lr, r3, #1
 80a7fca:	ebae 0000 	sub.w	r0, lr, r0
 80a7fce:	f240 5ef9 	movw	lr, #1529	; 0x5f9
 80a7fd2:	45f4      	cmp	ip, lr
 80a7fd4:	bf94      	ite	ls
 80a7fd6:	f04f 0c02 	movls.w	ip, #2
 80a7fda:	f06f 0c09 	mvnhi.w	ip, #9
 80a7fde:	4467      	add	r7, ip
 80a7fe0:	f44f 7cc8 	mov.w	ip, #400	; 0x190
 80a7fe4:	fb0c 5101 	mla	r1, ip, r1, r5
 80a7fe8:	2f01      	cmp	r7, #1
 80a7fea:	bf98      	it	ls
 80a7fec:	3101      	addls	r1, #1
 80a7fee:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 80a7ff2:	d30c      	bcc.n	80a800e <gmtime_r+0x126>
 80a7ff4:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 80a7ff8:	61e3      	str	r3, [r4, #28]
 80a7ffa:	2300      	movs	r3, #0
 80a7ffc:	f2a1 716c 	subw	r1, r1, #1900	; 0x76c
 80a8000:	60e0      	str	r0, [r4, #12]
 80a8002:	e9c4 7104 	strd	r7, r1, [r4, #16]
 80a8006:	4620      	mov	r0, r4
 80a8008:	6223      	str	r3, [r4, #32]
 80a800a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a800e:	f015 0f03 	tst.w	r5, #3
 80a8012:	d102      	bne.n	80a801a <gmtime_r+0x132>
 80a8014:	fb06 5212 	mls	r2, r6, r2, r5
 80a8018:	b95a      	cbnz	r2, 80a8032 <gmtime_r+0x14a>
 80a801a:	f44f 76c8 	mov.w	r6, #400	; 0x190
 80a801e:	fbb5 f2f6 	udiv	r2, r5, r6
 80a8022:	fb06 5212 	mls	r2, r6, r2, r5
 80a8026:	fab2 f282 	clz	r2, r2
 80a802a:	0952      	lsrs	r2, r2, #5
 80a802c:	333b      	adds	r3, #59	; 0x3b
 80a802e:	4413      	add	r3, r2
 80a8030:	e7e2      	b.n	80a7ff8 <gmtime_r+0x110>
 80a8032:	2201      	movs	r2, #1
 80a8034:	e7fa      	b.n	80a802c <gmtime_r+0x144>
 80a8036:	bf00      	nop
 80a8038:	00015180 	.word	0x00015180
 80a803c:	00023ab1 	.word	0x00023ab1
 80a8040:	fffdc54f 	.word	0xfffdc54f
 80a8044:	00023ab0 	.word	0x00023ab0

080a8048 <labs>:
 80a8048:	2800      	cmp	r0, #0
 80a804a:	bfb8      	it	lt
 80a804c:	4240      	neglt	r0, r0
 80a804e:	4770      	bx	lr

080a8050 <__retarget_lock_acquire>:
 80a8050:	4770      	bx	lr

080a8052 <__retarget_lock_acquire_recursive>:
 80a8052:	4770      	bx	lr

080a8054 <__retarget_lock_release>:
 80a8054:	4770      	bx	lr

080a8056 <__retarget_lock_release_recursive>:
 80a8056:	4770      	bx	lr

080a8058 <__ascii_mbtowc>:
 80a8058:	b082      	sub	sp, #8
 80a805a:	b901      	cbnz	r1, 80a805e <__ascii_mbtowc+0x6>
 80a805c:	a901      	add	r1, sp, #4
 80a805e:	b142      	cbz	r2, 80a8072 <__ascii_mbtowc+0x1a>
 80a8060:	b14b      	cbz	r3, 80a8076 <__ascii_mbtowc+0x1e>
 80a8062:	7813      	ldrb	r3, [r2, #0]
 80a8064:	600b      	str	r3, [r1, #0]
 80a8066:	7812      	ldrb	r2, [r2, #0]
 80a8068:	1e10      	subs	r0, r2, #0
 80a806a:	bf18      	it	ne
 80a806c:	2001      	movne	r0, #1
 80a806e:	b002      	add	sp, #8
 80a8070:	4770      	bx	lr
 80a8072:	4610      	mov	r0, r2
 80a8074:	e7fb      	b.n	80a806e <__ascii_mbtowc+0x16>
 80a8076:	f06f 0001 	mvn.w	r0, #1
 80a807a:	e7f8      	b.n	80a806e <__ascii_mbtowc+0x16>

080a807c <__ascii_wctomb>:
 80a807c:	4603      	mov	r3, r0
 80a807e:	4608      	mov	r0, r1
 80a8080:	b141      	cbz	r1, 80a8094 <__ascii_wctomb+0x18>
 80a8082:	2aff      	cmp	r2, #255	; 0xff
 80a8084:	d904      	bls.n	80a8090 <__ascii_wctomb+0x14>
 80a8086:	228a      	movs	r2, #138	; 0x8a
 80a8088:	f04f 30ff 	mov.w	r0, #4294967295
 80a808c:	601a      	str	r2, [r3, #0]
 80a808e:	4770      	bx	lr
 80a8090:	2001      	movs	r0, #1
 80a8092:	700a      	strb	r2, [r1, #0]
 80a8094:	4770      	bx	lr
	...

080a8098 <__env_lock>:
 80a8098:	4801      	ldr	r0, [pc, #4]	; (80a80a0 <__env_lock+0x8>)
 80a809a:	f7ff bfda 	b.w	80a8052 <__retarget_lock_acquire_recursive>
 80a809e:	bf00      	nop
 80a80a0:	20000662 	.word	0x20000662

080a80a4 <__env_unlock>:
 80a80a4:	4801      	ldr	r0, [pc, #4]	; (80a80ac <__env_unlock+0x8>)
 80a80a6:	f7ff bfd6 	b.w	80a8056 <__retarget_lock_release_recursive>
 80a80aa:	bf00      	nop
 80a80ac:	20000662 	.word	0x20000662

080a80b0 <__aeabi_ldivmod>:
 80a80b0:	b97b      	cbnz	r3, 80a80d2 <__aeabi_ldivmod+0x22>
 80a80b2:	b972      	cbnz	r2, 80a80d2 <__aeabi_ldivmod+0x22>
 80a80b4:	2900      	cmp	r1, #0
 80a80b6:	bfbe      	ittt	lt
 80a80b8:	2000      	movlt	r0, #0
 80a80ba:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80a80be:	e006      	blt.n	80a80ce <__aeabi_ldivmod+0x1e>
 80a80c0:	bf08      	it	eq
 80a80c2:	2800      	cmpeq	r0, #0
 80a80c4:	bf1c      	itt	ne
 80a80c6:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80a80ca:	f04f 30ff 	movne.w	r0, #4294967295
 80a80ce:	f7fe bc71 	b.w	80a69b4 <__aeabi_idiv0>
 80a80d2:	f1ad 0c08 	sub.w	ip, sp, #8
 80a80d6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80a80da:	2900      	cmp	r1, #0
 80a80dc:	db09      	blt.n	80a80f2 <__aeabi_ldivmod+0x42>
 80a80de:	2b00      	cmp	r3, #0
 80a80e0:	db1a      	blt.n	80a8118 <__aeabi_ldivmod+0x68>
 80a80e2:	f7fe fb05 	bl	80a66f0 <__udivmoddi4>
 80a80e6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a80ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a80ee:	b004      	add	sp, #16
 80a80f0:	4770      	bx	lr
 80a80f2:	4240      	negs	r0, r0
 80a80f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a80f8:	2b00      	cmp	r3, #0
 80a80fa:	db1b      	blt.n	80a8134 <__aeabi_ldivmod+0x84>
 80a80fc:	f7fe faf8 	bl	80a66f0 <__udivmoddi4>
 80a8100:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a8104:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a8108:	b004      	add	sp, #16
 80a810a:	4240      	negs	r0, r0
 80a810c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a8110:	4252      	negs	r2, r2
 80a8112:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a8116:	4770      	bx	lr
 80a8118:	4252      	negs	r2, r2
 80a811a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a811e:	f7fe fae7 	bl	80a66f0 <__udivmoddi4>
 80a8122:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a8126:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a812a:	b004      	add	sp, #16
 80a812c:	4240      	negs	r0, r0
 80a812e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a8132:	4770      	bx	lr
 80a8134:	4252      	negs	r2, r2
 80a8136:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a813a:	f7fe fad9 	bl	80a66f0 <__udivmoddi4>
 80a813e:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a8142:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a8146:	b004      	add	sp, #16
 80a8148:	4252      	negs	r2, r2
 80a814a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a814e:	4770      	bx	lr

080a8150 <dynalib_user>:
 80a8150:	0021 080a 0061 080a 0089 080a 008d 080a     !...a...........
 80a8160:	0000 0000 616d 4378 7275 6572 746e 3143     ....maxCurrentC1
 80a8170:	093e 654e 2077 6573 7074 696f 746e 7320     >.New setpoint s
 80a8180:	7465 6120 2074 2000 6d41 7370 002e 616d     et at . Amps..ma
 80a8190:	4378 7275 6572 746e 3243 093e 654e 2077     xCurrentC2>.New 
 80a81a0:	6573 7074 696f 746e 7320 7465 6120 2074     setpoint set at 
 80a81b0:	7400 7572 0065 6166 736c 0065 7041 7270     .true.false.Appr
 80a81c0:	616f 6863 7920 756f 2072 6163 6472 7420     oach your card t
 80a81d0:	206f 6874 2065 6572 6461 7265 2e2e 002e     o the reader....
 80a81e0:	0045 6843 7261 6567 2072 5600 6c6f 6174     E.Charger .Volta
 80a81f0:	6567 203a 6400 6469 6e20 746f 7220 6365     ge: .did not rec
 80a8200:	6965 6576 6520 6f6e 6775 2068 6f76 746c     eive enough volt
 80a8210:	6761 2065 6164 6174 4300 7275 6572 746e     age data.Current
 80a8220:	203a 6400 6469 6e20 746f 7220 6365 6965     : .did not recei
 80a8230:	6576 6520 6f6e 6775 2068 7563 7272 6e65     ve enough curren
 80a8240:	2074 6164 6174 4600 6572 7571 6e65 7963     t data.Frequency
 80a8250:	203a 6400 6469 6e20 746f 7220 6365 6965     : .did not recei
 80a8260:	6576 6520 6f6e 6775 2068 7266 7165 6575     ve enough freque
 80a8270:	636e 2079 6164 6174 5000 776f 7265 203a     ncy data.Power: 
 80a8280:	6400 6469 6e20 746f 7220 6365 6965 6576     .did not receive
 80a8290:	6520 6f6e 6775 2068 6f70 6577 2072 6164      enough power da
 80a82a0:	6174 4500 656e 6772 3a79 0020 6964 2064     ta.Energy: .did 
 80a82b0:	6f6e 2074 6572 6563 7669 2065 6e65 756f     not receive enou
 80a82c0:	6867 6520 656e 6772 2079 6164 6174 6c00     gh energy data.l
 80a82d0:	6f6f 7270 6165 3e64 5309 7265 6169 206c     oopread>.Serial 
 80a82e0:	6552 6461 4520 7272 726f 0021 4148 654e     Read Error!.HANe
 80a82f0:	7376 2f65 6870 746f 6e6f 614d 4378 0031     vse/photonMaxC1.
 80a8300:	4148 654e 7376 2f65 6870 746f 6e6f 614d     HANevse/photonMa
 80a8310:	4378 0032 3030 4800 4e41 7665 6573 702f     xC2.00.HANevse/p
 80a8320:	6f68 6f74 436e 6e6f 6576 7472 6465 002f     hotonConverted/.
 80a8330:	7573 6363 7365 6673 6c75 7320 6174 7472     successful start
 80a8340:	6e20 7765 6320 6168 6772 0065 6863 7261      new charge.char
 80a8350:	6567 2072 7369 6620 6572 2c65 6220 7475     ger is free, but
 80a8360:	6320 7261 2064 6177 2073 7773 7069 6465      card was swiped
 80a8370:	6920 206e 6874 2065 616c 7473 3220 2030      in the last 20 
 80a8380:	6573 0063 6863 7261 6567 2072 7369 6f20     sec.charger is o
 80a8390:	6363 7075 6569 2064 7962 6120 6f6e 6874     ccupied by anoth
 80a83a0:	7265 7520 6573 0072 7573 6363 7365 6673     er user.successf
 80a83b0:	6c75 7320 6f74 2070 6863 7261 6567 7320     ul stop charge s
 80a83c0:	7365 6973 6e6f 6300 6e6f 6573 7563 6974     ession.consecuti
 80a83d0:	6576 5220 4946 2044 7773 7069 2065 6977     ve RFID swipe wi
 80a83e0:	6874 6e69 3220 7330 6f20 2066 656e 2077     thin 20s of new 
 80a83f0:	6863 7261 6567 7320 6174 7472 7900 756f     charge start.you
 80a8400:	6120 6572 6120 726c 6165 7964 6320 6168      are already cha
 80a8410:	6772 6e69 2067 7461 6120 6f6e 6874 7265     rging at another
 80a8420:	6320 6168 6772 7265 7900 756f 6120 6572      charger.you are
 80a8430:	6920 206e 6874 2065 7375 7265 696c 7473      in the userlist
 80a8440:	202c 7562 2074 6f6e 2074 6576 6972 6966     , but not verifi
 80a8450:	6465 6220 2079 6461 696d 006e 7573 6363     ed by admin.succ
 80a8460:	7365 6673 6c75 5220 4946 2044 6572 6461     essful RFID read
 80a8470:	202c 7562 2074 6f79 2075 7261 2065 6f6e     , but you are no
 80a8480:	2074 6e69 7420 6568 7520 6573 6c72 7369     t in the userlis
 80a8490:	0074 5245 4f52 3a52 7520 6b6e 6f6e 6e77     t.ERROR: unknown
 80a84a0:	7320 6563 616e 6972 006f 514d 5454 093e      scenario.MQTT>.
 80a84b0:	6f43 6e6e 6365 6974 676e 7420 206f 514d     Connecting to MQ
 80a84c0:	5454 6220 6f72 656b 2e72 2e2e 4500 2d56     TT broker....EV-
 80a84d0:	6850 746f 6e6f 742d 7365 3174 4d00 5451     Photon-test1.MQT
 80a84e0:	3e54 4309 6e6f 656e 7463 6465 4800 4e41     T>.Connected.HAN
 80a84f0:	7665 6573 652f 656e 6772 4d79 7465 7265     evse/energyMeter
 80a8500:	4800 4e41 7665 6573 612f 6c6c 776f 7355     .HANevse/allowUs
 80a8510:	7265 4800 4e41 7665 6573 722f 7365 7465     er.HANevse/reset
 80a8520:	6c4f 6d69 7865 4800 4e41 7665 6573 722f     Olimex.HANevse/r
 80a8530:	7365 7465 6850 746f 6e6f 4800 4e41 7665     esetPhoton.HANev
 80a8540:	6573 732f 6977 6374 5468 7365 0074 4148     se/switchTest.HA
 80a8550:	654e 7376 2f65 616d 4378 0031 4148 654e     Nevse/maxC1.HANe
 80a8560:	7376 2f65 616d 4378 0032 514d 5454 093e     vse/maxC2.MQTT>.
 80a8570:	6f43 6e6e 6365 6974 6e6f 6620 6961 656c     Connection faile
 80a8580:	0064 514d 5454 093e 6552 7274 6979 676e     d.MQTT>.Retrying
 80a8590:	2e2e 002e 3156 5600 0032 3356 4900 0031     ....V1.V2.V3.I1.
 80a85a0:	3249 4900 0033 0046 7355 7265 4449 5300     I2.I3.F.UserID.S
 80a85b0:	636f 656b 4974 0044 6c25 0075 4148 654e     ocketID.%lu.HANe
 80a85c0:	7376 2f65 6870 746f 6e6f 654d 7361 7275     vse/photonMeasur
 80a85d0:	0065 6c25 0064 3020 7200 6165 4364 7261     e.%ld. 0.readCar
 80a85e0:	3e64 5509 4449 7420 6761 6f20 206e 6863     d>.UID tag on ch
 80a85f0:	7261 6567 3172 003a 7355 7265 6449 4300     arger1:.UserId.C
 80a8600:	6168 6772 7265 5300 6174 7472 6954 656d     harger.StartTime
 80a8610:	4800 4e41 7665 6573 752f 6470 7461 5565     .HANevse/updateU
 80a8620:	6573 0072 6572 6461 6143 6472 093e 4955     ser.readCard>.UI
 80a8630:	2044 6174 2067 6e6f 6320 6168 6772 7265     D tag on charger
 80a8640:	3a32 5400 6d69 6f65 7475 6320 6168 6772     2:.Timeout charg
 80a8650:	7265 4e00 206f 4449 6d00 7861 7543 7272     er.No ID.maxCurr
 80a8660:	6e65 4374 0031 616d 4378 7275 6572 746e     entC1.maxCurrent
 80a8670:	3243 7000 6f72 4d67 646f 4f65 6d6c 0078     C2.progModeOlmx.
 80a8680:	6572 6573 5074 7261 6974 6c63 5700 6669     resetParticl.Wif
 80a8690:	5369 6769 616e 006c 6e69 7469 4652 4449     iSignal.initRFID
 80a86a0:	6300 7275 6572 746e 7453 0072 6853 7261     .currentStr.Shar
 80a86b0:	5665 7261 5400 706f 6369 4c00 7461 7365     eVar.Topic.Lates
 80a86c0:	2074 7453 7261 3e74 0009 202c 6200 6f72     t Start>.., .bro
 80a86d0:	656b 2e72 6968 6576 716d 632e 6d6f 7300     ker.hivemq.com.s
 80a86e0:	7465 6f50 6e69 0074 3939 4d00 5451 3e54     etPoint.99.MQTT>
 80a86f0:	4309 6c61 626c 6361 206b 7566 636e 6974     .Callback functi
 80a8700:	6e6f 6920 2073 6163 6c6c 6465 6120 3a74     on is called at:
 80a8710:	0020 0000                                    ...

080a8714 <_ZTV16JsonWriterStaticILj512EE>:
	...
 80a871c:	024d 080a 0261 080a 0400 514d 5454 0004     M...a.....MQTT..
 80a872c:	4d06 4951 6473 0370 3025 7834 5c00 2575     .MQIsdp.%04x.\u%
 80a873c:	3430 0058 2e25 662a 2500 0066               04X.%.*f.%f.

080a8748 <_ZTV10JsonBuffer>:
	...
 80a8750:	2a1d 080a 2a39 080a                         .*..9*..

080a8758 <_ZTV10JsonParser>:
	...
 80a8760:	2a75 080a 2a99 080a                         u*...*..

080a8768 <_ZTV10JsonWriter>:
	...
 80a8770:	2a4d 080a 2a61 080a 6977 6972 676e 5400     M*..a*..wiring.T
 80a8780:	5043 6c43 6569 746e 7320 636f 656b 3d74     CPClient socket=
 80a8790:	7825 0000                                   %x..

080a8794 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80a879c:	3c2f 080a 3c55 080a 4077 080a 3c63 080a     /<..U<..w@..c<..
 80a87ac:	3c31 080a                                   1<..

080a87b0 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...

080a87b8 <_ZTV9TCPClient>:
	...
 80a87c0:	3c69 080a 3c9d 080a 3beb 080a 3c05 080a     i<...<...;...<..
 80a87d0:	3e79 080a 3cff 080a 3cd1 080a 3c2d 080a     y>...<...<..-<..
 80a87e0:	3d99 080a 407d 080a 3d33 080a 3eed 080a     .=..}@..3=...>..
 80a87f0:	3f9b 080a 3f53 080a 3c15 080a 3f61 080a     .?..S?...<..a?..
 80a8800:	3cb1 080a 616e 006e 6e69 0066 766f 0066     .<..nan.inf.ovf.
 80a8810:	7061 0070 2b25 3330 3a64 3025 7532 2500     app.%+03d:%02u.%
 80a8820:	2d59 6d25 252d 5464 4825 253a 3a4d 5325     Y-%m-%dT%H:%M:%S
 80a8830:	7a25 6100 6373 6974 656d 0000               %z.asctime..

080a883c <_ZTV9IPAddress>:
	...
 80a8844:	4c23 080a 4c13 080a 4c15 080a               #L...L...L..

080a8850 <_ZTV9USBSerial>:
	...
 80a8858:	4d05 080a 4d6b 080a 4d43 080a 44f1 080a     .M..kM..CM...D..
 80a8868:	4d35 080a 4d07 080a 4d17 080a 4d65 080a     5M...M...M..eM..
 80a8878:	4d27 080a 4d01 080a                         'M...M..

080a8880 <_ZTV11USARTSerial>:
	...
 80a8888:	4e69 080a 4ed1 080a 4ead 080a 44f1 080a     iN...N...N...D..
 80a8898:	4e7d 080a 4e99 080a 4e8b 080a 4ea7 080a     }N...N...N...N..
 80a88a8:	4e6b 080a 4e6f 080a                         kN..oN..

080a88b0 <_ZTV7TwoWire>:
	...
 80a88b8:	4fa1 080a 4feb 080a 4fc3 080a 4fa3 080a     .O...O...O...O..
 80a88c8:	4fcb 080a 4fd3 080a 4fdb 080a 4fe3 080a     .O...O...O...O..

080a88d8 <_ZTVN5spark9WiFiClassE>:
	...
 80a88e0:	50c7 080a 50bd 080a 50b3 080a 5023 080a     .P...P...P..#P..
 80a88f0:	4787 080a 50a7 080a 509b 080a 5093 080a     .G...P...P...P..
 80a8900:	5089 080a 507f 080a 503b 080a               .P...P..;P..

080a890c <_ZTV10WiFiSignal>:
	...
 80a8914:	501d 080a 502d 080a 501f 080a 50d1 080a     .P..-P...P...P..
 80a8924:	5101 080a 5125 080a 5155 080a               .Q..%Q..UQ..

080a8930 <_ZTVN5spark12NetworkClassE>:
	...
 80a8938:	5235 080a 523f 080a 5249 080a 5253 080a     5R..?R..IR..SR..
 80a8948:	525d 080a 5269 080a 5275 080a 5281 080a     ]R..iR..uR...R..
 80a8958:	5289 080a 5293 080a 529d 080a               .R...R...R..

080a8964 <_ZSt7nothrow>:
	...

080a8965 <_ZTSSt19_Sp_make_shared_tag>:
 80a8965:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
 80a8975:	6572 5f64 6174 0067 0000                     red_tag....

080a8980 <_ZTISt19_Sp_make_shared_tag>:
 80a8980:	89c0 080a 8965 080a                         ....e...

080a8988 <_ZTIN10__cxxabiv117__class_type_infoE>:
 80a8988:	8a20 080a 8994 080a 8a44 080a                .......D...

080a8994 <_ZTSN10__cxxabiv117__class_type_infoE>:
 80a8994:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
 80a89a4:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
 80a89b4:	0045 0000                                   E...

080a89b8 <_ZTVN10__cxxabiv117__class_type_infoE>:
 80a89b8:	0000 0000 8988 080a 5531 080a 5545 080a     ........1U..EU..
 80a89c8:	56dd 080a 56dd 080a 55af 080a 54f1 080a     .V...V...U...T..
 80a89d8:	5597 080a 5559 080a 5525 080a               .U..YU..%U..

080a89e4 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
 80a89e4:	8a20 080a 89f0 080a 8988 080a                ...........

080a89f0 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
 80a89f0:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
 80a8a00:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
 80a8a10:	666e 456f 0000 0000                         nfoE....

080a8a18 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
 80a8a18:	0000 0000 89e4 080a 55d9 080a 55ed 080a     .........U...U..
 80a8a28:	56dd 080a 56dd 080a 55af 080a 54f1 080a     .V...V...U...T..
 80a8a38:	56b1 080a 563d 080a 5601 080a               .V..=V...V..

080a8a44 <_ZTISt9type_info>:
 80a8a44:	89c0 080a 8a4c 080a                         ....L...

080a8a4c <_ZTSSt9type_info>:
 80a8a4c:	7453 7439 7079 5f65 6e69 6f66 2500 332e     St9type_info.%.3
 80a8a5c:	2073 2e25 7333 3325 2064 2e25 6432 253a     s %.3s%3d %.2d:%
 80a8a6c:	322e 3a64 2e25 6432 2520 0a64                .2d:%.2d %d..

080a8a79 <day_name.4782>:
 80a8a79:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
 80a8a89:	6972 6153                                    riSat

080a8a8e <mon_name.4783>:
 80a8a8e:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
 80a8a9e:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
 80a8aae:	4476 6365 0000                              vDec..

080a8ab4 <__month_lengths>:
 80a8ab4:	001f 0000 001c 0000 001f 0000 001e 0000     ................
 80a8ac4:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 80a8ad4:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 80a8ae4:	001f 0000 001d 0000 001f 0000 001e 0000     ................
 80a8af4:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 80a8b04:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 80a8b14:	7325 2e25 642a 2500 2573 2e30 642a 2b00     %s%.*d.%s%0.*d.+
 80a8b24:	2d00 2500 6432 2500 322e 2f64 2e25 6432     .-.%2d.%.2d/%.2d
 80a8b34:	252f 322e 0064 2d59 6d25 252d 0064 2a2e     /%.2d.Y-%m-%d..*
 80a8b44:	0075 2e25 6433 2500 6c6c 0064 2e25 6432     u.%.3d.%lld.%.2d
 80a8b54:	253a 322e 3a64 2e25 6432 2500 302b 6c33     :%.2d:%.2d.%+03l
 80a8b64:	2564 322e 646c 4a00 6e61 4600 6265 4d00     d%.2ld.Jan.Feb.M
 80a8b74:	7261 4100 7270 4d00 7961 4a00 6e75 4a00     ar.Apr.May.Jun.J
 80a8b84:	6c75 4100 6775 5300 7065 4f00 7463 4e00     ul.Aug.Sep.Oct.N
 80a8b94:	766f 4400 6365 4a00 6e61 6175 7972 4600     ov.Dec.January.F
 80a8ba4:	6265 7572 7261 0079 614d 6372 0068 7041     ebruary.March.Ap
 80a8bb4:	6972 006c 754a 656e 4a00 6c75 0079 7541     ril.June.July.Au
 80a8bc4:	7567 7473 5300 7065 6574 626d 7265 4f00     gust.September.O
 80a8bd4:	7463 626f 7265 4e00 766f 6d65 6562 0072     ctober.November.
 80a8be4:	6544 6563 626d 7265 5300 6e75 4d00 6e6f     December.Sun.Mon
 80a8bf4:	5400 6575 5700 6465 5400 7568 4600 6972     .Tue.Wed.Thu.Fri
 80a8c04:	5300 7461 5300 6e75 6164 0079 6f4d 646e     .Sat.Sunday.Mond
 80a8c14:	7961 5400 6575 6473 7961 5700 6465 656e     ay.Tuesday.Wedne
 80a8c24:	6473 7961 5400 7568 7372 6164 0079 7246     sday.Thursday.Fr
 80a8c34:	6469 7961 5300 7461 7275 6164 0079 4825     iday.Saturday.%H
 80a8c44:	253a 3a4d 5325 2500 2f6d 6425 252f 0079     :%M:%S.%m/%d/%y.
 80a8c54:	6125 2520 2062 6525 2520 3a48 4d25 253a     %a %b %e %H:%M:%
 80a8c64:	2053 5925 4100 004d 4d50 2500 2061 6225     S %Y.AM.PM.%a %b
 80a8c74:	2520 2065 4825 253a 3a4d 5325 2520 205a      %e %H:%M:%S %Z 
 80a8c84:	5925 6d00 0064 4925 253a 3a4d 5325 2520     %Y.md.%I:%M:%S %
 80a8c94:	0070 0000                                   p...

080a8c98 <_C_time_locale>:
 80a8c98:	8b6b 080a 8b6f 080a 8b73 080a 8b77 080a     k...o...s...w...
 80a8ca8:	8b7b 080a 8b7f 080a 8b83 080a 8b87 080a     {...............
 80a8cb8:	8b8b 080a 8b8f 080a 8b93 080a 8b97 080a     ................
 80a8cc8:	8b9b 080a 8ba3 080a 8bac 080a 8bb2 080a     ................
 80a8cd8:	8b7b 080a 8bb8 080a 8bbd 080a 8bc2 080a     {...............
 80a8ce8:	8bc9 080a 8bd3 080a 8bdb 080a 8be4 080a     ................
 80a8cf8:	8bed 080a 8bf1 080a 8bf5 080a 8bf9 080a     ................
 80a8d08:	8bfd 080a 8c01 080a 8c05 080a 8c09 080a     ................
 80a8d18:	8c10 080a 8c17 080a 8c1f 080a 8c29 080a     ............)...
 80a8d28:	8c32 080a 8c39 080a 8c42 080a 8c4b 080a     2...9...B...K...
 80a8d38:	8c54 080a 8c69 080a 8c6c 080a 8c6f 080a     T...i...l...o...
 80a8d48:	8b9b 080a 8ba3 080a 8bac 080a 8bb2 080a     ................
 80a8d58:	8b7b 080a 8bb8 080a 8bbd 080a 8bc2 080a     {...............
 80a8d68:	8bc9 080a 8bd3 080a 8bdb 080a 8be4 080a     ................
 80a8d78:	8c87 080a 8c8a 080a 86c9 080a 86c9 080a     ................
 80a8d88:	86c9 080a 86c9 080a 86c9 080a 5a54 4700     ............TZ.G
 80a8d98:	544d 2500 3031 5e5b 2d30 2c39 2d2b 255d     MT.%10[^0-9,+-]%
 80a8da8:	006e 254d 7568 6e25 252e 7568 6e25 252e     n.M%hu%n.%hu%n.%
 80a8db8:	7568 6e25 2f00 6825 2575 3a6e 6825 2575     hu%n./%hu%n:%hu%
 80a8dc8:	3a6e 6825 2575 006e                         n:%hu%n.

080a8dd0 <_ctype_>:
 80a8dd0:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 80a8de0:	2020 2020 2020 2020 2020 2020 2020 2020                     
 80a8df0:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 80a8e00:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 80a8e10:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 80a8e20:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 80a8e30:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 80a8e40:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 80a8e50:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
 80a8ed0:	4300 5000 534f 5849                          .C.POSIX.

080a8ed9 <link_const_variable_data_end>:
 80a8ed9:	00          	.byte	0x00
	...

080a8edc <link_constructors_location>:
 80a8edc:	080a1681 	.word	0x080a1681
 80a8ee0:	080a3b05 	.word	0x080a3b05
 80a8ee4:	080a4795 	.word	0x080a4795
 80a8ee8:	080a4a25 	.word	0x080a4a25
 80a8eec:	080a4a5d 	.word	0x080a4a5d
 80a8ef0:	080a5221 	.word	0x080a5221
 80a8ef4:	080a5305 	.word	0x080a5305
 80a8ef8:	080a5421 	.word	0x080a5421

080a8efc <link_constructors_end>:
 80a8efc:	00000000 	.word	0x00000000
