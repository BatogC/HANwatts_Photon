
d:/UNI_S5/new_particle_code/2020_photon_code/target/2.0.0/photon/2020_photon_code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000ace0  080a0020  080a0020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  080aad00  080aad00  0001ad00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  40024000  080aad08  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000024c  20000000  080aad0c  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000460  20000250  20000250  00040250  2**3
                  ALLOC
  7 .module_info_suffix 00000028  080aaf58  080aaf58  0003af58  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  080aaf80  080aaf80  0003af80  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   00162bc4  00000000  00000000  0003af84  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00018a13  00000000  00000000  0019db48  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00029832  00000000  00000000  001b655b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00002a58  00000000  00000000  001dfd8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00006cc8  00000000  00000000  001e27e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0002ba9e  00000000  00000000  001e94ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0003a386  00000000  00000000  00214f4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000ba8c1  00000000  00000000  0024f2d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00008410  00000000  00000000  00309b94  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0020:	4809      	ldr	r0, [pc, #36]	; (80a0048 <module_user_pre_init+0x28>)
 80a0022:	490a      	ldr	r1, [pc, #40]	; (80a004c <module_user_pre_init+0x2c>)
void* module_user_pre_init() {
 80a0024:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0026:	4288      	cmp	r0, r1
 80a0028:	d005      	beq.n	80a0036 <module_user_pre_init+0x16>
 80a002a:	4a09      	ldr	r2, [pc, #36]	; (80a0050 <module_user_pre_init+0x30>)
 80a002c:	4282      	cmp	r2, r0
 80a002e:	d002      	beq.n	80a0036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a0030:	1a12      	subs	r2, r2, r0
 80a0032:	f006 fe2b 	bl	80a6c8c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0036:	4807      	ldr	r0, [pc, #28]	; (80a0054 <module_user_pre_init+0x34>)
 80a0038:	4a07      	ldr	r2, [pc, #28]	; (80a0058 <module_user_pre_init+0x38>)
 80a003a:	2100      	movs	r1, #0
 80a003c:	1a12      	subs	r2, r2, r0
 80a003e:	f006 fe33 	bl	80a6ca8 <memset>
    return &link_heap_start;
}
 80a0042:	4806      	ldr	r0, [pc, #24]	; (80a005c <module_user_pre_init+0x3c>)
 80a0044:	bd08      	pop	{r3, pc}
 80a0046:	bf00      	nop
 80a0048:	20000000 	.word	0x20000000
 80a004c:	080aad0c 	.word	0x080aad0c
 80a0050:	2000024c 	.word	0x2000024c
 80a0054:	20000250 	.word	0x20000250
 80a0058:	200006ad 	.word	0x200006ad
 80a005c:	200006ad 	.word	0x200006ad

080a0060 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a0060:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a0062:	f004 fd43 	bl	80a4aec <module_user_init_hook>

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0066:	2500      	movs	r5, #0
 80a0068:	4e05      	ldr	r6, [pc, #20]	; (80a0080 <module_user_init+0x20>)
 80a006a:	4c06      	ldr	r4, [pc, #24]	; (80a0084 <module_user_init+0x24>)
 80a006c:	1ba4      	subs	r4, r4, r6
 80a006e:	08a4      	lsrs	r4, r4, #2
 80a0070:	42a5      	cmp	r5, r4
 80a0072:	d100      	bne.n	80a0076 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0074:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 80a0076:	f856 3b04 	ldr.w	r3, [r6], #4
 80a007a:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a007c:	3501      	adds	r5, #1
 80a007e:	e7f7      	b.n	80a0070 <module_user_init+0x10>
 80a0080:	080aacdc 	.word	0x080aacdc
 80a0084:	080aacfc 	.word	0x080aacfc

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f001 ba50 	b.w	80a152c <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f001 f891 	bl	80a11b4 <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 80a0096:	f004 bceb 	b.w	80a4a70 <_post_loop>

080a009a <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 80a009a:	f003 bc59 	b.w	80a3950 <malloc>

080a009e <_Znaj>:
 80a009e:	f003 bc57 	b.w	80a3950 <malloc>

080a00a2 <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
 80a00a2:	f003 bc5d 	b.w	80a3960 <free>

080a00a6 <_ZdaPv>:
 80a00a6:	f003 bc5b 	b.w	80a3960 <free>

080a00aa <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00aa:	7800      	ldrb	r0, [r0, #0]
 80a00ac:	fab0 f080 	clz	r0, r0
 80a00b0:	0940      	lsrs	r0, r0, #5
 80a00b2:	4770      	bx	lr

080a00b4 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00b4:	2301      	movs	r3, #1
 80a00b6:	7003      	strb	r3, [r0, #0]
 80a00b8:	4770      	bx	lr

080a00ba <_ZN10CloudClass22update_string_variableEPKc18Spark_Data_TypeDefPKvPv>:

    static const void* update_string_variable(const char* name, Spark_Data_TypeDef type, const void* var, void* reserved)
    {
        const String* s = (const String*)var;
        return s->c_str();
    }
 80a00ba:	6810      	ldr	r0, [r2, #0]
 80a00bc:	4770      	bx	lr

080a00be <_Z11resetOlimex6String>:
    while (*pointer++) {
      out.concat(in[index++]);
      }
}

int resetOlimex(String input) {
 80a00be:	b508      	push	{r3, lr}
    digitalWrite(RESET_OLIMEX, LOW);
 80a00c0:	2100      	movs	r1, #0
 80a00c2:	2004      	movs	r0, #4
 80a00c4:	f005 f945 	bl	80a5352 <digitalWrite>
    delay(500);
 80a00c8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a00cc:	f004 fc7a 	bl	80a49c4 <delay>
    digitalWrite(RESET_OLIMEX, HIGH);
 80a00d0:	2101      	movs	r1, #1
 80a00d2:	2004      	movs	r0, #4
 80a00d4:	f005 f93d 	bl	80a5352 <digitalWrite>
    return 1;
}
 80a00d8:	2001      	movs	r0, #1
 80a00da:	bd08      	pop	{r3, pc}

080a00dc <_Z12progModeOlmx6String>:

int resetParticl(String input) {
    System.reset();
}

int progModeOlmx(String input) {
 80a00dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    digitalWrite(WAKEUP_OLIMEX, HIGH);
 80a00de:	2101      	movs	r1, #1
 80a00e0:	2002      	movs	r0, #2
 80a00e2:	f005 f936 	bl	80a5352 <digitalWrite>
    delay(500);
 80a00e6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a00ea:	f004 fc6b 	bl	80a49c4 <delay>
    resetOlimex("");
 80a00ee:	490b      	ldr	r1, [pc, #44]	; (80a011c <_Z12progModeOlmx6String+0x40>)
 80a00f0:	4668      	mov	r0, sp
 80a00f2:	f004 f863 	bl	80a41bc <_ZN6StringC1EPKc>
 80a00f6:	4668      	mov	r0, sp
 80a00f8:	f7ff ffe1 	bl	80a00be <_Z11resetOlimex6String>
 80a00fc:	4668      	mov	r0, sp
 80a00fe:	f004 f813 	bl	80a4128 <_ZN6StringD1Ev>
    delay(500);
 80a0102:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a0106:	f004 fc5d 	bl	80a49c4 <delay>
    digitalWrite(WAKEUP_OLIMEX, LOW);
 80a010a:	2100      	movs	r1, #0
 80a010c:	2002      	movs	r0, #2
 80a010e:	f005 f920 	bl	80a5352 <digitalWrite>
    return 1;
}
 80a0112:	2001      	movs	r0, #1
 80a0114:	b005      	add	sp, #20
 80a0116:	f85d fb04 	ldr.w	pc, [sp], #4
 80a011a:	bf00      	nop
 80a011c:	080aa2c3 	.word	0x080aa2c3

080a0120 <_Z10WifiSignal6String>:
int WifiSignal(String input) {
 80a0120:	b500      	push	{lr}
 80a0122:	b08b      	sub	sp, #44	; 0x2c
    return WiFi.RSSI();
 80a0124:	4904      	ldr	r1, [pc, #16]	; (80a0138 <_Z10WifiSignal6String+0x18>)
 80a0126:	a801      	add	r0, sp, #4
 80a0128:	f005 f80e 	bl	80a5148 <_ZN5spark9WiFiClass4RSSIEv>
 80a012c:	a801      	add	r0, sp, #4
 80a012e:	f004 ffe9 	bl	80a5104 <_ZNK10WiFiSignalcvaEv>
}
 80a0132:	b00b      	add	sp, #44	; 0x2c
 80a0134:	f85d fb04 	ldr.w	pc, [sp], #4
 80a0138:	20000638 	.word	0x20000638

080a013c <_Z12resetParticl6String>:
int resetParticl(String input) {
 80a013c:	b508      	push	{r3, lr}
    System.reset();
 80a013e:	f003 fca4 	bl	80a3a8a <_ZN11SystemClass5resetEv>
	...

080a0144 <_Z12maxCurrentC16String>:
        TESTCASE = false;
        return 0;
    }
}

int maxCurrentC1(String setPointStr) {
 80a0144:	b570      	push	{r4, r5, r6, lr}
 80a0146:	b08a      	sub	sp, #40	; 0x28
    unsigned int setPoint = setPointStr.toInt();
 80a0148:	f004 f993 	bl	80a4472 <_ZNK6String5toIntEv>
    byte olimexMessage[4] = {0xFE,1,setPoint,0xFF};
 80a014c:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
 80a0150:	f8ad 3004 	strh.w	r3, [sp, #4]
 80a0154:	23ff      	movs	r3, #255	; 0xff
 80a0156:	f88d 3007 	strb.w	r3, [sp, #7]
    if (!TESTCASE) {
 80a015a:	4b18      	ldr	r3, [pc, #96]	; (80a01bc <_Z12maxCurrentC16String+0x78>)
    unsigned int setPoint = setPointStr.toInt();
 80a015c:	4605      	mov	r5, r0
    if (!TESTCASE) {
 80a015e:	781c      	ldrb	r4, [r3, #0]
    byte olimexMessage[4] = {0xFE,1,setPoint,0xFF};
 80a0160:	f88d 0006 	strb.w	r0, [sp, #6]
    if (!TESTCASE) {
 80a0164:	bb3c      	cbnz	r4, 80a01b6 <_Z12maxCurrentC16String+0x72>
        Serial1.write(olimexMessage,4);
 80a0166:	f004 fe9f 	bl	80a4ea8 <_Z22__fetch_global_Serial1v>
 80a016a:	2204      	movs	r2, #4
 80a016c:	6803      	ldr	r3, [r0, #0]
 80a016e:	eb0d 0102 	add.w	r1, sp, r2
 80a0172:	68db      	ldr	r3, [r3, #12]
 80a0174:	4798      	blx	r3
        DEBUGPORT.println("maxCurrentC1>\tNew setpoint set at "+String(setPoint)+" Amps.");
 80a0176:	f004 fde5 	bl	80a4d44 <_Z16_fetch_usbserialv>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a017a:	4911      	ldr	r1, [pc, #68]	; (80a01c0 <_Z12maxCurrentC16String+0x7c>)
 80a017c:	4606      	mov	r6, r0
 80a017e:	a806      	add	r0, sp, #24
 80a0180:	f004 f81c 	bl	80a41bc <_ZN6StringC1EPKc>
 80a0184:	220a      	movs	r2, #10
 80a0186:	4629      	mov	r1, r5
 80a0188:	a802      	add	r0, sp, #8
 80a018a:	f004 f89f 	bl	80a42cc <_ZN6StringC1Ejh>
 80a018e:	a902      	add	r1, sp, #8
 80a0190:	a806      	add	r0, sp, #24
 80a0192:	f004 f912 	bl	80a43ba <_ZplRK15StringSumHelperRK6String>
 80a0196:	490b      	ldr	r1, [pc, #44]	; (80a01c4 <_Z12maxCurrentC16String+0x80>)
 80a0198:	f004 f91b 	bl	80a43d2 <_ZplRK15StringSumHelperPKc>
 80a019c:	6801      	ldr	r1, [r0, #0]
 80a019e:	4630      	mov	r0, r6
 80a01a0:	f004 f9a5 	bl	80a44ee <_ZN5Print7printlnEPKc>
 80a01a4:	a802      	add	r0, sp, #8
 80a01a6:	f003 ffbf 	bl	80a4128 <_ZN6StringD1Ev>
class StringSumHelper : public String
 80a01aa:	a806      	add	r0, sp, #24
 80a01ac:	f003 ffbc 	bl	80a4128 <_ZN6StringD1Ev>
        return 0;
 80a01b0:	4620      	mov	r0, r4
    }
    return 1;
}
 80a01b2:	b00a      	add	sp, #40	; 0x28
 80a01b4:	bd70      	pop	{r4, r5, r6, pc}
    return 1;
 80a01b6:	2001      	movs	r0, #1
 80a01b8:	e7fb      	b.n	80a01b2 <_Z12maxCurrentC16String+0x6e>
 80a01ba:	bf00      	nop
 80a01bc:	20000000 	.word	0x20000000
 80a01c0:	080a9e58 	.word	0x080a9e58
 80a01c4:	080a9e7b 	.word	0x080a9e7b

080a01c8 <_Z12maxCurrentC26String>:

int maxCurrentC2(String setPointStr) {
 80a01c8:	b570      	push	{r4, r5, r6, lr}
 80a01ca:	b08a      	sub	sp, #40	; 0x28
    unsigned int setPoint = setPointStr.toInt();
 80a01cc:	f004 f951 	bl	80a4472 <_ZNK6String5toIntEv>
    byte olimexMessage[4] = {0xFE,2,setPoint,0xFF};
 80a01d0:	f240 23fe 	movw	r3, #766	; 0x2fe
 80a01d4:	f8ad 3004 	strh.w	r3, [sp, #4]
 80a01d8:	23ff      	movs	r3, #255	; 0xff
 80a01da:	f88d 3007 	strb.w	r3, [sp, #7]
    if (!TESTCASE) {
 80a01de:	4b18      	ldr	r3, [pc, #96]	; (80a0240 <_Z12maxCurrentC26String+0x78>)
    unsigned int setPoint = setPointStr.toInt();
 80a01e0:	4605      	mov	r5, r0
    if (!TESTCASE) {
 80a01e2:	781c      	ldrb	r4, [r3, #0]
    byte olimexMessage[4] = {0xFE,2,setPoint,0xFF};
 80a01e4:	f88d 0006 	strb.w	r0, [sp, #6]
    if (!TESTCASE) {
 80a01e8:	bb3c      	cbnz	r4, 80a023a <_Z12maxCurrentC26String+0x72>
        Serial1.write(olimexMessage,4);
 80a01ea:	f004 fe5d 	bl	80a4ea8 <_Z22__fetch_global_Serial1v>
 80a01ee:	2204      	movs	r2, #4
 80a01f0:	6803      	ldr	r3, [r0, #0]
 80a01f2:	eb0d 0102 	add.w	r1, sp, r2
 80a01f6:	68db      	ldr	r3, [r3, #12]
 80a01f8:	4798      	blx	r3
        DEBUGPORT.println("maxCurrentC2>\tNew setpoint set at "+String(setPoint)+" Amps.");
 80a01fa:	f004 fda3 	bl	80a4d44 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
 80a01fe:	4911      	ldr	r1, [pc, #68]	; (80a0244 <_Z12maxCurrentC26String+0x7c>)
 80a0200:	4606      	mov	r6, r0
 80a0202:	a806      	add	r0, sp, #24
 80a0204:	f003 ffda 	bl	80a41bc <_ZN6StringC1EPKc>
 80a0208:	220a      	movs	r2, #10
 80a020a:	4629      	mov	r1, r5
 80a020c:	a802      	add	r0, sp, #8
 80a020e:	f004 f85d 	bl	80a42cc <_ZN6StringC1Ejh>
 80a0212:	a902      	add	r1, sp, #8
 80a0214:	a806      	add	r0, sp, #24
 80a0216:	f004 f8d0 	bl	80a43ba <_ZplRK15StringSumHelperRK6String>
 80a021a:	490b      	ldr	r1, [pc, #44]	; (80a0248 <_Z12maxCurrentC26String+0x80>)
 80a021c:	f004 f8d9 	bl	80a43d2 <_ZplRK15StringSumHelperPKc>
 80a0220:	6801      	ldr	r1, [r0, #0]
 80a0222:	4630      	mov	r0, r6
 80a0224:	f004 f963 	bl	80a44ee <_ZN5Print7printlnEPKc>
 80a0228:	a802      	add	r0, sp, #8
 80a022a:	f003 ff7d 	bl	80a4128 <_ZN6StringD1Ev>
class StringSumHelper : public String
 80a022e:	a806      	add	r0, sp, #24
 80a0230:	f003 ff7a 	bl	80a4128 <_ZN6StringD1Ev>
        return 0;
 80a0234:	4620      	mov	r0, r4
    }
    return 1;
}
 80a0236:	b00a      	add	sp, #40	; 0x28
 80a0238:	bd70      	pop	{r4, r5, r6, pc}
    return 1;
 80a023a:	2001      	movs	r0, #1
 80a023c:	e7fb      	b.n	80a0236 <_Z12maxCurrentC26String+0x6e>
 80a023e:	bf00      	nop
 80a0240:	20000000 	.word	0x20000000
 80a0244:	080a9e82 	.word	0x080a9e82
 80a0248:	080a9e7b 	.word	0x080a9e7b

080a024c <_ZN16JsonWriterStaticILj512EED1Ev>:
 * variable.
 *
 * @param BUFFER_SIZE The size of the buffer to reserve.
 */
template <size_t BUFFER_SIZE>
class JsonWriterStatic : public JsonWriter {
 80a024c:	b510      	push	{r4, lr}
 80a024e:	4604      	mov	r4, r0
 80a0250:	4b02      	ldr	r3, [pc, #8]	; (80a025c <_ZN16JsonWriterStaticILj512EED1Ev+0x10>)
 80a0252:	6003      	str	r3, [r0, #0]
 80a0254:	f002 fbb2 	bl	80a29bc <_ZN10JsonWriterD1Ev>
 80a0258:	4620      	mov	r0, r4
 80a025a:	bd10      	pop	{r4, pc}
 80a025c:	080aa3b8 	.word	0x080aa3b8

080a0260 <_ZN16JsonWriterStaticILj512EED0Ev>:
 80a0260:	b510      	push	{r4, lr}
 80a0262:	4604      	mov	r4, r0
 80a0264:	f7ff fff2 	bl	80a024c <_ZN16JsonWriterStaticILj512EED1Ev>
 80a0268:	4620      	mov	r0, r4
 80a026a:	f44f 710c 	mov.w	r1, #560	; 0x230
 80a026e:	f005 f8fa 	bl	80a5466 <_ZdlPvj>
 80a0272:	4620      	mov	r0, r4
 80a0274:	bd10      	pop	{r4, pc}
	...

080a0278 <_Z10switchTest6String>:
int switchTest(String valueString) {
 80a0278:	b570      	push	{r4, r5, r6, lr}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 80a027a:	490b      	ldr	r1, [pc, #44]	; (80a02a8 <_Z10switchTest6String+0x30>)
 80a027c:	4605      	mov	r5, r0
 80a027e:	f004 f8bc 	bl	80a43fa <_ZNK6String6equalsEPKc>
 80a0282:	4e0a      	ldr	r6, [pc, #40]	; (80a02ac <_Z10switchTest6String+0x34>)
    if (valueString == "true") {
 80a0284:	4604      	mov	r4, r0
 80a0286:	b128      	cbz	r0, 80a0294 <_Z10switchTest6String+0x1c>
        client.disconnect();
 80a0288:	4809      	ldr	r0, [pc, #36]	; (80a02b0 <_Z10switchTest6String+0x38>)
 80a028a:	f002 f840 	bl	80a230e <_ZN4MQTT10disconnectEv>
        TESTCASE = true;
 80a028e:	2001      	movs	r0, #1
 80a0290:	7030      	strb	r0, [r6, #0]
}
 80a0292:	bd70      	pop	{r4, r5, r6, pc}
 80a0294:	4907      	ldr	r1, [pc, #28]	; (80a02b4 <_Z10switchTest6String+0x3c>)
 80a0296:	4628      	mov	r0, r5
 80a0298:	f004 f8af 	bl	80a43fa <_ZNK6String6equalsEPKc>
        client.disconnect();
 80a029c:	4804      	ldr	r0, [pc, #16]	; (80a02b0 <_Z10switchTest6String+0x38>)
 80a029e:	f002 f836 	bl	80a230e <_ZN4MQTT10disconnectEv>
        TESTCASE = false;
 80a02a2:	4620      	mov	r0, r4
 80a02a4:	7034      	strb	r4, [r6, #0]
        return 0;
 80a02a6:	e7f4      	b.n	80a0292 <_Z10switchTest6String+0x1a>
 80a02a8:	080a9ea5 	.word	0x080a9ea5
 80a02ac:	20000000 	.word	0x20000000
 80a02b0:	20000500 	.word	0x20000500
 80a02b4:	080a9eaa 	.word	0x080a9eaa

080a02b8 <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(hal_spi_interface_t spi);
  ~SPIClass() = default;
 80a02b8:	b510      	push	{r4, lr}
 80a02ba:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a02bc:	6880      	ldr	r0, [r0, #8]
 80a02be:	b108      	cbz	r0, 80a02c4 <_ZN8SPIClassD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
 80a02c0:	f003 f926 	bl	80a3510 <os_mutex_recursive_destroy>
 80a02c4:	4620      	mov	r0, r4
 80a02c6:	bd10      	pop	{r4, pc}

080a02c8 <_ZN10CloudClass9_variableIcEEbPKT_PK6StringRK17CloudVariableTypeIPKcvE.isra.0>:
    static inline bool _variable(const T *varKey, const String *userVar, const CloudVariableTypeString& userVarType)
 80a02c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        spark_variable_t extra = {};
 80a02ca:	2300      	movs	r3, #0
 80a02cc:	9301      	str	r3, [sp, #4]
 80a02ce:	9303      	str	r3, [sp, #12]
        extra.size = sizeof(extra);
 80a02d0:	230c      	movs	r3, #12
 80a02d2:	f8ad 3004 	strh.w	r3, [sp, #4]
        extra.update = update_string_variable;
 80a02d6:	4b04      	ldr	r3, [pc, #16]	; (80a02e8 <_ZN10CloudClass9_variableIcEEbPKT_PK6StringRK17CloudVariableTypeIPKcvE.isra.0+0x20>)
        return spark_variable(varKey, userVar, CloudVariableTypeString::TYPE_ID, &extra);
 80a02d8:	2204      	movs	r2, #4
        extra.update = update_string_variable;
 80a02da:	9302      	str	r3, [sp, #8]
        return spark_variable(varKey, userVar, CloudVariableTypeString::TYPE_ID, &extra);
 80a02dc:	ab01      	add	r3, sp, #4
 80a02de:	f003 faff 	bl	80a38e0 <spark_variable>
    }
 80a02e2:	b005      	add	sp, #20
 80a02e4:	f85d fb04 	ldr.w	pc, [sp], #4
 80a02e8:	080a00bb 	.word	0x080a00bb

080a02ec <_Z8initRFID6String>:
			break;
		}
	}
}

int initRFID(String input) {
 80a02ec:	b538      	push	{r3, r4, r5, lr}
    //additional config for debugging RFID readers
    pinMode(SS_PIN_CHARGER1, OUTPUT);
 80a02ee:	2101      	movs	r1, #1
 80a02f0:	200b      	movs	r0, #11
 80a02f2:	f005 f81d 	bl	80a5330 <pinMode>
	digitalWrite(SS_PIN_CHARGER1, HIGH);
 80a02f6:	2101      	movs	r1, #1
 80a02f8:	200b      	movs	r0, #11
 80a02fa:	f005 f82a 	bl	80a5352 <digitalWrite>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a02fe:	4d21      	ldr	r5, [pc, #132]	; (80a0384 <_Z8initRFID6String+0x98>)
	pinMode(SS_PIN_CHARGER2, OUTPUT);
 80a0300:	2101      	movs	r1, #1
 80a0302:	200c      	movs	r0, #12
 80a0304:	f005 f814 	bl	80a5330 <pinMode>
	digitalWrite(SS_PIN_CHARGER2, HIGH);
 80a0308:	2101      	movs	r1, #1
 80a030a:	200c      	movs	r0, #12
 80a030c:	f005 f821 	bl	80a5352 <digitalWrite>
 80a0310:	7829      	ldrb	r1, [r5, #0]
 80a0312:	f3bf 8f5b 	dmb	ish
 80a0316:	f011 0401 	ands.w	r4, r1, #1
 80a031a:	d10f      	bne.n	80a033c <_Z8initRFID6String+0x50>
 80a031c:	4628      	mov	r0, r5
 80a031e:	f7ff fec4 	bl	80a00aa <__cxa_guard_acquire>
 80a0322:	b158      	cbz	r0, 80a033c <_Z8initRFID6String+0x50>
 80a0324:	4621      	mov	r1, r4
 80a0326:	4818      	ldr	r0, [pc, #96]	; (80a0388 <_Z8initRFID6String+0x9c>)
 80a0328:	f003 fb6d 	bl	80a3a06 <_ZN8SPIClassC1E19hal_spi_interface_t>
 80a032c:	4628      	mov	r0, r5
 80a032e:	f7ff fec1 	bl	80a00b4 <__cxa_guard_release>
 80a0332:	4a16      	ldr	r2, [pc, #88]	; (80a038c <_Z8initRFID6String+0xa0>)
 80a0334:	4916      	ldr	r1, [pc, #88]	; (80a0390 <_Z8initRFID6String+0xa4>)
 80a0336:	4814      	ldr	r0, [pc, #80]	; (80a0388 <_Z8initRFID6String+0x9c>)
 80a0338:	f005 f890 	bl	80a545c <__aeabi_atexit>
    }
    void begin() {
        instance().begin();
    }
    void begin(uint16_t ss_pin) {
        instance().begin(ss_pin);
 80a033c:	2100      	movs	r1, #0
 80a033e:	4812      	ldr	r0, [pc, #72]	; (80a0388 <_Z8initRFID6String+0x9c>)
 80a0340:	f003 fb70 	bl	80a3a24 <_ZN8SPIClass5beginEt>
  
    SPI.begin(D0);      // Initiate  SPI bus
    //Particle.process();
    delay(50);
 80a0344:	2032      	movs	r0, #50	; 0x32
 80a0346:	f004 fb3d 	bl	80a49c4 <delay>
    mfrc522_Charger1.PCD_Init();   // Initiate MFRC522
 80a034a:	4812      	ldr	r0, [pc, #72]	; (80a0394 <_Z8initRFID6String+0xa8>)
 80a034c:	f001 fbf4 	bl	80a1b38 <_ZN7MFRC5228PCD_InitEv>
    delay(500);
 80a0350:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a0354:	f004 fb36 	bl	80a49c4 <delay>
    mfrc522_Charger2.PCD_Init();   // Initiate MFRC522
 80a0358:	480f      	ldr	r0, [pc, #60]	; (80a0398 <_Z8initRFID6String+0xac>)
 80a035a:	f001 fbed 	bl	80a1b38 <_ZN7MFRC5228PCD_InitEv>
    ////mfrc522_Charger1.PCD_SetAntennaGain(mfrc522.RxGain_max);
    mfrc522_Charger1.PCD_SetAntennaGain(mfrc522_Charger1.RxGain_max);
 80a035e:	2170      	movs	r1, #112	; 0x70
 80a0360:	480c      	ldr	r0, [pc, #48]	; (80a0394 <_Z8initRFID6String+0xa8>)
 80a0362:	f001 fc24 	bl	80a1bae <_ZN7MFRC52218PCD_SetAntennaGainEh>
    mfrc522_Charger2.PCD_SetAntennaGain(mfrc522_Charger2.RxGain_max);
 80a0366:	2170      	movs	r1, #112	; 0x70
 80a0368:	480b      	ldr	r0, [pc, #44]	; (80a0398 <_Z8initRFID6String+0xac>)
 80a036a:	f001 fc20 	bl	80a1bae <_ZN7MFRC52218PCD_SetAntennaGainEh>
    
    DEBUGPORT.println("Approach your card to the reader...");
 80a036e:	f004 fce9 	bl	80a4d44 <_Z16_fetch_usbserialv>
 80a0372:	490a      	ldr	r1, [pc, #40]	; (80a039c <_Z8initRFID6String+0xb0>)
 80a0374:	f004 f8bb 	bl	80a44ee <_ZN5Print7printlnEPKc>
    DEBUGPORT.println();    
 80a0378:	f004 fce4 	bl	80a4d44 <_Z16_fetch_usbserialv>
 80a037c:	f004 f8ab 	bl	80a44d6 <_ZN5Print7printlnEv>
    return 1;
}
 80a0380:	2001      	movs	r0, #1
 80a0382:	bd38      	pop	{r3, r4, r5, pc}
 80a0384:	20000254 	.word	0x20000254
 80a0388:	20000258 	.word	0x20000258
 80a038c:	20000250 	.word	0x20000250
 80a0390:	080a02b9 	.word	0x080a02b9
 80a0394:	20000569 	.word	0x20000569
 80a0398:	20000577 	.word	0x20000577
 80a039c:	080a9eb0 	.word	0x080a9eb0

080a03a0 <_ZN10CloudClass7processEv>:
    static void process(void) {
 80a03a0:	b508      	push	{r3, lr}
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a03a2:	f003 f895 	bl	80a34d0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a03a6:	4b03      	ldr	r3, [pc, #12]	; (80a03b4 <_ZN10CloudClass7processEv+0x14>)
 80a03a8:	6018      	str	r0, [r3, #0]
    }
 80a03aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    		spark_process();
 80a03ae:	f003 baa7 	b.w	80a3900 <spark_process>
 80a03b2:	bf00      	nop
 80a03b4:	20000648 	.word	0x20000648

080a03b8 <_ZN10JsonWriter11startObjectEv>:
	bool startObject() { return startObjectOrArray('{', '}'); };
 80a03b8:	227d      	movs	r2, #125	; 0x7d
 80a03ba:	217b      	movs	r1, #123	; 0x7b
 80a03bc:	f002 bdf9 	b.w	80a2fb2 <_ZN10JsonWriter18startObjectOrArrayEcc>

080a03c0 <_Z18bytesArrToFloatArrPcjPfj>:

    return output;
}

bool bytesArrToFloatArr(char * Arr, unsigned int ArrLen, float * OutputArr, unsigned int FloatLen)
{
 80a03c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    //FloatTriplet TriOutput;
    for(int i=0; (i<FloatLen) && (4*i+3 < ArrLen); i++)
 80a03c2:	2400      	movs	r4, #0
 80a03c4:	0889      	lsrs	r1, r1, #2
 80a03c6:	429c      	cmp	r4, r3
 80a03c8:	d018      	beq.n	80a03fc <_Z18bytesArrToFloatArrPcjPfj+0x3c>
 80a03ca:	428c      	cmp	r4, r1
 80a03cc:	f100 0004 	add.w	r0, r0, #4
 80a03d0:	d014      	beq.n	80a03fc <_Z18bytesArrToFloatArrPcjPfj+0x3c>
    {
        float output;

        *((unsigned char *)(&output) + 3) = (unsigned char) Arr[4*i+0];
 80a03d2:	f810 5c04 	ldrb.w	r5, [r0, #-4]
 80a03d6:	f88d 5007 	strb.w	r5, [sp, #7]
        *((unsigned char *)(&output) + 2) = Arr[4*i+1];
 80a03da:	f810 5c03 	ldrb.w	r5, [r0, #-3]
 80a03de:	f88d 5006 	strb.w	r5, [sp, #6]
        *((unsigned char *)(&output) + 1) = Arr[4*i+2];
 80a03e2:	f810 5c02 	ldrb.w	r5, [r0, #-2]
 80a03e6:	f88d 5005 	strb.w	r5, [sp, #5]
        *((unsigned char *)(&output) + 0) = Arr[4*i+3];
 80a03ea:	f810 5c01 	ldrb.w	r5, [r0, #-1]
 80a03ee:	f88d 5004 	strb.w	r5, [sp, #4]
        
        OutputArr[i] = output;
 80a03f2:	9d01      	ldr	r5, [sp, #4]
 80a03f4:	f842 5024 	str.w	r5, [r2, r4, lsl #2]
    for(int i=0; (i<FloatLen) && (4*i+3 < ArrLen); i++)
 80a03f8:	3401      	adds	r4, #1
 80a03fa:	e7e4      	b.n	80a03c6 <_Z18bytesArrToFloatArrPcjPfj+0x6>
    }

    return true;
}
 80a03fc:	2001      	movs	r0, #1
 80a03fe:	b003      	add	sp, #12
 80a0400:	bd30      	pop	{r4, r5, pc}
	...

080a0404 <_Z11stringParsePci>:
    }

    return TriOutput;
}
*/
int stringParse(char * buf, int buflen){
 80a0404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  String cmdValue;
  int Charger=0;
  for (int i=0; i<buflen; i++){
 80a0408:	f04f 0800 	mov.w	r8, #0
int stringParse(char * buf, int buflen){
 80a040c:	b09d      	sub	sp, #116	; 0x74
 80a040e:	4605      	mov	r5, r0
 80a0410:	460e      	mov	r6, r1
  String cmdValue;
 80a0412:	a804      	add	r0, sp, #16
 80a0414:	49c4      	ldr	r1, [pc, #784]	; (80a0728 <_Z11stringParsePci+0x324>)
 80a0416:	f003 fed1 	bl	80a41bc <_ZN6StringC1EPKc>
  int Charger=0;
 80a041a:	4647      	mov	r7, r8
  for (int i=0; i<buflen; i++){
 80a041c:	45b0      	cmp	r8, r6
 80a041e:	f280 81d9 	bge.w	80a07d4 <_Z11stringParsePci+0x3d0>
    if(buf[i]==0x0F && i+2>=buflen) //error check?
 80a0422:	782b      	ldrb	r3, [r5, #0]
 80a0424:	2b0f      	cmp	r3, #15
 80a0426:	d108      	bne.n	80a043a <_Z11stringParsePci+0x36>
 80a0428:	f108 0302 	add.w	r3, r8, #2
 80a042c:	429e      	cmp	r6, r3
 80a042e:	dc04      	bgt.n	80a043a <_Z11stringParsePci+0x36>
    {
      DEBUGPORT.println("E");
 80a0430:	f004 fc88 	bl	80a4d44 <_Z16_fetch_usbserialv>
 80a0434:	49bd      	ldr	r1, [pc, #756]	; (80a072c <_Z11stringParsePci+0x328>)
 80a0436:	f004 f85a 	bl	80a44ee <_ZN5Print7printlnEPKc>
    }
    if((buf[i]==0x0F || buf[i]==0x0E) && i+2<buflen) //we detect a command-character and the next two characters exists
 80a043a:	462c      	mov	r4, r5
 80a043c:	f814 3b01 	ldrb.w	r3, [r4], #1
 80a0440:	f1a3 020e 	sub.w	r2, r3, #14
 80a0444:	2a01      	cmp	r2, #1
 80a0446:	f200 80f0 	bhi.w	80a062a <_Z11stringParsePci+0x226>
 80a044a:	f108 0202 	add.w	r2, r8, #2
 80a044e:	42b2      	cmp	r2, r6
 80a0450:	f280 80eb 	bge.w	80a062a <_Z11stringParsePci+0x226>
      {
        Charger=1;  
      }
      else
      {
        Charger=2;
 80a0454:	2b0f      	cmp	r3, #15
 80a0456:	bf0c      	ite	eq
 80a0458:	2701      	moveq	r7, #1
 80a045a:	2702      	movne	r7, #2
      }
      DEBUGPORT.print("Charger "+String(Charger)+": ");
 80a045c:	f004 fc72 	bl	80a4d44 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
 80a0460:	49b3      	ldr	r1, [pc, #716]	; (80a0730 <_Z11stringParsePci+0x32c>)
 80a0462:	4681      	mov	r9, r0
 80a0464:	a818      	add	r0, sp, #96	; 0x60
 80a0466:	f003 fea9 	bl	80a41bc <_ZN6StringC1EPKc>
 80a046a:	220a      	movs	r2, #10
 80a046c:	4639      	mov	r1, r7
 80a046e:	a814      	add	r0, sp, #80	; 0x50
 80a0470:	f003 ff19 	bl	80a42a6 <_ZN6StringC1Eih>
 80a0474:	a914      	add	r1, sp, #80	; 0x50
 80a0476:	a818      	add	r0, sp, #96	; 0x60
 80a0478:	f003 ff9f 	bl	80a43ba <_ZplRK15StringSumHelperRK6String>
 80a047c:	49ad      	ldr	r1, [pc, #692]	; (80a0734 <_Z11stringParsePci+0x330>)
 80a047e:	f003 ffa8 	bl	80a43d2 <_ZplRK15StringSumHelperPKc>
 80a0482:	6801      	ldr	r1, [r0, #0]
 80a0484:	4648      	mov	r0, r9
 80a0486:	f004 f81f 	bl	80a44c8 <_ZN5Print5printEPKc>
 80a048a:	a814      	add	r0, sp, #80	; 0x50
 80a048c:	f003 fe4c 	bl	80a4128 <_ZN6StringD1Ev>
class StringSumHelper : public String
 80a0490:	a818      	add	r0, sp, #96	; 0x60
 80a0492:	f003 fe49 	bl	80a4128 <_ZN6StringD1Ev>
      String measurements;
 80a0496:	49a4      	ldr	r1, [pc, #656]	; (80a0728 <_Z11stringParsePci+0x324>)
 80a0498:	a808      	add	r0, sp, #32
 80a049a:	f003 fe8f 	bl	80a41bc <_ZN6StringC1EPKc>
      switch (buf[i+1])
 80a049e:	7823      	ldrb	r3, [r4, #0]
 80a04a0:	3b01      	subs	r3, #1
 80a04a2:	2b05      	cmp	r3, #5
 80a04a4:	f200 80be 	bhi.w	80a0624 <_Z11stringParsePci+0x220>
 80a04a8:	e8df f013 	tbh	[pc, r3, lsl #1]
 80a04ac:	00560006 	.word	0x00560006
 80a04b0:	00eb00c7 	.word	0x00eb00c7
 80a04b4:	01870164 	.word	0x01870164
      {
        case 1:
          //Phase Voltage
          if(buflen>4)
 80a04b8:	2e04      	cmp	r6, #4
 80a04ba:	dd47      	ble.n	80a054c <_Z11stringParsePci+0x148>
          {
              //Voltage[Charger-1] = bytesToFloat(buf[i+2], buf[i+3], buf[i+4], buf[i+5]);
              float VoltageArr[3];
              if(bytesArrToFloatArr(&buf[i+2], 12, VoltageArr,3))
 80a04bc:	1ca8      	adds	r0, r5, #2
 80a04be:	2303      	movs	r3, #3
 80a04c0:	210c      	movs	r1, #12
 80a04c2:	aa01      	add	r2, sp, #4
 80a04c4:	f7ff ff7c 	bl	80a03c0 <_Z18bytesArrToFloatArrPcjPfj>
 80a04c8:	4d9b      	ldr	r5, [pc, #620]	; (80a0738 <_Z11stringParsePci+0x334>)
 80a04ca:	f107 39ff 	add.w	r9, r7, #4294967295
          //Line Voltage
          if(buflen>4)
          {
              //Voltage[Charger-1] = bytesToFloat(buf[i+2], buf[i+3], buf[i+4], buf[i+5]);
              float VoltageArr[3];
              if(bytesArrToFloatArr(&buf[i+2], 12, VoltageArr,3))
 80a04ce:	b148      	cbz	r0, 80a04e4 <_Z11stringParsePci+0xe0>
              {
                //Current[Charger-1] = (CurrentArr[0]+CurrentArr[1]+CurrentArr[2])/3;  
                for(int i=0;i<3;i++)
                {
                    LineVoltage[Charger-1][i]=VoltageArr[i];
 80a04d0:	230c      	movs	r3, #12
 80a04d2:	fb03 f309 	mul.w	r3, r3, r9
 80a04d6:	9901      	ldr	r1, [sp, #4]
 80a04d8:	18ea      	adds	r2, r5, r3
 80a04da:	50e9      	str	r1, [r5, r3]
 80a04dc:	9b02      	ldr	r3, [sp, #8]
 80a04de:	6053      	str	r3, [r2, #4]
 80a04e0:	9b03      	ldr	r3, [sp, #12]
 80a04e2:	6093      	str	r3, [r2, #8]
                }
                //Voltage[Charger-1] = {VoltageArr[0],VoltageArr[1],VoltageArr[2]};
              }
              DEBUGPORT.print("Voltage: "+String(LineVoltage[Charger-1][0],4)+" "+String(LineVoltage[Charger-1][1],4)+" "+String(LineVoltage[Charger-1][2],4));
 80a04e4:	f004 fc2e 	bl	80a4d44 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
 80a04e8:	4994      	ldr	r1, [pc, #592]	; (80a073c <_Z11stringParsePci+0x338>)
 80a04ea:	4682      	mov	sl, r0
 80a04ec:	a810      	add	r0, sp, #64	; 0x40
 80a04ee:	f003 fe65 	bl	80a41bc <_ZN6StringC1EPKc>
 80a04f2:	230c      	movs	r3, #12
 80a04f4:	fb03 f309 	mul.w	r3, r3, r9
 80a04f8:	2204      	movs	r2, #4
 80a04fa:	58e9      	ldr	r1, [r5, r3]
 80a04fc:	a80c      	add	r0, sp, #48	; 0x30
 80a04fe:	eb05 0903 	add.w	r9, r5, r3
 80a0502:	f003 ff0a 	bl	80a431a <_ZN6StringC1Efi>
 80a0506:	a90c      	add	r1, sp, #48	; 0x30
 80a0508:	a810      	add	r0, sp, #64	; 0x40
 80a050a:	f003 ff56 	bl	80a43ba <_ZplRK15StringSumHelperRK6String>
 80a050e:	498c      	ldr	r1, [pc, #560]	; (80a0740 <_Z11stringParsePci+0x33c>)
 80a0510:	f003 ff5f 	bl	80a43d2 <_ZplRK15StringSumHelperPKc>
 80a0514:	4605      	mov	r5, r0
 80a0516:	2204      	movs	r2, #4
 80a0518:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80a051c:	a814      	add	r0, sp, #80	; 0x50
 80a051e:	f003 fefc 	bl	80a431a <_ZN6StringC1Efi>
 80a0522:	4628      	mov	r0, r5
 80a0524:	a914      	add	r1, sp, #80	; 0x50
 80a0526:	f003 ff48 	bl	80a43ba <_ZplRK15StringSumHelperRK6String>
 80a052a:	4985      	ldr	r1, [pc, #532]	; (80a0740 <_Z11stringParsePci+0x33c>)
 80a052c:	f003 ff51 	bl	80a43d2 <_ZplRK15StringSumHelperPKc>
 80a0530:	4605      	mov	r5, r0
 80a0532:	2204      	movs	r2, #4
 80a0534:	f8d9 1008 	ldr.w	r1, [r9, #8]
 80a0538:	a818      	add	r0, sp, #96	; 0x60
 80a053a:	f003 feee 	bl	80a431a <_ZN6StringC1Efi>
 80a053e:	a918      	add	r1, sp, #96	; 0x60
 80a0540:	4628      	mov	r0, r5
 80a0542:	f003 ff3a 	bl	80a43ba <_ZplRK15StringSumHelperRK6String>
 80a0546:	6801      	ldr	r1, [r0, #0]
 80a0548:	4650      	mov	r0, sl
 80a054a:	e0d9      	b.n	80a0700 <_Z11stringParsePci+0x2fc>
              DEBUGPORT.print("did not receive enough voltage data");
 80a054c:	f004 fbfa 	bl	80a4d44 <_Z16_fetch_usbserialv>
 80a0550:	497c      	ldr	r1, [pc, #496]	; (80a0744 <_Z11stringParsePci+0x340>)
              DEBUGPORT.print("did not receive enough energy data");
 80a0552:	f003 ffb9 	bl	80a44c8 <_ZN5Print5printEPKc>
 80a0556:	e065      	b.n	80a0624 <_Z11stringParsePci+0x220>
          if(buflen>12) //(buflen>4)
 80a0558:	2e0c      	cmp	r6, #12
 80a055a:	dd6a      	ble.n	80a0632 <_Z11stringParsePci+0x22e>
              if(bytesArrToFloatArr(&buf[i+2], 12, Current[Charger-1],3))
 80a055c:	210c      	movs	r1, #12
 80a055e:	f107 3aff 	add.w	sl, r7, #4294967295
 80a0562:	fb01 fb0a 	mul.w	fp, r1, sl
 80a0566:	4b78      	ldr	r3, [pc, #480]	; (80a0748 <_Z11stringParsePci+0x344>)
 80a0568:	1ca8      	adds	r0, r5, #2
 80a056a:	eb03 090b 	add.w	r9, r3, fp
 80a056e:	464a      	mov	r2, r9
 80a0570:	2303      	movs	r3, #3
 80a0572:	f7ff ff25 	bl	80a03c0 <_Z18bytesArrToFloatArrPcjPfj>
              DEBUGPORT.print("Current: ");
 80a0576:	f004 fbe5 	bl	80a4d44 <_Z16_fetch_usbserialv>
 80a057a:	4974      	ldr	r1, [pc, #464]	; (80a074c <_Z11stringParsePci+0x348>)
 80a057c:	f003 ffa4 	bl	80a44c8 <_ZN5Print5printEPKc>
              DEBUGPORT.print(Current[Charger-1][0],4);DEBUGPORT.print(" ");
 80a0580:	f004 fbe0 	bl	80a4d44 <_Z16_fetch_usbserialv>
 80a0584:	4b70      	ldr	r3, [pc, #448]	; (80a0748 <_Z11stringParsePci+0x344>)
 80a0586:	2204      	movs	r2, #4
 80a0588:	461d      	mov	r5, r3
 80a058a:	f853 100b 	ldr.w	r1, [r3, fp]
 80a058e:	f004 f895 	bl	80a46bc <_ZN5Print5printEfi>
 80a0592:	f004 fbd7 	bl	80a4d44 <_Z16_fetch_usbserialv>
 80a0596:	496a      	ldr	r1, [pc, #424]	; (80a0740 <_Z11stringParsePci+0x33c>)
 80a0598:	f003 ff96 	bl	80a44c8 <_ZN5Print5printEPKc>
              DEBUGPORT.print(Current[Charger-1][1],4);DEBUGPORT.print(" ");
 80a059c:	f004 fbd2 	bl	80a4d44 <_Z16_fetch_usbserialv>
 80a05a0:	2204      	movs	r2, #4
 80a05a2:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80a05a6:	f004 f889 	bl	80a46bc <_ZN5Print5printEfi>
 80a05aa:	f004 fbcb 	bl	80a4d44 <_Z16_fetch_usbserialv>
 80a05ae:	4964      	ldr	r1, [pc, #400]	; (80a0740 <_Z11stringParsePci+0x33c>)
 80a05b0:	f003 ff8a 	bl	80a44c8 <_ZN5Print5printEPKc>
              DEBUGPORT.println(Current[Charger-1][2],4);
 80a05b4:	f004 fbc6 	bl	80a4d44 <_Z16_fetch_usbserialv>
 80a05b8:	2204      	movs	r2, #4
 80a05ba:	f8d9 1008 	ldr.w	r1, [r9, #8]
 80a05be:	f004 f89a 	bl	80a46f6 <_ZN5Print7printlnEfi>
              if((Current[Charger-1][0]+Current[Charger-1][1]+Current[Charger-1][2])<1)
 80a05c2:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80a05c6:	f855 000b 	ldr.w	r0, [r5, fp]
 80a05ca:	f005 fd6f 	bl	80a60ac <__addsf3>
 80a05ce:	f8d9 1008 	ldr.w	r1, [r9, #8]
 80a05d2:	f005 fd6b 	bl	80a60ac <__addsf3>
 80a05d6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80a05da:	f006 f80d 	bl	80a65f8 <__aeabi_fcmplt>
 80a05de:	4d5c      	ldr	r5, [pc, #368]	; (80a0750 <_Z11stringParsePci+0x34c>)
 80a05e0:	b110      	cbz	r0, 80a05e8 <_Z11stringParsePci+0x1e4>
                numberOfZeroReadings[Charger-1]++;
 80a05e2:	f855 002a 	ldr.w	r0, [r5, sl, lsl #2]
 80a05e6:	3001      	adds	r0, #1
 80a05e8:	4b5a      	ldr	r3, [pc, #360]	; (80a0754 <_Z11stringParsePci+0x350>)
 80a05ea:	f845 002a 	str.w	r0, [r5, sl, lsl #2]
              for(int i=18;i>=0;i--)
 80a05ee:	f1a3 0a4c 	sub.w	sl, r3, #76	; 0x4c
                   CurrentList[i+1]= CurrentList[i];
 80a05f2:	f853 2c04 	ldr.w	r2, [r3, #-4]
 80a05f6:	f843 2904 	str.w	r2, [r3], #-4
              for(int i=18;i>=0;i--)
 80a05fa:	459a      	cmp	sl, r3
 80a05fc:	d1f9      	bne.n	80a05f2 <_Z11stringParsePci+0x1ee>
              CurrentList[0]=(Current[0][0]+Current[0][1]+Current[0][2]);//numberOfZeroReadings[0];
 80a05fe:	4b52      	ldr	r3, [pc, #328]	; (80a0748 <_Z11stringParsePci+0x344>)
 80a0600:	f8d3 9008 	ldr.w	r9, [r3, #8]
 80a0604:	6859      	ldr	r1, [r3, #4]
 80a0606:	6818      	ldr	r0, [r3, #0]
 80a0608:	f005 fd50 	bl	80a60ac <__addsf3>
 80a060c:	4649      	mov	r1, r9
 80a060e:	f005 fd4d 	bl	80a60ac <__addsf3>
 80a0612:	f8ca 0000 	str.w	r0, [sl]
              CurrentList[1]=numberOfZeroReadings[0];
 80a0616:	6828      	ldr	r0, [r5, #0]
 80a0618:	f005 fdfc 	bl	80a6214 <__aeabi_i2f>
              CurrentList[2]=Current[0][2];
 80a061c:	f8ca 9008 	str.w	r9, [sl, #8]
              CurrentList[1]=numberOfZeroReadings[0];
 80a0620:	f8ca 0004 	str.w	r0, [sl, #4]
      String measurements;
 80a0624:	a808      	add	r0, sp, #32
 80a0626:	f003 fd7f 	bl	80a4128 <_ZN6StringD1Ev>
  for (int i=0; i<buflen; i++){
 80a062a:	4625      	mov	r5, r4
 80a062c:	f108 0801 	add.w	r8, r8, #1
 80a0630:	e6f4      	b.n	80a041c <_Z11stringParsePci+0x18>
              DEBUGPORT.print("did not receive enough current data");
 80a0632:	f004 fb87 	bl	80a4d44 <_Z16_fetch_usbserialv>
 80a0636:	4948      	ldr	r1, [pc, #288]	; (80a0758 <_Z11stringParsePci+0x354>)
 80a0638:	e78b      	b.n	80a0552 <_Z11stringParsePci+0x14e>
          if(buflen>4)
 80a063a:	2e04      	cmp	r6, #4
 80a063c:	dd1d      	ble.n	80a067a <_Z11stringParsePci+0x276>
              Frequency[0] = bytesToFloat(buf[i+2], buf[i+3], buf[i+4], buf[i+5]);
 80a063e:	78e2      	ldrb	r2, [r4, #3]
 80a0640:	78a1      	ldrb	r1, [r4, #2]
 80a0642:	7923      	ldrb	r3, [r4, #4]
    *((unsigned char *)(&output) + 3) = b0;
 80a0644:	7860      	ldrb	r0, [r4, #1]
    *((unsigned char *)(&output) + 1) = b2;
 80a0646:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
    *((unsigned char *)(&output) + 2) = b1;
 80a064a:	f88d 1062 	strb.w	r1, [sp, #98]	; 0x62
    *((unsigned char *)(&output) + 3) = b0;
 80a064e:	f88d 0063 	strb.w	r0, [sp, #99]	; 0x63
    *((unsigned char *)(&output) + 0) = b3;
 80a0652:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
    return output;
 80a0656:	9b18      	ldr	r3, [sp, #96]	; 0x60
              Frequency[0] = bytesToFloat(buf[i+2], buf[i+3], buf[i+4], buf[i+5]);
 80a0658:	4d40      	ldr	r5, [pc, #256]	; (80a075c <_Z11stringParsePci+0x358>)
 80a065a:	602b      	str	r3, [r5, #0]
              Frequency[1]=Frequency[0];
 80a065c:	606b      	str	r3, [r5, #4]
              DEBUGPORT.print("Frequency: ");
 80a065e:	f004 fb71 	bl	80a4d44 <_Z16_fetch_usbserialv>
 80a0662:	493f      	ldr	r1, [pc, #252]	; (80a0760 <_Z11stringParsePci+0x35c>)
 80a0664:	f003 ff30 	bl	80a44c8 <_ZN5Print5printEPKc>
              DEBUGPORT.print(Frequency[Charger-1],4);
 80a0668:	f004 fb6c 	bl	80a4d44 <_Z16_fetch_usbserialv>
 80a066c:	2204      	movs	r2, #4
 80a066e:	1e7b      	subs	r3, r7, #1
 80a0670:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
              DEBUGPORT.print(Energy[Charger-1],4);
 80a0674:	f004 f822 	bl	80a46bc <_ZN5Print5printEfi>
 80a0678:	e7d4      	b.n	80a0624 <_Z11stringParsePci+0x220>
              DEBUGPORT.print("did not receive enough frequency data");
 80a067a:	f004 fb63 	bl	80a4d44 <_Z16_fetch_usbserialv>
 80a067e:	4939      	ldr	r1, [pc, #228]	; (80a0764 <_Z11stringParsePci+0x360>)
 80a0680:	e767      	b.n	80a0552 <_Z11stringParsePci+0x14e>
          if(buflen>4)
 80a0682:	2e04      	cmp	r6, #4
 80a0684:	dd4b      	ble.n	80a071e <_Z11stringParsePci+0x31a>
              if(bytesArrToFloatArr(&buf[i+2], 12, Power[Charger-1],3))
 80a0686:	210c      	movs	r1, #12
 80a0688:	f107 3bff 	add.w	fp, r7, #4294967295
 80a068c:	fb01 fb0b 	mul.w	fp, r1, fp
 80a0690:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 80a0770 <_Z11stringParsePci+0x36c>
 80a0694:	2303      	movs	r3, #3
 80a0696:	eb0a 090b 	add.w	r9, sl, fp
 80a069a:	464a      	mov	r2, r9
 80a069c:	1ca8      	adds	r0, r5, #2
 80a069e:	f7ff fe8f 	bl	80a03c0 <_Z18bytesArrToFloatArrPcjPfj>
              DEBUGPORT.print("Power: "+String(Power[Charger-1][0],4)+" "+String(Power[Charger-1][1],4)+" "+String(Power[Charger-1][2],4));              
 80a06a2:	f004 fb4f 	bl	80a4d44 <_Z16_fetch_usbserialv>
 80a06a6:	4930      	ldr	r1, [pc, #192]	; (80a0768 <_Z11stringParsePci+0x364>)
 80a06a8:	4605      	mov	r5, r0
 80a06aa:	a810      	add	r0, sp, #64	; 0x40
 80a06ac:	f003 fd86 	bl	80a41bc <_ZN6StringC1EPKc>
 80a06b0:	2204      	movs	r2, #4
 80a06b2:	f85a 100b 	ldr.w	r1, [sl, fp]
 80a06b6:	a80c      	add	r0, sp, #48	; 0x30
 80a06b8:	f003 fe2f 	bl	80a431a <_ZN6StringC1Efi>
 80a06bc:	a90c      	add	r1, sp, #48	; 0x30
 80a06be:	a810      	add	r0, sp, #64	; 0x40
 80a06c0:	f003 fe7b 	bl	80a43ba <_ZplRK15StringSumHelperRK6String>
 80a06c4:	491e      	ldr	r1, [pc, #120]	; (80a0740 <_Z11stringParsePci+0x33c>)
 80a06c6:	f003 fe84 	bl	80a43d2 <_ZplRK15StringSumHelperPKc>
 80a06ca:	4682      	mov	sl, r0
 80a06cc:	2204      	movs	r2, #4
 80a06ce:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80a06d2:	a814      	add	r0, sp, #80	; 0x50
 80a06d4:	f003 fe21 	bl	80a431a <_ZN6StringC1Efi>
 80a06d8:	4650      	mov	r0, sl
 80a06da:	a914      	add	r1, sp, #80	; 0x50
 80a06dc:	f003 fe6d 	bl	80a43ba <_ZplRK15StringSumHelperRK6String>
 80a06e0:	4917      	ldr	r1, [pc, #92]	; (80a0740 <_Z11stringParsePci+0x33c>)
 80a06e2:	f003 fe76 	bl	80a43d2 <_ZplRK15StringSumHelperPKc>
 80a06e6:	4682      	mov	sl, r0
 80a06e8:	2204      	movs	r2, #4
 80a06ea:	f8d9 1008 	ldr.w	r1, [r9, #8]
 80a06ee:	a818      	add	r0, sp, #96	; 0x60
 80a06f0:	f003 fe13 	bl	80a431a <_ZN6StringC1Efi>
 80a06f4:	a918      	add	r1, sp, #96	; 0x60
 80a06f6:	4650      	mov	r0, sl
 80a06f8:	f003 fe5f 	bl	80a43ba <_ZplRK15StringSumHelperRK6String>
 80a06fc:	6801      	ldr	r1, [r0, #0]
 80a06fe:	4628      	mov	r0, r5
              DEBUGPORT.print("Voltage: "+String(LineVoltage[Charger-1][0],4)+" "+String(LineVoltage[Charger-1][1],4)+" "+String(LineVoltage[Charger-1][2],4));
 80a0700:	f003 fee2 	bl	80a44c8 <_ZN5Print5printEPKc>
 80a0704:	a818      	add	r0, sp, #96	; 0x60
 80a0706:	f003 fd0f 	bl	80a4128 <_ZN6StringD1Ev>
 80a070a:	a814      	add	r0, sp, #80	; 0x50
 80a070c:	f003 fd0c 	bl	80a4128 <_ZN6StringD1Ev>
 80a0710:	a80c      	add	r0, sp, #48	; 0x30
 80a0712:	f003 fd09 	bl	80a4128 <_ZN6StringD1Ev>
class StringSumHelper : public String
 80a0716:	a810      	add	r0, sp, #64	; 0x40
 80a0718:	f003 fd06 	bl	80a4128 <_ZN6StringD1Ev>
 80a071c:	e782      	b.n	80a0624 <_Z11stringParsePci+0x220>
              DEBUGPORT.print("did not receive enough power data");
 80a071e:	f004 fb11 	bl	80a4d44 <_Z16_fetch_usbserialv>
 80a0722:	4912      	ldr	r1, [pc, #72]	; (80a076c <_Z11stringParsePci+0x368>)
 80a0724:	e715      	b.n	80a0552 <_Z11stringParsePci+0x14e>
 80a0726:	bf00      	nop
 80a0728:	080aa2c3 	.word	0x080aa2c3
 80a072c:	080a9ed4 	.word	0x080a9ed4
 80a0730:	080a9ed6 	.word	0x080a9ed6
 80a0734:	080a9ee6 	.word	0x080a9ee6
 80a0738:	20000338 	.word	0x20000338
 80a073c:	080a9edf 	.word	0x080a9edf
 80a0740:	080aa2c5 	.word	0x080aa2c5
 80a0744:	080a9ee9 	.word	0x080a9ee9
 80a0748:	20000264 	.word	0x20000264
 80a074c:	080a9f0d 	.word	0x080a9f0d
 80a0750:	20000588 	.word	0x20000588
 80a0754:	200002c8 	.word	0x200002c8
 80a0758:	080a9f17 	.word	0x080a9f17
 80a075c:	20000310 	.word	0x20000310
 80a0760:	080a9f3b 	.word	0x080a9f3b
 80a0764:	080a9f47 	.word	0x080a9f47
 80a0768:	080a9f6d 	.word	0x080a9f6d
 80a076c:	080a9f75 	.word	0x080a9f75
 80a0770:	20000354 	.word	0x20000354
          if(buflen>4)
 80a0774:	2e04      	cmp	r6, #4
 80a0776:	dd1c      	ble.n	80a07b2 <_Z11stringParsePci+0x3ae>
              Energy[Charger-1] = bytesToFloat(buf[i+2], buf[i+3], buf[i+4], buf[i+5]);
 80a0778:	78e2      	ldrb	r2, [r4, #3]
 80a077a:	78a1      	ldrb	r1, [r4, #2]
 80a077c:	7923      	ldrb	r3, [r4, #4]
    *((unsigned char *)(&output) + 3) = b0;
 80a077e:	7860      	ldrb	r0, [r4, #1]
    *((unsigned char *)(&output) + 1) = b2;
 80a0780:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
    *((unsigned char *)(&output) + 2) = b1;
 80a0784:	f88d 1062 	strb.w	r1, [sp, #98]	; 0x62
    *((unsigned char *)(&output) + 3) = b0;
 80a0788:	f88d 0063 	strb.w	r0, [sp, #99]	; 0x63
    *((unsigned char *)(&output) + 0) = b3;
 80a078c:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
              Energy[Charger-1] = bytesToFloat(buf[i+2], buf[i+3], buf[i+4], buf[i+5]);
 80a0790:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80a0792:	4d14      	ldr	r5, [pc, #80]	; (80a07e4 <_Z11stringParsePci+0x3e0>)
 80a0794:	f107 39ff 	add.w	r9, r7, #4294967295
 80a0798:	f845 3029 	str.w	r3, [r5, r9, lsl #2]
              DEBUGPORT.print("Energy: ");
 80a079c:	f004 fad2 	bl	80a4d44 <_Z16_fetch_usbserialv>
 80a07a0:	4911      	ldr	r1, [pc, #68]	; (80a07e8 <_Z11stringParsePci+0x3e4>)
 80a07a2:	f003 fe91 	bl	80a44c8 <_ZN5Print5printEPKc>
              DEBUGPORT.print(Energy[Charger-1],4);
 80a07a6:	f004 facd 	bl	80a4d44 <_Z16_fetch_usbserialv>
 80a07aa:	2204      	movs	r2, #4
 80a07ac:	f855 1029 	ldr.w	r1, [r5, r9, lsl #2]
 80a07b0:	e760      	b.n	80a0674 <_Z11stringParsePci+0x270>
              DEBUGPORT.print("did not receive enough energy data");
 80a07b2:	f004 fac7 	bl	80a4d44 <_Z16_fetch_usbserialv>
 80a07b6:	490d      	ldr	r1, [pc, #52]	; (80a07ec <_Z11stringParsePci+0x3e8>)
 80a07b8:	e6cb      	b.n	80a0552 <_Z11stringParsePci+0x14e>
          if(buflen>4)
 80a07ba:	2e04      	cmp	r6, #4
 80a07bc:	f77f aec6 	ble.w	80a054c <_Z11stringParsePci+0x148>
              if(bytesArrToFloatArr(&buf[i+2], 12, VoltageArr,3))
 80a07c0:	1ca8      	adds	r0, r5, #2
 80a07c2:	2303      	movs	r3, #3
 80a07c4:	210c      	movs	r1, #12
 80a07c6:	aa01      	add	r2, sp, #4
 80a07c8:	f7ff fdfa 	bl	80a03c0 <_Z18bytesArrToFloatArrPcjPfj>
 80a07cc:	4d08      	ldr	r5, [pc, #32]	; (80a07f0 <_Z11stringParsePci+0x3ec>)
 80a07ce:	f107 39ff 	add.w	r9, r7, #4294967295
 80a07d2:	e67c      	b.n	80a04ce <_Z11stringParsePci+0xca>
  String cmdValue;
 80a07d4:	a804      	add	r0, sp, #16
 80a07d6:	f003 fca7 	bl	80a4128 <_ZN6StringD1Ev>
  }
  //Test only
  //Current[0][0] = 3.0;
  //Current[1][0] = 4.0;
  return Charger;
}
 80a07da:	4638      	mov	r0, r7
 80a07dc:	b01d      	add	sp, #116	; 0x74
 80a07de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a07e2:	bf00      	nop
 80a07e4:	20000308 	.word	0x20000308
 80a07e8:	080a9f97 	.word	0x080a9f97
 80a07ec:	080a9fa0 	.word	0x080a9fa0
 80a07f0:	20000320 	.word	0x20000320

080a07f4 <_Z16readSerialOlimexv>:


int readSerialOlimex() {
 80a07f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a07f8:	f002 fe6a 	bl	80a34d0 <HAL_Timer_Get_Milli_Seconds>
 80a07fc:	2600      	movs	r6, #0
 80a07fe:	270a      	movs	r7, #10
  }
  for(int k=0;k<10;k++){
  if (Serial1.available()) {
    input = Serial1.read();
    DEBUGPORT.print(input,HEX);
    DEBUGPORT.print(" ");
 80a0800:	f8df 8088 	ldr.w	r8, [pc, #136]	; 80a088c <_Z16readSerialOlimexv+0x98>
    if (bufpos<BUFSIZE)
 80a0804:	4c1e      	ldr	r4, [pc, #120]	; (80a0880 <_Z16readSerialOlimexv+0x8c>)
  if (Serial1.available()) {
 80a0806:	f004 fb4f 	bl	80a4ea8 <_Z22__fetch_global_Serial1v>
 80a080a:	6803      	ldr	r3, [r0, #0]
 80a080c:	691b      	ldr	r3, [r3, #16]
 80a080e:	4798      	blx	r3
 80a0810:	b348      	cbz	r0, 80a0866 <_Z16readSerialOlimexv+0x72>
    input = Serial1.read();
 80a0812:	f004 fb49 	bl	80a4ea8 <_Z22__fetch_global_Serial1v>
 80a0816:	6803      	ldr	r3, [r0, #0]
 80a0818:	695b      	ldr	r3, [r3, #20]
 80a081a:	4798      	blx	r3
 80a081c:	b2c5      	uxtb	r5, r0
    DEBUGPORT.print(input,HEX);
 80a081e:	f004 fa91 	bl	80a4d44 <_Z16_fetch_usbserialv>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80a0822:	2210      	movs	r2, #16
 80a0824:	4629      	mov	r1, r5
 80a0826:	f003 fe6c 	bl	80a4502 <_ZN5Print11printNumberEmh>
    DEBUGPORT.print(" ");
 80a082a:	f004 fa8b 	bl	80a4d44 <_Z16_fetch_usbserialv>
 80a082e:	4641      	mov	r1, r8
 80a0830:	f003 fe4a 	bl	80a44c8 <_ZN5Print5printEPKc>
    if (bufpos<BUFSIZE)
 80a0834:	6823      	ldr	r3, [r4, #0]
 80a0836:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 80a083a:	da19      	bge.n	80a0870 <_Z16readSerialOlimexv+0x7c>
    {
        buff[bufpos] = input;
 80a083c:	4a11      	ldr	r2, [pc, #68]	; (80a0884 <_Z16readSerialOlimexv+0x90>)
 80a083e:	54d5      	strb	r5, [r2, r3]
        bufpos++;    
 80a0840:	3301      	adds	r3, #1
 80a0842:	6023      	str	r3, [r4, #0]
    else
    {
        bufpos=0;
        DEBUGPORT.print("loopread>\tSerial Read Error!");
    }
    if (input == '\n') { // we hebben een regel binnen, tot aan \n   //  0x0A
 80a0844:	2d0a      	cmp	r5, #10
 80a0846:	d10e      	bne.n	80a0866 <_Z16readSerialOlimexv+0x72>
      Charger = stringParse(buff, bufpos);
 80a0848:	6821      	ldr	r1, [r4, #0]
 80a084a:	480e      	ldr	r0, [pc, #56]	; (80a0884 <_Z16readSerialOlimexv+0x90>)
 80a084c:	f7ff fdda 	bl	80a0404 <_Z11stringParsePci>
      //Maak de buffer leeg
      for (int i=0; i<BUFSIZE; i++)
 80a0850:	2300      	movs	r3, #0
      Charger = stringParse(buff, bufpos);
 80a0852:	4606      	mov	r6, r0
      { buff[i] = 0;}
 80a0854:	461a      	mov	r2, r3
 80a0856:	490b      	ldr	r1, [pc, #44]	; (80a0884 <_Z16readSerialOlimexv+0x90>)
      for (int i=0; i<BUFSIZE; i++)
 80a0858:	3301      	adds	r3, #1
 80a085a:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
      { buff[i] = 0;}
 80a085e:	f801 2b01 	strb.w	r2, [r1], #1
      for (int i=0; i<BUFSIZE; i++)
 80a0862:	d1f9      	bne.n	80a0858 <_Z16readSerialOlimexv+0x64>
      bufpos = 0;
 80a0864:	6022      	str	r2, [r4, #0]
  for(int k=0;k<10;k++){
 80a0866:	3f01      	subs	r7, #1
 80a0868:	d1cd      	bne.n	80a0806 <_Z16readSerialOlimexv+0x12>
    }
  }
}
return Charger;
 80a086a:	4630      	mov	r0, r6
 80a086c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        bufpos=0;
 80a0870:	2300      	movs	r3, #0
 80a0872:	6023      	str	r3, [r4, #0]
        DEBUGPORT.print("loopread>\tSerial Read Error!");
 80a0874:	f004 fa66 	bl	80a4d44 <_Z16_fetch_usbserialv>
 80a0878:	4903      	ldr	r1, [pc, #12]	; (80a0888 <_Z16readSerialOlimexv+0x94>)
 80a087a:	f003 fe25 	bl	80a44c8 <_ZN5Print5printEPKc>
 80a087e:	e7e1      	b.n	80a0844 <_Z16readSerialOlimexv+0x50>
 80a0880:	200004fc 	.word	0x200004fc
 80a0884:	2000039c 	.word	0x2000039c
 80a0888:	080a9fc3 	.word	0x080a9fc3
 80a088c:	080aa2c5 	.word	0x080aa2c5

080a0890 <_Z13activeChargerv>:
int activeCharger() {
 80a0890:	b538      	push	{r3, r4, r5, lr}
        if (Current[0][i] != 0.0) {
 80a0892:	4d13      	ldr	r5, [pc, #76]	; (80a08e0 <_Z13activeChargerv+0x50>)
 80a0894:	2100      	movs	r1, #0
 80a0896:	6828      	ldr	r0, [r5, #0]
 80a0898:	f005 fea4 	bl	80a65e4 <__aeabi_fcmpeq>
 80a089c:	b1e8      	cbz	r0, 80a08da <_Z13activeChargerv+0x4a>
 80a089e:	2100      	movs	r1, #0
 80a08a0:	6868      	ldr	r0, [r5, #4]
 80a08a2:	f005 fe9f 	bl	80a65e4 <__aeabi_fcmpeq>
 80a08a6:	b1c0      	cbz	r0, 80a08da <_Z13activeChargerv+0x4a>
 80a08a8:	2100      	movs	r1, #0
 80a08aa:	68a8      	ldr	r0, [r5, #8]
 80a08ac:	f005 fe9a 	bl	80a65e4 <__aeabi_fcmpeq>
 80a08b0:	fab0 f480 	clz	r4, r0
 80a08b4:	0964      	lsrs	r4, r4, #5
        if (Current[1][i] != 0.0) {
 80a08b6:	2100      	movs	r1, #0
 80a08b8:	68e8      	ldr	r0, [r5, #12]
 80a08ba:	f005 fe93 	bl	80a65e4 <__aeabi_fcmpeq>
 80a08be:	b148      	cbz	r0, 80a08d4 <_Z13activeChargerv+0x44>
 80a08c0:	2100      	movs	r1, #0
 80a08c2:	6928      	ldr	r0, [r5, #16]
 80a08c4:	f005 fe8e 	bl	80a65e4 <__aeabi_fcmpeq>
 80a08c8:	b120      	cbz	r0, 80a08d4 <_Z13activeChargerv+0x44>
 80a08ca:	2100      	movs	r1, #0
 80a08cc:	6968      	ldr	r0, [r5, #20]
 80a08ce:	f005 fe89 	bl	80a65e4 <__aeabi_fcmpeq>
 80a08d2:	b900      	cbnz	r0, 80a08d6 <_Z13activeChargerv+0x46>
            number += 2;
 80a08d4:	3402      	adds	r4, #2
}
 80a08d6:	4620      	mov	r0, r4
 80a08d8:	bd38      	pop	{r3, r4, r5, pc}
            number += 1;
 80a08da:	2401      	movs	r4, #1
 80a08dc:	e7eb      	b.n	80a08b6 <_Z13activeChargerv+0x26>
 80a08de:	bf00      	nop
 80a08e0:	20000264 	.word	0x20000264

080a08e4 <_Z17maxCurrentC1_testi>:
    byte olimexMessage[4] = {0xFE,1,setPoint,0xFF};
 80a08e4:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
int maxCurrentC1_test(int setPoint) {
 80a08e8:	b530      	push	{r4, r5, lr}
 80a08ea:	b08b      	sub	sp, #44	; 0x2c
    byte olimexMessage[4] = {0xFE,1,setPoint,0xFF};
 80a08ec:	f8ad 3004 	strh.w	r3, [sp, #4]
 80a08f0:	23ff      	movs	r3, #255	; 0xff
 80a08f2:	f88d 3007 	strb.w	r3, [sp, #7]
    if (TESTCASE) {
 80a08f6:	4b18      	ldr	r3, [pc, #96]	; (80a0958 <_Z17maxCurrentC1_testi+0x74>)
int maxCurrentC1_test(int setPoint) {
 80a08f8:	4604      	mov	r4, r0
    if (TESTCASE) {
 80a08fa:	781b      	ldrb	r3, [r3, #0]
    byte olimexMessage[4] = {0xFE,1,setPoint,0xFF};
 80a08fc:	f88d 0006 	strb.w	r0, [sp, #6]
    if (TESTCASE) {
 80a0900:	b33b      	cbz	r3, 80a0952 <_Z17maxCurrentC1_testi+0x6e>
        Serial1.write(olimexMessage,4);
 80a0902:	f004 fad1 	bl	80a4ea8 <_Z22__fetch_global_Serial1v>
 80a0906:	2204      	movs	r2, #4
 80a0908:	6803      	ldr	r3, [r0, #0]
 80a090a:	eb0d 0102 	add.w	r1, sp, r2
 80a090e:	68db      	ldr	r3, [r3, #12]
 80a0910:	4798      	blx	r3
        DEBUGPORT.println("maxCurrentC1>\tNew setpoint set at "+String(setPoint)+" Amps.");
 80a0912:	f004 fa17 	bl	80a4d44 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
 80a0916:	4911      	ldr	r1, [pc, #68]	; (80a095c <_Z17maxCurrentC1_testi+0x78>)
 80a0918:	4605      	mov	r5, r0
 80a091a:	a806      	add	r0, sp, #24
 80a091c:	f003 fc4e 	bl	80a41bc <_ZN6StringC1EPKc>
 80a0920:	220a      	movs	r2, #10
 80a0922:	4621      	mov	r1, r4
 80a0924:	a802      	add	r0, sp, #8
 80a0926:	f003 fcbe 	bl	80a42a6 <_ZN6StringC1Eih>
 80a092a:	a902      	add	r1, sp, #8
 80a092c:	a806      	add	r0, sp, #24
 80a092e:	f003 fd44 	bl	80a43ba <_ZplRK15StringSumHelperRK6String>
 80a0932:	490b      	ldr	r1, [pc, #44]	; (80a0960 <_Z17maxCurrentC1_testi+0x7c>)
 80a0934:	f003 fd4d 	bl	80a43d2 <_ZplRK15StringSumHelperPKc>
 80a0938:	6801      	ldr	r1, [r0, #0]
 80a093a:	4628      	mov	r0, r5
 80a093c:	f003 fdd7 	bl	80a44ee <_ZN5Print7printlnEPKc>
 80a0940:	a802      	add	r0, sp, #8
 80a0942:	f003 fbf1 	bl	80a4128 <_ZN6StringD1Ev>
class StringSumHelper : public String
 80a0946:	a806      	add	r0, sp, #24
 80a0948:	f003 fbee 	bl	80a4128 <_ZN6StringD1Ev>
        return 0;
 80a094c:	2000      	movs	r0, #0
}
 80a094e:	b00b      	add	sp, #44	; 0x2c
 80a0950:	bd30      	pop	{r4, r5, pc}
    return 1;
 80a0952:	2001      	movs	r0, #1
 80a0954:	e7fb      	b.n	80a094e <_Z17maxCurrentC1_testi+0x6a>
 80a0956:	bf00      	nop
 80a0958:	20000000 	.word	0x20000000
 80a095c:	080a9e58 	.word	0x080a9e58
 80a0960:	080a9e7b 	.word	0x080a9e7b

080a0964 <_Z17maxCurrentC2_testi>:
    byte olimexMessage[4] = {0xFE,2,setPoint,0xFF};
 80a0964:	f240 23fe 	movw	r3, #766	; 0x2fe
int maxCurrentC2_test(int setPoint) {
 80a0968:	b530      	push	{r4, r5, lr}
 80a096a:	b08b      	sub	sp, #44	; 0x2c
    byte olimexMessage[4] = {0xFE,2,setPoint,0xFF};
 80a096c:	f8ad 3004 	strh.w	r3, [sp, #4]
 80a0970:	23ff      	movs	r3, #255	; 0xff
 80a0972:	f88d 3007 	strb.w	r3, [sp, #7]
    if (TESTCASE) {
 80a0976:	4b18      	ldr	r3, [pc, #96]	; (80a09d8 <_Z17maxCurrentC2_testi+0x74>)
int maxCurrentC2_test(int setPoint) {
 80a0978:	4604      	mov	r4, r0
    if (TESTCASE) {
 80a097a:	781b      	ldrb	r3, [r3, #0]
    byte olimexMessage[4] = {0xFE,2,setPoint,0xFF};
 80a097c:	f88d 0006 	strb.w	r0, [sp, #6]
    if (TESTCASE) {
 80a0980:	b33b      	cbz	r3, 80a09d2 <_Z17maxCurrentC2_testi+0x6e>
        Serial1.write(olimexMessage,4);
 80a0982:	f004 fa91 	bl	80a4ea8 <_Z22__fetch_global_Serial1v>
 80a0986:	2204      	movs	r2, #4
 80a0988:	6803      	ldr	r3, [r0, #0]
 80a098a:	eb0d 0102 	add.w	r1, sp, r2
 80a098e:	68db      	ldr	r3, [r3, #12]
 80a0990:	4798      	blx	r3
        DEBUGPORT.println("maxCurrentC1>\tNew setpoint set at "+String(setPoint)+" Amps.");
 80a0992:	f004 f9d7 	bl	80a4d44 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
 80a0996:	4911      	ldr	r1, [pc, #68]	; (80a09dc <_Z17maxCurrentC2_testi+0x78>)
 80a0998:	4605      	mov	r5, r0
 80a099a:	a806      	add	r0, sp, #24
 80a099c:	f003 fc0e 	bl	80a41bc <_ZN6StringC1EPKc>
 80a09a0:	220a      	movs	r2, #10
 80a09a2:	4621      	mov	r1, r4
 80a09a4:	a802      	add	r0, sp, #8
 80a09a6:	f003 fc7e 	bl	80a42a6 <_ZN6StringC1Eih>
 80a09aa:	a902      	add	r1, sp, #8
 80a09ac:	a806      	add	r0, sp, #24
 80a09ae:	f003 fd04 	bl	80a43ba <_ZplRK15StringSumHelperRK6String>
 80a09b2:	490b      	ldr	r1, [pc, #44]	; (80a09e0 <_Z17maxCurrentC2_testi+0x7c>)
 80a09b4:	f003 fd0d 	bl	80a43d2 <_ZplRK15StringSumHelperPKc>
 80a09b8:	6801      	ldr	r1, [r0, #0]
 80a09ba:	4628      	mov	r0, r5
 80a09bc:	f003 fd97 	bl	80a44ee <_ZN5Print7printlnEPKc>
 80a09c0:	a802      	add	r0, sp, #8
 80a09c2:	f003 fbb1 	bl	80a4128 <_ZN6StringD1Ev>
class StringSumHelper : public String
 80a09c6:	a806      	add	r0, sp, #24
 80a09c8:	f003 fbae 	bl	80a4128 <_ZN6StringD1Ev>
        return 0;
 80a09cc:	2000      	movs	r0, #0
}
 80a09ce:	b00b      	add	sp, #44	; 0x2c
 80a09d0:	bd30      	pop	{r4, r5, pc}
    return 1;
 80a09d2:	2001      	movs	r0, #1
 80a09d4:	e7fb      	b.n	80a09ce <_Z17maxCurrentC2_testi+0x6a>
 80a09d6:	bf00      	nop
 80a09d8:	20000000 	.word	0x20000000
 80a09dc:	080a9e58 	.word	0x080a9e58
 80a09e0:	080a9e7b 	.word	0x080a9e7b

080a09e4 <_Z17getUserIdAtSocketi>:
    if (socket == 1+CHARGEROFFSET)
 80a09e4:	2901      	cmp	r1, #1
String getUserIdAtSocket(int socket) {
 80a09e6:	b510      	push	{r4, lr}
 80a09e8:	4604      	mov	r4, r0
    if (socket == 1+CHARGEROFFSET)
 80a09ea:	d104      	bne.n	80a09f6 <_Z17getUserIdAtSocketi+0x12>
        return UIDtagCharger1;
 80a09ec:	4906      	ldr	r1, [pc, #24]	; (80a0a08 <_Z17getUserIdAtSocketi+0x24>)
        return UIDtagCharger2;
 80a09ee:	f003 fc24 	bl	80a423a <_ZN6StringC1ERKS_>
}
 80a09f2:	4620      	mov	r0, r4
 80a09f4:	bd10      	pop	{r4, pc}
    if (socket == 2+CHARGEROFFSET)
 80a09f6:	2902      	cmp	r1, #2
 80a09f8:	d101      	bne.n	80a09fe <_Z17getUserIdAtSocketi+0x1a>
        return UIDtagCharger2;
 80a09fa:	4904      	ldr	r1, [pc, #16]	; (80a0a0c <_Z17getUserIdAtSocketi+0x28>)
 80a09fc:	e7f7      	b.n	80a09ee <_Z17getUserIdAtSocketi+0xa>
    return "00";
 80a09fe:	4904      	ldr	r1, [pc, #16]	; (80a0a10 <_Z17getUserIdAtSocketi+0x2c>)
 80a0a00:	f003 fbdc 	bl	80a41bc <_ZN6StringC1EPKc>
 80a0a04:	e7f5      	b.n	80a09f2 <_Z17getUserIdAtSocketi+0xe>
 80a0a06:	bf00      	nop
 80a0a08:	2000037c 	.word	0x2000037c
 80a0a0c:	2000038c 	.word	0x2000038c
 80a0a10:	080a9fe0 	.word	0x080a9fe0

080a0a14 <_Z18allowUser_callbackPhj>:
void allowUser_callback(byte* payload, unsigned int length) {
 80a0a14:	b5b0      	push	{r4, r5, r7, lr}
    char payl[length+1];
 80a0a16:	f101 0308 	add.w	r3, r1, #8
void allowUser_callback(byte* payload, unsigned int length) {
 80a0a1a:	b086      	sub	sp, #24
    char payl[length+1];
 80a0a1c:	f023 0307 	bic.w	r3, r3, #7
    }
 80a0a20:	466d      	mov	r5, sp
void allowUser_callback(byte* payload, unsigned int length) {
 80a0a22:	af00      	add	r7, sp, #0
    char payl[length+1];
 80a0a24:	ebad 0d03 	sub.w	sp, sp, r3
void allowUser_callback(byte* payload, unsigned int length) {
 80a0a28:	460c      	mov	r4, r1
    memcpy(payl, payload, length);
 80a0a2a:	460a      	mov	r2, r1
 80a0a2c:	4601      	mov	r1, r0
 80a0a2e:	4668      	mov	r0, sp
 80a0a30:	f006 f92c 	bl	80a6c8c <memcpy>
    payl[length] = NULL;
 80a0a34:	2300      	movs	r3, #0
    int port = (int) strtol(payl, &endchar, 10);
 80a0a36:	220a      	movs	r2, #10
    payl[length] = NULL;
 80a0a38:	f80d 3004 	strb.w	r3, [sp, r4]
    int port = (int) strtol(payl, &endchar, 10);
 80a0a3c:	1d39      	adds	r1, r7, #4
 80a0a3e:	4668      	mov	r0, sp
 80a0a40:	f007 fde2 	bl	80a8608 <strtol>
 80a0a44:	4604      	mov	r4, r0
    String topic_str = "HANevse/photonConverted/";
 80a0a46:	4924      	ldr	r1, [pc, #144]	; (80a0ad8 <_Z18allowUser_callbackPhj+0xc4>)
 80a0a48:	f107 0008 	add.w	r0, r7, #8
 80a0a4c:	f003 fbb6 	bl	80a41bc <_ZN6StringC1EPKc>
    topic_str.concat(port);
 80a0a50:	4621      	mov	r1, r4
 80a0a52:	f107 0008 	add.w	r0, r7, #8
 80a0a56:	f003 fc9f 	bl	80a4398 <_ZN6String6concatEi>
    endchar = endchar + 1;
 80a0a5a:	6878      	ldr	r0, [r7, #4]
    if (port == 1 + CHARGEROFFSET) 
 80a0a5c:	2c01      	cmp	r4, #1
    endchar = endchar + 1;
 80a0a5e:	f100 0001 	add.w	r0, r0, #1
 80a0a62:	6078      	str	r0, [r7, #4]
    if (port == 1 + CHARGEROFFSET) 
 80a0a64:	d009      	beq.n	80a0a7a <_Z18allowUser_callbackPhj+0x66>
    else if (port == 2 + CHARGEROFFSET)
 80a0a66:	2c02      	cmp	r4, #2
 80a0a68:	d017      	beq.n	80a0a9a <_Z18allowUser_callbackPhj+0x86>
    String topic_str = "HANevse/photonConverted/";
 80a0a6a:	f107 0008 	add.w	r0, r7, #8
 80a0a6e:	f003 fb5b 	bl	80a4128 <_ZN6StringD1Ev>
 80a0a72:	46ad      	mov	sp, r5
}
 80a0a74:	3718      	adds	r7, #24
 80a0a76:	46bd      	mov	sp, r7
 80a0a78:	bdb0      	pop	{r4, r5, r7, pc}
        port = AUTHENTICATION_CAR1;
 80a0a7a:	2405      	movs	r4, #5
    int retPi = (int) strtol(endchar, &endchar, 10);
 80a0a7c:	220a      	movs	r2, #10
 80a0a7e:	1d39      	adds	r1, r7, #4
 80a0a80:	f007 fdc2 	bl	80a8608 <strtol>
    Pianswer = retPi; 
 80a0a84:	4b15      	ldr	r3, [pc, #84]	; (80a0adc <_Z18allowUser_callbackPhj+0xc8>)
 80a0a86:	8018      	strh	r0, [r3, #0]
    switch(retPi) {
 80a0a88:	3801      	subs	r0, #1
 80a0a8a:	2806      	cmp	r0, #6
 80a0a8c:	d821      	bhi.n	80a0ad2 <_Z18allowUser_callbackPhj+0xbe>
 80a0a8e:	e8df f000 	tbb	[pc, r0]
 80a0a92:	1006      	.short	0x1006
 80a0a94:	1c1a1412 	.word	0x1c1a1412
 80a0a98:	1e          	.byte	0x1e
 80a0a99:	00          	.byte	0x00
        port = AUTHENTICATION_CAR2;
 80a0a9a:	2406      	movs	r4, #6
 80a0a9c:	e7ee      	b.n	80a0a7c <_Z18allowUser_callbackPhj+0x68>
            digitalWrite(port, HIGH);
 80a0a9e:	2101      	movs	r1, #1
 80a0aa0:	4620      	mov	r0, r4
 80a0aa2:	f004 fc56 	bl	80a5352 <digitalWrite>
            client.publish(topic_str, "successful start new charge");
 80a0aa6:	4a0e      	ldr	r2, [pc, #56]	; (80a0ae0 <_Z18allowUser_callbackPhj+0xcc>)
            client.publish(topic_str, "ERROR: unknown scenario");
 80a0aa8:	68b9      	ldr	r1, [r7, #8]
 80a0aaa:	480e      	ldr	r0, [pc, #56]	; (80a0ae4 <_Z18allowUser_callbackPhj+0xd0>)
 80a0aac:	f001 fdcb 	bl	80a2646 <_ZN4MQTT7publishEPKcS1_>
 80a0ab0:	e7db      	b.n	80a0a6a <_Z18allowUser_callbackPhj+0x56>
            client.publish(topic_str, "charger is free, but you already swiped the card in the last 20 sec");
 80a0ab2:	4a0d      	ldr	r2, [pc, #52]	; (80a0ae8 <_Z18allowUser_callbackPhj+0xd4>)
 80a0ab4:	e7f8      	b.n	80a0aa8 <_Z18allowUser_callbackPhj+0x94>
            client.publish(topic_str, "charger is occupied by another user");
 80a0ab6:	4a0d      	ldr	r2, [pc, #52]	; (80a0aec <_Z18allowUser_callbackPhj+0xd8>)
 80a0ab8:	e7f6      	b.n	80a0aa8 <_Z18allowUser_callbackPhj+0x94>
            digitalWrite(port, LOW);
 80a0aba:	2100      	movs	r1, #0
 80a0abc:	4620      	mov	r0, r4
 80a0abe:	f004 fc48 	bl	80a5352 <digitalWrite>
            client.publish(topic_str, "successful stop charge session");
 80a0ac2:	4a0b      	ldr	r2, [pc, #44]	; (80a0af0 <_Z18allowUser_callbackPhj+0xdc>)
 80a0ac4:	e7f0      	b.n	80a0aa8 <_Z18allowUser_callbackPhj+0x94>
            client.publish(topic_str, "you just started a charge at this charger, but had another consecutive RFID swipe within 20 sec");
 80a0ac6:	4a0b      	ldr	r2, [pc, #44]	; (80a0af4 <_Z18allowUser_callbackPhj+0xe0>)
 80a0ac8:	e7ee      	b.n	80a0aa8 <_Z18allowUser_callbackPhj+0x94>
            client.publish(topic_str, "you are already charging at another charger");
 80a0aca:	4a0b      	ldr	r2, [pc, #44]	; (80a0af8 <_Z18allowUser_callbackPhj+0xe4>)
 80a0acc:	e7ec      	b.n	80a0aa8 <_Z18allowUser_callbackPhj+0x94>
            client.publish(topic_str, "successful RFID read, but you are not in the userlist");
 80a0ace:	4a0b      	ldr	r2, [pc, #44]	; (80a0afc <_Z18allowUser_callbackPhj+0xe8>)
 80a0ad0:	e7ea      	b.n	80a0aa8 <_Z18allowUser_callbackPhj+0x94>
            client.publish(topic_str, "ERROR: unknown scenario");
 80a0ad2:	4a0b      	ldr	r2, [pc, #44]	; (80a0b00 <_Z18allowUser_callbackPhj+0xec>)
 80a0ad4:	e7e8      	b.n	80a0aa8 <_Z18allowUser_callbackPhj+0x94>
 80a0ad6:	bf00      	nop
 80a0ad8:	080a9fe3 	.word	0x080a9fe3
 80a0adc:	20000350 	.word	0x20000350
 80a0ae0:	080a9ffc 	.word	0x080a9ffc
 80a0ae4:	20000500 	.word	0x20000500
 80a0ae8:	080aa018 	.word	0x080aa018
 80a0aec:	080aa05c 	.word	0x080aa05c
 80a0af0:	080aa080 	.word	0x080aa080
 80a0af4:	080aa09f 	.word	0x080aa09f
 80a0af8:	080aa0ff 	.word	0x080aa0ff
 80a0afc:	080aa12b 	.word	0x080aa12b
 80a0b00:	080aa161 	.word	0x080aa161

080a0b04 <_Z9reconnectv>:
    // This whole function is not interrupted by callback() so Pianswer can't be changed in the meantime
    //client.publish("HANevse/checkupdateUser", String(Pianswer));  
     return Authorized;
}

void reconnect(void) {
 80a0b04:	b570      	push	{r4, r5, r6, lr}
    while (!client.isConnected()) {
 80a0b06:	4c19      	ldr	r4, [pc, #100]	; (80a0b6c <_Z9reconnectv+0x68>)
        DEBUGPORT.print("MQTT>\tConnecting to MQTT broker...");
 80a0b08:	4d19      	ldr	r5, [pc, #100]	; (80a0b70 <_Z9reconnectv+0x6c>)
        if (client.connect("EV-Photon1")) {
 80a0b0a:	4e1a      	ldr	r6, [pc, #104]	; (80a0b74 <_Z9reconnectv+0x70>)
    while (!client.isConnected()) {
 80a0b0c:	4620      	mov	r0, r4
 80a0b0e:	f001 fc2c 	bl	80a236a <_ZN4MQTT11isConnectedEv>
 80a0b12:	bb48      	cbnz	r0, 80a0b68 <_Z9reconnectv+0x64>
        DEBUGPORT.print("MQTT>\tConnecting to MQTT broker...");
 80a0b14:	f004 f916 	bl	80a4d44 <_Z16_fetch_usbserialv>
 80a0b18:	4629      	mov	r1, r5
 80a0b1a:	f003 fcd5 	bl	80a44c8 <_ZN5Print5printEPKc>
        if (client.connect("EV-Photon1")) {
 80a0b1e:	4631      	mov	r1, r6
 80a0b20:	4620      	mov	r0, r4
 80a0b22:	f001 fd0b 	bl	80a253c <_ZN4MQTT7connectEPKc>
 80a0b26:	b180      	cbz	r0, 80a0b4a <_Z9reconnectv+0x46>
            DEBUGPORT.println("MQTT>\tConnected");
 80a0b28:	f004 f90c 	bl	80a4d44 <_Z16_fetch_usbserialv>
 80a0b2c:	4912      	ldr	r1, [pc, #72]	; (80a0b78 <_Z9reconnectv+0x74>)
 80a0b2e:	f003 fcde 	bl	80a44ee <_ZN5Print7printlnEPKc>
            //client.subscribe("HANevse/#", client.QOS2);
            if (TESTCASE){
 80a0b32:	4b12      	ldr	r3, [pc, #72]	; (80a0b7c <_Z9reconnectv+0x78>)
 80a0b34:	781b      	ldrb	r3, [r3, #0]
 80a0b36:	b11b      	cbz	r3, 80a0b40 <_Z9reconnectv+0x3c>
            client.subscribe("HAN/EnergyMeter"); //+
 80a0b38:	4620      	mov	r0, r4
 80a0b3a:	4911      	ldr	r1, [pc, #68]	; (80a0b80 <_Z9reconnectv+0x7c>)
 80a0b3c:	f001 fefa 	bl	80a2934 <_ZN4MQTT9subscribeEPKc>
            }
            client.subscribe("HANevse/allowUser");
 80a0b40:	4620      	mov	r0, r4
 80a0b42:	4910      	ldr	r1, [pc, #64]	; (80a0b84 <_Z9reconnectv+0x80>)
 80a0b44:	f001 fef6 	bl	80a2934 <_ZN4MQTT9subscribeEPKc>
 80a0b48:	e7e0      	b.n	80a0b0c <_Z9reconnectv+0x8>
        }
        else {
            DEBUGPORT.println("MQTT>\tConnection failed");
 80a0b4a:	f004 f8fb 	bl	80a4d44 <_Z16_fetch_usbserialv>
 80a0b4e:	490e      	ldr	r1, [pc, #56]	; (80a0b88 <_Z9reconnectv+0x84>)
 80a0b50:	f003 fccd 	bl	80a44ee <_ZN5Print7printlnEPKc>
            DEBUGPORT.println("MQTT>\tRetrying...");
 80a0b54:	f004 f8f6 	bl	80a4d44 <_Z16_fetch_usbserialv>
 80a0b58:	490c      	ldr	r1, [pc, #48]	; (80a0b8c <_Z9reconnectv+0x88>)
 80a0b5a:	f003 fcc8 	bl	80a44ee <_ZN5Print7printlnEPKc>
            delay(5000);
 80a0b5e:	f241 3088 	movw	r0, #5000	; 0x1388
 80a0b62:	f003 ff2f 	bl	80a49c4 <delay>
 80a0b66:	e7d1      	b.n	80a0b0c <_Z9reconnectv+0x8>
        }
    }
}
 80a0b68:	bd70      	pop	{r4, r5, r6, pc}
 80a0b6a:	bf00      	nop
 80a0b6c:	20000500 	.word	0x20000500
 80a0b70:	080aa179 	.word	0x080aa179
 80a0b74:	080aa19c 	.word	0x080aa19c
 80a0b78:	080aa1a7 	.word	0x080aa1a7
 80a0b7c:	20000000 	.word	0x20000000
 80a0b80:	080aa1b7 	.word	0x080aa1b7
 80a0b84:	080aa1c7 	.word	0x080aa1c7
 80a0b88:	080aa1d9 	.word	0x080aa1d9
 80a0b8c:	080aa1f1 	.word	0x080aa1f1

080a0b90 <_ZNK10JsonParser18getOuterValueByKeyIfEEbPKcRT_>:
	bool getOuterValueByKey(const char *name, T &result) const {
 80a0b90:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80a0b92:	460e      	mov	r6, r1
 80a0b94:	4604      	mov	r4, r0
 80a0b96:	4615      	mov	r5, r2
		if (getValueTokenByKey(getOuterObject(), name, value)) {
 80a0b98:	f001 ff8e 	bl	80a2ab8 <_ZNK10JsonParser14getOuterObjectEv>
 80a0b9c:	4632      	mov	r2, r6
 80a0b9e:	4601      	mov	r1, r0
 80a0ba0:	ab01      	add	r3, sp, #4
 80a0ba2:	4620      	mov	r0, r4
 80a0ba4:	f002 f8d4 	bl	80a2d50 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
 80a0ba8:	b120      	cbz	r0, 80a0bb4 <_ZNK10JsonParser18getOuterValueByKeyIfEEbPKcRT_+0x24>
			return getTokenValue(value, result);
 80a0baa:	462a      	mov	r2, r5
 80a0bac:	4620      	mov	r0, r4
 80a0bae:	9901      	ldr	r1, [sp, #4]
 80a0bb0:	f001 fff8 	bl	80a2ba4 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERf>
	}
 80a0bb4:	b002      	add	sp, #8
 80a0bb6:	bd70      	pop	{r4, r5, r6, pc}

080a0bb8 <_ZN16JsonWriterStaticILj512EEC1Ev>:
public:
	explicit JsonWriterStatic() : JsonWriter(staticBuffer, BUFFER_SIZE) {};
 80a0bb8:	b510      	push	{r4, lr}
 80a0bba:	4604      	mov	r4, r0
 80a0bbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80a0bc0:	f100 0130 	add.w	r1, r0, #48	; 0x30
 80a0bc4:	f002 f8fa 	bl	80a2dbc <_ZN10JsonWriterC1EPcj>
 80a0bc8:	4b01      	ldr	r3, [pc, #4]	; (80a0bd0 <_ZN16JsonWriterStaticILj512EEC1Ev+0x18>)
 80a0bca:	4620      	mov	r0, r4
 80a0bcc:	6023      	str	r3, [r4, #0]
 80a0bce:	bd10      	pop	{r4, pc}
 80a0bd0:	080aa3b8 	.word	0x080aa3b8

080a0bd4 <_ZN10JsonWriter14insertKeyValueIfEEvPKcT_>:
	void insertKeyValue(const char *key, T value) {
 80a0bd4:	b570      	push	{r4, r5, r6, lr}
 80a0bd6:	4604      	mov	r4, r0
 80a0bd8:	460e      	mov	r6, r1
 80a0bda:	4615      	mov	r5, r2
		insertCheckSeparator();
 80a0bdc:	f002 f9de 	bl	80a2f9c <_ZN10JsonWriter20insertCheckSeparatorEv>
	void insertValue(const char *value) { insertString(value, true); }
 80a0be0:	4631      	mov	r1, r6
 80a0be2:	4620      	mov	r0, r4
 80a0be4:	2201      	movs	r2, #1
 80a0be6:	f002 f947 	bl	80a2e78 <_ZN10JsonWriter12insertStringEPKcb>
		insertChar(':');
 80a0bea:	4620      	mov	r0, r4
 80a0bec:	213a      	movs	r1, #58	; 0x3a
 80a0bee:	f002 f8f7 	bl	80a2de0 <_ZN10JsonWriter10insertCharEc>
		insertValue(value);
 80a0bf2:	4629      	mov	r1, r5
 80a0bf4:	4620      	mov	r0, r4
	}
 80a0bf6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		insertValue(value);
 80a0bfa:	f002 b9f3 	b.w	80a2fe4 <_ZN10JsonWriter11insertValueEf>

080a0bfe <_ZN10JsonWriter14insertKeyValueI6StringEEvPKcT_>:
	void insertKeyValue(const char *key, T value) {
 80a0bfe:	b570      	push	{r4, r5, r6, lr}
 80a0c00:	4604      	mov	r4, r0
 80a0c02:	460e      	mov	r6, r1
 80a0c04:	4615      	mov	r5, r2
		insertCheckSeparator();
 80a0c06:	f002 f9c9 	bl	80a2f9c <_ZN10JsonWriter20insertCheckSeparatorEv>
	void insertValue(const char *value) { insertString(value, true); }
 80a0c0a:	2201      	movs	r2, #1
 80a0c0c:	4631      	mov	r1, r6
 80a0c0e:	4620      	mov	r0, r4
 80a0c10:	f002 f932 	bl	80a2e78 <_ZN10JsonWriter12insertStringEPKcb>
		insertChar(':');
 80a0c14:	4620      	mov	r0, r4
 80a0c16:	213a      	movs	r1, #58	; 0x3a
 80a0c18:	f002 f8e2 	bl	80a2de0 <_ZN10JsonWriter10insertCharEc>
	void insertValue(const String &value) { insertString(value.c_str(), true); }
 80a0c1c:	4620      	mov	r0, r4
 80a0c1e:	6829      	ldr	r1, [r5, #0]
 80a0c20:	2201      	movs	r2, #1
	}
 80a0c22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	void insertValue(const String &value) { insertString(value.c_str(), true); }
 80a0c26:	f002 b927 	b.w	80a2e78 <_ZN10JsonWriter12insertStringEPKcb>
	...

080a0c2c <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>:
	void insertKeyValue(const char *key, T value) {
 80a0c2c:	b570      	push	{r4, r5, r6, lr}
 80a0c2e:	4604      	mov	r4, r0
 80a0c30:	460e      	mov	r6, r1
 80a0c32:	4615      	mov	r5, r2
		insertCheckSeparator();
 80a0c34:	f002 f9b2 	bl	80a2f9c <_ZN10JsonWriter20insertCheckSeparatorEv>
	void insertValue(const char *value) { insertString(value, true); }
 80a0c38:	2201      	movs	r2, #1
 80a0c3a:	4631      	mov	r1, r6
 80a0c3c:	4620      	mov	r0, r4
 80a0c3e:	f002 f91b 	bl	80a2e78 <_ZN10JsonWriter12insertStringEPKcb>
		insertChar(':');
 80a0c42:	4620      	mov	r0, r4
 80a0c44:	213a      	movs	r1, #58	; 0x3a
 80a0c46:	f002 f8cb 	bl	80a2de0 <_ZN10JsonWriter10insertCharEc>
	void insertValue(int value) { insertsprintf("%d", value); }
 80a0c4a:	462a      	mov	r2, r5
 80a0c4c:	4620      	mov	r0, r4
	}
 80a0c4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	void insertValue(int value) { insertsprintf("%d", value); }
 80a0c52:	4901      	ldr	r1, [pc, #4]	; (80a0c58 <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_+0x2c>)
 80a0c54:	f002 b903 	b.w	80a2e5e <_ZN10JsonWriter13insertsprintfEPKcz>
 80a0c58:	080aa7db 	.word	0x080aa7db

080a0c5c <_Z15add_Measurementfffffffffmi6String.part.0>:
void add_Measurement(float phaseVoltageL1, float phaseVoltageL2, float phaseVoltageL3, float currentL1, float currentL2, float currentL3,  float Power, float Energy, float Frequency, unsigned long Timestamp, int socketId=0, String userId="00") {
 80a0c5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a0c60:	460f      	mov	r7, r1
 80a0c62:	f5ad 7d10 	sub.w	sp, sp, #576	; 0x240
    phaseVoltageL1 = (float)(((int)(phaseVoltageL1 * 1000 + .5)) / 1000);
 80a0c66:	496d      	ldr	r1, [pc, #436]	; (80a0e1c <_Z15add_Measurementfffffffffmi6String.part.0+0x1c0>)
void add_Measurement(float phaseVoltageL1, float phaseVoltageL2, float phaseVoltageL3, float currentL1, float currentL2, float currentL3,  float Power, float Energy, float Frequency, unsigned long Timestamp, int socketId=0, String userId="00") {
 80a0c68:	4616      	mov	r6, r2
 80a0c6a:	461d      	mov	r5, r3
    phaseVoltageL1 = (float)(((int)(phaseVoltageL1 * 1000 + .5)) / 1000);
 80a0c6c:	f005 fb26 	bl	80a62bc <__aeabi_fmul>
 80a0c70:	f004 fe76 	bl	80a5960 <__aeabi_f2d>
 80a0c74:	2200      	movs	r2, #0
 80a0c76:	4b6a      	ldr	r3, [pc, #424]	; (80a0e20 <_Z15add_Measurementfffffffffmi6String.part.0+0x1c4>)
 80a0c78:	f004 fd14 	bl	80a56a4 <__adddf3>
 80a0c7c:	f005 f978 	bl	80a5f70 <__aeabi_d2iz>
 80a0c80:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    phaseVoltageL2 = (float)(((int)(phaseVoltageL2 * 1000 + .5)) / 1000);
 80a0c84:	4965      	ldr	r1, [pc, #404]	; (80a0e1c <_Z15add_Measurementfffffffffmi6String.part.0+0x1c0>)
    phaseVoltageL1 = (float)(((int)(phaseVoltageL1 * 1000 + .5)) / 1000);
 80a0c86:	fb90 faf4 	sdiv	sl, r0, r4
    phaseVoltageL2 = (float)(((int)(phaseVoltageL2 * 1000 + .5)) / 1000);
 80a0c8a:	4638      	mov	r0, r7
 80a0c8c:	f005 fb16 	bl	80a62bc <__aeabi_fmul>
 80a0c90:	f004 fe66 	bl	80a5960 <__aeabi_f2d>
 80a0c94:	2200      	movs	r2, #0
 80a0c96:	4b62      	ldr	r3, [pc, #392]	; (80a0e20 <_Z15add_Measurementfffffffffmi6String.part.0+0x1c4>)
 80a0c98:	f004 fd04 	bl	80a56a4 <__adddf3>
 80a0c9c:	f005 f968 	bl	80a5f70 <__aeabi_d2iz>
    phaseVoltageL3 = (float)(((int)(phaseVoltageL3 * 1000 + .5)) / 1000);
 80a0ca0:	495e      	ldr	r1, [pc, #376]	; (80a0e1c <_Z15add_Measurementfffffffffmi6String.part.0+0x1c0>)
    phaseVoltageL2 = (float)(((int)(phaseVoltageL2 * 1000 + .5)) / 1000);
 80a0ca2:	fb90 f9f4 	sdiv	r9, r0, r4
    phaseVoltageL3 = (float)(((int)(phaseVoltageL3 * 1000 + .5)) / 1000);
 80a0ca6:	4630      	mov	r0, r6
 80a0ca8:	f005 fb08 	bl	80a62bc <__aeabi_fmul>
 80a0cac:	f004 fe58 	bl	80a5960 <__aeabi_f2d>
 80a0cb0:	2200      	movs	r2, #0
 80a0cb2:	4b5b      	ldr	r3, [pc, #364]	; (80a0e20 <_Z15add_Measurementfffffffffmi6String.part.0+0x1c4>)
 80a0cb4:	f004 fcf6 	bl	80a56a4 <__adddf3>
 80a0cb8:	f005 f95a 	bl	80a5f70 <__aeabi_d2iz>
    currentL1 = (float)(((int)(currentL1 * 1000 + .5)) / 1000);
 80a0cbc:	4957      	ldr	r1, [pc, #348]	; (80a0e1c <_Z15add_Measurementfffffffffmi6String.part.0+0x1c0>)
    phaseVoltageL3 = (float)(((int)(phaseVoltageL3 * 1000 + .5)) / 1000);
 80a0cbe:	fb90 f8f4 	sdiv	r8, r0, r4
    currentL1 = (float)(((int)(currentL1 * 1000 + .5)) / 1000);
 80a0cc2:	4628      	mov	r0, r5
 80a0cc4:	f005 fafa 	bl	80a62bc <__aeabi_fmul>
 80a0cc8:	f004 fe4a 	bl	80a5960 <__aeabi_f2d>
 80a0ccc:	2200      	movs	r2, #0
 80a0cce:	4b54      	ldr	r3, [pc, #336]	; (80a0e20 <_Z15add_Measurementfffffffffmi6String.part.0+0x1c4>)
 80a0cd0:	f004 fce8 	bl	80a56a4 <__adddf3>
 80a0cd4:	f005 f94c 	bl	80a5f70 <__aeabi_d2iz>
    currentL2 = (float)(((int)(currentL2 * 1000 + .5)) / 1000);
 80a0cd8:	4950      	ldr	r1, [pc, #320]	; (80a0e1c <_Z15add_Measurementfffffffffmi6String.part.0+0x1c0>)
    currentL1 = (float)(((int)(currentL1 * 1000 + .5)) / 1000);
 80a0cda:	fb90 f7f4 	sdiv	r7, r0, r4
    currentL2 = (float)(((int)(currentL2 * 1000 + .5)) / 1000);
 80a0cde:	9898      	ldr	r0, [sp, #608]	; 0x260
 80a0ce0:	f005 faec 	bl	80a62bc <__aeabi_fmul>
 80a0ce4:	f004 fe3c 	bl	80a5960 <__aeabi_f2d>
 80a0ce8:	2200      	movs	r2, #0
 80a0cea:	4b4d      	ldr	r3, [pc, #308]	; (80a0e20 <_Z15add_Measurementfffffffffmi6String.part.0+0x1c4>)
 80a0cec:	f004 fcda 	bl	80a56a4 <__adddf3>
 80a0cf0:	f005 f93e 	bl	80a5f70 <__aeabi_d2iz>
    currentL3 = (float)(((int)(currentL3 * 1000 + .5)) / 1000);
 80a0cf4:	4949      	ldr	r1, [pc, #292]	; (80a0e1c <_Z15add_Measurementfffffffffmi6String.part.0+0x1c0>)
    currentL2 = (float)(((int)(currentL2 * 1000 + .5)) / 1000);
 80a0cf6:	fb90 f6f4 	sdiv	r6, r0, r4
    currentL3 = (float)(((int)(currentL3 * 1000 + .5)) / 1000);
 80a0cfa:	9899      	ldr	r0, [sp, #612]	; 0x264
 80a0cfc:	f005 fade 	bl	80a62bc <__aeabi_fmul>
 80a0d00:	f004 fe2e 	bl	80a5960 <__aeabi_f2d>
 80a0d04:	2200      	movs	r2, #0
 80a0d06:	4b46      	ldr	r3, [pc, #280]	; (80a0e20 <_Z15add_Measurementfffffffffmi6String.part.0+0x1c4>)
 80a0d08:	f004 fccc 	bl	80a56a4 <__adddf3>
 80a0d0c:	f005 f930 	bl	80a5f70 <__aeabi_d2iz>
    Frequency = (float)(((int)(Frequency * 1000 + .5)) / 1000);
 80a0d10:	4942      	ldr	r1, [pc, #264]	; (80a0e1c <_Z15add_Measurementfffffffffmi6String.part.0+0x1c0>)
    currentL3 = (float)(((int)(currentL3 * 1000 + .5)) / 1000);
 80a0d12:	fb90 f5f4 	sdiv	r5, r0, r4
    Frequency = (float)(((int)(Frequency * 1000 + .5)) / 1000);
 80a0d16:	989a      	ldr	r0, [sp, #616]	; 0x268
 80a0d18:	f005 fad0 	bl	80a62bc <__aeabi_fmul>
 80a0d1c:	f004 fe20 	bl	80a5960 <__aeabi_f2d>
 80a0d20:	4b3f      	ldr	r3, [pc, #252]	; (80a0e20 <_Z15add_Measurementfffffffffmi6String.part.0+0x1c4>)
 80a0d22:	2200      	movs	r2, #0
 80a0d24:	f004 fcbe 	bl	80a56a4 <__adddf3>
 80a0d28:	f005 f922 	bl	80a5f70 <__aeabi_d2iz>
 80a0d2c:	fb90 f4f4 	sdiv	r4, r0, r4
    JsonWriterStatic<512> jsonMessage;     
 80a0d30:	a804      	add	r0, sp, #16
 80a0d32:	f7ff ff41 	bl	80a0bb8 <_ZN16JsonWriterStaticILj512EEC1Ev>
	 * @brief Start a new object
	 *
	 * @param jw The JsonWriter object to insert the object into
	 */
	JsonWriterAutoObject(JsonWriter *jw) : jw(jw) {
		jw->startObject();
 80a0d36:	a804      	add	r0, sp, #16
 80a0d38:	f7ff fb3e 	bl	80a03b8 <_ZN10JsonWriter11startObjectEv>
    phaseVoltageL1 = (float)(((int)(phaseVoltageL1 * 1000 + .5)) / 1000);
 80a0d3c:	4650      	mov	r0, sl
 80a0d3e:	f005 fa69 	bl	80a6214 <__aeabi_i2f>
        jsonMessage.insertKeyValue("V1", phaseVoltageL1);
 80a0d42:	4938      	ldr	r1, [pc, #224]	; (80a0e24 <_Z15add_Measurementfffffffffmi6String.part.0+0x1c8>)
    phaseVoltageL1 = (float)(((int)(phaseVoltageL1 * 1000 + .5)) / 1000);
 80a0d44:	4602      	mov	r2, r0
        jsonMessage.insertKeyValue("V1", phaseVoltageL1);
 80a0d46:	a804      	add	r0, sp, #16
 80a0d48:	f7ff ff44 	bl	80a0bd4 <_ZN10JsonWriter14insertKeyValueIfEEvPKcT_>
    phaseVoltageL2 = (float)(((int)(phaseVoltageL2 * 1000 + .5)) / 1000);
 80a0d4c:	4648      	mov	r0, r9
 80a0d4e:	f005 fa61 	bl	80a6214 <__aeabi_i2f>
        jsonMessage.insertKeyValue("V2", phaseVoltageL2);
 80a0d52:	4935      	ldr	r1, [pc, #212]	; (80a0e28 <_Z15add_Measurementfffffffffmi6String.part.0+0x1cc>)
    phaseVoltageL2 = (float)(((int)(phaseVoltageL2 * 1000 + .5)) / 1000);
 80a0d54:	4602      	mov	r2, r0
        jsonMessage.insertKeyValue("V2", phaseVoltageL2);
 80a0d56:	a804      	add	r0, sp, #16
 80a0d58:	f7ff ff3c 	bl	80a0bd4 <_ZN10JsonWriter14insertKeyValueIfEEvPKcT_>
    phaseVoltageL3 = (float)(((int)(phaseVoltageL3 * 1000 + .5)) / 1000);
 80a0d5c:	4640      	mov	r0, r8
 80a0d5e:	f005 fa59 	bl	80a6214 <__aeabi_i2f>
        jsonMessage.insertKeyValue("V3", phaseVoltageL3);
 80a0d62:	4932      	ldr	r1, [pc, #200]	; (80a0e2c <_Z15add_Measurementfffffffffmi6String.part.0+0x1d0>)
    phaseVoltageL3 = (float)(((int)(phaseVoltageL3 * 1000 + .5)) / 1000);
 80a0d64:	4602      	mov	r2, r0
        jsonMessage.insertKeyValue("V3", phaseVoltageL3);
 80a0d66:	a804      	add	r0, sp, #16
 80a0d68:	f7ff ff34 	bl	80a0bd4 <_ZN10JsonWriter14insertKeyValueIfEEvPKcT_>
    currentL1 = (float)(((int)(currentL1 * 1000 + .5)) / 1000);
 80a0d6c:	4638      	mov	r0, r7
 80a0d6e:	f005 fa51 	bl	80a6214 <__aeabi_i2f>
        jsonMessage.insertKeyValue("I1", currentL1);
 80a0d72:	492f      	ldr	r1, [pc, #188]	; (80a0e30 <_Z15add_Measurementfffffffffmi6String.part.0+0x1d4>)
    currentL1 = (float)(((int)(currentL1 * 1000 + .5)) / 1000);
 80a0d74:	4602      	mov	r2, r0
        jsonMessage.insertKeyValue("I1", currentL1);
 80a0d76:	a804      	add	r0, sp, #16
 80a0d78:	f7ff ff2c 	bl	80a0bd4 <_ZN10JsonWriter14insertKeyValueIfEEvPKcT_>
    currentL2 = (float)(((int)(currentL2 * 1000 + .5)) / 1000);
 80a0d7c:	4630      	mov	r0, r6
 80a0d7e:	f005 fa49 	bl	80a6214 <__aeabi_i2f>
        jsonMessage.insertKeyValue("I2", currentL2);
 80a0d82:	492c      	ldr	r1, [pc, #176]	; (80a0e34 <_Z15add_Measurementfffffffffmi6String.part.0+0x1d8>)
    currentL2 = (float)(((int)(currentL2 * 1000 + .5)) / 1000);
 80a0d84:	4602      	mov	r2, r0
        jsonMessage.insertKeyValue("I2", currentL2);
 80a0d86:	a804      	add	r0, sp, #16
 80a0d88:	f7ff ff24 	bl	80a0bd4 <_ZN10JsonWriter14insertKeyValueIfEEvPKcT_>
    currentL3 = (float)(((int)(currentL3 * 1000 + .5)) / 1000);
 80a0d8c:	4628      	mov	r0, r5
 80a0d8e:	f005 fa41 	bl	80a6214 <__aeabi_i2f>
        jsonMessage.insertKeyValue("I3", currentL3);
 80a0d92:	4929      	ldr	r1, [pc, #164]	; (80a0e38 <_Z15add_Measurementfffffffffmi6String.part.0+0x1dc>)
    currentL3 = (float)(((int)(currentL3 * 1000 + .5)) / 1000);
 80a0d94:	4602      	mov	r2, r0
        jsonMessage.insertKeyValue("I3", currentL3);
 80a0d96:	a804      	add	r0, sp, #16
 80a0d98:	f7ff ff1c 	bl	80a0bd4 <_ZN10JsonWriter14insertKeyValueIfEEvPKcT_>
    Frequency = (float)(((int)(Frequency * 1000 + .5)) / 1000);
 80a0d9c:	4620      	mov	r0, r4
 80a0d9e:	f005 fa39 	bl	80a6214 <__aeabi_i2f>
        jsonMessage.insertKeyValue("F", Frequency);
 80a0da2:	4926      	ldr	r1, [pc, #152]	; (80a0e3c <_Z15add_Measurementfffffffffmi6String.part.0+0x1e0>)
    Frequency = (float)(((int)(Frequency * 1000 + .5)) / 1000);
 80a0da4:	4602      	mov	r2, r0
        jsonMessage.insertKeyValue("F", Frequency);
 80a0da6:	a804      	add	r0, sp, #16
 80a0da8:	f7ff ff14 	bl	80a0bd4 <_ZN10JsonWriter14insertKeyValueIfEEvPKcT_>
		jsonMessage.insertKeyValue("UserID", userId);
 80a0dac:	999d      	ldr	r1, [sp, #628]	; 0x274
 80a0dae:	4668      	mov	r0, sp
 80a0db0:	f003 fa43 	bl	80a423a <_ZN6StringC1ERKS_>
 80a0db4:	466a      	mov	r2, sp
 80a0db6:	4922      	ldr	r1, [pc, #136]	; (80a0e40 <_Z15add_Measurementfffffffffmi6String.part.0+0x1e4>)
 80a0db8:	a804      	add	r0, sp, #16
 80a0dba:	f7ff ff20 	bl	80a0bfe <_ZN10JsonWriter14insertKeyValueI6StringEEvPKcT_>
 80a0dbe:	4668      	mov	r0, sp
 80a0dc0:	f003 f9b2 	bl	80a4128 <_ZN6StringD1Ev>
		jsonMessage.insertKeyValue("SocketID", socketId);
 80a0dc4:	9a9c      	ldr	r2, [sp, #624]	; 0x270
 80a0dc6:	491f      	ldr	r1, [pc, #124]	; (80a0e44 <_Z15add_Measurementfffffffffmi6String.part.0+0x1e8>)
 80a0dc8:	a804      	add	r0, sp, #16
 80a0dca:	f7ff ff2f 	bl	80a0c2c <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
		insertCheckSeparator();
 80a0dce:	a804      	add	r0, sp, #16
 80a0dd0:	f002 f8e4 	bl	80a2f9c <_ZN10JsonWriter20insertCheckSeparatorEv>
	void insertValue(const char *value) { insertString(value, true); }
 80a0dd4:	2201      	movs	r2, #1
 80a0dd6:	491c      	ldr	r1, [pc, #112]	; (80a0e48 <_Z15add_Measurementfffffffffmi6String.part.0+0x1ec>)
 80a0dd8:	a804      	add	r0, sp, #16
 80a0dda:	f002 f84d 	bl	80a2e78 <_ZN10JsonWriter12insertStringEPKcb>
		insertChar(':');
 80a0dde:	213a      	movs	r1, #58	; 0x3a
 80a0de0:	a804      	add	r0, sp, #16
 80a0de2:	f001 fffd 	bl	80a2de0 <_ZN10JsonWriter10insertCharEc>
	void insertValue(unsigned long value) { insertsprintf("%lu", value); }
 80a0de6:	9a9b      	ldr	r2, [sp, #620]	; 0x26c
 80a0de8:	4918      	ldr	r1, [pc, #96]	; (80a0e4c <_Z15add_Measurementfffffffffmi6String.part.0+0x1f0>)
 80a0dea:	a804      	add	r0, sp, #16
 80a0dec:	f002 f837 	bl	80a2e5e <_ZN10JsonWriter13insertsprintfEPKcz>

	/**
	 * @brief End the object
	 */
	~JsonWriterAutoObject() {
		jw->finishObjectOrArray();
 80a0df0:	a804      	add	r0, sp, #16
 80a0df2:	f002 f804 	bl	80a2dfe <_ZN10JsonWriter19finishObjectOrArrayEv>
 80a0df6:	2403      	movs	r4, #3
		if(client.publish("HANevse/photonMeasure", jsonMessage.getBuffer())) {
 80a0df8:	4d15      	ldr	r5, [pc, #84]	; (80a0e50 <_Z15add_Measurementfffffffffmi6String.part.0+0x1f4>)
 80a0dfa:	4e16      	ldr	r6, [pc, #88]	; (80a0e54 <_Z15add_Measurementfffffffffmi6String.part.0+0x1f8>)
 80a0dfc:	4629      	mov	r1, r5
 80a0dfe:	4630      	mov	r0, r6
 80a0e00:	9a05      	ldr	r2, [sp, #20]
 80a0e02:	f001 fc20 	bl	80a2646 <_ZN4MQTT7publishEPKcS1_>
 80a0e06:	b908      	cbnz	r0, 80a0e0c <_Z15add_Measurementfffffffffmi6String.part.0+0x1b0>
	for(int i=0; i<3; i++) {
 80a0e08:	3c01      	subs	r4, #1
 80a0e0a:	d1f7      	bne.n	80a0dfc <_Z15add_Measurementfffffffffmi6String.part.0+0x1a0>
    JsonWriterStatic<512> jsonMessage;     
 80a0e0c:	a804      	add	r0, sp, #16
 80a0e0e:	f7ff fa1d 	bl	80a024c <_ZN16JsonWriterStaticILj512EED1Ev>
}
 80a0e12:	f50d 7d10 	add.w	sp, sp, #576	; 0x240
 80a0e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a0e1a:	bf00      	nop
 80a0e1c:	447a0000 	.word	0x447a0000
 80a0e20:	3fe00000 	.word	0x3fe00000
 80a0e24:	080aa203 	.word	0x080aa203
 80a0e28:	080aa206 	.word	0x080aa206
 80a0e2c:	080aa209 	.word	0x080aa209
 80a0e30:	080aa20c 	.word	0x080aa20c
 80a0e34:	080aa20f 	.word	0x080aa20f
 80a0e38:	080aa212 	.word	0x080aa212
 80a0e3c:	080aa215 	.word	0x080aa215
 80a0e40:	080aa217 	.word	0x080aa217
 80a0e44:	080aa21e 	.word	0x080aa21e
 80a0e48:	080aa27b 	.word	0x080aa27b
 80a0e4c:	080aa227 	.word	0x080aa227
 80a0e50:	080aa22b 	.word	0x080aa22b
 80a0e54:	20000500 	.word	0x20000500

080a0e58 <_Z15add_Measurementfffffffffmi6String>:
void add_Measurement(float phaseVoltageL1, float phaseVoltageL2, float phaseVoltageL3, float currentL1, float currentL2, float currentL3,  float Power, float Energy, float Frequency, unsigned long Timestamp, int socketId=0, String userId="00") {
 80a0e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0e5c:	461c      	mov	r4, r3
 80a0e5e:	b085      	sub	sp, #20
 80a0e60:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80a0e62:	4605      	mov	r5, r0
 80a0e64:	9301      	str	r3, [sp, #4]
 80a0e66:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80a0e68:	460e      	mov	r6, r1
 80a0e6a:	9302      	str	r3, [sp, #8]
 80a0e6c:	9b15      	ldr	r3, [sp, #84]	; 0x54
    if ((currentL1 > 50.0)||(currentL2 > 50.0)||(currentL3 > 50.0))
 80a0e6e:	4620      	mov	r0, r4
 80a0e70:	4931      	ldr	r1, [pc, #196]	; (80a0f38 <_Z15add_Measurementfffffffffmi6String+0xe0>)
void add_Measurement(float phaseVoltageL1, float phaseVoltageL2, float phaseVoltageL3, float currentL1, float currentL2, float currentL3,  float Power, float Energy, float Frequency, unsigned long Timestamp, int socketId=0, String userId="00") {
 80a0e72:	4617      	mov	r7, r2
 80a0e74:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 80a0e78:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
 80a0e7c:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
 80a0e80:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
 80a0e84:	9303      	str	r3, [sp, #12]
    if ((currentL1 > 50.0)||(currentL2 > 50.0)||(currentL3 > 50.0))
 80a0e86:	f005 fbd5 	bl	80a6634 <__aeabi_fcmpgt>
 80a0e8a:	2800      	cmp	r0, #0
 80a0e8c:	d14a      	bne.n	80a0f24 <_Z15add_Measurementfffffffffmi6String+0xcc>
 80a0e8e:	4640      	mov	r0, r8
 80a0e90:	4929      	ldr	r1, [pc, #164]	; (80a0f38 <_Z15add_Measurementfffffffffmi6String+0xe0>)
 80a0e92:	f005 fbcf 	bl	80a6634 <__aeabi_fcmpgt>
 80a0e96:	2800      	cmp	r0, #0
 80a0e98:	d144      	bne.n	80a0f24 <_Z15add_Measurementfffffffffmi6String+0xcc>
 80a0e9a:	4648      	mov	r0, r9
 80a0e9c:	4926      	ldr	r1, [pc, #152]	; (80a0f38 <_Z15add_Measurementfffffffffmi6String+0xe0>)
 80a0e9e:	f005 fbc9 	bl	80a6634 <__aeabi_fcmpgt>
 80a0ea2:	2800      	cmp	r0, #0
 80a0ea4:	d13e      	bne.n	80a0f24 <_Z15add_Measurementfffffffffmi6String+0xcc>
    if (((currentL1 < 0.1)&&(currentL2 < 0.1)&&(currentL3 < 0.1))&&((Power > phaseVoltageL1)&&(Power > phaseVoltageL2)&&(Power > phaseVoltageL3) )  )
 80a0ea6:	4620      	mov	r0, r4
 80a0ea8:	f004 fd5a 	bl	80a5960 <__aeabi_f2d>
 80a0eac:	a320      	add	r3, pc, #128	; (adr r3, 80a0f30 <_Z15add_Measurementfffffffffmi6String+0xd8>)
 80a0eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0eb2:	f005 f81f 	bl	80a5ef4 <__aeabi_dcmplt>
 80a0eb6:	b300      	cbz	r0, 80a0efa <_Z15add_Measurementfffffffffmi6String+0xa2>
 80a0eb8:	4640      	mov	r0, r8
 80a0eba:	f004 fd51 	bl	80a5960 <__aeabi_f2d>
 80a0ebe:	a31c      	add	r3, pc, #112	; (adr r3, 80a0f30 <_Z15add_Measurementfffffffffmi6String+0xd8>)
 80a0ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0ec4:	f005 f816 	bl	80a5ef4 <__aeabi_dcmplt>
 80a0ec8:	b1b8      	cbz	r0, 80a0efa <_Z15add_Measurementfffffffffmi6String+0xa2>
 80a0eca:	4648      	mov	r0, r9
 80a0ecc:	f004 fd48 	bl	80a5960 <__aeabi_f2d>
 80a0ed0:	a317      	add	r3, pc, #92	; (adr r3, 80a0f30 <_Z15add_Measurementfffffffffmi6String+0xd8>)
 80a0ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0ed6:	f005 f80d 	bl	80a5ef4 <__aeabi_dcmplt>
 80a0eda:	b170      	cbz	r0, 80a0efa <_Z15add_Measurementfffffffffmi6String+0xa2>
 80a0edc:	4629      	mov	r1, r5
 80a0ede:	4650      	mov	r0, sl
 80a0ee0:	f005 fba8 	bl	80a6634 <__aeabi_fcmpgt>
 80a0ee4:	b148      	cbz	r0, 80a0efa <_Z15add_Measurementfffffffffmi6String+0xa2>
 80a0ee6:	4631      	mov	r1, r6
 80a0ee8:	4650      	mov	r0, sl
 80a0eea:	f005 fba3 	bl	80a6634 <__aeabi_fcmpgt>
 80a0eee:	b120      	cbz	r0, 80a0efa <_Z15add_Measurementfffffffffmi6String+0xa2>
 80a0ef0:	4639      	mov	r1, r7
 80a0ef2:	4650      	mov	r0, sl
 80a0ef4:	f005 fb9e 	bl	80a6634 <__aeabi_fcmpgt>
 80a0ef8:	b9a0      	cbnz	r0, 80a0f24 <_Z15add_Measurementfffffffffmi6String+0xcc>
 80a0efa:	9b03      	ldr	r3, [sp, #12]
 80a0efc:	463a      	mov	r2, r7
 80a0efe:	9313      	str	r3, [sp, #76]	; 0x4c
 80a0f00:	9b02      	ldr	r3, [sp, #8]
 80a0f02:	4631      	mov	r1, r6
 80a0f04:	9312      	str	r3, [sp, #72]	; 0x48
 80a0f06:	9b01      	ldr	r3, [sp, #4]
 80a0f08:	4628      	mov	r0, r5
 80a0f0a:	9311      	str	r3, [sp, #68]	; 0x44
 80a0f0c:	4623      	mov	r3, r4
 80a0f0e:	f8cd b040 	str.w	fp, [sp, #64]	; 0x40
 80a0f12:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 80a0f16:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
}
 80a0f1a:	b005      	add	sp, #20
 80a0f1c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0f20:	f7ff be9c 	b.w	80a0c5c <_Z15add_Measurementfffffffffmi6String.part.0>
 80a0f24:	b005      	add	sp, #20
 80a0f26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a0f2a:	bf00      	nop
 80a0f2c:	f3af 8000 	nop.w
 80a0f30:	9999999a 	.word	0x9999999a
 80a0f34:	3fb99999 	.word	0x3fb99999
 80a0f38:	42480000 	.word	0x42480000

080a0f3c <_ZN10JsonWriter14insertKeyValueIlEEvPKcT_>:
	void insertKeyValue(const char *key, T value) {
 80a0f3c:	b570      	push	{r4, r5, r6, lr}
 80a0f3e:	4604      	mov	r4, r0
 80a0f40:	460e      	mov	r6, r1
 80a0f42:	4615      	mov	r5, r2
		insertCheckSeparator();
 80a0f44:	f002 f82a 	bl	80a2f9c <_ZN10JsonWriter20insertCheckSeparatorEv>
	void insertValue(const char *value) { insertString(value, true); }
 80a0f48:	2201      	movs	r2, #1
 80a0f4a:	4631      	mov	r1, r6
 80a0f4c:	4620      	mov	r0, r4
 80a0f4e:	f001 ff93 	bl	80a2e78 <_ZN10JsonWriter12insertStringEPKcb>
		insertChar(':');
 80a0f52:	4620      	mov	r0, r4
 80a0f54:	213a      	movs	r1, #58	; 0x3a
 80a0f56:	f001 ff43 	bl	80a2de0 <_ZN10JsonWriter10insertCharEc>
	void insertValue(long value) { insertsprintf("%ld", value); }
 80a0f5a:	462a      	mov	r2, r5
 80a0f5c:	4620      	mov	r0, r4
	}
 80a0f5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	void insertValue(long value) { insertsprintf("%ld", value); }
 80a0f62:	4901      	ldr	r1, [pc, #4]	; (80a0f68 <_ZN10JsonWriter14insertKeyValueIlEEvPKcT_+0x2c>)
 80a0f64:	f001 bf7b 	b.w	80a2e5e <_ZN10JsonWriter13insertsprintfEPKcz>
 80a0f68:	080aa241 	.word	0x080aa241

080a0f6c <_Z12readRFIDCardi>:
bool readRFIDCard(int Charger) {
 80a0f6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    Pianswer = 0;
 80a0f70:	2400      	movs	r4, #0
 80a0f72:	4b81      	ldr	r3, [pc, #516]	; (80a1178 <_Z12readRFIDCardi+0x20c>)
    if(Charger==1+CHARGEROFFSET)
 80a0f74:	2801      	cmp	r0, #1
bool readRFIDCard(int Charger) {
 80a0f76:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
    Pianswer = 0;
 80a0f7a:	801c      	strh	r4, [r3, #0]
    if(Charger==1+CHARGEROFFSET)
 80a0f7c:	f040 808d 	bne.w	80a109a <_Z12readRFIDCardi+0x12e>
        if ( ! mfrc522_Charger1.PICC_IsNewCardPresent()) 
 80a0f80:	487e      	ldr	r0, [pc, #504]	; (80a117c <_Z12readRFIDCardi+0x210>)
 80a0f82:	f000 ff6f 	bl	80a1e64 <_ZN7MFRC52221PICC_IsNewCardPresentEv>
 80a0f86:	4e7d      	ldr	r6, [pc, #500]	; (80a117c <_Z12readRFIDCardi+0x210>)
 80a0f88:	2800      	cmp	r0, #0
 80a0f8a:	f000 80f0 	beq.w	80a116e <_Z12readRFIDCardi+0x202>
        if ( ! mfrc522_Charger1.PICC_ReadCardSerial()) 
 80a0f8e:	4630      	mov	r0, r6
 80a0f90:	f001 f8c6 	bl	80a2120 <_ZN7MFRC52219PICC_ReadCardSerialEv>
 80a0f94:	2800      	cmp	r0, #0
 80a0f96:	f000 80ea 	beq.w	80a116e <_Z12readRFIDCardi+0x202>
        DEBUGPORT.print("readCard>\tUID tag on charger1:");
 80a0f9a:	f003 fed3 	bl	80a4d44 <_Z16_fetch_usbserialv>
 80a0f9e:	4978      	ldr	r1, [pc, #480]	; (80a1180 <_Z12readRFIDCardi+0x214>)
 80a0fa0:	f003 fa92 	bl	80a44c8 <_ZN5Print5printEPKc>
        String content = "";        
 80a0fa4:	4668      	mov	r0, sp
 80a0fa6:	4977      	ldr	r1, [pc, #476]	; (80a1184 <_Z12readRFIDCardi+0x218>)
 80a0fa8:	f003 f908 	bl	80a41bc <_ZN6StringC1EPKc>
            DEBUGPORT.print(mfrc522_Charger1.uid.uidByte[i] < 0x10 ? " 0" : " ");
 80a0fac:	f8df 8200 	ldr.w	r8, [pc, #512]	; 80a11b0 <_Z12readRFIDCardi+0x244>
 80a0fb0:	4f75      	ldr	r7, [pc, #468]	; (80a1188 <_Z12readRFIDCardi+0x21c>)
        for (byte i = 0; i < mfrc522_Charger1.uid.size; i++) 
 80a0fb2:	7833      	ldrb	r3, [r6, #0]
 80a0fb4:	b2e5      	uxtb	r5, r4
 80a0fb6:	42ab      	cmp	r3, r5
 80a0fb8:	d92c      	bls.n	80a1014 <_Z12readRFIDCardi+0xa8>
            DEBUGPORT.print(mfrc522_Charger1.uid.uidByte[i] < 0x10 ? " 0" : " ");
 80a0fba:	4435      	add	r5, r6
 80a0fbc:	f003 fec2 	bl	80a4d44 <_Z16_fetch_usbserialv>
 80a0fc0:	7869      	ldrb	r1, [r5, #1]
 80a0fc2:	3401      	adds	r4, #1
 80a0fc4:	290f      	cmp	r1, #15
 80a0fc6:	bf94      	ite	ls
 80a0fc8:	4641      	movls	r1, r8
 80a0fca:	4639      	movhi	r1, r7
 80a0fcc:	f003 fa7c 	bl	80a44c8 <_ZN5Print5printEPKc>
            DEBUGPORT.print(mfrc522_Charger1.uid.uidByte[i], HEX);
 80a0fd0:	f003 feb8 	bl	80a4d44 <_Z16_fetch_usbserialv>
 80a0fd4:	2210      	movs	r2, #16
 80a0fd6:	7869      	ldrb	r1, [r5, #1]
 80a0fd8:	f003 fa93 	bl	80a4502 <_ZN5Print11printNumberEmh>
            content.concat(String(mfrc522_Charger1.uid.uidByte[i] < 0x10 ? " 0" : " "));
 80a0fdc:	7869      	ldrb	r1, [r5, #1]
 80a0fde:	a808      	add	r0, sp, #32
 80a0fe0:	290f      	cmp	r1, #15
 80a0fe2:	bf94      	ite	ls
 80a0fe4:	4641      	movls	r1, r8
 80a0fe6:	4639      	movhi	r1, r7
 80a0fe8:	f003 f8e8 	bl	80a41bc <_ZN6StringC1EPKc>
 80a0fec:	a908      	add	r1, sp, #32
 80a0fee:	4668      	mov	r0, sp
 80a0ff0:	f003 f9c1 	bl	80a4376 <_ZN6String6concatERKS_>
 80a0ff4:	a808      	add	r0, sp, #32
 80a0ff6:	f003 f897 	bl	80a4128 <_ZN6StringD1Ev>
            content.concat(String(mfrc522_Charger1.uid.uidByte[i], HEX));
 80a0ffa:	2210      	movs	r2, #16
 80a0ffc:	7869      	ldrb	r1, [r5, #1]
 80a0ffe:	a808      	add	r0, sp, #32
 80a1000:	f003 f93f 	bl	80a4282 <_ZN6StringC1Ehh>
 80a1004:	a908      	add	r1, sp, #32
 80a1006:	4668      	mov	r0, sp
 80a1008:	f003 f9b5 	bl	80a4376 <_ZN6String6concatERKS_>
 80a100c:	a808      	add	r0, sp, #32
 80a100e:	f003 f88b 	bl	80a4128 <_ZN6StringD1Ev>
        for (byte i = 0; i < mfrc522_Charger1.uid.size; i++) 
 80a1012:	e7ce      	b.n	80a0fb2 <_Z12readRFIDCardi+0x46>
        JsonWriterStatic<512> jsonMessage;
 80a1014:	a808      	add	r0, sp, #32
 80a1016:	f7ff fdcf 	bl	80a0bb8 <_ZN16JsonWriterStaticILj512EEC1Ev>
        UIDtagCharger1=content.substring(1); //??? why does it start at 1?
 80a101a:	2201      	movs	r2, #1
 80a101c:	4669      	mov	r1, sp
 80a101e:	a804      	add	r0, sp, #16
 80a1020:	f003 fa20 	bl	80a4464 <_ZNK6String9substringEj>
 80a1024:	a904      	add	r1, sp, #16
 80a1026:	4859      	ldr	r0, [pc, #356]	; (80a118c <_Z12readRFIDCardi+0x220>)
 80a1028:	f003 f912 	bl	80a4250 <_ZN6StringaSEOS_>
 80a102c:	a804      	add	r0, sp, #16
 80a102e:	f003 f87b 	bl	80a4128 <_ZN6StringD1Ev>
		jw->startObject();
 80a1032:	a808      	add	r0, sp, #32
 80a1034:	f7ff f9c0 	bl	80a03b8 <_ZN10JsonWriter11startObjectEv>
		jsonMessage.insertKeyValue("UserId", UIDtagCharger1);
 80a1038:	4954      	ldr	r1, [pc, #336]	; (80a118c <_Z12readRFIDCardi+0x220>)
 80a103a:	a804      	add	r0, sp, #16
 80a103c:	f003 f8fd 	bl	80a423a <_ZN6StringC1ERKS_>
 80a1040:	aa04      	add	r2, sp, #16
 80a1042:	4953      	ldr	r1, [pc, #332]	; (80a1190 <_Z12readRFIDCardi+0x224>)
 80a1044:	a808      	add	r0, sp, #32
 80a1046:	f7ff fdda 	bl	80a0bfe <_ZN10JsonWriter14insertKeyValueI6StringEEvPKcT_>
 80a104a:	a804      	add	r0, sp, #16
 80a104c:	f003 f86c 	bl	80a4128 <_ZN6StringD1Ev>
        jsonMessage.insertKeyValue("Charger", Charger);
 80a1050:	2201      	movs	r2, #1
        jsonMessage.insertKeyValue("Charger", Charger);
 80a1052:	4950      	ldr	r1, [pc, #320]	; (80a1194 <_Z12readRFIDCardi+0x228>)
 80a1054:	a808      	add	r0, sp, #32
 80a1056:	f7ff fde9 	bl	80a0c2c <_ZN10JsonWriter14insertKeyValueIiEEvPKcT_>
		jsonMessage.insertKeyValue("StartTime", Time.now());
 80a105a:	f003 fc98 	bl	80a498e <_ZN9TimeClass3nowEv>
 80a105e:	494e      	ldr	r1, [pc, #312]	; (80a1198 <_Z12readRFIDCardi+0x22c>)
 80a1060:	4602      	mov	r2, r0
 80a1062:	a808      	add	r0, sp, #32
 80a1064:	f7ff ff6a 	bl	80a0f3c <_ZN10JsonWriter14insertKeyValueIlEEvPKcT_>
		jw->finishObjectOrArray();
 80a1068:	a808      	add	r0, sp, #32
 80a106a:	f001 fec8 	bl	80a2dfe <_ZN10JsonWriter19finishObjectOrArrayEv>
        client.publish("HANevse/updateUser", jsonMessage.getBuffer());
 80a106e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80a1070:	494a      	ldr	r1, [pc, #296]	; (80a119c <_Z12readRFIDCardi+0x230>)
 80a1072:	484b      	ldr	r0, [pc, #300]	; (80a11a0 <_Z12readRFIDCardi+0x234>)
 80a1074:	f001 fae7 	bl	80a2646 <_ZN4MQTT7publishEPKcS1_>
        JsonWriterStatic<512> jsonMessage;
 80a1078:	a808      	add	r0, sp, #32
 80a107a:	f7ff f8e7 	bl	80a024c <_ZN16JsonWriterStaticILj512EED1Ev>
        String content = "";        
 80a107e:	4668      	mov	r0, sp
 80a1080:	f003 f852 	bl	80a4128 <_ZN6StringD1Ev>
    DEBUGPORT.println("");
 80a1084:	f003 fe5e 	bl	80a4d44 <_Z16_fetch_usbserialv>
 80a1088:	493e      	ldr	r1, [pc, #248]	; (80a1184 <_Z12readRFIDCardi+0x218>)
 80a108a:	f003 fa30 	bl	80a44ee <_ZN5Print7printlnEPKc>
    delay(500);
 80a108e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a1092:	f003 fc97 	bl	80a49c4 <delay>
     return Authorized;
 80a1096:	2001      	movs	r0, #1
 80a1098:	e06a      	b.n	80a1170 <_Z12readRFIDCardi+0x204>
    if(Charger==2+CHARGEROFFSET)
 80a109a:	2802      	cmp	r0, #2
 80a109c:	d1f2      	bne.n	80a1084 <_Z12readRFIDCardi+0x118>
        if ( ! mfrc522_Charger2.PICC_IsNewCardPresent()) 
 80a109e:	4841      	ldr	r0, [pc, #260]	; (80a11a4 <_Z12readRFIDCardi+0x238>)
 80a10a0:	f000 fee0 	bl	80a1e64 <_ZN7MFRC52221PICC_IsNewCardPresentEv>
 80a10a4:	4e3f      	ldr	r6, [pc, #252]	; (80a11a4 <_Z12readRFIDCardi+0x238>)
 80a10a6:	2800      	cmp	r0, #0
 80a10a8:	d061      	beq.n	80a116e <_Z12readRFIDCardi+0x202>
        if ( ! mfrc522_Charger2.PICC_ReadCardSerial()) 
 80a10aa:	4630      	mov	r0, r6
 80a10ac:	f001 f838 	bl	80a2120 <_ZN7MFRC52219PICC_ReadCardSerialEv>
 80a10b0:	2800      	cmp	r0, #0
 80a10b2:	d05c      	beq.n	80a116e <_Z12readRFIDCardi+0x202>
        DEBUGPORT.print("readCard>\tUID tag on charger2:");
 80a10b4:	f003 fe46 	bl	80a4d44 <_Z16_fetch_usbserialv>
 80a10b8:	493b      	ldr	r1, [pc, #236]	; (80a11a8 <_Z12readRFIDCardi+0x23c>)
 80a10ba:	f003 fa05 	bl	80a44c8 <_ZN5Print5printEPKc>
        String content = "";        
 80a10be:	4668      	mov	r0, sp
 80a10c0:	4930      	ldr	r1, [pc, #192]	; (80a1184 <_Z12readRFIDCardi+0x218>)
 80a10c2:	f003 f87b 	bl	80a41bc <_ZN6StringC1EPKc>
            DEBUGPORT.print(mfrc522_Charger2.uid.uidByte[i] < 0x10 ? " 0" : " ");
 80a10c6:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 80a11b0 <_Z12readRFIDCardi+0x244>
 80a10ca:	4f2f      	ldr	r7, [pc, #188]	; (80a1188 <_Z12readRFIDCardi+0x21c>)
        for (byte i = 0; i < mfrc522_Charger2.uid.size; i++) 
 80a10cc:	7833      	ldrb	r3, [r6, #0]
 80a10ce:	b2e5      	uxtb	r5, r4
 80a10d0:	42ab      	cmp	r3, r5
 80a10d2:	d92c      	bls.n	80a112e <_Z12readRFIDCardi+0x1c2>
            DEBUGPORT.print(mfrc522_Charger2.uid.uidByte[i] < 0x10 ? " 0" : " ");
 80a10d4:	4435      	add	r5, r6
 80a10d6:	f003 fe35 	bl	80a4d44 <_Z16_fetch_usbserialv>
 80a10da:	7869      	ldrb	r1, [r5, #1]
 80a10dc:	3401      	adds	r4, #1
 80a10de:	290f      	cmp	r1, #15
 80a10e0:	bf94      	ite	ls
 80a10e2:	4641      	movls	r1, r8
 80a10e4:	4639      	movhi	r1, r7
 80a10e6:	f003 f9ef 	bl	80a44c8 <_ZN5Print5printEPKc>
            DEBUGPORT.print(mfrc522_Charger2.uid.uidByte[i], HEX);
 80a10ea:	f003 fe2b 	bl	80a4d44 <_Z16_fetch_usbserialv>
 80a10ee:	2210      	movs	r2, #16
 80a10f0:	7869      	ldrb	r1, [r5, #1]
 80a10f2:	f003 fa06 	bl	80a4502 <_ZN5Print11printNumberEmh>
            content.concat(String(mfrc522_Charger2.uid.uidByte[i] < 0x10 ? " 0" : " "));
 80a10f6:	7869      	ldrb	r1, [r5, #1]
 80a10f8:	a808      	add	r0, sp, #32
 80a10fa:	290f      	cmp	r1, #15
 80a10fc:	bf94      	ite	ls
 80a10fe:	4641      	movls	r1, r8
 80a1100:	4639      	movhi	r1, r7
 80a1102:	f003 f85b 	bl	80a41bc <_ZN6StringC1EPKc>
 80a1106:	a908      	add	r1, sp, #32
 80a1108:	4668      	mov	r0, sp
 80a110a:	f003 f934 	bl	80a4376 <_ZN6String6concatERKS_>
 80a110e:	a808      	add	r0, sp, #32
 80a1110:	f003 f80a 	bl	80a4128 <_ZN6StringD1Ev>
            content.concat(String(mfrc522_Charger2.uid.uidByte[i], HEX));
 80a1114:	2210      	movs	r2, #16
 80a1116:	7869      	ldrb	r1, [r5, #1]
 80a1118:	a808      	add	r0, sp, #32
 80a111a:	f003 f8b2 	bl	80a4282 <_ZN6StringC1Ehh>
 80a111e:	a908      	add	r1, sp, #32
 80a1120:	4668      	mov	r0, sp
 80a1122:	f003 f928 	bl	80a4376 <_ZN6String6concatERKS_>
 80a1126:	a808      	add	r0, sp, #32
 80a1128:	f002 fffe 	bl	80a4128 <_ZN6StringD1Ev>
        for (byte i = 0; i < mfrc522_Charger2.uid.size; i++) 
 80a112c:	e7ce      	b.n	80a10cc <_Z12readRFIDCardi+0x160>
        UIDtagCharger2=content.substring(1);
 80a112e:	2201      	movs	r2, #1
 80a1130:	4669      	mov	r1, sp
 80a1132:	a808      	add	r0, sp, #32
 80a1134:	f003 f996 	bl	80a4464 <_ZNK6String9substringEj>
 80a1138:	a908      	add	r1, sp, #32
 80a113a:	481c      	ldr	r0, [pc, #112]	; (80a11ac <_Z12readRFIDCardi+0x240>)
 80a113c:	f003 f888 	bl	80a4250 <_ZN6StringaSEOS_>
 80a1140:	a808      	add	r0, sp, #32
 80a1142:	f002 fff1 	bl	80a4128 <_ZN6StringD1Ev>
        JsonWriterStatic<512> jsonMessage;
 80a1146:	a808      	add	r0, sp, #32
 80a1148:	f7ff fd36 	bl	80a0bb8 <_ZN16JsonWriterStaticILj512EEC1Ev>
		jw->startObject();
 80a114c:	a808      	add	r0, sp, #32
 80a114e:	f7ff f933 	bl	80a03b8 <_ZN10JsonWriter11startObjectEv>
		jsonMessage.insertKeyValue("UserId", UIDtagCharger2);
 80a1152:	4916      	ldr	r1, [pc, #88]	; (80a11ac <_Z12readRFIDCardi+0x240>)
 80a1154:	a804      	add	r0, sp, #16
 80a1156:	f003 f870 	bl	80a423a <_ZN6StringC1ERKS_>
 80a115a:	aa04      	add	r2, sp, #16
 80a115c:	490c      	ldr	r1, [pc, #48]	; (80a1190 <_Z12readRFIDCardi+0x224>)
 80a115e:	a808      	add	r0, sp, #32
 80a1160:	f7ff fd4d 	bl	80a0bfe <_ZN10JsonWriter14insertKeyValueI6StringEEvPKcT_>
 80a1164:	a804      	add	r0, sp, #16
 80a1166:	f002 ffdf 	bl	80a4128 <_ZN6StringD1Ev>
        jsonMessage.insertKeyValue("Charger", Charger);
 80a116a:	2202      	movs	r2, #2
 80a116c:	e771      	b.n	80a1052 <_Z12readRFIDCardi+0xe6>
            return false;
 80a116e:	2000      	movs	r0, #0
}
 80a1170:	f50d 7d14 	add.w	sp, sp, #592	; 0x250
 80a1174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a1178:	20000350 	.word	0x20000350
 80a117c:	20000569 	.word	0x20000569
 80a1180:	080aa248 	.word	0x080aa248
 80a1184:	080aa2c3 	.word	0x080aa2c3
 80a1188:	080aa2c5 	.word	0x080aa2c5
 80a118c:	2000037c 	.word	0x2000037c
 80a1190:	080aa267 	.word	0x080aa267
 80a1194:	080aa26e 	.word	0x080aa26e
 80a1198:	080aa276 	.word	0x080aa276
 80a119c:	080aa280 	.word	0x080aa280
 80a11a0:	20000500 	.word	0x20000500
 80a11a4:	20000577 	.word	0x20000577
 80a11a8:	080aa293 	.word	0x080aa293
 80a11ac:	2000038c 	.word	0x2000038c
 80a11b0:	080aa245 	.word	0x080aa245

080a11b4 <loop>:
	
	//RGB.control(true);
    Time.zone(1); //Dutch time zone
}

void loop() {
 80a11b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    //Check the connection to the MQTT broker
    if (client.isConnected()) {
 80a11b8:	48ab      	ldr	r0, [pc, #684]	; (80a1468 <loop+0x2b4>)
void loop() {
 80a11ba:	b099      	sub	sp, #100	; 0x64
    if (client.isConnected()) {
 80a11bc:	f001 f8d5 	bl	80a236a <_ZN4MQTT11isConnectedEv>
 80a11c0:	2800      	cmp	r0, #0
 80a11c2:	f000 810f 	beq.w	80a13e4 <loop+0x230>
        client.loop();
 80a11c6:	48a8      	ldr	r0, [pc, #672]	; (80a1468 <loop+0x2b4>)
 80a11c8:	f001 fa84 	bl	80a26d4 <_ZN4MQTT4loopEv>
    }
    else reconnect();
    
    Particle.process();
 80a11cc:	f7ff f8e8 	bl	80a03a0 <_ZN10CloudClass7processEv>
    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a11d0:	f002 fba6 	bl	80a3920 <spark_cloud_flag_connected>
    //currentStr = String(Current[0][0],1)+" "+String( Current[0][1],1)+" "+String(Current[0][2],1)+" "+String(Current[1][0],1)+" "+String( Current[1][1],1)+" "+String(Current[1][2],1)+" "+String(Frequency[0],2);
//+    currentStr = String(Current[0][0],1)+" "+String( PhaseVoltage[0][1],1)+" "+String(LineVoltage[0][2],1)+" "+String(Power[1][0],1)+" "+String( Energy[1],1)+" "+String(Current[1][2],1)+" "+String(Frequency[0],2);
    //currentStr=String(Current[1][2],1)+" "+currentStr.substring(0, max(200, currentStr.length()))
    //currentStr = String(CurrentList[0],1)+" "+String(CurrentList[1],1)+" "+String(CurrentList[2],1)+" "+String(CurrentList[3],1)+" "+String(CurrentList[4],1)+" "+String(CurrentList[5],1)+" "+String(CurrentList[6],1)+" "+String(CurrentList[7],1)+" "+String(CurrentList[8],1)+" "+String(CurrentList[9],1)+" "+String(CurrentList[10],1)+" "+String(CurrentList[11],1)+" "+String(CurrentList[12],1)+" "+String(CurrentList[13],1)+" "+String(CurrentList[14],1)+" "+String(CurrentList[15],1)+" "+String(CurrentList[16],1)+" "+String(CurrentList[17],1)+" "+String(CurrentList[18],1)+" "+String(CurrentList[19],1);
    if (Particle.connected() == false) {
 80a11d4:	b908      	cbnz	r0, 80a11da <loop+0x26>
        spark_cloud_flag_connect();
 80a11d6:	f002 fb9b 	bl	80a3910 <spark_cloud_flag_connect>
        Particle.connect();
    }
    //int Charger =1; //+
    int Charger = readSerialOlimex()+CHARGEROFFSET; //+
 80a11da:	f7ff fb0b 	bl	80a07f4 <_Z16readSerialOlimexv>
    Particle.process();
    if(counter>10){
 80a11de:	4ca3      	ldr	r4, [pc, #652]	; (80a146c <loop+0x2b8>)
    int Charger = readSerialOlimex()+CHARGEROFFSET; //+
 80a11e0:	4605      	mov	r5, r0
    Particle.process();
 80a11e2:	f7ff f8dd 	bl	80a03a0 <_ZN10CloudClass7processEv>
    if(counter>10){
 80a11e6:	6823      	ldr	r3, [r4, #0]
 80a11e8:	2b0a      	cmp	r3, #10
 80a11ea:	dd46      	ble.n	80a127a <loop+0xc6>
		counter = 0;
 80a11ec:	2300      	movs	r3, #0
 80a11ee:	6023      	str	r3, [r4, #0]
		DEBUGPORT.println("LatestStartTime>\t"+String(LatestStartTime[0])+", "+String(LatestStartTime[1]));
 80a11f0:	f003 fda8 	bl	80a4d44 <_Z16_fetch_usbserialv>
 80a11f4:	f8df 82a4 	ldr.w	r8, [pc, #676]	; 80a149c <loop+0x2e8>
 80a11f8:	4606      	mov	r6, r0
	StringSumHelper(const char *p) : String(p) {}
 80a11fa:	499d      	ldr	r1, [pc, #628]	; (80a1470 <loop+0x2bc>)
 80a11fc:	a810      	add	r0, sp, #64	; 0x40
 80a11fe:	f002 ffdd 	bl	80a41bc <_ZN6StringC1EPKc>
 80a1202:	220a      	movs	r2, #10
 80a1204:	f8d8 1000 	ldr.w	r1, [r8]
 80a1208:	a80c      	add	r0, sp, #48	; 0x30
 80a120a:	f003 f872 	bl	80a42f2 <_ZN6StringC1Emh>
 80a120e:	a90c      	add	r1, sp, #48	; 0x30
 80a1210:	a810      	add	r0, sp, #64	; 0x40
 80a1212:	f003 f8d2 	bl	80a43ba <_ZplRK15StringSumHelperRK6String>
 80a1216:	4997      	ldr	r1, [pc, #604]	; (80a1474 <loop+0x2c0>)
 80a1218:	f003 f8db 	bl	80a43d2 <_ZplRK15StringSumHelperPKc>
 80a121c:	4607      	mov	r7, r0
 80a121e:	220a      	movs	r2, #10
 80a1220:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80a1224:	a814      	add	r0, sp, #80	; 0x50
 80a1226:	f003 f864 	bl	80a42f2 <_ZN6StringC1Emh>
 80a122a:	4638      	mov	r0, r7
 80a122c:	a914      	add	r1, sp, #80	; 0x50
 80a122e:	f003 f8c4 	bl	80a43ba <_ZplRK15StringSumHelperRK6String>
 80a1232:	6801      	ldr	r1, [r0, #0]
 80a1234:	4630      	mov	r0, r6
 80a1236:	f003 f95a 	bl	80a44ee <_ZN5Print7printlnEPKc>
 80a123a:	a814      	add	r0, sp, #80	; 0x50
 80a123c:	f002 ff74 	bl	80a4128 <_ZN6StringD1Ev>
 80a1240:	a80c      	add	r0, sp, #48	; 0x30
 80a1242:	f002 ff71 	bl	80a4128 <_ZN6StringD1Ev>
class StringSumHelper : public String
 80a1246:	a810      	add	r0, sp, #64	; 0x40
 80a1248:	f002 ff6e 	bl	80a4128 <_ZN6StringD1Ev>
		DEBUGPORT.println(String(Current[1][0]+ Current[1][1]+ Current[1][2]));
 80a124c:	f003 fd7a 	bl	80a4d44 <_Z16_fetch_usbserialv>
 80a1250:	4f89      	ldr	r7, [pc, #548]	; (80a1478 <loop+0x2c4>)
 80a1252:	4606      	mov	r6, r0
 80a1254:	6939      	ldr	r1, [r7, #16]
 80a1256:	68f8      	ldr	r0, [r7, #12]
 80a1258:	f004 ff28 	bl	80a60ac <__addsf3>
 80a125c:	6979      	ldr	r1, [r7, #20]
 80a125e:	f004 ff25 	bl	80a60ac <__addsf3>
 80a1262:	2206      	movs	r2, #6
 80a1264:	4601      	mov	r1, r0
 80a1266:	a814      	add	r0, sp, #80	; 0x50
 80a1268:	f003 f857 	bl	80a431a <_ZN6StringC1Efi>
 80a126c:	4630      	mov	r0, r6
 80a126e:	9914      	ldr	r1, [sp, #80]	; 0x50
 80a1270:	f003 f93d 	bl	80a44ee <_ZN5Print7printlnEPKc>
 80a1274:	a814      	add	r0, sp, #80	; 0x50
 80a1276:	f002 ff57 	bl	80a4128 <_ZN6StringD1Ev>
    }
    counter++;
 80a127a:	6823      	ldr	r3, [r4, #0]
 80a127c:	3301      	adds	r3, #1
 80a127e:	6023      	str	r3, [r4, #0]
 80a1280:	f002 f926 	bl	80a34d0 <HAL_Timer_Get_Milli_Seconds>
		
    // store new measurement value if it is received correctly from energymeter (via the Olimex).
    if(millis()>nextTime[handledCharger] && (Charger==1+CHARGEROFFSET || Charger==2+CHARGEROFFSET)) //+ all the if{}
 80a1284:	4c7d      	ldr	r4, [pc, #500]	; (80a147c <loop+0x2c8>)
 80a1286:	4b7e      	ldr	r3, [pc, #504]	; (80a1480 <loop+0x2cc>)
 80a1288:	7822      	ldrb	r2, [r4, #0]
 80a128a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80a128e:	4283      	cmp	r3, r0
 80a1290:	d265      	bcs.n	80a135e <loop+0x1aa>
 80a1292:	3d01      	subs	r5, #1
 80a1294:	2d01      	cmp	r5, #1
 80a1296:	d862      	bhi.n	80a135e <loop+0x1aa>
    {
        Particle.process();
 80a1298:	f7ff f882 	bl	80a03a0 <_ZN10CloudClass7processEv>
        //getUserIdAtSocket(Charger)
        int tempCharger = Charger;
        Charger = handledCharger + 1;
        if(((activeCharger()==Charger) || (activeCharger() == 3)) && (getUserIdAtSocket(Charger)!="00"))
 80a129c:	f7ff faf8 	bl	80a0890 <_Z13activeChargerv>
        Charger = handledCharger + 1;
 80a12a0:	7826      	ldrb	r6, [r4, #0]
 80a12a2:	1c75      	adds	r5, r6, #1
        if(((activeCharger()==Charger) || (activeCharger() == 3)) && (getUserIdAtSocket(Charger)!="00"))
 80a12a4:	42a8      	cmp	r0, r5
 80a12a6:	d001      	beq.n	80a12ac <loop+0xf8>
 80a12a8:	2803      	cmp	r0, #3
 80a12aa:	d14e      	bne.n	80a134a <loop+0x196>
 80a12ac:	ac14      	add	r4, sp, #80	; 0x50
 80a12ae:	4629      	mov	r1, r5
 80a12b0:	4620      	mov	r0, r4
 80a12b2:	f7ff fb97 	bl	80a09e4 <_Z17getUserIdAtSocketi>
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
 80a12b6:	4620      	mov	r0, r4
 80a12b8:	4972      	ldr	r1, [pc, #456]	; (80a1484 <loop+0x2d0>)
 80a12ba:	f003 f89e 	bl	80a43fa <_ZNK6String6equalsEPKc>
 80a12be:	4607      	mov	r7, r0
 80a12c0:	4620      	mov	r0, r4
 80a12c2:	f002 ff31 	bl	80a4128 <_ZN6StringD1Ev>
 80a12c6:	2f00      	cmp	r7, #0
 80a12c8:	d13f      	bne.n	80a134a <loop+0x196>
        {
            //getUserIdAtSocket(Charger+CHARGEROFFSET);
            add_Measurement(PhaseVoltage[Charger-1][0], PhaseVoltage[Charger-1][1], PhaseVoltage[Charger-1][2], Current[Charger-1][0], Current[Charger-1][1], Current[Charger-1][2], Power[Charger-1][0]+Power[Charger-1][1]+Power[Charger-1][2], Energy[Charger-1], Frequency[Charger-1], Time.now(), Charger+CHARGEROFFSET, getUserIdAtSocket(Charger+CHARGEROFFSET));
 80a12ca:	230c      	movs	r3, #12
 80a12cc:	4373      	muls	r3, r6
 80a12ce:	496e      	ldr	r1, [pc, #440]	; (80a1488 <loop+0x2d4>)
 80a12d0:	18ca      	adds	r2, r1, r3
 80a12d2:	f851 8003 	ldr.w	r8, [r1, r3]
 80a12d6:	4968      	ldr	r1, [pc, #416]	; (80a1478 <loop+0x2c4>)
 80a12d8:	f8d2 9004 	ldr.w	r9, [r2, #4]
 80a12dc:	f8d2 a008 	ldr.w	sl, [r2, #8]
 80a12e0:	18ca      	adds	r2, r1, r3
 80a12e2:	f851 b003 	ldr.w	fp, [r1, r3]
 80a12e6:	6851      	ldr	r1, [r2, #4]
 80a12e8:	6892      	ldr	r2, [r2, #8]
 80a12ea:	9108      	str	r1, [sp, #32]
 80a12ec:	9209      	str	r2, [sp, #36]	; 0x24
 80a12ee:	4a67      	ldr	r2, [pc, #412]	; (80a148c <loop+0x2d8>)
 80a12f0:	18d7      	adds	r7, r2, r3
 80a12f2:	58d0      	ldr	r0, [r2, r3]
 80a12f4:	6879      	ldr	r1, [r7, #4]
 80a12f6:	f004 fed9 	bl	80a60ac <__addsf3>
 80a12fa:	68b9      	ldr	r1, [r7, #8]
 80a12fc:	f004 fed6 	bl	80a60ac <__addsf3>
 80a1300:	4b63      	ldr	r3, [pc, #396]	; (80a1490 <loop+0x2dc>)
 80a1302:	4a64      	ldr	r2, [pc, #400]	; (80a1494 <loop+0x2e0>)
 80a1304:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 80a1308:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
 80a130c:	930b      	str	r3, [sp, #44]	; 0x2c
 80a130e:	920a      	str	r2, [sp, #40]	; 0x28
 80a1310:	4607      	mov	r7, r0
 80a1312:	f003 fb3c 	bl	80a498e <_ZN9TimeClass3nowEv>
 80a1316:	4606      	mov	r6, r0
 80a1318:	4629      	mov	r1, r5
 80a131a:	4620      	mov	r0, r4
 80a131c:	f7ff fb62 	bl	80a09e4 <_Z17getUserIdAtSocketi>
 80a1320:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80a1322:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80a1324:	9303      	str	r3, [sp, #12]
 80a1326:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a1328:	4640      	mov	r0, r8
 80a132a:	9301      	str	r3, [sp, #4]
 80a132c:	9b08      	ldr	r3, [sp, #32]
 80a132e:	9204      	str	r2, [sp, #16]
 80a1330:	9300      	str	r3, [sp, #0]
 80a1332:	4652      	mov	r2, sl
 80a1334:	465b      	mov	r3, fp
 80a1336:	4649      	mov	r1, r9
 80a1338:	e9cd 5406 	strd	r5, r4, [sp, #24]
 80a133c:	9605      	str	r6, [sp, #20]
 80a133e:	9702      	str	r7, [sp, #8]
 80a1340:	f7ff fd8a 	bl	80a0e58 <_Z15add_Measurementfffffffffmi6String>
 80a1344:	4620      	mov	r0, r4
 80a1346:	f002 feef 	bl	80a4128 <_ZN6StringD1Ev>
 80a134a:	f002 f8c1 	bl	80a34d0 <HAL_Timer_Get_Milli_Seconds>
        }
        Charger = tempCharger;
        nextTime[handledCharger] = millis() + 30000; //every 30 sec
 80a134e:	4b4b      	ldr	r3, [pc, #300]	; (80a147c <loop+0x2c8>)
 80a1350:	f500 40ea 	add.w	r0, r0, #29952	; 0x7500
 80a1354:	781a      	ldrb	r2, [r3, #0]
 80a1356:	4b4a      	ldr	r3, [pc, #296]	; (80a1480 <loop+0x2cc>)
 80a1358:	3030      	adds	r0, #48	; 0x30
 80a135a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
    }
    
//     run loop very often to check new RFID cards
    Particle.process(); //+
 80a135e:	f7ff f81f 	bl	80a03a0 <_ZN10CloudClass7processEv>
    bool Authorized_Charger1=readRFIDCard(1+CHARGEROFFSET); //+
 80a1362:	2001      	movs	r0, #1
 80a1364:	f7ff fe02 	bl	80a0f6c <_Z12readRFIDCardi>
    delay(5);
 80a1368:	2005      	movs	r0, #5
 80a136a:	f003 fb2b 	bl	80a49c4 <delay>
    //DEBUGPORT.println(String(LatestStartTime[0]+60));
    //DEBUGPORT.println(String(Time.now()));
    //DEBUGPORT.println((LatestStartTime[0] + 60 < Time.now()),DEC);
    //if ((LatestStartTime[0] + 60 < Time.now()) && (Current[0][0]+ Current[0][1]+ Current[0][2]) < 1)
    //if (((numberOfZeroReadings[0]>10 && (LatestStartTime[0] + 60 < Time.now()))|| ((Time.now()<LatestStartTime[0] + 70)&&(LatestStartTime[0] + 60 < Time.now()))) && (Current[0][0]+ Current[0][1]+ Current[0][2]) < 1)
    if( ((numberOfZeroReadings[0]>10)||(LatestStartTime[0] + 70 > Time.now()) )&& (LatestStartTime[0] + 60 < Time.now()) && (Current[0][0]+ Current[0][1]+ Current[0][2]) < 1)
 80a136e:	4d4a      	ldr	r5, [pc, #296]	; (80a1498 <loop+0x2e4>)
    bool Authorized_Charger2=readRFIDCard(2+CHARGEROFFSET); //+
 80a1370:	2002      	movs	r0, #2
 80a1372:	f7ff fdfb 	bl	80a0f6c <_Z12readRFIDCardi>
    delay(5);
 80a1376:	2005      	movs	r0, #5
 80a1378:	f003 fb24 	bl	80a49c4 <delay>
    if( ((numberOfZeroReadings[0]>10)||(LatestStartTime[0] + 70 > Time.now()) )&& (LatestStartTime[0] + 60 < Time.now()) && (Current[0][0]+ Current[0][1]+ Current[0][2]) < 1)
 80a137c:	682b      	ldr	r3, [r5, #0]
 80a137e:	4c47      	ldr	r4, [pc, #284]	; (80a149c <loop+0x2e8>)
 80a1380:	2b0a      	cmp	r3, #10
 80a1382:	dd32      	ble.n	80a13ea <loop+0x236>
 80a1384:	6823      	ldr	r3, [r4, #0]
 80a1386:	f103 063c 	add.w	r6, r3, #60	; 0x3c
 80a138a:	f003 fb00 	bl	80a498e <_ZN9TimeClass3nowEv>
 80a138e:	4286      	cmp	r6, r0
 80a1390:	d333      	bcc.n	80a13fa <loop+0x246>
    }
    //DEBUGPORT.println(Current[1][0]+ Current[1][1]+ Current[1][2],4);
    //DEBUGPORT.println(String(LatestStartTime[1]+60));
    //DEBUGPORT.println(String(Time.now()));
    //DEBUGPORT.println((LatestStartTime[1] + 60 < Time.now()),DEC);
    if( ((numberOfZeroReadings[1]>10)||(LatestStartTime[1] + 70 > Time.now()) )&& (LatestStartTime[1] + 60 < Time.now()) && (Current[1][0]+ Current[1][1]+ Current[1][2]) < 1)
 80a1392:	686b      	ldr	r3, [r5, #4]
 80a1394:	2b0a      	cmp	r3, #10
 80a1396:	dd5f      	ble.n	80a1458 <loop+0x2a4>
 80a1398:	6863      	ldr	r3, [r4, #4]
 80a139a:	f103 053c 	add.w	r5, r3, #60	; 0x3c
 80a139e:	f003 faf6 	bl	80a498e <_ZN9TimeClass3nowEv>
 80a13a2:	4285      	cmp	r5, r0
 80a13a4:	f0c0 8086 	bcc.w	80a14b4 <loop+0x300>
        digitalWrite(AUTHENTICATION_CAR2,LOW);
        //digitalWrite(D7,LOW);
        LatestStartTime[1]=2147483548;
        //DEBUGPORT.println("Timeout charger2");
    }
    delay(100);
 80a13a8:	2064      	movs	r0, #100	; 0x64
 80a13aa:	f003 fb0b 	bl	80a49c4 <delay>
     delay(100);
    }
    */

    //Reset the UIDtag if there is no car charging
    if ((activeCharger()!=1)&&(activeCharger()!=3))
 80a13ae:	f7ff fa6f 	bl	80a0890 <_Z13activeChargerv>
 80a13b2:	f020 0002 	bic.w	r0, r0, #2
 80a13b6:	2801      	cmp	r0, #1
 80a13b8:	d003      	beq.n	80a13c2 <loop+0x20e>
        UIDtagCharger1="No ID";
 80a13ba:	4939      	ldr	r1, [pc, #228]	; (80a14a0 <loop+0x2ec>)
 80a13bc:	4839      	ldr	r0, [pc, #228]	; (80a14a4 <loop+0x2f0>)
 80a13be:	f002 ff4f 	bl	80a4260 <_ZN6StringaSEPKc>
    if ((activeCharger()!=2)&&(activeCharger()!=3))
 80a13c2:	f7ff fa65 	bl	80a0890 <_Z13activeChargerv>
 80a13c6:	3802      	subs	r0, #2
 80a13c8:	2801      	cmp	r0, #1
 80a13ca:	d903      	bls.n	80a13d4 <loop+0x220>
        UIDtagCharger2="No ID";
 80a13cc:	4934      	ldr	r1, [pc, #208]	; (80a14a0 <loop+0x2ec>)
 80a13ce:	4836      	ldr	r0, [pc, #216]	; (80a14a8 <loop+0x2f4>)
 80a13d0:	f002 ff46 	bl	80a4260 <_ZN6StringaSEPKc>
            
    handledCharger = !handledCharger;
 80a13d4:	4a29      	ldr	r2, [pc, #164]	; (80a147c <loop+0x2c8>)
 80a13d6:	7813      	ldrb	r3, [r2, #0]
 80a13d8:	f083 0301 	eor.w	r3, r3, #1
 80a13dc:	7013      	strb	r3, [r2, #0]
 80a13de:	b019      	add	sp, #100	; 0x64
 80a13e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else reconnect();
 80a13e4:	f7ff fb8e 	bl	80a0b04 <_Z9reconnectv>
 80a13e8:	e6f0      	b.n	80a11cc <loop+0x18>
    if( ((numberOfZeroReadings[0]>10)||(LatestStartTime[0] + 70 > Time.now()) )&& (LatestStartTime[0] + 60 < Time.now()) && (Current[0][0]+ Current[0][1]+ Current[0][2]) < 1)
 80a13ea:	6823      	ldr	r3, [r4, #0]
 80a13ec:	f103 0646 	add.w	r6, r3, #70	; 0x46
 80a13f0:	f003 facd 	bl	80a498e <_ZN9TimeClass3nowEv>
 80a13f4:	4286      	cmp	r6, r0
 80a13f6:	d8c5      	bhi.n	80a1384 <loop+0x1d0>
 80a13f8:	e7cb      	b.n	80a1392 <loop+0x1de>
 80a13fa:	4e1f      	ldr	r6, [pc, #124]	; (80a1478 <loop+0x2c4>)
 80a13fc:	6871      	ldr	r1, [r6, #4]
 80a13fe:	6830      	ldr	r0, [r6, #0]
 80a1400:	f004 fe54 	bl	80a60ac <__addsf3>
 80a1404:	68b1      	ldr	r1, [r6, #8]
 80a1406:	f004 fe51 	bl	80a60ac <__addsf3>
 80a140a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80a140e:	f005 f8f3 	bl	80a65f8 <__aeabi_fcmplt>
 80a1412:	2800      	cmp	r0, #0
 80a1414:	d0bd      	beq.n	80a1392 <loop+0x1de>
        DEBUGPORT.println("Timeout charger"+String(CHARGEROFFSET+1));
 80a1416:	f003 fc95 	bl	80a4d44 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
 80a141a:	4924      	ldr	r1, [pc, #144]	; (80a14ac <loop+0x2f8>)
 80a141c:	4606      	mov	r6, r0
 80a141e:	a814      	add	r0, sp, #80	; 0x50
 80a1420:	f002 fecc 	bl	80a41bc <_ZN6StringC1EPKc>
 80a1424:	220a      	movs	r2, #10
 80a1426:	2101      	movs	r1, #1
 80a1428:	a810      	add	r0, sp, #64	; 0x40
 80a142a:	f002 ff3c 	bl	80a42a6 <_ZN6StringC1Eih>
 80a142e:	a910      	add	r1, sp, #64	; 0x40
 80a1430:	a814      	add	r0, sp, #80	; 0x50
 80a1432:	f002 ffc2 	bl	80a43ba <_ZplRK15StringSumHelperRK6String>
 80a1436:	6801      	ldr	r1, [r0, #0]
 80a1438:	4630      	mov	r0, r6
 80a143a:	f003 f858 	bl	80a44ee <_ZN5Print7printlnEPKc>
 80a143e:	a810      	add	r0, sp, #64	; 0x40
 80a1440:	f002 fe72 	bl	80a4128 <_ZN6StringD1Ev>
class StringSumHelper : public String
 80a1444:	a814      	add	r0, sp, #80	; 0x50
 80a1446:	f002 fe6f 	bl	80a4128 <_ZN6StringD1Ev>
        digitalWrite(AUTHENTICATION_CAR1,LOW);
 80a144a:	2100      	movs	r1, #0
 80a144c:	2005      	movs	r0, #5
 80a144e:	f003 ff80 	bl	80a5352 <digitalWrite>
        LatestStartTime[0]=2147483548;
 80a1452:	4b17      	ldr	r3, [pc, #92]	; (80a14b0 <loop+0x2fc>)
 80a1454:	6023      	str	r3, [r4, #0]
 80a1456:	e79c      	b.n	80a1392 <loop+0x1de>
    if( ((numberOfZeroReadings[1]>10)||(LatestStartTime[1] + 70 > Time.now()) )&& (LatestStartTime[1] + 60 < Time.now()) && (Current[1][0]+ Current[1][1]+ Current[1][2]) < 1)
 80a1458:	6863      	ldr	r3, [r4, #4]
 80a145a:	f103 0546 	add.w	r5, r3, #70	; 0x46
 80a145e:	f003 fa96 	bl	80a498e <_ZN9TimeClass3nowEv>
 80a1462:	4285      	cmp	r5, r0
 80a1464:	d898      	bhi.n	80a1398 <loop+0x1e4>
 80a1466:	e79f      	b.n	80a13a8 <loop+0x1f4>
 80a1468:	20000500 	.word	0x20000500
 80a146c:	20000004 	.word	0x20000004
 80a1470:	080aa2b2 	.word	0x080aa2b2
 80a1474:	080aa2c4 	.word	0x080aa2c4
 80a1478:	20000264 	.word	0x20000264
 80a147c:	20000568 	.word	0x20000568
 80a1480:	20000008 	.word	0x20000008
 80a1484:	080a9fe0 	.word	0x080a9fe0
 80a1488:	20000338 	.word	0x20000338
 80a148c:	20000354 	.word	0x20000354
 80a1490:	20000308 	.word	0x20000308
 80a1494:	20000310 	.word	0x20000310
 80a1498:	20000588 	.word	0x20000588
 80a149c:	20000318 	.word	0x20000318
 80a14a0:	080aa2d7 	.word	0x080aa2d7
 80a14a4:	2000037c 	.word	0x2000037c
 80a14a8:	2000038c 	.word	0x2000038c
 80a14ac:	080aa2c7 	.word	0x080aa2c7
 80a14b0:	7fffff9c 	.word	0x7fffff9c
 80a14b4:	4d17      	ldr	r5, [pc, #92]	; (80a1514 <loop+0x360>)
 80a14b6:	6929      	ldr	r1, [r5, #16]
 80a14b8:	68e8      	ldr	r0, [r5, #12]
 80a14ba:	f004 fdf7 	bl	80a60ac <__addsf3>
 80a14be:	6969      	ldr	r1, [r5, #20]
 80a14c0:	f004 fdf4 	bl	80a60ac <__addsf3>
 80a14c4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80a14c8:	f005 f896 	bl	80a65f8 <__aeabi_fcmplt>
 80a14cc:	2800      	cmp	r0, #0
 80a14ce:	f43f af6b 	beq.w	80a13a8 <loop+0x1f4>
        DEBUGPORT.println("Timeout charger"+String(CHARGEROFFSET+2));
 80a14d2:	f003 fc37 	bl	80a4d44 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
 80a14d6:	4910      	ldr	r1, [pc, #64]	; (80a1518 <loop+0x364>)
 80a14d8:	4605      	mov	r5, r0
 80a14da:	a814      	add	r0, sp, #80	; 0x50
 80a14dc:	f002 fe6e 	bl	80a41bc <_ZN6StringC1EPKc>
 80a14e0:	220a      	movs	r2, #10
 80a14e2:	2102      	movs	r1, #2
 80a14e4:	a810      	add	r0, sp, #64	; 0x40
 80a14e6:	f002 fede 	bl	80a42a6 <_ZN6StringC1Eih>
 80a14ea:	a910      	add	r1, sp, #64	; 0x40
 80a14ec:	a814      	add	r0, sp, #80	; 0x50
 80a14ee:	f002 ff64 	bl	80a43ba <_ZplRK15StringSumHelperRK6String>
 80a14f2:	6801      	ldr	r1, [r0, #0]
 80a14f4:	4628      	mov	r0, r5
 80a14f6:	f002 fffa 	bl	80a44ee <_ZN5Print7printlnEPKc>
 80a14fa:	a810      	add	r0, sp, #64	; 0x40
 80a14fc:	f002 fe14 	bl	80a4128 <_ZN6StringD1Ev>
class StringSumHelper : public String
 80a1500:	a814      	add	r0, sp, #80	; 0x50
 80a1502:	f002 fe11 	bl	80a4128 <_ZN6StringD1Ev>
        digitalWrite(AUTHENTICATION_CAR2,LOW);
 80a1506:	2100      	movs	r1, #0
 80a1508:	2006      	movs	r0, #6
 80a150a:	f003 ff22 	bl	80a5352 <digitalWrite>
        LatestStartTime[1]=2147483548;
 80a150e:	4b03      	ldr	r3, [pc, #12]	; (80a151c <loop+0x368>)
 80a1510:	6063      	str	r3, [r4, #4]
 80a1512:	e749      	b.n	80a13a8 <loop+0x1f4>
 80a1514:	20000264 	.word	0x20000264
 80a1518:	080aa2c7 	.word	0x080aa2c7
 80a151c:	7fffff9c 	.word	0x7fffff9c

080a1520 <_ZN10CloudClass8functionIA13_cJPFi6StringEEEEbRKT_DpT0_>:
    static inline bool function(const T &name, Types ... args)
 80a1520:	4602      	mov	r2, r0
        return register_function(call_raw_user_function, (void*)func, funcKey);
 80a1522:	4801      	ldr	r0, [pc, #4]	; (80a1528 <_ZN10CloudClass8functionIA13_cJPFi6StringEEEEbRKT_DpT0_+0x8>)
 80a1524:	f003 bb2a 	b.w	80a4b7c <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 80a1528:	080a4b51 	.word	0x080a4b51

080a152c <setup>:
void setup() {
 80a152c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    DEBUGPORT.begin(115200); 
 80a152e:	f003 fc09 	bl	80a4d44 <_Z16_fetch_usbserialv>
 80a1532:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80a1536:	f003 fbf9 	bl	80a4d2c <_ZN9USBSerial5beginEl>
    Serial1.begin(9600);
 80a153a:	f003 fcb5 	bl	80a4ea8 <_Z22__fetch_global_Serial1v>
 80a153e:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a1542:	f003 fcad 	bl	80a4ea0 <_ZN11USARTSerial5beginEm>
    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a1546:	f002 f9eb 	bl	80a3920 <spark_cloud_flag_connected>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80a154a:	b910      	cbnz	r0, 80a1552 <setup+0x26>
            spark_process();
 80a154c:	f002 f9d8 	bl	80a3900 <spark_process>
        while (_while() && !_condition()) {
 80a1550:	e7f9      	b.n	80a1546 <setup+0x1a>
 80a1552:	f002 f9e5 	bl	80a3920 <spark_cloud_flag_connected>
    pinMode(AUTHENTICATION_CAR1, OUTPUT); //pinMode(D1, OUTPUT); //Charger1_Authorized
 80a1556:	2101      	movs	r1, #1
 80a1558:	2005      	movs	r0, #5
 80a155a:	f003 fee9 	bl	80a5330 <pinMode>
    pinMode(AUTHENTICATION_CAR2, OUTPUT); //pinMode(D2, OUTPUT); //Charger2_Authorized
 80a155e:	2101      	movs	r1, #1
 80a1560:	2006      	movs	r0, #6
 80a1562:	f003 fee5 	bl	80a5330 <pinMode>
    pinMode(PILOT_FEEDBACK_CAR_1,INPUT);
 80a1566:	2100      	movs	r1, #0
 80a1568:	2010      	movs	r0, #16
 80a156a:	f003 fee1 	bl	80a5330 <pinMode>
    pinMode(PILOT_FEEDBACK_CAR_2,INPUT);
 80a156e:	2100      	movs	r1, #0
 80a1570:	2011      	movs	r0, #17
 80a1572:	f003 fedd 	bl	80a5330 <pinMode>
    pinMode(WAKEUP_OLIMEX, OUTPUT);
 80a1576:	2101      	movs	r1, #1
 80a1578:	2002      	movs	r0, #2
 80a157a:	f003 fed9 	bl	80a5330 <pinMode>
    pinMode(RESET_OLIMEX, OUTPUT);
 80a157e:	2101      	movs	r1, #1
 80a1580:	2004      	movs	r0, #4
 80a1582:	f003 fed5 	bl	80a5330 <pinMode>
    pinMode(D7, OUTPUT);
 80a1586:	2101      	movs	r1, #1
 80a1588:	2007      	movs	r0, #7
 80a158a:	f003 fed1 	bl	80a5330 <pinMode>
    digitalWrite(AUTHENTICATION_CAR1, LOW); //digitalWrite(D1,LOW);
 80a158e:	2100      	movs	r1, #0
 80a1590:	2005      	movs	r0, #5
 80a1592:	f003 fede 	bl	80a5352 <digitalWrite>
    digitalWrite(AUTHENTICATION_CAR2, LOW);//digitalWrite(D2,LOW);
 80a1596:	2100      	movs	r1, #0
 80a1598:	2006      	movs	r0, #6
 80a159a:	f003 feda 	bl	80a5352 <digitalWrite>
    digitalWrite(WAKEUP_OLIMEX, LOW);
 80a159e:	2100      	movs	r1, #0
 80a15a0:	2002      	movs	r0, #2
 80a15a2:	f003 fed6 	bl	80a5352 <digitalWrite>
    digitalWrite(RESET_OLIMEX, HIGH);
 80a15a6:	2101      	movs	r1, #1
 80a15a8:	2004      	movs	r0, #4
 80a15aa:	f003 fed2 	bl	80a5352 <digitalWrite>
    digitalWrite(D7, LOW);
 80a15ae:	2100      	movs	r1, #0
 80a15b0:	2007      	movs	r0, #7
 80a15b2:	f003 fece 	bl	80a5352 <digitalWrite>
    initRFID(""); //+
 80a15b6:	4921      	ldr	r1, [pc, #132]	; (80a163c <setup+0x110>)
 80a15b8:	4668      	mov	r0, sp
 80a15ba:	f002 fdff 	bl	80a41bc <_ZN6StringC1EPKc>
 80a15be:	4668      	mov	r0, sp
 80a15c0:	f7fe fe94 	bl	80a02ec <_Z8initRFID6String>
 80a15c4:	4668      	mov	r0, sp
 80a15c6:	f002 fdaf 	bl	80a4128 <_ZN6StringD1Ev>
        return register_function(call_raw_user_function, (void*)func, funcKey);
 80a15ca:	4a1d      	ldr	r2, [pc, #116]	; (80a1640 <setup+0x114>)
 80a15cc:	491d      	ldr	r1, [pc, #116]	; (80a1644 <setup+0x118>)
 80a15ce:	481e      	ldr	r0, [pc, #120]	; (80a1648 <setup+0x11c>)
 80a15d0:	f003 fad4 	bl	80a4b7c <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
    Particle.function("maxCurrentC1",maxCurrentC1);
 80a15d4:	491d      	ldr	r1, [pc, #116]	; (80a164c <setup+0x120>)
 80a15d6:	481e      	ldr	r0, [pc, #120]	; (80a1650 <setup+0x124>)
 80a15d8:	f7ff ffa2 	bl	80a1520 <_ZN10CloudClass8functionIA13_cJPFi6StringEEEEbRKT_DpT0_>
    Particle.function("maxCurrentC2",maxCurrentC2);
 80a15dc:	491d      	ldr	r1, [pc, #116]	; (80a1654 <setup+0x128>)
 80a15de:	481e      	ldr	r0, [pc, #120]	; (80a1658 <setup+0x12c>)
 80a15e0:	f7ff ff9e 	bl	80a1520 <_ZN10CloudClass8functionIA13_cJPFi6StringEEEEbRKT_DpT0_>
 80a15e4:	4a1d      	ldr	r2, [pc, #116]	; (80a165c <setup+0x130>)
 80a15e6:	491e      	ldr	r1, [pc, #120]	; (80a1660 <setup+0x134>)
 80a15e8:	4817      	ldr	r0, [pc, #92]	; (80a1648 <setup+0x11c>)
 80a15ea:	f003 fac7 	bl	80a4b7c <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
    Particle.function("progModeOlmx",progModeOlmx);
 80a15ee:	491d      	ldr	r1, [pc, #116]	; (80a1664 <setup+0x138>)
 80a15f0:	481d      	ldr	r0, [pc, #116]	; (80a1668 <setup+0x13c>)
 80a15f2:	f7ff ff95 	bl	80a1520 <_ZN10CloudClass8functionIA13_cJPFi6StringEEEEbRKT_DpT0_>
    Particle.function("resetParticl",resetParticl);
 80a15f6:	491d      	ldr	r1, [pc, #116]	; (80a166c <setup+0x140>)
 80a15f8:	481d      	ldr	r0, [pc, #116]	; (80a1670 <setup+0x144>)
 80a15fa:	f7ff ff91 	bl	80a1520 <_ZN10CloudClass8functionIA13_cJPFi6StringEEEEbRKT_DpT0_>
 80a15fe:	4a1d      	ldr	r2, [pc, #116]	; (80a1674 <setup+0x148>)
 80a1600:	491d      	ldr	r1, [pc, #116]	; (80a1678 <setup+0x14c>)
 80a1602:	4811      	ldr	r0, [pc, #68]	; (80a1648 <setup+0x11c>)
 80a1604:	f003 faba 	bl	80a4b7c <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 80a1608:	4a1c      	ldr	r2, [pc, #112]	; (80a167c <setup+0x150>)
 80a160a:	491d      	ldr	r1, [pc, #116]	; (80a1680 <setup+0x154>)
 80a160c:	480e      	ldr	r0, [pc, #56]	; (80a1648 <setup+0x11c>)
 80a160e:	f003 fab5 	bl	80a4b7c <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
        return _variable(varKey, &var, STRING);
 80a1612:	491c      	ldr	r1, [pc, #112]	; (80a1684 <setup+0x158>)
 80a1614:	481c      	ldr	r0, [pc, #112]	; (80a1688 <setup+0x15c>)
 80a1616:	f7fe fe57 	bl	80a02c8 <_ZN10CloudClass9_variableIcEEbPKT_PK6StringRK17CloudVariableTypeIPKcvE.isra.0>
 80a161a:	491c      	ldr	r1, [pc, #112]	; (80a168c <setup+0x160>)
 80a161c:	481c      	ldr	r0, [pc, #112]	; (80a1690 <setup+0x164>)
 80a161e:	f7fe fe53 	bl	80a02c8 <_ZN10CloudClass9_variableIcEEbPKT_PK6StringRK17CloudVariableTypeIPKcvE.isra.0>
 80a1622:	491c      	ldr	r1, [pc, #112]	; (80a1694 <setup+0x168>)
 80a1624:	481c      	ldr	r0, [pc, #112]	; (80a1698 <setup+0x16c>)
 80a1626:	f7fe fe4f 	bl	80a02c8 <_ZN10CloudClass9_variableIcEEbPKT_PK6StringRK17CloudVariableTypeIPKcvE.isra.0>
    Particle.process();
 80a162a:	f7fe feb9 	bl	80a03a0 <_ZN10CloudClass7processEv>
    Time.zone(1); //Dutch time zone
 80a162e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80a1632:	f003 f88b 	bl	80a474c <_ZN9TimeClass4zoneEf>
}
 80a1636:	b005      	add	sp, #20
 80a1638:	f85d fb04 	ldr.w	pc, [sp], #4
 80a163c:	080aa2c3 	.word	0x080aa2c3
 80a1640:	080aa2dd 	.word	0x080aa2dd
 80a1644:	080a0279 	.word	0x080a0279
 80a1648:	080a4b51 	.word	0x080a4b51
 80a164c:	080a0145 	.word	0x080a0145
 80a1650:	080aa2e8 	.word	0x080aa2e8
 80a1654:	080a01c9 	.word	0x080a01c9
 80a1658:	080aa2f5 	.word	0x080aa2f5
 80a165c:	080aa302 	.word	0x080aa302
 80a1660:	080a00bf 	.word	0x080a00bf
 80a1664:	080a00dd 	.word	0x080a00dd
 80a1668:	080aa30e 	.word	0x080aa30e
 80a166c:	080a013d 	.word	0x080a013d
 80a1670:	080aa31b 	.word	0x080aa31b
 80a1674:	080aa328 	.word	0x080aa328
 80a1678:	080a0121 	.word	0x080a0121
 80a167c:	080aa333 	.word	0x080aa333
 80a1680:	080a02ed 	.word	0x080a02ed
 80a1684:	20000558 	.word	0x20000558
 80a1688:	080aa33c 	.word	0x080aa33c
 80a168c:	2000036c 	.word	0x2000036c
 80a1690:	080aa347 	.word	0x080aa347
 80a1694:	20000590 	.word	0x20000590
 80a1698:	080aa350 	.word	0x080aa350

080a169c <_GLOBAL__sub_I_readnextLine>:
 80a169c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
String UIDtagCharger1="No ID";
 80a169e:	4f31      	ldr	r7, [pc, #196]	; (80a1764 <_GLOBAL__sub_I_readnextLine+0xc8>)
 80a16a0:	4e31      	ldr	r6, [pc, #196]	; (80a1768 <_GLOBAL__sub_I_readnextLine+0xcc>)
 80a16a2:	4c32      	ldr	r4, [pc, #200]	; (80a176c <_GLOBAL__sub_I_readnextLine+0xd0>)
 80a16a4:	4d32      	ldr	r5, [pc, #200]	; (80a1770 <_GLOBAL__sub_I_readnextLine+0xd4>)
 80a16a6:	4639      	mov	r1, r7
 80a16a8:	4630      	mov	r0, r6
 80a16aa:	f002 fd87 	bl	80a41bc <_ZN6StringC1EPKc>
 80a16ae:	4630      	mov	r0, r6
String UIDtagCharger2="No ID";
 80a16b0:	4e30      	ldr	r6, [pc, #192]	; (80a1774 <_GLOBAL__sub_I_readnextLine+0xd8>)
String UIDtagCharger1="No ID";
 80a16b2:	4622      	mov	r2, r4
 80a16b4:	4629      	mov	r1, r5
 80a16b6:	f003 fed1 	bl	80a545c <__aeabi_atexit>
String UIDtagCharger2="No ID";
 80a16ba:	4639      	mov	r1, r7
 80a16bc:	4630      	mov	r0, r6
 80a16be:	f002 fd7d 	bl	80a41bc <_ZN6StringC1EPKc>
 80a16c2:	4622      	mov	r2, r4
 80a16c4:	4629      	mov	r1, r5
 80a16c6:	4630      	mov	r0, r6
 80a16c8:	f003 fec8 	bl	80a545c <__aeabi_atexit>
    bool clearCredentials(void) {
        return network_clear_credentials(*this, 0, NULL, NULL);
    }

    int selectAntenna(WLanSelectAntenna_TypeDef antenna) {
        return wlan_select_antenna(antenna);
 80a16cc:	2001      	movs	r0, #1
 80a16ce:	f002 f861 	bl	80a3794 <wlan_select_antenna>
MQTT client("broker.hivemq.com", 1883, MQTT_DEFAULT_KEEPALIVE, callback, 512);
 80a16d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80a16d6:	4e28      	ldr	r6, [pc, #160]	; (80a1778 <_GLOBAL__sub_I_readnextLine+0xdc>)
 80a16d8:	9301      	str	r3, [sp, #4]
 80a16da:	4b28      	ldr	r3, [pc, #160]	; (80a177c <_GLOBAL__sub_I_readnextLine+0xe0>)
 80a16dc:	f240 725b 	movw	r2, #1883	; 0x75b
 80a16e0:	9300      	str	r3, [sp, #0]
 80a16e2:	4630      	mov	r0, r6
 80a16e4:	230f      	movs	r3, #15
 80a16e6:	4926      	ldr	r1, [pc, #152]	; (80a1780 <_GLOBAL__sub_I_readnextLine+0xe4>)
 80a16e8:	f000 fd46 	bl	80a2178 <_ZN4MQTTC1EPctiPFvS0_PhjEi>
 80a16ec:	4630      	mov	r0, r6
String test = "0";
 80a16ee:	4e25      	ldr	r6, [pc, #148]	; (80a1784 <_GLOBAL__sub_I_readnextLine+0xe8>)
MQTT client("broker.hivemq.com", 1883, MQTT_DEFAULT_KEEPALIVE, callback, 512);
 80a16f0:	4622      	mov	r2, r4
 80a16f2:	4925      	ldr	r1, [pc, #148]	; (80a1788 <_GLOBAL__sub_I_readnextLine+0xec>)
 80a16f4:	f003 feb2 	bl	80a545c <__aeabi_atexit>
String test = "0";
 80a16f8:	4630      	mov	r0, r6
 80a16fa:	4924      	ldr	r1, [pc, #144]	; (80a178c <_GLOBAL__sub_I_readnextLine+0xf0>)
 80a16fc:	f002 fd5e 	bl	80a41bc <_ZN6StringC1EPKc>
 80a1700:	4622      	mov	r2, r4
 80a1702:	4629      	mov	r1, r5
 80a1704:	4630      	mov	r0, r6
 80a1706:	f003 fea9 	bl	80a545c <__aeabi_atexit>
String ShareVar;
 80a170a:	4e21      	ldr	r6, [pc, #132]	; (80a1790 <_GLOBAL__sub_I_readnextLine+0xf4>)
 80a170c:	4f21      	ldr	r7, [pc, #132]	; (80a1794 <_GLOBAL__sub_I_readnextLine+0xf8>)
MFRC522 mfrc522_Charger1(SS_PIN_CHARGER1, RST_PIN);   // Create MFRC522 instance.
 80a170e:	220a      	movs	r2, #10
 80a1710:	210b      	movs	r1, #11
 80a1712:	4821      	ldr	r0, [pc, #132]	; (80a1798 <_GLOBAL__sub_I_readnextLine+0xfc>)
 80a1714:	f000 f908 	bl	80a1928 <_ZN7MFRC522C1Ehh>
MFRC522 mfrc522_Charger2(SS_PIN_CHARGER2, RST_PIN);   // Create MFRC522 instance.
 80a1718:	220a      	movs	r2, #10
 80a171a:	210c      	movs	r1, #12
 80a171c:	481f      	ldr	r0, [pc, #124]	; (80a179c <_GLOBAL__sub_I_readnextLine+0x100>)
 80a171e:	f000 f903 	bl	80a1928 <_ZN7MFRC522C1Ehh>
String ShareVar;
 80a1722:	4631      	mov	r1, r6
 80a1724:	4638      	mov	r0, r7
 80a1726:	f002 fd49 	bl	80a41bc <_ZN6StringC1EPKc>
 80a172a:	4638      	mov	r0, r7
String EVListStr="";
 80a172c:	4f1c      	ldr	r7, [pc, #112]	; (80a17a0 <_GLOBAL__sub_I_readnextLine+0x104>)
String ShareVar;
 80a172e:	4622      	mov	r2, r4
 80a1730:	4629      	mov	r1, r5
 80a1732:	f003 fe93 	bl	80a545c <__aeabi_atexit>
String EVListStr="";
 80a1736:	4631      	mov	r1, r6
 80a1738:	4638      	mov	r0, r7
 80a173a:	f002 fd3f 	bl	80a41bc <_ZN6StringC1EPKc>
 80a173e:	4638      	mov	r0, r7
String currentStr="";
 80a1740:	4f18      	ldr	r7, [pc, #96]	; (80a17a4 <_GLOBAL__sub_I_readnextLine+0x108>)
String EVListStr="";
 80a1742:	4622      	mov	r2, r4
 80a1744:	4629      	mov	r1, r5
 80a1746:	f003 fe89 	bl	80a545c <__aeabi_atexit>
String currentStr="";
 80a174a:	4631      	mov	r1, r6
 80a174c:	4638      	mov	r0, r7
 80a174e:	f002 fd35 	bl	80a41bc <_ZN6StringC1EPKc>
 80a1752:	4622      	mov	r2, r4
 80a1754:	4629      	mov	r1, r5
 80a1756:	4638      	mov	r0, r7
 80a1758:	b003      	add	sp, #12
 80a175a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
String currentStr="";
 80a175e:	f003 be7d 	b.w	80a545c <__aeabi_atexit>
 80a1762:	bf00      	nop
 80a1764:	080aa2d7 	.word	0x080aa2d7
 80a1768:	2000037c 	.word	0x2000037c
 80a176c:	20000250 	.word	0x20000250
 80a1770:	080a4129 	.word	0x080a4129
 80a1774:	2000038c 	.word	0x2000038c
 80a1778:	20000500 	.word	0x20000500
 80a177c:	080a188d 	.word	0x080a188d
 80a1780:	080aa356 	.word	0x080aa356
 80a1784:	20000590 	.word	0x20000590
 80a1788:	080a293d 	.word	0x080a293d
 80a178c:	080aa246 	.word	0x080aa246
 80a1790:	080aa2c3 	.word	0x080aa2c3
 80a1794:	2000036c 	.word	0x2000036c
 80a1798:	20000569 	.word	0x20000569
 80a179c:	20000577 	.word	0x20000577
 80a17a0:	200002f8 	.word	0x200002f8
 80a17a4:	20000558 	.word	0x20000558

080a17a8 <_Z19getMeasure_callbackPhj>:
    int sockets = 0;
 80a17a8:	2300      	movs	r3, #0
void getMeasure_callback(byte* payload, unsigned int length) {
 80a17aa:	b530      	push	{r4, r5, lr}
 80a17ac:	460d      	mov	r5, r1
 80a17ae:	4604      	mov	r4, r0
 80a17b0:	b08f      	sub	sp, #60	; 0x3c
    JsonParser parser1;
 80a17b2:	a803      	add	r0, sp, #12
    int sockets = 0;
 80a17b4:	9301      	str	r3, [sp, #4]
    JsonParser parser1;
 80a17b6:	f001 f971 	bl	80a2a9c <_ZN10JsonParserC1Ev>
    parser1.clear();
 80a17ba:	a803      	add	r0, sp, #12
 80a17bc:	f001 f96a 	bl	80a2a94 <_ZN10JsonBuffer5clearEv>
    parser1.addData( (char*)(payload), length); 
 80a17c0:	462a      	mov	r2, r5
 80a17c2:	4621      	mov	r1, r4
 80a17c4:	a803      	add	r0, sp, #12
 80a17c6:	f001 f948 	bl	80a2a5a <_ZN10JsonBuffer7addDataEPKcj>
    parser1.parse();
 80a17ca:	a803      	add	r0, sp, #12
 80a17cc:	f001 fe08 	bl	80a33e0 <_ZN10JsonParser5parseEv>
    parser1.getOuterValueByKey("I1", EMeterData.PhaseCurrent[0]);
 80a17d0:	4a26      	ldr	r2, [pc, #152]	; (80a186c <_Z19getMeasure_callbackPhj+0xc4>)
 80a17d2:	4927      	ldr	r1, [pc, #156]	; (80a1870 <_Z19getMeasure_callbackPhj+0xc8>)
 80a17d4:	a803      	add	r0, sp, #12
 80a17d6:	f7ff f9db 	bl	80a0b90 <_ZNK10JsonParser18getOuterValueByKeyIfEEbPKcRT_>
    parser1.getOuterValueByKey("I2", EMeterData.PhaseCurrent[1]);
 80a17da:	4a26      	ldr	r2, [pc, #152]	; (80a1874 <_Z19getMeasure_callbackPhj+0xcc>)
 80a17dc:	4926      	ldr	r1, [pc, #152]	; (80a1878 <_Z19getMeasure_callbackPhj+0xd0>)
 80a17de:	a803      	add	r0, sp, #12
 80a17e0:	f7ff f9d6 	bl	80a0b90 <_ZNK10JsonParser18getOuterValueByKeyIfEEbPKcRT_>
    parser1.getOuterValueByKey("I3", EMeterData.PhaseCurrent[2]);
 80a17e4:	4a25      	ldr	r2, [pc, #148]	; (80a187c <_Z19getMeasure_callbackPhj+0xd4>)
 80a17e6:	4926      	ldr	r1, [pc, #152]	; (80a1880 <_Z19getMeasure_callbackPhj+0xd8>)
 80a17e8:	a803      	add	r0, sp, #12
 80a17ea:	f7ff f9d1 	bl	80a0b90 <_ZNK10JsonParser18getOuterValueByKeyIfEEbPKcRT_>
		if (getValueTokenByKey(getOuterObject(), name, value)) {
 80a17ee:	a803      	add	r0, sp, #12
 80a17f0:	f001 f962 	bl	80a2ab8 <_ZNK10JsonParser14getOuterObjectEv>
 80a17f4:	4a23      	ldr	r2, [pc, #140]	; (80a1884 <_Z19getMeasure_callbackPhj+0xdc>)
 80a17f6:	4601      	mov	r1, r0
 80a17f8:	ab02      	add	r3, sp, #8
 80a17fa:	a803      	add	r0, sp, #12
 80a17fc:	f001 faa8 	bl	80a2d50 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>
 80a1800:	b120      	cbz	r0, 80a180c <_Z19getMeasure_callbackPhj+0x64>
			return getTokenValue(value, result);
 80a1802:	9902      	ldr	r1, [sp, #8]
 80a1804:	aa01      	add	r2, sp, #4
 80a1806:	a803      	add	r0, sp, #12
 80a1808:	f001 f9ba 	bl	80a2b80 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERi>
    if (activeCharger() != 0) {
 80a180c:	f7ff f840 	bl	80a0890 <_Z13activeChargerv>
 80a1810:	b330      	cbz	r0, 80a1860 <_Z19getMeasure_callbackPhj+0xb8>
        maxCurrentC1_test((int)((EMeterData.PhaseCurrent[0]+EMeterData.PhaseCurrent[1]+EMeterData.PhaseCurrent[2])/sockets)); //Emeter3, I1
 80a1812:	4c1d      	ldr	r4, [pc, #116]	; (80a1888 <_Z19getMeasure_callbackPhj+0xe0>)
 80a1814:	6921      	ldr	r1, [r4, #16]
 80a1816:	68e0      	ldr	r0, [r4, #12]
 80a1818:	f004 fc48 	bl	80a60ac <__addsf3>
 80a181c:	6961      	ldr	r1, [r4, #20]
 80a181e:	f004 fc45 	bl	80a60ac <__addsf3>
 80a1822:	4605      	mov	r5, r0
 80a1824:	9801      	ldr	r0, [sp, #4]
 80a1826:	f004 fcf5 	bl	80a6214 <__aeabi_i2f>
 80a182a:	4601      	mov	r1, r0
 80a182c:	4628      	mov	r0, r5
 80a182e:	f004 fdf9 	bl	80a6424 <__aeabi_fdiv>
 80a1832:	f004 ff09 	bl	80a6648 <__aeabi_f2iz>
 80a1836:	f7ff f855 	bl	80a08e4 <_Z17maxCurrentC1_testi>
        maxCurrentC2_test((int)((EMeterData.PhaseCurrent[0]+EMeterData.PhaseCurrent[1]+EMeterData.PhaseCurrent[2])/sockets)); //Emeter3, I1
 80a183a:	6921      	ldr	r1, [r4, #16]
 80a183c:	68e0      	ldr	r0, [r4, #12]
 80a183e:	f004 fc35 	bl	80a60ac <__addsf3>
 80a1842:	6961      	ldr	r1, [r4, #20]
 80a1844:	f004 fc32 	bl	80a60ac <__addsf3>
 80a1848:	4604      	mov	r4, r0
 80a184a:	9801      	ldr	r0, [sp, #4]
 80a184c:	f004 fce2 	bl	80a6214 <__aeabi_i2f>
 80a1850:	4601      	mov	r1, r0
 80a1852:	4620      	mov	r0, r4
 80a1854:	f004 fde6 	bl	80a6424 <__aeabi_fdiv>
 80a1858:	f004 fef6 	bl	80a6648 <__aeabi_f2iz>
 80a185c:	f7ff f882 	bl	80a0964 <_Z17maxCurrentC2_testi>
    JsonParser parser1;
 80a1860:	a803      	add	r0, sp, #12
 80a1862:	f001 f8bf 	bl	80a29e4 <_ZN10JsonParserD1Ev>
}
 80a1866:	b00f      	add	sp, #60	; 0x3c
 80a1868:	bd30      	pop	{r4, r5, pc}
 80a186a:	bf00      	nop
 80a186c:	200002d8 	.word	0x200002d8
 80a1870:	080aa20c 	.word	0x080aa20c
 80a1874:	200002dc 	.word	0x200002dc
 80a1878:	080aa20f 	.word	0x080aa20f
 80a187c:	200002e0 	.word	0x200002e0
 80a1880:	080aa212 	.word	0x080aa212
 80a1884:	080aa368 	.word	0x080aa368
 80a1888:	200002cc 	.word	0x200002cc

080a188c <_Z8callbackPcPhj>:
void callback(char* topic, byte* payload, unsigned int length) {
 80a188c:	b570      	push	{r4, r5, r6, lr}
 80a188e:	4606      	mov	r6, r0
 80a1890:	b086      	sub	sp, #24
 80a1892:	460c      	mov	r4, r1
    test = "99";
 80a1894:	481c      	ldr	r0, [pc, #112]	; (80a1908 <_Z8callbackPcPhj+0x7c>)
 80a1896:	491d      	ldr	r1, [pc, #116]	; (80a190c <_Z8callbackPcPhj+0x80>)
void callback(char* topic, byte* payload, unsigned int length) {
 80a1898:	4615      	mov	r5, r2
    test = "99";
 80a189a:	f002 fce1 	bl	80a4260 <_ZN6StringaSEPKc>
	if (strcmp(topic, "HANevse/EnergyMeter")==0) {
 80a189e:	4630      	mov	r0, r6
 80a18a0:	491b      	ldr	r1, [pc, #108]	; (80a1910 <_Z8callbackPcPhj+0x84>)
 80a18a2:	f005 fa2d 	bl	80a6d00 <strcmp>
 80a18a6:	bb20      	cbnz	r0, 80a18f2 <_Z8callbackPcPhj+0x66>
	   test = "1";
 80a18a8:	491a      	ldr	r1, [pc, #104]	; (80a1914 <_Z8callbackPcPhj+0x88>)
 80a18aa:	4817      	ldr	r0, [pc, #92]	; (80a1908 <_Z8callbackPcPhj+0x7c>)
 80a18ac:	f002 fcd8 	bl	80a4260 <_ZN6StringaSEPKc>
	   getMeasure_callback(payload, length);
 80a18b0:	4629      	mov	r1, r5
 80a18b2:	4620      	mov	r0, r4
 80a18b4:	f7ff ff78 	bl	80a17a8 <_Z19getMeasure_callbackPhj>
	time_t time = Time.now();
 80a18b8:	f003 f869 	bl	80a498e <_ZN9TimeClass3nowEv>
 80a18bc:	4605      	mov	r5, r0
    DEBUGPORT.print("MQTT>\tCallback function is called at: ");
 80a18be:	f003 fa41 	bl	80a4d44 <_Z16_fetch_usbserialv>
 80a18c2:	4915      	ldr	r1, [pc, #84]	; (80a1918 <_Z8callbackPcPhj+0x8c>)
 80a18c4:	f002 fe00 	bl	80a44c8 <_ZN5Print5printEPKc>
    DEBUGPORT.println(Time.format(time, TIME_FORMAT_DEFAULT));
 80a18c8:	f003 fa3c 	bl	80a4d44 <_Z16_fetch_usbserialv>
 80a18cc:	4604      	mov	r4, r0
 80a18ce:	4b13      	ldr	r3, [pc, #76]	; (80a191c <_Z8callbackPcPhj+0x90>)
 80a18d0:	462a      	mov	r2, r5
 80a18d2:	681b      	ldr	r3, [r3, #0]
 80a18d4:	a802      	add	r0, sp, #8
 80a18d6:	9300      	str	r3, [sp, #0]
 80a18d8:	4911      	ldr	r1, [pc, #68]	; (80a1920 <_Z8callbackPcPhj+0x94>)
 80a18da:	17eb      	asrs	r3, r5, #31
 80a18dc:	f002 fff8 	bl	80a48d0 <_ZN9TimeClass6formatExPKc>
 80a18e0:	9902      	ldr	r1, [sp, #8]
 80a18e2:	4620      	mov	r0, r4
 80a18e4:	f002 fe03 	bl	80a44ee <_ZN5Print7printlnEPKc>
 80a18e8:	a802      	add	r0, sp, #8
 80a18ea:	f002 fc1d 	bl	80a4128 <_ZN6StringD1Ev>
}
 80a18ee:	b006      	add	sp, #24
 80a18f0:	bd70      	pop	{r4, r5, r6, pc}
     if (strcmp(topic, "HANevse/allowUser")==0)
 80a18f2:	4630      	mov	r0, r6
 80a18f4:	490b      	ldr	r1, [pc, #44]	; (80a1924 <_Z8callbackPcPhj+0x98>)
 80a18f6:	f005 fa03 	bl	80a6d00 <strcmp>
 80a18fa:	2800      	cmp	r0, #0
 80a18fc:	d1dc      	bne.n	80a18b8 <_Z8callbackPcPhj+0x2c>
        allowUser_callback(payload, length);
 80a18fe:	4629      	mov	r1, r5
 80a1900:	4620      	mov	r0, r4
 80a1902:	f7ff f887 	bl	80a0a14 <_Z18allowUser_callbackPhj>
 80a1906:	e7d7      	b.n	80a18b8 <_Z8callbackPcPhj+0x2c>
 80a1908:	20000590 	.word	0x20000590
 80a190c:	080aa370 	.word	0x080aa370
 80a1910:	080aa373 	.word	0x080aa373
 80a1914:	080aa2f3 	.word	0x080aa2f3
 80a1918:	080aa387 	.word	0x080aa387
 80a191c:	20000010 	.word	0x20000010
 80a1920:	200005b4 	.word	0x200005b4
 80a1924:	080aa1c7 	.word	0x080aa1c7

080a1928 <_ZN7MFRC522C1Ehh>:

/**
 * Constructor.
 * Prepares the output pins.
 */
MFRC522::MFRC522(	byte chipSelectPin,		///< Arduino pin connected to MFRC522's SPI slave select input (Pin 24, NSS, active low)
 80a1928:	b538      	push	{r3, r4, r5, lr}
 80a192a:	4604      	mov	r4, r0
 80a192c:	4615      	mov	r5, r2
 80a192e:	4608      	mov	r0, r1
					byte resetPowerDownPin	///< Arduino pin connected to MFRC522's reset and power down input (Pin 6, NRSTPD, active low)
				) {
	// Set the chipSelectPin as digital output, do not select the slave yet
	_chipSelectPin = chipSelectPin;
 80a1930:	7321      	strb	r1, [r4, #12]
	pinMode(_chipSelectPin, OUTPUT);
 80a1932:	2101      	movs	r1, #1
 80a1934:	f003 fcfc 	bl	80a5330 <pinMode>
	digitalWrite(_chipSelectPin, HIGH);
 80a1938:	7b20      	ldrb	r0, [r4, #12]
 80a193a:	2101      	movs	r1, #1
 80a193c:	f003 fd09 	bl	80a5352 <digitalWrite>
	
	// Set the resetPowerDownPin as digital output, do not reset or power down.
	_resetPowerDownPin = resetPowerDownPin;
	pinMode(_resetPowerDownPin, OUTPUT);
 80a1940:	4628      	mov	r0, r5
 80a1942:	2101      	movs	r1, #1
	_resetPowerDownPin = resetPowerDownPin;
 80a1944:	7365      	strb	r5, [r4, #13]
	pinMode(_resetPowerDownPin, OUTPUT);
 80a1946:	f003 fcf3 	bl	80a5330 <pinMode>
	digitalWrite(_resetPowerDownPin, LOW);
 80a194a:	7b60      	ldrb	r0, [r4, #13]
 80a194c:	2100      	movs	r1, #0
 80a194e:	f003 fd00 	bl	80a5352 <digitalWrite>
	
	// Set SPI bus to work with MFRC522 chip.
	//setSPIConfig();
} // End constructor
 80a1952:	4620      	mov	r0, r4
 80a1954:	bd38      	pop	{r3, r4, r5, pc}
	...

080a1958 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
    static SPIClass& instance() {
 80a1958:	b538      	push	{r3, r4, r5, lr}
        static SPIClass instance(Interface);
 80a195a:	4d0c      	ldr	r5, [pc, #48]	; (80a198c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
 80a195c:	7829      	ldrb	r1, [r5, #0]
 80a195e:	f3bf 8f5b 	dmb	ish
 80a1962:	f011 0401 	ands.w	r4, r1, #1
 80a1966:	d10f      	bne.n	80a1988 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>
 80a1968:	4628      	mov	r0, r5
 80a196a:	f7fe fb9e 	bl	80a00aa <__cxa_guard_acquire>
 80a196e:	b158      	cbz	r0, 80a1988 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>
 80a1970:	4621      	mov	r1, r4
 80a1972:	4807      	ldr	r0, [pc, #28]	; (80a1990 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x38>)
 80a1974:	f002 f847 	bl	80a3a06 <_ZN8SPIClassC1E19hal_spi_interface_t>
 80a1978:	4628      	mov	r0, r5
 80a197a:	f7fe fb9b 	bl	80a00b4 <__cxa_guard_release>
 80a197e:	4a05      	ldr	r2, [pc, #20]	; (80a1994 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x3c>)
 80a1980:	4905      	ldr	r1, [pc, #20]	; (80a1998 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x40>)
 80a1982:	4803      	ldr	r0, [pc, #12]	; (80a1990 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x38>)
 80a1984:	f003 fd6a 	bl	80a545c <__aeabi_atexit>
    }
 80a1988:	4801      	ldr	r0, [pc, #4]	; (80a1990 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x38>)
 80a198a:	bd38      	pop	{r3, r4, r5, pc}
 80a198c:	20000254 	.word	0x20000254
 80a1990:	20000258 	.word	0x20000258
 80a1994:	20000250 	.word	0x20000250
 80a1998:	080a02b9 	.word	0x080a02b9

080a199c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>:
        return instance().setClockSpeed(value, scale);
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
 80a199c:	b510      	push	{r4, lr}
 80a199e:	4604      	mov	r4, r0
        return instance().transfer(data);
 80a19a0:	f7ff ffda 	bl	80a1958 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
 80a19a4:	4621      	mov	r1, r4
    }
 80a19a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return instance().transfer(data);
 80a19aa:	f002 b849 	b.w	80a3a40 <_ZN8SPIClass8transferEh>

080a19ae <_ZN7MFRC52217PCD_WriteRegisterEhh>:
 * Writes a byte to the specified register in the MFRC522 chip.
 * The interface is described in the datasheet section 8.1.2.
 */
void MFRC522::PCD_WriteRegister(	byte reg,		///< The register to write to. One of the PCD_Register enums.
									byte value		///< The value to write.
								) {
 80a19ae:	b570      	push	{r4, r5, r6, lr}
 80a19b0:	460e      	mov	r6, r1
 80a19b2:	4615      	mov	r5, r2
 80a19b4:	4604      	mov	r4, r0
	digitalWrite(_chipSelectPin, LOW);		// Select slave
 80a19b6:	2100      	movs	r1, #0
 80a19b8:	7b00      	ldrb	r0, [r0, #12]
 80a19ba:	f003 fcca 	bl	80a5352 <digitalWrite>
	SPI.transfer(reg & 0x7E);					// MSB == 0 is for writing. LSB is not used in address. Datasheet section 8.1.2.3.
 80a19be:	f006 007e 	and.w	r0, r6, #126	; 0x7e
 80a19c2:	f7ff ffeb 	bl	80a199c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
	SPI.transfer(value);
 80a19c6:	4628      	mov	r0, r5
 80a19c8:	f7ff ffe8 	bl	80a199c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
	digitalWrite(_chipSelectPin, HIGH);		// Release slave again
 80a19cc:	7b20      	ldrb	r0, [r4, #12]
 80a19ce:	2101      	movs	r1, #1
} // End PCD_WriteRegister()
 80a19d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	digitalWrite(_chipSelectPin, HIGH);		// Release slave again
 80a19d4:	f003 bcbd 	b.w	80a5352 <digitalWrite>

080a19d8 <_ZN7MFRC52217PCD_WriteRegisterEhhPh>:
 * The interface is described in the datasheet section 8.1.2.
 */
void MFRC522::PCD_WriteRegister(	byte reg,		///< The register to write to. One of the PCD_Register enums.
									byte count,		///< The number of bytes to write to the register
									byte *values	///< The values to write. Byte array.
								) {
 80a19d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a19da:	460f      	mov	r7, r1
 80a19dc:	4606      	mov	r6, r0
	digitalWrite(_chipSelectPin, LOW);		// Select slave
 80a19de:	2100      	movs	r1, #0
 80a19e0:	7b00      	ldrb	r0, [r0, #12]
								) {
 80a19e2:	4615      	mov	r5, r2
 80a19e4:	461c      	mov	r4, r3
	digitalWrite(_chipSelectPin, LOW);		// Select slave
 80a19e6:	f003 fcb4 	bl	80a5352 <digitalWrite>
	SPI.transfer(reg & 0x7E);				// MSB == 0 is for writing. LSB is not used in address. Datasheet section 8.1.2.3.
 80a19ea:	f007 007e 	and.w	r0, r7, #126	; 0x7e
 80a19ee:	f7ff ffd5 	bl	80a199c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
	for (byte index = 0; index < count; index++) {
 80a19f2:	4425      	add	r5, r4
 80a19f4:	42ac      	cmp	r4, r5
 80a19f6:	d004      	beq.n	80a1a02 <_ZN7MFRC52217PCD_WriteRegisterEhhPh+0x2a>
		SPI.transfer(values[index]);
 80a19f8:	f814 0b01 	ldrb.w	r0, [r4], #1
 80a19fc:	f7ff ffce 	bl	80a199c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
	for (byte index = 0; index < count; index++) {
 80a1a00:	e7f8      	b.n	80a19f4 <_ZN7MFRC52217PCD_WriteRegisterEhhPh+0x1c>
	}
	digitalWrite(_chipSelectPin, HIGH);		// Release slave again
 80a1a02:	7b30      	ldrb	r0, [r6, #12]
 80a1a04:	2101      	movs	r1, #1
} // End PCD_WriteRegister()
 80a1a06:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	digitalWrite(_chipSelectPin, HIGH);		// Release slave again
 80a1a0a:	f003 bca2 	b.w	80a5352 <digitalWrite>

080a1a0e <_ZN7MFRC52216PCD_ReadRegisterEh>:
/**
 * Reads a byte from the specified register in the MFRC522 chip.
 * The interface is described in the datasheet section 8.1.2.
 */
byte MFRC522::PCD_ReadRegister(	byte reg	///< The register to read from. One of the PCD_Register enums.
								) {
 80a1a0e:	b538      	push	{r3, r4, r5, lr}
 80a1a10:	460c      	mov	r4, r1
 80a1a12:	4605      	mov	r5, r0
	byte value;
	digitalWrite(_chipSelectPin, LOW);			// Select slave
 80a1a14:	2100      	movs	r1, #0
 80a1a16:	7b00      	ldrb	r0, [r0, #12]
	SPI.transfer(0x80 | (reg & 0x7E));			// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
 80a1a18:	f004 047e 	and.w	r4, r4, #126	; 0x7e
	digitalWrite(_chipSelectPin, LOW);			// Select slave
 80a1a1c:	f003 fc99 	bl	80a5352 <digitalWrite>
	SPI.transfer(0x80 | (reg & 0x7E));			// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
 80a1a20:	f044 0080 	orr.w	r0, r4, #128	; 0x80
 80a1a24:	f7ff ffba 	bl	80a199c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
	value = SPI.transfer(0);					// Read the value back. Send 0 to stop reading.
 80a1a28:	2000      	movs	r0, #0
 80a1a2a:	f7ff ffb7 	bl	80a199c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
 80a1a2e:	4604      	mov	r4, r0
	digitalWrite(_chipSelectPin, HIGH);			// Release slave again
 80a1a30:	2101      	movs	r1, #1
 80a1a32:	7b28      	ldrb	r0, [r5, #12]
 80a1a34:	f003 fc8d 	bl	80a5352 <digitalWrite>
	return value;
} // End PCD_ReadRegister()
 80a1a38:	4620      	mov	r0, r4
 80a1a3a:	bd38      	pop	{r3, r4, r5, pc}

080a1a3c <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>:
/**
 * Sets the bits given in mask in register reg.
 */
void MFRC522::PCD_SetRegisterBitMask(	byte reg,	///< The register to update. One of the PCD_Register enums.
										byte mask	///< The bits to set.
									) { 
 80a1a3c:	b570      	push	{r4, r5, r6, lr}
 80a1a3e:	4604      	mov	r4, r0
 80a1a40:	460d      	mov	r5, r1
 80a1a42:	4616      	mov	r6, r2
	byte tmp;
	tmp = PCD_ReadRegister(reg);
 80a1a44:	f7ff ffe3 	bl	80a1a0e <_ZN7MFRC52216PCD_ReadRegisterEh>
	PCD_WriteRegister(reg, tmp | mask);			// set bit mask
 80a1a48:	ea40 0206 	orr.w	r2, r0, r6
 80a1a4c:	4629      	mov	r1, r5
 80a1a4e:	4620      	mov	r0, r4
} // End PCD_SetRegisterBitMask()
 80a1a50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	PCD_WriteRegister(reg, tmp | mask);			// set bit mask
 80a1a54:	b2d2      	uxtb	r2, r2
 80a1a56:	f7ff bfaa 	b.w	80a19ae <_ZN7MFRC52217PCD_WriteRegisterEhh>

080a1a5a <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>:
/**
 * Clears the bits given in mask from register reg.
 */
void MFRC522::PCD_ClearRegisterBitMask(	byte reg,	///< The register to update. One of the PCD_Register enums.
										byte mask	///< The bits to clear.
									  ) {
 80a1a5a:	b570      	push	{r4, r5, r6, lr}
 80a1a5c:	4604      	mov	r4, r0
 80a1a5e:	460d      	mov	r5, r1
 80a1a60:	4616      	mov	r6, r2
	byte tmp;
	tmp = PCD_ReadRegister(reg);
 80a1a62:	f7ff ffd4 	bl	80a1a0e <_ZN7MFRC52216PCD_ReadRegisterEh>
	PCD_WriteRegister(reg, tmp & (~mask));		// clear bit mask
 80a1a66:	ea20 0206 	bic.w	r2, r0, r6
 80a1a6a:	4629      	mov	r1, r5
 80a1a6c:	4620      	mov	r0, r4
} // End PCD_ClearRegisterBitMask()
 80a1a6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	PCD_WriteRegister(reg, tmp & (~mask));		// clear bit mask
 80a1a72:	b2d2      	uxtb	r2, r2
 80a1a74:	f7ff bf9b 	b.w	80a19ae <_ZN7MFRC52217PCD_WriteRegisterEhh>

080a1a78 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>:
 * @return STATUS_OK on success, STATUS_??? otherwise.
 */
byte MFRC522::PCD_CalculateCRC(	byte *data,		///< In: Pointer to the data to transfer to the FIFO for CRC calculation.
								byte length,	///< In: The number of bytes to transfer.
								byte *result	///< Out: Pointer to result buffer. Result is written to result[0..1], low byte first.
					 ) {
 80a1a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1a7a:	4604      	mov	r4, r0
 80a1a7c:	4615      	mov	r5, r2
 80a1a7e:	460f      	mov	r7, r1
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop any active command.
 80a1a80:	2200      	movs	r2, #0
 80a1a82:	2102      	movs	r1, #2
					 ) {
 80a1a84:	461e      	mov	r6, r3
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop any active command.
 80a1a86:	f7ff ff92 	bl	80a19ae <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(DivIrqReg, 0x04);					// Clear the CRCIRq interrupt request bit
 80a1a8a:	2204      	movs	r2, #4
 80a1a8c:	210a      	movs	r1, #10
 80a1a8e:	4620      	mov	r0, r4
 80a1a90:	f7ff ff8d 	bl	80a19ae <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_SetRegisterBitMask(FIFOLevelReg, 0x80);		// FlushBuffer = 1, FIFO initialization
 80a1a94:	2280      	movs	r2, #128	; 0x80
 80a1a96:	2114      	movs	r1, #20
 80a1a98:	4620      	mov	r0, r4
 80a1a9a:	f7ff ffcf 	bl	80a1a3c <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>
	PCD_WriteRegister(FIFODataReg, length, data);		// Write data to the FIFO
 80a1a9e:	462a      	mov	r2, r5
 80a1aa0:	463b      	mov	r3, r7
 80a1aa2:	2112      	movs	r1, #18
 80a1aa4:	4620      	mov	r0, r4
 80a1aa6:	f7ff ff97 	bl	80a19d8 <_ZN7MFRC52217PCD_WriteRegisterEhhPh>
	PCD_WriteRegister(CommandReg, PCD_CalcCRC);		// Start the calculation
 80a1aaa:	2203      	movs	r2, #3
 80a1aac:	2102      	movs	r1, #2
 80a1aae:	4620      	mov	r0, r4
 80a1ab0:	f7ff ff7d 	bl	80a19ae <_ZN7MFRC52217PCD_WriteRegisterEhh>
 80a1ab4:	f241 3588 	movw	r5, #5000	; 0x1388
	
	// Wait for the CRC calculation to complete. Each iteration of the while-loop takes 17.73�s.
	word i = 5000;
	byte n;
	while (1) {
		n = PCD_ReadRegister(DivIrqReg);	// DivIrqReg[7..0] bits are: Set2 reserved reserved MfinActIRq   reserved CRCIRq reserved reserved
 80a1ab8:	210a      	movs	r1, #10
 80a1aba:	4620      	mov	r0, r4
 80a1abc:	f7ff ffa7 	bl	80a1a0e <_ZN7MFRC52216PCD_ReadRegisterEh>
		if (n & 0x04) {						// CRCIRq bit set - calculation done
 80a1ac0:	0743      	lsls	r3, r0, #29
 80a1ac2:	d405      	bmi.n	80a1ad0 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x58>
			break;
		}
		if (--i == 0) {						// The emergency break. We will eventually terminate on this one after 89ms. Communication with the MFRC522 might be down.
 80a1ac4:	3d01      	subs	r5, #1
 80a1ac6:	b2ad      	uxth	r5, r5
 80a1ac8:	2d00      	cmp	r5, #0
 80a1aca:	d1f5      	bne.n	80a1ab8 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x40>
			return STATUS_TIMEOUT;
 80a1acc:	2004      	movs	r0, #4
 80a1ace:	e00f      	b.n	80a1af0 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x78>
		}
	}
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop calculating CRC for new content in the FIFO.
 80a1ad0:	2200      	movs	r2, #0
 80a1ad2:	2102      	movs	r1, #2
 80a1ad4:	4620      	mov	r0, r4
 80a1ad6:	f7ff ff6a 	bl	80a19ae <_ZN7MFRC52217PCD_WriteRegisterEhh>
	
	// Transfer the result from the registers to the result buffer
	result[0] = PCD_ReadRegister(CRCResultRegL);
 80a1ada:	2144      	movs	r1, #68	; 0x44
 80a1adc:	4620      	mov	r0, r4
 80a1ade:	f7ff ff96 	bl	80a1a0e <_ZN7MFRC52216PCD_ReadRegisterEh>
	result[1] = PCD_ReadRegister(CRCResultRegH);
 80a1ae2:	2142      	movs	r1, #66	; 0x42
	result[0] = PCD_ReadRegister(CRCResultRegL);
 80a1ae4:	7030      	strb	r0, [r6, #0]
	result[1] = PCD_ReadRegister(CRCResultRegH);
 80a1ae6:	4620      	mov	r0, r4
 80a1ae8:	f7ff ff91 	bl	80a1a0e <_ZN7MFRC52216PCD_ReadRegisterEh>
 80a1aec:	7070      	strb	r0, [r6, #1]
	return STATUS_OK;
 80a1aee:	2001      	movs	r0, #1
} // End PCD_CalculateCRC()
 80a1af0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1af2 <_ZN7MFRC5229PCD_ResetEv>:
} // End PCD_Init()

/**
 * Performs a soft reset on the MFRC522 chip and waits for it to be ready again.
 */
void MFRC522::PCD_Reset() {
 80a1af2:	b510      	push	{r4, lr}
	PCD_WriteRegister(CommandReg, PCD_SoftReset);	// Issue the SoftReset command.
 80a1af4:	220f      	movs	r2, #15
 80a1af6:	2102      	movs	r1, #2
void MFRC522::PCD_Reset() {
 80a1af8:	4604      	mov	r4, r0
	PCD_WriteRegister(CommandReg, PCD_SoftReset);	// Issue the SoftReset command.
 80a1afa:	f7ff ff58 	bl	80a19ae <_ZN7MFRC52217PCD_WriteRegisterEhh>
	// The datasheet does not mention how long the SoftRest command takes to complete.
	// But the MFRC522 might have been in soft power-down mode (triggered by bit 4 of CommandReg) 
	// Section 8.8.2 in the datasheet says the oscillator start-up time is the start up time of the crystal + 37,74�s. Let us be generous: 50ms.
	delay(50);
 80a1afe:	2032      	movs	r0, #50	; 0x32
 80a1b00:	f002 ff60 	bl	80a49c4 <delay>
	// Wait for the PowerDown bit in CommandReg to be cleared
	while (PCD_ReadRegister(CommandReg) & (1<<4)) {
 80a1b04:	2102      	movs	r1, #2
 80a1b06:	4620      	mov	r0, r4
 80a1b08:	f7ff ff81 	bl	80a1a0e <_ZN7MFRC52216PCD_ReadRegisterEh>
 80a1b0c:	06c3      	lsls	r3, r0, #27
 80a1b0e:	d4f9      	bmi.n	80a1b04 <_ZN7MFRC5229PCD_ResetEv+0x12>
		// PCD still restarting - unlikely after waiting 50ms, but better safe than sorry.
	}
} // End PCD_Reset()
 80a1b10:	bd10      	pop	{r4, pc}

080a1b12 <_ZN7MFRC52213PCD_AntennaOnEv>:

/**
 * Turns the antenna on by enabling pins TX1 and TX2.
 * After a reset these pins disabled.
 */
void MFRC522::PCD_AntennaOn() {
 80a1b12:	b510      	push	{r4, lr}
	byte value = PCD_ReadRegister(TxControlReg);
 80a1b14:	2128      	movs	r1, #40	; 0x28
void MFRC522::PCD_AntennaOn() {
 80a1b16:	4604      	mov	r4, r0
	byte value = PCD_ReadRegister(TxControlReg);
 80a1b18:	f7ff ff79 	bl	80a1a0e <_ZN7MFRC52216PCD_ReadRegisterEh>
	if ((value & 0x03) != 0x03) {
 80a1b1c:	f000 0303 	and.w	r3, r0, #3
 80a1b20:	2b03      	cmp	r3, #3
 80a1b22:	d008      	beq.n	80a1b36 <_ZN7MFRC52213PCD_AntennaOnEv+0x24>
		PCD_WriteRegister(TxControlReg, value | 0x03);
 80a1b24:	f040 0203 	orr.w	r2, r0, #3
 80a1b28:	2128      	movs	r1, #40	; 0x28
 80a1b2a:	4620      	mov	r0, r4
	}
} // End PCD_AntennaOn()
 80a1b2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		PCD_WriteRegister(TxControlReg, value | 0x03);
 80a1b30:	b2d2      	uxtb	r2, r2
 80a1b32:	f7ff bf3c 	b.w	80a19ae <_ZN7MFRC52217PCD_WriteRegisterEhh>
} // End PCD_AntennaOn()
 80a1b36:	bd10      	pop	{r4, pc}

080a1b38 <_ZN7MFRC5228PCD_InitEv>:
void MFRC522::PCD_Init() {
 80a1b38:	b510      	push	{r4, lr}
 80a1b3a:	4604      	mov	r4, r0
	if (digitalRead(_resetPowerDownPin) == LOW) { //The MFRC522 chip is in power down mode.
 80a1b3c:	7b40      	ldrb	r0, [r0, #13]
 80a1b3e:	f003 fc21 	bl	80a5384 <digitalRead>
 80a1b42:	bb48      	cbnz	r0, 80a1b98 <_ZN7MFRC5228PCD_InitEv+0x60>
		digitalWrite(_resetPowerDownPin, HIGH);	// Exit power down mode. This triggers a hard reset.
 80a1b44:	7b60      	ldrb	r0, [r4, #13]
 80a1b46:	2101      	movs	r1, #1
 80a1b48:	f003 fc03 	bl	80a5352 <digitalWrite>
		delay(50);
 80a1b4c:	2032      	movs	r0, #50	; 0x32
 80a1b4e:	f002 ff39 	bl	80a49c4 <delay>
    PCD_WriteRegister(TModeReg, 0x80);			// TAuto=1; timer starts automatically at the end of the transmission in all communication modes at all speeds
 80a1b52:	4620      	mov	r0, r4
 80a1b54:	2280      	movs	r2, #128	; 0x80
 80a1b56:	2154      	movs	r1, #84	; 0x54
 80a1b58:	f7ff ff29 	bl	80a19ae <_ZN7MFRC52217PCD_WriteRegisterEhh>
    PCD_WriteRegister(TPrescalerReg, 0xA9);	// TPreScaler = TModeReg[3..0]:TPrescalerReg, ie 0x0A9 = 169 => f_timer=40kHz, ie a timer period of 25�s.
 80a1b5c:	4620      	mov	r0, r4
 80a1b5e:	22a9      	movs	r2, #169	; 0xa9
 80a1b60:	2156      	movs	r1, #86	; 0x56
 80a1b62:	f7ff ff24 	bl	80a19ae <_ZN7MFRC52217PCD_WriteRegisterEhh>
    PCD_WriteRegister(TReloadRegH, 0x03);		// Reload timer with 0x3E8 = 1000, ie 25ms before timeout.
 80a1b66:	4620      	mov	r0, r4
 80a1b68:	2203      	movs	r2, #3
 80a1b6a:	2158      	movs	r1, #88	; 0x58
 80a1b6c:	f7ff ff1f 	bl	80a19ae <_ZN7MFRC52217PCD_WriteRegisterEhh>
    PCD_WriteRegister(TReloadRegL, 0xE8);
 80a1b70:	4620      	mov	r0, r4
 80a1b72:	22e8      	movs	r2, #232	; 0xe8
 80a1b74:	215a      	movs	r1, #90	; 0x5a
 80a1b76:	f7ff ff1a 	bl	80a19ae <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(TxASKReg, 0x40);		// Default 0x00. Force a 100 % ASK modulation independent of the ModGsPReg register setting
 80a1b7a:	4620      	mov	r0, r4
 80a1b7c:	2240      	movs	r2, #64	; 0x40
 80a1b7e:	212a      	movs	r1, #42	; 0x2a
 80a1b80:	f7ff ff15 	bl	80a19ae <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(ModeReg, 0x3D);		// Default 0x3F. Set the preset value for the CRC coprocessor for the CalcCRC command to 0x6363 (ISO 14443-3 part 6.2.4)
 80a1b84:	4620      	mov	r0, r4
 80a1b86:	223d      	movs	r2, #61	; 0x3d
 80a1b88:	2122      	movs	r1, #34	; 0x22
 80a1b8a:	f7ff ff10 	bl	80a19ae <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_AntennaOn();						// Enable the antenna driver pins TX1 and TX2 (they were disabled by the reset)
 80a1b8e:	4620      	mov	r0, r4
} // End PCD_Init()
 80a1b90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	PCD_AntennaOn();						// Enable the antenna driver pins TX1 and TX2 (they were disabled by the reset)
 80a1b94:	f7ff bfbd 	b.w	80a1b12 <_ZN7MFRC52213PCD_AntennaOnEv>
		PCD_Reset();
 80a1b98:	4620      	mov	r0, r4
 80a1b9a:	f7ff ffaa 	bl	80a1af2 <_ZN7MFRC5229PCD_ResetEv>
 80a1b9e:	e7d8      	b.n	80a1b52 <_ZN7MFRC5228PCD_InitEv+0x1a>

080a1ba0 <_ZN7MFRC52218PCD_GetAntennaGainEv>:
 * NOTE: Return value scrubbed with (0x07<<4)=01110000b as RCFfgReg may use reserved bits.
 * 
 * @return Value of the RxGain, scrubbed to the 3 bits used.
 */
byte MFRC522::PCD_GetAntennaGain() {
	return PCD_ReadRegister(RFCfgReg) & (0x07<<4);
 80a1ba0:	214c      	movs	r1, #76	; 0x4c
byte MFRC522::PCD_GetAntennaGain() {
 80a1ba2:	b508      	push	{r3, lr}
	return PCD_ReadRegister(RFCfgReg) & (0x07<<4);
 80a1ba4:	f7ff ff33 	bl	80a1a0e <_ZN7MFRC52216PCD_ReadRegisterEh>
} // End PCD_GetAntennaGain()
 80a1ba8:	f000 0070 	and.w	r0, r0, #112	; 0x70
 80a1bac:	bd08      	pop	{r3, pc}

080a1bae <_ZN7MFRC52218PCD_SetAntennaGainEh>:
/**
 * Set the MFRC522 Receiver Gain (RxGain) to value specified by given mask.
 * See 9.3.3.6 / table 98 in http://www.nxp.com/documents/data_sheet/MFRC522.pdf
 * NOTE: Given mask is scrubbed with (0x07<<4)=01110000b as RCFfgReg may use reserved bits.
 */
void MFRC522::PCD_SetAntennaGain(byte mask) {
 80a1bae:	b538      	push	{r3, r4, r5, lr}
 80a1bb0:	460d      	mov	r5, r1
 80a1bb2:	4604      	mov	r4, r0
	if (PCD_GetAntennaGain() != mask) {						// only bother if there is a change
 80a1bb4:	f7ff fff4 	bl	80a1ba0 <_ZN7MFRC52218PCD_GetAntennaGainEv>
 80a1bb8:	42a8      	cmp	r0, r5
 80a1bba:	d00c      	beq.n	80a1bd6 <_ZN7MFRC52218PCD_SetAntennaGainEh+0x28>
		PCD_ClearRegisterBitMask(RFCfgReg, (0x07<<4));		// clear needed to allow 000 pattern
 80a1bbc:	4620      	mov	r0, r4
 80a1bbe:	2270      	movs	r2, #112	; 0x70
 80a1bc0:	214c      	movs	r1, #76	; 0x4c
 80a1bc2:	f7ff ff4a 	bl	80a1a5a <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>
		PCD_SetRegisterBitMask(RFCfgReg, mask & (0x07<<4));	// only set RxGain[2:0] bits
 80a1bc6:	4620      	mov	r0, r4
 80a1bc8:	f005 0270 	and.w	r2, r5, #112	; 0x70
 80a1bcc:	214c      	movs	r1, #76	; 0x4c
	}
} // End PCD_SetAntennaGain()
 80a1bce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		PCD_SetRegisterBitMask(RFCfgReg, mask & (0x07<<4));	// only set RxGain[2:0] bits
 80a1bd2:	f7ff bf33 	b.w	80a1a3c <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>
} // End PCD_SetAntennaGain()
 80a1bd6:	bd38      	pop	{r3, r4, r5, pc}

080a1bd8 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh>:
								) {
 80a1bd8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a1bdc:	4607      	mov	r7, r0
 80a1bde:	461e      	mov	r6, r3
	if (count == 0) {
 80a1be0:	4615      	mov	r5, r2
								) {
 80a1be2:	f89d 8030 	ldrb.w	r8, [sp, #48]	; 0x30
	if (count == 0) {
 80a1be6:	2a00      	cmp	r2, #0
 80a1be8:	d042      	beq.n	80a1c70 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x98>
	byte address = 0x80 | (reg & 0x7E);		// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
 80a1bea:	f001 017e 	and.w	r1, r1, #126	; 0x7e
	digitalWrite(_chipSelectPin, LOW);		// Select slave
 80a1bee:	7b00      	ldrb	r0, [r0, #12]
	byte address = 0x80 | (reg & 0x7E);		// MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.
 80a1bf0:	f041 0980 	orr.w	r9, r1, #128	; 0x80
	digitalWrite(_chipSelectPin, LOW);		// Select slave
 80a1bf4:	2100      	movs	r1, #0
 80a1bf6:	f003 fbac 	bl	80a5352 <digitalWrite>
	SPI.transfer(address);					// Tell MFRC522 which address we want to read
 80a1bfa:	4648      	mov	r0, r9
 80a1bfc:	f7ff fece 	bl	80a199c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
 80a1c00:	f04f 0b00 	mov.w	fp, #0
				mask |= (1 << i);
 80a1c04:	f04f 0a01 	mov.w	sl, #1
	count--;								// One read is performed outside of the loop
 80a1c08:	3d01      	subs	r5, #1
 80a1c0a:	b2ed      	uxtb	r5, r5
	while (index < count) {
 80a1c0c:	fa5f f48b 	uxtb.w	r4, fp
 80a1c10:	42a5      	cmp	r5, r4
 80a1c12:	d922      	bls.n	80a1c5a <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x82>
		if (index == 0 && rxAlign) { // Only update bit positions rxAlign..7 in values[0]
 80a1c14:	b9dc      	cbnz	r4, 80a1c4e <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x76>
 80a1c16:	f1b8 0f00 	cmp.w	r8, #0
 80a1c1a:	d018      	beq.n	80a1c4e <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x76>
 80a1c1c:	4642      	mov	r2, r8
			for (byte i = rxAlign; i <= 7; i++) {
 80a1c1e:	b2d3      	uxtb	r3, r2
 80a1c20:	2b07      	cmp	r3, #7
 80a1c22:	b261      	sxtb	r1, r4
 80a1c24:	d805      	bhi.n	80a1c32 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x5a>
				mask |= (1 << i);
 80a1c26:	fa0a f402 	lsl.w	r4, sl, r2
 80a1c2a:	430c      	orrs	r4, r1
 80a1c2c:	b2e4      	uxtb	r4, r4
			for (byte i = rxAlign; i <= 7; i++) {
 80a1c2e:	3201      	adds	r2, #1
 80a1c30:	e7f5      	b.n	80a1c1e <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x46>
			byte value = SPI.transfer(address);	
 80a1c32:	4648      	mov	r0, r9
 80a1c34:	9101      	str	r1, [sp, #4]
 80a1c36:	f7ff feb1 	bl	80a199c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
			values[0] = (values[index] & ~mask) | (value & mask);
 80a1c3a:	7833      	ldrb	r3, [r6, #0]
 80a1c3c:	9901      	ldr	r1, [sp, #4]
 80a1c3e:	4004      	ands	r4, r0
 80a1c40:	ea23 0301 	bic.w	r3, r3, r1
 80a1c44:	431c      	orrs	r4, r3
 80a1c46:	7034      	strb	r4, [r6, #0]
		index++;
 80a1c48:	f10b 0b01 	add.w	fp, fp, #1
	while (index < count) {
 80a1c4c:	e7de      	b.n	80a1c0c <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x34>
			values[index] = SPI.transfer(address);	// Read value and tell that we want to read the same address again.
 80a1c4e:	4648      	mov	r0, r9
 80a1c50:	f7ff fea4 	bl	80a199c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
 80a1c54:	f806 000b 	strb.w	r0, [r6, fp]
 80a1c58:	e7f6      	b.n	80a1c48 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh+0x70>
	values[index] = SPI.transfer(0);			// Read the final byte. Send 0 to stop reading.
 80a1c5a:	2000      	movs	r0, #0
 80a1c5c:	f7ff fe9e 	bl	80a199c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8transferEh.isra.0>
	digitalWrite(_chipSelectPin, HIGH);			// Release slave again
 80a1c60:	2101      	movs	r1, #1
	values[index] = SPI.transfer(0);			// Read the final byte. Send 0 to stop reading.
 80a1c62:	5570      	strb	r0, [r6, r5]
	digitalWrite(_chipSelectPin, HIGH);			// Release slave again
 80a1c64:	7b38      	ldrb	r0, [r7, #12]
} // End PCD_ReadRegister()
 80a1c66:	b003      	add	sp, #12
 80a1c68:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	digitalWrite(_chipSelectPin, HIGH);			// Release slave again
 80a1c6c:	f003 bb71 	b.w	80a5352 <digitalWrite>
} // End PCD_ReadRegister()
 80a1c70:	b003      	add	sp, #12
 80a1c72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a1c76 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>:
										byte *backData,		///< NULL or pointer to buffer if data should be read back after executing the command.
										byte *backLen,		///< In: Max number of bytes to write to *backData. Out: The number of bytes returned.
										byte *validBits,	///< In/Out: The number of valid bits in the last byte. 0 for 8 valid bits.
										byte rxAlign,		///< In: Defines the bit position in backData[0] for the first bit received. Default 0.
										bool checkCRC		///< In: True => The last two bytes of the response is assumed to be a CRC_A that must be validated.
									 ) {
 80a1c76:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a1c7a:	b089      	sub	sp, #36	; 0x24
 80a1c7c:	9203      	str	r2, [sp, #12]
 80a1c7e:	f8dd 9054 	ldr.w	r9, [sp, #84]	; 0x54
 80a1c82:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 80a1c86:	4604      	mov	r4, r0
 80a1c88:	e9dd 5613 	ldrd	r5, r6, [sp, #76]	; 0x4c
 80a1c8c:	468a      	mov	sl, r1
 80a1c8e:	2700      	movs	r7, #0
 80a1c90:	f89d b058 	ldrb.w	fp, [sp, #88]	; 0x58
 80a1c94:	9204      	str	r2, [sp, #16]
	byte n, _validBits;
	unsigned int i;

	// Prepare values for BitFramingReg
	byte txLastBits = validBits ? *validBits : 0;
 80a1c96:	f1b9 0f00 	cmp.w	r9, #0
 80a1c9a:	d03e      	beq.n	80a1d1a <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xa4>
 80a1c9c:	f899 8000 	ldrb.w	r8, [r9]
	byte bitFraming	= (rxAlign << 4) + txLastBits;		// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
	
	PCD_WriteRegister(CommandReg, PCD_Idle);			// Stop any active command.
 80a1ca0:	2200      	movs	r2, #0
 80a1ca2:	2102      	movs	r1, #2
 80a1ca4:	4620      	mov	r0, r4
 80a1ca6:	9305      	str	r3, [sp, #20]
 80a1ca8:	f7ff fe81 	bl	80a19ae <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(ComIrqReg, 0x7F);					// Clear all seven interrupt request bits
 80a1cac:	227f      	movs	r2, #127	; 0x7f
 80a1cae:	2108      	movs	r1, #8
 80a1cb0:	4620      	mov	r0, r4
 80a1cb2:	f7ff fe7c 	bl	80a19ae <_ZN7MFRC52217PCD_WriteRegisterEhh>
	byte bitFraming	= (rxAlign << 4) + txLastBits;		// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
 80a1cb6:	eb08 180b 	add.w	r8, r8, fp, lsl #4
	PCD_SetRegisterBitMask(FIFOLevelReg, 0x80);		// FlushBuffer = 1, FIFO initialization
 80a1cba:	2280      	movs	r2, #128	; 0x80
 80a1cbc:	2114      	movs	r1, #20
 80a1cbe:	4620      	mov	r0, r4
 80a1cc0:	f7ff febc 	bl	80a1a3c <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>
	byte bitFraming	= (rxAlign << 4) + txLastBits;		// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
 80a1cc4:	fa5f f888 	uxtb.w	r8, r8
	PCD_WriteRegister(FIFODataReg, sendLen, sendData);	// Write sendData to the FIFO
 80a1cc8:	9b05      	ldr	r3, [sp, #20]
 80a1cca:	2112      	movs	r1, #18
 80a1ccc:	4620      	mov	r0, r4
 80a1cce:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 80a1cd2:	f7ff fe81 	bl	80a19d8 <_ZN7MFRC52217PCD_WriteRegisterEhhPh>
	PCD_WriteRegister(BitFramingReg, bitFraming);		// Bit adjustments
 80a1cd6:	4642      	mov	r2, r8
 80a1cd8:	211a      	movs	r1, #26
 80a1cda:	4620      	mov	r0, r4
 80a1cdc:	f7ff fe67 	bl	80a19ae <_ZN7MFRC52217PCD_WriteRegisterEhh>
	PCD_WriteRegister(CommandReg, command);			// Execute the command
 80a1ce0:	4652      	mov	r2, sl
 80a1ce2:	2102      	movs	r1, #2
 80a1ce4:	4620      	mov	r0, r4
 80a1ce6:	f7ff fe62 	bl	80a19ae <_ZN7MFRC52217PCD_WriteRegisterEhh>
	if (command == PCD_Transceive) 	{
 80a1cea:	f1ba 0f0c 	cmp.w	sl, #12
 80a1cee:	d104      	bne.n	80a1cfa <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x84>
		PCD_SetRegisterBitMask(BitFramingReg, 0x80);	// StartSend=1, transmission of data starts
 80a1cf0:	2280      	movs	r2, #128	; 0x80
 80a1cf2:	211a      	movs	r1, #26
 80a1cf4:	4620      	mov	r0, r4
 80a1cf6:	f7ff fea1 	bl	80a1a3c <_ZN7MFRC52222PCD_SetRegisterBitMaskEhh>
	byte txLastBits = validBits ? *validBits : 0;
 80a1cfa:	f44f 68fa 	mov.w	r8, #2000	; 0x7d0
	// Wait for the command to complete.
	// In PCD_Init() we set the TAuto flag in TModeReg. This means the timer automatically starts when the PCD stops transmitting.
	// Each iteration of the do-while-loop takes 17.86�s.
	i = 2000;
	while (1) {
		n = PCD_ReadRegister(ComIrqReg);	// ComIrqReg[7..0] bits are: Set1 TxIRq RxIRq IdleIRq   HiAlertIRq LoAlertIRq ErrIRq TimerIRq
 80a1cfe:	2108      	movs	r1, #8
 80a1d00:	4620      	mov	r0, r4
 80a1d02:	f7ff fe84 	bl	80a1a0e <_ZN7MFRC52216PCD_ReadRegisterEh>
		if (n & waitIRq) {					// One of the interrupts that signal success has been set.
 80a1d06:	9b03      	ldr	r3, [sp, #12]
 80a1d08:	4218      	tst	r0, r3
 80a1d0a:	d108      	bne.n	80a1d1e <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xa8>
			break;
		}
		if (n & 0x01) {						// Timer interrupt - nothing received in 25ms
 80a1d0c:	07c3      	lsls	r3, r0, #31
 80a1d0e:	d402      	bmi.n	80a1d16 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xa0>
			return STATUS_TIMEOUT;
		}
		if (--i == 0) {						// The emergency break. If all other condions fail we will eventually terminate on this one after 35.7ms. Communication with the MFRC522 might be down.
 80a1d10:	f1b8 0801 	subs.w	r8, r8, #1
 80a1d14:	d1f3      	bne.n	80a1cfe <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x88>
			return STATUS_TIMEOUT;
 80a1d16:	2004      	movs	r0, #4
 80a1d18:	e04d      	b.n	80a1db6 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
	byte txLastBits = validBits ? *validBits : 0;
 80a1d1a:	46c8      	mov	r8, r9
 80a1d1c:	e7c0      	b.n	80a1ca0 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x2a>
			return STATUS_TIMEOUT;
		}
	}
	
	// Stop now if any errors except collisions were detected.
	byte errorRegValue = PCD_ReadRegister(ErrorReg); // ErrorReg[7..0] bits are: WrErr TempErr reserved BufferOvfl   CollErr CRCErr ParityErr ProtocolErr
 80a1d1e:	210c      	movs	r1, #12
 80a1d20:	4620      	mov	r0, r4
 80a1d22:	f7ff fe74 	bl	80a1a0e <_ZN7MFRC52216PCD_ReadRegisterEh>
	if (errorRegValue & 0x13) {	 // BufferOvfl ParityErr ProtocolErr
 80a1d26:	f010 0f13 	tst.w	r0, #19
	byte errorRegValue = PCD_ReadRegister(ErrorReg); // ErrorReg[7..0] bits are: WrErr TempErr reserved BufferOvfl   CollErr CRCErr ParityErr ProtocolErr
 80a1d2a:	4680      	mov	r8, r0
	if (errorRegValue & 0x13) {	 // BufferOvfl ParityErr ProtocolErr
 80a1d2c:	d146      	bne.n	80a1dbc <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x146>
		return STATUS_ERROR;
	}	

	// If the caller wants data back, get it from the MFRC522.
	if (backData && backLen) {
 80a1d2e:	b1dd      	cbz	r5, 80a1d68 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xf2>
 80a1d30:	b1d6      	cbz	r6, 80a1d68 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xf2>
		n = PCD_ReadRegister(FIFOLevelReg);						// Number of bytes in the FIFO
 80a1d32:	2114      	movs	r1, #20
 80a1d34:	4620      	mov	r0, r4
 80a1d36:	f7ff fe6a 	bl	80a1a0e <_ZN7MFRC52216PCD_ReadRegisterEh>
		if (n > *backLen) {
 80a1d3a:	7833      	ldrb	r3, [r6, #0]
		n = PCD_ReadRegister(FIFOLevelReg);						// Number of bytes in the FIFO
 80a1d3c:	4602      	mov	r2, r0
		if (n > *backLen) {
 80a1d3e:	4283      	cmp	r3, r0
 80a1d40:	d33e      	bcc.n	80a1dc0 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x14a>
			return STATUS_NO_ROOM;
		}
		*backLen = n;												// Number of bytes returned
 80a1d42:	7030      	strb	r0, [r6, #0]
		PCD_ReadRegister(FIFODataReg, n, backData, rxAlign);		// Get received data from FIFO
 80a1d44:	462b      	mov	r3, r5
 80a1d46:	2112      	movs	r1, #18
 80a1d48:	4620      	mov	r0, r4
 80a1d4a:	f8cd b000 	str.w	fp, [sp]
 80a1d4e:	f7ff ff43 	bl	80a1bd8 <_ZN7MFRC52216PCD_ReadRegisterEhhPhh>
		_validBits = PCD_ReadRegister(ControlReg) & 0x07;	// RxLastBits[2:0] indicates the number of valid bits in the last received byte. If this value is 000b, the whole byte is valid.
 80a1d52:	2118      	movs	r1, #24
 80a1d54:	4620      	mov	r0, r4
 80a1d56:	f7ff fe5a 	bl	80a1a0e <_ZN7MFRC52216PCD_ReadRegisterEh>
 80a1d5a:	f000 0707 	and.w	r7, r0, #7
		if (validBits) {
 80a1d5e:	f1b9 0f00 	cmp.w	r9, #0
 80a1d62:	d001      	beq.n	80a1d68 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xf2>
			*validBits = _validBits;
 80a1d64:	f889 7000 	strb.w	r7, [r9]
		}
	}
	
	// Tell about collisions
	if (errorRegValue & 0x08) { // CollErr
 80a1d68:	f018 0f08 	tst.w	r8, #8
 80a1d6c:	d12a      	bne.n	80a1dc4 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x14e>
		return STATUS_COLLISION;
	}
	
	// Perform CRC_A validation if requested.
	if (backData && backLen && checkCRC) {
 80a1d6e:	b35d      	cbz	r5, 80a1dc8 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x152>
 80a1d70:	b356      	cbz	r6, 80a1dc8 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x152>
 80a1d72:	9b04      	ldr	r3, [sp, #16]
 80a1d74:	b343      	cbz	r3, 80a1dc8 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x152>
		// In this case a MIFARE Classic NAK is not OK.
		if (*backLen == 1 && _validBits == 4) {
 80a1d76:	7832      	ldrb	r2, [r6, #0]
 80a1d78:	2a01      	cmp	r2, #1
 80a1d7a:	d103      	bne.n	80a1d84 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x10e>
 80a1d7c:	2f04      	cmp	r7, #4
 80a1d7e:	d125      	bne.n	80a1dcc <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x156>
			return STATUS_MIFARE_NACK;
 80a1d80:	2009      	movs	r0, #9
 80a1d82:	e018      	b.n	80a1db6 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
		}
		// We need at least the CRC_A value and all 8 bits of the last byte must be received.
		if (*backLen < 2 || _validBits != 0) {
 80a1d84:	d922      	bls.n	80a1dcc <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x156>
 80a1d86:	bb0f      	cbnz	r7, 80a1dcc <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x156>
			return STATUS_CRC_WRONG;
		}
		// Verify CRC_A - do our own calculation and store the control in controlBuffer.
		byte controlBuffer[2]; 
		n = PCD_CalculateCRC(&backData[0], *backLen - 2, &controlBuffer[0]);
 80a1d88:	3a02      	subs	r2, #2
 80a1d8a:	4629      	mov	r1, r5
 80a1d8c:	4620      	mov	r0, r4
 80a1d8e:	ab07      	add	r3, sp, #28
 80a1d90:	b2d2      	uxtb	r2, r2
 80a1d92:	f7ff fe71 	bl	80a1a78 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
		if (n != STATUS_OK) {
 80a1d96:	2801      	cmp	r0, #1
 80a1d98:	d10d      	bne.n	80a1db6 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
			return n;
		}
		if ((backData[*backLen - 2] != controlBuffer[0]) || (backData[*backLen - 1] != controlBuffer[1])) {
 80a1d9a:	7833      	ldrb	r3, [r6, #0]
 80a1d9c:	441d      	add	r5, r3
 80a1d9e:	f815 2c02 	ldrb.w	r2, [r5, #-2]
 80a1da2:	f89d 301c 	ldrb.w	r3, [sp, #28]
 80a1da6:	429a      	cmp	r2, r3
 80a1da8:	d110      	bne.n	80a1dcc <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x156>
 80a1daa:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80a1dae:	f89d 301d 	ldrb.w	r3, [sp, #29]
 80a1db2:	429a      	cmp	r2, r3
 80a1db4:	d10a      	bne.n	80a1dcc <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x156>
			return STATUS_CRC_WRONG;
		}
	}
	
	return STATUS_OK;
} // End PCD_CommunicateWithPICC()
 80a1db6:	b009      	add	sp, #36	; 0x24
 80a1db8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return STATUS_ERROR;
 80a1dbc:	2002      	movs	r0, #2
 80a1dbe:	e7fa      	b.n	80a1db6 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
			return STATUS_NO_ROOM;
 80a1dc0:	2005      	movs	r0, #5
 80a1dc2:	e7f8      	b.n	80a1db6 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
		return STATUS_COLLISION;
 80a1dc4:	2003      	movs	r0, #3
 80a1dc6:	e7f6      	b.n	80a1db6 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
	return STATUS_OK;
 80a1dc8:	2001      	movs	r0, #1
 80a1dca:	e7f4      	b.n	80a1db6 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>
			return STATUS_CRC_WRONG;
 80a1dcc:	2008      	movs	r0, #8
 80a1dce:	e7f2      	b.n	80a1db6 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x140>

080a1dd0 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>:
								 ) {
 80a1dd0:	b510      	push	{r4, lr}
 80a1dd2:	b086      	sub	sp, #24
	return PCD_CommunicateWithPICC(PCD_Transceive, waitIRq, sendData, sendLen, backData, backLen, validBits, rxAlign, checkCRC);
 80a1dd4:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
 80a1dd8:	9200      	str	r2, [sp, #0]
 80a1dda:	9405      	str	r4, [sp, #20]
 80a1ddc:	f89d 4028 	ldrb.w	r4, [sp, #40]	; 0x28
 80a1de0:	2230      	movs	r2, #48	; 0x30
 80a1de2:	9404      	str	r4, [sp, #16]
 80a1de4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80a1de6:	9403      	str	r4, [sp, #12]
 80a1de8:	9c08      	ldr	r4, [sp, #32]
 80a1dea:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80a1dee:	460b      	mov	r3, r1
 80a1df0:	210c      	movs	r1, #12
 80a1df2:	f7ff ff40 	bl	80a1c76 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>
} // End PCD_TransceiveData()
 80a1df6:	b006      	add	sp, #24
 80a1df8:	bd10      	pop	{r4, pc}

080a1dfa <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_>:
 * @return STATUS_OK on success, STATUS_??? otherwise.
 */ 
byte MFRC522::PICC_REQA_or_WUPA(	byte command, 		///< The command to send - PICC_CMD_REQA or PICC_CMD_WUPA
									byte *bufferATQA,	///< The buffer to store the ATQA (Answer to request) in
									byte *bufferSize	///< Buffer size, at least two bytes. Also number of bytes returned if STATUS_OK.
							   ) {
 80a1dfa:	b570      	push	{r4, r5, r6, lr}
 80a1dfc:	b088      	sub	sp, #32
 80a1dfe:	4606      	mov	r6, r0
 80a1e00:	461c      	mov	r4, r3
	byte validBits;
	byte status;
	
	if (bufferATQA == NULL || *bufferSize < 2) {	// The ATQA response is 2 bytes long.
 80a1e02:	4615      	mov	r5, r2
							   ) {
 80a1e04:	f88d 1017 	strb.w	r1, [sp, #23]
	if (bufferATQA == NULL || *bufferSize < 2) {	// The ATQA response is 2 bytes long.
 80a1e08:	b31a      	cbz	r2, 80a1e52 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x58>
 80a1e0a:	781b      	ldrb	r3, [r3, #0]
 80a1e0c:	2b01      	cmp	r3, #1
 80a1e0e:	d920      	bls.n	80a1e52 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x58>
		return STATUS_NO_ROOM;
	}
	PCD_ClearRegisterBitMask(CollReg, 0x80);			// ValuesAfterColl=1 => Bits received after collision are cleared.
 80a1e10:	2280      	movs	r2, #128	; 0x80
 80a1e12:	211c      	movs	r1, #28
 80a1e14:	f7ff fe21 	bl	80a1a5a <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>
	validBits = 7;										// For REQA and WUPA we need the short frame format - transmit only 7 bits of the last (and only) byte. TxLastBits = BitFramingReg[2..0]
 80a1e18:	2307      	movs	r3, #7
 80a1e1a:	f88d 301f 	strb.w	r3, [sp, #31]
	status = PCD_TransceiveData(&command, 1, bufferATQA, bufferSize, &validBits);
 80a1e1e:	2300      	movs	r3, #0
 80a1e20:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80a1e24:	f10d 031f 	add.w	r3, sp, #31
 80a1e28:	e9cd 4300 	strd	r4, r3, [sp]
 80a1e2c:	2201      	movs	r2, #1
 80a1e2e:	462b      	mov	r3, r5
 80a1e30:	4630      	mov	r0, r6
 80a1e32:	f10d 0117 	add.w	r1, sp, #23
 80a1e36:	f7ff ffcb 	bl	80a1dd0 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
	if (status != STATUS_OK) {
 80a1e3a:	2801      	cmp	r0, #1
 80a1e3c:	d107      	bne.n	80a1e4e <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x54>
		return status;
	}
	if (*bufferSize != 2 || validBits != 0) {		// ATQA must be exactly 16 bits.
 80a1e3e:	7823      	ldrb	r3, [r4, #0]
 80a1e40:	2b02      	cmp	r3, #2
 80a1e42:	d108      	bne.n	80a1e56 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x5c>
 80a1e44:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80a1e48:	2b00      	cmp	r3, #0
		return STATUS_ERROR;
 80a1e4a:	bf18      	it	ne
 80a1e4c:	2002      	movne	r0, #2
	}
	return STATUS_OK;
} // End PICC_REQA_or_WUPA()
 80a1e4e:	b008      	add	sp, #32
 80a1e50:	bd70      	pop	{r4, r5, r6, pc}
		return STATUS_NO_ROOM;
 80a1e52:	2005      	movs	r0, #5
 80a1e54:	e7fb      	b.n	80a1e4e <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x54>
		return STATUS_ERROR;
 80a1e56:	2002      	movs	r0, #2
 80a1e58:	e7f9      	b.n	80a1e4e <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x54>

080a1e5a <_ZN7MFRC52213PICC_RequestAEPhS0_>:
							) {
 80a1e5a:	4613      	mov	r3, r2
	return PICC_REQA_or_WUPA(PICC_CMD_REQA, bufferATQA, bufferSize);
 80a1e5c:	460a      	mov	r2, r1
 80a1e5e:	2126      	movs	r1, #38	; 0x26
 80a1e60:	f7ff bfcb 	b.w	80a1dfa <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_>

080a1e64 <_ZN7MFRC52221PICC_IsNewCardPresentEv>:
 * 
 * @return bool
 */
bool MFRC522::PICC_IsNewCardPresent() {
	byte bufferATQA[2];
	byte bufferSize = sizeof(bufferATQA);
 80a1e64:	2302      	movs	r3, #2
bool MFRC522::PICC_IsNewCardPresent() {
 80a1e66:	b507      	push	{r0, r1, r2, lr}
	byte result = PICC_RequestA(bufferATQA, &bufferSize);
 80a1e68:	f10d 0203 	add.w	r2, sp, #3
 80a1e6c:	a901      	add	r1, sp, #4
	byte bufferSize = sizeof(bufferATQA);
 80a1e6e:	f88d 3003 	strb.w	r3, [sp, #3]
	byte result = PICC_RequestA(bufferATQA, &bufferSize);
 80a1e72:	f7ff fff2 	bl	80a1e5a <_ZN7MFRC52213PICC_RequestAEPhS0_>
	return (result == STATUS_OK || result == STATUS_COLLISION);
 80a1e76:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
} // End PICC_IsNewCardPresent()
 80a1e7a:	1e43      	subs	r3, r0, #1
 80a1e7c:	4258      	negs	r0, r3
 80a1e7e:	4158      	adcs	r0, r3
 80a1e80:	b003      	add	sp, #12
 80a1e82:	f85d fb04 	ldr.w	pc, [sp], #4

080a1e86 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh>:
						 ) {
 80a1e86:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (validBits > 80) {
 80a1e8a:	2a50      	cmp	r2, #80	; 0x50
						 ) {
 80a1e8c:	4682      	mov	sl, r0
 80a1e8e:	460f      	mov	r7, r1
 80a1e90:	4690      	mov	r8, r2
 80a1e92:	b08b      	sub	sp, #44	; 0x2c
	if (validBits > 80) {
 80a1e94:	f200 813b 	bhi.w	80a210e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x288>
	PCD_ClearRegisterBitMask(CollReg, 0x80);			// ValuesAfterColl=1 => Bits received after collision are cleared.
 80a1e98:	2280      	movs	r2, #128	; 0x80
 80a1e9a:	211c      	movs	r1, #28
 80a1e9c:	f7ff fddd 	bl	80a1a5a <_ZN7MFRC52224PCD_ClearRegisterBitMaskEhh>
				buffer[0] = PICC_CMD_SEL_CL1;
 80a1ea0:	2393      	movs	r3, #147	; 0x93
 80a1ea2:	f88d 301c 	strb.w	r3, [sp, #28]
				useCascadeTag = validBits && uid->size > 4;	// When we know that the UID has more than 4 bytes
 80a1ea6:	f1b8 0f00 	cmp.w	r8, #0
 80a1eaa:	f000 80b9 	beq.w	80a2020 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x19a>
 80a1eae:	783c      	ldrb	r4, [r7, #0]
 80a1eb0:	2c04      	cmp	r4, #4
 80a1eb2:	bf94      	ite	ls
 80a1eb4:	2300      	movls	r3, #0
 80a1eb6:	2301      	movhi	r3, #1
				useCascadeTag = validBits && uid->size > 7;	// When we know that the UID has more than 7 bytes
 80a1eb8:	2501      	movs	r5, #1
 80a1eba:	2600      	movs	r6, #0
 80a1ebc:	e00b      	b.n	80a1ed6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x50>
				buffer[0] = PICC_CMD_SEL_CL2;
 80a1ebe:	2395      	movs	r3, #149	; 0x95
 80a1ec0:	f88d 301c 	strb.w	r3, [sp, #28]
				useCascadeTag = validBits && uid->size > 7;	// When we know that the UID has more than 7 bytes
 80a1ec4:	f1b8 0f00 	cmp.w	r8, #0
 80a1ec8:	f000 80ac 	beq.w	80a2024 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x19e>
 80a1ecc:	783c      	ldrb	r4, [r7, #0]
 80a1ece:	2c07      	cmp	r4, #7
 80a1ed0:	bf94      	ite	ls
 80a1ed2:	2300      	movls	r3, #0
 80a1ed4:	2301      	movhi	r3, #1
		currentLevelKnownBits = validBits - (8 * uidIndex);
 80a1ed6:	eba8 04c6 	sub.w	r4, r8, r6, lsl #3
 80a1eda:	b264      	sxtb	r4, r4
		if (currentLevelKnownBits < 0) {
 80a1edc:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
		if (useCascadeTag) {
 80a1ee0:	2b00      	cmp	r3, #0
 80a1ee2:	f000 80a1 	beq.w	80a2028 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1a2>
			buffer[index++] = PICC_CMD_CT;
 80a1ee6:	2288      	movs	r2, #136	; 0x88
 80a1ee8:	2103      	movs	r1, #3
 80a1eea:	f88d 201e 	strb.w	r2, [sp, #30]
		byte bytesToCopy = currentLevelKnownBits / 8 + (currentLevelKnownBits % 8 ? 1 : 0); // The number of bytes needed to represent the known bits for this level.
 80a1eee:	f014 0207 	ands.w	r2, r4, #7
 80a1ef2:	bf18      	it	ne
 80a1ef4:	2201      	movne	r2, #1
 80a1ef6:	eb02 02e4 	add.w	r2, r2, r4, asr #3
		if (bytesToCopy) {
 80a1efa:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
		byte bytesToCopy = currentLevelKnownBits / 8 + (currentLevelKnownBits % 8 ? 1 : 0); // The number of bytes needed to represent the known bits for this level.
 80a1efe:	b2e0      	uxtb	r0, r4
		if (bytesToCopy) {
 80a1f00:	d01a      	beq.n	80a1f38 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xb2>
			byte maxBytes = useCascadeTag ? 3 : 4; // Max 4 bytes in each Cascade Level. Only 3 left if we use the Cascade Tag
 80a1f02:	2b00      	cmp	r3, #0
 80a1f04:	bf14      	ite	ne
 80a1f06:	f04f 0c03 	movne.w	ip, #3
 80a1f0a:	f04f 0c04 	moveq.w	ip, #4
			for (count = 0; count < bytesToCopy; count++) {
 80a1f0e:	4594      	cmp	ip, r2
 80a1f10:	bf94      	ite	ls
 80a1f12:	eb01 020c 	addls.w	r2, r1, ip
 80a1f16:	188a      	addhi	r2, r1, r2
 80a1f18:	f106 0e01 	add.w	lr, r6, #1
 80a1f1c:	44be      	add	lr, r7
 80a1f1e:	b2d2      	uxtb	r2, r2
				buffer[index++] = uid->uidByte[uidIndex + count];
 80a1f20:	468c      	mov	ip, r1
 80a1f22:	3101      	adds	r1, #1
 80a1f24:	f81e 9b01 	ldrb.w	r9, [lr], #1
 80a1f28:	b2c9      	uxtb	r1, r1
 80a1f2a:	f10d 0b28 	add.w	fp, sp, #40	; 0x28
 80a1f2e:	44dc      	add	ip, fp
			for (count = 0; count < bytesToCopy; count++) {
 80a1f30:	4291      	cmp	r1, r2
				buffer[index++] = uid->uidByte[uidIndex + count];
 80a1f32:	f80c 9c0c 	strb.w	r9, [ip, #-12]
			for (count = 0; count < bytesToCopy; count++) {
 80a1f36:	d1f3      	bne.n	80a1f20 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x9a>
		if (useCascadeTag) {
 80a1f38:	b113      	cbz	r3, 80a1f40 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xba>
			currentLevelKnownBits += 8;
 80a1f3a:	f100 0408 	add.w	r4, r0, #8
 80a1f3e:	b264      	sxtb	r4, r4
			if (currentLevelKnownBits >= 32) { // All UID bits in this Cascade Level are known. This is a SELECT.
 80a1f40:	2c1f      	cmp	r4, #31
 80a1f42:	dd73      	ble.n	80a202c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1a6>
				buffer[1] = 0x70; // NVB - Number of Valid Bits: Seven whole bytes
 80a1f44:	f04f 0370 	mov.w	r3, #112	; 0x70
				buffer[6] = buffer[2] ^ buffer[3] ^ buffer[4] ^ buffer[5];
 80a1f48:	f89d 201f 	ldrb.w	r2, [sp, #31]
				buffer[1] = 0x70; // NVB - Number of Valid Bits: Seven whole bytes
 80a1f4c:	f88d 301d 	strb.w	r3, [sp, #29]
				buffer[6] = buffer[2] ^ buffer[3] ^ buffer[4] ^ buffer[5];
 80a1f50:	f89d 301e 	ldrb.w	r3, [sp, #30]
				result = PCD_CalculateCRC(buffer, 7, &buffer[7]);
 80a1f54:	4650      	mov	r0, sl
				buffer[6] = buffer[2] ^ buffer[3] ^ buffer[4] ^ buffer[5];
 80a1f56:	4053      	eors	r3, r2
 80a1f58:	f89d 2020 	ldrb.w	r2, [sp, #32]
				result = PCD_CalculateCRC(buffer, 7, &buffer[7]);
 80a1f5c:	a907      	add	r1, sp, #28
				buffer[6] = buffer[2] ^ buffer[3] ^ buffer[4] ^ buffer[5];
 80a1f5e:	4053      	eors	r3, r2
 80a1f60:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
 80a1f64:	4053      	eors	r3, r2
 80a1f66:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
				result = PCD_CalculateCRC(buffer, 7, &buffer[7]);
 80a1f6a:	2207      	movs	r2, #7
 80a1f6c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80a1f70:	f7ff fd82 	bl	80a1a78 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
				if (result != STATUS_OK) {
 80a1f74:	2801      	cmp	r0, #1
				result = PCD_CalculateCRC(buffer, 7, &buffer[7]);
 80a1f76:	4681      	mov	r9, r0
				if (result != STATUS_OK) {
 80a1f78:	f040 80c5 	bne.w	80a2106 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x280>
				txLastBits		= 0; // 0 => All 8 bits are valid.
 80a1f7c:	2300      	movs	r3, #0
 80a1f7e:	f88d 301a 	strb.w	r3, [sp, #26]
				responseLength	= 3;
 80a1f82:	2303      	movs	r3, #3
				bufferUsed		= 9;
 80a1f84:	f04f 0909 	mov.w	r9, #9
				responseLength	= 3;
 80a1f88:	f88d 301b 	strb.w	r3, [sp, #27]
 80a1f8c:	9404      	str	r4, [sp, #16]
				responseBuffer	= &buffer[6];
 80a1f8e:	f10d 0b22 	add.w	fp, sp, #34	; 0x22
			rxAlign = txLastBits;											// Having a seperate variable is overkill. But it makes the next line easier to read.
 80a1f92:	f89d 301a 	ldrb.w	r3, [sp, #26]
			PCD_WriteRegister(BitFramingReg, (rxAlign << 4) + txLastBits);	// RxAlign = BitFramingReg[6..4]. TxLastBits = BitFramingReg[2..0]
 80a1f96:	211a      	movs	r1, #26
 80a1f98:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 80a1f9c:	4650      	mov	r0, sl
 80a1f9e:	b2d2      	uxtb	r2, r2
 80a1fa0:	9305      	str	r3, [sp, #20]
 80a1fa2:	f7ff fd04 	bl	80a19ae <_ZN7MFRC52217PCD_WriteRegisterEhh>
			result = PCD_TransceiveData(buffer, bufferUsed, responseBuffer, &responseLength, &txLastBits, rxAlign);			
 80a1fa6:	2200      	movs	r2, #0
 80a1fa8:	9b05      	ldr	r3, [sp, #20]
 80a1faa:	9203      	str	r2, [sp, #12]
 80a1fac:	9302      	str	r3, [sp, #8]
 80a1fae:	f10d 031a 	add.w	r3, sp, #26
 80a1fb2:	9301      	str	r3, [sp, #4]
 80a1fb4:	f10d 031b 	add.w	r3, sp, #27
 80a1fb8:	464a      	mov	r2, r9
 80a1fba:	9300      	str	r3, [sp, #0]
 80a1fbc:	4650      	mov	r0, sl
 80a1fbe:	465b      	mov	r3, fp
 80a1fc0:	a907      	add	r1, sp, #28
 80a1fc2:	f7ff ff05 	bl	80a1dd0 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
			if (result == STATUS_COLLISION) { // More than one PICC in the field => collision.
 80a1fc6:	2803      	cmp	r0, #3
			result = PCD_TransceiveData(buffer, bufferUsed, responseBuffer, &responseLength, &txLastBits, rxAlign);			
 80a1fc8:	4681      	mov	r9, r0
			if (result == STATUS_COLLISION) { // More than one PICC in the field => collision.
 80a1fca:	d14b      	bne.n	80a2064 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1de>
				result = PCD_ReadRegister(CollReg); // CollReg[7..0] bits are: ValuesAfterColl reserved CollPosNotValid CollPos[4:0]
 80a1fcc:	211c      	movs	r1, #28
 80a1fce:	4650      	mov	r0, sl
 80a1fd0:	f7ff fd1d 	bl	80a1a0e <_ZN7MFRC52216PCD_ReadRegisterEh>
				if (result & 0x20) { // CollPosNotValid
 80a1fd4:	0681      	lsls	r1, r0, #26
 80a1fd6:	f100 8096 	bmi.w	80a2106 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x280>
					collisionPos = 32;
 80a1fda:	f010 001f 	ands.w	r0, r0, #31
 80a1fde:	bf08      	it	eq
 80a1fe0:	2020      	moveq	r0, #32
				if (collisionPos <= currentLevelKnownBits) { // No progress - should not happen 
 80a1fe2:	42a0      	cmp	r0, r4
 80a1fe4:	f340 8084 	ble.w	80a20f0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x26a>
				count			= (currentLevelKnownBits - 1) % 8; // The bit to modify
 80a1fe8:	1e43      	subs	r3, r0, #1
				index			= 1 + (currentLevelKnownBits / 8) + (count ? 1 : 0); // First byte is index 0.
 80a1fea:	f003 0207 	and.w	r2, r3, #7
 80a1fee:	f013 0307 	ands.w	r3, r3, #7
 80a1ff2:	bf18      	it	ne
 80a1ff4:	2301      	movne	r3, #1
				currentLevelKnownBits = collisionPos;
 80a1ff6:	b244      	sxtb	r4, r0
				index			= 1 + (currentLevelKnownBits / 8) + (count ? 1 : 0); // First byte is index 0.
 80a1ff8:	08c0      	lsrs	r0, r0, #3
 80a1ffa:	3001      	adds	r0, #1
				buffer[index]	|= (1 << count); 
 80a1ffc:	4418      	add	r0, r3
 80a1ffe:	ab0a      	add	r3, sp, #40	; 0x28
 80a2000:	4418      	add	r0, r3
 80a2002:	2301      	movs	r3, #1
 80a2004:	fa03 f202 	lsl.w	r2, r3, r2
 80a2008:	f810 3c0c 	ldrb.w	r3, [r0, #-12]
 80a200c:	4313      	orrs	r3, r2
 80a200e:	f800 3c0c 	strb.w	r3, [r0, #-12]
		while ( ! selectDone) {
 80a2012:	e795      	b.n	80a1f40 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xba>
				buffer[0] = PICC_CMD_SEL_CL3;
 80a2014:	2397      	movs	r3, #151	; 0x97
				uidIndex = 6;
 80a2016:	2606      	movs	r6, #6
				buffer[0] = PICC_CMD_SEL_CL3;
 80a2018:	f88d 301c 	strb.w	r3, [sp, #28]
				useCascadeTag = false;						// Never used in CL3.
 80a201c:	4623      	mov	r3, r4
				break;
 80a201e:	e75a      	b.n	80a1ed6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x50>
				useCascadeTag = validBits && uid->size > 4;	// When we know that the UID has more than 4 bytes
 80a2020:	4643      	mov	r3, r8
 80a2022:	e749      	b.n	80a1eb8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x32>
				useCascadeTag = validBits && uid->size > 7;	// When we know that the UID has more than 7 bytes
 80a2024:	4643      	mov	r3, r8
 80a2026:	e756      	b.n	80a1ed6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x50>
		index = 2; // destination index in buffer[]
 80a2028:	2102      	movs	r1, #2
 80a202a:	e760      	b.n	80a1eee <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x68>
				bufferUsed		= index + (txLastBits ? 1 : 0);
 80a202c:	f014 0907 	ands.w	r9, r4, #7
 80a2030:	bf18      	it	ne
 80a2032:	f04f 0901 	movne.w	r9, #1
				count			= currentLevelKnownBits / 8;	// Number of whole bytes in the UID part.
 80a2036:	10e3      	asrs	r3, r4, #3
				index			= 2 + count;					// Number of whole bytes: SEL + NVB + UIDs
 80a2038:	3302      	adds	r3, #2
 80a203a:	b2db      	uxtb	r3, r3
				txLastBits		= currentLevelKnownBits % 8;
 80a203c:	f004 0207 	and.w	r2, r4, #7
 80a2040:	f88d 201a 	strb.w	r2, [sp, #26]
				buffer[1]		= (index << 4) + txLastBits;	// NVB - Number of Valid Bits
 80a2044:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 80a2048:	f88d 201d 	strb.w	r2, [sp, #29]
				responseBuffer	= &buffer[index];
 80a204c:	aa07      	add	r2, sp, #28
				bufferUsed		= index + (txLastBits ? 1 : 0);
 80a204e:	4499      	add	r9, r3
				responseBuffer	= &buffer[index];
 80a2050:	eb02 0b03 	add.w	fp, r2, r3
				responseLength	= sizeof(buffer) - index;
 80a2054:	f1c3 0309 	rsb	r3, r3, #9
				bufferUsed		= index + (txLastBits ? 1 : 0);
 80a2058:	fa5f f989 	uxtb.w	r9, r9
				responseLength	= sizeof(buffer) - index;
 80a205c:	f88d 301b 	strb.w	r3, [sp, #27]
 80a2060:	9404      	str	r4, [sp, #16]
 80a2062:	e796      	b.n	80a1f92 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x10c>
			else if (result != STATUS_OK) {
 80a2064:	2801      	cmp	r0, #1
 80a2066:	d14e      	bne.n	80a2106 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x280>
				if (currentLevelKnownBits >= 32) { // This was a SELECT.
 80a2068:	9b04      	ldr	r3, [sp, #16]
					currentLevelKnownBits = 32;
 80a206a:	2420      	movs	r4, #32
				if (currentLevelKnownBits >= 32) { // This was a SELECT.
 80a206c:	2b1f      	cmp	r3, #31
 80a206e:	f77f af69 	ble.w	80a1f44 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xbe>
		index			= (buffer[2] == PICC_CMD_CT) ? 3 : 2; // source index in buffer[]
 80a2072:	f89d 301e 	ldrb.w	r3, [sp, #30]
 80a2076:	2b88      	cmp	r3, #136	; 0x88
 80a2078:	d13d      	bne.n	80a20f6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x270>
 80a207a:	2303      	movs	r3, #3
		bytesToCopy		= (buffer[2] == PICC_CMD_CT) ? 3 : 4;
 80a207c:	461a      	mov	r2, r3
		for (count = 0; count < bytesToCopy; count++) {
 80a207e:	3601      	adds	r6, #1
 80a2080:	441a      	add	r2, r3
 80a2082:	443e      	add	r6, r7
 80a2084:	b2d2      	uxtb	r2, r2
			uid->uidByte[uidIndex + count] = buffer[index++];
 80a2086:	4619      	mov	r1, r3
 80a2088:	a80a      	add	r0, sp, #40	; 0x28
 80a208a:	3301      	adds	r3, #1
 80a208c:	4401      	add	r1, r0
 80a208e:	f811 1c0c 	ldrb.w	r1, [r1, #-12]
 80a2092:	b2db      	uxtb	r3, r3
		for (count = 0; count < bytesToCopy; count++) {
 80a2094:	4293      	cmp	r3, r2
			uid->uidByte[uidIndex + count] = buffer[index++];
 80a2096:	f806 1b01 	strb.w	r1, [r6], #1
		for (count = 0; count < bytesToCopy; count++) {
 80a209a:	d1f4      	bne.n	80a2086 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x200>
		if (responseLength != 3 || txLastBits != 0) {		// SAK must be exactly 24 bits (1 byte + CRC_A).
 80a209c:	f89d 601b 	ldrb.w	r6, [sp, #27]
 80a20a0:	2e03      	cmp	r6, #3
 80a20a2:	d137      	bne.n	80a2114 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28e>
 80a20a4:	f89d 401a 	ldrb.w	r4, [sp, #26]
 80a20a8:	bba4      	cbnz	r4, 80a2114 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x28e>
		result = PCD_CalculateCRC(responseBuffer, 1, &buffer[2]);
 80a20aa:	2201      	movs	r2, #1
 80a20ac:	4659      	mov	r1, fp
 80a20ae:	4650      	mov	r0, sl
 80a20b0:	f10d 031e 	add.w	r3, sp, #30
 80a20b4:	f7ff fce0 	bl	80a1a78 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
		if (result != STATUS_OK) {
 80a20b8:	2801      	cmp	r0, #1
		result = PCD_CalculateCRC(responseBuffer, 1, &buffer[2]);
 80a20ba:	4681      	mov	r9, r0
		if (result != STATUS_OK) {
 80a20bc:	d123      	bne.n	80a2106 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x280>
		if ((buffer[2] != responseBuffer[1]) || (buffer[3] != responseBuffer[2])) {
 80a20be:	f89d 201e 	ldrb.w	r2, [sp, #30]
 80a20c2:	f89b 3001 	ldrb.w	r3, [fp, #1]
 80a20c6:	429a      	cmp	r2, r3
 80a20c8:	d127      	bne.n	80a211a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x294>
 80a20ca:	f89d 201f 	ldrb.w	r2, [sp, #31]
 80a20ce:	f89b 3002 	ldrb.w	r3, [fp, #2]
 80a20d2:	429a      	cmp	r2, r3
 80a20d4:	d121      	bne.n	80a211a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x294>
		if (responseBuffer[0] & 0x04) { // Cascade bit set - UID not complete yes
 80a20d6:	f89b 3000 	ldrb.w	r3, [fp]
 80a20da:	075a      	lsls	r2, r3, #29
 80a20dc:	d50e      	bpl.n	80a20fc <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x276>
			cascadeLevel++;
 80a20de:	3501      	adds	r5, #1
 80a20e0:	b2ed      	uxtb	r5, r5
		switch (cascadeLevel) {
 80a20e2:	2d03      	cmp	r5, #3
 80a20e4:	d096      	beq.n	80a2014 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x18e>
 80a20e6:	2d04      	cmp	r5, #4
 80a20e8:	d002      	beq.n	80a20f0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x26a>
 80a20ea:	2d02      	cmp	r5, #2
 80a20ec:	f43f aee7 	beq.w	80a1ebe <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x38>
 80a20f0:	f04f 0906 	mov.w	r9, #6
 80a20f4:	e007      	b.n	80a2106 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x280>
		index			= (buffer[2] == PICC_CMD_CT) ? 3 : 2; // source index in buffer[]
 80a20f6:	2302      	movs	r3, #2
		bytesToCopy		= (buffer[2] == PICC_CMD_CT) ? 3 : 4;
 80a20f8:	2204      	movs	r2, #4
 80a20fa:	e7c0      	b.n	80a207e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1f8>
	uid->size = 3 * cascadeLevel + 1;
 80a20fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80a2100:	3501      	adds	r5, #1
			uid->sak = responseBuffer[0];
 80a2102:	72fb      	strb	r3, [r7, #11]
	uid->size = 3 * cascadeLevel + 1;
 80a2104:	703d      	strb	r5, [r7, #0]
} // End PICC_Select()
 80a2106:	4648      	mov	r0, r9
 80a2108:	b00b      	add	sp, #44	; 0x2c
 80a210a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return STATUS_INVALID;
 80a210e:	f04f 0907 	mov.w	r9, #7
 80a2112:	e7f8      	b.n	80a2106 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x280>
			return STATUS_ERROR;
 80a2114:	f04f 0902 	mov.w	r9, #2
 80a2118:	e7f5      	b.n	80a2106 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x280>
			return STATUS_CRC_WRONG;
 80a211a:	f04f 0908 	mov.w	r9, #8
 80a211e:	e7f2      	b.n	80a2106 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x280>

080a2120 <_ZN7MFRC52219PICC_ReadCardSerialEv>:
 * Remember to call PICC_IsNewCardPresent(), PICC_RequestA() or PICC_WakeupA() first.
 * The read UID is available in the class variable uid.
 * 
 * @return bool
 */
bool MFRC522::PICC_ReadCardSerial() {
 80a2120:	b508      	push	{r3, lr}
 80a2122:	4601      	mov	r1, r0
	byte result = PICC_Select(&uid);
 80a2124:	2200      	movs	r2, #0
 80a2126:	f7ff feae 	bl	80a1e86 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh>
	return (result == STATUS_OK);
} // End PICC_ReadCardSerial()
 80a212a:	1e43      	subs	r3, r0, #1
 80a212c:	4258      	negs	r0, r3
 80a212e:	4158      	adcs	r0, r3
 80a2130:	bd08      	pop	{r3, pc}

080a2132 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi>:

    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(char* domain, uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
 80a2132:	b538      	push	{r3, r4, r5, lr}
 80a2134:	461d      	mov	r5, r3
    this->callback = callback;
 80a2136:	9b05      	ldr	r3, [sp, #20]
void MQTT::initialize(char* domain, uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
 80a2138:	4604      	mov	r4, r0
    this->callback = callback;
 80a213a:	6303      	str	r3, [r0, #48]	; 0x30
    this->qoscallback = NULL;
 80a213c:	2300      	movs	r3, #0
 80a213e:	6343      	str	r3, [r0, #52]	; 0x34
    if (ip != NULL)
 80a2140:	b102      	cbz	r2, 80a2144 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x12>
        this->ip = ip;
 80a2142:	6482      	str	r2, [r0, #72]	; 0x48
    if (domain != NULL)
 80a2144:	b119      	cbz	r1, 80a214e <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x1c>
        this->domain = domain;
 80a2146:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80a214a:	f002 f889 	bl	80a4260 <_ZN6StringaSEPKc>
    this->port = port;
    this->keepalive = keepalive;
 80a214e:	9b04      	ldr	r3, [sp, #16]

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
    if (buffer != NULL)
 80a2150:	69e0      	ldr	r0, [r4, #28]
    this->keepalive = keepalive;
 80a2152:	6523      	str	r3, [r4, #80]	; 0x50
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
 80a2154:	9b06      	ldr	r3, [sp, #24]
    this->port = port;
 80a2156:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
 80a215a:	2bff      	cmp	r3, #255	; 0xff
 80a215c:	bfb8      	it	lt
 80a215e:	23ff      	movlt	r3, #255	; 0xff
 80a2160:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    if (buffer != NULL)
 80a2164:	b108      	cbz	r0, 80a216a <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x38>
      delete[] buffer;
 80a2166:	f7fd ff9e 	bl	80a00a6 <_ZdaPv>
    buffer = new uint8_t[this->maxpacketsize];
 80a216a:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
 80a216e:	f7fd ff96 	bl	80a009e <_Znaj>
 80a2172:	61e0      	str	r0, [r4, #28]
}
 80a2174:	bd38      	pop	{r3, r4, r5, pc}
	...

080a2178 <_ZN4MQTTC1EPctiPFvS0_PhjEi>:
MQTT::MQTT(char* domain, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
 80a2178:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80a217c:	4604      	mov	r4, r0
 80a217e:	2600      	movs	r6, #0
 80a2180:	4617      	mov	r7, r2
 80a2182:	4698      	mov	r8, r3
 80a2184:	460d      	mov	r5, r1
 80a2186:	f001 ff27 	bl	80a3fd8 <_ZN9TCPClientC1Ev>
 80a218a:	490b      	ldr	r1, [pc, #44]	; (80a21b8 <_ZN4MQTTC1EPctiPFvS0_PhjEi+0x40>)
 80a218c:	61e6      	str	r6, [r4, #28]
 80a218e:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80a2192:	f002 f813 	bl	80a41bc <_ZN6StringC1EPKc>
    this->initialize(domain, NULL, port, keepalive, callback, maxpacketsize);
 80a2196:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80a2198:	4620      	mov	r0, r4
 80a219a:	9302      	str	r3, [sp, #8]
 80a219c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a219e:	4632      	mov	r2, r6
 80a21a0:	e9cd 8300 	strd	r8, r3, [sp]
 80a21a4:	4629      	mov	r1, r5
 80a21a6:	463b      	mov	r3, r7
MQTT::MQTT(char* domain, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
 80a21a8:	64a6      	str	r6, [r4, #72]	; 0x48
    this->initialize(domain, NULL, port, keepalive, callback, maxpacketsize);
 80a21aa:	f7ff ffc2 	bl	80a2132 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi>
}
 80a21ae:	4620      	mov	r0, r4
 80a21b0:	b004      	add	sp, #16
 80a21b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a21b6:	bf00      	nop
 80a21b8:	080aa2c3 	.word	0x080aa2c3

080a21bc <_ZN4MQTT8readByteEv>:
        _client.stop();
    }
    return false;
}

uint8_t MQTT::readByte() {
 80a21bc:	b510      	push	{r4, lr}
 80a21be:	4604      	mov	r4, r0
    while(!_client.available()) {}
 80a21c0:	4620      	mov	r0, r4
 80a21c2:	f001 fe1f 	bl	80a3e04 <_ZN9TCPClient9availableEv>
 80a21c6:	2800      	cmp	r0, #0
 80a21c8:	d0fa      	beq.n	80a21c0 <_ZN4MQTT8readByteEv+0x4>
    return _client.read();
 80a21ca:	4620      	mov	r0, r4
 80a21cc:	f001 fd5d 	bl	80a3c8a <_ZN9TCPClient4readEv>
}
 80a21d0:	b2c0      	uxtb	r0, r0
 80a21d2:	bd10      	pop	{r4, pc}

080a21d4 <_ZN4MQTT10readPacketEPh>:

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
 80a21d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a21d8:	4605      	mov	r5, r0
    uint16_t len = 0;
    buffer[len++] = readByte();
 80a21da:	69c4      	ldr	r4, [r0, #28]
uint16_t MQTT::readPacket(uint8_t* lengthLength) {
 80a21dc:	4689      	mov	r9, r1
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
    uint32_t multiplier = 1;
 80a21de:	2701      	movs	r7, #1
    buffer[len++] = readByte();
 80a21e0:	f7ff ffec 	bl	80a21bc <_ZN4MQTT8readByteEv>
    uint16_t length = 0;
 80a21e4:	f04f 0800 	mov.w	r8, #0
    buffer[len++] = readByte();
 80a21e8:	7020      	strb	r0, [r4, #0]
 80a21ea:	463c      	mov	r4, r7
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
 80a21ec:	69eb      	ldr	r3, [r5, #28]
 80a21ee:	f893 a000 	ldrb.w	sl, [r3]
 80a21f2:	f00a 0af0 	and.w	sl, sl, #240	; 0xf0
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
 80a21f6:	4628      	mov	r0, r5
 80a21f8:	f7ff ffe0 	bl	80a21bc <_ZN4MQTT8readByteEv>
        buffer[len++] = digit;
 80a21fc:	4626      	mov	r6, r4
 80a21fe:	69eb      	ldr	r3, [r5, #28]
 80a2200:	3401      	adds	r4, #1
 80a2202:	5598      	strb	r0, [r3, r6]
        length += (digit & 127) * multiplier;
 80a2204:	f000 037f 	and.w	r3, r0, #127	; 0x7f
 80a2208:	fb03 8807 	mla	r8, r3, r7, r8
        multiplier *= 128;
    } while ((digit & 128) != 0);
 80a220c:	0603      	lsls	r3, r0, #24
        buffer[len++] = digit;
 80a220e:	b2a4      	uxth	r4, r4
        length += (digit & 127) * multiplier;
 80a2210:	fa1f f888 	uxth.w	r8, r8
        multiplier *= 128;
 80a2214:	ea4f 17c7 	mov.w	r7, r7, lsl #7
    } while ((digit & 128) != 0);
 80a2218:	d4ed      	bmi.n	80a21f6 <_ZN4MQTT10readPacketEPh+0x22>
    *lengthLength = len-1;
 80a221a:	1e63      	subs	r3, r4, #1

    if (isPublish) {
 80a221c:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
    *lengthLength = len-1;
 80a2220:	f889 3000 	strb.w	r3, [r9]
    if (isPublish) {
 80a2224:	d124      	bne.n	80a2270 <_ZN4MQTT10readPacketEPh+0x9c>
        // Read in topic length to calculate bytes to skip over for Stream writing
        buffer[len++] = readByte();
 80a2226:	4628      	mov	r0, r5
 80a2228:	69ef      	ldr	r7, [r5, #28]
 80a222a:	f7ff ffc7 	bl	80a21bc <_ZN4MQTT8readByteEv>
 80a222e:	5538      	strb	r0, [r7, r4]
        buffer[len++] = readByte();
 80a2230:	4628      	mov	r0, r5
 80a2232:	69ef      	ldr	r7, [r5, #28]
 80a2234:	f7ff ffc2 	bl	80a21bc <_ZN4MQTT8readByteEv>
 80a2238:	1cf4      	adds	r4, r6, #3
        buffer[len++] = readByte();
 80a223a:	3602      	adds	r6, #2
        buffer[len++] = readByte();
 80a223c:	b2b6      	uxth	r6, r6
 80a223e:	55b8      	strb	r0, [r7, r6]
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
        start = 2;
 80a2240:	2602      	movs	r6, #2
        buffer[len++] = readByte();
 80a2242:	b2a4      	uxth	r4, r4
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
 80a2244:	b2b6      	uxth	r6, r6
 80a2246:	46b1      	mov	r9, r6
 80a2248:	4627      	mov	r7, r4
 80a224a:	45c1      	cmp	r9, r8
 80a224c:	d212      	bcs.n	80a2274 <_ZN4MQTT10readPacketEPh+0xa0>
        digit = readByte();
 80a224e:	4628      	mov	r0, r5
 80a2250:	f7ff ffb4 	bl	80a21bc <_ZN4MQTT8readByteEv>
        if (len < this->maxpacketsize) {
 80a2254:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
    for (uint16_t i = start;i<length;i++) {
 80a2258:	f109 0901 	add.w	r9, r9, #1
        if (len < this->maxpacketsize) {
 80a225c:	42bb      	cmp	r3, r7
            buffer[len] = digit;
 80a225e:	bf88      	it	hi
 80a2260:	69eb      	ldrhi	r3, [r5, #28]
    for (uint16_t i = start;i<length;i++) {
 80a2262:	fa1f f989 	uxth.w	r9, r9
            buffer[len] = digit;
 80a2266:	bf88      	it	hi
 80a2268:	55d8      	strbhi	r0, [r3, r7]
        }
        len++;
 80a226a:	3701      	adds	r7, #1
 80a226c:	b2bf      	uxth	r7, r7
    for (uint16_t i = start;i<length;i++) {
 80a226e:	e7ec      	b.n	80a224a <_ZN4MQTT10readPacketEPh+0x76>
    uint8_t start = 0;
 80a2270:	2600      	movs	r6, #0
 80a2272:	e7e7      	b.n	80a2244 <_ZN4MQTT10readPacketEPh+0x70>
 80a2274:	eba8 0006 	sub.w	r0, r8, r6
 80a2278:	45b0      	cmp	r8, r6
 80a227a:	bf2c      	ite	cs
 80a227c:	4606      	movcs	r6, r0
 80a227e:	2600      	movcc	r6, #0
    }

    if (len > this->maxpacketsize) {
 80a2280:	f8b5 0054 	ldrh.w	r0, [r5, #84]	; 0x54
 80a2284:	4434      	add	r4, r6
 80a2286:	b2a4      	uxth	r4, r4
        len = 0; // This will cause the packet to be ignored.
    }

    return len;
}
 80a2288:	42a0      	cmp	r0, r4
 80a228a:	bf2c      	ite	cs
 80a228c:	4620      	movcs	r0, r4
 80a228e:	2000      	movcc	r0, #0
 80a2290:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080a2294 <_ZN4MQTT5writeEhPht>:
        return _client.write(buffer, length);
    }
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
 80a2294:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80a2296:	468c      	mov	ip, r1
 80a2298:	461e      	mov	r6, r3
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
 80a229a:	461d      	mov	r5, r3
bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
 80a229c:	4607      	mov	r7, r0
    uint8_t llen = 0;
 80a229e:	2300      	movs	r3, #0
    do {
        digit = len % 128;
 80a22a0:	46ae      	mov	lr, r5
 80a22a2:	f005 017f 	and.w	r1, r5, #127	; 0x7f
        len = len / 128;
        if (len > 0) {
 80a22a6:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
 80a22aa:	a802      	add	r0, sp, #8
            digit |= 0x80;
 80a22ac:	bf88      	it	hi
 80a22ae:	f041 0180 	orrhi.w	r1, r1, #128	; 0x80
        lenBuf[pos++] = digit;
 80a22b2:	1c5c      	adds	r4, r3, #1
        llen++;
    } while(len > 0);
 80a22b4:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        lenBuf[pos++] = digit;
 80a22b8:	4403      	add	r3, r0
        len = len / 128;
 80a22ba:	ea4f 15d5 	mov.w	r5, r5, lsr #7
        lenBuf[pos++] = digit;
 80a22be:	b2e4      	uxtb	r4, r4
 80a22c0:	f803 1c04 	strb.w	r1, [r3, #-4]
    } while(len > 0);
 80a22c4:	d810      	bhi.n	80a22e8 <_ZN4MQTT5writeEhPht+0x54>

    buf[4-llen] = header;
 80a22c6:	f1c4 0304 	rsb	r3, r4, #4
 80a22ca:	18d1      	adds	r1, r2, r3
 80a22cc:	f802 c003 	strb.w	ip, [r2, r3]
    for (int i = 0; i < llen; i++) {
 80a22d0:	f1c4 0305 	rsb	r3, r4, #5
 80a22d4:	4413      	add	r3, r2
 80a22d6:	a801      	add	r0, sp, #4
 80a22d8:	3205      	adds	r2, #5
 80a22da:	4293      	cmp	r3, r2
 80a22dc:	d006      	beq.n	80a22ec <_ZN4MQTT5writeEhPht+0x58>
        buf[5-llen+i] = lenBuf[i];
 80a22de:	f810 5b01 	ldrb.w	r5, [r0], #1
 80a22e2:	f803 5b01 	strb.w	r5, [r3], #1
    for (int i = 0; i < llen; i++) {
 80a22e6:	e7f8      	b.n	80a22da <_ZN4MQTT5writeEhPht+0x46>
        lenBuf[pos++] = digit;
 80a22e8:	4623      	mov	r3, r4
 80a22ea:	e7d9      	b.n	80a22a0 <_ZN4MQTT5writeEhPht+0xc>
    }
    rc = _client.write(buf+(4-llen), length+1+llen);
 80a22ec:	1c72      	adds	r2, r6, #1
 80a22ee:	4422      	add	r2, r4
 80a22f0:	4638      	mov	r0, r7
 80a22f2:	f001 fc4d 	bl	80a3b90 <_ZN9TCPClient5writeEPKhj>
 80a22f6:	4605      	mov	r5, r0
 80a22f8:	f001 f8ea 	bl	80a34d0 <HAL_Timer_Get_Milli_Seconds>

    lastOutActivity = millis();
    return (rc == 1+llen+length);
 80a22fc:	3401      	adds	r4, #1
    lastOutActivity = millis();
 80a22fe:	6278      	str	r0, [r7, #36]	; 0x24
    return (rc == 1+llen+length);
 80a2300:	4434      	add	r4, r6
 80a2302:	b2a8      	uxth	r0, r5
}
 80a2304:	1a23      	subs	r3, r4, r0
 80a2306:	4258      	negs	r0, r3
 80a2308:	4158      	adcs	r0, r3
 80a230a:	b003      	add	sp, #12
 80a230c:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a230e <_ZN4MQTT10disconnectEv>:
    }
    return false;
}

void MQTT::disconnect() {
    buffer[0] = MQTTDISCONNECT;
 80a230e:	22e0      	movs	r2, #224	; 0xe0
void MQTT::disconnect() {
 80a2310:	b510      	push	{r4, lr}
    buffer[0] = MQTTDISCONNECT;
 80a2312:	69c3      	ldr	r3, [r0, #28]
void MQTT::disconnect() {
 80a2314:	4604      	mov	r4, r0
    buffer[0] = MQTTDISCONNECT;
 80a2316:	701a      	strb	r2, [r3, #0]
    buffer[1] = 0;
 80a2318:	2200      	movs	r2, #0
 80a231a:	69c3      	ldr	r3, [r0, #28]
 80a231c:	705a      	strb	r2, [r3, #1]
    _client.write(buffer,2);
 80a231e:	69c1      	ldr	r1, [r0, #28]
 80a2320:	2202      	movs	r2, #2
 80a2322:	f001 fc35 	bl	80a3b90 <_ZN9TCPClient5writeEPKhj>
    _client.stop();
 80a2326:	4620      	mov	r0, r4
 80a2328:	f001 fda6 	bl	80a3e78 <_ZN9TCPClient4stopEv>
 80a232c:	f001 f8d0 	bl	80a34d0 <HAL_Timer_Get_Milli_Seconds>
    lastInActivity = lastOutActivity = millis();
 80a2330:	e9c4 0009 	strd	r0, r0, [r4, #36]	; 0x24
}
 80a2334:	bd10      	pop	{r4, pc}

080a2336 <_ZN4MQTT11writeStringEPKcPht>:

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
 80a2336:	3302      	adds	r3, #2
uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
 80a2338:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a233a:	4604      	mov	r4, r0
    pos += 2;
 80a233c:	b298      	uxth	r0, r3
 80a233e:	2300      	movs	r3, #0
    while (*idp && pos < this->maxpacketsize) {
 80a2340:	5ccd      	ldrb	r5, [r1, r3]
 80a2342:	b14d      	cbz	r5, 80a2358 <_ZN4MQTT11writeStringEPKcPht+0x22>
 80a2344:	f8b4 6054 	ldrh.w	r6, [r4, #84]	; 0x54
 80a2348:	1c5f      	adds	r7, r3, #1
 80a234a:	4286      	cmp	r6, r0
 80a234c:	d904      	bls.n	80a2358 <_ZN4MQTT11writeStringEPKcPht+0x22>
        buf[pos++] = *idp++;
 80a234e:	1c46      	adds	r6, r0, #1
 80a2350:	5415      	strb	r5, [r2, r0]
    while (*idp && pos < this->maxpacketsize) {
 80a2352:	463b      	mov	r3, r7
        buf[pos++] = *idp++;
 80a2354:	b2b0      	uxth	r0, r6
    while (*idp && pos < this->maxpacketsize) {
 80a2356:	e7f3      	b.n	80a2340 <_ZN4MQTT11writeStringEPKcPht+0xa>
        i++;
    }
    buf[pos-i-2] = (i >> 8);
 80a2358:	b299      	uxth	r1, r3
 80a235a:	1a44      	subs	r4, r0, r1
 80a235c:	4422      	add	r2, r4
 80a235e:	1209      	asrs	r1, r1, #8
 80a2360:	f802 1c02 	strb.w	r1, [r2, #-2]
    buf[pos-i-1] = (i & 0xFF);
 80a2364:	f802 3c01 	strb.w	r3, [r2, #-1]
    return pos;
}
 80a2368:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a236a <_ZN4MQTT11isConnectedEv>:


bool MQTT::isConnected() {
 80a236a:	b538      	push	{r3, r4, r5, lr}
 80a236c:	4604      	mov	r4, r0
    bool rc = (int)_client.connected();
 80a236e:	f001 fdda 	bl	80a3f26 <_ZN9TCPClient9connectedEv>
 80a2372:	2800      	cmp	r0, #0
 80a2374:	bf14      	ite	ne
 80a2376:	2501      	movne	r5, #1
 80a2378:	2500      	moveq	r5, #0
    if (!rc) _client.stop();
 80a237a:	d102      	bne.n	80a2382 <_ZN4MQTT11isConnectedEv+0x18>
 80a237c:	4620      	mov	r0, r4
 80a237e:	f001 fd7b 	bl	80a3e78 <_ZN9TCPClient4stopEv>
    return rc;
}
 80a2382:	4628      	mov	r0, r5
 80a2384:	bd38      	pop	{r3, r4, r5, pc}
	...

080a2388 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>:
bool MQTT::connect(const char *id, const char *user, const char *pass, const char* willTopic, EMQTT_QOS willQos, uint8_t willRetain, const char* willMessage, bool cleanSession, MQTT_VERSION version) {
 80a2388:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a238c:	b086      	sub	sp, #24
 80a238e:	4604      	mov	r4, r0
 80a2390:	4689      	mov	r9, r1
 80a2392:	4617      	mov	r7, r2
 80a2394:	461e      	mov	r6, r3
 80a2396:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 80a239a:	f89d a048 	ldrb.w	sl, [sp, #72]	; 0x48
    if (!isConnected()) {
 80a239e:	f7ff ffe4 	bl	80a236a <_ZN4MQTT11isConnectedEv>
 80a23a2:	4605      	mov	r5, r0
 80a23a4:	2800      	cmp	r0, #0
 80a23a6:	f040 80c3 	bne.w	80a2530 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1a8>
        if (ip == NULL)
 80a23aa:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80a23ac:	2900      	cmp	r1, #0
 80a23ae:	f040 8087 	bne.w	80a24c0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x138>
            result = _client.connect(this->domain.c_str(), this->port);
 80a23b2:	4603      	mov	r3, r0
 80a23b4:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
 80a23b8:	4620      	mov	r0, r4
 80a23ba:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80a23bc:	f001 fe24 	bl	80a4008 <_ZN9TCPClient7connectEPKctm>
        if (result) {
 80a23c0:	2800      	cmp	r0, #0
 80a23c2:	d079      	beq.n	80a24b8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x130>
            nextMsgId = 1;
 80a23c4:	2301      	movs	r3, #1
 80a23c6:	8423      	strh	r3, [r4, #32]
            if (version == MQTT_V311) {
 80a23c8:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 80a23cc:	69e2      	ldr	r2, [r4, #28]
 80a23ce:	2b04      	cmp	r3, #4
 80a23d0:	f040 8081 	bne.w	80a24d6 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x14e>
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
 80a23d4:	4b57      	ldr	r3, [pc, #348]	; (80a2534 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1ac>)
 80a23d6:	6818      	ldr	r0, [r3, #0]
 80a23d8:	8899      	ldrh	r1, [r3, #4]
 80a23da:	799b      	ldrb	r3, [r3, #6]
 80a23dc:	f8ad 1004 	strh.w	r1, [sp, #4]
 80a23e0:	f88d 3006 	strb.w	r3, [sp, #6]
 80a23e4:	9000      	str	r0, [sp, #0]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
 80a23e6:	f8c2 0005 	str.w	r0, [r2, #5]
 80a23ea:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a23ee:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 80a23f2:	72d3      	strb	r3, [r2, #11]
                length+=sizeof(MQTT_HEADER_V311);
 80a23f4:	230c      	movs	r3, #12
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
 80a23f6:	f8a2 1009 	strh.w	r1, [r2, #9]
            if (willTopic) {
 80a23fa:	f1b8 0f00 	cmp.w	r8, #0
 80a23fe:	d07e      	beq.n	80a24fe <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x176>
                v = 0x06|(willQos<<3)|(willRetain<<5);
 80a2400:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
 80a2404:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 80a2408:	0140      	lsls	r0, r0, #5
 80a240a:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 80a240e:	f040 0006 	orr.w	r0, r0, #6
 80a2412:	b2c0      	uxtb	r0, r0
            if (!cleanSession) {
 80a2414:	f1ba 0f00 	cmp.w	sl, #0
 80a2418:	d101      	bne.n	80a241e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x96>
              v = v&0xfd;
 80a241a:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
            if(user != NULL) {
 80a241e:	b11f      	cbz	r7, 80a2428 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xa0>
                if(pass != NULL) {
 80a2420:	2e00      	cmp	r6, #0
 80a2422:	d16e      	bne.n	80a2502 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x17a>
                v = v|0x80;
 80a2424:	f040 0080 	orr.w	r0, r0, #128	; 0x80
            buffer[length++] = v;
 80a2428:	69e2      	ldr	r2, [r4, #28]
 80a242a:	54d0      	strb	r0, [r2, r3]
            buffer[length++] = ((this->keepalive) >> 8);
 80a242c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80a242e:	69e1      	ldr	r1, [r4, #28]
 80a2430:	1c58      	adds	r0, r3, #1
 80a2432:	1212      	asrs	r2, r2, #8
 80a2434:	540a      	strb	r2, [r1, r0]
            buffer[length++] = ((this->keepalive) & 0xFF);
 80a2436:	69e1      	ldr	r1, [r4, #28]
 80a2438:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80a243a:	1c9a      	adds	r2, r3, #2
 80a243c:	5488      	strb	r0, [r1, r2]
            length = writeString(id, buffer, length);
 80a243e:	3303      	adds	r3, #3
 80a2440:	4649      	mov	r1, r9
 80a2442:	4620      	mov	r0, r4
 80a2444:	69e2      	ldr	r2, [r4, #28]
 80a2446:	f7ff ff76 	bl	80a2336 <_ZN4MQTT11writeStringEPKcPht>
 80a244a:	4603      	mov	r3, r0
            if (willTopic) {
 80a244c:	f1b8 0f00 	cmp.w	r8, #0
 80a2450:	d00b      	beq.n	80a246a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xe2>
                length = writeString(willTopic, buffer, length);
 80a2452:	4641      	mov	r1, r8
 80a2454:	69e2      	ldr	r2, [r4, #28]
 80a2456:	4620      	mov	r0, r4
 80a2458:	f7ff ff6d 	bl	80a2336 <_ZN4MQTT11writeStringEPKcPht>
                length = writeString(willMessage, buffer, length);
 80a245c:	69e2      	ldr	r2, [r4, #28]
                length = writeString(willTopic, buffer, length);
 80a245e:	4603      	mov	r3, r0
                length = writeString(willMessage, buffer, length);
 80a2460:	9911      	ldr	r1, [sp, #68]	; 0x44
 80a2462:	4620      	mov	r0, r4
 80a2464:	f7ff ff67 	bl	80a2336 <_ZN4MQTT11writeStringEPKcPht>
 80a2468:	4603      	mov	r3, r0
            if(user != NULL) {
 80a246a:	b167      	cbz	r7, 80a2486 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xfe>
                length = writeString(user,buffer,length);
 80a246c:	4639      	mov	r1, r7
 80a246e:	4620      	mov	r0, r4
 80a2470:	69e2      	ldr	r2, [r4, #28]
 80a2472:	f7ff ff60 	bl	80a2336 <_ZN4MQTT11writeStringEPKcPht>
 80a2476:	4603      	mov	r3, r0
                if(pass != NULL) {
 80a2478:	b12e      	cbz	r6, 80a2486 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xfe>
                    length = writeString(pass,buffer,length);
 80a247a:	4631      	mov	r1, r6
 80a247c:	4620      	mov	r0, r4
 80a247e:	69e2      	ldr	r2, [r4, #28]
 80a2480:	f7ff ff59 	bl	80a2336 <_ZN4MQTT11writeStringEPKcPht>
 80a2484:	4603      	mov	r3, r0
            write(MQTTCONNECT, buffer, length-5);
 80a2486:	3b05      	subs	r3, #5
 80a2488:	2110      	movs	r1, #16
 80a248a:	69e2      	ldr	r2, [r4, #28]
 80a248c:	b29b      	uxth	r3, r3
 80a248e:	4620      	mov	r0, r4
 80a2490:	f7ff ff00 	bl	80a2294 <_ZN4MQTT5writeEhPht>
 80a2494:	f001 f81c 	bl	80a34d0 <HAL_Timer_Get_Milli_Seconds>
                if (t-lastInActivity > this->keepalive*1000UL) {
 80a2498:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
            lastInActivity = lastOutActivity = millis();
 80a249c:	e9c4 0009 	strd	r0, r0, [r4, #36]	; 0x24
            while (!_client.available()) {
 80a24a0:	4620      	mov	r0, r4
 80a24a2:	f001 fcaf 	bl	80a3e04 <_ZN9TCPClient9availableEv>
 80a24a6:	bb78      	cbnz	r0, 80a2508 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x180>
 80a24a8:	f001 f812 	bl	80a34d0 <HAL_Timer_Get_Milli_Seconds>
                if (t-lastInActivity > this->keepalive*1000UL) {
 80a24ac:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80a24ae:	1ac0      	subs	r0, r0, r3
 80a24b0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80a24b2:	4373      	muls	r3, r6
 80a24b4:	4298      	cmp	r0, r3
 80a24b6:	d9f3      	bls.n	80a24a0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x118>
        _client.stop();
 80a24b8:	4620      	mov	r0, r4
 80a24ba:	f001 fcdd 	bl	80a3e78 <_ZN9TCPClient4stopEv>
 80a24be:	e033      	b.n	80a2528 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1a0>
            result = _client.connect(this->ip, this->port);
 80a24c0:	4668      	mov	r0, sp
 80a24c2:	f002 fbd9 	bl	80a4c78 <_ZN9IPAddressC1EPKh>
 80a24c6:	462b      	mov	r3, r5
 80a24c8:	4669      	mov	r1, sp
 80a24ca:	4620      	mov	r0, r4
 80a24cc:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
 80a24d0:	f001 fc28 	bl	80a3d24 <_ZN9TCPClient7connectE9IPAddresstm>
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a24d4:	e774      	b.n	80a23c0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x38>
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
 80a24d6:	46ec      	mov	ip, sp
 80a24d8:	4b17      	ldr	r3, [pc, #92]	; (80a2538 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1b0>)
 80a24da:	6818      	ldr	r0, [r3, #0]
 80a24dc:	6859      	ldr	r1, [r3, #4]
 80a24de:	7a1b      	ldrb	r3, [r3, #8]
 80a24e0:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 80a24e4:	f88c 3000 	strb.w	r3, [ip]
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
 80a24e8:	466b      	mov	r3, sp
 80a24ea:	cb03      	ldmia	r3!, {r0, r1}
 80a24ec:	f8c2 0005 	str.w	r0, [r2, #5]
 80a24f0:	f8c2 1009 	str.w	r1, [r2, #9]
 80a24f4:	f89c 3000 	ldrb.w	r3, [ip]
 80a24f8:	7353      	strb	r3, [r2, #13]
                length+=sizeof(MQTT_HEADER_V31);
 80a24fa:	230e      	movs	r3, #14
 80a24fc:	e77d      	b.n	80a23fa <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x72>
                v = 0x02;
 80a24fe:	2002      	movs	r0, #2
 80a2500:	e788      	b.n	80a2414 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x8c>
                    v = v|(0x80>>1);
 80a2502:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
 80a2506:	e78f      	b.n	80a2428 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xa0>
            uint16_t len = readPacket(&llen);
 80a2508:	4669      	mov	r1, sp
 80a250a:	4620      	mov	r0, r4
 80a250c:	f7ff fe62 	bl	80a21d4 <_ZN4MQTT10readPacketEPh>
            if (len == 4) {
 80a2510:	2804      	cmp	r0, #4
 80a2512:	d1d1      	bne.n	80a24b8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x130>
                if (buffer[3] == CONN_ACCEPT) {
 80a2514:	69e3      	ldr	r3, [r4, #28]
 80a2516:	78de      	ldrb	r6, [r3, #3]
 80a2518:	2e00      	cmp	r6, #0
 80a251a:	d1cd      	bne.n	80a24b8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x130>
 80a251c:	f000 ffd8 	bl	80a34d0 <HAL_Timer_Get_Milli_Seconds>
                    return true;
 80a2520:	2501      	movs	r5, #1
                    lastInActivity = millis();
 80a2522:	62a0      	str	r0, [r4, #40]	; 0x28
                    pingOutstanding = false;
 80a2524:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
}
 80a2528:	4628      	mov	r0, r5
 80a252a:	b006      	add	sp, #24
 80a252c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return false;
 80a2530:	2500      	movs	r5, #0
 80a2532:	e7f9      	b.n	80a2528 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1a0>
 80a2534:	080aa3c0 	.word	0x080aa3c0
 80a2538:	080aa3c7 	.word	0x080aa3c7

080a253c <_ZN4MQTT7connectEPKc>:
bool MQTT::connect(const char *id) {
 80a253c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    return connect(id, NULL, NULL, 0, QOS0, 0, 0, true);
 80a253e:	2301      	movs	r3, #1
 80a2540:	2204      	movs	r2, #4
 80a2542:	e9cd 3204 	strd	r3, r2, [sp, #16]
 80a2546:	2300      	movs	r3, #0
 80a2548:	461a      	mov	r2, r3
 80a254a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80a254e:	e9cd 3300 	strd	r3, r3, [sp]
 80a2552:	f7ff ff19 	bl	80a2388 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>
}
 80a2556:	b007      	add	sp, #28
 80a2558:	f85d fb04 	ldr.w	pc, [sp], #4

080a255c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
 80a255c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a2560:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 80a2564:	4604      	mov	r4, r0
 80a2566:	468b      	mov	fp, r1
 80a2568:	4616      	mov	r6, r2
 80a256a:	461f      	mov	r7, r3
 80a256c:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
 80a2570:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
 80a2574:	f89d 9030 	ldrb.w	r9, [sp, #48]	; 0x30
    if (isConnected()) {
 80a2578:	f7ff fef7 	bl	80a236a <_ZN4MQTT11isConnectedEv>
 80a257c:	2800      	cmp	r0, #0
 80a257e:	d050      	beq.n	80a2622 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xc6>
        memset(buffer, 0, this->maxpacketsize);
 80a2580:	2100      	movs	r1, #0
 80a2582:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54
 80a2586:	69e0      	ldr	r0, [r4, #28]
 80a2588:	f004 fb8e 	bl	80a6ca8 <memset>
        length = writeString(topic, buffer, length);
 80a258c:	2305      	movs	r3, #5
 80a258e:	4659      	mov	r1, fp
 80a2590:	4620      	mov	r0, r4
 80a2592:	69e2      	ldr	r2, [r4, #28]
 80a2594:	f7ff fecf 	bl	80a2336 <_ZN4MQTT11writeStringEPKcPht>
        if (qos == QOS2 || qos == QOS1) {
 80a2598:	1e6b      	subs	r3, r5, #1
 80a259a:	2b01      	cmp	r3, #1
 80a259c:	d815      	bhi.n	80a25ca <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x6e>
            nextMsgId += 1;
 80a259e:	8c23      	ldrh	r3, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
 80a25a0:	69e2      	ldr	r2, [r4, #28]
            nextMsgId += 1;
 80a25a2:	3301      	adds	r3, #1
 80a25a4:	b29b      	uxth	r3, r3
 80a25a6:	8423      	strh	r3, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
 80a25a8:	121b      	asrs	r3, r3, #8
 80a25aa:	5413      	strb	r3, [r2, r0]
 80a25ac:	1c41      	adds	r1, r0, #1
            buffer[length++] = (nextMsgId & 0xFF);
 80a25ae:	69e3      	ldr	r3, [r4, #28]
 80a25b0:	8c22      	ldrh	r2, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
 80a25b2:	b289      	uxth	r1, r1
            buffer[length++] = (nextMsgId & 0xFF);
 80a25b4:	3002      	adds	r0, #2
 80a25b6:	b280      	uxth	r0, r0
 80a25b8:	545a      	strb	r2, [r3, r1]
            if (messageid != NULL)
 80a25ba:	f1b8 0f00 	cmp.w	r8, #0
 80a25be:	d004      	beq.n	80a25ca <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x6e>
                *messageid = nextMsgId++;
 80a25c0:	8c23      	ldrh	r3, [r4, #32]
 80a25c2:	1c5a      	adds	r2, r3, #1
 80a25c4:	8422      	strh	r2, [r4, #32]
 80a25c6:	f8a8 3000 	strh.w	r3, [r8]
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
 80a25ca:	2100      	movs	r1, #0
 80a25cc:	180b      	adds	r3, r1, r0
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
 80a25ce:	428f      	cmp	r7, r1
 80a25d0:	69e2      	ldr	r2, [r4, #28]
 80a25d2:	b29b      	uxth	r3, r3
 80a25d4:	d90a      	bls.n	80a25ec <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x90>
 80a25d6:	f8b4 c054 	ldrh.w	ip, [r4, #84]	; 0x54
 80a25da:	459c      	cmp	ip, r3
 80a25dc:	d906      	bls.n	80a25ec <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x90>
            buffer[length++] = payload[i];
 80a25de:	f816 c001 	ldrb.w	ip, [r6, r1]
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
 80a25e2:	3101      	adds	r1, #1
            buffer[length++] = payload[i];
 80a25e4:	f802 c003 	strb.w	ip, [r2, r3]
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
 80a25e8:	b289      	uxth	r1, r1
 80a25ea:	e7ef      	b.n	80a25cc <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x70>
            header |= 1;
 80a25ec:	f1ba 0f00 	cmp.w	sl, #0
 80a25f0:	bf0c      	ite	eq
 80a25f2:	2130      	moveq	r1, #48	; 0x30
 80a25f4:	2131      	movne	r1, #49	; 0x31
        if (dup) {
 80a25f6:	f1b9 0f00 	cmp.w	r9, #0
 80a25fa:	d001      	beq.n	80a2600 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xa4>
            header |= DUP_FLAG_ON_MASK;
 80a25fc:	f041 0108 	orr.w	r1, r1, #8
        if (qos == QOS2)
 80a2600:	2d02      	cmp	r5, #2
 80a2602:	d109      	bne.n	80a2618 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xbc>
            header |= MQTTQOS2_HEADER_MASK;
 80a2604:	f041 0104 	orr.w	r1, r1, #4
        return write(header, buffer, length-5);
 80a2608:	4620      	mov	r0, r4
 80a260a:	3b05      	subs	r3, #5
 80a260c:	b29b      	uxth	r3, r3
}
 80a260e:	b001      	add	sp, #4
 80a2610:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        return write(header, buffer, length-5);
 80a2614:	f7ff be3e 	b.w	80a2294 <_ZN4MQTT5writeEhPht>
        else if (qos == QOS1)
 80a2618:	2d01      	cmp	r5, #1
            header |= MQTTQOS1_HEADER_MASK;
 80a261a:	bf08      	it	eq
 80a261c:	f041 0102 	orreq.w	r1, r1, #2
 80a2620:	e7f2      	b.n	80a2608 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xac>
}
 80a2622:	b001      	add	sp, #4
 80a2624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a2628 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
 80a2628:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return publish(topic, payload, plength, retain, qos, false, messageid);
 80a262a:	9c08      	ldr	r4, [sp, #32]
 80a262c:	9403      	str	r4, [sp, #12]
 80a262e:	2400      	movs	r4, #0
 80a2630:	9402      	str	r4, [sp, #8]
 80a2632:	f89d 401c 	ldrb.w	r4, [sp, #28]
 80a2636:	9401      	str	r4, [sp, #4]
 80a2638:	f89d 4018 	ldrb.w	r4, [sp, #24]
 80a263c:	9400      	str	r4, [sp, #0]
 80a263e:	f7ff ff8d 	bl	80a255c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>
}
 80a2642:	b004      	add	sp, #16
 80a2644:	bd10      	pop	{r4, pc}

080a2646 <_ZN4MQTT7publishEPKcS1_>:
bool MQTT::publish(const char* topic, const char* payload) {
 80a2646:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80a2648:	4605      	mov	r5, r0
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
 80a264a:	4610      	mov	r0, r2
bool MQTT::publish(const char* topic, const char* payload) {
 80a264c:	4614      	mov	r4, r2
 80a264e:	460e      	mov	r6, r1
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
 80a2650:	f005 f8ca 	bl	80a77e8 <strlen>
 80a2654:	2200      	movs	r2, #0
 80a2656:	4603      	mov	r3, r0
 80a2658:	e9cd 2201 	strd	r2, r2, [sp, #4]
 80a265c:	9200      	str	r2, [sp, #0]
 80a265e:	4631      	mov	r1, r6
 80a2660:	4622      	mov	r2, r4
 80a2662:	4628      	mov	r0, r5
 80a2664:	f7ff ffe0 	bl	80a2628 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>
}
 80a2668:	b004      	add	sp, #16
 80a266a:	bd70      	pop	{r4, r5, r6, pc}

080a266c <_ZN4MQTT14publishReleaseEt>:
bool MQTT::publishRelease(uint16_t messageid) {
 80a266c:	b538      	push	{r3, r4, r5, lr}
 80a266e:	4604      	mov	r4, r0
 80a2670:	460d      	mov	r5, r1
    if (isConnected()) {
 80a2672:	f7ff fe7a 	bl	80a236a <_ZN4MQTT11isConnectedEv>
 80a2676:	b190      	cbz	r0, 80a269e <_ZN4MQTT14publishReleaseEt+0x32>
        buffer[length++] = MQTTPUBREL | MQTTQOS1_HEADER_MASK;
 80a2678:	2262      	movs	r2, #98	; 0x62
 80a267a:	69e3      	ldr	r3, [r4, #28]
        return _client.write(buffer, length);
 80a267c:	4620      	mov	r0, r4
        buffer[length++] = MQTTPUBREL | MQTTQOS1_HEADER_MASK;
 80a267e:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
 80a2680:	2202      	movs	r2, #2
 80a2682:	69e3      	ldr	r3, [r4, #28]
 80a2684:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
 80a2686:	69e3      	ldr	r3, [r4, #28]
 80a2688:	122a      	asrs	r2, r5, #8
 80a268a:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
 80a268c:	69e3      	ldr	r3, [r4, #28]
        return _client.write(buffer, length);
 80a268e:	2204      	movs	r2, #4
        buffer[length++] = (messageid & 0xFF);
 80a2690:	70dd      	strb	r5, [r3, #3]
        return _client.write(buffer, length);
 80a2692:	69e1      	ldr	r1, [r4, #28]
 80a2694:	f001 fa7c 	bl	80a3b90 <_ZN9TCPClient5writeEPKhj>
 80a2698:	3800      	subs	r0, #0
 80a269a:	bf18      	it	ne
 80a269c:	2001      	movne	r0, #1
}
 80a269e:	bd38      	pop	{r3, r4, r5, pc}

080a26a0 <_ZN4MQTT15publishCompleteEt>:
bool MQTT::publishComplete(uint16_t messageid) {
 80a26a0:	b538      	push	{r3, r4, r5, lr}
 80a26a2:	4604      	mov	r4, r0
 80a26a4:	460d      	mov	r5, r1
    if (isConnected()) {
 80a26a6:	f7ff fe60 	bl	80a236a <_ZN4MQTT11isConnectedEv>
 80a26aa:	b190      	cbz	r0, 80a26d2 <_ZN4MQTT15publishCompleteEt+0x32>
        buffer[length++] = MQTTPUBCOMP | MQTTQOS1_HEADER_MASK;
 80a26ac:	2272      	movs	r2, #114	; 0x72
 80a26ae:	69e3      	ldr	r3, [r4, #28]
        return _client.write(buffer, length);
 80a26b0:	4620      	mov	r0, r4
        buffer[length++] = MQTTPUBCOMP | MQTTQOS1_HEADER_MASK;
 80a26b2:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
 80a26b4:	2202      	movs	r2, #2
 80a26b6:	69e3      	ldr	r3, [r4, #28]
 80a26b8:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
 80a26ba:	69e3      	ldr	r3, [r4, #28]
 80a26bc:	122a      	asrs	r2, r5, #8
 80a26be:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
 80a26c0:	69e3      	ldr	r3, [r4, #28]
        return _client.write(buffer, length);
 80a26c2:	2204      	movs	r2, #4
        buffer[length++] = (messageid & 0xFF);
 80a26c4:	70dd      	strb	r5, [r3, #3]
        return _client.write(buffer, length);
 80a26c6:	69e1      	ldr	r1, [r4, #28]
 80a26c8:	f001 fa62 	bl	80a3b90 <_ZN9TCPClient5writeEPKhj>
 80a26cc:	3800      	subs	r0, #0
 80a26ce:	bf18      	it	ne
 80a26d0:	2001      	movne	r0, #1
}
 80a26d2:	bd38      	pop	{r3, r4, r5, pc}

080a26d4 <_ZN4MQTT4loopEv>:
bool MQTT::loop() {
 80a26d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a26d8:	b087      	sub	sp, #28
 80a26da:	af00      	add	r7, sp, #0
 80a26dc:	4604      	mov	r4, r0
    if (isConnected()) {
 80a26de:	f7ff fe44 	bl	80a236a <_ZN4MQTT11isConnectedEv>
 80a26e2:	4681      	mov	r9, r0
 80a26e4:	b1b0      	cbz	r0, 80a2714 <_ZN4MQTT4loopEv+0x40>
 80a26e6:	f000 fef3 	bl	80a34d0 <HAL_Timer_Get_Milli_Seconds>
        if ((t - lastInActivity > this->keepalive*1000UL) || (t - lastOutActivity > this->keepalive*1000UL)) {
 80a26ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a26ee:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80a26f0:	4606      	mov	r6, r0
 80a26f2:	4353      	muls	r3, r2
 80a26f4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80a26f6:	1a82      	subs	r2, r0, r2
 80a26f8:	429a      	cmp	r2, r3
 80a26fa:	d803      	bhi.n	80a2704 <_ZN4MQTT4loopEv+0x30>
 80a26fc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80a26fe:	1a82      	subs	r2, r0, r2
 80a2700:	4293      	cmp	r3, r2
 80a2702:	d21b      	bcs.n	80a273c <_ZN4MQTT4loopEv+0x68>
            if (pingOutstanding) {
 80a2704:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80a2708:	b14b      	cbz	r3, 80a271e <_ZN4MQTT4loopEv+0x4a>
                _client.stop();
 80a270a:	4620      	mov	r0, r4
 80a270c:	f001 fbb4 	bl	80a3e78 <_ZN9TCPClient4stopEv>
                return false;
 80a2710:	f04f 0900 	mov.w	r9, #0
}
 80a2714:	4648      	mov	r0, r9
 80a2716:	371c      	adds	r7, #28
 80a2718:	46bd      	mov	sp, r7
 80a271a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                buffer[0] = MQTTPINGREQ;
 80a271e:	21c0      	movs	r1, #192	; 0xc0
 80a2720:	69e2      	ldr	r2, [r4, #28]
                _client.write(buffer,2);
 80a2722:	4620      	mov	r0, r4
                buffer[0] = MQTTPINGREQ;
 80a2724:	7011      	strb	r1, [r2, #0]
                buffer[1] = 0;
 80a2726:	69e2      	ldr	r2, [r4, #28]
 80a2728:	7053      	strb	r3, [r2, #1]
                _client.write(buffer,2);
 80a272a:	69e1      	ldr	r1, [r4, #28]
 80a272c:	2202      	movs	r2, #2
 80a272e:	f001 fa2f 	bl	80a3b90 <_ZN9TCPClient5writeEPKhj>
                pingOutstanding = true;
 80a2732:	2301      	movs	r3, #1
                lastInActivity = t;
 80a2734:	e9c4 6609 	strd	r6, r6, [r4, #36]	; 0x24
                pingOutstanding = true;
 80a2738:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
        if (_client.available()) {
 80a273c:	4620      	mov	r0, r4
 80a273e:	f001 fb61 	bl	80a3e04 <_ZN9TCPClient9availableEv>
 80a2742:	2800      	cmp	r0, #0
 80a2744:	d0e6      	beq.n	80a2714 <_ZN4MQTT4loopEv+0x40>
            uint16_t len = readPacket(&llen);
 80a2746:	4620      	mov	r0, r4
 80a2748:	f107 0117 	add.w	r1, r7, #23
 80a274c:	f7ff fd42 	bl	80a21d4 <_ZN4MQTT10readPacketEPh>
            if (len > 0) {
 80a2750:	4683      	mov	fp, r0
 80a2752:	2800      	cmp	r0, #0
 80a2754:	d0de      	beq.n	80a2714 <_ZN4MQTT4loopEv+0x40>
                uint8_t type = buffer[0]&0xF0;
 80a2756:	69e3      	ldr	r3, [r4, #28]
                lastInActivity = t;
 80a2758:	62a6      	str	r6, [r4, #40]	; 0x28
                uint8_t type = buffer[0]&0xF0;
 80a275a:	7819      	ldrb	r1, [r3, #0]
 80a275c:	f001 02f0 	and.w	r2, r1, #240	; 0xf0
                if (type == MQTTPUBLISH) {
 80a2760:	2a30      	cmp	r2, #48	; 0x30
 80a2762:	d17d      	bne.n	80a2860 <_ZN4MQTT4loopEv+0x18c>
                    if (callback) {
 80a2764:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 80a2768:	f1ba 0f00 	cmp.w	sl, #0
 80a276c:	d0d2      	beq.n	80a2714 <_ZN4MQTT4loopEv+0x40>
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
 80a276e:	f897 c017 	ldrb.w	ip, [r7, #23]
                        }
 80a2772:	f8c7 d000 	str.w	sp, [r7]
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
 80a2776:	eb03 020c 	add.w	r2, r3, ip
 80a277a:	7855      	ldrb	r5, [r2, #1]
 80a277c:	7891      	ldrb	r1, [r2, #2]
 80a277e:	eb01 2105 	add.w	r1, r1, r5, lsl #8
 80a2782:	b28d      	uxth	r5, r1
                        char topic[tl+1];
 80a2784:	4669      	mov	r1, sp
 80a2786:	f105 0208 	add.w	r2, r5, #8
 80a278a:	08d2      	lsrs	r2, r2, #3
 80a278c:	eba1 02c2 	sub.w	r2, r1, r2, lsl #3
 80a2790:	4695      	mov	sp, r2
 80a2792:	4668      	mov	r0, sp
                        for (uint16_t i=0;i<tl;i++) {
 80a2794:	f10c 0203 	add.w	r2, ip, #3
 80a2798:	60fa      	str	r2, [r7, #12]
 80a279a:	eb03 0e02 	add.w	lr, r3, r2
 80a279e:	eb0d 0205 	add.w	r2, sp, r5
 80a27a2:	f8c7 d008 	str.w	sp, [r7, #8]
 80a27a6:	607a      	str	r2, [r7, #4]
 80a27a8:	e9d7 2101 	ldrd	r2, r1, [r7, #4]
 80a27ac:	428a      	cmp	r2, r1
 80a27ae:	d006      	beq.n	80a27be <_ZN4MQTT4loopEv+0xea>
                            topic[i] = buffer[llen+3+i];
 80a27b0:	460a      	mov	r2, r1
 80a27b2:	f81e 8b01 	ldrb.w	r8, [lr], #1
 80a27b6:	f802 8b01 	strb.w	r8, [r2], #1
 80a27ba:	60ba      	str	r2, [r7, #8]
                        for (uint16_t i=0;i<tl;i++) {
 80a27bc:	e7f4      	b.n	80a27a8 <_ZN4MQTT4loopEv+0xd4>
                        topic[tl] = 0;
 80a27be:	2200      	movs	r2, #0
 80a27c0:	5542      	strb	r2, [r0, r5]
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
 80a27c2:	f893 8000 	ldrb.w	r8, [r3]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
 80a27c6:	68f9      	ldr	r1, [r7, #12]
 80a27c8:	f008 0806 	and.w	r8, r8, #6
 80a27cc:	ebab 020c 	sub.w	r2, fp, ip
 80a27d0:	3a03      	subs	r2, #3
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
 80a27d2:	f1b8 0f02 	cmp.w	r8, #2
 80a27d6:	eba2 0205 	sub.w	r2, r2, r5
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
 80a27da:	4429      	add	r1, r5
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
 80a27dc:	d124      	bne.n	80a2828 <_ZN4MQTT4loopEv+0x154>
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
 80a27de:	f813 e001 	ldrb.w	lr, [r3, r1]
 80a27e2:	4419      	add	r1, r3
 80a27e4:	f891 b001 	ldrb.w	fp, [r1, #1]
                            payload = buffer+llen+3+tl+2;
 80a27e8:	f10c 0105 	add.w	r1, ip, #5
 80a27ec:	4429      	add	r1, r5
                            callback(topic,payload,len-llen-3-tl-2);
 80a27ee:	3a02      	subs	r2, #2
 80a27f0:	4419      	add	r1, r3
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
 80a27f2:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
                            callback(topic,payload,len-llen-3-tl-2);
 80a27f6:	47d0      	blx	sl
                            buffer[0] = MQTTPUBACK; // respond with PUBACK
 80a27f8:	2240      	movs	r2, #64	; 0x40
 80a27fa:	69e3      	ldr	r3, [r4, #28]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
 80a27fc:	fa1f fb8b 	uxth.w	fp, fp
                            buffer[0] = MQTTPUBACK; // respond with PUBACK
 80a2800:	701a      	strb	r2, [r3, #0]
                            buffer[1] = 2;
 80a2802:	69e3      	ldr	r3, [r4, #28]
 80a2804:	f883 8001 	strb.w	r8, [r3, #1]
                            buffer[2] = (msgId >> 8);
 80a2808:	69e3      	ldr	r3, [r4, #28]
 80a280a:	ea4f 222b 	mov.w	r2, fp, asr #8
 80a280e:	709a      	strb	r2, [r3, #2]
                            buffer[3] = (msgId & 0xFF);
 80a2810:	69e3      	ldr	r3, [r4, #28]
                            _client.write(buffer,4);
 80a2812:	2204      	movs	r2, #4
                            buffer[3] = (msgId & 0xFF);
 80a2814:	f883 b003 	strb.w	fp, [r3, #3]
                            _client.write(buffer,4);
 80a2818:	4620      	mov	r0, r4
 80a281a:	69e1      	ldr	r1, [r4, #28]
 80a281c:	f001 f9b8 	bl	80a3b90 <_ZN9TCPClient5writeEPKhj>
                            lastOutActivity = t;
 80a2820:	6266      	str	r6, [r4, #36]	; 0x24
 80a2822:	f8d7 d000 	ldr.w	sp, [r7]
 80a2826:	e775      	b.n	80a2714 <_ZN4MQTT4loopEv+0x40>
        						    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
 80a2828:	f1b8 0f04 	cmp.w	r8, #4
 80a282c:	d115      	bne.n	80a285a <_ZN4MQTT4loopEv+0x186>
							              msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
 80a282e:	f813 e001 	ldrb.w	lr, [r3, r1]
 80a2832:	4419      	add	r1, r3
 80a2834:	f891 b001 	ldrb.w	fp, [r1, #1]
							              payload = buffer + llen + 3 + tl + 2;
 80a2838:	f10c 0105 	add.w	r1, ip, #5
 80a283c:	4429      	add	r1, r5
							              callback(topic, payload, len - llen - 3 - tl - 2);
 80a283e:	3a02      	subs	r2, #2
 80a2840:	4419      	add	r1, r3
							              msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
 80a2842:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
							              callback(topic, payload, len - llen - 3 - tl - 2);
 80a2846:	47d0      	blx	sl
              							buffer[0] = MQTTPUBREC; // respond with PUBREC
 80a2848:	2250      	movs	r2, #80	; 0x50
 80a284a:	69e3      	ldr	r3, [r4, #28]
							              msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
 80a284c:	fa1f fb8b 	uxth.w	fp, fp
              							buffer[0] = MQTTPUBREC; // respond with PUBREC
 80a2850:	701a      	strb	r2, [r3, #0]
              							buffer[1] = 2;
 80a2852:	2202      	movs	r2, #2
 80a2854:	69e3      	ldr	r3, [r4, #28]
 80a2856:	705a      	strb	r2, [r3, #1]
              							buffer[2] = (msgId >> 8);
 80a2858:	e7d6      	b.n	80a2808 <_ZN4MQTT4loopEv+0x134>
                            callback(topic,payload,len-llen-3-tl);
 80a285a:	4419      	add	r1, r3
 80a285c:	47d0      	blx	sl
 80a285e:	e7e0      	b.n	80a2822 <_ZN4MQTT4loopEv+0x14e>
                } else if (type == MQTTPUBREC) {
 80a2860:	2a50      	cmp	r2, #80	; 0x50
 80a2862:	d108      	bne.n	80a2876 <_ZN4MQTT4loopEv+0x1a2>
                    msgId = (buffer[2] << 8) + buffer[3];
 80a2864:	789a      	ldrb	r2, [r3, #2]
 80a2866:	78d9      	ldrb	r1, [r3, #3]
                    this->publishRelease(msgId);
 80a2868:	4620      	mov	r0, r4
                    msgId = (buffer[2] << 8) + buffer[3];
 80a286a:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                    this->publishRelease(msgId);
 80a286e:	b289      	uxth	r1, r1
 80a2870:	f7ff fefc 	bl	80a266c <_ZN4MQTT14publishReleaseEt>
 80a2874:	e74e      	b.n	80a2714 <_ZN4MQTT4loopEv+0x40>
                } else if (type == MQTTPUBACK) {
 80a2876:	2a40      	cmp	r2, #64	; 0x40
 80a2878:	d112      	bne.n	80a28a0 <_ZN4MQTT4loopEv+0x1cc>
                  if (qoscallback) {
 80a287a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80a287c:	2a00      	cmp	r2, #0
 80a287e:	f43f af49 	beq.w	80a2714 <_ZN4MQTT4loopEv+0x40>
                      if (len == 4 && (buffer[0]&0x06) == MQTTQOS0_HEADER_MASK) {
 80a2882:	f1bb 0f04 	cmp.w	fp, #4
 80a2886:	f47f af45 	bne.w	80a2714 <_ZN4MQTT4loopEv+0x40>
 80a288a:	f011 0f06 	tst.w	r1, #6
 80a288e:	f47f af41 	bne.w	80a2714 <_ZN4MQTT4loopEv+0x40>
                          msgId = (buffer[2]<<8)+buffer[3];
 80a2892:	7899      	ldrb	r1, [r3, #2]
 80a2894:	78d8      	ldrb	r0, [r3, #3]
 80a2896:	eb00 2001 	add.w	r0, r0, r1, lsl #8
                          this->qoscallback(msgId);
 80a289a:	b280      	uxth	r0, r0
 80a289c:	4790      	blx	r2
 80a289e:	e739      	b.n	80a2714 <_ZN4MQTT4loopEv+0x40>
                } else if (type == MQTTPUBREL) {
 80a28a0:	2a60      	cmp	r2, #96	; 0x60
 80a28a2:	d108      	bne.n	80a28b6 <_ZN4MQTT4loopEv+0x1e2>
                  msgId = (buffer[2] << 8) + buffer[3];
 80a28a4:	789a      	ldrb	r2, [r3, #2]
 80a28a6:	78d9      	ldrb	r1, [r3, #3]
                  this->publishComplete(msgId);
 80a28a8:	4620      	mov	r0, r4
                  msgId = (buffer[2] << 8) + buffer[3];
 80a28aa:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                  this->publishComplete(msgId);
 80a28ae:	b289      	uxth	r1, r1
 80a28b0:	f7ff fef6 	bl	80a26a0 <_ZN4MQTT15publishCompleteEt>
 80a28b4:	e72e      	b.n	80a2714 <_ZN4MQTT4loopEv+0x40>
                } else if (type == MQTTPUBCOMP) {
 80a28b6:	2a70      	cmp	r2, #112	; 0x70
 80a28b8:	d0df      	beq.n	80a287a <_ZN4MQTT4loopEv+0x1a6>
                } else if (type == MQTTSUBACK) {
 80a28ba:	2a90      	cmp	r2, #144	; 0x90
 80a28bc:	f43f af2a 	beq.w	80a2714 <_ZN4MQTT4loopEv+0x40>
                } else if (type == MQTTPINGREQ) {
 80a28c0:	2ac0      	cmp	r2, #192	; 0xc0
 80a28c2:	d10a      	bne.n	80a28da <_ZN4MQTT4loopEv+0x206>
                    buffer[0] = MQTTPINGRESP;
 80a28c4:	22d0      	movs	r2, #208	; 0xd0
 80a28c6:	701a      	strb	r2, [r3, #0]
                    buffer[1] = 0;
 80a28c8:	2200      	movs	r2, #0
 80a28ca:	69e3      	ldr	r3, [r4, #28]
                    _client.write(buffer,2);
 80a28cc:	4620      	mov	r0, r4
                    buffer[1] = 0;
 80a28ce:	705a      	strb	r2, [r3, #1]
                    _client.write(buffer,2);
 80a28d0:	69e1      	ldr	r1, [r4, #28]
 80a28d2:	2202      	movs	r2, #2
 80a28d4:	f001 f95c 	bl	80a3b90 <_ZN9TCPClient5writeEPKhj>
 80a28d8:	e71c      	b.n	80a2714 <_ZN4MQTT4loopEv+0x40>
                } else if (type == MQTTPINGRESP) {
 80a28da:	2ad0      	cmp	r2, #208	; 0xd0
                    pingOutstanding = false;
 80a28dc:	bf04      	itt	eq
 80a28de:	2300      	moveq	r3, #0
 80a28e0:	f884 302c 	strbeq.w	r3, [r4, #44]	; 0x2c
 80a28e4:	e716      	b.n	80a2714 <_ZN4MQTT4loopEv+0x40>

080a28e6 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>:
bool MQTT::subscribe(const char* topic, EMQTT_QOS qos) {
 80a28e6:	b570      	push	{r4, r5, r6, lr}
 80a28e8:	4604      	mov	r4, r0
 80a28ea:	460e      	mov	r6, r1
 80a28ec:	4615      	mov	r5, r2
    if (isConnected()) {
 80a28ee:	f7ff fd3c 	bl	80a236a <_ZN4MQTT11isConnectedEv>
 80a28f2:	b1f0      	cbz	r0, 80a2932 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x4c>
        nextMsgId++;
 80a28f4:	8c23      	ldrh	r3, [r4, #32]
 80a28f6:	3301      	adds	r3, #1
 80a28f8:	b29b      	uxth	r3, r3
        if (nextMsgId == 0) {
 80a28fa:	b1c3      	cbz	r3, 80a292e <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x48>
            nextMsgId = 1;
 80a28fc:	8423      	strh	r3, [r4, #32]
        buffer[length++] = (nextMsgId >> 8);
 80a28fe:	8c23      	ldrh	r3, [r4, #32]
 80a2900:	69e2      	ldr	r2, [r4, #28]
 80a2902:	121b      	asrs	r3, r3, #8
 80a2904:	7153      	strb	r3, [r2, #5]
        buffer[length++] = (nextMsgId & 0xFF);
 80a2906:	69e3      	ldr	r3, [r4, #28]
 80a2908:	8c22      	ldrh	r2, [r4, #32]
        length = writeString(topic, buffer,length);
 80a290a:	4631      	mov	r1, r6
        buffer[length++] = (nextMsgId & 0xFF);
 80a290c:	719a      	strb	r2, [r3, #6]
        length = writeString(topic, buffer,length);
 80a290e:	69e2      	ldr	r2, [r4, #28]
 80a2910:	2307      	movs	r3, #7
 80a2912:	4620      	mov	r0, r4
 80a2914:	f7ff fd0f 	bl	80a2336 <_ZN4MQTT11writeStringEPKcPht>
        buffer[length++] = qos;
 80a2918:	69e3      	ldr	r3, [r4, #28]
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
 80a291a:	2182      	movs	r1, #130	; 0x82
        buffer[length++] = qos;
 80a291c:	541d      	strb	r5, [r3, r0]
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
 80a291e:	3804      	subs	r0, #4
 80a2920:	69e2      	ldr	r2, [r4, #28]
 80a2922:	b283      	uxth	r3, r0
 80a2924:	4620      	mov	r0, r4
}
 80a2926:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
 80a292a:	f7ff bcb3 	b.w	80a2294 <_ZN4MQTT5writeEhPht>
            nextMsgId = 1;
 80a292e:	2301      	movs	r3, #1
 80a2930:	e7e4      	b.n	80a28fc <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x16>
}
 80a2932:	bd70      	pop	{r4, r5, r6, pc}

080a2934 <_ZN4MQTT9subscribeEPKc>:
    return subscribe(topic, QOS0);
 80a2934:	2200      	movs	r2, #0
 80a2936:	f7ff bfd6 	b.w	80a28e6 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>
	...

080a293c <_ZN4MQTTD1Ev>:
MQTT::~MQTT() {
 80a293c:	b538      	push	{r3, r4, r5, lr}
 80a293e:	4605      	mov	r5, r0
    if (isConnected()) {
 80a2940:	f7ff fd13 	bl	80a236a <_ZN4MQTT11isConnectedEv>
 80a2944:	b110      	cbz	r0, 80a294c <_ZN4MQTTD1Ev+0x10>
        disconnect();
 80a2946:	4628      	mov	r0, r5
 80a2948:	f7ff fce1 	bl	80a230e <_ZN4MQTT10disconnectEv>
    if (buffer != NULL)
 80a294c:	69e8      	ldr	r0, [r5, #28]
 80a294e:	b108      	cbz	r0, 80a2954 <_ZN4MQTTD1Ev+0x18>
      delete[] buffer;
 80a2950:	f7fd fba9 	bl	80a00a6 <_ZdaPv>
MQTT::~MQTT() {
 80a2954:	f105 0038 	add.w	r0, r5, #56	; 0x38
 80a2958:	f001 fbe6 	bl	80a4128 <_ZN6StringD1Ev>
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
 80a295c:	4b0a      	ldr	r3, [pc, #40]	; (80a2988 <_ZN4MQTTD1Ev+0x4c>)
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 80a295e:	69ac      	ldr	r4, [r5, #24]
 80a2960:	602b      	str	r3, [r5, #0]
 80a2962:	b17c      	cbz	r4, 80a2984 <_ZN4MQTTD1Ev+0x48>
      if (--_M_use_count == 0)
 80a2964:	6863      	ldr	r3, [r4, #4]
 80a2966:	3b01      	subs	r3, #1
 80a2968:	6063      	str	r3, [r4, #4]
 80a296a:	b95b      	cbnz	r3, 80a2984 <_ZN4MQTTD1Ev+0x48>
          _M_dispose();
 80a296c:	6823      	ldr	r3, [r4, #0]
 80a296e:	4620      	mov	r0, r4
 80a2970:	689b      	ldr	r3, [r3, #8]
 80a2972:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a2974:	68a3      	ldr	r3, [r4, #8]
 80a2976:	3b01      	subs	r3, #1
 80a2978:	60a3      	str	r3, [r4, #8]
 80a297a:	b91b      	cbnz	r3, 80a2984 <_ZN4MQTTD1Ev+0x48>
            _M_destroy();
 80a297c:	6823      	ldr	r3, [r4, #0]
 80a297e:	4620      	mov	r0, r4
 80a2980:	68db      	ldr	r3, [r3, #12]
 80a2982:	4798      	blx	r3
}
 80a2984:	4628      	mov	r0, r5
 80a2986:	bd38      	pop	{r3, r4, r5, pc}
 80a2988:	080aa45c 	.word	0x080aa45c

080a298c <_ZN10JsonBufferD1Ev>:


JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {

}
JsonBuffer::~JsonBuffer() {
 80a298c:	b510      	push	{r4, lr}
 80a298e:	4b05      	ldr	r3, [pc, #20]	; (80a29a4 <_ZN10JsonBufferD1Ev+0x18>)
 80a2990:	4604      	mov	r4, r0
 80a2992:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && buffer) {
 80a2994:	7c03      	ldrb	r3, [r0, #16]
 80a2996:	b91b      	cbnz	r3, 80a29a0 <_ZN10JsonBufferD1Ev+0x14>
 80a2998:	6840      	ldr	r0, [r0, #4]
 80a299a:	b108      	cbz	r0, 80a29a0 <_ZN10JsonBufferD1Ev+0x14>
		free(buffer);
 80a299c:	f000 ffe0 	bl	80a3960 <free>
	}
}
 80a29a0:	4620      	mov	r0, r4
 80a29a2:	bd10      	pop	{r4, pc}
 80a29a4:	080aa3ec 	.word	0x080aa3ec

080a29a8 <_ZN10JsonBufferD0Ev>:
JsonBuffer::~JsonBuffer() {
 80a29a8:	b510      	push	{r4, lr}
 80a29aa:	4604      	mov	r4, r0
}
 80a29ac:	f7ff ffee 	bl	80a298c <_ZN10JsonBufferD1Ev>
 80a29b0:	4620      	mov	r0, r4
 80a29b2:	2114      	movs	r1, #20
 80a29b4:	f002 fd57 	bl	80a5466 <_ZdlPvj>
 80a29b8:	4620      	mov	r0, r4
 80a29ba:	bd10      	pop	{r4, pc}

080a29bc <_ZN10JsonWriterD1Ev>:
//
JsonWriter::JsonWriter() : JsonBuffer(), floatPlaces(-1) {
	init();
}

JsonWriter::~JsonWriter() {
 80a29bc:	b510      	push	{r4, lr}
 80a29be:	4604      	mov	r4, r0
 80a29c0:	4b02      	ldr	r3, [pc, #8]	; (80a29cc <_ZN10JsonWriterD1Ev+0x10>)
 80a29c2:	6003      	str	r3, [r0, #0]
 80a29c4:	f7ff ffe2 	bl	80a298c <_ZN10JsonBufferD1Ev>

}
 80a29c8:	4620      	mov	r0, r4
 80a29ca:	bd10      	pop	{r4, pc}
 80a29cc:	080aa40c 	.word	0x080aa40c

080a29d0 <_ZN10JsonWriterD0Ev>:
JsonWriter::~JsonWriter() {
 80a29d0:	b510      	push	{r4, lr}
 80a29d2:	4604      	mov	r4, r0
}
 80a29d4:	f7ff fff2 	bl	80a29bc <_ZN10JsonWriterD1Ev>
 80a29d8:	4620      	mov	r0, r4
 80a29da:	2130      	movs	r1, #48	; 0x30
 80a29dc:	f002 fd43 	bl	80a5466 <_ZdlPvj>
 80a29e0:	4620      	mov	r0, r4
 80a29e2:	bd10      	pop	{r4, pc}

080a29e4 <_ZN10JsonParserD1Ev>:
JsonParser::~JsonParser() {
 80a29e4:	b510      	push	{r4, lr}
 80a29e6:	4b07      	ldr	r3, [pc, #28]	; (80a2a04 <_ZN10JsonParserD1Ev+0x20>)
 80a29e8:	4604      	mov	r4, r0
 80a29ea:	6003      	str	r3, [r0, #0]
	if (!staticBuffers && tokens) {
 80a29ec:	7c03      	ldrb	r3, [r0, #16]
 80a29ee:	b91b      	cbnz	r3, 80a29f8 <_ZN10JsonParserD1Ev+0x14>
 80a29f0:	6940      	ldr	r0, [r0, #20]
 80a29f2:	b108      	cbz	r0, 80a29f8 <_ZN10JsonParserD1Ev+0x14>
		free(tokens);
 80a29f4:	f000 ffb4 	bl	80a3960 <free>
JsonParser::~JsonParser() {
 80a29f8:	4620      	mov	r0, r4
 80a29fa:	f7ff ffc7 	bl	80a298c <_ZN10JsonBufferD1Ev>
}
 80a29fe:	4620      	mov	r0, r4
 80a2a00:	bd10      	pop	{r4, pc}
 80a2a02:	bf00      	nop
 80a2a04:	080aa3fc 	.word	0x080aa3fc

080a2a08 <_ZN10JsonParserD0Ev>:
JsonParser::~JsonParser() {
 80a2a08:	b510      	push	{r4, lr}
 80a2a0a:	4604      	mov	r4, r0
}
 80a2a0c:	f7ff ffea 	bl	80a29e4 <_ZN10JsonParserD1Ev>
 80a2a10:	4620      	mov	r0, r4
 80a2a12:	212c      	movs	r1, #44	; 0x2c
 80a2a14:	f002 fd27 	bl	80a5466 <_ZdlPvj>
 80a2a18:	4620      	mov	r0, r4
 80a2a1a:	bd10      	pop	{r4, pc}

080a2a1c <_ZN10JsonBufferC1Ev>:
JsonBuffer::JsonBuffer()  : buffer(0), bufferLen(0), offset(0), staticBuffers(false) {
 80a2a1c:	4a03      	ldr	r2, [pc, #12]	; (80a2a2c <_ZN10JsonBufferC1Ev+0x10>)
 80a2a1e:	6002      	str	r2, [r0, #0]
 80a2a20:	2200      	movs	r2, #0
 80a2a22:	e9c0 2201 	strd	r2, r2, [r0, #4]
 80a2a26:	60c2      	str	r2, [r0, #12]
 80a2a28:	7402      	strb	r2, [r0, #16]
}
 80a2a2a:	4770      	bx	lr
 80a2a2c:	080aa3ec 	.word	0x080aa3ec

080a2a30 <_ZN10JsonBuffer8allocateEj>:
bool JsonBuffer::allocate(size_t len) {
 80a2a30:	b538      	push	{r3, r4, r5, lr}
	if (!staticBuffers) {
 80a2a32:	7c03      	ldrb	r3, [r0, #16]
bool JsonBuffer::allocate(size_t len) {
 80a2a34:	4604      	mov	r4, r0
 80a2a36:	460d      	mov	r5, r1
	if (!staticBuffers) {
 80a2a38:	b10b      	cbz	r3, 80a2a3e <_ZN10JsonBuffer8allocateEj+0xe>
		return false;
 80a2a3a:	2000      	movs	r0, #0
}
 80a2a3c:	bd38      	pop	{r3, r4, r5, pc}
		if (buffer) {
 80a2a3e:	6840      	ldr	r0, [r0, #4]
 80a2a40:	b138      	cbz	r0, 80a2a52 <_ZN10JsonBuffer8allocateEj+0x22>
			newBuffer = (char *) realloc(buffer, len);
 80a2a42:	f000 ff95 	bl	80a3970 <realloc>
		if (newBuffer) {
 80a2a46:	2800      	cmp	r0, #0
 80a2a48:	d0f7      	beq.n	80a2a3a <_ZN10JsonBuffer8allocateEj+0xa>
			bufferLen = len;
 80a2a4a:	e9c4 0501 	strd	r0, r5, [r4, #4]
			return true;
 80a2a4e:	2001      	movs	r0, #1
 80a2a50:	e7f4      	b.n	80a2a3c <_ZN10JsonBuffer8allocateEj+0xc>
			newBuffer = (char *) malloc(len);
 80a2a52:	4608      	mov	r0, r1
 80a2a54:	f000 ff7c 	bl	80a3950 <malloc>
 80a2a58:	e7f5      	b.n	80a2a46 <_ZN10JsonBuffer8allocateEj+0x16>

080a2a5a <_ZN10JsonBuffer7addDataEPKcj>:
bool JsonBuffer::addData(const char *data, size_t dataLen) {
 80a2a5a:	b570      	push	{r4, r5, r6, lr}
 80a2a5c:	68c3      	ldr	r3, [r0, #12]
 80a2a5e:	460e      	mov	r6, r1
 80a2a60:	18d1      	adds	r1, r2, r3
	if (!buffer || (offset + dataLen) > bufferLen) {
 80a2a62:	6843      	ldr	r3, [r0, #4]
bool JsonBuffer::addData(const char *data, size_t dataLen) {
 80a2a64:	4604      	mov	r4, r0
 80a2a66:	4615      	mov	r5, r2
	if (!buffer || (offset + dataLen) > bufferLen) {
 80a2a68:	b173      	cbz	r3, 80a2a88 <_ZN10JsonBuffer7addDataEPKcj+0x2e>
 80a2a6a:	6883      	ldr	r3, [r0, #8]
 80a2a6c:	428b      	cmp	r3, r1
 80a2a6e:	d30b      	bcc.n	80a2a88 <_ZN10JsonBuffer7addDataEPKcj+0x2e>
	memcpy(&buffer[offset], data, dataLen);
 80a2a70:	6860      	ldr	r0, [r4, #4]
 80a2a72:	68e3      	ldr	r3, [r4, #12]
 80a2a74:	462a      	mov	r2, r5
 80a2a76:	4631      	mov	r1, r6
 80a2a78:	4418      	add	r0, r3
 80a2a7a:	f004 f907 	bl	80a6c8c <memcpy>
	return true;
 80a2a7e:	2001      	movs	r0, #1
	offset += dataLen;
 80a2a80:	68e2      	ldr	r2, [r4, #12]
 80a2a82:	442a      	add	r2, r5
 80a2a84:	60e2      	str	r2, [r4, #12]
}
 80a2a86:	bd70      	pop	{r4, r5, r6, pc}
		if (!allocate(offset + dataLen)) {
 80a2a88:	4620      	mov	r0, r4
 80a2a8a:	f7ff ffd1 	bl	80a2a30 <_ZN10JsonBuffer8allocateEj>
 80a2a8e:	2800      	cmp	r0, #0
 80a2a90:	d1ee      	bne.n	80a2a70 <_ZN10JsonBuffer7addDataEPKcj+0x16>
 80a2a92:	e7f8      	b.n	80a2a86 <_ZN10JsonBuffer7addDataEPKcj+0x2c>

080a2a94 <_ZN10JsonBuffer5clearEv>:
	offset = 0;
 80a2a94:	2300      	movs	r3, #0
 80a2a96:	60c3      	str	r3, [r0, #12]
}
 80a2a98:	4770      	bx	lr
	...

080a2a9c <_ZN10JsonParserC1Ev>:
JsonParser::JsonParser() : JsonBuffer(), tokens(0), tokensEnd(0), maxTokens(0) {
 80a2a9c:	b508      	push	{r3, lr}
 80a2a9e:	4603      	mov	r3, r0
 80a2aa0:	f7ff ffbc 	bl	80a2a1c <_ZN10JsonBufferC1Ev>
 80a2aa4:	4a03      	ldr	r2, [pc, #12]	; (80a2ab4 <_ZN10JsonParserC1Ev+0x18>)
}
 80a2aa6:	4618      	mov	r0, r3
JsonParser::JsonParser() : JsonBuffer(), tokens(0), tokensEnd(0), maxTokens(0) {
 80a2aa8:	601a      	str	r2, [r3, #0]
 80a2aaa:	2200      	movs	r2, #0
 80a2aac:	e9c3 2205 	strd	r2, r2, [r3, #20]
 80a2ab0:	61da      	str	r2, [r3, #28]
}
 80a2ab2:	bd08      	pop	{r3, pc}
 80a2ab4:	080aa3fc 	.word	0x080aa3fc

080a2ab8 <_ZNK10JsonParser14getOuterObjectEv>:
const JsonParserGeneratorRK::jsmntok_t *JsonParser::getOuterObject() const {
 80a2ab8:	4603      	mov	r3, r0
	if (tokens < tokensEnd && tokens[0].type == JsonParserGeneratorRK::JSMN_OBJECT) {
 80a2aba:	e9d3 0305 	ldrd	r0, r3, [r3, #20]
 80a2abe:	4298      	cmp	r0, r3
 80a2ac0:	d204      	bcs.n	80a2acc <_ZNK10JsonParser14getOuterObjectEv+0x14>
 80a2ac2:	7803      	ldrb	r3, [r0, #0]
 80a2ac4:	2b01      	cmp	r3, #1
		return 0;
 80a2ac6:	bf18      	it	ne
 80a2ac8:	2000      	movne	r0, #0
 80a2aca:	4770      	bx	lr
 80a2acc:	2000      	movs	r0, #0
}
 80a2ace:	4770      	bx	lr

080a2ad0 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>:
bool JsonParser::skipObject(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&obj) const {
 80a2ad0:	b570      	push	{r4, r5, r6, lr}
	int curObjectEnd = obj->end;
 80a2ad2:	6813      	ldr	r3, [r2, #0]
 80a2ad4:	689d      	ldr	r5, [r3, #8]
	while(++obj < tokensEnd && obj->end < container->end && obj->end <= curObjectEnd) {
 80a2ad6:	6813      	ldr	r3, [r2, #0]
 80a2ad8:	f103 0410 	add.w	r4, r3, #16
 80a2adc:	6014      	str	r4, [r2, #0]
 80a2ade:	6986      	ldr	r6, [r0, #24]
 80a2ae0:	42b4      	cmp	r4, r6
 80a2ae2:	d20a      	bcs.n	80a2afa <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x2a>
 80a2ae4:	699b      	ldr	r3, [r3, #24]
 80a2ae6:	688c      	ldr	r4, [r1, #8]
 80a2ae8:	42a3      	cmp	r3, r4
 80a2aea:	da01      	bge.n	80a2af0 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x20>
 80a2aec:	42ab      	cmp	r3, r5
 80a2aee:	ddf2      	ble.n	80a2ad6 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x6>
	if (obj >= tokensEnd || obj->end > container->end) {
 80a2af0:	42a3      	cmp	r3, r4
 80a2af2:	bfcc      	ite	gt
 80a2af4:	2000      	movgt	r0, #0
 80a2af6:	2001      	movle	r0, #1
 80a2af8:	e000      	b.n	80a2afc <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_+0x2c>
		return false;
 80a2afa:	2000      	movs	r0, #0
}
 80a2afc:	bd70      	pop	{r4, r5, r6, pc}

080a2afe <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j>:
bool JsonParser::getKeyValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&key, const JsonParserGeneratorRK::jsmntok_t *&value, size_t desiredIndex) const {
 80a2afe:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80a2b02:	4605      	mov	r5, r0
 80a2b04:	4617      	mov	r7, r2
	size_t index = 0;
 80a2b06:	2600      	movs	r6, #0
bool JsonParser::getKeyValueTokenByIndex(const JsonParserGeneratorRK::jsmntok_t *container, const JsonParserGeneratorRK::jsmntok_t *&key, const JsonParserGeneratorRK::jsmntok_t *&value, size_t desiredIndex) const {
 80a2b08:	4698      	mov	r8, r3
 80a2b0a:	9c08      	ldr	r4, [sp, #32]
	const JsonParserGeneratorRK::jsmntok_t *token = container + 1;
 80a2b0c:	f101 0310 	add.w	r3, r1, #16
 80a2b10:	9301      	str	r3, [sp, #4]
	while(token < tokensEnd && token->end < container->end) {
 80a2b12:	9801      	ldr	r0, [sp, #4]
 80a2b14:	69ab      	ldr	r3, [r5, #24]
 80a2b16:	4283      	cmp	r3, r0
 80a2b18:	d91b      	bls.n	80a2b52 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x54>
 80a2b1a:	6882      	ldr	r2, [r0, #8]
 80a2b1c:	688b      	ldr	r3, [r1, #8]
 80a2b1e:	429a      	cmp	r2, r3
 80a2b20:	da17      	bge.n	80a2b52 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x54>
		if (desiredIndex == index) {
 80a2b22:	42a6      	cmp	r6, r4
 80a2b24:	d10b      	bne.n	80a2b3e <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x40>
			key = token;
 80a2b26:	6038      	str	r0, [r7, #0]
			if (skipObject(container, token)) {
 80a2b28:	aa01      	add	r2, sp, #4
 80a2b2a:	4628      	mov	r0, r5
 80a2b2c:	f7ff ffd0 	bl	80a2ad0 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
 80a2b30:	b128      	cbz	r0, 80a2b3e <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x40>
				value = token;
 80a2b32:	9b01      	ldr	r3, [sp, #4]
 80a2b34:	f8c8 3000 	str.w	r3, [r8]
}
 80a2b38:	b002      	add	sp, #8
 80a2b3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		skipObject(container, token);
 80a2b3e:	aa01      	add	r2, sp, #4
 80a2b40:	4628      	mov	r0, r5
 80a2b42:	f7ff ffc5 	bl	80a2ad0 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
		skipObject(container, token);
 80a2b46:	4628      	mov	r0, r5
 80a2b48:	aa01      	add	r2, sp, #4
		index++;
 80a2b4a:	3601      	adds	r6, #1
		skipObject(container, token);
 80a2b4c:	f7ff ffc0 	bl	80a2ad0 <_ZNK10JsonParser10skipObjectEPKN21JsonParserGeneratorRK9jsmntok_tERS3_>
	while(token < tokensEnd && token->end < container->end) {
 80a2b50:	e7df      	b.n	80a2b12 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x14>
	return false;
 80a2b52:	2000      	movs	r0, #0
 80a2b54:	e7f0      	b.n	80a2b38 <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j+0x3a>

080a2b56 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj>:
void JsonParser::copyTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, char *dst, size_t dstLen) const {
 80a2b56:	b5f0      	push	{r4, r5, r6, r7, lr}
	for(ii = 0; ii < (token->end - token->start) && ii < ((int)dstLen - 1); ii++) {
 80a2b58:	2400      	movs	r4, #0
 80a2b5a:	3b01      	subs	r3, #1
 80a2b5c:	e9d1 7601 	ldrd	r7, r6, [r1, #4]
 80a2b60:	1bf6      	subs	r6, r6, r7
 80a2b62:	42a6      	cmp	r6, r4
 80a2b64:	dd08      	ble.n	80a2b78 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj+0x22>
 80a2b66:	42a3      	cmp	r3, r4
 80a2b68:	dd06      	ble.n	80a2b78 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj+0x22>
		dst[ii] = buffer[token->start + ii];
 80a2b6a:	6845      	ldr	r5, [r0, #4]
 80a2b6c:	443d      	add	r5, r7
 80a2b6e:	5d2d      	ldrb	r5, [r5, r4]
	for(ii = 0; ii < (token->end - token->start) && ii < ((int)dstLen - 1); ii++) {
 80a2b70:	3401      	adds	r4, #1
		dst[ii] = buffer[token->start + ii];
 80a2b72:	f802 5b01 	strb.w	r5, [r2], #1
	for(ii = 0; ii < (token->end - token->start) && ii < ((int)dstLen - 1); ii++) {
 80a2b76:	e7f1      	b.n	80a2b5c <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj+0x6>
	dst[ii] = 0;
 80a2b78:	2300      	movs	r3, #0
 80a2b7a:	7013      	strb	r3, [r2, #0]
}
 80a2b7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080a2b80 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERi>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, int &result) const {
 80a2b80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80a2b82:	4614      	mov	r4, r2
	copyTokenValue(token, tmp, sizeof(tmp));
 80a2b84:	2310      	movs	r3, #16
 80a2b86:	466a      	mov	r2, sp
 80a2b88:	f7ff ffe5 	bl	80a2b56 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj>
	if (sscanf(tmp, "%d", &result) == 1) {
 80a2b8c:	4622      	mov	r2, r4
 80a2b8e:	4668      	mov	r0, sp
 80a2b90:	4903      	ldr	r1, [pc, #12]	; (80a2ba0 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERi+0x20>)
 80a2b92:	f000 fefd 	bl	80a3990 <sscanf>
}
 80a2b96:	1e43      	subs	r3, r0, #1
 80a2b98:	4258      	negs	r0, r3
 80a2b9a:	4158      	adcs	r0, r3
 80a2b9c:	b004      	add	sp, #16
 80a2b9e:	bd10      	pop	{r4, pc}
 80a2ba0:	080aa7db 	.word	0x080aa7db

080a2ba4 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tERf>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, float &result) const {
 80a2ba4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80a2ba6:	4614      	mov	r4, r2
	copyTokenValue(token, tmp, sizeof(tmp));
 80a2ba8:	2310      	movs	r3, #16
 80a2baa:	466a      	mov	r2, sp
 80a2bac:	f7ff ffd3 	bl	80a2b56 <_ZNK10JsonParser14copyTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tEPcj>
	result = strtof(tmp, 0);
 80a2bb0:	2100      	movs	r1, #0
 80a2bb2:	4668      	mov	r0, sp
 80a2bb4:	f005 fc5c 	bl	80a8470 <strtof>
 80a2bb8:	6020      	str	r0, [r4, #0]
}
 80a2bba:	2001      	movs	r0, #1
 80a2bbc:	b004      	add	sp, #16
 80a2bbe:	bd10      	pop	{r4, pc}

080a2bc0 <_ZN16JsonParserString6appendEc>:
void JsonParserString::append(char ch) {
 80a2bc0:	b510      	push	{r4, lr}
 80a2bc2:	4604      	mov	r4, r0
	if (str) {
 80a2bc4:	6800      	ldr	r0, [r0, #0]
void JsonParserString::append(char ch) {
 80a2bc6:	460b      	mov	r3, r1
	if (str) {
 80a2bc8:	b128      	cbz	r0, 80a2bd6 <_ZN16JsonParserString6appendEc+0x16>
		str->concat(ch);
 80a2bca:	f001 fbd8 	bl	80a437e <_ZN6String6concatEc>
		length++;
 80a2bce:	68e3      	ldr	r3, [r4, #12]
 80a2bd0:	3301      	adds	r3, #1
 80a2bd2:	60e3      	str	r3, [r4, #12]
}
 80a2bd4:	bd10      	pop	{r4, pc}
		if (buf && length < (bufLen - 1)) {
 80a2bd6:	6860      	ldr	r0, [r4, #4]
 80a2bd8:	2800      	cmp	r0, #0
 80a2bda:	d0f8      	beq.n	80a2bce <_ZN16JsonParserString6appendEc+0xe>
 80a2bdc:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 80a2be0:	3a01      	subs	r2, #1
 80a2be2:	428a      	cmp	r2, r1
			buf[length] = ch;
 80a2be4:	bf88      	it	hi
 80a2be6:	5443      	strbhi	r3, [r0, r1]
 80a2be8:	e7f1      	b.n	80a2bce <_ZN16JsonParserString6appendEc+0xe>

080a2bea <_ZN10JsonParser10appendUtf8EtR16JsonParserString>:
	if (unicode <= 0x007f) {
 80a2bea:	287f      	cmp	r0, #127	; 0x7f
void JsonParser::appendUtf8(uint16_t unicode, JsonParserString &str) {
 80a2bec:	b570      	push	{r4, r5, r6, lr}
 80a2bee:	460c      	mov	r4, r1
 80a2bf0:	b2c1      	uxtb	r1, r0
	if (unicode <= 0x007f) {
 80a2bf2:	d804      	bhi.n	80a2bfe <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x14>
		str.append((char)value);
 80a2bf4:	4620      	mov	r0, r4
}
 80a2bf6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		str.append((char)value);
 80a2bfa:	f7ff bfe1 	b.w	80a2bc0 <_ZN16JsonParserString6appendEc>
	if (unicode <= 0x7ff) {
 80a2bfe:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80a2c02:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 80a2c06:	f340 1687 	sbfx	r6, r0, #6, #8
 80a2c0a:	f041 0580 	orr.w	r5, r1, #128	; 0x80
 80a2c0e:	d207      	bcs.n	80a2c20 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x36>
		value = (0b11000000 | ((unicode >> 6) & 0b11111));
 80a2c10:	f066 013f 	orn	r1, r6, #63	; 0x3f
		str.append((char)value);
 80a2c14:	b2c9      	uxtb	r1, r1
		str.append((char)value);
 80a2c16:	4620      	mov	r0, r4
 80a2c18:	f7ff ffd2 	bl	80a2bc0 <_ZN16JsonParserString6appendEc>
		str.append((char)value);
 80a2c1c:	4629      	mov	r1, r5
 80a2c1e:	e7e9      	b.n	80a2bf4 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0xa>
		value = 0b11100000 | ((unicode >> 12) & 0b1111);
 80a2c20:	0b03      	lsrs	r3, r0, #12
		str.append((char)value);
 80a2c22:	f043 01e0 	orr.w	r1, r3, #224	; 0xe0
 80a2c26:	4620      	mov	r0, r4
 80a2c28:	f7ff ffca 	bl	80a2bc0 <_ZN16JsonParserString6appendEc>
		value = 0b10000000 | ((unicode >> 6) & 0b111111);
 80a2c2c:	f006 013f 	and.w	r1, r6, #63	; 0x3f
		str.append((char)value);
 80a2c30:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80a2c34:	e7ef      	b.n	80a2c16 <_ZN10JsonParser10appendUtf8EtR16JsonParserString+0x2c>
	...

080a2c38 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, JsonParserString &str) const {
 80a2c38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	bool escape = false;
 80a2c3c:	2400      	movs	r4, #0
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, JsonParserString &str) const {
 80a2c3e:	4680      	mov	r8, r0
 80a2c40:	460f      	mov	r7, r1
 80a2c42:	4615      	mov	r5, r2
			escape = false;
 80a2c44:	46a1      	mov	r9, r4
	for(int ii = token->start; ii < token->end; ii++) {
 80a2c46:	684e      	ldr	r6, [r1, #4]
					if (sscanf(tmp, "%04x", &unicode) == 1) {
 80a2c48:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80a2d10 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xd8>
	for(int ii = token->start; ii < token->end; ii++) {
 80a2c4c:	68b8      	ldr	r0, [r7, #8]
 80a2c4e:	42b0      	cmp	r0, r6
 80a2c50:	dd5a      	ble.n	80a2d08 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xd0>
		if (escape) {
 80a2c52:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80a2c56:	5d99      	ldrb	r1, [r3, r6]
 80a2c58:	199a      	adds	r2, r3, r6
 80a2c5a:	2c00      	cmp	r4, #0
 80a2c5c:	d04b      	beq.n	80a2cf6 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xbe>
			switch(buffer[ii]) {
 80a2c5e:	2975      	cmp	r1, #117	; 0x75
 80a2c60:	d805      	bhi.n	80a2c6e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
 80a2c62:	296d      	cmp	r1, #109	; 0x6d
 80a2c64:	d807      	bhi.n	80a2c76 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x3e>
 80a2c66:	2962      	cmp	r1, #98	; 0x62
 80a2c68:	d01e      	beq.n	80a2ca8 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x70>
 80a2c6a:	2966      	cmp	r1, #102	; 0x66
 80a2c6c:	d01e      	beq.n	80a2cac <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x74>
				str.append(buffer[ii]);
 80a2c6e:	4628      	mov	r0, r5
 80a2c70:	f7ff ffa6 	bl	80a2bc0 <_ZN16JsonParserString6appendEc>
				break;
 80a2c74:	e03d      	b.n	80a2cf2 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
 80a2c76:	f1a1 046e 	sub.w	r4, r1, #110	; 0x6e
 80a2c7a:	2c07      	cmp	r4, #7
 80a2c7c:	d8f7      	bhi.n	80a2c6e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
 80a2c7e:	f20f 0c08 	addw	ip, pc, #8
 80a2c82:	f85c f024 	ldr.w	pc, [ip, r4, lsl #2]
 80a2c86:	bf00      	nop
 80a2c88:	080a2cb1 	.word	0x080a2cb1
 80a2c8c:	080a2c6f 	.word	0x080a2c6f
 80a2c90:	080a2c6f 	.word	0x080a2c6f
 80a2c94:	080a2c6f 	.word	0x080a2c6f
 80a2c98:	080a2cb5 	.word	0x080a2cb5
 80a2c9c:	080a2c6f 	.word	0x080a2c6f
 80a2ca0:	080a2cb9 	.word	0x080a2cb9
 80a2ca4:	080a2cbd 	.word	0x080a2cbd
				str.append('\b');
 80a2ca8:	2108      	movs	r1, #8
 80a2caa:	e7e0      	b.n	80a2c6e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\f');
 80a2cac:	210c      	movs	r1, #12
 80a2cae:	e7de      	b.n	80a2c6e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\n');
 80a2cb0:	210a      	movs	r1, #10
 80a2cb2:	e7dc      	b.n	80a2c6e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\r');
 80a2cb4:	210d      	movs	r1, #13
 80a2cb6:	e7da      	b.n	80a2c6e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				str.append('\t');
 80a2cb8:	2109      	movs	r1, #9
 80a2cba:	e7d8      	b.n	80a2c6e <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x36>
				if ((ii + 4) < token->end) {
 80a2cbc:	1d31      	adds	r1, r6, #4
 80a2cbe:	4288      	cmp	r0, r1
 80a2cc0:	dd17      	ble.n	80a2cf2 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
 80a2cc2:	a902      	add	r1, sp, #8
 80a2cc4:	4608      	mov	r0, r1
 80a2cc6:	3304      	adds	r3, #4
 80a2cc8:	4433      	add	r3, r6
						tmp[jj] = buffer[ii + jj + 1];
 80a2cca:	f812 4f01 	ldrb.w	r4, [r2, #1]!
					for(size_t jj = 0; jj < 4; jj++) {
 80a2cce:	429a      	cmp	r2, r3
						tmp[jj] = buffer[ii + jj + 1];
 80a2cd0:	f801 4b01 	strb.w	r4, [r1], #1
					for(size_t jj = 0; jj < 4; jj++) {
 80a2cd4:	d1f9      	bne.n	80a2cca <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x92>
					if (sscanf(tmp, "%04x", &unicode) == 1) {
 80a2cd6:	4651      	mov	r1, sl
 80a2cd8:	aa01      	add	r2, sp, #4
					tmp[4] = 0;
 80a2cda:	f88d 900c 	strb.w	r9, [sp, #12]
					if (sscanf(tmp, "%04x", &unicode) == 1) {
 80a2cde:	f000 fe57 	bl	80a3990 <sscanf>
 80a2ce2:	2801      	cmp	r0, #1
 80a2ce4:	d105      	bne.n	80a2cf2 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xba>
						appendUtf8((uint16_t)unicode, str);
 80a2ce6:	4629      	mov	r1, r5
 80a2ce8:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 80a2cec:	f7ff ff7d 	bl	80a2bea <_ZN10JsonParser10appendUtf8EtR16JsonParserString>
						ii += 5; // also increments in loop
 80a2cf0:	3605      	adds	r6, #5
			escape = false;
 80a2cf2:	2400      	movs	r4, #0
 80a2cf4:	e004      	b.n	80a2d00 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xc8>
		if (buffer[ii] == '\\') {
 80a2cf6:	295c      	cmp	r1, #92	; 0x5c
 80a2cf8:	d004      	beq.n	80a2d04 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xcc>
			str.append(buffer[ii]);
 80a2cfa:	4628      	mov	r0, r5
 80a2cfc:	f7ff ff60 	bl	80a2bc0 <_ZN16JsonParserString6appendEc>
	for(int ii = token->start; ii < token->end; ii++) {
 80a2d00:	3601      	adds	r6, #1
 80a2d02:	e7a3      	b.n	80a2c4c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0x14>
			escape = true;
 80a2d04:	2401      	movs	r4, #1
 80a2d06:	e7fb      	b.n	80a2d00 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString+0xc8>
}
 80a2d08:	2001      	movs	r0, #1
 80a2d0a:	b004      	add	sp, #16
 80a2d0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a2d10:	080aa3d0 	.word	0x080aa3d0

080a2d14 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>:
bool JsonParser::getTokenValue(const JsonParserGeneratorRK::jsmntok_t *token, String &result) const {
 80a2d14:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80a2d16:	460c      	mov	r4, r1
 80a2d18:	4615      	mov	r5, r2
 80a2d1a:	4606      	mov	r6, r0
	result = "";
 80a2d1c:	490b      	ldr	r1, [pc, #44]	; (80a2d4c <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String+0x38>)
 80a2d1e:	4610      	mov	r0, r2
 80a2d20:	f001 fa9e 	bl	80a4260 <_ZN6StringaSEPKc>
	result.reserve(token->end - token->start + 1);
 80a2d24:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 80a2d28:	1ac9      	subs	r1, r1, r3
 80a2d2a:	4628      	mov	r0, r5
 80a2d2c:	3101      	adds	r1, #1
 80a2d2e:	f001 fa19 	bl	80a4164 <_ZN6String7reserveEj>
JsonParserString::JsonParserString(String *str) : str(str), buf(0), bufLen(0), length(0){
 80a2d32:	2300      	movs	r3, #0
	return getTokenValue(token, strWrapper);
 80a2d34:	466a      	mov	r2, sp
 80a2d36:	4621      	mov	r1, r4
 80a2d38:	4630      	mov	r0, r6
JsonParserString::JsonParserString(String *str) : str(str), buf(0), bufLen(0), length(0){
 80a2d3a:	e9cd 3301 	strd	r3, r3, [sp, #4]
 80a2d3e:	9500      	str	r5, [sp, #0]
 80a2d40:	9303      	str	r3, [sp, #12]
	return getTokenValue(token, strWrapper);
 80a2d42:	f7ff ff79 	bl	80a2c38 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER16JsonParserString>
}
 80a2d46:	b004      	add	sp, #16
 80a2d48:	bd70      	pop	{r4, r5, r6, pc}
 80a2d4a:	bf00      	nop
 80a2d4c:	080aa2c3 	.word	0x080aa2c3

080a2d50 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_>:
bool JsonParser::getValueTokenByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, const JsonParserGeneratorRK::jsmntok_t *&value) const {
 80a2d50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a2d54:	b089      	sub	sp, #36	; 0x24
 80a2d56:	4605      	mov	r5, r0
 80a2d58:	4688      	mov	r8, r1
	String keyName;
 80a2d5a:	a804      	add	r0, sp, #16
 80a2d5c:	4912      	ldr	r1, [pc, #72]	; (80a2da8 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x58>)
bool JsonParser::getValueTokenByKey(const JsonParserGeneratorRK::jsmntok_t *container, const char *name, const JsonParserGeneratorRK::jsmntok_t *&value) const {
 80a2d5e:	4616      	mov	r6, r2
 80a2d60:	4699      	mov	r9, r3
	for(size_t ii = 0; getKeyValueTokenByIndex(container, key, value, ii); ii++) {
 80a2d62:	2700      	movs	r7, #0
	String keyName;
 80a2d64:	f001 fa2a 	bl	80a41bc <_ZN6StringC1EPKc>
	for(size_t ii = 0; getKeyValueTokenByIndex(container, key, value, ii); ii++) {
 80a2d68:	464b      	mov	r3, r9
 80a2d6a:	4641      	mov	r1, r8
 80a2d6c:	4628      	mov	r0, r5
 80a2d6e:	9700      	str	r7, [sp, #0]
 80a2d70:	aa03      	add	r2, sp, #12
 80a2d72:	f7ff fec4 	bl	80a2afe <_ZNK10JsonParser23getKeyValueTokenByIndexEPKN21JsonParserGeneratorRK9jsmntok_tERS3_S4_j>
 80a2d76:	4604      	mov	r4, r0
 80a2d78:	b170      	cbz	r0, 80a2d98 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x48>
		if (getTokenValue(key, keyName) && keyName == name) {
 80a2d7a:	4628      	mov	r0, r5
 80a2d7c:	9903      	ldr	r1, [sp, #12]
 80a2d7e:	aa04      	add	r2, sp, #16
 80a2d80:	f7ff ffc8 	bl	80a2d14 <_ZNK10JsonParser13getTokenValueEPKN21JsonParserGeneratorRK9jsmntok_tER6String>
 80a2d84:	4604      	mov	r4, r0
 80a2d86:	b908      	cbnz	r0, 80a2d8c <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x3c>
	for(size_t ii = 0; getKeyValueTokenByIndex(container, key, value, ii); ii++) {
 80a2d88:	3701      	adds	r7, #1
 80a2d8a:	e7ed      	b.n	80a2d68 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x18>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 80a2d8c:	4631      	mov	r1, r6
 80a2d8e:	a804      	add	r0, sp, #16
 80a2d90:	f001 fb33 	bl	80a43fa <_ZNK6String6equalsEPKc>
		if (getTokenValue(key, keyName) && keyName == name) {
 80a2d94:	2800      	cmp	r0, #0
 80a2d96:	d0f7      	beq.n	80a2d88 <_ZNK10JsonParser18getValueTokenByKeyEPKN21JsonParserGeneratorRK9jsmntok_tEPKcRS3_+0x38>
	String keyName;
 80a2d98:	a804      	add	r0, sp, #16
 80a2d9a:	f001 f9c5 	bl	80a4128 <_ZN6StringD1Ev>
}
 80a2d9e:	4620      	mov	r0, r4
 80a2da0:	b009      	add	sp, #36	; 0x24
 80a2da2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a2da6:	bf00      	nop
 80a2da8:	080aa2c3 	.word	0x080aa2c3

080a2dac <_ZN10JsonWriter4initEv>:
	init();
}

void JsonWriter::init() {
	// Save start of insertion point for later
	offset = 0;
 80a2dac:	2300      	movs	r3, #0

	contextIndex = 0;
	context[contextIndex].isFirst = true;
 80a2dae:	2201      	movs	r2, #1
	offset = 0;
 80a2db0:	60c3      	str	r3, [r0, #12]
	contextIndex = 0;
 80a2db2:	6143      	str	r3, [r0, #20]
	context[contextIndex].isFirst = true;
 80a2db4:	8302      	strh	r2, [r0, #24]
	context[contextIndex].terminator = 0;

	truncated = false;
 80a2db6:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a

}
 80a2dba:	4770      	bx	lr

080a2dbc <_ZN10JsonWriterC1EPcj>:
JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
 80a2dbc:	2300      	movs	r3, #0
 80a2dbe:	60c3      	str	r3, [r0, #12]
 80a2dc0:	2301      	movs	r3, #1
 80a2dc2:	7403      	strb	r3, [r0, #16]
JsonWriter::JsonWriter(char *buffer, size_t bufferLen) : JsonBuffer(buffer, bufferLen), floatPlaces(-1) {
 80a2dc4:	4b05      	ldr	r3, [pc, #20]	; (80a2ddc <_ZN10JsonWriterC1EPcj+0x20>)
 80a2dc6:	b510      	push	{r4, lr}
 80a2dc8:	6003      	str	r3, [r0, #0]
 80a2dca:	f04f 33ff 	mov.w	r3, #4294967295
JsonBuffer::JsonBuffer(char *buffer, size_t bufferLen)  : buffer(buffer), bufferLen(bufferLen), offset(0), staticBuffers(true) {
 80a2dce:	e9c0 1201 	strd	r1, r2, [r0, #4]
JsonWriter::JsonWriter(char *buffer, size_t bufferLen) : JsonBuffer(buffer, bufferLen), floatPlaces(-1) {
 80a2dd2:	62c3      	str	r3, [r0, #44]	; 0x2c
	init();
 80a2dd4:	f7ff ffea 	bl	80a2dac <_ZN10JsonWriter4initEv>
}
 80a2dd8:	bd10      	pop	{r4, pc}
 80a2dda:	bf00      	nop
 80a2ddc:	080aa40c 	.word	0x080aa40c

080a2de0 <_ZN10JsonWriter10insertCharEc>:
	}
}


void JsonWriter::insertChar(char ch) {
	if (offset < bufferLen) {
 80a2de0:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 80a2de4:	4293      	cmp	r3, r2
		buffer[offset++] = ch;
	}
	else {
		truncated = true;
 80a2de6:	bf28      	it	cs
 80a2de8:	2301      	movcs	r3, #1
void JsonWriter::insertChar(char ch) {
 80a2dea:	b510      	push	{r4, lr}
		buffer[offset++] = ch;
 80a2dec:	bf3f      	itttt	cc
 80a2dee:	6842      	ldrcc	r2, [r0, #4]
 80a2df0:	1c5c      	addcc	r4, r3, #1
 80a2df2:	60c4      	strcc	r4, [r0, #12]
 80a2df4:	54d1      	strbcc	r1, [r2, r3]
		truncated = true;
 80a2df6:	bf28      	it	cs
 80a2df8:	f880 302a 	strbcs.w	r3, [r0, #42]	; 0x2a
	}
}
 80a2dfc:	bd10      	pop	{r4, pc}

080a2dfe <_ZN10JsonWriter19finishObjectOrArrayEv>:
void JsonWriter::finishObjectOrArray() {
 80a2dfe:	b510      	push	{r4, lr}
	if (contextIndex > 0) {
 80a2e00:	6943      	ldr	r3, [r0, #20]
void JsonWriter::finishObjectOrArray() {
 80a2e02:	4604      	mov	r4, r0
	if (contextIndex > 0) {
 80a2e04:	b143      	cbz	r3, 80a2e18 <_ZN10JsonWriter19finishObjectOrArrayEv+0x1a>
		if (context[contextIndex].terminator != 0) {
 80a2e06:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80a2e0a:	7e59      	ldrb	r1, [r3, #25]
 80a2e0c:	b109      	cbz	r1, 80a2e12 <_ZN10JsonWriter19finishObjectOrArrayEv+0x14>
			insertChar(context[contextIndex].terminator);
 80a2e0e:	f7ff ffe7 	bl	80a2de0 <_ZN10JsonWriter10insertCharEc>
		contextIndex--;
 80a2e12:	6963      	ldr	r3, [r4, #20]
 80a2e14:	3b01      	subs	r3, #1
 80a2e16:	6163      	str	r3, [r4, #20]
	if (offset < bufferLen) {
 80a2e18:	2200      	movs	r2, #0
 80a2e1a:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
 80a2e1e:	6863      	ldr	r3, [r4, #4]
 80a2e20:	4288      	cmp	r0, r1
		buffer[bufferLen - 1] = 0;
 80a2e22:	bf2a      	itet	cs
 80a2e24:	185b      	addcs	r3, r3, r1
		buffer[offset] = 0;
 80a2e26:	541a      	strbcc	r2, [r3, r0]
		buffer[bufferLen - 1] = 0;
 80a2e28:	f803 2c01 	strbcs.w	r2, [r3, #-1]
}
 80a2e2c:	bd10      	pop	{r4, pc}

080a2e2e <_ZN10JsonWriter14insertvsprintfEPKcSt9__va_list>:
	va_start(ap, fmt);
	insertvsprintf(fmt, ap);
	va_end(ap);
}

void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
 80a2e2e:	b570      	push	{r4, r5, r6, lr}
 80a2e30:	4604      	mov	r4, r0
	size_t spaceAvailable = bufferLen - offset;
 80a2e32:	e9d0 5002 	ldrd	r5, r0, [r0, #8]

	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
 80a2e36:	6866      	ldr	r6, [r4, #4]
	size_t spaceAvailable = bufferLen - offset;
 80a2e38:	1a2d      	subs	r5, r5, r0
void JsonWriter::insertvsprintf(const char *fmt, va_list ap) {
 80a2e3a:	4613      	mov	r3, r2
	size_t count = vsnprintf(&buffer[offset], spaceAvailable, fmt, ap);
 80a2e3c:	4430      	add	r0, r6
 80a2e3e:	460a      	mov	r2, r1
 80a2e40:	4629      	mov	r1, r5
 80a2e42:	f000 fdc5 	bl	80a39d0 <vsnprintf>
	if (count <= spaceAvailable) {
 80a2e46:	4285      	cmp	r5, r0
		offset += count;
	}
	else {
		// Truncated, no more space left
		offset = bufferLen;
 80a2e48:	bf37      	itett	cc
 80a2e4a:	68a3      	ldrcc	r3, [r4, #8]
		offset += count;
 80a2e4c:	68e3      	ldrcs	r3, [r4, #12]
		offset = bufferLen;
 80a2e4e:	60e3      	strcc	r3, [r4, #12]
		truncated = true;
 80a2e50:	2301      	movcc	r3, #1
		offset += count;
 80a2e52:	bf26      	itte	cs
 80a2e54:	18c0      	addcs	r0, r0, r3
 80a2e56:	60e0      	strcs	r0, [r4, #12]
		truncated = true;
 80a2e58:	f884 302a 	strbcc.w	r3, [r4, #42]	; 0x2a
	}
}
 80a2e5c:	bd70      	pop	{r4, r5, r6, pc}

080a2e5e <_ZN10JsonWriter13insertsprintfEPKcz>:
void JsonWriter::insertsprintf(const char *fmt, ...) {
 80a2e5e:	b40e      	push	{r1, r2, r3}
 80a2e60:	b503      	push	{r0, r1, lr}
 80a2e62:	aa03      	add	r2, sp, #12
 80a2e64:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(ap, fmt);
 80a2e68:	9201      	str	r2, [sp, #4]
	insertvsprintf(fmt, ap);
 80a2e6a:	f7ff ffe0 	bl	80a2e2e <_ZN10JsonWriter14insertvsprintfEPKcSt9__va_list>
}
 80a2e6e:	b002      	add	sp, #8
 80a2e70:	f85d eb04 	ldr.w	lr, [sp], #4
 80a2e74:	b003      	add	sp, #12
 80a2e76:	4770      	bx	lr

080a2e78 <_ZN10JsonWriter12insertStringEPKcb>:
void JsonWriter::insertString(const char *s, bool quoted) {
 80a2e78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a2e7c:	4604      	mov	r4, r0
 80a2e7e:	460e      	mov	r6, r1
	if (quoted) {
 80a2e80:	4617      	mov	r7, r2
 80a2e82:	b112      	cbz	r2, 80a2e8a <_ZN10JsonWriter12insertStringEPKcb+0x12>
		insertChar('"');
 80a2e84:	2122      	movs	r1, #34	; 0x22
 80a2e86:	f7ff ffab 	bl	80a2de0 <_ZN10JsonWriter10insertCharEc>
void JsonWriter::insertString(const char *s, bool quoted) {
 80a2e8a:	2500      	movs	r5, #0
				insertsprintf("\\u%04X", utf16);
 80a2e8c:	f8df 8108 	ldr.w	r8, [pc, #264]	; 80a2f98 <_ZN10JsonWriter12insertStringEPKcb+0x120>
	for(size_t ii = 0; s[ii] && offset < bufferLen; ii++) {
 80a2e90:	5d71      	ldrb	r1, [r6, r5]
 80a2e92:	eb06 0905 	add.w	r9, r6, r5
 80a2e96:	2900      	cmp	r1, #0
 80a2e98:	d074      	beq.n	80a2f84 <_ZN10JsonWriter12insertStringEPKcb+0x10c>
 80a2e9a:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
 80a2e9e:	429a      	cmp	r2, r3
 80a2ea0:	d270      	bcs.n	80a2f84 <_ZN10JsonWriter12insertStringEPKcb+0x10c>
		if (s[ii] & 0x80) {
 80a2ea2:	060b      	lsls	r3, r1, #24
 80a2ea4:	d534      	bpl.n	80a2f10 <_ZN10JsonWriter12insertStringEPKcb+0x98>
			if (((s[ii] & 0b11110000) == 0b11100000) && ((s[ii+1] & 0b11000000) == 0b10000000) && ((s[ii+2] & 0b11000000) == 0b10000000)) {
 80a2ea6:	f001 03f0 	and.w	r3, r1, #240	; 0xf0
 80a2eaa:	2be0      	cmp	r3, #224	; 0xe0
 80a2eac:	f105 0901 	add.w	r9, r5, #1
 80a2eb0:	d11d      	bne.n	80a2eee <_ZN10JsonWriter12insertStringEPKcb+0x76>
 80a2eb2:	f816 2009 	ldrb.w	r2, [r6, r9]
 80a2eb6:	f002 03c0 	and.w	r3, r2, #192	; 0xc0
 80a2eba:	2b80      	cmp	r3, #128	; 0x80
 80a2ebc:	d139      	bne.n	80a2f32 <_ZN10JsonWriter12insertStringEPKcb+0xba>
 80a2ebe:	f105 0902 	add.w	r9, r5, #2
 80a2ec2:	f816 3009 	ldrb.w	r3, [r6, r9]
 80a2ec6:	f003 00c0 	and.w	r0, r3, #192	; 0xc0
 80a2eca:	2880      	cmp	r0, #128	; 0x80
 80a2ecc:	d131      	bne.n	80a2f32 <_ZN10JsonWriter12insertStringEPKcb+0xba>
				uint16_t utf16 = ((s[ii] & 0b1111) << 12) | ((s[ii+1] & 0b111111) << 6) | (s[ii+2] & 0b111111);
 80a2ece:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80a2ed2:	0192      	lsls	r2, r2, #6
 80a2ed4:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 80a2ed8:	f402 627c 	and.w	r2, r2, #4032	; 0xfc0
 80a2edc:	431a      	orrs	r2, r3
				insertsprintf("\\u%04X", utf16);
 80a2ede:	b292      	uxth	r2, r2
				insertsprintf("\\u%04X", utf16);
 80a2ee0:	4641      	mov	r1, r8
 80a2ee2:	4620      	mov	r0, r4
 80a2ee4:	f7ff ffbb 	bl	80a2e5e <_ZN10JsonWriter13insertsprintfEPKcz>
				ii++; // plus one more in loop increment
 80a2ee8:	464d      	mov	r5, r9
	for(size_t ii = 0; s[ii] && offset < bufferLen; ii++) {
 80a2eea:	3501      	adds	r5, #1
 80a2eec:	e7d0      	b.n	80a2e90 <_ZN10JsonWriter12insertStringEPKcb+0x18>
			if (((s[ii] & 0b11100000) == 0b11000000) && ((s[ii+1] & 0b11000000) == 0b10000000)) {
 80a2eee:	f001 03e0 	and.w	r3, r1, #224	; 0xe0
 80a2ef2:	2bc0      	cmp	r3, #192	; 0xc0
 80a2ef4:	d11d      	bne.n	80a2f32 <_ZN10JsonWriter12insertStringEPKcb+0xba>
 80a2ef6:	f816 3009 	ldrb.w	r3, [r6, r9]
 80a2efa:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
 80a2efe:	2a80      	cmp	r2, #128	; 0x80
 80a2f00:	d117      	bne.n	80a2f32 <_ZN10JsonWriter12insertStringEPKcb+0xba>
				uint16_t utf16 = ((s[ii] & 0b11111) << 6) | (s[ii+1] & 0b111111);
 80a2f02:	0189      	lsls	r1, r1, #6
 80a2f04:	f401 62f8 	and.w	r2, r1, #1984	; 0x7c0
 80a2f08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
				insertsprintf("\\u%04X", utf16);
 80a2f0c:	431a      	orrs	r2, r3
 80a2f0e:	e7e7      	b.n	80a2ee0 <_ZN10JsonWriter12insertStringEPKcb+0x68>
			switch(s[ii]) {
 80a2f10:	290d      	cmp	r1, #13
 80a2f12:	d80a      	bhi.n	80a2f2a <_ZN10JsonWriter12insertStringEPKcb+0xb2>
 80a2f14:	2907      	cmp	r1, #7
 80a2f16:	d90c      	bls.n	80a2f32 <_ZN10JsonWriter12insertStringEPKcb+0xba>
 80a2f18:	f1a1 0308 	sub.w	r3, r1, #8
 80a2f1c:	2b05      	cmp	r3, #5
 80a2f1e:	d808      	bhi.n	80a2f32 <_ZN10JsonWriter12insertStringEPKcb+0xba>
 80a2f20:	e8df f003 	tbb	[pc, r3]
 80a2f24:	0717230b 	.word	0x0717230b
 80a2f28:	1d11      	.short	0x1d11
 80a2f2a:	2922      	cmp	r1, #34	; 0x22
 80a2f2c:	d023      	beq.n	80a2f76 <_ZN10JsonWriter12insertStringEPKcb+0xfe>
 80a2f2e:	295c      	cmp	r1, #92	; 0x5c
 80a2f30:	d021      	beq.n	80a2f76 <_ZN10JsonWriter12insertStringEPKcb+0xfe>
				insertChar(s[ii]);
 80a2f32:	4620      	mov	r0, r4
 80a2f34:	f7ff ff54 	bl	80a2de0 <_ZN10JsonWriter10insertCharEc>
				break;
 80a2f38:	e7d7      	b.n	80a2eea <_ZN10JsonWriter12insertStringEPKcb+0x72>
				insertChar('\\');
 80a2f3a:	215c      	movs	r1, #92	; 0x5c
 80a2f3c:	4620      	mov	r0, r4
 80a2f3e:	f7ff ff4f 	bl	80a2de0 <_ZN10JsonWriter10insertCharEc>
				insertChar('b');
 80a2f42:	2162      	movs	r1, #98	; 0x62
 80a2f44:	e7f5      	b.n	80a2f32 <_ZN10JsonWriter12insertStringEPKcb+0xba>
				insertChar('\\');
 80a2f46:	215c      	movs	r1, #92	; 0x5c
 80a2f48:	4620      	mov	r0, r4
 80a2f4a:	f7ff ff49 	bl	80a2de0 <_ZN10JsonWriter10insertCharEc>
				insertChar('f');
 80a2f4e:	2166      	movs	r1, #102	; 0x66
 80a2f50:	e7ef      	b.n	80a2f32 <_ZN10JsonWriter12insertStringEPKcb+0xba>
				insertChar('\\');
 80a2f52:	215c      	movs	r1, #92	; 0x5c
 80a2f54:	4620      	mov	r0, r4
 80a2f56:	f7ff ff43 	bl	80a2de0 <_ZN10JsonWriter10insertCharEc>
				insertChar('n');
 80a2f5a:	216e      	movs	r1, #110	; 0x6e
 80a2f5c:	e7e9      	b.n	80a2f32 <_ZN10JsonWriter12insertStringEPKcb+0xba>
				insertChar('\\');
 80a2f5e:	215c      	movs	r1, #92	; 0x5c
 80a2f60:	4620      	mov	r0, r4
 80a2f62:	f7ff ff3d 	bl	80a2de0 <_ZN10JsonWriter10insertCharEc>
				insertChar('r');
 80a2f66:	2172      	movs	r1, #114	; 0x72
 80a2f68:	e7e3      	b.n	80a2f32 <_ZN10JsonWriter12insertStringEPKcb+0xba>
				insertChar('\\');
 80a2f6a:	215c      	movs	r1, #92	; 0x5c
 80a2f6c:	4620      	mov	r0, r4
 80a2f6e:	f7ff ff37 	bl	80a2de0 <_ZN10JsonWriter10insertCharEc>
				insertChar('t');
 80a2f72:	2174      	movs	r1, #116	; 0x74
 80a2f74:	e7dd      	b.n	80a2f32 <_ZN10JsonWriter12insertStringEPKcb+0xba>
				insertChar('\\');
 80a2f76:	215c      	movs	r1, #92	; 0x5c
 80a2f78:	4620      	mov	r0, r4
 80a2f7a:	f7ff ff31 	bl	80a2de0 <_ZN10JsonWriter10insertCharEc>
				insertChar(s[ii]);
 80a2f7e:	f899 1000 	ldrb.w	r1, [r9]
 80a2f82:	e7d6      	b.n	80a2f32 <_ZN10JsonWriter12insertStringEPKcb+0xba>
	if (quoted) {
 80a2f84:	b12f      	cbz	r7, 80a2f92 <_ZN10JsonWriter12insertStringEPKcb+0x11a>
		insertChar('"');
 80a2f86:	4620      	mov	r0, r4
}
 80a2f88:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		insertChar('"');
 80a2f8c:	2122      	movs	r1, #34	; 0x22
 80a2f8e:	f7ff bf27 	b.w	80a2de0 <_ZN10JsonWriter10insertCharEc>
}
 80a2f92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a2f96:	bf00      	nop
 80a2f98:	080aa3d5 	.word	0x080aa3d5

080a2f9c <_ZN10JsonWriter20insertCheckSeparatorEv>:

void JsonWriter::insertCheckSeparator() {
	if (context[contextIndex].isFirst) {
 80a2f9c:	6942      	ldr	r2, [r0, #20]
 80a2f9e:	eb00 0342 	add.w	r3, r0, r2, lsl #1
 80a2fa2:	7e1a      	ldrb	r2, [r3, #24]
 80a2fa4:	b112      	cbz	r2, 80a2fac <_ZN10JsonWriter20insertCheckSeparatorEv+0x10>
		context[contextIndex].isFirst = false;
 80a2fa6:	2200      	movs	r2, #0
 80a2fa8:	761a      	strb	r2, [r3, #24]
	}
	else {
		insertChar(',');
	}
}
 80a2faa:	4770      	bx	lr
		insertChar(',');
 80a2fac:	212c      	movs	r1, #44	; 0x2c
 80a2fae:	f7ff bf17 	b.w	80a2de0 <_ZN10JsonWriter10insertCharEc>

080a2fb2 <_ZN10JsonWriter18startObjectOrArrayEcc>:
bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
 80a2fb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
 80a2fb4:	6943      	ldr	r3, [r0, #20]
bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
 80a2fb6:	460e      	mov	r6, r1
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
 80a2fb8:	3301      	adds	r3, #1
 80a2fba:	2b08      	cmp	r3, #8
bool JsonWriter::startObjectOrArray(char startChar, char endChar) {
 80a2fbc:	4617      	mov	r7, r2
	if ((contextIndex + 1) >= MAX_NESTED_CONTEXT) {
 80a2fbe:	d80e      	bhi.n	80a2fde <_ZN10JsonWriter18startObjectOrArrayEcc+0x2c>
	insertCheckSeparator();
 80a2fc0:	f7ff ffec 	bl	80a2f9c <_ZN10JsonWriter20insertCheckSeparatorEv>
	context[contextIndex].isFirst = true;
 80a2fc4:	2501      	movs	r5, #1
	contextIndex++;
 80a2fc6:	6943      	ldr	r3, [r0, #20]
	insertChar(startChar);
 80a2fc8:	4631      	mov	r1, r6
	contextIndex++;
 80a2fca:	1c5a      	adds	r2, r3, #1
 80a2fcc:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80a2fd0:	6142      	str	r2, [r0, #20]
	context[contextIndex].isFirst = true;
 80a2fd2:	769d      	strb	r5, [r3, #26]
	context[contextIndex].terminator = endChar;
 80a2fd4:	76df      	strb	r7, [r3, #27]
	insertChar(startChar);
 80a2fd6:	f7ff ff03 	bl	80a2de0 <_ZN10JsonWriter10insertCharEc>
 80a2fda:	4628      	mov	r0, r5
}
 80a2fdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return false;
 80a2fde:	2000      	movs	r0, #0
 80a2fe0:	e7fc      	b.n	80a2fdc <_ZN10JsonWriter18startObjectOrArrayEcc+0x2a>
	...

080a2fe4 <_ZN10JsonWriter11insertValueEf>:
	else {
		insertString("false");
	}
}

void JsonWriter::insertValue(float value) {
 80a2fe4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a2fe6:	4604      	mov	r4, r0
	if (floatPlaces >= 0) {
 80a2fe8:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 80a2fea:	4608      	mov	r0, r1
 80a2fec:	f002 fcb8 	bl	80a5960 <__aeabi_f2d>
 80a2ff0:	2d00      	cmp	r5, #0
 80a2ff2:	4602      	mov	r2, r0
 80a2ff4:	460b      	mov	r3, r1
 80a2ff6:	db08      	blt.n	80a300a <_ZN10JsonWriter11insertValueEf+0x26>
		insertsprintf("%.*f", floatPlaces, value);
 80a2ff8:	e9cd 2300 	strd	r2, r3, [sp]
 80a2ffc:	4620      	mov	r0, r4
 80a2ffe:	462a      	mov	r2, r5
 80a3000:	4905      	ldr	r1, [pc, #20]	; (80a3018 <_ZN10JsonWriter11insertValueEf+0x34>)
 80a3002:	f7ff ff2c 	bl	80a2e5e <_ZN10JsonWriter13insertsprintfEPKcz>
	}
	else {
		insertsprintf("%f", value);
	}
}
 80a3006:	b003      	add	sp, #12
 80a3008:	bd30      	pop	{r4, r5, pc}
		insertsprintf("%f", value);
 80a300a:	4620      	mov	r0, r4
 80a300c:	4903      	ldr	r1, [pc, #12]	; (80a301c <_ZN10JsonWriter11insertValueEf+0x38>)
}
 80a300e:	b003      	add	sp, #12
 80a3010:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		insertsprintf("%f", value);
 80a3014:	f7ff bf23 	b.w	80a2e5e <_ZN10JsonWriter13insertsprintfEPKcz>
 80a3018:	080aa3dc 	.word	0x080aa3dc
 80a301c:	080aa3e1 	.word	0x080aa3e1

080a3020 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>:

/**
 * Parse JSON string and fill tokens.
 */
int jsmn_parse(jsmn_parser *parser, const char *js, size_t len,
		jsmntok_t *tokens, unsigned int num_tokens) {
 80a3020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a3024:	f04f 0c01 	mov.w	ip, #1
	tok->start = tok->end = -1;
 80a3028:	f04f 35ff 	mov.w	r5, #4294967295
		jsmntok_t *tokens, unsigned int num_tokens) {
 80a302c:	4604      	mov	r4, r0
	int r;
	int i;
	jsmntok_t *token;
	int count = parser->toknext;
 80a302e:	6840      	ldr	r0, [r0, #4]

	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 80a3030:	f8d4 e000 	ldr.w	lr, [r4]
 80a3034:	4596      	cmp	lr, r2
 80a3036:	f080 81be 	bcs.w	80a33b6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x396>
 80a303a:	f811 800e 	ldrb.w	r8, [r1, lr]
 80a303e:	f1b8 0f00 	cmp.w	r8, #0
 80a3042:	f000 81b8 	beq.w	80a33b6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x396>
		char c;
		jsmntype_t type;

		c = js[parser->pos];
		switch (c) {
 80a3046:	f1b8 0f3a 	cmp.w	r8, #58	; 0x3a
 80a304a:	f000 809b 	beq.w	80a3184 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x164>
 80a304e:	d833      	bhi.n	80a30b8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x98>
 80a3050:	f1b8 0f22 	cmp.w	r8, #34	; 0x22
 80a3054:	f000 80ad 	beq.w	80a31b2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x192>
 80a3058:	d810      	bhi.n	80a307c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x5c>
 80a305a:	f1a8 0809 	sub.w	r8, r8, #9
 80a305e:	fa5f f888 	uxtb.w	r8, r8
 80a3062:	f1b8 0f17 	cmp.w	r8, #23
 80a3066:	d80d      	bhi.n	80a3084 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x64>
 80a3068:	4fc0      	ldr	r7, [pc, #768]	; (80a336c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x34c>)
 80a306a:	fa0c f808 	lsl.w	r8, ip, r8
 80a306e:	ea18 0f07 	tst.w	r8, r7
 80a3072:	d007      	beq.n	80a3084 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x64>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 80a3074:	6827      	ldr	r7, [r4, #0]
 80a3076:	3701      	adds	r7, #1
 80a3078:	6027      	str	r7, [r4, #0]
 80a307a:	e7d9      	b.n	80a3030 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x10>
		switch (c) {
 80a307c:	f1b8 0f2c 	cmp.w	r8, #44	; 0x2c
 80a3080:	f000 8136 	beq.w	80a32f0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2d0>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 80a3084:	f8d4 8000 	ldr.w	r8, [r4]
 80a3088:	4542      	cmp	r2, r8
 80a308a:	d90e      	bls.n	80a30aa <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x8a>
 80a308c:	f811 7008 	ldrb.w	r7, [r1, r8]
 80a3090:	b15f      	cbz	r7, 80a30aa <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x8a>
		switch (js[parser->pos]) {
 80a3092:	2f3a      	cmp	r7, #58	; 0x3a
 80a3094:	f200 816e 	bhi.w	80a3374 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x354>
 80a3098:	2f1f      	cmp	r7, #31
 80a309a:	f200 8152 	bhi.w	80a3342 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x322>
 80a309e:	2f0a      	cmp	r7, #10
 80a30a0:	f200 8161 	bhi.w	80a3366 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x346>
 80a30a4:	2f08      	cmp	r7, #8
 80a30a6:	f240 8157 	bls.w	80a3358 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x338>
	if (tokens == NULL) {
 80a30aa:	2b00      	cmp	r3, #0
 80a30ac:	f040 8167 	bne.w	80a337e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x35e>
		parser->pos--;
 80a30b0:	f108 37ff 	add.w	r7, r8, #4294967295
	parser->pos--;
 80a30b4:	6027      	str	r7, [r4, #0]
 80a30b6:	e0ab      	b.n	80a3210 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1f0>
		switch (c) {
 80a30b8:	f1b8 0f7b 	cmp.w	r8, #123	; 0x7b
 80a30bc:	d03a      	beq.n	80a3134 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x114>
 80a30be:	d80a      	bhi.n	80a30d6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xb6>
 80a30c0:	f1b8 0f5b 	cmp.w	r8, #91	; 0x5b
 80a30c4:	d036      	beq.n	80a3134 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x114>
 80a30c6:	f1b8 0f5d 	cmp.w	r8, #93	; 0x5d
 80a30ca:	d1db      	bne.n	80a3084 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x64>
				token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
				token->start = parser->pos;
				parser->toksuper = parser->toknext - 1;
				break;
			case '}': case ']':
				if (tokens == NULL)
 80a30cc:	2b00      	cmp	r3, #0
 80a30ce:	d0d1      	beq.n	80a3074 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x54>
					break;
				type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
 80a30d0:	f04f 0b02 	mov.w	fp, #2
 80a30d4:	e006      	b.n	80a30e4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xc4>
		switch (c) {
 80a30d6:	f1b8 0f7d 	cmp.w	r8, #125	; 0x7d
 80a30da:	d1d3      	bne.n	80a3084 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x64>
				if (tokens == NULL)
 80a30dc:	2b00      	cmp	r3, #0
 80a30de:	d0c9      	beq.n	80a3074 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x54>
				type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
 80a30e0:	f04f 0b01 	mov.w	fp, #1
						break;
					}
					token = &tokens[token->parent];
				}
#else
				for (i = parser->toknext - 1; i >= 0; i--) {
 80a30e4:	6867      	ldr	r7, [r4, #4]
 80a30e6:	f107 38ff 	add.w	r8, r7, #4294967295
 80a30ea:	eb03 1907 	add.w	r9, r3, r7, lsl #4
 80a30ee:	f1b8 0f00 	cmp.w	r8, #0
 80a30f2:	db4f      	blt.n	80a3194 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x174>
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
 80a30f4:	f859 7c0c 	ldr.w	r7, [r9, #-12]
 80a30f8:	f1a9 0a10 	sub.w	sl, r9, #16
 80a30fc:	3701      	adds	r7, #1
 80a30fe:	d045      	beq.n	80a318c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x16c>
 80a3100:	f859 7c08 	ldr.w	r7, [r9, #-8]
 80a3104:	1c7e      	adds	r6, r7, #1
 80a3106:	d141      	bne.n	80a318c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x16c>
						if (token->type != type) {
 80a3108:	f89a 9000 	ldrb.w	r9, [sl]
 80a310c:	45d9      	cmp	r9, fp
 80a310e:	d145      	bne.n	80a319c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x17c>
							return JSMN_ERROR_INVAL;
						}
						parser->toksuper = -1;
 80a3110:	60a7      	str	r7, [r4, #8]
						token->end = parser->pos + 1;
 80a3112:	f10e 0701 	add.w	r7, lr, #1
 80a3116:	f8ca 7008 	str.w	r7, [sl, #8]
						break;
					}
				}
				/* Error if unmatched closing bracket */
				if (i == -1) return JSMN_ERROR_INVAL;
 80a311a:	eb03 1e08 	add.w	lr, r3, r8, lsl #4
				for (; i >= 0; i--) {
					token = &tokens[i];
					if (token->start != -1 && token->end == -1) {
 80a311e:	f8de 7004 	ldr.w	r7, [lr, #4]
 80a3122:	3701      	adds	r7, #1
 80a3124:	d03d      	beq.n	80a31a2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x182>
 80a3126:	f8de 7008 	ldr.w	r7, [lr, #8]
 80a312a:	3701      	adds	r7, #1
 80a312c:	d139      	bne.n	80a31a2 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x182>
					parser->toksuper = tokens[parser->toksuper].parent;
#else
					for (i = parser->toknext - 1; i >= 0; i--) {
						if (tokens[i].type == JSMN_ARRAY || tokens[i].type == JSMN_OBJECT) {
							if (tokens[i].start != -1 && tokens[i].end == -1) {
								parser->toksuper = i;
 80a312e:	f8c4 8008 	str.w	r8, [r4, #8]
								break;
 80a3132:	e79f      	b.n	80a3074 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x54>
				count++;
 80a3134:	3001      	adds	r0, #1
				if (tokens == NULL) {
 80a3136:	2b00      	cmp	r3, #0
 80a3138:	d09c      	beq.n	80a3074 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x54>
	if (parser->toknext >= num_tokens) {
 80a313a:	6867      	ldr	r7, [r4, #4]
 80a313c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80a313e:	42be      	cmp	r6, r7
 80a3140:	d94e      	bls.n	80a31e0 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1c0>
	tok->size = 0;
 80a3142:	2600      	movs	r6, #0
	tok = &tokens[parser->toknext++];
 80a3144:	f107 0e01 	add.w	lr, r7, #1
 80a3148:	f8c4 e004 	str.w	lr, [r4, #4]
 80a314c:	eb03 1e07 	add.w	lr, r3, r7, lsl #4
	tok->start = tok->end = -1;
 80a3150:	e9ce 5501 	strd	r5, r5, [lr, #4]
	tok->size = 0;
 80a3154:	f8ce 600c 	str.w	r6, [lr, #12]
	tok = &tokens[parser->toknext++];
 80a3158:	ea4f 1a07 	mov.w	sl, r7, lsl #4
				if (parser->toksuper != -1) {
 80a315c:	68a7      	ldr	r7, [r4, #8]
 80a315e:	1c7e      	adds	r6, r7, #1
					tokens[parser->toksuper].size++;
 80a3160:	bf1f      	itttt	ne
 80a3162:	eb03 1907 	addne.w	r9, r3, r7, lsl #4
 80a3166:	f8d9 700c 	ldrne.w	r7, [r9, #12]
 80a316a:	3701      	addne	r7, #1
 80a316c:	f8c9 700c 	strne.w	r7, [r9, #12]
				token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
 80a3170:	f1b8 0f7b 	cmp.w	r8, #123	; 0x7b
 80a3174:	bf0c      	ite	eq
 80a3176:	2701      	moveq	r7, #1
 80a3178:	2702      	movne	r7, #2
 80a317a:	f803 700a 	strb.w	r7, [r3, sl]
				token->start = parser->pos;
 80a317e:	6827      	ldr	r7, [r4, #0]
 80a3180:	f8ce 7004 	str.w	r7, [lr, #4]
				parser->toksuper = parser->toknext - 1;
 80a3184:	6867      	ldr	r7, [r4, #4]
 80a3186:	3f01      	subs	r7, #1
 80a3188:	60a7      	str	r7, [r4, #8]
				break;
 80a318a:	e773      	b.n	80a3074 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x54>
				for (i = parser->toknext - 1; i >= 0; i--) {
 80a318c:	46d1      	mov	r9, sl
 80a318e:	f108 38ff 	add.w	r8, r8, #4294967295
 80a3192:	e7ac      	b.n	80a30ee <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xce>
				if (i == -1) return JSMN_ERROR_INVAL;
 80a3194:	f1b8 3fff 	cmp.w	r8, #4294967295
 80a3198:	f47f af6c 	bne.w	80a3074 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x54>
							return JSMN_ERROR_INVAL;
 80a319c:	f06f 0001 	mvn.w	r0, #1
 80a31a0:	e020      	b.n	80a31e4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1c4>
				for (; i >= 0; i--) {
 80a31a2:	f108 38ff 	add.w	r8, r8, #4294967295
 80a31a6:	f1b8 3fff 	cmp.w	r8, #4294967295
 80a31aa:	f1ae 0e10 	sub.w	lr, lr, #16
 80a31ae:	d1b6      	bne.n	80a311e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0xfe>
 80a31b0:	e760      	b.n	80a3074 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x54>
	parser->pos++;
 80a31b2:	f10e 0901 	add.w	r9, lr, #1
 80a31b6:	f8c4 9000 	str.w	r9, [r4]
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 80a31ba:	f8d4 8000 	ldr.w	r8, [r4]
 80a31be:	4542      	cmp	r2, r8
 80a31c0:	f240 8091 	bls.w	80a32e6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2c6>
 80a31c4:	f811 7008 	ldrb.w	r7, [r1, r8]
 80a31c8:	2f00      	cmp	r7, #0
 80a31ca:	f000 808c 	beq.w	80a32e6 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2c6>
		if (c == '\"') {
 80a31ce:	2f22      	cmp	r7, #34	; 0x22
 80a31d0:	d12e      	bne.n	80a3230 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x210>
			if (tokens == NULL) {
 80a31d2:	b1eb      	cbz	r3, 80a3210 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1f0>
	if (parser->toknext >= num_tokens) {
 80a31d4:	6867      	ldr	r7, [r4, #4]
 80a31d6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80a31d8:	42be      	cmp	r6, r7
 80a31da:	d805      	bhi.n	80a31e8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1c8>
		parser->pos = start;
 80a31dc:	f8c4 e000 	str.w	lr, [r4]
					return JSMN_ERROR_NOMEM;
 80a31e0:	f04f 30ff 	mov.w	r0, #4294967295
			}
		}
	}

	return count;
}
 80a31e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	tok->size = 0;
 80a31e8:	2600      	movs	r6, #0
	token->type = type;
 80a31ea:	f04f 0a03 	mov.w	sl, #3
	tok = &tokens[parser->toknext++];
 80a31ee:	f107 0e01 	add.w	lr, r7, #1
 80a31f2:	ea4f 1807 	mov.w	r8, r7, lsl #4
 80a31f6:	eb03 1707 	add.w	r7, r3, r7, lsl #4
 80a31fa:	f8c4 e004 	str.w	lr, [r4, #4]
	tok->start = tok->end = -1;
 80a31fe:	e9c7 5501 	strd	r5, r5, [r7, #4]
	tok->size = 0;
 80a3202:	60fe      	str	r6, [r7, #12]
			jsmn_fill_token(token, JSMN_STRING, start+1, parser->pos);
 80a3204:	f8d4 e000 	ldr.w	lr, [r4]
	token->type = type;
 80a3208:	f803 a008 	strb.w	sl, [r3, r8]
	token->end = end;
 80a320c:	e9c7 9e01 	strd	r9, lr, [r7, #4]
				if (parser->toksuper != -1 && tokens != NULL)
 80a3210:	68a7      	ldr	r7, [r4, #8]
				count++;
 80a3212:	3001      	adds	r0, #1
				if (parser->toksuper != -1 && tokens != NULL)
 80a3214:	1c7e      	adds	r6, r7, #1
 80a3216:	f43f af2d 	beq.w	80a3074 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x54>
 80a321a:	2b00      	cmp	r3, #0
 80a321c:	f43f af2a 	beq.w	80a3074 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x54>
					tokens[parser->toksuper].size++;
 80a3220:	eb03 1e07 	add.w	lr, r3, r7, lsl #4
 80a3224:	f8de 700c 	ldr.w	r7, [lr, #12]
 80a3228:	3701      	adds	r7, #1
 80a322a:	f8ce 700c 	str.w	r7, [lr, #12]
 80a322e:	e721      	b.n	80a3074 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x54>
		if (c == '\\' && parser->pos + 1 < len) {
 80a3230:	2f5c      	cmp	r7, #92	; 0x5c
 80a3232:	d111      	bne.n	80a3258 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x238>
 80a3234:	f108 0701 	add.w	r7, r8, #1
 80a3238:	42ba      	cmp	r2, r7
 80a323a:	d90d      	bls.n	80a3258 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x238>
			parser->pos++;
 80a323c:	6027      	str	r7, [r4, #0]
			switch (js[parser->pos]) {
 80a323e:	5dcf      	ldrb	r7, [r1, r7]
 80a3240:	2f75      	cmp	r7, #117	; 0x75
 80a3242:	d82b      	bhi.n	80a329c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x27c>
 80a3244:	2f6d      	cmp	r7, #109	; 0x6d
 80a3246:	d80b      	bhi.n	80a3260 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x240>
 80a3248:	2f66      	cmp	r7, #102	; 0x66
 80a324a:	d827      	bhi.n	80a329c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x27c>
 80a324c:	2f5b      	cmp	r7, #91	; 0x5b
 80a324e:	d81d      	bhi.n	80a328c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x26c>
 80a3250:	2f22      	cmp	r7, #34	; 0x22
 80a3252:	d001      	beq.n	80a3258 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x238>
 80a3254:	2f2f      	cmp	r7, #47	; 0x2f
 80a3256:	d121      	bne.n	80a329c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x27c>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 80a3258:	6827      	ldr	r7, [r4, #0]
 80a325a:	3701      	adds	r7, #1
 80a325c:	6027      	str	r7, [r4, #0]
 80a325e:	e7ac      	b.n	80a31ba <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x19a>
 80a3260:	3f6e      	subs	r7, #110	; 0x6e
 80a3262:	2f07      	cmp	r7, #7
 80a3264:	d81a      	bhi.n	80a329c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x27c>
 80a3266:	a601      	add	r6, pc, #4	; (adr r6, 80a326c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x24c>)
 80a3268:	f856 f027 	ldr.w	pc, [r6, r7, lsl #2]
 80a326c:	080a3259 	.word	0x080a3259
 80a3270:	080a329d 	.word	0x080a329d
 80a3274:	080a329d 	.word	0x080a329d
 80a3278:	080a329d 	.word	0x080a329d
 80a327c:	080a3259 	.word	0x080a3259
 80a3280:	080a329d 	.word	0x080a329d
 80a3284:	080a3259 	.word	0x080a3259
 80a3288:	080a32a3 	.word	0x080a32a3
 80a328c:	f240 4641 	movw	r6, #1089	; 0x441
 80a3290:	3f5c      	subs	r7, #92	; 0x5c
 80a3292:	b2ff      	uxtb	r7, r7
 80a3294:	fa0c f707 	lsl.w	r7, ip, r7
 80a3298:	4237      	tst	r7, r6
 80a329a:	d1dd      	bne.n	80a3258 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x238>
			parser->pos = start;
 80a329c:	f8c4 e000 	str.w	lr, [r4]
				if (r < 0) return r;
 80a32a0:	e77c      	b.n	80a319c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x17c>
					parser->pos++;
 80a32a2:	f04f 0a04 	mov.w	sl, #4
 80a32a6:	f108 0702 	add.w	r7, r8, #2
 80a32aa:	6027      	str	r7, [r4, #0]
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
 80a32ac:	f8d4 8000 	ldr.w	r8, [r4]
 80a32b0:	4542      	cmp	r2, r8
 80a32b2:	d803      	bhi.n	80a32bc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x29c>
					parser->pos--;
 80a32b4:	6827      	ldr	r7, [r4, #0]
 80a32b6:	3f01      	subs	r7, #1
 80a32b8:	6027      	str	r7, [r4, #0]
					break;
 80a32ba:	e7cd      	b.n	80a3258 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x238>
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
 80a32bc:	f811 7008 	ldrb.w	r7, [r1, r8]
 80a32c0:	2f00      	cmp	r7, #0
 80a32c2:	d0f7      	beq.n	80a32b4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x294>
						if(!((js[parser->pos] >= 48 && js[parser->pos] <= 57) || /* 0-9 */
 80a32c4:	f1a7 0b30 	sub.w	fp, r7, #48	; 0x30
 80a32c8:	f1bb 0f09 	cmp.w	fp, #9
 80a32cc:	d904      	bls.n	80a32d8 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2b8>
 80a32ce:	f027 0720 	bic.w	r7, r7, #32
 80a32d2:	3f41      	subs	r7, #65	; 0x41
 80a32d4:	2f05      	cmp	r7, #5
 80a32d6:	d8e1      	bhi.n	80a329c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x27c>
						parser->pos++;
 80a32d8:	f108 0701 	add.w	r7, r8, #1
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
 80a32dc:	f1ba 0a01 	subs.w	sl, sl, #1
						parser->pos++;
 80a32e0:	6027      	str	r7, [r4, #0]
					for(i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0'; i++) {
 80a32e2:	d1e3      	bne.n	80a32ac <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x28c>
 80a32e4:	e7e6      	b.n	80a32b4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x294>
	parser->pos = start;
 80a32e6:	f8c4 e000 	str.w	lr, [r4]
				return JSMN_ERROR_PART;
 80a32ea:	f06f 0002 	mvn.w	r0, #2
 80a32ee:	e779      	b.n	80a31e4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1c4>
				if (tokens != NULL && parser->toksuper != -1 &&
 80a32f0:	2b00      	cmp	r3, #0
 80a32f2:	f43f aebf 	beq.w	80a3074 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x54>
 80a32f6:	68a7      	ldr	r7, [r4, #8]
 80a32f8:	1c7e      	adds	r6, r7, #1
 80a32fa:	f43f aebb 	beq.w	80a3074 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x54>
						tokens[parser->toksuper].type != JSMN_ARRAY &&
 80a32fe:	013f      	lsls	r7, r7, #4
 80a3300:	5ddf      	ldrb	r7, [r3, r7]
 80a3302:	3f01      	subs	r7, #1
 80a3304:	2f01      	cmp	r7, #1
 80a3306:	f67f aeb5 	bls.w	80a3074 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x54>
					for (i = parser->toknext - 1; i >= 0; i--) {
 80a330a:	6867      	ldr	r7, [r4, #4]
 80a330c:	f107 38ff 	add.w	r8, r7, #4294967295
 80a3310:	eb03 1e07 	add.w	lr, r3, r7, lsl #4
 80a3314:	f1b8 0f00 	cmp.w	r8, #0
 80a3318:	f6ff aeac 	blt.w	80a3074 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x54>
						if (tokens[i].type == JSMN_ARRAY || tokens[i].type == JSMN_OBJECT) {
 80a331c:	f81e 7c10 	ldrb.w	r7, [lr, #-16]
 80a3320:	3f01      	subs	r7, #1
 80a3322:	2f01      	cmp	r7, #1
 80a3324:	d808      	bhi.n	80a3338 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x318>
							if (tokens[i].start != -1 && tokens[i].end == -1) {
 80a3326:	f85e 7c0c 	ldr.w	r7, [lr, #-12]
 80a332a:	3701      	adds	r7, #1
 80a332c:	d004      	beq.n	80a3338 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x318>
 80a332e:	f85e 7c08 	ldr.w	r7, [lr, #-8]
 80a3332:	3701      	adds	r7, #1
 80a3334:	f43f aefb 	beq.w	80a312e <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x10e>
					for (i = parser->toknext - 1; i >= 0; i--) {
 80a3338:	f108 38ff 	add.w	r8, r8, #4294967295
 80a333c:	f1ae 0e10 	sub.w	lr, lr, #16
 80a3340:	e7e8      	b.n	80a3314 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2f4>
 80a3342:	f1a7 0920 	sub.w	r9, r7, #32
 80a3346:	4e0a      	ldr	r6, [pc, #40]	; (80a3370 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x350>)
 80a3348:	fa5f f989 	uxtb.w	r9, r9
 80a334c:	fa0c f909 	lsl.w	r9, ip, r9
 80a3350:	ea19 0f06 	tst.w	r9, r6
 80a3354:	f47f aea9 	bne.w	80a30aa <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x8a>
		if (js[parser->pos] < 32 || js[parser->pos] >= 127) {
 80a3358:	3f20      	subs	r7, #32
 80a335a:	2f5e      	cmp	r7, #94	; 0x5e
 80a335c:	d89e      	bhi.n	80a329c <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x27c>
	for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 80a335e:	f108 0701 	add.w	r7, r8, #1
 80a3362:	6027      	str	r7, [r4, #0]
 80a3364:	e68e      	b.n	80a3084 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x64>
		switch (js[parser->pos]) {
 80a3366:	2f0d      	cmp	r7, #13
 80a3368:	d1f6      	bne.n	80a3358 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x338>
 80a336a:	e69e      	b.n	80a30aa <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x8a>
 80a336c:	00800013 	.word	0x00800013
 80a3370:	04001001 	.word	0x04001001
 80a3374:	f007 09df 	and.w	r9, r7, #223	; 0xdf
 80a3378:	f1b9 0f5d 	cmp.w	r9, #93	; 0x5d
 80a337c:	e7f4      	b.n	80a3368 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x348>
	if (parser->toknext >= num_tokens) {
 80a337e:	6867      	ldr	r7, [r4, #4]
 80a3380:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80a3382:	42be      	cmp	r6, r7
 80a3384:	f67f af2a 	bls.w	80a31dc <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1bc>
	tok->size = 0;
 80a3388:	2600      	movs	r6, #0
	token->type = type;
 80a338a:	f04f 0a04 	mov.w	sl, #4
	tok = &tokens[parser->toknext++];
 80a338e:	f107 0801 	add.w	r8, r7, #1
 80a3392:	ea4f 1907 	mov.w	r9, r7, lsl #4
 80a3396:	eb03 1707 	add.w	r7, r3, r7, lsl #4
 80a339a:	f8c4 8004 	str.w	r8, [r4, #4]
	tok->start = tok->end = -1;
 80a339e:	e9c7 5501 	strd	r5, r5, [r7, #4]
	tok->size = 0;
 80a33a2:	60fe      	str	r6, [r7, #12]
	jsmn_fill_token(token, JSMN_PRIMITIVE, start, parser->pos);
 80a33a4:	f8d4 8000 	ldr.w	r8, [r4]
	token->type = type;
 80a33a8:	f803 a009 	strb.w	sl, [r3, r9]
	token->end = end;
 80a33ac:	e9c7 e801 	strd	lr, r8, [r7, #4]
	parser->pos--;
 80a33b0:	6827      	ldr	r7, [r4, #0]
 80a33b2:	3f01      	subs	r7, #1
 80a33b4:	e67e      	b.n	80a30b4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x94>
	if (tokens != NULL) {
 80a33b6:	2b00      	cmp	r3, #0
 80a33b8:	f43f af14 	beq.w	80a31e4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1c4>
		for (i = parser->toknext - 1; i >= 0; i--) {
 80a33bc:	6862      	ldr	r2, [r4, #4]
 80a33be:	1e51      	subs	r1, r2, #1
 80a33c0:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 80a33c4:	2900      	cmp	r1, #0
 80a33c6:	f6ff af0d 	blt.w	80a31e4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x1c4>
			if (tokens[i].start != -1 && tokens[i].end == -1) {
 80a33ca:	f853 2c0c 	ldr.w	r2, [r3, #-12]
 80a33ce:	3201      	adds	r2, #1
 80a33d0:	d003      	beq.n	80a33da <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x3ba>
 80a33d2:	f853 2c08 	ldr.w	r2, [r3, #-8]
 80a33d6:	3201      	adds	r2, #1
 80a33d8:	d087      	beq.n	80a32ea <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x2ca>
		for (i = parser->toknext - 1; i >= 0; i--) {
 80a33da:	3901      	subs	r1, #1
 80a33dc:	3b10      	subs	r3, #16
 80a33de:	e7f1      	b.n	80a33c4 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj+0x3a4>

080a33e0 <_ZN10JsonParser5parseEv>:
bool JsonParser::parse() {
 80a33e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (offset == 0) {
 80a33e2:	68c2      	ldr	r2, [r0, #12]
bool JsonParser::parse() {
 80a33e4:	4604      	mov	r4, r0
	if (offset == 0) {
 80a33e6:	b912      	cbnz	r2, 80a33ee <_ZN10JsonParser5parseEv+0xe>
		return false;
 80a33e8:	2000      	movs	r0, #0
}
 80a33ea:	b003      	add	sp, #12
 80a33ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (tokens) {
 80a33ee:	6943      	ldr	r3, [r0, #20]
 80a33f0:	f100 0620 	add.w	r6, r0, #32
 80a33f4:	b1ab      	cbz	r3, 80a3422 <_ZN10JsonParser5parseEv+0x42>
/**
 * Creates a new parser based over a given  buffer with an array of tokens
 * available.
 */
void jsmn_init(jsmn_parser *parser) {
	parser->pos = 0;
 80a33f6:	2100      	movs	r1, #0
	parser->toknext = 0;
 80a33f8:	e9c0 1108 	strd	r1, r1, [r0, #32]
	parser->toksuper = -1;
 80a33fc:	f04f 31ff 	mov.w	r1, #4294967295
 80a3400:	6281      	str	r1, [r0, #40]	; 0x28
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
 80a3402:	69c1      	ldr	r1, [r0, #28]
 80a3404:	9100      	str	r1, [sp, #0]
 80a3406:	6841      	ldr	r1, [r0, #4]
 80a3408:	4630      	mov	r0, r6
 80a340a:	f7ff fe09 	bl	80a3020 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
		if (result == JsonParserGeneratorRK::JSMN_ERROR_NOMEM) {
 80a340e:	1c43      	adds	r3, r0, #1
 80a3410:	d12c      	bne.n	80a346c <_ZN10JsonParser5parseEv+0x8c>
			if (staticBuffers) {
 80a3412:	7c25      	ldrb	r5, [r4, #16]
 80a3414:	2d00      	cmp	r5, #0
 80a3416:	d1e7      	bne.n	80a33e8 <_ZN10JsonParser5parseEv+0x8>
			free(tokens);
 80a3418:	6960      	ldr	r0, [r4, #20]
 80a341a:	f000 faa1 	bl	80a3960 <free>
			tokens = 0;
 80a341e:	6165      	str	r5, [r4, #20]
			maxTokens = 0;
 80a3420:	61e5      	str	r5, [r4, #28]
	parser->pos = 0;
 80a3422:	2500      	movs	r5, #0
	parser->toksuper = -1;
 80a3424:	f04f 37ff 	mov.w	r7, #4294967295
	int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, 0, 0);
 80a3428:	462b      	mov	r3, r5
 80a342a:	4630      	mov	r0, r6
	parser->toknext = 0;
 80a342c:	e9c4 5508 	strd	r5, r5, [r4, #32]
	int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, 0, 0);
 80a3430:	68e2      	ldr	r2, [r4, #12]
 80a3432:	6861      	ldr	r1, [r4, #4]
	parser->toksuper = -1;
 80a3434:	62a7      	str	r7, [r4, #40]	; 0x28
	int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, 0, 0);
 80a3436:	9500      	str	r5, [sp, #0]
 80a3438:	f7ff fdf2 	bl	80a3020 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
	if (result < 0) {
 80a343c:	2800      	cmp	r0, #0
 80a343e:	dbd3      	blt.n	80a33e8 <_ZN10JsonParser5parseEv+0x8>
	maxTokens = (size_t) result;
 80a3440:	61e0      	str	r0, [r4, #28]
	if (maxTokens > 0) {
 80a3442:	d01b      	beq.n	80a347c <_ZN10JsonParser5parseEv+0x9c>
		tokens = (JsonParserGeneratorRK::jsmntok_t *)malloc(sizeof(JsonParserGeneratorRK::jsmntok_t) * maxTokens);
 80a3444:	0100      	lsls	r0, r0, #4
 80a3446:	f000 fa83 	bl	80a3950 <malloc>
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
 80a344a:	69e2      	ldr	r2, [r4, #28]
		tokens = (JsonParserGeneratorRK::jsmntok_t *)malloc(sizeof(JsonParserGeneratorRK::jsmntok_t) * maxTokens);
 80a344c:	4603      	mov	r3, r0
 80a344e:	6160      	str	r0, [r4, #20]
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
 80a3450:	9200      	str	r2, [sp, #0]
 80a3452:	4630      	mov	r0, r6
	parser->toknext = 0;
 80a3454:	e9c4 5508 	strd	r5, r5, [r4, #32]
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
 80a3458:	68e2      	ldr	r2, [r4, #12]
 80a345a:	6861      	ldr	r1, [r4, #4]
	parser->toksuper = -1;
 80a345c:	62a7      	str	r7, [r4, #40]	; 0x28
		int result = JsonParserGeneratorRK::jsmn_parse(&parser, buffer, offset, tokens, maxTokens);
 80a345e:	f7ff fddf 	bl	80a3020 <_ZN21JsonParserGeneratorRK10jsmn_parseEPNS_11jsmn_parserEPKcjPNS_9jsmntok_tEj>
		tokensEnd = &tokens[result];
 80a3462:	6963      	ldr	r3, [r4, #20]
 80a3464:	eb03 1300 	add.w	r3, r3, r0, lsl #4
		tokensEnd = tokens;
 80a3468:	61a3      	str	r3, [r4, #24]
 80a346a:	e005      	b.n	80a3478 <_ZN10JsonParser5parseEv+0x98>
		if (result < 0) {
 80a346c:	2800      	cmp	r0, #0
 80a346e:	dbbb      	blt.n	80a33e8 <_ZN10JsonParser5parseEv+0x8>
			tokensEnd = &tokens[result];
 80a3470:	6963      	ldr	r3, [r4, #20]
 80a3472:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 80a3476:	61a0      	str	r0, [r4, #24]
	return true;
 80a3478:	2001      	movs	r0, #1
 80a347a:	e7b6      	b.n	80a33ea <_ZN10JsonParser5parseEv+0xa>
		tokensEnd = tokens;
 80a347c:	6963      	ldr	r3, [r4, #20]
 80a347e:	e7f3      	b.n	80a3468 <_ZN10JsonParser5parseEv+0x88>

080a3480 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a3480:	b508      	push	{r3, lr}
 80a3482:	4b02      	ldr	r3, [pc, #8]	; (80a348c <HAL_Pin_Mode+0xc>)
 80a3484:	681b      	ldr	r3, [r3, #0]
 80a3486:	689b      	ldr	r3, [r3, #8]
 80a3488:	9301      	str	r3, [sp, #4]
 80a348a:	bd08      	pop	{r3, pc}
 80a348c:	080601b0 	.word	0x080601b0

080a3490 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a3490:	b508      	push	{r3, lr}
 80a3492:	4b02      	ldr	r3, [pc, #8]	; (80a349c <HAL_Get_Pin_Mode+0xc>)
 80a3494:	681b      	ldr	r3, [r3, #0]
 80a3496:	68db      	ldr	r3, [r3, #12]
 80a3498:	9301      	str	r3, [sp, #4]
 80a349a:	bd08      	pop	{r3, pc}
 80a349c:	080601b0 	.word	0x080601b0

080a34a0 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a34a0:	b508      	push	{r3, lr}
 80a34a2:	4b02      	ldr	r3, [pc, #8]	; (80a34ac <HAL_GPIO_Write+0xc>)
 80a34a4:	681b      	ldr	r3, [r3, #0]
 80a34a6:	691b      	ldr	r3, [r3, #16]
 80a34a8:	9301      	str	r3, [sp, #4]
 80a34aa:	bd08      	pop	{r3, pc}
 80a34ac:	080601b0 	.word	0x080601b0

080a34b0 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 80a34b0:	b508      	push	{r3, lr}
 80a34b2:	4b02      	ldr	r3, [pc, #8]	; (80a34bc <HAL_GPIO_Read+0xc>)
 80a34b4:	681b      	ldr	r3, [r3, #0]
 80a34b6:	695b      	ldr	r3, [r3, #20]
 80a34b8:	9301      	str	r3, [sp, #4]
 80a34ba:	bd08      	pop	{r3, pc}
 80a34bc:	080601b0 	.word	0x080601b0

080a34c0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a34c0:	b508      	push	{r3, lr}
 80a34c2:	4b02      	ldr	r3, [pc, #8]	; (80a34cc <HAL_RNG_GetRandomNumber+0xc>)
 80a34c4:	681b      	ldr	r3, [r3, #0]
 80a34c6:	685b      	ldr	r3, [r3, #4]
 80a34c8:	9301      	str	r3, [sp, #4]
 80a34ca:	bd08      	pop	{r3, pc}
 80a34cc:	0806019c 	.word	0x0806019c

080a34d0 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a34d0:	b508      	push	{r3, lr}
 80a34d2:	4b02      	ldr	r3, [pc, #8]	; (80a34dc <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a34d4:	681b      	ldr	r3, [r3, #0]
 80a34d6:	695b      	ldr	r3, [r3, #20]
 80a34d8:	9301      	str	r3, [sp, #4]
 80a34da:	bd08      	pop	{r3, pc}
 80a34dc:	0806019c 	.word	0x0806019c

080a34e0 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
 80a34e0:	b508      	push	{r3, lr}
 80a34e2:	4b02      	ldr	r3, [pc, #8]	; (80a34ec <hal_rtc_time_is_valid+0xc>)
 80a34e4:	681b      	ldr	r3, [r3, #0]
 80a34e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a34e8:	9301      	str	r3, [sp, #4]
 80a34ea:	bd08      	pop	{r3, pc}
 80a34ec:	0806019c 	.word	0x0806019c

080a34f0 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
 80a34f0:	b508      	push	{r3, lr}
 80a34f2:	4b02      	ldr	r3, [pc, #8]	; (80a34fc <hal_rtc_get_time+0xc>)
 80a34f4:	681b      	ldr	r3, [r3, #0]
 80a34f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a34f8:	9301      	str	r3, [sp, #4]
 80a34fa:	bd08      	pop	{r3, pc}
 80a34fc:	0806019c 	.word	0x0806019c

080a3500 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80a3500:	b508      	push	{r3, lr}
 80a3502:	4b02      	ldr	r3, [pc, #8]	; (80a350c <os_mutex_recursive_create+0xc>)
 80a3504:	681b      	ldr	r3, [r3, #0]
 80a3506:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a3508:	9301      	str	r3, [sp, #4]
 80a350a:	bd08      	pop	{r3, pc}
 80a350c:	080601d0 	.word	0x080601d0

080a3510 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80a3510:	b508      	push	{r3, lr}
 80a3512:	4b02      	ldr	r3, [pc, #8]	; (80a351c <os_mutex_recursive_destroy+0xc>)
 80a3514:	681b      	ldr	r3, [r3, #0]
 80a3516:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a3518:	9301      	str	r3, [sp, #4]
 80a351a:	bd08      	pop	{r3, pc}
 80a351c:	080601d0 	.word	0x080601d0

080a3520 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
 80a3520:	b508      	push	{r3, lr}
 80a3522:	4b02      	ldr	r3, [pc, #8]	; (80a352c <os_mutex_recursive_lock+0xc>)
 80a3524:	681b      	ldr	r3, [r3, #0]
 80a3526:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a3528:	9301      	str	r3, [sp, #4]
 80a352a:	bd08      	pop	{r3, pc}
 80a352c:	080601d0 	.word	0x080601d0

080a3530 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
 80a3530:	b508      	push	{r3, lr}
 80a3532:	4b02      	ldr	r3, [pc, #8]	; (80a353c <os_mutex_recursive_unlock+0xc>)
 80a3534:	681b      	ldr	r3, [r3, #0]
 80a3536:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a3538:	9301      	str	r3, [sp, #4]
 80a353a:	bd08      	pop	{r3, pc}
 80a353c:	080601d0 	.word	0x080601d0

080a3540 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
 80a3540:	b508      	push	{r3, lr}
 80a3542:	4b02      	ldr	r3, [pc, #8]	; (80a354c <hal_usart_init+0xc>)
 80a3544:	681b      	ldr	r3, [r3, #0]
 80a3546:	699b      	ldr	r3, [r3, #24]
 80a3548:	9301      	str	r3, [sp, #4]
 80a354a:	bd08      	pop	{r3, pc}
 80a354c:	080601c4 	.word	0x080601c4

080a3550 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 80a3550:	b508      	push	{r3, lr}
 80a3552:	4b02      	ldr	r3, [pc, #8]	; (80a355c <hal_usart_write+0xc>)
 80a3554:	681b      	ldr	r3, [r3, #0]
 80a3556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a3558:	9301      	str	r3, [sp, #4]
 80a355a:	bd08      	pop	{r3, pc}
 80a355c:	080601c4 	.word	0x080601c4

080a3560 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 80a3560:	b508      	push	{r3, lr}
 80a3562:	4b02      	ldr	r3, [pc, #8]	; (80a356c <hal_usart_available+0xc>)
 80a3564:	681b      	ldr	r3, [r3, #0]
 80a3566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a3568:	9301      	str	r3, [sp, #4]
 80a356a:	bd08      	pop	{r3, pc}
 80a356c:	080601c4 	.word	0x080601c4

080a3570 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 80a3570:	b508      	push	{r3, lr}
 80a3572:	4b02      	ldr	r3, [pc, #8]	; (80a357c <hal_usart_read+0xc>)
 80a3574:	681b      	ldr	r3, [r3, #0]
 80a3576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a3578:	9301      	str	r3, [sp, #4]
 80a357a:	bd08      	pop	{r3, pc}
 80a357c:	080601c4 	.word	0x080601c4

080a3580 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 80a3580:	b508      	push	{r3, lr}
 80a3582:	4b02      	ldr	r3, [pc, #8]	; (80a358c <hal_usart_peek+0xc>)
 80a3584:	681b      	ldr	r3, [r3, #0]
 80a3586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a3588:	9301      	str	r3, [sp, #4]
 80a358a:	bd08      	pop	{r3, pc}
 80a358c:	080601c4 	.word	0x080601c4

080a3590 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 80a3590:	b508      	push	{r3, lr}
 80a3592:	4b02      	ldr	r3, [pc, #8]	; (80a359c <hal_usart_flush+0xc>)
 80a3594:	681b      	ldr	r3, [r3, #0]
 80a3596:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a3598:	9301      	str	r3, [sp, #4]
 80a359a:	bd08      	pop	{r3, pc}
 80a359c:	080601c4 	.word	0x080601c4

080a35a0 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 80a35a0:	b508      	push	{r3, lr}
 80a35a2:	4b02      	ldr	r3, [pc, #8]	; (80a35ac <hal_usart_is_enabled+0xc>)
 80a35a4:	681b      	ldr	r3, [r3, #0]
 80a35a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a35a8:	9301      	str	r3, [sp, #4]
 80a35aa:	bd08      	pop	{r3, pc}
 80a35ac:	080601c4 	.word	0x080601c4

080a35b0 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 80a35b0:	b508      	push	{r3, lr}
 80a35b2:	4b02      	ldr	r3, [pc, #8]	; (80a35bc <hal_usart_available_data_for_write+0xc>)
 80a35b4:	681b      	ldr	r3, [r3, #0]
 80a35b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a35b8:	9301      	str	r3, [sp, #4]
 80a35ba:	bd08      	pop	{r3, pc}
 80a35bc:	080601c4 	.word	0x080601c4

080a35c0 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
 80a35c0:	b508      	push	{r3, lr}
 80a35c2:	4b02      	ldr	r3, [pc, #8]	; (80a35cc <hal_usart_begin_config+0xc>)
 80a35c4:	681b      	ldr	r3, [r3, #0]
 80a35c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a35c8:	9301      	str	r3, [sp, #4]
 80a35ca:	bd08      	pop	{r3, pc}
 80a35cc:	080601c4 	.word	0x080601c4

080a35d0 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 80a35d0:	b508      	push	{r3, lr}
 80a35d2:	4b02      	ldr	r3, [pc, #8]	; (80a35dc <hal_i2c_write+0xc>)
 80a35d4:	681b      	ldr	r3, [r3, #0]
 80a35d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a35d8:	9301      	str	r3, [sp, #4]
 80a35da:	bd08      	pop	{r3, pc}
 80a35dc:	080601ac 	.word	0x080601ac

080a35e0 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 80a35e0:	b508      	push	{r3, lr}
 80a35e2:	4b02      	ldr	r3, [pc, #8]	; (80a35ec <hal_i2c_available+0xc>)
 80a35e4:	681b      	ldr	r3, [r3, #0]
 80a35e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a35e8:	9301      	str	r3, [sp, #4]
 80a35ea:	bd08      	pop	{r3, pc}
 80a35ec:	080601ac 	.word	0x080601ac

080a35f0 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 80a35f0:	b508      	push	{r3, lr}
 80a35f2:	4b02      	ldr	r3, [pc, #8]	; (80a35fc <hal_i2c_read+0xc>)
 80a35f4:	681b      	ldr	r3, [r3, #0]
 80a35f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a35f8:	9301      	str	r3, [sp, #4]
 80a35fa:	bd08      	pop	{r3, pc}
 80a35fc:	080601ac 	.word	0x080601ac

080a3600 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 80a3600:	b508      	push	{r3, lr}
 80a3602:	4b02      	ldr	r3, [pc, #8]	; (80a360c <hal_i2c_peek+0xc>)
 80a3604:	681b      	ldr	r3, [r3, #0]
 80a3606:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a3608:	9301      	str	r3, [sp, #4]
 80a360a:	bd08      	pop	{r3, pc}
 80a360c:	080601ac 	.word	0x080601ac

080a3610 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 80a3610:	b508      	push	{r3, lr}
 80a3612:	4b02      	ldr	r3, [pc, #8]	; (80a361c <hal_i2c_flush+0xc>)
 80a3614:	681b      	ldr	r3, [r3, #0]
 80a3616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a3618:	9301      	str	r3, [sp, #4]
 80a361a:	bd08      	pop	{r3, pc}
 80a361c:	080601ac 	.word	0x080601ac

080a3620 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 80a3620:	b508      	push	{r3, lr}
 80a3622:	4b02      	ldr	r3, [pc, #8]	; (80a362c <hal_i2c_is_enabled+0xc>)
 80a3624:	681b      	ldr	r3, [r3, #0]
 80a3626:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a3628:	9301      	str	r3, [sp, #4]
 80a362a:	bd08      	pop	{r3, pc}
 80a362c:	080601ac 	.word	0x080601ac

080a3630 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 80a3630:	b508      	push	{r3, lr}
 80a3632:	4b03      	ldr	r3, [pc, #12]	; (80a3640 <hal_i2c_init+0x10>)
 80a3634:	681b      	ldr	r3, [r3, #0]
 80a3636:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a363a:	9301      	str	r3, [sp, #4]
 80a363c:	bd08      	pop	{r3, pc}
 80a363e:	0000      	.short	0x0000
 80a3640:	080601ac 	.word	0x080601ac

080a3644 <socket_active_status>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, socket_active_status, uint8_t(sock_handle_t))
 80a3644:	b508      	push	{r3, lr}
 80a3646:	4b02      	ldr	r3, [pc, #8]	; (80a3650 <socket_active_status+0xc>)
 80a3648:	681b      	ldr	r3, [r3, #0]
 80a364a:	681b      	ldr	r3, [r3, #0]
 80a364c:	9301      	str	r3, [sp, #4]
 80a364e:	bd08      	pop	{r3, pc}
 80a3650:	080601bc 	.word	0x080601bc

080a3654 <socket_handle_valid>:
DYNALIB_FN(1, hal_socket, socket_handle_valid, uint8_t(sock_handle_t))
 80a3654:	b508      	push	{r3, lr}
 80a3656:	4b02      	ldr	r3, [pc, #8]	; (80a3660 <socket_handle_valid+0xc>)
 80a3658:	681b      	ldr	r3, [r3, #0]
 80a365a:	685b      	ldr	r3, [r3, #4]
 80a365c:	9301      	str	r3, [sp, #4]
 80a365e:	bd08      	pop	{r3, pc}
 80a3660:	080601bc 	.word	0x080601bc

080a3664 <socket_create>:
DYNALIB_FN(2, hal_socket, socket_create, sock_handle_t(uint8_t, uint8_t, uint8_t, uint16_t, network_interface_t))
 80a3664:	b508      	push	{r3, lr}
 80a3666:	4b02      	ldr	r3, [pc, #8]	; (80a3670 <socket_create+0xc>)
 80a3668:	681b      	ldr	r3, [r3, #0]
 80a366a:	689b      	ldr	r3, [r3, #8]
 80a366c:	9301      	str	r3, [sp, #4]
 80a366e:	bd08      	pop	{r3, pc}
 80a3670:	080601bc 	.word	0x080601bc

080a3674 <socket_connect>:
DYNALIB_FN(3, hal_socket, socket_connect, int32_t(sock_handle_t, const sockaddr_t*, long))
 80a3674:	b508      	push	{r3, lr}
 80a3676:	4b02      	ldr	r3, [pc, #8]	; (80a3680 <socket_connect+0xc>)
 80a3678:	681b      	ldr	r3, [r3, #0]
 80a367a:	68db      	ldr	r3, [r3, #12]
 80a367c:	9301      	str	r3, [sp, #4]
 80a367e:	bd08      	pop	{r3, pc}
 80a3680:	080601bc 	.word	0x080601bc

080a3684 <socket_receive>:
DYNALIB_FN(4, hal_socket, socket_receive, sock_result_t(sock_handle_t, void*, socklen_t, system_tick_t))
 80a3684:	b508      	push	{r3, lr}
 80a3686:	4b02      	ldr	r3, [pc, #8]	; (80a3690 <socket_receive+0xc>)
 80a3688:	681b      	ldr	r3, [r3, #0]
 80a368a:	691b      	ldr	r3, [r3, #16]
 80a368c:	9301      	str	r3, [sp, #4]
 80a368e:	bd08      	pop	{r3, pc}
 80a3690:	080601bc 	.word	0x080601bc

080a3694 <socket_close>:
DYNALIB_FN(5, hal_socket, socket_receivefrom, sock_result_t(sock_handle_t, void*, socklen_t, uint32_t, sockaddr_t*, socklen_t*))
DYNALIB_FN(6, hal_socket, socket_send, sock_result_t(sock_handle_t, const void*, socklen_t))
DYNALIB_FN(7, hal_socket, socket_sendto, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, sockaddr_t*, socklen_t))
DYNALIB_FN(8, hal_socket, socket_close, sock_result_t(sock_handle_t))
 80a3694:	b508      	push	{r3, lr}
 80a3696:	4b02      	ldr	r3, [pc, #8]	; (80a36a0 <socket_close+0xc>)
 80a3698:	681b      	ldr	r3, [r3, #0]
 80a369a:	6a1b      	ldr	r3, [r3, #32]
 80a369c:	9301      	str	r3, [sp, #4]
 80a369e:	bd08      	pop	{r3, pc}
 80a36a0:	080601bc 	.word	0x080601bc

080a36a4 <socket_handle_invalid>:
DYNALIB_FN(9, hal_socket, socket_reset_blocking_call, sock_result_t(void))
DYNALIB_FN(10, hal_socket, socket_create_tcp_server, sock_result_t(uint16_t, network_interface_t))
DYNALIB_FN(11, hal_socket, socket_accept, sock_result_t(sock_handle_t))
DYNALIB_FN(12, hal_socket, socket_handle_invalid, sock_handle_t(void))
 80a36a4:	b508      	push	{r3, lr}
 80a36a6:	4b02      	ldr	r3, [pc, #8]	; (80a36b0 <socket_handle_invalid+0xc>)
 80a36a8:	681b      	ldr	r3, [r3, #0]
 80a36aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a36ac:	9301      	str	r3, [sp, #4]
 80a36ae:	bd08      	pop	{r3, pc}
 80a36b0:	080601bc 	.word	0x080601bc

080a36b4 <socket_send_ex>:
DYNALIB_FN(13, hal_socket, socket_join_multicast, sock_result_t(const HAL_IPAddress*, network_interface_t, socket_multicast_info_t*))
DYNALIB_FN(14, hal_socket, socket_leave_multicast, sock_result_t(const HAL_IPAddress*, network_interface_t, socket_multicast_info_t*))
DYNALIB_FN(15, hal_socket, socket_peer, sock_result_t(sock_handle_t, sock_peer_t*, void*))
DYNALIB_FN(16, hal_socket, socket_shutdown, sock_result_t(sock_handle_t, int))
DYNALIB_FN(17, hal_socket, socket_send_ex, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, system_tick_t, void*))
 80a36b4:	b508      	push	{r3, lr}
 80a36b6:	4b02      	ldr	r3, [pc, #8]	; (80a36c0 <socket_send_ex+0xc>)
 80a36b8:	681b      	ldr	r3, [r3, #0]
 80a36ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a36bc:	9301      	str	r3, [sp, #4]
 80a36be:	bd08      	pop	{r3, pc}
 80a36c0:	080601bc 	.word	0x080601bc

080a36c4 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
 80a36c4:	b508      	push	{r3, lr}
 80a36c6:	4b02      	ldr	r3, [pc, #8]	; (80a36d0 <hal_spi_begin+0xc>)
 80a36c8:	681b      	ldr	r3, [r3, #0]
 80a36ca:	681b      	ldr	r3, [r3, #0]
 80a36cc:	9301      	str	r3, [sp, #4]
 80a36ce:	bd08      	pop	{r3, pc}
 80a36d0:	080601b4 	.word	0x080601b4

080a36d4 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
 80a36d4:	b508      	push	{r3, lr}
 80a36d6:	4b02      	ldr	r3, [pc, #8]	; (80a36e0 <hal_spi_transfer+0xc>)
 80a36d8:	681b      	ldr	r3, [r3, #0]
 80a36da:	695b      	ldr	r3, [r3, #20]
 80a36dc:	9301      	str	r3, [sp, #4]
 80a36de:	bd08      	pop	{r3, pc}
 80a36e0:	080601b4 	.word	0x080601b4

080a36e4 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 80a36e4:	b508      	push	{r3, lr}
 80a36e6:	4b02      	ldr	r3, [pc, #8]	; (80a36f0 <hal_spi_init+0xc>)
 80a36e8:	681b      	ldr	r3, [r3, #0]
 80a36ea:	69db      	ldr	r3, [r3, #28]
 80a36ec:	9301      	str	r3, [sp, #4]
 80a36ee:	bd08      	pop	{r3, pc}
 80a36f0:	080601b4 	.word	0x080601b4

080a36f4 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 80a36f4:	b508      	push	{r3, lr}
 80a36f6:	4b02      	ldr	r3, [pc, #8]	; (80a3700 <hal_spi_is_enabled+0xc>)
 80a36f8:	681b      	ldr	r3, [r3, #0]
 80a36fa:	6a1b      	ldr	r3, [r3, #32]
 80a36fc:	9301      	str	r3, [sp, #4]
 80a36fe:	bd08      	pop	{r3, pc}
 80a3700:	080601b4 	.word	0x080601b4

080a3704 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a3704:	b508      	push	{r3, lr}
 80a3706:	4b02      	ldr	r3, [pc, #8]	; (80a3710 <HAL_USB_USART_Init+0xc>)
 80a3708:	681b      	ldr	r3, [r3, #0]
 80a370a:	681b      	ldr	r3, [r3, #0]
 80a370c:	9301      	str	r3, [sp, #4]
 80a370e:	bd08      	pop	{r3, pc}
 80a3710:	080601d8 	.word	0x080601d8

080a3714 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a3714:	b508      	push	{r3, lr}
 80a3716:	4b02      	ldr	r3, [pc, #8]	; (80a3720 <HAL_USB_USART_Begin+0xc>)
 80a3718:	681b      	ldr	r3, [r3, #0]
 80a371a:	685b      	ldr	r3, [r3, #4]
 80a371c:	9301      	str	r3, [sp, #4]
 80a371e:	bd08      	pop	{r3, pc}
 80a3720:	080601d8 	.word	0x080601d8

080a3724 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a3724:	b508      	push	{r3, lr}
 80a3726:	4b02      	ldr	r3, [pc, #8]	; (80a3730 <HAL_USB_USART_Available_Data+0xc>)
 80a3728:	681b      	ldr	r3, [r3, #0]
 80a372a:	691b      	ldr	r3, [r3, #16]
 80a372c:	9301      	str	r3, [sp, #4]
 80a372e:	bd08      	pop	{r3, pc}
 80a3730:	080601d8 	.word	0x080601d8

080a3734 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a3734:	b508      	push	{r3, lr}
 80a3736:	4b02      	ldr	r3, [pc, #8]	; (80a3740 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a3738:	681b      	ldr	r3, [r3, #0]
 80a373a:	695b      	ldr	r3, [r3, #20]
 80a373c:	9301      	str	r3, [sp, #4]
 80a373e:	bd08      	pop	{r3, pc}
 80a3740:	080601d8 	.word	0x080601d8

080a3744 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a3744:	b508      	push	{r3, lr}
 80a3746:	4b02      	ldr	r3, [pc, #8]	; (80a3750 <HAL_USB_USART_Receive_Data+0xc>)
 80a3748:	681b      	ldr	r3, [r3, #0]
 80a374a:	699b      	ldr	r3, [r3, #24]
 80a374c:	9301      	str	r3, [sp, #4]
 80a374e:	bd08      	pop	{r3, pc}
 80a3750:	080601d8 	.word	0x080601d8

080a3754 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a3754:	b508      	push	{r3, lr}
 80a3756:	4b02      	ldr	r3, [pc, #8]	; (80a3760 <HAL_USB_USART_Send_Data+0xc>)
 80a3758:	681b      	ldr	r3, [r3, #0]
 80a375a:	69db      	ldr	r3, [r3, #28]
 80a375c:	9301      	str	r3, [sp, #4]
 80a375e:	bd08      	pop	{r3, pc}
 80a3760:	080601d8 	.word	0x080601d8

080a3764 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a3764:	b508      	push	{r3, lr}
 80a3766:	4b02      	ldr	r3, [pc, #8]	; (80a3770 <HAL_USB_USART_Flush_Data+0xc>)
 80a3768:	681b      	ldr	r3, [r3, #0]
 80a376a:	6a1b      	ldr	r3, [r3, #32]
 80a376c:	9301      	str	r3, [sp, #4]
 80a376e:	bd08      	pop	{r3, pc}
 80a3770:	080601d8 	.word	0x080601d8

080a3774 <HAL_NET_SetNetWatchDog>:

DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
 80a3774:	b508      	push	{r3, lr}
 80a3776:	4b02      	ldr	r3, [pc, #8]	; (80a3780 <HAL_NET_SetNetWatchDog+0xc>)
 80a3778:	681b      	ldr	r3, [r3, #0]
 80a377a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a377c:	9301      	str	r3, [sp, #4]
 80a377e:	bd08      	pop	{r3, pc}
 80a3780:	080601c0 	.word	0x080601c0

080a3784 <inet_gethostbyname>:
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a3784:	b508      	push	{r3, lr}
 80a3786:	4b02      	ldr	r3, [pc, #8]	; (80a3790 <inet_gethostbyname+0xc>)
 80a3788:	681b      	ldr	r3, [r3, #0]
 80a378a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a378c:	9301      	str	r3, [sp, #4]
 80a378e:	bd08      	pop	{r3, pc}
 80a3790:	080601c0 	.word	0x080601c0

080a3794 <wlan_select_antenna>:
DYNALIB_FN(19, hal_wlan, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(20, hal_wlan, wlan_select_antenna, int(WLanSelectAntenna_TypeDef))
 80a3794:	b508      	push	{r3, lr}
 80a3796:	4b02      	ldr	r3, [pc, #8]	; (80a37a0 <wlan_select_antenna+0xc>)
 80a3798:	681b      	ldr	r3, [r3, #0]
 80a379a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80a379c:	9301      	str	r3, [sp, #4]
 80a379e:	bd08      	pop	{r3, pc}
 80a37a0:	080601c0 	.word	0x080601c0

080a37a4 <wlan_connected_info>:
DYNALIB_FN(24, hal_wlan, wlan_get_credentials, int(wlan_scan_result_t, void*))
DYNALIB_FN(25, hal_wlan, softap_set_application_page_handler, int(PageProvider* provider, void* reserved))
DYNALIB_FN(26, hal_wlan, wlan_restart, int(void*))
DYNALIB_FN(27, hal_wlan, wlan_set_hostname, int(const char*, void*))
DYNALIB_FN(28, hal_wlan, wlan_get_hostname, int(char*, size_t, void*))
DYNALIB_FN(29, hal_wlan, wlan_connected_info, int(void*, wlan_connected_info_t*, void*))
 80a37a4:	b508      	push	{r3, lr}
 80a37a6:	4b02      	ldr	r3, [pc, #8]	; (80a37b0 <wlan_connected_info+0xc>)
 80a37a8:	681b      	ldr	r3, [r3, #0]
 80a37aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a37ac:	9301      	str	r3, [sp, #4]
 80a37ae:	bd08      	pop	{r3, pc}
 80a37b0:	080601c0 	.word	0x080601c0

080a37b4 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
 80a37b4:	b508      	push	{r3, lr}
 80a37b6:	4b02      	ldr	r3, [pc, #8]	; (80a37c0 <log_message+0xc>)
 80a37b8:	681b      	ldr	r3, [r3, #0]
 80a37ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80a37bc:	9301      	str	r3, [sp, #4]
 80a37be:	bd08      	pop	{r3, pc}
 80a37c0:	080201a8 	.word	0x080201a8

080a37c4 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 80a37c4:	b508      	push	{r3, lr}
 80a37c6:	4b02      	ldr	r3, [pc, #8]	; (80a37d0 <system_mode+0xc>)
 80a37c8:	681b      	ldr	r3, [r3, #0]
 80a37ca:	681b      	ldr	r3, [r3, #0]
 80a37cc:	9301      	str	r3, [sp, #4]
 80a37ce:	bd08      	pop	{r3, pc}
 80a37d0:	080601a4 	.word	0x080601a4

080a37d4 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a37d4:	b508      	push	{r3, lr}
 80a37d6:	4b02      	ldr	r3, [pc, #8]	; (80a37e0 <set_system_mode+0xc>)
 80a37d8:	681b      	ldr	r3, [r3, #0]
 80a37da:	685b      	ldr	r3, [r3, #4]
 80a37dc:	9301      	str	r3, [sp, #4]
 80a37de:	bd08      	pop	{r3, pc}
 80a37e0:	080601a4 	.word	0x080601a4

080a37e4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a37e4:	b508      	push	{r3, lr}
 80a37e6:	4b02      	ldr	r3, [pc, #8]	; (80a37f0 <system_delay_ms+0xc>)
 80a37e8:	681b      	ldr	r3, [r3, #0]
 80a37ea:	695b      	ldr	r3, [r3, #20]
 80a37ec:	9301      	str	r3, [sp, #4]
 80a37ee:	bd08      	pop	{r3, pc}
 80a37f0:	080601a4 	.word	0x080601a4

080a37f4 <system_thread_get_state>:
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 80a37f4:	b508      	push	{r3, lr}
 80a37f6:	4b02      	ldr	r3, [pc, #8]	; (80a3800 <system_thread_get_state+0xc>)
 80a37f8:	681b      	ldr	r3, [r3, #0]
 80a37fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a37fc:	9301      	str	r3, [sp, #4]
 80a37fe:	bd08      	pop	{r3, pc}
 80a3800:	080601a4 	.word	0x080601a4

080a3804 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a3804:	b508      	push	{r3, lr}
 80a3806:	4b03      	ldr	r3, [pc, #12]	; (80a3814 <system_ctrl_set_app_request_handler+0x10>)
 80a3808:	681b      	ldr	r3, [r3, #0]
 80a380a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a380e:	9301      	str	r3, [sp, #4]
 80a3810:	bd08      	pop	{r3, pc}
 80a3812:	0000      	.short	0x0000
 80a3814:	080601a4 	.word	0x080601a4

080a3818 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a3818:	b508      	push	{r3, lr}
 80a381a:	4b03      	ldr	r3, [pc, #12]	; (80a3828 <system_ctrl_set_result+0x10>)
 80a381c:	681b      	ldr	r3, [r3, #0]
 80a381e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a3822:	9301      	str	r3, [sp, #4]
 80a3824:	bd08      	pop	{r3, pc}
 80a3826:	0000      	.short	0x0000
 80a3828:	080601a4 	.word	0x080601a4

080a382c <system_reset>:
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))
 80a382c:	b508      	push	{r3, lr}
 80a382e:	4b03      	ldr	r3, [pc, #12]	; (80a383c <system_reset+0x10>)
 80a3830:	681b      	ldr	r3, [r3, #0]
 80a3832:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80a3836:	9301      	str	r3, [sp, #4]
 80a3838:	bd08      	pop	{r3, pc}
 80a383a:	0000      	.short	0x0000
 80a383c:	080601a4 	.word	0x080601a4

080a3840 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a3840:	b508      	push	{r3, lr}
 80a3842:	4b02      	ldr	r3, [pc, #8]	; (80a384c <network_connect+0xc>)
 80a3844:	681b      	ldr	r3, [r3, #0]
 80a3846:	685b      	ldr	r3, [r3, #4]
 80a3848:	9301      	str	r3, [sp, #4]
 80a384a:	bd08      	pop	{r3, pc}
 80a384c:	080601c8 	.word	0x080601c8

080a3850 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a3850:	b508      	push	{r3, lr}
 80a3852:	4b02      	ldr	r3, [pc, #8]	; (80a385c <network_connecting+0xc>)
 80a3854:	681b      	ldr	r3, [r3, #0]
 80a3856:	689b      	ldr	r3, [r3, #8]
 80a3858:	9301      	str	r3, [sp, #4]
 80a385a:	bd08      	pop	{r3, pc}
 80a385c:	080601c8 	.word	0x080601c8

080a3860 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a3860:	b508      	push	{r3, lr}
 80a3862:	4b02      	ldr	r3, [pc, #8]	; (80a386c <network_disconnect+0xc>)
 80a3864:	681b      	ldr	r3, [r3, #0]
 80a3866:	68db      	ldr	r3, [r3, #12]
 80a3868:	9301      	str	r3, [sp, #4]
 80a386a:	bd08      	pop	{r3, pc}
 80a386c:	080601c8 	.word	0x080601c8

080a3870 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a3870:	b508      	push	{r3, lr}
 80a3872:	4b02      	ldr	r3, [pc, #8]	; (80a387c <network_ready+0xc>)
 80a3874:	681b      	ldr	r3, [r3, #0]
 80a3876:	691b      	ldr	r3, [r3, #16]
 80a3878:	9301      	str	r3, [sp, #4]
 80a387a:	bd08      	pop	{r3, pc}
 80a387c:	080601c8 	.word	0x080601c8

080a3880 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a3880:	b508      	push	{r3, lr}
 80a3882:	4b02      	ldr	r3, [pc, #8]	; (80a388c <network_on+0xc>)
 80a3884:	681b      	ldr	r3, [r3, #0]
 80a3886:	695b      	ldr	r3, [r3, #20]
 80a3888:	9301      	str	r3, [sp, #4]
 80a388a:	bd08      	pop	{r3, pc}
 80a388c:	080601c8 	.word	0x080601c8

080a3890 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a3890:	b508      	push	{r3, lr}
 80a3892:	4b02      	ldr	r3, [pc, #8]	; (80a389c <network_off+0xc>)
 80a3894:	681b      	ldr	r3, [r3, #0]
 80a3896:	699b      	ldr	r3, [r3, #24]
 80a3898:	9301      	str	r3, [sp, #4]
 80a389a:	bd08      	pop	{r3, pc}
 80a389c:	080601c8 	.word	0x080601c8

080a38a0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a38a0:	b508      	push	{r3, lr}
 80a38a2:	4b02      	ldr	r3, [pc, #8]	; (80a38ac <network_listen+0xc>)
 80a38a4:	681b      	ldr	r3, [r3, #0]
 80a38a6:	69db      	ldr	r3, [r3, #28]
 80a38a8:	9301      	str	r3, [sp, #4]
 80a38aa:	bd08      	pop	{r3, pc}
 80a38ac:	080601c8 	.word	0x080601c8

080a38b0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a38b0:	b508      	push	{r3, lr}
 80a38b2:	4b02      	ldr	r3, [pc, #8]	; (80a38bc <network_listening+0xc>)
 80a38b4:	681b      	ldr	r3, [r3, #0]
 80a38b6:	6a1b      	ldr	r3, [r3, #32]
 80a38b8:	9301      	str	r3, [sp, #4]
 80a38ba:	bd08      	pop	{r3, pc}
 80a38bc:	080601c8 	.word	0x080601c8

080a38c0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a38c0:	b508      	push	{r3, lr}
 80a38c2:	4b02      	ldr	r3, [pc, #8]	; (80a38cc <network_set_listen_timeout+0xc>)
 80a38c4:	681b      	ldr	r3, [r3, #0]
 80a38c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a38c8:	9301      	str	r3, [sp, #4]
 80a38ca:	bd08      	pop	{r3, pc}
 80a38cc:	080601c8 	.word	0x080601c8

080a38d0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a38d0:	b508      	push	{r3, lr}
 80a38d2:	4b02      	ldr	r3, [pc, #8]	; (80a38dc <network_get_listen_timeout+0xc>)
 80a38d4:	681b      	ldr	r3, [r3, #0]
 80a38d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a38d8:	9301      	str	r3, [sp, #4]
 80a38da:	bd08      	pop	{r3, pc}
 80a38dc:	080601c8 	.word	0x080601c8

080a38e0 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
 80a38e0:	b508      	push	{r3, lr}
 80a38e2:	4b02      	ldr	r3, [pc, #8]	; (80a38ec <spark_variable+0xc>)
 80a38e4:	681b      	ldr	r3, [r3, #0]
 80a38e6:	681b      	ldr	r3, [r3, #0]
 80a38e8:	9301      	str	r3, [sp, #4]
 80a38ea:	bd08      	pop	{r3, pc}
 80a38ec:	080601cc 	.word	0x080601cc

080a38f0 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
 80a38f0:	b508      	push	{r3, lr}
 80a38f2:	4b02      	ldr	r3, [pc, #8]	; (80a38fc <spark_function+0xc>)
 80a38f4:	681b      	ldr	r3, [r3, #0]
 80a38f6:	685b      	ldr	r3, [r3, #4]
 80a38f8:	9301      	str	r3, [sp, #4]
 80a38fa:	bd08      	pop	{r3, pc}
 80a38fc:	080601cc 	.word	0x080601cc

080a3900 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 80a3900:	b508      	push	{r3, lr}
 80a3902:	4b02      	ldr	r3, [pc, #8]	; (80a390c <spark_process+0xc>)
 80a3904:	681b      	ldr	r3, [r3, #0]
 80a3906:	689b      	ldr	r3, [r3, #8]
 80a3908:	9301      	str	r3, [sp, #4]
 80a390a:	bd08      	pop	{r3, pc}
 80a390c:	080601cc 	.word	0x080601cc

080a3910 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
 80a3910:	b508      	push	{r3, lr}
 80a3912:	4b02      	ldr	r3, [pc, #8]	; (80a391c <spark_cloud_flag_connect+0xc>)
 80a3914:	681b      	ldr	r3, [r3, #0]
 80a3916:	68db      	ldr	r3, [r3, #12]
 80a3918:	9301      	str	r3, [sp, #4]
 80a391a:	bd08      	pop	{r3, pc}
 80a391c:	080601cc 	.word	0x080601cc

080a3920 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 80a3920:	b508      	push	{r3, lr}
 80a3922:	4b02      	ldr	r3, [pc, #8]	; (80a392c <spark_cloud_flag_connected+0xc>)
 80a3924:	681b      	ldr	r3, [r3, #0]
 80a3926:	695b      	ldr	r3, [r3, #20]
 80a3928:	9301      	str	r3, [sp, #4]
 80a392a:	bd08      	pop	{r3, pc}
 80a392c:	080601cc 	.word	0x080601cc

080a3930 <spark_sync_time_pending>:
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 80a3930:	b508      	push	{r3, lr}
 80a3932:	4b02      	ldr	r3, [pc, #8]	; (80a393c <spark_sync_time_pending+0xc>)
 80a3934:	681b      	ldr	r3, [r3, #0]
 80a3936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a3938:	9301      	str	r3, [sp, #4]
 80a393a:	bd08      	pop	{r3, pc}
 80a393c:	080601cc 	.word	0x080601cc

080a3940 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a3940:	b508      	push	{r3, lr}
 80a3942:	4b02      	ldr	r3, [pc, #8]	; (80a394c <spark_set_random_seed_from_cloud_handler+0xc>)
 80a3944:	681b      	ldr	r3, [r3, #0]
 80a3946:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a3948:	9301      	str	r3, [sp, #4]
 80a394a:	bd08      	pop	{r3, pc}
 80a394c:	080601cc 	.word	0x080601cc

080a3950 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a3950:	b508      	push	{r3, lr}
 80a3952:	4b02      	ldr	r3, [pc, #8]	; (80a395c <malloc+0xc>)
 80a3954:	681b      	ldr	r3, [r3, #0]
 80a3956:	681b      	ldr	r3, [r3, #0]
 80a3958:	9301      	str	r3, [sp, #4]
 80a395a:	bd08      	pop	{r3, pc}
 80a395c:	080601a0 	.word	0x080601a0

080a3960 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a3960:	b508      	push	{r3, lr}
 80a3962:	4b02      	ldr	r3, [pc, #8]	; (80a396c <free+0xc>)
 80a3964:	681b      	ldr	r3, [r3, #0]
 80a3966:	685b      	ldr	r3, [r3, #4]
 80a3968:	9301      	str	r3, [sp, #4]
 80a396a:	bd08      	pop	{r3, pc}
 80a396c:	080601a0 	.word	0x080601a0

080a3970 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a3970:	b508      	push	{r3, lr}
 80a3972:	4b02      	ldr	r3, [pc, #8]	; (80a397c <realloc+0xc>)
 80a3974:	681b      	ldr	r3, [r3, #0]
 80a3976:	689b      	ldr	r3, [r3, #8]
 80a3978:	9301      	str	r3, [sp, #4]
 80a397a:	bd08      	pop	{r3, pc}
 80a397c:	080601a0 	.word	0x080601a0

080a3980 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
 80a3980:	b508      	push	{r3, lr}
 80a3982:	4b02      	ldr	r3, [pc, #8]	; (80a398c <siprintf+0xc>)
 80a3984:	681b      	ldr	r3, [r3, #0]
 80a3986:	691b      	ldr	r3, [r3, #16]
 80a3988:	9301      	str	r3, [sp, #4]
 80a398a:	bd08      	pop	{r3, pc}
 80a398c:	080601a0 	.word	0x080601a0

080a3990 <sscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
 80a3990:	b508      	push	{r3, lr}
 80a3992:	4b02      	ldr	r3, [pc, #8]	; (80a399c <sscanf+0xc>)
 80a3994:	681b      	ldr	r3, [r3, #0]
 80a3996:	695b      	ldr	r3, [r3, #20]
 80a3998:	9301      	str	r3, [sp, #4]
 80a399a:	bd08      	pop	{r3, pc}
 80a399c:	080601a0 	.word	0x080601a0

080a39a0 <siscanf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
 80a39a0:	b508      	push	{r3, lr}
 80a39a2:	4b02      	ldr	r3, [pc, #8]	; (80a39ac <siscanf+0xc>)
 80a39a4:	681b      	ldr	r3, [r3, #0]
 80a39a6:	699b      	ldr	r3, [r3, #24]
 80a39a8:	9301      	str	r3, [sp, #4]
 80a39aa:	bd08      	pop	{r3, pc}
 80a39ac:	080601a0 	.word	0x080601a0

080a39b0 <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
 80a39b0:	b508      	push	{r3, lr}
 80a39b2:	4b02      	ldr	r3, [pc, #8]	; (80a39bc <snprintf+0xc>)
 80a39b4:	681b      	ldr	r3, [r3, #0]
 80a39b6:	69db      	ldr	r3, [r3, #28]
 80a39b8:	9301      	str	r3, [sp, #4]
 80a39ba:	bd08      	pop	{r3, pc}
 80a39bc:	080601a0 	.word	0x080601a0

080a39c0 <sniprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
 80a39c0:	b508      	push	{r3, lr}
 80a39c2:	4b02      	ldr	r3, [pc, #8]	; (80a39cc <sniprintf+0xc>)
 80a39c4:	681b      	ldr	r3, [r3, #0]
 80a39c6:	6a1b      	ldr	r3, [r3, #32]
 80a39c8:	9301      	str	r3, [sp, #4]
 80a39ca:	bd08      	pop	{r3, pc}
 80a39cc:	080601a0 	.word	0x080601a0

080a39d0 <vsnprintf>:
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 80a39d0:	b508      	push	{r3, lr}
 80a39d2:	4b02      	ldr	r3, [pc, #8]	; (80a39dc <vsnprintf+0xc>)
 80a39d4:	681b      	ldr	r3, [r3, #0]
 80a39d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a39d8:	9301      	str	r3, [sp, #4]
 80a39da:	bd08      	pop	{r3, pc}
 80a39dc:	080601a0 	.word	0x080601a0

080a39e0 <_malloc_r>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80a39e0:	b508      	push	{r3, lr}
 80a39e2:	4b02      	ldr	r3, [pc, #8]	; (80a39ec <_malloc_r+0xc>)
 80a39e4:	681b      	ldr	r3, [r3, #0]
 80a39e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a39e8:	9301      	str	r3, [sp, #4]
 80a39ea:	bd08      	pop	{r3, pc}
 80a39ec:	080601a0 	.word	0x080601a0

080a39f0 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 80a39f0:	b508      	push	{r3, lr}
 80a39f2:	4b02      	ldr	r3, [pc, #8]	; (80a39fc <newlib_impure_ptr_callback+0xc>)
 80a39f4:	681b      	ldr	r3, [r3, #0]
 80a39f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a39f8:	9301      	str	r3, [sp, #4]
 80a39fa:	bd08      	pop	{r3, pc}
 80a39fc:	080601a0 	.word	0x080601a0

080a3a00 <_ZN8SPIClass6unlockEv>:
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
 80a3a00:	6880      	ldr	r0, [r0, #8]
 80a3a02:	f7ff bd95 	b.w	80a3530 <os_mutex_recursive_unlock>

080a3a06 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 80a3a06:	b570      	push	{r4, r5, r6, lr}
    RecursiveMutex() : handle_(nullptr)
 80a3a08:	2600      	movs	r6, #0
 80a3a0a:	4604      	mov	r4, r0
 80a3a0c:	460d      	mov	r5, r1
 80a3a0e:	f840 6f08 	str.w	r6, [r0, #8]!
        os_mutex_recursive_create(&handle_);
 80a3a12:	f7ff fd75 	bl	80a3500 <os_mutex_recursive_create>
{
    _spi = spi;
    hal_spi_init(_spi);
 80a3a16:	4628      	mov	r0, r5
    _spi = spi;
 80a3a18:	7025      	strb	r5, [r4, #0]
    hal_spi_init(_spi);
 80a3a1a:	f7ff fe63 	bl	80a36e4 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
}
 80a3a1e:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80a3a20:	6066      	str	r6, [r4, #4]
}
 80a3a22:	bd70      	pop	{r4, r5, r6, pc}

080a3a24 <_ZN8SPIClass5beginEt>:
        unlock();
    }
}

void SPIClass::begin(uint16_t ss_pin)
{
 80a3a24:	b538      	push	{r3, r4, r5, lr}
 80a3a26:	4604      	mov	r4, r0
 80a3a28:	460d      	mov	r5, r1
    void lock() { os_mutex_recursive_lock(handle_); }
 80a3a2a:	6880      	ldr	r0, [r0, #8]
 80a3a2c:	f7ff fd78 	bl	80a3520 <os_mutex_recursive_lock>
    if (!lock())
    {
        hal_spi_begin(_spi, ss_pin);
 80a3a30:	7820      	ldrb	r0, [r4, #0]
 80a3a32:	4629      	mov	r1, r5
 80a3a34:	f7ff fe46 	bl	80a36c4 <hal_spi_begin>
        unlock();
 80a3a38:	4620      	mov	r0, r4
 80a3a3a:	f7ff ffe1 	bl	80a3a00 <_ZN8SPIClass6unlockEv>
    }
}
 80a3a3e:	bd38      	pop	{r3, r4, r5, pc}

080a3a40 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
 80a3a40:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
 80a3a42:	7800      	ldrb	r0, [r0, #0]
 80a3a44:	f7ff fe46 	bl	80a36d4 <hal_spi_transfer>
}
 80a3a48:	b2c0      	uxtb	r0, r0
 80a3a4a:	bd08      	pop	{r3, pc}

080a3a4c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
 80a3a4c:	b510      	push	{r4, lr}
 80a3a4e:	4604      	mov	r4, r0
        if (wakeupSource_) {
 80a3a50:	6800      	ldr	r0, [r0, #0]
 80a3a52:	b118      	cbz	r0, 80a3a5c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
 80a3a54:	f7ff ff84 	bl	80a3960 <free>
            wakeupSource_ = nullptr;
 80a3a58:	2300      	movs	r3, #0
 80a3a5a:	6023      	str	r3, [r4, #0]
        }
    }
 80a3a5c:	bd10      	pop	{r4, pc}

080a3a5e <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80a3a5e:	b510      	push	{r4, lr}
 80a3a60:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
 80a3a62:	f7ff fff3 	bl	80a3a4c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
 80a3a66:	4620      	mov	r0, r4
 80a3a68:	bd10      	pop	{r4, pc}

080a3a6a <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>:
{
    reset(0, flags);
}

void SystemClass::reset(uint32_t data, SystemResetFlags flags)
{
 80a3a6a:	b507      	push	{r0, r1, r2, lr}
 80a3a6c:	460b      	mov	r3, r1
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
 80a3a6e:	2100      	movs	r1, #0
{
 80a3a70:	4602      	mov	r2, r0
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
 80a3a72:	9100      	str	r1, [sp, #0]
 80a3a74:	2001      	movs	r0, #1
 80a3a76:	218c      	movs	r1, #140	; 0x8c
 80a3a78:	f7ff fed8 	bl	80a382c <system_reset>
}
 80a3a7c:	b003      	add	sp, #12
 80a3a7e:	f85d fb04 	ldr.w	pc, [sp], #4

080a3a82 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>:
{
 80a3a82:	4601      	mov	r1, r0
    reset(0, flags);
 80a3a84:	2000      	movs	r0, #0
 80a3a86:	f7ff bff0 	b.w	80a3a6a <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>

080a3a8a <_ZN11SystemClass5resetEv>:
    reset(SystemResetFlags());
 80a3a8a:	2000      	movs	r0, #0
 80a3a8c:	f7ff bff9 	b.w	80a3a82 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>

080a3a90 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a3a90:	2202      	movs	r2, #2
              error_(SYSTEM_ERROR_NONE) {
 80a3a92:	2000      	movs	r0, #0
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80a3a94:	b510      	push	{r4, lr}
 80a3a96:	4b08      	ldr	r3, [pc, #32]	; (80a3ab8 <_GLOBAL__sub_I_System+0x28>)
 80a3a98:	4c08      	ldr	r4, [pc, #32]	; (80a3abc <_GLOBAL__sub_I_System+0x2c>)
 80a3a9a:	601a      	str	r2, [r3, #0]
    SleepResult() {}
 80a3a9c:	4b08      	ldr	r3, [pc, #32]	; (80a3ac0 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
 80a3a9e:	6020      	str	r0, [r4, #0]
 80a3aa0:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
 80a3aa2:	71a0      	strb	r0, [r4, #6]
 80a3aa4:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a3aa6:	f7ff fe95 	bl	80a37d4 <set_system_mode>
SystemClass System;
 80a3aaa:	4620      	mov	r0, r4
 80a3aac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
 80a3ab0:	4a04      	ldr	r2, [pc, #16]	; (80a3ac4 <_GLOBAL__sub_I_System+0x34>)
 80a3ab2:	4905      	ldr	r1, [pc, #20]	; (80a3ac8 <_GLOBAL__sub_I_System+0x38>)
 80a3ab4:	f001 bcd2 	b.w	80a545c <__aeabi_atexit>
 80a3ab8:	200005ac 	.word	0x200005ac
 80a3abc:	200005a0 	.word	0x200005a0
 80a3ac0:	ffff0000 	.word	0xffff0000
 80a3ac4:	20000250 	.word	0x20000250
 80a3ac8:	080a3a5f 	.word	0x080a3a5f

080a3acc <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
 80a3acc:	b510      	push	{r4, lr}
 80a3ace:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
 80a3ad0:	f003 fe8a 	bl	80a77e8 <strlen>
 80a3ad4:	1e43      	subs	r3, r0, #1
 80a3ad6:	4620      	mov	r0, r4
 80a3ad8:	4423      	add	r3, r4
	while(i<j){
 80a3ada:	4283      	cmp	r3, r0
 80a3adc:	d906      	bls.n	80a3aec <_Z11str_reversePc+0x20>
		c = *i;
 80a3ade:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
 80a3ae0:	7819      	ldrb	r1, [r3, #0]
 80a3ae2:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
 80a3ae6:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
 80a3aea:	e7f6      	b.n	80a3ada <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
 80a3aec:	bd10      	pop	{r4, pc}

080a3aee <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
 80a3aee:	b570      	push	{r4, r5, r6, lr}
 80a3af0:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
 80a3af2:	1e91      	subs	r1, r2, #2
 80a3af4:	2922      	cmp	r1, #34	; 0x22
 80a3af6:	d822      	bhi.n	80a3b3e <ultoa+0x50>
		return NULL;
	}
	char* ptr=buffer;
 80a3af8:	4625      	mov	r5, r4

	div_t result;
	while(a){
 80a3afa:	b168      	cbz	r0, 80a3b18 <ultoa+0x2a>
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
 80a3afc:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
 80a3b00:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
 80a3b04:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
 80a3b06:	2809      	cmp	r0, #9
                *ptr += '0';
 80a3b08:	bf94      	ite	ls
 80a3b0a:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
 80a3b0c:	3157      	addhi	r1, #87	; 0x57
 80a3b0e:	b2c9      	uxtb	r1, r1
            }
            ++ptr;
            a = result.quot;
 80a3b10:	4630      	mov	r0, r6
 80a3b12:	f805 1b01 	strb.w	r1, [r5], #1
	while(a){
 80a3b16:	e7f0      	b.n	80a3afa <ultoa+0xc>
 80a3b18:	462a      	mov	r2, r5
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';
 80a3b1a:	2130      	movs	r1, #48	; 0x30
        while (ptr < buffer+pad)
 80a3b1c:	4423      	add	r3, r4
 80a3b1e:	4293      	cmp	r3, r2
 80a3b20:	d902      	bls.n	80a3b28 <ultoa+0x3a>
            *ptr++ = '0';
 80a3b22:	f802 1b01 	strb.w	r1, [r2], #1
        while (ptr < buffer+pad)
 80a3b26:	e7fa      	b.n	80a3b1e <ultoa+0x30>
 80a3b28:	1b5a      	subs	r2, r3, r5
 80a3b2a:	42ab      	cmp	r3, r5
 80a3b2c:	bf38      	it	cc
 80a3b2e:	2200      	movcc	r2, #0

	*ptr = '\0';
 80a3b30:	2300      	movs	r3, #0
	str_reverse(buffer);
 80a3b32:	4620      	mov	r0, r4
	*ptr = '\0';
 80a3b34:	54ab      	strb	r3, [r5, r2]
	str_reverse(buffer);
 80a3b36:	f7ff ffc9 	bl	80a3acc <_Z11str_reversePc>
	return buffer;
 80a3b3a:	4620      	mov	r0, r4
}
 80a3b3c:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
 80a3b3e:	2000      	movs	r0, #0
 80a3b40:	e7fc      	b.n	80a3b3c <ultoa+0x4e>

080a3b42 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 80a3b42:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
 80a3b44:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 80a3b46:	460c      	mov	r4, r1
 80a3b48:	4615      	mov	r5, r2
	if(a<0){
 80a3b4a:	da0d      	bge.n	80a3b68 <itoa+0x26>
		*buffer = '-';
 80a3b4c:	222d      	movs	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
 80a3b4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a3b52:	bf0c      	ite	eq
 80a3b54:	4618      	moveq	r0, r3
 80a3b56:	4258      	negne	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
 80a3b58:	2301      	movs	r3, #1
		*buffer = '-';
 80a3b5a:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
 80a3b5c:	462a      	mov	r2, r5
 80a3b5e:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
 80a3b60:	f7ff ffc5 	bl	80a3aee <ultoa>
	}
	return buffer;
}
 80a3b64:	4620      	mov	r0, r4
 80a3b66:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
 80a3b68:	2301      	movs	r3, #1
 80a3b6a:	e7f9      	b.n	80a3b60 <itoa+0x1e>

080a3b6c <utoa>:

__attribute__((weak)) char* utoa(unsigned a, char* buffer, int radix) {
 80a3b6c:	b508      	push	{r3, lr}
    return ultoa(a, buffer, radix);
 80a3b6e:	2301      	movs	r3, #1
 80a3b70:	f7ff ffbd 	bl	80a3aee <ultoa>
}
 80a3b74:	bd08      	pop	{r3, pc}

080a3b76 <_ZN9TCPClient5writeEh>:
        }
        return connected;
}

size_t TCPClient::write(uint8_t b)
{
 80a3b76:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a3b78:	6803      	ldr	r3, [r0, #0]
{
 80a3b7a:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a3b7e:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80a3b80:	2201      	movs	r2, #1
 80a3b82:	f247 5330 	movw	r3, #30000	; 0x7530
 80a3b86:	f10d 0107 	add.w	r1, sp, #7
 80a3b8a:	47a0      	blx	r4
}
 80a3b8c:	b002      	add	sp, #8
 80a3b8e:	bd10      	pop	{r4, pc}

080a3b90 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size)
{
 80a3b90:	b410      	push	{r4}
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a3b92:	6803      	ldr	r3, [r0, #0]
 80a3b94:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80a3b96:	f247 5330 	movw	r3, #30000	; 0x7530
 80a3b9a:	46a4      	mov	ip, r4
}
 80a3b9c:	bc10      	pop	{r4}
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a3b9e:	4760      	bx	ip

080a3ba0 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout)
{
 80a3ba0:	b513      	push	{r0, r1, r4, lr}
 80a3ba2:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
 80a3ba4:	6802      	ldr	r2, [r0, #0]
{
 80a3ba6:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
 80a3baa:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
 80a3bac:	f10d 0107 	add.w	r1, sp, #7
 80a3bb0:	2201      	movs	r2, #1
 80a3bb2:	47a0      	blx	r4
}
 80a3bb4:	b002      	add	sp, #8
 80a3bb6:	bd10      	pop	{r4, pc}

080a3bb8 <_ZN9TCPClient5flushEv>:
  d_->total = 0;
}

void TCPClient::flush()
{
}
 80a3bb8:	4770      	bx	lr

080a3bba <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 80a3bba:	4770      	bx	lr

080a3bbc <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_get_deleter(const std::type_info& __ti) noexcept override
 80a3bbc:	b510      	push	{r4, lr}
 80a3bbe:	4604      	mov	r4, r0
	    ||
 80a3bc0:	4b06      	ldr	r3, [pc, #24]	; (80a3bdc <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x20>)
      _M_get_deleter(const std::type_info& __ti) noexcept override
 80a3bc2:	4608      	mov	r0, r1
	    ||
 80a3bc4:	4299      	cmp	r1, r3
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
 80a3bc6:	f104 040c 	add.w	r4, r4, #12
 80a3bca:	d004      	beq.n	80a3bd6 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1a>
	    _Sp_make_shared_tag::_S_eq(__ti)
 80a3bcc:	f001 fc50 	bl	80a5470 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
 80a3bd0:	2800      	cmp	r0, #0
	return nullptr;
 80a3bd2:	bf08      	it	eq
 80a3bd4:	2400      	moveq	r4, #0
      }
 80a3bd6:	4620      	mov	r0, r4
 80a3bd8:	bd10      	pop	{r4, pc}
 80a3bda:	bf00      	nop
 80a3bdc:	080aa44c 	.word	0x080aa44c

080a3be0 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
 80a3be0:	b510      	push	{r4, lr}
 80a3be2:	4604      	mov	r4, r0
 80a3be4:	21ac      	movs	r1, #172	; 0xac
 80a3be6:	f001 fc3e 	bl	80a5466 <_ZdlPvj>
 80a3bea:	4620      	mov	r0, r4
 80a3bec:	bd10      	pop	{r4, pc}

080a3bee <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
 80a3bee:	f7fc ba58 	b.w	80a00a2 <_ZdlPv>
	...

080a3bf4 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
 80a3bf4:	b538      	push	{r3, r4, r5, lr}
 80a3bf6:	4b0b      	ldr	r3, [pc, #44]	; (80a3c24 <_ZN9TCPClientD1Ev+0x30>)
	if (_M_pi != nullptr)
 80a3bf8:	6984      	ldr	r4, [r0, #24]
 80a3bfa:	4605      	mov	r5, r0
 80a3bfc:	6003      	str	r3, [r0, #0]
 80a3bfe:	b17c      	cbz	r4, 80a3c20 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
 80a3c00:	6863      	ldr	r3, [r4, #4]
 80a3c02:	3b01      	subs	r3, #1
 80a3c04:	6063      	str	r3, [r4, #4]
 80a3c06:	b95b      	cbnz	r3, 80a3c20 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
 80a3c08:	6823      	ldr	r3, [r4, #0]
 80a3c0a:	4620      	mov	r0, r4
 80a3c0c:	689b      	ldr	r3, [r3, #8]
 80a3c0e:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a3c10:	68a3      	ldr	r3, [r4, #8]
 80a3c12:	3b01      	subs	r3, #1
 80a3c14:	60a3      	str	r3, [r4, #8]
 80a3c16:	b91b      	cbnz	r3, 80a3c20 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
 80a3c18:	6823      	ldr	r3, [r4, #0]
 80a3c1a:	4620      	mov	r0, r4
 80a3c1c:	68db      	ldr	r3, [r3, #12]
 80a3c1e:	4798      	blx	r3
 80a3c20:	4628      	mov	r0, r5
 80a3c22:	bd38      	pop	{r3, r4, r5, pc}
 80a3c24:	080aa45c 	.word	0x080aa45c

080a3c28 <_ZN9TCPClientD0Ev>:
 80a3c28:	b510      	push	{r4, lr}
 80a3c2a:	4604      	mov	r4, r0
 80a3c2c:	f7ff ffe2 	bl	80a3bf4 <_ZN9TCPClientD1Ev>
 80a3c30:	4620      	mov	r0, r4
 80a3c32:	211c      	movs	r1, #28
 80a3c34:	f001 fc17 	bl	80a5466 <_ZdlPvj>
 80a3c38:	4620      	mov	r0, r4
 80a3c3a:	bd10      	pop	{r4, pc}

080a3c3c <_ZN9TCPClient8remoteIPEv>:
{
   return (status()!=0);
}

IPAddress TCPClient::remoteIP()
{
 80a3c3c:	b570      	push	{r4, r5, r6, lr}

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 80a3c3e:	4604      	mov	r4, r0
 80a3c40:	4606      	mov	r6, r0
      }

    private:
      element_type*
      _M_get() const noexcept
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
 80a3c42:	694d      	ldr	r5, [r1, #20]
 80a3c44:	4b04      	ldr	r3, [pc, #16]	; (80a3c58 <_ZN9TCPClient8remoteIPEv+0x1c>)
 80a3c46:	358c      	adds	r5, #140	; 0x8c
 80a3c48:	f844 3b04 	str.w	r3, [r4], #4
 80a3c4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a3c4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a3c50:	682b      	ldr	r3, [r5, #0]
    return d_->remoteIP;
}
 80a3c52:	4630      	mov	r0, r6
 80a3c54:	7023      	strb	r3, [r4, #0]
 80a3c56:	bd70      	pop	{r4, r5, r6, pc}
 80a3c58:	080aa4e0 	.word	0x080aa4e0

080a3c5c <_ZN9TCPClient4peekEv>:
{
 80a3c5c:	b510      	push	{r4, lr}
 80a3c5e:	6943      	ldr	r3, [r0, #20]
 80a3c60:	4604      	mov	r4, r0
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
 80a3c62:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a3c66:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80a3c6a:	429a      	cmp	r2, r3
 80a3c6c:	d005      	beq.n	80a3c7a <_ZN9TCPClient4peekEv+0x1e>
 80a3c6e:	6963      	ldr	r3, [r4, #20]
 80a3c70:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 80a3c74:	4413      	add	r3, r2
 80a3c76:	7918      	ldrb	r0, [r3, #4]
}
 80a3c78:	bd10      	pop	{r4, pc}
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
 80a3c7a:	6803      	ldr	r3, [r0, #0]
 80a3c7c:	691b      	ldr	r3, [r3, #16]
 80a3c7e:	4798      	blx	r3
 80a3c80:	2800      	cmp	r0, #0
 80a3c82:	d1f4      	bne.n	80a3c6e <_ZN9TCPClient4peekEv+0x12>
 80a3c84:	f04f 30ff 	mov.w	r0, #4294967295
 80a3c88:	e7f6      	b.n	80a3c78 <_ZN9TCPClient4peekEv+0x1c>

080a3c8a <_ZN9TCPClient4readEv>:
{
 80a3c8a:	b510      	push	{r4, lr}
 80a3c8c:	6943      	ldr	r3, [r0, #20]
 80a3c8e:	4604      	mov	r4, r0
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
 80a3c90:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a3c94:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80a3c98:	429a      	cmp	r2, r3
 80a3c9a:	d008      	beq.n	80a3cae <_ZN9TCPClient4readEv+0x24>
 80a3c9c:	6963      	ldr	r3, [r4, #20]
 80a3c9e:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 80a3ca2:	1c51      	adds	r1, r2, #1
 80a3ca4:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
 80a3ca8:	4413      	add	r3, r2
 80a3caa:	7918      	ldrb	r0, [r3, #4]
}
 80a3cac:	bd10      	pop	{r4, pc}
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
 80a3cae:	6803      	ldr	r3, [r0, #0]
 80a3cb0:	691b      	ldr	r3, [r3, #16]
 80a3cb2:	4798      	blx	r3
 80a3cb4:	2800      	cmp	r0, #0
 80a3cb6:	d1f1      	bne.n	80a3c9c <_ZN9TCPClient4readEv+0x12>
 80a3cb8:	f04f 30ff 	mov.w	r0, #4294967295
 80a3cbc:	e7f6      	b.n	80a3cac <_ZN9TCPClient4readEv+0x22>

080a3cbe <_ZN9TCPClient4readEPhj>:
{
 80a3cbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a3cc0:	6943      	ldr	r3, [r0, #20]
 80a3cc2:	4617      	mov	r7, r2
        if (bufferCount() || available())
 80a3cc4:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a3cc8:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
{
 80a3ccc:	4605      	mov	r5, r0
        if (bufferCount() || available())
 80a3cce:	429a      	cmp	r2, r3
{
 80a3cd0:	460e      	mov	r6, r1
        if (bufferCount() || available())
 80a3cd2:	d016      	beq.n	80a3d02 <_ZN9TCPClient4readEPhj+0x44>
 80a3cd4:	6969      	ldr	r1, [r5, #20]
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80a3cd6:	4630      	mov	r0, r6
  return d_->total - d_->offset;
 80a3cd8:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
 80a3cdc:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
 80a3ce0:	1ae4      	subs	r4, r4, r3
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
 80a3ce2:	42bc      	cmp	r4, r7
 80a3ce4:	bf28      	it	cs
 80a3ce6:	463c      	movcs	r4, r7
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80a3ce8:	3304      	adds	r3, #4
 80a3cea:	4622      	mov	r2, r4
 80a3cec:	4419      	add	r1, r3
 80a3cee:	f002 ffcd 	bl	80a6c8c <memcpy>
 80a3cf2:	696a      	ldr	r2, [r5, #20]
          d_->offset += read;
 80a3cf4:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 80a3cf8:	4423      	add	r3, r4
 80a3cfa:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
 80a3cfe:	4620      	mov	r0, r4
 80a3d00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (bufferCount() || available())
 80a3d02:	6803      	ldr	r3, [r0, #0]
 80a3d04:	691b      	ldr	r3, [r3, #16]
 80a3d06:	4798      	blx	r3
 80a3d08:	2800      	cmp	r0, #0
 80a3d0a:	d1e3      	bne.n	80a3cd4 <_ZN9TCPClient4readEPhj+0x16>
        int read = -1;
 80a3d0c:	f04f 34ff 	mov.w	r4, #4294967295
 80a3d10:	e7f5      	b.n	80a3cfe <_ZN9TCPClient4readEPhj+0x40>

080a3d12 <_ZN9TCPClient12flush_bufferEv>:
  d_->offset = 0;
 80a3d12:	2300      	movs	r3, #0
 80a3d14:	6942      	ldr	r2, [r0, #20]
 80a3d16:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
 80a3d1a:	6942      	ldr	r2, [r0, #20]
  d_->total = 0;
 80a3d1c:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
 80a3d20:	4770      	bx	lr
	...

080a3d24 <_ZN9TCPClient7connectE9IPAddresstm>:
{
 80a3d24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a3d28:	461f      	mov	r7, r3
    stop();
 80a3d2a:	6803      	ldr	r3, [r0, #0]
{
 80a3d2c:	b08b      	sub	sp, #44	; 0x2c
    stop();
 80a3d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
{
 80a3d30:	4605      	mov	r5, r0
 80a3d32:	460c      	mov	r4, r1
 80a3d34:	4616      	mov	r6, r2
    stop();
 80a3d36:	4798      	blx	r3
        if(Network.from(nif).ready())
 80a3d38:	4638      	mov	r0, r7
 80a3d3a:	f001 fa9d 	bl	80a5278 <_ZN5spark12NetworkClass4fromEm>
 80a3d3e:	6803      	ldr	r3, [r0, #0]
 80a3d40:	68db      	ldr	r3, [r3, #12]
 80a3d42:	4798      	blx	r3
 80a3d44:	2800      	cmp	r0, #0
 80a3d46:	d054      	beq.n	80a3df2 <_ZN9TCPClient7connectE9IPAddresstm+0xce>
          d_->sock = socket_create(AF_INET, SOCK_STREAM, IPPROTO_TCP, port, nif);
 80a3d48:	4633      	mov	r3, r6
 80a3d4a:	2206      	movs	r2, #6
 80a3d4c:	2101      	movs	r1, #1
 80a3d4e:	2002      	movs	r0, #2
 80a3d50:	9700      	str	r7, [sp, #0]
 80a3d52:	f8d5 8014 	ldr.w	r8, [r5, #20]
 80a3d56:	f7ff fc85 	bl	80a3664 <socket_create>
          LOG(TRACE, "TCPClient socket=%x", d_->sock);
 80a3d5a:	2320      	movs	r3, #32
          d_->sock = socket_create(AF_INET, SOCK_STREAM, IPPROTO_TCP, port, nif);
 80a3d5c:	f8c8 0000 	str.w	r0, [r8]
          LOG(TRACE, "TCPClient socket=%x", d_->sock);
 80a3d60:	f04f 0800 	mov.w	r8, #0
 80a3d64:	e9cd 3802 	strd	r3, r8, [sp, #8]
 80a3d68:	696b      	ldr	r3, [r5, #20]
 80a3d6a:	2001      	movs	r0, #1
 80a3d6c:	681b      	ldr	r3, [r3, #0]
 80a3d6e:	4923      	ldr	r1, [pc, #140]	; (80a3dfc <_ZN9TCPClient7connectE9IPAddresstm+0xd8>)
 80a3d70:	9301      	str	r3, [sp, #4]
 80a3d72:	4b23      	ldr	r3, [pc, #140]	; (80a3e00 <_ZN9TCPClient7connectE9IPAddresstm+0xdc>)
 80a3d74:	aa02      	add	r2, sp, #8
 80a3d76:	9300      	str	r3, [sp, #0]
 80a3d78:	4643      	mov	r3, r8
 80a3d7a:	f7ff fd1b 	bl	80a37b4 <log_message>
          if (socket_handle_valid(d_->sock))
 80a3d7e:	696b      	ldr	r3, [r5, #20]
 80a3d80:	6818      	ldr	r0, [r3, #0]
 80a3d82:	f7ff fc67 	bl	80a3654 <socket_handle_valid>
 80a3d86:	2800      	cmp	r0, #0
 80a3d88:	d033      	beq.n	80a3df2 <_ZN9TCPClient7connectE9IPAddresstm+0xce>
            flush_buffer();
 80a3d8a:	4628      	mov	r0, r5
 80a3d8c:	f7ff ffc1 	bl	80a3d12 <_ZN9TCPClient12flush_bufferEv>
            tSocketAddr.sa_family = AF_INET;
 80a3d90:	2302      	movs	r3, #2
 80a3d92:	f8ad 3008 	strh.w	r3, [sp, #8]
            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 80a3d96:	79e3      	ldrb	r3, [r4, #7]
            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80a3d98:	ba76      	rev16	r6, r6
            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 80a3d9a:	f88d 300c 	strb.w	r3, [sp, #12]
            tSocketAddr.sa_data[3] = ip[1];
 80a3d9e:	79a3      	ldrb	r3, [r4, #6]
            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a3da0:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
            tSocketAddr.sa_data[3] = ip[1];
 80a3da4:	f88d 300d 	strb.w	r3, [sp, #13]
            tSocketAddr.sa_data[4] = ip[2];
 80a3da8:	7963      	ldrb	r3, [r4, #5]
            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80a3daa:	f8ad 600a 	strh.w	r6, [sp, #10]
            tSocketAddr.sa_data[4] = ip[2];
 80a3dae:	f88d 300e 	strb.w	r3, [sp, #14]
            tSocketAddr.sa_data[5] = ip[3];
 80a3db2:	f814 3f04 	ldrb.w	r3, [r4, #4]!
 80a3db6:	f88d 300f 	strb.w	r3, [sp, #15]
            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a3dba:	f7ff fcdb 	bl	80a3774 <HAL_NET_SetNetWatchDog>
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80a3dbe:	696b      	ldr	r3, [r5, #20]
            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a3dc0:	4606      	mov	r6, r0
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80a3dc2:	2210      	movs	r2, #16
 80a3dc4:	6818      	ldr	r0, [r3, #0]
 80a3dc6:	a902      	add	r1, sp, #8
 80a3dc8:	f7ff fc54 	bl	80a3674 <socket_connect>
 80a3dcc:	4681      	mov	r9, r0
            HAL_NET_SetNetWatchDog(ot);
 80a3dce:	4630      	mov	r0, r6
 80a3dd0:	f7ff fcd0 	bl	80a3774 <HAL_NET_SetNetWatchDog>
 80a3dd4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a3dd6:	696e      	ldr	r6, [r5, #20]
 80a3dd8:	368c      	adds	r6, #140	; 0x8c
 80a3dda:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80a3ddc:	6823      	ldr	r3, [r4, #0]
 80a3dde:	7033      	strb	r3, [r6, #0]
            nif_ = nif;
 80a3de0:	612f      	str	r7, [r5, #16]
            if(!connected)
 80a3de2:	f1b9 0f00 	cmp.w	r9, #0
 80a3de6:	d007      	beq.n	80a3df8 <_ZN9TCPClient7connectE9IPAddresstm+0xd4>
                stop();
 80a3de8:	682b      	ldr	r3, [r5, #0]
 80a3dea:	4628      	mov	r0, r5
 80a3dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a3dee:	4798      	blx	r3
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80a3df0:	4640      	mov	r0, r8
}
 80a3df2:	b00b      	add	sp, #44	; 0x2c
 80a3df4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a3df8:	2001      	movs	r0, #1
        return connected;
 80a3dfa:	e7fa      	b.n	80a3df2 <_ZN9TCPClient7connectE9IPAddresstm+0xce>
 80a3dfc:	080aa414 	.word	0x080aa414
 80a3e00:	080aa41b 	.word	0x080aa41b

080a3e04 <_ZN9TCPClient9availableEv>:
{
 80a3e04:	b538      	push	{r3, r4, r5, lr}
 80a3e06:	6942      	ldr	r2, [r0, #20]
 80a3e08:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total))
 80a3e0a:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 80a3e0e:	b12b      	cbz	r3, 80a3e1c <_ZN9TCPClient9availableEv+0x18>
 80a3e10:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
 80a3e14:	429a      	cmp	r2, r3
 80a3e16:	d101      	bne.n	80a3e1c <_ZN9TCPClient9availableEv+0x18>
        flush_buffer();
 80a3e18:	f7ff ff7b 	bl	80a3d12 <_ZN9TCPClient12flush_bufferEv>
    if(Network.from(nif_).ready() && isOpen(d_->sock))
 80a3e1c:	6920      	ldr	r0, [r4, #16]
 80a3e1e:	f001 fa2b 	bl	80a5278 <_ZN5spark12NetworkClass4fromEm>
 80a3e22:	6803      	ldr	r3, [r0, #0]
 80a3e24:	68db      	ldr	r3, [r3, #12]
 80a3e26:	4798      	blx	r3
 80a3e28:	b1f8      	cbz	r0, 80a3e6a <_ZN9TCPClient9availableEv+0x66>
 80a3e2a:	6963      	ldr	r3, [r4, #20]
   return socket_handle_valid(sd);
 80a3e2c:	6818      	ldr	r0, [r3, #0]
 80a3e2e:	f7ff fc11 	bl	80a3654 <socket_handle_valid>
    if(Network.from(nif_).ready() && isOpen(d_->sock))
 80a3e32:	b1d0      	cbz	r0, 80a3e6a <_ZN9TCPClient9availableEv+0x66>
 80a3e34:	6960      	ldr	r0, [r4, #20]
        if ( d_->total < arraySize(d_->buffer))
 80a3e36:	f8b0 1086 	ldrh.w	r1, [r0, #134]	; 0x86
 80a3e3a:	297f      	cmp	r1, #127	; 0x7f
 80a3e3c:	d815      	bhi.n	80a3e6a <_ZN9TCPClient9availableEv+0x66>
            int ret = socket_receive(d_->sock, d_->buffer + d_->total , arraySize(d_->buffer)-d_->total, 0);
 80a3e3e:	1d05      	adds	r5, r0, #4
 80a3e40:	f1c1 0280 	rsb	r2, r1, #128	; 0x80
 80a3e44:	2300      	movs	r3, #0
 80a3e46:	6800      	ldr	r0, [r0, #0]
 80a3e48:	4429      	add	r1, r5
 80a3e4a:	f7ff fc1b 	bl	80a3684 <socket_receive>
            if (ret > 0)
 80a3e4e:	2800      	cmp	r0, #0
 80a3e50:	dd0b      	ble.n	80a3e6a <_ZN9TCPClient9availableEv+0x66>
 80a3e52:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) d_->offset = 0;
 80a3e54:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a3e58:	b90a      	cbnz	r2, 80a3e5e <_ZN9TCPClient9availableEv+0x5a>
 80a3e5a:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 80a3e5e:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
 80a3e60:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a3e64:	4410      	add	r0, r2
 80a3e66:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
 80a3e6a:	6963      	ldr	r3, [r4, #20]
  return d_->total - d_->offset;
 80a3e6c:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
 80a3e70:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
 80a3e74:	1ac0      	subs	r0, r0, r3
 80a3e76:	bd38      	pop	{r3, r4, r5, pc}

080a3e78 <_ZN9TCPClient4stopEv>:
{
 80a3e78:	b538      	push	{r3, r4, r5, lr}
  if (isOpen(d_->sock))
 80a3e7a:	6943      	ldr	r3, [r0, #20]
{
 80a3e7c:	4604      	mov	r4, r0
   return socket_handle_valid(sd);
 80a3e7e:	6818      	ldr	r0, [r3, #0]
 80a3e80:	f7ff fbe8 	bl	80a3654 <socket_handle_valid>
  if (isOpen(d_->sock))
 80a3e84:	b118      	cbz	r0, 80a3e8e <_ZN9TCPClient4stopEv+0x16>
      socket_close(d_->sock);
 80a3e86:	6963      	ldr	r3, [r4, #20]
 80a3e88:	6818      	ldr	r0, [r3, #0]
 80a3e8a:	f7ff fc03 	bl	80a3694 <socket_close>
 80a3e8e:	6965      	ldr	r5, [r4, #20]
  d_->sock = socket_handle_invalid();
 80a3e90:	f7ff fc08 	bl	80a36a4 <socket_handle_invalid>
 80a3e94:	6028      	str	r0, [r5, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a3e96:	6960      	ldr	r0, [r4, #20]
 80a3e98:	2211      	movs	r2, #17
 80a3e9a:	2100      	movs	r1, #0
 80a3e9c:	308c      	adds	r0, #140	; 0x8c
 80a3e9e:	f002 ff03 	bl	80a6ca8 <memset>
  flush_buffer();
 80a3ea2:	4620      	mov	r0, r4
}
 80a3ea4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  flush_buffer();
 80a3ea8:	f7ff bf33 	b.w	80a3d12 <_ZN9TCPClient12flush_bufferEv>

080a3eac <_ZN9TCPClient6statusEv>:
{
 80a3eac:	b510      	push	{r4, lr}
  return (isOpen(d_->sock) && Network.from(nif_).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80a3eae:	6943      	ldr	r3, [r0, #20]
{
 80a3eb0:	4604      	mov	r4, r0
   return socket_handle_valid(sd);
 80a3eb2:	6818      	ldr	r0, [r3, #0]
 80a3eb4:	f7ff fbce 	bl	80a3654 <socket_handle_valid>
  return (isOpen(d_->sock) && Network.from(nif_).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80a3eb8:	b908      	cbnz	r0, 80a3ebe <_ZN9TCPClient6statusEv+0x12>
 80a3eba:	2000      	movs	r0, #0
}
 80a3ebc:	bd10      	pop	{r4, pc}
  return (isOpen(d_->sock) && Network.from(nif_).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80a3ebe:	6920      	ldr	r0, [r4, #16]
 80a3ec0:	f001 f9da 	bl	80a5278 <_ZN5spark12NetworkClass4fromEm>
 80a3ec4:	6803      	ldr	r3, [r0, #0]
 80a3ec6:	68db      	ldr	r3, [r3, #12]
 80a3ec8:	4798      	blx	r3
 80a3eca:	2800      	cmp	r0, #0
 80a3ecc:	d0f5      	beq.n	80a3eba <_ZN9TCPClient6statusEv+0xe>
 80a3ece:	6963      	ldr	r3, [r4, #20]
 80a3ed0:	6818      	ldr	r0, [r3, #0]
 80a3ed2:	f7ff fbb7 	bl	80a3644 <socket_active_status>
 80a3ed6:	fab0 f080 	clz	r0, r0
 80a3eda:	0940      	lsrs	r0, r0, #5
 80a3edc:	e7ee      	b.n	80a3ebc <_ZN9TCPClient6statusEv+0x10>

080a3ede <_ZN9TCPClientcvbEv>:
{
 80a3ede:	b508      	push	{r3, lr}
   return (status()!=0);
 80a3ee0:	f7ff ffe4 	bl	80a3eac <_ZN9TCPClient6statusEv>
}
 80a3ee4:	3800      	subs	r0, #0
 80a3ee6:	bf18      	it	ne
 80a3ee8:	2001      	movne	r0, #1
 80a3eea:	bd08      	pop	{r3, pc}

080a3eec <_ZN9TCPClient5writeEPKhjm>:
{
 80a3eec:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}

    size_t printNumber(unsigned long, uint8_t);
    size_t printNumber(unsigned long long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
 80a3ef0:	2700      	movs	r7, #0
 80a3ef2:	6047      	str	r7, [r0, #4]
 80a3ef4:	4604      	mov	r4, r0
 80a3ef6:	460d      	mov	r5, r1
 80a3ef8:	4616      	mov	r6, r2
 80a3efa:	4698      	mov	r8, r3
    int ret = status() ? socket_send_ex(d_->sock, buffer, size, 0, timeout, nullptr) : -1;
 80a3efc:	f7ff ffd6 	bl	80a3eac <_ZN9TCPClient6statusEv>
 80a3f00:	b170      	cbz	r0, 80a3f20 <_ZN9TCPClient5writeEPKhjm+0x34>
 80a3f02:	e9cd 8700 	strd	r8, r7, [sp]
 80a3f06:	6960      	ldr	r0, [r4, #20]
 80a3f08:	463b      	mov	r3, r7
 80a3f0a:	4632      	mov	r2, r6
 80a3f0c:	4629      	mov	r1, r5
 80a3f0e:	6800      	ldr	r0, [r0, #0]
 80a3f10:	f7ff fbd0 	bl	80a36b4 <socket_send_ex>
    if (ret < 0) {
 80a3f14:	2800      	cmp	r0, #0
 80a3f16:	da00      	bge.n	80a3f1a <_ZN9TCPClient5writeEPKhjm+0x2e>
 80a3f18:	6060      	str	r0, [r4, #4]
}
 80a3f1a:	b002      	add	sp, #8
 80a3f1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    int ret = status() ? socket_send_ex(d_->sock, buffer, size, 0, timeout, nullptr) : -1;
 80a3f20:	f04f 30ff 	mov.w	r0, #4294967295
 80a3f24:	e7f8      	b.n	80a3f18 <_ZN9TCPClient5writeEPKhjm+0x2c>

080a3f26 <_ZN9TCPClient9connectedEv>:
{
 80a3f26:	b570      	push	{r4, r5, r6, lr}
 80a3f28:	4605      	mov	r5, r0
  bool rv = (status() || bufferCount());
 80a3f2a:	f7ff ffbf 	bl	80a3eac <_ZN9TCPClient6statusEv>
 80a3f2e:	b9e8      	cbnz	r0, 80a3f6c <_ZN9TCPClient9connectedEv+0x46>
 80a3f30:	696b      	ldr	r3, [r5, #20]
 80a3f32:	f8b3 1086 	ldrh.w	r1, [r3, #134]	; 0x86
 80a3f36:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 80a3f3a:	4291      	cmp	r1, r2
 80a3f3c:	d116      	bne.n	80a3f6c <_ZN9TCPClient9connectedEv+0x46>
   return socket_handle_valid(sd);
 80a3f3e:	6818      	ldr	r0, [r3, #0]
 80a3f40:	f7ff fb88 	bl	80a3654 <socket_handle_valid>
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
 80a3f44:	b908      	cbnz	r0, 80a3f4a <_ZN9TCPClient9connectedEv+0x24>
  bool rv = (status() || bufferCount());
 80a3f46:	2000      	movs	r0, #0
}
 80a3f48:	bd70      	pop	{r4, r5, r6, pc}
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
 80a3f4a:	696b      	ldr	r3, [r5, #20]
 80a3f4c:	6818      	ldr	r0, [r3, #0]
 80a3f4e:	f7ff fb79 	bl	80a3644 <socket_active_status>
 80a3f52:	2801      	cmp	r0, #1
 80a3f54:	4604      	mov	r4, r0
 80a3f56:	d1f6      	bne.n	80a3f46 <_ZN9TCPClient9connectedEv+0x20>
      rv = available(); // Try CC3000
 80a3f58:	682b      	ldr	r3, [r5, #0]
 80a3f5a:	4628      	mov	r0, r5
 80a3f5c:	691b      	ldr	r3, [r3, #16]
 80a3f5e:	4798      	blx	r3
      if (!rv) {        // No more Data and CLOSE_WAIT
 80a3f60:	b930      	cbnz	r0, 80a3f70 <_ZN9TCPClient9connectedEv+0x4a>
          stop();       // Close our side
 80a3f62:	682b      	ldr	r3, [r5, #0]
 80a3f64:	4628      	mov	r0, r5
 80a3f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a3f68:	4798      	blx	r3
 80a3f6a:	e7ec      	b.n	80a3f46 <_ZN9TCPClient9connectedEv+0x20>
  bool rv = (status() || bufferCount());
 80a3f6c:	2001      	movs	r0, #1
 80a3f6e:	e7eb      	b.n	80a3f48 <_ZN9TCPClient9connectedEv+0x22>
      rv = available(); // Try CC3000
 80a3f70:	4620      	mov	r0, r4
 80a3f72:	e7e9      	b.n	80a3f48 <_ZN9TCPClient9connectedEv+0x22>

080a3f74 <_ZN9TCPClient4DataC1Em>:

TCPClient::Data::Data(sock_handle_t sock)
        : sock(sock),
          offset(0),
          total(0) {
 80a3f74:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
 80a3f76:	b510      	push	{r4, lr}
 80a3f78:	4604      	mov	r4, r0
          total(0) {
 80a3f7a:	6001      	str	r1, [r0, #0]
 80a3f7c:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
 80a3f80:	3088      	adds	r0, #136	; 0x88
 80a3f82:	f000 fe2d 	bl	80a4be0 <_ZN9IPAddressC1Ev>
}
 80a3f86:	4620      	mov	r0, r4
 80a3f88:	bd10      	pop	{r4, pc}
	...

080a3f8c <_ZN9TCPClientC1Em>:
TCPClient::TCPClient(sock_handle_t sock) :
 80a3f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a3f8e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a3f92:	2300      	movs	r3, #0
 80a3f94:	e9c0 3201 	strd	r3, r2, [r0, #4]
        d_(std::make_shared<Data>(sock))
 80a3f98:	4a0d      	ldr	r2, [pc, #52]	; (80a3fd0 <_ZN9TCPClientC1Em+0x44>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
 80a3f9a:	6103      	str	r3, [r0, #16]
 80a3f9c:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
 80a3f9e:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock) :
 80a3fa0:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80a3fa2:	20ac      	movs	r0, #172	; 0xac
 80a3fa4:	460e      	mov	r6, r1
 80a3fa6:	f7fc f878 	bl	80a009a <_Znwj>
	  auto __pi = ::new (__mem)
 80a3faa:	1e05      	subs	r5, r0, #0
 80a3fac:	f105 070c 	add.w	r7, r5, #12
 80a3fb0:	d008      	beq.n	80a3fc4 <_ZN9TCPClientC1Em+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
 80a3fb2:	2301      	movs	r3, #1
 80a3fb4:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
 80a3fb8:	4b06      	ldr	r3, [pc, #24]	; (80a3fd4 <_ZN9TCPClientC1Em+0x48>)
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80a3fba:	4631      	mov	r1, r6
 80a3fbc:	4638      	mov	r0, r7
 80a3fbe:	602b      	str	r3, [r5, #0]
 80a3fc0:	f7ff ffd8 	bl	80a3f74 <_ZN9TCPClient4DataC1Em>
  flush_buffer();
 80a3fc4:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
 80a3fc6:	e9c4 7505 	strd	r7, r5, [r4, #20]
 80a3fca:	f7ff fea2 	bl	80a3d12 <_ZN9TCPClient12flush_bufferEv>
}
 80a3fce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a3fd0:	080aa45c 	.word	0x080aa45c
 80a3fd4:	080aa438 	.word	0x080aa438

080a3fd8 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
 80a3fd8:	b510      	push	{r4, lr}
 80a3fda:	4604      	mov	r4, r0
 80a3fdc:	f7ff fb62 	bl	80a36a4 <socket_handle_invalid>
 80a3fe0:	4601      	mov	r1, r0
 80a3fe2:	4620      	mov	r0, r4
 80a3fe4:	f7ff ffd2 	bl	80a3f8c <_ZN9TCPClientC1Em>
}
 80a3fe8:	4620      	mov	r0, r4
 80a3fea:	bd10      	pop	{r4, pc}

080a3fec <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
 80a3fec:	b510      	push	{r4, lr}
 80a3fee:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
 80a3ff0:	6800      	ldr	r0, [r0, #0]
 80a3ff2:	f7ff fb2f 	bl	80a3654 <socket_handle_valid>
 80a3ff6:	b110      	cbz	r0, 80a3ffe <_ZN9TCPClient4DataD1Ev+0x12>
        socket_close(sock);
 80a3ff8:	6820      	ldr	r0, [r4, #0]
 80a3ffa:	f7ff fb4b 	bl	80a3694 <socket_close>
    }
}
 80a3ffe:	4620      	mov	r0, r4
 80a4000:	bd10      	pop	{r4, pc}

080a4002 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(noexcept( __p->~_Up()))
	{ __p->~_Up(); }
 80a4002:	300c      	adds	r0, #12
 80a4004:	f7ff bff2 	b.w	80a3fec <_ZN9TCPClient4DataD1Ev>

080a4008 <_ZN9TCPClient7connectEPKctm>:
{
 80a4008:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a400c:	461f      	mov	r7, r3
    stop();
 80a400e:	6803      	ldr	r3, [r0, #0]
{
 80a4010:	b08f      	sub	sp, #60	; 0x3c
    stop();
 80a4012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
{
 80a4014:	4606      	mov	r6, r0
 80a4016:	460d      	mov	r5, r1
 80a4018:	4690      	mov	r8, r2
    stop();
 80a401a:	4798      	blx	r3
    if (Network.ready())
 80a401c:	4813      	ldr	r0, [pc, #76]	; (80a406c <_ZN9TCPClient7connectEPKctm+0x64>)
 80a401e:	f001 f8de 	bl	80a51de <_ZN5spark12NetworkClass5readyEv>
 80a4022:	b1f0      	cbz	r0, 80a4062 <_ZN9TCPClient7connectEPKctm+0x5a>
        IPAddress ip_addr;
 80a4024:	a802      	add	r0, sp, #8
 80a4026:	f000 fddb 	bl	80a4be0 <_ZN9IPAddressC1Ev>
        if (inet_gethostbyname(host, strlen(host), ip_addr, nif, NULL) == 0) {
 80a402a:	4628      	mov	r0, r5
 80a402c:	f003 fbdc 	bl	80a77e8 <strlen>
 80a4030:	2400      	movs	r4, #0
 80a4032:	b281      	uxth	r1, r0
 80a4034:	463b      	mov	r3, r7
 80a4036:	4628      	mov	r0, r5
 80a4038:	9400      	str	r4, [sp, #0]
 80a403a:	aa03      	add	r2, sp, #12
 80a403c:	f7ff fba2 	bl	80a3784 <inet_gethostbyname>
 80a4040:	b990      	cbnz	r0, 80a4068 <_ZN9TCPClient7connectEPKctm+0x60>
            return connect(ip_addr, port, nif);
 80a4042:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
 80a4044:	ad09      	add	r5, sp, #36	; 0x24
 80a4046:	f8d3 9020 	ldr.w	r9, [r3, #32]
 80a404a:	4b09      	ldr	r3, [pc, #36]	; (80a4070 <_ZN9TCPClient7connectEPKctm+0x68>)
 80a404c:	ac03      	add	r4, sp, #12
 80a404e:	9308      	str	r3, [sp, #32]
 80a4050:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a4052:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a4054:	6823      	ldr	r3, [r4, #0]
 80a4056:	4642      	mov	r2, r8
 80a4058:	702b      	strb	r3, [r5, #0]
 80a405a:	4630      	mov	r0, r6
 80a405c:	463b      	mov	r3, r7
 80a405e:	a908      	add	r1, sp, #32
 80a4060:	47c8      	blx	r9
}
 80a4062:	b00f      	add	sp, #60	; 0x3c
 80a4064:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return 0; // error, could not connect
 80a4068:	4620      	mov	r0, r4
 80a406a:	e7fa      	b.n	80a4062 <_ZN9TCPClient7connectEPKctm+0x5a>
 80a406c:	20000640 	.word	0x20000640
 80a4070:	080aa4e0 	.word	0x080aa4e0

080a4074 <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
 80a4074:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a4078:	4607      	mov	r7, r0
 80a407a:	460d      	mov	r5, r1
 80a407c:	4616      	mov	r6, r2
 80a407e:	461c      	mov	r4, r3
    bool negative = val<0;
    if (negative) {
 80a4080:	2200      	movs	r2, #0
 80a4082:	2300      	movs	r3, #0
 80a4084:	4638      	mov	r0, r7
 80a4086:	4629      	mov	r1, r5
 80a4088:	f001 ff34 	bl	80a5ef4 <__aeabi_dcmplt>
 80a408c:	b120      	cbz	r0, 80a4098 <_Z4dtoadhPc+0x24>
        val = -val;
        *sout++ = '-';
 80a408e:	232d      	movs	r3, #45	; 0x2d
        val = -val;
 80a4090:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
        *sout++ = '-';
 80a4094:	f804 3b01 	strb.w	r3, [r4], #1
 80a4098:	2300      	movs	r3, #0
    }
    long scale = 1;
 80a409a:	f04f 0a01 	mov.w	sl, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
 80a409e:	220a      	movs	r2, #10
    for (uint8_t i=0; i<prec; i++)
 80a40a0:	b2d9      	uxtb	r1, r3
 80a40a2:	428e      	cmp	r6, r1
 80a40a4:	d903      	bls.n	80a40ae <_Z4dtoadhPc+0x3a>
        scale *= 10;
 80a40a6:	fb02 fa0a 	mul.w	sl, r2, sl
    for (uint8_t i=0; i<prec; i++)
 80a40aa:	3301      	adds	r3, #1
 80a40ac:	e7f8      	b.n	80a40a0 <_Z4dtoadhPc+0x2c>
    val *= scale;   // capture all the significant digits
 80a40ae:	4650      	mov	r0, sl
 80a40b0:	f001 fc44 	bl	80a593c <__aeabi_i2d>
 80a40b4:	463a      	mov	r2, r7
 80a40b6:	462b      	mov	r3, r5
 80a40b8:	f001 fcaa 	bl	80a5a10 <__aeabi_dmul>
 80a40bc:	4680      	mov	r8, r0
 80a40be:	4689      	mov	r9, r1
    uint64_t fixed = uint64_t(val);
 80a40c0:	f002 fb34 	bl	80a672c <__aeabi_d2ulz>
 80a40c4:	4605      	mov	r5, r0
 80a40c6:	460f      	mov	r7, r1
    if ((val-fixed)>=0.5)    // round last digit
 80a40c8:	f001 fc6c 	bl	80a59a4 <__aeabi_ul2d>
 80a40cc:	4602      	mov	r2, r0
 80a40ce:	460b      	mov	r3, r1
 80a40d0:	4640      	mov	r0, r8
 80a40d2:	4649      	mov	r1, r9
 80a40d4:	f001 fae4 	bl	80a56a0 <__aeabi_dsub>
 80a40d8:	2200      	movs	r2, #0
 80a40da:	4b12      	ldr	r3, [pc, #72]	; (80a4124 <_Z4dtoadhPc+0xb0>)
 80a40dc:	f001 ff1e 	bl	80a5f1c <__aeabi_dcmpge>
 80a40e0:	b110      	cbz	r0, 80a40e8 <_Z4dtoadhPc+0x74>
        fixed++;
 80a40e2:	3501      	adds	r5, #1
 80a40e4:	f147 0700 	adc.w	r7, r7, #0

    unsigned long first = (unsigned long)(fixed / scale);
 80a40e8:	4652      	mov	r2, sl
 80a40ea:	4628      	mov	r0, r5
 80a40ec:	4639      	mov	r1, r7
 80a40ee:	17d3      	asrs	r3, r2, #31
 80a40f0:	f002 fad0 	bl	80a6694 <__aeabi_uldivmod>
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
 80a40f4:	2301      	movs	r3, #1
 80a40f6:	4615      	mov	r5, r2
 80a40f8:	4621      	mov	r1, r4
 80a40fa:	220a      	movs	r2, #10
 80a40fc:	f7ff fcf7 	bl	80a3aee <ultoa>
    if (prec) {
 80a4100:	b16e      	cbz	r6, 80a411e <_Z4dtoadhPc+0xaa>
        sout += strlen(sout);
 80a4102:	4620      	mov	r0, r4
 80a4104:	f003 fb70 	bl	80a77e8 <strlen>
        *sout++ = '.';
 80a4108:	232e      	movs	r3, #46	; 0x2e
        sout += strlen(sout);
 80a410a:	1821      	adds	r1, r4, r0
        *sout++ = '.';
 80a410c:	5423      	strb	r3, [r4, r0]
        ultoa(second, sout, 10, prec);
 80a410e:	220a      	movs	r2, #10
 80a4110:	4633      	mov	r3, r6
 80a4112:	4628      	mov	r0, r5
    }
}
 80a4114:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        ultoa(second, sout, 10, prec);
 80a4118:	3101      	adds	r1, #1
 80a411a:	f7ff bce8 	b.w	80a3aee <ultoa>
}
 80a411e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a4122:	bf00      	nop
 80a4124:	3fe00000 	.word	0x3fe00000

080a4128 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a4128:	b510      	push	{r4, lr}
 80a412a:	4604      	mov	r4, r0
{
	free(buffer);
 80a412c:	6800      	ldr	r0, [r0, #0]
 80a412e:	f7ff fc17 	bl	80a3960 <free>
}
 80a4132:	4620      	mov	r0, r4
 80a4134:	bd10      	pop	{r4, pc}

080a4136 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a4136:	b510      	push	{r4, lr}
 80a4138:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a413a:	6800      	ldr	r0, [r0, #0]
 80a413c:	b108      	cbz	r0, 80a4142 <_ZN6String10invalidateEv+0xc>
 80a413e:	f7ff fc0f 	bl	80a3960 <free>
	buffer = NULL;
 80a4142:	2300      	movs	r3, #0
	capacity = len = 0;
 80a4144:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
 80a4148:	6023      	str	r3, [r4, #0]
}
 80a414a:	bd10      	pop	{r4, pc}

080a414c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a414c:	b538      	push	{r3, r4, r5, lr}
 80a414e:	4604      	mov	r4, r0
 80a4150:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a4152:	6800      	ldr	r0, [r0, #0]
 80a4154:	3101      	adds	r1, #1
 80a4156:	f7ff fc0b 	bl	80a3970 <realloc>
	if (newbuffer) {
 80a415a:	b110      	cbz	r0, 80a4162 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a415c:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
 80a4160:	2001      	movs	r0, #1
	}
	return 0;
}
 80a4162:	bd38      	pop	{r3, r4, r5, pc}

080a4164 <_ZN6String7reserveEj>:
{
 80a4164:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a4166:	6803      	ldr	r3, [r0, #0]
{
 80a4168:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a416a:	b123      	cbz	r3, 80a4176 <_ZN6String7reserveEj+0x12>
 80a416c:	6843      	ldr	r3, [r0, #4]
 80a416e:	428b      	cmp	r3, r1
 80a4170:	d301      	bcc.n	80a4176 <_ZN6String7reserveEj+0x12>
 80a4172:	2001      	movs	r0, #1
}
 80a4174:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
 80a4176:	4620      	mov	r0, r4
 80a4178:	f7ff ffe8 	bl	80a414c <_ZN6String12changeBufferEj>
 80a417c:	2800      	cmp	r0, #0
 80a417e:	d0f9      	beq.n	80a4174 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
 80a4180:	68a3      	ldr	r3, [r4, #8]
 80a4182:	2b00      	cmp	r3, #0
 80a4184:	d1f5      	bne.n	80a4172 <_ZN6String7reserveEj+0xe>
 80a4186:	6822      	ldr	r2, [r4, #0]
 80a4188:	7013      	strb	r3, [r2, #0]
 80a418a:	e7f2      	b.n	80a4172 <_ZN6String7reserveEj+0xe>

080a418c <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a418c:	b570      	push	{r4, r5, r6, lr}
 80a418e:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a4190:	4611      	mov	r1, r2
{
 80a4192:	4604      	mov	r4, r0
 80a4194:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a4196:	f7ff ffe5 	bl	80a4164 <_ZN6String7reserveEj>
 80a419a:	b920      	cbnz	r0, 80a41a6 <_ZN6String4copyEPKcj+0x1a>
		invalidate();
 80a419c:	4620      	mov	r0, r4
 80a419e:	f7ff ffca 	bl	80a4136 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
 80a41a2:	4620      	mov	r0, r4
 80a41a4:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(buffer, cstr, length);
 80a41a6:	462a      	mov	r2, r5
 80a41a8:	4631      	mov	r1, r6
 80a41aa:	6820      	ldr	r0, [r4, #0]
	len = length;
 80a41ac:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a41ae:	f002 fd6d 	bl	80a6c8c <memcpy>
	buffer[len] = 0;
 80a41b2:	2100      	movs	r1, #0
 80a41b4:	6822      	ldr	r2, [r4, #0]
 80a41b6:	68a3      	ldr	r3, [r4, #8]
 80a41b8:	54d1      	strb	r1, [r2, r3]
	return *this;
 80a41ba:	e7f2      	b.n	80a41a2 <_ZN6String4copyEPKcj+0x16>

080a41bc <_ZN6StringC1EPKc>:
String::String(const char *cstr)
 80a41bc:	b538      	push	{r3, r4, r5, lr}
	buffer = NULL;
 80a41be:	2300      	movs	r3, #0
String::String(const char *cstr)
 80a41c0:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a41c2:	460d      	mov	r5, r1
	capacity = 0;
 80a41c4:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 80a41c8:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a41ca:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
 80a41cc:	b139      	cbz	r1, 80a41de <_ZN6StringC1EPKc+0x22>
 80a41ce:	4608      	mov	r0, r1
 80a41d0:	f003 fb0a 	bl	80a77e8 <strlen>
 80a41d4:	4629      	mov	r1, r5
 80a41d6:	4602      	mov	r2, r0
 80a41d8:	4620      	mov	r0, r4
 80a41da:	f7ff ffd7 	bl	80a418c <_ZN6String4copyEPKcj>
}
 80a41de:	4620      	mov	r0, r4
 80a41e0:	bd38      	pop	{r3, r4, r5, pc}

080a41e2 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 80a41e2:	b538      	push	{r3, r4, r5, lr}
 80a41e4:	4605      	mov	r5, r0
	if (buffer) {
 80a41e6:	6800      	ldr	r0, [r0, #0]
{
 80a41e8:	460c      	mov	r4, r1
	if (buffer) {
 80a41ea:	b168      	cbz	r0, 80a4208 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
 80a41ec:	686a      	ldr	r2, [r5, #4]
 80a41ee:	688b      	ldr	r3, [r1, #8]
 80a41f0:	429a      	cmp	r2, r3
 80a41f2:	d307      	bcc.n	80a4204 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
 80a41f4:	6809      	ldr	r1, [r1, #0]
 80a41f6:	f002 fd8d 	bl	80a6d14 <strcpy>
			len = rhs.len;
 80a41fa:	68a3      	ldr	r3, [r4, #8]
 80a41fc:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
 80a41fe:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
 80a4200:	60a3      	str	r3, [r4, #8]
}
 80a4202:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
 80a4204:	f7ff fbac 	bl	80a3960 <free>
	buffer = rhs.buffer;
 80a4208:	6823      	ldr	r3, [r4, #0]
 80a420a:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
 80a420c:	6863      	ldr	r3, [r4, #4]
 80a420e:	606b      	str	r3, [r5, #4]
	len = rhs.len;
 80a4210:	68a3      	ldr	r3, [r4, #8]
 80a4212:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
 80a4214:	2300      	movs	r3, #0
	rhs.capacity = 0;
 80a4216:	e9c4 3300 	strd	r3, r3, [r4]
 80a421a:	e7f1      	b.n	80a4200 <_ZN6String4moveERS_+0x1e>

080a421c <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 80a421c:	4288      	cmp	r0, r1
{
 80a421e:	b510      	push	{r4, lr}
 80a4220:	460b      	mov	r3, r1
 80a4222:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 80a4224:	d004      	beq.n	80a4230 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 80a4226:	6809      	ldr	r1, [r1, #0]
 80a4228:	b121      	cbz	r1, 80a4234 <_ZN6StringaSERKS_+0x18>
 80a422a:	689a      	ldr	r2, [r3, #8]
 80a422c:	f7ff ffae 	bl	80a418c <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 80a4230:	4620      	mov	r0, r4
 80a4232:	bd10      	pop	{r4, pc}
	else invalidate();
 80a4234:	f7ff ff7f 	bl	80a4136 <_ZN6String10invalidateEv>
 80a4238:	e7fa      	b.n	80a4230 <_ZN6StringaSERKS_+0x14>

080a423a <_ZN6StringC1ERKS_>:
	buffer = NULL;
 80a423a:	2300      	movs	r3, #0
String::String(const String &value)
 80a423c:	b510      	push	{r4, lr}
 80a423e:	4604      	mov	r4, r0
	capacity = 0;
 80a4240:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 80a4244:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a4246:	7303      	strb	r3, [r0, #12]
	*this = value;
 80a4248:	f7ff ffe8 	bl	80a421c <_ZN6StringaSERKS_>
}
 80a424c:	4620      	mov	r0, r4
 80a424e:	bd10      	pop	{r4, pc}

080a4250 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
 80a4250:	4288      	cmp	r0, r1
{
 80a4252:	b510      	push	{r4, lr}
 80a4254:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
 80a4256:	d001      	beq.n	80a425c <_ZN6StringaSEOS_+0xc>
 80a4258:	f7ff ffc3 	bl	80a41e2 <_ZN6String4moveERS_>
	return *this;
}
 80a425c:	4620      	mov	r0, r4
 80a425e:	bd10      	pop	{r4, pc}

080a4260 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 80a4260:	b538      	push	{r3, r4, r5, lr}
 80a4262:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a4264:	460c      	mov	r4, r1
 80a4266:	b149      	cbz	r1, 80a427c <_ZN6StringaSEPKc+0x1c>
 80a4268:	4608      	mov	r0, r1
 80a426a:	f003 fabd 	bl	80a77e8 <strlen>
 80a426e:	4621      	mov	r1, r4
 80a4270:	4602      	mov	r2, r0
 80a4272:	4628      	mov	r0, r5
 80a4274:	f7ff ff8a 	bl	80a418c <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 80a4278:	4628      	mov	r0, r5
 80a427a:	bd38      	pop	{r3, r4, r5, pc}
	else invalidate();
 80a427c:	f7ff ff5b 	bl	80a4136 <_ZN6String10invalidateEv>
 80a4280:	e7fa      	b.n	80a4278 <_ZN6StringaSEPKc+0x18>

080a4282 <_ZN6StringC1Ehh>:
String::String(unsigned char value, unsigned char base)
 80a4282:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80a4284:	4604      	mov	r4, r0
	buffer = NULL;
 80a4286:	2300      	movs	r3, #0
String::String(unsigned char value, unsigned char base)
 80a4288:	4608      	mov	r0, r1
	capacity = 0;
 80a428a:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
 80a428e:	60a3      	str	r3, [r4, #8]
	flags = 0;
 80a4290:	7323      	strb	r3, [r4, #12]
	utoa(value, buf, base);
 80a4292:	a901      	add	r1, sp, #4
 80a4294:	f7ff fc6a 	bl	80a3b6c <utoa>
	*this = buf;
 80a4298:	4620      	mov	r0, r4
 80a429a:	a901      	add	r1, sp, #4
 80a429c:	f7ff ffe0 	bl	80a4260 <_ZN6StringaSEPKc>
}
 80a42a0:	4620      	mov	r0, r4
 80a42a2:	b004      	add	sp, #16
 80a42a4:	bd10      	pop	{r4, pc}

080a42a6 <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
 80a42a6:	b510      	push	{r4, lr}
	buffer = NULL;
 80a42a8:	2300      	movs	r3, #0
String::String(int value, unsigned char base)
 80a42aa:	4604      	mov	r4, r0
 80a42ac:	b08a      	sub	sp, #40	; 0x28
	capacity = 0;
 80a42ae:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
 80a42b2:	60a3      	str	r3, [r4, #8]
	flags = 0;
 80a42b4:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
 80a42b6:	4608      	mov	r0, r1
	itoa(value, buf, base);
 80a42b8:	a901      	add	r1, sp, #4
 80a42ba:	f7ff fc42 	bl	80a3b42 <itoa>
	*this = buf;
 80a42be:	4620      	mov	r0, r4
 80a42c0:	a901      	add	r1, sp, #4
 80a42c2:	f7ff ffcd 	bl	80a4260 <_ZN6StringaSEPKc>
}
 80a42c6:	4620      	mov	r0, r4
 80a42c8:	b00a      	add	sp, #40	; 0x28
 80a42ca:	bd10      	pop	{r4, pc}

080a42cc <_ZN6StringC1Ejh>:
String::String(unsigned int value, unsigned char base)
 80a42cc:	b510      	push	{r4, lr}
	buffer = NULL;
 80a42ce:	2300      	movs	r3, #0
String::String(unsigned int value, unsigned char base)
 80a42d0:	4604      	mov	r4, r0
 80a42d2:	b08a      	sub	sp, #40	; 0x28
	capacity = 0;
 80a42d4:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
 80a42d8:	60a3      	str	r3, [r4, #8]
	flags = 0;
 80a42da:	7323      	strb	r3, [r4, #12]
String::String(unsigned int value, unsigned char base)
 80a42dc:	4608      	mov	r0, r1
	utoa(value, buf, base);
 80a42de:	a901      	add	r1, sp, #4
 80a42e0:	f7ff fc44 	bl	80a3b6c <utoa>
	*this = buf;
 80a42e4:	4620      	mov	r0, r4
 80a42e6:	a901      	add	r1, sp, #4
 80a42e8:	f7ff ffba 	bl	80a4260 <_ZN6StringaSEPKc>
}
 80a42ec:	4620      	mov	r0, r4
 80a42ee:	b00a      	add	sp, #40	; 0x28
 80a42f0:	bd10      	pop	{r4, pc}

080a42f2 <_ZN6StringC1Emh>:
String::String(unsigned long value, unsigned char base)
 80a42f2:	b510      	push	{r4, lr}
	buffer = NULL;
 80a42f4:	2300      	movs	r3, #0
String::String(unsigned long value, unsigned char base)
 80a42f6:	4604      	mov	r4, r0
 80a42f8:	b08a      	sub	sp, #40	; 0x28
	capacity = 0;
 80a42fa:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
 80a42fe:	60a3      	str	r3, [r4, #8]
	flags = 0;
 80a4300:	7323      	strb	r3, [r4, #12]
String::String(unsigned long value, unsigned char base)
 80a4302:	4608      	mov	r0, r1
	ultoa(value, buf, base);
 80a4304:	2301      	movs	r3, #1
 80a4306:	a901      	add	r1, sp, #4
 80a4308:	f7ff fbf1 	bl	80a3aee <ultoa>
	*this = buf;
 80a430c:	4620      	mov	r0, r4
 80a430e:	a901      	add	r1, sp, #4
 80a4310:	f7ff ffa6 	bl	80a4260 <_ZN6StringaSEPKc>
}
 80a4314:	4620      	mov	r0, r4
 80a4316:	b00a      	add	sp, #40	; 0x28
 80a4318:	bd10      	pop	{r4, pc}

080a431a <_ZN6StringC1Efi>:
	buffer = NULL;
 80a431a:	2300      	movs	r3, #0
String::String(float value, int decimalPlaces)
 80a431c:	b530      	push	{r4, r5, lr}
 80a431e:	4604      	mov	r4, r0
 80a4320:	b08b      	sub	sp, #44	; 0x2c
	capacity = 0;
 80a4322:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 80a4326:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a4328:	7303      	strb	r3, [r0, #12]
	dtoa(value, decimalPlaces, buf);
 80a432a:	b2d5      	uxtb	r5, r2
 80a432c:	4608      	mov	r0, r1
 80a432e:	f001 fb17 	bl	80a5960 <__aeabi_f2d>
 80a4332:	462a      	mov	r2, r5
 80a4334:	ab01      	add	r3, sp, #4
 80a4336:	f7ff fe9d 	bl	80a4074 <_Z4dtoadhPc>
        *this = buf;
 80a433a:	4620      	mov	r0, r4
 80a433c:	a901      	add	r1, sp, #4
 80a433e:	f7ff ff8f 	bl	80a4260 <_ZN6StringaSEPKc>
}
 80a4342:	4620      	mov	r0, r4
 80a4344:	b00b      	add	sp, #44	; 0x2c
 80a4346:	bd30      	pop	{r4, r5, pc}

080a4348 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
 80a4348:	b570      	push	{r4, r5, r6, lr}
 80a434a:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
 80a434c:	460e      	mov	r6, r1
 80a434e:	b909      	cbnz	r1, 80a4354 <_ZN6String6concatEPKcj+0xc>
 80a4350:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
 80a4352:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
 80a4354:	b16a      	cbz	r2, 80a4372 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
 80a4356:	6884      	ldr	r4, [r0, #8]
 80a4358:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
 80a435a:	4621      	mov	r1, r4
 80a435c:	f7ff ff02 	bl	80a4164 <_ZN6String7reserveEj>
 80a4360:	2800      	cmp	r0, #0
 80a4362:	d0f5      	beq.n	80a4350 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
 80a4364:	6828      	ldr	r0, [r5, #0]
 80a4366:	68ab      	ldr	r3, [r5, #8]
 80a4368:	4631      	mov	r1, r6
 80a436a:	4418      	add	r0, r3
 80a436c:	f002 fcd2 	bl	80a6d14 <strcpy>
	len = newlen;
 80a4370:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
 80a4372:	2001      	movs	r0, #1
 80a4374:	e7ed      	b.n	80a4352 <_ZN6String6concatEPKcj+0xa>

080a4376 <_ZN6String6concatERKS_>:
	return concat(s.buffer, s.len);
 80a4376:	688a      	ldr	r2, [r1, #8]
 80a4378:	6809      	ldr	r1, [r1, #0]
 80a437a:	f7ff bfe5 	b.w	80a4348 <_ZN6String6concatEPKcj>

080a437e <_ZN6String6concatEc>:

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
 80a437e:	2300      	movs	r3, #0
{
 80a4380:	b507      	push	{r0, r1, r2, lr}
	return concat(buf, 1);
 80a4382:	2201      	movs	r2, #1
	buf[0] = c;
 80a4384:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
 80a4388:	a901      	add	r1, sp, #4
	buf[1] = 0;
 80a438a:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
 80a438e:	f7ff ffdb 	bl	80a4348 <_ZN6String6concatEPKcj>
}
 80a4392:	b003      	add	sp, #12
 80a4394:	f85d fb04 	ldr.w	pc, [sp], #4

080a4398 <_ZN6String6concatEi>:
	itoa(num, buf, 10);
	return concat(buf, strlen(buf));
}

unsigned char String::concat(int num)
{
 80a4398:	b513      	push	{r0, r1, r4, lr}
	char buf[7];
	itoa(num, buf, 10);
 80a439a:	220a      	movs	r2, #10
{
 80a439c:	4604      	mov	r4, r0
 80a439e:	4608      	mov	r0, r1
	itoa(num, buf, 10);
 80a43a0:	4669      	mov	r1, sp
 80a43a2:	f7ff fbce 	bl	80a3b42 <itoa>
	return concat(buf, strlen(buf));
 80a43a6:	4668      	mov	r0, sp
 80a43a8:	f003 fa1e 	bl	80a77e8 <strlen>
 80a43ac:	4669      	mov	r1, sp
 80a43ae:	4602      	mov	r2, r0
 80a43b0:	4620      	mov	r0, r4
 80a43b2:	f7ff ffc9 	bl	80a4348 <_ZN6String6concatEPKcj>
}
 80a43b6:	b002      	add	sp, #8
 80a43b8:	bd10      	pop	{r4, pc}

080a43ba <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 80a43ba:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 80a43bc:	688a      	ldr	r2, [r1, #8]
 80a43be:	6809      	ldr	r1, [r1, #0]
{
 80a43c0:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 80a43c2:	f7ff ffc1 	bl	80a4348 <_ZN6String6concatEPKcj>
 80a43c6:	b910      	cbnz	r0, 80a43ce <_ZplRK15StringSumHelperRK6String+0x14>
 80a43c8:	4620      	mov	r0, r4
 80a43ca:	f7ff feb4 	bl	80a4136 <_ZN6String10invalidateEv>
	return a;
}
 80a43ce:	4620      	mov	r0, r4
 80a43d0:	bd10      	pop	{r4, pc}

080a43d2 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
 80a43d2:	b538      	push	{r3, r4, r5, lr}
 80a43d4:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
 80a43d6:	460d      	mov	r5, r1
 80a43d8:	b921      	cbnz	r1, 80a43e4 <_ZplRK15StringSumHelperPKc+0x12>
 80a43da:	4620      	mov	r0, r4
 80a43dc:	f7ff feab 	bl	80a4136 <_ZN6String10invalidateEv>
	return a;
}
 80a43e0:	4620      	mov	r0, r4
 80a43e2:	bd38      	pop	{r3, r4, r5, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
 80a43e4:	4608      	mov	r0, r1
 80a43e6:	f003 f9ff 	bl	80a77e8 <strlen>
 80a43ea:	4629      	mov	r1, r5
 80a43ec:	4602      	mov	r2, r0
 80a43ee:	4620      	mov	r0, r4
 80a43f0:	f7ff ffaa 	bl	80a4348 <_ZN6String6concatEPKcj>
 80a43f4:	2800      	cmp	r0, #0
 80a43f6:	d0f0      	beq.n	80a43da <_ZplRK15StringSumHelperPKc+0x8>
 80a43f8:	e7f2      	b.n	80a43e0 <_ZplRK15StringSumHelperPKc+0xe>

080a43fa <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 80a43fa:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
 80a43fc:	6882      	ldr	r2, [r0, #8]
 80a43fe:	b93a      	cbnz	r2, 80a4410 <_ZNK6String6equalsEPKc+0x16>
 80a4400:	b121      	cbz	r1, 80a440c <_ZNK6String6equalsEPKc+0x12>
 80a4402:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
 80a4404:	fab0 f080 	clz	r0, r0
 80a4408:	0940      	lsrs	r0, r0, #5
 80a440a:	e000      	b.n	80a440e <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
 80a440c:	2001      	movs	r0, #1
}
 80a440e:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
 80a4410:	6800      	ldr	r0, [r0, #0]
 80a4412:	b909      	cbnz	r1, 80a4418 <_ZNK6String6equalsEPKc+0x1e>
 80a4414:	7800      	ldrb	r0, [r0, #0]
 80a4416:	e7f5      	b.n	80a4404 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
 80a4418:	f002 fc72 	bl	80a6d00 <strcmp>
 80a441c:	e7f2      	b.n	80a4404 <_ZNK6String6equalsEPKc+0xa>
	...

080a4420 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
 80a4420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a4422:	461d      	mov	r5, r3
	if (left > right) {
 80a4424:	429a      	cmp	r2, r3
 80a4426:	bf88      	it	hi
 80a4428:	4613      	movhi	r3, r2
{
 80a442a:	460f      	mov	r7, r1
 80a442c:	4614      	mov	r4, r2
	if (left > right) {
 80a442e:	bf88      	it	hi
 80a4430:	462c      	movhi	r4, r5
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
 80a4432:	490b      	ldr	r1, [pc, #44]	; (80a4460 <_ZNK6String9substringEjj+0x40>)
	if (left > right) {
 80a4434:	bf88      	it	hi
 80a4436:	461d      	movhi	r5, r3
{
 80a4438:	4606      	mov	r6, r0
	String out;
 80a443a:	f7ff febf 	bl	80a41bc <_ZN6StringC1EPKc>
	if (left > len) return out;
 80a443e:	68ba      	ldr	r2, [r7, #8]
 80a4440:	42a2      	cmp	r2, r4
 80a4442:	d30a      	bcc.n	80a445a <_ZNK6String9substringEjj+0x3a>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
 80a4444:	6839      	ldr	r1, [r7, #0]
 80a4446:	42aa      	cmp	r2, r5
 80a4448:	bf94      	ite	ls
 80a444a:	ebc4 0202 	rsbls	r2, r4, r2
 80a444e:	ebc4 0205 	rsbhi	r2, r4, r5
 80a4452:	4630      	mov	r0, r6
 80a4454:	4421      	add	r1, r4
 80a4456:	f7ff fe99 	bl	80a418c <_ZN6String4copyEPKcj>
	return out;
}
 80a445a:	4630      	mov	r0, r6
 80a445c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a445e:	bf00      	nop
 80a4460:	080aa2c3 	.word	0x080aa2c3

080a4464 <_ZNK6String9substringEj>:
{
 80a4464:	b510      	push	{r4, lr}
 80a4466:	4604      	mov	r4, r0
	return substring(left, len);
 80a4468:	688b      	ldr	r3, [r1, #8]
 80a446a:	f7ff ffd9 	bl	80a4420 <_ZNK6String9substringEjj>
}
 80a446e:	4620      	mov	r0, r4
 80a4470:	bd10      	pop	{r4, pc}

080a4472 <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
 80a4472:	6800      	ldr	r0, [r0, #0]
 80a4474:	b108      	cbz	r0, 80a447a <_ZNK6String5toIntEv+0x8>
 80a4476:	f002 bb01 	b.w	80a6a7c <atol>
	return 0;
}
 80a447a:	4770      	bx	lr

080a447c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a447c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a447e:	4606      	mov	r6, r0
 80a4480:	460d      	mov	r5, r1
  size_t n = 0;
 80a4482:	2400      	movs	r4, #0
 80a4484:	188f      	adds	r7, r1, r2
  while (size--) {
 80a4486:	42bd      	cmp	r5, r7
 80a4488:	d00c      	beq.n	80a44a4 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a448a:	6833      	ldr	r3, [r6, #0]
 80a448c:	4630      	mov	r0, r6
 80a448e:	689b      	ldr	r3, [r3, #8]
 80a4490:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a4494:	4798      	blx	r3
     if (chunk>=0)
 80a4496:	1e03      	subs	r3, r0, #0
 80a4498:	db01      	blt.n	80a449e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a449a:	441c      	add	r4, r3
  while (size--) {
 80a449c:	e7f3      	b.n	80a4486 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a449e:	2c00      	cmp	r4, #0
 80a44a0:	bf08      	it	eq
 80a44a2:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 80a44a4:	4620      	mov	r0, r4
 80a44a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a44a8 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a44a8:	b570      	push	{r4, r5, r6, lr}
 80a44aa:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a44ac:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a44ae:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 80a44b0:	b149      	cbz	r1, 80a44c6 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a44b2:	f003 f999 	bl	80a77e8 <strlen>
 80a44b6:	682b      	ldr	r3, [r5, #0]
 80a44b8:	4602      	mov	r2, r0
 80a44ba:	4621      	mov	r1, r4
 80a44bc:	4628      	mov	r0, r5
    }
 80a44be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return write((const uint8_t *)str, strlen(str));
 80a44c2:	68db      	ldr	r3, [r3, #12]
 80a44c4:	4718      	bx	r3
    }
 80a44c6:	bd70      	pop	{r4, r5, r6, pc}

080a44c8 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
 80a44c8:	b508      	push	{r3, lr}
  return write(str);
 80a44ca:	f7ff ffed 	bl	80a44a8 <_ZN5Print5writeEPKc>
}
 80a44ce:	bd08      	pop	{r3, pc}

080a44d0 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
 80a44d0:	6803      	ldr	r3, [r0, #0]
 80a44d2:	689b      	ldr	r3, [r3, #8]
 80a44d4:	4718      	bx	r3

080a44d6 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a44d6:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a44d8:	210d      	movs	r1, #13
{
 80a44da:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a44dc:	f7ff fff8 	bl	80a44d0 <_ZN5Print5printEc>
  n += print('\n');
 80a44e0:	210a      	movs	r1, #10
  size_t n = print('\r');
 80a44e2:	4604      	mov	r4, r0
  n += print('\n');
 80a44e4:	4628      	mov	r0, r5
 80a44e6:	f7ff fff3 	bl	80a44d0 <_ZN5Print5printEc>
  return n;
}
 80a44ea:	4420      	add	r0, r4
 80a44ec:	bd38      	pop	{r3, r4, r5, pc}

080a44ee <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a44ee:	b538      	push	{r3, r4, r5, lr}
 80a44f0:	4605      	mov	r5, r0
  return write(str);
 80a44f2:	f7ff ffd9 	bl	80a44a8 <_ZN5Print5writeEPKc>
 80a44f6:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
 80a44f8:	4628      	mov	r0, r5
 80a44fa:	f7ff ffec 	bl	80a44d6 <_ZN5Print7printlnEv>
  return n;
}
 80a44fe:	4420      	add	r0, r4
 80a4500:	bd38      	pop	{r3, r4, r5, pc}

080a4502 <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a4502:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a4504:	2a01      	cmp	r2, #1
 80a4506:	bf98      	it	ls
 80a4508:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a450a:	b530      	push	{r4, r5, lr}
 80a450c:	b08b      	sub	sp, #44	; 0x2c
 80a450e:	460c      	mov	r4, r1
  *str = '\0';
 80a4510:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 80a4514:	a909      	add	r1, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 80a4516:	4625      	mov	r5, r4
 80a4518:	fbb4 f4f2 	udiv	r4, r4, r2
   char c = m - base * n;
 80a451c:	fb04 5312 	mls	r3, r4, r2, r5
 80a4520:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a4522:	2b09      	cmp	r3, #9
 80a4524:	bf94      	ite	ls
 80a4526:	3330      	addls	r3, #48	; 0x30
 80a4528:	3337      	addhi	r3, #55	; 0x37
 80a452a:	b2db      	uxtb	r3, r3
  } while(n);
 80a452c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a452e:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while(n);
 80a4532:	d9f0      	bls.n	80a4516 <_ZN5Print11printNumberEmh+0x14>

  return write(str);
 80a4534:	f7ff ffb8 	bl	80a44a8 <_ZN5Print5writeEPKc>
}
 80a4538:	b00b      	add	sp, #44	; 0x2c
 80a453a:	bd30      	pop	{r4, r5, pc}

080a453c <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a453c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a4540:	4605      	mov	r5, r0
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a4542:	4619      	mov	r1, r3
 80a4544:	4610      	mov	r0, r2
{
 80a4546:	4692      	mov	sl, r2
 80a4548:	461f      	mov	r7, r3
 80a454a:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
  if (isnan(number)) return print("nan");
 80a454e:	f001 fcf9 	bl	80a5f44 <__aeabi_dcmpun>
 80a4552:	b140      	cbz	r0, 80a4566 <_ZN5Print10printFloatEdh+0x2a>
  return write(str);
 80a4554:	4950      	ldr	r1, [pc, #320]	; (80a4698 <_ZN5Print10printFloatEdh+0x15c>)
 80a4556:	4628      	mov	r0, r5
 80a4558:	f7ff ffa6 	bl	80a44a8 <_ZN5Print5writeEPKc>
 80a455c:	4604      	mov	r4, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
 80a455e:	4620      	mov	r0, r4
 80a4560:	b003      	add	sp, #12
 80a4562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
 80a4566:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
 80a456a:	f04f 32ff 	mov.w	r2, #4294967295
 80a456e:	4650      	mov	r0, sl
 80a4570:	4621      	mov	r1, r4
 80a4572:	4b4a      	ldr	r3, [pc, #296]	; (80a469c <_ZN5Print10printFloatEdh+0x160>)
 80a4574:	f001 fce6 	bl	80a5f44 <__aeabi_dcmpun>
 80a4578:	b948      	cbnz	r0, 80a458e <_ZN5Print10printFloatEdh+0x52>
 80a457a:	f04f 32ff 	mov.w	r2, #4294967295
 80a457e:	4650      	mov	r0, sl
 80a4580:	4621      	mov	r1, r4
 80a4582:	4b46      	ldr	r3, [pc, #280]	; (80a469c <_ZN5Print10printFloatEdh+0x160>)
 80a4584:	f001 fcc0 	bl	80a5f08 <__aeabi_dcmple>
 80a4588:	b908      	cbnz	r0, 80a458e <_ZN5Print10printFloatEdh+0x52>
  return write(str);
 80a458a:	4945      	ldr	r1, [pc, #276]	; (80a46a0 <_ZN5Print10printFloatEdh+0x164>)
 80a458c:	e7e3      	b.n	80a4556 <_ZN5Print10printFloatEdh+0x1a>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
 80a458e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a4592:	4650      	mov	r0, sl
 80a4594:	4639      	mov	r1, r7
 80a4596:	4b43      	ldr	r3, [pc, #268]	; (80a46a4 <_ZN5Print10printFloatEdh+0x168>)
 80a4598:	f001 fcca 	bl	80a5f30 <__aeabi_dcmpgt>
 80a459c:	b108      	cbz	r0, 80a45a2 <_ZN5Print10printFloatEdh+0x66>
  return write(str);
 80a459e:	4942      	ldr	r1, [pc, #264]	; (80a46a8 <_ZN5Print10printFloatEdh+0x16c>)
 80a45a0:	e7d9      	b.n	80a4556 <_ZN5Print10printFloatEdh+0x1a>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
 80a45a2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a45a6:	4650      	mov	r0, sl
 80a45a8:	4639      	mov	r1, r7
 80a45aa:	4b40      	ldr	r3, [pc, #256]	; (80a46ac <_ZN5Print10printFloatEdh+0x170>)
 80a45ac:	f001 fca2 	bl	80a5ef4 <__aeabi_dcmplt>
 80a45b0:	2800      	cmp	r0, #0
 80a45b2:	d1f4      	bne.n	80a459e <_ZN5Print10printFloatEdh+0x62>
  if (number < 0.0)
 80a45b4:	2200      	movs	r2, #0
 80a45b6:	2300      	movs	r3, #0
 80a45b8:	4650      	mov	r0, sl
 80a45ba:	4639      	mov	r1, r7
 80a45bc:	f001 fc9a 	bl	80a5ef4 <__aeabi_dcmplt>
 80a45c0:	4604      	mov	r4, r0
 80a45c2:	b130      	cbz	r0, 80a45d2 <_ZN5Print10printFloatEdh+0x96>
     n += print('-');
 80a45c4:	212d      	movs	r1, #45	; 0x2d
 80a45c6:	4628      	mov	r0, r5
 80a45c8:	f7ff ff82 	bl	80a44d0 <_ZN5Print5printEc>
 80a45cc:	4604      	mov	r4, r0
     number = -number;
 80a45ce:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
  size_t n = 0;
 80a45d2:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
 80a45d6:	2000      	movs	r0, #0
    rounding /= 10.0;
 80a45d8:	f04f 0800 	mov.w	r8, #0
  double rounding = 0.5;
 80a45dc:	4934      	ldr	r1, [pc, #208]	; (80a46b0 <_ZN5Print10printFloatEdh+0x174>)
    rounding /= 10.0;
 80a45de:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 80a46b8 <_ZN5Print10printFloatEdh+0x17c>
  for (uint8_t i=0; i<digits; ++i)
 80a45e2:	fa5f f38b 	uxtb.w	r3, fp
 80a45e6:	429e      	cmp	r6, r3
 80a45e8:	d906      	bls.n	80a45f8 <_ZN5Print10printFloatEdh+0xbc>
    rounding /= 10.0;
 80a45ea:	4642      	mov	r2, r8
 80a45ec:	464b      	mov	r3, r9
 80a45ee:	f001 fb39 	bl	80a5c64 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
 80a45f2:	f10b 0b01 	add.w	fp, fp, #1
 80a45f6:	e7f4      	b.n	80a45e2 <_ZN5Print10printFloatEdh+0xa6>
  number += rounding;
 80a45f8:	463b      	mov	r3, r7
 80a45fa:	4652      	mov	r2, sl
 80a45fc:	f001 f852 	bl	80a56a4 <__adddf3>
 80a4600:	4689      	mov	r9, r1
 80a4602:	4680      	mov	r8, r0
  unsigned long int_part = (unsigned long)number;
 80a4604:	f001 fcdc 	bl	80a5fc0 <__aeabi_d2uiz>
 80a4608:	4607      	mov	r7, r0
  double remainder = number - (double)int_part;
 80a460a:	f001 f987 	bl	80a591c <__aeabi_ui2d>
 80a460e:	4602      	mov	r2, r0
 80a4610:	460b      	mov	r3, r1
 80a4612:	4640      	mov	r0, r8
 80a4614:	4649      	mov	r1, r9
 80a4616:	f001 f843 	bl	80a56a0 <__aeabi_dsub>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 80a461a:	220a      	movs	r2, #10
 80a461c:	4680      	mov	r8, r0
 80a461e:	4689      	mov	r9, r1
 80a4620:	4628      	mov	r0, r5
 80a4622:	4639      	mov	r1, r7
 80a4624:	f7ff ff6d 	bl	80a4502 <_ZN5Print11printNumberEmh>
  n += print(int_part);
 80a4628:	4404      	add	r4, r0
  if (digits > 0) {
 80a462a:	b126      	cbz	r6, 80a4636 <_ZN5Print10printFloatEdh+0xfa>
  return write(str);
 80a462c:	4628      	mov	r0, r5
 80a462e:	4921      	ldr	r1, [pc, #132]	; (80a46b4 <_ZN5Print10printFloatEdh+0x178>)
 80a4630:	f7ff ff3a 	bl	80a44a8 <_ZN5Print5writeEPKc>
    n += print(".");
 80a4634:	4404      	add	r4, r0
    remainder *= 10.0;
 80a4636:	f04f 0a00 	mov.w	sl, #0
 80a463a:	f8df b07c 	ldr.w	fp, [pc, #124]	; 80a46b8 <_ZN5Print10printFloatEdh+0x17c>
  while (digits-- > 0)
 80a463e:	3e01      	subs	r6, #1
 80a4640:	b2f6      	uxtb	r6, r6
 80a4642:	2eff      	cmp	r6, #255	; 0xff
 80a4644:	d08b      	beq.n	80a455e <_ZN5Print10printFloatEdh+0x22>
    remainder *= 10.0;
 80a4646:	4652      	mov	r2, sl
 80a4648:	465b      	mov	r3, fp
 80a464a:	4640      	mov	r0, r8
 80a464c:	4649      	mov	r1, r9
 80a464e:	f001 f9df 	bl	80a5a10 <__aeabi_dmul>
 80a4652:	4680      	mov	r8, r0
 80a4654:	4689      	mov	r9, r1
    int toPrint = int(remainder);
 80a4656:	f001 fc8b 	bl	80a5f70 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
 80a465a:	1e07      	subs	r7, r0, #0
 80a465c:	da19      	bge.n	80a4692 <_ZN5Print10printFloatEdh+0x156>
            t = print('-');
 80a465e:	212d      	movs	r1, #45	; 0x2d
 80a4660:	4628      	mov	r0, r5
 80a4662:	f7ff ff35 	bl	80a44d0 <_ZN5Print5printEc>
 80a4666:	4603      	mov	r3, r0
            val = -n;
 80a4668:	4279      	negs	r1, r7
        return printNumber(val, base) + t;
 80a466a:	220a      	movs	r2, #10
 80a466c:	4628      	mov	r0, r5
 80a466e:	9301      	str	r3, [sp, #4]
 80a4670:	f7ff ff47 	bl	80a4502 <_ZN5Print11printNumberEmh>
 80a4674:	9b01      	ldr	r3, [sp, #4]
 80a4676:	4403      	add	r3, r0
    remainder -= toPrint;
 80a4678:	4638      	mov	r0, r7
    n += print(toPrint);
 80a467a:	441c      	add	r4, r3
    remainder -= toPrint;
 80a467c:	f001 f95e 	bl	80a593c <__aeabi_i2d>
 80a4680:	4602      	mov	r2, r0
 80a4682:	460b      	mov	r3, r1
 80a4684:	4640      	mov	r0, r8
 80a4686:	4649      	mov	r1, r9
 80a4688:	f001 f80a 	bl	80a56a0 <__aeabi_dsub>
 80a468c:	4680      	mov	r8, r0
 80a468e:	4689      	mov	r9, r1
  while (digits-- > 0)
 80a4690:	e7d5      	b.n	80a463e <_ZN5Print10printFloatEdh+0x102>
            val = n;
 80a4692:	4639      	mov	r1, r7
        size_t t = 0;
 80a4694:	2300      	movs	r3, #0
 80a4696:	e7e8      	b.n	80a466a <_ZN5Print10printFloatEdh+0x12e>
 80a4698:	080aa4a0 	.word	0x080aa4a0
 80a469c:	7fefffff 	.word	0x7fefffff
 80a46a0:	080aa4a4 	.word	0x080aa4a4
 80a46a4:	41efffff 	.word	0x41efffff
 80a46a8:	080aa4a8 	.word	0x080aa4a8
 80a46ac:	c1efffff 	.word	0xc1efffff
 80a46b0:	3fe00000 	.word	0x3fe00000
 80a46b4:	080aa201 	.word	0x080aa201
 80a46b8:	40240000 	.word	0x40240000

080a46bc <_ZN5Print5printEfi>:
{
 80a46bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a46be:	4605      	mov	r5, r0
 80a46c0:	4614      	mov	r4, r2
  return printFloat((double)n, digits);
 80a46c2:	4608      	mov	r0, r1
 80a46c4:	f001 f94c 	bl	80a5960 <__aeabi_f2d>
 80a46c8:	b2e4      	uxtb	r4, r4
 80a46ca:	4602      	mov	r2, r0
 80a46cc:	460b      	mov	r3, r1
 80a46ce:	4628      	mov	r0, r5
 80a46d0:	9400      	str	r4, [sp, #0]
 80a46d2:	f7ff ff33 	bl	80a453c <_ZN5Print10printFloatEdh>
}
 80a46d6:	b003      	add	sp, #12
 80a46d8:	bd30      	pop	{r4, r5, pc}

080a46da <_ZN5Print7printlnEdi>:
{
 80a46da:	b537      	push	{r0, r1, r2, r4, r5, lr}
  return printFloat(n, digits);
 80a46dc:	f89d 1018 	ldrb.w	r1, [sp, #24]
{
 80a46e0:	4605      	mov	r5, r0
  return printFloat(n, digits);
 80a46e2:	9100      	str	r1, [sp, #0]
 80a46e4:	f7ff ff2a 	bl	80a453c <_ZN5Print10printFloatEdh>
 80a46e8:	4604      	mov	r4, r0
  n += println();
 80a46ea:	4628      	mov	r0, r5
 80a46ec:	f7ff fef3 	bl	80a44d6 <_ZN5Print7printlnEv>
}
 80a46f0:	4420      	add	r0, r4
 80a46f2:	b003      	add	sp, #12
 80a46f4:	bd30      	pop	{r4, r5, pc}

080a46f6 <_ZN5Print7printlnEfi>:
{
 80a46f6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a46f8:	4604      	mov	r4, r0
    return println((double)num, digits);
 80a46fa:	4608      	mov	r0, r1
{
 80a46fc:	4615      	mov	r5, r2
    return println((double)num, digits);
 80a46fe:	f001 f92f 	bl	80a5960 <__aeabi_f2d>
 80a4702:	9500      	str	r5, [sp, #0]
 80a4704:	4602      	mov	r2, r0
 80a4706:	460b      	mov	r3, r1
 80a4708:	4620      	mov	r0, r4
 80a470a:	f7ff ffe6 	bl	80a46da <_ZN5Print7printlnEdi>
}
 80a470e:	b003      	add	sp, #12
 80a4710:	bd30      	pop	{r4, r5, pc}

080a4712 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a4712:	2300      	movs	r3, #0
 80a4714:	6840      	ldr	r0, [r0, #4]
 80a4716:	461a      	mov	r2, r3
 80a4718:	4619      	mov	r1, r3
 80a471a:	f7ff b8b1 	b.w	80a3880 <network_on>
	...

080a4720 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a4720:	4b01      	ldr	r3, [pc, #4]	; (80a4728 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a4722:	4a02      	ldr	r2, [pc, #8]	; (80a472c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a4724:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 80a4726:	4770      	bx	lr
 80a4728:	200005b0 	.word	0x200005b0
 80a472c:	080aa4ac 	.word	0x080aa4ac

080a4730 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
 80a4730:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
 80a4732:	2000      	movs	r0, #0
 80a4734:	f7ff f8fc 	bl	80a3930 <spark_sync_time_pending>
 80a4738:	b128      	cbz	r0, 80a4746 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a473a:	f7ff f8f1 	bl	80a3920 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
 80a473e:	f080 0001 	eor.w	r0, r0, #1
 80a4742:	b2c0      	uxtb	r0, r0
    }
 80a4744:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
 80a4746:	2001      	movs	r0, #1
 80a4748:	e7fc      	b.n	80a4744 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

080a474c <_ZN9TimeClass4zoneEf>:
	return now() + time_zone_cache + dst_current_cache;
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
 80a474c:	b510      	push	{r4, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
 80a474e:	490a      	ldr	r1, [pc, #40]	; (80a4778 <_ZN9TimeClass4zoneEf+0x2c>)
{
 80a4750:	4604      	mov	r4, r0
	if(GMT_Offset < -12 || GMT_Offset > 14)
 80a4752:	f001 ff51 	bl	80a65f8 <__aeabi_fcmplt>
 80a4756:	b968      	cbnz	r0, 80a4774 <_ZN9TimeClass4zoneEf+0x28>
 80a4758:	4620      	mov	r0, r4
 80a475a:	4908      	ldr	r1, [pc, #32]	; (80a477c <_ZN9TimeClass4zoneEf+0x30>)
 80a475c:	f001 ff6a 	bl	80a6634 <__aeabi_fcmpgt>
 80a4760:	b940      	cbnz	r0, 80a4774 <_ZN9TimeClass4zoneEf+0x28>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
 80a4762:	4907      	ldr	r1, [pc, #28]	; (80a4780 <_ZN9TimeClass4zoneEf+0x34>)
 80a4764:	4620      	mov	r0, r4
 80a4766:	f001 fda9 	bl	80a62bc <__aeabi_fmul>
 80a476a:	f001 ffab 	bl	80a66c4 <__aeabi_f2lz>
 80a476e:	4b05      	ldr	r3, [pc, #20]	; (80a4784 <_ZN9TimeClass4zoneEf+0x38>)
 80a4770:	e9c3 0100 	strd	r0, r1, [r3]
}
 80a4774:	bd10      	pop	{r4, pc}
 80a4776:	bf00      	nop
 80a4778:	c1400000 	.word	0xc1400000
 80a477c:	41600000 	.word	0x41600000
 80a4780:	45610000 	.word	0x45610000
 80a4784:	200005c8 	.word	0x200005c8

080a4788 <_ZN9TimeClass7timeStrEx>:
    }
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 80a4788:	b530      	push	{r4, r5, lr}
 80a478a:	4604      	mov	r4, r0
    t += time_zone_cache;
 80a478c:	4818      	ldr	r0, [pc, #96]	; (80a47f0 <_ZN9TimeClass7timeStrEx+0x68>)
{
 80a478e:	b093      	sub	sp, #76	; 0x4c
    t += time_zone_cache;
 80a4790:	e9d0 1000 	ldrd	r1, r0, [r0]
 80a4794:	1852      	adds	r2, r2, r1
 80a4796:	eb40 0303 	adc.w	r3, r0, r3
    t += dst_current_cache;
 80a479a:	4816      	ldr	r0, [pc, #88]	; (80a47f4 <_ZN9TimeClass7timeStrEx+0x6c>)
    struct tm calendar_time = {};
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
 80a479c:	2500      	movs	r5, #0
    t += dst_current_cache;
 80a479e:	e9d0 1000 	ldrd	r1, r0, [r0]
 80a47a2:	1852      	adds	r2, r2, r1
 80a47a4:	eb40 0303 	adc.w	r3, r0, r3
 80a47a8:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
 80a47ac:	2224      	movs	r2, #36	; 0x24
 80a47ae:	2100      	movs	r1, #0
 80a47b0:	eb0d 0002 	add.w	r0, sp, r2
 80a47b4:	f002 fa78 	bl	80a6ca8 <memset>
    localtime_r(&t, &calendar_time);
 80a47b8:	a909      	add	r1, sp, #36	; 0x24
 80a47ba:	4668      	mov	r0, sp
 80a47bc:	f002 f970 	bl	80a6aa0 <localtime_r>
    char ascstr[26] = {};
 80a47c0:	2216      	movs	r2, #22
 80a47c2:	4629      	mov	r1, r5
 80a47c4:	a803      	add	r0, sp, #12
 80a47c6:	9502      	str	r5, [sp, #8]
 80a47c8:	f002 fa6e 	bl	80a6ca8 <memset>
    asctime_r(&calendar_time, ascstr);
 80a47cc:	a902      	add	r1, sp, #8
 80a47ce:	a809      	add	r0, sp, #36	; 0x24
 80a47d0:	f002 f92e 	bl	80a6a30 <asctime_r>
    int len = strlen(ascstr);
 80a47d4:	a802      	add	r0, sp, #8
 80a47d6:	f003 f807 	bl	80a77e8 <strlen>
    ascstr[len-1] = 0; // remove final newline
 80a47da:	ab12      	add	r3, sp, #72	; 0x48
 80a47dc:	4418      	add	r0, r3
 80a47de:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
 80a47e2:	a902      	add	r1, sp, #8
 80a47e4:	4620      	mov	r0, r4
 80a47e6:	f7ff fce9 	bl	80a41bc <_ZN6StringC1EPKc>
}
 80a47ea:	4620      	mov	r0, r4
 80a47ec:	b013      	add	sp, #76	; 0x4c
 80a47ee:	bd30      	pop	{r4, r5, pc}
 80a47f0:	200005c8 	.word	0x200005c8
 80a47f4:	200005c0 	.word	0x200005c0

080a47f8 <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    localtime_r(&t, &calendar_time);
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 80a47f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a47fc:	b0a5      	sub	sp, #148	; 0x94
 80a47fe:	4607      	mov	r7, r0
 80a4800:	4688      	mov	r8, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 80a4802:	a814      	add	r0, sp, #80	; 0x50
{
 80a4804:	4611      	mov	r1, r2
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 80a4806:	223f      	movs	r2, #63	; 0x3f
{
 80a4808:	461d      	mov	r5, r3
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
 80a480a:	f003 f807 	bl	80a781c <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
 80a480e:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
 80a4810:	a814      	add	r0, sp, #80	; 0x50
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
 80a4812:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
 80a4816:	f002 ffe7 	bl	80a77e8 <strlen>
 80a481a:	4604      	mov	r4, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
 80a481c:	bb5d      	cbnz	r5, 80a4876 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x7e>
        strcpy(time_zone_str, "Z");
 80a481e:	492a      	ldr	r1, [pc, #168]	; (80a48c8 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd0>)
 80a4820:	a803      	add	r0, sp, #12
 80a4822:	f002 fa77 	bl	80a6d14 <strcpy>
{
 80a4826:	2500      	movs	r5, #0
 80a4828:	ae14      	add	r6, sp, #80	; 0x50
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
 80a482a:	f104 3bff 	add.w	fp, r4, #4294967295
 80a482e:	45ab      	cmp	fp, r5
 80a4830:	d936      	bls.n	80a48a0 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xa8>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
 80a4832:	46b1      	mov	r9, r6
 80a4834:	f819 3b01 	ldrb.w	r3, [r9], #1
 80a4838:	f105 0a01 	add.w	sl, r5, #1
 80a483c:	2b25      	cmp	r3, #37	; 0x25
 80a483e:	d117      	bne.n	80a4870 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
 80a4840:	7873      	ldrb	r3, [r6, #1]
 80a4842:	2b7a      	cmp	r3, #122	; 0x7a
 80a4844:	d114      	bne.n	80a4870 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
        {
            size_t tzlen = strlen(time_zone_str);
 80a4846:	a803      	add	r0, sp, #12
 80a4848:	f002 ffce 	bl	80a77e8 <strlen>
 80a484c:	4604      	mov	r4, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
 80a484e:	ab14      	add	r3, sp, #80	; 0x50
 80a4850:	1828      	adds	r0, r5, r0
 80a4852:	4418      	add	r0, r3
 80a4854:	ebab 0205 	sub.w	r2, fp, r5
 80a4858:	1cb1      	adds	r1, r6, #2
 80a485a:	f002 fa17 	bl	80a6c8c <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
 80a485e:	4622      	mov	r2, r4
 80a4860:	a903      	add	r1, sp, #12
 80a4862:	4630      	mov	r0, r6
 80a4864:	f002 fa12 	bl	80a6c8c <memcpy>
            len = strlen(format_str);
 80a4868:	a814      	add	r0, sp, #80	; 0x50
 80a486a:	f002 ffbd 	bl	80a77e8 <strlen>
 80a486e:	4604      	mov	r4, r0
    for (size_t i=0; i<len-1; i++)
 80a4870:	464e      	mov	r6, r9
 80a4872:	4655      	mov	r5, sl
 80a4874:	e7d9      	b.n	80a482a <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
 80a4876:	213c      	movs	r1, #60	; 0x3c
 80a4878:	fb95 f3f1 	sdiv	r3, r5, r1
 80a487c:	2b00      	cmp	r3, #0
 80a487e:	bfb8      	it	lt
 80a4880:	425b      	neglt	r3, r3
 80a4882:	fbb3 f2f1 	udiv	r2, r3, r1
 80a4886:	fb01 3312 	mls	r3, r1, r2, r3
 80a488a:	9300      	str	r3, [sp, #0]
 80a488c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80a4890:	2110      	movs	r1, #16
 80a4892:	fb95 f3f3 	sdiv	r3, r5, r3
 80a4896:	4a0d      	ldr	r2, [pc, #52]	; (80a48cc <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd4>)
 80a4898:	a803      	add	r0, sp, #12
 80a489a:	f7ff f889 	bl	80a39b0 <snprintf>
 80a489e:	e7c2      	b.n	80a4826 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2e>
        }
    }

    char buf[50] = {};
 80a48a0:	2100      	movs	r1, #0
 80a48a2:	222e      	movs	r2, #46	; 0x2e
 80a48a4:	a808      	add	r0, sp, #32
 80a48a6:	9107      	str	r1, [sp, #28]
 80a48a8:	f002 f9fe 	bl	80a6ca8 <memset>
    strftime(buf, sizeof(buf), format_str, calendar_time);
 80a48ac:	4643      	mov	r3, r8
 80a48ae:	aa14      	add	r2, sp, #80	; 0x50
 80a48b0:	2132      	movs	r1, #50	; 0x32
 80a48b2:	a807      	add	r0, sp, #28
 80a48b4:	f002 ff8e 	bl	80a77d4 <strftime>
    return String(buf);
 80a48b8:	4638      	mov	r0, r7
 80a48ba:	a907      	add	r1, sp, #28
 80a48bc:	f7ff fc7e 	bl	80a41bc <_ZN6StringC1EPKc>
}
 80a48c0:	4638      	mov	r0, r7
 80a48c2:	b025      	add	sp, #148	; 0x94
 80a48c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a48c8:	080aaa89 	.word	0x080aaa89
 80a48cc:	080aa4b0 	.word	0x080aa4b0

080a48d0 <_ZN9TimeClass6formatExPKc>:
{
 80a48d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a48d2:	b08d      	sub	sp, #52	; 0x34
 80a48d4:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80a48d6:	4604      	mov	r4, r0
 80a48d8:	e9cd 2300 	strd	r2, r3, [sp]
    if (format_spec == nullptr)
 80a48dc:	b915      	cbnz	r5, 80a48e4 <_ZN9TimeClass6formatExPKc+0x14>
        format_spec = this->format_spec;
 80a48de:	4b19      	ldr	r3, [pc, #100]	; (80a4944 <_ZN9TimeClass6formatExPKc+0x74>)
 80a48e0:	681d      	ldr	r5, [r3, #0]
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
 80a48e2:	b12d      	cbz	r5, 80a48f0 <_ZN9TimeClass6formatExPKc+0x20>
 80a48e4:	4b18      	ldr	r3, [pc, #96]	; (80a4948 <_ZN9TimeClass6formatExPKc+0x78>)
 80a48e6:	4628      	mov	r0, r5
 80a48e8:	6819      	ldr	r1, [r3, #0]
 80a48ea:	f002 fa09 	bl	80a6d00 <strcmp>
 80a48ee:	b938      	cbnz	r0, 80a4900 <_ZN9TimeClass6formatExPKc+0x30>
        return timeStr(t);
 80a48f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80a48f4:	4620      	mov	r0, r4
 80a48f6:	f7ff ff47 	bl	80a4788 <_ZN9TimeClass7timeStrEx>
}
 80a48fa:	4620      	mov	r0, r4
 80a48fc:	b00d      	add	sp, #52	; 0x34
 80a48fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t += time_zone_cache;
 80a4900:	9900      	ldr	r1, [sp, #0]
 80a4902:	4e12      	ldr	r6, [pc, #72]	; (80a494c <_ZN9TimeClass6formatExPKc+0x7c>)
    t += dst_current_cache;
 80a4904:	4f12      	ldr	r7, [pc, #72]	; (80a4950 <_ZN9TimeClass6formatExPKc+0x80>)
    t += time_zone_cache;
 80a4906:	e9d6 3200 	ldrd	r3, r2, [r6]
 80a490a:	185b      	adds	r3, r3, r1
 80a490c:	9901      	ldr	r1, [sp, #4]
 80a490e:	eb41 0202 	adc.w	r2, r1, r2
    t += dst_current_cache;
 80a4912:	e9d7 0100 	ldrd	r0, r1, [r7]
 80a4916:	181b      	adds	r3, r3, r0
 80a4918:	eb41 0202 	adc.w	r2, r1, r2
 80a491c:	e9cd 3200 	strd	r3, r2, [sp]
    struct tm calendar_time = {};
 80a4920:	2100      	movs	r1, #0
 80a4922:	2224      	movs	r2, #36	; 0x24
 80a4924:	a803      	add	r0, sp, #12
 80a4926:	f002 f9bf 	bl	80a6ca8 <memset>
    localtime_r(&t, &calendar_time);
 80a492a:	a903      	add	r1, sp, #12
 80a492c:	4668      	mov	r0, sp
 80a492e:	f002 f8b7 	bl	80a6aa0 <localtime_r>
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
 80a4932:	6832      	ldr	r2, [r6, #0]
 80a4934:	683b      	ldr	r3, [r7, #0]
 80a4936:	4620      	mov	r0, r4
 80a4938:	4413      	add	r3, r2
 80a493a:	a903      	add	r1, sp, #12
 80a493c:	462a      	mov	r2, r5
 80a493e:	f7ff ff5b 	bl	80a47f8 <_ZN9TimeClass14timeFormatImplEP2tmPKci>
 80a4942:	e7da      	b.n	80a48fa <_ZN9TimeClass6formatExPKc+0x2a>
 80a4944:	200005b8 	.word	0x200005b8
 80a4948:	20000010 	.word	0x20000010
 80a494c:	200005c8 	.word	0x200005c8
 80a4950:	200005c0 	.word	0x200005c0

080a4954 <_ZN9TimeClass7isValidEv>:

bool TimeClass::isValid()
{
 80a4954:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
 80a4956:	2000      	movs	r0, #0
 80a4958:	f7fe fdc2 	bl	80a34e0 <hal_rtc_time_is_valid>
    if (rtcstate)
 80a495c:	4604      	mov	r4, r0
 80a495e:	b9a0      	cbnz	r0, 80a498a <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 80a4960:	f7fe ff30 	bl	80a37c4 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 80a4964:	2801      	cmp	r0, #1
 80a4966:	d110      	bne.n	80a498a <_ZN9TimeClass7isValidEv+0x36>
 80a4968:	4620      	mov	r0, r4
 80a496a:	f7fe ff43 	bl	80a37f4 <system_thread_get_state>
 80a496e:	b960      	cbnz	r0, 80a498a <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
 80a4970:	f7ff fede 	bl	80a4730 <_ZN10CloudClass12syncTimeDoneEv.isra.0>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80a4974:	b910      	cbnz	r0, 80a497c <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
 80a4976:	f7fe ffc3 	bl	80a3900 <spark_process>
        while (_while() && !_condition()) {
 80a497a:	e7f9      	b.n	80a4970 <_ZN9TimeClass7isValidEv+0x1c>
 80a497c:	f7ff fed8 	bl	80a4730 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
 80a4980:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
 80a4984:	2000      	movs	r0, #0
 80a4986:	f7fe bdab 	b.w	80a34e0 <hal_rtc_time_is_valid>
}
 80a498a:	4620      	mov	r0, r4
 80a498c:	bd10      	pop	{r4, pc}

080a498e <_ZN9TimeClass3nowEv>:
{
 80a498e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
 80a4990:	f7ff ffe0 	bl	80a4954 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
 80a4994:	2210      	movs	r2, #16
 80a4996:	2100      	movs	r1, #0
 80a4998:	4668      	mov	r0, sp
 80a499a:	f002 f985 	bl	80a6ca8 <memset>
    hal_rtc_get_time(&tv, nullptr);
 80a499e:	2100      	movs	r1, #0
 80a49a0:	4668      	mov	r0, sp
 80a49a2:	f7fe fda5 	bl	80a34f0 <hal_rtc_get_time>
}
 80a49a6:	9800      	ldr	r0, [sp, #0]
 80a49a8:	b005      	add	sp, #20
 80a49aa:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a49b0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a49b0:	4b02      	ldr	r3, [pc, #8]	; (80a49bc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a49b2:	681a      	ldr	r2, [r3, #0]
 80a49b4:	4b02      	ldr	r3, [pc, #8]	; (80a49c0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a49b6:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 80a49b8:	4770      	bx	lr
 80a49ba:	bf00      	nop
 80a49bc:	20000010 	.word	0x20000010
 80a49c0:	200005b8 	.word	0x200005b8

080a49c4 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a49c4:	2100      	movs	r1, #0
 80a49c6:	f7fe bf0d 	b.w	80a37e4 <system_delay_ms>

080a49ca <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a49ca:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a49cc:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 80a49ce:	4604      	mov	r4, r0
      if (_M_manager)
 80a49d0:	b113      	cbz	r3, 80a49d8 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a49d2:	2203      	movs	r2, #3
 80a49d4:	4601      	mov	r1, r0
 80a49d6:	4798      	blx	r3
    }
 80a49d8:	4620      	mov	r0, r4
 80a49da:	bd10      	pop	{r4, pc}

080a49dc <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a49dc:	b510      	push	{r4, lr}
 80a49de:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a49e0:	f7ff fff3 	bl	80a49ca <_ZNSt14_Function_baseD1Ev>
 80a49e4:	4620      	mov	r0, r4
 80a49e6:	bd10      	pop	{r4, pc}

080a49e8 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 80a49e8:	2300      	movs	r3, #0
 80a49ea:	4803      	ldr	r0, [pc, #12]	; (80a49f8 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a49ec:	4a03      	ldr	r2, [pc, #12]	; (80a49fc <_GLOBAL__sub_I_RGB+0x14>)
 80a49ee:	4904      	ldr	r1, [pc, #16]	; (80a4a00 <_GLOBAL__sub_I_RGB+0x18>)
 80a49f0:	6083      	str	r3, [r0, #8]
 80a49f2:	f000 bd33 	b.w	80a545c <__aeabi_atexit>
 80a49f6:	bf00      	nop
 80a49f8:	200005d0 	.word	0x200005d0
 80a49fc:	20000250 	.word	0x20000250
 80a4a00:	080a49dd 	.word	0x080a49dd

080a4a04 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 80a4a04:	4b01      	ldr	r3, [pc, #4]	; (80a4a0c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 80a4a06:	6018      	str	r0, [r3, #0]
    }, nullptr);
 80a4a08:	4770      	bx	lr
 80a4a0a:	bf00      	nop
 80a4a0c:	20000014 	.word	0x20000014

080a4a10 <serialEventRun>:
{
 80a4a10:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a4a12:	4b13      	ldr	r3, [pc, #76]	; (80a4a60 <serialEventRun+0x50>)
 80a4a14:	b143      	cbz	r3, 80a4a28 <serialEventRun+0x18>
 80a4a16:	f000 f995 	bl	80a4d44 <_Z16_fetch_usbserialv>
 80a4a1a:	6803      	ldr	r3, [r0, #0]
 80a4a1c:	691b      	ldr	r3, [r3, #16]
 80a4a1e:	4798      	blx	r3
 80a4a20:	2800      	cmp	r0, #0
 80a4a22:	dd01      	ble.n	80a4a28 <serialEventRun+0x18>
        serialEvent();
 80a4a24:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
 80a4a28:	4b0e      	ldr	r3, [pc, #56]	; (80a4a64 <serialEventRun+0x54>)
 80a4a2a:	b143      	cbz	r3, 80a4a3e <serialEventRun+0x2e>
 80a4a2c:	f000 fa3c 	bl	80a4ea8 <_Z22__fetch_global_Serial1v>
 80a4a30:	6803      	ldr	r3, [r0, #0]
 80a4a32:	691b      	ldr	r3, [r3, #16]
 80a4a34:	4798      	blx	r3
 80a4a36:	2800      	cmp	r0, #0
 80a4a38:	dd01      	ble.n	80a4a3e <serialEventRun+0x2e>
        serialEvent1();
 80a4a3a:	f3af 8000 	nop.w
    if (serialEventRun2) serialEventRun2();
 80a4a3e:	4b0a      	ldr	r3, [pc, #40]	; (80a4a68 <serialEventRun+0x58>)
 80a4a40:	b10b      	cbz	r3, 80a4a46 <serialEventRun+0x36>
 80a4a42:	f3af 8000 	nop.w
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a4a46:	4b09      	ldr	r3, [pc, #36]	; (80a4a6c <serialEventRun+0x5c>)
 80a4a48:	b143      	cbz	r3, 80a4a5c <serialEventRun+0x4c>
 80a4a4a:	f000 f9ab 	bl	80a4da4 <_Z17_fetch_usbserial1v>
 80a4a4e:	6803      	ldr	r3, [r0, #0]
 80a4a50:	691b      	ldr	r3, [r3, #16]
 80a4a52:	4798      	blx	r3
 80a4a54:	2800      	cmp	r0, #0
 80a4a56:	dd01      	ble.n	80a4a5c <serialEventRun+0x4c>
        usbSerialEvent1();
 80a4a58:	f3af 8000 	nop.w
}
 80a4a5c:	bd08      	pop	{r3, pc}
 80a4a5e:	bf00      	nop
	...

080a4a70 <_post_loop>:
{
 80a4a70:	b508      	push	{r3, lr}
	serialEventRun();
 80a4a72:	f7ff ffcd 	bl	80a4a10 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a4a76:	f7fe fd2b 	bl	80a34d0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a4a7a:	4b01      	ldr	r3, [pc, #4]	; (80a4a80 <_post_loop+0x10>)
 80a4a7c:	6018      	str	r0, [r3, #0]
}
 80a4a7e:	bd08      	pop	{r3, pc}
 80a4a80:	20000648 	.word	0x20000648

080a4a84 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a4a84:	4802      	ldr	r0, [pc, #8]	; (80a4a90 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a4a86:	4a03      	ldr	r2, [pc, #12]	; (80a4a94 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a4a88:	4903      	ldr	r1, [pc, #12]	; (80a4a98 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a4a8a:	1a12      	subs	r2, r2, r0
 80a4a8c:	f002 b8fe 	b.w	80a6c8c <memcpy>
 80a4a90:	40024000 	.word	0x40024000
 80a4a94:	40024004 	.word	0x40024004
 80a4a98:	080aad08 	.word	0x080aad08

080a4a9c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a4a9c:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a4a9e:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a4aa0:	461a      	mov	r2, r3
 80a4aa2:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a4aa6:	9300      	str	r3, [sp, #0]
 80a4aa8:	f7fe feb6 	bl	80a3818 <system_ctrl_set_result>
}
 80a4aac:	b003      	add	sp, #12
 80a4aae:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a4ab4 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 80a4ab4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a4ab6:	8843      	ldrh	r3, [r0, #2]
 80a4ab8:	2b0a      	cmp	r3, #10
 80a4aba:	d008      	beq.n	80a4ace <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a4abc:	2b50      	cmp	r3, #80	; 0x50
 80a4abe:	d10b      	bne.n	80a4ad8 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 80a4ac0:	4b09      	ldr	r3, [pc, #36]	; (80a4ae8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a4ac2:	681b      	ldr	r3, [r3, #0]
 80a4ac4:	b14b      	cbz	r3, 80a4ada <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 80a4ac6:	b003      	add	sp, #12
 80a4ac8:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 80a4acc:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 80a4ace:	f7ff ffe5 	bl	80a4a9c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 80a4ad2:	b003      	add	sp, #12
 80a4ad4:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a4ad8:	2300      	movs	r3, #0
 80a4ada:	461a      	mov	r2, r3
 80a4adc:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a4ae0:	9300      	str	r3, [sp, #0]
 80a4ae2:	f7fe fe99 	bl	80a3818 <system_ctrl_set_result>
}
 80a4ae6:	e7f4      	b.n	80a4ad2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 80a4ae8:	200005e4 	.word	0x200005e4

080a4aec <module_user_init_hook>:
{
 80a4aec:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a4aee:	4c12      	ldr	r4, [pc, #72]	; (80a4b38 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 80a4af0:	2100      	movs	r1, #0
 80a4af2:	4812      	ldr	r0, [pc, #72]	; (80a4b3c <module_user_init_hook+0x50>)
 80a4af4:	f7fe ff7c 	bl	80a39f0 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a4af8:	4d11      	ldr	r5, [pc, #68]	; (80a4b40 <module_user_init_hook+0x54>)
 80a4afa:	6823      	ldr	r3, [r4, #0]
 80a4afc:	42ab      	cmp	r3, r5
 80a4afe:	bf0c      	ite	eq
 80a4b00:	2201      	moveq	r2, #1
 80a4b02:	2200      	movne	r2, #0
 80a4b04:	4b0f      	ldr	r3, [pc, #60]	; (80a4b44 <module_user_init_hook+0x58>)
 80a4b06:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a4b08:	d002      	beq.n	80a4b10 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
 80a4b0a:	f7ff ffbb 	bl	80a4a84 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a4b0e:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a4b10:	f7fe fcd6 	bl	80a34c0 <HAL_RNG_GetRandomNumber>
 80a4b14:	4604      	mov	r4, r0
    srand(seed);
 80a4b16:	f002 f8cf 	bl	80a6cb8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a4b1a:	4b0b      	ldr	r3, [pc, #44]	; (80a4b48 <module_user_init_hook+0x5c>)
 80a4b1c:	b113      	cbz	r3, 80a4b24 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
 80a4b1e:	4620      	mov	r0, r4
 80a4b20:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a4b24:	2100      	movs	r1, #0
 80a4b26:	4808      	ldr	r0, [pc, #32]	; (80a4b48 <module_user_init_hook+0x5c>)
 80a4b28:	f7fe ff0a 	bl	80a3940 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a4b2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a4b30:	2100      	movs	r1, #0
 80a4b32:	4806      	ldr	r0, [pc, #24]	; (80a4b4c <module_user_init_hook+0x60>)
 80a4b34:	f7fe be66 	b.w	80a3804 <system_ctrl_set_app_request_handler>
 80a4b38:	40024000 	.word	0x40024000
 80a4b3c:	080a4a05 	.word	0x080a4a05
 80a4b40:	9a271c1e 	.word	0x9a271c1e
 80a4b44:	200005e0 	.word	0x200005e0
 80a4b48:	00000000 	.word	0x00000000
 80a4b4c:	080a4ab5 	.word	0x080a4ab5

080a4b50 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
{
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
 80a4b50:	b510      	push	{r4, lr}
 80a4b52:	b088      	sub	sp, #32
 80a4b54:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 80a4b56:	4668      	mov	r0, sp
 80a4b58:	f7ff fb30 	bl	80a41bc <_ZN6StringC1EPKc>
    return (*fn)(p);
 80a4b5c:	4669      	mov	r1, sp
 80a4b5e:	a804      	add	r0, sp, #16
 80a4b60:	f7ff fb6b 	bl	80a423a <_ZN6StringC1ERKS_>
 80a4b64:	a804      	add	r0, sp, #16
 80a4b66:	47a0      	blx	r4
 80a4b68:	4604      	mov	r4, r0
 80a4b6a:	a804      	add	r0, sp, #16
 80a4b6c:	f7ff fadc 	bl	80a4128 <_ZN6StringD1Ev>
    String p(param);
 80a4b70:	4668      	mov	r0, sp
 80a4b72:	f7ff fad9 	bl	80a4128 <_ZN6StringD1Ev>
}
 80a4b76:	4620      	mov	r0, r4
 80a4b78:	b008      	add	sp, #32
 80a4b7a:	bd10      	pop	{r4, pc}

080a4b7c <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
 80a4b7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
 80a4b7e:	2300      	movs	r3, #0
         size = sizeof(*this);
 80a4b80:	2410      	movs	r4, #16
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
 80a4b82:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
 80a4b86:	9201      	str	r2, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 80a4b88:	4669      	mov	r1, sp
 80a4b8a:	461a      	mov	r2, r3
 80a4b8c:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
 80a4b8e:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
 80a4b92:	f8ad 4000 	strh.w	r4, [sp]
 80a4b96:	f7fe feab 	bl	80a38f0 <spark_function>
}
 80a4b9a:	b004      	add	sp, #16
 80a4b9c:	bd10      	pop	{r4, pc}

080a4b9e <_ZN9IPAddressD1Ev>:
    virtual ~IPAddress() {}
 80a4b9e:	4770      	bx	lr

080a4ba0 <_ZN9IPAddressD0Ev>:
 80a4ba0:	b510      	push	{r4, lr}
 80a4ba2:	4604      	mov	r4, r0
 80a4ba4:	2118      	movs	r1, #24
 80a4ba6:	f000 fc5e 	bl	80a5466 <_ZdlPvj>
 80a4baa:	4620      	mov	r0, r4
 80a4bac:	bd10      	pop	{r4, pc}

080a4bae <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a4bae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a4bb0:	460e      	mov	r6, r1
 80a4bb2:	2400      	movs	r4, #0
 80a4bb4:	f100 0708 	add.w	r7, r0, #8
 80a4bb8:	1d05      	adds	r5, r0, #4
        return printNumber(val, base) + t;
 80a4bba:	f817 1d01 	ldrb.w	r1, [r7, #-1]!
 80a4bbe:	220a      	movs	r2, #10
 80a4bc0:	4630      	mov	r0, r6
 80a4bc2:	f7ff fc9e 	bl	80a4502 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a4bc6:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a4bc8:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 80a4bca:	d101      	bne.n	80a4bd0 <_ZNK9IPAddress7printToER5Print+0x22>
    }
    return n;
}
 80a4bcc:	4620      	mov	r0, r4
 80a4bce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (n)
 80a4bd0:	2c00      	cmp	r4, #0
 80a4bd2:	d0f2      	beq.n	80a4bba <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a4bd4:	212e      	movs	r1, #46	; 0x2e
 80a4bd6:	4630      	mov	r0, r6
 80a4bd8:	f7ff fc7a 	bl	80a44d0 <_ZN5Print5printEc>
 80a4bdc:	4404      	add	r4, r0
 80a4bde:	e7ec      	b.n	80a4bba <_ZNK9IPAddress7printToER5Print+0xc>

080a4be0 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 80a4be0:	b510      	push	{r4, lr}
 80a4be2:	4604      	mov	r4, r0
 80a4be4:	4b04      	ldr	r3, [pc, #16]	; (80a4bf8 <_ZN9IPAddressC1Ev+0x18>)
    void clear() { memset(&address, 0, sizeof (address)); }
 80a4be6:	2211      	movs	r2, #17
 80a4be8:	2100      	movs	r1, #0
 80a4bea:	f840 3b04 	str.w	r3, [r0], #4
 80a4bee:	f002 f85b 	bl	80a6ca8 <memset>
}
 80a4bf2:	4620      	mov	r0, r4
 80a4bf4:	bd10      	pop	{r4, pc}
 80a4bf6:	bf00      	nop
 80a4bf8:	080aa4e0 	.word	0x080aa4e0

080a4bfc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 80a4bfc:	4603      	mov	r3, r0
 80a4bfe:	4a07      	ldr	r2, [pc, #28]	; (80a4c1c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a4c00:	b510      	push	{r4, lr}
 80a4c02:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 80a4c06:	f101 0210 	add.w	r2, r1, #16
 80a4c0a:	f851 4b04 	ldr.w	r4, [r1], #4
 80a4c0e:	4291      	cmp	r1, r2
 80a4c10:	f843 4b04 	str.w	r4, [r3], #4
 80a4c14:	d1f9      	bne.n	80a4c0a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a4c16:	780a      	ldrb	r2, [r1, #0]
 80a4c18:	701a      	strb	r2, [r3, #0]
}
 80a4c1a:	bd10      	pop	{r4, pc}
 80a4c1c:	080aa4e0 	.word	0x080aa4e0

080a4c20 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint32_t address)
 80a4c20:	4a02      	ldr	r2, [pc, #8]	; (80a4c2c <_ZN9IPAddressC1Em+0xc>)
    address.ipv4 = ipv4;
 80a4c22:	e9c0 2100 	strd	r2, r1, [r0]
        address.v = version;
 80a4c26:	2204      	movs	r2, #4
 80a4c28:	7502      	strb	r2, [r0, #20]
}
 80a4c2a:	4770      	bx	lr
 80a4c2c:	080aa4e0 	.word	0x080aa4e0

080a4c30 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 80a4c30:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a4c32:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a4c36:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 80a4c3a:	2304      	movs	r3, #4
 80a4c3c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80a4c40:	ea44 6401 	orr.w	r4, r4, r1, lsl #24
 80a4c44:	6044      	str	r4, [r0, #4]
 80a4c46:	7503      	strb	r3, [r0, #20]
}
 80a4c48:	bd10      	pop	{r4, pc}
	...

080a4c4c <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a4c4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a4c4e:	4d04      	ldr	r5, [pc, #16]	; (80a4c60 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a4c50:	6005      	str	r5, [r0, #0]
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a4c52:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a4c56:	9500      	str	r5, [sp, #0]
 80a4c58:	f7ff ffea 	bl	80a4c30 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a4c5c:	b003      	add	sp, #12
 80a4c5e:	bd30      	pop	{r4, r5, pc}
 80a4c60:	080aa4e0 	.word	0x080aa4e0

080a4c64 <_ZN9IPAddressaSEPKh>:
{
 80a4c64:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
 80a4c66:	78cb      	ldrb	r3, [r1, #3]
 80a4c68:	9300      	str	r3, [sp, #0]
 80a4c6a:	788b      	ldrb	r3, [r1, #2]
 80a4c6c:	784a      	ldrb	r2, [r1, #1]
 80a4c6e:	7809      	ldrb	r1, [r1, #0]
 80a4c70:	f7ff ffde 	bl	80a4c30 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a4c74:	b002      	add	sp, #8
 80a4c76:	bd10      	pop	{r4, pc}

080a4c78 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* address)
 80a4c78:	b510      	push	{r4, lr}
 80a4c7a:	4604      	mov	r4, r0
 80a4c7c:	4b02      	ldr	r3, [pc, #8]	; (80a4c88 <_ZN9IPAddressC1EPKh+0x10>)
 80a4c7e:	6003      	str	r3, [r0, #0]
    *this = address;
 80a4c80:	f7ff fff0 	bl	80a4c64 <_ZN9IPAddressaSEPKh>
}
 80a4c84:	4620      	mov	r0, r4
 80a4c86:	bd10      	pop	{r4, pc}
 80a4c88:	080aa4e0 	.word	0x080aa4e0

080a4c8c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a4c8c:	7441      	strb	r1, [r0, #17]
}
 80a4c8e:	4770      	bx	lr

080a4c90 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a4c90:	4770      	bx	lr

080a4c92 <_ZN9USBSerial4readEv>:
{
 80a4c92:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a4c94:	2100      	movs	r1, #0
 80a4c96:	7c00      	ldrb	r0, [r0, #16]
 80a4c98:	f7fe fd54 	bl	80a3744 <HAL_USB_USART_Receive_Data>
}
 80a4c9c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a4ca0:	bd08      	pop	{r3, pc}

080a4ca2 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
 80a4ca2:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a4ca4:	2101      	movs	r1, #1
 80a4ca6:	7c00      	ldrb	r0, [r0, #16]
 80a4ca8:	f7fe fd4c 	bl	80a3744 <HAL_USB_USART_Receive_Data>
}
 80a4cac:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a4cb0:	bd08      	pop	{r3, pc}

080a4cb2 <_ZN9USBSerial17availableForWriteEv>:
{
 80a4cb2:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a4cb4:	7c00      	ldrb	r0, [r0, #16]
 80a4cb6:	f7fe fd3d 	bl	80a3734 <HAL_USB_USART_Available_Data_For_Write>
}
 80a4cba:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a4cbe:	bd08      	pop	{r3, pc}

080a4cc0 <_ZN9USBSerial9availableEv>:
{
 80a4cc0:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a4cc2:	7c00      	ldrb	r0, [r0, #16]
 80a4cc4:	f7fe fd2e 	bl	80a3724 <HAL_USB_USART_Available_Data>
}
 80a4cc8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a4ccc:	bd08      	pop	{r3, pc}

080a4cce <_ZN9USBSerial5writeEh>:
{
 80a4cce:	b538      	push	{r3, r4, r5, lr}
 80a4cd0:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a4cd2:	7c00      	ldrb	r0, [r0, #16]
{
 80a4cd4:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a4cd6:	f7fe fd2d 	bl	80a3734 <HAL_USB_USART_Available_Data_For_Write>
 80a4cda:	2800      	cmp	r0, #0
 80a4cdc:	dc01      	bgt.n	80a4ce2 <_ZN9USBSerial5writeEh+0x14>
 80a4cde:	7c60      	ldrb	r0, [r4, #17]
 80a4ce0:	b128      	cbz	r0, 80a4cee <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a4ce2:	4629      	mov	r1, r5
 80a4ce4:	7c20      	ldrb	r0, [r4, #16]
 80a4ce6:	f7fe fd35 	bl	80a3754 <HAL_USB_USART_Send_Data>
 80a4cea:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 80a4cee:	bd38      	pop	{r3, r4, r5, pc}

080a4cf0 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 80a4cf0:	7c00      	ldrb	r0, [r0, #16]
 80a4cf2:	f7fe bd37 	b.w	80a3764 <HAL_USB_USART_Flush_Data>

080a4cf6 <_ZN9USBSerialD0Ev>:
 80a4cf6:	b510      	push	{r4, lr}
 80a4cf8:	4604      	mov	r4, r0
 80a4cfa:	2114      	movs	r1, #20
 80a4cfc:	f000 fbb3 	bl	80a5466 <_ZdlPvj>
 80a4d00:	4620      	mov	r0, r4
 80a4d02:	bd10      	pop	{r4, pc}

080a4d04 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a4d04:	b510      	push	{r4, lr}
 80a4d06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a4d0a:	4604      	mov	r4, r0
 80a4d0c:	4608      	mov	r0, r1
 80a4d0e:	2100      	movs	r1, #0
 80a4d10:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a4d14:	4b04      	ldr	r3, [pc, #16]	; (80a4d28 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 80a4d16:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a4d18:	6023      	str	r3, [r4, #0]
  _blocking = true;
 80a4d1a:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 80a4d1c:	4611      	mov	r1, r2
  _blocking = true;
 80a4d1e:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 80a4d20:	f7fe fcf0 	bl	80a3704 <HAL_USB_USART_Init>
}
 80a4d24:	4620      	mov	r0, r4
 80a4d26:	bd10      	pop	{r4, pc}
 80a4d28:	080aa4f4 	.word	0x080aa4f4

080a4d2c <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a4d2c:	2200      	movs	r2, #0
 80a4d2e:	7c00      	ldrb	r0, [r0, #16]
 80a4d30:	f7fe bcf0 	b.w	80a3714 <HAL_USB_USART_Begin>

080a4d34 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a4d34:	b510      	push	{r4, lr}
 80a4d36:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a4d38:	2214      	movs	r2, #20
 80a4d3a:	2100      	movs	r1, #0
 80a4d3c:	f001 ffb4 	bl	80a6ca8 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a4d40:	4620      	mov	r0, r4
 80a4d42:	bd10      	pop	{r4, pc}

080a4d44 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a4d44:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a4d46:	4d0f      	ldr	r5, [pc, #60]	; (80a4d84 <_Z16_fetch_usbserialv+0x40>)
{
 80a4d48:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a4d4a:	a801      	add	r0, sp, #4
 80a4d4c:	f7ff fff2 	bl	80a4d34 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a4d50:	7829      	ldrb	r1, [r5, #0]
 80a4d52:	f3bf 8f5b 	dmb	ish
 80a4d56:	f011 0401 	ands.w	r4, r1, #1
 80a4d5a:	d110      	bne.n	80a4d7e <_Z16_fetch_usbserialv+0x3a>
 80a4d5c:	4628      	mov	r0, r5
 80a4d5e:	f7fb f9a4 	bl	80a00aa <__cxa_guard_acquire>
 80a4d62:	b160      	cbz	r0, 80a4d7e <_Z16_fetch_usbserialv+0x3a>
 80a4d64:	4621      	mov	r1, r4
 80a4d66:	aa01      	add	r2, sp, #4
 80a4d68:	4807      	ldr	r0, [pc, #28]	; (80a4d88 <_Z16_fetch_usbserialv+0x44>)
 80a4d6a:	f7ff ffcb 	bl	80a4d04 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a4d6e:	4628      	mov	r0, r5
 80a4d70:	f7fb f9a0 	bl	80a00b4 <__cxa_guard_release>
 80a4d74:	4a05      	ldr	r2, [pc, #20]	; (80a4d8c <_Z16_fetch_usbserialv+0x48>)
 80a4d76:	4906      	ldr	r1, [pc, #24]	; (80a4d90 <_Z16_fetch_usbserialv+0x4c>)
 80a4d78:	4803      	ldr	r0, [pc, #12]	; (80a4d88 <_Z16_fetch_usbserialv+0x44>)
 80a4d7a:	f000 fb6f 	bl	80a545c <__aeabi_atexit>
	return _usbserial;
}
 80a4d7e:	4802      	ldr	r0, [pc, #8]	; (80a4d88 <_Z16_fetch_usbserialv+0x44>)
 80a4d80:	b007      	add	sp, #28
 80a4d82:	bd30      	pop	{r4, r5, pc}
 80a4d84:	200005e8 	.word	0x200005e8
 80a4d88:	200005f0 	.word	0x200005f0
 80a4d8c:	20000250 	.word	0x20000250
 80a4d90:	080a4c91 	.word	0x080a4c91

080a4d94 <_Z23acquireUSBSerial1Bufferv>:
 80a4d94:	b510      	push	{r4, lr}
 80a4d96:	4604      	mov	r4, r0
 80a4d98:	2214      	movs	r2, #20
 80a4d9a:	2100      	movs	r1, #0
 80a4d9c:	f001 ff84 	bl	80a6ca8 <memset>
 80a4da0:	4620      	mov	r0, r4
 80a4da2:	bd10      	pop	{r4, pc}

080a4da4 <_Z17_fetch_usbserial1v>:

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a4da4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a4da6:	4c0f      	ldr	r4, [pc, #60]	; (80a4de4 <_Z17_fetch_usbserial1v+0x40>)
{
 80a4da8:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a4daa:	a801      	add	r0, sp, #4
 80a4dac:	f7ff fff2 	bl	80a4d94 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a4db0:	7823      	ldrb	r3, [r4, #0]
 80a4db2:	f3bf 8f5b 	dmb	ish
 80a4db6:	07db      	lsls	r3, r3, #31
 80a4db8:	d410      	bmi.n	80a4ddc <_Z17_fetch_usbserial1v+0x38>
 80a4dba:	4620      	mov	r0, r4
 80a4dbc:	f7fb f975 	bl	80a00aa <__cxa_guard_acquire>
 80a4dc0:	b160      	cbz	r0, 80a4ddc <_Z17_fetch_usbserial1v+0x38>
 80a4dc2:	2101      	movs	r1, #1
 80a4dc4:	aa01      	add	r2, sp, #4
 80a4dc6:	4808      	ldr	r0, [pc, #32]	; (80a4de8 <_Z17_fetch_usbserial1v+0x44>)
 80a4dc8:	f7ff ff9c 	bl	80a4d04 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a4dcc:	4620      	mov	r0, r4
 80a4dce:	f7fb f971 	bl	80a00b4 <__cxa_guard_release>
 80a4dd2:	4a06      	ldr	r2, [pc, #24]	; (80a4dec <_Z17_fetch_usbserial1v+0x48>)
 80a4dd4:	4906      	ldr	r1, [pc, #24]	; (80a4df0 <_Z17_fetch_usbserial1v+0x4c>)
 80a4dd6:	4804      	ldr	r0, [pc, #16]	; (80a4de8 <_Z17_fetch_usbserial1v+0x44>)
 80a4dd8:	f000 fb40 	bl	80a545c <__aeabi_atexit>
  return _usbserial1;
}
 80a4ddc:	4802      	ldr	r0, [pc, #8]	; (80a4de8 <_Z17_fetch_usbserial1v+0x44>)
 80a4dde:	b006      	add	sp, #24
 80a4de0:	bd10      	pop	{r4, pc}
 80a4de2:	bf00      	nop
 80a4de4:	200005ec 	.word	0x200005ec
 80a4de8:	20000604 	.word	0x20000604
 80a4dec:	20000250 	.word	0x20000250
 80a4df0:	080a4c91 	.word	0x080a4c91

080a4df4 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
 80a4df4:	4770      	bx	lr

080a4df6 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a4df6:	7441      	strb	r1, [r0, #17]
}
 80a4df8:	4770      	bx	lr

080a4dfa <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 80a4dfa:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 80a4dfc:	7c00      	ldrb	r0, [r0, #16]
 80a4dfe:	f7fe fbd7 	bl	80a35b0 <hal_usart_available_data_for_write>
}
 80a4e02:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a4e06:	bd08      	pop	{r3, pc}

080a4e08 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a4e08:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 80a4e0a:	7c00      	ldrb	r0, [r0, #16]
 80a4e0c:	f7fe fba8 	bl	80a3560 <hal_usart_available>
}
 80a4e10:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a4e14:	bd08      	pop	{r3, pc}

080a4e16 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a4e16:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 80a4e18:	7c00      	ldrb	r0, [r0, #16]
 80a4e1a:	f7fe fbb1 	bl	80a3580 <hal_usart_peek>
}
 80a4e1e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a4e22:	bd08      	pop	{r3, pc}

080a4e24 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a4e24:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 80a4e26:	7c00      	ldrb	r0, [r0, #16]
 80a4e28:	f7fe fba2 	bl	80a3570 <hal_usart_read>
}
 80a4e2c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 80a4e30:	bd08      	pop	{r3, pc}

080a4e32 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 80a4e32:	7c00      	ldrb	r0, [r0, #16]
 80a4e34:	f7fe bbac 	b.w	80a3590 <hal_usart_flush>

080a4e38 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a4e38:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a4e3a:	7c46      	ldrb	r6, [r0, #17]
{
 80a4e3c:	4604      	mov	r4, r0
 80a4e3e:	460d      	mov	r5, r1
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a4e40:	b12e      	cbz	r6, 80a4e4e <_ZN11USARTSerial5writeEh+0x16>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 80a4e42:	4629      	mov	r1, r5
 80a4e44:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a4e46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  return hal_usart_write(_serial, c);
 80a4e4a:	f7fe bb81 	b.w	80a3550 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 80a4e4e:	7c00      	ldrb	r0, [r0, #16]
 80a4e50:	f7fe fbae 	bl	80a35b0 <hal_usart_available_data_for_write>
 80a4e54:	2800      	cmp	r0, #0
 80a4e56:	dcf4      	bgt.n	80a4e42 <_ZN11USARTSerial5writeEh+0xa>
}
 80a4e58:	4630      	mov	r0, r6
 80a4e5a:	bd70      	pop	{r4, r5, r6, pc}

080a4e5c <_ZN11USARTSerialD0Ev>:
 80a4e5c:	b510      	push	{r4, lr}
 80a4e5e:	4604      	mov	r4, r0
 80a4e60:	2114      	movs	r1, #20
 80a4e62:	f000 fb00 	bl	80a5466 <_ZdlPvj>
 80a4e66:	4620      	mov	r0, r4
 80a4e68:	bd10      	pop	{r4, pc}
	...

080a4e6c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
 80a4e6c:	f04f 0c00 	mov.w	ip, #0
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a4e70:	b510      	push	{r4, lr}
 80a4e72:	4604      	mov	r4, r0
 80a4e74:	4608      	mov	r0, r1
 80a4e76:	4611      	mov	r1, r2
 80a4e78:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a4e7c:	e9c4 c201 	strd	ip, r2, [r4, #4]
 80a4e80:	4a04      	ldr	r2, [pc, #16]	; (80a4e94 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
  _serial = serial;
 80a4e82:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
 80a4e84:	6022      	str	r2, [r4, #0]
  _blocking = true;
 80a4e86:	2201      	movs	r2, #1
 80a4e88:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
 80a4e8a:	461a      	mov	r2, r3
 80a4e8c:	f7fe fb58 	bl	80a3540 <hal_usart_init>
}
 80a4e90:	4620      	mov	r0, r4
 80a4e92:	bd10      	pop	{r4, pc}
 80a4e94:	080aa524 	.word	0x080aa524

080a4e98 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
 80a4e98:	2300      	movs	r3, #0
 80a4e9a:	7c00      	ldrb	r0, [r0, #16]
 80a4e9c:	f7fe bb90 	b.w	80a35c0 <hal_usart_begin_config>

080a4ea0 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
 80a4ea0:	2200      	movs	r2, #0
 80a4ea2:	f7ff bff9 	b.w	80a4e98 <_ZN11USARTSerial5beginEmm>
	...

080a4ea8 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a4ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
#else
  if (!serial1_rx_buffer) {
 80a4eaa:	4c1a      	ldr	r4, [pc, #104]	; (80a4f14 <_Z22__fetch_global_Serial1v+0x6c>)
 80a4eac:	6826      	ldr	r6, [r4, #0]
 80a4eae:	b94e      	cbnz	r6, 80a4ec4 <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new hal_usart_ring_buffer_t();
 80a4eb0:	2084      	movs	r0, #132	; 0x84
 80a4eb2:	f7fb f8f2 	bl	80a009a <_Znwj>
 80a4eb6:	4605      	mov	r5, r0
 80a4eb8:	b118      	cbz	r0, 80a4ec2 <_Z22__fetch_global_Serial1v+0x1a>
 80a4eba:	2284      	movs	r2, #132	; 0x84
 80a4ebc:	4631      	mov	r1, r6
 80a4ebe:	f001 fef3 	bl	80a6ca8 <memset>
 80a4ec2:	6025      	str	r5, [r4, #0]
  }
  if (!serial1_tx_buffer) {
 80a4ec4:	4d14      	ldr	r5, [pc, #80]	; (80a4f18 <_Z22__fetch_global_Serial1v+0x70>)
 80a4ec6:	682f      	ldr	r7, [r5, #0]
 80a4ec8:	b94f      	cbnz	r7, 80a4ede <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
 80a4eca:	2084      	movs	r0, #132	; 0x84
 80a4ecc:	f7fb f8e5 	bl	80a009a <_Znwj>
 80a4ed0:	4606      	mov	r6, r0
 80a4ed2:	b118      	cbz	r0, 80a4edc <_Z22__fetch_global_Serial1v+0x34>
 80a4ed4:	2284      	movs	r2, #132	; 0x84
 80a4ed6:	4639      	mov	r1, r7
 80a4ed8:	f001 fee6 	bl	80a6ca8 <memset>
 80a4edc:	602e      	str	r6, [r5, #0]
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
 80a4ede:	4f0f      	ldr	r7, [pc, #60]	; (80a4f1c <_Z22__fetch_global_Serial1v+0x74>)
 80a4ee0:	7839      	ldrb	r1, [r7, #0]
 80a4ee2:	f3bf 8f5b 	dmb	ish
 80a4ee6:	f011 0601 	ands.w	r6, r1, #1
 80a4eea:	d111      	bne.n	80a4f10 <_Z22__fetch_global_Serial1v+0x68>
 80a4eec:	4638      	mov	r0, r7
 80a4eee:	f7fb f8dc 	bl	80a00aa <__cxa_guard_acquire>
 80a4ef2:	b168      	cbz	r0, 80a4f10 <_Z22__fetch_global_Serial1v+0x68>
 80a4ef4:	4631      	mov	r1, r6
 80a4ef6:	6822      	ldr	r2, [r4, #0]
 80a4ef8:	682b      	ldr	r3, [r5, #0]
 80a4efa:	4809      	ldr	r0, [pc, #36]	; (80a4f20 <_Z22__fetch_global_Serial1v+0x78>)
 80a4efc:	f7ff ffb6 	bl	80a4e6c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
 80a4f00:	4638      	mov	r0, r7
 80a4f02:	f7fb f8d7 	bl	80a00b4 <__cxa_guard_release>
 80a4f06:	4a07      	ldr	r2, [pc, #28]	; (80a4f24 <_Z22__fetch_global_Serial1v+0x7c>)
 80a4f08:	4907      	ldr	r1, [pc, #28]	; (80a4f28 <_Z22__fetch_global_Serial1v+0x80>)
 80a4f0a:	4805      	ldr	r0, [pc, #20]	; (80a4f20 <_Z22__fetch_global_Serial1v+0x78>)
 80a4f0c:	f000 faa6 	bl	80a545c <__aeabi_atexit>
#endif
	return serial1;
}
 80a4f10:	4803      	ldr	r0, [pc, #12]	; (80a4f20 <_Z22__fetch_global_Serial1v+0x78>)
 80a4f12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a4f14:	2000061c 	.word	0x2000061c
 80a4f18:	20000620 	.word	0x20000620
 80a4f1c:	20000618 	.word	0x20000618
 80a4f20:	20000624 	.word	0x20000624
 80a4f24:	20000250 	.word	0x20000250
 80a4f28:	080a4df5 	.word	0x080a4df5

080a4f2c <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 80a4f2c:	4770      	bx	lr

080a4f2e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a4f2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a4f30:	4606      	mov	r6, r0
 80a4f32:	4615      	mov	r5, r2
 80a4f34:	460c      	mov	r4, r1
 80a4f36:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a4f38:	42bc      	cmp	r4, r7
 80a4f3a:	d006      	beq.n	80a4f4a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a4f3c:	6833      	ldr	r3, [r6, #0]
 80a4f3e:	4630      	mov	r0, r6
 80a4f40:	689b      	ldr	r3, [r3, #8]
 80a4f42:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a4f46:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 80a4f48:	e7f6      	b.n	80a4f38 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 80a4f4a:	4628      	mov	r0, r5
 80a4f4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a4f4e <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 80a4f4e:	2200      	movs	r2, #0
 80a4f50:	7c00      	ldrb	r0, [r0, #16]
 80a4f52:	f7fe bb3d 	b.w	80a35d0 <hal_i2c_write>

080a4f56 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 80a4f56:	2100      	movs	r1, #0
 80a4f58:	7c00      	ldrb	r0, [r0, #16]
 80a4f5a:	f7fe bb41 	b.w	80a35e0 <hal_i2c_available>

080a4f5e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 80a4f5e:	2100      	movs	r1, #0
 80a4f60:	7c00      	ldrb	r0, [r0, #16]
 80a4f62:	f7fe bb45 	b.w	80a35f0 <hal_i2c_read>

080a4f66 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 80a4f66:	2100      	movs	r1, #0
 80a4f68:	7c00      	ldrb	r0, [r0, #16]
 80a4f6a:	f7fe bb49 	b.w	80a3600 <hal_i2c_peek>

080a4f6e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 80a4f6e:	2100      	movs	r1, #0
 80a4f70:	7c00      	ldrb	r0, [r0, #16]
 80a4f72:	f7fe bb4d 	b.w	80a3610 <hal_i2c_flush>

080a4f76 <_ZN7TwoWireD0Ev>:
 80a4f76:	b510      	push	{r4, lr}
 80a4f78:	4604      	mov	r4, r0
 80a4f7a:	2114      	movs	r1, #20
 80a4f7c:	f000 fa73 	bl	80a5466 <_ZdlPvj>
 80a4f80:	4620      	mov	r0, r4
 80a4f82:	bd10      	pop	{r4, pc}

080a4f84 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a4f84:	b510      	push	{r4, lr}
 80a4f86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a4f8a:	4604      	mov	r4, r0
 80a4f8c:	4608      	mov	r0, r1
 80a4f8e:	2100      	movs	r1, #0
 80a4f90:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80a4f94:	4b03      	ldr	r3, [pc, #12]	; (80a4fa4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
  hal_i2c_init(_i2c, &conf);
 80a4f96:	4611      	mov	r1, r2
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 80a4f98:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
 80a4f9a:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
 80a4f9c:	f7fe fb48 	bl	80a3630 <hal_i2c_init>
}
 80a4fa0:	4620      	mov	r0, r4
 80a4fa2:	bd10      	pop	{r4, pc}
 80a4fa4:	080aa554 	.word	0x080aa554

080a4fa8 <_ZN10WiFiSignalD1Ev>:
    virtual ~WiFiSignal() {};
 80a4fa8:	4770      	bx	lr

080a4faa <_ZNK10WiFiSignal19getAccessTechnologyEv>:
    return true;
}

hal_net_access_tech_t WiFiSignal::getAccessTechnology() const {
    return NET_ACCESS_TECHNOLOGY_WIFI;
}
 80a4faa:	2001      	movs	r0, #1
 80a4fac:	4770      	bx	lr

080a4fae <_ZN5spark9WiFiClass5readyEv>:
        return network_ready(*this, 0, NULL);
 80a4fae:	2200      	movs	r2, #0
 80a4fb0:	6840      	ldr	r0, [r0, #4]
 80a4fb2:	4611      	mov	r1, r2
 80a4fb4:	f7fe bc5c 	b.w	80a3870 <network_ready>

080a4fb8 <_ZN10WiFiSignalD0Ev>:
    virtual ~WiFiSignal() {};
 80a4fb8:	b510      	push	{r4, lr}
 80a4fba:	4604      	mov	r4, r0
 80a4fbc:	2124      	movs	r1, #36	; 0x24
 80a4fbe:	f000 fa52 	bl	80a5466 <_ZdlPvj>
 80a4fc2:	4620      	mov	r0, r4
 80a4fc4:	bd10      	pop	{r4, pc}

080a4fc6 <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a4fc6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a4fc8:	4615      	mov	r5, r2
 80a4fca:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a4fcc:	2211      	movs	r2, #17
    IPAddress resolve(const char* name)
 80a4fce:	460e      	mov	r6, r1
 80a4fd0:	4604      	mov	r4, r0
        HAL_IPAddress ip = {};
 80a4fd2:	2100      	movs	r1, #0
 80a4fd4:	a803      	add	r0, sp, #12
 80a4fd6:	f001 fe67 	bl	80a6ca8 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a4fda:	4628      	mov	r0, r5
 80a4fdc:	f002 fc04 	bl	80a77e8 <strlen>
 80a4fe0:	2700      	movs	r7, #0
 80a4fe2:	b281      	uxth	r1, r0
 80a4fe4:	6873      	ldr	r3, [r6, #4]
 80a4fe6:	4628      	mov	r0, r5
 80a4fe8:	9700      	str	r7, [sp, #0]
 80a4fea:	aa03      	add	r2, sp, #12
 80a4fec:	f7fe fbca 	bl	80a3784 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a4ff0:	b130      	cbz	r0, 80a5000 <_ZN5spark9WiFiClass7resolveEPKc+0x3a>
 80a4ff2:	4639      	mov	r1, r7
 80a4ff4:	4620      	mov	r0, r4
 80a4ff6:	f7ff fe13 	bl	80a4c20 <_ZN9IPAddressC1Em>
    }
 80a4ffa:	4620      	mov	r0, r4
 80a4ffc:	b009      	add	sp, #36	; 0x24
 80a4ffe:	bdf0      	pop	{r4, r5, r6, r7, pc}
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a5000:	4620      	mov	r0, r4
 80a5002:	a903      	add	r1, sp, #12
 80a5004:	f7ff fdfa 	bl	80a4bfc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 80a5008:	e7f7      	b.n	80a4ffa <_ZN5spark9WiFiClass7resolveEPKc+0x34>

080a500a <_ZN5spark9WiFiClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 80a500a:	2200      	movs	r2, #0
 80a500c:	6840      	ldr	r0, [r0, #4]
 80a500e:	4611      	mov	r1, r2
 80a5010:	f7fe bc4e 	b.w	80a38b0 <network_listening>

080a5014 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 80a5014:	2200      	movs	r2, #0
 80a5016:	6840      	ldr	r0, [r0, #4]
 80a5018:	4611      	mov	r1, r2
 80a501a:	f7fe bc59 	b.w	80a38d0 <network_get_listen_timeout>

080a501e <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 80a501e:	2200      	movs	r2, #0
 80a5020:	6840      	ldr	r0, [r0, #4]
 80a5022:	f7fe bc4d 	b.w	80a38c0 <network_set_listen_timeout>

080a5026 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 80a5026:	2200      	movs	r2, #0
 80a5028:	6840      	ldr	r0, [r0, #4]
 80a502a:	f081 0101 	eor.w	r1, r1, #1
 80a502e:	f7fe bc37 	b.w	80a38a0 <network_listen>

080a5032 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 80a5032:	2300      	movs	r3, #0
 80a5034:	6840      	ldr	r0, [r0, #4]
 80a5036:	461a      	mov	r2, r3
 80a5038:	4619      	mov	r1, r3
 80a503a:	f7fe bc29 	b.w	80a3890 <network_off>

080a503e <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 80a503e:	2200      	movs	r2, #0
 80a5040:	6840      	ldr	r0, [r0, #4]
 80a5042:	4611      	mov	r1, r2
 80a5044:	f7fe bc04 	b.w	80a3850 <network_connecting>

080a5048 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a5048:	2200      	movs	r2, #0
 80a504a:	2102      	movs	r1, #2
 80a504c:	6840      	ldr	r0, [r0, #4]
 80a504e:	f7fe bc07 	b.w	80a3860 <network_disconnect>

080a5052 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 80a5052:	2300      	movs	r3, #0
 80a5054:	6840      	ldr	r0, [r0, #4]
 80a5056:	461a      	mov	r2, r3
 80a5058:	f7fe bbf2 	b.w	80a3840 <network_connect>

080a505c <_ZNK10WiFiSignal11getStrengthEv>:

float WiFiSignal::getStrength() const {
 80a505c:	b508      	push	{r3, lr}
    if (inf_.size != 0 && inf_.strength >= 0) {
 80a505e:	8983      	ldrh	r3, [r0, #12]
 80a5060:	b15b      	cbz	r3, 80a507a <_ZNK10WiFiSignal11getStrengthEv+0x1e>
 80a5062:	6940      	ldr	r0, [r0, #20]
 80a5064:	2800      	cmp	r0, #0
 80a5066:	db08      	blt.n	80a507a <_ZNK10WiFiSignal11getStrengthEv+0x1e>
        return inf_.strength / 65535.0f * 100.0f;
 80a5068:	f001 f8d4 	bl	80a6214 <__aeabi_i2f>
 80a506c:	4904      	ldr	r1, [pc, #16]	; (80a5080 <_ZNK10WiFiSignal11getStrengthEv+0x24>)
 80a506e:	f001 f9d9 	bl	80a6424 <__aeabi_fdiv>
 80a5072:	4904      	ldr	r1, [pc, #16]	; (80a5084 <_ZNK10WiFiSignal11getStrengthEv+0x28>)
 80a5074:	f001 f922 	bl	80a62bc <__aeabi_fmul>
    }
    return -1.0f;
}
 80a5078:	bd08      	pop	{r3, pc}
    return -1.0f;
 80a507a:	4803      	ldr	r0, [pc, #12]	; (80a5088 <_ZNK10WiFiSignal11getStrengthEv+0x2c>)
 80a507c:	e7fc      	b.n	80a5078 <_ZNK10WiFiSignal11getStrengthEv+0x1c>
 80a507e:	bf00      	nop
 80a5080:	477fff00 	.word	0x477fff00
 80a5084:	42c80000 	.word	0x42c80000
 80a5088:	bf800000 	.word	0xbf800000

080a508c <_ZNK10WiFiSignal16getStrengthValueEv>:

float WiFiSignal::getStrengthValue() const {
 80a508c:	b508      	push	{r3, lr}
    if (inf_.size != 0 && inf_.rssi != std::numeric_limits<int32_t>::min()) {
 80a508e:	8983      	ldrh	r3, [r0, #12]
 80a5090:	b14b      	cbz	r3, 80a50a6 <_ZNK10WiFiSignal16getStrengthValueEv+0x1a>
 80a5092:	6900      	ldr	r0, [r0, #16]
 80a5094:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 80a5098:	d005      	beq.n	80a50a6 <_ZNK10WiFiSignal16getStrengthValueEv+0x1a>
        return inf_.rssi / 100.0f;
 80a509a:	f001 f8bb 	bl	80a6214 <__aeabi_i2f>
 80a509e:	4903      	ldr	r1, [pc, #12]	; (80a50ac <_ZNK10WiFiSignal16getStrengthValueEv+0x20>)
 80a50a0:	f001 f9c0 	bl	80a6424 <__aeabi_fdiv>
    }
    return 0.0f;
}
 80a50a4:	bd08      	pop	{r3, pc}
    return 0.0f;
 80a50a6:	2000      	movs	r0, #0
 80a50a8:	e7fc      	b.n	80a50a4 <_ZNK10WiFiSignal16getStrengthValueEv+0x18>
 80a50aa:	bf00      	nop
 80a50ac:	42c80000 	.word	0x42c80000

080a50b0 <_ZNK10WiFiSignal10getQualityEv>:

float WiFiSignal::getQuality() const {
 80a50b0:	b508      	push	{r3, lr}
    if (inf_.size != 0 && inf_.quality >= 0) {
 80a50b2:	8983      	ldrh	r3, [r0, #12]
 80a50b4:	b15b      	cbz	r3, 80a50ce <_ZNK10WiFiSignal10getQualityEv+0x1e>
 80a50b6:	6a00      	ldr	r0, [r0, #32]
 80a50b8:	2800      	cmp	r0, #0
 80a50ba:	db08      	blt.n	80a50ce <_ZNK10WiFiSignal10getQualityEv+0x1e>
        return inf_.quality / 65535.0f * 100.0f;
 80a50bc:	f001 f8aa 	bl	80a6214 <__aeabi_i2f>
 80a50c0:	4904      	ldr	r1, [pc, #16]	; (80a50d4 <_ZNK10WiFiSignal10getQualityEv+0x24>)
 80a50c2:	f001 f9af 	bl	80a6424 <__aeabi_fdiv>
 80a50c6:	4904      	ldr	r1, [pc, #16]	; (80a50d8 <_ZNK10WiFiSignal10getQualityEv+0x28>)
 80a50c8:	f001 f8f8 	bl	80a62bc <__aeabi_fmul>
    }
    return -1.0f;
}
 80a50cc:	bd08      	pop	{r3, pc}
    return -1.0f;
 80a50ce:	4803      	ldr	r0, [pc, #12]	; (80a50dc <_ZNK10WiFiSignal10getQualityEv+0x2c>)
 80a50d0:	e7fc      	b.n	80a50cc <_ZNK10WiFiSignal10getQualityEv+0x1c>
 80a50d2:	bf00      	nop
 80a50d4:	477fff00 	.word	0x477fff00
 80a50d8:	42c80000 	.word	0x42c80000
 80a50dc:	bf800000 	.word	0xbf800000

080a50e0 <_ZNK10WiFiSignal15getQualityValueEv>:

float WiFiSignal::getQualityValue() const {
 80a50e0:	b508      	push	{r3, lr}
    if (inf_.size != 0 && inf_.snr != std::numeric_limits<int32_t>::min()) {
 80a50e2:	8983      	ldrh	r3, [r0, #12]
 80a50e4:	b14b      	cbz	r3, 80a50fa <_ZNK10WiFiSignal15getQualityValueEv+0x1a>
 80a50e6:	6980      	ldr	r0, [r0, #24]
 80a50e8:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 80a50ec:	d005      	beq.n	80a50fa <_ZNK10WiFiSignal15getQualityValueEv+0x1a>
        return inf_.snr / 100.0f;
 80a50ee:	f001 f891 	bl	80a6214 <__aeabi_i2f>
 80a50f2:	4903      	ldr	r1, [pc, #12]	; (80a5100 <_ZNK10WiFiSignal15getQualityValueEv+0x20>)
 80a50f4:	f001 f996 	bl	80a6424 <__aeabi_fdiv>
    }
    return 0.0f;
}
 80a50f8:	bd08      	pop	{r3, pc}
    return 0.0f;
 80a50fa:	2000      	movs	r0, #0
 80a50fc:	e7fc      	b.n	80a50f8 <_ZNK10WiFiSignal15getQualityValueEv+0x18>
 80a50fe:	bf00      	nop
 80a5100:	42c80000 	.word	0x42c80000

080a5104 <_ZNK10WiFiSignalcvaEv>:
}
 80a5104:	f990 0004 	ldrsb.w	r0, [r0, #4]
 80a5108:	4770      	bx	lr

080a510a <_ZN10WiFiSignal17fromConnectedInfoERK21wlan_connected_info_t>:
bool WiFiSignal::fromConnectedInfo(const wlan_connected_info_t& inf) {
 80a510a:	b570      	push	{r4, r5, r6, lr}
    inf_ = inf;
 80a510c:	460c      	mov	r4, r1
bool WiFiSignal::fromConnectedInfo(const wlan_connected_info_t& inf) {
 80a510e:	4606      	mov	r6, r0
    inf_ = inf;
 80a5110:	f100 050c 	add.w	r5, r0, #12
 80a5114:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a5116:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a5118:	e894 0003 	ldmia.w	r4, {r0, r1}
 80a511c:	e885 0003 	stmia.w	r5, {r0, r1}
    this->rssi = inf_.rssi != std::numeric_limits<int32_t>::min() ? inf_.rssi / 100 : 2;
 80a5120:	6933      	ldr	r3, [r6, #16]
}
 80a5122:	2001      	movs	r0, #1
    this->rssi = inf_.rssi != std::numeric_limits<int32_t>::min() ? inf_.rssi / 100 : 2;
 80a5124:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a5128:	bf16      	itet	ne
 80a512a:	2264      	movne	r2, #100	; 0x64
 80a512c:	2302      	moveq	r3, #2
 80a512e:	fb93 f3f2 	sdivne	r3, r3, r2
 80a5132:	6073      	str	r3, [r6, #4]
    this->qual = inf_.snr != std::numeric_limits<int32_t>::min() ? inf_.snr / 100 : 0;
 80a5134:	69b3      	ldr	r3, [r6, #24]
 80a5136:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a513a:	bf16      	itet	ne
 80a513c:	2264      	movne	r2, #100	; 0x64
 80a513e:	2300      	moveq	r3, #0
 80a5140:	fb93 f3f2 	sdivne	r3, r3, r2
 80a5144:	60b3      	str	r3, [r6, #8]
}
 80a5146:	bd70      	pop	{r4, r5, r6, pc}

080a5148 <_ZN5spark9WiFiClass4RSSIEv>:
    int WiFiClass::getCredentials(WiFiAccessPoint* results, size_t result_count) {
        APList apList(results, result_count);
        return apList.start();
    }

    WiFiSignal WiFiClass::RSSI() {
 80a5148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    WiFiSignal() {}
 80a514c:	2500      	movs	r5, #0
 80a514e:	f04f 0802 	mov.w	r8, #2
 80a5152:	2618      	movs	r6, #24
 80a5154:	460f      	mov	r7, r1
 80a5156:	4b14      	ldr	r3, [pc, #80]	; (80a51a8 <_ZN5spark9WiFiClass4RSSIEv+0x60>)
 80a5158:	4632      	mov	r2, r6
 80a515a:	4629      	mov	r1, r5
 80a515c:	e9c0 8501 	strd	r8, r5, [r0, #4]
 80a5160:	b086      	sub	sp, #24
 80a5162:	6003      	str	r3, [r0, #0]
 80a5164:	4604      	mov	r4, r0
 80a5166:	300c      	adds	r0, #12
 80a5168:	f001 fd9e 	bl	80a6ca8 <memset>
        WiFiSignal sig;
        if (!network_ready(*this, 0, NULL)) {
 80a516c:	462a      	mov	r2, r5
 80a516e:	4629      	mov	r1, r5
 80a5170:	6878      	ldr	r0, [r7, #4]
 80a5172:	f7fe fb7d 	bl	80a3870 <network_ready>
 80a5176:	b180      	cbz	r0, 80a519a <_ZN5spark9WiFiClass4RSSIEv+0x52>
            return sig;
        }

        wlan_connected_info_t info = {0};
 80a5178:	4632      	mov	r2, r6
 80a517a:	4629      	mov	r1, r5
 80a517c:	4668      	mov	r0, sp
 80a517e:	f001 fd93 	bl	80a6ca8 <memset>
        info.size = sizeof(info);
        int r = wlan_connected_info(nullptr, &info, nullptr);
 80a5182:	462a      	mov	r2, r5
 80a5184:	4669      	mov	r1, sp
 80a5186:	4628      	mov	r0, r5
        info.size = sizeof(info);
 80a5188:	f8ad 6000 	strh.w	r6, [sp]
        int r = wlan_connected_info(nullptr, &info, nullptr);
 80a518c:	f7fe fb0a 	bl	80a37a4 <wlan_connected_info>
        if (r == 0) {
 80a5190:	b938      	cbnz	r0, 80a51a2 <_ZN5spark9WiFiClass4RSSIEv+0x5a>
            sig.fromConnectedInfo(info);
 80a5192:	4669      	mov	r1, sp
 80a5194:	4620      	mov	r0, r4
 80a5196:	f7ff ffb8 	bl	80a510a <_ZN10WiFiSignal17fromConnectedInfoERK21wlan_connected_info_t>
            return sig;
        }

        sig.rssi = 2;
        return sig;
    }
 80a519a:	4620      	mov	r0, r4
 80a519c:	b006      	add	sp, #24
 80a519e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        sig.rssi = 2;
 80a51a2:	f8c4 8004 	str.w	r8, [r4, #4]
        return sig;
 80a51a6:	e7f8      	b.n	80a519a <_ZN5spark9WiFiClass4RSSIEv+0x52>
 80a51a8:	080aa5b0 	.word	0x080aa5b0

080a51ac <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a51ac:	2204      	movs	r2, #4
 80a51ae:	4b02      	ldr	r3, [pc, #8]	; (80a51b8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a51b0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a51b2:	4a02      	ldr	r2, [pc, #8]	; (80a51bc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a51b4:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 80a51b6:	4770      	bx	lr
 80a51b8:	20000638 	.word	0x20000638
 80a51bc:	080aa57c 	.word	0x080aa57c

080a51c0 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a51c0:	2300      	movs	r3, #0
 80a51c2:	6840      	ldr	r0, [r0, #4]
 80a51c4:	461a      	mov	r2, r3
 80a51c6:	f7fe bb3b 	b.w	80a3840 <network_connect>

080a51ca <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a51ca:	2200      	movs	r2, #0
 80a51cc:	2102      	movs	r1, #2
 80a51ce:	6840      	ldr	r0, [r0, #4]
 80a51d0:	f7fe bb46 	b.w	80a3860 <network_disconnect>

080a51d4 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a51d4:	2200      	movs	r2, #0
 80a51d6:	6840      	ldr	r0, [r0, #4]
 80a51d8:	4611      	mov	r1, r2
 80a51da:	f7fe bb39 	b.w	80a3850 <network_connecting>

080a51de <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a51de:	2200      	movs	r2, #0
 80a51e0:	6840      	ldr	r0, [r0, #4]
 80a51e2:	4611      	mov	r1, r2
 80a51e4:	f7fe bb44 	b.w	80a3870 <network_ready>

080a51e8 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a51e8:	2300      	movs	r3, #0
 80a51ea:	6840      	ldr	r0, [r0, #4]
 80a51ec:	461a      	mov	r2, r3
 80a51ee:	4619      	mov	r1, r3
 80a51f0:	f7fe bb46 	b.w	80a3880 <network_on>

080a51f4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a51f4:	2300      	movs	r3, #0
 80a51f6:	6840      	ldr	r0, [r0, #4]
 80a51f8:	461a      	mov	r2, r3
 80a51fa:	4619      	mov	r1, r3
 80a51fc:	f7fe bb48 	b.w	80a3890 <network_off>

080a5200 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a5200:	2200      	movs	r2, #0
 80a5202:	6840      	ldr	r0, [r0, #4]
 80a5204:	f081 0101 	eor.w	r1, r1, #1
 80a5208:	f7fe bb4a 	b.w	80a38a0 <network_listen>

080a520c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a520c:	2200      	movs	r2, #0
 80a520e:	6840      	ldr	r0, [r0, #4]
 80a5210:	f7fe bb56 	b.w	80a38c0 <network_set_listen_timeout>

080a5214 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a5214:	2200      	movs	r2, #0
 80a5216:	6840      	ldr	r0, [r0, #4]
 80a5218:	4611      	mov	r1, r2
 80a521a:	f7fe bb59 	b.w	80a38d0 <network_get_listen_timeout>

080a521e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a521e:	2200      	movs	r2, #0
 80a5220:	6840      	ldr	r0, [r0, #4]
 80a5222:	4611      	mov	r1, r2
 80a5224:	f7fe bb44 	b.w	80a38b0 <network_listening>

080a5228 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a5228:	b570      	push	{r4, r5, r6, lr}
 80a522a:	4615      	mov	r5, r2
 80a522c:	b08e      	sub	sp, #56	; 0x38
 80a522e:	4604      	mov	r4, r0
    IPAddress addr;
 80a5230:	a808      	add	r0, sp, #32
 80a5232:	f7ff fcd5 	bl	80a4be0 <_ZN9IPAddressC1Ev>
        HAL_IPAddress ip = {};
 80a5236:	2211      	movs	r2, #17
 80a5238:	2100      	movs	r1, #0
 80a523a:	a803      	add	r0, sp, #12
 80a523c:	f001 fd34 	bl	80a6ca8 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a5240:	2600      	movs	r6, #0
 80a5242:	4628      	mov	r0, r5
 80a5244:	f002 fad0 	bl	80a77e8 <strlen>
 80a5248:	4b0a      	ldr	r3, [pc, #40]	; (80a5274 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a524a:	9600      	str	r6, [sp, #0]
 80a524c:	b281      	uxth	r1, r0
 80a524e:	685b      	ldr	r3, [r3, #4]
 80a5250:	4628      	mov	r0, r5
 80a5252:	aa03      	add	r2, sp, #12
 80a5254:	f7fe fa96 	bl	80a3784 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a5258:	b130      	cbz	r0, 80a5268 <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 80a525a:	4631      	mov	r1, r6
 80a525c:	4620      	mov	r0, r4
 80a525e:	f7ff fcdf 	bl	80a4c20 <_ZN9IPAddressC1Em>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a5262:	4620      	mov	r0, r4
 80a5264:	b00e      	add	sp, #56	; 0x38
 80a5266:	bd70      	pop	{r4, r5, r6, pc}
 80a5268:	4620      	mov	r0, r4
 80a526a:	a903      	add	r1, sp, #12
 80a526c:	f7ff fcc6 	bl	80a4bfc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    virtual ~IPAddress() {}
 80a5270:	e7f7      	b.n	80a5262 <_ZN5spark12NetworkClass7resolveEPKc+0x3a>
 80a5272:	bf00      	nop
 80a5274:	20000638 	.word	0x20000638

080a5278 <_ZN5spark12NetworkClass4fromEm>:
}
 80a5278:	4a03      	ldr	r2, [pc, #12]	; (80a5288 <_ZN5spark12NetworkClass4fromEm+0x10>)
 80a527a:	4b04      	ldr	r3, [pc, #16]	; (80a528c <_ZN5spark12NetworkClass4fromEm+0x14>)
 80a527c:	2804      	cmp	r0, #4
 80a527e:	bf14      	ite	ne
 80a5280:	4610      	movne	r0, r2
 80a5282:	4618      	moveq	r0, r3
 80a5284:	4770      	bx	lr
 80a5286:	bf00      	nop
 80a5288:	20000640 	.word	0x20000640
 80a528c:	20000638 	.word	0x20000638

080a5290 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80a5290:	4b02      	ldr	r3, [pc, #8]	; (80a529c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a5292:	4a03      	ldr	r2, [pc, #12]	; (80a52a0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a5294:	601a      	str	r2, [r3, #0]
 80a5296:	2200      	movs	r2, #0
 80a5298:	605a      	str	r2, [r3, #4]

} // spark
 80a529a:	4770      	bx	lr
 80a529c:	20000640 	.word	0x20000640
 80a52a0:	080aa5d4 	.word	0x080aa5d4

080a52a4 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 80a52a4:	2817      	cmp	r0, #23
bool pinAvailable(uint16_t pin) {
 80a52a6:	b570      	push	{r4, r5, r6, lr}
 80a52a8:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 80a52aa:	d901      	bls.n	80a52b0 <pinAvailable+0xc>
    return false;
 80a52ac:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 80a52ae:	bd70      	pop	{r4, r5, r6, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a52b0:	f1a0 030d 	sub.w	r3, r0, #13
 80a52b4:	2b02      	cmp	r3, #2
 80a52b6:	d90b      	bls.n	80a52d0 <pinAvailable+0x2c>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 80a52b8:	2801      	cmp	r0, #1
 80a52ba:	d826      	bhi.n	80a530a <pinAvailable+0x66>
 80a52bc:	f000 f8a6 	bl	80a540c <_Z19__fetch_global_Wirev>
 80a52c0:	2100      	movs	r1, #0
 80a52c2:	7c00      	ldrb	r0, [r0, #16]
 80a52c4:	f7fe f9ac 	bl	80a3620 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a52c8:	f080 0001 	eor.w	r0, r0, #1
 80a52cc:	b2c0      	uxtb	r0, r0
 80a52ce:	e7ee      	b.n	80a52ae <pinAvailable+0xa>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a52d0:	4e13      	ldr	r6, [pc, #76]	; (80a5320 <pinAvailable+0x7c>)
 80a52d2:	7831      	ldrb	r1, [r6, #0]
 80a52d4:	f3bf 8f5b 	dmb	ish
 80a52d8:	f011 0501 	ands.w	r5, r1, #1
 80a52dc:	d10f      	bne.n	80a52fe <pinAvailable+0x5a>
 80a52de:	4630      	mov	r0, r6
 80a52e0:	f7fa fee3 	bl	80a00aa <__cxa_guard_acquire>
 80a52e4:	b158      	cbz	r0, 80a52fe <pinAvailable+0x5a>
 80a52e6:	4629      	mov	r1, r5
 80a52e8:	480e      	ldr	r0, [pc, #56]	; (80a5324 <pinAvailable+0x80>)
 80a52ea:	f7fe fb8c 	bl	80a3a06 <_ZN8SPIClassC1E19hal_spi_interface_t>
 80a52ee:	4630      	mov	r0, r6
 80a52f0:	f7fa fee0 	bl	80a00b4 <__cxa_guard_release>
 80a52f4:	4a0c      	ldr	r2, [pc, #48]	; (80a5328 <pinAvailable+0x84>)
 80a52f6:	490d      	ldr	r1, [pc, #52]	; (80a532c <pinAvailable+0x88>)
 80a52f8:	480a      	ldr	r0, [pc, #40]	; (80a5324 <pinAvailable+0x80>)
 80a52fa:	f000 f8af 	bl	80a545c <__aeabi_atexit>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 80a52fe:	4b09      	ldr	r3, [pc, #36]	; (80a5324 <pinAvailable+0x80>)
 80a5300:	7818      	ldrb	r0, [r3, #0]
 80a5302:	f7fe f9f7 	bl	80a36f4 <hal_spi_is_enabled>
 80a5306:	2800      	cmp	r0, #0
 80a5308:	d1d0      	bne.n	80a52ac <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 80a530a:	3c12      	subs	r4, #18
 80a530c:	2c01      	cmp	r4, #1
 80a530e:	d805      	bhi.n	80a531c <pinAvailable+0x78>
 80a5310:	f7ff fdca 	bl	80a4ea8 <_Z22__fetch_global_Serial1v>
 80a5314:	7c00      	ldrb	r0, [r0, #16]
 80a5316:	f7fe f943 	bl	80a35a0 <hal_usart_is_enabled>
 80a531a:	e7d5      	b.n	80a52c8 <pinAvailable+0x24>
  return true; // 'pin' is available
 80a531c:	2001      	movs	r0, #1
 80a531e:	e7c6      	b.n	80a52ae <pinAvailable+0xa>
 80a5320:	20000254 	.word	0x20000254
 80a5324:	20000258 	.word	0x20000258
 80a5328:	20000250 	.word	0x20000250
 80a532c:	080a02b9 	.word	0x080a02b9

080a5330 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a5330:	2817      	cmp	r0, #23
{
 80a5332:	b538      	push	{r3, r4, r5, lr}
 80a5334:	4604      	mov	r4, r0
 80a5336:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a5338:	d80a      	bhi.n	80a5350 <pinMode+0x20>
 80a533a:	29ff      	cmp	r1, #255	; 0xff
 80a533c:	d008      	beq.n	80a5350 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 80a533e:	f7ff ffb1 	bl	80a52a4 <pinAvailable>
 80a5342:	b128      	cbz	r0, 80a5350 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
 80a5344:	4629      	mov	r1, r5
 80a5346:	4620      	mov	r0, r4
}
 80a5348:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
 80a534c:	f7fe b898 	b.w	80a3480 <HAL_Pin_Mode>
}
 80a5350:	bd38      	pop	{r3, r4, r5, pc}

080a5352 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a5352:	b538      	push	{r3, r4, r5, lr}
 80a5354:	4604      	mov	r4, r0
 80a5356:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a5358:	f7fe f89a 	bl	80a3490 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a535c:	28ff      	cmp	r0, #255	; 0xff
 80a535e:	d010      	beq.n	80a5382 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 80a5360:	2806      	cmp	r0, #6
 80a5362:	d804      	bhi.n	80a536e <digitalWrite+0x1c>
 80a5364:	234d      	movs	r3, #77	; 0x4d
 80a5366:	fa23 f000 	lsr.w	r0, r3, r0
 80a536a:	07c3      	lsls	r3, r0, #31
 80a536c:	d409      	bmi.n	80a5382 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a536e:	4620      	mov	r0, r4
 80a5370:	f7ff ff98 	bl	80a52a4 <pinAvailable>
 80a5374:	b128      	cbz	r0, 80a5382 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a5376:	4629      	mov	r1, r5
 80a5378:	4620      	mov	r0, r4
}
 80a537a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
 80a537e:	f7fe b88f 	b.w	80a34a0 <HAL_GPIO_Write>
}
 80a5382:	bd38      	pop	{r3, r4, r5, pc}

080a5384 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 80a5384:	b510      	push	{r4, lr}
 80a5386:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a5388:	f7fe f882 	bl	80a3490 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
 80a538c:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
 80a538e:	b2db      	uxtb	r3, r3
 80a5390:	2b01      	cmp	r3, #1
 80a5392:	d908      	bls.n	80a53a6 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 80a5394:	4620      	mov	r0, r4
 80a5396:	f7ff ff85 	bl	80a52a4 <pinAvailable>
 80a539a:	b120      	cbz	r0, 80a53a6 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a539c:	4620      	mov	r0, r4
}
 80a539e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
 80a53a2:	f7fe b885 	b.w	80a34b0 <HAL_GPIO_Read>
}
 80a53a6:	2000      	movs	r0, #0
 80a53a8:	bd10      	pop	{r4, pc}
	...

080a53ac <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a53ac:	2300      	movs	r3, #0
 80a53ae:	b513      	push	{r0, r1, r4, lr}
 80a53b0:	4c07      	ldr	r4, [pc, #28]	; (80a53d0 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a53b2:	461a      	mov	r2, r3
 80a53b4:	4619      	mov	r1, r3
 80a53b6:	4620      	mov	r0, r4
 80a53b8:	9300      	str	r3, [sp, #0]
 80a53ba:	f7ff fc47 	bl	80a4c4c <_ZN9IPAddressC1Ehhhh>
 80a53be:	4620      	mov	r0, r4
 80a53c0:	4a04      	ldr	r2, [pc, #16]	; (80a53d4 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a53c2:	4905      	ldr	r1, [pc, #20]	; (80a53d8 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a53c4:	b002      	add	sp, #8
 80a53c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a53ca:	f000 b847 	b.w	80a545c <__aeabi_atexit>
 80a53ce:	bf00      	nop
 80a53d0:	2000064c 	.word	0x2000064c
 80a53d4:	20000250 	.word	0x20000250
 80a53d8:	080a4b9f 	.word	0x080a4b9f

080a53dc <_Z17acquireWireBufferv>:
#ifndef SPARK_WIRING_NO_I2C

namespace {

hal_i2c_config_t defaultWireConfig() {
	hal_i2c_config_t config = {
 80a53dc:	2300      	movs	r3, #0
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
 80a53de:	b570      	push	{r4, r5, r6, lr}
	hal_i2c_config_t config = {
 80a53e0:	2520      	movs	r5, #32
 80a53e2:	8043      	strh	r3, [r0, #2]
 80a53e4:	2314      	movs	r3, #20
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a53e6:	4e08      	ldr	r6, [pc, #32]	; (80a5408 <_Z17acquireWireBufferv+0x2c>)
{
 80a53e8:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 80a53ea:	8003      	strh	r3, [r0, #0]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a53ec:	4631      	mov	r1, r6
	hal_i2c_config_t config = {
 80a53ee:	6085      	str	r5, [r0, #8]
 80a53f0:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a53f2:	4628      	mov	r0, r5
 80a53f4:	f000 f839 	bl	80a546a <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a53f8:	4631      	mov	r1, r6
	};
 80a53fa:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a53fc:	4628      	mov	r0, r5
 80a53fe:	f000 f834 	bl	80a546a <_ZnajRKSt9nothrow_t>
	};
 80a5402:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
 80a5404:	4620      	mov	r0, r4
 80a5406:	bd70      	pop	{r4, r5, r6, pc}
 80a5408:	080aa600 	.word	0x080aa600

080a540c <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 80a540c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a540e:	4d0f      	ldr	r5, [pc, #60]	; (80a544c <_Z19__fetch_global_Wirev+0x40>)
{
 80a5410:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a5412:	7829      	ldrb	r1, [r5, #0]
 80a5414:	f3bf 8f5b 	dmb	ish
 80a5418:	f011 0401 	ands.w	r4, r1, #1
 80a541c:	d113      	bne.n	80a5446 <_Z19__fetch_global_Wirev+0x3a>
 80a541e:	4628      	mov	r0, r5
 80a5420:	f7fa fe43 	bl	80a00aa <__cxa_guard_acquire>
 80a5424:	b178      	cbz	r0, 80a5446 <_Z19__fetch_global_Wirev+0x3a>
 80a5426:	a801      	add	r0, sp, #4
 80a5428:	f7ff ffd8 	bl	80a53dc <_Z17acquireWireBufferv>
 80a542c:	4621      	mov	r1, r4
 80a542e:	aa01      	add	r2, sp, #4
 80a5430:	4807      	ldr	r0, [pc, #28]	; (80a5450 <_Z19__fetch_global_Wirev+0x44>)
 80a5432:	f7ff fda7 	bl	80a4f84 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 80a5436:	4628      	mov	r0, r5
 80a5438:	f7fa fe3c 	bl	80a00b4 <__cxa_guard_release>
 80a543c:	4a05      	ldr	r2, [pc, #20]	; (80a5454 <_Z19__fetch_global_Wirev+0x48>)
 80a543e:	4906      	ldr	r1, [pc, #24]	; (80a5458 <_Z19__fetch_global_Wirev+0x4c>)
 80a5440:	4803      	ldr	r0, [pc, #12]	; (80a5450 <_Z19__fetch_global_Wirev+0x44>)
 80a5442:	f000 f80b 	bl	80a545c <__aeabi_atexit>
	return wire;
}
 80a5446:	4802      	ldr	r0, [pc, #8]	; (80a5450 <_Z19__fetch_global_Wirev+0x44>)
 80a5448:	b007      	add	sp, #28
 80a544a:	bd30      	pop	{r4, r5, pc}
 80a544c:	20000664 	.word	0x20000664
 80a5450:	20000668 	.word	0x20000668
 80a5454:	20000250 	.word	0x20000250
 80a5458:	080a4f2d 	.word	0x080a4f2d

080a545c <__aeabi_atexit>:
 80a545c:	460b      	mov	r3, r1
 80a545e:	4601      	mov	r1, r0
 80a5460:	4618      	mov	r0, r3
 80a5462:	f001 bb0f 	b.w	80a6a84 <__cxa_atexit>

080a5466 <_ZdlPvj>:
 80a5466:	f7fa be1c 	b.w	80a00a2 <_ZdlPv>

080a546a <_ZnajRKSt9nothrow_t>:
 80a546a:	f7fa be18 	b.w	80a009e <_Znaj>
	...

080a5470 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
 80a5470:	4901      	ldr	r1, [pc, #4]	; (80a5478 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
 80a5472:	f000 b8fb 	b.w	80a566c <_ZNKSt9type_infoeqERKS_>
 80a5476:	bf00      	nop
 80a5478:	080aa61c 	.word	0x080aa61c

080a547c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 80a547c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80a547e:	2400      	movs	r4, #0
 80a5480:	2310      	movs	r3, #16
 80a5482:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80a5486:	6803      	ldr	r3, [r0, #0]
 80a5488:	4615      	mov	r5, r2
 80a548a:	699e      	ldr	r6, [r3, #24]
 80a548c:	6812      	ldr	r2, [r2, #0]
 80a548e:	466b      	mov	r3, sp
 80a5490:	9400      	str	r4, [sp, #0]
 80a5492:	f88d 4004 	strb.w	r4, [sp, #4]
 80a5496:	47b0      	blx	r6
 80a5498:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80a549c:	f003 0306 	and.w	r3, r3, #6
 80a54a0:	2b06      	cmp	r3, #6
 80a54a2:	bf09      	itett	eq
 80a54a4:	2001      	moveq	r0, #1
 80a54a6:	4620      	movne	r0, r4
 80a54a8:	9b00      	ldreq	r3, [sp, #0]
 80a54aa:	602b      	streq	r3, [r5, #0]
 80a54ac:	b004      	add	sp, #16
 80a54ae:	bd70      	pop	{r4, r5, r6, pc}

080a54b0 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 80a54b0:	9800      	ldr	r0, [sp, #0]
 80a54b2:	4290      	cmp	r0, r2
 80a54b4:	bf14      	ite	ne
 80a54b6:	2001      	movne	r0, #1
 80a54b8:	2006      	moveq	r0, #6
 80a54ba:	4770      	bx	lr

080a54bc <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 80a54bc:	b510      	push	{r4, lr}
 80a54be:	4604      	mov	r4, r0
 80a54c0:	4b02      	ldr	r3, [pc, #8]	; (80a54cc <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 80a54c2:	6003      	str	r3, [r0, #0]
 80a54c4:	f000 f8cf 	bl	80a5666 <_ZNSt9type_infoD1Ev>
 80a54c8:	4620      	mov	r0, r4
 80a54ca:	bd10      	pop	{r4, pc}
 80a54cc:	080aa65c 	.word	0x080aa65c

080a54d0 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 80a54d0:	b510      	push	{r4, lr}
 80a54d2:	4604      	mov	r4, r0
 80a54d4:	f7ff fff2 	bl	80a54bc <_ZN10__cxxabiv117__class_type_infoD1Ev>
 80a54d8:	4620      	mov	r0, r4
 80a54da:	2108      	movs	r1, #8
 80a54dc:	f7ff ffc3 	bl	80a5466 <_ZdlPvj>
 80a54e0:	4620      	mov	r0, r4
 80a54e2:	bd10      	pop	{r4, pc}

080a54e4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 80a54e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a54e8:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80a54ec:	461f      	mov	r7, r3
 80a54ee:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 80a54f2:	4598      	cmp	r8, r3
 80a54f4:	4606      	mov	r6, r0
 80a54f6:	4615      	mov	r5, r2
 80a54f8:	d107      	bne.n	80a550a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 80a54fa:	9907      	ldr	r1, [sp, #28]
 80a54fc:	f000 f8b6 	bl	80a566c <_ZNKSt9type_infoeqERKS_>
 80a5500:	b118      	cbz	r0, 80a550a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 80a5502:	7165      	strb	r5, [r4, #5]
 80a5504:	2000      	movs	r0, #0
 80a5506:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a550a:	4639      	mov	r1, r7
 80a550c:	4630      	mov	r0, r6
 80a550e:	f000 f8ad 	bl	80a566c <_ZNKSt9type_infoeqERKS_>
 80a5512:	2800      	cmp	r0, #0
 80a5514:	d0f6      	beq.n	80a5504 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
 80a5516:	2301      	movs	r3, #1
 80a5518:	f8c4 8000 	str.w	r8, [r4]
 80a551c:	7125      	strb	r5, [r4, #4]
 80a551e:	71a3      	strb	r3, [r4, #6]
 80a5520:	e7f0      	b.n	80a5504 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

080a5522 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 80a5522:	b538      	push	{r3, r4, r5, lr}
 80a5524:	4615      	mov	r5, r2
 80a5526:	461c      	mov	r4, r3
 80a5528:	f000 f8a0 	bl	80a566c <_ZNKSt9type_infoeqERKS_>
 80a552c:	b120      	cbz	r0, 80a5538 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 80a552e:	2308      	movs	r3, #8
 80a5530:	60e3      	str	r3, [r4, #12]
 80a5532:	2306      	movs	r3, #6
 80a5534:	6025      	str	r5, [r4, #0]
 80a5536:	7123      	strb	r3, [r4, #4]
 80a5538:	bd38      	pop	{r3, r4, r5, pc}

080a553a <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 80a553a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a553e:	4605      	mov	r5, r0
 80a5540:	460c      	mov	r4, r1
 80a5542:	4616      	mov	r6, r2
 80a5544:	461f      	mov	r7, r3
 80a5546:	f000 f891 	bl	80a566c <_ZNKSt9type_infoeqERKS_>
 80a554a:	b948      	cbnz	r0, 80a5560 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 80a554c:	2f03      	cmp	r7, #3
 80a554e:	d807      	bhi.n	80a5560 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 80a5550:	6823      	ldr	r3, [r4, #0]
 80a5552:	4632      	mov	r2, r6
 80a5554:	4629      	mov	r1, r5
 80a5556:	4620      	mov	r0, r4
 80a5558:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80a555c:	695b      	ldr	r3, [r3, #20]
 80a555e:	4718      	bx	r3
 80a5560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a5564 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 80a5564:	b510      	push	{r4, lr}
 80a5566:	4604      	mov	r4, r0
 80a5568:	4b02      	ldr	r3, [pc, #8]	; (80a5574 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 80a556a:	6003      	str	r3, [r0, #0]
 80a556c:	f7ff ffa6 	bl	80a54bc <_ZN10__cxxabiv117__class_type_infoD1Ev>
 80a5570:	4620      	mov	r0, r4
 80a5572:	bd10      	pop	{r4, pc}
 80a5574:	080aa6bc 	.word	0x080aa6bc

080a5578 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 80a5578:	b510      	push	{r4, lr}
 80a557a:	4604      	mov	r4, r0
 80a557c:	f7ff fff2 	bl	80a5564 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 80a5580:	4620      	mov	r0, r4
 80a5582:	210c      	movs	r1, #12
 80a5584:	f7ff ff6f 	bl	80a5466 <_ZdlPvj>
 80a5588:	4620      	mov	r0, r4
 80a558a:	bd10      	pop	{r4, pc}

080a558c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 80a558c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a5590:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80a5594:	4606      	mov	r6, r0
 80a5596:	4590      	cmp	r8, r2
 80a5598:	460f      	mov	r7, r1
 80a559a:	4615      	mov	r5, r2
 80a559c:	461c      	mov	r4, r3
 80a559e:	d00b      	beq.n	80a55b8 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x2c>
 80a55a0:	68b0      	ldr	r0, [r6, #8]
 80a55a2:	462a      	mov	r2, r5
 80a55a4:	6803      	ldr	r3, [r0, #0]
 80a55a6:	f8cd 8018 	str.w	r8, [sp, #24]
 80a55aa:	6a1e      	ldr	r6, [r3, #32]
 80a55ac:	4639      	mov	r1, r7
 80a55ae:	4623      	mov	r3, r4
 80a55b0:	46b4      	mov	ip, r6
 80a55b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80a55b6:	4760      	bx	ip
 80a55b8:	4619      	mov	r1, r3
 80a55ba:	f000 f857 	bl	80a566c <_ZNKSt9type_infoeqERKS_>
 80a55be:	2800      	cmp	r0, #0
 80a55c0:	d0ee      	beq.n	80a55a0 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x14>
 80a55c2:	2006      	movs	r0, #6
 80a55c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a55c8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 80a55c8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a55cc:	460d      	mov	r5, r1
 80a55ce:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
 80a55d2:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
 80a55d6:	4619      	mov	r1, r3
 80a55d8:	4681      	mov	r9, r0
 80a55da:	4617      	mov	r7, r2
 80a55dc:	4698      	mov	r8, r3
 80a55de:	f000 f845 	bl	80a566c <_ZNKSt9type_infoeqERKS_>
 80a55e2:	b190      	cbz	r0, 80a560a <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 80a55e4:	2d00      	cmp	r5, #0
 80a55e6:	6034      	str	r4, [r6, #0]
 80a55e8:	7137      	strb	r7, [r6, #4]
 80a55ea:	db09      	blt.n	80a5600 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 80a55ec:	442c      	add	r4, r5
 80a55ee:	45a2      	cmp	sl, r4
 80a55f0:	bf0c      	ite	eq
 80a55f2:	2406      	moveq	r4, #6
 80a55f4:	2401      	movne	r4, #1
 80a55f6:	71b4      	strb	r4, [r6, #6]
 80a55f8:	2000      	movs	r0, #0
 80a55fa:	b001      	add	sp, #4
 80a55fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a5600:	3502      	adds	r5, #2
 80a5602:	d1f9      	bne.n	80a55f8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 80a5604:	2301      	movs	r3, #1
 80a5606:	71b3      	strb	r3, [r6, #6]
 80a5608:	e7f6      	b.n	80a55f8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 80a560a:	4554      	cmp	r4, sl
 80a560c:	d106      	bne.n	80a561c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 80a560e:	4659      	mov	r1, fp
 80a5610:	4648      	mov	r0, r9
 80a5612:	f000 f82b 	bl	80a566c <_ZNKSt9type_infoeqERKS_>
 80a5616:	b108      	cbz	r0, 80a561c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 80a5618:	7177      	strb	r7, [r6, #5]
 80a561a:	e7ed      	b.n	80a55f8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 80a561c:	f8d9 0008 	ldr.w	r0, [r9, #8]
 80a5620:	463a      	mov	r2, r7
 80a5622:	6803      	ldr	r3, [r0, #0]
 80a5624:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
 80a5628:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
 80a562c:	69dc      	ldr	r4, [r3, #28]
 80a562e:	4629      	mov	r1, r5
 80a5630:	4643      	mov	r3, r8
 80a5632:	46a4      	mov	ip, r4
 80a5634:	b001      	add	sp, #4
 80a5636:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a563a:	4760      	bx	ip

080a563c <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 80a563c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a5640:	4607      	mov	r7, r0
 80a5642:	460c      	mov	r4, r1
 80a5644:	4615      	mov	r5, r2
 80a5646:	461e      	mov	r6, r3
 80a5648:	f7ff ff6b 	bl	80a5522 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 80a564c:	b948      	cbnz	r0, 80a5662 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 80a564e:	68b8      	ldr	r0, [r7, #8]
 80a5650:	462a      	mov	r2, r5
 80a5652:	6803      	ldr	r3, [r0, #0]
 80a5654:	4621      	mov	r1, r4
 80a5656:	699f      	ldr	r7, [r3, #24]
 80a5658:	4633      	mov	r3, r6
 80a565a:	46bc      	mov	ip, r7
 80a565c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80a5660:	4760      	bx	ip
 80a5662:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a5666 <_ZNSt9type_infoD1Ev>:
 80a5666:	4770      	bx	lr

080a5668 <_ZNKSt9type_info14__is_pointer_pEv>:
 80a5668:	2000      	movs	r0, #0
 80a566a:	4770      	bx	lr

080a566c <_ZNKSt9type_infoeqERKS_>:
 80a566c:	4281      	cmp	r1, r0
 80a566e:	b508      	push	{r3, lr}
 80a5670:	d00e      	beq.n	80a5690 <_ZNKSt9type_infoeqERKS_+0x24>
 80a5672:	6840      	ldr	r0, [r0, #4]
 80a5674:	7803      	ldrb	r3, [r0, #0]
 80a5676:	2b2a      	cmp	r3, #42	; 0x2a
 80a5678:	d00c      	beq.n	80a5694 <_ZNKSt9type_infoeqERKS_+0x28>
 80a567a:	6849      	ldr	r1, [r1, #4]
 80a567c:	780b      	ldrb	r3, [r1, #0]
 80a567e:	2b2a      	cmp	r3, #42	; 0x2a
 80a5680:	bf08      	it	eq
 80a5682:	3101      	addeq	r1, #1
 80a5684:	f001 fb3c 	bl	80a6d00 <strcmp>
 80a5688:	fab0 f080 	clz	r0, r0
 80a568c:	0940      	lsrs	r0, r0, #5
 80a568e:	bd08      	pop	{r3, pc}
 80a5690:	2001      	movs	r0, #1
 80a5692:	e7fc      	b.n	80a568e <_ZNKSt9type_infoeqERKS_+0x22>
 80a5694:	2000      	movs	r0, #0
 80a5696:	e7fa      	b.n	80a568e <_ZNKSt9type_infoeqERKS_+0x22>

080a5698 <__aeabi_drsub>:
 80a5698:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a569c:	e002      	b.n	80a56a4 <__adddf3>
 80a569e:	bf00      	nop

080a56a0 <__aeabi_dsub>:
 80a56a0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a56a4 <__adddf3>:
 80a56a4:	b530      	push	{r4, r5, lr}
 80a56a6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a56aa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a56ae:	ea94 0f05 	teq	r4, r5
 80a56b2:	bf08      	it	eq
 80a56b4:	ea90 0f02 	teqeq	r0, r2
 80a56b8:	bf1f      	itttt	ne
 80a56ba:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a56be:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a56c2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a56c6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a56ca:	f000 80e2 	beq.w	80a5892 <__adddf3+0x1ee>
 80a56ce:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a56d2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a56d6:	bfb8      	it	lt
 80a56d8:	426d      	neglt	r5, r5
 80a56da:	dd0c      	ble.n	80a56f6 <__adddf3+0x52>
 80a56dc:	442c      	add	r4, r5
 80a56de:	ea80 0202 	eor.w	r2, r0, r2
 80a56e2:	ea81 0303 	eor.w	r3, r1, r3
 80a56e6:	ea82 0000 	eor.w	r0, r2, r0
 80a56ea:	ea83 0101 	eor.w	r1, r3, r1
 80a56ee:	ea80 0202 	eor.w	r2, r0, r2
 80a56f2:	ea81 0303 	eor.w	r3, r1, r3
 80a56f6:	2d36      	cmp	r5, #54	; 0x36
 80a56f8:	bf88      	it	hi
 80a56fa:	bd30      	pophi	{r4, r5, pc}
 80a56fc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a5700:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a5704:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a5708:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a570c:	d002      	beq.n	80a5714 <__adddf3+0x70>
 80a570e:	4240      	negs	r0, r0
 80a5710:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a5714:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a5718:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a571c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a5720:	d002      	beq.n	80a5728 <__adddf3+0x84>
 80a5722:	4252      	negs	r2, r2
 80a5724:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a5728:	ea94 0f05 	teq	r4, r5
 80a572c:	f000 80a7 	beq.w	80a587e <__adddf3+0x1da>
 80a5730:	f1a4 0401 	sub.w	r4, r4, #1
 80a5734:	f1d5 0e20 	rsbs	lr, r5, #32
 80a5738:	db0d      	blt.n	80a5756 <__adddf3+0xb2>
 80a573a:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a573e:	fa22 f205 	lsr.w	r2, r2, r5
 80a5742:	1880      	adds	r0, r0, r2
 80a5744:	f141 0100 	adc.w	r1, r1, #0
 80a5748:	fa03 f20e 	lsl.w	r2, r3, lr
 80a574c:	1880      	adds	r0, r0, r2
 80a574e:	fa43 f305 	asr.w	r3, r3, r5
 80a5752:	4159      	adcs	r1, r3
 80a5754:	e00e      	b.n	80a5774 <__adddf3+0xd0>
 80a5756:	f1a5 0520 	sub.w	r5, r5, #32
 80a575a:	f10e 0e20 	add.w	lr, lr, #32
 80a575e:	2a01      	cmp	r2, #1
 80a5760:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a5764:	bf28      	it	cs
 80a5766:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a576a:	fa43 f305 	asr.w	r3, r3, r5
 80a576e:	18c0      	adds	r0, r0, r3
 80a5770:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a5774:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a5778:	d507      	bpl.n	80a578a <__adddf3+0xe6>
 80a577a:	f04f 0e00 	mov.w	lr, #0
 80a577e:	f1dc 0c00 	rsbs	ip, ip, #0
 80a5782:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a5786:	eb6e 0101 	sbc.w	r1, lr, r1
 80a578a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a578e:	d31b      	bcc.n	80a57c8 <__adddf3+0x124>
 80a5790:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a5794:	d30c      	bcc.n	80a57b0 <__adddf3+0x10c>
 80a5796:	0849      	lsrs	r1, r1, #1
 80a5798:	ea5f 0030 	movs.w	r0, r0, rrx
 80a579c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a57a0:	f104 0401 	add.w	r4, r4, #1
 80a57a4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a57a8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a57ac:	f080 809a 	bcs.w	80a58e4 <__adddf3+0x240>
 80a57b0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a57b4:	bf08      	it	eq
 80a57b6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a57ba:	f150 0000 	adcs.w	r0, r0, #0
 80a57be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a57c2:	ea41 0105 	orr.w	r1, r1, r5
 80a57c6:	bd30      	pop	{r4, r5, pc}
 80a57c8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a57cc:	4140      	adcs	r0, r0
 80a57ce:	eb41 0101 	adc.w	r1, r1, r1
 80a57d2:	3c01      	subs	r4, #1
 80a57d4:	bf28      	it	cs
 80a57d6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80a57da:	d2e9      	bcs.n	80a57b0 <__adddf3+0x10c>
 80a57dc:	f091 0f00 	teq	r1, #0
 80a57e0:	bf04      	itt	eq
 80a57e2:	4601      	moveq	r1, r0
 80a57e4:	2000      	moveq	r0, #0
 80a57e6:	fab1 f381 	clz	r3, r1
 80a57ea:	bf08      	it	eq
 80a57ec:	3320      	addeq	r3, #32
 80a57ee:	f1a3 030b 	sub.w	r3, r3, #11
 80a57f2:	f1b3 0220 	subs.w	r2, r3, #32
 80a57f6:	da0c      	bge.n	80a5812 <__adddf3+0x16e>
 80a57f8:	320c      	adds	r2, #12
 80a57fa:	dd08      	ble.n	80a580e <__adddf3+0x16a>
 80a57fc:	f102 0c14 	add.w	ip, r2, #20
 80a5800:	f1c2 020c 	rsb	r2, r2, #12
 80a5804:	fa01 f00c 	lsl.w	r0, r1, ip
 80a5808:	fa21 f102 	lsr.w	r1, r1, r2
 80a580c:	e00c      	b.n	80a5828 <__adddf3+0x184>
 80a580e:	f102 0214 	add.w	r2, r2, #20
 80a5812:	bfd8      	it	le
 80a5814:	f1c2 0c20 	rsble	ip, r2, #32
 80a5818:	fa01 f102 	lsl.w	r1, r1, r2
 80a581c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a5820:	bfdc      	itt	le
 80a5822:	ea41 010c 	orrle.w	r1, r1, ip
 80a5826:	4090      	lslle	r0, r2
 80a5828:	1ae4      	subs	r4, r4, r3
 80a582a:	bfa2      	ittt	ge
 80a582c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a5830:	4329      	orrge	r1, r5
 80a5832:	bd30      	popge	{r4, r5, pc}
 80a5834:	ea6f 0404 	mvn.w	r4, r4
 80a5838:	3c1f      	subs	r4, #31
 80a583a:	da1c      	bge.n	80a5876 <__adddf3+0x1d2>
 80a583c:	340c      	adds	r4, #12
 80a583e:	dc0e      	bgt.n	80a585e <__adddf3+0x1ba>
 80a5840:	f104 0414 	add.w	r4, r4, #20
 80a5844:	f1c4 0220 	rsb	r2, r4, #32
 80a5848:	fa20 f004 	lsr.w	r0, r0, r4
 80a584c:	fa01 f302 	lsl.w	r3, r1, r2
 80a5850:	ea40 0003 	orr.w	r0, r0, r3
 80a5854:	fa21 f304 	lsr.w	r3, r1, r4
 80a5858:	ea45 0103 	orr.w	r1, r5, r3
 80a585c:	bd30      	pop	{r4, r5, pc}
 80a585e:	f1c4 040c 	rsb	r4, r4, #12
 80a5862:	f1c4 0220 	rsb	r2, r4, #32
 80a5866:	fa20 f002 	lsr.w	r0, r0, r2
 80a586a:	fa01 f304 	lsl.w	r3, r1, r4
 80a586e:	ea40 0003 	orr.w	r0, r0, r3
 80a5872:	4629      	mov	r1, r5
 80a5874:	bd30      	pop	{r4, r5, pc}
 80a5876:	fa21 f004 	lsr.w	r0, r1, r4
 80a587a:	4629      	mov	r1, r5
 80a587c:	bd30      	pop	{r4, r5, pc}
 80a587e:	f094 0f00 	teq	r4, #0
 80a5882:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a5886:	bf06      	itte	eq
 80a5888:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a588c:	3401      	addeq	r4, #1
 80a588e:	3d01      	subne	r5, #1
 80a5890:	e74e      	b.n	80a5730 <__adddf3+0x8c>
 80a5892:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a5896:	bf18      	it	ne
 80a5898:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a589c:	d029      	beq.n	80a58f2 <__adddf3+0x24e>
 80a589e:	ea94 0f05 	teq	r4, r5
 80a58a2:	bf08      	it	eq
 80a58a4:	ea90 0f02 	teqeq	r0, r2
 80a58a8:	d005      	beq.n	80a58b6 <__adddf3+0x212>
 80a58aa:	ea54 0c00 	orrs.w	ip, r4, r0
 80a58ae:	bf04      	itt	eq
 80a58b0:	4619      	moveq	r1, r3
 80a58b2:	4610      	moveq	r0, r2
 80a58b4:	bd30      	pop	{r4, r5, pc}
 80a58b6:	ea91 0f03 	teq	r1, r3
 80a58ba:	bf1e      	ittt	ne
 80a58bc:	2100      	movne	r1, #0
 80a58be:	2000      	movne	r0, #0
 80a58c0:	bd30      	popne	{r4, r5, pc}
 80a58c2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a58c6:	d105      	bne.n	80a58d4 <__adddf3+0x230>
 80a58c8:	0040      	lsls	r0, r0, #1
 80a58ca:	4149      	adcs	r1, r1
 80a58cc:	bf28      	it	cs
 80a58ce:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a58d2:	bd30      	pop	{r4, r5, pc}
 80a58d4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a58d8:	bf3c      	itt	cc
 80a58da:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a58de:	bd30      	popcc	{r4, r5, pc}
 80a58e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a58e4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a58e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a58ec:	f04f 0000 	mov.w	r0, #0
 80a58f0:	bd30      	pop	{r4, r5, pc}
 80a58f2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a58f6:	bf1a      	itte	ne
 80a58f8:	4619      	movne	r1, r3
 80a58fa:	4610      	movne	r0, r2
 80a58fc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a5900:	bf1c      	itt	ne
 80a5902:	460b      	movne	r3, r1
 80a5904:	4602      	movne	r2, r0
 80a5906:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a590a:	bf06      	itte	eq
 80a590c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a5910:	ea91 0f03 	teqeq	r1, r3
 80a5914:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a5918:	bd30      	pop	{r4, r5, pc}
 80a591a:	bf00      	nop

080a591c <__aeabi_ui2d>:
 80a591c:	f090 0f00 	teq	r0, #0
 80a5920:	bf04      	itt	eq
 80a5922:	2100      	moveq	r1, #0
 80a5924:	4770      	bxeq	lr
 80a5926:	b530      	push	{r4, r5, lr}
 80a5928:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a592c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a5930:	f04f 0500 	mov.w	r5, #0
 80a5934:	f04f 0100 	mov.w	r1, #0
 80a5938:	e750      	b.n	80a57dc <__adddf3+0x138>
 80a593a:	bf00      	nop

080a593c <__aeabi_i2d>:
 80a593c:	f090 0f00 	teq	r0, #0
 80a5940:	bf04      	itt	eq
 80a5942:	2100      	moveq	r1, #0
 80a5944:	4770      	bxeq	lr
 80a5946:	b530      	push	{r4, r5, lr}
 80a5948:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a594c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a5950:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a5954:	bf48      	it	mi
 80a5956:	4240      	negmi	r0, r0
 80a5958:	f04f 0100 	mov.w	r1, #0
 80a595c:	e73e      	b.n	80a57dc <__adddf3+0x138>
 80a595e:	bf00      	nop

080a5960 <__aeabi_f2d>:
 80a5960:	0042      	lsls	r2, r0, #1
 80a5962:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a5966:	ea4f 0131 	mov.w	r1, r1, rrx
 80a596a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a596e:	bf1f      	itttt	ne
 80a5970:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a5974:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a5978:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a597c:	4770      	bxne	lr
 80a597e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80a5982:	bf08      	it	eq
 80a5984:	4770      	bxeq	lr
 80a5986:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80a598a:	bf04      	itt	eq
 80a598c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80a5990:	4770      	bxeq	lr
 80a5992:	b530      	push	{r4, r5, lr}
 80a5994:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a5998:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a599c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a59a0:	e71c      	b.n	80a57dc <__adddf3+0x138>
 80a59a2:	bf00      	nop

080a59a4 <__aeabi_ul2d>:
 80a59a4:	ea50 0201 	orrs.w	r2, r0, r1
 80a59a8:	bf08      	it	eq
 80a59aa:	4770      	bxeq	lr
 80a59ac:	b530      	push	{r4, r5, lr}
 80a59ae:	f04f 0500 	mov.w	r5, #0
 80a59b2:	e00a      	b.n	80a59ca <__aeabi_l2d+0x16>

080a59b4 <__aeabi_l2d>:
 80a59b4:	ea50 0201 	orrs.w	r2, r0, r1
 80a59b8:	bf08      	it	eq
 80a59ba:	4770      	bxeq	lr
 80a59bc:	b530      	push	{r4, r5, lr}
 80a59be:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a59c2:	d502      	bpl.n	80a59ca <__aeabi_l2d+0x16>
 80a59c4:	4240      	negs	r0, r0
 80a59c6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a59ca:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a59ce:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a59d2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a59d6:	f43f aed8 	beq.w	80a578a <__adddf3+0xe6>
 80a59da:	f04f 0203 	mov.w	r2, #3
 80a59de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a59e2:	bf18      	it	ne
 80a59e4:	3203      	addne	r2, #3
 80a59e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a59ea:	bf18      	it	ne
 80a59ec:	3203      	addne	r2, #3
 80a59ee:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a59f2:	f1c2 0320 	rsb	r3, r2, #32
 80a59f6:	fa00 fc03 	lsl.w	ip, r0, r3
 80a59fa:	fa20 f002 	lsr.w	r0, r0, r2
 80a59fe:	fa01 fe03 	lsl.w	lr, r1, r3
 80a5a02:	ea40 000e 	orr.w	r0, r0, lr
 80a5a06:	fa21 f102 	lsr.w	r1, r1, r2
 80a5a0a:	4414      	add	r4, r2
 80a5a0c:	e6bd      	b.n	80a578a <__adddf3+0xe6>
 80a5a0e:	bf00      	nop

080a5a10 <__aeabi_dmul>:
 80a5a10:	b570      	push	{r4, r5, r6, lr}
 80a5a12:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a5a16:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a5a1a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a5a1e:	bf1d      	ittte	ne
 80a5a20:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a5a24:	ea94 0f0c 	teqne	r4, ip
 80a5a28:	ea95 0f0c 	teqne	r5, ip
 80a5a2c:	f000 f8de 	bleq	80a5bec <__aeabi_dmul+0x1dc>
 80a5a30:	442c      	add	r4, r5
 80a5a32:	ea81 0603 	eor.w	r6, r1, r3
 80a5a36:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a5a3a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a5a3e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a5a42:	bf18      	it	ne
 80a5a44:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a5a48:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a5a4c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a5a50:	d038      	beq.n	80a5ac4 <__aeabi_dmul+0xb4>
 80a5a52:	fba0 ce02 	umull	ip, lr, r0, r2
 80a5a56:	f04f 0500 	mov.w	r5, #0
 80a5a5a:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a5a5e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a5a62:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a5a66:	f04f 0600 	mov.w	r6, #0
 80a5a6a:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a5a6e:	f09c 0f00 	teq	ip, #0
 80a5a72:	bf18      	it	ne
 80a5a74:	f04e 0e01 	orrne.w	lr, lr, #1
 80a5a78:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a5a7c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a5a80:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a5a84:	d204      	bcs.n	80a5a90 <__aeabi_dmul+0x80>
 80a5a86:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a5a8a:	416d      	adcs	r5, r5
 80a5a8c:	eb46 0606 	adc.w	r6, r6, r6
 80a5a90:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a5a94:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a5a98:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a5a9c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a5aa0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a5aa4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a5aa8:	bf88      	it	hi
 80a5aaa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a5aae:	d81e      	bhi.n	80a5aee <__aeabi_dmul+0xde>
 80a5ab0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a5ab4:	bf08      	it	eq
 80a5ab6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a5aba:	f150 0000 	adcs.w	r0, r0, #0
 80a5abe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a5ac2:	bd70      	pop	{r4, r5, r6, pc}
 80a5ac4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a5ac8:	ea46 0101 	orr.w	r1, r6, r1
 80a5acc:	ea40 0002 	orr.w	r0, r0, r2
 80a5ad0:	ea81 0103 	eor.w	r1, r1, r3
 80a5ad4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a5ad8:	bfc2      	ittt	gt
 80a5ada:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a5ade:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a5ae2:	bd70      	popgt	{r4, r5, r6, pc}
 80a5ae4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a5ae8:	f04f 0e00 	mov.w	lr, #0
 80a5aec:	3c01      	subs	r4, #1
 80a5aee:	f300 80ab 	bgt.w	80a5c48 <__aeabi_dmul+0x238>
 80a5af2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a5af6:	bfde      	ittt	le
 80a5af8:	2000      	movle	r0, #0
 80a5afa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a5afe:	bd70      	pople	{r4, r5, r6, pc}
 80a5b00:	f1c4 0400 	rsb	r4, r4, #0
 80a5b04:	3c20      	subs	r4, #32
 80a5b06:	da35      	bge.n	80a5b74 <__aeabi_dmul+0x164>
 80a5b08:	340c      	adds	r4, #12
 80a5b0a:	dc1b      	bgt.n	80a5b44 <__aeabi_dmul+0x134>
 80a5b0c:	f104 0414 	add.w	r4, r4, #20
 80a5b10:	f1c4 0520 	rsb	r5, r4, #32
 80a5b14:	fa00 f305 	lsl.w	r3, r0, r5
 80a5b18:	fa20 f004 	lsr.w	r0, r0, r4
 80a5b1c:	fa01 f205 	lsl.w	r2, r1, r5
 80a5b20:	ea40 0002 	orr.w	r0, r0, r2
 80a5b24:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a5b28:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a5b2c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a5b30:	fa21 f604 	lsr.w	r6, r1, r4
 80a5b34:	eb42 0106 	adc.w	r1, r2, r6
 80a5b38:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a5b3c:	bf08      	it	eq
 80a5b3e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a5b42:	bd70      	pop	{r4, r5, r6, pc}
 80a5b44:	f1c4 040c 	rsb	r4, r4, #12
 80a5b48:	f1c4 0520 	rsb	r5, r4, #32
 80a5b4c:	fa00 f304 	lsl.w	r3, r0, r4
 80a5b50:	fa20 f005 	lsr.w	r0, r0, r5
 80a5b54:	fa01 f204 	lsl.w	r2, r1, r4
 80a5b58:	ea40 0002 	orr.w	r0, r0, r2
 80a5b5c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a5b60:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a5b64:	f141 0100 	adc.w	r1, r1, #0
 80a5b68:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a5b6c:	bf08      	it	eq
 80a5b6e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a5b72:	bd70      	pop	{r4, r5, r6, pc}
 80a5b74:	f1c4 0520 	rsb	r5, r4, #32
 80a5b78:	fa00 f205 	lsl.w	r2, r0, r5
 80a5b7c:	ea4e 0e02 	orr.w	lr, lr, r2
 80a5b80:	fa20 f304 	lsr.w	r3, r0, r4
 80a5b84:	fa01 f205 	lsl.w	r2, r1, r5
 80a5b88:	ea43 0302 	orr.w	r3, r3, r2
 80a5b8c:	fa21 f004 	lsr.w	r0, r1, r4
 80a5b90:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a5b94:	fa21 f204 	lsr.w	r2, r1, r4
 80a5b98:	ea20 0002 	bic.w	r0, r0, r2
 80a5b9c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a5ba0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a5ba4:	bf08      	it	eq
 80a5ba6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a5baa:	bd70      	pop	{r4, r5, r6, pc}
 80a5bac:	f094 0f00 	teq	r4, #0
 80a5bb0:	d10f      	bne.n	80a5bd2 <__aeabi_dmul+0x1c2>
 80a5bb2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a5bb6:	0040      	lsls	r0, r0, #1
 80a5bb8:	eb41 0101 	adc.w	r1, r1, r1
 80a5bbc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a5bc0:	bf08      	it	eq
 80a5bc2:	3c01      	subeq	r4, #1
 80a5bc4:	d0f7      	beq.n	80a5bb6 <__aeabi_dmul+0x1a6>
 80a5bc6:	ea41 0106 	orr.w	r1, r1, r6
 80a5bca:	f095 0f00 	teq	r5, #0
 80a5bce:	bf18      	it	ne
 80a5bd0:	4770      	bxne	lr
 80a5bd2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a5bd6:	0052      	lsls	r2, r2, #1
 80a5bd8:	eb43 0303 	adc.w	r3, r3, r3
 80a5bdc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a5be0:	bf08      	it	eq
 80a5be2:	3d01      	subeq	r5, #1
 80a5be4:	d0f7      	beq.n	80a5bd6 <__aeabi_dmul+0x1c6>
 80a5be6:	ea43 0306 	orr.w	r3, r3, r6
 80a5bea:	4770      	bx	lr
 80a5bec:	ea94 0f0c 	teq	r4, ip
 80a5bf0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a5bf4:	bf18      	it	ne
 80a5bf6:	ea95 0f0c 	teqne	r5, ip
 80a5bfa:	d00c      	beq.n	80a5c16 <__aeabi_dmul+0x206>
 80a5bfc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a5c00:	bf18      	it	ne
 80a5c02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a5c06:	d1d1      	bne.n	80a5bac <__aeabi_dmul+0x19c>
 80a5c08:	ea81 0103 	eor.w	r1, r1, r3
 80a5c0c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a5c10:	f04f 0000 	mov.w	r0, #0
 80a5c14:	bd70      	pop	{r4, r5, r6, pc}
 80a5c16:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a5c1a:	bf06      	itte	eq
 80a5c1c:	4610      	moveq	r0, r2
 80a5c1e:	4619      	moveq	r1, r3
 80a5c20:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a5c24:	d019      	beq.n	80a5c5a <__aeabi_dmul+0x24a>
 80a5c26:	ea94 0f0c 	teq	r4, ip
 80a5c2a:	d102      	bne.n	80a5c32 <__aeabi_dmul+0x222>
 80a5c2c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a5c30:	d113      	bne.n	80a5c5a <__aeabi_dmul+0x24a>
 80a5c32:	ea95 0f0c 	teq	r5, ip
 80a5c36:	d105      	bne.n	80a5c44 <__aeabi_dmul+0x234>
 80a5c38:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a5c3c:	bf1c      	itt	ne
 80a5c3e:	4610      	movne	r0, r2
 80a5c40:	4619      	movne	r1, r3
 80a5c42:	d10a      	bne.n	80a5c5a <__aeabi_dmul+0x24a>
 80a5c44:	ea81 0103 	eor.w	r1, r1, r3
 80a5c48:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a5c4c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a5c50:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a5c54:	f04f 0000 	mov.w	r0, #0
 80a5c58:	bd70      	pop	{r4, r5, r6, pc}
 80a5c5a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a5c5e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a5c62:	bd70      	pop	{r4, r5, r6, pc}

080a5c64 <__aeabi_ddiv>:
 80a5c64:	b570      	push	{r4, r5, r6, lr}
 80a5c66:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a5c6a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a5c6e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a5c72:	bf1d      	ittte	ne
 80a5c74:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a5c78:	ea94 0f0c 	teqne	r4, ip
 80a5c7c:	ea95 0f0c 	teqne	r5, ip
 80a5c80:	f000 f8a7 	bleq	80a5dd2 <__aeabi_ddiv+0x16e>
 80a5c84:	eba4 0405 	sub.w	r4, r4, r5
 80a5c88:	ea81 0e03 	eor.w	lr, r1, r3
 80a5c8c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a5c90:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a5c94:	f000 8088 	beq.w	80a5da8 <__aeabi_ddiv+0x144>
 80a5c98:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a5c9c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a5ca0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a5ca4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a5ca8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a5cac:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a5cb0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a5cb4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a5cb8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a5cbc:	429d      	cmp	r5, r3
 80a5cbe:	bf08      	it	eq
 80a5cc0:	4296      	cmpeq	r6, r2
 80a5cc2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a5cc6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a5cca:	d202      	bcs.n	80a5cd2 <__aeabi_ddiv+0x6e>
 80a5ccc:	085b      	lsrs	r3, r3, #1
 80a5cce:	ea4f 0232 	mov.w	r2, r2, rrx
 80a5cd2:	1ab6      	subs	r6, r6, r2
 80a5cd4:	eb65 0503 	sbc.w	r5, r5, r3
 80a5cd8:	085b      	lsrs	r3, r3, #1
 80a5cda:	ea4f 0232 	mov.w	r2, r2, rrx
 80a5cde:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a5ce2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a5ce6:	ebb6 0e02 	subs.w	lr, r6, r2
 80a5cea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a5cee:	bf22      	ittt	cs
 80a5cf0:	1ab6      	subcs	r6, r6, r2
 80a5cf2:	4675      	movcs	r5, lr
 80a5cf4:	ea40 000c 	orrcs.w	r0, r0, ip
 80a5cf8:	085b      	lsrs	r3, r3, #1
 80a5cfa:	ea4f 0232 	mov.w	r2, r2, rrx
 80a5cfe:	ebb6 0e02 	subs.w	lr, r6, r2
 80a5d02:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a5d06:	bf22      	ittt	cs
 80a5d08:	1ab6      	subcs	r6, r6, r2
 80a5d0a:	4675      	movcs	r5, lr
 80a5d0c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a5d10:	085b      	lsrs	r3, r3, #1
 80a5d12:	ea4f 0232 	mov.w	r2, r2, rrx
 80a5d16:	ebb6 0e02 	subs.w	lr, r6, r2
 80a5d1a:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a5d1e:	bf22      	ittt	cs
 80a5d20:	1ab6      	subcs	r6, r6, r2
 80a5d22:	4675      	movcs	r5, lr
 80a5d24:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a5d28:	085b      	lsrs	r3, r3, #1
 80a5d2a:	ea4f 0232 	mov.w	r2, r2, rrx
 80a5d2e:	ebb6 0e02 	subs.w	lr, r6, r2
 80a5d32:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a5d36:	bf22      	ittt	cs
 80a5d38:	1ab6      	subcs	r6, r6, r2
 80a5d3a:	4675      	movcs	r5, lr
 80a5d3c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a5d40:	ea55 0e06 	orrs.w	lr, r5, r6
 80a5d44:	d018      	beq.n	80a5d78 <__aeabi_ddiv+0x114>
 80a5d46:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a5d4a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a5d4e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a5d52:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a5d56:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a5d5a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a5d5e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a5d62:	d1c0      	bne.n	80a5ce6 <__aeabi_ddiv+0x82>
 80a5d64:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a5d68:	d10b      	bne.n	80a5d82 <__aeabi_ddiv+0x11e>
 80a5d6a:	ea41 0100 	orr.w	r1, r1, r0
 80a5d6e:	f04f 0000 	mov.w	r0, #0
 80a5d72:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a5d76:	e7b6      	b.n	80a5ce6 <__aeabi_ddiv+0x82>
 80a5d78:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a5d7c:	bf04      	itt	eq
 80a5d7e:	4301      	orreq	r1, r0
 80a5d80:	2000      	moveq	r0, #0
 80a5d82:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a5d86:	bf88      	it	hi
 80a5d88:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a5d8c:	f63f aeaf 	bhi.w	80a5aee <__aeabi_dmul+0xde>
 80a5d90:	ebb5 0c03 	subs.w	ip, r5, r3
 80a5d94:	bf04      	itt	eq
 80a5d96:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a5d9a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a5d9e:	f150 0000 	adcs.w	r0, r0, #0
 80a5da2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a5da6:	bd70      	pop	{r4, r5, r6, pc}
 80a5da8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a5dac:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a5db0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a5db4:	bfc2      	ittt	gt
 80a5db6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a5dba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a5dbe:	bd70      	popgt	{r4, r5, r6, pc}
 80a5dc0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a5dc4:	f04f 0e00 	mov.w	lr, #0
 80a5dc8:	3c01      	subs	r4, #1
 80a5dca:	e690      	b.n	80a5aee <__aeabi_dmul+0xde>
 80a5dcc:	ea45 0e06 	orr.w	lr, r5, r6
 80a5dd0:	e68d      	b.n	80a5aee <__aeabi_dmul+0xde>
 80a5dd2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a5dd6:	ea94 0f0c 	teq	r4, ip
 80a5dda:	bf08      	it	eq
 80a5ddc:	ea95 0f0c 	teqeq	r5, ip
 80a5de0:	f43f af3b 	beq.w	80a5c5a <__aeabi_dmul+0x24a>
 80a5de4:	ea94 0f0c 	teq	r4, ip
 80a5de8:	d10a      	bne.n	80a5e00 <__aeabi_ddiv+0x19c>
 80a5dea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a5dee:	f47f af34 	bne.w	80a5c5a <__aeabi_dmul+0x24a>
 80a5df2:	ea95 0f0c 	teq	r5, ip
 80a5df6:	f47f af25 	bne.w	80a5c44 <__aeabi_dmul+0x234>
 80a5dfa:	4610      	mov	r0, r2
 80a5dfc:	4619      	mov	r1, r3
 80a5dfe:	e72c      	b.n	80a5c5a <__aeabi_dmul+0x24a>
 80a5e00:	ea95 0f0c 	teq	r5, ip
 80a5e04:	d106      	bne.n	80a5e14 <__aeabi_ddiv+0x1b0>
 80a5e06:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a5e0a:	f43f aefd 	beq.w	80a5c08 <__aeabi_dmul+0x1f8>
 80a5e0e:	4610      	mov	r0, r2
 80a5e10:	4619      	mov	r1, r3
 80a5e12:	e722      	b.n	80a5c5a <__aeabi_dmul+0x24a>
 80a5e14:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a5e18:	bf18      	it	ne
 80a5e1a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a5e1e:	f47f aec5 	bne.w	80a5bac <__aeabi_dmul+0x19c>
 80a5e22:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a5e26:	f47f af0d 	bne.w	80a5c44 <__aeabi_dmul+0x234>
 80a5e2a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a5e2e:	f47f aeeb 	bne.w	80a5c08 <__aeabi_dmul+0x1f8>
 80a5e32:	e712      	b.n	80a5c5a <__aeabi_dmul+0x24a>

080a5e34 <__gedf2>:
 80a5e34:	f04f 3cff 	mov.w	ip, #4294967295
 80a5e38:	e006      	b.n	80a5e48 <__cmpdf2+0x4>
 80a5e3a:	bf00      	nop

080a5e3c <__ledf2>:
 80a5e3c:	f04f 0c01 	mov.w	ip, #1
 80a5e40:	e002      	b.n	80a5e48 <__cmpdf2+0x4>
 80a5e42:	bf00      	nop

080a5e44 <__cmpdf2>:
 80a5e44:	f04f 0c01 	mov.w	ip, #1
 80a5e48:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a5e4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a5e50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a5e54:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a5e58:	bf18      	it	ne
 80a5e5a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80a5e5e:	d01b      	beq.n	80a5e98 <__cmpdf2+0x54>
 80a5e60:	b001      	add	sp, #4
 80a5e62:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80a5e66:	bf0c      	ite	eq
 80a5e68:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80a5e6c:	ea91 0f03 	teqne	r1, r3
 80a5e70:	bf02      	ittt	eq
 80a5e72:	ea90 0f02 	teqeq	r0, r2
 80a5e76:	2000      	moveq	r0, #0
 80a5e78:	4770      	bxeq	lr
 80a5e7a:	f110 0f00 	cmn.w	r0, #0
 80a5e7e:	ea91 0f03 	teq	r1, r3
 80a5e82:	bf58      	it	pl
 80a5e84:	4299      	cmppl	r1, r3
 80a5e86:	bf08      	it	eq
 80a5e88:	4290      	cmpeq	r0, r2
 80a5e8a:	bf2c      	ite	cs
 80a5e8c:	17d8      	asrcs	r0, r3, #31
 80a5e8e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80a5e92:	f040 0001 	orr.w	r0, r0, #1
 80a5e96:	4770      	bx	lr
 80a5e98:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a5e9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a5ea0:	d102      	bne.n	80a5ea8 <__cmpdf2+0x64>
 80a5ea2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a5ea6:	d107      	bne.n	80a5eb8 <__cmpdf2+0x74>
 80a5ea8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a5eac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a5eb0:	d1d6      	bne.n	80a5e60 <__cmpdf2+0x1c>
 80a5eb2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a5eb6:	d0d3      	beq.n	80a5e60 <__cmpdf2+0x1c>
 80a5eb8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a5ebc:	4770      	bx	lr
 80a5ebe:	bf00      	nop

080a5ec0 <__aeabi_cdrcmple>:
 80a5ec0:	4684      	mov	ip, r0
 80a5ec2:	4610      	mov	r0, r2
 80a5ec4:	4662      	mov	r2, ip
 80a5ec6:	468c      	mov	ip, r1
 80a5ec8:	4619      	mov	r1, r3
 80a5eca:	4663      	mov	r3, ip
 80a5ecc:	e000      	b.n	80a5ed0 <__aeabi_cdcmpeq>
 80a5ece:	bf00      	nop

080a5ed0 <__aeabi_cdcmpeq>:
 80a5ed0:	b501      	push	{r0, lr}
 80a5ed2:	f7ff ffb7 	bl	80a5e44 <__cmpdf2>
 80a5ed6:	2800      	cmp	r0, #0
 80a5ed8:	bf48      	it	mi
 80a5eda:	f110 0f00 	cmnmi.w	r0, #0
 80a5ede:	bd01      	pop	{r0, pc}

080a5ee0 <__aeabi_dcmpeq>:
 80a5ee0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a5ee4:	f7ff fff4 	bl	80a5ed0 <__aeabi_cdcmpeq>
 80a5ee8:	bf0c      	ite	eq
 80a5eea:	2001      	moveq	r0, #1
 80a5eec:	2000      	movne	r0, #0
 80a5eee:	f85d fb08 	ldr.w	pc, [sp], #8
 80a5ef2:	bf00      	nop

080a5ef4 <__aeabi_dcmplt>:
 80a5ef4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a5ef8:	f7ff ffea 	bl	80a5ed0 <__aeabi_cdcmpeq>
 80a5efc:	bf34      	ite	cc
 80a5efe:	2001      	movcc	r0, #1
 80a5f00:	2000      	movcs	r0, #0
 80a5f02:	f85d fb08 	ldr.w	pc, [sp], #8
 80a5f06:	bf00      	nop

080a5f08 <__aeabi_dcmple>:
 80a5f08:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a5f0c:	f7ff ffe0 	bl	80a5ed0 <__aeabi_cdcmpeq>
 80a5f10:	bf94      	ite	ls
 80a5f12:	2001      	movls	r0, #1
 80a5f14:	2000      	movhi	r0, #0
 80a5f16:	f85d fb08 	ldr.w	pc, [sp], #8
 80a5f1a:	bf00      	nop

080a5f1c <__aeabi_dcmpge>:
 80a5f1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a5f20:	f7ff ffce 	bl	80a5ec0 <__aeabi_cdrcmple>
 80a5f24:	bf94      	ite	ls
 80a5f26:	2001      	movls	r0, #1
 80a5f28:	2000      	movhi	r0, #0
 80a5f2a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a5f2e:	bf00      	nop

080a5f30 <__aeabi_dcmpgt>:
 80a5f30:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a5f34:	f7ff ffc4 	bl	80a5ec0 <__aeabi_cdrcmple>
 80a5f38:	bf34      	ite	cc
 80a5f3a:	2001      	movcc	r0, #1
 80a5f3c:	2000      	movcs	r0, #0
 80a5f3e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a5f42:	bf00      	nop

080a5f44 <__aeabi_dcmpun>:
 80a5f44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a5f48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a5f4c:	d102      	bne.n	80a5f54 <__aeabi_dcmpun+0x10>
 80a5f4e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a5f52:	d10a      	bne.n	80a5f6a <__aeabi_dcmpun+0x26>
 80a5f54:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a5f58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a5f5c:	d102      	bne.n	80a5f64 <__aeabi_dcmpun+0x20>
 80a5f5e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a5f62:	d102      	bne.n	80a5f6a <__aeabi_dcmpun+0x26>
 80a5f64:	f04f 0000 	mov.w	r0, #0
 80a5f68:	4770      	bx	lr
 80a5f6a:	f04f 0001 	mov.w	r0, #1
 80a5f6e:	4770      	bx	lr

080a5f70 <__aeabi_d2iz>:
 80a5f70:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a5f74:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a5f78:	d215      	bcs.n	80a5fa6 <__aeabi_d2iz+0x36>
 80a5f7a:	d511      	bpl.n	80a5fa0 <__aeabi_d2iz+0x30>
 80a5f7c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a5f80:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a5f84:	d912      	bls.n	80a5fac <__aeabi_d2iz+0x3c>
 80a5f86:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a5f8a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a5f8e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a5f92:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a5f96:	fa23 f002 	lsr.w	r0, r3, r2
 80a5f9a:	bf18      	it	ne
 80a5f9c:	4240      	negne	r0, r0
 80a5f9e:	4770      	bx	lr
 80a5fa0:	f04f 0000 	mov.w	r0, #0
 80a5fa4:	4770      	bx	lr
 80a5fa6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a5faa:	d105      	bne.n	80a5fb8 <__aeabi_d2iz+0x48>
 80a5fac:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80a5fb0:	bf08      	it	eq
 80a5fb2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a5fb6:	4770      	bx	lr
 80a5fb8:	f04f 0000 	mov.w	r0, #0
 80a5fbc:	4770      	bx	lr
 80a5fbe:	bf00      	nop

080a5fc0 <__aeabi_d2uiz>:
 80a5fc0:	004a      	lsls	r2, r1, #1
 80a5fc2:	d211      	bcs.n	80a5fe8 <__aeabi_d2uiz+0x28>
 80a5fc4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a5fc8:	d211      	bcs.n	80a5fee <__aeabi_d2uiz+0x2e>
 80a5fca:	d50d      	bpl.n	80a5fe8 <__aeabi_d2uiz+0x28>
 80a5fcc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a5fd0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a5fd4:	d40e      	bmi.n	80a5ff4 <__aeabi_d2uiz+0x34>
 80a5fd6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a5fda:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a5fde:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a5fe2:	fa23 f002 	lsr.w	r0, r3, r2
 80a5fe6:	4770      	bx	lr
 80a5fe8:	f04f 0000 	mov.w	r0, #0
 80a5fec:	4770      	bx	lr
 80a5fee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a5ff2:	d102      	bne.n	80a5ffa <__aeabi_d2uiz+0x3a>
 80a5ff4:	f04f 30ff 	mov.w	r0, #4294967295
 80a5ff8:	4770      	bx	lr
 80a5ffa:	f04f 0000 	mov.w	r0, #0
 80a5ffe:	4770      	bx	lr

080a6000 <__aeabi_d2f>:
 80a6000:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a6004:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80a6008:	bf24      	itt	cs
 80a600a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80a600e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80a6012:	d90d      	bls.n	80a6030 <__aeabi_d2f+0x30>
 80a6014:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a6018:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80a601c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80a6020:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80a6024:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80a6028:	bf08      	it	eq
 80a602a:	f020 0001 	biceq.w	r0, r0, #1
 80a602e:	4770      	bx	lr
 80a6030:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80a6034:	d121      	bne.n	80a607a <__aeabi_d2f+0x7a>
 80a6036:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80a603a:	bfbc      	itt	lt
 80a603c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80a6040:	4770      	bxlt	lr
 80a6042:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a6046:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80a604a:	f1c2 0218 	rsb	r2, r2, #24
 80a604e:	f1c2 0c20 	rsb	ip, r2, #32
 80a6052:	fa10 f30c 	lsls.w	r3, r0, ip
 80a6056:	fa20 f002 	lsr.w	r0, r0, r2
 80a605a:	bf18      	it	ne
 80a605c:	f040 0001 	orrne.w	r0, r0, #1
 80a6060:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a6064:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80a6068:	fa03 fc0c 	lsl.w	ip, r3, ip
 80a606c:	ea40 000c 	orr.w	r0, r0, ip
 80a6070:	fa23 f302 	lsr.w	r3, r3, r2
 80a6074:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80a6078:	e7cc      	b.n	80a6014 <__aeabi_d2f+0x14>
 80a607a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80a607e:	d107      	bne.n	80a6090 <__aeabi_d2f+0x90>
 80a6080:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80a6084:	bf1e      	ittt	ne
 80a6086:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80a608a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80a608e:	4770      	bxne	lr
 80a6090:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80a6094:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a6098:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a609c:	4770      	bx	lr
 80a609e:	bf00      	nop

080a60a0 <__aeabi_frsub>:
 80a60a0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80a60a4:	e002      	b.n	80a60ac <__addsf3>
 80a60a6:	bf00      	nop

080a60a8 <__aeabi_fsub>:
 80a60a8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080a60ac <__addsf3>:
 80a60ac:	0042      	lsls	r2, r0, #1
 80a60ae:	bf1f      	itttt	ne
 80a60b0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80a60b4:	ea92 0f03 	teqne	r2, r3
 80a60b8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80a60bc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a60c0:	d06a      	beq.n	80a6198 <__addsf3+0xec>
 80a60c2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80a60c6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80a60ca:	bfc1      	itttt	gt
 80a60cc:	18d2      	addgt	r2, r2, r3
 80a60ce:	4041      	eorgt	r1, r0
 80a60d0:	4048      	eorgt	r0, r1
 80a60d2:	4041      	eorgt	r1, r0
 80a60d4:	bfb8      	it	lt
 80a60d6:	425b      	neglt	r3, r3
 80a60d8:	2b19      	cmp	r3, #25
 80a60da:	bf88      	it	hi
 80a60dc:	4770      	bxhi	lr
 80a60de:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a60e2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a60e6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80a60ea:	bf18      	it	ne
 80a60ec:	4240      	negne	r0, r0
 80a60ee:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a60f2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80a60f6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80a60fa:	bf18      	it	ne
 80a60fc:	4249      	negne	r1, r1
 80a60fe:	ea92 0f03 	teq	r2, r3
 80a6102:	d03f      	beq.n	80a6184 <__addsf3+0xd8>
 80a6104:	f1a2 0201 	sub.w	r2, r2, #1
 80a6108:	fa41 fc03 	asr.w	ip, r1, r3
 80a610c:	eb10 000c 	adds.w	r0, r0, ip
 80a6110:	f1c3 0320 	rsb	r3, r3, #32
 80a6114:	fa01 f103 	lsl.w	r1, r1, r3
 80a6118:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a611c:	d502      	bpl.n	80a6124 <__addsf3+0x78>
 80a611e:	4249      	negs	r1, r1
 80a6120:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80a6124:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a6128:	d313      	bcc.n	80a6152 <__addsf3+0xa6>
 80a612a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80a612e:	d306      	bcc.n	80a613e <__addsf3+0x92>
 80a6130:	0840      	lsrs	r0, r0, #1
 80a6132:	ea4f 0131 	mov.w	r1, r1, rrx
 80a6136:	f102 0201 	add.w	r2, r2, #1
 80a613a:	2afe      	cmp	r2, #254	; 0xfe
 80a613c:	d251      	bcs.n	80a61e2 <__addsf3+0x136>
 80a613e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80a6142:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a6146:	bf08      	it	eq
 80a6148:	f020 0001 	biceq.w	r0, r0, #1
 80a614c:	ea40 0003 	orr.w	r0, r0, r3
 80a6150:	4770      	bx	lr
 80a6152:	0049      	lsls	r1, r1, #1
 80a6154:	eb40 0000 	adc.w	r0, r0, r0
 80a6158:	3a01      	subs	r2, #1
 80a615a:	bf28      	it	cs
 80a615c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80a6160:	d2ed      	bcs.n	80a613e <__addsf3+0x92>
 80a6162:	fab0 fc80 	clz	ip, r0
 80a6166:	f1ac 0c08 	sub.w	ip, ip, #8
 80a616a:	ebb2 020c 	subs.w	r2, r2, ip
 80a616e:	fa00 f00c 	lsl.w	r0, r0, ip
 80a6172:	bfaa      	itet	ge
 80a6174:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80a6178:	4252      	neglt	r2, r2
 80a617a:	4318      	orrge	r0, r3
 80a617c:	bfbc      	itt	lt
 80a617e:	40d0      	lsrlt	r0, r2
 80a6180:	4318      	orrlt	r0, r3
 80a6182:	4770      	bx	lr
 80a6184:	f092 0f00 	teq	r2, #0
 80a6188:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80a618c:	bf06      	itte	eq
 80a618e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80a6192:	3201      	addeq	r2, #1
 80a6194:	3b01      	subne	r3, #1
 80a6196:	e7b5      	b.n	80a6104 <__addsf3+0x58>
 80a6198:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a619c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a61a0:	bf18      	it	ne
 80a61a2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a61a6:	d021      	beq.n	80a61ec <__addsf3+0x140>
 80a61a8:	ea92 0f03 	teq	r2, r3
 80a61ac:	d004      	beq.n	80a61b8 <__addsf3+0x10c>
 80a61ae:	f092 0f00 	teq	r2, #0
 80a61b2:	bf08      	it	eq
 80a61b4:	4608      	moveq	r0, r1
 80a61b6:	4770      	bx	lr
 80a61b8:	ea90 0f01 	teq	r0, r1
 80a61bc:	bf1c      	itt	ne
 80a61be:	2000      	movne	r0, #0
 80a61c0:	4770      	bxne	lr
 80a61c2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80a61c6:	d104      	bne.n	80a61d2 <__addsf3+0x126>
 80a61c8:	0040      	lsls	r0, r0, #1
 80a61ca:	bf28      	it	cs
 80a61cc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80a61d0:	4770      	bx	lr
 80a61d2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80a61d6:	bf3c      	itt	cc
 80a61d8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80a61dc:	4770      	bxcc	lr
 80a61de:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a61e2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80a61e6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a61ea:	4770      	bx	lr
 80a61ec:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80a61f0:	bf16      	itet	ne
 80a61f2:	4608      	movne	r0, r1
 80a61f4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80a61f8:	4601      	movne	r1, r0
 80a61fa:	0242      	lsls	r2, r0, #9
 80a61fc:	bf06      	itte	eq
 80a61fe:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80a6202:	ea90 0f01 	teqeq	r0, r1
 80a6206:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80a620a:	4770      	bx	lr

080a620c <__aeabi_ui2f>:
 80a620c:	f04f 0300 	mov.w	r3, #0
 80a6210:	e004      	b.n	80a621c <__aeabi_i2f+0x8>
 80a6212:	bf00      	nop

080a6214 <__aeabi_i2f>:
 80a6214:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80a6218:	bf48      	it	mi
 80a621a:	4240      	negmi	r0, r0
 80a621c:	ea5f 0c00 	movs.w	ip, r0
 80a6220:	bf08      	it	eq
 80a6222:	4770      	bxeq	lr
 80a6224:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80a6228:	4601      	mov	r1, r0
 80a622a:	f04f 0000 	mov.w	r0, #0
 80a622e:	e01c      	b.n	80a626a <__aeabi_l2f+0x2a>

080a6230 <__aeabi_ul2f>:
 80a6230:	ea50 0201 	orrs.w	r2, r0, r1
 80a6234:	bf08      	it	eq
 80a6236:	4770      	bxeq	lr
 80a6238:	f04f 0300 	mov.w	r3, #0
 80a623c:	e00a      	b.n	80a6254 <__aeabi_l2f+0x14>
 80a623e:	bf00      	nop

080a6240 <__aeabi_l2f>:
 80a6240:	ea50 0201 	orrs.w	r2, r0, r1
 80a6244:	bf08      	it	eq
 80a6246:	4770      	bxeq	lr
 80a6248:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80a624c:	d502      	bpl.n	80a6254 <__aeabi_l2f+0x14>
 80a624e:	4240      	negs	r0, r0
 80a6250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a6254:	ea5f 0c01 	movs.w	ip, r1
 80a6258:	bf02      	ittt	eq
 80a625a:	4684      	moveq	ip, r0
 80a625c:	4601      	moveq	r1, r0
 80a625e:	2000      	moveq	r0, #0
 80a6260:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80a6264:	bf08      	it	eq
 80a6266:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80a626a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80a626e:	fabc f28c 	clz	r2, ip
 80a6272:	3a08      	subs	r2, #8
 80a6274:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80a6278:	db10      	blt.n	80a629c <__aeabi_l2f+0x5c>
 80a627a:	fa01 fc02 	lsl.w	ip, r1, r2
 80a627e:	4463      	add	r3, ip
 80a6280:	fa00 fc02 	lsl.w	ip, r0, r2
 80a6284:	f1c2 0220 	rsb	r2, r2, #32
 80a6288:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a628c:	fa20 f202 	lsr.w	r2, r0, r2
 80a6290:	eb43 0002 	adc.w	r0, r3, r2
 80a6294:	bf08      	it	eq
 80a6296:	f020 0001 	biceq.w	r0, r0, #1
 80a629a:	4770      	bx	lr
 80a629c:	f102 0220 	add.w	r2, r2, #32
 80a62a0:	fa01 fc02 	lsl.w	ip, r1, r2
 80a62a4:	f1c2 0220 	rsb	r2, r2, #32
 80a62a8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80a62ac:	fa21 f202 	lsr.w	r2, r1, r2
 80a62b0:	eb43 0002 	adc.w	r0, r3, r2
 80a62b4:	bf08      	it	eq
 80a62b6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a62ba:	4770      	bx	lr

080a62bc <__aeabi_fmul>:
 80a62bc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a62c0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a62c4:	bf1e      	ittt	ne
 80a62c6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a62ca:	ea92 0f0c 	teqne	r2, ip
 80a62ce:	ea93 0f0c 	teqne	r3, ip
 80a62d2:	d06f      	beq.n	80a63b4 <__aeabi_fmul+0xf8>
 80a62d4:	441a      	add	r2, r3
 80a62d6:	ea80 0c01 	eor.w	ip, r0, r1
 80a62da:	0240      	lsls	r0, r0, #9
 80a62dc:	bf18      	it	ne
 80a62de:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80a62e2:	d01e      	beq.n	80a6322 <__aeabi_fmul+0x66>
 80a62e4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80a62e8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80a62ec:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80a62f0:	fba0 3101 	umull	r3, r1, r0, r1
 80a62f4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a62f8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80a62fc:	bf3e      	ittt	cc
 80a62fe:	0049      	lslcc	r1, r1, #1
 80a6300:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80a6304:	005b      	lslcc	r3, r3, #1
 80a6306:	ea40 0001 	orr.w	r0, r0, r1
 80a630a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80a630e:	2afd      	cmp	r2, #253	; 0xfd
 80a6310:	d81d      	bhi.n	80a634e <__aeabi_fmul+0x92>
 80a6312:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a6316:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a631a:	bf08      	it	eq
 80a631c:	f020 0001 	biceq.w	r0, r0, #1
 80a6320:	4770      	bx	lr
 80a6322:	f090 0f00 	teq	r0, #0
 80a6326:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a632a:	bf08      	it	eq
 80a632c:	0249      	lsleq	r1, r1, #9
 80a632e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a6332:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80a6336:	3a7f      	subs	r2, #127	; 0x7f
 80a6338:	bfc2      	ittt	gt
 80a633a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a633e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a6342:	4770      	bxgt	lr
 80a6344:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a6348:	f04f 0300 	mov.w	r3, #0
 80a634c:	3a01      	subs	r2, #1
 80a634e:	dc5d      	bgt.n	80a640c <__aeabi_fmul+0x150>
 80a6350:	f112 0f19 	cmn.w	r2, #25
 80a6354:	bfdc      	itt	le
 80a6356:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80a635a:	4770      	bxle	lr
 80a635c:	f1c2 0200 	rsb	r2, r2, #0
 80a6360:	0041      	lsls	r1, r0, #1
 80a6362:	fa21 f102 	lsr.w	r1, r1, r2
 80a6366:	f1c2 0220 	rsb	r2, r2, #32
 80a636a:	fa00 fc02 	lsl.w	ip, r0, r2
 80a636e:	ea5f 0031 	movs.w	r0, r1, rrx
 80a6372:	f140 0000 	adc.w	r0, r0, #0
 80a6376:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80a637a:	bf08      	it	eq
 80a637c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a6380:	4770      	bx	lr
 80a6382:	f092 0f00 	teq	r2, #0
 80a6386:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a638a:	bf02      	ittt	eq
 80a638c:	0040      	lsleq	r0, r0, #1
 80a638e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a6392:	3a01      	subeq	r2, #1
 80a6394:	d0f9      	beq.n	80a638a <__aeabi_fmul+0xce>
 80a6396:	ea40 000c 	orr.w	r0, r0, ip
 80a639a:	f093 0f00 	teq	r3, #0
 80a639e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a63a2:	bf02      	ittt	eq
 80a63a4:	0049      	lsleq	r1, r1, #1
 80a63a6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a63aa:	3b01      	subeq	r3, #1
 80a63ac:	d0f9      	beq.n	80a63a2 <__aeabi_fmul+0xe6>
 80a63ae:	ea41 010c 	orr.w	r1, r1, ip
 80a63b2:	e78f      	b.n	80a62d4 <__aeabi_fmul+0x18>
 80a63b4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a63b8:	ea92 0f0c 	teq	r2, ip
 80a63bc:	bf18      	it	ne
 80a63be:	ea93 0f0c 	teqne	r3, ip
 80a63c2:	d00a      	beq.n	80a63da <__aeabi_fmul+0x11e>
 80a63c4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a63c8:	bf18      	it	ne
 80a63ca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a63ce:	d1d8      	bne.n	80a6382 <__aeabi_fmul+0xc6>
 80a63d0:	ea80 0001 	eor.w	r0, r0, r1
 80a63d4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a63d8:	4770      	bx	lr
 80a63da:	f090 0f00 	teq	r0, #0
 80a63de:	bf17      	itett	ne
 80a63e0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80a63e4:	4608      	moveq	r0, r1
 80a63e6:	f091 0f00 	teqne	r1, #0
 80a63ea:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80a63ee:	d014      	beq.n	80a641a <__aeabi_fmul+0x15e>
 80a63f0:	ea92 0f0c 	teq	r2, ip
 80a63f4:	d101      	bne.n	80a63fa <__aeabi_fmul+0x13e>
 80a63f6:	0242      	lsls	r2, r0, #9
 80a63f8:	d10f      	bne.n	80a641a <__aeabi_fmul+0x15e>
 80a63fa:	ea93 0f0c 	teq	r3, ip
 80a63fe:	d103      	bne.n	80a6408 <__aeabi_fmul+0x14c>
 80a6400:	024b      	lsls	r3, r1, #9
 80a6402:	bf18      	it	ne
 80a6404:	4608      	movne	r0, r1
 80a6406:	d108      	bne.n	80a641a <__aeabi_fmul+0x15e>
 80a6408:	ea80 0001 	eor.w	r0, r0, r1
 80a640c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a6410:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a6414:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a6418:	4770      	bx	lr
 80a641a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a641e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80a6422:	4770      	bx	lr

080a6424 <__aeabi_fdiv>:
 80a6424:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a6428:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a642c:	bf1e      	ittt	ne
 80a642e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a6432:	ea92 0f0c 	teqne	r2, ip
 80a6436:	ea93 0f0c 	teqne	r3, ip
 80a643a:	d069      	beq.n	80a6510 <__aeabi_fdiv+0xec>
 80a643c:	eba2 0203 	sub.w	r2, r2, r3
 80a6440:	ea80 0c01 	eor.w	ip, r0, r1
 80a6444:	0249      	lsls	r1, r1, #9
 80a6446:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80a644a:	d037      	beq.n	80a64bc <__aeabi_fdiv+0x98>
 80a644c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80a6450:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80a6454:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80a6458:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a645c:	428b      	cmp	r3, r1
 80a645e:	bf38      	it	cc
 80a6460:	005b      	lslcc	r3, r3, #1
 80a6462:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80a6466:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80a646a:	428b      	cmp	r3, r1
 80a646c:	bf24      	itt	cs
 80a646e:	1a5b      	subcs	r3, r3, r1
 80a6470:	ea40 000c 	orrcs.w	r0, r0, ip
 80a6474:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80a6478:	bf24      	itt	cs
 80a647a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80a647e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a6482:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80a6486:	bf24      	itt	cs
 80a6488:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80a648c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a6490:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80a6494:	bf24      	itt	cs
 80a6496:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80a649a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a649e:	011b      	lsls	r3, r3, #4
 80a64a0:	bf18      	it	ne
 80a64a2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80a64a6:	d1e0      	bne.n	80a646a <__aeabi_fdiv+0x46>
 80a64a8:	2afd      	cmp	r2, #253	; 0xfd
 80a64aa:	f63f af50 	bhi.w	80a634e <__aeabi_fmul+0x92>
 80a64ae:	428b      	cmp	r3, r1
 80a64b0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a64b4:	bf08      	it	eq
 80a64b6:	f020 0001 	biceq.w	r0, r0, #1
 80a64ba:	4770      	bx	lr
 80a64bc:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a64c0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a64c4:	327f      	adds	r2, #127	; 0x7f
 80a64c6:	bfc2      	ittt	gt
 80a64c8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a64cc:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a64d0:	4770      	bxgt	lr
 80a64d2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a64d6:	f04f 0300 	mov.w	r3, #0
 80a64da:	3a01      	subs	r2, #1
 80a64dc:	e737      	b.n	80a634e <__aeabi_fmul+0x92>
 80a64de:	f092 0f00 	teq	r2, #0
 80a64e2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a64e6:	bf02      	ittt	eq
 80a64e8:	0040      	lsleq	r0, r0, #1
 80a64ea:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a64ee:	3a01      	subeq	r2, #1
 80a64f0:	d0f9      	beq.n	80a64e6 <__aeabi_fdiv+0xc2>
 80a64f2:	ea40 000c 	orr.w	r0, r0, ip
 80a64f6:	f093 0f00 	teq	r3, #0
 80a64fa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a64fe:	bf02      	ittt	eq
 80a6500:	0049      	lsleq	r1, r1, #1
 80a6502:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a6506:	3b01      	subeq	r3, #1
 80a6508:	d0f9      	beq.n	80a64fe <__aeabi_fdiv+0xda>
 80a650a:	ea41 010c 	orr.w	r1, r1, ip
 80a650e:	e795      	b.n	80a643c <__aeabi_fdiv+0x18>
 80a6510:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a6514:	ea92 0f0c 	teq	r2, ip
 80a6518:	d108      	bne.n	80a652c <__aeabi_fdiv+0x108>
 80a651a:	0242      	lsls	r2, r0, #9
 80a651c:	f47f af7d 	bne.w	80a641a <__aeabi_fmul+0x15e>
 80a6520:	ea93 0f0c 	teq	r3, ip
 80a6524:	f47f af70 	bne.w	80a6408 <__aeabi_fmul+0x14c>
 80a6528:	4608      	mov	r0, r1
 80a652a:	e776      	b.n	80a641a <__aeabi_fmul+0x15e>
 80a652c:	ea93 0f0c 	teq	r3, ip
 80a6530:	d104      	bne.n	80a653c <__aeabi_fdiv+0x118>
 80a6532:	024b      	lsls	r3, r1, #9
 80a6534:	f43f af4c 	beq.w	80a63d0 <__aeabi_fmul+0x114>
 80a6538:	4608      	mov	r0, r1
 80a653a:	e76e      	b.n	80a641a <__aeabi_fmul+0x15e>
 80a653c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a6540:	bf18      	it	ne
 80a6542:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a6546:	d1ca      	bne.n	80a64de <__aeabi_fdiv+0xba>
 80a6548:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80a654c:	f47f af5c 	bne.w	80a6408 <__aeabi_fmul+0x14c>
 80a6550:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80a6554:	f47f af3c 	bne.w	80a63d0 <__aeabi_fmul+0x114>
 80a6558:	e75f      	b.n	80a641a <__aeabi_fmul+0x15e>
 80a655a:	bf00      	nop

080a655c <__gesf2>:
 80a655c:	f04f 3cff 	mov.w	ip, #4294967295
 80a6560:	e006      	b.n	80a6570 <__cmpsf2+0x4>
 80a6562:	bf00      	nop

080a6564 <__lesf2>:
 80a6564:	f04f 0c01 	mov.w	ip, #1
 80a6568:	e002      	b.n	80a6570 <__cmpsf2+0x4>
 80a656a:	bf00      	nop

080a656c <__cmpsf2>:
 80a656c:	f04f 0c01 	mov.w	ip, #1
 80a6570:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a6574:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a6578:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a657c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a6580:	bf18      	it	ne
 80a6582:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a6586:	d011      	beq.n	80a65ac <__cmpsf2+0x40>
 80a6588:	b001      	add	sp, #4
 80a658a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80a658e:	bf18      	it	ne
 80a6590:	ea90 0f01 	teqne	r0, r1
 80a6594:	bf58      	it	pl
 80a6596:	ebb2 0003 	subspl.w	r0, r2, r3
 80a659a:	bf88      	it	hi
 80a659c:	17c8      	asrhi	r0, r1, #31
 80a659e:	bf38      	it	cc
 80a65a0:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80a65a4:	bf18      	it	ne
 80a65a6:	f040 0001 	orrne.w	r0, r0, #1
 80a65aa:	4770      	bx	lr
 80a65ac:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a65b0:	d102      	bne.n	80a65b8 <__cmpsf2+0x4c>
 80a65b2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80a65b6:	d105      	bne.n	80a65c4 <__cmpsf2+0x58>
 80a65b8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80a65bc:	d1e4      	bne.n	80a6588 <__cmpsf2+0x1c>
 80a65be:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80a65c2:	d0e1      	beq.n	80a6588 <__cmpsf2+0x1c>
 80a65c4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a65c8:	4770      	bx	lr
 80a65ca:	bf00      	nop

080a65cc <__aeabi_cfrcmple>:
 80a65cc:	4684      	mov	ip, r0
 80a65ce:	4608      	mov	r0, r1
 80a65d0:	4661      	mov	r1, ip
 80a65d2:	e7ff      	b.n	80a65d4 <__aeabi_cfcmpeq>

080a65d4 <__aeabi_cfcmpeq>:
 80a65d4:	b50f      	push	{r0, r1, r2, r3, lr}
 80a65d6:	f7ff ffc9 	bl	80a656c <__cmpsf2>
 80a65da:	2800      	cmp	r0, #0
 80a65dc:	bf48      	it	mi
 80a65de:	f110 0f00 	cmnmi.w	r0, #0
 80a65e2:	bd0f      	pop	{r0, r1, r2, r3, pc}

080a65e4 <__aeabi_fcmpeq>:
 80a65e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a65e8:	f7ff fff4 	bl	80a65d4 <__aeabi_cfcmpeq>
 80a65ec:	bf0c      	ite	eq
 80a65ee:	2001      	moveq	r0, #1
 80a65f0:	2000      	movne	r0, #0
 80a65f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80a65f6:	bf00      	nop

080a65f8 <__aeabi_fcmplt>:
 80a65f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a65fc:	f7ff ffea 	bl	80a65d4 <__aeabi_cfcmpeq>
 80a6600:	bf34      	ite	cc
 80a6602:	2001      	movcc	r0, #1
 80a6604:	2000      	movcs	r0, #0
 80a6606:	f85d fb08 	ldr.w	pc, [sp], #8
 80a660a:	bf00      	nop

080a660c <__aeabi_fcmple>:
 80a660c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a6610:	f7ff ffe0 	bl	80a65d4 <__aeabi_cfcmpeq>
 80a6614:	bf94      	ite	ls
 80a6616:	2001      	movls	r0, #1
 80a6618:	2000      	movhi	r0, #0
 80a661a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a661e:	bf00      	nop

080a6620 <__aeabi_fcmpge>:
 80a6620:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a6624:	f7ff ffd2 	bl	80a65cc <__aeabi_cfrcmple>
 80a6628:	bf94      	ite	ls
 80a662a:	2001      	movls	r0, #1
 80a662c:	2000      	movhi	r0, #0
 80a662e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a6632:	bf00      	nop

080a6634 <__aeabi_fcmpgt>:
 80a6634:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a6638:	f7ff ffc8 	bl	80a65cc <__aeabi_cfrcmple>
 80a663c:	bf34      	ite	cc
 80a663e:	2001      	movcc	r0, #1
 80a6640:	2000      	movcs	r0, #0
 80a6642:	f85d fb08 	ldr.w	pc, [sp], #8
 80a6646:	bf00      	nop

080a6648 <__aeabi_f2iz>:
 80a6648:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a664c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80a6650:	d30f      	bcc.n	80a6672 <__aeabi_f2iz+0x2a>
 80a6652:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80a6656:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80a665a:	d90d      	bls.n	80a6678 <__aeabi_f2iz+0x30>
 80a665c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80a6660:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a6664:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a6668:	fa23 f002 	lsr.w	r0, r3, r2
 80a666c:	bf18      	it	ne
 80a666e:	4240      	negne	r0, r0
 80a6670:	4770      	bx	lr
 80a6672:	f04f 0000 	mov.w	r0, #0
 80a6676:	4770      	bx	lr
 80a6678:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80a667c:	d101      	bne.n	80a6682 <__aeabi_f2iz+0x3a>
 80a667e:	0242      	lsls	r2, r0, #9
 80a6680:	d105      	bne.n	80a668e <__aeabi_f2iz+0x46>
 80a6682:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80a6686:	bf08      	it	eq
 80a6688:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a668c:	4770      	bx	lr
 80a668e:	f04f 0000 	mov.w	r0, #0
 80a6692:	4770      	bx	lr

080a6694 <__aeabi_uldivmod>:
 80a6694:	b953      	cbnz	r3, 80a66ac <__aeabi_uldivmod+0x18>
 80a6696:	b94a      	cbnz	r2, 80a66ac <__aeabi_uldivmod+0x18>
 80a6698:	2900      	cmp	r1, #0
 80a669a:	bf08      	it	eq
 80a669c:	2800      	cmpeq	r0, #0
 80a669e:	bf1c      	itt	ne
 80a66a0:	f04f 31ff 	movne.w	r1, #4294967295
 80a66a4:	f04f 30ff 	movne.w	r0, #4294967295
 80a66a8:	f000 b9c0 	b.w	80a6a2c <__aeabi_idiv0>
 80a66ac:	f1ad 0c08 	sub.w	ip, sp, #8
 80a66b0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80a66b4:	f000 f858 	bl	80a6768 <__udivmoddi4>
 80a66b8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a66bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a66c0:	b004      	add	sp, #16
 80a66c2:	4770      	bx	lr

080a66c4 <__aeabi_f2lz>:
 80a66c4:	b510      	push	{r4, lr}
 80a66c6:	2100      	movs	r1, #0
 80a66c8:	4604      	mov	r4, r0
 80a66ca:	f7ff ff95 	bl	80a65f8 <__aeabi_fcmplt>
 80a66ce:	b920      	cbnz	r0, 80a66da <__aeabi_f2lz+0x16>
 80a66d0:	4620      	mov	r0, r4
 80a66d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a66d6:	f000 b809 	b.w	80a66ec <__aeabi_f2ulz>
 80a66da:	f104 4000 	add.w	r0, r4, #2147483648	; 0x80000000
 80a66de:	f000 f805 	bl	80a66ec <__aeabi_f2ulz>
 80a66e2:	4240      	negs	r0, r0
 80a66e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a66e8:	bd10      	pop	{r4, pc}
 80a66ea:	bf00      	nop

080a66ec <__aeabi_f2ulz>:
 80a66ec:	b5d0      	push	{r4, r6, r7, lr}
 80a66ee:	f7ff f937 	bl	80a5960 <__aeabi_f2d>
 80a66f2:	2200      	movs	r2, #0
 80a66f4:	4b0b      	ldr	r3, [pc, #44]	; (80a6724 <__aeabi_f2ulz+0x38>)
 80a66f6:	4606      	mov	r6, r0
 80a66f8:	460f      	mov	r7, r1
 80a66fa:	f7ff f989 	bl	80a5a10 <__aeabi_dmul>
 80a66fe:	f7ff fc5f 	bl	80a5fc0 <__aeabi_d2uiz>
 80a6702:	4604      	mov	r4, r0
 80a6704:	f7ff f90a 	bl	80a591c <__aeabi_ui2d>
 80a6708:	2200      	movs	r2, #0
 80a670a:	4b07      	ldr	r3, [pc, #28]	; (80a6728 <__aeabi_f2ulz+0x3c>)
 80a670c:	f7ff f980 	bl	80a5a10 <__aeabi_dmul>
 80a6710:	4602      	mov	r2, r0
 80a6712:	460b      	mov	r3, r1
 80a6714:	4630      	mov	r0, r6
 80a6716:	4639      	mov	r1, r7
 80a6718:	f7fe ffc2 	bl	80a56a0 <__aeabi_dsub>
 80a671c:	f7ff fc50 	bl	80a5fc0 <__aeabi_d2uiz>
 80a6720:	4621      	mov	r1, r4
 80a6722:	bdd0      	pop	{r4, r6, r7, pc}
 80a6724:	3df00000 	.word	0x3df00000
 80a6728:	41f00000 	.word	0x41f00000

080a672c <__aeabi_d2ulz>:
 80a672c:	b5d0      	push	{r4, r6, r7, lr}
 80a672e:	2200      	movs	r2, #0
 80a6730:	4b0b      	ldr	r3, [pc, #44]	; (80a6760 <__aeabi_d2ulz+0x34>)
 80a6732:	4606      	mov	r6, r0
 80a6734:	460f      	mov	r7, r1
 80a6736:	f7ff f96b 	bl	80a5a10 <__aeabi_dmul>
 80a673a:	f7ff fc41 	bl	80a5fc0 <__aeabi_d2uiz>
 80a673e:	4604      	mov	r4, r0
 80a6740:	f7ff f8ec 	bl	80a591c <__aeabi_ui2d>
 80a6744:	2200      	movs	r2, #0
 80a6746:	4b07      	ldr	r3, [pc, #28]	; (80a6764 <__aeabi_d2ulz+0x38>)
 80a6748:	f7ff f962 	bl	80a5a10 <__aeabi_dmul>
 80a674c:	4602      	mov	r2, r0
 80a674e:	460b      	mov	r3, r1
 80a6750:	4630      	mov	r0, r6
 80a6752:	4639      	mov	r1, r7
 80a6754:	f7fe ffa4 	bl	80a56a0 <__aeabi_dsub>
 80a6758:	f7ff fc32 	bl	80a5fc0 <__aeabi_d2uiz>
 80a675c:	4621      	mov	r1, r4
 80a675e:	bdd0      	pop	{r4, r6, r7, pc}
 80a6760:	3df00000 	.word	0x3df00000
 80a6764:	41f00000 	.word	0x41f00000

080a6768 <__udivmoddi4>:
 80a6768:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a676c:	9e08      	ldr	r6, [sp, #32]
 80a676e:	460d      	mov	r5, r1
 80a6770:	4604      	mov	r4, r0
 80a6772:	468e      	mov	lr, r1
 80a6774:	2b00      	cmp	r3, #0
 80a6776:	f040 8083 	bne.w	80a6880 <__udivmoddi4+0x118>
 80a677a:	428a      	cmp	r2, r1
 80a677c:	4617      	mov	r7, r2
 80a677e:	d947      	bls.n	80a6810 <__udivmoddi4+0xa8>
 80a6780:	fab2 f382 	clz	r3, r2
 80a6784:	b14b      	cbz	r3, 80a679a <__udivmoddi4+0x32>
 80a6786:	f1c3 0120 	rsb	r1, r3, #32
 80a678a:	fa05 fe03 	lsl.w	lr, r5, r3
 80a678e:	fa20 f101 	lsr.w	r1, r0, r1
 80a6792:	409f      	lsls	r7, r3
 80a6794:	ea41 0e0e 	orr.w	lr, r1, lr
 80a6798:	409c      	lsls	r4, r3
 80a679a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80a679e:	fbbe fcf8 	udiv	ip, lr, r8
 80a67a2:	fa1f f987 	uxth.w	r9, r7
 80a67a6:	fb08 e21c 	mls	r2, r8, ip, lr
 80a67aa:	fb0c f009 	mul.w	r0, ip, r9
 80a67ae:	0c21      	lsrs	r1, r4, #16
 80a67b0:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 80a67b4:	4290      	cmp	r0, r2
 80a67b6:	d90a      	bls.n	80a67ce <__udivmoddi4+0x66>
 80a67b8:	18ba      	adds	r2, r7, r2
 80a67ba:	f10c 31ff 	add.w	r1, ip, #4294967295
 80a67be:	f080 8118 	bcs.w	80a69f2 <__udivmoddi4+0x28a>
 80a67c2:	4290      	cmp	r0, r2
 80a67c4:	f240 8115 	bls.w	80a69f2 <__udivmoddi4+0x28a>
 80a67c8:	f1ac 0c02 	sub.w	ip, ip, #2
 80a67cc:	443a      	add	r2, r7
 80a67ce:	1a12      	subs	r2, r2, r0
 80a67d0:	fbb2 f0f8 	udiv	r0, r2, r8
 80a67d4:	fb08 2210 	mls	r2, r8, r0, r2
 80a67d8:	fb00 f109 	mul.w	r1, r0, r9
 80a67dc:	b2a4      	uxth	r4, r4
 80a67de:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80a67e2:	42a1      	cmp	r1, r4
 80a67e4:	d909      	bls.n	80a67fa <__udivmoddi4+0x92>
 80a67e6:	193c      	adds	r4, r7, r4
 80a67e8:	f100 32ff 	add.w	r2, r0, #4294967295
 80a67ec:	f080 8103 	bcs.w	80a69f6 <__udivmoddi4+0x28e>
 80a67f0:	42a1      	cmp	r1, r4
 80a67f2:	f240 8100 	bls.w	80a69f6 <__udivmoddi4+0x28e>
 80a67f6:	3802      	subs	r0, #2
 80a67f8:	443c      	add	r4, r7
 80a67fa:	1a64      	subs	r4, r4, r1
 80a67fc:	2100      	movs	r1, #0
 80a67fe:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80a6802:	b11e      	cbz	r6, 80a680c <__udivmoddi4+0xa4>
 80a6804:	2200      	movs	r2, #0
 80a6806:	40dc      	lsrs	r4, r3
 80a6808:	e9c6 4200 	strd	r4, r2, [r6]
 80a680c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a6810:	b902      	cbnz	r2, 80a6814 <__udivmoddi4+0xac>
 80a6812:	deff      	udf	#255	; 0xff
 80a6814:	fab2 f382 	clz	r3, r2
 80a6818:	2b00      	cmp	r3, #0
 80a681a:	d14f      	bne.n	80a68bc <__udivmoddi4+0x154>
 80a681c:	1a8d      	subs	r5, r1, r2
 80a681e:	2101      	movs	r1, #1
 80a6820:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80a6824:	fa1f f882 	uxth.w	r8, r2
 80a6828:	fbb5 fcfe 	udiv	ip, r5, lr
 80a682c:	fb0e 551c 	mls	r5, lr, ip, r5
 80a6830:	fb08 f00c 	mul.w	r0, r8, ip
 80a6834:	0c22      	lsrs	r2, r4, #16
 80a6836:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 80a683a:	42a8      	cmp	r0, r5
 80a683c:	d907      	bls.n	80a684e <__udivmoddi4+0xe6>
 80a683e:	197d      	adds	r5, r7, r5
 80a6840:	f10c 32ff 	add.w	r2, ip, #4294967295
 80a6844:	d202      	bcs.n	80a684c <__udivmoddi4+0xe4>
 80a6846:	42a8      	cmp	r0, r5
 80a6848:	f200 80e9 	bhi.w	80a6a1e <__udivmoddi4+0x2b6>
 80a684c:	4694      	mov	ip, r2
 80a684e:	1a2d      	subs	r5, r5, r0
 80a6850:	fbb5 f0fe 	udiv	r0, r5, lr
 80a6854:	fb0e 5510 	mls	r5, lr, r0, r5
 80a6858:	fb08 f800 	mul.w	r8, r8, r0
 80a685c:	b2a4      	uxth	r4, r4
 80a685e:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80a6862:	45a0      	cmp	r8, r4
 80a6864:	d907      	bls.n	80a6876 <__udivmoddi4+0x10e>
 80a6866:	193c      	adds	r4, r7, r4
 80a6868:	f100 32ff 	add.w	r2, r0, #4294967295
 80a686c:	d202      	bcs.n	80a6874 <__udivmoddi4+0x10c>
 80a686e:	45a0      	cmp	r8, r4
 80a6870:	f200 80d9 	bhi.w	80a6a26 <__udivmoddi4+0x2be>
 80a6874:	4610      	mov	r0, r2
 80a6876:	eba4 0408 	sub.w	r4, r4, r8
 80a687a:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80a687e:	e7c0      	b.n	80a6802 <__udivmoddi4+0x9a>
 80a6880:	428b      	cmp	r3, r1
 80a6882:	d908      	bls.n	80a6896 <__udivmoddi4+0x12e>
 80a6884:	2e00      	cmp	r6, #0
 80a6886:	f000 80b1 	beq.w	80a69ec <__udivmoddi4+0x284>
 80a688a:	2100      	movs	r1, #0
 80a688c:	e9c6 0500 	strd	r0, r5, [r6]
 80a6890:	4608      	mov	r0, r1
 80a6892:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a6896:	fab3 f183 	clz	r1, r3
 80a689a:	2900      	cmp	r1, #0
 80a689c:	d14b      	bne.n	80a6936 <__udivmoddi4+0x1ce>
 80a689e:	42ab      	cmp	r3, r5
 80a68a0:	d302      	bcc.n	80a68a8 <__udivmoddi4+0x140>
 80a68a2:	4282      	cmp	r2, r0
 80a68a4:	f200 80b9 	bhi.w	80a6a1a <__udivmoddi4+0x2b2>
 80a68a8:	1a84      	subs	r4, r0, r2
 80a68aa:	eb65 0303 	sbc.w	r3, r5, r3
 80a68ae:	2001      	movs	r0, #1
 80a68b0:	469e      	mov	lr, r3
 80a68b2:	2e00      	cmp	r6, #0
 80a68b4:	d0aa      	beq.n	80a680c <__udivmoddi4+0xa4>
 80a68b6:	e9c6 4e00 	strd	r4, lr, [r6]
 80a68ba:	e7a7      	b.n	80a680c <__udivmoddi4+0xa4>
 80a68bc:	409f      	lsls	r7, r3
 80a68be:	f1c3 0220 	rsb	r2, r3, #32
 80a68c2:	40d1      	lsrs	r1, r2
 80a68c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80a68c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80a68cc:	fa1f f887 	uxth.w	r8, r7
 80a68d0:	fb0e 1110 	mls	r1, lr, r0, r1
 80a68d4:	fa24 f202 	lsr.w	r2, r4, r2
 80a68d8:	409d      	lsls	r5, r3
 80a68da:	fb00 fc08 	mul.w	ip, r0, r8
 80a68de:	432a      	orrs	r2, r5
 80a68e0:	0c15      	lsrs	r5, r2, #16
 80a68e2:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 80a68e6:	45ac      	cmp	ip, r5
 80a68e8:	fa04 f403 	lsl.w	r4, r4, r3
 80a68ec:	d909      	bls.n	80a6902 <__udivmoddi4+0x19a>
 80a68ee:	197d      	adds	r5, r7, r5
 80a68f0:	f100 31ff 	add.w	r1, r0, #4294967295
 80a68f4:	f080 808f 	bcs.w	80a6a16 <__udivmoddi4+0x2ae>
 80a68f8:	45ac      	cmp	ip, r5
 80a68fa:	f240 808c 	bls.w	80a6a16 <__udivmoddi4+0x2ae>
 80a68fe:	3802      	subs	r0, #2
 80a6900:	443d      	add	r5, r7
 80a6902:	eba5 050c 	sub.w	r5, r5, ip
 80a6906:	fbb5 f1fe 	udiv	r1, r5, lr
 80a690a:	fb0e 5c11 	mls	ip, lr, r1, r5
 80a690e:	fb01 f908 	mul.w	r9, r1, r8
 80a6912:	b295      	uxth	r5, r2
 80a6914:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80a6918:	45a9      	cmp	r9, r5
 80a691a:	d907      	bls.n	80a692c <__udivmoddi4+0x1c4>
 80a691c:	197d      	adds	r5, r7, r5
 80a691e:	f101 32ff 	add.w	r2, r1, #4294967295
 80a6922:	d274      	bcs.n	80a6a0e <__udivmoddi4+0x2a6>
 80a6924:	45a9      	cmp	r9, r5
 80a6926:	d972      	bls.n	80a6a0e <__udivmoddi4+0x2a6>
 80a6928:	3902      	subs	r1, #2
 80a692a:	443d      	add	r5, r7
 80a692c:	eba5 0509 	sub.w	r5, r5, r9
 80a6930:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80a6934:	e778      	b.n	80a6828 <__udivmoddi4+0xc0>
 80a6936:	f1c1 0720 	rsb	r7, r1, #32
 80a693a:	408b      	lsls	r3, r1
 80a693c:	fa22 fc07 	lsr.w	ip, r2, r7
 80a6940:	ea4c 0c03 	orr.w	ip, ip, r3
 80a6944:	fa25 f407 	lsr.w	r4, r5, r7
 80a6948:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80a694c:	fbb4 f9fe 	udiv	r9, r4, lr
 80a6950:	fa1f f88c 	uxth.w	r8, ip
 80a6954:	fb0e 4419 	mls	r4, lr, r9, r4
 80a6958:	fa20 f307 	lsr.w	r3, r0, r7
 80a695c:	fb09 fa08 	mul.w	sl, r9, r8
 80a6960:	408d      	lsls	r5, r1
 80a6962:	431d      	orrs	r5, r3
 80a6964:	0c2b      	lsrs	r3, r5, #16
 80a6966:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80a696a:	45a2      	cmp	sl, r4
 80a696c:	fa02 f201 	lsl.w	r2, r2, r1
 80a6970:	fa00 f301 	lsl.w	r3, r0, r1
 80a6974:	d909      	bls.n	80a698a <__udivmoddi4+0x222>
 80a6976:	eb1c 0404 	adds.w	r4, ip, r4
 80a697a:	f109 30ff 	add.w	r0, r9, #4294967295
 80a697e:	d248      	bcs.n	80a6a12 <__udivmoddi4+0x2aa>
 80a6980:	45a2      	cmp	sl, r4
 80a6982:	d946      	bls.n	80a6a12 <__udivmoddi4+0x2aa>
 80a6984:	f1a9 0902 	sub.w	r9, r9, #2
 80a6988:	4464      	add	r4, ip
 80a698a:	eba4 040a 	sub.w	r4, r4, sl
 80a698e:	fbb4 f0fe 	udiv	r0, r4, lr
 80a6992:	fb0e 4410 	mls	r4, lr, r0, r4
 80a6996:	fb00 fa08 	mul.w	sl, r0, r8
 80a699a:	b2ad      	uxth	r5, r5
 80a699c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80a69a0:	45a2      	cmp	sl, r4
 80a69a2:	d908      	bls.n	80a69b6 <__udivmoddi4+0x24e>
 80a69a4:	eb1c 0404 	adds.w	r4, ip, r4
 80a69a8:	f100 35ff 	add.w	r5, r0, #4294967295
 80a69ac:	d22d      	bcs.n	80a6a0a <__udivmoddi4+0x2a2>
 80a69ae:	45a2      	cmp	sl, r4
 80a69b0:	d92b      	bls.n	80a6a0a <__udivmoddi4+0x2a2>
 80a69b2:	3802      	subs	r0, #2
 80a69b4:	4464      	add	r4, ip
 80a69b6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80a69ba:	fba0 8902 	umull	r8, r9, r0, r2
 80a69be:	eba4 040a 	sub.w	r4, r4, sl
 80a69c2:	454c      	cmp	r4, r9
 80a69c4:	46c6      	mov	lr, r8
 80a69c6:	464d      	mov	r5, r9
 80a69c8:	d319      	bcc.n	80a69fe <__udivmoddi4+0x296>
 80a69ca:	d016      	beq.n	80a69fa <__udivmoddi4+0x292>
 80a69cc:	b15e      	cbz	r6, 80a69e6 <__udivmoddi4+0x27e>
 80a69ce:	ebb3 020e 	subs.w	r2, r3, lr
 80a69d2:	eb64 0405 	sbc.w	r4, r4, r5
 80a69d6:	fa04 f707 	lsl.w	r7, r4, r7
 80a69da:	fa22 f301 	lsr.w	r3, r2, r1
 80a69de:	431f      	orrs	r7, r3
 80a69e0:	40cc      	lsrs	r4, r1
 80a69e2:	e9c6 7400 	strd	r7, r4, [r6]
 80a69e6:	2100      	movs	r1, #0
 80a69e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a69ec:	4631      	mov	r1, r6
 80a69ee:	4630      	mov	r0, r6
 80a69f0:	e70c      	b.n	80a680c <__udivmoddi4+0xa4>
 80a69f2:	468c      	mov	ip, r1
 80a69f4:	e6eb      	b.n	80a67ce <__udivmoddi4+0x66>
 80a69f6:	4610      	mov	r0, r2
 80a69f8:	e6ff      	b.n	80a67fa <__udivmoddi4+0x92>
 80a69fa:	4543      	cmp	r3, r8
 80a69fc:	d2e6      	bcs.n	80a69cc <__udivmoddi4+0x264>
 80a69fe:	ebb8 0e02 	subs.w	lr, r8, r2
 80a6a02:	eb69 050c 	sbc.w	r5, r9, ip
 80a6a06:	3801      	subs	r0, #1
 80a6a08:	e7e0      	b.n	80a69cc <__udivmoddi4+0x264>
 80a6a0a:	4628      	mov	r0, r5
 80a6a0c:	e7d3      	b.n	80a69b6 <__udivmoddi4+0x24e>
 80a6a0e:	4611      	mov	r1, r2
 80a6a10:	e78c      	b.n	80a692c <__udivmoddi4+0x1c4>
 80a6a12:	4681      	mov	r9, r0
 80a6a14:	e7b9      	b.n	80a698a <__udivmoddi4+0x222>
 80a6a16:	4608      	mov	r0, r1
 80a6a18:	e773      	b.n	80a6902 <__udivmoddi4+0x19a>
 80a6a1a:	4608      	mov	r0, r1
 80a6a1c:	e749      	b.n	80a68b2 <__udivmoddi4+0x14a>
 80a6a1e:	f1ac 0c02 	sub.w	ip, ip, #2
 80a6a22:	443d      	add	r5, r7
 80a6a24:	e713      	b.n	80a684e <__udivmoddi4+0xe6>
 80a6a26:	3802      	subs	r0, #2
 80a6a28:	443c      	add	r4, r7
 80a6a2a:	e724      	b.n	80a6876 <__udivmoddi4+0x10e>

080a6a2c <__aeabi_idiv0>:
 80a6a2c:	4770      	bx	lr
 80a6a2e:	bf00      	nop

080a6a30 <asctime_r>:
 80a6a30:	b510      	push	{r4, lr}
 80a6a32:	460c      	mov	r4, r1
 80a6a34:	6941      	ldr	r1, [r0, #20]
 80a6a36:	b086      	sub	sp, #24
 80a6a38:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 80a6a3c:	6903      	ldr	r3, [r0, #16]
 80a6a3e:	6982      	ldr	r2, [r0, #24]
 80a6a40:	9104      	str	r1, [sp, #16]
 80a6a42:	6801      	ldr	r1, [r0, #0]
 80a6a44:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80a6a48:	9103      	str	r1, [sp, #12]
 80a6a4a:	6841      	ldr	r1, [r0, #4]
 80a6a4c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80a6a50:	9102      	str	r1, [sp, #8]
 80a6a52:	6881      	ldr	r1, [r0, #8]
 80a6a54:	9101      	str	r1, [sp, #4]
 80a6a56:	68c1      	ldr	r1, [r0, #12]
 80a6a58:	4620      	mov	r0, r4
 80a6a5a:	9100      	str	r1, [sp, #0]
 80a6a5c:	4904      	ldr	r1, [pc, #16]	; (80a6a70 <asctime_r+0x40>)
 80a6a5e:	440b      	add	r3, r1
 80a6a60:	4904      	ldr	r1, [pc, #16]	; (80a6a74 <asctime_r+0x44>)
 80a6a62:	440a      	add	r2, r1
 80a6a64:	4904      	ldr	r1, [pc, #16]	; (80a6a78 <asctime_r+0x48>)
 80a6a66:	f7fc ff8b 	bl	80a3980 <siprintf>
 80a6a6a:	4620      	mov	r0, r4
 80a6a6c:	b006      	add	sp, #24
 80a6a6e:	bd10      	pop	{r4, pc}
 80a6a70:	080aa72a 	.word	0x080aa72a
 80a6a74:	080aa715 	.word	0x080aa715
 80a6a78:	080aa6f5 	.word	0x080aa6f5

080a6a7c <atol>:
 80a6a7c:	220a      	movs	r2, #10
 80a6a7e:	2100      	movs	r1, #0
 80a6a80:	f001 bdc2 	b.w	80a8608 <strtol>

080a6a84 <__cxa_atexit>:
 80a6a84:	b510      	push	{r4, lr}
 80a6a86:	4604      	mov	r4, r0
 80a6a88:	4804      	ldr	r0, [pc, #16]	; (80a6a9c <__cxa_atexit+0x18>)
 80a6a8a:	4613      	mov	r3, r2
 80a6a8c:	b120      	cbz	r0, 80a6a98 <__cxa_atexit+0x14>
 80a6a8e:	460a      	mov	r2, r1
 80a6a90:	2002      	movs	r0, #2
 80a6a92:	4621      	mov	r1, r4
 80a6a94:	f3af 8000 	nop.w
 80a6a98:	bd10      	pop	{r4, pc}
 80a6a9a:	bf00      	nop
 80a6a9c:	00000000 	.word	0x00000000

080a6aa0 <localtime_r>:
 80a6aa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a6aa4:	460c      	mov	r4, r1
 80a6aa6:	4607      	mov	r7, r0
 80a6aa8:	f002 fc12 	bl	80a92d0 <__gettzinfo>
 80a6aac:	4621      	mov	r1, r4
 80a6aae:	4680      	mov	r8, r0
 80a6ab0:	4638      	mov	r0, r7
 80a6ab2:	f002 fc11 	bl	80a92d8 <gmtime_r>
 80a6ab6:	6943      	ldr	r3, [r0, #20]
 80a6ab8:	4604      	mov	r4, r0
 80a6aba:	079a      	lsls	r2, r3, #30
 80a6abc:	f203 766c 	addw	r6, r3, #1900	; 0x76c
 80a6ac0:	d105      	bne.n	80a6ace <localtime_r+0x2e>
 80a6ac2:	2264      	movs	r2, #100	; 0x64
 80a6ac4:	fb96 f3f2 	sdiv	r3, r6, r2
 80a6ac8:	fb02 6313 	mls	r3, r2, r3, r6
 80a6acc:	bb7b      	cbnz	r3, 80a6b2e <localtime_r+0x8e>
 80a6ace:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80a6ad2:	fb96 f5f3 	sdiv	r5, r6, r3
 80a6ad6:	fb03 6515 	mls	r5, r3, r5, r6
 80a6ada:	fab5 f585 	clz	r5, r5
 80a6ade:	096d      	lsrs	r5, r5, #5
 80a6ae0:	2230      	movs	r2, #48	; 0x30
 80a6ae2:	4b68      	ldr	r3, [pc, #416]	; (80a6c84 <localtime_r+0x1e4>)
 80a6ae4:	fb02 3505 	mla	r5, r2, r5, r3
 80a6ae8:	f001 fec6 	bl	80a8878 <__tz_lock>
 80a6aec:	f001 fed0 	bl	80a8890 <_tzset_unlocked>
 80a6af0:	4b65      	ldr	r3, [pc, #404]	; (80a6c88 <localtime_r+0x1e8>)
 80a6af2:	681b      	ldr	r3, [r3, #0]
 80a6af4:	b353      	cbz	r3, 80a6b4c <localtime_r+0xac>
 80a6af6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80a6afa:	42b3      	cmp	r3, r6
 80a6afc:	d119      	bne.n	80a6b32 <localtime_r+0x92>
 80a6afe:	e9d7 6700 	ldrd	r6, r7, [r7]
 80a6b02:	e9d8 2308 	ldrd	r2, r3, [r8, #32]
 80a6b06:	f8d8 1000 	ldr.w	r1, [r8]
 80a6b0a:	b9d1      	cbnz	r1, 80a6b42 <localtime_r+0xa2>
 80a6b0c:	4296      	cmp	r6, r2
 80a6b0e:	eb77 0303 	sbcs.w	r3, r7, r3
 80a6b12:	da23      	bge.n	80a6b5c <localtime_r+0xbc>
 80a6b14:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 80a6b18:	4296      	cmp	r6, r2
 80a6b1a:	eb77 0303 	sbcs.w	r3, r7, r3
 80a6b1e:	bfb4      	ite	lt
 80a6b20:	2301      	movlt	r3, #1
 80a6b22:	2300      	movge	r3, #0
 80a6b24:	6223      	str	r3, [r4, #32]
 80a6b26:	db1b      	blt.n	80a6b60 <localtime_r+0xc0>
 80a6b28:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
 80a6b2c:	e01a      	b.n	80a6b64 <localtime_r+0xc4>
 80a6b2e:	2501      	movs	r5, #1
 80a6b30:	e7d6      	b.n	80a6ae0 <localtime_r+0x40>
 80a6b32:	4630      	mov	r0, r6
 80a6b34:	f001 fdf8 	bl	80a8728 <__tzcalc_limits>
 80a6b38:	2800      	cmp	r0, #0
 80a6b3a:	d1e0      	bne.n	80a6afe <localtime_r+0x5e>
 80a6b3c:	f04f 33ff 	mov.w	r3, #4294967295
 80a6b40:	e004      	b.n	80a6b4c <localtime_r+0xac>
 80a6b42:	4296      	cmp	r6, r2
 80a6b44:	eb77 0303 	sbcs.w	r3, r7, r3
 80a6b48:	da02      	bge.n	80a6b50 <localtime_r+0xb0>
 80a6b4a:	2300      	movs	r3, #0
 80a6b4c:	6223      	str	r3, [r4, #32]
 80a6b4e:	e7eb      	b.n	80a6b28 <localtime_r+0x88>
 80a6b50:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 80a6b54:	4296      	cmp	r6, r2
 80a6b56:	eb77 0303 	sbcs.w	r3, r7, r3
 80a6b5a:	daf6      	bge.n	80a6b4a <localtime_r+0xaa>
 80a6b5c:	2301      	movs	r3, #1
 80a6b5e:	6223      	str	r3, [r4, #32]
 80a6b60:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
 80a6b64:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80a6b68:	fb91 f6f3 	sdiv	r6, r1, r3
 80a6b6c:	203c      	movs	r0, #60	; 0x3c
 80a6b6e:	fb03 1316 	mls	r3, r3, r6, r1
 80a6b72:	fb93 f2f0 	sdiv	r2, r3, r0
 80a6b76:	fb00 3012 	mls	r0, r0, r2, r3
 80a6b7a:	6861      	ldr	r1, [r4, #4]
 80a6b7c:	6823      	ldr	r3, [r4, #0]
 80a6b7e:	1a89      	subs	r1, r1, r2
 80a6b80:	68a2      	ldr	r2, [r4, #8]
 80a6b82:	1a1b      	subs	r3, r3, r0
 80a6b84:	1b92      	subs	r2, r2, r6
 80a6b86:	2b3b      	cmp	r3, #59	; 0x3b
 80a6b88:	6023      	str	r3, [r4, #0]
 80a6b8a:	6061      	str	r1, [r4, #4]
 80a6b8c:	60a2      	str	r2, [r4, #8]
 80a6b8e:	dd34      	ble.n	80a6bfa <localtime_r+0x15a>
 80a6b90:	3101      	adds	r1, #1
 80a6b92:	6061      	str	r1, [r4, #4]
 80a6b94:	3b3c      	subs	r3, #60	; 0x3c
 80a6b96:	6023      	str	r3, [r4, #0]
 80a6b98:	6863      	ldr	r3, [r4, #4]
 80a6b9a:	2b3b      	cmp	r3, #59	; 0x3b
 80a6b9c:	dd33      	ble.n	80a6c06 <localtime_r+0x166>
 80a6b9e:	3201      	adds	r2, #1
 80a6ba0:	60a2      	str	r2, [r4, #8]
 80a6ba2:	3b3c      	subs	r3, #60	; 0x3c
 80a6ba4:	6063      	str	r3, [r4, #4]
 80a6ba6:	68a3      	ldr	r3, [r4, #8]
 80a6ba8:	2b17      	cmp	r3, #23
 80a6baa:	dd32      	ble.n	80a6c12 <localtime_r+0x172>
 80a6bac:	69e2      	ldr	r2, [r4, #28]
 80a6bae:	3b18      	subs	r3, #24
 80a6bb0:	3201      	adds	r2, #1
 80a6bb2:	61e2      	str	r2, [r4, #28]
 80a6bb4:	69a2      	ldr	r2, [r4, #24]
 80a6bb6:	60a3      	str	r3, [r4, #8]
 80a6bb8:	3201      	adds	r2, #1
 80a6bba:	2a06      	cmp	r2, #6
 80a6bbc:	bfc8      	it	gt
 80a6bbe:	2200      	movgt	r2, #0
 80a6bc0:	61a2      	str	r2, [r4, #24]
 80a6bc2:	68e2      	ldr	r2, [r4, #12]
 80a6bc4:	6923      	ldr	r3, [r4, #16]
 80a6bc6:	3201      	adds	r2, #1
 80a6bc8:	60e2      	str	r2, [r4, #12]
 80a6bca:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 80a6bce:	428a      	cmp	r2, r1
 80a6bd0:	dd0e      	ble.n	80a6bf0 <localtime_r+0x150>
 80a6bd2:	2b0b      	cmp	r3, #11
 80a6bd4:	eba2 0201 	sub.w	r2, r2, r1
 80a6bd8:	60e2      	str	r2, [r4, #12]
 80a6bda:	f103 0201 	add.w	r2, r3, #1
 80a6bde:	bf05      	ittet	eq
 80a6be0:	2200      	moveq	r2, #0
 80a6be2:	6963      	ldreq	r3, [r4, #20]
 80a6be4:	6122      	strne	r2, [r4, #16]
 80a6be6:	3301      	addeq	r3, #1
 80a6be8:	bf02      	ittt	eq
 80a6bea:	6122      	streq	r2, [r4, #16]
 80a6bec:	6163      	streq	r3, [r4, #20]
 80a6bee:	61e2      	streq	r2, [r4, #28]
 80a6bf0:	f001 fe48 	bl	80a8884 <__tz_unlock>
 80a6bf4:	4620      	mov	r0, r4
 80a6bf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a6bfa:	2b00      	cmp	r3, #0
 80a6bfc:	dacc      	bge.n	80a6b98 <localtime_r+0xf8>
 80a6bfe:	3901      	subs	r1, #1
 80a6c00:	6061      	str	r1, [r4, #4]
 80a6c02:	333c      	adds	r3, #60	; 0x3c
 80a6c04:	e7c7      	b.n	80a6b96 <localtime_r+0xf6>
 80a6c06:	2b00      	cmp	r3, #0
 80a6c08:	dacd      	bge.n	80a6ba6 <localtime_r+0x106>
 80a6c0a:	3a01      	subs	r2, #1
 80a6c0c:	60a2      	str	r2, [r4, #8]
 80a6c0e:	333c      	adds	r3, #60	; 0x3c
 80a6c10:	e7c8      	b.n	80a6ba4 <localtime_r+0x104>
 80a6c12:	2b00      	cmp	r3, #0
 80a6c14:	daec      	bge.n	80a6bf0 <localtime_r+0x150>
 80a6c16:	69e2      	ldr	r2, [r4, #28]
 80a6c18:	3318      	adds	r3, #24
 80a6c1a:	3a01      	subs	r2, #1
 80a6c1c:	61e2      	str	r2, [r4, #28]
 80a6c1e:	69a2      	ldr	r2, [r4, #24]
 80a6c20:	60a3      	str	r3, [r4, #8]
 80a6c22:	3a01      	subs	r2, #1
 80a6c24:	bf48      	it	mi
 80a6c26:	2206      	movmi	r2, #6
 80a6c28:	61a2      	str	r2, [r4, #24]
 80a6c2a:	68e2      	ldr	r2, [r4, #12]
 80a6c2c:	3a01      	subs	r2, #1
 80a6c2e:	60e2      	str	r2, [r4, #12]
 80a6c30:	2a00      	cmp	r2, #0
 80a6c32:	d1dd      	bne.n	80a6bf0 <localtime_r+0x150>
 80a6c34:	6923      	ldr	r3, [r4, #16]
 80a6c36:	3b01      	subs	r3, #1
 80a6c38:	d405      	bmi.n	80a6c46 <localtime_r+0x1a6>
 80a6c3a:	6123      	str	r3, [r4, #16]
 80a6c3c:	6923      	ldr	r3, [r4, #16]
 80a6c3e:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80a6c42:	60e3      	str	r3, [r4, #12]
 80a6c44:	e7d4      	b.n	80a6bf0 <localtime_r+0x150>
 80a6c46:	230b      	movs	r3, #11
 80a6c48:	6123      	str	r3, [r4, #16]
 80a6c4a:	6963      	ldr	r3, [r4, #20]
 80a6c4c:	1e5a      	subs	r2, r3, #1
 80a6c4e:	6162      	str	r2, [r4, #20]
 80a6c50:	f203 726b 	addw	r2, r3, #1899	; 0x76b
 80a6c54:	0793      	lsls	r3, r2, #30
 80a6c56:	d105      	bne.n	80a6c64 <localtime_r+0x1c4>
 80a6c58:	2164      	movs	r1, #100	; 0x64
 80a6c5a:	fb92 f3f1 	sdiv	r3, r2, r1
 80a6c5e:	fb01 2313 	mls	r3, r1, r3, r2
 80a6c62:	b963      	cbnz	r3, 80a6c7e <localtime_r+0x1de>
 80a6c64:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80a6c68:	fb92 f3f1 	sdiv	r3, r2, r1
 80a6c6c:	fb01 2313 	mls	r3, r1, r3, r2
 80a6c70:	fab3 f383 	clz	r3, r3
 80a6c74:	095b      	lsrs	r3, r3, #5
 80a6c76:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 80a6c7a:	61e3      	str	r3, [r4, #28]
 80a6c7c:	e7de      	b.n	80a6c3c <localtime_r+0x19c>
 80a6c7e:	2301      	movs	r3, #1
 80a6c80:	e7f9      	b.n	80a6c76 <localtime_r+0x1d6>
 80a6c82:	bf00      	nop
 80a6c84:	080aa750 	.word	0x080aa750
 80a6c88:	20000698 	.word	0x20000698

080a6c8c <memcpy>:
 80a6c8c:	440a      	add	r2, r1
 80a6c8e:	4291      	cmp	r1, r2
 80a6c90:	f100 33ff 	add.w	r3, r0, #4294967295
 80a6c94:	d100      	bne.n	80a6c98 <memcpy+0xc>
 80a6c96:	4770      	bx	lr
 80a6c98:	b510      	push	{r4, lr}
 80a6c9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a6c9e:	4291      	cmp	r1, r2
 80a6ca0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a6ca4:	d1f9      	bne.n	80a6c9a <memcpy+0xe>
 80a6ca6:	bd10      	pop	{r4, pc}

080a6ca8 <memset>:
 80a6ca8:	4603      	mov	r3, r0
 80a6caa:	4402      	add	r2, r0
 80a6cac:	4293      	cmp	r3, r2
 80a6cae:	d100      	bne.n	80a6cb2 <memset+0xa>
 80a6cb0:	4770      	bx	lr
 80a6cb2:	f803 1b01 	strb.w	r1, [r3], #1
 80a6cb6:	e7f9      	b.n	80a6cac <memset+0x4>

080a6cb8 <srand>:
 80a6cb8:	b538      	push	{r3, r4, r5, lr}
 80a6cba:	4b0d      	ldr	r3, [pc, #52]	; (80a6cf0 <srand+0x38>)
 80a6cbc:	4604      	mov	r4, r0
 80a6cbe:	681d      	ldr	r5, [r3, #0]
 80a6cc0:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a6cc2:	b97b      	cbnz	r3, 80a6ce4 <srand+0x2c>
 80a6cc4:	2018      	movs	r0, #24
 80a6cc6:	f7fc fe43 	bl	80a3950 <malloc>
 80a6cca:	4a0a      	ldr	r2, [pc, #40]	; (80a6cf4 <srand+0x3c>)
 80a6ccc:	4b0a      	ldr	r3, [pc, #40]	; (80a6cf8 <srand+0x40>)
 80a6cce:	63a8      	str	r0, [r5, #56]	; 0x38
 80a6cd0:	e9c0 2300 	strd	r2, r3, [r0]
 80a6cd4:	4b09      	ldr	r3, [pc, #36]	; (80a6cfc <srand+0x44>)
 80a6cd6:	2201      	movs	r2, #1
 80a6cd8:	6083      	str	r3, [r0, #8]
 80a6cda:	230b      	movs	r3, #11
 80a6cdc:	8183      	strh	r3, [r0, #12]
 80a6cde:	2300      	movs	r3, #0
 80a6ce0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a6ce4:	2200      	movs	r2, #0
 80a6ce6:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80a6ce8:	611c      	str	r4, [r3, #16]
 80a6cea:	615a      	str	r2, [r3, #20]
 80a6cec:	bd38      	pop	{r3, r4, r5, pc}
 80a6cee:	bf00      	nop
 80a6cf0:	20000014 	.word	0x20000014
 80a6cf4:	abcd330e 	.word	0xabcd330e
 80a6cf8:	e66d1234 	.word	0xe66d1234
 80a6cfc:	0005deec 	.word	0x0005deec

080a6d00 <strcmp>:
 80a6d00:	f810 2b01 	ldrb.w	r2, [r0], #1
 80a6d04:	f811 3b01 	ldrb.w	r3, [r1], #1
 80a6d08:	2a01      	cmp	r2, #1
 80a6d0a:	bf28      	it	cs
 80a6d0c:	429a      	cmpcs	r2, r3
 80a6d0e:	d0f7      	beq.n	80a6d00 <strcmp>
 80a6d10:	1ad0      	subs	r0, r2, r3
 80a6d12:	4770      	bx	lr

080a6d14 <strcpy>:
 80a6d14:	4603      	mov	r3, r0
 80a6d16:	f811 2b01 	ldrb.w	r2, [r1], #1
 80a6d1a:	f803 2b01 	strb.w	r2, [r3], #1
 80a6d1e:	2a00      	cmp	r2, #0
 80a6d20:	d1f9      	bne.n	80a6d16 <strcpy+0x2>
 80a6d22:	4770      	bx	lr

080a6d24 <iso_year_adjust>:
 80a6d24:	6941      	ldr	r1, [r0, #20]
 80a6d26:	f240 736c 	movw	r3, #1900	; 0x76c
 80a6d2a:	2900      	cmp	r1, #0
 80a6d2c:	bfa8      	it	ge
 80a6d2e:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 80a6d32:	18ca      	adds	r2, r1, r3
 80a6d34:	078b      	lsls	r3, r1, #30
 80a6d36:	d105      	bne.n	80a6d44 <iso_year_adjust+0x20>
 80a6d38:	2164      	movs	r1, #100	; 0x64
 80a6d3a:	fb92 f3f1 	sdiv	r3, r2, r1
 80a6d3e:	fb01 2313 	mls	r3, r1, r3, r2
 80a6d42:	b9db      	cbnz	r3, 80a6d7c <iso_year_adjust+0x58>
 80a6d44:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80a6d48:	fb92 f3f1 	sdiv	r3, r2, r1
 80a6d4c:	fb01 2313 	mls	r3, r1, r3, r2
 80a6d50:	fab3 f383 	clz	r3, r3
 80a6d54:	095b      	lsrs	r3, r3, #5
 80a6d56:	e9d0 0206 	ldrd	r0, r2, [r0, #24]
 80a6d5a:	0040      	lsls	r0, r0, #1
 80a6d5c:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 80a6d60:	4418      	add	r0, r3
 80a6d62:	f241 63a2 	movw	r3, #5794	; 0x16a2
 80a6d66:	4298      	cmp	r0, r3
 80a6d68:	d03a      	beq.n	80a6de0 <iso_year_adjust+0xbc>
 80a6d6a:	dc21      	bgt.n	80a6db0 <iso_year_adjust+0x8c>
 80a6d6c:	2801      	cmp	r0, #1
 80a6d6e:	dc1a      	bgt.n	80a6da6 <iso_year_adjust+0x82>
 80a6d70:	2800      	cmp	r0, #0
 80a6d72:	bfb4      	ite	lt
 80a6d74:	2000      	movlt	r0, #0
 80a6d76:	f04f 30ff 	movge.w	r0, #4294967295
 80a6d7a:	4770      	bx	lr
 80a6d7c:	2301      	movs	r3, #1
 80a6d7e:	e7ea      	b.n	80a6d56 <iso_year_adjust+0x32>
 80a6d80:	2817      	cmp	r0, #23
 80a6d82:	d813      	bhi.n	80a6dac <iso_year_adjust+0x88>
 80a6d84:	e8df f000 	tbb	[pc, r0]
 80a6d88:	0c0c0c0c 	.word	0x0c0c0c0c
 80a6d8c:	0c0c1212 	.word	0x0c0c1212
 80a6d90:	12121212 	.word	0x12121212
 80a6d94:	12121212 	.word	0x12121212
 80a6d98:	0c0c1212 	.word	0x0c0c1212
 80a6d9c:	0c0c1212 	.word	0x0c0c1212
 80a6da0:	f04f 30ff 	mov.w	r0, #4294967295
 80a6da4:	4770      	bx	lr
 80a6da6:	380a      	subs	r0, #10
 80a6da8:	2817      	cmp	r0, #23
 80a6daa:	d9e9      	bls.n	80a6d80 <iso_year_adjust+0x5c>
 80a6dac:	2000      	movs	r0, #0
 80a6dae:	4770      	bx	lr
 80a6db0:	f241 63b4 	movw	r3, #5812	; 0x16b4
 80a6db4:	4298      	cmp	r0, r3
 80a6db6:	dc06      	bgt.n	80a6dc6 <iso_year_adjust+0xa2>
 80a6db8:	f241 63b1 	movw	r3, #5809	; 0x16b1
 80a6dbc:	4298      	cmp	r0, r3
 80a6dbe:	bfd4      	ite	le
 80a6dc0:	2000      	movle	r0, #0
 80a6dc2:	2001      	movgt	r0, #1
 80a6dc4:	4770      	bx	lr
 80a6dc6:	f5a0 50b6 	sub.w	r0, r0, #5824	; 0x16c0
 80a6dca:	3802      	subs	r0, #2
 80a6dcc:	2815      	cmp	r0, #21
 80a6dce:	d8ed      	bhi.n	80a6dac <iso_year_adjust+0x88>
 80a6dd0:	2301      	movs	r3, #1
 80a6dd2:	4083      	lsls	r3, r0
 80a6dd4:	4803      	ldr	r0, [pc, #12]	; (80a6de4 <iso_year_adjust+0xc0>)
 80a6dd6:	4018      	ands	r0, r3
 80a6dd8:	3800      	subs	r0, #0
 80a6dda:	bf18      	it	ne
 80a6ddc:	2001      	movne	r0, #1
 80a6dde:	4770      	bx	lr
 80a6de0:	2001      	movs	r0, #1
 80a6de2:	4770      	bx	lr
 80a6de4:	002a001f 	.word	0x002a001f

080a6de8 <__strftime>:
 80a6de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a6dec:	461e      	mov	r6, r3
 80a6dee:	2300      	movs	r3, #0
 80a6df0:	4607      	mov	r7, r0
 80a6df2:	460d      	mov	r5, r1
 80a6df4:	461c      	mov	r4, r3
 80a6df6:	b091      	sub	sp, #68	; 0x44
 80a6df8:	9304      	str	r3, [sp, #16]
 80a6dfa:	7813      	ldrb	r3, [r2, #0]
 80a6dfc:	2b00      	cmp	r3, #0
 80a6dfe:	f000 84da 	beq.w	80a77b6 <__strftime+0x9ce>
 80a6e02:	2b25      	cmp	r3, #37	; 0x25
 80a6e04:	d11f      	bne.n	80a6e46 <__strftime+0x5e>
 80a6e06:	f892 9001 	ldrb.w	r9, [r2, #1]
 80a6e0a:	f1b9 0f30 	cmp.w	r9, #48	; 0x30
 80a6e0e:	d024      	beq.n	80a6e5a <__strftime+0x72>
 80a6e10:	f1b9 0f2b 	cmp.w	r9, #43	; 0x2b
 80a6e14:	d021      	beq.n	80a6e5a <__strftime+0x72>
 80a6e16:	f04f 0900 	mov.w	r9, #0
 80a6e1a:	f102 0a01 	add.w	sl, r2, #1
 80a6e1e:	f89a 3000 	ldrb.w	r3, [sl]
 80a6e22:	3b31      	subs	r3, #49	; 0x31
 80a6e24:	2b08      	cmp	r3, #8
 80a6e26:	d81b      	bhi.n	80a6e60 <__strftime+0x78>
 80a6e28:	4650      	mov	r0, sl
 80a6e2a:	220a      	movs	r2, #10
 80a6e2c:	a908      	add	r1, sp, #32
 80a6e2e:	f001 fc71 	bl	80a8714 <strtoul>
 80a6e32:	4680      	mov	r8, r0
 80a6e34:	f8dd a020 	ldr.w	sl, [sp, #32]
 80a6e38:	f89a 3000 	ldrb.w	r3, [sl]
 80a6e3c:	2b45      	cmp	r3, #69	; 0x45
 80a6e3e:	d112      	bne.n	80a6e66 <__strftime+0x7e>
 80a6e40:	f10a 0a01 	add.w	sl, sl, #1
 80a6e44:	e011      	b.n	80a6e6a <__strftime+0x82>
 80a6e46:	1e69      	subs	r1, r5, #1
 80a6e48:	42a1      	cmp	r1, r4
 80a6e4a:	d802      	bhi.n	80a6e52 <__strftime+0x6a>
 80a6e4c:	2400      	movs	r4, #0
 80a6e4e:	f000 bcb5 	b.w	80a77bc <__strftime+0x9d4>
 80a6e52:	553b      	strb	r3, [r7, r4]
 80a6e54:	3201      	adds	r2, #1
 80a6e56:	3401      	adds	r4, #1
 80a6e58:	e7cf      	b.n	80a6dfa <__strftime+0x12>
 80a6e5a:	f102 0a02 	add.w	sl, r2, #2
 80a6e5e:	e7de      	b.n	80a6e1e <__strftime+0x36>
 80a6e60:	f04f 0800 	mov.w	r8, #0
 80a6e64:	e7e8      	b.n	80a6e38 <__strftime+0x50>
 80a6e66:	2b4f      	cmp	r3, #79	; 0x4f
 80a6e68:	d0ea      	beq.n	80a6e40 <__strftime+0x58>
 80a6e6a:	f89a 0000 	ldrb.w	r0, [sl]
 80a6e6e:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
 80a6e72:	2b55      	cmp	r3, #85	; 0x55
 80a6e74:	d8ea      	bhi.n	80a6e4c <__strftime+0x64>
 80a6e76:	a201      	add	r2, pc, #4	; (adr r2, 80a6e7c <__strftime+0x94>)
 80a6e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80a6e7c:	080a77ab 	.word	0x080a77ab
 80a6e80:	080a6e4d 	.word	0x080a6e4d
 80a6e84:	080a6e4d 	.word	0x080a6e4d
 80a6e88:	080a6e4d 	.word	0x080a6e4d
 80a6e8c:	080a6e4d 	.word	0x080a6e4d
 80a6e90:	080a6e4d 	.word	0x080a6e4d
 80a6e94:	080a6e4d 	.word	0x080a6e4d
 80a6e98:	080a6e4d 	.word	0x080a6e4d
 80a6e9c:	080a6e4d 	.word	0x080a6e4d
 80a6ea0:	080a6e4d 	.word	0x080a6e4d
 80a6ea4:	080a6e4d 	.word	0x080a6e4d
 80a6ea8:	080a6e4d 	.word	0x080a6e4d
 80a6eac:	080a6e4d 	.word	0x080a6e4d
 80a6eb0:	080a6e4d 	.word	0x080a6e4d
 80a6eb4:	080a6e4d 	.word	0x080a6e4d
 80a6eb8:	080a6e4d 	.word	0x080a6e4d
 80a6ebc:	080a6e4d 	.word	0x080a6e4d
 80a6ec0:	080a6e4d 	.word	0x080a6e4d
 80a6ec4:	080a6e4d 	.word	0x080a6e4d
 80a6ec8:	080a6e4d 	.word	0x080a6e4d
 80a6ecc:	080a6e4d 	.word	0x080a6e4d
 80a6ed0:	080a6e4d 	.word	0x080a6e4d
 80a6ed4:	080a6e4d 	.word	0x080a6e4d
 80a6ed8:	080a6e4d 	.word	0x080a6e4d
 80a6edc:	080a6e4d 	.word	0x080a6e4d
 80a6ee0:	080a6e4d 	.word	0x080a6e4d
 80a6ee4:	080a6e4d 	.word	0x080a6e4d
 80a6ee8:	080a6e4d 	.word	0x080a6e4d
 80a6eec:	080a7011 	.word	0x080a7011
 80a6ef0:	080a7069 	.word	0x080a7069
 80a6ef4:	080a70db 	.word	0x080a70db
 80a6ef8:	080a7173 	.word	0x080a7173
 80a6efc:	080a6e4d 	.word	0x080a6e4d
 80a6f00:	080a71bd 	.word	0x080a71bd
 80a6f04:	080a72b1 	.word	0x080a72b1
 80a6f08:	080a73bb 	.word	0x080a73bb
 80a6f0c:	080a73c9 	.word	0x080a73c9
 80a6f10:	080a6e4d 	.word	0x080a6e4d
 80a6f14:	080a6e4d 	.word	0x080a6e4d
 80a6f18:	080a6e4d 	.word	0x080a6e4d
 80a6f1c:	080a73f9 	.word	0x080a73f9
 80a6f20:	080a6e4d 	.word	0x080a6e4d
 80a6f24:	080a6e4d 	.word	0x080a6e4d
 80a6f28:	080a740d 	.word	0x080a740d
 80a6f2c:	080a6e4d 	.word	0x080a6e4d
 80a6f30:	080a745d 	.word	0x080a745d
 80a6f34:	080a7573 	.word	0x080a7573
 80a6f38:	080a7583 	.word	0x080a7583
 80a6f3c:	080a75d7 	.word	0x080a75d7
 80a6f40:	080a75e7 	.word	0x080a75e7
 80a6f44:	080a7659 	.word	0x080a7659
 80a6f48:	080a70d3 	.word	0x080a70d3
 80a6f4c:	080a768d 	.word	0x080a768d
 80a6f50:	080a7759 	.word	0x080a7759
 80a6f54:	080a6e4d 	.word	0x080a6e4d
 80a6f58:	080a6e4d 	.word	0x080a6e4d
 80a6f5c:	080a6e4d 	.word	0x080a6e4d
 80a6f60:	080a6e4d 	.word	0x080a6e4d
 80a6f64:	080a6e4d 	.word	0x080a6e4d
 80a6f68:	080a6e4d 	.word	0x080a6e4d
 80a6f6c:	080a6fd5 	.word	0x080a6fd5
 80a6f70:	080a703f 	.word	0x080a703f
 80a6f74:	080a7095 	.word	0x080a7095
 80a6f78:	080a714f 	.word	0x080a714f
 80a6f7c:	080a714f 	.word	0x080a714f
 80a6f80:	080a6e4d 	.word	0x080a6e4d
 80a6f84:	080a7213 	.word	0x080a7213
 80a6f88:	080a703f 	.word	0x080a703f
 80a6f8c:	080a6e4d 	.word	0x080a6e4d
 80a6f90:	080a73eb 	.word	0x080a73eb
 80a6f94:	080a73bb 	.word	0x080a73bb
 80a6f98:	080a73c9 	.word	0x080a73c9
 80a6f9c:	080a73f3 	.word	0x080a73f3
 80a6fa0:	080a73fd 	.word	0x080a73fd
 80a6fa4:	080a6e4d 	.word	0x080a6e4d
 80a6fa8:	080a740d 	.word	0x080a740d
 80a6fac:	080a6e4d 	.word	0x080a6e4d
 80a6fb0:	080a70c3 	.word	0x080a70c3
 80a6fb4:	080a746f 	.word	0x080a746f
 80a6fb8:	080a7577 	.word	0x080a7577
 80a6fbc:	080a75bd 	.word	0x080a75bd
 80a6fc0:	080a6e4d 	.word	0x080a6e4d
 80a6fc4:	080a764b 	.word	0x080a764b
 80a6fc8:	080a70cb 	.word	0x080a70cb
 80a6fcc:	080a7671 	.word	0x080a7671
 80a6fd0:	080a76e9 	.word	0x080a76e9
 80a6fd4:	69b3      	ldr	r3, [r6, #24]
 80a6fd6:	4aa9      	ldr	r2, [pc, #676]	; (80a727c <__strftime+0x494>)
 80a6fd8:	3318      	adds	r3, #24
 80a6fda:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
 80a6fde:	4640      	mov	r0, r8
 80a6fe0:	f000 fc02 	bl	80a77e8 <strlen>
 80a6fe4:	f108 38ff 	add.w	r8, r8, #4294967295
 80a6fe8:	4420      	add	r0, r4
 80a6fea:	1e6b      	subs	r3, r5, #1
 80a6fec:	42a0      	cmp	r0, r4
 80a6fee:	d107      	bne.n	80a7000 <__strftime+0x218>
 80a6ff0:	f89a 3000 	ldrb.w	r3, [sl]
 80a6ff4:	2b00      	cmp	r3, #0
 80a6ff6:	f000 83de 	beq.w	80a77b6 <__strftime+0x9ce>
 80a6ffa:	f10a 0201 	add.w	r2, sl, #1
 80a6ffe:	e6fc      	b.n	80a6dfa <__strftime+0x12>
 80a7000:	42a3      	cmp	r3, r4
 80a7002:	f67f af23 	bls.w	80a6e4c <__strftime+0x64>
 80a7006:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 80a700a:	553a      	strb	r2, [r7, r4]
 80a700c:	3401      	adds	r4, #1
 80a700e:	e7ed      	b.n	80a6fec <__strftime+0x204>
 80a7010:	69b2      	ldr	r2, [r6, #24]
 80a7012:	4b9a      	ldr	r3, [pc, #616]	; (80a727c <__strftime+0x494>)
 80a7014:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80a7018:	f8d3 807c 	ldr.w	r8, [r3, #124]	; 0x7c
 80a701c:	4640      	mov	r0, r8
 80a701e:	f000 fbe3 	bl	80a77e8 <strlen>
 80a7022:	f108 38ff 	add.w	r8, r8, #4294967295
 80a7026:	4420      	add	r0, r4
 80a7028:	1e6b      	subs	r3, r5, #1
 80a702a:	42a0      	cmp	r0, r4
 80a702c:	d0e0      	beq.n	80a6ff0 <__strftime+0x208>
 80a702e:	42a3      	cmp	r3, r4
 80a7030:	f67f af0c 	bls.w	80a6e4c <__strftime+0x64>
 80a7034:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 80a7038:	553a      	strb	r2, [r7, r4]
 80a703a:	3401      	adds	r4, #1
 80a703c:	e7f5      	b.n	80a702a <__strftime+0x242>
 80a703e:	4b8f      	ldr	r3, [pc, #572]	; (80a727c <__strftime+0x494>)
 80a7040:	6932      	ldr	r2, [r6, #16]
 80a7042:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
 80a7046:	4640      	mov	r0, r8
 80a7048:	f000 fbce 	bl	80a77e8 <strlen>
 80a704c:	f108 38ff 	add.w	r8, r8, #4294967295
 80a7050:	4420      	add	r0, r4
 80a7052:	1e6b      	subs	r3, r5, #1
 80a7054:	42a0      	cmp	r0, r4
 80a7056:	d0cb      	beq.n	80a6ff0 <__strftime+0x208>
 80a7058:	42a3      	cmp	r3, r4
 80a705a:	f67f aef7 	bls.w	80a6e4c <__strftime+0x64>
 80a705e:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 80a7062:	553a      	strb	r2, [r7, r4]
 80a7064:	3401      	adds	r4, #1
 80a7066:	e7f5      	b.n	80a7054 <__strftime+0x26c>
 80a7068:	6933      	ldr	r3, [r6, #16]
 80a706a:	4a84      	ldr	r2, [pc, #528]	; (80a727c <__strftime+0x494>)
 80a706c:	330c      	adds	r3, #12
 80a706e:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
 80a7072:	4640      	mov	r0, r8
 80a7074:	f000 fbb8 	bl	80a77e8 <strlen>
 80a7078:	f108 38ff 	add.w	r8, r8, #4294967295
 80a707c:	4420      	add	r0, r4
 80a707e:	1e6b      	subs	r3, r5, #1
 80a7080:	42a0      	cmp	r0, r4
 80a7082:	d0b5      	beq.n	80a6ff0 <__strftime+0x208>
 80a7084:	42a3      	cmp	r3, r4
 80a7086:	f67f aee1 	bls.w	80a6e4c <__strftime+0x64>
 80a708a:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 80a708e:	553a      	strb	r2, [r7, r4]
 80a7090:	3401      	adds	r4, #1
 80a7092:	e7f5      	b.n	80a7080 <__strftime+0x298>
 80a7094:	4b79      	ldr	r3, [pc, #484]	; (80a727c <__strftime+0x494>)
 80a7096:	f8d3 80a0 	ldr.w	r8, [r3, #160]	; 0xa0
 80a709a:	4640      	mov	r0, r8
 80a709c:	f000 fba4 	bl	80a77e8 <strlen>
 80a70a0:	f898 3000 	ldrb.w	r3, [r8]
 80a70a4:	2b00      	cmp	r3, #0
 80a70a6:	d0a3      	beq.n	80a6ff0 <__strftime+0x208>
 80a70a8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80a70aa:	4642      	mov	r2, r8
 80a70ac:	9300      	str	r3, [sp, #0]
 80a70ae:	4633      	mov	r3, r6
 80a70b0:	1b29      	subs	r1, r5, r4
 80a70b2:	1938      	adds	r0, r7, r4
 80a70b4:	f7ff fe98 	bl	80a6de8 <__strftime>
 80a70b8:	2800      	cmp	r0, #0
 80a70ba:	f77f aec7 	ble.w	80a6e4c <__strftime+0x64>
 80a70be:	4404      	add	r4, r0
 80a70c0:	e796      	b.n	80a6ff0 <__strftime+0x208>
 80a70c2:	4b6e      	ldr	r3, [pc, #440]	; (80a727c <__strftime+0x494>)
 80a70c4:	f8d3 80e4 	ldr.w	r8, [r3, #228]	; 0xe4
 80a70c8:	e7e7      	b.n	80a709a <__strftime+0x2b2>
 80a70ca:	4b6c      	ldr	r3, [pc, #432]	; (80a727c <__strftime+0x494>)
 80a70cc:	f8d3 809c 	ldr.w	r8, [r3, #156]	; 0x9c
 80a70d0:	e7e3      	b.n	80a709a <__strftime+0x2b2>
 80a70d2:	4b6a      	ldr	r3, [pc, #424]	; (80a727c <__strftime+0x494>)
 80a70d4:	f8d3 8098 	ldr.w	r8, [r3, #152]	; 0x98
 80a70d8:	e7df      	b.n	80a709a <__strftime+0x2b2>
 80a70da:	4969      	ldr	r1, [pc, #420]	; (80a7280 <__strftime+0x498>)
 80a70dc:	f8d6 b014 	ldr.w	fp, [r6, #20]
 80a70e0:	458b      	cmp	fp, r1
 80a70e2:	bfac      	ite	ge
 80a70e4:	2100      	movge	r1, #0
 80a70e6:	2101      	movlt	r1, #1
 80a70e8:	f1bb 0f00 	cmp.w	fp, #0
 80a70ec:	db10      	blt.n	80a7110 <__strftime+0x328>
 80a70ee:	2064      	movs	r0, #100	; 0x64
 80a70f0:	fb9b f0f0 	sdiv	r0, fp, r0
 80a70f4:	3013      	adds	r0, #19
 80a70f6:	f1b9 0f00 	cmp.w	r9, #0
 80a70fa:	d013      	beq.n	80a7124 <__strftime+0x33c>
 80a70fc:	2863      	cmp	r0, #99	; 0x63
 80a70fe:	dd24      	ble.n	80a714a <__strftime+0x362>
 80a7100:	4a60      	ldr	r2, [pc, #384]	; (80a7284 <__strftime+0x49c>)
 80a7102:	4b61      	ldr	r3, [pc, #388]	; (80a7288 <__strftime+0x4a0>)
 80a7104:	f1b9 0f2b 	cmp.w	r9, #43	; 0x2b
 80a7108:	bf18      	it	ne
 80a710a:	4613      	movne	r3, r2
 80a710c:	4a5f      	ldr	r2, [pc, #380]	; (80a728c <__strftime+0x4a4>)
 80a710e:	e00b      	b.n	80a7128 <__strftime+0x340>
 80a7110:	f20b 706c 	addw	r0, fp, #1900	; 0x76c
 80a7114:	9105      	str	r1, [sp, #20]
 80a7116:	f001 fd41 	bl	80a8b9c <abs>
 80a711a:	2364      	movs	r3, #100	; 0x64
 80a711c:	9905      	ldr	r1, [sp, #20]
 80a711e:	fb90 f0f3 	sdiv	r0, r0, r3
 80a7122:	e7e8      	b.n	80a70f6 <__strftime+0x30e>
 80a7124:	4b57      	ldr	r3, [pc, #348]	; (80a7284 <__strftime+0x49c>)
 80a7126:	4a5a      	ldr	r2, [pc, #360]	; (80a7290 <__strftime+0x4a8>)
 80a7128:	f1b8 0f02 	cmp.w	r8, #2
 80a712c:	bf2c      	ite	cs
 80a712e:	ebc1 0108 	rsbcs	r1, r1, r8
 80a7132:	f1c1 0102 	rsbcc	r1, r1, #2
 80a7136:	9001      	str	r0, [sp, #4]
 80a7138:	9100      	str	r1, [sp, #0]
 80a713a:	4851      	ldr	r0, [pc, #324]	; (80a7280 <__strftime+0x498>)
 80a713c:	4955      	ldr	r1, [pc, #340]	; (80a7294 <__strftime+0x4ac>)
 80a713e:	4583      	cmp	fp, r0
 80a7140:	bfb8      	it	lt
 80a7142:	460b      	movlt	r3, r1
 80a7144:	1b29      	subs	r1, r5, r4
 80a7146:	1938      	adds	r0, r7, r4
 80a7148:	e029      	b.n	80a719e <__strftime+0x3b6>
 80a714a:	4b4e      	ldr	r3, [pc, #312]	; (80a7284 <__strftime+0x49c>)
 80a714c:	e7de      	b.n	80a710c <__strftime+0x324>
 80a714e:	4952      	ldr	r1, [pc, #328]	; (80a7298 <__strftime+0x4b0>)
 80a7150:	4a52      	ldr	r2, [pc, #328]	; (80a729c <__strftime+0x4b4>)
 80a7152:	68f3      	ldr	r3, [r6, #12]
 80a7154:	2864      	cmp	r0, #100	; 0x64
 80a7156:	bf08      	it	eq
 80a7158:	460a      	moveq	r2, r1
 80a715a:	1b29      	subs	r1, r5, r4
 80a715c:	1938      	adds	r0, r7, r4
 80a715e:	f7fc fc2f 	bl	80a39c0 <sniprintf>
 80a7162:	2800      	cmp	r0, #0
 80a7164:	f6ff ae72 	blt.w	80a6e4c <__strftime+0x64>
 80a7168:	4404      	add	r4, r0
 80a716a:	42a5      	cmp	r5, r4
 80a716c:	f63f af40 	bhi.w	80a6ff0 <__strftime+0x208>
 80a7170:	e66c      	b.n	80a6e4c <__strftime+0x64>
 80a7172:	6970      	ldr	r0, [r6, #20]
 80a7174:	6933      	ldr	r3, [r6, #16]
 80a7176:	2800      	cmp	r0, #0
 80a7178:	f103 0b01 	add.w	fp, r3, #1
 80a717c:	eb07 0804 	add.w	r8, r7, r4
 80a7180:	68f3      	ldr	r3, [r6, #12]
 80a7182:	eba5 0904 	sub.w	r9, r5, r4
 80a7186:	db0d      	blt.n	80a71a4 <__strftime+0x3bc>
 80a7188:	2164      	movs	r1, #100	; 0x64
 80a718a:	fb90 f2f1 	sdiv	r2, r0, r1
 80a718e:	fb01 0212 	mls	r2, r1, r2, r0
 80a7192:	e9cd 3200 	strd	r3, r2, [sp]
 80a7196:	4649      	mov	r1, r9
 80a7198:	465b      	mov	r3, fp
 80a719a:	4640      	mov	r0, r8
 80a719c:	4a40      	ldr	r2, [pc, #256]	; (80a72a0 <__strftime+0x4b8>)
 80a719e:	f7fc fc0f 	bl	80a39c0 <sniprintf>
 80a71a2:	e7de      	b.n	80a7162 <__strftime+0x37a>
 80a71a4:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80a71a8:	9305      	str	r3, [sp, #20]
 80a71aa:	f001 fcf7 	bl	80a8b9c <abs>
 80a71ae:	2264      	movs	r2, #100	; 0x64
 80a71b0:	fb90 f1f2 	sdiv	r1, r0, r2
 80a71b4:	9b05      	ldr	r3, [sp, #20]
 80a71b6:	fb01 0212 	mls	r2, r1, r2, r0
 80a71ba:	e7ea      	b.n	80a7192 <__strftime+0x3aa>
 80a71bc:	2325      	movs	r3, #37	; 0x25
 80a71be:	f88d 3020 	strb.w	r3, [sp, #32]
 80a71c2:	f1b9 0f00 	cmp.w	r9, #0
 80a71c6:	d013      	beq.n	80a71f0 <__strftime+0x408>
 80a71c8:	f1b8 0f06 	cmp.w	r8, #6
 80a71cc:	bf38      	it	cc
 80a71ce:	f04f 0806 	movcc.w	r8, #6
 80a71d2:	f1b8 0306 	subs.w	r3, r8, #6
 80a71d6:	f88d 9021 	strb.w	r9, [sp, #33]	; 0x21
 80a71da:	d10e      	bne.n	80a71fa <__strftime+0x412>
 80a71dc:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 80a71e0:	4930      	ldr	r1, [pc, #192]	; (80a72a4 <__strftime+0x4bc>)
 80a71e2:	f7ff fd97 	bl	80a6d14 <strcpy>
 80a71e6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80a71e8:	aa08      	add	r2, sp, #32
 80a71ea:	9300      	str	r3, [sp, #0]
 80a71ec:	4633      	mov	r3, r6
 80a71ee:	e75f      	b.n	80a70b0 <__strftime+0x2c8>
 80a71f0:	f04f 092b 	mov.w	r9, #43	; 0x2b
 80a71f4:	f04f 080a 	mov.w	r8, #10
 80a71f8:	e7eb      	b.n	80a71d2 <__strftime+0x3ea>
 80a71fa:	211e      	movs	r1, #30
 80a71fc:	4a2a      	ldr	r2, [pc, #168]	; (80a72a8 <__strftime+0x4c0>)
 80a71fe:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 80a7202:	f7fc fbdd 	bl	80a39c0 <sniprintf>
 80a7206:	2800      	cmp	r0, #0
 80a7208:	dde8      	ble.n	80a71dc <__strftime+0x3f4>
 80a720a:	f10d 0322 	add.w	r3, sp, #34	; 0x22
 80a720e:	4418      	add	r0, r3
 80a7210:	e7e6      	b.n	80a71e0 <__strftime+0x3f8>
 80a7212:	4630      	mov	r0, r6
 80a7214:	f7ff fd86 	bl	80a6d24 <iso_year_adjust>
 80a7218:	4680      	mov	r8, r0
 80a721a:	6970      	ldr	r0, [r6, #20]
 80a721c:	2800      	cmp	r0, #0
 80a721e:	db11      	blt.n	80a7244 <__strftime+0x45c>
 80a7220:	2264      	movs	r2, #100	; 0x64
 80a7222:	fb90 f3f2 	sdiv	r3, r0, r2
 80a7226:	fb02 0313 	mls	r3, r2, r3, r0
 80a722a:	4498      	add	r8, r3
 80a722c:	2364      	movs	r3, #100	; 0x64
 80a722e:	fb98 f0f3 	sdiv	r0, r8, r3
 80a7232:	fb03 8810 	mls	r8, r3, r0, r8
 80a7236:	4498      	add	r8, r3
 80a7238:	fbb8 f2f3 	udiv	r2, r8, r3
 80a723c:	fb03 8312 	mls	r3, r3, r2, r8
 80a7240:	4a15      	ldr	r2, [pc, #84]	; (80a7298 <__strftime+0x4b0>)
 80a7242:	e78a      	b.n	80a715a <__strftime+0x372>
 80a7244:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80a7248:	f001 fca8 	bl	80a8b9c <abs>
 80a724c:	2364      	movs	r3, #100	; 0x64
 80a724e:	fb90 f2f3 	sdiv	r2, r0, r3
 80a7252:	f1b8 0f00 	cmp.w	r8, #0
 80a7256:	fb02 0313 	mls	r3, r2, r3, r0
 80a725a:	da06      	bge.n	80a726a <__strftime+0x482>
 80a725c:	6971      	ldr	r1, [r6, #20]
 80a725e:	4a13      	ldr	r2, [pc, #76]	; (80a72ac <__strftime+0x4c4>)
 80a7260:	4291      	cmp	r1, r2
 80a7262:	bfb8      	it	lt
 80a7264:	f04f 0801 	movlt.w	r8, #1
 80a7268:	e7df      	b.n	80a722a <__strftime+0x442>
 80a726a:	d0de      	beq.n	80a722a <__strftime+0x442>
 80a726c:	6971      	ldr	r1, [r6, #20]
 80a726e:	4a04      	ldr	r2, [pc, #16]	; (80a7280 <__strftime+0x498>)
 80a7270:	4291      	cmp	r1, r2
 80a7272:	bfb8      	it	lt
 80a7274:	f04f 38ff 	movlt.w	r8, #4294967295
 80a7278:	e7d7      	b.n	80a722a <__strftime+0x442>
 80a727a:	bf00      	nop
 80a727c:	080aa98c 	.word	0x080aa98c
 80a7280:	fffff894 	.word	0xfffff894
 80a7284:	080aa2c3 	.word	0x080aa2c3
 80a7288:	080aa7bf 	.word	0x080aa7bf
 80a728c:	080aa7b7 	.word	0x080aa7b7
 80a7290:	080aa7b0 	.word	0x080aa7b0
 80a7294:	080aa7c1 	.word	0x080aa7c1
 80a7298:	080aa7d1 	.word	0x080aa7d1
 80a729c:	080aa7c3 	.word	0x080aa7c3
 80a72a0:	080aa7c7 	.word	0x080aa7c7
 80a72a4:	080aa7d6 	.word	0x080aa7d6
 80a72a8:	080aa227 	.word	0x080aa227
 80a72ac:	fffff895 	.word	0xfffff895
 80a72b0:	4bb7      	ldr	r3, [pc, #732]	; (80a7590 <__strftime+0x7a8>)
 80a72b2:	6971      	ldr	r1, [r6, #20]
 80a72b4:	4630      	mov	r0, r6
 80a72b6:	4299      	cmp	r1, r3
 80a72b8:	bfac      	ite	ge
 80a72ba:	2300      	movge	r3, #0
 80a72bc:	2301      	movlt	r3, #1
 80a72be:	e9cd 3105 	strd	r3, r1, [sp, #20]
 80a72c2:	f7ff fd2f 	bl	80a6d24 <iso_year_adjust>
 80a72c6:	9906      	ldr	r1, [sp, #24]
 80a72c8:	4683      	mov	fp, r0
 80a72ca:	2900      	cmp	r1, #0
 80a72cc:	db2a      	blt.n	80a7324 <__strftime+0x53c>
 80a72ce:	2264      	movs	r2, #100	; 0x64
 80a72d0:	fb91 f2f2 	sdiv	r2, r1, r2
 80a72d4:	3213      	adds	r2, #19
 80a72d6:	6970      	ldr	r0, [r6, #20]
 80a72d8:	2800      	cmp	r0, #0
 80a72da:	db2d      	blt.n	80a7338 <__strftime+0x550>
 80a72dc:	f04f 0c64 	mov.w	ip, #100	; 0x64
 80a72e0:	fb90 fefc 	sdiv	lr, r0, ip
 80a72e4:	fb0c 001e 	mls	r0, ip, lr, r0
 80a72e8:	f1bb 0f00 	cmp.w	fp, #0
 80a72ec:	da33      	bge.n	80a7356 <__strftime+0x56e>
 80a72ee:	6971      	ldr	r1, [r6, #20]
 80a72f0:	4ba8      	ldr	r3, [pc, #672]	; (80a7594 <__strftime+0x7ac>)
 80a72f2:	4299      	cmp	r1, r3
 80a72f4:	db39      	blt.n	80a736a <__strftime+0x582>
 80a72f6:	eb0b 0300 	add.w	r3, fp, r0
 80a72fa:	1c59      	adds	r1, r3, #1
 80a72fc:	d13a      	bne.n	80a7374 <__strftime+0x58c>
 80a72fe:	2363      	movs	r3, #99	; 0x63
 80a7300:	3a01      	subs	r2, #1
 80a7302:	2064      	movs	r0, #100	; 0x64
 80a7304:	fb00 3202 	mla	r2, r0, r2, r3
 80a7308:	9b05      	ldr	r3, [sp, #20]
 80a730a:	2b00      	cmp	r3, #0
 80a730c:	d037      	beq.n	80a737e <__strftime+0x596>
 80a730e:	232d      	movs	r3, #45	; 0x2d
 80a7310:	f88d 3020 	strb.w	r3, [sp, #32]
 80a7314:	f1b8 0f00 	cmp.w	r8, #0
 80a7318:	d001      	beq.n	80a731e <__strftime+0x536>
 80a731a:	f108 38ff 	add.w	r8, r8, #4294967295
 80a731e:	f10d 0321 	add.w	r3, sp, #33	; 0x21
 80a7322:	e037      	b.n	80a7394 <__strftime+0x5ac>
 80a7324:	f201 706c 	addw	r0, r1, #1900	; 0x76c
 80a7328:	9106      	str	r1, [sp, #24]
 80a732a:	f001 fc37 	bl	80a8b9c <abs>
 80a732e:	2264      	movs	r2, #100	; 0x64
 80a7330:	9906      	ldr	r1, [sp, #24]
 80a7332:	fb90 f2f2 	sdiv	r2, r0, r2
 80a7336:	e7ce      	b.n	80a72d6 <__strftime+0x4ee>
 80a7338:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80a733c:	e9cd 1206 	strd	r1, r2, [sp, #24]
 80a7340:	f001 fc2c 	bl	80a8b9c <abs>
 80a7344:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 80a7348:	f04f 0c64 	mov.w	ip, #100	; 0x64
 80a734c:	fb90 fefc 	sdiv	lr, r0, ip
 80a7350:	fb0e 001c 	mls	r0, lr, ip, r0
 80a7354:	e7c8      	b.n	80a72e8 <__strftime+0x500>
 80a7356:	d0ce      	beq.n	80a72f6 <__strftime+0x50e>
 80a7358:	4b8d      	ldr	r3, [pc, #564]	; (80a7590 <__strftime+0x7a8>)
 80a735a:	4299      	cmp	r1, r3
 80a735c:	bfb6      	itet	lt
 80a735e:	2301      	movlt	r3, #1
 80a7360:	2300      	movge	r3, #0
 80a7362:	f04f 3bff 	movlt.w	fp, #4294967295
 80a7366:	9305      	str	r3, [sp, #20]
 80a7368:	e7c5      	b.n	80a72f6 <__strftime+0x50e>
 80a736a:	f04f 0b01 	mov.w	fp, #1
 80a736e:	f8cd b014 	str.w	fp, [sp, #20]
 80a7372:	e7c0      	b.n	80a72f6 <__strftime+0x50e>
 80a7374:	2b64      	cmp	r3, #100	; 0x64
 80a7376:	bf04      	itt	eq
 80a7378:	2300      	moveq	r3, #0
 80a737a:	3201      	addeq	r2, #1
 80a737c:	e7c1      	b.n	80a7302 <__strftime+0x51a>
 80a737e:	f1b9 0f2b 	cmp.w	r9, #43	; 0x2b
 80a7382:	d106      	bne.n	80a7392 <__strftime+0x5aa>
 80a7384:	f242 730f 	movw	r3, #9999	; 0x270f
 80a7388:	429a      	cmp	r2, r3
 80a738a:	d902      	bls.n	80a7392 <__strftime+0x5aa>
 80a738c:	f88d 9020 	strb.w	r9, [sp, #32]
 80a7390:	e7c0      	b.n	80a7314 <__strftime+0x52c>
 80a7392:	ab08      	add	r3, sp, #32
 80a7394:	2125      	movs	r1, #37	; 0x25
 80a7396:	7019      	strb	r1, [r3, #0]
 80a7398:	f1b9 0f00 	cmp.w	r9, #0
 80a739c:	d109      	bne.n	80a73b2 <__strftime+0x5ca>
 80a739e:	1c58      	adds	r0, r3, #1
 80a73a0:	497d      	ldr	r1, [pc, #500]	; (80a7598 <__strftime+0x7b0>)
 80a73a2:	9205      	str	r2, [sp, #20]
 80a73a4:	f7ff fcb6 	bl	80a6d14 <strcpy>
 80a73a8:	9a05      	ldr	r2, [sp, #20]
 80a73aa:	9200      	str	r2, [sp, #0]
 80a73ac:	4643      	mov	r3, r8
 80a73ae:	aa08      	add	r2, sp, #32
 80a73b0:	e058      	b.n	80a7464 <__strftime+0x67c>
 80a73b2:	2130      	movs	r1, #48	; 0x30
 80a73b4:	1c98      	adds	r0, r3, #2
 80a73b6:	7059      	strb	r1, [r3, #1]
 80a73b8:	e7f2      	b.n	80a73a0 <__strftime+0x5b8>
 80a73ba:	4978      	ldr	r1, [pc, #480]	; (80a759c <__strftime+0x7b4>)
 80a73bc:	4a78      	ldr	r2, [pc, #480]	; (80a75a0 <__strftime+0x7b8>)
 80a73be:	68b3      	ldr	r3, [r6, #8]
 80a73c0:	286b      	cmp	r0, #107	; 0x6b
 80a73c2:	bf08      	it	eq
 80a73c4:	460a      	moveq	r2, r1
 80a73c6:	e6c8      	b.n	80a715a <__strftime+0x372>
 80a73c8:	68b3      	ldr	r3, [r6, #8]
 80a73ca:	b163      	cbz	r3, 80a73e6 <__strftime+0x5fe>
 80a73cc:	2b0c      	cmp	r3, #12
 80a73ce:	d004      	beq.n	80a73da <__strftime+0x5f2>
 80a73d0:	210c      	movs	r1, #12
 80a73d2:	fb93 f2f1 	sdiv	r2, r3, r1
 80a73d6:	fb01 3312 	mls	r3, r1, r2, r3
 80a73da:	4971      	ldr	r1, [pc, #452]	; (80a75a0 <__strftime+0x7b8>)
 80a73dc:	4a6f      	ldr	r2, [pc, #444]	; (80a759c <__strftime+0x7b4>)
 80a73de:	2849      	cmp	r0, #73	; 0x49
 80a73e0:	bf08      	it	eq
 80a73e2:	460a      	moveq	r2, r1
 80a73e4:	e6b9      	b.n	80a715a <__strftime+0x372>
 80a73e6:	230c      	movs	r3, #12
 80a73e8:	e7f7      	b.n	80a73da <__strftime+0x5f2>
 80a73ea:	69f3      	ldr	r3, [r6, #28]
 80a73ec:	4a6d      	ldr	r2, [pc, #436]	; (80a75a4 <__strftime+0x7bc>)
 80a73ee:	3301      	adds	r3, #1
 80a73f0:	e6b3      	b.n	80a715a <__strftime+0x372>
 80a73f2:	6933      	ldr	r3, [r6, #16]
 80a73f4:	3301      	adds	r3, #1
 80a73f6:	e723      	b.n	80a7240 <__strftime+0x458>
 80a73f8:	6873      	ldr	r3, [r6, #4]
 80a73fa:	e721      	b.n	80a7240 <__strftime+0x458>
 80a73fc:	1e6b      	subs	r3, r5, #1
 80a73fe:	42a3      	cmp	r3, r4
 80a7400:	f67f ad24 	bls.w	80a6e4c <__strftime+0x64>
 80a7404:	230a      	movs	r3, #10
 80a7406:	553b      	strb	r3, [r7, r4]
 80a7408:	3401      	adds	r4, #1
 80a740a:	e5f1      	b.n	80a6ff0 <__strftime+0x208>
 80a740c:	68b3      	ldr	r3, [r6, #8]
 80a740e:	2b0b      	cmp	r3, #11
 80a7410:	bfcc      	ite	gt
 80a7412:	22a4      	movgt	r2, #164	; 0xa4
 80a7414:	22a0      	movle	r2, #160	; 0xa0
 80a7416:	4b64      	ldr	r3, [pc, #400]	; (80a75a8 <__strftime+0x7c0>)
 80a7418:	4413      	add	r3, r2
 80a741a:	f8d3 8004 	ldr.w	r8, [r3, #4]
 80a741e:	4640      	mov	r0, r8
 80a7420:	f000 f9e2 	bl	80a77e8 <strlen>
 80a7424:	f108 32ff 	add.w	r2, r8, #4294967295
 80a7428:	4420      	add	r0, r4
 80a742a:	f105 3cff 	add.w	ip, r5, #4294967295
 80a742e:	42a0      	cmp	r0, r4
 80a7430:	f43f adde 	beq.w	80a6ff0 <__strftime+0x208>
 80a7434:	45a4      	cmp	ip, r4
 80a7436:	f67f ad09 	bls.w	80a6e4c <__strftime+0x64>
 80a743a:	f89a 1000 	ldrb.w	r1, [sl]
 80a743e:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 80a7442:	2950      	cmp	r1, #80	; 0x50
 80a7444:	d107      	bne.n	80a7456 <__strftime+0x66e>
 80a7446:	4959      	ldr	r1, [pc, #356]	; (80a75ac <__strftime+0x7c4>)
 80a7448:	5cc9      	ldrb	r1, [r1, r3]
 80a744a:	f001 0103 	and.w	r1, r1, #3
 80a744e:	2901      	cmp	r1, #1
 80a7450:	bf08      	it	eq
 80a7452:	3320      	addeq	r3, #32
 80a7454:	b2db      	uxtb	r3, r3
 80a7456:	553b      	strb	r3, [r7, r4]
 80a7458:	3401      	adds	r4, #1
 80a745a:	e7e8      	b.n	80a742e <__strftime+0x646>
 80a745c:	6873      	ldr	r3, [r6, #4]
 80a745e:	4a54      	ldr	r2, [pc, #336]	; (80a75b0 <__strftime+0x7c8>)
 80a7460:	9300      	str	r3, [sp, #0]
 80a7462:	68b3      	ldr	r3, [r6, #8]
 80a7464:	1b29      	subs	r1, r5, r4
 80a7466:	1938      	adds	r0, r7, r4
 80a7468:	f7fc faaa 	bl	80a39c0 <sniprintf>
 80a746c:	e679      	b.n	80a7162 <__strftime+0x37a>
 80a746e:	6a33      	ldr	r3, [r6, #32]
 80a7470:	2b00      	cmp	r3, #0
 80a7472:	db7b      	blt.n	80a756c <__strftime+0x784>
 80a7474:	f001 fa00 	bl	80a8878 <__tz_lock>
 80a7478:	9b04      	ldr	r3, [sp, #16]
 80a747a:	b90b      	cbnz	r3, 80a7480 <__strftime+0x698>
 80a747c:	f001 fa08 	bl	80a8890 <_tzset_unlocked>
 80a7480:	f001 ff26 	bl	80a92d0 <__gettzinfo>
 80a7484:	6a33      	ldr	r3, [r6, #32]
 80a7486:	2b00      	cmp	r3, #0
 80a7488:	bfcc      	ite	gt
 80a748a:	2350      	movgt	r3, #80	; 0x50
 80a748c:	2328      	movle	r3, #40	; 0x28
 80a748e:	58c3      	ldr	r3, [r0, r3]
 80a7490:	f1c3 0900 	rsb	r9, r3, #0
 80a7494:	f001 f9f6 	bl	80a8884 <__tz_unlock>
 80a7498:	2301      	movs	r3, #1
 80a749a:	9304      	str	r3, [sp, #16]
 80a749c:	f8d6 c014 	ldr.w	ip, [r6, #20]
 80a74a0:	eba5 0e04 	sub.w	lr, r5, r4
 80a74a4:	4662      	mov	r2, ip
 80a74a6:	f1bc 0145 	subs.w	r1, ip, #69	; 0x45
 80a74aa:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80a74ae:	9102      	str	r1, [sp, #8]
 80a74b0:	f143 31ff 	adc.w	r1, r3, #4294967295
 80a74b4:	9103      	str	r1, [sp, #12]
 80a74b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80a74ba:	2800      	cmp	r0, #0
 80a74bc:	f171 0100 	sbcs.w	r1, r1, #0
 80a74c0:	eb07 0804 	add.w	r8, r7, r4
 80a74c4:	da05      	bge.n	80a74d2 <__strftime+0x6ea>
 80a74c6:	f1bc 0142 	subs.w	r1, ip, #66	; 0x42
 80a74ca:	f143 33ff 	adc.w	r3, r3, #4294967295
 80a74ce:	9102      	str	r1, [sp, #8]
 80a74d0:	9303      	str	r3, [sp, #12]
 80a74d2:	9b02      	ldr	r3, [sp, #8]
 80a74d4:	f10c 32ff 	add.w	r2, ip, #4294967295
 80a74d8:	0898      	lsrs	r0, r3, #2
 80a74da:	9b03      	ldr	r3, [sp, #12]
 80a74dc:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 80a74e0:	1099      	asrs	r1, r3, #2
 80a74e2:	2364      	movs	r3, #100	; 0x64
 80a74e4:	fb92 f3f3 	sdiv	r3, r2, r3
 80a74e8:	1ac0      	subs	r0, r0, r3
 80a74ea:	eb61 71e3 	sbc.w	r1, r1, r3, asr #31
 80a74ee:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80a74f2:	f20c 122b 	addw	r2, ip, #299	; 0x12b
 80a74f6:	fb92 f3f3 	sdiv	r3, r2, r3
 80a74fa:	18c0      	adds	r0, r0, r3
 80a74fc:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
 80a7500:	f240 136d 	movw	r3, #365	; 0x16d
 80a7504:	f1ac 0c46 	sub.w	ip, ip, #70	; 0x46
 80a7508:	fb03 fc0c 	mul.w	ip, r3, ip
 80a750c:	eb10 000c 	adds.w	r0, r0, ip
 80a7510:	eb41 71ec 	adc.w	r1, r1, ip, asr #31
 80a7514:	f04f 0c18 	mov.w	ip, #24
 80a7518:	69f3      	ldr	r3, [r6, #28]
 80a751a:	18c0      	adds	r0, r0, r3
 80a751c:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
 80a7520:	fba0 230c 	umull	r2, r3, r0, ip
 80a7524:	fb0c 3301 	mla	r3, ip, r1, r3
 80a7528:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
 80a752c:	68b1      	ldr	r1, [r6, #8]
 80a752e:	1852      	adds	r2, r2, r1
 80a7530:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
 80a7534:	fba2 010c 	umull	r0, r1, r2, ip
 80a7538:	fb0c 1103 	mla	r1, ip, r3, r1
 80a753c:	6873      	ldr	r3, [r6, #4]
 80a753e:	18c0      	adds	r0, r0, r3
 80a7540:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
 80a7544:	fba0 230c 	umull	r2, r3, r0, ip
 80a7548:	fb0c 3301 	mla	r3, ip, r1, r3
 80a754c:	6831      	ldr	r1, [r6, #0]
 80a754e:	4640      	mov	r0, r8
 80a7550:	1852      	adds	r2, r2, r1
 80a7552:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
 80a7556:	ebb2 0209 	subs.w	r2, r2, r9
 80a755a:	eb63 73e9 	sbc.w	r3, r3, r9, asr #31
 80a755e:	e9cd 2300 	strd	r2, r3, [sp]
 80a7562:	4671      	mov	r1, lr
 80a7564:	4a13      	ldr	r2, [pc, #76]	; (80a75b4 <__strftime+0x7cc>)
 80a7566:	f7fc fa2b 	bl	80a39c0 <sniprintf>
 80a756a:	e5fa      	b.n	80a7162 <__strftime+0x37a>
 80a756c:	f04f 0900 	mov.w	r9, #0
 80a7570:	e794      	b.n	80a749c <__strftime+0x6b4>
 80a7572:	6833      	ldr	r3, [r6, #0]
 80a7574:	e664      	b.n	80a7240 <__strftime+0x458>
 80a7576:	1e6b      	subs	r3, r5, #1
 80a7578:	42a3      	cmp	r3, r4
 80a757a:	f67f ac67 	bls.w	80a6e4c <__strftime+0x64>
 80a757e:	2309      	movs	r3, #9
 80a7580:	e741      	b.n	80a7406 <__strftime+0x61e>
 80a7582:	6833      	ldr	r3, [r6, #0]
 80a7584:	4a0c      	ldr	r2, [pc, #48]	; (80a75b8 <__strftime+0x7d0>)
 80a7586:	9301      	str	r3, [sp, #4]
 80a7588:	6873      	ldr	r3, [r6, #4]
 80a758a:	9300      	str	r3, [sp, #0]
 80a758c:	68b3      	ldr	r3, [r6, #8]
 80a758e:	e5d9      	b.n	80a7144 <__strftime+0x35c>
 80a7590:	fffff894 	.word	0xfffff894
 80a7594:	fffff895 	.word	0xfffff895
 80a7598:	080aa7de 	.word	0x080aa7de
 80a759c:	080aa7c3 	.word	0x080aa7c3
 80a75a0:	080aa7d1 	.word	0x080aa7d1
 80a75a4:	080aa7e2 	.word	0x080aa7e2
 80a75a8:	080aa98c 	.word	0x080aa98c
 80a75ac:	080aaac5 	.word	0x080aaac5
 80a75b0:	080aa7f1 	.word	0x080aa7f1
 80a75b4:	080aa7e7 	.word	0x080aa7e7
 80a75b8:	080aa7ec 	.word	0x080aa7ec
 80a75bc:	1e6b      	subs	r3, r5, #1
 80a75be:	42a3      	cmp	r3, r4
 80a75c0:	f67f ac44 	bls.w	80a6e4c <__strftime+0x64>
 80a75c4:	69b3      	ldr	r3, [r6, #24]
 80a75c6:	193a      	adds	r2, r7, r4
 80a75c8:	3401      	adds	r4, #1
 80a75ca:	b913      	cbnz	r3, 80a75d2 <__strftime+0x7ea>
 80a75cc:	2337      	movs	r3, #55	; 0x37
 80a75ce:	7013      	strb	r3, [r2, #0]
 80a75d0:	e50e      	b.n	80a6ff0 <__strftime+0x208>
 80a75d2:	3330      	adds	r3, #48	; 0x30
 80a75d4:	e7fb      	b.n	80a75ce <__strftime+0x7e6>
 80a75d6:	69f3      	ldr	r3, [r6, #28]
 80a75d8:	69b2      	ldr	r2, [r6, #24]
 80a75da:	3307      	adds	r3, #7
 80a75dc:	1a9b      	subs	r3, r3, r2
 80a75de:	2207      	movs	r2, #7
 80a75e0:	fb93 f3f2 	sdiv	r3, r3, r2
 80a75e4:	e62c      	b.n	80a7240 <__strftime+0x458>
 80a75e6:	4630      	mov	r0, r6
 80a75e8:	f7ff fb9c 	bl	80a6d24 <iso_year_adjust>
 80a75ec:	69b2      	ldr	r2, [r6, #24]
 80a75ee:	b132      	cbz	r2, 80a75fe <__strftime+0x816>
 80a75f0:	3a01      	subs	r2, #1
 80a75f2:	2800      	cmp	r0, #0
 80a75f4:	dc27      	bgt.n	80a7646 <__strftime+0x85e>
 80a75f6:	69f3      	ldr	r3, [r6, #28]
 80a75f8:	d103      	bne.n	80a7602 <__strftime+0x81a>
 80a75fa:	330a      	adds	r3, #10
 80a75fc:	e7ee      	b.n	80a75dc <__strftime+0x7f4>
 80a75fe:	2206      	movs	r2, #6
 80a7600:	e7f7      	b.n	80a75f2 <__strftime+0x80a>
 80a7602:	6970      	ldr	r0, [r6, #20]
 80a7604:	1ad3      	subs	r3, r2, r3
 80a7606:	2800      	cmp	r0, #0
 80a7608:	f240 726b 	movw	r2, #1899	; 0x76b
 80a760c:	bfa8      	it	ge
 80a760e:	f06f 0264 	mvnge.w	r2, #100	; 0x64
 80a7612:	4410      	add	r0, r2
 80a7614:	0782      	lsls	r2, r0, #30
 80a7616:	d105      	bne.n	80a7624 <__strftime+0x83c>
 80a7618:	2264      	movs	r2, #100	; 0x64
 80a761a:	fb90 f1f2 	sdiv	r1, r0, r2
 80a761e:	fb02 0111 	mls	r1, r2, r1, r0
 80a7622:	b971      	cbnz	r1, 80a7642 <__strftime+0x85a>
 80a7624:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80a7628:	fb90 f2f1 	sdiv	r2, r0, r1
 80a762c:	fb01 0212 	mls	r2, r1, r2, r0
 80a7630:	fab2 f282 	clz	r2, r2
 80a7634:	0952      	lsrs	r2, r2, #5
 80a7636:	1a9a      	subs	r2, r3, r2
 80a7638:	2a05      	cmp	r2, #5
 80a763a:	bfb4      	ite	lt
 80a763c:	2335      	movlt	r3, #53	; 0x35
 80a763e:	2334      	movge	r3, #52	; 0x34
 80a7640:	e5fe      	b.n	80a7240 <__strftime+0x458>
 80a7642:	2201      	movs	r2, #1
 80a7644:	e7f7      	b.n	80a7636 <__strftime+0x84e>
 80a7646:	2301      	movs	r3, #1
 80a7648:	e5fa      	b.n	80a7240 <__strftime+0x458>
 80a764a:	1e6b      	subs	r3, r5, #1
 80a764c:	42a3      	cmp	r3, r4
 80a764e:	f67f abfd 	bls.w	80a6e4c <__strftime+0x64>
 80a7652:	69b3      	ldr	r3, [r6, #24]
 80a7654:	3330      	adds	r3, #48	; 0x30
 80a7656:	e6d6      	b.n	80a7406 <__strftime+0x61e>
 80a7658:	69b3      	ldr	r3, [r6, #24]
 80a765a:	b13b      	cbz	r3, 80a766c <__strftime+0x884>
 80a765c:	3b01      	subs	r3, #1
 80a765e:	69f2      	ldr	r2, [r6, #28]
 80a7660:	3207      	adds	r2, #7
 80a7662:	1ad2      	subs	r2, r2, r3
 80a7664:	2307      	movs	r3, #7
 80a7666:	fb92 f3f3 	sdiv	r3, r2, r3
 80a766a:	e5e9      	b.n	80a7240 <__strftime+0x458>
 80a766c:	2306      	movs	r3, #6
 80a766e:	e7f6      	b.n	80a765e <__strftime+0x876>
 80a7670:	6970      	ldr	r0, [r6, #20]
 80a7672:	2800      	cmp	r0, #0
 80a7674:	db05      	blt.n	80a7682 <__strftime+0x89a>
 80a7676:	2264      	movs	r2, #100	; 0x64
 80a7678:	fb90 f3f2 	sdiv	r3, r0, r2
 80a767c:	fb03 0312 	mls	r3, r3, r2, r0
 80a7680:	e5de      	b.n	80a7240 <__strftime+0x458>
 80a7682:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80a7686:	f001 fa89 	bl	80a8b9c <abs>
 80a768a:	e7f4      	b.n	80a7676 <__strftime+0x88e>
 80a768c:	6973      	ldr	r3, [r6, #20]
 80a768e:	4a4d      	ldr	r2, [pc, #308]	; (80a77c4 <__strftime+0x9dc>)
 80a7690:	4293      	cmp	r3, r2
 80a7692:	da0c      	bge.n	80a76ae <__strftime+0x8c6>
 80a7694:	212d      	movs	r1, #45	; 0x2d
 80a7696:	eba2 0b03 	sub.w	fp, r2, r3
 80a769a:	f88d 1020 	strb.w	r1, [sp, #32]
 80a769e:	f1b8 0f00 	cmp.w	r8, #0
 80a76a2:	d001      	beq.n	80a76a8 <__strftime+0x8c0>
 80a76a4:	f108 38ff 	add.w	r8, r8, #4294967295
 80a76a8:	f10d 0321 	add.w	r3, sp, #33	; 0x21
 80a76ac:	e00c      	b.n	80a76c8 <__strftime+0x8e0>
 80a76ae:	f1b9 0f2b 	cmp.w	r9, #43	; 0x2b
 80a76b2:	f203 7b6c 	addw	fp, r3, #1900	; 0x76c
 80a76b6:	d106      	bne.n	80a76c6 <__strftime+0x8de>
 80a76b8:	f242 730f 	movw	r3, #9999	; 0x270f
 80a76bc:	459b      	cmp	fp, r3
 80a76be:	d902      	bls.n	80a76c6 <__strftime+0x8de>
 80a76c0:	f88d 9020 	strb.w	r9, [sp, #32]
 80a76c4:	e7eb      	b.n	80a769e <__strftime+0x8b6>
 80a76c6:	ab08      	add	r3, sp, #32
 80a76c8:	2225      	movs	r2, #37	; 0x25
 80a76ca:	701a      	strb	r2, [r3, #0]
 80a76cc:	f1b9 0f00 	cmp.w	r9, #0
 80a76d0:	d106      	bne.n	80a76e0 <__strftime+0x8f8>
 80a76d2:	1c58      	adds	r0, r3, #1
 80a76d4:	493c      	ldr	r1, [pc, #240]	; (80a77c8 <__strftime+0x9e0>)
 80a76d6:	f7ff fb1d 	bl	80a6d14 <strcpy>
 80a76da:	f8cd b000 	str.w	fp, [sp]
 80a76de:	e665      	b.n	80a73ac <__strftime+0x5c4>
 80a76e0:	2230      	movs	r2, #48	; 0x30
 80a76e2:	1c98      	adds	r0, r3, #2
 80a76e4:	705a      	strb	r2, [r3, #1]
 80a76e6:	e7f5      	b.n	80a76d4 <__strftime+0x8ec>
 80a76e8:	6a33      	ldr	r3, [r6, #32]
 80a76ea:	2b00      	cmp	r3, #0
 80a76ec:	f6ff ac80 	blt.w	80a6ff0 <__strftime+0x208>
 80a76f0:	f001 f8c2 	bl	80a8878 <__tz_lock>
 80a76f4:	9b04      	ldr	r3, [sp, #16]
 80a76f6:	b90b      	cbnz	r3, 80a76fc <__strftime+0x914>
 80a76f8:	f001 f8ca 	bl	80a8890 <_tzset_unlocked>
 80a76fc:	f001 fde8 	bl	80a92d0 <__gettzinfo>
 80a7700:	6a33      	ldr	r3, [r6, #32]
 80a7702:	eb07 0904 	add.w	r9, r7, r4
 80a7706:	2b00      	cmp	r3, #0
 80a7708:	bfcc      	ite	gt
 80a770a:	2350      	movgt	r3, #80	; 0x50
 80a770c:	2328      	movle	r3, #40	; 0x28
 80a770e:	58c3      	ldr	r3, [r0, r3]
 80a7710:	eba5 0b04 	sub.w	fp, r5, r4
 80a7714:	f1c3 0800 	rsb	r8, r3, #0
 80a7718:	f001 f8b4 	bl	80a8884 <__tz_unlock>
 80a771c:	233c      	movs	r3, #60	; 0x3c
 80a771e:	fb98 f0f3 	sdiv	r0, r8, r3
 80a7722:	f001 fe89 	bl	80a9438 <labs>
 80a7726:	233c      	movs	r3, #60	; 0x3c
 80a7728:	fb90 f2f3 	sdiv	r2, r0, r3
 80a772c:	fb02 0013 	mls	r0, r2, r3, r0
 80a7730:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80a7734:	9000      	str	r0, [sp, #0]
 80a7736:	fb98 f3f3 	sdiv	r3, r8, r3
 80a773a:	4659      	mov	r1, fp
 80a773c:	4648      	mov	r0, r9
 80a773e:	4a23      	ldr	r2, [pc, #140]	; (80a77cc <__strftime+0x9e4>)
 80a7740:	f7fc f93e 	bl	80a39c0 <sniprintf>
 80a7744:	2800      	cmp	r0, #0
 80a7746:	f6ff ab81 	blt.w	80a6e4c <__strftime+0x64>
 80a774a:	4404      	add	r4, r0
 80a774c:	42a5      	cmp	r5, r4
 80a774e:	f67f ab7d 	bls.w	80a6e4c <__strftime+0x64>
 80a7752:	2301      	movs	r3, #1
 80a7754:	9304      	str	r3, [sp, #16]
 80a7756:	e44b      	b.n	80a6ff0 <__strftime+0x208>
 80a7758:	6a33      	ldr	r3, [r6, #32]
 80a775a:	2b00      	cmp	r3, #0
 80a775c:	f6ff ac48 	blt.w	80a6ff0 <__strftime+0x208>
 80a7760:	f001 f88a 	bl	80a8878 <__tz_lock>
 80a7764:	9b04      	ldr	r3, [sp, #16]
 80a7766:	b90b      	cbnz	r3, 80a776c <__strftime+0x984>
 80a7768:	f001 f892 	bl	80a8890 <_tzset_unlocked>
 80a776c:	6a33      	ldr	r3, [r6, #32]
 80a776e:	4a18      	ldr	r2, [pc, #96]	; (80a77d0 <__strftime+0x9e8>)
 80a7770:	2b00      	cmp	r3, #0
 80a7772:	bfd4      	ite	le
 80a7774:	2300      	movle	r3, #0
 80a7776:	2301      	movgt	r3, #1
 80a7778:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
 80a777c:	4640      	mov	r0, r8
 80a777e:	f000 f833 	bl	80a77e8 <strlen>
 80a7782:	f108 38ff 	add.w	r8, r8, #4294967295
 80a7786:	4420      	add	r0, r4
 80a7788:	1e6b      	subs	r3, r5, #1
 80a778a:	42a0      	cmp	r0, r4
 80a778c:	d102      	bne.n	80a7794 <__strftime+0x9ac>
 80a778e:	f001 f879 	bl	80a8884 <__tz_unlock>
 80a7792:	e7de      	b.n	80a7752 <__strftime+0x96a>
 80a7794:	42a3      	cmp	r3, r4
 80a7796:	d904      	bls.n	80a77a2 <__strftime+0x9ba>
 80a7798:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 80a779c:	553a      	strb	r2, [r7, r4]
 80a779e:	3401      	adds	r4, #1
 80a77a0:	e7f3      	b.n	80a778a <__strftime+0x9a2>
 80a77a2:	f001 f86f 	bl	80a8884 <__tz_unlock>
 80a77a6:	f7ff bb51 	b.w	80a6e4c <__strftime+0x64>
 80a77aa:	1e6b      	subs	r3, r5, #1
 80a77ac:	42a3      	cmp	r3, r4
 80a77ae:	f67f ab4d 	bls.w	80a6e4c <__strftime+0x64>
 80a77b2:	2325      	movs	r3, #37	; 0x25
 80a77b4:	e627      	b.n	80a7406 <__strftime+0x61e>
 80a77b6:	b10d      	cbz	r5, 80a77bc <__strftime+0x9d4>
 80a77b8:	2300      	movs	r3, #0
 80a77ba:	553b      	strb	r3, [r7, r4]
 80a77bc:	4620      	mov	r0, r4
 80a77be:	b011      	add	sp, #68	; 0x44
 80a77c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a77c4:	fffff894 	.word	0xfffff894
 80a77c8:	080aa7de 	.word	0x080aa7de
 80a77cc:	080aa7fb 	.word	0x080aa7fb
 80a77d0:	20000078 	.word	0x20000078

080a77d4 <strftime>:
 80a77d4:	b513      	push	{r0, r1, r4, lr}
 80a77d6:	4c03      	ldr	r4, [pc, #12]	; (80a77e4 <strftime+0x10>)
 80a77d8:	9400      	str	r4, [sp, #0]
 80a77da:	f7ff fb05 	bl	80a6de8 <__strftime>
 80a77de:	b002      	add	sp, #8
 80a77e0:	bd10      	pop	{r4, pc}
 80a77e2:	bf00      	nop
 80a77e4:	200000dc 	.word	0x200000dc

080a77e8 <strlen>:
 80a77e8:	4603      	mov	r3, r0
 80a77ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a77ee:	2a00      	cmp	r2, #0
 80a77f0:	d1fb      	bne.n	80a77ea <strlen+0x2>
 80a77f2:	1a18      	subs	r0, r3, r0
 80a77f4:	3801      	subs	r0, #1
 80a77f6:	4770      	bx	lr

080a77f8 <strncmp>:
 80a77f8:	b510      	push	{r4, lr}
 80a77fa:	b16a      	cbz	r2, 80a7818 <strncmp+0x20>
 80a77fc:	3901      	subs	r1, #1
 80a77fe:	1884      	adds	r4, r0, r2
 80a7800:	f810 3b01 	ldrb.w	r3, [r0], #1
 80a7804:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80a7808:	4293      	cmp	r3, r2
 80a780a:	d103      	bne.n	80a7814 <strncmp+0x1c>
 80a780c:	42a0      	cmp	r0, r4
 80a780e:	d001      	beq.n	80a7814 <strncmp+0x1c>
 80a7810:	2b00      	cmp	r3, #0
 80a7812:	d1f5      	bne.n	80a7800 <strncmp+0x8>
 80a7814:	1a98      	subs	r0, r3, r2
 80a7816:	bd10      	pop	{r4, pc}
 80a7818:	4610      	mov	r0, r2
 80a781a:	e7fc      	b.n	80a7816 <strncmp+0x1e>

080a781c <strncpy>:
 80a781c:	4603      	mov	r3, r0
 80a781e:	b510      	push	{r4, lr}
 80a7820:	3901      	subs	r1, #1
 80a7822:	b132      	cbz	r2, 80a7832 <strncpy+0x16>
 80a7824:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80a7828:	3a01      	subs	r2, #1
 80a782a:	f803 4b01 	strb.w	r4, [r3], #1
 80a782e:	2c00      	cmp	r4, #0
 80a7830:	d1f7      	bne.n	80a7822 <strncpy+0x6>
 80a7832:	2100      	movs	r1, #0
 80a7834:	441a      	add	r2, r3
 80a7836:	4293      	cmp	r3, r2
 80a7838:	d100      	bne.n	80a783c <strncpy+0x20>
 80a783a:	bd10      	pop	{r4, pc}
 80a783c:	f803 1b01 	strb.w	r1, [r3], #1
 80a7840:	e7f9      	b.n	80a7836 <strncpy+0x1a>

080a7842 <sulp>:
 80a7842:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a7846:	460f      	mov	r7, r1
 80a7848:	4690      	mov	r8, r2
 80a784a:	f002 f90d 	bl	80a9a68 <__ulp>
 80a784e:	4604      	mov	r4, r0
 80a7850:	460d      	mov	r5, r1
 80a7852:	f1b8 0f00 	cmp.w	r8, #0
 80a7856:	d011      	beq.n	80a787c <sulp+0x3a>
 80a7858:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80a785c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80a7860:	2b00      	cmp	r3, #0
 80a7862:	dd0b      	ble.n	80a787c <sulp+0x3a>
 80a7864:	2400      	movs	r4, #0
 80a7866:	051b      	lsls	r3, r3, #20
 80a7868:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80a786c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80a7870:	4622      	mov	r2, r4
 80a7872:	462b      	mov	r3, r5
 80a7874:	f7fe f8cc 	bl	80a5a10 <__aeabi_dmul>
 80a7878:	4604      	mov	r4, r0
 80a787a:	460d      	mov	r5, r1
 80a787c:	4620      	mov	r0, r4
 80a787e:	4629      	mov	r1, r5
 80a7880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a7884:	0000      	movs	r0, r0
	...

080a7888 <_strtod_l>:
 80a7888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a788c:	469b      	mov	fp, r3
 80a788e:	2300      	movs	r3, #0
 80a7890:	b0a1      	sub	sp, #132	; 0x84
 80a7892:	931c      	str	r3, [sp, #112]	; 0x70
 80a7894:	4ba1      	ldr	r3, [pc, #644]	; (80a7b1c <_strtod_l+0x294>)
 80a7896:	4682      	mov	sl, r0
 80a7898:	681f      	ldr	r7, [r3, #0]
 80a789a:	460e      	mov	r6, r1
 80a789c:	4638      	mov	r0, r7
 80a789e:	9217      	str	r2, [sp, #92]	; 0x5c
 80a78a0:	f7ff ffa2 	bl	80a77e8 <strlen>
 80a78a4:	f04f 0800 	mov.w	r8, #0
 80a78a8:	4604      	mov	r4, r0
 80a78aa:	f04f 0900 	mov.w	r9, #0
 80a78ae:	961b      	str	r6, [sp, #108]	; 0x6c
 80a78b0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80a78b2:	781a      	ldrb	r2, [r3, #0]
 80a78b4:	2a2b      	cmp	r2, #43	; 0x2b
 80a78b6:	d04c      	beq.n	80a7952 <_strtod_l+0xca>
 80a78b8:	d83a      	bhi.n	80a7930 <_strtod_l+0xa8>
 80a78ba:	2a0d      	cmp	r2, #13
 80a78bc:	d833      	bhi.n	80a7926 <_strtod_l+0x9e>
 80a78be:	2a08      	cmp	r2, #8
 80a78c0:	d833      	bhi.n	80a792a <_strtod_l+0xa2>
 80a78c2:	2a00      	cmp	r2, #0
 80a78c4:	d03d      	beq.n	80a7942 <_strtod_l+0xba>
 80a78c6:	2300      	movs	r3, #0
 80a78c8:	930c      	str	r3, [sp, #48]	; 0x30
 80a78ca:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80a78cc:	782b      	ldrb	r3, [r5, #0]
 80a78ce:	2b30      	cmp	r3, #48	; 0x30
 80a78d0:	f040 80af 	bne.w	80a7a32 <_strtod_l+0x1aa>
 80a78d4:	786b      	ldrb	r3, [r5, #1]
 80a78d6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80a78da:	2b58      	cmp	r3, #88	; 0x58
 80a78dc:	d16c      	bne.n	80a79b8 <_strtod_l+0x130>
 80a78de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80a78e0:	4650      	mov	r0, sl
 80a78e2:	9301      	str	r3, [sp, #4]
 80a78e4:	ab1c      	add	r3, sp, #112	; 0x70
 80a78e6:	9300      	str	r3, [sp, #0]
 80a78e8:	4a8d      	ldr	r2, [pc, #564]	; (80a7b20 <_strtod_l+0x298>)
 80a78ea:	f8cd b008 	str.w	fp, [sp, #8]
 80a78ee:	ab1d      	add	r3, sp, #116	; 0x74
 80a78f0:	a91b      	add	r1, sp, #108	; 0x6c
 80a78f2:	f001 f9bf 	bl	80a8c74 <__gethex>
 80a78f6:	f010 0607 	ands.w	r6, r0, #7
 80a78fa:	4604      	mov	r4, r0
 80a78fc:	d005      	beq.n	80a790a <_strtod_l+0x82>
 80a78fe:	2e06      	cmp	r6, #6
 80a7900:	d129      	bne.n	80a7956 <_strtod_l+0xce>
 80a7902:	2300      	movs	r3, #0
 80a7904:	3501      	adds	r5, #1
 80a7906:	951b      	str	r5, [sp, #108]	; 0x6c
 80a7908:	930c      	str	r3, [sp, #48]	; 0x30
 80a790a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a790c:	2b00      	cmp	r3, #0
 80a790e:	f040 8596 	bne.w	80a843e <_strtod_l+0xbb6>
 80a7912:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80a7914:	b1d3      	cbz	r3, 80a794c <_strtod_l+0xc4>
 80a7916:	4642      	mov	r2, r8
 80a7918:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80a791c:	4610      	mov	r0, r2
 80a791e:	4619      	mov	r1, r3
 80a7920:	b021      	add	sp, #132	; 0x84
 80a7922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a7926:	2a20      	cmp	r2, #32
 80a7928:	d1cd      	bne.n	80a78c6 <_strtod_l+0x3e>
 80a792a:	3301      	adds	r3, #1
 80a792c:	931b      	str	r3, [sp, #108]	; 0x6c
 80a792e:	e7bf      	b.n	80a78b0 <_strtod_l+0x28>
 80a7930:	2a2d      	cmp	r2, #45	; 0x2d
 80a7932:	d1c8      	bne.n	80a78c6 <_strtod_l+0x3e>
 80a7934:	2201      	movs	r2, #1
 80a7936:	920c      	str	r2, [sp, #48]	; 0x30
 80a7938:	1c5a      	adds	r2, r3, #1
 80a793a:	921b      	str	r2, [sp, #108]	; 0x6c
 80a793c:	785b      	ldrb	r3, [r3, #1]
 80a793e:	2b00      	cmp	r3, #0
 80a7940:	d1c3      	bne.n	80a78ca <_strtod_l+0x42>
 80a7942:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a7944:	961b      	str	r6, [sp, #108]	; 0x6c
 80a7946:	2b00      	cmp	r3, #0
 80a7948:	f040 8577 	bne.w	80a843a <_strtod_l+0xbb2>
 80a794c:	4642      	mov	r2, r8
 80a794e:	464b      	mov	r3, r9
 80a7950:	e7e4      	b.n	80a791c <_strtod_l+0x94>
 80a7952:	2200      	movs	r2, #0
 80a7954:	e7ef      	b.n	80a7936 <_strtod_l+0xae>
 80a7956:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80a7958:	b13a      	cbz	r2, 80a796a <_strtod_l+0xe2>
 80a795a:	2135      	movs	r1, #53	; 0x35
 80a795c:	a81e      	add	r0, sp, #120	; 0x78
 80a795e:	f002 f97a 	bl	80a9c56 <__copybits>
 80a7962:	4650      	mov	r0, sl
 80a7964:	991c      	ldr	r1, [sp, #112]	; 0x70
 80a7966:	f001 fdb5 	bl	80a94d4 <_Bfree>
 80a796a:	3e01      	subs	r6, #1
 80a796c:	2e05      	cmp	r6, #5
 80a796e:	d807      	bhi.n	80a7980 <_strtod_l+0xf8>
 80a7970:	e8df f006 	tbb	[pc, r6]
 80a7974:	1d180b0e 	.word	0x1d180b0e
 80a7978:	030e      	.short	0x030e
 80a797a:	f04f 0900 	mov.w	r9, #0
 80a797e:	46c8      	mov	r8, r9
 80a7980:	0721      	lsls	r1, r4, #28
 80a7982:	d5c2      	bpl.n	80a790a <_strtod_l+0x82>
 80a7984:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 80a7988:	e7bf      	b.n	80a790a <_strtod_l+0x82>
 80a798a:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 80a798e:	e7f7      	b.n	80a7980 <_strtod_l+0xf8>
 80a7990:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80a7992:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 80a7996:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80a799a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80a799e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80a79a2:	e7ed      	b.n	80a7980 <_strtod_l+0xf8>
 80a79a4:	f04f 0800 	mov.w	r8, #0
 80a79a8:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80a7b24 <_strtod_l+0x29c>
 80a79ac:	e7e8      	b.n	80a7980 <_strtod_l+0xf8>
 80a79ae:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80a79b2:	f04f 38ff 	mov.w	r8, #4294967295
 80a79b6:	e7e3      	b.n	80a7980 <_strtod_l+0xf8>
 80a79b8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80a79ba:	1c5a      	adds	r2, r3, #1
 80a79bc:	921b      	str	r2, [sp, #108]	; 0x6c
 80a79be:	785b      	ldrb	r3, [r3, #1]
 80a79c0:	2b30      	cmp	r3, #48	; 0x30
 80a79c2:	d0f9      	beq.n	80a79b8 <_strtod_l+0x130>
 80a79c4:	2b00      	cmp	r3, #0
 80a79c6:	d0a0      	beq.n	80a790a <_strtod_l+0x82>
 80a79c8:	2301      	movs	r3, #1
 80a79ca:	9307      	str	r3, [sp, #28]
 80a79cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80a79ce:	220a      	movs	r2, #10
 80a79d0:	9308      	str	r3, [sp, #32]
 80a79d2:	2300      	movs	r3, #0
 80a79d4:	469b      	mov	fp, r3
 80a79d6:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80a79da:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80a79dc:	7805      	ldrb	r5, [r0, #0]
 80a79de:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 80a79e2:	b2d9      	uxtb	r1, r3
 80a79e4:	2909      	cmp	r1, #9
 80a79e6:	d926      	bls.n	80a7a36 <_strtod_l+0x1ae>
 80a79e8:	4622      	mov	r2, r4
 80a79ea:	4639      	mov	r1, r7
 80a79ec:	f7ff ff04 	bl	80a77f8 <strncmp>
 80a79f0:	2800      	cmp	r0, #0
 80a79f2:	d032      	beq.n	80a7a5a <_strtod_l+0x1d2>
 80a79f4:	2000      	movs	r0, #0
 80a79f6:	462b      	mov	r3, r5
 80a79f8:	465c      	mov	r4, fp
 80a79fa:	4602      	mov	r2, r0
 80a79fc:	9004      	str	r0, [sp, #16]
 80a79fe:	2b65      	cmp	r3, #101	; 0x65
 80a7a00:	d001      	beq.n	80a7a06 <_strtod_l+0x17e>
 80a7a02:	2b45      	cmp	r3, #69	; 0x45
 80a7a04:	d113      	bne.n	80a7a2e <_strtod_l+0x1a6>
 80a7a06:	b91c      	cbnz	r4, 80a7a10 <_strtod_l+0x188>
 80a7a08:	9b07      	ldr	r3, [sp, #28]
 80a7a0a:	4303      	orrs	r3, r0
 80a7a0c:	d099      	beq.n	80a7942 <_strtod_l+0xba>
 80a7a0e:	2400      	movs	r4, #0
 80a7a10:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80a7a12:	1c73      	adds	r3, r6, #1
 80a7a14:	931b      	str	r3, [sp, #108]	; 0x6c
 80a7a16:	7873      	ldrb	r3, [r6, #1]
 80a7a18:	2b2b      	cmp	r3, #43	; 0x2b
 80a7a1a:	d078      	beq.n	80a7b0e <_strtod_l+0x286>
 80a7a1c:	2b2d      	cmp	r3, #45	; 0x2d
 80a7a1e:	d07b      	beq.n	80a7b18 <_strtod_l+0x290>
 80a7a20:	2700      	movs	r7, #0
 80a7a22:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80a7a26:	2909      	cmp	r1, #9
 80a7a28:	f240 8082 	bls.w	80a7b30 <_strtod_l+0x2a8>
 80a7a2c:	961b      	str	r6, [sp, #108]	; 0x6c
 80a7a2e:	2500      	movs	r5, #0
 80a7a30:	e09e      	b.n	80a7b70 <_strtod_l+0x2e8>
 80a7a32:	2300      	movs	r3, #0
 80a7a34:	e7c9      	b.n	80a79ca <_strtod_l+0x142>
 80a7a36:	f1bb 0f08 	cmp.w	fp, #8
 80a7a3a:	bfd5      	itete	le
 80a7a3c:	9906      	ldrle	r1, [sp, #24]
 80a7a3e:	9905      	ldrgt	r1, [sp, #20]
 80a7a40:	fb02 3301 	mlale	r3, r2, r1, r3
 80a7a44:	fb02 3301 	mlagt	r3, r2, r1, r3
 80a7a48:	f100 0001 	add.w	r0, r0, #1
 80a7a4c:	bfd4      	ite	le
 80a7a4e:	9306      	strle	r3, [sp, #24]
 80a7a50:	9305      	strgt	r3, [sp, #20]
 80a7a52:	f10b 0b01 	add.w	fp, fp, #1
 80a7a56:	901b      	str	r0, [sp, #108]	; 0x6c
 80a7a58:	e7bf      	b.n	80a79da <_strtod_l+0x152>
 80a7a5a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80a7a5c:	191a      	adds	r2, r3, r4
 80a7a5e:	921b      	str	r2, [sp, #108]	; 0x6c
 80a7a60:	5d1b      	ldrb	r3, [r3, r4]
 80a7a62:	f1bb 0f00 	cmp.w	fp, #0
 80a7a66:	d036      	beq.n	80a7ad6 <_strtod_l+0x24e>
 80a7a68:	465c      	mov	r4, fp
 80a7a6a:	9004      	str	r0, [sp, #16]
 80a7a6c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80a7a70:	2a09      	cmp	r2, #9
 80a7a72:	d912      	bls.n	80a7a9a <_strtod_l+0x212>
 80a7a74:	2201      	movs	r2, #1
 80a7a76:	e7c2      	b.n	80a79fe <_strtod_l+0x176>
 80a7a78:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80a7a7a:	3001      	adds	r0, #1
 80a7a7c:	1c5a      	adds	r2, r3, #1
 80a7a7e:	921b      	str	r2, [sp, #108]	; 0x6c
 80a7a80:	785b      	ldrb	r3, [r3, #1]
 80a7a82:	2b30      	cmp	r3, #48	; 0x30
 80a7a84:	d0f8      	beq.n	80a7a78 <_strtod_l+0x1f0>
 80a7a86:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80a7a8a:	2a08      	cmp	r2, #8
 80a7a8c:	f200 84dc 	bhi.w	80a8448 <_strtod_l+0xbc0>
 80a7a90:	9004      	str	r0, [sp, #16]
 80a7a92:	2000      	movs	r0, #0
 80a7a94:	4604      	mov	r4, r0
 80a7a96:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80a7a98:	9208      	str	r2, [sp, #32]
 80a7a9a:	3b30      	subs	r3, #48	; 0x30
 80a7a9c:	f100 0201 	add.w	r2, r0, #1
 80a7aa0:	d013      	beq.n	80a7aca <_strtod_l+0x242>
 80a7aa2:	9904      	ldr	r1, [sp, #16]
 80a7aa4:	1905      	adds	r5, r0, r4
 80a7aa6:	4411      	add	r1, r2
 80a7aa8:	9104      	str	r1, [sp, #16]
 80a7aaa:	4622      	mov	r2, r4
 80a7aac:	210a      	movs	r1, #10
 80a7aae:	42aa      	cmp	r2, r5
 80a7ab0:	d113      	bne.n	80a7ada <_strtod_l+0x252>
 80a7ab2:	1822      	adds	r2, r4, r0
 80a7ab4:	2a08      	cmp	r2, #8
 80a7ab6:	f104 0401 	add.w	r4, r4, #1
 80a7aba:	4404      	add	r4, r0
 80a7abc:	dc1b      	bgt.n	80a7af6 <_strtod_l+0x26e>
 80a7abe:	220a      	movs	r2, #10
 80a7ac0:	9906      	ldr	r1, [sp, #24]
 80a7ac2:	fb02 3301 	mla	r3, r2, r1, r3
 80a7ac6:	9306      	str	r3, [sp, #24]
 80a7ac8:	2200      	movs	r2, #0
 80a7aca:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80a7acc:	4610      	mov	r0, r2
 80a7ace:	1c59      	adds	r1, r3, #1
 80a7ad0:	911b      	str	r1, [sp, #108]	; 0x6c
 80a7ad2:	785b      	ldrb	r3, [r3, #1]
 80a7ad4:	e7ca      	b.n	80a7a6c <_strtod_l+0x1e4>
 80a7ad6:	4658      	mov	r0, fp
 80a7ad8:	e7d3      	b.n	80a7a82 <_strtod_l+0x1fa>
 80a7ada:	2a08      	cmp	r2, #8
 80a7adc:	dc04      	bgt.n	80a7ae8 <_strtod_l+0x260>
 80a7ade:	9f06      	ldr	r7, [sp, #24]
 80a7ae0:	434f      	muls	r7, r1
 80a7ae2:	9706      	str	r7, [sp, #24]
 80a7ae4:	3201      	adds	r2, #1
 80a7ae6:	e7e2      	b.n	80a7aae <_strtod_l+0x226>
 80a7ae8:	1c57      	adds	r7, r2, #1
 80a7aea:	2f10      	cmp	r7, #16
 80a7aec:	bfde      	ittt	le
 80a7aee:	9f05      	ldrle	r7, [sp, #20]
 80a7af0:	434f      	mulle	r7, r1
 80a7af2:	9705      	strle	r7, [sp, #20]
 80a7af4:	e7f6      	b.n	80a7ae4 <_strtod_l+0x25c>
 80a7af6:	2c10      	cmp	r4, #16
 80a7af8:	bfdf      	itttt	le
 80a7afa:	220a      	movle	r2, #10
 80a7afc:	9905      	ldrle	r1, [sp, #20]
 80a7afe:	fb02 3301 	mlale	r3, r2, r1, r3
 80a7b02:	9305      	strle	r3, [sp, #20]
 80a7b04:	e7e0      	b.n	80a7ac8 <_strtod_l+0x240>
 80a7b06:	2300      	movs	r3, #0
 80a7b08:	2201      	movs	r2, #1
 80a7b0a:	9304      	str	r3, [sp, #16]
 80a7b0c:	e77c      	b.n	80a7a08 <_strtod_l+0x180>
 80a7b0e:	2700      	movs	r7, #0
 80a7b10:	1cb3      	adds	r3, r6, #2
 80a7b12:	931b      	str	r3, [sp, #108]	; 0x6c
 80a7b14:	78b3      	ldrb	r3, [r6, #2]
 80a7b16:	e784      	b.n	80a7a22 <_strtod_l+0x19a>
 80a7b18:	2701      	movs	r7, #1
 80a7b1a:	e7f9      	b.n	80a7b10 <_strtod_l+0x288>
 80a7b1c:	080aabc8 	.word	0x080aabc8
 80a7b20:	080aa810 	.word	0x080aa810
 80a7b24:	7ff00000 	.word	0x7ff00000
 80a7b28:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80a7b2a:	1c59      	adds	r1, r3, #1
 80a7b2c:	911b      	str	r1, [sp, #108]	; 0x6c
 80a7b2e:	785b      	ldrb	r3, [r3, #1]
 80a7b30:	2b30      	cmp	r3, #48	; 0x30
 80a7b32:	d0f9      	beq.n	80a7b28 <_strtod_l+0x2a0>
 80a7b34:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 80a7b38:	2908      	cmp	r1, #8
 80a7b3a:	f63f af78 	bhi.w	80a7a2e <_strtod_l+0x1a6>
 80a7b3e:	f04f 0e0a 	mov.w	lr, #10
 80a7b42:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 80a7b46:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80a7b48:	9309      	str	r3, [sp, #36]	; 0x24
 80a7b4a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80a7b4c:	1c59      	adds	r1, r3, #1
 80a7b4e:	911b      	str	r1, [sp, #108]	; 0x6c
 80a7b50:	785b      	ldrb	r3, [r3, #1]
 80a7b52:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 80a7b56:	2d09      	cmp	r5, #9
 80a7b58:	d935      	bls.n	80a7bc6 <_strtod_l+0x33e>
 80a7b5a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80a7b5c:	1b49      	subs	r1, r1, r5
 80a7b5e:	2908      	cmp	r1, #8
 80a7b60:	f644 651f 	movw	r5, #19999	; 0x4e1f
 80a7b64:	dc02      	bgt.n	80a7b6c <_strtod_l+0x2e4>
 80a7b66:	4565      	cmp	r5, ip
 80a7b68:	bfa8      	it	ge
 80a7b6a:	4665      	movge	r5, ip
 80a7b6c:	b107      	cbz	r7, 80a7b70 <_strtod_l+0x2e8>
 80a7b6e:	426d      	negs	r5, r5
 80a7b70:	2c00      	cmp	r4, #0
 80a7b72:	d14c      	bne.n	80a7c0e <_strtod_l+0x386>
 80a7b74:	9907      	ldr	r1, [sp, #28]
 80a7b76:	4301      	orrs	r1, r0
 80a7b78:	f47f aec7 	bne.w	80a790a <_strtod_l+0x82>
 80a7b7c:	2a00      	cmp	r2, #0
 80a7b7e:	f47f aee0 	bne.w	80a7942 <_strtod_l+0xba>
 80a7b82:	2b69      	cmp	r3, #105	; 0x69
 80a7b84:	d026      	beq.n	80a7bd4 <_strtod_l+0x34c>
 80a7b86:	dc23      	bgt.n	80a7bd0 <_strtod_l+0x348>
 80a7b88:	2b49      	cmp	r3, #73	; 0x49
 80a7b8a:	d023      	beq.n	80a7bd4 <_strtod_l+0x34c>
 80a7b8c:	2b4e      	cmp	r3, #78	; 0x4e
 80a7b8e:	f47f aed8 	bne.w	80a7942 <_strtod_l+0xba>
 80a7b92:	499c      	ldr	r1, [pc, #624]	; (80a7e04 <_strtod_l+0x57c>)
 80a7b94:	a81b      	add	r0, sp, #108	; 0x6c
 80a7b96:	f001 faa9 	bl	80a90ec <__match>
 80a7b9a:	2800      	cmp	r0, #0
 80a7b9c:	f43f aed1 	beq.w	80a7942 <_strtod_l+0xba>
 80a7ba0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80a7ba2:	781b      	ldrb	r3, [r3, #0]
 80a7ba4:	2b28      	cmp	r3, #40	; 0x28
 80a7ba6:	d12c      	bne.n	80a7c02 <_strtod_l+0x37a>
 80a7ba8:	4997      	ldr	r1, [pc, #604]	; (80a7e08 <_strtod_l+0x580>)
 80a7baa:	aa1e      	add	r2, sp, #120	; 0x78
 80a7bac:	a81b      	add	r0, sp, #108	; 0x6c
 80a7bae:	f001 fab1 	bl	80a9114 <__hexnan>
 80a7bb2:	2805      	cmp	r0, #5
 80a7bb4:	d125      	bne.n	80a7c02 <_strtod_l+0x37a>
 80a7bb6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80a7bb8:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 80a7bbc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80a7bc0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80a7bc4:	e6a1      	b.n	80a790a <_strtod_l+0x82>
 80a7bc6:	fb0e 3c0c 	mla	ip, lr, ip, r3
 80a7bca:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 80a7bce:	e7bc      	b.n	80a7b4a <_strtod_l+0x2c2>
 80a7bd0:	2b6e      	cmp	r3, #110	; 0x6e
 80a7bd2:	e7dc      	b.n	80a7b8e <_strtod_l+0x306>
 80a7bd4:	498d      	ldr	r1, [pc, #564]	; (80a7e0c <_strtod_l+0x584>)
 80a7bd6:	a81b      	add	r0, sp, #108	; 0x6c
 80a7bd8:	f001 fa88 	bl	80a90ec <__match>
 80a7bdc:	2800      	cmp	r0, #0
 80a7bde:	f43f aeb0 	beq.w	80a7942 <_strtod_l+0xba>
 80a7be2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80a7be4:	498a      	ldr	r1, [pc, #552]	; (80a7e10 <_strtod_l+0x588>)
 80a7be6:	3b01      	subs	r3, #1
 80a7be8:	a81b      	add	r0, sp, #108	; 0x6c
 80a7bea:	931b      	str	r3, [sp, #108]	; 0x6c
 80a7bec:	f001 fa7e 	bl	80a90ec <__match>
 80a7bf0:	b910      	cbnz	r0, 80a7bf8 <_strtod_l+0x370>
 80a7bf2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80a7bf4:	3301      	adds	r3, #1
 80a7bf6:	931b      	str	r3, [sp, #108]	; 0x6c
 80a7bf8:	f04f 0800 	mov.w	r8, #0
 80a7bfc:	f8df 9220 	ldr.w	r9, [pc, #544]	; 80a7e20 <_strtod_l+0x598>
 80a7c00:	e683      	b.n	80a790a <_strtod_l+0x82>
 80a7c02:	4884      	ldr	r0, [pc, #528]	; (80a7e14 <_strtod_l+0x58c>)
 80a7c04:	f002 f87a 	bl	80a9cfc <nan>
 80a7c08:	4680      	mov	r8, r0
 80a7c0a:	4689      	mov	r9, r1
 80a7c0c:	e67d      	b.n	80a790a <_strtod_l+0x82>
 80a7c0e:	9b04      	ldr	r3, [sp, #16]
 80a7c10:	f1bb 0f00 	cmp.w	fp, #0
 80a7c14:	bf08      	it	eq
 80a7c16:	46a3      	moveq	fp, r4
 80a7c18:	1aeb      	subs	r3, r5, r3
 80a7c1a:	2c10      	cmp	r4, #16
 80a7c1c:	9806      	ldr	r0, [sp, #24]
 80a7c1e:	4626      	mov	r6, r4
 80a7c20:	9307      	str	r3, [sp, #28]
 80a7c22:	bfa8      	it	ge
 80a7c24:	2610      	movge	r6, #16
 80a7c26:	f7fd fe79 	bl	80a591c <__aeabi_ui2d>
 80a7c2a:	2c09      	cmp	r4, #9
 80a7c2c:	4680      	mov	r8, r0
 80a7c2e:	4689      	mov	r9, r1
 80a7c30:	dd13      	ble.n	80a7c5a <_strtod_l+0x3d2>
 80a7c32:	4b79      	ldr	r3, [pc, #484]	; (80a7e18 <_strtod_l+0x590>)
 80a7c34:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80a7c38:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80a7c3c:	f7fd fee8 	bl	80a5a10 <__aeabi_dmul>
 80a7c40:	4680      	mov	r8, r0
 80a7c42:	9805      	ldr	r0, [sp, #20]
 80a7c44:	4689      	mov	r9, r1
 80a7c46:	f7fd fe69 	bl	80a591c <__aeabi_ui2d>
 80a7c4a:	4602      	mov	r2, r0
 80a7c4c:	460b      	mov	r3, r1
 80a7c4e:	4640      	mov	r0, r8
 80a7c50:	4649      	mov	r1, r9
 80a7c52:	f7fd fd27 	bl	80a56a4 <__adddf3>
 80a7c56:	4680      	mov	r8, r0
 80a7c58:	4689      	mov	r9, r1
 80a7c5a:	2c0f      	cmp	r4, #15
 80a7c5c:	dc36      	bgt.n	80a7ccc <_strtod_l+0x444>
 80a7c5e:	9b07      	ldr	r3, [sp, #28]
 80a7c60:	2b00      	cmp	r3, #0
 80a7c62:	f43f ae52 	beq.w	80a790a <_strtod_l+0x82>
 80a7c66:	dd22      	ble.n	80a7cae <_strtod_l+0x426>
 80a7c68:	2b16      	cmp	r3, #22
 80a7c6a:	dc09      	bgt.n	80a7c80 <_strtod_l+0x3f8>
 80a7c6c:	4c6a      	ldr	r4, [pc, #424]	; (80a7e18 <_strtod_l+0x590>)
 80a7c6e:	4642      	mov	r2, r8
 80a7c70:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 80a7c74:	464b      	mov	r3, r9
 80a7c76:	e9d4 0100 	ldrd	r0, r1, [r4]
 80a7c7a:	f7fd fec9 	bl	80a5a10 <__aeabi_dmul>
 80a7c7e:	e7c3      	b.n	80a7c08 <_strtod_l+0x380>
 80a7c80:	9a07      	ldr	r2, [sp, #28]
 80a7c82:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80a7c86:	4293      	cmp	r3, r2
 80a7c88:	db20      	blt.n	80a7ccc <_strtod_l+0x444>
 80a7c8a:	4d63      	ldr	r5, [pc, #396]	; (80a7e18 <_strtod_l+0x590>)
 80a7c8c:	f1c4 040f 	rsb	r4, r4, #15
 80a7c90:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80a7c94:	4642      	mov	r2, r8
 80a7c96:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a7c9a:	464b      	mov	r3, r9
 80a7c9c:	f7fd feb8 	bl	80a5a10 <__aeabi_dmul>
 80a7ca0:	9b07      	ldr	r3, [sp, #28]
 80a7ca2:	1b1c      	subs	r4, r3, r4
 80a7ca4:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80a7ca8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80a7cac:	e7e5      	b.n	80a7c7a <_strtod_l+0x3f2>
 80a7cae:	9b07      	ldr	r3, [sp, #28]
 80a7cb0:	3316      	adds	r3, #22
 80a7cb2:	db0b      	blt.n	80a7ccc <_strtod_l+0x444>
 80a7cb4:	9b04      	ldr	r3, [sp, #16]
 80a7cb6:	4a58      	ldr	r2, [pc, #352]	; (80a7e18 <_strtod_l+0x590>)
 80a7cb8:	1b5d      	subs	r5, r3, r5
 80a7cba:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 80a7cbe:	4640      	mov	r0, r8
 80a7cc0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80a7cc4:	4649      	mov	r1, r9
 80a7cc6:	f7fd ffcd 	bl	80a5c64 <__aeabi_ddiv>
 80a7cca:	e79d      	b.n	80a7c08 <_strtod_l+0x380>
 80a7ccc:	9b07      	ldr	r3, [sp, #28]
 80a7cce:	1ba6      	subs	r6, r4, r6
 80a7cd0:	441e      	add	r6, r3
 80a7cd2:	2e00      	cmp	r6, #0
 80a7cd4:	dd71      	ble.n	80a7dba <_strtod_l+0x532>
 80a7cd6:	f016 030f 	ands.w	r3, r6, #15
 80a7cda:	d00a      	beq.n	80a7cf2 <_strtod_l+0x46a>
 80a7cdc:	494e      	ldr	r1, [pc, #312]	; (80a7e18 <_strtod_l+0x590>)
 80a7cde:	4642      	mov	r2, r8
 80a7ce0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80a7ce4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a7ce8:	464b      	mov	r3, r9
 80a7cea:	f7fd fe91 	bl	80a5a10 <__aeabi_dmul>
 80a7cee:	4680      	mov	r8, r0
 80a7cf0:	4689      	mov	r9, r1
 80a7cf2:	f036 060f 	bics.w	r6, r6, #15
 80a7cf6:	d050      	beq.n	80a7d9a <_strtod_l+0x512>
 80a7cf8:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 80a7cfc:	dd27      	ble.n	80a7d4e <_strtod_l+0x4c6>
 80a7cfe:	f04f 0b00 	mov.w	fp, #0
 80a7d02:	f8cd b010 	str.w	fp, [sp, #16]
 80a7d06:	f8cd b020 	str.w	fp, [sp, #32]
 80a7d0a:	f8cd b018 	str.w	fp, [sp, #24]
 80a7d0e:	2322      	movs	r3, #34	; 0x22
 80a7d10:	f04f 0800 	mov.w	r8, #0
 80a7d14:	f8df 9108 	ldr.w	r9, [pc, #264]	; 80a7e20 <_strtod_l+0x598>
 80a7d18:	f8ca 3000 	str.w	r3, [sl]
 80a7d1c:	9b08      	ldr	r3, [sp, #32]
 80a7d1e:	2b00      	cmp	r3, #0
 80a7d20:	f43f adf3 	beq.w	80a790a <_strtod_l+0x82>
 80a7d24:	4650      	mov	r0, sl
 80a7d26:	991c      	ldr	r1, [sp, #112]	; 0x70
 80a7d28:	f001 fbd4 	bl	80a94d4 <_Bfree>
 80a7d2c:	4650      	mov	r0, sl
 80a7d2e:	9906      	ldr	r1, [sp, #24]
 80a7d30:	f001 fbd0 	bl	80a94d4 <_Bfree>
 80a7d34:	4650      	mov	r0, sl
 80a7d36:	9904      	ldr	r1, [sp, #16]
 80a7d38:	f001 fbcc 	bl	80a94d4 <_Bfree>
 80a7d3c:	4650      	mov	r0, sl
 80a7d3e:	9908      	ldr	r1, [sp, #32]
 80a7d40:	f001 fbc8 	bl	80a94d4 <_Bfree>
 80a7d44:	4659      	mov	r1, fp
 80a7d46:	4650      	mov	r0, sl
 80a7d48:	f001 fbc4 	bl	80a94d4 <_Bfree>
 80a7d4c:	e5dd      	b.n	80a790a <_strtod_l+0x82>
 80a7d4e:	2300      	movs	r3, #0
 80a7d50:	4640      	mov	r0, r8
 80a7d52:	4649      	mov	r1, r9
 80a7d54:	461f      	mov	r7, r3
 80a7d56:	1136      	asrs	r6, r6, #4
 80a7d58:	2e01      	cmp	r6, #1
 80a7d5a:	dc21      	bgt.n	80a7da0 <_strtod_l+0x518>
 80a7d5c:	b10b      	cbz	r3, 80a7d62 <_strtod_l+0x4da>
 80a7d5e:	4680      	mov	r8, r0
 80a7d60:	4689      	mov	r9, r1
 80a7d62:	4b2e      	ldr	r3, [pc, #184]	; (80a7e1c <_strtod_l+0x594>)
 80a7d64:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80a7d68:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80a7d6c:	4642      	mov	r2, r8
 80a7d6e:	e9d7 0100 	ldrd	r0, r1, [r7]
 80a7d72:	464b      	mov	r3, r9
 80a7d74:	f7fd fe4c 	bl	80a5a10 <__aeabi_dmul>
 80a7d78:	4b29      	ldr	r3, [pc, #164]	; (80a7e20 <_strtod_l+0x598>)
 80a7d7a:	460a      	mov	r2, r1
 80a7d7c:	400b      	ands	r3, r1
 80a7d7e:	4929      	ldr	r1, [pc, #164]	; (80a7e24 <_strtod_l+0x59c>)
 80a7d80:	4680      	mov	r8, r0
 80a7d82:	428b      	cmp	r3, r1
 80a7d84:	d8bb      	bhi.n	80a7cfe <_strtod_l+0x476>
 80a7d86:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80a7d8a:	428b      	cmp	r3, r1
 80a7d8c:	bf86      	itte	hi
 80a7d8e:	f04f 38ff 	movhi.w	r8, #4294967295
 80a7d92:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 80a7e28 <_strtod_l+0x5a0>
 80a7d96:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80a7d9a:	2300      	movs	r3, #0
 80a7d9c:	9305      	str	r3, [sp, #20]
 80a7d9e:	e07e      	b.n	80a7e9e <_strtod_l+0x616>
 80a7da0:	07f2      	lsls	r2, r6, #31
 80a7da2:	d507      	bpl.n	80a7db4 <_strtod_l+0x52c>
 80a7da4:	4b1d      	ldr	r3, [pc, #116]	; (80a7e1c <_strtod_l+0x594>)
 80a7da6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80a7daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a7dae:	f7fd fe2f 	bl	80a5a10 <__aeabi_dmul>
 80a7db2:	2301      	movs	r3, #1
 80a7db4:	3701      	adds	r7, #1
 80a7db6:	1076      	asrs	r6, r6, #1
 80a7db8:	e7ce      	b.n	80a7d58 <_strtod_l+0x4d0>
 80a7dba:	d0ee      	beq.n	80a7d9a <_strtod_l+0x512>
 80a7dbc:	4276      	negs	r6, r6
 80a7dbe:	f016 020f 	ands.w	r2, r6, #15
 80a7dc2:	d00a      	beq.n	80a7dda <_strtod_l+0x552>
 80a7dc4:	4b14      	ldr	r3, [pc, #80]	; (80a7e18 <_strtod_l+0x590>)
 80a7dc6:	4640      	mov	r0, r8
 80a7dc8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80a7dcc:	4649      	mov	r1, r9
 80a7dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a7dd2:	f7fd ff47 	bl	80a5c64 <__aeabi_ddiv>
 80a7dd6:	4680      	mov	r8, r0
 80a7dd8:	4689      	mov	r9, r1
 80a7dda:	1136      	asrs	r6, r6, #4
 80a7ddc:	d0dd      	beq.n	80a7d9a <_strtod_l+0x512>
 80a7dde:	2e1f      	cmp	r6, #31
 80a7de0:	dd24      	ble.n	80a7e2c <_strtod_l+0x5a4>
 80a7de2:	f04f 0b00 	mov.w	fp, #0
 80a7de6:	f8cd b010 	str.w	fp, [sp, #16]
 80a7dea:	f8cd b020 	str.w	fp, [sp, #32]
 80a7dee:	f8cd b018 	str.w	fp, [sp, #24]
 80a7df2:	2322      	movs	r3, #34	; 0x22
 80a7df4:	f04f 0800 	mov.w	r8, #0
 80a7df8:	f04f 0900 	mov.w	r9, #0
 80a7dfc:	f8ca 3000 	str.w	r3, [sl]
 80a7e00:	e78c      	b.n	80a7d1c <_strtod_l+0x494>
 80a7e02:	bf00      	nop
 80a7e04:	080aa861 	.word	0x080aa861
 80a7e08:	080aa824 	.word	0x080aa824
 80a7e0c:	080aa4a5 	.word	0x080aa4a5
 80a7e10:	080aa807 	.word	0x080aa807
 80a7e14:	080aa2c3 	.word	0x080aa2c3
 80a7e18:	080aac08 	.word	0x080aac08
 80a7e1c:	080aabe0 	.word	0x080aabe0
 80a7e20:	7ff00000 	.word	0x7ff00000
 80a7e24:	7ca00000 	.word	0x7ca00000
 80a7e28:	7fefffff 	.word	0x7fefffff
 80a7e2c:	f016 0310 	ands.w	r3, r6, #16
 80a7e30:	bf18      	it	ne
 80a7e32:	236a      	movne	r3, #106	; 0x6a
 80a7e34:	4640      	mov	r0, r8
 80a7e36:	9305      	str	r3, [sp, #20]
 80a7e38:	4649      	mov	r1, r9
 80a7e3a:	2300      	movs	r3, #0
 80a7e3c:	4fb2      	ldr	r7, [pc, #712]	; (80a8108 <_strtod_l+0x880>)
 80a7e3e:	07f2      	lsls	r2, r6, #31
 80a7e40:	d504      	bpl.n	80a7e4c <_strtod_l+0x5c4>
 80a7e42:	e9d7 2300 	ldrd	r2, r3, [r7]
 80a7e46:	f7fd fde3 	bl	80a5a10 <__aeabi_dmul>
 80a7e4a:	2301      	movs	r3, #1
 80a7e4c:	1076      	asrs	r6, r6, #1
 80a7e4e:	f107 0708 	add.w	r7, r7, #8
 80a7e52:	d1f4      	bne.n	80a7e3e <_strtod_l+0x5b6>
 80a7e54:	b10b      	cbz	r3, 80a7e5a <_strtod_l+0x5d2>
 80a7e56:	4680      	mov	r8, r0
 80a7e58:	4689      	mov	r9, r1
 80a7e5a:	9b05      	ldr	r3, [sp, #20]
 80a7e5c:	b1bb      	cbz	r3, 80a7e8e <_strtod_l+0x606>
 80a7e5e:	f3c9 530a 	ubfx	r3, r9, #20, #11
 80a7e62:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80a7e66:	2b00      	cmp	r3, #0
 80a7e68:	4649      	mov	r1, r9
 80a7e6a:	dd10      	ble.n	80a7e8e <_strtod_l+0x606>
 80a7e6c:	2b1f      	cmp	r3, #31
 80a7e6e:	f340 812b 	ble.w	80a80c8 <_strtod_l+0x840>
 80a7e72:	2b34      	cmp	r3, #52	; 0x34
 80a7e74:	bfd8      	it	le
 80a7e76:	f04f 32ff 	movle.w	r2, #4294967295
 80a7e7a:	f04f 0800 	mov.w	r8, #0
 80a7e7e:	bfcf      	iteee	gt
 80a7e80:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80a7e84:	3b20      	suble	r3, #32
 80a7e86:	fa02 f303 	lslle.w	r3, r2, r3
 80a7e8a:	ea03 0901 	andle.w	r9, r3, r1
 80a7e8e:	2200      	movs	r2, #0
 80a7e90:	2300      	movs	r3, #0
 80a7e92:	4640      	mov	r0, r8
 80a7e94:	4649      	mov	r1, r9
 80a7e96:	f7fe f823 	bl	80a5ee0 <__aeabi_dcmpeq>
 80a7e9a:	2800      	cmp	r0, #0
 80a7e9c:	d1a1      	bne.n	80a7de2 <_strtod_l+0x55a>
 80a7e9e:	9b06      	ldr	r3, [sp, #24]
 80a7ea0:	465a      	mov	r2, fp
 80a7ea2:	9300      	str	r3, [sp, #0]
 80a7ea4:	4650      	mov	r0, sl
 80a7ea6:	4623      	mov	r3, r4
 80a7ea8:	9908      	ldr	r1, [sp, #32]
 80a7eaa:	f001 fb68 	bl	80a957e <__s2b>
 80a7eae:	9008      	str	r0, [sp, #32]
 80a7eb0:	2800      	cmp	r0, #0
 80a7eb2:	f43f af24 	beq.w	80a7cfe <_strtod_l+0x476>
 80a7eb6:	9b04      	ldr	r3, [sp, #16]
 80a7eb8:	f04f 0b00 	mov.w	fp, #0
 80a7ebc:	1b5d      	subs	r5, r3, r5
 80a7ebe:	9b07      	ldr	r3, [sp, #28]
 80a7ec0:	f8cd b010 	str.w	fp, [sp, #16]
 80a7ec4:	2b00      	cmp	r3, #0
 80a7ec6:	bfb4      	ite	lt
 80a7ec8:	462b      	movlt	r3, r5
 80a7eca:	2300      	movge	r3, #0
 80a7ecc:	930e      	str	r3, [sp, #56]	; 0x38
 80a7ece:	9b07      	ldr	r3, [sp, #28]
 80a7ed0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80a7ed4:	9316      	str	r3, [sp, #88]	; 0x58
 80a7ed6:	9b08      	ldr	r3, [sp, #32]
 80a7ed8:	4650      	mov	r0, sl
 80a7eda:	6859      	ldr	r1, [r3, #4]
 80a7edc:	f001 fac6 	bl	80a946c <_Balloc>
 80a7ee0:	9006      	str	r0, [sp, #24]
 80a7ee2:	2800      	cmp	r0, #0
 80a7ee4:	f43f af13 	beq.w	80a7d0e <_strtod_l+0x486>
 80a7ee8:	9b08      	ldr	r3, [sp, #32]
 80a7eea:	300c      	adds	r0, #12
 80a7eec:	691a      	ldr	r2, [r3, #16]
 80a7eee:	f103 010c 	add.w	r1, r3, #12
 80a7ef2:	3202      	adds	r2, #2
 80a7ef4:	0092      	lsls	r2, r2, #2
 80a7ef6:	f7fe fec9 	bl	80a6c8c <memcpy>
 80a7efa:	ab1e      	add	r3, sp, #120	; 0x78
 80a7efc:	9301      	str	r3, [sp, #4]
 80a7efe:	ab1d      	add	r3, sp, #116	; 0x74
 80a7f00:	9300      	str	r3, [sp, #0]
 80a7f02:	4642      	mov	r2, r8
 80a7f04:	464b      	mov	r3, r9
 80a7f06:	4650      	mov	r0, sl
 80a7f08:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 80a7f0c:	f001 fe26 	bl	80a9b5c <__d2b>
 80a7f10:	901c      	str	r0, [sp, #112]	; 0x70
 80a7f12:	2800      	cmp	r0, #0
 80a7f14:	f43f aefb 	beq.w	80a7d0e <_strtod_l+0x486>
 80a7f18:	2101      	movs	r1, #1
 80a7f1a:	4650      	mov	r0, sl
 80a7f1c:	f001 fbbb 	bl	80a9696 <__i2b>
 80a7f20:	4603      	mov	r3, r0
 80a7f22:	9004      	str	r0, [sp, #16]
 80a7f24:	2800      	cmp	r0, #0
 80a7f26:	f43f aef2 	beq.w	80a7d0e <_strtod_l+0x486>
 80a7f2a:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 80a7f2c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80a7f2e:	2d00      	cmp	r5, #0
 80a7f30:	bfab      	itete	ge
 80a7f32:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80a7f34:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80a7f36:	18ee      	addge	r6, r5, r3
 80a7f38:	1b5c      	sublt	r4, r3, r5
 80a7f3a:	9b05      	ldr	r3, [sp, #20]
 80a7f3c:	bfa8      	it	ge
 80a7f3e:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 80a7f40:	eba5 0503 	sub.w	r5, r5, r3
 80a7f44:	4415      	add	r5, r2
 80a7f46:	4b71      	ldr	r3, [pc, #452]	; (80a810c <_strtod_l+0x884>)
 80a7f48:	f105 35ff 	add.w	r5, r5, #4294967295
 80a7f4c:	bfb8      	it	lt
 80a7f4e:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 80a7f50:	429d      	cmp	r5, r3
 80a7f52:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80a7f56:	f280 80c9 	bge.w	80a80ec <_strtod_l+0x864>
 80a7f5a:	1b5b      	subs	r3, r3, r5
 80a7f5c:	2b1f      	cmp	r3, #31
 80a7f5e:	f04f 0701 	mov.w	r7, #1
 80a7f62:	eba2 0203 	sub.w	r2, r2, r3
 80a7f66:	f300 80b6 	bgt.w	80a80d6 <_strtod_l+0x84e>
 80a7f6a:	2500      	movs	r5, #0
 80a7f6c:	fa07 f303 	lsl.w	r3, r7, r3
 80a7f70:	930f      	str	r3, [sp, #60]	; 0x3c
 80a7f72:	18b7      	adds	r7, r6, r2
 80a7f74:	9b05      	ldr	r3, [sp, #20]
 80a7f76:	42be      	cmp	r6, r7
 80a7f78:	4414      	add	r4, r2
 80a7f7a:	441c      	add	r4, r3
 80a7f7c:	4633      	mov	r3, r6
 80a7f7e:	bfa8      	it	ge
 80a7f80:	463b      	movge	r3, r7
 80a7f82:	42a3      	cmp	r3, r4
 80a7f84:	bfa8      	it	ge
 80a7f86:	4623      	movge	r3, r4
 80a7f88:	2b00      	cmp	r3, #0
 80a7f8a:	bfc2      	ittt	gt
 80a7f8c:	1aff      	subgt	r7, r7, r3
 80a7f8e:	1ae4      	subgt	r4, r4, r3
 80a7f90:	1af6      	subgt	r6, r6, r3
 80a7f92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80a7f94:	2b00      	cmp	r3, #0
 80a7f96:	dd17      	ble.n	80a7fc8 <_strtod_l+0x740>
 80a7f98:	461a      	mov	r2, r3
 80a7f9a:	4650      	mov	r0, sl
 80a7f9c:	9904      	ldr	r1, [sp, #16]
 80a7f9e:	f001 fc1f 	bl	80a97e0 <__pow5mult>
 80a7fa2:	9004      	str	r0, [sp, #16]
 80a7fa4:	2800      	cmp	r0, #0
 80a7fa6:	f43f aeb2 	beq.w	80a7d0e <_strtod_l+0x486>
 80a7faa:	4601      	mov	r1, r0
 80a7fac:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80a7fae:	4650      	mov	r0, sl
 80a7fb0:	f001 fb7a 	bl	80a96a8 <__multiply>
 80a7fb4:	9009      	str	r0, [sp, #36]	; 0x24
 80a7fb6:	2800      	cmp	r0, #0
 80a7fb8:	f43f aea9 	beq.w	80a7d0e <_strtod_l+0x486>
 80a7fbc:	4650      	mov	r0, sl
 80a7fbe:	991c      	ldr	r1, [sp, #112]	; 0x70
 80a7fc0:	f001 fa88 	bl	80a94d4 <_Bfree>
 80a7fc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a7fc6:	931c      	str	r3, [sp, #112]	; 0x70
 80a7fc8:	2f00      	cmp	r7, #0
 80a7fca:	f300 8093 	bgt.w	80a80f4 <_strtod_l+0x86c>
 80a7fce:	9b07      	ldr	r3, [sp, #28]
 80a7fd0:	2b00      	cmp	r3, #0
 80a7fd2:	dd08      	ble.n	80a7fe6 <_strtod_l+0x75e>
 80a7fd4:	4650      	mov	r0, sl
 80a7fd6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80a7fd8:	9906      	ldr	r1, [sp, #24]
 80a7fda:	f001 fc01 	bl	80a97e0 <__pow5mult>
 80a7fde:	9006      	str	r0, [sp, #24]
 80a7fe0:	2800      	cmp	r0, #0
 80a7fe2:	f43f ae94 	beq.w	80a7d0e <_strtod_l+0x486>
 80a7fe6:	2c00      	cmp	r4, #0
 80a7fe8:	dd08      	ble.n	80a7ffc <_strtod_l+0x774>
 80a7fea:	4622      	mov	r2, r4
 80a7fec:	4650      	mov	r0, sl
 80a7fee:	9906      	ldr	r1, [sp, #24]
 80a7ff0:	f001 fc44 	bl	80a987c <__lshift>
 80a7ff4:	9006      	str	r0, [sp, #24]
 80a7ff6:	2800      	cmp	r0, #0
 80a7ff8:	f43f ae89 	beq.w	80a7d0e <_strtod_l+0x486>
 80a7ffc:	2e00      	cmp	r6, #0
 80a7ffe:	dd08      	ble.n	80a8012 <_strtod_l+0x78a>
 80a8000:	4632      	mov	r2, r6
 80a8002:	4650      	mov	r0, sl
 80a8004:	9904      	ldr	r1, [sp, #16]
 80a8006:	f001 fc39 	bl	80a987c <__lshift>
 80a800a:	9004      	str	r0, [sp, #16]
 80a800c:	2800      	cmp	r0, #0
 80a800e:	f43f ae7e 	beq.w	80a7d0e <_strtod_l+0x486>
 80a8012:	4650      	mov	r0, sl
 80a8014:	9a06      	ldr	r2, [sp, #24]
 80a8016:	991c      	ldr	r1, [sp, #112]	; 0x70
 80a8018:	f001 fcaa 	bl	80a9970 <__mdiff>
 80a801c:	4683      	mov	fp, r0
 80a801e:	2800      	cmp	r0, #0
 80a8020:	f43f ae75 	beq.w	80a7d0e <_strtod_l+0x486>
 80a8024:	2400      	movs	r4, #0
 80a8026:	68c3      	ldr	r3, [r0, #12]
 80a8028:	9904      	ldr	r1, [sp, #16]
 80a802a:	60c4      	str	r4, [r0, #12]
 80a802c:	930d      	str	r3, [sp, #52]	; 0x34
 80a802e:	f001 fc84 	bl	80a993a <__mcmp>
 80a8032:	42a0      	cmp	r0, r4
 80a8034:	da70      	bge.n	80a8118 <_strtod_l+0x890>
 80a8036:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80a8038:	ea53 0308 	orrs.w	r3, r3, r8
 80a803c:	f040 8096 	bne.w	80a816c <_strtod_l+0x8e4>
 80a8040:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80a8044:	2b00      	cmp	r3, #0
 80a8046:	f040 8091 	bne.w	80a816c <_strtod_l+0x8e4>
 80a804a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80a804e:	0d1b      	lsrs	r3, r3, #20
 80a8050:	051b      	lsls	r3, r3, #20
 80a8052:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80a8056:	f240 8089 	bls.w	80a816c <_strtod_l+0x8e4>
 80a805a:	f8db 3014 	ldr.w	r3, [fp, #20]
 80a805e:	b923      	cbnz	r3, 80a806a <_strtod_l+0x7e2>
 80a8060:	f8db 3010 	ldr.w	r3, [fp, #16]
 80a8064:	2b01      	cmp	r3, #1
 80a8066:	f340 8081 	ble.w	80a816c <_strtod_l+0x8e4>
 80a806a:	4659      	mov	r1, fp
 80a806c:	2201      	movs	r2, #1
 80a806e:	4650      	mov	r0, sl
 80a8070:	f001 fc04 	bl	80a987c <__lshift>
 80a8074:	9904      	ldr	r1, [sp, #16]
 80a8076:	4683      	mov	fp, r0
 80a8078:	f001 fc5f 	bl	80a993a <__mcmp>
 80a807c:	2800      	cmp	r0, #0
 80a807e:	dd75      	ble.n	80a816c <_strtod_l+0x8e4>
 80a8080:	9905      	ldr	r1, [sp, #20]
 80a8082:	464b      	mov	r3, r9
 80a8084:	4a22      	ldr	r2, [pc, #136]	; (80a8110 <_strtod_l+0x888>)
 80a8086:	2900      	cmp	r1, #0
 80a8088:	f000 8091 	beq.w	80a81ae <_strtod_l+0x926>
 80a808c:	ea02 0109 	and.w	r1, r2, r9
 80a8090:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80a8094:	f300 808b 	bgt.w	80a81ae <_strtod_l+0x926>
 80a8098:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80a809c:	f77f aea9 	ble.w	80a7df2 <_strtod_l+0x56a>
 80a80a0:	2300      	movs	r3, #0
 80a80a2:	4a1c      	ldr	r2, [pc, #112]	; (80a8114 <_strtod_l+0x88c>)
 80a80a4:	4640      	mov	r0, r8
 80a80a6:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80a80aa:	4649      	mov	r1, r9
 80a80ac:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80a80b0:	f7fd fcae 	bl	80a5a10 <__aeabi_dmul>
 80a80b4:	460b      	mov	r3, r1
 80a80b6:	4303      	orrs	r3, r0
 80a80b8:	bf08      	it	eq
 80a80ba:	2322      	moveq	r3, #34	; 0x22
 80a80bc:	4680      	mov	r8, r0
 80a80be:	4689      	mov	r9, r1
 80a80c0:	bf08      	it	eq
 80a80c2:	f8ca 3000 	streq.w	r3, [sl]
 80a80c6:	e62d      	b.n	80a7d24 <_strtod_l+0x49c>
 80a80c8:	f04f 32ff 	mov.w	r2, #4294967295
 80a80cc:	fa02 f303 	lsl.w	r3, r2, r3
 80a80d0:	ea03 0808 	and.w	r8, r3, r8
 80a80d4:	e6db      	b.n	80a7e8e <_strtod_l+0x606>
 80a80d6:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 80a80da:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 80a80de:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 80a80e2:	35e2      	adds	r5, #226	; 0xe2
 80a80e4:	fa07 f505 	lsl.w	r5, r7, r5
 80a80e8:	970f      	str	r7, [sp, #60]	; 0x3c
 80a80ea:	e742      	b.n	80a7f72 <_strtod_l+0x6ea>
 80a80ec:	2301      	movs	r3, #1
 80a80ee:	2500      	movs	r5, #0
 80a80f0:	930f      	str	r3, [sp, #60]	; 0x3c
 80a80f2:	e73e      	b.n	80a7f72 <_strtod_l+0x6ea>
 80a80f4:	463a      	mov	r2, r7
 80a80f6:	4650      	mov	r0, sl
 80a80f8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80a80fa:	f001 fbbf 	bl	80a987c <__lshift>
 80a80fe:	901c      	str	r0, [sp, #112]	; 0x70
 80a8100:	2800      	cmp	r0, #0
 80a8102:	f47f af64 	bne.w	80a7fce <_strtod_l+0x746>
 80a8106:	e602      	b.n	80a7d0e <_strtod_l+0x486>
 80a8108:	080aa838 	.word	0x080aa838
 80a810c:	fffffc02 	.word	0xfffffc02
 80a8110:	7ff00000 	.word	0x7ff00000
 80a8114:	39500000 	.word	0x39500000
 80a8118:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80a811c:	d166      	bne.n	80a81ec <_strtod_l+0x964>
 80a811e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80a8120:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80a8124:	b35a      	cbz	r2, 80a817e <_strtod_l+0x8f6>
 80a8126:	4a9c      	ldr	r2, [pc, #624]	; (80a8398 <_strtod_l+0xb10>)
 80a8128:	4293      	cmp	r3, r2
 80a812a:	d12c      	bne.n	80a8186 <_strtod_l+0x8fe>
 80a812c:	9b05      	ldr	r3, [sp, #20]
 80a812e:	4640      	mov	r0, r8
 80a8130:	b303      	cbz	r3, 80a8174 <_strtod_l+0x8ec>
 80a8132:	464b      	mov	r3, r9
 80a8134:	4a99      	ldr	r2, [pc, #612]	; (80a839c <_strtod_l+0xb14>)
 80a8136:	f04f 31ff 	mov.w	r1, #4294967295
 80a813a:	401a      	ands	r2, r3
 80a813c:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80a8140:	d81b      	bhi.n	80a817a <_strtod_l+0x8f2>
 80a8142:	0d12      	lsrs	r2, r2, #20
 80a8144:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80a8148:	fa01 f303 	lsl.w	r3, r1, r3
 80a814c:	4298      	cmp	r0, r3
 80a814e:	d11a      	bne.n	80a8186 <_strtod_l+0x8fe>
 80a8150:	4b93      	ldr	r3, [pc, #588]	; (80a83a0 <_strtod_l+0xb18>)
 80a8152:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80a8154:	429a      	cmp	r2, r3
 80a8156:	d102      	bne.n	80a815e <_strtod_l+0x8d6>
 80a8158:	3001      	adds	r0, #1
 80a815a:	f43f add8 	beq.w	80a7d0e <_strtod_l+0x486>
 80a815e:	f04f 0800 	mov.w	r8, #0
 80a8162:	4b8e      	ldr	r3, [pc, #568]	; (80a839c <_strtod_l+0xb14>)
 80a8164:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80a8166:	401a      	ands	r2, r3
 80a8168:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 80a816c:	9b05      	ldr	r3, [sp, #20]
 80a816e:	2b00      	cmp	r3, #0
 80a8170:	d196      	bne.n	80a80a0 <_strtod_l+0x818>
 80a8172:	e5d7      	b.n	80a7d24 <_strtod_l+0x49c>
 80a8174:	f04f 33ff 	mov.w	r3, #4294967295
 80a8178:	e7e8      	b.n	80a814c <_strtod_l+0x8c4>
 80a817a:	460b      	mov	r3, r1
 80a817c:	e7e6      	b.n	80a814c <_strtod_l+0x8c4>
 80a817e:	ea53 0308 	orrs.w	r3, r3, r8
 80a8182:	f43f af7d 	beq.w	80a8080 <_strtod_l+0x7f8>
 80a8186:	b1e5      	cbz	r5, 80a81c2 <_strtod_l+0x93a>
 80a8188:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a818a:	421d      	tst	r5, r3
 80a818c:	d0ee      	beq.n	80a816c <_strtod_l+0x8e4>
 80a818e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80a8190:	4640      	mov	r0, r8
 80a8192:	4649      	mov	r1, r9
 80a8194:	9a05      	ldr	r2, [sp, #20]
 80a8196:	b1c3      	cbz	r3, 80a81ca <_strtod_l+0x942>
 80a8198:	f7ff fb53 	bl	80a7842 <sulp>
 80a819c:	4602      	mov	r2, r0
 80a819e:	460b      	mov	r3, r1
 80a81a0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80a81a4:	f7fd fa7e 	bl	80a56a4 <__adddf3>
 80a81a8:	4680      	mov	r8, r0
 80a81aa:	4689      	mov	r9, r1
 80a81ac:	e7de      	b.n	80a816c <_strtod_l+0x8e4>
 80a81ae:	4013      	ands	r3, r2
 80a81b0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80a81b4:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80a81b8:	f04f 38ff 	mov.w	r8, #4294967295
 80a81bc:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80a81c0:	e7d4      	b.n	80a816c <_strtod_l+0x8e4>
 80a81c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80a81c4:	ea13 0f08 	tst.w	r3, r8
 80a81c8:	e7e0      	b.n	80a818c <_strtod_l+0x904>
 80a81ca:	f7ff fb3a 	bl	80a7842 <sulp>
 80a81ce:	4602      	mov	r2, r0
 80a81d0:	460b      	mov	r3, r1
 80a81d2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80a81d6:	f7fd fa63 	bl	80a56a0 <__aeabi_dsub>
 80a81da:	2200      	movs	r2, #0
 80a81dc:	2300      	movs	r3, #0
 80a81de:	4680      	mov	r8, r0
 80a81e0:	4689      	mov	r9, r1
 80a81e2:	f7fd fe7d 	bl	80a5ee0 <__aeabi_dcmpeq>
 80a81e6:	2800      	cmp	r0, #0
 80a81e8:	d0c0      	beq.n	80a816c <_strtod_l+0x8e4>
 80a81ea:	e602      	b.n	80a7df2 <_strtod_l+0x56a>
 80a81ec:	4658      	mov	r0, fp
 80a81ee:	9904      	ldr	r1, [sp, #16]
 80a81f0:	f001 fd03 	bl	80a9bfa <__ratio>
 80a81f4:	2200      	movs	r2, #0
 80a81f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80a81fa:	4606      	mov	r6, r0
 80a81fc:	460f      	mov	r7, r1
 80a81fe:	f7fd fe83 	bl	80a5f08 <__aeabi_dcmple>
 80a8202:	2800      	cmp	r0, #0
 80a8204:	d075      	beq.n	80a82f2 <_strtod_l+0xa6a>
 80a8206:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80a8208:	2b00      	cmp	r3, #0
 80a820a:	d047      	beq.n	80a829c <_strtod_l+0xa14>
 80a820c:	2600      	movs	r6, #0
 80a820e:	4f65      	ldr	r7, [pc, #404]	; (80a83a4 <_strtod_l+0xb1c>)
 80a8210:	4d64      	ldr	r5, [pc, #400]	; (80a83a4 <_strtod_l+0xb1c>)
 80a8212:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a8214:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80a8218:	0d1b      	lsrs	r3, r3, #20
 80a821a:	051b      	lsls	r3, r3, #20
 80a821c:	930f      	str	r3, [sp, #60]	; 0x3c
 80a821e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80a8220:	4b61      	ldr	r3, [pc, #388]	; (80a83a8 <_strtod_l+0xb20>)
 80a8222:	429a      	cmp	r2, r3
 80a8224:	f040 80c8 	bne.w	80a83b8 <_strtod_l+0xb30>
 80a8228:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80a822c:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80a8230:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a8232:	4640      	mov	r0, r8
 80a8234:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 80a8238:	4649      	mov	r1, r9
 80a823a:	f001 fc15 	bl	80a9a68 <__ulp>
 80a823e:	4602      	mov	r2, r0
 80a8240:	460b      	mov	r3, r1
 80a8242:	4630      	mov	r0, r6
 80a8244:	4639      	mov	r1, r7
 80a8246:	f7fd fbe3 	bl	80a5a10 <__aeabi_dmul>
 80a824a:	4642      	mov	r2, r8
 80a824c:	464b      	mov	r3, r9
 80a824e:	f7fd fa29 	bl	80a56a4 <__adddf3>
 80a8252:	460b      	mov	r3, r1
 80a8254:	4951      	ldr	r1, [pc, #324]	; (80a839c <_strtod_l+0xb14>)
 80a8256:	4a55      	ldr	r2, [pc, #340]	; (80a83ac <_strtod_l+0xb24>)
 80a8258:	4019      	ands	r1, r3
 80a825a:	4291      	cmp	r1, r2
 80a825c:	4680      	mov	r8, r0
 80a825e:	d95e      	bls.n	80a831e <_strtod_l+0xa96>
 80a8260:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80a8262:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80a8266:	4293      	cmp	r3, r2
 80a8268:	d103      	bne.n	80a8272 <_strtod_l+0x9ea>
 80a826a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a826c:	3301      	adds	r3, #1
 80a826e:	f43f ad4e 	beq.w	80a7d0e <_strtod_l+0x486>
 80a8272:	f04f 38ff 	mov.w	r8, #4294967295
 80a8276:	f8df 9128 	ldr.w	r9, [pc, #296]	; 80a83a0 <_strtod_l+0xb18>
 80a827a:	4650      	mov	r0, sl
 80a827c:	991c      	ldr	r1, [sp, #112]	; 0x70
 80a827e:	f001 f929 	bl	80a94d4 <_Bfree>
 80a8282:	4650      	mov	r0, sl
 80a8284:	9906      	ldr	r1, [sp, #24]
 80a8286:	f001 f925 	bl	80a94d4 <_Bfree>
 80a828a:	4650      	mov	r0, sl
 80a828c:	9904      	ldr	r1, [sp, #16]
 80a828e:	f001 f921 	bl	80a94d4 <_Bfree>
 80a8292:	4659      	mov	r1, fp
 80a8294:	4650      	mov	r0, sl
 80a8296:	f001 f91d 	bl	80a94d4 <_Bfree>
 80a829a:	e61c      	b.n	80a7ed6 <_strtod_l+0x64e>
 80a829c:	f1b8 0f00 	cmp.w	r8, #0
 80a82a0:	d119      	bne.n	80a82d6 <_strtod_l+0xa4e>
 80a82a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a82a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80a82a8:	b9e3      	cbnz	r3, 80a82e4 <_strtod_l+0xa5c>
 80a82aa:	2200      	movs	r2, #0
 80a82ac:	4630      	mov	r0, r6
 80a82ae:	4639      	mov	r1, r7
 80a82b0:	4b3c      	ldr	r3, [pc, #240]	; (80a83a4 <_strtod_l+0xb1c>)
 80a82b2:	f7fd fe1f 	bl	80a5ef4 <__aeabi_dcmplt>
 80a82b6:	b9c8      	cbnz	r0, 80a82ec <_strtod_l+0xa64>
 80a82b8:	2200      	movs	r2, #0
 80a82ba:	4630      	mov	r0, r6
 80a82bc:	4639      	mov	r1, r7
 80a82be:	4b3c      	ldr	r3, [pc, #240]	; (80a83b0 <_strtod_l+0xb28>)
 80a82c0:	f7fd fba6 	bl	80a5a10 <__aeabi_dmul>
 80a82c4:	4604      	mov	r4, r0
 80a82c6:	460d      	mov	r5, r1
 80a82c8:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80a82cc:	9418      	str	r4, [sp, #96]	; 0x60
 80a82ce:	9319      	str	r3, [sp, #100]	; 0x64
 80a82d0:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 80a82d4:	e79d      	b.n	80a8212 <_strtod_l+0x98a>
 80a82d6:	f1b8 0f01 	cmp.w	r8, #1
 80a82da:	d103      	bne.n	80a82e4 <_strtod_l+0xa5c>
 80a82dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a82de:	2b00      	cmp	r3, #0
 80a82e0:	f43f ad87 	beq.w	80a7df2 <_strtod_l+0x56a>
 80a82e4:	2600      	movs	r6, #0
 80a82e6:	2400      	movs	r4, #0
 80a82e8:	4f32      	ldr	r7, [pc, #200]	; (80a83b4 <_strtod_l+0xb2c>)
 80a82ea:	e791      	b.n	80a8210 <_strtod_l+0x988>
 80a82ec:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80a82ee:	4d30      	ldr	r5, [pc, #192]	; (80a83b0 <_strtod_l+0xb28>)
 80a82f0:	e7ea      	b.n	80a82c8 <_strtod_l+0xa40>
 80a82f2:	4b2f      	ldr	r3, [pc, #188]	; (80a83b0 <_strtod_l+0xb28>)
 80a82f4:	2200      	movs	r2, #0
 80a82f6:	4630      	mov	r0, r6
 80a82f8:	4639      	mov	r1, r7
 80a82fa:	f7fd fb89 	bl	80a5a10 <__aeabi_dmul>
 80a82fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80a8300:	4604      	mov	r4, r0
 80a8302:	460d      	mov	r5, r1
 80a8304:	b933      	cbnz	r3, 80a8314 <_strtod_l+0xa8c>
 80a8306:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80a830a:	9010      	str	r0, [sp, #64]	; 0x40
 80a830c:	9311      	str	r3, [sp, #68]	; 0x44
 80a830e:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80a8312:	e77e      	b.n	80a8212 <_strtod_l+0x98a>
 80a8314:	4602      	mov	r2, r0
 80a8316:	460b      	mov	r3, r1
 80a8318:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80a831c:	e7f7      	b.n	80a830e <_strtod_l+0xa86>
 80a831e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80a8322:	9b05      	ldr	r3, [sp, #20]
 80a8324:	2b00      	cmp	r3, #0
 80a8326:	d1a8      	bne.n	80a827a <_strtod_l+0x9f2>
 80a8328:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80a832c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80a832e:	0d1b      	lsrs	r3, r3, #20
 80a8330:	051b      	lsls	r3, r3, #20
 80a8332:	429a      	cmp	r2, r3
 80a8334:	d1a1      	bne.n	80a827a <_strtod_l+0x9f2>
 80a8336:	4620      	mov	r0, r4
 80a8338:	4629      	mov	r1, r5
 80a833a:	f001 fd69 	bl	80a9e10 <__aeabi_d2lz>
 80a833e:	f7fd fb39 	bl	80a59b4 <__aeabi_l2d>
 80a8342:	4602      	mov	r2, r0
 80a8344:	460b      	mov	r3, r1
 80a8346:	4620      	mov	r0, r4
 80a8348:	4629      	mov	r1, r5
 80a834a:	f7fd f9a9 	bl	80a56a0 <__aeabi_dsub>
 80a834e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80a8350:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80a8354:	ea43 0308 	orr.w	r3, r3, r8
 80a8358:	4313      	orrs	r3, r2
 80a835a:	4604      	mov	r4, r0
 80a835c:	460d      	mov	r5, r1
 80a835e:	d066      	beq.n	80a842e <_strtod_l+0xba6>
 80a8360:	a309      	add	r3, pc, #36	; (adr r3, 80a8388 <_strtod_l+0xb00>)
 80a8362:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a8366:	f7fd fdc5 	bl	80a5ef4 <__aeabi_dcmplt>
 80a836a:	2800      	cmp	r0, #0
 80a836c:	f47f acda 	bne.w	80a7d24 <_strtod_l+0x49c>
 80a8370:	a307      	add	r3, pc, #28	; (adr r3, 80a8390 <_strtod_l+0xb08>)
 80a8372:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a8376:	4620      	mov	r0, r4
 80a8378:	4629      	mov	r1, r5
 80a837a:	f7fd fdd9 	bl	80a5f30 <__aeabi_dcmpgt>
 80a837e:	2800      	cmp	r0, #0
 80a8380:	f43f af7b 	beq.w	80a827a <_strtod_l+0x9f2>
 80a8384:	e4ce      	b.n	80a7d24 <_strtod_l+0x49c>
 80a8386:	bf00      	nop
 80a8388:	94a03595 	.word	0x94a03595
 80a838c:	3fdfffff 	.word	0x3fdfffff
 80a8390:	35afe535 	.word	0x35afe535
 80a8394:	3fe00000 	.word	0x3fe00000
 80a8398:	000fffff 	.word	0x000fffff
 80a839c:	7ff00000 	.word	0x7ff00000
 80a83a0:	7fefffff 	.word	0x7fefffff
 80a83a4:	3ff00000 	.word	0x3ff00000
 80a83a8:	7fe00000 	.word	0x7fe00000
 80a83ac:	7c9fffff 	.word	0x7c9fffff
 80a83b0:	3fe00000 	.word	0x3fe00000
 80a83b4:	bff00000 	.word	0xbff00000
 80a83b8:	9b05      	ldr	r3, [sp, #20]
 80a83ba:	b313      	cbz	r3, 80a8402 <_strtod_l+0xb7a>
 80a83bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80a83be:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80a83c2:	d81e      	bhi.n	80a8402 <_strtod_l+0xb7a>
 80a83c4:	a326      	add	r3, pc, #152	; (adr r3, 80a8460 <_strtod_l+0xbd8>)
 80a83c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a83ca:	4620      	mov	r0, r4
 80a83cc:	4629      	mov	r1, r5
 80a83ce:	f7fd fd9b 	bl	80a5f08 <__aeabi_dcmple>
 80a83d2:	b190      	cbz	r0, 80a83fa <_strtod_l+0xb72>
 80a83d4:	4629      	mov	r1, r5
 80a83d6:	4620      	mov	r0, r4
 80a83d8:	f7fd fdf2 	bl	80a5fc0 <__aeabi_d2uiz>
 80a83dc:	2801      	cmp	r0, #1
 80a83de:	bf38      	it	cc
 80a83e0:	2001      	movcc	r0, #1
 80a83e2:	f7fd fa9b 	bl	80a591c <__aeabi_ui2d>
 80a83e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80a83e8:	4604      	mov	r4, r0
 80a83ea:	460d      	mov	r5, r1
 80a83ec:	b9d3      	cbnz	r3, 80a8424 <_strtod_l+0xb9c>
 80a83ee:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80a83f2:	9012      	str	r0, [sp, #72]	; 0x48
 80a83f4:	9313      	str	r3, [sp, #76]	; 0x4c
 80a83f6:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 80a83fa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80a83fc:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 80a8400:	1a9f      	subs	r7, r3, r2
 80a8402:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80a8406:	f001 fb2f 	bl	80a9a68 <__ulp>
 80a840a:	4602      	mov	r2, r0
 80a840c:	460b      	mov	r3, r1
 80a840e:	4630      	mov	r0, r6
 80a8410:	4639      	mov	r1, r7
 80a8412:	f7fd fafd 	bl	80a5a10 <__aeabi_dmul>
 80a8416:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80a841a:	f7fd f943 	bl	80a56a4 <__adddf3>
 80a841e:	4680      	mov	r8, r0
 80a8420:	4689      	mov	r9, r1
 80a8422:	e77e      	b.n	80a8322 <_strtod_l+0xa9a>
 80a8424:	4602      	mov	r2, r0
 80a8426:	460b      	mov	r3, r1
 80a8428:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 80a842c:	e7e3      	b.n	80a83f6 <_strtod_l+0xb6e>
 80a842e:	a30e      	add	r3, pc, #56	; (adr r3, 80a8468 <_strtod_l+0xbe0>)
 80a8430:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a8434:	f7fd fd5e 	bl	80a5ef4 <__aeabi_dcmplt>
 80a8438:	e7a1      	b.n	80a837e <_strtod_l+0xaf6>
 80a843a:	2300      	movs	r3, #0
 80a843c:	930c      	str	r3, [sp, #48]	; 0x30
 80a843e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80a8440:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80a8442:	6013      	str	r3, [r2, #0]
 80a8444:	f7ff ba65 	b.w	80a7912 <_strtod_l+0x8a>
 80a8448:	2b65      	cmp	r3, #101	; 0x65
 80a844a:	f43f ab5c 	beq.w	80a7b06 <_strtod_l+0x27e>
 80a844e:	2b45      	cmp	r3, #69	; 0x45
 80a8450:	f43f ab59 	beq.w	80a7b06 <_strtod_l+0x27e>
 80a8454:	2201      	movs	r2, #1
 80a8456:	f7ff bb8d 	b.w	80a7b74 <_strtod_l+0x2ec>
 80a845a:	bf00      	nop
 80a845c:	f3af 8000 	nop.w
 80a8460:	ffc00000 	.word	0xffc00000
 80a8464:	41dfffff 	.word	0x41dfffff
 80a8468:	94a03595 	.word	0x94a03595
 80a846c:	3fcfffff 	.word	0x3fcfffff

080a8470 <strtof>:
 80a8470:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a8474:	4f22      	ldr	r7, [pc, #136]	; (80a8500 <strtof+0x90>)
 80a8476:	460a      	mov	r2, r1
 80a8478:	4b22      	ldr	r3, [pc, #136]	; (80a8504 <strtof+0x94>)
 80a847a:	4601      	mov	r1, r0
 80a847c:	6838      	ldr	r0, [r7, #0]
 80a847e:	f7ff fa03 	bl	80a7888 <_strtod_l>
 80a8482:	4602      	mov	r2, r0
 80a8484:	460b      	mov	r3, r1
 80a8486:	4606      	mov	r6, r0
 80a8488:	460c      	mov	r4, r1
 80a848a:	f7fd fd5b 	bl	80a5f44 <__aeabi_dcmpun>
 80a848e:	b168      	cbz	r0, 80a84ac <strtof+0x3c>
 80a8490:	2c00      	cmp	r4, #0
 80a8492:	481d      	ldr	r0, [pc, #116]	; (80a8508 <strtof+0x98>)
 80a8494:	da06      	bge.n	80a84a4 <strtof+0x34>
 80a8496:	f001 fc37 	bl	80a9d08 <nanf>
 80a849a:	f100 4500 	add.w	r5, r0, #2147483648	; 0x80000000
 80a849e:	4628      	mov	r0, r5
 80a84a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a84a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80a84a8:	f001 bc2e 	b.w	80a9d08 <nanf>
 80a84ac:	4621      	mov	r1, r4
 80a84ae:	4630      	mov	r0, r6
 80a84b0:	f7fd fda6 	bl	80a6000 <__aeabi_d2f>
 80a84b4:	f020 4800 	bic.w	r8, r0, #2147483648	; 0x80000000
 80a84b8:	4605      	mov	r5, r0
 80a84ba:	4914      	ldr	r1, [pc, #80]	; (80a850c <strtof+0x9c>)
 80a84bc:	4640      	mov	r0, r8
 80a84be:	f001 fc41 	bl	80a9d44 <__aeabi_fcmpun>
 80a84c2:	2800      	cmp	r0, #0
 80a84c4:	d1eb      	bne.n	80a849e <strtof+0x2e>
 80a84c6:	4640      	mov	r0, r8
 80a84c8:	4910      	ldr	r1, [pc, #64]	; (80a850c <strtof+0x9c>)
 80a84ca:	f7fe f89f 	bl	80a660c <__aeabi_fcmple>
 80a84ce:	2800      	cmp	r0, #0
 80a84d0:	d1e5      	bne.n	80a849e <strtof+0x2e>
 80a84d2:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 80a84d6:	f04f 32ff 	mov.w	r2, #4294967295
 80a84da:	4630      	mov	r0, r6
 80a84dc:	4621      	mov	r1, r4
 80a84de:	4b0c      	ldr	r3, [pc, #48]	; (80a8510 <strtof+0xa0>)
 80a84e0:	f7fd fd30 	bl	80a5f44 <__aeabi_dcmpun>
 80a84e4:	b940      	cbnz	r0, 80a84f8 <strtof+0x88>
 80a84e6:	f04f 32ff 	mov.w	r2, #4294967295
 80a84ea:	4630      	mov	r0, r6
 80a84ec:	4621      	mov	r1, r4
 80a84ee:	4b08      	ldr	r3, [pc, #32]	; (80a8510 <strtof+0xa0>)
 80a84f0:	f7fd fd0a 	bl	80a5f08 <__aeabi_dcmple>
 80a84f4:	2800      	cmp	r0, #0
 80a84f6:	d0d2      	beq.n	80a849e <strtof+0x2e>
 80a84f8:	2222      	movs	r2, #34	; 0x22
 80a84fa:	683b      	ldr	r3, [r7, #0]
 80a84fc:	601a      	str	r2, [r3, #0]
 80a84fe:	e7ce      	b.n	80a849e <strtof+0x2e>
 80a8500:	20000014 	.word	0x20000014
 80a8504:	200000dc 	.word	0x200000dc
 80a8508:	080aa2c3 	.word	0x080aa2c3
 80a850c:	7f7fffff 	.word	0x7f7fffff
 80a8510:	7fefffff 	.word	0x7fefffff

080a8514 <_strtol_l.isra.0>:
 80a8514:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a8518:	468c      	mov	ip, r1
 80a851a:	4686      	mov	lr, r0
 80a851c:	4e39      	ldr	r6, [pc, #228]	; (80a8604 <_strtol_l.isra.0+0xf0>)
 80a851e:	4660      	mov	r0, ip
 80a8520:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80a8524:	5da5      	ldrb	r5, [r4, r6]
 80a8526:	f015 0508 	ands.w	r5, r5, #8
 80a852a:	d1f8      	bne.n	80a851e <_strtol_l.isra.0+0xa>
 80a852c:	2c2d      	cmp	r4, #45	; 0x2d
 80a852e:	d133      	bne.n	80a8598 <_strtol_l.isra.0+0x84>
 80a8530:	f04f 0801 	mov.w	r8, #1
 80a8534:	f89c 4000 	ldrb.w	r4, [ip]
 80a8538:	f100 0c02 	add.w	ip, r0, #2
 80a853c:	2b00      	cmp	r3, #0
 80a853e:	d05c      	beq.n	80a85fa <_strtol_l.isra.0+0xe6>
 80a8540:	2b10      	cmp	r3, #16
 80a8542:	d10c      	bne.n	80a855e <_strtol_l.isra.0+0x4a>
 80a8544:	2c30      	cmp	r4, #48	; 0x30
 80a8546:	d10a      	bne.n	80a855e <_strtol_l.isra.0+0x4a>
 80a8548:	f89c 0000 	ldrb.w	r0, [ip]
 80a854c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80a8550:	2858      	cmp	r0, #88	; 0x58
 80a8552:	d14d      	bne.n	80a85f0 <_strtol_l.isra.0+0xdc>
 80a8554:	2310      	movs	r3, #16
 80a8556:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80a855a:	f10c 0c02 	add.w	ip, ip, #2
 80a855e:	2600      	movs	r6, #0
 80a8560:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 80a8564:	3f01      	subs	r7, #1
 80a8566:	fbb7 f9f3 	udiv	r9, r7, r3
 80a856a:	4630      	mov	r0, r6
 80a856c:	fb03 7a19 	mls	sl, r3, r9, r7
 80a8570:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
 80a8574:	2d09      	cmp	r5, #9
 80a8576:	d818      	bhi.n	80a85aa <_strtol_l.isra.0+0x96>
 80a8578:	462c      	mov	r4, r5
 80a857a:	42a3      	cmp	r3, r4
 80a857c:	dd24      	ble.n	80a85c8 <_strtol_l.isra.0+0xb4>
 80a857e:	1c75      	adds	r5, r6, #1
 80a8580:	d007      	beq.n	80a8592 <_strtol_l.isra.0+0x7e>
 80a8582:	4581      	cmp	r9, r0
 80a8584:	d31d      	bcc.n	80a85c2 <_strtol_l.isra.0+0xae>
 80a8586:	d101      	bne.n	80a858c <_strtol_l.isra.0+0x78>
 80a8588:	45a2      	cmp	sl, r4
 80a858a:	db1a      	blt.n	80a85c2 <_strtol_l.isra.0+0xae>
 80a858c:	2601      	movs	r6, #1
 80a858e:	fb00 4003 	mla	r0, r0, r3, r4
 80a8592:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80a8596:	e7eb      	b.n	80a8570 <_strtol_l.isra.0+0x5c>
 80a8598:	2c2b      	cmp	r4, #43	; 0x2b
 80a859a:	bf08      	it	eq
 80a859c:	f89c 4000 	ldrbeq.w	r4, [ip]
 80a85a0:	46a8      	mov	r8, r5
 80a85a2:	bf08      	it	eq
 80a85a4:	f100 0c02 	addeq.w	ip, r0, #2
 80a85a8:	e7c8      	b.n	80a853c <_strtol_l.isra.0+0x28>
 80a85aa:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
 80a85ae:	2d19      	cmp	r5, #25
 80a85b0:	d801      	bhi.n	80a85b6 <_strtol_l.isra.0+0xa2>
 80a85b2:	3c37      	subs	r4, #55	; 0x37
 80a85b4:	e7e1      	b.n	80a857a <_strtol_l.isra.0+0x66>
 80a85b6:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
 80a85ba:	2d19      	cmp	r5, #25
 80a85bc:	d804      	bhi.n	80a85c8 <_strtol_l.isra.0+0xb4>
 80a85be:	3c57      	subs	r4, #87	; 0x57
 80a85c0:	e7db      	b.n	80a857a <_strtol_l.isra.0+0x66>
 80a85c2:	f04f 36ff 	mov.w	r6, #4294967295
 80a85c6:	e7e4      	b.n	80a8592 <_strtol_l.isra.0+0x7e>
 80a85c8:	1c73      	adds	r3, r6, #1
 80a85ca:	d106      	bne.n	80a85da <_strtol_l.isra.0+0xc6>
 80a85cc:	2322      	movs	r3, #34	; 0x22
 80a85ce:	4638      	mov	r0, r7
 80a85d0:	f8ce 3000 	str.w	r3, [lr]
 80a85d4:	b942      	cbnz	r2, 80a85e8 <_strtol_l.isra.0+0xd4>
 80a85d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a85da:	f1b8 0f00 	cmp.w	r8, #0
 80a85de:	d000      	beq.n	80a85e2 <_strtol_l.isra.0+0xce>
 80a85e0:	4240      	negs	r0, r0
 80a85e2:	2a00      	cmp	r2, #0
 80a85e4:	d0f7      	beq.n	80a85d6 <_strtol_l.isra.0+0xc2>
 80a85e6:	b10e      	cbz	r6, 80a85ec <_strtol_l.isra.0+0xd8>
 80a85e8:	f10c 31ff 	add.w	r1, ip, #4294967295
 80a85ec:	6011      	str	r1, [r2, #0]
 80a85ee:	e7f2      	b.n	80a85d6 <_strtol_l.isra.0+0xc2>
 80a85f0:	2430      	movs	r4, #48	; 0x30
 80a85f2:	2b00      	cmp	r3, #0
 80a85f4:	d1b3      	bne.n	80a855e <_strtol_l.isra.0+0x4a>
 80a85f6:	2308      	movs	r3, #8
 80a85f8:	e7b1      	b.n	80a855e <_strtol_l.isra.0+0x4a>
 80a85fa:	2c30      	cmp	r4, #48	; 0x30
 80a85fc:	d0a4      	beq.n	80a8548 <_strtol_l.isra.0+0x34>
 80a85fe:	230a      	movs	r3, #10
 80a8600:	e7ad      	b.n	80a855e <_strtol_l.isra.0+0x4a>
 80a8602:	bf00      	nop
 80a8604:	080aaac5 	.word	0x080aaac5

080a8608 <strtol>:
 80a8608:	4613      	mov	r3, r2
 80a860a:	460a      	mov	r2, r1
 80a860c:	4601      	mov	r1, r0
 80a860e:	4802      	ldr	r0, [pc, #8]	; (80a8618 <strtol+0x10>)
 80a8610:	6800      	ldr	r0, [r0, #0]
 80a8612:	f7ff bf7f 	b.w	80a8514 <_strtol_l.isra.0>
 80a8616:	bf00      	nop
 80a8618:	20000014 	.word	0x20000014

080a861c <_strtoul_l.isra.0>:
 80a861c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a8620:	468c      	mov	ip, r1
 80a8622:	4686      	mov	lr, r0
 80a8624:	4e3a      	ldr	r6, [pc, #232]	; (80a8710 <_strtoul_l.isra.0+0xf4>)
 80a8626:	4660      	mov	r0, ip
 80a8628:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80a862c:	5da5      	ldrb	r5, [r4, r6]
 80a862e:	f015 0508 	ands.w	r5, r5, #8
 80a8632:	d1f8      	bne.n	80a8626 <_strtoul_l.isra.0+0xa>
 80a8634:	2c2d      	cmp	r4, #45	; 0x2d
 80a8636:	d134      	bne.n	80a86a2 <_strtoul_l.isra.0+0x86>
 80a8638:	f04f 0801 	mov.w	r8, #1
 80a863c:	f89c 4000 	ldrb.w	r4, [ip]
 80a8640:	f100 0c02 	add.w	ip, r0, #2
 80a8644:	2b00      	cmp	r3, #0
 80a8646:	d05e      	beq.n	80a8706 <_strtoul_l.isra.0+0xea>
 80a8648:	2b10      	cmp	r3, #16
 80a864a:	d10c      	bne.n	80a8666 <_strtoul_l.isra.0+0x4a>
 80a864c:	2c30      	cmp	r4, #48	; 0x30
 80a864e:	d10a      	bne.n	80a8666 <_strtoul_l.isra.0+0x4a>
 80a8650:	f89c 0000 	ldrb.w	r0, [ip]
 80a8654:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80a8658:	2858      	cmp	r0, #88	; 0x58
 80a865a:	d14f      	bne.n	80a86fc <_strtoul_l.isra.0+0xe0>
 80a865c:	2310      	movs	r3, #16
 80a865e:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80a8662:	f10c 0c02 	add.w	ip, ip, #2
 80a8666:	f04f 37ff 	mov.w	r7, #4294967295
 80a866a:	fbb7 f7f3 	udiv	r7, r7, r3
 80a866e:	2500      	movs	r5, #0
 80a8670:	fb03 f907 	mul.w	r9, r3, r7
 80a8674:	4628      	mov	r0, r5
 80a8676:	ea6f 0909 	mvn.w	r9, r9
 80a867a:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 80a867e:	2e09      	cmp	r6, #9
 80a8680:	d818      	bhi.n	80a86b4 <_strtoul_l.isra.0+0x98>
 80a8682:	4634      	mov	r4, r6
 80a8684:	42a3      	cmp	r3, r4
 80a8686:	dd24      	ble.n	80a86d2 <_strtoul_l.isra.0+0xb6>
 80a8688:	2d00      	cmp	r5, #0
 80a868a:	db1f      	blt.n	80a86cc <_strtoul_l.isra.0+0xb0>
 80a868c:	4287      	cmp	r7, r0
 80a868e:	d31d      	bcc.n	80a86cc <_strtoul_l.isra.0+0xb0>
 80a8690:	d101      	bne.n	80a8696 <_strtoul_l.isra.0+0x7a>
 80a8692:	45a1      	cmp	r9, r4
 80a8694:	db1a      	blt.n	80a86cc <_strtoul_l.isra.0+0xb0>
 80a8696:	2501      	movs	r5, #1
 80a8698:	fb00 4003 	mla	r0, r0, r3, r4
 80a869c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80a86a0:	e7eb      	b.n	80a867a <_strtoul_l.isra.0+0x5e>
 80a86a2:	2c2b      	cmp	r4, #43	; 0x2b
 80a86a4:	bf08      	it	eq
 80a86a6:	f89c 4000 	ldrbeq.w	r4, [ip]
 80a86aa:	46a8      	mov	r8, r5
 80a86ac:	bf08      	it	eq
 80a86ae:	f100 0c02 	addeq.w	ip, r0, #2
 80a86b2:	e7c7      	b.n	80a8644 <_strtoul_l.isra.0+0x28>
 80a86b4:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 80a86b8:	2e19      	cmp	r6, #25
 80a86ba:	d801      	bhi.n	80a86c0 <_strtoul_l.isra.0+0xa4>
 80a86bc:	3c37      	subs	r4, #55	; 0x37
 80a86be:	e7e1      	b.n	80a8684 <_strtoul_l.isra.0+0x68>
 80a86c0:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 80a86c4:	2e19      	cmp	r6, #25
 80a86c6:	d804      	bhi.n	80a86d2 <_strtoul_l.isra.0+0xb6>
 80a86c8:	3c57      	subs	r4, #87	; 0x57
 80a86ca:	e7db      	b.n	80a8684 <_strtoul_l.isra.0+0x68>
 80a86cc:	f04f 35ff 	mov.w	r5, #4294967295
 80a86d0:	e7e4      	b.n	80a869c <_strtoul_l.isra.0+0x80>
 80a86d2:	2d00      	cmp	r5, #0
 80a86d4:	da07      	bge.n	80a86e6 <_strtoul_l.isra.0+0xca>
 80a86d6:	2322      	movs	r3, #34	; 0x22
 80a86d8:	f04f 30ff 	mov.w	r0, #4294967295
 80a86dc:	f8ce 3000 	str.w	r3, [lr]
 80a86e0:	b942      	cbnz	r2, 80a86f4 <_strtoul_l.isra.0+0xd8>
 80a86e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a86e6:	f1b8 0f00 	cmp.w	r8, #0
 80a86ea:	d000      	beq.n	80a86ee <_strtoul_l.isra.0+0xd2>
 80a86ec:	4240      	negs	r0, r0
 80a86ee:	2a00      	cmp	r2, #0
 80a86f0:	d0f7      	beq.n	80a86e2 <_strtoul_l.isra.0+0xc6>
 80a86f2:	b10d      	cbz	r5, 80a86f8 <_strtoul_l.isra.0+0xdc>
 80a86f4:	f10c 31ff 	add.w	r1, ip, #4294967295
 80a86f8:	6011      	str	r1, [r2, #0]
 80a86fa:	e7f2      	b.n	80a86e2 <_strtoul_l.isra.0+0xc6>
 80a86fc:	2430      	movs	r4, #48	; 0x30
 80a86fe:	2b00      	cmp	r3, #0
 80a8700:	d1b1      	bne.n	80a8666 <_strtoul_l.isra.0+0x4a>
 80a8702:	2308      	movs	r3, #8
 80a8704:	e7af      	b.n	80a8666 <_strtoul_l.isra.0+0x4a>
 80a8706:	2c30      	cmp	r4, #48	; 0x30
 80a8708:	d0a2      	beq.n	80a8650 <_strtoul_l.isra.0+0x34>
 80a870a:	230a      	movs	r3, #10
 80a870c:	e7ab      	b.n	80a8666 <_strtoul_l.isra.0+0x4a>
 80a870e:	bf00      	nop
 80a8710:	080aaac5 	.word	0x080aaac5

080a8714 <strtoul>:
 80a8714:	4613      	mov	r3, r2
 80a8716:	460a      	mov	r2, r1
 80a8718:	4601      	mov	r1, r0
 80a871a:	4802      	ldr	r0, [pc, #8]	; (80a8724 <strtoul+0x10>)
 80a871c:	6800      	ldr	r0, [r0, #0]
 80a871e:	f7ff bf7d 	b.w	80a861c <_strtoul_l.isra.0>
 80a8722:	bf00      	nop
 80a8724:	20000014 	.word	0x20000014

080a8728 <__tzcalc_limits>:
 80a8728:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a872c:	4680      	mov	r8, r0
 80a872e:	f000 fdcf 	bl	80a92d0 <__gettzinfo>
 80a8732:	f240 73b1 	movw	r3, #1969	; 0x7b1
 80a8736:	4598      	cmp	r8, r3
 80a8738:	f340 8097 	ble.w	80a886a <__tzcalc_limits+0x142>
 80a873c:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 80a8740:	f240 126d 	movw	r2, #365	; 0x16d
 80a8744:	4443      	add	r3, r8
 80a8746:	109b      	asrs	r3, r3, #2
 80a8748:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
 80a874c:	fb02 3505 	mla	r5, r2, r5, r3
 80a8750:	f06f 0263 	mvn.w	r2, #99	; 0x63
 80a8754:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
 80a8758:	fb93 f3f2 	sdiv	r3, r3, r2
 80a875c:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 80a8760:	441d      	add	r5, r3
 80a8762:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80a8766:	4442      	add	r2, r8
 80a8768:	fbb2 f2f3 	udiv	r2, r2, r3
 80a876c:	fb98 f7f3 	sdiv	r7, r8, r3
 80a8770:	4415      	add	r5, r2
 80a8772:	2264      	movs	r2, #100	; 0x64
 80a8774:	fb03 8717 	mls	r7, r3, r7, r8
 80a8778:	fb98 f6f2 	sdiv	r6, r8, r2
 80a877c:	fab7 fc87 	clz	ip, r7
 80a8780:	4604      	mov	r4, r0
 80a8782:	f04f 0e07 	mov.w	lr, #7
 80a8786:	fb02 8616 	mls	r6, r2, r6, r8
 80a878a:	f008 0303 	and.w	r3, r8, #3
 80a878e:	f8c0 8004 	str.w	r8, [r0, #4]
 80a8792:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80a8796:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 80a879a:	9300      	str	r3, [sp, #0]
 80a879c:	7a22      	ldrb	r2, [r4, #8]
 80a879e:	6963      	ldr	r3, [r4, #20]
 80a87a0:	2a4a      	cmp	r2, #74	; 0x4a
 80a87a2:	d128      	bne.n	80a87f6 <__tzcalc_limits+0xce>
 80a87a4:	9900      	ldr	r1, [sp, #0]
 80a87a6:	18ea      	adds	r2, r5, r3
 80a87a8:	b901      	cbnz	r1, 80a87ac <__tzcalc_limits+0x84>
 80a87aa:	b906      	cbnz	r6, 80a87ae <__tzcalc_limits+0x86>
 80a87ac:	bb0f      	cbnz	r7, 80a87f2 <__tzcalc_limits+0xca>
 80a87ae:	2b3b      	cmp	r3, #59	; 0x3b
 80a87b0:	bfd4      	ite	le
 80a87b2:	2300      	movle	r3, #0
 80a87b4:	2301      	movgt	r3, #1
 80a87b6:	4413      	add	r3, r2
 80a87b8:	1e5a      	subs	r2, r3, #1
 80a87ba:	69a3      	ldr	r3, [r4, #24]
 80a87bc:	492c      	ldr	r1, [pc, #176]	; (80a8870 <__tzcalc_limits+0x148>)
 80a87be:	3428      	adds	r4, #40	; 0x28
 80a87c0:	fb01 3202 	mla	r2, r1, r2, r3
 80a87c4:	6823      	ldr	r3, [r4, #0]
 80a87c6:	4413      	add	r3, r2
 80a87c8:	461a      	mov	r2, r3
 80a87ca:	17db      	asrs	r3, r3, #31
 80a87cc:	e944 2302 	strd	r2, r3, [r4, #-8]
 80a87d0:	45a3      	cmp	fp, r4
 80a87d2:	d1e3      	bne.n	80a879c <__tzcalc_limits+0x74>
 80a87d4:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
 80a87d8:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
 80a87dc:	4294      	cmp	r4, r2
 80a87de:	eb75 0303 	sbcs.w	r3, r5, r3
 80a87e2:	bfb4      	ite	lt
 80a87e4:	2301      	movlt	r3, #1
 80a87e6:	2300      	movge	r3, #0
 80a87e8:	6003      	str	r3, [r0, #0]
 80a87ea:	2001      	movs	r0, #1
 80a87ec:	b003      	add	sp, #12
 80a87ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a87f2:	2300      	movs	r3, #0
 80a87f4:	e7df      	b.n	80a87b6 <__tzcalc_limits+0x8e>
 80a87f6:	2a44      	cmp	r2, #68	; 0x44
 80a87f8:	d101      	bne.n	80a87fe <__tzcalc_limits+0xd6>
 80a87fa:	18ea      	adds	r2, r5, r3
 80a87fc:	e7dd      	b.n	80a87ba <__tzcalc_limits+0x92>
 80a87fe:	9a00      	ldr	r2, [sp, #0]
 80a8800:	bb6a      	cbnz	r2, 80a885e <__tzcalc_limits+0x136>
 80a8802:	2e00      	cmp	r6, #0
 80a8804:	bf0c      	ite	eq
 80a8806:	46e0      	moveq	r8, ip
 80a8808:	f04f 0801 	movne.w	r8, #1
 80a880c:	f04f 0a30 	mov.w	sl, #48	; 0x30
 80a8810:	68e2      	ldr	r2, [r4, #12]
 80a8812:	f04f 0900 	mov.w	r9, #0
 80a8816:	9201      	str	r2, [sp, #4]
 80a8818:	462a      	mov	r2, r5
 80a881a:	4916      	ldr	r1, [pc, #88]	; (80a8874 <__tzcalc_limits+0x14c>)
 80a881c:	fb0a 1808 	mla	r8, sl, r8, r1
 80a8820:	f1a8 0804 	sub.w	r8, r8, #4
 80a8824:	9901      	ldr	r1, [sp, #4]
 80a8826:	f109 0901 	add.w	r9, r9, #1
 80a882a:	4549      	cmp	r1, r9
 80a882c:	f858 a029 	ldr.w	sl, [r8, r9, lsl #2]
 80a8830:	dc17      	bgt.n	80a8862 <__tzcalc_limits+0x13a>
 80a8832:	f102 0804 	add.w	r8, r2, #4
 80a8836:	fb98 f9fe 	sdiv	r9, r8, lr
 80a883a:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 80a883e:	eba8 0909 	sub.w	r9, r8, r9
 80a8842:	ebb3 0909 	subs.w	r9, r3, r9
 80a8846:	6923      	ldr	r3, [r4, #16]
 80a8848:	bf48      	it	mi
 80a884a:	f109 0907 	addmi.w	r9, r9, #7
 80a884e:	3b01      	subs	r3, #1
 80a8850:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a8854:	444b      	add	r3, r9
 80a8856:	4553      	cmp	r3, sl
 80a8858:	da05      	bge.n	80a8866 <__tzcalc_limits+0x13e>
 80a885a:	441a      	add	r2, r3
 80a885c:	e7ad      	b.n	80a87ba <__tzcalc_limits+0x92>
 80a885e:	46e0      	mov	r8, ip
 80a8860:	e7d4      	b.n	80a880c <__tzcalc_limits+0xe4>
 80a8862:	4452      	add	r2, sl
 80a8864:	e7de      	b.n	80a8824 <__tzcalc_limits+0xfc>
 80a8866:	3b07      	subs	r3, #7
 80a8868:	e7f5      	b.n	80a8856 <__tzcalc_limits+0x12e>
 80a886a:	2000      	movs	r0, #0
 80a886c:	e7be      	b.n	80a87ec <__tzcalc_limits+0xc4>
 80a886e:	bf00      	nop
 80a8870:	00015180 	.word	0x00015180
 80a8874:	080aa750 	.word	0x080aa750

080a8878 <__tz_lock>:
 80a8878:	4801      	ldr	r0, [pc, #4]	; (80a8880 <__tz_lock+0x8>)
 80a887a:	f000 bde1 	b.w	80a9440 <__retarget_lock_acquire>
 80a887e:	bf00      	nop
 80a8880:	200006ab 	.word	0x200006ab

080a8884 <__tz_unlock>:
 80a8884:	4801      	ldr	r0, [pc, #4]	; (80a888c <__tz_unlock+0x8>)
 80a8886:	f000 bddd 	b.w	80a9444 <__retarget_lock_release>
 80a888a:	bf00      	nop
 80a888c:	200006ab 	.word	0x200006ab

080a8890 <_tzset_unlocked>:
 80a8890:	4b01      	ldr	r3, [pc, #4]	; (80a8898 <_tzset_unlocked+0x8>)
 80a8892:	6818      	ldr	r0, [r3, #0]
 80a8894:	f000 b802 	b.w	80a889c <_tzset_unlocked_r>
 80a8898:	20000014 	.word	0x20000014

080a889c <_tzset_unlocked_r>:
 80a889c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a88a0:	b08d      	sub	sp, #52	; 0x34
 80a88a2:	4607      	mov	r7, r0
 80a88a4:	f000 fd14 	bl	80a92d0 <__gettzinfo>
 80a88a8:	49b0      	ldr	r1, [pc, #704]	; (80a8b6c <_tzset_unlocked_r+0x2d0>)
 80a88aa:	4605      	mov	r5, r0
 80a88ac:	4638      	mov	r0, r7
 80a88ae:	f000 fd07 	bl	80a92c0 <_getenv_r>
 80a88b2:	4eaf      	ldr	r6, [pc, #700]	; (80a8b70 <_tzset_unlocked_r+0x2d4>)
 80a88b4:	4604      	mov	r4, r0
 80a88b6:	b970      	cbnz	r0, 80a88d6 <_tzset_unlocked_r+0x3a>
 80a88b8:	4bae      	ldr	r3, [pc, #696]	; (80a8b74 <_tzset_unlocked_r+0x2d8>)
 80a88ba:	4aaf      	ldr	r2, [pc, #700]	; (80a8b78 <_tzset_unlocked_r+0x2dc>)
 80a88bc:	6018      	str	r0, [r3, #0]
 80a88be:	4baf      	ldr	r3, [pc, #700]	; (80a8b7c <_tzset_unlocked_r+0x2e0>)
 80a88c0:	6018      	str	r0, [r3, #0]
 80a88c2:	4baf      	ldr	r3, [pc, #700]	; (80a8b80 <_tzset_unlocked_r+0x2e4>)
 80a88c4:	6830      	ldr	r0, [r6, #0]
 80a88c6:	e9c3 2200 	strd	r2, r2, [r3]
 80a88ca:	f7fb f849 	bl	80a3960 <free>
 80a88ce:	6034      	str	r4, [r6, #0]
 80a88d0:	b00d      	add	sp, #52	; 0x34
 80a88d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a88d6:	6831      	ldr	r1, [r6, #0]
 80a88d8:	2900      	cmp	r1, #0
 80a88da:	d15f      	bne.n	80a899c <_tzset_unlocked_r+0x100>
 80a88dc:	6830      	ldr	r0, [r6, #0]
 80a88de:	f7fb f83f 	bl	80a3960 <free>
 80a88e2:	4620      	mov	r0, r4
 80a88e4:	f7fe ff80 	bl	80a77e8 <strlen>
 80a88e8:	1c41      	adds	r1, r0, #1
 80a88ea:	4638      	mov	r0, r7
 80a88ec:	f7fb f878 	bl	80a39e0 <_malloc_r>
 80a88f0:	6030      	str	r0, [r6, #0]
 80a88f2:	2800      	cmp	r0, #0
 80a88f4:	d157      	bne.n	80a89a6 <_tzset_unlocked_r+0x10a>
 80a88f6:	7823      	ldrb	r3, [r4, #0]
 80a88f8:	ae0a      	add	r6, sp, #40	; 0x28
 80a88fa:	2b3a      	cmp	r3, #58	; 0x3a
 80a88fc:	bf08      	it	eq
 80a88fe:	3401      	addeq	r4, #1
 80a8900:	4633      	mov	r3, r6
 80a8902:	4620      	mov	r0, r4
 80a8904:	4a9f      	ldr	r2, [pc, #636]	; (80a8b84 <_tzset_unlocked_r+0x2e8>)
 80a8906:	49a0      	ldr	r1, [pc, #640]	; (80a8b88 <_tzset_unlocked_r+0x2ec>)
 80a8908:	f7fb f84a 	bl	80a39a0 <siscanf>
 80a890c:	2800      	cmp	r0, #0
 80a890e:	dddf      	ble.n	80a88d0 <_tzset_unlocked_r+0x34>
 80a8910:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a8912:	18e7      	adds	r7, r4, r3
 80a8914:	5ce3      	ldrb	r3, [r4, r3]
 80a8916:	2b2d      	cmp	r3, #45	; 0x2d
 80a8918:	d149      	bne.n	80a89ae <_tzset_unlocked_r+0x112>
 80a891a:	f04f 34ff 	mov.w	r4, #4294967295
 80a891e:	3701      	adds	r7, #1
 80a8920:	f04f 0800 	mov.w	r8, #0
 80a8924:	f10d 0a20 	add.w	sl, sp, #32
 80a8928:	f10d 0b1e 	add.w	fp, sp, #30
 80a892c:	4633      	mov	r3, r6
 80a892e:	4638      	mov	r0, r7
 80a8930:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 80a8934:	4995      	ldr	r1, [pc, #596]	; (80a8b8c <_tzset_unlocked_r+0x2f0>)
 80a8936:	9603      	str	r6, [sp, #12]
 80a8938:	f8cd b000 	str.w	fp, [sp]
 80a893c:	aa07      	add	r2, sp, #28
 80a893e:	f8ad 801e 	strh.w	r8, [sp, #30]
 80a8942:	f8ad 8020 	strh.w	r8, [sp, #32]
 80a8946:	f7fb f82b 	bl	80a39a0 <siscanf>
 80a894a:	4540      	cmp	r0, r8
 80a894c:	ddc0      	ble.n	80a88d0 <_tzset_unlocked_r+0x34>
 80a894e:	213c      	movs	r1, #60	; 0x3c
 80a8950:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80a8954:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80a8958:	f8df 923c 	ldr.w	r9, [pc, #572]	; 80a8b98 <_tzset_unlocked_r+0x2fc>
 80a895c:	fb01 2203 	mla	r2, r1, r3, r2
 80a8960:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a8964:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80a8968:	fb01 2303 	mla	r3, r1, r3, r2
 80a896c:	435c      	muls	r4, r3
 80a896e:	4b85      	ldr	r3, [pc, #532]	; (80a8b84 <_tzset_unlocked_r+0x2e8>)
 80a8970:	62ac      	str	r4, [r5, #40]	; 0x28
 80a8972:	4c83      	ldr	r4, [pc, #524]	; (80a8b80 <_tzset_unlocked_r+0x2e4>)
 80a8974:	464a      	mov	r2, r9
 80a8976:	6023      	str	r3, [r4, #0]
 80a8978:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a897a:	4983      	ldr	r1, [pc, #524]	; (80a8b88 <_tzset_unlocked_r+0x2ec>)
 80a897c:	441f      	add	r7, r3
 80a897e:	4638      	mov	r0, r7
 80a8980:	4633      	mov	r3, r6
 80a8982:	f7fb f80d 	bl	80a39a0 <siscanf>
 80a8986:	4540      	cmp	r0, r8
 80a8988:	dc17      	bgt.n	80a89ba <_tzset_unlocked_r+0x11e>
 80a898a:	6823      	ldr	r3, [r4, #0]
 80a898c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80a898e:	6063      	str	r3, [r4, #4]
 80a8990:	4b78      	ldr	r3, [pc, #480]	; (80a8b74 <_tzset_unlocked_r+0x2d8>)
 80a8992:	601a      	str	r2, [r3, #0]
 80a8994:	4b79      	ldr	r3, [pc, #484]	; (80a8b7c <_tzset_unlocked_r+0x2e0>)
 80a8996:	f8c3 8000 	str.w	r8, [r3]
 80a899a:	e799      	b.n	80a88d0 <_tzset_unlocked_r+0x34>
 80a899c:	f7fe f9b0 	bl	80a6d00 <strcmp>
 80a89a0:	2800      	cmp	r0, #0
 80a89a2:	d19b      	bne.n	80a88dc <_tzset_unlocked_r+0x40>
 80a89a4:	e794      	b.n	80a88d0 <_tzset_unlocked_r+0x34>
 80a89a6:	4621      	mov	r1, r4
 80a89a8:	f7fe f9b4 	bl	80a6d14 <strcpy>
 80a89ac:	e7a3      	b.n	80a88f6 <_tzset_unlocked_r+0x5a>
 80a89ae:	2b2b      	cmp	r3, #43	; 0x2b
 80a89b0:	f04f 0401 	mov.w	r4, #1
 80a89b4:	bf08      	it	eq
 80a89b6:	3701      	addeq	r7, #1
 80a89b8:	e7b2      	b.n	80a8920 <_tzset_unlocked_r+0x84>
 80a89ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a89bc:	f8c4 9004 	str.w	r9, [r4, #4]
 80a89c0:	18fc      	adds	r4, r7, r3
 80a89c2:	5cfb      	ldrb	r3, [r7, r3]
 80a89c4:	2b2d      	cmp	r3, #45	; 0x2d
 80a89c6:	f040 808c 	bne.w	80a8ae2 <_tzset_unlocked_r+0x246>
 80a89ca:	f04f 37ff 	mov.w	r7, #4294967295
 80a89ce:	3401      	adds	r4, #1
 80a89d0:	2300      	movs	r3, #0
 80a89d2:	4620      	mov	r0, r4
 80a89d4:	f8ad 301c 	strh.w	r3, [sp, #28]
 80a89d8:	f8ad 301e 	strh.w	r3, [sp, #30]
 80a89dc:	f8ad 3020 	strh.w	r3, [sp, #32]
 80a89e0:	930a      	str	r3, [sp, #40]	; 0x28
 80a89e2:	e9cd a602 	strd	sl, r6, [sp, #8]
 80a89e6:	4633      	mov	r3, r6
 80a89e8:	e9cd b600 	strd	fp, r6, [sp]
 80a89ec:	4967      	ldr	r1, [pc, #412]	; (80a8b8c <_tzset_unlocked_r+0x2f0>)
 80a89ee:	aa07      	add	r2, sp, #28
 80a89f0:	f7fa ffd6 	bl	80a39a0 <siscanf>
 80a89f4:	2800      	cmp	r0, #0
 80a89f6:	dc7a      	bgt.n	80a8aee <_tzset_unlocked_r+0x252>
 80a89f8:	6aaf      	ldr	r7, [r5, #40]	; 0x28
 80a89fa:	f5a7 6761 	sub.w	r7, r7, #3600	; 0xe10
 80a89fe:	652f      	str	r7, [r5, #80]	; 0x50
 80a8a00:	f04f 0900 	mov.w	r9, #0
 80a8a04:	462f      	mov	r7, r5
 80a8a06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a8a08:	441c      	add	r4, r3
 80a8a0a:	7823      	ldrb	r3, [r4, #0]
 80a8a0c:	2b2c      	cmp	r3, #44	; 0x2c
 80a8a0e:	bf08      	it	eq
 80a8a10:	3401      	addeq	r4, #1
 80a8a12:	f894 8000 	ldrb.w	r8, [r4]
 80a8a16:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 80a8a1a:	d17a      	bne.n	80a8b12 <_tzset_unlocked_r+0x276>
 80a8a1c:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 80a8a20:	e9cd 6301 	strd	r6, r3, [sp, #4]
 80a8a24:	ab09      	add	r3, sp, #36	; 0x24
 80a8a26:	9300      	str	r3, [sp, #0]
 80a8a28:	4620      	mov	r0, r4
 80a8a2a:	4633      	mov	r3, r6
 80a8a2c:	4958      	ldr	r1, [pc, #352]	; (80a8b90 <_tzset_unlocked_r+0x2f4>)
 80a8a2e:	9603      	str	r6, [sp, #12]
 80a8a30:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 80a8a34:	f7fa ffb4 	bl	80a39a0 <siscanf>
 80a8a38:	2803      	cmp	r0, #3
 80a8a3a:	f47f af49 	bne.w	80a88d0 <_tzset_unlocked_r+0x34>
 80a8a3e:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 80a8a42:	1e4b      	subs	r3, r1, #1
 80a8a44:	2b0b      	cmp	r3, #11
 80a8a46:	f63f af43 	bhi.w	80a88d0 <_tzset_unlocked_r+0x34>
 80a8a4a:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 80a8a4e:	1e53      	subs	r3, r2, #1
 80a8a50:	2b04      	cmp	r3, #4
 80a8a52:	f63f af3d 	bhi.w	80a88d0 <_tzset_unlocked_r+0x34>
 80a8a56:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 80a8a5a:	2b06      	cmp	r3, #6
 80a8a5c:	f63f af38 	bhi.w	80a88d0 <_tzset_unlocked_r+0x34>
 80a8a60:	e9c7 1203 	strd	r1, r2, [r7, #12]
 80a8a64:	f887 8008 	strb.w	r8, [r7, #8]
 80a8a68:	617b      	str	r3, [r7, #20]
 80a8a6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a8a6c:	eb04 0803 	add.w	r8, r4, r3
 80a8a70:	2302      	movs	r3, #2
 80a8a72:	f8ad 301c 	strh.w	r3, [sp, #28]
 80a8a76:	2300      	movs	r3, #0
 80a8a78:	f8ad 301e 	strh.w	r3, [sp, #30]
 80a8a7c:	f8ad 3020 	strh.w	r3, [sp, #32]
 80a8a80:	930a      	str	r3, [sp, #40]	; 0x28
 80a8a82:	f898 3000 	ldrb.w	r3, [r8]
 80a8a86:	2b2f      	cmp	r3, #47	; 0x2f
 80a8a88:	d109      	bne.n	80a8a9e <_tzset_unlocked_r+0x202>
 80a8a8a:	4633      	mov	r3, r6
 80a8a8c:	4640      	mov	r0, r8
 80a8a8e:	e9cd a602 	strd	sl, r6, [sp, #8]
 80a8a92:	e9cd b600 	strd	fp, r6, [sp]
 80a8a96:	493f      	ldr	r1, [pc, #252]	; (80a8b94 <_tzset_unlocked_r+0x2f8>)
 80a8a98:	aa07      	add	r2, sp, #28
 80a8a9a:	f7fa ff81 	bl	80a39a0 <siscanf>
 80a8a9e:	213c      	movs	r1, #60	; 0x3c
 80a8aa0:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80a8aa4:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80a8aa8:	3728      	adds	r7, #40	; 0x28
 80a8aaa:	fb01 2203 	mla	r2, r1, r3, r2
 80a8aae:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a8ab2:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80a8ab6:	fb01 2303 	mla	r3, r1, r3, r2
 80a8aba:	f847 3c10 	str.w	r3, [r7, #-16]
 80a8abe:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80a8ac0:	4444      	add	r4, r8
 80a8ac2:	f1b9 0f00 	cmp.w	r9, #0
 80a8ac6:	d021      	beq.n	80a8b0c <_tzset_unlocked_r+0x270>
 80a8ac8:	6868      	ldr	r0, [r5, #4]
 80a8aca:	f7ff fe2d 	bl	80a8728 <__tzcalc_limits>
 80a8ace:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80a8ad0:	4b28      	ldr	r3, [pc, #160]	; (80a8b74 <_tzset_unlocked_r+0x2d8>)
 80a8ad2:	601a      	str	r2, [r3, #0]
 80a8ad4:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80a8ad6:	1a9b      	subs	r3, r3, r2
 80a8ad8:	bf18      	it	ne
 80a8ada:	2301      	movne	r3, #1
 80a8adc:	4a27      	ldr	r2, [pc, #156]	; (80a8b7c <_tzset_unlocked_r+0x2e0>)
 80a8ade:	6013      	str	r3, [r2, #0]
 80a8ae0:	e6f6      	b.n	80a88d0 <_tzset_unlocked_r+0x34>
 80a8ae2:	2b2b      	cmp	r3, #43	; 0x2b
 80a8ae4:	f04f 0701 	mov.w	r7, #1
 80a8ae8:	bf08      	it	eq
 80a8aea:	3401      	addeq	r4, #1
 80a8aec:	e770      	b.n	80a89d0 <_tzset_unlocked_r+0x134>
 80a8aee:	213c      	movs	r1, #60	; 0x3c
 80a8af0:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80a8af4:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80a8af8:	fb01 2203 	mla	r2, r1, r3, r2
 80a8afc:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a8b00:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80a8b04:	fb01 2303 	mla	r3, r1, r3, r2
 80a8b08:	435f      	muls	r7, r3
 80a8b0a:	e778      	b.n	80a89fe <_tzset_unlocked_r+0x162>
 80a8b0c:	f04f 0901 	mov.w	r9, #1
 80a8b10:	e77b      	b.n	80a8a0a <_tzset_unlocked_r+0x16e>
 80a8b12:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 80a8b16:	bf0a      	itet	eq
 80a8b18:	4643      	moveq	r3, r8
 80a8b1a:	2344      	movne	r3, #68	; 0x44
 80a8b1c:	3401      	addeq	r4, #1
 80a8b1e:	220a      	movs	r2, #10
 80a8b20:	4620      	mov	r0, r4
 80a8b22:	a90b      	add	r1, sp, #44	; 0x2c
 80a8b24:	9305      	str	r3, [sp, #20]
 80a8b26:	f7ff fdf5 	bl	80a8714 <strtoul>
 80a8b2a:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 80a8b2e:	9b05      	ldr	r3, [sp, #20]
 80a8b30:	45a0      	cmp	r8, r4
 80a8b32:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 80a8b36:	d114      	bne.n	80a8b62 <_tzset_unlocked_r+0x2c6>
 80a8b38:	234d      	movs	r3, #77	; 0x4d
 80a8b3a:	f1b9 0f00 	cmp.w	r9, #0
 80a8b3e:	d107      	bne.n	80a8b50 <_tzset_unlocked_r+0x2b4>
 80a8b40:	2103      	movs	r1, #3
 80a8b42:	722b      	strb	r3, [r5, #8]
 80a8b44:	2302      	movs	r3, #2
 80a8b46:	f8c5 9014 	str.w	r9, [r5, #20]
 80a8b4a:	e9c5 1303 	strd	r1, r3, [r5, #12]
 80a8b4e:	e78f      	b.n	80a8a70 <_tzset_unlocked_r+0x1d4>
 80a8b50:	220b      	movs	r2, #11
 80a8b52:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 80a8b56:	2301      	movs	r3, #1
 80a8b58:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 80a8b5c:	2300      	movs	r3, #0
 80a8b5e:	63eb      	str	r3, [r5, #60]	; 0x3c
 80a8b60:	e786      	b.n	80a8a70 <_tzset_unlocked_r+0x1d4>
 80a8b62:	b280      	uxth	r0, r0
 80a8b64:	723b      	strb	r3, [r7, #8]
 80a8b66:	6178      	str	r0, [r7, #20]
 80a8b68:	e782      	b.n	80a8a70 <_tzset_unlocked_r+0x1d4>
 80a8b6a:	bf00      	nop
 80a8b6c:	080aaa88 	.word	0x080aaa88
 80a8b70:	20000694 	.word	0x20000694
 80a8b74:	2000069c 	.word	0x2000069c
 80a8b78:	080aaa8b 	.word	0x080aaa8b
 80a8b7c:	20000698 	.word	0x20000698
 80a8b80:	20000078 	.word	0x20000078
 80a8b84:	20000687 	.word	0x20000687
 80a8b88:	080aaa8f 	.word	0x080aaa8f
 80a8b8c:	080aaab2 	.word	0x080aaab2
 80a8b90:	080aaa9e 	.word	0x080aaa9e
 80a8b94:	080aaab1 	.word	0x080aaab1
 80a8b98:	2000067c 	.word	0x2000067c

080a8b9c <abs>:
 80a8b9c:	2800      	cmp	r0, #0
 80a8b9e:	bfb8      	it	lt
 80a8ba0:	4240      	neglt	r0, r0
 80a8ba2:	4770      	bx	lr

080a8ba4 <rshift>:
 80a8ba4:	6903      	ldr	r3, [r0, #16]
 80a8ba6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a8baa:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80a8bae:	f100 0414 	add.w	r4, r0, #20
 80a8bb2:	ea4f 1261 	mov.w	r2, r1, asr #5
 80a8bb6:	dd46      	ble.n	80a8c46 <rshift+0xa2>
 80a8bb8:	f011 011f 	ands.w	r1, r1, #31
 80a8bbc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80a8bc0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80a8bc4:	d10c      	bne.n	80a8be0 <rshift+0x3c>
 80a8bc6:	4629      	mov	r1, r5
 80a8bc8:	f100 0710 	add.w	r7, r0, #16
 80a8bcc:	42b1      	cmp	r1, r6
 80a8bce:	d335      	bcc.n	80a8c3c <rshift+0x98>
 80a8bd0:	1a9b      	subs	r3, r3, r2
 80a8bd2:	009b      	lsls	r3, r3, #2
 80a8bd4:	1eea      	subs	r2, r5, #3
 80a8bd6:	4296      	cmp	r6, r2
 80a8bd8:	bf38      	it	cc
 80a8bda:	2300      	movcc	r3, #0
 80a8bdc:	4423      	add	r3, r4
 80a8bde:	e015      	b.n	80a8c0c <rshift+0x68>
 80a8be0:	46a1      	mov	r9, r4
 80a8be2:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80a8be6:	f1c1 0820 	rsb	r8, r1, #32
 80a8bea:	40cf      	lsrs	r7, r1
 80a8bec:	f105 0e04 	add.w	lr, r5, #4
 80a8bf0:	4576      	cmp	r6, lr
 80a8bf2:	46f4      	mov	ip, lr
 80a8bf4:	d816      	bhi.n	80a8c24 <rshift+0x80>
 80a8bf6:	1a9b      	subs	r3, r3, r2
 80a8bf8:	009a      	lsls	r2, r3, #2
 80a8bfa:	3a04      	subs	r2, #4
 80a8bfc:	3501      	adds	r5, #1
 80a8bfe:	42ae      	cmp	r6, r5
 80a8c00:	bf38      	it	cc
 80a8c02:	2200      	movcc	r2, #0
 80a8c04:	18a3      	adds	r3, r4, r2
 80a8c06:	50a7      	str	r7, [r4, r2]
 80a8c08:	b107      	cbz	r7, 80a8c0c <rshift+0x68>
 80a8c0a:	3304      	adds	r3, #4
 80a8c0c:	42a3      	cmp	r3, r4
 80a8c0e:	eba3 0204 	sub.w	r2, r3, r4
 80a8c12:	bf08      	it	eq
 80a8c14:	2300      	moveq	r3, #0
 80a8c16:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80a8c1a:	6102      	str	r2, [r0, #16]
 80a8c1c:	bf08      	it	eq
 80a8c1e:	6143      	streq	r3, [r0, #20]
 80a8c20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a8c24:	f8dc c000 	ldr.w	ip, [ip]
 80a8c28:	fa0c fc08 	lsl.w	ip, ip, r8
 80a8c2c:	ea4c 0707 	orr.w	r7, ip, r7
 80a8c30:	f849 7b04 	str.w	r7, [r9], #4
 80a8c34:	f85e 7b04 	ldr.w	r7, [lr], #4
 80a8c38:	40cf      	lsrs	r7, r1
 80a8c3a:	e7d9      	b.n	80a8bf0 <rshift+0x4c>
 80a8c3c:	f851 cb04 	ldr.w	ip, [r1], #4
 80a8c40:	f847 cf04 	str.w	ip, [r7, #4]!
 80a8c44:	e7c2      	b.n	80a8bcc <rshift+0x28>
 80a8c46:	4623      	mov	r3, r4
 80a8c48:	e7e0      	b.n	80a8c0c <rshift+0x68>

080a8c4a <__hexdig_fun>:
 80a8c4a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80a8c4e:	2b09      	cmp	r3, #9
 80a8c50:	d802      	bhi.n	80a8c58 <__hexdig_fun+0xe>
 80a8c52:	3820      	subs	r0, #32
 80a8c54:	b2c0      	uxtb	r0, r0
 80a8c56:	4770      	bx	lr
 80a8c58:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80a8c5c:	2b05      	cmp	r3, #5
 80a8c5e:	d801      	bhi.n	80a8c64 <__hexdig_fun+0x1a>
 80a8c60:	3847      	subs	r0, #71	; 0x47
 80a8c62:	e7f7      	b.n	80a8c54 <__hexdig_fun+0xa>
 80a8c64:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80a8c68:	2b05      	cmp	r3, #5
 80a8c6a:	d801      	bhi.n	80a8c70 <__hexdig_fun+0x26>
 80a8c6c:	3827      	subs	r0, #39	; 0x27
 80a8c6e:	e7f1      	b.n	80a8c54 <__hexdig_fun+0xa>
 80a8c70:	2000      	movs	r0, #0
 80a8c72:	4770      	bx	lr

080a8c74 <__gethex>:
 80a8c74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a8c78:	b08b      	sub	sp, #44	; 0x2c
 80a8c7a:	9306      	str	r3, [sp, #24]
 80a8c7c:	4bba      	ldr	r3, [pc, #744]	; (80a8f68 <__gethex+0x2f4>)
 80a8c7e:	9002      	str	r0, [sp, #8]
 80a8c80:	681b      	ldr	r3, [r3, #0]
 80a8c82:	468b      	mov	fp, r1
 80a8c84:	4618      	mov	r0, r3
 80a8c86:	4690      	mov	r8, r2
 80a8c88:	9303      	str	r3, [sp, #12]
 80a8c8a:	f7fe fdad 	bl	80a77e8 <strlen>
 80a8c8e:	4682      	mov	sl, r0
 80a8c90:	9b03      	ldr	r3, [sp, #12]
 80a8c92:	f8db 2000 	ldr.w	r2, [fp]
 80a8c96:	4403      	add	r3, r0
 80a8c98:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80a8c9c:	9307      	str	r3, [sp, #28]
 80a8c9e:	1c93      	adds	r3, r2, #2
 80a8ca0:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80a8ca4:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80a8ca8:	32fe      	adds	r2, #254	; 0xfe
 80a8caa:	18d1      	adds	r1, r2, r3
 80a8cac:	461f      	mov	r7, r3
 80a8cae:	f813 0b01 	ldrb.w	r0, [r3], #1
 80a8cb2:	9101      	str	r1, [sp, #4]
 80a8cb4:	2830      	cmp	r0, #48	; 0x30
 80a8cb6:	d0f8      	beq.n	80a8caa <__gethex+0x36>
 80a8cb8:	f7ff ffc7 	bl	80a8c4a <__hexdig_fun>
 80a8cbc:	4604      	mov	r4, r0
 80a8cbe:	2800      	cmp	r0, #0
 80a8cc0:	d13a      	bne.n	80a8d38 <__gethex+0xc4>
 80a8cc2:	4652      	mov	r2, sl
 80a8cc4:	4638      	mov	r0, r7
 80a8cc6:	9903      	ldr	r1, [sp, #12]
 80a8cc8:	f7fe fd96 	bl	80a77f8 <strncmp>
 80a8ccc:	4605      	mov	r5, r0
 80a8cce:	2800      	cmp	r0, #0
 80a8cd0:	d166      	bne.n	80a8da0 <__gethex+0x12c>
 80a8cd2:	f817 000a 	ldrb.w	r0, [r7, sl]
 80a8cd6:	eb07 060a 	add.w	r6, r7, sl
 80a8cda:	f7ff ffb6 	bl	80a8c4a <__hexdig_fun>
 80a8cde:	2800      	cmp	r0, #0
 80a8ce0:	d060      	beq.n	80a8da4 <__gethex+0x130>
 80a8ce2:	4633      	mov	r3, r6
 80a8ce4:	7818      	ldrb	r0, [r3, #0]
 80a8ce6:	461f      	mov	r7, r3
 80a8ce8:	2830      	cmp	r0, #48	; 0x30
 80a8cea:	f103 0301 	add.w	r3, r3, #1
 80a8cee:	d0f9      	beq.n	80a8ce4 <__gethex+0x70>
 80a8cf0:	f7ff ffab 	bl	80a8c4a <__hexdig_fun>
 80a8cf4:	2301      	movs	r3, #1
 80a8cf6:	fab0 f480 	clz	r4, r0
 80a8cfa:	4635      	mov	r5, r6
 80a8cfc:	0964      	lsrs	r4, r4, #5
 80a8cfe:	9301      	str	r3, [sp, #4]
 80a8d00:	463a      	mov	r2, r7
 80a8d02:	4616      	mov	r6, r2
 80a8d04:	7830      	ldrb	r0, [r6, #0]
 80a8d06:	3201      	adds	r2, #1
 80a8d08:	f7ff ff9f 	bl	80a8c4a <__hexdig_fun>
 80a8d0c:	2800      	cmp	r0, #0
 80a8d0e:	d1f8      	bne.n	80a8d02 <__gethex+0x8e>
 80a8d10:	4652      	mov	r2, sl
 80a8d12:	4630      	mov	r0, r6
 80a8d14:	9903      	ldr	r1, [sp, #12]
 80a8d16:	f7fe fd6f 	bl	80a77f8 <strncmp>
 80a8d1a:	b980      	cbnz	r0, 80a8d3e <__gethex+0xca>
 80a8d1c:	b94d      	cbnz	r5, 80a8d32 <__gethex+0xbe>
 80a8d1e:	eb06 050a 	add.w	r5, r6, sl
 80a8d22:	462a      	mov	r2, r5
 80a8d24:	4616      	mov	r6, r2
 80a8d26:	7830      	ldrb	r0, [r6, #0]
 80a8d28:	3201      	adds	r2, #1
 80a8d2a:	f7ff ff8e 	bl	80a8c4a <__hexdig_fun>
 80a8d2e:	2800      	cmp	r0, #0
 80a8d30:	d1f8      	bne.n	80a8d24 <__gethex+0xb0>
 80a8d32:	1bad      	subs	r5, r5, r6
 80a8d34:	00ad      	lsls	r5, r5, #2
 80a8d36:	e004      	b.n	80a8d42 <__gethex+0xce>
 80a8d38:	2400      	movs	r4, #0
 80a8d3a:	4625      	mov	r5, r4
 80a8d3c:	e7e0      	b.n	80a8d00 <__gethex+0x8c>
 80a8d3e:	2d00      	cmp	r5, #0
 80a8d40:	d1f7      	bne.n	80a8d32 <__gethex+0xbe>
 80a8d42:	7833      	ldrb	r3, [r6, #0]
 80a8d44:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80a8d48:	2b50      	cmp	r3, #80	; 0x50
 80a8d4a:	d139      	bne.n	80a8dc0 <__gethex+0x14c>
 80a8d4c:	7873      	ldrb	r3, [r6, #1]
 80a8d4e:	2b2b      	cmp	r3, #43	; 0x2b
 80a8d50:	d02a      	beq.n	80a8da8 <__gethex+0x134>
 80a8d52:	2b2d      	cmp	r3, #45	; 0x2d
 80a8d54:	d02c      	beq.n	80a8db0 <__gethex+0x13c>
 80a8d56:	f04f 0900 	mov.w	r9, #0
 80a8d5a:	1c71      	adds	r1, r6, #1
 80a8d5c:	7808      	ldrb	r0, [r1, #0]
 80a8d5e:	f7ff ff74 	bl	80a8c4a <__hexdig_fun>
 80a8d62:	1e43      	subs	r3, r0, #1
 80a8d64:	b2db      	uxtb	r3, r3
 80a8d66:	2b18      	cmp	r3, #24
 80a8d68:	d82a      	bhi.n	80a8dc0 <__gethex+0x14c>
 80a8d6a:	f1a0 0210 	sub.w	r2, r0, #16
 80a8d6e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80a8d72:	f7ff ff6a 	bl	80a8c4a <__hexdig_fun>
 80a8d76:	1e43      	subs	r3, r0, #1
 80a8d78:	b2db      	uxtb	r3, r3
 80a8d7a:	2b18      	cmp	r3, #24
 80a8d7c:	d91b      	bls.n	80a8db6 <__gethex+0x142>
 80a8d7e:	f1b9 0f00 	cmp.w	r9, #0
 80a8d82:	d000      	beq.n	80a8d86 <__gethex+0x112>
 80a8d84:	4252      	negs	r2, r2
 80a8d86:	4415      	add	r5, r2
 80a8d88:	f8cb 1000 	str.w	r1, [fp]
 80a8d8c:	b1d4      	cbz	r4, 80a8dc4 <__gethex+0x150>
 80a8d8e:	9b01      	ldr	r3, [sp, #4]
 80a8d90:	2b00      	cmp	r3, #0
 80a8d92:	bf14      	ite	ne
 80a8d94:	2700      	movne	r7, #0
 80a8d96:	2706      	moveq	r7, #6
 80a8d98:	4638      	mov	r0, r7
 80a8d9a:	b00b      	add	sp, #44	; 0x2c
 80a8d9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a8da0:	463e      	mov	r6, r7
 80a8da2:	4625      	mov	r5, r4
 80a8da4:	2401      	movs	r4, #1
 80a8da6:	e7cc      	b.n	80a8d42 <__gethex+0xce>
 80a8da8:	f04f 0900 	mov.w	r9, #0
 80a8dac:	1cb1      	adds	r1, r6, #2
 80a8dae:	e7d5      	b.n	80a8d5c <__gethex+0xe8>
 80a8db0:	f04f 0901 	mov.w	r9, #1
 80a8db4:	e7fa      	b.n	80a8dac <__gethex+0x138>
 80a8db6:	230a      	movs	r3, #10
 80a8db8:	fb03 0202 	mla	r2, r3, r2, r0
 80a8dbc:	3a10      	subs	r2, #16
 80a8dbe:	e7d6      	b.n	80a8d6e <__gethex+0xfa>
 80a8dc0:	4631      	mov	r1, r6
 80a8dc2:	e7e1      	b.n	80a8d88 <__gethex+0x114>
 80a8dc4:	4621      	mov	r1, r4
 80a8dc6:	1bf3      	subs	r3, r6, r7
 80a8dc8:	3b01      	subs	r3, #1
 80a8dca:	2b07      	cmp	r3, #7
 80a8dcc:	dc50      	bgt.n	80a8e70 <__gethex+0x1fc>
 80a8dce:	9802      	ldr	r0, [sp, #8]
 80a8dd0:	f000 fb4c 	bl	80a946c <_Balloc>
 80a8dd4:	f04f 0b00 	mov.w	fp, #0
 80a8dd8:	4604      	mov	r4, r0
 80a8dda:	f100 0914 	add.w	r9, r0, #20
 80a8dde:	f1ca 0301 	rsb	r3, sl, #1
 80a8de2:	f8cd 9010 	str.w	r9, [sp, #16]
 80a8de6:	f8cd b004 	str.w	fp, [sp, #4]
 80a8dea:	9308      	str	r3, [sp, #32]
 80a8dec:	42b7      	cmp	r7, r6
 80a8dee:	d342      	bcc.n	80a8e76 <__gethex+0x202>
 80a8df0:	9f04      	ldr	r7, [sp, #16]
 80a8df2:	9b01      	ldr	r3, [sp, #4]
 80a8df4:	f847 3b04 	str.w	r3, [r7], #4
 80a8df8:	eba7 0709 	sub.w	r7, r7, r9
 80a8dfc:	10bf      	asrs	r7, r7, #2
 80a8dfe:	6127      	str	r7, [r4, #16]
 80a8e00:	4618      	mov	r0, r3
 80a8e02:	f000 fbfa 	bl	80a95fa <__hi0bits>
 80a8e06:	017f      	lsls	r7, r7, #5
 80a8e08:	f8d8 6000 	ldr.w	r6, [r8]
 80a8e0c:	1a3f      	subs	r7, r7, r0
 80a8e0e:	42b7      	cmp	r7, r6
 80a8e10:	dd65      	ble.n	80a8ede <__gethex+0x26a>
 80a8e12:	1bbf      	subs	r7, r7, r6
 80a8e14:	4639      	mov	r1, r7
 80a8e16:	4620      	mov	r0, r4
 80a8e18:	f000 ff40 	bl	80a9c9c <__any_on>
 80a8e1c:	4682      	mov	sl, r0
 80a8e1e:	b1a8      	cbz	r0, 80a8e4c <__gethex+0x1d8>
 80a8e20:	f04f 0a01 	mov.w	sl, #1
 80a8e24:	1e7b      	subs	r3, r7, #1
 80a8e26:	1159      	asrs	r1, r3, #5
 80a8e28:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80a8e2c:	f003 021f 	and.w	r2, r3, #31
 80a8e30:	fa0a f202 	lsl.w	r2, sl, r2
 80a8e34:	420a      	tst	r2, r1
 80a8e36:	d009      	beq.n	80a8e4c <__gethex+0x1d8>
 80a8e38:	4553      	cmp	r3, sl
 80a8e3a:	dd05      	ble.n	80a8e48 <__gethex+0x1d4>
 80a8e3c:	4620      	mov	r0, r4
 80a8e3e:	1eb9      	subs	r1, r7, #2
 80a8e40:	f000 ff2c 	bl	80a9c9c <__any_on>
 80a8e44:	2800      	cmp	r0, #0
 80a8e46:	d147      	bne.n	80a8ed8 <__gethex+0x264>
 80a8e48:	f04f 0a02 	mov.w	sl, #2
 80a8e4c:	4639      	mov	r1, r7
 80a8e4e:	4620      	mov	r0, r4
 80a8e50:	f7ff fea8 	bl	80a8ba4 <rshift>
 80a8e54:	443d      	add	r5, r7
 80a8e56:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80a8e5a:	42ab      	cmp	r3, r5
 80a8e5c:	da4d      	bge.n	80a8efa <__gethex+0x286>
 80a8e5e:	4621      	mov	r1, r4
 80a8e60:	9802      	ldr	r0, [sp, #8]
 80a8e62:	f000 fb37 	bl	80a94d4 <_Bfree>
 80a8e66:	2300      	movs	r3, #0
 80a8e68:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80a8e6a:	27a3      	movs	r7, #163	; 0xa3
 80a8e6c:	6013      	str	r3, [r2, #0]
 80a8e6e:	e793      	b.n	80a8d98 <__gethex+0x124>
 80a8e70:	3101      	adds	r1, #1
 80a8e72:	105b      	asrs	r3, r3, #1
 80a8e74:	e7a9      	b.n	80a8dca <__gethex+0x156>
 80a8e76:	1e73      	subs	r3, r6, #1
 80a8e78:	9a07      	ldr	r2, [sp, #28]
 80a8e7a:	9305      	str	r3, [sp, #20]
 80a8e7c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80a8e80:	4293      	cmp	r3, r2
 80a8e82:	d019      	beq.n	80a8eb8 <__gethex+0x244>
 80a8e84:	f1bb 0f20 	cmp.w	fp, #32
 80a8e88:	d107      	bne.n	80a8e9a <__gethex+0x226>
 80a8e8a:	9b04      	ldr	r3, [sp, #16]
 80a8e8c:	9a01      	ldr	r2, [sp, #4]
 80a8e8e:	f843 2b04 	str.w	r2, [r3], #4
 80a8e92:	9304      	str	r3, [sp, #16]
 80a8e94:	2300      	movs	r3, #0
 80a8e96:	469b      	mov	fp, r3
 80a8e98:	9301      	str	r3, [sp, #4]
 80a8e9a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80a8e9e:	f7ff fed4 	bl	80a8c4a <__hexdig_fun>
 80a8ea2:	9b01      	ldr	r3, [sp, #4]
 80a8ea4:	f000 000f 	and.w	r0, r0, #15
 80a8ea8:	fa00 f00b 	lsl.w	r0, r0, fp
 80a8eac:	4303      	orrs	r3, r0
 80a8eae:	9301      	str	r3, [sp, #4]
 80a8eb0:	f10b 0b04 	add.w	fp, fp, #4
 80a8eb4:	9b05      	ldr	r3, [sp, #20]
 80a8eb6:	e00d      	b.n	80a8ed4 <__gethex+0x260>
 80a8eb8:	9b05      	ldr	r3, [sp, #20]
 80a8eba:	9a08      	ldr	r2, [sp, #32]
 80a8ebc:	4413      	add	r3, r2
 80a8ebe:	42bb      	cmp	r3, r7
 80a8ec0:	d3e0      	bcc.n	80a8e84 <__gethex+0x210>
 80a8ec2:	4618      	mov	r0, r3
 80a8ec4:	4652      	mov	r2, sl
 80a8ec6:	9903      	ldr	r1, [sp, #12]
 80a8ec8:	9309      	str	r3, [sp, #36]	; 0x24
 80a8eca:	f7fe fc95 	bl	80a77f8 <strncmp>
 80a8ece:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a8ed0:	2800      	cmp	r0, #0
 80a8ed2:	d1d7      	bne.n	80a8e84 <__gethex+0x210>
 80a8ed4:	461e      	mov	r6, r3
 80a8ed6:	e789      	b.n	80a8dec <__gethex+0x178>
 80a8ed8:	f04f 0a03 	mov.w	sl, #3
 80a8edc:	e7b6      	b.n	80a8e4c <__gethex+0x1d8>
 80a8ede:	da09      	bge.n	80a8ef4 <__gethex+0x280>
 80a8ee0:	1bf7      	subs	r7, r6, r7
 80a8ee2:	4621      	mov	r1, r4
 80a8ee4:	463a      	mov	r2, r7
 80a8ee6:	9802      	ldr	r0, [sp, #8]
 80a8ee8:	f000 fcc8 	bl	80a987c <__lshift>
 80a8eec:	4604      	mov	r4, r0
 80a8eee:	1bed      	subs	r5, r5, r7
 80a8ef0:	f100 0914 	add.w	r9, r0, #20
 80a8ef4:	f04f 0a00 	mov.w	sl, #0
 80a8ef8:	e7ad      	b.n	80a8e56 <__gethex+0x1e2>
 80a8efa:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80a8efe:	42a8      	cmp	r0, r5
 80a8f00:	dd6e      	ble.n	80a8fe0 <__gethex+0x36c>
 80a8f02:	1b45      	subs	r5, r0, r5
 80a8f04:	42ae      	cmp	r6, r5
 80a8f06:	dc31      	bgt.n	80a8f6c <__gethex+0x2f8>
 80a8f08:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80a8f0c:	2b02      	cmp	r3, #2
 80a8f0e:	d022      	beq.n	80a8f56 <__gethex+0x2e2>
 80a8f10:	2b03      	cmp	r3, #3
 80a8f12:	d024      	beq.n	80a8f5e <__gethex+0x2ea>
 80a8f14:	2b01      	cmp	r3, #1
 80a8f16:	d115      	bne.n	80a8f44 <__gethex+0x2d0>
 80a8f18:	42ae      	cmp	r6, r5
 80a8f1a:	d113      	bne.n	80a8f44 <__gethex+0x2d0>
 80a8f1c:	2e01      	cmp	r6, #1
 80a8f1e:	d10b      	bne.n	80a8f38 <__gethex+0x2c4>
 80a8f20:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80a8f24:	9a06      	ldr	r2, [sp, #24]
 80a8f26:	2762      	movs	r7, #98	; 0x62
 80a8f28:	6013      	str	r3, [r2, #0]
 80a8f2a:	2301      	movs	r3, #1
 80a8f2c:	6123      	str	r3, [r4, #16]
 80a8f2e:	f8c9 3000 	str.w	r3, [r9]
 80a8f32:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80a8f34:	601c      	str	r4, [r3, #0]
 80a8f36:	e72f      	b.n	80a8d98 <__gethex+0x124>
 80a8f38:	4620      	mov	r0, r4
 80a8f3a:	1e71      	subs	r1, r6, #1
 80a8f3c:	f000 feae 	bl	80a9c9c <__any_on>
 80a8f40:	2800      	cmp	r0, #0
 80a8f42:	d1ed      	bne.n	80a8f20 <__gethex+0x2ac>
 80a8f44:	4621      	mov	r1, r4
 80a8f46:	9802      	ldr	r0, [sp, #8]
 80a8f48:	f000 fac4 	bl	80a94d4 <_Bfree>
 80a8f4c:	2300      	movs	r3, #0
 80a8f4e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80a8f50:	2750      	movs	r7, #80	; 0x50
 80a8f52:	6013      	str	r3, [r2, #0]
 80a8f54:	e720      	b.n	80a8d98 <__gethex+0x124>
 80a8f56:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80a8f58:	2b00      	cmp	r3, #0
 80a8f5a:	d1f3      	bne.n	80a8f44 <__gethex+0x2d0>
 80a8f5c:	e7e0      	b.n	80a8f20 <__gethex+0x2ac>
 80a8f5e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80a8f60:	2b00      	cmp	r3, #0
 80a8f62:	d1dd      	bne.n	80a8f20 <__gethex+0x2ac>
 80a8f64:	e7ee      	b.n	80a8f44 <__gethex+0x2d0>
 80a8f66:	bf00      	nop
 80a8f68:	080aabc8 	.word	0x080aabc8
 80a8f6c:	1e6f      	subs	r7, r5, #1
 80a8f6e:	f1ba 0f00 	cmp.w	sl, #0
 80a8f72:	d132      	bne.n	80a8fda <__gethex+0x366>
 80a8f74:	b127      	cbz	r7, 80a8f80 <__gethex+0x30c>
 80a8f76:	4639      	mov	r1, r7
 80a8f78:	4620      	mov	r0, r4
 80a8f7a:	f000 fe8f 	bl	80a9c9c <__any_on>
 80a8f7e:	4682      	mov	sl, r0
 80a8f80:	2101      	movs	r1, #1
 80a8f82:	117b      	asrs	r3, r7, #5
 80a8f84:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80a8f88:	f007 071f 	and.w	r7, r7, #31
 80a8f8c:	fa01 f707 	lsl.w	r7, r1, r7
 80a8f90:	421f      	tst	r7, r3
 80a8f92:	f04f 0702 	mov.w	r7, #2
 80a8f96:	4629      	mov	r1, r5
 80a8f98:	4620      	mov	r0, r4
 80a8f9a:	bf18      	it	ne
 80a8f9c:	f04a 0a02 	orrne.w	sl, sl, #2
 80a8fa0:	1b76      	subs	r6, r6, r5
 80a8fa2:	f7ff fdff 	bl	80a8ba4 <rshift>
 80a8fa6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80a8faa:	f1ba 0f00 	cmp.w	sl, #0
 80a8fae:	d048      	beq.n	80a9042 <__gethex+0x3ce>
 80a8fb0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80a8fb4:	2b02      	cmp	r3, #2
 80a8fb6:	d015      	beq.n	80a8fe4 <__gethex+0x370>
 80a8fb8:	2b03      	cmp	r3, #3
 80a8fba:	d017      	beq.n	80a8fec <__gethex+0x378>
 80a8fbc:	2b01      	cmp	r3, #1
 80a8fbe:	d109      	bne.n	80a8fd4 <__gethex+0x360>
 80a8fc0:	f01a 0f02 	tst.w	sl, #2
 80a8fc4:	d006      	beq.n	80a8fd4 <__gethex+0x360>
 80a8fc6:	f8d9 0000 	ldr.w	r0, [r9]
 80a8fca:	ea4a 0a00 	orr.w	sl, sl, r0
 80a8fce:	f01a 0f01 	tst.w	sl, #1
 80a8fd2:	d10e      	bne.n	80a8ff2 <__gethex+0x37e>
 80a8fd4:	f047 0710 	orr.w	r7, r7, #16
 80a8fd8:	e033      	b.n	80a9042 <__gethex+0x3ce>
 80a8fda:	f04f 0a01 	mov.w	sl, #1
 80a8fde:	e7cf      	b.n	80a8f80 <__gethex+0x30c>
 80a8fe0:	2701      	movs	r7, #1
 80a8fe2:	e7e2      	b.n	80a8faa <__gethex+0x336>
 80a8fe4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80a8fe6:	f1c3 0301 	rsb	r3, r3, #1
 80a8fea:	9315      	str	r3, [sp, #84]	; 0x54
 80a8fec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80a8fee:	2b00      	cmp	r3, #0
 80a8ff0:	d0f0      	beq.n	80a8fd4 <__gethex+0x360>
 80a8ff2:	f04f 0c00 	mov.w	ip, #0
 80a8ff6:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80a8ffa:	f104 0314 	add.w	r3, r4, #20
 80a8ffe:	ea4f 0b89 	mov.w	fp, r9, lsl #2
 80a9002:	eb03 0189 	add.w	r1, r3, r9, lsl #2
 80a9006:	4618      	mov	r0, r3
 80a9008:	f853 2b04 	ldr.w	r2, [r3], #4
 80a900c:	f1b2 3fff 	cmp.w	r2, #4294967295
 80a9010:	d01c      	beq.n	80a904c <__gethex+0x3d8>
 80a9012:	3201      	adds	r2, #1
 80a9014:	6002      	str	r2, [r0, #0]
 80a9016:	2f02      	cmp	r7, #2
 80a9018:	f104 0314 	add.w	r3, r4, #20
 80a901c:	d138      	bne.n	80a9090 <__gethex+0x41c>
 80a901e:	f8d8 2000 	ldr.w	r2, [r8]
 80a9022:	3a01      	subs	r2, #1
 80a9024:	42b2      	cmp	r2, r6
 80a9026:	d10a      	bne.n	80a903e <__gethex+0x3ca>
 80a9028:	2201      	movs	r2, #1
 80a902a:	1171      	asrs	r1, r6, #5
 80a902c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80a9030:	f006 061f 	and.w	r6, r6, #31
 80a9034:	fa02 f606 	lsl.w	r6, r2, r6
 80a9038:	421e      	tst	r6, r3
 80a903a:	bf18      	it	ne
 80a903c:	4617      	movne	r7, r2
 80a903e:	f047 0720 	orr.w	r7, r7, #32
 80a9042:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80a9044:	601c      	str	r4, [r3, #0]
 80a9046:	9b06      	ldr	r3, [sp, #24]
 80a9048:	601d      	str	r5, [r3, #0]
 80a904a:	e6a5      	b.n	80a8d98 <__gethex+0x124>
 80a904c:	4299      	cmp	r1, r3
 80a904e:	f843 cc04 	str.w	ip, [r3, #-4]
 80a9052:	d8d8      	bhi.n	80a9006 <__gethex+0x392>
 80a9054:	68a3      	ldr	r3, [r4, #8]
 80a9056:	4599      	cmp	r9, r3
 80a9058:	db12      	blt.n	80a9080 <__gethex+0x40c>
 80a905a:	6861      	ldr	r1, [r4, #4]
 80a905c:	9802      	ldr	r0, [sp, #8]
 80a905e:	3101      	adds	r1, #1
 80a9060:	f000 fa04 	bl	80a946c <_Balloc>
 80a9064:	4682      	mov	sl, r0
 80a9066:	6922      	ldr	r2, [r4, #16]
 80a9068:	f104 010c 	add.w	r1, r4, #12
 80a906c:	3202      	adds	r2, #2
 80a906e:	0092      	lsls	r2, r2, #2
 80a9070:	300c      	adds	r0, #12
 80a9072:	f7fd fe0b 	bl	80a6c8c <memcpy>
 80a9076:	4621      	mov	r1, r4
 80a9078:	9802      	ldr	r0, [sp, #8]
 80a907a:	f000 fa2b 	bl	80a94d4 <_Bfree>
 80a907e:	4654      	mov	r4, sl
 80a9080:	6923      	ldr	r3, [r4, #16]
 80a9082:	1c5a      	adds	r2, r3, #1
 80a9084:	6122      	str	r2, [r4, #16]
 80a9086:	2201      	movs	r2, #1
 80a9088:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80a908c:	615a      	str	r2, [r3, #20]
 80a908e:	e7c2      	b.n	80a9016 <__gethex+0x3a2>
 80a9090:	6922      	ldr	r2, [r4, #16]
 80a9092:	454a      	cmp	r2, r9
 80a9094:	dd0b      	ble.n	80a90ae <__gethex+0x43a>
 80a9096:	2101      	movs	r1, #1
 80a9098:	4620      	mov	r0, r4
 80a909a:	f7ff fd83 	bl	80a8ba4 <rshift>
 80a909e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80a90a2:	3501      	adds	r5, #1
 80a90a4:	42ab      	cmp	r3, r5
 80a90a6:	f6ff aeda 	blt.w	80a8e5e <__gethex+0x1ea>
 80a90aa:	2701      	movs	r7, #1
 80a90ac:	e7c7      	b.n	80a903e <__gethex+0x3ca>
 80a90ae:	f016 061f 	ands.w	r6, r6, #31
 80a90b2:	d0fa      	beq.n	80a90aa <__gethex+0x436>
 80a90b4:	449b      	add	fp, r3
 80a90b6:	f85b 0c04 	ldr.w	r0, [fp, #-4]
 80a90ba:	f000 fa9e 	bl	80a95fa <__hi0bits>
 80a90be:	f1c6 0620 	rsb	r6, r6, #32
 80a90c2:	42b0      	cmp	r0, r6
 80a90c4:	dbe7      	blt.n	80a9096 <__gethex+0x422>
 80a90c6:	e7f0      	b.n	80a90aa <__gethex+0x436>

080a90c8 <L_shift>:
 80a90c8:	f1c2 0208 	rsb	r2, r2, #8
 80a90cc:	0092      	lsls	r2, r2, #2
 80a90ce:	b570      	push	{r4, r5, r6, lr}
 80a90d0:	f1c2 0620 	rsb	r6, r2, #32
 80a90d4:	6843      	ldr	r3, [r0, #4]
 80a90d6:	6804      	ldr	r4, [r0, #0]
 80a90d8:	fa03 f506 	lsl.w	r5, r3, r6
 80a90dc:	432c      	orrs	r4, r5
 80a90de:	40d3      	lsrs	r3, r2
 80a90e0:	6004      	str	r4, [r0, #0]
 80a90e2:	f840 3f04 	str.w	r3, [r0, #4]!
 80a90e6:	4288      	cmp	r0, r1
 80a90e8:	d3f4      	bcc.n	80a90d4 <L_shift+0xc>
 80a90ea:	bd70      	pop	{r4, r5, r6, pc}

080a90ec <__match>:
 80a90ec:	b530      	push	{r4, r5, lr}
 80a90ee:	6803      	ldr	r3, [r0, #0]
 80a90f0:	3301      	adds	r3, #1
 80a90f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a90f6:	b914      	cbnz	r4, 80a90fe <__match+0x12>
 80a90f8:	6003      	str	r3, [r0, #0]
 80a90fa:	2001      	movs	r0, #1
 80a90fc:	bd30      	pop	{r4, r5, pc}
 80a90fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a9102:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80a9106:	2d19      	cmp	r5, #25
 80a9108:	bf98      	it	ls
 80a910a:	3220      	addls	r2, #32
 80a910c:	42a2      	cmp	r2, r4
 80a910e:	d0f0      	beq.n	80a90f2 <__match+0x6>
 80a9110:	2000      	movs	r0, #0
 80a9112:	e7f3      	b.n	80a90fc <__match+0x10>

080a9114 <__hexnan>:
 80a9114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a9118:	2500      	movs	r5, #0
 80a911a:	680b      	ldr	r3, [r1, #0]
 80a911c:	4682      	mov	sl, r0
 80a911e:	115e      	asrs	r6, r3, #5
 80a9120:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80a9124:	f013 031f 	ands.w	r3, r3, #31
 80a9128:	bf18      	it	ne
 80a912a:	3604      	addne	r6, #4
 80a912c:	1f37      	subs	r7, r6, #4
 80a912e:	4690      	mov	r8, r2
 80a9130:	46b9      	mov	r9, r7
 80a9132:	463c      	mov	r4, r7
 80a9134:	46ab      	mov	fp, r5
 80a9136:	b087      	sub	sp, #28
 80a9138:	6801      	ldr	r1, [r0, #0]
 80a913a:	9301      	str	r3, [sp, #4]
 80a913c:	f846 5c04 	str.w	r5, [r6, #-4]
 80a9140:	9502      	str	r5, [sp, #8]
 80a9142:	784a      	ldrb	r2, [r1, #1]
 80a9144:	1c4b      	adds	r3, r1, #1
 80a9146:	9303      	str	r3, [sp, #12]
 80a9148:	b342      	cbz	r2, 80a919c <__hexnan+0x88>
 80a914a:	4610      	mov	r0, r2
 80a914c:	9105      	str	r1, [sp, #20]
 80a914e:	9204      	str	r2, [sp, #16]
 80a9150:	f7ff fd7b 	bl	80a8c4a <__hexdig_fun>
 80a9154:	2800      	cmp	r0, #0
 80a9156:	d14f      	bne.n	80a91f8 <__hexnan+0xe4>
 80a9158:	9a04      	ldr	r2, [sp, #16]
 80a915a:	9905      	ldr	r1, [sp, #20]
 80a915c:	2a20      	cmp	r2, #32
 80a915e:	d818      	bhi.n	80a9192 <__hexnan+0x7e>
 80a9160:	9b02      	ldr	r3, [sp, #8]
 80a9162:	459b      	cmp	fp, r3
 80a9164:	dd13      	ble.n	80a918e <__hexnan+0x7a>
 80a9166:	454c      	cmp	r4, r9
 80a9168:	d206      	bcs.n	80a9178 <__hexnan+0x64>
 80a916a:	2d07      	cmp	r5, #7
 80a916c:	dc04      	bgt.n	80a9178 <__hexnan+0x64>
 80a916e:	462a      	mov	r2, r5
 80a9170:	4649      	mov	r1, r9
 80a9172:	4620      	mov	r0, r4
 80a9174:	f7ff ffa8 	bl	80a90c8 <L_shift>
 80a9178:	4544      	cmp	r4, r8
 80a917a:	d950      	bls.n	80a921e <__hexnan+0x10a>
 80a917c:	2300      	movs	r3, #0
 80a917e:	f1a4 0904 	sub.w	r9, r4, #4
 80a9182:	f844 3c04 	str.w	r3, [r4, #-4]
 80a9186:	461d      	mov	r5, r3
 80a9188:	464c      	mov	r4, r9
 80a918a:	f8cd b008 	str.w	fp, [sp, #8]
 80a918e:	9903      	ldr	r1, [sp, #12]
 80a9190:	e7d7      	b.n	80a9142 <__hexnan+0x2e>
 80a9192:	2a29      	cmp	r2, #41	; 0x29
 80a9194:	d156      	bne.n	80a9244 <__hexnan+0x130>
 80a9196:	3102      	adds	r1, #2
 80a9198:	f8ca 1000 	str.w	r1, [sl]
 80a919c:	f1bb 0f00 	cmp.w	fp, #0
 80a91a0:	d050      	beq.n	80a9244 <__hexnan+0x130>
 80a91a2:	454c      	cmp	r4, r9
 80a91a4:	d206      	bcs.n	80a91b4 <__hexnan+0xa0>
 80a91a6:	2d07      	cmp	r5, #7
 80a91a8:	dc04      	bgt.n	80a91b4 <__hexnan+0xa0>
 80a91aa:	462a      	mov	r2, r5
 80a91ac:	4649      	mov	r1, r9
 80a91ae:	4620      	mov	r0, r4
 80a91b0:	f7ff ff8a 	bl	80a90c8 <L_shift>
 80a91b4:	4544      	cmp	r4, r8
 80a91b6:	d934      	bls.n	80a9222 <__hexnan+0x10e>
 80a91b8:	4623      	mov	r3, r4
 80a91ba:	f1a8 0204 	sub.w	r2, r8, #4
 80a91be:	f853 1b04 	ldr.w	r1, [r3], #4
 80a91c2:	429f      	cmp	r7, r3
 80a91c4:	f842 1f04 	str.w	r1, [r2, #4]!
 80a91c8:	d2f9      	bcs.n	80a91be <__hexnan+0xaa>
 80a91ca:	1b3b      	subs	r3, r7, r4
 80a91cc:	f023 0303 	bic.w	r3, r3, #3
 80a91d0:	3304      	adds	r3, #4
 80a91d2:	3401      	adds	r4, #1
 80a91d4:	3e03      	subs	r6, #3
 80a91d6:	42b4      	cmp	r4, r6
 80a91d8:	bf88      	it	hi
 80a91da:	2304      	movhi	r3, #4
 80a91dc:	2200      	movs	r2, #0
 80a91de:	4443      	add	r3, r8
 80a91e0:	f843 2b04 	str.w	r2, [r3], #4
 80a91e4:	429f      	cmp	r7, r3
 80a91e6:	d2fb      	bcs.n	80a91e0 <__hexnan+0xcc>
 80a91e8:	683b      	ldr	r3, [r7, #0]
 80a91ea:	b91b      	cbnz	r3, 80a91f4 <__hexnan+0xe0>
 80a91ec:	4547      	cmp	r7, r8
 80a91ee:	d127      	bne.n	80a9240 <__hexnan+0x12c>
 80a91f0:	2301      	movs	r3, #1
 80a91f2:	603b      	str	r3, [r7, #0]
 80a91f4:	2005      	movs	r0, #5
 80a91f6:	e026      	b.n	80a9246 <__hexnan+0x132>
 80a91f8:	3501      	adds	r5, #1
 80a91fa:	2d08      	cmp	r5, #8
 80a91fc:	f10b 0b01 	add.w	fp, fp, #1
 80a9200:	dd06      	ble.n	80a9210 <__hexnan+0xfc>
 80a9202:	4544      	cmp	r4, r8
 80a9204:	d9c3      	bls.n	80a918e <__hexnan+0x7a>
 80a9206:	2300      	movs	r3, #0
 80a9208:	2501      	movs	r5, #1
 80a920a:	f844 3c04 	str.w	r3, [r4, #-4]
 80a920e:	3c04      	subs	r4, #4
 80a9210:	6822      	ldr	r2, [r4, #0]
 80a9212:	f000 000f 	and.w	r0, r0, #15
 80a9216:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80a921a:	6022      	str	r2, [r4, #0]
 80a921c:	e7b7      	b.n	80a918e <__hexnan+0x7a>
 80a921e:	2508      	movs	r5, #8
 80a9220:	e7b5      	b.n	80a918e <__hexnan+0x7a>
 80a9222:	9b01      	ldr	r3, [sp, #4]
 80a9224:	2b00      	cmp	r3, #0
 80a9226:	d0df      	beq.n	80a91e8 <__hexnan+0xd4>
 80a9228:	f04f 32ff 	mov.w	r2, #4294967295
 80a922c:	f1c3 0320 	rsb	r3, r3, #32
 80a9230:	fa22 f303 	lsr.w	r3, r2, r3
 80a9234:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80a9238:	401a      	ands	r2, r3
 80a923a:	f846 2c04 	str.w	r2, [r6, #-4]
 80a923e:	e7d3      	b.n	80a91e8 <__hexnan+0xd4>
 80a9240:	3f04      	subs	r7, #4
 80a9242:	e7d1      	b.n	80a91e8 <__hexnan+0xd4>
 80a9244:	2004      	movs	r0, #4
 80a9246:	b007      	add	sp, #28
 80a9248:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a924c <_findenv_r>:
 80a924c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a9250:	4607      	mov	r7, r0
 80a9252:	4689      	mov	r9, r1
 80a9254:	4616      	mov	r6, r2
 80a9256:	f000 fd69 	bl	80a9d2c <__env_lock>
 80a925a:	4b18      	ldr	r3, [pc, #96]	; (80a92bc <_findenv_r+0x70>)
 80a925c:	681c      	ldr	r4, [r3, #0]
 80a925e:	469a      	mov	sl, r3
 80a9260:	b134      	cbz	r4, 80a9270 <_findenv_r+0x24>
 80a9262:	464b      	mov	r3, r9
 80a9264:	4698      	mov	r8, r3
 80a9266:	f813 1b01 	ldrb.w	r1, [r3], #1
 80a926a:	b139      	cbz	r1, 80a927c <_findenv_r+0x30>
 80a926c:	293d      	cmp	r1, #61	; 0x3d
 80a926e:	d1f9      	bne.n	80a9264 <_findenv_r+0x18>
 80a9270:	4638      	mov	r0, r7
 80a9272:	f000 fd61 	bl	80a9d38 <__env_unlock>
 80a9276:	2000      	movs	r0, #0
 80a9278:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a927c:	eba8 0809 	sub.w	r8, r8, r9
 80a9280:	46a3      	mov	fp, r4
 80a9282:	f854 0b04 	ldr.w	r0, [r4], #4
 80a9286:	2800      	cmp	r0, #0
 80a9288:	d0f2      	beq.n	80a9270 <_findenv_r+0x24>
 80a928a:	4642      	mov	r2, r8
 80a928c:	4649      	mov	r1, r9
 80a928e:	f7fe fab3 	bl	80a77f8 <strncmp>
 80a9292:	2800      	cmp	r0, #0
 80a9294:	d1f4      	bne.n	80a9280 <_findenv_r+0x34>
 80a9296:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80a929a:	eb03 0508 	add.w	r5, r3, r8
 80a929e:	f813 3008 	ldrb.w	r3, [r3, r8]
 80a92a2:	2b3d      	cmp	r3, #61	; 0x3d
 80a92a4:	d1ec      	bne.n	80a9280 <_findenv_r+0x34>
 80a92a6:	f8da 3000 	ldr.w	r3, [sl]
 80a92aa:	4638      	mov	r0, r7
 80a92ac:	ebab 0303 	sub.w	r3, fp, r3
 80a92b0:	109b      	asrs	r3, r3, #2
 80a92b2:	6033      	str	r3, [r6, #0]
 80a92b4:	f000 fd40 	bl	80a9d38 <__env_unlock>
 80a92b8:	1c68      	adds	r0, r5, #1
 80a92ba:	e7dd      	b.n	80a9278 <_findenv_r+0x2c>
 80a92bc:	20000248 	.word	0x20000248

080a92c0 <_getenv_r>:
 80a92c0:	b507      	push	{r0, r1, r2, lr}
 80a92c2:	aa01      	add	r2, sp, #4
 80a92c4:	f7ff ffc2 	bl	80a924c <_findenv_r>
 80a92c8:	b003      	add	sp, #12
 80a92ca:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a92d0 <__gettzinfo>:
 80a92d0:	4800      	ldr	r0, [pc, #0]	; (80a92d4 <__gettzinfo+0x4>)
 80a92d2:	4770      	bx	lr
 80a92d4:	20000080 	.word	0x20000080

080a92d8 <gmtime_r>:
 80a92d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a92dc:	e9d0 6700 	ldrd	r6, r7, [r0]
 80a92e0:	460c      	mov	r4, r1
 80a92e2:	2300      	movs	r3, #0
 80a92e4:	4630      	mov	r0, r6
 80a92e6:	4639      	mov	r1, r7
 80a92e8:	4a4f      	ldr	r2, [pc, #316]	; (80a9428 <gmtime_r+0x150>)
 80a92ea:	f000 fd41 	bl	80a9d70 <__aeabi_ldivmod>
 80a92ee:	4639      	mov	r1, r7
 80a92f0:	4605      	mov	r5, r0
 80a92f2:	2300      	movs	r3, #0
 80a92f4:	4630      	mov	r0, r6
 80a92f6:	4a4c      	ldr	r2, [pc, #304]	; (80a9428 <gmtime_r+0x150>)
 80a92f8:	f000 fd3a 	bl	80a9d70 <__aeabi_ldivmod>
 80a92fc:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a9300:	2a00      	cmp	r2, #0
 80a9302:	bfbc      	itt	lt
 80a9304:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 80a9308:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 80a930c:	fbb2 f3f1 	udiv	r3, r2, r1
 80a9310:	fb01 2213 	mls	r2, r1, r3, r2
 80a9314:	f04f 013c 	mov.w	r1, #60	; 0x3c
 80a9318:	60a3      	str	r3, [r4, #8]
 80a931a:	fbb2 f3f1 	udiv	r3, r2, r1
 80a931e:	fb01 2213 	mls	r2, r1, r3, r2
 80a9322:	6022      	str	r2, [r4, #0]
 80a9324:	f04f 0207 	mov.w	r2, #7
 80a9328:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 80a932c:	bfac      	ite	ge
 80a932e:	f600 206c 	addwge	r0, r0, #2668	; 0xa6c
 80a9332:	f600 206b 	addwlt	r0, r0, #2667	; 0xa6b
 80a9336:	6063      	str	r3, [r4, #4]
 80a9338:	1cc3      	adds	r3, r0, #3
 80a933a:	fb93 f2f2 	sdiv	r2, r3, r2
 80a933e:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80a9342:	1a9b      	subs	r3, r3, r2
 80a9344:	bf48      	it	mi
 80a9346:	3307      	addmi	r3, #7
 80a9348:	2800      	cmp	r0, #0
 80a934a:	4938      	ldr	r1, [pc, #224]	; (80a942c <gmtime_r+0x154>)
 80a934c:	61a3      	str	r3, [r4, #24]
 80a934e:	bfbd      	ittte	lt
 80a9350:	f5a0 330e 	sublt.w	r3, r0, #145408	; 0x23800
 80a9354:	f5a3 732c 	sublt.w	r3, r3, #688	; 0x2b0
 80a9358:	fb93 f1f1 	sdivlt	r1, r3, r1
 80a935c:	fb90 f1f1 	sdivge	r1, r0, r1
 80a9360:	f648 62ac 	movw	r2, #36524	; 0x8eac
 80a9364:	f240 5cb4 	movw	ip, #1460	; 0x5b4
 80a9368:	4b31      	ldr	r3, [pc, #196]	; (80a9430 <gmtime_r+0x158>)
 80a936a:	f240 176d 	movw	r7, #365	; 0x16d
 80a936e:	fb03 0001 	mla	r0, r3, r1, r0
 80a9372:	fbb0 f2f2 	udiv	r2, r0, r2
 80a9376:	fbb0 f3fc 	udiv	r3, r0, ip
 80a937a:	4402      	add	r2, r0
 80a937c:	1ad2      	subs	r2, r2, r3
 80a937e:	4b2d      	ldr	r3, [pc, #180]	; (80a9434 <gmtime_r+0x15c>)
 80a9380:	2664      	movs	r6, #100	; 0x64
 80a9382:	fbb0 f3f3 	udiv	r3, r0, r3
 80a9386:	1ad3      	subs	r3, r2, r3
 80a9388:	fbb3 f5f7 	udiv	r5, r3, r7
 80a938c:	fbb3 f3fc 	udiv	r3, r3, ip
 80a9390:	fbb5 f2f6 	udiv	r2, r5, r6
 80a9394:	1ad3      	subs	r3, r2, r3
 80a9396:	4403      	add	r3, r0
 80a9398:	2099      	movs	r0, #153	; 0x99
 80a939a:	fb07 3315 	mls	r3, r7, r5, r3
 80a939e:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 80a93a2:	f10c 0c02 	add.w	ip, ip, #2
 80a93a6:	fbbc f7f0 	udiv	r7, ip, r0
 80a93aa:	f04f 0805 	mov.w	r8, #5
 80a93ae:	4378      	muls	r0, r7
 80a93b0:	3002      	adds	r0, #2
 80a93b2:	fbb0 f0f8 	udiv	r0, r0, r8
 80a93b6:	f103 0e01 	add.w	lr, r3, #1
 80a93ba:	ebae 0000 	sub.w	r0, lr, r0
 80a93be:	f240 5ef9 	movw	lr, #1529	; 0x5f9
 80a93c2:	45f4      	cmp	ip, lr
 80a93c4:	bf94      	ite	ls
 80a93c6:	f04f 0c02 	movls.w	ip, #2
 80a93ca:	f06f 0c09 	mvnhi.w	ip, #9
 80a93ce:	4467      	add	r7, ip
 80a93d0:	f44f 7cc8 	mov.w	ip, #400	; 0x190
 80a93d4:	fb0c 5101 	mla	r1, ip, r1, r5
 80a93d8:	2f01      	cmp	r7, #1
 80a93da:	bf98      	it	ls
 80a93dc:	3101      	addls	r1, #1
 80a93de:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 80a93e2:	d30c      	bcc.n	80a93fe <gmtime_r+0x126>
 80a93e4:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 80a93e8:	61e3      	str	r3, [r4, #28]
 80a93ea:	2300      	movs	r3, #0
 80a93ec:	f2a1 716c 	subw	r1, r1, #1900	; 0x76c
 80a93f0:	60e0      	str	r0, [r4, #12]
 80a93f2:	e9c4 7104 	strd	r7, r1, [r4, #16]
 80a93f6:	4620      	mov	r0, r4
 80a93f8:	6223      	str	r3, [r4, #32]
 80a93fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a93fe:	f015 0f03 	tst.w	r5, #3
 80a9402:	d102      	bne.n	80a940a <gmtime_r+0x132>
 80a9404:	fb06 5212 	mls	r2, r6, r2, r5
 80a9408:	b95a      	cbnz	r2, 80a9422 <gmtime_r+0x14a>
 80a940a:	f44f 76c8 	mov.w	r6, #400	; 0x190
 80a940e:	fbb5 f2f6 	udiv	r2, r5, r6
 80a9412:	fb06 5212 	mls	r2, r6, r2, r5
 80a9416:	fab2 f282 	clz	r2, r2
 80a941a:	0952      	lsrs	r2, r2, #5
 80a941c:	333b      	adds	r3, #59	; 0x3b
 80a941e:	4413      	add	r3, r2
 80a9420:	e7e2      	b.n	80a93e8 <gmtime_r+0x110>
 80a9422:	2201      	movs	r2, #1
 80a9424:	e7fa      	b.n	80a941c <gmtime_r+0x144>
 80a9426:	bf00      	nop
 80a9428:	00015180 	.word	0x00015180
 80a942c:	00023ab1 	.word	0x00023ab1
 80a9430:	fffdc54f 	.word	0xfffdc54f
 80a9434:	00023ab0 	.word	0x00023ab0

080a9438 <labs>:
 80a9438:	2800      	cmp	r0, #0
 80a943a:	bfb8      	it	lt
 80a943c:	4240      	neglt	r0, r0
 80a943e:	4770      	bx	lr

080a9440 <__retarget_lock_acquire>:
 80a9440:	4770      	bx	lr

080a9442 <__retarget_lock_acquire_recursive>:
 80a9442:	4770      	bx	lr

080a9444 <__retarget_lock_release>:
 80a9444:	4770      	bx	lr

080a9446 <__retarget_lock_release_recursive>:
 80a9446:	4770      	bx	lr

080a9448 <__ascii_mbtowc>:
 80a9448:	b082      	sub	sp, #8
 80a944a:	b901      	cbnz	r1, 80a944e <__ascii_mbtowc+0x6>
 80a944c:	a901      	add	r1, sp, #4
 80a944e:	b142      	cbz	r2, 80a9462 <__ascii_mbtowc+0x1a>
 80a9450:	b14b      	cbz	r3, 80a9466 <__ascii_mbtowc+0x1e>
 80a9452:	7813      	ldrb	r3, [r2, #0]
 80a9454:	600b      	str	r3, [r1, #0]
 80a9456:	7812      	ldrb	r2, [r2, #0]
 80a9458:	1e10      	subs	r0, r2, #0
 80a945a:	bf18      	it	ne
 80a945c:	2001      	movne	r0, #1
 80a945e:	b002      	add	sp, #8
 80a9460:	4770      	bx	lr
 80a9462:	4610      	mov	r0, r2
 80a9464:	e7fb      	b.n	80a945e <__ascii_mbtowc+0x16>
 80a9466:	f06f 0001 	mvn.w	r0, #1
 80a946a:	e7f8      	b.n	80a945e <__ascii_mbtowc+0x16>

080a946c <_Balloc>:
 80a946c:	b570      	push	{r4, r5, r6, lr}
 80a946e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80a9470:	4604      	mov	r4, r0
 80a9472:	460d      	mov	r5, r1
 80a9474:	b93e      	cbnz	r6, 80a9486 <_Balloc+0x1a>
 80a9476:	2010      	movs	r0, #16
 80a9478:	f7fa fa6a 	bl	80a3950 <malloc>
 80a947c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80a9480:	6260      	str	r0, [r4, #36]	; 0x24
 80a9482:	6006      	str	r6, [r0, #0]
 80a9484:	60c6      	str	r6, [r0, #12]
 80a9486:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80a9488:	68f3      	ldr	r3, [r6, #12]
 80a948a:	b183      	cbz	r3, 80a94ae <_Balloc+0x42>
 80a948c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80a948e:	68db      	ldr	r3, [r3, #12]
 80a9490:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80a9494:	b9b8      	cbnz	r0, 80a94c6 <_Balloc+0x5a>
 80a9496:	2101      	movs	r1, #1
 80a9498:	fa01 f605 	lsl.w	r6, r1, r5
 80a949c:	1d72      	adds	r2, r6, #5
 80a949e:	4620      	mov	r0, r4
 80a94a0:	0092      	lsls	r2, r2, #2
 80a94a2:	f000 fc1c 	bl	80a9cde <_calloc_r>
 80a94a6:	b160      	cbz	r0, 80a94c2 <_Balloc+0x56>
 80a94a8:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80a94ac:	e00e      	b.n	80a94cc <_Balloc+0x60>
 80a94ae:	2221      	movs	r2, #33	; 0x21
 80a94b0:	2104      	movs	r1, #4
 80a94b2:	4620      	mov	r0, r4
 80a94b4:	f000 fc13 	bl	80a9cde <_calloc_r>
 80a94b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80a94ba:	60f0      	str	r0, [r6, #12]
 80a94bc:	68db      	ldr	r3, [r3, #12]
 80a94be:	2b00      	cmp	r3, #0
 80a94c0:	d1e4      	bne.n	80a948c <_Balloc+0x20>
 80a94c2:	2000      	movs	r0, #0
 80a94c4:	bd70      	pop	{r4, r5, r6, pc}
 80a94c6:	6802      	ldr	r2, [r0, #0]
 80a94c8:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80a94cc:	2300      	movs	r3, #0
 80a94ce:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80a94d2:	e7f7      	b.n	80a94c4 <_Balloc+0x58>

080a94d4 <_Bfree>:
 80a94d4:	b570      	push	{r4, r5, r6, lr}
 80a94d6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80a94d8:	4605      	mov	r5, r0
 80a94da:	460c      	mov	r4, r1
 80a94dc:	b93e      	cbnz	r6, 80a94ee <_Bfree+0x1a>
 80a94de:	2010      	movs	r0, #16
 80a94e0:	f7fa fa36 	bl	80a3950 <malloc>
 80a94e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80a94e8:	6268      	str	r0, [r5, #36]	; 0x24
 80a94ea:	6006      	str	r6, [r0, #0]
 80a94ec:	60c6      	str	r6, [r0, #12]
 80a94ee:	b13c      	cbz	r4, 80a9500 <_Bfree+0x2c>
 80a94f0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80a94f2:	6862      	ldr	r2, [r4, #4]
 80a94f4:	68db      	ldr	r3, [r3, #12]
 80a94f6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80a94fa:	6021      	str	r1, [r4, #0]
 80a94fc:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80a9500:	bd70      	pop	{r4, r5, r6, pc}

080a9502 <__multadd>:
 80a9502:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a9506:	4698      	mov	r8, r3
 80a9508:	460c      	mov	r4, r1
 80a950a:	2300      	movs	r3, #0
 80a950c:	690e      	ldr	r6, [r1, #16]
 80a950e:	4607      	mov	r7, r0
 80a9510:	f101 0014 	add.w	r0, r1, #20
 80a9514:	6805      	ldr	r5, [r0, #0]
 80a9516:	3301      	adds	r3, #1
 80a9518:	b2a9      	uxth	r1, r5
 80a951a:	fb02 8101 	mla	r1, r2, r1, r8
 80a951e:	0c2d      	lsrs	r5, r5, #16
 80a9520:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80a9524:	fb02 c505 	mla	r5, r2, r5, ip
 80a9528:	b289      	uxth	r1, r1
 80a952a:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80a952e:	429e      	cmp	r6, r3
 80a9530:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80a9534:	f840 1b04 	str.w	r1, [r0], #4
 80a9538:	dcec      	bgt.n	80a9514 <__multadd+0x12>
 80a953a:	f1b8 0f00 	cmp.w	r8, #0
 80a953e:	d01b      	beq.n	80a9578 <__multadd+0x76>
 80a9540:	68a3      	ldr	r3, [r4, #8]
 80a9542:	42b3      	cmp	r3, r6
 80a9544:	dc12      	bgt.n	80a956c <__multadd+0x6a>
 80a9546:	6861      	ldr	r1, [r4, #4]
 80a9548:	4638      	mov	r0, r7
 80a954a:	3101      	adds	r1, #1
 80a954c:	f7ff ff8e 	bl	80a946c <_Balloc>
 80a9550:	4605      	mov	r5, r0
 80a9552:	6922      	ldr	r2, [r4, #16]
 80a9554:	f104 010c 	add.w	r1, r4, #12
 80a9558:	3202      	adds	r2, #2
 80a955a:	0092      	lsls	r2, r2, #2
 80a955c:	300c      	adds	r0, #12
 80a955e:	f7fd fb95 	bl	80a6c8c <memcpy>
 80a9562:	4621      	mov	r1, r4
 80a9564:	4638      	mov	r0, r7
 80a9566:	f7ff ffb5 	bl	80a94d4 <_Bfree>
 80a956a:	462c      	mov	r4, r5
 80a956c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80a9570:	3601      	adds	r6, #1
 80a9572:	f8c3 8014 	str.w	r8, [r3, #20]
 80a9576:	6126      	str	r6, [r4, #16]
 80a9578:	4620      	mov	r0, r4
 80a957a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a957e <__s2b>:
 80a957e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a9582:	4615      	mov	r5, r2
 80a9584:	2209      	movs	r2, #9
 80a9586:	461f      	mov	r7, r3
 80a9588:	3308      	adds	r3, #8
 80a958a:	460c      	mov	r4, r1
 80a958c:	fb93 f3f2 	sdiv	r3, r3, r2
 80a9590:	4606      	mov	r6, r0
 80a9592:	2201      	movs	r2, #1
 80a9594:	2100      	movs	r1, #0
 80a9596:	429a      	cmp	r2, r3
 80a9598:	db20      	blt.n	80a95dc <__s2b+0x5e>
 80a959a:	4630      	mov	r0, r6
 80a959c:	f7ff ff66 	bl	80a946c <_Balloc>
 80a95a0:	9b08      	ldr	r3, [sp, #32]
 80a95a2:	2d09      	cmp	r5, #9
 80a95a4:	6143      	str	r3, [r0, #20]
 80a95a6:	f04f 0301 	mov.w	r3, #1
 80a95aa:	6103      	str	r3, [r0, #16]
 80a95ac:	dd19      	ble.n	80a95e2 <__s2b+0x64>
 80a95ae:	f104 0909 	add.w	r9, r4, #9
 80a95b2:	46c8      	mov	r8, r9
 80a95b4:	442c      	add	r4, r5
 80a95b6:	f818 3b01 	ldrb.w	r3, [r8], #1
 80a95ba:	4601      	mov	r1, r0
 80a95bc:	220a      	movs	r2, #10
 80a95be:	4630      	mov	r0, r6
 80a95c0:	3b30      	subs	r3, #48	; 0x30
 80a95c2:	f7ff ff9e 	bl	80a9502 <__multadd>
 80a95c6:	45a0      	cmp	r8, r4
 80a95c8:	d1f5      	bne.n	80a95b6 <__s2b+0x38>
 80a95ca:	f1a5 0408 	sub.w	r4, r5, #8
 80a95ce:	444c      	add	r4, r9
 80a95d0:	1b2d      	subs	r5, r5, r4
 80a95d2:	1963      	adds	r3, r4, r5
 80a95d4:	42bb      	cmp	r3, r7
 80a95d6:	db07      	blt.n	80a95e8 <__s2b+0x6a>
 80a95d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a95dc:	0052      	lsls	r2, r2, #1
 80a95de:	3101      	adds	r1, #1
 80a95e0:	e7d9      	b.n	80a9596 <__s2b+0x18>
 80a95e2:	2509      	movs	r5, #9
 80a95e4:	340a      	adds	r4, #10
 80a95e6:	e7f3      	b.n	80a95d0 <__s2b+0x52>
 80a95e8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80a95ec:	4601      	mov	r1, r0
 80a95ee:	220a      	movs	r2, #10
 80a95f0:	4630      	mov	r0, r6
 80a95f2:	3b30      	subs	r3, #48	; 0x30
 80a95f4:	f7ff ff85 	bl	80a9502 <__multadd>
 80a95f8:	e7eb      	b.n	80a95d2 <__s2b+0x54>

080a95fa <__hi0bits>:
 80a95fa:	0c02      	lsrs	r2, r0, #16
 80a95fc:	0412      	lsls	r2, r2, #16
 80a95fe:	4603      	mov	r3, r0
 80a9600:	b9ca      	cbnz	r2, 80a9636 <__hi0bits+0x3c>
 80a9602:	0403      	lsls	r3, r0, #16
 80a9604:	2010      	movs	r0, #16
 80a9606:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80a960a:	bf04      	itt	eq
 80a960c:	021b      	lsleq	r3, r3, #8
 80a960e:	3008      	addeq	r0, #8
 80a9610:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80a9614:	bf04      	itt	eq
 80a9616:	011b      	lsleq	r3, r3, #4
 80a9618:	3004      	addeq	r0, #4
 80a961a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80a961e:	bf04      	itt	eq
 80a9620:	009b      	lsleq	r3, r3, #2
 80a9622:	3002      	addeq	r0, #2
 80a9624:	2b00      	cmp	r3, #0
 80a9626:	db05      	blt.n	80a9634 <__hi0bits+0x3a>
 80a9628:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80a962c:	f100 0001 	add.w	r0, r0, #1
 80a9630:	bf08      	it	eq
 80a9632:	2020      	moveq	r0, #32
 80a9634:	4770      	bx	lr
 80a9636:	2000      	movs	r0, #0
 80a9638:	e7e5      	b.n	80a9606 <__hi0bits+0xc>

080a963a <__lo0bits>:
 80a963a:	6803      	ldr	r3, [r0, #0]
 80a963c:	4602      	mov	r2, r0
 80a963e:	f013 0007 	ands.w	r0, r3, #7
 80a9642:	d00b      	beq.n	80a965c <__lo0bits+0x22>
 80a9644:	07d9      	lsls	r1, r3, #31
 80a9646:	d422      	bmi.n	80a968e <__lo0bits+0x54>
 80a9648:	0798      	lsls	r0, r3, #30
 80a964a:	bf49      	itett	mi
 80a964c:	085b      	lsrmi	r3, r3, #1
 80a964e:	089b      	lsrpl	r3, r3, #2
 80a9650:	2001      	movmi	r0, #1
 80a9652:	6013      	strmi	r3, [r2, #0]
 80a9654:	bf5c      	itt	pl
 80a9656:	2002      	movpl	r0, #2
 80a9658:	6013      	strpl	r3, [r2, #0]
 80a965a:	4770      	bx	lr
 80a965c:	b299      	uxth	r1, r3
 80a965e:	b909      	cbnz	r1, 80a9664 <__lo0bits+0x2a>
 80a9660:	2010      	movs	r0, #16
 80a9662:	0c1b      	lsrs	r3, r3, #16
 80a9664:	f013 0fff 	tst.w	r3, #255	; 0xff
 80a9668:	bf04      	itt	eq
 80a966a:	0a1b      	lsreq	r3, r3, #8
 80a966c:	3008      	addeq	r0, #8
 80a966e:	0719      	lsls	r1, r3, #28
 80a9670:	bf04      	itt	eq
 80a9672:	091b      	lsreq	r3, r3, #4
 80a9674:	3004      	addeq	r0, #4
 80a9676:	0799      	lsls	r1, r3, #30
 80a9678:	bf04      	itt	eq
 80a967a:	089b      	lsreq	r3, r3, #2
 80a967c:	3002      	addeq	r0, #2
 80a967e:	07d9      	lsls	r1, r3, #31
 80a9680:	d403      	bmi.n	80a968a <__lo0bits+0x50>
 80a9682:	085b      	lsrs	r3, r3, #1
 80a9684:	f100 0001 	add.w	r0, r0, #1
 80a9688:	d003      	beq.n	80a9692 <__lo0bits+0x58>
 80a968a:	6013      	str	r3, [r2, #0]
 80a968c:	4770      	bx	lr
 80a968e:	2000      	movs	r0, #0
 80a9690:	4770      	bx	lr
 80a9692:	2020      	movs	r0, #32
 80a9694:	4770      	bx	lr

080a9696 <__i2b>:
 80a9696:	b510      	push	{r4, lr}
 80a9698:	460c      	mov	r4, r1
 80a969a:	2101      	movs	r1, #1
 80a969c:	f7ff fee6 	bl	80a946c <_Balloc>
 80a96a0:	2201      	movs	r2, #1
 80a96a2:	6144      	str	r4, [r0, #20]
 80a96a4:	6102      	str	r2, [r0, #16]
 80a96a6:	bd10      	pop	{r4, pc}

080a96a8 <__multiply>:
 80a96a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a96ac:	4615      	mov	r5, r2
 80a96ae:	690a      	ldr	r2, [r1, #16]
 80a96b0:	692b      	ldr	r3, [r5, #16]
 80a96b2:	460c      	mov	r4, r1
 80a96b4:	429a      	cmp	r2, r3
 80a96b6:	bfbe      	ittt	lt
 80a96b8:	460b      	movlt	r3, r1
 80a96ba:	462c      	movlt	r4, r5
 80a96bc:	461d      	movlt	r5, r3
 80a96be:	6927      	ldr	r7, [r4, #16]
 80a96c0:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80a96c4:	68a3      	ldr	r3, [r4, #8]
 80a96c6:	6861      	ldr	r1, [r4, #4]
 80a96c8:	eb07 0609 	add.w	r6, r7, r9
 80a96cc:	42b3      	cmp	r3, r6
 80a96ce:	bfb8      	it	lt
 80a96d0:	3101      	addlt	r1, #1
 80a96d2:	b085      	sub	sp, #20
 80a96d4:	f7ff feca 	bl	80a946c <_Balloc>
 80a96d8:	f100 0114 	add.w	r1, r0, #20
 80a96dc:	460b      	mov	r3, r1
 80a96de:	2200      	movs	r2, #0
 80a96e0:	eb01 0886 	add.w	r8, r1, r6, lsl #2
 80a96e4:	4543      	cmp	r3, r8
 80a96e6:	d31d      	bcc.n	80a9724 <__multiply+0x7c>
 80a96e8:	f104 0314 	add.w	r3, r4, #20
 80a96ec:	f105 0214 	add.w	r2, r5, #20
 80a96f0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80a96f4:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80a96f8:	9302      	str	r3, [sp, #8]
 80a96fa:	1b3b      	subs	r3, r7, r4
 80a96fc:	3b15      	subs	r3, #21
 80a96fe:	f023 0303 	bic.w	r3, r3, #3
 80a9702:	3304      	adds	r3, #4
 80a9704:	f104 0515 	add.w	r5, r4, #21
 80a9708:	42af      	cmp	r7, r5
 80a970a:	bf38      	it	cc
 80a970c:	2304      	movcc	r3, #4
 80a970e:	9301      	str	r3, [sp, #4]
 80a9710:	9b02      	ldr	r3, [sp, #8]
 80a9712:	9203      	str	r2, [sp, #12]
 80a9714:	4293      	cmp	r3, r2
 80a9716:	d808      	bhi.n	80a972a <__multiply+0x82>
 80a9718:	2e00      	cmp	r6, #0
 80a971a:	dc5a      	bgt.n	80a97d2 <__multiply+0x12a>
 80a971c:	6106      	str	r6, [r0, #16]
 80a971e:	b005      	add	sp, #20
 80a9720:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a9724:	f843 2b04 	str.w	r2, [r3], #4
 80a9728:	e7dc      	b.n	80a96e4 <__multiply+0x3c>
 80a972a:	f8b2 a000 	ldrh.w	sl, [r2]
 80a972e:	f1ba 0f00 	cmp.w	sl, #0
 80a9732:	d024      	beq.n	80a977e <__multiply+0xd6>
 80a9734:	4689      	mov	r9, r1
 80a9736:	f04f 0c00 	mov.w	ip, #0
 80a973a:	f104 0e14 	add.w	lr, r4, #20
 80a973e:	f85e 5b04 	ldr.w	r5, [lr], #4
 80a9742:	f8d9 b000 	ldr.w	fp, [r9]
 80a9746:	b2ab      	uxth	r3, r5
 80a9748:	fa1f fb8b 	uxth.w	fp, fp
 80a974c:	fb0a b303 	mla	r3, sl, r3, fp
 80a9750:	ea4f 4b15 	mov.w	fp, r5, lsr #16
 80a9754:	f8d9 5000 	ldr.w	r5, [r9]
 80a9758:	4463      	add	r3, ip
 80a975a:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 80a975e:	fb0a c50b 	mla	r5, sl, fp, ip
 80a9762:	eb05 4513 	add.w	r5, r5, r3, lsr #16
 80a9766:	b29b      	uxth	r3, r3
 80a9768:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 80a976c:	4577      	cmp	r7, lr
 80a976e:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 80a9772:	f849 3b04 	str.w	r3, [r9], #4
 80a9776:	d8e2      	bhi.n	80a973e <__multiply+0x96>
 80a9778:	9b01      	ldr	r3, [sp, #4]
 80a977a:	f841 c003 	str.w	ip, [r1, r3]
 80a977e:	9b03      	ldr	r3, [sp, #12]
 80a9780:	3204      	adds	r2, #4
 80a9782:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80a9786:	f1b9 0f00 	cmp.w	r9, #0
 80a978a:	d020      	beq.n	80a97ce <__multiply+0x126>
 80a978c:	468e      	mov	lr, r1
 80a978e:	f04f 0a00 	mov.w	sl, #0
 80a9792:	680b      	ldr	r3, [r1, #0]
 80a9794:	f104 0c14 	add.w	ip, r4, #20
 80a9798:	f8bc 5000 	ldrh.w	r5, [ip]
 80a979c:	f8be b002 	ldrh.w	fp, [lr, #2]
 80a97a0:	b29b      	uxth	r3, r3
 80a97a2:	fb09 b505 	mla	r5, r9, r5, fp
 80a97a6:	44aa      	add	sl, r5
 80a97a8:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 80a97ac:	f84e 3b04 	str.w	r3, [lr], #4
 80a97b0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80a97b4:	f8be 5000 	ldrh.w	r5, [lr]
 80a97b8:	0c1b      	lsrs	r3, r3, #16
 80a97ba:	fb09 5303 	mla	r3, r9, r3, r5
 80a97be:	4567      	cmp	r7, ip
 80a97c0:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 80a97c4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80a97c8:	d8e6      	bhi.n	80a9798 <__multiply+0xf0>
 80a97ca:	9d01      	ldr	r5, [sp, #4]
 80a97cc:	514b      	str	r3, [r1, r5]
 80a97ce:	3104      	adds	r1, #4
 80a97d0:	e79e      	b.n	80a9710 <__multiply+0x68>
 80a97d2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80a97d6:	2b00      	cmp	r3, #0
 80a97d8:	d1a0      	bne.n	80a971c <__multiply+0x74>
 80a97da:	3e01      	subs	r6, #1
 80a97dc:	e79c      	b.n	80a9718 <__multiply+0x70>
	...

080a97e0 <__pow5mult>:
 80a97e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a97e4:	4615      	mov	r5, r2
 80a97e6:	f012 0203 	ands.w	r2, r2, #3
 80a97ea:	4606      	mov	r6, r0
 80a97ec:	460f      	mov	r7, r1
 80a97ee:	d007      	beq.n	80a9800 <__pow5mult+0x20>
 80a97f0:	4c21      	ldr	r4, [pc, #132]	; (80a9878 <__pow5mult+0x98>)
 80a97f2:	3a01      	subs	r2, #1
 80a97f4:	2300      	movs	r3, #0
 80a97f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80a97fa:	f7ff fe82 	bl	80a9502 <__multadd>
 80a97fe:	4607      	mov	r7, r0
 80a9800:	10ad      	asrs	r5, r5, #2
 80a9802:	d035      	beq.n	80a9870 <__pow5mult+0x90>
 80a9804:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80a9806:	b93c      	cbnz	r4, 80a9818 <__pow5mult+0x38>
 80a9808:	2010      	movs	r0, #16
 80a980a:	f7fa f8a1 	bl	80a3950 <malloc>
 80a980e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80a9812:	6270      	str	r0, [r6, #36]	; 0x24
 80a9814:	6004      	str	r4, [r0, #0]
 80a9816:	60c4      	str	r4, [r0, #12]
 80a9818:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80a981c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80a9820:	b94c      	cbnz	r4, 80a9836 <__pow5mult+0x56>
 80a9822:	f240 2171 	movw	r1, #625	; 0x271
 80a9826:	4630      	mov	r0, r6
 80a9828:	f7ff ff35 	bl	80a9696 <__i2b>
 80a982c:	2300      	movs	r3, #0
 80a982e:	4604      	mov	r4, r0
 80a9830:	f8c8 0008 	str.w	r0, [r8, #8]
 80a9834:	6003      	str	r3, [r0, #0]
 80a9836:	f04f 0900 	mov.w	r9, #0
 80a983a:	07eb      	lsls	r3, r5, #31
 80a983c:	d50a      	bpl.n	80a9854 <__pow5mult+0x74>
 80a983e:	4639      	mov	r1, r7
 80a9840:	4622      	mov	r2, r4
 80a9842:	4630      	mov	r0, r6
 80a9844:	f7ff ff30 	bl	80a96a8 <__multiply>
 80a9848:	4680      	mov	r8, r0
 80a984a:	4639      	mov	r1, r7
 80a984c:	4630      	mov	r0, r6
 80a984e:	f7ff fe41 	bl	80a94d4 <_Bfree>
 80a9852:	4647      	mov	r7, r8
 80a9854:	106d      	asrs	r5, r5, #1
 80a9856:	d00b      	beq.n	80a9870 <__pow5mult+0x90>
 80a9858:	6820      	ldr	r0, [r4, #0]
 80a985a:	b938      	cbnz	r0, 80a986c <__pow5mult+0x8c>
 80a985c:	4622      	mov	r2, r4
 80a985e:	4621      	mov	r1, r4
 80a9860:	4630      	mov	r0, r6
 80a9862:	f7ff ff21 	bl	80a96a8 <__multiply>
 80a9866:	6020      	str	r0, [r4, #0]
 80a9868:	f8c0 9000 	str.w	r9, [r0]
 80a986c:	4604      	mov	r4, r0
 80a986e:	e7e4      	b.n	80a983a <__pow5mult+0x5a>
 80a9870:	4638      	mov	r0, r7
 80a9872:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a9876:	bf00      	nop
 80a9878:	080aacd0 	.word	0x080aacd0

080a987c <__lshift>:
 80a987c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a9880:	460c      	mov	r4, r1
 80a9882:	4607      	mov	r7, r0
 80a9884:	4691      	mov	r9, r2
 80a9886:	6923      	ldr	r3, [r4, #16]
 80a9888:	6849      	ldr	r1, [r1, #4]
 80a988a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80a988e:	68a3      	ldr	r3, [r4, #8]
 80a9890:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80a9894:	f108 0601 	add.w	r6, r8, #1
 80a9898:	42b3      	cmp	r3, r6
 80a989a:	db3f      	blt.n	80a991c <__lshift+0xa0>
 80a989c:	4638      	mov	r0, r7
 80a989e:	f7ff fde5 	bl	80a946c <_Balloc>
 80a98a2:	2300      	movs	r3, #0
 80a98a4:	4605      	mov	r5, r0
 80a98a6:	f100 0114 	add.w	r1, r0, #20
 80a98aa:	f100 0210 	add.w	r2, r0, #16
 80a98ae:	4618      	mov	r0, r3
 80a98b0:	4553      	cmp	r3, sl
 80a98b2:	db36      	blt.n	80a9922 <__lshift+0xa6>
 80a98b4:	6920      	ldr	r0, [r4, #16]
 80a98b6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80a98ba:	f104 0314 	add.w	r3, r4, #20
 80a98be:	f019 091f 	ands.w	r9, r9, #31
 80a98c2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80a98c6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80a98ca:	d02e      	beq.n	80a992a <__lshift+0xae>
 80a98cc:	468a      	mov	sl, r1
 80a98ce:	2200      	movs	r2, #0
 80a98d0:	f1c9 0e20 	rsb	lr, r9, #32
 80a98d4:	6818      	ldr	r0, [r3, #0]
 80a98d6:	fa00 f009 	lsl.w	r0, r0, r9
 80a98da:	4302      	orrs	r2, r0
 80a98dc:	f84a 2b04 	str.w	r2, [sl], #4
 80a98e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80a98e4:	459c      	cmp	ip, r3
 80a98e6:	fa22 f20e 	lsr.w	r2, r2, lr
 80a98ea:	d8f3      	bhi.n	80a98d4 <__lshift+0x58>
 80a98ec:	ebac 0304 	sub.w	r3, ip, r4
 80a98f0:	3b15      	subs	r3, #21
 80a98f2:	f023 0303 	bic.w	r3, r3, #3
 80a98f6:	3304      	adds	r3, #4
 80a98f8:	f104 0015 	add.w	r0, r4, #21
 80a98fc:	4560      	cmp	r0, ip
 80a98fe:	bf88      	it	hi
 80a9900:	2304      	movhi	r3, #4
 80a9902:	50ca      	str	r2, [r1, r3]
 80a9904:	b10a      	cbz	r2, 80a990a <__lshift+0x8e>
 80a9906:	f108 0602 	add.w	r6, r8, #2
 80a990a:	3e01      	subs	r6, #1
 80a990c:	4638      	mov	r0, r7
 80a990e:	4621      	mov	r1, r4
 80a9910:	612e      	str	r6, [r5, #16]
 80a9912:	f7ff fddf 	bl	80a94d4 <_Bfree>
 80a9916:	4628      	mov	r0, r5
 80a9918:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a991c:	3101      	adds	r1, #1
 80a991e:	005b      	lsls	r3, r3, #1
 80a9920:	e7ba      	b.n	80a9898 <__lshift+0x1c>
 80a9922:	f842 0f04 	str.w	r0, [r2, #4]!
 80a9926:	3301      	adds	r3, #1
 80a9928:	e7c2      	b.n	80a98b0 <__lshift+0x34>
 80a992a:	3904      	subs	r1, #4
 80a992c:	f853 2b04 	ldr.w	r2, [r3], #4
 80a9930:	459c      	cmp	ip, r3
 80a9932:	f841 2f04 	str.w	r2, [r1, #4]!
 80a9936:	d8f9      	bhi.n	80a992c <__lshift+0xb0>
 80a9938:	e7e7      	b.n	80a990a <__lshift+0x8e>

080a993a <__mcmp>:
 80a993a:	4603      	mov	r3, r0
 80a993c:	690a      	ldr	r2, [r1, #16]
 80a993e:	6900      	ldr	r0, [r0, #16]
 80a9940:	b530      	push	{r4, r5, lr}
 80a9942:	1a80      	subs	r0, r0, r2
 80a9944:	d10d      	bne.n	80a9962 <__mcmp+0x28>
 80a9946:	3314      	adds	r3, #20
 80a9948:	3114      	adds	r1, #20
 80a994a:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80a994e:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80a9952:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80a9956:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80a995a:	4295      	cmp	r5, r2
 80a995c:	d002      	beq.n	80a9964 <__mcmp+0x2a>
 80a995e:	d304      	bcc.n	80a996a <__mcmp+0x30>
 80a9960:	2001      	movs	r0, #1
 80a9962:	bd30      	pop	{r4, r5, pc}
 80a9964:	42a3      	cmp	r3, r4
 80a9966:	d3f4      	bcc.n	80a9952 <__mcmp+0x18>
 80a9968:	e7fb      	b.n	80a9962 <__mcmp+0x28>
 80a996a:	f04f 30ff 	mov.w	r0, #4294967295
 80a996e:	e7f8      	b.n	80a9962 <__mcmp+0x28>

080a9970 <__mdiff>:
 80a9970:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a9974:	460c      	mov	r4, r1
 80a9976:	4606      	mov	r6, r0
 80a9978:	4611      	mov	r1, r2
 80a997a:	4620      	mov	r0, r4
 80a997c:	4692      	mov	sl, r2
 80a997e:	f7ff ffdc 	bl	80a993a <__mcmp>
 80a9982:	1e05      	subs	r5, r0, #0
 80a9984:	d108      	bne.n	80a9998 <__mdiff+0x28>
 80a9986:	4629      	mov	r1, r5
 80a9988:	4630      	mov	r0, r6
 80a998a:	f7ff fd6f 	bl	80a946c <_Balloc>
 80a998e:	2301      	movs	r3, #1
 80a9990:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80a9994:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a9998:	bfa4      	itt	ge
 80a999a:	4653      	movge	r3, sl
 80a999c:	46a2      	movge	sl, r4
 80a999e:	4630      	mov	r0, r6
 80a99a0:	f8da 1004 	ldr.w	r1, [sl, #4]
 80a99a4:	bfa6      	itte	ge
 80a99a6:	461c      	movge	r4, r3
 80a99a8:	2500      	movge	r5, #0
 80a99aa:	2501      	movlt	r5, #1
 80a99ac:	f7ff fd5e 	bl	80a946c <_Balloc>
 80a99b0:	f100 0814 	add.w	r8, r0, #20
 80a99b4:	f8da 7010 	ldr.w	r7, [sl, #16]
 80a99b8:	60c5      	str	r5, [r0, #12]
 80a99ba:	f10a 0210 	add.w	r2, sl, #16
 80a99be:	f10a 0514 	add.w	r5, sl, #20
 80a99c2:	f04f 0c00 	mov.w	ip, #0
 80a99c6:	46c2      	mov	sl, r8
 80a99c8:	6926      	ldr	r6, [r4, #16]
 80a99ca:	f104 0914 	add.w	r9, r4, #20
 80a99ce:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 80a99d2:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80a99d6:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80a99da:	f859 3b04 	ldr.w	r3, [r9], #4
 80a99de:	fa1f f18b 	uxth.w	r1, fp
 80a99e2:	4461      	add	r1, ip
 80a99e4:	fa1f fc83 	uxth.w	ip, r3
 80a99e8:	0c1b      	lsrs	r3, r3, #16
 80a99ea:	eba1 010c 	sub.w	r1, r1, ip
 80a99ee:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80a99f2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80a99f6:	b289      	uxth	r1, r1
 80a99f8:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80a99fc:	454e      	cmp	r6, r9
 80a99fe:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80a9a02:	f84a 3b04 	str.w	r3, [sl], #4
 80a9a06:	d8e6      	bhi.n	80a99d6 <__mdiff+0x66>
 80a9a08:	1b33      	subs	r3, r6, r4
 80a9a0a:	3b15      	subs	r3, #21
 80a9a0c:	f023 0303 	bic.w	r3, r3, #3
 80a9a10:	3415      	adds	r4, #21
 80a9a12:	3304      	adds	r3, #4
 80a9a14:	42a6      	cmp	r6, r4
 80a9a16:	bf38      	it	cc
 80a9a18:	2304      	movcc	r3, #4
 80a9a1a:	441d      	add	r5, r3
 80a9a1c:	4443      	add	r3, r8
 80a9a1e:	461e      	mov	r6, r3
 80a9a20:	462c      	mov	r4, r5
 80a9a22:	4574      	cmp	r4, lr
 80a9a24:	d30e      	bcc.n	80a9a44 <__mdiff+0xd4>
 80a9a26:	f10e 0203 	add.w	r2, lr, #3
 80a9a2a:	1b52      	subs	r2, r2, r5
 80a9a2c:	f022 0203 	bic.w	r2, r2, #3
 80a9a30:	3d03      	subs	r5, #3
 80a9a32:	45ae      	cmp	lr, r5
 80a9a34:	bf38      	it	cc
 80a9a36:	2200      	movcc	r2, #0
 80a9a38:	441a      	add	r2, r3
 80a9a3a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80a9a3e:	b18b      	cbz	r3, 80a9a64 <__mdiff+0xf4>
 80a9a40:	6107      	str	r7, [r0, #16]
 80a9a42:	e7a7      	b.n	80a9994 <__mdiff+0x24>
 80a9a44:	f854 8b04 	ldr.w	r8, [r4], #4
 80a9a48:	fa1f f288 	uxth.w	r2, r8
 80a9a4c:	4462      	add	r2, ip
 80a9a4e:	1411      	asrs	r1, r2, #16
 80a9a50:	eb01 4118 	add.w	r1, r1, r8, lsr #16
 80a9a54:	b292      	uxth	r2, r2
 80a9a56:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80a9a5a:	ea4f 4c21 	mov.w	ip, r1, asr #16
 80a9a5e:	f846 2b04 	str.w	r2, [r6], #4
 80a9a62:	e7de      	b.n	80a9a22 <__mdiff+0xb2>
 80a9a64:	3f01      	subs	r7, #1
 80a9a66:	e7e8      	b.n	80a9a3a <__mdiff+0xca>

080a9a68 <__ulp>:
 80a9a68:	4b11      	ldr	r3, [pc, #68]	; (80a9ab0 <__ulp+0x48>)
 80a9a6a:	400b      	ands	r3, r1
 80a9a6c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80a9a70:	2b00      	cmp	r3, #0
 80a9a72:	dd02      	ble.n	80a9a7a <__ulp+0x12>
 80a9a74:	2000      	movs	r0, #0
 80a9a76:	4619      	mov	r1, r3
 80a9a78:	4770      	bx	lr
 80a9a7a:	425b      	negs	r3, r3
 80a9a7c:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80a9a80:	f04f 0000 	mov.w	r0, #0
 80a9a84:	f04f 0100 	mov.w	r1, #0
 80a9a88:	ea4f 5223 	mov.w	r2, r3, asr #20
 80a9a8c:	da04      	bge.n	80a9a98 <__ulp+0x30>
 80a9a8e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80a9a92:	fa43 f102 	asr.w	r1, r3, r2
 80a9a96:	4770      	bx	lr
 80a9a98:	f1a2 0314 	sub.w	r3, r2, #20
 80a9a9c:	2b1e      	cmp	r3, #30
 80a9a9e:	bfd6      	itet	le
 80a9aa0:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80a9aa4:	2301      	movgt	r3, #1
 80a9aa6:	fa22 f303 	lsrle.w	r3, r2, r3
 80a9aaa:	4618      	mov	r0, r3
 80a9aac:	4770      	bx	lr
 80a9aae:	bf00      	nop
 80a9ab0:	7ff00000 	.word	0x7ff00000

080a9ab4 <__b2d>:
 80a9ab4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a9ab8:	6907      	ldr	r7, [r0, #16]
 80a9aba:	f100 0914 	add.w	r9, r0, #20
 80a9abe:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 80a9ac2:	f857 6c04 	ldr.w	r6, [r7, #-4]
 80a9ac6:	f1a7 0804 	sub.w	r8, r7, #4
 80a9aca:	4630      	mov	r0, r6
 80a9acc:	f7ff fd95 	bl	80a95fa <__hi0bits>
 80a9ad0:	f1c0 0320 	rsb	r3, r0, #32
 80a9ad4:	280a      	cmp	r0, #10
 80a9ad6:	600b      	str	r3, [r1, #0]
 80a9ad8:	491f      	ldr	r1, [pc, #124]	; (80a9b58 <__b2d+0xa4>)
 80a9ada:	dc17      	bgt.n	80a9b0c <__b2d+0x58>
 80a9adc:	45c1      	cmp	r9, r8
 80a9ade:	bf28      	it	cs
 80a9ae0:	2200      	movcs	r2, #0
 80a9ae2:	f1c0 0c0b 	rsb	ip, r0, #11
 80a9ae6:	fa26 f30c 	lsr.w	r3, r6, ip
 80a9aea:	bf38      	it	cc
 80a9aec:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80a9af0:	ea43 0501 	orr.w	r5, r3, r1
 80a9af4:	f100 0315 	add.w	r3, r0, #21
 80a9af8:	fa06 f303 	lsl.w	r3, r6, r3
 80a9afc:	fa22 f20c 	lsr.w	r2, r2, ip
 80a9b00:	ea43 0402 	orr.w	r4, r3, r2
 80a9b04:	4620      	mov	r0, r4
 80a9b06:	4629      	mov	r1, r5
 80a9b08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a9b0c:	45c1      	cmp	r9, r8
 80a9b0e:	bf2e      	itee	cs
 80a9b10:	2200      	movcs	r2, #0
 80a9b12:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80a9b16:	f1a7 0808 	subcc.w	r8, r7, #8
 80a9b1a:	f1b0 030b 	subs.w	r3, r0, #11
 80a9b1e:	d016      	beq.n	80a9b4e <__b2d+0x9a>
 80a9b20:	f1c3 0720 	rsb	r7, r3, #32
 80a9b24:	fa22 f107 	lsr.w	r1, r2, r7
 80a9b28:	45c8      	cmp	r8, r9
 80a9b2a:	fa06 f603 	lsl.w	r6, r6, r3
 80a9b2e:	ea46 0601 	orr.w	r6, r6, r1
 80a9b32:	bf94      	ite	ls
 80a9b34:	2100      	movls	r1, #0
 80a9b36:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 80a9b3a:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 80a9b3e:	fa02 f003 	lsl.w	r0, r2, r3
 80a9b42:	40f9      	lsrs	r1, r7
 80a9b44:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80a9b48:	ea40 0401 	orr.w	r4, r0, r1
 80a9b4c:	e7da      	b.n	80a9b04 <__b2d+0x50>
 80a9b4e:	4614      	mov	r4, r2
 80a9b50:	ea46 0501 	orr.w	r5, r6, r1
 80a9b54:	e7d6      	b.n	80a9b04 <__b2d+0x50>
 80a9b56:	bf00      	nop
 80a9b58:	3ff00000 	.word	0x3ff00000

080a9b5c <__d2b>:
 80a9b5c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80a9b60:	461c      	mov	r4, r3
 80a9b62:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 80a9b66:	2101      	movs	r1, #1
 80a9b68:	4690      	mov	r8, r2
 80a9b6a:	f7ff fc7f 	bl	80a946c <_Balloc>
 80a9b6e:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80a9b72:	f3c4 540a 	ubfx	r4, r4, #20, #11
 80a9b76:	4607      	mov	r7, r0
 80a9b78:	bb2c      	cbnz	r4, 80a9bc6 <__d2b+0x6a>
 80a9b7a:	9301      	str	r3, [sp, #4]
 80a9b7c:	f1b8 0300 	subs.w	r3, r8, #0
 80a9b80:	d026      	beq.n	80a9bd0 <__d2b+0x74>
 80a9b82:	4668      	mov	r0, sp
 80a9b84:	9300      	str	r3, [sp, #0]
 80a9b86:	f7ff fd58 	bl	80a963a <__lo0bits>
 80a9b8a:	9900      	ldr	r1, [sp, #0]
 80a9b8c:	b1f0      	cbz	r0, 80a9bcc <__d2b+0x70>
 80a9b8e:	9a01      	ldr	r2, [sp, #4]
 80a9b90:	f1c0 0320 	rsb	r3, r0, #32
 80a9b94:	fa02 f303 	lsl.w	r3, r2, r3
 80a9b98:	430b      	orrs	r3, r1
 80a9b9a:	40c2      	lsrs	r2, r0
 80a9b9c:	617b      	str	r3, [r7, #20]
 80a9b9e:	9201      	str	r2, [sp, #4]
 80a9ba0:	9b01      	ldr	r3, [sp, #4]
 80a9ba2:	2b00      	cmp	r3, #0
 80a9ba4:	bf14      	ite	ne
 80a9ba6:	2102      	movne	r1, #2
 80a9ba8:	2101      	moveq	r1, #1
 80a9baa:	61bb      	str	r3, [r7, #24]
 80a9bac:	6139      	str	r1, [r7, #16]
 80a9bae:	b1c4      	cbz	r4, 80a9be2 <__d2b+0x86>
 80a9bb0:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80a9bb4:	4404      	add	r4, r0
 80a9bb6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80a9bba:	6034      	str	r4, [r6, #0]
 80a9bbc:	6028      	str	r0, [r5, #0]
 80a9bbe:	4638      	mov	r0, r7
 80a9bc0:	b002      	add	sp, #8
 80a9bc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a9bc6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a9bca:	e7d6      	b.n	80a9b7a <__d2b+0x1e>
 80a9bcc:	6179      	str	r1, [r7, #20]
 80a9bce:	e7e7      	b.n	80a9ba0 <__d2b+0x44>
 80a9bd0:	a801      	add	r0, sp, #4
 80a9bd2:	f7ff fd32 	bl	80a963a <__lo0bits>
 80a9bd6:	2101      	movs	r1, #1
 80a9bd8:	9b01      	ldr	r3, [sp, #4]
 80a9bda:	6139      	str	r1, [r7, #16]
 80a9bdc:	617b      	str	r3, [r7, #20]
 80a9bde:	3020      	adds	r0, #32
 80a9be0:	e7e5      	b.n	80a9bae <__d2b+0x52>
 80a9be2:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80a9be6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80a9bea:	6030      	str	r0, [r6, #0]
 80a9bec:	6918      	ldr	r0, [r3, #16]
 80a9bee:	f7ff fd04 	bl	80a95fa <__hi0bits>
 80a9bf2:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80a9bf6:	6029      	str	r1, [r5, #0]
 80a9bf8:	e7e1      	b.n	80a9bbe <__d2b+0x62>

080a9bfa <__ratio>:
 80a9bfa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a9bfe:	4688      	mov	r8, r1
 80a9c00:	4669      	mov	r1, sp
 80a9c02:	4681      	mov	r9, r0
 80a9c04:	f7ff ff56 	bl	80a9ab4 <__b2d>
 80a9c08:	460f      	mov	r7, r1
 80a9c0a:	4604      	mov	r4, r0
 80a9c0c:	460d      	mov	r5, r1
 80a9c0e:	4640      	mov	r0, r8
 80a9c10:	a901      	add	r1, sp, #4
 80a9c12:	f7ff ff4f 	bl	80a9ab4 <__b2d>
 80a9c16:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80a9c1a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80a9c1e:	468b      	mov	fp, r1
 80a9c20:	eba3 0c02 	sub.w	ip, r3, r2
 80a9c24:	e9dd 3200 	ldrd	r3, r2, [sp]
 80a9c28:	1a9b      	subs	r3, r3, r2
 80a9c2a:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80a9c2e:	2b00      	cmp	r3, #0
 80a9c30:	bfd5      	itete	le
 80a9c32:	460a      	movle	r2, r1
 80a9c34:	462a      	movgt	r2, r5
 80a9c36:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80a9c3a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80a9c3e:	bfd8      	it	le
 80a9c40:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80a9c44:	465b      	mov	r3, fp
 80a9c46:	4602      	mov	r2, r0
 80a9c48:	4639      	mov	r1, r7
 80a9c4a:	4620      	mov	r0, r4
 80a9c4c:	f7fc f80a 	bl	80a5c64 <__aeabi_ddiv>
 80a9c50:	b003      	add	sp, #12
 80a9c52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a9c56 <__copybits>:
 80a9c56:	3901      	subs	r1, #1
 80a9c58:	b570      	push	{r4, r5, r6, lr}
 80a9c5a:	1149      	asrs	r1, r1, #5
 80a9c5c:	6914      	ldr	r4, [r2, #16]
 80a9c5e:	3101      	adds	r1, #1
 80a9c60:	f102 0314 	add.w	r3, r2, #20
 80a9c64:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80a9c68:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80a9c6c:	1f05      	subs	r5, r0, #4
 80a9c6e:	42a3      	cmp	r3, r4
 80a9c70:	d30c      	bcc.n	80a9c8c <__copybits+0x36>
 80a9c72:	1aa3      	subs	r3, r4, r2
 80a9c74:	3b11      	subs	r3, #17
 80a9c76:	f023 0303 	bic.w	r3, r3, #3
 80a9c7a:	3211      	adds	r2, #17
 80a9c7c:	42a2      	cmp	r2, r4
 80a9c7e:	bf88      	it	hi
 80a9c80:	2300      	movhi	r3, #0
 80a9c82:	4418      	add	r0, r3
 80a9c84:	2300      	movs	r3, #0
 80a9c86:	4288      	cmp	r0, r1
 80a9c88:	d305      	bcc.n	80a9c96 <__copybits+0x40>
 80a9c8a:	bd70      	pop	{r4, r5, r6, pc}
 80a9c8c:	f853 6b04 	ldr.w	r6, [r3], #4
 80a9c90:	f845 6f04 	str.w	r6, [r5, #4]!
 80a9c94:	e7eb      	b.n	80a9c6e <__copybits+0x18>
 80a9c96:	f840 3b04 	str.w	r3, [r0], #4
 80a9c9a:	e7f4      	b.n	80a9c86 <__copybits+0x30>

080a9c9c <__any_on>:
 80a9c9c:	f100 0214 	add.w	r2, r0, #20
 80a9ca0:	6900      	ldr	r0, [r0, #16]
 80a9ca2:	114b      	asrs	r3, r1, #5
 80a9ca4:	4298      	cmp	r0, r3
 80a9ca6:	b510      	push	{r4, lr}
 80a9ca8:	db11      	blt.n	80a9cce <__any_on+0x32>
 80a9caa:	dd0a      	ble.n	80a9cc2 <__any_on+0x26>
 80a9cac:	f011 011f 	ands.w	r1, r1, #31
 80a9cb0:	d007      	beq.n	80a9cc2 <__any_on+0x26>
 80a9cb2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80a9cb6:	fa24 f001 	lsr.w	r0, r4, r1
 80a9cba:	fa00 f101 	lsl.w	r1, r0, r1
 80a9cbe:	428c      	cmp	r4, r1
 80a9cc0:	d10b      	bne.n	80a9cda <__any_on+0x3e>
 80a9cc2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80a9cc6:	4293      	cmp	r3, r2
 80a9cc8:	d803      	bhi.n	80a9cd2 <__any_on+0x36>
 80a9cca:	2000      	movs	r0, #0
 80a9ccc:	bd10      	pop	{r4, pc}
 80a9cce:	4603      	mov	r3, r0
 80a9cd0:	e7f7      	b.n	80a9cc2 <__any_on+0x26>
 80a9cd2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80a9cd6:	2900      	cmp	r1, #0
 80a9cd8:	d0f5      	beq.n	80a9cc6 <__any_on+0x2a>
 80a9cda:	2001      	movs	r0, #1
 80a9cdc:	e7f6      	b.n	80a9ccc <__any_on+0x30>

080a9cde <_calloc_r>:
 80a9cde:	b538      	push	{r3, r4, r5, lr}
 80a9ce0:	fb02 f501 	mul.w	r5, r2, r1
 80a9ce4:	4629      	mov	r1, r5
 80a9ce6:	f7f9 fe7b 	bl	80a39e0 <_malloc_r>
 80a9cea:	4604      	mov	r4, r0
 80a9cec:	b118      	cbz	r0, 80a9cf6 <_calloc_r+0x18>
 80a9cee:	462a      	mov	r2, r5
 80a9cf0:	2100      	movs	r1, #0
 80a9cf2:	f7fc ffd9 	bl	80a6ca8 <memset>
 80a9cf6:	4620      	mov	r0, r4
 80a9cf8:	bd38      	pop	{r3, r4, r5, pc}
	...

080a9cfc <nan>:
 80a9cfc:	2000      	movs	r0, #0
 80a9cfe:	4901      	ldr	r1, [pc, #4]	; (80a9d04 <nan+0x8>)
 80a9d00:	4770      	bx	lr
 80a9d02:	bf00      	nop
 80a9d04:	7ff80000 	.word	0x7ff80000

080a9d08 <nanf>:
 80a9d08:	4800      	ldr	r0, [pc, #0]	; (80a9d0c <nanf+0x4>)
 80a9d0a:	4770      	bx	lr
 80a9d0c:	7fc00000 	.word	0x7fc00000

080a9d10 <__ascii_wctomb>:
 80a9d10:	4603      	mov	r3, r0
 80a9d12:	4608      	mov	r0, r1
 80a9d14:	b141      	cbz	r1, 80a9d28 <__ascii_wctomb+0x18>
 80a9d16:	2aff      	cmp	r2, #255	; 0xff
 80a9d18:	d904      	bls.n	80a9d24 <__ascii_wctomb+0x14>
 80a9d1a:	228a      	movs	r2, #138	; 0x8a
 80a9d1c:	f04f 30ff 	mov.w	r0, #4294967295
 80a9d20:	601a      	str	r2, [r3, #0]
 80a9d22:	4770      	bx	lr
 80a9d24:	2001      	movs	r0, #1
 80a9d26:	700a      	strb	r2, [r1, #0]
 80a9d28:	4770      	bx	lr
	...

080a9d2c <__env_lock>:
 80a9d2c:	4801      	ldr	r0, [pc, #4]	; (80a9d34 <__env_lock+0x8>)
 80a9d2e:	f7ff bb88 	b.w	80a9442 <__retarget_lock_acquire_recursive>
 80a9d32:	bf00      	nop
 80a9d34:	200006aa 	.word	0x200006aa

080a9d38 <__env_unlock>:
 80a9d38:	4801      	ldr	r0, [pc, #4]	; (80a9d40 <__env_unlock+0x8>)
 80a9d3a:	f7ff bb84 	b.w	80a9446 <__retarget_lock_release_recursive>
 80a9d3e:	bf00      	nop
 80a9d40:	200006aa 	.word	0x200006aa

080a9d44 <__aeabi_fcmpun>:
 80a9d44:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a9d48:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a9d4c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a9d50:	d102      	bne.n	80a9d58 <__aeabi_fcmpun+0x14>
 80a9d52:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80a9d56:	d108      	bne.n	80a9d6a <__aeabi_fcmpun+0x26>
 80a9d58:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80a9d5c:	d102      	bne.n	80a9d64 <__aeabi_fcmpun+0x20>
 80a9d5e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80a9d62:	d102      	bne.n	80a9d6a <__aeabi_fcmpun+0x26>
 80a9d64:	f04f 0000 	mov.w	r0, #0
 80a9d68:	4770      	bx	lr
 80a9d6a:	f04f 0001 	mov.w	r0, #1
 80a9d6e:	4770      	bx	lr

080a9d70 <__aeabi_ldivmod>:
 80a9d70:	b97b      	cbnz	r3, 80a9d92 <__aeabi_ldivmod+0x22>
 80a9d72:	b972      	cbnz	r2, 80a9d92 <__aeabi_ldivmod+0x22>
 80a9d74:	2900      	cmp	r1, #0
 80a9d76:	bfbe      	ittt	lt
 80a9d78:	2000      	movlt	r0, #0
 80a9d7a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80a9d7e:	e006      	blt.n	80a9d8e <__aeabi_ldivmod+0x1e>
 80a9d80:	bf08      	it	eq
 80a9d82:	2800      	cmpeq	r0, #0
 80a9d84:	bf1c      	itt	ne
 80a9d86:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80a9d8a:	f04f 30ff 	movne.w	r0, #4294967295
 80a9d8e:	f7fc be4d 	b.w	80a6a2c <__aeabi_idiv0>
 80a9d92:	f1ad 0c08 	sub.w	ip, sp, #8
 80a9d96:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80a9d9a:	2900      	cmp	r1, #0
 80a9d9c:	db09      	blt.n	80a9db2 <__aeabi_ldivmod+0x42>
 80a9d9e:	2b00      	cmp	r3, #0
 80a9da0:	db1a      	blt.n	80a9dd8 <__aeabi_ldivmod+0x68>
 80a9da2:	f7fc fce1 	bl	80a6768 <__udivmoddi4>
 80a9da6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a9daa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a9dae:	b004      	add	sp, #16
 80a9db0:	4770      	bx	lr
 80a9db2:	4240      	negs	r0, r0
 80a9db4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a9db8:	2b00      	cmp	r3, #0
 80a9dba:	db1b      	blt.n	80a9df4 <__aeabi_ldivmod+0x84>
 80a9dbc:	f7fc fcd4 	bl	80a6768 <__udivmoddi4>
 80a9dc0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a9dc4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a9dc8:	b004      	add	sp, #16
 80a9dca:	4240      	negs	r0, r0
 80a9dcc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a9dd0:	4252      	negs	r2, r2
 80a9dd2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a9dd6:	4770      	bx	lr
 80a9dd8:	4252      	negs	r2, r2
 80a9dda:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a9dde:	f7fc fcc3 	bl	80a6768 <__udivmoddi4>
 80a9de2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a9de6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a9dea:	b004      	add	sp, #16
 80a9dec:	4240      	negs	r0, r0
 80a9dee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a9df2:	4770      	bx	lr
 80a9df4:	4252      	negs	r2, r2
 80a9df6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a9dfa:	f7fc fcb5 	bl	80a6768 <__udivmoddi4>
 80a9dfe:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a9e02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a9e06:	b004      	add	sp, #16
 80a9e08:	4252      	negs	r2, r2
 80a9e0a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a9e0e:	4770      	bx	lr

080a9e10 <__aeabi_d2lz>:
 80a9e10:	b538      	push	{r3, r4, r5, lr}
 80a9e12:	460c      	mov	r4, r1
 80a9e14:	4605      	mov	r5, r0
 80a9e16:	4621      	mov	r1, r4
 80a9e18:	4628      	mov	r0, r5
 80a9e1a:	2200      	movs	r2, #0
 80a9e1c:	2300      	movs	r3, #0
 80a9e1e:	f7fc f869 	bl	80a5ef4 <__aeabi_dcmplt>
 80a9e22:	b928      	cbnz	r0, 80a9e30 <__aeabi_d2lz+0x20>
 80a9e24:	4628      	mov	r0, r5
 80a9e26:	4621      	mov	r1, r4
 80a9e28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a9e2c:	f7fc bc7e 	b.w	80a672c <__aeabi_d2ulz>
 80a9e30:	4628      	mov	r0, r5
 80a9e32:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 80a9e36:	f7fc fc79 	bl	80a672c <__aeabi_d2ulz>
 80a9e3a:	4240      	negs	r0, r0
 80a9e3c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a9e40:	bd38      	pop	{r3, r4, r5, pc}
 80a9e42:	bf00      	nop

080a9e44 <dynalib_user>:
 80a9e44:	0021 080a 0061 080a 0089 080a 008d 080a     !...a...........
 80a9e54:	0000 0000 616d 4378 7275 6572 746e 3143     ....maxCurrentC1
 80a9e64:	093e 654e 2077 6573 7074 696f 746e 7320     >.New setpoint s
 80a9e74:	7465 6120 2074 2000 6d41 7370 002e 616d     et at . Amps..ma
 80a9e84:	4378 7275 6572 746e 3243 093e 654e 2077     xCurrentC2>.New 
 80a9e94:	6573 7074 696f 746e 7320 7465 6120 2074     setpoint set at 
 80a9ea4:	7400 7572 0065 6166 736c 0065 7041 7270     .true.false.Appr
 80a9eb4:	616f 6863 7920 756f 2072 6163 6472 7420     oach your card t
 80a9ec4:	206f 6874 2065 6572 6461 7265 2e2e 002e     o the reader....
 80a9ed4:	0045 6843 7261 6567 2072 5600 6c6f 6174     E.Charger .Volta
 80a9ee4:	6567 203a 6400 6469 6e20 746f 7220 6365     ge: .did not rec
 80a9ef4:	6965 6576 6520 6f6e 6775 2068 6f76 746c     eive enough volt
 80a9f04:	6761 2065 6164 6174 4300 7275 6572 746e     age data.Current
 80a9f14:	203a 6400 6469 6e20 746f 7220 6365 6965     : .did not recei
 80a9f24:	6576 6520 6f6e 6775 2068 7563 7272 6e65     ve enough curren
 80a9f34:	2074 6164 6174 4600 6572 7571 6e65 7963     t data.Frequency
 80a9f44:	203a 6400 6469 6e20 746f 7220 6365 6965     : .did not recei
 80a9f54:	6576 6520 6f6e 6775 2068 7266 7165 6575     ve enough freque
 80a9f64:	636e 2079 6164 6174 5000 776f 7265 203a     ncy data.Power: 
 80a9f74:	6400 6469 6e20 746f 7220 6365 6965 6576     .did not receive
 80a9f84:	6520 6f6e 6775 2068 6f70 6577 2072 6164      enough power da
 80a9f94:	6174 4500 656e 6772 3a79 0020 6964 2064     ta.Energy: .did 
 80a9fa4:	6f6e 2074 6572 6563 7669 2065 6e65 756f     not receive enou
 80a9fb4:	6867 6520 656e 6772 2079 6164 6174 6c00     gh energy data.l
 80a9fc4:	6f6f 7270 6165 3e64 5309 7265 6169 206c     oopread>.Serial 
 80a9fd4:	6552 6461 4520 7272 726f 0021 3030 4800     Read Error!.00.H
 80a9fe4:	4e41 7665 6573 702f 6f68 6f74 436e 6e6f     ANevse/photonCon
 80a9ff4:	6576 7472 6465 002f 7573 6363 7365 6673     verted/.successf
 80aa004:	6c75 7320 6174 7472 6e20 7765 6320 6168     ul start new cha
 80aa014:	6772 0065 6863 7261 6567 2072 7369 6620     rge.charger is f
 80aa024:	6572 2c65 6220 7475 7920 756f 6120 726c     ree, but you alr
 80aa034:	6165 7964 7320 6977 6570 2064 6874 2065     eady swiped the 
 80aa044:	6163 6472 6920 206e 6874 2065 616c 7473     card in the last
 80aa054:	3220 2030 6573 0063 6863 7261 6567 2072      20 sec.charger 
 80aa064:	7369 6f20 6363 7075 6569 2064 7962 6120     is occupied by a
 80aa074:	6f6e 6874 7265 7520 6573 0072 7573 6363     nother user.succ
 80aa084:	7365 6673 6c75 7320 6f74 2070 6863 7261     essful stop char
 80aa094:	6567 7320 7365 6973 6e6f 7900 756f 6a20     ge session.you j
 80aa0a4:	7375 2074 7473 7261 6574 2064 2061 6863     ust started a ch
 80aa0b4:	7261 6567 6120 2074 6874 7369 6320 6168     arge at this cha
 80aa0c4:	6772 7265 202c 7562 2074 6168 2064 6e61     rger, but had an
 80aa0d4:	746f 6568 2072 6f63 736e 6365 7475 7669     other consecutiv
 80aa0e4:	2065 4652 4449 7320 6977 6570 7720 7469     e RFID swipe wit
 80aa0f4:	6968 206e 3032 7320 6365 7900 756f 6120     hin 20 sec.you a
 80aa104:	6572 6120 726c 6165 7964 6320 6168 6772     re already charg
 80aa114:	6e69 2067 7461 6120 6f6e 6874 7265 6320     ing at another c
 80aa124:	6168 6772 7265 7300 6375 6563 7373 7566     harger.successfu
 80aa134:	206c 4652 4449 7220 6165 2c64 6220 7475     l RFID read, but
 80aa144:	7920 756f 6120 6572 6e20 746f 6920 206e      you are not in 
 80aa154:	6874 2065 7375 7265 696c 7473 4500 5252     the userlist.ERR
 80aa164:	524f 203a 6e75 6e6b 776f 206e 6373 6e65     OR: unknown scen
 80aa174:	7261 6f69 4d00 5451 3e54 4309 6e6f 656e     ario.MQTT>.Conne
 80aa184:	7463 6e69 2067 6f74 4d20 5451 2054 7262     cting to MQTT br
 80aa194:	6b6f 7265 2e2e 002e 5645 502d 6f68 6f74     oker....EV-Photo
 80aa1a4:	316e 4d00 5451 3e54 4309 6e6f 656e 7463     n1.MQTT>.Connect
 80aa1b4:	6465 4800 4e41 452f 656e 6772 4d79 7465     ed.HAN/EnergyMet
 80aa1c4:	7265 4800 4e41 7665 6573 612f 6c6c 776f     er.HANevse/allow
 80aa1d4:	7355 7265 4d00 5451 3e54 4309 6e6f 656e     User.MQTT>.Conne
 80aa1e4:	7463 6f69 206e 6166 6c69 6465 4d00 5451     ction failed.MQT
 80aa1f4:	3e54 5209 7465 7972 6e69 2e67 2e2e 5600     T>.Retrying....V
 80aa204:	0031 3256 5600 0033 3149 4900 0032 3349     1.V2.V3.I1.I2.I3
 80aa214:	4600 5500 6573 4972 0044 6f53 6b63 7465     .F.UserID.Socket
 80aa224:	4449 2500 756c 4800 4e41 7665 6573 702f     ID.%lu.HANevse/p
 80aa234:	6f68 6f74 4d6e 6165 7573 6572 2500 646c     hotonMeasure.%ld
 80aa244:	2000 0030 6572 6461 6143 6472 093e 4955     . 0.readCard>.UI
 80aa254:	2044 6174 2067 6e6f 6320 6168 6772 7265     D tag on charger
 80aa264:	3a31 5500 6573 4972 0064 6843 7261 6567     1:.UserId.Charge
 80aa274:	0072 7453 7261 5474 6d69 0065 4148 654e     r.StartTime.HANe
 80aa284:	7376 2f65 7075 6164 6574 7355 7265 7200     vse/updateUser.r
 80aa294:	6165 4364 7261 3e64 5509 4449 7420 6761     eadCard>.UID tag
 80aa2a4:	6f20 206e 6863 7261 6567 3272 003a 614c      on charger2:.La
 80aa2b4:	6574 7473 7453 7261 5474 6d69 3e65 0009     testStartTime>..
 80aa2c4:	202c 5400 6d69 6f65 7475 6320 6168 6772     , .Timeout charg
 80aa2d4:	7265 4e00 206f 4449 7300 6977 6374 5468     er.No ID.switchT
 80aa2e4:	7365 0074 616d 4378 7275 6572 746e 3143     est.maxCurrentC1
 80aa2f4:	6d00 7861 7543 7272 6e65 4374 0032 6572     .maxCurrentC2.re
 80aa304:	6573 4f74 696c 656d 0078 7270 676f 6f4d     setOlimex.progMo
 80aa314:	6564 6c4f 786d 7200 7365 7465 6150 7472     deOlmx.resetPart
 80aa324:	6369 006c 6957 6966 6953 6e67 6c61 6900     icl.WifiSignal.i
 80aa334:	696e 5274 4946 0044 7563 7272 6e65 5374     nitRFID.currentS
 80aa344:	7274 5300 6168 6572 6156 0072 6f54 6970     tr.ShareVar.Topi
 80aa354:	0063 7262 6b6f 7265 682e 7669 6d65 2e71     c.broker.hivemq.
 80aa364:	6f63 006d 6f53 6b63 7465 0073 3939 4800     com.Sockets.99.H
 80aa374:	4e41 7665 6573 452f 656e 6772 4d79 7465     ANevse/EnergyMet
 80aa384:	7265 4d00 5451 3e54 4309 6c61 626c 6361     er.MQTT>.Callbac
 80aa394:	206b 7566 636e 6974 6e6f 6920 2073 6163     k function is ca
 80aa3a4:	6c6c 6465 6120 3a74 0020 0000               lled at: ...

080aa3b0 <_ZTV16JsonWriterStaticILj512EE>:
	...
 80aa3b8:	024d 080a 0261 080a 0400 514d 5454 0004     M...a.....MQTT..
 80aa3c8:	4d06 4951 6473 0370 3025 7834 5c00 2575     .MQIsdp.%04x.\u%
 80aa3d8:	3430 0058 2e25 662a 2500 0066               04X.%.*f.%f.

080aa3e4 <_ZTV10JsonBuffer>:
	...
 80aa3ec:	298d 080a 29a9 080a                         .)...)..

080aa3f4 <_ZTV10JsonParser>:
	...
 80aa3fc:	29e5 080a 2a09 080a                         .)...*..

080aa404 <_ZTV10JsonWriter>:
	...
 80aa40c:	29bd 080a 29d1 080a 6977 6972 676e 5400     .)...)..wiring.T
 80aa41c:	5043 6c43 6569 746e 7320 636f 656b 3d74     CPClient socket=
 80aa42c:	7825 0000                                   %x..

080aa430 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80aa438:	3bbb 080a 3be1 080a 4003 080a 3bef 080a     .;...;...@...;..
 80aa448:	3bbd 080a                                   .;..

080aa44c <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...

080aa454 <_ZTV9TCPClient>:
	...
 80aa45c:	3bf5 080a 3c29 080a 3b77 080a 3b91 080a     .;..)<..w;...;..
 80aa46c:	3e05 080a 3c8b 080a 3c5d 080a 3bb9 080a     .>...<..]<...;..
 80aa47c:	3d25 080a 4009 080a 3cbf 080a 3e79 080a     %=...@...<..y>..
 80aa48c:	3f27 080a 3edf 080a 3ba1 080a 3eed 080a     '?...>...;...>..
 80aa49c:	3c3d 080a 616e 006e 6e69 0066 766f 0066     =<..nan.inf.ovf.
 80aa4ac:	7061 0070 2b25 3330 3a64 3025 7532 2500     app.%+03d:%02u.%
 80aa4bc:	2d59 6d25 252d 5464 4825 253a 3a4d 5325     Y-%m-%dT%H:%M:%S
 80aa4cc:	7a25 6100 6373 6974 656d 0000               %z.asctime..

080aa4d8 <_ZTV9IPAddress>:
	...
 80aa4e0:	4baf 080a 4b9f 080a 4ba1 080a               .K...K...K..

080aa4ec <_ZTV9USBSerial>:
	...
 80aa4f4:	4c91 080a 4cf7 080a 4ccf 080a 447d 080a     .L...L...L..}D..
 80aa504:	4cc1 080a 4c93 080a 4ca3 080a 4cf1 080a     .L...L...L...L..
 80aa514:	4cb3 080a 4c8d 080a                         .L...L..

080aa51c <_ZTV11USARTSerial>:
	...
 80aa524:	4df5 080a 4e5d 080a 4e39 080a 447d 080a     .M..]N..9N..}D..
 80aa534:	4e09 080a 4e25 080a 4e17 080a 4e33 080a     .N..%N...N..3N..
 80aa544:	4df7 080a 4dfb 080a                         .M...M..

080aa54c <_ZTV7TwoWire>:
	...
 80aa554:	4f2d 080a 4f77 080a 4f4f 080a 4f2f 080a     -O..wO..OO../O..
 80aa564:	4f57 080a 4f5f 080a 4f67 080a 4f6f 080a     WO.._O..gO..oO..

080aa574 <_ZTVN5spark9WiFiClassE>:
	...
 80aa57c:	5053 080a 5049 080a 503f 080a 4faf 080a     SP..IP..?P...O..
 80aa58c:	4713 080a 5033 080a 5027 080a 501f 080a     .G..3P..'P...P..
 80aa59c:	5015 080a 500b 080a 4fc7 080a               .P...P...O..

080aa5a8 <_ZTV10WiFiSignal>:
	...
 80aa5b0:	4fa9 080a 4fb9 080a 4fab 080a 505d 080a     .O...O...O..]P..
 80aa5c0:	508d 080a 50b1 080a 50e1 080a               .P...P...P..

080aa5cc <_ZTVN5spark12NetworkClassE>:
	...
 80aa5d4:	51c1 080a 51cb 080a 51d5 080a 51df 080a     .Q...Q...Q...Q..
 80aa5e4:	51e9 080a 51f5 080a 5201 080a 520d 080a     .Q...Q...R...R..
 80aa5f4:	5215 080a 521f 080a 5229 080a               .R...R..)R..

080aa600 <_ZSt7nothrow>:
	...

080aa601 <_ZTSSt19_Sp_make_shared_tag>:
 80aa601:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
 80aa611:	6572 5f64 6174 0067 0000                     red_tag....

080aa61c <_ZTISt19_Sp_make_shared_tag>:
 80aa61c:	a65c 080a a601 080a                         \.......

080aa624 <_ZTIN10__cxxabiv117__class_type_infoE>:
 80aa624:	a6bc 080a a630 080a a6e0 080a               ....0.......

080aa630 <_ZTSN10__cxxabiv117__class_type_infoE>:
 80aa630:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
 80aa640:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
 80aa650:	0045 0000                                   E...

080aa654 <_ZTVN10__cxxabiv117__class_type_infoE>:
 80aa654:	0000 0000 a624 080a 54bd 080a 54d1 080a     ....$....T...T..
 80aa664:	5669 080a 5669 080a 553b 080a 547d 080a     iV..iV..;U..}T..
 80aa674:	5523 080a 54e5 080a 54b1 080a               #U...T...T..

080aa680 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
 80aa680:	a6bc 080a a68c 080a a624 080a               ........$...

080aa68c <_ZTSN10__cxxabiv120__si_class_type_infoE>:
 80aa68c:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
 80aa69c:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
 80aa6ac:	666e 456f 0000 0000                         nfoE....

080aa6b4 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
 80aa6b4:	0000 0000 a680 080a 5565 080a 5579 080a     ........eU..yU..
 80aa6c4:	5669 080a 5669 080a 553b 080a 547d 080a     iV..iV..;U..}T..
 80aa6d4:	563d 080a 55c9 080a 558d 080a               =V...U...U..

080aa6e0 <_ZTISt9type_info>:
 80aa6e0:	a65c 080a a6e8 080a                         \.......

080aa6e8 <_ZTSSt9type_info>:
 80aa6e8:	7453 7439 7079 5f65 6e69 6f66 2500 332e     St9type_info.%.3
 80aa6f8:	2073 2e25 7333 3325 2064 2e25 6432 253a     s %.3s%3d %.2d:%
 80aa708:	322e 3a64 2e25 6432 2520 0a64                .2d:%.2d %d..

080aa715 <day_name.4782>:
 80aa715:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
 80aa725:	6972 6153                                    riSat

080aa72a <mon_name.4783>:
 80aa72a:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
 80aa73a:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
 80aa74a:	4476 6365 0000                              vDec..

080aa750 <__month_lengths>:
 80aa750:	001f 0000 001c 0000 001f 0000 001e 0000     ................
 80aa760:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 80aa770:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 80aa780:	001f 0000 001d 0000 001f 0000 001e 0000     ................
 80aa790:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 80aa7a0:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 80aa7b0:	7325 2e25 642a 2500 2573 2e30 642a 2b00     %s%.*d.%s%0.*d.+
 80aa7c0:	2d00 2500 6432 2500 322e 2f64 2e25 6432     .-.%2d.%.2d/%.2d
 80aa7d0:	252f 322e 0064 2d59 6d25 252d 0064 2a2e     /%.2d.Y-%m-%d..*
 80aa7e0:	0075 2e25 6433 2500 6c6c 0064 2e25 6432     u.%.3d.%lld.%.2d
 80aa7f0:	253a 322e 3a64 2e25 6432 2500 302b 6c33     :%.2d:%.2d.%+03l
 80aa800:	2564 322e 646c 6900 696e 7974 0000 0000     d%.2ld.inity....

080aa810 <fpi.6203>:
 80aa810:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
 80aa820:	0000 0000                                   ....

080aa824 <fpinan.6239>:
 80aa824:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
 80aa834:	0000 0000                                   ....

080aa838 <tinytens>:
 80aa838:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
 80aa848:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
 80aa858:	6f43 64ac 0628 1168 614a 006e 6546 0062     Co.d(.h.Jan.Feb.
 80aa868:	614d 0072 7041 0072 614d 0079 754a 006e     Mar.Apr.May.Jun.
 80aa878:	754a 006c 7541 0067 6553 0070 634f 0074     Jul.Aug.Sep.Oct.
 80aa888:	6f4e 0076 6544 0063 614a 756e 7261 0079     Nov.Dec.January.
 80aa898:	6546 7262 6175 7972 4d00 7261 6863 4100     February.March.A
 80aa8a8:	7270 6c69 4a00 6e75 0065 754a 796c 4100     pril.June.July.A
 80aa8b8:	6775 7375 0074 6553 7470 6d65 6562 0072     ugust.September.
 80aa8c8:	634f 6f74 6562 0072 6f4e 6576 626d 7265     October.November
 80aa8d8:	4400 6365 6d65 6562 0072 7553 006e 6f4d     .December.Sun.Mo
 80aa8e8:	006e 7554 0065 6557 0064 6854 0075 7246     n.Tue.Wed.Thu.Fr
 80aa8f8:	0069 6153 0074 7553 646e 7961 4d00 6e6f     i.Sat.Sunday.Mon
 80aa908:	6164 0079 7554 7365 6164 0079 6557 6e64     day.Tuesday.Wedn
 80aa918:	7365 6164 0079 6854 7275 6473 7961 4600     esday.Thursday.F
 80aa928:	6972 6164 0079 6153 7574 6472 7961 2500     riday.Saturday.%
 80aa938:	3a48 4d25 253a 0053 6d25 252f 2f64 7925     H:%M:%S.%m/%d/%y
 80aa948:	2500 2061 6225 2520 2065 4825 253a 3a4d     .%a %b %e %H:%M:
 80aa958:	5325 2520 0059 4d41 5000 004d 6125 2520     %S %Y.AM.PM.%a %
 80aa968:	2062 6525 2520 3a48 4d25 253a 2053 5a25     b %e %H:%M:%S %Z
 80aa978:	2520 0059 646d 2500 3a49 4d25 253a 2053      %Y.md.%I:%M:%S 
 80aa988:	7025 0000                                   %p..

080aa98c <_C_time_locale>:
 80aa98c:	a860 080a a864 080a a868 080a a86c 080a     `...d...h...l...
 80aa99c:	a870 080a a874 080a a878 080a a87c 080a     p...t...x...|...
 80aa9ac:	a880 080a a884 080a a888 080a a88c 080a     ................
 80aa9bc:	a890 080a a898 080a a8a1 080a a8a7 080a     ................
 80aa9cc:	a870 080a a8ad 080a a8b2 080a a8b7 080a     p...............
 80aa9dc:	a8be 080a a8c8 080a a8d0 080a a8d9 080a     ................
 80aa9ec:	a8e2 080a a8e6 080a a8ea 080a a8ee 080a     ................
 80aa9fc:	a8f2 080a a8f6 080a a8fa 080a a8fe 080a     ................
 80aaa0c:	a905 080a a90c 080a a914 080a a91e 080a     ................
 80aaa1c:	a927 080a a92e 080a a937 080a a940 080a     '.......7...@...
 80aaa2c:	a949 080a a95e 080a a961 080a a964 080a     I...^...a...d...
 80aaa3c:	a890 080a a898 080a a8a1 080a a8a7 080a     ................
 80aaa4c:	a870 080a a8ad 080a a8b2 080a a8b7 080a     p...............
 80aaa5c:	a8be 080a a8c8 080a a8d0 080a a8d9 080a     ................
 80aaa6c:	a97c 080a a97f 080a a2c3 080a a2c3 080a     |...............
 80aaa7c:	a2c3 080a a2c3 080a a2c3 080a 5a54 4700     ............TZ.G
 80aaa8c:	544d 2500 3031 5e5b 2d30 2c39 2d2b 255d     MT.%10[^0-9,+-]%
 80aaa9c:	006e 254d 7568 6e25 252e 7568 6e25 252e     n.M%hu%n.%hu%n.%
 80aaaac:	7568 6e25 2f00 6825 2575 3a6e 6825 2575     hu%n./%hu%n:%hu%
 80aaabc:	3a6e 6825 2575 006e                         n:%hu%n.

080aaac4 <_ctype_>:
 80aaac4:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 80aaad4:	2020 2020 2020 2020 2020 2020 2020 2020                     
 80aaae4:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 80aaaf4:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 80aab04:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 80aab14:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 80aab24:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 80aab34:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 80aab44:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

080aabc8 <_C_numeric_locale>:
 80aabc8:	a201 080a a2c3 080a 00d8 2000 0043 4f50     ........... C.PO
 80aabd8:	4953 0058 0000 0000                         SIX.....

080aabe0 <__mprec_bigtens>:
 80aabe0:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
 80aabf0:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
 80aac00:	bf3c 7f73 4fdd 7515                         <.s..O.u

080aac08 <__mprec_tens>:
 80aac08:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
 80aac18:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
 80aac28:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
 80aac38:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
 80aac48:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
 80aac58:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
 80aac68:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
 80aac78:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
 80aac88:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
 80aac98:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
 80aaca8:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
 80aacb8:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
 80aacc8:	9db4 79d9 7843 44ea                         ...yCx.D

080aacd0 <p05.6127>:
 80aacd0:	0005 0000 0019 0000 007d 0000               ........}...

080aacdc <link_const_variable_data_end>:
 80aacdc:	080a169d 	.word	0x080a169d
 80aace0:	080a3a91 	.word	0x080a3a91
 80aace4:	080a4721 	.word	0x080a4721
 80aace8:	080a49b1 	.word	0x080a49b1
 80aacec:	080a49e9 	.word	0x080a49e9
 80aacf0:	080a51ad 	.word	0x080a51ad
 80aacf4:	080a5291 	.word	0x080a5291
 80aacf8:	080a53ad 	.word	0x080a53ad

080aacfc <link_constructors_end>:
 80aacfc:	00000000 	.word	0x00000000
